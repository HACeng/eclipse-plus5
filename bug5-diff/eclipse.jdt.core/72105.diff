commit 9a8dbf2c325d5ae6a7dd8f3876b878a799f4a5c2
Author: David Audel <daudel>
Date:   Fri Aug 20 14:45:32 2004 +0000

    bug 72105

114	0	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests_1_5.java
7	0	org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0016/Test.java
7	0	org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0017/Test.java
7	0	org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0018/Test.java
7	0	org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0019/Test.java
10	0	org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0020/Test.java
7	0	org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0021/Test.java
3	1	org.eclipse.jdt.core/buildnotes_jdt-core.html
7	13	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/ISelectionRequestor.java
4	15	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
15	0	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionParser.java
2	2	org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetToCuMapper.java
46	13	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java
1	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceType.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests_1_5.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests_1_5.java
index 9198778..ef6abbe 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests_1_5.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests_1_5.java
@@ -290,4 +290,118 @@ public void test0015() throws JavaModelException {
 		elements
 	);
 }
+/*
+ * https://bugs.eclipse.org/bugs/show_bug.cgi?id=72105
+ */
+//TODO update test when the java element for type parameter will exist
+public void test0016() throws JavaModelException {
+	ICompilationUnit cu = getCompilationUnit("Resolve", "src2", "test0016", "Test.java");
+	
+	String str = cu.getSource();
+	String selection = "T";
+	int start = str.lastIndexOf(selection);
+	int length = selection.length();
+	
+	IJavaElement[] elements = cu.codeSelect(start, length);
+	assertElementsEqual(
+		"Unexpected elements",
+		"",
+		elements
+	);
+}
+/*
+ * https://bugs.eclipse.org/bugs/show_bug.cgi?id=72105
+ */
+//TODO update test when the java element for type parameter will exist
+public void test0017() throws JavaModelException {
+	ICompilationUnit cu = getCompilationUnit("Resolve", "src2", "test0017", "Test.java");
+	
+	String str = cu.getSource();
+	String selection = "T";
+	int start = str.lastIndexOf(selection);
+	int length = selection.length();
+	
+	IJavaElement[] elements = cu.codeSelect(start, length);
+	assertElementsEqual(
+		"Unexpected elements",
+		"",
+		elements
+	);
+}
+/*
+ * https://bugs.eclipse.org/bugs/show_bug.cgi?id=72105
+ */
+//TODO update test when the java element for type parameter will exist
+public void test0018() throws JavaModelException {
+	ICompilationUnit cu = getCompilationUnit("Resolve", "src2", "test0018", "Test.java");
+	
+	String str = cu.getSource();
+	String selection = "T";
+	int start = str.lastIndexOf(selection);
+	int length = selection.length();
+	
+	IJavaElement[] elements = cu.codeSelect(start, length);
+	assertElementsEqual(
+		"Unexpected elements",
+		"",
+		elements
+	);
+}
+/*
+ * https://bugs.eclipse.org/bugs/show_bug.cgi?id=72105
+ */
+//TODO update test when the java element for type parameter will exist
+public void test0019() throws JavaModelException {
+	ICompilationUnit cu = getCompilationUnit("Resolve", "src2", "test0019", "Test.java");
+	
+	String str = cu.getSource();
+	String selection = "T";
+	int start = str.lastIndexOf(selection);
+	int length = selection.length();
+	
+	IJavaElement[] elements = cu.codeSelect(start, length);
+	assertElementsEqual(
+		"Unexpected elements",
+		"",
+		elements
+	);
+}
+/*
+ * https://bugs.eclipse.org/bugs/show_bug.cgi?id=72105
+ */
+//TODO update test when the java element for type parameter will exist
+public void test0020() throws JavaModelException {
+	ICompilationUnit cu = getCompilationUnit("Resolve", "src2", "test0020", "Test.java");
+	
+	String str = cu.getSource();
+	String selection = "T";
+	int start = str.lastIndexOf(selection);
+	int length = selection.length();
+	
+	IJavaElement[] elements = cu.codeSelect(start, length);
+	assertElementsEqual(
+		"Unexpected elements",
+		"",
+		elements
+	);
+}
+/*
+ * https://bugs.eclipse.org/bugs/show_bug.cgi?id=72105
+ */
+//TODO update test when the java element for type parameter will exist
+public void test0021() throws JavaModelException {
+	ICompilationUnit cu = getCompilationUnit("Resolve", "src2", "test0021", "Test.java");
+	
+	String str = cu.getSource();
+	String selection = "T";
+	int start = str.lastIndexOf(selection);
+	int length = selection.length();
+	
+	IJavaElement[] elements = cu.codeSelect(start, length);
+	assertElementsEqual(
+		"Unexpected elements",
+		"",
+		elements
+	);
+}
 }
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0016/Test.java b/org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0016/Test.java
new file mode 100644
index 0000000..f7442df
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0016/Test.java
@@ -0,0 +1,7 @@
+package test0016;
+
+public class Test {
+	<T> void foo() {
+	
+	}
+}
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0017/Test.java b/org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0017/Test.java
new file mode 100644
index 0000000..818690a
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0017/Test.java
@@ -0,0 +1,7 @@
+package test0017;
+
+public class Test {
+	<T> T foo() {
+		return null;
+	}
+}
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0018/Test.java b/org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0018/Test.java
new file mode 100644
index 0000000..8dfc768
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0018/Test.java
@@ -0,0 +1,7 @@
+package test0018;
+
+public class Test {
+	<T> void foo(T t) {
+	
+	}
+}
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0019/Test.java b/org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0019/Test.java
new file mode 100644
index 0000000..f28577f
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0019/Test.java
@@ -0,0 +1,7 @@
+package test0019;
+
+public class Test {
+	<T> void foo(Object o1, T t, Object o2) {
+	
+	}
+}
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0020/Test.java b/org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0020/Test.java
new file mode 100644
index 0000000..88e5d56
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0020/Test.java
@@ -0,0 +1,10 @@
+package test0020;
+
+public class Test {
+	class X<T> {
+		
+	}
+	<T> void foo(X<T> x) {
+	
+	}
+}
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0021/Test.java b/org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0021/Test.java
new file mode 100644
index 0000000..bef3297
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0021/Test.java
@@ -0,0 +1,7 @@
+package test0021;
+
+public class Test {
+	<T extends Exception> void foo() throws T {
+	
+	}
+}
diff --git a/org.eclipse.jdt.core/buildnotes_jdt-core.html b/org.eclipse.jdt.core/buildnotes_jdt-core.html
index 4512b83..9910bba 100644
--- a/org.eclipse.jdt.core/buildnotes_jdt-core.html
+++ b/org.eclipse.jdt.core/buildnotes_jdt-core.html
@@ -54,7 +54,9 @@ What's new in this drop</h2>
 </ul>
 
 <h3>Problem Reports Fixed</h3>
-<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=72230">72230</a>
+<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=72105">72105</a>
+[1.5] NPE in SelectionEngine.selectFrom 
+<br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=72230">72230</a>
 [1.5][Type Signature] IAE in createCharArrayTypeSignature 
 <br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=68506">68506</a>
 Java code formatter strips newline, leaving final line unterminated!
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/ISelectionRequestor.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/ISelectionRequestor.java
index fc511dd..0f3cf90 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/ISelectionRequestor.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/ISelectionRequestor.java
@@ -235,18 +235,13 @@ public interface ISelectionRequestor {
 	 * 		Name of the type declaring this new method.
 	 * 
 	 * @param selector char[]
-	 * 		Name of the new method.
-	 * 
-	 * @param parameterPackageNames char[][]
-	 * 		Names of the packages in which the parameter types are declared.
-	 *    	Should contain as many elements as parameterTypeNames.
+	 * 		Name of the declaring method.
 	 * 
-	 * @param parameterTypeNames char[][]
-	 * 		Names of the parameters types.
-	 *    	Should contain as many elements as parameterPackageNames.
+	 * @param selectorStart int
+	 * 		Start of the selector.
 	 * 
-	 * @param isConstructor boolean
-	 * 		Answer if the method is a constructor.
+	 * @param selectorEnd int
+	 * 		End of the selector.
 	 * 
 	 * @param typeParameterName char[]
 	 * 		Name of the type parameter.
@@ -269,9 +264,8 @@ public interface ISelectionRequestor {
 		char[] declaringTypePackageName,
 		char[] declaringTypeName,
 		char[] selector,
-		char[][] parameterPackageNames,
-		char[][] parameterTypeNames,
-		boolean isConstructor,
+		int selectorStart,
+		int selectorEnd,
 		char[] typeParameterName,
 		boolean isDeclaration,
 		int start,
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
index 0d5f9ed..460b485 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
@@ -574,22 +574,12 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 			} else if(enclosingElement instanceof MethodBinding) {
 				MethodBinding enclosingMethod = (MethodBinding) enclosingElement;
 				
-				TypeBinding[] parameterTypes = enclosingMethod.parameters;
-				int length = parameterTypes.length;
-				char[][] parameterPackageNames = new char[length][];
-				char[][] parameterTypeNames = new char[length][];
-				for (int i = 0; i < length; i++) {
-					parameterPackageNames[i] = parameterTypes[i].qualifiedPackageName();
-					parameterTypeNames[i] = parameterTypes[i].qualifiedSourceName();
-				}
-				
 				this.requestor.acceptMethodTypeParameter(
 					enclosingMethod.declaringClass.qualifiedPackageName(),
 					enclosingMethod.declaringClass.qualifiedSourceName(),
 					enclosingMethod.selector,
-					parameterPackageNames,
-					parameterTypeNames,
-					enclosingMethod.isConstructor(),
+					enclosingMethod.sourceStart(),
+					enclosingMethod.sourceEnd(),
 					typeVariableBinding.sourceName(),
 					false,
 					this.actualSelectionStart,
@@ -1048,9 +1038,8 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 						packageName,
 						qualifiedSourceName,
 						method.selector,
-						null, // SelectionRequestor does not need of parameters type for declaration
-						null, // SelectionRequestor does not need of parameters type for declaration
-						method.isConstructor(),
+						method.sourceStart,
+						method.sourceEnd,
 						methodTypeParameter.name,
 						true,
 						this.actualSelectionStart,
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionParser.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionParser.java
index 11374a0..2e68a7e 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionParser.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionParser.java
@@ -876,4 +876,19 @@ protected void updateRecoveryState() {
 	*/
 	this.recoveryTokenCheck();
 }
+
+public  String toString() {
+	String s = ""; //$NON-NLS-1$
+	s = s + "elementKindStack : int[] = {"; //$NON-NLS-1$
+	for (int i = 0; i <= elementPtr; i++) {
+		s = s + String.valueOf(elementKindStack[i]) + ","; //$NON-NLS-1$ //$NON-NLS-2$
+	}
+	s = s + "}\n"; //$NON-NLS-1$
+	s = s + "elementInfoStack : int[] = {"; //$NON-NLS-1$
+	for (int i = 0; i <= elementPtr; i++) {
+		s = s + String.valueOf(elementInfoStack[i]) + ","; //$NON-NLS-1$ //$NON-NLS-2$
+	}
+	s = s + "}\n"; //$NON-NLS-1$
+	return s + super.toString();
+}
 }
diff --git a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetToCuMapper.java b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetToCuMapper.java
index 0b38eef..095d53d 100644
--- a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetToCuMapper.java
+++ b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetToCuMapper.java
@@ -296,8 +296,8 @@ public ISelectionRequestor getSelectionRequestor(final ISelectionRequestor origi
 		public void acceptTypeParameter(char[] declaringTypePackageName, char[] declaringTypeName, char[] typeParameterName, boolean isDeclaration, int start, int end) {
 			originalRequestor.acceptTypeParameter(declaringTypePackageName, declaringTypeName, typeParameterName, isDeclaration, start, end);
 		}
-		public void acceptMethodTypeParameter(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, boolean isConstructor, char[] typeParameterName, boolean isDeclaration, int start, int end) {
-			originalRequestor.acceptMethodTypeParameter(declaringTypePackageName, declaringTypeName, selector, parameterPackageNames, parameterTypeNames, isConstructor, typeParameterName, isDeclaration, start, end);
+		public void acceptMethodTypeParameter(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, int selectorStart, int selectorEnd, char[] typeParameterName,boolean isDeclaration, int start, int end) {
+			originalRequestor.acceptMethodTypeParameter(declaringTypePackageName, declaringTypeName, selector, selectorStart, selectorEnd, typeParameterName, isDeclaration, start, end);
 		}
 	};
 }
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java
index 70d045c..ac0d6c6 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java
@@ -423,20 +423,53 @@ public void acceptTypeParameter(char[] declaringTypePackageName, char[] declarin
 		System.out.println(">)"); //$NON-NLS-1$
 	}
 }
-public void acceptMethodTypeParameter(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, boolean isConstructor, char[] typeParameterName, boolean isDeclaration, int start, int end) {
-	// TODO missing implementation
+public void acceptMethodTypeParameter(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector,int selectorStart, int selectorEnd, char[] typeParameterName, boolean isDeclaration, int start, int end) {
+	IType type = resolveTypeByLocation(declaringTypePackageName, declaringTypeName,
+			NameLookup.ACCEPT_CLASSES | NameLookup.ACCEPT_INTERFACES,
+			selectorStart, selectorEnd);
 	
-	if(SelectionEngine.DEBUG){
-		System.out.print("SELECTION - acceptTypeParameter("); //$NON-NLS-1$
-		System.out.print(declaringTypePackageName);
-		System.out.print('.');
-		System.out.print(declaringTypeName);
-		System.out.print('.');
-		System.out.print('<');
-		System.out.print(typeParameterName);
-		System.out.print('>');
-		System.out.print(selector);
-		System.out.println("(...))"); //$NON-NLS-1$
+	if(type != null) {
+		IMethod method = null;
+		
+		String name = new String(selector);
+		IMethod[] methods = null;
+		
+		try {
+			methods = type.getMethods();
+			done : for (int i = 0; i < methods.length; i++) {
+				ISourceRange range = methods[i].getNameRange();
+				if(range.getOffset() >= selectorStart
+						&& range.getOffset() + range.getLength() <= selectorEnd
+						&& methods[i].getElementName().equals(name)) {
+					method = methods[i];
+					break done;
+				}
+			}
+		} catch (JavaModelException e) {
+			//nothing to do
+		}
+
+		if(method == null) {
+//			addElement(type);
+		} else {
+//			 TODO missing implementation
+//			if(???) {
+//				addElement(method);
+//			} else {
+				if(SelectionEngine.DEBUG){
+					System.out.print("SELECTION - acceptTypeParameter("); //$NON-NLS-1$
+					System.out.print(declaringTypePackageName);
+					System.out.print('.');
+					System.out.print(declaringTypeName);
+					System.out.print('.');
+					System.out.print('<');
+					System.out.print(typeParameterName);
+					System.out.print('>');
+					System.out.print(selector);
+					System.out.println("(...))"); //$NON-NLS-1$
+				}
+//			}
+		}
 	}
 }
 /*
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceType.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceType.java
index 4afb1f2..ddedd45 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceType.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceType.java
@@ -746,7 +746,7 @@ public String[][] resolveType(String typeName, WorkingCopyOwner owner) throws Ja
 		public void acceptTypeParameter(char[] declaringTypePackageName, char[] declaringTypeName, char[] typeParameterName, boolean isDeclaration, int start, int end) {
 			// ignore
 		}
-		public void acceptMethodTypeParameter(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, boolean isConstructor, char[] typeParameterName, boolean isDeclaration, int start, int end) {
+		public void acceptMethodTypeParameter(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, int selectorStart, int selcetorEnd, char[] typeParameterName, boolean isDeclaration, int start, int end) {
 			// ignore
 		}
 

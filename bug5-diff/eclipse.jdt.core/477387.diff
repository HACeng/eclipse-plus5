commit 1fcdecd709448362b5ae1730e5cc9b4e2ef1709b
Author: Jay Arthanareeswaran <jarthana@in.ibm.com>
Date:   Wed Sep 30 22:49:29 2015 +0530

    Bug 477387 - [1.9] JDT tests are incredibly slow with JRE 9

-	-	org.eclipse.jdt.compiler.apt.tests/lib/apttestprocessors.jar
17	1	org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/ElementProc.java
15	2	org.eclipse.jdt.compiler.apt.tests/src/org/eclipse/jdt/compiler/apt/tests/FileManagerTests.java
38	31	org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/ClasspathJar.java
5	5	org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java
36	8	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/JimageUtil.java
7	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFile.java
6	35	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java
22	3	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java
2	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ModulePackageFragmentRoot.java
4	0	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java
1	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java
4	2	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ClasspathJar.java
11	2	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/HandleFactory.java
4	0	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/TypeNameMatchRequestorWrapper.java
2	2	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/AddJimageFileToIndex.java
2	4	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java
diff --git a/org.eclipse.jdt.compiler.apt.tests/lib/apttestprocessors.jar b/org.eclipse.jdt.compiler.apt.tests/lib/apttestprocessors.jar
index d60c3ce..9faff6b 100644
Binary files a/org.eclipse.jdt.compiler.apt.tests/lib/apttestprocessors.jar and b/org.eclipse.jdt.compiler.apt.tests/lib/apttestprocessors.jar differ
diff --git a/org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/ElementProc.java b/org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/ElementProc.java
index 8a172e69..7f16660 100644
--- a/org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/ElementProc.java
+++ b/org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/ElementProc.java
@@ -1,10 +1,14 @@
 /*******************************************************************************
- * Copyright (c) 2007, 2012 BEA Systems, Inc. and others
+ * Copyright (c) 2007, 2015 BEA Systems, Inc. and others
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *    wharley@bea.com - initial API and implementation
  *    akurtakov@gmail.com - fix compilation with Java 7
@@ -148,6 +152,9 @@ public class ElementProc extends BaseProcessor {
 		if(!bug300408()) {
 			return false;
 		}
+		if (!examineTypesInPackage()) {
+			return false;
+		}
 		
 		reportSuccess();
 		return false;
@@ -1009,4 +1016,13 @@ public class ElementProc extends BaseProcessor {
 		}
 		return true;
 	}
+	private boolean examineTypesInPackage() {
+		PackageElement pack = _elementUtils.getPackageElement("java.util.concurrent");
+		List<? extends Element> enclosedElements = pack.getEnclosedElements();
+		if (enclosedElements.size() == 0) {
+			reportError("Should find types in package java.util.concurrent");
+			return false;
+		}
+		return true;
+	}
 }
diff --git a/org.eclipse.jdt.compiler.apt.tests/src/org/eclipse/jdt/compiler/apt/tests/FileManagerTests.java b/org.eclipse.jdt.compiler.apt.tests/src/org/eclipse/jdt/compiler/apt/tests/FileManagerTests.java
index f1af4b2..3d5859f 100644
--- a/org.eclipse.jdt.compiler.apt.tests/src/org/eclipse/jdt/compiler/apt/tests/FileManagerTests.java
+++ b/org.eclipse.jdt.compiler.apt.tests/src/org/eclipse/jdt/compiler/apt/tests/FileManagerTests.java
@@ -5,6 +5,10 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *    wharley@bea.com - initial API and implementation
  *    IBM Corporation - fixed a resource leak warning
@@ -24,6 +28,7 @@ import java.util.List;
 import java.util.Locale;
 import java.util.Set;
 
+import javax.lang.model.SourceVersion;
 import javax.tools.JavaFileManager;
 import javax.tools.JavaFileObject;
 import javax.tools.StandardJavaFileManager;
@@ -166,6 +171,7 @@ public class FileManagerTests extends TestCase {
 	}
 
 	public void testBug460085() {
+		if (isOnJRE9()) return;
 		try {
 			boolean found = false;
 			EclipseFileManager fileManager = null;
@@ -182,10 +188,17 @@ public class FileManagerTests extends TestCase {
 			fileManager.close();
 			assertTrue("rt.jar not found", found);
 		} catch (IOException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
+			fail(e.getMessage());
 		} 
 	}
+	private boolean isOnJRE9() {
+		try {
+			SourceVersion.valueOf("RELEASE_9");
+		} catch(IllegalArgumentException iae) {
+			return false;
+		}
+		return true;
+	}
 
 	public void testBug466878_getResource_defaultPackage() throws Exception {
 		EclipseFileManager fileManager = new EclipseFileManager(Locale.getDefault(), Charset.defaultCharset());
diff --git a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/ClasspathJar.java b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/ClasspathJar.java
index 9889402..a42449c 100644
--- a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/ClasspathJar.java
+++ b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/ClasspathJar.java
@@ -24,9 +24,10 @@ import java.nio.file.FileVisitResult;
 import java.nio.file.attribute.BasicFileAttributes;
 import java.util.ArrayList;
 import java.util.Enumeration;
-import java.util.Hashtable;
+import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Set;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipFile;
 
@@ -48,7 +49,7 @@ protected File file;
 protected ZipFile zipFile;
 protected ZipFile annotationZipFile;
 protected boolean closeZipFileAtEnd;
-protected Hashtable packageCache;
+private Set<String> packageCache;
 protected List<String> annotationPaths;
 protected boolean isJimage;
 
@@ -148,7 +149,7 @@ public boolean hasAnnotationFileFor(String qualifiedTypeName) {
 public char[][][] findTypeNames(final String qualifiedPackageName) {
 	if (!isPackage(qualifiedPackageName))
 		return null; // most common case
-
+	final char[] packageArray = qualifiedPackageName.toCharArray();
 	final ArrayList answers = new ArrayList();
 	if (this.isJimage) {
 		try {
@@ -156,19 +157,20 @@ public char[][][] findTypeNames(final String qualifiedPackageName) {
 
 				@Override
 				public FileVisitResult visitPackage(java.nio.file.Path dir, java.nio.file.Path mod, BasicFileAttributes attrs) throws IOException {
-					if (!dir.toString().equals(qualifiedPackageName)) {
-						return FileVisitResult.SKIP_SUBTREE;
+					if (qualifiedPackageName.startsWith(dir.toString())) {
+						return FileVisitResult.CONTINUE;	
 					}
-					return FileVisitResult.CONTINUE;
+					return FileVisitResult.SKIP_SUBTREE;
 				}
 
 				@Override
 				public FileVisitResult visitFile(java.nio.file.Path dir, java.nio.file.Path mod, BasicFileAttributes attrs) throws IOException {
-					char[] packageArray = qualifiedPackageName.toCharArray();
-					answers.add(
-							CharOperation.arrayConcat(
-								CharOperation.splitOn('/', packageArray),
-								dir.toString().toCharArray()));
+					if (!dir.getParent().toString().equals(qualifiedPackageName)) {
+						return FileVisitResult.CONTINUE;
+					}
+					String fileName = dir.getName(dir.getNameCount() - 1).toString();
+					// The path already excludes the folders and all the '/', hence the -1 for last index of '/'
+					addTypeName(answers, fileName, -1, packageArray);
 					return FileVisitResult.CONTINUE;
 				}
 
@@ -177,7 +179,7 @@ public char[][][] findTypeNames(final String qualifiedPackageName) {
 					return FileVisitResult.CONTINUE;
 				}
 
-			});
+			}, JimageUtil.NOTIFY_ALL);
 		} catch (IOException e) {
 			// Ignore and move on
 		}
@@ -187,20 +189,12 @@ public char[][][] findTypeNames(final String qualifiedPackageName) {
 
 			// add the package name & all of its parent packages
 			int last = fileName.lastIndexOf('/');
-			while (last > 0) {
+			if (last > 0) {
 				// extract the package name
 				String packageName = fileName.substring(0, last);
 				if (!qualifiedPackageName.equals(packageName))
 					continue nextEntry;
-				int indexOfDot = fileName.lastIndexOf('.');
-				if (indexOfDot != -1) {
-					String typeName = fileName.substring(last + 1, indexOfDot);
-					char[] packageArray = packageName.toCharArray();
-					answers.add(
-						CharOperation.arrayConcat(
-							CharOperation.splitOn('/', packageArray),
-							typeName.toCharArray()));
-				}
+				addTypeName(answers, fileName, last, packageArray);
 			}
 		}
 	}
@@ -208,10 +202,21 @@ public char[][][] findTypeNames(final String qualifiedPackageName) {
 	if (size != 0) {
 		char[][][] result = new char[size][][];
 		answers.toArray(result);
-		return null;
+		return result;
 	}
 	return null;
 }
+
+protected void addTypeName(final ArrayList answers, String fileName, int last, char[] packageName) {
+	int indexOfDot = fileName.lastIndexOf('.');
+	if (indexOfDot != -1) {
+		String typeName = fileName.substring(last + 1, indexOfDot);
+		answers.add(
+			CharOperation.arrayConcat(
+				CharOperation.splitOn('/', packageName),
+				typeName.toCharArray()));
+	}
+}
 public void initialize() throws IOException {
 	if (this.zipFile == null && !this.isJimage) {
 		this.zipFile = new ZipFile(this.file);
@@ -223,18 +228,18 @@ protected void addToPackageCache(String fileName, boolean endsWithSep) {
 	while (last > 0) {
 		// extract the package name
 		String packageName = fileName.substring(0, last);
-		if (this.packageCache.containsKey(packageName))
+		if (this.packageCache.contains(packageName))
 			return;
-		this.packageCache.put(packageName, packageName);
+		this.packageCache.add(packageName);
 		last = packageName.lastIndexOf('/');
 	}
 }
 public synchronized boolean isPackage(String qualifiedPackageName) {
 	if (this.packageCache != null)
-		return this.packageCache.containsKey(qualifiedPackageName);
+		return this.packageCache.contains(qualifiedPackageName);
 
-	this.packageCache = new Hashtable(41);
-	this.packageCache.put(Util.EMPTY_STRING, Util.EMPTY_STRING);
+	this.packageCache = new HashSet<>(41);
+	this.packageCache.add(Util.EMPTY_STRING);
 	if (this.isJimage) {
 		try {
 			JimageUtil.walkModuleImage(this.file, new JimageUtil.JimageVisitor<java.nio.file.Path>() {
@@ -255,7 +260,7 @@ public synchronized boolean isPackage(String qualifiedPackageName) {
 					return FileVisitResult.CONTINUE;
 				}
 
-			});
+			}, JimageUtil.NOTIFY_PACKAGES);
 		} catch (IOException e) {
 			// Ignore and move on
 		}
@@ -265,7 +270,7 @@ public synchronized boolean isPackage(String qualifiedPackageName) {
 			addToPackageCache(fileName, false);
 		}
 	}
-	return this.packageCache.containsKey(qualifiedPackageName);
+	return this.packageCache.contains(qualifiedPackageName);
 }
 public void reset() {
 	if (this.closeZipFileAtEnd) {
@@ -286,8 +291,10 @@ public void reset() {
 			this.annotationZipFile = null;
 		}
 	}
-	if (!this.isJimage)
+	if (!this.isJimage || this.annotationPaths != null) {
 		this.packageCache = null;
+		this.annotationPaths = null;
+	}
 }
 public String toString() {
 	return "Classpath for jar file " + this.file.getPath(); //$NON-NLS-1$
diff --git a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java
index 676a856..96446b4 100644
--- a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java
+++ b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java
@@ -118,7 +118,7 @@ public class FileSystem implements INameEnvironment, SuffixConstants {
 	protected Classpath[] classpaths;
 	Set knownFileNames;
 	protected boolean annotationsFromClasspath; // should annotation files be read from the classpath (vs. explicit separate path)?
-	private static HashMap<File, Classpath> jimages = null;
+	private static HashMap<File, Classpath> JIMAGES = null;
 
 /*
 	classPathNames is a collection is Strings representing the full path of each class path
@@ -193,14 +193,14 @@ public static Classpath getClasspath(String classpathName, String encoding,
 			} else if (destinationPath == null) {
 				// class file only mode
 				if (format == Util.JIMAGE_FILE) {
-					if (jimages == null) {
-						jimages = new HashMap<>();
+					if (JIMAGES == null) {
+						JIMAGES = new HashMap<>();
 					} else {
-						result = jimages.get(file);
+						result = JIMAGES.get(file);
 					}
 					if (result == null) {
 						result = new ClasspathJar(file, true, accessRuleSet, null, true);
-						jimages.put(file, result);
+						JIMAGES.put(file, result);
 					}
 				} else {
 					result = new ClasspathJar(file, true, accessRuleSet, null, false);
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/JimageUtil.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/JimageUtil.java
index 0ef39e4..9e761d8 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/JimageUtil.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/JimageUtil.java
@@ -1,3 +1,17 @@
+/*******************************************************************************
+ * Copyright (c) 2015 IBM Corporation.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
 package org.eclipse.jdt.internal.compiler.util;
 
 import java.io.File;
@@ -28,7 +42,11 @@ public class JimageUtil {
 	static final String DEFAULT_PACKAGE = ""; //$NON-NLS-1$
 	static final String MODULES_ON_DEMAND = System.getProperty("modules"); //$NON-NLS-1$
 	static URI JRT_URI = URI.create("jrt:/"); //$NON-NLS-1$
-
+	public static int NOTIFY_FILES = 0x0001;
+	public static int NOTIFY_PACKAGES = 0x0002;
+	public static int NOTIFY_MODULES = 0x0004;
+	public static int NOTIFY_ALL = NOTIFY_FILES | NOTIFY_PACKAGES | NOTIFY_MODULES;
+			
 	private static Map<File, JimageFileSystem> images = null;
 
 	public interface JimageVisitor<T> {
@@ -91,14 +109,17 @@ public class JimageUtil {
 	 *  /modules/$MODULE/$PATH
 	 *  /packages/$PACKAGE/$MODULE 
 	 *  The latter provides quick look up of the module that contains a particular package. However,
-	 *  this method only notifies its clients of the entries within the modules sub-directory.
+	 *  this method only notifies its clients of the entries within the modules sub-directory. The
+	 *  clients can decide which notifications they want to receive. See {@link JimageUtil#NOTIFY_ALL},
+	 *  {@link JimageUtil#NOTIFY_FILES}, {@link JimageUtil#NOTIFY_PACKAGES} and {@link JimageUtil#NOTIFY_MODULES}.
 	 *  
 	 * @param image a java.io.File handle to the JRT image.
 	 * @param visitor an instance of JimageVisitor to be notified of the entries in the JRT image.
+	 * @param notify flag indicating the notifications the client is interested in.
 	 * @throws IOException
 	 */
-	public static void walkModuleImage(File image, final JimageUtil.JimageVisitor<java.nio.file.Path> visitor) throws IOException {
-		getJimageSystem(image).walkModuleImage(visitor, false);
+	public static void walkModuleImage(File image, final JimageUtil.JimageVisitor<java.nio.file.Path> visitor, int notify) throws IOException {
+		getJimageSystem(image).walkModuleImage(visitor, false, notify);
 	}
 
 	public static InputStream getContentFromJimage(File jimage, String fileName, String module) throws IOException {
@@ -127,7 +148,7 @@ class JimageFileSystem {
 	}
 	void initialize(File image) {
 		try {
-			walkModuleImage(null, true);
+			walkModuleImage(null, true, 0 /* doesn't matter */);
 		} catch (IOException e) {
 			// Continue to exist as a dummy file system?
 		}
@@ -185,7 +206,7 @@ class JimageFileSystem {
 		return null;
 	}
 
-	void walkModuleImage(final JimageUtil.JimageVisitor<java.nio.file.Path> visitor, boolean visitPackageMapping) throws IOException {
+	void walkModuleImage(final JimageUtil.JimageVisitor<java.nio.file.Path> visitor, boolean visitPackageMapping, final int notify) throws IOException {
 		java.nio.file.FileSystem fs = FileSystems.getFileSystem(JimageUtil.JRT_URI);
 		Iterable<java.nio.file.Path> roots = fs.getRootDirectories();
 		for (java.nio.file.Path path : roots) {
@@ -198,18 +219,25 @@ class JimageFileSystem {
 							public FileVisitResult preVisitDirectory(java.nio.file.Path dir, BasicFileAttributes attrs) throws IOException {
 								int count = dir.getNameCount();
 								if (count == 2) {
+									// e.g. /modules/java.base
 									java.nio.file.Path mod = dir.getName(1);
 									if (JimageUtil.MODULES_ON_DEMAND != null && JimageUtil.MODULES_ON_DEMAND.indexOf(mod.toString()) == -1) {
 										return FileVisitResult.SKIP_SUBTREE;
 									}
-									return visitor.visitModule(mod);
+									return ((notify & JimageUtil.NOTIFY_MODULES) == 0) ? 
+											FileVisitResult.CONTINUE : visitor.visitModule(mod);
+								}
+								if (dir == subdir || count < 3 || (notify & JimageUtil.NOTIFY_PACKAGES) == 0) {
+									// We are dealing with a module or not client is not interested in packages
+									return FileVisitResult.CONTINUE;
 								}
-								if (dir == subdir || count < 3) return FileVisitResult.CONTINUE;
 								return visitor.visitPackage(dir.subpath(2, count), dir.getName(1), attrs);
 							}
 
 							@Override
 							public FileVisitResult visitFile(java.nio.file.Path file, BasicFileAttributes attrs) throws IOException {
+								if ((notify & JimageUtil.NOTIFY_FILES) == 0)
+									return FileVisitResult.CONTINUE;
 								int count = file.getNameCount();
 								// This happens when a file in a default package is present. E.g. /modules/some.module/file.name
 								if (count == 3) {
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFile.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFile.java
index 399faba..16ce305 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFile.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFile.java
@@ -373,7 +373,13 @@ private IBinaryType getJarBinaryTypeInfo(PackageFragment pkg, boolean fullyIniti
 		String entryName = Util.concatWith(pkg.names, getElementName(), '/');
 		byte[] contents = getClassFileContent(root, entryName);
 		if (contents != null) {
-			String fileName = root.getHandleIdentifier() + IDependent.JAR_FILE_ENTRY_SEPARATOR + entryName;
+			String fileName;
+			if (root.isModule()) {
+				fileName = root.getHandleIdentifier() + IDependent.JAR_FILE_ENTRY_SEPARATOR + 
+						root.getElementName() + IDependent.JAR_FILE_ENTRY_SEPARATOR + entryName;
+			} else {
+				fileName = root.getHandleIdentifier() + IDependent.JAR_FILE_ENTRY_SEPARATOR + entryName;
+			}
 			ClassFileReader reader = new ClassFileReader(contents, fileName.toCharArray(), fullyInitialize);
 			if (root.getKind() == IPackageFragmentRoot.K_BINARY) {
 				JavaProject javaProject = (JavaProject) getAncestor(IJavaElement.JAVA_PROJECT);
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java
index fdc4163..220e968 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java
@@ -14,12 +14,9 @@
  *******************************************************************************/
 package org.eclipse.jdt.internal.core;
 
-import java.io.IOException;
 import java.net.URL;
-import java.nio.file.FileVisitResult;
-import java.nio.file.Path;
-import java.nio.file.attribute.BasicFileAttributes;
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Enumeration;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipException;
 import java.util.zip.ZipFile;
@@ -91,36 +88,10 @@ public class JarPackageFragmentRoot extends PackageFragmentRoot {
 			// always create the default package
 			rawPackageInfo.put(CharOperation.NO_STRINGS, new ArrayList[] { EMPTY_LIST, EMPTY_LIST });
 
-			if (this.isModule()) {
-				try {
-					org.eclipse.jdt.internal.compiler.util.JimageUtil.walkModuleImage(getPath().toFile(),
-									new org.eclipse.jdt.internal.compiler.util.JimageUtil.JimageVisitor<Path>() {
-						@Override
-						public FileVisitResult visitPackage(Path dir, Path mod, BasicFileAttributes attrs) throws IOException {
-							initRawPackageInfo(rawPackageInfo, dir.toString(), true, compliance);
-							return FileVisitResult.CONTINUE;
-						}
-
-						@Override
-						public FileVisitResult visitFile(Path path, Path mod, BasicFileAttributes attrs) throws IOException {
-							initRawPackageInfo(rawPackageInfo, path.toString(), false, compliance);
-							return FileVisitResult.CONTINUE;
-						}
-
-						@Override
-						public FileVisitResult visitModule(Path mod) throws IOException {
-							return FileVisitResult.CONTINUE;
-						}
-					});
-				} catch (IOException e) {
-					// We are not reading any specific Jimage file, so, move on for now
-				}
-			} else {
-				jar = getJar();
-				for (Enumeration e= jar.entries(); e.hasMoreElements();) {
-					ZipEntry member= (ZipEntry) e.nextElement();
-					initRawPackageInfo(rawPackageInfo, member.getName(), member.isDirectory(), compliance);
-				}
+			jar = getJar();
+			for (Enumeration e= jar.entries(); e.hasMoreElements();) {
+				ZipEntry member= (ZipEntry) e.nextElement();
+				initRawPackageInfo(rawPackageInfo, member.getName(), member.isDirectory(), compliance);
 			}
 			// loop through all of referenced packages, creating package fragments if necessary
 			// and cache the entry names in the rawPackageInfo table
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java
index 2525f3c..41e868f 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java
@@ -5,6 +5,10 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *     IBM Corporation - initial API and implementation
  *     Stephan Herrmann <stephan@cs.tu-berlin.de> - Contributions for
@@ -692,6 +696,9 @@ public class JavaProject
 			// Do nothing, idea is to avoid this being read in JarPackageFragmentRoot as a Jar.
 			return true;
 		}
+		public boolean isModule() {
+			return true;
+		}
 	}
 
 	private void loadModulesInJimage(final IPath imagePath, final ObjectVector roots, final Map rootToResolvedEntries, 
@@ -717,7 +724,7 @@ public class JavaProject
 						rootToResolvedEntries.put(root, ((ClasspathEntry)resolvedEntry).combineWith((ClasspathEntry) referringEntry));
 					return FileVisitResult.SKIP_SUBTREE;
 				}
-			});
+			}, JimageUtil.NOTIFY_MODULES);
 		} catch (IOException e) {
 			Util.log(IStatus.ERROR, "Error reading modules from " + imagePath.toOSString()); //$NON-NLS-1$
 		}
@@ -1658,6 +1665,7 @@ public class JavaProject
 	 * @see JavaElement
 	 */
 	public IJavaElement getHandleFromMemento(String token, MementoTokenizer memento, WorkingCopyOwner owner) {
+		String mod = null;
 		switch (token.charAt(0)) {
 			case JEM_PACKAGEFRAGMENTROOT:
 				String rootPath = IPackageFragmentRoot.DEFAULT_PACKAGEROOT_PATH;
@@ -1667,11 +1675,22 @@ public class JavaProject
 					// https://bugs.eclipse.org/bugs/show_bug.cgi?id=331821
 					if (token == MementoTokenizer.PACKAGEFRAGMENT || token == MementoTokenizer.COUNT) {
 						break;
+					} else if (token == MementoTokenizer.PACKAGEFRAGMENTROOT) {
+						if (memento.hasMoreTokens()) {
+							token = memento.nextToken();
+							if (token != null) {
+								mod = token;
+							
+							}
+						}
+						continue;
 					}
 					rootPath += token;
 				}
-				JavaElement root = (JavaElement)getPackageFragmentRoot(new Path(rootPath));
-				if (token != null && token.charAt(0) == JEM_PACKAGEFRAGMENT) {
+				JavaElement root = (mod == null) ?
+						(JavaElement)getPackageFragmentRoot(new Path(rootPath)) :
+							new ModulePackageFragmentRoot(new Path(rootPath), mod, this);
+				if (token != null && (token.charAt(0) == JEM_PACKAGEFRAGMENT)) {
 					return root.getHandleFromMemento(token, memento, owner);
 				} else {
 					return root.getHandleFromMemento(memento, owner);
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ModulePackageFragmentRoot.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ModulePackageFragmentRoot.java
index 8ddd1a0..6c8d23a 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ModulePackageFragmentRoot.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ModulePackageFragmentRoot.java
@@ -26,6 +26,7 @@ import org.eclipse.core.runtime.IStatus;
 import org.eclipse.jdt.core.JavaModelException;
 import org.eclipse.jdt.core.compiler.CharOperation;
 import org.eclipse.jdt.internal.compiler.impl.CompilerOptions;
+import org.eclipse.jdt.internal.compiler.util.JimageUtil;
 import org.eclipse.jdt.internal.core.util.HashtableOfArrayToObject;
 import org.eclipse.jdt.internal.core.util.Util;
 
@@ -77,7 +78,7 @@ public class ModulePackageFragmentRoot extends JarPackageFragmentRoot {
 					}
 					return FileVisitResult.CONTINUE;
 				}
-			});
+			}, JimageUtil.NOTIFY_ALL);
 		} catch (IOException e) {
 			Util.log(IStatus.ERROR, "Error reading modules" + toStringWithAncestors()); //$NON-NLS-1$
 		}
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java
index 9677d03..1fbbc84 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java
@@ -482,6 +482,10 @@ protected void getHandleMemento(StringBuffer buff) {
 	((JavaElement)getParent()).getHandleMemento(buff);
 	buff.append(getHandleMementoDelimiter());
 	escapeMementoName(buff, path.toString());
+	if (isModule()) {
+		buff.append(getHandleMementoDelimiter());
+		escapeMementoName(buff, getElementName());
+	}
 }
 /**
  * @see IPackageFragmentRoot
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java
index 851a21a..f2f419c 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceMapper.java
@@ -539,7 +539,7 @@ public class SourceMapper
 			try {
 				JimagePackageNamesAdderVisitor jimagePackageNamesAdderVisitor = new JimagePackageNamesAdderVisitor(firstLevelPackageNames, 
 						sourceLevel, complianceLevel, containsADefaultPackage, containsJavaSource, root);
-				org.eclipse.jdt.internal.compiler.util.JimageUtil.walkModuleImage(new File(root.toString()), jimagePackageNamesAdderVisitor);
+				org.eclipse.jdt.internal.compiler.util.JimageUtil.walkModuleImage(new File(root.toString()), jimagePackageNamesAdderVisitor, JimageUtil.NOTIFY_FILES);
 				sourceLevel = jimagePackageNamesAdderVisitor.sourceLevel;
 				complianceLevel = jimagePackageNamesAdderVisitor.complianceLevel;
 				containsADefaultPackage = jimagePackageNamesAdderVisitor.containsADefaultPackage;
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ClasspathJar.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ClasspathJar.java
index 8de80b4..8208f53 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ClasspathJar.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ClasspathJar.java
@@ -23,6 +23,7 @@ import org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader;
 import org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException;
 import org.eclipse.jdt.internal.compiler.env.AccessRuleSet;
 import org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer;
+import org.eclipse.jdt.internal.compiler.util.JimageUtil;
 import org.eclipse.jdt.internal.compiler.util.SimpleLookupTable;
 import org.eclipse.jdt.internal.compiler.util.SimpleSet;
 import org.eclipse.jdt.internal.compiler.util.SuffixConstants;
@@ -99,7 +100,7 @@ static SimpleSet findPackageSet(ClasspathJar jar) {
 				public FileVisitResult visitModule(Path mod) throws IOException {
 					return FileVisitResult.CONTINUE;
 				}
-			});
+			}, JimageUtil.NOTIFY_PACKAGES);
 		} catch (IOException e) {
 			// TODO: Should report better
 		}
@@ -188,7 +189,8 @@ public void cleanup() {
 			this.annotationZipFile = null;
 		}
 	}
-	this.knownPackageNames = null;
+	if (!this.isJimage)
+		this.knownPackageNames = null;
 }
 
 public boolean equals(Object o) {
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/HandleFactory.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/HandleFactory.java
index 0cfc4b9..66ee5b1 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/HandleFactory.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/HandleFactory.java
@@ -1,10 +1,14 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2014 IBM Corporation and others.
+ * Copyright (c) 2000, 2015 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *     IBM Corporation - initial API and implementation
  *******************************************************************************/
@@ -94,6 +98,11 @@ public class HandleFactory {
 				this.packageHandles= new HashtableOfArrayToObject(5);
 			}
 			// create handle
+			String module = null;
+			if (this.lastPkgFragmentRoot.isModule()) {
+				module = resourcePath.substring(separatorIndex + 1, 
+						(separatorIndex = resourcePath.lastIndexOf(IJavaSearchScope.JAR_FILE_ENTRY_SEPARATOR)));
+			}
 			String classFilePath= resourcePath.substring(separatorIndex + 1);
 			String[] simpleNames = new Path(classFilePath).segments();
 			String[] pkgName;
@@ -106,7 +115,7 @@ public class HandleFactory {
 			}
 			IPackageFragment pkgFragment= (IPackageFragment) this.packageHandles.get(pkgName);
 			if (pkgFragment == null) {
-				pkgFragment= this.lastPkgFragmentRoot.getPackageFragment(pkgName);
+				pkgFragment= this.lastPkgFragmentRoot.getPackageFragment(pkgName, module);
 				this.packageHandles.put(pkgName, pkgFragment);
 			}
 			IClassFile classFile= pkgFragment.getClassFile(simpleNames[length]);
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/TypeNameMatchRequestorWrapper.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/TypeNameMatchRequestorWrapper.java
index 0b2122b..79010cb 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/TypeNameMatchRequestorWrapper.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/TypeNameMatchRequestorWrapper.java
@@ -5,6 +5,10 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *     IBM Corporation - initial API and implementation
  *     Stephan Herrmann - Contribution for bug 215139
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/AddJimageFileToIndex.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/AddJimageFileToIndex.java
index b5b64c1..303029b 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/AddJimageFileToIndex.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/AddJimageFileToIndex.java
@@ -242,7 +242,7 @@ public class AddJimageFileToIndex extends IndexRequest {
 						indexedFileNames.put(paths[i], FILE_INDEX_STATE.DELETED);
 					
 					org.eclipse.jdt.internal.compiler.util.JimageUtil.walkModuleImage(new File(fileName), 
-							new JimageTraverser(indexedFileNames));
+							new JimageTraverser(indexedFileNames), JimageUtil.NOTIFY_FILES);
 
 					boolean needToReindex = indexedFileNames.elementSize != max; // a new file was added
 					if (!needToReindex) {
@@ -274,7 +274,7 @@ public class AddJimageFileToIndex extends IndexRequest {
 				
 				File jimage = new File(fileName);
 				org.eclipse.jdt.internal.compiler.util.JimageUtil.walkModuleImage(jimage, 
-						new JimageIndexer(jimage, SearchEngine.getDefaultSearchParticipant(), index, container, this.manager));
+						new JimageIndexer(jimage, SearchEngine.getDefaultSearchParticipant(), index, container, this.manager), JimageUtil.NOTIFY_FILES);
 
 				if(this.forceIndexUpdate) {
 					this.manager.savePreBuiltIndex(index);
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java
index 1126a3d..fef7832 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java
@@ -76,7 +76,6 @@ import org.eclipse.jdt.internal.core.JavaModelManager;
 import org.eclipse.jdt.internal.core.JavaProject;
 import org.eclipse.jdt.internal.core.LambdaFactory;
 import org.eclipse.jdt.internal.core.LocalVariable;
-import org.eclipse.jdt.internal.core.ModulePackageFragmentRoot;
 import org.eclipse.jdt.internal.core.NameLookup;
 import org.eclipse.jdt.internal.core.Openable;
 import org.eclipse.jdt.internal.core.PackageFragment;
@@ -256,11 +255,10 @@ public static ClassFileReader classFileReader(IType type) {
 			return Util.newClassFileReader(((JavaElement) type).resource());
 
 		String rootPath = root.getPath().toOSString();
-		if (org.eclipse.jdt.internal.compiler.util.Util.archiveFormat(rootPath) == org.eclipse.jdt.internal.compiler.util.Util.JIMAGE_FILE) {
+		if (root.isModule()) {
 			String classFileName = classFile.getElementName();
 			String path = Util.concatWith(pkg.names, classFileName, '/');
-			String module = root.isModule() ? ((ModulePackageFragmentRoot) root).getElementName() : null;
-			return ClassFileReader.readFromJimage(new File(rootPath), path, module);
+			return ClassFileReader.readFromJimage(new File(rootPath), path, root.getElementName());
 		} else {
 			ZipFile zipFile = null;
 			try {

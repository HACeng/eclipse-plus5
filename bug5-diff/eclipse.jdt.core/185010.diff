commit b8436cec91c88fa7fc7b0bd6dedc9fb67e331ccc
Author: Walter Harley <wharley>
Date:   Wed May 2 00:56:19 2007 +0000

    bug 185010 - catch processor exceptions lower on the stack during reconcile
    bug 178690 - processors should be able to disable reconcile-time type generation

13	1	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java
14	22	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptCompilationParticipant.java
32	1	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/AbstractCompilationEnv.java
3	2	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/JavaSourceFilePrintWriter.java
41	1	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java
6	0	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptPreferenceConstants.java
6	0	org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/dispatch/IdeProcessingEnvImpl.java
2	1	org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/filer/IdeJavaSourceFileWriter.java
7	0	org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/helloworld/HelloWorldAnnotationProcessorFactory.java
7	0	org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/nestedhelloworld/NestedHelloWorldAnnotationProcessorFactory.java
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java
index b68bfb9..a017f5e 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java
@@ -72,7 +72,11 @@ public class APTDispatchRunnable implements IWorkspaceRunnable
 			ReconcileEnv reconcileEnv = (ReconcileEnv)env;
 			
 			// Dispatch the annotation processors.  Env will keep track of problems and generated types.
-			dispatchToFileBasedProcessor(reconcileEnv);
+			try {
+				dispatchToFileBasedProcessor(reconcileEnv);
+			} catch (Throwable t) {
+				AptPlugin.log(t, "Processor failure during reconcile"); //$NON-NLS-1$
+			}
 			
 			// "Remove" any types that were generated in the past but not on this round.
 			// Because this is a reconcile, if a file exists on disk we can't really remove 
@@ -464,7 +468,9 @@ public class APTDispatchRunnable implements IWorkspaceRunnable
 							trace( "runAPT: invoking batch processor " + processor.getClass().getName(), //$NON-NLS-1$
 									processorEnv);
 						_currentDispatchBatchFactories.add(factory);
+						processorEnv.setCurrentProcessorFactory(factory);
 						processor.process();
+						processorEnv.setCurrentProcessorFactory(null);
 					}
 				}
 			}	
@@ -479,7 +485,9 @@ public class APTDispatchRunnable implements IWorkspaceRunnable
 					if ( AptPlugin.DEBUG ) 
 						trace( "runAPT: invoking batch processor " + processor.getClass().getName(), //$NON-NLS-1$
 								processorEnv);
+					processorEnv.setCurrentProcessorFactory(prevRoundFactory);
 					processor.process();
+					processorEnv.setCurrentProcessorFactory(null);
 				}
 			}
 			
@@ -535,7 +543,9 @@ public class APTDispatchRunnable implements IWorkspaceRunnable
 							if ( AptPlugin.DEBUG ) 
 								trace( "runAPT: invoking file-based processor " + processor.getClass().getName(), //$NON-NLS-1$
 										processorEnv );
+							processorEnv.setCurrentProcessorFactory(factory);
 							processor.process();
+							processorEnv.setCurrentProcessorFactory(null);
 						}
 					}
 				}
@@ -577,7 +587,9 @@ public class APTDispatchRunnable implements IWorkspaceRunnable
 						trace( "runAPT: invoking file-based processor " + processor.getClass().getName() + " on " + processorEnv.getFile(), //$NON-NLS-1$ //$NON-NLS-2$ 
 								processorEnv); 
 					}
+					processorEnv.setCurrentProcessorFactory(factory);
 					processor.process();						
+					processorEnv.setCurrentProcessorFactory(null);
 				}
 			}
 
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptCompilationParticipant.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptCompilationParticipant.java
index 28ac5e8..21d3844 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptCompilationParticipant.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptCompilationParticipant.java
@@ -179,29 +179,21 @@ public class AptCompilationParticipant extends CompilationParticipant
 	}
 	
 	public void reconcile(ReconcileContext context){
-		
-		try
-		{	
-			final ICompilationUnit workingCopy = context.getWorkingCopy();
-			if( workingCopy == null ) 
-				return;
-			IJavaProject javaProject = workingCopy.getJavaProject();			
-			if( javaProject == null )
-				return;
-			if (!AptConfig.shouldProcessDuringReconcile(javaProject)) {
-				AptPlugin.trace("Reconcile-time processing is disabled for project: " + javaProject.getElementName()); //$NON-NLS-1$
-				return;
-			}
-			AptProject aptProject = AptPlugin.getAptProject(javaProject);
-			
-			Map<AnnotationProcessorFactory, FactoryPath.Attributes> factories = 
-				AnnotationProcessorFactoryLoader.getLoader().getJava5FactoriesAndAttributesForProject( javaProject );
-			APTDispatchRunnable.runAPTDuringReconcile(context, aptProject, factories);
+		final ICompilationUnit workingCopy = context.getWorkingCopy();
+		if( workingCopy == null ) 
+			return;
+		IJavaProject javaProject = workingCopy.getJavaProject();			
+		if( javaProject == null )
+			return;
+		if (!AptConfig.shouldProcessDuringReconcile(javaProject)) {
+			AptPlugin.trace("Reconcile-time processing is disabled for project: " + javaProject.getElementName()); //$NON-NLS-1$
+			return;
 		}
-		catch ( Throwable t )
-		{
-			AptPlugin.log(t, "Failure processing");  //$NON-NLS-1$
-		}	
+		AptProject aptProject = AptPlugin.getAptProject(javaProject);
+		
+		Map<AnnotationProcessorFactory, FactoryPath.Attributes> factories = 
+			AnnotationProcessorFactoryLoader.getLoader().getJava5FactoriesAndAttributesForProject( javaProject );
+		APTDispatchRunnable.runAPTDuringReconcile(context, aptProject, factories);
 	}
 	
 	public void cleanStarting(IJavaProject javaProject){
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/AbstractCompilationEnv.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/AbstractCompilationEnv.java
index d2a3910..b29132e 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/AbstractCompilationEnv.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/AbstractCompilationEnv.java
@@ -11,6 +11,7 @@
 package org.eclipse.jdt.apt.core.internal.env;
 
 import java.util.ArrayList;
+import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -29,6 +30,7 @@ import org.eclipse.jdt.apt.core.internal.declaration.TypeDeclarationImpl;
 import org.eclipse.jdt.apt.core.internal.env.MessagerImpl.Severity;
 import org.eclipse.jdt.apt.core.internal.util.Factory;
 import org.eclipse.jdt.apt.core.internal.util.Visitors.AnnotationVisitor;
+import org.eclipse.jdt.apt.core.util.AptPreferenceConstants;
 import org.eclipse.jdt.apt.core.util.EclipseMessager;
 import org.eclipse.jdt.core.ICompilationUnit;
 import org.eclipse.jdt.core.IJavaProject;
@@ -42,6 +44,7 @@ import org.eclipse.jdt.core.dom.Annotation;
 import org.eclipse.jdt.core.dom.CompilationUnit;
 import org.eclipse.jdt.core.dom.ITypeBinding;
 
+import com.sun.mirror.apt.AnnotationProcessorFactory;
 import com.sun.mirror.apt.AnnotationProcessorListener;
 import com.sun.mirror.apt.Filer;
 import com.sun.mirror.declaration.AnnotationTypeDeclaration;
@@ -49,7 +52,7 @@ import com.sun.mirror.declaration.AnnotationTypeDeclaration;
 /** Base environment to be used during reconcile or build */ 
 public abstract class AbstractCompilationEnv 
 	extends BaseProcessorEnv 
-	implements EclipseAnnotationProcessorEnvironment{
+	implements EclipseAnnotationProcessorEnvironment {
 	
 	private Set<AnnotationProcessorListener> _listeners = null;
 	
@@ -65,6 +68,11 @@ public abstract class AbstractCompilationEnv
 	 * Currently open dom pipeline, used to request type bindings.
 	 */
 	protected ASTRequestor _requestor;
+
+	/**
+	 * The processor that is currently being executed, or null if processing is not underway.
+	 */
+	private AnnotationProcessorFactory _currentProcessorFactory = null;
 	
 	public static interface EnvCallback {
 		public void run(AbstractCompilationEnv env);
@@ -292,4 +300,27 @@ public abstract class AbstractCompilationEnv
         	throw new CoreException(status);
         }
 	}
+
+	public AnnotationProcessorFactory getCurrentProcessorFactory() {
+		return _currentProcessorFactory;
+	}
+	
+	public void setCurrentProcessorFactory(AnnotationProcessorFactory processor)
+	{
+		_currentProcessorFactory = processor;	
+	}
+
+	public boolean currentProcessorSupportsRTTG()
+	{
+		AnnotationProcessorFactory factory = getCurrentProcessorFactory();
+		if (null == factory) {
+			return false;
+		}
+		Collection<String> options = factory.supportedOptions();
+		if (null == options) {
+			return false;
+		}
+		return options.contains(AptPreferenceConstants.RTTG_ENABLED_OPTION);
+	}
+
 }
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/JavaSourceFilePrintWriter.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/JavaSourceFilePrintWriter.java
index 6b65b76..066c760 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/JavaSourceFilePrintWriter.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/JavaSourceFilePrintWriter.java
@@ -50,7 +50,7 @@ public class JavaSourceFilePrintWriter extends PrintWriter {
 	        Phase phase = _env.getPhase();
 			
 	        FileGenerationResult result = null;
-	        if ( phase == Phase.RECONCILE )
+	        if ( phase == Phase.RECONCILE && _env.currentProcessorSupportsRTTG() )
 	        {
 	        	ReconcileEnv reconcileEnv = (ReconcileEnv)_env;
 	        	ICompilationUnit parentCompilationUnit = reconcileEnv.getCompilationUnit();
@@ -61,7 +61,8 @@ public class JavaSourceFilePrintWriter extends PrintWriter {
 	        }
 	        else if ( phase == Phase.BUILD)	{
 		        result = gfm.generateFileDuringBuild( 
-						Collections.singletonList(_env.getFile()),  _typeName, contents, null /* progress monitor */ );
+						Collections.singletonList(_env.getFile()),  _typeName, contents, 
+						_env.currentProcessorSupportsRTTG(), null /* progress monitor */ );
 	        }
 	        if (result != null) {
 	        	_env.addGeneratedSourceFile(result.getFile(), result.isModified());
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java
index adf4f56..f644ad4 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java
@@ -221,6 +221,16 @@ public class GeneratedFileManager
 	 * read-only during reconcile. This map is serialized.
 	 */
 	private final GeneratedFileMap _buildDeps;
+	
+	/**
+	 * Set of files that have been generated during build by processors that
+	 * support reconcile-time type generation.  Files in this set are expected to
+	 * be generated during reconcile, and therefore will be deleted after a reconcile
+	 * if they're not generated.  This is different from the value set of
+	 * _reconcileDeps in that the contents of this set are known to have been
+	 * generated during a build.
+	 */
+	private final Set<IFile> _clearDuringReconcile;
 
 	/**
 	 * Many-to-many map from parent files to files generated during reconcile.
@@ -307,6 +317,7 @@ public class GeneratedFileManager
 		_jProject = aptProject.getJavaProject();
 		_gsfm = gsfm;
 		_buildDeps = new GeneratedFileMap(_jProject.getProject());
+		_clearDuringReconcile = new HashSet<IFile>();
 		_reconcileDeps = new ManyToMany<IFile, IFile>();
 		_reconcileNonDeps = new ManyToMany<IFile, IFile>();
 		_hiddenBuiltTypes = new HashMap<IFile, ICompilationUnit>();
@@ -397,6 +408,11 @@ public class GeneratedFileManager
 	 * create a blank WorkingCopy to hide it. Therefore, we can only remove Java source
 	 * files, not arbitrary files. If the file was generated during reconcile and exists
 	 * only in memory, we can actually remove it altogether.
+	 * <p>
+	 * Only some processors specify (via {@link org.eclipse.jdt.apt.core.util.AptPreferenceConstants#RTTG_ENABLED_OPTION})
+	 * that they support type generation during reconcile.  We need to remove obsolete
+	 * files generated by those processors, but preserve files generated by
+	 * other processors. 
 	 * 
 	 * @param parentWC
 	 *            the WorkingCopy being reconciled
@@ -459,13 +475,18 @@ public class GeneratedFileManager
 	 *            the dot-separated java type name of the type being generated
 	 * @param contents
 	 *            the java code contents of the new type .
+	 * @param clearDuringReconcile
+	 *            if true, this file should be removed after any reconcile in which it was not
+	 *            regenerated.  This typically is used when the file is being generated by a
+	 *            processor that supports {@linkplain org.eclipse.jdt.apt.core.util.AptPreferenceConstants#RTTG_ENABLED_OPTION
+	 *            reconcile-time type generation}.
 	 * @param progressMonitor
 	 *            a progress monitor. This may be null.
 	 * @return - the newly created IFile along with whether it was modified
 	 * @throws CoreException
 	 */
 	public FileGenerationResult generateFileDuringBuild(List<IFile> parentFiles, String typeName, String contents,
-			IProgressMonitor progressMonitor) throws CoreException
+			boolean clearDuringReconcile, IProgressMonitor progressMonitor) throws CoreException
 	{
 		if (_skipTypeGeneration)
 			return null;
@@ -525,6 +546,9 @@ public class GeneratedFileManager
 					addBuiltFileToMaps(parentFile, file);
 				}
 			}
+			if (clearDuringReconcile) {
+				_clearDuringReconcile.add(file);
+			}
 
 			// Mark the file as derived. Note that certain user actions may have
 			// deleted this file before we get here, so if the file doesn't
@@ -758,6 +782,18 @@ public class GeneratedFileManager
 					depChildren);
 		}
 		
+		// Every file in _clearDuringReconcile must be a value in _buildDeps.
+		List<IFile> extraClearDuringReconcileFiles = new ArrayList<IFile>();
+		for (IFile clearDuringReconcile : _clearDuringReconcile) {
+			if (!_buildDeps.containsValue(clearDuringReconcile)) {
+				extraClearDuringReconcileFiles.add(clearDuringReconcile);
+			}
+		}
+		if (!extraClearDuringReconcileFiles.isEmpty()) {
+			logExtraFiles("File(s) in list to clear during reconcile but not in build dependency map: ", //$NON-NLS-1$
+					extraClearDuringReconcileFiles);
+		}
+		
 		// Every key in _hiddenBuiltTypes must be a value in _reconcileNonDeps.
 		List<IFile> extraHiddenTypes = new ArrayList<IFile>();
 		for (IFile hidden : _hiddenBuiltTypes.keySet()) {
@@ -860,6 +896,7 @@ public class GeneratedFileManager
 		else {
 			_buildDeps.clear();
 		}
+		_clearDuringReconcile.clear();
 
 		assert checkIntegrity();
 		return toDiscard;
@@ -917,6 +954,7 @@ public class GeneratedFileManager
 	private synchronized List<ICompilationUnit> computeClean()
 	{
 		_buildDeps.clearState();
+		_clearDuringReconcile.clear();
 		_reconcileNonDeps.clear();
 		List<ICompilationUnit> toDiscard = new ArrayList<ICompilationUnit>(_hiddenBuiltTypes.values());
 		_hiddenBuiltTypes.clear();
@@ -978,6 +1016,7 @@ public class GeneratedFileManager
 				deleted.add(generatedFile);
 			}
 		}
+		_clearDuringReconcile.removeAll(deleted);
 		toDiscard.addAll(computeObsoleteHiddenTypes(parentFile, deleted));
 		assert checkIntegrity();
 		return deleted;
@@ -1026,6 +1065,7 @@ public class GeneratedFileManager
 			}
 			
 			Set<IFile> builtChildren = _buildDeps.getValues(parentFile);
+			builtChildren.retainAll(_clearDuringReconcile);
 			builtChildren.removeAll(newlyGeneratedFiles);
 			for (IFile builtChild : builtChildren) {
 				_reconcileNonDeps.put(parentFile, builtChild);
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptPreferenceConstants.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptPreferenceConstants.java
index b0bab8b..76aea8b 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptPreferenceConstants.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptPreferenceConstants.java
@@ -36,6 +36,12 @@ public class AptPreferenceConstants {
 
 	public static final String DEFAULT_GENERATED_SOURCE_FOLDER_NAME = ".apt_generated"; //$NON-NLS-1$
 	
+	/**
+	 * Processors should report this option in {@link com.sun.mirror.apt.AnnotationProcessorFactory#supportedOptions()}
+	 * in order to enable type generation while editing, that is, during reconcile.
+	 */
+	public static final String RTTG_ENABLED_OPTION = "enableTypeGenerationInEditor"; //$NON-NLS-1$
+
 	public static Map<String,String> DEFAULT_OPTIONS_MAP;
 	
 	static {
diff --git a/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/dispatch/IdeProcessingEnvImpl.java b/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/dispatch/IdeProcessingEnvImpl.java
index 53e69ef..0255163 100644
--- a/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/dispatch/IdeProcessingEnvImpl.java
+++ b/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/dispatch/IdeProcessingEnvImpl.java
@@ -115,4 +115,10 @@ public abstract class IdeProcessingEnvImpl extends BaseProcessingEnvImpl {
 		addNewUnit(_dispatchManager.findCompilationUnit(result.getFile()));
 	}
 
+	public boolean currentProcessorSupportsRTTG()
+	{
+		// Reconcile time type generation is not currently enabled for Java 6 processors
+		return false;
+	}
+
 }
diff --git a/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/filer/IdeJavaSourceFileWriter.java b/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/filer/IdeJavaSourceFileWriter.java
index b9034d7..8ba02c4 100644
--- a/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/filer/IdeJavaSourceFileWriter.java
+++ b/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/filer/IdeJavaSourceFileWriter.java
@@ -66,7 +66,8 @@ public class IdeJavaSourceFileWriter extends StringWriter {
 				// TODO: actually we need to be more sophisticated about dependencies, because they can be specified.  
 				// Remember empty-parent situation.
 				result = gfm.generateFileDuringBuild( 
-						_parentFiles,  _name.toString(), this.toString(), null /* progress monitor */ );
+						_parentFiles,  _name.toString(), this.toString(), 
+						_env.currentProcessorSupportsRTTG(), null /* progress monitor */ );
 			}
 			if (result != null) {
 				_env.addNewUnit(result);
diff --git a/org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/helloworld/HelloWorldAnnotationProcessorFactory.java b/org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/helloworld/HelloWorldAnnotationProcessorFactory.java
index 0bef2bc..342f1ff 100644
--- a/org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/helloworld/HelloWorldAnnotationProcessorFactory.java
+++ b/org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/helloworld/HelloWorldAnnotationProcessorFactory.java
@@ -12,8 +12,11 @@
 
 package org.eclipse.jdt.apt.tests.annotations.helloworld;
 
+import java.util.Collection;
+import java.util.Collections;
 import java.util.Set;
 
+import org.eclipse.jdt.apt.core.util.AptPreferenceConstants;
 import org.eclipse.jdt.apt.tests.annotations.BaseFactory;
 
 import com.sun.mirror.apt.AnnotationProcessor;
@@ -33,4 +36,8 @@ public class HelloWorldAnnotationProcessorFactory extends BaseFactory {
 		return new HelloWorldAnnotationProcessor( env );
 	}
 	
+	public Collection<String> supportedOptions() {
+		return Collections.singletonList(AptPreferenceConstants.RTTG_ENABLED_OPTION);
+	}
+
 }
\ No newline at end of file
diff --git a/org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/nestedhelloworld/NestedHelloWorldAnnotationProcessorFactory.java b/org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/nestedhelloworld/NestedHelloWorldAnnotationProcessorFactory.java
index 72a2125..5d32b9e 100644
--- a/org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/nestedhelloworld/NestedHelloWorldAnnotationProcessorFactory.java
+++ b/org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/nestedhelloworld/NestedHelloWorldAnnotationProcessorFactory.java
@@ -13,8 +13,11 @@
 
 package org.eclipse.jdt.apt.tests.annotations.nestedhelloworld;
 
+import java.util.Collection;
+import java.util.Collections;
 import java.util.Set;
 
+import org.eclipse.jdt.apt.core.util.AptPreferenceConstants;
 import org.eclipse.jdt.apt.tests.annotations.BaseFactory;
 
 import com.sun.mirror.apt.AnnotationProcessor;
@@ -34,4 +37,8 @@ public class NestedHelloWorldAnnotationProcessorFactory extends BaseFactory
 		return new NestedHelloWorldAnnotationProcessor( env );
 	}
 	
+	public Collection<String> supportedOptions() {
+		return Collections.singletonList(AptPreferenceConstants.RTTG_ENABLED_OPTION);
+	}
+
 }

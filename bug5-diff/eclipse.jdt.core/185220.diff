commit 1923ff35ed43b82db4ab364737f7df955eb62ef8
Author: Walter Harley <wharley>
Date:   Wed May 2 21:04:53 2007 +0000

    Bug 185220 - preliminary implementation of Messager for IDE java 6 annotation processing.

5	5	org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/Apt6Plugin.java
74	0	org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/dispatch/IdeMessagerImpl.java
1	1	org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/dispatch/IdeProcessingEnvImpl.java
20	5	org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BatchMessagerImpl.java
diff --git a/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/Apt6Plugin.java b/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/Apt6Plugin.java
index 7391b62..a6f84d2 100644
--- a/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/Apt6Plugin.java
+++ b/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/Apt6Plugin.java
@@ -104,12 +104,13 @@ public class Apt6Plugin extends Plugin {
 	public static Status createInfoStatus(Throwable e, String message) {
 		return new Status(IStatus.INFO, PLUGIN_ID, STATUS_EXCEPTION, message, e);
 	}
-		public static void trace(final String msg){
+	
+	public static void trace(final String msg) {
 		if (DEBUG) {
 			StringBuffer sb = new StringBuffer();
 			sb.append('[');
 			// SimpleDateFormat is not thread-safe, according to javadoc
-			synchronized(TRACE_DATE_FORMAT) {
+			synchronized (TRACE_DATE_FORMAT) {
 				sb.append(TRACE_DATE_FORMAT.format(new Date()));
 			}
 			sb.append('-');
@@ -118,9 +119,8 @@ public class Apt6Plugin extends Plugin {
 			int dot = threadName.lastIndexOf('.');
 			if (dot < 0) {
 				sb.append(threadName);
-			}
-			else {
-				sb.append(threadName.substring(dot+1));
+			} else {
+				sb.append(threadName.substring(dot + 1));
 			}
 			sb.append(']');
 			sb.append(msg);
diff --git a/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/dispatch/IdeMessagerImpl.java b/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/dispatch/IdeMessagerImpl.java
new file mode 100644
index 0000000..34aef6d
--- /dev/null
+++ b/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/dispatch/IdeMessagerImpl.java
@@ -0,0 +1,74 @@
+/*******************************************************************************
+ * Copyright (c) 2007 BEA Systems, Inc. 
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *    wharley@bea.com - initial API and implementation
+ *    
+ *******************************************************************************/
+
+package org.eclipse.jdt.internal.apt.pluggable.core.dispatch;
+
+import javax.annotation.processing.Messager;
+import javax.lang.model.element.AnnotationMirror;
+import javax.lang.model.element.AnnotationValue;
+import javax.lang.model.element.Element;
+import javax.tools.Diagnostic.Kind;
+
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Status;
+import org.eclipse.jdt.core.compiler.CategorizedProblem;
+import org.eclipse.jdt.internal.apt.pluggable.core.Apt6Plugin;
+import org.eclipse.jdt.internal.compiler.apt.dispatch.BatchMessagerImpl;
+
+/**
+ * 
+ * @since 3.3
+ */
+public class IdeMessagerImpl implements Messager {
+	
+	private final IdeAnnotationProcessorManager _manager;
+	private final IdeProcessingEnvImpl _env;
+
+	public IdeMessagerImpl(IdeAnnotationProcessorManager manager,
+			IdeProcessingEnvImpl env) {
+		_manager = manager;
+		_env = env;
+	}
+
+	/* (non-Javadoc)
+	 * @see javax.annotation.processing.Messager#printMessage(javax.tools.Diagnostic.Kind, java.lang.CharSequence)
+	 */
+	public void printMessage(Kind kind, CharSequence msg) {
+		printMessage(kind, msg, null, null, null);
+	}
+
+	/* (non-Javadoc)
+	 * @see javax.annotation.processing.Messager#printMessage(javax.tools.Diagnostic.Kind, java.lang.CharSequence, javax.lang.model.element.Element)
+	 */
+	public void printMessage(Kind kind, CharSequence msg, Element e) {
+		printMessage(kind, msg, e, null, null);
+	}
+
+	/* (non-Javadoc)
+	 * @see javax.annotation.processing.Messager#printMessage(javax.tools.Diagnostic.Kind, java.lang.CharSequence, javax.lang.model.element.Element, javax.lang.model.element.AnnotationMirror)
+	 */
+	public void printMessage(Kind kind, CharSequence msg, Element e,
+			AnnotationMirror a) {
+		printMessage(kind, msg, e, a, null);
+
+	}
+
+	/* (non-Javadoc)
+	 * @see javax.annotation.processing.Messager#printMessage(javax.tools.Diagnostic.Kind, java.lang.CharSequence, javax.lang.model.element.Element, javax.lang.model.element.AnnotationMirror, javax.lang.model.element.AnnotationValue)
+	 */
+	public void printMessage(Kind kind, CharSequence msg, Element e, AnnotationMirror a,
+			AnnotationValue v) {
+		CategorizedProblem problem = BatchMessagerImpl.createProblem(kind, msg, e);
+		Apt6Plugin.log(new Status(IStatus.INFO, Apt6Plugin.PLUGIN_ID, Apt6Plugin.STATUS_EXCEPTION, problem.toString(), null));
+	}
+
+}
diff --git a/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/dispatch/IdeProcessingEnvImpl.java b/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/dispatch/IdeProcessingEnvImpl.java
index 0255163..36093dd 100644
--- a/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/dispatch/IdeProcessingEnvImpl.java
+++ b/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/dispatch/IdeProcessingEnvImpl.java
@@ -51,7 +51,7 @@ public abstract class IdeProcessingEnvImpl extends BaseProcessingEnvImpl {
 		_compiler = compiler;
 		_aptProject = AptPlugin.getAptProject(jproject);
 		_filer = new IdeFilerImpl(_dispatchManager, this);
-		//TODO: _messager
+		_messager = new IdeMessagerImpl(_dispatchManager, this);
 	}
 	
 	/* (non-Javadoc)
diff --git a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BatchMessagerImpl.java b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BatchMessagerImpl.java
index 9101025..1277e46 100644
--- a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BatchMessagerImpl.java
+++ b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BatchMessagerImpl.java
@@ -82,10 +82,28 @@ public class BatchMessagerImpl implements Messager {
 	@Override
 	public void printMessage(Kind kind, CharSequence msg, Element e,
 			AnnotationMirror a, AnnotationValue v) {
+		//TODO: we are currently ignoring 'a' and 'v'
+		if (kind == Kind.ERROR) {
+			_processingEnv.setErrorRaised(true);
+		}
+		CategorizedProblem problem = createProblem(kind, msg, e);
+		if (problem != null) {
+			this._compiler.addExtraProblems(problem);
+		}
+	}
+
+	/**
+	 * @param kind
+	 * @param msg
+	 * @param e
+	 * @param referenceContext
+	 * @return
+	 */
+	public static CategorizedProblem createProblem(Kind kind, CharSequence msg, Element e) {
+		CategorizedProblem problem = null;
 		ReferenceContext referenceContext = null;
 		int startPosition = 0;
 		int endPosition = 0;
-		CategorizedProblem problem = null;
 		if (e != null) {
 			switch(e.getKind()) {
 				case ANNOTATION_TYPE :
@@ -154,7 +172,6 @@ public class BatchMessagerImpl implements Messager {
 		StringBuilder builder = new StringBuilder(msg);
 		switch(kind) {
 			case ERROR :
-				_processingEnv.setErrorRaised(true);
 				if (referenceContext != null) {
 					CompilationResult result = referenceContext.compilationResult();
 					int[] lineEnds = null;
@@ -224,8 +241,6 @@ public class BatchMessagerImpl implements Messager {
 				}
 				break;
 		}
-		if (problem != null) {
-			this._compiler.addExtraProblems(problem);
-		}
+		return problem;
 	}
 }
commit 27aef0560bb19b81e8fa90224ee21a025635acc0
Author: Walter Harley <wharley>
Date:   Tue May 8 23:15:16 2007 +0000

    Bug 185220: problems reported via Messager should show up as problem markers, not as log entries.

1	0	org.eclipse.jdt.apt.pluggable.core/plugin.properties
26	1	org.eclipse.jdt.apt.pluggable.core/plugin.xml
29	0	org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/Apt6CompilationParticipant.java
15	3	org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/dispatch/IdeMessagerImpl.java
60	0	org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/AptProblem.java
156	0	org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BaseMessagerImpl.java
4	0	org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BaseProcessingEnvImpl.java
0	46	org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BatchAptProblem.java
1	169	org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BatchMessagerImpl.java
diff --git a/org.eclipse.jdt.apt.pluggable.core/plugin.properties b/org.eclipse.jdt.apt.pluggable.core/plugin.properties
index dffdd95..ab15d76 100644
--- a/org.eclipse.jdt.apt.pluggable.core/plugin.properties
+++ b/org.eclipse.jdt.apt.pluggable.core/plugin.properties
@@ -10,3 +10,4 @@
 ###############################################################################
 providerName=Eclipse.org
 pluginName=Java Compiler Apt IDE
+compileProblemMarkerName=APT Compile Problem Marker
\ No newline at end of file
diff --git a/org.eclipse.jdt.apt.pluggable.core/plugin.xml b/org.eclipse.jdt.apt.pluggable.core/plugin.xml
index 79813c3..84942a7 100644
--- a/org.eclipse.jdt.apt.pluggable.core/plugin.xml
+++ b/org.eclipse.jdt.apt.pluggable.core/plugin.xml
@@ -8,5 +8,30 @@
             id="org.eclipse.jdt.apt.pluggable.core.annotationProcessorManager">
       </annotationProcessorManager>
    </extension>
+   <extension
+         point="org.eclipse.jdt.core.compilationParticipant">
+      <compilationParticipant
+            class="org.eclipse.jdt.internal.apt.pluggable.core.Apt6CompilationParticipant"
+            id="org.eclipse.jdt.apt.pluggable.core.compilationParticipant"
+            requiredSourceLevel="1.6">
+         <managedMarker
+               markerType="org.eclipse.jdt.apt.pluggable.core.compileProblem">
+         </managedMarker>
+      </compilationParticipant>
+   </extension>
+   <extension
+         id="compileProblem"
+         name="%compileProblemMarkerName"
+         point="org.eclipse.core.resources.markers">
+      <super
+            type="org.eclipse.core.resources.problemmarker">
+      </super>
+      <super
+            type="org.eclipse.core.resources.textmarker">
+      </super>
+      <persistent
+            value="true">
+      </persistent>
+   </extension>
 
-</plugin>
\ No newline at end of file
+</plugin>
diff --git a/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/Apt6CompilationParticipant.java b/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/Apt6CompilationParticipant.java
new file mode 100644
index 0000000..3214430
--- /dev/null
+++ b/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/Apt6CompilationParticipant.java
@@ -0,0 +1,29 @@
+/*******************************************************************************
+ * Copyright (c) 2007 BEA Systems, Inc. 
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *    wharley@bea.com - initial API and implementation
+ *    
+ *******************************************************************************/
+
+package org.eclipse.jdt.internal.apt.pluggable.core;
+
+import org.eclipse.jdt.core.compiler.CompilationParticipant;
+
+/**
+ * Compilation participant for Java 6 annotation processing.  Java 6 annotation
+ * processors are dispatched via the org.eclipse.jdt.core.annotationProcessorManager
+ * extension point, but this compilation participant is still required in order
+ * to register a managed problem marker. 
+ * @since 3.3
+ */
+public class Apt6CompilationParticipant extends CompilationParticipant {
+
+	public Apt6CompilationParticipant() {
+	}
+
+}
diff --git a/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/dispatch/IdeMessagerImpl.java b/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/dispatch/IdeMessagerImpl.java
index 6d1c26d..12b095a 100644
--- a/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/dispatch/IdeMessagerImpl.java
+++ b/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/dispatch/IdeMessagerImpl.java
@@ -20,8 +20,9 @@ import javax.tools.Diagnostic.Kind;
 
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.Status;
-import org.eclipse.jdt.core.compiler.CategorizedProblem;
 import org.eclipse.jdt.internal.apt.pluggable.core.Apt6Plugin;
+import org.eclipse.jdt.internal.compiler.CompilationResult;
+import org.eclipse.jdt.internal.compiler.apt.dispatch.AptProblem;
 import org.eclipse.jdt.internal.compiler.apt.dispatch.BatchMessagerImpl;
 
 /**
@@ -71,8 +72,19 @@ public class IdeMessagerImpl implements Messager {
 	 */
 	public void printMessage(Kind kind, CharSequence msg, Element e, AnnotationMirror a,
 			AnnotationValue v) {
-		CategorizedProblem problem = BatchMessagerImpl.createProblem(kind, msg, e);
-		Apt6Plugin.log(new Status(IStatus.INFO, Apt6Plugin.PLUGIN_ID, Apt6Plugin.STATUS_EXCEPTION, problem.toString(), null));
+		AptProblem problem = BatchMessagerImpl.createProblem(kind, msg, e);
+		if (kind == Kind.NOTE) {
+			Apt6Plugin.log(new Status(IStatus.INFO, Apt6Plugin.PLUGIN_ID, Apt6Plugin.STATUS_EXCEPTION, problem.getMessage(), null));
+		}
+		else if (null != problem._referenceContext) {
+			CompilationResult result = problem._referenceContext.compilationResult();
+			result.record(problem, problem._referenceContext);
+		}
+		else {
+			// Unknown reference context; e.g., reported against an element not being compiled.
+			// TODO: report against project??  log??
+			Apt6Plugin.log(new Status(IStatus.INFO, Apt6Plugin.PLUGIN_ID, Apt6Plugin.STATUS_EXCEPTION, problem.getMessage(), null));
+		}
 	}
 
 }
diff --git a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/AptProblem.java b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/AptProblem.java
new file mode 100644
index 0000000..51c52b4
--- /dev/null
+++ b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/AptProblem.java
@@ -0,0 +1,60 @@
+/*******************************************************************************
+ * Copyright (c) 2001, 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.jdt.internal.compiler.apt.dispatch;
+
+import org.eclipse.jdt.internal.compiler.impl.ReferenceContext;
+import org.eclipse.jdt.internal.compiler.problem.DefaultProblem;
+
+public class AptProblem extends DefaultProblem {
+	
+	// The batch compiler does not depend on org.eclipse.jdt.apt.pluggable.core; this
+	// is just an arbitrary string to it, namespace notwithstanding.  However, the IDE
+	// cares about the fact that this string is registered as a marker ID by the
+	// org.eclipse.jdt.apt.pluggable.core plug-in.
+	private static final String MARKER_ID = "org.eclipse.jdt.apt.pluggable.core.compileProblem";  //$NON-NLS-1$
+	
+	/** May be null, if it was not possible to identify problem context */
+	public final ReferenceContext _referenceContext;
+	
+	public AptProblem(
+			ReferenceContext referenceContext,
+			char[] originatingFileName,
+			String message,
+			int id,
+			String[] stringArguments,
+			int severity,
+			int startPosition,
+			int endPosition,
+			int line,
+			int column) 
+	{
+		super(originatingFileName,
+			message,
+			id,
+			stringArguments,
+			severity,
+			startPosition,
+			endPosition,
+			line,
+			column);
+		_referenceContext = referenceContext;
+	}
+	
+	@Override
+	public int getCategoryID() {
+		return CAT_UNSPECIFIED;
+	}
+
+	@Override
+	public String getMarkerType() {
+		return MARKER_ID;
+	}
+}
diff --git a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BaseMessagerImpl.java b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BaseMessagerImpl.java
new file mode 100644
index 0000000..990a294
--- /dev/null
+++ b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BaseMessagerImpl.java
@@ -0,0 +1,156 @@
+/*******************************************************************************
+ * Copyright (c) 2007 BEA Systems, Inc. 
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *    wharley@bea.com - derived base class from BatchMessagerImpl
+ *    
+ *******************************************************************************/
+package org.eclipse.jdt.internal.compiler.apt.dispatch;
+
+import javax.lang.model.element.Element;
+import javax.tools.Diagnostic.Kind;
+
+import org.eclipse.jdt.internal.compiler.CompilationResult;
+import org.eclipse.jdt.internal.compiler.apt.model.ExecutableElementImpl;
+import org.eclipse.jdt.internal.compiler.apt.model.TypeElementImpl;
+import org.eclipse.jdt.internal.compiler.apt.model.VariableElementImpl;
+import org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;
+import org.eclipse.jdt.internal.compiler.ast.FieldDeclaration;
+import org.eclipse.jdt.internal.compiler.ast.TypeDeclaration;
+import org.eclipse.jdt.internal.compiler.impl.ReferenceContext;
+import org.eclipse.jdt.internal.compiler.lookup.Binding;
+import org.eclipse.jdt.internal.compiler.lookup.FieldBinding;
+import org.eclipse.jdt.internal.compiler.lookup.MethodBinding;
+import org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding;
+import org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding;
+import org.eclipse.jdt.internal.compiler.problem.ProblemSeverities;
+import org.eclipse.jdt.internal.compiler.util.Util;
+
+public class BaseMessagerImpl {
+
+	static final String[] NO_ARGUMENTS = new String[0];
+
+	/**
+	 * Create a CategorizedProblem that can be reported to an ICompilerRequestor, etc.
+	 * 
+	 * @param e the element against which to report the message.  If the element is not
+	 * in the set of elements being compiled in the current round, the reference context
+	 * and filename will be set to null.
+	 * @return
+	 */
+	public static AptProblem createProblem(Kind kind, CharSequence msg, Element e) {
+		ReferenceContext referenceContext = null;
+		int startPosition = 0;
+		int endPosition = 0;
+		if (e != null) {
+			switch(e.getKind()) {
+				case ANNOTATION_TYPE :
+				case INTERFACE :
+				case CLASS :
+				case ENUM :
+					TypeElementImpl typeElementImpl = (TypeElementImpl) e;
+					Binding typeBinding = typeElementImpl._binding;
+					if (typeBinding instanceof SourceTypeBinding) {
+						SourceTypeBinding sourceTypeBinding = (SourceTypeBinding) typeBinding;
+						TypeDeclaration typeDeclaration = (TypeDeclaration) sourceTypeBinding.scope.referenceContext();
+						referenceContext = typeDeclaration;
+						startPosition = typeDeclaration.sourceStart;
+						endPosition = typeDeclaration.sourceEnd;
+					}
+					break;
+				case PACKAGE :
+					// nothing to do: there is no reference context for a package
+					break;
+				case CONSTRUCTOR :
+				case METHOD :
+					ExecutableElementImpl executableElementImpl = (ExecutableElementImpl) e;
+					Binding binding = executableElementImpl._binding;
+					if (binding instanceof MethodBinding) {
+						MethodBinding methodBinding = (MethodBinding) binding;
+						AbstractMethodDeclaration sourceMethod = methodBinding.sourceMethod();
+						if (sourceMethod != null) {
+							referenceContext = sourceMethod;
+							startPosition = sourceMethod.sourceStart;
+							endPosition = sourceMethod.sourceEnd;
+						}
+					}
+					break;
+				case ENUM_CONSTANT :
+					break;
+				case EXCEPTION_PARAMETER :
+					break;
+				case FIELD :
+					VariableElementImpl variableElementImpl = (VariableElementImpl) e;
+					binding = variableElementImpl._binding;
+					if (binding instanceof FieldBinding) {
+						FieldBinding fieldBinding = (FieldBinding) binding;
+						FieldDeclaration fieldDeclaration = fieldBinding.sourceField();
+						if (fieldDeclaration != null) {
+							ReferenceBinding declaringClass = fieldBinding.declaringClass;
+							if (declaringClass instanceof SourceTypeBinding) {
+								SourceTypeBinding sourceTypeBinding = (SourceTypeBinding) declaringClass;
+								TypeDeclaration typeDeclaration = (TypeDeclaration) sourceTypeBinding.scope.referenceContext();
+								referenceContext = typeDeclaration;
+							}
+							startPosition = fieldDeclaration.sourceStart;
+							endPosition = fieldDeclaration.sourceEnd;
+						}
+					}
+					break;
+				case INSTANCE_INIT :
+				case STATIC_INIT :
+					break;
+				case LOCAL_VARIABLE :
+					break;
+				case PARAMETER :
+					break;
+				case TYPE_PARAMETER :
+			}
+		}
+		StringBuilder builder = new StringBuilder(msg);
+		int lineNumber = 0;
+		int columnNumber = 1;
+		char[] fileName = null;
+		if (referenceContext != null) {
+			CompilationResult result = referenceContext.compilationResult();
+			fileName = result.fileName;
+			int[] lineEnds = null;
+			lineNumber = startPosition >= 0
+					? Util.getLineNumber(startPosition, lineEnds = result.getLineSeparatorPositions(), 0, lineEnds.length-1)
+					: 0;
+			columnNumber = startPosition >= 0
+					? Util.searchColumnNumber(result.getLineSeparatorPositions(), lineNumber,startPosition)
+					: 0;
+		}
+		int severity;
+		switch(kind) {
+			case ERROR :
+				severity = ProblemSeverities.Error;
+				break;
+			default :
+				// There is no "INFO" equivalent in JDT
+				severity = ProblemSeverities.Warning;
+				break;
+		}
+		return new AptProblem(
+				referenceContext,
+				fileName,
+				String.valueOf(builder),
+				0,
+				NO_ARGUMENTS,
+				severity,
+				startPosition,
+				endPosition,
+				lineNumber,
+				columnNumber);
+	}
+
+	public BaseMessagerImpl() {
+		super();
+	}
+
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BaseProcessingEnvImpl.java b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BaseProcessingEnvImpl.java
index 66a4eda..6595f70 100644
--- a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BaseProcessingEnvImpl.java
+++ b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BaseProcessingEnvImpl.java
@@ -68,6 +68,10 @@ public abstract class BaseProcessingEnvImpl implements ProcessingEnvironment {
 	public void addNewClassFile(ReferenceBinding binding) {
 		_addedClassFiles.add(binding);
 	}
+	
+	public Compiler getCompiler() {
+		return _compiler;
+	}
 
 	public ICompilationUnit[] getDeletedUnits() {
 		ICompilationUnit[] result = new ICompilationUnit[_deletedUnits.size()];
diff --git a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BatchAptProblem.java b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BatchAptProblem.java
deleted file mode 100644
index 48be760..0000000
--- a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BatchAptProblem.java
+++ /dev/null
@@ -1,46 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2001, 2007 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- * 
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.jdt.internal.compiler.apt.dispatch;
-
-import org.eclipse.jdt.internal.compiler.problem.DefaultProblem;
-
-public class BatchAptProblem extends DefaultProblem {
-	private static final String MARKER_ID = "org.eclipse.jdt.compiler.apt.compiler.problem"; //$NON-NLS-1$
-	public BatchAptProblem(
-			char[] originatingFileName,
-			String message,
-			int id,
-			String[] stringArguments,
-			int severity,
-			int startPosition,
-			int endPosition,
-			int line,
-			int column) {
-		super(originatingFileName,
-			message,
-			id,
-			stringArguments,
-			severity,
-			startPosition,
-			endPosition,
-			line,
-			column);
-	}
-	@Override
-	public int getCategoryID() {
-		return CAT_UNSPECIFIED;
-	}
-
-	@Override
-	public String getMarkerType() {
-		return MARKER_ID;
-	}
-}
diff --git a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BatchMessagerImpl.java b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BatchMessagerImpl.java
index 1277e46..1d2fba3 100644
--- a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BatchMessagerImpl.java
+++ b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BatchMessagerImpl.java
@@ -19,29 +19,13 @@ import javax.lang.model.element.Element;
 import javax.tools.Diagnostic.Kind;
 
 import org.eclipse.jdt.core.compiler.CategorizedProblem;
-import org.eclipse.jdt.internal.compiler.CompilationResult;
-import org.eclipse.jdt.internal.compiler.apt.model.ExecutableElementImpl;
-import org.eclipse.jdt.internal.compiler.apt.model.TypeElementImpl;
-import org.eclipse.jdt.internal.compiler.apt.model.VariableElementImpl;
-import org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;
-import org.eclipse.jdt.internal.compiler.ast.FieldDeclaration;
-import org.eclipse.jdt.internal.compiler.ast.TypeDeclaration;
 import org.eclipse.jdt.internal.compiler.batch.Main;
-import org.eclipse.jdt.internal.compiler.impl.ReferenceContext;
-import org.eclipse.jdt.internal.compiler.lookup.Binding;
-import org.eclipse.jdt.internal.compiler.lookup.FieldBinding;
-import org.eclipse.jdt.internal.compiler.lookup.MethodBinding;
-import org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding;
-import org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding;
-import org.eclipse.jdt.internal.compiler.problem.ProblemSeverities;
-import org.eclipse.jdt.internal.compiler.util.Util;
 
 /**
  * An implementation of Messager that reports messages via the Compiler
  */
-public class BatchMessagerImpl implements Messager {
+public class BatchMessagerImpl extends BaseMessagerImpl implements Messager {
 
-	private static final String[] NO_ARGUMENTS = new String[0];
 	private final Main _compiler;
 	private final BaseProcessingEnvImpl _processingEnv;
 
@@ -91,156 +75,4 @@ public class BatchMessagerImpl implements Messager {
 			this._compiler.addExtraProblems(problem);
 		}
 	}
-
-	/**
-	 * @param kind
-	 * @param msg
-	 * @param e
-	 * @param referenceContext
-	 * @return
-	 */
-	public static CategorizedProblem createProblem(Kind kind, CharSequence msg, Element e) {
-		CategorizedProblem problem = null;
-		ReferenceContext referenceContext = null;
-		int startPosition = 0;
-		int endPosition = 0;
-		if (e != null) {
-			switch(e.getKind()) {
-				case ANNOTATION_TYPE :
-				case INTERFACE :
-				case CLASS :
-				case ENUM :
-					TypeElementImpl typeElementImpl = (TypeElementImpl) e;
-					Binding typeBinding = typeElementImpl._binding;
-					if (typeBinding instanceof SourceTypeBinding) {
-						SourceTypeBinding sourceTypeBinding = (SourceTypeBinding) typeBinding;
-						TypeDeclaration typeDeclaration = (TypeDeclaration) sourceTypeBinding.scope.referenceContext();
-						referenceContext = typeDeclaration;
-						startPosition = typeDeclaration.sourceStart;
-						endPosition = typeDeclaration.sourceEnd;
-					}
-					break;
-				case PACKAGE :
-					// nothing to do: there is no reference context for a package
-					break;
-				case CONSTRUCTOR :
-				case METHOD :
-					ExecutableElementImpl executableElementImpl = (ExecutableElementImpl) e;
-					Binding binding = executableElementImpl._binding;
-					if (binding instanceof MethodBinding) {
-						MethodBinding methodBinding = (MethodBinding) binding;
-						AbstractMethodDeclaration sourceMethod = methodBinding.sourceMethod();
-						if (sourceMethod != null) {
-							referenceContext = sourceMethod;
-							startPosition = sourceMethod.sourceStart;
-							endPosition = sourceMethod.sourceEnd;
-						}
-					}
-					break;
-				case ENUM_CONSTANT :
-					break;
-				case EXCEPTION_PARAMETER :
-					break;
-				case FIELD :
-					VariableElementImpl variableElementImpl = (VariableElementImpl) e;
-					binding = variableElementImpl._binding;
-					if (binding instanceof FieldBinding) {
-						FieldBinding fieldBinding = (FieldBinding) binding;
-						FieldDeclaration fieldDeclaration = fieldBinding.sourceField();
-						if (fieldDeclaration != null) {
-							ReferenceBinding declaringClass = fieldBinding.declaringClass;
-							if (declaringClass instanceof SourceTypeBinding) {
-								SourceTypeBinding sourceTypeBinding = (SourceTypeBinding) declaringClass;
-								TypeDeclaration typeDeclaration = (TypeDeclaration) sourceTypeBinding.scope.referenceContext();
-								referenceContext = typeDeclaration;
-							}
-							startPosition = fieldDeclaration.sourceStart;
-							endPosition = fieldDeclaration.sourceEnd;
-						}
-					}
-					break;
-				case INSTANCE_INIT :
-				case STATIC_INIT :
-					break;
-				case LOCAL_VARIABLE :
-					break;
-				case PARAMETER :
-					break;
-				case TYPE_PARAMETER :
-			}
-		}
-		StringBuilder builder = new StringBuilder(msg);
-		switch(kind) {
-			case ERROR :
-				if (referenceContext != null) {
-					CompilationResult result = referenceContext.compilationResult();
-					int[] lineEnds = null;
-					int lineNumber = startPosition >= 0
-							? Util.getLineNumber(startPosition, lineEnds = result.getLineSeparatorPositions(), 0, lineEnds.length-1)
-							: 0;
-					int columnNumber = startPosition >= 0
-							? Util.searchColumnNumber(result.getLineSeparatorPositions(), lineNumber,startPosition)
-							: 0;
-					problem = new BatchAptProblem(
-							result.fileName,
-							String.valueOf(builder),
-							0,
-							NO_ARGUMENTS,
-							ProblemSeverities.Error,
-							startPosition,
-							endPosition,
-							lineNumber,
-							columnNumber);
-				} else {
-					problem = new BatchAptProblem(
-							null,
-							String.valueOf(builder),
-							0,
-							NO_ARGUMENTS,
-							ProblemSeverities.Error,
-							startPosition,
-							endPosition,
-							0,
-							1);
-				}
-				break;
-			case MANDATORY_WARNING :
-			case WARNING :
-			case NOTE :
-			case OTHER :
-				if (referenceContext != null) {
-					CompilationResult result = referenceContext.compilationResult();
-					int[] lineEnds = null;
-					int lineNumber = startPosition >= 0
-							? Util.getLineNumber(startPosition, lineEnds = result.getLineSeparatorPositions(), 0, lineEnds.length-1)
-							: 0;
-					int columnNumber = startPosition >= 0
-							? Util.searchColumnNumber(result.getLineSeparatorPositions(), lineNumber,startPosition)
-							: 0;
-					problem = new BatchAptProblem(
-							result.fileName,
-							String.valueOf(builder),
-							0,
-							NO_ARGUMENTS,
-							ProblemSeverities.Warning,
-							startPosition,
-							endPosition,
-							lineNumber,
-							columnNumber);
-				} else {
-					problem = new BatchAptProblem(
-							null,
-							String.valueOf(builder),
-							0,
-							NO_ARGUMENTS,
-							ProblemSeverities.Warning,
-							startPosition,
-							endPosition,
-							0,
-							1);
-				}
-				break;
-		}
-		return problem;
-	}
 }

commit 49307556c401e403b16280c49eb69fbdfff6300b
Author: Andrey Loskutov <loskutov@gmx.de>
Date:   Sat Oct 28 11:34:14 2017 +0200

    Bug 526591 - fix "using .equals to compare two char[]'s"
    
    Calling equals() on an array is the same as comparing their addresses,
    but it does not compare the array contents and could lead to NPE's if
    array reference was null. Sometimes the intent was really to compare the
    contents, so the code never worked in the expected way.
    
    Avoid confusing or wrong code and potential NPE's by explicitly check
    pointer equality using == or by using Arrays.equals() to compare the
    array contents.
    
    Change-Id: I08f774657ac1be54ad4895764d4f7168b440b630
    Signed-off-by: Andrey Loskutov <loskutov@gmx.de>

1	1	org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/ClasspathDirectory.java
2	2	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
4	4	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/BinaryIndexer.java
5	5	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/SourceIndexerRequestor.java
diff --git a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/ClasspathDirectory.java b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/ClasspathDirectory.java
index 7335a6b..e399d7d 100644
--- a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/ClasspathDirectory.java
+++ b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/ClasspathDirectory.java
@@ -160,7 +160,7 @@ private NameEnvironmentAnswer findClassInternal(char[] typeName, String qualifie
 }
 public NameEnvironmentAnswer findSecondaryInClass(char[] typeName, String qualifiedPackageName, String qualifiedBinaryFileName) {
 	//"package-info" is a reserved class name and can never be a secondary type (it is much faster to stop the search here).
-	if(TypeConstants.PACKAGE_INFO_NAME.equals(typeName)) {
+	if(CharOperation.equals(TypeConstants.PACKAGE_INFO_NAME, typeName)) {
 		return null;
 	}
 
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
index 886f731..d658c10 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
@@ -2376,7 +2376,7 @@ public final class CompletionEngine
 						contextAccepted = true;
 						processModuleKeywordCompletion(parsedUnit, target, (CompletionOnKeyword) target);
 					} else {
-						if (target.moduleName != null || target.moduleName.equals(CharOperation.NO_CHAR))
+					if (target.moduleName != null || target.moduleName == CharOperation.NO_CHAR)
 							skipSet.add(new String(target.moduleName));
 					}
 				}
@@ -11974,7 +11974,7 @@ public final class CompletionEngine
 				TypeReference[] prevImpls = prevProvides.implementations;
 				for (TypeReference prevImpl : prevImpls) {
 					char[][] typeName = prevImpl.getTypeName();
-					if (typeName.equals(CharOperation.NO_CHAR_CHAR)) continue;
+					if (typeName == CharOperation.NO_CHAR_CHAR) continue;
 					existingImpl.add(CharOperation.toString(typeName));
 				}
 			}
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/BinaryIndexer.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/BinaryIndexer.java
index de3f4ce..0d264de 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/BinaryIndexer.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/BinaryIndexer.java
@@ -871,23 +871,23 @@ public class BinaryIndexer extends AbstractIndexer implements SuffixConstants {
 			for (IPackageExport pack : exportedPackages) {
 				addModuleExportedPackages(pack.name());
 				char[][] tgts = pack.targets();
-				if (tgts == null || tgts.equals(CharOperation.NO_CHAR_CHAR)) continue;
+				if (tgts == null || tgts == CharOperation.NO_CHAR_CHAR) continue;
 				for (char[] tgt : tgts) {
-					if (tgt != null && !tgt.equals(CharOperation.NO_CHAR)) 
+					if (tgt != null && tgt != CharOperation.NO_CHAR)
 						addModuleReference(tgt);
 				}
 			}
 		}
 	}
 	private void indexTypeReferences(char[][] ref) {
-		if (ref == null || ref.equals(CharOperation.NO_CHAR))
+		if (ref == null || ref == CharOperation.NO_CHAR_CHAR)
 			return;
 		for (int i = 0; i < ref.length; i++) {
 			addTypeReference(ref[i]);
 		}
 	}
 	private void indexTypeReference(char[] ref) {
-		if (ref == null || ref.equals(CharOperation.NO_CHAR))
+		if (ref == null || ref == CharOperation.NO_CHAR)
 			return;
 		addTypeReference(ref);
 	}
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/SourceIndexerRequestor.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/SourceIndexerRequestor.java
index 84c6331..cb45a5e 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/SourceIndexerRequestor.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/SourceIndexerRequestor.java
@@ -304,7 +304,7 @@ public void enterModule(ModuleInfo moduleInfo) {
 	this.indexer.addModuleDeclaration(moduleInfo.moduleName);
 	if (moduleInfo.requires != null) {
 		for (ISourceElementRequestor.RequiresInfo req : moduleInfo.requires) {
-			if (req == null || req.moduleName == null || req.moduleName.equals(CharOperation.NO_CHAR)) continue;
+			if (req == null || req.moduleName == null || req.moduleName == CharOperation.NO_CHAR) continue;
 			this.indexer.addModuleReference(req.moduleName);
 		}
 	}
@@ -316,15 +316,15 @@ private void enterPackageVisibilityInfo(ISourceElementRequestor.PackageExportInf
 	if (packInfos == null)
 		return;
 	for (ISourceElementRequestor.PackageExportInfo packInfo : packInfos) {
-		if (packInfo == null || packInfo.pkgName == null || packInfo.pkgName.equals(CharOperation.NO_CHAR)) continue;
+		if (packInfo == null || packInfo.pkgName == null || packInfo.pkgName == CharOperation.NO_CHAR) continue;
 		this.indexer.addModuleExportedPackages(packInfo.pkgName);
 		char[][] tgts = packInfo.targets;
-		if (tgts == null || tgts.equals(CharOperation.NO_CHAR_CHAR)) continue;
+		if (tgts == null || tgts == CharOperation.NO_CHAR_CHAR) continue;
 		for (char[] tgt : tgts) {
-			if (tgt != null && !tgt.equals(CharOperation.NO_CHAR)) 
+			if (tgt != null && tgt != CharOperation.NO_CHAR)
 				this.indexer.addModuleReference(tgt);
 		}
-	}
+}
 }
 /**
  * @see ISourceElementRequestor#enterMethod(ISourceElementRequestor.MethodInfo)
commit 903cb9c98a1ec2c69c07c48f4b0ff0c985569d89
Author: Andrey Loskutov <loskutov@gmx.de>
Date:   Sat Oct 28 09:04:11 2017 +0200

    Bug 526591 - fix "using hashCode() on array"
    
    Calling hashCode() on an array returns the same value as
    System.identityHashCode(), and ignores the contents of the array. If
    this happens in hashCode() method of a class implementing equals() and
    the class uses the array content for equals(), it will break the
    contract of the hashCode() method saying that equal objects should
    return same hash value.
    
    Change-Id: I0a986c0e5ed6e441588540001efb4ada35b2dbbd
    Signed-off-by: Andrey Loskutov <loskutov@gmx.de>

1	1	org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/BasicModule.java
2	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ModuleInfo.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/StackMapFrameCodeStream.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/env/ModuleReferenceImpl.java
diff --git a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/BasicModule.java b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/BasicModule.java
index 18a7f96..663f7cb 100644
--- a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/BasicModule.java
+++ b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/BasicModule.java
@@ -228,7 +228,7 @@ public class BasicModule implements IModule {
 	@Override
 	public int hashCode() {
 		int result = 17;
-		int c = this.name.hashCode();
+		int c = CharOperation.hashCode(this.name);
 		result = 31 * result + c;
 		c =  Arrays.hashCode(this.requires);
 		result = 31 * result + c;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ModuleInfo.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ModuleInfo.java
index d46cc05..074b708 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ModuleInfo.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ModuleInfo.java
@@ -288,7 +288,7 @@ public class ModuleInfo extends ClassFileStruct implements IBinaryModule {
 		}
 		@Override
 		public int hashCode() {
-			return this.refName.hashCode();
+			return CharOperation.hashCode(this.refName);
 		}
 		@Override
 		public int getModifiers() {
@@ -352,7 +352,7 @@ public class ModuleInfo extends ClassFileStruct implements IBinaryModule {
 	@Override
 	public int hashCode() {
 		int result = 17;
-		int c = this.name.hashCode();
+		int c = CharOperation.hashCode(this.name);
 		result = 31 * result + c;
 		c =  Arrays.hashCode(this.requires);
 		result = 31 * result + c;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/StackMapFrameCodeStream.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/StackMapFrameCodeStream.java
index 6f2630c..618810e 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/StackMapFrameCodeStream.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/StackMapFrameCodeStream.java
@@ -54,7 +54,7 @@ public class StackMapFrameCodeStream extends CodeStream {
 			return false;
 		}
 		public int hashCode() {
-			return this.pc + this.constantPoolName.hashCode();
+			return this.pc + CharOperation.hashCode(this.constantPoolName);
 		}
 		public String toString() {
 			StringBuffer buffer = new StringBuffer();
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/env/ModuleReferenceImpl.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/env/ModuleReferenceImpl.java
index 15ecf02..a45efe5 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/env/ModuleReferenceImpl.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/env/ModuleReferenceImpl.java
@@ -31,7 +31,7 @@ public class ModuleReferenceImpl implements IModule.IModuleReference {
 	}
 	@Override
 	public int hashCode() {
-		return this.name.hashCode();
+		return CharOperation.hashCode(this.name);
 	}
 	@Override
 	public int getModifiers() {

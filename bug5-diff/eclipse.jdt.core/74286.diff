commit aa6251de28ce7d8f307172e681d4401e486ea590
Author: David Audel <daudel>
Date:   Thu Oct 7 13:27:32 2004 +0000

    bug 74286

36	0	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests_1_5.java
1	0	org.eclipse.jdt.core.tests.model/workspace/Resolve/.classpath
10	0	org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0022/A.java
8	0	org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0022/Test.java
7	0	org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0022/X.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0022/Y.java
8	0	org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0023/Test.java
-	-	org.eclipse.jdt.core.tests.model/workspace/Resolve/test0023.jar
-	-	org.eclipse.jdt.core.tests.model/workspace/Resolve/test0023src.zip
3	1	org.eclipse.jdt.core/buildnotes_jdt-core.html
10	0	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/ISelectionRequestor.java
8	1	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
49	0	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Engine.java
2	2	org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetToCuMapper.java
11	22	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java
1	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceType.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests_1_5.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests_1_5.java
index 99a262f..0c9b7d8 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests_1_5.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests_1_5.java
@@ -398,4 +398,40 @@ public void test0021() throws JavaModelException {
 		elements
 	);
 }
+/*
+ * https://bugs.eclipse.org/bugs/show_bug.cgi?id=74286
+ */
+public void test0022() throws JavaModelException {
+	ICompilationUnit cu = getCompilationUnit("Resolve", "src2", "test0022", "Test.java");
+	
+	String str = cu.getSource();
+	String selection = "add";
+	int start = str.lastIndexOf(selection);
+	int length = selection.length();
+	
+	IJavaElement[] elements = cu.codeSelect(start, length);
+	assertElementsEqual(
+		"Unexpected elements",
+		"add(T, A<T>, A<T>.B, A<T>.C<T>, A<T>.B.D<T>) [in X [in X.java [in test0022 [in src2 [in Resolve]]]]]",
+		elements
+	);
+}
+/*
+ * https://bugs.eclipse.org/bugs/show_bug.cgi?id=74286
+ */
+public void test0023() throws JavaModelException {
+	ICompilationUnit cu = getCompilationUnit("Resolve", "src2", "test0023", "Test.java");
+	
+	String str = cu.getSource();
+	String selection = "add";
+	int start = str.lastIndexOf(selection);
+	int length = selection.length();
+	
+	IJavaElement[] elements = cu.codeSelect(start, length);
+	assertElementsEqual(
+		"Unexpected elements",
+		"add(T, test0023.A<T>, test0023.A<T>.B, test0023.A<T>.C<T>, test0023.A<T>.B.D<T>, test0023.E, test0023.E.F<T>) [in X [in X.class [in test0023 [in test0023.jar [in Resolve]]]]]",
+		elements
+	);
+}
 }
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Resolve/.classpath b/org.eclipse.jdt.core.tests.model/workspace/Resolve/.classpath
index e568a9c..38e0319 100644
--- a/org.eclipse.jdt.core.tests.model/workspace/Resolve/.classpath
+++ b/org.eclipse.jdt.core.tests.model/workspace/Resolve/.classpath
@@ -9,6 +9,7 @@
     <classpathentry kind="lib" path="test25888.jar" sourcepath="/Resolve/test25888src.zip"/>
     <classpathentry kind="lib" path="test47177.jar" sourcepath="/Resolve/test47177src.zip"/>
     <classpathentry kind="lib" path="test47214.jar" sourcepath="/Resolve/test47214.jar"/>
+    <classpathentry kind="lib" path="test0023.jar" sourcepath="/Resolve/test0023src.zip"/>
     <classpathentry kind="lib" path="p4.jar"/>
     <classpathentry kind="lib" path="class-folder"/>
     <classpathentry kind="output" path="bin"/>
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0022/A.java b/org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0022/A.java
new file mode 100644
index 0000000..07bba81
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0022/A.java
@@ -0,0 +1,10 @@
+package test0022;
+
+public class A<U> {
+	public class B {
+		public class D<V> {
+		}
+	}
+	public class C<W> {
+	}
+}
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0022/Test.java b/org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0022/Test.java
new file mode 100644
index 0000000..983653a
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0022/Test.java
@@ -0,0 +1,8 @@
+package test0022;
+
+public class Test {
+	X var;
+	void foo(Y t, A<Y> a, A<Y>.B b, A<Y>.C<Y> c, A<Y>.B.D<Y> d) {
+		var.add(t,a,b,c,d);
+	}
+}
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0022/X.java b/org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0022/X.java
new file mode 100644
index 0000000..fad67ac
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0022/X.java
@@ -0,0 +1,7 @@
+package test0022;
+
+public class X {
+	public <T extends Y> void add(T t, A<T> a, A<T>.B b, A<T>.C<T> c, A<T>.B.D<T> d) {
+		
+	}
+}
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0022/Y.java b/org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0022/Y.java
new file mode 100644
index 0000000..a674371
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0022/Y.java
@@ -0,0 +1,5 @@
+package test0022;
+
+public class Y {
+
+}
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0023/Test.java b/org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0023/Test.java
new file mode 100644
index 0000000..0d295f5
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Resolve/src2/test0023/Test.java
@@ -0,0 +1,8 @@
+package test0023;
+
+public class Test {
+	X var;
+	void foo(Y t, A<Y> a, A<Y>.B b, A<Y>.C<Y> c, A<Y>.B.D<Y> d) {
+		var.add(t,a,b,c,d);
+	}
+}
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Resolve/test0023.jar b/org.eclipse.jdt.core.tests.model/workspace/Resolve/test0023.jar
new file mode 100644
index 0000000..47dbb54
Binary files /dev/null and b/org.eclipse.jdt.core.tests.model/workspace/Resolve/test0023.jar differ
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Resolve/test0023src.zip b/org.eclipse.jdt.core.tests.model/workspace/Resolve/test0023src.zip
new file mode 100644
index 0000000..035400f
Binary files /dev/null and b/org.eclipse.jdt.core.tests.model/workspace/Resolve/test0023src.zip differ
diff --git a/org.eclipse.jdt.core/buildnotes_jdt-core.html b/org.eclipse.jdt.core/buildnotes_jdt-core.html
index c5f73a6..01c4ae9 100644
--- a/org.eclipse.jdt.core/buildnotes_jdt-core.html
+++ b/org.eclipse.jdt.core/buildnotes_jdt-core.html
@@ -53,7 +53,9 @@ What's new in this drop</h2>
 </ul>
 
 <h3>Problem Reports Fixed</h3>
-<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=75720">75720</a>
+<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=74286">74286</a>
+IllegalArgumentException during codeselect
+<br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=75720">75720</a>
 [1.5] Formatter cannot format code that contains varargs
 <br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=75112">75112</a>
 [Search] Cannot find reference to a member type
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/ISelectionRequestor.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/ISelectionRequestor.java
index 0f3cf90..3cbb73b 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/ISelectionRequestor.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/ISelectionRequestor.java
@@ -139,6 +139,10 @@ public interface ISelectionRequestor {
 	 * @param declaringTypeName char[]
 	 * 		Name of the type declaring this new method.
 	 * 
+	 * @param enclosingDeclaringTypeSignature String
+	 *  	Type signature of the declaring type of the declaring type or <code>null</code>
+	 *  	if declaring type is a top level type.
+	 * 
 	 * @param selector char[]
 	 * 		Name of the new method.
 	 * 
@@ -150,6 +154,10 @@ public interface ISelectionRequestor {
 	 * 		Names of the parameters types.
 	 *    	Should contain as many elements as parameterPackageNames.
 	 * 
+	 * @param parameterSignatures String[]
+	 * 		Signature of the parameters types.
+	 *    	Should contain as many elements as parameterPackageNames.
+	 * 
 	 *  @param isConstructor boolean
 	 * 		Answer if the method is a constructor.
 	 * 
@@ -173,9 +181,11 @@ public interface ISelectionRequestor {
 	void acceptMethod(
 		char[] declaringTypePackageName,
 		char[] declaringTypeName,
+		String enclosingDeclaringTypeSignature,
 		char[] selector,
 		char[][] parameterPackageNames,
 		char[][] parameterTypeNames,
+		String[] parameterSignatures,
 		boolean isConstructor,
 		boolean isDeclaration,
 		int start,
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
index 3a6a0a4..2858f85 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
@@ -643,13 +643,15 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 		} else
 			if (binding instanceof MethodBinding) {
 				MethodBinding methodBinding = (MethodBinding) binding;
-				TypeBinding[] parameterTypes = methodBinding.parameters;
+				TypeBinding[] parameterTypes = methodBinding.original().parameters;
 				int length = parameterTypes.length;
 				char[][] parameterPackageNames = new char[length][];
 				char[][] parameterTypeNames = new char[length][];
+				String[] parameterSignatures = new String[length];
 				for (int i = 0; i < length; i++) {
 					parameterPackageNames[i] = parameterTypes[i].qualifiedPackageName();
 					parameterTypeNames[i] = parameterTypes[i].qualifiedSourceName();
+					parameterSignatures[i] = getSignature(parameterTypes[i]).replace('/', '.');
 				}
 				this.noProposal = false;
 				ReferenceBinding declaringClass = methodBinding.declaringClass;
@@ -661,6 +663,7 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 							: methodBinding.selector,
 						parameterPackageNames,
 						parameterTypeNames,
+						parameterSignatures,
 						methodBinding.isConstructor(),
 						parsedUnit,
 						isDeclaration,
@@ -670,11 +673,13 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 					this.requestor.acceptMethod(
 						declaringClass.qualifiedPackageName(),
 						declaringClass.qualifiedSourceName(),
+						declaringClass.enclosingType() == null ? null : getSignature(declaringClass.enclosingType()),
 						methodBinding.isConstructor()
 							? declaringClass.sourceName()
 							: methodBinding.selector,
 						parameterPackageNames,
 						parameterTypeNames,
+						parameterSignatures,
 						methodBinding.isConstructor(), 
 						isDeclaration,
 						this.actualSelectionStart,
@@ -1011,9 +1016,11 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 				this.requestor.acceptMethod(
 					packageName,
 					qualifiedSourceName,
+					null, // SelectionRequestor does not need of declaring type signature for method declaration
 					method.selector,
 					null, // SelectionRequestor does not need of parameters type for method declaration
 					null, // SelectionRequestor does not need of parameters type for method declaration
+					null, // SelectionRequestor does not need of parameters type for method declaration
 					method.isConstructor(),
 					true,
 					this.actualSelectionStart,
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Engine.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Engine.java
index 41243bf..8a902f9 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Engine.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Engine.java
@@ -197,4 +197,53 @@ public abstract class Engine implements ITypeRequestor {
 	protected void reset() {
 		lookupEnvironment.reset();
 	}
+	
+	public static String getSignature(Binding binding) {
+		StringBuffer buffer = new StringBuffer();
+		appendSignature(binding, buffer);
+		return buffer.toString();
+	}
+	
+	private static void appendSignature(Binding binding, StringBuffer sig) {
+		switch(binding.bindingType()) {
+			case BindingIds.TYPE:
+				if(binding instanceof BaseTypeBinding) {
+					BaseTypeBinding baseTypeBinding = (BaseTypeBinding) binding;
+					sig.append(baseTypeBinding.constantPoolName());
+				} else if(binding instanceof TypeVariableBinding) {
+					TypeVariableBinding typeVariableBinding = (TypeVariableBinding) binding;
+					sig.append(CharOperation.concat('T', typeVariableBinding.sourceName(), ';'));
+				} else if(binding instanceof ParameterizedTypeBinding) {
+					ParameterizedTypeBinding parameterizedTypeBinding = (ParameterizedTypeBinding) binding;
+					if (parameterizedTypeBinding.isMemberType() && parameterizedTypeBinding.enclosingType().isParameterizedType()) {
+						String tmpSig = getSignature(parameterizedTypeBinding.enclosingType());
+						sig.append(tmpSig.substring(0, tmpSig.length()-1));
+						sig.append('.');
+						sig.append(parameterizedTypeBinding.sourceName());
+					} else {
+						String tmpSig = getSignature(parameterizedTypeBinding.type);
+						sig.append(tmpSig.substring(0, tmpSig.length()-1));
+					}	   	    
+					if (parameterizedTypeBinding.arguments != null) {
+					    sig.append('<');
+					    for (int i = 0, length = parameterizedTypeBinding.arguments.length; i < length; i++) {
+					        appendSignature(parameterizedTypeBinding.arguments[i], sig);
+					    }
+					    sig.append('>'); //$NON-NLS-1$
+					}
+					sig.append(';');
+				} else {
+					TypeBinding typeBinding = (TypeBinding) binding;
+					sig.append('L');
+					char[] qualifiedPackageName = typeBinding.qualifiedPackageName();
+					if(qualifiedPackageName != null && qualifiedPackageName.length > 0) {
+						sig.append(typeBinding.qualifiedPackageName());
+						sig.append('.');
+					}
+					sig.append(CharOperation.replaceOnCopy(typeBinding.qualifiedSourceName(), '.', '$'));
+					sig.append(';');
+				}
+				break;
+		}
+	}
 }
diff --git a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetToCuMapper.java b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetToCuMapper.java
index 095d53d..190c058 100644
--- a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetToCuMapper.java
+++ b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetToCuMapper.java
@@ -286,8 +286,8 @@ public ISelectionRequestor getSelectionRequestor(final ISelectionRequestor origi
 		public void acceptInterface(char[] packageName, char[] interfaceName, boolean needQualification, boolean isDeclaration, int start, int end) {
 			originalRequestor.acceptInterface(packageName, interfaceName, needQualification, isDeclaration, start, end);
 		}
-		public void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, boolean isConstructor, boolean isDeclaration, int start, int end) {
-			originalRequestor.acceptMethod(declaringTypePackageName, declaringTypeName, selector, parameterPackageNames, parameterTypeNames, isConstructor, isDeclaration, start, end);
+		public void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, String enclosingDeclaringTypeSignature, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, String[] parameterSignatures, boolean isConstructor, boolean isDeclaration, int start, int end) {
+			originalRequestor.acceptMethod(declaringTypePackageName, declaringTypeName, enclosingDeclaringTypeSignature, selector, parameterPackageNames, parameterTypeNames, parameterSignatures, isConstructor, isDeclaration, start, end);
 		}
 		public void acceptPackage(char[] packageName) {
 			originalRequestor.acceptPackage(packageName);
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java
index a342008..cc04ab0 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java
@@ -26,6 +26,7 @@ import org.eclipse.jdt.core.compiler.*;
 import org.eclipse.jdt.core.compiler.IProblem;
 import org.eclipse.jdt.internal.codeassist.ISelectionRequestor;
 import org.eclipse.jdt.internal.codeassist.SelectionEngine;
+import org.eclipse.jdt.internal.codeassist.impl.Engine;
 import org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration;
 import org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding;
 import org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding;
@@ -70,24 +71,8 @@ public SelectionRequestor(NameLookup nameLookup, Openable openable) {
  *
  * fix for 1FWFT6Q
  */
-protected void acceptBinaryMethod(IType type, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames) {
-	String[] parameterTypes= null;
-	if (parameterTypeNames != null) {
-		parameterTypes= new String[parameterTypeNames.length];
-		for (int i= 0, max = parameterTypeNames.length; i < max; i++) {
-			String pkg = IPackageFragment.DEFAULT_PACKAGE_NAME;
-			if (parameterPackageNames[i] != null && parameterPackageNames[i].length > 0) {
-				pkg = new String(parameterPackageNames[i]) + "."; //$NON-NLS-1$
-			}
-			
-			String typeName = new String(parameterTypeNames[i]);
-			if (typeName.indexOf('.') > 0) 
-				typeName = typeName.replace('.', '$');
-			parameterTypes[i]= Signature.createTypeSignature(
-				pkg + typeName, true);
-		}
-	}
-	IMethod method= type.getMethod(new String(selector), parameterTypes);
+protected void acceptBinaryMethod(IType type, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, String[] paramterSignatures) {
+	IMethod method= type.getMethod(new String(selector), paramterSignatures);
 	if (method.exists()) {
 		addElement(method);
 		if(SelectionEngine.DEBUG){
@@ -175,7 +160,7 @@ public void acceptLocalField(SourceTypeBinding typeBinding, char[] name, Compila
 		}
 	}
 }
-public void acceptLocalMethod(SourceTypeBinding typeBinding, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, boolean isConstructor, CompilationUnitDeclaration parsedUnit, boolean isDeclaration, int start, int end) {
+public void acceptLocalMethod(SourceTypeBinding typeBinding, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, String[] parameterSignatures, boolean isConstructor, CompilationUnitDeclaration parsedUnit, boolean isDeclaration, int start, int end) {
 	IType type = (IType)this.handleFactory.createElement(typeBinding.scope.referenceContext, parsedUnit, this.openable);
 	// fix for 1FWFT6Q
 	if (type != null) {
@@ -195,12 +180,14 @@ public void acceptLocalMethod(SourceTypeBinding typeBinding, char[] selector, ch
 				int length = parameterPackageNames.length;
 				System.arraycopy(parameterPackageNames, 0, parameterPackageNames = new char[length+1][], 1, length);
 				System.arraycopy(parameterTypeNames, 0, parameterTypeNames = new char[length+1][], 1, length);
+				System.arraycopy(parameterSignatures, 0, parameterSignatures = new String[length+1], 1, length);
 				
 				parameterPackageNames[0] = declaringDeclaringType.getPackageFragment().getElementName().toCharArray();
 				parameterTypeNames[0] = declaringDeclaringType.getTypeQualifiedName().toCharArray();
+				parameterSignatures[0] = Engine.getSignature(typeBinding.enclosingType());
 			}
 			
-			acceptBinaryMethod(type, selector, parameterPackageNames, parameterTypeNames);
+			acceptBinaryMethod(type, selector, parameterPackageNames, parameterTypeNames, parameterSignatures);
 		} else {
 			acceptSourceMethod(type, selector, parameterPackageNames, parameterTypeNames);
 		}
@@ -231,7 +218,7 @@ public void acceptLocalVariable(LocalVariableBinding binding, CompilationUnitDec
 /**
  * Resolve the method
  */
-public void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, boolean isConstructor, boolean isDeclaration, int start, int end) {
+public void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, String enclosingDeclaringTypeSignature, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, String[] parameterSignatures, boolean isConstructor, boolean isDeclaration, int start, int end) {
 	if(isDeclaration) {
 		IType type = resolveTypeByLocation(declaringTypePackageName, declaringTypeName,
 				NameLookup.ACCEPT_CLASSES | NameLookup.ACCEPT_INTERFACES,
@@ -261,12 +248,14 @@ public void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeNa
 					int length = parameterPackageNames.length;
 					System.arraycopy(parameterPackageNames, 0, parameterPackageNames = new char[length+1][], 1, length);
 					System.arraycopy(parameterTypeNames, 0, parameterTypeNames = new char[length+1][], 1, length);
+					System.arraycopy(parameterSignatures, 0, parameterSignatures = new String[length+1], 1, length);
 					
 					parameterPackageNames[0] = declaringDeclaringType.getPackageFragment().getElementName().toCharArray();
 					parameterTypeNames[0] = declaringDeclaringType.getTypeQualifiedName().toCharArray();
+					parameterSignatures[0] = enclosingDeclaringTypeSignature;
 				}
 				
-				acceptBinaryMethod(type, selector, parameterPackageNames, parameterTypeNames);
+				acceptBinaryMethod(type, selector, parameterPackageNames, parameterTypeNames, parameterSignatures);
 			} else {
 				acceptSourceMethod(type, selector, parameterPackageNames, parameterTypeNames);
 			}
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceType.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceType.java
index 2653860..d10b9d8 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceType.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceType.java
@@ -762,7 +762,7 @@ public String[][] resolveType(String typeName, WorkingCopyOwner owner) throws Ja
 		public void acceptField(char[] declaringTypePackageName, char[] declaringTypeName, char[] fieldName, boolean isDeclaration, int start, int end) {
 			// ignore
 		}
-		public void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, boolean isConstructor, boolean isDeclaration, int start, int end) {
+		public void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, String enclosingDeclaringTypeSignature, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, String[] parameterSignatures, boolean isConstructor, boolean isDeclaration, int start, int end) {
 			// ignore
 		}
 		public void acceptPackage(char[] packageName){

commit 48cde6dd10c45c5a811ad31d25356745414633f3
Author: Stephan Herrmann <stephan.herrmann@berlin.de>
Date:   Thu Jan 16 02:19:23 2014 +0100

    Bug 425798 - [1.8][compiler] Another NPE in
    ConstraintTypeFormula.reduceSubType

28	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java
index a9bdb5d..dc96184 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java
@@ -890,4 +890,32 @@ public void testBug425783() {
 			"}\n"
 		});
 }
+public void testBug425798() {
+	runNegativeTest( // TODO: for now we just want to prove absence of NPE, should, however, be a conform test, actually.
+		new String[] {
+			"X.java",
+			"import java.lang.annotation.*;\n" +
+			"import java.util.*;\n" +
+			"import java.util.function.*;\n" +
+			"import java.util.stream.*;\n" +
+			"interface MyCollector<T, A, R> extends Collector<T, A, R> {\n" + 
+			"}\n" +
+			"public abstract class X {\n" +
+			"	abstract <T, K, U, M extends Map<K, U>>\n" + 
+			"    MyCollector<T, ?, M> toMap(Function<? super T, ? extends K> km,\n" + 
+			"                                BinaryOperator<U> mf);" +
+			"	void test(Stream<Annotation> annotations) {\n" +
+			"		annotations\n" +
+			"			.collect(toMap(Annotation::annotationType,\n" +
+			"				 (first, second) -> first));\n" +
+			"	}\n" +
+			"}\n"
+		},
+		"----------\n" + 
+		"1. ERROR in X.java (at line 12)\n" + 
+		"	.collect(toMap(Annotation::annotationType,\n" + 
+		"	               ^^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
+		"The type of annotationType() from the type Annotation is Class<? extends Annotation>, this is incompatible with the descriptor's return type: Class<capture#3-of ? extends Annotation>\n" + 
+		"----------\n");
+}
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java
index 1a3426c..abc5708 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java
@@ -433,7 +433,7 @@ class BoundSet {
 										return false;
 								}
 							}
-							if (three.subBounds != null) {
+							if (three.subBounds != null && pi.firstBound != null) {
 								// If Bi is Object, α <: R implies ⟨T <: R⟩	(extends wildcard)
 								// α <: R implies ⟨θ Bi <: R⟩				(else) 
 								it = three.subBounds.iterator();
commit a20c7987b715f8a0fad829453c4bde4984a825aa
Author: Stephan Herrmann <stephan.herrmann@berlin.de>
Date:   Thu Jan 16 14:48:52 2014 +0100

    Bug 425798 - [1.8][compiler] Another NPE in
    ConstraintTypeFormula.reduceSubType

30	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java
4	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
4	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java
2	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java
2	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintTypeFormula.java
14	7	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java
4	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java
index dc96184..62301f9 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java
@@ -918,4 +918,34 @@ public void testBug425798() {
 		"The type of annotationType() from the type Annotation is Class<? extends Annotation>, this is incompatible with the descriptor's return type: Class<capture#3-of ? extends Annotation>\n" + 
 		"----------\n");
 }
+// witness for NPE mentioned in https://bugs.eclipse.org/bugs/show_bug.cgi?id=425798#c2
+public void testBug425798b() {
+	runConformTest(
+		new String[] {
+			"X.java",
+			"import java.util.Objects;\n" + 
+			"import java.util.PrimitiveIterator;\n" + 
+			"import java.util.Spliterator;\n" + 
+			"import java.util.Spliterator.OfInt;\n" + 
+			"import java.util.function.Consumer;\n" + 
+			"import java.util.function.IntConsumer;\n" + 
+			"\n" + 
+			"class IntIteratorSpliterator implements OfInt {\n" + 
+			"	public IntIteratorSpliterator(PrimitiveIterator.OfInt arg) { }\n" + 
+			"	public void forEachRemaining(IntConsumer action) { }\n" + 
+			"	public boolean tryAdvance(Consumer<? super Integer> action) { return false; }\n" + 
+			"	public long estimateSize() { return 0; }\n" + 
+			"	public int characteristics() { return 0; }\n" + 
+			"	public OfInt trySplit() { return null; }\n" + 
+			"	public boolean tryAdvance(IntConsumer action) { return false; }\n" + 
+			"}\n" + 
+			"public class X {\n" + 
+			"\n" + 
+			"	public Spliterator.OfInt spliterator(PrimitiveIterator.OfInt iterator) {\n" + 
+			"		return new IntIteratorSpliterator(id(iterator));\n" + 
+			"	}\n" + 
+			"	<T> T id(T e) { return e; }\n" + 
+			"}\n"
+		});
+}
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
index 2bd7515..c8ce9d1 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
@@ -24,6 +24,7 @@
  *							Bug 425142 - [1.8][compiler] NPE in ConstraintTypeFormula.reduceSubType
  *							Bug 425153 - [1.8] Having wildcard allows incompatible types in a lambda expression
  *							Bug 424205 - [1.8] Cannot infer type for diamond type with lambda on method invocation
+ *							Bug 425798 - [1.8][compiler] Another NPE in ConstraintTypeFormula.reduceSubType
  *     Andy Clement (GoPivotal, Inc) aclement@gopivotal.com - Contributions for
  *                          Bug 405104 - [1.8][compiler][codegen] Implement support for serializeable lambdas
  *******************************************************************************/
@@ -287,8 +288,8 @@ public class LambdaExpression extends FunctionalExpression implements ReferenceC
 				// invoke 18.5.3 Functional Interface Parameterization Inference
 				InferenceContext18 ctx = new InferenceContext18(methodScope);
 				TypeBinding[] q = ctx.createBoundsForFunctionalInterfaceParameterizationInference(withWildCards);
-				if (q.length != this.arguments.length) {
-					// fail  TODO: can this still happen here?
+				if (q == null || q.length != this.arguments.length) {
+					// fail  TODO: can lengths actually differ here?
 				} else {
 					if (ctx.reduceWithEqualityConstraints(this.argumentTypes, q)) {
 						TypeBinding[] a = withWildCards.arguments;
@@ -301,6 +302,7 @@ public class LambdaExpression extends FunctionalExpression implements ReferenceC
 							reportSamProblem(blockScope, this.descriptor);
 					}
 				}
+				// TODO: in which cases do we have to assign this.resolvedType & this.descriptor (with problem bindings) to prevent NPE downstream??
 			}
 		}
 		for (int i = 0; i < length; i++) {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java
index abc5708..ba8ded8 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java
@@ -219,7 +219,10 @@ class BoundSet {
 	// main storage of type bounds:
 	HashMap/*<InferenceVariable,ThreeSets>*/ boundsPerVariable = new HashMap();
 	
-	/** 18.1.3 bullet 4: G<α1, ..., αn> = capture(G<A1, ..., An>) */
+	/**
+	 * 18.1.3 bullet 4: G<α1, ..., αn> = capture(G<A1, ..., An>)
+	 * On both sides we only enter types with nonnull arguments. 
+	 */
 	HashMap/*<ParameterizedTypeBinding,ParameterizedTypeBinding>*/ captures = new HashMap();
 	/** 18.1.3 bullet 5: throws α */
 	Set/*<InferenceVariable>*/ inThrows = new HashSet();
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java
index 8d2ea2b..09e7275 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java
@@ -326,12 +326,12 @@ class ConstraintExpressionFormula extends ConstraintFormula {
 			}
 			TypeBinding rTheta = inferenceContext.substitute(returnType);
 			ParameterizedTypeBinding parameterizedType = InferenceContext18.parameterizedWithWildcard(rTheta);
-			if (parameterizedType != null) {
+			if (parameterizedType != null && parameterizedType.arguments != null) {
 				TypeBinding[] arguments = parameterizedType.arguments;
 				InferenceVariable[] betas = inferenceContext.addTypeVariableSubstitutions(arguments);
 				TypeBinding gbeta = inferenceContext.environment.createParameterizedType(
 						parameterizedType.genericType(), betas, parameterizedType.enclosingType(), parameterizedType.getTypeAnnotations());
-				inferenceContext.currentBounds.captures.put(gbeta, parameterizedType);
+				inferenceContext.currentBounds.captures.put(gbeta, parameterizedType); // established: both types have nonnull arguments
 				ConstraintTypeFormula newConstraint = new ConstraintTypeFormula(gbeta, targetType, COMPATIBLE);
 				return inferenceContext.reduceAndIncorporate(newConstraint);
 			}
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintTypeFormula.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintTypeFormula.java
index 7d24541..d49b398 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintTypeFormula.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintTypeFormula.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2013 GK Software AG.
+ * Copyright (c) 2013, 2014 GK Software AG.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -314,7 +314,7 @@ class ConstraintTypeFormula extends ConstraintFormula {
 		if (cb == null)
 			return false; // nothing here means we failed 
 		TypeBinding[] bi = ((ParameterizedTypeBinding) cb).arguments;
-		if (cb.isRawType() || bi.length == 0)
+		if (cb.isRawType() || bi == null || bi.length == 0)
 			return (this.isSoft && InferenceContext18.SIMULATE_BUG_JDK_8026527) ? true : false; // FALSE would conform to the spec 
 		for (int i = 0; i < ai.length; i++)
 			constraints.add(new ConstraintTypeFormula(bi[i], ai[i], TYPE_ARGUMENT_CONTAINED, this.isSoft));
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java
index e1f8345..5363137 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java
@@ -1027,14 +1027,19 @@ public class InferenceContext18 {
 		this.problemMethods.add(problemMethod);
 	}
 
-	public static ParameterizedTypeBinding parameterizedWithWildcard(TypeBinding returnType) {
-		if (returnType == null || returnType.kind() != Binding.PARAMETERIZED_TYPE)
+	/**
+	 * If 'type' is a parameterized type and one of its arguments is a wildcard answer the casted type, else null.
+	 * A nonnull answer is ensured to also have nonnull arguments.
+	 */
+	public static ParameterizedTypeBinding parameterizedWithWildcard(TypeBinding type) {
+		if (type == null || type.kind() != Binding.PARAMETERIZED_TYPE)
 			return null;
-		ParameterizedTypeBinding parameterizedType = (ParameterizedTypeBinding) returnType;
+		ParameterizedTypeBinding parameterizedType = (ParameterizedTypeBinding) type;
 		TypeBinding[] arguments = parameterizedType.arguments;
-		for (int i = 0; i < arguments.length; i++) {
-			if (arguments[i].isWildcard())
-				return parameterizedType;
+		if (arguments != null) {
+			for (int i = 0; i < arguments.length; i++)
+				if (arguments[i].isWildcard())
+					return parameterizedType;
 		}
 		return null;
 	}
@@ -1042,11 +1047,13 @@ public class InferenceContext18 {
 	/**
 	 * Create initial bound set for 18.5.3 Functional Interface Parameterization Inference
 	 * @param functionalInterface the functional interface F<A1,..Am>
-	 * @return the parameter types Q1..Qk of the function type of the type F<α1, ..., αm> 
+	 * @return the parameter types Q1..Qk of the function type of the type F<α1, ..., αm>, or null 
 	 */
 	public TypeBinding[] createBoundsForFunctionalInterfaceParameterizationInference(ParameterizedTypeBinding functionalInterface) {
 		this.currentBounds = new BoundSet();
 		TypeBinding[] a = functionalInterface.arguments;
+		if (a == null)
+			return null;
 		InferenceVariable[] alpha = addInitialTypeVariableSubstitutions(a);
 
 		for (int i = 0; i < a.length; i++) {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java
index dafecec..e2ce3a7 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java
@@ -29,6 +29,7 @@
  *								Bug 400874 - [1.8][compiler] Inference infrastructure should evolve to meet JLS8 18.x (Part G of JSR335 spec)
  *								Bug 423504 - [1.8] Implement "18.5.3 Functional Interface Parameterization Inference"
  *								Bug 425278 - [1.8][compiler] Suspect error: The target type of this expression is not a well formed parameterized type due to bound(s) mismatch
+ *								Bug 425798 - [1.8][compiler] Another NPE in ConstraintTypeFormula.reduceSubType
  *******************************************************************************/
 package org.eclipse.jdt.internal.compiler.lookup;
 
@@ -1326,7 +1327,9 @@ public class ParameterizedTypeBinding extends ReferenceBinding implements Substi
 		if (theAbstractMethod == null || !theAbstractMethod.isValidBinding())
 			return this.singleAbstractMethod = theAbstractMethod;
 		
-		TypeBinding [] typeArguments = this.arguments; // A1 ... An 
+		TypeBinding [] typeArguments = this.arguments; // A1 ... An
+		if (typeArguments == null)
+			typeArguments = Binding.NO_TYPES;
 		TypeVariableBinding [] typeParameters = genericType.typeVariables(); // P1 ... Pn
 		TypeBinding [] types = new TypeBinding[typeArguments.length];  // T1 ... Tn
 		for (int i = 0, length = typeArguments.length; i < length; i++) {

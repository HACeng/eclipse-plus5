commit 0e6d4fe5469565f21baa2fd0ec88d178818c619b
Author: Jim Des Rivieres <jeem>
Date:   Tue Nov 30 16:47:44 2004 +0000

    Revise EnumConstantDeclaration API for anonymous enumerations (bug 79752)

3	0	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTMatcherTest.java
43	0	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java
4	1	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTVisitorTest.java
1	1	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java
5	2	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java
5	4	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AbstractTypeDeclaration.java
4	1	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnonymousClassDeclaration.java
75	7	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/EnumConstantDeclaration.java
2	7	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTMatcherTest.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTMatcherTest.java
index 4f8d965..4c049a3 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTMatcherTest.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTMatcherTest.java
@@ -818,6 +818,8 @@ public class ASTMatcherTest extends org.eclipse.jdt.core.tests.junit.extension.T
 		x1.setBody(S1);
 		basicMatch(x1);
 	}
+	/** @deprecated Only to suppress warnings for refs to bodyDeclarations. */
+	// TODO (jeem) - remove deprecation after 3.1 M4
 	public void testEnumConstantDeclaration() {
 		if (ast.apiLevel() == AST.JLS2) {
 			return;
@@ -831,6 +833,7 @@ public class ASTMatcherTest extends org.eclipse.jdt.core.tests.junit.extension.T
 		x1.arguments().add(E2);
 		x1.bodyDeclarations().add(FD1);
 		x1.bodyDeclarations().add(FD2);
+		x1.setAnonymousClassDeclaration(ACD1);
 		basicMatch(x1);
 	}
 	public void testEnumDeclaration() {
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java
index 5b9dc96..f531d7a 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java
@@ -2808,6 +2808,8 @@ public class ASTTest extends org.eclipse.jdt.core.tests.junit.extension.TestCase
 	
 	}	
 	
+	/** @deprecated Only to suppress warnings for refs to bodyDeclarations. */
+	// TODO (jeem) - remove deprecation after 3.1 M4
 	public void testEnumConstantDeclaration() {
 		if (ast.apiLevel() == AST.JLS2) {
 			// node type introduced in 3.0 API
@@ -2830,6 +2832,7 @@ public class ASTTest extends org.eclipse.jdt.core.tests.junit.extension.TestCase
 		assertTrue(x.getJavadoc() == null);
 		assertTrue(x.arguments().size()== 0);
 		assertTrue(x.bodyDeclarations().size()== 0);
+		assertTrue(x.getAnonymousClassDeclaration() == null);
 		assertTrue(x.modifiers().size() == 0);
 		assertTrue(x.getNodeType() == ASTNode.ENUM_CONSTANT_DECLARATION);
 		assertTrue(x.structuralPropertiesForType() == EnumConstantDeclaration.propertyDescriptors(ast.apiLevel()));
@@ -2875,6 +2878,7 @@ public class ASTTest extends org.eclipse.jdt.core.tests.junit.extension.TestCase
 			}
 		});
 
+		// TODO (jeem) - after 3.1 M4 remove mention of bodyDeclarations
 		genericPropertyListTest(x, x.bodyDeclarations(),
 		  new Property("BodyDeclarations", true, BodyDeclaration.class) { //$NON-NLS-1$
 			public ASTNode sample(AST targetAst, boolean parented) {
@@ -2905,6 +2909,45 @@ public class ASTTest extends org.eclipse.jdt.core.tests.junit.extension.TestCase
 		assertTrue(t1.isMemberTypeDeclaration() == true);
 		assertTrue(t1.isPackageMemberTypeDeclaration() == false);
 	
+		genericPropertyTest(x, new Property("AnonymousClassDeclaration", false, AnonymousClassDeclaration.class) { //$NON-NLS-1$
+			public ASTNode sample(AST targetAst, boolean parented) {
+				AnonymousClassDeclaration result = targetAst.newAnonymousClassDeclaration();
+				if (parented) {
+					targetAst.newClassInstanceCreation().setAnonymousClassDeclaration(result);
+				}
+				return result;
+			}
+			public ASTNode wrap() {
+				// return AnonymousClassDeclaration that embeds x
+				AnonymousClassDeclaration s0 = x.getAST().newAnonymousClassDeclaration();
+				EnumDeclaration s1 = x.getAST().newEnumDeclaration();
+				s0.bodyDeclarations().add(s1);
+				s1.bodyDeclarations().add(x);
+				return s0;
+			}
+			public void unwrap() {
+				EnumDeclaration s1 = (EnumDeclaration) x.getParent();
+				s1.bodyDeclarations().remove(x);
+			}
+			public ASTNode get() {
+				return x.getAnonymousClassDeclaration();
+			}
+			public void set(ASTNode value) {
+				x.setAnonymousClassDeclaration((AnonymousClassDeclaration) value);
+			}
+		});
+
+		// check that TypeDeclarations in body are classified correctly
+		x.setAnonymousClassDeclaration(null);
+		AnonymousClassDeclaration w0 = ast.newAnonymousClassDeclaration();
+		x.setAnonymousClassDeclaration(w0);
+		TypeDeclaration w1 = ast.newTypeDeclaration();
+		w0.bodyDeclarations().add(w1);
+
+		assertTrue(w1.isLocalTypeDeclaration() == false);
+		assertTrue(w1.isMemberTypeDeclaration() == true);
+		assertTrue(w1.isPackageMemberTypeDeclaration() == false);
+	
 	}	
 	
 	public void testTypeParameter() {
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTVisitorTest.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTVisitorTest.java
index 62d70ea..45acdbb 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTVisitorTest.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTVisitorTest.java
@@ -1360,6 +1360,8 @@ public class ASTVisitorTest extends org.eclipse.jdt.core.tests.junit.extension.T
 		String result = b.toString();
 		assertTrue(result.equals("[(sEMsEM)]")); //$NON-NLS-1$
 	}
+	/** @deprecated Only to suppress warnings for refs to bodyDeclarations. */
+	// TODO (jeem) - remove deprecation after 3.1 M4
 	public void testEnumConstantDeclaration() {
 		if (ast.apiLevel() == AST.JLS2) {
 			return;
@@ -1373,11 +1375,12 @@ public class ASTVisitorTest extends org.eclipse.jdt.core.tests.junit.extension.T
 		x1.arguments().add(E2);
 		x1.bodyDeclarations().add(FD1);
 		x1.bodyDeclarations().add(FD2);
+		x1.setAnonymousClassDeclaration(ACD1);
 		TestVisitor v1 = new TestVisitor();
 		b.setLength(0);
 		x1.accept(v1);
 		String result = b.toString();
-		assertTrue(result.equals("[(ECD"+JD1S+MOD1S+MOD2S+N1S+E1S+E2S+FD1S+FD2S+"ECD)]")); //$NON-NLS-1$ //$NON-NLS-2$
+		assertTrue(result.equals("[(ECD"+JD1S+MOD1S+MOD2S+N1S+E1S+E2S+FD1S+FD2S+ACD1S+"ECD)]")); //$NON-NLS-1$ //$NON-NLS-2$
 	}
 	public void testEnumDeclaration() {
 		if (ast.apiLevel() == AST.JLS2) {
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java
index 6f34361..88afc17 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java
@@ -1556,7 +1556,7 @@ public final class AST {
 	 * Creates an unparented enum constant declaration node owned by this AST.
 	 * The name of the constant is an unspecified, but legal, name; 
 	 * no doc comment; no modifiers or annotations; no arguments; 
-	 * and an empty class body.
+	 * and does not declare an anonymous class.
 	 * 
 	 * @return a new unparented enum constant declaration node
 	 * @exception UnsupportedOperationException if this operation is used in
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java
index 544f636..5892837 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java
@@ -779,8 +779,11 @@ public class ASTMatcher {
 				&& safeSubtreeMatch(node.getName(), o.getName())
 				&& safeSubtreeListMatch(node.arguments(), o.arguments())
 				&& safeSubtreeListMatch(
-					node.bodyDeclarations(),
-					o.bodyDeclarations()));
+					node.obsoleteBodyDeclarations(),
+					o.obsoleteBodyDeclarations()))
+				&& safeSubtreeMatch(
+					node.getAnonymousClassDeclaration(),
+					o.getAnonymousClassDeclaration());
 	}
 	
 	/**
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AbstractTypeDeclaration.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AbstractTypeDeclaration.java
index a091701..836ada7 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AbstractTypeDeclaration.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AbstractTypeDeclaration.java
@@ -190,17 +190,18 @@ public abstract class AbstractTypeDeclaration extends BodyDeclaration {
 	 * Returns whether this type declaration is a type member.
 	 * <p>
 	 * Note that this is a convenience method that simply checks whether
-	 * this node's parent is a type declaration node, an anonymous 
-	 * class declaration, or an enumeration constant declaration.
+	 * this node's parent is a type declaration node or an anonymous 
+	 * class declaration.
 	 * </p>
 	 * 
 	 * @return <code>true</code> if this type declaration is a child of
-	 *   a type declaration node, a class instance creation node, or an
-	 *   enum constant declaration, and <code>false</code> otherwise
+	 *   a type declaration node or an anonymous class declaration node,
+	 *   and <code>false</code> otherwise
 	 * @since 2.0 (originally declared on <code>TypeDeclaration</code>)
 	 */
 	public boolean isMemberTypeDeclaration() {
 		ASTNode parent = getParent();
+		// TODO (jeem) - after 3.1 M4 remove mention of EnumConstantDeclaration
 		return (parent instanceof AbstractTypeDeclaration)
 			|| (parent instanceof AnonymousClassDeclaration)
 			|| (parent instanceof EnumConstantDeclaration);
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnonymousClassDeclaration.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnonymousClassDeclaration.java
index a973235..0664204 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnonymousClassDeclaration.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnonymousClassDeclaration.java
@@ -14,8 +14,10 @@ import java.util.ArrayList;
 import java.util.List;
 
 /**
- * Anonymous class declaration AST node type. This type of node appears
+ * Anonymous class declaration AST node type. For JLS2, this type of node appears
  * only as a child on a class instance creation expression.
+ * For JLS3, this type of node appears may also appear as the child of
+ * an enum constant declaration.
  *
  * <pre>
  * AnonymousClassDeclaration:
@@ -23,6 +25,7 @@ import java.util.List;
  * </pre>
  * 
  * @see ClassInstanceCreation
+ * @see EnumConstantDeclaration
  * @since 2.0
  */
 public class AnonymousClassDeclaration extends ASTNode {
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/EnumConstantDeclaration.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/EnumConstantDeclaration.java
index ac3aff1..f24a2f1 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/EnumConstantDeclaration.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/EnumConstantDeclaration.java
@@ -22,7 +22,7 @@ import java.util.List;
  * EnumConstantDeclaration:
  *     [ Javadoc ] { ExtendedModifier } Identifier
  *         [ <b>(</b> [ Expression { <b>,</b> Expression } ] <b>)</b> ]
- *         [ <b>{</b> { ClassBodyDeclaration | <b>;</b> } <b>}</b> ]
+ *         [ AnonymousClassDeclaration ]
  * </pre>
  * <p>
  * When a Javadoc comment is present, the source
@@ -73,11 +73,20 @@ public class EnumConstantDeclaration extends BodyDeclaration {
 	
 	/**
 	 * The "bodyDeclarations" structural property of this node type.
+	 * @deprecated This property has been replaced by ANONYMOUS_CLASS_DECLARATION_PROPERTY.
 	 */
+	// TODO (jeem) - remove this after 3.1 M4
 	public static final ChildListPropertyDescriptor BODY_DECLARATIONS_PROPERTY = 
 		new ChildListPropertyDescriptor(EnumConstantDeclaration.class, "bodyDeclarations", BodyDeclaration.class, CYCLE_RISK); //$NON-NLS-1$
 	
 	/**
+	 * The "anonymousClassDeclaration" structural property of this node type.
+	 * @since 3.1
+	 */
+	public static final ChildPropertyDescriptor ANONYMOUS_CLASS_DECLARATION_PROPERTY = 
+		new ChildPropertyDescriptor(EnumConstantDeclaration.class, "anonymousClassDeclaration", AnonymousClassDeclaration.class, OPTIONAL, CYCLE_RISK); //$NON-NLS-1$
+	
+	/**
 	 * A list of property descriptors (element type: 
 	 * {@link StructuralPropertyDescriptor}),
 	 * or null if uninitialized.
@@ -92,6 +101,7 @@ public class EnumConstantDeclaration extends BodyDeclaration {
 		addProperty(NAME_PROPERTY, properyList);
 		addProperty(ARGUMENTS_PROPERTY, properyList);
 		addProperty(BODY_DECLARATIONS_PROPERTY, properyList);
+		addProperty(ANONYMOUS_CLASS_DECLARATION_PROPERTY, properyList);
 		PROPERTY_DESCRIPTORS = reapPropertyList(properyList);
 	}
 
@@ -125,15 +135,24 @@ public class EnumConstantDeclaration extends BodyDeclaration {
 	/**
 	 * The body declarations (element type: <code>BodyDeclaration</code>).
 	 * Defaults to an empty list.
+	 * @deprecated
 	 */
+	// TODO (jeem) - remove this after 3.1 M4
 	private ASTNode.NodeList bodyDeclarations = 
 		new ASTNode.NodeList(BODY_DECLARATIONS_PROPERTY);
 
 	/**
+	 * The optional anonymous class declaration; <code>null</code> for none; 
+	 * defaults to none.
+	 * @since 3.1
+	 */
+	private AnonymousClassDeclaration optionalAnonymousClassDeclaration = null;
+	
+	/**
 	 * Creates a new AST node for an enumeration constants declaration owned by
 	 * the given AST. By default, the enumeration constant has an unspecified,
 	 * but legal, name; no javadoc; an empty list of modifiers and annotations;
-	 * an empty list of arguments; and an empty list of body declarations.
+	 * an empty list of arguments; and does not declare an anonymous class.
 	 * <p>
 	 * N.B. This constructor is package-private; all subclasses must be 
 	 * declared in the same package; clients are unable to declare 
@@ -174,6 +193,14 @@ public class EnumConstantDeclaration extends BodyDeclaration {
 				return null;
 			}
 		}
+		if (property == ANONYMOUS_CLASS_DECLARATION_PROPERTY) {
+			if (get) {
+				return getAnonymousClassDeclaration();
+			} else {
+				setAnonymousClassDeclaration((AnonymousClassDeclaration) child);
+				return null;
+			}
+		}
 		// allow default implementation to flag the error
 		return super.internalGetSetChildProperty(property, get, child);
 	}
@@ -237,6 +264,8 @@ public class EnumConstantDeclaration extends BodyDeclaration {
 		result.arguments().addAll(ASTNode.copySubtrees(target, arguments()));
 		result.bodyDeclarations().addAll(
 			ASTNode.copySubtrees(target, bodyDeclarations()));
+		result.setAnonymousClassDeclaration(
+				(AnonymousClassDeclaration) ASTNode.copySubtree(target, getAnonymousClassDeclaration()));
 		return result;
 	}
 
@@ -260,6 +289,7 @@ public class EnumConstantDeclaration extends BodyDeclaration {
 			acceptChild(visitor, getName());
 			acceptChildren(visitor, this.arguments);
 			acceptChildren(visitor, this.bodyDeclarations);
+			acceptChild(visitor, getAnonymousClassDeclaration());
 		}
 		visitor.endVisit(this);
 	}
@@ -323,12 +353,49 @@ public class EnumConstantDeclaration extends BodyDeclaration {
 	 * 
 	 * @return the live list of body declarations
 	 *    (element type: <code>BodyDeclaration</code>)
-	 */ 
+	 * @deprecated Use get/setAnonymousClassDeclaration instead.
+	 */
+	// TODO (jeem) - remove this after 3.1 M4
 	public List bodyDeclarations() {
 		return this.bodyDeclarations;
 	}
+
+	/**
+	 * Internal method used to reduce deprecations warnings
+	 * for obsolete bodyDeclarations().
+	 */
+	// TODO (jeem) - remove this after 3.1 M4
+	List obsoleteBodyDeclarations() {
+		return this.bodyDeclarations;
+	}
+	
+	/**
+	 * Returns the anonymous class declaration introduced by this
+	 * enum constant declaration, if it has one.
+	 * 
+	 * @return the anonymous class declaration, or <code>null</code> if none
+	 * @since 3.1
+	 */ 
+	public AnonymousClassDeclaration getAnonymousClassDeclaration() {
+		return this.optionalAnonymousClassDeclaration;
+	}
 	
 	/**
+	 * Sets whether this enum constant declaration declares
+	 * an anonymous class (that is, has class body declarations).
+	 * 
+	 * @param decl the anonymous class declaration, or <code>null</code> 
+	 *    if none
+	 * @since 3.1
+	 */ 
+	public void setAnonymousClassDeclaration(AnonymousClassDeclaration decl) {
+		ASTNode oldChild = this.optionalAnonymousClassDeclaration;
+		preReplaceChild(oldChild, decl, ANONYMOUS_CLASS_DECLARATION_PROPERTY);
+		this.optionalAnonymousClassDeclaration = decl;
+		postReplaceChild(oldChild, decl, ANONYMOUS_CLASS_DECLARATION_PROPERTY);
+	}
+
+	/**
 	 * Resolves and returns the field binding for this enum constant.
 	 * <p>
 	 * Note that bindings are generally unavailable unless requested when the
@@ -360,9 +427,9 @@ public class EnumConstantDeclaration extends BodyDeclaration {
 			}
 			buffer.append(")");//$NON-NLS-1$
 		}
-		if (!bodyDeclarations().isEmpty()) {
+		if (getAnonymousClassDeclaration() != null) {
 			buffer.append(" {");//$NON-NLS-1$
-			for (Iterator it = bodyDeclarations().iterator(); it.hasNext(); ) {
+			for (Iterator it = getAnonymousClassDeclaration().bodyDeclarations().iterator(); it.hasNext(); ) {
 				BodyDeclaration d = (BodyDeclaration) it.next();
 				d.appendDebugString(buffer);
 				if (it.hasNext()) {
@@ -378,7 +445,7 @@ public class EnumConstantDeclaration extends BodyDeclaration {
 	 * Method declared on ASTNode.
 	 */
 	int memSize() {
-		return super.memSize() + 3 * 4;
+		return super.memSize() + 3 * 6;
 	}
 	
 	/* (omit javadoc for this method)
@@ -391,7 +458,8 @@ public class EnumConstantDeclaration extends BodyDeclaration {
 			+ this.modifiers.listSize()
 			+ (this.constantName == null ? 0 : getName().treeSize())
 			+ this.arguments.listSize()
-			+ this.bodyDeclarations.listSize();
+			+ this.bodyDeclarations.listSize()
+			+ (this.optionalAnonymousClassDeclaration == null ? 0 : getAnonymousClassDeclaration().treeSize());
 	}
 }
 
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java
index 072c943..f176c79 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java
@@ -531,13 +531,8 @@ class NaiveASTFlattener extends ASTVisitor {
 			}
 			this.buffer.append(")");//$NON-NLS-1$
 		}
-		if (!node.bodyDeclarations().isEmpty()) {
-			this.buffer.append("{");//$NON-NLS-1$
-			for (Iterator it = node.bodyDeclarations().iterator(); it.hasNext(); ) {
-				BodyDeclaration d = (BodyDeclaration) it.next();
-				d.accept(this);
-			}
-			this.buffer.append("}\n");//$NON-NLS-1$
+		if (node.getAnonymousClassDeclaration() != null) {
+			node.getAnonymousClassDeclaration().accept(this);
 		}
 		return false;
 	}

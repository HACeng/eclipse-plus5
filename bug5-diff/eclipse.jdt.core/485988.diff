commit aa5c12b7bf7e02b3ab88b9c6ddc921f061628e57
Author: Till Brychcy <register.eclipse@brychcy.de>
Date:   Fri Jan 8 17:52:53 2016 +0530

    Bug 485988 - [1.8][null] cannot override method with wildcard in return
    types
    
    Change-Id: Ib9a9415e3403f2ee442e052fd55b3c320b68fdf9
    Signed-off-by: Till Brychcy <register.eclipse@brychcy.de>
    Also-by: Stephan Herrmann <stephan.herrmann@berlin.de>

630	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
10	36	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java
5	12	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Wildcard.java
10	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java
124	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
index f196906..dc46e9d 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
@@ -11462,6 +11462,636 @@ public void testBug461268nnbd() {
 		""
 	);
 }
+public void testBug485988WildcardOverride() {
+	runConformTestWithLibs(
+		new String[] {
+			"test/Result.java",
+			"package test;\n" +
+			"\n" +
+			"public class Result<V> implements Comparable<Result<?>> {\n" +
+			"	public final int score;\n" +
+			"	public final V value;\n" +
+			"\n" +
+			"	protected Result(int score, V value) {\n" +
+			"		this.score = score;\n" +
+			"		this.value = value;\n" +
+			"	}\n" +
+			"	@Override\n" +
+			"	public int compareTo(Result<?> o) {\n" +
+			"		return score - o.score;\n" +
+			"	}\n" +
+			"}\n",
+			"test/Base.java",
+			"package test;\n" +
+			"\n" +
+			"import org.eclipse.jdt.annotation.NonNullByDefault;\n" +
+			"\n" +
+			"@NonNullByDefault\n" +
+			"public abstract class Base {\n" +
+			"	public abstract Result<?> matches();\n" +
+			"}\n",
+			"test/Derived.java",
+			"package test;\n" +
+			"\n" +
+			"import java.math.BigDecimal;\n" +
+			"\n" +
+			"import org.eclipse.jdt.annotation.NonNullByDefault;\n" +
+			"\n" +
+			"@NonNullByDefault\n" +
+			"public class Derived extends Base {\n" +
+			"	@Override\n" +
+			"	public Result<BigDecimal> matches() {\n" +
+			"		return new Result<BigDecimal>(0, new BigDecimal(\"1\"));\n" +
+			"	}\n" +
+			"}\n",
+		}, 
+		getCompilerOptions(),
+		""
+	);
+}
+public void testBug485988neutral() {
+	runConformTestWithLibs(
+		new String[] {
+			"neutral/WildcardTest.java",
+			"package neutral;\n" +
+			"\n" +
+			"import org.eclipse.jdt.annotation.NonNull;\n" +
+			"import org.eclipse.jdt.annotation.NonNullByDefault;\n" +
+			"import org.eclipse.jdt.annotation.Nullable;\n" +
+			"\n" +
+			"@NonNullByDefault\n" +
+			"class A<T> {\n" +
+			"}\n" +
+			"\n" +
+			"abstract class X {\n" +
+			"	abstract A<?> g1();\n" +
+			"\n" +
+			"	abstract A<?> g2();\n" +
+			"\n" +
+			"	abstract A<?> g2b();\n" +
+			"\n" +
+			"	abstract A<?> g3();\n" +
+			"\n" +
+			"	abstract A<?> h1();\n" +
+			"\n" +
+			"	abstract A<?> h2();\n" +
+			"\n" +
+			"	abstract A<?> h2b();\n" +
+			"\n" +
+			"	abstract A<?> h3();\n" +
+			"}\n" +
+			"\n" +
+			"class Y extends X {\n" +
+			"	@Override\n" +
+			"	A<?> g1() {\n" +
+			"		return new A<@NonNull String>();\n" +
+			"	}\n" +
+			"\n" +
+			"	@Override\n" +
+			"	A<@NonNull ?> g2() {\n" +
+			"		return new A<@NonNull String>();\n" +
+			"	}\n" +
+			"\n" +
+			"	@Override\n" +
+			"	A<? extends @NonNull Number> g2b() {\n" +
+			"		return new A<@NonNull Integer>();\n" +
+			"	}\n" +
+			"\n" +
+			"	@Override\n" +
+			"	A<@NonNull String> g3() {\n" +
+			"		return new A<@NonNull String>();\n" +
+			"	}\n" +
+			"\n" +
+			"	@Override\n" +
+			"	A<?> h1() {\n" +
+			"		return new A<@Nullable String>();\n" +
+			"	}\n" +
+			"\n" +
+			"	@Override\n" +
+			"	A<@Nullable ?> h2() {\n" +
+			"		return new A<@Nullable String>();\n" +
+			"	}\n" +
+			"\n" +
+			"	@Override\n" +
+			"	A<? super @Nullable Number> h2b() {\n" +
+			"		return new A<@Nullable Object>();\n" +
+			"	}\n" +
+			"\n" +
+			"	@Override\n" +
+			"	A<@Nullable String> h3() {\n" +
+			"		return new A<@Nullable String>();\n" +
+			"	}\n" +
+			"}\n" +
+			"\n" +
+			"@NonNullByDefault\n" +
+			"public class WildcardTest {\n" +
+			"	void f(A<?> a) {\n" +
+			"	}\n" +
+			"\n" +
+			"	<T1> void g(A<T1> a) {\n" +
+			"	}\n" +
+			"\n" +
+			"	<T2> void invoke(T2 t) {\n" +
+			"		f(new A<T2>());\n" +
+			"		g(new A<T2>());\n" +
+			"\n" +
+			"		f(new A<@NonNull T2>());\n" +
+			"		g(new A<@NonNull T2>());\n" +
+			"\n" +
+			"		f(new A<@Nullable T2>());\n" +
+			"		g(new A<@Nullable T2>());\n" +
+			"	}\n" +
+			"}\n" +
+			"",
+		}, 
+		getCompilerOptions(),
+		""
+	);
+}
+public void testBug485988nonnull() {
+	runNegativeTestWithLibs(
+		new String[] {
+			"nonnull/WildcardNonNullTest.java",
+			"package nonnull;\n" +
+			"\n" +
+			"import org.eclipse.jdt.annotation.NonNull;\n" +
+			"import org.eclipse.jdt.annotation.NonNullByDefault;\n" +
+			"import org.eclipse.jdt.annotation.Nullable;\n" +
+			"\n" +
+			"@NonNullByDefault\n" +
+			"class A<@NonNull T> {\n" +
+			"}\n" +
+			"\n" +
+			"abstract class X {\n" +
+			"	abstract A<@NonNull ?> g1();\n" +
+			"\n" +
+			"	abstract A<@NonNull ?> g2();\n" +
+			"\n" +
+			"	abstract A<@NonNull ?> g2b();\n" +
+			"\n" +
+			"	abstract A<@NonNull ?> g3();\n" +
+			"\n" +
+			"	abstract A<@NonNull ?> h1();\n" +
+			"\n" +
+			"	abstract A<@NonNull ?> h2();\n" +
+			"\n" +
+			"	abstract A<@NonNull ?> h2b();\n" +
+			"\n" +
+			"	abstract A<@NonNull ?> h3();\n" +
+			"}\n" +
+			"\n" +
+			"class Y extends X {\n" +
+			"	@Override\n" +
+			"	A<?> g1() {\n" +
+			"		return new A<@NonNull String>();\n" +
+			"	}\n" +
+			"\n" +
+			"	@Override\n" +
+			"	A<@NonNull ?> g2() {\n" +
+			"		return new A<@NonNull String>();\n" +
+			"	}\n" +
+			"\n" +
+			"	@Override\n" +
+			"	A<? extends @NonNull Number> g2b() {\n" +
+			"		return new A<@NonNull Integer>();\n" +
+			"	}\n" +
+			"\n" +
+			"	@Override\n" +
+			"	A<@NonNull String> g3() {\n" +
+			"		return new A<@NonNull String>();\n" +
+			"	}\n" +
+			"\n" +
+			"	@Override\n" +
+			"	A<?> h1() {\n" +
+			"		return new A<@Nullable String>();\n" +
+			"	}\n" +
+			"\n" +
+			"	@Override\n" +
+			"	A<@Nullable ?> h2() {\n" +
+			"		return new A<@Nullable String>();\n" +
+			"	}\n" +
+			"\n" +
+			"	@Override\n" +
+			"	A<? super @Nullable String> h2b() {\n" +
+			"		return new A<@Nullable String>();\n" +
+			"	}\n" +
+			"\n" +
+			"	@Override\n" +
+			"	A<@Nullable String> h3() {\n" +
+			"		return new A<@Nullable String>();\n" +
+			"	}\n" +
+			"}\n" +
+			"\n" +
+			"@NonNullByDefault\n" +
+			"public class WildcardNonNullTest {\n" +
+			"	void f(A<?> a) {\n" +
+			"	}\n" +
+			"\n" +
+			"	<@NonNull T1> void g(A<T1> a) {\n" +
+			"	}\n" +
+			"\n" +
+			"	<T2> void invoke(T2 t) {\n" +
+			"		f(new A<T2>());\n" +
+			"		g(new A<T2>());\n" +
+			"\n" +
+			"		f(new A<@NonNull T2>());\n" +
+			"		g(new A<@NonNull T2>());\n" +
+			"\n" +
+			"		f(new A<@Nullable T2>());\n" +
+			"		g(new A<@Nullable T2>());\n" +
+			"	}\n" +
+			"}\n" +
+			"",
+		}, 
+		getCompilerOptions(),
+		"----------\n" + 
+		"1. ERROR in nonnull\\WildcardNonNullTest.java (at line 52)\n" + 
+		"	return new A<@Nullable String>();\n" + 
+		"	             ^^^^^^^^^^^^^^^^\n" + 
+		"Null constraint mismatch: The type \'@Nullable String\' is not a valid substitute for the type parameter \'@NonNull T\'\n" + 
+		"----------\n" + 
+		"2. ERROR in nonnull\\WildcardNonNullTest.java (at line 56)\n" + 
+		"	A<@Nullable ?> h2() {\n" + 
+		"	^\n" + 
+		"The return type is incompatible with \'A<@NonNull ?>\' returned from X.h2() (mismatching null constraints)\n" + 
+		"----------\n" + 
+		"3. ERROR in nonnull\\WildcardNonNullTest.java (at line 56)\n" + 
+		"	A<@Nullable ?> h2() {\n" + 
+		"	  ^^^^^^^^^^^\n" + 
+		"Null constraint mismatch: The type \'@Nullable ?\' is not a valid substitute for the type parameter \'@NonNull T\'\n" + 
+		"----------\n" + 
+		"4. ERROR in nonnull\\WildcardNonNullTest.java (at line 57)\n" + 
+		"	return new A<@Nullable String>();\n" + 
+		"	             ^^^^^^^^^^^^^^^^\n" + 
+		"Null constraint mismatch: The type \'@Nullable String\' is not a valid substitute for the type parameter \'@NonNull T\'\n" + 
+		"----------\n" + 
+		"5. ERROR in nonnull\\WildcardNonNullTest.java (at line 61)\n" + 
+		"	A<? super @Nullable String> h2b() {\n" + 
+		"	^\n" + 
+		"The return type is incompatible with \'A<@NonNull ?>\' returned from X.h2b() (mismatching null constraints)\n" + 
+		"----------\n" + 
+		"6. ERROR in nonnull\\WildcardNonNullTest.java (at line 61)\n" + 
+		"	A<? super @Nullable String> h2b() {\n" + 
+		"	  ^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
+		"Null constraint mismatch: The type \'? super @Nullable String\' is not a valid substitute for the type parameter \'@NonNull T\'\n" + 
+		"----------\n" + 
+		"7. ERROR in nonnull\\WildcardNonNullTest.java (at line 62)\n" + 
+		"	return new A<@Nullable String>();\n" + 
+		"	             ^^^^^^^^^^^^^^^^\n" + 
+		"Null constraint mismatch: The type \'@Nullable String\' is not a valid substitute for the type parameter \'@NonNull T\'\n" + 
+		"----------\n" + 
+		"8. ERROR in nonnull\\WildcardNonNullTest.java (at line 66)\n" + 
+		"	A<@Nullable String> h3() {\n" + 
+		"	^\n" + 
+		"The return type is incompatible with \'A<@NonNull ?>\' returned from X.h3() (mismatching null constraints)\n" + 
+		"----------\n" + 
+		"9. ERROR in nonnull\\WildcardNonNullTest.java (at line 66)\n" + 
+		"	A<@Nullable String> h3() {\n" + 
+		"	  ^^^^^^^^^^^^^^^^\n" + 
+		"Null constraint mismatch: The type \'@Nullable String\' is not a valid substitute for the type parameter \'@NonNull T\'\n" + 
+		"----------\n" + 
+		"10. ERROR in nonnull\\WildcardNonNullTest.java (at line 67)\n" + 
+		"	return new A<@Nullable String>();\n" + 
+		"	             ^^^^^^^^^^^^^^^^\n" + 
+		"Null constraint mismatch: The type \'@Nullable String\' is not a valid substitute for the type parameter \'@NonNull T\'\n" + 
+		"----------\n" + 
+		"11. ERROR in nonnull\\WildcardNonNullTest.java (at line 80)\n" + 
+		"	f(new A<T2>());\n" + 
+		"	        ^^\n" + 
+		"Null constraint mismatch: The type \'T2\' is not a valid substitute for the type parameter \'@NonNull T\'\n" + 
+		"----------\n" + 
+		"12. WARNING in nonnull\\WildcardNonNullTest.java (at line 81)\n" + 
+		"	g(new A<T2>());\n" + 
+		"	  ^^^^^^^^^^^\n" + 
+		"Null type safety (type annotations): The expression of type \'A<T2>\' needs unchecked conversion to conform to \'@NonNull A<@NonNull T2>\'\n" + 
+		"----------\n" + 
+		"13. ERROR in nonnull\\WildcardNonNullTest.java (at line 81)\n" + 
+		"	g(new A<T2>());\n" + 
+		"	        ^^\n" + 
+		"Null constraint mismatch: The type \'T2\' is not a valid substitute for the type parameter \'@NonNull T\'\n" + 
+		"----------\n" + 
+		"14. ERROR in nonnull\\WildcardNonNullTest.java (at line 86)\n" + 
+		"	f(new A<@Nullable T2>());\n" + 
+		"	        ^^^^^^^^^^^^\n" + 
+		"Null constraint mismatch: The type \'@Nullable T2\' is not a valid substitute for the type parameter \'@NonNull T\'\n" + 
+		"----------\n" + 
+		"15. ERROR in nonnull\\WildcardNonNullTest.java (at line 87)\n" + 
+		"	g(new A<@Nullable T2>());\n" + 
+		"	  ^^^^^^^^^^^^^^^^^^^^^\n" + 
+		"Null type mismatch (type annotations): required \'@NonNull A<@NonNull T2>\' but this expression has type \'A<@Nullable T2>\'\n" + 
+		"----------\n" + 
+		"16. ERROR in nonnull\\WildcardNonNullTest.java (at line 87)\n" + 
+		"	g(new A<@Nullable T2>());\n" + 
+		"	        ^^^^^^^^^^^^\n" + 
+		"Null constraint mismatch: The type \'@Nullable T2\' is not a valid substitute for the type parameter \'@NonNull T\'\n" + 
+		"----------\n"	
+	);
+}
+public void testBug485988nullable() {
+	runNegativeTestWithLibs(
+		new String[] {
+			"nullable/WildcardNullableTest.java",
+			"package nullable;\n" +
+			"\n" +
+			"import org.eclipse.jdt.annotation.NonNull;\n" +
+			"import org.eclipse.jdt.annotation.NonNullByDefault;\n" +
+			"import org.eclipse.jdt.annotation.Nullable;\n" +
+			"\n" +
+			"@NonNullByDefault\n" +
+			"class A<@Nullable T> {\n" +
+			"}\n" +
+			"\n" +
+			"abstract class X {\n" +
+			"	abstract A<@Nullable ?> g1();\n" +
+			"\n" +
+			"	abstract A<@Nullable ?> g2();\n" +
+			"\n" +
+			"	abstract A<@Nullable ?> g2b();\n" +
+			"\n" +
+			"	abstract A<@Nullable ?> g3();\n" +
+			"\n" +
+			"	abstract A<@Nullable ?> h1();\n" +
+			"\n" +
+			"	abstract A<@Nullable ?> h2();\n" +
+			"\n" +
+			"	abstract A<@Nullable ?> h2b();\n" +
+			"\n" +
+			"	abstract A<@Nullable ?> h3();\n" +
+			"}\n" +
+			"\n" +
+			"class Y extends X {\n" +
+			"	@Override\n" +
+			"	A<?> g1() {\n" +
+			"		return new A<@NonNull String>();\n" +
+			"	}\n" +
+			"\n" +
+			"	@Override\n" +
+			"	A<@NonNull ?> g2() {\n" +
+			"		return new A<@NonNull String>();\n" +
+			"	}\n" +
+			"\n" +
+			"	@Override\n" +
+			"	A<? extends @NonNull Number> g2b() {\n" +
+			"		return new A<@NonNull Integer>();\n" +
+			"	}\n" +
+			"\n" +
+			"	@Override\n" +
+			"	A<@NonNull String> g3() {\n" +
+			"		return new A<@NonNull String>();\n" +
+			"	}\n" +
+			"\n" +
+			"	@Override\n" +
+			"	A<?> h1() {\n" +
+			"		return new A<@Nullable String>();\n" +
+			"	}\n" +
+			"\n" +
+			"	@Override\n" +
+			"	A<@Nullable ?> h2() {\n" +
+			"		return new A<@Nullable String>();\n" +
+			"	}\n" +
+			"\n" +
+			"	@Override\n" +
+			"	A<? super @Nullable String> h2b() {\n" +
+			"		return new A<@Nullable String>();\n" +
+			"	}\n" +
+			"\n" +
+			"	@Override\n" +
+			"	A<@Nullable String> h3() {\n" +
+			"		return new A<@Nullable String>();\n" +
+			"	}\n" +
+			"}\n" +
+			"\n" +
+			"@NonNullByDefault\n" +
+			"public class WildcardNullableTest {\n" +
+			"	void f(A<?> a) {\n" +
+			"	}\n" +
+			"\n" +
+			"	<@Nullable T1> void g(A<T1> a) {\n" +
+			"	}\n" +
+			"\n" +
+			"	<T2> void invoke(T2 t) {\n" +
+			"		f(new A<T2>());\n" +
+			"		g(new A<T2>());\n" +
+			"\n" +
+			"		f(new A<@NonNull T2>());\n" +
+			"		g(new A<@NonNull T2>());\n" +
+			"\n" +
+			"		f(new A<@Nullable T2>());\n" +
+			"		g(new A<@Nullable T2>());\n" +
+			"	}\n" +
+			"}\n" +
+			"",
+		}, 
+		getCompilerOptions(),
+		"----------\n" + 
+		"1. ERROR in nullable\\WildcardNullableTest.java (at line 32)\n" + 
+		"	return new A<@NonNull String>();\n" + 
+		"	             ^^^^^^^^^^^^^^^\n" + 
+		"Null constraint mismatch: The type \'@NonNull String\' is not a valid substitute for the type parameter \'@Nullable T\'\n" + 
+		"----------\n" + 
+		"2. ERROR in nullable\\WildcardNullableTest.java (at line 36)\n" + 
+		"	A<@NonNull ?> g2() {\n" + 
+		"	^\n" + 
+		"The return type is incompatible with \'A<@Nullable ?>\' returned from X.g2() (mismatching null constraints)\n" + 
+		"----------\n" + 
+		"3. ERROR in nullable\\WildcardNullableTest.java (at line 36)\n" + 
+		"	A<@NonNull ?> g2() {\n" + 
+		"	  ^^^^^^^^^^\n" + 
+		"Null constraint mismatch: The type \'@NonNull ?\' is not a valid substitute for the type parameter \'@Nullable T\'\n" + 
+		"----------\n" + 
+		"4. ERROR in nullable\\WildcardNullableTest.java (at line 37)\n" + 
+		"	return new A<@NonNull String>();\n" + 
+		"	             ^^^^^^^^^^^^^^^\n" + 
+		"Null constraint mismatch: The type \'@NonNull String\' is not a valid substitute for the type parameter \'@Nullable T\'\n" + 
+		"----------\n" + 
+		"5. ERROR in nullable\\WildcardNullableTest.java (at line 41)\n" + 
+		"	A<? extends @NonNull Number> g2b() {\n" + 
+		"	^\n" + 
+		"The return type is incompatible with \'A<@Nullable ?>\' returned from X.g2b() (mismatching null constraints)\n" + 
+		"----------\n" + 
+		"6. ERROR in nullable\\WildcardNullableTest.java (at line 41)\n" + 
+		"	A<? extends @NonNull Number> g2b() {\n" + 
+		"	  ^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
+		"Null constraint mismatch: The type \'? extends @NonNull Number\' is not a valid substitute for the type parameter \'@Nullable T\'\n" + 
+		"----------\n" + 
+		"7. ERROR in nullable\\WildcardNullableTest.java (at line 42)\n" + 
+		"	return new A<@NonNull Integer>();\n" + 
+		"	             ^^^^^^^^^^^^^^^^\n" + 
+		"Null constraint mismatch: The type \'@NonNull Integer\' is not a valid substitute for the type parameter \'@Nullable T\'\n" + 
+		"----------\n" + 
+		"8. ERROR in nullable\\WildcardNullableTest.java (at line 46)\n" + 
+		"	A<@NonNull String> g3() {\n" + 
+		"	^\n" + 
+		"The return type is incompatible with \'A<@Nullable ?>\' returned from X.g3() (mismatching null constraints)\n" + 
+		"----------\n" + 
+		"9. ERROR in nullable\\WildcardNullableTest.java (at line 46)\n" + 
+		"	A<@NonNull String> g3() {\n" + 
+		"	  ^^^^^^^^^^^^^^^\n" + 
+		"Null constraint mismatch: The type \'@NonNull String\' is not a valid substitute for the type parameter \'@Nullable T\'\n" + 
+		"----------\n" + 
+		"10. ERROR in nullable\\WildcardNullableTest.java (at line 47)\n" + 
+		"	return new A<@NonNull String>();\n" + 
+		"	             ^^^^^^^^^^^^^^^\n" + 
+		"Null constraint mismatch: The type \'@NonNull String\' is not a valid substitute for the type parameter \'@Nullable T\'\n" + 
+		"----------\n" + 
+		"11. ERROR in nullable\\WildcardNullableTest.java (at line 80)\n" + 
+		"	f(new A<T2>());\n" + 
+		"	        ^^\n" + 
+		"Null constraint mismatch: The type \'T2\' is not a valid substitute for the type parameter \'@Nullable T\'\n" + 
+		"----------\n" + 
+		"12. WARNING in nullable\\WildcardNullableTest.java (at line 81)\n" + 
+		"	g(new A<T2>());\n" + 
+		"	  ^^^^^^^^^^^\n" + 
+		"Null type safety (type annotations): The expression of type \'A<T2>\' needs unchecked conversion to conform to \'@NonNull A<@Nullable T2>\'\n" + 
+		"----------\n" + 
+		"13. ERROR in nullable\\WildcardNullableTest.java (at line 81)\n" + 
+		"	g(new A<T2>());\n" + 
+		"	        ^^\n" + 
+		"Null constraint mismatch: The type \'T2\' is not a valid substitute for the type parameter \'@Nullable T\'\n" + 
+		"----------\n" + 
+		"14. ERROR in nullable\\WildcardNullableTest.java (at line 83)\n" + 
+		"	f(new A<@NonNull T2>());\n" + 
+		"	        ^^^^^^^^^^^\n" + 
+		"Null constraint mismatch: The type \'@NonNull T2\' is not a valid substitute for the type parameter \'@Nullable T\'\n" + 
+		"----------\n" + 
+		"15. ERROR in nullable\\WildcardNullableTest.java (at line 84)\n" + 
+		"	g(new A<@NonNull T2>());\n" + 
+		"	  ^^^^^^^^^^^^^^^^^^^^\n" + 
+		"Null type mismatch (type annotations): required \'@NonNull A<@Nullable T2>\' but this expression has type \'A<@NonNull T2>\'\n" + 
+		"----------\n" + 
+		"16. ERROR in nullable\\WildcardNullableTest.java (at line 84)\n" + 
+		"	g(new A<@NonNull T2>());\n" + 
+		"	        ^^^^^^^^^^^\n" + 
+		"Null constraint mismatch: The type \'@NonNull T2\' is not a valid substitute for the type parameter \'@Nullable T\'\n" + 
+		"----------\n"
+	);
+}
+public void testBug485988WildCardForTVWithNonNullBound() {
+	runConformTestWithLibs(
+		new String[] {
+			"test/WildCard.java",
+			"package test;\n" +
+			"\n" +
+			"import java.io.Serializable;\n" +
+			"import java.util.ArrayList;\n" +
+			"\n" +
+			"import org.eclipse.jdt.annotation.NonNullByDefault;\n" +
+			"\n" +
+			"@NonNullByDefault\n" +
+			"class F<T extends Serializable> {\n" +
+			"}\n" +
+			"\n" +
+			"@NonNullByDefault\n" +
+			"public class WildCard {\n" +
+			"	void f(ArrayList<F<?>> list) {\n" +
+			"		for (F<? extends Serializable> f : list) {\n" +
+			"		}\n" +
+			"	}\n" +
+			"}\n" +
+			"",
+		}, 
+		getCompilerOptions(),
+		""
+	);
+}
+public void testBug485988WildcardWithGenericBound() {
+	runConformTestWithLibs(
+		new String[] {
+			"test/Test1.java",
+			"package test;\n" +
+			"import java.util.Collection;\n" +
+			"import java.util.Iterator;\n" +
+			"\n" +
+			"import org.eclipse.jdt.annotation.NonNull;\n" +
+			"interface LibA {\n" +
+			"	<T> Iterator<? extends T> constrainedWildcards(Collection<? extends T> in);\n" +
+			"}\n" +
+			"public class Test1 {\n" +
+			"	Iterator<? extends @NonNull String> test3(LibA lib, Collection<String> coll) {\n" +
+			"		return lib.constrainedWildcards(coll);\n" +
+			"	}\n" +
+			"}\n" +
+			"\n",
+		}, 
+		getCompilerOptions(),
+		"----------\n" + 
+		"1. WARNING in test\\Test1.java (at line 11)\n" + 
+		"	return lib.constrainedWildcards(coll);\n" + 
+		"	                                ^^^^\n" + 
+		"Null type safety (type annotations): The expression of type \'Collection<String>\' needs unchecked conversion to conform to \'Collection<? extends @NonNull String>\'\n" + 
+		"----------\n"
+	);
+}
+public void testBug485988Contradictory() {
+	runNegativeTestWithLibs(
+		new String[] {
+			"test/Test1.java",
+			"package test;\n" +
+			"\n" +
+			"import org.eclipse.jdt.annotation.*;\n" +
+			"interface A<T> {\n" +
+			"}\n" +
+			"public class Test1{\n" +
+			"	void f1(A<@Nullable @NonNull ?> a) {\n" +
+			"	}\n" +
+			"	void f2(A<@NonNull @Nullable ?> a) {\n" +
+			"	}\n" +
+			"	void f3(A<@Nullable ? extends @NonNull Object> a) {\n" +
+			"	}\n" +
+			"	void f4(A<@NonNull ? super @Nullable Integer> a) {\n" +
+			"	}\n" +
+			"	void f5(A<@Nullable ? super @Nullable Integer> a) {\n" + // OK
+			"	}\n" +
+			"	@NonNullByDefault void f6(A<@Nullable ? extends Integer> a) {\n" + // OK
+			"	}\n" +
+			"}\n" +
+			"\n",
+		}, 
+		getCompilerOptions(),
+		"----------\n" + 
+		"1. ERROR in test\\Test1.java (at line 7)\n" + 
+		"	void f1(A<@Nullable @NonNull ?> a) {\n" + 
+		"	                    ^^^^^^^^\n" + 
+		"Contradictory null specification; only one of @NonNull and @Nullable can be specified at any location\n" + 
+		"----------\n" + 
+		"2. ERROR in test\\Test1.java (at line 9)\n" + 
+		"	void f2(A<@NonNull @Nullable ?> a) {\n" + 
+		"	                   ^^^^^^^^^\n" + 
+		"Contradictory null specification; only one of @NonNull and @Nullable can be specified at any location\n" + 
+		"----------\n" +
+		"3. ERROR in test\\Test1.java (at line 11)\n" + 
+		"	void f3(A<@Nullable ? extends @NonNull Object> a) {\n" + 
+		"	                              ^^^^^^^^\n" + 
+		"This nullness annotation conflicts with a \'@Nullable\' annotation which is effective on the same type parameter \n" + 
+		"----------\n" + 
+		"4. ERROR in test\\Test1.java (at line 13)\n" + 
+		"	void f4(A<@NonNull ? super @Nullable Integer> a) {\n" + 
+		"	                           ^^^^^^^^^\n" + 
+		"This nullness annotation conflicts with a \'@NonNull\' annotation which is effective on the same type parameter \n" + 
+		"----------\n"
+	);
+}
+public void testBug485988bound() {
+	runConformTestWithLibs(
+		new String[] {
+			"C.java",
+			"import org.eclipse.jdt.annotation.NonNull;\n" + 
+			"\n" + 
+			"interface I<T> { }\n" + 
+			"\n" + 
+			"public class C {\n" + 
+			"	I<@NonNull ?> m1(I<? extends @NonNull C> i) {\n" + 
+			"		return i;\n" + 
+			"	}\n" + 
+			"	I<? extends @NonNull C> m2(I<@NonNull ? extends C> i) {\n" + 
+			"		return i;\n" + 
+			"	}\n" + 
+			"	\n" + 
+			"}\n"
+		},
+		getCompilerOptions(),
+		"");
+}
 public void testBug466585_comment_0() {
 	runConformTestWithLibs(
 		new String[] {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java
index bed1a19..ef63d2a 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2013, 2015 GK Software AG and others.
+ * Copyright (c) 2013, 2016 GK Software AG and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -304,6 +304,12 @@ public class NullAnnotationMatching {
 				} else {
 					long providedBits = providedNullTagBits(providedType);
 					Severity s = computeNullProblemSeverity(requiredBits, providedBits, nullStatus, mode, requiredType.isTypeVariable());
+					if (s.isAnyMismatch() && requiredType.isWildcard() && requiredBits != 0) {
+						if (((WildcardBinding) requiredType).determineNullBitsFromDeclaration(null, null) == 0) {
+							// wildcard has its nullBits from the type variable: avoid redundant warning.
+							s = Severity.OK;
+						}
+					}
 					severity = severity.max(s);
 					if (!severity.isAnyMismatch() && (providedBits & TagBits.AnnotationNonNull) != 0)
 						okStatus = okNonNullStatus(providedExpression);
@@ -311,7 +317,7 @@ public class NullAnnotationMatching {
 				if (severity != Severity.MISMATCH && nullStatus != FlowInfo.NULL) {  // null value has no details
 					TypeBinding providedSuper = providedType.findSuperTypeOriginatingFrom(requiredType);
 					TypeBinding providedSubstituteSuper = providedSubstitute != null ? providedSubstitute.findSuperTypeOriginatingFrom(requiredType) : null;
-					if(severity == Severity.UNCHECKED && requiredType.isTypeVariable() && providedType.isTypeVariable() && (providedSuper == requiredType || providedSubstituteSuper == requiredType)) { //$IDENTITY-COMPARISON$
+					if (severity == Severity.UNCHECKED && requiredType.isTypeVariable() && providedType.isTypeVariable() && (providedSuper == requiredType || providedSubstituteSuper == requiredType)) { //$IDENTITY-COMPARISON$
 						severity = Severity.OK;
 					}
 					if (providedSuper != providedType) //$IDENTITY-COMPARISON$
@@ -408,23 +414,7 @@ public class NullAnnotationMatching {
 			return validNullTagBits(tagBits);
 
 		if (type.isWildcard()) {
-			WildcardBinding wildcard = (WildcardBinding)type;
-			if (wildcard.boundKind == Wildcard.UNBOUND)
-				return 0;
-			tagBits = wildcard.bound.tagBits & TagBits.AnnotationNullMASK;
-			if (tagBits == 0)
-				return 0;
-			switch (wildcard.boundKind) {
-				case Wildcard.EXTENDS :
-					if (tagBits == TagBits.AnnotationNonNull)
-						return TagBits.AnnotationNonNull;
-					return TagBits.AnnotationNullMASK; // wildcard accepts @Nullable or better
-				case Wildcard.SUPER :
-					if (tagBits == TagBits.AnnotationNullable)
-						return TagBits.AnnotationNullable;
-					return TagBits.AnnotationNullMASK; // wildcard accepts @NonNull or worse
-			}
-			return 0;
+			return TagBits.AnnotationNullMASK;
 		} 
 		
 		if (type.isTypeVariable()) {
@@ -461,23 +451,7 @@ public class NullAnnotationMatching {
 			return validNullTagBits(tagBits);
 		
 		if (type.isWildcard()) { // wildcard can be 'provided' during inheritance checks
-			WildcardBinding wildcard = (WildcardBinding)type;
-			if (wildcard.boundKind == Wildcard.UNBOUND)
-				return 0;
-			tagBits = wildcard.bound.tagBits & TagBits.AnnotationNullMASK;
-			if (tagBits == 0)
-				return 0;
-			switch (wildcard.boundKind) {
-				case Wildcard.EXTENDS :
-					if (tagBits == TagBits.AnnotationNonNull)
-						return TagBits.AnnotationNonNull;
-					return TagBits.AnnotationNullMASK; // @Nullable or better
-				case Wildcard.SUPER :
-					if (tagBits == TagBits.AnnotationNullable)
-						return TagBits.AnnotationNullable;
-					return TagBits.AnnotationNullMASK; // @NonNull or worse
-			}
-			return 0;
+			return TagBits.AnnotationNullMASK;
 		}
 	
 		if (type.isTypeVariable()) { // incl. captures
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Wildcard.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Wildcard.java
index cc3b41b..c9235af 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Wildcard.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Wildcard.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2014 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -74,18 +74,11 @@ public class Wildcard extends SingleTypeReference {
 		}
 		this.resolvedType = scope.environment().createWildcard(genericType, rank, boundType, null /*no extra bound*/, this.kind);
 		resolveAnnotations(scope, 0); // no defaultNullness for wildcards
-		if (boundType != null && boundType.hasNullTypeAnnotations() && this.resolvedType.hasNullTypeAnnotations()) {
-			if (((boundType.tagBits | this.resolvedType.tagBits) & TagBits.AnnotationNullMASK) == TagBits.AnnotationNullMASK) { // are both set?
-				Annotation annotation = this.bound.findAnnotation(boundType.tagBits & TagBits.AnnotationNullMASK);
-				if (annotation == null) { // false alarm, implicit annotation is no conflict, but should be removed:
-					TypeBinding newBound = boundType.withoutToplevelNullAnnotation();
-					((WildcardBinding)this.resolvedType).bound = newBound;
-					this.bound.resolvedType = newBound;
-				} else {
-					scope.problemReporter().contradictoryNullAnnotationsOnBounds(annotation, this.resolvedType.tagBits);
-				}
-			}
+		
+		if(scope.environment().usesNullTypeAnnotations()) {
+			((WildcardBinding)this.resolvedType).evaluateNullAnnotations(scope, this);
 		}
+		
 		return this.resolvedType;
 	}
 
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java
index 30b9fa8..8a6293c 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java
@@ -1766,4 +1766,14 @@ public boolean containsNullTypeAnnotation(IBinaryAnnotation[] typeAnnotations) {
 	}
 	return false;
 }
+public boolean containsNullTypeAnnotation(AnnotationBinding[] typeAnnotations) {
+	if (typeAnnotations.length == 0)
+		return false;
+	for (int i = 0; i < typeAnnotations.length; i++) {
+		AnnotationBinding typeAnnotation = typeAnnotations[i];
+		if (typeAnnotation.type.hasNullBit(TypeIds.BitNonNullAnnotation|TypeIds.BitNullableAnnotation))
+			return true;
+	}
+	return false;	
+}
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java
index 5ba16ca..2b3e274 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java
@@ -217,7 +217,7 @@ public class TypeVariableBinding extends ReferenceBinding {
 						return nullBoundCheck(scope, argumentType, null, substitution, location, nullStatus);
 					} else {
 						TypeBinding bound = wildcard.bound;
-						if (checkNullAnnotations && wildcard.hasNullTypeAnnotations())
+						if (checkNullAnnotations && this.environment.containsNullTypeAnnotation(wildcard.typeAnnotations))
 							bound = this.environment.createAnnotatedType(bound.withoutToplevelNullAnnotation(), wildcard.getTypeAnnotations());
 						BoundCheckStatus status = boundCheck(substitution, bound, scope, null); // do not report null-errors against the tweaked bound ...
 						if (status == BoundCheckStatus.NULL_PROBLEM && location != null)
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java
index 5c2082f..5a852d8 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2005, 2015 IBM Corporation and others.
+ * Copyright (c) 2005, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -28,6 +28,7 @@ import java.util.List;
 import java.util.Set;
 
 import org.eclipse.jdt.core.compiler.CharOperation;
+import org.eclipse.jdt.internal.compiler.ast.Annotation;
 import org.eclipse.jdt.internal.compiler.ast.Wildcard;
 import org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants;
 import org.eclipse.jdt.internal.compiler.impl.CompilerOptions;
@@ -89,7 +90,125 @@ public class WildcardBinding extends ReferenceBinding {
 		}
 		return this.environment.createIntersectionType18(allBounds);
 	}
+	
+	
+	@Override
+	public void setTypeAnnotations(AnnotationBinding[] annotations, boolean evalNullAnnotations) {
+		this.tagBits |= TagBits.HasTypeAnnotations;
+		if (annotations != null && annotations.length != 0) {
+			this.typeAnnotations = annotations;
+		}
+		if (evalNullAnnotations) {
+			evaluateNullAnnotations(null, null);
+		}
+	}
+
+	/**
+	 * evaluate null type annotations and check / copy nullTagBits from bound and typevariable.
+	 * may be invoked repeatedly.
+	 * @param scope (may be null, if wildcard is null)
+	 * @param wildcard (may be null. if non-null, errors are reported and type annotations are dropped from this.bound in case of conflicts.)
+	 */
+	public void evaluateNullAnnotations(Scope scope, Wildcard wildcard) {
+		long nullTagBits = determineNullBitsFromDeclaration(scope, wildcard);
+		if (nullTagBits == 0L) {
+			TypeVariableBinding typeVariable2 = typeVariable();
+			if (typeVariable2 != null) {
+				long typeVariableNullTagBits = typeVariable2.tagBits & TagBits.AnnotationNullMASK;
+				if (typeVariableNullTagBits != 0L) {
+					nullTagBits = typeVariableNullTagBits;
+				}
+			}
+		}
+		if (nullTagBits != 0)
+			this.tagBits = (this.tagBits & ~TagBits.AnnotationNullMASK) | nullTagBits | TagBits.HasNullTypeAnnotation;
+	}
+
+	/**
+	 * compute the nullTagBits from type annotations and bound.
+	 * @param scope (may be null, if wildcard is null)
+	 * @param wildcard (may be null. if non-null, errors are reported and type annotations are dropped from this.bound in case of conflicts.)
+	 */
+	public long determineNullBitsFromDeclaration(Scope scope, Wildcard wildcard) {
+		long nullTagBits = 0L;
+		AnnotationBinding [] annotations = this.typeAnnotations;
+		if (annotations != null) {
+			for (int i = 0, length = annotations.length; i < length; i++) {
+				AnnotationBinding annotation = annotations[i];
+				if (annotation != null) {
+					if (annotation.type.hasNullBit(TypeIds.BitNullableAnnotation)) {
+						if ((nullTagBits & TagBits.AnnotationNonNull) == 0) {
+							nullTagBits |= TagBits.AnnotationNullable;
+						} else {
+							if (wildcard != null) {
+								Annotation annotation1 = wildcard.findAnnotation(TagBits.AnnotationNullable);
+								if (annotation1 != null)
+									scope.problemReporter().contradictoryNullAnnotations(annotation1);
+							}
+						}
+					} else if (annotation.type.hasNullBit(TypeIds.BitNonNullAnnotation)) {
+						if ((nullTagBits & TagBits.AnnotationNullable) == 0) {
+							nullTagBits |= TagBits.AnnotationNonNull;
+						} else {
+							if (wildcard != null) {
+								Annotation annotation1 = wildcard.findAnnotation(TagBits.AnnotationNonNull);
+								if (annotation1 != null)
+									scope.problemReporter().contradictoryNullAnnotations(annotation1);
+							}
+						}
+					}
+				}
+			}
+		}
+		if (this.bound != null && this.bound.isValidBinding()) {
+			long boundNullTagBits = this.bound.tagBits & TagBits.AnnotationNullMASK;
+			if (boundNullTagBits != 0L) {
+				if (this.boundKind == Wildcard.SUPER) {
+					if ((boundNullTagBits & TagBits.AnnotationNullable) != 0) {
+						if (nullTagBits == 0L) {
+							nullTagBits = TagBits.AnnotationNullable;
+						} else if (wildcard != null && (nullTagBits & TagBits.AnnotationNonNull) != 0) {
+							Annotation annotation = wildcard.bound.findAnnotation(boundNullTagBits);
+							if (annotation == null) { // false alarm, implicit annotation is no conflict, but should be removed:
+								// may not be reachable, how could we have an implicit @Nullable (not via @NonNullByDefault)?
+								TypeBinding newBound = this.bound.withoutToplevelNullAnnotation();
+								this.bound = newBound;
+								wildcard.bound.resolvedType = newBound;
+							} else {
+								scope.problemReporter().contradictoryNullAnnotationsOnBounds(annotation, nullTagBits);
+							}
+						}
+					}
+				} else {
+					if ((boundNullTagBits & TagBits.AnnotationNonNull) != 0) {
+						if (nullTagBits == 0L) {
+							nullTagBits = TagBits.AnnotationNonNull;
+						} else if (wildcard != null && (nullTagBits & TagBits.AnnotationNullable) != 0) {
+							Annotation annotation = wildcard.bound.findAnnotation(boundNullTagBits);
+							if (annotation == null) { // false alarm, implicit annotation is no conflict, but should be removed:
+								TypeBinding newBound = this.bound.withoutToplevelNullAnnotation();
+								this.bound = newBound;
+								wildcard.bound.resolvedType = newBound;
+							} else {
+								scope.problemReporter().contradictoryNullAnnotationsOnBounds(annotation, nullTagBits);
+							}
+						}
+					}
+					if (nullTagBits == 0L && this.otherBounds != null) {
+						for (int i = 0, length = this.otherBounds.length; i < length; i++) {
+							if ((this.otherBounds[i].tagBits & TagBits.AnnotationNonNull) != 0) { // can this happen?
+								nullTagBits = TagBits.AnnotationNonNull;
+								break;
+							}
+						}
+					}
+				}
+			}
+		}
+		return nullTagBits;
+	}
 
+	
 	public ReferenceBinding actualType() {
 		return this.genericType;
 	}
@@ -704,6 +823,7 @@ public class WildcardBinding extends ReferenceBinding {
 
 		this.tagBits &= ~TagBits.HasUnresolvedTypeVariables;
 		BinaryTypeBinding.resolveType(this.genericType, this.environment, false /* no raw conversion */);
+
 		switch(this.boundKind) {
 			case Wildcard.EXTENDS :
 				TypeBinding resolveType = BinaryTypeBinding.resolveType(this.bound, this.environment, true /* raw conversion */);
@@ -722,6 +842,9 @@ public class WildcardBinding extends ReferenceBinding {
 				break;
 			case Wildcard.UNBOUND :
 		}
+		if (this.environment.usesNullTypeAnnotations()) {
+			evaluateNullAnnotations(null, null);
+		}
 		return this;
 	}
 

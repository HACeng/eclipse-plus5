commit 9075dc15ba5b5b70200c2d9ee0faa5fffc4ee53d
Author: Jim Desrivieres <jdesrivieres>
Date:   Thu Apr 15 02:14:20 2004 +0000

    Allow client of ICompilationUnit.reconcile to specify AST level (bug 58582)

16	9	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest2.java
2	2	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/HierarchyOnWorkingCopiesTests.java
2	2	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaElementDeltaTests.java
1	1	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchMultipleProjectsTests.java
33	33	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java
2	2	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyNotificationTests.java
7	7	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyNotInClasspathTests.java
1	1	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyTests.java
3	0	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java
65	0	org.eclipse.jdt.core/model/org/eclipse/jdt/core/ICompilationUnit.java
1	1	org.eclipse.jdt.core/model/org/eclipse/jdt/core/IOpenable.java
1	0	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ASTHolderCUInfo.java
15	0	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFileWorkingCopy.java
38	6	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java
5	3	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ReconcileWorkingCopyOperation.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest2.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest2.java
index dc174e4..3484849 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest2.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterTest2.java
@@ -4201,8 +4201,10 @@ public class ASTConverterTest2 extends ConverterTestSetup {
 				"  int i;\n" +
 				"}"
 			);
-			CompilationUnit unit = sourceUnit.reconcile(true, false, null, null);
-			assertNotNull("No compilation unit", unit);
+			CompilationUnit unit = sourceUnit.reconcile(AST.LEVEL_2_0, false, null, null);
+			assertNotNull("No level 2 compilation unit", unit);
+			assertEquals("Compilation unit has wrong AST level (2)", AST.LEVEL_2_0, unit.getAST().apiLevel());
+			// TODO improve test for AST.LEVEL_3_0
 		} finally {
 			sourceUnit.discardWorkingCopy();
 		}
@@ -4220,7 +4222,7 @@ public class ASTConverterTest2 extends ConverterTestSetup {
 				"  int i;\n" +
 				"}"
 			);
-			CompilationUnit unit = sourceUnit.reconcile(false, false, null, null);
+			CompilationUnit unit = sourceUnit.reconcile(0, false, null, null);
 			assertNull("Unexpected compilation unit", unit);
 		} finally {
 			sourceUnit.discardWorkingCopy();
@@ -4233,8 +4235,9 @@ public class ASTConverterTest2 extends ConverterTestSetup {
 		ICompilationUnit sourceUnit = getCompilationUnit("Converter", "src", "test0538", "A.java"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
 		try {
 			sourceUnit.becomeWorkingCopy(null, null);
-			CompilationUnit unit = sourceUnit.reconcile(true, false, null, null);
+			CompilationUnit unit = sourceUnit.reconcile(AST.LEVEL_2_0, false, null, null);
 			assertNull("Unexpected compilation unit", unit);
+			// TODO improve test for AST.LEVEL_3_0
 		} finally {
 			sourceUnit.discardWorkingCopy();
 		}
@@ -4253,7 +4256,8 @@ public class ASTConverterTest2 extends ConverterTestSetup {
 				"  Object field;\n" +
 				"}"
 			);
-			CompilationUnit unit = sourceUnit.reconcile(true, false, null, null);
+			// TODO improve test for AST.LEVEL_3_0
+			CompilationUnit unit = sourceUnit.reconcile(AST.LEVEL_2_0, false, null, null);
 			ASTNode node = getASTNode(unit, 0, 0);
 			assertNotNull("No node", node);
 			assertTrue("not a field declaration", node.getNodeType() == ASTNode.FIELD_DECLARATION);
@@ -4274,7 +4278,8 @@ public class ASTConverterTest2 extends ConverterTestSetup {
 		try {
 			ReconcilerTests.ProblemRequestor pbRequestor = new ReconcilerTests.ProblemRequestor();
 			sourceUnit.becomeWorkingCopy(pbRequestor, null);
-			CompilationUnit unit = sourceUnit.reconcile(true, true/*force pb detection*/, null, null);
+			// TODO improve test for AST.LEVEL_3_0
+			CompilationUnit unit = sourceUnit.reconcile(AST.LEVEL_2_0, true/*force pb detection*/, null, null);
 			ASTNode node = getASTNode(unit, 0);
 			assertNotNull("No node", node);
 			assertTrue("not a type declaration", node.getNodeType() == ASTNode.TYPE_DECLARATION);
@@ -4307,7 +4312,8 @@ public class ASTConverterTest2 extends ConverterTestSetup {
 				"  }\n" +
 				"}"
 			);
-			CompilationUnit unit = sourceUnit.reconcile(true, true/*force pb detection*/, null, null);
+			// TODO improve test for AST.LEVEL_3_0
+			CompilationUnit unit = sourceUnit.reconcile(AST.LEVEL_2_0, true/*force pb detection*/, null, null);
 			ASTNode node = getASTNode(unit, 0);
 			assertNotNull("No node", node);
 		} finally {
@@ -4335,8 +4341,9 @@ public class ASTConverterTest2 extends ConverterTestSetup {
 				"  }\n" +
 				"}"
 			);
-			sourceUnit.reconcile(false/*don't create AST*/, false/* don't force pb detection*/, null, null);
-			CompilationUnit unit = sourceUnit.reconcile(true/*create AST*/, true/*force pb detection*/, null, null);
+			sourceUnit.reconcile(0/*don't create AST*/, false/* don't force pb detection*/, null, null);
+			// TODO improve test for AST.LEVEL_3_0
+			CompilationUnit unit = sourceUnit.reconcile(AST.LEVEL_2_0, true/*force pb detection*/, null, null);
 			ASTNode node = getASTNode(unit, 0);
 			assertNotNull("No node", node);
 		} finally {
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/HierarchyOnWorkingCopiesTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/HierarchyOnWorkingCopiesTests.java
index 4378e03..f44e5b0 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/HierarchyOnWorkingCopiesTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/HierarchyOnWorkingCopiesTests.java
@@ -41,7 +41,7 @@ public void testSimpleSubTypeHierarchy() throws CoreException {
 		"public class A extends B {\n" +
 		"}";
 	this.copy.getBuffer().setContents(newContents);
-	this.copy.reconcile(false, false, null, null);
+	this.copy.reconcile(0, false, null, null);
 	
 	IFile file = null;
 	try {
@@ -77,7 +77,7 @@ public void testSimpleSuperTypeHierarchy() throws CoreException {
 		"class B {\n" +
 		"}";
 	this.copy.getBuffer().setContents(newContents);
-	this.copy.reconcile(false, false, null, null);
+	this.copy.reconcile(0, false, null, null);
 	
 	IFile file = null;
 	try {
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaElementDeltaTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaElementDeltaTests.java
index b13114b..da08ce0 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaElementDeltaTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaElementDeltaTests.java
@@ -1064,7 +1064,7 @@ public void testListenerPostChange() throws CoreException {
 			"  public void foo() {\n" +
 			"  }\n" +
 			"}");
-		wc.reconcile(false, false, null, null);
+		wc.reconcile(0, false, null, null);
 		assertEquals(
 			"Unexpected delta after reconciling working copy",
 			"",
@@ -1164,7 +1164,7 @@ public void testListenerReconcile() throws CoreException {
 			"  public void foo() {\n" +
 			"  }\n" +
 			"}");
-		wc.reconcile(false, false, null, null);
+		wc.reconcile(0, false, null, null);
 		assertEquals(
 			"Unexpected delta after reconciling working copy",
 			"X[*]: {CHILDREN | FINE GRAINED}\n" +
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchMultipleProjectsTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchMultipleProjectsTests.java
index 0855867..d5177da 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchMultipleProjectsTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchMultipleProjectsTests.java
@@ -88,7 +88,7 @@ public void testFieldOccurencesInWorkingCopies() throws CoreException {
 			"    public static int BAR;\n" +
 			"}"
 		);
-		wc1.reconcile(false, false, null, null);
+		wc1.reconcile(0, false, null, null);
 		wc2 = getCompilationUnit("P2/p2/Y.java").getWorkingCopy(null);
 		wc2.getBuffer().setContents(
 			"package p2;\n" +
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java
index ebde812..f2a4d05 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java
@@ -135,7 +135,7 @@ public void testAddDuplicateMember() throws JavaModelException {
 		"  public void foo() {\n" +
 		"  }\n" +
 		"}");
-	this.workingCopy.reconcile(false, false, null, null);
+	this.workingCopy.reconcile(0, false, null, null);
 	assertDeltas(
 		"Unexpected delta", 
 		"X[*]: {CHILDREN | FINE GRAINED}\n" +
@@ -160,7 +160,7 @@ public void testAddFieldAndConstructor() throws JavaModelException {
 		"  public void foo() {\n" +
 		"  }\n" +
 		"}");
-	this.workingCopy.reconcile(false, false, null, null);
+	this.workingCopy.reconcile(0, false, null, null);
 	assertDeltas(
 		"Unexpected delta", 
 		"X[*]: {CHILDREN | FINE GRAINED}\n" + 
@@ -184,7 +184,7 @@ public void testAddImports() throws JavaModelException {
 		"  public void foo() {\n" +
 		"  }\n" +
 		"}");
-	this.workingCopy.reconcile(false, false, null, null);
+	this.workingCopy.reconcile(0, false, null, null);
 	assertDeltas(
 		"Unexpected delta", 
 		"<import container>[*]: {CHILDREN | FINE GRAINED}\n" +
@@ -208,7 +208,7 @@ public void testAddMethod1() throws JavaModelException {
 		"  public void bar() {\n" +
 		"  }\n" +
 		"}");
-	this.workingCopy.reconcile(false, false, null, null);
+	this.workingCopy.reconcile(0, false, null, null);
 	assertDeltas(
 		"Unexpected delta", 
 		"X[*]: {CHILDREN | FINE GRAINED}\n" +
@@ -230,7 +230,7 @@ public void testAddPartialMethod1() throws JavaModelException {
 		"  public void foo() {\n" +
 		"  }\n" +
 		"}");
-	this.workingCopy.reconcile(false, false, null, null);
+	this.workingCopy.reconcile(0, false, null, null);
 	assertDeltas(
 		"Unexpected delta", 
 		"X[*]: {CHILDREN | FINE GRAINED}\n" + 
@@ -254,7 +254,7 @@ public void testAddPartialMethod1and2() throws JavaModelException {
 		"  public void foo() {\n" +
 		"  }\n" +
 		"}");
-	this.workingCopy.reconcile(false, false, null, null);
+	this.workingCopy.reconcile(0, false, null, null);
 	
 	// Add { on partial method
 	this.clearDeltas();
@@ -266,7 +266,7 @@ public void testAddPartialMethod1and2() throws JavaModelException {
 		"  public void foo() {\n" +
 		"  }\n" +
 		"}");
-	this.workingCopy.reconcile(false, false, null, null);
+	this.workingCopy.reconcile(0, false, null, null);
 	assertDeltas(
 		"Unexpected delta", 
 		""
@@ -286,7 +286,7 @@ public void testChangeMethodVisibility() throws JavaModelException {
 		"  private void foo() {\n" +
 		"  }\n" +
 		"}");
-	this.workingCopy.reconcile(false, false, null, null);
+	this.workingCopy.reconcile(0, false, null, null);
 	assertDeltas(
 		"Unexpected delta", 
 		"X[*]: {CHILDREN | FINE GRAINED}\n" +
@@ -308,7 +308,7 @@ public void testCloseWorkingCopy() throws JavaModelException {
 		"  public void bar() {\n" +
 		"  }\n" +
 		"}");
-	this.workingCopy.reconcile(false, false, null, null);
+	this.workingCopy.reconcile(0, false, null, null);
 	assertDeltas(
 		"Unexpected delta", 
 		"X[*]: {CHILDREN | FINE GRAINED}\n" +
@@ -339,7 +339,7 @@ public void testConstantReference() throws CoreException {
 			"		}\n" +
 			"	}\n" +
 			"}");
-		this.workingCopy.reconcile(false, false, null, null);
+		this.workingCopy.reconcile(0, false, null, null);
 		assertProblems(
 			"Unexpected problems",
 			"----------\n" + 
@@ -361,7 +361,7 @@ public void testDeleteMethod1() throws JavaModelException {
 		"import p2.*;\n" +
 		"public class X {\n" +
 		"}");
-	this.workingCopy.reconcile(false, false, null, null);
+	this.workingCopy.reconcile(0, false, null, null);
 	assertDeltas(
 		"Unexpected delta", 
 		"X[*]: {CHILDREN | FINE GRAINED}\n" +
@@ -385,7 +385,7 @@ public void testDeleteTwoMethods() throws JavaModelException {
 		"  public void bar() {\n" +
 		"  }\n" +
 		"}");
-	this.workingCopy.reconcile(false, false, null, null);
+	this.workingCopy.reconcile(0, false, null, null);
 	
 	// delete the 2 methods
 	this.clearDeltas();
@@ -394,7 +394,7 @@ public void testDeleteTwoMethods() throws JavaModelException {
 		"import p2.*;\n" +
 		"public class X {\n" +
 		"}");
-	this.workingCopy.reconcile(false, false, null, null);
+	this.workingCopy.reconcile(0, false, null, null);
 	assertDeltas(
 		"Unexpected delta", 
 		"X[*]: {CHILDREN | FINE GRAINED}\n" +
@@ -411,7 +411,7 @@ public void testGrowImports() throws JavaModelException {
 		"package p1;\n" +
 		"public class X {\n" +
 		"}");
-	this.workingCopy.reconcile(false, false, null, null);
+	this.workingCopy.reconcile(0, false, null, null);
 	
 	// add an import
 	this.clearDeltas();
@@ -420,7 +420,7 @@ public void testGrowImports() throws JavaModelException {
 		"import p\n" +
 		"public class X {\n" +
 		"}");
-	this.workingCopy.reconcile(false, false, null, null);
+	this.workingCopy.reconcile(0, false, null, null);
 	assertDeltas(
 		"Unexpected delta", 
 		"<import container>[+]: {}"
@@ -433,7 +433,7 @@ public void testGrowImports() throws JavaModelException {
 		"import p2\n" +
 		"public class X {\n" +
 		"}");
-	this.workingCopy.reconcile(false, false, null, null);
+	this.workingCopy.reconcile(0, false, null, null);
 	assertDeltas(
 		"Unexpected delta", 
 		"<import container>[*]: {CHILDREN | FINE GRAINED}\n" +
@@ -453,7 +453,7 @@ public void testMethodWithError() throws JavaModelException, CoreException {
 		"  public.void foo() {\n" +
 		"  }\n" +
 		"}");
-	this.workingCopy.reconcile(false, false, null, null);
+	this.workingCopy.reconcile(0, false, null, null);
 	assertDeltas(
 		"Unexpected delta after syntax error", 
 		"X[*]: {CHILDREN | FINE GRAINED}\n" +
@@ -479,7 +479,7 @@ public void testMethodWithError() throws JavaModelException, CoreException {
 		"  }\n" +
 		"}";
 	setWorkingCopyContents(contents);
-	this.workingCopy.reconcile(false, false, null, null);
+	this.workingCopy.reconcile(0, false, null, null);
 	assertDeltas(
 		"Unexpected delta after fixing syntax error", 
 		"X[*]: {CHILDREN | FINE GRAINED}\n" +
@@ -507,11 +507,11 @@ public void testMethodWithError2() throws JavaModelException, CoreException {
 		"  }\n" +
 		"}";		
 	setWorkingCopyContents(contents);
-	this.workingCopy.reconcile(false, false, null, null);
+	this.workingCopy.reconcile(0, false, null, null);
 
 	// use force flag to refresh problems			
 	this.problemRequestor.initialize(contents.toCharArray());
-	this.workingCopy.reconcile(false, true, null, null);
+	this.workingCopy.reconcile(0, true, null, null);
 	assertProblems(
 		"Unexpected problems",
 		"----------\n" + 
@@ -535,11 +535,11 @@ public void testMethodWithError3() throws JavaModelException, CoreException {
 		"  }\n" +
 		"}";
 	setWorkingCopyContents(contents);
-	this.workingCopy.reconcile(false, false, null, null);
+	this.workingCopy.reconcile(0, false, null, null);
 
 	// reconcile with force flag turned off
 	this.problemRequestor.initialize(contents.toCharArray());
-	this.workingCopy.reconcile(false, false, null, null);
+	this.workingCopy.reconcile(0, false, null, null);
 	assertProblems(
 		"Unexpected problems",
 		""
@@ -589,12 +589,12 @@ public void testMethodWithError4() throws JavaModelException, CoreException {
 		"}	\n";
 	setWorkingCopyContents(contents);
 
-	this.workingCopy.reconcile(false, false, null, null);
+	this.workingCopy.reconcile(0, false, null, null);
 
 	// use force flag to refresh problems			
 	myPbRequestor.isCanceling = true;
 	myPbRequestor.initialize(contents.toCharArray());
-	this.workingCopy.reconcile(false, true, null, myMonitor);
+	this.workingCopy.reconcile(0, true, null, myMonitor);
 	assertProblems(
 		"Unexpected problems",
 		"----------\n" + 
@@ -662,7 +662,7 @@ public void testMethodWithError5() throws JavaModelException, CoreException {
 		ICompilationUnit wc = compilationUnit.getWorkingCopy(new WorkingCopyOwner() {}, pbReq, null);
 		pbReq.initialize(contents.toCharArray());
 		this.startDeltas();
-		wc.reconcile(false, true, null, null);
+		wc.reconcile(0, true, null, null);
 		String actual = pbReq.problems.toString();
 		String expected = 
 			"----------\n" + 
@@ -818,7 +818,7 @@ public void testMoveMember() throws JavaModelException {
 		"  public void bar() {\n" +
 		"  }\n" +
 		"}");
-	this.workingCopy.reconcile(false, false, null, null);
+	this.workingCopy.reconcile(0, false, null, null);
 	this.clearDeltas();
 	
 	setWorkingCopyContents(
@@ -830,7 +830,7 @@ public void testMoveMember() throws JavaModelException {
 		"  public void foo() {\n" +
 		"  }\n" +
 		"}");
-	this.workingCopy.reconcile(false, false, null, null);
+	this.workingCopy.reconcile(0, false, null, null);
 	assertDeltas(
 		"Unexpected delta", 
 		"X[*]: {CHILDREN | FINE GRAINED}\n" + 
@@ -844,7 +844,7 @@ public void testMoveMember() throws JavaModelException {
  */
 public void testNoChanges1() throws JavaModelException {
 	setWorkingCopyContents(this.workingCopy.getSource());
-	this.workingCopy.reconcile(false, false, null, null);
+	this.workingCopy.reconcile(0, false, null, null);
 	assertDeltas(
 		"Unexpected delta",
 		""
@@ -864,7 +864,7 @@ public void testNoChanges2() throws JavaModelException {
 		"  }\n" +
 		"}"
 	);
-	this.workingCopy.reconcile(false, false, null, null);
+	this.workingCopy.reconcile(0, false, null, null);
 	assertDeltas(
 		"Unexpected delta",
 		""
@@ -885,7 +885,7 @@ public void testRenameMethod1() throws JavaModelException {
 		"  }\n" +
 		"}"
 	);
-	this.workingCopy.reconcile(false, false, null, null);
+	this.workingCopy.reconcile(0, false, null, null);
 	assertDeltas(
 		"Unexpected delta",
 		"X[*]: {CHILDREN | FINE GRAINED}\n" + 
@@ -908,7 +908,7 @@ public void testRenameWithSyntaxError() throws JavaModelException {
 		"  }\n" +
 		"}"
 	);
-	this.workingCopy.reconcile(false, false, null, null);
+	this.workingCopy.reconcile(0, false, null, null);
 	assertDeltas(
 		"Unexpected delta",
 		"X[*]: {CHILDREN | FINE GRAINED}\n" + 
@@ -937,7 +937,7 @@ public void testUnhandledException() throws JavaModelException {
 		"  }\n" +
 		"}"
 	);
-	this.workingCopy.reconcile(false, false, null, null);
+	this.workingCopy.reconcile(0, false, null, null);
 	assertProblems(
 		"Unexpected problems",
 		"----------\n" + 
@@ -954,7 +954,7 @@ public void testUnhandledException() throws JavaModelException {
 public void testMakeConsistentFoolingReconciler() throws JavaModelException {
 	setWorkingCopyContents("");
 	this.workingCopy.makeConsistent(null);
-	this.workingCopy.reconcile(false, false, null, null);
+	this.workingCopy.reconcile(0, false, null, null);
 	assertDeltas(
 		"Should have got NO delta", 
 		""
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyNotificationTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyNotificationTests.java
index 029c5f4..b10fa4b 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyNotificationTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/TypeHierarchyNotificationTests.java
@@ -138,7 +138,7 @@ public void testAddAnonymousInRegion() throws CoreException {
 			"  B field = new B() {};\n" +
 			"}";
 		copy.getBuffer().setContents(newSource);
-		copy.reconcile(false, false, null, null);
+		copy.reconcile(0, false, null, null);
 		copy.commitWorkingCopy(true, null);
 
 		this.assertOneChange(h);
@@ -669,7 +669,7 @@ public void testAddExtendsSourceType2() throws CoreException {
 			newSuper +
 			source.substring(superIndex);
 		copy.getBuffer().setContents(newSource);
-		copy.reconcile(false, false, null, null);
+		copy.reconcile(0, false, null, null);
 		copy.commitWorkingCopy(true, null);
 
 		this.assertOneChange(h);
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyNotInClasspathTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyNotInClasspathTests.java
index 8100e1a..bc7f86c 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyNotInClasspathTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyNotInClasspathTests.java
@@ -152,7 +152,7 @@ public void testReconcileNonExistingProject() throws CoreException {
 		IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();
 		IFile file = root.getProject("NonExisting").getFile("A.java");
 		wc = JavaCore.createCompilationUnitFrom(file).getWorkingCopy(null);
-		wc.reconcile(false, false, null, null);
+		wc.reconcile(0, false, null, null);
 	} finally {
 		if (wc != null) {
 			wc.discardWorkingCopy();
@@ -172,7 +172,7 @@ public void testReconcileSimpleProject() throws CoreException {
 		ReconcilerTests.ProblemRequestor pbRequestor = new ReconcilerTests.ProblemRequestor();
 		wc.becomeWorkingCopy(pbRequestor, null);
 		wc.getBuffer().setContents("public class A {}");
-		wc.reconcile(false, true/*force problem detection*/, null, null);
+		wc.reconcile(0, true/*force problem detection*/, null, null);
 	} finally {
 		if (wc != null) {
 			wc.discardWorkingCopy();
@@ -278,7 +278,7 @@ public void testReconcileAndCommit1() throws CoreException {
 			"}";
 			
 		workingCopyBuffer.setContents(newContents);
-		copy.reconcile(false, true, null, null);
+		copy.reconcile(0, true, null, null);
 		copy.commitWorkingCopy(true, null);
 		
 		IFile originalFile = (IFile)cu.getResource();
@@ -316,7 +316,7 @@ public void testReconcileAndCommit2() throws CoreException {
 			"}";
 			
 		workingCopyBuffer.setContents(newContents);
-		copy.reconcile(false, true, null, null);
+		copy.reconcile(0, true, null, null);
 		copy.commitWorkingCopy(true, null);
 		IFile originalFile = (IFile)cu.getResource();
 		assertSourceEquals(
@@ -354,7 +354,7 @@ public void testReconcileAndCommit3() throws CoreException {
 			"}";
 			
 		workingCopyBuffer.setContents(newContents);
-		primary.reconcile(false, true, null, null);
+		primary.reconcile(0, true, null, null);
 		primary.commitWorkingCopy(true, null);
 		IFile originalFile = (IFile)primary.getResource();
 		assertSourceEquals(
@@ -392,7 +392,7 @@ public void testReconcileAndCommit4() throws CoreException {
 			"}";
 			
 		workingCopyBuffer.setContents(newContents);
-		primary.reconcile(false, true, null, null);
+		primary.reconcile(0, true, null, null);
 		primary.commitWorkingCopy(true, null);
 		IFile originalFile = (IFile)primary.getResource();
 		assertSourceEquals(
@@ -432,7 +432,7 @@ public void testReconcileAndCommit5() throws CoreException {
 			"}";
 			
 		workingCopyBuffer.setContents(newContents);
-		copy.reconcile(false, true, null, null);
+		copy.reconcile(0, true, null, null);
 		copy.commitWorkingCopy(true, null);
 		
 		IFile originalFile = (IFile)cu.getResource();
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyTests.java
index 2b389bd..0edc16f 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/WorkingCopyTests.java
@@ -90,7 +90,7 @@ public void testChangeContent() throws CoreException {
 		"  }\n" +
 		"}";
 	this.copy.getBuffer().setContents(newContents);
-	this.copy.reconcile(false, false, null, null);
+	this.copy.reconcile(0, false, null, null);
 	assertSourceEquals(
 		"Unexpected working copy contents",
 		newContents,
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java
index fd2f769..9275184 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java
@@ -214,6 +214,7 @@ public final class AST {
 	 * into a compilation unit. This method is not intended to be called by clients.
 	 * </p>
 	 * 
+ 	 * @param level the API level; one of the LEVEL constants
 	 * @param compilationUnitDeclaration an internal AST node for a compilation unit declaration
 	 * @param source the string of the Java compilation unit
 	 * @param options compiler options
@@ -222,11 +223,13 @@ public final class AST {
 	 * @return the compilation unit node
 	 */
 	public static CompilationUnit convertCompilationUnit(
+		int level,
 		org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration compilationUnitDeclaration,
 		char[] source,
 		Map options,
 		IProgressMonitor monitor) {
 		
+		// TODO (olivier) - honor <code>level</code> indicating AST api level
 		ASTConverter converter = new ASTConverter(options, true, monitor);
 		AST ast = new AST();
 		BindingResolver resolver = new DefaultBindingResolver(compilationUnitDeclaration.scope);
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/ICompilationUnit.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/ICompilationUnit.java
index 2bd8dd0..22a5f07 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/ICompilationUnit.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/ICompilationUnit.java
@@ -13,6 +13,8 @@ package org.eclipse.jdt.core;
 
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.jdt.core.dom.CompilationUnit;
+import org.eclipse.jdt.core.dom.AST;
+
 
 /**
  * Represents an entire Java compilation unit (<code>.java</code> source file).
@@ -513,9 +515,72 @@ boolean isWorkingCopy();
  * <ul>
  * <li> The original Java element does not exist (ELEMENT_DOES_NOT_EXIST)</li>
  * </ul>
+ * @deprecated Replaced by {@link #reconcile(int, boolean, WorkingCopyOwner, IProgressMonitor).
+ * TODO (jeem) this method to be deleted for April 20, 2004 I-build
  * @since 3.0
  */
 CompilationUnit reconcile(boolean createAST, boolean forceProblemDetection, WorkingCopyOwner owner, IProgressMonitor monitor) throws JavaModelException;
+
+/**
+ * Reconciles the contents of this working copy, sends out a Java delta
+ * notification indicating the nature of the change of the working copy since
+ * the last time it was either reconciled or made consistent 
+ * (see <code>IOpenable#makeConsistent()</code>), and returns a
+ * compilation unit AST if requested.
+ * <p>
+ * It performs the reconciliation by locally caching the contents of 
+ * the working copy, updating the contents, then creating a delta 
+ * over the cached contents and the new contents, and finally firing
+ * this delta.
+ * <p>
+ * The boolean argument allows to force problem detection even if the
+ * working copy is already consistent.
+ * </p>
+ * <p>
+ * This functionality allows to specify a working copy owner which is used
+ * during problem detection. All references contained in the working copy are
+ * resolved against other units; for which corresponding owned working copies
+ * are going to take precedence over their original compilation units. If
+ * <code>null</code> is passed in, then the primary working copy owner is used.
+ * </p>
+ * <p>
+ * Compilation problems found in the new contents are notified through the
+ * <code>IProblemRequestor</code> interface which was passed at
+ * creation, and no longer as transient markers.
+ * </p>
+ * <p>
+ * Note: Since 3.0, added/removed/changed inner types generate change deltas.
+ * </p>
+ * <p>
+ * If requested, a DOM AST representing the compilation unit is returned.
+ * Its bindings are computed only if the problem requestor is active, or if the
+ * problem detection is forced. This method returns <code>null</code> if the
+ * creation of the DOM AST was not requested, or if the requested level of AST
+ * API is not supported, or if the working copy was already consistent.
+ * </p>
+ *
+ * @param astLevel if positive, a compilation unit AST that should be created
+ * and returned, and the value specifies the
+ * {@linkplain AST#AST(int)
+ * AST API level} for that AST; if zero, no AST is wanted
+ * @param forceProblemDetection boolean indicating whether problem should be 
+ *   recomputed even if the source hasn't changed
+ * @param owner the owner of working copies that take precedence over the 
+ *   original compilation units, or <code>null</code> if the primary working
+ *   copy owner should be used
+ * @param monitor a progress monitor
+ * @return the compilation unit AST or <code>null</code> if not requested, 
+ *    or if the requested level of AST API is not supported,
+ *    or if the working copy was consistent
+ * @throws JavaModelException if the contents of the original element
+ *		cannot be accessed. Reasons include:
+ * <ul>
+ * <li> The original Java element does not exist (ELEMENT_DOES_NOT_EXIST)</li>
+ * </ul>
+ * @since 3.0
+ */
+CompilationUnit reconcile(int astLevel, boolean forceProblemDetection, WorkingCopyOwner owner, IProgressMonitor monitor) throws JavaModelException;
+
 /**
  * Restores the contents of this working copy to the current contents of
  * this working copy's original element. Has no effect if this element
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IOpenable.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IOpenable.java
index b77a6eb..930e063 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IOpenable.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IOpenable.java
@@ -121,7 +121,7 @@ boolean isOpen();
  *  <li>This Java element does not exist (ELEMENT_DOES_NOT_EXIST)</li>
  * </ul>
  * @see IOpenable#isConsistent()
- * @see ICompilationUnit#reconcile(boolean, boolean, WorkingCopyOwner, IProgressMonitor)
+ * @see ICompilationUnit#reconcile(int, boolean, WorkingCopyOwner, IProgressMonitor)
  */
 void makeConsistent(IProgressMonitor progress) throws JavaModelException;
 /**
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ASTHolderCUInfo.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ASTHolderCUInfo.java
index 819a6d1..685f560 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ASTHolderCUInfo.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ASTHolderCUInfo.java
@@ -13,5 +13,6 @@ package org.eclipse.jdt.internal.core;
 import org.eclipse.jdt.core.dom.CompilationUnit;
 
 public class ASTHolderCUInfo extends CompilationUnitElementInfo {
+	int astLevel;
 	CompilationUnit ast;
 }
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFileWorkingCopy.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFileWorkingCopy.java
index 752d46d..f798a60 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFileWorkingCopy.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFileWorkingCopy.java
@@ -519,6 +519,8 @@ public IType findPrimaryType() {
 
 	/**
 	 * @see ICompilationUnit#reconcile(boolean, boolean, WorkingCopyOwner, IProgressMonitor)
+	 * @since 3.0
+	 * @deprecated TODO (jeem) remove after the ICompilationUnit API method is removed
 	 */
 	public CompilationUnit reconcile(
 		boolean createAST,
@@ -530,6 +532,19 @@ public IType findPrimaryType() {
 	}
 	
 	/**
+	 * @see ICompilationUnit#reconcile(int, boolean, WorkingCopyOwner, IProgressMonitor)
+	 * @since 3.0
+	 */
+	public CompilationUnit reconcile(
+		int astLevel,
+		boolean forceProblemDetection,
+		WorkingCopyOwner owner,
+		IProgressMonitor monitor)
+		throws JavaModelException {
+		throw new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.ELEMENT_DOES_NOT_EXIST, this));
+	}
+	
+	/**
 	 * @see IWorkingCopy#reconcile(boolean, IProgressMonitor)
 	 */
 	public void reconcile(
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java
index 5e87345..9b5b473 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java
@@ -147,7 +147,8 @@ protected boolean buildStructure(OpenableElementInfo info, final IProgressMonito
 		}
 		
 		if (info instanceof ASTHolderCUInfo) {
-			org.eclipse.jdt.core.dom.CompilationUnit cu = AST.convertCompilationUnit(unit, contents, options, pm);
+			int astLevel = ((ASTHolderCUInfo) info).astLevel;
+			org.eclipse.jdt.core.dom.CompilationUnit cu = AST.convertCompilationUnit(astLevel, unit, contents, options, pm);
 			((ASTHolderCUInfo) info).ast = cu;
 		}
 	} finally {
@@ -952,9 +953,9 @@ public boolean isWorkingCopy() {
  * @see IOpenable#makeConsistent(IProgressMonitor)
  */
 public void makeConsistent(IProgressMonitor monitor) throws JavaModelException {
-	makeConsistent(false/*don't create AST*/, monitor);
+	makeConsistent(false/*don't create AST*/, 0, monitor);
 }
-public org.eclipse.jdt.core.dom.CompilationUnit makeConsistent(boolean createAST, IProgressMonitor monitor) throws JavaModelException {
+public org.eclipse.jdt.core.dom.CompilationUnit makeConsistent(boolean createAST, int astLevel, IProgressMonitor monitor) throws JavaModelException {
 	if (isConsistent()) return null;
 		
 	// close
@@ -965,6 +966,7 @@ public org.eclipse.jdt.core.dom.CompilationUnit makeConsistent(boolean createAST
 	// create a new info and make it the current info
 	if (createAST) {
 		ASTHolderCUInfo info = new ASTHolderCUInfo();
+		info.astLevel = astLevel;
 		openWhenClosed(info, monitor);
 		org.eclipse.jdt.core.dom.CompilationUnit result = info.ast;
 		info.ast = null;
@@ -1054,17 +1056,19 @@ protected void openParent(Object childInfo, HashMap newElements, IProgressMonito
  * @deprecated
  */
 public IMarker[] reconcile() throws JavaModelException {
-	reconcile(false/*don't create AST*/, false/*don't force problem detection*/, null/*use primary owner*/, null/*no progress monitor*/);
+	reconcile(0/*don't create AST*/, false/*don't force problem detection*/, null/*use primary owner*/, null/*no progress monitor*/);
 	return null;
 }
 /**
  * @see IWorkingCopy#reconcile(boolean, IProgressMonitor)
  */
 public void reconcile(boolean forceProblemDetection, IProgressMonitor monitor) throws JavaModelException {
-	reconcile(false/*don't create AST*/, forceProblemDetection, null/*use primary owner*/, monitor);
+	reconcile(0/*don't create AST*/, forceProblemDetection, null/*use primary owner*/, monitor);
 }
 /**
  * @see ICompilationUnit#reconcile(boolean, boolean, WorkingCopyOwner, IProgressMonitor)
+ * @since 3.0
+ * @deprecated TODO (jeem) remove after the ICompilationUnit API method is removed
  */
 public org.eclipse.jdt.core.dom.CompilationUnit reconcile(
 	boolean createAST,
@@ -1072,14 +1076,42 @@ public org.eclipse.jdt.core.dom.CompilationUnit reconcile(
 	WorkingCopyOwner workingCopyOwner,
 	IProgressMonitor monitor)
 	throws JavaModelException {
+
+	return reconcile(AST.LEVEL_2_0, forceProblemDetection, workingCopyOwner, monitor);
+}
+
+/**
+ * @see ICompilationUnit#reconcile(int, boolean, WorkingCopyOwner, IProgressMonitor)
+ * @since 3.0
+ */
+public org.eclipse.jdt.core.dom.CompilationUnit reconcile(
+	int astLevel,
+	boolean forceProblemDetection,
+	WorkingCopyOwner workingCopyOwner,
+	IProgressMonitor monitor)
+	throws JavaModelException {
 	
 	if (!isWorkingCopy()) return null; // Reconciling is not supported on non working copies
 	if (workingCopyOwner == null) workingCopyOwner = DefaultWorkingCopyOwner.PRIMARY;
 	
-	ReconcileWorkingCopyOperation op = new ReconcileWorkingCopyOperation(this, createAST, forceProblemDetection, workingCopyOwner);
+	boolean createAST = false;
+	if (astLevel == AST.LEVEL_2_0) {
+		// client asking for level 2 AST; these are supported
+		createAST = true;
+	} else if (astLevel == AST.LEVEL_3_0) {
+		// client asking for level 3 ASTs; these are not supported
+		// TODO (jerome) - these should also be supported in 1.5 stream
+		createAST = false;
+	} else {
+		// client asking for no AST (0) or unknown ast level
+		// either way, request denied
+		createAST = false;
+	}
+	ReconcileWorkingCopyOperation op = new ReconcileWorkingCopyOperation(this, createAST, astLevel, forceProblemDetection, workingCopyOwner);
 	op.runOperation(monitor);
 	return op.ast;
 }
+
 /**
  * @see ISourceManipulation#rename(String, boolean, IProgressMonitor)
  */
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ReconcileWorkingCopyOperation.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ReconcileWorkingCopyOperation.java
index 322cbc0..438ec44 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ReconcileWorkingCopyOperation.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ReconcileWorkingCopyOperation.java
@@ -25,13 +25,15 @@ import org.eclipse.jdt.internal.core.util.Util;
 public class ReconcileWorkingCopyOperation extends JavaModelOperation {
 		
 	boolean createAST;
+	int astLevel;
 	boolean forceProblemDetection;
 	WorkingCopyOwner workingCopyOwner;
 	org.eclipse.jdt.core.dom.CompilationUnit ast;
 	
-	public ReconcileWorkingCopyOperation(IJavaElement workingCopy, boolean creatAST, boolean forceProblemDetection, WorkingCopyOwner workingCopyOwner) {
+	public ReconcileWorkingCopyOperation(IJavaElement workingCopy, boolean creatAST, int astLevel, boolean forceProblemDetection, WorkingCopyOwner workingCopyOwner) {
 		super(new IJavaElement[] {workingCopy});
 		this.createAST = creatAST;
+		this.astLevel = astLevel;
 		this.forceProblemDetection = forceProblemDetection;
 		this.workingCopyOwner = workingCopyOwner;
 	}
@@ -53,7 +55,7 @@ public class ReconcileWorkingCopyOperation extends JavaModelOperation {
 				JavaElementDeltaBuilder deltaBuilder = new JavaElementDeltaBuilder(workingCopy);
 				
 				// update the element infos with the content of the working copy
-				this.ast = workingCopy.makeConsistent(this.createAST, this.progressMonitor);
+				this.ast = workingCopy.makeConsistent(this.createAST, this.astLevel, this.progressMonitor);
 				deltaBuilder.buildDeltas();
 
 				if (progressMonitor != null) progressMonitor.worked(2);
@@ -76,7 +78,7 @@ public class ReconcileWorkingCopyOperation extends JavaModelOperation {
 							if (progressMonitor != null) progressMonitor.worked(1);
 							if (this.createAST && unit != null) {
 								Map options = workingCopy.getJavaProject().getOptions(true);
-								this.ast = AST.convertCompilationUnit(unit, contents, options, this.progressMonitor);
+								this.ast = AST.convertCompilationUnit(this.astLevel, unit, contents, options, this.progressMonitor);
 								if (progressMonitor != null) progressMonitor.worked(1);
 							}
 					    } finally {

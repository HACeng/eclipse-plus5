commit 027433d18c80815de3076b7fd489422a48401f1a
Author: Sasikanth Bharadwaj <saammana@in.ibm.com>
Date:   Tue Oct 21 10:42:25 2014 +0530

    Fixed Bug 446317 - [1.8][compiler] java.lang.VerifyError: Bad type on
    operand stack with Lambdas and/or inner classes

155	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaRegressionTest.java
2	2	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
1	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TestAll.java
2	0	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/RunOnly335CompilerTests.java
2	0	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/RunOnlyJava8Tests.java
3	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
6	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleTypeReference.java
1	4	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java
5	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalTypeBinding.java
3	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
7	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java
2	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaRegressionTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaRegressionTest.java
new file mode 100644
index 0000000..b289c37
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaRegressionTest.java
@@ -0,0 +1,155 @@
+/*******************************************************************************
+ * Copyright (c) 2014 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.jdt.core.tests.compiler.regression;
+
+import junit.framework.Test;
+public class LambdaRegressionTest extends AbstractRegressionTest {
+
+static {
+//	TESTS_NAMES = new String[] { "test001"};
+//	TESTS_NUMBERS = new int[] { 50 };
+//	TESTS_RANGE = new int[] { 11, -1 };
+}
+public LambdaRegressionTest(String name) {
+	super(name);
+}
+public static Test suite() {
+	return buildMinimalComplianceTestSuite(testClass(), F_1_8);
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=446317, java.lang.VerifyError: Bad type on operand stack with Lambdas and/or inner classes 
+public void test001() {
+	this.runConformTest(
+			new String[] {
+				"X.java",
+				"import java.util.HashMap;\n" +
+				"import java.util.Map;\n" +
+				"import java.util.function.Function;\n" +
+				"public class X {\n" +
+				"  public static void main(String[] args) {\n" +
+				"    new X().run();\n" +
+				"  }\n" +
+				"  public void run() {\n" +
+				"    class Inner {\n" +
+				"      public Inner() {\n" +
+				"        System.out.println(\"miep\");\n" +
+				"      }\n" +
+				"    }\n" +
+				"    Map<String, Inner> map = new HashMap<>();\n" +
+				"    Function<String, Inner> function = (name) -> {\n" +
+				"      Inner i = map.get(name);\n" +
+				"      if (i == null) {\n" +
+				"        i = new Inner();\n" +
+				"        map.put(name, i);\n" +
+				"      }\n" +
+				"      return i;\n" +
+				"\n" +
+				"    };\n" +
+				"    function.apply(\"test\");\n" +
+				"  }\n" +
+				"}\n",
+			},
+			"miep"
+			);
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=446317, java.lang.VerifyError: Bad type on operand stack with Lambdas and/or inner classes 
+public void test002() {
+	this.runNegativeTest(
+			new String[] {
+				"X.java",
+				"import java.util.function.Consumer;\n" +
+				"@SuppressWarnings(\"all\")\n" +
+				"public class X {\n" +
+				"  private final String text = \"Bug?\";\n" +
+				"  public static void main(String[] args) {\n" +
+				"    new X().doIt();\n" +
+				"  }\n" +
+				"  private void doIt() {\n" +
+				"    new Sub();\n" +
+				"  }\n" +
+				"  private class Super<T> {\n" +
+				"    public Super(Consumer<T> consumer) {\n" +
+				"    }\n" +
+				"  }\n" +
+				"  private class Sub extends Super<String> {\n" +
+				"    public Sub() {\n" +
+				"      super(s -> System.out.println(text));\n" +
+				"      // super(s -> System.out.println(\"miep\"));\n" +
+				"    }\n" +
+				"  }\n" +
+				"}\n",
+			},
+			"----------\n" + 
+			"1. ERROR in X.java (at line 17)\n" + 
+			"	super(s -> System.out.println(text));\n" + 
+			"	      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
+			"Cannot refer to \'this\' nor \'super\' while explicitly invoking a constructor\n" + 
+			"----------\n"
+			);
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=446317, java.lang.VerifyError: Bad type on operand stack with Lambdas and/or inner classes 
+public void test003() {
+	this.runNegativeTest(
+			new String[] {
+				"X.java",
+				"import java.util.function.Consumer;\n" +
+				"@SuppressWarnings(\"all\")\n" +
+				"public class X {\n" +
+				"  private final String text = \"Bug?\";\n" +
+				"  public static void main(String[] args) {\n" +
+				"    new X().doIt();\n" +
+				"  }\n" +
+				"  private void doIt() {\n" +
+				"    new Sub();\n" +
+				"  }\n" +
+				"  private class Super<T> {\n" +
+				"    public Super(Consumer<T> consumer) {\n" +
+				"    }\n" +
+				"  }\n" +
+				"  private class Sub extends Super<String> {\n" +
+				"    public Sub() {\n" +
+				"       super(s -> System.out.println(\"miep\"));\n" +
+				"    }\n" +
+				"  }\n" +
+				"}\n",
+			},
+			""
+			);
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=446317, java.lang.VerifyError: Bad type on operand stack with Lambdas and/or inner classes
+public void test004() {
+	this.runConformTest(
+		new String[] {
+			"Y.java", 
+			"import java.util.function.Supplier;\n" + 
+			"class E {\n" + 
+			"	E(Supplier<Object> factory) { }\n" + 
+			"}\n" + 
+			"public class Y extends E {\n" + 
+			"	Y() {\n" + 
+			"		super( () -> {\n" + 
+			"			class Z extends E {\n" + 
+			"				Z() {\n" + 
+			"					super(() -> new Object());\n" + 
+			"				}\n" + 
+			"			}\n" + 
+			"			return null;\n" + 
+			"			});\n" + 
+			"	}\n" + 
+			"	public static void main(String[] args) {\n" + 
+			"		new Y();\n" + 
+			"	}\n" + 
+			"}"
+	});
+}
+public static Class testClass() {
+	return LambdaRegressionTest.class;
+}
+}
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
index c501109..ebd8049 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
@@ -9525,7 +9525,7 @@ public void test433735() {
 		"1. ERROR in X.java (at line 7)\n" + 
 		"	super( () -> {\n" + 
 		"	       ^^^^^\n" + 
-		"No enclosing instance of type X is available due to some intermediate constructor invocation\n" + 
+		"Cannot refer to \'this\' nor \'super\' while explicitly invoking a constructor\n" + 
 		"----------\n");
 }
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=432531 [1.8] VerifyError with anonymous subclass inside of lambda expression in the superclass constructor call
@@ -9557,7 +9557,7 @@ public void test432531a() {
 	"1. ERROR in Y.java (at line 7)\n" + 
 	"	super( () -> {\n" + 
 	"	       ^^^^^\n" + 
-	"No enclosing instance of type Y is available due to some intermediate constructor invocation\n" + 
+	"Cannot refer to \'this\' nor \'super\' while explicitly invoking a constructor\n" + 
 	"----------\n");
 }
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=432605, [1.8] Incorrect error "The type ArrayList<T> does not define add(ArrayList<T>, Object) that is applicable here"
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TestAll.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TestAll.java
index 67381fb..2c0ba06 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TestAll.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TestAll.java
@@ -131,6 +131,7 @@ public static Test suite() {
 	since_1_8.add(NullTypeAnnotationTest.class);
 	since_1_8.add(NegativeLambdaExpressionsTest.class);
 	since_1_8.add(LambdaExpressionsTest.class);
+	since_1_8.add(LambdaRegressionTest.class);
 	since_1_8.add(SerializableLambdaTest.class);
 	since_1_8.add(OverloadResolutionTest8.class);
 	since_1_8.add(JSR335ClassFileTest.class);
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/RunOnly335CompilerTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/RunOnly335CompilerTests.java
index d98fcce..3484594 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/RunOnly335CompilerTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/RunOnly335CompilerTests.java
@@ -22,6 +22,7 @@ import org.eclipse.jdt.core.tests.compiler.regression.GenericsRegressionTest;
 import org.eclipse.jdt.core.tests.compiler.regression.GenericsRegressionTest_1_7;
 import org.eclipse.jdt.core.tests.compiler.regression.GenericsRegressionTest_1_8;
 import org.eclipse.jdt.core.tests.compiler.regression.LambdaExpressionsTest;
+import org.eclipse.jdt.core.tests.compiler.regression.LambdaRegressionTest;
 import org.eclipse.jdt.core.tests.compiler.regression.NegativeLambdaExpressionsTest;
 import org.eclipse.jdt.core.tests.compiler.regression.NullTypeAnnotationTest;
 import org.eclipse.jdt.core.tests.compiler.regression.OverloadResolutionTest8;
@@ -37,6 +38,7 @@ public class RunOnly335CompilerTests extends TestCase {
 		return new Class[] {
 			GenericsRegressionTest_1_8.class,
 			LambdaExpressionsTest.class,
+			LambdaRegressionTest.class,
 			NegativeLambdaExpressionsTest.class,
 			OverloadResolutionTest8.class,
 			NullTypeAnnotationTest.class, // tests type inference
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/RunOnlyJava8Tests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/RunOnlyJava8Tests.java
index d4c5371..3288895 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/RunOnlyJava8Tests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/RunOnlyJava8Tests.java
@@ -40,6 +40,7 @@ import org.eclipse.jdt.core.tests.compiler.regression.InterfaceMethodsTest;
 import org.eclipse.jdt.core.tests.compiler.regression.JSR308SpecSnippetTests;
 import org.eclipse.jdt.core.tests.compiler.regression.JSR335ClassFileTest;
 import org.eclipse.jdt.core.tests.compiler.regression.LambdaExpressionsTest;
+import org.eclipse.jdt.core.tests.compiler.regression.LambdaRegressionTest;
 import org.eclipse.jdt.core.tests.compiler.regression.MethodParametersAttributeTest;
 import org.eclipse.jdt.core.tests.compiler.regression.NegativeLambdaExpressionsTest;
 import org.eclipse.jdt.core.tests.compiler.regression.NegativeTypeAnnotationTest;
@@ -76,6 +77,7 @@ public class RunOnlyJava8Tests extends TestCase {
 			LambdaExpressionSyntaxTest.class,
 			NegativeLambdaExpressionsTest.class,
 			LambdaExpressionsTest.class,
+			LambdaRegressionTest.class,
 			SerializableLambdaTest.class,
 			OverloadResolutionTest8.class,
 			JSR335ClassFileTest.class,
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
index 980e781..cc20877 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
@@ -432,6 +432,9 @@ public class LambdaExpression extends FunctionalExpression implements ReferenceC
 		if ((this.binding.tagBits & TagBits.HasMissingType) != 0) {
 			this.scope.problemReporter().missingTypeInLambda(this, this.binding);
 		}
+		if (this.shouldCaptureInstance && this.scope.isConstructorCall) {
+			this.scope.problemReporter().fieldsOrThisBeforeConstructorInvocation(this);
+		}
 		return this.resolvedType;
 	}
 
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleTypeReference.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleTypeReference.java
index 46dd285..88a9bba 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleTypeReference.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleTypeReference.java
@@ -55,6 +55,12 @@ public class SingleTypeReference extends TypeReference {
 			if (typeVariable.declaringElement instanceof SourceTypeBinding) {
 				scope.tagAsAccessingEnclosingInstanceStateOf((ReferenceBinding) typeVariable.declaringElement, true /* type variable access */);
 			}
+		} else if (this.resolvedType instanceof LocalTypeBinding) {
+			LocalTypeBinding localType = (LocalTypeBinding) this.resolvedType;
+			MethodScope methodScope = scope.methodScope();
+			if (methodScope != null && !methodScope.isStatic) {
+				methodScope.tagAsAccessingEnclosingInstanceStateOf(localType, false /* ! type variable access */);
+			}
 		}
 
 		if (scope.kind == Scope.CLASS_SCOPE && this.resolvedType.isValidBinding())
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java
index c04e9a8..d618563 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java
@@ -121,11 +121,8 @@ public final void addLocalType(TypeDeclaration localType) {
 	MethodScope methodScope = methodScope();
 	while (methodScope != null && methodScope.referenceContext instanceof LambdaExpression) {
 		LambdaExpression lambda = (LambdaExpression) methodScope.referenceContext;
-		if (!lambda.scope.isStatic) {
+		if (!lambda.scope.isStatic && !lambda.scope.isConstructorCall) {
 			lambda.shouldCaptureInstance = true;
-			if (lambda.scope.isConstructorCall) {
-				lambda.scope.problemReporter().noSuchEnclosingInstance(enclosingSourceType(), lambda, true);
-			}
 		}
 		methodScope = methodScope.enclosingMethodScope();
 	}
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalTypeBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalTypeBinding.java
index 90dea75..e7a42f0 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalTypeBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalTypeBinding.java
@@ -78,6 +78,11 @@ public void addInnerEmulationDependent(BlockScope dependentScope, boolean wasEnc
 	//  System.out.println("Adding dependency: "+ new String(scope.enclosingType().readableName()) + " --> " + new String(this.readableName()));
 }
 
+@Override
+public MethodBinding enclosingMethod() {
+	return this.enclosingMethod;
+}
+
 /*
  * Returns the anonymous original super type (in some error cases, superclass may get substituted with Object)
  */
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
index 6dfc0b4..f0c5681 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
@@ -5124,6 +5124,7 @@ public abstract class Scope {
 				methodScope = methodScope.enclosingMethodScope();
 			}
 		}
+		MethodBinding enclosingMethod = enclosingType != null ? enclosingType.enclosingMethod() : null;
 		while (methodScope != null) {
 			while (methodScope != null && methodScope.referenceContext instanceof LambdaExpression) {
 				LambdaExpression lambda = (LambdaExpression) methodScope.referenceContext;
@@ -5134,6 +5135,8 @@ public abstract class Scope {
 			if (methodScope != null) {
 				if (methodScope.referenceContext instanceof MethodDeclaration) {
 					MethodDeclaration methodDeclaration = (MethodDeclaration) methodScope.referenceContext;
+					if (methodDeclaration.binding == enclosingMethod)
+						break;
 					methodDeclaration.bits &= ~ASTNode.CanBeStatic;
 				}
 				ClassScope enclosingClassScope = methodScope.enclosingClassScope();
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java
index 4f7743c..be7515c 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java
@@ -254,6 +254,13 @@ public int depth() {
 	return 0;
 }
 
+/* Answer the receiver's enclosing method ... null if the receiver is not a local type.
+ */
+public MethodBinding enclosingMethod() {
+	return null;
+}
+
+
 /* Answer the receiver's enclosing type... null if the receiver is a top level type or is an array or a non reference type.
  */
 public ReferenceBinding enclosingType() {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
index dd677fe..b591b03 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
@@ -2202,13 +2202,13 @@ public void fieldHiding(FieldDeclaration fieldDecl, Binding hiddenVariable) {
 			nodeSourceEnd(hiddenField, fieldDecl));
 	}
 }
-public void fieldsOrThisBeforeConstructorInvocation(ThisReference reference) {
+public void fieldsOrThisBeforeConstructorInvocation(ASTNode reference) {
 	this.handle(
 		IProblem.ThisSuperDuringConstructorInvocation,
 		NoArgument,
 		NoArgument,
 		reference.sourceStart,
-		reference.sourceEnd);
+		reference instanceof LambdaExpression ? ((LambdaExpression) reference).diagnosticsSourceEnd() : reference.sourceEnd);
 }
 public void finallyMustCompleteNormally(Block finallyBlock) {
 	this.handle(

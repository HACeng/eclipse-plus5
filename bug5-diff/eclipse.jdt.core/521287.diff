commit 66baebaadc3d17ec79d4c24cd8b4c2c562627dd2
Author: Jay Arthanareeswaran <jarthana@in.ibm.com>
Date:   Wed Aug 23 14:13:31 2017 +0530

    Bug 521287: [9] Follow up bugs for code select
    
    Change-Id: I76258605068486a78bac47ecff6ff08953a393ef
    Signed-off-by: Jay Arthanareeswaran <jarthana@in.ibm.com>

87	0	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/Java9ElementTests.java
1	15	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
0	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/Java9ElementTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/Java9ElementTests.java
index 89d24ff..8f60254 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/Java9ElementTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/Java9ElementTests.java
@@ -963,6 +963,7 @@ public class Java9ElementTests extends AbstractJavaModelTests {
 			assertNull("inexistent module", notSuchModule);
 		} finally {
 			deleteProject("Test");
+			deleteProject("mod.zero");
 		}
 	}
 
@@ -974,4 +975,90 @@ public class Java9ElementTests extends AbstractJavaModelTests {
 		}
 		return current;
 	}
+	/*
+	 * Test finding module elements with similarly named types in the environment
+	 */
+	public void testBug521287a() throws CoreException, IOException {
+		try {
+			createJavaProject("mod.zero", new String[]{"src"}, null, "bin", JavaCore.VERSION_9);
+			createFolder("/mod.zero/src/test0");
+			createFile("/mod.zero/src/test0/ABCD.java",
+				"package test0;\n" +
+				"\n" +
+				"public class ABCD {}");
+			createFile("/mod.zero/src/module-info.java",
+				"module ABCD {\n" +
+				"	exports test0 to PQRS;\n" +
+				"}\n");
+
+			createJavaProject("Test", new String[]{"src"}, null, new String[] {"/mod.zero"}, "bin", JavaCore.VERSION_9);
+			createFolder("/Test/src/test1");
+			createFile("/Test/src/test1/Test.java",
+				"package test1;\n" +
+				"\n" +
+				"public class Test {}");
+			String content = "module PQRS {\n" +
+								"	exports test1;\n" +
+								"	requires ABCD;\n" +
+								"}\n";
+			createFile("/Test/src/module-info.java",
+				content);
+
+			ICompilationUnit unit = getCompilationUnit("/Test/src/module-info.java");
+			
+			int start = content.indexOf("ABCD");
+			IJavaElement[] elements = unit.codeSelect(start, 4);
+			assertEquals("Incorrect no of elements", 1, elements.length);
+			assertEquals("Incorrect element type", IJavaElement.JAVA_MODULE, elements[0].getElementType());
+			assertElementEquals("Incorrect Java element", 
+					"ABCD [in module-info.java [in <default> [in src [in mod.zero]]]]", elements[0]);
+	
+		} finally {
+			deleteProject("Test");
+			deleteProject("mod.zero");
+		}
+	}
+	/*
+	 * Test finding module elements with similarly named types in the environment
+	 */
+	public void testBug521287b() throws CoreException, IOException {
+		try {
+			createJavaProject("mod.zero", new String[]{"src"}, null, "bin", JavaCore.VERSION_9);
+			createFolder("/mod.zero/src/test0");
+			createFile("/mod.zero/src/test0/PQRS.java",
+							"package test0;\n" +
+							"\n" +
+							"public class PQRS {}");
+			String content = 	"module ABCD {\n" +
+								"	exports test0 to PQRS;\n" +
+								"}\n";
+			createFile("/mod.zero/src/module-info.java",
+				content);
+
+			createJavaProject("Test", new String[]{"src"}, null, new String[] {"/mod.zero"}, "bin", JavaCore.VERSION_9);
+			createFolder("/Test/src/test1");
+			createFile("/Test/src/test1/Test.java",
+				"package test1;\n" +
+				"\n" +
+				"public class Test {}");
+			createFile("/Test/src/module-info.java",
+							"module PQRS {\n" +
+							"	exports test1;\n" +
+							"	requires ABCD;\n" +
+							"}\n");
+
+			ICompilationUnit unit = getCompilationUnit("/mod.zero/src/module-info.java");
+			
+			int start = content.indexOf("PQRS");
+			IJavaElement[] elements = unit.codeSelect(start, 4);
+			assertEquals("Incorrect no of elements", 1, elements.length);
+			assertEquals("Incorrect element type", IJavaElement.JAVA_MODULE, elements[0].getElementType());
+			assertElementEquals("Incorrect Java element", 
+					"PQRS [in module-info.java [in <default> [in src [in Test]]]]", elements[0]);
+	
+		} finally {
+			deleteProject("Test");
+			deleteProject("mod.zero");
+		}
+	}
 }
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
index a26c02c..8271dbc 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
@@ -61,7 +61,6 @@ import org.eclipse.jdt.internal.compiler.ast.FieldDeclaration;
 import org.eclipse.jdt.internal.compiler.ast.ImportReference;
 import org.eclipse.jdt.internal.compiler.ast.MethodDeclaration;
 import org.eclipse.jdt.internal.compiler.ast.ModuleDeclaration;
-import org.eclipse.jdt.internal.compiler.ast.ModuleReference;
 import org.eclipse.jdt.internal.compiler.ast.PackageVisibilityStatement;
 import org.eclipse.jdt.internal.compiler.ast.TypeDeclaration;
 import org.eclipse.jdt.internal.compiler.ast.TypeParameter;
@@ -1111,20 +1110,6 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 					this.noProposal = false;
 					this.requestor.acceptPackage(CharOperation.concatWith(((SelectionOnPackageVisibilityReference) pv.pkgRef).tokens, '.'));
 				}
-				if (pv.targets == null || pv.targets.length == 0) continue;
-				for (ModuleReference ref : pv.targets) {
-					acceptModuleReference(ref, scope);
-				}
-			}
-		}
-	}
-	private void acceptModuleReference(ModuleReference ref, Scope scope) {
-		try {
-			ref.resolve(scope);
-		} catch (SelectionNodeFound e) {
-			if (e.binding != null) {
-				this.noProposal = false;
-				this.requestor.acceptModule(ref.moduleName, e.binding.computeUniqueKey(), ref.sourceStart, ref.sourceEnd);
 			}
 		}
 	}
@@ -1401,6 +1386,7 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 					moduleBinding.computeUniqueKey(),
 					this.actualSelectionStart,
 					this.actualSelectionEnd);
+			this.acceptedAnswer = true;
 		}
 	}
 	/*
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java
index f85fe09..1aed712 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java
@@ -178,7 +178,6 @@ protected void acceptBinaryMethod(
 public void acceptModule(char[] moduleName, char[] uniqueKey, int start, int end) {
 	IModuleDescription module = resolveModule(moduleName);
 	addElement(module);
-	// TODO: Implement use cases to construct modules from location/key
 }
 /**
  * Resolve the type.
commit c2474cc361d6bda77f55adff700fcfab8a6fd385
Author: Stephan Herrmann <stephan.herrmann@berlin.de>
Date:   Thu Aug 24 21:52:57 2017 +0200

    Bug 521287: [9] Follow up bugs for code select
    
    Change-Id: Id23ecf2d14c20e29013139bbc937e58962221b4a

1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java
12	4	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/PackageBinding.java
17	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SplitPackageBinding.java
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java
index 576851c..e755fc2 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java
@@ -1413,7 +1413,7 @@ public ReferenceBinding getCachedType(char[][] compoundName) {
 		return null;
 
 	for (int i = 1, packageLength = compoundName.length - 1; i < packageLength; i++)
-		if ((packageBinding = packageBinding.getPackage0(compoundName[i])) == null || packageBinding == TheNotFoundPackage)
+		if ((packageBinding = packageBinding.getPackage0Any(compoundName[i])) == null || packageBinding == TheNotFoundPackage)
 			return null;
 	return packageBinding.getType0(compoundName[compoundName.length - 1]);
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/PackageBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/PackageBinding.java
index afad980..c4c02ef 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/PackageBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/PackageBinding.java
@@ -146,17 +146,25 @@ PackageBinding getPackage(char[] name, ModuleBinding mod) {
 	addNotFoundPackage(name);
 	return null;
 }
-/* Answer the subpackage named name if it exists in the cache.
+/** Answer the subpackage named name if it exists in the cache.
 * Answer theNotFoundPackage if it could not be resolved the first time
 * it was looked up, otherwise answer null.
-*
+* <p>
+* NOTE: The returned package binding is guaranteed to be complete wrt. SplitPackageBinding,
+* or, if no complete binding is yet available, we shyly answer null.
+* </p><p>
 * NOTE: Senders must convert theNotFoundPackage into a real problem
-* package if its to returned.
+* package if its to returned.</p>
 */
-
 PackageBinding getPackage0(char[] name) {
 	return this.knownPackages.get(name);
 }
+/** Variant (see {@link #getPackage0(char[])}), that may even answer an incompletely
+ *  combined package (in the case of SplitPackageBinding).
+ */
+PackageBinding getPackage0Any(char[] name) {
+	return this.knownPackages.get(name);
+}
 /* Answer the type named name; ask the oracle for the type if its not in the cache.
 * Answer a NotVisible problem type if the type is not visible from the invocationPackage.
 * Answer null if it could not be resolved.
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SplitPackageBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SplitPackageBinding.java
index 672b638..eca945d 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SplitPackageBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SplitPackageBinding.java
@@ -142,6 +142,23 @@ public class SplitPackageBinding extends PackageBinding {
 	}
 
 	@Override
+	PackageBinding getPackage0Any(char[] name) {
+		PackageBinding knownPackage = super.getPackage0(name);
+		if (knownPackage != null)
+			return knownPackage;
+
+		PackageBinding candidate = null;
+		for (PackageBinding incarnation : this.incarnations) {
+			PackageBinding package0 = incarnation.getPackage0(name);
+			if (package0 == null)
+				continue;
+			candidate = combine(package0, candidate, this.enclosingModule);
+		}
+		// don't cache the result, maybe incomplete
+		return candidate;
+	}
+
+	@Override
 	protected PackageBinding findPackage(char[] name, ModuleBinding module) {
 		Set<PackageBinding> candidates = new HashSet<>();
 		for (ModuleBinding candidateModule : this.declaringModules) {

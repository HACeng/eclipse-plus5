commit ea2c66d41813ffe0a73e9227d41cf335eedf7fb6
Author: ssankaran <srikanth_sankaran@in.ibm.com>
Date:   Sun Apr 28 12:34:51 2013 +0530

    Fixed Bug 406392 - [1.8][compiler][codegen] Improve identification of
    lambdas that must capture enclosing instance

346	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Jsr335ClassFileTest.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java
9	3	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java
2	3	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedThisReference.java
2	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java
7	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleTypeReference.java
6	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SuperReference.java
12	4	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ThisReference.java
4	31	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java
5	13	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
9	5	org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetThisReference.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Jsr335ClassFileTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Jsr335ClassFileTest.java
index 3709dcb..98cfcde 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Jsr335ClassFileTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Jsr335ClassFileTest.java
@@ -2174,6 +2174,352 @@ public void test015() throws Exception {
 
 	verifyClassFile(expectedOutput, "X.class", ClassFileBytesDisassembler.SYSTEM);
 }
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=406392, [1.8][compiler][codegen] Improve identification of lambdas that must capture enclosing instance
+public void test016() throws Exception {
+	// This test proves that when a lambda body references a type variable of an enclosing method, it can still be emitted as a static method. 
+	this.runConformTest(
+		new String[] {
+				"X.java",
+				"interface I {\n" +
+				"	void doit();\n" +
+				"}\n" +
+				"public class X  {\n" +
+				"	<T> void foo() {\n" +
+				"		class Y {\n" +
+				"			T goo() {\n" +
+				"				((I) () -> {\n" +
+				"	    			T t = null;\n" +
+				"		    		System.out.println(\"Lambda\");\n" +
+				"				}).doit();\n" +
+				"				return null;\n" +
+				"			}\n" +
+				"		}\n" +
+				"		new Y().goo();\n" +
+				"	}\n" +
+				"	public static void main(String[] args) {\n" +
+				"		new X().<String>foo(); \n" +
+				"	}\n" +
+				"}\n",
+		},
+		"Lambda");
+
+	String expectedOutput =
+			"// Compiled from X.java (version 1.8 : 52.0, super bit)\n" + 
+			"class X$1Y {\n" + 
+			"  Constant pool:\n" + 
+			"    constant #1 class: #2 X$1Y\n" + 
+			"    constant #2 utf8: \"X$1Y\"\n" + 
+			"    constant #3 class: #4 java/lang/Object\n" + 
+			"    constant #4 utf8: \"java/lang/Object\"\n" + 
+			"    constant #5 utf8: \"this$0\"\n" + 
+			"    constant #6 utf8: \"LX;\"\n" + 
+			"    constant #7 utf8: \"<init>\"\n" + 
+			"    constant #8 utf8: \"(LX;)V\"\n" + 
+			"    constant #9 utf8: \"Code\"\n" + 
+			"    constant #10 field_ref: #1.#11 X$1Y.this$0 LX;\n" + 
+			"    constant #11 name_and_type: #5.#6 this$0 LX;\n" + 
+			"    constant #12 method_ref: #3.#13 java/lang/Object.<init> ()V\n" + 
+			"    constant #13 name_and_type: #7.#14 <init> ()V\n" + 
+			"    constant #14 utf8: \"()V\"\n" + 
+			"    constant #15 utf8: \"LineNumberTable\"\n" + 
+			"    constant #16 utf8: \"LocalVariableTable\"\n" + 
+			"    constant #17 utf8: \"this\"\n" + 
+			"    constant #18 utf8: \"LX$1Y;\"\n" + 
+			"    constant #19 utf8: \"goo\"\n" + 
+			"    constant #20 utf8: \"()Ljava/lang/Object;\"\n" + 
+			"    constant #21 utf8: \"Signature\"\n" + 
+			"    constant #22 utf8: \"()TT;\"\n" + 
+			"    constant #23 name_and_type: #24.#25 lambda$ ()LI;\n" + 
+			"    constant #24 utf8: \"lambda$\"\n" + 
+			"    constant #25 utf8: \"()LI;\"\n" + 
+			"    constant #26 invoke dynamic: #0 #23 lambda$ ()LI;\n" + 
+			"    constant #27 interface_method_ref: #28.#30 I.doit ()V\n" + 
+			"    constant #28 class: #29 I\n" + 
+			"    constant #29 utf8: \"I\"\n" + 
+			"    constant #30 name_and_type: #31.#14 doit ()V\n" + 
+			"    constant #31 utf8: \"doit\"\n" + 
+			"    constant #32 utf8: \"lambda$0\"\n" + 
+			"    constant #33 field_ref: #34.#36 java/lang/System.out Ljava/io/PrintStream;\n" + 
+			"    constant #34 class: #35 java/lang/System\n" + 
+			"    constant #35 utf8: \"java/lang/System\"\n" + 
+			"    constant #36 name_and_type: #37.#38 out Ljava/io/PrintStream;\n" + 
+			"    constant #37 utf8: \"out\"\n" + 
+			"    constant #38 utf8: \"Ljava/io/PrintStream;\"\n" + 
+			"    constant #39 string: #40 \"Lambda\"\n" + 
+			"    constant #40 utf8: \"Lambda\"\n" + 
+			"    constant #41 method_ref: #42.#44 java/io/PrintStream.println (Ljava/lang/String;)V\n" + 
+			"    constant #42 class: #43 java/io/PrintStream\n" + 
+			"    constant #43 utf8: \"java/io/PrintStream\"\n" + 
+			"    constant #44 name_and_type: #45.#46 println (Ljava/lang/String;)V\n" + 
+			"    constant #45 utf8: \"println\"\n" + 
+			"    constant #46 utf8: \"(Ljava/lang/String;)V\"\n" + 
+			"    constant #47 utf8: \"t\"\n" + 
+			"    constant #48 utf8: \"Ljava/lang/Object;\"\n" + 
+			"    constant #49 utf8: \"LocalVariableTypeTable\"\n" + 
+			"    constant #50 utf8: \"TT;\"\n" + 
+			"    constant #51 utf8: \"SourceFile\"\n" + 
+			"    constant #52 utf8: \"X.java\"\n" + 
+			"    constant #53 utf8: \"EnclosingMethod\"\n" + 
+			"    constant #54 class: #55 X\n" + 
+			"    constant #55 utf8: \"X\"\n" + 
+			"    constant #56 name_and_type: #57.#14 foo ()V\n" + 
+			"    constant #57 utf8: \"foo\"\n" + 
+			"    constant #58 method_ref: #59.#61 java/lang/invoke/LambdaMetafactory.metaFactory (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n" + 
+			"    constant #59 class: #60 java/lang/invoke/LambdaMetafactory\n" + 
+			"    constant #60 utf8: \"java/lang/invoke/LambdaMetafactory\"\n" + 
+			"    constant #61 name_and_type: #62.#63 metaFactory (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n" + 
+			"    constant #62 utf8: \"metaFactory\"\n" + 
+			"    constant #63 utf8: \"(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\"\n" + 
+			"    constant #64 method handle: invokestatic (6) #58 \n" + 
+			"    constant #65 utf8: \"BootstrapMethods\"\n" + 
+			"    constant #66 method handle: invokeinterface (9) #27 \n" + 
+			"    constant #67 method_ref: #1.#68 X$1Y.lambda$0 ()V\n" + 
+			"    constant #68 name_and_type: #32.#14 lambda$0 ()V\n" + 
+			"    constant #69 method handle: invokestatic (6) #67 \n" + 
+			"    constant #70 method type: #14 ()V\n" + 
+			"    constant #71 utf8: \"InnerClasses\"\n" + 
+			"    constant #72 utf8: \"Y\"\n" + 
+			"    constant #73 class: #74 java/lang/invoke/MethodHandles$Lookup\n" + 
+			"    constant #74 utf8: \"java/lang/invoke/MethodHandles$Lookup\"\n" + 
+			"    constant #75 class: #76 java/lang/invoke/MethodHandles\n" + 
+			"    constant #76 utf8: \"java/lang/invoke/MethodHandles\"\n" + 
+			"    constant #77 utf8: \"Lookup\"\n" + 
+			"  \n" + 
+			"  // Field descriptor #6 LX;\n" + 
+			"  final synthetic X this$0;\n" + 
+			"  \n" + 
+			"  // Method descriptor #8 (LX;)V\n" + 
+			"  // Stack: 2, Locals: 2\n" + 
+			"  X$1Y(X arg0);\n" + 
+			"     0  aload_0 [this]\n" + 
+			"     1  aload_1 [arg0]\n" + 
+			"     2  putfield X$1Y.this$0 : X [10]\n" + 
+			"     5  aload_0 [this]\n" + 
+			"     6  invokespecial java.lang.Object() [12]\n" + 
+			"     9  return\n" + 
+			"      Line numbers:\n" + 
+			"        [pc: 0, line: 6]\n" + 
+			"      Local variable table:\n" + 
+			"        [pc: 0, pc: 10] local: this index: 0 type: new X(){}\n" + 
+			"  \n" + 
+			"  // Method descriptor #20 ()Ljava/lang/Object;\n" + 
+			"  // Signature: ()TT;\n" + 
+			"  // Stack: 1, Locals: 1\n" + 
+			"  java.lang.Object goo();\n" + 
+			"     0  invokedynamic 0 lambda$() : I [26]\n" + 
+			"     5  invokeinterface I.doit() : void [27] [nargs: 1]\n" + 
+			"    10  aconst_null\n" + 
+			"    11  areturn\n" + 
+			"      Line numbers:\n" + 
+			"        [pc: 0, line: 8]\n" + 
+			"        [pc: 5, line: 11]\n" + 
+			"        [pc: 10, line: 12]\n" + 
+			"      Local variable table:\n" + 
+			"        [pc: 0, pc: 12] local: this index: 0 type: new X(){}\n" + 
+			"  \n" + 
+			"  // Method descriptor #14 ()V\n" + 
+			"  // Stack: 2, Locals: 1\n" + 
+			"  private static synthetic void lambda$0();\n" + 
+			"     0  aconst_null\n" + 
+			"     1  astore_0 [t]\n" + 
+			"     2  getstatic java.lang.System.out : java.io.PrintStream [33]\n" + 
+			"     5  ldc <String \"Lambda\"> [39]\n" + 
+			"     7  invokevirtual java.io.PrintStream.println(java.lang.String) : void [41]\n" + 
+			"    10  return\n" + 
+			"      Line numbers:\n" + 
+			"        [pc: 0, line: 9]\n" + 
+			"        [pc: 2, line: 10]\n" + 
+			"        [pc: 10, line: 11]\n" + 
+			"      Local variable table:\n" + 
+			"        [pc: 2, pc: 10] local: t index: 0 type: java.lang.Object\n" + 
+			"      Local variable type table:\n" + 
+			"        [pc: 2, pc: 10] local: t index: 0 type: T\n" + 
+			"\n" + 
+			"  Inner classes:\n" + 
+			"    [inner class info: #1 X$1Y, outer class info: #0\n" + 
+			"     inner name: #72 Y, accessflags: 0 default],\n" + 
+			"    [inner class info: #73 java/lang/invoke/MethodHandles$Lookup, outer class info: #75 java/lang/invoke/MethodHandles\n" + 
+			"     inner name: #77 Lookup, accessflags: 25 public static final]\n" + 
+			"  Enclosing Method: #54  #56 X.foo()V\n" + 
+			"Bootstrap methods:\n" + 
+			"  0 : # 64 arguments: {#66,#69,#70}\n" + 
+			"}";
+
+	verifyClassFile(expectedOutput, "X$1Y.class", ClassFileBytesDisassembler.SYSTEM);
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=406392, [1.8][compiler][codegen] Improve identification of lambdas that must capture enclosing instance
+public void test017() throws Exception {
+	// This test proves that when a lambda body references a type variable of an enclosing class, it can still be emitted as a static method. 
+	this.runConformTest(
+		new String[] {
+				"X.java",
+				"interface I {\n" +
+				"	void doit();\n" +
+				"}\n" +
+				"public class X<T>  {\n" +
+				"	void foo() {\n" +
+				"		class Y {\n" +
+				"			T goo() {\n" +
+				"				((I) () -> {\n" +
+				"				T t = null;\n" +
+				"				System.out.println(\"Lambda\");     \n" +
+				"				}).doit();\n" +
+				"				return null;\n" +
+				"			}\n" +
+				"		}\n" +
+				"		new Y().goo();\n" +
+				"	}\n" +
+				"	public static void main(String[] args) {\n" +
+				"		new X().<String>foo(); \n" +
+				"	}\n" +
+				"}\n",
+		},
+		"Lambda");
+
+	String expectedOutput =
+			"// Compiled from X.java (version 1.8 : 52.0, super bit)\n" + 
+			"class X$1Y {\n" + 
+			"  Constant pool:\n" + 
+			"    constant #1 class: #2 X$1Y\n" + 
+			"    constant #2 utf8: \"X$1Y\"\n" + 
+			"    constant #3 class: #4 java/lang/Object\n" + 
+			"    constant #4 utf8: \"java/lang/Object\"\n" + 
+			"    constant #5 utf8: \"this$0\"\n" + 
+			"    constant #6 utf8: \"LX;\"\n" + 
+			"    constant #7 utf8: \"<init>\"\n" + 
+			"    constant #8 utf8: \"(LX;)V\"\n" + 
+			"    constant #9 utf8: \"Code\"\n" + 
+			"    constant #10 field_ref: #1.#11 X$1Y.this$0 LX;\n" + 
+			"    constant #11 name_and_type: #5.#6 this$0 LX;\n" + 
+			"    constant #12 method_ref: #3.#13 java/lang/Object.<init> ()V\n" + 
+			"    constant #13 name_and_type: #7.#14 <init> ()V\n" + 
+			"    constant #14 utf8: \"()V\"\n" + 
+			"    constant #15 utf8: \"LineNumberTable\"\n" + 
+			"    constant #16 utf8: \"LocalVariableTable\"\n" + 
+			"    constant #17 utf8: \"this\"\n" + 
+			"    constant #18 utf8: \"LX$1Y;\"\n" + 
+			"    constant #19 utf8: \"goo\"\n" + 
+			"    constant #20 utf8: \"()Ljava/lang/Object;\"\n" + 
+			"    constant #21 utf8: \"Signature\"\n" + 
+			"    constant #22 utf8: \"()TT;\"\n" + 
+			"    constant #23 name_and_type: #24.#25 lambda$ ()LI;\n" + 
+			"    constant #24 utf8: \"lambda$\"\n" + 
+			"    constant #25 utf8: \"()LI;\"\n" + 
+			"    constant #26 invoke dynamic: #0 #23 lambda$ ()LI;\n" + 
+			"    constant #27 interface_method_ref: #28.#30 I.doit ()V\n" + 
+			"    constant #28 class: #29 I\n" + 
+			"    constant #29 utf8: \"I\"\n" + 
+			"    constant #30 name_and_type: #31.#14 doit ()V\n" + 
+			"    constant #31 utf8: \"doit\"\n" + 
+			"    constant #32 utf8: \"lambda$0\"\n" + 
+			"    constant #33 field_ref: #34.#36 java/lang/System.out Ljava/io/PrintStream;\n" + 
+			"    constant #34 class: #35 java/lang/System\n" + 
+			"    constant #35 utf8: \"java/lang/System\"\n" + 
+			"    constant #36 name_and_type: #37.#38 out Ljava/io/PrintStream;\n" + 
+			"    constant #37 utf8: \"out\"\n" + 
+			"    constant #38 utf8: \"Ljava/io/PrintStream;\"\n" + 
+			"    constant #39 string: #40 \"Lambda\"\n" + 
+			"    constant #40 utf8: \"Lambda\"\n" + 
+			"    constant #41 method_ref: #42.#44 java/io/PrintStream.println (Ljava/lang/String;)V\n" + 
+			"    constant #42 class: #43 java/io/PrintStream\n" + 
+			"    constant #43 utf8: \"java/io/PrintStream\"\n" + 
+			"    constant #44 name_and_type: #45.#46 println (Ljava/lang/String;)V\n" + 
+			"    constant #45 utf8: \"println\"\n" + 
+			"    constant #46 utf8: \"(Ljava/lang/String;)V\"\n" + 
+			"    constant #47 utf8: \"t\"\n" + 
+			"    constant #48 utf8: \"Ljava/lang/Object;\"\n" + 
+			"    constant #49 utf8: \"LocalVariableTypeTable\"\n" + 
+			"    constant #50 utf8: \"TT;\"\n" + 
+			"    constant #51 utf8: \"SourceFile\"\n" + 
+			"    constant #52 utf8: \"X.java\"\n" + 
+			"    constant #53 utf8: \"EnclosingMethod\"\n" + 
+			"    constant #54 class: #55 X\n" + 
+			"    constant #55 utf8: \"X\"\n" + 
+			"    constant #56 name_and_type: #57.#14 foo ()V\n" + 
+			"    constant #57 utf8: \"foo\"\n" + 
+			"    constant #58 method_ref: #59.#61 java/lang/invoke/LambdaMetafactory.metaFactory (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n" + 
+			"    constant #59 class: #60 java/lang/invoke/LambdaMetafactory\n" + 
+			"    constant #60 utf8: \"java/lang/invoke/LambdaMetafactory\"\n" + 
+			"    constant #61 name_and_type: #62.#63 metaFactory (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\n" + 
+			"    constant #62 utf8: \"metaFactory\"\n" + 
+			"    constant #63 utf8: \"(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;\"\n" + 
+			"    constant #64 method handle: invokestatic (6) #58 \n" + 
+			"    constant #65 utf8: \"BootstrapMethods\"\n" + 
+			"    constant #66 method handle: invokeinterface (9) #27 \n" + 
+			"    constant #67 method_ref: #1.#68 X$1Y.lambda$0 ()V\n" + 
+			"    constant #68 name_and_type: #32.#14 lambda$0 ()V\n" + 
+			"    constant #69 method handle: invokestatic (6) #67 \n" + 
+			"    constant #70 method type: #14 ()V\n" + 
+			"    constant #71 utf8: \"InnerClasses\"\n" + 
+			"    constant #72 utf8: \"Y\"\n" + 
+			"    constant #73 class: #74 java/lang/invoke/MethodHandles$Lookup\n" + 
+			"    constant #74 utf8: \"java/lang/invoke/MethodHandles$Lookup\"\n" + 
+			"    constant #75 class: #76 java/lang/invoke/MethodHandles\n" + 
+			"    constant #76 utf8: \"java/lang/invoke/MethodHandles\"\n" + 
+			"    constant #77 utf8: \"Lookup\"\n" + 
+			"  \n" + 
+			"  // Field descriptor #6 LX;\n" + 
+			"  final synthetic X this$0;\n" + 
+			"  \n" + 
+			"  // Method descriptor #8 (LX;)V\n" + 
+			"  // Stack: 2, Locals: 2\n" + 
+			"  X$1Y(X arg0);\n" + 
+			"     0  aload_0 [this]\n" + 
+			"     1  aload_1 [arg0]\n" + 
+			"     2  putfield X$1Y.this$0 : X [10]\n" + 
+			"     5  aload_0 [this]\n" + 
+			"     6  invokespecial java.lang.Object() [12]\n" + 
+			"     9  return\n" + 
+			"      Line numbers:\n" + 
+			"        [pc: 0, line: 6]\n" + 
+			"      Local variable table:\n" + 
+			"        [pc: 0, pc: 10] local: this index: 0 type: new X(){}\n" + 
+			"  \n" + 
+			"  // Method descriptor #20 ()Ljava/lang/Object;\n" + 
+			"  // Signature: ()TT;\n" + 
+			"  // Stack: 1, Locals: 1\n" + 
+			"  java.lang.Object goo();\n" + 
+			"     0  invokedynamic 0 lambda$() : I [26]\n" + 
+			"     5  invokeinterface I.doit() : void [27] [nargs: 1]\n" + 
+			"    10  aconst_null\n" + 
+			"    11  areturn\n" + 
+			"      Line numbers:\n" + 
+			"        [pc: 0, line: 8]\n" + 
+			"        [pc: 5, line: 11]\n" + 
+			"        [pc: 10, line: 12]\n" + 
+			"      Local variable table:\n" + 
+			"        [pc: 0, pc: 12] local: this index: 0 type: new X(){}\n" + 
+			"  \n" + 
+			"  // Method descriptor #14 ()V\n" + 
+			"  // Stack: 2, Locals: 1\n" + 
+			"  private static synthetic void lambda$0();\n" + 
+			"     0  aconst_null\n" + 
+			"     1  astore_0 [t]\n" + 
+			"     2  getstatic java.lang.System.out : java.io.PrintStream [33]\n" + 
+			"     5  ldc <String \"Lambda\"> [39]\n" + 
+			"     7  invokevirtual java.io.PrintStream.println(java.lang.String) : void [41]\n" + 
+			"    10  return\n" + 
+			"      Line numbers:\n" + 
+			"        [pc: 0, line: 9]\n" + 
+			"        [pc: 2, line: 10]\n" + 
+			"        [pc: 10, line: 11]\n" + 
+			"      Local variable table:\n" + 
+			"        [pc: 2, pc: 10] local: t index: 0 type: java.lang.Object\n" + 
+			"      Local variable type table:\n" + 
+			"        [pc: 2, pc: 10] local: t index: 0 type: T\n" + 
+			"\n" + 
+			"  Inner classes:\n" + 
+			"    [inner class info: #1 X$1Y, outer class info: #0\n" + 
+			"     inner name: #72 Y, accessflags: 0 default],\n" + 
+			"    [inner class info: #73 java/lang/invoke/MethodHandles$Lookup, outer class info: #75 java/lang/invoke/MethodHandles\n" + 
+			"     inner name: #77 Lookup, accessflags: 25 public static final]\n" + 
+			"  Enclosing Method: #54  #56 X.foo()V\n" + 
+			"Bootstrap methods:\n" + 
+			"  0 : # 64 arguments: {#66,#69,#70}\n" + 
+			"}";
+
+	verifyClassFile(expectedOutput, "X$1Y.class", ClassFileBytesDisassembler.SYSTEM);
+}
 public static Class testClass() {
 	return Jsr335ClassFileTest.class;
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java
index 2a509dc..aec4c64 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java
@@ -99,7 +99,7 @@ public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, Fl
 	if (this.binding.declaringClass.isMemberType() && !this.binding.declaringClass.isStatic()) {
 		// allocating a non-static member type without an enclosing instance of parent type
 		// https://bugs.eclipse.org/bugs/show_bug.cgi?id=335845
-		currentScope.tagAsAccessingInstanceStateOf(this.binding.declaringClass.enclosingType());
+		currentScope.tagAsAccessingEnclosingInstanceStateOf(this.binding.declaringClass.enclosingType(), false /* type variable access */);
 		// Reviewed for https://bugs.eclipse.org/bugs/show_bug.cgi?id=378674 :
 		// The corresponding problem (when called from static) is not produced until during code generation
 	}
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java
index 5d99b07..ada573f 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java
@@ -79,7 +79,7 @@ public class QualifiedAllocationExpression extends AllocationExpression {
 				ReferenceBinding superclass = this.binding.declaringClass.superclass();
 				if (superclass != null && superclass.isMemberType() && !superclass.isStatic()) {
 					// creating an anonymous type of a non-static member type without an enclosing instance of parent type
-					currentScope.tagAsAccessingInstanceStateOf(superclass.enclosingType());
+					currentScope.tagAsAccessingEnclosingInstanceStateOf(superclass.enclosingType(), false /* type variable access */);
 					// Reviewed for https://bugs.eclipse.org/bugs/show_bug.cgi?id=378674 :
 					// The corresponding problem (when called from static) is not produced until during code generation
 				}
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java
index b9b3f29..b421e36 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java
@@ -1060,12 +1060,18 @@ public TypeBinding resolveType(BlockScope scope) {
 							scope.problemReporter().indirectAccessToStaticField(this, fieldBinding);
 						}						
 					} else {
-						if (this.indexOfFirstFieldBinding == 1 && scope.compilerOptions().getSeverity(CompilerOptions.UnqualifiedFieldAccess) != ProblemSeverities.Ignore) {
-							scope.problemReporter().unqualifiedFieldAccess(this, fieldBinding);
+						boolean inStaticContext = scope.methodScope().isStatic;
+						if (this.indexOfFirstFieldBinding == 1) {
+							if (scope.compilerOptions().getSeverity(CompilerOptions.UnqualifiedFieldAccess) != ProblemSeverities.Ignore) {
+								scope.problemReporter().unqualifiedFieldAccess(this, fieldBinding);
+							}
+							if (!inStaticContext) {
+								scope.tagAsAccessingEnclosingInstanceStateOf(fieldBinding.declaringClass, false /* type variable access */);
+							}
 						}
 						//must check for the static status....
 						if (this.indexOfFirstFieldBinding > 1  //accessing to a field using a type as "receiver" is allowed only with static field
-								 || scope.methodScope().isStatic) { 	// the field is the first token of the qualified reference....
+								 || inStaticContext) { 	// the field is the first token of the qualified reference....
 							scope.problemReporter().staticFieldAccessToNonStaticVariable(this, fieldBinding);
 							return null;
 						 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedThisReference.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedThisReference.java
index cb006e1..0158bbb 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedThisReference.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedThisReference.java
@@ -109,13 +109,12 @@ public class QualifiedThisReference extends ThisReference {
 			// otherwise problem will be reported by the caller
 			return this.resolvedType;
 		} else {
-			// Mark all methods between here and the declared type as not static
-			scope.tagAsAccessingInstanceStateOf(this.currentCompatibleType);
+			scope.tagAsAccessingEnclosingInstanceStateOf(this.currentCompatibleType, false /* type variable access */);
 		}
 
 		// Ensure one cannot write code like: B() { super(B.this); }
 		if (depth == 0) {
-			checkAccess(scope.methodScope());
+			checkAccess(scope, null);
 		} // if depth>0, path emulation will diagnose bad scenarii
 
 		return this.resolvedType;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java
index 67dd5e8..4766f6d 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java
@@ -229,6 +229,8 @@ public TypeBinding checkFieldAccess(BlockScope scope) {
 		if (methodScope.isStatic) {
 			scope.problemReporter().staticFieldAccessToNonStaticVariable(this, fieldBinding);
 			return fieldBinding.type;
+		} else {
+			scope.tagAsAccessingEnclosingInstanceStateOf(fieldBinding.declaringClass, false /* type variable access */);
 		}
 	}
 
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleTypeReference.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleTypeReference.java
index d16e57e..cd6fb0c 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleTypeReference.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleTypeReference.java
@@ -57,6 +57,13 @@ public class SingleTypeReference extends TypeReference {
 			return this.resolvedType;
 
 		this.resolvedType = scope.getType(this.token);
+		
+		if (this.resolvedType instanceof TypeVariableBinding) {
+			TypeVariableBinding typeVariable = (TypeVariableBinding) this.resolvedType;
+			if (typeVariable.declaringElement instanceof SourceTypeBinding) {
+				scope.tagAsAccessingEnclosingInstanceStateOf((ReferenceBinding) typeVariable.declaringElement, true /* type variable access */);
+			}
+		}
 
 		if (scope.kind == Scope.CLASS_SCOPE && this.resolvedType.isValidBinding())
 			if (((ClassScope) scope).detectHierarchyCycle(this.resolvedType, this))
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SuperReference.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SuperReference.java
index 6dafc92..a7069ef 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SuperReference.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SuperReference.java
@@ -4,6 +4,10 @@
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
  *
  * Contributors:
  *     IBM Corporation - initial API and implementation
@@ -54,9 +58,9 @@ public class SuperReference extends ThisReference {
 	public TypeBinding resolveType(BlockScope scope) {
 
 		this.constant = Constant.NotAConstant;
-		if (!checkAccess(scope.methodScope()))
-			return null;
 		ReferenceBinding enclosingReceiverType = scope.enclosingReceiverType();
+		if (!checkAccess(scope, enclosingReceiverType))
+			return null;
 		if (enclosingReceiverType.id == T_JavaLangObject) {
 			scope.problemReporter().cannotUseSuperInJavaLangObject(this);
 			return null;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ThisReference.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ThisReference.java
index d5c019a..31cad42 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ThisReference.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ThisReference.java
@@ -4,6 +4,10 @@
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
  *
  * Contributors:
  *     IBM Corporation - initial API and implementation
@@ -45,8 +49,9 @@ public class ThisReference extends Reference {
 		return flowInfo; // this cannot be assigned
 	}
 
-	public boolean checkAccess(MethodScope methodScope) {
+	public boolean checkAccess(BlockScope scope, ReferenceBinding receiverType) {
 
+		MethodScope methodScope = scope.methodScope();
 		// this/super cannot be used in constructor call
 		if (methodScope.isConstructorCall) {
 			methodScope.problemReporter().fieldsOrThisBeforeConstructorInvocation(this);
@@ -58,7 +63,8 @@ public class ThisReference extends Reference {
 			methodScope.problemReporter().errorThisSuperInStatic(this);
 			return false;
 		}
-		methodScope.resetEnclosingMethodStaticFlag();
+		if (receiverType != null)
+			scope.tagAsAccessingEnclosingInstanceStateOf(receiverType, false /* type variable access */);
 		return true;
 	}
 
@@ -121,10 +127,12 @@ public class ThisReference extends Reference {
 	public TypeBinding resolveType(BlockScope scope) {
 
 		this.constant = Constant.NotAConstant;
-		if (!isImplicitThis() &&!checkAccess(scope.methodScope())) {
+		
+		ReferenceBinding enclosingReceiverType = scope.enclosingReceiverType();
+		if (!isImplicitThis() &&!checkAccess(scope, enclosingReceiverType)) {
 			return null;
 		}
-		return this.resolvedType = scope.enclosingReceiverType();
+		return this.resolvedType = enclosingReceiverType;
 	}
 
 	public void traverse(ASTVisitor visitor, BlockScope blockScope) {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java
index 32952a9..e80e253 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java
@@ -4,6 +4,10 @@
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
  *
  * Contributors:
  *     IBM Corporation - initial API and implementation
@@ -1015,37 +1019,6 @@ public String toString(int tab) {
 			s += ((BlockScope) this.subscopes[i]).toString(tab + 1) + "\n"; //$NON-NLS-1$
 	return s;
 }
-// https://bugs.eclipse.org/bugs/show_bug.cgi?id=318682
-/**
- * This method is used to reset the CanBeStatic the enclosing method of the current block
- */
-public void resetEnclosingMethodStaticFlag() {
-	MethodScope methodScope = methodScope();
-	while (methodScope != null && methodScope.referenceContext instanceof LambdaExpression) {
-		LambdaExpression lambda = (LambdaExpression) methodScope.referenceContext;
-		lambda.shouldCaptureInstance = true;
-		methodScope = methodScope.enclosingMethodScope();
-	}
-	if (methodScope != null) {
-		if (methodScope.referenceContext instanceof MethodDeclaration) {
-			MethodDeclaration methodDeclaration = (MethodDeclaration) methodScope.referenceContext;
-			methodDeclaration.bits &= ~ASTNode.CanBeStatic;
-		} else if (methodScope.referenceContext instanceof TypeDeclaration) {
-			// anonymous type, find enclosing method
-			methodScope = methodScope.enclosingMethodScope();
-			while (methodScope != null && methodScope.referenceContext instanceof LambdaExpression) {
-				LambdaExpression lambda = (LambdaExpression) methodScope.referenceContext;
-				lambda.shouldCaptureInstance = true;
-				methodScope = methodScope.enclosingMethodScope();
-			}
-			if (methodScope != null && methodScope.referenceContext instanceof MethodDeclaration) {
-				MethodDeclaration methodDeclaration = (MethodDeclaration) methodScope.referenceContext;
-				methodDeclaration.bits &= ~ASTNode.CanBeStatic;
-			}
-		}
-	}
-}
-
 
 private List trackingVariables; // can be null if no resources are tracked
 /** Used only during analyseCode and only for checking if a resource was closed in a finallyBlock. */
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
index 77bfcc1..07c9270 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
@@ -1826,8 +1826,6 @@ public abstract class Scope {
 														fieldBinding.declaringClass,
 														name,
 														ProblemReasons.NonStaticReferenceInStaticContext);
-											} else if (methodScope != null) {
-												tagAsAccessingInstanceStateOf(fieldBinding.declaringClass);
 											}
 										}
 										if (receiverType == fieldBinding.declaringClass || compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4) {
@@ -2169,7 +2167,7 @@ public abstract class Scope {
 												? ProblemReasons.NonStaticReferenceInConstructorInvocation
 												: ProblemReasons.NonStaticReferenceInStaticContext);
 									} else if (!methodBinding.isStatic() && methodScope != null) {
-										tagAsAccessingInstanceStateOf(receiverType);
+										tagAsAccessingEnclosingInstanceStateOf(receiverType, false /* type variable access */);
 									}
 									if (inheritedHasPrecedence
 											|| receiverType == methodBinding.declaringClass
@@ -2772,8 +2770,6 @@ public abstract class Scope {
 						if (typeVariable != null) {
 							if (insideStaticContext) // do not consider this type modifiers: access is legite within same type
 								return new ProblemReferenceBinding(new char[][]{name}, typeVariable, ProblemReasons.NonStaticReferenceInStaticContext);
-							else if (methodScope != null)
-								methodScope.resetEnclosingMethodStaticFlag();
 							return typeVariable;
 						}
 						insideStaticContext |= sourceType.isStatic();
@@ -4456,13 +4452,8 @@ public abstract class Scope {
 		}
 		return resolutionScope;
 	}
-	// https://bugs.eclipse.org/bugs/show_bug.cgi?id=376550
-	/**
-	 * This method is used to reset the CanBeStatic on all enclosing methods until the method 
-	 * belonging to the enclosingInstanceType
-	 * @param enclosingType type of which an enclosing instance is required in the code.
-	 */
-	public void tagAsAccessingInstanceStateOf(ReferenceBinding enclosingType) {
+	// Some entity in the receiver scope is referencing instance data of enclosing type. Tag all intervening methods as instance methods. 
+	public void tagAsAccessingEnclosingInstanceStateOf(ReferenceBinding enclosingType, boolean typeVariableAccess) {
 		MethodScope methodScope = methodScope();
 		if (methodScope != null && methodScope.referenceContext instanceof TypeDeclaration) {
 			if (!methodScope.enclosingReceiverType().isCompatibleWith(enclosingType)) { // unless invoking a method of the local type ...
@@ -4473,7 +4464,8 @@ public abstract class Scope {
 		while (methodScope != null) {
 			while (methodScope != null && methodScope.referenceContext instanceof LambdaExpression) {
 				LambdaExpression lambda = (LambdaExpression) methodScope.referenceContext;
-				lambda.shouldCaptureInstance = true;
+				if (!typeVariableAccess)
+					lambda.shouldCaptureInstance = true;  // lambda can still be static, only when `this' is touched (implicitly or otherwise) it cannot be.
 				methodScope = methodScope.enclosingMethodScope();
 			}
 			if (methodScope != null) {
diff --git a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetThisReference.java b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetThisReference.java
index 53b874a..8bf7193 100644
--- a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetThisReference.java
+++ b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetThisReference.java
@@ -4,6 +4,10 @@
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
  *
  * Contributors:
  *     IBM Corporation - initial API and implementation
@@ -44,8 +48,9 @@ public class CodeSnippetThisReference extends ThisReference implements Evaluatio
 		this.isImplicit = isImplicit;
 	}
 	
-	public boolean checkAccess(MethodScope methodScope) {
+	public boolean checkAccess(BlockScope scope, ReferenceBinding thisType) {
 		// this/super cannot be used in constructor call
+		MethodScope methodScope = scope.methodScope();
 		if (this.evaluationContext.isConstructorCall) {
 			methodScope.problemReporter().fieldsOrThisBeforeConstructorInvocation(this);
 			return false;
@@ -56,7 +61,7 @@ public class CodeSnippetThisReference extends ThisReference implements Evaluatio
 			methodScope.problemReporter().errorThisSuperInStatic(this);
 			return false;
 		}
-		methodScope.resetEnclosingMethodStaticFlag();
+		scope.tagAsAccessingEnclosingInstanceStateOf(thisType, false /* type variable access */);
 		return true;
 	}
 	
@@ -98,12 +103,11 @@ public class CodeSnippetThisReference extends ThisReference implements Evaluatio
 	public TypeBinding resolveType(BlockScope scope) {
 		// implicit this
 		this.constant = Constant.NotAConstant;
-		TypeBinding snippetType = null;
+		ReferenceBinding snippetType = scope.enclosingSourceType();
 		MethodScope methodScope = scope.methodScope();
-		if (!this.isImplicit && !checkAccess(methodScope)) {
+		if (!this.isImplicit && !checkAccess(scope, snippetType)) {
 			return null;
 		}
-		snippetType = scope.enclosingSourceType();
 
 		this.delegateThis = scope.getField(snippetType, DELEGATE_THIS, this);
 		if (this.delegateThis == null || !this.delegateThis.isValidBinding()) {

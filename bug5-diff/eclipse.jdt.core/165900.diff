commit 047584befb8673c45fb37a5eec1f22e3adb791d0
Author: David Audel <daudel>
Date:   Thu Dec 7 14:50:07 2006 +0000

    HEAD - bug 165900

29	0	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests.java
122	0	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests_1_5.java
0	1	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java
3	1	org.eclipse.jdt.core/buildnotes_jdt-core.html
2	0	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/ISelectionRequestor.java
29	0	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
2	5	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocMessageSend.java
1	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ProblemMethodBinding.java
5	5	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
2	2	org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetScope.java
2	2	org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetToCuMapper.java
170	50	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java
1	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceType.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests.java
index a58c7c4..db388dc 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests.java
@@ -76,6 +76,35 @@ public void testAbstractMethod() throws JavaModelException {
 		elements
 	);
 }
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=165900
+public void testAmbiguousMethod1() throws JavaModelException {
+	this.workingCopies = new ICompilationUnit[1];
+	this.workingCopies[0] = getWorkingCopy(
+		"/Resolve/src/test/Test.java",
+		"package test;\n"+
+		"public class Test {\n" + 
+		"  void foo(Test1 t) {}\n" + 
+		"  void foo(Test2 t) {}\n" + 
+		"  void bar(Object o) {\n" + 
+		"    foo(o);\n" + 
+		"  }\n" + 
+		"}\n" + 
+		"class Test1 {\n" + 
+		"}\n" + 
+		"class Test2 {\n" + 
+		"}");
+
+	String str = this.workingCopies[0].getSource();
+	int start = str.lastIndexOf("foo(o)");
+	int length = "foo".length();
+	IJavaElement[] elements =  this.workingCopies[0].codeSelect(start, length, this.wcOwner);
+	
+	assertElementsEqual(
+			"Unexpected elements",
+			"foo(Test1) [in Test [in [Working copy] Test.java [in test [in src [in Resolve]]]]]",
+			elements
+		);
+}
 /**
  * Resolve an argument name
  */
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests_1_5.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests_1_5.java
index d9c40d2..a089075 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests_1_5.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests_1_5.java
@@ -2285,4 +2285,126 @@ public void test0102() throws CoreException, IOException {
 		deleteProject("P");
 	}
 }
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=165900
+public void test103() throws JavaModelException {
+	this.workingCopies = new ICompilationUnit[1];
+	this.workingCopies[0] = getWorkingCopy(
+		"/Resolve/src/test/Test.java",
+		"package test;\n"+
+		"public class Test {\n" + 
+		"  <T extends Test1> void foo(T t) {}\n" + 
+		"  <T extends Test2> void foo(T t) {}\n" + 
+		"  void bar(Object o) {\n" + 
+		"    foo(o);\n" + 
+		"  }\n" + 
+		"}\n" + 
+		"class Test1 {\n" + 
+		"}\n" + 
+		"class Test2 {\n" + 
+		"}");
+
+	String str = this.workingCopies[0].getSource();
+	int start = str.lastIndexOf("foo(o)");
+	int length = "foo".length();
+	IJavaElement[] elements =  this.workingCopies[0].codeSelect(start, length, this.wcOwner);
+	
+	assertElementsEqual(
+			"Unexpected elements",
+			"foo(T) [in Test [in [Working copy] Test.java [in test [in src [in Resolve]]]]]",
+			elements
+		);
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=165900
+public void test104() throws JavaModelException {
+	this.workingCopies = new ICompilationUnit[1];
+	this.workingCopies[0] = getWorkingCopy(
+		"/Resolve/src/test/Test.java",
+		"package test;\n"+
+		"public class Test {\n" + 
+		"  <T extends Test1> T foo(Test3<T> t) {return null;}\n" + 
+		"  <T extends Test2> T foo(Test3<T> t) {return null;}\n" + 
+		"  void bar(Object o) {\n" + 
+		"    foo(o);\n" + 
+		"  }\n" + 
+		"}\n" + 
+		"class Test1 {\n" + 
+		"}\n" + 
+		"class Test2 {\n" + 
+		"}\n" + 
+		"class Test3 <U> {\n" + 
+		"}");
+
+	String str = this.workingCopies[0].getSource();
+	int start = str.lastIndexOf("foo(o)");
+	int length = "foo".length();
+	IJavaElement[] elements =  this.workingCopies[0].codeSelect(start, length, this.wcOwner);
+	
+	assertElementsEqual(
+			"Unexpected elements",
+			"foo(Test3<T>) [in Test [in [Working copy] Test.java [in test [in src [in Resolve]]]]]",
+			elements
+		);
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=165900
+public void test105() throws JavaModelException {
+	this.workingCopies = new ICompilationUnit[1];
+	this.workingCopies[0] = getWorkingCopy(
+		"/Resolve/src/test/Test.java",
+		"package test;\n"+
+		"public class Test {\n" + 
+		"  <T extends Test1> T foo(Test3<T> t) {return null;}\n" + 
+		"  <T extends Test2> T foo(Test3<T> t) {return null;}\n" + 
+		"  void bar(Test3 o) {\n" + 
+		"    foo(o);\n" + 
+		"  }\n" + 
+		"}\n" + 
+		"class Test1 {\n" + 
+		"}\n" + 
+		"class Test2 {\n" + 
+		"}\n" + 
+		"class Test3 <U> {\n" + 
+		"}");
+
+	String str = this.workingCopies[0].getSource();
+	int start = str.lastIndexOf("foo(o)");
+	int length = "foo".length();
+	IJavaElement[] elements =  this.workingCopies[0].codeSelect(start, length, this.wcOwner);
+	
+	assertElementsEqual(
+			"Unexpected elements",
+			"foo(Test3<T>) [in Test [in [Working copy] Test.java [in test [in src [in Resolve]]]]]",
+			elements
+		);
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=165900
+public void test106() throws JavaModelException {
+	this.workingCopies = new ICompilationUnit[1];
+	this.workingCopies[0] = getWorkingCopy(
+		"/Resolve/src/test/Test.java",
+		"package test;\n"+
+		"public class Test {\n" + 
+		"  <T extends Test1> T foo(Test3<T> t) {return null;}\n" + 
+		"  <T extends Test2> T foo(Test3<T> t) {return null;}\n" + 
+		"  void bar(Test3<Object> o) {\n" + 
+		"    foo(o);\n" + 
+		"  }\n" + 
+		"}\n" + 
+		"class Test1 {\n" + 
+		"}\n" + 
+		"class Test2 {\n" + 
+		"}\n" + 
+		"class Test3 <U> {\n" + 
+		"}");
+
+	String str = this.workingCopies[0].getSource();
+	int start = str.lastIndexOf("foo(o)");
+	int length = "foo".length();
+	IJavaElement[] elements =  this.workingCopies[0].codeSelect(start, length, this.wcOwner);
+	
+	assertElementsEqual(
+			"Unexpected elements",
+			"foo(Test3<T>) [in Test [in [Working copy] Test.java [in test [in src [in Resolve]]]]]",
+			elements
+		);
+}
 }
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java
index b1db4ee..6744222 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/SelectionJavadocModelTests.java
@@ -980,7 +980,6 @@ public class SelectionJavadocModelTests extends AbstractJavaModelTests {
 		int[] selectionPositions = selectionInfo(workingCopies[0], "getMax", 1);
 		IJavaElement[] elements = workingCopies[0].codeSelect(selectionPositions[0], 0);
 		assertElementsEqual("Invalid selection(s)",
-			"getMax(A<T>) [in X [in [Working copy] Test.java [in b165794 [in <project root> [in Tests]]]]]\n" + 
 			"getMax(A<T>) [in X [in [Working copy] Test.java [in b165794 [in <project root> [in Tests]]]]]",
 			elements
 		);
diff --git a/org.eclipse.jdt.core/buildnotes_jdt-core.html b/org.eclipse.jdt.core/buildnotes_jdt-core.html
index 3c74233..41306cd 100644
--- a/org.eclipse.jdt.core/buildnotes_jdt-core.html
+++ b/org.eclipse.jdt.core/buildnotes_jdt-core.html
@@ -69,7 +69,9 @@ Eclipse SDK 3.3M4 - 5th December 2006
 </ul>
 
 <h3>Problem Reports Fixed</h3>
-<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=166570">166570</a>
+<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=165900">165900</a>
+[select] Incoherent behavior when there is ambigous methods
+<br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=166570">166570</a>
 [assist] Proposal computer from the 'org.eclipse.mylar.java' plug-in did not complete normally
 <br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=158611">158611</a>
 Set 'generatedBy' attribute of IMarker anywhere markers are generated in JDT/Core code
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/ISelectionRequestor.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/ISelectionRequestor.java
index 0783243..3a2122f 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/ISelectionRequestor.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/ISelectionRequestor.java
@@ -160,6 +160,8 @@ public interface ISelectionRequestor {
 		char[][] parameterPackageNames,
 		char[][] parameterTypeNames,
 		String[] parameterSignatures,
+		char[][] typeParameterNames,
+		char[][][] typeParameterBoundNames,
 		boolean isConstructor,
 		boolean isDeclaration,
 		char[] uniqueKey,
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
index 22ce229..8c0d8d7 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
@@ -873,6 +873,31 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 						parameterSignatures[i] = new String(getSignature(parameterTypes[i])).replace('/', '.');
 					}
 					
+					TypeVariableBinding[] typeVariables = methodBinding.original().typeVariables;
+					length = typeVariables == null ? 0 : typeVariables.length;
+					char[][] typeParameterNames = new char[length][];
+					char[][][] typeParameterBoundNames = new char[length][][];
+					for (int i = 0; i < length; i++) {
+						TypeVariableBinding typeVariable = typeVariables[i];
+						typeParameterNames[i] = typeVariable.sourceName;
+						if (typeVariable.firstBound == null) {
+							typeParameterBoundNames[i] = new char[0][];
+						} else if (typeVariable.firstBound == typeVariable.superclass) {
+							int boundCount = 1 + (typeVariable.superInterfaces == null ? 0 : typeVariable.superInterfaces.length);
+							typeParameterBoundNames[i] = new char[boundCount][];
+							typeParameterBoundNames[i][0] = typeVariable.superclass.sourceName;
+							for (int j = 1; j < boundCount; j++) {
+								typeParameterBoundNames[i][j] = typeVariables[i].superInterfaces[j - 1].sourceName;
+							}
+						} else {
+							int boundCount = typeVariable.superInterfaces == null ? 0 : typeVariable.superInterfaces.length;
+							typeParameterBoundNames[i] = new char[boundCount][];
+							for (int j = 0; j < boundCount; j++) {
+								typeParameterBoundNames[i][j] = typeVariables[i].superInterfaces[j].sourceName;
+							}
+						}
+					}
+					
 					ReferenceBinding declaringClass = methodBinding.declaringClass;
 					if (isLocal(declaringClass) && this.requestor instanceof SelectionRequestor) {
 						((SelectionRequestor)this.requestor).acceptLocalMethod(methodBinding);
@@ -887,6 +912,8 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 							parameterPackageNames,
 							parameterTypeNames,
 							parameterSignatures,
+							typeParameterNames,
+							typeParameterBoundNames,
 							methodBinding.isConstructor(), 
 							isDeclaration,
 							methodBinding.computeUniqueKey(),
@@ -1239,6 +1266,8 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 					null, // SelectionRequestor does not need of parameters type for method declaration
 					null, // SelectionRequestor does not need of parameters type for method declaration
 					null, // SelectionRequestor does not need of parameters type for method declaration
+					null, // SelectionRequestor does not need of type parameters name for method declaration
+					null, // SelectionRequestor does not need of type parameters bounds for method declaration
 					method.isConstructor(),
 					true,
 					method.binding != null ? method.binding.computeUniqueKey() : null,
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocMessageSend.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocMessageSend.java
index e42ec62..0a6bbd0 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocMessageSend.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/JavadocMessageSend.java
@@ -120,6 +120,7 @@ public class JavadocMessageSend extends MessageSend {
 				case ProblemReasons.NonStaticReferenceInConstructorInvocation:
 				case ProblemReasons.NonStaticReferenceInStaticContext:
 				case ProblemReasons.InheritedNameHidesEnclosingName : 
+				case ProblemReasons.Ambiguous: 
 					MethodBinding closestMatch = ((ProblemMethodBinding)this.binding).closestMatch;
 					if (closestMatch != null) {
 						this.binding = closestMatch; // ignore problem if can reach target method through it
@@ -135,11 +136,7 @@ public class JavadocMessageSend extends MessageSend {
 					return null;
 				}
 			}
-			// do not report ambiguous problems on methods as they can appears only when source level >= 1.5 and they cannot be fixed!
-			// see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=165794
-			if (this.binding.problemId() != ProblemReasons.Ambiguous) {
-				scope.problemReporter().javadocInvalidMethod(this, this.binding, scope.getDeclarationModifiers());
-			}
+			scope.problemReporter().javadocInvalidMethod(this, this.binding, scope.getDeclarationModifiers());
 			// record the closest match, for clients who may still need hint about possible method match
 			if (this.binding instanceof ProblemMethodBinding) {
 				MethodBinding closestMatch = ((ProblemMethodBinding)this.binding).closestMatch;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java
index e086828..6f4d56d 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java
@@ -403,6 +403,7 @@ public TypeBinding resolveType(BlockScope scope) {
 		MethodBinding closestMatch = ((ProblemMethodBinding)binding).closestMatch;
 		switch (this.binding.problemId()) {
 			case ProblemReasons.Ambiguous :
+				break; // no resilience on ambiguous
 			case ProblemReasons.NotVisible :
 			case ProblemReasons.NonStaticReferenceInConstructorInvocation :
 			case ProblemReasons.NonStaticReferenceInStaticContext :
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ProblemMethodBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ProblemMethodBinding.java
index 9582421..146226c 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ProblemMethodBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ProblemMethodBinding.java
@@ -31,7 +31,7 @@ public ProblemMethodBinding(char[] selector, TypeBinding[] args, ReferenceBindin
 public ProblemMethodBinding(MethodBinding closestMatch, char[] selector, TypeBinding[] args, int problemReason) {
 	this(selector, args, problemReason);
 	this.closestMatch = closestMatch;
-	if (closestMatch != null) this.declaringClass = closestMatch.declaringClass;
+	if (closestMatch != null && problemReason != ProblemReasons.Ambiguous) this.declaringClass = closestMatch.declaringClass;
 }
 /* API
 * Answer the problem id associated with the receiver.
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
index a1916ca..ab34639 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
@@ -1225,7 +1225,7 @@ public abstract class Scope implements TypeConstants, TypeIds {
 				if (current instanceof ParameterizedMethodBinding)
 					for (int j = i + 1; j < visiblesCount; j++)
 						if (current.declaringClass == candidates[j].declaringClass && current.areParametersEqual(candidates[j]))
-							return new ProblemMethodBinding(candidates[i].selector, candidates[i].parameters, ProblemReasons.Ambiguous);
+							return new ProblemMethodBinding(candidates[i], candidates[i].selector, candidates[i].parameters, ProblemReasons.Ambiguous);
 			}
 		}
 
@@ -3143,7 +3143,7 @@ public abstract class Scope implements TypeConstants, TypeIds {
 			return method;
 		}
 		if (problemMethod == null)
-			return new ProblemMethodBinding(visible[0].selector, visible[0].parameters, ProblemReasons.Ambiguous);
+			return new ProblemMethodBinding(visible[0], visible[0].selector, visible[0].parameters, ProblemReasons.Ambiguous);
 		return problemMethod;
 	}
 	
@@ -3189,7 +3189,7 @@ public abstract class Scope implements TypeConstants, TypeIds {
 			return method;
 		}
 		if (problemMethod == null)
-			return new ProblemMethodBinding(visible[0].selector, visible[0].parameters, ProblemReasons.Ambiguous);
+			return new ProblemMethodBinding(visible[0], visible[0].selector, visible[0].parameters, ProblemReasons.Ambiguous);
 		return problemMethod;
 	}
 
@@ -3256,7 +3256,7 @@ public abstract class Scope implements TypeConstants, TypeIds {
 				}
 			}
 		} else if (count == 0) {
-			return new ProblemMethodBinding(visible[0].selector, visible[0].parameters, ProblemReasons.Ambiguous);
+			return new ProblemMethodBinding(visible[0], visible[0].selector, visible[0].parameters, ProblemReasons.Ambiguous);
 		}
 
 		// found several methods that are mutually acceptable -> must be equal
@@ -3394,7 +3394,7 @@ public abstract class Scope implements TypeConstants, TypeIds {
 		}
 
 		// if all moreSpecific methods are equal then see if duplicates exist because of substitution
-		return new ProblemMethodBinding(visible[0].selector, visible[0].parameters, ProblemReasons.Ambiguous);
+		return new ProblemMethodBinding(visible[0], visible[0].selector, visible[0].parameters, ProblemReasons.Ambiguous);
 	}
 
 	public final ClassScope outerMostClassScope() {
diff --git a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetScope.java b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetScope.java
index 475327b..e618bff 100644
--- a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetScope.java
+++ b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetScope.java
@@ -312,7 +312,7 @@ public FieldBinding findFieldForCodeSnippet(TypeBinding receiverType, char[] fie
 				if (visibleField == null)
 					visibleField = field;
 				else
-					return new ProblemFieldBinding(visibleField.declaringClass, fieldName, ProblemReasons.Ambiguous);
+					return new ProblemFieldBinding(visibleField, visibleField.declaringClass, fieldName, ProblemReasons.Ambiguous);
 			} else {
 				notVisible = true;
 			}
@@ -334,7 +334,7 @@ public FieldBinding findFieldForCodeSnippet(TypeBinding receiverType, char[] fie
 						if (visibleField == null) {
 							visibleField = field;
 						} else {
-							ambiguous = new ProblemFieldBinding(visibleField.declaringClass, fieldName, ProblemReasons.Ambiguous);
+							ambiguous = new ProblemFieldBinding(visibleField, visibleField.declaringClass, fieldName, ProblemReasons.Ambiguous);
 							break done;
 						}
 					} else {
diff --git a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetToCuMapper.java b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetToCuMapper.java
index 148d3aa..030cfa7 100644
--- a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetToCuMapper.java
+++ b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetToCuMapper.java
@@ -285,8 +285,8 @@ public ISelectionRequestor getSelectionRequestor(final ISelectionRequestor origi
 		public void acceptField(char[] declaringTypePackageName, char[] declaringTypeName, char[] name, boolean isDeclaration, char[] uniqueKey, int start, int end) {
 			originalRequestor.acceptField(declaringTypePackageName, declaringTypeName, name, isDeclaration, uniqueKey, start, end);
 		}
-		public void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, String enclosingDeclaringTypeSignature, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, String[] parameterSignatures, boolean isConstructor, boolean isDeclaration, char[] uniqueKey, int start, int end) {
-			originalRequestor.acceptMethod(declaringTypePackageName, declaringTypeName, enclosingDeclaringTypeSignature, selector, parameterPackageNames, parameterTypeNames, parameterSignatures, isConstructor, isDeclaration, uniqueKey, start, end);
+		public void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, String enclosingDeclaringTypeSignature, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, String[] parameterSignatures, char[][] typeParameterNames, char[][][] typeParameterBoundNames, boolean isConstructor, boolean isDeclaration, char[] uniqueKey, int start, int end) {
+			originalRequestor.acceptMethod(declaringTypePackageName, declaringTypeName, enclosingDeclaringTypeSignature, selector, parameterPackageNames, parameterTypeNames, parameterSignatures, typeParameterNames, typeParameterBoundNames, isConstructor, isDeclaration, uniqueKey, start, end);
 		}
 		public void acceptPackage(char[] packageName) {
 			originalRequestor.acceptPackage(packageName);
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java
index 6e08934..adcb304 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java
@@ -74,22 +74,41 @@ public SelectionRequestor(NameLookup nameLookup, Openable openable) {
 	this.nameLookup = nameLookup;
 	this.openable = openable;
 }
-/**
- * Resolve the binary method
- *
- * fix for 1FWFT6Q
- */
-protected void acceptBinaryMethod(IType type, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, String[] parameterSignatures, char[] uniqueKey, boolean isConstructor) {
-	IMethod method= type.getMethod(new String(selector), parameterSignatures);
-	if (method.exists()) {
-		try {
-			if(!isConstructor || ((JavaElement)method).getSourceMapper() == null) {
-				if (uniqueKey != null)
-					method = new ResolvedBinaryMethod(
+private void acceptBinaryMethod(
+		IType type,
+		IMethod method,
+		char[] uniqueKey,
+		boolean isConstructor) {
+	try {
+		if(!isConstructor || ((JavaElement)method).getSourceMapper() == null) {
+			if (uniqueKey != null) {
+				ResolvedBinaryMethod resolvedMethod = new ResolvedBinaryMethod(
+						(JavaElement)method.getParent(),
+						method.getElementName(),
+						method.getParameterTypes(),
+						new String(uniqueKey));
+				resolvedMethod.occurrenceCount = method.getOccurrenceCount();
+				method = resolvedMethod;
+			}
+				
+			addElement(method);
+			if(SelectionEngine.DEBUG){
+				System.out.print("SELECTION - accept method("); //$NON-NLS-1$
+				System.out.print(method.toString());
+				System.out.println(")"); //$NON-NLS-1$
+			}
+		} else {
+			ISourceRange range = method.getSourceRange();
+			if (range.getOffset() != -1 && range.getLength() != 0 ) {
+				if (uniqueKey != null) {
+					ResolvedBinaryMethod resolvedMethod = new ResolvedBinaryMethod(
 							(JavaElement)method.getParent(),
 							method.getElementName(),
 							method.getParameterTypes(),
 							new String(uniqueKey));
+					resolvedMethod.occurrenceCount = method.getOccurrenceCount();
+					method = resolvedMethod;
+				}
 				addElement(method);
 				if(SelectionEngine.DEBUG){
 					System.out.print("SELECTION - accept method("); //$NON-NLS-1$
@@ -97,33 +116,49 @@ protected void acceptBinaryMethod(IType type, char[] selector, char[][] paramete
 					System.out.println(")"); //$NON-NLS-1$
 				}
 			} else {
-				ISourceRange range = method.getSourceRange();
-				if (range.getOffset() != -1 && range.getLength() != 0 ) {
-					if (uniqueKey != null)
-						method = new ResolvedBinaryMethod(
-								(JavaElement)method.getParent(),
-								method.getElementName(),
-								method.getParameterTypes(),
-								new String(uniqueKey));
-					addElement(method);
-					if(SelectionEngine.DEBUG){
-						System.out.print("SELECTION - accept method("); //$NON-NLS-1$
-						System.out.print(method.toString());
-						System.out.println(")"); //$NON-NLS-1$
-					}
-				} else {
-					// no range was actually found, but a method was originally given -> default constructor
-					addElement(type);
-					if(SelectionEngine.DEBUG){
-						System.out.print("SELECTION - accept type("); //$NON-NLS-1$
-						System.out.print(type.toString());
-						System.out.println(")"); //$NON-NLS-1$
+				// no range was actually found, but a method was originally given -> default constructor
+				addElement(type);
+				if(SelectionEngine.DEBUG){
+					System.out.print("SELECTION - accept type("); //$NON-NLS-1$
+					System.out.print(type.toString());
+					System.out.println(")"); //$NON-NLS-1$
+				}
+			}
+		}
+	} catch (JavaModelException e) {
+		// an exception occurs, return nothing
+	}
+}
+/**
+ * Resolve the binary method
+ *
+ * fix for 1FWFT6Q
+ */
+protected void acceptBinaryMethod(
+		IType type,
+		char[] selector,
+		char[][] parameterPackageNames,
+		char[][] parameterTypeNames,
+		String[] parameterSignatures,
+		char[][] typeParameterNames,
+		char[][][] typeParameterBoundNames,
+		char[] uniqueKey,
+		boolean isConstructor) {
+	IMethod method= type.getMethod(new String(selector), parameterSignatures);
+	
+	if (method.exists()) {
+		if (typeParameterNames != null && typeParameterNames.length != 0) {
+			IMethod[] methods = type.findMethods(method);
+			if (methods.length > 1) {
+				for (int i = 0; i < methods.length; i++) {
+					if (areTypeParametersCompatible(methods[i], typeParameterNames, typeParameterBoundNames)) {
+						acceptBinaryMethod(type, method, uniqueKey, isConstructor);
 					}
 				}
+				return;
 			}
-		} catch (JavaModelException e) {
-			// an exception occurs, return nothing
 		}
+		acceptBinaryMethod(type, method, uniqueKey, isConstructor);
 	}
 }
 /**
@@ -155,9 +190,13 @@ public void acceptType(char[] packageName, char[] typeName, int modifiers, boole
 		if(type != null ) {
 			String key = uniqueKey == null ? type.getKey() : new String(uniqueKey);
 			if(type.isBinary()) {
-				type = new ResolvedBinaryType((JavaElement)type.getParent(), type.getElementName(), key);
+				ResolvedBinaryType resolvedType = new ResolvedBinaryType((JavaElement)type.getParent(), type.getElementName(), key);
+				resolvedType.occurrenceCount = type.getOccurrenceCount();
+				type = resolvedType;
 			} else {
-				type = new ResolvedSourceType((JavaElement)type.getParent(), type.getElementName(), key);
+				ResolvedSourceType resolvedType = new ResolvedSourceType((JavaElement)type.getParent(), type.getElementName(), key);
+				resolvedType.occurrenceCount = type.getOccurrenceCount();
+				type = resolvedType;
 			}
 		}
 	}
@@ -214,15 +253,19 @@ public void acceptField(char[] declaringTypePackageName, char[] declaringTypeNam
 			if (field.exists()) {
 				if (uniqueKey != null) {
 					if(field.isBinary()) {
-						field = new ResolvedBinaryField(
+						ResolvedBinaryField resolvedField = new ResolvedBinaryField(
 								(JavaElement)field.getParent(),
 								field.getElementName(),
 								new String(uniqueKey));
+						resolvedField.occurrenceCount = field.getOccurrenceCount();
+						field = resolvedField;
 					} else {
-						field = new ResolvedSourceField(
+						ResolvedSourceField resolvedField = new ResolvedSourceField(
 								(JavaElement)field.getParent(),
 								field.getElementName(),
 								new String(uniqueKey));
+						resolvedField.occurrenceCount = field.getOccurrenceCount();
+						field = resolvedField;
 					}
 				}
 				addElement(field);
@@ -250,15 +293,19 @@ public void acceptLocalField(FieldBinding fieldBinding) {
 		if (field.exists()) {
 			char[] uniqueKey = fieldBinding.computeUniqueKey();
 			if(field.isBinary()) {
-				field = new ResolvedBinaryField(
+				ResolvedBinaryField resolvedField = new ResolvedBinaryField(
 						(JavaElement)field.getParent(),
 						field.getElementName(),
 						new String(uniqueKey));
+				resolvedField.occurrenceCount = field.getOccurrenceCount();
+				field = resolvedField;
 			} else {
-				field = new ResolvedSourceField(
+				ResolvedSourceField resolvedField = new ResolvedSourceField(
 						(JavaElement)field.getParent(),
 						field.getElementName(),
 						new String(uniqueKey));
+				resolvedField.occurrenceCount = field.getOccurrenceCount();
+				field = resolvedField;
 			}
 			addElement(field);
 			if(SelectionEngine.DEBUG){
@@ -277,17 +324,21 @@ public void acceptLocalMethod(MethodBinding methodBinding) {
 			
 			char[] uniqueKey = methodBinding.computeUniqueKey();
 			if(method.isBinary()) {
-				res = new ResolvedBinaryMethod(
+				ResolvedBinaryMethod resolvedRes = new ResolvedBinaryMethod(
 						(JavaElement)res.getParent(),
 						method.getElementName(),
 						method.getParameterTypes(), 
 						new String(uniqueKey));
+				resolvedRes.occurrenceCount = method.getOccurrenceCount();
+				res = resolvedRes;
 			} else {
-				res = new ResolvedSourceMethod(
+				ResolvedSourceMethod resolvedRes = new ResolvedSourceMethod(
 						(JavaElement)res.getParent(),
 						method.getElementName(),
 						method.getParameterTypes(), 
 						new String(uniqueKey));
+				resolvedRes.occurrenceCount = method.getOccurrenceCount();
+				res = resolvedRes;
 			}
 			addElement(res);
 			if(SelectionEngine.DEBUG){
@@ -390,7 +441,21 @@ public void acceptLocalVariable(LocalVariableBinding binding) {
 /**
  * Resolve the method
  */
-public void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, String enclosingDeclaringTypeSignature, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, String[] parameterSignatures, boolean isConstructor, boolean isDeclaration, char[] uniqueKey, int start, int end) {
+public void acceptMethod(
+		char[] declaringTypePackageName,
+		char[] declaringTypeName,
+		String enclosingDeclaringTypeSignature, 
+		char[] selector,
+		char[][] parameterPackageNames,
+		char[][] parameterTypeNames,
+		String[] parameterSignatures,
+		char[][] typeParameterNames,
+		char[][][] typeParameterBoundNames,
+		boolean isConstructor,
+		boolean isDeclaration,
+		char[] uniqueKey,
+		int start,
+		int end) {
 	IJavaElement[] previousElement = this.elements;
 	int previousElementIndex = this.elementIndex;
 	this.elements = JavaElement.NO_ELEMENTS;
@@ -432,9 +497,9 @@ public void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeNa
 					parameterSignatures[0] = Signature.getTypeErasure(enclosingDeclaringTypeSignature);
 				}
 				
-				acceptBinaryMethod(type, selector, parameterPackageNames, parameterTypeNames, parameterSignatures, uniqueKey, isConstructor);
+				acceptBinaryMethod(type, selector, parameterPackageNames, parameterTypeNames, parameterSignatures, typeParameterNames, typeParameterBoundNames, uniqueKey, isConstructor);
 			} else {
-				acceptSourceMethod(type, selector, parameterPackageNames, parameterTypeNames, uniqueKey);
+				acceptSourceMethod(type, selector, parameterPackageNames, parameterTypeNames, parameterSignatures, typeParameterNames, typeParameterBoundNames, uniqueKey);
 			}
 		}
 	}
@@ -469,7 +534,16 @@ public void acceptPackage(char[] packageName) {
  *
  * fix for 1FWFT6Q
  */
-protected void acceptSourceMethod(IType type, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, char[] uniqueKey) {
+protected void acceptSourceMethod(
+		IType type,
+		char[] selector,
+		char[][] parameterPackageNames,
+		char[][] parameterTypeNames,
+		String[] parameterSignatures,
+		char[][] typeParameterNames,
+		char[][][] typeParameterBoundNames,
+		char[] uniqueKey) {
+	
 	String name = new String(selector);
 	IMethod[] methods = null;
 	try {
@@ -478,12 +552,15 @@ protected void acceptSourceMethod(IType type, char[] selector, char[][] paramete
 			if (methods[i].getElementName().equals(name)
 					&& methods[i].getParameterTypes().length == parameterTypeNames.length) {
 				IMethod method = methods[i];
-				if (uniqueKey != null)
-					method = new ResolvedSourceMethod(
+				if (uniqueKey != null) {
+					ResolvedSourceMethod resolvedMethod = new ResolvedSourceMethod(
 						(JavaElement)method.getParent(),
 						method.getElementName(),
 						method.getParameterTypes(),
 						new String(uniqueKey));
+					resolvedMethod.occurrenceCount = method.getOccurrenceCount();
+					method = resolvedMethod;
+				}
 				addElement(method);
 			}
 		}
@@ -530,6 +607,11 @@ protected void acceptSourceMethod(IType type, char[] selector, char[][] paramete
 				break;
 			}
 		}
+		
+		if (match && !areTypeParametersCompatible(method, typeParameterNames, typeParameterBoundNames)) {
+			match = false;
+		}
+		
 		if (match) {
 			addElement(method);
 			if(SelectionEngine.DEBUG){
@@ -666,7 +748,45 @@ protected void addElement(IJavaElement element) {
 	}
 	this.elements[++this.elementIndex] = element;
 }
-
+private boolean areTypeParametersCompatible(IMethod method, char[][] typeParameterNames, char[][][] typeParameterBoundNames) {
+	try {
+		ITypeParameter[] typeParameters = method.getTypeParameters();
+		int length1 = typeParameters == null ? 0 : typeParameters.length;
+		int length2 = typeParameterNames == null ? 0 : typeParameterNames.length;
+		if (length1 != length2) {
+			return false;
+		} else {
+			for (int j = 0; j < length1; j++) {
+				ITypeParameter typeParameter = typeParameters[j];
+				String typeParameterName = typeParameter.getElementName();
+				if (!typeParameterName.equals(new String(typeParameterNames[j]))) {
+					return false;
+				}
+				
+				String[] bounds = typeParameter.getBounds();
+				int boundCount = typeParameterBoundNames[j] == null ? 0 : typeParameterBoundNames[j].length;
+				
+				if (bounds.length != boundCount) {
+					return false;
+				} else {
+					for (int k = 0; k < boundCount; k++) {
+						String simpleName = Signature.getSimpleName(bounds[k]);
+						int index = simpleName.indexOf('<');
+						if (index != -1) {
+							simpleName = simpleName.substring(0, index);
+						}
+						if (!simpleName.equals(new String(typeParameterBoundNames[j][k]))) {
+							return false;
+						}
+					}
+				}
+			}
+		}
+	} catch (JavaModelException e) {
+		return false;
+	}
+	return true;
+}
 /*
  * findLocalElement() cannot find local variable
  */
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceType.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceType.java
index 1570245..a76d21b 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceType.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceType.java
@@ -823,7 +823,7 @@ public String[][] resolveType(String typeName, WorkingCopyOwner owner) throws Ja
 		public void acceptField(char[] declaringTypePackageName, char[] declaringTypeName, char[] fieldName, boolean isDeclaration, char[] uniqueKey, int start, int end) {
 			// ignore
 		}
-		public void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, String enclosingDeclaringTypeSignature, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, String[] parameterSignatures, boolean isConstructor, boolean isDeclaration, char[] uniqueKey, int start, int end) {
+		public void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, String enclosingDeclaringTypeSignature, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, String[] parameterSignatures, char[][] typeParameterNames, char[][][] typeParameterBoundNames, boolean isConstructor, boolean isDeclaration, char[] uniqueKey, int start, int end) {
 			// ignore
 		}
 		public void acceptPackage(char[] packageName){

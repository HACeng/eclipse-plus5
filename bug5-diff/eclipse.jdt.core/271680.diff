commit 5d36ded47d2c78d72658a7417caa4c325d7b6276
Author: David Audel <daudel>
Date:   Thu Apr 16 13:34:36 2009 +0000

    HEAD - bug 271680

84	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java
3	1	org.eclipse.jdt.core/buildnotes_jdt-core.html
4	1	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java
10	7	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredBlock.java
16	9	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredField.java
4	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredInitializer.java
5	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredLocalVariable.java
6	3	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredMethod.java
5	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredStatement.java
33	11	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredType.java
7	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredUnit.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java
index 8f2e73d..9555b29 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java
@@ -7675,4 +7675,88 @@ public void test124() {
 		expectedFullUnitToString,
 		expectedCompletionDietUnitToString, testName);
 }
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=271680
+public void test125() {
+	String s =
+		"public class Test {\n" +
+		"}\n";
+	
+	StringBuffer buf = new StringBuffer();
+	for (int i = 0; i < 1000; i++) {
+		buf.append("class AClass #\n");
+	}
+	s+= buf.toString();
+
+	// expectedDietUnitToString
+	String expectedDietUnitToString =
+		"public class Test {\n" +
+		"  public Test() {\n" +
+		"  }\n" +
+		"}\n";
+	buf = new StringBuffer();
+	int max = 256;
+	for (int i = 0; i < max; i++) {
+		String indent = "";
+		for (int j = 0; j < i; j++) {
+			indent+= "  ";
+		}
+		buf.append(indent).append("class AClass {\n");
+	}
+	for (int i = max - 1; i >= 0; i--) {
+		String indent = "";
+		for (int j = 0; j < i; j++) {
+			indent+= "  ";
+		}
+		buf.append(indent).append("  AClass() {\n");
+		buf.append(indent).append("  }\n");
+		buf.append(indent).append("}\n");
+	}
+	
+	expectedDietUnitToString += buf.toString();
+	
+	// expectedDietPlusBodyUnitToString
+	String expectedDietPlusBodyUnitToString =
+		"public class Test {\n" +
+		"  public Test() {\n" +
+		"    super();\n" + 
+		"  }\n" +
+		"}\n";
+	buf = new StringBuffer();
+	for (int i = 0; i < max; i++) {
+		String indent = "";
+		for (int j = 0; j < i; j++) {
+			indent+= "  ";
+		}
+		buf.append(indent).append("class AClass {\n");
+	}
+	for (int i = max - 1; i >= 0; i--) {
+		String indent = "";
+		for (int j = 0; j < i; j++) {
+			indent+= "  ";
+		}
+		buf.append(indent).append("  AClass() {\n");
+		buf.append(indent).append("    super();\n");
+		buf.append(indent).append("  }\n");
+		buf.append(indent).append("}\n");
+	}
+	expectedDietPlusBodyUnitToString += buf.toString();
+
+	String expectedDietPlusBodyPlusStatementsRecoveryUnitToString =
+		expectedDietPlusBodyUnitToString;
+
+	String expectedFullUnitToString =
+		expectedDietUnitToString;
+
+	String expectedCompletionDietUnitToString =
+		expectedDietUnitToString;
+
+	String testName = "test";
+	checkParse(
+		s.toCharArray(),
+		expectedDietUnitToString,
+		expectedDietPlusBodyUnitToString,
+		expectedDietPlusBodyPlusStatementsRecoveryUnitToString,
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
+}
 }
diff --git a/org.eclipse.jdt.core/buildnotes_jdt-core.html b/org.eclipse.jdt.core/buildnotes_jdt-core.html
index b6df7da..2e7e986 100644
--- a/org.eclipse.jdt.core/buildnotes_jdt-core.html
+++ b/org.eclipse.jdt.core/buildnotes_jdt-core.html
@@ -49,7 +49,9 @@ Eclipse SDK 3.5M7 - %date% - 3.5 MILESTONE 7
 <h2>What's new in this drop</h2>
 
 <h3>Problem Reports Fixed</h3>
-<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=251827">251827</a>
+<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=271680">271680</a>
+[compiler] Stack overflow pasting in Java editor
+<br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=251827">251827</a>
 [search] Search for type reference with wildcards finds references in package
 <br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=271284">271284</a>
 [search] AIOOBE in StringOperation.getCamelCaseMatchingRegions
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java
index 29d4129..48a9034 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java
@@ -19,6 +19,9 @@ package org.eclipse.jdt.internal.codeassist.complete;
  *	0  means completion behind the first character
  *  n  means completion behind the n-th character
  */
+
+import java.util.HashSet;
+
 import org.eclipse.jdt.internal.compiler.*;
 import org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants;
 import org.eclipse.jdt.internal.compiler.env.*;
@@ -1053,7 +1056,7 @@ private Statement buildMoreCompletionEnclosingContext(Statement statement) {
 					condition.sourceStart < recoveredLocalVariable.localDeclaration.sourceStart) {
 				this.currentElement.add(statement, 0);
 
-				statement = recoveredLocalVariable.updatedStatement();
+				statement = recoveredLocalVariable.updatedStatement(0, new HashSet());
 
 				// RecoveredLocalVariable must be removed from its parent because the IfStatement will be added instead
 				RecoveredBlock recoveredBlock =  (RecoveredBlock) recoveredLocalVariable.parent;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredBlock.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredBlock.java
index 64ba037..4bb4758 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredBlock.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredBlock.java
@@ -10,6 +10,9 @@
  *******************************************************************************/
 package org.eclipse.jdt.internal.compiler.parser;
 
+import java.util.HashSet;
+import java.util.Set;
+
 import org.eclipse.jdt.core.compiler.*;
 import org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;
 import org.eclipse.jdt.internal.compiler.ast.Argument;
@@ -276,7 +279,7 @@ public String toString(int tab) {
 /*
  * Rebuild a block from the nested structure which is in scope
  */
-public Block updatedBlock(){
+public Block updatedBlock(int depth, Set knownTypes){
 
 	// if block was not marked to be preserved or empty, then ignore it
 	if (!this.preserveContent || this.statementCount == 0) return null;
@@ -322,7 +325,7 @@ public Block updatedBlock(){
 
 	// only collect the non-null updated statements
 	for (int i = 0; i < this.statementCount; i++){
-		Statement updatedStatement = this.statements[i].updatedStatement();
+		Statement updatedStatement = this.statements[i].updatedStatement(depth, knownTypes);
 		if (updatedStatement != null){
 			updatedStatements[updatedCount++] = updatedStatement;
 
@@ -366,9 +369,9 @@ public Block updatedBlock(){
 /*
  * Rebuild a statement from the nested structure which is in scope
  */
-public Statement updatedStatement(){
+public Statement updatedStatement(int depth, Set knownTypes){
 
-	return updatedBlock();
+	return updatedBlock(depth, knownTypes);
 }
 /*
  * A closing brace got consumed, might have closed the current element,
@@ -407,12 +410,12 @@ public RecoveredElement updateOnOpeningBrace(int braceStart, int braceEnd){
  */
 public void updateParseTree(){
 
-	updatedBlock();
+	updatedBlock(0, new HashSet());
 }
 /*
  * Rebuild a flattened block from the nested structure which is in scope
  */
-public Statement updateStatement(){
+public Statement updateStatement(int depth, Set knownTypes){
 
 	// if block was closed or empty, then ignore it
 	if (this.blockDeclaration.sourceEnd != 0 || this.statementCount == 0) return null;
@@ -422,7 +425,7 @@ public Statement updateStatement(){
 
 	// only collect the non-null updated statements
 	for (int i = 0; i < this.statementCount; i++){
-		Statement updatedStatement = this.statements[i].updatedStatement();
+		Statement updatedStatement = this.statements[i].updatedStatement(depth, knownTypes);
 		if (updatedStatement != null){
 			updatedStatements[updatedCount++] = updatedStatement;
 		}
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredField.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredField.java
index 90ef92f..74e5e3a 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredField.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredField.java
@@ -13,6 +13,9 @@ package org.eclipse.jdt.internal.compiler.parser;
 /**
  * Internal field structure for parsing recovery
  */
+import java.util.HashSet;
+import java.util.Set;
+
 import org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration;
 import org.eclipse.jdt.internal.compiler.ast.Annotation;
 import org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference;
@@ -145,7 +148,7 @@ public String toString(int tab){
 	}
 	return buffer.toString();
 }
-public FieldDeclaration updatedFieldDeclaration(){
+public FieldDeclaration updatedFieldDeclaration(int depth, Set knownTypes){
 	/* update annotations */
 	if (this.modifiers != 0) {
 		this.fieldDeclaration.modifiers |= this.modifiers;
@@ -181,12 +184,14 @@ public FieldDeclaration updatedFieldDeclaration(){
 					typeDeclaration.bodyEnd = this.fieldDeclaration.declarationSourceEnd;
 				}
 				if (recoveredType.preserveContent){
-					TypeDeclaration anonymousType = recoveredType.updatedTypeDeclaration();
-					this.fieldDeclaration.initialization = anonymousType.allocation;
-					if(this.fieldDeclaration.declarationSourceEnd == 0) {
-						int end = anonymousType.declarationSourceEnd;
-						this.fieldDeclaration.declarationSourceEnd = end;
-						this.fieldDeclaration.declarationEnd = end;
+					TypeDeclaration anonymousType = recoveredType.updatedTypeDeclaration(depth + 1, knownTypes);
+					if (anonymousType != null) {
+						this.fieldDeclaration.initialization = anonymousType.allocation;
+						if(this.fieldDeclaration.declarationSourceEnd == 0) {
+							int end = anonymousType.declarationSourceEnd;
+							this.fieldDeclaration.declarationSourceEnd = end;
+							this.fieldDeclaration.declarationEnd = end;
+						}
 					}
 				}
 			}
@@ -200,7 +205,9 @@ public FieldDeclaration updatedFieldDeclaration(){
 					typeDeclaration.declarationSourceEnd = this.fieldDeclaration.declarationSourceEnd;
 					typeDeclaration.bodyEnd = this.fieldDeclaration.declarationSourceEnd;
 				}
-				recoveredType.updatedTypeDeclaration();
+				// if the enum is recovered then enum constants must be recovered too.
+				// depth is considered as the same as the depth of the enum
+				recoveredType.updatedTypeDeclaration(depth, knownTypes);
 			}
 		}
 	}
@@ -254,7 +261,7 @@ public RecoveredElement updateOnOpeningBrace(int braceStart, int braceEnd){
 	return this.parent.updateOnOpeningBrace(braceStart, braceEnd);
 }
 public void updateParseTree(){
-	updatedFieldDeclaration();
+	updatedFieldDeclaration(0, new HashSet());
 }
 /*
  * Update the declarationSourceEnd of the corresponding parse node
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredInitializer.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredInitializer.java
index 2573621..e68c024 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredInitializer.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredInitializer.java
@@ -10,6 +10,8 @@
  *******************************************************************************/
 package org.eclipse.jdt.internal.compiler.parser;
 
+import java.util.Set;
+
 import org.eclipse.jdt.core.compiler.*;
 import org.eclipse.jdt.internal.compiler.ast.ASTNode;
 import org.eclipse.jdt.internal.compiler.ast.Block;
@@ -256,10 +258,10 @@ public String toString(int tab) {
 	}
 	return result.toString();
 }
-public FieldDeclaration updatedFieldDeclaration(){
+public FieldDeclaration updatedFieldDeclaration(int depth, Set knownTypes){
 
 	if (this.initializerBody != null){
-		Block block = this.initializerBody.updatedBlock();
+		Block block = this.initializerBody.updatedBlock(depth, knownTypes);
 		if (block != null){
 			Initializer initializer = (Initializer) this.fieldDeclaration;
 			initializer.block = block;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredLocalVariable.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredLocalVariable.java
index 7f0e1af..ecffac9 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredLocalVariable.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredLocalVariable.java
@@ -13,6 +13,9 @@ package org.eclipse.jdt.internal.compiler.parser;
 /**
  * Internal local variable structure for parsing recovery
  */
+import java.util.HashSet;
+import java.util.Set;
+
 import org.eclipse.jdt.internal.compiler.ast.Annotation;
 import org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference;
 import org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference;
@@ -89,7 +92,7 @@ public int sourceEnd(){
 public String toString(int tab) {
 	return tabString(tab) + "Recovered local variable:\n" + this.localDeclaration.print(tab + 1, new StringBuffer(10)); //$NON-NLS-1$
 }
-public Statement updatedStatement(){
+public Statement updatedStatement(int depth, Set knownTypes){
 	/* update annotations */
 	if (this.modifiers != 0) {
 		this.localDeclaration.modifiers |= this.modifiers;
@@ -149,7 +152,7 @@ public RecoveredElement updateOnOpeningBrace(int braceStart, int braceEnd){
 	return this.parent.updateOnOpeningBrace(braceStart, braceEnd);
 }
 public void updateParseTree(){
-	updatedStatement();
+	updatedStatement(0, new HashSet());
 }
 /*
  * Update the declarationSourceEnd of the corresponding parse node
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredMethod.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredMethod.java
index ab40821..c87e9a2 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredMethod.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredMethod.java
@@ -10,6 +10,9 @@
  *******************************************************************************/
 package org.eclipse.jdt.internal.compiler.parser;
 
+import java.util.HashSet;
+import java.util.Set;
+
 import org.eclipse.jdt.core.compiler.*;
 import org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;
 import org.eclipse.jdt.internal.compiler.ast.Annotation;
@@ -329,7 +332,7 @@ public void updateBodyStart(int bodyStart){
 	this.foundOpeningBrace = true;
 	this.methodDeclaration.bodyStart = bodyStart;
 }
-public AbstractMethodDeclaration updatedMethodDeclaration(){
+public AbstractMethodDeclaration updatedMethodDeclaration(int depth, Set knownTypes){
 	/* update annotations */
 	if (this.modifiers != 0) {
 		this.methodDeclaration.modifiers |= this.modifiers;
@@ -356,7 +359,7 @@ public AbstractMethodDeclaration updatedMethodDeclaration(){
 	}
 
 	if (this.methodBody != null){
-		Block block = this.methodBody.updatedBlock();
+		Block block = this.methodBody.updatedBlock(depth, knownTypes);
 		if (block != null){
 			this.methodDeclaration.statements = block.statements;
 
@@ -564,7 +567,7 @@ public RecoveredElement updateOnOpeningBrace(int braceStart, int braceEnd){
 	return super.updateOnOpeningBrace(braceStart, braceEnd);
 }
 public void updateParseTree(){
-	updatedMethodDeclaration();
+	updatedMethodDeclaration(0, new HashSet());
 }
 /*
  * Update the declarationSourceEnd of the corresponding parse node
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredStatement.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredStatement.java
index 7163510..0b8dd14 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredStatement.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredStatement.java
@@ -13,6 +13,9 @@ package org.eclipse.jdt.internal.compiler.parser;
 /**
  * Internal statement structure for parsing recovery
  */
+import java.util.HashSet;
+import java.util.Set;
+
 import org.eclipse.jdt.internal.compiler.ast.ASTNode;
 import org.eclipse.jdt.internal.compiler.ast.Statement;
 
@@ -38,11 +41,11 @@ public int sourceEnd(){
 public String toString(int tab){
 	return tabString(tab) + "Recovered statement:\n" + this.statement.print(tab + 1, new StringBuffer(10)); //$NON-NLS-1$
 }
-public Statement updatedStatement(){
+public Statement updatedStatement(int depth, Set knownTypes){
 	return this.statement;
 }
 public void updateParseTree(){
-	updatedStatement();
+	updatedStatement(0, new HashSet());
 }
 /*
  * Update the declarationSourceEnd of the corresponding parse node
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredType.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredType.java
index 64c956c..20eada9 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredType.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredType.java
@@ -10,6 +10,9 @@
  *******************************************************************************/
 package org.eclipse.jdt.internal.compiler.parser;
 
+import java.util.HashSet;
+import java.util.Set;
+
 import org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;
 import org.eclipse.jdt.internal.compiler.ast.ASTNode;
 import org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration;
@@ -29,6 +32,8 @@ import org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants;
  */
 
 public class RecoveredType extends RecoveredStatement implements TerminalTokens {
+	public static final int MAX_TYPE_DEPTH = 256;
+	
 	public TypeDeclaration typeDeclaration;
 
 	public RecoveredAnnotation[] annotations;
@@ -439,15 +444,15 @@ public void updateBodyStart(int bodyStart){
 	this.foundOpeningBrace = true;
 	this.typeDeclaration.bodyStart = bodyStart;
 }
-public Statement updatedStatement(){
+public Statement updatedStatement(int depth, Set knownTypes){
 
 	// ignore closed anonymous type
 	if ((this.typeDeclaration.bits & ASTNode.IsAnonymousType) != 0 && !this.preserveContent){
 		return null;
 	}
 
-	TypeDeclaration updatedType = updatedTypeDeclaration();
-	if ((updatedType.bits & ASTNode.IsAnonymousType) != 0){
+	TypeDeclaration updatedType = updatedTypeDeclaration(depth + 1, knownTypes);
+	if (updatedType != null && (updatedType.bits & ASTNode.IsAnonymousType) != 0){
 		/* in presence of an anonymous type, we want the full allocation expression */
 		QualifiedAllocationExpression allocation = updatedType.allocation;
 
@@ -458,7 +463,12 @@ public Statement updatedStatement(){
 	}
 	return updatedType;
 }
-public TypeDeclaration updatedTypeDeclaration(){
+public TypeDeclaration updatedTypeDeclaration(int depth, Set knownTypes){
+	if (depth >= MAX_TYPE_DEPTH) return null;
+
+	if(knownTypes.contains(this.typeDeclaration)) return null;
+	knownTypes.add(this.typeDeclaration);
+	
 	int lastEnd = this.typeDeclaration.bodyStart;
 	/* update annotations */
 	if (this.modifiers != 0) {
@@ -497,12 +507,24 @@ public TypeDeclaration updatedTypeDeclaration(){
 			this.memberTypes[this.memberTypeCount - 1].typeDeclaration.declarationSourceEnd = bodyEndValue;
 			this.memberTypes[this.memberTypeCount - 1].typeDeclaration.bodyEnd =  bodyEndValue;
 		}
+		
+		int updatedCount = 0;
 		for (int i = 0; i < this.memberTypeCount; i++){
-			memberTypeDeclarations[existingCount + i] = this.memberTypes[i].updatedTypeDeclaration();
+			TypeDeclaration updatedTypeDeclaration = this.memberTypes[i].updatedTypeDeclaration(depth + 1, knownTypes);
+			if (updatedTypeDeclaration != null) {
+				memberTypeDeclarations[existingCount + (updatedCount++)] = updatedTypeDeclaration;
+			}
 		}
-		this.typeDeclaration.memberTypes = memberTypeDeclarations;
-		if(memberTypeDeclarations[memberTypeDeclarations.length - 1].declarationSourceEnd > lastEnd) {
-			lastEnd = memberTypeDeclarations[memberTypeDeclarations.length - 1].declarationSourceEnd;
+		if (updatedCount < this.memberTypeCount) {
+			int length = existingCount + updatedCount;
+			System.arraycopy(memberTypeDeclarations, 0, memberTypeDeclarations = new TypeDeclaration[length], 0, length);
+		}
+		
+		if (memberTypeDeclarations.length > 0) { 
+			this.typeDeclaration.memberTypes = memberTypeDeclarations;
+			if(memberTypeDeclarations[memberTypeDeclarations.length - 1].declarationSourceEnd > lastEnd) {
+				lastEnd = memberTypeDeclarations[memberTypeDeclarations.length - 1].declarationSourceEnd;
+			}
 		}
 	}
 	/* update fields */
@@ -519,7 +541,7 @@ public TypeDeclaration updatedTypeDeclaration(){
 			this.fields[this.fieldCount - 1].fieldDeclaration.declarationEnd = temp;
 		}
 		for (int i = 0; i < this.fieldCount; i++){
-			fieldDeclarations[existingCount + i] = this.fields[i].updatedFieldDeclaration();
+			fieldDeclarations[existingCount + i] = this.fields[i].updatedFieldDeclaration(depth, knownTypes);
 		}
 		this.typeDeclaration.fields = fieldDeclarations;
 		if(fieldDeclarations[fieldDeclarations.length - 1].declarationSourceEnd > lastEnd) {
@@ -546,7 +568,7 @@ public TypeDeclaration updatedTypeDeclaration(){
 			this.methods[this.methodCount - 1].methodDeclaration.bodyEnd = bodyEndValue;
 		}
 		for (int i = 0; i < this.methodCount; i++){
-			AbstractMethodDeclaration updatedMethod = this.methods[i].updatedMethodDeclaration();
+			AbstractMethodDeclaration updatedMethod = this.methods[i].updatedMethodDeclaration(depth, knownTypes);
 			if (updatedMethod.isConstructor()) hasRecoveredConstructor = true;
 			if (updatedMethod.isAbstract()) hasAbstractMethods = true;
 			methodDeclarations[existingCount + i] = updatedMethod;
@@ -731,7 +753,7 @@ public RecoveredElement updateOnOpeningBrace(int braceStart, int braceEnd){
 	return super.updateOnOpeningBrace(braceStart, braceEnd);
 }
 public void updateParseTree(){
-	updatedTypeDeclaration();
+	updatedTypeDeclaration(0, new HashSet());
 }
 /*
  * Update the declarationSourceEnd of the corresponding parse node
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredUnit.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredUnit.java
index bf60038..8365fc4 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredUnit.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredUnit.java
@@ -13,6 +13,9 @@ package org.eclipse.jdt.internal.compiler.parser;
 /**
  * Internal field structure for parsing recovery
  */
+import java.util.HashSet;
+import java.util.Set;
+
 import org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;
 import org.eclipse.jdt.internal.compiler.ast.ASTNode;
 import org.eclipse.jdt.internal.compiler.ast.Block;
@@ -250,11 +253,13 @@ public CompilationUnitDeclaration updatedCompilationUnitDeclaration(){
 			this.types[this.typeCount - 1].typeDeclaration.declarationSourceEnd = this.unitDeclaration.sourceEnd;
 			this.types[this.typeCount - 1].typeDeclaration.bodyEnd = this.unitDeclaration.sourceEnd;
 		}
+		
+		Set knownTypes = new HashSet();
 		int actualCount = existingCount;
 		for (int i = 0; i < this.typeCount; i++){
-			TypeDeclaration typeDecl = this.types[i].updatedTypeDeclaration();
+			TypeDeclaration typeDecl = this.types[i].updatedTypeDeclaration(0, knownTypes);
 			// filter out local types (12454)
-			if ((typeDecl.bits & ASTNode.IsLocalType) == 0){
+			if (typeDecl != null && (typeDecl.bits & ASTNode.IsLocalType) == 0){
 				typeDeclarations[actualCount++] = typeDecl;
 			}
 		}

commit 8d68e00ba785472efc36cd0f68660beb95ca71eb
Author: David Audel <daudel>
Date:   Wed Nov 24 11:27:45 2004 +0000

    bug 78931

70	0	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Resolve/src/ResolveQualifiedName1.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Resolve/src/ResolveQualifiedName2.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Resolve/src/ResolveQualifiedName3.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Resolve/src/ResolveQualifiedName4.java
10	0	org.eclipse.jdt.core.tests.model/workspace/Resolve/src/ResolveQualifiedName5.java
8	0	org.eclipse.jdt.core.tests.model/workspace/Resolve/src/pp/qq/XX.java
3	1	org.eclipse.jdt.core/buildnotes_jdt-core.html
42	24	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
7	4	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionNodeFound.java
2	2	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnArgumentName.java
1	1	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnExplicitConstructorCall.java
1	1	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnFieldReference.java
1	1	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnLocalName.java
2	2	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnMessageSend.java
2	2	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnParameterizedQualifiedTypeReference.java
3	3	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnQualifiedAllocationExpression.java
3	3	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnQualifiedNameReference.java
1	1	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnQualifiedSuperReference.java
2	2	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnQualifiedTypeReference.java
3	3	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnSingleNameReference.java
2	2	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnSingleTypeReference.java
1	1	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnSuperReference.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests.java
index 0abcfd4..062a605 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests.java
@@ -1413,4 +1413,74 @@ public void testLocalVariable() throws JavaModelException {
 		elements
 	);
 }
+/*
+ * https://bugs.eclipse.org/bugs/show_bug.cgi?id=78931
+ */
+public void testQualifiedName1() throws JavaModelException {
+	ICompilationUnit cu = getCompilationUnit("Resolve", "src", "", "ResolveQualifiedName1.java");
+	
+	IJavaElement[] elements = codeSelect(cu, "pp.qq.XX.YY.ZZ", "pp.qq.XX.YY.ZZ");
+	
+	assertElementsEqual(
+		"Unexpected elements",
+		"ZZ [in YY [in XX [in XX.java [in pp.qq [in src [in Resolve]]]]]]",
+		elements
+	);
+}
+/*
+ * https://bugs.eclipse.org/bugs/show_bug.cgi?id=78931
+ */
+public void testQualifiedName2() throws JavaModelException {
+	ICompilationUnit cu = getCompilationUnit("Resolve", "src", "", "ResolveQualifiedName2.java");
+	
+	IJavaElement[] elements = codeSelect(cu, "qq.XX.YY.ZZ", "qq.XX.YY.ZZ");
+	
+	assertElementsEqual(
+		"Unexpected elements",
+		"",
+		elements
+	);
+}
+/*
+ * https://bugs.eclipse.org/bugs/show_bug.cgi?id=78931
+ */
+public void testQualifiedName3() throws JavaModelException {
+	ICompilationUnit cu = getCompilationUnit("Resolve", "src", "", "ResolveQualifiedName3.java");
+	
+	IJavaElement[] elements = codeSelect(cu, "XX.YY.ZZ", "XX.YY.ZZ");
+	
+	assertElementsEqual(
+		"Unexpected elements",
+		"ZZ [in YY [in XX [in XX.java [in pp.qq [in src [in Resolve]]]]]]",
+		elements
+	);
+}
+/*
+ * https://bugs.eclipse.org/bugs/show_bug.cgi?id=78931
+ */
+public void testQualifiedName4() throws JavaModelException {
+	ICompilationUnit cu = getCompilationUnit("Resolve", "src", "", "ResolveQualifiedName4.java");
+	
+	IJavaElement[] elements = codeSelect(cu, "YY.ZZ", "YY.ZZ");
+	
+	assertElementsEqual(
+		"Unexpected elements",
+		"",
+		elements
+	);
+}
+/*
+ * https://bugs.eclipse.org/bugs/show_bug.cgi?id=78931
+ */
+public void testQualifiedName5() throws JavaModelException {
+	ICompilationUnit cu = getCompilationUnit("Resolve", "src", "", "ResolveQualifiedName5.java");
+	
+	IJavaElement[] elements = codeSelect(cu, "YY.ZZ", "YY.ZZ");
+	
+	assertElementsEqual(
+		"Unexpected elements",
+		"ZZ [in YY [in XX [in ResolveQualifiedName5 [in ResolveQualifiedName5.java [in <default> [in src [in Resolve]]]]]]]",
+		elements
+	);
+}
 }
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Resolve/src/ResolveQualifiedName1.java b/org.eclipse.jdt.core.tests.model/workspace/Resolve/src/ResolveQualifiedName1.java
new file mode 100644
index 0000000..8eec8b7
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Resolve/src/ResolveQualifiedName1.java
@@ -0,0 +1,3 @@
+public class ResolveQualifiedName1 {
+	pp.qq.XX.YY.ZZ zz;
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Resolve/src/ResolveQualifiedName2.java b/org.eclipse.jdt.core.tests.model/workspace/Resolve/src/ResolveQualifiedName2.java
new file mode 100644
index 0000000..50fac3f
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Resolve/src/ResolveQualifiedName2.java
@@ -0,0 +1,3 @@
+public class ResolveQualifiedName2 {
+	pp.qq.XX.YY.ZZ zz;
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Resolve/src/ResolveQualifiedName3.java b/org.eclipse.jdt.core.tests.model/workspace/Resolve/src/ResolveQualifiedName3.java
new file mode 100644
index 0000000..8a42209
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Resolve/src/ResolveQualifiedName3.java
@@ -0,0 +1,3 @@
+public class ResolveQualifiedName3 {
+	pp.qq.XX.YY.ZZ zz;
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Resolve/src/ResolveQualifiedName4.java b/org.eclipse.jdt.core.tests.model/workspace/Resolve/src/ResolveQualifiedName4.java
new file mode 100644
index 0000000..4c75dc1
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Resolve/src/ResolveQualifiedName4.java
@@ -0,0 +1,3 @@
+public class ResolveQualifiedName4 {
+	pp.qq.XX.YY.ZZ zz;
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Resolve/src/ResolveQualifiedName5.java b/org.eclipse.jdt.core.tests.model/workspace/Resolve/src/ResolveQualifiedName5.java
new file mode 100644
index 0000000..d3b8561
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Resolve/src/ResolveQualifiedName5.java
@@ -0,0 +1,10 @@
+public class ResolveQualifiedName5 {
+	public class XX {
+		public class YY {
+			public class ZZ {
+				
+			}
+		}
+		YY.ZZ zz;
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Resolve/src/pp/qq/XX.java b/org.eclipse.jdt.core.tests.model/workspace/Resolve/src/pp/qq/XX.java
new file mode 100644
index 0000000..5002bbb
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Resolve/src/pp/qq/XX.java
@@ -0,0 +1,8 @@
+package pp.qq;
+public class XX {
+	public class YY {
+		public class ZZ {
+			
+		}
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core/buildnotes_jdt-core.html b/org.eclipse.jdt.core/buildnotes_jdt-core.html
index ac168c4..ba0751c 100644
--- a/org.eclipse.jdt.core/buildnotes_jdt-core.html
+++ b/org.eclipse.jdt.core/buildnotes_jdt-core.html
@@ -57,7 +57,9 @@ What's new in this drop</h2>
 </ul>
 
 <h3>Problem Reports Fixed</h3>
-<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=79267">79267</a>
+<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=78931">78931</a>
+[select] cannot select qualified type name without the qualified package name
+<br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=79267">79267</a>
 [search] Refactoring of static generic member fails partially
 <br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=72258">72258</a>
 [model] Should be able to dynamicaly set the size of Java model cache
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
index 345850f..ba9247f 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
@@ -135,10 +135,7 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 	 */
 	public void acceptClass(char[] packageName, char[] className, int modifiers, AccessRestriction accessRestriction) {
 		if (CharOperation.equals(className, this.selectedIdentifier)) {
-			if (this.qualifiedSelection != null
-				&& !CharOperation.equals(
-					this.qualifiedSelection,
-					CharOperation.concat(packageName, className, '.'))) {
+			if(!checkQualification(null, packageName, className)) {
 				return;
 			}
 			
@@ -186,10 +183,7 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 		AccessRestriction accessRestriction) {
 
 		if (CharOperation.equals(interfaceName, this.selectedIdentifier)) {
-			if (this.qualifiedSelection != null
-				&& !CharOperation.equals(
-					this.qualifiedSelection,
-					CharOperation.concat(packageName, interfaceName, '.'))) {
+			if(!checkQualification(null, packageName, interfaceName)) {
 				return;
 			}
 			
@@ -266,7 +260,21 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 			this.acceptedInterfacesCount = 0;
 		}
 	}
-
+	private boolean checkQualification(ASTNode node, char[] qualifiedPackageName, char[] qualifiedSourceName) {
+		if (this.qualifiedSelection != null) {
+			if(node != null && node instanceof QualifiedTypeReference) {
+				char[] tokens = CharOperation.concatWith(((QualifiedTypeReference) node).tokens, '.');
+				if(CharOperation.equals(tokens, this.qualifiedSelection)) {
+					return true;
+				}
+			}
+			
+			char[] qualifiedTypeName = CharOperation.concat(qualifiedPackageName, qualifiedSourceName, '.');
+			return CharOperation.equals(qualifiedTypeName, this.qualifiedSelection) ||
+					CharOperation.equals(qualifiedSourceName, this.qualifiedSelection);
+		}
+		return true;
+	}
 	private boolean checkSelection(
 		char[] source,
 		int selectionStart,
@@ -517,7 +525,7 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 									System.out.println(e.binding.toString());
 								}
 								// if null then we found a problem in the selection node
-								selectFrom(e.binding, parsedUnit, e.isDeclaration);
+								selectFrom(e.node, e.binding, parsedUnit, e.isDeclaration);
 							}
 						}
 					}
@@ -537,13 +545,21 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 				this.requestor.acceptError(this.problem);
 			}
 		} catch (IndexOutOfBoundsException e) { // work-around internal failure - 1GEMF6D		
+			if(DEBUG) {
+				System.out.println("Exception caught by SelectionEngine:"); //$NON-NLS-1$
+				e.printStackTrace(System.out);
+			}
 		} catch (AbortCompilation e) { // ignore this exception for now since it typically means we cannot find java.lang.Object
+			if(DEBUG) {
+				System.out.println("Exception caught by SelectionEngine:"); //$NON-NLS-1$
+				e.printStackTrace(System.out);
+			}
 		} finally {
 			reset();
 		}
 	}
 
-	private void selectFrom(Binding binding, CompilationUnitDeclaration parsedUnit, boolean isDeclaration) {
+	private void selectFrom(ASTNode node, Binding binding, CompilationUnitDeclaration parsedUnit, boolean isDeclaration) {
 		if(binding instanceof TypeVariableBinding) {
 			TypeVariableBinding typeVariableBinding = (TypeVariableBinding) binding;
 			Binding enclosingElement = typeVariableBinding.declaringElement;
@@ -575,8 +591,10 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 			this.acceptedAnswer = true;
 		} else if (binding instanceof ReferenceBinding) {
 			ReferenceBinding typeBinding = (ReferenceBinding) binding;
-			if (this.qualifiedSelection != null
-				&& !CharOperation.equals(this.qualifiedSelection, typeBinding.readableName())) {
+			if(!checkQualification(
+					node,
+					typeBinding.qualifiedPackageName(),
+					typeBinding.qualifiedSourceName())) {
 				return;
 			}
 			if (typeBinding.isInterface()) {
@@ -682,11 +700,11 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 							this.acceptedAnswer = true;
 						} else {
 							// open on the type of the variable
-							selectFrom(((LocalVariableBinding) binding).type, parsedUnit, false);
+							selectFrom(null, ((LocalVariableBinding) binding).type, parsedUnit, false);
 						}
 					} else
 						if (binding instanceof ArrayBinding) {
-							selectFrom(((ArrayBinding) binding).leafComponentType, parsedUnit, false);
+							selectFrom(node, ((ArrayBinding) binding).leafComponentType, parsedUnit, false);
 							// open on the type of the array
 						} else
 							if (binding instanceof PackageBinding) {
@@ -713,10 +731,10 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 			public boolean visit(ConstructorDeclaration constructorDeclaration, ClassScope scope) {
 				if (constructorDeclaration.selector == assistIdentifier){
 					if (constructorDeclaration.binding != null) {
-						throw new SelectionNodeFound(constructorDeclaration.binding);
+						throw new SelectionNodeFound(constructorDeclaration, constructorDeclaration.binding);
 					} else {
 						if (constructorDeclaration.scope != null) {
-							throw new SelectionNodeFound(new MethodBinding(constructorDeclaration.modifiers, constructorDeclaration.selector, null, null, null, constructorDeclaration.scope.referenceType().binding));
+							throw new SelectionNodeFound(constructorDeclaration, new MethodBinding(constructorDeclaration.modifiers, constructorDeclaration.selector, null, null, null, constructorDeclaration.scope.referenceType().binding));
 						}
 					}
 				}
@@ -724,29 +742,29 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 			}
 			public boolean visit(FieldDeclaration fieldDeclaration, MethodScope scope) {
 				if (fieldDeclaration.name == assistIdentifier){
-					throw new SelectionNodeFound(fieldDeclaration.binding);
+					throw new SelectionNodeFound(fieldDeclaration, fieldDeclaration.binding);
 				}
 				return true;
 			}
 			public boolean visit(TypeDeclaration localTypeDeclaration, BlockScope scope) {
 				if (localTypeDeclaration.name == assistIdentifier) {
-					throw new SelectionNodeFound(localTypeDeclaration.binding);
+					throw new SelectionNodeFound(localTypeDeclaration, localTypeDeclaration.binding);
 				}
 				return true;
 			}
 			public boolean visit(TypeDeclaration memberTypeDeclaration, ClassScope scope) {
 				if (memberTypeDeclaration.name == assistIdentifier) {
-					throw new SelectionNodeFound(memberTypeDeclaration.binding);
+					throw new SelectionNodeFound(memberTypeDeclaration, memberTypeDeclaration.binding);
 				}
 				return true;
 			}
 			public boolean visit(MethodDeclaration methodDeclaration, ClassScope scope) {
 				if (methodDeclaration.selector == assistIdentifier){
 					if (methodDeclaration.binding != null) {
-						throw new SelectionNodeFound(methodDeclaration.binding);
+						throw new SelectionNodeFound(methodDeclaration, methodDeclaration.binding);
 					} else {
 						if (methodDeclaration.scope != null) {
-							throw new SelectionNodeFound(new MethodBinding(methodDeclaration.modifiers, methodDeclaration.selector, null, null, null, methodDeclaration.scope.referenceType().binding));
+							throw new SelectionNodeFound(methodDeclaration, new MethodBinding(methodDeclaration.modifiers, methodDeclaration.selector, null, null, null, methodDeclaration.scope.referenceType().binding));
 						}
 					}
 				}
@@ -754,7 +772,7 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 			}
 			public boolean visit(TypeDeclaration typeDeclaration, CompilationUnitScope scope) {
 				if (typeDeclaration.name == assistIdentifier) {
-					throw new SelectionNodeFound(typeDeclaration.binding);
+					throw new SelectionNodeFound(typeDeclaration, typeDeclaration.binding);
 				}
 				return true;
 			}
@@ -859,7 +877,7 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 									System.out.println(e.binding.toString());
 								}
 								// if null then we found a problem in the selection node
-								selectFrom(e.binding, parsedUnit, e.isDeclaration);
+								selectFrom(e.node, e.binding, parsedUnit, e.isDeclaration);
 							}
 						}
 					}
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionNodeFound.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionNodeFound.java
index 5b9d33f..e2b59f1 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionNodeFound.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionNodeFound.java
@@ -10,21 +10,24 @@
  *******************************************************************************/
 package org.eclipse.jdt.internal.codeassist.select;
 
+import org.eclipse.jdt.internal.compiler.ast.ASTNode;
 import org.eclipse.jdt.internal.compiler.lookup.*;
 
 public class SelectionNodeFound extends RuntimeException {
 	
+	public ASTNode node;
 	public Binding binding;
 	public boolean isDeclaration;
 	private static final long serialVersionUID = -7335444736618092295L; // backward compatible
 	
 public SelectionNodeFound() {
-	this(null, false); // we found a problem in the selection node
+	this(null, null, false); // we found a problem in the selection node
 }
-public SelectionNodeFound(Binding binding) {
-	this(binding, false);
+public SelectionNodeFound(ASTNode node, Binding binding) {
+	this(node, binding, false);
 }
-public SelectionNodeFound(Binding binding, boolean isDeclaration) {
+public SelectionNodeFound(ASTNode node, Binding binding, boolean isDeclaration) {
+	this.node = node;
 	this.binding = binding;
 	this.isDeclaration = isDeclaration;
 }
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnArgumentName.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnArgumentName.java
index 776cbcd..fb186fc 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnArgumentName.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnArgumentName.java
@@ -26,7 +26,7 @@ public class SelectionOnArgumentName extends Argument {
 	public void bind(MethodScope scope, TypeBinding typeBinding, boolean used) {
 
 		super.bind(scope, typeBinding, used);
-		throw new SelectionNodeFound(binding);
+		throw new SelectionNodeFound(this, binding);
 	}
 	
 	public StringBuffer print(int indent, StringBuffer output) {
@@ -45,6 +45,6 @@ public class SelectionOnArgumentName extends Argument {
 	public void resolve(BlockScope scope) {
 		
 		super.resolve(scope);
-		throw new SelectionNodeFound(binding);
+		throw new SelectionNodeFound(this, binding);
 	}
 }
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnExplicitConstructorCall.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnExplicitConstructorCall.java
index b4c49f7..912f86a 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnExplicitConstructorCall.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnExplicitConstructorCall.java
@@ -68,6 +68,6 @@ public class SelectionOnExplicitConstructorCall extends ExplicitConstructorCall
 					binding.problemId() == ProblemReasons.NotVisible))
 			throw new SelectionNodeFound();
 		else
-			throw new SelectionNodeFound(binding);
+			throw new SelectionNodeFound(this, binding);
 	}
 }
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnFieldReference.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnFieldReference.java
index cca165f..71eafd9 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnFieldReference.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnFieldReference.java
@@ -59,6 +59,6 @@ public class SelectionOnFieldReference extends FieldReference {
 					|| binding.problemId() == ProblemReasons.NonStaticReferenceInStaticContext))
 			throw new SelectionNodeFound();
 		else
-			throw new SelectionNodeFound(binding);
+			throw new SelectionNodeFound(this, binding);
 	}
 }
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnLocalName.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnLocalName.java
index 9c66483..27d38a5 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnLocalName.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnLocalName.java
@@ -23,7 +23,7 @@ public class SelectionOnLocalName extends LocalDeclaration{
 	public void resolve(BlockScope scope) {
 
 		super.resolve(scope);
-		throw new SelectionNodeFound(binding);
+		throw new SelectionNodeFound(this, binding);
 	}
 	
 	public StringBuffer printStatement(int tab, StringBuffer output) {
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnMessageSend.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnMessageSend.java
index f78846b..3dd6b0a 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnMessageSend.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnMessageSend.java
@@ -117,9 +117,9 @@ public class SelectionOnMessageSend extends MessageSend {
 			throw new SelectionNodeFound();
 		} else {
 			if(binding.isDefaultAbstract()) {
-				throw new SelectionNodeFound(findNonDefaultAbstractMethod(binding)); // 23594
+				throw new SelectionNodeFound(this, findNonDefaultAbstractMethod(binding)); // 23594
 			} else {
-				throw new SelectionNodeFound(binding);
+				throw new SelectionNodeFound(this, binding);
 			}
 		}
 	}
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnParameterizedQualifiedTypeReference.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnParameterizedQualifiedTypeReference.java
index 6a90dc9..17793b5 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnParameterizedQualifiedTypeReference.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnParameterizedQualifiedTypeReference.java
@@ -30,12 +30,12 @@ public class SelectionOnParameterizedQualifiedTypeReference extends Parameterize
 	
 	public TypeBinding resolveType(BlockScope scope, boolean checkBounds) {
 		super.resolveType(scope, checkBounds);
-		throw new SelectionNodeFound(this.resolvedType);
+		throw new SelectionNodeFound(this, this.resolvedType);
 	}
 	
 	public TypeBinding resolveType(ClassScope scope) {
 		super.resolveType(scope);
-		throw new SelectionNodeFound(this.resolvedType);
+		throw new SelectionNodeFound(this, this.resolvedType);
 	}
 	
 	public StringBuffer printExpression(int indent, StringBuffer output) {
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnQualifiedAllocationExpression.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnQualifiedAllocationExpression.java
index 6acaf09..00b8e60 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnQualifiedAllocationExpression.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnQualifiedAllocationExpression.java
@@ -66,7 +66,7 @@ public class SelectionOnQualifiedAllocationExpression extends QualifiedAllocatio
 					binding.problemId() == ProblemReasons.NotVisible))
 			throw new SelectionNodeFound();
 		if (anonymousType == null)
-			throw new SelectionNodeFound(binding);
+			throw new SelectionNodeFound(this, binding);
 	
 		// if selecting a type for an anonymous type creation, we have to
 		// find its target super constructor (if extending a class) or its target 
@@ -74,10 +74,10 @@ public class SelectionOnQualifiedAllocationExpression extends QualifiedAllocatio
 		if (anonymousType.binding.superInterfaces == NoSuperInterfaces) {
 			// find the constructor binding inside the super constructor call
 			ConstructorDeclaration constructor = (ConstructorDeclaration) anonymousType.declarationOf(binding.original());
-			throw new SelectionNodeFound(constructor.constructorCall.binding);
+			throw new SelectionNodeFound(constructor.constructorCall, constructor.constructorCall.binding);
 		} else {
 			// open on the only superinterface
-			throw new SelectionNodeFound(anonymousType.binding.superInterfaces[0]);
+			throw new SelectionNodeFound(anonymousType, anonymousType.binding.superInterfaces[0]);
 		}
 	}
 }
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnQualifiedNameReference.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnQualifiedNameReference.java
index 33d8682..2b74068 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnQualifiedNameReference.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnQualifiedNameReference.java
@@ -68,13 +68,13 @@ public TypeBinding resolveType(BlockScope scope) {
 					|| binding.problemId() == ProblemReasons.InheritedNameHidesEnclosingName
 					|| binding.problemId() == ProblemReasons.NonStaticReferenceInConstructorInvocation
 					|| binding.problemId() == ProblemReasons.NonStaticReferenceInStaticContext) {
-				throw new SelectionNodeFound(binding);
+				throw new SelectionNodeFound(this, binding);
 			}
 			scope.problemReporter().invalidField(this, (FieldBinding) binding);
 		} else if (binding instanceof ProblemReferenceBinding) {
 			// tolerate some error cases
 			if (binding.problemId() == ProblemReasons.NotVisible){
-				throw new SelectionNodeFound(binding);
+				throw new SelectionNodeFound(this, binding);
 			}
 			scope.problemReporter().invalidType(this, (TypeBinding) binding);
 		} else {
@@ -82,6 +82,6 @@ public TypeBinding resolveType(BlockScope scope) {
 		}
 		throw new SelectionNodeFound();
 	}
-	throw new SelectionNodeFound(binding);
+	throw new SelectionNodeFound(this, binding);
 }
 }
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnQualifiedSuperReference.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnQualifiedSuperReference.java
index 7f09d6b..8ad9b2d 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnQualifiedSuperReference.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnQualifiedSuperReference.java
@@ -54,6 +54,6 @@ public TypeBinding resolveType(BlockScope scope) {
 	if (binding == null || !binding.isValidBinding())
 		throw new SelectionNodeFound();
 	else
-		throw new SelectionNodeFound(binding);
+		throw new SelectionNodeFound(this, binding);
 }
 }
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnQualifiedTypeReference.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnQualifiedTypeReference.java
index d1d4137..70a3741 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnQualifiedTypeReference.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnQualifiedTypeReference.java
@@ -44,13 +44,13 @@ protected TypeBinding getTypeBinding(Scope scope) {
 	if (!binding.isValidBinding()) {
 			// tolerate some error cases
 			if (binding.problemId() == ProblemReasons.NotVisible){
-				throw new SelectionNodeFound(binding);
+				throw new SelectionNodeFound(this, binding);
 			}
 		scope.problemReporter().invalidType(this, (TypeBinding) binding);
 		throw new SelectionNodeFound();
 	}
 
-	throw new SelectionNodeFound(binding);
+	throw new SelectionNodeFound(this, binding);
 }
 public StringBuffer printExpression(int indent, StringBuffer output) {
 
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnSingleNameReference.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnSingleNameReference.java
index 2b92677..fb2105a 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnSingleNameReference.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnSingleNameReference.java
@@ -52,13 +52,13 @@ public TypeBinding resolveType(BlockScope scope) {
 					|| binding.problemId() == ProblemReasons.InheritedNameHidesEnclosingName
 					|| binding.problemId() == ProblemReasons.NonStaticReferenceInConstructorInvocation
 					|| binding.problemId() == ProblemReasons.NonStaticReferenceInStaticContext){
-				throw new SelectionNodeFound(binding);
+				throw new SelectionNodeFound(this, binding);
 			}
 			scope.problemReporter().invalidField(this, (FieldBinding) binding);
 		} else if (binding instanceof ProblemReferenceBinding) {
 			// tolerate some error cases
 			if (binding.problemId() == ProblemReasons.NotVisible){
-				throw new SelectionNodeFound(binding);
+				throw new SelectionNodeFound(this, binding);
 			}			
 			scope.problemReporter().invalidType(this, (TypeBinding) binding);
 		} else {
@@ -67,7 +67,7 @@ public TypeBinding resolveType(BlockScope scope) {
 		throw new SelectionNodeFound();
 	}
 
-	throw new SelectionNodeFound(binding);
+	throw new SelectionNodeFound(this, binding);
 }
 public StringBuffer printExpression(int indent, StringBuffer output) {
 	output.append("<SelectOnName:"); //$NON-NLS-1$
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnSingleTypeReference.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnSingleTypeReference.java
index 236b2cd..12584cd 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnSingleTypeReference.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnSingleTypeReference.java
@@ -43,7 +43,7 @@ protected TypeBinding getTypeBinding(Scope scope) {
 		scope.problemReporter().invalidType(this, (TypeBinding) binding);
 		throw new SelectionNodeFound();
 	}
-	throw new SelectionNodeFound(binding);
+	throw new SelectionNodeFound(this, binding);
 }
 public StringBuffer printExpression(int indent, StringBuffer output) {
 
@@ -58,6 +58,6 @@ public TypeBinding resolveTypeEnclosing(BlockScope scope, ReferenceBinding enclo
 					this.resolvedType.problemId() == ProblemReasons.NotVisible))
 		throw new SelectionNodeFound();
 	else
-		throw new SelectionNodeFound(this.resolvedType);
+		throw new SelectionNodeFound(this, this.resolvedType);
 }
 }
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnSuperReference.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnSuperReference.java
index e7a718c..7846529 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnSuperReference.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnSuperReference.java
@@ -53,6 +53,6 @@ public TypeBinding resolveType(BlockScope scope) {
 	if (binding == null || !binding.isValidBinding())
 		throw new SelectionNodeFound();
 	else
-		throw new SelectionNodeFound(binding);
+		throw new SelectionNodeFound(this, binding);
 }
 }

commit d8ffd58c7c4b7aeb0d38e216b7c221e9b8f78625
Author: Jerome Lanneluc <jeromel>
Date:   Thu Mar 8 10:39:48 2007 +0000

    HEAD - bug 148944

2	2	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaProjectTests.java
3	1	org.eclipse.jdt.core/buildnotes_jdt-core.html
46	0	org.eclipse.jdt.core/model/org/eclipse/jdt/core/IJarEntryResource.java
5	0	org.eclipse.jdt.core/model/org/eclipse/jdt/core/IPackageFragment.java
6	0	org.eclipse.jdt.core/model/org/eclipse/jdt/core/IPackageFragmentRoot.java
87	0	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarEntryDirectory.java
29	7	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarEntryFile.java
56	8	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragment.java
15	3	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaProjectTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaProjectTests.java
index 51a92ec..ce071a3 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaProjectTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaProjectTests.java
@@ -760,7 +760,7 @@ public void testPackageFragmentNonJavaResources6() throws JavaModelException {
 	Object[] resources = pkg.getNonJavaResources();
 	assertResourcesEqual(
 		"Unexpected resources", 
-		"x.y/Test.txt",
+		"x.y",
 		resources);
 }
 
@@ -862,7 +862,7 @@ public void testPackageFragmentRootNonJavaResources() throws JavaModelException
 	resources = root.getNonJavaResources();
 	assertResourceNamesEqual(
 		"unexpected non java resoures (test case 4)", 
-		"MANIFEST.MF",
+		"META-INF",
 		resources);
 }
 /**
diff --git a/org.eclipse.jdt.core/buildnotes_jdt-core.html b/org.eclipse.jdt.core/buildnotes_jdt-core.html
index da567bf..8c4abfb 100644
--- a/org.eclipse.jdt.core/buildnotes_jdt-core.html
+++ b/org.eclipse.jdt.core/buildnotes_jdt-core.html
@@ -53,7 +53,9 @@ Eclipse SDK 3.3M6 - %date%
 <h2>What's new in this drop</h2>
 
 <h3>Problem Reports Fixed</h3>
-<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=176190">176190</a>
+<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=148944">148944</a>
+need to render resource folders in JARs
+<br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=176190">176190</a>
 [assist] Inferred variable names are not good when the declared type is a base type
 <br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=176057">176057</a>
 IAE in ASTConverter for invalid source range
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IJarEntryResource.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IJarEntryResource.java
new file mode 100644
index 0000000..2e1bd17
--- /dev/null
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IJarEntryResource.java
@@ -0,0 +1,46 @@
+/*******************************************************************************
+ * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.jdt.core;
+
+import org.eclipse.core.resources.IStorage;
+
+/**
+ * A jar entry corresponding to a non-Java resource in an archive {@link IPackageFragment}.
+ * 
+ * @since 3.3
+ */
+public interface IJarEntryResource extends IStorage {
+	
+	/**
+	 * Returns the list of children of this jar entry resource.
+	 * Returns an empty array if this jar entry is a file, or if this jar entry is a directory and it has no children.
+	 * 
+	 * @return the children of this jar entry resource
+	 */
+	IJarEntryResource[] getChildren();
+	
+	/**
+	 * Returns the parent of this jar entry resource. This is either an {@link IJarEntryResource}, an {@link IPackageFragment}
+	 * or an {@link IPackageFragmentRoot}.
+	 * 
+	 * @return the parent of this jar entry resource
+	 */
+	Object getParent();
+	
+	/**
+	 * Returns <code>true</code> if this jar entry represents a file.
+	 * Returns <code>false</code> if it is a directory.
+	 * 
+	 * @return whether this jar entry is a file
+	 */
+	boolean isFile();
+
+}
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IPackageFragment.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IPackageFragment.java
index 1a07d66..742acc4 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IPackageFragment.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IPackageFragment.java
@@ -165,6 +165,11 @@ public interface IPackageFragment extends IParent, IJavaElement, IOpenable, ISou
 	 * inclusion/exclusion patterns on the corresponding source classpath entry
 	 * are considered non-Java resources and will appear in the result
 	 * (possibly in a folder).
+	 * </p><p>
+	 * Since 3.3, if this package fragment is inside an archive, the non-Java resources
+	 * are a tree of {@link IJarEntryResource}s. One can navigate this tree using
+	 * the {@link IJarEntryResource#getChildren()} and 
+	 * {@link IJarEntryResource#getParent()} methods.
 	 * </p>
 	 * 
 	 * @exception JavaModelException if this element does not exist or if an
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IPackageFragmentRoot.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IPackageFragmentRoot.java
index 844d54e..4785283 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IPackageFragmentRoot.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IPackageFragmentRoot.java
@@ -270,7 +270,13 @@ public interface IPackageFragmentRoot
 	 * entry are considered non-Java resources and will appear in the result
 	 * (possibly in a folder). Thus when a nested source folder is excluded, it will appear
 	 * in the non-Java resources of the outer folder.
+	 * </p><p>
+	 * Since 3.3, if this package fragment root is an archive, the non-Java resources
+	 * are a tree of {@link IJarEntryResource}s. One can navigate this tree using
+	 * the {@link IJarEntryResource#getChildren()} and 
+	 * {@link IJarEntryResource#getParent()} methods.
 	 * </p>
+	 * 
 	 * @return an array of non-Java resources (<code>IFile</code>s, 
 	 *              <code>IFolder</code>s, or <code>IStorage</code>s if the
 	 *              package fragment root is in archive) contained in this package 
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarEntryDirectory.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarEntryDirectory.java
new file mode 100644
index 0000000..53e5cb4
--- /dev/null
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarEntryDirectory.java
@@ -0,0 +1,87 @@
+/*******************************************************************************
+ * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.jdt.internal.core;
+
+import java.io.ByteArrayInputStream;
+import java.io.InputStream;
+
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IPath;
+import org.eclipse.core.runtime.PlatformObject;
+import org.eclipse.jdt.core.IJarEntryResource;
+
+public class JarEntryDirectory extends PlatformObject implements IJarEntryResource {
+	private Object parent;
+	private IPath path;
+	private IJarEntryResource[] children;
+	
+	public JarEntryDirectory(IPath parentRelativePath) {
+		this.path = parentRelativePath;
+	}
+	
+	public JarEntryDirectory clone(Object newParent) {
+		JarEntryDirectory dir = new JarEntryDirectory(this.path);
+		dir.setParent(newParent);
+		int length = this.children.length;
+		if (length > 0) {
+			IJarEntryResource[] newChildren = new IJarEntryResource[length];
+			for (int i = 0; i < length; i++) {
+				IJarEntryResource child = this.children[i];
+				if (child instanceof JarEntryFile)
+					newChildren[i] = ((JarEntryFile) child).clone(dir);
+				else
+					newChildren[i] = ((JarEntryDirectory) child).clone(dir);
+			}
+			dir.setChildren(newChildren);
+		}
+		return dir;
+	}
+	
+	public IJarEntryResource[] getChildren() {
+		return this.children;
+	}
+
+	public InputStream getContents() throws CoreException {
+		return new ByteArrayInputStream(new byte[0]);
+	}
+
+	public IPath getFullPath() {
+		return this.path;
+	}
+
+	public String getName() {
+		return this.path.lastSegment();
+	}
+
+	public Object getParent() {
+		return this.parent;
+	}
+	
+	public boolean isFile() {
+		return false;
+	}
+
+	public boolean isReadOnly() {
+		return true;
+	}
+
+	public void setChildren(IJarEntryResource[] children) {
+		this.children = children;
+	}
+
+	public void setParent(Object parent) {
+		this.parent = parent;
+	}
+	
+	public String toString() {
+		return "JarEntryDirectory["+this.path+"]"; //$NON-NLS-1$ //$NON-NLS-2$ 
+	}
+}
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarEntryFile.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarEntryFile.java
index 5d63050..dbb7142 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarEntryFile.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarEntryFile.java
@@ -19,24 +19,34 @@ import org.eclipse.core.resources.IStorage;
 import org.eclipse.core.runtime.CoreException;
 import org.eclipse.core.runtime.IPath;
 import org.eclipse.core.runtime.PlatformObject;
+import org.eclipse.jdt.core.IJarEntryResource;
 import org.eclipse.jdt.core.IJavaModelStatusConstants;
 import org.eclipse.jdt.core.JavaModelException;
 
 /**
- * A jar entry that represents a non-java resource found in a JAR.
+ * A jar entry that represents a non-java file found in a JAR.
  *
  * @see IStorage
  */
-public class JarEntryFile extends PlatformObject implements IStorage {
+public class JarEntryFile extends PlatformObject implements IJarEntryResource {
+	private static final IJarEntryResource[] NO_CHILDREN = new IJarEntryResource[0];
+	private Object parent;
 	private String entryName;
 	private String zipName;
 	private IPath path;
 	
-	public JarEntryFile(String entryName, String zipName, IPath parentRelativePath) {
-		this.entryName = entryName;
-		this.zipName = zipName;
-		this.path = parentRelativePath;
-	}
+public JarEntryFile(String entryName, String zipName, IPath parentRelativePath) {
+	this.entryName = entryName;
+	this.zipName = zipName;
+	this.path = parentRelativePath;
+}
+
+public JarEntryFile clone(Object newParent) {
+	JarEntryFile file = new JarEntryFile(this.entryName, this.zipName, this.path);
+	file.setParent(newParent);
+	return file;
+}
+	
 public InputStream getContents() throws CoreException {
 
 	try {
@@ -53,6 +63,9 @@ public InputStream getContents() throws CoreException {
 		throw new JavaModelException(e, IJavaModelStatusConstants.IO_EXCEPTION);
 	}
 }
+public IJarEntryResource[] getChildren() {
+	return NO_CHILDREN;
+}
 /**
  * @see IStorage#getFullPath
  */
@@ -65,12 +78,21 @@ public IPath getFullPath() {
 public String getName() {
 	return this.path.lastSegment();
 }
+public Object getParent() {
+	return this.parent;
+}
+public boolean isFile() {
+	return true;
+}
 /**
  * @see IStorage#isReadOnly()
  */
 public boolean isReadOnly() {
 	return true;
 }
+public void setParent(Object parent) {
+	this.parent = parent;
+}
 /**
  * @see IStorage#isReadOnly()
  */
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragment.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragment.java
index 10141ad..d6ad672 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragment.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragment.java
@@ -13,6 +13,7 @@ package org.eclipse.jdt.internal.core;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Iterator;
+import java.util.Map;
 
 import org.eclipse.core.resources.IResource;
 import org.eclipse.core.runtime.IPath;
@@ -20,6 +21,7 @@ import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.Path;
 import org.eclipse.jdt.core.IClassFile;
 import org.eclipse.jdt.core.ICompilationUnit;
+import org.eclipse.jdt.core.IJarEntryResource;
 import org.eclipse.jdt.core.IJavaElement;
 import org.eclipse.jdt.core.IJavaModelStatusConstants;
 import org.eclipse.jdt.core.JavaModelException;
@@ -61,7 +63,7 @@ protected boolean computeChildren(OpenableElementInfo info, ArrayList entryNames
 /**
  * Compute all the non-java resources according to the entry name found in the jar file.
  */
-/* package */ void computeNonJavaResources(String[] resNames, JarPackageFragmentInfo info, String zipName) {
+/* package */ void computeNonJavaResources(String[] resNames, JarPackageFragment pkg, JarPackageFragmentInfo info, String zipName) {
 	if (resNames == null) {
 		info.setNonJavaResources(null);
 		return;
@@ -70,19 +72,65 @@ protected boolean computeChildren(OpenableElementInfo info, ArrayList entryNames
 	if (max == 0) {
 	    info.setNonJavaResources(JavaElementInfo.NO_NON_JAVA_RESOURCES);
 	} else {
-		Object[] res = new Object[max];
-		int index = 0;
+		HashMap jarEntries = new HashMap(); // map from IPath to IJarEntryResource
+		HashMap childrenMap = new HashMap(); // map from IPath to ArrayList<IJarEntryResource>
+		ArrayList topJarEntries = new ArrayList();
 		for (int i = 0; i < max; i++) {
 			String resName = resNames[i];
 			// consider that a .java file is not a non-java resource (see bug 12246 Packages view shows .class and .java files when JAR has source)
 			if (!Util.isJavaLikeFileName(resName)) {
-				IPath parentRelativePath = new Path(resName).removeFirstSegments(this.names.length);
-				res[index++] = new JarEntryFile(resName, zipName, parentRelativePath);
+				IPath childPath = new Path(resName).removeFirstSegments(this.names.length);
+				JarEntryFile file = new JarEntryFile(resName, zipName, childPath);
+				jarEntries.put(childPath, file);
+				if (childPath.segmentCount() == 1) {
+					file.setParent(pkg);
+					topJarEntries.add(file);
+				} else {
+					IPath parentPath = childPath.removeLastSegments(1);
+					while (parentPath.segmentCount() > 0) {
+						ArrayList parentChildren = (ArrayList) childrenMap.get(parentPath);
+						if (parentChildren == null) {
+							Object dir = new JarEntryDirectory(parentPath);
+							jarEntries.put(parentPath, dir);
+							childrenMap.put(parentPath, parentChildren = new ArrayList());
+							parentChildren.add(childPath);
+							if (parentPath.segmentCount() == 1) {
+								topJarEntries.add(dir);
+								break;
+							}
+							childPath = parentPath;
+							parentPath = childPath.removeLastSegments(1);
+						} else {
+							parentChildren.add(childPath);
+							break; // all parents are already registered
+						}
+					}
+				}
 			}
-		} 
-		if (index != max) {
-			System.arraycopy(res, 0, res = new Object[index], 0, index);
 		}
+		Iterator entries = childrenMap.entrySet().iterator();
+		while (entries.hasNext()) {
+			Map.Entry entry = (Map.Entry) entries.next();
+			IPath entryPath = (IPath) entry.getKey();
+			ArrayList entryValue =  (ArrayList) entry.getValue();
+			JarEntryDirectory jarEntryDirectory = (JarEntryDirectory) jarEntries.get(entryPath);
+			int size = entryValue.size();
+			IJarEntryResource[] children = new IJarEntryResource[size];
+			for (int i = 0; i < size; i++) {
+				Object child = jarEntries.get(entryValue.get(i));
+				if (child instanceof JarEntryFile) {
+					((JarEntryFile) child).setParent(jarEntryDirectory);
+				} else {
+					((JarEntryDirectory) child).setParent(jarEntryDirectory);
+				}
+				children[i] = (IJarEntryResource) child;
+			}
+			jarEntryDirectory.setChildren(children);
+			if (entryPath.segmentCount() == 1) {
+				jarEntryDirectory.setParent(pkg);
+			}
+		}
+		Object[] res = topJarEntries.toArray(new Object[topJarEntries.size()]);
 		info.setNonJavaResources(res);
 	}
 }
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java
index 7a5e2c4..4203076 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java
@@ -98,11 +98,11 @@ public class JarPackageFragmentRoot extends PackageFragmentRoot {
 				JarPackageFragmentInfo fragInfo= new JarPackageFragmentInfo();
 				int resLength= entries[NON_JAVA].size();
 				if (resLength == 0) {
-					packFrag.computeNonJavaResources(CharOperation.NO_STRINGS, fragInfo, jar.getName());
+					packFrag.computeNonJavaResources(CharOperation.NO_STRINGS, packFrag, fragInfo, jar.getName());
 				} else {
 					String[] resNames= new String[resLength];
 					entries[NON_JAVA].toArray(resNames);
-					packFrag.computeNonJavaResources(resNames, fragInfo, jar.getName());
+					packFrag.computeNonJavaResources(resNames, packFrag, fragInfo, jar.getName());
 				}
 				packFrag.computeChildren(fragInfo, entries[JAVA]);
 				newElements.put(packFrag, fragInfo);
@@ -171,7 +171,19 @@ public class JarPackageFragmentRoot extends PackageFragmentRoot {
 	 */
 	public Object[] getNonJavaResources() throws JavaModelException {
 		// We want to show non java resources of the default package at the root (see PR #1G58NB8)
-		return ((JarPackageFragment) getPackageFragment(CharOperation.NO_STRINGS)).storedNonJavaResources();
+		Object[] defaultPkgResources =  ((JarPackageFragment) getPackageFragment(CharOperation.NO_STRINGS)).storedNonJavaResources();
+		int length = defaultPkgResources.length;
+		if (length == 0)
+			return defaultPkgResources;
+		Object[] nonJavaResources = new Object[length];
+		for (int i = 0; i < length; i++) {
+			Object nonJavaResource = defaultPkgResources[i];
+			if (nonJavaResource instanceof JarEntryFile)
+				nonJavaResources[i] = ((JarEntryFile) nonJavaResource).clone(this);
+			else
+				nonJavaResources[i] = ((JarEntryDirectory) nonJavaResource).clone(this);
+		}
+		return nonJavaResources;
 	}
 	public PackageFragment getPackageFragment(String[] pkgName) {
 		return new JarPackageFragment(this, pkgName);
commit 7a3173e8e3f85eb1ac6362e9d980aeb95a2e58f6
Author: Jerome Lanneluc <jeromel>
Date:   Thu Mar 8 11:44:53 2007 +0000

    HEAD - bug 148944

8	1	org.eclipse.jdt.core/model/org/eclipse/jdt/core/IJarEntryResource.java
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IJarEntryResource.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IJarEntryResource.java
index 2e1bd17..efde53f 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IJarEntryResource.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IJarEntryResource.java
@@ -13,7 +13,14 @@ package org.eclipse.jdt.core;
 import org.eclipse.core.resources.IStorage;
 
 /**
- * A jar entry corresponding to a non-Java resource in an archive {@link IPackageFragment}.
+ * A jar entry corresponding to a non-Java resource in an archive {@link IPackageFragment} or {@link IPackageFragmentRoot}.
+ * <p>
+ * One can navigate the non-Java resource tree using the {@link #getChildren()} and {@link #getParent()} methods.
+ * Jar entry resources are either files ({@link #isFile()} returns true) or directories ({@link #isFile()} retunrs false).
+ * Files don't have any children and the returned array is always empty.
+ * </p><p>
+ * Jar entry resources that refer to the same element are guaranteed to be equal, but not necessarily identical.
+ * <p>
  * 
  * @since 3.3
  */
commit adda76dd8bf9eeacb64e3f4f77b7d994b5e9cb4d
Author: Jerome Lanneluc <jeromel>
Date:   Thu Mar 8 11:48:29 2007 +0000

    HEAD - bug 148944

1	1	org.eclipse.jdt.core/model/org/eclipse/jdt/core/IJarEntryResource.java
12	0	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarEntryDirectory.java
11	0	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarEntryFile.java
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IJarEntryResource.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IJarEntryResource.java
index efde53f..1c4844c 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IJarEntryResource.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IJarEntryResource.java
@@ -16,7 +16,7 @@ import org.eclipse.core.resources.IStorage;
  * A jar entry corresponding to a non-Java resource in an archive {@link IPackageFragment} or {@link IPackageFragmentRoot}.
  * <p>
  * One can navigate the non-Java resource tree using the {@link #getChildren()} and {@link #getParent()} methods.
- * Jar entry resources are either files ({@link #isFile()} returns true) or directories ({@link #isFile()} retunrs false).
+ * Jar entry resources are either files ({@link #isFile()} returns true) or directories ({@link #isFile()} returns false).
  * Files don't have any children and the returned array is always empty.
  * </p><p>
  * Jar entry resources that refer to the same element are guaranteed to be equal, but not necessarily identical.
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarEntryDirectory.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarEntryDirectory.java
index 53e5cb4..1cd9472 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarEntryDirectory.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarEntryDirectory.java
@@ -17,6 +17,7 @@ import org.eclipse.core.runtime.CoreException;
 import org.eclipse.core.runtime.IPath;
 import org.eclipse.core.runtime.PlatformObject;
 import org.eclipse.jdt.core.IJarEntryResource;
+import org.eclipse.jdt.internal.core.util.Util;
 
 public class JarEntryDirectory extends PlatformObject implements IJarEntryResource {
 	private Object parent;
@@ -45,6 +46,13 @@ public class JarEntryDirectory extends PlatformObject implements IJarEntryResour
 		return dir;
 	}
 	
+	public boolean equals(Object obj) {
+		if (! (obj instanceof JarEntryDirectory))
+			return false;
+		JarEntryDirectory other = (JarEntryDirectory) obj;
+		return this.parent.equals(other.parent) && this.path.equals(other.path);
+	}
+
 	public IJarEntryResource[] getChildren() {
 		return this.children;
 	}
@@ -65,6 +73,10 @@ public class JarEntryDirectory extends PlatformObject implements IJarEntryResour
 		return this.parent;
 	}
 	
+	public int hashCode() {
+		return Util.combineHashCodes(this.path.hashCode(), this.parent.hashCode());
+	}
+	
 	public boolean isFile() {
 		return false;
 	}
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarEntryFile.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarEntryFile.java
index dbb7142..8900f8b 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarEntryFile.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarEntryFile.java
@@ -22,6 +22,7 @@ import org.eclipse.core.runtime.PlatformObject;
 import org.eclipse.jdt.core.IJarEntryResource;
 import org.eclipse.jdt.core.IJavaModelStatusConstants;
 import org.eclipse.jdt.core.JavaModelException;
+import org.eclipse.jdt.internal.core.util.Util;
 
 /**
  * A jar entry that represents a non-java file found in a JAR.
@@ -46,6 +47,13 @@ public JarEntryFile clone(Object newParent) {
 	file.setParent(newParent);
 	return file;
 }
+
+public boolean equals(Object obj) {
+	if (! (obj instanceof JarEntryFile))
+		return false;
+	JarEntryFile other = (JarEntryFile) obj;
+	return this.parent.equals(other.parent) && this.path.equals(other.path);
+}
 	
 public InputStream getContents() throws CoreException {
 
@@ -81,6 +89,9 @@ public String getName() {
 public Object getParent() {
 	return this.parent;
 }
+public int hashCode() {
+	return Util.combineHashCodes(this.path.hashCode(), this.parent.hashCode());
+}
 public boolean isFile() {
 	return true;
 }
commit bad954afb2676759183aeb6e67aac62fcd10e156
Author: Jerome Lanneluc <jeromel>
Date:   Thu Mar 8 14:58:08 2007 +0000

    HEAD - bug 148944

52	1	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java
43	38	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaProjectTests.java
8	47	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarEntryDirectory.java
43	79	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarEntryFile.java
88	0	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarEntryResource.java
7	10	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragment.java
2	5	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java
index 853bd09..16b333a 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java
@@ -318,7 +318,6 @@ public abstract class AbstractJavaModelTests extends SuiteOfTestCases {
 		assertElementsEqual(message, expected, elements);
 	}
 	
-	
 	protected void assertResourcesEqual(String message, String expected, Object[] resources) {
 		sortResources(resources);
 		StringBuffer buffer = new StringBuffer();
@@ -342,6 +341,7 @@ public abstract class AbstractJavaModelTests extends SuiteOfTestCases {
 			buffer.toString()
 		);
 	}
+	
 	protected void assertResourceNamesEqual(String message, String expected, Object[] resources) {
 		sortResources(resources);
 		StringBuffer buffer = new StringBuffer();
@@ -365,6 +365,57 @@ public abstract class AbstractJavaModelTests extends SuiteOfTestCases {
 			buffer.toString()
 		);
 	}
+	
+	protected void assertResourceTreeEquals(String message, String expected, Object[] resources) throws CoreException {
+		sortResources(resources);
+		StringBuffer buffer = new StringBuffer();
+		for (int i = 0, length = resources.length; i < length; i++) {
+			printResourceTree(resources[i], buffer, 0);
+			if (i != length-1) buffer.append("\n");
+		}
+		if (!expected.equals(buffer.toString())) {
+			System.out.print(org.eclipse.jdt.core.tests.util.Util.displayString(buffer.toString(), 2));
+			System.out.println(this.endChar);
+		}
+		assertEquals(
+			message,
+			expected,
+			buffer.toString()
+		);
+	}
+	
+	private void printResourceTree(Object resource, StringBuffer buffer, int indent) throws CoreException {
+		for (int i = 0; i < indent; i++) 
+			buffer.append("  ");
+		if (resource instanceof IResource) {
+			buffer.append(((IResource) resource).getName());
+			if (resource instanceof IContainer) {
+				IResource[] children = ((IContainer) resource).members();
+				int length = children.length;
+				if (length > 0) buffer.append("\n");
+				for (int j = 0; j < length; j++) {
+					printResourceTree(children[j], buffer, indent+1);
+					if (j != length-1) buffer.append("\n");
+				}
+			}
+		} else if (resource instanceof IJarEntryResource) {
+			IJarEntryResource jarEntryResource = (IJarEntryResource) resource;
+			buffer.append(jarEntryResource.getName());
+			if (!jarEntryResource.isFile()) {
+				IJarEntryResource[] children = jarEntryResource.getChildren();
+				int length = children.length;
+				if (length > 0) buffer.append("\n");
+				for (int j = 0; j < length; j++) {
+					printResourceTree(children[j], buffer, indent+1);
+					if (j != length-1) buffer.append("\n");
+				}
+			}
+		} else if (resource == null) {
+			buffer.append("<null>");
+		}
+		
+	}
+
 	protected void assertElementEquals(String message, String expected, IJavaElement element) {
 		String actual = element == null ? "<null>" : ((JavaElement) element).toStringWithAncestors(false/*don't show key*/);
 		if (!expected.equals(actual)) {
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaProjectTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaProjectTests.java
index ce071a3..0d8fef37 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaProjectTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaProjectTests.java
@@ -689,24 +689,24 @@ public void testPackageFragmentIsStructureKnown2() throws CoreException {
 /*
  * Ensure that the non-Java resources of a source package are correct.
  */
-public void testPackageFragmentNonJavaResources1() throws JavaModelException {
+public void testPackageFragmentNonJavaResources1() throws CoreException {
 	// regular source package with resources
 	IPackageFragment pkg = getPackageFragment("JavaProjectTests", "", "x");
 	Object[] resources = pkg.getNonJavaResources();
-	assertResourcesEqual(
+	assertResourceTreeEquals(
 		"Unexpected resources", 
-		"/JavaProjectTests/x/readme.txt\n" + 
-		"/JavaProjectTests/x/readme2.txt",
+		"readme.txt\n" + 
+		"readme2.txt",
 		resources);
 }
 
 /*
  * Ensure that the non-Java resources of a source package without resources are correct.
  */
-public void testPackageFragmentNonJavaResources2() throws JavaModelException {	
+public void testPackageFragmentNonJavaResources2() throws CoreException {	
 	IPackageFragment pkg = getPackageFragment("JavaProjectTests", "", "x.y");
 	Object[] resources = pkg.getNonJavaResources();
-	assertResourcesEqual(
+	assertResourceTreeEquals(
 		"Unexpected resources", 
 		"",
 		resources);
@@ -715,10 +715,10 @@ public void testPackageFragmentNonJavaResources2() throws JavaModelException {
 /*
  * Ensure that the non-Java resources of the default package are correct.
  */
-public void testPackageFragmentNonJavaResources3() throws JavaModelException {	
+public void testPackageFragmentNonJavaResources3() throws CoreException {	
 	IPackageFragment pkg = getPackageFragment("JavaProjectTests", "", "");
 	Object[] resources = pkg.getNonJavaResources();
-	assertResourcesEqual(
+	assertResourceTreeEquals(
 		"Unexpected resources", 
 		"",
 		resources);
@@ -727,10 +727,10 @@ public void testPackageFragmentNonJavaResources3() throws JavaModelException {
 /*
  * Ensure that the non-Java resources of a zip package without resources are correct.
  */
-public void testPackageFragmentNonJavaResources4() throws JavaModelException {	
+public void testPackageFragmentNonJavaResources4() throws CoreException {	
 	IPackageFragment pkg = getPackageFragment("JavaProjectTests", "lib.jar", "p");
 	Object[] resources = pkg.getNonJavaResources();
-	assertResourcesEqual(
+	assertResourceTreeEquals(
 		"Unexpected resources", 
 		"",
 		resources);
@@ -741,10 +741,10 @@ public void testPackageFragmentNonJavaResources4() throws JavaModelException {
 /*
  * Ensure that the non-Java resources of a zip default package without resources are correct.
  */
-public void testPackageFragmentNonJavaResources5() throws JavaModelException {	
+public void testPackageFragmentNonJavaResources5() throws CoreException {	
 	IPackageFragment pkg = getPackageFragment("JavaProjectTests", "lib.jar", "");
 	Object[] resources = pkg.getNonJavaResources();
-	assertResourcesEqual(
+	assertResourceTreeEquals(
 		"Unexpected resources", 
 		"",
 		resources);	
@@ -754,13 +754,13 @@ public void testPackageFragmentNonJavaResources5() throws JavaModelException {
  * Ensure that the non-Java resources of a zip package with resources are correct.
  * (regression test for bug 142530 [hierarchical packages] '.' in folder names confuses package explorer)
  */
-public void testPackageFragmentNonJavaResources6() throws JavaModelException {	
-	// regular zip package without resources
+public void testPackageFragmentNonJavaResources6() throws CoreException {	
 	IPackageFragment pkg = getPackageFragment("JavaProjectTests", "lib142530.jar", "p");
 	Object[] resources = pkg.getNonJavaResources();
-	assertResourcesEqual(
+	assertResourceTreeEquals(
 		"Unexpected resources", 
-		"x.y",
+		"x.y\n" + 
+		"  Test.txt",
 		resources);
 }
 
@@ -768,11 +768,10 @@ public void testPackageFragmentNonJavaResources6() throws JavaModelException {
  * Ensure that the non-Java resources of a zip package with resources are correct.
  * (regression test for bug 148949 JarEntryFile now returning 'null')
  */
-public void testPackageFragmentNonJavaResources7() throws JavaModelException {	
-	// regular zip package without resources
+public void testPackageFragmentNonJavaResources7() throws CoreException {	
 	IPackageFragment pkg = getPackageFragment("JavaProjectTests", "lib148949.jar", "p");
 	Object[] resources = pkg.getNonJavaResources();
-	assertResourceNamesEqual(
+	assertResourceTreeEquals(
 		"Unexpected resources", 
 		"test.txt",
 		resources);
@@ -832,37 +831,43 @@ public void testPackageFragmentRootCorrespondingResource() throws JavaModelExcep
 	assertTrue("incorrect corresponding resource", corr.equals(res));
 	assertEquals("Project incorrect for folder resource", "JavaProjectTests", corr.getProject().getName());
 }
-/**
- * Test getting the non-java resources from a package fragment root.
+/*
+ * Ensures that the non-Java resources of a source package fragment root are correct
+ * (case of a non empty set of non-Java resources)
  */
-public void testPackageFragmentRootNonJavaResources() throws JavaModelException {
-	// source package fragment root with resources
+public void testPackageFragmentRootNonJavaResources1() throws JavaModelException {
 	IPackageFragmentRoot root = getPackageFragmentRoot("JavaProjectTests", "");
 	Object[] resources = root.getNonJavaResources();
 	assertResourceNamesEqual(
-		"unexpected non java resoures (test case 1)", 
+		"unexpected non java resources", 
 		".classpath\n" + 
 		".project\n" + 
 		".settings",
 		resources);
+}
 
-	// source package fragment root without resources
- 	root = getPackageFragmentRoot("JavaProjectSrcTests", "src");
-	resources = root.getNonJavaResources();
+/*
+ * Ensures that the non-Java resources of a source package fragment root are correct
+ * (case of an empty set of non-Java resources)
+ */
+public void testPackageFragmentRootNonJavaResources2() throws JavaModelException {
+ 	IPackageFragmentRoot root = getPackageFragmentRoot("JavaProjectSrcTests", "src");
+	Object[] resources = root.getNonJavaResources();
 	assertResourceNamesEqual(
-		"unexpected non java resoures (test case 2)", 
+		"unexpected non java resources", 
 		"",
 		resources);
-
-	// zip package fragment root with resources
-	// TO DO
-	
-	// zip package fragment root without resources
-	root = getPackageFragmentRoot("JavaProjectTests", "lib.jar");
-	resources = root.getNonJavaResources();
-	assertResourceNamesEqual(
-		"unexpected non java resoures (test case 4)", 
-		"META-INF",
+}
+/*
+ * Ensures that the children of a non-Java resource of a jar package fragment root are correct
+ */
+public void testPackageFragmentRootNonJavaResources3() throws CoreException {
+	IPackageFragmentRoot root = getPackageFragmentRoot("JavaProjectTests", "lib.jar");
+	Object[] resources = root.getNonJavaResources();
+	assertResourceTreeEquals(
+		"unexpected non java resources", 
+		"META-INF\n" + 
+		"  MANIFEST.MF",
 		resources);
 }
 /**
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarEntryDirectory.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarEntryDirectory.java
index 1cd9472..317df0e 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarEntryDirectory.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarEntryDirectory.java
@@ -14,45 +14,30 @@ import java.io.ByteArrayInputStream;
 import java.io.InputStream;
 
 import org.eclipse.core.runtime.CoreException;
-import org.eclipse.core.runtime.IPath;
-import org.eclipse.core.runtime.PlatformObject;
 import org.eclipse.jdt.core.IJarEntryResource;
-import org.eclipse.jdt.internal.core.util.Util;
 
-public class JarEntryDirectory extends PlatformObject implements IJarEntryResource {
-	private Object parent;
-	private IPath path;
+public class JarEntryDirectory extends JarEntryResource {
 	private IJarEntryResource[] children;
 	
-	public JarEntryDirectory(IPath parentRelativePath) {
-		this.path = parentRelativePath;
+	public JarEntryDirectory(String simpleName) {
+		super(simpleName);
 	}
 	
-	public JarEntryDirectory clone(Object newParent) {
-		JarEntryDirectory dir = new JarEntryDirectory(this.path);
+	public JarEntryResource clone(Object newParent) {
+		JarEntryDirectory dir = new JarEntryDirectory(this.simpleName);
 		dir.setParent(newParent);
 		int length = this.children.length;
 		if (length > 0) {
 			IJarEntryResource[] newChildren = new IJarEntryResource[length];
 			for (int i = 0; i < length; i++) {
-				IJarEntryResource child = this.children[i];
-				if (child instanceof JarEntryFile)
-					newChildren[i] = ((JarEntryFile) child).clone(dir);
-				else
-					newChildren[i] = ((JarEntryDirectory) child).clone(dir);
+				JarEntryResource child = (JarEntryResource) this.children[i];
+				newChildren[i] = child.clone(dir);
 			}
 			dir.setChildren(newChildren);
 		}
 		return dir;
 	}
 	
-	public boolean equals(Object obj) {
-		if (! (obj instanceof JarEntryDirectory))
-			return false;
-		JarEntryDirectory other = (JarEntryDirectory) obj;
-		return this.parent.equals(other.parent) && this.path.equals(other.path);
-	}
-
 	public IJarEntryResource[] getChildren() {
 		return this.children;
 	}
@@ -61,39 +46,15 @@ public class JarEntryDirectory extends PlatformObject implements IJarEntryResour
 		return new ByteArrayInputStream(new byte[0]);
 	}
 
-	public IPath getFullPath() {
-		return this.path;
-	}
-
-	public String getName() {
-		return this.path.lastSegment();
-	}
-
-	public Object getParent() {
-		return this.parent;
-	}
-	
-	public int hashCode() {
-		return Util.combineHashCodes(this.path.hashCode(), this.parent.hashCode());
-	}
-	
 	public boolean isFile() {
 		return false;
 	}
 
-	public boolean isReadOnly() {
-		return true;
-	}
-
 	public void setChildren(IJarEntryResource[] children) {
 		this.children = children;
 	}
 
-	public void setParent(Object parent) {
-		this.parent = parent;
-	}
-	
 	public String toString() {
-		return "JarEntryDirectory["+this.path+"]"; //$NON-NLS-1$ //$NON-NLS-2$ 
+		return "JarEntryDirectory["+getEntryName()+"]"; //$NON-NLS-1$ //$NON-NLS-2$ 
 	}
 }
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarEntryFile.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarEntryFile.java
index 8900f8b..bdefea3 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarEntryFile.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarEntryFile.java
@@ -10,6 +10,7 @@
  *******************************************************************************/
 package org.eclipse.jdt.internal.core;
 
+import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.zip.ZipEntry;
@@ -17,97 +18,60 @@ import java.util.zip.ZipFile;
 
 import org.eclipse.core.resources.IStorage;
 import org.eclipse.core.runtime.CoreException;
-import org.eclipse.core.runtime.IPath;
-import org.eclipse.core.runtime.PlatformObject;
 import org.eclipse.jdt.core.IJarEntryResource;
 import org.eclipse.jdt.core.IJavaModelStatusConstants;
 import org.eclipse.jdt.core.JavaModelException;
-import org.eclipse.jdt.internal.core.util.Util;
+import org.eclipse.jdt.internal.compiler.util.Util;
 
 /**
  * A jar entry that represents a non-java file found in a JAR.
  *
  * @see IStorage
  */
-public class JarEntryFile extends PlatformObject implements IJarEntryResource {
+public class JarEntryFile  extends JarEntryResource {
 	private static final IJarEntryResource[] NO_CHILDREN = new IJarEntryResource[0];
-	private Object parent;
-	private String entryName;
-	private String zipName;
-	private IPath path;
 	
-public JarEntryFile(String entryName, String zipName, IPath parentRelativePath) {
-	this.entryName = entryName;
-	this.zipName = zipName;
-	this.path = parentRelativePath;
-}
-
-public JarEntryFile clone(Object newParent) {
-	JarEntryFile file = new JarEntryFile(this.entryName, this.zipName, this.path);
-	file.setParent(newParent);
-	return file;
-}
-
-public boolean equals(Object obj) {
-	if (! (obj instanceof JarEntryFile))
-		return false;
-	JarEntryFile other = (JarEntryFile) obj;
-	return this.parent.equals(other.parent) && this.path.equals(other.path);
-}
+	public JarEntryFile(String simpleName) {
+		super(simpleName);
+	}
 	
-public InputStream getContents() throws CoreException {
-
-	try {
-		if (JavaModelManager.ZIP_ACCESS_VERBOSE) {
-			System.out.println("(" + Thread.currentThread() + ") [JarEntryFile.getContents()] Creating ZipFile on " + this.zipName); //$NON-NLS-1$	//$NON-NLS-2$
-		}
-		ZipFile zipFile = new ZipFile(this.zipName); 
-		ZipEntry zipEntry = zipFile.getEntry(this.entryName);
-		if (zipEntry == null){
-			throw new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, this.entryName));
+	public JarEntryResource clone(Object newParent) {
+		JarEntryFile file = new JarEntryFile(simpleName);
+		file.setParent(newParent);
+		return file;
+	}
+	
+	public InputStream getContents() throws CoreException {
+		ZipFile zipFile = null;
+		try {
+			zipFile = getZipFile();
+			if (JavaModelManager.ZIP_ACCESS_VERBOSE) {
+				System.out.println("(" + Thread.currentThread() + ") [JarEntryFile.getContents()] Creating ZipFile on " +zipFile.getName()); //$NON-NLS-1$	//$NON-NLS-2$
+			}
+			String entryName = getEntryName();
+			ZipEntry zipEntry = zipFile.getEntry(entryName);
+			if (zipEntry == null){
+				throw new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.INVALID_PATH, entryName));
+			}
+			byte[] contents = Util.getZipEntryByteContent(zipEntry, zipFile);
+			return new ByteArrayInputStream(contents);
+		} catch (IOException e){
+			throw new JavaModelException(e, IJavaModelStatusConstants.IO_EXCEPTION);
+		} finally {
+			// avoid leaking ZipFiles
+			JavaModelManager.getJavaModelManager().closeZipFile(zipFile);
 		}
-		return zipFile.getInputStream(zipEntry);
-	} catch (IOException e){
-		throw new JavaModelException(e, IJavaModelStatusConstants.IO_EXCEPTION);
 	}
-}
-public IJarEntryResource[] getChildren() {
-	return NO_CHILDREN;
-}
-/**
- * @see IStorage#getFullPath
- */
-public IPath getFullPath() {
-	return this.path;
-}
-/**
- * @see IStorage#getName
- */
-public String getName() {
-	return this.path.lastSegment();
-}
-public Object getParent() {
-	return this.parent;
-}
-public int hashCode() {
-	return Util.combineHashCodes(this.path.hashCode(), this.parent.hashCode());
-}
-public boolean isFile() {
-	return true;
-}
-/**
- * @see IStorage#isReadOnly()
- */
-public boolean isReadOnly() {
-	return true;
-}
-public void setParent(Object parent) {
-	this.parent = parent;
-}
-/**
- * @see IStorage#isReadOnly()
- */
-public String toString() {
-	return "JarEntryFile["+this.zipName+"::"+this.entryName+"]"; //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-1$
-}
+	
+	public IJarEntryResource[] getChildren() {
+		return NO_CHILDREN;
+	}
+	
+	public boolean isFile() {
+		return true;
+	}
+	
+	public String toString() {
+		return "JarEntryFile["+getEntryName()+"]"; //$NON-NLS-2$ //$NON-NLS-1$
+	}
 }
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarEntryResource.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarEntryResource.java
new file mode 100644
index 0000000..ad3c453
--- /dev/null
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarEntryResource.java
@@ -0,0 +1,88 @@
+/*******************************************************************************
+ * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.jdt.internal.core;
+
+import java.util.zip.ZipFile;
+
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IPath;
+import org.eclipse.core.runtime.Path;
+import org.eclipse.core.runtime.PlatformObject;
+import org.eclipse.jdt.core.IJarEntryResource;
+import org.eclipse.jdt.core.IPackageFragment;
+import org.eclipse.jdt.core.IPackageFragmentRoot;
+import org.eclipse.jdt.internal.core.util.Util;
+
+public abstract class JarEntryResource  extends PlatformObject implements IJarEntryResource {
+
+	protected Object parent;
+	protected String simpleName;
+
+	public JarEntryResource(String simpleName) {
+		this.simpleName = simpleName;
+	}
+	
+	public abstract JarEntryResource clone(Object newParent);
+
+	public boolean equals(Object obj) {
+		if (! (obj instanceof JarEntryResource))
+			return false;
+		JarEntryResource other = (JarEntryResource) obj;
+		return this.parent.equals(other.parent) && this.simpleName.equals(other.simpleName);
+	}
+	
+	protected String getEntryName() {
+		String parentEntryName;
+		if (this.parent instanceof IPackageFragment) {
+			String elementName = ((IPackageFragment) this.parent).getElementName();
+			parentEntryName = elementName.length() == 0 ? "" : elementName .replace('.', '/') + '/'; //$NON-NLS-1$
+		} else if (this.parent instanceof IPackageFragmentRoot) {
+			parentEntryName = ""; //$NON-NLS-1$
+		} else {
+			parentEntryName = ((JarEntryDirectory) this.parent).getEntryName() + '/';
+		}
+		return parentEntryName + this.simpleName;
+	}
+	
+	public IPath getFullPath() {
+		return new Path(getEntryName());
+	}
+	
+	public String getName() {
+		return this.simpleName;
+	}
+	
+	public Object getParent() {
+		return this.parent;
+	}
+	
+	protected ZipFile getZipFile() throws CoreException {
+		if (this.parent instanceof IPackageFragment) {
+			JarPackageFragmentRoot root = (JarPackageFragmentRoot) ((IPackageFragment) this.parent).getParent();
+			return root.getJar();
+		} else if (this.parent instanceof JarPackageFragmentRoot) {
+			return ((JarPackageFragmentRoot) this.parent).getJar();
+		} else
+			return ((JarEntryDirectory) this.parent).getZipFile();
+	}
+	
+	public int hashCode() {
+		return Util.combineHashCodes(this.simpleName.hashCode(), this.parent.hashCode());
+	}
+	
+	public boolean isReadOnly() {
+		return true;
+	}
+
+	public void setParent(Object parent) {
+		this.parent = parent;
+	}
+}
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragment.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragment.java
index d6ad672..7ffb535 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragment.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragment.java
@@ -79,8 +79,9 @@ protected boolean computeChildren(OpenableElementInfo info, ArrayList entryNames
 			String resName = resNames[i];
 			// consider that a .java file is not a non-java resource (see bug 12246 Packages view shows .class and .java files when JAR has source)
 			if (!Util.isJavaLikeFileName(resName)) {
-				IPath childPath = new Path(resName).removeFirstSegments(this.names.length);
-				JarEntryFile file = new JarEntryFile(resName, zipName, childPath);
+				IPath filePath = new Path(resName);
+				IPath childPath = filePath.removeFirstSegments(this.names.length);
+				JarEntryFile file = new JarEntryFile(filePath.lastSegment());
 				jarEntries.put(childPath, file);
 				if (childPath.segmentCount() == 1) {
 					file.setParent(pkg);
@@ -90,7 +91,7 @@ protected boolean computeChildren(OpenableElementInfo info, ArrayList entryNames
 					while (parentPath.segmentCount() > 0) {
 						ArrayList parentChildren = (ArrayList) childrenMap.get(parentPath);
 						if (parentChildren == null) {
-							Object dir = new JarEntryDirectory(parentPath);
+							Object dir = new JarEntryDirectory(parentPath.lastSegment());
 							jarEntries.put(parentPath, dir);
 							childrenMap.put(parentPath, parentChildren = new ArrayList());
 							parentChildren.add(childPath);
@@ -117,13 +118,9 @@ protected boolean computeChildren(OpenableElementInfo info, ArrayList entryNames
 			int size = entryValue.size();
 			IJarEntryResource[] children = new IJarEntryResource[size];
 			for (int i = 0; i < size; i++) {
-				Object child = jarEntries.get(entryValue.get(i));
-				if (child instanceof JarEntryFile) {
-					((JarEntryFile) child).setParent(jarEntryDirectory);
-				} else {
-					((JarEntryDirectory) child).setParent(jarEntryDirectory);
-				}
-				children[i] = (IJarEntryResource) child;
+				JarEntryResource child = (JarEntryResource) jarEntries.get(entryValue.get(i));
+				child.setParent(jarEntryDirectory);
+				children[i] = child;
 			}
 			jarEntryDirectory.setChildren(children);
 			if (entryPath.segmentCount() == 1) {
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java
index 4203076..8bc1d0f 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java
@@ -177,11 +177,8 @@ public class JarPackageFragmentRoot extends PackageFragmentRoot {
 			return defaultPkgResources;
 		Object[] nonJavaResources = new Object[length];
 		for (int i = 0; i < length; i++) {
-			Object nonJavaResource = defaultPkgResources[i];
-			if (nonJavaResource instanceof JarEntryFile)
-				nonJavaResources[i] = ((JarEntryFile) nonJavaResource).clone(this);
-			else
-				nonJavaResources[i] = ((JarEntryDirectory) nonJavaResource).clone(this);
+			JarEntryResource nonJavaResource = (JarEntryResource) defaultPkgResources[i];
+			nonJavaResources[i] = nonJavaResource.clone(this);
 		}
 		return nonJavaResources;
 	}

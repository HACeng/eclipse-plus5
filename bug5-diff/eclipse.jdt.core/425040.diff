commit 90a561fc4554bf1cfedd4387faeef02d32d66ca5
Author: Markus Keller <markus_keller@ch.ibm.com>
Date:   Fri Feb 7 00:47:33 2014 +0100

    Bug 425040: [1.8][formatter] Add option: "Insert new line after type
    annotation"

66	0	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugs18Tests.java
1	2	org.eclipse.jdt.core.tests.model/workspace/FormatterJSR308/test009/X_out.java
1	2	org.eclipse.jdt.core.tests.model/workspace/FormatterJSR308/test011/X_out.java
1	2	org.eclipse.jdt.core.tests.model/workspace/FormatterJSR308/test012/X_out.java
1	2	org.eclipse.jdt.core.tests.model/workspace/FormatterJSR308/test013/X_out.java
13	1	org.eclipse.jdt.core/formatter/org/eclipse/jdt/core/formatter/DefaultCodeFormatterConstants.java
3	0	org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java
5	1	org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java
8	6	org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugs18Tests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugs18Tests.java
index df4fd33..6344c89 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugs18Tests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugs18Tests.java
@@ -83,5 +83,71 @@ public void testBug426520b() throws JavaModelException {
 			"	java.util.@T() Set<java.lang.@T() String> s;\n" +
 			"}\n");
 }
+public void testBug425040() throws JavaModelException {
+	String source =
+			"import java.lang.annotation.*;\n" +
+			"\n" +
+			"public class X extends @Annot1 Object {\n" +
+			"	@Deprecated	@Annot3 public @Annot2	int b;\n" +
+			"\n" +
+			"	@SuppressWarnings(\"unused\")\n" +
+			"	public @Annot3() int foo(@Annot4 C<@Annot5() Object> a) {\n" +
+			"		@Annot1 int @Annot2 [] i;\n" +
+			"		return 0;\n" +
+			"	}\n" +
+			"}\n" +
+			"class C<T> {}\n" +
+			"@Documented\n" +
+			"@Target(ElementType.TYPE_USE)\n" +
+			"@interface Annot1 {}\n" +
+			"@Target(ElementType.TYPE_USE)\n" +
+			"@interface Annot2 {}\n" +
+			"@Target(ElementType.TYPE_USE)\n" +
+			"@interface Annot3 {}\n" +
+			"@Target(ElementType.TYPE_USE)\n" +
+			"@interface Annot4 {}\n" +
+			"@Target(ElementType.TYPE_USE)\n" +
+			"@interface Annot5 {}\n";
+	formatSource(source,
+			"import java.lang.annotation.*;\n" +
+			"\n" +
+			"public class X extends @Annot1 Object {\n" +
+			"	@Deprecated\n" +
+			"	@Annot3\n" +
+			"	public @Annot2 int b;\n" +
+			"\n" +
+			"	@SuppressWarnings(\"unused\")\n" +
+			"	public @Annot3() int foo(@Annot4 C<@Annot5() Object> a) {\n" +
+			"		@Annot1\n" +
+			"		int @Annot2 [] i;\n" +
+			"		return 0;\n" +
+			"	}\n" +
+			"}\n" +
+			"\n" +
+			"class C<T> {\n" +
+			"}\n" +
+			"\n" +
+			"@Documented\n" +
+			"@Target(ElementType.TYPE_USE)\n" +
+			"@interface Annot1 {\n" +
+			"}\n" +
+			"\n" +
+			"@Target(ElementType.TYPE_USE)\n" +
+			"@interface Annot2 {\n" +
+			"}\n" +
+			"\n" +
+			"@Target(ElementType.TYPE_USE)\n" +
+			"@interface Annot3 {\n" +
+			"}\n" +
+			"\n" +
+			"@Target(ElementType.TYPE_USE)\n" +
+			"@interface Annot4 {\n" +
+			"}\n" +
+			"\n" +
+			"@Target(ElementType.TYPE_USE)\n" +
+			"@interface Annot5 {\n" +
+			"}\n"
+			);
+}
 
 }
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/FormatterJSR308/test009/X_out.java b/org.eclipse.jdt.core.tests.model/workspace/FormatterJSR308/test009/X_out.java
index 021c085..2c1bf8a 100644
--- a/org.eclipse.jdt.core.tests.model/workspace/FormatterJSR308/test009/X_out.java
+++ b/org.eclipse.jdt.core.tests.model/workspace/FormatterJSR308/test009/X_out.java
@@ -2,8 +2,7 @@ public class X {
 	int x() {
 		@Marker
 		int p;
-		final @Marker
-		int q;
+		final @Marker int q;
 		@Marker
 		final int r;
 		return 10;
diff --git a/org.eclipse.jdt.core.tests.model/workspace/FormatterJSR308/test011/X_out.java b/org.eclipse.jdt.core.tests.model/workspace/FormatterJSR308/test011/X_out.java
index 2b542e8..5861412 100644
--- a/org.eclipse.jdt.core.tests.model/workspace/FormatterJSR308/test011/X_out.java
+++ b/org.eclipse.jdt.core.tests.model/workspace/FormatterJSR308/test011/X_out.java
@@ -1,8 +1,7 @@
 public class X {
 	int x() {
 		try (@Marker
-		Integer p = null; final @Marker
-		Integer q = null; @Marker
+		Integer p = null; final @Marker Integer q = null; @Marker
 		final Integer r = null) {
 		}
 		return 10;
diff --git a/org.eclipse.jdt.core.tests.model/workspace/FormatterJSR308/test012/X_out.java b/org.eclipse.jdt.core.tests.model/workspace/FormatterJSR308/test012/X_out.java
index f7f03b7..7255f6d 100644
--- a/org.eclipse.jdt.core.tests.model/workspace/FormatterJSR308/test012/X_out.java
+++ b/org.eclipse.jdt.core.tests.model/workspace/FormatterJSR308/test012/X_out.java
@@ -3,8 +3,7 @@ public class X {
 		for (@Marker
 		int i : new int[3]) {
 		}
-		for (final @Marker
-		int i : new int[3]) {
+		for (final @Marker int i : new int[3]) {
 		}
 		for (@Marker
 		final int i : new int[3]) {
diff --git a/org.eclipse.jdt.core.tests.model/workspace/FormatterJSR308/test013/X_out.java b/org.eclipse.jdt.core.tests.model/workspace/FormatterJSR308/test013/X_out.java
index 2143a07..1dbf2a6 100644
--- a/org.eclipse.jdt.core.tests.model/workspace/FormatterJSR308/test013/X_out.java
+++ b/org.eclipse.jdt.core.tests.model/workspace/FormatterJSR308/test013/X_out.java
@@ -1,6 +1,5 @@
 public @interface X {
-	public @Marker
-	String value();
+	public @Marker String value();
 
 	@Marker
 	String value2();
diff --git a/org.eclipse.jdt.core/formatter/org/eclipse/jdt/core/formatter/DefaultCodeFormatterConstants.java b/org.eclipse.jdt.core/formatter/org/eclipse/jdt/core/formatter/DefaultCodeFormatterConstants.java
index d9942df..10bbaf0 100644
--- a/org.eclipse.jdt.core/formatter/org/eclipse/jdt/core/formatter/DefaultCodeFormatterConstants.java
+++ b/org.eclipse.jdt.core/formatter/org/eclipse/jdt/core/formatter/DefaultCodeFormatterConstants.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2013 IBM Corporation and others.
+ * Copyright (c) 2000, 2014 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -1408,6 +1408,18 @@ public class DefaultCodeFormatterConstants {
 
 	/**
 	 * <pre>
+	 * FORMATTER / Option to insert a new line after a type annotation
+	 *     - option id:         "org.eclipse.jdt.core.formatter.insert_new_line_after_type_annotation"
+	 *     - possible values:   { INSERT, DO_NOT_INSERT }
+	 *     - default:           DO_NOT_INSERT
+	 * </pre>
+	 * @see JavaCore#INSERT
+	 * @see JavaCore#DO_NOT_INSERT
+	 * @since 3.9 BETA_JAVA8
+	 */
+	public static final String FORMATTER_INSERT_NEW_LINE_AFTER_TYPE_ANNOTATION = JavaCore.PLUGIN_ID + ".formatter.insert_new_line_after_type_annotation";//$NON-NLS-1$
+	/**
+	 * <pre>
 	 * FORMATTER / Option to insert a new line after an annotation on a parameter
 	 *     - option id:         "org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_parameter"
 	 *     - possible values:   { INSERT, DO_NOT_INSERT }
diff --git a/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java b/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java
index 2046f0f..ee72a61 100644
--- a/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java
+++ b/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java
@@ -5295,6 +5295,9 @@ public class CodeFormatterVisitor extends ASTVisitor {
 			if (length > 0 && (!this.isNextTokenPunctuation() || this.isNextToken(TerminalTokens.TokenNameLBRACKET))) {
 				this.scribe.space();
 			}
+			if (this.scribe.formatter.preferences.insert_new_line_after_type_annotation) {
+				this.scribe.printNewLine();
+			}
 			return true;
 		}
 		return false;
diff --git a/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java b/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java
index c7cd48c..e8e2e8d 100644
--- a/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java
+++ b/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2013 IBM Corporation and others.
+ * Copyright (c) 2000, 2014 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -147,6 +147,7 @@ public class DefaultCodeFormatterOptions {
 	public int indentation_size;
 
 	public boolean insert_new_line_after_annotation_on_type;
+	public boolean insert_new_line_after_type_annotation;
 	public boolean insert_new_line_after_annotation_on_field;
 	public boolean insert_new_line_after_annotation_on_method;
 	public boolean insert_new_line_after_annotation_on_package;
@@ -448,6 +449,7 @@ public class DefaultCodeFormatterOptions {
 		options.put(DefaultCodeFormatterConstants.FORMATTER_INDENT_SWITCHSTATEMENTS_COMPARE_TO_SWITCH, this.indent_switchstatements_compare_to_switch ? DefaultCodeFormatterConstants.TRUE : DefaultCodeFormatterConstants.FALSE);
 		options.put(DefaultCodeFormatterConstants.FORMATTER_INDENTATION_SIZE, Integer.toString(this.indentation_size));
 		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_TYPE, this.insert_new_line_after_annotation_on_type ? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);
+		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_TYPE_ANNOTATION, this.insert_new_line_after_type_annotation ? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);
 		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_FIELD, this.insert_new_line_after_annotation_on_field ? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);
 		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_METHOD, this.insert_new_line_after_annotation_on_method ? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);
 		options.put(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_PACKAGE, this.insert_new_line_after_annotation_on_package ? JavaCore.INSERT : JavaCore.DO_NOT_INSERT);
@@ -2279,6 +2281,7 @@ public class DefaultCodeFormatterOptions {
 		this.indent_switchstatements_compare_to_switch = true;
 		this.indentation_size = 4;
 		this.insert_new_line_after_annotation_on_type = true;
+		this.insert_new_line_after_type_annotation = false;
 		this.insert_new_line_after_annotation_on_field = true;
 		this.insert_new_line_after_annotation_on_method = true;
 		this.insert_new_line_after_annotation_on_package = true;
@@ -2569,6 +2572,7 @@ public class DefaultCodeFormatterOptions {
 		this.indent_switchstatements_compare_to_switch = false;
 		this.indentation_size = 4;
 		this.insert_new_line_after_annotation_on_type = true;
+		this.insert_new_line_after_type_annotation = false;
 		this.insert_new_line_after_annotation_on_field = true;
 		this.insert_new_line_after_annotation_on_method = true;
 		this.insert_new_line_after_annotation_on_package = true;
diff --git a/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java b/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java
index 2511f7d..d6e24d8 100644
--- a/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java
+++ b/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java
@@ -4552,6 +4552,7 @@ public class Scribe implements IJavaDocTagConstants {
 			int currentTokenStartPosition = this.scanner.currentPosition;
 			boolean hasComment = false;
 			boolean hasModifiers = false;
+			boolean foundNonAnnotModifiers = false;
 			while ((this.currentToken = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {
 				int foundTaskCount = this.scanner.foundTaskCount;
 				int tokenStartPosition = this.scanner.getCurrentTokenStartPosition();
@@ -4570,6 +4571,7 @@ public class Scribe implements IJavaDocTagConstants {
 					case TerminalTokens.TokenNamevolatile :
 					case TerminalTokens.TokenNamestrictfp :
 						hasModifiers = true;
+						foundNonAnnotModifiers = true;
 						print(this.scanner.currentPosition - this.scanner.startPosition, !isFirstModifier);
 						isFirstModifier = false;
 						currentTokenStartPosition = this.scanner.currentPosition;
@@ -4594,32 +4596,32 @@ public class Scribe implements IJavaDocTagConstants {
 							switch (annotationSourceKind) {
 								case ICodeFormatterConstants.ANNOTATION_ON_TYPE :
 									if (this.formatter.preferences.insert_new_line_after_annotation_on_type) {
-										shouldAddNewLine = true;
+										shouldAddNewLine = foundNonAnnotModifiers ? this.formatter.preferences.insert_new_line_after_type_annotation : true;
 									}
 									break;
 								case ICodeFormatterConstants.ANNOTATION_ON_FIELD :
 									if (this.formatter.preferences.insert_new_line_after_annotation_on_field) {
-										shouldAddNewLine = true;
+										shouldAddNewLine = foundNonAnnotModifiers ? this.formatter.preferences.insert_new_line_after_type_annotation : true;
 									}
 									break;
 								case ICodeFormatterConstants.ANNOTATION_ON_METHOD :
 									if (this.formatter.preferences.insert_new_line_after_annotation_on_method) {
-										shouldAddNewLine = true;
+										shouldAddNewLine = foundNonAnnotModifiers ? this.formatter.preferences.insert_new_line_after_type_annotation : true;
 									}
 									break;
 								case ICodeFormatterConstants.ANNOTATION_ON_PACKAGE :
 									if (this.formatter.preferences.insert_new_line_after_annotation_on_package) {
-										shouldAddNewLine = true;
+										shouldAddNewLine = foundNonAnnotModifiers ? this.formatter.preferences.insert_new_line_after_type_annotation : true;
 									}
 									break;
 								case ICodeFormatterConstants.ANNOTATION_ON_PARAMETER :
 									if (this.formatter.preferences.insert_new_line_after_annotation_on_parameter) {
-										shouldAddNewLine = true;
+										shouldAddNewLine = foundNonAnnotModifiers ? this.formatter.preferences.insert_new_line_after_type_annotation : true;
 									}
 									break;
 								case ICodeFormatterConstants.ANNOTATION_ON_LOCAL_VARIABLE :
 									if (this.formatter.preferences.insert_new_line_after_annotation_on_local_variable) {
-										shouldAddNewLine = true;
+										shouldAddNewLine = foundNonAnnotModifiers ? this.formatter.preferences.insert_new_line_after_type_annotation : true;
 									}
 									break;
 								default:
commit 55d39504efb3d0b23ce8f4487f5528fe899ca35d
Author: Markus Keller <markus_keller@ch.ibm.com>
Date:   Fri Feb 7 01:19:30 2014 +0100

    Bug 425040: [1.8][formatter] Add option: "Insert new line after type
    annotation"

4	0	org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java
diff --git a/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java b/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java
index e8e2e8d..8aee1ee 100644
--- a/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java
+++ b/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatterOptions.java
@@ -1147,6 +1147,10 @@ public class DefaultCodeFormatterOptions {
 				this.blank_lines_at_beginning_of_method_body = 0;
 			}
 		}
+		final Object insertNewLineAfterTypeAnnotationOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_TYPE_ANNOTATION);
+		if (insertNewLineAfterTypeAnnotationOption != null) {
+			this.insert_new_line_after_type_annotation = JavaCore.INSERT.equals(insertNewLineAfterTypeAnnotationOption);
+		}
 		setDeprecatedOptions(settings);
 		final Object commentFormatJavadocCommentOption = settings.get(DefaultCodeFormatterConstants.FORMATTER_COMMENT_FORMAT_JAVADOC_COMMENT);
 		if (commentFormatJavadocCommentOption != null) {
commit cd140389e1d0cdca9f232f9b33d1b09e90034b22
Author: Markus Keller <markus_keller@ch.ibm.com>
Date:   Tue Feb 18 14:22:57 2014 +0100

    Bug 425040: [1.8][formatter] Add option: "Insert new line after type
    annotation"
    
    Fix for bug 425040 comment 13 and
    Bug 401848: ASTRewrite on type annotations adds an additional <CR>

28	1	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingMethodDeclTest.java
1	2	org.eclipse.jdt.core.tests.model/workspace/Formatter/test575/A_out.java
2	5	org.eclipse.jdt.core.tests.model/workspace/Formatter/test701/X_out.java
1	1	org.eclipse.jdt.core.tests.model/workspace/Formatter/test703/X_in.java
1	1	org.eclipse.jdt.core.tests.model/workspace/Formatter/test703/X_out.java
1	1	org.eclipse.jdt.core.tests.model/workspace/Formatter/test704/X_in.java
1	1	org.eclipse.jdt.core.tests.model/workspace/Formatter/test704/X_out.java
1	1	org.eclipse.jdt.core.tests.model/workspace/Formatter/test706/X_in.java
1	2	org.eclipse.jdt.core.tests.model/workspace/Formatter/test706/X_out.java
1	1	org.eclipse.jdt.core.tests.model/workspace/Formatter/test707/X_in.java
1	2	org.eclipse.jdt.core.tests.model/workspace/Formatter/test707/X_out.java
1	1	org.eclipse.jdt.core.tests.model/workspace/Formatter/test708/X_in.java
1	1	org.eclipse.jdt.core.tests.model/workspace/Formatter/test708/X_out.java
1	1	org.eclipse.jdt.core.tests.model/workspace/Formatter/test709/X_in.java
1	1	org.eclipse.jdt.core.tests.model/workspace/Formatter/test709/X_out.java
1	1	org.eclipse.jdt.core.tests.model/workspace/Formatter/test710/X_in.java
1	2	org.eclipse.jdt.core.tests.model/workspace/Formatter/test710/X_out.java
1	1	org.eclipse.jdt.core.tests.model/workspace/Formatter/test711/X_in.java
1	1	org.eclipse.jdt.core.tests.model/workspace/Formatter/test711/X_out.java
1	1	org.eclipse.jdt.core.tests.model/workspace/Formatter/test712/X_in.java
1	1	org.eclipse.jdt.core.tests.model/workspace/Formatter/test712/X_out.java
1	1	org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteFormatter.java
38	2	org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java
23	23	org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingMethodDeclTest.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingMethodDeclTest.java
index 267ac14..ad9fa38 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingMethodDeclTest.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/rewrite/describing/ASTRewritingMethodDeclTest.java
@@ -3128,7 +3128,7 @@ public class ASTRewritingMethodDeclTest extends ASTRewritingTest {
 		buf= new StringBuffer();
 		buf.append("package test1;\n");
 		buf.append("class E {\n");
-		buf.append("    public void foo(@X\n    @A int a, @B2 int b, @X\n    int c, @X int d, @X\n    int e) {\n");
+		buf.append("    public void foo(@X @A int a, @B2 int b, @X int c, @X int d, @X int e) {\n");
 		buf.append("    }\n");
 		buf.append("}\n");
 		assertEqualString(preview, buf.toString());
@@ -3803,6 +3803,33 @@ public class ASTRewritingMethodDeclTest extends ASTRewritingTest {
 		buf.append("@interface Marker {}\n");
 
 		assertEqualString(preview, buf.toString());
+		
+		// still no new line if new line after annotation on parameter is enabled:
+		this.project1.setOption(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_PARAMETER, JavaCore.INSERT);
+		
+		preview= evaluateRewrite(cu, rewrite);
+		assertEqualString(preview, buf.toString());
+		
+		// do insert new line if new line after type annotation is enabled:
+		this.project1.setOption(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_ANNOTATION_ON_PARAMETER, JavaCore.DO_NOT_INSERT);
+		this.project1.setOption(DefaultCodeFormatterConstants.FORMATTER_INSERT_NEW_LINE_AFTER_TYPE_ANNOTATION, JavaCore.INSERT);
+		
+		preview= evaluateRewrite(cu, rewrite);
+		
+		buf= new StringBuffer();
+		buf.append("package test1;\n");
+		buf.append("import java.lang.annotation.*;\n");
+		buf.append("public abstract class E {\n");
+		buf.append("    public void test() throws @Marker\n");
+		buf.append("    MyException{}\n");
+		buf.append("    class MyException extends Throwable {\n");
+		buf.append("     private static final long serialVersionUID=-3045365361549263819L;");
+		buf.append("    }\n");
+		buf.append("}\n");
+		buf.append("@Target (Element.TYPE_USE);\n");
+		buf.append("@interface Marker {}\n");
+		
+		assertEqualString(preview, buf.toString());
 	}
 	
 	public void testBug427622b_since_8() throws Exception {
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Formatter/test575/A_out.java b/org.eclipse.jdt.core.tests.model/workspace/Formatter/test575/A_out.java
index 48040a2..a9e67a9 100644
--- a/org.eclipse.jdt.core.tests.model/workspace/Formatter/test575/A_out.java
+++ b/org.eclipse.jdt.core.tests.model/workspace/Formatter/test575/A_out.java
@@ -1,6 +1,5 @@
 public class A {
-	public Object foo(@Ann("parameter")
-	Object parameter) {
+	public Object foo(@Ann("parameter") Object parameter) {
 		return parameter;
 	}
 }
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Formatter/test701/X_out.java b/org.eclipse.jdt.core.tests.model/workspace/Formatter/test701/X_out.java
index a9acf9f..8feea5d 100644
--- a/org.eclipse.jdt.core.tests.model/workspace/Formatter/test701/X_out.java
+++ b/org.eclipse.jdt.core.tests.model/workspace/Formatter/test701/X_out.java
@@ -2,10 +2,7 @@ public class X {
 
 	@Deprecated
 	@SuppressWarnings("unused")
-	public void setFoo(@Required
-	String name, @NotNull
-	int value, @Required
-	int start, @Required
-	int length) {
+	public void setFoo(@Required String name, @NotNull int value,
+			@Required int start, @Required int length) {
 	}
 }
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Formatter/test703/X_in.java b/org.eclipse.jdt.core.tests.model/workspace/Formatter/test703/X_in.java
index 8209310..d4f1376 100644
--- a/org.eclipse.jdt.core.tests.model/workspace/Formatter/test703/X_in.java
+++ b/org.eclipse.jdt.core.tests.model/workspace/Formatter/test703/X_in.java
@@ -1,4 +1,4 @@
 public class X {
-	@Deprecated public void bar(@SuppressWarnings("unused") int i) {
+	@Deprecated public void bar(@SuppressWarnings("unused") final int i) {
 	}
 }
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Formatter/test703/X_out.java b/org.eclipse.jdt.core.tests.model/workspace/Formatter/test703/X_out.java
index 946bdd2..e0c676e 100644
--- a/org.eclipse.jdt.core.tests.model/workspace/Formatter/test703/X_out.java
+++ b/org.eclipse.jdt.core.tests.model/workspace/Formatter/test703/X_out.java
@@ -1,6 +1,6 @@
 public class X {
 	@Deprecated
 	public void bar(@SuppressWarnings("unused")
-	int i) {
+	final int i) {
 	}
 }
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Formatter/test704/X_in.java b/org.eclipse.jdt.core.tests.model/workspace/Formatter/test704/X_in.java
index 8209310..d4f1376 100644
--- a/org.eclipse.jdt.core.tests.model/workspace/Formatter/test704/X_in.java
+++ b/org.eclipse.jdt.core.tests.model/workspace/Formatter/test704/X_in.java
@@ -1,4 +1,4 @@
 public class X {
-	@Deprecated public void bar(@SuppressWarnings("unused") int i) {
+	@Deprecated public void bar(@SuppressWarnings("unused") final int i) {
 	}
 }
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Formatter/test704/X_out.java b/org.eclipse.jdt.core.tests.model/workspace/Formatter/test704/X_out.java
index f42abe0..718acab 100644
--- a/org.eclipse.jdt.core.tests.model/workspace/Formatter/test704/X_out.java
+++ b/org.eclipse.jdt.core.tests.model/workspace/Formatter/test704/X_out.java
@@ -1,5 +1,5 @@
 public class X {
 	@Deprecated public void bar(@SuppressWarnings("unused")
-	int i) {
+	final int i) {
 	}
 }
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Formatter/test706/X_in.java b/org.eclipse.jdt.core.tests.model/workspace/Formatter/test706/X_in.java
index b41cb10..4a06f15 100644
--- a/org.eclipse.jdt.core.tests.model/workspace/Formatter/test706/X_in.java
+++ b/org.eclipse.jdt.core.tests.model/workspace/Formatter/test706/X_in.java
@@ -24,7 +24,7 @@
 
 	}
 
-	@OnMember public void bar(@OnParameter("unused value") int i, @OnParameter("unused value") String s) {
+	@OnMember public void bar(@OnParameter("unused value") final int i, @OnParameter("unused value") String s) {
 		@OnLocalVariable @Retention String localString = "string";
 	}
 }
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Formatter/test706/X_out.java b/org.eclipse.jdt.core.tests.model/workspace/Formatter/test706/X_out.java
index 5712346..1d8f100 100644
--- a/org.eclipse.jdt.core.tests.model/workspace/Formatter/test706/X_out.java
+++ b/org.eclipse.jdt.core.tests.model/workspace/Formatter/test706/X_out.java
@@ -34,8 +34,7 @@
 	}
 
 	@OnMember public void bar(@OnParameter("unused value")
-	int i, @OnParameter("unused value")
-	String s) {
+	final int i, @OnParameter("unused value") String s) {
 		@OnLocalVariable @Retention String localString = "string";
 	}
 }
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Formatter/test707/X_in.java b/org.eclipse.jdt.core.tests.model/workspace/Formatter/test707/X_in.java
index b41cb10..4a06f15 100644
--- a/org.eclipse.jdt.core.tests.model/workspace/Formatter/test707/X_in.java
+++ b/org.eclipse.jdt.core.tests.model/workspace/Formatter/test707/X_in.java
@@ -24,7 +24,7 @@
 
 	}
 
-	@OnMember public void bar(@OnParameter("unused value") int i, @OnParameter("unused value") String s) {
+	@OnMember public void bar(@OnParameter("unused value") final int i, @OnParameter("unused value") String s) {
 		@OnLocalVariable @Retention String localString = "string";
 	}
 }
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Formatter/test707/X_out.java b/org.eclipse.jdt.core.tests.model/workspace/Formatter/test707/X_out.java
index 789c106..a0d7bf9 100644
--- a/org.eclipse.jdt.core.tests.model/workspace/Formatter/test707/X_out.java
+++ b/org.eclipse.jdt.core.tests.model/workspace/Formatter/test707/X_out.java
@@ -44,8 +44,7 @@ public class X {
 
 	@OnMember
 	public void bar(@OnParameter("unused value")
-	int i, @OnParameter("unused value")
-	String s) {
+	final int i, @OnParameter("unused value") String s) {
 		@OnLocalVariable @Retention String localString = "string";
 	}
 }
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Formatter/test708/X_in.java b/org.eclipse.jdt.core.tests.model/workspace/Formatter/test708/X_in.java
index b41cb10..4a06f15 100644
--- a/org.eclipse.jdt.core.tests.model/workspace/Formatter/test708/X_in.java
+++ b/org.eclipse.jdt.core.tests.model/workspace/Formatter/test708/X_in.java
@@ -24,7 +24,7 @@
 
 	}
 
-	@OnMember public void bar(@OnParameter("unused value") int i, @OnParameter("unused value") String s) {
+	@OnMember public void bar(@OnParameter("unused value") final int i, @OnParameter("unused value") String s) {
 		@OnLocalVariable @Retention String localString = "string";
 	}
 }
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Formatter/test708/X_out.java b/org.eclipse.jdt.core.tests.model/workspace/Formatter/test708/X_out.java
index 05944e3..306a00c 100644
--- a/org.eclipse.jdt.core.tests.model/workspace/Formatter/test708/X_out.java
+++ b/org.eclipse.jdt.core.tests.model/workspace/Formatter/test708/X_out.java
@@ -43,7 +43,7 @@ public class X {
 	}
 
 	@OnMember
-	public void bar(@OnParameter("unused value") int i,
+	public void bar(@OnParameter("unused value") final int i,
 			@OnParameter("unused value") String s) {
 		@OnLocalVariable @Retention String localString = "string";
 	}
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Formatter/test709/X_in.java b/org.eclipse.jdt.core.tests.model/workspace/Formatter/test709/X_in.java
index b41cb10..4a06f15 100644
--- a/org.eclipse.jdt.core.tests.model/workspace/Formatter/test709/X_in.java
+++ b/org.eclipse.jdt.core.tests.model/workspace/Formatter/test709/X_in.java
@@ -24,7 +24,7 @@
 
 	}
 
-	@OnMember public void bar(@OnParameter("unused value") int i, @OnParameter("unused value") String s) {
+	@OnMember public void bar(@OnParameter("unused value") final int i, @OnParameter("unused value") String s) {
 		@OnLocalVariable @Retention String localString = "string";
 	}
 }
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Formatter/test709/X_out.java b/org.eclipse.jdt.core.tests.model/workspace/Formatter/test709/X_out.java
index f21995d..72ab12d 100644
--- a/org.eclipse.jdt.core.tests.model/workspace/Formatter/test709/X_out.java
+++ b/org.eclipse.jdt.core.tests.model/workspace/Formatter/test709/X_out.java
@@ -33,7 +33,7 @@
 
 	}
 
-	@OnMember public void bar(@OnParameter("unused value") int i,
+	@OnMember public void bar(@OnParameter("unused value") final int i,
 			@OnParameter("unused value") String s) {
 		@OnLocalVariable @Retention String localString = "string";
 	}
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Formatter/test710/X_in.java b/org.eclipse.jdt.core.tests.model/workspace/Formatter/test710/X_in.java
index b41cb10..4a06f15 100644
--- a/org.eclipse.jdt.core.tests.model/workspace/Formatter/test710/X_in.java
+++ b/org.eclipse.jdt.core.tests.model/workspace/Formatter/test710/X_in.java
@@ -24,7 +24,7 @@
 
 	}
 
-	@OnMember public void bar(@OnParameter("unused value") int i, @OnParameter("unused value") String s) {
+	@OnMember public void bar(@OnParameter("unused value") final int i, @OnParameter("unused value") String s) {
 		@OnLocalVariable @Retention String localString = "string";
 	}
 }
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Formatter/test710/X_out.java b/org.eclipse.jdt.core.tests.model/workspace/Formatter/test710/X_out.java
index 426f0e6..d268e68 100644
--- a/org.eclipse.jdt.core.tests.model/workspace/Formatter/test710/X_out.java
+++ b/org.eclipse.jdt.core.tests.model/workspace/Formatter/test710/X_out.java
@@ -34,8 +34,7 @@
 	}
 
 	@OnMember public void bar(@OnParameter("unused value")
-	int i, @OnParameter("unused value")
-	String s) {
+	final int i, @OnParameter("unused value") String s) {
 		@OnLocalVariable
 		@Retention
 		String localString = "string";
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Formatter/test711/X_in.java b/org.eclipse.jdt.core.tests.model/workspace/Formatter/test711/X_in.java
index b41cb10..4a06f15 100644
--- a/org.eclipse.jdt.core.tests.model/workspace/Formatter/test711/X_in.java
+++ b/org.eclipse.jdt.core.tests.model/workspace/Formatter/test711/X_in.java
@@ -24,7 +24,7 @@
 
 	}
 
-	@OnMember public void bar(@OnParameter("unused value") int i, @OnParameter("unused value") String s) {
+	@OnMember public void bar(@OnParameter("unused value") final int i, @OnParameter("unused value") String s) {
 		@OnLocalVariable @Retention String localString = "string";
 	}
 }
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Formatter/test711/X_out.java b/org.eclipse.jdt.core.tests.model/workspace/Formatter/test711/X_out.java
index 4c1388d..230924a 100644
--- a/org.eclipse.jdt.core.tests.model/workspace/Formatter/test711/X_out.java
+++ b/org.eclipse.jdt.core.tests.model/workspace/Formatter/test711/X_out.java
@@ -33,7 +33,7 @@
 
 	}
 
-	@OnMember public void bar(@OnParameter("unused value") int i,
+	@OnMember public void bar(@OnParameter("unused value") final int i,
 			@OnParameter("unused value") String s) {
 		@OnLocalVariable
 		@Retention
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Formatter/test712/X_in.java b/org.eclipse.jdt.core.tests.model/workspace/Formatter/test712/X_in.java
index b41cb10..4a06f15 100644
--- a/org.eclipse.jdt.core.tests.model/workspace/Formatter/test712/X_in.java
+++ b/org.eclipse.jdt.core.tests.model/workspace/Formatter/test712/X_in.java
@@ -24,7 +24,7 @@
 
 	}
 
-	@OnMember public void bar(@OnParameter("unused value") int i, @OnParameter("unused value") String s) {
+	@OnMember public void bar(@OnParameter("unused value") final int i, @OnParameter("unused value") String s) {
 		@OnLocalVariable @Retention String localString = "string";
 	}
 }
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Formatter/test712/X_out.java b/org.eclipse.jdt.core.tests.model/workspace/Formatter/test712/X_out.java
index 0f1da7f..aebb082 100644
--- a/org.eclipse.jdt.core.tests.model/workspace/Formatter/test712/X_out.java
+++ b/org.eclipse.jdt.core.tests.model/workspace/Formatter/test712/X_out.java
@@ -43,7 +43,7 @@ public class X {
 	}
 
 	@OnMember
-	public void bar(@OnParameter("unused value") int i,
+	public void bar(@OnParameter("unused value") final int i,
 			@OnParameter("unused value") String s) {
 		@OnLocalVariable
 		@Retention
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteFormatter.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteFormatter.java
index 26c713e..089d8ff 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteFormatter.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteFormatter.java
@@ -286,7 +286,7 @@ public final class ASTRewriteFormatter {
 				case ASTNode.PRIMITIVE_TYPE:
 				case ASTNode.QUALIFIED_TYPE:
 				case ASTNode.SIMPLE_TYPE:
-					prefix= "void m("; //$NON-NLS-1$
+					prefix= "void m(final "; //$NON-NLS-1$
 					suffix= " x);"; //$NON-NLS-1$
 					code= CodeFormatter.K_CLASS_BODY_DECLARATIONS;
 					break;
diff --git a/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java b/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java
index ee72a61..f689780 100644
--- a/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java
+++ b/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CodeFormatterVisitor.java
@@ -2411,7 +2411,7 @@ public class CodeFormatterVisitor extends ASTVisitor {
 		return 0;
 	}
 
-		private void skipPastTypeAnnotations() {  // we get here having seen @
+	private void skipPastTypeAnnotations() {  // we get here having seen @
 		int balance = 0;
 		int currentTokenStartPosition = this.localScanner.currentPosition;
 		try {
@@ -2461,6 +2461,42 @@ public class CodeFormatterVisitor extends ASTVisitor {
 		return false;
 	}
 
+	private boolean hasNonAnnotationModifiers() {
+		this.localScanner.resetTo(this.scribe.scanner.currentPosition, this.scribe.scannerEndPosition - 1);
+		try {
+			int token;
+			while ((token = this.localScanner.getNextToken()) != TerminalTokens.TokenNameEOF) {
+				switch(token) {
+					case TerminalTokens.TokenNamedefault :
+					case TerminalTokens.TokenNamepublic :
+					case TerminalTokens.TokenNameprotected :
+					case TerminalTokens.TokenNameprivate :
+					case TerminalTokens.TokenNamestatic :
+					case TerminalTokens.TokenNameabstract :
+					case TerminalTokens.TokenNamefinal :
+					case TerminalTokens.TokenNamenative :
+					case TerminalTokens.TokenNamesynchronized :
+					case TerminalTokens.TokenNametransient :
+					case TerminalTokens.TokenNamevolatile :
+					case TerminalTokens.TokenNamestrictfp :
+						return true;
+					case TerminalTokens.TokenNameAT :
+						skipPastTypeAnnotations();
+						break;
+					case TerminalTokens.TokenNameCOMMENT_BLOCK :
+					case TerminalTokens.TokenNameCOMMENT_JAVADOC :
+					case TerminalTokens.TokenNameCOMMENT_LINE :
+						break;
+					default:
+						return false;
+				}
+			}
+		} catch(InvalidInputException e) {
+			// ignore
+		}
+		return false;
+	}
+	
 	private boolean isNextToken(int tokenName) {
 		this.localScanner.resetTo(this.scribe.scanner.currentPosition, this.scribe.scannerEndPosition - 1);
 		try {
@@ -2742,7 +2778,7 @@ public class CodeFormatterVisitor extends ASTVisitor {
 
 		if (argument.modifiers != NO_MODIFIERS || argument.annotations != null) {
 	        this.scribe.printComment();
-			this.scribe.printModifiers(argument.annotations, this, ICodeFormatterConstants.ANNOTATION_ON_PARAMETER);
+			this.scribe.printModifiers(argument.annotations, this, ICodeFormatterConstants.ANNOTATION_ON_PARAMETER, !hasNonAnnotationModifiers());
 			this.scribe.space();
 		}
 
diff --git a/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java b/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java
index d6e24d8..7cde80d 100644
--- a/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java
+++ b/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/Scribe.java
@@ -4540,11 +4540,11 @@ public class Scribe implements IJavaDocTagConstants {
 		}
     }
 
-	public void printModifiers(Annotation[] annotations, ASTVisitor visitor) {
-		printModifiers(annotations, visitor, ICodeFormatterConstants.ANNOTATION_UNSPECIFIED);
+	public void printModifiers(Annotation[] annotations, ASTVisitor visitor, int annotationSourceKind) {
+		printModifiers(annotations, visitor, annotationSourceKind, false);
 	}
 
-	public void printModifiers(Annotation[] annotations, ASTVisitor visitor, int annotationSourceKind) {
+	public void printModifiers(Annotation[] annotations, ASTVisitor visitor, int annotationSourceKind, boolean firstIsTypeAnnotation) {
 		try {
 			int annotationsLength = annotations != null ? annotations.length : 0;
 			int annotationsIndex = 0;
@@ -4552,7 +4552,7 @@ public class Scribe implements IJavaDocTagConstants {
 			int currentTokenStartPosition = this.scanner.currentPosition;
 			boolean hasComment = false;
 			boolean hasModifiers = false;
-			boolean foundNonAnnotModifiers = false;
+			boolean treatNextAsTypeAnnotation = firstIsTypeAnnotation;
 			while ((this.currentToken = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {
 				int foundTaskCount = this.scanner.foundTaskCount;
 				int tokenStartPosition = this.scanner.getCurrentTokenStartPosition();
@@ -4571,7 +4571,7 @@ public class Scribe implements IJavaDocTagConstants {
 					case TerminalTokens.TokenNamevolatile :
 					case TerminalTokens.TokenNamestrictfp :
 						hasModifiers = true;
-						foundNonAnnotModifiers = true;
+						treatNextAsTypeAnnotation = true;
 						print(this.scanner.currentPosition - this.scanner.startPosition, !isFirstModifier);
 						isFirstModifier = false;
 						currentTokenStartPosition = this.scanner.currentPosition;
@@ -4595,34 +4595,34 @@ public class Scribe implements IJavaDocTagConstants {
 							boolean shouldAddNewLine = false;
 							switch (annotationSourceKind) {
 								case ICodeFormatterConstants.ANNOTATION_ON_TYPE :
-									if (this.formatter.preferences.insert_new_line_after_annotation_on_type) {
-										shouldAddNewLine = foundNonAnnotModifiers ? this.formatter.preferences.insert_new_line_after_type_annotation : true;
-									}
+									shouldAddNewLine = treatNextAsTypeAnnotation
+											? this.formatter.preferences.insert_new_line_after_type_annotation
+											: this.formatter.preferences.insert_new_line_after_annotation_on_type;
 									break;
 								case ICodeFormatterConstants.ANNOTATION_ON_FIELD :
-									if (this.formatter.preferences.insert_new_line_after_annotation_on_field) {
-										shouldAddNewLine = foundNonAnnotModifiers ? this.formatter.preferences.insert_new_line_after_type_annotation : true;
-									}
+									shouldAddNewLine = treatNextAsTypeAnnotation
+											? this.formatter.preferences.insert_new_line_after_type_annotation
+											: this.formatter.preferences.insert_new_line_after_annotation_on_field;
 									break;
 								case ICodeFormatterConstants.ANNOTATION_ON_METHOD :
-									if (this.formatter.preferences.insert_new_line_after_annotation_on_method) {
-										shouldAddNewLine = foundNonAnnotModifiers ? this.formatter.preferences.insert_new_line_after_type_annotation : true;
-									}
+									shouldAddNewLine = treatNextAsTypeAnnotation
+											? this.formatter.preferences.insert_new_line_after_type_annotation
+											: this.formatter.preferences.insert_new_line_after_annotation_on_method;
 									break;
 								case ICodeFormatterConstants.ANNOTATION_ON_PACKAGE :
-									if (this.formatter.preferences.insert_new_line_after_annotation_on_package) {
-										shouldAddNewLine = foundNonAnnotModifiers ? this.formatter.preferences.insert_new_line_after_type_annotation : true;
-									}
+									shouldAddNewLine = treatNextAsTypeAnnotation
+											? this.formatter.preferences.insert_new_line_after_type_annotation
+											: this.formatter.preferences.insert_new_line_after_annotation_on_package;
 									break;
 								case ICodeFormatterConstants.ANNOTATION_ON_PARAMETER :
-									if (this.formatter.preferences.insert_new_line_after_annotation_on_parameter) {
-										shouldAddNewLine = foundNonAnnotModifiers ? this.formatter.preferences.insert_new_line_after_type_annotation : true;
-									}
+									shouldAddNewLine = treatNextAsTypeAnnotation
+											? this.formatter.preferences.insert_new_line_after_type_annotation
+											: this.formatter.preferences.insert_new_line_after_annotation_on_parameter;
 									break;
 								case ICodeFormatterConstants.ANNOTATION_ON_LOCAL_VARIABLE :
-									if (this.formatter.preferences.insert_new_line_after_annotation_on_local_variable) {
-										shouldAddNewLine = foundNonAnnotModifiers ? this.formatter.preferences.insert_new_line_after_type_annotation : true;
-									}
+									shouldAddNewLine = treatNextAsTypeAnnotation
+											? this.formatter.preferences.insert_new_line_after_type_annotation
+											: this.formatter.preferences.insert_new_line_after_annotation_on_local_variable;
 									break;
 								default:
 									// do nothing when no annotation formatting option specified

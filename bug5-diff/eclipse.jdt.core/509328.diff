commit 76416165a5cefbe5fb2fe79e56ccfa72c4424631
Author: Till Brychcy <register.eclipse@brychcy.de>
Date:   Fri Dec 16 00:54:13 2016 +0100

    Bug 509328 - [1.8][null] @NonNullByDefault on constructor ignored when
    used from anonymous subclass via .class file
    
    Change-Id: I8b3fc7bc2232ea72351fe50d7c2891760ced1377

44	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
10	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
index d0b68d8..5e8d57e 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
@@ -13484,4 +13484,48 @@ public void testBug501598() {
 		"----------\n"
 	);
 }
+public void testBug509328() {
+	runConformTestWithLibs(
+		new String[] {
+			"test/Feature.java",
+			"package test;\n" +
+			"\n" +
+			"import org.eclipse.jdt.annotation.NonNullByDefault;\n" +
+			"\n" +
+			"@NonNullByDefault\n" +
+			"public class Feature {\n" +
+			"	public Feature(String name) {\n" +
+			"	}\n" +
+			"}\n" +
+			"",
+		}, 
+		getCompilerOptions(),
+		""
+	);
+	runNegativeTestWithLibs(
+		new String[] {
+			"test/Test.java",
+			"package test;\n" +
+			"\n" +
+			"import org.eclipse.jdt.annotation.NonNullByDefault;\n" +
+			"\n" +
+			"@NonNullByDefault\n" +
+			"public class Test {\n" +
+			"	public static void f() {\n" +
+			"		new Feature(null) {\n" +
+			"			// anonymous subclass\n" +
+			"		};\n" +
+			"	}\n" +
+			"}\n" +
+			"",
+		}, 
+		getCompilerOptions(),
+		"----------\n" + 
+		"1. ERROR in test\\Test.java (at line 8)\n" + 
+		"	new Feature(null) {\n" + 
+		"	            ^^^^\n" + 
+		"Null type mismatch: required \'@NonNull String\' but the provided value is null\n" + 
+		"----------\n"
+	);
+}
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java
index 9afc96e..3b2eafd 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java
@@ -49,6 +49,7 @@ import org.eclipse.jdt.internal.compiler.lookup.BlockScope;
 import org.eclipse.jdt.internal.compiler.lookup.ExtraCompilerModifiers;
 import org.eclipse.jdt.internal.compiler.lookup.ImplicitNullAnnotationVerifier;
 import org.eclipse.jdt.internal.compiler.lookup.LocalTypeBinding;
+import org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment;
 import org.eclipse.jdt.internal.compiler.lookup.MethodBinding;
 import org.eclipse.jdt.internal.compiler.lookup.ParameterizedGenericMethodBinding;
 import org.eclipse.jdt.internal.compiler.lookup.ParameterizedTypeBinding;
@@ -542,6 +543,15 @@ public class QualifiedAllocationExpression extends AllocationExpression {
 					scope.problemReporter().unnecessaryTypeArgumentsForMethodInvocation(inheritedBinding, this.genericTypeArguments, this.typeArguments);
 				}
 				// Update the anonymous inner class : superclass, interface
+				LookupEnvironment environment=scope.environment();
+				if (environment.globalOptions.isAnnotationBasedNullAnalysisEnabled) {
+					if ((inheritedBinding.tagBits & TagBits.IsNullnessKnown) == 0) {
+						// ensure nullness of originalMethod is known (but we are not interested in reporting problems against originalMethod)
+						new ImplicitNullAnnotationVerifier(environment, environment.globalOptions.inheritNullAnnotations)
+								.checkImplicitNullAnnotations(inheritedBinding, null/*srcMethod*/, false, scope);
+					}
+				}
+
 				this.binding = this.anonymousType.createDefaultConstructorWithBinding(inheritedBinding, 	(this.bits & ASTNode.Unchecked) != 0 && this.genericTypeArguments == null);
 				return this.resolvedType;
 			}
commit 6f3b395a998d8f2267eb8ba114defa6e0efa938c
Author: Stephan Herrmann <stephan.herrmann@berlin.de>
Date:   Sat Jan 21 13:40:07 2017 +0100

    Bug 509328 - [1.8][null] @NonNullByDefault on constructor ignored when
    used from anonymous subclass via .class file
    - fixed copy&paste comment error

1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java
index 3b2eafd..712321e 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java
@@ -546,7 +546,7 @@ public class QualifiedAllocationExpression extends AllocationExpression {
 				LookupEnvironment environment=scope.environment();
 				if (environment.globalOptions.isAnnotationBasedNullAnalysisEnabled) {
 					if ((inheritedBinding.tagBits & TagBits.IsNullnessKnown) == 0) {
-						// ensure nullness of originalMethod is known (but we are not interested in reporting problems against originalMethod)
+						// ensure nullness of inheritedBinding is known (but we are not interested in reporting problems against inheritedBinding)
 						new ImplicitNullAnnotationVerifier(environment, environment.globalOptions.inheritNullAnnotations)
 								.checkImplicitNullAnnotations(inheritedBinding, null/*srcMethod*/, false, scope);
 					}
commit 4e66d1b7e6fc066342a0deceebcf1f0865e91826
Author: Till Brychcy <register.eclipse@brychcy.de>
Date:   Sat Jan 21 22:01:48 2017 +0100

    Bug 509328 - [1.8][null] @NonNullByDefault on constructor ignored when
    used from anonymous subclass via .class file - refactoring + missing
    check added
    
    Change-Id: Ib226b97f2558a5865ad234b7640d15deee20f89e

1	4	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java
1	5	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java
1	5	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java
3	10	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java
1	5	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
9	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ImplicitNullAnnotationVerifier.java
2	4	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java
index ca43ccf..25abe90 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java
@@ -496,10 +496,7 @@ public TypeBinding resolveType(BlockScope scope) {
  		checkTypeArgumentRedundancy((ParameterizedTypeBinding) this.resolvedType, scope);
  	}
 	if (compilerOptions.isAnnotationBasedNullAnalysisEnabled) {
-		if ((this.binding.tagBits & TagBits.IsNullnessKnown) == 0) {
-			new ImplicitNullAnnotationVerifier(scope.environment(), compilerOptions.inheritNullAnnotations)
-					.checkImplicitNullAnnotations(this.binding, null/*srcMethod*/, false, scope);
-		}
+		ImplicitNullAnnotationVerifier.ensureNullnessIsKnown(this.binding, scope);
 		if (compilerOptions.sourceLevel >= ClassFileConstants.JDK1_8) {
 			if (this.binding instanceof ParameterizedGenericMethodBinding && this.typeArguments != null) {
 				TypeVariableBinding[] typeVariables = this.binding.original().typeVariables();
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java
index 5820c99..58b42a0 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java
@@ -46,7 +46,6 @@ import org.eclipse.jdt.internal.compiler.lookup.ProblemReasons;
 import org.eclipse.jdt.internal.compiler.lookup.RawTypeBinding;
 import org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding;
 import org.eclipse.jdt.internal.compiler.lookup.Scope;
-import org.eclipse.jdt.internal.compiler.lookup.TagBits;
 import org.eclipse.jdt.internal.compiler.lookup.TypeBinding;
 import org.eclipse.jdt.internal.compiler.lookup.TypeBindingVisitor;
 import org.eclipse.jdt.internal.compiler.lookup.TypeIds;
@@ -202,10 +201,7 @@ public abstract class FunctionalExpression extends Expression {
 			}
 			LookupEnvironment environment = blockScope.environment();
 			if (environment.globalOptions.isAnnotationBasedNullAnalysisEnabled) {
-				if ((sam.tagBits & TagBits.IsNullnessKnown) == 0) {
-					new ImplicitNullAnnotationVerifier(environment, environment.globalOptions.inheritNullAnnotations)
-							.checkImplicitNullAnnotations(sam, null, false, blockScope);
-				}
+				ImplicitNullAnnotationVerifier.ensureNullnessIsKnown(sam, blockScope);
 				NullAnnotationMatching.checkForContradictions(sam, this, blockScope);
 			}
 			return this.resolvedType = this.expectedType;		
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java
index 3282917..44c2ad0 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java
@@ -797,11 +797,7 @@ public TypeBinding resolveType(BlockScope scope) {
 	}
 
 	if (compilerOptions.isAnnotationBasedNullAnalysisEnabled) {
-		if ((this.binding.tagBits & TagBits.IsNullnessKnown) == 0) {
-			// not interested in reporting problems against this.binding:
-			new ImplicitNullAnnotationVerifier(scope.environment(), compilerOptions.inheritNullAnnotations)
-					.checkImplicitNullAnnotations(this.binding, null/*srcMethod*/, false, scope);
-		}
+		ImplicitNullAnnotationVerifier.ensureNullnessIsKnown(this.binding, scope);
 		if (compilerOptions.sourceLevel >= ClassFileConstants.JDK1_8) {
 			if (this.binding instanceof ParameterizedGenericMethodBinding && this.typeArguments != null) {
 				TypeVariableBinding[] typeVariables = this.binding.original().typeVariables();
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java
index 712321e..6a377df 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java
@@ -289,10 +289,7 @@ public class QualifiedAllocationExpression extends AllocationExpression {
 		if (result != null && !result.isPolyType() && this.binding != null) {
 			final CompilerOptions compilerOptions = scope.compilerOptions();
 			if (compilerOptions.isAnnotationBasedNullAnalysisEnabled) {
-				if ((this.binding.tagBits & TagBits.IsNullnessKnown) == 0) {
-					new ImplicitNullAnnotationVerifier(scope.environment(), compilerOptions.inheritNullAnnotations)
-							.checkImplicitNullAnnotations(this.binding, null/*srcMethod*/, false, scope);
-				}
+				ImplicitNullAnnotationVerifier.ensureNullnessIsKnown(this.binding, scope);
 				if (compilerOptions.sourceLevel >= ClassFileConstants.JDK1_8) {
 					if (this.binding instanceof ParameterizedGenericMethodBinding && this.typeArguments != null) {
 						TypeVariableBinding[] typeVariables = this.binding.original().typeVariables();
@@ -308,7 +305,7 @@ public class QualifiedAllocationExpression extends AllocationExpression {
 		}
 		return result;
 	}
-	
+
 	private TypeBinding resolveTypeForQualifiedAllocationExpression(BlockScope scope) {
 		// Propagate the type checking to the arguments, and checks if the constructor is defined.
 		// ClassInstanceCreationExpression ::= Primary '.' 'new' SimpleName '(' ArgumentListopt ')' ClassBodyopt
@@ -545,11 +542,7 @@ public class QualifiedAllocationExpression extends AllocationExpression {
 				// Update the anonymous inner class : superclass, interface
 				LookupEnvironment environment=scope.environment();
 				if (environment.globalOptions.isAnnotationBasedNullAnalysisEnabled) {
-					if ((inheritedBinding.tagBits & TagBits.IsNullnessKnown) == 0) {
-						// ensure nullness of inheritedBinding is known (but we are not interested in reporting problems against inheritedBinding)
-						new ImplicitNullAnnotationVerifier(environment, environment.globalOptions.inheritNullAnnotations)
-								.checkImplicitNullAnnotations(inheritedBinding, null/*srcMethod*/, false, scope);
-					}
+					ImplicitNullAnnotationVerifier.ensureNullnessIsKnown(inheritedBinding, scope);
 				}
 
 				this.binding = this.anonymousType.createDefaultConstructorWithBinding(inheritedBinding, 	(this.bits & ASTNode.Unchecked) != 0 && this.genericTypeArguments == null);
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
index 3a2af2c..bc0c7a6 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
@@ -755,11 +755,7 @@ public class ReferenceExpression extends FunctionalExpression implements IPolyEx
 		CompilerOptions compilerOptions = scope.compilerOptions();
 		if (compilerOptions.isAnnotationBasedNullAnalysisEnabled) {
         	if (this.expectedType == null || !NullAnnotationMatching.hasContradictions(this.expectedType)) { // otherwise assume it has been reported and we can do nothing here
-        		if ((this.binding.tagBits & TagBits.IsNullnessKnown) == 0) {
-        			// not interested in reporting problems against this.binding:
-        			new ImplicitNullAnnotationVerifier(scope.environment(), compilerOptions.inheritNullAnnotations)
-        					.checkImplicitNullAnnotations(this.binding, null/*srcMethod*/, false, scope);
-        		}
+        		ImplicitNullAnnotationVerifier.ensureNullnessIsKnown(this.binding, scope);
 	        	// TODO: simplify by using this.freeParameters?
 	        	int len;
 	        	int expectedlen = this.binding.parameters.length;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ImplicitNullAnnotationVerifier.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ImplicitNullAnnotationVerifier.java
index 2e127a7..c4afbca 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ImplicitNullAnnotationVerifier.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ImplicitNullAnnotationVerifier.java
@@ -32,6 +32,15 @@ import org.eclipse.jdt.internal.compiler.impl.CompilerOptions;
  */
 @SuppressWarnings({"rawtypes", "unchecked"})
 public class ImplicitNullAnnotationVerifier {
+	public static void ensureNullnessIsKnown(MethodBinding methodBinding, Scope scope) {
+		if ((methodBinding.tagBits & TagBits.IsNullnessKnown) == 0) {
+			LookupEnvironment environment2 = scope.environment();
+			// ensure nullness of methodBinding is known (but we are not interested in reporting problems against methodBinding)
+			new ImplicitNullAnnotationVerifier(environment2, environment2.globalOptions.inheritNullAnnotations)
+					.checkImplicitNullAnnotations(methodBinding, null/*srcMethod*/, false, scope);
+		}
+	}
+
 
 	/**
 	 * Simple record to store nullness info for one argument or return type
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java
index 524d1e4..7a870c4 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java
@@ -61,10 +61,8 @@ public class ParameterizedGenericMethodBinding extends ParameterizedMethodBindin
 	public static MethodBinding computeCompatibleMethod(MethodBinding originalMethod, TypeBinding[] arguments, Scope scope,	InvocationSite invocationSite)
 	{
 		LookupEnvironment environment = scope.environment();
-		if ((originalMethod.tagBits & TagBits.IsNullnessKnown) == 0) {
-			// ensure nullness of originalMethod is known (but we are not interested in reporting problems against originalMethod)
-			new ImplicitNullAnnotationVerifier(environment, environment.globalOptions.inheritNullAnnotations)
-					.checkImplicitNullAnnotations(originalMethod, null/*srcMethod*/, false, scope);
+		if(environment.globalOptions.isAnnotationBasedNullAnalysisEnabled) {
+			ImplicitNullAnnotationVerifier.ensureNullnessIsKnown(originalMethod, scope);
 		}
 		ParameterizedGenericMethodBinding methodSubstitute;
 		TypeVariableBinding[] typeVariables = originalMethod.typeVariables;

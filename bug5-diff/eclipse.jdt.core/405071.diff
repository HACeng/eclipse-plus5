commit b0c126113d3919e827d562fe7ceede775b6f96a6
Author: ssankaran <srikanth_sankaran@in.ibm.com>
Date:   Wed Apr 24 23:37:40 2013 +0530

    Fixed Bug 405071 - [1.8][compiler][codegen] Generate code for array
    constructor references

88	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaExpressionsTest.java
30	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java
9	4	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
6	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java
20	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java
15	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SyntheticMethodBinding.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaExpressionsTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaExpressionsTest.java
index c856377..8ae36d9 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaExpressionsTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaExpressionsTest.java
@@ -392,6 +392,94 @@ public void test017() {
 				},
 				"SUCCESS");
 }
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=405071, [1.8][compiler][codegen] Generate code for array constructor references
+public void test018() {
+	this.runConformTest(
+			new String[] {
+					"X.java",
+					"interface I {\n" +
+					"	X [][][] copy (short x);\n" +
+					"}\n" +
+					"public class X  {\n" +
+					"	public static void main(String[] args) {\n" +
+					"		I i = X[][][]::new;\n" +
+					"       I j = X[][][]::new;\n" +
+					"		X[][][] x = i.copy((short) 631);\n" +
+					"		System.out.println(x.length);\n" +
+					"       x = j.copy((short) 136);\n" +
+					"		System.out.println(x.length);\n" +
+					"	}\n" +
+					"}\n",
+				},
+				"631\n" + 
+				"136");
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=405071, [1.8][compiler][codegen] Generate code for array constructor references
+public void test019() {
+	this.runConformTest(
+			new String[] {
+					"X.java",
+					"interface I {\n" +
+					"	X [][][] copy (int x);\n" +
+					"}\n" +
+					"public class X  {\n" +
+					"	public static void main(String[] args) {\n" +
+					"		I i = X[][][]::new;\n" +
+					"       I j = X[][][]::new;\n" +
+					"		X[][][] x = i.copy(631);\n" +
+					"		System.out.println(x.length);\n" +
+					"       x = j.copy(136);\n" +
+					"		System.out.println(x.length);\n" +
+					"	}\n" +
+					"}\n",
+				},
+				"631\n" + 
+				"136");
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=405071, [1.8][compiler][codegen] Generate code for array constructor references
+public void test020() {
+	this.runConformTest(
+			new String[] {
+					"X.java",
+					"interface I {\n" +
+					"	X [][][] copy (Integer x);\n" +
+					"}\n" +
+					"public class X  {\n" +
+					"	public static void main(String[] args) {\n" +
+					"		I i = X[][][]::new;\n" +
+					"       I j = X[][][]::new;\n" +
+					"		X[][][] x = i.copy(631);\n" +
+					"		System.out.println(x.length);\n" +
+					"       x = j.copy(136);\n" +
+					"		System.out.println(x.length);\n" +
+					"	}\n" +
+					"}\n",
+				},
+				"631\n" + 
+				"136");
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=405071, [1.8][compiler][codegen] Generate code for array constructor references
+public void test021() {
+	this.runConformTest(
+			new String[] {
+					"X.java",
+					"interface I {\n" +
+					"	X [][][] copy (Integer x);\n" +
+					"}\n" +
+					"public class X  {\n" +
+					"	public static void main(String[] args) {\n" +
+					"		I i = X[][][]::new;\n" +
+					"       I j = X[][][]::new;\n" +
+					"		X[][][] x = i.copy(new Integer(631));\n" +
+					"		System.out.println(x.length);\n" +
+					"       x = j.copy(new Integer((short)136));\n" +
+					"		System.out.println(x.length);\n" +
+					"	}\n" +
+					"}\n",
+				},
+				"631\n" + 
+				"136");
+}
 public static Class testClass() {
 	return LambdaExpressionsTest.class;
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java
index 7cdb0b6..fef09d7 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java
@@ -808,7 +808,9 @@ public class ClassFile implements TypeConstants, TypeIds {
 			LambdaExpression [] lambdas = this.referenceBinding.getLambdaMethods();  // refresh as a lambda code generation could schedule nested lambdas for code generation.
 			int lambdaCount = lambdas == null ? 0 : lambdas.length;
 			if (lambdaCount > currentLambda) {
-				lambdas[currentLambda++].generateCode(this.referenceBinding.scope, this);
+				LambdaExpression lambda = lambdas[currentLambda++];
+				if (lambda != null) // null ==> completely amorphous synthetic lambdas for array construction and such.
+					lambda.generateCode(this.referenceBinding.scope, this);
 			} else {
 				doneGeneratingLambdas = true;
 			}
@@ -856,11 +858,38 @@ public class ClassFile implements TypeConstants, TypeIds {
 						break;
 					case SyntheticMethodBinding.TooManyEnumsConstants :
 						addSyntheticEnumInitializationMethod(syntheticMethod);
+						break;
+					case SyntheticMethodBinding.ArrayConstructor:
+						addSyntheticArrayConstructor(syntheticMethod);
+						break;
 				}
 			}
 		}
 	}
 
+	public void addSyntheticArrayConstructor(SyntheticMethodBinding methodBinding) {
+		generateMethodInfoHeader(methodBinding);
+		int methodAttributeOffset = this.contentsOffset;
+		// this will add exception attribute, synthetic attribute, deprecated attribute,...
+		int attributeNumber = generateMethodInfoAttributes(methodBinding);
+		// Code attribute
+		int codeAttributeOffset = this.contentsOffset;
+		attributeNumber++; // add code attribute
+		generateCodeAttributeHeader();
+		this.codeStream.init(this);
+		this.codeStream.generateSyntheticBodyForArrayConstructor(methodBinding);
+		completeCodeAttributeForSyntheticMethod(
+			methodBinding,
+			codeAttributeOffset,
+			((SourceTypeBinding) methodBinding.declaringClass)
+				.scope
+				.referenceCompilationUnit()
+				.compilationResult
+				.getLineSeparatorPositions());
+		// update the number of attributes
+		this.contents[methodAttributeOffset++] = (byte) (attributeNumber >> 8);
+		this.contents[methodAttributeOffset] = (byte) attributeNumber;
+	}
 	/**
 	 * INTERNAL USE-ONLY
 	 * Generate the bytes for a synthetic method that provides an access to a private constructor.
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
index 56ff5bd..c33621b 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
@@ -32,6 +32,7 @@ import org.eclipse.jdt.internal.compiler.flow.FlowContext;
 import org.eclipse.jdt.internal.compiler.flow.FlowInfo;
 import org.eclipse.jdt.internal.compiler.impl.CompilerOptions;
 import org.eclipse.jdt.internal.compiler.impl.Constant;
+import org.eclipse.jdt.internal.compiler.lookup.ArrayBinding;
 import org.eclipse.jdt.internal.compiler.lookup.Binding;
 import org.eclipse.jdt.internal.compiler.lookup.BlockScope;
 import org.eclipse.jdt.internal.compiler.lookup.InvocationSite;
@@ -40,6 +41,7 @@ import org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding;
 import org.eclipse.jdt.internal.compiler.lookup.ProblemReasons;
 import org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding;
 import org.eclipse.jdt.internal.compiler.lookup.Scope;
+import org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding;
 import org.eclipse.jdt.internal.compiler.lookup.TagBits;
 import org.eclipse.jdt.internal.compiler.lookup.TypeBinding;
 import org.eclipse.jdt.internal.compiler.lookup.TypeIds;
@@ -69,6 +71,10 @@ public class ReferenceExpression extends FunctionalExpression implements Invocat
 	}
  
 	public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired) {
+		if (isConstructorReference() && this.receiverType.isArrayType()) {
+			SourceTypeBinding sourceType = currentScope.enclosingSourceType();
+			this.binding = sourceType.addSyntheticArrayConstructor((ArrayBinding) this.receiverType);
+		}
 		int pc = codeStream.position;
 		if (this.haveReceiver) {
 			this.lhs.generateCode(currentScope, codeStream, true);
@@ -165,7 +171,8 @@ public class ReferenceExpression extends FunctionalExpression implements Invocat
 		*/
 		
 		// handle the special case of array construction first.
-        final int parametersLength = descriptorParameters.length;
+        this.receiverType = lhsType;
+		final int parametersLength = descriptorParameters.length;
         if (isConstructorReference() && lhsType.isArrayType()) {
         	final TypeBinding leafComponentType = lhsType.leafComponentType();
 			if (leafComponentType.isParameterizedType()) {
@@ -180,11 +187,9 @@ public class ReferenceExpression extends FunctionalExpression implements Invocat
         		scope.problemReporter().constructedArrayIncompatible(this, lhsType, this.descriptor.returnType);
         		return this.resolvedType = null;
         	}
-        	return this.resolvedType; // No binding construction possible. Code generator will have to conjure up a rabbit.
+        	return this.resolvedType; // No binding construction possible right now. Code generator will have to conjure up a rabbit.
         }
 		
-        this.receiverType = lhsType;
-		
 		this.haveReceiver = true;
 		if (this.lhs instanceof NameReference) {
 			if ((this.lhs.bits & ASTNode.RestrictiveFlagMASK) == Binding.TYPE) {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java
index cb9799f..9eb0529 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/CodeStream.java
@@ -2433,7 +2433,12 @@ public void generateSyntheticBodyForConstructorAccess(SyntheticMethodBinding acc
 	invoke(Opcodes.OPC_invokespecial, constructorBinding, null /* default declaringClass */);
 	return_();
 }
-
+public void generateSyntheticBodyForArrayConstructor(SyntheticMethodBinding methodBinding) {
+	initializeMaxLocals(methodBinding);
+	iload_0();
+	anewarray(((ArrayBinding) methodBinding.returnType).elementsType());
+	areturn();
+}
 //static X valueOf(String name) {
 // return (X) Enum.valueOf(X.class, name);
 //}
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java
index e962962..05ee81a 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java
@@ -565,6 +565,26 @@ public SyntheticMethodBinding addSyntheticMethod(MethodBinding targetMethod, boo
 	}
 	return accessMethod;
 }
+/* Add a new synthetic method for array constructor reference expressions of the form X[]::new */
+public SyntheticMethodBinding addSyntheticArrayConstructor(ArrayBinding arrayType) {
+	if (this.synthetics == null)
+		this.synthetics = new HashMap[MAX_SYNTHETICS];
+	if (this.synthetics[SourceTypeBinding.METHOD_EMUL] == null)
+		this.synthetics[SourceTypeBinding.METHOD_EMUL] = new HashMap(5);
+
+	SyntheticMethodBinding constructor = null;
+	SyntheticMethodBinding[] constructors = (SyntheticMethodBinding[]) this.synthetics[SourceTypeBinding.METHOD_EMUL].get(arrayType);
+	
+	if (constructors == null) {
+		int ordinal = addLambdaMethod(null); // amorphous completely synthetic lambda - added just to avoid name clash.
+		constructor = new SyntheticMethodBinding(arrayType, CharOperation.concat(TypeConstants.ANONYMOUS_METHOD, Integer.toString(ordinal).toCharArray()), this);
+		this.synthetics[SourceTypeBinding.METHOD_EMUL].put(arrayType, constructors = new SyntheticMethodBinding[1]);
+		constructors[0] = constructor;
+	} else {
+		constructor = constructors[0];
+	}
+	return constructor;
+}
 /*
  * Record the fact that bridge methods need to be generated to override certain inherited methods
  */
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SyntheticMethodBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SyntheticMethodBinding.java
index 05b6e76..efd9cfc 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SyntheticMethodBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SyntheticMethodBinding.java
@@ -46,6 +46,7 @@ public class SyntheticMethodBinding extends MethodBinding {
 	public final static int EnumValueOf = 10; // enum #valueOf(String)
 	public final static int SwitchTable = 11; // switch table method
 	public final static int TooManyEnumsConstants = 12; // too many enum constants
+	public final static int ArrayConstructor = 13; // X[]::new
 
 	public int sourceStart = 0; // start position of the matching declaration
 	public int index; // used for sorting access methods in the class file
@@ -318,6 +319,20 @@ public class SyntheticMethodBinding extends MethodBinding {
 		this.index = methodId;
 	}
 
+	public SyntheticMethodBinding(ArrayBinding arrayType, char [] lambdaName, SourceTypeBinding declaringClass) {
+	    this.declaringClass = declaringClass;
+	    this.selector = lambdaName;
+	    this.modifiers = ClassFileConstants.AccSynthetic | ClassFileConstants.AccPrivate | ClassFileConstants.AccStatic;
+		this.tagBits |= (TagBits.AnnotationResolved | TagBits.DeprecatedAnnotationResolved);
+	    this.returnType = arrayType;
+	    this.parameters = new TypeBinding[] { TypeBinding.INT };
+	    this.thrownExceptions = Binding.NO_EXCEPTIONS;
+	    this.purpose = SyntheticMethodBinding.ArrayConstructor;
+		SyntheticMethodBinding[] knownAccessMethods = declaringClass.syntheticMethods();
+		int methodId = knownAccessMethods == null ? 0 : knownAccessMethods.length;
+		this.index = methodId;
+	}
+
 	/**
 	 * An constructor accessor is a constructor with an extra argument (declaringClass), in case of
 	 * collision with an existing constructor, then add again an extra argument (declaringClass again).

commit 6c7de59cc4e8b7d3ff952cb73eea6ba69e83b190
Author: Jayaprakash Arthanareeswaran <jarthana@in.ibm.com>
Date:   Tue Nov 12 12:58:21 2013 +0530

    Bug 420660 - [1.8][api] Make "effectively final" state of local
    variables available

114	0	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Assignment.java
0	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalVariableBinding.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TagBits.java
4	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/VariableBinding.java
15	1	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IVariableBinding.java
8	1	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/RecoveredVariableBinding.java
13	1	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableBinding.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
index 5dfb444..1b53555 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
@@ -3397,4 +3397,118 @@ public class ASTConverter18Test extends ConverterTestSetup {
 		binding =  method.resolveBinding();
 		assertTrue("binding is static", (binding.getModifiers() & Modifier.STATIC) != 0);
 	}
+
+	/*
+	 * https://bugs.eclipse.org/bugs/show_bug.cgi?id=420660
+	 */
+	public void testBug420660() throws JavaModelException {
+		String contents =
+			"package java.lang;\n" +
+			"public class X {\n" +
+			"		public void foo(int p, int q) {\n" +
+			"			final int finalVar = 1; // not effectively final! \n" +
+			"			int effectivelyFinalVar = 2;\n" +
+			"			int nonFinalVar = 3;\n" +
+			"			nonFinalVar = 4; \n" +
+			"			q = 0;\n" + 
+			"			try (FIS fis = new FIS()) {\n" + 
+			"				if (q == 0) { throw new IOError();	} else { throw new IllegalStateException(); }\n" +
+	        "			} catch (IOError | IllegalStateException implicitlyFinalExc) {\n" + 
+	        "    			// implicitlyFinalExc is not effectively final!	\n" + 
+	        "			} catch (Exception effectivelyFinalExc) {	\n" + 
+	        "			}\n" + 
+			"		}\n" +
+			"}\n" +
+			"class IOError extends Exception {private static final long serialVersionUID = 1L;}\n" +
+			"class IllegalStateException extends Exception {private static final long serialVersionUID = 1L;}\n" +
+			"class FIS implements AutoCloseable {\n	public void close() throws Exception {} \n }\n" +
+			"interface AutoCloseable { \n void close() throws Exception; \n}";
+		this.workingCopy = getWorkingCopy("/Converter18/src/java/lang/X.java", true/*resolve*/);
+		ASTNode node = buildAST(contents, this.workingCopy);
+		assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, node.getNodeType());
+		CompilationUnit compilationUnit = (CompilationUnit) node;
+		assertProblemsSize(compilationUnit, 0);
+		node = getASTNode(compilationUnit, 0);
+		assertEquals("Not a type declaration", ASTNode.TYPE_DECLARATION, node.getNodeType());
+		MethodDeclaration[] methods = ((TypeDeclaration) node).getMethods();
+		assertEquals("Incorrect no of methods", 1, methods.length);
+		MethodDeclaration method = methods[0];
+		List params = method.parameters();
+		assertEquals("Incorrect no of parameters", 2, params.size());
+		SingleVariableDeclaration variable = (SingleVariableDeclaration) params.get(0);
+		IVariableBinding binding = variable.resolveBinding();
+		assertTrue("Should be effectively final", binding.isEffectivelyFinal());
+		variable = (SingleVariableDeclaration) params.get(1);
+		binding = variable.resolveBinding();
+		assertFalse("Should not be effectively final", binding.isEffectivelyFinal());
+		
+		List statements = method.getBody().statements();
+		VariableDeclarationStatement statement = (VariableDeclarationStatement) statements.get(0);
+		List fragments = statement.fragments();
+		VariableDeclarationFragment fragment = (VariableDeclarationFragment) fragments.get(0);
+		binding = fragment.resolveBinding();
+		assertFalse("Should not be effectively final", binding.isEffectivelyFinal());
+		statement = (VariableDeclarationStatement) statements.get(1);
+		fragments = statement.fragments();
+		fragment = (VariableDeclarationFragment) fragments.get(0);
+		binding = fragment.resolveBinding();
+		assertTrue("Should be effectively final", binding.isEffectivelyFinal());
+
+		statement = (VariableDeclarationStatement) statements.get(2);
+		fragments = statement.fragments();
+		fragment = (VariableDeclarationFragment) fragments.get(0);
+		binding = fragment.resolveBinding();
+		assertFalse("Should not be effectively final", binding.isEffectivelyFinal());
+		
+		TryStatement tryStmt = (TryStatement) statements.get(5);
+		List resources = tryStmt.resources();
+		VariableDeclarationExpression resourceExp = (VariableDeclarationExpression) resources.get(0);
+		fragment = (VariableDeclarationFragment) resourceExp.fragments().get(0);
+		binding = fragment.resolveBinding();
+		assertFalse("Should not be effectively final", binding.isEffectivelyFinal());
+
+		List catches = tryStmt.catchClauses();
+		CatchClause catchCl = (CatchClause) catches.get(1);
+		variable = catchCl.getException();
+		binding = variable.resolveBinding();
+		assertTrue("Should be effectively final", binding.isEffectivelyFinal());
+		catchCl = (CatchClause) catches.get(0);
+		variable = catchCl.getException();
+		binding = variable.resolveBinding();
+		assertFalse("Should not be effectively final", binding.isEffectivelyFinal());
+	}
+	/*
+	 * https://bugs.eclipse.org/bugs/show_bug.cgi?id=420660
+	 */
+	public void testBug420660a() throws JavaModelException {
+		String contents =
+			"interface I {\nvoid foo();\n}\n" +
+			"interface J {}\n" +
+			"public class X {\n" +
+			"		void foo(int [] p) {\n" +
+			"			for (int is : p) {\n" +
+			"				I j = new I () {\n" +
+			"					public void foo() {\n" +
+			"						System.out.println(is);\n" +
+			"					}\n" + 
+			"				};\n" + 
+	        "			}\n" + 
+			"		}\n" +
+			"}\n";
+		this.workingCopy = getWorkingCopy("/Converter18/src/X.java", true/*resolve*/);
+		ASTNode node = buildAST(contents, this.workingCopy);
+		assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, node.getNodeType());
+		CompilationUnit compilationUnit = (CompilationUnit) node;
+		assertProblemsSize(compilationUnit, 0);
+		node = getASTNode(compilationUnit, 2);
+		assertEquals("Not a type declaration", ASTNode.TYPE_DECLARATION, node.getNodeType());
+		MethodDeclaration[] methods = ((TypeDeclaration) node).getMethods();
+		assertEquals("Incorrect no of methods", 1, methods.length);
+		MethodDeclaration method = methods[0];
+		List statements = method.getBody().statements();
+		EnhancedForStatement stmt = (EnhancedForStatement) statements.get(0);
+		SingleVariableDeclaration variable = stmt.getParameter();
+		IVariableBinding binding = variable.resolveBinding();
+		assertTrue("Should be effectively final", binding.isEffectivelyFinal());
+	}
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Assignment.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Assignment.java
index fa24561..70113bf 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Assignment.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Assignment.java
@@ -197,7 +197,7 @@ public TypeBinding resolveType(BlockScope scope) {
 		this.resolvedType = lhsType.capture(scope, this.sourceEnd);
 	}
 	LocalVariableBinding localVariableBinding = this.lhs.localVariableBinding();
-	if (localVariableBinding != null && localVariableBinding.isCatchParameter()) { 
+	if (localVariableBinding != null && (localVariableBinding.isCatchParameter() || localVariableBinding.isParameter())) { 
 		localVariableBinding.tagBits &= ~TagBits.IsEffectivelyFinal;  // as it is already definitely assigned, we can conclude already. Also note: catch parameter cannot be compound assigned.
 	}
 	TypeBinding rhsType = this.expression.resolveType(scope);
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalVariableBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalVariableBinding.java
index 451fbc6..124bd03 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalVariableBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalVariableBinding.java
@@ -61,7 +61,6 @@ public class LocalVariableBinding extends VariableBinding {
 
 		this(declaration.name, type, modifiers, isArgument);
 		this.declaration = declaration;
-		this.tagBits |= TagBits.IsEffectivelyFinal;
 	}
 	
 	// argument
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TagBits.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TagBits.java
index cba4fda..10c1777 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TagBits.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TagBits.java
@@ -64,7 +64,7 @@ public interface TagBits {
 	long IsArgument = ASTNode.Bit11; // local
 	long ClearPrivateModifier = ASTNode.Bit10; // constructor binding
 	
-	// for java 7
+	// for java 7 - this bit is also set if the variable is explicitly or implicitly final
 	long IsEffectivelyFinal = ASTNode.Bit12; // local
 	long MultiCatchParameter = ASTNode.Bit13; // local
 	long IsResource = ASTNode.Bit14; // local
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/VariableBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/VariableBinding.java
index 8343838..9ffa2d1 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/VariableBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/VariableBinding.java
@@ -49,9 +49,11 @@ public abstract class VariableBinding extends Binding {
 	public final boolean isBlankFinal(){
 		return (this.modifiers & ExtraCompilerModifiers.AccBlankFinal) != 0;
 	}
-	/* Answer true if the receiver is final and cannot be changed
-	*/
 
+	/* Answer true if the receiver is explicitly or implicitly final
+	 * and cannot be changed. Resources on try and multi catch variables are
+	 * marked as implicitly final.
+	*/
 	public final boolean isFinal() {
 		return (this.modifiers & ClassFileConstants.AccFinal) != 0;
 	}
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IVariableBinding.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IVariableBinding.java
index 789b568..5e335dd 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IVariableBinding.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IVariableBinding.java
@@ -1,10 +1,14 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2008 IBM Corporation and others.
+ * Copyright (c) 2000, 2013 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *     IBM Corporation - initial API and implementation
  *******************************************************************************/
@@ -158,4 +162,14 @@ public interface IVariableBinding extends IBinding {
 	 */
 	public IVariableBinding getVariableDeclaration();
 
+	/**
+	 * Returns whether this binding corresponds to an effectively final local
+	 * variable (JLS8 4.12.4). A variable is said to be effectively final if
+	 * it is not final and never assigned to after its initialization.
+	 *
+	 * @return <code>true</code> if this is an effectively final local variable
+	 * 				and <code>false</code> otherwise
+	 * @since 3.9 BETA_JAVA8
+	 */
+	public boolean isEffectivelyFinal();
 }
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/RecoveredVariableBinding.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/RecoveredVariableBinding.java
index ba512fc..0e6ed50 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/RecoveredVariableBinding.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/RecoveredVariableBinding.java
@@ -1,10 +1,14 @@
 /*******************************************************************************
- * Copyright (c) 2007, 2009 IBM Corporation and others.
+ * Copyright (c) 2007, 2013 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *     IBM Corporation - initial API and implementation
  *******************************************************************************/
@@ -125,4 +129,7 @@ class RecoveredVariableBinding implements IVariableBinding {
 	public boolean isSynthetic() {
 		return false;
 	}
+	public boolean isEffectivelyFinal() {
+		return false;
+	}
 }
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableBinding.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableBinding.java
index c877900..71e8ef7 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableBinding.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableBinding.java
@@ -1,10 +1,14 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2012 IBM Corporation and others.
+ * Copyright (c) 2000, 2013 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *     IBM Corporation - initial API and implementation
  *******************************************************************************/
@@ -417,6 +421,14 @@ class VariableBinding implements IVariableBinding {
 	}
 
 	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.jdt.core.dom.IVariableBinding.isEffectivelyFinal()
+	 */
+	public boolean isEffectivelyFinal() {
+		return (!this.binding.isFinal() && this.binding.isEffectivelyFinal());
+	}
+
+	/*
 	 * For debugging purpose only.
 	 * @see java.lang.Object#toString()
 	 */

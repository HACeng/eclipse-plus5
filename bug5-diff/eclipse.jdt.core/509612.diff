commit f9cdd656232755ca6c0daa6b0c16dc9fc4a4e9a8
Author: Stefan Xenos <sxenos@gmail.com>
Date:   Wed Dec 21 15:55:27 2016 -0500

    Bug 509612 - Address slowness in JarPackageFragmentRoot.computeChildren
    
    Add indexer support for indexing the JDK version for each .jar file
    in the index.
    
    Change-Id: I10d616bf8ce8359d6e71fe2508c813006e70c3ec

1	0	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/Indexer.java
3	3	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/JavaIndex.java
17	0	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdResourceFile.java
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/Indexer.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/Indexer.java
index 2380780..768ce4b 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/Indexer.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/Indexer.java
@@ -762,6 +762,7 @@ public final class Indexer {
 							+ resourceFile.getLocation().getString() + " " + resourceFile.address); //$NON-NLS-1$
 				}
 				converter.addType(binaryType, fieldDescriptor, subMonitor.split(45));
+				resourceFile.setJdkLevel(binaryType.getVersion());
 				indexed = true;
 			}
 		} finally {
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/JavaIndex.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/JavaIndex.java
index 19d4eeb..cbcc001 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/JavaIndex.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/JavaIndex.java
@@ -34,9 +34,9 @@ import org.eclipse.jdt.internal.core.nd.util.CharArrayUtils;
 
 public class JavaIndex {
 	// Version constants
-	static final int CURRENT_VERSION = Nd.version(1, 39);
-	static final int MAX_SUPPORTED_VERSION = Nd.version(1, 39);
-	static final int MIN_SUPPORTED_VERSION = Nd.version(1, 39);
+	static final int CURRENT_VERSION = Nd.version(1, 40);
+	static final int MAX_SUPPORTED_VERSION = Nd.version(1, 40);
+	static final int MIN_SUPPORTED_VERSION = Nd.version(1, 40);
 
 	// Fields for the search header
 	public static final FieldSearchIndex<NdResourceFile> FILES;
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdResourceFile.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdResourceFile.java
index 358fcf8..e18ae26 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdResourceFile.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdResourceFile.java
@@ -42,6 +42,7 @@ public class NdResourceFile extends NdTreeNode {
 	public static final FieldLong HASHCODE_LAST_SCANNED;
 	public static final FieldOneToMany<NdWorkspaceLocation> WORKSPACE_MAPPINGS;
 	public static final FieldString JAVA_ROOT;
+	public static final FieldLong JDK_LEVEL;
 
 	@SuppressWarnings("hiding")
 	public static final StructDef<NdResourceFile> type;
@@ -56,9 +57,12 @@ public class NdResourceFile extends NdTreeNode {
 		HASHCODE_LAST_SCANNED = type.addLong();
 		WORKSPACE_MAPPINGS = FieldOneToMany.create(type, NdWorkspaceLocation.RESOURCE);
 		JAVA_ROOT = type.addString();
+		JDK_LEVEL = type.addLong();
 		type.done();
 	}
 
+	private long jdkLevel; 
+
 	public NdResourceFile(Nd dom, long address) {
 		super(dom, address);
 	}
@@ -67,6 +71,19 @@ public class NdResourceFile extends NdTreeNode {
 		super(nd, null);
 	}
 
+	public long getJdkLevel() {
+		if (this.jdkLevel == 0) {
+			this.jdkLevel = JDK_LEVEL.get(getNd(), this.address);
+		}
+		return this.jdkLevel;
+	}
+
+	public void setJdkLevel(long jdkLevel) {
+		if (getJdkLevel() != jdkLevel) {
+			JDK_LEVEL.put(getNd(), this.address, jdkLevel);
+		}
+	}
+
 	public List<NdTreeNode> getChildren() {
 		return CHILDREN.asList(this.getNd(), this.address);
 	}
commit d7649899f4c2dcb4388cf6391b8958e87aab48aa
Author: Stefan Xenos <sxenos@gmail.com>
Date:   Wed Jan 4 00:02:54 2017 -0500

    Bug 509612 - Address slowness in JarPackageFragmentRoot.computeChildren
    
    Update JarPackageFragmentRoot.computeChildren to read its data from
    the index rather than the original .jar file if the index is available.
    
    Change-Id: I6fb63a9b29b51ccdd01bea757b0e84f77def2a87

73	13	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java
19	2	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/Indexer.java
4	3	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/JavaIndex.java
11	0	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdResourceFile.java
42	0	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdZipEntry.java
12	0	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/util/PathMap.java
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java
index 78a66b4..188abbc 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java
@@ -11,7 +11,9 @@
 package org.eclipse.jdt.internal.core;
 
 import java.net.URL;
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Enumeration;
+import java.util.Set;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipException;
 import java.util.zip.ZipFile;
@@ -20,9 +22,19 @@ import org.eclipse.core.resources.IResource;
 import org.eclipse.core.runtime.CoreException;
 import org.eclipse.core.runtime.IPath;
 import org.eclipse.core.runtime.IStatus;
-import org.eclipse.jdt.core.*;
+import org.eclipse.core.runtime.Path;
+import org.eclipse.jdt.core.IClasspathEntry;
+import org.eclipse.jdt.core.IJavaElement;
+import org.eclipse.jdt.core.IPackageFragmentRoot;
+import org.eclipse.jdt.core.JavaModelException;
 import org.eclipse.jdt.core.compiler.CharOperation;
 import org.eclipse.jdt.internal.compiler.impl.CompilerOptions;
+import org.eclipse.jdt.internal.core.nd.IReader;
+import org.eclipse.jdt.internal.core.nd.java.JavaIndex;
+import org.eclipse.jdt.internal.core.nd.java.NdBinding;
+import org.eclipse.jdt.internal.core.nd.java.NdResourceFile;
+import org.eclipse.jdt.internal.core.nd.java.NdType;
+import org.eclipse.jdt.internal.core.nd.java.NdZipEntry;
 import org.eclipse.jdt.internal.core.util.HashtableOfArrayToObject;
 import org.eclipse.jdt.internal.core.util.Util;
 
@@ -74,19 +86,55 @@ public class JarPackageFragmentRoot extends PackageFragmentRoot {
 	protected boolean computeChildren(OpenableElementInfo info, IResource underlyingResource) throws JavaModelException {
 		HashtableOfArrayToObject rawPackageInfo = new HashtableOfArrayToObject();
 		IJavaElement[] children;
-		ZipFile jar = null;
 		try {
-			Object file = JavaModel.getTarget(getPath(), true);
-			long level = Util.getJdkLevel(file);
-			String compliance = CompilerOptions.versionFromJdkLevel(level);
-			jar = getJar();
-
 			// always create the default package
 			rawPackageInfo.put(CharOperation.NO_STRINGS, new ArrayList[] { EMPTY_LIST, EMPTY_LIST });
 
-			for (Enumeration e= jar.entries(); e.hasMoreElements();) {
-				ZipEntry member= (ZipEntry) e.nextElement();
-				initRawPackageInfo(rawPackageInfo, member.getName(), member.isDirectory(), compliance);
+			boolean usedIndex = false;
+			if (JavaIndex.isEnabled()) {
+				JavaIndex index = JavaIndex.getIndex();
+				try (IReader reader = index.getNd().acquireReadLock()) {
+					NdResourceFile resourceFile = index.getResourceFile(getPath().toString().toCharArray());
+					if (index.isUpToDate(resourceFile)) {
+						usedIndex = true;
+						long level = resourceFile.getJdkLevel();
+						String compliance = CompilerOptions.versionFromJdkLevel(level);
+						// Locate all the non-classfile entries
+						for (NdZipEntry next : resourceFile.getZipEntries()) {
+							String filename = next.getFileName().getString();
+							initRawPackageInfo(rawPackageInfo, filename, filename.endsWith("/"), compliance); //$NON-NLS-1$
+						}
+
+						// Locate all the classfile entries
+						for (NdBinding binding : resourceFile.getBindings()) {
+							if (binding instanceof NdType) {
+								NdType type = (NdType) binding;
+
+								String path = new String(type.getTypeId().getBinaryName()) + ".class"; //$NON-NLS-1$
+								initRawPackageInfo(rawPackageInfo, path, false, compliance); //$NON-NLS-1$
+							}
+						}
+					}
+				}
+			}
+
+			// If we weren't able to compute the set of children from the index (either the index was disabled or didn't
+			// contain an up-to-date entry for this .jar) then fetch it directly from the .jar
+			if (!usedIndex) {
+				Object file = JavaModel.getTarget(getPath(), true);
+				long level = Util.getJdkLevel(file);
+				String compliance = CompilerOptions.versionFromJdkLevel(level);
+				ZipFile jar = null;
+				try {
+					jar = getJar();
+
+					for (Enumeration e= jar.entries(); e.hasMoreElements();) {
+						ZipEntry member= (ZipEntry) e.nextElement();
+						initRawPackageInfo(rawPackageInfo, member.getName(), member.isDirectory(), compliance);
+					}
+				}  finally {
+					JavaModelManager.getJavaModelManager().closeZipFile(jar);
+				}
 			}
 
 			// loop through all of referenced packages, creating package fragments if necessary
@@ -108,8 +156,6 @@ public class JarPackageFragmentRoot extends PackageFragmentRoot {
 			} else {
 				throw new JavaModelException(e);
 			}
-		} finally {
-			JavaModelManager.getJavaModelManager().closeZipFile(jar);
 		}
 
 		info.setChildren(children);
@@ -213,6 +259,20 @@ public class JarPackageFragmentRoot extends PackageFragmentRoot {
 	public int hashCode() {
 		return this.jarPath.hashCode();
 	}
+	private void addPathsAndParentFoldersToPackageInfo(Set<IPath> alreadyScanned,
+			HashtableOfArrayToObject rawPackageInfo, String pathString, boolean isFolder, String compliance) {
+		IPath path = new Path(pathString);
+		while (path.segmentCount() > 0) {
+			if (alreadyScanned.contains(path)) {
+				break;
+			}
+
+			initRawPackageInfo(rawPackageInfo, path.toString(), false, compliance);
+			alreadyScanned.add(path);
+			path = path.removeLastSegments(1);
+			isFolder = true;
+		}
+	}
 	private void initRawPackageInfo(HashtableOfArrayToObject rawPackageInfo, String entryName, boolean isDirectory, String compliance) {
 		int lastSeparator = isDirectory ? entryName.length()-1 : entryName.lastIndexOf('/');
 		String[] pkgName = Util.splitOn('/', entryName, 0, lastSeparator);
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/Indexer.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/Indexer.java
index 768ce4b..e630ee4 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/Indexer.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/Indexer.java
@@ -73,6 +73,7 @@ import org.eclipse.jdt.internal.core.nd.java.NdResourceFile;
 import org.eclipse.jdt.internal.core.nd.java.NdType;
 import org.eclipse.jdt.internal.core.nd.java.NdTypeId;
 import org.eclipse.jdt.internal.core.nd.java.NdWorkspaceLocation;
+import org.eclipse.jdt.internal.core.nd.java.NdZipEntry;
 import org.eclipse.jdt.internal.core.nd.java.TypeRef;
 import org.eclipse.jdt.internal.core.nd.java.model.BinaryTypeDescriptor;
 import org.eclipse.jdt.internal.core.nd.java.model.BinaryTypeFactory;
@@ -681,13 +682,29 @@ public final class Indexer {
 				for (Enumeration<? extends ZipEntry> e = zipFile.entries(); e.hasMoreElements();) {
 					SubMonitor nextEntry = subMonitor.split(1).setWorkRemaining(2);
 					ZipEntry member = e.nextElement();
+					String fileName = member.getName();
+					boolean classFileName = org.eclipse.jdt.internal.compiler.util.Util.isClassFileName(fileName);
+					if (member.isDirectory() || !classFileName) {
+						this.nd.acquireWriteLock(subMonitor.split(5));
+						try {
+							if (resourceFile.isInIndex()) {
+								if (DEBUG_INSERTIONS) {
+									Package.logInfo("Inserting non-class file " + fileName + " into " //$NON-NLS-1$//$NON-NLS-2$
+											+ resourceFile.getLocation().getString() + " " + resourceFile.address); //$NON-NLS-1$
+								}
+								new NdZipEntry(resourceFile, fileName);
+							}
+						} finally {
+							this.nd.releaseWriteLock();
+						}
+					}
 					if (member.isDirectory()) {
+						// Note that non-empty directories are stored implicitly (as the parent directory of a file
+						// or class within the jar). Empty directories are not currently stored in the index.
 						continue;
 					}
 					nextEntry.split(1);
-					String fileName = member.getName();
 
-					boolean classFileName = org.eclipse.jdt.internal.compiler.util.Util.isClassFileName(fileName);
 					if (classFileName) {
 						String binaryName = fileName.substring(0,
 								fileName.length() - SuffixConstants.SUFFIX_STRING_class.length());
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/JavaIndex.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/JavaIndex.java
index cbcc001..9d8f411 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/JavaIndex.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/JavaIndex.java
@@ -34,9 +34,9 @@ import org.eclipse.jdt.internal.core.nd.util.CharArrayUtils;
 
 public class JavaIndex {
 	// Version constants
-	static final int CURRENT_VERSION = Nd.version(1, 40);
-	static final int MAX_SUPPORTED_VERSION = Nd.version(1, 40);
-	static final int MIN_SUPPORTED_VERSION = Nd.version(1, 40);
+	static final int CURRENT_VERSION = Nd.version(1, 41);
+	static final int MAX_SUPPORTED_VERSION = Nd.version(1, 41);
+	static final int MIN_SUPPORTED_VERSION = Nd.version(1, 41);
 
 	// Fields for the search header
 	public static final FieldSearchIndex<NdResourceFile> FILES;
@@ -301,6 +301,7 @@ public class JavaIndex {
 		registry.register(0x01E0, NdTypeInterface.type.getFactory());
 		registry.register(0x01F0, NdVariable.type.getFactory());
 		registry.register(0x0200, NdWorkspaceLocation.type.getFactory());
+		registry.register(0x0210, NdZipEntry.type.getFactory());
 		return registry;
 	}
 }
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdResourceFile.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdResourceFile.java
index e18ae26..286180f 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdResourceFile.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdResourceFile.java
@@ -43,6 +43,7 @@ public class NdResourceFile extends NdTreeNode {
 	public static final FieldOneToMany<NdWorkspaceLocation> WORKSPACE_MAPPINGS;
 	public static final FieldString JAVA_ROOT;
 	public static final FieldLong JDK_LEVEL;
+	public static final FieldOneToMany<NdZipEntry> ZIP_ENTRIES;
 
 	@SuppressWarnings("hiding")
 	public static final StructDef<NdResourceFile> type;
@@ -58,6 +59,7 @@ public class NdResourceFile extends NdTreeNode {
 		WORKSPACE_MAPPINGS = FieldOneToMany.create(type, NdWorkspaceLocation.RESOURCE);
 		JAVA_ROOT = type.addString();
 		JDK_LEVEL = type.addLong();
+		ZIP_ENTRIES = FieldOneToMany.create(type, NdZipEntry.JAR_FILE);
 		type.done();
 	}
 
@@ -71,6 +73,15 @@ public class NdResourceFile extends NdTreeNode {
 		super(nd, null);
 	}
 
+	/**
+	 * Returns the set of all leaf zip entries that are not .class files. Does not include non-empty directories
+	 * or .class files, but will contain all other zip entries from the original jar file. Returns the empty list
+	 * for non-jar files.
+	 */
+	public List<NdZipEntry> getZipEntries() {
+		return ZIP_ENTRIES.asList(getNd(), getAddress());
+	}
+
 	public long getJdkLevel() {
 		if (this.jdkLevel == 0) {
 			this.jdkLevel = JDK_LEVEL.get(getNd(), this.address);
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdZipEntry.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdZipEntry.java
new file mode 100644
index 0000000..edd04e2
--- /dev/null
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdZipEntry.java
@@ -0,0 +1,42 @@
+package org.eclipse.jdt.internal.core.nd.java;
+
+import org.eclipse.jdt.internal.core.nd.Nd;
+import org.eclipse.jdt.internal.core.nd.NdNode;
+import org.eclipse.jdt.internal.core.nd.db.IString;
+import org.eclipse.jdt.internal.core.nd.field.FieldManyToOne;
+import org.eclipse.jdt.internal.core.nd.field.FieldString;
+import org.eclipse.jdt.internal.core.nd.field.StructDef;
+
+/**
+ * Stores a (non-class) file within a .jar file.
+ */
+public class NdZipEntry extends NdNode {
+	public static final FieldManyToOne<NdResourceFile> JAR_FILE;
+	public static final FieldString FILE_NAME;
+
+	@SuppressWarnings("hiding")
+	public static final StructDef<NdZipEntry> type;
+
+	static {
+		type = StructDef.create(NdZipEntry.class, NdNode.type);
+		JAR_FILE = FieldManyToOne.createOwner(type, NdResourceFile.ZIP_ENTRIES);
+		FILE_NAME = type.addString();
+
+		type.done();
+	}
+
+	public NdZipEntry(Nd nd, long address) {
+		super(nd, address);
+	}
+
+	public NdZipEntry(NdResourceFile nd, String path) {
+		super(nd.getNd());
+
+		JAR_FILE.put(nd.getNd(), getAddress(), nd);
+		FILE_NAME.put(nd.getNd(), getAddress(), path);
+	}
+
+	public IString getFileName() {
+		return FILE_NAME.get(getNd(), getAddress());
+	}
+}
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/util/PathMap.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/util/PathMap.java
index f328fe0..580d6b5 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/util/PathMap.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/util/PathMap.java
@@ -60,6 +60,10 @@ public class PathMap<T> {
 			return next;
 		}
 
+		/**
+		 * Returns this node or one of its descendants whose path is the longest-possible prefix of the given key (or
+		 * equal to it).
+		 */
 		public Node<T> getMostSpecificNode(IPath key) {
 			if (this.depth == key.segmentCount()) {
 				return this;
@@ -222,4 +226,12 @@ public class PathMap<T> {
 		this.root.toString(builder, Path.EMPTY);
 		return builder.toString();
 	}
+
+	/**
+	 * Returns true iff this map contains any key that starts with the given prefix.
+	 */
+	public boolean containsKeyStartingWith(IPath next) {
+		Node<T> node = this.root.getMostSpecificNode(next);
+		return node.depth == next.segmentCount();
+	}
 }
commit 5383d78f920ca4153e3a79f219e74053eaf194c6
Author: Stefan Xenos <sxenos@gmail.com>
Date:   Fri Jan 6 00:19:22 2017 -0500

    Bug 509612 - Address slowness in JarPackageFragmentRoot.computeChildren
    
    Add copyright header that was accidentally omitted in the previous
    commit.
    
    Change-Id: I08bf77c4a6e22c3600c2e146a018efcf8a0b42c3

10	0	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdZipEntry.java
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdZipEntry.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdZipEntry.java
index edd04e2..e0086ab 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdZipEntry.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdZipEntry.java
@@ -1,3 +1,13 @@
+/*******************************************************************************
+ * Copyright (c) 2017 Google, Inc and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *   Stefan Xenos (Google) - Initial implementation
+ *******************************************************************************/
 package org.eclipse.jdt.internal.core.nd.java;
 
 import org.eclipse.jdt.internal.core.nd.Nd;
commit d9b6882b68cef6a1ccd98ce5ac1faf99136c1d18
Author: Stefan Xenos <sxenos@gmail.com>
Date:   Fri Jan 6 22:30:19 2017 -0500

    Bug 509612 - Address slowness in JarPackageFragmentRoot.computeChildren
    
    Remove unused code
    
    Change-Id: Ic3a15c36222c2def5f5bef3d00325e934d253954

0	16	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java
index 52fec6f..e97779d 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JarPackageFragmentRoot.java
@@ -13,7 +13,6 @@ package org.eclipse.jdt.internal.core;
 import java.net.URL;
 import java.util.ArrayList;
 import java.util.Enumeration;
-import java.util.Set;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipException;
 import java.util.zip.ZipFile;
@@ -22,7 +21,6 @@ import org.eclipse.core.resources.IResource;
 import org.eclipse.core.runtime.CoreException;
 import org.eclipse.core.runtime.IPath;
 import org.eclipse.core.runtime.IStatus;
-import org.eclipse.core.runtime.Path;
 import org.eclipse.jdt.core.IClasspathEntry;
 import org.eclipse.jdt.core.IJavaElement;
 import org.eclipse.jdt.core.IPackageFragmentRoot;
@@ -262,20 +260,6 @@ public class JarPackageFragmentRoot extends PackageFragmentRoot {
 	public int hashCode() {
 		return this.jarPath.hashCode();
 	}
-	private void addPathsAndParentFoldersToPackageInfo(Set<IPath> alreadyScanned,
-			HashtableOfArrayToObject rawPackageInfo, String pathString, boolean isFolder, String compliance) {
-		IPath path = new Path(pathString);
-		while (path.segmentCount() > 0) {
-			if (alreadyScanned.contains(path)) {
-				break;
-			}
-
-			initRawPackageInfo(rawPackageInfo, path.toString(), false, compliance);
-			alreadyScanned.add(path);
-			path = path.removeLastSegments(1);
-			isFolder = true;
-		}
-	}
 	private void initRawPackageInfo(HashtableOfArrayToObject rawPackageInfo, String entryName, boolean isDirectory, String compliance) {
 		int lastSeparator = isDirectory ? entryName.length()-1 : entryName.lastIndexOf('/');
 		String[] pkgName = Util.splitOn('/', entryName, 0, lastSeparator);

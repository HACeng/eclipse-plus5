commit 2503f6e89d5262be48c346150170dab19645db2a
Author: Jerome Lanneluc <jeromel>
Date:   Fri Jun 23 10:22:38 2006 +0000

    HEAD - as a consequence of fixing bug 145367, binary children are no longer lazy initialized

2	8	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMember.java
0	16	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryType.java
2	2	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFile.java
6	41	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFileInfo.java
1	10	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/TypeParameter.java
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMember.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMember.java
index 8d3c17e..9ea6723 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMember.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMember.java
@@ -39,16 +39,10 @@ public void copy(IJavaElement container, IJavaElement sibling, String rename, bo
  * @see JavaElement#generateInfos
  */
 protected void generateInfos(Object info, HashMap newElements, IProgressMonitor pm) throws JavaModelException {
-	Openable openableParent = (Openable)getOpenableParent();
-	if (openableParent == null) return;
-	
-	ClassFileInfo openableParentInfo = (ClassFileInfo) JavaModelManager.getJavaModelManager().getInfo(openableParent);
-	if (openableParentInfo == null) {
+	Openable openableParent = (Openable) getOpenableParent();
+	if (JavaModelManager.getJavaModelManager().getInfo(openableParent) == null) {
 		openableParent.generateInfos(openableParent.createElementInfo(), newElements, pm);
-		openableParentInfo = (ClassFileInfo)newElements.get(openableParent);
 	}
-	if (openableParentInfo == null) return;
-	openableParentInfo.getBinaryChildren(newElements); // forces the initialization
 }
 public String[] getCategories() throws JavaModelException {
 	SourceMapper mapper= getSourceMapper();
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryType.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryType.java
index 643f313..f96bb4c 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryType.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryType.java
@@ -169,22 +169,6 @@ public IJavaElement[] getChildren() throws JavaModelException {
 	}
 	// get children
 	ClassFileInfo cfi = getClassFileInfo();
-	if (cfi.binaryChildren == null) {
-		JavaModelManager manager = JavaModelManager.getJavaModelManager();
-		boolean hadTemporaryCache = manager.hasTemporaryCache();
-		try {
-			Object info = manager.getInfo(this);
-			HashMap newElements = manager.getTemporaryCache();
-			cfi.readBinaryChildren(newElements, (IBinaryType)info);
-			if (!hadTemporaryCache) {
-				manager.putInfos(this, newElements);
-			}
-		} finally {
-			if (!hadTemporaryCache) {
-				manager.resetTemporaryCache();
-			}
-		}
-	}
 	return cfi.binaryChildren;
 }
 public IJavaElement[] getChildrenForCategory(String category) throws JavaModelException {
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFile.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFile.java
index 7790e11..bf1e1a9 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFile.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFile.java
@@ -98,7 +98,7 @@ protected boolean buildStructure(OpenableElementInfo info, IProgressMonitor pm,
 	newElements.put(type, typeInfo);
 	
 	// Read children
-	((ClassFileInfo) info).readBinaryChildren((HashMap) newElements, typeInfo);
+	((ClassFileInfo) info).readBinaryChildren(this, (HashMap) newElements, typeInfo);
 	
 	return true;
 }
@@ -169,7 +169,7 @@ public IJavaElement[] codeSelect(int offset, int length, WorkingCopyOwner owner)
  * Returns a new element info for this element.
  */
 protected Object createElementInfo() {
-	return new ClassFileInfo(this);
+	return new ClassFileInfo();
 }
 public boolean equals(Object o) {
 	if (!(o instanceof ClassFile)) return false;
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFileInfo.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFileInfo.java
index e6784d3..0a9f255 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFileInfo.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFileInfo.java
@@ -13,7 +13,6 @@ package org.eclipse.jdt.internal.core;
 import java.util.ArrayList;
 import java.util.HashMap;
 
-import org.eclipse.core.resources.IFile;
 import org.eclipse.jdt.core.*;
 import org.eclipse.jdt.core.IClassFile;
 import org.eclipse.jdt.core.IField;
@@ -38,26 +37,13 @@ import org.eclipse.jdt.internal.compiler.util.SuffixConstants;
 	 * The children of the <code>BinaryType</code> corresponding to our
 	 * <code>ClassFile</code>. These are kept here because we don't have
 	 * access to the <code>BinaryType</code> info (<code>ClassFileReader</code>).
-	 * <p>
-	 * The children are lazily initialized, on the first call to
-	 * <code>getBinaryChildren()</code>, which in turn is called by
-	 * <code>BinaryType.getChildren()</code>. 
 	 */
 	protected JavaElement[] binaryChildren = null;
 	/*
 	 * The type parameters in this class file.
 	 */
 	protected ITypeParameter[] typeParameters;
-	/**
-	 * Back-pointer to the IClassFile to allow lazy initialization.
-	 */
-	protected ClassFile classFile = null;
-/**
- * Creates a new <code>ClassFileInfo</code> for <code>classFile</code>.
- */
-ClassFileInfo(ClassFile classFile) {
-	this.classFile = classFile;
-}
+	
 /**
  * Creates the handles and infos for the fields of the given binary type.
  * Adds new handles to the given vector.
@@ -87,10 +73,11 @@ private void generateInnerClassHandles(IType type, IBinaryType typeInfo, ArrayLi
 	// Can also return an entry for the enclosing type of an inner type.
 	IBinaryNestedType[] innerTypes = typeInfo.getMemberTypes();
 	if (innerTypes != null) {
+		IPackageFragment pkg = (IPackageFragment) type.getAncestor(IJavaElement.PACKAGE_FRAGMENT);
 		for (int i = 0, typeCount = innerTypes.length; i < typeCount; i++) {
 			IBinaryNestedType binaryType = innerTypes[i];
-			IClassFile parentClassFile= ((IPackageFragment)this.classFile.getParent()).getClassFile(new String(ClassFile.unqualifiedName(binaryType.getName())) + SUFFIX_STRING_class);
-			IType innerType = new BinaryType((JavaElement)parentClassFile, ClassFile.simpleName(binaryType.getName()));
+			IClassFile parentClassFile= pkg.getClassFile(new String(ClassFile.unqualifiedName(binaryType.getName())) + SUFFIX_STRING_class);
+			IType innerType = new BinaryType((JavaElement) parentClassFile, ClassFile.simpleName(binaryType.getName()));
 			childrenHandles.add(innerType);
 		}
 	}
@@ -177,16 +164,6 @@ private void generateTypeParameterInfos(BinaryMember parent, char[] signature, H
 	}
 }
 /**
- * Returns the list of children (<code>BinaryMember</code>s) of the
- * <code>BinaryType</code> of our <code>ClassFile</code>.
- */
-IJavaElement[] getBinaryChildren(HashMap newElements) {
-	if (this.binaryChildren == null) {
-		readBinaryChildren(newElements, null/*type info not known here*/);
-	}
-	return this.binaryChildren;
-}
-/**
  * Returns true iff the <code>readBinaryChildren</code> has already
  * been called.
  */
@@ -198,21 +175,9 @@ boolean hasReadBinaryChildren() {
  * <code>ClassFile</code> and adds them to the
  * <code>JavaModelManager</code>'s cache.
  */
-protected void readBinaryChildren(HashMap newElements, IBinaryType typeInfo) {
+protected void readBinaryChildren(ClassFile classFile, HashMap newElements, IBinaryType typeInfo) {
 	ArrayList childrenHandles = new ArrayList();
-	BinaryType type = null;
-	try {
-		type = (BinaryType) this.classFile.getType();
-		if (typeInfo == null) {
-			typeInfo = (IBinaryType) newElements.get(type);
-			if (typeInfo == null) {
-				// create a classfile reader 
-			    typeInfo = this.classFile.getBinaryTypeInfo((IFile)this.classFile.getResource());
-			}
-		}
-	} catch (JavaModelException npe) {
-		return;
-	}
+	BinaryType type = (BinaryType) classFile.getType();
 	ArrayList typeParameterHandles = new ArrayList();
 	if (typeInfo != null) { //may not be a valid class file
 		generateTypeParameterInfos(type, typeInfo.getGenericSignature(), newElements, typeParameterHandles);
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/TypeParameter.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/TypeParameter.java
index 18e013c..2fac008 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/TypeParameter.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/TypeParameter.java
@@ -40,18 +40,9 @@ public class TypeParameter extends SourceRefElement implements ITypeParameter {
 	 */
 	protected void generateInfos(Object info, HashMap newElements, IProgressMonitor pm) throws JavaModelException {
 		Openable openableParent = (Openable)getOpenableParent();
-		if (openableParent == null) return;
-		
-		JavaElementInfo openableParentInfo = (JavaElementInfo) JavaModelManager.getJavaModelManager().getInfo(openableParent);
-		if (openableParentInfo == null) {
+		if (JavaModelManager.getJavaModelManager().getInfo(openableParent) == null) {
 			openableParent.generateInfos(openableParent.createElementInfo(), newElements, pm);
 		}
-		
-		if (openableParent.getElementType() == IJavaElement.CLASS_FILE) {
-			ClassFileInfo classFileInfo = (ClassFileInfo) (openableParentInfo == null ? newElements.get(openableParent) : openableParentInfo);
-			if (classFileInfo == null) return;
-			classFileInfo.getBinaryChildren(newElements); // forces the initialization
-		}
 	}	
 	
 	public String[] getBounds() throws JavaModelException {

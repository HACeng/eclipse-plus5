commit bb57f8c8c7b45753eb98a27474e109ed392846a8
Author: Mateusz Matela <mateusz.matela@gmail.com>
Date:   Wed Apr 5 23:24:56 2017 +0200

    Bug 512791 - [formatter] Errors around formatter:off regions with "use space to indent wrapped lines"

38	0	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java
1	3	org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CommentsPreparator.java
39	7	org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java
3	5	org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/TextEditsBuilder.java
3	23	org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/TokenManager.java
3	4	org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/linewrap/WrapPreparator.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java
index e279366..fb47f6e 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/formatter/FormatterBugsTests.java
@@ -12645,4 +12645,42 @@ public void testBug500853() {
 		"}";
 	formatSource(source);
 }
+/**
+ * https://bugs.eclipse.org/500853 - [formatter] Errors around formatter:off regions with "use space to indent wrapped lines"
+ * @test no {@code IndexOutOfBoundsException} is thrown
+ */
+public void testBug512791a() {
+	this.formatterPrefs.use_tabs_only_for_leading_indentations = true;
+	String source =
+		"public class Test {\n" + 
+		"\n" + 
+		"	void f() {\n" + 
+		"		int a = 1 + 2 + 3 + 4;\n" + 
+		"		f  (   ;\n" + 
+		"	}\n" + 
+		"\n" + 
+		"	Object o = new Object() {\n" + 
+		"	};\n" + 
+		"}";
+	formatSource(source);
+}
+/**
+ * https://bugs.eclipse.org/500853 - [formatter] Errors around formatter:off regions with "use space to indent wrapped lines"
+ * @test formatter doesn't get stuck in an infinite loop
+ */
+public void testBug512791b() {
+	this.formatterPrefs.use_tabs_only_for_leading_indentations = true;
+	String source =
+		"public class Test {\n" + 
+		"\n" + 
+		"	void f() {\n" + 
+		"		f  (   ;\n" + 
+		"	}\n" + 
+		"\n" + 
+		"	Object o = new Object() {\n" + 
+		"		int a;\n" + 
+		"	};\n" + 
+		"}";
+	formatSource(source);
+}
 }
diff --git a/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CommentsPreparator.java b/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CommentsPreparator.java
index 014638a..8200ee8 100644
--- a/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CommentsPreparator.java
+++ b/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/CommentsPreparator.java
@@ -40,7 +40,6 @@ import org.eclipse.jdt.core.dom.MemberRef;
 import org.eclipse.jdt.core.dom.MethodRef;
 import org.eclipse.jdt.core.dom.QualifiedName;
 import org.eclipse.jdt.core.dom.TagElement;
-import org.eclipse.jdt.core.formatter.CodeFormatter;
 import org.eclipse.jdt.core.formatter.DefaultCodeFormatterConstants;
 import org.eclipse.jdt.internal.compiler.impl.CompilerOptions;
 import org.eclipse.jdt.internal.compiler.parser.ScannerHelper;
@@ -1061,8 +1060,7 @@ public class CommentsPreparator extends ASTVisitor {
 		// ^ index: original source position (minus startPosition), value: position in code string
 		getCodeToFormat(codeStartPosition, codeEndPosition, codeBuilder, positionMapping);
 
-		List<Token> formattedTokens = getCommentCodeFormatter().prepareFormattedCode(codeBuilder.toString(),
-				CodeFormatter.K_UNKNOWN);
+		List<Token> formattedTokens = getCommentCodeFormatter().prepareFormattedCode(codeBuilder.toString());
 
 		if (formattedTokens == null) {
 			disableFormattingExclusively(openingTagLastIndex, closingTagFirstIndex);
diff --git a/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java b/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java
index 30ba789..e469e88 100644
--- a/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java
+++ b/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java
@@ -24,6 +24,7 @@ import static org.eclipse.jdt.internal.compiler.parser.TerminalTokens.TokenNameC
 import static org.eclipse.jdt.internal.compiler.parser.TerminalTokens.TokenNameCOMMENT_LINE;
 
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.List;
 import java.util.Map;
 
@@ -76,7 +77,7 @@ public class DefaultCodeFormatter extends CodeFormatter {
 
 	private String sourceString;
 	private char[] sourceArray;
-	private IRegion[] formatRegions;
+	private List<IRegion> formatRegions;
 
 	private ASTNode astRoot;
 	private List<Token> tokens = new ArrayList<>();
@@ -149,7 +150,7 @@ public class DefaultCodeFormatter extends CodeFormatter {
 		if (!regionsSatisfiesPreconditions(regions, source.length())) {
 			throw new IllegalArgumentException();
 		}
-		this.formatRegions = regions;
+		this.formatRegions = Arrays.asList(regions);
 
 		updateWorkingOptions(indentationLevel, lineSeparator, kind);
 
@@ -160,7 +161,7 @@ public class DefaultCodeFormatter extends CodeFormatter {
 			return this.tokens.isEmpty() ? new MultiTextEdit() : null;
 
 		MultiTextEdit result = new MultiTextEdit();
-		TextEditsBuilder resultBuilder = new TextEditsBuilder(this.sourceString, regions, this.tokenManager,
+		TextEditsBuilder resultBuilder = new TextEditsBuilder(this.sourceString, this.formatRegions, this.tokenManager,
 				this.workingOptions);
 		this.tokenManager.traverse(0, resultBuilder);
 		for (TextEdit edit : resultBuilder.getEdits()) {
@@ -183,7 +184,12 @@ public class DefaultCodeFormatter extends CodeFormatter {
 		return !this.tokens.isEmpty();
 	}
 
-	List<Token> prepareFormattedCode(String source, int kind) {
+	List<Token> prepareFormattedCode(String source) {
+		this.formatRegions = Arrays.asList(new Region(0, source.length()));
+		return prepareFormattedCode(source, CodeFormatter.K_UNKNOWN);
+	}
+
+	private List<Token> prepareFormattedCode(String source, int kind) {
 		if (!init(source))
 			return null;
 
@@ -199,8 +205,6 @@ public class DefaultCodeFormatter extends CodeFormatter {
 		prepareComments();
 		prepareWraps(kind);
 
-		this.tokenManager.applyFormatOff();
-
 		return this.tokens;
 	}
 
@@ -268,7 +272,7 @@ public class DefaultCodeFormatter extends CodeFormatter {
 				throw new AssertionError(String.valueOf(kind));
 		}
 
-		this.tokenManager.applyFormatOff();
+		applyFormatOff();
 
 		TextEditsBuilder resultBuilder = new TextEditsBuilder(source, this.formatRegions, this.tokenManager,
 				this.workingOptions);
@@ -378,9 +382,37 @@ public class DefaultCodeFormatter extends CodeFormatter {
 	private void prepareWraps(int kind) {
 		WrapPreparator wrapPreparator = new WrapPreparator(this.tokenManager, this.workingOptions, kind);
 		this.astRoot.accept(wrapPreparator);
+		applyFormatOff();
 		wrapPreparator.finishUp(this.astRoot, this.formatRegions);
 	}
 
+	private void applyFormatOff() {
+		for (Token[] offPair : this.tokenManager.getDisableFormatTokenPairs()) {
+			final int offStart = offPair[0].originalStart;
+			final int offEnd = offPair[1].originalEnd;
+
+			offPair[0].setWrapPolicy(null);
+			offPair[0]
+					.setIndent(Math.min(offPair[0].getIndent(), this.tokenManager.findSourcePositionInLine(offStart)));
+
+			final List<IRegion> result = new ArrayList<>();
+			for (IRegion region : this.formatRegions) {
+				final int start = region.getOffset(), end = region.getOffset() + region.getLength() - 1;
+				if (offEnd < start || end < offStart) {
+					result.add(region);
+				} else if (offStart <= start && end <= offEnd) {
+					// whole region off
+				} else {
+					if (start < offStart)
+						result.add(new Region(start, offStart - start));
+					if (offEnd < end)
+						result.add(new Region(offEnd + 1, end - offEnd));
+				}
+			}
+			this.formatRegions = result;
+		}
+	}
+
 	/**
 	 * True if
 	 * <li>1. All regions are within maxLength
diff --git a/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/TextEditsBuilder.java b/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/TextEditsBuilder.java
index 04fec25..c47d13d 100644
--- a/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/TextEditsBuilder.java
+++ b/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/TextEditsBuilder.java
@@ -35,7 +35,6 @@ import org.eclipse.text.edits.TextEdit;
 public class TextEditsBuilder extends TokenTraverser {
 
 	private final String source;
-	private List<IRegion> regions;
 	private TokenManager tm;
 	private final DefaultCodeFormatterOptions options;
 	private final StringBuilder buffer;
@@ -43,6 +42,7 @@ public class TextEditsBuilder extends TokenTraverser {
 	private final List<Token> stringLiteralsInLine = new ArrayList<Token>();
 	private final List<TextEdit> edits = new ArrayList<TextEdit>();
 
+	private final List<IRegion> regions;
 	private int currentRegion = 0;
 
 	private TextEditsBuilder childBuilder;
@@ -51,7 +51,7 @@ public class TextEditsBuilder extends TokenTraverser {
 	private int sourceLimit;
 	private int parentTokenIndex;
 
-	public TextEditsBuilder(String source, IRegion[] regions, TokenManager tokenManager,
+	public TextEditsBuilder(String source, List<IRegion> regions, TokenManager tokenManager,
 			DefaultCodeFormatterOptions options) {
 		this.source = source;
 		this.tm = tokenManager;
@@ -74,9 +74,7 @@ public class TextEditsBuilder extends TokenTraverser {
 		this.alignChar = DefaultCodeFormatterOptions.SPACE;
 	}
 
-	private List<IRegion> adaptRegions(IRegion[] givenRegions) {
-		if (givenRegions == null)
-			return null;
+	private List<IRegion> adaptRegions(List<IRegion> givenRegions) {
 		// make sure regions don't begin or end inside multiline comments
 		ArrayList<IRegion> result = new ArrayList<IRegion>();
 		IRegion previous = null;
diff --git a/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/TokenManager.java b/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/TokenManager.java
index 2dee8f9..cfc64f2 100644
--- a/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/TokenManager.java
+++ b/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/TokenManager.java
@@ -15,7 +15,6 @@ import static org.eclipse.jdt.internal.compiler.parser.TerminalTokens.TokenNameC
 import static org.eclipse.jdt.internal.compiler.parser.TerminalTokens.TokenNameLBRACE;
 import static org.eclipse.jdt.internal.compiler.parser.TerminalTokens.TokenNameNotAToken;
 import static org.eclipse.jdt.internal.compiler.parser.TerminalTokens.TokenNameStringLiteral;
-import static org.eclipse.jdt.internal.compiler.parser.TerminalTokens.TokenNameWHITESPACE;
 
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -49,7 +48,7 @@ public class TokenManager implements Iterable<Token> {
 	final CommentWrapExecutor commentWrapper;
 
 	private HashMap<Integer, Integer> tokenIndexToNLSAlign;
-	private List<Token[]> formatOffTagPairs;
+	private List<Token[]> formatOffTagPairs = new ArrayList<>();
 	private int headerEndIndex = 0;
 
 	public TokenManager(List<Token> tokens, String source, DefaultCodeFormatterOptions options) {
@@ -430,29 +429,10 @@ public class TokenManager implements Iterable<Token> {
 	}
 
 	public void addDisableFormatTokenPair(Token formatOffTag, Token formatOnTag) {
-		if (this.formatOffTagPairs == null)
-			this.formatOffTagPairs = new ArrayList<Token[]>();
 		this.formatOffTagPairs.add(new Token[] { formatOffTag, formatOnTag });
 	}
 
-	public void applyFormatOff() {
-		if (this.formatOffTagPairs == null)
-			return;
-		for (Token[] pair : this.formatOffTagPairs) {
-			int index1 = findIndex(pair[0].originalStart, -1, false);
-			int index2 = findIndex(pair[1].originalEnd, -1, false);
-			pair[0] = get(index1);
-			pair[1] = get(index2);
-			Token unformatted = new Token(pair[0].originalStart, pair[1].originalEnd, TokenNameWHITESPACE);
-			unformatted.setIndent(Math.min(pair[0].getIndent(), findSourcePositionInLine(pair[0].originalStart)));
-			unformatted.putLineBreaksBefore(pair[0].getLineBreaksBefore());
-			if (pair[0].isSpaceBefore())
-				unformatted.spaceBefore();
-			unformatted.putLineBreaksAfter(pair[1].getLineBreaksAfter());
-			if (pair[1].isSpaceAfter())
-				unformatted.spaceAfter();
-			this.tokens.set(index1, unformatted);
-			this.tokens.subList(index1 + 1, index2 + 1).clear();
-		}
+	public List<Token[]> getDisableFormatTokenPairs() {
+		return this.formatOffTagPairs;
 	}
 }
diff --git a/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/linewrap/WrapPreparator.java b/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/linewrap/WrapPreparator.java
index 8909b86..a77f216 100644
--- a/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/linewrap/WrapPreparator.java
+++ b/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/linewrap/WrapPreparator.java
@@ -988,10 +988,9 @@ public class WrapPreparator extends ASTVisitor {
 				penaltyMultiplier, isFirst, indentOnColumn);
 	}
 
-	public void finishUp(ASTNode astRoot, IRegion[] regions) {
+	public void finishUp(ASTNode astRoot, List<IRegion> regions) {
 		preserveExistingLineBreaks();
-		if (regions != null)
-			applyBreaksOutsideRegions(regions);
+		applyBreaksOutsideRegions(regions);
 		new WrapExecutor(this.tm, this.options).executeWraps();
 		this.fieldAligner.alignComments();
 		wrapComments();
@@ -1052,7 +1051,7 @@ public class WrapPreparator extends ASTVisitor {
 		return Math.min(lineBreaks, toPreserve);
 	}
 
-	private void applyBreaksOutsideRegions(IRegion[] regions) {
+	private void applyBreaksOutsideRegions(List<IRegion> regions) {
 		String source = this.tm.getSource();
 		int previousRegionEnd = 0;
 		for (IRegion region : regions) {

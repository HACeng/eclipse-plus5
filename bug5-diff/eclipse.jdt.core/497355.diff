commit 24b0c9cfb1522606fece81d51692a0e12312f65a
Author: Stefan Xenos <sxenos@gmail.com>
Date:   Tue Jul 5 14:52:45 2016 -0700

    Bug 497355 - Fix compiler warnings in the newindex branch
    
    Resolve compiler errors.
    
    Signed-off-by: Stefan Xenos <sxenos@gmail.com>

7	7	org.eclipse.jdt.core/META-INF/MANIFEST.MF
0	2	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/DatabaseRef.java
1	1	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/db/Database.java
2	2	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/db/MemoryStats.java
2	3	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/JavaIndex.java
0	2	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdBinding.java
0	4	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdType.java
9	8	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/model/TypeAnnotationBuilder.java
3	3	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/util/PathMap.java
0	1	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/JavaSearchNameEnvironment.java
16	18	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java
diff --git a/org.eclipse.jdt.core/META-INF/MANIFEST.MF b/org.eclipse.jdt.core/META-INF/MANIFEST.MF
index 06f1257..2cfcc99 100644
--- a/org.eclipse.jdt.core/META-INF/MANIFEST.MF
+++ b/org.eclipse.jdt.core/META-INF/MANIFEST.MF
@@ -47,13 +47,13 @@ Export-Package: org.eclipse.jdt.core,
  org.eclipse.jdt.internal.core.hierarchy;x-internal:=true,
  org.eclipse.jdt.internal.core.index;x-internal:=true,
  org.eclipse.jdt.internal.core.jdom;x-internal:=true,
- org.eclipse.jdt.internal.core.nd,
- org.eclipse.jdt.internal.core.nd.db,
- org.eclipse.jdt.internal.core.nd.field,
- org.eclipse.jdt.internal.core.nd.indexer,
- org.eclipse.jdt.internal.core.nd.java,
- org.eclipse.jdt.internal.core.nd.java.model,
- org.eclipse.jdt.internal.core.nd.util,
+ org.eclipse.jdt.internal.core.nd;x-internal:=true,
+ org.eclipse.jdt.internal.core.nd.db;x-internal:=true,
+ org.eclipse.jdt.internal.core.nd.field;x-internal:=true,
+ org.eclipse.jdt.internal.core.nd.indexer;x-internal:=true,
+ org.eclipse.jdt.internal.core.nd.java;x-internal:=true,
+ org.eclipse.jdt.internal.core.nd.java.model;x-internal:=true,
+ org.eclipse.jdt.internal.core.nd.util;x-internal:=true,
  org.eclipse.jdt.internal.core.search;x-internal:=true,
  org.eclipse.jdt.internal.core.search.indexing;x-internal:=true,
  org.eclipse.jdt.internal.core.search.matching;x-internal:=true,
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/DatabaseRef.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/DatabaseRef.java
index 55df206..20be678 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/DatabaseRef.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/DatabaseRef.java
@@ -55,8 +55,6 @@ public class DatabaseRef<T extends NdNode> implements Supplier<T> {
 
 	/**
 	 * Acquires a read lock. Callers must invoke close() on the result when done.
-	 *
-	 * @return
 	 */
 	public IReader lock() {
 		return this.nd.acquireReadLock();
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/db/Database.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/db/Database.java
index fa4743b..ce2ba4b 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/db/Database.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/db/Database.java
@@ -673,7 +673,7 @@ public class Database {
 	 * For debugging purposes, only.
 	 */
 	public void reportFreeBlocks() throws IndexException {
-		System.out.println("Allocated size: " + getDatabaseSize() + " bytes"); //$NON-NLS-1$
+		System.out.println("Allocated size: " + getDatabaseSize() + " bytes"); //$NON-NLS-1$ //$NON-NLS-2$
 		System.out.println("malloc'ed: " + this.malloced); //$NON-NLS-1$
 		System.out.println("free'd: " + this.freed); //$NON-NLS-1$
 		System.out.println("wasted: " + (getDatabaseSize() - (this.malloced - this.freed))); //$NON-NLS-1$
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/db/MemoryStats.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/db/MemoryStats.java
index b4f92a5..ebc2f2d 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/db/MemoryStats.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/db/MemoryStats.java
@@ -73,7 +73,7 @@ public class MemoryStats {
 		this.address = address;
 	}
 
-	public void printMemoryStats(NdNodeTypeRegistry nodeRegistry) {
+	public void printMemoryStats(NdNodeTypeRegistry<?> nodeRegistry) {
 		StringBuilder builder = new StringBuilder();
 		for (PoolStats next : getSortedPools()) {
 			builder.append(getPoolName(nodeRegistry, next.poolId));
@@ -86,7 +86,7 @@ public class MemoryStats {
 		System.out.println(builder.toString());
 	}
 
-	private String getPoolName(NdNodeTypeRegistry registry, int poolId) {
+	private String getPoolName(NdNodeTypeRegistry<?> registry, int poolId) {
 		switch (poolId) {
 			case Database.POOL_MISC: return "Miscellaneous"; //$NON-NLS-1$
 			case Database.POOL_BTREE: return "B-Trees"; //$NON-NLS-1$
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/JavaIndex.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/JavaIndex.java
index b994c47..d7d1932 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/JavaIndex.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/JavaIndex.java
@@ -75,7 +75,7 @@ public class JavaIndex {
 	private Nd nd;
 	private IResultRank anyResult = new IResultRank() {
 		@Override
-		public long getRank(Nd nd, long address1) {
+		public long getRank(Nd dom, long address1) {
 			return 1;
 		}
 	};
@@ -283,8 +283,7 @@ public class JavaIndex {
 		return registry;
 	}
 
-	// TODO: delete and recreate the index
 	public void rebuildIndex() {
-
+		// TODO: delete and recreate the index
 	}
 }
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdBinding.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdBinding.java
index 39c31c0..9e4ad65 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdBinding.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdBinding.java
@@ -47,8 +47,6 @@ public abstract class NdBinding extends NdNode implements IAdaptable {
 		type.done();
 	}
 
-	private static final NdAnnotation[] NO_ANNOTATIONS = new NdAnnotation[0];
-
 	public NdBinding(Nd nd, long address) {
 		super(nd, address);
 	}
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdType.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdType.java
index 6cc5da1..c51915b 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdType.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdType.java
@@ -72,10 +72,6 @@ public class NdType extends NdBinding {
 		super(nd, resource);
 	}
 
-	@Override
-	public void accept(INdVisitor visitor) {
-	}
-
 	/**
 	 * Called to populate the cache for the bindings in the class scope.
 	 */
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/model/TypeAnnotationBuilder.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/model/TypeAnnotationBuilder.java
index 4d95c95..6f011be 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/model/TypeAnnotationBuilder.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/model/TypeAnnotationBuilder.java
@@ -33,12 +33,12 @@ public class TypeAnnotationBuilder implements ITypeAnnotationBuilder {
 		return new TypeAnnotationBuilder(this, nextKind, nextIndex, this.length+1, this.target, this.targetParameter, this.targetParameter2);
 	}
 
-	private TypeAnnotationBuilder toTarget(int target) {
-		return new TypeAnnotationBuilder(this.parent, this.kind, this.index, this.length, target, this.targetParameter, this.targetParameter2);
+	private TypeAnnotationBuilder toTarget(int newTarget) {
+		return new TypeAnnotationBuilder(this.parent, this.kind, this.index, this.length, newTarget, this.targetParameter, this.targetParameter2);
 	}
 
-	private TypeAnnotationBuilder toTarget(int target, int parameter) {
-		return new TypeAnnotationBuilder(this.parent, this.kind, this.index, this.length, target, parameter, this.targetParameter2);
+	private TypeAnnotationBuilder toTarget(int newTarget, int parameter) {
+		return new TypeAnnotationBuilder(this.parent, this.kind, this.index, this.length, newTarget, parameter, this.targetParameter2);
 	}
 
 	private TypeAnnotationBuilder toTarget2(int parameter) {
@@ -81,13 +81,13 @@ public class TypeAnnotationBuilder implements ITypeAnnotationBuilder {
 	}
 
 	@Override
-	public ITypeAnnotationBuilder toSupertype(short index) {
-		return toTarget(AnnotationTargetTypeConstants.CLASS_EXTENDS, index);
+	public ITypeAnnotationBuilder toSupertype(short superTypeIndex) {
+		return toTarget(AnnotationTargetTypeConstants.CLASS_EXTENDS, superTypeIndex);
 	}
 
 	@Override
-	public ITypeAnnotationBuilder toMethodParameter(short index) {
-		return toTarget(AnnotationTargetTypeConstants.METHOD_FORMAL_PARAMETER, index);
+	public ITypeAnnotationBuilder toMethodParameter(short parameterIndex) {
+		return toTarget(AnnotationTargetTypeConstants.METHOD_FORMAL_PARAMETER, parameterIndex);
 	}
 
 	@Override
@@ -132,6 +132,7 @@ public class TypeAnnotationBuilder implements ITypeAnnotationBuilder {
 			int writeIdx = (next.length - 1) * 2;
 			result[writeIdx] = next.kind;
 			result[writeIdx + 1] = next.index;
+			next = next.parent;
 		}
 
 		return result;
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/util/PathMap.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/util/PathMap.java
index 491db09..3dfb216 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/util/PathMap.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/util/PathMap.java
@@ -98,11 +98,11 @@ public class PathMap<T> {
 		
 	    public void toString(StringBuilder builder, IPath parentPath) {
 		    if (this.exists) {
-		    	builder.append("[");
+		    	builder.append("["); //$NON-NLS-1$
 		    	builder.append(parentPath);
-		    	builder.append("] = ");
+		    	builder.append("] = "); //$NON-NLS-1$
 		    	builder.append(this.value);
-		    	builder.append("\n");
+		    	builder.append("\n"); //$NON-NLS-1$
 		    }
 		    if (this.children != null) { 
 		    	for (Entry<String, Node<T>> next : this.children.entrySet()) {
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/JavaSearchNameEnvironment.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/JavaSearchNameEnvironment.java
index 14df593..ec9f02e 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/JavaSearchNameEnvironment.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/JavaSearchNameEnvironment.java
@@ -41,7 +41,6 @@ import org.eclipse.jdt.internal.core.util.Util;
 /*
  * A name environment based on the classpath of a Java project.
  */
-@SuppressWarnings({"rawtypes", "unchecked"})
 public class JavaSearchNameEnvironment implements INameEnvironment, SuffixConstants {
 
 	LinkedHashSet<ClasspathLocation> locationSet;
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java
index 6351839..83b162d 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/processing/JobManager.java
@@ -201,7 +201,7 @@ public abstract class JobManager implements Runnable {
 
 					case IJob.WaitUntilReady :
 						int totalWork = 1000;
-						SubMonitor subProgress = subMonitor.setWorkRemaining(10).split(8).setWorkRemaining(totalWork);
+						SubMonitor waitMonitor = subMonitor.setWorkRemaining(10).split(8).setWorkRemaining(totalWork);
 						// use local variable to avoid potential NPE (see bug 20435 NPE when searching java method
 						// and bug 42760 NullPointerException in JobManager when searching)
 						Thread t = this.processingThread;
@@ -218,30 +218,28 @@ public abstract class JobManager implements Runnable {
 							float lastWorked = 0;
 							float totalWorked = 0;
 							while ((awaitingJobsCount = awaitingJobsCount()) > 0) {
-								if (subProgress.isCanceled() || this.processingThread == null)
+								if (waitMonitor.isCanceled() || this.processingThread == null)
 									throw new OperationCanceledException();
 								IJob currentJob = currentJob();
 								// currentJob can be null when jobs have been added to the queue but job manager is not enabled
 								if (currentJob != null && currentJob != previousJob) {
 									if (VERBOSE)
 										Util.verbose("-> NOT READY - waiting until ready - " + searchJob);//$NON-NLS-1$
-									if (subProgress != null) {
-										String indexing = Messages.bind(Messages.jobmanager_filesToIndex, currentJob.getJobFamily(), Integer.toString(awaitingJobsCount));
-										subProgress.subTask(indexing);
-										// ratio of the amount of work relative to the total work
-										float ratio = awaitingJobsCount < totalWork ? 1 : ((float) totalWork) / awaitingJobsCount;
-										if (lastJobsCount > awaitingJobsCount) {
-											totalWorked += (lastJobsCount - awaitingJobsCount) * ratio;
-										} else {
-											// more jobs were added, just increment by the ratio
-											totalWorked += ratio;
-										}
-										if (totalWorked - lastWorked >= 1) {
-											subProgress.worked((int) (totalWorked - lastWorked));
-											lastWorked = totalWorked;
-										}
-										lastJobsCount = awaitingJobsCount;
+									String indexing = Messages.bind(Messages.jobmanager_filesToIndex, currentJob.getJobFamily(), Integer.toString(awaitingJobsCount));
+									waitMonitor.subTask(indexing);
+									// ratio of the amount of work relative to the total work
+									float ratio = awaitingJobsCount < totalWork ? 1 : ((float) totalWork) / awaitingJobsCount;
+									if (lastJobsCount > awaitingJobsCount) {
+										totalWorked += (lastJobsCount - awaitingJobsCount) * ratio;
+									} else {
+										// more jobs were added, just increment by the ratio
+										totalWorked += ratio;
 									}
+									if (totalWorked - lastWorked >= 1) {
+										waitMonitor.worked((int) (totalWorked - lastWorked));
+										lastWorked = totalWorked;
+									}
+									lastJobsCount = awaitingJobsCount;
 									previousJob = currentJob;
 								}
 								try {

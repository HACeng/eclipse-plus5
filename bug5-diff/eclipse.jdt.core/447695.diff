commit 1378abb100016c6b551d2f3f36eeb93c2a99209c
Author: Till Brychcy <register.eclipse@brychcy.de>
Date:   Sun Jan 3 23:10:56 2016 +0100

    Bug 447695 - [null] Bogus "Null pointer access" warning when array
    access assigns the array variable
    
    Change-Id: Ia5b3ea139eb0ba7b73ce862a6d767c862f6da1ba
    Signed-off-by: Till Brychcy <register.eclipse@brychcy.de>
    Also-by: Stephan Herrmann <stephan.herrmann@berlin.de>

177	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayReference.java
2	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java
11	11	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CombinedBinaryExpression.java
3	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForeachStatement.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
3	3	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/UnaryExpression.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java
index 14d4d19..d2c8891 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java
@@ -17974,4 +17974,181 @@ public void testBug486912PotNullInLoop() {
 		"----------\n"
 	);
 }
+public void testBug447695() {
+	runConformTest(
+		new String[] {
+		"test/Test447695.java",
+			"package test;\n" +
+			"\n" +
+			"public class Test447695 {\n" +
+			"	public static void f() {\n" +
+			"		int[] array = null;\n" +
+			"		(array = new int[1])[0] = 42;\n" +
+			"	}\n" +
+			"	public static int g() {\n" +
+			"		int[] array = null;\n" +
+			"		return (array = new int[1])[0];\n" +
+			"	}\n" +
+			"}\n"
+		} 
+	);
+}
+public void testBug447695b() {
+	if (this.complianceLevel < ClassFileConstants.JDK1_5) return; // uses foreach
+	runConformTest(
+		new String[] {
+			"X.java",
+			"import java.util.*;\n" +
+			"public class X {\n" +
+			"	void test(String[] ss) {\n" +
+			"		List<String> strings = null;\n" +
+			"		for (String s : (strings = Arrays.asList(ss)))\n" +
+			"			System.out.println(s);\n" +
+			"	}\n" +
+			"}\n"
+		});
+}
+public void testBug447695c() {
+	if (this.complianceLevel < ClassFileConstants.JDK1_5) return; // uses autoboxing
+	runConformTest(
+		new String[] {
+			"test/Test447695.java",
+			"package test;\n" +
+			"\n" +
+			"public class Test447695 {\n" +
+			"	void f() {\n" +
+			"		Integer l1 = null;\n" +
+			"		Integer l2 = null;\n" +
+			"		int b = (l1 = new Integer(2)) + (l2 = new Integer(1));\n" +
+			"	}\n" +
+			"}\n"
+		}
+	);
+}
+public void testBug447695d() {
+	if (this.complianceLevel < ClassFileConstants.JDK1_8) return; // uses reference expression
+	runConformTest(
+		new String[] {
+			"test/Test447695.java",
+			"package test;\n" +
+			"\n" +
+			"import java.util.function.Supplier;\n" +
+			"\n" +
+			"public class Test447695 {\n" +
+			"	void f() {\n" +
+			"		String s = null;\n" +
+			"		Supplier<String> l = (s = \"\")::toString;\n" +
+			"	}\n" +
+			"}\n"
+		} 
+	);
+}
+public void testBug447695e() {
+	if (this.complianceLevel < ClassFileConstants.JDK1_5) return; // uses autoboxing
+	runConformTest(
+		new String[] {
+			"test/Test447695.java",
+			"package test;\n" +
+			"\n" +
+			"public class Test447695 {\n" +
+			"	void f() {\n" +
+			"		Integer i = null;\n" +
+			"		int j = -(i = new Integer(1));\n" +
+			"		Boolean b1 = null;\n" +
+			"		boolean b = !(b1 = new Boolean(false));\n" +
+			"	}\n" +
+			"}\n"
+		}
+	);
+}
+public void testBug447695f() {
+	if (this.complianceLevel < ClassFileConstants.JDK1_5) return; // uses autoboxing
+	runConformTest(
+		new String[] {
+			"test/Test447695.java",
+			"package test;\n" +
+			"\n" +
+			"public class Test447695 {\n" +
+			"	void f() {\n" +
+			"		int i = 0;\n" +
+			"		Integer i1 = null;\n" +
+			"		Integer i2 = null;\n" +
+			"		Integer i3 = null;\n" +
+			"		int j = (i1 = new Integer(1)) \n" +
+			"				+ (i2 = new Integer(1)) \n" +
+			"				+ i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i + i \n" +
+			"				+ (i3 = new Integer(2)) + i;\n" +
+			"	}\n" +
+			"}\n"
+		}
+	);
+}
+public void testBug447695g() {
+	runNegativeTest(
+		new String[] {
+			"test/Test447695.java",
+			"package test;\n" +
+			"\n" +
+			"class X {\n" +
+			"	int i;\n" +
+			"}\n" +
+			"\n" +
+			"public class Test447695 {\n" +
+			"	void f() {\n" +
+			"		X x1 = null;\n" +
+			"		X x2 = null;\n" +
+			"		X x3 = null;\n" +
+			"		X x4 = null;\n" +
+			"		X x5 = null;\n" +
+			"		X x6 = null;\n" +
+			"		X x7 = null;\n" +
+			"		X x8 = null;\n" +
+			"		X x9 = null;\n" +
+			"		X x10 = null;\n" +
+			"		X x11 = null;\n" +
+			"		x1.i = 1; // error 1 expected\n" +
+			"		x2.i += 1; // error 2 expected\n" +
+			"		(x3).i = 1; // error 3 expected\n" +
+			"		(x4).i += 1; // error 4 expected\n" +
+			"		(x5 = new X()).i = (x6 = new X()).i;\n" +
+			"		(x7 = new X()).i += (x8 = new X()).i;\n" +
+			"		int i1 = x9.i; // error 5 expected\n" +
+			"		int i2 = (x10).i; // error 6 expected\n" +
+			"		int i3 = (x11 = new X()).i;\n" +
+			"	}\n" +
+			"}\n"
+		},
+		"----------\n" + 
+		"1. ERROR in test\\Test447695.java (at line 20)\n" + 
+		"	x1.i = 1; // error 1 expected\n" + 
+		"	^^\n" + 
+		"Null pointer access: The variable x1 can only be null at this location\n" + 
+		"----------\n" + 
+		"2. ERROR in test\\Test447695.java (at line 21)\n" + 
+		"	x2.i += 1; // error 2 expected\n" + 
+		"	^^\n" + 
+		"Null pointer access: The variable x2 can only be null at this location\n" + 
+		"----------\n" + 
+		"3. ERROR in test\\Test447695.java (at line 22)\n" + 
+		"	(x3).i = 1; // error 3 expected\n" + 
+		"	^^^^\n" + 
+		"Null pointer access: The variable x3 can only be null at this location\n" + 
+		"----------\n" + 
+		"4. ERROR in test\\Test447695.java (at line 23)\n" + 
+		"	(x4).i += 1; // error 4 expected\n" + 
+		"	^^^^\n" + 
+		"Null pointer access: The variable x4 can only be null at this location\n" + 
+		"----------\n" + 
+		"5. ERROR in test\\Test447695.java (at line 26)\n" + 
+		"	int i1 = x9.i; // error 5 expected\n" + 
+		"	         ^^\n" + 
+		"Null pointer access: The variable x9 can only be null at this location\n" + 
+		"----------\n" + 
+		"6. ERROR in test\\Test447695.java (at line 27)\n" + 
+		"	int i2 = (x10).i; // error 6 expected\n" + 
+		"	         ^^^^^\n" + 
+		"Null pointer access: The variable x10 can only be null at this location\n" + 
+		"----------\n"
+	);
+}
 }
\ No newline at end of file
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayReference.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayReference.java
index b816309..3b580a1 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayReference.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayReference.java
@@ -60,8 +60,8 @@ public FlowInfo analyseAssignment(BlockScope currentScope, FlowContext flowConte
 }
 
 public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo) {
-	this.receiver.checkNPE(currentScope, flowContext, flowInfo, 1);
 	flowInfo = this.receiver.analyseCode(currentScope, flowContext, flowInfo);
+	this.receiver.checkNPE(currentScope, flowContext, flowInfo, 1);
 	flowInfo = this.position.analyseCode(currentScope, flowContext, flowInfo);
 	this.position.checkNPEbyUnboxing(currentScope, flowContext, flowInfo);
 	// account for potential ArrayIndexOutOfBoundsException:
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java
index d09a557..326a232 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/BinaryExpression.java
@@ -68,13 +68,13 @@ public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, Fl
 								this.left.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits())
 							.unconditionalInits();
 		} else {
-			this.left.checkNPE(currentScope, flowContext, flowInfo);
 			flowInfo = this.left.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits();
+			this.left.checkNPE(currentScope, flowContext, flowInfo);
 			if (((this.bits & OperatorMASK) >> OperatorSHIFT) != AND) {
 				flowContext.expireNullCheckedFieldInfo();
 			}
-			this.right.checkNPE(currentScope, flowContext, flowInfo);
 			flowInfo = this.right.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits();
+			this.right.checkNPE(currentScope, flowContext, flowInfo);
 			if (((this.bits & OperatorMASK) >> OperatorSHIFT) != AND) {
 				flowContext.expireNullCheckedFieldInfo();
 			}
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CombinedBinaryExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CombinedBinaryExpression.java
index 7ff2fec..51e2849 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CombinedBinaryExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CombinedBinaryExpression.java
@@ -125,26 +125,26 @@ public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext,
 	}
 	try {
 		BinaryExpression cursor;
-		if ((cursor = this.referencesTable[0]).resolvedType.id !=
-				TypeIds.T_JavaLangString) {
+		cursor = this.referencesTable[0];
+		flowInfo = cursor.left.analyseCode(currentScope, flowContext, flowInfo).
+				unconditionalInits();
+		if (cursor.resolvedType.id != TypeIds.T_JavaLangString) {
 			cursor.left.checkNPE(currentScope, flowContext, flowInfo);
 		}
-		flowInfo = cursor.left.analyseCode(currentScope, flowContext, flowInfo).
-			unconditionalInits();
 		for (int i = 0, end = this.arity; i < end; i ++) {
-			if ((cursor = this.referencesTable[i]).resolvedType.id !=
-					TypeIds.T_JavaLangString) {
+			cursor = this.referencesTable[i];
+			flowInfo = cursor.right.
+					analyseCode(currentScope, flowContext, flowInfo).
+						unconditionalInits();
+			if (cursor.resolvedType.id != TypeIds.T_JavaLangString) {
 				cursor.right.checkNPE(currentScope, flowContext, flowInfo);
 			}
-			flowInfo = cursor.right.
-				analyseCode(currentScope, flowContext, flowInfo).
-					unconditionalInits();
 		}
+		flowInfo = this.right.analyseCode(currentScope, flowContext, flowInfo).unconditionalInits();
 		if (this.resolvedType.id != TypeIds.T_JavaLangString) {
 			this.right.checkNPE(currentScope, flowContext, flowInfo);
 		}
-		return this.right.analyseCode(currentScope, flowContext, flowInfo).
-			unconditionalInits();
+		return flowInfo;
 	} finally {
 		// account for exception possibly thrown by arithmetics
 		flowContext.recordAbruptExit();
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java
index 2254285..7693cbe 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java
@@ -90,6 +90,9 @@ public FlowInfo analyseAssignment(BlockScope currentScope, FlowContext flowConte
 		this.receiver
 			.analyseCode(currentScope, flowContext, flowInfo, !this.binding.isStatic())
 			.unconditionalInits();
+	
+	this.receiver.checkNPE(currentScope, flowContext, flowInfo);
+	
 	if (assignment.expression != null) {
 		flowInfo =
 			assignment
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForeachStatement.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForeachStatement.java
index f8aafb6..fe410c5 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForeachStatement.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForeachStatement.java
@@ -94,9 +94,9 @@ public class ForeachStatement extends Statement {
 		int initialComplaintLevel = (flowInfo.reachMode() & FlowInfo.UNREACHABLE) != 0 ? Statement.COMPLAINED_FAKE_REACHABLE : Statement.NOT_COMPLAINED;
 
 		// process the element variable and collection
-		this.collection.checkNPE(currentScope, flowContext, flowInfo, 1);
 		flowInfo = this.elementVariable.analyseCode(this.scope, flowContext, flowInfo);		
 		FlowInfo condInfo = this.collection.analyseCode(this.scope, flowContext, flowInfo.copy());
+		this.collection.checkNPE(currentScope, flowContext, condInfo.copy(), 1);
 		LocalVariableBinding elementVarBinding = this.elementVariable.binding;
 
 		// element variable will be assigned when iterating
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
index 1b5c028..004ddaf 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
@@ -415,8 +415,8 @@ public class ReferenceExpression extends FunctionalExpression implements IPolyEx
 	public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo) {
 		// static methods with receiver value never get here
 		if (this.haveReceiver) {
-			this.lhs.checkNPE(currentScope, flowContext, flowInfo);
 			this.lhs.analyseCode(currentScope, flowContext, flowInfo, true);
+			this.lhs.checkNPE(currentScope, flowContext, flowInfo);
 		} else if (isConstructorReference()) {
 			TypeBinding type = this.receiverType.leafComponentType();
 			if (type.isNestedType() &&
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/UnaryExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/UnaryExpression.java
index ed03863..e099594 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/UnaryExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/UnaryExpression.java
@@ -34,18 +34,18 @@ public FlowInfo analyseCode(
 		BlockScope currentScope,
 		FlowContext flowContext,
 		FlowInfo flowInfo) {
-	this.expression.checkNPE(currentScope, flowContext, flowInfo);
 	if (((this.bits & OperatorMASK) >> OperatorSHIFT) == NOT) {
 		flowContext.tagBits ^= FlowContext.INSIDE_NEGATION;
 		flowInfo = this.expression.
 			analyseCode(currentScope, flowContext, flowInfo).
 			asNegatedCondition();
 		flowContext.tagBits ^= FlowContext.INSIDE_NEGATION;
-		return flowInfo;
 	} else {
-		return this.expression.
+		flowInfo = this.expression.
 			analyseCode(currentScope, flowContext, flowInfo);
 	}
+	this.expression.checkNPE(currentScope, flowContext, flowInfo);
+	return flowInfo;
 }
 
 	public Constant optimizedBooleanConstant() {

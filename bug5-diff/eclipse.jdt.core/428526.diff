commit 1927adcb5b6322754055ec7c1403d18ef9b85d5d
Author: ssankaran <srikanth_sankaran@in.ibm.com>
Date:   Sat Feb 22 16:43:07 2014 +0530

    Fixed Bug 428526 - [1.8] API to get the single abstract method in a
    functional interface

67	0	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
15	0	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ITypeBinding.java
8	0	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/RecoveredTypeBinding.java
14	0	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
index 39f2ca7..9ed196d 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
@@ -4223,4 +4223,71 @@ public class ASTConverter18Test extends ConverterTestSetup {
 		assertEquals("Incorrect no of dimensions", 1, dims);
 
 	}
+	// https://bugs.eclipse.org/bugs/show_bug.cgi?id=428526, [1.8] API to get the single abstract method in a functional interface
+	public void test428526() throws JavaModelException {
+		String contents =
+				"interface Foo<T, N extends Number> {\n" +
+				"    void m(T arg);\n" +
+				"    void m(N arg);\n" +
+				"}\n" +
+				"interface Baz extends Foo<Integer, Integer> {}\n";
+		
+		this.workingCopy = getWorkingCopy("/Converter18/src/X.java", true);
+		ASTNode node = buildAST(contents, this.workingCopy);
+		assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, node.getNodeType());
+		CompilationUnit compilationUnit = (CompilationUnit) node;
+		assertProblemsSize(compilationUnit, 0);
+		
+		TypeDeclaration type = (TypeDeclaration) getASTNode(compilationUnit, 0);
+		assertEquals("Not a Type declaration", ASTNode.TYPE_DECLARATION, type.getNodeType());
+		ITypeBinding binding = type.resolveBinding();
+		assertNotNull("Binding should not be null", binding);
+		IMethodBinding functionalInterfaceMethod = binding.getFunctionalInterfaceMethod();
+		assertNull("Should not be a functional interface", functionalInterfaceMethod);
+		
+		type = (TypeDeclaration) getASTNode(compilationUnit, 1);
+		assertEquals("Not a Type declaration", ASTNode.TYPE_DECLARATION, type.getNodeType());
+		binding = type.resolveBinding();
+		assertNotNull("Binding should not be null", binding);
+		functionalInterfaceMethod = binding.getFunctionalInterfaceMethod();
+		assertNotNull("Should be a functional interface", functionalInterfaceMethod);
+	}
+	// https://bugs.eclipse.org/bugs/show_bug.cgi?id=428526, [1.8] API to get the single abstract method in a functional interface
+	public void test428526a() throws JavaModelException {
+		String contents =
+				"interface I { X foo(); }\n" +
+				"interface J { Y foo(); }\n" +
+				"interface K extends I, J {}\n" +
+				"class X {}\n" +
+				"class Y extends X {}\n";
+		
+		this.workingCopy = getWorkingCopy("/Converter18/src/X.java", true);
+		ASTNode node = buildAST(contents, this.workingCopy);
+		assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, node.getNodeType());
+		CompilationUnit compilationUnit = (CompilationUnit) node;
+		assertProblemsSize(compilationUnit, 0);
+		
+		TypeDeclaration type = (TypeDeclaration) getASTNode(compilationUnit, 0);
+		assertEquals("Not a Type declaration", ASTNode.TYPE_DECLARATION, type.getNodeType());
+		ITypeBinding binding = type.resolveBinding();
+		assertNotNull("Binding should not be null", binding);
+		IMethodBinding functionalInterfaceMethod = binding.getFunctionalInterfaceMethod();
+		assertNotNull("Should not be a functional interface", functionalInterfaceMethod);
+		
+		type = (TypeDeclaration) getASTNode(compilationUnit, 1);
+		assertEquals("Not a Type declaration", ASTNode.TYPE_DECLARATION, type.getNodeType());
+		binding = type.resolveBinding();
+		assertNotNull("Binding should not be null", binding);
+		functionalInterfaceMethod = binding.getFunctionalInterfaceMethod();
+		assertNotNull("Should be a functional interface", functionalInterfaceMethod);
+		
+		type = (TypeDeclaration) getASTNode(compilationUnit, 2);
+		assertEquals("Not a Type declaration", ASTNode.TYPE_DECLARATION, type.getNodeType());
+		binding = type.resolveBinding();
+		assertNotNull("Binding should not be null", binding);
+		functionalInterfaceMethod = binding.getFunctionalInterfaceMethod();
+		assertNotNull("Should be a functional interface", functionalInterfaceMethod);
+		ITypeBinding returnType = functionalInterfaceMethod.getReturnType();
+		assertEquals("Y", returnType.getName());
+	}
 }
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ITypeBinding.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ITypeBinding.java
index 5af3227..9f59169 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ITypeBinding.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ITypeBinding.java
@@ -293,6 +293,21 @@ public interface ITypeBinding extends IBinding {
 	 * @since 3.1
 	 */
 	public ITypeBinding getErasure();
+	
+	/**
+	 * Returns the single abstract method that constitutes the single function 
+	 * contract (aside from any redeclarations of methods of <code>java.lang.Object</code>) 
+	 * of the receiver interface type or null if there no such contract or if the receiver 
+	 * is not an interface. 
+	 * 
+	 * @return the single abstract method that represents the single function contract 
+	 * (aside from any redeclarations of methods of <code>java.lang.Object</code>) of 
+	 * this interface type or null if the receiver is not an interface or if the receiver 
+	 * has more than one abstract method or no abstract methods.
+	 *
+	 * @since 3.9 BETA_JAVA8
+	 */
+	public IMethodBinding getFunctionalInterfaceMethod();
 
 	/**
 	 * Returns a list of type bindings representing the direct superinterfaces
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/RecoveredTypeBinding.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/RecoveredTypeBinding.java
index e14c6f2..ad6d182 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/RecoveredTypeBinding.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/RecoveredTypeBinding.java
@@ -196,6 +196,14 @@ class RecoveredTypeBinding implements ITypeBinding {
 	}
 
 	/* (non-Javadoc)
+	 * @see org.eclipse.jdt.core.dom.ITypeBinding#getFunctionalInterfaceMethod
+	 */
+	@Override
+	public IMethodBinding getFunctionalInterfaceMethod() {
+		return null;
+	}
+	
+	/* (non-Javadoc)
 	 * @see org.eclipse.jdt.core.dom.ITypeBinding#getInterfaces()
 	 */
 	public ITypeBinding[] getInterfaces() {
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java
index f7e742c..92f1c13 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java
@@ -476,6 +476,20 @@ class TypeBinding implements ITypeBinding {
 	public ITypeBinding getErasure() {
 		return this.resolver.getTypeBinding(this.binding.erasure());
 	}
+	
+	/* (non-Javadoc)
+	 * @see org.eclipse.jdt.core.dom.ITypeBinding#getFunctionalInterfaceMethod
+	 */
+	@Override
+	public IMethodBinding getFunctionalInterfaceMethod() {
+		Scope scope = this.resolver.scope();
+		if (this.binding == null || scope == null)
+			return null;
+		MethodBinding sam = this.binding.getSingleAbstractMethod(scope, true);
+		if (sam == null || !sam.isValidBinding())
+			return null;
+		return this.resolver.getMethodBinding(sam);
+	}
 
 	public synchronized ITypeBinding[] getInterfaces() {
 		if (this.prototype != null) {
commit 481255841603dcf6f5f9da59c807742b7a8cedc1
Author: ssankaran <srikanth_sankaran@in.ibm.com>
Date:   Fri Feb 28 05:28:12 2014 +0530

    Fixed Bug 428526 - [1.8] API to get the single abstract method in a
    functional interface

9	5	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java
1	0	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IBinding.java
8	15	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ITypeBinding.java
0	7	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/RecoveredTypeBinding.java
0	14	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
index 4b85cca..cb65da0 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
@@ -2703,6 +2703,7 @@ public class ASTConverter18Test extends ConverterTestSetup {
 	}
 
 	// https://bugs.eclipse.org/bugs/show_bug.cgi?id=412726
+	// https://bugs.eclipse.org/bugs/show_bug.cgi?id=428526
 	public void testBug412726() throws JavaModelException {
 		String contents =
 			"public interface X {\n" +
@@ -2729,23 +2730,26 @@ public class ASTConverter18Test extends ConverterTestSetup {
 		/* case 0: vanilla case - interface with one abstract method */
 		TypeDeclaration type =  (TypeDeclaration) unit.types().get(0);
 		ITypeBinding typeBinding = type.resolveBinding();
-		assertTrue("Not a functional interface", typeBinding.isFunctionalInterface());
+		assertEquals("Incorrect method", typeBinding.getDeclaredMethods()[0], typeBinding.getFunctionalInterfaceMethod());
 		/* case 1: interface without any method */
 		type =  (TypeDeclaration) unit.types().get(1);
 		typeBinding = type.resolveBinding();
-		assertFalse("A Functional interface", typeBinding.isFunctionalInterface());
+		assertNull(typeBinding.getFunctionalInterfaceMethod());
 		/* case 2: interface with just one default method and without any abstract method */
 		type =  (TypeDeclaration) unit.types().get(2);
 		typeBinding = type.resolveBinding();
-		assertFalse("A Functional interface", typeBinding.isFunctionalInterface());
+		assertNull(typeBinding.getFunctionalInterfaceMethod());
 		/* case 3: interface with just one default method and one abstract method */
 		type =  (TypeDeclaration) unit.types().get(3);
 		typeBinding = type.resolveBinding();
-		assertTrue("A Functional interface", typeBinding.isFunctionalInterface());
+		IMethodBinding functionalInterfaceMethod = typeBinding.getFunctionalInterfaceMethod();
+		assertNotNull(functionalInterfaceMethod);
+		assertEquals("Incorrect method", "public abstract void bar() ", functionalInterfaceMethod.toString());
+		assertEquals(typeBinding, functionalInterfaceMethod.getDeclaringClass());
 		/* case 4: interface with just one default method and two abstract methods */
 		type =  (TypeDeclaration) unit.types().get(4);
 		typeBinding = type.resolveBinding();
-		assertFalse("A Functional interface", typeBinding.isFunctionalInterface());
+		assertNull(typeBinding.getFunctionalInterfaceMethod());
 	}
 	/**
 	 * https://bugs.eclipse.org/bugs/show_bug.cgi?id=417017
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java
index e0c03a2..39137a2 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java
@@ -2040,7 +2040,7 @@ public MethodBinding getSingleAbstractMethod(Scope scope, boolean replaceWildcar
 		if (exceptionsCount != exceptionsLength) {
 			System.arraycopy(exceptions, 0, exceptions = new ReferenceBinding[exceptionsCount], 0, exceptionsCount);
 		}
-		this.singleAbstractMethod[index] = new MethodBinding(theAbstractMethod.modifiers, 
+		this.singleAbstractMethod[index] = new MethodBinding(theAbstractMethod.modifiers | ClassFileConstants.AccSynthetic, 
 				theAbstractMethod.selector, 
 				theAbstractMethod.returnType, 
 				theAbstractMethod.parameters, 
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IBinding.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IBinding.java
index 4f0a531..e3f163d 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IBinding.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IBinding.java
@@ -217,6 +217,7 @@ public interface IBinding {
 	 * <li>the default constructor of a source class</li>
 	 * <li>the constructor of an anonymous class</li>
 	 * <li>member value pairs</li>
+	 * <li>synthetic bindings</li>
 	 * </ul>
 	 * For all other kind of type, method, variable, annotation and package bindings,
 	 * this method returns non-<code>null</code>.
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ITypeBinding.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ITypeBinding.java
index 0e25ced..d27f080 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ITypeBinding.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ITypeBinding.java
@@ -297,13 +297,15 @@ public interface ITypeBinding extends IBinding {
 	/**
 	 * Returns the single abstract method that constitutes the single function 
 	 * contract (aside from any redeclarations of methods of <code>java.lang.Object</code>) 
-	 * of the receiver interface type or null if there no such contract or if the receiver 
-	 * is not an interface. 
+	 * of the receiver interface type or <code>null</code> if there is no such contract or if the receiver 
+	 * is not an interface.
+	 * <p>
+	 * The returned method binding may be synthetic and its {@link #getDeclaringClass() declaring type}
+	 * may be a super interface type of this type binding.
+	 * </p>
 	 * 
-	 * @return the single abstract method that represents the single function contract 
-	 * (aside from any redeclarations of methods of <code>java.lang.Object</code>) of 
-	 * this interface type or null if the receiver is not an interface or if the receiver 
-	 * has more than one abstract method or no abstract methods.
+	 * @return the single abstract method that represents the single function contract, or
+	 * <code>null</code> if the receiver is not a functional interface type
 	 *
 	 * @since 3.9 BETA_JAVA8
 	 */
@@ -778,15 +780,6 @@ public interface ITypeBinding extends IBinding {
 	public boolean isGenericType();
 
 	/**
-	 * Returns whether this type binding represents a functional interface type.
-	 *
-	 * @return <code>true</code> if this object represents a functional interface,
-	 *    and <code>false</code> otherwise
-	 * @since 3.9 BETA_JAVA8
-	 */
-	public boolean isFunctionalInterface();
-
-	/**
 	 * Returns whether this type binding represents an interface type.
 	 * <p>
 	 * Note that an interface can also be an annotation type.
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/RecoveredTypeBinding.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/RecoveredTypeBinding.java
index ad6d182..63af14b 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/RecoveredTypeBinding.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/RecoveredTypeBinding.java
@@ -453,13 +453,6 @@ class RecoveredTypeBinding implements ITypeBinding {
 	}
 
 	/* (non-Javadoc)
-	 * @see org.eclipse.jdt.core.dom.ITypeBinding#isFunctionalInterface()
-	 */
-	public boolean isFunctionalInterface() {
-		return false;
-	}
-
-	/* (non-Javadoc)
 	 * @see org.eclipse.jdt.core.dom.ITypeBinding#isInterface()
 	 */
 	public boolean isInterface() {
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java
index e5c2556..5aeae60 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java
@@ -1179,20 +1179,6 @@ class TypeBinding implements ITypeBinding {
 		return false;
 	}
 
-
-	/*
-	 * @see ITypeBinding#isFunctionalInterface()
-	 */
-	public boolean isFunctionalInterface() {
-		if (isInterface()) {
-			ReferenceBinding referenceBinding = (ReferenceBinding)this.binding;
-			if (referenceBinding != null) {
-				return referenceBinding.isFunctionalInterface(this.resolver.scope());
-			}
-		}
-		return false;
-	}
-
 	/*
 	 * @see ITypeBinding#isInterface()
 	 */

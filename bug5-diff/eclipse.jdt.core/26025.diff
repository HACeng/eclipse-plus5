commit 0c5e5d5de2b5b0f249b5295408c7158b212338bf
Author: Jerome lanneluc <jlanneluc>
Date:   Tue Nov 19 11:27:42 2002 +0000

    Fix for bug 26025

1	0	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java
1	1	org.eclipse.jdt.core.tests.model/workspace/JavaSearch/src/Test.java
0	2	org.eclipse.jdt.core.tests.model/workspace/JavaSearch/src/c5/Test.java
3	1	org.eclipse.jdt.core/buildnotes_jdt-core.html
6	6	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ClasspathDirectory.java
18	7	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ClasspathJar.java
8	8	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ClasspathLocation.java
110	0	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ClasspathSourceDirectory.java
0	37	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FileNameEnvironment.java
188	0	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/JavaSearchNameEnvironment.java
1	2	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java
index 68b98e4..db103e5 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java
@@ -2010,6 +2010,7 @@ public void testSimplePackageReference() throws JavaModelException, CoreExceptio
 		"src/Test.java Test.main(String[]) -> void [p]\n" +
 		"src/Test.java Test.main(String[]) -> void [p]\n" +
 		"src/Test.java Test.main(String[]) -> void [p]\n" +
+		"src/Test.java Test.main(String[]) -> void [p]\n" +
 		"src/TypeReferenceInImport/X.java [p]", 
 		resultCollector.toString());
 }
diff --git a/org.eclipse.jdt.core.tests.model/workspace/JavaSearch/src/Test.java b/org.eclipse.jdt.core.tests.model/workspace/JavaSearch/src/Test.java
index 9aa1333..05f1459 100644
--- a/org.eclipse.jdt.core.tests.model/workspace/JavaSearch/src/Test.java
+++ b/org.eclipse.jdt.core.tests.model/workspace/JavaSearch/src/Test.java
@@ -11,7 +11,7 @@ static {
 public static void main(String[] args) {
 	p.Y y = new p.Y();
 	y.foo(1, "a", y);
-	y.bar();
+	p.Y.bar();
 	
 	p.Z z = new p.Z();
 	z.foo(1, "a", z);
diff --git a/org.eclipse.jdt.core.tests.model/workspace/JavaSearch/src/c5/Test.java b/org.eclipse.jdt.core.tests.model/workspace/JavaSearch/src/c5/Test.java
index b703035..285ecb7 100644
--- a/org.eclipse.jdt.core.tests.model/workspace/JavaSearch/src/c5/Test.java
+++ b/org.eclipse.jdt.core.tests.model/workspace/JavaSearch/src/c5/Test.java
@@ -3,5 +3,3 @@ package c5;
 public class Test {
 	public String class_path;
 }
-
-/* Test case for bug 
\ No newline at end of file
diff --git a/org.eclipse.jdt.core/buildnotes_jdt-core.html b/org.eclipse.jdt.core/buildnotes_jdt-core.html
index 765d3a3..24dfb0c 100644
--- a/org.eclipse.jdt.core/buildnotes_jdt-core.html
+++ b/org.eclipse.jdt.core/buildnotes_jdt-core.html
@@ -55,7 +55,9 @@ IProgressMonitor)</code> and <code>JavaCore.newLibraryEntry(...)</code>.
 </ul>
 
 <h3>Problem Reports Fixed</h3>
-<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=26138">26138</a>
+<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=26025">26025</a>
+Search should not use a file based name environment 
+<br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=26138">26138</a>
 JACKS - The null literal should not be considered as a constant expression
 <br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=26585">26585</a>
 Wrong code generation in conditional expression
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ClasspathDirectory.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ClasspathDirectory.java
index fcad233..ff7d560 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ClasspathDirectory.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ClasspathDirectory.java
@@ -33,7 +33,7 @@ ClasspathDirectory(IContainer binaryFolder, boolean isOutputFolder) {
 	this.directoryCache = new SimpleLookupTable(5);
 }
 
-void cleanup() {
+public void cleanup() {
 	this.directoryCache = null;
 }
 
@@ -82,7 +82,7 @@ public boolean equals(Object o) {
 	return binaryFolder.equals(((ClasspathDirectory) o).binaryFolder);
 } 
 
-NameEnvironmentAnswer findClass(String binaryFileName, String qualifiedPackageName, String qualifiedBinaryFileName) {
+public NameEnvironmentAnswer findClass(String binaryFileName, String qualifiedPackageName, String qualifiedBinaryFileName) {
 	if (!doesFileExist(binaryFileName, qualifiedPackageName, qualifiedBinaryFileName)) return null; // most common case
 
 	try {
@@ -92,19 +92,19 @@ NameEnvironmentAnswer findClass(String binaryFileName, String qualifiedPackageNa
 	return null;
 }
 
-IPath getProjectRelativePath() {
+public IPath getProjectRelativePath() {
 	return binaryFolder.getProjectRelativePath();
 }
 
-boolean isOutputFolder() {
+public boolean isOutputFolder() {
 	return isOutputFolder;
 }
 
-boolean isPackage(String qualifiedPackageName) {
+public boolean isPackage(String qualifiedPackageName) {
 	return directoryList(qualifiedPackageName) != null;
 }
 
-void reset() {
+public void reset() {
 	this.directoryCache = new SimpleLookupTable(5);
 }
 
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ClasspathJar.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ClasspathJar.java
index f8b3e1d..6aa988b 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ClasspathJar.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ClasspathJar.java
@@ -20,11 +20,12 @@ import java.io.*;
 import java.util.*;
 import java.util.zip.*;
 
-class ClasspathJar extends ClasspathLocation {
+public class ClasspathJar extends ClasspathLocation {
 
 String zipFilename; // keep for equals
 IFile resource;
 ZipFile zipFile;
+boolean closeZipFileAtEnd;
 SimpleLookupTable packageCache;
 
 ClasspathJar(String zipFilename) {
@@ -41,8 +42,15 @@ ClasspathJar(IFile resource) {
 	this.packageCache = null;
 }
 
-void cleanup() {
-	if (zipFile != null) {
+public ClasspathJar(ZipFile zipFile) {
+	this.zipFilename = zipFile.getName();
+	this.zipFile = zipFile;
+	this.closeZipFileAtEnd = false;
+	this.packageCache = null;
+}
+
+public void cleanup() {
+	if (zipFile != null && this.closeZipFileAtEnd) {
 		try { zipFile.close(); } catch(IOException e) {}
 		this.zipFile = null;
 	}
@@ -56,7 +64,7 @@ public boolean equals(Object o) {
 	return zipFilename.equals(((ClasspathJar) o).zipFilename);
 } 
 
-NameEnvironmentAnswer findClass(String binaryFileName, String qualifiedPackageName, String qualifiedBinaryFileName) {
+public NameEnvironmentAnswer findClass(String binaryFileName, String qualifiedPackageName, String qualifiedBinaryFileName) {
 	if (!isPackage(qualifiedPackageName)) return null; // most common case
 
 	try {
@@ -66,19 +74,22 @@ NameEnvironmentAnswer findClass(String binaryFileName, String qualifiedPackageNa
 	return null;
 }
 
-IPath getProjectRelativePath() {
+public IPath getProjectRelativePath() {
 	if (resource == null) return null;
 	return	resource.getProjectRelativePath();
 }
 
-boolean isPackage(String qualifiedPackageName) {
+public boolean isPackage(String qualifiedPackageName) {
 	if (packageCache != null)
 		return packageCache.containsKey(qualifiedPackageName);
 
 	this.packageCache = new SimpleLookupTable(41);
 	packageCache.put("", ""); //$NON-NLS-1$ //$NON-NLS-2$
 	try {
-		this.zipFile = new ZipFile(zipFilename);
+		if (this.zipFile == null) {
+			this.zipFile = new ZipFile(zipFilename);
+			this.closeZipFileAtEnd = true;
+		}
 
 		nextEntry : for (Enumeration e = zipFile.entries(); e.hasMoreElements(); ) {
 			String fileName = ((ZipEntry) e.nextElement()).getName();
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ClasspathLocation.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ClasspathLocation.java
index 29e0b53..28d6993 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ClasspathLocation.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ClasspathLocation.java
@@ -15,13 +15,13 @@ import org.eclipse.core.runtime.*;
 
 import org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer;
 
-abstract class ClasspathLocation {
+public abstract class ClasspathLocation {
 
 static ClasspathLocation forSourceFolder(IContainer sourceFolder, IContainer outputFolder, char[][] exclusionPatterns) {
 	return new ClasspathMultiDirectory(sourceFolder, outputFolder, exclusionPatterns);
 }
 
-static ClasspathLocation forBinaryFolder(IContainer binaryFolder, boolean isOutputFolder) {
+public static ClasspathLocation forBinaryFolder(IContainer binaryFolder, boolean isOutputFolder) {
 	return new ClasspathDirectory(binaryFolder, isOutputFolder);
 }
 
@@ -33,20 +33,20 @@ static ClasspathLocation forLibrary(IFile library) {
 	return new ClasspathJar(library);
 }
 
-abstract NameEnvironmentAnswer findClass(String binaryFileName, String qualifiedPackageName, String qualifiedBinaryFileName);
+public abstract NameEnvironmentAnswer findClass(String binaryFileName, String qualifiedPackageName, String qualifiedBinaryFileName);
 
-abstract IPath getProjectRelativePath();
+public abstract IPath getProjectRelativePath();
 
-boolean isOutputFolder() {
+public boolean isOutputFolder() {
 	return false;
 }
 
-abstract boolean isPackage(String qualifiedPackageName);
+public abstract boolean isPackage(String qualifiedPackageName);
 
 // free anything which is not required when the state is saved
-void cleanup() {
+public void cleanup() {
 }
 // reset any internal caches before another compile loop starts
-void reset() {
+public void reset() {
 }
 }
\ No newline at end of file
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ClasspathSourceDirectory.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ClasspathSourceDirectory.java
new file mode 100644
index 0000000..12e3617
--- /dev/null
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ClasspathSourceDirectory.java
@@ -0,0 +1,110 @@
+/*******************************************************************************
+ * Copyright (c) 2000, 2001, 2002 International Business Machines Corp. and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Common Public License v1.0 
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/cpl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ ******************************************************************************/
+package org.eclipse.jdt.internal.core.search.matching;
+
+import org.eclipse.core.resources.IContainer;
+import org.eclipse.core.resources.IResource;
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IPath;
+import org.eclipse.jdt.internal.compiler.batch.CompilationUnit;
+import org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer;
+import org.eclipse.jdt.internal.core.Util;
+import org.eclipse.jdt.internal.core.builder.ClasspathLocation;
+import org.eclipse.jdt.internal.core.builder.SimpleLookupTable;
+
+public class ClasspathSourceDirectory extends ClasspathLocation {
+
+	IContainer sourceFolder;
+	String sourceLocation; 
+	String encoding;
+	SimpleLookupTable directoryCache;
+	String[] missingPackageHolder = new String[1];
+
+ClasspathSourceDirectory(IContainer sourceFolder, String encoding) {
+	this.sourceFolder = sourceFolder;
+	IPath location = sourceFolder.getLocation();
+	this.sourceLocation = location != null ? location.addTrailingSeparator().toString() : ""; //$NON-NLS-1$
+	this.encoding = encoding;	
+	this.directoryCache = new SimpleLookupTable(5);
+}
+
+public void cleanup() {
+	this.directoryCache = null;
+}
+
+String[] directoryList(String qualifiedPackageName) {
+	String[] dirList = (String[]) directoryCache.get(qualifiedPackageName);
+	if (dirList == missingPackageHolder) return null; // package exists in another classpath directory or jar
+	if (dirList != null) return dirList;
+
+	try {
+		IResource container = sourceFolder.findMember(qualifiedPackageName); // this is a case-sensitive check
+		if (container instanceof IContainer) {
+			IResource[] members = ((IContainer) container).members();
+			dirList = new String[members.length];
+			int index = 0;
+			for (int i = 0, l = members.length; i < l; i++) {
+				IResource m = members[i];
+				String name;
+				if (m.getType() == IResource.FILE && Util.isJavaFileName(name = m.getName()))
+					dirList[index++] = name;
+			}
+			if (index < dirList.length)
+				System.arraycopy(dirList, 0, dirList = new String[index], 0, index);
+			directoryCache.put(qualifiedPackageName, dirList);
+			return dirList;
+		}
+	} catch(CoreException ignored) {
+	}
+	directoryCache.put(qualifiedPackageName, missingPackageHolder);
+	return null;
+}
+
+boolean doesFileExist(String fileName, String qualifiedPackageName) {
+	String[] dirList = directoryList(qualifiedPackageName);
+	if (dirList == null) return false; // most common case
+
+	for (int i = dirList.length; --i >= 0;)
+		if (fileName.equals(dirList[i]))
+			return true;
+	return false;
+}
+
+public boolean equals(Object o) {
+	if (this == o) return true;
+	if (!(o instanceof ClasspathSourceDirectory)) return false;
+
+	return sourceFolder.equals(((ClasspathSourceDirectory) o).sourceFolder);
+} 
+
+public NameEnvironmentAnswer findClass(String sourceFileName, String qualifiedPackageName, String qualifiedSourceFileName) {
+	if (!doesFileExist(sourceFileName, qualifiedPackageName)) return null; // most common case
+
+	String fullSourcePath = this.sourceLocation + qualifiedSourceFileName;
+	return new NameEnvironmentAnswer(new CompilationUnit(null, fullSourcePath, this.encoding));
+}
+
+public IPath getProjectRelativePath() {
+	return sourceFolder.getProjectRelativePath();
+}
+
+public boolean isPackage(String qualifiedPackageName) {
+	return directoryList(qualifiedPackageName) != null;
+}
+
+public void reset() {
+	this.directoryCache = new SimpleLookupTable(5);
+}
+
+public String toString() {
+	return "Source classpath directory " + sourceFolder.getFullPath().toString(); //$NON-NLS-1$
+}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FileNameEnvironment.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FileNameEnvironment.java
deleted file mode 100644
index a73002b..0000000
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/FileNameEnvironment.java
+++ /dev/null
@@ -1,37 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2000, 2001, 2002 International Business Machines Corp. and others.
- * All rights reserved. This program and the accompanying materials 
- * are made available under the terms of the Common Public License v0.5 
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/cpl-v05.html
- * 
- * Contributors:
- *     IBM Corporation - initial API and implementation
- ******************************************************************************/
-package org.eclipse.jdt.internal.core.search.matching;
-
-import java.io.File;
-import java.io.IOException;
-import java.util.zip.ZipFile;
-
-import org.eclipse.core.runtime.CoreException;
-import org.eclipse.core.runtime.Path;
-import org.eclipse.jdt.internal.compiler.batch.ClasspathJar;
-import org.eclipse.jdt.internal.compiler.batch.FileSystem;
-import org.eclipse.jdt.internal.core.JavaModelManager;
-
-public class FileNameEnvironment extends FileSystem {
-	
-public FileNameEnvironment(String[] classpathNames, String encoding, int[] classpathDirectoryModes) {
-	super(classpathNames, new String[0], encoding, classpathDirectoryModes);
-}
-
-public ClasspathJar getClasspathJar(File file) throws IOException {
-	try {
-		ZipFile zipFile = JavaModelManager.getJavaModelManager().getZipFile(new Path(file.getPath()));
-		return new ClasspathJar(zipFile, false);
-	} catch (CoreException e) {
-		return super.getClasspathJar(file);
-	}
-}
-}
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/JavaSearchNameEnvironment.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/JavaSearchNameEnvironment.java
new file mode 100644
index 0000000..ffcf858
--- /dev/null
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/JavaSearchNameEnvironment.java
@@ -0,0 +1,188 @@
+/*******************************************************************************
+ * Copyright (c) 2000, 2001, 2002 International Business Machines Corp. and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Common Public License v1.0 
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/cpl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ ******************************************************************************/
+package org.eclipse.jdt.internal.core.search.matching;
+
+import java.io.File;
+import java.util.ArrayList;
+import java.util.zip.ZipFile;
+
+import org.eclipse.core.resources.*;
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IPath;
+import org.eclipse.core.runtime.Path;
+import org.eclipse.jdt.core.IClasspathEntry;
+import org.eclipse.jdt.core.IJavaProject;
+import org.eclipse.jdt.core.JavaCore;
+import org.eclipse.jdt.core.compiler.CharOperation;
+import org.eclipse.jdt.internal.compiler.env.INameEnvironment;
+import org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer;
+import org.eclipse.jdt.internal.core.*;
+import org.eclipse.jdt.internal.core.builder.*;
+
+public class JavaSearchNameEnvironment implements INameEnvironment {
+	
+	ClasspathLocation[] locations;
+	
+public JavaSearchNameEnvironment(IJavaProject javaProject) {
+	try {
+		computeClasspathLocations(javaProject.getProject().getWorkspace().getRoot(), (JavaProject) javaProject);
+	} catch(CoreException e) {
+		this.locations = new ClasspathLocation[0];
+	}
+}
+
+public void cleanup() {
+	for (int i = 0, length = this.locations.length; i < length; i++) {
+		this.locations[i].cleanup();
+	}
+}
+
+private void computeClasspathLocations(
+	IWorkspaceRoot root,
+	JavaProject javaProject) throws CoreException {
+
+	String encoding = null;
+
+	IClasspathEntry[] classpath = javaProject.getExpandedClasspath(true/*ignore unresolved variables*/);
+	int length = classpath.length;
+	ArrayList locations = new ArrayList(length);
+	nextEntry : for (int i = 0; i < length; i++) {
+		IClasspathEntry entry = classpath[i];
+		IPath path = entry.getPath();
+		Object target = JavaModel.getTarget(root, path, true);
+		if (target == null) continue nextEntry;
+
+		switch(entry.getEntryKind()) {
+			case IClasspathEntry.CPE_SOURCE :
+				if (!(target instanceof IContainer)) continue nextEntry;
+				if (encoding == null) {
+					encoding = javaProject.getOption(JavaCore.CORE_ENCODING, true);
+				}
+				locations.add(new ClasspathSourceDirectory((IContainer)target, encoding));
+				continue nextEntry;
+
+			case IClasspathEntry.CPE_LIBRARY :
+				if (target instanceof IResource) {
+					IResource resource = (IResource) target;
+					ClasspathLocation location = null;
+					if (resource instanceof IFile) {
+						String fileName = path.lastSegment();
+						if (!Util.isArchiveFileName(fileName)) continue nextEntry;
+						location = getClasspathJar((IFile)resource);
+					} else if (resource instanceof IContainer) {
+						location = ClasspathLocation.forBinaryFolder((IContainer) target, false); // is library folder not output folder
+					}
+					locations.add(location);
+				} else if (target instanceof File) {
+					String fileName = path.lastSegment();
+					if (!Util.isArchiveFileName(fileName)) continue nextEntry;
+					locations.add(getClasspathJar(path.toOSString()));
+				}
+				continue nextEntry;
+		}
+	}
+
+	this.locations = new ClasspathLocation[locations.size()];
+	locations.toArray(this.locations);
+}
+
+private NameEnvironmentAnswer findClass(String qualifiedTypeName, char[] typeName) {
+	String 
+		binaryFileName = null, qBinaryFileName = null, 
+		sourceFileName = null, qSourceFileName = null, 
+		qPackageName = null;
+	for (int i = 0, length = this.locations.length; i < length; i++) {
+		ClasspathLocation location = this.locations[i];
+		NameEnvironmentAnswer answer;
+		if (location instanceof ClasspathSourceDirectory) {
+			if (sourceFileName == null) {
+				qSourceFileName = qualifiedTypeName + ".java"; //$NON-NLS-1$
+				sourceFileName = qSourceFileName;
+				qPackageName =  ""; //$NON-NLS-1$
+				if (qualifiedTypeName.length() > typeName.length) {
+					int typeNameStart = qSourceFileName.length() - typeName.length - 5; // size of ".java"
+					qPackageName =  qSourceFileName.substring(0, typeNameStart - 1);
+					sourceFileName = qSourceFileName.substring(typeNameStart);
+				}
+			}
+			answer = location.findClass(
+				sourceFileName,
+				qPackageName,
+				qSourceFileName);
+		} else {
+			if (binaryFileName == null) {
+				qBinaryFileName = qualifiedTypeName + ".class"; //$NON-NLS-1$
+				binaryFileName = qBinaryFileName;
+				qPackageName =  ""; //$NON-NLS-1$
+				if (qualifiedTypeName.length() > typeName.length) {
+					int typeNameStart = qBinaryFileName.length() - typeName.length - 6; // size of ".class"
+					qPackageName =  qBinaryFileName.substring(0, typeNameStart - 1);
+					binaryFileName = qBinaryFileName.substring(typeNameStart);
+				}
+			}
+			answer = 
+				location.findClass(
+					binaryFileName, 
+					qPackageName, 
+					qBinaryFileName);
+		}
+		if (answer != null) return answer;
+	}
+	return null;
+}
+
+public NameEnvironmentAnswer findType(char[] typeName, char[][] packageName) {
+	if (typeName != null)
+		return findClass(
+			new String(CharOperation.concatWith(packageName, typeName, '/')),
+			typeName);
+	return null;
+}
+
+public NameEnvironmentAnswer findType(char[][] compoundName) {
+	if (compoundName != null)
+		return findClass(
+			new String(CharOperation.concatWith(compoundName, '/')),
+			compoundName[compoundName.length - 1]);
+	return null;
+}
+
+private ClasspathLocation getClasspathJar(IFile file) {
+	try {
+		ZipFile zipFile = JavaModelManager.getJavaModelManager().getZipFile(file.getFullPath());
+		return new ClasspathJar(zipFile);
+	} catch (CoreException e) {
+		return null;
+	}
+}
+
+private ClasspathLocation getClasspathJar(String zipPathString) {
+	IPath zipPath = new Path(zipPathString);
+	try {
+		ZipFile zipFile = JavaModelManager.getJavaModelManager().getZipFile(zipPath);
+		return new ClasspathJar(zipFile);
+	} catch (CoreException e) {
+		return null;
+	}
+}
+
+public boolean isPackage(char[][] compoundName, char[] packageName) {
+	return isPackage(new String(CharOperation.concatWith(compoundName, packageName, '/')));
+}
+
+public boolean isPackage(String qualifiedPackageName) {
+	for (int i = 0, length = this.locations.length; i < length; i++)
+		if (this.locations[i].isPackage(qualifiedPackageName))
+			return true;
+	return false;
+}
+
+}
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java
index 2758828..3c7de9a 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java
@@ -1097,8 +1097,7 @@ private void addMatchingOpenable(IResource resource, Openable openable)
 				}
 			}
 		}
-		String encoding = project.getOption(JavaCore.CORE_ENCODING, true);
-		return new FileNameEnvironment(classpathNames, encoding, rootModes);
+		return new JavaSearchNameEnvironment(project);
 		
 	}
 

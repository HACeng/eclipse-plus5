commit cb5a1629ec4abe9ac2961e6bb7c27b796e771ac8
Author: Manoj Palat <manpalat@in.ibm.com>
Date:   Wed Apr 26 15:46:00 2017 +0530

    core part fix for bug 515792: [1.9] [dom ast] visitor additions for
    module node
    
    Change-Id: I695f745b64468a9adf06c7258c28dbae5b47a002

17	1	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/MarkedASTFlattener.java
8	1	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTRecoveryPropagator.java
12	1	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTSyntaxErrorPropagator.java
17	1	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultASTVisitor.java
2	0	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ExportsStatement.java
3	1	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ModuleDeclaration.java
2	0	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/OpensStatement.java
2	0	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ProvidesStatement.java
2	0	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/UsesStatement.java
2	1	org.eclipse.jdt.core/model/org/eclipse/jdt/core/IModuleDescription.java
12	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/DOMFinder.java
76	1	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/HierarchicalASTVisitor.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/MarkedASTFlattener.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/MarkedASTFlattener.java
index 94ea5ea..838b6dd 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/MarkedASTFlattener.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/MarkedASTFlattener.java
@@ -1,10 +1,14 @@
 /*******************************************************************************
- * Copyright (c) 2008, 2016 IBM Corporation and others.
+ * Copyright (c) 2008, 2017 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *     IBM Corporation - initial API and implementation
  *******************************************************************************/
@@ -249,6 +253,8 @@ public class MarkedASTFlattener extends NaiveASTFlattener {
 					buffer.append("ENUM_DECLARATION");break;
 				case ASTNode.EXPRESSION_STATEMENT :
 					buffer.append("EXPRESSION_STATEMENT");break;
+				case ASTNode.EXPORTS_STATEMENT :
+					buffer.append("EXPORTS_STATEMENT");break;
 				case ASTNode.FIELD_ACCESS :
 					buffer.append("FIELD_ACCESS");break;
 				case ASTNode.FIELD_DECLARATION :
@@ -287,12 +293,16 @@ public class MarkedASTFlattener extends NaiveASTFlattener {
 					buffer.append("METHOD_REF_PARAMETER");break;
 				case ASTNode.MODIFIER :
 					buffer.append("MODIFIER");break;
+				case ASTNode.MODULE_DECLARATION :
+					buffer.append("MODULE_DECLARATION");break;
 				case ASTNode.NORMAL_ANNOTATION :
 					buffer.append("NORMAL_ANNOTATION");break;
 				case ASTNode.NULL_LITERAL :
 					buffer.append("NULL_LITERAL");break;
 				case ASTNode.NUMBER_LITERAL :
 					buffer.append("NUMBER_LITERAL");break;
+				case ASTNode.OPENS_STATEMENT :
+					buffer.append("OPENS_STATEMENT");break;
 				case ASTNode.PACKAGE_DECLARATION :
 					buffer.append("PACKAGE_DECLARATION");break;
 				case ASTNode.PARAMETERIZED_TYPE :
@@ -305,10 +315,14 @@ public class MarkedASTFlattener extends NaiveASTFlattener {
 					buffer.append("PREFIX_EXPRESSION");break;
 				case ASTNode.PRIMITIVE_TYPE :
 					buffer.append("PRIMITIVE_TYPE");break;
+				case ASTNode.PROVIDES_STATEMENT :
+					buffer.append("PROVIDES_STATEMENT");break;
 				case ASTNode.QUALIFIED_NAME :
 					buffer.append("QUALIFIED_NAME");break;
 				case ASTNode.QUALIFIED_TYPE :
 					buffer.append("QUALIFIED_TYPE");break;
+				case ASTNode.REQUIRES_STATEMENT :
+					buffer.append("REQUIRES_STATEMENT");break;
 				case ASTNode.RETURN_STATEMENT :
 					buffer.append("RETURN_STATEMENT");break;
 				case ASTNode.SIMPLE_NAME :
@@ -351,6 +365,8 @@ public class MarkedASTFlattener extends NaiveASTFlattener {
 					buffer.append("TYPE_LITERAL");break;
 				case ASTNode.TYPE_PARAMETER :
 					buffer.append("TYPE_PARAMETER");break;
+				case ASTNode.USES_STATEMENT :
+					buffer.append("USES_STATEMENT");break;
 				case ASTNode.VARIABLE_DECLARATION_EXPRESSION :
 					buffer.append("VARIABLE_DECLARATION_EXPRESSION");break;
 				case ASTNode.VARIABLE_DECLARATION_FRAGMENT :
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTRecoveryPropagator.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTRecoveryPropagator.java
index 9e86e96..96270f6 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTRecoveryPropagator.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTRecoveryPropagator.java
@@ -1,10 +1,14 @@
 /*******************************************************************************
- * Copyright (c) 2006, 2014 IBM Corporation and others.
+ * Copyright (c) 2006, 2017 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *     IBM Corporation - initial API and implementation
  *******************************************************************************/
@@ -51,6 +55,8 @@ class ASTRecoveryPropagator extends DefaultASTVisitor {
 		this.endingTokens.put(Initializer.class, new int[]{TerminalTokens.TokenNameRBRACE});
 		this.endingTokens.put(MethodDeclaration.class, new int[]{NOTHING, TerminalTokens.TokenNameSEMICOLON});
 		this.endingTokens.put(MethodInvocation.class, new int[]{TerminalTokens.TokenNameRPAREN});
+		this.endingTokens.put(ModuleDeclaration.class, new int[]{TerminalTokens.TokenNameRBRACE});
+		this.endingTokens.put(ModuleStatement.class, new int[]{TerminalTokens.TokenNameSEMICOLON});
 		this.endingTokens.put(NullLiteral.class, new int[]{TerminalTokens.TokenNamenull});
 		this.endingTokens.put(NumberLiteral.class, new int[]{TerminalTokens.TokenNameIntegerLiteral, TerminalTokens.TokenNameLongLiteral, TerminalTokens.TokenNameFloatingPointLiteral, TerminalTokens.TokenNameDoubleLiteral});
 		this.endingTokens.put(PackageDeclaration.class, new int[]{TerminalTokens.TokenNameSEMICOLON});
@@ -192,6 +198,7 @@ class ASTRecoveryPropagator extends DefaultASTVisitor {
 				case ASTNode.IMPORT_DECLARATION:
 				case ASTNode.INITIALIZER:
 				case ASTNode.METHOD_DECLARATION:
+				case ASTNode.MODULE_DECLARATION:
 				case ASTNode.PACKAGE_DECLARATION:
 				case ASTNode.TYPE_DECLARATION:
 				case ASTNode.MARKER_ANNOTATION:
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTSyntaxErrorPropagator.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTSyntaxErrorPropagator.java
index 8590672..f3d462e 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTSyntaxErrorPropagator.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTSyntaxErrorPropagator.java
@@ -1,10 +1,14 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2011 IBM Corporation and others.
+ * Copyright (c) 2000, 2017 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *     IBM Corporation - initial API and implementation
  *******************************************************************************/
@@ -97,6 +101,13 @@ class ASTSyntaxErrorPropagator extends ASTVisitor {
 	}
 
 	/*
+	 * Module declared on ASTVisitor.
+	 */
+	public boolean visit(ModuleDeclaration node) {
+		return checkAndTagAsMalformed(node);
+	}
+
+	/*
 	 * Method declared on ASTVisitor.
 	 */
 	public boolean visit(PackageDeclaration node) {
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultASTVisitor.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultASTVisitor.java
index 326f071..ac3f05e 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultASTVisitor.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultASTVisitor.java
@@ -1,10 +1,14 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2013 IBM Corporation and others.
+ * Copyright (c) 2000, 2017 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *     IBM Corporation - initial API and implementation
  *******************************************************************************/
@@ -183,6 +187,12 @@ class DefaultASTVisitor extends ASTVisitor {
 	public void endVisit(Modifier node) {
 		endVisitNode(node);
 	}
+	public void endVisit(ModuleDeclaration node) {
+		endVisitNode(node);
+	}
+	public void endVisit(ModuleStatement node) {
+		endVisitNode(node);
+	}
 	public void endVisit(NameQualifiedType node) {
 		endVisitNode(node);
 	}
@@ -468,6 +478,12 @@ class DefaultASTVisitor extends ASTVisitor {
 	public boolean visit(Modifier node) {
 		return visitNode(node);
 	}
+	public boolean visit(ModuleDeclaration node) {
+		return visitNode(node);
+	}
+	public boolean visit(ModuleStatement node) {
+		return visitNode(node);
+	}
 	public boolean visit(MethodRefParameter node) {
 		return visitNode(node);
 	}
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ExportsStatement.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ExportsStatement.java
index 23dd1f1..9af5e11 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ExportsStatement.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ExportsStatement.java
@@ -24,6 +24,8 @@ import java.util.List;
  * </pre>
  *
  * @since 3.13 BETA_JAVA9
+ * 
+ * @noextend This class is not intended to be subclassed by clients.
  * @noinstantiate This class is not intended to be instantiated by clients.
  */
 @SuppressWarnings({"rawtypes"})
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ModuleDeclaration.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ModuleDeclaration.java
index a079175..e4d2afc 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ModuleDeclaration.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ModuleDeclaration.java
@@ -23,13 +23,15 @@ import java.util.List;
  * <pre>
  * ModuleDeclaration:
  *  [ Javadoc ] { ExtendedModifier } <b>module</b> Name <b>{</b>
- *        [ ExportsStatement | RequiresStatement | UsesStatement | ProvidesStatement ]
+ *        [ ExportsStatement | OpensStatement | RequiresStatement | UsesStatement | ProvidesStatement ]
  *  <b>}</b>
  * </pre>
  * <p>
  * </p>
  *
  * @since 3.13 BETA_JAVA9
+ * 
+ * @noextend This class is not intended to be subclassed by clients.
  * @noinstantiate This class is not intended to be instantiated by clients.
  */
 @SuppressWarnings("rawtypes")
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/OpensStatement.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/OpensStatement.java
index ed137ac..06d48aa 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/OpensStatement.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/OpensStatement.java
@@ -24,6 +24,8 @@ import java.util.List;
  * </pre>
  *
  * @since 3.13 BETA_JAVA9
+ * 
+ * @noextend This class is not intended to be subclassed by clients.
  * @noinstantiate This class is not intended to be instantiated by clients.
  */
 @SuppressWarnings({"rawtypes"})
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ProvidesStatement.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ProvidesStatement.java
index 2c7da2b..acc2a90 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ProvidesStatement.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ProvidesStatement.java
@@ -24,6 +24,8 @@ import java.util.List;
  * </pre>
  *
  * @since 3.13 BETA_JAVA9
+ * 
+ * @noextend This class is not intended to be subclassed by clients.
  * @noinstantiate This class is not intended to be instantiated by clients.
  */
 @SuppressWarnings({"rawtypes", "unchecked"})
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/UsesStatement.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/UsesStatement.java
index d94c3cb..75b0bc4 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/UsesStatement.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/UsesStatement.java
@@ -24,6 +24,8 @@ import java.util.List;
  * </pre>
  *
  * @since 3.13 BETA_JAVA9
+ * 
+ * @noextend This class is not intended to be subclassed by clients.
  * @noinstantiate This class is not intended to be instantiated by clients.
  */
 @SuppressWarnings("rawtypes")
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IModuleDescription.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IModuleDescription.java
index d8e3011..b699f61 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IModuleDescription.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IModuleDescription.java
@@ -25,8 +25,9 @@ package org.eclipse.jdt.core;
  * }
  * </pre>
  *
+ * @noimplement This interface is not intended to be implemented by clients.
  * @since 3.13 BETA_JAVA9
  */
 public interface IModuleDescription extends IMember {
-
+	// empty block
 }
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/DOMFinder.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/DOMFinder.java
index 19629a2..527260d 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/DOMFinder.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/DOMFinder.java
@@ -1,10 +1,14 @@
 /*******************************************************************************
- * Copyright (c) 2005, 2015 IBM Corporation and others.
+ * Copyright (c) 2005, 2017 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *     IBM Corporation - initial API and implementation
  *     Stephan Herrmann - Contributions for
@@ -35,6 +39,7 @@ import org.eclipse.jdt.core.dom.Initializer;
 import org.eclipse.jdt.core.dom.LambdaExpression;
 import org.eclipse.jdt.core.dom.MarkerAnnotation;
 import org.eclipse.jdt.core.dom.MethodDeclaration;
+import org.eclipse.jdt.core.dom.ModuleDeclaration;
 import org.eclipse.jdt.core.dom.NormalAnnotation;
 import org.eclipse.jdt.core.dom.PackageDeclaration;
 import org.eclipse.jdt.core.dom.ParameterizedType;
@@ -154,6 +159,12 @@ public class DOMFinder extends ASTVisitor {
 		return true;
 	}
 
+	public boolean visit(ModuleDeclaration node) {
+		if (found(node, node.getName()) && this.resolveBinding) {
+			this.foundBinding = null;// TODO BETA_JAVA9 define node.resolveBinding();
+		}
+		return true;
+	}
 	public boolean visit(NormalAnnotation node) {
 		if (found(node, node) && this.resolveBinding)
 			this.foundBinding = node.resolveAnnotationBinding();
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/HierarchicalASTVisitor.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/HierarchicalASTVisitor.java
index 66f82de..fadfc4b 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/HierarchicalASTVisitor.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/HierarchicalASTVisitor.java
@@ -1,10 +1,14 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2016 IBM Corporation and others.
+ * Copyright (c) 2000, 2017 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *     IBM Corporation - initial API and implementation
  *******************************************************************************/
@@ -1135,5 +1139,76 @@ public abstract class HierarchicalASTVisitor extends ASTVisitor {
 	}
 
 //---- End VariableDeclaration Hierarchy -----------------------------
+//---- Begin Module Hierarchy -----------------------------------------
+	@Override
+	public boolean visit(ModuleDeclaration node) {
+		return visit((ASTNode) node);
+	}
+
+	@Override
+	public void endVisit(ModuleDeclaration node) {
+		endVisit((ASTNode) node);
+	}
+
+	public boolean visit(ModuleStatement node) {
+		return visit((ASTNode) node);
+	}
+
+	public void endVisit(ModuleStatement node) {
+		endVisit((ASTNode) node);
+	}
+
+	@Override
+	public boolean visit(ExportsStatement node) {
+		return visit((ModuleStatement) node);
+	}
+
+	@Override
+	public void endVisit(ExportsStatement node) {
+		endVisit((ModuleStatement) node);
+	}
+
+	@Override
+	public boolean visit(OpensStatement node) {
+		return visit((ModuleStatement) node);
+	}
+
+	@Override
+	public void endVisit(OpensStatement node) {
+		endVisit((ModuleStatement) node);
+	}
+
+	@Override
+	public boolean visit(RequiresStatement node) {
+		return visit((ModuleStatement) node);
+	}
+
+	@Override
+	public void endVisit(RequiresStatement node) {
+		endVisit((ModuleStatement) node);
+	}
+
+	@Override
+	public boolean visit(ProvidesStatement node) {
+		return visit((ModuleStatement) node);
+	}
+
+	@Override
+	public void endVisit(ProvidesStatement node) {
+		endVisit((ModuleStatement) node);
+	}
+
+	@Override
+	public boolean visit(UsesStatement node) {
+		return visit((ModuleStatement) node);
+	}
+
+	@Override
+	public void endVisit(UsesStatement node) {
+		endVisit((ModuleStatement) node);
+	}
+
+//---- End Module Hierarchy -------------------------------------------
+
 //---- End ASTNode Hierarchy -----------------------------------------
 }
commit d90f3254fdce24bb86ff311dd64b519305a170ea
Author: Manoj Palat <manpalat@in.ibm.com>
Date:   Mon May 8 15:58:57 2017 +0530

    test part of fix for bug 515792 [1.9] [dom ast] visitor additions for
    module node

14	1	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterBindingsTest.java
12	1	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTNodesCollectorVisitor.java
5	1	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java
8	0	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTVisitorTest.java
13	1	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BindingsCollectorVisitor.java
5	1	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ConverterTestSetup.java
11	1	org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceASTTests.java
12	1	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnnotationBinding.java
3	0	org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/NaiveASTFlattener.java
1	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/DOMFinder.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterBindingsTest.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterBindingsTest.java
index 6b8f9e1..994416c 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterBindingsTest.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterBindingsTest.java
@@ -1,10 +1,14 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2015 IBM Corporation and others.
+ * Copyright (c) 2000, 2017 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *     IBM Corporation - initial API and implementation
  *******************************************************************************/
@@ -53,6 +57,7 @@ import org.eclipse.jdt.core.dom.MemberRef;
 import org.eclipse.jdt.core.dom.MethodDeclaration;
 import org.eclipse.jdt.core.dom.MethodInvocation;
 import org.eclipse.jdt.core.dom.MethodRef;
+import org.eclipse.jdt.core.dom.ModuleDeclaration;
 import org.eclipse.jdt.core.dom.NullLiteral;
 import org.eclipse.jdt.core.dom.NumberLiteral;
 import org.eclipse.jdt.core.dom.PackageDeclaration;
@@ -280,6 +285,14 @@ public class ASTConverterBindingsTest extends ConverterTestSetup {
 		}
 
 		/**
+		 * @see org.eclipse.jdt.core.dom.ASTVisitor#endVisit(ModuleDeclaration)
+		 */
+		public void endVisit(ModuleDeclaration node) {
+/*			IModuleBinding moduleBinding = node.resolveBinding(); //TODO: enable after bug 515875 enables module binding
+			collectBindings(node, moduleBinding);*/
+		}
+
+		/**
 		 * @see org.eclipse.jdt.core.dom.ASTVisitor#endVisit(MethodInvocation)
 		 */
 		public void endVisit(MethodInvocation node) {
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTNodesCollectorVisitor.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTNodesCollectorVisitor.java
index ef3396c..4469cd2 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTNodesCollectorVisitor.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTNodesCollectorVisitor.java
@@ -1,10 +1,14 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2015 IBM Corporation and others.
+ * Copyright (c) 2000, 2017 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *     IBM Corporation - initial API and implementation
  *******************************************************************************/
@@ -145,6 +149,13 @@ class ASTNodesCollectorVisitor extends ASTVisitor {
 	}
 
 	/**
+	 * @see org.eclipse.jdt.core.dom.ASTVisitor#endVisit(org.eclipse.jdt.core.dom.ModuleDeclaration)
+	 */
+	public void endVisit(ModuleDeclaration node) {
+		node.setName(node.getAST().newSimpleName("XXX")); //$NON-NLS-1$
+	}
+
+	/**
 	 * @see org.eclipse.jdt.core.dom.ASTVisitor#endVisit(org.eclipse.jdt.core.dom.MethodInvocation)
 	 */
 	public void endVisit(MethodInvocation node) {
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java
index e8d7a0d..25721a5 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2016 IBM Corporation and others.
+ * Copyright (c) 2000, 2017 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -6486,6 +6486,10 @@ public class ASTTest extends org.eclipse.jdt.core.tests.junit.extension.TestCase
 				assertTrue(node.resolveBinding() == null);
 				return true;
 			}
+			public boolean visit(ModuleDeclaration node) {
+//				assertTrue(node.resolveBinding() == null);//TODO: enable after bug 515875 enables module binding
+				return true;
+			}
 			public boolean visit(TypeDeclaration node) {
 				assertTrue(node.resolveBinding() == null);
 				return true;
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTVisitorTest.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTVisitorTest.java
index e2dbde6..a708434 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTVisitorTest.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTVisitorTest.java
@@ -811,6 +811,14 @@ public class ASTVisitorTest extends org.eclipse.jdt.core.tests.junit.extension.T
 			ASTVisitorTest.this.b.append("eMI)"); //$NON-NLS-1$
 		}
 
+		public boolean visit(ModuleDeclaration node) {
+			ASTVisitorTest.this.b.append("(MoD"); //$NON-NLS-1$
+			return isVisitingChildren();
+		}
+		public void endVisit(ModuleDeclaration node) {
+			ASTVisitorTest.this.b.append("MoD)"); //$NON-NLS-1$
+		}
+
 		public boolean visit(NullLiteral node) {
 			ASTVisitorTest.this.b.append("(eNL"); //$NON-NLS-1$
 			return isVisitingChildren();
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BindingsCollectorVisitor.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BindingsCollectorVisitor.java
index b762e5e..f3c2c18 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BindingsCollectorVisitor.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BindingsCollectorVisitor.java
@@ -1,10 +1,14 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2015 IBM Corporation and others.
+ * Copyright (c) 2000, 2017 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *     IBM Corporation - initial API and implementation
  *******************************************************************************/
@@ -227,6 +231,14 @@ class BindingsCollectorVisitor extends ASTVisitor {
 	}
 
 	/**
+	 * @see org.eclipse.jdt.core.dom.ASTVisitor#endVisit(ModuleDeclaration)
+	 */
+	public void endVisit(ModuleDeclaration node) {
+/*		IModuleBinding moduleBinding = node.resolveBinding();//TODO: enable after bug 515875 enables module binding
+		collectBindings(node, moduleBinding);*/
+	}
+
+	/**
 	 * @see org.eclipse.jdt.core.dom.ASTVisitor#endVisit(MethodInvocation)
 	 */
 	public void endVisit(MethodInvocation node) {
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ConverterTestSetup.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ConverterTestSetup.java
index fce0fc2..c9440fe 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ConverterTestSetup.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ConverterTestSetup.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2016 IBM Corporation and others.
+ * Copyright (c) 2000, 2017 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -428,6 +428,10 @@ public abstract class ConverterTestSetup extends AbstractASTTests {
 			super.endVisit(node);
 		}
 
+		public void endVisit(ModuleDeclaration node) {
+//			assertNotNull(node+" should have a binding", node.resolveBinding());//TODO: enable after bug 515875 enables module binding
+			super.endVisit(node);
+		}
 		public void endVisit(MethodRef node) {
 			assertNotNull(node+" should have a binding", node.resolveBinding());
 			super.endVisit(node);
diff --git a/org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceASTTests.java b/org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceASTTests.java
index 58878e7..6cf34f9 100644
--- a/org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceASTTests.java
+++ b/org.eclipse.jdt.core.tests.performance/src/org/eclipse/jdt/core/tests/performance/FullSourceWorkspaceASTTests.java
@@ -1,10 +1,14 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2015 IBM Corporation and others.
+ * Copyright (c) 2000, 20157IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *     IBM Corporation - initial API and implementation
  *******************************************************************************/
@@ -223,6 +227,9 @@ public class FullSourceWorkspaceASTTests extends FullSourceWorkspaceTests {
 		public boolean visit(MethodDeclaration node) {
 			return visitNode(node);
 		}
+		public boolean visit(ModuleDeclaration node) {
+			return visitNode(node);
+		}
 		public boolean visit(MethodInvocation node) {
 			return visitNode(node);
 		}
@@ -431,6 +438,9 @@ public class FullSourceWorkspaceASTTests extends FullSourceWorkspaceTests {
 		public void endVisit(MethodDeclaration node) {
 			endVisitNode(node);
 		}
+		public void endVisit(ModuleDeclaration node) {
+			endVisitNode(node);
+		}
 		public void endVisit(MethodInvocation node) {
 			endVisitNode(node);
 		}
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnnotationBinding.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnnotationBinding.java
index 0e8f6db..38a92fb 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnnotationBinding.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnnotationBinding.java
@@ -1,10 +1,14 @@
 /*******************************************************************************
- * Copyright (c) 2005, 2011 BEA Systems, Inc.
+ * Copyright (c) 2005, 2017 BEA Systems, Inc, IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *    tyeung@bea.com - initial API and implementation
  *    IBM Corporation - implemented methods from IBinding
@@ -132,6 +136,11 @@ class AnnotationBinding implements IAnnotationBinding {
 				if (methodBinding == null) return null;
 				parentElement = methodBinding.getJavaElement();
 			break;
+/*		case ASTNode.MODULE_DECLARATION:  TODO: Enable after bug 515875 enables module binding
+			IModuleBinding moduleBinding = ((ModuleDeclaration) parent).resolveBinding();
+			if (moduleBinding == null) return null;
+			parentElement = moduleBinding.getJavaElement();
+		break;*/
 		case ASTNode.VARIABLE_DECLARATION_STATEMENT:
 			fragment = (VariableDeclarationFragment) ((VariableDeclarationStatement) parent).fragments().get(0);
 			variableBinding = fragment.resolveBinding();
@@ -178,6 +187,8 @@ class AnnotationBinding implements IAnnotationBinding {
 			return fragment.resolveBinding().getKey();
 		case ASTNode.METHOD_DECLARATION:
 			return ((MethodDeclaration) recipient).resolveBinding().getKey();
+/*		case ASTNode.MODULE_DECLARATION: //TODO: Enable after bug 515875 enable module binding
+			return ((ModuleDeclaration) recipient).resolveBinding().getKey();*/
 		case ASTNode.VARIABLE_DECLARATION_STATEMENT:
 			fragment = (VariableDeclarationFragment) ((VariableDeclarationStatement) recipient).fragments().get(0);
 			return fragment.resolveBinding().getKey();
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/NaiveASTFlattener.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/NaiveASTFlattener.java
index 34dfcc6..1422c1b 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/NaiveASTFlattener.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/NaiveASTFlattener.java
@@ -1231,6 +1231,9 @@ public class NaiveASTFlattener extends ASTVisitor {
 
 	@Override
 	public boolean visit(ModuleDeclaration node) {
+		if (node.getJavadoc() != null) {
+			node.getJavadoc().accept(this);
+		}
 		printModifiers(node.modifiers());
 		this.buffer.append("module"); //$NON-NLS-1$
 		this.buffer.append(" "); //$NON-NLS-1$
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/DOMFinder.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/DOMFinder.java
index 527260d..4eeef5a 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/DOMFinder.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/DOMFinder.java
@@ -161,7 +161,7 @@ public class DOMFinder extends ASTVisitor {
 
 	public boolean visit(ModuleDeclaration node) {
 		if (found(node, node.getName()) && this.resolveBinding) {
-			this.foundBinding = null;// TODO BETA_JAVA9 define node.resolveBinding();
+			// this.foundBinding = node.resolveBinding(); TODO: Enable after bug 515875 enables module binding
 		}
 		return true;
 	}
commit ba99bd4f7c1add3dfd8f17954f330514d7f7ae20
Author: Manoj Palat <manpalat@in.ibm.com>
Date:   Fri May 26 22:47:08 2017 +0530

    enable  module binding parts for Bug 515792: [1.9] [dom ast] visitor
    additions for module node

3	2	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterBindingsTest.java
1	1	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java
2	2	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BindingsCollectorVisitor.java
1	1	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ConverterTestSetup.java
2	2	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnnotationBinding.java
1	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/DOMFinder.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterBindingsTest.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterBindingsTest.java
index 994416c..b26a7fb 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterBindingsTest.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterBindingsTest.java
@@ -47,6 +47,7 @@ import org.eclipse.jdt.core.dom.EnumDeclaration;
 import org.eclipse.jdt.core.dom.FieldAccess;
 import org.eclipse.jdt.core.dom.IBinding;
 import org.eclipse.jdt.core.dom.IMethodBinding;
+import org.eclipse.jdt.core.dom.IModuleBinding;
 import org.eclipse.jdt.core.dom.IPackageBinding;
 import org.eclipse.jdt.core.dom.ITypeBinding;
 import org.eclipse.jdt.core.dom.IVariableBinding;
@@ -288,8 +289,8 @@ public class ASTConverterBindingsTest extends ConverterTestSetup {
 		 * @see org.eclipse.jdt.core.dom.ASTVisitor#endVisit(ModuleDeclaration)
 		 */
 		public void endVisit(ModuleDeclaration node) {
-/*			IModuleBinding moduleBinding = node.resolveBinding(); //TODO: enable after bug 515875 enables module binding
-			collectBindings(node, moduleBinding);*/
+			IModuleBinding moduleBinding = node.resolveBinding();
+			collectBindings(node, moduleBinding);
 		}
 
 		/**
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java
index 3400ce7..ae2afc7 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java
@@ -6487,7 +6487,7 @@ public class ASTTest extends org.eclipse.jdt.core.tests.junit.extension.TestCase
 				return true;
 			}
 			public boolean visit(ModuleDeclaration node) {
-//				assertTrue(node.resolveBinding() == null);//TODO: enable after bug 515875 enables module binding
+				assertTrue(node.resolveBinding() == null);
 				return true;
 			}
 			public boolean visit(TypeDeclaration node) {
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BindingsCollectorVisitor.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BindingsCollectorVisitor.java
index f3c2c18..0224ace 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BindingsCollectorVisitor.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/BindingsCollectorVisitor.java
@@ -234,8 +234,8 @@ class BindingsCollectorVisitor extends ASTVisitor {
 	 * @see org.eclipse.jdt.core.dom.ASTVisitor#endVisit(ModuleDeclaration)
 	 */
 	public void endVisit(ModuleDeclaration node) {
-/*		IModuleBinding moduleBinding = node.resolveBinding();//TODO: enable after bug 515875 enables module binding
-		collectBindings(node, moduleBinding);*/
+		IModuleBinding moduleBinding = node.resolveBinding();
+		collectBindings(node, moduleBinding);
 	}
 
 	/**
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ConverterTestSetup.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ConverterTestSetup.java
index c9440fe..bf68291 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ConverterTestSetup.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ConverterTestSetup.java
@@ -429,7 +429,7 @@ public abstract class ConverterTestSetup extends AbstractASTTests {
 		}
 
 		public void endVisit(ModuleDeclaration node) {
-//			assertNotNull(node+" should have a binding", node.resolveBinding());//TODO: enable after bug 515875 enables module binding
+			assertNotNull(node+" should have a binding", node.resolveBinding());
 			super.endVisit(node);
 		}
 		public void endVisit(MethodRef node) {
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnnotationBinding.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnnotationBinding.java
index 38a92fb..4833f29 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnnotationBinding.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnnotationBinding.java
@@ -136,11 +136,11 @@ class AnnotationBinding implements IAnnotationBinding {
 				if (methodBinding == null) return null;
 				parentElement = methodBinding.getJavaElement();
 			break;
-/*		case ASTNode.MODULE_DECLARATION:  TODO: Enable after bug 515875 enables module binding
+		case ASTNode.MODULE_DECLARATION:
 			IModuleBinding moduleBinding = ((ModuleDeclaration) parent).resolveBinding();
 			if (moduleBinding == null) return null;
 			parentElement = moduleBinding.getJavaElement();
-		break;*/
+		break;
 		case ASTNode.VARIABLE_DECLARATION_STATEMENT:
 			fragment = (VariableDeclarationFragment) ((VariableDeclarationStatement) parent).fragments().get(0);
 			variableBinding = fragment.resolveBinding();
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/DOMFinder.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/DOMFinder.java
index 4eeef5a..7dab3d7 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/DOMFinder.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/DOMFinder.java
@@ -161,7 +161,7 @@ public class DOMFinder extends ASTVisitor {
 
 	public boolean visit(ModuleDeclaration node) {
 		if (found(node, node.getName()) && this.resolveBinding) {
-			// this.foundBinding = node.resolveBinding(); TODO: Enable after bug 515875 enables module binding
+			this.foundBinding = node.resolveBinding();
 		}
 		return true;
 	}
commit af5b8b36ed8b4384e8e20236dec5df2c9b427627
Author: Manoj Palat <manpalat@in.ibm.com>
Date:   Tue Jun 13 23:42:45 2017 +0530

    missed out part fix for Bug 515792: [1.9] [dom ast] visitor additions
    for module node

2	2	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnnotationBinding.java
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnnotationBinding.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnnotationBinding.java
index 4833f29..26c530c 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnnotationBinding.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnnotationBinding.java
@@ -187,8 +187,8 @@ class AnnotationBinding implements IAnnotationBinding {
 			return fragment.resolveBinding().getKey();
 		case ASTNode.METHOD_DECLARATION:
 			return ((MethodDeclaration) recipient).resolveBinding().getKey();
-/*		case ASTNode.MODULE_DECLARATION: //TODO: Enable after bug 515875 enable module binding
-			return ((ModuleDeclaration) recipient).resolveBinding().getKey();*/
+		case ASTNode.MODULE_DECLARATION:
+			return ((ModuleDeclaration) recipient).resolveBinding().getKey();
 		case ASTNode.VARIABLE_DECLARATION_STATEMENT:
 			fragment = (VariableDeclarationFragment) ((VariableDeclarationStatement) recipient).fragments().get(0);
 			return fragment.resolveBinding().getKey();

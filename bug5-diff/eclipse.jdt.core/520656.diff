commit 57cf79139dd515086d92744c56f6963d0d91fd3a
Author: Stephan Herrmann <stephan.herrmann@berlin.de>
Date:   Thu Aug 17 22:56:55 2017 +0200

    Bug 520656: [9] ISourceReference.getSource() returns "/" for a
    BinaryModule
    
    Change-Id: I5d00fc2b680c1c4da074fe136a5f01bad2efe656

63	1	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java
67	1	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AttachSourceTests.java
2	1	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
18	5	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ModuleDeclaration.java
2	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java
2	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceModuleBinding.java
13	0	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryModule.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java
index d9ab9b3..005566e 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java
@@ -5,6 +5,10 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *     IBM Corporation - initial API and implementation
  *     Nina Rinskaya
@@ -31,14 +35,21 @@ import org.eclipse.jdt.internal.compiler.CompilationResult;
 import org.eclipse.jdt.internal.compiler.Compiler;
 import org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy;
 import org.eclipse.jdt.internal.compiler.IProblemFactory;
+import org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration;
+import org.eclipse.jdt.internal.compiler.batch.BasicModule;
 import org.eclipse.jdt.internal.compiler.batch.CompilationUnit;
 import org.eclipse.jdt.internal.compiler.batch.FileSystem;
 import org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants;
+import org.eclipse.jdt.internal.compiler.env.ICompilationUnit;
+import org.eclipse.jdt.internal.compiler.env.IModule;
 import org.eclipse.jdt.internal.compiler.env.INameEnvironment;
 import org.eclipse.jdt.internal.compiler.impl.CompilerOptions;
+import org.eclipse.jdt.internal.compiler.lookup.TypeConstants;
+import org.eclipse.jdt.internal.compiler.parser.Parser;
 import org.eclipse.jdt.internal.compiler.problem.DefaultProblem;
 import org.eclipse.jdt.internal.compiler.problem.DefaultProblemFactory;
 import org.eclipse.jdt.internal.compiler.problem.ProblemReporter;
+
 @SuppressWarnings({ "unchecked", "rawtypes" })
 public class Util {
     // Trace for delete operation
@@ -162,6 +173,50 @@ public static CompilationUnit[] compilationUnits(String[] testFiles) {
     }
     return result;
 }
+// --------
+// reduced version of org.eclipse.jdt.internal.compiler.batch.Main.getCompilationUnits()
+// (need to associate ordinary compilation units with preceding modular compilation units)
+public static CompilationUnit[] compilationUnits9(String[] testFiles, String compliance,
+								IErrorHandlingPolicy errorHandlingPolicy, IProblemFactory problemFactory)
+{
+	int fileCount = testFiles.length / 2;
+	CompilationUnit[] units = new CompilationUnit[fileCount];
+	
+	String modName = null;
+	CompilationUnit modCU = null;
+	for (int i = 0; i < fileCount; i++) {
+		String fileName = testFiles[i*2];
+		boolean isModuleInfo = fileName.endsWith(TypeConstants.MODULE_INFO_FILE_NAME_STRING);
+		units[i] = new CompilationUnit(testFiles[i*2+1].toCharArray(), fileName, null, "", false, modName); 
+		if (isModuleInfo) {
+			IModule mod = extractModuleDesc(testFiles[i*2+1], compliance, errorHandlingPolicy, problemFactory);
+			if (mod != null) {
+				modName = String.valueOf(mod.name());
+				modCU = units[i];
+				modCU.module = mod.name();
+			}
+		} else {
+			if (modCU != null)
+				units[i].setModule(modCU);
+		}
+	}
+	return units;
+}
+private static IModule extractModuleDesc(String contents, String compliance,
+								IErrorHandlingPolicy errorHandlingPolicy, IProblemFactory problemFactory)
+{
+	Map<String,String> opts = new HashMap<>();
+	opts.put(CompilerOptions.OPTION_Source, compliance);
+	Parser parser = new Parser(new ProblemReporter(errorHandlingPolicy, new CompilerOptions(opts), problemFactory), false);
+	ICompilationUnit cu = new CompilationUnit(contents.toCharArray(), "module-info.java", null);
+	CompilationResult compilationResult = new CompilationResult(cu, 0, 1, 10);
+	CompilationUnitDeclaration unit = parser.parse(cu, compilationResult);
+	if (unit.isModuleInfo() && unit.moduleDeclaration != null) {
+		return new BasicModule(unit.moduleDeclaration, null);
+	}
+	return null;
+}
+//--------
 public static void compile(String[] pathsAndContents, Map options, String outputPath) {
 	compile(pathsAndContents, options, null, outputPath);
 }
@@ -209,7 +264,14 @@ public static void compile(String[] pathsAndContents, Map options, String[] clas
                 requestor,
                 problemFactory);
         batchCompiler.options.produceReferenceInfo = true;
-        batchCompiler.compile(compilationUnits(pathsAndContents)); // compile all files together
+        CompilationUnit[] compilationUnits;
+        if (compilerOptions.complianceLevel >= ClassFileConstants.JDK9) {
+        	String compliance = (String)options.get(CompilerOptions.OPTION_Compliance);
+			compilationUnits = compilationUnits9(pathsAndContents, compliance, errorHandlingPolicy, problemFactory);
+        } else {
+        	compilationUnits = compilationUnits(pathsAndContents);
+        }
+		batchCompiler.compile(compilationUnits); // compile all files together
         // cleanup
     	nameEnvironment.cleanup();
         if (requestor.hasErrors)
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AttachSourceTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AttachSourceTests.java
index 20c9af0..5b30917 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AttachSourceTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AttachSourceTests.java
@@ -1,10 +1,14 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2015 IBM Corporation and others.
+ * Copyright (c) 2000, 2017 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *     IBM Corporation - initial API and implementation
  *******************************************************************************/
@@ -38,6 +42,8 @@ import org.eclipse.jdt.core.IJavaElement;
 import org.eclipse.jdt.core.IJavaProject;
 import org.eclipse.jdt.core.IMember;
 import org.eclipse.jdt.core.IMethod;
+import org.eclipse.jdt.core.IModularClassFile;
+import org.eclipse.jdt.core.IModuleDescription;
 import org.eclipse.jdt.core.IPackageFragment;
 import org.eclipse.jdt.core.IPackageFragmentRoot;
 import org.eclipse.jdt.core.ISourceRange;
@@ -49,6 +55,7 @@ import org.eclipse.jdt.core.dom.AST;
 import org.eclipse.jdt.core.dom.ASTNode;
 import org.eclipse.jdt.core.dom.ASTParser;
 import org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants;
+import org.eclipse.jdt.internal.compiler.impl.CompilerOptions;
 import org.eclipse.jdt.internal.core.ExternalFoldersManager;
 import org.eclipse.jdt.internal.core.JarPackageFragmentRoot;
 import org.eclipse.jdt.internal.core.JavaModelManager;
@@ -69,11 +76,20 @@ public class AttachSourceTests extends ModifyingResourceTests {
 	}
 
 	public static Test suite() {
+		String javaVersion = System.getProperty("java.version");
+		if (javaVersion.length() > 3) {
+			javaVersion = javaVersion.substring(0, 3);
+		}
+		long jdkLevel = CompilerOptions.versionToJdkLevel(javaVersion);
+		if (jdkLevel >= ClassFileConstants.JDK9) {
+			isJRE9 = true;
+		}
 		return buildModelTestSuite(AttachSourceTests.class);
 	}
 
 	/** @deprecated using deprecated code */
 	private static final int AST_INTERNAL_JLS2 = AST.JLS2;
+	private static boolean isJRE9 = false;
 
 	private IPackageFragmentRoot pkgFragmentRoot;
 
@@ -1830,4 +1846,54 @@ public void testBug336046() throws Exception {
 		JavaCore.setOptions(javaCoreOptions);
 	}
 }
+public void testModule1() throws CoreException, IOException {
+	if (!isJRE9) {
+		System.err.println(this.getClass().getName()+'.'+getName()+" needs a Java 9 JRE - skipped");
+		return;
+	}
+	try {
+		IJavaProject javaProject = createJavaProject("Test", new String[]{"src"}, null, "bin", JavaCore.VERSION_9);
+		createFolder("/Test/src/test1");
+		createFile("/Test/src/test1/Test.java",
+			"package test1;\n" +
+			"\n" +
+			"public class Test {}");
+		createFile("/Test/src/module-info.java",
+			"module test {\n" +
+			"	requires mod.one;\n" +
+			"	exports test1;\n" +
+			"}\n");
+
+		String modOneSrc = 
+			"\n" +
+			"/** The no. one module. */\n" +
+			"module mod.one {\n" +
+			"  exports m.o.p;\n" +
+			"}\n";
+		String[] pathAndContents = new String[] {
+			"module-info.java",
+			modOneSrc,
+			"m/o/p/C.java",
+			"package m.o.p;\n" +
+			"public class C {\n" + 
+			"}"
+		};
+		addLibrary(javaProject, "mod.one.jar", "mod.onesrc.zip", pathAndContents, JavaCore.VERSION_9);
+		IPackageFragmentRoot root = javaProject.getPackageFragmentRoot(getFile("/Test/mod.one.jar"));
+		IModularClassFile cf = root.getPackageFragment("").getModularClassFile();
+		assertSourceEquals(
+			"Unexpected source for class file mod.one/module-info.class",
+			modOneSrc,
+			cf.getSource());
+		IModuleDescription module = cf.getModule();
+		ISourceRange javadocRange = module.getJavadocRange();
+		String srcJavadoc = modOneSrc.substring(javadocRange.getOffset(), javadocRange.getOffset()+javadocRange.getLength());
+		assertEquals("javadoc from source", "/** The no. one module. */", srcJavadoc);
+		ISourceRange sourceRange = module.getSourceRange();
+		assertEquals("source start", 1, sourceRange.getOffset()); // start after initial '\n'
+		assertEquals("source end", modOneSrc.length()-2, sourceRange.getLength()); // end before terminal '\n'
+	} finally {
+		deleteProject("Test");
+	}
+}
 }
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
index 319a5e0..385a612 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
@@ -1029,7 +1029,8 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 					if (parsedUnit.isModuleInfo() && parsedUnit.moduleDeclaration != null) {
 						ModuleDeclaration module = parsedUnit.moduleDeclaration;
 						this.lookupEnvironment.buildTypeBindings(parsedUnit, null /*no access restriction*/);
-						module.resolveDirectives(parsedUnit.scope);
+						module.resolveModuleDirectives(parsedUnit.scope);
+						module.resolvePackageDirectives(parsedUnit.scope);
 						module.resolveTypeDirectives(parsedUnit.scope);
 						acceptPackageVisibilityStatements(module.exports, parsedUnit.scope);
 						acceptPackageVisibilityStatements(module.opens, parsedUnit.scope);
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ModuleDeclaration.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ModuleDeclaration.java
index 8007e73..6eced62 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ModuleDeclaration.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ModuleDeclaration.java
@@ -64,7 +64,8 @@ public class ModuleDeclaration extends ASTNode {
 	public long[] sourcePositions;
 	public int modifiers = ClassFileConstants.AccDefault;
 	boolean ignoreFurtherInvestigation;
-	boolean hasResolvedDirectives;
+	boolean hasResolvedModuleDirectives;
+	boolean hasResolvedPackageDirectives;
 	CompilationResult compilationResult;
 
 	public ModuleDeclaration(CompilationResult compilationResult, char[][] tokens, long[] positions) {
@@ -132,16 +133,16 @@ public class ModuleDeclaration extends ASTNode {
 		}
 	}
 
-	/** Resolve those module directives that relate to modules & packages (requires, exports, opens). */
-	public void resolveDirectives(CompilationUnitScope cuScope) {
+	/** Resolve those module directives that relate to modules (requires). */
+	public void resolveModuleDirectives(CompilationUnitScope cuScope) {
 		if (this.binding == null) {
 			this.ignoreFurtherInvestigation = true;
 			return;
 		}
-		if (this.hasResolvedDirectives)
+		if (this.hasResolvedModuleDirectives)
 			return;
 
-		this.hasResolvedDirectives = true;
+		this.hasResolvedModuleDirectives = true;
 
 		Set<ModuleBinding> requiredModules = new HashSet<ModuleBinding>();
 		Set<ModuleBinding> requiredTransitiveModules = new HashSet<ModuleBinding>();
@@ -160,6 +161,18 @@ public class ModuleDeclaration extends ASTNode {
 		}
 		this.binding.setRequires(requiredModules.toArray(new ModuleBinding[requiredModules.size()]),
 								 requiredTransitiveModules.toArray(new ModuleBinding[requiredTransitiveModules.size()]));
+	}
+
+	/** Resolve those module directives that relate to packages (exports, opens). */
+	public void resolvePackageDirectives(CompilationUnitScope cuScope) {
+		if (this.binding == null) {
+			this.ignoreFurtherInvestigation = true;
+			return;
+		}
+		if (this.hasResolvedPackageDirectives)
+			return;
+
+		this.hasResolvedPackageDirectives = true;
 
 		Set<PackageBinding> exportedPkgs = new HashSet<>();
 		for (int i = 0; i < this.exportsCount; i++) {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java
index d4aa711..9bdc41f 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java
@@ -211,7 +211,8 @@ void checkAndSetImports() {
 	}
 
 	if (this.referenceContext.moduleDeclaration != null) {
-		this.referenceContext.moduleDeclaration.resolveDirectives(this);
+		this.referenceContext.moduleDeclaration.resolveModuleDirectives(this);
+		this.referenceContext.moduleDeclaration.resolvePackageDirectives(this);
 	}
 
 	if (this.referenceContext.imports == null) {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceModuleBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceModuleBinding.java
index 2a0ded7..693c968 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceModuleBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceModuleBinding.java
@@ -79,7 +79,7 @@ public class SourceModuleBinding extends ModuleBinding {
 	@Override
 	Stream<ModuleBinding> getRequiredModules(boolean transitiveOnly) {
 		if (this.requires == NO_MODULES) {
-			this.scope.referenceContext.moduleDeclaration.resolveDirectives(this.scope);
+			this.scope.referenceContext.moduleDeclaration.resolveModuleDirectives(this.scope);
 		}
 		return super.getRequiredModules(transitiveOnly);
 	}
@@ -87,7 +87,7 @@ public class SourceModuleBinding extends ModuleBinding {
 	@Override
 	public ModuleBinding[] getAllRequiredModules() {
 		if (this.scope != null)
-			this.scope.referenceContext.moduleDeclaration.resolveDirectives(this.scope);
+			this.scope.referenceContext.moduleDeclaration.resolveModuleDirectives(this.scope);
 		return super.getAllRequiredModules();
 	}
 }
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryModule.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryModule.java
index a5842d0..9389996 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryModule.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryModule.java
@@ -15,6 +15,7 @@
 package org.eclipse.jdt.internal.core;
 
 import org.eclipse.jdt.core.IJavaElement;
+import org.eclipse.jdt.core.ISourceRange;
 import org.eclipse.jdt.core.JavaModelException;
 
 public class BinaryModule extends AbstractModule {
@@ -39,6 +40,18 @@ public class BinaryModule extends AbstractModule {
 	public String getKey(boolean forceOpen) throws JavaModelException {
 		return getKey(this, forceOpen);
 	}
+	@Override
+	public ISourceRange getSourceRange() throws JavaModelException {
+		SourceMapper mapper= getSourceMapper();
+		if (mapper != null) {
+			// ensure the class file's buffer is open so that source ranges are computed
+			((ModularClassFile)getClassFile()).getBuffer();
+
+			return mapper.getSourceRange(this);
+		} else {
+			return SourceMapper.UNKNOWN_RANGE;
+		}
+	}
 	public String toString(String lineDelimiter) {
 		StringBuffer buffer = new StringBuffer();
 		try {

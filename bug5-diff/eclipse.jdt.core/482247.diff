commit 48aaa503eb58e270f9afd7df4a85cb65e562a44f
Author: Stephan Herrmann <stephan.herrmann@berlin.de>
Date:   Thu Nov 19 18:43:13 2015 +0100

    Bug 482247 - [compiler][null] Empty arrays should satisfy @NonNull
    Type[]
    
    Change-Id: Ic595dc7a2ebae034ab47ffeca13a70efe8872f4c

33	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
21	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayAllocationExpression.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
index 306882e..81fab6e 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
@@ -8664,4 +8664,37 @@ public void testBug477719() {
 		getCompilerOptions(),
 		"");
 }
+public void testBug482247() {
+	runConformTestWithLibs(
+		new String[] {
+			"X.java",
+			"import org.eclipse.jdt.annotation.*;\n" +
+			"public class X {\n" +
+			"	@NonNull String @NonNull[] s1 = new String[0];\n" + // expected type drives typing
+			"	@Nullable String @NonNull[] s2 = new String[0];\n" + // expected type drives typing
+			"	<T> @NonNull T first(@NonNull T @NonNull[] arr) {\n" +
+			"		return arr[0];\n" +
+			"	}\n" +
+			"	void other(@Nullable String[] s) {\n" +
+			"		s[0] = null;\n" +
+			"	}\n" +
+			"	@NonNull String test()  {\n" +
+			"		other(new String[0]);\n" + // unchanged semantics
+			"		return first(new String[0]);\n" + // unchanged semantics
+			"	}\n" +
+			"}\n"
+		},
+		getCompilerOptions(),
+		"----------\n" + 
+		"1. WARNING in X.java (at line 12)\n" + 
+		"	other(new String[0]);\n" + 
+		"	      ^^^^^^^^^^^^^\n" + 
+		"Null type safety (type annotations): The expression of type \'String[]\' needs unchecked conversion to conform to \'@Nullable String []\'\n" + 
+		"----------\n" + 
+		"2. WARNING in X.java (at line 13)\n" + 
+		"	return first(new String[0]);\n" + 
+		"	             ^^^^^^^^^^^^^\n" + 
+		"Null type safety (type annotations): The expression of type \'String[]\' needs unchecked conversion to conform to \'@NonNull String @NonNull[]\'\n" + 
+		"----------\n");
+}
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayAllocationExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayAllocationExpression.java
index 656c770..3061910 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayAllocationExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayAllocationExpression.java
@@ -39,6 +39,8 @@ public class ArrayAllocationExpression extends Expression {
 	public Annotation [][] annotationsOnDimensions; // jsr308 style annotations.
 	public ArrayInitializer initializer;
 
+	private TypeBinding expectedType;
+
 	public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo) {
 		for (int i = 0, max = this.dimensions.length; i < max; i++) {
 			Expression dim;
@@ -175,6 +177,21 @@ public class ArrayAllocationExpression extends Expression {
 			{
 				scope.problemReporter().contradictoryNullAnnotations(this.type.annotations[this.type.annotations.length-1]);
 			}
+			LookupEnvironment environment = scope.environment();
+			if (environment.usesNullTypeAnnotations() 
+					&& this.annotationsOnDimensions == null // don't annotate if explicit annotations are given on dimensions ...
+					&& ((referenceType.tagBits & TagBits.AnnotationNullMASK) == 0)  // ... or leaf type
+					&& this.expectedType != null) // need this to determine our action
+			{
+				Expression lastDim = this.dimensions[this.dimensions.length-1];
+				if (lastDim instanceof IntLiteral && ((IntLiteral) lastDim).value == 0) {
+					long tagBit = this.expectedType.leafComponentType().tagBits & TagBits.AnnotationNullMASK;
+					// let new X[0] be seen as "@NonNull X[]", or "@Nullable X[]" just as expected
+					AnnotationBinding[] nullAnnotations = environment.nullAnnotationsFromTagBits(tagBit);
+					if (nullAnnotations != null)
+						referenceType = environment.createAnnotatedType(referenceType, nullAnnotations);
+				}
+			}
 			this.resolvedType = scope.createArrayType(referenceType, this.dimensions.length);
 
 			if (this.annotationsOnDimensions != null) {
@@ -202,6 +219,10 @@ public class ArrayAllocationExpression extends Expression {
 		return this.resolvedType;
 	}
 
+	@Override
+	public void setExpectedType(TypeBinding expectedType) {
+		this.expectedType = expectedType;
+	}
 
 	public void traverse(ASTVisitor visitor, BlockScope scope) {
 		if (visitor.visit(this, scope)) {
commit a620430067d64a8c379ef9bfad63016ee0485c9e
Author: Stephan Herrmann <stephan.herrmann@berlin.de>
Date:   Thu Feb 25 16:21:36 2016 +0100

    Bug 482247 - [compiler][null] Empty arrays should satisfy @NonNull
    Type[]
    
    Change-Id: I67abf0bce60989be848f3fa596b8f2567af3b8a1

17	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
0	21	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayAllocationExpression.java
24	8	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeReference.java
3	3	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ImplicitNullAnnotationVerifier.java
2	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
index 812d1f3..e6883fe 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
@@ -8978,6 +8978,23 @@ public void testBug482247() {
 		"Null type safety (type annotations): The expression of type \'String[]\' needs unchecked conversion to conform to \'@NonNull String @NonNull[]\'\n" + 
 		"----------\n");
 }
+public void testBug482247_comment5() {
+	runConformTestWithLibs(
+		new String[] {
+			"Snippet.java",
+			"import org.eclipse.jdt.annotation.*;\n" +
+			"public class Snippet {\n" + 
+			"	@NonNull String[] s1 = new String[0]; // No warning\n" + 
+			"	public void handleIncidentBeforeCreate() {\n" + 
+			"		@NonNull String[] s = new String[0]; // Warning\n" +
+			"		String [] @NonNull[] s2 = new String[0][];\n" +
+			"		String [] @NonNull[] @Nullable[] s3 = new String[0][][];\n" +
+			"	}\n" + 
+			"}"
+		},
+		getCompilerOptions(),
+		"");
+}
 public void testBug483146() {
 	runConformTestWithLibs(
 		new String[] {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayAllocationExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayAllocationExpression.java
index 3061910..656c770 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayAllocationExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayAllocationExpression.java
@@ -39,8 +39,6 @@ public class ArrayAllocationExpression extends Expression {
 	public Annotation [][] annotationsOnDimensions; // jsr308 style annotations.
 	public ArrayInitializer initializer;
 
-	private TypeBinding expectedType;
-
 	public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo) {
 		for (int i = 0, max = this.dimensions.length; i < max; i++) {
 			Expression dim;
@@ -177,21 +175,6 @@ public class ArrayAllocationExpression extends Expression {
 			{
 				scope.problemReporter().contradictoryNullAnnotations(this.type.annotations[this.type.annotations.length-1]);
 			}
-			LookupEnvironment environment = scope.environment();
-			if (environment.usesNullTypeAnnotations() 
-					&& this.annotationsOnDimensions == null // don't annotate if explicit annotations are given on dimensions ...
-					&& ((referenceType.tagBits & TagBits.AnnotationNullMASK) == 0)  // ... or leaf type
-					&& this.expectedType != null) // need this to determine our action
-			{
-				Expression lastDim = this.dimensions[this.dimensions.length-1];
-				if (lastDim instanceof IntLiteral && ((IntLiteral) lastDim).value == 0) {
-					long tagBit = this.expectedType.leafComponentType().tagBits & TagBits.AnnotationNullMASK;
-					// let new X[0] be seen as "@NonNull X[]", or "@Nullable X[]" just as expected
-					AnnotationBinding[] nullAnnotations = environment.nullAnnotationsFromTagBits(tagBit);
-					if (nullAnnotations != null)
-						referenceType = environment.createAnnotatedType(referenceType, nullAnnotations);
-				}
-			}
 			this.resolvedType = scope.createArrayType(referenceType, this.dimensions.length);
 
 			if (this.annotationsOnDimensions != null) {
@@ -219,10 +202,6 @@ public class ArrayAllocationExpression extends Expression {
 		return this.resolvedType;
 	}
 
-	@Override
-	public void setExpectedType(TypeBinding expectedType) {
-		this.expectedType = expectedType;
-	}
 
 	public void traverse(ASTVisitor visitor, BlockScope scope) {
 		if (visitor.visit(this, scope)) {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java
index 8a791b7..588ac90 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java
@@ -133,7 +133,7 @@ public class NullAnnotationMatching {
 				return nullStatus; // if both branches disagree use the precomputed & merged nullStatus
 			}
 			lhsTagBits = var.type.tagBits & TagBits.AnnotationNullMASK;
-			NullAnnotationMatching annotationStatus = analyse(var.type, providedType, nullStatus);
+			NullAnnotationMatching annotationStatus = analyse(var.type, providedType, null, null, nullStatus, expression, CheckMode.COMPATIBLE);
 			if (annotationStatus.isAnyMismatch()) {
 				flowContext.recordNullityMismatch(currentScope, expression, providedType, var.type, flowInfo, nullStatus, annotationStatus);
 				hasReported = true;
@@ -161,7 +161,7 @@ public class NullAnnotationMatching {
 	 * @return a status object representing the severity of mismatching plus optionally a supertype hint
 	 */
 	public static NullAnnotationMatching analyse(TypeBinding requiredType, TypeBinding providedType, int nullStatus) {
-		return analyse(requiredType, providedType, null, null, nullStatus, CheckMode.COMPATIBLE);
+		return analyse(requiredType, providedType, null, null, nullStatus, null, CheckMode.COMPATIBLE);
 	}
 	/**
 	 * Find any mismatches between the two given types, which are caused by null type annotations.
@@ -171,10 +171,13 @@ public class NullAnnotationMatching {
 	 * 		Pass null if not interested in these added checks.
 	 * @param substitution TODO
 	 * @param nullStatus we are only interested in NULL or NON_NULL, -1 indicates that we are in a recursion, where flow info is ignored
+	 * @param providedExpression optionally holds the provided expression of type 'providedType'
 	 * @param mode controls the kind of check performed (see {@link CheckMode}).
 	 * @return a status object representing the severity of mismatching plus optionally a supertype hint
 	 */
-	public static NullAnnotationMatching analyse(TypeBinding requiredType, TypeBinding providedType, TypeBinding providedSubstitute, Substitution substitution, int nullStatus, CheckMode mode) {
+	public static NullAnnotationMatching analyse(TypeBinding requiredType, TypeBinding providedType, TypeBinding providedSubstitute, Substitution substitution,
+			int nullStatus, Expression providedExpression, CheckMode mode)
+	{
 		if (!requiredType.enterRecursiveFunction())
 			return NullAnnotationMatching.NULL_ANNOTATIONS_OK;
 		try {
@@ -203,7 +206,7 @@ public class NullAnnotationMatching {
 					// during bound check against a type variable check the provided type against all upper bounds:
 					TypeBinding superClass = requiredType.superclass();
 					if (superClass != null && (superClass.hasNullTypeAnnotations() || substitution != null)) { // annotations may enter when substituting a nested type variable
-						NullAnnotationMatching status = analyse(superClass, providedType, null, substitution, nullStatus, CheckMode.BOUND_SUPER_CHECK);
+						NullAnnotationMatching status = analyse(superClass, providedType, null, substitution, nullStatus, providedExpression, CheckMode.BOUND_SUPER_CHECK);
 						severity = Math.max(severity, status.severity);
 						if (severity == 2)
 							return new NullAnnotationMatching(severity, nullStatus, superTypeHint);
@@ -212,7 +215,7 @@ public class NullAnnotationMatching {
 					if (superInterfaces != null) {
 						for (int i = 0; i < superInterfaces.length; i++) {
 							if (superInterfaces[i].hasNullTypeAnnotations() || substitution != null) { // annotations may enter when substituting a nested type variable
-								NullAnnotationMatching status = analyse(superInterfaces[i], providedType, null, substitution, nullStatus, CheckMode.BOUND_SUPER_CHECK);
+								NullAnnotationMatching status = analyse(superInterfaces[i], providedType, null, substitution, nullStatus, providedExpression, CheckMode.BOUND_SUPER_CHECK);
 								severity = Math.max(severity, status.severity);
 								if (severity == 2)
 									return new NullAnnotationMatching(severity, nullStatus, superTypeHint);
@@ -240,7 +243,20 @@ public class NullAnnotationMatching {
 							} else {
 								if (i > 0)
 									currentNullStatus = -1; // don't use beyond the outermost dimension
-								severity = Math.max(severity, computeNullProblemSeverity(requiredBits, providedBits, currentNullStatus, i == 0 ? mode : mode.toDetail(), false));
+								int dimSeverity = computeNullProblemSeverity(requiredBits, providedBits, currentNullStatus, i == 0 ? mode : mode.toDetail(), false);
+								if (i > 0 && dimSeverity == 1
+										&& providedExpression instanceof ArrayAllocationExpression
+										&& providedBits == 0 && requiredBits != 0)
+								{
+									Expression[] dimensions = ((ArrayAllocationExpression) providedExpression).dimensions;
+									Expression previousDim = dimensions[i-1];
+									if (previousDim instanceof IntLiteral && previousDim.constant.intValue() == 0) {
+										dimSeverity = 0; // element of empty dimension matches anything
+										nullStatus = -1;
+										break;
+									}
+								}
+								severity = Math.max(severity, dimSeverity);
 								if (severity == 2)
 									return NullAnnotationMatching.NULL_ANNOTATIONS_MISMATCH;
 							}
@@ -278,7 +294,7 @@ public class NullAnnotationMatching {
 						if (requiredArguments != null && providedArguments != null && requiredArguments.length == providedArguments.length) {
 							for (int i = 0; i < requiredArguments.length; i++) {
 								TypeBinding providedArgSubstitute = providedSubstitutes != null ? providedSubstitutes[i] : null;
-								NullAnnotationMatching status = analyse(requiredArguments[i], providedArguments[i], providedArgSubstitute, substitution, -1, mode.toDetail());
+								NullAnnotationMatching status = analyse(requiredArguments[i], providedArguments[i], providedArgSubstitute, substitution, -1, providedExpression, mode.toDetail());
 								severity = Math.max(severity, status.severity);
 								if (severity == 2)
 									return new NullAnnotationMatching(severity, nullStatus, superTypeHint);
@@ -289,7 +305,7 @@ public class NullAnnotationMatching {
 					TypeBinding providedEnclosing = providedType.enclosingType();
 					if (requiredEnclosing != null && providedEnclosing != null) {
 						TypeBinding providedEnclSubstitute = providedSubstitute != null ? providedSubstitute.enclosingType() : null;
-						NullAnnotationMatching status = analyse(requiredEnclosing, providedEnclosing, providedEnclSubstitute, substitution, -1, mode);
+						NullAnnotationMatching status = analyse(requiredEnclosing, providedEnclosing, providedEnclSubstitute, substitution, -1, providedExpression, mode);
 						severity = Math.max(severity, status.severity);
 					}
 				}
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeReference.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeReference.java
index fad1c0a..b2561d8 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeReference.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeReference.java
@@ -684,7 +684,7 @@ protected void checkNullConstraints(Scope scope, Substitution substitution, Type
 	if (variables != null && variables.length > rank) {
 		TypeBinding variable = variables[rank];
 		if (variable.hasNullTypeAnnotations()) {
-			if (NullAnnotationMatching.analyse(variable, this.resolvedType, null, substitution, -1, CheckMode.BOUND_CHECK).isAnyMismatch())
+			if (NullAnnotationMatching.analyse(variable, this.resolvedType, null, substitution, -1, null, CheckMode.BOUND_CHECK).isAnyMismatch())
 				scope.problemReporter().nullityMismatchTypeArgument(variable, this.resolvedType, this);
     	}
 	}
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ImplicitNullAnnotationVerifier.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ImplicitNullAnnotationVerifier.java
index 90c63f6..afbdf7c 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ImplicitNullAnnotationVerifier.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ImplicitNullAnnotationVerifier.java
@@ -294,7 +294,7 @@ public class ImplicitNullAnnotationVerifier {
 						ParameterizedGenericMethodBinding substitute = this.environment.createParameterizedGenericMethod(currentMethod, typeVariables);
 						substituteReturnType = substitute.returnType;
 					}
-					if (NullAnnotationMatching.analyse(inheritedMethod.returnType, currentMethod.returnType, substituteReturnType, null, 0, CheckMode.OVERRIDE_RETURN).isAnyMismatch()) {
+					if (NullAnnotationMatching.analyse(inheritedMethod.returnType, currentMethod.returnType, substituteReturnType, null, 0, null, CheckMode.OVERRIDE_RETURN).isAnyMismatch()) {
 						if (srcMethod != null)
 							scope.problemReporter().illegalReturnRedefinition(srcMethod, inheritedMethod,
 																	this.environment.getNonNullAnnotationName());
@@ -425,7 +425,7 @@ public class ImplicitNullAnnotationVerifier {
 				if (useTypeAnnotations) {
 					TypeBinding inheritedParameter = inheritedMethod.parameters[i];
 					TypeBinding substituteParameter = substituteParameters != null ? substituteParameters[i] : null;
-					if (NullAnnotationMatching.analyse(currentMethod.parameters[i], inheritedParameter, substituteParameter, null, 0, CheckMode.OVERRIDE).isAnyMismatch()) {
+					if (NullAnnotationMatching.analyse(currentMethod.parameters[i], inheritedParameter, substituteParameter, null, 0, null, CheckMode.OVERRIDE).isAnyMismatch()) {
 						if (currentArgument != null)
 							scope.problemReporter().illegalParameterRedefinition(currentArgument, inheritedMethod.declaringClass, inheritedParameter);
 						else
@@ -441,7 +441,7 @@ public class ImplicitNullAnnotationVerifier {
 			if (currentTypeVariables != Binding.NO_TYPE_VARIABLES && currentTypeVariables.length == inheritedTypeVariables.length) {
 				for (int i = 0; i < currentTypeVariables.length; i++) {
 					TypeVariableBinding inheritedVariable = inheritedTypeVariables[i];
-					if (NullAnnotationMatching.analyse(inheritedVariable, currentTypeVariables[i], null, null, -1, CheckMode.BOUND_CHECK).isAnyMismatch())
+					if (NullAnnotationMatching.analyse(inheritedVariable, currentTypeVariables[i], null, null, -1, null, CheckMode.BOUND_CHECK).isAnyMismatch())
 						scope.problemReporter().cannotRedefineTypeArgumentNullity(inheritedVariable, inheritedMethod, srcMethod.typeParameters()[i]);
 				}
 			}
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java
index b1b5b80..6f77adb 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java
@@ -224,7 +224,7 @@ public class TypeVariableBinding extends ReferenceBinding {
 				}
 	    	}
 			if (location != null && checkNullAnnotations) {
-				if (NullAnnotationMatching.analyse(this, argumentType, substitutedSuperType, substitution, -1, CheckMode.BOUND_CHECK).isAnyMismatch()) {
+				if (NullAnnotationMatching.analyse(this, argumentType, substitutedSuperType, substitution, -1, null, CheckMode.BOUND_CHECK).isAnyMismatch()) {
 					scope.problemReporter().nullityMismatchTypeArgument(this, argumentType, location);
 					haveReportedNullProblem = true;
 				}
@@ -244,7 +244,7 @@ public class TypeVariableBinding extends ReferenceBinding {
 				}
 	    	}
 			if (location != null && checkNullAnnotations) {
-				if (NullAnnotationMatching.analyse(this, argumentType, substitutedSuperType, substitution, -1, CheckMode.BOUND_CHECK).isAnyMismatch()) {
+				if (NullAnnotationMatching.analyse(this, argumentType, substitutedSuperType, substitution, -1, null, CheckMode.BOUND_CHECK).isAnyMismatch()) {
 					scope.problemReporter().nullityMismatchTypeArgument(this, argumentType, location);
 					haveReportedNullProblem = true;
 				}

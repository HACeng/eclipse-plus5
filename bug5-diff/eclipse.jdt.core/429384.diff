commit 29bba5ec8d05a9cd1832ad934d2530b41087b676
Author: Stephan Herrmann <stephan.herrmann@berlin.de>
Date:   Sat Mar 1 22:15:49 2014 +0100

    Bug 429384 - [1.8][null] implement conformance rules for null-annotated
    lower / upper type bounds

220	24	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
108	9	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java
14	17	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java
28	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding.java
2	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceSubstitution.java
11	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceVariable.java
29	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java
10	6	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
index e5adb2e..c12f7d1 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
@@ -1356,8 +1356,8 @@ public class NullTypeAnnotationTest extends AbstractNullAnnotationTest {
 					"		x.arrays(a)[0] = null; // illegal\n" +
 					"		x.nesting(null, null); // 1st null is illegal\n" +
 					"		x.wildcard2(new ArrayList<@NonNull Object>());\n" +
-					"		x.wildcard2(new ArrayList<@Nullable Object>()); // incompatible(1)\n" +
-					"		x.wildcard1(new ArrayList<@NonNull X1>()); // incompatible(2)\n" +
+					"		x.wildcard2(new ArrayList<@Nullable Object>()); // OK\n" +
+					"		x.wildcard1(new ArrayList<@NonNull X1>()); // incompatible\n" +
 					"	}\n" +
 					"}\n"
 				}, 
@@ -1378,13 +1378,8 @@ public class NullTypeAnnotationTest extends AbstractNullAnnotationTest {
 				"	          ^^^^\n" + 
 				"Null type mismatch: required \'X1.@NonNull Inner\' but the provided value is null\n" + 
 				"----------\n" + 
-				"4. ERROR in Y1.java (at line 10)\n" + 
-				"	x.wildcard2(new ArrayList<@Nullable Object>()); // incompatible(1)\n" + 
-				"	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
-				"Null type mismatch (type annotations): required \'List<? super @NonNull X1>\' but this expression has type \'ArrayList<@Nullable Object>\', corresponding supertype is \'List<@Nullable Object>\'\n" + 
-				"----------\n" + 
-				"5. ERROR in Y1.java (at line 11)\n" + 
-				"	x.wildcard1(new ArrayList<@NonNull X1>()); // incompatible(2)\n" + 
+				"4. ERROR in Y1.java (at line 11)\n" + 
+				"	x.wildcard1(new ArrayList<@NonNull X1>()); // incompatible\n" + 
 				"	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
 				"Null type mismatch (type annotations): required \'List<@Nullable ? extends X1>\' but this expression has type \'ArrayList<@NonNull X1>\', corresponding supertype is \'List<@NonNull X1>\'\n" + 
 				"----------\n");
@@ -1446,8 +1441,8 @@ public class NullTypeAnnotationTest extends AbstractNullAnnotationTest {
 					"		x.arrays(a)[0] = null; // illegal\n" +
 					"		x.nesting(null, null); // 1st null is illegal\n" +
 					"		x.wildcard2(new ArrayList<java.lang.@NonNull Object>());\n" +
-					"		x.wildcard2(new ArrayList<java.lang.@Nullable Object>()); // incompatible(1)\n" +
-					"		x.wildcard1(new ArrayList<p.@NonNull X1>()); // incompatible(2)\n" +
+					"		x.wildcard2(new ArrayList<java.lang.@Nullable Object>());\n" +
+					"		x.wildcard1(new ArrayList<p.@NonNull X1>()); // incompatible\n" +
 					"	}\n" +
 					"}\n"
 				}, 
@@ -1468,13 +1463,8 @@ public class NullTypeAnnotationTest extends AbstractNullAnnotationTest {
 				"	          ^^^^\n" + 
 				"Null type mismatch: required \'X1.@NonNull Inner\' but the provided value is null\n" + 
 				"----------\n" + 
-				"4. ERROR in Y1.java (at line 10)\n" + 
-				"	x.wildcard2(new ArrayList<java.lang.@Nullable Object>()); // incompatible(1)\n" + 
-				"	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
-				"Null type mismatch (type annotations): required \'List<? super @NonNull X1>\' but this expression has type \'ArrayList<@Nullable Object>\', corresponding supertype is \'List<@Nullable Object>\'\n" + 
-				"----------\n" + 
-				"5. ERROR in Y1.java (at line 11)\n" + 
-				"	x.wildcard1(new ArrayList<p.@NonNull X1>()); // incompatible(2)\n" + 
+				"4. ERROR in Y1.java (at line 11)\n" + 
+				"	x.wildcard1(new ArrayList<p.@NonNull X1>()); // incompatible\n" + 
 				"	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
 				"Null type mismatch (type annotations): required \'List<@Nullable ? extends X1>\' but this expression has type \'ArrayList<@NonNull X1>\', corresponding supertype is \'List<@NonNull X1>\'\n" + 
 				"----------\n");
@@ -2705,8 +2695,8 @@ public class NullTypeAnnotationTest extends AbstractNullAnnotationTest {
 			"----------\n" + 
 			"1. ERROR in Generics.java (at line 14)\n" + 
 			"	map2(inList, f);\n" + 
-			"	^^^^^^^^^^^^^^^\n" + 
-			"Contradictory null annotations: method was inferred as \'Collection<@NonNull @Nullable String> map2(Collection<@NonNull @Nullable Object>, Function<@NonNull @Nullable Object,@NonNull @Nullable String>)\', but only one of \'@NonNull\' and \'@Nullable\' can be effective at any location\n" + 
+			"	     ^^^^^^\n" + 
+			"Contradictory null annotations: method was inferred as \'Collection<@NonNull String> map2(Collection<@NonNull @Nullable Object>, Function<@NonNull @Nullable Object,@NonNull String>)\', but only one of \'@NonNull\' and \'@Nullable\' can be effective at any location\n" + 
 			"----------\n");
 	}
 
@@ -3010,12 +3000,12 @@ public class NullTypeAnnotationTest extends AbstractNullAnnotationTest {
 			"1. WARNING in X.java (at line 8)\n" + 
 			"	List<@NonNull ? extends @NonNull String> ls = new ArrayList<String>();\n" + 
 			"	                                              ^^^^^^^^^^^^^^^^^^^^^^^\n" + 
-			"Null type safety (type annotations): The expression of type \'ArrayList<String>\' needs unchecked conversion to conform to \'List<@NonNull ? extends String>\'\n" + 
+			"Null type safety (type annotations): The expression of type \'ArrayList<String>\' needs unchecked conversion to conform to \'List<@NonNull ? extends @NonNull String>\'\n" + 
 			"----------\n" + 
 			"2. ERROR in X.java (at line 9)\n" + 
 			"	ls.add(null);\n" + 
 			"	       ^^^^\n" + 
-			"Null type mismatch: required \'@NonNull ? extends String\' but the provided value is null\n" + 
+			"Null type mismatch: required \'@NonNull ? extends @NonNull String\' but the provided value is null\n" + 
 			"----------\n");
 	}
 
@@ -3628,7 +3618,7 @@ public class NullTypeAnnotationTest extends AbstractNullAnnotationTest {
 			"1. WARNING in X.java (at line 16)\n" + 
 			"	getAdd(lx);\n" + 
 			"	       ^^\n" + 
-			"Null type safety (type annotations): The expression of type \'List<capture#>\' needs unchecked conversion to conform to \'List<@NonNull capture#>\'\n" + 
+			"Null type safety (type annotations): The expression of type \'List<capture#of ? extends X>\' needs unchecked conversion to conform to \'List<@NonNull capture#of ? extends X>\'\n" + 
 			"----------\n");		
 	}
 	public void testWildcardCapture2() {
@@ -3692,7 +3682,7 @@ public class NullTypeAnnotationTest extends AbstractNullAnnotationTest {
 			"1. ERROR in X.java (at line 17)\n" + 
 			"	getAdd(lx);\n" + 
 			"	       ^^\n" + 
-			"Contradictory null annotations: method was inferred as \'void getAdd(List<@NonNull @Nullable capture#>)\', but only one of \'@NonNull\' and \'@Nullable\' can be effective at any location\n" + 
+			"Contradictory null annotations: method was inferred as \'void getAdd(List<@NonNull @Nullable capture#of @Nullable ? extends X>)\', but only one of \'@NonNull\' and \'@Nullable\' can be effective at any location\n" + 
 			"----------\n");		
 	}
 	public void testLocalArrays() {
@@ -4059,4 +4049,210 @@ public void testBug427163c() {
 		"----------\n"
 	);
 }
+// assorted tests with upper-bounded wildcards with null annotations
+public void testTypeBounds1() {
+	runNegativeTestWithLibs(
+		new String[] {
+			"C.java",
+			"import java.util.List;\n" + 
+			"\n" + 
+			"import org.eclipse.jdt.annotation.NonNull;\n" + 
+			"import org.eclipse.jdt.annotation.Nullable;\n" + 
+			"\n" + 
+			"class A { }\n" + 
+			"class B extends A {}\n" + 
+			"public class C {\n" + 
+			"	\n" + 
+			"	@NonNull A testExtends(List<@NonNull B> lb1, List<@Nullable B> lb2, boolean f) {\n" + 
+			"		List<? extends @NonNull A> la1 = lb1;\n" + 
+			"		la1.add(null); // ERR1\n" + 
+			"		if (la1.size() > 0)\n" + 
+			"			return la1.get(0); // OK\n" +
+			"		la1 = lb2; // ERR2\n" + 
+			"		List<? extends @Nullable A> la2 = lb1; // OK\n" + 
+			"		la2.add(null); // ERR3\n" + 
+			"		if (la2.size() > 0)\n" + 
+			"			return la2.get(0); // ERR4\n" +
+			"		la2 = lb2; // OK\n" + 
+			"		if (f)\n" + 
+			"			return mExtends1(lb1); // OK, since we infer T to @NonNull B\n" + 
+			"		return mExtends2(lb1);\n" + 
+			"	}\n" + 
+			"	<T extends @Nullable A> T mExtends1(List<T> t) { return null; /*ERR5*/ }\n" + 
+			"	<T extends @NonNull A> T mExtends2(List<T> t) { return null; /*ERR6*/ }\n" + 
+			"}\n"
+		},
+		getCompilerOptions(),
+		"----------\n" + 
+		"1. ERROR in C.java (at line 12)\n" + 
+		"	la1.add(null); // ERR1\n" + 
+		"	        ^^^^\n" + 
+		"Null type mismatch: required \'? extends @NonNull A\' but the provided value is null\n" + 
+		"----------\n" + 
+		"2. ERROR in C.java (at line 15)\n" + 
+		"	la1 = lb2; // ERR2\n" + 
+		"	      ^^^\n" + 
+		"Null type mismatch (type annotations): required \'List<? extends @NonNull A>\' but this expression has type \'List<@Nullable B>\'\n" + 
+		"----------\n" + 
+		"3. ERROR in C.java (at line 17)\n" + 
+		"	la2.add(null); // ERR3\n" + 
+		"	        ^^^^\n" + 
+		"Null type mismatch: required \'? extends @Nullable A\' but the provided value is null\n" + 
+		"----------\n" + 
+		"4. ERROR in C.java (at line 19)\n" + 
+		"	return la2.get(0); // ERR4\n" + 
+		"	       ^^^^^^^^^^\n" + 
+		"Null type mismatch (type annotations): required \'@NonNull A\' but this expression has type \'capture#of ? extends @Nullable A\'\n" + 
+		"----------\n" + 
+		"5. ERROR in C.java (at line 25)\n" + 
+		"	<T extends @Nullable A> T mExtends1(List<T> t) { return null; /*ERR5*/ }\n" + 
+		"	                                                        ^^^^\n" + 
+		"Null type mismatch: required \'T extends @Nullable A\' but the provided value is null\n" + 
+		"----------\n" + 
+		"6. ERROR in C.java (at line 26)\n" + 
+		"	<T extends @NonNull A> T mExtends2(List<T> t) { return null; /*ERR6*/ }\n" + 
+		"	                                                       ^^^^\n" + 
+		"Null type mismatch: required \'T extends @NonNull A\' but the provided value is null\n" + 
+		"----------\n"
+	);
+}
+// assorted tests with lower-bounded wildcards with null annotations
+public void testTypeBounds2() {
+	runNegativeTestWithLibs(
+		new String[] {
+			"C.java",
+			"import java.util.List;\n" + 
+			"\n" + 
+			"import org.eclipse.jdt.annotation.NonNull;\n" + 
+			"import org.eclipse.jdt.annotation.Nullable;\n" + 
+			"\n" + 
+			"class A { }\n" + 
+			"class B extends A {}\n" + 
+			"public class C {\n" + 
+			"	\n" + 
+			"	@NonNull Object testSuper(List<@Nullable A> la1, List<@NonNull A> la2, boolean f) {\n" + 
+			"		List<? super @NonNull B> lb1 = la1; // OK\n" + 
+			"		lb1.add(null); // ERR1\n" + 
+			"		if (lb1.size() > 0)\n" + 
+			"			return lb1.get(0); // ERR2\n" +
+			"		lb1 = la2; // OK\n" + 
+			"		List<? super @Nullable B> lb2 = la1;\n" + 
+			"		lb2.add(null);\n" + 
+			"		if (lb2.size() > 0)\n" + 
+			"			return lb2.get(0); // ERR3\n" +
+			"		lb2 = la2; // ERR4\n" + 
+			"		if (f)\n" + 
+			"			return mSuper1(la1); // ERR5\n" + 
+			"		return mSuper2(la1); // ERR6 on arg\n" + 
+			"	}\n" + 
+			"	<T extends @Nullable A> T mSuper1(List<T> t) { return null; /*ERR7*/ }\n" + 
+			"	<T extends @NonNull A> T mSuper2(List<T> t) { return null; /*ERR8*/ }\n" + 
+			"}\n"
+		},
+		getCompilerOptions(),
+		"----------\n" + 
+		"1. ERROR in C.java (at line 12)\n" + 
+		"	lb1.add(null); // ERR1\n" + 
+		"	        ^^^^\n" + 
+		"Null type mismatch: required \'? super @NonNull B\' but the provided value is null\n" + 
+		"----------\n" + 
+		"2. ERROR in C.java (at line 14)\n" + 
+		"	return lb1.get(0); // ERR2\n" + 
+		"	       ^^^^^^^^^^\n" + 
+		"Null type mismatch (type annotations): required \'@NonNull Object\' but this expression has type \'capture#of ? super @NonNull B\'\n" + 
+		"----------\n" + 
+		"3. ERROR in C.java (at line 19)\n" + 
+		"	return lb2.get(0); // ERR3\n" + 
+		"	       ^^^^^^^^^^\n" + 
+		"Null type mismatch (type annotations): required \'@NonNull Object\' but this expression has type \'capture#of ? super @Nullable B\'\n" + 
+		"----------\n" + 
+		"4. ERROR in C.java (at line 20)\n" + 
+		"	lb2 = la2; // ERR4\n" + 
+		"	      ^^^\n" + 
+		"Null type mismatch (type annotations): required \'List<? super @Nullable B>\' but this expression has type \'List<@NonNull A>\'\n" + 
+		"----------\n" + 
+		"5. ERROR in C.java (at line 22)\n" + 
+		"	return mSuper1(la1); // ERR5\n" + 
+		"	       ^^^^^^^^^^^^\n" + 
+		"Null type mismatch (type annotations): required \'@NonNull Object\' but this expression has type \'@Nullable A\'\n" + 
+		"----------\n" + 
+		"6. ERROR in C.java (at line 23)\n" + 
+		"	return mSuper2(la1); // ERR6 on arg\n" + 
+		"	               ^^^\n" + 
+		"Null type mismatch (type annotations): required \'List<@NonNull A>\' but this expression has type \'List<@Nullable A>\'\n" + 
+		"----------\n" + 
+		"7. ERROR in C.java (at line 25)\n" + 
+		"	<T extends @Nullable A> T mSuper1(List<T> t) { return null; /*ERR7*/ }\n" + 
+		"	                                                      ^^^^\n" + 
+		"Null type mismatch: required \'T extends @Nullable A\' but the provided value is null\n" + 
+		"----------\n" + 
+		"8. ERROR in C.java (at line 26)\n" + 
+		"	<T extends @NonNull A> T mSuper2(List<T> t) { return null; /*ERR8*/ }\n" + 
+		"	                                                     ^^^^\n" + 
+		"Null type mismatch: required \'T extends @NonNull A\' but the provided value is null\n" + 
+		"----------\n"
+	);
+}
+// assigning values upper bounded wildcard types carrying null annotations
+public void testTypeBounds3() {
+	runNegativeTestWithLibs(
+		new String[] {
+			"C.java",
+			"import java.util.List;\n" + 
+			"\n" + 
+			"import org.eclipse.jdt.annotation.NonNull;\n" + 
+			"import org.eclipse.jdt.annotation.Nullable;\n" + 
+			"\n" + 
+			"class A { }\n" + 
+			"class B extends A {}\n" + 
+			"public class C {\n" + 
+			"	\n" + 
+			"	void testExtends(List<? extends @NonNull B> lb1, List<? extends @Nullable B> lb2) {\n" + 
+			"		List<? extends @NonNull A> la1 = lb1;\n" + 
+			"		la1 = lb2; // ERR\n" + 
+			"		List<? extends @Nullable A> la2 = lb1;\n" + 
+			"		la2 = lb2;\n" + 
+			"	}\n" + 
+			"}\n"
+		},
+		getCompilerOptions(),
+		"----------\n" + 
+		"1. ERROR in C.java (at line 12)\n" + 
+		"	la1 = lb2; // ERR\n" + 
+		"	      ^^^\n" + 
+		"Null type mismatch (type annotations): required \'List<? extends @NonNull A>\' but this expression has type \'List<capture#of ? extends @Nullable B>\'\n" + 
+		"----------\n"
+	);
+}
+// assigning values lower bounded wildcard types carrying null annotations
+public void testTypeBounds4() {
+	runNegativeTestWithLibs(
+		new String[] {
+			"C.java",
+			"import java.util.List;\n" + 
+			"\n" + 
+			"import org.eclipse.jdt.annotation.NonNull;\n" + 
+			"import org.eclipse.jdt.annotation.Nullable;\n" + 
+			"\n" + 
+			"class A { }\n" + 
+			"class B extends A {}\n" + 
+			"public class C {\n" + 
+			"	\n" + 
+			"	void testSuper(List<? super @Nullable A> la1, List<? super @NonNull A> la2) {\n" + 
+			"		List<? super @NonNull B> lb1 = la1; // OK\n" + 
+			"		lb1 = la2; // OK\n" + 
+			"		List<? super @Nullable B> lb2 = la1;\n" + 
+			"		lb2 = la2; // ERR4\n" + 
+			"	}\n" + 
+			"}\n"
+		},
+		getCompilerOptions(),
+		"----------\n" + 
+		"1. ERROR in C.java (at line 14)\n" + 
+		"	lb2 = la2; // ERR4\n" + 
+		"	      ^^^\n" + 
+		"Null type mismatch (type annotations): required \'List<? super @Nullable B>\' but this expression has type \'List<capture#of ? super @NonNull A>\'\n" + 
+		"----------\n"
+	);
+}
 }
\ No newline at end of file
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java
index 3d884b2..214bc5b 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java
@@ -20,6 +20,7 @@ import org.eclipse.jdt.internal.compiler.flow.FlowInfo;
 import org.eclipse.jdt.internal.compiler.impl.CompilerOptions;
 import org.eclipse.jdt.internal.compiler.lookup.ArrayBinding;
 import org.eclipse.jdt.internal.compiler.lookup.BlockScope;
+import org.eclipse.jdt.internal.compiler.lookup.CaptureBinding;
 import org.eclipse.jdt.internal.compiler.lookup.InvocationSite;
 import org.eclipse.jdt.internal.compiler.lookup.ParameterizedGenericMethodBinding;
 import org.eclipse.jdt.internal.compiler.lookup.ParameterizedTypeBinding;
@@ -141,11 +142,11 @@ public class NullAnnotationMatching {
 				}
 			}
 		} else if (requiredType.hasNullTypeAnnotations() || providedType.hasNullTypeAnnotations()) {
-			long requiredBits = validNullTagBits(requiredType.tagBits);
+			long requiredBits = requiredNullTagBits(requiredType);
 			if (requiredBits != TagBits.AnnotationNullable // nullable lhs accepts everything, ...
 					|| nullStatus == -1) // only at detail/recursion even nullable must be matched exactly
 			{
-				long providedBits = validNullTagBits(providedType.tagBits);
+				long providedBits = providedNullTagBits(providedType);
 				severity = computeNullProblemSeverity(requiredBits, providedBits, nullStatus, strict && nullStatus == -1);
 			}
 			if (severity < 2) {
@@ -163,13 +164,6 @@ public class NullAnnotationMatching {
 								return new NullAnnotationMatching(severity, superTypeHint);
 						}
 					}
-				} else 	if (requiredType instanceof WildcardBinding) {
-					WildcardBinding wildcardBinding = (WildcardBinding) requiredType;
-					if (wildcardBinding.bound != null) {
-						NullAnnotationMatching status = analyse(wildcardBinding.bound, providedType, nullStatus, strict);
-						severity = Math.max(severity, status.severity);
-					}
-					// TODO(stephan): what about otherBounds? Do we accept "? extends @NonNull I1 & @Nullable I2" in the first place??
 				}
 				TypeBinding requiredEnclosing = requiredType.enclosingType();
 				TypeBinding providedEnclosing = providedType.enclosingType();
@@ -184,6 +178,109 @@ public class NullAnnotationMatching {
 		return new NullAnnotationMatching(severity, superTypeHint);
 	}
 
+	// interpreting 'type' as a required type, compute the required null bits
+	// we inspect the main type plus bounds of type variables and wildcards
+	static long requiredNullTagBits(TypeBinding type) {
+
+		long tagBits = type.tagBits & TagBits.AnnotationNullMASK;
+		if (tagBits != 0)
+			return validNullTagBits(tagBits);
+
+		if (type.isWildcard()) {
+			WildcardBinding wildcard = (WildcardBinding)type;
+			if (wildcard.boundKind == Wildcard.UNBOUND)
+				return 0;
+			tagBits = wildcard.bound.tagBits & TagBits.AnnotationNullMASK;
+			if (tagBits == 0)
+				return 0;
+			switch (wildcard.boundKind) {
+				case Wildcard.EXTENDS :
+					if (tagBits == TagBits.AnnotationNonNull)
+						return TagBits.AnnotationNonNull;
+					return TagBits.AnnotationNullMASK; // wildcard accepts @Nullable or better
+				case Wildcard.SUPER :
+					if (tagBits == TagBits.AnnotationNullable)
+						return TagBits.AnnotationNullable;
+					return TagBits.AnnotationNullMASK; // wildcard accepts @NonNull or worse
+			}
+			return 0;
+		} 
+		
+		if (type.isTypeVariable()) {
+			// assume we must require @NonNull, unless: (1) lower @Nullable bound, or (2) no nullness specified
+			TypeVariableBinding typeVariable = (TypeVariableBinding)type;
+			boolean haveNullBits = false;
+			if (type.isCapture()) {
+				TypeBinding lowerBound = ((CaptureBinding) type).lowerBound;
+				if (lowerBound != null) {
+					tagBits = lowerBound.tagBits & TagBits.AnnotationNullMASK;
+					if (tagBits == TagBits.AnnotationNullable)
+						return TagBits.AnnotationNullable; // (1) type cannot require @NonNull
+					haveNullBits = tagBits != 0;
+				}
+			}
+			if (typeVariable.firstBound != null)
+				haveNullBits |= (typeVariable.firstBound.tagBits & TagBits.AnnotationNullMASK) != 0;
+			if (haveNullBits)
+				return TagBits.AnnotationNonNull; // could require @NonNull (unless (2) unspecified nullness)
+		}
+
+		return 0;
+	}
+
+	// interpreting 'type' as a provided type, compute the provide null bits
+	// we inspect the main type plus bounds of type variables and wildcards
+	static long providedNullTagBits(TypeBinding type) {
+
+		long tagBits = type.tagBits & TagBits.AnnotationNullMASK;
+		if (tagBits != 0)
+			return validNullTagBits(tagBits);
+		
+		if (type.isWildcard()) { // wildcard can be 'provided' during inheritance checks
+			WildcardBinding wildcard = (WildcardBinding)type;
+			if (wildcard.boundKind == Wildcard.UNBOUND)
+				return 0;
+			tagBits = wildcard.bound.tagBits & TagBits.AnnotationNullMASK;
+			if (tagBits == 0)
+				return 0;
+			switch (wildcard.boundKind) {
+				case Wildcard.EXTENDS :
+					if (tagBits == TagBits.AnnotationNonNull)
+						return TagBits.AnnotationNonNull;
+					return TagBits.AnnotationNullMASK; // @Nullable or better
+				case Wildcard.SUPER :
+					if (tagBits == TagBits.AnnotationNullable)
+						return TagBits.AnnotationNullable;
+					return TagBits.AnnotationNullMASK; // @NonNull or worse
+			}
+			return 0;
+		}
+	
+		if (type.isTypeVariable()) { // incl. captures
+			TypeVariableBinding typeVariable = (TypeVariableBinding)type;
+			boolean haveNullBits = false;
+			if (typeVariable.isCapture()) {
+				TypeBinding lowerBound = ((CaptureBinding) typeVariable).lowerBound;
+				if (lowerBound != null) {
+					tagBits = lowerBound.tagBits & TagBits.AnnotationNullMASK;
+					if (tagBits == TagBits.AnnotationNullable)
+						return TagBits.AnnotationNullable; // cannot be @NonNull
+					haveNullBits |= (tagBits != 0);
+				}
+			}
+			if (typeVariable.firstBound != null) {
+				long boundBits = typeVariable.firstBound.tagBits & TagBits.AnnotationNullMASK;
+				if (boundBits == TagBits.AnnotationNonNull)
+					return TagBits.AnnotationNonNull; // cannot be @Nullable
+				haveNullBits |= (boundBits != 0);
+			}
+			if (haveNullBits)
+				return TagBits.AnnotationNullMASK; // could be either, can only match to a wildcard accepting both
+		}
+
+		return 0;
+	}
+
 	public static long validNullTagBits(long bits) {
 		bits &= TagBits.AnnotationNullMASK;
 		return bits == TagBits.AnnotationNullMASK ? 0 : bits;
@@ -215,6 +312,8 @@ public class NullAnnotationMatching {
 			if (requiredBits == TagBits.AnnotationNonNull && nullStatus == FlowInfo.NON_NULL) {
 				return 0; // OK by flow analysis
 			}
+			if (requiredBits == TagBits.AnnotationNullMASK)
+				return 0; // OK since LHS accepts either
 			if (providedBits != 0) {
 				return 2; // mismatching annotations
 			} else {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java
index e6addef..69bd314 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java
@@ -269,23 +269,20 @@ class BoundSet {
 				return environment.createAnnotatedType(type, annot);
 			return type;
 		}
-		public void setInstantiation(TypeBinding type, LookupEnvironment environment) {
+		public void setInstantiation(TypeBinding type, InferenceVariable variable, LookupEnvironment environment) {
 			if (environment.globalOptions.isAnnotationBasedNullAnalysisEnabled) {
-				if (this.instantiation != null) {
-					// sanity check:
-					if (!TypeBinding.equalsEquals(this.instantiation, type)) {
-						this.instantiation = null;
-						return; // incorporation should find the conflict and fail the inference
-					}
-					long oldBits = this.instantiation.tagBits & TagBits.AnnotationNullMASK;
-					if (oldBits != 0) {
-						long newBits = type.tagBits & TagBits.AnnotationNullMASK;
-						if (newBits == oldBits || newBits == 0)
-							return; // no update
-						AnnotationBinding[] annot = environment.nullAnnotationsFromTagBits(newBits);
-						if (annot != null)
-							type = environment.createAnnotatedType(this.instantiation, annot);
-					}
+				long oldBits = ((this.instantiation != null) ? this.instantiation.tagBits : variable.tagBits)
+								& TagBits.AnnotationNullMASK;
+				long requestedBits = type.tagBits & TagBits.AnnotationNullMASK;
+				long newBits = (oldBits == TagBits.AnnotationNonNull) ? oldBits : requestedBits; // need to preserve @NonNull
+				if (this.instantiation != null && oldBits == newBits) {
+					return; // no update needed
+				}
+				if (requestedBits != newBits) {
+					// adjust 'type' to fit the newBits
+					AnnotationBinding[] annot = environment.nullAnnotationsFromTagBits(newBits);
+					if (annot != null)
+						type = environment.createAnnotatedType(type.unannotated(), annot);
 				}
 			}
 			this.instantiation = type;
@@ -361,7 +358,7 @@ class BoundSet {
 		// check if this makes the inference variable instantiated:
 		TypeBinding typeBinding = bound.right;
 		if (bound.relation == ReductionResult.SAME && typeBinding.isProperType(true))
-			three.setInstantiation(typeBinding, environment);
+			three.setInstantiation(typeBinding, bound.left, environment);
 		if (bound.right instanceof InferenceVariable) {
 			// for a dependency between two IVs make a note about the inverse bound.
 			// this should be needed to determine IV dependencies independent of direction.
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding.java
index 8c9e399..d0bab8f 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding.java
@@ -13,12 +13,14 @@
  *     IBM Corporation - initial API and implementation
  *     Stephan Herrmann - Contribution for
  *								Bug 400874 - [1.8][compiler] Inference infrastructure should evolve to meet JLS8 18.x (Part G of JSR335 spec)
+ *								Bug 429384 - [1.8][null] implement conformance rules for null-annotated lower / upper type bounds
  *******************************************************************************/
 package org.eclipse.jdt.internal.compiler.lookup;
 
 import org.eclipse.jdt.core.compiler.CharOperation;
 import org.eclipse.jdt.internal.compiler.ast.Wildcard;
 import org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants;
+import org.eclipse.jdt.internal.compiler.impl.CompilerOptions;
 
 public class CaptureBinding extends TypeVariableBinding {
 
@@ -41,6 +43,8 @@ public class CaptureBinding extends TypeVariableBinding {
 		this.tagBits |= TagBits.HasCapturedWildcard;
 		if (wildcard.hasTypeAnnotations()) {
 			setTypeAnnotations(wildcard.getTypeAnnotations(), wildcard.environment.globalOptions.isAnnotationBasedNullAnalysisEnabled);
+			if (wildcard.hasNullTypeAnnotations())
+				this.tagBits |= TagBits.HasNullTypeAnnotation;
 		}
 	}
 	
@@ -286,6 +290,30 @@ public class CaptureBinding extends TypeVariableBinding {
 	}
 	
 	@Override
+	public char[] nullAnnotatedReadableName(CompilerOptions options, boolean shortNames) {
+	    StringBuffer nameBuffer = new StringBuffer(10);
+		appendNullAnnotation(nameBuffer, options);
+		nameBuffer.append(this.sourceName());
+		if (this.wildcard != null) {
+			nameBuffer.append("of "); //$NON-NLS-1$
+			nameBuffer.append(this.wildcard.nullAnnotatedReadableName(options, shortNames));
+		} else if (this.lowerBound != null) {
+			nameBuffer.append(" super "); //$NON-NLS-1$
+			nameBuffer.append(this.lowerBound.nullAnnotatedReadableName(options, shortNames));
+		} else if (this.firstBound != null) {
+			nameBuffer.append(" extends "); //$NON-NLS-1$
+			nameBuffer.append(this.firstBound.nullAnnotatedReadableName(options, shortNames));
+			TypeBinding[] otherUpperBounds = this.otherUpperBounds();
+			if (otherUpperBounds != NO_TYPES)
+				nameBuffer.append(" & ..."); //$NON-NLS-1$ // only hint at more bounds, we currently don't evaluate null annotations on otherUpperBounds
+		}
+		int nameLength = nameBuffer.length();
+		char[] readableName = new char[nameLength];
+		nameBuffer.getChars(0, nameLength, readableName, 0);
+	    return readableName;
+	}
+
+	@Override
 	public TypeBinding uncapture(Scope scope) {
 		return this.wildcard;
 	}
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceSubstitution.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceSubstitution.java
index babb032..e8e5144 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceSubstitution.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceSubstitution.java
@@ -74,6 +74,8 @@ public class InferenceSubstitution extends Scope.Substitutor implements Substitu
 			typeVariable.superclass = superclass;
 			typeVariable.superInterfaces = superInterfaces;
 			typeVariable.firstBound = superclass != null ? superclass : superInterfaces[0];
+			if (typeVariable.firstBound.hasNullTypeAnnotations())
+				typeVariable.tagBits |= TagBits.HasNullTypeAnnotation;
 		}
 		return typeVariable;
 	}
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceVariable.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceVariable.java
index 8c45443..9638e7a 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceVariable.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceVariable.java
@@ -32,7 +32,17 @@ public class InferenceVariable extends TypeVariableBinding {
 				null/*declaringElement*/, variableRank, environment);
 		this.site = site;
 		this.typeParameter = typeParameter;
-		this.nullHints |= typeParameter.tagBits & TagBits.AnnotationNullMASK;
+		this.tagBits |= typeParameter.tagBits & TagBits.AnnotationNullMASK;
+		if (typeParameter.isTypeVariable()) {
+			TypeVariableBinding typeVariable = (TypeVariableBinding) typeParameter;
+			if (typeVariable.firstBound != null) {
+				long boundBits = typeVariable.firstBound.tagBits & TagBits.AnnotationNullMASK;
+				if (boundBits == TagBits.AnnotationNonNull)
+					this.tagBits |= boundBits; // @NonNull must be preserved
+				else
+					this.nullHints |= boundBits; // @Nullable is only a hint
+			}
+		}
 		this.superclass = object;
 	}
 
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java
index 6b0bf2a..2b019c4 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java
@@ -23,6 +23,7 @@
  *								Bug 400874 - [1.8][compiler] Inference infrastructure should evolve to meet JLS8 18.x (Part G of JSR335 spec)
  *								Bug 426792 - [1.8][inference][impl] generify new type inference engine
  *								Bug 428019 - [1.8][compiler] Type inference failure with nested generic invocation.
+ *								Bug 429384 - [1.8][null] implement conformance rules for null-annotated lower / upper type bounds
  *******************************************************************************/
 package org.eclipse.jdt.internal.compiler.lookup;
 
@@ -35,6 +36,7 @@ import org.eclipse.jdt.internal.compiler.ast.TypeParameter;
 import org.eclipse.jdt.internal.compiler.ast.TypeReference;
 import org.eclipse.jdt.internal.compiler.ast.Wildcard;
 import org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants;
+import org.eclipse.jdt.internal.compiler.impl.CompilerOptions;
 
 /**
  * Binding for a type parameter, held by source/binary type or method.
@@ -721,6 +723,31 @@ public class TypeVariableBinding extends ReferenceBinding {
 		return buffer.toString();
 	}
 
+	@Override
+	public char[] nullAnnotatedReadableName(CompilerOptions options, boolean shortNames) {
+	    StringBuffer nameBuffer = new StringBuffer(10);
+		appendNullAnnotation(nameBuffer, options);
+		nameBuffer.append(this.sourceName());
+		if (this.superclass != null && TypeBinding.equalsEquals(this.firstBound, this.superclass)) {
+			nameBuffer.append(" extends ").append(this.superclass.nullAnnotatedReadableName(options, shortNames)); //$NON-NLS-1$
+		}
+		if (this.superInterfaces != null && this.superInterfaces != Binding.NO_SUPERINTERFACES) {
+		   if (TypeBinding.notEquals(this.firstBound, this.superclass)) {
+			   nameBuffer.append(" extends "); //$NON-NLS-1$
+	        }
+		    for (int i = 0, length = this.superInterfaces.length; i < length; i++) {
+		        if (i > 0 || TypeBinding.equalsEquals(this.firstBound, this.superclass)) {
+		        	nameBuffer.append(" & "); //$NON-NLS-1$
+		        }
+		        nameBuffer.append(this.superInterfaces[i].nullAnnotatedReadableName(options, shortNames));
+			}
+		}
+		int nameLength = nameBuffer.length();
+		char[] readableName = new char[nameLength];
+		nameBuffer.getChars(0, nameLength, readableName, 0);
+	    return readableName;
+	}
+
 	// May still carry declaration site annotations.
 	public TypeBinding unannotated() {
 		return this.hasTypeAnnotations() ? this.environment.getUnannotatedType(this) : this;
@@ -799,6 +826,8 @@ public class TypeVariableBinding extends ReferenceBinding {
 				annotatedType.firstBound = firstBound;
 			}
 		}
+		if (firstBound != null && firstBound.hasNullTypeAnnotations())
+			this.tagBits |= TagBits.HasNullTypeAnnotation;
 		return firstBound;
 	}
 	/* An annotated type variable use differs from its declaration exactly in its annotations and in nothing else.
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java
index aa7f280..1be5e45 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java
@@ -669,7 +669,7 @@ public class WildcardBinding extends ReferenceBinding {
             case Wildcard.EXTENDS :
             	if (this.otherBounds == null) {
             		buffer.append(TypeConstants.WILDCARD_NAME).append(TypeConstants.WILDCARD_EXTENDS);
-            		buffer.append(shortNames ? this.bound.shortReadableName(): this.bound.readableName());
+            		buffer.append(this.bound.nullAnnotatedReadableName(options, shortNames));
             	} else {
 	            	buffer.append(this.bound.nullAnnotatedReadableName(options, shortNames));
 	            	for (int i = 0, length = this.otherBounds.length; i < length; i++) {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
index 661855c..ed9b517 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
@@ -57,6 +57,7 @@
  *								bug 412153 - [1.8][compiler] Check validity of annotations which may be repeatable
  *								bug 412151 - [1.8][compiler] Check repeating annotation's collection type
  *								bug 419209 - [1.8] Repeating container annotations should be rejected in the presence of annotation it contains
+ *								Bug 429384 - [1.8][null] implement conformance rules for null-annotated lower / upper type bounds
  ********************************************************************************/
 package org.eclipse.jdt.internal.compiler.problem;
 
@@ -9125,12 +9126,15 @@ public void nullityMismatchIsNull(Expression expression, TypeBinding requiredTyp
 			requiredType = capture.wildcard;
 	}
 	int problemId = IProblem.RequiredNonNullButProvidedNull;
-	String[] arguments = new String[] {
-			annotatedTypeName(requiredType, this.options.nonNullAnnotationName)
-	};
-	String[] argumentsShort = new String[] {
-			shortAnnotatedTypeName(requiredType, this.options.nonNullAnnotationName)
-	};
+	String[] arguments;
+	String[] argumentsShort;
+	if (this.options.sourceLevel < ClassFileConstants.JDK1_8) {
+		arguments      = new String[] { annotatedTypeName(requiredType, this.options.nonNullAnnotationName) };
+		argumentsShort = new String[] { shortAnnotatedTypeName(requiredType, this.options.nonNullAnnotationName) };
+	} else {
+		arguments      = new String[] { new String(requiredType.nullAnnotatedReadableName(this.options, false)) };
+		argumentsShort = new String[] { new String(requiredType.nullAnnotatedReadableName(this.options, true)) };
+	}
 	this.handle(problemId, arguments, argumentsShort, expression.sourceStart, expression.sourceEnd);
 }
 public void nullityMismatchSpecdNullable(Expression expression, TypeBinding requiredType, char[][] annotationName) {

commit f7bc2ee5d62baf64b6f044f322b40cdaa75e5dcc
Author: Jim Desrivieres <jdesrivieres>
Date:   Thu Oct 14 19:18:14 2004 +0000

    Change EnumDeclaration to separate enumConstants from bodyDeclarations (bug 76190)

4	2	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTMatcherTest.java
34	14	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java
5	3	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTVisitorTest.java
1	1	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/SampleASTs.java
2	1	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java
2	1	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java
47	19	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/EnumDeclaration.java
15	15	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTMatcherTest.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTMatcherTest.java
index 81d02e9..4f8d965 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTMatcherTest.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTMatcherTest.java
@@ -844,8 +844,10 @@ public class ASTMatcherTest extends org.eclipse.jdt.core.tests.junit.extension.T
 		x1.setName(N1);
 		x1.superInterfaceTypes().add(T1);
 		x1.superInterfaceTypes().add(T2);
-		x1.bodyDeclarations().add(EC1);
-		x1.bodyDeclarations().add(EC2);
+		x1.enumConstants().add(EC1);
+		x1.enumConstants().add(EC2);
+		x1.bodyDeclarations().add(FD1);
+		x1.bodyDeclarations().add(FD2);
 		basicMatch(x1);
 	}
 	public void testExpressionStatement() {
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java
index 83bd481..5b9dc96 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java
@@ -2668,6 +2668,9 @@ public class ASTTest extends org.eclipse.jdt.core.tests.junit.extension.TestCase
 	
 	}	
 	
+	/**
+	 * @deprecated (Uses getEnumConstants() which is deprecated)
+	 */
 	public void testEnumDeclaration() {
 		if (ast.apiLevel() == AST.JLS2) {
 			// node type introduced in 3.0 API
@@ -2690,6 +2693,7 @@ public class ASTTest extends org.eclipse.jdt.core.tests.junit.extension.TestCase
 		assertTrue(x.getName().isDeclaration() == true);
 		assertTrue(x.getJavadoc() == null);
 		assertTrue(x.superInterfaceTypes().size() == 0);
+		assertTrue(x.enumConstants().size()== 0);
 		assertTrue(x.bodyDeclarations().size()== 0);
 		assertTrue(x.getNodeType() == ASTNode.ENUM_DECLARATION);
 		assertTrue(x.structuralPropertiesForType() == EnumDeclaration.propertyDescriptors(ast.apiLevel()));
@@ -2728,6 +2732,28 @@ public class ASTTest extends org.eclipse.jdt.core.tests.junit.extension.TestCase
 			}
 		});
 
+		genericPropertyListTest(x, x.enumConstants(),
+				  new Property("EnumConstants", true, EnumConstantDeclaration.class) { //$NON-NLS-1$
+					public ASTNode sample(AST targetAst, boolean parented) {
+						EnumConstantDeclaration result = targetAst.newEnumConstantDeclaration();
+						if (parented) {
+							// use fact that EnumConstantDeclaration is also a BodyDeclaration
+							TypeDeclaration d = targetAst.newTypeDeclaration();
+							d.bodyDeclarations().add(result);
+						}
+						return result;
+					}
+					public ASTNode wrap() {
+						EnumConstantDeclaration s1 = x.getAST().newEnumConstantDeclaration();
+						s1.bodyDeclarations().add(x);
+						return s1;
+					}
+					public void unwrap() {
+						EnumConstantDeclaration s1 = (EnumConstantDeclaration) x.getParent();
+						s1.bodyDeclarations().remove(x);
+					}
+				});
+				
 		genericPropertyListTest(x, x.bodyDeclarations(),
 		  new Property("BodyDeclarations", true, BodyDeclaration.class) { //$NON-NLS-1$
 			public ASTNode sample(AST targetAst, boolean parented) {
@@ -2760,26 +2786,20 @@ public class ASTTest extends org.eclipse.jdt.core.tests.junit.extension.TestCase
 		TypeDeclaration t1 = ast.newTypeDeclaration();
 		TypeDeclaration t2 = ast.newTypeDeclaration();
 
-		x.bodyDeclarations().add(c1);
-		x.bodyDeclarations().add(c2);
-		x.bodyDeclarations().add(ast.newInitializer());
+		x.enumConstants().add(c1);
+		x.enumConstants().add(c2);
 		x.bodyDeclarations().add(f1);
-		x.bodyDeclarations().add(ast.newInitializer());
 		x.bodyDeclarations().add(f2);
-		x.bodyDeclarations().add(ast.newInitializer());
-		x.bodyDeclarations().add(t1);
-		x.bodyDeclarations().add(ast.newInitializer());
 		x.bodyDeclarations().add(m1);
-		x.bodyDeclarations().add(ast.newInitializer());
 		x.bodyDeclarations().add(m2);
-		x.bodyDeclarations().add(ast.newInitializer());
+		x.bodyDeclarations().add(t1);
 		x.bodyDeclarations().add(t2);
-		x.bodyDeclarations().add(ast.newInitializer());
 
-		List es = Arrays.asList(x.getEnumConstants());
-		assertTrue(es.size() == 2);
-		assertTrue(es.contains(c1));
-		assertTrue(es.contains(c2));
+		// getEnumConstants() is deprecated - this test will be removed after 3.1M3
+		EnumConstantDeclaration[] cs = x.getEnumConstants();
+		assertTrue(cs.length == 2);
+		assertEquals(c1, cs[0]);
+		assertEquals(c2, cs[1]);
 		
 		// check that TypeDeclarations in body are classified correctly
 		assertTrue(t1.isLocalTypeDeclaration() == false);
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTVisitorTest.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTVisitorTest.java
index 87c245d..62d70ea 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTVisitorTest.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTVisitorTest.java
@@ -1390,13 +1390,15 @@ public class ASTVisitorTest extends org.eclipse.jdt.core.tests.junit.extension.T
 		x1.setName(N1);
 		x1.superInterfaceTypes().add(T1);
 		x1.superInterfaceTypes().add(T2);
-		x1.bodyDeclarations().add(EC1);
-		x1.bodyDeclarations().add(EC2);
+		x1.enumConstants().add(EC1);
+		x1.enumConstants().add(EC2);
+		x1.bodyDeclarations().add(FD1);
+		x1.bodyDeclarations().add(FD2);
 		TestVisitor v1 = new TestVisitor();
 		b.setLength(0);
 		x1.accept(v1);
 		String result = b.toString();
-		assertTrue(result.equals("[(ED"+JD1S+MOD1S+MOD2S+N1S+T1S+T2S+EC1S+EC2S+"ED)]")); //$NON-NLS-1$ //$NON-NLS-2$
+		assertTrue(result.equals("[(ED"+JD1S+MOD1S+MOD2S+N1S+T1S+T2S+EC1S+EC2S+FD1S+FD2S+"ED)]")); //$NON-NLS-1$ //$NON-NLS-2$
 	}
 	public void testExpressionStatement() {
 		ExpressionStatement x1 = ast.newExpressionStatement(E1);
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/SampleASTs.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/SampleASTs.java
index 998cb0d..e4cb9e9 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/SampleASTs.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/SampleASTs.java
@@ -54,7 +54,7 @@ public class SampleASTs {
 			EnumDeclaration ed = target.newEnumDeclaration();
 			td.bodyDeclarations().add(ed);	
 			EnumConstantDeclaration ec = target.newEnumConstantDeclaration();
-			ed.bodyDeclarations().add(ec);	
+			ed.enumConstants().add(ec);	
 		}
 		
 		MethodDeclaration md = target.newMethodDeclaration();
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java
index 1552f9f..6f34361 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java
@@ -1572,7 +1572,8 @@ public final class AST {
 	 * Creates an unparented enum declaration node owned by this AST.
 	 * The name of the enum is an unspecified, but legal, name; 
 	 * no doc comment; no modifiers or annotations; 
-	 * no superinterfaces; and no body declarations.
+	 * no superinterfaces; and empty lists of enum constants
+	 * and body declarations.
 	 * 
 	 * @return a new unparented enum declaration node
 	 * @exception UnsupportedOperationException if this operation is used in
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java
index 929359b..544f636 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java
@@ -808,6 +808,7 @@ public class ASTMatcher {
 				&& safeSubtreeListMatch(node.modifiers(), o.modifiers())
 				&& safeSubtreeMatch(node.getName(), o.getName())
 				&& safeSubtreeListMatch(node.superInterfaceTypes(), o.superInterfaceTypes())
+				&& safeSubtreeListMatch(node.enumConstants(), o.enumConstants())
 				&& safeSubtreeListMatch(
 					node.bodyDeclarations(),
 					o.bodyDeclarations()));
@@ -1078,7 +1079,7 @@ public class ASTMatcher {
 	 * When this parameter is <code>true</code>, the implementation
 	 * tests whether the other object is also a <code>Javadoc</code>
 	 * with structurally isomorphic child subtrees; the comment string 
-	 * ({@link Javadoc#getComment() Javadoc.getComment}) is ignored.
+	 * (<code>Javadoc.getComment()</code>) is ignored.
 	 * Conversely, when the parameter is <code>false</code>, the
 	 * implementation tests whether the other object is also a
 	 * <code>Javadoc</code> with exactly the same comment string; 
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/EnumDeclaration.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/EnumDeclaration.java
index 05027ae..3030e7f 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/EnumDeclaration.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/EnumDeclaration.java
@@ -12,7 +12,6 @@
 package org.eclipse.jdt.core.dom;
 
 import java.util.ArrayList;
-import java.util.Iterator;
 import java.util.List;
 
 /**
@@ -27,6 +26,9 @@ import java.util.List;
  *         [ <b>;</b> { ClassBodyDeclaration | <b>;</b> } ]
  *         <b>}</b>
  * </pre>
+ * The {@link #enumConstants()} list holds the enum constant declarations,
+ * while the {@link #bodyDeclarations()} list holds the class body declarations
+ * that appear after the semicolon.
  * <p>
  * When a Javadoc comment is present, the source
  * range begins with the first character of the "/**" comment delimiter.
@@ -72,6 +74,13 @@ public class EnumDeclaration extends AbstractTypeDeclaration {
 		new ChildListPropertyDescriptor(EnumDeclaration.class, "superInterfaceTypes", Type.class, NO_CYCLE_RISK); //$NON-NLS-1$
 	
 	/**
+	 * The "enumConstants" structural property of this node type.
+	 * @since 3.1
+	 */
+	public static final ChildListPropertyDescriptor ENUM_CONSTANTS_PROPERTY = 
+		new ChildListPropertyDescriptor(EnumDeclaration.class, "enumConstants", EnumConstantDeclaration.class, CYCLE_RISK); //$NON-NLS-1$
+	
+	/**
 	 * The "bodyDeclarations" structural property of this node type.
 	 */
 	public static final ChildListPropertyDescriptor BODY_DECLARATIONS_PROPERTY = 
@@ -91,6 +100,7 @@ public class EnumDeclaration extends AbstractTypeDeclaration {
 		addProperty(MODIFIERS2_PROPERTY, properyList);
 		addProperty(NAME_PROPERTY, properyList);
 		addProperty(SUPER_INTERFACE_TYPES_PROPERTY, properyList);
+		addProperty(ENUM_CONSTANTS_PROPERTY, properyList);
 		addProperty(BODY_DECLARATIONS_PROPERTY, properyList);
 		PROPERTY_DESCRIPTORS = reapPropertyList(properyList);
 	}
@@ -117,10 +127,19 @@ public class EnumDeclaration extends AbstractTypeDeclaration {
 		new ASTNode.NodeList(SUPER_INTERFACE_TYPES_PROPERTY);
 
 	/**
+	 * The enum constant declarations
+	 * (element type: <code>EnumConstantDeclaration</code>).
+	 * Defaults to an empty list.
+	 * @since 3.1
+	 */
+	private ASTNode.NodeList enumConstants = 
+		new ASTNode.NodeList(ENUM_CONSTANTS_PROPERTY);
+
+	/**
 	 * Creates a new AST node for an enum declaration owned by the given 
 	 * AST. By default, the enum declaration has an unspecified, but legal,
 	 * name; no modifiers; no javadoc; no superinterfaces; 
-	 * and an empty list of body declarations.
+	 * and empty lists of enum constants and body declarations.
 	 * <p>
 	 * N.B. This constructor is package-private; all subclasses must be 
 	 * declared in the same package; clients are unable to declare 
@@ -175,6 +194,9 @@ public class EnumDeclaration extends AbstractTypeDeclaration {
 		if (property == SUPER_INTERFACE_TYPES_PROPERTY) {
 			return superInterfaceTypes();
 		}
+		if (property == ENUM_CONSTANTS_PROPERTY) {
+			return enumConstants();
+		}
 		if (property == BODY_DECLARATIONS_PROPERTY) {
 			return bodyDeclarations();
 		}
@@ -237,6 +259,8 @@ public class EnumDeclaration extends AbstractTypeDeclaration {
 		result.setName((SimpleName) getName().clone(target));
 		result.superInterfaceTypes().addAll(
 			ASTNode.copySubtrees(target, superInterfaceTypes()));
+		result.enumConstants().addAll(
+				ASTNode.copySubtrees(target, enumConstants()));
 		result.bodyDeclarations().addAll(
 			ASTNode.copySubtrees(target, bodyDeclarations()));
 		return result;
@@ -261,6 +285,7 @@ public class EnumDeclaration extends AbstractTypeDeclaration {
 			acceptChildren(visitor, this.modifiers);
 			acceptChild(visitor, getName());
 			acceptChildren(visitor, this.superInterfaceTypes);
+			acceptChildren(visitor, this.enumConstants);
 			acceptChildren(visitor, this.bodyDeclarations);
 		}
 		visitor.endVisit(this);
@@ -278,6 +303,18 @@ public class EnumDeclaration extends AbstractTypeDeclaration {
 	}
 	
 	/**
+	 * Returns the live ordered list of enum constant declarations
+	 * of this enum declaration.
+	 * 
+	 * @return the live list of enum constant declarations
+	 *    (element type: {@link EnumConstantDeclaration})
+	 * @since 3.1
+	 */ 
+	public List enumConstants() {
+		return enumConstants;
+	}
+
+	/**
 	 * Returns the ordered list of enum constant declarations of this enum
 	 * declaration.
 	 * <p>
@@ -287,24 +324,14 @@ public class EnumDeclaration extends AbstractTypeDeclaration {
 	 * </p>
 	 * 
 	 * @return the (possibly empty) list of enum constant declarations
+	 * @deprecated Use enumConstants() to access the live list of enum constants which
+	 * are now separated for the other body declarations.
 	 */ 
+	// TODO (jeem) remove this deprecated method after 3.1M3
 	public EnumConstantDeclaration[] getEnumConstants() {
-		List bd = bodyDeclarations();
-		int enumCount = 0;
-		for (Iterator it = bd.listIterator(); it.hasNext(); ) {
-			if (it.next() instanceof EnumConstantDeclaration) {
-				enumCount++;
-			}
-		}
-		EnumConstantDeclaration[] enumConstants = new EnumConstantDeclaration[enumCount];
-		int next = 0;
-		for (Iterator it = bd.listIterator(); it.hasNext(); ) {
-			Object decl = it.next();
-			if (decl instanceof EnumConstantDeclaration) {
-				enumConstants[next++] = (EnumConstantDeclaration) decl;
-			}
-		}
-		return enumConstants;
+		EnumConstantDeclaration[] enumConstantsInBody = new EnumConstantDeclaration[enumConstants().size()];
+		enumConstants().toArray(enumConstantsInBody);
+		return enumConstantsInBody;
 	}
 
 	/* (omit javadoc for this method)
@@ -318,7 +345,7 @@ public class EnumDeclaration extends AbstractTypeDeclaration {
 	 * Method declared on ASTNode.
 	 */
 	int memSize() {
-		return super.memSize() + 1 * 4;
+		return super.memSize() + 2 * 4;
 	}
 	
 	/* (omit javadoc for this method)
@@ -330,6 +357,7 @@ public class EnumDeclaration extends AbstractTypeDeclaration {
 			+ this.modifiers.listSize()
 			+ (this.typeName == null ? 0 : getName().treeSize())
 			+ this.superInterfaceTypes.listSize()
+			+ this.enumConstants.listSize()
 			+ this.bodyDeclarations.listSize();
 	}
 }
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java
index 6cfbfe3..072c943 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java
@@ -567,22 +567,22 @@ class NaiveASTFlattener extends ASTVisitor {
 			this.buffer.append(" ");//$NON-NLS-1$
 		}
 		this.buffer.append("{");//$NON-NLS-1$
-		BodyDeclaration prev = null;
-		for (Iterator it = node.bodyDeclarations().iterator(); it.hasNext(); ) {
-			BodyDeclaration d = (BodyDeclaration) it.next();
-			if (prev instanceof EnumConstantDeclaration) {
-				// enum constant declarations do not include punctuation
-				if (d instanceof EnumConstantDeclaration) {
-					// enum constant declarations are separated by commas
-					this.buffer.append(", ");//$NON-NLS-1$
-				} else {
-					// semicolon separates last enum constant declaration from 
-					// first class body declarations
-					this.buffer.append("; ");//$NON-NLS-1$
-				}
-			}
+		for (Iterator it = node.enumConstants().iterator(); it.hasNext(); ) {
+			EnumConstantDeclaration d = (EnumConstantDeclaration) it.next();
 			d.accept(this);
-			prev = d;
+			// enum constant declarations do not include punctuation
+			if (it.hasNext()) {
+				// enum constant declarations are separated by commas
+				this.buffer.append(", ");//$NON-NLS-1$
+			}
+		}
+		if (!node.bodyDeclarations().isEmpty()) {
+			this.buffer.append("; ");//$NON-NLS-1$
+			for (Iterator it = node.bodyDeclarations().iterator(); it.hasNext(); ) {
+				BodyDeclaration d = (BodyDeclaration) it.next();
+				d.accept(this);
+				// other body declarations include trailing punctuation
+			}
 		}
 		this.buffer.append("}\n");//$NON-NLS-1$
 		return false;
commit c882891f40255f6a6a0a9f6cb659980aaea0f687
Author: Jim Desrivieres <jdesrivieres>
Date:   Thu Oct 14 21:22:17 2004 +0000

    Change EnumDeclaration to separate enumConstants from bodyDeclarations (bug 76190)

1	1	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java
index 4904acf..41e1b4c 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java
@@ -316,7 +316,7 @@ class ASTConverter {
 					break;
 				case 3 :
 					enumConstantsIndex++;
-					enumDeclaration.bodyDeclarations().add(convert(nextEnumConstant));
+					enumDeclaration.enumConstants().add(convert(nextEnumConstant));
 			}
 		}
 		convert(enumDeclaration2.javadoc, enumDeclaration);

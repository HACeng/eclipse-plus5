commit 0bf2f1caa0d4e721a34b9362d16e43ccf8f5a7ff
Author: Stefan Xenos <sxenos@gmail.com>
Date:   Mon Aug 15 16:06:44 2016 -0700

    Bug 499708 - [newindex] Add toString() methods to the Nd* index types
    
    Change-Id: I5b8060e15c051cf20fb242e476489edf02bf9ad9
    Signed-off-by: Stefan Xenos <sxenos@gmail.com>

10	0	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdConstant.java
40	0	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdMethod.java
10	0	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdMethodException.java
10	0	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdMethodId.java
15	0	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdMethodParameter.java
10	0	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdResourceFile.java
1	2	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdType.java
10	0	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdTypeParameter.java
12	0	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdTypeSignature.java
25	0	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdVariable.java
10	0	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdWorkspaceLocation.java
10	42	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/model/IndexBinaryType.java
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdConstant.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdConstant.java
index 01dbdd2..6132f77 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdConstant.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdConstant.java
@@ -79,4 +79,14 @@ public abstract class NdConstant extends NdNode {
 	 * corresponds to a {@link Constant}.
 	 */
 	public abstract Constant getConstant();
+
+	public String toString() {
+		try {
+			return getConstant().toString();
+		} catch (RuntimeException e) {
+			// This is called most often from the debugger, so we want to return something meaningful even
+			// if the code is buggy, the database is corrupt, or we don't have a read lock.
+			return super.toString();
+		}
+	}
 }
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdMethod.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdMethod.java
index a999a77..71485eb 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdMethod.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdMethod.java
@@ -19,6 +19,7 @@ import org.eclipse.jdt.internal.core.nd.field.FieldOneToMany;
 import org.eclipse.jdt.internal.core.nd.field.FieldOneToOne;
 import org.eclipse.jdt.internal.core.nd.field.FieldShort;
 import org.eclipse.jdt.internal.core.nd.field.StructDef;
+import org.eclipse.jdt.internal.core.util.CharArrayBuffer;
 
 /**
  * @since 3.12
@@ -130,4 +131,43 @@ public class NdMethod extends NdBinding {
 	public long getTagBits() {
 		return TAG_BITS.get(getNd(), this.address);
 	}
+
+	public String toString() {
+		try {
+			CharArrayBuffer arrayBuffer = new CharArrayBuffer();
+			arrayBuffer.append(getMethodId().getSelector());
+			getGenericSignature(arrayBuffer, true);
+			return arrayBuffer.toString();
+		} catch (RuntimeException e) {
+			// This is called most often from the debugger, so we want to return something meaningful even
+			// if the code is buggy, the database is corrupt, or we don't have a read lock.
+			return super.toString();
+		}
+	}
+
+	public void getGenericSignature(CharArrayBuffer result, boolean includeExceptions) {
+		NdTypeParameter.getSignature(result, getTypeParameters());
+
+		result.append('(');
+		for (NdMethodParameter next : getMethodParameters()) {
+			// Compiler-defined arguments don't show up in the generic signature
+			if (!next.isCompilerDefined()) {
+				next.getType().getSignature(result);
+			}
+		}
+		result.append(')');
+		NdTypeSignature returnType = getReturnType();
+		if (returnType == null) {
+			result.append('V');
+		} else {
+			returnType.getSignature(result);
+		}
+		if (includeExceptions) {
+			List<NdMethodException> exceptions = getExceptions();
+			for (NdMethodException next : exceptions) {
+				result.append('^');
+				next.getExceptionType().getSignature(result);
+			}
+		}
+	}
 }
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdMethodException.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdMethodException.java
index e9ac7cf..c1294af 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdMethodException.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdMethodException.java
@@ -41,4 +41,14 @@ public class NdMethodException extends NdNode {
 	public NdMethod getParent() {
 		return PARENT.get(getNd(), this.address);
 	}
+
+	public String toString() {
+		try {
+			return getExceptionType().toString();
+		} catch (RuntimeException e) {
+			// This is called most often from the debugger, so we want to return something meaningful even
+			// if the code is buggy, the database is corrupt, or we don't have a read lock.
+			return super.toString();
+		}
+	}
 }
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdMethodId.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdMethodId.java
index f5488b6..a1906ae 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdMethodId.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdMethodId.java
@@ -95,4 +95,14 @@ public class NdMethodId extends NdNode {
 	public boolean isClInit() {
 		return JavaNames.isClinit(getSelector());
 	}
+
+	public String toString() {
+		try {
+			return new String(getSelector());
+		} catch (RuntimeException e) {
+			// This is called most often from the debugger, so we want to return something meaningful even
+			// if the code is buggy, the database is corrupt, or we don't have a read lock.
+			return super.toString();
+		}
+	}
 }
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdMethodParameter.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdMethodParameter.java
index 2f6afb6..b22a2e7 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdMethodParameter.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdMethodParameter.java
@@ -10,6 +10,7 @@ import org.eclipse.jdt.internal.core.nd.field.FieldManyToOne;
 import org.eclipse.jdt.internal.core.nd.field.FieldOneToMany;
 import org.eclipse.jdt.internal.core.nd.field.FieldString;
 import org.eclipse.jdt.internal.core.nd.field.StructDef;
+import org.eclipse.jdt.internal.core.util.CharArrayBuffer;
 
 /**
  * @since 3.12
@@ -80,4 +81,18 @@ public class NdMethodParameter extends NdNode {
 	public boolean isCompilerDefined() {
 		return getFlag(FLG_COMPILER_DEFINED);
 	}
+
+	public String toString() {
+		try {
+			CharArrayBuffer buf = new CharArrayBuffer();
+			buf.append(getType().toString());
+			buf.append(" "); //$NON-NLS-1$
+			buf.append(getName().toString());
+			return buf.toString();
+		} catch (RuntimeException e) {
+			// This is called most often from the debugger, so we want to return something meaningful even
+			// if the code is buggy, the database is corrupt, or we don't have a read lock.
+			return super.toString();
+		}
+	}
 }
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdResourceFile.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdResourceFile.java
index fa0deaa..5ba7ba4 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdResourceFile.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdResourceFile.java
@@ -244,4 +244,14 @@ public class NdResourceFile extends NdTreeNode {
 	public NdBinding getBinding(int index) {
 		return ALL_NODES.get(getNd(), this.address, index);
 	}
+
+	public String toString() {
+		try {
+			return FILENAME.get(getNd(), this.address).toString();
+		} catch (RuntimeException e) {
+			// This is called most often from the debugger, so we want to return something meaningful even
+			// if the code is buggy, the database is corrupt, or we don't have a read lock.
+			return super.toString();
+		}
+	}
 }
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdType.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdType.java
index c51915b..2d559cb 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdType.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdType.java
@@ -16,7 +16,6 @@ import org.eclipse.core.runtime.CoreException;
 import org.eclipse.jdt.internal.core.nd.INdVisitor;
 import org.eclipse.jdt.internal.core.nd.Nd;
 import org.eclipse.jdt.internal.core.nd.db.IString;
-import org.eclipse.jdt.internal.core.nd.db.IndexException;
 import org.eclipse.jdt.internal.core.nd.field.FieldByte;
 import org.eclipse.jdt.internal.core.nd.field.FieldLong;
 import org.eclipse.jdt.internal.core.nd.field.FieldManyToOne;
@@ -218,7 +217,7 @@ public class NdType extends NdBinding {
 	public String toString() {
 		try {
 			return "class " + new String(getSourceName()); //$NON-NLS-1$
-		} catch (IndexException e) {
+		} catch (RuntimeException e) {
 			return super.toString();
 		}
 	}
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdTypeParameter.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdTypeParameter.java
index 2a5ef88..cb0874a 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdTypeParameter.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdTypeParameter.java
@@ -90,4 +90,14 @@ public class NdTypeParameter extends NdNode {
 			next.getSignature(result);
 		}
 	}
+
+	public static void getSignature(CharArrayBuffer buffer, List<NdTypeParameter> params) {
+		if (!params.isEmpty()) {
+			buffer.append('<');
+			for (NdTypeParameter next : params) {
+				next.getSignature(buffer);
+			}
+			buffer.append('>');
+		}
+	}
 }
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdTypeSignature.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdTypeSignature.java
index 83d8db7..4ee92e4 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdTypeSignature.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdTypeSignature.java
@@ -149,4 +149,16 @@ public abstract class NdTypeSignature extends NdNode {
 	 * Returns the type arguments for this type signature, if any. Returns the empty list if none.
 	 */
 	public abstract List<NdTypeArgument> getTypeArguments();
+
+	public String toString() {
+		try {
+			CharArrayBuffer result = new CharArrayBuffer();
+			getSignature(result);
+			return result.toString();
+		} catch (RuntimeException e) {
+			// This is called most often from the debugger, so we want to return something meaningful even
+			// if the code is buggy, the database is corrupt, or we don't have a read lock.
+			return super.toString();
+		}
+	}
 }
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdVariable.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdVariable.java
index b63fb3c..45a2d66 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdVariable.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdVariable.java
@@ -103,4 +103,29 @@ public class NdVariable extends NdBinding {
 	public void setTagBits(long tagBits) {
 		TAG_BITS.put(getNd(), this.address, tagBits);
 	}
+
+	public String toString() {
+		try {
+			StringBuilder result = new StringBuilder();
+			NdTypeSignature localType = getType();
+			if (localType != null) {
+				result.append(localType.toString());
+				result.append(" "); //$NON-NLS-1$
+			}
+			IString name = getName();
+			if (name != null) {
+				result.append(name.toString());
+			}
+			NdConstant constant = getConstant();
+			if (constant != null) {
+				result.append(" = "); //$NON-NLS-1$
+				result.append(constant.toString());
+			}
+			return result.toString();
+		} catch (RuntimeException e) {
+			// This is called most often from the debugger, so we want to return something meaningful even
+			// if the code is buggy, the database is corrupt, or we don't have a read lock.
+			return super.toString();
+		}
+	}
 }
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdWorkspaceLocation.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdWorkspaceLocation.java
index 0bc0436..092a5cd 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdWorkspaceLocation.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdWorkspaceLocation.java
@@ -44,4 +44,14 @@ public class NdWorkspaceLocation extends NdNode {
 	public NdResourceFile getResourceFile() {
 		return RESOURCE.get(getNd(), this.address);
 	}
+
+	public String toString() {
+		try {
+			return getPath().toString();
+		} catch (RuntimeException e) {
+			// This is called most often from the debugger, so we want to return something meaningful even
+			// if the code is buggy, the database is corrupt, or we don't have a read lock.
+			return super.toString();
+		}
+	}
 }
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/model/IndexBinaryType.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/model/IndexBinaryType.java
index 211fb94..3b10794 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/model/IndexBinaryType.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/model/IndexBinaryType.java
@@ -182,7 +182,7 @@ public class IndexBinaryType implements IBinaryType {
 			if (type != null) {
 				CharArrayBuffer buffer = new CharArrayBuffer();
 
-				getSignature(buffer, type.getTypeParameters());
+				NdTypeParameter.getSignature(buffer, type.getTypeParameters());
 
 				NdTypeSignature superclass = type.getSuperclass();
 				if (superclass != null) {
@@ -376,16 +376,6 @@ public class IndexBinaryType implements IBinaryType {
 		return walker;
 	}
 
-	private void getSignature(CharArrayBuffer buffer, List<NdTypeParameter> params) {
-		if (!params.isEmpty()) {
-			buffer.append('<');
-			for (NdTypeParameter next : params) {
-				next.getSignature(buffer);
-			}
-			buffer.append('>');
-		}
-	}
-
 	private IBinaryMethod createBinaryMethod(NdMethod ndMethod) {
 		NdMethodId methodId = ndMethod.getMethodId();
 
@@ -437,6 +427,15 @@ public class IndexBinaryType implements IBinaryType {
 				.setIsClInit(methodId.isClInit()).setTypeAnnotations(toTypeAnnotationArray(typeAnnotations));
 	}
 
+	private static char[] getGenericSignatureFor(NdMethod method) {
+		if (!method.hasAllFlags(NdMethod.FLG_GENERIC_SIGNATURE_PRESENT)) {
+			return null;
+		}
+		CharArrayBuffer result = new CharArrayBuffer();
+		method.getGenericSignature(result, method.hasAllFlags(NdMethod.FLG_THROWS_SIGNATURE_PRESENT));
+		return result.getContents();
+	}
+	
 	private char[][] getArgumentNames(NdMethod ndMethod) {
 		// Unlike what its JavaDoc says, IBinaryType returns an empty array if no argument names are available, so
 		// we replicate this weird undocumented corner case here.
@@ -491,37 +490,6 @@ public class IndexBinaryType implements IBinaryType {
 		return result;
 	}
 
-	private char[] getGenericSignatureFor(NdMethod method) {
-		if (!method.hasAllFlags(NdMethod.FLG_GENERIC_SIGNATURE_PRESENT)) {
-			return null;
-		}
-		CharArrayBuffer result = new CharArrayBuffer();
-		getSignature(result, method.getTypeParameters());
-
-		result.append('(');
-		for (NdMethodParameter next : method.getMethodParameters()) {
-			// Compiler-defined arguments don't show up in the generic signature
-			if (!next.isCompilerDefined()) {
-				next.getType().getSignature(result);
-			}
-		}
-		result.append(')');
-		NdTypeSignature returnType = method.getReturnType();
-		if (returnType == null) {
-			result.append('V');
-		} else {
-			returnType.getSignature(result);
-		}
-		if (method.hasAllFlags(NdMethod.FLG_THROWS_SIGNATURE_PRESENT)) {
-			List<NdMethodException> exceptions = method.getExceptions();
-			for (NdMethodException next : exceptions) {
-				result.append('^');
-				next.getExceptionType().getSignature(result);
-			}
-		}
-		return result.getContents();
-	}
-
 	private char[][] getExceptionTypeNames(NdMethod ndMethod) {
 		List<NdMethodException> exceptions = ndMethod.getExceptions();
 

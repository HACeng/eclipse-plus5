commit 141285694dc186f382cdc5e23d991883a93f9f68
Author: ssankaran <srikanth_sankaran@in.ibm.com>
Date:   Sun Sep 29 20:10:16 2013 +0530

    Fixed Bug 418041 - [1.8] NPE during AST creation

1	2	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GrammarCoverageTests308.java
154	1	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java
28	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
3	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java
28	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/AnnotatableTypeSystem.java
3	3	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java
5	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java
18	14	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedMethodBinding.java
16	14	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
1	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TagBits.java
0	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java
5	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeSystem.java
66	6	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/UnannotatedTypeSystem.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GrammarCoverageTests308.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GrammarCoverageTests308.java
index 5ba0ab8..9d9aecb 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GrammarCoverageTests308.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GrammarCoverageTests308.java
@@ -975,8 +975,7 @@ public class GrammarCoverageTests308 extends AbstractRegressionTest {
 	// TypeParameter ::= TypeParameterHeader 'extends' ReferenceType AdditionalBoundList
 	// AdditionalBound ::= '&' ReferenceType
 	// TypeParameter1 ::= TypeParameterHeader 'extends' ReferenceType AdditionalBoundList1
-	// TODO(Srikanth): fix and re-enable test.
-	public void _test023() throws Exception {
+	public void test023() throws Exception {
 		this.runNegativeTest(
 				new String[] {
 					"I.java",
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java
index 6d70074..56d6272 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java
@@ -3883,4 +3883,157 @@ public class NegativeTypeAnnotationTest extends AbstractRegressionTest {
 				"Type annotations are not allowed on type names used to access static members\n" +
 				"----------\n");
 	}
-}
+	// https://bugs.eclipse.org/bugs/show_bug.cgi?id=418041, NPE during AST creation.
+	public void test418041() {
+		this.runNegativeTest(
+				new String[] {
+					"X.java",
+					"import java.lang.annotation.ElementType;\n" +
+					"import java.lang.annotation.Target;\n" +
+					"import java.util.List;\n" +
+					"@Target(ElementType.TYPE_USE)\n" +
+					"@interface Readonly {\n" +
+					"}\n" +
+					"class UnmodifiableList<T> implements\n" +
+					"@Readonly List<@Readonly T> { }\n"
+				},
+				"----------\n" + 
+				"1. ERROR in X.java (at line 7)\n" + 
+				"	class UnmodifiableList<T> implements\n" + 
+				"	      ^^^^^^^^^^^^^^^^\n" + 
+				"The type UnmodifiableList<T> must implement the inherited abstract method List<T>.addAll(int, Collection<? extends T>)\n" + 
+				"----------\n" + 
+				"2. ERROR in X.java (at line 7)\n" + 
+				"	class UnmodifiableList<T> implements\n" + 
+				"	      ^^^^^^^^^^^^^^^^\n" + 
+				"The type UnmodifiableList<T> must implement the inherited abstract method List<T>.addAll(Collection<? extends T>)\n" + 
+				"----------\n" + 
+				"3. ERROR in X.java (at line 7)\n" + 
+				"	class UnmodifiableList<T> implements\n" + 
+				"	      ^^^^^^^^^^^^^^^^\n" + 
+				"The type UnmodifiableList<T> must implement the inherited abstract method List<T>.lastIndexOf(Object)\n" + 
+				"----------\n" + 
+				"4. ERROR in X.java (at line 7)\n" + 
+				"	class UnmodifiableList<T> implements\n" + 
+				"	      ^^^^^^^^^^^^^^^^\n" + 
+				"The type UnmodifiableList<T> must implement the inherited abstract method List<T>.subList(int, int)\n" + 
+				"----------\n" + 
+				"5. ERROR in X.java (at line 7)\n" + 
+				"	class UnmodifiableList<T> implements\n" + 
+				"	      ^^^^^^^^^^^^^^^^\n" + 
+				"The type UnmodifiableList<T> must implement the inherited abstract method List<T>.contains(Object)\n" + 
+				"----------\n" + 
+				"6. ERROR in X.java (at line 7)\n" + 
+				"	class UnmodifiableList<T> implements\n" + 
+				"	      ^^^^^^^^^^^^^^^^\n" + 
+				"The type UnmodifiableList<T> must implement the inherited abstract method List<T>.get(int)\n" + 
+				"----------\n" + 
+				"7. ERROR in X.java (at line 7)\n" + 
+				"	class UnmodifiableList<T> implements\n" + 
+				"	      ^^^^^^^^^^^^^^^^\n" + 
+				"The type UnmodifiableList<T> must implement the inherited abstract method List<T>.retainAll(Collection<?>)\n" + 
+				"----------\n" + 
+				"8. ERROR in X.java (at line 7)\n" + 
+				"	class UnmodifiableList<T> implements\n" + 
+				"	      ^^^^^^^^^^^^^^^^\n" + 
+				"The type UnmodifiableList<T> must implement the inherited abstract method List<T>.clear()\n" + 
+				"----------\n" + 
+				"9. ERROR in X.java (at line 7)\n" + 
+				"	class UnmodifiableList<T> implements\n" + 
+				"	      ^^^^^^^^^^^^^^^^\n" + 
+				"The type UnmodifiableList<T> must implement the inherited abstract method List<T>.indexOf(Object)\n" + 
+				"----------\n" + 
+				"10. ERROR in X.java (at line 7)\n" + 
+				"	class UnmodifiableList<T> implements\n" + 
+				"	      ^^^^^^^^^^^^^^^^\n" + 
+				"The type UnmodifiableList<T> must implement the inherited abstract method List<T>.toArray(T[])\n" + 
+				"----------\n" + 
+				"11. ERROR in X.java (at line 7)\n" + 
+				"	class UnmodifiableList<T> implements\n" + 
+				"	      ^^^^^^^^^^^^^^^^\n" + 
+				"The type UnmodifiableList<T> must implement the inherited abstract method List<T>.toArray()\n" + 
+				"----------\n" + 
+				"12. ERROR in X.java (at line 7)\n" + 
+				"	class UnmodifiableList<T> implements\n" + 
+				"	      ^^^^^^^^^^^^^^^^\n" + 
+				"The type UnmodifiableList<T> must implement the inherited abstract method List<T>.isEmpty()\n" + 
+				"----------\n" + 
+				"13. ERROR in X.java (at line 7)\n" + 
+				"	class UnmodifiableList<T> implements\n" + 
+				"	      ^^^^^^^^^^^^^^^^\n" + 
+				"The type UnmodifiableList<T> must implement the inherited abstract method List<T>.listIterator(int)\n" + 
+				"----------\n" + 
+				"14. ERROR in X.java (at line 7)\n" + 
+				"	class UnmodifiableList<T> implements\n" + 
+				"	      ^^^^^^^^^^^^^^^^\n" + 
+				"The type UnmodifiableList<T> must implement the inherited abstract method List<T>.listIterator()\n" + 
+				"----------\n" + 
+				"15. ERROR in X.java (at line 7)\n" + 
+				"	class UnmodifiableList<T> implements\n" + 
+				"	      ^^^^^^^^^^^^^^^^\n" + 
+				"The type UnmodifiableList<T> must implement the inherited abstract method List<T>.add(int, T)\n" + 
+				"----------\n" + 
+				"16. ERROR in X.java (at line 7)\n" + 
+				"	class UnmodifiableList<T> implements\n" + 
+				"	      ^^^^^^^^^^^^^^^^\n" + 
+				"The type UnmodifiableList<T> must implement the inherited abstract method List<T>.add(T)\n" + 
+				"----------\n" + 
+				"17. ERROR in X.java (at line 7)\n" + 
+				"	class UnmodifiableList<T> implements\n" + 
+				"	      ^^^^^^^^^^^^^^^^\n" + 
+				"The type UnmodifiableList<T> must implement the inherited abstract method List<T>.set(int, T)\n" + 
+				"----------\n" + 
+				"18. ERROR in X.java (at line 7)\n" + 
+				"	class UnmodifiableList<T> implements\n" + 
+				"	      ^^^^^^^^^^^^^^^^\n" + 
+				"The type UnmodifiableList<T> must implement the inherited abstract method List<T>.size()\n" + 
+				"----------\n" + 
+				"19. ERROR in X.java (at line 7)\n" + 
+				"	class UnmodifiableList<T> implements\n" + 
+				"	      ^^^^^^^^^^^^^^^^\n" + 
+				"The type UnmodifiableList<T> must implement the inherited abstract method List<T>.containsAll(Collection<?>)\n" + 
+				"----------\n" + 
+				"20. ERROR in X.java (at line 7)\n" + 
+				"	class UnmodifiableList<T> implements\n" + 
+				"	      ^^^^^^^^^^^^^^^^\n" + 
+				"The type UnmodifiableList<T> must implement the inherited abstract method List<T>.remove(int)\n" + 
+				"----------\n" + 
+				"21. ERROR in X.java (at line 7)\n" + 
+				"	class UnmodifiableList<T> implements\n" + 
+				"	      ^^^^^^^^^^^^^^^^\n" + 
+				"The type UnmodifiableList<T> must implement the inherited abstract method List<T>.remove(Object)\n" + 
+				"----------\n" + 
+				"22. ERROR in X.java (at line 7)\n" + 
+				"	class UnmodifiableList<T> implements\n" + 
+				"	      ^^^^^^^^^^^^^^^^\n" + 
+				"The type UnmodifiableList<T> must implement the inherited abstract method List<T>.removeAll(Collection<?>)\n" + 
+				"----------\n" + 
+				"23. ERROR in X.java (at line 7)\n" + 
+				"	class UnmodifiableList<T> implements\n" + 
+				"	      ^^^^^^^^^^^^^^^^\n" + 
+				"The type UnmodifiableList<T> must implement the inherited abstract method List<T>.iterator()\n" + 
+				"----------\n");
+	}
+	// https://bugs.eclipse.org/bugs/show_bug.cgi?id=418041, NPE during AST creation.
+	public void test418041a() {
+		this.runNegativeTest(
+				new String[] {
+					"X.java",
+					"public class X <@Marker T extends @Marker Y<@Marker ?>, @Marker Q extends @Marker Integer> {\n" +
+					"}\n" +
+					"@java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_USE)\n" +
+					"@interface Marker {}\n"
+				},
+				"----------\n" + 
+				"1. ERROR in X.java (at line 1)\n" + 
+				"	public class X <@Marker T extends @Marker Y<@Marker ?>, @Marker Q extends @Marker Integer> {\n" + 
+				"	                                  ^^^^^^^^^\n" + 
+				"Y cannot be resolved to a type\n" + 
+				"----------\n" + 
+				"2. WARNING in X.java (at line 1)\n" + 
+				"	public class X <@Marker T extends @Marker Y<@Marker ?>, @Marker Q extends @Marker Integer> {\n" + 
+				"	                                                                          ^^^^^^^^^^^^^^^\n" + 
+				"The type parameter Q should not be bounded by the final type Integer. Final types cannot be further extended\n" + 
+				"----------\n");
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
index 5e531e6..4f627d0 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
@@ -2960,4 +2960,32 @@ public class NullTypeAnnotationTest extends AbstractNullAnnotationTest {
 			"Null type mismatch (type annotations): required \'@NonNull X<@NonNull ?>\' but this expression has type \'@NonNull X<@Nullable String>\'\n" + 
 			"----------\n");		
 	}
+	public void testTypeVariable() {
+		runNegativeTestWithLibs(
+			new String[] {
+				"X.java",
+				"import java.lang.annotation.ElementType;\n" +
+				"import java.lang.annotation.Target;\n" +
+				"import org.eclipse.jdt.annotation.NonNull;\n" +
+				"@Target(ElementType.TYPE_USE)\n" +
+				"@interface Junk {\n" +
+				"}\n" +
+				"public class X<@NonNull T> {\n" +
+				"	T t = null;\n" +
+				"	@Junk T t2 = null;\n" +
+				"}\n"
+			}, 
+			getCompilerOptions(), 
+			"----------\n" + 
+			"1. ERROR in X.java (at line 8)\n" + 
+			"	T t = null;\n" + 
+			"	      ^^^^\n" + 
+			"Null type mismatch: required \'@NonNull T\' but the provided value is null\n" + 
+			"----------\n" + 
+			"2. ERROR in X.java (at line 9)\n" + 
+			"	@Junk T t2 = null;\n" + 
+			"	             ^^^^\n" + 
+			"Null type mismatch: required \'@NonNull T\' but the provided value is null\n" + 
+			"----------\n");		
+	}
 }
\ No newline at end of file
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java
index c1073ee..4823662 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java
@@ -403,9 +403,10 @@ public abstract class Annotation extends Expression {
 					}
 				}
 
-				TypeReference bound = typeReference.bound;
 				this.typePathEntries.push(TYPE_PATH_ANNOTATION_ON_WILDCARD_BOUND);
-				bound.traverse(this, scope);
+				TypeReference bound = typeReference.bound;
+				if (bound != null)
+					bound.traverse(this, scope);
 				if (!this.search) {
 					return false;
 				}
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/AnnotatableTypeSystem.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/AnnotatableTypeSystem.java
index bec0c7c..56710f5 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/AnnotatableTypeSystem.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/AnnotatableTypeSystem.java
@@ -45,6 +45,34 @@ public class AnnotatableTypeSystem extends TypeSystem {
 		return this.unannotatedTypeSystem.getUnannotatedType(type);
 	}
 	
+	// Given a type, return all its variously annotated versions.
+	public TypeBinding[] getAnnotatedTypes(TypeBinding type) {
+		
+		TypeBinding keyType = getUnannotatedType(type);
+		TypeBinding[] cachedInfo = (TypeBinding[]) this.annotatedTypes.get(keyType);
+		if (cachedInfo == null)
+			return Binding.NO_TYPES;
+		
+		final int length = cachedInfo.length;
+		TypeBinding [] annotatedVersions = new TypeBinding[length];
+		int versions = 0;
+		for (int i = 0; i < length; i++) {
+			final TypeBinding cachedType = cachedInfo[i];
+			if (cachedType == null)
+				break;
+			if (cachedType.id == type.id)
+				annotatedVersions[versions++] = cachedType;
+		}
+		
+		if (versions == 0)
+			return Binding.NO_TYPES;
+		
+		if (versions != length)
+			System.arraycopy(annotatedVersions, 0, annotatedVersions = new TypeBinding[versions], 0, versions);
+			
+		return annotatedVersions;
+	}
+	
 	public ArrayBinding getArrayType(TypeBinding leaftType, int dimensions) {
 		return getArrayType(leaftType, dimensions, Binding.NO_ANNOTATIONS);
 	}
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java
index b6f2381..a540968 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java
@@ -1188,7 +1188,7 @@ private void initializeTypeVariable(TypeVariableBinding variable, TypeVariableBi
 
 	// variable is visible to its bounds
 	variable.modifiers |= ExtraCompilerModifiers.AccUnresolved;
-	variable.superclass = type;
+	variable.setSuperClass(type);
 
 	ReferenceBinding[] bounds = null;
 	if (wrapper.signature[wrapper.start] == Util.C_COLON) {
@@ -1201,11 +1201,11 @@ private void initializeTypeVariable(TypeVariableBinding variable, TypeVariableBi
 		types.toArray(bounds);
 	}
 
-	variable.superInterfaces = bounds == null ? Binding.NO_SUPERINTERFACES : bounds;
+	variable.setSuperInterfaces(bounds == null ? Binding.NO_SUPERINTERFACES : bounds);
 	if (firstBound == null) {
 		firstBound = variable.superInterfaces.length == 0 ? null : variable.superInterfaces[0];
 	}
-	variable.firstBound = firstBound;
+	variable.setFirstBound(firstBound);
 }
 /**
  * Returns true if a type is identical to another one,
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java
index e7d38f4..2454b3f 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java
@@ -1581,4 +1581,9 @@ public void addResolutionListener(IQualifiedTypeResolutionListener resolutionLis
 public TypeBinding getUnannotatedType(TypeBinding typeBinding) {
 	return this.typeSystem.getUnannotatedType(typeBinding);
 }
+
+// Given a type, return all its variously annotated versions.
+public TypeBinding[] getAnnotatedTypes(TypeBinding type) {
+	return this.typeSystem.getAnnotatedTypes(type);
+}
 }
\ No newline at end of file
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedMethodBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedMethodBinding.java
index 214d83f..6b36a1c 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedMethodBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedMethodBinding.java
@@ -95,25 +95,27 @@ public class ParameterizedMethodBinding extends MethodBinding {
 				TypeBinding substitutedSuperclass = Scope.substitute(substitution, originalVariable.superclass);
 				ReferenceBinding[] substitutedInterfaces = Scope.substitute(substitution, originalVariable.superInterfaces);
 				if (originalVariable.firstBound != null) {
-					substitutedVariable.firstBound = originalVariable.firstBound == originalVariable.superclass
+					TypeBinding firstBound;
+					firstBound = originalVariable.firstBound == originalVariable.superclass
 						? substitutedSuperclass // could be array type or interface
 						: substitutedInterfaces[0];
+					substitutedVariable.setFirstBound(firstBound);
 				}
 				switch (substitutedSuperclass.kind()) {
 					case Binding.ARRAY_TYPE :
-						substitutedVariable.superclass = parameterizedDeclaringClass.environment.getResolvedType(TypeConstants.JAVA_LANG_OBJECT, null);
-						substitutedVariable.superInterfaces = substitutedInterfaces;
+						substitutedVariable.setSuperClass(parameterizedDeclaringClass.environment.getResolvedType(TypeConstants.JAVA_LANG_OBJECT, null));
+						substitutedVariable.setSuperInterfaces(substitutedInterfaces);
 						break;
 					default:
 						if (substitutedSuperclass.isInterface()) {
-							substitutedVariable.superclass = parameterizedDeclaringClass.environment.getResolvedType(TypeConstants.JAVA_LANG_OBJECT, null);
+							substitutedVariable.setSuperClass(parameterizedDeclaringClass.environment.getResolvedType(TypeConstants.JAVA_LANG_OBJECT, null));
 							int interfaceCount = substitutedInterfaces.length;
 							System.arraycopy(substitutedInterfaces, 0, substitutedInterfaces = new ReferenceBinding[interfaceCount+1], 1, interfaceCount);
 							substitutedInterfaces[0] = (ReferenceBinding) substitutedSuperclass;
-							substitutedVariable.superInterfaces = substitutedInterfaces;
+							substitutedVariable.setSuperInterfaces(substitutedInterfaces);
 						} else {
-							substitutedVariable.superclass = (ReferenceBinding) substitutedSuperclass; // typeVar was extending other typeVar which got substituted with interface
-							substitutedVariable.superInterfaces = substitutedInterfaces;
+							substitutedVariable.setSuperClass((ReferenceBinding) substitutedSuperclass); // typeVar was extending other typeVar which got substituted with interface
+							substitutedVariable.setSuperInterfaces(substitutedInterfaces);
 						}
 				}
 			}
@@ -230,25 +232,27 @@ public class ParameterizedMethodBinding extends MethodBinding {
 				TypeBinding substitutedSuperclass = Scope.substitute(substitution, originalVariable.superclass);
 				ReferenceBinding[] substitutedInterfaces = Scope.substitute(substitution, originalVariable.superInterfaces);
 				if (originalVariable.firstBound != null) {
-					substitutedVariable.firstBound = originalVariable.firstBound == originalVariable.superclass
+					TypeBinding firstBound;
+					firstBound = originalVariable.firstBound == originalVariable.superclass
 						? substitutedSuperclass // could be array type or interface
 						: substitutedInterfaces[0];
+					substitutedVariable.setFirstBound(firstBound);
 				}
 				switch (substitutedSuperclass.kind()) {
 					case Binding.ARRAY_TYPE :
-						substitutedVariable.superclass = environment.getResolvedType(TypeConstants.JAVA_LANG_OBJECT, null);
-						substitutedVariable.superInterfaces = substitutedInterfaces;
+						substitutedVariable.setSuperClass(environment.getResolvedType(TypeConstants.JAVA_LANG_OBJECT, null));
+						substitutedVariable.setSuperInterfaces(substitutedInterfaces);
 						break;
 					default:
 						if (substitutedSuperclass.isInterface()) {
-							substitutedVariable.superclass = environment.getResolvedType(TypeConstants.JAVA_LANG_OBJECT, null);
+							substitutedVariable.setSuperClass(environment.getResolvedType(TypeConstants.JAVA_LANG_OBJECT, null));
 							int interfaceCount = substitutedInterfaces.length;
 							System.arraycopy(substitutedInterfaces, 0, substitutedInterfaces = new ReferenceBinding[interfaceCount+1], 1, interfaceCount);
 							substitutedInterfaces[0] = (ReferenceBinding) substitutedSuperclass;
-							substitutedVariable.superInterfaces = substitutedInterfaces;
+							substitutedVariable.setSuperInterfaces(substitutedInterfaces);
 						} else {
-							substitutedVariable.superclass = (ReferenceBinding) substitutedSuperclass; // typeVar was extending other typeVar which got substituted with interface
-							substitutedVariable.superInterfaces = substitutedInterfaces;
+							substitutedVariable.setSuperClass((ReferenceBinding) substitutedSuperclass); // typeVar was extending other typeVar which got substituted with interface
+							substitutedVariable.setSuperInterfaces(substitutedInterfaces);
 						}
 				}
 			}
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
index ff9837c..98933f5 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
@@ -720,10 +720,10 @@ public abstract class Scope {
 			TypeVariableBinding typeVariable = typeParameter.binding;
 			if (typeVariable == null) return false;
 
-			typeVariable.superclass = getJavaLangObject();
-			typeVariable.superInterfaces = Binding.NO_SUPERINTERFACES;
+			typeVariable.setSuperClass(getJavaLangObject());
+			typeVariable.setSuperInterfaces(Binding.NO_SUPERINTERFACES);
 			// set firstBound to the binding of the first explicit bound in parameter declaration
-			typeVariable.firstBound = null; // first bound used to compute erasure
+			typeVariable.setFirstBound(null); // first bound used to compute erasure
 		}
 		nextVariable: for (int i = 0; i < paramLength; i++) {
 			TypeParameter typeParameter = typeParameters[i];
@@ -782,12 +782,12 @@ public abstract class Scope {
 					}
 					ReferenceBinding superRefType = (ReferenceBinding) superType;
 					if (!superType.isInterface()) {
-						typeVariable.superclass = superRefType;
+						typeVariable.setSuperClass(superRefType);
 					} else {
-						typeVariable.superInterfaces = new ReferenceBinding[] {superRefType};
+						typeVariable.setSuperInterfaces(new ReferenceBinding[] {superRefType});
 					}
 					typeVariable.tagBits |= superType.tagBits & TagBits.ContainsNestedTypeReferences;
-					typeVariable.firstBound = superRefType; // first bound used to compute erasure
+					typeVariable.setFirstBound(superRefType); // first bound used to compute erasure
 				}
 			}
 			TypeReference[] boundRefs = typeParameter.bounds;
@@ -845,7 +845,7 @@ public abstract class Scope {
 							}
 						}
 						int size = typeVariable.superInterfaces.length;
-						System.arraycopy(typeVariable.superInterfaces, 0, typeVariable.superInterfaces = new ReferenceBinding[size + 1], 0, size);
+						System.arraycopy(typeVariable.superInterfaces, 0, typeVariable.setSuperInterfaces(new ReferenceBinding[size + 1]), 0, size);
 						typeVariable.superInterfaces[size] = superRefType;
 					}
 				}
@@ -4416,25 +4416,27 @@ public abstract class Scope {
 					TypeBinding substitutedSuperclass = Scope.substitute(substitution, originalVariable.superclass);
 					ReferenceBinding[] substitutedInterfaces = Scope.substitute(substitution, originalVariable.superInterfaces);
 					if (originalVariable.firstBound != null) {
-						substitutedVariable.firstBound = originalVariable.firstBound == originalVariable.superclass
+						TypeBinding firstBound;
+						firstBound = originalVariable.firstBound == originalVariable.superclass
 								? substitutedSuperclass // could be array type or interface
 										: substitutedInterfaces[0];
+						substitutedVariable.setFirstBound(firstBound);
 					}
 					switch (substitutedSuperclass.kind()) {
 						case Binding.ARRAY_TYPE :
-							substitutedVariable.superclass = environment.getResolvedType(TypeConstants.JAVA_LANG_OBJECT, null);
-							substitutedVariable.superInterfaces = substitutedInterfaces;
+							substitutedVariable.setSuperClass(environment.getResolvedType(TypeConstants.JAVA_LANG_OBJECT, null));
+							substitutedVariable.setSuperInterfaces(substitutedInterfaces);
 							break;
 						default:
 							if (substitutedSuperclass.isInterface()) {
-								substitutedVariable.superclass = environment.getResolvedType(TypeConstants.JAVA_LANG_OBJECT, null);
+								substitutedVariable.setSuperClass(environment.getResolvedType(TypeConstants.JAVA_LANG_OBJECT, null));
 								int interfaceCount = substitutedInterfaces.length;
 								System.arraycopy(substitutedInterfaces, 0, substitutedInterfaces = new ReferenceBinding[interfaceCount+1], 1, interfaceCount);
 								substitutedInterfaces[0] = (ReferenceBinding) substitutedSuperclass;
-								substitutedVariable.superInterfaces = substitutedInterfaces;
+								substitutedVariable.setSuperInterfaces(substitutedInterfaces);
 							} else {
-								substitutedVariable.superclass = (ReferenceBinding) substitutedSuperclass; // typeVar was extending other typeVar which got substituted with interface
-								substitutedVariable.superInterfaces = substitutedInterfaces;
+								substitutedVariable.setSuperClass((ReferenceBinding) substitutedSuperclass); // typeVar was extending other typeVar which got substituted with interface
+								substitutedVariable.setSuperInterfaces(substitutedInterfaces);
 							}
 					}
 				}
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TagBits.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TagBits.java
index 0fd59a7..d2632d7 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TagBits.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TagBits.java
@@ -178,4 +178,5 @@ public interface TagBits {
 
 	// set when type contains non-private constructor(s)
 	long HasNonPrivateConstructor = ASTNode.Bit61L;
+	long HasAnnotatedVariants = ASTNode.Bit61L; // TVB only, which cannot have constructors, so no clash with HasNonPrivateConstructor.
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java
index 9b82212..eb446e3 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java
@@ -93,7 +93,6 @@ public TypeBinding() {
 public TypeBinding(TypeBinding prototype) {  // faithfully copy all instance state - clone operation should specialize/override suitably.
 	this.id = prototype.id;
 	this.tagBits = prototype.tagBits;
-	this.typeAnnotations = prototype.typeAnnotations;
 }
 
 /**
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeSystem.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeSystem.java
index 142f5d0..3acbaa1 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeSystem.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeSystem.java
@@ -56,4 +56,9 @@ public abstract class TypeSystem {
 	public abstract void updateCaches(UnresolvedReferenceBinding unresolvedType, ReferenceBinding resolvedType);
 
 	public abstract TypeBinding getUnannotatedType(TypeBinding type);
+
+	// Given a type, return all its variously annotated versions.
+	public TypeBinding[] getAnnotatedTypes(TypeBinding type) {
+		return Binding.NO_TYPES;
+	}
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java
index fbf8944..9e3501a 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java
@@ -43,11 +43,11 @@ public class TypeVariableBinding extends ReferenceBinding {
 	 * Denote the first explicit (binding) bound amongst the supertypes (from declaration in source)
 	 * If no superclass was specified, then it denotes the first superinterface, or null if none was specified.
 	 */
-	public TypeBinding firstBound;
+	public TypeBinding firstBound;             // For non-captures, must not be modified directly, use setter !
 
 	// actual resolved variable supertypes (if no superclass bound, then associated to Object)
-	public ReferenceBinding superclass;
-	public ReferenceBinding[] superInterfaces;
+	public ReferenceBinding superclass;        // For non-captures, must not be modified directly, use setter !
+	public ReferenceBinding[] superInterfaces; // For non-captures, must not be modified directly, use setter !
 	public char[] genericTypeSignature;
 	LookupEnvironment environment;
 	
@@ -70,6 +70,8 @@ public class TypeVariableBinding extends ReferenceBinding {
 		this.superInterfaces = prototype.superInterfaces;
 		this.genericTypeSignature = prototype.genericTypeSignature;
 		this.environment = prototype.environment;
+		prototype.tagBits |= TagBits.HasAnnotatedVariants;
+		this.tagBits &= ~TagBits.HasAnnotatedVariants;
 	}
 
 	/**
@@ -509,7 +511,7 @@ public class TypeVariableBinding extends ReferenceBinding {
 //					System.err.println("TODO(stephan): report proper error: conflict binary TypeVariable vs. first bound");
 				}
 			}
-			this.superclass = resolveType;
+			this.setSuperClass(resolveType);
 		}
 		ReferenceBinding[] interfaces = this.superInterfaces;
 		int length;
@@ -532,14 +534,29 @@ public class TypeVariableBinding extends ReferenceBinding {
 		// refresh the firstBound in case it changed
 		if (this.firstBound != null) {
 			if (this.firstBound == oldSuperclass) {
-				this.firstBound = this.superclass;
+				this.setFirstBound(this.superclass);
 			} else if (this.firstBound == oldFirstInterface) {
-				this.firstBound = interfaces[0];
+				this.setFirstBound(interfaces[0]);
 			}
 		}
 		this.modifiers &= ~ExtraCompilerModifiers.AccUnresolved;
 		return this;
 	}
+	
+	// TVB should inherit annotations from declaration site.
+	public void setTypeAnnotations(AnnotationBinding[] annotations, boolean evalNullAnnotations) {
+		TypeVariableBinding prototype = (TypeVariableBinding) this.environment.getUnannotatedType(this); // also exposes original TVB to type system.
+		if (prototype != this) {
+			AnnotationBinding [] declarationAnnotations = prototype.getTypeAnnotations();
+			final int declarationAnnotationsLength = declarationAnnotations == null ? 0 : declarationAnnotations.length;
+			if (declarationAnnotationsLength > 0) {
+				final int annotationsLength = annotations.length;
+				System.arraycopy(annotations, 0, annotations = new AnnotationBinding[annotationsLength + declarationAnnotationsLength], 0, annotationsLength);
+				System.arraycopy(declarationAnnotations, 0, annotations, annotationsLength, declarationAnnotationsLength);
+			}
+		}
+		super.setTypeAnnotations(annotations, evalNullAnnotations);
+	}
 	/**
      * @see org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding#shortReadableName()
      */
@@ -644,4 +661,47 @@ public class TypeVariableBinding extends ReferenceBinding {
 		}
 		return null;
 	}
+
+	/* An annotated type variable use differs from its declaration exactly in its annotations and in nothing else.
+	   Propagate writes to all annotated variants so the clones evolve along.
+	*/
+	public TypeBinding setFirstBound(TypeBinding firstBound) {
+		this.firstBound = firstBound;
+		if ((this.tagBits & TagBits.HasAnnotatedVariants) != 0) {
+			TypeBinding [] annotatedTypes = this.environment.getAnnotatedTypes(this);
+			for (int i = 0, length = annotatedTypes == null ? 0 : annotatedTypes.length; i < length; i++) {
+				TypeVariableBinding annotatedType = (TypeVariableBinding) annotatedTypes[i];
+				annotatedType.firstBound = firstBound;
+			}
+		}
+		return firstBound;
+	}
+	/* An annotated type variable use differs from its declaration exactly in its annotations and in nothing else.
+	   Propagate writes to all annotated variants so the clones evolve along.
+	*/
+	public ReferenceBinding setSuperClass(ReferenceBinding superclass) {
+		this.superclass = superclass;
+		if ((this.tagBits & TagBits.HasAnnotatedVariants) != 0) {
+			TypeBinding [] annotatedTypes = this.environment.getAnnotatedTypes(this);
+			for (int i = 0, length = annotatedTypes == null ? 0 : annotatedTypes.length; i < length; i++) {
+				TypeVariableBinding annotatedType = (TypeVariableBinding) annotatedTypes[i];
+				annotatedType.superclass = superclass;
+			}
+		}
+		return superclass;
+	}
+	/* An annotated type variable use differs from its declaration exactly in its annotations and in nothing else.
+	   Propagate writes to all annotated variants so the clones evolve along.
+	*/
+	public ReferenceBinding [] setSuperInterfaces(ReferenceBinding[] superInterfaces) {
+		this.superInterfaces = superInterfaces;
+		if ((this.tagBits & TagBits.HasAnnotatedVariants) != 0) {
+			TypeBinding [] annotatedTypes = this.environment.getAnnotatedTypes(this);
+			for (int i = 0, length = annotatedTypes == null ? 0 : annotatedTypes.length; i < length; i++) {
+				TypeVariableBinding annotatedType = (TypeVariableBinding) annotatedTypes[i];
+				annotatedType.superInterfaces = superInterfaces;
+			}
+		}
+		return superInterfaces;
+	}
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/UnannotatedTypeSystem.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/UnannotatedTypeSystem.java
index 7397dc8..ca604f6 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/UnannotatedTypeSystem.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/UnannotatedTypeSystem.java
@@ -50,7 +50,7 @@ public class UnannotatedTypeSystem extends TypeSystem {
 
 	public TypeBinding getUnannotatedType(TypeBinding type) {
 		if (type.id == TypeIds.NoId) {
-			if (type.hasTypeAnnotations() && !type.isTypeVariable())
+			if (type.hasTypeAnnotations())
 				throw new IllegalStateException();
 			int typesLength = this.types.length;
 			if (this.typeid == typesLength)

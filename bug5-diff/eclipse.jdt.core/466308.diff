commit 93613529f4763965d02155d2aaa1cabf71be7897
Author: Stephan Herrmann <stephan.herrmann@berlin.de>
Date:   Tue May 5 02:12:56 2015 +0200

    Bug 466308 - [hovering] Javadoc header for parameter is wrong with
    annotation-based null analysis
    
    Change-Id: Ib4d5081563ab5d44bb386879b4748020cf3133bc
    Signed-off-by: Stephan Herrmann <stephan.herrmann@berlin.de>

2	2	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterBugsTest.java
41	4	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTModelBridgeTests.java
41	3	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalVariableBinding.java
4	13	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableBinding.java
17	2	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/LocalVariable.java
13	3	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyParser.java
28	9	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyResolver.java
4	2	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/KeyKind.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterBugsTest.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterBugsTest.java
index 02ae531..8686d34 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterBugsTest.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterBugsTest.java
@@ -709,7 +709,7 @@ public void testBug215759a() throws CoreException {
 			"}\n" +
 			"\n" +
 			"===== Details =====\n" +
-			"1:SIMPLE_NAME,[66,6],,,[VARIABLE,Lp/X;.foo(Ljava/lang/String;)Ljava/lang/String;#string,]\n" +
+			"1:SIMPLE_NAME,[66,6],,,[VARIABLE,Lp/X;.foo(Ljava/lang/String;)Ljava/lang/String;#string#0#0,]\n" +
 			"2:SIMPLE_TYPE,[97,6],,,[TYPE,Ljava/lang/String;,]\n" +
 			"2:SIMPLE_NAME,[97,6],,,[TYPE,Ljava/lang/String;,]\n" +
 			"3:PARENTHESIZED_EXPRESSION,[134,18],,,[N/A]\n" +
@@ -768,7 +768,7 @@ public void testBug215759b() throws CoreException {
 			"}\n" +
 			"\n" +
 			"===== Details =====\n" +
-			"1:SIMPLE_NAME,[66,6],,,[VARIABLE,Lp/X;.foo(Ljava/lang/String;)Ljava/lang/String;#string,]\n" +
+			"1:SIMPLE_NAME,[66,6],,,[VARIABLE,Lp/X;.foo(Ljava/lang/String;)Ljava/lang/String;#string#0#0,]\n" +
 			"2:SIMPLE_TYPE,[97,6],,,[TYPE,Ljava/lang/String;,]\n" +
 			"2:SIMPLE_NAME,[97,6],,,[TYPE,Ljava/lang/String;,]\n" +
 			"3:PARENTHESIZED_EXPRESSION,[134,18],,,[N/A]\n" +
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTModelBridgeTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTModelBridgeTests.java
index 8ef8595..99ea9a8 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTModelBridgeTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTModelBridgeTests.java
@@ -1271,8 +1271,8 @@ public class ASTModelBridgeTests extends AbstractASTTests {
 		parser.setProject(getJavaProject("P"));
 		IBinding[] bindings = parser.createBindings(method.getParameters(), null);
 		assertBindingsEqual(
-			"LX;.foo(Ljava/lang/String;I)V#str\n" +
-			"LX;.foo(Ljava/lang/String;I)V#i",
+			"LX;.foo(Ljava/lang/String;I)V#str#0#0\n" + // occurrence 0, rank 0
+			"LX;.foo(Ljava/lang/String;I)V#i#0#1", // occurrence 0, rank 1
 			bindings);
 	}
 
@@ -1290,8 +1290,8 @@ public class ASTModelBridgeTests extends AbstractASTTests {
 		parser.setProject(getJavaProject("P"));
 		IBinding[] bindings = parser.createBindings(method.getParameters(), null);
 		assertBindingsEqual(
-			"LA;.foo(Ljava/lang/String;I)V#str\n" +
-			"LA;.foo(Ljava/lang/String;I)V#i",
+			"LA;.foo(Ljava/lang/String;I)V#str#0#0\n" + // occurrence 0, rank 0
+			"LA;.foo(Ljava/lang/String;I)V#i#0#1", // occurrence 0, rank 1
 			bindings);
 	}
 
@@ -1334,6 +1334,43 @@ public class ASTModelBridgeTests extends AbstractASTTests {
 	}
 
 	/*
+	 * Ensures that the correct IBindings are created for a given set of IJavaElement
+	 * (method parameter - binary)
+	 */
+	public void testCreateBinding28() throws Exception {
+		IJavaProject javaProject = getJavaProject("P");
+		String codeGenOption = javaProject.getOption(JavaCore.COMPILER_LOCAL_VARIABLE_ATTR, true);
+		try {
+			javaProject.setOption(JavaCore.COMPILER_LOCAL_VARIABLE_ATTR, JavaCore.DISABLED);
+			createClassFile("/P/lib", "p/A.class",
+					"package p;\n" +
+					"public class A {\n" +
+					"  public static <T> T foo(int i, boolean f) { return null; }\n" +
+					"}");
+			IType typeA = javaProject.findType("p.A");
+			
+			IJavaElement[] elems= typeA.getMethod("foo", new String[]{"I", "Z"}).getParameters();
+			ASTParser parser = ASTParser.newParser(AST.JLS8);
+			parser.setProject(javaProject);
+			IBinding[] bindings = parser.createBindings(elems, null);
+			assertBindingsEqual(
+				"Lp/A;.foo<T:Ljava/lang/Object;>(IZ)TT;#arg0#0#0\n" + 
+				"Lp/A;.foo<T:Ljava/lang/Object;>(IZ)TT;#arg1#0#1",
+				bindings);
+			IVariableBinding param1 = (IVariableBinding) bindings[0];
+			IVariableBinding param2 = (IVariableBinding) bindings[1];
+			assertBindingsEqual(
+				"I\n" +
+				"Z",
+				new IBinding[] {
+					param1.getType(),
+					param2.getType()});
+		} finally {
+			javaProject.setOption(JavaCore.COMPILER_LOCAL_VARIABLE_ATTR, codeGenOption);
+		}
+	}
+
+	/*
 	 * Ensures that the IJavaElement of an IBinding representing a field is correct.
 	 */
 	public void testField1() throws JavaModelException {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalVariableBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalVariableBinding.java
index 5cdc964..5a37625 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalVariableBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalVariableBinding.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2014 IBM Corporation and others.
+ * Copyright (c) 2000, 2015 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -13,6 +13,7 @@
  *								bug 186342 - [compiler][null] Using annotations for null checking
  *								bug 365859 - [compiler][null] distinguish warnings based on flow analysis vs. null annotations
  *								bug 331649 - [compiler][null] consider null annotations for fields
+ *								Bug 466308 - [hovering] Javadoc header for parameter is wrong with annotation-based null analysis
  *******************************************************************************/
 package org.eclipse.jdt.internal.compiler.lookup;
 
@@ -21,6 +22,7 @@ import org.eclipse.jdt.internal.compiler.ast.ASTNode;
 import org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;
 import org.eclipse.jdt.internal.compiler.ast.Annotation;
 import org.eclipse.jdt.internal.compiler.ast.FakedTrackingVariable;
+import org.eclipse.jdt.internal.compiler.ast.Initializer;
 import org.eclipse.jdt.internal.compiler.ast.LambdaExpression;
 import org.eclipse.jdt.internal.compiler.ast.LocalDeclaration;
 import org.eclipse.jdt.internal.compiler.ast.TypeDeclaration;
@@ -76,7 +78,14 @@ public class LocalVariableBinding extends VariableBinding {
 
 	/*
 	 * declaringUniqueKey # scopeIndex(0-based) # varName [# occurrenceCount(0-based)]
-	 * p.X { void foo() { int local; int local;} } --> Lp/X;.foo()V#1#local#1
+	 *    p.X { void foo() { int local; int local;} } --> Lp/X;.foo()V#1#local#1
+	 *
+	 * for method parameter, we have no scopeIndex, but instead we append the parameter rank:
+	 * declaringUniqueKey # varName # occurrenceCount(always 0) # argument rank (0-based)
+	 * with parameter names:
+	 *    p.X { void foo(int i0, int i1) { } } --> Lp/X;.foo()V#i1#0#1
+	 * without parameter names (see org.eclipse.jdt.internal.core.util.BindingKeyResolver.SyntheticLocalVariableBinding):
+	 *    p.X { void foo(int i0, int i1) { } } --> Lp/X;.foo()V#arg1#0#1
 	 */
 	public char[] computeUniqueKey(boolean isLeaf) {
 		StringBuffer buffer = new StringBuffer();
@@ -123,11 +132,26 @@ public class LocalVariableBinding extends VariableBinding {
 		buffer.append('#');
 		buffer.append(this.name);
 
+		boolean addParameterRank = this.isParameter() && this.declaringScope != null;
 		// add occurence count to avoid same key for duplicate variables
 		// (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=149590)
-		if (occurenceCount > 0) {
+		if (occurenceCount > 0 || addParameterRank) {
 			buffer.append('#');
 			buffer.append(occurenceCount);
+			if (addParameterRank) {
+				int pos = -1;
+				LocalVariableBinding[] params = this.declaringScope.locals;
+				for (int i = 0; i < params.length; i++) {
+					if (params[i] == this) {
+						pos = i;
+						break;
+					}
+				}
+				if (pos > -1) {
+					buffer.append('#');
+					buffer.append(pos);
+				}
+			}
 		}
 
 		int length = buffer.length();
@@ -270,4 +294,18 @@ public class LocalVariableBinding extends VariableBinding {
 	public boolean isCatchParameter() {
 		return false;
 	}
+
+	public MethodBinding getEnclosingMethod() {
+		BlockScope blockScope = this.declaringScope;
+		if (blockScope != null) {
+			ReferenceContext referenceContext = blockScope.referenceContext();
+			if (referenceContext instanceof Initializer) {
+				return null;
+			}
+			if (referenceContext instanceof AbstractMethodDeclaration) {
+				return ((AbstractMethodDeclaration) referenceContext).binding;
+			}
+		}
+		return null;
+	}
 }
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableBinding.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableBinding.java
index 7e27571..d6e5390 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableBinding.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableBinding.java
@@ -9,6 +9,7 @@
  *     IBM Corporation - initial API and implementation
  *     Stephan Herrmann - Contribution for
  *								Bug 429813 - [1.8][dom ast] IMethodBinding#getJavaElement() should return IMethod for lambda
+ *								Bug 466308 - [hovering] Javadoc header for parameter is wrong with annotation-based null analysis
  *******************************************************************************/
 
 package org.eclipse.jdt.core.dom;
@@ -16,13 +17,10 @@ package org.eclipse.jdt.core.dom;
 import org.eclipse.jdt.core.IJavaElement;
 import org.eclipse.jdt.core.JavaCore;
 import org.eclipse.jdt.core.util.IModifierConstants;
-import org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;
-import org.eclipse.jdt.internal.compiler.ast.Initializer;
 import org.eclipse.jdt.internal.compiler.ast.TypeDeclaration;
 import org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants;
 import org.eclipse.jdt.internal.compiler.impl.Constant;
 import org.eclipse.jdt.internal.compiler.impl.ReferenceContext;
-import org.eclipse.jdt.internal.compiler.lookup.BlockScope;
 import org.eclipse.jdt.internal.compiler.lookup.FieldBinding;
 import org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding;
 import org.eclipse.jdt.internal.compiler.lookup.TagBits;
@@ -135,16 +133,9 @@ class VariableBinding implements IVariableBinding {
 				if (node == null) {
 					if (this.binding instanceof LocalVariableBinding) {
 						LocalVariableBinding localVariableBinding = (LocalVariableBinding) this.binding;
-						BlockScope blockScope = localVariableBinding.declaringScope;
-						if (blockScope != null) {
-							ReferenceContext referenceContext = blockScope.referenceContext();
-							if (referenceContext instanceof Initializer) {
-								return null;
-							}
-							if (referenceContext instanceof AbstractMethodDeclaration) {
-								return this.resolver.getMethodBinding(((AbstractMethodDeclaration) referenceContext).binding);
-							}
-						}
+						org.eclipse.jdt.internal.compiler.lookup.MethodBinding enclosingMethod = localVariableBinding.getEnclosingMethod();
+						if (enclosingMethod != null)
+							return this.resolver.getMethodBinding(enclosingMethod);
 					}
 					return null;
 				}
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/LocalVariable.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/LocalVariable.java
index f05213b..81771eb 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/LocalVariable.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/LocalVariable.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2013 IBM Corporation and others.
+ * Copyright (c) 2000, 2015 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -7,6 +7,8 @@
  *
  * Contributors:
  *     IBM Corporation - initial API and implementation
+ *     Stephan Herrmann - Contribution for
+ *								Bug 466308 - [hovering] Javadoc header for parameter is wrong with annotation-based null analysis
  *******************************************************************************/
 package org.eclipse.jdt.internal.core;
 
@@ -464,9 +466,22 @@ public class LocalVariable extends SourceRefElement implements ILocalVariable {
 	 */
 	public String getKey(boolean forceOpen) throws JavaModelException {
 		if (this.parent.getElementType() == IJavaElement.METHOD) {
-			StringBuilder buf = new StringBuilder(((IMethod)this.parent).getKey());
+			StringBuilder buf = new StringBuilder();
+			if (this.parent instanceof BinaryMethod)
+				buf.append(((BinaryMethod) this.parent).getKey(forceOpen));
+			else
+				buf.append(((IMethod)this.parent).getKey());
 			buf.append('#');
 			buf.append(this.name);
+			if (this.isParameter) {
+				ILocalVariable[] parameters = ((IMethod) this.parent).getParameters();
+				for (int i = 0; i < parameters.length; i++) {
+					if (this.equals(parameters[i])) {
+						buf.append("#0#").append(i); // always first occurrence, followed by parameter rank //$NON-NLS-1$
+						break;
+					}
+				}
+			}
 			return buf.toString();
 		}
 		return null;
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyParser.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyParser.java
index d2e96cb..a1f061c 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyParser.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyParser.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2005, 2014 IBM Corporation and others.
+ * Copyright (c) 2005, 2015 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -9,6 +9,7 @@
  *     IBM Corporation - initial API and implementation
  *     Stephan Herrmann - Contribution for
  *     							Bug 425183 - [1.8][inference] make CaptureBinding18 safe
+ *								Bug 466308 - [hovering] Javadoc header for parameter is wrong with annotation-based null analysis
  *******************************************************************************/
 package org.eclipse.jdt.internal.core.util;
 
@@ -515,7 +516,7 @@ public class BindingKeyParser {
 		// default is to do nothing
 	}
 
-	public void consumeLocalVar(char[] varName, int occurrenceCount) {
+	public void consumeLocalVar(char[] varName, int occurrenceCount, int argumentPosition) {
 		// default is to do nothing
 	}
 
@@ -823,7 +824,16 @@ public class BindingKeyParser {
 				char[] occurrence = this.scanner.getTokenSource();
 				occurrenceCount = Integer.parseInt(new String(occurrence));
 			}
-			consumeLocalVar(varName, occurrenceCount);
+			int position = -1;
+			if (this.scanner.isAtLocalVariableStart()) {
+				if (this.scanner.nextToken() != Scanner.LOCAL_VAR) {
+					malformedKey();
+					return;
+				}
+				char[] posToken = this.scanner.getTokenSource();
+				position = Integer.parseInt(new String(posToken));
+			}
+			consumeLocalVar(varName, occurrenceCount, position);
 		}
 	}
 
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyResolver.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyResolver.java
index cd63189..b23e464 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyResolver.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyResolver.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2005, 2014 IBM Corporation and others.
+ * Copyright (c) 2005, 2015 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -9,6 +9,7 @@
  *     IBM Corporation - initial API and implementation
  *     Stephan Herrmann - Contribution for
  *     							Bug 425183 - [1.8][inference] make CaptureBinding18 safe
+ *								Bug 466308 - [hovering] Javadoc header for parameter is wrong with annotation-based null analysis
  *******************************************************************************/
 package org.eclipse.jdt.internal.core.util;
 
@@ -61,11 +62,13 @@ public class BindingKeyResolver extends BindingKeyParser {
 	private final class SyntheticLocalVariableBinding extends LocalVariableBinding {
 
 		private final MethodBinding enclosingMethod;
+		private int paramPosition;
 		private char[] key;
 
-		SyntheticLocalVariableBinding(char[] name, TypeBinding type, MethodBinding enclosingMethod) {
+		SyntheticLocalVariableBinding(char[] name, TypeBinding type, MethodBinding enclosingMethod, int paramPosition) {
 			super(name, type, 0, true);
 			this.enclosingMethod = enclosingMethod;
+			this.paramPosition = paramPosition;
 		}
 
 		@Override
@@ -75,6 +78,8 @@ public class BindingKeyResolver extends BindingKeyParser {
 				StringBuilder buf = new StringBuilder().append(this.enclosingMethod.computeUniqueKey());
 				buf.append('#');
 				buf.append(this.name);
+				buf.append("#0#"); //$NON-NLS-1$
+				buf.append(this.paramPosition);
 				int length = buf.length();
 				this.key = new char[length];
 				buf.getChars(0, length, this.key, 0);
@@ -83,6 +88,11 @@ public class BindingKeyResolver extends BindingKeyParser {
 		}
 		
 		@Override
+		public MethodBinding getEnclosingMethod() {
+			return this.enclosingMethod;
+		}
+
+		@Override
 		public int hashCode() {
 			return CharOperation.hashCode(computeUniqueKey());
 		}
@@ -325,7 +335,7 @@ public class BindingKeyResolver extends BindingKeyParser {
  			}
 	}
 
-	public void consumeLocalVar(char[] varName, int occurrenceCount) {
+	public void consumeLocalVar(char[] varName, int occurrenceCount, int argumentPosition) {
 		if (this.scope == null) {
 			if (this.methodBinding == null)
 				return;
@@ -334,14 +344,23 @@ public class BindingKeyResolver extends BindingKeyParser {
 				this.scope = sourceMethod.scope;
 			} else {
 				char[][] parameterNames = this.methodBinding.parameterNames;
-				for (int i = 0; i < parameterNames.length; i++) {
-					if (CharOperation.equals(parameterNames[i], varName)) {
-						// we don't have a compiler binding for this argument, but we can craft one:
-						this.compilerBinding = new SyntheticLocalVariableBinding(varName, this.methodBinding.parameters[i], this.methodBinding);
-						this.methodBinding = null;
-						return;
+				int paramPosition = -1;
+				if (parameterNames.length == 0) {
+					paramPosition = argumentPosition;
+				} else {
+					for (int i = 0; i < parameterNames.length; i++) {
+						if (CharOperation.equals(parameterNames[i], varName)) {
+							paramPosition = i;
+							break;
+						}
 					}
 				}
+				if (paramPosition != -1) {
+					// we don't have a compiler binding for this argument, but we can craft one:
+					this.compilerBinding = new SyntheticLocalVariableBinding(varName, this.methodBinding.parameters[paramPosition], this.methodBinding, paramPosition);
+					this.methodBinding = null;
+					return;
+				}
 			}
 		}
 		if (this.scope != null) {
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/KeyKind.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/KeyKind.java
index 1d755e2..d72fd01 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/KeyKind.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/KeyKind.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2005, 2008 IBM Corporation and others.
+ * Copyright (c) 2005, 2015 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -7,6 +7,8 @@
  *
  * Contributors:
  *     IBM Corporation - initial API and implementation
+ *     Stephan Herrmann - Contribution for
+ *								Bug 466308 - [hovering] Javadoc header for parameter is wrong with annotation-based null analysis
  *******************************************************************************/
 package org.eclipse.jdt.internal.core.util;
 
@@ -53,7 +55,7 @@ public class KeyKind extends BindingKeyParser {
 		this.flags |= F_LOCAL;
 	}
 
-	public void consumeLocalVar(char[] varName, int occurrenceCount) {
+	public void consumeLocalVar(char[] varName, int occurrenceCount, int argumentPosition) {
 		this.flags |= F_LOCAL_VAR;
 	}
 

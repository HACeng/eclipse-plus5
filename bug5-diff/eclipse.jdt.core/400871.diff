commit 3aabc067e22084d59ef0ea59b0d58e1085dede4c
Author: ssankaran <srikanth_sankaran@in.ibm.com>
Date:   Mon Nov 18 15:22:56 2013 +0530

    [1.8] More progress on Bug 400871 - [1.8][compiler] Overhaul overload
    resolution to reconcile with JLS8 15.12.2

6	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
103	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/OverloadResolutionTest8.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java
1	8	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java
32	15	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
index bf057c1..ac9610f 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
@@ -5147,6 +5147,12 @@ this.runNegativeTest(
 				"----------\n" + 
 				"3. ERROR in X.java (at line 7)\n" + 
 				"	new X().foo(()->{});\n" + 
+				"	        ^^^\n" + 
+				"The method foo(I<T>) in the type X is not applicable for the arguments (() -> {\n" + 
+				"})\n" + 
+				"----------\n" + 
+				"4. ERROR in X.java (at line 7)\n" + 
+				"	new X().foo(()->{});\n" + 
 				"	            ^^^^^^\n" + 
 				"The target type of this expression is not a well formed parameterized type due to bound(s) mismatch\n" + 
 				"----------\n");
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/OverloadResolutionTest8.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/OverloadResolutionTest8.java
index 5cc2611..45326fc 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/OverloadResolutionTest8.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/OverloadResolutionTest8.java
@@ -398,4 +398,107 @@ public void test013() {
 			},
 			"foo(I)");
 }
+public void test014() {
+	this.runConformTest(
+			new String[] {
+				"X.java",
+				"interface I {\n" +
+				"	Integer foo();\n" +
+				"}\n" +
+				"interface J {\n" +
+				"	int foo();\n" +
+				"}\n" +
+				"public class X {\n" +
+				" \n" +
+				"	static void foo(I i) {\n" +
+				"		System.out.println(\"foo(I)\");\n" +
+				"	}\n" +
+				"	\n" +
+				"	static void foo(J j) {\n" +
+				"		System.out.println(\"foo(J)\");\n" +
+				"	}\n" +
+				"	\n" +
+				"	public static void main(String[] args) {\n" +
+				"		foo(()-> new Integer(10));\n" +
+				"	}\n" +
+				"}\n",
+			},
+			"foo(I)");
+}
+public void test015() {
+	this.runConformTest(
+			new String[] {
+				"X.java",
+				"interface J {\n" +
+				"	int foo();\n" +
+				"}\n" +
+				"interface I {\n" +
+				"	Integer foo();\n" +
+				"}\n" +
+				"public class X {\n" +
+				" \n" +
+				"	static void foo(I i) {\n" +
+				"		System.out.println(\"foo(I)\");\n" +
+				"	}\n" +
+				"	\n" +
+				"	static void foo(J j) {\n" +
+				"		System.out.println(\"foo(J)\");\n" +
+				"	}\n" +
+				"	\n" +
+				"	public static void main(String[] args) {\n" +
+				"		foo(()-> new Integer(10));\n" +
+				"	}\n" +
+				"}\n",
+			},
+			"foo(I)");
+}
+public void test016() {
+	this.runConformTest(
+			new String[] {
+				"X.java",
+				"interface O {\n" +
+				"	Object foo();\n" +
+				"}\n" +
+				"interface S {\n" +
+				"	String foo();\n" +
+				"}\n" +
+				"interface I {\n" +
+				"	O foo();\n" +
+				"}\n" +
+				"interface J {\n" +
+				"	S foo();\n" +
+				"}\n" +
+				"public class X {\n" +
+				"	static void foo(I i) {\n" +
+				"		System.out.println(\"foo(I)\");\n" +
+				"	}\n" +
+				"	static void foo(J j) {\n" +
+				"		System.out.println(\"foo(J)\");\n" +
+				"	}\n" +
+				"	public static void main(String[] args) {\n" +
+				"		foo(()-> ()-> \"String\");\n" +
+				"	}\n" +
+				"}\n",
+			},
+			"foo(J)");
+}
+public void test017() {
+	this.runConformTest(
+			new String[] {
+				"X.java",
+				"interface J {\n" +
+				"	int foo();\n" +
+				"}\n" +
+				"public class X {\n" +
+				"	static void foo(J j) {\n" +
+				"		System.out.println(\"foo(J)\");\n" +
+				"	}\n" +
+				"	public static void main(String[] args) {\n" +
+				"		foo(()-> new Integer(10));\n" +
+				"	}\n" +
+				"}\n",
+			},
+			"foo(J)");
+}
+
 }
\ No newline at end of file
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java
index 8ba7f33..53fc31e 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java
@@ -461,7 +461,7 @@ public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext,
 			
 			if (this.originalValueIfTrueType.kind() == Binding.POLY_TYPE || this.originalValueIfFalseType.kind() == Binding.POLY_TYPE) {
 				this.isPolyExpression = true;
-				return new PolyTypeBinding(this);
+				return this.resolvedType = new PolyTypeBinding(this);
 			}
 		} else {
 			if (this.originalValueIfTrueType.kind() == Binding.POLY_TYPE)
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java
index 971a268..f6b44aa 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java
@@ -1147,14 +1147,7 @@ public boolean sIsMoreSpecific(TypeBinding s, TypeBinding t) {
 	TypeBinding expressionType = this.resolvedType;
 	if (expressionType == null || !expressionType.isValidBinding()) // Shouldn't get here, just to play it safe
 		return false; // trigger ambiguity.
-	
-	if (s.findSuperTypeOriginatingFrom(t) != null)
-		return true;
-	
-	final boolean sIsBaseType = s.isBaseType();
-	final boolean tIsBaseType = t.isBaseType();
-	
-	return expressionType.isBaseType() ? sIsBaseType && !tIsBaseType : !sIsBaseType && tIsBaseType;
+	return s.findSuperTypeOriginatingFrom(t) != null;
 }
 
 public void tagAsEllipsisArgument() {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
index b365dce..e6e4aaa 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
@@ -143,7 +143,7 @@ public class LambdaExpression extends FunctionalExpression implements ReferenceC
 		this.enclosingScope = blockScope;
 		
 		if (this.expectedType == null && this.expressionContext == INVOCATION_CONTEXT) {
-			return new PolyTypeBinding(this);
+			return this.resolvedType = new PolyTypeBinding(this);
 		} 
 		
 		MethodScope methodScope = blockScope.methodScope();
@@ -513,9 +513,15 @@ public class LambdaExpression extends FunctionalExpression implements ReferenceC
 	
 		Expression [] returnExpressions = this.resultExpressions;
 		for (int i = 0, length = returnExpressions.length; i < length; i++) {
-			if (!returnExpressions[i].resolvedType.isCompatibleWith(sam.returnType))
-				if (sam.returnType.id != TypeIds.T_void || this.body instanceof Block)
+			if (returnExpressions[i] instanceof FunctionalExpression) { // don't want to use the resolvedType - polluted from some other overload resolution candidate
+				if (!returnExpressions[i].isCompatibleWith(sam.returnType, this.enclosingScope))
 					return false;
+			} else {
+				if (this.enclosingScope.parameterCompatibilityLevel(returnExpressions[i].resolvedType, sam.returnType) == Scope.NOT_COMPATIBLE) {
+					if (sam.returnType.id != TypeIds.T_void || this.body instanceof Block)
+						return false;
+				}
+			}
 		}
 	
 		TypeBinding [] samPararameterTypes = sam.parameters;
@@ -549,34 +555,45 @@ public class LambdaExpression extends FunctionalExpression implements ReferenceC
 		
 		if (r2.id == TypeIds.T_void)
 			return true;
-		
 		if (r1.id == TypeIds.T_void)
 			return false;
 		
 		if (r1.findSuperTypeOriginatingFrom(r2) != null)
 			return true;
+		if (r2.findSuperTypeOriginatingFrom(r1) != null)
+			return false;
 		
 		Expression [] returnExpressions = this.resultExpressions;
 		int returnExpressionsLength = returnExpressions == null ? 0 : returnExpressions.length;
 		
+		int i;
 		// r1 is a primitive type, r2 is a reference type, and each result expression is a standalone expression (15.2) of a primitive type
 		if (r1.isBaseType() && !r2.isBaseType()) {
-			for (int i = 0; i < returnExpressionsLength; i++) {
+			for (i = 0; i < returnExpressionsLength; i++) {
 				if (returnExpressions[i].isPolyExpression() || !returnExpressions[i].resolvedType.isBaseType())
 					break;
 			}
-			return true;
+			if (i == returnExpressionsLength)
+				return true;
 		}
-		if (returnExpressionsLength == 0)
-			return false;
-		
-		sSam = s.getSingleAbstractMethod(this.enclosingScope);
-		for (int i = 0; i < returnExpressionsLength; i++) {
-			Expression resultExpression = returnExpressions[i];
-			if (!resultExpression.sIsMoreSpecific(sSam.returnType, tSam.returnType))
-				return false;
+		if (!r1.isBaseType() && r2.isBaseType()) {
+			for (i = 0; i < returnExpressionsLength; i++) {
+				if (returnExpressions[i].resolvedType.isBaseType())
+					break;
+			}
+			if (i == returnExpressionsLength)
+				return true;
 		}
-		return true;
+		if (r1.isFunctionalInterface(this.enclosingScope) && r2.isFunctionalInterface(this.enclosingScope)) {
+			for (i = 0; i < returnExpressionsLength; i++) {
+				Expression resultExpression = returnExpressions[i];
+				if (!resultExpression.sIsMoreSpecific(r1, r2))
+					break;
+			}
+			if (i != 0 && i == returnExpressionsLength)
+				return true;
+		}
+		return false;
 	}
 
 	LambdaExpression copy() {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
index 267ba86..611838f 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
@@ -257,7 +257,7 @@ public class ReferenceExpression extends FunctionalExpression implements Invocat
     	}
 
     	if (this.expectedType == null && this.expressionContext == INVOCATION_CONTEXT) {
-			return new PolyTypeBinding(this);
+			return this.resolvedType = new PolyTypeBinding(this);
 		}
 		super.resolveType(scope);
 		
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java
index 4db760f..f62f79f 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java
@@ -590,7 +590,7 @@ public boolean isInterface() {
 	return false;
 }
 
-public boolean isFunctionalInterface() {
+public boolean isFunctionalInterface(Scope scope) {
 	return false;
 }
 

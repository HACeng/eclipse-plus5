commit 31b51b3c914faa25699d3f71c6d656dfc7fc54f5
Author: Jayaprakash Arthanareeswaran <jarthana@in.ibm.com>
Date:   Thu Jul 26 20:40:58 2012 +0530

    BETA_JAVA8 - Fix for bug 383913: [1.8][compiler] Compiler should reject
    explicit this parameter in disallowed context

27	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/ComplianceDiagnoseTest.java
6	1	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java
248	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java
5	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
47	6	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java
6	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NameReference.java
8	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java
8	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java
3	3	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java
26	9	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
5	3	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/ComplianceDiagnoseTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/ComplianceDiagnoseTest.java
index 1a7ef06..d165906 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/ComplianceDiagnoseTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/ComplianceDiagnoseTest.java
@@ -2881,4 +2881,31 @@ public void test0063() {
 		expectedProblemLog
 	);
 }
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=383913#c22
+public void test0064() {
+	if (this.complianceLevel >= ClassFileConstants.JDK1_8) {
+		return;
+	}
+	String[] source = new String[] {
+		"X.java",
+		"class X {\n" +
+		"	void foo(X this){}\n" +
+		"}"
+	};
+	String expectedProblemLog =
+			"----------\n" +
+			"1. ERROR in X.java (at line 2)\n" +
+			"	void foo(X this){}\n" +
+			"	           ^^^^\n" +
+			"Explicit declaration of 'this' parameter is allowed only at source level 1.8 or above\n" +
+			"----------\n";
+	runComplianceParserTest(
+			source,
+			expectedProblemLog,
+			expectedProblemLog,
+			expectedProblemLog,
+			expectedProblemLog,
+			expectedProblemLog
+		);
+}
 }
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java
index ead6892..ce5653a 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java
@@ -417,6 +417,7 @@ public void test011_problem_categories() {
 		expectedProblemAttributes.put("DiamondNotBelow17", new ProblemAttributes(CategorizedProblem.CAT_TYPE));
 		expectedProblemAttributes.put("DirectInvocationOfAbstractMethod", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));
 		expectedProblemAttributes.put("DisallowedTargetForAnnotation", new ProblemAttributes(CategorizedProblem.CAT_TYPE));
+		expectedProblemAttributes.put("DisallowedExplicitThisParameter", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));
 		expectedProblemAttributes.put("DiscouragedReference", new ProblemAttributes(CategorizedProblem.CAT_RESTRICTION));
 		expectedProblemAttributes.put("DuplicateAnnotation", new ProblemAttributes(CategorizedProblem.CAT_TYPE));
 		expectedProblemAttributes.put("DuplicateAnnotationMember", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));
@@ -528,9 +529,11 @@ public void test011_problem_categories() {
 		expectedProblemAttributes.put("IllegalPrimitiveOrArrayTypeForEnclosingInstance", new ProblemAttributes(CategorizedProblem.CAT_TYPE));
 		expectedProblemAttributes.put("IllegalQualifiedEnumConstantLabel", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));
 		expectedProblemAttributes.put("IllegalQualifiedParameterizedTypeAllocation", new ProblemAttributes(CategorizedProblem.CAT_TYPE));
+		expectedProblemAttributes.put("IllegalQualifierForExplicitThis", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));
 		expectedProblemAttributes.put("IllegalReturnNullityRedefinition", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));
 		expectedProblemAttributes.put("IllegalRedefinitionToNonNullParameter", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));
 		expectedProblemAttributes.put("IllegalStaticModifierForMemberType", new ProblemAttributes(CategorizedProblem.CAT_TYPE));
+		expectedProblemAttributes.put("IllegalTypeForExplicitThis", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));
 		expectedProblemAttributes.put("IllegalTypeVariableSuperReference", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));
 		expectedProblemAttributes.put("IllegalUnderscorePosition", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));
 		expectedProblemAttributes.put("IllegalUsageOfQualifiedTypeReference", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));
@@ -615,7 +618,6 @@ public void test011_problem_categories() {
 		expectedProblemAttributes.put("InvalidUsageOfAnnotations", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));
 		expectedProblemAttributes.put("InvalidUsageOfEnumDeclarations", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));
 		expectedProblemAttributes.put("InvalidUsageOfForeachStatements", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));
-		expectedProblemAttributes.put("InvalidUsageOfReceiverAnnotations", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));
 		expectedProblemAttributes.put("InvalidUsageOfStaticImports", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));
 		expectedProblemAttributes.put("InvalidUsageOfTypeAnnotations", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));
 		expectedProblemAttributes.put("InvalidUsageOfTypeArguments", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));
@@ -1248,9 +1250,11 @@ public void test012_compiler_problems_tuning() {
 		expectedProblemAttributes.put("IllegalPrimitiveOrArrayTypeForEnclosingInstance", SKIP);
 		expectedProblemAttributes.put("IllegalQualifiedEnumConstantLabel", SKIP);
 		expectedProblemAttributes.put("IllegalQualifiedParameterizedTypeAllocation", SKIP);
+		expectedProblemAttributes.put("IllegalQualifierForExplicitThis", SKIP);
 		expectedProblemAttributes.put("IllegalRedefinitionToNonNullParameter", new ProblemAttributes(JavaCore.COMPILER_PB_NULL_SPECIFICATION_VIOLATION));
 		expectedProblemAttributes.put("IllegalReturnNullityRedefinition", new ProblemAttributes(JavaCore.COMPILER_PB_NULL_SPECIFICATION_VIOLATION));
 		expectedProblemAttributes.put("IllegalStaticModifierForMemberType", SKIP);
+		expectedProblemAttributes.put("IllegalTypeForExplicitThis", SKIP);
 		expectedProblemAttributes.put("IllegalTypeVariableSuperReference", SKIP);
 		expectedProblemAttributes.put("IllegalUnderscorePosition", SKIP);
 		expectedProblemAttributes.put("IllegalUsageOfQualifiedTypeReference", SKIP);
@@ -1678,6 +1682,7 @@ public void test012_compiler_problems_tuning() {
 		expectedProblemAttributes.put("WildcardConstructorInvocation", SKIP);
 		expectedProblemAttributes.put("WildcardFieldAssignment", SKIP);
 		expectedProblemAttributes.put("WildcardMethodInvocation", SKIP);
+		expectedProblemAttributes.put("DisallowedExplicitThisParameter", SKIP);
 		Map constantNamesIndex = new HashMap();
 		Field[] fields = JavaCore.class.getFields();
 		for (int i = 0, length = fields.length; i < length; i++) {
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java
index 6916c03..6adb42d 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java
@@ -1033,4 +1033,252 @@ public class NegativeTypeAnnotationTest extends AbstractRegressionTest {
 					"Annot cannot be resolved to a type\n" + 
 					"----------\n");
 	}
+	// https://bugs.eclipse.org/bugs/show_bug.cgi?id=383913
+	public void test0383913() {
+		this.runNegativeTest(
+				new String[]{
+						"X.java",
+						"public class X {\n" +
+						"	public void foo(Object obj, X this) {}\n" +
+						"	public void foo(Object obj1, X this, Object obj2) {}\n" +
+						"	public void foo(Object obj, Object obj2, Object obj3, X this) {}\n" +
+						"	class Y {\n" +
+						"		Y(Object obj, Y Y.this){}\n" +
+						"	}\n" +
+						"}"
+				},
+				"----------\n" + 
+				"1. ERROR in X.java (at line 2)\n" + 
+				"	public void foo(Object obj, X this) {}\n" + 
+				"	                              ^^^^\n" + 
+				"Only the first formal parameter may be declared explicitly as 'this'\n" + 
+				"----------\n" + 
+				"2. ERROR in X.java (at line 3)\n" + 
+				"	public void foo(Object obj1, X this, Object obj2) {}\n" + 
+				"	                               ^^^^\n" + 
+				"Only the first formal parameter may be declared explicitly as 'this'\n" + 
+				"----------\n" + 
+				"3. ERROR in X.java (at line 4)\n" + 
+				"	public void foo(Object obj, Object obj2, Object obj3, X this) {}\n" + 
+				"	                                                        ^^^^\n" + 
+				"Only the first formal parameter may be declared explicitly as 'this'\n" + 
+				"----------\n" + 
+				"4. ERROR in X.java (at line 6)\n" + 
+				"	Y(Object obj, Y Y.this){}\n" + 
+				"	                  ^^^^\n" + 
+				"Only the first formal parameter may be declared explicitly as 'this'\n" + 
+				"----------\n");
+	}
+	// https://bugs.eclipse.org/bugs/show_bug.cgi?id=383913
+	public void test0383913b() {
+		this.runNegativeTest(
+				new String[] {
+						"Outer.java",
+						"public class Outer {\n" +
+						"    Outer(Outer Outer.this) {}\n" +
+						"    Outer(Outer this, int i) {}\n" +
+						"    class Inner<K,V> {\n" +
+						"        class InnerMost<T> {\n" +
+						"            InnerMost(Outer.Inner this) {}\n" +
+						"            InnerMost(Outer.Inner Outer.Inner.this, int i, float f) {}\n" +
+						"            InnerMost(Outer Outer.this, float f) {}\n" +
+						"            InnerMost(Outer.Inner<K,V>.InnerMost<T> Outer.Inner.InnerMost.this) {}\n" +
+						"            InnerMost(Inner<K,V> Outer.Inner.InnerMost.this, int i) {}\n" +
+						"            InnerMost(Outer.Inner<K, V> this, float f) {}\n" +
+						"            InnerMost(Outer.Inner<K,V> Inner.this, long l) {}\n" +
+						"        }\n" +
+						"    }\n" +
+						"}\n"},
+						"----------\n" + 
+						"1. ERROR in Outer.java (at line 2)\n" + 
+						"	Outer(Outer Outer.this) {}\n" + 
+						"	                  ^^^^\n" + 
+						"Explicit 'this' parameter is allowed only in instance methods of non-anonymous classes and inner class constructors\n" + 
+						"----------\n" + 
+						"2. ERROR in Outer.java (at line 3)\n" + 
+						"	Outer(Outer this, int i) {}\n" + 
+						"	            ^^^^\n" + 
+						"Explicit 'this' parameter is allowed only in instance methods of non-anonymous classes and inner class constructors\n" + 
+						"----------\n" + 
+						"3. WARNING in Outer.java (at line 6)\n" + 
+						"	InnerMost(Outer.Inner this) {}\n" + 
+						"	          ^^^^^^^^^^^\n" + 
+						"Outer.Inner is a raw type. References to generic type Outer.Inner<K,V> should be parameterized\n" + 
+						"----------\n" + 
+						"4. ERROR in Outer.java (at line 6)\n" + 
+						"	InnerMost(Outer.Inner this) {}\n" + 
+						"	          ^^^^^^^^^^^\n" + 
+						"The declared type of the explicit 'this' parameter is expected to be Outer.Inner<K,V>\n" + 
+						"----------\n" + 
+						"5. ERROR in Outer.java (at line 6)\n" + 
+						"	InnerMost(Outer.Inner this) {}\n" + 
+						"	                      ^^^^\n" + 
+						"The explicit 'this' parameter is expected to be qualified with Outer.Inner\n" + 
+						"----------\n" + 
+						"6. WARNING in Outer.java (at line 7)\n" + 
+						"	InnerMost(Outer.Inner Outer.Inner.this, int i, float f) {}\n" + 
+						"	          ^^^^^^^^^^^\n" + 
+						"Outer.Inner is a raw type. References to generic type Outer.Inner<K,V> should be parameterized\n" + 
+						"----------\n" + 
+						"7. ERROR in Outer.java (at line 7)\n" + 
+						"	InnerMost(Outer.Inner Outer.Inner.this, int i, float f) {}\n" + 
+						"	          ^^^^^^^^^^^\n" + 
+						"The declared type of the explicit 'this' parameter is expected to be Outer.Inner<K,V>\n" + 
+						"----------\n" + 
+						"8. ERROR in Outer.java (at line 8)\n" + 
+						"	InnerMost(Outer Outer.this, float f) {}\n" + 
+						"	          ^^^^^\n" + 
+						"The declared type of the explicit 'this' parameter is expected to be Outer.Inner<K,V>\n" + 
+						"----------\n" + 
+						"9. ERROR in Outer.java (at line 8)\n" + 
+						"	InnerMost(Outer Outer.this, float f) {}\n" + 
+						"	                      ^^^^\n" + 
+						"The explicit 'this' parameter is expected to be qualified with Outer.Inner\n" + 
+						"----------\n" + 
+						"10. ERROR in Outer.java (at line 9)\n" + 
+						"	InnerMost(Outer.Inner<K,V>.InnerMost<T> Outer.Inner.InnerMost.this) {}\n" + 
+						"	          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
+						"The declared type of the explicit 'this' parameter is expected to be Outer.Inner<K,V>\n" + 
+						"----------\n" + 
+						"11. ERROR in Outer.java (at line 9)\n" + 
+						"	InnerMost(Outer.Inner<K,V>.InnerMost<T> Outer.Inner.InnerMost.this) {}\n" + 
+						"	                                                              ^^^^\n" + 
+						"The explicit 'this' parameter is expected to be qualified with Outer.Inner\n" + 
+						"----------\n" + 
+						"12. ERROR in Outer.java (at line 10)\n" + 
+						"	InnerMost(Inner<K,V> Outer.Inner.InnerMost.this, int i) {}\n" + 
+						"	                                           ^^^^\n" + 
+						"The explicit 'this' parameter is expected to be qualified with Outer.Inner\n" + 
+						"----------\n" + 
+						"13. ERROR in Outer.java (at line 11)\n" + 
+						"	InnerMost(Outer.Inner<K, V> this, float f) {}\n" + 
+						"	                            ^^^^\n" + 
+						"The explicit 'this' parameter is expected to be qualified with Outer.Inner\n" + 
+						"----------\n");
+	}
+	// https://bugs.eclipse.org/bugs/show_bug.cgi?id=383913
+	public void test0383913c() {
+		this.runNegativeTest(
+				new String[] {
+						"Outer.java",
+						"public class Outer {\n" +
+						"    class Inner<K,V> {\n" +
+						"        class InnerMost<T> {\n" +
+						"            public void foo(Outer Outer.this) {}\n" +
+						"            public void foo(Inner<K,V> Inner.this, int i) {}\n" +
+						"            public void foo(InnerMost this) {}\n" +
+						"            public void foo(Inner.InnerMost<T> this, Object obj) {}\n" +
+						"            public void foo(InnerMost<T> this, int i) {}\n" +
+						"            public void foo(Inner<K,V>.InnerMost<T> this, long l) {}\n" +
+						"            public void foo(Outer.Inner<K,V>.InnerMost<T> this, float f) {}\n" +
+						"            public void foo(InnerMost<T> Outer.Inner.InnerMost.this, int i, float f) {}\n" +
+						"        }\n" +
+						"    }\n" +
+						"}\n"},
+						"----------\n" + 
+						"1. ERROR in Outer.java (at line 4)\n" + 
+						"	public void foo(Outer Outer.this) {}\n" + 
+						"	                ^^^^^\n" + 
+						"The declared type of the explicit 'this' parameter is expected to be Outer.Inner<K,V>.InnerMost<T>\n" + 
+						"----------\n" + 
+						"2. ERROR in Outer.java (at line 4)\n" + 
+						"	public void foo(Outer Outer.this) {}\n" + 
+						"	                            ^^^^\n" + 
+						"The explicit 'this' parameter is expected to be qualified with Outer.Inner.InnerMost\n" + 
+						"----------\n" + 
+						"3. ERROR in Outer.java (at line 5)\n" + 
+						"	public void foo(Inner<K,V> Inner.this, int i) {}\n" + 
+						"	                ^^^^^\n" + 
+						"The declared type of the explicit 'this' parameter is expected to be Outer.Inner<K,V>.InnerMost<T>\n" + 
+						"----------\n" + 
+						"4. ERROR in Outer.java (at line 5)\n" + 
+						"	public void foo(Inner<K,V> Inner.this, int i) {}\n" + 
+						"	                                 ^^^^\n" + 
+						"The explicit 'this' parameter is expected to be qualified with Outer.Inner.InnerMost\n" + 
+						"----------\n" + 
+						"5. WARNING in Outer.java (at line 6)\n" + 
+						"	public void foo(InnerMost this) {}\n" + 
+						"	                ^^^^^^^^^\n" + 
+						"Outer.Inner.InnerMost is a raw type. References to generic type Outer.Inner<K,V>.InnerMost<T> should be parameterized\n" + 
+						"----------\n" + 
+						"6. ERROR in Outer.java (at line 6)\n" + 
+						"	public void foo(InnerMost this) {}\n" + 
+						"	                ^^^^^^^^^\n" + 
+						"The declared type of the explicit 'this' parameter is expected to be Outer.Inner<K,V>.InnerMost<T>\n" + 
+						"----------\n" + 
+						"7. ERROR in Outer.java (at line 7)\n" + 
+						"	public void foo(Inner.InnerMost<T> this, Object obj) {}\n" + 
+						"	                ^^^^^^^^^^^^^^^\n" + 
+						"The member type Outer.Inner.InnerMost<T> must be qualified with a parameterized type, since it is not static\n" + 
+						"----------\n" + 
+						"8. ERROR in Outer.java (at line 7)\n" + 
+						"	public void foo(Inner.InnerMost<T> this, Object obj) {}\n" + 
+						"	                ^^^^^^^^^^^^^^^\n" + 
+						"The declared type of the explicit 'this' parameter is expected to be Outer.Inner<K,V>.InnerMost<T>\n" + 
+						"----------\n");
+	}
+	// https://bugs.eclipse.org/bugs/show_bug.cgi?id=383913
+	public void test0383913d() {
+		this.runNegativeTest(
+				new String[] {
+						"Outer.java",
+						"public class Outer {\n" +
+						"    class Inner<K,V> {\n" +
+						"		public Inner(@Missing Outer Outer.this) {}\n" +
+						"        class InnerMost<T> {\n" +
+						"            public void bar() {\n" +
+						"                new AnonymousInner() {\n" +
+						"                    public void foobar(AnonymousInner this) {}\n" +
+						"                };\n" +
+						"            }\n" +
+						"            void bar(int i) {\n" +
+						"                class Local {\n" +
+						"                    public int hashCode(Local this) { return 0; }\n" +
+						"                    public int hashCode(Outer.Local this) { return 0; }\n" +
+						"                }\n" +
+						"            }\n" +
+						"        }\n" +
+						"    }\n" +
+						"    static class StaticNested {\n" +
+						"        public StaticNested(@Marker Outer.StaticNested Outer.StaticNested.this) {}\n" +
+						"    }\n" +
+						"    public static void foo(@Marker Outer this) {}\n" +
+						"    public void foo(@Missing Outer this, int i) {}\n" +
+						"}\n" +
+						"interface AnonymousInner {\n" +
+						"    public void foobar(AnonymousInner this);\n" +
+						"}\n" +
+						"@interface Marker {}"},
+							"----------\n" + 
+							"1. ERROR in Outer.java (at line 3)\n" + 
+							"	public Inner(@Missing Outer Outer.this) {}\n" + 
+							"	              ^^^^^^^\n" + 
+							"Missing cannot be resolved to a type\n" + 
+							"----------\n" + 
+							"2. ERROR in Outer.java (at line 7)\n" + 
+							"	public void foobar(AnonymousInner this) {}\n" + 
+							"	                                  ^^^^\n" + 
+							"Explicit 'this' parameter is allowed only in instance methods of non-anonymous classes and inner class constructors\n" + 
+							"----------\n" + 
+							"3. ERROR in Outer.java (at line 13)\n" + 
+							"	public int hashCode(Outer.Local this) { return 0; }\n" + 
+							"	                    ^^^^^^^^^^^\n" + 
+							"Outer.Local cannot be resolved to a type\n" + 
+							"----------\n" + 
+							"4. ERROR in Outer.java (at line 19)\n" + 
+							"	public StaticNested(@Marker Outer.StaticNested Outer.StaticNested.this) {}\n" + 
+							"	                                                                  ^^^^\n" + 
+							"Explicit 'this' parameter is allowed only in instance methods of non-anonymous classes and inner class constructors\n" + 
+							"----------\n" + 
+							"5. ERROR in Outer.java (at line 21)\n" + 
+							"	public static void foo(@Marker Outer this) {}\n" + 
+							"	                                     ^^^^\n" + 
+							"Explicit 'this' parameter is allowed only in instance methods of non-anonymous classes and inner class constructors\n" + 
+							"----------\n" + 
+							"6. ERROR in Outer.java (at line 22)\n" + 
+							"	public void foo(@Missing Outer this, int i) {}\n" + 
+							"	                 ^^^^^^^\n" + 
+							"Missing cannot be resolved to a type\n" + 
+							"----------\n");
+	}
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
index 5df4976..5ceb5c9 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
@@ -1295,7 +1295,7 @@ void setSourceStart(int sourceStart);
 	/** @since 3.9 */
     int InvalidUsageOfTypeAnnotations = Syntax + Internal + 637;
     /** @since 3.9 */
-    int InvalidUsageOfReceiverAnnotations = Syntax + Internal + 638;
+    int DisallowedExplicitThisParameter = Syntax + Internal + 638;
     /** @since 3.9 */
     int MisplacedTypeAnnotations = Syntax + Internal + 639;
     /** @since 3.9 */
@@ -1318,6 +1318,10 @@ void setSourceStart(int sourceStart);
     int ExplicitThisParameterNotInLambda = Internal + Syntax + 648;
     /** @since 3.9 */
     int ExplicitAnnotationTargetRequired = TypeRelated + 649;
+    /** @since 3.9 */
+    int IllegalTypeForExplicitThis = Internal + Syntax + 650;
+    /** @since 3.9 */
+    int IllegalQualifierForExplicitThis = Internal + Syntax + 651;
     
 	/**
 	 * More problems in generics
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java
index 7e3201d..fd36459 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java
@@ -483,15 +483,10 @@ public abstract class AbstractMethodDeclaration
 
 		try {
 			bindArguments();
+			resolveReceiver();
 			bindThrownExceptions();
 			resolveJavadoc();
 			resolveAnnotations(this.scope, this.annotations, this.binding);
-			// jsr308
-			if (this.receiverAnnotations != null && this.scope.isStatic) {
-				int last = this.receiverAnnotations.length - 1;
-				this.scope.problemReporter().illegalReceiverAnnotations(this.receiverAnnotations[0],
-						                                                this.receiverAnnotations[last]);
-			}
 			// jsr 308
 			resolveAnnotations(this.scope, this.receiverAnnotations, new Annotation.TypeUseBinding(Binding.TYPE_USE));
 			validateNullAnnotations();
@@ -509,6 +504,52 @@ public abstract class AbstractMethodDeclaration
 		}
 	}
 
+	public void resolveReceiver() {
+		if (this.arguments != null && this.arguments.length > 0) {
+			if (this.arguments[0].isReceiver()) {
+				Receiver receiver = (Receiver) this.arguments[0];
+
+				TypeBinding resolvedReceiverType = receiver.type.resolvedType;
+				if (this.binding == null || resolvedReceiverType == null || !resolvedReceiverType.isValidBinding())
+					return;
+
+				ReferenceBinding declaringClass = this.binding.declaringClass;
+				/* neither static methods nor methods in anonymous types can have explicit 'this' */
+				if (this.isStatic() || declaringClass.isAnonymousType()) {
+					this.scope.problemReporter().disallowedThisParameter(receiver);
+					return; // No need to do further validation
+				}
+
+				ReferenceBinding enclosingReceiver = this.scope.enclosingReceiverType();
+				if (this.isConstructor()) {
+					/* Only non static member types or local types can declare explicit 'this' params in constructors */
+					if (declaringClass.isStatic()
+							|| (declaringClass.tagBits & (TagBits.IsLocalType | TagBits.IsMemberType)) == 0) { /* neither member nor local type */
+						this.scope.problemReporter().disallowedThisParameter(receiver);
+						return; // No need to do further validation
+					}
+					enclosingReceiver = enclosingReceiver.enclosingType();
+				}
+
+				if (enclosingReceiver != resolvedReceiverType) {
+					this.scope.problemReporter().illegalTypeForExplicitThis(receiver, enclosingReceiver);
+				}
+
+				if ((receiver.qualifyingName == null) ? this.isConstructor() : !isQualifierValidForType(receiver.qualifyingName.getName(), enclosingReceiver)) {
+					this.scope.problemReporter().illegalQualifierForExplicitThis(receiver, enclosingReceiver);					
+				}
+			}
+		}
+	}
+	private boolean isQualifierValidForType(char[][] tokens, TypeBinding enclosingType) {
+		for(int index = tokens.length - 1; index >= 0 && enclosingType != null; index--) {
+			if (!CharOperation.equals(enclosingType.sourceName(), tokens[index])) {
+				return false;
+			}
+			enclosingType = enclosingType.enclosingType();
+		}
+		return true;
+	}
 	public void resolveJavadoc() {
 
 		if (this.binding == null) return;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NameReference.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NameReference.java
index 2c9bf9f..a67b519 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NameReference.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NameReference.java
@@ -5,6 +5,10 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *     IBM Corporation - initial API and implementation
  *******************************************************************************/
@@ -65,4 +69,6 @@ public void setFieldIndex(int index){
 }
 
 public abstract String unboundReferenceErrorName();
+
+public abstract char[][] getName();
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java
index da5acae..7c4d71f 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java
@@ -5,6 +5,10 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *     IBM Corporation - initial API and implementation
  *     Stephan Herrmann <stephan@cs.tu-berlin.de> - Contributions for
@@ -1072,4 +1076,8 @@ public void traverse(ASTVisitor visitor, ClassScope scope) {
 public String unboundReferenceErrorName() {
 	return new String(this.tokens[0]);
 }
+
+public char[][] getName() {
+	return this.tokens;
+}
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java
index a848aee..0eb9624 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java
@@ -5,6 +5,10 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *     IBM Corporation - initial API and implementation
  *     Stephan Herrmann <stephan@cs.tu-berlin.de> - Contribution for bug 292478 - Report potentially null across variable assignment,
@@ -999,4 +1003,8 @@ public void traverse(ASTVisitor visitor, ClassScope scope) {
 public String unboundReferenceErrorName(){
 	return new String(this.token);
 }
+
+public char[][] getName() {
+	return new char[][] {this.token};
+}
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java
index 2fc6d7a..8b5f820 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java
@@ -348,9 +348,9 @@ MethodBinding createMethod(AbstractMethodDeclaration method) {
 	Argument[] argTypes = method.arguments;
 	int argLength = argTypes == null ? 0 : argTypes.length;
 	long sourceLevel = compilerOptions().sourceLevel;
-	if (argLength > 0 && sourceLevel >= ClassFileConstants.JDK1_5) {
+	if (argLength > 0) {
 		Argument argument = argTypes[--argLength];
-		if (argument.isVarArgs())
+		if (argument.isVarArgs() && sourceLevel >= ClassFileConstants.JDK1_5)
 			method.binding.modifiers |= ClassFileConstants.AccVarargs;
 		if (CharOperation.equals(argument.name, ConstantPool.This)) {
 			if (argLength != 0 || sourceLevel <= ClassFileConstants.JDK1_7) {
@@ -363,7 +363,7 @@ MethodBinding createMethod(AbstractMethodDeclaration method) {
 		}
 		while (--argLength >= 0) {
 			argument = argTypes[argLength];
-			if (argument.isVarArgs())
+			if (argument.isVarArgs() && sourceLevel >= ClassFileConstants.JDK1_5)
 				problemReporter().illegalVararg(argument, method);
 			if (CharOperation.equals(argument.name, ConstantPool.This)) {
 				if (argLength != 0 || sourceLevel <= ClassFileConstants.JDK1_7) {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
index 9b88073..39b96e7 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
@@ -82,6 +82,7 @@ import org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference;
 import org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression;
 import org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference;
 import org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference;
+import org.eclipse.jdt.internal.compiler.ast.Receiver;
 import org.eclipse.jdt.internal.compiler.ast.Reference;
 import org.eclipse.jdt.internal.compiler.ast.ReferenceExpression;
 import org.eclipse.jdt.internal.compiler.ast.ReturnStatement;
@@ -2680,6 +2681,31 @@ public void illegalThis(Argument argument, AbstractMethodDeclaration method, lon
 		argument.sourceStart,
 		argument.sourceEnd);
 }
+public void disallowedThisParameter(Receiver receiver) {
+	String[] arguments = NoArgument;
+	this.handle(
+		IProblem.DisallowedExplicitThisParameter,
+		arguments,
+		arguments,
+		receiver.sourceStart,
+		receiver.sourceEnd);
+}
+public void illegalQualifierForExplicitThis(Receiver receiver, TypeBinding expectedType) {
+	this.handle(
+		IProblem.IllegalQualifierForExplicitThis,
+		new String[] { new String(expectedType.readableName())},
+		new String[] { new String(expectedType.qualifiedSourceName())},
+		receiver.sourceStart,
+		receiver.sourceEnd);
+}
+public void illegalTypeForExplicitThis(Receiver receiver, TypeBinding expectedType) {
+	this.handle(
+		IProblem.IllegalTypeForExplicitThis,
+		new String[] { new String(expectedType.readableName())},
+		new String[] { new String(expectedType.shortReadableName())},
+		receiver.type.sourceStart,
+		receiver.type.sourceEnd);
+}
 public void illegalThis(Argument argument) {
 	String[] arguments = NoArgument;
 	this.handle(
@@ -4230,15 +4256,6 @@ public void invalidUsageOfTypeAnnotations(Annotation annotation) {
 			annotation.sourceEnd);
 }
 
-public void illegalReceiverAnnotations(Annotation first, Annotation last) {
-	this.handle(
-			IProblem.InvalidUsageOfReceiverAnnotations,
-			NoArgument,
-			NoArgument,
-			first.sourceStart,
-			last.sourceEnd);	
-}
-
 public void misplacedTypeAnnotations(Annotation first, Annotation last) {
 	this.handle(
 			IProblem.MisplacedTypeAnnotations,
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
index 828a23a..863c43a 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
@@ -588,18 +588,20 @@
 635 = Unnecessary @SuppressWarnings("{0}")
 636 = The method {0}({1}) of type {2} should be tagged with @Override since it actually overrides a superinterface method
 637 = Syntax error, type annotations are available only when source level is at least 1.8
-638 = Receiver annotations are illegal in a static method context
+638 = Explicit ''this'' parameter is allowed only in instance methods of non-anonymous classes and inner class constructors
 639 = Syntax error, type annotations are illegal here
 640 = Syntax error, modifiers are illegal here
 641 = Type annotation is illegal for a method that returns void
-642 = Only the first formal parameter of an instance method may be declared explicitly as "this" 
-643 = Explicit declaration of "this" parameter is allowed only at source level 1.8 or above 
+642 = Only the first formal parameter may be declared explicitly as ''this''
+643 = Explicit declaration of ''this'' parameter is allowed only at source level 1.8 or above
 644 = Default methods are allowed only at source level 1.8 or above
 645 = Lambda expressions are allowed only at source level 1.8 or above
 646 = Method references are allowed only at source level 1.8 or above
 647 = Constructor references are allowed only at source level 1.8 or above
 648 = Lambda expressions cannot declare a this parameter
 649 = Only annotation types that explicitly specify {0} as a possible target element type can be applied here
+650 = The declared type of the explicit ''this'' parameter is expected to be {0}
+651 = The explicit ''this'' parameter is expected to be qualified with {0}
 ### MORE GENERICS
 660 = Unused type arguments for the non generic constructor {0}({1}) of type {2}; it should not be parameterized with arguments <{3}>
 

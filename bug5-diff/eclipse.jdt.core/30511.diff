commit 3fcde8161bb2f59eff89b2d65e8096f5b841cf50
Author: Jerome lanneluc <jlanneluc>
Date:   Fri Jan 31 09:33:30 2003 +0000

    Fix for bug 30511

88	0	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java
3	1	org.eclipse.jdt.core/buildnotes_jdt-core.html
3	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CopyPackageFragmentRootOperation.java
12	4	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CopyResourceElementsOperation.java
3	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateCompilationUnitOperation.java
3	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateFieldOperation.java
3	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateMethodOperation.java
3	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreatePackageFragmentOperation.java
6	2	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateTypeOperation.java
1	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelStatus.java
1	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/messages.properties
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java
index 4ebbaea..b17575b 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RootManipulationsTests.java
@@ -300,6 +300,94 @@ public void testCopySourceFolder4() throws CoreException {
 	}
 }
 /*
+ * Ensure that coping a source root to another project with an existing source root in
+ * REPLACE mode triggers the right delta and that the model is up-to-date.
+ * (regression test bug 30511 IPackageFragmentRoot:move ignores FORCE flag)
+ */
+public void testCopySourceFolder5() throws CoreException {
+	try {
+		this.createJavaProject("P1", new String[] {"src"}, "bin");
+		IJavaProject p2 = this.createJavaProject("P2", new String[] {"src"}, "bin");
+		this.createFolder("/P1/src/p");
+		this.createFile(
+			"/P1/src/p/X.java", 
+			"package p;\n" +
+			"public class X {\n" +
+			"}"
+		);
+
+		IPackageFragmentRoot root = this.getPackageFragmentRoot("/P1/src");
+		this.startDeltas();
+		root.copy(new Path("/P2/src"), IResource.NONE, IPackageFragmentRoot.REPLACE, null, null);
+		assertDeltas(
+			"Unexpected delta",
+			"P2[*]: {CHILDREN}\n" + 
+			"	src[*]: {CHILDREN}\n" + 
+			"		p[+]: {}"
+		);
+		assertJavaProject(
+			"P2\n" + 
+			"	src\n" + 
+			"		[default]\n" + 
+			"		p\n" + 
+			"			X.java\n" + 
+			"	L/P2/.classpath\n" + 
+			"	L/P2/.project",
+			p2);
+	} finally {
+		this.stopDeltas();
+		this.deleteProject("P1");
+		this.deleteProject("P2");
+	}
+}
+/*
+ * Ensure that coping a source root to another project with an existing source root in
+ * non REPLACE mode throws the right JavaModelException.
+ * (regression test bug 30511 IPackageFragmentRoot:move ignores FORCE flag)
+ */
+public void testFailCopySourceFolder1() throws CoreException {
+	try {
+		this.createJavaProject("P1", new String[] {"src"}, "bin");
+		this.createJavaProject("P2", new String[] {"src"}, "bin");
+
+		IPackageFragmentRoot root = this.getPackageFragmentRoot("/P1/src");
+		try {
+			root.copy(new Path("/P2/src"), IResource.NONE, IPackageFragmentRoot.DESTINATION_PROJECT_CLASSPATH, null, null);
+		} catch (JavaModelException e) {
+			assertEquals("/P2/src already exists in target.", e.getMessage());
+			return;
+		}
+		assertTrue("Should throw a JavaModelException", false);
+	} finally {
+		this.deleteProject("P1");
+		this.deleteProject("P2");
+	}
+}
+/*
+ * Ensure that coping a source root to another project with an existing source root in
+ * non REPLACE mode throws the right JavaModelException.
+ * (regression test bug 30511 IPackageFragmentRoot:move ignores FORCE flag)
+ */
+public void testFailCopySourceFolder2() throws CoreException {
+	try {
+		this.createJavaProject("P1", new String[] {"src"}, "bin");
+		this.createJavaProject("P2", new String[] {"src"}, "bin");
+		this.deleteFolder("/P2/src");
+
+		IPackageFragmentRoot root = this.getPackageFragmentRoot("/P1/src");
+		try {
+			root.copy(new Path("/P2/src"), IResource.NONE, IPackageFragmentRoot.DESTINATION_PROJECT_CLASSPATH, null, null);
+		} catch (JavaModelException e) {
+			assertEquals("/P2/src already exists in target.", e.getMessage());
+			return;
+		}
+		assertTrue("Should throw a JavaModelException", false);
+	} finally {
+		this.deleteProject("P1");
+		this.deleteProject("P2");
+	}
+}
+/*
  * Ensure that deleting a jar package fragment root triggers the right delta
  * and that the model is up-to-date.
  */
diff --git a/org.eclipse.jdt.core/buildnotes_jdt-core.html b/org.eclipse.jdt.core/buildnotes_jdt-core.html
index 87ea710..e2ab4e5 100644
--- a/org.eclipse.jdt.core/buildnotes_jdt-core.html
+++ b/org.eclipse.jdt.core/buildnotes_jdt-core.html
@@ -68,7 +68,9 @@ dependencies is lowered to a warning (see Preferences>Java>Compiler>Other>Circul
 </ul>
 
 <h3>Problem Reports Fixed</h3>
-<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=30516">30516</a>
+<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=30511">30511</a>
+IPackageFragmentRoot:move ignores FORCE flag 
+<br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=30516">30516</a>
 typo in javadoc of IPackageFragmentRoot:isArchive 
 <br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=30506">30506</a>
 IPackageFragmentRoot:delete does not handle external jars 
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CopyPackageFragmentRootOperation.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CopyPackageFragmentRootOperation.java
index fc19a21..80b8f1c 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CopyPackageFragmentRootOperation.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CopyPackageFragmentRootOperation.java
@@ -238,7 +238,9 @@ public class CopyPackageFragmentRootOperation extends JavaModelOperation {
 						return new JavaModelStatus(IJavaModelStatusConstants.INVALID_SIBLING, this.sibling == null ? "null" : this.sibling.toString()); //$NON-NLS-1$
 					}
 					if (foundExistingEntry && (this.updateResourceFlags & IResource.FORCE) == 0) {
-						return new JavaModelStatus(IJavaModelStatusConstants.NAME_COLLISION, this.destination.toString());
+						return new JavaModelStatus(
+							IJavaModelStatusConstants.NAME_COLLISION, 
+							Util.bind("status.nameCollision", this.destination.toString())); //$NON-NLS-1$
 					}
 				} catch (JavaModelException e) {
 					return e.getJavaModelStatus();
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CopyResourceElementsOperation.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CopyResourceElementsOperation.java
index ebbbe82..b293dfc 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CopyResourceElementsOperation.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CopyResourceElementsOperation.java
@@ -226,7 +226,9 @@ public class CopyResourceElementsOperation extends MultiOperation {
 						deleteResource(destFile, IResource.KEEP_HISTORY);
 					} else {
 						// abort
-						throw new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.NAME_COLLISION));
+						throw new JavaModelException(new JavaModelStatus(
+							IJavaModelStatusConstants.NAME_COLLISION, 
+							Util.bind("status.nameCollision", destFile.getFullPath().toString()))); //$NON-NLS-1$
 					}
 				}
 				int flags = fForce ? IResource.FORCE : IResource.NONE;
@@ -272,7 +274,9 @@ public class CopyResourceElementsOperation extends MultiOperation {
 			}
 		} else {
 			if (!fForce) {
-				throw new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.NAME_COLLISION));
+				throw new JavaModelException(new JavaModelStatus(
+					IJavaModelStatusConstants.NAME_COLLISION, 
+					Util.bind("status.nameCollision", destFile.getFullPath().toString()))); //$NON-NLS-1$
 			}
 			// update new resource content
 			// in case we do a saveas on the same resource we have to simply update the contents
@@ -391,7 +395,9 @@ public class CopyResourceElementsOperation extends MultiOperation {
 								if (fForce) {
 									deleteResource(destinationResource, IResource.KEEP_HISTORY);
 								} else {
-									throw new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.NAME_COLLISION));
+									throw new JavaModelException(new JavaModelStatus(
+										IJavaModelStatusConstants.NAME_COLLISION, 
+										Util.bind("status.nameCollision", destinationResource.getFullPath().toString()))); //$NON-NLS-1$
 								}
 							}
 						}
@@ -405,7 +411,9 @@ public class CopyResourceElementsOperation extends MultiOperation {
 									// we need to delete this resource if this operation wants to override existing resources
 									deleteResource(destinationResource, IResource.KEEP_HISTORY);
 								} else {
-									throw new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.NAME_COLLISION));
+									throw new JavaModelException(new JavaModelStatus(
+										IJavaModelStatusConstants.NAME_COLLISION, 
+										Util.bind("status.nameCollision", destinationResource.getFullPath().toString()))); //$NON-NLS-1$
 								}
 							}
 						}
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateCompilationUnitOperation.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateCompilationUnitOperation.java
index c4cc42c..dc2a7df 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateCompilationUnitOperation.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateCompilationUnitOperation.java
@@ -97,7 +97,9 @@ protected void executeOperation() throws JavaModelException {
 					addDelta(delta);
 				}
 			} else {
-				throw new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.NAME_COLLISION));
+				throw new JavaModelException(new JavaModelStatus(
+					IJavaModelStatusConstants.NAME_COLLISION, 
+					Util.bind("status.nameCollision", compilationUnitFile.getFullPath().toString()))); //$NON-NLS-1$
 			}
 		} else {
 			try {
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateFieldOperation.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateFieldOperation.java
index 0093c31..fbfd056 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateFieldOperation.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateFieldOperation.java
@@ -96,7 +96,9 @@ protected void initializeDefaultPosition() {
 protected IJavaModelStatus verifyNameCollision() {
 	IType type= getType();
 	if (type.getField(fDOMNode.getName()).exists()) {
-		return new JavaModelStatus(IJavaModelStatusConstants.NAME_COLLISION);
+		return new JavaModelStatus(
+			IJavaModelStatusConstants.NAME_COLLISION, 
+			Util.bind("status.nameCollision", fDOMNode.getName())); //$NON-NLS-1$
 	}
 	return JavaModelStatus.VERIFIED_OK;
 }
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateMethodOperation.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateMethodOperation.java
index 890c5cb..30cdc22 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateMethodOperation.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateMethodOperation.java
@@ -107,7 +107,9 @@ protected IJavaModelStatus verifyNameCollision() {
 		}
 		String[] types = convertDOMMethodTypesToSignatures();
 		if (type.getMethod(name, types).exists()) {
-			return new JavaModelStatus(IJavaModelStatusConstants.NAME_COLLISION);
+			return new JavaModelStatus(
+				IJavaModelStatusConstants.NAME_COLLISION, 
+				Util.bind("status.nameCollision", name)); //$NON-NLS-1$
 		}
 	}
 	return JavaModelStatus.VERIFIED_OK;
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreatePackageFragmentOperation.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreatePackageFragmentOperation.java
index a8f375b..f0cc394 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreatePackageFragmentOperation.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreatePackageFragmentOperation.java
@@ -136,7 +136,9 @@ public IJavaModelStatus verify() {
 		IResource subFolder = parentFolder.findMember(names[i]);
 		if (subFolder != null) {
 			if (subFolder.getType() != IResource.FOLDER) {
-				return new JavaModelStatus(IJavaModelStatusConstants.NAME_COLLISION);
+				return new JavaModelStatus(
+					IJavaModelStatusConstants.NAME_COLLISION, 
+					Util.bind("status.nameCollision", subFolder.getFullPath().toString())); //$NON-NLS-1$
 			}
 			parentFolder = (IContainer) subFolder;
 		}
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateTypeOperation.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateTypeOperation.java
index 5e05bd3..8d358dd 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateTypeOperation.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CreateTypeOperation.java
@@ -92,12 +92,16 @@ protected IJavaModelStatus verifyNameCollision() {
 	int type = parent.getElementType();
 	if (type == IJavaElement.TYPE) {
 		if (((IType) parent).getType(fDOMNode.getName()).exists()) {
-			return new JavaModelStatus(IJavaModelStatusConstants.NAME_COLLISION);
+			return new JavaModelStatus(
+				IJavaModelStatusConstants.NAME_COLLISION, 
+				Util.bind("status.nameCollision", fDOMNode.getName())); //$NON-NLS-1$
 		}
 	} else
 		if (type == IJavaElement.COMPILATION_UNIT) {
 			if (((ICompilationUnit) parent).getType(fDOMNode.getName()).exists()) {
-				return new JavaModelStatus(IJavaModelStatusConstants.NAME_COLLISION);
+				return new JavaModelStatus(
+					IJavaModelStatusConstants.NAME_COLLISION, 
+					Util.bind("status.nameCollision", fDOMNode.getName())); //$NON-NLS-1$
 			}
 		}
 	return JavaModelStatus.VERIFIED_OK;
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelStatus.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelStatus.java
index aa1cf41..4dd2af2 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelStatus.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelStatus.java
@@ -216,7 +216,7 @@ public class JavaModelStatus extends Status implements IJavaModelStatus, IJavaMo
 					if (fString != null) {
 						return fString;
 					} else {
-						return Util.bind("status.nameCollision"); //$NON-NLS-1$
+						return Util.bind("status.nameCollision", ""); //$NON-NLS-1$ //$NON-NLS-2$
 					}
 				case NO_ELEMENTS_TO_PROCESS:
 					return Util.bind("operation.needElements"); //$NON-NLS-1$
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/messages.properties b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/messages.properties
index 608bc3b..f1d8dfa 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/messages.properties
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/messages.properties
@@ -113,7 +113,7 @@ status.invalidProject = Invalid project: {0}.
 status.invalidResource = Invalid resource: {0}.
 status.invalidResourceType = Invalid resource type for {0}.
 status.invalidSibling = Invalid sibling: {0}.
-status.nameCollision = Name collision.
+status.nameCollision = {0} already exists in target.
 status.noLocalContents = Cannot find local contents for resource: {0}
 status.OK = OK
 status.readOnly = {0} is read-only.

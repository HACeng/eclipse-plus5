commit 52d86f1f74f710e8a956efc685f3f0da75fbf5a1
Author: Markus Keller <markus_keller@ch.ibm.com>
Date:   Mon Jun 26 19:10:21 2017 +0200

    Bug 518794: [9] [dom ast] API problems with module bindings

1	1	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IBinding.java
22	13	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IModuleBinding.java
2	2	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ITypeBinding.java
2	2	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ModuleBinding.java
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IBinding.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IBinding.java
index d85b61f..ebd01f1 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IBinding.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IBinding.java
@@ -93,7 +93,7 @@ public interface IBinding {
 	public static final int MEMBER_VALUE_PAIR = 6;
 
 	/**
-	 * Kind constant (value 7) indicating a module binding.
+	 * Kind constant (value 7) indicating a module binding (added in JLS9 API).
 	 * Bindings of this kind can be safely cast to <code>IModuleBinding</code>.
 	 *
 	 * @see #getKind()
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IModuleBinding.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IModuleBinding.java
index baa383d..fa33cfc 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IModuleBinding.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IModuleBinding.java
@@ -17,7 +17,7 @@
 package org.eclipse.jdt.core.dom;
 
 /**
- * A module binding represents a module.
+ * A module binding represents a module (added in JLS9 API).
  *
  * @since 3.13 BETA_JAVA9
  * @noimplement This interface is not intended to be implemented by clients.
@@ -35,53 +35,62 @@ public interface IModuleBinding extends IBinding {
 	}
 
 	/**
-	 * answers whether the module is open or not
+	 * Returns whether this module is open or not.
+	 *
 	 * @return <code>true</code> if open, <code>false</code> otherwise
 	 */
 	public abstract boolean isOpen();
 
 	/**
-	 * All the required modules, transitive and otherwise
-	 * @return required modules
+	 * Returns all required modules.
+	 * 
+	 * @return all required modules
 	 */
 	public abstract IModuleBinding[] getRequiredModules();
 
 	/**
+	 * Returns all exported packages.
 	 *
 	 * @return array of exported package bindings
 	 */
 	public abstract IPackageBinding[] getExportedPackages();
 
 	/**
-	 * if targeted, returns the array of targeted modules, else returns an empty array.
-	 * @param packageBinding
+	 * If this module exports the given package to specific modules, returns the array of targeted module bindings,
+	 * otherwise returns an empty array.
+	 * 
+	 * @param packageBinding a package binding for which targeted modules are declared
 	 * @return array of targeted modules
 	 */
 	public abstract IModuleBinding[] getExportedTo(IPackageBinding packageBinding);
 
 	/**
+	 * Returns all opened packages.
 	 *
-	 * @return array of open package bindings
+	 * @return array of package bindings
 	 */
-	public abstract IPackageBinding[] getOpenPackages();
+	public abstract IPackageBinding[] getOpenedPackages();
 
 	/**
-	 * if targeted open, returns the array of targeted module bindings else empty array.
+	 * If this module opens the given package to specific modules, returns the array of targeted module bindings,
+	 * otherwise returns an empty array.
 	 *
-	 * @param packageBinding
+	 * @param packageBinding a package binding for which targeted modules are declared
 	 * @return array of targeted module bindings
 	 */
 	public abstract IModuleBinding[] getOpenedTo(IPackageBinding packageBinding);
 
 	/**
-	 *
-	 * @return array of uses type bindings
+	 * Returns the services used by this module.
+	 * 
+	 * @return array of type bindings
 	 */
 	public abstract ITypeBinding[] getUses();
 
 	/**
+	 * Returns the services provided by this module.
 	 *
-	 * @return array of service interfaces
+	 * @return array of services
 	 */
 	public abstract Service[] getServices();
 
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ITypeBinding.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ITypeBinding.java
index d98778e..0603d9e 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ITypeBinding.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ITypeBinding.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2016 IBM Corporation and others.
+ * Copyright (c) 2000, 2017 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -14,7 +14,7 @@
 package org.eclipse.jdt.core.dom;
 
 /**
- * A type binding represents fully-resolved type. There are a number of
+ * A type binding represents a fully-resolved type. There are a number of
  * different kinds of type bindings:
  * <ul>
  * <li>a class - represents the class declaration;
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ModuleBinding.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ModuleBinding.java
index 8f1ee20..87f28f4 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ModuleBinding.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ModuleBinding.java
@@ -185,7 +185,7 @@ public class ModuleBinding implements IModuleBinding {
 	}
 
 	@Override
-	public IPackageBinding[] getOpenPackages() {
+	public IPackageBinding[] getOpenedPackages() {
 		if (this.openPackages != null) 
 			return this.openPackages;
 	
@@ -196,7 +196,7 @@ public class ModuleBinding implements IModuleBinding {
 
 	@Override
 	public IModuleBinding[] getOpenedTo(IPackageBinding packageBinding) {
-		getOpenPackages();
+		getOpenedPackages();
 		return this.openTargets;// TODO Auto-generated method stub
 	}
 
commit 6c62a2c465fdfbbea9b2778b3b7776e4a8a12537
Author: Markus Keller <markus_keller@ch.ibm.com>
Date:   Tue Jun 27 16:58:31 2017 +0200

    Bug 518794: [9] [dom ast] API problems with module bindings
    
    Javadoc: bindings are in no particular order

7	0	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IModuleBinding.java
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IModuleBinding.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IModuleBinding.java
index fa33cfc..07e7a51 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IModuleBinding.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IModuleBinding.java
@@ -43,6 +43,7 @@ public interface IModuleBinding extends IBinding {
 
 	/**
 	 * Returns all required modules.
+	 * <p>The resulting bindings are in no particular order.</p>
 	 * 
 	 * @return all required modules
 	 */
@@ -50,6 +51,7 @@ public interface IModuleBinding extends IBinding {
 
 	/**
 	 * Returns all exported packages.
+	 * <p>The resulting bindings are in no particular order.</p>
 	 *
 	 * @return array of exported package bindings
 	 */
@@ -58,6 +60,7 @@ public interface IModuleBinding extends IBinding {
 	/**
 	 * If this module exports the given package to specific modules, returns the array of targeted module bindings,
 	 * otherwise returns an empty array.
+	 * <p>The resulting bindings are in no particular order.</p>
 	 * 
 	 * @param packageBinding a package binding for which targeted modules are declared
 	 * @return array of targeted modules
@@ -66,6 +69,7 @@ public interface IModuleBinding extends IBinding {
 
 	/**
 	 * Returns all opened packages.
+	 * <p>The resulting bindings are in no particular order.</p>
 	 *
 	 * @return array of package bindings
 	 */
@@ -74,6 +78,7 @@ public interface IModuleBinding extends IBinding {
 	/**
 	 * If this module opens the given package to specific modules, returns the array of targeted module bindings,
 	 * otherwise returns an empty array.
+	 * <p>The resulting bindings are in no particular order.</p>
 	 *
 	 * @param packageBinding a package binding for which targeted modules are declared
 	 * @return array of targeted module bindings
@@ -82,6 +87,7 @@ public interface IModuleBinding extends IBinding {
 
 	/**
 	 * Returns the services used by this module.
+	 * <p>The resulting bindings are in no particular order.</p>
 	 * 
 	 * @return array of type bindings
 	 */
@@ -89,6 +95,7 @@ public interface IModuleBinding extends IBinding {
 
 	/**
 	 * Returns the services provided by this module.
+	 * <p>The resulting services are in no particular order.</p>
 	 *
 	 * @return array of services
 	 */
commit 47a90e7b1de4688e7f32fe6fd2c477a26a451a47
Author: Manoj Palat <manpalat@in.ibm.com>
Date:   Fri Jun 30 10:08:41 2017 +0530

    Fix for bug 518794 [9] [dom ast] API problems with module bindings
    
    Change-Id: I02f9722236bfd306dd8ba8236ef5d73cd20d2bf2

37	19	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter9Test.java
57	32	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ModuleBinding.java
15	15	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IModuleBinding.java
50	43	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ModuleBinding.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter9Test.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter9Test.java
index c389b68..8604b5c 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter9Test.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter9Test.java
@@ -50,7 +50,7 @@ public class ASTConverter9Test extends ConverterTestSetup {
 	static {
 //		TESTS_NUMBERS = new int[] { 19 };
 //		TESTS_RANGE = new int[] { 1, -1 };
-//		TESTS_NAMES = new String[] {"testBug515875_004"};
+//		TESTS_NAMES = new String[] {"testBug515875_005"};
 	}
 	public static Test suite() {
 		String javaVersion = System.getProperty("java.version");
@@ -349,7 +349,7 @@ public class ASTConverter9Test extends ConverterTestSetup {
 			ModuleDeclaration moduleDecl = unit.getModule();
 			checkSourceRange(moduleDecl, content, content);
 
-			ModuleBinding moduleBinding = (ModuleBinding) moduleDecl.resolveBinding();
+			IModuleBinding moduleBinding = moduleDecl.resolveBinding();
 			assertTrue("Module Binding null", moduleBinding != null);
 			String name = moduleBinding.getName();
 			assertTrue("Module Name null", name != null);
@@ -372,7 +372,7 @@ public class ASTConverter9Test extends ConverterTestSetup {
 	public void testBug515875_002() throws Exception {
 		try {
 
-			IJavaProject project1 = createJavaProject("ConverterTests9", new String[] {"src"}, new String[] {"JCL18_LIB"}, "bin", "9");
+			IJavaProject project1 = createJavaProject("ConverterTests9", new String[] {"src"}, new String[] {"JCL19_LIB"}, "bin", "9");
 			project1.open(null);
 			addClasspathEntry(project1, JavaCore.newContainerEntry(new Path("org.eclipse.jdt.MODULE_PATH")));
 			String fileContent = 
@@ -412,7 +412,7 @@ public class ASTConverter9Test extends ConverterTestSetup {
 			ModuleDeclaration moduleDecl1 = ((CompilationUnit) unit1).getModule();
 			checkSourceRange(moduleDecl1, fileContent, fileContent);
 
-			ModuleBinding moduleBinding = (ModuleBinding) moduleDecl1.resolveBinding();
+			IModuleBinding moduleBinding = moduleDecl1.resolveBinding();
 			assertTrue("Module Binding null", moduleBinding != null);
 			String name = moduleBinding.getName();
 			assertTrue("Module Name null", name != null);
@@ -420,8 +420,8 @@ public class ASTConverter9Test extends ConverterTestSetup {
 			
 			Name modName1 = moduleDecl1.getName();
 			IBinding binding = modName1.resolveBinding();
-			assertTrue("binding not a module binding", binding instanceof ModuleBinding);
-			moduleBinding = (ModuleBinding) binding;
+			assertTrue("binding not a module binding", binding instanceof IModuleBinding);
+			moduleBinding = (IModuleBinding) binding;
 			assertTrue("Module Binding null", moduleBinding != null);
 			name = moduleBinding.getName();
 			assertTrue("Module Name null", name != null);
@@ -430,7 +430,7 @@ public class ASTConverter9Test extends ConverterTestSetup {
 			IModuleBinding[] reqs = moduleBinding.getRequiredModules();
 			assertTrue("Null requires", reqs != null);
 			assertTrue("incorrect number of requires modules", reqs.length == 1);
-			ModuleBinding req11 = (ModuleBinding) reqs[0];
+			IModuleBinding req11 = reqs[0];
 			assertTrue("incorrect name for requires modules", req11.getName().equals("second"));
 
 			IPackageBinding[] secPacks = req11.getExportedPackages();
@@ -444,12 +444,12 @@ public class ASTConverter9Test extends ConverterTestSetup {
 			assertTrue("Incorrect number of uses", uses.length == 1);
 			assertTrue("Incorrect uses", uses[0].getQualifiedName().equals("pack22.I22"));
 
-			IModuleBinding.Service[] services = moduleBinding.getServices();
+			ITypeBinding[] services = moduleBinding.getServices();
 			assertTrue("services null", services != null);
 			assertTrue("Incorrect number of services", services.length == 1);
-			for (IModuleBinding.Service s : services) {
-				assertTrue("Incorrect service", s.service.getQualifiedName().equals("pack22.I22"));
-				ITypeBinding[] implementations = s.implementations;
+			for (ITypeBinding s : services) {
+				assertTrue("Incorrect service", s.getQualifiedName().equals("pack22.I22"));
+				ITypeBinding[] implementations = moduleBinding.getImplementations(s);
 				assertTrue("implementations null", implementations != null);
 				assertTrue("Incorrect number of implementations", implementations.length == 1);
 				assertTrue("Incorrect implementation", implementations[0].getQualifiedName().equals("pack1.X11"));
@@ -506,7 +506,7 @@ public class ASTConverter9Test extends ConverterTestSetup {
 
 			RequiresDirective req = (RequiresDirective) moduleDecl1.moduleStatements().get(0);
 			Name reqModule = req.getName();
-			ModuleBinding moduleBinding = (ModuleBinding) reqModule.resolveBinding();
+			IModuleBinding moduleBinding = (IModuleBinding) reqModule.resolveBinding();
 			assertTrue("Module Binding null", moduleBinding != null);
 			String name = moduleBinding.getName();
 			assertTrue("Module Name null", name != null);
@@ -561,13 +561,13 @@ public class ASTConverter9Test extends ConverterTestSetup {
 			checkSourceRange(moduleDecl1, fileContent, fileContent);
 			
 			Name name = moduleDecl1.getName();
-			ModuleBinding moduleBinding = (ModuleBinding) name.resolveBinding();
+			IModuleBinding moduleBinding = (IModuleBinding) name.resolveBinding();
 			assertTrue("Module Binding null", moduleBinding != null);
 			assertTrue("Module not open", moduleBinding.isOpen());
 
 			RequiresDirective req = (RequiresDirective) moduleDecl1.moduleStatements().get(0);
 			name = req.getName();
-			moduleBinding = (ModuleBinding) name.resolveBinding();
+			moduleBinding = (IModuleBinding) name.resolveBinding();
 			assertTrue("Module Binding null", moduleBinding != null);
 			String moduleName = moduleBinding.getName();
 			assertTrue("Module Name null", moduleName != null);
@@ -588,6 +588,8 @@ public class ASTConverter9Test extends ConverterTestSetup {
 			String fileContent =
 				"module first {\n" +
 				"    requires second;\n" +
+				"    exports pack1 to test;\n" +
+				"    opens pack1 to test;\n" +
 				"    provides pack22.I22 with pack1.X11, pack1.X12;\n" +
 				"}";
 			createFile("/ConverterTests9/src/module-info.java",	fileContent);
@@ -624,18 +626,34 @@ public class ASTConverter9Test extends ConverterTestSetup {
 			ModuleDeclaration moduleDecl1 = ((CompilationUnit) unit1).getModule();
 			checkSourceRange(moduleDecl1, fileContent, fileContent);
 
-			ModuleBinding moduleBinding = (ModuleBinding) moduleDecl1.resolveBinding();
+			IModuleBinding moduleBinding = moduleDecl1.resolveBinding();
 			assertTrue("Module Binding null", moduleBinding != null);
 			String name = moduleBinding.getName();
 			assertTrue("Module Name null", name != null);
 			assertTrue("Wrong Module Name", name.equals("first"));
 
-			IModuleBinding.Service[] services = moduleBinding.getServices();
+			IPackageBinding[] exports = moduleBinding.getExportedPackages();
+			assertTrue("Incorrect number of exports", exports.length == 1);
+			IPackageBinding e = exports[0];
+			assertTrue("Incorrect Export", e.getKey().equals("pack1"));
+			String[] targets = moduleBinding.getExportedTo(e);
+			assertTrue("Incorrect number of targets", targets.length == 1);
+			assertTrue("Incorrect Target", targets[0].equals("test"));
+
+			IPackageBinding[] opens = moduleBinding.getOpenedPackages();
+			assertTrue("Incorrect number of opens", opens.length == 1);
+			e = opens[0];
+			assertTrue("Incorrect Opens", e.getKey().equals("pack1"));
+			targets = moduleBinding.getOpenedTo(e);
+			assertTrue("Incorrect number of targets", targets.length == 1);
+			assertTrue("Incorrect Target", targets[0].equals("test"));
+
+			ITypeBinding[] services = moduleBinding.getServices();
 			assertTrue("services null", services != null);
 			assertTrue("Incorrect number of services", services.length == 1);
-			for (IModuleBinding.Service s : services) {
-				assertTrue("Incorrect service", s.service.getQualifiedName().equals("pack22.I22"));
-				ITypeBinding[] implementations = s.implementations;
+			for (ITypeBinding s : services) {
+				assertTrue("Incorrect service", s.getQualifiedName().equals("pack22.I22"));
+				ITypeBinding[] implementations = moduleBinding.getImplementations(s);
 				assertTrue("implementations null", implementations != null);
 				assertTrue("Incorrect number of implementations", implementations.length == 2);
 				assertTrue("Incorrect implementation", implementations[0].getQualifiedName().equals("pack1.X11"));
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ModuleBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ModuleBinding.java
index 552d57b..e43f32a 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ModuleBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ModuleBinding.java
@@ -68,8 +68,8 @@ public class ModuleBinding extends Binding {
 	public char[] moduleName;
 	public IModuleReference[] requires;
 	public IPackageExport[] exports;
+	public IPackageExport[] opens;
 	public TypeBinding[] uses;
-//	public LinkedHashMap<TypeBinding, TypeBinding[]> services;
 	Service[] services;
 	public CompilationUnitScope scope;
 	public LookupEnvironment environment;
@@ -88,6 +88,7 @@ public class ModuleBinding extends Binding {
 		this.environment = env;
 		this.requires = IModule.NO_MODULE_REFS;
 		this.exports = IModule.NO_EXPORTS;
+		this.exports = IModule.NO_OPENS;
 		this.services = new Service[0];
 		this.declaredPackages = new HashtableOfPackage(0);
 		this.exportedPackages = new HashtableOfPackage(0);
@@ -102,6 +103,9 @@ public class ModuleBinding extends Binding {
 		this.exports = decl.exports();
 		if (this.exports == null)
 			this.exports = IModule.NO_EXPORTS;
+		this.opens = decl.opens();
+		if (this.opens == null)
+			this.opens = IModule.NO_OPENS;
 		this.environment = environment;
 		this.uses = Binding.NO_TYPES;
 		this.services = new Service[0];
@@ -206,15 +210,7 @@ public class ModuleBinding extends Binding {
 		return this.moduleName;
 	}
 
-	/**
-	 * Check if the specified package is exported to the client module by this module. True if the package appears
-	 * in the list of exported packages and when the export is targeted, the module appears in the targets of the
-	 * exports statement
-	 * @param pkg - the package whose visibility is to be checked
-	 * @param client - the module that wishes to use the package
-	 * @return true if the package is visible to the client module, false otherwise
-	 */
-	public boolean isPackageExportedTo(PackageBinding pkg, ModuleBinding client) {
+	private boolean isPackageVisibleTo(PackageBinding pkg, ModuleBinding client, IPackageExport[] pvs) {
 		PackageBinding resolved = getExportedPackage(pkg.readableName());
 		if (resolved == pkg) {
 			if (this.isAuto) { // all packages are exported by an automatic module
@@ -224,11 +220,33 @@ public class ModuleBinding extends Binding {
 			Predicate<IPackageExport> isExportedTo = e -> 
 				Stream.of(e.targets()).map(ref -> this.environment.getModule(ref)).filter(m -> m != null).anyMatch(client::equals);
 			
-			return Stream.of(this.exports).filter(e -> CharOperation.equals(pkg.readableName(), e.name()))
+			return Stream.of(pvs).filter(e -> CharOperation.equals(pkg.readableName(), e.name()))
 					.anyMatch(isTargeted.negate().or(isExportedTo));
 		}
 		return false;
 	}
+	/**
+	 * Check if the specified package is exported to the client module by this module. True if the package appears
+	 * in the list of exported packages and when the export is targeted, the module appears in the targets of the
+	 * exports statement
+	 * @param pkg - the package whose visibility is to be checked
+	 * @param client - the module that wishes to use the package
+	 * @return true if the package is visible to the client module, false otherwise
+	 */
+	public boolean isPackageExportedTo(PackageBinding pkg, ModuleBinding client) {
+		return isPackageVisibleTo(pkg, client, this.exports);
+	}
+	/**
+	 * Check if the specified package is opened to the client module by this module. True if the package appears
+	 * in the list of opened packages and when the opens is targeted, the module appears in the targets of the
+	 * opens statement
+	 * @param pkg - the package whose visibility is to be checked
+	 * @param client - the module that wishes to use the package
+	 * @return true if the package is visible to the client module, false otherwise
+	 */
+	public boolean isPackageOpenedTo(PackageBinding pkg, ModuleBinding client) {
+		return isPackageVisibleTo(pkg, client, this.opens);
+	}
 	public PackageBinding getTopLevelPackage(char[] name) {
 		// return package binding if there exists a package named name in this module's context and it can be seen by this module
 		// A package can be seen by this module if it declares the package or someone exports that package to it
@@ -302,7 +320,7 @@ public class ModuleBinding extends Binding {
 		}
 		return parent;
 	}
-	public PackageBinding getExportedPackage(char[] qualifiedPackageName) {
+	private PackageBinding getVisibilityPackage(char[] qualifiedPackageName, IPackageExport[]  pvs) {
 		PackageBinding existing = this.exportedPackages.get(qualifiedPackageName);
 		if (existing != null && existing != LookupEnvironment.TheNotFoundPackage)
 			return existing;
@@ -310,7 +328,7 @@ public class ModuleBinding extends Binding {
 			return getDeclaredPackage(CharOperation.splitOn('.', qualifiedPackageName));
 		}
 		//Resolve exports to see if the package or a sub package is exported
-		return Stream.of(this.exports).sorted((e1, e2) -> e1.name().length - e2.name().length)
+		return Stream.of(pvs).sorted((e1, e2) -> e1.name().length - e2.name().length)
 		.filter(e -> CharOperation.prefixEquals(qualifiedPackageName, e.name())) // TODO: improve this
 		.map(e -> {
 			PackageBinding binding = getDeclaredPackage(CharOperation.splitOn('.', e.name()));
@@ -321,6 +339,12 @@ public class ModuleBinding extends Binding {
 			return null;
 		}).filter(p -> p != null).findFirst().orElse(null);
 	}
+	public PackageBinding getExportedPackage(char[] qualifiedPackageName) {
+		return getVisibilityPackage(qualifiedPackageName, this.exports);
+	}
+	public PackageBinding getOpenedPackage(char[] qualifiedPackageName) {
+		return getVisibilityPackage(qualifiedPackageName, this.opens);
+	}
 	public boolean declaresPackage(PackageBinding p) {
 		PackageBinding pkg = this.declaredPackages.get(p.readableName());
 		if (pkg == null) {
@@ -429,6 +453,24 @@ public class ModuleBinding extends Binding {
 		return this.moduleName;
 	}
 
+	private void printPackageVisibility(StringBuffer buffer, IPackageExport[] pvs, String present, String absent) {
+		int len = pvs.length;
+		buffer.append(len > 0 ? present : absent);
+		for (int i = 0; i < len; i++) {
+			IPackageExport pv = pvs[i];
+			buffer.append("\n\t"); //$NON-NLS-1$
+			buffer.append(pv.name());
+			char[][] targets = pv.targets();
+			if (targets != null) {
+				buffer.append("to "); //$NON-NLS-1$
+				for (int j = 0; j < targets.length; j++) {
+					if (j != 0)
+						buffer.append(", "); //$NON-NLS-1$
+					buffer.append(targets[j]);
+				}
+			}
+		}
+	}
 	public String toString() {
 		StringBuffer buffer = new StringBuffer(30);
 		buffer.append("module " + new String(readableName())); //$NON-NLS-1$
@@ -443,25 +485,8 @@ public class ModuleBinding extends Binding {
 		} else {
 			buffer.append("\nNo Requires"); //$NON-NLS-1$
 		}
-		if (this.exports.length > 0) {
-			buffer.append("\n/*    exports    */\n"); //$NON-NLS-1$
-			for (int i = 0; i < this.exports.length; i++) {
-				IPackageExport export = this.exports[i];
-				buffer.append("\n\t"); //$NON-NLS-1$
-				buffer.append(export.name());
-				char[][] targets = export.targets();
-				if (targets != null) {
-					buffer.append("to "); //$NON-NLS-1$
-					for (int j = 0; j < targets.length; j++) {
-						if (j != 0)
-							buffer.append(", "); //$NON-NLS-1$
-						buffer.append(targets[j]);
-					}
-				}
-			}
-		} else {
-			buffer.append("\nNo Exports"); //$NON-NLS-1$
-		}
+		printPackageVisibility(buffer, this.exports, "\n/*    exports    */\n", "\nNo Exports"); //$NON-NLS-1$ //$NON-NLS-2$
+		printPackageVisibility(buffer, this.opens, "\n/*    opens    */\n", "\nNo Opens"); //$NON-NLS-1$ //$NON-NLS-2$
 		if (this.uses != null && this.uses.length > 0) {
 			buffer.append("\n/*    uses    /*\n"); //$NON-NLS-1$
 			for (int i = 0; i < this.uses.length; i++) {
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IModuleBinding.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IModuleBinding.java
index 07e7a51..0f8785c 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IModuleBinding.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IModuleBinding.java
@@ -24,11 +24,6 @@ package org.eclipse.jdt.core.dom;
  */
 public interface IModuleBinding extends IBinding {
 
-	public static class Service {
-		public ITypeBinding service;
-		public ITypeBinding[] implementations;
-	}
-
 	@Override
 	public default int getKind() {
 		return IBinding.MODULE;
@@ -58,14 +53,13 @@ public interface IModuleBinding extends IBinding {
 	public abstract IPackageBinding[] getExportedPackages();
 
 	/**
-	 * If this module exports the given package to specific modules, returns the array of targeted module bindings,
-	 * otherwise returns an empty array.
-	 * <p>The resulting bindings are in no particular order.</p>
+	 * If this module exports the given package to specific modules, returns the array of names of 
+	 * modules, otherwise returns an empty array.
 	 * 
 	 * @param packageBinding a package binding for which targeted modules are declared
-	 * @return array of targeted modules
+	 * @return array of names of targetted modules
 	 */
-	public abstract IModuleBinding[] getExportedTo(IPackageBinding packageBinding);
+	public abstract String[] getExportedTo(IPackageBinding packageBinding);
 
 	/**
 	 * Returns all opened packages.
@@ -76,14 +70,14 @@ public interface IModuleBinding extends IBinding {
 	public abstract IPackageBinding[] getOpenedPackages();
 
 	/**
-	 * If this module opens the given package to specific modules, returns the array of targeted module bindings,
-	 * otherwise returns an empty array.
+	 * If this module opens the given package to specific modules, returns the array of names of
+	 * modules, otherwise returns an empty array.
 	 * <p>The resulting bindings are in no particular order.</p>
 	 *
 	 * @param packageBinding a package binding for which targeted modules are declared
-	 * @return array of targeted module bindings
+	 * @return array of names of targeted modules
 	 */
-	public abstract IModuleBinding[] getOpenedTo(IPackageBinding packageBinding);
+	public abstract String[] getOpenedTo(IPackageBinding packageBinding);
 
 	/**
 	 * Returns the services used by this module.
@@ -99,6 +93,12 @@ public interface IModuleBinding extends IBinding {
 	 *
 	 * @return array of services
 	 */
-	public abstract Service[] getServices();
+	public abstract ITypeBinding[] getServices();
 
+	/**
+	 * Returns the implementations that implement this service.
+	 *
+	 * @return array of implementations
+	 */
+	public abstract ITypeBinding[] getImplementations(ITypeBinding service);
 }
\ No newline at end of file
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ModuleBinding.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ModuleBinding.java
index 87f28f4..6091c78 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ModuleBinding.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ModuleBinding.java
@@ -1,7 +1,6 @@
 package org.eclipse.jdt.core.dom;
 
-import java.util.ArrayList;
-import java.util.List;
+import java.util.LinkedHashMap;
 import org.eclipse.jdt.core.IJavaElement;
 import org.eclipse.jdt.core.compiler.CharOperation;
 import org.eclipse.jdt.internal.compiler.env.IModule.IPackageExport;
@@ -12,9 +11,9 @@ import org.eclipse.jdt.internal.core.NameLookup.Answer;
 import org.eclipse.jdt.internal.core.SearchableEnvironment;
 
 /**
- * @since 3.13 BETA_JAVA9
+ * Internal implementation of module bindings.
  */
-public class ModuleBinding implements IModuleBinding {
+class ModuleBinding implements IModuleBinding {
 
 	protected static final ITypeBinding[] NO_TYPE_BINDINGS = new ITypeBinding[0];
 	private String name = null;
@@ -26,11 +25,12 @@ public class ModuleBinding implements IModuleBinding {
 
 	private IAnnotationBinding[] annotations;
 	private IModuleBinding[] requiredModules;
-	private IPackageBinding[] exportedPackages;
-	private IModuleBinding[] exportTargets;
-	private IPackageBinding[] openPackages;
-	private IModuleBinding[] openTargets;
-	private Service[] services = null;
+	private IPackageBinding[] exports; // cached
+	private IPackageBinding[] opens; // cached
+	private ITypeBinding[] services; // cached
+	private LinkedHashMap<IPackageBinding, String[]> exportsStore;
+	private LinkedHashMap<IPackageBinding, String[]> opensStore;
+	private LinkedHashMap<ITypeBinding, ITypeBinding[]> servicesStore;
 
 	ModuleBinding(BindingResolver resolver, org.eclipse.jdt.internal.compiler.lookup.ModuleBinding binding) {
 		this.resolver = resolver;
@@ -141,7 +141,7 @@ public class ModuleBinding implements IModuleBinding {
 
 	@Override
 	public boolean isOpen() {
-		return this.isOpen; // TODO: info needs to be derived from compiler ast - bug 517269 awaited.
+		return this.isOpen;
 	}
 	@Override
 	public IModuleBinding[] getRequiredModules() {
@@ -157,47 +157,49 @@ public class ModuleBinding implements IModuleBinding {
 		return this.requiredModules = result;
 	}
 
-	private void getPacks(IPackageExport[] packs, List<IPackageBinding> packBindings, List<IModuleBinding> targets) {
+	interface IVisibilePackage {
+		org.eclipse.jdt.internal.compiler.lookup.PackageBinding getPack(char[] name);
+	}
+	private LinkedHashMap<IPackageBinding, String[]> getPacks(IPackageExport[] packs, IVisibilePackage ivp) {
+		LinkedHashMap<IPackageBinding, String[]> packMap = new LinkedHashMap<>();
 		for (IPackageExport pack : packs) {
-			org.eclipse.jdt.internal.compiler.lookup.PackageBinding packB = this.binding.getExportedPackage(pack.name());
-			if (packB == null) continue;
-			IPackageBinding p = this.resolver.getPackageBinding(packB);	
-			if (p != null)
-				packBindings.add(p);
-			//TODO: How do we resolve target modules? From the entire Java Model Scope? Wait for the new lookup environment.
+			org.eclipse.jdt.internal.compiler.lookup.PackageBinding packB = ivp.getPack(pack.name());
+			IPackageBinding p = packB != null ? this.resolver.getPackageBinding(packB) : null;	
+			if (p != null) {
+				packMap.put(p, CharOperation.toStrings(pack.targets()));
+			}
 		}
+		return packMap;
 	}
 
 	@Override
 	public IPackageBinding[] getExportedPackages() {
-		if (this.exportedPackages != null) 
-			return this.exportedPackages;
-	
-		List<IPackageBinding> packs = new ArrayList<>();
-		getPacks(this.binding.exports, packs, null);
-		return this.exportedPackages = packs.toArray(new IPackageBinding[0]);
+		if (this.exportsStore == null) {
+			this.exportsStore = getPacks(this.binding.exports, this.binding :: getExportedPackage);
+			this.exports = this.exportsStore.keySet().toArray(new IPackageBinding[0]);
+		}
+		return this.exports;
 	}
 
 	@Override
-	public IModuleBinding[] getExportedTo(IPackageBinding packageBinding) {
+	public String[] getExportedTo(IPackageBinding packageBinding) {
 		getExportedPackages();
-		return this.exportTargets;// TODO Auto-generated method stub
+		return this.exportsStore.get(packageBinding);
 	}
 
 	@Override
 	public IPackageBinding[] getOpenedPackages() {
-		if (this.openPackages != null) 
-			return this.openPackages;
-	
-		List<IPackageBinding> packs = new ArrayList<>();
-		getPacks(this.binding.exports, packs, null);
-		return this.openPackages = packs.toArray(new IPackageBinding[0]);
+		if (this.opensStore == null) {
+			this.opensStore = getPacks(this.binding.opens, this.binding :: getOpenedPackage);
+			this.opens = this.opensStore.keySet().toArray(new IPackageBinding[0]);
+		}
+		return this.opens;
 	}
 
 	@Override
-	public IModuleBinding[] getOpenedTo(IPackageBinding packageBinding) {
+	public String[] getOpenedTo(IPackageBinding packageBinding) {
 		getOpenedPackages();
-		return this.openTargets;// TODO Auto-generated method stub
+		return this.opensStore.get(packageBinding);
 	}
 
 	/*
@@ -218,20 +220,25 @@ public class ModuleBinding implements IModuleBinding {
 	}
 
 	@Override
-	public Service[] getServices() {
-		if (this.services == null) {
-			org.eclipse.jdt.internal.compiler.lookup.ModuleBinding.Service[] cServices = this.binding.getServices();
-			int len = cServices.length;
-			this.services = new Service[len];
-			for (int i = 0; i < len; ++i) {
-				org.eclipse.jdt.internal.compiler.lookup.ModuleBinding.Service cs = cServices[i];
-				Service s = this.services[i] = new Service();
-				s.service = this.resolver.getTypeBinding(cs.service);
-				s.implementations = getTypes(cs.implementations);
+	public ITypeBinding[] getServices() {
+		if (this.servicesStore == null) {
+			this.servicesStore = new LinkedHashMap<>();
+			for (org.eclipse.jdt.internal.compiler.lookup.ModuleBinding.Service cs : this.binding.getServices()) {
+				ITypeBinding s = this.resolver.getTypeBinding(cs.service);
+				if (s != null) {
+					this.servicesStore.put(s, getTypes(cs.implementations));
+				}
 			}
+			this.services = this.servicesStore.keySet().toArray(new ITypeBinding[0]);
 		}
 		return this.services;
 	}
+	@Override
+	public ITypeBinding[] getImplementations(ITypeBinding service) {
+		getServices();
+		return this.servicesStore.get(service);
+	}
+
 
 	/**
 	 * For debugging purpose only.
commit 47823422eba45476fbb1c7ac6844f82de383c7c6
Author: Markus Keller <markus_keller@ch.ibm.com>
Date:   Tue Jul 4 12:36:35 2017 +0200

    Bug 518794: [9] [dom ast] API problems with module bindings
    
    made IModuleBinding#getImplementations(ITypeBinding) ordered

3	3	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IModuleBinding.java
16	0	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ModuleBinding.java
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IModuleBinding.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IModuleBinding.java
index 0f8785c..14c402d 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IModuleBinding.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IModuleBinding.java
@@ -57,7 +57,7 @@ public interface IModuleBinding extends IBinding {
 	 * modules, otherwise returns an empty array.
 	 * 
 	 * @param packageBinding a package binding for which targeted modules are declared
-	 * @return array of names of targetted modules
+	 * @return array of names of targeted modules
 	 */
 	public abstract String[] getExportedTo(IPackageBinding packageBinding);
 
@@ -96,9 +96,9 @@ public interface IModuleBinding extends IBinding {
 	public abstract ITypeBinding[] getServices();
 
 	/**
-	 * Returns the implementations that implement this service.
+	 * Returns the implementations that implement the given service in this module.
 	 *
-	 * @return array of implementations
+	 * @return array of implementation type bindings, in declaration order
 	 */
 	public abstract ITypeBinding[] getImplementations(ITypeBinding service);
 }
\ No newline at end of file
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ModuleBinding.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ModuleBinding.java
index 6091c78..edc3f64 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ModuleBinding.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ModuleBinding.java
@@ -1,3 +1,18 @@
+/*******************************************************************************
+ * Copyright (c) 2017 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *
+ *******************************************************************************/
 package org.eclipse.jdt.core.dom;
 
 import java.util.LinkedHashMap;
@@ -12,6 +27,7 @@ import org.eclipse.jdt.internal.core.SearchableEnvironment;
 
 /**
  * Internal implementation of module bindings.
+ * @since 3.13 BETA_JAVA9
  */
 class ModuleBinding implements IModuleBinding {
 

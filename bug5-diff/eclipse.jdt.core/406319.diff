commit 1b53a525120894192853120c7678edb264d25490
Author: ssankaran <srikanth_sankaran@in.ibm.com>
Date:   Sun Apr 28 00:19:28 2013 +0530

    Fixed Bug 406319 - [1.8][compiler][codegen] Generate code for enclosing
    instance capture in lambda methods

49	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaExpressionsTest.java
8	8	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
1	1	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java
0	14	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java
23	11	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedThisReference.java
0	14	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
34	30	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java
39	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaExpressionsTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaExpressionsTest.java
index 6b5be75..54c9829 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaExpressionsTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaExpressionsTest.java
@@ -835,6 +835,55 @@ public void test033() {
 				},
 				"beefface");
 }
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=406319, [1.8][compiler][codegen] Generate code for enclosing instance capture in lambda methods. 
+public void test034() {
+	this.runConformTest(
+			new String[] {
+					"X.java",
+					"interface I {\n" +
+					"    int foo();\n" +
+					"}\n" +
+					"public class X {\n" +
+					"    int f = 1234;\n" +
+					"    void foo() {\n" +
+					"        int x = 4321;\n" +
+					"        I i = () -> x + f;\n" +
+					"        System.out.println(i.foo());\n" +
+					"    }\n" +
+					"    public static void main(String[] args) {\n" +
+					"		new X().foo();\n" +
+					"	}\n" +
+					"}\n",
+				},
+				"5555");
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=406319, [1.8][compiler][codegen] Generate code for enclosing instance capture in lambda methods. 
+public void test035() {
+	this.runConformTest(
+			new String[] {
+					"X.java",
+					"interface I {\n" +
+					"	void foo(int p, int q);\n" +
+					"}\n" +
+					"public class X {\n" +
+					"   int f;\n" +
+					"	void foo(int outerp) {\n" +
+					"       int locouter;\n" +
+					"		I i = (int p, int q)  -> {\n" +
+					"			class Local {\n" +
+					"				void foo() {\n" +
+					"               }\n" +
+					"			};\n" +
+					"			new Local();\n" +
+					"		};\n" +
+					"   }\n" +
+					"	public static void main(String[] args) {\n" +
+					"		System.out.println(\"OK\");\n" +
+					"	}\n" +
+					"}\n",
+				},
+				"OK");
+}
 public static Class testClass() {
 	return LambdaExpressionsTest.class;
 }
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
index 719464d..26ab29a 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
@@ -2887,7 +2887,7 @@ public void test087() {
 				"----------\n");
 }
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=382727, [1.8][compiler] Lambda expression parameters and locals cannot shadow variables from context
-public void _test088() {
+public void test088() {
 	// class inside lambda (!) redeclares a field.
 	this.runNegativeTest(
 			new String[] {
@@ -2913,7 +2913,7 @@ public void _test088() {
 				"----------\n");
 }
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=382727, [1.8][compiler] Lambda expression parameters and locals cannot shadow variables from context
-public void _test089() {
+public void test089() {
 	// class inside lambda redeclares outer method's argument.
 	this.runNegativeTest(
 			new String[] {
@@ -2944,7 +2944,7 @@ public void _test089() {
 				"----------\n");
 }
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=382727, [1.8][compiler] Lambda expression parameters and locals cannot shadow variables from context
-public void _test090() {
+public void test090() {
 	// class inside lambda redeclares outer method's local.
 	this.runNegativeTest(
 			new String[] {
@@ -2975,7 +2975,7 @@ public void _test090() {
 				"----------\n");
 }
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=382727, [1.8][compiler] Lambda expression parameters and locals cannot shadow variables from context
-public void _test091() {
+public void test091() {
 	// class inside lambda redeclares outer lambda's argument.
 	this.runNegativeTest(
 			new String[] {
@@ -3006,7 +3006,7 @@ public void _test091() {
 				"----------\n");
 }
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=382727, [1.8][compiler] Lambda expression parameters and locals cannot shadow variables from context
-public void _test092() {
+public void test092() {
 	// class inside lambda redeclares outer lambda's local.
 	this.runNegativeTest(
 			new String[] {
@@ -3038,7 +3038,7 @@ public void _test092() {
 				"----------\n");
 }
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=382727, [1.8][compiler] Lambda expression parameters and locals cannot shadow variables from context
-public void _test093() {
+public void test093() {
 	// local of class inside lambda redeclares a field.
 	this.runNegativeTest(
 			new String[] {
@@ -3075,7 +3075,7 @@ public void _test093() {
 				"----------\n");
 }
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=382727, [1.8][compiler] Lambda expression parameters and locals cannot shadow variables from context
-public void _test094() {
+public void test094() {
 	// local of class under lambda redeclares outer methods local.
 	this.runNegativeTest(
 			new String[] {
@@ -3112,7 +3112,7 @@ public void _test094() {
 				"----------\n");
 }
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=382727, [1.8][compiler] Lambda expression parameters and locals cannot shadow variables from context
-public void _test095() {
+public void test095() {
 	// local of class under lambda redeclares outer lambda's argument & local
 	this.runNegativeTest(
 			new String[] {
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
index 4c57df2..5a36264 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
@@ -1657,7 +1657,7 @@ public class ASTConverter18Test extends ConverterTestSetup {
 		LambdaExpression lambdaExpression = (LambdaExpression)expression;
 		assertEquals("() -> {\n  System.out.println(this);\n  I j=() -> {\n    System.out.println(this);\n    I k=() -> {\n      System.out.println(this);\n    }\n;\n  }\n;\n}\n", lambdaExpression.toString());
 		IMethodBinding binding = lambdaExpression.resolveMethodBinding();
-		assertEquals("private static void lambda$0() ", binding.toString());
+		assertEquals("private void lambda$0() ", binding.toString());
 		assertTrue(lambdaExpression.parameters().size() == 0);
 	}
 
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java
index 895a7f8..2a509dc 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java
@@ -99,7 +99,7 @@ public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, Fl
 	if (this.binding.declaringClass.isMemberType() && !this.binding.declaringClass.isStatic()) {
 		// allocating a non-static member type without an enclosing instance of parent type
 		// https://bugs.eclipse.org/bugs/show_bug.cgi?id=335845
-		currentScope.resetDeclaringClassMethodStaticFlag(this.binding.declaringClass.enclosingType());
+		currentScope.tagAsAccessingInstanceStateOf(this.binding.declaringClass.enclosingType());
 		// Reviewed for https://bugs.eclipse.org/bugs/show_bug.cgi?id=378674 :
 		// The corresponding problem (when called from static) is not produced until during code generation
 	}
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java
index 2fc0426..4e64752 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java
@@ -20,7 +20,6 @@ package org.eclipse.jdt.internal.compiler.ast;
 import org.eclipse.jdt.internal.compiler.CompilationResult;
 import org.eclipse.jdt.internal.compiler.DefaultErrorHandlingPolicies;
 import org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy;
-import org.eclipse.jdt.internal.compiler.codegen.CodeStream;
 import org.eclipse.jdt.internal.compiler.flow.FlowInfo;
 import org.eclipse.jdt.internal.compiler.impl.Constant;
 import org.eclipse.jdt.internal.compiler.lookup.ArrayBinding;
@@ -47,7 +46,6 @@ public abstract class FunctionalExpression extends Expression {
 	protected CompilationResult compilationResult;
 	protected BlockScope enclosingScope;
 	protected boolean ellipsisArgument;
-	protected int ordinal;
 	protected static IErrorHandlingPolicy silentErrorHandlingPolicy = DefaultErrorHandlingPolicies.ignoreAllProblems();
 	
 	public FunctionalExpression(CompilationResult compilationResult) {
@@ -171,16 +169,4 @@ public abstract class FunctionalExpression extends Expression {
 	public int nullStatus(FlowInfo flowInfo) {
 		return FlowInfo.NON_NULL;
 	}
-
-	public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired) {
-		int pc = codeStream.position;
-		if (valueRequired) {
-			codeStream.aconst_null(); // TODO: Real code
-		}
-		codeStream.recordPositionsFrom(pc, this.sourceStart);
-	}
-
-	public char[] signature() {
-		return null;
-	}
 }
\ No newline at end of file
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
index 5ab7b62..0a15fb4 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
@@ -44,6 +44,7 @@ import org.eclipse.jdt.internal.compiler.lookup.MethodScope;
 import org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding;
 import org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding;
 import org.eclipse.jdt.internal.compiler.lookup.Scope;
+import org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding;
 import org.eclipse.jdt.internal.compiler.lookup.SyntheticArgumentBinding;
 import org.eclipse.jdt.internal.compiler.lookup.TagBits;
 import org.eclipse.jdt.internal.compiler.lookup.TypeBinding;
@@ -72,6 +73,7 @@ public class LambdaExpression extends FunctionalExpression implements ReferenceC
 	private LambdaExpression original = this;
 	private SyntheticArgumentBinding[] outerLocalVariables = NO_SYNTHETIC_ARGUMENTS;
 	private int outerLocalVariablesSlotSize = 0;
+	public boolean shouldCaptureInstance = false;
 	private static final SyntheticArgumentBinding [] NO_SYNTHETIC_ARGUMENTS = new SyntheticArgumentBinding[0];
 	
 	public LambdaExpression(CompilationResult compilationResult, Argument [] arguments, Statement body) {
@@ -85,20 +87,34 @@ public class LambdaExpression extends FunctionalExpression implements ReferenceC
 	}
 	
 	public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired) {
-		this.binding = currentScope.enclosingSourceType().addSyntheticMethod(this);
+		if (this.shouldCaptureInstance) {
+			this.binding.modifiers &= ~ClassFileConstants.AccStatic;
+		} else {
+			this.binding.modifiers |= ClassFileConstants.AccStatic;
+		}
+		SourceTypeBinding sourceType = currentScope.enclosingSourceType();
+		this.binding = sourceType.addSyntheticMethod(this);
 		int pc = codeStream.position;
 		int invokeDynamicNumber = codeStream.classFile.recordBootstrapMethod(this);
 		StringBuffer signature = new StringBuffer();
 		signature.append('(');
+		if (this.shouldCaptureInstance) {
+			codeStream.aload_0();
+			signature.append(sourceType.signature());
+		}
 		for (int i = 0, length = this.outerLocalVariables == null ? 0 : this.outerLocalVariables.length; i < length; i++) {
-			signature.append(this.outerLocalVariables[i].type.signature());
-			LocalVariableBinding capturedOuterLocal = this.outerLocalVariables[i].actualOuterLocalVariable;
+			SyntheticArgumentBinding syntheticArgument = this.outerLocalVariables[i];
+			if (this.shouldCaptureInstance) {
+				syntheticArgument.resolvedPosition++;
+			}
+			signature.append(syntheticArgument.type.signature());
+			LocalVariableBinding capturedOuterLocal = syntheticArgument.actualOuterLocalVariable;
 			VariableBinding[] path = currentScope.getEmulationPath(capturedOuterLocal);
 			codeStream.generateOuterAccess(path, this, capturedOuterLocal, currentScope);
 		}
 		signature.append(')');
 		signature.append(this.expectedType.signature());
-		codeStream.invokeDynamic(invokeDynamicNumber, this.outerLocalVariablesSlotSize, 1, TypeConstants.ANONYMOUS_METHOD, signature.toString().toCharArray());
+		codeStream.invokeDynamic(invokeDynamicNumber, (this.shouldCaptureInstance ? 1 : 0) + this.outerLocalVariablesSlotSize, 1, TypeConstants.ANONYMOUS_METHOD, signature.toString().toCharArray());
 		codeStream.recordPositionsFrom(pc, this.sourceStart);		
 	}
 
@@ -142,7 +158,7 @@ public class LambdaExpression extends FunctionalExpression implements ReferenceC
 		if (!haveDescriptor && argumentsTypeElided) 
 			return null; // FUBAR, bail out...
 
-		this.binding = new MethodBinding(ClassFileConstants.AccPrivate | ClassFileConstants.AccStatic | ClassFileConstants.AccSynthetic | ExtraCompilerModifiers.AccUnresolved,
+		this.binding = new MethodBinding(ClassFileConstants.AccPrivate | ClassFileConstants.AccSynthetic | ExtraCompilerModifiers.AccUnresolved,
 							TypeConstants.ANONYMOUS_METHOD, // will be fixed up later.
 							haveDescriptor ? this.descriptor.returnType : null, 
 							Binding.NO_PARAMETERS, // for now. 
@@ -718,10 +734,6 @@ public class LambdaExpression extends FunctionalExpression implements ReferenceC
 		classFile.completeMethodInfo(this.binding, methodAttributeOffset, attributeNumber);
 	}
 	
-	public char[] signature() {
-		return this.binding.signature();
-	}
-
 	public void addSyntheticArgument(LocalVariableBinding actualOuterLocalVariable) {
 		
 		if (this.original != this || this.binding == null) 
@@ -735,7 +747,7 @@ public class LambdaExpression extends FunctionalExpression implements ReferenceC
 		}
 		System.arraycopy(this.outerLocalVariables, 0, this.outerLocalVariables = new SyntheticArgumentBinding[newSlot + 1], 0, newSlot);
 		this.outerLocalVariables[newSlot] = syntheticLocal = new SyntheticArgumentBinding(actualOuterLocalVariable);
-		syntheticLocal.resolvedPosition = this.outerLocalVariablesSlotSize + (this.binding.isStatic() ? 0 : 1);
+		syntheticLocal.resolvedPosition = this.outerLocalVariablesSlotSize; // may need adjusting later if we need to generate an instance method for the lambda.
 		syntheticLocal.declaringScope = this.scope;
 		int parameterCount = this.binding.parameters.length;
 		TypeBinding [] newParameters = new TypeBinding[parameterCount + 1];
@@ -765,4 +777,4 @@ public class LambdaExpression extends FunctionalExpression implements ReferenceC
 }
 class IncongruentLambdaException extends RuntimeException {
 	private static final long serialVersionUID = 4145723509219836114L;
-}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java
index 995a17b..5d99b07 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java
@@ -79,7 +79,7 @@ public class QualifiedAllocationExpression extends AllocationExpression {
 				ReferenceBinding superclass = this.binding.declaringClass.superclass();
 				if (superclass != null && superclass.isMemberType() && !superclass.isStatic()) {
 					// creating an anonymous type of a non-static member type without an enclosing instance of parent type
-					currentScope.resetDeclaringClassMethodStaticFlag(superclass.enclosingType());
+					currentScope.tagAsAccessingInstanceStateOf(superclass.enclosingType());
 					// Reviewed for https://bugs.eclipse.org/bugs/show_bug.cgi?id=378674 :
 					// The corresponding problem (when called from static) is not produced until during code generation
 				}
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedThisReference.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedThisReference.java
index 0acbf4e..cb006e1 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedThisReference.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedThisReference.java
@@ -110,7 +110,7 @@ public class QualifiedThisReference extends ThisReference {
 			return this.resolvedType;
 		} else {
 			// Mark all methods between here and the declared type as not static
-			scope.resetDeclaringClassMethodStaticFlag(this.currentCompatibleType);
+			scope.tagAsAccessingInstanceStateOf(this.currentCompatibleType);
 		}
 
 		// Ensure one cannot write code like: B() { super(B.this); }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
index e42d003..0ed81b3 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
@@ -53,7 +53,6 @@ import org.eclipse.jdt.internal.compiler.util.SimpleLookupTable;
 
 public class ReferenceExpression extends FunctionalExpression implements InvocationSite {
 	
-	private static final char[] LPAR = {'('};
 	private static char [] LAMBDA = { 'l', 'a', 'm', 'b', 'd', 'a' };
 	public Expression lhs;
 	public TypeReference [] typeArguments;
@@ -515,17 +514,4 @@ public class ReferenceExpression extends FunctionalExpression implements Invocat
 		tSam = t.getSingleAbstractMethod(this.enclosingScope);
 		return resultExpression.tIsMoreSpecific(tSam.returnType, sSam.returnType);
 	}
-	public char[] signature() {
-		char [] signature = this.binding.signature();
-		if (this.binding.isConstructor()) {
-			// The implementation function is a constructor, which returns void, but the adjusted method type does return the new instance
-			signature = CharOperation.concat(CharOperation.subarray(signature, 0, signature.length - 1), this.binding.declaringClass.signature());
-		} else {
-			// Adjust for captured variables - if not static and if receiver is not captured
-			if (!(this.binding.isStatic() || this.haveReceiver)) {
-				signature = CharOperation.concat(LPAR, this.binding.declaringClass.signature(), CharOperation.subarray(signature, 1, -1));
-			}
-		}
-		return signature;
-	}
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java
index ddea507..32952a9 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java
@@ -88,6 +88,20 @@ public final void addAnonymousType(TypeDeclaration anonymousType, ReferenceBindi
 	anonymousClassScope.buildAnonymousTypeBinding(
 		enclosingSourceType(),
 		superBinding);
+	
+	/* Tag any enclosing lambdas as instance capturing. Strictly speaking they need not be, unless the local/anonymous type references enclosing instance state.
+	   but the types themselves track enclosing types regardless of whether the state is accessed or not. This creates a mismatch in expectations in code generation
+	   time, if we choose to make the lambda method static. To keep things simple and avoid a messy rollback, we force the lambda to be an instance method under 
+	   this situation. However if per source, the lambda occurs in a static context, we would generate a static synthetic method.
+	*/
+	MethodScope methodScope = methodScope();
+	while (methodScope != null && methodScope.referenceContext instanceof LambdaExpression) {
+		LambdaExpression lambda = (LambdaExpression) methodScope.referenceContext;
+		if (!lambda.scope.isStatic) {
+			lambda.shouldCaptureInstance = true;
+		}
+		methodScope = methodScope.enclosingMethodScope();
+	}
 }
 
 /* Create the class scope & binding for the local type.
@@ -96,6 +110,16 @@ public final void addLocalType(TypeDeclaration localType) {
 	ClassScope localTypeScope = new ClassScope(this, localType);
 	addSubscope(localTypeScope);
 	localTypeScope.buildLocalTypeBinding(enclosingSourceType());
+	
+	// See comment in addAnonymousType.
+	MethodScope methodScope = methodScope();
+	while (methodScope != null && methodScope.referenceContext instanceof LambdaExpression) {
+		LambdaExpression lambda = (LambdaExpression) methodScope.referenceContext;
+		if (!lambda.scope.isStatic) {
+			lambda.shouldCaptureInstance = true;
+		}
+		methodScope = methodScope.enclosingMethodScope();
+	}
 }
 
 /* Insert a local variable into a given scope, updating its position
@@ -997,6 +1021,11 @@ public String toString(int tab) {
  */
 public void resetEnclosingMethodStaticFlag() {
 	MethodScope methodScope = methodScope();
+	while (methodScope != null && methodScope.referenceContext instanceof LambdaExpression) {
+		LambdaExpression lambda = (LambdaExpression) methodScope.referenceContext;
+		lambda.shouldCaptureInstance = true;
+		methodScope = methodScope.enclosingMethodScope();
+	}
 	if (methodScope != null) {
 		if (methodScope.referenceContext instanceof MethodDeclaration) {
 			MethodDeclaration methodDeclaration = (MethodDeclaration) methodScope.referenceContext;
@@ -1004,6 +1033,11 @@ public void resetEnclosingMethodStaticFlag() {
 		} else if (methodScope.referenceContext instanceof TypeDeclaration) {
 			// anonymous type, find enclosing method
 			methodScope = methodScope.enclosingMethodScope();
+			while (methodScope != null && methodScope.referenceContext instanceof LambdaExpression) {
+				LambdaExpression lambda = (LambdaExpression) methodScope.referenceContext;
+				lambda.shouldCaptureInstance = true;
+				methodScope = methodScope.enclosingMethodScope();
+			}
 			if (methodScope != null && methodScope.referenceContext instanceof MethodDeclaration) {
 				MethodDeclaration methodDeclaration = (MethodDeclaration) methodScope.referenceContext;
 				methodDeclaration.bits &= ~ASTNode.CanBeStatic;
@@ -1012,36 +1046,6 @@ public void resetEnclosingMethodStaticFlag() {
 	}
 }
 
-// https://bugs.eclipse.org/bugs/show_bug.cgi?id=376550
-/**
- * This method is used to reset the CanBeStatic on all enclosing methods until the method 
- * belonging to the enclosingInstanceType
- * @param enclosingInstanceType type of which an enclosing instance is required in the code.
- */
-public void resetDeclaringClassMethodStaticFlag(TypeBinding enclosingInstanceType) {
-	MethodScope methodScope = methodScope();
-	if (methodScope != null && methodScope.referenceContext instanceof TypeDeclaration) {
-		if (!methodScope.enclosingReceiverType().isCompatibleWith(enclosingInstanceType)) { // unless invoking a method of the local type ...
-			// anonymous type, find enclosing method
-			methodScope = methodScope.enclosingMethodScope();
-		}
-	}
-	while (methodScope != null && methodScope.referenceContext instanceof MethodDeclaration) {
-		MethodDeclaration methodDeclaration = (MethodDeclaration) methodScope.referenceContext;
-		methodDeclaration.bits &= ~ASTNode.CanBeStatic;
-		ClassScope enclosingClassScope = methodScope.enclosingClassScope();
-		if (enclosingClassScope != null) {
-			TypeDeclaration type = enclosingClassScope.referenceContext;
-			if (type != null && type.binding != null && enclosingInstanceType != null
-					&& !type.binding.isCompatibleWith(enclosingInstanceType.original()))
-			{
-				methodScope = enclosingClassScope.enclosingMethodScope();
-				continue;
-			}
-		}
-		break;
-	}
-}
 
 private List trackingVariables; // can be null if no resources are tracked
 /** Used only during analyseCode and only for checking if a resource was closed in a finallyBlock. */
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
index 1e34c03..3e4e6d6 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
@@ -1827,7 +1827,7 @@ public abstract class Scope {
 														name,
 														ProblemReasons.NonStaticReferenceInStaticContext);
 											} else if (methodScope != null) {
-												methodScope.resetEnclosingMethodStaticFlag();
+												tagAsAccessingInstanceStateOf(fieldBinding.declaringClass);
 											}
 										}
 										if (receiverType == fieldBinding.declaringClass || compilerOptions().complianceLevel >= ClassFileConstants.JDK1_4) {
@@ -2169,7 +2169,7 @@ public abstract class Scope {
 												? ProblemReasons.NonStaticReferenceInConstructorInvocation
 												: ProblemReasons.NonStaticReferenceInStaticContext);
 									} else if (!methodBinding.isStatic() && methodScope != null) {
-										methodScope.resetDeclaringClassMethodStaticFlag(receiverType);
+										methodScope.tagAsAccessingInstanceStateOf(receiverType);
 									}
 									if (inheritedHasPrecedence
 											|| receiverType == methodBinding.declaringClass
@@ -4456,4 +4456,41 @@ public abstract class Scope {
 		}
 		return resolutionScope;
 	}
+	// https://bugs.eclipse.org/bugs/show_bug.cgi?id=376550
+	/**
+	 * This method is used to reset the CanBeStatic on all enclosing methods until the method 
+	 * belonging to the enclosingInstanceType
+	 * @param enclosingType type of which an enclosing instance is required in the code.
+	 */
+	public void tagAsAccessingInstanceStateOf(ReferenceBinding enclosingType) {
+		MethodScope methodScope = methodScope();
+		if (methodScope != null && methodScope.referenceContext instanceof TypeDeclaration) {
+			if (!methodScope.enclosingReceiverType().isCompatibleWith(enclosingType)) { // unless invoking a method of the local type ...
+				// anonymous type, find enclosing method
+				methodScope = methodScope.enclosingMethodScope();
+			}
+		}
+		while (methodScope != null) {
+			while (methodScope != null && methodScope.referenceContext instanceof LambdaExpression) {
+				LambdaExpression lambda = (LambdaExpression) methodScope.referenceContext;
+				lambda.shouldCaptureInstance = true;
+				methodScope = methodScope.enclosingMethodScope();
+			}
+			if (methodScope != null) {
+				if (methodScope.referenceContext instanceof MethodDeclaration) {
+					MethodDeclaration methodDeclaration = (MethodDeclaration) methodScope.referenceContext;
+					methodDeclaration.bits &= ~ASTNode.CanBeStatic;
+				}
+				ClassScope enclosingClassScope = methodScope.enclosingClassScope();
+				if (enclosingClassScope != null) {
+					TypeDeclaration type = enclosingClassScope.referenceContext;
+					if (type != null && type.binding != null && enclosingType != null && !type.binding.isCompatibleWith(enclosingType.original())) {
+						methodScope = enclosingClassScope.enclosingMethodScope();
+						continue;
+					}
+				}
+				break;
+			}
+		}
+	}
 }
commit 6d8869e83e824d8000b96c2ed573e9ea9d8e9f2a
Author: ssankaran <srikanth_sankaran@in.ibm.com>
Date:   Sun Apr 28 02:05:52 2013 +0530

    Additional tests for Bug 406319 - [1.8][compiler][codegen] Generate code
    for enclosing instance capture in lambda methods

99	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaExpressionsTest.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaExpressionsTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaExpressionsTest.java
index 54c9829..e95e550 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaExpressionsTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaExpressionsTest.java
@@ -884,6 +884,105 @@ public void test035() {
 				},
 				"OK");
 }
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=406319, [1.8][compiler][codegen] Generate code for enclosing instance capture in lambda methods. 
+public void test036() {
+	this.runConformTest(
+			new String[] {
+					"X.java",
+					"interface I {\n" +
+					"    String foo(String x, String y);\n" +
+					"}\n" +
+					"public class X {\n" +
+					"    String xf = \"Lambda \";\n" +
+					"    String x() {\n" +
+					"    	String xl = \"code \";\n" +
+					"    	class Y {\n" +
+					"			String yf = \"generation \";\n" +
+					"			String y () {\n" +
+					"				String yl = \"with \";\n" +
+					"				class Z {\n" +
+					"					String zf = \"instance \";\n" +
+					"					String z () {\n" +
+					"						String zl = \"and \";\n" +
+					"						class P {\n" +
+					"							String pf = \"local \";\n" +
+					"							String p () {\n" +
+					"								String pl = \"capture \";\n" +
+					"								I i = (x1, y1) -> {\n" +
+					"									return (((I) ((x2, y2) -> {\n" +
+					"										return ( ((I) ((x3, y3) -> {\n" +
+					"											return xf + xl + yf + yl + zf + zl + pf + pl + x3 + y3;\n" +
+					"										})).foo(\"works \", \"fine \") + x2 + y2);\n" +
+					"									})).foo(\"in \", \"the \") + x1 + y1);\n" +
+					"								};\n" +
+					"								return i.foo(\"eclipse \", \"compiler \");\n" +
+					"							}\n" +
+					"						}\n" +
+					"						return new P().p();\n" +
+					"					}\n" +
+					"				}\n" +
+					"				return new Z().z();\n" +
+					"			}\n" +
+					"    	}\n" +
+					"    	return new Y().y();\n" +
+					"    }\n" +
+					"    public static void main(String[] args) {\n" +
+					"	System.out.println(new X().x());\n" +
+					"    }\n" +
+					"}\n",
+				},
+				"Lambda code generation with instance and local capture works fine in the eclipse compiler");
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=406319, [1.8][compiler][codegen] Generate code for enclosing instance capture in lambda methods. 
+public void test037() {
+	this.runConformTest(
+			new String[] {
+					"X.java",
+					"interface I {\n" +
+					"    String foo(String x, String y);\n" +
+					"}\n" +
+					"public class X {\n" +
+					"    String xf = \"Lambda \";\n" +
+					"    String x() {\n" +
+					"    	String xl = \"code \";\n" +
+					"    	class Y {\n" +
+					"			String yf = \"generation \";\n" +
+					"			String y () {\n" +
+					"				String yl = \"with \";\n" +
+					"				class Z {\n" +
+					"					String zf = \"instance \";\n" +
+					"					String z () {\n" +
+					"						String zl = \"and \";\n" +
+					"						class P {\n" +
+					"							String pf = \"local \";\n" +
+					"							String p () {\n" +
+					"								String pl = \"capture \";\n" +
+					"								I i = (x1, y1) -> {\n" +
+					"									return (((I) ((x2, y2) -> {\n" +
+					"										return ( ((I) ((x3, y3) -> {\n" +
+					"                                           String exclaim = \"!\";\n" +
+					"											return xf + xl + yf + yl + zf + zl + pf + pl + x3 + y3 + x2 + y2 + x1 + y1 + exclaim;\n" +
+					"										})).foo(\"works \", \"fine \"));\n" +
+					"									})).foo(\"in \", \"the \"));\n" +
+					"								};\n" +
+					"								return i.foo(\"eclipse \", \"compiler \");\n" +
+					"							}\n" +
+					"						}\n" +
+					"						return new P().p();\n" +
+					"					}\n" +
+					"				}\n" +
+					"				return new Z().z();\n" +
+					"			}\n" +
+					"    	}\n" +
+					"    	return new Y().y();\n" +
+					"    }\n" +
+					"    public static void main(String[] args) {\n" +
+					"	System.out.println(new X().x());\n" +
+					"    }\n" +
+					"}\n",
+				},
+				"Lambda code generation with instance and local capture works fine in the eclipse compiler !");
+}
 public static Class testClass() {
 	return LambdaExpressionsTest.class;
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
index 3e4e6d6..77bfcc1 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
@@ -2169,7 +2169,7 @@ public abstract class Scope {
 												? ProblemReasons.NonStaticReferenceInConstructorInvocation
 												: ProblemReasons.NonStaticReferenceInStaticContext);
 									} else if (!methodBinding.isStatic() && methodScope != null) {
-										methodScope.tagAsAccessingInstanceStateOf(receiverType);
+										tagAsAccessingInstanceStateOf(receiverType);
 									}
 									if (inheritedHasPrecedence
 											|| receiverType == methodBinding.declaringClass

commit 7974f4a5911052c39ead36f51d3952ab684e5130
Author: M N Palat <manpalat@in.ibm.com>
Date:   Mon Feb 3 11:54:07 2014 +0530

    Fix for Bug 426462 [1.8][dom ast] TypeParameter#annotations() should be
    #modifiers()

4	4	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
2	2	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTMatcherTest.java
1	1	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java
2	2	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java
19	19	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeParameter.java
2	2	org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/NaiveASTFlattener.java
4	3	org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java
2	2	org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteFlattener.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
index 49cff24..246616d 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
@@ -1441,8 +1441,8 @@ public class ASTConverter18Test extends ConverterTestSetup {
 
 		// TypeParameter with TYPE_USE and TYPE_PARAMETER annotation combination.
 		assertEquals("@Marker1 @Marker3 F extends @Marker1 @Marker2 File", typeParameter.toString());
-		assertTrue(typeParameter.annotations().size() == 2);
-		Annotation annotation = (Annotation)typeParameter.annotations().get(1);
+		assertTrue(typeParameter.modifiers().size() == 2);
+		Annotation annotation = (Annotation)typeParameter.modifiers().get(1);
 		assertEquals("@Marker3", annotation.toString());
 		IAnnotationBinding abinding = annotation.resolveAnnotationBinding();
 		assertEquals("@Marker3()", abinding.toString());
@@ -1530,8 +1530,8 @@ public class ASTConverter18Test extends ConverterTestSetup {
 		typedeclaration = (TypeDeclaration) getASTNode(cu, 1);
 		typeParameter = (TypeParameter) typedeclaration.typeParameters().get(0);
 		assertEquals("@Marker3 T", typeParameter.toString());
-		assertTrue(typeParameter.annotations().size() == 1);
-		annotation = (Annotation)typeParameter.annotations().get(0);
+		assertTrue(typeParameter.modifiers().size() == 1);
+		annotation = (Annotation)typeParameter.modifiers().get(0);
 		assertEquals("@Marker3", annotation.toString());
 		abinding = annotation.resolveAnnotationBinding();
 		assertEquals("@Marker3()", abinding.toString());
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTMatcherTest.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTMatcherTest.java
index 996d5b0..c2afdcd 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTMatcherTest.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTMatcherTest.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2013 IBM Corporation and others.
+ * Copyright (c) 2000, 2014 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -1602,7 +1602,7 @@ public class ASTMatcherTest extends org.eclipse.jdt.core.tests.junit.extension.T
 		TypeDeclaration x1 = this.ast.newTypeDeclaration();
 		TypeParameter x2 = this.ast.newTypeParameter();
 		x2.setName(this.ast.newSimpleName("T"));
-		x2.annotations().add(this.ANO1);
+		x2.modifiers().add(this.ANO1);
 		x1.typeParameters().add(x2);
 		x1.setName(this.N2);
 		basicMatch(x1);
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java
index f9588b9..f1692e6 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java
@@ -3485,7 +3485,7 @@ class ASTConverter {
 					org.eclipse.jdt.internal.compiler.ast.Annotation typeAnnotation = annotations[i];
 					if (typeAnnotation != null) {
 						Annotation annotation = convert(typeAnnotation);
-						typeParameter.annotations().add(annotation);
+						typeParameter.modifiers().add(annotation);
 					}
 				}
 		}
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java
index c5d4e23..6163308 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2013 IBM Corporation and others.
+ * Copyright (c) 2000, 2014 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -2428,7 +2428,7 @@ public class ASTMatcher {
 		}
 		TypeParameter o = (TypeParameter) other;
 		int level = node.getAST().apiLevel;
-		return (level >= AST.JLS8 ? safeSubtreeListMatch(node.annotations(), o.annotations()) : true)
+		return (level >= AST.JLS8 ? safeSubtreeListMatch(node.modifiers(), o.modifiers()) : true)
 				&& safeSubtreeMatch(node.getName(), o.getName())
 				&& safeSubtreeListMatch(node.typeBounds(), o.typeBounds());
 	}
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeParameter.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeParameter.java
index 7938c79..aeb3950 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeParameter.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeParameter.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2003, 2013 IBM Corporation and others.
+ * Copyright (c) 2003, 2014 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -33,11 +33,11 @@ import java.util.List;
 public class TypeParameter extends ASTNode {
 
 	/**
-	 * The "annotations" structural property of this node type (element type: {@link Annotation}) (added in JLS8 API).
+	 * The "modifiers" structural property of this node type (element type: {@link IExtendedModifier}) (added in JLS8 API).
 	 * @since 3.9 BETA_JAVA8
 	 */
-	public static final ChildListPropertyDescriptor ANNOTATIONS_PROPERTY =
-			new ChildListPropertyDescriptor(TypeParameter.class, "annotations", Annotation.class, CYCLE_RISK); //$NON-NLS-1$
+	public static final ChildListPropertyDescriptor MODIFIERS_PROPERTY =
+			new ChildListPropertyDescriptor(TypeParameter.class, "modifiers", IExtendedModifier.class, CYCLE_RISK); //$NON-NLS-1$
 	
 	/**
 	 * The "name" structural property of this node type (child type: {@link SimpleName}).
@@ -74,7 +74,7 @@ public class TypeParameter extends ASTNode {
 		
 		propertyList = new ArrayList(4);
 		createPropertyList(TypeParameter.class, propertyList);
-		addProperty(ANNOTATIONS_PROPERTY, propertyList);
+		addProperty(MODIFIERS_PROPERTY, propertyList);
 		addProperty(NAME_PROPERTY, propertyList);
 		addProperty(TYPE_BOUNDS_PROPERTY, propertyList);
 		PROPERTY_DESCRIPTORS_8_0 = reapPropertyList(propertyList);
@@ -115,11 +115,11 @@ public class TypeParameter extends ASTNode {
 		new ASTNode.NodeList(TYPE_BOUNDS_PROPERTY);
 
 	/**
-	 * The type annotations (element type: {@link Annotation}).
+	 * The modifiers (element type: {@link IExtendedModifier}).
 	 * Null in JLS < 8. Added in JLS8; defaults to an empty list
 	 * (see constructor).
 	 */
-	private ASTNode.NodeList annotations = null;
+	private ASTNode.NodeList modifiers = null;
 	
 	/**
 	 * Creates a new unparented node for a parameterized type owned by the
@@ -135,7 +135,7 @@ public class TypeParameter extends ASTNode {
 		super(ast);
 	    unsupportedIn2();
 	    if (ast.apiLevel >= AST.JLS8) {
-			this.annotations = new ASTNode.NodeList(ANNOTATIONS_PROPERTY);
+			this.modifiers = new ASTNode.NodeList(MODIFIERS_PROPERTY);
 		}
 	}
 
@@ -166,8 +166,8 @@ public class TypeParameter extends ASTNode {
 	 * Method declared on ASTNode.
 	 */
 	final List internalGetChildListProperty(ChildListPropertyDescriptor property) {
-		if (property == ANNOTATIONS_PROPERTY) {
-			return annotations();
+		if (property == MODIFIERS_PROPERTY) {
+			return modifiers();
 		}
 		if (property == TYPE_BOUNDS_PROPERTY) {
 			return typeBounds();
@@ -190,8 +190,8 @@ public class TypeParameter extends ASTNode {
 		TypeParameter result = new TypeParameter(target);
 		result.setSourceRange(getStartPosition(), getLength());
 		if (this.ast.apiLevel >= AST.JLS8) {
-			result.annotations().addAll(
-					ASTNode.copySubtrees(target, annotations()));
+			result.modifiers().addAll(
+					ASTNode.copySubtrees(target, modifiers()));
 		}
 		result.setName((SimpleName) ((ASTNode) getName()).clone(target));
 		result.typeBounds().addAll(
@@ -215,7 +215,7 @@ public class TypeParameter extends ASTNode {
 		if (visitChildren) {
 			// visit children in normal left to right reading order
 			if (this.ast.apiLevel >= AST.JLS8) {
-				acceptChildren(visitor, this.annotations);
+				acceptChildren(visitor, this.modifiers);
 			}
 			acceptChild(visitor, getName());
 			acceptChildren(visitor, this.typeBounds);
@@ -292,19 +292,19 @@ public class TypeParameter extends ASTNode {
 	}
 	
 	/**
-	 * Returns the live ordered list of annotations for this TypeParameter node (added in JLS8 API).
+	 * Returns the live ordered list of modifiers for this TypeParameter node (added in JLS8 API).
 	 *
-	 * @return the live list of annotations (element type: {@link Annotation})
+	 * @return the live list of modifiers (element type: {@link IExtendedModifier})
 	 * @exception UnsupportedOperationException if this operation is used
 	 *            in a JLS2, JLS3 or JLS4 AST
 	 * @since 3.9 BETA_JAVA8
 	 */
-	public List annotations() {
+	public List modifiers() {
 		// more efficient than just calling unsupportedIn2_3_4() to check
-		if (this.annotations == null) {
+		if (this.modifiers == null) {
 			unsupportedIn2_3_4();
 		}
-		return this.annotations;
+		return this.modifiers;
 	}
 
 	/* (omit javadoc for this method)
@@ -321,7 +321,7 @@ public class TypeParameter extends ASTNode {
 	int treeSize() {
 		return
 			memSize()
-			+ (this.annotations == null ? 0 : this.annotations.listSize())
+			+ (this.modifiers == null ? 0 : this.modifiers.listSize())
 			+ (this.typeVariableName == null ? 0 : getName().treeSize())
 			+ this.typeBounds.listSize();
 	}
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/NaiveASTFlattener.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/NaiveASTFlattener.java
index 6189a1f..5aeba12 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/NaiveASTFlattener.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/NaiveASTFlattener.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2013 IBM Corporation and others.
+ * Copyright (c) 2000, 2014 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -1816,7 +1816,7 @@ public class NaiveASTFlattener extends ASTVisitor {
 	 */
 	public boolean visit(TypeParameter node) {
 		if (node.getAST().apiLevel() >= AST.JLS8) {
-			visitAnnotationsList(node.annotations());
+			printModifiers(node.modifiers());
 		}
 		node.getName().accept(this);
 		if (!node.typeBounds().isEmpty()) {
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java
index 4171ff3..fa81fea 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteAnalyzer.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2013 IBM Corporation and others.
+ * Copyright (c) 2000, 2014 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -1533,7 +1533,8 @@ public final class ASTRewriteAnalyzer extends ASTVisitor {
 		}
 
 		Prefix formatterPrefix;
-		if (property == SingleVariableDeclaration.MODIFIERS2_PROPERTY || isAnnotationsProperty)
+		if (property == SingleVariableDeclaration.MODIFIERS2_PROPERTY || 
+				property == TypeParameter.MODIFIERS_PROPERTY || isAnnotationsProperty)
 			formatterPrefix= this.formatter.PARAM_ANNOTATION_SEPARATION;
 		else
 			formatterPrefix= this.formatter.ANNOTATION_SEPARATION;
@@ -4243,7 +4244,7 @@ public final class ASTRewriteAnalyzer extends ASTVisitor {
 		}
 		int pos;
 		if (node.getAST().apiLevel() >= AST.JLS8) {
-			pos = rewriteTypeAnnotations(node, TypeParameter.ANNOTATIONS_PROPERTY, node.getStartPosition());
+			pos = rewriteModifiers2(node, TypeParameter.MODIFIERS_PROPERTY, node.getStartPosition());
 		}
 		pos= rewriteRequiredNode(node, TypeParameter.NAME_PROPERTY);
 		rewriteNodeList(node, TypeParameter.TYPE_BOUNDS_PROPERTY, pos, " extends ", " & "); //$NON-NLS-1$ //$NON-NLS-2$
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteFlattener.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteFlattener.java
index 8d1eaff..87019c1 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteFlattener.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/ASTRewriteFlattener.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2013 IBM Corporation and others.
+ * Copyright (c) 2000, 2014 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -1526,7 +1526,7 @@ public class ASTRewriteFlattener extends ASTVisitor {
 	 */
 	public boolean visit(TypeParameter node) {
 		if (node.getAST().apiLevel() >= AST.JLS8) {
-			visitList(node, TypeParameter.ANNOTATIONS_PROPERTY, String.valueOf(' '), Util.EMPTY_STRING, String.valueOf(' '));
+			visitList(node, TypeParameter.MODIFIERS_PROPERTY, String.valueOf(' '), Util.EMPTY_STRING, String.valueOf(' '));
 		}
 		getChildNode(node, TypeParameter.NAME_PROPERTY).accept(this);
 		visitList(node, TypeParameter.TYPE_BOUNDS_PROPERTY, " & ", " extends ", Util.EMPTY_STRING); //$NON-NLS-1$ //$NON-NLS-2$
commit 0c9f31ea2ca6f747fc91ab022c7efc052d0b1c5a
Author: Markus Keller <markus_keller@ch.ibm.com>
Date:   Mon Feb 3 12:19:34 2014 +0100

    Bug 426462 [1.8][dom ast] TypeParameter#annotations() should be
    #modifiers()

2	2	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeParameter.java
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeParameter.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeParameter.java
index aeb3950..4063874 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeParameter.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeParameter.java
@@ -19,11 +19,11 @@ import java.util.ArrayList;
 import java.util.List;
 
 /**
- * Type parameter node (added in JLS3 API).
+ * Type parameter declaration node (added in JLS3 API).
  * 
  * <pre>
  * TypeParameter:
- *    { Annotation } TypeVariable [ <b>extends</b> Type { <b>&</b> Type } ]
+ *    { ExtendedModifier } Identifier [ <b>extends</b> Type { <b>&</b> Type } ]
  * </pre>
  *
  * @since 3.1

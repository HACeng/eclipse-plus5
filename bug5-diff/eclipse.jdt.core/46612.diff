commit 4035933f39c4520e06f50a4e9cc11a4372f69ff5
Author: Jim Desrivieres <jdesrivieres>
Date:   Sat Nov 15 02:12:57 2003 +0000

    Add get/setModifiers to BodyDeclaration (bug 46612)

39	4	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BodyDeclaration.java
8	17	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/FieldDeclaration.java
6	15	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Initializer.java
10	15	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java
9	21	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeDeclaration.java
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BodyDeclaration.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BodyDeclaration.java
index 64c6545..5925646 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BodyDeclaration.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BodyDeclaration.java
@@ -31,9 +31,10 @@ package org.eclipse.jdt.core.dom;
  * </pre>
  * </p>
  * <p>
- * Most types of body declarations can carry a Javadoc comment; Initializer
- * is the only ones that does not. The source range for body declarations
- * always includes the Javadoc comment if present.
+ * All types of body declarations carry modifiers, although they differ in
+ * which modifiers are allowed. Most types of body declarations can carry a
+ * Javadoc comment; Initializer is the only ones that does not. The source range
+ * for body declarations always includes the Javadoc comment if present.
  * </p>
  * 
  * @since 2.0
@@ -47,6 +48,14 @@ public abstract class BodyDeclaration extends ASTNode {
 	private Javadoc optionalJavadoc = null;
 
 	/**
+	 * The modifiers; bit-wise or of Modifier flags.
+	 * Defaults to none.
+	 * 
+	 * @since 3.0
+	 */
+	private int modifiers = Modifier.NONE;
+	
+	/**
 	 * Creates a new AST node for a body declaration node owned by the 
 	 * given AST.
 	 * <p>
@@ -79,11 +88,37 @@ public abstract class BodyDeclaration extends ASTNode {
 		this.optionalJavadoc = javadoc;
 	}
 
+	/**
+	 * Returns the modifiers explicitly specified on this declaration.
+	 * The allowable modifiers differ for each type of body declaration.
+	 * 
+	 * @return the bit-wise or of <code>Modifier</code> constants
+	 * @see Modifier
+	 * @since 3.0
+	 */ 
+	public int getModifiers() {
+		return modifiers;
+	}
+
+	/**
+	 * Sets the modifiers explicitly specified on this declaration.
+	 * The allowable modifiers differ for each type of body declaration.
+	 * 
+	 * @return the bit-wise or of <code>Modifier</code> constants
+	 * @see Modifier
+	 * @exception IllegalArgumentException if the modifiers are illegal
+	 * @since 3.0
+	 */ 
+	public void setModifiers(int modifiers) {
+		modifying();
+		this.modifiers = modifiers;
+	}
+
 	/* (omit javadoc for this method)
 	 * Method declared on ASTNode.
 	 */
 	int memSize() {
-		return BASE_NODE_SIZE + 1 * 4;
+		return BASE_NODE_SIZE + 2 * 4;
 	}
 }
 
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/FieldDeclaration.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/FieldDeclaration.java
index 5bb9528..680b7af 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/FieldDeclaration.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/FieldDeclaration.java
@@ -46,12 +46,6 @@ public class FieldDeclaration extends BodyDeclaration {
 		| Modifier.TRANSIENT;
 
 	/**
-	 * The modifiers; bit-wise or of Modifier flags.
-	 * Defaults to none.
-	 */
-	private int modifiers = Modifier.NONE;
-		
-	/**
 	 * The base type; lazily initialized; defaults to an unspecified,
 	 * legal type.
 	 */
@@ -127,33 +121,30 @@ public class FieldDeclaration extends BodyDeclaration {
 	 * Returns the modifiers explicitly specified on this declaration.
 	 * <p>
 	 * The following modifiers are valid for fields: public, private, protected,
-	 * static, final, volatile, and transient.
+	 * static, final, volatile, and transient. Note that deprecated is not included.
 	 * </p>
 	 * 
-	 * @return the bit-wise or of <code>Modifier</code> constants
-	 * @see Modifier
+	 * @since 2.0
 	 */ 
 	public int getModifiers() {
-		return modifiers;
+		// method needed only for javadoc
+		return super.getModifiers();
 	}
 
 	/**
 	 * Sets the modifiers explicitly specified on this declaration.
 	 * <p>
 	 * The following modifiers are valid for fields: public, private, protected,
-	 * static, final, volatile, and transient.
+	 * static, final, volatile, and transient. Note that deprecated is not included.
 	 * </p>
 	 * 
-	 * @return the bit-wise or of <code>Modifier</code> constants
-	 * @see Modifier
-	 * @exception IllegalArgumentException if the modifiers are illegal
+	 * @since 2.0
 	 */ 
 	public void setModifiers(int modifiers) {
 		if ((modifiers & ~LEGAL_MODIFIERS) != 0) {
 			throw new IllegalArgumentException();
 		}
-		modifying();
-		this.modifiers = modifiers;
+		super.setModifiers(modifiers);
 	}
 
 	/**
@@ -230,7 +221,7 @@ public class FieldDeclaration extends BodyDeclaration {
 	 * Method declared on ASTNode.
 	 */
 	int memSize() {
-		return super.memSize() + 3 * 4;
+		return super.memSize() + 2 * 4;
 	}
 	
 	/* (omit javadoc for this method)
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Initializer.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Initializer.java
index bfac9bf..515caeb 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Initializer.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Initializer.java
@@ -29,12 +29,6 @@ public class Initializer extends BodyDeclaration {
 	private static final int LEGAL_MODIFIERS = Modifier.STATIC;
 	
 	/**
-	 * The modifiers; bit-wise or of Modifier flags.
-	 * Defaults to none.
-	 */
-	private int modifiers = 0;
-
-	/**
 	 * The initializer body; lazily initialized; defaults to an empty block.
 	 */
 	private Block body = null;
@@ -99,11 +93,11 @@ public class Initializer extends BodyDeclaration {
 	 * Note that static is the only meaningful modifier for an initializer.
 	 * </p>
 	 * 
-	 * @return the bit-wise or of <code>Modifier</code> constants
-	 * @see Modifier
+	 * @since 2.0
 	 */ 
 	public int getModifiers() {
-		return modifiers;
+		// method needed only for javadoc
+		return super.getModifiers();
 	}
 
 	/**
@@ -112,16 +106,13 @@ public class Initializer extends BodyDeclaration {
 	 * Note that static is the only meaningful modifier for an initializer.
 	 * </p>
 	 * 
-	 * @return the bit-wise or of <code>Modifier</code> constants
-	 * @see Modifier
-	 * @exception IllegalArgumentException if the modifiers are illegal
+	 * @since 2.0
 	 */ 
 	public void setModifiers(int modifiers) {
 		if ((modifiers & ~LEGAL_MODIFIERS) != 0) {
 			throw new IllegalArgumentException();
 		}
-		modifying();
-		this.modifiers = modifiers;
+		super.setModifiers(modifiers);
 	}
 
 	/**
@@ -162,7 +153,7 @@ public class Initializer extends BodyDeclaration {
 	 * Method declared on ASTNode.
 	 */
 	int memSize() {
-		return super.memSize() + 2 * 4;
+		return super.memSize() + 1 * 4;
 	}
 	
 	/* (omit javadoc for this method)
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java
index 6131966..c651747 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java
@@ -60,12 +60,6 @@ public class MethodDeclaration extends BodyDeclaration {
 	private boolean isConstructor = false;
 	
 	/**
-	 * The modifiers; bit-wise or of Modifier flags.
-	 * Defaults to none.
-	 */
-	private int modifiers = Modifier.NONE;
-	
-	/**
 	 * The method name; lazily initialized; defaults to an unspecified,
 	 * legal Java identifier.
 	 */
@@ -204,14 +198,17 @@ public class MethodDeclaration extends BodyDeclaration {
 	/**
 	 * Returns the modifiers explicitly specified on this declaration.
 	 * <p>
+	 * The following modifiers are valid for methods: public, private, protected,
+	 * static, final, synchronized, native, abstract, and strictfp.
+	 * For constructors, only public, private, and protected are meaningful.
 	 * Note that deprecated is not included.
 	 * </p>
 	 * 
-	 * @return the bit-wise or of Modifier constants
-	 * @see Modifier
+	 * @since 2.0
 	 */ 
 	public int getModifiers() {
-		return modifiers;
+		// method needed only for javadoc
+		return super.getModifiers();
 	}
 	
 	/**
@@ -220,18 +217,16 @@ public class MethodDeclaration extends BodyDeclaration {
 	 * The following modifiers are valid for methods: public, private, protected,
 	 * static, final, synchronized, native, abstract, and strictfp.
 	 * For constructors, only public, private, and protected are meaningful.
+	 * Note that deprecated is not included.
 	 * </p>
 	 * 
-	 * @param modifiers the bit-wise or of Modifier constants
-	 * @see Modifier
-	 * @exception IllegalArgumentException if the modifiers are illegal
+	 * @since 2.0
 	 */ 
 	public void setModifiers(int modifiers) {
 		if ((modifiers & ~LEGAL_MODIFIERS) != 0) {
 			throw new IllegalArgumentException();
 		}
-		modifying();
-		this.modifiers = modifiers;
+		super.setModifiers(modifiers);
 	}
 
 //	public List<TypeParameter> typeParameters(); // JSR-014
@@ -467,7 +462,7 @@ public class MethodDeclaration extends BodyDeclaration {
 	 * Method declared on ASTNode.
 	 */
 	int memSize() {
-		return super.memSize() + 8 * 4;
+		return super.memSize() + 7 * 4;
 	}
 	
 	/* (omit javadoc for this method)
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeDeclaration.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeDeclaration.java
index 6974901..e213e7a 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeDeclaration.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeDeclaration.java
@@ -62,12 +62,6 @@ public class TypeDeclaration extends BodyDeclaration {
 	private boolean isInterface = false;
 	
 	/**
-	 * The modifiers; bit-wise or of Modifier flags.
-	 * Defaults to none.
-	 */
-	private int modifiers = Modifier.NONE;
-	
-	/**
 	 * The type name; lazily initialized; defaults to a unspecified,
 	 * legal Java class identifier.
 	 */
@@ -190,37 +184,31 @@ public class TypeDeclaration extends BodyDeclaration {
 	/**
 	 * Returns the modifiers explicitly specified on this declaration.
 	 * <p>
-	 * Note that deprecated is not included.
+	 * The following modifiers are valid for types: public, private, protected,
+	 * static, final, abstract, and strictfp. Note that deprecated is not included.
 	 * </p>
 	 * 
-	 * @return the bit-wise or of Modifier constants
-	 * @see Modifier
+	 * @since 2.0
 	 */ 
 	public int getModifiers() {
-		return modifiers;
+		// method needed only for javadoc
+		return super.getModifiers();
 	}
 	
 	/**
 	 * Sets the modifiers explicitly specified on this declaration.
 	 * <p>
 	 * The following modifiers are valid for types: public, private, protected,
-	 * static, final, abstract, and strictfp.
-	 * </p>
-	 * <p>
-	 * Only a subset of modifiers are legal in any given situation.
-	 * Note that deprecated is not included.
+	 * static, final, abstract, and strictfp. Note that deprecated is not included.
 	 * </p>
 	 * 
-	 * @param modifiers the bit-wise or of Modifier constants
-	 * @see Modifier
-	 * @exception IllegalArgumentException if the modifiers are illegal
+	 * @since 2.0
 	 */ 
 	public void setModifiers(int modifiers) {
 		if ((modifiers & ~LEGAL_MODIFIERS) != 0) {
 			throw new IllegalArgumentException();
 		}
-		modifying();
-		this.modifiers = modifiers;
+		super.setModifiers(modifiers);
 	}
 
 	/**
@@ -506,7 +494,7 @@ public class TypeDeclaration extends BodyDeclaration {
 	 * Method declared on ASTNode.
 	 */
 	int memSize() {
-		return super.memSize() + 6 * 4;
+		return super.memSize() + 5 * 4;
 	}
 	
 	/* (omit javadoc for this method)

commit de85d73a10e0280a45c9d9fcbbd2b35068e06127
Author: Stephan Herrmann <stephan.herrmann@berlin.de>
Date:   Mon Feb 25 21:42:46 2013 +0100

    bug 401030 - [1.8][null] Null analysis support for lambda methods.

147	1	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java
13	8	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java
73	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java
index 52979e3..0fceb12 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java
@@ -17,6 +17,7 @@ import java.util.Map;
 import junit.framework.Test;
 
 import org.eclipse.jdt.core.JavaCore;
+import org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants;
 
 // see bug 186342 - [compiler][null] Using annotations for null checking
 public class NullAnnotationTest extends AbstractNullAnnotationTest {
@@ -28,7 +29,7 @@ public NullAnnotationTest(String name) {
 // Static initializer to specify tests subset using TESTS_* static variables
 // All specified tests which do not belong to the class are skipped...
 static {
-//		TESTS_NAMES = new String[] { "test_parameter_specification_inheritance_01" };
+//		TESTS_NAMES = new String[] { "testLambda_0" };
 //		TESTS_NUMBERS = new int[] { 561 };
 //		TESTS_RANGE = new int[] { 1, 2049 };
 }
@@ -5772,6 +5773,151 @@ public void testBug388281_10() {
 		"	      ^^^^\n" + 
 		"Null type mismatch: required \'@NonNull Object\' but the provided value is null\n" + 
 		"----------\n"); 
+}
+
+// Lambda with elided args inherits null contract from the super method
+public void testLambda_01() {
+	if (this.complianceLevel >= ClassFileConstants.JDK1_8) {
+		Map customOptions = getCompilerOptions();
+		runNegativeTestWithLibs(
+			new String[] {
+				"ISAM.java",
+				"import org.eclipse.jdt.annotation.*;\n" +
+				"public interface ISAM {\n" +
+				"	@NonNull String toString(@NonNull String prefix, @Nullable Object o);\n" +
+				"}\n",
+				"X.java",
+				"public class X {\n" +
+				"	void test() {\n" +
+				"		ISAM printer = (p,o) -> p.concat(o.toString());\n" +
+				"	}\n" +
+				"}\n"
+			}, 
+			customOptions,
+			"----------\n" + 
+			"1. WARNING in X.java (at line 3)\n" + 
+			"	ISAM printer = (p,o) -> p.concat(o.toString());\n" + 
+			"	                        ^^^^^^^^^^^^^^^^^^^^^^\n" + 
+			"Null type safety: The expression of type String needs unchecked conversion to conform to \'@NonNull String\'\n" + 
+			"----------\n" + 
+			"2. ERROR in X.java (at line 3)\n" + 
+			"	ISAM printer = (p,o) -> p.concat(o.toString());\n" + 
+			"	                                 ^\n" + 
+			"Potential null pointer access: The variable o may be null at this location\n" + 
+			"----------\n");
 	}
+}
+
+// Lambda with declared args violates null contract of super
+public void testLambda_02() {
+	if (this.complianceLevel >= ClassFileConstants.JDK1_8) {
+		Map customOptions = getCompilerOptions();
+		runNegativeTestWithLibs(
+			new String[] {
+				"ISAM.java",
+				"import org.eclipse.jdt.annotation.*;\n" +
+				"public interface ISAM {\n" +
+				"	void process(@NonNull Object nn, @Nullable Object n, Object u);\n" +
+				"}\n",
+				"X.java",
+				"import org.eclipse.jdt.annotation.*;\n" +
+				"public class X {\n" +
+				"	void test() {\n" +
+						// try to override, illegal except for unchanged o1:
+				"		ISAM printer = (@NonNull  Object o1, @NonNull 	Object o2, @NonNull	 Object o3) -> System.out.println(2);\n" +
+				"	}\n" +
+				"}\n"
+			}, 
+			customOptions,
+			"----------\n" + 
+			"1. ERROR in X.java (at line 4)\n" + 
+			"	ISAM printer = (@NonNull  Object o1, @NonNull 	Object o2, @NonNull	 Object o3) -> System.out.println(2);\n" + 
+			"	                                     ^^^^^^^^^^^^^^^^\n" + 
+			"Illegal redefinition of parameter o2, inherited method from ISAM declares this parameter as @Nullable\n" + 
+			"----------\n" + 
+			"2. ERROR in X.java (at line 4)\n" + 
+			"	ISAM printer = (@NonNull  Object o1, @NonNull 	Object o2, @NonNull	 Object o3) -> System.out.println(2);\n" + 
+			"	                                              	           ^^^^^^^^^^^^^^^^\n" + 
+			"Illegal redefinition of parameter o3, inherited method from ISAM does not constrain this parameter\n" + 
+			"----------\n");
+	}
+}
 
+// Lambda with declared args inherits / modifies contract of super
+public void testLambda_03() {
+	if (this.complianceLevel >= ClassFileConstants.JDK1_8) {
+		Map customOptions = getCompilerOptions();
+		runNegativeTestWithLibs(
+			new String[] {
+				"ISAM.java",
+				"import org.eclipse.jdt.annotation.*;\n" +
+				"public interface ISAM {\n" +
+				"	void process(@NonNull Object nn, @Nullable Object n, Object u);\n" +
+				"}\n",
+				"X.java",
+				"import org.eclipse.jdt.annotation.*;\n" +
+				"public class X {\n" +
+				"	void test() {\n" +
+						// fill-in all from super:
+				"		ISAM printer1 = (Object 		  o1, 			Object o2, 			 Object o3) \n" +
+				"							-> System.out.println(o1.toString()+o2.toString()+o3.toString());\n" +
+						// legal overrides: (however, @NonNull -> @Nullable is probably nonsense)
+				"		ISAM printer3 = (@Nullable Object o1, @Nullable Object o2, @Nullable Object o3) \n" +
+				"							-> System.out.println(o1.toString()+o2.toString()+o3.toString());\n" +
+				"	}\n" +
+				"}\n"
+			}, 
+			customOptions,
+			"----------\n" + 
+			"1. ERROR in X.java (at line 5)\n" + 
+			"	-> System.out.println(o1.toString()+o2.toString()+o3.toString());\n" + 
+			"	                                    ^^\n" + 
+			"Potential null pointer access: The variable o2 may be null at this location\n" + 
+			"----------\n" + 
+			"2. ERROR in X.java (at line 7)\n" + 
+			"	-> System.out.println(o1.toString()+o2.toString()+o3.toString());\n" + 
+			"	                      ^^\n" + 
+			"Potential null pointer access: The variable o1 may be null at this location\n" + 
+			"----------\n" + 
+			"3. ERROR in X.java (at line 7)\n" + 
+			"	-> System.out.println(o1.toString()+o2.toString()+o3.toString());\n" + 
+			"	                                    ^^\n" + 
+			"Potential null pointer access: The variable o2 may be null at this location\n" + 
+			"----------\n" + 
+			"4. ERROR in X.java (at line 7)\n" + 
+			"	-> System.out.println(o1.toString()+o2.toString()+o3.toString());\n" + 
+			"	                                                  ^^\n" + 
+			"Potential null pointer access: The variable o3 may be null at this location\n" + 
+			"----------\n");
+	}
+}
+
+// Lambda with declared args has illegal @NonNull an primitive argument
+public void testLambda_04() {
+	if (this.complianceLevel >= ClassFileConstants.JDK1_8) {
+		Map customOptions = getCompilerOptions();
+		runNegativeTestWithLibs(
+			new String[] {
+				"ISAM.java",
+				"public interface ISAM {\n" +
+				"	void process(int i);\n" +
+				"}\n",
+				"X.java",
+				"import org.eclipse.jdt.annotation.*;\n" +
+				"public class X {\n" +
+				"	void test() {\n" +
+				"		ISAM printer1 = (@NonNull int i) \n" +
+				"							-> System.out.println(i);\n" +
+				"	}\n" +
+				"}\n"
+			}, 
+			customOptions,
+			"----------\n" + 
+			"1. ERROR in X.java (at line 4)\n" + 
+			"	ISAM printer1 = (@NonNull int i) \n" + 
+			"	                 ^^^^^^^^^^^^\n" + 
+			"The nullness annotation @NonNull is not applicable for the primitive type int\n" + 
+			"----------\n");
+	}
+}
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java
index 87db0ed..453c532 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java
@@ -19,6 +19,7 @@
  *								bug 382353 - [1.8][compiler] Implementation property modifiers should be accepted on default methods.
  *								bug 392099 - [1.8][compiler][null] Apply null annotation on types for null analysis
  *								bug 388281 - [compiler][null] inheritance of null annotations as an option
+ *								bug 401030 - [1.8][null] Null analysis support for lambda methods.
  *******************************************************************************/
 package org.eclipse.jdt.internal.compiler.ast;
 
@@ -89,10 +90,14 @@ public abstract class AbstractMethodDeclaration
 	 * we create the argument binding and resolve annotations in order to compute null annotation tagbits.
 	 */
 	public void createArgumentBindings() {
-		if (this.arguments != null && this.binding != null) {
-			for (int i = 0, length = this.arguments.length; i < length; i++) {
-				Argument argument = this.arguments[i];
-				argument.createBinding(this.scope, this.binding.parameters[i]);
+		createArgumentBindings(this.arguments, this.binding, this.scope);
+	}
+	// version for invocation from LambdaExpression:
+	static void createArgumentBindings(Argument[] arguments, MethodBinding binding, MethodScope scope) {
+		if (arguments != null && binding != null) {
+			for (int i = 0, length = arguments.length; i < length; i++) {
+				Argument argument = arguments[i];
+				argument.createBinding(scope, binding.parameters[i]);
 				// createBinding() has resolved annotations, now transfer nullness info from the argument to the method:
 				// prefer type annotation:
 				long argTypeTagBits = (argument.type.resolvedType.tagBits & TagBits.AnnotationNullMASK);
@@ -101,11 +106,11 @@ public abstract class AbstractMethodDeclaration
 					argTypeTagBits = (argument.binding.tagBits & TagBits.AnnotationNullMASK);
 				}
 				if (argTypeTagBits != 0) {
-					if (this.binding.parameterNonNullness == null) {
-						this.binding.parameterNonNullness = new Boolean[this.arguments.length];
-						this.binding.tagBits |= TagBits.IsNullnessKnown;
+					if (binding.parameterNonNullness == null) {
+						binding.parameterNonNullness = new Boolean[arguments.length];
+						binding.tagBits |= TagBits.IsNullnessKnown;
 					}
-					this.binding.parameterNonNullness[i] = Boolean.valueOf(argTypeTagBits == TagBits.AnnotationNonNull);
+					binding.parameterNonNullness[i] = Boolean.valueOf(argTypeTagBits == TagBits.AnnotationNonNull);
 				}
 			}
 		}
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
index 6244599..7f4b761 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
@@ -14,6 +14,8 @@
  *     Jesper S Moller - Contributions for
  *							bug 382701 - [1.8][compiler] Implement semantic analysis of Lambda expressions & Reference expression
  *							bug 382721 - [1.8][compiler] Effectively final variables needs special treatment
+ *     Stephan Herrmann - Contribution for
+ *							bug 401030 - [1.8][null] Null analysis support for lambda methods.
  *******************************************************************************/
 package org.eclipse.jdt.internal.compiler.ast;
 
@@ -30,6 +32,7 @@ import org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding;
 import org.eclipse.jdt.internal.compiler.lookup.Binding;
 import org.eclipse.jdt.internal.compiler.lookup.BlockScope;
 import org.eclipse.jdt.internal.compiler.lookup.ExtraCompilerModifiers;
+import org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment;
 import org.eclipse.jdt.internal.compiler.lookup.MethodBinding;
 import org.eclipse.jdt.internal.compiler.lookup.MethodScope;
 import org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding;
@@ -197,6 +200,13 @@ public class LambdaExpression extends FunctionalExpression implements ProblemSev
 			TypeBinding leafType = returnType.leafComponentType();
 			if (leafType instanceof ReferenceBinding && (((ReferenceBinding) leafType).modifiers & ExtraCompilerModifiers.AccGenericSignature) != 0)
 				this.binding.modifiers |= ExtraCompilerModifiers.AccGenericSignature;
+		} // TODO (stephan): else? (can that happen?)
+
+		if (!argumentsTypeElided && blockScope.compilerOptions().isAnnotationBasedNullAnalysisEnabled) {
+			AbstractMethodDeclaration.createArgumentBindings(this.arguments, this.binding, this.scope);
+			validateNullAnnotations();
+			// no application of null-ness default, hence also no warning regarding redundant null annotation
+			mergeParameterNullAnnotations(blockScope);
 		}
 
 		this.binding.modifiers &= ~ExtraCompilerModifiers.AccUnresolved;
@@ -230,7 +240,8 @@ public class LambdaExpression extends FunctionalExpression implements ProblemSev
 						FlowInfo.DEAD_END);
 
 		// nullity and mark as assigned
-		AbstractMethodDeclaration.analyseArguments(lambdaInfo, this.arguments, this.binding);
+		MethodBinding methodWithParameterDeclaration = argumentsTypeElided() ? this.descriptor : this.binding;
+		AbstractMethodDeclaration.analyseArguments(lambdaInfo, this.arguments, methodWithParameterDeclaration);
 
 		if (this.arguments != null) {
 			for (int i = 0, count = this.arguments.length; i < count; i++) {
@@ -252,10 +263,71 @@ public class LambdaExpression extends FunctionalExpression implements ProblemSev
 					this.scope.problemReporter().shouldReturn(returnTypeBinding, this);
 				}
 			}
+		} else { // Expression
+			if (currentScope.compilerOptions().isAnnotationBasedNullAnalysisEnabled 
+					&& flowInfo.reachMode() == FlowInfo.REACHABLE)
+			{
+				Expression expression = (Expression)this.body;
+				checkAgainstNullAnnotation(flowContext, expression, expression.nullStatus(flowInfo, flowContext));
+			}
 		}
 		return flowInfo;
 	}
 
+	// cf. AbstractMethodDeclaration.validateNullAnnotations()
+	// pre: !argumentTypeElided()
+	void validateNullAnnotations() {
+		// null annotations on parameters?
+		if (this.binding != null && this.binding.parameterNonNullness != null) {
+			int length = this.binding.parameters.length;
+			for (int i=0; i<length; i++) {
+				if (this.binding.parameterNonNullness[i] != null) {
+					long nullAnnotationTagBit =  this.binding.parameterNonNullness[i].booleanValue()
+							? TagBits.AnnotationNonNull : TagBits.AnnotationNullable;
+					this.scope.validateNullAnnotation(nullAnnotationTagBit, this.arguments[i].type, this.arguments[i].annotations);
+				}
+			}
+		}
+	}
+
+	// pre: !argumentTypeElided()
+	// try to merge null annotations from descriptor into binding, complaining about any incompatibilities found
+	private void mergeParameterNullAnnotations(BlockScope currentScope) {
+		if (this.descriptor.parameterNonNullness == null)
+			return;
+		if (this.binding.parameterNonNullness == null) {
+			this.binding.parameterNonNullness = this.descriptor.parameterNonNullness;
+			return;
+		}
+		LookupEnvironment env = currentScope.environment();
+		Boolean[] ourNonNullness = this.binding.parameterNonNullness;
+		Boolean[] descNonNullness = this.descriptor.parameterNonNullness;
+		int len = Math.min(ourNonNullness.length, descNonNullness.length);
+		for (int i = 0; i < len; i++) {
+			if (ourNonNullness[i] == null) {
+				ourNonNullness[i] = descNonNullness[i];
+			} else if (ourNonNullness[i] != descNonNullness[i]) {
+				if (ourNonNullness[i] == Boolean.TRUE) { // requested @NonNull not provided
+					char[][] inheritedAnnotationName = null;
+					if (descNonNullness[i] == Boolean.FALSE)
+						inheritedAnnotationName = env.getNullableAnnotationName();
+					currentScope.problemReporter().illegalRedefinitionToNonNullParameter(this.arguments[i], this.descriptor.declaringClass, inheritedAnnotationName);
+				}
+			}			
+		}
+	}
+
+	// simplified version of ReturnStatement.checkAgainstNullAnnotation()
+	void checkAgainstNullAnnotation(FlowContext flowContext, Expression expression, int nullStatus) {
+		if (nullStatus != FlowInfo.NON_NULL) {
+			// if we can't prove non-null check against declared null-ness of the descriptor method:
+			// Note that this.binding never has a return type declaration, always inherit null-ness from the descriptor
+			if ((this.descriptor.tagBits & TagBits.AnnotationNonNull) != 0) {
+				flowContext.recordNullityMismatch(this.scope, expression, expression.resolvedType, this.descriptor.returnType, nullStatus);
+			}
+		}
+	}
+
 	public StringBuffer printExpression(int tab, StringBuffer output) {
 		int parenthesesCount = (this.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;
 		String suffix = ""; //$NON-NLS-1$
commit 7f980ceab757037c68fa499102c3002c2efaa926
Author: Stephan Herrmann <stephan.herrmann@berlin.de>
Date:   Thu Feb 28 13:54:57 2013 +0100

    bug 401030 - [1.8][null] Null analysis support for lambda methods.

65	1	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java
8	5	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
2	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java
11	6	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalTypeBinding.java
14	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java
index 0fceb12..f245fd2 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2010, 2012 GK Software AG and others.
+ * Copyright (c) 2010, 2013 GK Software AG and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -5920,4 +5920,68 @@ public void testLambda_04() {
 			"----------\n");
 	}
 }
+
+// Lambda inherits null contract and has block with return statement 
+public void testLambda_05() {
+	if (this.complianceLevel >= ClassFileConstants.JDK1_8) {
+		Map customOptions = getCompilerOptions();
+		runNegativeTestWithLibs(
+			new String[] {
+				"ISAM.java",
+				"import org.eclipse.jdt.annotation.*;\n" +
+				"public interface ISAM {\n" +
+				"	@NonNull String toString(Object o);\n" +
+				"}\n",
+				"X.java",
+				"public class X {\n" +
+				"	void test() {\n" +
+				"		ISAM printer = (o) -> {\n" +
+				"			System.out.print(13);\n" +
+				"			return null; // error\n" +
+				"		};\n" +
+				"	}\n" +
+				"}\n"
+			}, 
+			customOptions,
+			"----------\n" + 
+			"1. ERROR in X.java (at line 5)\n" + 
+			"	return null; // error\n" + 
+			"	       ^^^^\n" + 
+			"Null type mismatch: required \'@NonNull String\' but the provided value is null\n" + 
+			"----------\n");
+	}
+}
+// Lambda has no descriptor (overriding method from Object), don't bail out with NPE during analysis
+public void testLambda_05a() {
+	if (this.complianceLevel >= ClassFileConstants.JDK1_8) {
+		Map customOptions = getCompilerOptions();
+		runNegativeTestWithLibs(
+			new String[] {
+				"ISAM.java",
+				"import org.eclipse.jdt.annotation.*;\n" +
+				"public interface ISAM {\n" +
+				"	@NonNull String toString();\n" +
+				"}\n",
+				"X.java",
+				"public class X {\n" +
+				"	void test() {\n" +
+				"		ISAM printer = () -> {\n" +
+				"			System.out.print(13);\n" +
+				"			return null;\n" +
+				"		};\n" +
+				"	}\n" +
+				"}\n"
+			}, 
+			customOptions,
+			"----------\n" +
+			"1. ERROR in X.java (at line 3)\n" +
+			"	ISAM printer = () -> {\n" +
+			"			System.out.print(13);\n" +
+			"			return null;\n" +
+			"		};\n" +
+			"	               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" +
+			"The target type of this expression must be a functional interface\n" +
+			"----------\n");
+	}
+}
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
index 33793b1..fb1df1d 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
@@ -236,11 +236,14 @@ public class LambdaExpression extends FunctionalExpression {
 				this.binding.modifiers |= ExtraCompilerModifiers.AccGenericSignature;
 		} // TODO (stephan): else? (can that happen?)
 
-		if (!argumentsTypeElided && blockScope.compilerOptions().isAnnotationBasedNullAnalysisEnabled) {
-			AbstractMethodDeclaration.createArgumentBindings(this.arguments, this.binding, this.scope);
-			validateNullAnnotations();
-			// no application of null-ness default, hence also no warning regarding redundant null annotation
-			mergeParameterNullAnnotations(blockScope);
+		if (haveDescriptor && blockScope.compilerOptions().isAnnotationBasedNullAnalysisEnabled) {
+			if (!argumentsTypeElided) {
+				AbstractMethodDeclaration.createArgumentBindings(this.arguments, this.binding, this.scope);
+				validateNullAnnotations();
+				// no application of null-ness default, hence also no warning regarding redundant null annotation
+				mergeParameterNullAnnotations(blockScope);
+			}
+			this.binding.tagBits |= (this.descriptor.tagBits & TagBits.AnnotationNullMASK);
 		}
 
 		this.binding.modifiers &= ~ExtraCompilerModifiers.AccUnresolved;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java
index ffdc3cc..3ec6b0e 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java
@@ -26,6 +26,7 @@
  *								bug 388996 - [compiler][resource] Incorrect 'potential resource leak'
  *								bug 394768 - [compiler][resource] Incorrect resource leak warning when creating stream in conditional
  *								bug 383368 - [compiler][null] syntactic null analysis for field references
+ *								bug 401030 - [1.8][null] Null analysis support for lambda methods. 
  *     Jesper S Moller - Contributions for
  *								bug 382701 - [1.8][compiler] Implement semantic analysis of Lambda expressions & Reference expression
  *******************************************************************************/
@@ -161,7 +162,7 @@ void checkAgainstNullAnnotation(BlockScope scope, FlowContext flowContext, int n
 		long tagBits;
 		MethodBinding methodBinding;
 		try {
-			methodBinding = scope.methodScope().referenceMethod().binding;
+			methodBinding = scope.methodScope().referenceMethodBinding();
 			tagBits = methodBinding.tagBits;
 		} catch (NullPointerException npe) {
 			// chain of references in try-block has several potential nulls;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalTypeBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalTypeBinding.java
index 359c707..df18c6b 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalTypeBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalTypeBinding.java
@@ -1,19 +1,24 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2012 IBM Corporation and others.
+ * Copyright (c) 2000, 2013 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *     IBM Corporation - initial API and implementation
- *     Stephan Herrmann - Contribution for  bug 365662 - [compiler][null] warn on contradictory and redundant null annotations
+ *     Stephan Herrmann - Contributions for
+ *								bug 365662 - [compiler][null] warn on contradictory and redundant null annotations
+ *								bug 401030 - [1.8][null] Null analysis support for lambda methods. 
  *******************************************************************************/
 package org.eclipse.jdt.internal.compiler.lookup;
 
 import org.eclipse.jdt.core.compiler.CharOperation;
 import org.eclipse.jdt.internal.compiler.ast.ASTNode;
-import org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;
 import org.eclipse.jdt.internal.compiler.ast.Annotation;
 import org.eclipse.jdt.internal.compiler.ast.CaseStatement;
 import org.eclipse.jdt.internal.compiler.ast.TypeDeclaration;
@@ -42,9 +47,9 @@ public LocalTypeBinding(ClassScope scope, SourceTypeBinding enclosingType, CaseS
 	this.enclosingCase = switchCase;
 	this.sourceStart = typeDeclaration.sourceStart;
 	MethodScope methodScope = scope.enclosingMethodScope();
-	AbstractMethodDeclaration methodDeclaration = methodScope.referenceMethod();
-	if (methodDeclaration != null) {
-		this.enclosingMethod = methodDeclaration.binding;
+	MethodBinding methodBinding = methodScope.referenceMethodBinding();
+	if (methodBinding != null) {
+		this.enclosingMethod = methodBinding;
 	}
 }
 
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java
index fdd3474..9dfad0e 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2012 IBM Corporation and others.
+ * Copyright (c) 2000, 2013 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -16,6 +16,7 @@
  *								bug 374605 - Unreasonable warning for enum-based switch statements
  *								bug 382353 - [1.8][compiler] Implementation property modifiers should be accepted on default methods.
  *								bug 382354 - [1.8][compiler] Compiler silent on conflicting modifier
+ *								bug 401030 - [1.8][null] Null analysis support for lambda methods. 
  *     Jesper S Moller - Contributions for
  *							bug 382701 - [1.8][compiler] Implement semantic analysis of Lambda expressions & Reference expression
  *******************************************************************************/
@@ -517,7 +518,7 @@ public final int recordInitializationStates(FlowInfo flowInfo) {
 }
 
 /**
- *  Answer the reference method of this scope, or null if initialization scope.
+ *  Answer the reference method of this scope, or null if initialization scope or lambda scope.
  */
 public AbstractMethodDeclaration referenceMethod() {
 	if (this.referenceContext instanceof AbstractMethodDeclaration) return (AbstractMethodDeclaration) this.referenceContext;
@@ -525,6 +526,17 @@ public AbstractMethodDeclaration referenceMethod() {
 }
 
 /**
+ * Answers the binding of the reference method or reference lambda expression.
+ */
+public MethodBinding referenceMethodBinding() {
+	if (this.referenceContext instanceof LambdaExpression)
+		return ((LambdaExpression)this.referenceContext).binding;
+	if (this.referenceContext instanceof AbstractMethodDeclaration)
+		return ((AbstractMethodDeclaration)this.referenceContext).binding;
+	return null;
+}
+
+/**
  *  Answer the reference type of this scope.
  * It is the nearest enclosing type of this scope.
  */

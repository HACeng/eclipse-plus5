commit 396d47b23135e9fb3aaeb3d8f844ebea73195461
Author: Jesse Garms <jgarms>
Date:   Mon Aug 22 16:53:11 2005 +0000

    Fix mis-named APIs on ICompilationParticipant. Originally we expected to have post-build and post-reconcile annotation processing, but in the end all processing is pre-build/reconcile. This change corrects the API naming to reflect how things really work.
    
    A change to the apt branch of jdt-core will be forthcoming which includes the API change itself. This change is the necessary refactoring in APT itself to reflect the change.
    
    Also fix bug 107389: AptConfig lacks a method for setting srcgen directory. Add new API to AptConfig.

2	1	org.eclipse.jdt.apt.core/.settings/org.eclipse.core.resources.prefs
3	2	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/FactoryContainer.java
16	4	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AnnotationProcessorFactoryLoader.java
9	7	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptCompilationParticipant.java
14	13	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/JarFactoryContainer.java
30	0	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/Messages.java
8	1	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/PluginFactoryContainer.java
2	0	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/messages.properties
1	1	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/util/AptCorePreferenceInitializer.java
12	6	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java
13	0	org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/PreferencesTests.java
diff --git a/org.eclipse.jdt.apt.core/.settings/org.eclipse.core.resources.prefs b/org.eclipse.jdt.apt.core/.settings/org.eclipse.core.resources.prefs
index 5919c3a..e1e45ea 100644
--- a/org.eclipse.jdt.apt.core/.settings/org.eclipse.core.resources.prefs
+++ b/org.eclipse.jdt.apt.core/.settings/org.eclipse.core.resources.prefs
@@ -1,5 +1,6 @@
-#Thu Jul 21 11:07:53 PDT 2005
+#Thu Aug 18 15:38:15 PDT 2005
 eclipse.preferences.version=1
 encoding//src/org/eclipse/jdt/apt/core/build/messages.properties=8859_1
+encoding//src/org/eclipse/jdt/apt/core/internal/messages.properties=8859_1
 encoding//src/org/eclipse/jdt/apt/core/internal/util/messages.properties=8859_1
 encoding//src/org/eclipse/jdt/apt/core/messages.properties=8859_1
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/FactoryContainer.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/FactoryContainer.java
index fcbe3ea..eaf3f03 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/FactoryContainer.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/FactoryContainer.java
@@ -12,6 +12,7 @@
 
 package org.eclipse.jdt.apt.core;
 
+import java.io.IOException;
 import java.util.List;
 
 /**
@@ -45,11 +46,11 @@ public abstract class FactoryContainer
 	
 	public abstract FactoryType getType();
 	
-	protected abstract List<String> loadFactoryNames();
+	protected abstract List<String> loadFactoryNames() throws IOException;
 	
 	protected List<String> _factoryNames;
 	
-	public List<String> getFactoryNames() 
+	public List<String> getFactoryNames() throws IOException
 	{ 
 		if ( _factoryNames == null )
 			_factoryNames = loadFactoryNames();
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AnnotationProcessorFactoryLoader.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AnnotationProcessorFactoryLoader.java
index 12e172f..ae6a359 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AnnotationProcessorFactoryLoader.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AnnotationProcessorFactoryLoader.java
@@ -11,6 +11,8 @@
 
 package org.eclipse.jdt.apt.core.internal;
 
+import java.io.FileNotFoundException;
+import java.io.IOException;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.net.URLClassLoader;
@@ -90,14 +92,24 @@ public class AnnotationProcessorFactoryLoader {
 
 		for ( FactoryContainer fc : containers )
 		{
-			List<AnnotationProcessorFactory> f = loadFactoryClasses( fc, classLoader );
-			for ( AnnotationProcessorFactory apf : f )
-				factories.add( apf  );
+			try {
+				List<AnnotationProcessorFactory> f = loadFactoryClasses( fc, classLoader );
+				for ( AnnotationProcessorFactory apf : f )
+					factories.add( apf  );
+			}
+			catch (FileNotFoundException fnfe) {
+				AptPlugin.log(fnfe, Messages.AnnotationProcessorFactoryLoader_jarNotFound + fnfe.getLocalizedMessage());
+			}
+			catch (IOException ioe) {
+				AptPlugin.log(ioe, Messages.AnnotationProcessorFactoryLoader_ioError + ioe.getLocalizedMessage());
+			}
 		}
 		return factories;
 	}
 	
-	private List<AnnotationProcessorFactory> loadFactoryClasses( FactoryContainer fc, ClassLoader classLoader )
+	private List<AnnotationProcessorFactory> loadFactoryClasses( 
+			FactoryContainer fc, ClassLoader classLoader )
+			throws IOException
 	{
 		List<String> factoryNames = fc.getFactoryNames();
 		List<AnnotationProcessorFactory> factories = new ArrayList<AnnotationProcessorFactory>( factoryNames.size() ); 
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptCompilationParticipant.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptCompilationParticipant.java
index 43f44b3..7155b91 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptCompilationParticipant.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptCompilationParticipant.java
@@ -38,8 +38,8 @@ import org.eclipse.jdt.core.compiler.CompilationParticipantEvent;
 import org.eclipse.jdt.core.compiler.CompilationParticipantResult;
 import org.eclipse.jdt.core.compiler.ICompilationParticipant;
 import org.eclipse.jdt.core.compiler.IProblem;
-import org.eclipse.jdt.core.compiler.PostReconcileCompilationEvent;
-import org.eclipse.jdt.core.compiler.PostReconcileCompilationResult;
+import org.eclipse.jdt.core.compiler.PreReconcileCompilationEvent;
+import org.eclipse.jdt.core.compiler.PreReconcileCompilationResult;
 import org.eclipse.jdt.core.compiler.PreBuildCompilationEvent;
 import org.eclipse.jdt.core.compiler.PreBuildCompilationResult;
 
@@ -84,8 +84,8 @@ public class AptCompilationParticipant implements ICompilationParticipant
 		else if ( cpe.getKind() == ICompilationParticipant.PRE_BUILD_EVENT ) {
 			return preBuildNotify( (PreBuildCompilationEvent) cpe );
 		}
-		else if ( cpe.getKind() == ICompilationParticipant.POST_RECONCILE_EVENT ) {
-			return postReconcileNotify( (PostReconcileCompilationEvent) cpe );
+		else if ( cpe.getKind() == ICompilationParticipant.PRE_RECONCILE_EVENT ) {
+			return preReconcileNotify( (PreReconcileCompilationEvent) cpe );
 		}
 		else if ( cpe.getKind() == ICompilationParticipant.BROKEN_CLASSPATH_BUILD_FAILURE_EVENT) {
 			return brokenClasspathBuildFailureNotify( (BrokenClasspathBuildFailureEvent) cpe );
@@ -114,7 +114,7 @@ public class AptCompilationParticipant implements ICompilationParticipant
 		if ("1.3".equals(javaVersion) || "1.4".equals(javaVersion)) { //$NON-NLS-1$ //$NON-NLS-2$
 			return EMPTY_PRE_BUILD_COMPILATION_RESULT;
 		}
-
+		
 		HashSet<IFile> newFiles = new HashSet<IFile>();
 		HashSet<IFile> deletedFiles = new HashSet<IFile>();
 		HashMap<IFile, Set<String>> newDependencies = new HashMap<IFile, Set<String>>();
@@ -171,7 +171,7 @@ public class AptCompilationParticipant implements ICompilationParticipant
 		}
 	}
 	
-	private CompilationParticipantResult postReconcileNotify( PostReconcileCompilationEvent prce )
+	private CompilationParticipantResult preReconcileNotify( PreReconcileCompilationEvent prce )
 	{
 		IProblem[] problems = null;
 		
@@ -196,18 +196,20 @@ public class AptCompilationParticipant implements ICompilationParticipant
 		{
 			AptPlugin.log(t, "Failure processing"); //$NON-NLS-1$
 		}	
-		return new PostReconcileCompilationResult(problems);
+		return new PreReconcileCompilationResult(problems);
 	}
 
 	private CompilationParticipantResult cleanNotify( CompilationParticipantEvent cpe )
 	{		
 		IProject p = cpe.getJavaProject().getProject();
+		
 		GeneratedFileManager gfm = GeneratedFileManager.getGeneratedFileManager( p );
 		gfm.projectClean( true );
 		
 		return GENERIC_COMPILATION_RESULT;
 	}
 	
+	
 	private BrokenClasspathBuildFailureResult brokenClasspathBuildFailureNotify( BrokenClasspathBuildFailureEvent event )
 	{
 		try
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/JarFactoryContainer.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/JarFactoryContainer.java
index 8b1732e..f91b5d5 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/JarFactoryContainer.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/JarFactoryContainer.java
@@ -11,7 +11,11 @@
 
 package org.eclipse.jdt.apt.core.internal;
 
-import java.io.*;
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.ArrayList;
@@ -20,7 +24,6 @@ import java.util.jar.JarEntry;
 import java.util.jar.JarFile;
 
 import org.eclipse.jdt.apt.core.FactoryContainer;
-import org.eclipse.jdt.apt.core.AptPlugin;
 
 /**
  * Represents a jar file that contains annotation processor factories.
@@ -36,7 +39,7 @@ public abstract class JarFactoryContainer extends FactoryContainer
 	protected abstract File getJarFile();
 		
 	@Override
-	protected List<String> loadFactoryNames() { 
+	protected List<String> loadFactoryNames() throws IOException { 
 		return getServiceClassnamesFromJar( getJarFile() );
 	}
 	
@@ -54,10 +57,10 @@ public abstract class JarFactoryContainer extends FactoryContainer
      * @param jar the jar file.
      * @return a list, possibly empty, of fully qualified classnames to be instantiated.
      */
-    protected static List<String> getServiceClassnamesFromJar(File jar)
+    protected static List<String> getServiceClassnamesFromJar(File jar) throws IOException
     {
         List<String> classNames = new ArrayList<String>();
-        JarFile jarFile;
+        JarFile jarFile = null;
         try {
             jarFile = new JarFile(jar);
 
@@ -71,11 +74,9 @@ public abstract class JarFactoryContainer extends FactoryContainer
                 InputStream is = jarFile.getInputStream(provider);
                 readServiceProvider(is, classNames);
             }
-            jarFile.close();
         }
-        catch (IOException e) {	
-        	AptPlugin.log(e, "Unable to read annotation processor service names from jar file " + jar); //$NON-NLS-1$
-            return classNames;
+        finally {
+        	try {if (jarFile != null) jarFile.close();} catch (IOException ioe) {}
         }
         return classNames;
     }
@@ -86,9 +87,9 @@ public abstract class JarFactoryContainer extends FactoryContainer
      * definition file, e.g., one of the files named in AUTOLOAD_SERVICES.
      * @param classNames a list to which the classes named in is will be added.
      */
-    protected static void readServiceProvider(InputStream is, List<String> classNames) {
+    protected static void readServiceProvider(InputStream is, List<String> classNames) throws IOException {
+    	BufferedReader rd = null;
     	try {
-	        BufferedReader rd;
 	        rd = new BufferedReader(new InputStreamReader(is, "UTF-8")); //$NON-NLS-1$
 	        for (String line = rd.readLine(); line != null; line = rd.readLine()) {
 	            // hack off any comments
@@ -104,8 +105,8 @@ public abstract class JarFactoryContainer extends FactoryContainer
 	        }
 	        rd.close();
     	}
-    	catch (IOException e) {
-    		AptPlugin.log(e, "Error reading annotation processor jar file"); //$NON-NLS-1$
+    	finally {
+    		if (rd != null) try {rd.close();} catch (IOException ioe) {}
     	}
     }
 	
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/Messages.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/Messages.java
new file mode 100644
index 0000000..21d43ac
--- /dev/null
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/Messages.java
@@ -0,0 +1,30 @@
+/*******************************************************************************
+ * Copyright (c) 2005 BEA Systems, Inc. 
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *    jgarms@bea.com - initial API and implementation
+ *    
+ *******************************************************************************/
+package org.eclipse.jdt.apt.core.internal;
+
+import org.eclipse.osgi.util.NLS;
+
+public class Messages extends NLS {
+	private static final String BUNDLE_NAME = "org.eclipse.jdt.apt.core.internal.messages"; //$NON-NLS-1$
+
+	private Messages() {
+	}
+
+	static {
+		// initialize resource bundle
+		NLS.initializeMessages(BUNDLE_NAME, Messages.class);
+	}
+
+	public static String AnnotationProcessorFactoryLoader_jarNotFound;
+
+	public static String AnnotationProcessorFactoryLoader_ioError;
+}
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/PluginFactoryContainer.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/PluginFactoryContainer.java
index c323ddb..4f95149 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/PluginFactoryContainer.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/PluginFactoryContainer.java
@@ -12,9 +12,11 @@
 
 package org.eclipse.jdt.apt.core.internal;
 
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
 
+import org.eclipse.jdt.apt.core.AptPlugin;
 import org.eclipse.jdt.apt.core.FactoryContainer;
 
 public class PluginFactoryContainer extends FactoryContainer
@@ -37,7 +39,12 @@ public class PluginFactoryContainer extends FactoryContainer
 	}
 	
 	public void addFactoryName( String n ) {
-		getFactoryNames().add( n ); 
+		try {
+			getFactoryNames().add( n ); 
+		}
+		catch (IOException ioe) {
+			AptPlugin.log(ioe, "IOException reading a plugin"); //$NON-NLS-1$
+		}
 	}
 	
 	protected List<String> loadFactoryNames() { 
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/messages.properties b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/messages.properties
new file mode 100644
index 0000000..8485a98
--- /dev/null
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/messages.properties
@@ -0,0 +1,2 @@
+AnnotationProcessorFactoryLoader_jarNotFound=Could not find jar: 
+AnnotationProcessorFactoryLoader_ioError=Could not load from jar: 
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/util/AptCorePreferenceInitializer.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/util/AptCorePreferenceInitializer.java
index 8e9c7cb..b20c21f 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/util/AptCorePreferenceInitializer.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/util/AptCorePreferenceInitializer.java
@@ -22,7 +22,7 @@ import org.eclipse.jdt.apt.core.util.AptPreferenceConstants;
  */
 public class AptCorePreferenceInitializer extends AbstractPreferenceInitializer {
 
-	private static final String DEFAULT_GENERATED_SOURCE_FOLDER_NAME = "__generated_src"; //$NON-NLS-1$
+	public static final String DEFAULT_GENERATED_SOURCE_FOLDER_NAME = "__generated_src"; //$NON-NLS-1$
 	
 	/* (non-Javadoc)
 	 * @see org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer#initializeDefaultPreferences()
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java
index 9fcb50c..fe527d0 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java
@@ -405,8 +405,7 @@ public class AptConfig {
 	}
 	
 	private static synchronized boolean getBoolean(IJavaProject jproject, String optionName) {
-		Map options = getOptions(jproject);
-		return "true".equals(options.get(optionName)); //$NON-NLS-1$
+		return "true".equals(getOptions(jproject).get(optionName)); //$NON-NLS-1$
 	}
 	
     /**
@@ -417,10 +416,10 @@ public class AptConfig {
 	 * @param jproject
 	 * @return
 	 */
-	private static Map getOptions(IJavaProject jproject) {
+	private static Map<String,String> getOptions(IJavaProject jproject) {
 		IProject project = jproject.getProject();
 		assert(null != project);
-		Map options = _optionsMaps.get(project);
+		Map<String,String> options = _optionsMaps.get(project);
 		if (null != options) {
 			return options;
 		}
@@ -508,9 +507,16 @@ public class AptConfig {
 	 * @return
 	 */
     public static synchronized String getString(IJavaProject jproject, String optionName) {
-		Map options = getOptions(jproject);
-		return (String)options.get(optionName);
+		return getOptions(jproject).get(optionName);
 	}
+    
+    public static String getGenSrcDir(IJavaProject jproject) {
+    	return getString(jproject, AptPreferenceConstants.APT_GENSRCDIR);
+    }
+    
+    public static void setGenSrcDir(IJavaProject jproject, String dirString) {
+    	setString(jproject, AptPreferenceConstants.APT_GENSRCDIR, dirString);
+    }
 	
     /**
      * Save processor (-A) options as a string.  Option key/val pairs will be
diff --git a/org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/PreferencesTests.java b/org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/PreferencesTests.java
index ede7c3f..fe7dddc 100644
--- a/org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/PreferencesTests.java
+++ b/org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/PreferencesTests.java
@@ -24,6 +24,7 @@ import org.eclipse.core.resources.IProject;
 import org.eclipse.core.runtime.IPath;
 import org.eclipse.jdt.apt.core.FactoryContainer;
 import org.eclipse.jdt.apt.core.FactoryContainer.FactoryType;
+import org.eclipse.jdt.apt.core.internal.util.AptCorePreferenceInitializer;
 import org.eclipse.jdt.apt.core.internal.util.FactoryPathUtil;
 import org.eclipse.jdt.apt.core.util.AptConfig;
 import org.eclipse.jdt.apt.core.util.AptPreferenceConstants;
@@ -179,4 +180,16 @@ public class PreferencesTests extends Tests {
 		assertEquals(gensrcdirAuto, gensrcdirSet);
 	}
 	
+	public void testGenSrcDir() throws Exception {
+		IJavaProject jproj = env.getJavaProject( getProjectName() );
+		String genSrcDir = AptConfig.getGenSrcDir(jproj);
+		assertEquals(AptCorePreferenceInitializer.DEFAULT_GENERATED_SOURCE_FOLDER_NAME, genSrcDir);
+		
+		final String newDir = "gen/src";
+		AptConfig.setGenSrcDir(jproj, newDir);
+		genSrcDir = AptConfig.getGenSrcDir(jproj);
+		
+		assertEquals(newDir, genSrcDir);
+		
+	}
 }

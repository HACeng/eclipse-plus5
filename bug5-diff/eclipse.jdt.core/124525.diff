commit 990424c900c7463d4257bff26a1ccc6812106204
Author: David Audel <daudel>
Date:   Tue Feb 7 16:36:18 2006 +0000

    HEAD - bug 124525

476	80	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java
1	1	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocMethodCompletionModelTest.java
0	3	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionBasicVariableDeclaration1.java
0	7	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionCatchArgumentName.java
0	3	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionVariableNameOfArray1.java
0	3	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionVariableNameOfArray2.java
0	3	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionVariableNameOfArray3.java
0	3	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionVariableNameOfArray4.java
7	1	org.eclipse.jdt.core/buildnotes_jdt-core.html
16	10	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
1	0	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/RelevanceConstants.java
7	4	org.eclipse.jdt.core/model/org/eclipse/jdt/core/NamingConventions.java
4	4	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/INamingRequestor.java
108	44	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/InternalNamingConventions.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java
index cd7670a..d54ee31 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java
@@ -1366,17 +1366,25 @@ public void testCompletionArgumentName() throws JavaModelException {
 
 
 public void testCompletionCatchArgumentName() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionCatchArgumentName.java");
-
-	String str = cu.getSource();
+	this.workingCopies = new ICompilationUnit[1];
+	this.workingCopies[0] = getWorkingCopy(
+		"/Completion/src/CompletionCatchArgumentName.java",
+		"public class CompletionCatchArgumentName {\n"+
+		"	public void foo(){\n"+
+		"		try{\n"+
+		"			\n"+
+		"		} catch (Exception ex)\n"+
+		"	}\n"+
+		"}\n");
+	
+	CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+	String str = this.workingCopies[0].getSource();
 	String completeBehind = "ex";
 	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-
-	assertEquals(
-		"should have one completion", 
-		"element:exception    completion:exception    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE+ R_NON_RESTRICTED),
+	this.workingCopies[0].codeComplete(cursorLocation, requestor, this.wcOwner);
+	
+	assertResults(
+		"exception[VARIABLE_DECLARATION]{exception, null, Ljava.lang.Exception;, exception, null, " + (R_DEFAULT + R_INTERESTING + R_CASE+ R_NAME_LESS_NEW_CHARACTERS + R_NON_RESTRICTED) + "}",
 		requestor.getResults());
 }
 
@@ -1433,64 +1441,80 @@ public void testCompletionWithBinaryFolder() throws JavaModelException {
 
 
 public void testCompletionVariableNameOfArray1() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionVariableNameOfArray1.java");
-
-	String str = cu.getSource();
+	this.workingCopies = new ICompilationUnit[1];
+	this.workingCopies[0] = getWorkingCopy(
+		"/Completion/src/CompletionVariableNameOfArray1.java",
+		"public class CompletionVariableNameOfArray1 {\n"+
+		"	Object[] ob\n"+
+		"}\n");
+	
+	CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+	String str = this.workingCopies[0].getSource();
 	String completeBehind = "ob";
 	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-
-	assertEquals(
-		"should have one completion",
-		"element:objects    completion:objects    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE+ R_NON_RESTRICTED),
+	this.workingCopies[0].codeComplete(cursorLocation, requestor, this.wcOwner);
+	
+	assertResults(
+		"objects[VARIABLE_DECLARATION]{objects, null, [Ljava.lang.Object;, objects, null, " + (R_DEFAULT + R_INTERESTING + R_CASE+ R_NAME_LESS_NEW_CHARACTERS + R_NON_RESTRICTED) + "}",
 		requestor.getResults());
 }
 
 
 public void testCompletionVariableNameOfArray2() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionVariableNameOfArray2.java");
-
-	String str = cu.getSource();
+	this.workingCopies = new ICompilationUnit[1];
+	this.workingCopies[0] = getWorkingCopy(
+		"/Completion/src/CompletionVariableNameOfArray2.java",
+		"public class CompletionVariableNameOfArray2 {\n"+
+		"	Class[] cl\n"+
+		"}\n");
+	
+	CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+	String str = this.workingCopies[0].getSource();
 	String completeBehind = "cl";
 	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-
-	assertEquals(
-		"should have one completion",
-		"element:classes    completion:classes    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE+ R_NON_RESTRICTED),
+	this.workingCopies[0].codeComplete(cursorLocation, requestor, this.wcOwner);
+	
+	assertResults(
+		"classes[VARIABLE_DECLARATION]{classes, null, [Ljava.lang.Class;, classes, null, " + (R_DEFAULT + R_INTERESTING + R_CASE+ R_NAME_LESS_NEW_CHARACTERS + R_NON_RESTRICTED) + "}",
 		requestor.getResults());
 }
 
 
 public void testCompletionVariableNameOfArray3() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionVariableNameOfArray3.java");
-
-	String str = cu.getSource();
+	this.workingCopies = new ICompilationUnit[1];
+	this.workingCopies[0] = getWorkingCopy(
+		"/Completion/src/CompletionVariableNameOfArray3.java",
+		"public class CompletionVariableNameOfArray3 {\n"+
+		"	Object[][] ob\n"+
+		"}\n");
+	
+	CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+	String str = this.workingCopies[0].getSource();
 	String completeBehind = "ob";
 	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-
-	assertEquals(
-		"should have one completion",
-		"element:objects    completion:objects    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE+ R_NON_RESTRICTED),
+	this.workingCopies[0].codeComplete(cursorLocation, requestor, this.wcOwner);
+	
+	assertResults(
+		"objects[VARIABLE_DECLARATION]{objects, null, [[Ljava.lang.Object;, objects, null, " + (R_DEFAULT + R_INTERESTING + R_CASE+ R_NAME_LESS_NEW_CHARACTERS + R_NON_RESTRICTED) + "}",
 		requestor.getResults());
 }
 
 
 public void testCompletionVariableNameOfArray4() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionVariableNameOfArray4.java");
-
-	String str = cu.getSource();
+	this.workingCopies = new ICompilationUnit[1];
+	this.workingCopies[0] = getWorkingCopy(
+		"/Completion/src/CompletionVariableNameOfArray4.java",
+		"public class CompletionVariableNameOfArray4 {\n"+
+		"	Objectz[] ob\n"+
+		"}\n");
+	
+	CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+	String str = this.workingCopies[0].getSource();
 	String completeBehind = "ob";
 	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-
-	assertEquals(
-		"should have no completion",
+	this.workingCopies[0].codeComplete(cursorLocation, requestor, this.wcOwner);
+	
+	assertResults(
 		"",
 		requestor.getResults());
 }
@@ -8627,38 +8651,405 @@ public void testCompletionVariableName3() throws JavaModelException {
 	
 	JavaCore.setOptions(options);
 
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionVariableName3.java");
+	try {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionVariableName3.java");
+	
+		String str = cu.getSource();
+		String completeBehind = "OneName ";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+	
+		assertEquals(
+			"element:name    completion:name    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+"\n"+
+			"element:names1    completion:names1    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NAME_FIRST_SUFFIX + R_NON_RESTRICTED)+"\n"+
+			"element:names2    completion:names2    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NAME_SUFFIX + R_NON_RESTRICTED)+"\n"+
+			"element:oneName    completion:oneName    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+"\n"+
+			"element:oneNames1    completion:oneNames1    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NAME_FIRST_SUFFIX + R_NON_RESTRICTED)+"\n"+
+			"element:oneNames2    completion:oneNames2    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NAME_SUFFIX + R_NON_RESTRICTED)+"\n"+
+			"element:p1Name    completion:p1Name    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NAME_FIRST_PREFIX + R_NON_RESTRICTED)+"\n"+
+			"element:p1Names1    completion:p1Names1    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NAME_FIRST_PREFIX + R_NAME_FIRST_SUFFIX + R_NON_RESTRICTED)+"\n"+
+			"element:p1Names2    completion:p1Names2    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NAME_FIRST_PREFIX + R_NAME_SUFFIX + R_NON_RESTRICTED)+"\n"+
+			"element:p1OneName    completion:p1OneName    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NAME_FIRST_PREFIX + R_NON_RESTRICTED)+"\n"+
+			"element:p1OneNames1    completion:p1OneNames1    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NAME_FIRST_PREFIX + R_NAME_FIRST_SUFFIX + R_NON_RESTRICTED)+"\n"+
+			"element:p1OneNames2    completion:p1OneNames2    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NAME_FIRST_PREFIX + R_NAME_SUFFIX + R_NON_RESTRICTED)+"\n"+
+			"element:p2Name    completion:p2Name    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NAME_PREFIX + R_NON_RESTRICTED)+"\n"+
+			"element:p2Names1    completion:p2Names1    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NAME_PREFIX + R_NAME_FIRST_SUFFIX + R_NON_RESTRICTED)+"\n"+
+			"element:p2Names2    completion:p2Names2    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NAME_PREFIX + R_NAME_SUFFIX + R_NON_RESTRICTED)+"\n"+
+			"element:p2OneName    completion:p2OneName    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NAME_PREFIX + R_NON_RESTRICTED)+"\n"+
+			"element:p2OneNames1    completion:p2OneNames1    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NAME_PREFIX + R_NAME_FIRST_SUFFIX + R_NON_RESTRICTED)+"\n"+
+			"element:p2OneNames2    completion:p2OneNames2    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NAME_PREFIX + R_NAME_SUFFIX+ R_NON_RESTRICTED),
+			requestor.getResults());
+	} finally {
+		options.put(JavaCore.CODEASSIST_LOCAL_PREFIXES,argumentPrefixPreviousValue);
+		options.put(JavaCore.CODEASSIST_LOCAL_SUFFIXES,localPrefixPreviousValue);
+		JavaCore.setOptions(options);
+	}
+}
+public void testCompletionVariableName4() throws JavaModelException {
+	this.wc = getWorkingCopy(
+            "/Completion/src/CompletionVariableName4.java",
+            "class FooBar {\n"+
+            "}\n"+
+            "public class CompletionVariableName4 {\n"+
+            "	void foo(){\n"+
+            "		FooBar the\n"+
+            "	}\n"+
+            "}");
+    
+    
+    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+    String str = this.wc.getSource();
+    String completeBehind = "the";
+    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+    this.wc.codeComplete(cursorLocation, requestor, this.wcOwner);
 
-	String str = cu.getSource();
-	String completeBehind = "OneName ";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
+    assertResults(
+    		"theBar[VARIABLE_DECLARATION]{theBar, null, LFooBar;, theBar, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+"}\n"+
+			"theFooBar[VARIABLE_DECLARATION]{theFooBar, null, LFooBar;, theFooBar, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+"}",
+			requestor.getResults());
+}
+public void testCompletionVariableName5() throws JavaModelException {
+	this.wc = getWorkingCopy(
+            "/Completion/src/CompletionVariableName5.java",
+            "class FooBar {\n"+
+            "}\n"+
+            "public class CompletionVariableName5 {\n"+
+            "	void foo(){\n"+
+            "		FooBar thefo\n"+
+            "	}\n"+
+            "}");
+    
+    
+    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+    String str = this.wc.getSource();
+    String completeBehind = "thefo";
+    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+    this.wc.codeComplete(cursorLocation, requestor, this.wcOwner);
+
+    assertResults(
+    		"thefoBar[VARIABLE_DECLARATION]{thefoBar, null, LFooBar;, thefoBar, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+"}\n"+
+			"theFooBar[VARIABLE_DECLARATION]{theFooBar, null, LFooBar;, theFooBar, null, "+(R_DEFAULT + R_INTERESTING + R_NAME_LESS_NEW_CHARACTERS + R_NON_RESTRICTED)+"}",
+			requestor.getResults());
+}
+public void testCompletionVariableName6() throws JavaModelException {
+	this.wc = getWorkingCopy(
+            "/Completion/src/CompletionVariableName6.java",
+            "class FooBar {\n"+
+            "}\n"+
+            "public class CompletionVariableName6 {\n"+
+            "	void foo(){\n"+
+            "		FooBar theba\n"+
+            "	}\n"+
+            "}");
+    
+    
+    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+    String str = this.wc.getSource();
+    String completeBehind = "theba";
+    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+    this.wc.codeComplete(cursorLocation, requestor, this.wcOwner);
 
-	options.put(JavaCore.CODEASSIST_LOCAL_PREFIXES,argumentPrefixPreviousValue);
-	options.put(JavaCore.CODEASSIST_LOCAL_SUFFIXES,localPrefixPreviousValue);
+    assertResults(
+    		"thebaFooBar[VARIABLE_DECLARATION]{thebaFooBar, null, LFooBar;, thebaFooBar, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+"}\n"+
+			"theBar[VARIABLE_DECLARATION]{theBar, null, LFooBar;, theBar, null, "+(R_DEFAULT + R_INTERESTING + R_NAME_LESS_NEW_CHARACTERS + R_NON_RESTRICTED)+"}",
+			requestor.getResults());
+}
+public void testCompletionVariableName7() throws JavaModelException {
+	this.wc = getWorkingCopy(
+            "/Completion/src/CompletionVariableName7.java",
+            "class FooBar {\n"+
+            "}\n"+
+            "public class CompletionVariableName7 {\n"+
+            "	void foo(){\n"+
+            "		FooBar fo\n"+
+            "	}\n"+
+            "}");
+    
+    
+    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+    String str = this.wc.getSource();
+    String completeBehind = "fo";
+    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+    this.wc.codeComplete(cursorLocation, requestor, this.wcOwner);
+
+    assertResults(
+			"foBar[VARIABLE_DECLARATION]{foBar, null, LFooBar;, foBar, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+"}\n"+
+			"fooBar[VARIABLE_DECLARATION]{fooBar, null, LFooBar;, fooBar, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NAME_LESS_NEW_CHARACTERS + R_NON_RESTRICTED)+"}",
+			requestor.getResults());
+}
+public void testCompletionVariableName8() throws JavaModelException {
+	Hashtable options = JavaCore.getOptions();
+	Object argumentPrefixPreviousValue = options.get(JavaCore.CODEASSIST_LOCAL_PREFIXES);
+	options.put(JavaCore.CODEASSIST_LOCAL_PREFIXES,"pre"); //$NON-NLS-1$
+	Object localPrefixPreviousValue = options.get(JavaCore.CODEASSIST_LOCAL_SUFFIXES);
+	options.put(JavaCore.CODEASSIST_LOCAL_SUFFIXES,"suf"); //$NON-NLS-1$
+	
 	JavaCore.setOptions(options);
 
-	assertEquals(
-		"element:name    completion:name    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+"\n"+
-		"element:names1    completion:names1    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NAME_FIRST_SUFFIX + R_NON_RESTRICTED)+"\n"+
-		"element:names2    completion:names2    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NAME_SUFFIX + R_NON_RESTRICTED)+"\n"+
-		"element:oneName    completion:oneName    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+"\n"+
-		"element:oneNames1    completion:oneNames1    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NAME_FIRST_SUFFIX + R_NON_RESTRICTED)+"\n"+
-		"element:oneNames2    completion:oneNames2    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NAME_SUFFIX + R_NON_RESTRICTED)+"\n"+
-		"element:p1Name    completion:p1Name    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NAME_FIRST_PREFIX + R_NON_RESTRICTED)+"\n"+
-		"element:p1Names1    completion:p1Names1    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NAME_FIRST_PREFIX + R_NAME_FIRST_SUFFIX + R_NON_RESTRICTED)+"\n"+
-		"element:p1Names2    completion:p1Names2    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NAME_FIRST_PREFIX + R_NAME_SUFFIX + R_NON_RESTRICTED)+"\n"+
-		"element:p1OneName    completion:p1OneName    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NAME_FIRST_PREFIX + R_NON_RESTRICTED)+"\n"+
-		"element:p1OneNames1    completion:p1OneNames1    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NAME_FIRST_PREFIX + R_NAME_FIRST_SUFFIX + R_NON_RESTRICTED)+"\n"+
-		"element:p1OneNames2    completion:p1OneNames2    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NAME_FIRST_PREFIX + R_NAME_SUFFIX + R_NON_RESTRICTED)+"\n"+
-		"element:p2Name    completion:p2Name    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NAME_PREFIX + R_NON_RESTRICTED)+"\n"+
-		"element:p2Names1    completion:p2Names1    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NAME_PREFIX + R_NAME_FIRST_SUFFIX + R_NON_RESTRICTED)+"\n"+
-		"element:p2Names2    completion:p2Names2    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NAME_PREFIX + R_NAME_SUFFIX + R_NON_RESTRICTED)+"\n"+
-		"element:p2OneName    completion:p2OneName    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NAME_PREFIX + R_NON_RESTRICTED)+"\n"+
-		"element:p2OneNames1    completion:p2OneNames1    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NAME_PREFIX + R_NAME_FIRST_SUFFIX + R_NON_RESTRICTED)+"\n"+
-		"element:p2OneNames2    completion:p2OneNames2    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NAME_PREFIX + R_NAME_SUFFIX+ R_NON_RESTRICTED),
-		requestor.getResults());
+	try {
+		this.wc = getWorkingCopy(
+	            "/Completion/src/CompletionVariableName8.java",
+	            "class FooBar {\n"+
+	            "}\n"+
+	            "public class CompletionVariableName8 {\n"+
+	            "	void foo(){\n"+
+	            "		FooBar the\n"+
+	            "	}\n"+
+	            "}");
+	    
+	    
+	    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+	    String str = this.wc.getSource();
+	    String completeBehind = "the";
+	    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+	    this.wc.codeComplete(cursorLocation, requestor, this.wcOwner);
+	
+	    assertResults(
+				"theBar[VARIABLE_DECLARATION]{theBar, null, LFooBar;, theBar, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+"}\n"+
+				"theFooBar[VARIABLE_DECLARATION]{theFooBar, null, LFooBar;, theFooBar, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+"}\n"+
+				"theBarsuf[VARIABLE_DECLARATION]{theBarsuf, null, LFooBar;, theBarsuf, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NAME_FIRST_SUFFIX + R_NON_RESTRICTED)+"}\n"+
+				"theFooBarsuf[VARIABLE_DECLARATION]{theFooBarsuf, null, LFooBar;, theFooBarsuf, null, "+(R_DEFAULT + R_INTERESTING + R_NAME_FIRST_SUFFIX + R_CASE + R_NON_RESTRICTED)+"}",
+				requestor.getResults());
+	} finally {
+		options.put(JavaCore.CODEASSIST_LOCAL_PREFIXES,argumentPrefixPreviousValue);
+		options.put(JavaCore.CODEASSIST_LOCAL_SUFFIXES,localPrefixPreviousValue);
+		JavaCore.setOptions(options);
+	}
+}
+public void testCompletionVariableName9() throws JavaModelException {
+	Hashtable options = JavaCore.getOptions();
+	Object argumentPrefixPreviousValue = options.get(JavaCore.CODEASSIST_LOCAL_PREFIXES);
+	options.put(JavaCore.CODEASSIST_LOCAL_PREFIXES,"pre"); //$NON-NLS-1$
+	Object localPrefixPreviousValue = options.get(JavaCore.CODEASSIST_LOCAL_SUFFIXES);
+	options.put(JavaCore.CODEASSIST_LOCAL_SUFFIXES,"suf"); //$NON-NLS-1$
+	
+	JavaCore.setOptions(options);
+
+	try {
+		this.wc = getWorkingCopy(
+	            "/Completion/src/CompletionVariableName9.java",
+	            "class FooBar {\n"+
+	            "}\n"+
+	            "public class CompletionVariableName9 {\n"+
+	            "	void foo(){\n"+
+	            "		FooBar thefo\n"+
+	            "	}\n"+
+	            "}");
+	    
+	    
+	    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+	    String str = this.wc.getSource();
+	    String completeBehind = "thefo";
+	    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+	    this.wc.codeComplete(cursorLocation, requestor, this.wcOwner);
+	
+	    assertResults(
+				"thefoBar[VARIABLE_DECLARATION]{thefoBar, null, LFooBar;, thefoBar, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+"}\n"+
+				"thefoBarsuf[VARIABLE_DECLARATION]{thefoBarsuf, null, LFooBar;, thefoBarsuf, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NAME_FIRST_SUFFIX + R_NON_RESTRICTED)+"}\n"+
+				"theFooBar[VARIABLE_DECLARATION]{theFooBar, null, LFooBar;, theFooBar, null, "+(R_DEFAULT + R_INTERESTING + R_NAME_LESS_NEW_CHARACTERS + R_NON_RESTRICTED)+"}\n"+
+				"theFooBarsuf[VARIABLE_DECLARATION]{theFooBarsuf, null, LFooBar;, theFooBarsuf, null, "+(R_DEFAULT + R_INTERESTING + R_NAME_LESS_NEW_CHARACTERS + R_NAME_FIRST_SUFFIX + R_NON_RESTRICTED)+"}",
+				requestor.getResults());
+	} finally {
+		options.put(JavaCore.CODEASSIST_LOCAL_PREFIXES,argumentPrefixPreviousValue);
+		options.put(JavaCore.CODEASSIST_LOCAL_SUFFIXES,localPrefixPreviousValue);
+		JavaCore.setOptions(options);
+	}
+}
+public void testCompletionVariableName10() throws JavaModelException {
+	Hashtable options = JavaCore.getOptions();
+	Object argumentPrefixPreviousValue = options.get(JavaCore.CODEASSIST_LOCAL_PREFIXES);
+	options.put(JavaCore.CODEASSIST_LOCAL_PREFIXES,"pre"); //$NON-NLS-1$
+	Object localPrefixPreviousValue = options.get(JavaCore.CODEASSIST_LOCAL_SUFFIXES);
+	options.put(JavaCore.CODEASSIST_LOCAL_SUFFIXES,"suf"); //$NON-NLS-1$
+	
+	JavaCore.setOptions(options);
+
+	try {
+		this.wc = getWorkingCopy(
+	            "/Completion/src/CompletionVariableName10.java",
+	            "class FooBar {\n"+
+	            "}\n"+
+	            "public class CompletionVariableName10 {\n"+
+	            "	void foo(){\n"+
+	            "		FooBar fo\n"+
+	            "	}\n"+
+	            "}");
+	    
+	    
+	    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+	    String str = this.wc.getSource();
+	    String completeBehind = "fo";
+	    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+	    this.wc.codeComplete(cursorLocation, requestor, this.wcOwner);
+	
+	    assertResults(
+				"foBar[VARIABLE_DECLARATION]{foBar, null, LFooBar;, foBar, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+"}\n"+
+				"foBarsuf[VARIABLE_DECLARATION]{foBarsuf, null, LFooBar;, foBarsuf, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NAME_FIRST_SUFFIX + R_NON_RESTRICTED)+"}\n"+
+				"fooBar[VARIABLE_DECLARATION]{fooBar, null, LFooBar;, fooBar, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NAME_LESS_NEW_CHARACTERS + R_NON_RESTRICTED)+"}\n"+
+				"fooBarsuf[VARIABLE_DECLARATION]{fooBarsuf, null, LFooBar;, fooBarsuf, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NAME_LESS_NEW_CHARACTERS + R_NAME_FIRST_SUFFIX + R_NON_RESTRICTED)+"}",
+				requestor.getResults());
+	} finally {
+		options.put(JavaCore.CODEASSIST_LOCAL_PREFIXES,argumentPrefixPreviousValue);
+		options.put(JavaCore.CODEASSIST_LOCAL_SUFFIXES,localPrefixPreviousValue);
+		JavaCore.setOptions(options);
+	}
+}
+public void testCompletionVariableName11() throws JavaModelException {
+	Hashtable options = JavaCore.getOptions();
+	Object argumentPrefixPreviousValue = options.get(JavaCore.CODEASSIST_LOCAL_PREFIXES);
+	options.put(JavaCore.CODEASSIST_LOCAL_PREFIXES,"pre"); //$NON-NLS-1$
+	Object localPrefixPreviousValue = options.get(JavaCore.CODEASSIST_LOCAL_SUFFIXES);
+	options.put(JavaCore.CODEASSIST_LOCAL_SUFFIXES,"suf"); //$NON-NLS-1$
+	
+	JavaCore.setOptions(options);
+
+	try {
+		this.wc = getWorkingCopy(
+	            "/Completion/src/CompletionVariableName11.java",
+	            "class FooBar {\n"+
+	            "}\n"+
+	            "public class CompletionVariableName11 {\n"+
+	            "	void foo(){\n"+
+	            "		FooBar pr\n"+
+	            "	}\n"+
+	            "}");
+	    
+	    
+	    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+	    String str = this.wc.getSource();
+	    String completeBehind = "pr";
+	    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+	    this.wc.codeComplete(cursorLocation, requestor, this.wcOwner);
+	
+	    assertResults(
+				"preBar[VARIABLE_DECLARATION]{preBar, null, LFooBar;, preBar, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NAME_FIRST_PREFIX + R_NON_RESTRICTED)+"}\n"+
+				"preFooBar[VARIABLE_DECLARATION]{preFooBar, null, LFooBar;, preFooBar, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NAME_FIRST_PREFIX + R_NON_RESTRICTED)+"}\n"+
+				"preBarsuf[VARIABLE_DECLARATION]{preBarsuf, null, LFooBar;, preBarsuf, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NAME_FIRST_PREFIX + R_NAME_FIRST_SUFFIX+ R_NON_RESTRICTED)+"}\n"+
+				"preFooBarsuf[VARIABLE_DECLARATION]{preFooBarsuf, null, LFooBar;, preFooBarsuf, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NAME_FIRST_PREFIX + R_NAME_FIRST_SUFFIX + R_NON_RESTRICTED)+"}",
+				requestor.getResults());
+	} finally {
+		options.put(JavaCore.CODEASSIST_LOCAL_PREFIXES,argumentPrefixPreviousValue);
+		options.put(JavaCore.CODEASSIST_LOCAL_SUFFIXES,localPrefixPreviousValue);
+		JavaCore.setOptions(options);
+	}
+}
+public void testCompletionVariableName12() throws JavaModelException {
+	Hashtable options = JavaCore.getOptions();
+	Object argumentPrefixPreviousValue = options.get(JavaCore.CODEASSIST_LOCAL_PREFIXES);
+	options.put(JavaCore.CODEASSIST_LOCAL_PREFIXES,"pre"); //$NON-NLS-1$
+	Object localPrefixPreviousValue = options.get(JavaCore.CODEASSIST_LOCAL_SUFFIXES);
+	options.put(JavaCore.CODEASSIST_LOCAL_SUFFIXES,"suf"); //$NON-NLS-1$
+	
+	JavaCore.setOptions(options);
+
+	try {
+		this.wc = getWorkingCopy(
+	            "/Completion/src/CompletionVariableName12.java",
+	            "class FooBar {\n"+
+	            "}\n"+
+	            "public class CompletionVariableName12 {\n"+
+	            "	void foo(){\n"+
+	            "		FooBar prethe\n"+
+	            "	}\n"+
+	            "}");
+	    
+	    
+	    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+	    String str = this.wc.getSource();
+	    String completeBehind = "prethe";
+	    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+	    this.wc.codeComplete(cursorLocation, requestor, this.wcOwner);
+	
+	    assertResults(
+				"preTheBar[VARIABLE_DECLARATION]{preTheBar, null, LFooBar;, preTheBar, null, "+(R_DEFAULT + R_INTERESTING + R_NAME_FIRST_PREFIX + R_NON_RESTRICTED)+"}\n"+
+				"preTheFooBar[VARIABLE_DECLARATION]{preTheFooBar, null, LFooBar;, preTheFooBar, null, "+(R_DEFAULT + R_INTERESTING + R_NAME_FIRST_PREFIX + R_NON_RESTRICTED)+"}\n"+
+				"preTheBarsuf[VARIABLE_DECLARATION]{preTheBarsuf, null, LFooBar;, preTheBarsuf, null, "+(R_DEFAULT + R_INTERESTING + R_NAME_FIRST_PREFIX + R_NAME_FIRST_SUFFIX + R_NON_RESTRICTED)+"}\n"+
+				"preTheFooBarsuf[VARIABLE_DECLARATION]{preTheFooBarsuf, null, LFooBar;, preTheFooBarsuf, null, "+(R_DEFAULT + R_INTERESTING + R_NAME_FIRST_PREFIX + R_NAME_FIRST_SUFFIX + R_NON_RESTRICTED)+"}",
+				requestor.getResults());
+	} finally {
+		options.put(JavaCore.CODEASSIST_LOCAL_PREFIXES,argumentPrefixPreviousValue);
+		options.put(JavaCore.CODEASSIST_LOCAL_SUFFIXES,localPrefixPreviousValue);
+		JavaCore.setOptions(options);
+	}
+}
+public void testCompletionVariableName13() throws JavaModelException {
+	Hashtable options = JavaCore.getOptions();
+	Object argumentPrefixPreviousValue = options.get(JavaCore.CODEASSIST_LOCAL_PREFIXES);
+	options.put(JavaCore.CODEASSIST_LOCAL_PREFIXES,"pre"); //$NON-NLS-1$
+	Object localPrefixPreviousValue = options.get(JavaCore.CODEASSIST_LOCAL_SUFFIXES);
+	options.put(JavaCore.CODEASSIST_LOCAL_SUFFIXES,"suf"); //$NON-NLS-1$
+	
+	JavaCore.setOptions(options);
+
+	try {
+		this.wc = getWorkingCopy(
+	            "/Completion/src/CompletionVariableName13.java",
+	            "class FooBar {\n"+
+	            "}\n"+
+	            "public class CompletionVariableName13 {\n"+
+	            "	void foo(){\n"+
+	            "		FooBar prefo\n"+
+	            "	}\n"+
+	            "}");
+	    
+	    
+	    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+	    String str = this.wc.getSource();
+	    String completeBehind = "prefo";
+	    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+	    this.wc.codeComplete(cursorLocation, requestor, this.wcOwner);
+	
+	    assertResults(
+				"preFoBar[VARIABLE_DECLARATION]{preFoBar, null, LFooBar;, preFoBar, null, "+(R_DEFAULT + R_INTERESTING + R_NAME_FIRST_PREFIX + R_NON_RESTRICTED)+"}\n"+
+				"preFoBarsuf[VARIABLE_DECLARATION]{preFoBarsuf, null, LFooBar;, preFoBarsuf, null, "+(R_DEFAULT + R_INTERESTING + R_NAME_FIRST_PREFIX + R_NAME_FIRST_SUFFIX + R_NON_RESTRICTED)+"}\n"+
+				"preFooBar[VARIABLE_DECLARATION]{preFooBar, null, LFooBar;, preFooBar, null, "+(R_DEFAULT + R_INTERESTING + R_NAME_FIRST_PREFIX + R_NAME_LESS_NEW_CHARACTERS + R_NON_RESTRICTED)+"}\n"+
+				"preFooBarsuf[VARIABLE_DECLARATION]{preFooBarsuf, null, LFooBar;, preFooBarsuf, null, "+(R_DEFAULT + R_INTERESTING + R_NAME_FIRST_PREFIX + R_NAME_FIRST_SUFFIX + R_NAME_LESS_NEW_CHARACTERS + R_NON_RESTRICTED)+"}",
+				requestor.getResults());
+	} finally {
+		options.put(JavaCore.CODEASSIST_LOCAL_PREFIXES,argumentPrefixPreviousValue);
+		options.put(JavaCore.CODEASSIST_LOCAL_SUFFIXES,localPrefixPreviousValue);
+		JavaCore.setOptions(options);
+	}
+}
+public void testCompletionVariableName14() throws JavaModelException {
+	Hashtable options = JavaCore.getOptions();
+	Object argumentPrefixPreviousValue = options.get(JavaCore.CODEASSIST_LOCAL_PREFIXES);
+	options.put(JavaCore.CODEASSIST_LOCAL_PREFIXES,"pre"); //$NON-NLS-1$
+	Object localPrefixPreviousValue = options.get(JavaCore.CODEASSIST_LOCAL_SUFFIXES);
+	options.put(JavaCore.CODEASSIST_LOCAL_SUFFIXES,"suf"); //$NON-NLS-1$
+	
+	JavaCore.setOptions(options);
+
+	try {
+		this.wc = getWorkingCopy(
+	            "/Completion/src/CompletionVariableName14.java",
+	            "class FooBar {\n"+
+	            "}\n"+
+	            "public class CompletionVariableName14 {\n"+
+	            "	void foo(){\n"+
+	            "		FooBar prethefo\n"+
+	            "	}\n"+
+	            "}");
+	    
+	    
+	    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+	    String str = this.wc.getSource();
+	    String completeBehind = "prethefo";
+	    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+	    this.wc.codeComplete(cursorLocation, requestor, this.wcOwner);
+	
+	    assertResults(
+				"preThefoBar[VARIABLE_DECLARATION]{preThefoBar, null, LFooBar;, preThefoBar, null, "+(R_DEFAULT + R_INTERESTING + R_NAME_FIRST_PREFIX + R_NON_RESTRICTED)+"}\n"+
+				"preThefoBarsuf[VARIABLE_DECLARATION]{preThefoBarsuf, null, LFooBar;, preThefoBarsuf, null, "+(R_DEFAULT + R_INTERESTING + R_NAME_FIRST_PREFIX + R_NAME_FIRST_SUFFIX + R_NON_RESTRICTED)+"}\n"+
+				"preTheFooBar[VARIABLE_DECLARATION]{preTheFooBar, null, LFooBar;, preTheFooBar, null, "+(R_DEFAULT + R_INTERESTING + R_NAME_FIRST_PREFIX + R_NAME_LESS_NEW_CHARACTERS + R_NON_RESTRICTED)+"}\n"+
+				"preTheFooBarsuf[VARIABLE_DECLARATION]{preTheFooBarsuf, null, LFooBar;, preTheFooBarsuf, null, "+(R_DEFAULT + R_INTERESTING + R_NAME_FIRST_PREFIX + R_NAME_FIRST_SUFFIX + R_NAME_LESS_NEW_CHARACTERS + R_NON_RESTRICTED)+"}",
+				requestor.getResults());
+	} finally {
+		options.put(JavaCore.CODEASSIST_LOCAL_PREFIXES,argumentPrefixPreviousValue);
+		options.put(JavaCore.CODEASSIST_LOCAL_SUFFIXES,localPrefixPreviousValue);
+		JavaCore.setOptions(options);
+	}
 }
 public void testCompletionNonEmptyToken1() throws JavaModelException {
 	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
@@ -9421,17 +9812,22 @@ public void testCompletionBasicKeyword1() throws JavaModelException {
 			requestor.getResults());
 }
 public void testCompletionBasicVariableDeclaration1() throws JavaModelException {
-	CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionBasicVariableDeclaration1.java");
-
-	String str = cu.getSource();
+	this.workingCopies = new ICompilationUnit[1];
+	this.workingCopies[0] = getWorkingCopy(
+		"/Completion/src/CompletionBasicVariableDeclaration1.java",
+		"public class CompletionBasicVariableDeclaration1 {\n"+
+		"	public Object obj;\n"+
+		"}\n");
+	
+	CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+	String str = this.workingCopies[0].getSource();
 	String completeBehind = "obj";
 	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-
+	this.workingCopies[0].codeComplete(cursorLocation, requestor, this.wcOwner);
+	
 	assertResults(
-			"object[VARIABLE_DECLARATION]{object, null, Ljava.lang.Object;, object, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}",
-			requestor.getResults());
+		"object[VARIABLE_DECLARATION]{object, null, Ljava.lang.Object;, object, null, " + (R_DEFAULT + R_INTERESTING + R_CASE+ R_NAME_LESS_NEW_CHARACTERS + R_NON_RESTRICTED) + "}",
+		requestor.getResults());
 }
 public void testCompletionBasicMethodDeclaration1() throws JavaModelException {
 	CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2();
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocMethodCompletionModelTest.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocMethodCompletionModelTest.java
index 6554a33..235f9e4 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocMethodCompletionModelTest.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavadocMethodCompletionModelTest.java
@@ -1234,7 +1234,7 @@ public void test077() throws JavaModelException {
 		"		return null;\n" + 
 		"	}\n" + 
 		"}\n";
-	completeInJavadoc("/Completion/src/javadoc/methods/tags/BasicTestMethods.java", source, true, "xstr", -1); // last position
+	completeInJavadoc("/Completion/src/javadoc/methods/tags/BasicTestMethods.java", source, true, "xstr", 2);
 	assertResults("");
 }
 
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionBasicVariableDeclaration1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionBasicVariableDeclaration1.java
deleted file mode 100644
index 06601e5..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionBasicVariableDeclaration1.java
+++ /dev/null
@@ -1,3 +0,0 @@
-public class CompletionBasicVariableDeclaration1 {
-	public Object obj;
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionCatchArgumentName.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionCatchArgumentName.java
deleted file mode 100644
index a958386..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionCatchArgumentName.java
+++ /dev/null
@@ -1,7 +0,0 @@
-public class CompletionCatchArgumentName {
-	public void foo(){
-		try{
-			
-		} catch (Exception ex)
-	}
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionVariableNameOfArray1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionVariableNameOfArray1.java
deleted file mode 100644
index 621b27b..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionVariableNameOfArray1.java
+++ /dev/null
@@ -1,3 +0,0 @@
-public class CompletionVariableNameOfArray1 {
-	Object[] ob
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionVariableNameOfArray2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionVariableNameOfArray2.java
deleted file mode 100644
index 337c9dc..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionVariableNameOfArray2.java
+++ /dev/null
@@ -1,3 +0,0 @@
-public class CompletionVariableNameOfArray2 {
-	Class[] cl
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionVariableNameOfArray3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionVariableNameOfArray3.java
deleted file mode 100644
index c9c45ab..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionVariableNameOfArray3.java
+++ /dev/null
@@ -1,3 +0,0 @@
-public class CompletionVariableNameOfArray3 {
-	Object[][] ob
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionVariableNameOfArray4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionVariableNameOfArray4.java
deleted file mode 100644
index d2995a8..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionVariableNameOfArray4.java
+++ /dev/null
@@ -1,3 +0,0 @@
-public class CompletionVariableNameOfArray4 {
-	Objectz[] ob
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core/buildnotes_jdt-core.html b/org.eclipse.jdt.core/buildnotes_jdt-core.html
index 66e3d57..1a35ad5 100644
--- a/org.eclipse.jdt.core/buildnotes_jdt-core.html
+++ b/org.eclipse.jdt.core/buildnotes_jdt-core.html
@@ -56,10 +56,16 @@ What's new in this drop</h2>
 <code>org.eclipse.jdt.core.formatter.DefaultCodeFormatterConstants#FORMATTER_INDENT_BODY_DECLARATIONS_COMPARE_TO_ANNOTATION_DECLARATION_HEADER</code>
 <code>org.eclipse.jdt.core.formatter.DefaultCodeFormatterConstants#FORMATTER_INSERT_NEW_LINE_IN_EMPTY_ANNOTATION_DECLARATION</code>
 <br>See bug <a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=126625">126625</a> for details.</li>
+<li>Code Assist: Improve variable name completion<br>
+Variable name completion try to keep typed characters even if they don't match to a part of the type name.<br>
+e.g: Element rootE| is completed to Element rootElement.
+</li>
 </ul>
 
 <h3>Problem Reports Fixed</h3>
-<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=126625">126625</a>
+<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=124525">124525</a>
+[assist] Smarter Autocompletion for variable names
+<br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=126625">126625</a>
 Added missing options for formatting annotation types
 <br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=126673">126673</a>
 NPE in Buffer.addBufferChangedListener
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
index 5702a45..ae40f51 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
@@ -5559,28 +5559,31 @@ public final class CompletionEngine
 		final char[] t = token;
 		final char[] q = qualifiedPackageName;
 		INamingRequestor namingRequestor = new INamingRequestor() {
-			public void acceptNameWithPrefixAndSuffix(char[] name, boolean isFirstPrefix, boolean isFirstSuffix) {
-				accept(	name,
-					(isFirstPrefix ? R_NAME_FIRST_PREFIX : R_NAME_PREFIX) + (isFirstSuffix ? R_NAME_FIRST_SUFFIX : R_NAME_SUFFIX));
+			public void acceptNameWithPrefixAndSuffix(char[] name, boolean isFirstPrefix, boolean isFirstSuffix, int reusedCharacters) {
+				accept(
+						name,
+						(isFirstPrefix ? R_NAME_FIRST_PREFIX : R_NAME_PREFIX) + (isFirstSuffix ? R_NAME_FIRST_SUFFIX : R_NAME_SUFFIX),
+						reusedCharacters);
 			}
 
-			public void acceptNameWithPrefix(char[] name, boolean isFirstPrefix) {
-				accept(name, isFirstPrefix ? R_NAME_FIRST_PREFIX :  R_NAME_PREFIX);
+			public void acceptNameWithPrefix(char[] name, boolean isFirstPrefix, int reusedCharacters) {
+				accept(name, isFirstPrefix ? R_NAME_FIRST_PREFIX :  R_NAME_PREFIX, reusedCharacters);
 			}
 
-			public void acceptNameWithSuffix(char[] name, boolean isFirstSuffix) {
-				accept(name, isFirstSuffix ? R_NAME_FIRST_SUFFIX : R_NAME_SUFFIX);
+			public void acceptNameWithSuffix(char[] name, boolean isFirstSuffix, int reusedCharacters) {
+				accept(name, isFirstSuffix ? R_NAME_FIRST_SUFFIX : R_NAME_SUFFIX, reusedCharacters);
 			}
 
-			public void acceptNameWithoutPrefixAndSuffix(char[] name) {
-				accept(name, 0);
+			public void acceptNameWithoutPrefixAndSuffix(char[] name,int reusedCharacters) {
+				accept(name, 0, reusedCharacters);
 			}
-			void accept(char[] name, int prefixAndSuffixRelevance){
+			void accept(char[] name, int prefixAndSuffixRelevance, int reusedCharacters){
 				if (CharOperation.prefixEquals(t, name, false)) {
 					int relevance = computeBaseRelevance();
 					relevance += computeRelevanceForInterestingProposal();
 					relevance += computeRelevanceForCaseMatching(t, name);
 					relevance += prefixAndSuffixRelevance;
+					if(reusedCharacters > 0) relevance += R_NAME_LESS_NEW_CHARACTERS;
 					relevance += computeRelevanceForRestrictions(IAccessRule.K_ACCESSIBLE); // no access restriction for variable name
 					
 					// accept result
@@ -5612,6 +5615,7 @@ public final class CompletionEngine
 					qualifiedSourceName,
 					dim,
 					modifiers,
+					token,
 					excludeNames,
 					namingRequestor);
 				break;
@@ -5621,6 +5625,7 @@ public final class CompletionEngine
 					qualifiedPackageName,
 					qualifiedSourceName,
 					dim,
+					token,
 					excludeNames,
 					namingRequestor);
 				break;
@@ -5630,6 +5635,7 @@ public final class CompletionEngine
 					qualifiedPackageName,
 					qualifiedSourceName,
 					dim,
+					token,
 					excludeNames,
 					namingRequestor);
 				break;
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/RelevanceConstants.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/RelevanceConstants.java
index 2e8cc19..7dc01ba 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/RelevanceConstants.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/RelevanceConstants.java
@@ -33,6 +33,7 @@ public interface RelevanceConstants {
 	int R_NAME_PREFIX = 5;
 	int R_NAME_FIRST_SUFFIX = 4;
 	int R_NAME_SUFFIX = 3;
+	int R_NAME_LESS_NEW_CHARACTERS = 15;
 	int R_METHOD_OVERIDE = 3;
 	int R_NON_RESTRICTED = 3;
 	int R_TRUE_OR_FALSE = 1;
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/NamingConventions.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/NamingConventions.java
index 30d9c80..1d8af70 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/NamingConventions.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/NamingConventions.java
@@ -79,7 +79,7 @@ public final class NamingConventions {
 		// for acceptNameWithoutPrefixAndSuffix
 		private char[][] otherResults = new char[SIZE][];
 		private int otherResultsCount = 0;
-		public void acceptNameWithPrefixAndSuffix(char[] name, boolean isFirstPrefix, boolean isFirstSuffix) {
+		public void acceptNameWithPrefixAndSuffix(char[] name, boolean isFirstPrefix, boolean isFirstSuffix, int reusedCharacters) {
 			if(isFirstPrefix && isFirstSuffix) {
 				int length = this.firstPrefixAndFirstSuffixResults.length;
 				if(length == this.firstPrefixAndFirstSuffixResultsCount) {
@@ -127,7 +127,7 @@ public final class NamingConventions {
 			}
 		}
 
-		public void acceptNameWithPrefix(char[] name, boolean isFirstPrefix) {
+		public void acceptNameWithPrefix(char[] name, boolean isFirstPrefix, int reusedCharacters) {
 			if(isFirstPrefix) {
 				int length = this.firstPrefixResults.length;
 				if(length == this.firstPrefixResultsCount) {
@@ -153,7 +153,7 @@ public final class NamingConventions {
 			}
 		}
 
-		public void acceptNameWithSuffix(char[] name, boolean isFirstSuffix) {
+		public void acceptNameWithSuffix(char[] name, boolean isFirstSuffix, int reusedCharacters) {
 			if(isFirstSuffix) {
 				int length = this.firstSuffixResults.length;
 				if(length == this.firstSuffixResultsCount) {
@@ -179,7 +179,7 @@ public final class NamingConventions {
 			}
 		}
 
-		public void acceptNameWithoutPrefixAndSuffix(char[] name) {
+		public void acceptNameWithoutPrefixAndSuffix(char[] name, int reusedCharacters) {
 			int length = this.otherResults.length;
 			if(length == this.otherResultsCount) {
 				System.arraycopy(
@@ -490,6 +490,7 @@ public final class NamingConventions {
 			packageName,
 			qualifiedTypeName,
 			dim,
+			null,
 			excludedNames,
 			requestor);
 
@@ -573,6 +574,7 @@ public final class NamingConventions {
 			qualifiedTypeName,
 			dim,
 			modifiers,
+			null,
 			excludedNames,
 			requestor);
 
@@ -657,6 +659,7 @@ public final class NamingConventions {
 			packageName,
 			qualifiedTypeName,
 			dim,
+			null,
 			excludedNames,
 			requestor);
 
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/INamingRequestor.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/INamingRequestor.java
index 5c42b88..40c442f 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/INamingRequestor.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/INamingRequestor.java
@@ -11,8 +11,8 @@
 package org.eclipse.jdt.internal.core;
 
 public interface INamingRequestor {
-	void acceptNameWithPrefixAndSuffix(char[] name, boolean isFirstPrefix, boolean isFirstSuffix);
-	void acceptNameWithPrefix(char[] name, boolean isFirstPrefix);
-	void acceptNameWithSuffix(char[] name, boolean isFirstSuffix);
-	void acceptNameWithoutPrefixAndSuffix(char[] name);
+	void acceptNameWithPrefixAndSuffix(char[] name, boolean isFirstPrefix, boolean isFirstSuffix, int reusedCharacters);
+	void acceptNameWithPrefix(char[] name, boolean isFirstPrefix, int reusedCharacters);
+	void acceptNameWithSuffix(char[] name, boolean isFirstSuffix, int reusedCharacters);
+	void acceptNameWithoutPrefixAndSuffix(char[] name, int reusedCharacters);
 }
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/InternalNamingConventions.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/InternalNamingConventions.java
index 3e28798..cb777ac 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/InternalNamingConventions.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/InternalNamingConventions.java
@@ -36,7 +36,7 @@ public class InternalNamingConventions {
 				null/*taskPriorities*/,
 				true/*taskCaseSensitive*/);
 	}
-	public static void suggestArgumentNames(IJavaProject javaProject, char[] packageName, char[] qualifiedTypeName, int dim, char[][] excludedNames, INamingRequestor requestor) {
+	public static void suggestArgumentNames(IJavaProject javaProject, char[] packageName, char[] qualifiedTypeName, int dim, char[] internalPrefix, char[][] excludedNames, INamingRequestor requestor) {
 		Map options = javaProject.getOptions(true);
 		CompilerOptions compilerOptions = new CompilerOptions(options);
 		AssistOptions assistOptions = new AssistOptions(options);
@@ -45,13 +45,14 @@ public class InternalNamingConventions {
 			packageName,
 			qualifiedTypeName,
 			dim,
+			internalPrefix,
 			assistOptions.argumentPrefixes,
 			assistOptions.argumentSuffixes,
 			excludedNames,
 			getNameScanner(compilerOptions),
 			requestor);
 	}
-	public static void suggestFieldNames(IJavaProject javaProject, char[] packageName, char[] qualifiedTypeName, int dim, int modifiers, char[][] excludedNames, INamingRequestor requestor) {
+	public static void suggestFieldNames(IJavaProject javaProject, char[] packageName, char[] qualifiedTypeName, int dim, int modifiers, char[] internalPrefix, char[][] excludedNames, INamingRequestor requestor) {
 		boolean isStatic = Flags.isStatic(modifiers);
 		
 		Map options = javaProject.getOptions(true);
@@ -62,13 +63,14 @@ public class InternalNamingConventions {
 			packageName,
 			qualifiedTypeName,
 			dim,
+			internalPrefix,
 			isStatic ? assistOptions.staticFieldPrefixes : assistOptions.fieldPrefixes,
 			isStatic ? assistOptions.staticFieldSuffixes : assistOptions.fieldSuffixes,
 			excludedNames,
 			getNameScanner(compilerOptions),
 			requestor);
 	}
-	public static void suggestLocalVariableNames(IJavaProject javaProject, char[] packageName, char[] qualifiedTypeName, int dim, char[][] excludedNames, INamingRequestor requestor) {
+	public static void suggestLocalVariableNames(IJavaProject javaProject, char[] packageName, char[] qualifiedTypeName, int dim, char[] internalPrefix, char[][] excludedNames, INamingRequestor requestor) {
 		Map options = javaProject.getOptions(true);
 		CompilerOptions compilerOptions = new CompilerOptions(options);
 		AssistOptions assistOptions = new AssistOptions(options);
@@ -77,6 +79,7 @@ public class InternalNamingConventions {
 			packageName,
 			qualifiedTypeName,
 			dim,
+			internalPrefix,
 			assistOptions.localPrefixes,
 			assistOptions.localSuffixes,
 			excludedNames,
@@ -88,6 +91,7 @@ public class InternalNamingConventions {
 		char[] packageName,
 		char[] qualifiedTypeName,
 		int dim,
+		char[] internalPrefix,
 		char[][] prefixes,
 		char[][] suffixes,
 		char[][] excludedNames,
@@ -97,6 +101,12 @@ public class InternalNamingConventions {
 		if(qualifiedTypeName == null || qualifiedTypeName.length == 0)
 			return;
 		
+		if(internalPrefix == null) {
+			internalPrefix = CharOperation.NO_CHAR;
+		} else {
+			internalPrefix = removePrefix(internalPrefix, prefixes);
+		}
+		
 		char[] typeName = CharOperation.lastSegment(qualifiedTypeName, '.');
 	
 		if(prefixes == null || prefixes.length == 0) {
@@ -146,7 +156,7 @@ public class InternalNamingConventions {
 	
 		boolean acceptDefaultName = true;
 		
-		for (int i = 0; i < tempNames.length; i++) {
+		next : for (int i = 0; i < tempNames.length; i++) {
 			char[] tempName = tempNames[i];
 			if(dim > 0) {
 				int length = tempName.length;
@@ -167,50 +177,57 @@ public class InternalNamingConventions {
 				}
 			}
 		
-			for (int j = 0; j < prefixes.length; j++) {
-				if(prefixes[j].length > 0
-					&& Character.isLetterOrDigit(prefixes[j][prefixes[j].length - 1])) {
-					tempName[0] = Character.toUpperCase(tempName[0]);
-				} else {
-					tempName[0] = Character.toLowerCase(tempName[0]);
-				}
-				char[] prefixName = CharOperation.concat(prefixes[j], tempName);
-				for (int k = 0; k < suffixes.length; k++) {
-					char[] suffixName = CharOperation.concat(prefixName, suffixes[k]);
-					suffixName =
-						excludeNames(
-							suffixName,
-							prefixName,
-							suffixes[k],
-							excludedNames);
-					if(JavaConventions.validateFieldName(new String(suffixName)).isOK()) {
-						acceptName(suffixName, prefixes[j], suffixes[k],  j == 0, k == 0, requestor);
-						acceptDefaultName = false;
-					} else {
-						suffixName = CharOperation.concat(
-							prefixName,
-							String.valueOf(1).toCharArray(),
-							suffixes[k]
-						);
-						suffixName =
-							excludeNames(
-								suffixName,
-								prefixName,
-								suffixes[k],
-								excludedNames);
-						if(JavaConventions.validateFieldName(new String(suffixName)).isOK()) {
-							acceptName(suffixName, prefixes[j], suffixes[k], j == 0, k == 0, requestor);
-							acceptDefaultName = false;
+			char[] unprefixedName = tempName;
+			for (int j = 0; j <= internalPrefix.length; j++) {
+				if(j == internalPrefix.length || CharOperation.prefixEquals(CharOperation.subarray(internalPrefix, j, -1), unprefixedName, false)) {
+					tempName = CharOperation.concat(CharOperation.subarray(internalPrefix, 0, j), unprefixedName);
+					if(j != 0) tempName[j] = Character.toUpperCase(tempName[j]);
+					for (int k = 0; k < prefixes.length; k++) {
+						if(prefixes[k].length > 0
+							&& Character.isLetterOrDigit(prefixes[k][prefixes[k].length - 1])) {
+							tempName[0] = Character.toUpperCase(tempName[0]);
+						} else {
+							tempName[0] = Character.toLowerCase(tempName[0]);
+						}
+						char[] prefixName = CharOperation.concat(prefixes[k], tempName);
+						for (int l = 0; l < suffixes.length; l++) {
+							char[] suffixName = CharOperation.concat(prefixName, suffixes[l]);
+							suffixName =
+								excludeNames(
+									suffixName,
+									prefixName,
+									suffixes[l],
+									excludedNames);
+							if(JavaConventions.validateFieldName(new String(suffixName)).isOK()) {
+								acceptName(suffixName, prefixes[k], suffixes[l],  k == 0, l == 0, internalPrefix.length - j, requestor);
+								acceptDefaultName = false;
+							} else {
+								suffixName = CharOperation.concat(
+									prefixName,
+									String.valueOf(1).toCharArray(),
+									suffixes[l]
+								);
+								suffixName =
+									excludeNames(
+										suffixName,
+										prefixName,
+										suffixes[l],
+										excludedNames);
+								if(JavaConventions.validateFieldName(new String(suffixName)).isOK()) {
+									acceptName(suffixName, prefixes[k], suffixes[l], k == 0, l == 0, internalPrefix.length - j, requestor);
+									acceptDefaultName = false;
+								}
+							}
 						}
 					}
+					continue next;
 				}
-			
 			}
 		}
 		// if no names were found
 		if(acceptDefaultName) {
 			char[] name = excludeNames(DEFAULT_NAME, DEFAULT_NAME, CharOperation.NO_CHAR, excludedNames);
-			requestor.acceptNameWithoutPrefixAndSuffix(name);
+			requestor.acceptNameWithoutPrefixAndSuffix(name, 0);
 		}
 	}
 	
@@ -220,15 +237,16 @@ public class InternalNamingConventions {
 		char[] suffix,
 		boolean isFirstPrefix,
 		boolean isFirstSuffix,
+		int reusedCharacters,
 		INamingRequestor requestor) {
 		if(prefix.length > 0 && suffix.length > 0) {
-			requestor.acceptNameWithPrefixAndSuffix(name, isFirstPrefix, isFirstSuffix);
+			requestor.acceptNameWithPrefixAndSuffix(name, isFirstPrefix, isFirstSuffix, reusedCharacters);
 		} else if(prefix.length > 0){
-			requestor.acceptNameWithPrefix(name, isFirstPrefix);
+			requestor.acceptNameWithPrefix(name, isFirstPrefix, reusedCharacters);
 		} else if(suffix.length > 0){
-			requestor.acceptNameWithSuffix(name, isFirstSuffix);
+			requestor.acceptNameWithSuffix(name, isFirstSuffix, reusedCharacters);
 		} else {
-			requestor.acceptNameWithoutPrefixAndSuffix(name);
+			requestor.acceptNameWithoutPrefixAndSuffix(name, reusedCharacters);
 		}
 	}
 	
@@ -298,4 +316,50 @@ public class InternalNamingConventions {
 		}
 		return suffixName;
 	}
+	
+	private static char[] removePrefix(char[] name, char[][] prefixes) {
+		// remove longer prefix
+		char[] withoutPrefixName = name;
+		if (prefixes != null) {
+			int bestLength = 0;
+			for (int i= 0; i < prefixes.length; i++) {
+				char[] prefix = prefixes[i];
+				int max = prefix.length < name.length ? prefix.length : name.length;
+				int currLen = 0;
+				for (; currLen < max; currLen++) {
+					if(Character.toLowerCase(prefix[currLen]) != Character.toLowerCase(name[currLen])) {
+						if (currLen > bestLength) {
+							bestLength = currLen;
+						}
+						break;
+					}
+				}
+				if(currLen == max && currLen > bestLength) {
+					bestLength = max;
+				}
+			}
+			if(bestLength > 0) {
+				if(bestLength == name.length) {
+					withoutPrefixName = CharOperation.NO_CHAR;
+				} else {
+					withoutPrefixName = CharOperation.subarray(name, bestLength, name.length);
+				}
+			}
+		}
+		
+		return withoutPrefixName;
+	}
+	
+	public static final boolean prefixEquals(char[] prefix, char[] name) {
+
+		int max = prefix.length;
+		if (name.length < max)
+			return false;
+		for (int i = max;
+			--i >= 0;
+			) // assumes the prefix is not larger than the name
+				if (prefix[i] != name[i])
+					return false;
+			return true;
+	}
 }

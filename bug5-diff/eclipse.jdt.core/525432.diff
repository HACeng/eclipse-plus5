commit 5b9d3bfdf448b9f84d3d3df39faad391b1a33a8a
Author: Jay Arthanareeswaran <jarthana@in.ibm.com>
Date:   Tue Oct 3 12:31:15 2017 +0530

    Bug 525432: Fix compile warnings in official build
    
    Change-Id: Ic6c20302a0cd61f9398a8229c9e11f41d18602e2
    Signed-off-by: Jay Arthanareeswaran <jarthana@in.ibm.com>

5	9	org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/AnnotationMemberValue.java
2	3	org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/AnnotationValueImpl.java
1	2	org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ElementImpl.java
1	2	org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ModuleElementImpl.java
2	2	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnclosingMethodAttributeTest.java
4	4	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TypeAnnotationTest.java
0	1	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter9Test.java
1	0	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
3	3	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java
diff --git a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/AnnotationMemberValue.java b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/AnnotationMemberValue.java
index 9a90b33..00de87e 100644
--- a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/AnnotationMemberValue.java
+++ b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/AnnotationMemberValue.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2009 Vladimir Piskarev and others.
+ * Copyright (c) 2009, 2017 Vladimir Piskarev and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -11,11 +11,7 @@
 package org.eclipse.jdt.internal.compiler.apt.model;
 
 import org.eclipse.jdt.internal.compiler.apt.dispatch.BaseProcessingEnvImpl;
-import org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding;
-import org.eclipse.jdt.internal.compiler.lookup.ElementValuePair;
-import org.eclipse.jdt.internal.compiler.lookup.FieldBinding;
 import org.eclipse.jdt.internal.compiler.lookup.MethodBinding;
-import org.eclipse.jdt.internal.compiler.lookup.TypeBinding;
 
 public class AnnotationMemberValue extends AnnotationValueImpl {
 
@@ -24,14 +20,14 @@ public class AnnotationMemberValue extends AnnotationValueImpl {
 	/**
 	 * @param value
 	 *            The JDT representation of a compile-time constant. See
-	 *            {@link ElementValuePair#getValue()} for possible object types:
+	 *            {@link org.eclipse.jdt.internal.compiler.lookup.ElementValuePair#getValue()} for possible object types:
 	 *            <ul>
 	 *            <li>{@link org.eclipse.jdt.internal.compiler.impl.Constant} for member
 	 *            of primitive type or String</li>
-	 *            <li>{@link TypeBinding} for a member value of type
+	 *            <li>{@link org.eclipse.jdt.internal.compiler.lookup.TypeBinding} for a member value of type
 	 *            {@link java.lang.Class}</li>
-	 *            <li>{@link FieldBinding} for an enum constant</li>
-	 *            <li>{@link AnnotationBinding} for an annotation instance</li>
+	 *            <li>{@link org.eclipse.jdt.internal.compiler.lookup.FieldBinding} for an enum constant</li>
+	 *            <li>{@link org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding} for an annotation instance</li>
 	 *            <li><code>Object[]</code> for a member value of array type, where the
 	 *            array entries are one of the above</li>
 	 *            </ul>
diff --git a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/AnnotationValueImpl.java b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/AnnotationValueImpl.java
index 4a2831a..3d7352b 100644
--- a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/AnnotationValueImpl.java
+++ b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/AnnotationValueImpl.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2005, 2015 IBM Corporation and others.
+ * Copyright (c) 2005, 2017 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -30,7 +30,6 @@ import org.eclipse.jdt.internal.compiler.impl.LongConstant;
 import org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding;
 import org.eclipse.jdt.internal.compiler.lookup.ArrayBinding;
 import org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding;
-import org.eclipse.jdt.internal.compiler.lookup.ElementValuePair;
 import org.eclipse.jdt.internal.compiler.lookup.FieldBinding;
 import org.eclipse.jdt.internal.compiler.lookup.TypeBinding;
 import org.eclipse.jdt.internal.compiler.lookup.TypeIds;
@@ -66,7 +65,7 @@ public class AnnotationValueImpl implements AnnotationValue, TypeIds {
 	/**
 	 * @param value
 	 *            The JDT representation of a compile-time constant. See
-	 *            {@link ElementValuePair#getValue()} for possible object types:
+	 *            {@link org.eclipse.jdt.internal.compiler.lookup.ElementValuePair#getValue()} for possible object types:
 	 *            <ul>
 	 *            <li>{@link org.eclipse.jdt.internal.compiler.impl.Constant} for member
 	 *            of primitive type or String</li>
diff --git a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ElementImpl.java b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ElementImpl.java
index b2e7c4c..99a7c67 100644
--- a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ElementImpl.java
+++ b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ElementImpl.java
@@ -23,7 +23,6 @@ import javax.lang.model.element.Modifier;
 import javax.lang.model.element.Name;
 import javax.lang.model.element.PackageElement;
 import javax.lang.model.type.TypeMirror;
-import javax.lang.model.util.Elements;
 
 import org.eclipse.jdt.internal.compiler.apt.dispatch.BaseProcessingEnvImpl;
 import org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding;
@@ -146,7 +145,7 @@ public abstract class ElementImpl
 	/**
 	 * Subclassed by VariableElementImpl, TypeElementImpl, and ExecutableElementImpl.
 	 * This base implementation suffices for other types.
-	 * @see Elements#hides
+	 * @see javax.lang.model.util.Elements#hides
 	 * @return true if this element hides {@code hidden}
 	 */
 	public boolean hides(Element hidden)
diff --git a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ModuleElementImpl.java b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ModuleElementImpl.java
index fea5484..de3e371 100644
--- a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ModuleElementImpl.java
+++ b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ModuleElementImpl.java
@@ -31,7 +31,6 @@ import org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants;
 import org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding;
 import org.eclipse.jdt.internal.compiler.lookup.ModuleBinding;
 import org.eclipse.jdt.internal.compiler.lookup.PackageBinding;
-import org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding;
 import org.eclipse.jdt.internal.compiler.lookup.SplitPackageBinding;
 import org.eclipse.jdt.internal.compiler.lookup.TypeBinding;
 
@@ -43,7 +42,7 @@ public class ModuleElementImpl extends ElementImpl implements ModuleElement {
 
 	/**
 	 * In general, clients should call
-	 * {@link Factory#newDeclaredType(ReferenceBinding)} or
+	 * {@link Factory#newDeclaredType(org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding)} or
 	 * {@link Factory#newElement(org.eclipse.jdt.internal.compiler.lookup.Binding)}
 	 * to create new instances.
 	 */
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnclosingMethodAttributeTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnclosingMethodAttributeTest.java
index a58f077..1a08ca8 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnclosingMethodAttributeTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnclosingMethodAttributeTest.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2016 IBM Corporation and others.
+ * Copyright (c) 2000, 2017 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -251,7 +251,7 @@ public class EnclosingMethodAttributeTest extends AbstractComparableTest {
 				compilerOptions,
 				requestor,
 				getProblemFactory());
-		ReferenceBinding binaryType = batchCompiler.lookupEnvironment.askForType(new char[][] {new char[0], "X$1".toCharArray()});
+		ReferenceBinding binaryType = batchCompiler.lookupEnvironment.askForType(new char[][] {new char[0], "X$1".toCharArray()}, batchCompiler.lookupEnvironment.UnNamedModule);
 		assertNotNull("Should not be null", binaryType);
 	}
 }
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TypeAnnotationTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TypeAnnotationTest.java
index 532520b..350f8e1 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TypeAnnotationTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/TypeAnnotationTest.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2011, 2016 IBM Corporation and others.
+ * Copyright (c) 2011, 2017 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -6675,7 +6675,7 @@ public class TypeAnnotationTest extends AbstractRegressionTest {
 		Compiler compiler = new Compiler(getNameEnvironment(new String[0], null), getErrorHandlingPolicy(),
 				new CompilerOptions(customOptions), requestor, getProblemFactory());
 		char [][] compoundName = new char [][] { "test1".toCharArray(), "Base".toCharArray()};
-		ReferenceBinding type = compiler.lookupEnvironment.askForType(compoundName);		
+		ReferenceBinding type = compiler.lookupEnvironment.askForType(compoundName, compiler.lookupEnvironment.UnNamedModule);
 		assertNotNull(type);
 		MethodBinding[] methods1 = type.getMethods("method1".toCharArray());
 		assertEquals("Base.@A2 Static.@A3 Middle1.@A4 Middle2<Object>.@A5 Middle3.@A6 GenericInner<String>",
@@ -6745,7 +6745,7 @@ public class TypeAnnotationTest extends AbstractRegressionTest {
 		Compiler compiler = new Compiler(getNameEnvironment(new String[0], null), getErrorHandlingPolicy(),
 				new CompilerOptions(customOptions), requestor, getProblemFactory());
 		char [][] compoundName = new char [][] { "test1".toCharArray(), "Base".toCharArray()};
-		ReferenceBinding type = compiler.lookupEnvironment.askForType(compoundName);		
+		ReferenceBinding type = compiler.lookupEnvironment.askForType(compoundName, compiler.lookupEnvironment.UnNamedModule);
 		assertNotNull(type);
 		MethodBinding[] methods1 = type.getMethods("method1".toCharArray());
 		assertEquals("Base.@A2 Static.@A3 Middle1.@A4 Middle2<Object>.@A5 Middle3.@A6 GenericInner<String>",
@@ -6818,7 +6818,7 @@ public class TypeAnnotationTest extends AbstractRegressionTest {
 			Compiler compiler = new Compiler(getNameEnvironment(new String[0], paths), getErrorHandlingPolicy(),
 					new CompilerOptions(customOptions), requestor, getProblemFactory());
 			char [][] compoundName = new char [][] { "test1".toCharArray(), "Base".toCharArray()};
-			ReferenceBinding type = compiler.lookupEnvironment.askForType(compoundName);		
+			ReferenceBinding type = compiler.lookupEnvironment.askForType(compoundName, compiler.lookupEnvironment.UnNamedModule);
 			assertNotNull(type);
 			MethodBinding[] methods1 = type.getMethods("method1".toCharArray());
 			assertEquals("Base.Static.@A2 Static2<Exception>.@A3 Middle1.@A4 Middle2<Object>.@A5 Middle3.@A6 GenericInner<String>",
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter9Test.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter9Test.java
index 5b30d92..74d87a3 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter9Test.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter9Test.java
@@ -38,7 +38,6 @@ import org.eclipse.jdt.core.JavaModelException;
 public class ASTConverter9Test extends ConverterTestSetup {
 
 	ICompilationUnit workingCopy;
-	private static boolean isJRE9 = false;
 	private static final String jcl9lib = "CONVERTER_JCL9_LIB";
 	
 
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
index 61da03b..af5186d 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
@@ -12911,6 +12911,7 @@ public final class CompletionEngine
 		this.offset = prefix.length();
 
 		String encoding = this.compilerOptions.defaultEncoding;
+		@SuppressWarnings("deprecation")
 		BasicCompilationUnit fakeUnit = new BasicCompilationUnit(
 			fakeSource,
 			null,
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java
index 9eff5d2..f871e09 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2016 IBM Corporation and others.
+ * Copyright (c) 2000, 2017 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -879,14 +879,14 @@ public ReferenceBinding setFocusType(char[][] compoundName) {
 	if (compoundName == null || this.lookupEnvironment == null) return null;
 	this.focusType = this.lookupEnvironment.getCachedType(compoundName);
 	if (this.focusType == null) {
-		this.focusType = this.lookupEnvironment.askForType(compoundName);
+		this.focusType = this.lookupEnvironment.askForType(compoundName, this.lookupEnvironment.UnNamedModule);
 		if (this.focusType == null) {
 			int length = compoundName.length;
 			char[] typeName = compoundName[length-1];
 			int firstDollar = CharOperation.indexOf('$', typeName);
 			if (firstDollar != -1) {
 				compoundName[length-1] = CharOperation.subarray(typeName, 0, firstDollar);
-				this.focusType = this.lookupEnvironment.askForType(compoundName);
+				this.focusType = this.lookupEnvironment.askForType(compoundName, this.lookupEnvironment.UnNamedModule);
 				if (this.focusType != null) {
 					char[][] memberTypeNames = CharOperation.splitOn('$', typeName, firstDollar+1, typeName.length);
 					for (int i = 0; i < memberTypeNames.length; i++) {
commit 1136b6e1c715043b4ea7f7bbb503f98821735cee
Author: Jay Arthanareeswaran <jarthana@in.ibm.com>
Date:   Wed Oct 4 19:58:11 2017 +0530

    Bug 525432: Fix compile warnings in official build
    
    Fix the left out APT warning
    
    Change-Id: I24151e20de8f7e100b57b4041fd50e95202b0d74
    Signed-off-by: Jay Arthanareeswaran <jarthana@in.ibm.com>

2	3	org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/DeclaredTypeImpl.java
diff --git a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/DeclaredTypeImpl.java b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/DeclaredTypeImpl.java
index 00e172b..e9f4c64 100644
--- a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/DeclaredTypeImpl.java
+++ b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/DeclaredTypeImpl.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2006, 2015 BEA Systems, Inc. 
+ * Copyright (c) 2006, 2017 BEA Systems, Inc.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -18,7 +18,6 @@ import java.util.List;
 
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ElementKind;
-import javax.lang.model.element.TypeElement;
 import javax.lang.model.type.DeclaredType;
 import javax.lang.model.type.TypeKind;
 import javax.lang.model.type.TypeMirror;
@@ -32,7 +31,7 @@ import org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding;
 
 /**
  * Implementation of DeclaredType, which refers to a particular usage or instance of a type.
- * Contrast with {@link TypeElement}, which is an element that potentially defines a family
+ * Contrast with {@link javax.lang.model.element.TypeElement}, which is an element that potentially defines a family
  * of DeclaredTypes.
  */
 public class DeclaredTypeImpl extends TypeMirrorImpl implements DeclaredType {
commit 3ab64d9254ac5ec3587f373e6b4f78bbcb4ac23d
Author: Stephan Herrmann <stephan.herrmann@berlin.de>
Date:   Tue Nov 7 12:25:16 2017 +0100

    Bug 525432: Fix compile warnings in official build
    
    Change-Id: I73da45f27bc26bbfd4c2efcb0abdf122788c797f

0	4	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java
index 70546c2..efa1fe1 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java
@@ -211,10 +211,6 @@ public ModuleBinding getModule(char[] name) {
 	return moduleBinding;
 }
 
-@Deprecated
-public ReferenceBinding askForType(char[][] compoundName) {
-	return askForType(compoundName, this.UnNamedModule);
-}
 /**
  * Ask the name environment for a type which corresponds to the compoundName.
  * Answer null if the name cannot be found.

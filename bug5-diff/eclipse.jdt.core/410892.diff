commit 1850eabeac3bdcae6e357d374f46d85ea3488da4
Author: Olivier Thomann <Olivier_Thomann@ca.ibm.com>
Date:   Thu Nov 13 23:54:21 2014 +0530

    Bug 410892 - I've run into an old bug 241044 (info cannot be null -
    somewhere in the incremental compiler)
    
    Signed-off-by: Olivier Thomann <Olivier_Thomann@ca.ibm.com>

207	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/SwitchTest.java
18	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java
17	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Clinit.java
17	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java
0	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Reference.java
16	7	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/SwitchTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/SwitchTest.java
index d78c27f..3fd288e 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/SwitchTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/SwitchTest.java
@@ -2647,6 +2647,213 @@ public void test393537() {
 		this.runConformTest(sourceFiles, "");
 	}
 }
+//JDK7: Strings in Switch.
+public void test410892() {
+	String errorMsg = 		
+			"----------\n" + 
+			"1. ERROR in X.java (at line 5)\n" + 
+			"	switch (s) {\n" + 
+			"	        ^\n" + 
+			"Cannot switch on a value of type String for source level below 1.7. Only convertible int values or enum variables are permitted\n" + 
+			"----------\n";
+	
+	String [] sourceFiles = 
+		new String[] {
+		"X.java",
+		"public class X {\n" + 
+		"   public void testFunction(String s) {\n" + 
+		"        int var1 = 0;\n" + 
+		"        int var2 = 0;\n" + 
+		"        switch (s) {\n" + 
+		"        case \"test\": \n" + 
+		"            var2 = ++var1 % 2;\n" + 
+		"            break;\n" + 
+		"        }\n" + 
+		"   }\n" + 
+		"}",
+	};
+	if (this.complianceLevel < JDKLevelSupportingStringSwitch) {
+		this.runNegativeTest(sourceFiles, errorMsg);
+	} else {
+		Map options = getCompilerOptions();
+		options.put(CompilerOptions.OPTION_PreserveUnusedLocal, CompilerOptions.OPTIMIZE_OUT);
+		this.runConformTest(sourceFiles, options);
+	}
+}
+//JDK7: Strings in Switch.
+public void test410892_2() {
+	String errorMsg = 		
+			"----------\n" + 
+			"1. ERROR in X.java (at line 5)\n" + 
+			"	switch (s) {\n" + 
+			"	        ^\n" + 
+			"Cannot switch on a value of type String for source level below 1.7. Only convertible int values or enum variables are permitted\n" + 
+			"----------\n";
+
+	String [] sourceFiles = 
+		new String[] {
+		"X.java",
+		"public class X {\n" + 
+		"   public X(String s) {\n" + 
+		"        int var1 = 0;\n" + 
+		"        int var2 = 0;\n" + 
+		"        switch (s) {\n" + 
+		"        case \"test\": \n" + 
+		"            var2 = ++var1 % 2;\n" + 
+		"            break;\n" + 
+		"        }\n" + 
+		"   }\n" + 
+		"}",
+	};
+	if (this.complianceLevel < JDKLevelSupportingStringSwitch) {
+		this.runNegativeTest(sourceFiles, errorMsg);
+	} else {
+		Map options = getCompilerOptions();
+		options.put(CompilerOptions.OPTION_PreserveUnusedLocal, CompilerOptions.OPTIMIZE_OUT);
+		this.runConformTest(sourceFiles, options);
+	}
+}
+//JDK7: Strings in Switch.
+public void test410892_3() {
+	String errorMsg = 		
+			"----------\n" + 
+			"1. ERROR in X.java (at line 6)\n" + 
+			"	switch (s) {\n" + 
+			"	        ^\n" + 
+			"Cannot switch on a value of type String for source level below 1.7. Only convertible int values or enum variables are permitted\n" + 
+			"----------\n";
+	
+	String [] sourceFiles = 
+		new String[] {
+		"X.java",
+		"public class X {\n" + 
+		"   static {\n" + 
+		"        int var1 = 0;\n" + 
+		"        int var2 = 0;\n" +
+		"        String s = \"test2\";\n" +
+		"        switch (s) {\n" + 
+		"        case \"test\": \n" + 
+		"            var2 = ++var1 % 2;\n" + 
+		"            break;\n" + 
+		"        }\n" + 
+		"   }\n" + 
+		"}",
+	};
+	if (this.complianceLevel < JDKLevelSupportingStringSwitch) {
+		this.runNegativeTest(sourceFiles, errorMsg);
+	} else {
+		Map options = getCompilerOptions();
+		options.put(CompilerOptions.OPTION_PreserveUnusedLocal, CompilerOptions.OPTIMIZE_OUT);
+		this.runConformTest(sourceFiles, options);
+	}
+}
+//JDK7: Strings in Switch.
+public void test410892_4() {
+	Map options = getCompilerOptions();
+	options.put(CompilerOptions.OPTION_ReportUnusedLocal, CompilerOptions.WARNING);
+	options.put(CompilerOptions.OPTION_PreserveUnusedLocal, CompilerOptions.OPTIMIZE_OUT);
+	String errorMsg = 		
+			"----------\n" + 
+			"1. WARNING in X.java (at line 4)\n" + 
+			"	int var2 = 0;\n" + 
+			"	    ^^^^\n" + 
+			"The value of the local variable var2 is not used\n" + 
+			"----------\n";
+	String [] sourceFiles = 
+		new String[] {
+		"X.java",
+		"public class X {\n" + 
+		"   public void testFunction(String s) {\n" + 
+		"        int var1 = 0;\n" + 
+		"        int var2 = 0;\n" + 
+		"        switch (s) {\n" + 
+		"        case \"test\": \n" + 
+		"            var2 = ++var1 % 2;\n" + 
+		"            break;\n" + 
+		"        }\n" + 
+		"   }\n" + 
+		"}",
+	};
+	if (this.complianceLevel >= JDKLevelSupportingStringSwitch) {
+		this.runNegativeTest(sourceFiles,
+			errorMsg,
+			null,
+			true,
+			options);
+	}
+}
+//JDK7: Strings in Switch.
+public void test410892_5() {
+	Map options = getCompilerOptions();
+	options.put(CompilerOptions.OPTION_ReportUnusedLocal, CompilerOptions.WARNING);
+	options.put(CompilerOptions.OPTION_PreserveUnusedLocal, CompilerOptions.OPTIMIZE_OUT);
+	String errorMsg = 		
+			"----------\n" + 
+			"1. WARNING in X.java (at line 4)\n" + 
+			"	int var2 = 0;\n" + 
+			"	    ^^^^\n" + 
+			"The value of the local variable var2 is not used\n" + 
+			"----------\n";
+	String [] sourceFiles = 
+		new String[] {
+		"X.java",
+		"public class X {\n" + 
+		"   public X(String s) {\n" + 
+		"        int var1 = 0;\n" + 
+		"        int var2 = 0;\n" + 
+		"        switch (s) {\n" + 
+		"        case \"test\": \n" + 
+		"            var2 = ++var1 % 2;\n" + 
+		"            break;\n" + 
+		"        }\n" + 
+		"   }\n" + 
+		"}",
+	};
+	if (this.complianceLevel >= JDKLevelSupportingStringSwitch) {
+		this.runNegativeTest(sourceFiles,
+			errorMsg,
+			null,
+			true,
+			options);
+	}
+}
+//JDK7: Strings in Switch.
+public void test410892_6() {
+	Map options = getCompilerOptions();
+	options.put(CompilerOptions.OPTION_ReportUnusedLocal, CompilerOptions.WARNING);
+	options.put(CompilerOptions.OPTION_PreserveUnusedLocal, CompilerOptions.OPTIMIZE_OUT);
+	String errorMsg = 		
+			"----------\n" + 
+			"1. WARNING in X.java (at line 4)\n" + 
+			"	int var2 = 0;\n" + 
+			"	    ^^^^\n" + 
+			"The value of the local variable var2 is not used\n" + 
+			"----------\n";
+	String [] sourceFiles = 
+		new String[] {
+		"X.java",
+		"public class X {\n" + 
+		"   static {\n" + 
+		"        int var1 = 0;\n" + 
+		"        int var2 = 0;\n" + 
+		"        String s = \"Test2\";\n" + 
+		"        switch (s) {\n" + 
+		"        case \"test\": \n" + 
+		"            var2 = ++var1 % 2;\n" + 
+		"            break;\n" + 
+		"        }\n" + 
+		"   }\n" + 
+		"}",
+	};
+	if (this.complianceLevel >= JDKLevelSupportingStringSwitch) {
+		this.runNegativeTest(sourceFiles,
+			errorMsg,
+			null,
+			true,
+			options);
+	}
+}
+
 public static Class testClass() {
 	return SwitchTest.class;
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java
index c754c83..512ef81 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java
@@ -249,7 +249,6 @@ public abstract class AbstractMethodDeclaration
 	 */
 	public void generateCode(ClassScope classScope, ClassFile classFile) {
 
-		int problemResetPC = 0;
 		classFile.codeStream.wideMode = false; // reset wideMode to false
 		if (this.ignoreFurtherInvestigation) {
 			// method is known to have errors, dump a problem method
@@ -263,6 +262,16 @@ public abstract class AbstractMethodDeclaration
 			classFile.addProblemMethod(this, this.binding, problemsCopy);
 			return;
 		}
+		int problemResetPC = 0;
+		CompilationResult unitResult = null;
+		int problemCount = 0;
+		if (classScope != null) {
+			TypeDeclaration referenceContext = classScope.referenceContext;
+			if (referenceContext != null) {
+				unitResult = referenceContext.compilationResult();
+				problemCount = unitResult.problemCount;
+			}
+		}
 		boolean restart = false;
 		boolean abort = false;
 		// regular code generation
@@ -278,11 +287,19 @@ public abstract class AbstractMethodDeclaration
 					classFile.contentsOffset = problemResetPC;
 					classFile.methodCount--;
 					classFile.codeStream.resetInWideMode(); // request wide mode
+					// reset the problem count to prevent reporting the same warning twice
+					if (unitResult != null) {
+						unitResult.problemCount = problemCount;
+					}
 					restart = true;
 				} else if (e.compilationResult == CodeStream.RESTART_CODE_GEN_FOR_UNUSED_LOCALS_MODE) {
 					classFile.contentsOffset = problemResetPC;
 					classFile.methodCount--;
 					classFile.codeStream.resetForCodeGenUnusedLocals();
+					// reset the problem count to prevent reporting the same warning twice
+					if (unitResult != null) {
+						unitResult.problemCount = problemCount;
+					}
 					restart = true;
 				} else {
 					restart = false;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Clinit.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Clinit.java
index dba2c68..fdb2f02 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Clinit.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Clinit.java
@@ -110,6 +110,15 @@ public class Clinit extends AbstractMethodDeclaration {
 			// should never have to add any <clinit> problem method
 			return;
 		}
+		CompilationResult unitResult = null;
+		int problemCount = 0;
+		if (classScope != null) {
+			TypeDeclaration referenceContext = classScope.referenceContext;
+			if (referenceContext != null) {
+				unitResult = referenceContext.compilationResult();
+				problemCount = unitResult.problemCount;
+			}
+		}
 		boolean restart = false;
 		do {
 			try {
@@ -129,12 +138,20 @@ public class Clinit extends AbstractMethodDeclaration {
 					classFile.contentsOffset = clinitOffset;
 					classFile.methodCount--;
 					classFile.codeStream.resetInWideMode(); // request wide mode
+					// reset the problem count to prevent reporting the same warning twice
+					if (unitResult != null) {
+						unitResult.problemCount = problemCount;
+					}
 					// restart method generation
 					restart = true;
 				} else if (e.compilationResult == CodeStream.RESTART_CODE_GEN_FOR_UNUSED_LOCALS_MODE) {
 					classFile.contentsOffset = clinitOffset;
 					classFile.methodCount--;
 					classFile.codeStream.resetForCodeGenUnusedLocals();
+					// reset the problem count to prevent reporting the same warning twice
+					if (unitResult != null) {
+						unitResult.problemCount = problemCount;
+					}
 					// restart method generation
 					restart = true;
 				} else {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java
index 664dea0..3a8fcec 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java
@@ -271,6 +271,15 @@ public void generateCode(ClassScope classScope, ClassFile classFile) {
 	}
 	boolean restart = false;
 	boolean abort = false;
+	CompilationResult unitResult = null;
+	int problemCount = 0;
+	if (classScope != null) {
+		TypeDeclaration referenceContext = classScope.referenceContext;
+		if (referenceContext != null) {
+			unitResult = referenceContext.compilationResult();
+			problemCount = unitResult.problemCount;
+		}
+	}
 	do {
 		try {
 			problemResetPC = classFile.contentsOffset;
@@ -282,11 +291,19 @@ public void generateCode(ClassScope classScope, ClassFile classFile) {
 				classFile.contentsOffset = problemResetPC;
 				classFile.methodCount--;
 				classFile.codeStream.resetInWideMode(); // request wide mode
+				// reset the problem count to prevent reporting the same warning twice
+				if (unitResult != null) {
+					unitResult.problemCount = problemCount;
+				}
 				restart = true;
 			} else if (e.compilationResult == CodeStream.RESTART_CODE_GEN_FOR_UNUSED_LOCALS_MODE) {
 				classFile.contentsOffset = problemResetPC;
 				classFile.methodCount--;
 				classFile.codeStream.resetForCodeGenUnusedLocals();
+				// reset the problem count to prevent reporting the same warning twice
+				if (unitResult != null) {
+					unitResult.problemCount = problemCount;
+				}
 				restart = true;
 			} else {
 				restart = false;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Reference.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Reference.java
index c0a7a03..27fbe8e 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Reference.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Reference.java
@@ -167,7 +167,6 @@ void reportOnlyUselesslyReadPrivateField(BlockScope currentScope, FieldBinding f
 			{
 				// compoundAssignment/postIncrement is the only usage of this field
 				currentScope.problemReporter().unusedPrivateField(fieldBinding.sourceField());
-				fieldBinding.modifiers |= ExtraCompilerModifiers.AccLocallyUsed; // don't report again
 			}
 		}
 	}
@@ -215,6 +214,5 @@ static void reportOnlyUselesslyReadLocal(BlockScope currentScope, LocalVariableB
 		// report the case of a local variable that is unread except for a special operator
 		currentScope.problemReporter().unusedLocalVariable(localBinding.declaration);
 	}
-	localBinding.useFlag = LocalVariableBinding.USED; // don't report again
 }
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java
index 65a29a5..ce13931 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java
@@ -20,11 +20,23 @@ import java.util.Arrays;
 
 import org.eclipse.jdt.internal.compiler.ASTVisitor;
 import org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants;
-import org.eclipse.jdt.internal.compiler.codegen.*;
-import org.eclipse.jdt.internal.compiler.flow.*;
+import org.eclipse.jdt.internal.compiler.codegen.BranchLabel;
+import org.eclipse.jdt.internal.compiler.codegen.CaseLabel;
+import org.eclipse.jdt.internal.compiler.codegen.CodeStream;
+import org.eclipse.jdt.internal.compiler.codegen.Opcodes;
+import org.eclipse.jdt.internal.compiler.flow.FlowContext;
+import org.eclipse.jdt.internal.compiler.flow.FlowInfo;
+import org.eclipse.jdt.internal.compiler.flow.SwitchFlowContext;
 import org.eclipse.jdt.internal.compiler.impl.CompilerOptions;
 import org.eclipse.jdt.internal.compiler.impl.Constant;
-import org.eclipse.jdt.internal.compiler.lookup.*;
+import org.eclipse.jdt.internal.compiler.lookup.BlockScope;
+import org.eclipse.jdt.internal.compiler.lookup.FieldBinding;
+import org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding;
+import org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding;
+import org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding;
+import org.eclipse.jdt.internal.compiler.lookup.SyntheticMethodBinding;
+import org.eclipse.jdt.internal.compiler.lookup.TypeBinding;
+import org.eclipse.jdt.internal.compiler.lookup.TypeIds;
 import org.eclipse.jdt.internal.compiler.problem.ProblemSeverities;
 
 @SuppressWarnings("rawtypes")
@@ -294,10 +306,7 @@ public class SwitchStatement extends Statement {
 				defaultBranchLabel.place();
 			}
 			codeStream.recordPositionsFrom(pc, this.sourceStart);
-		} catch (Throwable e) {
-			e.printStackTrace();
-		}
-		finally {
+		} finally {
 			if (this.scope != null) this.scope.enclosingCase = null; // no longer inside switch case block
 		}
 	}

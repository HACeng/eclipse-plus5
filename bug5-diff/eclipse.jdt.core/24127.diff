commit f45b1bce3acde77f1fb9db16d7272e13c4efc219
Author: Jim Desrivieres <jdesrivieres>
Date:   Mon Oct 28 22:12:19 2002 +0000

    Improve API specs for source classpath entry exclusion patterns (bug 24127)

11	7	org.eclipse.jdt.core/model/org/eclipse/jdt/core/IClasspathEntry.java
7	1	org.eclipse.jdt.core/model/org/eclipse/jdt/core/IJavaProject.java
12	3	org.eclipse.jdt.core/model/org/eclipse/jdt/core/IPackageFragment.java
12	3	org.eclipse.jdt.core/model/org/eclipse/jdt/core/IPackageFragmentRoot.java
65	39	org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IClasspathEntry.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IClasspathEntry.java
index 1901f54..a35307c 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IClasspathEntry.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IClasspathEntry.java
@@ -180,23 +180,25 @@ public interface IClasspathEntry {
 	int getEntryKind();
 
 	/**
-	 * Returns the set of patterns used to excludes resources associated with
-	 * this source entry (entry kind <code>CPE_SOURCE</code>).
+	 * Returns the set of patterns used to exclude resources associated with
+	 * this source entry.
 	 * <p>
 	 * Exclusion patterns allow specified portions of the resource tree rooted
 	 * at this source entry's path to be filtered out. If no exclusion patterns
 	 * are specified, this source entry includes all relevent files. Each path
 	 * specified must be a relative path, and will be interpreted relative
-	 * to this source entry's path. File patterns are case-sensitive.
+	 * to this source entry's path. File patterns are case-sensitive. A file
+	 * matched by one or more of these patterns is excluded from the 
+	 * corresponding package fragment root.
 	 * </p>
 	 * <p>
 	 * Note that there is no need to supply a pattern to exclude ".class" files
 	 * because a source entry filters these out automatically.
 	 * </p>
 	 * <p>
-	 * Each pattern is represented as a relative path. The path segments can be
-	 * regular file or folder names or simple patterns involving standard
-	 * wildcard characters.
+	 * The pattern mechanism is similar to Ant's. Each pattern is represented as
+	 * a relative path. The path segments can be regular file or folder names or simple patterns
+	 * involving standard wildcard characters.
 	 * </p>
 	 * <p>
 	 * '*' matches 0 or more characters within a segment. So
@@ -249,7 +251,9 @@ public interface IClasspathEntry {
 	 * </ul>
 	 * </p>
 	 * 
-	 * @return the resource exclusion patterns associated with this source entry.
+	 * @return the possibly empty list of resource exclusion patterns 
+	 *   associated with this source entry, and <code>null</code> for other
+	 *   kinds of classpath entries
 	 * @since 2.1	 */
 	IPath[] getExclusionPatterns();
 	
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IJavaProject.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IJavaProject.java
index ff5da80..e0b31bd 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IJavaProject.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IJavaProject.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2001, 2002 International Business Machines Corp. and others.
+ * Copyright (c) 2000, 2002 International Business Machines Corp. and others.
  * All rights reserved. This program and the accompanying materials 
  * are made available under the terms of the Common Public License v1.0 
  * which accompanies this distribution, and is available at
@@ -194,6 +194,12 @@ public interface IJavaProject extends IParent, IJavaElement, IOpenable {
 	 * Returns an array of non-Java resources directly contained in this project.
 	 * It does not transitively answer non-Java resources contained in folders;
 	 * these would have to be explicitly iterated over.
+	 * <p>
+	 * Non-Java resources includes other files and folders located in the
+	 * project not accounted for by any of it source or binary package fragment
+	 * roots.
+	 * </p>
+	 * 
 	 * @return an array of non-Java resources directly contained in this project
 	 */
 	Object[] getNonJavaResources() throws JavaModelException;
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IPackageFragment.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IPackageFragment.java
index d18072d..768b8ca 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IPackageFragment.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IPackageFragment.java
@@ -1,9 +1,9 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2001, 2002 International Business Machines Corp. and others.
+ * Copyright (c) 2000, 2002 International Business Machines Corp. and others.
  * All rights reserved. This program and the accompanying materials 
- * are made available under the terms of the Common Public License v0.5 
+ * are made available under the terms of the Common Public License v1.0 
  * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/cpl-v05.html
+ * http://www.eclipse.org/legal/cpl-v10.html
  * 
  * Contributors:
  *     IBM Corporation - initial API and implementation
@@ -135,8 +135,17 @@ public interface IPackageFragment extends IParent, IJavaElement, IOpenable, ISou
 	int getKind() throws JavaModelException;
 	/**
 	 * Returns an array of non-Java resources contained in this package fragment.
+	 * <p>
+	 * Non-Java resources includes other files and folders located in the same
+	 * directory as the compilation units or class files for this package 
+	 * fragment. Source files excluded from this package by one or more
+	 * exclusion patterns on the corresponding source classpath entry are
+	 * considered non-Java resources and will appear in the result
+	 * (possibly in a folder).
+	 * </p>
 	 * 
 	 * @return an array of non-Java resources contained in this package fragment
+	 * @see IClasspathEntry#getExclusionPatterns
 	 */
 	Object[] getNonJavaResources() throws JavaModelException;
 	/**
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IPackageFragmentRoot.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IPackageFragmentRoot.java
index ee5d31d..809077d 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IPackageFragmentRoot.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IPackageFragmentRoot.java
@@ -1,9 +1,9 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2001, 2002 International Business Machines Corp. and others.
+ * Copyright (c) 2000, 2002 International Business Machines Corp. and others.
  * All rights reserved. This program and the accompanying materials 
- * are made available under the terms of the Common Public License v0.5 
+ * are made available under the terms of the Common Public License v1.0 
  * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/cpl-v05.html
+ * http://www.eclipse.org/legal/cpl-v10.html
  * 
  * Contributors:
  *     IBM Corporation - initial API and implementation
@@ -117,8 +117,17 @@ public interface IPackageFragmentRoot
 	
 	/**
 	 * Returns an array of non-Java resources contained in this package fragment root.
+	 * <p>
+	 * Non-Java resources includes other files and folders located in the same
+	 * directories as the compilation units or class files under this package
+	 * fragment root. Source files excluded from this package fragment root
+	 * by one or more exclusion patterns on the corresponding source classpath
+	 * entry are considered non-Java resources and will appear in the result
+	 * (possibly in a folder).
+	 * </p>
 	 * 
 	 * @return an array of non-Java resources contained in this package fragment root
+	 * @see IClasspathEntry#getExclusionPatterns
 	 */
 	Object[] getNonJavaResources() throws JavaModelException;
 	
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java
index e2bcc7e..83c1f75 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java
@@ -1975,27 +1975,33 @@ public final class JavaCore extends Plugin implements IExecutableExtension {
 	}
 
 	/**
-	 * Creates and returns a new classpath entry of kind <code>CPE_SOURCE</code> for the project's source folder 
-	 * identified by the given absolute path. This specifies that all package fragments within the root will 
-	 * have children of type <code>ICompilationUnit</code>.
-	 * <p>
-	 * The source folder is referred to using an absolute path relative to the workspace root, e.g. <code>/Project/src</code>.
-	 * <p>
-	 * A source entry is used to set up the internal source layout of a project, and cannot be used out of the
-	 * context of the containing project (a source entry <code>/Proj1/src</code> cannot be used on the classpath of 
-	 * a different project <code>/Proj2</code>).
+	 * Creates and returns a new classpath entry of kind <code>CPE_SOURCE</code>
+	 * for the project's source folder identified by the given absolute 
+	 * workspace-relative path. This specifies that all package fragments
+	 * within the root will have children of type <code>ICompilationUnit</code>.
+	 * <p>
+	 * The source folder is referred to using an absolute path relative to the
+	 * workspace root, e.g. <code>/Project/src</code>. A project's source 
+	 * folders are located with that project. That is, a source classpath
+	 * entry specifying the path <code>/P1/src</code> is only usable for
+	 * project <code>P1</code>.
+	 * </p>
 	 * <p>
-	 * A particular source entry cannot be exported to other projects. All sources/binaries inside a project are
-	 * contributed as a whole through a project entry (see <code>JavaCore.newProjectEntry</code>).
+	 * The source classpath entry created by this method includes all source
+	 * files below the given workspace-relative path. To selectively exclude
+	 * some of these source files, use the factory method 
+	 * <code>JavaCore.newSourceEntry(IPath,IPath[])</code> instead.
+	 * </p>
 	 * <p>
-	 * In order to exclude resources from the source folder, the factory method <code>JavaCore.newSourceEntry(IPath,IPath[])
-	 * </code> should be used instead. When no exclusion patterns is specified, the source folder will automatically include all
-	 * resources located inside the source folder and implicitly ignore all ".class" files.
+	 * Note that all sources/binaries inside a project are contributed as a whole through
+	 * a project entry (see <code>JavaCore.newProjectEntry</code>). Particular
+	 * source entries cannot be selectively exported.
+	 * </p>
 	 * 
-	 * @param path the absolute path of a source folder
-	 * @return a new source classpath entry
+	 * @param path the absolute workspace-relative path of a source folder
+	 * @return a new source classpath entry with not exclusion patterns
 	 * 
-	 * @see #newSourceEntry(IPath,IPath[])
+	 * @see #newSourceEntry(org.eclipse.core.runtime.IPath,org.eclipse.core.runtime.IPath[])
 	 */
 	public static IClasspathEntry newSourceEntry(IPath path) {
 
@@ -2003,31 +2009,51 @@ public final class JavaCore extends Plugin implements IExecutableExtension {
 	}
 	
 	/**
-	 * Creates and returns a new classpath entry of kind <code>CPE_SOURCE</code> for the project's source folder 
-	 * identified by the given absolute path. This specifies that all package fragments within the root will 
-	 * have children of type <code>ICompilationUnit</code>.
-	 * <p>
-	 * The source folder is referred to using an absolute path relative to the workspace root, e.g. <code>"/Project/src"</code>.
-	 * <p>
-	 * A source entry is used to set up the internal source layout of a project, and cannot be used out of the
-	 * context of the containing project (a source entry "Proj1/src" cannot be used on the classpath of Proj2).
-	 * TODO: should mention mount points at this stage
-	 * <p>
-	 * A particular source entry cannot be exported to other projects. All sources/binaries inside a project are
-	 * contributed as a whole through a project entry (see <code>JavaCore.newProjectEntry</code>).
+	 * Creates and returns a new classpath entry of kind <code>CPE_SOURCE</code>
+	 * for the project's source folder identified by the given absolute 
+	 * workspace-relative path but excluding all source files with paths
+	 * matching any of the given patterns. This specifies that all package
+	 * fragments within the root will have children of type 
+	 * <code>ICompilationUnit</code>.
+	 * <p>
+	 * The source folder is referred to using an absolute path relative to the
+	 * workspace root, e.g. <code>/Project/src</code>. A project's source 
+	 * folders are located with that project. That is, a source classpath
+	 * entry specifying the path <code>/P1/src</code> is only usable for
+	 * project <code>P1</code>.
+	 * </p>
 	 * <p>
-	 * Exclusion patterns can be specified to cause portions of the resource tree to be excluded from this source folder.
-	 * If <code>null</code> is passed, then the source folder will default to only exclude ".class" files (which is the minimal
-	 * exclusion pattern). Empty patterns will automatically be discarded (after trimmed). Exclusion patterns are source
-	 * folder relative paths, and can contain '**', '*' or '?' wildcards (see <code>IClasspathEntry#getExclusionPatterns()</code>).
+	 * The source classpath entry created by this method includes all source
+	 * files below the given workspace-relative path except for those matched
+	 * by one (or more) of the given exclusion patterns. Each exclusion pattern
+	 * is represented by a relative path, which is interpreted as relative to
+	 * the source folder. For example, if the source folder path is 
+	 * <code>/Project/src</code> and the exclusion pattern is 
+	 * <code>com/xyz/tests/&#42;&#42;</code>, then source files
+	 * like <code>/Project/src/com/xyz/Foo.java</code>
+	 * and <code>/Project/src/com/xyz/utils/Bar.java</code> would be included,
+	 * whereas <code>/Project/src/com/xyz/tests/T1.java</code>
+	 * and <code>/Project/src/com/xyz/tests/quick/T2.java</code> would be
+	 * excluded. Exclusion patterns can contain can contain '**', '*' or '?'
+	 * wildcards; see <code>IClasspathEntry.getExclusionPatterns</code>
+	 * for the full description of the syntax and semantics of exclusion
+	 * patterns.
+	 * </p>
+	 * If the empty list of exclusion patterns is specified, the source folder
+	 * will automatically include all resources located inside the source
+	 * folder. In that case, the result is entirely equivalent to using the
+	 * factory method <code>JavaCore.newSourceEntry(IPath)</code>. 
+	 * </p>
 	 * <p>
-	 * In case no resource need to be excluded from the source folder, the factory method <code>JavaCore.newSourceEntry(IPath)</code>
-	 * can be used instead.
+	 * Note that all sources/binaries inside a project are contributed as a whole through
+	 * a project entry (see <code>JavaCore.newProjectEntry</code>). Particular
+	 * source entries cannot be selectively exported.
+	 * </p>
 	 *
-	 * @param path the absolute path of a source folder
-	 * @param exclusionPatterns the resource path patterns to exclude
-	 * @return a new source classpath entry
-	 * 
+	 * @param path the absolute workspace-relative path of a source folder
+	 * @param exclusionPatterns the possibly empty list of exclusion patterns
+	 *    represented as relative paths
+	 * @return a new source classpath entry with the given exclusion patterns
 	 * @see #newSourceEntry(org.eclipse.core.runtime.IPath)
 	 * @see IClasspathEntry#getExclusionPatterns
 	 * 

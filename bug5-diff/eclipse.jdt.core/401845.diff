commit f6ec98c28a6dab858ad73a502050b5fb2a693eb4
Author: ssankaran <srikanth_sankaran@in.ibm.com>
Date:   Wed Feb 27 06:31:54 2013 +0530

    Fixed Bug 401845 - [1.8][compiler] Bad interaction between varargs and
    lambas/references.

159	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
19	7	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java
19	7	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExplicitConstructorCall.java
4	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java
6	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java
19	7	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java
33	13	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java
19	7	org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetAllocationExpression.java
19	7	org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetMessageSend.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
index 7763e35..f9bb0c3 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
@@ -5446,6 +5446,165 @@ this.runNegativeTest(
 				"Zork cannot be resolved to a type\n" + 
 				"----------\n");
 }
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=401845, [1.8][compiler] Bad interaction between varargs and lambas/references
+public void test401845() {
+	this.runNegativeTest(
+			new String[] {
+				"X.java",
+				"interface I {\n" +
+				"	Integer foo(X x);\n" +
+				"}\n" +
+				"public class X extends Zork {\n" +
+				"	int foo(I ...i) { return 10;}\n" +
+				"	int goo() { return 0;}\n" +
+				"	{\n" +
+				"		foo(X::goo);\n" +
+				"		foo((x)-> {return 10;});\n" +
+				"	}\n" +
+				"}\n",
+			},
+			"----------\n" + 
+			"1. ERROR in X.java (at line 4)\n" + 
+			"	public class X extends Zork {\n" + 
+			"	                       ^^^^\n" + 
+			"Zork cannot be resolved to a type\n" + 
+			"----------\n");
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=401845, [1.8][compiler] Bad interaction between varargs and lambas/references
+public void test401845a() {
+	this.runNegativeTest(
+			new String[] {
+				"X.java",
+				"interface I {\n" +
+				"	Integer foo(X x);\n" +
+				"}\n" +
+				"public class X {\n" +
+				"	int foo(I [] ...i) { return 10;}\n" +
+				"	int goo() { return 0;}\n" +
+				"	{\n" +
+				"		foo(X::goo);\n" +
+				"		foo((x)-> {return 10;});\n" +
+				"	}\n" +
+				"}\n",
+			},
+			"----------\n" + 
+			"1. ERROR in X.java (at line 8)\n" + 
+			"	foo(X::goo);\n" + 
+			"	^^^\n" + 
+			"The method foo(I[]...) in the type X is not applicable for the arguments (X::goo)\n" + 
+			"----------\n" + 
+			"2. ERROR in X.java (at line 9)\n" + 
+			"	foo((x)-> {return 10;});\n" + 
+			"	^^^\n" + 
+			"The method foo(I[]...) in the type X is not applicable for the arguments ((<no type> x) -> {\n" + 
+			"  return 10;\n" + 
+			"})\n" + 
+			"----------\n");
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=401845, [1.8][compiler] Bad interaction between varargs and lambas/references
+public void test401845b() {
+	this.runNegativeTest(
+			new String[] {
+				"X.java",
+				"interface I {\n" +
+				"	Integer foo(X x);\n" +
+				"}\n" +
+				"public class X extends Zork {\n" +
+				"	X(I ...i) {}\n" +
+				"	int goo() { return 0;}\n" +
+				"	{\n" +
+				"		new X(X::goo);\n" +
+				"		new X((x)-> {return 10;});\n" +
+				"	}\n" +
+				"}\n",
+			},
+			"----------\n" + 
+			"1. ERROR in X.java (at line 4)\n" + 
+			"	public class X extends Zork {\n" + 
+			"	                       ^^^^\n" + 
+			"Zork cannot be resolved to a type\n" + 
+			"----------\n");
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=401845, [1.8][compiler] Bad interaction between varargs and lambas/references
+public void test401845c() {
+	this.runNegativeTest(
+			new String[] {
+				"X.java",
+				"interface I {\n" +
+				"	Integer foo(X x);\n" +
+				"}\n" +
+				"public class X extends Zork {\n" +
+				"	X(I ...i) {}\n" +
+				"   X() {\n" +
+				"       this((x)-> {return 10;});\n" +
+				"}\n" +
+				"	int goo() { return 0;}\n" +
+				"	{\n" +
+				"		new X(X::goo);\n" +
+				"		new X((x)-> {return 10;});\n" +
+				"	}\n" +
+				"}\n",
+			},
+			"----------\n" + 
+			"1. ERROR in X.java (at line 4)\n" + 
+			"	public class X extends Zork {\n" + 
+			"	                       ^^^^\n" + 
+			"Zork cannot be resolved to a type\n" + 
+			"----------\n");
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=401845, [1.8][compiler] Bad interaction between varargs and lambas/references
+public void test401845d() {
+	this.runNegativeTest(
+			new String[] {
+				"X.java",
+				"interface I {\n" +
+				"	Integer foo(X x);\n" +
+				"}\n" +
+				"public class X extends Zork {\n" +
+				"    class Y {\n" +
+				"        Y(I ... i) {}\n" +
+				"    }\n" +
+				"	int goo() { return 0;}\n" +
+				"	{\n" +
+				"		new X().new Y(X::goo);\n" +
+				"		new X().new Y((x)-> {return 10;});\n" +
+				"	}\n" +
+				"}\n",
+			},
+			"----------\n" + 
+			"1. ERROR in X.java (at line 4)\n" + 
+			"	public class X extends Zork {\n" + 
+			"	                       ^^^^\n" + 
+			"Zork cannot be resolved to a type\n" + 
+			"----------\n");
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=401845, [1.8][compiler] Bad interaction between varargs and lambas/references
+public void test401845e() {
+	this.runNegativeTest(
+			new String[] {
+				"X.java",
+				"interface I {\n" +
+				"	Integer foo(X x);\n" +
+				"}\n" +
+				"public class X extends Zork {\n" +
+				"	X(I ...i) {}\n" +
+				"   X() {\n" +
+				"       this((x)-> {return 10;});\n" +
+				"}\n" +
+				"	int goo() { return 0;}\n" +
+				"	{\n" +
+				"		new X(X::goo) {};\n" +
+				"		new X((x)-> {return 10;}){};\n" +
+				"	}\n" +
+				"}\n",
+			},
+			"----------\n" + 
+			"1. ERROR in X.java (at line 4)\n" + 
+			"	public class X extends Zork {\n" + 
+			"	                       ^^^^\n" + 
+			"Zork cannot be resolved to a type\n" + 
+			"----------\n");
+}
 public static Class testClass() {
 	return NegativeLambdaExpressionsTest.class;
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java
index 287ef00..f13f940 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java
@@ -346,10 +346,12 @@ public TypeBinding resolveType(BlockScope scope) {
 	// buffering the arguments' types
 	boolean argsContainCast = false;
 	TypeBinding[] argumentTypes = Binding.NO_PARAMETERS;
+	boolean polyExpressionSeen = false;
 	if (this.arguments != null) {
 		boolean argHasError = false;
 		int length = this.arguments.length;
 		argumentTypes = new TypeBinding[length];
+		TypeBinding argumentType;
 		for (int i = 0; i < length; i++) {
 			Expression argument = this.arguments[i];
 			if (argument instanceof CastExpression) {
@@ -357,9 +359,11 @@ public TypeBinding resolveType(BlockScope scope) {
 				argsContainCast = true;
 			}
 			argument.setExpressionContext(INVOCATION_CONTEXT);
-			if ((argumentTypes[i] = argument.resolveType(scope)) == null) {
+			if ((argumentType = argumentTypes[i] = argument.resolveType(scope)) == null) {
 				argHasError = true;
 			}
+			if (argumentType != null && argumentType.kind() == Binding.POLY_TYPE)
+				polyExpressionSeen = true;
 		}
 		if (argHasError) {
 			/* https://bugs.eclipse.org/bugs/show_bug.cgi?id=345359, if arguments have errors, completely bail out in the <> case.
@@ -424,12 +428,20 @@ public TypeBinding resolveType(BlockScope scope) {
 		scope.problemReporter().invalidConstructor(this, this.binding);
 		return this.resolvedType;
 	}
-	for (int i = 0, length = this.arguments == null ? 0 : this.arguments.length; i < length; i++) {
-		Expression argument = this.arguments[i];
-		if (argumentTypes[i] instanceof PolyTypeBinding) {
-			argument.setExpressionContext(INVOCATION_CONTEXT);
-			argument.setExpectedType(this.binding.parameters[i]);
-			argumentTypes[i] = argument.resolveType(scope);
+	if (polyExpressionSeen) {
+		boolean variableArity = this.binding.isVarargs();
+		final TypeBinding[] parameters = this.binding.parameters;
+		final int parametersLength = parameters.length;
+		for (int i = 0, length = this.arguments == null ? 0 : this.arguments.length; i < length; i++) {
+			Expression argument = this.arguments[i];
+			TypeBinding parameterType = i < parametersLength ? parameters[i] : parameters[parametersLength - 1];
+			if (argumentTypes[i] instanceof PolyTypeBinding) {
+				argument.setExpressionContext(INVOCATION_CONTEXT);
+				if (variableArity && i >= parametersLength - 1)
+					argument.tagAsEllipsisArgument();
+				argument.setExpectedType(parameterType);
+				argumentTypes[i] = argument.resolveType(scope);
+			}
 		}
 	}
 	if ((this.binding.tagBits & TagBits.HasMissingType) != 0) {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExplicitConstructorCall.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExplicitConstructorCall.java
index 7524584..7f1a50e 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExplicitConstructorCall.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExplicitConstructorCall.java
@@ -359,10 +359,12 @@ public class ExplicitConstructorCall extends Statement implements InvocationSite
 			// arguments buffering for the method lookup
 			TypeBinding[] argumentTypes = Binding.NO_PARAMETERS;
 			boolean argsContainCast = false;
+			boolean polyExpressionSeen = false;
 			if (this.arguments != null) {
 				boolean argHasError = false; // typeChecks all arguments
 				int length = this.arguments.length;
 				argumentTypes = new TypeBinding[length];
+				TypeBinding argumentType;
 				for (int i = 0; i < length; i++) {
 					Expression argument = this.arguments[i];
 					if (argument instanceof CastExpression) {
@@ -370,9 +372,11 @@ public class ExplicitConstructorCall extends Statement implements InvocationSite
 						argsContainCast = true;
 					}
 					argument.setExpressionContext(INVOCATION_CONTEXT);
-					if ((argumentTypes[i] = argument.resolveType(scope)) == null) {
+					if ((argumentType = argumentTypes[i] = argument.resolveType(scope)) == null) {
 						argHasError = true;
 					}
+					if (argumentType != null && argumentType.kind() == Binding.POLY_TYPE)
+						polyExpressionSeen = true;
 				}
 				if (argHasError) {
 					if (receiverType == null) {
@@ -410,12 +414,20 @@ public class ExplicitConstructorCall extends Statement implements InvocationSite
 				return;
 			}
 			if ((this.binding = scope.getConstructor(receiverType, argumentTypes, this)).isValidBinding()) {
-				for (int i = 0, length = this.arguments == null ? 0 : this.arguments.length; i < length; i++) {
-					Expression argument = this.arguments[i];
-					if (argumentTypes[i] instanceof PolyTypeBinding) {
-						argument.setExpressionContext(INVOCATION_CONTEXT);
-						argument.setExpectedType(this.binding.parameters[i]);
-						argumentTypes[i] = argument.resolveType(scope);
+				if (polyExpressionSeen) {
+					boolean variableArity = this.binding.isVarargs();
+					final TypeBinding[] parameters = this.binding.parameters;
+					final int parametersLength = parameters.length;
+					for (int i = 0, length = this.arguments == null ? 0 : this.arguments.length; i < length; i++) {
+						Expression argument = this.arguments[i];
+						TypeBinding parameterType = i < parametersLength ? parameters[i] : parameters[parametersLength - 1];
+						if (argumentTypes[i] instanceof PolyTypeBinding) {
+							argument.setExpressionContext(INVOCATION_CONTEXT);
+							if (variableArity && i >= parametersLength - 1)
+								argument.tagAsEllipsisArgument();
+							argument.setExpectedType(parameterType);
+							argumentTypes[i] = argument.resolveType(scope);
+						}
 					}
 				}
 				if ((this.binding.tagBits & TagBits.HasMissingType) != 0) {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java
index 9767a8b..adce593 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java
@@ -1117,6 +1117,10 @@ public void setExpressionContext(ExpressionContext context) {
 	// don't care. Subclasses that are poly expressions in specific contexts should listen in and make note.
 }
 
+public void tagAsEllipsisArgument() {
+	// don't care. Subclasses that are poly expressions in specific contexts should listen in and make note.
+}
+
 /* Answer if the receiver is a poly expression in the prevailing context. Caveat emptor: Some constructs (notably method calls)
    cannot answer this question until after resolution is over and may throw unsupported operation exception if queried ahead of 
    resolution. Default implementation here returns false which is true for vast majority of AST nodes. The ones that are poly
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java
index aba011a..9be038d 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java
@@ -22,6 +22,7 @@ import org.eclipse.jdt.internal.compiler.codegen.CodeStream;
 import org.eclipse.jdt.internal.compiler.flow.FlowInfo;
 import org.eclipse.jdt.internal.compiler.impl.Constant;
 import org.eclipse.jdt.internal.compiler.impl.ReferenceContext;
+import org.eclipse.jdt.internal.compiler.lookup.ArrayBinding;
 import org.eclipse.jdt.internal.compiler.lookup.BlockScope;
 import org.eclipse.jdt.internal.compiler.lookup.MethodBinding;
 import org.eclipse.jdt.internal.compiler.lookup.ParameterizedTypeBinding;
@@ -46,6 +47,7 @@ public abstract class FunctionalExpression extends Expression implements Problem
 	protected ExpressionContext expressionContext = VANILLA_CONTEXT;
 	protected CompilationResult compilationResult;
 	protected BlockScope enclosingScope;
+	protected boolean ellipsisArgument;
 	protected static CompilationResult devNullCompilationResult;
 	
 	public FunctionalExpression(CompilationResult compilationResult) {
@@ -56,13 +58,16 @@ public abstract class FunctionalExpression extends Expression implements Problem
 	}
 
 	public void setExpectedType(TypeBinding expectedType) {
-		this.expectedType = expectedType;
+		this.expectedType = this.ellipsisArgument ? ((ArrayBinding) expectedType).elementsType() : expectedType;
 	}
 	
 	public void setExpressionContext(ExpressionContext context) {
 		this.expressionContext = context;
 	}
 	
+	public void tagAsEllipsisArgument() {
+		this.ellipsisArgument = true;
+	}
 	public boolean isPolyExpression() {
 		return this.expressionContext != VANILLA_CONTEXT;
 	}
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java
index 4ed7bff..2b57966 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java
@@ -476,10 +476,12 @@ public TypeBinding resolveType(BlockScope scope) {
 	}
 	// will check for null after args are resolved
 	TypeBinding[] argumentTypes = Binding.NO_PARAMETERS;
+	boolean polyExpressionSeen = false;
 	if (this.arguments != null) {
 		boolean argHasError = false; // typeChecks all arguments
 		int length = this.arguments.length;
 		argumentTypes = new TypeBinding[length];
+		TypeBinding argumentType;
 		for (int i = 0; i < length; i++){
 			Expression argument = this.arguments[i];
 			if (argument instanceof CastExpression) {
@@ -487,9 +489,11 @@ public TypeBinding resolveType(BlockScope scope) {
 				argsContainCast = true;
 			}
 			argument.setExpressionContext(INVOCATION_CONTEXT);
-			if ((argumentTypes[i] = argument.resolveType(scope)) == null){
+			if ((argumentType = argumentTypes[i] = argument.resolveType(scope)) == null){
 				argHasError = true;
 			}
+			if (argumentType != null && argumentType.kind() == Binding.POLY_TYPE)
+				polyExpressionSeen = true;
 		}
 		if (argHasError) {
 			if (this.actualReceiverType instanceof ReferenceBinding) {
@@ -575,12 +579,20 @@ public TypeBinding resolveType(BlockScope scope) {
 						? this.resolvedType
 						: null;
 	}
-	for (int i = 0, length = this.arguments == null ? 0 : this.arguments.length; i < length; i++) {
-		Expression argument = this.arguments[i];
-		if (argumentTypes[i] instanceof PolyTypeBinding) {
-			argument.setExpressionContext(INVOCATION_CONTEXT);
-			argument.setExpectedType(this.binding.parameters[i]);
-			argumentTypes[i] = argument.resolveType(scope);
+	if (polyExpressionSeen) {
+		boolean variableArity = this.binding.isVarargs();
+		final TypeBinding[] parameters = this.binding.parameters;
+		final int parametersLength = parameters.length;
+		for (int i = 0, length = this.arguments == null ? 0 : this.arguments.length; i < length; i++) {
+			Expression argument = this.arguments[i];
+			TypeBinding parameterType = i < parametersLength ? parameters[i] : parameters[parametersLength - 1];
+			if (argumentTypes[i] instanceof PolyTypeBinding) {
+				argument.setExpressionContext(INVOCATION_CONTEXT);
+				if (variableArity && i >= parametersLength - 1)
+					argument.tagAsEllipsisArgument();
+				argument.setExpectedType(parameterType);
+				argumentTypes[i] = argument.resolveType(scope);
+			}
 		}
 	}
 	final CompilerOptions compilerOptions = scope.compilerOptions();
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java
index 07a1b6e..f9c0032 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java
@@ -369,9 +369,11 @@ public class QualifiedAllocationExpression extends AllocationExpression {
 
 		// will check for null after args are resolved
 		TypeBinding[] argumentTypes = Binding.NO_PARAMETERS;
+		boolean polyExpressionSeen = false;
 		if (this.arguments != null) {
 			int length = this.arguments.length;
 			argumentTypes = new TypeBinding[length];
+			TypeBinding argumentType;
 			for (int i = 0; i < length; i++) {
 				Expression argument = this.arguments[i];
 				if (argument instanceof CastExpression) {
@@ -379,9 +381,11 @@ public class QualifiedAllocationExpression extends AllocationExpression {
 					argsContainCast = true;
 				}
 				argument.setExpressionContext(INVOCATION_CONTEXT);
-				if ((argumentTypes[i] = argument.resolveType(scope)) == null){
+				if ((argumentType = argumentTypes[i] = argument.resolveType(scope)) == null){
 					hasError = true;
 				}
+				if (argumentType != null && argumentType.kind() == Binding.POLY_TYPE)
+					polyExpressionSeen = true;
 			}
 		}
 
@@ -446,12 +450,20 @@ public class QualifiedAllocationExpression extends AllocationExpression {
 			}
 			ReferenceBinding allocationType = (ReferenceBinding) receiverType;
 			if ((this.binding = scope.getConstructor(allocationType, argumentTypes, this)).isValidBinding()) {
-				for (int i = 0, length = this.arguments == null ? 0 : this.arguments.length; i < length; i++) {
-					Expression argument = this.arguments[i];
-					if (argumentTypes[i] instanceof PolyTypeBinding) {
-						argument.setExpressionContext(INVOCATION_CONTEXT);
-						argument.setExpectedType(this.binding.parameters[i]);
-						argumentTypes[i] = argument.resolveType(scope);
+				if (polyExpressionSeen) {
+					boolean variableArity = this.binding.isVarargs();
+					final TypeBinding[] parameters = this.binding.parameters;
+					final int parametersLength = parameters.length;
+					for (int i = 0, length = this.arguments == null ? 0 : this.arguments.length; i < length; i++) {
+						Expression argument = this.arguments[i];
+						TypeBinding parameterType = i < parametersLength ? parameters[i] : parameters[parametersLength - 1];
+						if (argumentTypes[i] instanceof PolyTypeBinding) {
+							argument.setExpressionContext(INVOCATION_CONTEXT);
+							if (variableArity && i >= parametersLength - 1)
+								argument.tagAsEllipsisArgument();
+							argument.setExpectedType(parameterType);
+							argumentTypes[i] = argument.resolveType(scope);
+						}
 					}
 				}
 				if (isMethodUseDeprecated(this.binding, scope, true)) {
@@ -529,12 +541,20 @@ public class QualifiedAllocationExpression extends AllocationExpression {
 			scope.problemReporter().invalidConstructor(this, inheritedBinding);
 			return this.resolvedType;
 		}
-		for (int i = 0, length = this.arguments == null ? 0 : this.arguments.length; i < length; i++) {
-			Expression argument = this.arguments[i];
-			if (argumentTypes[i] instanceof PolyTypeBinding) {
-				argument.setExpressionContext(INVOCATION_CONTEXT);
-				argument.setExpectedType(inheritedBinding.parameters[i]);
-				argumentTypes[i] = argument.resolveType(scope);
+		if (polyExpressionSeen) {
+			boolean variableArity = inheritedBinding.isVarargs();
+			final TypeBinding[] parameters = inheritedBinding.parameters;
+			final int parametersLength = parameters.length;
+			for (int i = 0, length = this.arguments == null ? 0 : this.arguments.length; i < length; i++) {
+				Expression argument = this.arguments[i];
+				TypeBinding parameterType = i < parametersLength ? parameters[i] : parameters[parametersLength - 1];
+				if (argumentTypes[i] instanceof PolyTypeBinding) {
+					argument.setExpressionContext(INVOCATION_CONTEXT);
+					if (variableArity && i >= parametersLength - 1)
+						argument.tagAsEllipsisArgument();
+					argument.setExpectedType(parameterType);
+					argumentTypes[i] = argument.resolveType(scope);
+				}
 			}
 		}
 		if ((inheritedBinding.tagBits & TagBits.HasMissingType) != 0) {
diff --git a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetAllocationExpression.java b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetAllocationExpression.java
index 2c4f034..f34b8d3 100644
--- a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetAllocationExpression.java
+++ b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetAllocationExpression.java
@@ -180,10 +180,12 @@ public TypeBinding resolveType(BlockScope scope) {
 	// buffering the arguments' types
 	boolean argsContainCast = false;
 	TypeBinding[] argumentTypes = Binding.NO_PARAMETERS;
+	boolean polyExpressionSeen = false;
 	if (this.arguments != null) {
 		boolean argHasError = false;
 		int length = this.arguments.length;
 		argumentTypes = new TypeBinding[length];
+		TypeBinding argumentType;
 		for (int i = 0; i < length; i++) {
 			Expression argument = this.arguments[i];
 			if (argument instanceof CastExpression) {
@@ -191,9 +193,11 @@ public TypeBinding resolveType(BlockScope scope) {
 				argsContainCast = true;
 			}
 			argument.setExpressionContext(INVOCATION_CONTEXT);
-			if ((argumentTypes[i] = argument.resolveType(scope)) == null) {
+			if ((argumentType = argumentTypes[i] = argument.resolveType(scope)) == null) {
 				argHasError = true;
 			}
+			if (argumentType != null && argumentType.kind() == Binding.POLY_TYPE)
+				polyExpressionSeen = true;
 		}
 		if (argHasError) {
 			return this.resolvedType;
@@ -265,12 +269,20 @@ public TypeBinding resolveType(BlockScope scope) {
 			return this.resolvedType;
 		}
 	}
-	for (int i = 0, length = this.arguments == null ? 0 : this.arguments.length; i < length; i++) {
-		Expression argument = this.arguments[i];
-		if (argumentTypes[i] instanceof PolyTypeBinding) {
-			argument.setExpressionContext(INVOCATION_CONTEXT);
-			argument.setExpectedType(this.binding.parameters[i]);
-			argumentTypes[i] = argument.resolveType(scope);
+	if (polyExpressionSeen) {
+		boolean variableArity = this.binding.isVarargs();
+		final TypeBinding[] parameters = this.binding.parameters;
+		final int parametersLength = parameters.length;
+		for (int i = 0, length = this.arguments == null ? 0 : this.arguments.length; i < length; i++) {
+			Expression argument = this.arguments[i];
+			TypeBinding parameterType = i < parametersLength ? parameters[i] : parameters[parametersLength - 1];
+			if (argumentTypes[i] instanceof PolyTypeBinding) {
+				argument.setExpressionContext(INVOCATION_CONTEXT);
+				if (variableArity && i >= parametersLength - 1)
+					argument.tagAsEllipsisArgument();
+				argument.setExpectedType(parameterType);
+				argumentTypes[i] = argument.resolveType(scope);
+			}
 		}
 	}
 	if (isMethodUseDeprecated(this.binding, scope, true)) {
diff --git a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetMessageSend.java b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetMessageSend.java
index dc62401..eee1254 100644
--- a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetMessageSend.java
+++ b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetMessageSend.java
@@ -220,10 +220,12 @@ public TypeBinding resolveType(BlockScope scope) {
 	}
 	// will check for null after args are resolved
 	TypeBinding[] argumentTypes = Binding.NO_PARAMETERS;
+	boolean polyExpressionSeen = false;
 	if (this.arguments != null) {
 		boolean argHasError = false; // typeChecks all arguments
 		int length = this.arguments.length;
 		argumentTypes = new TypeBinding[length];
+		TypeBinding argumentType;
 		for (int i = 0; i < length; i++) {
 			Expression argument = this.arguments[i];
 			if (argument instanceof CastExpression) {
@@ -231,8 +233,10 @@ public TypeBinding resolveType(BlockScope scope) {
 				argsContainCast = true;
 			}
 			argument.setExpressionContext(INVOCATION_CONTEXT);
-			if ((argumentTypes[i] = this.arguments[i].resolveType(scope)) == null)
+			if ((argumentType = argumentTypes[i] = this.arguments[i].resolveType(scope)) == null)
 				argHasError = true;
+			if (argumentType != null && argumentType.kind() == Binding.POLY_TYPE)
+				polyExpressionSeen = true;
 		}
 		if (argHasError) {
 			if(this.actualReceiverType instanceof ReferenceBinding) {
@@ -302,12 +306,20 @@ public TypeBinding resolveType(BlockScope scope) {
 			return null;
 		}
 	}
-	for (int i = 0, length = this.arguments == null ? 0 : this.arguments.length; i < length; i++) {
-		Expression argument = this.arguments[i];
-		if (argumentTypes[i] instanceof PolyTypeBinding) {
-			argument.setExpressionContext(INVOCATION_CONTEXT);
-			argument.setExpectedType(this.binding.parameters[i]);
-			argumentTypes[i] = argument.resolveType(scope);
+	if (polyExpressionSeen) {
+		boolean variableArity = this.binding.isVarargs();
+		final TypeBinding[] parameters = this.binding.parameters;
+		final int parametersLength = parameters.length;
+		for (int i = 0, length = this.arguments == null ? 0 : this.arguments.length; i < length; i++) {
+			Expression argument = this.arguments[i];
+			TypeBinding parameterType = i < parametersLength ? parameters[i] : parameters[parametersLength - 1];
+			if (argumentTypes[i] instanceof PolyTypeBinding) {
+				argument.setExpressionContext(INVOCATION_CONTEXT);
+				if (variableArity && i >= parametersLength - 1)
+					argument.tagAsEllipsisArgument();
+				argument.setExpectedType(parameterType);
+				argumentTypes[i] = argument.resolveType(scope);
+			}
 		}
 	}
 	if (!this.binding.isStatic()) {

commit e6d1c8eac73b65997182b9feaba7e190099afd1a
Author: ssankaran <srikanth_sankaran@in.ibm.com>
Date:   Fri Jan 31 13:01:55 2014 +0530

    Fixed Bug 427072 - [1.8][compiler] Regression since fix of bug 423505:
    Method is ambiguous for type X

105	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/OverloadResolutionTest8.java
3	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java
1	6	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
3	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java
2	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/OverloadResolutionTest8.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/OverloadResolutionTest8.java
index a5c992d..b8e987b 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/OverloadResolutionTest8.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/OverloadResolutionTest8.java
@@ -2147,4 +2147,109 @@ public void test401850() {
 			},
 			"foo(X<String>)");
 }
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=427072,  [1.8][compiler] Regression since fix of bug 423505: Method is ambiguous for type X 
+public void test427072() {
+	this.runConformTest(
+			new String[] {
+				"X.java",
+				"interface I {\n" +
+				"    Object m(X t);\n" +
+				"}\n" +
+				"interface J extends I {\n" +
+				"}\n" +
+				"public class X {\n" +
+				"    int foo()  { return 0; }\n" +
+				"    int test() {\n" +
+				"        return foo(X::foo);\n" +
+				"    }\n" +
+				"    int foo(I i) {return 0;}\n" +
+				"    int foo(J j) { return 1;}\n" +
+				"    public static void main(String args[]) {\n" +
+				"        X x = new X();\n" +
+				"        int i = x.test();\n" +
+				"        System.out.println(i);\n" +
+				"    }\n" +
+				"}\n",
+			},
+			"1");
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=427072,  [1.8][compiler] Regression since fix of bug 423505: Method is ambiguous for type X 
+public void test427072a() {
+	this.runConformTest(
+			new String[] {
+				"X.java",
+				"interface I {\n" +
+				"    Object m(X t);\n" +
+				"}\n" +
+				"interface J extends I {\n" +
+				"}\n" +
+				"public class X {\n" +
+				"    int foo()  { return 0; }\n" +
+				"    int test() {\n" +
+				"        return foo((x) -> x);\n" +
+				"    }\n" +
+				"    int foo(I i) {return 0;}\n" +
+				"    int foo(J j) { return 1;}\n" +
+				"    public static void main(String args[]) {\n" +
+				"        X x = new X();\n" +
+				"        int i = x.test();\n" +
+				"        System.out.println(i);\n" +
+				"    }\n" +
+				"}\n",
+			},
+			"1");
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=427072,  [1.8][compiler] Regression since fix of bug 423505: Method is ambiguous for type X 
+public void test427072b() {
+	this.runConformTest(
+			new String[] {
+				"X.java",
+				"interface I {\n" +
+				"    Object m(X t);\n" +
+				"}\n" +
+				"interface J extends I {\n" +
+				"}\n" +
+				"public class X {\n" +
+				"    int foo()  { return 0; }\n" +
+				"    int test() {\n" +
+				"        return foo(true ? (x) -> x : X::foo);\n" +
+				"    }\n" +
+				"    int foo(I i) {return 0;}\n" +
+				"    int foo(J j) { return 1;}\n" +
+				"    public static void main(String args[]) {\n" +
+				"        X x = new X();\n" +
+				"        int i = x.test();\n" +
+				"        System.out.println(i);\n" +
+				"    }\n" +
+				"}\n",
+			},
+			"1");
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=427072,  [1.8][compiler] Regression since fix of bug 423505: Method is ambiguous for type X 
+public void test427072c() {
+	this.runConformTest(
+			new String[] {
+				"X.java",
+				"interface I {\n" +
+				"    Object m(X t);\n" +
+				"}\n" +
+				"interface J extends I {\n" +
+				"}\n" +
+				"public class X {\n" +
+				"    int foo1()  { return 0; }\n" +
+				"    int foo2()  { return 0; }\n" +
+				"    int test() {\n" +
+				"        return foo(true ? X::foo1 : X::foo2);\n" +
+				"    }\n" +
+				"    int foo(I i) {return 0;}\n" +
+				"    int foo(J j) { return 1;}\n" +
+				"    public static void main(String args[]) {\n" +
+				"        X x = new X();\n" +
+				"        int i = x.test();\n" +
+				"        System.out.println(i);\n" +
+				"    }\n" +
+				"}\n",
+			},
+			"1");
+}
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java
index 62d3865..80ff5ff 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java
@@ -717,9 +717,11 @@ public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext,
 	}
 	
 	public boolean sIsMoreSpecific(TypeBinding s, TypeBinding t) {
+		if (super.sIsMoreSpecific(s, t))
+			return true;
 		return isPolyExpression() ?
 				this.valueIfTrue.sIsMoreSpecific(s, t) && this.valueIfFalse.sIsMoreSpecific(s, t):
-				super.sIsMoreSpecific(s, t);
+				false;
 	}
 	
 	public void tagAsEllipsisArgument() {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java
index 7f59b1b..66af4ce 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java
@@ -1161,12 +1161,7 @@ public boolean isCompatibleWith(TypeBinding left, Scope scope) {
 }
 
 public boolean sIsMoreSpecific(TypeBinding s, TypeBinding t) {
-	TypeBinding expressionType = this.resolvedType;
-	if (expressionType == null || !expressionType.isValidBinding()) // Shouldn't get here, just to play it safe
-		return false; // trigger ambiguity.
-	if (s.isBaseType() && t.isBaseType())
-		return s.isCompatibleWith(t);
-	return s.findSuperTypeOriginatingFrom(t) != null;
+	return s.isCompatibleWith(t);
 }
 
 public void tagAsEllipsisArgument() {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
index 20c2dfa..a64c4cb 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
@@ -851,7 +851,7 @@ public class LambdaExpression extends FunctionalExpression implements ReferenceC
 		
 		// 15.12.2.5 
 		
-		if (TypeBinding.equalsEquals(s,  t))
+		if (super.sIsMoreSpecific(s, t))
 			return true;
 		
 		if (argumentsTypeElided() || t.findSuperTypeOriginatingFrom(s) != null)
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java
index 5e3f099..b8098f2 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java
@@ -924,7 +924,9 @@ public boolean isPolyExpression(MethodBinding resolutionCandidate) {
 }
 
 public boolean sIsMoreSpecific(TypeBinding s, TypeBinding t) {
-	return isPolyExpression() ? !s.isBaseType() && t.isBaseType() : super.sIsMoreSpecific(s, t);
+	if (super.sIsMoreSpecific(s, t))
+		return true;
+	return isPolyExpression() ? !s.isBaseType() && t.isBaseType() : false;
 }
 
 public void setFieldIndex(int depth) {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
index 8123e73..9679a2f 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
@@ -679,10 +679,10 @@ public class ReferenceExpression extends FunctionalExpression implements Invocat
 	
 	public boolean sIsMoreSpecific(TypeBinding s, TypeBinding t) {
 		
-		if (TypeBinding.equalsEquals(s, t))
+		if (super.sIsMoreSpecific(s, t))
 			return true;
 		
-		if (this.exactMethodBinding == null)
+		if (this.exactMethodBinding == null || t.findSuperTypeOriginatingFrom(s) != null)
 			return false;
 		
 		s = s.capture(this.enclosingScope, this.sourceEnd);

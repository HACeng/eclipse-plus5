commit 323d52f789e646d704223fd3ac5d22c4e4efec25
Author: Stephan Herrmann <stephan.herrmann@berlin.de>
Date:   Sun Aug 18 20:39:34 2013 +0200

    Bug 415291 - [1.8][null] differentiate type incompatibilities due to
    null annotations

381	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
21	6	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java
2	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ArrayBinding.java
5	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java
18	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java
4	3	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java
3	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TagBits.java
8	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java
14	3	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
index 4f09a58..336f1c1 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
@@ -1305,4 +1305,385 @@ public class NullTypeAnnotationTest extends AbstractNullAnnotationTest {
 				"----------\n");
 	}
 
+	public void testConditional1() {
+		runNegativeTestWithLibs(
+			new String[] {
+				"X.java",
+				"import org.eclipse.jdt.annotation.*;\n"
+				+ "import java.util.*;\n"
+				+ "public class X {\n"
+				+ "	List<@NonNull String> foo(List<@NonNull String> good, List<String> dubious, int f) {\n"
+				+ "		if (f < 2)\n"
+				+ "			return f == 0 ? good : dubious;\n"
+				+ "		if (f < 4)\n"
+				+ "			return f == 2 ? dubious : good;\n"
+				+ "		if (f < 6)\n"
+				+ "			return f == 4 ? good : good;\n"
+				+ "		return null;\n"
+				+ "	}\n"
+				+ "}\n"
+			},
+			"----------\n" + 
+			"1. WARNING in X.java (at line 6)\n" + 
+			"	return f == 0 ? good : dubious;\n" + 
+			"	       ^^^^^^^^^^^^^^^^^^^^^^^\n" + 
+			"Null type safety (type annotations): The expression of type \'List<String>\' needs unchecked conversion to conform to \'List<@NonNull String>\'\n" + 
+			"----------\n" + 
+			"2. WARNING in X.java (at line 8)\n" + 
+			"	return f == 2 ? dubious : good;\n" + 
+			"	       ^^^^^^^^^^^^^^^^^^^^^^^\n" + 
+			"Null type safety (type annotations): The expression of type \'List<String>\' needs unchecked conversion to conform to \'List<@NonNull String>\'\n" + 
+			"----------\n");
+	}
+
+	// types with null annotations on details (type parameter) are compatible to equal types
+	public void testCompatibility1() {
+		runConformTestWithLibs(
+			new String[] {
+				"X.java",
+				"import org.eclipse.jdt.annotation.*;\n"
+				+ "import java.util.*;\n"
+				+ "public class X {\n"
+				+ "	List<@NonNull String> return1(List<@NonNull String> noNulls) {\n"
+				+ "		return noNulls;\n"
+				+ "	}\n"
+				+ "	List<@Nullable String> return2(List<@Nullable String> withNulls) {\n"
+				+ "		return withNulls;\n"
+				+ "	}\n"
+				+ "	void assigns(List<@NonNull String> noNulls, List<String> dubious, List<@Nullable String> withNulls) {\n"
+				+ "		List<@NonNull String> l1 = noNulls;\n"
+				+ "		List<@Nullable String> l2 = withNulls;\n"
+				+ "		List<String> l3 = dubious;\n"
+				+ "	}\n"
+				+ "	void arguments(List<@NonNull String> noNulls, List<String> dubious, List<@Nullable String> withNulls) {\n"
+				+ "		assigns(noNulls, dubious, withNulls);\n"
+				+ "	}\n"
+				+ "}\n"
+			},
+			getCompilerOptions(),
+			"");
+	}
+
+	// types with null annotations on details (array content) are compatible to equal types
+	public void testCompatibility1a() {
+		runConformTestWithLibs(
+			new String[] {
+				"X.java",
+				"import org.eclipse.jdt.annotation.*;\n"
+				+ "public class X {\n"
+				+ "	@NonNull String[] return1(@NonNull String[] noNulls) {\n"
+				+ "		return noNulls;\n"
+				+ "	}\n"
+				+ "	@Nullable String[] return2(@Nullable String[] noNulls) {\n"
+				+ "		return noNulls;\n"
+				+ "	}\n"
+				+ "	void assigns(@NonNull String[] noNulls, String dubious[], @Nullable String[] withNulls) {\n"
+				+ "		@NonNull String[] l1 = noNulls;\n"
+				+ "		@Nullable String[] l2 = withNulls;\n"
+				+ "		String[] l3 = dubious;\n"
+				+ "	}\n"
+				+ "	void arguments(@NonNull String[] noNulls, String[] dubious, @Nullable String[] withNulls) {\n"
+				+ "		assigns(noNulls, dubious, withNulls);\n"
+				+ "	}\n"
+				+ "}\n"
+			},
+			getCompilerOptions(),
+			"");
+	}
+
+	// types with null annotations on details (type parameter) are compatible to types lacking the annotation
+	public void testCompatibility2() {
+		runConformTestWithLibs(
+			new String[] {
+				"X.java",
+				"import org.eclipse.jdt.annotation.*;\n"
+				+ "import java.util.*;\n"
+				+ "public class X {\n"
+				+ "	List<String> return1(List<@NonNull String> noNulls) {\n"
+				+ "		return noNulls;\n"
+				+ "	}\n"
+				+ "	List<String> return2(List<String> dubious) {\n"
+				+ "		return dubious;\n"
+				+ "	}\n"
+				+ "	List<String> return3(List<@Nullable String> withNulls) {\n"
+				+ "		return withNulls;\n"
+				+ "	}\n"
+				+ "	void assigns(List<@NonNull String> noNulls, List<String> dubious, List<@Nullable String> withNulls) {\n"
+				+ "		List<String> l1 = noNulls;\n"
+				+ "		List<String> l2 = dubious;\n"
+				+ "		List<String> l3 = withNulls;\n"
+				+ "	}\n"
+				+ "	void arguments(List<@NonNull String> noNulls, List<String> dubious, List<@Nullable String> withNulls) {\n"
+				+ "		takeAny(noNulls);\n"
+				+ "		takeAny(dubious);\n"
+				+ "		takeAny(withNulls);\n"
+				+ "	}\n"
+				+ "	void takeAny(List<String> any) {}\n"
+				+ "}\n"
+			},
+			getCompilerOptions(),
+			"");
+	}
+
+	// types with null annotations on details (array content) are compatible to types lacking the annotation
+	public void testCompatibility2a() {
+		runConformTestWithLibs(
+			new String[] {
+				"X.java",
+				"import org.eclipse.jdt.annotation.*;\n"
+				+ "public class X {\n"
+				+ "	String[] return1(@NonNull String[] noNulls) {\n"
+				+ "		return noNulls;\n"
+				+ "	}\n"
+				+ "	String[] return2(String[] dubious) {\n"
+				+ "		return dubious;\n"
+				+ "	}\n"
+				+ "	String[] return3(@Nullable String[] withNulls) {\n"
+				+ "		return withNulls;\n"
+				+ "	}\n"
+				+ "	void assigns(@NonNull String[] noNulls, String[] dubious, @Nullable String[] withNulls) {\n"
+				+ "		String[] l1 = noNulls;\n"
+				+ "		String[] l2 = dubious;\n"
+				+ "		String[] l3 = withNulls;\n"
+				+ "	}\n"
+				+ "	void arguments(@NonNull String[] noNulls, String[] dubious, @Nullable String[] withNulls) {\n"
+				+ "		takeAny(noNulls);\n"
+				+ "		takeAny(dubious);\n"
+				+ "		takeAny(withNulls);\n"
+				+ "	}\n"
+				+ "	void takeAny(String[] any) {}\n"
+				+ "}\n"
+			},
+			getCompilerOptions(),
+			"");
+	}
+
+	// types without null annotations are converted (unsafe) to types with detail annotations (type parameter)
+	public void testCompatibility3() {
+		runNegativeTestWithLibs(
+			new String[] {
+				"X.java",
+				"import org.eclipse.jdt.annotation.*;\n"
+				+ "import java.util.*;\n"
+				+ "public class X {\n"
+				+ "	List<@NonNull String> return1(List<String> dubious) {\n"
+				+ "		return dubious;\n"
+				+ "	}\n"
+				+ "	List<@Nullable String> return2(List<String> dubious) {\n"
+				+ "		return dubious;\n"
+				+ "	}\n"
+				+ "	void assigns(List<String> dubious) {\n"
+				+ "		List<@Nullable String> l1 = dubious;\n"
+				+ "		List<@NonNull String> l2 = dubious;\n"
+				+ "	}\n"
+				+ "	void arguments(List<String> dubious) {\n"
+				+ "		acceptNulls(dubious);\n"
+				+ "		acceptNoNulls(dubious);\n"
+				+ "	}\n"
+				+ "	void acceptNulls(List<@NonNull String> noNulls) {}\n"
+				+ "	void acceptNoNulls(List<@NonNull String> noNulls) {}\n"
+				+ "}\n"
+			},
+			"----------\n" + 
+			"1. WARNING in X.java (at line 5)\n" + 
+			"	return dubious;\n" + 
+			"	       ^^^^^^^\n" + 
+			"Null type safety (type annotations): The expression of type \'List<String>\' needs unchecked conversion to conform to \'List<@NonNull String>\'\n" + 
+			"----------\n" + 
+			"2. WARNING in X.java (at line 8)\n" + 
+			"	return dubious;\n" + 
+			"	       ^^^^^^^\n" + 
+			"Null type safety (type annotations): The expression of type \'List<String>\' needs unchecked conversion to conform to \'List<@Nullable String>\'\n" + 
+			"----------\n" + 
+			"3. WARNING in X.java (at line 11)\n" + 
+			"	List<@Nullable String> l1 = dubious;\n" + 
+			"	                            ^^^^^^^\n" + 
+			"Null type safety (type annotations): The expression of type \'List<String>\' needs unchecked conversion to conform to \'List<@Nullable String>\'\n" + 
+			"----------\n" + 
+			"4. WARNING in X.java (at line 12)\n" + 
+			"	List<@NonNull String> l2 = dubious;\n" + 
+			"	                           ^^^^^^^\n" + 
+			"Null type safety (type annotations): The expression of type \'List<String>\' needs unchecked conversion to conform to \'List<@NonNull String>\'\n" + 
+			"----------\n" + 
+			"5. WARNING in X.java (at line 15)\n" + 
+			"	acceptNulls(dubious);\n" + 
+			"	            ^^^^^^^\n" + 
+			"Null type safety (type annotations): The expression of type \'List<String>\' needs unchecked conversion to conform to \'List<@NonNull String>\'\n" + 
+			"----------\n" + 
+			"6. WARNING in X.java (at line 16)\n" + 
+			"	acceptNoNulls(dubious);\n" + 
+			"	              ^^^^^^^\n" + 
+			"Null type safety (type annotations): The expression of type \'List<String>\' needs unchecked conversion to conform to \'List<@NonNull String>\'\n" + 
+			"----------\n");
+	}
+
+	// types without null annotations are converted (unsafe) to types with detail annotations (array content)
+	public void testCompatibility3a() {
+		runNegativeTestWithLibs(
+			new String[] {
+				"X.java",
+				"import org.eclipse.jdt.annotation.*;\n"
+				+ "public class X {\n"
+				+ "	@NonNull String[] return1(String[] dubious) {\n"
+				+ "		return dubious;\n"
+				+ "	}\n"
+				+ "	@Nullable String[] return2(String[] dubious) {\n"
+				+ "		return dubious;\n"
+				+ "	}\n"
+				+ "	void assigns(String[] dubious) {\n"
+				+ "		@Nullable String[] l1 = dubious;\n"
+				+ "		@NonNull String[] l2 = dubious;\n"
+				+ "	}\n"
+				+ "	void arguments(String[] dubious) {\n"
+				+ "		acceptNulls(dubious);\n"
+				+ "		acceptNoNulls(dubious);\n"
+				+ "	}\n"
+				+ "	void acceptNulls(@NonNull String[] noNulls) {}\n"
+				+ "	void acceptNoNulls(@NonNull String[] noNulls) {}\n"
+				+ "}\n"
+			},
+			"----------\n" + 
+			"1. WARNING in X.java (at line 4)\n" + 
+			"	return dubious;\n" + 
+			"	       ^^^^^^^\n" + 
+			"Null type safety (type annotations): The expression of type \'String[]\' needs unchecked conversion to conform to \'String @NonNull[]\'\n" + 
+			"----------\n" + 
+			"2. WARNING in X.java (at line 7)\n" + 
+			"	return dubious;\n" + 
+			"	       ^^^^^^^\n" + 
+			"Null type safety (type annotations): The expression of type \'String[]\' needs unchecked conversion to conform to \'String @Nullable[]\'\n" + 
+			"----------\n" + 
+			"3. WARNING in X.java (at line 10)\n" + 
+			"	@Nullable String[] l1 = dubious;\n" + 
+			"	                        ^^^^^^^\n" + 
+			"Null type safety (type annotations): The expression of type \'String[]\' needs unchecked conversion to conform to \'String @Nullable[]\'\n" + 
+			"----------\n" + 
+			"4. WARNING in X.java (at line 11)\n" + 
+			"	@NonNull String[] l2 = dubious;\n" + 
+			"	                       ^^^^^^^\n" + 
+			"Null type safety (type annotations): The expression of type \'String[]\' needs unchecked conversion to conform to \'String @NonNull[]\'\n" + 
+			"----------\n" + 
+			"5. WARNING in X.java (at line 14)\n" + 
+			"	acceptNulls(dubious);\n" + 
+			"	            ^^^^^^^\n" + 
+			"Null type safety (type annotations): The expression of type \'String[]\' needs unchecked conversion to conform to \'String @NonNull[]\'\n" + 
+			"----------\n" + 
+			"6. WARNING in X.java (at line 15)\n" + 
+			"	acceptNoNulls(dubious);\n" + 
+			"	              ^^^^^^^\n" + 
+			"Null type safety (type annotations): The expression of type \'String[]\' needs unchecked conversion to conform to \'String @NonNull[]\'\n" + 
+			"----------\n");
+	}
+
+	// types with null annotations on details (type parameter) are incompatible to opposite types
+	public void testCompatibility4() {
+		runNegativeTestWithLibs(
+			new String[] {
+				"X.java",
+				"import org.eclipse.jdt.annotation.*;\n"
+				+ "import java.util.*;\n"
+				+ "public class X {\n"
+				+ "	List<@Nullable String> return1(List<@NonNull String> noNulls) {\n"
+				+ "		return noNulls;\n"
+				+ "	}\n"
+				+ "	List<@NonNull String> return2(List<@Nullable String> withNulls) {\n"
+				+ "		return withNulls;\n"
+				+ "	}\n"
+				+ "	void assigns(List<@NonNull String> noNulls, List<@Nullable String> withNulls) {\n"
+				+ "		List<@NonNull String> l1 = withNulls;\n"
+				+ "		List<@Nullable String> l2 = noNulls;\n"
+				+ "	}\n"
+				+ "	void arguments(List<@NonNull String> noNulls, List<@Nullable String> withNulls) {\n"
+				+ "		assigns(withNulls, noNulls);\n"
+				+ "	}\n"
+				+ "}\n"
+			},
+			"----------\n" + 
+			"1. ERROR in X.java (at line 5)\n" + 
+			"	return noNulls;\n" + 
+			"	       ^^^^^^^\n" + 
+			"Null type mismatch (type annotations): required 'List<@Nullable String>' but this expression has type 'List<@NonNull String>'\n" + 
+			"----------\n" + 
+			"2. ERROR in X.java (at line 8)\n" + 
+			"	return withNulls;\n" + 
+			"	       ^^^^^^^^^\n" + 
+			"Null type mismatch (type annotations): required 'List<@NonNull String>' but this expression has type 'List<@Nullable String>'\n" + 
+			"----------\n" + 
+			"3. ERROR in X.java (at line 11)\n" + 
+			"	List<@NonNull String> l1 = withNulls;\n" + 
+			"	                           ^^^^^^^^^\n" + 
+			"Null type mismatch (type annotations): required 'List<@NonNull String>' but this expression has type 'List<@Nullable String>'\n" + 
+			"----------\n" + 
+			"4. ERROR in X.java (at line 12)\n" + 
+			"	List<@Nullable String> l2 = noNulls;\n" + 
+			"	                            ^^^^^^^\n" + 
+			"Null type mismatch (type annotations): required 'List<@Nullable String>' but this expression has type 'List<@NonNull String>'\n" + 
+			"----------\n" + 
+			"5. ERROR in X.java (at line 15)\n" + 
+			"	assigns(withNulls, noNulls);\n" + 
+			"	        ^^^^^^^^^\n" + 
+			"Null type mismatch (type annotations): required 'List<@NonNull String>' but this expression has type 'List<@Nullable String>'\n" + 
+			"----------\n" + 
+			"6. ERROR in X.java (at line 15)\n" + 
+			"	assigns(withNulls, noNulls);\n" + 
+			"	                   ^^^^^^^\n" + 
+			"Null type mismatch (type annotations): required 'List<@Nullable String>' but this expression has type 'List<@NonNull String>'\n" + 
+			"----------\n");
+	}
+
+	// types with null annotations on details (array content) are incompatible to opposite types
+	public void testCompatibility4a() {
+		runNegativeTestWithLibs(
+			new String[] {
+				"X.java",
+				"import org.eclipse.jdt.annotation.*;\n"
+				+ "public class X {\n"
+				+ "	@Nullable String[] return1(@NonNull String[] noNulls) {\n"
+				+ "		return noNulls;\n"
+				+ "	}\n"
+				+ "	@NonNull String[] return2(@Nullable String[] withNulls) {\n"
+				+ "		return withNulls;\n"
+				+ "	}\n"
+				+ "	void assigns(@NonNull String[] noNulls, @Nullable String[] withNulls) {\n"
+				+ "		@NonNull String[] l1 = withNulls;\n"
+				+ "		@Nullable String[] l2 = noNulls;\n"
+				+ "	}\n"
+				+ "	void arguments(@NonNull String[] noNulls, @Nullable String[] withNulls) {\n"
+				+ "		assigns(withNulls, noNulls);\n"
+				+ "	}\n"
+				+ "}\n"
+			},
+			"----------\n" + 
+			"1. ERROR in X.java (at line 4)\n" + 
+			"	return noNulls;\n" + 
+			"	       ^^^^^^^\n" + 
+			"Null type mismatch (type annotations): required \'String @Nullable[]\' but this expression has type \'String @NonNull[]\'\n" + 
+			"----------\n" + 
+			"2. ERROR in X.java (at line 7)\n" + 
+			"	return withNulls;\n" + 
+			"	       ^^^^^^^^^\n" + 
+			"Null type mismatch (type annotations): required \'String @NonNull[]\' but this expression has type \'String @Nullable[]\'\n" + 
+			"----------\n" + 
+			"3. ERROR in X.java (at line 10)\n" + 
+			"	@NonNull String[] l1 = withNulls;\n" + 
+			"	                       ^^^^^^^^^\n" + 
+			"Null type mismatch (type annotations): required \'String @NonNull[]\' but this expression has type \'String @Nullable[]\'\n" + 
+			"----------\n" + 
+			"4. ERROR in X.java (at line 11)\n" + 
+			"	@Nullable String[] l2 = noNulls;\n" + 
+			"	                        ^^^^^^^\n" + 
+			"Null type mismatch (type annotations): required \'String @Nullable[]\' but this expression has type \'String @NonNull[]\'\n" + 
+			"----------\n" + 
+			"5. ERROR in X.java (at line 14)\n" + 
+			"	assigns(withNulls, noNulls);\n" + 
+			"	        ^^^^^^^^^\n" + 
+			"Null type mismatch (type annotations): required \'String @NonNull[]\' but this expression has type \'String @Nullable[]\'\n" + 
+			"----------\n" + 
+			"6. ERROR in X.java (at line 14)\n" + 
+			"	assigns(withNulls, noNulls);\n" + 
+			"	                   ^^^^^^^\n" + 
+			"Null type mismatch (type annotations): required \'String @Nullable[]\' but this expression has type \'String @NonNull[]\'\n" + 
+			"----------\n");
+	}
+
 }
\ No newline at end of file
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java
index 9a70a76..34fdbef 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Statement.java
@@ -24,6 +24,7 @@
  *								bug 383368 - [compiler][null] syntactic null analysis for field references
  *								Bug 392099 - [1.8][compiler][null] Apply null annotation on types for null analysis
  *								Bug 415043 - [1.8][null] Follow-up re null type annotations after bug 392099
+ *								Bug 415291 - [1.8][null] differentiate type incompatibilities due to null annotations
  *        Andy Clement - Contributions for
  *                          Bug 383624 - [1.8][compiler] Revive code generation support for type annotations (from Olivier's work)
  *******************************************************************************/
@@ -137,10 +138,13 @@ void analyseOneArgument18(BlockScope currentScope, FlowContext flowContext, Flow
 		case 2:
 			// immediate reporting:
 			currentScope.problemReporter().nullityMismatchingTypeAnnotation(argument, argument.resolvedType, expectedType, severity);
-			break;
+			return;
 		case 1:
 			flowContext.recordNullityMismatch(currentScope, argument, argument.resolvedType, expectedType, nullStatus);
-			break;
+			return;
+	}
+	if ((expectedType.tagBits & TagBits.AnnotationNonNull) != 0 && nullStatus != FlowInfo.NON_NULL) {
+		flowContext.recordNullityMismatch(currentScope, argument, argument.resolvedType, expectedType, nullStatus);
 	}
 }
 
@@ -172,7 +176,8 @@ protected int checkAssignmentAgainstNullAnnotation(BlockScope currentScope, Flow
 	}
 	return nullStatus;
 }
-//return: severity: 0 = no problem; 1 = unchecked conversion; 2 = conflicting annotations
+// return: severity: 0 = no problem; 1 = unchecked conversion wrt type detail; 2 = conflicting annotations
+// nullStatus: we are only interested in NULL or NON_NULL, -1 indicates that we are in a recursion, where flow info is ignored
 protected int findNullTypeAnnotationMismatch(TypeBinding requiredType, TypeBinding providedType, int nullStatus) {
 	int severity = 0;
 	if (requiredType instanceof ArrayBinding) {
@@ -188,7 +193,7 @@ protected int findNullTypeAnnotationMismatch(TypeBinding requiredType, TypeBindi
 						long requiredBits = requiredDimsTagBits[i] & TagBits.AnnotationNullMASK;
 						long providedBits = providedDimsTagBits[i] & TagBits.AnnotationNullMASK;
 						if (i > 0)
-							nullStatus = 0; // don't use beyond the outermost dimension
+							nullStatus = -1; // don't use beyond the outermost dimension
 						severity = Math.max(severity, computeNullProblemSeverity(requiredBits, providedBits, nullStatus));
 						if (severity == 2)
 							return severity;
@@ -201,11 +206,21 @@ protected int findNullTypeAnnotationMismatch(TypeBinding requiredType, TypeBindi
 		}
 	} else if (requiredType instanceof ParameterizedTypeBinding) {
 		long requiredBits = requiredType.tagBits & TagBits.AnnotationNullMASK;
-		if (requiredBits == TagBits.AnnotationNullable)
+		if (requiredBits == TagBits.AnnotationNullable && nullStatus != -1) // at detail/recursion even nullable must be matched exactly
 			return 0; // accepting anything
 		long providedBits = providedType.tagBits & TagBits.AnnotationNullMASK;
 		severity = computeNullProblemSeverity(requiredBits, providedBits, nullStatus);
-		// TODO(stephan): descend into type parameters
+		if (severity < 3 && providedType.isParameterizedType()) { // TODO(stephan): handle providedType.isRaw()
+			TypeBinding[] requiredArguments = ((ParameterizedTypeBinding) requiredType).arguments;
+			TypeBinding[] providedArguments = ((ParameterizedTypeBinding) providedType).arguments;
+			if (requiredArguments != null && providedArguments != null && requiredArguments.length == providedArguments.length) {
+				for (int i = 0; i < requiredArguments.length; i++) {
+					severity = Math.max(severity, findNullTypeAnnotationMismatch(requiredArguments[i], providedArguments[i], -1));
+					if (severity == 2)
+						return severity;
+				}
+			}
+		}
 	}
 	return severity;
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ArrayBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ArrayBinding.java
index 72071c8..1dfced1 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ArrayBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ArrayBinding.java
@@ -16,6 +16,7 @@
  *								bug 395002 - Self bound generic class doesn't resolve bounds properly for wildcards for certain parametrisation.
  *								bug 392384 - [1.8][compiler][null] Restore nullness info from type annotations in class files
  *								Bug 392099 - [1.8][compiler][null] Apply null annotation on types for null analysis
+ *								Bug 415291 - [1.8][null] differentiate type incompatibilities due to null annotations
  *******************************************************************************/
 package org.eclipse.jdt.internal.compiler.lookup;
 
@@ -58,6 +59,7 @@ public ArrayBinding(TypeBinding type, int dimensions, LookupEnvironment environm
 	if (nullTagBitsPerDimension != null) {
 		this.tagBits |= nullTagBitsPerDimension[0]; // outer-most dimension
 		this.nullTagBitsPerDimension = nullTagBitsPerDimension;
+		this.tagBits |= TagBits.HasNullTypeAnnotation;
 	}
 }
 
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java
index 7059105..03a327b 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java
@@ -19,6 +19,7 @@
  *								bug 392862 - [1.8][compiler][null] Evaluate null annotations on array types
  *								bug 392384 - [1.8][compiler][null] Restore nullness info from type annotations in class files
  *								Bug 392099 - [1.8][compiler][null] Apply null annotation on types for null analysis
+ *								Bug 415291 - [1.8][null] differentiate type incompatibilities due to null annotations
  *******************************************************************************/
 package org.eclipse.jdt.internal.compiler.lookup;
 
@@ -1077,7 +1078,8 @@ public ParameterizedTypeBinding createParameterizedType(ReferenceBinding generic
 			    if (cachedType == null) break nextCachedType;
 			    if (cachedType.actualType() != genericType) continue nextCachedType; // remain of unresolved type
 			    if (cachedType.enclosingType() != enclosingType) continue nextCachedType;
-			    if (annotationBits != 0 && ((cachedType.tagBits & annotationBits) != annotationBits)) continue nextCachedType;
+			    long cachedBits = cachedType.tagBits & TagBits.AnnotationNullMASK;
+			    if ((cachedBits | annotationBits) != 0 && cachedBits != annotationBits) continue nextCachedType;
 				TypeBinding[] cachedArguments = cachedType.arguments;
 				int cachedArgLength = cachedArguments == null ? 0 : cachedArguments.length;
 				if (argLength != cachedArgLength) continue nextCachedType; // would be an error situation (from unresolved binaries)
@@ -1100,7 +1102,8 @@ public ParameterizedTypeBinding createParameterizedType(ReferenceBinding generic
 	}
 	// add new binding
 	ParameterizedTypeBinding parameterizedType = new ParameterizedTypeBinding(genericType,typeArguments, enclosingType, this);
-	parameterizedType.tagBits |= annotationBits;
+	if (annotationBits != 0L)
+		parameterizedType.tagBits |= annotationBits | TagBits.HasNullTypeAnnotation;
 	cachedInfo[index] = parameterizedType;
 	return parameterizedType;
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java
index d114e4f..a663f8e 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java
@@ -17,6 +17,7 @@
  *								bug 395002 - Self bound generic class doesn't resolve bounds properly for wildcards for certain parametrisation.
  *								bug 392384 - [1.8][compiler][null] Restore nullness info from type annotations in class files
  *								Bug 392099 - [1.8][compiler][null] Apply null annotation on types for null analysis
+ *								Bug 415291 - [1.8][null] differentiate type incompatibilities due to null annotations
  *******************************************************************************/
 package org.eclipse.jdt.internal.compiler.lookup;
 
@@ -58,10 +59,15 @@ public class ParameterizedTypeBinding extends ReferenceBinding implements Substi
 		if (type instanceof UnresolvedReferenceBinding)
 			((UnresolvedReferenceBinding) type).addWrapper(this, environment);
 		if (arguments != null) {
-			for (int i = 0, l = arguments.length; i < l; i++)
+			for (int i = 0, l = arguments.length; i < l; i++) {
 				if (arguments[i] instanceof UnresolvedReferenceBinding)
 					((UnresolvedReferenceBinding) arguments[i]).addWrapper(this, environment);
+				if (arguments[i].hasNullTypeAnnotations())
+					this.tagBits |= TagBits.HasNullTypeAnnotation;
+			}
 		}
+		if (enclosingType != null && enclosingType.hasNullTypeAnnotations())
+			this.tagBits |= TagBits.HasNullTypeAnnotation;
 		this.tagBits |=  TagBits.HasUnresolvedTypeVariables; // cleared in resolve()
 	}
 
@@ -784,9 +790,19 @@ public class ParameterizedTypeBinding extends ReferenceBinding implements Substi
 	}
 
 	public TypeBinding unannotated() {
+		if (!hasNullTypeAnnotations())
+			return this;
 		if (isAnnotatedTypeWithoutArguments())
 			return this.type;
-		return this.environment.createParameterizedType(this.type, this.arguments, this.enclosingType);
+		TypeBinding[] unannotatedArguments = null;
+		if (this.arguments != null) {
+			unannotatedArguments = new TypeBinding[this.arguments.length];
+			for (int i = 0; i < unannotatedArguments.length; i++) {
+				unannotatedArguments[i] = this.arguments[i].unannotated();
+			}
+		}
+		return this.environment.createParameterizedType(this.type, unannotatedArguments, 
+				this.enclosingType == null ? null : (ReferenceBinding) this.enclosingType.unannotated());
 	}
 
 	public int kind() {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java
index d5e2163..33f1e6e 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java
@@ -24,6 +24,7 @@
  *								bug 382069 - [null] Make the null analysis consider JUnit's assertNotNull similarly to assertions
  *								bug 392384 - [1.8][compiler][null] Restore nullness info from type annotations in class files
  *								Bug 392099 - [1.8][compiler][null] Apply null annotation on types for null analysis
+ *								Bug 415291 - [1.8][null] differentiate type incompatibilities due to null annotations
  *      Jesper S Moller - Contributions for
  *								bug 382701 - [1.8][compiler] Implement semantic analysis of Lambda expressions & Reference expression
  *******************************************************************************/
@@ -1166,9 +1167,9 @@ public boolean isClass() {
  * since per nature, the compatibility check is recursive through parameterized type arguments (122775)
  */
 public boolean isCompatibleWith(TypeBinding otherType, /*@Nullable*/ Scope captureScope) {
-	if (otherType.isAnnotatedTypeWithoutArguments() && kind() != PARAMETERIZED_TYPE)
-		otherType = otherType.original(); // for now consider un-annotated type as compatible to type with any type annotations
-	// FIXME(stephan): separate checking for annotation compatibility!
+	otherType = otherType.unannotated(); // for now consider un-annotated type as compatible to type with any type annotations
+	if ((this.tagBits & TagBits.HasNullTypeAnnotation) != 0)
+		return unannotated().isCompatibleWith(otherType, captureScope);
 	if (otherType == this)
 		return true;
 	if (otherType.id == TypeIds.T_JavaLangObject)
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TagBits.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TagBits.java
index 20d3d7e..b513f05 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TagBits.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TagBits.java
@@ -15,6 +15,7 @@
  *								bug 186342 - [compiler][null] Using annotations for null checking
  *								bug 392099 - [1.8][compiler][null] Apply null annotation on types for null analysis
  *								bug 388281 - [compiler][null] inheritance of null annotations as an option
+ *								Bug 415043 - [1.8][null] Follow-up re null type annotations after bug 392099
  *******************************************************************************/
 package org.eclipse.jdt.internal.compiler.lookup;
 
@@ -168,6 +169,8 @@ public interface TagBits {
 				| AnnotationNonNullByDefault
 				| AnnotationNullUnspecifiedByDefault;
 	long AnnotationNullMASK = AnnotationNullable | AnnotationNonNull;
+	/** @since 3.9_BETA_JAVA8 marks a type that has a nullness annotation directly or on a detail (array dimension/type argument). */
+	long HasNullTypeAnnotation = ASTNode.Bit21;
 
 	long DefaultValueResolved = ASTNode.Bit60L;
 
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java
index 17f40ea..3898c40 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java
@@ -17,6 +17,7 @@
  *								bug 392862 - [1.8][compiler][null] Evaluate null annotations on array types
  *								bug 392384 - [1.8][compiler][null] Restore nullness info from type annotations in class files
  *								Bug 392099 - [1.8][compiler][null] Apply null annotation on types for null analysis
+ *								Bug 415291 - [1.8][null] differentiate type incompatibilities due to null annotations
  *      Jesper S Moller <jesper@selskabet.org> -  Contributions for
  *								bug 382701 - [1.8][compiler] Implement semantic analysis of Lambda expressions & Reference expression
  *******************************************************************************/
@@ -576,6 +577,13 @@ public final boolean isParameterizedType() {
 public boolean isAnnotatedTypeWithoutArguments() {
 	return false;
 }
+/**
+ * Does this type or any of its details (array dimensions, type arguments)
+ * have a null type annotation?
+ */
+public boolean hasNullTypeAnnotations() {
+	return (this.tagBits & TagBits.HasNullTypeAnnotation) != 0;
+}
 
 public boolean isIntersectionCastType() {
 	return false;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
index 58bb66c..050a0df 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
@@ -40,6 +40,7 @@
  *								bug 392384 - [1.8][compiler][null] Restore nullness info from type annotations in class files
  *								Bug 392099 - [1.8][compiler][null] Apply null annotation on types for null analysis
  *								Bug 415043 - [1.8][null] Follow-up re null type annotations after bug 392099
+ *								Bug 415291 - [1.8][null] differentiate type incompatibilities due to null annotations
  *      Jesper S Moller <jesper@selskabet.org> -  Contributions for
  *								bug 382701 - [1.8][compiler] Implement semantic analysis of Lambda expressions & Reference expression
  *								bug 382721 - [1.8][compiler] Effectively final variables needs special treatment
@@ -7584,13 +7585,23 @@ public void typeMismatchError(TypeBinding actualType, TypeBinding expectedType,
 	}
 	char[] actualShortReadableName = actualType.shortReadableName();
 	char[] expectedShortReadableName = expectedType.shortReadableName();
+	char[] actualReadableName = actualType.readableName();
+	char[] expectedReadableName = expectedType.readableName();
 	if (CharOperation.equals(actualShortReadableName, expectedShortReadableName)) {
-		actualShortReadableName = actualType.readableName();
-		expectedShortReadableName = expectedType.readableName();
+		if (CharOperation.equals(actualReadableName, expectedReadableName)) {
+			// if full type names are equal, assume the incompatibility is due to mismatching null annotations:
+			actualReadableName = actualType.nullAnnotatedReadableName(this.options, false);
+			expectedReadableName = expectedType.nullAnnotatedReadableName(this.options, false);
+			actualShortReadableName = actualType.nullAnnotatedReadableName(this.options, true);
+			expectedShortReadableName = expectedType.nullAnnotatedReadableName(this.options, true);
+		} else {
+			actualShortReadableName = actualReadableName;
+			expectedShortReadableName = expectedReadableName;
+		}
 	}
 	this.handle(
 		IProblem.TypeMismatch,
-		new String[] {new String(actualType.readableName()), new String(expectedType.readableName())},
+		new String[] {new String(actualReadableName), new String(expectedReadableName)},
 		new String[] {new String(actualShortReadableName), new String(expectedShortReadableName)},
 		location.sourceStart,
 		location.sourceEnd);

commit 1ddc4ec84155199b4da84a9392b9cdba9cd9a777
Author: Stefan Xenos <sxenos@gmail.com>
Date:   Fri Aug 26 20:54:48 2016 -0700

    Bug 500362 - [newindex] Discrepancies between ClassFileReader.getGenericSignature() and IndexBinaryType.getGenericSignature()
    
    Also-by: Alexander Rookey <atrookey@gmail.com>
    Change-Id: I71a0bb5ccacdba78ee5fed921c367442f777d7a0

9	0	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/ClassFileToIndexConverter.java
0	20	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/GenericSignatures.java
19	28	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/IndexTester.java
3	3	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/JavaIndex.java
2	2	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdMethod.java
3	2	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdType.java
13	15	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdVariable.java
6	3	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/model/IndexBinaryType.java
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/ClassFileToIndexConverter.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/ClassFileToIndexConverter.java
index 0f3fe9c..d778125 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/ClassFileToIndexConverter.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/ClassFileToIndexConverter.java
@@ -150,6 +150,11 @@ public class ClassFileToIndexConverter {
 		if (interfaces == null) {
 			interfaces = EMPTY_CHAR_ARRAY_ARRAY;
 		}
+
+		if (binaryType.getGenericSignature() != null) {
+			type.setFlag(NdType.FLG_GENERIC_SIGNATURE_PRESENT, true);
+		}
+
 		// Create the default generic signature if the .class file didn't supply one
 		SignatureWrapper signatureWrapper = GenericSignatures.getGenericSignature(binaryType);
 
@@ -406,6 +411,10 @@ public class ClassFileToIndexConverter {
 
 		variable.setName(nextField.getName());
 
+		if (nextField.getGenericSignature() != null) {
+			variable.setVariableFlag(NdVariable.FLG_GENERIC_SIGNATURE_PRESENT);
+		}
+
 		IBinaryAnnotation[] binaryAnnotations = nextField.getAnnotations();
 		if (binaryAnnotations != null) {
 			for (IBinaryAnnotation nextAnnotation : binaryAnnotations) {
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/GenericSignatures.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/GenericSignatures.java
index 50cbdfa..33e62d2 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/GenericSignatures.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/GenericSignatures.java
@@ -5,7 +5,6 @@ import org.eclipse.jdt.internal.compiler.env.IBinaryMethod;
 import org.eclipse.jdt.internal.compiler.env.IBinaryType;
 import org.eclipse.jdt.internal.compiler.lookup.SignatureWrapper;
 import org.eclipse.jdt.internal.core.nd.util.CharArrayUtils;
-import org.eclipse.jdt.internal.core.util.CharArrayBuffer;
 
 /**
  * Contains static factory methods for constructing {@link SignatureWrapper} from various types.
@@ -15,29 +14,10 @@ public class GenericSignatures {
 
 	public static SignatureWrapper getGenericSignature(IBinaryMethod next) {
 		char[] signature = next.getGenericSignature();
-		char[][] exceptionTypeNames = next.getExceptionTypeNames();
 		if (signature == null) {
 			signature = next.getMethodDescriptor();
 		}
 
-		// The compiler is allowed to omit thrown exceptions from the generic signature
-		// if the thrown exceptions don't make use of generics or type variables. However, we rely
-		// on them so we reinsert the missing exception declarations if they're not present.
-		if (exceptionTypeNames != null && exceptionTypeNames.length > 0) {
-			// If there are no exceptions mentioned the signature but there are exceptions
-			// in the IBinaryMethod, the compiler has omitted them... so put them back.
-			if (CharArrayUtils.indexOf('^', signature) == -1) {
-				CharArrayBuffer builder = new CharArrayBuffer();
-				builder.append(signature);
-				for(char[] nextException : exceptionTypeNames) {
-					builder.append("^L"); //$NON-NLS-1$
-					builder.append(nextException);
-					builder.append(";"); //$NON-NLS-1$
-				}
-				signature = builder.getContents();
-			}
-		}
-
 		return new SignatureWrapper(signature);
 	}
 
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/IndexTester.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/IndexTester.java
index f198aa9..018e658 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/IndexTester.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/IndexTester.java
@@ -100,8 +100,8 @@ public class IndexTester {
 
 		compareAnnotations(contextPrefix, expectedBinaryAnnotations, actualBinaryAnnotations);
 
-		compareGenericSignatures(contextPrefix + ": The generic signature did not match", expected.getGenericSignature(), //$NON-NLS-1$
-					actual.getGenericSignature());
+		compareGenericSignatures(contextPrefix + ": The generic signature did not match", //$NON-NLS-1$
+				expected.getGenericSignature(), actual.getGenericSignature());
 
 		assertEquals(contextPrefix + ": The enclosing method name did not match", expected.getEnclosingMethod(), //$NON-NLS-1$
 				actual.getEnclosingMethod());
@@ -116,7 +116,8 @@ public class IndexTester {
 				throw new IllegalStateException(contextPrefix + "Expected fields was null -- actual fields were not"); //$NON-NLS-1$
 			}
 			if (expectedFields.length != actualFields.length) {
-				throw new IllegalStateException(contextPrefix + "The expected and actual number of fields did not match"); //$NON-NLS-1$
+				throw new IllegalStateException(
+						contextPrefix + "The expected and actual number of fields did not match"); //$NON-NLS-1$
 			}
 
 			for (int fieldIdx = 0; fieldIdx < actualFields.length; fieldIdx++) {
@@ -327,15 +328,16 @@ public class IndexTester {
 		assertEquals(contextPrefix + ": The default values didn't match.", expectedMethod.getDefaultValue(), //$NON-NLS-1$
 				actualMethod.getDefaultValue());
 
-		assertEquals(contextPrefix + ": The exception type names did not match.", expectedMethod.getExceptionTypeNames(), //$NON-NLS-1$
-				actualMethod.getExceptionTypeNames());
+		assertEquals(contextPrefix + ": The exception type names did not match.", //$NON-NLS-1$
+				expectedMethod.getExceptionTypeNames(), actualMethod.getExceptionTypeNames());
 
-		compareGenericSignatures(contextPrefix + ": The method's generic signature did not match", expectedMethod.getGenericSignature(), //$NON-NLS-1$
-				actualMethod.getGenericSignature());
+		compareGenericSignatures(contextPrefix + ": The method's generic signature did not match", //$NON-NLS-1$
+				expectedMethod.getGenericSignature(), actualMethod.getGenericSignature());
 
 		assertEquals(contextPrefix + ": The method descriptors did not match.", expectedMethod.getMethodDescriptor(), //$NON-NLS-1$
 				actualMethod.getMethodDescriptor());
-		assertEquals(contextPrefix + ": The modifiers didn't match.", expectedMethod.getModifiers(), actualMethod.getModifiers()); //$NON-NLS-1$
+		assertEquals(contextPrefix + ": The modifiers didn't match.", expectedMethod.getModifiers(), //$NON-NLS-1$
+				actualMethod.getModifiers());
 
 		char[] classFileName = "".toCharArray(); //$NON-NLS-1$
 		int minAnnotatedParameters = Math.min(expectedMethod.getAnnotatedParametersCount(),
@@ -353,8 +355,10 @@ public class IndexTester {
 					actualMethod.getParameterAnnotations(idx, classFileName));
 		}
 
-		assertEquals(contextPrefix + ": The selectors did not match", expectedMethod.getSelector(), actualMethod.getSelector()); //$NON-NLS-1$
-		assertEquals(contextPrefix + ": The tag bits did not match", expectedMethod.getTagBits(), actualMethod.getTagBits()); //$NON-NLS-1$
+		assertEquals(contextPrefix + ": The selectors did not match", expectedMethod.getSelector(), //$NON-NLS-1$
+				actualMethod.getSelector());
+		assertEquals(contextPrefix + ": The tag bits did not match", expectedMethod.getTagBits(), //$NON-NLS-1$
+				actualMethod.getTagBits());
 
 		compareTypeAnnotations(contextPrefix, expectedMethod.getTypeAnnotations(), actualMethod.getTypeAnnotations());
 	}
@@ -364,19 +368,6 @@ public class IndexTester {
 	 * for class files, so the generic signatures are expected to differ in certain situations.
 	 */
 	private static void compareGenericSignatures(String message, char[] expected, char[] actual) {
-		// If the whole generic signature was omitted by the compiler, there's nothing to compare
-		if (expected == null) {
-			return;
-		}
-
-		// If the expected value was missing the optional section for exceptions then it only needs to match
-		// a prefix of the actual signature
-		if (CharArrayUtils.indexOf('^', expected) == -1 && actual.length > expected.length) {
-			if (CharArrayUtils.equals(expected, CharArrayUtils.subarray(actual, 0, expected.length))) {
-				return;
-			}
-		}
-
 		assertEquals(message, expected, actual);
 	}
 
@@ -399,15 +390,15 @@ public class IndexTester {
 
 		for (TypeAnnotationWrapper nextExpected : expectedAnnotations) {
 			if (!actualAnnotations.contains(nextExpected)) {
-				throw new IllegalStateException(
-						contextPrefix + ": The index was missing an expected type annotation: " + nextExpected.toString()); //$NON-NLS-1$
+				throw new IllegalStateException(contextPrefix + ": The index was missing an expected type annotation: " //$NON-NLS-1$
+						+ nextExpected.toString());
 			}
 		}
 
 		for (TypeAnnotationWrapper nextActual : actualAnnotations) {
 			if (!expectedAnnotations.contains(nextActual)) {
-				throw new IllegalStateException(
-						contextPrefix + ": The index contained an unexpected type annotation: " + nextActual.toString()); //$NON-NLS-1$
+				throw new IllegalStateException(contextPrefix + ": The index contained an unexpected type annotation: " //$NON-NLS-1$
+						+ nextActual.toString());
 			}
 		}
 	}
@@ -442,7 +433,7 @@ public class IndexTester {
 		compareAnnotations(contextPrefix, field1.getAnnotations(), field2.getAnnotations());
 		assertEquals(contextPrefix + ": Constants not equal", field1.getConstant(), field2.getConstant()); //$NON-NLS-1$
 		compareGenericSignatures(contextPrefix + ": The generic signature did not match", field1.getGenericSignature(), //$NON-NLS-1$
-					field2.getGenericSignature());
+				field2.getGenericSignature());
 		assertEquals(contextPrefix + ": The modifiers did not match", field1.getModifiers(), field2.getModifiers()); //$NON-NLS-1$
 		assertEquals(contextPrefix + ": The tag bits did not match", field1.getTagBits(), field2.getTagBits()); //$NON-NLS-1$
 		assertEquals(contextPrefix + ": The names did not match", field1.getName(), field2.getName()); //$NON-NLS-1$
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/JavaIndex.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/JavaIndex.java
index d5dfe7f..3274849 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/JavaIndex.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/JavaIndex.java
@@ -37,9 +37,9 @@ import org.eclipse.jdt.internal.core.nd.util.CharArrayUtils;
  */
 public class JavaIndex {
 	// Version constants
-	static final int CURRENT_VERSION = Nd.version(1, 34);
-	static final int MAX_SUPPORTED_VERSION = Nd.version(1, 34);
-	static final int MIN_SUPPORTED_VERSION = Nd.version(1, 34);
+	static final int CURRENT_VERSION = Nd.version(1, 35);
+	static final int MAX_SUPPORTED_VERSION = Nd.version(1, 35);
+	static final int MIN_SUPPORTED_VERSION = Nd.version(1, 35);
 
 	// Fields for the search header
 	public static final FieldSearchIndex<NdResourceFile> FILES;
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdMethod.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdMethod.java
index 12e1e29..c27059d 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdMethod.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdMethod.java
@@ -53,8 +53,8 @@ public class NdMethod extends NdBinding {
 		type.done();
 	}
 
-	public static final int FLG_GENERIC_SIGNATURE_PRESENT = 0x0001;
-	public static final int FLG_THROWS_SIGNATURE_PRESENT = 0x0002;
+	public static final byte FLG_GENERIC_SIGNATURE_PRESENT = 0x0001;
+	public static final byte FLG_THROWS_SIGNATURE_PRESENT = 0x0002;
 
 	public NdMethod(Nd nd, long address) {
 		super(nd, address);
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdType.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdType.java
index 2d559cb..abed112 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdType.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdType.java
@@ -62,6 +62,7 @@ public class NdType extends NdBinding {
 	public static final byte FLG_TYPE_ANONYMOUS 	= 0x0001;
 	public static final byte FLG_TYPE_LOCAL 		= 0x0002;
 	public static final byte FLG_TYPE_MEMBER 		= 0x0004;
+	public static final byte FLG_GENERIC_SIGNATURE_PRESENT = 0x0008;
 
 	public NdType(Nd nd, long address) {
 		super(nd, address);
@@ -181,13 +182,13 @@ public class NdType extends NdBinding {
 		return getFlag(FLG_TYPE_MEMBER);
 	}
 
-	private void setFlag(byte flagConstant, boolean value) {
+	public void setFlag(byte flagConstant, boolean value) {
 		int oldFlags = FLAGS.get(getNd(), this.address);
 		int newFlags =  ((oldFlags & ~flagConstant) | (value ? flagConstant : 0));
 		FLAGS.put(getNd(), this.address, (byte)newFlags);
 	}
 
-	private boolean getFlag(byte flagConstant) {
+	public boolean getFlag(byte flagConstant) {
 		return (FLAGS.get(getNd(), this.address) & flagConstant) != 0;
 	}
 
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdVariable.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdVariable.java
index 45a2d66..f8117b0 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdVariable.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdVariable.java
@@ -12,6 +12,7 @@ package org.eclipse.jdt.internal.core.nd.java;
 
 import org.eclipse.jdt.internal.core.nd.Nd;
 import org.eclipse.jdt.internal.core.nd.db.IString;
+import org.eclipse.jdt.internal.core.nd.field.FieldByte;
 import org.eclipse.jdt.internal.core.nd.field.FieldInt;
 import org.eclipse.jdt.internal.core.nd.field.FieldLong;
 import org.eclipse.jdt.internal.core.nd.field.FieldManyToOne;
@@ -23,7 +24,6 @@ import org.eclipse.jdt.internal.core.nd.field.StructDef;
  * @since 3.12
  */
 public class NdVariable extends NdBinding {
-	//public static final FieldShort VARIABLE_FLAGS;
 	public static final FieldManyToOne<NdTypeSignature> TYPE;
 	public static final FieldInt VARIABLE_ID;
 	public static final FieldManyToOne<NdMethod> DECLARING_METHOD;
@@ -31,18 +31,15 @@ public class NdVariable extends NdBinding {
 	public static final FieldString NAME;
 	public static final FieldOneToOne<NdConstant> CONSTANT;
 	public static final FieldLong TAG_BITS;
+	public static final FieldByte VARIABLE_FLAGS;
 
 	@SuppressWarnings("hiding")
 	public static StructDef<NdVariable> type;
 
-//	public static final int FLG_VARIABLE_FIELD 				= 0x01;
-//	public static final int FLG_VARIABLE_ENUM_CONSTANT 		= 0x02;
-//	public static final int FLG_VARIABLE_PARAMETER 			= 0x04;
-//	public static final int FLG_VARIABLE_EFFECTIVELY_FINAL 	= 0x08;
+	public static final byte FLG_GENERIC_SIGNATURE_PRESENT 	= 0x01;
 
 	static {
 		type = StructDef.create(NdVariable.class, NdBinding.type);
-		//VARIABLE_FLAGS = type.addShort();
 		TYPE = FieldManyToOne.create(type, NdTypeSignature.VARIABLES_OF_TYPE);
 		VARIABLE_ID = type.addInt();
 		DECLARING_METHOD = FieldManyToOne.create(type, NdMethod.DECLARED_VARIABLES);
@@ -50,6 +47,7 @@ public class NdVariable extends NdBinding {
 		NAME = type.addString();
 		CONSTANT = FieldOneToOne.create(type, NdConstant.class, NdConstant.PARENT_VARIABLE);
 		TAG_BITS = type.addLong();
+		VARIABLE_FLAGS = type.addByte();
 		type.done();
 	}
 
@@ -62,15 +60,15 @@ public class NdVariable extends NdBinding {
 
 		PARENT.put(getNd(), this.address, parent);
 	}
-//
-//	private boolean hasVariableFlag(int toTest) {
-//		return (VARIABLE_FLAGS.get(getNd(), this.address) & toTest) != 0;
-//	}
-//
-//	private void setVariableFlag(int toSet) {
-//		int newFlags = VARIABLE_FLAGS.get(getNd(), this.address) | toSet;
-//		VARIABLE_FLAGS.put(getNd(), this.address, (short)newFlags);
-//	}
+
+	public boolean hasVariableFlag(int toTest) {
+		return (VARIABLE_FLAGS.get(getNd(), this.address) & toTest) != 0;
+	}
+
+	public void setVariableFlag(byte toSet) {
+		int newFlags = VARIABLE_FLAGS.get(getNd(), this.address) | toSet;
+		VARIABLE_FLAGS.put(getNd(), this.address, (byte)newFlags);
+	}
 
 	public void setName(char[] name) {
 		NAME.put(getNd(), this.address, name);
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/model/IndexBinaryType.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/model/IndexBinaryType.java
index 89901aa..b637b08 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/model/IndexBinaryType.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/model/IndexBinaryType.java
@@ -180,10 +180,11 @@ public class IndexBinaryType implements IBinaryType {
 		try (IReader rl = this.typeRef.lock()) {
 			NdType type = this.typeRef.get();
 			if (type != null) {
+				if (!type.getFlag(NdType.FLG_GENERIC_SIGNATURE_PRESENT)) {
+					return null;
+				}
 				CharArrayBuffer buffer = new CharArrayBuffer();
-
 				NdTypeParameter.getSignature(buffer, type.getTypeParameters());
-
 				NdTypeSignature superclass = type.getSuperclass();
 				if (superclass != null) {
 					superclass.getSignature(buffer);
@@ -531,7 +532,9 @@ public class IndexBinaryType implements IBinaryType {
 		IBinaryAnnotation[] annotations = toAnnotationArray(ndVariable.getAnnotations());
 
 		CharArrayBuffer signature = new CharArrayBuffer();
-		type.getSignature(signature);
+		if (ndVariable.hasVariableFlag(NdVariable.FLG_GENERIC_SIGNATURE_PRESENT)) {
+			type.getSignature(signature);
+		}
 
 		long tagBits = ndVariable.getTagBits();
 		return new IndexBinaryField(annotations, constant, signature.getContents(), ndVariable.getModifiers(), name,

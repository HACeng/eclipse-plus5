commit 6989ce4249d0c03fe58f852df992efa441f6edc4
Author: ssankaran <srikanth_sankaran@in.ibm.com>
Date:   Sun Mar 10 14:25:50 2013 -0400

    Fixed Bug 402831 - [1.8][compiler][internal] ReferenceExpression should
    not implement ReferenceContext.

1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CompilationUnitDeclaration.java
2	79	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java
71	3	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
1	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/ReferenceContext.java
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java
index 43cf56e..0c8cf75 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java
@@ -604,7 +604,7 @@ public abstract class AbstractMethodDeclaration
 	}
 	
 	public void tagAsHavingIgnoredMandatoryErrors(int problemId) {
-		// Not reachable. No silently ignored errors for this context;
+		// Nothing to do for this context;
 	}
 
 	public void traverse(
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CompilationUnitDeclaration.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CompilationUnitDeclaration.java
index 10106db..1746785 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CompilationUnitDeclaration.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CompilationUnitDeclaration.java
@@ -677,7 +677,7 @@ public void tagAsHavingErrors() {
 }
 
 public void tagAsHavingIgnoredMandatoryErrors(int problemId) {
-	// Not reachable. No silently ignored errors for this context;
+	// Nothing to do for this context;
 }
 
 public void traverse(ASTVisitor visitor, CompilationUnitScope unitScope) {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java
index c73a5df..385c2bc 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java
@@ -16,15 +16,12 @@
  *******************************************************************************/
 package org.eclipse.jdt.internal.compiler.ast;
 
-import org.eclipse.jdt.core.compiler.CategorizedProblem;
-import org.eclipse.jdt.core.compiler.IProblem;
 import org.eclipse.jdt.internal.compiler.CompilationResult;
 import org.eclipse.jdt.internal.compiler.DefaultErrorHandlingPolicies;
 import org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy;
 import org.eclipse.jdt.internal.compiler.codegen.CodeStream;
 import org.eclipse.jdt.internal.compiler.flow.FlowInfo;
 import org.eclipse.jdt.internal.compiler.impl.Constant;
-import org.eclipse.jdt.internal.compiler.impl.ReferenceContext;
 import org.eclipse.jdt.internal.compiler.lookup.ArrayBinding;
 import org.eclipse.jdt.internal.compiler.lookup.BlockScope;
 import org.eclipse.jdt.internal.compiler.lookup.MethodBinding;
@@ -35,14 +32,9 @@ import org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding;
 import org.eclipse.jdt.internal.compiler.lookup.Scope;
 import org.eclipse.jdt.internal.compiler.lookup.TypeBinding;
 import org.eclipse.jdt.internal.compiler.lookup.TypeBindingVisitor;
-import org.eclipse.jdt.internal.compiler.problem.AbortCompilation;
-import org.eclipse.jdt.internal.compiler.problem.AbortCompilationUnit;
-import org.eclipse.jdt.internal.compiler.problem.AbortMethod;
-import org.eclipse.jdt.internal.compiler.problem.AbortType;
-import org.eclipse.jdt.internal.compiler.problem.ProblemSeverities;
 import org.eclipse.jdt.internal.compiler.util.SimpleLookupTable;
 
-public abstract class FunctionalExpression extends Expression implements ProblemSeverities, ReferenceContext {
+public abstract class FunctionalExpression extends Expression {
 	
 	TypeBinding expectedType;
 	MethodBinding descriptor;
@@ -185,73 +177,4 @@ public abstract class FunctionalExpression extends Expression implements Problem
 		}
 		codeStream.recordPositionsFrom(pc, this.sourceStart);
 	}
-
-	public CompilationResult compilationResult() {
-		return this.compilationResult;
-	}
-
-	public void abort(int abortLevel, CategorizedProblem problem) {
-	
-		switch (abortLevel) {
-			case AbortCompilation :
-				throw new AbortCompilation(this.compilationResult, problem);
-			case AbortCompilationUnit :
-				throw new AbortCompilationUnit(this.compilationResult, problem);
-			case AbortType :
-				throw new AbortType(this.compilationResult, problem);
-			default :
-				throw new AbortMethod(this.compilationResult, problem);
-		}
-	}
-
-	public CompilationUnitDeclaration getCompilationUnitDeclaration() {
-		return this.enclosingScope == null ? null : this.enclosingScope.compilationUnitScope().referenceContext;
-	}
-
-	public boolean hasErrors() {
-		return this.ignoreFurtherInvestigation;
-	}
-
-	public void tagAsHavingErrors() {
-		this.ignoreFurtherInvestigation = true;
-		Scope parent = this.enclosingScope.parent;
-		while (parent != null) {
-			switch(parent.kind) {
-				case Scope.CLASS_SCOPE:
-				case Scope.METHOD_SCOPE:
-					parent.referenceContext().tagAsHavingErrors();
-					return;
-				default:
-					parent = parent.parent;
-					break;
-			}
-		}
-	}
-	
-	protected boolean shapeAnalysisComplete() {
-		return true;
-	}
-	
-	public void tagAsHavingIgnoredMandatoryErrors(int problemId) {
-		// 15.27.3 requires exception throw related errors to not influence congruence. Also don't abort shape analysis.
-		switch (problemId) {
-			case IProblem.UnhandledExceptionOnAutoClose:
-			case IProblem.UnhandledExceptionInDefaultConstructor:
-			case IProblem.UnhandledException:
-				return;
-			default: 
-				if (shapeAnalysisComplete())
-					throw new IncongruentLambdaException();
-				this.original().hasIgnoredMandatoryErrors = true;
-				return;
-		}
-	}
-
-	protected FunctionalExpression original() {
-		return this;
-	}
-}
-
-class IncongruentLambdaException extends RuntimeException {
-	private static final long serialVersionUID = 4145723509219836114L;
-}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
index 529057e..c7acf67 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
@@ -19,6 +19,8 @@
  *******************************************************************************/
 package org.eclipse.jdt.internal.compiler.ast;
 
+import org.eclipse.jdt.core.compiler.CategorizedProblem;
+import org.eclipse.jdt.core.compiler.IProblem;
 import org.eclipse.jdt.internal.compiler.ASTVisitor;
 import org.eclipse.jdt.internal.compiler.CompilationResult;
 import org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy;
@@ -28,6 +30,7 @@ import org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext;
 import org.eclipse.jdt.internal.compiler.flow.FlowContext;
 import org.eclipse.jdt.internal.compiler.flow.FlowInfo;
 import org.eclipse.jdt.internal.compiler.impl.Constant;
+import org.eclipse.jdt.internal.compiler.impl.ReferenceContext;
 import org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding;
 import org.eclipse.jdt.internal.compiler.lookup.Binding;
 import org.eclipse.jdt.internal.compiler.lookup.BlockScope;
@@ -43,9 +46,14 @@ import org.eclipse.jdt.internal.compiler.lookup.TypeBinding;
 import org.eclipse.jdt.internal.compiler.lookup.TypeConstants;
 import org.eclipse.jdt.internal.compiler.lookup.TypeIds;
 import org.eclipse.jdt.internal.compiler.parser.Parser;
+import org.eclipse.jdt.internal.compiler.problem.AbortCompilation;
+import org.eclipse.jdt.internal.compiler.problem.AbortCompilationUnit;
+import org.eclipse.jdt.internal.compiler.problem.AbortMethod;
+import org.eclipse.jdt.internal.compiler.problem.AbortType;
+import org.eclipse.jdt.internal.compiler.problem.ProblemSeverities;
 import org.eclipse.jdt.internal.compiler.util.SimpleLookupTable;
 
-public class LambdaExpression extends FunctionalExpression {
+public class LambdaExpression extends FunctionalExpression implements ReferenceContext, ProblemSeverities {
 	public Argument [] arguments;
 	public Statement body;
 	public boolean hasParentheses;
@@ -395,8 +403,8 @@ public class LambdaExpression extends FunctionalExpression {
 		return this.scope;
 	}
 		
-	protected boolean shapeAnalysisComplete() {
-		return this.original.shapeAnalysisComplete;
+	protected boolean errorEqualsIncompatibility() {
+		return this.original.shapeAnalysisComplete; // so as not to abort shape analysis.
 	}
 	
 	public boolean isCompatibleWith(final TypeBinding left, final Scope someScope) {
@@ -549,4 +557,64 @@ public class LambdaExpression extends FunctionalExpression {
 			return;
 		this.original.throwsException = true;
 	}
+	
+	public CompilationResult compilationResult() {
+		return this.compilationResult;
+	}
+
+	public void abort(int abortLevel, CategorizedProblem problem) {
+	
+		switch (abortLevel) {
+			case AbortCompilation :
+				throw new AbortCompilation(this.compilationResult, problem);
+			case AbortCompilationUnit :
+				throw new AbortCompilationUnit(this.compilationResult, problem);
+			case AbortType :
+				throw new AbortType(this.compilationResult, problem);
+			default :
+				throw new AbortMethod(this.compilationResult, problem);
+		}
+	}
+
+	public CompilationUnitDeclaration getCompilationUnitDeclaration() {
+		return this.enclosingScope == null ? null : this.enclosingScope.compilationUnitScope().referenceContext;
+	}
+
+	public boolean hasErrors() {
+		return this.ignoreFurtherInvestigation;
+	}
+
+	public void tagAsHavingErrors() {
+		this.ignoreFurtherInvestigation = true;
+		Scope parent = this.enclosingScope.parent;
+		while (parent != null) {
+			switch(parent.kind) {
+				case Scope.CLASS_SCOPE:
+				case Scope.METHOD_SCOPE:
+					parent.referenceContext().tagAsHavingErrors();
+					return;
+				default:
+					parent = parent.parent;
+					break;
+			}
+		}
+	}
+	
+	public void tagAsHavingIgnoredMandatoryErrors(int problemId) {
+		// 15.27.3 requires exception throw related errors to not influence congruence. Other errors should. Also don't abort shape analysis.
+		switch (problemId) {
+			case IProblem.UnhandledExceptionOnAutoClose:
+			case IProblem.UnhandledExceptionInDefaultConstructor:
+			case IProblem.UnhandledException:
+				return;
+			default: 
+				if (errorEqualsIncompatibility())
+					throw new IncongruentLambdaException();
+				this.original().hasIgnoredMandatoryErrors = true;
+				return;
+		}
+	}
+}
+class IncongruentLambdaException extends RuntimeException {
+	private static final long serialVersionUID = 4145723509219836114L;
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
index 3b7cae2..f0aead8 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
@@ -409,6 +409,7 @@ public class ReferenceExpression extends FunctionalExpression implements Invocat
 				this.resultExpressions.put(left, this.binding.returnType);
 			}
 			this.binding = null;
+			setExpectedType(null);
 		}
 		return isCompatible;
 	}
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java
index cf58c07..34ae4bf 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeDeclaration.java
@@ -1314,7 +1314,7 @@ public void tagAsHavingErrors() {
 }
 
 public void tagAsHavingIgnoredMandatoryErrors(int problemId) {
-	// Not reachable. No silently ignored errors for this context;
+	// Nothing to do for this context;
 }
 
 /**
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/ReferenceContext.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/ReferenceContext.java
index 69879f4..3f3f037 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/ReferenceContext.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/ReferenceContext.java
@@ -17,7 +17,7 @@ package org.eclipse.jdt.internal.compiler.impl;
 /*
  * Implementors are valid compilation contexts from which we can
  * escape in case of error:
- *	For example: method, type or compilation unit.
+ * For example: method, type, compilation unit or a lambda expression.
  */
 
 import org.eclipse.jdt.core.compiler.CategorizedProblem;

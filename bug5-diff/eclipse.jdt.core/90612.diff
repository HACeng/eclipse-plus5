commit 750bdd7b4af2056bfa5a30d4d6b65bbb0afdb706
Author: David Audel <daudel>
Date:   Mon May 2 14:36:21 2005 +0000

    bug 90612

173	12	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests2.java
20	1	org.eclipse.jdt.core/buildnotes_jdt-core.html
49	6	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
16	17	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistOptions.java
7	0	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Engine.java
23	19	org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java
2	3	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaCorePreferenceInitializer.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests2.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests2.java
index 25c7de1..e39bc29 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests2.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests2.java
@@ -150,6 +150,8 @@ public static Test suite() {
 	suite.addTest(new CompletionTests2("testAccessRestriction10"));
 	suite.addTest(new CompletionTests2("testAccessRestriction11"));
 	suite.addTest(new CompletionTests2("testAccessRestriction12"));
+	suite.addTest(new CompletionTests2("testAccessRestriction13"));
+	suite.addTest(new CompletionTests2("testAccessRestriction14"));
 	return suite;
 }
 
@@ -564,7 +566,7 @@ public void testAccessRestriction1() throws Exception {
 		Hashtable options = new Hashtable(oldOptions);
 		options.put(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE, JavaCore.IGNORE);
 		options.put(JavaCore.COMPILER_PB_DISCOURAGED_REFERENCE, JavaCore.IGNORE);
-		options.put(JavaCore.CODEASSIST_FORBIDDEN_REFERENCE_CHECK, JavaCore.DISABLED);
+		options.put(JavaCore.CODEASSIST_HIDE_RESTRICTED_REFERENCES, JavaCore.NEVER);
 		JavaCore.setOptions(options);
 		
 		// create variable
@@ -637,7 +639,7 @@ public void testAccessRestriction2() throws Exception {
 		Hashtable options = new Hashtable(oldOptions);
 		options.put(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE, JavaCore.IGNORE);
 		options.put(JavaCore.COMPILER_PB_DISCOURAGED_REFERENCE, JavaCore.IGNORE);
-		options.put(JavaCore.CODEASSIST_FORBIDDEN_REFERENCE_CHECK, JavaCore.DISABLED);
+		options.put(JavaCore.CODEASSIST_HIDE_RESTRICTED_REFERENCES, JavaCore.NEVER);
 		JavaCore.setOptions(options);
 		
 		// create variable
@@ -717,7 +719,7 @@ public void testAccessRestriction3() throws Exception {
 	try {
 		Hashtable options = new Hashtable(oldOptions);
 		options.put(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE, JavaCore.ERROR);
-		options.put(JavaCore.CODEASSIST_FORBIDDEN_REFERENCE_CHECK, JavaCore.DISABLED);
+		options.put(JavaCore.CODEASSIST_HIDE_RESTRICTED_REFERENCES, JavaCore.NEVER);
 		JavaCore.setOptions(options);
 		
 		// create variable
@@ -798,7 +800,7 @@ public void testAccessRestriction4() throws Exception {
 		Hashtable options = new Hashtable(oldOptions);
 		options.put(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE, JavaCore.IGNORE);
 		options.put(JavaCore.COMPILER_PB_DISCOURAGED_REFERENCE, JavaCore.IGNORE);
-		options.put(JavaCore.CODEASSIST_FORBIDDEN_REFERENCE_CHECK, JavaCore.ENABLED);
+		options.put(JavaCore.CODEASSIST_HIDE_RESTRICTED_REFERENCES, JavaCore.ERROR);
 		JavaCore.setOptions(options);
 		
 		// create variable
@@ -878,7 +880,7 @@ public void testAccessRestriction5() throws Exception {
 	try {
 		Hashtable options = new Hashtable(oldOptions);
 		options.put(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE, JavaCore.ERROR);
-		options.put(JavaCore.CODEASSIST_FORBIDDEN_REFERENCE_CHECK, JavaCore.ENABLED);
+		options.put(JavaCore.CODEASSIST_HIDE_RESTRICTED_REFERENCES, JavaCore.ERROR);
 		JavaCore.setOptions(options);
 		
 		// create variable
@@ -957,7 +959,7 @@ public void testAccessRestriction6() throws Exception {
 	try {
 		Hashtable options = new Hashtable(oldOptions);
 		options.put(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE, JavaCore.ERROR);
-		options.put(JavaCore.CODEASSIST_FORBIDDEN_REFERENCE_CHECK, JavaCore.ENABLED);
+		options.put(JavaCore.CODEASSIST_HIDE_RESTRICTED_REFERENCES, JavaCore.ERROR);
 		JavaCore.setOptions(options);
 		
 		// create variable
@@ -1062,7 +1064,7 @@ public void testAccessRestriction7() throws Exception {
 	try {
 		Hashtable options = new Hashtable(oldOptions);
 		options.put(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE, JavaCore.ERROR);
-		options.put(JavaCore.CODEASSIST_FORBIDDEN_REFERENCE_CHECK, JavaCore.ENABLED);
+		options.put(JavaCore.CODEASSIST_HIDE_RESTRICTED_REFERENCES, JavaCore.ERROR);
 		JavaCore.setOptions(options);
 		
 		// create variable
@@ -1159,7 +1161,7 @@ public void testAccessRestriction8() throws Exception {
 	try {
 		Hashtable options = new Hashtable(oldOptions);
 		options.put(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE, JavaCore.ERROR);
-		options.put(JavaCore.CODEASSIST_FORBIDDEN_REFERENCE_CHECK, JavaCore.ENABLED);
+		options.put(JavaCore.CODEASSIST_HIDE_RESTRICTED_REFERENCES, JavaCore.ERROR);
 		JavaCore.setOptions(options);
 		
 		// create variable
@@ -1257,7 +1259,7 @@ public void testAccessRestriction9() throws Exception {
 	try {
 		Hashtable options = new Hashtable(oldOptions);
 		options.put(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE, JavaCore.ERROR);
-		options.put(JavaCore.CODEASSIST_FORBIDDEN_REFERENCE_CHECK, JavaCore.ENABLED);
+		options.put(JavaCore.CODEASSIST_HIDE_RESTRICTED_REFERENCES, JavaCore.ERROR);
 		JavaCore.setOptions(options);
 		
 		// create variable
@@ -1404,7 +1406,7 @@ public void testAccessRestriction10() throws Exception {
 	try {
 		Hashtable options = new Hashtable(oldOptions);
 		options.put(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE, JavaCore.ERROR);
-		options.put(JavaCore.CODEASSIST_FORBIDDEN_REFERENCE_CHECK, JavaCore.DISABLED);
+		options.put(JavaCore.CODEASSIST_HIDE_RESTRICTED_REFERENCES, JavaCore.NEVER);
 		JavaCore.setOptions(options);
 		
 		// create variable
@@ -1553,7 +1555,7 @@ public void testAccessRestriction11() throws Exception {
 	try {
 		Hashtable options = new Hashtable(oldOptions);
 		options.put(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE, JavaCore.ERROR);
-		options.put(JavaCore.CODEASSIST_FORBIDDEN_REFERENCE_CHECK, JavaCore.ENABLED);
+		options.put(JavaCore.CODEASSIST_HIDE_RESTRICTED_REFERENCES, JavaCore.ERROR);
 		JavaCore.setOptions(options);
 		
 		// create variable
@@ -1700,7 +1702,7 @@ public void testAccessRestriction12() throws Exception {
 	try {
 		Hashtable options = new Hashtable(oldOptions);
 		options.put(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE, JavaCore.ERROR);
-		options.put(JavaCore.CODEASSIST_FORBIDDEN_REFERENCE_CHECK, JavaCore.DISABLED);
+		options.put(JavaCore.CODEASSIST_HIDE_RESTRICTED_REFERENCES, JavaCore.NEVER);
 		JavaCore.setOptions(options);
 		
 		// create variable
@@ -1844,6 +1846,165 @@ public void testAccessRestriction12() throws Exception {
 		JavaCore.setOptions(oldOptions);
 	}
 }
+public void testAccessRestriction13() throws Exception {
+	Hashtable oldOptions = JavaCore.getOptions();
+	try {
+		Hashtable options = new Hashtable(oldOptions);
+		options.put(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE, JavaCore.WARNING);
+		options.put(JavaCore.CODEASSIST_HIDE_RESTRICTED_REFERENCES, JavaCore.ERROR);
+		JavaCore.setOptions(options);
+		
+		// create variable
+		JavaCore.setClasspathVariables(
+			new String[] {"JCL_LIB", "JCL_SRC", "JCL_SRCROOT"},
+			new IPath[] {getExternalJCLPath(), getExternalJCLSourcePath(), getExternalJCLRootSourcePath()},
+			null);
+
+		// create P1
+		this.createJavaProject(
+			"P1",
+			new String[]{"src"},
+			Util.getJavaClassLibs(),
+			 "bin");
+		
+		this.createFolder("/P1/src/a");
+		this.createFile(
+				"/P1/src/a/XX1.java",
+				"package a;\n"+
+				"public class XX1 {\n"+
+				"}");
+
+		this.createFolder("/P1/src/b");
+		this.createFile(
+				"/P1/src/b/XX2.java",
+				"package b;\n"+
+				"public class XX2 {\n"+
+				"}");
+		
+		// create P2
+		this.createJavaProject(
+			"P2",
+			new String[]{"src"},
+			Util.getJavaClassLibs(),
+			null,
+			null,
+			new String[]{"/P1"},
+			new String[][]{{}},
+			new String[][]{{"a/*"}},
+			new boolean[]{false},
+			"bin",
+			null,
+			null,
+			null,
+			"1.4");
+		this.createFile(
+			"/P2/src/YY.java",
+			"public class YY {\n"+
+			"  void foo() {\n"+
+			"    XX\n"+
+			"  }\n"+
+			"}");
+		
+		waitUntilIndexesReady();
+		
+		// do completion
+		CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2();
+		ICompilationUnit cu= getCompilationUnit("P2", "src", "", "YY.java");
+		
+		String str = cu.getSource();
+		String completeBehind = "XX";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+		
+		assertResults(
+			"XX1[TYPE_REF]{a.XX1, a, La.XX1;, null, "+(R_DEFAULT + R_INTERESTING + R_CASE) + "}\n" +
+ 			"XX2[TYPE_REF]{b.XX2, b, Lb.XX2;, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}",
+			requestor.getResults());
+	} finally {
+		this.deleteProject("P1");
+		this.deleteProject("P2");
+		JavaCore.setOptions(oldOptions);
+	}
+}
+public void testAccessRestriction14() throws Exception {
+	Hashtable oldOptions = JavaCore.getOptions();
+	try {
+		Hashtable options = new Hashtable(oldOptions);
+		options.put(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE, JavaCore.WARNING);
+		options.put(JavaCore.CODEASSIST_HIDE_RESTRICTED_REFERENCES, JavaCore.WARNING);
+		JavaCore.setOptions(options);
+		
+		// create variable
+		JavaCore.setClasspathVariables(
+			new String[] {"JCL_LIB", "JCL_SRC", "JCL_SRCROOT"},
+			new IPath[] {getExternalJCLPath(), getExternalJCLSourcePath(), getExternalJCLRootSourcePath()},
+			null);
+
+		// create P1
+		this.createJavaProject(
+			"P1",
+			new String[]{"src"},
+			Util.getJavaClassLibs(),
+			 "bin");
+		
+		this.createFolder("/P1/src/a");
+		this.createFile(
+				"/P1/src/a/XX1.java",
+				"package a;\n"+
+				"public class XX1 {\n"+
+				"}");
+
+		this.createFolder("/P1/src/b");
+		this.createFile(
+				"/P1/src/b/XX2.java",
+				"package b;\n"+
+				"public class XX2 {\n"+
+				"}");
+		
+		// create P2
+		this.createJavaProject(
+			"P2",
+			new String[]{"src"},
+			Util.getJavaClassLibs(),
+			null,
+			null,
+			new String[]{"/P1"},
+			new String[][]{{}},
+			new String[][]{{"a/*"}},
+			new boolean[]{false},
+			"bin",
+			null,
+			null,
+			null,
+			"1.4");
+		this.createFile(
+			"/P2/src/YY.java",
+			"public class YY {\n"+
+			"  void foo() {\n"+
+			"    XX\n"+
+			"  }\n"+
+			"}");
+		
+		waitUntilIndexesReady();
+		
+		// do completion
+		CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2();
+		ICompilationUnit cu= getCompilationUnit("P2", "src", "", "YY.java");
+		
+		String str = cu.getSource();
+		String completeBehind = "XX";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+		
+		assertResults(
+			"XX2[TYPE_REF]{b.XX2, b, Lb.XX2;, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}",
+			requestor.getResults());
+	} finally {
+		this.deleteProject("P1");
+		this.deleteProject("P2");
+		JavaCore.setOptions(oldOptions);
+	}
+}
 //public void testAccessRestrictionX() throws Exception {
 //	Hashtable oldOptions = JavaCore.getOptions();
 //	try {
diff --git a/org.eclipse.jdt.core/buildnotes_jdt-core.html b/org.eclipse.jdt.core/buildnotes_jdt-core.html
index 1e0d27d..3b06fea 100644
--- a/org.eclipse.jdt.core/buildnotes_jdt-core.html
+++ b/org.eclipse.jdt.core/buildnotes_jdt-core.html
@@ -47,6 +47,23 @@ Eclipse SDK 3.1M7 - ?th May 2005
 <h2>
 What's new in this drop</h2>
 <ul>
+<li>Changed Code Assist options.<br>
+    CODEASSIST_FORBIDDEN_REFERENCE_CHECK and CODEASSIST_DISCOURAGED_REFERENCE_CHECK are replaced by CODEASSIST_HIDE_RESTRICTED_REFERENCES.<br>
+    <pre>
+/*
+ *  CODEASSIST / Hide Proposals for Restricted Completions
+ *    When value is "never", never hide proposals for restricted completions.
+ *    When value is "error", hide proposals for restricted completions if insertion of these completions would create a compile error.
+ *    When value is "warning", hide proposals for restricted completions if insertion of these completions would create a compile error or warning.
+ *    To configure the severity of restrictions, "org.eclipse.jdt.core.compiler.problem.forbiddenReference"
+ *    option must be used for forbidden reference and "org.eclipse.jdt.core.compiler.problem.discouragedReference"
+ *    option must be used for discouraged reference.
+ *     - option id:         "org.eclipse.jdt.core.codeComplete.restrictionsCheck"
+ *     - possible values:   { "never", "error", "warning" }
+ *     - default:           "error"
+ */
+ public static final String CODEASSIST_HIDE_RESTRICTED_REFERENCES;
+    </pre></li>
 <li>Removed 3.1 APIs <code>BindingKey#getDeclaringTypeSignature()</code> and
     <code>BindingKey#toSignature()</code> as they were found error prone. See <a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=93105">bug 93105</a>
     for details.</li>
@@ -56,7 +73,9 @@ What's new in this drop</h2>
 </ul>
 
 <h3>Problem Reports Fixed</h3>
-<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=93105">93105</a>
+<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=90612">90612</a>
+Forbidden types must not be available in Code Assist
+<br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=93105">93105</a>
 Remove unnecessary APIs on BindingKey
 <br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=93396">93396</a>
 [1.5] problem with recovery and enum constant body
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
index 775055c..41805dd 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
@@ -26,6 +26,7 @@ import org.eclipse.jdt.core.compiler.CharOperation;
 import org.eclipse.jdt.core.compiler.IProblem;
 
 import org.eclipse.jdt.internal.codeassist.complete.*;
+import org.eclipse.jdt.internal.codeassist.impl.AssistOptions;
 import org.eclipse.jdt.internal.codeassist.impl.AssistParser;
 import org.eclipse.jdt.internal.codeassist.impl.Engine;
 import org.eclipse.jdt.internal.codeassist.impl.Keywords;
@@ -276,11 +277,25 @@ public final class CompletionEngine
 		if(accessRestriction != null) {
 			switch (accessRestriction.getProblemId()) {
 				case IProblem.ForbiddenReference:
-					if(this.options.checkForbiddenReference) return;
+					switch (this.options.restrictedReferenceFilter) {
+						case AssistOptions.FILTER_WARNING:
+							return;
+						case AssistOptions.FILTER_ERROR:
+							if(this.forbiddenReferenceIsError) return;
+							break;
+						
+					}
 					accessibility = IAccessRule.K_NON_ACCESSIBLE;
 					break;
 				case IProblem.DiscouragedReference:
-					if(this.options.checkDiscouragedReference) return;
+					switch (this.options.restrictedReferenceFilter) {
+						case AssistOptions.FILTER_WARNING:
+							return;
+						case AssistOptions.FILTER_ERROR:
+							if(this.discouragedReferenceIsError) return;
+							break;
+						
+					}
 					accessibility = IAccessRule.K_DISCOURAGED;
 					break;
 			}
@@ -3755,11 +3770,25 @@ public final class CompletionEngine
 							if(accessRestriction != null) {
 								switch (accessRestriction.getProblemId()) {
 									case IProblem.ForbiddenReference:
-										if(this.options.checkForbiddenReference) return;
+										switch (this.options.restrictedReferenceFilter) {
+											case AssistOptions.FILTER_WARNING:
+												return;
+											case AssistOptions.FILTER_ERROR:
+												if(this.forbiddenReferenceIsError) return;
+												break;
+											
+										}
 										accessibility = IAccessRule.K_NON_ACCESSIBLE;
 										break;
 									case IProblem.DiscouragedReference:
-										if(this.options.checkDiscouragedReference) return;
+										switch (this.options.restrictedReferenceFilter) {
+											case AssistOptions.FILTER_WARNING:
+												return;
+											case AssistOptions.FILTER_ERROR:
+												if(this.discouragedReferenceIsError) return;
+												break;
+											
+										}
 										accessibility = IAccessRule.K_DISCOURAGED;
 										break;
 								}
@@ -3877,11 +3906,25 @@ public final class CompletionEngine
 					if(accessRestriction != null) {
 						switch (accessRestriction.getProblemId()) {
 							case IProblem.ForbiddenReference:
-								if(this.options.checkForbiddenReference) return;
+								switch (this.options.restrictedReferenceFilter) {
+									case AssistOptions.FILTER_WARNING:
+										return;
+									case AssistOptions.FILTER_ERROR:
+										if(this.forbiddenReferenceIsError) return;
+										break;
+									
+								}
 								accessibility = IAccessRule.K_NON_ACCESSIBLE;
 								break;
 							case IProblem.DiscouragedReference:
-								if(this.options.checkDiscouragedReference) return;
+								switch (this.options.restrictedReferenceFilter) {
+									case AssistOptions.FILTER_WARNING:
+										return;
+									case AssistOptions.FILTER_ERROR:
+										if(this.discouragedReferenceIsError) return;
+										break;
+									
+								}
 								accessibility = IAccessRule.K_DISCOURAGED;
 								break;
 						}
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistOptions.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistOptions.java
index 4771072..4da4839 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistOptions.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistOptions.java
@@ -38,17 +38,21 @@ public class AssistOptions {
 		"org.eclipse.jdt.core.codeComplete.localSuffixes"; 	//$NON-NLS-1$
 	public static final String OPTION_ArgumentSuffixes =
 		"org.eclipse.jdt.core.codeComplete.argumentSuffixes"; 	//$NON-NLS-1$
-	public static final String OPTION_PerformForbiddenReferenceCheck =
+	public static final String OPTION_HideRestrictedReferences =
 		"org.eclipse.jdt.core.codeComplete.restrictionsCheck"; 	//$NON-NLS-1$
-	public static final String OPTION_PerformDiscouragedReferenceCheck =
-		"org.eclipse.jdt.core.codeComplete.discouragedReferenceCheck"; 	//$NON-NLS-1$
 	
 	public static final String ENABLED = "enabled"; //$NON-NLS-1$
 	public static final String DISABLED = "disabled"; //$NON-NLS-1$
+	public static final String ERROR = "error"; //$NON-NLS-1$
+	public static final String WARNING = "warning"; //$NON-NLS-1$
+	public static final String NEVER = "never"; //$NON-NLS-1$
 
+	public static final int FILTER_NEVER = 0;
+	public static final int FILTER_ERROR = 1;
+	public static final int FILTER_WARNING = 2;
+	
 	public boolean checkVisibility = false;
-	public boolean checkForbiddenReference = false;
-	public boolean checkDiscouragedReference = false;
+	public int restrictedReferenceFilter;
 	public boolean forceImplicitQualification = false;
 	public char[][] fieldPrefixes = null;
 	public char[][] staticFieldPrefixes = null;
@@ -172,18 +176,13 @@ public class AssistOptions {
 				}
 			}
 		}
-		if ((optionValue = optionsMap.get(OPTION_PerformForbiddenReferenceCheck)) != null) {
-			if (ENABLED.equals(optionValue)) {
-				this.checkForbiddenReference = true;
-			} else if (DISABLED.equals(optionValue)) {
-				this.checkForbiddenReference = false;
-			}
-		}
-		if ((optionValue = optionsMap.get(OPTION_PerformDiscouragedReferenceCheck)) != null) {
-			if (ENABLED.equals(optionValue)) {
-				this.checkDiscouragedReference = true;
-			} else if (DISABLED.equals(optionValue)) {
-				this.checkDiscouragedReference = false;
+		if ((optionValue = optionsMap.get(OPTION_HideRestrictedReferences)) != null) {
+			if (NEVER.equals(optionValue)) {
+				this.restrictedReferenceFilter = FILTER_NEVER;
+			} else if (ERROR.equals(optionValue)) {
+				this.restrictedReferenceFilter = FILTER_ERROR;
+			} else if (WARNING.equals(optionValue)) {
+				this.restrictedReferenceFilter = FILTER_WARNING;
 			}
 		}
 	}
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Engine.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Engine.java
index 1cf0837..8e4cfe5 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Engine.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Engine.java
@@ -19,6 +19,7 @@ import org.eclipse.jdt.internal.compiler.env.*;
 import org.eclipse.jdt.internal.compiler.ast.*;
 import org.eclipse.jdt.internal.compiler.lookup.*;
 import org.eclipse.jdt.internal.compiler.parser.*;
+import org.eclipse.jdt.internal.compiler.problem.ProblemSeverities;
 import org.eclipse.jdt.internal.compiler.impl.*;
 import org.eclipse.jdt.internal.core.SearchableEnvironment;
 
@@ -31,10 +32,16 @@ public abstract class Engine implements ITypeRequestor {
 
 	public AssistOptions options;
 	public CompilerOptions compilerOptions; 
+	public boolean forbiddenReferenceIsError;
+	public boolean discouragedReferenceIsError;
 	
 	public Engine(Map settings){
 		this.options = new AssistOptions(settings);
 		this.compilerOptions = new CompilerOptions(settings);
+		this.forbiddenReferenceIsError =
+			this.compilerOptions.getSeverity(CompilerOptions.ForbiddenReference) == ProblemSeverities.Error;
+		this.discouragedReferenceIsError =
+			this.compilerOptions.getSeverity(CompilerOptions.DiscouragedReference) == ProblemSeverities.Error;
 	}
 	
 	/**
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java
index 79435dd..f444dbd 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java
@@ -816,14 +816,7 @@ public final class JavaCore extends Plugin {
 	 * @see #getDefaultOptions()
 	 * @since 3.1
 	 */
-	public static final String CODEASSIST_FORBIDDEN_REFERENCE_CHECK = PLUGIN_ID + ".codeComplete.restrictionsCheck"; //$NON-NLS-1$
-	/**
-	 * Possible  configurable option ID.
-	 * @see #getDefaultOptions()
-	 * @since 3.1
-	 */
-	public static final String CODEASSIST_DISCOURAGED_REFERENCE_CHECK = PLUGIN_ID + ".codeComplete.discouragedReferenceCheck"; //$NON-NLS-1$
-	
+	public static final String CODEASSIST_HIDE_RESTRICTED_REFERENCES= PLUGIN_ID + ".codeComplete.restrictionsCheck"; //$NON-NLS-1$
 	// *************** Possible values for configurable options. ********************
 	
 	/**
@@ -990,6 +983,12 @@ public final class JavaCore extends Plugin {
 	 * @since 3.0
 	 */
 	public static final String PRIVATE = "private"; //$NON-NLS-1$
+	/**
+	 * Possible  configurable option value.
+	 * @see #getDefaultOptions()
+	 * @since 3.1
+	 */
+	public static final String NEVER = "never"; //$NON-NLS-1$
 
 	/*
 	 * Cache for options.
@@ -2273,24 +2272,29 @@ public final class JavaCore extends Plugin {
 	 *     - possible values:   { "&lt;suffix&gt;[,&lt;suffix&gt;]*" } where &lt;suffix&gt; is a String without any wild-card 
 	 *     - default:           ""
 	 *     
-	 *  CODEASSIST / Activate Forbidden Reference Sensitive Completion
-	 *    When active, completion doesn't show that have forbidden reference.
+	 *  CODEASSIST / Hide Proposals for Restricted Completions
+	 *    When value is "never", never hide proposals for restricted completions.
+	 *    When value is "error", hide proposals for restricted completions if insertion of these completions would create a compile error.
+	 *    When value is "warning", hide proposals for restricted completions if insertion of these completions would create a compile error or warning.
+	 *    To configure the severity of restrictions, "org.eclipse.jdt.core.compiler.problem.forbiddenReference"
+	 *    option must be used for forbidden reference and "org.eclipse.jdt.core.compiler.problem.discouragedReference"
+	 *    option must be used for discouraged reference.
 	 *     - option id:         "org.eclipse.jdt.core.codeComplete.restrictionsCheck"
-	 *     - possible values:   { "enabled", "disabled" }
-	 *     - default:           "disabled"
-	 * 
-	 *  CODEASSIST / Activate Discouraged Reference Sensitive Completion
-	 *    When active, completion doesn't show that have discouraged reference.
-	 *     - option id:         "org.eclipse.jdt.core.codeComplete.discouragedReferenceCheck"
-	 *     - possible values:   { "enabled", "disabled" }
-	 *     - default:           "disabled"
-	 * 
+	 *     - possible values:   { "never", "error", "warning" }
+	 *     - default:           "error"
 	 * </pre>
 	 * 
 	 * @return a mutable table containing the default settings of all known options
 	 *   (key type: <code>String</code>; value type: <code>String</code>)
 	 * @see #setOptions(Hashtable)
 	 */
+	
+	/* COMPILER / Reporting Forbidden Reference to Type with Restricted Access
+	 *    When enabled, the compiler will issue an error or a warning when referring to a type that is non accessible, as defined according
+	 *    to the access rule specifications.
+	 *     - option id:         "org.eclipse.jdt.core.compiler.problem.forbiddenReference"
+	 *     - possible values:   { "error", "warning", "ignore" }
+	 *     - default:           "warning"*/
  	public static Hashtable getDefaultOptions(){
 	
 		Hashtable defaultOptions = new Hashtable(10);
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaCorePreferenceInitializer.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaCorePreferenceInitializer.java
index a13b85a..5eb5d37 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaCorePreferenceInitializer.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaCorePreferenceInitializer.java
@@ -83,9 +83,8 @@ public class JavaCorePreferenceInitializer extends AbstractPreferenceInitializer
 		defaultOptionsMap.put(JavaCore.CODEASSIST_STATIC_FIELD_SUFFIXES, ""); //$NON-NLS-1$
 		defaultOptionsMap.put(JavaCore.CODEASSIST_LOCAL_SUFFIXES, ""); //$NON-NLS-1$
 		defaultOptionsMap.put(JavaCore.CODEASSIST_ARGUMENT_SUFFIXES, ""); //$NON-NLS-1$
-		defaultOptionsMap.put(JavaCore.CODEASSIST_FORBIDDEN_REFERENCE_CHECK, JavaCore.DISABLED); //$NON-NLS-1$
-		defaultOptionsMap.put(JavaCore.CODEASSIST_DISCOURAGED_REFERENCE_CHECK, JavaCore.DISABLED); //$NON-NLS-1$
-		
+		defaultOptionsMap.put(JavaCore.CODEASSIST_HIDE_RESTRICTED_REFERENCES, JavaCore.ERROR); //$NON-NLS-1$
+
 		// Store default values to default preferences
 	 	IEclipsePreferences defaultPreferences = new DefaultScope().getNode(JavaCore.PLUGIN_ID);
 		for (Iterator iter = defaultOptionsMap.entrySet().iterator(); iter.hasNext();) {

commit d3a9da1814717a2c18ee252440a7a4915c82ca4d
Author: David Audel <daudel>
Date:   Mon Nov 14 14:12:57 2005 +0000

    HEAD - bug 114115

2	2	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionRecoveryTest.java
3	1	org.eclipse.jdt.core/buildnotes_jdt-core.html
1	1	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionJavadoc.java
6	9	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionJavadocParser.java
1	1	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnJavadocParamNameReference.java
1	1	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnJavadocTypeParamReference.java
27	1	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java
64	18	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionScanner.java
16	8	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionRecoveryTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionRecoveryTest.java
index 8911f66..735ae33 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionRecoveryTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionRecoveryTest.java
@@ -625,7 +625,7 @@ public void test14() {
 		"  }\n" + 
 		"}\n",
 		// expectedCompletionIdentifier:
-		"",
+		NONE,
 		// expectedReplacedSource:
 		NONE,
 		// test name
@@ -656,7 +656,7 @@ public void test15() {
 		"  }\n" + 
 		"}\n",
 		// expectedCompletionIdentifier:
-		"",
+		NONE,
 		// expectedReplacedSource:
 		NONE,
 		// test name
diff --git a/org.eclipse.jdt.core/buildnotes_jdt-core.html b/org.eclipse.jdt.core/buildnotes_jdt-core.html
index d824fca..6cfb8b6 100644
--- a/org.eclipse.jdt.core/buildnotes_jdt-core.html
+++ b/org.eclipse.jdt.core/buildnotes_jdt-core.html
@@ -55,7 +55,9 @@ What's new in this drop</h2>
 </ul>
 
 <h3>Problem Reports Fixed</h3>
-<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=116028">116028</a>
+<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=114115">114115</a>
+[assist] completionIdentifier should be set while reading next token instead of getting current identifier source
+<br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=116028">116028</a>
 annotations only applied to first field in a declaration
 <br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=110797">110797</a>
 In case of multiple task tags on a single line, the tasks view does not show the complete line for each tag
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionJavadoc.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionJavadoc.java
index 298b14d..f1692f2 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionJavadoc.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionJavadoc.java
@@ -63,7 +63,7 @@ public class CompletionJavadoc extends Javadoc {
 					if (scope.kind == Scope.METHOD_SCOPE) {
 						paramNameReference.missingParams = missingParamTags(paramNameReference.binding, (MethodScope)scope);
 					}
-					if (paramNameReference.token == null) {
+					if (paramNameReference.token == null || paramNameReference.token.length == 0) {
 						paramNameReference.missingTypeParams = missingTypeParameterTags(paramNameReference.binding, scope);
 					}
 				} else if (this.completionNode instanceof CompletionOnJavadocTypeParamReference) {
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionJavadocParser.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionJavadocParser.java
index e732c20..49bd01a 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionJavadocParser.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionJavadocParser.java
@@ -66,13 +66,17 @@ public class CompletionJavadocParser extends JavadocParser {
 		this.cursorLocation = ((CompletionParser)sourceParser).cursorLocation;
 		CompletionScanner completionScanner = (CompletionScanner)this.scanner;
 		completionScanner.cursorLocation = this.cursorLocation;
-		completionScanner.completionIdentifier = null;
 		this.javadocStart = this.sourceParser.scanner.commentStarts[commentPtr];
 		this.javadocEnd = this.sourceParser.scanner.commentStops[commentPtr];
 		if (this.javadocStart <= this.cursorLocation && this.cursorLocation <= this.javadocEnd) {
 			if (CompletionEngine.DEBUG) {
 				System.out.println("COMPLETION in Javadoc:"); //$NON-NLS-1$
 			}
+			completionScanner.completionIdentifier = null;
+			completionScanner.completedTokenFound = false;
+			completionScanner.completedIdentifierStart = 0;
+			completionScanner.completedIdentifierEnd = -1;
+			completionScanner.whitespacesBeforeCompletedTokenFound = false;
 			this.firstTagPosition = 1;
 			super.checkDeprecation(commentPtr);
 		} else {
@@ -449,14 +453,7 @@ public class CompletionJavadocParser extends JavadocParser {
 			char[] name = null;
 			CompletionScanner completionScanner = (CompletionScanner) this.scanner;
 			boolean isTypeParam = false;
-			if (this.identifierPtr < 0) {
-				// workaround, empty token should set an empty identifier by scanner and so identifierPtr should be == 0
-				if (completionScanner.getCurrentIdentifierSource() == CompletionScanner.EmptyCompletionIdentifier) {
-					namePosition = completionScanner.completedIdentifierStart;
-					startPosition = completionScanner.completedIdentifierStart;
-					endPosition = completionScanner.completedIdentifierEnd;
-				}
-			} else {
+			if (this.identifierPtr >= 0) {
 				char[] identifier = null;
 				switch (this.identifierPtr) {
 					case 2:
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnJavadocParamNameReference.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnJavadocParamNameReference.java
index 08f764e..5fb27d3 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnJavadocParamNameReference.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnJavadocParamNameReference.java
@@ -47,7 +47,7 @@ public class CompletionOnJavadocParamNameReference extends JavadocSingleNameRefe
 	 * @see org.eclipse.jdt.internal.compiler.ast.AllocationExpression#printExpression(int, java.lang.StringBuffer)
 	 */
 	public StringBuffer printExpression(int indent, StringBuffer output) {
-		output.append("<CompleteOnJavadocSingleNameReference:"); //$NON-NLS-1$
+		output.append("<CompletionOnJavadocParamNameReference:"); //$NON-NLS-1$
 		if (this.token != null) super.printExpression(indent, output);
 		return output.append('>');
 	}
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnJavadocTypeParamReference.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnJavadocTypeParamReference.java
index 1da97cf..f913bc3 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnJavadocTypeParamReference.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnJavadocTypeParamReference.java
@@ -46,7 +46,7 @@ public class CompletionOnJavadocTypeParamReference extends JavadocSingleTypeRefe
 	 * @see org.eclipse.jdt.internal.compiler.ast.AllocationExpression#printExpression(int, java.lang.StringBuffer)
 	 */
 	public StringBuffer printExpression(int indent, StringBuffer output) {
-		output.append("<CompleteOnJavadocSingleTypeReference:"); //$NON-NLS-1$
+		output.append("<CompletionOnJavadocTypeParamReference:"); //$NON-NLS-1$
 		if (this.token != null) super.printExpression(indent, output);
 		return output.append('>');
 	}
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java
index b831619..de19416 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java
@@ -3279,6 +3279,10 @@ public CompilationUnitDeclaration dietParse(ICompilationUnit sourceUnit, Compila
 	this.cursorLocation = cursorLoc;
 	CompletionScanner completionScanner = (CompletionScanner)this.scanner;
 	completionScanner.completionIdentifier = null;
+	completionScanner.completedTokenFound = false;
+	completionScanner.completedIdentifierStart = 0;
+	completionScanner.completedIdentifierEnd = -1;
+	completionScanner.whitespacesBeforeCompletedTokenFound = false;
 	completionScanner.cursorLocation = cursorLoc;
 	return this.dietParse(sourceUnit, compilationResult);
 }
@@ -3467,11 +3471,28 @@ protected boolean isInsideReturn(){
 	}
 	return false;
 }
+protected boolean moveRecoveryCheckpoint() {
+	CompletionScanner completionScanner = (CompletionScanner)this.scanner;
+	boolean completedTokenFound = completionScanner.completedTokenFound;
+	int start = completionScanner.completedIdentifierStart;
+	int end = completionScanner.completedIdentifierEnd;
+	boolean whitespacesAlreadyProposed = completionScanner.whitespacesBeforeCompletedTokenFound;
+	boolean result = super.moveRecoveryCheckpoint();
+	completionScanner.completedTokenFound = completedTokenFound;
+	completionScanner.completedIdentifierStart = start;
+	completionScanner.completedIdentifierEnd = end;
+	completionScanner.whitespacesBeforeCompletedTokenFound = whitespacesAlreadyProposed;
+	return result;
+}
 public CompilationUnitDeclaration parse(ICompilationUnit sourceUnit, CompilationResult compilationResult, int cursorLoc) {
 
 	this.cursorLocation = cursorLoc;
 	CompletionScanner completionScanner = (CompletionScanner)this.scanner;
 	completionScanner.completionIdentifier = null;
+	completionScanner.completedTokenFound = false;
+	completionScanner.completedIdentifierStart = 0;
+	completionScanner.completedIdentifierEnd = -1;
+	completionScanner.whitespacesBeforeCompletedTokenFound = false;
 	completionScanner.cursorLocation = cursorLoc;
 	return this.parse(sourceUnit, compilationResult);
 }
@@ -3657,7 +3678,12 @@ protected boolean resumeAfterRecovery() {
 	return super.resumeAfterRecovery();
 }
 public void setAssistIdentifier(char[] assistIdent){
-	((CompletionScanner)scanner).completionIdentifier = assistIdent;
+	CompletionScanner completionScanner = (CompletionScanner)scanner;
+	completionScanner.completionIdentifier = assistIdent;
+	if(assistIdent == null) {
+		completionScanner.completedTokenFound = false;
+		completionScanner.whitespacesBeforeCompletedTokenFound = false;
+	}
 }
 public  String toString() {
 	String s = ""; //$NON-NLS-1$
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionScanner.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionScanner.java
index d78ce77..6683fc5 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionScanner.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionScanner.java
@@ -36,6 +36,9 @@ public class CompletionScanner extends Scanner {
 	public int completedIdentifierStart = 0;
 	public int completedIdentifierEnd = -1;
 	public int unicodeCharSize;
+	
+	public boolean whitespacesBeforeCompletedTokenFound = false;
+	public boolean completedTokenFound = false;
 
 	public static final char[] EmptyCompletionIdentifier = {};
 	
@@ -134,9 +137,12 @@ public int getNextToken() throws InvalidInputException {
 					}
 					if (this.currentPosition > this.eofPosition) {
 						/* might be completing at eof (e.g. behind a dot) */
-						if (this.completionIdentifier == null && 
+						if (!this.completedTokenFound && 
 							this.startPosition == this.cursorLocation + 1){
 							this.currentPosition = this.startPosition; // for being detected as empty free identifier
+							this.completedTokenFound = true;
+							this.completedIdentifierStart = this.startPosition;
+							this.completedIdentifierEnd = this.currentPosition - 1;
 							return TokenNameIdentifier;
 						}	
 						return TokenNameEOF;
@@ -161,17 +167,24 @@ public int getNextToken() throws InvalidInputException {
 				}
 				/* completion requesting strictly inside blanks */
 				if ((whiteStart != this.currentPosition)
-					//&& (previousToken == TokenNameDOT)
-					&& (this.completionIdentifier == null)
-					&& (whiteStart <= this.cursorLocation+1)
-					&& (this.cursorLocation < this.startPosition)
-					&& !Character.isJavaIdentifierStart(this.currentCharacter)){
+						//&& (previousToken == TokenNameDOT)
+						&& (!this.completedTokenFound)
+						&& (whiteStart <= this.cursorLocation+1)
+						&& (this.cursorLocation < this.startPosition)
+						&& !Character.isJavaIdentifierStart(this.currentCharacter)){
+
+					if (this.tokenizeWhiteSpace && hasWhiteSpaces && !this.whitespacesBeforeCompletedTokenFound) {
+						// reposition scanner in case we are interested by spaces as tokens
+						this.currentPosition-=offset;
+						this.startPosition = whiteStart;
+						this.whitespacesBeforeCompletedTokenFound = true;
+						return TokenNameWHITESPACE;
+					}
 					this.currentPosition = this.startPosition; // for next token read
-					/* Warning:
-					 * Above statement reset scanner position at token start which can make
-					 * scanner enter in an infinite loop if completionIdentifier is still null!
-					 * (see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=114115)
-					 */
+					this.completedTokenFound = true;
+					this.completedIdentifierStart = this.startPosition;
+					this.completedIdentifierEnd = this.currentPosition - 1;
+					this.whitespacesBeforeCompletedTokenFound = false;
 					return TokenNameIdentifier;
 				}
 			} while (isWhiteSpace);
@@ -184,7 +197,7 @@ public int getNextToken() throws InvalidInputException {
 			//little trick to get out in the middle of a source computation
 			if (this.currentPosition > this.eofPosition){
 				/* might be completing at eof (e.g. behind a dot) */
-				if (this.completionIdentifier == null && 
+				if (!this.completedTokenFound  && 
 					this.startPosition == this.cursorLocation + 1){
 					// compute end of empty identifier.
 					// if the empty identifier is at the start of a next token the end of
@@ -192,6 +205,9 @@ public int getNextToken() throws InvalidInputException {
 				 	while(getNextCharAsJavaIdentifierPart()){/*empty*/}
 				 	this.endOfEmptyToken = this.currentPosition - 1;
 					this.currentPosition = this.startPosition; // for being detected as empty free identifier
+					this.completedTokenFound = true;
+					this.completedIdentifierStart = this.startPosition;
+					this.completedIdentifierEnd = this.currentPosition - 1;
 					return TokenNameIdentifier;
 				}				
 				return TokenNameEOF;
@@ -441,6 +457,9 @@ public int getNextToken() throws InvalidInputException {
 											&& this.cursorLocation <= this.currentPosition-1) {
 										this.currentPosition = start;
 										// complete inside a string literal
+										this.completedTokenFound = true;
+										this.completedIdentifierStart = this.startPosition;
+										this.completedIdentifierEnd = this.currentPosition - 1;
 										return TokenNameStringLiteral;
 									}
 									start = this.currentPosition;
@@ -468,6 +487,9 @@ public int getNextToken() throws InvalidInputException {
 									if(this.startPosition <= this.cursorLocation
 											&& this.cursorLocation <= this.currentPosition-1) {
 										// complete inside a string literal
+										this.completedTokenFound = true;
+										this.completedIdentifierStart = this.startPosition;
+										this.completedIdentifierEnd = this.currentPosition - 1;
 										return TokenNameStringLiteral;
 									}
 								}
@@ -517,6 +539,9 @@ public int getNextToken() throws InvalidInputException {
 						if(this.startPosition <= this.cursorLocation
 							&& this.cursorLocation < this.currentPosition) {
 							// complete inside a string literal
+							this.completedTokenFound = true;
+							this.completedIdentifierStart = this.startPosition;
+							this.completedIdentifierEnd = this.currentPosition - 1;
 							return TokenNameStringLiteral;
 						}
 						throw new InvalidInputException(UNTERMINATED_STRING);
@@ -537,8 +562,11 @@ public int getNextToken() throws InvalidInputException {
 						}
 						throw e; // rethrow
 					}
-//					if (this.startPosition <= this.cursorLocation && this.cursorLocation <= this.currentPosition-1){
-//					}
+					if (this.startPosition <= this.cursorLocation && this.cursorLocation <= this.currentPosition-1){
+						this.completedTokenFound = true;
+						this.completedIdentifierStart = this.startPosition;
+						this.completedIdentifierEnd = this.currentPosition - 1;
+					}
 					return TokenNameStringLiteral;
 				case '/' :
 					{
@@ -796,9 +824,12 @@ public int getNextToken() throws InvalidInputException {
 		}
 	}
 	/* might be completing at very end of file (e.g. behind a dot) */
-	if (this.completionIdentifier == null && 
+	if (!this.completedTokenFound && 
 		this.startPosition == this.cursorLocation + 1){
 		this.currentPosition = this.startPosition; // for being detected as empty free identifier
+		this.completedTokenFound = true;
+		this.completedIdentifierStart = this.startPosition;
+		this.completedIdentifierEnd = this.currentPosition - 1;
 		return TokenNameIdentifier;
 	}
 	return TokenNameEOF;
@@ -813,6 +844,14 @@ public final void getNextUnicodeChar() throws InvalidInputException {
 		throw new InvalidCursorLocation(InvalidCursorLocation.NO_COMPLETION_INSIDE_UNICODE);
 	}
 }
+public void resetTo(int begin, int end) {
+	super.resetTo(begin, end);
+	if(this.completedTokenFound && this.completedIdentifierStart >= begin) {
+		this.completedTokenFound = false;
+		this.whitespacesBeforeCompletedTokenFound = false;
+	}
+}
+
 ///*
 // * In case we actually read a keyword, but the cursor is located inside,
 // * we pretend we read an identifier.
@@ -822,10 +861,17 @@ public int scanIdentifierOrKeyword() {
 	int id = super.scanIdentifierOrKeyword();
 
 	// convert completed keyword into an identifier
-	if (id != TokenNameIdentifier
-		&& this.startPosition <= this.cursorLocation+1 
+	if (this.startPosition <= this.cursorLocation+1 
 		&& this.cursorLocation < this.currentPosition){
-		return TokenNameIdentifier;
+		if(!this.completedTokenFound) {
+			this.completedTokenFound = true;
+			this.completedIdentifierStart = this.startPosition;
+			this.completedIdentifierEnd = this.currentPosition - 1;
+			return TokenNameIdentifier;
+		} else if(this.completedIdentifierStart == this.startPosition
+				&& this.completedIdentifierEnd == this.currentPosition - 1) {
+				return TokenNameIdentifier;
+		}
 	}
 	return id;
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java
index 7853e33..03386e9 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java
@@ -697,8 +697,10 @@ public abstract class AbstractCommentParser implements JavadocTagConstants {
 		boolean isCompletionParser = (this.kind & COMPLETION_PARSER) != 0;
 		if (token != TerminalTokens.TokenNameWHITESPACE) {
 			if (this.reportProblems) this.sourceParser.problemReporter().javadocInvalidTag(start, this.scanner.getCurrentTokenEndPosition());
-			if (!isCompletionParser) this.scanner.currentPosition = start;
-			this.index = start;
+			if (!isCompletionParser) {
+				this.scanner.currentPosition = start;
+				this.index = start;
+			}
 			this.currentTokenType = -1;
 			this.scanner.tokenizeWhiteSpace = tokenWhiteSpace;
 			return false;
@@ -761,8 +763,10 @@ public abstract class AbstractCommentParser implements JavadocTagConstants {
 							this.sourceParser.problemReporter().javadocInvalidParamTypeParameter(start, end);
 						else
 							this.sourceParser.problemReporter().javadocInvalidParamTagName(start, end);
-					this.scanner.currentPosition = start;
-					this.index = start;
+					if (!isCompletionParser) {
+						this.scanner.currentPosition = start;
+						this.index = start;
+					}
 					this.currentTokenType = -1;
 					this.scanner.tokenizeWhiteSpace = tokenWhiteSpace;
 					return false;
@@ -785,8 +789,10 @@ public abstract class AbstractCommentParser implements JavadocTagConstants {
 						// if not valid fall through next case to report error
 					case TerminalTokens.TokenNameEOF:
 						if (this.reportProblems) this.sourceParser.problemReporter().javadocInvalidParamTypeParameter(start, end);
-						this.scanner.currentPosition = start;
-						this.index = start;
+						if (!isCompletionParser) {
+							this.scanner.currentPosition = start;
+							this.index = start;
+						}
 						this.currentTokenType = -1;
 						this.scanner.tokenizeWhiteSpace = tokenWhiteSpace;
 						return false;
@@ -826,8 +832,10 @@ public abstract class AbstractCommentParser implements JavadocTagConstants {
 						// if not valid fall through next case to report error
 					case TerminalTokens.TokenNameEOF:
 						if (this.reportProblems) this.sourceParser.problemReporter().javadocInvalidParamTypeParameter(start, end);
-						this.scanner.currentPosition = start;
-						this.index = start;
+						if (!isCompletionParser) {
+							this.scanner.currentPosition = start;
+							this.index = start;
+						}
 						this.currentTokenType = -1;
 						this.scanner.tokenizeWhiteSpace = tokenWhiteSpace;
 						return false;

commit 10d9ee7d6cd7cd29aebe50986af8fcc7cd9d4e32
Author: Stephan Herrmann <stephan.herrmann@berlin.de>
Date:   Thu Dec 3 17:33:56 2015 +0100

    Bug 466291: IAE on renaming the location for external annotation
    attachment
    - immediate fix for the IllegalArgumentException
    
    Change-Id: I328ee3e14208dfe7577b5e1a83943f3d9d3fcb7b

87	64	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ExternalAnnotations17Test.java
87	0	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ExternalAnnotations18Test.java
9	6	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFile.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ExternalAnnotations17Test.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ExternalAnnotations17Test.java
index 0e62994..a891bec 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ExternalAnnotations17Test.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ExternalAnnotations17Test.java
@@ -15,6 +15,7 @@ import org.eclipse.core.resources.IMarker;
 import org.eclipse.core.resources.IResource;
 import org.eclipse.core.resources.IncrementalProjectBuilder;
 import org.eclipse.core.runtime.NullProgressMonitor;
+import org.eclipse.core.runtime.Platform;
 import org.eclipse.jdt.core.ICompilationUnit;
 import org.eclipse.jdt.core.IJavaModelMarker;
 import org.eclipse.jdt.core.IPackageFragment;
@@ -424,75 +425,97 @@ public class ExternalAnnotations17Test extends ExternalAnnotations18Test {
 	
 	// annotation file is empty
 	public void testBogusAnnotationFile1() throws Exception {
-		myCreateJavaProject("TestLibs");
-		String lib1Content = 
-				"package libs;\n" + 
-				"\n" +
-				"public interface Lib1<T> {\n" +
-				"	public Lib1<T> getLib();\n" +
-				"}\n";
-		addLibraryWithExternalAnnotations(this.project, "lib1.jar", "annots", new String[] {
-				"/UnannotatedLib/libs/Lib1.java",
-				lib1Content
-			}, null);
-		createFileInProject("annots/libs", "Lib1.eea", 
-				"");
+		LogListener listener = new LogListener();
+		try {
+			Platform.addLogListener(listener);
 
-		// type check sources:
-		IPackageFragment fragment = this.project.getPackageFragmentRoots()[0].createPackageFragment("tests", true, null);
-		ICompilationUnit cu = fragment.createCompilationUnit("Test1.java",
-				"package tests;\n" + 
-				"import org.eclipse.jdt.annotation.*;\n" + 
-				"\n" + 
-				"import libs.Lib1;\n" + 
-				"\n" + 
-				"public class Test1 {\n" + 
-				"	@NonNull Lib1<String> test0(Lib1<String> stringLib) {\n" + 
-				"		return stringLib.getLib();\n" + 
-				"	}\n" +
-				"}\n",
-				true, new NullProgressMonitor()).getWorkingCopy(new NullProgressMonitor());
-		CompilationUnit reconciled = cu.reconcile(AST.JLS8, true, null, new NullProgressMonitor());
-		IProblem[] problems = reconciled.getProblems();
-		assertProblems(problems, new String[] {
-				"Pb(912) Null type safety: The expression of type 'Lib1<String>' needs unchecked conversion to conform to '@NonNull Lib1<String>'",
-		}, new int[] { 8 });
+			myCreateJavaProject("TestLibs");
+			String lib1Content = 
+					"package libs;\n" + 
+					"\n" +
+					"public interface Lib1<T> {\n" +
+					"	public Lib1<T> getLib();\n" +
+					"}\n";
+			addLibraryWithExternalAnnotations(this.project, "lib1.jar", "annots", new String[] {
+					"/UnannotatedLib/libs/Lib1.java",
+					lib1Content
+				}, null);
+			createFileInProject("annots/libs", "Lib1.eea", 
+					"");
+	
+			// type check sources:
+			IPackageFragment fragment = this.project.getPackageFragmentRoots()[0].createPackageFragment("tests", true, null);
+			ICompilationUnit cu = fragment.createCompilationUnit("Test1.java",
+					"package tests;\n" + 
+					"import org.eclipse.jdt.annotation.*;\n" + 
+					"\n" + 
+					"import libs.Lib1;\n" + 
+					"\n" + 
+					"public class Test1 {\n" + 
+					"	@NonNull Lib1<String> test0(Lib1<String> stringLib) {\n" + 
+					"		return stringLib.getLib();\n" + 
+					"	}\n" +
+					"}\n",
+					true, new NullProgressMonitor()).getWorkingCopy(new NullProgressMonitor());
+			CompilationUnit reconciled = cu.reconcile(AST.JLS8, true, null, new NullProgressMonitor());
+			IProblem[] problems = reconciled.getProblems();
+			assertProblems(problems, new String[] {
+					"Pb(912) Null type safety: The expression of type 'Lib1<String>' needs unchecked conversion to conform to '@NonNull Lib1<String>'",
+			}, new int[] { 8 });
+			
+			assertEquals("number of log entries", 1, listener.loggedStatus.size());
+			final Throwable exception = listener.loggedStatus.get(0).getException();
+			assertEquals("logged message", "missing class header in annotation file", exception.getMessage());
+		} finally {
+			Platform.removeLogListener(listener);
+		}
 	}
 
 	// wrong class header
 	public void testBogusAnnotationFile2() throws Exception {
-		myCreateJavaProject("TestLibs");
-		String lib1Content = 
-				"package libs;\n" + 
-				"\n" +
-				"public interface Lib1<T> {\n" +
-				"	public Lib1<T> getLib();\n" +
-				"}\n";
-		addLibraryWithExternalAnnotations(this.project, "lib1.jar", "annots", new String[] {
-				"/UnannotatedLib/libs/Lib1.java",
-				lib1Content
-			}, null);
-		createFileInProject("annots/libs", "Lib1.eea", 
-				"type Lib1\n");
+		LogListener listener = new LogListener();
+		try {
+			Platform.addLogListener(listener);
 
-		// type check sources:
-		IPackageFragment fragment = this.project.getPackageFragmentRoots()[0].createPackageFragment("tests", true, null);
-		ICompilationUnit cu = fragment.createCompilationUnit("Test1.java",
-				"package tests;\n" + 
-				"import org.eclipse.jdt.annotation.*;\n" + 
-				"\n" + 
-				"import libs.Lib1;\n" + 
-				"\n" + 
-				"public class Test1 {\n" + 
-				"	@NonNull Lib1<String> test0(Lib1<String> stringLib) {\n" + 
-				"		return stringLib.getLib();\n" + 
-				"	}\n" +
-				"}\n",
-				true, new NullProgressMonitor()).getWorkingCopy(new NullProgressMonitor());
-		CompilationUnit reconciled = cu.reconcile(AST.JLS8, true, null, new NullProgressMonitor());
-		IProblem[] problems = reconciled.getProblems();
-		assertProblems(problems, new String[] {
-				"Pb(912) Null type safety: The expression of type 'Lib1<String>' needs unchecked conversion to conform to '@NonNull Lib1<String>'",
-		}, new int[] { 8 });
+			myCreateJavaProject("TestLibs");
+			String lib1Content = 
+					"package libs;\n" + 
+					"\n" +
+					"public interface Lib1<T> {\n" +
+					"	public Lib1<T> getLib();\n" +
+					"}\n";
+			addLibraryWithExternalAnnotations(this.project, "lib1.jar", "annots", new String[] {
+					"/UnannotatedLib/libs/Lib1.java",
+					lib1Content
+				}, null);
+			createFileInProject("annots/libs", "Lib1.eea", 
+					"type Lib1\n");
+	
+			// type check sources:
+			IPackageFragment fragment = this.project.getPackageFragmentRoots()[0].createPackageFragment("tests", true, null);
+			ICompilationUnit cu = fragment.createCompilationUnit("Test1.java",
+					"package tests;\n" + 
+					"import org.eclipse.jdt.annotation.*;\n" + 
+					"\n" + 
+					"import libs.Lib1;\n" + 
+					"\n" + 
+					"public class Test1 {\n" + 
+					"	@NonNull Lib1<String> test0(Lib1<String> stringLib) {\n" + 
+					"		return stringLib.getLib();\n" + 
+					"	}\n" +
+					"}\n",
+					true, new NullProgressMonitor()).getWorkingCopy(new NullProgressMonitor());
+			CompilationUnit reconciled = cu.reconcile(AST.JLS8, true, null, new NullProgressMonitor());
+			IProblem[] problems = reconciled.getProblems();
+			assertProblems(problems, new String[] {
+					"Pb(912) Null type safety: The expression of type 'Lib1<String>' needs unchecked conversion to conform to '@NonNull Lib1<String>'",
+			}, new int[] { 8 });
+
+			assertEquals("number of log entries", 1, listener.loggedStatus.size());
+			final Throwable exception = listener.loggedStatus.get(0).getException();
+			assertEquals("logged message", "missing class header in annotation file", exception.getMessage());
+		} finally {
+			Platform.removeLogListener(listener);
+		}
 	}
 }
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ExternalAnnotations18Test.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ExternalAnnotations18Test.java
index 01a7614..19c8363 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ExternalAnnotations18Test.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ExternalAnnotations18Test.java
@@ -12,8 +12,10 @@ package org.eclipse.jdt.core.tests.model;
 
 import java.io.File;
 import java.io.IOException;
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Hashtable;
+import java.util.List;
 import java.util.Map;
 
 import junit.framework.Test;
@@ -24,9 +26,12 @@ import org.eclipse.core.resources.IResource;
 import org.eclipse.core.resources.IncrementalProjectBuilder;
 import org.eclipse.core.runtime.CoreException;
 import org.eclipse.core.runtime.FileLocator;
+import org.eclipse.core.runtime.ILogListener;
 import org.eclipse.core.runtime.IPath;
+import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.core.runtime.Path;
+import org.eclipse.core.runtime.Platform;
 import org.eclipse.jdt.core.IClasspathAttribute;
 import org.eclipse.jdt.core.IClasspathContainer;
 import org.eclipse.jdt.core.IClasspathEntry;
@@ -91,6 +96,14 @@ public class ExternalAnnotations18Test extends ModifyingResourceTests {
 			return false;
 		}
 	}
+	
+	static class LogListener implements ILogListener {
+    	List<IStatus> loggedStatus = new ArrayList<>();
+        public void logging(IStatus status, String plugin) {
+            this.loggedStatus.add(status);
+        }
+	}
+
 
 	protected IJavaProject project;
 	protected IPackageFragmentRoot root;
@@ -1332,4 +1345,78 @@ public class ExternalAnnotations18Test extends ModifyingResourceTests {
 				")I]",
 				Arrays.toString(annotatedSign));
 	}
+
+	public void testBrokenConfig1() throws Exception {
+		LogListener listener = new LogListener();
+		try {
+			Platform.addLogListener(listener);
+	
+			myCreateJavaProject("TestBrokenConfig1");
+			addLibraryWithExternalAnnotations(this.project, "lib1.jar", "/NoProject", new String[] {
+					"/UnannotatedLib/libs/Lib1.java",
+					"package libs;\n" + 
+					"\n" + 
+					"import java.util.Collection;\n" + 
+					"import java.util.Iterator;\n" + 
+					"\n" + 
+					"public interface Lib1 {\n" + 
+					"	<T> Iterator<T> unconstrainedTypeArguments1(Collection<T> in);\n" + 
+					"	Iterator<String> unconstrainedTypeArguments2(Collection<String> in);\n" + 
+					"	<T> Iterator<? extends T> constrainedWildcards(Collection<? extends T> in);\n" + 
+					"	<T extends Collection<?>> T constrainedTypeParameter(T in);\n" + 
+					"}\n",
+					"/UnannotatedLib/libs/Lib2.java",
+					"package libs;\n" +
+					"public interface Lib2 {\n" +
+					"	String test(String s);\n" +
+					"}\n"
+				}, null);
+			IPackageFragment fragment = this.project.getPackageFragmentRoots()[0].createPackageFragment("tests", true, null);
+			ICompilationUnit unit = fragment.createCompilationUnit("Test1.java", 
+					"package tests;\n" + 
+					"import org.eclipse.jdt.annotation.*;\n" + 
+					"\n" + 
+					"import java.util.Collection;\n" + 
+					"import java.util.Iterator;\n" + 
+					"\n" + 
+					"import libs.Lib1;\n" + 
+					"\n" + 
+					"public class Test1 {\n" + 
+					"	Iterator<@NonNull String> test1(Lib1 lib, Collection<@Nullable String> coll) {\n" + 
+					"		return lib.unconstrainedTypeArguments1(coll);\n" + 
+					"	}\n" + 
+					"	Iterator<@NonNull String> test2(Lib1 lib, Collection<@Nullable String> coll) {\n" + 
+					"		return lib.unconstrainedTypeArguments2(coll);\n" + 
+					"	}\n" +
+					"	Iterator<? extends @NonNull String> test3(Lib1 lib, Collection<String> coll) {\n" +
+					"		return lib.constrainedWildcards(coll);\n" +
+					"	}\n" +
+					"	@NonNull Collection<String> test4(Lib1 lib, @Nullable Collection<String> in) {\n" +
+					"		return lib.constrainedTypeParameter(in);\n" +
+					"	}\n" + 
+					"}\n",
+					true, new NullProgressMonitor()).getWorkingCopy(new NullProgressMonitor());
+			CompilationUnit reconciled = unit.reconcile(AST.JLS8, true, null, new NullProgressMonitor());
+			IProblem[] problems = reconciled.getProblems();
+			assertEquals("number of problems", 4, problems.length);
+
+			// second class to test if problem is logged more than once
+			ICompilationUnit unit2 = fragment.createCompilationUnit("Test2.java", 
+					"package tests;\n" + 
+					"import libs.Lib2;\n" + 
+					"\n" + 
+					"public class Test2 {\n" + 
+					"	void test1(Lib2 lib) {\n" +
+					"		lib.test(null);\n" + 
+					"	}\n" + 
+					"}\n",
+					true, new NullProgressMonitor()).getWorkingCopy(new NullProgressMonitor());
+			CompilationUnit reconciled2 = unit2.reconcile(AST.JLS8, true, null, new NullProgressMonitor());
+			assertNoProblems(reconciled2.getProblems());
+			
+			assertEquals("number of log entries", 0, listener.loggedStatus.size());
+		} finally {
+			Platform.removeLogListener(listener);
+		}
+	}
 }
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFile.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFile.java
index 78cf856..c01f34e 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFile.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFile.java
@@ -364,7 +364,7 @@ private IBinaryType getJarBinaryTypeInfo(PackageFragment pkg, boolean fullyIniti
 				IClasspathEntry entry = javaProject.getClasspathEntryFor(getPath());
 				if (entry != null) {
 					IProject project = javaProject.getProject();
-					IPath externalAnnotationPath = ClasspathEntry.getExternalAnnotationPath(entry, project, false);
+					IPath externalAnnotationPath = ClasspathEntry.getExternalAnnotationPath(entry, project, false); // unresolved for use in ExternalAnnotationTracker
 					if (externalAnnotationPath != null)
 						setupExternalAnnotationProvider(project, externalAnnotationPath, annotationZip, reader, 
 								entryName.substring(0, entryName.length() - SuffixConstants.SUFFIX_CLASS.length));
@@ -384,11 +384,14 @@ private void setupExternalAnnotationProvider(IProject project, final IPath exter
 {
 	// try resolve path within the workspace:
 	IWorkspaceRoot root = project.getWorkspace().getRoot();
-	IResource resource = externalAnnotationPath.segmentCount() == 1
-			? root.getProject(externalAnnotationPath.lastSegment())
-			: root.getFolder(externalAnnotationPath);
-	if (!resource.exists())
-		resource = root.getFile(externalAnnotationPath);
+	IResource resource;
+	if (externalAnnotationPath.segmentCount() == 1) {
+		resource = root.getProject(externalAnnotationPath.lastSegment());
+	} else {
+		resource = root.getFolder(externalAnnotationPath);
+		if (!resource.exists())
+			resource = root.getFile(externalAnnotationPath);
+	}
 	String resolvedPath;
 	if (resource.exists()) {
 		if (resource.isVirtual()) {
commit cdb3e8d99e2ddf40df3afd879c65627abb3809dc
Author: Stephan Herrmann <stephan.herrmann@berlin.de>
Date:   Tue Dec 8 01:22:14 2015 +0100

    Bug 466291: IAE on renaming the location for external annotation
    attachment
    - validation
    
    Change-Id: I88ee02d8125962b4eb9b4bafff2d6235b7cae9f4

8	4	org.eclipse.jdt.core/model/org/eclipse/jdt/core/IJavaModelStatusConstants.java
59	12	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java
15	6	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java
1	0	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Messages.java
2	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/messages.properties
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IJavaModelStatusConstants.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IJavaModelStatusConstants.java
index a88db5e..d3d643b 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IJavaModelStatusConstants.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IJavaModelStatusConstants.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2011 IBM Corporation and others.
+ * Copyright (c) 2000, 2015 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -7,9 +7,6 @@
  *
  * Contributors:
  *     IBM Corporation - initial API and implementation
- *
- * TODO missing 2.1 and subsequent contributions
- * COMPILER_FAILURE
  *******************************************************************************/
 package org.eclipse.jdt.core;
 
@@ -352,4 +349,11 @@ public interface IJavaModelStatusConstants {
 	 * @since 3.6.4
 	 */
 	public static final int OUTPUT_LOCATION_OVERLAPPING_ANOTHER_SOURCE = 1013;
+
+	/**
+	 * <p>Status constant indicating that an external annotation path is invalid.</p>
+	 * @since 3.12
+	 * @see org.eclipse.jdt.core.IClasspathAttribute#EXTERNAL_ANNOTATION_PATH
+	 */
+	public static final int CP_INVALID_EXTERNAL_ANNOTATION_PATH = 1014;
 }
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java
index a003b2b..08acbd6 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java
@@ -35,6 +35,7 @@ import java.util.zip.ZipFile;
 
 import org.eclipse.core.resources.IContainer;
 import org.eclipse.core.resources.IFile;
+import org.eclipse.core.resources.IMarker;
 import org.eclipse.core.resources.IProject;
 import org.eclipse.core.resources.IResource;
 import org.eclipse.core.resources.IWorkspaceRoot;
@@ -47,6 +48,7 @@ import org.eclipse.jdt.core.IAccessRule;
 import org.eclipse.jdt.core.IClasspathAttribute;
 import org.eclipse.jdt.core.IClasspathContainer;
 import org.eclipse.jdt.core.IClasspathEntry;
+import org.eclipse.jdt.core.IJavaModelMarker;
 import org.eclipse.jdt.core.IJavaModelStatus;
 import org.eclipse.jdt.core.IJavaModelStatusConstants;
 import org.eclipse.jdt.core.IJavaProject;
@@ -1285,15 +1287,13 @@ public class ClasspathEntry implements IClasspathEntry {
 					return annotationPath;
 
 				// try Workspace-absolute:
-				IProject targetProject = project.getWorkspace().getRoot().getProject(annotationPath.segment(0));
-				if (targetProject.exists()) {
-					if (annotationPath.segmentCount() > 1)
-						return targetProject.getLocation().append(annotationPath.removeFirstSegments(1));
-					else
-						return targetProject.getLocation();
+				IResource resource = project.getWorkspace().getRoot().findMember(annotationPath);
+				if (resource != null) {
+					return resource.getLocation();
+				} else if (new File(annotationPath.toOSString()).exists()) { // absolute, not in workspace, must be Filesystem-absolute
+					return annotationPath;
 				}
-				// absolute, not in workspace, must be Filesystem-absolute:
-				return annotationPath;
+				invalidExternalAnnotationPath(project);
 			} else {
 				// try Variable (always resolved):
 				IPath resolved = JavaCore.getResolvedVariablePath(annotationPath);
@@ -1302,10 +1302,14 @@ public class ClasspathEntry implements IClasspathEntry {
 
 				// Project-relative:
 				if (project != null) {
-					if (resolve)
-						return project.getLocation().append(annotationPath);
-					else
+					if (resolve) {
+						IResource member = project.findMember(annotationPath);
+						if (member != null)
+							return member.getLocation();
+						invalidExternalAnnotationPath(project);
+					} else {
 						return new Path(project.getName()).append(annotationPath).makeAbsolute();
+					}
 				}
 			}
 		}
@@ -1327,7 +1331,42 @@ public class ClasspathEntry implements IClasspathEntry {
 		}
 		return null;
 	}
-	
+
+	private static void invalidExternalAnnotationPath(IProject project) {
+		try {
+			IMarker[] markers = project.findMarkers(IJavaModelMarker.BUILDPATH_PROBLEM_MARKER, false, IResource.DEPTH_ZERO);
+			for (int i = 0, l = markers.length; i < l; i++) {
+				if (markers[i].getAttribute(IMarker.SEVERITY, -1) == IMarker.SEVERITY_ERROR)
+					return; // one marker is enough
+			}
+		} catch (CoreException ce) {
+			return;
+		}
+		// no buildpath marker yet, trigger validation to create one:
+		new ClasspathValidation((JavaProject) JavaCore.create(project)).validate();
+	}
+
+	private IJavaModelStatus validateExternalAnnotationPath(IJavaProject javaProject, IPath annotationPath) {
+		IProject project = javaProject.getProject();
+		if (annotationPath.isAbsolute()) {
+			if (project.getWorkspace().getRoot().exists(annotationPath) // workspace absolute
+					|| new File(annotationPath.toOSString()).exists())  // file system abolute
+			{
+				return null;
+			}
+		} else {
+			if (JavaCore.getResolvedVariablePath(annotationPath) != null // variable (relative)
+					|| project.exists(annotationPath))					 // project relative
+			{
+				return null;
+			}
+		}
+		return new JavaModelStatus(IJavaModelStatusConstants.CP_INVALID_EXTERNAL_ANNOTATION_PATH,
+				javaProject,
+				Messages.bind(Messages.classpath_invalidExternalAnnotationPath, 
+						new String[] { annotationPath.toString(), project.getName(), this.path.toString()}));
+	}
+
 	public IClasspathEntry getReferencingEntry() {
 		return this.referencingEntry;
 	}
@@ -2029,6 +2068,14 @@ public class ClasspathEntry implements IClasspathEntry {
 									break;
 								}
 							}
+							if (status == null) {
+								String annotationPath = getRawExternalAnnotationPath(entry);
+								if (annotationPath != null) {
+									status = ((ClasspathEntry) entry).validateExternalAnnotationPath(project, new Path(annotationPath));
+									if (status != null)
+										return status;
+								}
+							}
 						}
 						IClasspathContainer container = JavaModelManager.getJavaModelManager().getClasspathContainer(path, project);
 						// container retrieval is performing validation check on container entry kinds.
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java
index 3975387..c919e79 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java
@@ -633,11 +633,20 @@ private int initializeBuilder(int kind, boolean forBuild) throws CoreException {
 	return kind;
 }
 
-private boolean isClasspathBroken(IClasspathEntry[] classpath, IProject p) throws CoreException {
-	IMarker[] markers = p.findMarkers(IJavaModelMarker.BUILDPATH_PROBLEM_MARKER, false, IResource.DEPTH_ZERO);
-	for (int i = 0, l = markers.length; i < l; i++)
-		if (markers[i].getAttribute(IMarker.SEVERITY, -1) == IMarker.SEVERITY_ERROR)
+private boolean isClasspathBroken(JavaProject jProj, boolean tryRepair) throws CoreException {
+	IMarker[] markers = jProj.getProject().findMarkers(IJavaModelMarker.BUILDPATH_PROBLEM_MARKER, false, IResource.DEPTH_ZERO);
+	for (int i = 0, l = markers.length; i < l; i++) {
+		if (markers[i].getAttribute(IMarker.SEVERITY, -1) == IMarker.SEVERITY_ERROR) {
+			if (tryRepair) {
+				Object code = markers[i].getAttribute(IJavaModelMarker.ID);
+				if (code instanceof Integer && ((Integer)code) == IJavaModelStatusConstants.CP_INVALID_EXTERNAL_ANNOTATION_PATH) {
+					new ClasspathValidation(jProj).validate();
+					return isClasspathBroken(jProj, false);
+				}
+			}
 			return true;
+		}
+	}
 	return false;
 }
 
@@ -651,7 +660,7 @@ private boolean isWorthBuilding() throws CoreException {
 	}
 
 	// Abort build only if there are classpath errors
-	if (isClasspathBroken(this.javaProject.getRawClasspath(), this.currentProject)) {
+	if (isClasspathBroken(this.javaProject, true)) {
 		if (DEBUG)
 			System.out.println("JavaBuilder: Aborted build because project has classpath errors (incomplete or involved in cycle)"); //$NON-NLS-1$
 
@@ -702,7 +711,7 @@ private boolean isWorthBuilding() throws CoreException {
 			marker.setAttributes(
 				new String[] {IMarker.MESSAGE, IMarker.SEVERITY, IJavaModelMarker.CATEGORY_ID, IMarker.SOURCE_ID},
 				new Object[] {
-					isClasspathBroken(prereq.getRawClasspath(), p)
+					isClasspathBroken(prereq, true)
 						? Messages.bind(Messages.build_prereqProjectHasClasspathProblems, p.getName())
 						: Messages.bind(Messages.build_prereqProjectMustBeRebuilt, p.getName()),
 					new Integer(IMarker.SEVERITY_ERROR),
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Messages.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Messages.java
index ceb402f..0303e70 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Messages.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Messages.java
@@ -185,6 +185,7 @@ public final class Messages extends NLS {
 	public static String classpath_incompatibleLibraryJDKLevelInContainer;
 	public static String classpath_duplicateEntryExtraAttribute;
 	public static String classpath_deprecated_variable;
+	public static String classpath_invalidExternalAnnotationPath;
 	public static String file_notFound;
 	public static String file_badFormat;
 	public static String path_nullPath;
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/messages.properties b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/messages.properties
index bf3c646..724696c 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/messages.properties
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/messages.properties
@@ -1,5 +1,5 @@
 ###############################################################################
-# Copyright (c) 2000, 2014 IBM Corporation and others.
+# Copyright (c) 2000, 2015 IBM Corporation and others.
 # All rights reserved. This program and the accompanying materials
 # are made available under the terms of the Eclipse Public License v1.0
 # which accompanies this distribution, and is available at
@@ -181,6 +181,7 @@ classpath_incompatibleLibraryJDKLevel = Incompatible .class files version in req
 classpath_incompatibleLibraryJDKLevelInContainer = Incompatible .class files version in required binaries. Project ''{0}'' is targeting a {1} runtime, but is compiled against ''{2}'' (from the {3}) which requires a {4} runtime
 classpath_duplicateEntryExtraAttribute = Duplicate extra attribute: ''{0}'' in classpath entry ''{1}'' for project ''{2}''
 classpath_deprecated_variable = Classpath variable ''{0}'' in project ''{1}'' is deprecated: {2}
+classpath_invalidExternalAnnotationPath = Invalid external annotation path: ''{0}'' in project ''{1}'', for classpath entry ''{2}''
 
 ### miscellaneous
 buffer_closed=Buffer is closed

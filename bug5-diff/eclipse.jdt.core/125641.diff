commit ba0154713ba7d434aa2e47b80fd55a84048c10dc
Author: David Audel <daudel>
Date:   Mon Jan 30 15:14:26 2006 +0000

    HEAD - bug 125641 and remove COMPILER_STATEMENTS_RECOVERY

812	331	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java
133	81	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/GenericDietRecoveryTest.java
0	8	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/StatementRecoveryTest.java
0	1	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractComparableTest.java
9	5	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java
0	1	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/AbstractCompilerTest.java
2	1	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java
0	23	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterRecoveryTest.java
2	1	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AllJavaModelTests.java
377	0	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerStatementsRecoveryTests.java
2	2	org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java
4	1	org.eclipse.jdt.core/buildnotes_jdt-core.html
15	14	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java
0	10	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java
1	1	org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetCompiler.java
2	1	org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetEvaluator.java
2	1	org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/Evaluator.java
0	7	org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java
1	0	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ASTHolderCUInfo.java
8	2	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java
1	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitVisitor.java
0	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaCorePreferenceInitializer.java
1	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ReconcileWorkingCopyOperation.java
2	2	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java
index e973055..fa37bbb 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java
@@ -47,9 +47,9 @@ public void checkParse(
 	char[] source, 
 	String expectedDietUnitToString,
 	String expectedDietPlusBodyUnitToString,	
-	String expectedFullUnitToString,
-	String expectedCompletionDietUnitToString, 
-	String testName) {
+	String expectedDietPlusBodyPlusStatementsRecoveryUnitToString,
+	String expectedFullUnitToString, 
+	String expectedCompletionDietUnitToString, String testName) {
 
 	/* using regular parser in DIET mode */
 	{
@@ -83,6 +83,7 @@ public void checkParse(
 					new CompilerOptions(getCompilerOptions()), 
 					new DefaultProblemFactory(Locale.getDefault())),
 				optimizeStringLiterals);
+		parser.setStatementsRecovery(false);
 
 		ICompilationUnit sourceUnit = new CompilationUnit(source, testName, null);
 		CompilationResult compilationResult = new CompilationResult(sourceUnit, 0, 0, 0);	
@@ -111,6 +112,44 @@ public void checkParse(
 			expectedDietPlusBodyUnitToString,
 			computedUnitToString);
 	}
+	/* using regular parser in DIET mode + getMethodBodies + statements recovery */
+	{
+		Parser parser = 
+			new Parser(
+				new ProblemReporter(
+					DefaultErrorHandlingPolicies.proceedWithAllProblems(), 
+					new CompilerOptions(getCompilerOptions()), 
+					new DefaultProblemFactory(Locale.getDefault())),
+				optimizeStringLiterals);
+		parser.setStatementsRecovery(true);
+
+		ICompilationUnit sourceUnit = new CompilationUnit(source, testName, null);
+		CompilationResult compilationResult = new CompilationResult(sourceUnit, 0, 0, 0);	
+		
+		CompilationUnitDeclaration computedUnit = parser.dietParse(sourceUnit, compilationResult);
+		String computedUnitToString = computedUnit.toString();
+		if (!expectedDietUnitToString.equals(computedUnitToString)){
+			System.out.println(Util.displayString(computedUnitToString));
+		}
+		assertEquals(
+			"Invalid unit diet structure" + testName,
+			expectedDietUnitToString,
+			computedUnitToString);
+		if (computedUnit.types != null) {
+			for (int i = computedUnit.types.length; --i >= 0;){
+				computedUnit.types[i].parseMethod(parser, computedUnit);
+			}
+		}
+		computedUnitToString = computedUnit.toString();
+		if (!expectedDietPlusBodyPlusStatementsRecoveryUnitToString.equals(computedUnitToString)){
+			System.out.println(Util.displayString(computedUnitToString));
+		}
+		
+		assertEquals(
+			"Invalid unit diet+body structure" + testName,
+			expectedDietPlusBodyPlusStatementsRecoveryUnitToString,
+			computedUnitToString);
+	}
 	/* using regular parser in FULL mode */
 	{
 		Parser parser = 
@@ -286,9 +325,9 @@ public void test01() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,
-		expectedCompletionDietUnitToString,	
-		testName);
+		expectedDietPlusBodyUnitToString,
+		expectedFullUnitToString,	
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Should filter out local type altogether
@@ -349,6 +388,32 @@ public void test02() {
 		"  void truc() {\n" + 
 		"  }\n" + 
 		"}\n";	
+	
+	String expectedDietPlusBodyPlusStatementsRecoveryUnitToString = 
+		"package a;\n" + 
+		"import java.lang.*;\n" + 
+		"import java.util.*;\n" + 
+		"public class X {\n" + 
+		"  public int h;\n" + 
+		"  public int[] i = {0, 1};\n" + 
+		"  public X() {\n" + 
+		"    super();\n" +
+		"  }\n" + 
+		"  void foo() {\n" + 
+		"    System.out.println();\n" + 
+		"    class L {\n" + 
+		"      L() {\n" + 
+		"        super();\n" + 
+		"      }\n" + 
+		"      void baz() {\n" + 
+		"      }\n" + 
+		"    }\n" + 
+		"  }\n" + 
+		"  void bar() {\n" + 
+		"  }\n" + 
+		"  void truc() {\n" + 
+		"  }\n" + 
+		"}\n";	
 
 	String expectedFullUnitToString = expectedDietUnitToString;
 	
@@ -374,9 +439,9 @@ public void test02() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,
-		expectedCompletionDietUnitToString,	
-		testName);
+		expectedDietPlusBodyPlusStatementsRecoveryUnitToString,
+		expectedFullUnitToString,	
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Should still be finding last method (#baz)
@@ -461,9 +526,9 @@ public void test03() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,	
-		expectedFullUnitToString,
-		expectedCompletionDietUnitToString,	
-		testName);
+		expectedDietPlusBodyUnitToString,
+		expectedFullUnitToString,	
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Should finding 5 fields.
@@ -558,9 +623,9 @@ public void test04() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,	
-		expectedFullUnitToString,
-		expectedCompletionDietUnitToString,	
-		testName);
+		expectedDietPlusBodyUnitToString,
+		expectedFullUnitToString,	
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Diet parse thinks it is successful - no recovery
@@ -605,6 +670,22 @@ public void test05() {
 		"  void truc() {\n" + 
 		"  }\n" + 
 		"}\n";
+		
+	String expectedDietPlusBodyPlusStatementsRecoveryUnitToString = 
+		"public class X {\n" + 
+		"  public X() {\n" + 
+		"    super();\n" + 
+		"  }\n" + 
+		"  void foo() {\n" + 
+		"    System.out.println();\n" + 
+		"    new baz() {\n" + 
+		"    };\n" + 
+		"  }\n" + 
+		"  void bar() {\n" + 
+		"  }\n" + 
+		"  void truc() {\n" + 
+		"  }\n" + 
+		"}\n";
 
 	String expectedFullUnitToString = 
 		"public class X {\n" + 
@@ -629,9 +710,9 @@ public void test05() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
+		expectedDietPlusBodyPlusStatementsRecoveryUnitToString,	
 		expectedFullUnitToString,	
-		expectedCompletionDietUnitToString,	
-		testName);
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Recovery will not restart from scratch, and miss some signatures (#baz())
@@ -698,9 +779,9 @@ public void test06() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,	
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,	
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Attaching orphan methods and fields 
@@ -764,9 +845,9 @@ public void test07() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
+		expectedDietPlusBodyUnitToString,	
 		expectedFullUnitToString,	
-		expectedCompletionDietUnitToString,	
-		testName);
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Properly attaching fields/methods to member type
@@ -850,9 +931,9 @@ public void test08() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
+		expectedDietPlusBodyUnitToString,
 		expectedFullUnitToString,
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Properly attaching fields/methods to enclosing type
@@ -937,9 +1018,9 @@ public void test09() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
+		expectedDietPlusBodyUnitToString,	
 		expectedFullUnitToString,	
-		expectedCompletionDietUnitToString,	
-		testName);
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Properly attaching fields/methods to member type in presence of missing
@@ -1024,9 +1105,9 @@ public void test10() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
+		expectedDietPlusBodyUnitToString,
 		expectedFullUnitToString,
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Attaching orphan methods and fields, by counting brackets
@@ -1089,9 +1170,9 @@ public void test11() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
+		expectedDietPlusBodyUnitToString,	
 		expectedFullUnitToString,	
-		expectedCompletionDietUnitToString,	
-		testName);
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Attaching orphan methods and fields, by counting brackets
@@ -1155,9 +1236,9 @@ public void test12() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString		,
-		expectedFullUnitToString,
-		expectedCompletionDietUnitToString,	
-		testName);
+		expectedDietPlusBodyUnitToString,
+		expectedFullUnitToString,	
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Should still recover incomplete type signature (missing superclass)
@@ -1197,9 +1278,9 @@ public void test13() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Should still recover incomplete method signature (missing opening brace)
@@ -1244,9 +1325,9 @@ public void test14() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Should still recover incomplete method signature (missing thrown exceptions)
@@ -1281,6 +1362,18 @@ public void test15() {
 		"  void bar() {\n" + 
 		"  }\n" + 
 		"}\n";
+		
+	String expectedDietPlusBodyPlusStatementsRecoveryUnitToString = 
+		"public class X extends Thread {\n" + 
+		"  public X() {\n" + 
+		"    super();\n" + 	
+		"  }\n" + 
+		"  void foo() {\n" + 
+		"    ;\n" + 
+		"  }\n" + 
+		"  void bar() {\n" + 
+		"  }\n" + 
+		"}\n";
 	
 	String expectedFullUnitToString = expectedDietUnitToString;
 	
@@ -1291,9 +1384,9 @@ public void test15() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyPlusStatementsRecoveryUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Should still recover incomplete type signature (missing superinterfaces)
@@ -1338,9 +1431,9 @@ public void test16() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Should still recover incomplete type signature (missing superinterfaces)
@@ -1385,9 +1478,9 @@ public void test17() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,	
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,	
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Should find member type behind incomplete enclosing type header
@@ -1437,9 +1530,9 @@ public void test18() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
+		expectedDietPlusBodyUnitToString,	
 		expectedFullUnitToString,	
-		expectedCompletionDietUnitToString,	
-		testName);
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Should find member type when missing opening brace
@@ -1489,9 +1582,9 @@ public void test19() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
+		expectedDietPlusBodyUnitToString,	
 		expectedFullUnitToString,	
-		expectedCompletionDietUnitToString,	
-		testName);
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Should not find fieldX signature behind missing brace
@@ -1542,9 +1635,9 @@ public void test20() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Should find Y as member type
@@ -1590,9 +1683,9 @@ public void test21() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
+		expectedDietPlusBodyUnitToString,	
 		expectedFullUnitToString,	
-		expectedCompletionDietUnitToString,	
-		testName);
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Should filter out incomplete local type
@@ -1652,6 +1745,32 @@ public void test22() {
 		"  void truc() {\n" + 
 		"  }\n" + 
 		"}\n";
+		
+	String expectedDietPlusBodyPlusStatementsRecoveryUnitToString = 
+		"package a;\n" + 
+		"import java.lang.*;\n" + 
+		"import java.util.*;\n" + 
+		"public class X {\n" + 
+		"  public int h;\n" + 
+		"  public X() {\n" + 
+		"    super();\n"+
+		"  }\n" + 
+		"  void foo() {\n" + 
+		"    System.out.println();\n" + 
+		"    class L {\n" + 
+		"      public int l;\n" + 
+		"      L() {\n" + 
+		"        super();\n" + 
+		"      }\n" + 
+		"      void baz() {\n" + 
+		"      }\n" + 
+		"    }\n" + 
+		"  }\n" + 
+		"  void bar() {\n" + 
+		"  }\n" + 
+		"  void truc() {\n" + 
+		"  }\n" + 
+		"}\n";
 	
 	String expectedFullUnitToString = expectedDietUnitToString;
 	
@@ -1662,9 +1781,9 @@ public void test22() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
+		expectedDietPlusBodyPlusStatementsRecoveryUnitToString,	
 		expectedFullUnitToString,	
-		expectedCompletionDietUnitToString,	
-		testName);
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Should filter out incomplete local type and method signature
@@ -1725,6 +1844,32 @@ public void test23() {
 		"  }\n" + 
 		"}\n";
 	
+	String expectedDietPlusBodyPlusStatementsRecoveryUnitToString = 
+		"package a;\n" + 
+		"import java.lang.*;\n" + 
+		"import java.util.*;\n" + 
+		"public class X {\n" + 
+		"  public int h;\n" + 
+		"  public X() {\n" + 
+		"    super();\n"+
+		"  }\n" + 
+		"  void foo() {\n" + 
+		"    System.out.println();\n" + 
+		"    class L {\n" + 
+		"      public int l;\n" + 
+		"      L() {\n" + 
+		"        super();\n" + 
+		"      }\n" + 
+		"      void baz() {\n" + 
+		"      }\n" + 
+		"    }\n" + 
+		"  }\n" + 
+		"  void bar() {\n" + 
+		"  }\n" + 
+		"  void truc() {\n" + 
+		"  }\n" + 
+		"}\n";
+		
 	String expectedFullUnitToString = expectedDietUnitToString;
 	
 	String expectedCompletionDietUnitToString = expectedDietUnitToString;
@@ -1734,9 +1879,9 @@ public void test23() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyPlusStatementsRecoveryUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Should filter out anonymous type
@@ -1810,9 +1955,9 @@ public void test24() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Should filter out incomplete anonymous type
@@ -1861,6 +2006,31 @@ public void test25() {
 		"  }\n" + 
 		"}\n";
 	
+	String expectedDietPlusBodyPlusStatementsRecoveryUnitToString = 
+		"package a;\n" + 
+		"import java.lang.*;\n" + 
+		"import java.util.*;\n" + 
+		"public class X {\n" + 
+		"  public X() {\n" + 
+		"    super();\n"+
+		"  }\n" + 
+		"  void foo() {\n" + 
+		"    System.out.println();\n" + 
+		"    new X() {\n" + 
+		"      public int h;\n" + 
+		"      () {\n" + 
+		"        super();\n" + 
+		"      }\n" + 
+		"      void baz() {\n" + 
+		"      }\n" + 
+		"      void bar() {\n" + 
+		"      }\n" + 
+		"      void truc() {\n" + 
+		"      }\n" + 
+		"    };\n" + 
+		"  }\n" + 
+		"}\n";
+		
 	String expectedFullUnitToString = expectedDietUnitToString;
 	
 	String expectedCompletionDietUnitToString = expectedDietUnitToString;
@@ -1870,9 +2040,9 @@ public void test25() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyPlusStatementsRecoveryUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Should filter out incomplete anonymous method
@@ -1931,6 +2101,24 @@ public void test26() {
 		"  void truc() {\n" + 
 		"  }\n" + 
 		"}\n";
+		
+	String expectedDietPlusBodyPlusStatementsRecoveryUnitToString = 
+		"package a;\n" + 
+		"import java.lang.*;\n" + 
+		"import java.util.*;\n" + 
+		"public class X {\n" + 
+		"  public int h;\n" + 
+		"  public X() {\n" + 
+		"    super();\n"+
+		"  }\n" + 
+		"  void foo() {\n" + 
+		"    System.out.println();\n" + 
+		"  }\n" + 
+		"  void bar() {\n" + 
+		"  }\n" + 
+		"  void truc() {\n" + 
+		"  }\n" + 
+		"}\n";
 	
 	String expectedFullUnitToString = expectedDietUnitToString;
 	
@@ -1941,9 +2129,9 @@ public void test26() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyPlusStatementsRecoveryUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Should filter out incomplete local type and local var h
@@ -2001,6 +2189,32 @@ public void test27() {
 		"  void truc() {\n" + 
 		"  }\n" + 
 		"}\n";
+		
+	String expectedDietPlusBodyPlusStatementsRecoveryUnitToString = 
+		"package a;\n" + 
+		"import java.lang.*;\n" + 
+		"import java.util.*;\n" + 
+		"public class X {\n" + 
+		"  public X() {\n" + 
+		"    super();\n"+
+		"  }\n" + 
+		"  void foo() {\n" + 
+		"    System.out.println();\n" + 
+		"    class L {\n" + 
+		"      public int l;\n" + 
+		"      L() {\n" + 
+		"        super();\n" + 
+		"      }\n" + 
+		"      void baz() {\n" + 
+		"      }\n" + 
+		"    }\n" + 
+		"    int h;\n" + 
+		"  }\n" + 
+		"  void bar() {\n" + 
+		"  }\n" + 
+		"  void truc() {\n" + 
+		"  }\n" + 
+		"}\n";
 	
 	String expectedFullUnitToString = expectedDietUnitToString;
 	
@@ -2011,9 +2225,9 @@ public void test27() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyPlusStatementsRecoveryUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Should find <y> as a field in Y
@@ -2070,9 +2284,9 @@ public void test28() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Should find <y> as a field in X
@@ -2129,9 +2343,9 @@ public void test29() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Should find <y> as a field in X
@@ -2188,9 +2402,9 @@ public void test30() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Should recover from partial method header foo()
@@ -2274,9 +2488,9 @@ public void test31() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Should recover from method with missing argument names
@@ -2321,9 +2535,9 @@ public void test32() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Should not find message with no argument as a constructor
@@ -2371,9 +2585,9 @@ public void test33() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
+		expectedDietPlusBodyUnitToString,	
 		expectedFullUnitToString,	
-		expectedCompletionDietUnitToString,	
-		testName);
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Should not find allocation as a constructor
@@ -2425,9 +2639,9 @@ public void test34() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Incomplete field header
@@ -2463,9 +2677,9 @@ public void test35() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Incomplete multiple field headers
@@ -2503,9 +2717,9 @@ public void test36() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Field header with started string initializer
@@ -2541,9 +2755,9 @@ public void test37() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Field header with started string initializer combined with incomplete superinterface
@@ -2579,9 +2793,9 @@ public void test38() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Field signature behind keyword implements
@@ -2618,9 +2832,9 @@ public void test39() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Field type read as interface
@@ -2654,9 +2868,9 @@ public void test40() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Contiguous headers (checking checkpoint positions)
@@ -2703,9 +2917,9 @@ public void test41() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Contiguous headers without comma (checking checkpoint positions)
@@ -2744,9 +2958,9 @@ public void test42() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Contiguous headers without comma (checking checkpoint positions)
@@ -2798,9 +3012,9 @@ public void test43() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Should find static field <x>
@@ -2850,9 +3064,9 @@ public void test44() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Missing string literal quote inside method
@@ -2893,9 +3107,9 @@ public void test45() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Detecting member type closing when missing brackets
@@ -2955,9 +3169,9 @@ public void test46() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Unterminated method arguments
@@ -2997,9 +3211,9 @@ public void test47() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Unterminated literal string in method body
@@ -3046,9 +3260,9 @@ public void test48() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Unterminated initializer with local declaration
@@ -3088,9 +3302,9 @@ public void test49() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Unterminated if statement
@@ -3122,6 +3336,21 @@ public void test50() {
 		"  }\n" + 
 		"}\n";
 	
+	String expectedDietPlusBodyPlusStatementsRecoveryUnitToString = 
+		"public class X {\n" + 
+		"  public X() {\n" + 
+		"    super();\n" + 
+		"  }\n" + 
+		"  int foo() {\n" + 
+		"    if (true)\n" + 
+		"        {\n" + 
+		"          int x;\n" + 
+		"        }\n" + 
+		"    else\n" + 
+		"        ;\n" + 
+		"  }\n" + 
+		"}\n";
+		
 	String expectedFullUnitToString = expectedDietUnitToString;
 	
 	String expectedCompletionDietUnitToString = expectedDietUnitToString;
@@ -3131,9 +3360,9 @@ public void test50() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyPlusStatementsRecoveryUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Unterminated nested block with local declaration
@@ -3164,6 +3393,18 @@ public void test51() {
 		"  int foo() {\n" + 
 		"  }\n" + 
 		"}\n";
+		
+	String expectedDietPlusBodyPlusStatementsRecoveryUnitToString = 
+		"public class X {\n" + 
+		"  public X() {\n" + 
+		"    super();\n" + 
+		"  }\n" + 
+		"  int foo() {\n" + 
+		"    {\n" + 
+		"      int x;\n" + 
+		"    }\n" + 
+		"  }\n" + 
+		"}\n";
 	
 	String expectedFullUnitToString = expectedDietUnitToString;
 	
@@ -3174,9 +3415,9 @@ public void test51() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyPlusStatementsRecoveryUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Unterminated nested block with field declaration
@@ -3219,9 +3460,9 @@ public void test52() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Unterminated initializer with field declaration
@@ -3263,9 +3504,9 @@ public void test53() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Invalid class name
@@ -3313,9 +3554,9 @@ public void test54() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Unterminated static initializer with field declaration
@@ -3361,9 +3602,9 @@ public void test55() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Multiple initializers combined with array initializer
@@ -3440,9 +3681,9 @@ public void test56() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Combination of unterminated methods and fields
@@ -3497,9 +3738,9 @@ public void test57() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Illegal unicode inside method body
@@ -3544,9 +3785,9 @@ public void test58() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Extra identifier in type signature
@@ -3584,9 +3825,9 @@ public void test59() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Extra identifier in method signature
@@ -3625,9 +3866,9 @@ public void test60() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Extra identifier behind thrown exception
@@ -3666,9 +3907,9 @@ public void test61() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Unterminated array initializer
@@ -3764,9 +4005,9 @@ public void test62() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Initializer behind array initializer
@@ -3816,9 +4057,9 @@ public void test63() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Initializers mixed with fields
@@ -3895,9 +4136,9 @@ public void test64() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Should find method behind some()
@@ -3980,9 +4221,9 @@ public void test65() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Should detect X(int) as a method with no return type
@@ -4031,9 +4272,9 @@ public void test66() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Should detect orphan X(int) as a constructor
@@ -4084,9 +4325,9 @@ public void test67() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Empty unit
@@ -4109,9 +4350,9 @@ public void test68() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Unit reduced to a method declaration
@@ -4137,9 +4378,9 @@ public void test69() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Unit reduced to a constructor declaration
@@ -4165,9 +4406,9 @@ public void test70() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Unit reduced to a field declaration
@@ -4191,9 +4432,9 @@ public void test71() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Unit reduced to a field declaration with array initializer
@@ -4217,9 +4458,9 @@ public void test72() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Should not pick-up any constructor with no arg
@@ -4249,6 +4490,17 @@ public void test73() {
 		"  int foo() {\n" + 
 		"  }\n" + 
 		"}\n";
+	
+	String expectedDietPlusBodyPlusStatementsRecoveryUnitToString =
+		"class X {\n" + 
+		"  X(int i) {\n" + 
+		"    super();\n" + 
+		"  }\n" + 
+		"  int foo() {\n" + 
+		"    new X();\n" + 
+		"  }\n" + 
+		"}\n";
+		
 	String expectedFullUnitToString = expectedDietUnitToString;
 	
 	String expectedCompletionDietUnitToString = expectedDietUnitToString;
@@ -4258,9 +4510,9 @@ public void test73() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyPlusStatementsRecoveryUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Should not detect any field
@@ -4307,9 +4559,9 @@ public void test74() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Bunch of syntax errors
@@ -4364,6 +4616,34 @@ public void test75() {
 		"  }\n" + 
 		"}\n";
 		
+	String expectedDietPlusBodyPlusStatementsRecoveryUnitToString =
+		"package ZKentTest;\n" + 
+		"import java.awt.color.*;\n" + 
+		"public class A {\n" + 
+		"  int[] ii;\n" + 
+		"  public A() {\n" + 
+		"    super();\n" + 
+		"  }\n" + 
+		"  A foo(int i) {\n" + 
+		"    return this;\n" + 
+		"  }\n" + 
+		"  int bar() {\n" + 
+		"    class Local {\n" + 
+		"      Local() {\n" + 
+		"        super();\n" + 
+		"      }\n" + 
+		"      int hello() {\n" + 
+		"        fo = ;\n" + 
+		"      }\n" + 
+		"      int world() {\n" + 
+		"      }\n" + 
+		"      void foo() {\n" + 
+		"      }\n" + 
+		"    }\n" + 
+		"    int hello;\n" + 
+		"  }\n" + 
+		"}\n";
+		
 	String expectedFullUnitToString = expectedDietUnitToString;
 	
 	String expectedCompletionDietUnitToString = 
@@ -4386,9 +4666,9 @@ public void test75() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyPlusStatementsRecoveryUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Should find Member as a member type
@@ -4442,6 +4722,24 @@ public void test76() {
 		"  }\n" + 
 		"}\n";	
 
+	String expectedDietPlusBodyPlusStatementsRecoveryUnitToString = 
+		"package pack;\n" + 
+		"class A {\n" + 
+		"  class Member {\n" + 
+		"    Member() {\n" + 
+		"      super();\n" + 			
+		"    }\n" + 
+		"    int foo() {\n" + 
+		"    }\n" + 
+		"  }\n" + 
+		"  A() {\n" + 
+		"    super();\n" + 		
+		"  }\n" + 
+		"  public static void main(String[] argv) {\n" + 
+		"    new Member().f = ;\n" + 
+		"  }\n" + 
+		"}\n";	
+		
 	String expectedFullUnitToString = expectedDietUnitToString;
 	
 	String expectedCompletionDietUnitToString = expectedDietUnitToString;
@@ -4451,9 +4749,9 @@ public void test76() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyPlusStatementsRecoveryUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Should not recover duplicate field numberOfDisks
@@ -4514,6 +4812,30 @@ public void test77() {
 		"  }\n" + 
 		"}\n";
 	
+	String expectedDietPlusBodyPlusStatementsRecoveryUnitToString = 
+		"package p;\n" + 
+		"import java.lang.*;\n" + 
+		"class IncompleteHanoi {\n" + 
+		"  private Post[] posts;\n" + 
+		"  private int numberOfDisks;\n" + 
+		"  IncompleteHanoi() {\n" + 
+		"    super();\n" + 		
+		"  }\n" + 
+		"  public Hanoi(int numberOfDisks) {\n" + 
+		"  }\n" + 
+		"  private void solve(int depth, Post start, Post free, Post end) {\n" + 
+		"    if ((depth == 1))\n" + 
+		"        moveDisk(start, end);\n" + 
+		"    else\n" + 
+		"        if ((depth > 1))\n" + 
+		"            {\n" + 
+		"              sol = ;\n" + 
+		"            }\n" + 
+		"        else\n" + 
+		"            ;\n" + 
+		"  }\n" + 
+		"}\n";
+		
 	String expectedFullUnitToString = expectedDietUnitToString;
 	
 	String expectedCompletionDietUnitToString = expectedDietUnitToString;
@@ -4523,9 +4845,9 @@ public void test77() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyPlusStatementsRecoveryUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Should not detect a field v (1/2)
@@ -4557,6 +4879,18 @@ public void test78() {
 		"  int foo() {\n" + 
 		"  }\n" + 
 		"}\n";
+		
+	String expectedDietPlusBodyPlusStatementsRecoveryUnitToString = 
+		"class X {\n" + 
+		"  X() {\n" + 
+		"    super();\n" + 		
+		"  }\n" + 
+		"  int foo() {\n" + 
+		"    Vector v = new Vector();\n" + 
+		"    s v;\n" + 
+		"    addElement();\n" + 
+		"  }\n" + 
+		"}\n";
 	
 	String expectedFullUnitToString = expectedDietUnitToString;
 	
@@ -4567,9 +4901,9 @@ public void test78() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyPlusStatementsRecoveryUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Should not detect a field v (2/2)
@@ -4601,6 +4935,18 @@ public void test79() {
 		"  }\n" + 
 		"}\n";
 	
+	String expectedDietPlusBodyPlusStatementsRecoveryUnitToString = 
+		"class X {\n" + 
+		"  X() {\n" + 
+		"    super();\n" + 		
+		"  }\n" + 
+		"  int foo() {\n" + 
+		"    Vector v = new Vector();\n" + 
+		"    public s v;\n" + 
+		"    addElement();\n" + 
+		"  }\n" + 
+		"}\n";
+	
 	String expectedFullUnitToString = expectedDietUnitToString;
 	
 	String expectedCompletionDietUnitToString = expectedDietUnitToString;
@@ -4610,9 +4956,9 @@ public void test79() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyPlusStatementsRecoveryUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Should not detect a method bar
@@ -4646,6 +4992,17 @@ public void test80() {
 		"  }\n" + 
 		"}\n";
 	
+	String expectedDietPlusBodyPlusStatementsRecoveryUnitToString = 
+		"class X {\n" + 
+		"  X() {\n" + 
+		"    super();\n" + 		
+		"  }\n" + 
+		"  int test() {\n" + 
+		"    int[] i;\n" + 
+		"    i bar = 1;\n" + 
+		"  }\n" + 
+		"}\n";
+	
 	String expectedFullUnitToString = expectedDietUnitToString;
 	
 	String expectedCompletionDietUnitToString = expectedDietUnitToString;
@@ -4655,9 +5012,9 @@ public void test80() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyPlusStatementsRecoveryUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Should not pick-up any constructor with no arg
@@ -4686,6 +5043,16 @@ public void test81() {
 		"  int foo() {\n" + 
 		"  }\n" + 
 		"}\n";
+		
+	String expectedDietPlusBodyPlusStatementsRecoveryUnitToString = 
+		"class X {\n" + 
+		"  X(int i) {\n" + 
+		"    super();\n" + 
+		"  }\n" + 
+		"  int foo() {\n" + 
+		"    X(12);\n" + 
+		"  }\n" + 
+		"}\n";
 	
 	String expectedFullUnitToString = expectedDietUnitToString;
 	
@@ -4696,9 +5063,9 @@ public void test81() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyPlusStatementsRecoveryUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Should not promote message sending as a method
@@ -4751,9 +5118,9 @@ public void test82() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Should not promote message sending as a method 2
@@ -4805,9 +5172,9 @@ public void test83() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Should find a static initializer
@@ -4850,9 +5217,9 @@ public void test84() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Should find a static initializer
@@ -4895,9 +5262,9 @@ public void test85() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Should find an initializer
@@ -4937,9 +5304,9 @@ public void test86() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Should find an initializer
@@ -4983,9 +5350,9 @@ public void test87() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * 1FVRQG0: ITPCOM:WINNT - NullPointerException in recovery mode
@@ -5040,9 +5407,9 @@ public void test88() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * 1FVRN9V: ITPJCORE:WIN98 - Internal builder error compiling servlet
@@ -5093,9 +5460,9 @@ public void test89() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * 1FVXQZ4: ITPCOM:WIN98 - Walkback during parsing recovery
@@ -5147,9 +5514,9 @@ public void test90() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * 1FVXWKI: ITPCOM:WIN98 - Walkback when parsing a bogus interface
@@ -5181,9 +5548,9 @@ public void test91() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * Variation on 1FVXWKI: ITPCOM:WIN98 - Walkback when parsing a bogus interface
@@ -5213,9 +5580,9 @@ public void test92() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * 1FW5A4E: ITPCOM:WIN98 - Walkback reconciling
@@ -5261,9 +5628,9 @@ public void test93() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * 1FW3663: ITPCOM:WIN98 - Outline - does not show method #fred()
@@ -5302,6 +5669,19 @@ public void test94() {
 		"  }\n" +
 		"}\n";
 	
+	String expectedDietPlusBodyPlusStatementsRecoveryUnitToString = 
+		"public class X {\n" + 
+		"  int[] array;\n" + 
+		"  public X() {\n" + 
+		"    super();\n" + 		
+		"  }\n" + 
+		"  void foo() {\n" + 
+		"    bar(this.array.length, 10, fred());\n" + 
+		"  }\n" +
+		"  int fred() {\n" +
+		"  }\n" +
+		"}\n";
+		
 	String expectedFullUnitToString = expectedDietUnitToString;
 	
 	String expectedCompletionDietUnitToString = expectedDietUnitToString;
@@ -5311,9 +5691,9 @@ public void test94() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyPlusStatementsRecoveryUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * 1FW6M5M: ITPJUI:ALL - NPE in SourceElementParser
@@ -5342,9 +5722,9 @@ public void test95() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * 1FWHXX7: ITPCOM:WINNT - ClassCastException compiling invalid import
@@ -5395,9 +5775,9 @@ public void test96() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * variation on 1FWHXX7: ITPCOM:WINNT - ClassCastException compiling invalid import
@@ -5446,9 +5826,9 @@ public void test97() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 /*
  * http://dev.eclipse.org/bugs/show_bug.cgi?id=9084
@@ -5547,9 +5927,9 @@ public void test98() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 
 public void test99() {
@@ -5593,6 +5973,36 @@ public void test99() {
 		"  }\n" + 
 		"}\n";
 	
+	String expectedDietPlusBodyPlusStatementsRecoveryUnitToString = 
+		"class X {\n" + 
+		"  {\n" + 
+		"  }\n" + 
+		"  X() {\n" + 
+		"    super();\n" + 		
+		"  }\n" + 
+		"  public void addThreadFilter(IJavaThread thread) {\n" + 
+		"    restricts breakpoint;\n" + 
+		"    given thread;\n" + 
+		"    any other;\n" + 
+		"    specified = ;\n" + 
+		"  }\n" + 
+		"  public void removeThreadFilter(IJavaThread thread) {\n" + 
+		"    removes the;\n" + 
+		"    thread restriction;\n" + 
+		"    will need = (re - create);\n" + 
+		"    request as;\n" + 
+		"    does not;\n" + 
+		"    the removal;\n" + 
+		"    thread = ;\n" + 
+		"  }\n" + 
+		"  public IJavaThread[] getThreadFilters() {\n" + 
+		"    return the;\n" + 
+		"    of threads;\n" + 
+		"    breakpoint is;\n" + 
+		"    restricted to;\n" + 
+		"  }\n" + 
+		"}\n";
+		
 	String expectedFullUnitToString = expectedDietUnitToString;
 	
 	String expectedCompletionDietUnitToString = expectedDietUnitToString;
@@ -5602,9 +6012,9 @@ public void test99() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyPlusStatementsRecoveryUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 public void test100() {
 	String s = 
@@ -5653,6 +6063,40 @@ public void test100() {
 		"  }\n" + 
 		"}\n";
 	
+	String expectedDietPlusBodyPlusStatementsRecoveryUnitToString = 
+		"public class Bug {\n" + 
+		"  static boolean bold = false;\n" + 
+		"  <clinit>() {\n" + 
+		"  }\n" + 
+		"  public Bug() {\n" + 
+		"    super();\n" + 		
+		"  }\n" + 
+		"  public static void main(String[] arguments) {\n" + 
+		"    Shell shell = new Shell((((SWT.MENU | SWT.RESIZE) | SWT.TITLE) | SWT.H_SCROLL));\n" + 
+		"    StyledText text = new StyledText(shell, SWT.WRAP);\n" + 
+		"    shell.addListener(SWT.Resize, new Listener() {\n" + 
+		"  () {\n" + 
+		"    super();\n" + 
+		"  }\n" + 
+		"  public void handleEvent(Event e) {\n" + 
+		"    text.setBounds(shell.getClientArea());\n" + 
+		"  }\n" + 
+		"});\n" + 
+		"    shell.addListener(SWT.KeyDown, new Listener() {\n" + 
+		"  public void handleEvent(Event e) {\n" + 
+		"    bold = (! bold);\n" + 
+		"  }\n" + 
+		"});\n" + 
+		"    text.addLineStyleListener(new LineStyleListener() {\n" + 
+		"  () {\n" + 
+		"    super();\n" + 
+		"  }\n" + 
+		"  public void lineGetStyle(LineStyleEvent event) {\n" + 
+		"  }\n" + 
+		"});\n" + 
+		"  }\n" + 
+		"}\n";
+	
 	String expectedFullUnitToString = 
 		"public class Bug {\n" + 
 		"  static boolean bold = false;\n" + 
@@ -5684,9 +6128,9 @@ public void test100() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyPlusStatementsRecoveryUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 public void _test101() {
 	String s = 
@@ -5727,9 +6171,9 @@ public void _test101() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 public void test102() {
 	String s = 
@@ -5807,9 +6251,9 @@ public void test102() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 public void test103() {
 	String s = 
@@ -5844,9 +6288,9 @@ public void test103() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 public void test104() {
 	String s = 
@@ -5888,9 +6332,9 @@ public void test104() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 public void test105() {
 	String s = 
@@ -5951,9 +6395,9 @@ public void test105() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 public void test106() {
 	String s = 
@@ -5991,9 +6435,9 @@ public void test106() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 public void test107() {
 	String s = 
@@ -6033,9 +6477,9 @@ public void test107() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 public void test108() {
 	String s = 
@@ -6078,9 +6522,9 @@ public void test108() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 public void test109() {
 	String s = 
@@ -6124,9 +6568,9 @@ public void test109() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 public void test110() {
 	String s = 
@@ -6161,6 +6605,27 @@ public void test110() {
 		"  }\n" + 
 		"}\n";
 	
+	String expectedDietPlusBodyPlusStatementsRecoveryUnitToString = 
+		"public class X {\n" + 
+		"  public X() {\n" + 
+		"    super();\n" + 
+		"  }\n" + 
+		"  void bar() {\n" + 
+		"    class Inner {\n" + 
+		"      Inner() {\n" + 
+		"        super();\n" + 
+		"      }\n" + 
+		"      void foo() {\n" + 
+		"        try \n" + 
+		"          {\n" + 
+		"          }\n" + 
+		"        catch (Exception e)           {\n" + 
+		"          }\n" + 
+		"      }\n" + 
+		"    }\n" + 
+		"  }\n" + 
+		"}\n";
+	
 	String expectedFullUnitToString = expectedDietUnitToString;
 	
 	String expectedCompletionDietUnitToString = 
@@ -6176,9 +6641,9 @@ public void test110() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyPlusStatementsRecoveryUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 public void test111() {
 	String s = 
@@ -6225,9 +6690,9 @@ public void test111() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=100797
 public void test112() {
@@ -6259,6 +6724,22 @@ public void test112() {
 		"  }\n" + 
 		"}\n";
 	
+	String expectedDietPlusBodyPlusStatementsRecoveryUnitToString = 
+		"public class X {\n" + 
+		"  public X() {\n" + 
+		"    super();\n" + 
+		"  }\n" + 
+		"  public void foo() {\n" + 
+		"    try \n" + 
+		"      {\n" + 
+		"      }\n" + 
+		"    catch (Exception e)       {\n" + 
+		"        bar(\"blabla\");\n" + 
+		"        throw new Exception(prefix);\n" + 
+		"      }\n" + 
+		"  }\n" + 
+		"}\n";
+	
 	String expectedFullUnitToString = expectedDietUnitToString;
 	
 	String expectedCompletionDietUnitToString = 
@@ -6269,9 +6750,9 @@ public void test112() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyPlusStatementsRecoveryUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 //https://bugs.eclipse.org/bugs/show_bug.cgi?id=111618
 public void test113() {
@@ -6315,8 +6796,8 @@ public void test113() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,		
-		expectedCompletionDietUnitToString,
-		testName);
+		expectedDietPlusBodyUnitToString,		
+		expectedFullUnitToString,
+		expectedCompletionDietUnitToString, testName);
 }
 }
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/GenericDietRecoveryTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/GenericDietRecoveryTest.java
index 19a2c46..77f5075 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/GenericDietRecoveryTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/GenericDietRecoveryTest.java
@@ -51,9 +51,9 @@ public void checkParse(
 	char[] source, 
 	String expectedDietUnitToString,
 	String expectedDietPlusBodyUnitToString,	
-	String expectedFullUnitToString,
-	String expectedCompletionDietUnitToString, 
-	String testName) {
+	String expectedDietPlusBodyPlusStatementsRecoveryUnitToString,
+	String expectedFullUnitToString, 
+	String expectedCompletionDietUnitToString, String testName) {
 
 	/* using regular parser in DIET mode */
 	{
@@ -87,6 +87,7 @@ public void checkParse(
 					new CompilerOptions(getCompilerOptions()), 
 					new DefaultProblemFactory(Locale.getDefault())),
 				optimizeStringLiterals);
+		parser.setStatementsRecovery(false);
 
 		ICompilationUnit sourceUnit = new CompilationUnit(source, testName, null);
 		CompilationResult compilationResult = new CompilationResult(sourceUnit, 0, 0, 0);	
@@ -115,6 +116,46 @@ public void checkParse(
 			expectedDietPlusBodyUnitToString,
 			computedUnitToString);
 	}
+	
+	/* using regular parser in DIET mode + getMethodBodies + statements recovery*/
+	{
+		Parser parser = 
+			new Parser(
+				new ProblemReporter(
+					DefaultErrorHandlingPolicies.proceedWithAllProblems(), 
+					new CompilerOptions(getCompilerOptions()), 
+					new DefaultProblemFactory(Locale.getDefault())),
+				optimizeStringLiterals);
+		parser.setStatementsRecovery(true);
+
+		ICompilationUnit sourceUnit = new CompilationUnit(source, testName, null);
+		CompilationResult compilationResult = new CompilationResult(sourceUnit, 0, 0, 0);	
+		
+		CompilationUnitDeclaration computedUnit = parser.dietParse(sourceUnit, compilationResult);
+		String computedUnitToString = computedUnit.toString();
+		if (!expectedDietUnitToString.equals(computedUnitToString)){
+			System.out.println(Util.displayString(computedUnitToString));
+		}
+		assertEquals(
+			"Invalid unit diet structure" + testName,
+			expectedDietUnitToString,
+			computedUnitToString);
+		if (computedUnit.types != null) {
+			for (int i = computedUnit.types.length; --i >= 0;){
+				computedUnit.types[i].parseMethod(parser, computedUnit);
+			}
+		}
+		computedUnitToString = computedUnit.toString();
+		if (!expectedDietPlusBodyPlusStatementsRecoveryUnitToString.equals(computedUnitToString)){
+			System.out.println(Util.displayString(computedUnitToString));
+		}
+		
+		assertEquals(
+			"Invalid unit diet+body structure" + testName,
+			expectedDietPlusBodyPlusStatementsRecoveryUnitToString,
+			computedUnitToString);
+	}
+	
 	/* using regular parser in FULL mode */
 	{
 		Parser parser = 
@@ -242,9 +283,9 @@ public void test0001() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,
-		expectedCompletionDietUnitToString,	
-		testName);
+		expectedDietPlusBodyUnitToString,
+		expectedFullUnitToString,	
+		expectedCompletionDietUnitToString, testName);
 }
 public void test0002() {
 
@@ -271,9 +312,9 @@ public void test0002() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,
-		expectedCompletionDietUnitToString,	
-		testName);
+		expectedDietPlusBodyUnitToString,
+		expectedFullUnitToString,	
+		expectedCompletionDietUnitToString, testName);
 }
 public void test0003() {
 
@@ -307,9 +348,9 @@ public void test0003() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,
-		expectedCompletionDietUnitToString,	
-		testName);
+		expectedDietPlusBodyUnitToString,
+		expectedFullUnitToString,	
+		expectedCompletionDietUnitToString, testName);
 }
 public void test0004() {
 
@@ -343,9 +384,9 @@ public void test0004() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,
-		expectedCompletionDietUnitToString,	
-		testName);
+		expectedDietPlusBodyUnitToString,
+		expectedFullUnitToString,	
+		expectedCompletionDietUnitToString, testName);
 }
 public void test0005() {
 
@@ -382,9 +423,9 @@ public void test0005() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,
-		expectedCompletionDietUnitToString,	
-		testName);
+		expectedDietPlusBodyUnitToString,
+		expectedFullUnitToString,	
+		expectedCompletionDietUnitToString, testName);
 }
 public void test0006() {
 
@@ -421,9 +462,9 @@ public void test0006() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,
-		expectedCompletionDietUnitToString,	
-		testName);
+		expectedDietPlusBodyUnitToString,
+		expectedFullUnitToString,	
+		expectedCompletionDietUnitToString, testName);
 }
 public void test0007() {
 
@@ -458,9 +499,9 @@ public void test0007() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,
-		expectedCompletionDietUnitToString,	
-		testName);
+		expectedDietPlusBodyUnitToString,
+		expectedFullUnitToString,	
+		expectedCompletionDietUnitToString, testName);
 }
 
 public void test0008() {
@@ -500,9 +541,9 @@ public void test0008() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,
-		expectedCompletionDietUnitToString,	
-		testName);
+		expectedDietPlusBodyUnitToString,
+		expectedFullUnitToString,	
+		expectedCompletionDietUnitToString, testName);
 }
 public void test0009() {
 
@@ -539,9 +580,9 @@ public void test0009() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,
-		expectedCompletionDietUnitToString,	
-		testName);
+		expectedDietPlusBodyUnitToString,
+		expectedFullUnitToString,	
+		expectedCompletionDietUnitToString, testName);
 }
 
 public void test0010() {
@@ -581,9 +622,9 @@ public void test0010() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,
-		expectedCompletionDietUnitToString,	
-		testName);
+		expectedDietPlusBodyUnitToString,
+		expectedFullUnitToString,	
+		expectedCompletionDietUnitToString, testName);
 }
 
 public void test0011() {
@@ -618,9 +659,9 @@ public void test0011() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,
-		expectedCompletionDietUnitToString,	
-		testName);
+		expectedDietPlusBodyUnitToString,
+		expectedFullUnitToString,	
+		expectedCompletionDietUnitToString, testName);
 }
 public void test0012() {
 
@@ -654,9 +695,9 @@ public void test0012() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,
-		expectedCompletionDietUnitToString,	
-		testName);
+		expectedDietPlusBodyUnitToString,
+		expectedFullUnitToString,	
+		expectedCompletionDietUnitToString, testName);
 }
 public void test0013() {
 
@@ -690,9 +731,9 @@ public void test0013() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,
-		expectedCompletionDietUnitToString,	
-		testName);
+		expectedDietPlusBodyUnitToString,
+		expectedFullUnitToString,	
+		expectedCompletionDietUnitToString, testName);
 }
 public void test0014() {
 
@@ -726,9 +767,9 @@ public void test0014() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,
-		expectedCompletionDietUnitToString,	
-		testName);
+		expectedDietPlusBodyUnitToString,
+		expectedFullUnitToString,	
+		expectedCompletionDietUnitToString, testName);
 }
 public void test0015() {
 
@@ -762,9 +803,9 @@ public void test0015() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,
-		expectedCompletionDietUnitToString,	
-		testName);
+		expectedDietPlusBodyUnitToString,
+		expectedFullUnitToString,	
+		expectedCompletionDietUnitToString, testName);
 }
 public void test0016() {
 
@@ -798,9 +839,9 @@ public void test0016() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,
-		expectedCompletionDietUnitToString,	
-		testName);
+		expectedDietPlusBodyUnitToString,
+		expectedFullUnitToString,	
+		expectedCompletionDietUnitToString, testName);
 }
 public void test0017() {
 
@@ -834,9 +875,9 @@ public void test0017() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,
-		expectedCompletionDietUnitToString,	
-		testName);
+		expectedDietPlusBodyUnitToString,
+		expectedFullUnitToString,	
+		expectedCompletionDietUnitToString, testName);
 }
 public void test0018() {
 
@@ -870,9 +911,9 @@ public void test0018() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,
-		expectedCompletionDietUnitToString,	
-		testName);
+		expectedDietPlusBodyUnitToString,
+		expectedFullUnitToString,	
+		expectedCompletionDietUnitToString, testName);
 }
 public void test0019() {
 
@@ -903,6 +944,17 @@ public void test0019() {
 		"  void foo() {\n" + 
 		"  }\n" + 
 		"}\n";
+		
+	String expectedDietPlusBodyPlusStatementsRecoveryUnitToString = 
+		"package a;\n" + 
+		"public class X {\n" + 
+		"  public X() {\n" + 
+		"    super();\n" + 
+		"  }\n" + 
+		"  void foo() {\n" + 
+		"    Object o = (Y<Z>.W<U>) e;\n" + 
+		"  }\n" + 
+		"}\n";
 
 	String expectedFullUnitToString = expectedDietUnitToString;
 	
@@ -914,9 +966,9 @@ public void test0019() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,
-		expectedCompletionDietUnitToString,	
-		testName);
+		expectedDietPlusBodyPlusStatementsRecoveryUnitToString,
+		expectedFullUnitToString,	
+		expectedCompletionDietUnitToString, testName);
 }
 public void test0020() {
 	String s = 
@@ -980,9 +1032,9 @@ public void test0020() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,
-		expectedCompletionDietUnitToString,	
-		testName);
+		expectedDietPlusBodyUnitToString,
+		expectedFullUnitToString,	
+		expectedCompletionDietUnitToString, testName);
 }
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=113765
 public void test0021() {
@@ -1013,9 +1065,9 @@ public void test0021() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,
-		expectedCompletionDietUnitToString,	
-		testName);
+		expectedDietPlusBodyUnitToString,
+		expectedFullUnitToString,	
+		expectedCompletionDietUnitToString, testName);
 }
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=113765
 public void test0022() {
@@ -1044,9 +1096,9 @@ public void test0022() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,
-		expectedCompletionDietUnitToString,	
-		testName);
+		expectedDietPlusBodyUnitToString,
+		expectedFullUnitToString,	
+		expectedCompletionDietUnitToString, testName);
 }
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=113765
 public void test0023() {
@@ -1076,9 +1128,9 @@ public void test0023() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,
-		expectedCompletionDietUnitToString,	
-		testName);
+		expectedDietPlusBodyUnitToString,
+		expectedFullUnitToString,	
+		expectedCompletionDietUnitToString, testName);
 }
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=113765
 public void test0024() {
@@ -1107,9 +1159,9 @@ public void test0024() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,
-		expectedCompletionDietUnitToString,	
-		testName);
+		expectedDietPlusBodyUnitToString,
+		expectedFullUnitToString,	
+		expectedCompletionDietUnitToString, testName);
 }
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=113765
 public void test0025() {
@@ -1138,9 +1190,9 @@ public void test0025() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,
-		expectedCompletionDietUnitToString,	
-		testName);
+		expectedDietPlusBodyUnitToString,
+		expectedFullUnitToString,	
+		expectedCompletionDietUnitToString, testName);
 }
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=113765
 public void test0026() {
@@ -1169,8 +1221,8 @@ public void test0026() {
 		s.toCharArray(),
 		expectedDietUnitToString,
 		expectedDietPlusBodyUnitToString,
-		expectedFullUnitToString,
-		expectedCompletionDietUnitToString,	
-		testName);
+		expectedDietPlusBodyUnitToString,
+		expectedFullUnitToString,	
+		expectedCompletionDietUnitToString, testName);
 }
 }
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/StatementRecoveryTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/StatementRecoveryTest.java
index f3fc9cf..c7aec3a 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/StatementRecoveryTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/StatementRecoveryTest.java
@@ -11,7 +11,6 @@
 package org.eclipse.jdt.core.tests.compiler.parser;
 
 import java.util.Locale;
-import java.util.Map;
 
 import junit.framework.Test;
 
@@ -44,13 +43,6 @@ public static Test suite() {
 public StatementRecoveryTest(String testName){
 	super(testName);
 }
-protected Map getCompilerOptions() {
-	Map options = super.getCompilerOptions();
-	
-	options.put(CompilerOptions.OPTION_StatementsRecovery, CompilerOptions.ENABLED); //TODO temporary option
-	
-	return options;
-}
 public void checkParse(
 	char[] source, 
 	String expectedDietUnitToString,
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractComparableTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractComparableTest.java
index ad457cb..c42a532 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractComparableTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractComparableTest.java
@@ -129,7 +129,6 @@ public class AbstractComparableTest extends AbstractRegressionTest {
 		options.put(CompilerOptions.OPTION_ReportMissingDeprecatedAnnotation, CompilerOptions.WARNING);
 		options.put(CompilerOptions.OPTION_ReportIncompleteEnumSwitch, CompilerOptions.WARNING);
 		options.put(CompilerOptions.OPTION_ReportRawTypeReference, CompilerOptions.WARNING);
-		options.put(CompilerOptions.OPTION_StatementsRecovery, CompilerOptions.DISABLED); //TODO temporary option
 		return options;
 	}
 
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java
index 62c2dab..639bd24 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java
@@ -207,7 +207,6 @@ public abstract class AbstractRegressionTest extends AbstractCompilerTest implem
 		defaultOptions.put(CompilerOptions.OPTION_ReportSyntheticAccessEmulation, CompilerOptions.WARNING);
 		defaultOptions.put(CompilerOptions.OPTION_PreserveUnusedLocal, CompilerOptions.PRESERVE);
 		defaultOptions.put(CompilerOptions.OPTION_ReportUnnecessaryElse, CompilerOptions.WARNING );
-		defaultOptions.put(CompilerOptions.OPTION_StatementsRecovery, CompilerOptions.DISABLED); //TODO temporary option
 		return defaultOptions;
 	}
 	protected String[] getDefaultClassPaths() {
@@ -329,7 +328,8 @@ public abstract class AbstractRegressionTest extends AbstractCompilerTest implem
 				getErrorHandlingPolicy(), 
 				options,
 				requestor, 
-				problemFactory);
+				problemFactory,
+				false);
 		batchCompiler.options.produceReferenceInfo = true;
 		try {
 			batchCompiler.compile(Util.compilationUnits(testFiles)); // compile all files together
@@ -420,7 +420,8 @@ public abstract class AbstractRegressionTest extends AbstractCompilerTest implem
 				getErrorHandlingPolicy(),
 				getCompilerOptions(), 
 				requestor, 
-				problemFactory);
+				problemFactory,
+				false);
 		batchCompiler.options.produceReferenceInfo = true;
 		Throwable exception = null;
 		try {
@@ -516,7 +517,9 @@ public abstract class AbstractRegressionTest extends AbstractCompilerTest implem
 				getNameEnvironment(new String[]{}, classLib), 
 				getErrorHandlingPolicy(), 
 				options,
-				requestor, problemFactory);
+				requestor,
+				problemFactory,
+				false);
 		batchCompiler.options.produceReferenceInfo = true;
 		Throwable exception = null;
 		try {
@@ -576,7 +579,8 @@ public abstract class AbstractRegressionTest extends AbstractCompilerTest implem
 				getErrorHandlingPolicy(), 
 				options,
 				requestor, 
-				problemFactory);
+				problemFactory,
+				false);
 		batchCompiler.options.produceReferenceInfo = true;
 		try {
 			batchCompiler.compile(Util.compilationUnits(testFiles)); // compile all files together
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/AbstractCompilerTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/AbstractCompilerTest.java
index e058fa6..f4ca863 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/AbstractCompilerTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/AbstractCompilerTest.java
@@ -216,7 +216,6 @@ public class AbstractCompilerTest extends TestCase {
 			options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_6);
 			options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_6);
 		}
-		options.put(CompilerOptions.OPTION_StatementsRecovery, CompilerOptions.DISABLED); //TODO temporary option
 		return options;
 	}
 
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java
index 5201233..6fc3ea6 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java
@@ -85,7 +85,8 @@ public static void compile(String[] pathsAndContents, Map options, String output
 				errorHandlingPolicy, 
 				options,
 				requestor, 
-				problemFactory);
+				problemFactory,
+				false);
 		batchCompiler.options.produceReferenceInfo = true;
 		batchCompiler.compile(compilationUnits(pathsAndContents)); // compile all files together
 		System.err.print(requestor.problemLog); // problem log empty if no problems
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterRecoveryTest.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterRecoveryTest.java
index 6379e59..1569a75 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterRecoveryTest.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterRecoveryTest.java
@@ -10,15 +10,11 @@
  *******************************************************************************/
 package org.eclipse.jdt.core.tests.dom;
 
-import java.util.Hashtable;
 import java.util.List;
-import java.util.Map;
 
 import junit.framework.Test;
 
 import org.eclipse.jdt.core.ICompilationUnit;
-import org.eclipse.jdt.core.IJavaProject;
-import org.eclipse.jdt.core.JavaCore;
 import org.eclipse.jdt.core.JavaModelException;
 import org.eclipse.jdt.core.dom.AST;
 import org.eclipse.jdt.core.dom.ASTNode;
@@ -33,11 +29,8 @@ import org.eclipse.jdt.core.dom.NumberLiteral;
 import org.eclipse.jdt.core.dom.Statement;
 import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
 import org.eclipse.jdt.core.dom.VariableDeclarationStatement;
-import org.eclipse.jdt.internal.core.JavaModelManager;
 
 public class ASTConverterRecoveryTest extends ConverterTestSetup {
-	private Map oldOptions;
-	
 	public ASTConverterRecoveryTest(String name) {
 		super(name);
 	}
@@ -50,25 +43,9 @@ public class ASTConverterRecoveryTest extends ConverterTestSetup {
 		return buildTestSuite(ASTConverterRecoveryTest.class);
 	}
 	
-	private IJavaProject getConverterProject() {
-		return JavaModelManager.getJavaModelManager().getJavaModel().getJavaProject("Converter");
-	}
-	
 	public void setUpSuite() throws Exception {
 		super.setUpSuite();
 		this.ast = AST.newAST(AST.JLS3);
-		
-		IJavaProject project = getConverterProject();
-		oldOptions = project.getOptions(false);
-		Hashtable newOptions = new Hashtable(oldOptions);
-		newOptions.put(JavaCore.COMPILER_STATEMENTS_RECOVERY, JavaCore.ENABLED);
-		project.setOptions(newOptions);
-	}
-
-	public void tearDownSuite() throws Exception {
-		IJavaProject project = getConverterProject();
-		project.setOptions(oldOptions);
-		super.tearDownSuite();
 	}
 	
 	public void test0001() throws JavaModelException {
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AllJavaModelTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AllJavaModelTests.java
index bef8be1..7739ea6 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AllJavaModelTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AllJavaModelTests.java
@@ -111,7 +111,8 @@ private static Class[] getAllTestClasses() {
 	
 		// Reconciler tests
 		ReconcilerTests.class,
-	
+		ReconcilerStatementsRecoveryTests.class,
+		
 		// Copy and move operation tests
 		CopyMoveElementsTests.class,
 		CopyMoveResourcesTests.class,
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerStatementsRecoveryTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerStatementsRecoveryTests.java
new file mode 100644
index 0000000..f0e7d88
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerStatementsRecoveryTests.java
@@ -0,0 +1,377 @@
+/*******************************************************************************
+ * Copyright (c) 2000, 2005 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.jdt.core.tests.model;
+
+
+import junit.framework.Test;
+
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.jdt.core.*;
+import org.eclipse.jdt.core.compiler.CompilationParticipant;
+import org.eclipse.jdt.core.compiler.IProblem;
+import org.eclipse.jdt.core.compiler.ReconcileContext;
+import org.eclipse.jdt.core.dom.AST;
+import org.eclipse.jdt.internal.core.JavaModelManager;
+import org.eclipse.jdt.internal.core.search.indexing.IndexManager;
+
+public class ReconcilerStatementsRecoveryTests extends ModifyingResourceTests {
+	
+	protected ICompilationUnit workingCopy;
+	protected ProblemRequestor problemRequestor;
+	
+	/* A problem requestor that auto-cancels on first problem */
+	class CancelingProblemRequestor extends ProblemRequestor {
+		IProgressMonitor progressMonitor = new IProgressMonitor() {
+			boolean isCanceled = false;
+			public void beginTask(String name, int totalWork) {}
+			public void done() {}
+			public void internalWorked(double work) {}
+			public boolean isCanceled() {
+				return this.isCanceled;
+			}
+			public void setCanceled(boolean value) {
+				this.isCanceled = value;
+			}
+			public void setTaskName(String name) {}
+			public void subTask(String name) {}
+			public void worked(int work) {}
+		};
+	
+		boolean isCanceling = false;
+		public void acceptProblem(IProblem problem) {
+			if (isCanceling) this.progressMonitor.setCanceled(true); // auto-cancel on first problem
+			super.acceptProblem(problem);
+		}		
+	}
+	
+	class ReconcileParticipant extends CompilationParticipant {
+		int astLevel;
+		boolean resolveBinding;
+		IJavaElementDelta delta;
+		org.eclipse.jdt.core.dom.CompilationUnit ast;
+		ReconcileParticipant() {
+			this(ICompilationUnit.NO_AST, false);
+		}
+		ReconcileParticipant(int astLevel, boolean resolveBinding) {
+			TestCompilationParticipant.PARTICIPANT = this;
+			this.astLevel = astLevel;
+			this.resolveBinding = resolveBinding;
+		}
+		public boolean isActive(IJavaProject project) {
+			return true;
+		}
+		public void reconcile(ReconcileContext context) {
+			this.delta = context.getDelta();
+			try {
+				this.ast = context.getAST(this.astLevel, this.resolveBinding);
+			} catch (JavaModelException e) {
+				assertNull("Unexpected exception", e);
+			}
+		}
+	}
+/**
+ */
+public ReconcilerStatementsRecoveryTests(String name) {
+	super(name);
+}
+// Use this static initializer to specify subset for tests
+// All specified tests which do not belong to the class are skipped...
+static {
+//	JavaModelManager.VERBOSE = true;
+//	org.eclipse.jdt.internal.core.search.BasicSearchEngine.VERBOSE = true;
+//	TESTS_PREFIX = "testIgnoreIfBetterNonAccessibleRule";
+//	TESTS_NAMES = new String[] { "testExternal" };
+//	TESTS_NUMBERS = new int[] { 118823 };
+//	TESTS_RANGE = new int[] { 16, -1 };
+}
+public static Test suite() {
+	return buildTestSuite(ReconcilerStatementsRecoveryTests.class);
+}
+protected void assertProblems(String message, String expected) {
+	assertProblems(message, expected, this.problemRequestor);
+}
+// Expect no error as soon as indexing is finished
+protected void assertNoProblem(char[] source, ICompilationUnit unit) throws InterruptedException, JavaModelException {
+	IndexManager indexManager = JavaModelManager.getJavaModelManager().getIndexManager();
+	if (this.problemRequestor.problemCount > 0) {
+		// If errors then wait for indexes to finish
+		while (indexManager.awaitingJobsCount() > 0) {
+			Thread.sleep(100);
+		}
+		// Reconcile again to see if error goes away
+		this.problemRequestor.initialize(source);
+		unit.getBuffer().setContents(source); // need to set contents again to be sure that following reconcile will be really done
+		unit.reconcile(AST.JLS3,
+			true, // force problem detection to see errors if any
+			null,	// do not use working copy owner to not use working copies in name lookup
+			null);
+		if (this.problemRequestor.problemCount > 0) {
+			assertEquals("Working copy should NOT have any problem!", "", this.problemRequestor.problems.toString());
+		}
+	}
+}
+protected void addClasspathEntries(IClasspathEntry[] entries, boolean enableForbiddenReferences) throws JavaModelException {
+	IJavaProject project = getJavaProject("Reconciler");
+	IClasspathEntry[] oldClasspath = project.getRawClasspath();
+	int oldLength = oldClasspath.length;
+	int length = entries.length;
+	IClasspathEntry[] newClasspath = new IClasspathEntry[oldLength+length];
+	System.arraycopy(oldClasspath, 0, newClasspath, 0, oldLength);
+	System.arraycopy(entries, 0, newClasspath, oldLength, length);
+	project.setRawClasspath(newClasspath, null);
+	
+	if (enableForbiddenReferences) {
+		project.setOption(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE, JavaCore.ERROR);
+	}
+}
+protected void removeClasspathEntries(IClasspathEntry[] entries) throws JavaModelException {
+	IJavaProject project = getJavaProject("Reconciler");
+	IClasspathEntry[] oldClasspath = project.getRawClasspath();
+	int oldLength = oldClasspath.length;
+	int length = entries.length;
+	IClasspathEntry[] newClasspath = new IClasspathEntry[oldLength-length];
+	System.arraycopy(oldClasspath, 0, newClasspath, 0, oldLength-length);
+	project.setRawClasspath(newClasspath, null);
+}
+/**
+ * Setup for the next test.
+ */
+public void setUp() throws Exception {
+	super.setUp();
+	this.problemRequestor =  new ProblemRequestor();
+	this.workingCopy = getCompilationUnit("Reconciler/src/p1/X.java").getWorkingCopy(new WorkingCopyOwner() {}, this.problemRequestor, null);
+	this.problemRequestor.initialize(this.workingCopy.getSource().toCharArray());
+	startDeltas();
+}
+public void setUpSuite() throws Exception {
+	super.setUpSuite();
+
+	// Create project with 1.4 compliance
+	IJavaProject project14 = createJavaProject("Reconciler", new String[] {"src"}, new String[] {"JCL_LIB"}, "bin");
+	createFolder("/Reconciler/src/p1");
+	createFolder("/Reconciler/src/p2");
+	createFile(
+		"/Reconciler/src/p1/X.java", 
+		"package p1;\n" +
+		"import p2.*;\n" +
+		"public class X {\n" +
+		"  public void foo() {\n" +
+		"  }\n" +
+		"}"
+	);
+	project14.setOption(JavaCore.COMPILER_PB_UNUSED_LOCAL, JavaCore.IGNORE);
+	project14.setOption(JavaCore.COMPILER_PB_INVALID_JAVADOC, JavaCore.WARNING);
+
+	// Create project with 1.5 compliance
+	IJavaProject project15 = createJavaProject("Reconciler15", new String[] {"src"}, new String[] {"JCL15_LIB"}, "bin", "1.5");
+	addLibrary(
+		project15, 
+		"lib15.jar", 
+		"lib15src.zip", 
+		new String[] {
+			"java/util/List.java",
+			"package java.util;\n" +
+			"public class List<T> {\n" +
+			"}",
+			"java/util/Stack.java",
+			"package java.util;\n" +
+			"public class Stack<T> {\n" +
+			"}",
+			"java/util/Map.java",
+			"package java.util;\n" +
+			"public interface Map<K,V> {\n" +
+			"}",
+			"java/lang/annotation/Annotation.java",
+			"package java.lang.annotation;\n" +
+			"public interface Annotation {\n" +
+			"}",
+			"java/lang/Deprecated.java",
+			"package java.lang;\n" +
+			"public @interface Deprecated {\n" +
+			"}",
+			"java/lang/SuppressWarnings.java",
+			"package java.lang;\n" +
+			"public @interface SuppressWarnings {\n" +
+			"   String[] value();\n" +
+			"}"
+		}, 
+		JavaCore.VERSION_1_5
+	);
+	project15.setOption(JavaCore.COMPILER_PB_UNUSED_LOCAL, JavaCore.IGNORE);
+}
+//private void setUp15WorkingCopy() throws JavaModelException {
+//	setUp15WorkingCopy("Reconciler15/src/p1/X.java", new WorkingCopyOwner() {});
+//}
+//private void setUp15WorkingCopy(String path, WorkingCopyOwner owner) throws JavaModelException {
+//	String contents = this.workingCopy.getSource();
+//	setUpWorkingCopy(path, contents, owner);
+//}
+//private void setUpWorkingCopy(String path, String contents) throws JavaModelException {
+//	setUpWorkingCopy(path, contents, new WorkingCopyOwner() {});
+//}
+//private void setUpWorkingCopy(String path, String contents, WorkingCopyOwner owner) throws JavaModelException {
+//	this.workingCopy.discardWorkingCopy();
+//	this.workingCopy = getCompilationUnit(path).getWorkingCopy(owner, this.problemRequestor, null);
+//	setWorkingCopyContents(contents);
+//	this.workingCopy.makeConsistent(null);
+//}
+void setWorkingCopyContents(String contents) throws JavaModelException {
+	this.workingCopy.getBuffer().setContents(contents);
+	this.problemRequestor.initialize(contents.toCharArray());
+}
+/**
+ * Cleanup after the previous test.
+ */
+public void tearDown() throws Exception {
+	TestCompilationParticipant.PARTICIPANT = null;
+	if (this.workingCopy != null) {
+		this.workingCopy.discardWorkingCopy();
+	}
+	stopDeltas();
+	super.tearDown();
+}
+public void tearDownSuite() throws Exception {
+	deleteProject("Reconciler");
+	deleteProject("Reconciler15");
+	super.tearDownSuite();
+}
+/*
+ * No ast and no statements recovery
+ */
+public void testStatementsRecovery01() throws CoreException {
+	// Introduce syntax error
+	setWorkingCopyContents(
+		"package p1;\n" +
+		"import p2.*;\n" +
+		"public class X {\n" +
+		"  public void foo() {\n" +
+		"     UnknownType name\n" +
+		"  }\n" +
+		"}");
+	this.workingCopy.reconcile(ICompilationUnit.NO_AST, false, false, null, null);
+	assertDeltas(
+		"Unexpected delta after syntax error", 
+		"[Working copy] X.java[*]: {CONTENT | FINE GRAINED}"
+	);
+	assertProblems(
+		"Unexpected problems",
+		"----------\n" + 
+		"1. ERROR in /Reconciler/src/p1/X.java (at line 5)\n" + 
+		"	UnknownType name\n" + 
+		"	            ^^^^\n" + 
+		"Syntax error, insert \";\" to complete BlockStatements\n" + 
+		"----------\n"
+	);
+	
+	clearDeltas();
+}
+/*
+ * Ast and no statements recovery
+ */
+public void testStatementsRecovery02() throws CoreException {
+	// Introduce syntax error
+	setWorkingCopyContents(
+		"package p1;\n" +
+		"import p2.*;\n" +
+		"public class X {\n" +
+		"  public void foo() {\n" +
+		"     UnknownType name\n" +
+		"  }\n" +
+		"}");
+	this.workingCopy.reconcile(AST.JLS3, false, false, null, null);
+	assertDeltas(
+		"Unexpected delta after syntax error", 
+		"[Working copy] X.java[*]: {CONTENT | FINE GRAINED | AST AFFECTED}"
+	);
+	assertProblems(
+		"Unexpected problems",
+		"----------\n" + 
+		"1. ERROR in /Reconciler/src/p1/X.java (at line 5)\n" + 
+		"	UnknownType name\n" + 
+		"	            ^^^^\n" + 
+		"Syntax error, insert \";\" to complete BlockStatements\n" + 
+		"----------\n"
+	);
+	
+	clearDeltas();
+}
+/*
+ * No ast, statements recovery
+ */
+public void testStatementsRecovery03() throws CoreException {
+	// Introduce syntax error
+	setWorkingCopyContents(
+		"package p1;\n" +
+		"import p2.*;\n" +
+		"public class X {\n" +
+		"  public void foo() {\n" +
+		"     UnknownType name\n" +
+		"  }\n" +
+		"}");
+	this.workingCopy.reconcile(ICompilationUnit.NO_AST, false, true, null, null);
+	assertDeltas(
+		"Unexpected delta after syntax error", 
+		"[Working copy] X.java[*]: {CONTENT | FINE GRAINED}"
+	);
+	assertProblems(
+		"Unexpected problems",
+		"----------\n" + 
+		"1. ERROR in /Reconciler/src/p1/X.java (at line 5)\n" + 
+		"	UnknownType name\n" + 
+		"	^^^^^^^^^^^\n" + 
+		"UnknownType cannot be resolved to a type\n" + 
+		"----------\n" + 
+		"2. ERROR in /Reconciler/src/p1/X.java (at line 5)\n" + 
+		"	UnknownType name\n" + 
+		"	            ^^^^\n" + 
+		"Syntax error, insert \";\" to complete BlockStatements\n" + 
+		"----------\n"
+	);
+	
+	clearDeltas();
+}
+/*
+ * Ast, statements recovery
+ */
+public void testStatementsRecovery04() throws CoreException {
+	// Introduce syntax error
+	setWorkingCopyContents(
+		"package p1;\n" +
+		"import p2.*;\n" +
+		"public class X {\n" +
+		"  public void foo() {\n" +
+		"     UnknownType name\n" +
+		"  }\n" +
+		"}");
+	this.workingCopy.reconcile(AST.JLS3, false, true, null, null);
+	assertDeltas(
+		"Unexpected delta after syntax error", 
+		"[Working copy] X.java[*]: {CONTENT | FINE GRAINED | AST AFFECTED}"
+	);
+	assertProblems(
+		"Unexpected problems",
+		"----------\n" + 
+		"1. ERROR in /Reconciler/src/p1/X.java (at line 5)\n" + 
+		"	UnknownType name\n" + 
+		"	^^^^^^^^^^^\n" + 
+		"UnknownType cannot be resolved to a type\n" + 
+		"----------\n" + 
+		"2. ERROR in /Reconciler/src/p1/X.java (at line 5)\n" + 
+		"	UnknownType name\n" + 
+		"	            ^^^^\n" + 
+		"Syntax error, insert \";\" to complete BlockStatements\n" + 
+		"----------\n"
+	);
+	
+	clearDeltas();
+}
+}
diff --git a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java
index 4d02d4e..ef3eb44 100644
--- a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java
+++ b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java
@@ -2816,13 +2816,13 @@ public class Main implements ProblemSeverities, SuffixConstants {
 				this.options,
 				getBatchRequestor(),
 				getProblemFactory(),
-				this.out);
+				this.out,
+				false);
 		this.compilerOptions = batchCompiler.options;
 
 		// set the non-externally configurable options.
 		this.compilerOptions.verbose = this.verbose;
 		this.compilerOptions.produceReferenceInfo = this.produceRefInfo;
-		this.compilerOptions.performStatementsRecovery = false;
 		try {
 			this.logger.startLoggingSources();
 			batchCompiler.compile(getCompilationUnits());
diff --git a/org.eclipse.jdt.core/buildnotes_jdt-core.html b/org.eclipse.jdt.core/buildnotes_jdt-core.html
index 3fda56f..7a06467 100644
--- a/org.eclipse.jdt.core/buildnotes_jdt-core.html
+++ b/org.eclipse.jdt.core/buildnotes_jdt-core.html
@@ -56,10 +56,13 @@ What's new in this drop</h2>
 <li>Added marker attribute "categoryId" onto Java problem markers.
 <li>Added API <code>WorkingCopyOwner#newWorkingCopy(String,IClasspathEntry[],IProblemRequestor,IProgressMonitor)</code>
      for editing compilation units outside the workspace.</li>
+<li>The temporary option JavaCore.COMPILER_STATEMENTS_RECOVERY is removed</li>
 </ul>
 
 <h3>Problem Reports Fixed</h3>
-<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=125675">125675</a>
+<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=125641">125641</a>
+Problems enabling AST with recovery
+<br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=125675">125675</a>
 @category not reflected in outliner in live fashion
 <br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=125570">125570</a>
 [1.5][compiler] Named inner inner classes have illegal names
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java
index 30934c4..48db46e 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java
@@ -88,9 +88,10 @@ public class Compiler implements ITypeRequestor, ProblemSeverities {
 			IErrorHandlingPolicy policy,
 			Map settings,
 			final ICompilerRequestor requestor,
-			IProblemFactory problemFactory) {
+			IProblemFactory problemFactory,
+			boolean statementsRecovery) {
 		this(environment, policy, settings,	requestor, problemFactory, 
-				null, false, false, false, false); // all defaults
+				null, false, false, false, statementsRecovery); // all defaults
 	}
 	
 	/**
@@ -137,9 +138,10 @@ public class Compiler implements ITypeRequestor, ProblemSeverities {
 			Map settings,
 			final ICompilerRequestor requestor,
 			IProblemFactory problemFactory,
-			PrintWriter out) {
+			PrintWriter out,
+			boolean statementsRecovery) {
 		this(environment, policy, settings,	requestor, problemFactory, out, 
-				false, false, false, false); // all defaults
+				false, false, false, statementsRecovery); // all defaults
 	}
 	
 	/**
@@ -198,7 +200,7 @@ public class Compiler implements ITypeRequestor, ProblemSeverities {
 			boolean statementsRecovery) {
 		this(environment, policy, settings,	requestor, problemFactory, 
 				null, // default 
-				parseLiteralExpressionsAsConstants, storeAnnotations, statementsRecovery, true);
+				parseLiteralExpressionsAsConstants, storeAnnotations, true, statementsRecovery);
 	}
 
 	/**
@@ -247,12 +249,13 @@ public class Compiler implements ITypeRequestor, ProblemSeverities {
 	 *		This parameter is used to tell the compiler to store annotations on 
 	 *		type bindings, or not.
 	 *
-	 *	@param statementsRecovery <code>boolean</code>
+	 *  @param flag <code>boolean</code>
+	 *		Set to true if and only if the following boolean parameters are significant:
+	 * 		<code>parseLiteralExpressionsAsConstants</code>, <code>storeAnnotations</code>.
+	 *
+	 * @param statementsRecovery <code>boolean</code>
 	 *		This parameter is used to tell the compiler to perform syntax error
 	 *      recovery on statements, or not. 
-	 *
-	 *	@param flag <code>boolean</code>
-	 *		Set to true if and only if the other boolean parameters are significant.
 	 */
 	private Compiler(
 			INameEnvironment environment,
@@ -263,17 +266,15 @@ public class Compiler implements ITypeRequestor, ProblemSeverities {
 			PrintWriter out,
 			boolean parseLiteralExpressionsAsConstants,
 			boolean storeAnnotations,
-			boolean statementsRecovery,
-			boolean flag) {
+			boolean flag,
+			boolean statementsRecovery) {
 
 		// create a problem handler given a handling policy
 		this.options = new CompilerOptions(settings);
+		this.options.performStatementsRecovery = statementsRecovery;
 		if (flag) { // boolean parameters are significant, pass them down
 			this.options.parseLiteralExpressionsAsConstants = parseLiteralExpressionsAsConstants;
 			this.options.storeAnnotations = storeAnnotations;
-			this.options.performStatementsRecovery =
-				statementsRecovery &&
-				this.options.performStatementsRecovery;// TODO temporary code to take into account the temporary JavaCore options
 		}
 		
 		// wrap requestor in DebugRequestor if one is specified
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java
index 80a335e..732daf4 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java
@@ -113,9 +113,6 @@ public class CompilerOptions {
 	/* should surface ??? */
 	public static final String OPTION_PrivateConstructorAccess = "org.eclipse.jdt.core.compiler.codegen.constructorAccessEmulation"; //$NON-NLS-1$
 
-	//TODO temporary option
-	public static final String OPTION_StatementsRecovery = "org.eclipse.jdt.core.compiler.statementsRecovery"; //$NON-NLS-1$
-
 	/**
 	 * Possible values for configurable options
 	 */
@@ -727,13 +724,6 @@ public class CompilerOptions {
 				this.reportMissingJavadocCommentsOverriding = false;
 			}
 		}
-		if ((optionValue = optionsMap.get(OPTION_StatementsRecovery)) != null) {
-			if (ENABLED.equals(optionValue)) {
-				this.performStatementsRecovery = true;
-			} else if (DISABLED.equals(optionValue)) {
-				this.performStatementsRecovery = false;
-			}
-		}
 	}
 
 	public String toString() {
diff --git a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetCompiler.java b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetCompiler.java
index 2896218..1ae5214 100644
--- a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetCompiler.java
+++ b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetCompiler.java
@@ -39,7 +39,7 @@ public class CodeSnippetCompiler extends Compiler {
 		EvaluationContext evaluationContext,
 		int codeSnippetStart,
 		int codeSnippetEnd) {
-		super(environment, policy, settings, requestor, problemFactory);
+		super(environment, policy, settings, requestor, problemFactory, true);
 		this.parser =
 			new CodeSnippetParser(
 				this.problemReporter,
diff --git a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetEvaluator.java b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetEvaluator.java
index 854d920..56d2074 100644
--- a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetEvaluator.java
+++ b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetEvaluator.java
@@ -155,7 +155,8 @@ Compiler getCompiler(ICompilerRequestor compilerRequestor) {
 			DefaultErrorHandlingPolicies.exitAfterAllProblems(), 
 			this.options, 
 			compilerRequestor, 
-			this.problemFactory);
+			this.problemFactory,
+			true);
 	}
 	return compiler;
 }
diff --git a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/Evaluator.java b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/Evaluator.java
index fa71047..6a6a7b8 100644
--- a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/Evaluator.java
+++ b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/Evaluator.java
@@ -164,7 +164,8 @@ Compiler getCompiler(ICompilerRequestor compilerRequestor) {
 		DefaultErrorHandlingPolicies.exitAfterAllProblems(), 
 		this.options, 
 		compilerRequestor, 
-		this.problemFactory);
+		this.problemFactory,
+		true);
 }
 /**
  * Builds and returns the source for the current compilation unit.
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java
index 7fb6b5c..d782a6f 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java
@@ -657,13 +657,6 @@ public final class JavaCore extends Plugin {
 	/**
 	 * Possible  configurable option ID.
 	 * @see #getDefaultOptions()
-	 * @since 3.2
-	 */
-	//TODO It is a temporary option. It will removed before 3.2 release
-	public static final String COMPILER_STATEMENTS_RECOVERY = PLUGIN_ID + ".compiler.statementsRecovery"; //$NON-NLS-1$
-	/**
-	 * Possible  configurable option ID.
-	 * @see #getDefaultOptions()
 	 */
 	public static final String CORE_JAVA_BUILD_ORDER = PLUGIN_ID + ".computeJavaBuildOrder"; //$NON-NLS-1$
 	/**
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ASTHolderCUInfo.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ASTHolderCUInfo.java
index 0101f87..1bf7abc 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ASTHolderCUInfo.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ASTHolderCUInfo.java
@@ -17,6 +17,7 @@ import org.eclipse.jdt.core.dom.CompilationUnit;
 public class ASTHolderCUInfo extends CompilationUnitElementInfo {
 	int astLevel;
 	boolean resolveBindings;
+	boolean statementsRecovery;
 	HashMap problems = null;
 	CompilationUnit ast;
 }
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java
index 065e1bd..d5f118d 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java
@@ -113,15 +113,18 @@ protected boolean buildStructure(OpenableElementInfo info, final IProgressMonito
 
 	boolean createAST;
 	boolean resolveBindings;
+	boolean statementsRecovery;
 	HashMap problems;
 	if (info instanceof ASTHolderCUInfo) {
 		ASTHolderCUInfo astHolder = (ASTHolderCUInfo) info;
 		createAST = astHolder.astLevel != NO_AST;
 		resolveBindings = astHolder.resolveBindings;
+		statementsRecovery = astHolder.statementsRecovery;
 		problems = astHolder.problems;
 	} else {
 		createAST = false;
 		resolveBindings = false;
+		statementsRecovery = false;
 		problems = null;
 	}
 	
@@ -139,6 +142,8 @@ protected boolean buildStructure(OpenableElementInfo info, final IProgressMonito
 		true/*report local declarations*/,
 		!createAST /*optimize string literals only if not creating a DOM AST*/);
 	parser.reportOnlyOneSyntaxError = !computeProblems;
+	parser.setStatementsRecovery(statementsRecovery);
+	
 	if (!computeProblems && !resolveBindings && !createAST) // disable javadoc parsing if not computing problems, not resolving and not creating ast
 		parser.javadocParser.checkDocComment = false;
 	requestor.parser = parser;
@@ -972,9 +977,9 @@ public boolean isWorkingCopy() {
  * @see IOpenable#makeConsistent(IProgressMonitor)
  */
 public void makeConsistent(IProgressMonitor monitor) throws JavaModelException {
-	makeConsistent(NO_AST, false/*don't resolve bindings*/, null/*don't collect problems but report them*/, monitor);
+	makeConsistent(NO_AST, false/*don't resolve bindings*/, false /* don't perform statements recovery */, null/*don't collect problems but report them*/, monitor);
 }
-public org.eclipse.jdt.core.dom.CompilationUnit makeConsistent(int astLevel, boolean resolveBindings, HashMap problems, IProgressMonitor monitor) throws JavaModelException {
+public org.eclipse.jdt.core.dom.CompilationUnit makeConsistent(int astLevel, boolean resolveBindings, boolean statementsRecovery, HashMap problems, IProgressMonitor monitor) throws JavaModelException {
 	if (isConsistent()) return null;
 		
 	// create a new info and make it the current info
@@ -983,6 +988,7 @@ public org.eclipse.jdt.core.dom.CompilationUnit makeConsistent(int astLevel, boo
 		ASTHolderCUInfo info = new ASTHolderCUInfo();
 		info.astLevel = astLevel;
 		info.resolveBindings = resolveBindings;
+		info.statementsRecovery = statementsRecovery;
 		info.problems = problems;
 		openWhenClosed(info, monitor);
 		org.eclipse.jdt.core.dom.CompilationUnit result = info.ast;
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitVisitor.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitVisitor.java
index f61263f..7cf5cde 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitVisitor.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitVisitor.java
@@ -74,7 +74,7 @@ public class CompilationUnitVisitor extends Compiler {
 		ICompilerRequestor requestor,
 		IProblemFactory problemFactory) {
 
-		super(environment, policy, settings, requestor, problemFactory);
+		super(environment, policy, settings, requestor, problemFactory, true);
 	}
 
 	/**
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaCorePreferenceInitializer.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaCorePreferenceInitializer.java
index 8032bf5..fe1020b 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaCorePreferenceInitializer.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaCorePreferenceInitializer.java
@@ -43,7 +43,6 @@ public class JavaCorePreferenceInitializer extends AbstractPreferenceInitializer
 		defaultOptionsMap.put(JavaCore.COMPILER_TASK_CASE_SENSITIVE, JavaCore.ENABLED);
 		defaultOptionsMap.put(JavaCore.COMPILER_DOC_COMMENT_SUPPORT, JavaCore.ENABLED);
 		defaultOptionsMap.put(JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE, JavaCore.ERROR);
-		defaultOptionsMap.put(JavaCore.COMPILER_STATEMENTS_RECOVERY, JavaCore.DISABLED); //TODO It is a temporary option
 		
 		// Builder settings
 		defaultOptionsMap.put(JavaCore.CORE_JAVA_BUILD_RESOURCE_COPY_FILTER, ""); //$NON-NLS-1$
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ReconcileWorkingCopyOperation.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ReconcileWorkingCopyOperation.java
index 847b3ed..d32a31d 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ReconcileWorkingCopyOperation.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ReconcileWorkingCopyOperation.java
@@ -128,7 +128,7 @@ public class ReconcileWorkingCopyOperation extends JavaModelOperation {
 		if (!workingCopy.isConsistent()) {
 			// make working copy consistent
 			if (this.problems == null) this.problems = new HashMap();
-			this.ast = workingCopy.makeConsistent(this.astLevel, this.resolveBindings, this.problems, this.progressMonitor);
+			this.ast = workingCopy.makeConsistent(this.astLevel, this.resolveBindings, this.enableStatementsRecovery, this.problems, this.progressMonitor);
 			this.deltaBuilder.buildDeltas();
 			if (this.ast != null && this.deltaBuilder.delta != null)
 				this.deltaBuilder.delta.changedAST(this.ast);
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java
index f4dffaa..2813882 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java
@@ -410,12 +410,12 @@ protected Compiler newCompiler() {
 		DefaultErrorHandlingPolicies.proceedWithAllProblems(),
 		projectOptions,
 		this,
-		ProblemFactory.getProblemFactory(Locale.getDefault()));
+		ProblemFactory.getProblemFactory(Locale.getDefault()),
+		true);
 	CompilerOptions options = newCompiler.options;
 
 	// enable the compiler reference info support
 	options.produceReferenceInfo = true;
-	options.performStatementsRecovery = false;
 	
 	org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment env = newCompiler.lookupEnvironment;
 	synchronized (env) {

commit a2380c5dc7487191ba2f073fdb6868b729cb0c57
Author: Jayaprakash Arthanareeswaran <jarthana@in.ibm.com>
Date:   Thu Oct 17 18:22:50 2013 +0530

    First batch of fixes for Bug 419664 - [1.8] A couple of issues with
    Eclipse implementation of Java 8 support.

-	-	org.eclipse.jdt.compiler.apt.tests/lib/apttestprocessors.jar
6	2	org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/Java8ElementProcessor.java
1	1	org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ElementImpl.java
2	1	org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ErrorTypeElement.java
2	1	org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ErrorTypeImpl.java
3	3	org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/Factory.java
2	1	org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/NoTypeImpl.java
2	2	org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypeMirrorImpl.java
diff --git a/org.eclipse.jdt.compiler.apt.tests/lib/apttestprocessors.jar b/org.eclipse.jdt.compiler.apt.tests/lib/apttestprocessors.jar
index c64d65c..9bf501c 100644
Binary files a/org.eclipse.jdt.compiler.apt.tests/lib/apttestprocessors.jar and b/org.eclipse.jdt.compiler.apt.tests/lib/apttestprocessors.jar differ
diff --git a/org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/Java8ElementProcessor.java b/org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/Java8ElementProcessor.java
index 2d5ac61..293524f 100644
--- a/org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/Java8ElementProcessor.java
+++ b/org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/Java8ElementProcessor.java
@@ -250,7 +250,7 @@ public class Java8ElementProcessor extends BaseProcessor {
 		assertNotNull("Java8ElementProcessor#examineSE8Specifics: Element for method noAnnotationHere should not be null", typeMirror);
 		Type annot = typeMirror.getAnnotation(Type.class);
 		assertNull("Annotation should not be present", annot);
-		Annotation[] annots = typeMirror.getAnnotationsByType(Type.class);
+		Type[] annots = typeMirror.getAnnotationsByType(Type.class);
 		assertEquals("Annotation is not empty list", 0, annots.length);
 	}
 	
@@ -600,6 +600,10 @@ public class Java8ElementProcessor extends BaseProcessor {
 		typeMirror = constr.getReceiverType();
 		assertNotNull("TypeMirror should not be null", typeMirror);
 		assertSame("Should be no type", TypeKind.NONE, typeMirror.getKind());
+
+		Type[] annotations = typeMirror.getAnnotationsByType(Type.class);
+		assertEquals("Annotations arrays should be empty", 0, annotations.length);
+
 		type = (ExecutableType) constr.asType();
 		typeMirror = type.getReceiverType();
 		assertNotNull("TypeMirror should not be null", typeMirror);
@@ -853,7 +857,7 @@ public class Java8ElementProcessor extends BaseProcessor {
 		assertSame(msg + "Invalid annotation type" , Type.class, annot.annotationType());
 		assertEquals(msg + "Invalid annotation value", value, annot.value());
 		
-		Annotation[] annots = construct.getAnnotationsByType(Type.class);
+		Type[] annots = construct.getAnnotationsByType(Type.class);
 		assertEquals(msg + "Incorrect no of annotations", 1, annots.length);
 		annot = (Type) annots[0];
 		assertSame(msg + "Invalid annotation type" , Type.class, annots[0].annotationType());
diff --git a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ElementImpl.java b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ElementImpl.java
index 986c2e3..be19675 100644
--- a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ElementImpl.java
+++ b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ElementImpl.java
@@ -89,7 +89,7 @@ public abstract class ElementImpl
 			return result1;
 		
 		@SuppressWarnings("unchecked")
-		A [] result = (A[]) Array.newInstance(result1[0].getClass(), result1.length + result2.length);
+		A [] result = (A[]) Array.newInstance(annotationType, result1.length + result2.length);
 		
 		System.arraycopy(result1, 0, result, 0, result1.length);
 		System.arraycopy(result2, 0, result, result1.length, result2.length);
diff --git a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ErrorTypeElement.java b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ErrorTypeElement.java
index b6be38e..a4c836a 100644
--- a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ErrorTypeElement.java
+++ b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ErrorTypeElement.java
@@ -16,6 +16,7 @@
 package org.eclipse.jdt.internal.compiler.apt.model;
 
 import java.lang.annotation.Annotation;
+import java.lang.reflect.Array;
 import java.util.Collections;
 import java.util.List;
 import java.util.Set;
@@ -116,7 +117,7 @@ public class ErrorTypeElement extends TypeElementImpl {
 	
 	@SuppressWarnings("unchecked")
 	public <A extends Annotation> A[] getAnnotationsByType(Class<A> annotationType) {
-		return (A[]) Factory.EMPTY_ANNOTATIONS;
+		return (A[]) Array.newInstance(annotationType, 0);
 	}
 
 
diff --git a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ErrorTypeImpl.java b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ErrorTypeImpl.java
index f7d7367..3b95bbc 100644
--- a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ErrorTypeImpl.java
+++ b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ErrorTypeImpl.java
@@ -15,6 +15,7 @@
 package org.eclipse.jdt.internal.compiler.apt.model;
 
 import java.lang.annotation.Annotation;
+import java.lang.reflect.Array;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -101,7 +102,7 @@ public class ErrorTypeImpl extends DeclaredTypeImpl implements ErrorType {
 
 	@SuppressWarnings("unchecked")
 	public <A extends Annotation> A[] getAnnotationsByType(Class<A> annotationType) {
-		return (A[]) Factory.EMPTY_ANNOTATIONS;
+		return (A[]) Array.newInstance(annotationType, 0);
 	}
 
 	/* (non-Javadoc)
diff --git a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/Factory.java b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/Factory.java
index cc7137a..86c570d 100644
--- a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/Factory.java
+++ b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/Factory.java
@@ -74,7 +74,6 @@ public class Factory {
 	public static final Short DUMMY_SHORT = 0;
 
 	private final BaseProcessingEnvImpl _env;
-	public static Annotation[] EMPTY_ANNOTATIONS = new Annotation[0];
 	public static List<? extends AnnotationMirror> EMPTY_ANNOTATION_MIRRORS = Collections.emptyList();
 	
 	/**
@@ -103,7 +102,7 @@ public class Factory {
 	@SuppressWarnings("unchecked") // for the cast to A
 	public <A extends Annotation> A[] getAnnotationsByType(AnnotationBinding[] annoInstances, Class<A> annotationClass) {
 		A[] result = getAnnotations(annoInstances, annotationClass, false);
-		return result == null ? (A[]) EMPTY_ANNOTATIONS : result;
+		return result == null ? (A[]) Array.newInstance(annotationClass, 0) : result;
 	}
 	
 	
@@ -131,7 +130,8 @@ public class Factory {
 				if (justTheFirst) break;
 			}
 		}
-		return list.size() > 0 ? (A[]) list.toArray(new Annotation[list.size()]) :  null;
+		A [] result = (A[]) Array.newInstance(annotationClass, list.size());
+		return list.size() > 0 ? (A[]) list.toArray(result) :  null;
 	}
 
 	private AnnotationMirrorImpl createAnnotationMirror(String annoTypeName, AnnotationBinding annoInstance) {
diff --git a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/NoTypeImpl.java b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/NoTypeImpl.java
index 39b1f24..250a94d 100644
--- a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/NoTypeImpl.java
+++ b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/NoTypeImpl.java
@@ -17,6 +17,7 @@
 package org.eclipse.jdt.internal.compiler.apt.model;
 
 import java.lang.annotation.Annotation;
+import java.lang.reflect.Array;
 import java.util.List;
 
 import javax.lang.model.element.AnnotationMirror;
@@ -85,7 +86,7 @@ public class NoTypeImpl implements NoType, NullType
 
 	@SuppressWarnings("unchecked")
 	public <A extends Annotation> A[] getAnnotationsByType(Class<A> annotationType) {
-		return (A[]) Factory.EMPTY_ANNOTATIONS;
+		return (A[]) Array.newInstance(annotationType, 0);
 	}
 
 }
diff --git a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypeMirrorImpl.java b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypeMirrorImpl.java
index d9eda0b..677f4a9 100644
--- a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypeMirrorImpl.java
+++ b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypeMirrorImpl.java
@@ -143,7 +143,7 @@ public class TypeMirrorImpl implements TypeMirror {
 	public <A extends Annotation> A[] getAnnotationsByType(Class<A> annotationType) {
 		
 		if (_env == null)
-			return (A[]) Factory.EMPTY_ANNOTATIONS;
+			return (A[]) Array.newInstance(annotationType, 0);
 		
 		AnnotationBinding [] packedAnnotations = getPackedAnnotationBindings();
 		A [] result1 = _env.getFactory().getAnnotationsByType(packedAnnotations, annotationType);
@@ -154,7 +154,7 @@ public class TypeMirrorImpl implements TypeMirror {
 		if (result2.length == 0)
 			return result1;
 		
-		A [] result = (A[]) Array.newInstance(result1[0].getClass(), result1.length + result2.length);
+		A [] result = (A[]) Array.newInstance(annotationType, result1.length + result2.length);
 		
 		System.arraycopy(result1, 0, result, 0, result1.length);
 		System.arraycopy(result2, 0, result, result1.length, result2.length);

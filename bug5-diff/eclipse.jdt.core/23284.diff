commit 17b5a42a2fa15b8003060f38130af8e988ed72fa
Author: Jim Desrivieres <jdesrivieres>
Date:   Tue Sep 10 14:02:49 2002 +0000

    Add API for extra array dimensions in method and single variable declarations (bug 23284)

5	3	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java
14	0	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java
68	4	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java
65	3	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleVariableDeclaration.java
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java
index ca69525..c0c1db8 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2001 International Business Machines Corp. and others.
+ * Copyright (c) 2001, 2002 International Business Machines Corp. and others.
  * All rights reserved. This program and the accompanying materials 
  * are made available under the terms of the Common Public License v0.5 
  * which accompanies this distribution, and is available at
@@ -674,7 +674,8 @@ public final class AST {
 	 * Creates an unparented method declaration node owned by this AST.
 	 * By default, the declaration is for a method of an unspecified, but 
 	 * legal, name; no modifiers; no Javadoc comment; no parameters; return
-	 * type void; no thrown exceptions; and no body (as opposed to an empty
+	 * type void; no array dimensions after the parameters; no thrown 
+	 * exceptions; and no body (as opposed to an empty
 	 * body).
 	 * <p>
 	 * To create a constructor, use this method and then call
@@ -693,7 +694,8 @@ public final class AST {
 	/**
 	 * Creates an unparented single variable declaration node owned by this AST.
 	 * By default, the declaration is for a variable with an unspecified, but 
-	 * legal, name and type; no modifiers; and no initializer.
+	 * legal, name and type; no modifiers; no array dimensions after the
+	 * variable; and no initializer.
 	 * 
 	 * @return a new unparented single variable declaration node
 	 */
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java
index d8a5cb9..6e1775a 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java
@@ -883,6 +883,10 @@ public class ASTMatcher {
 	 * other object is a node of the same type with structurally isomorphic
 	 * child subtrees. Subclasses may override this method as needed.
 	 * </p>
+	 * <p>
+	 * Note that extra array dimensions are ignored, as they really only
+	 * affect how the node is rendered as text.
+	 * </p>
 	 * 
 	 * @param node the node
 	 * @param other the other object, or <code>null</code>
@@ -895,6 +899,7 @@ public class ASTMatcher {
 			return false;
 		}
 		MethodDeclaration o = (MethodDeclaration) other;
+		// n.b. ignore differences in extraArrayDimensions
 		return (
 			(node.getModifiers() == o.getModifiers())
 				&& (node.isConstructor() == o.isConstructor())
@@ -1185,6 +1190,10 @@ public class ASTMatcher {
 	 * other object is a node of the same type with structurally isomorphic
 	 * child subtrees. Subclasses may override this method as needed.
 	 * </p>
+	 * <p>
+	 * Note that extra array dimensions are ignored, as they really only
+	 * affect how the node is rendered as text.
+	 * </p>
 	 * 
 	 * @param node the node
 	 * @param other the other object, or <code>null</code>
@@ -1197,6 +1206,7 @@ public class ASTMatcher {
 			return false;
 		}
 		SingleVariableDeclaration o = (SingleVariableDeclaration) other;
+		// n.b. ignore differences in extraArrayDimensions
 		return (
 			(node.getModifiers() == o.getModifiers())
 				&& safeSubtreeMatch(node.getType(), o.getType())
@@ -1542,6 +1552,10 @@ public class ASTMatcher {
 	 * other object is a node of the same type with structurally isomorphic
 	 * child subtrees. Subclasses may override this method as needed.
 	 * </p>
+	 * <p>
+	 * Note that extra array dimensions are compared since they are an
+	 * important part of the type of the variable.
+	 * </p>
 	 * 
 	 * @param node the node
 	 * @param other the other object, or <code>null</code>
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java
index c50fb7a..c2697bc 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2001 International Business Machines Corp. and others.
+ * Copyright (c) 2001, 2002 International Business Machines Corp. and others.
  * All rights reserved. This program and the accompanying materials 
  * are made available under the terms of the Common Public License v0.5 
  * which accompanies this distribution, and is available at
@@ -99,6 +99,16 @@ public class MethodDeclaration extends BodyDeclaration {
 	private Type returnType = null;
 	
 	/**
+	 * The number of array dimensions that appear after the parameter, rather
+	 * than after the return type itself; meaningless (and should be ignored)
+	 * if the type is not an array type or if it exceeds the number of 
+	 * dimensions in the array type; defaults to 0.
+	 * 
+	 * @since 2.1
+	 */
+	private int displacedArrayDimensions = 0;
+
+	/**
 	 * The list of thrown exception names (element type: <code>Name</code>).
 	 * Defaults to an empty list.
 	 */
@@ -115,8 +125,8 @@ public class MethodDeclaration extends BodyDeclaration {
 	 * Creates a new AST node for a method declaration owned 
 	 * by the given AST. By default, the declaration is for a method of an
 	 * unspecified, but legal, name; no modifiers; no javadoc; no parameters; 
-	 * void return type; no thrown exceptions; and no body (as opposed to an
-	 * empty body).
+	 * void return type; no array dimensions after the parameters; no thrown
+	 * exceptions; and no body (as opposed to an empty body).
 	 * <p>
 	 * N.B. This constructor is package-private; all subclasses must be 
 	 * declared in the same package; clients are unable to declare 
@@ -147,6 +157,7 @@ public class MethodDeclaration extends BodyDeclaration {
 		result.setConstructor(isConstructor());
 		result.setReturnType(
 			(Type) ASTNode.copySubtree(target, getReturnType()));
+		result.setExtraDimensions(getExtraDimensions());
 		result.setName((SimpleName) getName().clone(target));
 		result.parameters().addAll(
 			ASTNode.copySubtrees(target, parameters()));
@@ -339,6 +350,59 @@ public class MethodDeclaration extends BodyDeclaration {
 	}
 
 	/**
+	 * Returns the number of array dimensions that appear after the parameters
+	 * instead of after the return type.
+	 * <p>
+	 * For example, <code>int[][][] foo()</code> has no array dimensions after
+	 * the parameters; <code>int[] foo()[][]</code> has 2 array dimensions 
+	 * after the parameters. In both cases, the return type is an array type
+	 * with 3 dimensions.
+	 * </p>
+	 * <p>
+	 * The value is meaningless (and should be ignored) if the type is not an
+	 * array type or if it exceeds the number of dimensions in the array type.
+	 * The safe default value is 0; this represents the preferred syntax of the
+	 * construct where all dimensions appear as part of the type.
+	 * </p>
+	 * 
+	 * @return the number of array dimensions included after the 
+	 * parameters instead of after the return type
+	 * @since 2.1
+	 */ 
+	public int getExtraDimensions() {
+		return displacedArrayDimensions;
+	}
+
+	/**
+	 * Sets the number of array dimensions that appear after the parameters
+	 * instead of after the return type.
+	 * <p>
+	 * For example, <code>int[][][] foo()</code> has no array dimensions after
+	 * the parameters; <code>int[] foo()[][]</code> has 2 array dimensions 
+	 * after the parameters. In both cases, the return type is an array type 
+	 * with 3 dimensions.
+	 * </p>
+	 * <p>
+	 * The value is meaningless (and should be ignored) if the type is not an
+	 * array type or if it exceeds the number of dimensions in the array type.
+	 * The safe default value is 0; this represents the preferred syntax of the
+	 * construct where all dimensions appear as part of the type.
+	 * </p>
+	 * 
+	 * @param dimensions the number of array dimensions after the parameters 
+	 * @exception IllegalArgumentException if the number of dimensions is
+	 *    negative
+	 * @since 2.1
+	 */ 
+	public void setExtraDimensions(int dimensions) {
+		if (dimensions < 0) {
+			throw new IllegalArgumentException();
+		}
+		modifying();
+		this.displacedArrayDimensions = dimensions;
+	}
+
+	/**
 	 * Returns the body of this method declaration, or <code>null</code> if 
 	 * this method has <b>no</b> body.
 	 * <p>
@@ -419,7 +483,7 @@ public class MethodDeclaration extends BodyDeclaration {
 	 * Method declared on ASTNode.
 	 */
 	int memSize() {
-		return super.memSize() + 7 * 4;
+		return super.memSize() + 8 * 4;
 	}
 	
 	/* (omit javadoc for this method)
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleVariableDeclaration.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleVariableDeclaration.java
index 7a8c4c9..f8db906 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleVariableDeclaration.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleVariableDeclaration.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2001 International Business Machines Corp. and others.
+ * Copyright (c) 2001, 2002 International Business Machines Corp. and others.
  * All rights reserved. This program and the accompanying materials 
  * are made available under the terms of the Common Public License v0.5 
  * which accompanies this distribution, and is available at
@@ -71,6 +71,16 @@ public class SingleVariableDeclaration extends VariableDeclaration {
 	private Type type = null;
 
 	/**
+	 * The number of array dimensions that appear after the variable, rather
+	 * than after the type itself; meaningless (and should be ignored) if the
+	 * type is not an array type or if it exceeds the number of dimensions in
+	 * the array type; defaults to 0.
+	 * 
+	 * @since 2.1
+	 */
+	private int displacedArrayDimensions = 0;
+
+	/**
 	 * The initializer expression, or <code>null</code> if none;
 	 * defaults to none.
 	 */
@@ -80,7 +90,7 @@ public class SingleVariableDeclaration extends VariableDeclaration {
 	 * Creates a new AST node for a variable declaration owned by the given 
 	 * AST. By default, the variable declaration has: no modifiers, an 
 	 * unspecified (but legal) type, an unspecified (but legal) variable name, 
-	 * no initializer.
+	 * 0 dimensions after the variable; no initializer.
 	 * <p>
 	 * N.B. This constructor is package-private.
 	 * </p>
@@ -105,6 +115,7 @@ public class SingleVariableDeclaration extends VariableDeclaration {
 		SingleVariableDeclaration result = new SingleVariableDeclaration(target);
 		result.setModifiers(getModifiers());
 		result.setType((Type) getType().clone(target));
+		result.setExtraDimensions(getExtraDimensions());
 		result.setName((SimpleName) getName().clone(target));
 		result.setInitializer(
 			(Expression) ASTNode.copySubtree(target, getInitializer()));
@@ -221,6 +232,57 @@ public class SingleVariableDeclaration extends VariableDeclaration {
 		this.type = type;
 	}
 
+	/**
+	 * Returns the number of array dimensions that appear after the variable
+	 * instead of after the type.
+	 * <p>
+	 * For example, <code>int[][][] i</code> has no array dimensions after the
+	 * variable; <code>int[] i[][]</code> has 2 array dimensions after the
+	 * variable. In both cases, the type is an array type with 3 dimensions.
+	 * </p>
+	 * <p>
+	 * The value is meaningless (and should be ignored) if the type is not an
+	 * array type or if it exceeds the number of dimensions in the array type.
+	 * The safe default value is 0; this represents the preferred syntax of the
+	 * construct where all dimensions appear as part of the type.
+	 * </p>
+	 * 
+	 * @return the number of array dimensions included after the 
+	 * variable instead of after the type
+	 * @since 2.1
+	 */ 
+	public int getExtraDimensions() {
+		return displacedArrayDimensions;
+	}
+
+	/**
+	 * Sets the number of array dimensions that appear after the variable
+	 * instead of after the type.
+	 * <p>
+	 * For example, <code>int[][][] i</code> has no array dimensions after the
+	 * variable; <code>int[] i[][]</code> has 2 array dimensions after the
+	 * variable. In both cases, the type is an array type with 3 dimensions.
+	 * </p>
+	 * <p>
+	 * The value is meaningless (and should be ignored) if the type is not an
+	 * array type or if it exceeds the number of dimensions in the array type.
+	 * The safe default value is 0; this represents the preferred syntax of the
+	 * construct where all dimensions appear as part of the type.
+	 * </p>
+	 * 
+	 * @param dimensions the number of array dimensions after the variable
+	 * @exception IllegalArgumentException if the number of dimensions is
+	 *    negative
+	 * @since 2.1
+	 */ 
+	public void setExtraDimensions(int dimensions) {
+		if (dimensions < 0) {
+			throw new IllegalArgumentException();
+		}
+		modifying();
+		this.displacedArrayDimensions = dimensions;
+	}
+
 	/* (omit javadoc for this method)
 	 * Method declared on VariableDeclaration.
 	 */ 
@@ -243,7 +305,7 @@ public class SingleVariableDeclaration extends VariableDeclaration {
 	 */
 	int memSize() {
 		// treat Operator as free
-		return BASE_NODE_SIZE + 4 * 4;
+		return BASE_NODE_SIZE + 5 * 4;
 	}
 	
 	/* (omit javadoc for this method)
commit 9295475f17ec96b15242bc49ff91f42882579f94
Author: Jim Desrivieres <jdesrivieres>
Date:   Thu Sep 12 16:12:55 2002 +0000

    Correct spec for extra array dimensions (bug 23284)

20	12	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java
6	6	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java
30	52	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java
31	57	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleVariableDeclaration.java
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java
index c0c1db8..8932846 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java
@@ -164,9 +164,12 @@ public final class AST {
 	 * The returned compilation unit node is the root node of a new AST.
 	 * Each node in the subtree carries source range(s) information relating back
 	 * to positions in the given source string (the given source string itself
-	 * is not remembered with the AST). If a syntax error is detected while
-	 * parsing, the relevant node(s) of the tree will be flagged as 
-	 * <code>MALFORMED</code>.
+	 * is not remembered with the AST).
+	 * Source ranges nest properly: the source range for a child is always
+	 * within the source range of its parent, and the source ranges of sibling
+	 * nodes never overlap.
+	 * If a syntax error is detected while parsing, the relevant node(s) of the
+	 * tree will be flagged as <code>MALFORMED</code>.
 	 * </p>
 	 * <p>
 	 * If <code>resolveBindings</code> is <code>true</code>, the various names
@@ -247,9 +250,12 @@ public final class AST {
 	 * The returned compilation unit node is the root node of a new AST.
 	 * Each node in the subtree carries source range(s) information relating back
 	 * to positions in the given source string (the given source string itself
-	 * is not remembered with the AST). If a syntax error is detected while
-	 * parsing, the relevant node(s) of the tree will be flagged as 
-	 * <code>MALFORMED</code>.
+	 * is not remembered with the AST).
+	 * Source ranges nest properly: the source range for a child is always
+	 * within the source range of its parent, and the source ranges of sibling
+	 * nodes never overlap.
+	 * If a syntax error is detected while parsing, the relevant node(s) of the
+	 * tree will be flagged as <code>MALFORMED</code>.
 	 * </p>
 	 * <p>
 	 * If the given project is not <code>null</code>, the various names
@@ -340,9 +346,12 @@ public final class AST {
 	 * The returned compilation unit node is the root node of a new AST.
 	 * Each node in the subtree carries source range(s) information relating back
 	 * to positions in the given source string (the given source string itself
-	 * is not remembered with the AST). If a syntax error is detected while
-	 * parsing, the relevant node(s) of the tree will be flagged as 
-	 * <code>MALFORMED</code>.
+	 * is not remembered with the AST). 
+	 * Source ranges nest properly: the source range for a child is always
+	 * within the source range of its parent, and the source ranges of sibling
+	 * nodes never overlap.
+	 * If a syntax error is detected while parsing, the relevant node(s) of the
+	 * tree will be flagged as <code>MALFORMED</code>.
 	 * </p>
 	 * 
 	 * @param source the string to be parsed as a Java compilation unit
@@ -674,9 +683,8 @@ public final class AST {
 	 * Creates an unparented method declaration node owned by this AST.
 	 * By default, the declaration is for a method of an unspecified, but 
 	 * legal, name; no modifiers; no Javadoc comment; no parameters; return
-	 * type void; no array dimensions after the parameters; no thrown 
-	 * exceptions; and no body (as opposed to an empty
-	 * body).
+	 * type void; no extra array dimensions; no thrown exceptions; and no
+	 * body (as opposed to an empty body).
 	 * <p>
 	 * To create a constructor, use this method and then call
 	 * <code>MethodDeclaration.setConstructor(true)</code> and
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java
index 6e1775a..165839f 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java
@@ -884,8 +884,8 @@ public class ASTMatcher {
 	 * child subtrees. Subclasses may override this method as needed.
 	 * </p>
 	 * <p>
-	 * Note that extra array dimensions are ignored, as they really only
-	 * affect how the node is rendered as text.
+	 * Note that extra array dimensions are compared since they are an
+	 * important part of the method declaration.
 	 * </p>
 	 * 
 	 * @param node the node
@@ -899,7 +899,6 @@ public class ASTMatcher {
 			return false;
 		}
 		MethodDeclaration o = (MethodDeclaration) other;
-		// n.b. ignore differences in extraArrayDimensions
 		return (
 			(node.getModifiers() == o.getModifiers())
 				&& (node.isConstructor() == o.isConstructor())
@@ -907,6 +906,7 @@ public class ASTMatcher {
 				&& safeSubtreeMatch(node.getReturnType(), o.getReturnType())
 				&& safeSubtreeMatch(node.getName(), o.getName())
 				&& safeSubtreeListMatch(node.parameters(), o.parameters())
+	 			&& node.getExtraDimensions() == o.getExtraDimensions()
 				&& safeSubtreeListMatch(node.thrownExceptions(), o.thrownExceptions())
 				&& safeSubtreeMatch(node.getBody(), o.getBody()));
 	}
@@ -1191,8 +1191,8 @@ public class ASTMatcher {
 	 * child subtrees. Subclasses may override this method as needed.
 	 * </p>
 	 * <p>
-	 * Note that extra array dimensions are ignored, as they really only
-	 * affect how the node is rendered as text.
+	 * Note that extra array dimensions are compared since they are an
+	 * important part of the declaration.
 	 * </p>
 	 * 
 	 * @param node the node
@@ -1206,11 +1206,11 @@ public class ASTMatcher {
 			return false;
 		}
 		SingleVariableDeclaration o = (SingleVariableDeclaration) other;
-		// n.b. ignore differences in extraArrayDimensions
 		return (
 			(node.getModifiers() == o.getModifiers())
 				&& safeSubtreeMatch(node.getType(), o.getType())
 				&& safeSubtreeMatch(node.getName(), o.getName())
+	 			&& node.getExtraDimensions() == o.getExtraDimensions()
 				&& safeSubtreeMatch(node.getInitializer(), o.getInitializer()));
 	}
 
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java
index c2697bc..df6400d 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java
@@ -28,21 +28,8 @@ import java.util.List;
  *    [ Javadoc ] { Modifier } Identifier <b>(</b>
  * 		  [ FormalParameter
  * 			 { <b>,</b> FormalParameter } ] <b>)</b>
- *        [<b>throws</b> TypeName { <b>,</b> TypeName } ] MethodBody
+ *        [<b>throws</b> TypeName { <b>,</b> TypeName } ] Block
  * </pre>
- * Normal form:
- * <pre>
- * MethodDeclaration:
- *    [ Javadoc ] { Modifier } ( Type | <b>void</b> ) Identifier
- *        <b>(</b> [ FormalParamter { <b>,</b> FormalParameter } ] <b>)</b>
- *        [ <b>throws</b> TypeName { <b>,</b> TypeName } ]
- *        ( Block | <b>;</b> )
- * ConstructorDeclaration:
- *    [ Javadoc ] { Modifier } Identifier
- *        <b>(</b> [ FormalParameter { <b>,</b> FormalParameter } ] <b>)</b>
- *        [ <b>throws</b> TypeName { <b>,</b> TypeName } ]
- *        Block
- * </pre> 
  * <p>
  * When a Javadoc comment is present, the source
  * range begins with the first character of the "/**" comment delimiter.
@@ -99,14 +86,12 @@ public class MethodDeclaration extends BodyDeclaration {
 	private Type returnType = null;
 	
 	/**
-	 * The number of array dimensions that appear after the parameter, rather
-	 * than after the return type itself; meaningless (and should be ignored)
-	 * if the type is not an array type or if it exceeds the number of 
-	 * dimensions in the array type; defaults to 0.
+	 * The number of array dimensions that appear after the parameters, rather
+	 * than after the return type itself; defaults to 0.
 	 * 
 	 * @since 2.1
 	 */
-	private int displacedArrayDimensions = 0;
+	private int extraArrayDimensions = 0;
 
 	/**
 	 * The list of thrown exception names (element type: <code>Name</code>).
@@ -308,8 +293,8 @@ public class MethodDeclaration extends BodyDeclaration {
 	
 	/**
 	 * Returns the return type of the method declared in this method 
-	 * declaration. This is one of the few places where the void type 
-	 * is meaningful.
+	 * declaration, exclusive of any extra array dimensions. 
+	 * This is one of the few places where the void type is meaningful.
 	 * <p>
 	 * Note that this child is not relevant for constructor declarations
 	 * (although it does still figure in subtree equality comparisons).
@@ -327,8 +312,8 @@ public class MethodDeclaration extends BodyDeclaration {
 
 	/**
 	 * Sets the return type of the method declared in this method declaration
-	 * to the given type. This is one of the few places where the void type is
-	 * meaningful.
+	 * to the given type, exclusive of any extra array dimensions. This is one
+	 * of the few places where the void type is meaningful.
 	 * <p>
 	 * Note that this child is not relevant for constructor declarations
 	 * (although it does still figure in subtree equality comparisons).
@@ -350,46 +335,39 @@ public class MethodDeclaration extends BodyDeclaration {
 	}
 
 	/**
-	 * Returns the number of array dimensions that appear after the parameters
-	 * instead of after the return type.
-	 * <p>
-	 * For example, <code>int[][][] foo()</code> has no array dimensions after
-	 * the parameters; <code>int[] foo()[][]</code> has 2 array dimensions 
-	 * after the parameters. In both cases, the return type is an array type
-	 * with 3 dimensions.
-	 * </p>
+	 * Returns the number of extra array dimensions over and above the 
+	 * explicitly-specified return type.
 	 * <p>
-	 * The value is meaningless (and should be ignored) if the type is not an
-	 * array type or if it exceeds the number of dimensions in the array type.
-	 * The safe default value is 0; this represents the preferred syntax of the
-	 * construct where all dimensions appear as part of the type.
+	 * For example, <code>int foo()[][]</code> has a return type of 
+	 * <code>int</code> and two extra array dimensions; 
+	 * <code>int[][] foo()</code> has a return type of <code>int[][]</code>
+	 * and zero extra array dimensions. The two constructs have different
+	 * ASTs, even though there are really syntactic variants of the same
+	 * method declaration.
 	 * </p>
 	 * 
-	 * @return the number of array dimensions included after the 
-	 * parameters instead of after the return type
+	 * @return the number of extra array dimensions
 	 * @since 2.1
 	 */ 
 	public int getExtraDimensions() {
-		return displacedArrayDimensions;
+		return extraArrayDimensions;
 	}
 
 	/**
-	 * Sets the number of array dimensions that appear after the parameters
-	 * instead of after the return type.
-	 * <p>
-	 * For example, <code>int[][][] foo()</code> has no array dimensions after
-	 * the parameters; <code>int[] foo()[][]</code> has 2 array dimensions 
-	 * after the parameters. In both cases, the return type is an array type 
-	 * with 3 dimensions.
-	 * </p>
+	 * Returns the number of extra array dimensions over and above the 
+	 * explicitly-specified return type.
 	 * <p>
-	 * The value is meaningless (and should be ignored) if the type is not an
-	 * array type or if it exceeds the number of dimensions in the array type.
-	 * The safe default value is 0; this represents the preferred syntax of the
-	 * construct where all dimensions appear as part of the type.
+	 * For example, <code>int foo()[][]</code> is rendered as a return
+	 * type of <code>int</code> with two extra array dimensions; 
+	 * <code>int[][] foo()</code> is rendered as a return type of 
+	 * <code>int[][]</code> with zero extra array dimensions. The two
+	 * constructs have different ASTs, even though there are really syntactic
+	 * variants of the same method declaration.
 	 * </p>
 	 * 
-	 * @param dimensions the number of array dimensions after the parameters 
+	 * @return the number of extra array dimensions
+	 * 
+	 * @param dimensions the number of array dimensions
 	 * @exception IllegalArgumentException if the number of dimensions is
 	 *    negative
 	 * @since 2.1
@@ -399,7 +377,7 @@ public class MethodDeclaration extends BodyDeclaration {
 			throw new IllegalArgumentException();
 		}
 		modifying();
-		this.displacedArrayDimensions = dimensions;
+		this.extraArrayDimensions = dimensions;
 	}
 
 	/**
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleVariableDeclaration.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleVariableDeclaration.java
index f8db906..b2f0b0b 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleVariableDeclaration.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleVariableDeclaration.java
@@ -12,32 +12,14 @@
 package org.eclipse.jdt.core.dom;
 
 /**
- * VariableDeclaration declaration AST node type. Union of field declaration,
- * local variable declaration, and formal parameter declaration.
+ * Single variable declaration AST node type. Single variable
+ * declaration nodes are used in a limited number of places, including formal
+ * parameter lists and catch clauses. They are not used for field declarations
+ * and regular variable declaration statements.
  *
  * <pre>
- * FieldDeclaration:
- *    { Modifier } Type Identifier { <b>[</b><b>]</b> } [ <b>=</b> Expression ]
- *        { <b>,</b> Identifier { <b>[</b><b>]</b> } [ <b>=</b> Expression] }
- *        <b>;</b>
- * LocalVariableDeclaration:
- *    { <b>final</b> } Type
- * 		Identifier { <b>[</b><b>]</b> } [ <b>=</b> Expression ]
- *      { <b>,</b> Identifier { <b>[</b><b>]</b> } [ <b>=</b> Expression] }
- *      <b>;</b>
- * FormalParameter:
- *    { <b>final</b> } Type Identifier { <b>[</b><b>]</b> }
- * </pre>
- * Simplified normalized form:
- * <pre>
  * SingleVariableDeclaration:
- *    { Modifier } Type Identifier [ <b>=</b> Expression ]
- * FieldDeclaration:
- *    SingleVariableDeclaration <b>;</b>
- * LocalVariableDeclaration:
- *    SingleVariableDeclaration <b>;</b>
- * FormalParameter:
- *    SingleVariableDeclaration
+ *    { Modifier } Type Identifier { <b>[</b><b>]</b> } [ <b>=</b> Expression ]
  * </pre>
  * 
  * @since 2.0
@@ -71,14 +53,12 @@ public class SingleVariableDeclaration extends VariableDeclaration {
 	private Type type = null;
 
 	/**
-	 * The number of array dimensions that appear after the variable, rather
-	 * than after the type itself; meaningless (and should be ignored) if the
-	 * type is not an array type or if it exceeds the number of dimensions in
-	 * the array type; defaults to 0.
+	 * The number of extra array dimensions that appear after the variable;
+	 * defaults to 0.
 	 * 
 	 * @since 2.1
 	 */
-	private int displacedArrayDimensions = 0;
+	private int extraArrayDimensions = 0;
 
 	/**
 	 * The initializer expression, or <code>null</code> if none;
@@ -201,7 +181,8 @@ public class SingleVariableDeclaration extends VariableDeclaration {
 	}
 
 	/**
-	 * Returns the type of the variable declared in this variable declaration.
+	 * Returns the type of the variable declared in this variable declaration,
+	 * exclusive of any extra array dimensions.
 	 * 
 	 * @return the type
 	 */ 
@@ -215,7 +196,7 @@ public class SingleVariableDeclaration extends VariableDeclaration {
 
 	/**
 	 * Sets the type of the variable declared in this variable declaration to 
-	 * the given type.
+	 * the given type, exclusive of any extra array dimensions.
 	 * 
 	 * @param type the new type
 	 * @exception IllegalArgumentException if:
@@ -233,44 +214,37 @@ public class SingleVariableDeclaration extends VariableDeclaration {
 	}
 
 	/**
-	 * Returns the number of array dimensions that appear after the variable
-	 * instead of after the type.
+	 * Returns the number of extra array dimensions over and above the 
+	 * explicitly-specified type.
 	 * <p>
-	 * For example, <code>int[][][] i</code> has no array dimensions after the
-	 * variable; <code>int[] i[][]</code> has 2 array dimensions after the
-	 * variable. In both cases, the type is an array type with 3 dimensions.
-	 * </p>
-	 * <p>
-	 * The value is meaningless (and should be ignored) if the type is not an
-	 * array type or if it exceeds the number of dimensions in the array type.
-	 * The safe default value is 0; this represents the preferred syntax of the
-	 * construct where all dimensions appear as part of the type.
+	 * For example, <code>int x[][]</code> has a type of 
+	 * <code>int</code> and two extra array dimensions; 
+	 * <code>int[][] x</code> has a type of <code>int[][]</code>
+	 * and zero extra array dimensions. The two constructs have different
+	 * ASTs, even though there are really syntactic variants of the same
+	 * variable declaration.
 	 * </p>
 	 * 
-	 * @return the number of array dimensions included after the 
-	 * variable instead of after the type
+	 * @return the number of extra array dimensions
 	 * @since 2.1
 	 */ 
 	public int getExtraDimensions() {
-		return displacedArrayDimensions;
+		return extraArrayDimensions;
 	}
 
 	/**
-	 * Sets the number of array dimensions that appear after the variable
-	 * instead of after the type.
-	 * <p>
-	 * For example, <code>int[][][] i</code> has no array dimensions after the
-	 * variable; <code>int[] i[][]</code> has 2 array dimensions after the
-	 * variable. In both cases, the type is an array type with 3 dimensions.
-	 * </p>
+	 * Returns the number of extra array dimensions over and above the 
+	 * explicitly-specified type.
 	 * <p>
-	 * The value is meaningless (and should be ignored) if the type is not an
-	 * array type or if it exceeds the number of dimensions in the array type.
-	 * The safe default value is 0; this represents the preferred syntax of the
-	 * construct where all dimensions appear as part of the type.
+	 * For example, <code>int x[][]</code> has a type of 
+	 * <code>int</code> and two extra array dimensions; 
+	 * <code>int[][] x</code> has a type of <code>int[][]</code>
+	 * and zero extra array dimensions. The two constructs have different
+	 * ASTs, even though there are really syntactic variants of the same
+	 * variable declaration.
 	 * </p>
 	 * 
-	 * @param dimensions the number of array dimensions after the variable
+	 * @param dimensions the number of array dimensions
 	 * @exception IllegalArgumentException if the number of dimensions is
 	 *    negative
 	 * @since 2.1
@@ -280,7 +254,7 @@ public class SingleVariableDeclaration extends VariableDeclaration {
 			throw new IllegalArgumentException();
 		}
 		modifying();
-		this.displacedArrayDimensions = dimensions;
+		this.extraArrayDimensions = dimensions;
 	}
 
 	/* (omit javadoc for this method)
commit 6e72651dcdb7889db1f539504aa6882d0755cb06
Author: Jim Desrivieres <jdesrivieres>
Date:   Thu Sep 12 17:01:50 2002 +0000

    Correct typo in new javadoc (bug 23284)

1	3	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java
1	1	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleVariableDeclaration.java
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java
index df6400d..95a1988 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java
@@ -354,7 +354,7 @@ public class MethodDeclaration extends BodyDeclaration {
 	}
 
 	/**
-	 * Returns the number of extra array dimensions over and above the 
+	 * Sets the number of extra array dimensions over and above the 
 	 * explicitly-specified return type.
 	 * <p>
 	 * For example, <code>int foo()[][]</code> is rendered as a return
@@ -365,8 +365,6 @@ public class MethodDeclaration extends BodyDeclaration {
 	 * variants of the same method declaration.
 	 * </p>
 	 * 
-	 * @return the number of extra array dimensions
-	 * 
 	 * @param dimensions the number of array dimensions
 	 * @exception IllegalArgumentException if the number of dimensions is
 	 *    negative
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleVariableDeclaration.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleVariableDeclaration.java
index b2f0b0b..64ca979 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleVariableDeclaration.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleVariableDeclaration.java
@@ -233,7 +233,7 @@ public class SingleVariableDeclaration extends VariableDeclaration {
 	}
 
 	/**
-	 * Returns the number of extra array dimensions over and above the 
+	 * Sets the number of extra array dimensions over and above the 
 	 * explicitly-specified type.
 	 * <p>
 	 * For example, <code>int x[][]</code> has a type of 
commit 6b653dd01a79291ddc2469b3e301b3697caafb1b
Author: Jim Desrivieres <jdesrivieres>
Date:   Fri Sep 13 14:13:29 2002 +0000

    Pull up API methods to VariableDeclaration (bug 23284)

4	28	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleVariableDeclaration.java
36	0	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclaration.java
8	3	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclarationFragment.java
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleVariableDeclaration.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleVariableDeclaration.java
index 7994bbf..8e2f818 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleVariableDeclaration.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleVariableDeclaration.java
@@ -217,40 +217,16 @@ public class SingleVariableDeclaration extends VariableDeclaration {
 		this.type = type;
 	}
 
-	/**
-	 * Returns the number of extra array dimensions over and above the 
-	 * explicitly-specified type.
-	 * <p>
-	 * For example, <code>int x[][]</code> has a type of 
-	 * <code>int</code> and two extra array dimensions; 
-	 * <code>int[][] x</code> has a type of <code>int[][]</code>
-	 * and zero extra array dimensions. The two constructs have different
-	 * ASTs, even though there are really syntactic variants of the same
-	 * variable declaration.
-	 * </p>
-	 * 
-	 * @return the number of extra array dimensions
+	/* (omit javadoc for this method)
+	 * Method declared on VariableDeclaration.
 	 * @since 2.1
 	 */ 
 	public int getExtraDimensions() {
 		return extraArrayDimensions;
 	}
 
-	/**
-	 * Sets the number of extra array dimensions over and above the 
-	 * explicitly-specified type.
-	 * <p>
-	 * For example, <code>int x[][]</code> has a type of 
-	 * <code>int</code> and two extra array dimensions; 
-	 * <code>int[][] x</code> has a type of <code>int[][]</code>
-	 * and zero extra array dimensions. The two constructs have different
-	 * ASTs, even though there are really syntactic variants of the same
-	 * variable declaration.
-	 * </p>
-	 * 
-	 * @param dimensions the number of array dimensions
-	 * @exception IllegalArgumentException if the number of dimensions is
-	 *    negative
+	/* (omit javadoc for this method)
+	 * Method declared on VariableDeclaration.
 	 * @since 2.1
 	 */ 
 	public void setExtraDimensions(int dimensions) {
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclaration.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclaration.java
index 6e7380e..6ce4823 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclaration.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclaration.java
@@ -61,6 +61,42 @@ public abstract class VariableDeclaration extends ASTNode {
 	public abstract void setName(SimpleName variableName);
 
 	/**
+	 * Returns the number of extra array dimensions over and above the 
+	 * explicitly-specified type.
+	 * <p>
+	 * For example, <code>int x[][]</code> has a type of 
+	 * <code>int</code> and two extra array dimensions; 
+	 * <code>int[][] x</code> has a type of <code>int[][]</code>
+	 * and zero extra array dimensions. The two constructs have different
+	 * ASTs, even though there are really syntactic variants of the same
+	 * variable declaration.
+	 * </p>
+	 * 
+	 * @return the number of extra array dimensions
+	 * @since 2.1
+	 */ 
+	public abstract int getExtraDimensions();
+
+	/**
+	 * Sets the number of extra array dimensions over and above the 
+	 * explicitly-specified type.
+	 * <p>
+	 * For example, <code>int x[][]</code> has a type of 
+	 * <code>int</code> and two extra array dimensions; 
+	 * <code>int[][] x</code> has a type of <code>int[][]</code>
+	 * and zero extra array dimensions. The two constructs have different
+	 * ASTs, even though there are really syntactic variants of the same
+	 * variable declaration.
+	 * </p>
+	 * 
+	 * @param dimensions the number of array dimensions
+	 * @exception IllegalArgumentException if the number of dimensions is
+	 *    negative
+	 * @since 2.1
+	 */ 
+	public abstract void setExtraDimensions(int dimensions);
+
+	/**
 	 * Returns the initializer of this variable declaration, or 
 	 * <code>null</code> if there is none.
 	 * 
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclarationFragment.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclarationFragment.java
index d507bda..d8cbdba 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclarationFragment.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclarationFragment.java
@@ -133,7 +133,7 @@ public class VariableDeclarationFragment extends VariableDeclaration {
 	 * dimensions, respectively.
 	 * </p>
 	 * 
-	 * @return the number of extra array dimensions
+	 * @since 2.0
 	 */ 
 	public int getExtraDimensions() {
 		return extraArrayDimensions;
@@ -142,9 +142,14 @@ public class VariableDeclarationFragment extends VariableDeclaration {
 	/**
 	 * Sets the number of extra array dimensions this variable has over
 	 * and above the type specified in the enclosing declaration.
+	 * <p>
+	 * For example, in the AST for <code>int[] i, j[], k[][]</code> the 
+	 * variable declaration fragments for the variables <code>i</code>,
+	 * <code>j</code>, and <code>k</code>, have 0, 1, and 2 extra array
+	 * dimensions, respectively.
+	 * </p>
 	 * 
-	 * @param dimensions the number of extra array dimensions
-	 * @exception IllegalArgumentException if the number of dimensions is negative
+	 * @since 2.0
 	 */ 
 	public void setExtraDimensions(int dimensions) {
 		if (dimensions < 0) {

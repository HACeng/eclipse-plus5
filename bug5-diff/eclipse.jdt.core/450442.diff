commit 978b63f3dcf47c1265663042fb2652bb563387ac
Author: ssankaran <srikanth_sankaran@in.ibm.com>
Date:   Sat Nov 8 13:31:33 2014 +0530

    Fix for bug 450442

1	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java
index 4a29fa6..05ea4d1 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java
@@ -491,7 +491,7 @@ private void rememberAllTypes(CompilationUnitDeclaration parsedUnit, org.eclipse
 		for (int i = 0; i < parsedUnit.functionalExpressionsCount; i++) {
 			if (parsedUnit.functionalExpressions[i] instanceof LambdaExpression) {
 				final LambdaExpression expression = (LambdaExpression) parsedUnit.functionalExpressions[i];
-				if (expression.resolvedType != null && expression.resolvedType.isValidBinding()) {
+				if (expression.resolvedType != null && !expression.resolvedType.isPolyType() && expression.resolvedType.isValidBinding()) {
 					IType typeHandle = (IType)factory.createLambdaTypeElement(expression, cu, existingElements, knownScopes);
 					remember(typeHandle, expression.getTypeBinding());
 				}
commit 702c62fec0923d7526ca23efea5c1bb4f5a2ef27
Author: ssankaran <srikanth_sankaran@in.ibm.com>
Date:   Sat Nov 8 14:18:40 2014 +0530

    Fixed Bug 450442 - [1.8] NPE at HandleFactory.createElement on hover

64	0	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/HierarchyOnWorkingCopiesTests.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java
5	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java
6	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java
1	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/HierarchyOnWorkingCopiesTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/HierarchyOnWorkingCopiesTests.java
index 6835321..b7444cf 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/HierarchyOnWorkingCopiesTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/HierarchyOnWorkingCopiesTests.java
@@ -25,6 +25,10 @@ import org.eclipse.jdt.core.JavaCore;
 
 public class HierarchyOnWorkingCopiesTests extends WorkingCopyTests {
 
+static {
+//	TESTS_NAMES = new String [] { "test450442" };
+}
+
 public HierarchyOnWorkingCopiesTests(String name) {
 	super(name);
 }
@@ -525,5 +529,65 @@ public void test442534() throws CoreException, IOException {
 			this.deleteProject(project);
 	}
 }
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=450442,  [1.8] NPE at HandleFactory.createElement on hover
+public void test450442() throws CoreException, IOException {
+
+	IJavaProject project = null;
+	try {
+		project = this.createJavaProject(
+				"Bug450442",
+				new String[] {"src"},
+				new String[] {this.getExternalJCLPathString(), "lib"},
+				"bin");
+		project.setOption(JavaCore.COMPILER_COMPLIANCE, "1.8");
+		project.setOption(JavaCore.COMPILER_SOURCE, "1.8");
+
+		this.createFile("Bug450442/src/Claxx.java",
+				"import java.util.function.Consumer;\n" +
+				"public class Claxx {\n" +
+				"	void post(Runnable r) {\n" +
+				"		r.run();\n" +
+				"	}\n" +
+				"	void absorb(Consumer<Claxx> c) throws Exception {\n" +
+				"		c.accept(this);\n" +
+				"	}\n" +
+				"	\n" +
+				"	static void execute() {\n" +
+				"		System.out.println(\"exec!\");\n" +
+				"	}\n" +
+				"	static void executeGiven(Object o) {\n" +
+				"		System.out.println(\"exec \" + o);\n" +
+				"	}\n" +
+				"	void executeObject() {\n" +
+				"		System.out.println(\"exec \" + this);\n" +
+				"	}	\n" +
+				"}\n" +
+				"class ClaxxTest {\n" +
+				"	Claxx claxx = new Claxx();\n" +
+				"	\n" +
+				"	void doInBackground() throws Exception {\n" +
+				"		claxx.post(Claxx::execute); \n" +
+				"		absorb(Claxx::executeGiven);\n" +
+				"		post(this::executeObject);\n" +
+				"		\n" +
+				"		absorb(Claxx::executeObject);\n" +
+				"		post(() -> execute());\n" +
+				"		post(() -> executeGiven(this)); // not convertible\n" +
+				"		post(() -> executeObject());\n" +
+				"	}\n" +
+				"}\n");
+
+		ITypeHierarchy h = project.findType("Claxx").newSupertypeHierarchy(null);
+		assertHierarchyEquals(
+				"Focus: Claxx [in Claxx.java [in <default> [in src [in Bug450442]]]]\n" + 
+				"Super types:\n" + 
+				"  Object [in Object.class [in java.lang [in "+ getExternalJCLPathString() + "]]]\n" + 
+				"Sub types:\n",
+				h);	
+	} finally {
+		if (project != null)
+			this.deleteProject(project);
+	}
+}
 }
 
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java
index bae3701..412471b 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java
@@ -476,7 +476,7 @@ public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext,
 		}
 		if (isPolyExpression()) {
 			if (this.expectedType == null) {
-				return this.resolvedType = new PolyTypeBinding(this);
+				return new PolyTypeBinding(this);
 			}
 			return this.resolvedType = computeConversions(scope, this.expectedType) ? this.expectedType : null;
 		}
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
index baecd6a..5d8d70c 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
@@ -243,7 +243,7 @@ public class LambdaExpression extends FunctionalExpression implements IPolyExpre
 					this.argumentTypes[i] = this.arguments[i].type.resolveType(blockScope, true /* check bounds*/);
 			}
 			if (this.expectedType == null && this.expressionContext == INVOCATION_CONTEXT) {
-				return this.resolvedType = new PolyTypeBinding(this);
+				return new PolyTypeBinding(this);
 			} 
 		}
 		
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
index d9247d8..0c6f6a3 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
@@ -462,7 +462,7 @@ public class ReferenceExpression extends FunctionalExpression implements IPolyEx
 	        }
 
 	    	if (this.expectedType == null && this.expressionContext == INVOCATION_CONTEXT) {
-	    		return this.resolvedType = new PolyTypeBinding(this);
+	    		return new PolyTypeBinding(this);
 			}
 
     	} else {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java
index 18d8791..a3527d1 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java
@@ -241,7 +241,7 @@ public class InferenceContext18 {
 			if (this.invocationArguments[i].isPertinentToApplicability(parameters[i], method)) {
 				this.initialConstraints[numConstraints++] = new ConstraintExpressionFormula(this.invocationArguments[i], thetaF, ReductionResult.COMPATIBLE, ARGUMENT_CONSTRAINTS_ARE_SOFT);
 			} else {
-				if (parameters[i].isPertinentToApplicability(this.invocationArguments[i].resolvedType, method))
+				if (parameters[i].isPertinentToApplicability(this.invocationArguments[i], method))
 					this.initialConstraints[numConstraints++] = new ConstraintExpressionFormula(this.invocationArguments[i], thetaF, ReductionResult.POTENTIALLY_COMPATIBLE);
 				// else we know it is potentially compatible, no need to assert.
 			}
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java
index 60e1b70..097755e 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java
@@ -37,6 +37,7 @@ import java.util.List;
 import java.util.Set;
 
 import org.eclipse.jdt.core.compiler.CharOperation;
+import org.eclipse.jdt.internal.compiler.ast.Expression;
 import org.eclipse.jdt.internal.compiler.ast.Wildcard;
 import org.eclipse.jdt.internal.compiler.impl.CompilerOptions;
 
@@ -1685,4 +1686,8 @@ public void exitRecursiveFunction() {
 public boolean isFunctionalType() {
 	return false;
 }
+
+public boolean isPertinentToApplicability(Expression expression, MethodBinding method) {
+	return true;
+}
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java
index 0000718..6ff28c8 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java
@@ -36,6 +36,7 @@ import java.util.Set;
 
 import org.eclipse.jdt.core.compiler.CharOperation;
 import org.eclipse.jdt.internal.compiler.ast.Annotation;
+import org.eclipse.jdt.internal.compiler.ast.Expression;
 import org.eclipse.jdt.internal.compiler.ast.NullAnnotationMatching;
 import org.eclipse.jdt.internal.compiler.ast.TypeParameter;
 import org.eclipse.jdt.internal.compiler.ast.TypeReference;
@@ -504,6 +505,11 @@ public class TypeVariableBinding extends ReferenceBinding {
 		this.inRecursiveFunction = false;
 	}
 	
+	@Override
+	public boolean isPertinentToApplicability(Expression expression, MethodBinding method) {
+		return expression.isPertinentToApplicability(this, method);
+	}
+	
 	public boolean isPertinentToApplicability(TypeBinding argument, MethodBinding method) {
 		return argument != null && argument.isPertinentToApplicability(this, method);
 	}
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java
index 05ea4d1..4a29fa6 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java
@@ -491,7 +491,7 @@ private void rememberAllTypes(CompilationUnitDeclaration parsedUnit, org.eclipse
 		for (int i = 0; i < parsedUnit.functionalExpressionsCount; i++) {
 			if (parsedUnit.functionalExpressions[i] instanceof LambdaExpression) {
 				final LambdaExpression expression = (LambdaExpression) parsedUnit.functionalExpressions[i];
-				if (expression.resolvedType != null && !expression.resolvedType.isPolyType() && expression.resolvedType.isValidBinding()) {
+				if (expression.resolvedType != null && expression.resolvedType.isValidBinding()) {
 					IType typeHandle = (IType)factory.createLambdaTypeElement(expression, cu, existingElements, knownScopes);
 					remember(typeHandle, expression.getTypeBinding());
 				}

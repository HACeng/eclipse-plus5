commit 9e5742b61aded25431e479f58d12ba05749a0cfe
Author: David Audel <daudel>
Date:   Mon Jul 17 11:40:27 2006 +0000

    HEAD - bug 129584

2	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java
2	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/GenericDietRecoveryTest.java
3	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/StatementRecoveryTest.java
4	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java
1	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java
28	0	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/LocalElementTests.java
1	0	org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java
3	1	org.eclipse.jdt.core/buildnotes_jdt-core.html
1	0	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java
3	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java
8	4	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java
2	0	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java
2	0	org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetEvaluator.java
1	0	org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/Evaluator.java
1	0	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/DocumentElementParser.java
1	0	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java
1	0	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitProblemFinder.java
1	0	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java
2	0	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/CodeSnippetParsingUtil.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java
index 456801c..935a1e0 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietRecoveryTest.java
@@ -83,6 +83,7 @@ public void checkParse(
 					new CompilerOptions(getCompilerOptions()), 
 					new DefaultProblemFactory(Locale.getDefault())),
 				optimizeStringLiterals);
+		parser.setMethodsFullRecovery(false);
 		parser.setStatementsRecovery(false);
 
 		ICompilationUnit sourceUnit = new CompilationUnit(source, testName, null);
@@ -121,6 +122,7 @@ public void checkParse(
 					new CompilerOptions(getCompilerOptions()), 
 					new DefaultProblemFactory(Locale.getDefault())),
 				optimizeStringLiterals);
+		parser.setMethodsFullRecovery(true);
 		parser.setStatementsRecovery(true);
 
 		ICompilationUnit sourceUnit = new CompilationUnit(source, testName, null);
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/GenericDietRecoveryTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/GenericDietRecoveryTest.java
index f1ee8df..6e45785 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/GenericDietRecoveryTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/GenericDietRecoveryTest.java
@@ -87,6 +87,7 @@ public void checkParse(
 					new CompilerOptions(getCompilerOptions()), 
 					new DefaultProblemFactory(Locale.getDefault())),
 				optimizeStringLiterals);
+		parser.setMethodsFullRecovery(false);
 		parser.setStatementsRecovery(false);
 
 		ICompilationUnit sourceUnit = new CompilationUnit(source, testName, null);
@@ -126,6 +127,7 @@ public void checkParse(
 					new CompilerOptions(getCompilerOptions()), 
 					new DefaultProblemFactory(Locale.getDefault())),
 				optimizeStringLiterals);
+		parser.setMethodsFullRecovery(true);
 		parser.setStatementsRecovery(true);
 
 		ICompilationUnit sourceUnit = new CompilationUnit(source, testName, null);
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/StatementRecoveryTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/StatementRecoveryTest.java
index 813b94e..15e0c54 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/StatementRecoveryTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/StatementRecoveryTest.java
@@ -62,6 +62,7 @@ public void checkParse(
 					new CompilerOptions(getCompilerOptions()), 
 					new DefaultProblemFactory(Locale.getDefault())),
 				optimizeStringLiterals);
+		parser.setMethodsFullRecovery(false);
 		parser.setStatementsRecovery(false);
 		
 		ICompilationUnit sourceUnit = new CompilationUnit(source, testName, null);
@@ -109,6 +110,7 @@ public void checkParse(
 					new CompilerOptions(getCompilerOptions()), 
 					new DefaultProblemFactory(Locale.getDefault())),
 				optimizeStringLiterals);
+		parser.setMethodsFullRecovery(false);
 		parser.setStatementsRecovery(false);
 
 		ICompilationUnit sourceUnit = new CompilationUnit(source, testName, null);
@@ -184,6 +186,7 @@ public void checkParse(
 					new CompilerOptions(getCompilerOptions()), 
 					new DefaultProblemFactory(Locale.getDefault())),
 				optimizeStringLiterals);
+		parser.setMethodsFullRecovery(false);
 		parser.setStatementsRecovery(false);
 
 		ICompilationUnit sourceUnit = new CompilationUnit(source, testName, null);
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java
index c2177fa..b4a0b24 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java
@@ -389,6 +389,7 @@ public abstract class AbstractRegressionTest extends AbstractCompilerTest implem
 				options.putAll(customOptions);
 			}
 			CompilerOptions compilerOptions = new CompilerOptions(options);
+			compilerOptions.performMethodsFullRecovery = false;
 			compilerOptions.performStatementsRecovery = false;
 			Compiler batchCompiler = 
 				new Compiler(
@@ -498,6 +499,7 @@ public abstract class AbstractRegressionTest extends AbstractCompilerTest implem
 				false /* show warning token*/);
 		
 		CompilerOptions compilerOptions = new CompilerOptions(getCompilerOptions());
+		compilerOptions.performMethodsFullRecovery = false;
 		compilerOptions.performStatementsRecovery = false;
 		Compiler batchCompiler = 
 			new Compiler(
@@ -657,6 +659,7 @@ public abstract class AbstractRegressionTest extends AbstractCompilerTest implem
 				options.putAll(customOptions);
 			}
 			CompilerOptions compilerOptions = new CompilerOptions(options);
+			compilerOptions.performMethodsFullRecovery = performStatementsRecovery;
 			compilerOptions.performStatementsRecovery = performStatementsRecovery;
 			Compiler batchCompiler = 
 				new Compiler(
@@ -728,6 +731,7 @@ public abstract class AbstractRegressionTest extends AbstractCompilerTest implem
 			options.putAll(customOptions);
 		}
 		CompilerOptions compilerOptions = new CompilerOptions(options);
+		compilerOptions.performMethodsFullRecovery = false;
 		compilerOptions.performStatementsRecovery = false;
 		Compiler batchCompiler = 
 			new Compiler(
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java
index cd515a8..2eb09cd 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java
@@ -83,6 +83,7 @@ public static void compile(String[] pathsAndContents, Map options, String output
 				}
 			};
 		CompilerOptions compilerOptions = new CompilerOptions(options);
+		compilerOptions.performMethodsFullRecovery = false;
 		compilerOptions.performStatementsRecovery = false;
 		Compiler batchCompiler = 
 			new Compiler(
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/LocalElementTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/LocalElementTests.java
index fcb02f2..bdaf248 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/LocalElementTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/LocalElementTests.java
@@ -451,5 +451,33 @@ public class LocalElementTests extends ModifyingResourceTests {
 			deleteFile("/P/X.java");
 		}
 	}
+	
+	/*
+	 * Local type test.
+	 */
+	public void testLocalType5() throws CoreException {
+		try {
+			createFile(
+				"/P/X.java",
+				"public class X {\n" +
+				"  void foo() {\n" +
+				"    class Z {\n" +
+				"    }\n" +
+				"    Z\n" +
+				"  }\n" +
+				"}"
+			);
+			ICompilationUnit cu = getCompilationUnit("/P/X.java");
+			assertElementDescendants(
+				"Unexpected compilation unit contents",
+				"X.java\n" + 
+				"  class X\n" + 
+				"    void foo()\n" + 
+				"      class Z",
+				cu);
+		} finally {
+			deleteFile("/P/X.java");
+		}
+	}
 
 }
diff --git a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java
index 2684eaf..cce5e7b 100644
--- a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java
+++ b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java
@@ -2854,6 +2854,7 @@ public void performCompilation() throws InvalidInputException {
 
 	INameEnvironment environment = getLibraryAccess();
 	this.compilerOptions = new CompilerOptions(this.options);
+	this.compilerOptions.performMethodsFullRecovery = false;
 	this.compilerOptions.performStatementsRecovery = false;
 	this.batchCompiler =
 		new Compiler(
diff --git a/org.eclipse.jdt.core/buildnotes_jdt-core.html b/org.eclipse.jdt.core/buildnotes_jdt-core.html
index 67b3f48..d097d45 100644
--- a/org.eclipse.jdt.core/buildnotes_jdt-core.html
+++ b/org.eclipse.jdt.core/buildnotes_jdt-core.html
@@ -58,7 +58,9 @@ Eclipse SDK 3.3M1 - ?th July 2006
 </ul>
 
 <h3>Problem Reports Fixed</h3>
-<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=150758">150758</a>
+<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=129584">129584</a>
+Java model gives different results
+<br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=150758">150758</a>
 [1.5][compiler] NullPointerException in internal compiler
 <br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=150074">150074</a>
 [compiler] init part of for each loop with empty body is not executed
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java
index 3f93dcd..22f1d39 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java
@@ -76,6 +76,7 @@ public AssistParser(ProblemReporter problemReporter) {
 	super(problemReporter, true);
 	this.javadocParser.checkDocComment = false;
 	
+	this.setMethodsFullRecovery(false);
 	this.setStatementsRecovery(false);
 }
 public abstract char[] assistIdentifier();
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java
index b12307c..7871875 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java
@@ -289,6 +289,9 @@ public class CompilerOptions {
 	public boolean treatOptionalErrorAsFatal = true;
 	
 	// parser perform statements recovery 
+	public boolean performMethodsFullRecovery = true;
+	
+	// parser perform statements recovery 
 	public boolean performStatementsRecovery = true;
 	
 	// store annotations
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java
index 087cf36..e5969a5 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java
@@ -8937,7 +8937,7 @@ protected void parse() {
 					this.recoveryScanner.getData();
 			}
 			
-			if (this.methodRecoveryActivated) {
+			if (this.methodRecoveryActivated && this.options.performStatementsRecovery) {
 				this.methodRecoveryActivated = false;
 				this.recoverStatements();
 				this.methodRecoveryActivated = true;
@@ -8959,7 +8959,7 @@ public void parse(ConstructorDeclaration cd, CompilationUnitDeclaration unit, bo
 	//convert bugs into parse error
 
 	boolean oldMethodRecoveryActivated = this.methodRecoveryActivated;
-	if(this.options.performStatementsRecovery) {
+	if(this.options.performMethodsFullRecovery) {
 		this.methodRecoveryActivated = true;
 	}
 	
@@ -9139,7 +9139,7 @@ public void parse(
 	//convert bugs into parse error
 
 	boolean oldMethodRecoveryActivated = this.methodRecoveryActivated;
-	if(this.options.performStatementsRecovery) {
+	if(this.options.performMethodsFullRecovery) {
 		this.methodRecoveryActivated = true;
 	}
 	
@@ -9201,7 +9201,7 @@ public void parse(MethodDeclaration md, CompilationUnitDeclaration unit) {
 		return;
 
 	boolean oldMethodRecoveryActivated = this.methodRecoveryActivated;
-	if(this.options.performStatementsRecovery) {
+	if(this.options.performMethodsFullRecovery) {
 		this.methodRecoveryActivated = true;
 		this.rParenPos = md.sourceEnd;
 	}
@@ -9976,7 +9976,11 @@ protected boolean resumeOnSyntaxError() {
 	/* attempt to reset state in order to resume to parse loop */
 	return this.resumeAfterRecovery();
 }
+public void setMethodsFullRecovery(boolean enabled) {
+	this.options.performMethodsFullRecovery = enabled;
+}
 public void setStatementsRecovery(boolean enabled) {
+	if(enabled) this.options.performMethodsFullRecovery = true;
 	this.options.performStatementsRecovery = enabled;
 }
 public String toString() {
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java
index 2a34d9d..467da0e 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java
@@ -259,6 +259,7 @@ class CompilationUnitResolver extends Compiler {
 	
 	protected static CompilerOptions getCompilerOptions(Map options, boolean statementsRecovery) {
 		CompilerOptions compilerOptions = new CompilerOptions(options);
+		compilerOptions.performMethodsFullRecovery = statementsRecovery;
 		compilerOptions.performStatementsRecovery = statementsRecovery;
 		compilerOptions.parseLiteralExpressionsAsConstants = false;
 		compilerOptions.storeAnnotations = true /*store annotations in the bindings*/;
@@ -378,6 +379,7 @@ class CompilationUnitResolver extends Compiler {
 			throw new IllegalStateException();
 		}
 		CompilerOptions compilerOptions = new CompilerOptions(settings);
+		compilerOptions.performMethodsFullRecovery = statementsRecovery;
 		compilerOptions.performStatementsRecovery = statementsRecovery;
 		Parser parser = new CommentRecorderParser(
 			new ProblemReporter(
diff --git a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetEvaluator.java b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetEvaluator.java
index dd0378c..77d3d6d 100644
--- a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetEvaluator.java
+++ b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetEvaluator.java
@@ -117,6 +117,7 @@ Compiler getCompiler(ICompilerRequestor compilerRequestor) {
 		// the code snippet support classes
 
 		CompilerOptions compilerOptions = new CompilerOptions(this.options);
+		compilerOptions.performMethodsFullRecovery = true;
 		compilerOptions.performStatementsRecovery = true;
 		compiler = 
 			new CodeSnippetCompiler(
@@ -153,6 +154,7 @@ Compiler getCompiler(ICompilerRequestor compilerRequestor) {
 		// then a default implementation is provided.
 
 		CompilerOptions compilerOptions = new CompilerOptions(this.options);
+		compilerOptions.performMethodsFullRecovery = true;
 		compilerOptions.performStatementsRecovery = true;
 		compiler = new Compiler(
 			getWrapperEnvironment(), 
diff --git a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/Evaluator.java b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/Evaluator.java
index c55d185..79a2688 100644
--- a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/Evaluator.java
+++ b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/Evaluator.java
@@ -160,6 +160,7 @@ protected abstract char[] getClassName();
  */
 Compiler getCompiler(ICompilerRequestor compilerRequestor) {
 	CompilerOptions compilerOptions = new CompilerOptions(this.options);
+	compilerOptions.performMethodsFullRecovery = true;
 	compilerOptions.performStatementsRecovery = true;
 	return new Compiler(
 		this.environment, 
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/DocumentElementParser.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/DocumentElementParser.java
index 773a8dd..d732132 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/DocumentElementParser.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/DocumentElementParser.java
@@ -48,6 +48,7 @@ public DocumentElementParser(
 	this.options = options;
 	this.javadocParser.checkDocComment = false;
 	
+	this.setMethodsFullRecovery(false);
 	this.setStatementsRecovery(false);
 }
 /*
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java
index 7c60262..d982cfa 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnit.java
@@ -126,6 +126,7 @@ protected boolean buildStructure(OpenableElementInfo info, final IProgressMonito
 		true/*report local declarations*/,
 		!createAST /*optimize string literals only if not creating a DOM AST*/);
 	parser.reportOnlyOneSyntaxError = !computeProblems;
+	parser.setMethodsFullRecovery(true);
 	parser.setStatementsRecovery(statementsRecovery);
 	
 	if (!computeProblems && !resolveBindings && !createAST) // disable javadoc parsing if not computing problems, not resolving and not creating ast
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitProblemFinder.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitProblemFinder.java
index 14f42a5..2a3e5ea 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitProblemFinder.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitProblemFinder.java
@@ -115,6 +115,7 @@ public class CompilationUnitProblemFinder extends Compiler {
 
 	protected static CompilerOptions getCompilerOptions(Map settings, boolean creatingAST, boolean statementsRecovery) {
 		CompilerOptions compilerOptions = new CompilerOptions(settings);
+		compilerOptions.performMethodsFullRecovery = statementsRecovery;
 		compilerOptions.performStatementsRecovery = statementsRecovery;
 		compilerOptions.parseLiteralExpressionsAsConstants = !creatingAST; /*parse literal expressions as constants only if not creating a DOM AST*/
 		compilerOptions.storeAnnotations = creatingAST; /*store annotations in the bindings if creating a DOM AST*/
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java
index 9f7d217..3746453 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java
@@ -419,6 +419,7 @@ protected Compiler newCompiler() {
 	
 	// called once when the builder is initialized... can override if needed
 	CompilerOptions compilerOptions = new CompilerOptions(projectOptions);
+	compilerOptions.performMethodsFullRecovery = true;
 	compilerOptions.performStatementsRecovery = true;
 	Compiler newCompiler = new Compiler(
 		nameEnvironment,
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/CodeSnippetParsingUtil.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/CodeSnippetParsingUtil.java
index 18067bf..8a31b54 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/CodeSnippetParsingUtil.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/CodeSnippetParsingUtil.java
@@ -62,6 +62,7 @@ public class CodeSnippetParsingUtil {
 					new DefaultProblemFactory(Locale.getDefault()));
 					
 		CommentRecorderParser parser = new CommentRecorderParser(problemReporter, false);
+		parser.setMethodsFullRecovery(false);
 		parser.setStatementsRecovery(false);
 		
 		ICompilationUnit sourceUnit = 
@@ -173,6 +174,7 @@ public class CodeSnippetParsingUtil {
 					compilerOptions, 
 					new DefaultProblemFactory(Locale.getDefault()));
 		CommentRecorderParser parser = new CommentRecorderParser(problemReporter, false);
+		parser.setMethodsFullRecovery(false);
 		parser.setStatementsRecovery(enabledStatementRecovery);
 		
 		ICompilationUnit sourceUnit = 

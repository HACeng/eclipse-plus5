commit 2b0e753de92cc29b7a8b55b07153a9f3b515c0be
Author: Markus Keller <markus_keller@ch.ibm.com>
Date:   Thu Apr 11 22:19:07 2013 +0200

    Bug 405517: [1.8] IMethod#getFlags() and IMethodBinding#getModifiers(): What about default flags?

24	1	org.eclipse.jdt.core/model/org/eclipse/jdt/core/Flags.java
13	9	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementNotifier.java
10	2	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/Flags.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/Flags.java
index 5e13579..ae35928 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/Flags.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/Flags.java
@@ -156,7 +156,7 @@ public final class Flags {
 	public static final int AccAnnotation = ClassFileConstants.AccAnnotation;
 
 	/**
-	 * Default method property flag (added in J2SE 8).
+	 * Default method property flag.
 	 * <p>
 	 * Note that this flag's value is internal and is not defined in the
 	 * Virtual Machine specification.
@@ -166,6 +166,17 @@ public final class Flags {
 	public static final int AccDefaultMethod = ExtraCompilerModifiers.AccDefaultMethod;
 
 	/**
+	 * Annotation method default property flag.
+	 * Used to flag annotation type methods that declare a default value.
+	 * <p>
+	 * Note that this flag's value is internal and is not defined in the
+	 * Virtual Machine specification.
+	 * </p>
+	 * @since 3.9
+	 */
+	public static final int AccAnnotationDefault = ClassFileConstants.AccAnnotationDefault;
+	
+	/**
 	 * Not instantiable.
 	 */
 	private Flags() {
@@ -388,6 +399,18 @@ public final class Flags {
 	}
 
 	/**
+	 * Returns whether the given integer has the <code>AccAnnnotationDefault</code>
+	 * bit set.
+	 *
+	 * @return <code>true</code> if the <code>AccAnnotationDefault</code> flag is included
+	 * @see #AccAnnotationDefault
+	 * @since 3.9
+	 */
+	public static boolean isAnnnotationDefault(int flags) {
+		return (flags & AccAnnotationDefault) != 0;
+	}
+	
+	/**
 	 * Returns a standard string describing the given modifier flags.
 	 * Only modifier flags are included in the output; deprecated,
 	 * synthetic, bridge, etc. flags are ignored.
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementNotifier.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementNotifier.java
index ce19909..5a48c45 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementNotifier.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementNotifier.java
@@ -1,10 +1,14 @@
 /*******************************************************************************
- * Copyright (c) 2008, 2011 IBM Corporation and others.
+ * Copyright (c) 2008, 2013 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *     IBM Corporation - initial API and implementation
  *******************************************************************************/
@@ -284,16 +288,16 @@ protected void notifySourceElementRequestor(AbstractMethodDeclaration methodDecl
 		selectorSourceEnd = this.sourceEnds.get(methodDeclaration);
 		if (isInRange){
 			int currentModifiers = methodDeclaration.modifiers;
+			currentModifiers &= ExtraCompilerModifiers.AccJustFlag | ClassFileConstants.AccDeprecated;
 			if (isVarArgs)
 				currentModifiers |= ClassFileConstants.AccVarargs;
-
-			// remember deprecation so as to not lose it below
-			boolean deprecated = (currentModifiers & ClassFileConstants.AccDeprecated) != 0 || hasDeprecatedAnnotation(methodDeclaration.annotations);
+			if (hasDeprecatedAnnotation(methodDeclaration.annotations))
+				currentModifiers |= ClassFileConstants.AccDeprecated;
 
 			ISourceElementRequestor.MethodInfo methodInfo = new ISourceElementRequestor.MethodInfo();
 			methodInfo.isConstructor = true;
 			methodInfo.declarationStart = methodDeclaration.declarationSourceStart;
-			methodInfo.modifiers = deprecated ? (currentModifiers & ExtraCompilerModifiers.AccJustFlag) | ClassFileConstants.AccDeprecated : currentModifiers & ExtraCompilerModifiers.AccJustFlag;
+			methodInfo.modifiers = currentModifiers;
 			methodInfo.name = methodDeclaration.selector;
 			methodInfo.nameSourceStart = methodDeclaration.sourceStart;
 			methodInfo.nameSourceEnd = selectorSourceEnd;
@@ -340,11 +344,11 @@ protected void notifySourceElementRequestor(AbstractMethodDeclaration methodDecl
 	selectorSourceEnd = this.sourceEnds.get(methodDeclaration);
 	if (isInRange) {
 		int currentModifiers = methodDeclaration.modifiers;
+		currentModifiers &= ExtraCompilerModifiers.AccJustFlag | ClassFileConstants.AccDeprecated | ClassFileConstants.AccAnnotationDefault | ExtraCompilerModifiers.AccDefaultMethod;
 		if (isVarArgs)
 			currentModifiers |= ClassFileConstants.AccVarargs;
-
-		// remember deprecation so as to not lose it below
-		boolean deprecated = (currentModifiers & ClassFileConstants.AccDeprecated) != 0 || hasDeprecatedAnnotation(methodDeclaration.annotations);
+		if (hasDeprecatedAnnotation(methodDeclaration.annotations))
+			currentModifiers |= ClassFileConstants.AccDeprecated;
 
 		TypeReference returnType = methodDeclaration instanceof MethodDeclaration
 			? ((MethodDeclaration) methodDeclaration).returnType
@@ -352,7 +356,7 @@ protected void notifySourceElementRequestor(AbstractMethodDeclaration methodDecl
 		ISourceElementRequestor.MethodInfo methodInfo = new ISourceElementRequestor.MethodInfo();
 		methodInfo.isAnnotation = methodDeclaration instanceof AnnotationMethodDeclaration;
 		methodInfo.declarationStart = methodDeclaration.declarationSourceStart;
-		methodInfo.modifiers = deprecated ? (currentModifiers & ExtraCompilerModifiers.AccJustFlag) | ClassFileConstants.AccDeprecated : currentModifiers & ExtraCompilerModifiers.AccJustFlag;
+		methodInfo.modifiers = currentModifiers;
 		methodInfo.returnType = returnType == null ? null : CharOperation.concatWith(returnType.getParameterizedTypeName(), '.');
 		methodInfo.name = methodDeclaration.selector;
 		methodInfo.nameSourceStart = methodDeclaration.sourceStart;
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java
index 09e67fd..b128087 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java
@@ -1,10 +1,14 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2012 IBM Corporation and others.
+ * Copyright (c) 2000, 2013 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *     IBM Corporation - initial API and implementation
  *******************************************************************************/
@@ -27,6 +31,7 @@ import org.eclipse.jdt.internal.compiler.env.IBinaryAnnotation;
 import org.eclipse.jdt.internal.compiler.env.IBinaryMethod;
 import org.eclipse.jdt.internal.compiler.env.IBinaryType;
 import org.eclipse.jdt.internal.compiler.lookup.Binding;
+import org.eclipse.jdt.internal.compiler.lookup.ExtraCompilerModifiers;
 import org.eclipse.jdt.internal.core.JavaModelManager.PerProjectInfo;
 import org.eclipse.jdt.internal.core.util.Util;
 
@@ -193,7 +198,10 @@ public int getElementType() {
  */
 public int getFlags() throws JavaModelException {
 	IBinaryMethod info = (IBinaryMethod) getElementInfo();
-	return info.getModifiers();
+	int modifiers = info.getModifiers();
+	if (((IType) this.parent).isInterface() && (modifiers & (ClassFileConstants.AccAbstract | ClassFileConstants.AccStatic)) == 0)
+		modifiers |= ExtraCompilerModifiers.AccDefaultMethod;
+	return modifiers;
 }
 /*
  * @see JavaElement#getHandleMemento(StringBuffer)
commit 6ae5b75e45a8ed1fe5a89bb3aa53c58ea92d4b35
Author: Markus Keller <markus_keller@ch.ibm.com>
Date:   Wed Jun 19 19:23:28 2013 +0200

    Bug 405517: [1.8] IMethod#getFlags() and IMethodBinding#getModifiers(): What about default flags?
    
    Javadoc fixes

1	1	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Modifier.java
1	1	org.eclipse.jdt.core/model/org/eclipse/jdt/core/Flags.java
9	4	org.eclipse.jdt.core/model/org/eclipse/jdt/core/IMember.java
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Modifier.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Modifier.java
index b30efd0..e59ca8b 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Modifier.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Modifier.java
@@ -312,7 +312,7 @@ public final class Modifier extends ASTNode implements IExtendedModifier {
 
 	/**
 	 * "default" modifier constant (bit mask) (added in JLS8 API).
-	 * Applicable only to methods.
+	 * Applicable only to methods in interfaces (but not for annotation methods with a default value).
 	 * <p>
 	 * Note that the value of this flag is internal and is not
 	 * specified in the Java Virtual Machine Specification.
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/Flags.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/Flags.java
index 07fc92c..92fbc9d 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/Flags.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/Flags.java
@@ -27,7 +27,7 @@ import org.eclipse.jdt.internal.compiler.lookup.ExtraCompilerModifiers;
  * <p>
  * Note that the numeric values of these flags match the ones for class files
  * as described in the Java Virtual Machine Specification (except for
- * {@link #AccDeprecated} and {@link #AccDefaultMethod}).
+ * {@link #AccDeprecated}, {@link #AccAnnotationDefault}, and {@link #AccDefaultMethod}).
  * </p>
  * <p>
  * The AST class <code>Modifier</code> provides
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IMember.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IMember.java
index 69c943a..072ff6e 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IMember.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IMember.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2010 IBM Corporation and others.
+ * Copyright (c) 2000, 2013 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -63,9 +63,14 @@ IType getDeclaringType();
  * Returns the modifier flags for this member. The flags can be examined using class
  * <code>Flags</code>.
  * <p>
- * Note that only flags as indicated in the source are returned. Thus if an interface
- * defines a method <code>void myMethod();</code> the flags don't include the
- * 'public' flag.
+ * For {@linkplain #isBinary() binary} members, flags from the class file
+ * as well as derived flags {@link Flags#AccAnnotationDefault} and {@link Flags#AccDefaultMethod} are included.
+ * </p>
+ * <p>
+ * For source members, only flags as indicated in the source are returned. Thus if an interface
+ * defines a method <code>void myMethod();</code>, the flags don't include the
+ * 'public' flag. Source flags include {@link Flags#AccAnnotationDefault} as well.
+ * </p>
  *
  * @exception JavaModelException if this element does not exist or if an
  *      exception occurs while accessing its corresponding resource.
commit e25c9b26d300c446da4be62b1b00d52eb2940f61
Author: Markus Keller <markus_keller@ch.ibm.com>
Date:   Mon Aug 26 18:48:07 2013 +0200

    Bug 405517: [1.8] IMethod#getFlags() and IMethodBinding#getModifiers(): What about default flags?

10	2	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IBinding.java
1	1	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Modifier.java
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IBinding.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IBinding.java
index 06678c1..4a24f8c 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IBinding.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IBinding.java
@@ -1,10 +1,14 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2010 IBM Corporation and others.
+ * Copyright (c) 2000, 2013 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *     IBM Corporation - initial API and implementation
  *******************************************************************************/
@@ -140,9 +144,13 @@ public interface IBinding {
 	/**
 	 * Returns the modifiers for this binding.
 	 * <p>
-	 * Note that deprecated is not included among the modifiers.
+	 * Note that 'deprecated' is not included among the modifiers.
 	 * Use <code>isDeprecated</code> to find out whether a binding is deprecated.
 	 * </p>
+	 * <p>
+	 * Note that 'default' is not included among the modifiers.
+	 * Default methods are interface methods that are neither abstract nor static.
+	 * </p>
 	 *
 	 * @return the bit-wise or of <code>Modifier</code> constants
 	 * @see Modifier
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Modifier.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Modifier.java
index e10ad67..eeae6b3 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Modifier.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Modifier.java
@@ -473,7 +473,7 @@ public final class Modifier extends ASTNode implements IExtendedModifier {
 
 	/**
 	 * Returns whether the given flags includes the "default" modifier.
-	 * Applicable only to methods.
+	 * Applicable only to methods in interfaces.
 	 *
 	 * @param flags the modifier flags
 	 * @return <code>true</code> if the <code>DEFAULT</code> bit is set

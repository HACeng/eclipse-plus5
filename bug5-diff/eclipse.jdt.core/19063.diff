commit c7a9edf536467451ba659d7e03ac6c483c5c0cfe
Author: David Audel <daudel>
Date:   Tue Jan 21 10:24:05 2003 +0000

    bug 19063

13	14	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest.java
15517	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTestKeyword.java
8	8	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietCompletionTest.java
1	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TestAll.java
5540	3	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java
1	0	org.eclipse.jdt.core.tests.model/workspace/Completion/.classpath
1	1	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionEndOfCompilationUnit.java
1	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract1.java
2	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract10.java
2	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract11.java
2	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract12.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract13.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract14.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract15.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract16.java
1	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract2.java
1	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract3.java
1	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract4.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract5.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract6.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract7.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract8.java
2	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract9.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAssert1.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAssert2.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAssert3.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAssert4.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAssert5.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAssert6.java
7	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordBreak1.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordBreak2.java
8	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordBreak3.java
8	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordBreak4.java
7	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordBreak5.java
9	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordBreak6.java
7	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCase1.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCase10.java
8	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCase2.java
8	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCase3.java
9	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCase4.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCase5.java
8	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCase6.java
9	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCase7.java
9	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCase8.java
10	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCase9.java
8	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCatch1.java
10	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCatch10.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCatch2.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCatch3.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCatch4.java
9	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCatch5.java
9	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCatch6.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCatch7.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCatch8.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCatch9.java
1	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass1.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass10.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass11.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass12.java
2	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass13.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass14.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass15.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass16.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass17.java
2	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass18.java
2	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass19.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass2.java
2	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass20.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass21.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass22.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass23.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass24.java
1	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass3.java
1	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass4.java
1	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass5.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass6.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass7.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass8.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass9.java
7	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordContinue1.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordContinue2.java
8	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordContinue3.java
7	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordContinue4.java
7	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDefault1.java
9	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDefault10.java
8	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDefault2.java
9	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDefault3.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDefault4.java
8	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDefault5.java
8	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDefault6.java
9	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDefault7.java
10	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDefault8.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDefault9.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDo1.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDo2.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDo3.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDo4.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDo5.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDo6.java
7	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordElse1.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordElse2.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordElse3.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordElse4.java
8	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordElse5.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordElse6.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordElse7.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordElse8.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordExtends1.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordExtends10.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordExtends2.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordExtends3.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordExtends4.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordExtends5.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordExtends6.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordExtends7.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordExtends8.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordExtends9.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFalse1.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFalse2.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFalse3.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFalse4.java
1	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal1.java
2	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal10.java
2	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal11.java
2	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal12.java
2	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal13.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal14.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal15.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal16.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal17.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal18.java
1	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal2.java
1	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal3.java
1	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal4.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal5.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal6.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal7.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal8.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal9.java
8	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally1.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally10.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally11.java
10	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally12.java
10	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally13.java
10	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally14.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally2.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally3.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally4.java
9	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally5.java
9	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally6.java
9	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally7.java
9	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally8.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally9.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFor1.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFor2.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFor3.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFor4.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFor5.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFor6.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordIf1.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordIf2.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordIf3.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordIf4.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordIf5.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordIf6.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImplements1.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImplements2.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImplements3.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImplements4.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImplements5.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImplements6.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImport1.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImport3.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImport4.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImport5.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImport6.java
7	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImport7.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInstanceof1.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInstanceof2.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInstanceof3.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInstanceof4.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInstanceof5.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInstanceof6.java
1	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface1.java
2	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface10.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface11.java
2	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface12.java
2	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface13.java
2	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface14.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface15.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface16.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface17.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface18.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface2.java
1	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface3.java
1	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface4.java
1	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface5.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface6.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface7.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface8.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface9.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNative1.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNative2.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNative3.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNative4.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNative5.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNative6.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNative7.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNative8.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew1.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew10.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew11.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew12.java
7	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew13.java
7	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew14.java
7	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew15.java
7	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew16.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew2.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew3.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew4.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew5.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew6.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew7.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew8.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew9.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNull1.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNull2.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNull3.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNull4.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPackage1.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPackage3.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPackage4.java
7	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPackage5.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPackage6.java
7	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPackage7.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPrivate1.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPrivate10.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPrivate2.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPrivate3.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPrivate4.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPrivate5.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPrivate6.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPrivate7.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPrivate8.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPrivate9.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordProtected1.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordProtected10.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordProtected2.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordProtected3.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordProtected4.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordProtected5.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordProtected6.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordProtected7.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordProtected8.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordProtected9.java
1	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic1.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic10.java
2	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic11.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic12.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic13.java
2	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic14.java
2	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic15.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic16.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic17.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic18.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic19.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic2.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic20.java
1	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic3.java
1	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic4.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic5.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic6.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic7.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic8.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic9.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordReturn1.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordReturn2.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordReturn3.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordReturn4.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordReturn5.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordReturn6.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStatic1.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStatic10.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStatic2.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStatic3.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStatic4.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStatic5.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStatic6.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStatic7.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStatic8.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStatic9.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStrictfp1.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStrictfp2.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStrictfp3.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStrictfp4.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStrictfp5.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStrictfp6.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStrictfp7.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStrictfp8.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper1.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper10.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper11.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper12.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper2.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper3.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper4.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper5.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper6.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper7.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper8.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper9.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSwitch1.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSwitch2.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSwitch3.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSwitch4.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSwitch5.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSwitch6.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized1.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized10.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized11.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized12.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized2.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized3.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized4.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized5.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized6.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized7.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized8.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized9.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis1.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis10.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis11.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis12.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis13.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis14.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis2.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis3.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis4.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis5.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis6.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis7.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis8.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis9.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrow1.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrow2.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrow3.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrow4.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrow5.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrow6.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrows1.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrows2.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrows3.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrows4.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrows5.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrows6.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrows7.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrows8.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTransient1.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTransient2.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTransient3.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTransient4.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTransient5.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTransient6.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTransient7.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTransient8.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTrue1.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTrue2.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTrue3.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTrue4.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTry1.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTry2.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTry3.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTry4.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTry5.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTry6.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordVolatile1.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordVolatile2.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordVolatile3.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordVolatile4.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordVolatile5.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordVolatile6.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordVolatile7.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordVolatile8.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordWhile1.java
8	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordWhile10.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordWhile2.java
3	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordWhile3.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordWhile4.java
7	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordWhile5.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordWhile6.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordWhile7.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordWhile8.java
7	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordWhile9.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/p/CompletionKeywordImport2.java
7	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/p/CompletionKeywordImport8.java
5	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/p/CompletionKeywordPackage2.java
6	0	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/p/CompletionKeywordPackage8.java
3	1	org.eclipse.jdt.core/buildnotes_jdt-core.html
192	11	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
16	0	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnKeyword.java
41	0	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnKeyword1.java
34	0	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnKeyword2.java
42	0	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnKeyword3.java
7	0	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnSingleNameReference.java
598	34	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java
22	3	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java
57	0	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Keywords.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest.java
index 7e3733a..fcecfe1 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest.java
@@ -1336,7 +1336,7 @@ public void testDB_1FHSLDR() {
 
 	String testName = "<complete on finally keyword>";
 	String completeBehind = "fi";
-	String expectedCompletionNodeToString = "<CompleteOnName:fi>";
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:fi>";
 	String completionIdentifier = "fi";
 	String expectedReplacedSource = "fi";
 	int cursorLocation = str.indexOf("fi }") + completeBehind.length() - 1;
@@ -1346,7 +1346,7 @@ public void testDB_1FHSLDR() {
 		"  public DB() {\n" + 
 		"  }\n" + 
 		"  void foo() {\n" + 
-		"    <CompleteOnName:fi>;\n" + 
+		"    <CompleteOnKeyword:fi>;\n" + 
 		"  }\n" + 
 		"}\n";
 
@@ -2377,7 +2377,7 @@ public void testHB_1FHSLDR() {
 
 	String testName = "<complete on finally keyword>";
 	String completeBehind = "fi";
-	String expectedCompletionNodeToString = "<CompleteOnName:fi>";
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:fi>";
 	String completionIdentifier = "fi";
 	String expectedReplacedSource = "fi";
 	int cursorLocation = str.indexOf("fi }") + completeBehind.length() - 1;
@@ -2388,7 +2388,7 @@ public void testHB_1FHSLDR() {
 		"  }\n" + 
 		"  void foo() {\n" + 
 		"    {\n" + 
-		"      <CompleteOnName:fi>;\n" + 
+		"      <CompleteOnKeyword:fi>;\n" + 
 		"    }\n" + 
 		"  }\n" + 
 		"}\n";
@@ -6064,16 +6064,15 @@ public void testV_1FGGUOO_1() {
 
 	String testName = "<complete on implements keyword>";
 	String completeBehind = "i";
-	String expectedCompletionNodeToString = "<CompleteOnType:i>";
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:i>";
 	String completionIdentifier = "i";
 	String expectedReplacedSource = "i";
 	int cursorLocation = str.indexOf("i java") + completeBehind.length() - 1;
 	String expectedUnitDisplayString =
 		"package p;\n" + 
-		"public class V {\n" + 
-		"  <CompleteOnType:i>;\n" + 
-		"  {\n" + 
-		"  }\n" + 
+		"public class V extends <CompleteOnKeyword:i> {\n" + 
+		"  {\n" +
+		"  }\n" +
 		"  public V() {\n" + 
 		"  }\n" + 
 		"}\n";
@@ -7796,14 +7795,13 @@ public void testZ_1FGPF3D_1() {
 
 	String testName = "<complete on implements keyword>";
 	String completeBehind = "imp";
-	String expectedCompletionNodeToString = "<CompleteOnType:imp>";
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:imp>";
 	String completionIdentifier = "imp";
 	String expectedReplacedSource = "imp";
 	int cursorLocation = str.indexOf(completeBehind) + completeBehind.length() - 1;
 	String expectedUnitDisplayString =
 		"package p;\n" + 
-		"public class Z {\n" + 
-		"  <CompleteOnType:imp>;\n" + 
+		"public class Z extends <CompleteOnKeyword:imp> {\n" + 
 		"  {\n" + 
 		"  }\n" + 
 		"  public Z() {\n" + 
@@ -7858,12 +7856,13 @@ public void testZA_1() {
 
 	String testName = "<complete on import keyword>";
 	String completeBehind = "i";
-	String expectedCompletionNodeToString = "<CompleteOnType:i>";
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:i>";
 	String completionIdentifier = "i";
 	String expectedReplacedSource = "import";
 	int cursorLocation = str.indexOf("import") + completeBehind.length() - 1;
 	String expectedUnitDisplayString =
-		"package p;\n";
+		"package p;\n" +
+		"import <CompleteOnKeyword:i>;\n";
 
 	checkDietParse(
 		str.toCharArray(), 
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTestKeyword.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTestKeyword.java
new file mode 100644
index 0000000..c209c6f
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTestKeyword.java
@@ -0,0 +1,15517 @@
+/*******************************************************************************
+ * Copyright (c) 2002 IBM Corp. and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Common Public License v1.0 
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/cpl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ ******************************************************************************/
+package org.eclipse.jdt.core.tests.compiler.parser;
+
+import org.eclipse.jdt.core.tests.compiler.parser.*;
+
+public class CompletionParserTestKeyword extends AbstractCompletionTest {
+public CompletionParserTestKeyword(String testName) {
+	super(testName);
+}
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0001(){
+	String str =
+		"abst";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.indexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:abst>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "abst";
+	String expectedReplacedSource = "abst";
+	String expectedUnitDisplayString =
+		"import <CompleteOnKeyword:abst>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0002(){
+	String str =
+		"abst zzz";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.indexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:abst>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "abst";
+	String expectedReplacedSource = "abst";
+	String expectedUnitDisplayString =
+		"import <CompleteOnKeyword:abst>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0003(){
+	String str =
+		"package p;\n" +
+		"abst";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.indexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:abst>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "abst";
+	String expectedReplacedSource = "abst";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"import <CompleteOnKeyword:abst>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0004(){
+	String str =
+		"package p;\n" +
+		"abst zzz";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.indexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:abst>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "abst";
+	String expectedReplacedSource = "abst";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"import <CompleteOnKeyword:abst>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0005(){
+	String str =
+		"package p;\n" +
+		"import yyy;\n" +
+		"abst";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.indexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:abst>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "abst";
+	String expectedReplacedSource = "abst";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"import yyy;\n" +
+		"import <CompleteOnKeyword:abst>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0006(){
+	String str =
+		"package p;\n" +
+		"import yyy;\n" +
+		"abst zzz";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.indexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:abst>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "abst";
+	String expectedReplacedSource = "abst";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"import yyy;\n" +
+		"import <CompleteOnKeyword:abst>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0007(){
+	String str =
+		"package p;\n" +
+		"import yyy;\n" +
+		"public abst";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.indexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:abst>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "abst";
+	String expectedReplacedSource = "abst";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"import yyy;\n" +
+		"import <CompleteOnKeyword:abst>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0008(){
+	String str =
+		"package p;\n" +
+		"import yyy;\n" +
+		"public abst zzz";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.indexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:abst>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "abst";
+	String expectedReplacedSource = "abst";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"import yyy;\n" +
+		"import <CompleteOnKeyword:abst>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0009(){
+	String str =
+		"package p;\n" +
+		"import yyy;\n" +
+		"abstract abst";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.lastIndexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "abst";
+	String expectedReplacedSource = "abst";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"import yyy;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0010(){
+	String str =
+		"package p;\n" +
+		"import yyy;\n" +
+		"abstract abst zzz";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.lastIndexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "abst";
+	String expectedReplacedSource = "abst";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"import yyy;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0011(){
+	String str =
+		"package p;\n" +
+		"import \n" +
+		"abst";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.lastIndexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnImport:abst>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "abst";
+	String expectedReplacedSource = "abst";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"import <CompleteOnImport:abst>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0012(){
+	String str =
+		"package p;\n" +
+		"import yyy;\n" +
+		"public class X {}\n" +
+		"abst";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.lastIndexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:abst>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "abst";
+	String expectedReplacedSource = "abst";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"import yyy;\n" +
+		"import <CompleteOnKeyword:abst>;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0013(){
+	String str =
+		"package p;\n" +
+		"import yyy;\n" +
+		"public class X {}\n" +
+		"abst zzz";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.lastIndexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:abst>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "abst";
+	String expectedReplacedSource = "abst";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"import yyy;\n" +
+		"import <CompleteOnKeyword:abst>;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0014(){
+	String str =
+		"package p;\n" +
+		"import yyy;\n" +
+		"final abst";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.lastIndexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "abst";
+	String expectedReplacedSource = "abst";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"import yyy;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0015(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  abst\n" +
+		"}\n";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.lastIndexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:abst>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "abst";
+	String expectedReplacedSource = "abst";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  <CompleteOnType:abst>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0016(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  abst zzz\n" +
+		"}\n";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.lastIndexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:abst>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "abst";
+	String expectedReplacedSource = "abst";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  <CompleteOnType:abst>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0017(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public abst zzz\n" +
+		"}\n";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.lastIndexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:abst>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "abst";
+	String expectedReplacedSource = "abst";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  <CompleteOnType:abst>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0018(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  final abst\n" +
+		"}\n";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.lastIndexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:abst>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "abst";
+	String expectedReplacedSource = "abst";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  <CompleteOnType:abst>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0019(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  abstract abst\n" +
+		"}\n";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.lastIndexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:abst>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "abst";
+	String expectedReplacedSource = "abst";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  <CompleteOnType:abst>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0020(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  static abst\n" +
+		"}\n";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.lastIndexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:abst>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "abst";
+	String expectedReplacedSource = "abst";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  <CompleteOnType:abst>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  <clinit>() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0021(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"    abst\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.lastIndexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:abst>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "abst";
+	expectedReplacedSource = "abst";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:abst>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0022(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"    abst zzz\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.lastIndexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:abst>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "abst";
+	expectedReplacedSource = "abst";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:abst>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'break' keyword.
+ */
+public void test0023(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"    bre\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "bre";
+	int cursorLocation = str.lastIndexOf("bre") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:bre>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "bre";
+	expectedReplacedSource = "bre";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:bre>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'break' keyword.
+ */
+public void test0024(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"    for(int i; i < 10; i++) {\n" +
+		"      bre\n" +
+		"    }\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "bre";
+	int cursorLocation = str.lastIndexOf("bre") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:bre>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "bre";
+	expectedReplacedSource = "bre";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    int i;\n" +
+		"    {\n" +
+		"      <CompleteOnName:bre>;\n" +
+		"    }\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'case' keyword.
+ */
+public void test0025(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"    cas\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "cas";
+	int cursorLocation = str.lastIndexOf("cas") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:cas>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "cas";
+	expectedReplacedSource = "cas";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:cas>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'case' keyword.
+ */
+public void test0026(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"    switch(0) {\n" +
+		"      cas\n" +
+		"    }\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "cas";
+	int cursorLocation = str.lastIndexOf("cas") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:cas>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "cas";
+	expectedReplacedSource = "cas";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:cas>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'catch' keyword.
+ */
+public void test0027(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"     cat\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "cat";
+	int cursorLocation = str.lastIndexOf("cat") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:cat>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "cat";
+	expectedReplacedSource = "cat";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:cat>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'catch' keyword.
+ */
+public void test0028(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"    try {\n" +
+		"    } cat\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "cat";
+	int cursorLocation = str.lastIndexOf("cat") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnKeyword:cat>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "cat";
+	expectedReplacedSource = "cat";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnKeyword:cat>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'class' keyword.
+ */
+public void test0029(){
+	String str =
+		"cla";
+
+	String completeBehind = "cla";
+	int cursorLocation = str.lastIndexOf("cla") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:cla>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "cla";
+	String expectedReplacedSource = "cla";
+	String expectedUnitDisplayString =
+		"import <CompleteOnKeyword:cla>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'class' keyword.
+ */
+public void test0030(){
+	String str =
+		"public cla";
+
+	String completeBehind = "cla";
+	int cursorLocation = str.lastIndexOf("cla") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:cla>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "cla";
+	String expectedReplacedSource = "cla";
+	String expectedUnitDisplayString =
+		"import <CompleteOnKeyword:cla>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'class' keyword.
+ */
+public void test0031(){
+	String str =
+		"public final cla";
+
+	String completeBehind = "cla";
+	int cursorLocation = str.lastIndexOf("cla") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:cla>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "cla";
+	String expectedReplacedSource = "cla";
+	String expectedUnitDisplayString =
+		"import <CompleteOnKeyword:cla>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'class' keyword.
+ */
+public void test0032(){
+	String str =
+		"public final cla X";
+
+	String completeBehind = "cla";
+	int cursorLocation = str.lastIndexOf("cla") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:cla>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "cla";
+	String expectedReplacedSource = "cla";
+	String expectedUnitDisplayString =
+		"import <CompleteOnKeyword:cla>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'class' keyword.
+ */
+public void test0033(){
+	String str =
+		"public class X {\n" +
+		"  cla\n" +
+		"}";
+
+	String completeBehind = "cla";
+	int cursorLocation = str.lastIndexOf("cla") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:cla>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "cla";
+	String expectedReplacedSource = "cla";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:cla>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'class' keyword.
+ */
+public void test0034(){
+	String str =
+		"public class X {\n" +
+		"  public cla\n" +
+		"}";
+
+	String completeBehind = "cla";
+	int cursorLocation = str.lastIndexOf("cla") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:cla>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "cla";
+	String expectedReplacedSource = "cla";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:cla>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'class' keyword.
+ */
+public void test0035(){
+	String str =
+		"public class X {\n" +
+		"  public final cla\n" +
+		"}";
+
+	String completeBehind = "cla";
+	int cursorLocation = str.lastIndexOf("cla") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:cla>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "cla";
+	String expectedReplacedSource = "cla";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:cla>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'class' keyword.
+ */
+public void test0036(){
+	String str =
+		"public class X {\n" +
+		"  public final cla Y\n" +
+		"}";
+
+	String completeBehind = "cla";
+	int cursorLocation = str.lastIndexOf("cla") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:cla>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "cla";
+	String expectedReplacedSource = "cla";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:cla>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'class' keyword.
+ */
+public void test0037(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    cla\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "cla";
+	int cursorLocation = str.lastIndexOf("cla") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:cla>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "cla";
+	expectedReplacedSource = "cla";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:cla>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'class' keyword.
+ */
+public void test0038(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    final cla\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "cla";
+	int cursorLocation = str.lastIndexOf("cla") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:cla>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "cla";
+	expectedReplacedSource = "cla";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:cla>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'class' keyword.
+ */
+public void test0039(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    final cla Y\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "cla";
+	int cursorLocation = str.lastIndexOf("cla") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:cla>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "cla";
+	expectedReplacedSource = "cla";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:cla>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'continue' keyword.
+ */
+public void test0040(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"     con\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "con";
+	int cursorLocation = str.lastIndexOf("con") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:con>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "con";
+	expectedReplacedSource = "con";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:con>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'continue' keyword.
+ */
+public void test0041(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"     for(int i; i < 5; i++) {\n" +
+		"       con\n" +
+		"     }\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "con";
+	int cursorLocation = str.lastIndexOf("con") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:con>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "con";
+	expectedReplacedSource = "con";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    int i;\n" +
+		"    {\n" +
+		"      <CompleteOnName:con>;\n" +
+		"    }\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'default' keyword.
+ */
+public void test0042(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"     def\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "def";
+	int cursorLocation = str.lastIndexOf("def") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:def>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "def";
+	expectedReplacedSource = "def";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:def>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'default' keyword.
+ */
+public void test0043(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"     switch(0) {\n" +
+		"       case 1 : break;\n" +
+		"       def\n" +
+		"     }\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "def";
+	int cursorLocation = str.lastIndexOf("def") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:def>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "def";
+	expectedReplacedSource = "def";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    {\n" +
+		"      <CompleteOnName:def>;\n" +
+		"    }\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'do' keyword.
+ */
+public void test0044(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"     do\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "do";
+	int cursorLocation = str.lastIndexOf("do") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:do>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "do";
+	expectedReplacedSource = "do";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:do>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'else' keyword.
+ */
+public void test0045(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"     els\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "els";
+	int cursorLocation = str.lastIndexOf("els") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:els>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "els";
+	expectedReplacedSource = "els";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:els>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'else' keyword.
+ */
+public void test0046(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"     if(true) {\n" +
+		"     } els\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "els";
+	int cursorLocation = str.lastIndexOf("els") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:els>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "els";
+	expectedReplacedSource = "els";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:els>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'extends' keyword.
+ */
+public void test0047(){
+	String str =
+		"ext";
+
+	String completeBehind = "ext";
+	int cursorLocation = str.lastIndexOf("ext") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "ext";
+	String expectedReplacedSource = "ext";
+	String expectedUnitDisplayString =
+		"";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'extends' keyword.
+ */
+public void test0048(){
+	String str =
+		"X ext";
+
+	String completeBehind = "ext";
+	int cursorLocation = str.lastIndexOf("ext") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "ext";
+	String expectedReplacedSource = "ext";
+	String expectedUnitDisplayString =
+		"";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'extends' keyword.
+ */
+public void test0049(){
+	String str =
+		"ext Y";
+
+	String completeBehind = "ext";
+	int cursorLocation = str.lastIndexOf("ext") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "ext";
+	String expectedReplacedSource = "ext";
+	String expectedUnitDisplayString =
+		"";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'extends' keyword.
+ */
+public void test0050(){
+	String str =
+		"class X ext";
+
+	String completeBehind = "ext";
+	int cursorLocation = str.lastIndexOf("ext") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:ext>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "ext";
+	String expectedReplacedSource = "ext";
+	String expectedUnitDisplayString =
+		"class X extends <CompleteOnKeyword:ext> {\n" +
+		"  X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'extends' keyword.
+ */
+public void test0051(){
+	String str =
+		"class X ext Y";
+
+	String completeBehind = "ext";
+	int cursorLocation = str.lastIndexOf("ext") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:ext>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "ext";
+	String expectedReplacedSource = "ext";
+	String expectedUnitDisplayString =
+		"class X extends <CompleteOnKeyword:ext> {\n" +
+		"  X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'extends' keyword.
+ */
+public void test0052(){
+	String str =
+		"class X ext Y {";
+
+	String completeBehind = "ext";
+	int cursorLocation = str.lastIndexOf("ext") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:ext>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "ext";
+	String expectedReplacedSource = "ext";
+	String expectedUnitDisplayString =
+		"class X extends <CompleteOnKeyword:ext> {\n" +
+		"  {\n" +
+		"  }\n" +
+		"  X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'extends' keyword.
+ */
+public void test0053(){
+	String str =
+		"class X extends Y ext";
+
+	String completeBehind = "ext";
+	int cursorLocation = str.lastIndexOf("ext") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:ext>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "ext";
+	String expectedReplacedSource = "ext";
+	String expectedUnitDisplayString =
+		"class X extends <CompleteOnKeyword:ext> {\n" +
+		"  X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'extends' keyword.
+ */
+public void test0054(){
+	String str =
+		"class X implements Y ext";
+
+	String completeBehind = "ext";
+	int cursorLocation = str.lastIndexOf("ext") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "ext";
+	String expectedReplacedSource = "ext";
+	String expectedUnitDisplayString =
+		"class X implements Y {\n" +
+		"  X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'finally' keyword.
+ */
+public void test0055(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"     fin" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "fin";
+	int cursorLocation = str.lastIndexOf("fin") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:fin>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "fin";
+	expectedReplacedSource = "fin";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:fin>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'finally' keyword.
+ */
+public void test0056(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"     try {" +
+		"     } fin" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "fin";
+	int cursorLocation = str.lastIndexOf("fin") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnKeyword:fin>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "fin";
+	expectedReplacedSource = "fin";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnKeyword:fin>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'for' keyword.
+ */
+public void test0057(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"     for" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "for";
+	int cursorLocation = str.lastIndexOf("for") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:for>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "for";
+	expectedReplacedSource = "for";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:for>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'if' keyword.
+ */
+public void test0058(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"     if" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "if";
+	int cursorLocation = str.lastIndexOf("if") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:if>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "if";
+	expectedReplacedSource = "if";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:if>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'switch' keyword.
+ */
+public void test0059(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"     swi" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "swi";
+	int cursorLocation = str.lastIndexOf("swi") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:swi>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "swi";
+	expectedReplacedSource = "swi";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:swi>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'implements' keyword.
+ */
+public void test0060(){
+	String str =
+		"impl";
+
+	String completeBehind = "impl";
+	int cursorLocation = str.lastIndexOf("impl") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "impl";
+	String expectedReplacedSource = "impl";
+	String expectedUnitDisplayString =
+		"";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'implements' keyword.
+ */
+public void test0061(){
+	String str =
+		"X impl";
+
+	String completeBehind = "impl";
+	int cursorLocation = str.lastIndexOf("impl") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "impl";
+	String expectedReplacedSource = "impl";
+	String expectedUnitDisplayString =
+		"";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'implements' keyword.
+ */
+public void test0062(){
+	String str =
+		"impl Y";
+
+	String completeBehind = "impl";
+	int cursorLocation = str.lastIndexOf("impl") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "impl";
+	String expectedReplacedSource = "impl";
+	String expectedUnitDisplayString =
+		"";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'implements' keyword.
+ */
+public void test0063(){
+	String str =
+		"class X impl";
+
+	String completeBehind = "impl";
+	int cursorLocation = str.lastIndexOf("impl") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:impl>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "impl";
+	String expectedReplacedSource = "impl";
+	String expectedUnitDisplayString =
+		"class X extends <CompleteOnKeyword:impl> {\n" +
+		"  X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'implements' keyword.
+ */
+public void test0064(){
+	String str =
+		"class X impl Y";
+
+	String completeBehind = "impl";
+	int cursorLocation = str.lastIndexOf("impl") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:impl>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "impl";
+	String expectedReplacedSource = "impl";
+	String expectedUnitDisplayString =
+		"class X extends <CompleteOnKeyword:impl> {\n" +
+		"  X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'implements' keyword.
+ */
+public void test0065(){
+	String str =
+		"class X impl Y {";
+
+	String completeBehind = "impl";
+	int cursorLocation = str.lastIndexOf("impl") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:impl>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "impl";
+	String expectedReplacedSource = "impl";
+	String expectedUnitDisplayString =
+		"class X extends <CompleteOnKeyword:impl> {\n" +
+		"  {\n" +
+		"  }\n" +
+		"  X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'implements' keyword.
+ */
+public void test0066(){
+	String str =
+		"class X extends Y impl";
+
+	String completeBehind = "impl";
+	int cursorLocation = str.lastIndexOf("impl") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:impl>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "impl";
+	String expectedReplacedSource = "impl";
+	String expectedUnitDisplayString =
+		"class X extends <CompleteOnKeyword:impl> {\n" +
+		"  X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'implements' keyword.
+ */
+public void test0067(){
+	String str =
+		"class X implements Y impl";
+
+	String completeBehind = "impl";
+	int cursorLocation = str.lastIndexOf("impl") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "impl";
+	String expectedReplacedSource = "impl";
+	String expectedUnitDisplayString =
+		"class X implements Y {\n" +
+		"  X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'import' keyword.
+ */
+public void test0068(){
+	String str =
+		"impo";
+
+	String completeBehind = "impo";
+	int cursorLocation = str.lastIndexOf("impo") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:impo>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "impo";
+	String expectedReplacedSource = "impo";
+	String expectedUnitDisplayString =
+		"import <CompleteOnKeyword:impo>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'import' keyword.
+ */
+public void test0069(){
+	String str =
+		"package p;\n" +
+		"impo";
+
+	String completeBehind = "impo";
+	int cursorLocation = str.lastIndexOf("impo") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:impo>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "impo";
+	String expectedReplacedSource = "impo";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"import <CompleteOnKeyword:impo>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'import' keyword.
+ */
+public void test0070(){
+	String str =
+		"package p;\n" +
+		"import p2.Y;\n" +
+		"impo";
+
+	String completeBehind = "impo";
+	int cursorLocation = str.lastIndexOf("impo") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:impo>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "impo";
+	String expectedReplacedSource = "impo";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"import p2.Y;\n" +
+		"import <CompleteOnKeyword:impo>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'import' keyword.
+ */
+public void test0071(){
+	String str =
+		"impo p2.Y";
+
+	String completeBehind = "impo";
+	int cursorLocation = str.lastIndexOf("impo") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:impo>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "impo";
+	String expectedReplacedSource = "impo";
+	String expectedUnitDisplayString =
+		"import <CompleteOnKeyword:impo>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'interface' keyword.
+ */
+public void test0072(){
+	String str =
+		"int";
+
+	String completeBehind = "int";
+	int cursorLocation = str.lastIndexOf("int") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:int>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "int";
+	String expectedReplacedSource = "int";
+	String expectedUnitDisplayString =
+		"import <CompleteOnKeyword:int>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'interface' keyword.
+ */
+public void test0073(){
+	String str =
+		"public int";
+
+	String completeBehind = "int";
+	int cursorLocation = str.lastIndexOf("int") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:int>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "int";
+	String expectedReplacedSource = "int";
+	String expectedUnitDisplayString =
+		"import <CompleteOnKeyword:int>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'interface' keyword.
+ */
+public void test0074(){
+	String str =
+		"public abstract int";
+
+	String completeBehind = "int";
+	int cursorLocation = str.lastIndexOf("int") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:int>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "int";
+	String expectedReplacedSource = "int";
+	String expectedUnitDisplayString =
+		"import <CompleteOnKeyword:int>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'interface' keyword.
+ */
+public void test0075(){
+	String str =
+		"public abstract int X";
+
+	String completeBehind = "int";
+	int cursorLocation = str.lastIndexOf("int") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:int>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "int";
+	String expectedReplacedSource = "int";
+	String expectedUnitDisplayString =
+		"import <CompleteOnKeyword:int>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'interface' keyword.
+ */
+public void test0076(){
+	String str =
+		"public class X {\n" +
+		"  int\n" +
+		"}";
+
+	String completeBehind = "int";
+	int cursorLocation = str.lastIndexOf("int") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:int>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "int";
+	String expectedReplacedSource = "int";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:int>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'interface' keyword.
+ */
+public void test0077(){
+	String str =
+		"public class X {\n" +
+		"  public int\n" +
+		"}";
+
+	String completeBehind = "int";
+	int cursorLocation = str.lastIndexOf("int") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:int>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "int";
+	String expectedReplacedSource = "int";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:int>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'interface' keyword.
+ */
+public void test0078(){
+	String str =
+		"public class X {\n" +
+		"  public abstract int\n" +
+		"}";
+
+	String completeBehind = "int";
+	int cursorLocation = str.lastIndexOf("int") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:int>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "int";
+	String expectedReplacedSource = "int";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:int>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'interface' keyword.
+ */
+public void test0079(){
+	String str =
+		"public class X {\n" +
+		"  public abstract int Y\n" +
+		"}";
+
+	String completeBehind = "int";
+	int cursorLocation = str.lastIndexOf("int") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:int>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "int";
+	String expectedReplacedSource = "int";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:int>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'interface' keyword.
+ */
+public void test0080(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    int\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "int";
+	int cursorLocation = str.lastIndexOf("int") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:int>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "int";
+	expectedReplacedSource = "int";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:int>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'interface' keyword.
+ */
+public void test0081(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    abstract int\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "int";
+	int cursorLocation = str.lastIndexOf("int") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:int>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "int";
+	expectedReplacedSource = "int";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:int>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'interface' keyword.
+ */
+public void test0082(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    abstract int Y\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "int";
+	int cursorLocation = str.lastIndexOf("int") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:int>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "int";
+	expectedReplacedSource = "int";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:int>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'interface' keyword.
+ */
+public void test0083(){
+	String str =
+		"public final int";
+
+	String completeBehind = "int";
+	int cursorLocation = str.lastIndexOf("int") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "int";
+	String expectedReplacedSource = "int";
+	String expectedUnitDisplayString =
+		"";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'interface' keyword.
+ */
+public void test0084(){
+	String str =
+		"public final int X";
+
+	String completeBehind = "int";
+	int cursorLocation = str.lastIndexOf("int") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "int";
+	String expectedReplacedSource = "int";
+	String expectedUnitDisplayString =
+		"";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'package' keyword.
+ */
+public void test0085(){
+	String str =
+		"pac";
+
+	String completeBehind = "pac";
+	int cursorLocation = str.lastIndexOf("pac") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:pac>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pac";
+	String expectedReplacedSource = "pac";
+	String expectedUnitDisplayString =
+		"import <CompleteOnKeyword:pac>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'package' keyword.
+ */
+public void test0086(){
+	String str =
+		"pac p";
+
+	String completeBehind = "pac";
+	int cursorLocation = str.lastIndexOf("pac") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:pac>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pac";
+	String expectedReplacedSource = "pac";
+	String expectedUnitDisplayString =
+		"import <CompleteOnKeyword:pac>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'package' keyword.
+ */
+public void test0087(){
+	String str =
+		"package p;" +
+		"pac";
+
+	String completeBehind = "pac";
+	int cursorLocation = str.lastIndexOf("pac") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pac";
+	String expectedReplacedSource = "pac";
+	String expectedUnitDisplayString =
+		"package p;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'package' keyword.
+ */
+public void test0088(){
+	String str =
+		"import p;" +
+		"pac";
+
+	String completeBehind = "pac";
+	int cursorLocation = str.lastIndexOf("pac") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pac";
+	String expectedReplacedSource = "pac";
+	String expectedUnitDisplayString =
+		"import p;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'package' keyword.
+ */
+public void test0089(){
+	String str =
+		"class X {}" +
+		"pac";
+
+	String completeBehind = "pac";
+	int cursorLocation = str.lastIndexOf("pac") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pac";
+	String expectedReplacedSource = "pac";
+	String expectedUnitDisplayString =
+		"class X {\n" +
+		"  X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'return' keyword.
+ */
+public void test0090(){
+	String str =
+		"public class X {\n" +
+		"  int foo() {\n" +
+		"    ret\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "ret";
+	int cursorLocation = str.lastIndexOf("ret") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  int foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:ret>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "ret";
+	expectedReplacedSource = "ret";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  int foo() {\n" +
+		"    <CompleteOnName:ret>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'throw' keyword.
+ */
+public void test0091(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    thr\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "thr";
+	int cursorLocation = str.lastIndexOf("thr") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:thr>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "thr";
+	expectedReplacedSource = "thr";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:thr>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'try' keyword.
+ */
+public void test0092(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    try\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "try";
+	int cursorLocation = str.lastIndexOf("try") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:try>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "try";
+	expectedReplacedSource = "try";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:try>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'try' keyword.
+ */
+public void test0093(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    if(try\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "try";
+	int cursorLocation = str.lastIndexOf("try") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:try>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "try";
+	expectedReplacedSource = "try";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:try>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'do' keyword.
+ */
+public void test0094(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    if(do\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "do";
+	int cursorLocation = str.lastIndexOf("do") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:do>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "do";
+	expectedReplacedSource = "do";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:do>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'for' keyword.
+ */
+public void test0095(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    if(for\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "for";
+	int cursorLocation = str.lastIndexOf("for") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:for>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "for";
+	expectedReplacedSource = "for";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:for>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'if' keyword.
+ */
+public void test0096(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    if(if\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "if";
+	int cursorLocation = str.lastIndexOf("if") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:if>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "if";
+	expectedReplacedSource = "if";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:if>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'switch' keyword.
+ */
+public void test0097(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    if(swi\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "swi";
+	int cursorLocation = str.lastIndexOf("swi") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:swi>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "swi";
+	expectedReplacedSource = "swi";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:swi>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'new' keyword.
+ */
+public void test0098(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    new\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "new";
+	int cursorLocation = str.lastIndexOf("new") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:new>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "new";
+	expectedReplacedSource = "new";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:new>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'new' keyword.
+ */
+public void test0099(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    new X\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "new";
+	int cursorLocation = str.lastIndexOf("new") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:new>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "new";
+	expectedReplacedSource = "new";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:new>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'new' keyword.
+ */
+public void test0100(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    new X()\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "new";
+	int cursorLocation = str.lastIndexOf("new") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:new>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "new";
+	expectedReplacedSource = "new";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:new>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'throws' keyword.
+ */
+public void test0101(){
+	String str =
+		"public class X {\n" +
+		"  void foo() thr\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "thr";
+	int cursorLocation = str.lastIndexOf("thr") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:thr>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "thr";
+	String expectedReplacedSource = "thr";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() throws <CompleteOnKeyword:thr> {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'throws' keyword.
+ */
+public void test0102(){
+	String str =
+		"public class X {\n" +
+		"  void foo() thr {\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "thr";
+	int cursorLocation = str.lastIndexOf("thr") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:thr>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "thr";
+	String expectedReplacedSource = "thr";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() throws <CompleteOnKeyword:thr> {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'throws' keyword.
+ */
+public void test0103(){
+	String str =
+		"public class X {\n" +
+		"  void foo() thr E {\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "thr";
+	int cursorLocation = str.lastIndexOf("thr") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:thr>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "thr";
+	String expectedReplacedSource = "thr";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() throws <CompleteOnKeyword:thr> {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'throws' keyword.
+ */
+public void test0104(){
+	String str =
+		"public class X {\n" +
+		"  void foo() throws E thr\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "thr";
+	int cursorLocation = str.lastIndexOf("thr") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "thr";
+	String expectedReplacedSource = "thr";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() throws E {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'throws' keyword.
+ */
+public void test0105(){
+	String str =
+		"public class X {\n" +
+		"  X() thr\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "thr";
+	int cursorLocation = str.lastIndexOf("thr") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:thr>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "thr";
+	String expectedReplacedSource = "thr";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  X() throws <CompleteOnKeyword:thr> {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'throws' keyword.
+ */
+public void test0106(){
+	String str =
+		"public class X {\n" +
+		"  int foo()[] thr\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "thr";
+	int cursorLocation = str.lastIndexOf("thr") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:thr>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "thr";
+	String expectedReplacedSource = "thr";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  int[] foo() throws <CompleteOnKeyword:thr> {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'while' keyword.
+ */
+public void test0107(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    whi\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "whi";
+	int cursorLocation = str.lastIndexOf("whi") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:whi>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "whi";
+	expectedReplacedSource = "whi";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:whi>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'while' keyword.
+ */
+public void test0108(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    if(whi\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "whi";
+	int cursorLocation = str.lastIndexOf("whi") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:whi>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "whi";
+	expectedReplacedSource = "whi";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:whi>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'assert' keyword.
+ */
+public void test0109(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    ass\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "ass";
+	int cursorLocation = str.lastIndexOf("ass") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:ass>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "ass";
+	expectedReplacedSource = "ass";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:ass>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'assert' keyword.
+ */
+public void test0110(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    if(ass\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "ass";
+	int cursorLocation = str.lastIndexOf("ass") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:ass>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "ass";
+	expectedReplacedSource = "ass";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:ass>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'final' keyword.
+ */
+public void test0111(){
+	String str =
+		"fin";
+
+	String completeBehind = "fin";
+	int cursorLocation = str.lastIndexOf("fin") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:fin>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "fin";
+	String expectedReplacedSource = "fin";
+	String expectedUnitDisplayString =
+		"import <CompleteOnKeyword:fin>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'final' keyword.
+ */
+public void test0112(){
+	String str =
+		"public fin";
+
+	String completeBehind = "fin";
+	int cursorLocation = str.lastIndexOf("fin") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:fin>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "fin";
+	String expectedReplacedSource = "fin";
+	String expectedUnitDisplayString =
+		"import <CompleteOnKeyword:fin>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'final' keyword.
+ */
+public void test0113(){
+	String str =
+		"fin zzz";
+
+	String completeBehind = "fin";
+	int cursorLocation = str.lastIndexOf("fin") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:fin>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "fin";
+	String expectedReplacedSource = "fin";
+	String expectedUnitDisplayString =
+		"import <CompleteOnKeyword:fin>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'final' keyword.
+ */
+public void test0114(){
+	String str =
+		"final fin";
+
+	String completeBehind = "fin";
+	int cursorLocation = str.lastIndexOf("fin") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "fin";
+	String expectedReplacedSource = "fin";
+	String expectedUnitDisplayString =
+		"";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'final' keyword.
+ */
+public void test0115(){
+	String str =
+		"abstract fin";
+
+	String completeBehind = "fin";
+	int cursorLocation = str.lastIndexOf("fin") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "fin";
+	String expectedReplacedSource = "fin";
+	String expectedUnitDisplayString =
+		"";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'final' keyword.
+ */
+public void test0116(){
+	String str =
+		"public fin class X {}";
+
+	String completeBehind = "fin";
+	int cursorLocation = str.lastIndexOf("fin") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:fin>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "fin";
+	String expectedReplacedSource = "fin";
+	String expectedUnitDisplayString =
+		"import <CompleteOnKeyword:fin>;\n" +
+		"class X {\n" +
+		"  X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'final' keyword.
+ */
+public void test0117(){
+	String str =
+		"public class X {\n" +
+		"  fin\n" +
+		"}";
+
+	String completeBehind = "fin";
+	int cursorLocation = str.lastIndexOf("fin") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:fin>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "fin";
+	String expectedReplacedSource = "fin";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:fin>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'final' keyword.
+ */
+public void test0118(){
+	String str =
+		"public class X {\n" +
+		"  public fin\n" +
+		"}";
+
+	String completeBehind = "fin";
+	int cursorLocation = str.lastIndexOf("fin") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:fin>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "fin";
+	String expectedReplacedSource = "fin";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:fin>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'final' keyword.
+ */
+public void test0119(){
+	String str =
+		"public class X {\n" +
+		"  fin zzz\n" +
+		"}";
+
+	String completeBehind = "fin";
+	int cursorLocation = str.lastIndexOf("fin") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:fin>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "fin";
+	String expectedReplacedSource = "fin";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:fin>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'final' keyword.
+ */
+public void test0120(){
+	String str =
+		"public class X {\n" +
+		"  final fin\n" +
+		"}";
+
+	String completeBehind = "fin";
+	int cursorLocation = str.lastIndexOf("fin") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:fin>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "fin";
+	String expectedReplacedSource = "fin";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:fin>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'final' keyword.
+ */
+public void test0121(){
+	String str =
+		"public class X {\n" +
+		"  abstract fin\n" +
+		"}";
+
+	String completeBehind = "fin";
+	int cursorLocation = str.lastIndexOf("fin") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:fin>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "fin";
+	String expectedReplacedSource = "fin";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:fin>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'native' keyword.
+ */
+public void test0122(){
+	String str =
+		"public class X {\n" +
+		"  nat\n" +
+		"}";
+
+	String completeBehind = "nat";
+	int cursorLocation = str.lastIndexOf("nat") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:nat>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "nat";
+	String expectedReplacedSource = "nat";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:nat>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'native' keyword.
+ */
+public void test0123(){
+	String str =
+		"public class X {\n" +
+		"  public nat\n" +
+		"}";
+
+	String completeBehind = "nat";
+	int cursorLocation = str.lastIndexOf("nat") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:nat>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "nat";
+	String expectedReplacedSource = "nat";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:nat>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'native' keyword.
+ */
+public void test0124(){
+	String str =
+		"public class X {\n" +
+		"  transient nat\n" +
+		"}";
+
+	String completeBehind = "nat";
+	int cursorLocation = str.lastIndexOf("nat") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:nat>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "nat";
+	String expectedReplacedSource = "nat";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:nat>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'native' keyword.
+ */
+public void test0125(){
+	String str =
+		"public class X {\n" +
+		"  transient nat\n" +
+		"}";
+
+	String completeBehind = "nat";
+	int cursorLocation = str.lastIndexOf("nat") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:nat>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "nat";
+	String expectedReplacedSource = "nat";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:nat>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'native' keyword.
+ */
+public void test0126(){
+	String str =
+		"public class X {\n" +
+		"  volatile nat\n" +
+		"}";
+
+	String completeBehind = "nat";
+	int cursorLocation = str.lastIndexOf("nat") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:nat>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "nat";
+	String expectedReplacedSource = "nat";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:nat>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'strictfp' keyword.
+ */
+public void test0127(){
+	String str =
+		"public class X {\n" +
+		"  str\n" +
+		"}";
+
+	String completeBehind = "str";
+	int cursorLocation = str.lastIndexOf("str") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:str>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "str";
+	String expectedReplacedSource = "str";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:str>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'strictfp' keyword.
+ */
+public void test0128(){
+	String str =
+		"public class X {\n" +
+		"  public str\n" +
+		"}";
+
+	String completeBehind = "str";
+	int cursorLocation = str.lastIndexOf("str") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:str>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "str";
+	String expectedReplacedSource = "str";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:str>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'strictfp' keyword.
+ */
+public void test0129(){
+	String str =
+		"public class X {\n" +
+		"  transient str\n" +
+		"}";
+
+	String completeBehind = "str";
+	int cursorLocation = str.lastIndexOf("str") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:str>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "str";
+	String expectedReplacedSource = "str";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:str>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'strictfp' keyword.
+ */
+public void test0130(){
+	String str =
+		"public class X {\n" +
+		"  transient str\n" +
+		"}";
+
+	String completeBehind = "str";
+	int cursorLocation = str.lastIndexOf("str") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:str>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "str";
+	String expectedReplacedSource = "str";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:str>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'strictfp' keyword.
+ */
+public void test0131(){
+	String str =
+		"public class X {\n" +
+		"  volatile str\n" +
+		"}";
+
+	String completeBehind = "str";
+	int cursorLocation = str.lastIndexOf("str") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:str>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "str";
+	String expectedReplacedSource = "str";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:str>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'volatile' keyword.
+ */
+public void test0132(){
+	String str =
+		"public class X {\n" +
+		"  vol\n" +
+		"}";
+
+	String completeBehind = "vol";
+	int cursorLocation = str.lastIndexOf("vol") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:vol>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "vol";
+	String expectedReplacedSource = "vol";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:vol>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'volatile' keyword.
+ */
+public void test0133(){
+	String str =
+		"public class X {\n" +
+		"  public vol\n" +
+		"}";
+
+	String completeBehind = "vol";
+	int cursorLocation = str.lastIndexOf("vol") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:vol>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "vol";
+	String expectedReplacedSource = "vol";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:vol>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'volatile' keyword.
+ */
+public void test0134(){
+	String str =
+		"public class X {\n" +
+		"  transient vol\n" +
+		"}";
+
+	String completeBehind = "vol";
+	int cursorLocation = str.lastIndexOf("vol") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:vol>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "vol";
+	String expectedReplacedSource = "vol";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:vol>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'volatile' keyword.
+ */
+public void test0135(){
+	String str =
+		"public class X {\n" +
+		"  volatile vol\n" +
+		"}";
+
+	String completeBehind = "vol";
+	int cursorLocation = str.lastIndexOf("vol") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:vol>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "vol";
+	String expectedReplacedSource = "vol";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:vol>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'volatile' keyword.
+ */
+public void test0136(){
+	String str =
+		"public class X {\n" +
+		"  native vol\n" +
+		"}";
+
+	String completeBehind = "vol";
+	int cursorLocation = str.lastIndexOf("vol") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:vol>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "vol";
+	String expectedReplacedSource = "vol";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:vol>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'transient' keyword.
+ */
+public void test0137(){
+	String str =
+		"public class X {\n" +
+		"  tra\n" +
+		"}";
+
+	String completeBehind = "tra";
+	int cursorLocation = str.lastIndexOf("tra") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:tra>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "tra";
+	String expectedReplacedSource = "tra";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:tra>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'transient' keyword.
+ */
+public void test0138(){
+	String str =
+		"public class X {\n" +
+		"  public tra\n" +
+		"}";
+
+	String completeBehind = "tra";
+	int cursorLocation = str.lastIndexOf("tra") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:tra>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "tra";
+	String expectedReplacedSource = "tra";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:tra>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'transient' keyword.
+ */
+public void test0139(){
+	String str =
+		"public class X {\n" +
+		"  transient tra\n" +
+		"}";
+
+	String completeBehind = "tra";
+	int cursorLocation = str.lastIndexOf("tra") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:tra>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "tra";
+	String expectedReplacedSource = "tra";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:tra>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'transient' keyword.
+ */
+public void test0140(){
+	String str =
+		"public class X {\n" +
+		"  volatile tra\n" +
+		"}";
+
+	String completeBehind = "tra";
+	int cursorLocation = str.lastIndexOf("tra") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:tra>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "tra";
+	String expectedReplacedSource = "tra";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:tra>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'transient' keyword.
+ */
+public void test0141(){
+	String str =
+		"public class X {\n" +
+		"  native tra\n" +
+		"}";
+
+	String completeBehind = "tra";
+	int cursorLocation = str.lastIndexOf("tra") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:tra>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "tra";
+	String expectedReplacedSource = "tra";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:tra>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'synchronized' keyword.
+ */
+public void test0142(){
+	String str =
+		"public class X {\n" +
+		"  syn\n" +
+		"}";
+
+	String completeBehind = "syn";
+	int cursorLocation = str.lastIndexOf("syn") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:syn>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "syn";
+	String expectedReplacedSource = "syn";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:syn>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'synchronized' keyword.
+ */
+public void test0143(){
+	String str =
+		"public class X {\n" +
+		"  public syn\n" +
+		"}";
+
+	String completeBehind = "syn";
+	int cursorLocation = str.lastIndexOf("syn") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:syn>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "syn";
+	String expectedReplacedSource = "syn";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:syn>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'synchronized' keyword.
+ */
+public void test0144(){
+	String str =
+		"public class X {\n" +
+		"  transient syn\n" +
+		"}";
+
+	String completeBehind = "syn";
+	int cursorLocation = str.lastIndexOf("syn") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:syn>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "syn";
+	String expectedReplacedSource = "syn";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:syn>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'synchronized' keyword.
+ */
+public void test0145(){
+	String str =
+		"public class X {\n" +
+		"  transient syn\n" +
+		"}";
+
+	String completeBehind = "syn";
+	int cursorLocation = str.lastIndexOf("syn") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:syn>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "syn";
+	String expectedReplacedSource = "syn";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:syn>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'synchronized' keyword.
+ */
+public void test0146(){
+	String str =
+		"public class X {\n" +
+		"  volatile syn\n" +
+		"}";
+
+	String completeBehind = "syn";
+	int cursorLocation = str.lastIndexOf("syn") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:syn>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "syn";
+	String expectedReplacedSource = "syn";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:syn>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'synchronized' keyword.
+ */
+public void test0147(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    syn\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "syn";
+	int cursorLocation = str.lastIndexOf("syn") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:syn>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "syn";
+	expectedReplacedSource = "syn";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:syn>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'synchronized' keyword.
+ */
+public void test0148(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    if(syn\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "syn";
+	int cursorLocation = str.lastIndexOf("syn") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:syn>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "syn";
+	expectedReplacedSource = "syn";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:syn>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'static' keyword.
+ */
+public void test0149(){
+	String str =
+		"public class X {\n" +
+		"  sta\n" +
+		"}";
+
+	String completeBehind = "sta";
+	int cursorLocation = str.lastIndexOf("sta") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:sta>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "sta";
+	String expectedReplacedSource = "sta";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:sta>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'static' keyword.
+ */
+public void test0150(){
+	String str =
+		"public class X {\n" +
+		"  public sta\n" +
+		"}";
+
+	String completeBehind = "sta";
+	int cursorLocation = str.lastIndexOf("sta") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:sta>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "sta";
+	String expectedReplacedSource = "sta";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:sta>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'public' keyword.
+ */
+public void test0151(){
+	String str =
+		"pub";
+
+	String completeBehind = "pub";
+	int cursorLocation = str.lastIndexOf("pub") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:pub>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pub";
+	String expectedReplacedSource = "pub";
+	String expectedUnitDisplayString =
+		"import <CompleteOnKeyword:pub>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'public' keyword.
+ */
+public void test0152(){
+	String str =
+		"final pub";
+
+	String completeBehind = "pub";
+	int cursorLocation = str.lastIndexOf("pub") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:pub>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pub";
+	String expectedReplacedSource = "pub";
+	String expectedUnitDisplayString =
+		"import <CompleteOnKeyword:pub>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'public' keyword.
+ */
+public void test0153(){
+	String str =
+		"public pub";
+
+	String completeBehind = "pub";
+	int cursorLocation = str.lastIndexOf("pub") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pub";
+	String expectedReplacedSource = "pub";
+	String expectedUnitDisplayString =
+		"";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'public' keyword.
+ */
+public void test0154(){
+	String str =
+		"private pub";
+
+	String completeBehind = "pub";
+	int cursorLocation = str.lastIndexOf("pub") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:pub>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pub";
+	String expectedReplacedSource = "pub";
+	String expectedUnitDisplayString =
+		"import <CompleteOnKeyword:pub>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'public' keyword.
+ */
+public void test0155(){
+	String str =
+		"public class X{}\n" +
+		"pub";
+
+	String completeBehind = "pub";
+	int cursorLocation = str.lastIndexOf("pub") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pub";
+	String expectedReplacedSource = "pub";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'public' keyword.
+ */
+public void test0156(){
+	String str =
+		"public class X{\n" +
+		"  pub\n" +
+		"}";
+
+	String completeBehind = "pub";
+	int cursorLocation = str.lastIndexOf("pub") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:pub>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pub";
+	String expectedReplacedSource = "pub";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:pub>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'public' keyword.
+ */
+public void test0157(){
+	String str =
+		"public class X{\n" +
+		"  public pub\n" +
+		"}";
+
+	String completeBehind = "pub";
+	int cursorLocation = str.lastIndexOf("pub") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:pub>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pub";
+	String expectedReplacedSource = "pub";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:pub>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'public' keyword.
+ */
+public void test0158(){
+	String str =
+		"public class X{\n" +
+		"  private pub\n" +
+		"}";
+
+	String completeBehind = "pub";
+	int cursorLocation = str.lastIndexOf("pub") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:pub>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pub";
+	String expectedReplacedSource = "pub";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:pub>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'public' keyword.
+ */
+public void test0159(){
+	String str =
+		"public class X{\n" +
+		"  protected pub\n" +
+		"}";
+
+	String completeBehind = "pub";
+	int cursorLocation = str.lastIndexOf("pub") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:pub>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pub";
+	String expectedReplacedSource = "pub";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:pub>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'public' keyword.
+ */
+public void test0160(){
+	String str =
+		"public class X{\n" +
+		"  abstract pub\n" +
+		"}";
+
+	String completeBehind = "pub";
+	int cursorLocation = str.lastIndexOf("pub") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:pub>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pub";
+	String expectedReplacedSource = "pub";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:pub>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'protected' keyword.
+ */
+public void test0161(){
+	String str =
+		"pro";
+
+	String completeBehind = "pro";
+	int cursorLocation = str.lastIndexOf("") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'protected' keyword.
+ */
+public void test0162(){
+	String str =
+		"final pro";
+
+	String completeBehind = "pro";
+	int cursorLocation = str.lastIndexOf("pro") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pro";
+	String expectedReplacedSource = "pro";
+	String expectedUnitDisplayString =
+		"";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'protected' keyword.
+ */
+public void test0163(){
+	String str =
+		"public pro";
+
+	String completeBehind = "pro";
+	int cursorLocation = str.lastIndexOf("pro") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pro";
+	String expectedReplacedSource = "pro";
+	String expectedUnitDisplayString =
+		"";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'protected' keyword.
+ */
+public void test0164(){
+	String str =
+		"private pro";
+
+	String completeBehind = "pro";
+	int cursorLocation = str.lastIndexOf("pro") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pro";
+	String expectedReplacedSource = "pro";
+	String expectedUnitDisplayString =
+		"";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'protected' keyword.
+ */
+public void test0165(){
+	String str =
+		"public class X{}\n" +
+		"pro";
+
+	String completeBehind = "pro";
+	int cursorLocation = str.lastIndexOf("pro") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pro";
+	String expectedReplacedSource = "pro";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'protected' keyword.
+ */
+public void test0166(){
+	String str =
+		"public class X{\n" +
+		"  pro\n" +
+		"}";
+
+	String completeBehind = "pro";
+	int cursorLocation = str.lastIndexOf("pro") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:pro>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pro";
+	String expectedReplacedSource = "pro";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:pro>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'protected' keyword.
+ */
+public void test0167(){
+	String str =
+		"public class X{\n" +
+		"  public pro\n" +
+		"}";
+
+	String completeBehind = "pro";
+	int cursorLocation = str.lastIndexOf("pro") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:pro>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pro";
+	String expectedReplacedSource = "pro";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:pro>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'protected' keyword.
+ */
+public void test0168(){
+	String str =
+		"public class X{\n" +
+		"  private pro\n" +
+		"}";
+
+	String completeBehind = "pro";
+	int cursorLocation = str.lastIndexOf("pro") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:pro>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pro";
+	String expectedReplacedSource = "pro";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:pro>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'protected' keyword.
+ */
+public void test0169(){
+	String str =
+		"public class X{\n" +
+		"  protected pro\n" +
+		"}";
+
+	String completeBehind = "pro";
+	int cursorLocation = str.lastIndexOf("pro") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:pro>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pro";
+	String expectedReplacedSource = "pro";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:pro>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'protected' keyword.
+ */
+public void test0170(){
+	String str =
+		"public class X{\n" +
+		"  abstract pro\n" +
+		"}";
+
+	String completeBehind = "pro";
+	int cursorLocation = str.lastIndexOf("pro") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:pro>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pro";
+	String expectedReplacedSource = "pro";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:pro>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'private' keyword.
+ */
+public void test0171(){
+	String str =
+		"pri";
+
+	String completeBehind = "pri";
+	int cursorLocation = str.lastIndexOf("") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'private' keyword.
+ */
+public void test0172(){
+	String str =
+		"final pri";
+
+	String completeBehind = "pri";
+	int cursorLocation = str.lastIndexOf("pri") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pri";
+	String expectedReplacedSource = "pri";
+	String expectedUnitDisplayString =
+		"";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'private' keyword.
+ */
+public void test0173(){
+	String str =
+		"public pri";
+
+	String completeBehind = "pri";
+	int cursorLocation = str.lastIndexOf("pri") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pri";
+	String expectedReplacedSource = "pri";
+	String expectedUnitDisplayString =
+		"";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'private' keyword.
+ */
+public void test0174(){
+	String str =
+		"private pri";
+
+	String completeBehind = "pri";
+	int cursorLocation = str.lastIndexOf("pri") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pri";
+	String expectedReplacedSource = "pri";
+	String expectedUnitDisplayString =
+		"";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'private' keyword.
+ */
+public void test0175(){
+	String str =
+		"public class X{}\n" +
+		"pri";
+
+	String completeBehind = "pri";
+	int cursorLocation = str.lastIndexOf("pri") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pri";
+	String expectedReplacedSource = "pri";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'private' keyword.
+ */
+public void test0176(){
+	String str =
+		"public class X{\n" +
+		"  pri\n" +
+		"}";
+
+	String completeBehind = "pri";
+	int cursorLocation = str.lastIndexOf("pri") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:pri>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pri";
+	String expectedReplacedSource = "pri";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:pri>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'private' keyword.
+ */
+public void test0177(){
+	String str =
+		"public class X{\n" +
+		"  public pri\n" +
+		"}";
+
+	String completeBehind = "pri";
+	int cursorLocation = str.lastIndexOf("pri") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:pri>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pri";
+	String expectedReplacedSource = "pri";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:pri>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'private' keyword.
+ */
+public void test0178(){
+	String str =
+		"public class X{\n" +
+		"  private pri\n" +
+		"}";
+
+	String completeBehind = "pri";
+	int cursorLocation = str.lastIndexOf("pri") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:pri>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pri";
+	String expectedReplacedSource = "pri";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:pri>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'private' keyword.
+ */
+public void test0179(){
+	String str =
+		"public class X{\n" +
+		"  protected pri\n" +
+		"}";
+
+	String completeBehind = "pri";
+	int cursorLocation = str.lastIndexOf("pri") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:pri>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pri";
+	String expectedReplacedSource = "pri";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:pri>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'private' keyword.
+ */
+public void test0180(){
+	String str =
+		"public class X{\n" +
+		"  abstract pri\n" +
+		"}";
+
+	String completeBehind = "pri";
+	int cursorLocation = str.lastIndexOf("pri") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:pri>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pri";
+	String expectedReplacedSource = "pri";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:pri>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'super' keyword.
+ */
+public void test0181(){
+	String str =
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"     sup\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "sup";
+	int cursorLocation = str.lastIndexOf("sup") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:sup>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "sup";
+	expectedReplacedSource = "sup";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:sup>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'this' keyword.
+ */
+public void test0182(){
+	String str =
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"     thi\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "thi";
+	int cursorLocation = str.lastIndexOf("thi") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:thi>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "thi";
+	expectedReplacedSource = "thi";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:thi>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'true' keyword.
+ */
+public void test0183(){
+	String str =
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"     tru\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "tru";
+	int cursorLocation = str.lastIndexOf("tru") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:tru>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "tru";
+	expectedReplacedSource = "tru";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:tru>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'false' keyword.
+ */
+public void test0184(){
+	String str =
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"     fal\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "fal";
+	int cursorLocation = str.lastIndexOf("fal") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:fal>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "fal";
+	expectedReplacedSource = "fal";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:fal>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'null' keyword.
+ */
+public void test0185(){
+	String str =
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"     nul\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "nul";
+	int cursorLocation = str.lastIndexOf("nul") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:nul>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "nul";
+	expectedReplacedSource = "nul";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:nul>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'instanceof' keyword.
+ */
+public void test0186(){
+	String str =
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"     if(zzz ins\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "ins";
+	int cursorLocation = str.lastIndexOf("ins") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnKeyword:ins>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "ins";
+	expectedReplacedSource = "ins";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnKeyword:ins>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'instanceof' keyword.
+ */
+public void test0187(){
+	String str =
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"     ins\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "ins";
+	int cursorLocation = str.lastIndexOf("ins") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:ins>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "ins";
+	expectedReplacedSource = "ins";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:ins>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'instanceof' keyword.
+ */
+public void test0188(){
+	String str =
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"     if(zzz zzz ins\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "ins";
+	int cursorLocation = str.lastIndexOf("ins") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:ins>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "ins";
+	expectedReplacedSource = "ins";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    zzz zzz;\n" +
+		"    <CompleteOnName:ins>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'while' keyword.
+ */
+public void test0189(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    do{\n" +
+		"    } whi\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "whi";
+	int cursorLocation = str.lastIndexOf("whi") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnKeyword:whi>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "whi";
+	expectedReplacedSource = "whi";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnKeyword:whi>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'catch' keyword.
+ */
+public void test0190(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"    try {\n" +
+		"    } catch(E e) {\n" +
+		"    } cat\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "cat";
+	int cursorLocation = str.lastIndexOf("cat") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:cat>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "cat";
+	expectedReplacedSource = "cat";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:cat>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'finally' keyword.
+ */
+public void test0191(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"     try {" +
+		"     } catch(E e) {" +
+		"     } fin" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "fin";
+	int cursorLocation = str.lastIndexOf("fin") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:fin>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "fin";
+	expectedReplacedSource = "fin";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:fin>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'finally' keyword.
+ */
+public void test0192(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"     try {" +
+		"     } finally {" +
+		"     } fin" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "fin";
+	int cursorLocation = str.lastIndexOf("fin") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:fin>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "fin";
+	expectedReplacedSource = "fin";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:fin>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'this' keyword.
+ */
+public void test0193(){
+	String str =
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"     X.thi\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "thi";
+	int cursorLocation = str.lastIndexOf("thi") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:X.thi>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "thi";
+	expectedReplacedSource = "X.thi";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:X.thi>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/////////////////////////////////////////////////////////////////////////////////////////////////////
+/////////////////////////////////////////////////////////////////////////////////////////////////////
+/////////////////////////////////////////////////////////////////////////////////////////////////////
+/////////////////////////////////////////////////////////////////////////////////////////////////////
+/////////////////////////////////////////////////////////////////////////////////////////////////////
+/////////////////////////////////////////////////////////////////////////////////////////////////////
+/////////////////////////////////////////////////////////////////////////////////////////////////////
+/////////////////////////////////////////////////////////////////////////////////////////////////////
+/////////////////////////////////////////////////////////////////////////////////////////////////////
+/////////////////////////////////////////////////////////////////////////////////////////////////////
+/////////////////////////////////////////////////////////////////////////////////////////////////////
+/////////////////////////////////////////////////////////////////////////////////////////////////////
+/////////////////////////////////////////////////////////////////////////////////////////////////////
+/////////////////////////////////////////////////////////////////////////////////////////////////////
+/////////////////////////////////////////////////////////////////////////////////////////////////////
+/////////////////////////////////////////////////////////////////////////////////////////////////////
+/////////////////////////////////////////////////////////////////////////////////////////////////////
+/////////////////////////////////////////////////////////////////////////////////////////////////////
+/////////////////////////////////////////////////////////////////////////////////////////////////////
+/////////////////////////////////////////////////////////////////////////////////////////////////////
+/////////////////////////////////////////////////////////////////////////////////////////////////////
+/////////////////////////////////////////////////////////////////////////////////////////////////////
+/////////////////////////////////////////////////////////////////////////////////////////////////////
+/////////////////////////////////////////////////////////////////////////////////////////////////////
+/////////////////////////////////////////////////////////////////////////////////////////////////////
+/////////////////////////////////////////////////////////////////////////////////////////////////////
+/////////////////////////////////////////////////////////////////////////////////////////////////////
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0194(){
+	String str =
+		"#\n" +
+		"abst";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.indexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:abst>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "abst";
+	String expectedReplacedSource = "abst";
+	String expectedUnitDisplayString =
+		"import <CompleteOnKeyword:abst>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0195(){
+	String str =
+		"#\n" +
+		"abst zzz";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.indexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:abst>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "abst";
+	String expectedReplacedSource = "abst";
+	String expectedUnitDisplayString =
+		"import <CompleteOnKeyword:abst>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0196(){
+	String str =
+		"#\n" +
+		"package p;\n" +
+		"abst";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.indexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:abst>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "abst";
+	String expectedReplacedSource = "abst";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"import <CompleteOnKeyword:abst>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0197(){
+	String str =
+		"#\n" +
+		"package p;\n" +
+		"abst zzz";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.indexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:abst>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "abst";
+	String expectedReplacedSource = "abst";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"import <CompleteOnKeyword:abst>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0198(){
+	String str =
+		"#\n" +
+		"package p;\n" +
+		"import yyy;\n" +
+		"abst";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.indexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:abst>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "abst";
+	String expectedReplacedSource = "abst";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"import yyy;\n" +
+		"import <CompleteOnKeyword:abst>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0199(){
+	String str =
+		"#\n" +
+		"package p;\n" +
+		"import yyy;\n" +
+		"abst zzz";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.indexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:abst>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "abst";
+	String expectedReplacedSource = "abst";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"import yyy;\n" +
+		"import <CompleteOnKeyword:abst>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0200(){
+	String str =
+		"#\n" +
+		"package p;\n" +
+		"import yyy;\n" +
+		"public abst";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.indexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:abst>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "abst";
+	String expectedReplacedSource = "abst";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"import yyy;\n" +
+		"import <CompleteOnKeyword:abst>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0201(){
+	String str =
+		"#\n" +
+		"package p;\n" +
+		"import yyy;\n" +
+		"public abst zzz";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.indexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:abst>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "abst";
+	String expectedReplacedSource = "abst";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"import yyy;\n" +
+		"import <CompleteOnKeyword:abst>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0202(){
+	String str =
+		"#\n" +
+		"package p;\n" +
+		"import yyy;\n" +
+		"abstract abst";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.lastIndexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "abst";
+	String expectedReplacedSource = "abst";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"import yyy;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0203(){
+	String str =
+		"#\n" +
+		"package p;\n" +
+		"import yyy;\n" +
+		"abstract abst zzz";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.lastIndexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "abst";
+	String expectedReplacedSource = "abst";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"import yyy;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0204(){
+	String str =
+		"#\n" +
+		"package p;\n" +
+		"import \n" +
+		"abst";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.lastIndexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnImport:abst>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "abst";
+	String expectedReplacedSource = "abst";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"import <CompleteOnImport:abst>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0205(){
+	String str =
+		"#\n" +
+		"package p;\n" +
+		"import yyy;\n" +
+		"public class X {}\n" +
+		"abst";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.lastIndexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:abst>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "abst";
+	String expectedReplacedSource = "abst";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"import yyy;\n" +
+		"import <CompleteOnKeyword:abst>;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0206(){
+	String str =
+		"#\n" +
+		"package p;\n" +
+		"import yyy;\n" +
+		"public class X {}\n" +
+		"abst zzz";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.lastIndexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:abst>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "abst";
+	String expectedReplacedSource = "abst";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"import yyy;\n" +
+		"import <CompleteOnKeyword:abst>;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0207(){
+	String str =
+		"#\n" +
+		"package p;\n" +
+		"import yyy;\n" +
+		"final abst";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.lastIndexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "abst";
+	String expectedReplacedSource = "abst";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"import yyy;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0208(){
+	String str =
+		"#\n" +
+		"package p;\n" +
+		"public class X {\n" +
+		"  abst\n" +
+		"}\n";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.lastIndexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:abst>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "abst";
+	String expectedReplacedSource = "abst";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  <CompleteOnType:abst>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0209(){
+	String str =
+		"#\n" +
+		"package p;\n" +
+		"public class X {\n" +
+		"  abst zzz\n" +
+		"}\n";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.lastIndexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:abst>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "abst";
+	String expectedReplacedSource = "abst";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  <CompleteOnType:abst>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0210(){
+	String str =
+		"#\n" +
+		"package p;\n" +
+		"public class X {\n" +
+		"  public abst zzz\n" +
+		"}\n";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.lastIndexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:abst>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "abst";
+	String expectedReplacedSource = "abst";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  <CompleteOnType:abst>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0211(){
+	String str =
+		"#\n" +
+		"package p;\n" +
+		"public class X {\n" +
+		"  final abst\n" +
+		"}\n";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.lastIndexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:abst>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "abst";
+	String expectedReplacedSource = "abst";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  <CompleteOnType:abst>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0212(){
+	String str =
+		"#\n" +
+		"package p;\n" +
+		"public class X {\n" +
+		"  abstract abst\n" +
+		"}\n";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.lastIndexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:abst>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "abst";
+	String expectedReplacedSource = "abst";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  <CompleteOnType:abst>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0213(){
+	String str =
+		"#\n" +
+		"package p;\n" +
+		"public class X {\n" +
+		"  static abst\n" +
+		"}\n";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.lastIndexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:abst>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "abst";
+	String expectedReplacedSource = "abst";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  <CompleteOnType:abst>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  <clinit>() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0214(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"    #\n" +
+		"    abst\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.lastIndexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:abst>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "abst";
+	expectedReplacedSource = "abst";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:abst>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'abstract' keyword.
+ */
+public void test0216(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"    #\n" +
+		"    abst zzz\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "abst";
+	int cursorLocation = str.lastIndexOf("abst") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:abst>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "abst";
+	expectedReplacedSource = "abst";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:abst>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'break' keyword.
+ */
+public void test0217(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"    #\n" +
+		"    bre\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "bre";
+	int cursorLocation = str.lastIndexOf("bre") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:bre>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "bre";
+	expectedReplacedSource = "bre";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:bre>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'break' keyword.
+ */
+public void test0218(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"    #\n" +
+		"    for(int i; i < 10; i++) {\n" +
+		"      bre\n" +
+		"    }\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "bre";
+	int cursorLocation = str.lastIndexOf("bre") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:bre>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "bre";
+	expectedReplacedSource = "bre";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    int i;\n" +
+		"    {\n" +
+		"      <CompleteOnName:bre>;\n" +
+		"    }\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'case' keyword.
+ */
+public void test0219(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"    #\n" +
+		"    cas\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "cas";
+	int cursorLocation = str.lastIndexOf("cas") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:cas>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "cas";
+	expectedReplacedSource = "cas";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:cas>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'case' keyword.
+ */
+public void test0220(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"    #\n" +
+		"    switch(0) {\n" +
+		"      cas\n" +
+		"    }\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "cas";
+	int cursorLocation = str.lastIndexOf("cas") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:cas>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "cas";
+	expectedReplacedSource = "cas";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    {\n" +
+		"      <CompleteOnName:cas>;\n" +
+		"    }\n"+
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'catch' keyword.
+ */
+public void test0221(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"    #\n" +
+		"    cat\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "cat";
+	int cursorLocation = str.lastIndexOf("cat") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:cat>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "cat";
+	expectedReplacedSource = "cat";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:cat>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'catch' keyword.
+ */
+public void test0222(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"    #\n" +
+		"    try {\n" +
+		"    } cat\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "cat";
+	int cursorLocation = str.lastIndexOf("cat") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnKeyword:cat>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "cat";
+	expectedReplacedSource = "cat";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnKeyword:cat>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'class' keyword.
+ */
+public void test0223(){
+	String str =
+		"#\n" +
+		"cla";
+
+	String completeBehind = "cla";
+	int cursorLocation = str.lastIndexOf("cla") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:cla>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "cla";
+	String expectedReplacedSource = "cla";
+	String expectedUnitDisplayString =
+		"import <CompleteOnKeyword:cla>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'class' keyword.
+ */
+public void test0224(){
+	String str =
+		"#\n" +
+		"public cla";
+
+	String completeBehind = "cla";
+	int cursorLocation = str.lastIndexOf("cla") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:cla>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "cla";
+	String expectedReplacedSource = "cla";
+	String expectedUnitDisplayString =
+		"import <CompleteOnKeyword:cla>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'class' keyword.
+ */
+public void test0225(){
+	String str =
+		"#\n" +
+		"public final cla";
+
+	String completeBehind = "cla";
+	int cursorLocation = str.lastIndexOf("cla") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:cla>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "cla";
+	String expectedReplacedSource = "cla";
+	String expectedUnitDisplayString =
+		"import <CompleteOnKeyword:cla>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'class' keyword.
+ */
+public void test0226(){
+	String str =
+		"#\n" +
+		"public final cla X";
+
+	String completeBehind = "cla";
+	int cursorLocation = str.lastIndexOf("cla") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:cla>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "cla";
+	String expectedReplacedSource = "cla";
+	String expectedUnitDisplayString =
+		"import <CompleteOnKeyword:cla>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'class' keyword.
+ */
+public void test0227(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  cla\n" +
+		"}";
+
+	String completeBehind = "cla";
+	int cursorLocation = str.lastIndexOf("cla") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:cla>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "cla";
+	String expectedReplacedSource = "cla";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:cla>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'class' keyword.
+ */
+public void test0228(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  public cla\n" +
+		"}";
+
+	String completeBehind = "cla";
+	int cursorLocation = str.lastIndexOf("cla") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:cla>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "cla";
+	String expectedReplacedSource = "cla";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:cla>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'class' keyword.
+ */
+public void test0229(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  public final cla\n" +
+		"}";
+
+	String completeBehind = "cla";
+	int cursorLocation = str.lastIndexOf("cla") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:cla>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "cla";
+	String expectedReplacedSource = "cla";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:cla>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'class' keyword.
+ */
+public void test0230(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  public final cla Y\n" +
+		"}";
+
+	String completeBehind = "cla";
+	int cursorLocation = str.lastIndexOf("cla") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:cla>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "cla";
+	String expectedReplacedSource = "cla";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:cla>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'class' keyword.
+ */
+public void test0231(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    #\n" +
+		"    cla\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "cla";
+	int cursorLocation = str.lastIndexOf("cla") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:cla>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "cla";
+	expectedReplacedSource = "cla";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:cla>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'class' keyword.
+ */
+public void test0232(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    #\n" +
+		"    final cla\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "cla";
+	int cursorLocation = str.lastIndexOf("cla") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:cla>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "cla";
+	expectedReplacedSource = "cla";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:cla>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'class' keyword.
+ */
+public void test0233(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    #\n" +
+		"    final cla Y\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "cla";
+	int cursorLocation = str.lastIndexOf("cla") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:cla>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "cla";
+	expectedReplacedSource = "cla";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:cla>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'continue' keyword.
+ */
+public void test0234(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"    #\n" +
+		"    con\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "con";
+	int cursorLocation = str.lastIndexOf("con") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:con>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "con";
+	expectedReplacedSource = "con";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:con>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'continue' keyword.
+ */
+public void test0235(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"    #\n" +
+		"    for(int i; i < 5; i++) {\n" +
+		"      con\n" +
+		"    }\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "con";
+	int cursorLocation = str.lastIndexOf("con") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:con>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "con";
+	expectedReplacedSource = "con";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    int i;\n" +
+		"    {\n" +
+		"      <CompleteOnName:con>;\n" +
+		"    }\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'default' keyword.
+ */
+public void test0236(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"    #\n" +
+		"    def\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "def";
+	int cursorLocation = str.lastIndexOf("def") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:def>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "def";
+	expectedReplacedSource = "def";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:def>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'default' keyword.
+ */
+public void test0237(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"    #\n" +
+		"    switch(0) {\n" +
+		"      case 1 : break;\n" +
+		"      def\n" +
+		"    }\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "def";
+	int cursorLocation = str.lastIndexOf("def") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:def>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "def";
+	expectedReplacedSource = "def";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    {\n" +
+		"      <CompleteOnName:def>;\n" +
+		"    }\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'do' keyword.
+ */
+public void test0238(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"    #\n" +
+		"    do\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "do";
+	int cursorLocation = str.lastIndexOf("do") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:do>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "do";
+	expectedReplacedSource = "do";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:do>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'else' keyword.
+ */
+public void test0239(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"    #\n" +
+		"    els\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "els";
+	int cursorLocation = str.lastIndexOf("els") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:els>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "els";
+	expectedReplacedSource = "els";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:els>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'else' keyword.
+ */
+public void test0240(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"    #\n" +
+		"    if(true) {\n" +
+		"    } els\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "els";
+	int cursorLocation = str.lastIndexOf("els") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:els>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "els";
+	expectedReplacedSource = "els";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:els>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'extends' keyword.
+ */
+public void test0241(){
+	String str =
+		"#\n" +
+		"ext";
+
+	String completeBehind = "ext";
+	int cursorLocation = str.lastIndexOf("ext") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "ext";
+	String expectedReplacedSource = "ext";
+	String expectedUnitDisplayString =
+		"";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'extends' keyword.
+ */
+public void test0242(){
+	String str =
+		"#\n" +
+		"X ext";
+
+	String completeBehind = "ext";
+	int cursorLocation = str.lastIndexOf("ext") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "ext";
+	String expectedReplacedSource = "ext";
+	String expectedUnitDisplayString =
+		"";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'extends' keyword.
+ */
+public void test0243(){
+	String str =
+		"#\n" +
+		"ext Y";
+
+	String completeBehind = "ext";
+	int cursorLocation = str.lastIndexOf("ext") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "ext";
+	String expectedReplacedSource = "ext";
+	String expectedUnitDisplayString =
+		"";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'extends' keyword.
+ */
+public void test0244(){
+	String str =
+		"#\n" +
+		"class X ext";
+
+	String completeBehind = "ext";
+	int cursorLocation = str.lastIndexOf("ext") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:ext>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "ext";
+	String expectedReplacedSource = "ext";
+	String expectedUnitDisplayString =
+		"class X extends <CompleteOnKeyword:ext> {\n" +
+		"  X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'extends' keyword.
+ */
+public void test0245(){
+	String str =
+		"#\n" +
+		"class X ext Y";
+
+	String completeBehind = "ext";
+	int cursorLocation = str.lastIndexOf("ext") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:ext>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "ext";
+	String expectedReplacedSource = "ext";
+	String expectedUnitDisplayString =
+		"class X extends <CompleteOnKeyword:ext> {\n" +
+		"  X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'extends' keyword.
+ */
+public void test0246(){
+	String str =
+		"#\n" +
+		"class X ext Y {";
+
+	String completeBehind = "ext";
+	int cursorLocation = str.lastIndexOf("ext") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:ext>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "ext";
+	String expectedReplacedSource = "ext";
+	String expectedUnitDisplayString =
+		"class X extends <CompleteOnKeyword:ext> {\n" +
+		"  {\n" +
+		"  }\n" +
+		"  X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'extends' keyword.
+ */
+public void test0247(){
+	String str =
+		"#\n" +
+		"class X extends Y ext";
+
+	String completeBehind = "ext";
+	int cursorLocation = str.lastIndexOf("ext") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:ext>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "ext";
+	String expectedReplacedSource = "ext";
+	String expectedUnitDisplayString =
+		"class X extends <CompleteOnKeyword:ext> {\n" +
+		"  X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'extends' keyword.
+ */
+public void test0248(){
+	String str =
+		"#\n" +
+		"class X implements Y ext";
+
+	String completeBehind = "ext";
+	int cursorLocation = str.lastIndexOf("ext") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "ext";
+	String expectedReplacedSource = "ext";
+	String expectedUnitDisplayString =
+		"class X implements Y {\n" +
+		"  X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'finally' keyword.
+ */
+public void test0249(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"    #\n" +
+		"    fin" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "fin";
+	int cursorLocation = str.lastIndexOf("fin") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:fin>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "fin";
+	expectedReplacedSource = "fin";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:fin>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'finally' keyword.
+ */
+public void test0250(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"    #\n" +
+		"    try {" +
+		"    } fin" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "fin";
+	int cursorLocation = str.lastIndexOf("fin") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnKeyword:fin>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "fin";
+	expectedReplacedSource = "fin";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnKeyword:fin>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'for' keyword.
+ */
+public void test0251(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"    #\n" +
+		"    for" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "for";
+	int cursorLocation = str.lastIndexOf("for") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:for>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "for";
+	expectedReplacedSource = "for";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:for>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'if' keyword.
+ */
+public void test0252(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"    #\n" +
+		"    if" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "if";
+	int cursorLocation = str.lastIndexOf("if") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:if>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "if";
+	expectedReplacedSource = "if";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:if>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'switch' keyword.
+ */
+public void test0253(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"    #\n" +
+		"    swi" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "swi";
+	int cursorLocation = str.lastIndexOf("swi") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:swi>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "swi";
+	expectedReplacedSource = "swi";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:swi>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'implements' keyword.
+ */
+public void test0254(){
+	String str =
+		"#\n" +
+		"impl";
+
+	String completeBehind = "impl";
+	int cursorLocation = str.lastIndexOf("impl") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "impl";
+	String expectedReplacedSource = "impl";
+	String expectedUnitDisplayString =
+		"";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'implements' keyword.
+ */
+public void test0255(){
+	String str =
+		"#\n" +
+		"X impl";
+
+	String completeBehind = "impl";
+	int cursorLocation = str.lastIndexOf("impl") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "impl";
+	String expectedReplacedSource = "impl";
+	String expectedUnitDisplayString =
+		"";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'implements' keyword.
+ */
+public void test0256(){
+	String str =
+		"#\n" +
+		"impl Y";
+
+	String completeBehind = "impl";
+	int cursorLocation = str.lastIndexOf("impl") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "impl";
+	String expectedReplacedSource = "impl";
+	String expectedUnitDisplayString =
+		"";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'implements' keyword.
+ */
+public void test0257(){
+	String str =
+		"#\n" +
+		"class X impl";
+
+	String completeBehind = "impl";
+	int cursorLocation = str.lastIndexOf("impl") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:impl>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "impl";
+	String expectedReplacedSource = "impl";
+	String expectedUnitDisplayString =
+		"class X extends <CompleteOnKeyword:impl> {\n" +
+		"  X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'implements' keyword.
+ */
+public void test0258(){
+	String str =
+		"#\n" +
+		"class X impl Y";
+
+	String completeBehind = "impl";
+	int cursorLocation = str.lastIndexOf("impl") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:impl>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "impl";
+	String expectedReplacedSource = "impl";
+	String expectedUnitDisplayString =
+		"class X extends <CompleteOnKeyword:impl> {\n" +
+		"  X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'implements' keyword.
+ */
+public void test0259(){
+	String str =
+		"#\n" +
+		"class X impl Y {";
+
+	String completeBehind = "impl";
+	int cursorLocation = str.lastIndexOf("impl") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:impl>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "impl";
+	String expectedReplacedSource = "impl";
+	String expectedUnitDisplayString =
+		"class X extends <CompleteOnKeyword:impl> {\n" +
+		"  {\n" +
+		"  }\n" +
+		"  X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'implements' keyword.
+ */
+public void test0260(){
+	String str =
+		"#\n" +
+		"class X extends Y impl";
+
+	String completeBehind = "impl";
+	int cursorLocation = str.lastIndexOf("impl") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:impl>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "impl";
+	String expectedReplacedSource = "impl";
+	String expectedUnitDisplayString =
+		"class X extends <CompleteOnKeyword:impl> {\n" +
+		"  X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'implements' keyword.
+ */
+public void test0261(){
+	String str =
+		"#\n" +
+		"class X implements Y impl";
+
+	String completeBehind = "impl";
+	int cursorLocation = str.lastIndexOf("impl") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "impl";
+	String expectedReplacedSource = "impl";
+	String expectedUnitDisplayString =
+		"class X implements Y {\n" +
+		"  X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'import' keyword.
+ */
+public void test0262(){
+	String str =
+		"#\n" +
+		"impo";
+
+	String completeBehind = "impo";
+	int cursorLocation = str.lastIndexOf("impo") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:impo>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "impo";
+	String expectedReplacedSource = "impo";
+	String expectedUnitDisplayString =
+		"import <CompleteOnKeyword:impo>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'import' keyword.
+ */
+public void test0263(){
+	String str =
+		"#\n" +
+		"package p;\n" +
+		"impo";
+
+	String completeBehind = "impo";
+	int cursorLocation = str.lastIndexOf("impo") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:impo>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "impo";
+	String expectedReplacedSource = "impo";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"import <CompleteOnKeyword:impo>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'import' keyword.
+ */
+public void test0264(){
+	String str =
+		"#\n" +
+		"package p;\n" +
+		"import p2.Y;\n" +
+		"impo";
+
+	String completeBehind = "impo";
+	int cursorLocation = str.lastIndexOf("impo") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:impo>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "impo";
+	String expectedReplacedSource = "impo";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"import p2.Y;\n" +
+		"import <CompleteOnKeyword:impo>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'import' keyword.
+ */
+public void test0265(){
+	String str =
+		"#\n" +
+		"impo p2.Y";
+
+	String completeBehind = "impo";
+	int cursorLocation = str.lastIndexOf("impo") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:impo>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "impo";
+	String expectedReplacedSource = "impo";
+	String expectedUnitDisplayString =
+		"import <CompleteOnKeyword:impo>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'interface' keyword.
+ */
+public void test0266(){
+	String str =
+		"#\n" +
+		"int";
+
+	String completeBehind = "int";
+	int cursorLocation = str.lastIndexOf("int") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:int>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "int";
+	String expectedReplacedSource = "int";
+	String expectedUnitDisplayString =
+		"import <CompleteOnKeyword:int>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'interface' keyword.
+ */
+public void test0267(){
+	String str =
+		"#\n" +
+		"public int";
+
+	String completeBehind = "int";
+	int cursorLocation = str.lastIndexOf("int") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:int>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "int";
+	String expectedReplacedSource = "int";
+	String expectedUnitDisplayString =
+		"import <CompleteOnKeyword:int>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'interface' keyword.
+ */
+public void test0268(){
+	String str =
+		"#\n" +
+		"public abstract int";
+
+	String completeBehind = "int";
+	int cursorLocation = str.lastIndexOf("int") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:int>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "int";
+	String expectedReplacedSource = "int";
+	String expectedUnitDisplayString =
+		"import <CompleteOnKeyword:int>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'interface' keyword.
+ */
+public void test0269(){
+	String str =
+		"#\n" +
+		"public abstract int X";
+
+	String completeBehind = "int";
+	int cursorLocation = str.lastIndexOf("int") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:int>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "int";
+	String expectedReplacedSource = "int";
+	String expectedUnitDisplayString =
+		"import <CompleteOnKeyword:int>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'interface' keyword.
+ */
+public void test0270(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  int\n" +
+		"}";
+
+	String completeBehind = "int";
+	int cursorLocation = str.lastIndexOf("int") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:int>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "int";
+	String expectedReplacedSource = "int";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:int>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'interface' keyword.
+ */
+public void test0271(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  public int\n" +
+		"}";
+
+	String completeBehind = "int";
+	int cursorLocation = str.lastIndexOf("int") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:int>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "int";
+	String expectedReplacedSource = "int";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:int>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'interface' keyword.
+ */
+public void test0272(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  public abstract int\n" +
+		"}";
+
+	String completeBehind = "int";
+	int cursorLocation = str.lastIndexOf("int") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:int>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "int";
+	String expectedReplacedSource = "int";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:int>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'interface' keyword.
+ */
+public void test0273(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  public abstract int Y\n" +
+		"}";
+
+	String completeBehind = "int";
+	int cursorLocation = str.lastIndexOf("int") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:int>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "int";
+	String expectedReplacedSource = "int";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:int>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'interface' keyword.
+ */
+public void test0274(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    #\n" +
+		"    int\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "int";
+	int cursorLocation = str.lastIndexOf("int") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:int>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "int";
+	expectedReplacedSource = "int";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:int>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'interface' keyword.
+ */
+public void test0275(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    #\n" +
+		"    abstract int\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "int";
+	int cursorLocation = str.lastIndexOf("int") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:int>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "int";
+	expectedReplacedSource = "int";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:int>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'interface' keyword.
+ */
+public void test0276(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    #\n" +
+		"    abstract int Y\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "int";
+	int cursorLocation = str.lastIndexOf("int") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:int>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "int";
+	expectedReplacedSource = "int";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:int>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'interface' keyword.
+ */
+public void test0277(){
+	String str =
+		"#\n" +
+		"public final int";
+
+	String completeBehind = "int";
+	int cursorLocation = str.lastIndexOf("int") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "int";
+	String expectedReplacedSource = "int";
+	String expectedUnitDisplayString =
+		"";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'interface' keyword.
+ */
+public void test0278(){
+	String str =
+		"#\n" +
+		"public final int X";
+
+	String completeBehind = "int";
+	int cursorLocation = str.lastIndexOf("int") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "int";
+	String expectedReplacedSource = "int";
+	String expectedUnitDisplayString =
+		"";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'package' keyword.
+ */
+public void test0279(){
+	String str =
+		"#\n" +
+		"pac";
+
+	String completeBehind = "pac";
+	int cursorLocation = str.lastIndexOf("pac") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:pac>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pac";
+	String expectedReplacedSource = "pac";
+	String expectedUnitDisplayString =
+		"import <CompleteOnKeyword:pac>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'package' keyword.
+ */
+public void test0280(){
+	String str =
+		"#\n" +
+		"pac p";
+
+	String completeBehind = "pac";
+	int cursorLocation = str.lastIndexOf("pac") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:pac>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pac";
+	String expectedReplacedSource = "pac";
+	String expectedUnitDisplayString =
+		"import <CompleteOnKeyword:pac>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'package' keyword.
+ */
+public void test0281(){
+	String str =
+		"#\n" +
+		"package p;" +
+		"pac";
+
+	String completeBehind = "pac";
+	int cursorLocation = str.lastIndexOf("pac") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pac";
+	String expectedReplacedSource = "pac";
+	String expectedUnitDisplayString =
+		"package p;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'package' keyword.
+ */
+public void test282(){
+	String str =
+		"#\n" +
+		"import p;" +
+		"pac";
+
+	String completeBehind = "pac";
+	int cursorLocation = str.lastIndexOf("pac") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pac";
+	String expectedReplacedSource = "pac";
+	String expectedUnitDisplayString =
+		"import p;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'package' keyword.
+ */
+public void test0283(){
+	String str =
+		"#\n" +
+		"class X {}" +
+		"pac";
+
+	String completeBehind = "pac";
+	int cursorLocation = str.lastIndexOf("pac") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pac";
+	String expectedReplacedSource = "pac";
+	String expectedUnitDisplayString =
+		"class X {\n" +
+		"  X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'return' keyword.
+ */
+public void test0284(){
+	String str =
+		"public class X {\n" +
+		"  int foo() {\n" +
+		"    #\n" +
+		"    ret\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "ret";
+	int cursorLocation = str.lastIndexOf("ret") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  int foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:ret>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "ret";
+	expectedReplacedSource = "ret";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  int foo() {\n" +
+		"    <CompleteOnName:ret>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'throw' keyword.
+ */
+public void test0285(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    #\n" +
+		"    thr\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "thr";
+	int cursorLocation = str.lastIndexOf("thr") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:thr>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "thr";
+	expectedReplacedSource = "thr";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:thr>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'try' keyword.
+ */
+public void test0286(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    #\n" +
+		"    try\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "try";
+	int cursorLocation = str.lastIndexOf("try") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:try>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "try";
+	expectedReplacedSource = "try";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:try>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'try' keyword.
+ */
+public void test0287(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    #\n" +
+		"    if(try\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "try";
+	int cursorLocation = str.lastIndexOf("try") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:try>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "try";
+	expectedReplacedSource = "try";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:try>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'do' keyword.
+ */
+public void test0288(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    #\n" +
+		"    if(do\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "do";
+	int cursorLocation = str.lastIndexOf("do") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:do>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "do";
+	expectedReplacedSource = "do";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:do>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'for' keyword.
+ */
+public void test0289(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    #\n" +
+		"    if(for\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "for";
+	int cursorLocation = str.lastIndexOf("for") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:for>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "for";
+	expectedReplacedSource = "for";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:for>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'if' keyword.
+ */
+public void test0290(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    #\n" +
+		"    if(if\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "if";
+	int cursorLocation = str.lastIndexOf("if") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:if>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "if";
+	expectedReplacedSource = "if";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:if>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'switch' keyword.
+ */
+public void test0291(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    #\n" +
+		"    if(swi\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "swi";
+	int cursorLocation = str.lastIndexOf("swi") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:swi>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "swi";
+	expectedReplacedSource = "swi";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:swi>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'new' keyword.
+ */
+public void test0292(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    #\n" +
+		"    new\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "new";
+	int cursorLocation = str.lastIndexOf("new") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:new>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "new";
+	expectedReplacedSource = "new";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:new>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'new' keyword.
+ */
+public void test0293(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    #\n" +
+		"    new X\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "new";
+	int cursorLocation = str.lastIndexOf("new") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:new>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "new";
+	expectedReplacedSource = "new";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:new>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'new' keyword.
+ */
+public void test0294(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    #\n" +
+		"    new X()\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "new";
+	int cursorLocation = str.lastIndexOf("new") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:new>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "new";
+	expectedReplacedSource = "new";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:new>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'throws' keyword.
+ */
+public void test0295(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  void foo() thr\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "thr";
+	int cursorLocation = str.lastIndexOf("thr") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:thr>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "thr";
+	String expectedReplacedSource = "thr";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() throws <CompleteOnKeyword:thr> {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'throws' keyword.
+ */
+public void test0296(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  void foo() thr {\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "thr";
+	int cursorLocation = str.lastIndexOf("thr") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:thr>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "thr";
+	String expectedReplacedSource = "thr";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() throws <CompleteOnKeyword:thr> {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'throws' keyword.
+ */
+public void test0297(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  void foo() thr E {\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "thr";
+	int cursorLocation = str.lastIndexOf("thr") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:thr>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "thr";
+	String expectedReplacedSource = "thr";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() throws <CompleteOnKeyword:thr> {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'throws' keyword.
+ */
+public void test0298(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  void foo() throws E thr\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "thr";
+	int cursorLocation = str.lastIndexOf("thr") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "thr";
+	String expectedReplacedSource = "thr";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() throws E {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'throws' keyword.
+ */
+public void test0299(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  X() thr\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "thr";
+	int cursorLocation = str.lastIndexOf("thr") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:thr>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "thr";
+	String expectedReplacedSource = "thr";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  X() throws <CompleteOnKeyword:thr> {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'throws' keyword.
+ */
+public void test0300(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  int foo()[] thr\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "thr";
+	int cursorLocation = str.lastIndexOf("thr") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:thr>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "thr";
+	String expectedReplacedSource = "thr";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  int[] foo() throws <CompleteOnKeyword:thr> {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'while' keyword.
+ */
+public void test0301(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    #\n" +
+		"    whi\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "whi";
+	int cursorLocation = str.lastIndexOf("whi") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:whi>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "whi";
+	expectedReplacedSource = "whi";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:whi>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'while' keyword.
+ */
+public void test0302(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    #\n" +
+		"    if(whi\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "whi";
+	int cursorLocation = str.lastIndexOf("whi") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:whi>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "whi";
+	expectedReplacedSource = "whi";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:whi>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'assert' keyword.
+ */
+public void test0303(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    #\n" +
+		"    ass\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "ass";
+	int cursorLocation = str.lastIndexOf("ass") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:ass>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "ass";
+	expectedReplacedSource = "ass";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:ass>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'assert' keyword.
+ */
+public void test0304(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    #\n" +
+		"    if(ass\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "ass";
+	int cursorLocation = str.lastIndexOf("ass") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:ass>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "ass";
+	expectedReplacedSource = "ass";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:ass>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'final' keyword.
+ */
+public void test0305(){
+	String str =
+		"#\n" +
+		"fin";
+
+	String completeBehind = "fin";
+	int cursorLocation = str.lastIndexOf("fin") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:fin>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "fin";
+	String expectedReplacedSource = "fin";
+	String expectedUnitDisplayString =
+		"import <CompleteOnKeyword:fin>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'final' keyword.
+ */
+public void test0306(){
+	String str =
+		"#\n" +
+		"public fin";
+
+	String completeBehind = "fin";
+	int cursorLocation = str.lastIndexOf("fin") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:fin>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "fin";
+	String expectedReplacedSource = "fin";
+	String expectedUnitDisplayString =
+		"import <CompleteOnKeyword:fin>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'final' keyword.
+ */
+public void test0307(){
+	String str =
+		"#\n" +
+		"fin zzz";
+
+	String completeBehind = "fin";
+	int cursorLocation = str.lastIndexOf("fin") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:fin>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "fin";
+	String expectedReplacedSource = "fin";
+	String expectedUnitDisplayString =
+		"import <CompleteOnKeyword:fin>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'final' keyword.
+ */
+public void test0308(){
+	String str =
+		"#\n" +
+		"final fin";
+
+	String completeBehind = "fin";
+	int cursorLocation = str.lastIndexOf("fin") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "fin";
+	String expectedReplacedSource = "fin";
+	String expectedUnitDisplayString =
+		"";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'final' keyword.
+ */
+public void test0309(){
+	String str =
+		"#\n" +
+		"abstract fin";
+
+	String completeBehind = "fin";
+	int cursorLocation = str.lastIndexOf("fin") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "fin";
+	String expectedReplacedSource = "fin";
+	String expectedUnitDisplayString =
+		"";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'final' keyword.
+ */
+public void test0310(){
+	String str =
+		"#\n" +
+		"public fin class X {}";
+
+	String completeBehind = "fin";
+	int cursorLocation = str.lastIndexOf("fin") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:fin>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "fin";
+	String expectedReplacedSource = "fin";
+	String expectedUnitDisplayString =
+		"import <CompleteOnKeyword:fin>;\n" +
+		"class X {\n" +
+		"  X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'final' keyword.
+ */
+public void test0311(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  fin\n" +
+		"}";
+
+	String completeBehind = "fin";
+	int cursorLocation = str.lastIndexOf("fin") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:fin>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "fin";
+	String expectedReplacedSource = "fin";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:fin>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'final' keyword.
+ */
+public void test0312(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  public fin\n" +
+		"}";
+
+	String completeBehind = "fin";
+	int cursorLocation = str.lastIndexOf("fin") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:fin>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "fin";
+	String expectedReplacedSource = "fin";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:fin>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'final' keyword.
+ */
+public void test0313(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  fin zzz\n" +
+		"}";
+
+	String completeBehind = "fin";
+	int cursorLocation = str.lastIndexOf("fin") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:fin>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "fin";
+	String expectedReplacedSource = "fin";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:fin>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'final' keyword.
+ */
+public void test0314(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  final fin\n" +
+		"}";
+
+	String completeBehind = "fin";
+	int cursorLocation = str.lastIndexOf("fin") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:fin>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "fin";
+	String expectedReplacedSource = "fin";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:fin>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'final' keyword.
+ */
+public void test0315(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  abstract fin\n" +
+		"}";
+
+	String completeBehind = "fin";
+	int cursorLocation = str.lastIndexOf("fin") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:fin>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "fin";
+	String expectedReplacedSource = "fin";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:fin>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'native' keyword.
+ */
+public void test0316(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  nat\n" +
+		"}";
+
+	String completeBehind = "nat";
+	int cursorLocation = str.lastIndexOf("nat") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:nat>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "nat";
+	String expectedReplacedSource = "nat";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:nat>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'native' keyword.
+ */
+public void test0317(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  public nat\n" +
+		"}";
+
+	String completeBehind = "nat";
+	int cursorLocation = str.lastIndexOf("nat") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:nat>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "nat";
+	String expectedReplacedSource = "nat";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:nat>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'native' keyword.
+ */
+public void test0318(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  transient nat\n" +
+		"}";
+
+	String completeBehind = "nat";
+	int cursorLocation = str.lastIndexOf("nat") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:nat>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "nat";
+	String expectedReplacedSource = "nat";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:nat>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'native' keyword.
+ */
+public void test0319(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  transient nat\n" +
+		"}";
+
+	String completeBehind = "nat";
+	int cursorLocation = str.lastIndexOf("nat") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:nat>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "nat";
+	String expectedReplacedSource = "nat";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:nat>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'native' keyword.
+ */
+public void test0320(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  volatile nat\n" +
+		"}";
+
+	String completeBehind = "nat";
+	int cursorLocation = str.lastIndexOf("nat") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:nat>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "nat";
+	String expectedReplacedSource = "nat";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:nat>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'strictfp' keyword.
+ */
+public void test0321(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  str\n" +
+		"}";
+
+	String completeBehind = "str";
+	int cursorLocation = str.lastIndexOf("str") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:str>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "str";
+	String expectedReplacedSource = "str";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:str>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'strictfp' keyword.
+ */
+public void test0322(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  public str\n" +
+		"}";
+
+	String completeBehind = "str";
+	int cursorLocation = str.lastIndexOf("str") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:str>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "str";
+	String expectedReplacedSource = "str";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:str>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'strictfp' keyword.
+ */
+public void test0323(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  transient str\n" +
+		"}";
+
+	String completeBehind = "str";
+	int cursorLocation = str.lastIndexOf("str") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:str>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "str";
+	String expectedReplacedSource = "str";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:str>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'strictfp' keyword.
+ */
+public void test0324(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  transient str\n" +
+		"}";
+
+	String completeBehind = "str";
+	int cursorLocation = str.lastIndexOf("str") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:str>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "str";
+	String expectedReplacedSource = "str";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:str>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'strictfp' keyword.
+ */
+public void test0325(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  volatile str\n" +
+		"}";
+
+	String completeBehind = "str";
+	int cursorLocation = str.lastIndexOf("str") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:str>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "str";
+	String expectedReplacedSource = "str";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:str>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'volatile' keyword.
+ */
+public void test0326(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  vol\n" +
+		"}";
+
+	String completeBehind = "vol";
+	int cursorLocation = str.lastIndexOf("vol") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:vol>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "vol";
+	String expectedReplacedSource = "vol";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:vol>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'volatile' keyword.
+ */
+public void test0327(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  public vol\n" +
+		"}";
+
+	String completeBehind = "vol";
+	int cursorLocation = str.lastIndexOf("vol") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:vol>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "vol";
+	String expectedReplacedSource = "vol";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:vol>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'volatile' keyword.
+ */
+public void test0328(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  transient vol\n" +
+		"}";
+
+	String completeBehind = "vol";
+	int cursorLocation = str.lastIndexOf("vol") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:vol>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "vol";
+	String expectedReplacedSource = "vol";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:vol>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'volatile' keyword.
+ */
+public void test0329(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  volatile vol\n" +
+		"}";
+
+	String completeBehind = "vol";
+	int cursorLocation = str.lastIndexOf("vol") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:vol>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "vol";
+	String expectedReplacedSource = "vol";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:vol>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'volatile' keyword.
+ */
+public void test0330(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  native vol\n" +
+		"}";
+
+	String completeBehind = "vol";
+	int cursorLocation = str.lastIndexOf("vol") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:vol>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "vol";
+	String expectedReplacedSource = "vol";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:vol>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'transient' keyword.
+ */
+public void test0331(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  tra\n" +
+		"}";
+
+	String completeBehind = "tra";
+	int cursorLocation = str.lastIndexOf("tra") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:tra>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "tra";
+	String expectedReplacedSource = "tra";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:tra>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'transient' keyword.
+ */
+public void test0332(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  public tra\n" +
+		"}";
+
+	String completeBehind = "tra";
+	int cursorLocation = str.lastIndexOf("tra") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:tra>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "tra";
+	String expectedReplacedSource = "tra";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:tra>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'transient' keyword.
+ */
+public void test0333(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  transient tra\n" +
+		"}";
+
+	String completeBehind = "tra";
+	int cursorLocation = str.lastIndexOf("tra") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:tra>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "tra";
+	String expectedReplacedSource = "tra";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:tra>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'transient' keyword.
+ */
+public void test0334(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  volatile tra\n" +
+		"}";
+
+	String completeBehind = "tra";
+	int cursorLocation = str.lastIndexOf("tra") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:tra>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "tra";
+	String expectedReplacedSource = "tra";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:tra>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'transient' keyword.
+ */
+public void test0335(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  native tra\n" +
+		"}";
+
+	String completeBehind = "tra";
+	int cursorLocation = str.lastIndexOf("tra") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:tra>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "tra";
+	String expectedReplacedSource = "tra";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:tra>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'synchronized' keyword.
+ */
+public void test0336(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  syn\n" +
+		"}";
+
+	String completeBehind = "syn";
+	int cursorLocation = str.lastIndexOf("syn") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:syn>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "syn";
+	String expectedReplacedSource = "syn";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:syn>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'synchronized' keyword.
+ */
+public void test0337(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  public syn\n" +
+		"}";
+
+	String completeBehind = "syn";
+	int cursorLocation = str.lastIndexOf("syn") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:syn>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "syn";
+	String expectedReplacedSource = "syn";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:syn>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'synchronized' keyword.
+ */
+public void test0338(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  transient syn\n" +
+		"}";
+
+	String completeBehind = "syn";
+	int cursorLocation = str.lastIndexOf("syn") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:syn>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "syn";
+	String expectedReplacedSource = "syn";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:syn>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'synchronized' keyword.
+ */
+public void test0339(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  transient syn\n" +
+		"}";
+
+	String completeBehind = "syn";
+	int cursorLocation = str.lastIndexOf("syn") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:syn>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "syn";
+	String expectedReplacedSource = "syn";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:syn>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'synchronized' keyword.
+ */
+public void test0340(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  volatile syn\n" +
+		"}";
+
+	String completeBehind = "syn";
+	int cursorLocation = str.lastIndexOf("syn") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:syn>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "syn";
+	String expectedReplacedSource = "syn";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:syn>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'synchronized' keyword.
+ */
+public void test0341(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    #\n" +
+		"    syn\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "syn";
+	int cursorLocation = str.lastIndexOf("syn") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:syn>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "syn";
+	expectedReplacedSource = "syn";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:syn>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'synchronized' keyword.
+ */
+public void test0342(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    #\n" +
+		"    if(syn\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "syn";
+	int cursorLocation = str.lastIndexOf("syn") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:syn>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "syn";
+	expectedReplacedSource = "syn";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:syn>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'static' keyword.
+ */
+public void test0343(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  sta\n" +
+		"}";
+
+	String completeBehind = "sta";
+	int cursorLocation = str.lastIndexOf("sta") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:sta>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "sta";
+	String expectedReplacedSource = "sta";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:sta>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'static' keyword.
+ */
+public void test0344(){
+	String str =
+		"#\n" +
+		"public class X {\n" +
+		"  public sta\n" +
+		"}";
+
+	String completeBehind = "sta";
+	int cursorLocation = str.lastIndexOf("sta") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:sta>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "sta";
+	String expectedReplacedSource = "sta";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:sta>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'public' keyword.
+ */
+public void test0345(){
+	String str =
+		"#\n" +
+		"pub";
+
+	String completeBehind = "pub";
+	int cursorLocation = str.lastIndexOf("pub") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:pub>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pub";
+	String expectedReplacedSource = "pub";
+	String expectedUnitDisplayString =
+		"import <CompleteOnKeyword:pub>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'public' keyword.
+ */
+public void test0346(){
+	String str =
+		"#\n" +
+		"final pub";
+
+	String completeBehind = "pub";
+	int cursorLocation = str.lastIndexOf("pub") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:pub>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pub";
+	String expectedReplacedSource = "pub";
+	String expectedUnitDisplayString =
+		"import <CompleteOnKeyword:pub>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'public' keyword.
+ */
+public void test0347(){
+	String str =
+		"#\n" +
+		"public pub";
+
+	String completeBehind = "pub";
+	int cursorLocation = str.lastIndexOf("pub") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pub";
+	String expectedReplacedSource = "pub";
+	String expectedUnitDisplayString =
+		"";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'public' keyword.
+ */
+public void test0348(){
+	String str =
+		"#\n" +
+		"private pub";
+
+	String completeBehind = "pub";
+	int cursorLocation = str.lastIndexOf("pub") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:pub>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pub";
+	String expectedReplacedSource = "pub";
+	String expectedUnitDisplayString =
+		"import <CompleteOnKeyword:pub>;\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'public' keyword.
+ */
+public void test0349(){
+	String str =
+		"#\n" +
+		"public class X{}\n" +
+		"pub";
+
+	String completeBehind = "pub";
+	int cursorLocation = str.lastIndexOf("pub") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pub";
+	String expectedReplacedSource = "pub";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'public' keyword.
+ */
+public void test0350(){
+	String str =
+		"#\n" +
+		"public class X{\n" +
+		"  pub\n" +
+		"}";
+
+	String completeBehind = "pub";
+	int cursorLocation = str.lastIndexOf("pub") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:pub>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pub";
+	String expectedReplacedSource = "pub";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:pub>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'public' keyword.
+ */
+public void test0351(){
+	String str =
+		"#\n" +
+		"public class X{\n" +
+		"  public pub\n" +
+		"}";
+
+	String completeBehind = "pub";
+	int cursorLocation = str.lastIndexOf("pub") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:pub>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pub";
+	String expectedReplacedSource = "pub";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:pub>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'public' keyword.
+ */
+public void test0352(){
+	String str =
+		"#\n" +
+		"public class X{\n" +
+		"  private pub\n" +
+		"}";
+
+	String completeBehind = "pub";
+	int cursorLocation = str.lastIndexOf("pub") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:pub>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pub";
+	String expectedReplacedSource = "pub";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:pub>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'public' keyword.
+ */
+public void test0353(){
+	String str =
+		"#\n" +
+		"public class X{\n" +
+		"  protected pub\n" +
+		"}";
+
+	String completeBehind = "pub";
+	int cursorLocation = str.lastIndexOf("pub") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:pub>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pub";
+	String expectedReplacedSource = "pub";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:pub>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'public' keyword.
+ */
+public void test0354(){
+	String str =
+		"#\n" +
+		"public class X{\n" +
+		"  abstract pub\n" +
+		"}";
+
+	String completeBehind = "pub";
+	int cursorLocation = str.lastIndexOf("pub") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:pub>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pub";
+	String expectedReplacedSource = "pub";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:pub>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'protected' keyword.
+ */
+public void test0355(){
+	String str =
+		"#\n" +
+		"pro";
+
+	String completeBehind = "pro";
+	int cursorLocation = str.lastIndexOf("") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'protected' keyword.
+ */
+public void test0356(){
+	String str =
+		"#\n" +
+		"final pro";
+
+	String completeBehind = "pro";
+	int cursorLocation = str.lastIndexOf("pro") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pro";
+	String expectedReplacedSource = "pro";
+	String expectedUnitDisplayString =
+		"";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'protected' keyword.
+ */
+public void test0357(){
+	String str =
+		"#\n" +
+		"public pro";
+
+	String completeBehind = "pro";
+	int cursorLocation = str.lastIndexOf("pro") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pro";
+	String expectedReplacedSource = "pro";
+	String expectedUnitDisplayString =
+		"";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'protected' keyword.
+ */
+public void test0358(){
+	String str =
+		"#\n" +
+		"private pro";
+
+	String completeBehind = "pro";
+	int cursorLocation = str.lastIndexOf("pro") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pro";
+	String expectedReplacedSource = "pro";
+	String expectedUnitDisplayString =
+		"";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'protected' keyword.
+ */
+public void test0359(){
+	String str =
+		"#\n" +
+		"public class X{}\n" +
+		"pro";
+
+	String completeBehind = "pro";
+	int cursorLocation = str.lastIndexOf("pro") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pro";
+	String expectedReplacedSource = "pro";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'protected' keyword.
+ */
+public void test0360(){
+	String str =
+		"#\n" +
+		"public class X{\n" +
+		"  pro\n" +
+		"}";
+
+	String completeBehind = "pro";
+	int cursorLocation = str.lastIndexOf("pro") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:pro>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pro";
+	String expectedReplacedSource = "pro";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:pro>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'protected' keyword.
+ */
+public void test0361(){
+	String str =
+		"#\n" +
+		"public class X{\n" +
+		"  public pro\n" +
+		"}";
+
+	String completeBehind = "pro";
+	int cursorLocation = str.lastIndexOf("pro") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:pro>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pro";
+	String expectedReplacedSource = "pro";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:pro>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'protected' keyword.
+ */
+public void test0362(){
+	String str =
+		"#\n" +
+		"public class X{\n" +
+		"  private pro\n" +
+		"}";
+
+	String completeBehind = "pro";
+	int cursorLocation = str.lastIndexOf("pro") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:pro>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pro";
+	String expectedReplacedSource = "pro";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:pro>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'protected' keyword.
+ */
+public void test0363(){
+	String str =
+		"#\n" +
+		"public class X{\n" +
+		"  protected pro\n" +
+		"}";
+
+	String completeBehind = "pro";
+	int cursorLocation = str.lastIndexOf("pro") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:pro>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pro";
+	String expectedReplacedSource = "pro";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:pro>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'protected' keyword.
+ */
+public void test0364(){
+	String str =
+		"#\n" +
+		"public class X{\n" +
+		"  abstract pro\n" +
+		"}";
+
+	String completeBehind = "pro";
+	int cursorLocation = str.lastIndexOf("pro") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:pro>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pro";
+	String expectedReplacedSource = "pro";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:pro>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'private' keyword.
+ */
+public void test0365(){
+	String str =
+		"#\n" +
+		"pri";
+
+	String completeBehind = "pri";
+	int cursorLocation = str.lastIndexOf("") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'private' keyword.
+ */
+public void test0366(){
+	String str =
+		"#\n" +
+		"final pri";
+
+	String completeBehind = "pri";
+	int cursorLocation = str.lastIndexOf("pri") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pri";
+	String expectedReplacedSource = "pri";
+	String expectedUnitDisplayString =
+		"";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'private' keyword.
+ */
+public void test0367(){
+	String str =
+		"#\n" +
+		"public pri";
+
+	String completeBehind = "pri";
+	int cursorLocation = str.lastIndexOf("pri") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pri";
+	String expectedReplacedSource = "pri";
+	String expectedUnitDisplayString =
+		"";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'private' keyword.
+ */
+public void test0368(){
+	String str =
+		"#\n" +
+		"private pri";
+
+	String completeBehind = "pri";
+	int cursorLocation = str.lastIndexOf("pri") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pri";
+	String expectedReplacedSource = "pri";
+	String expectedUnitDisplayString =
+		"";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'private' keyword.
+ */
+public void test0369(){
+	String str =
+		"#\n" +
+		"public class X{}\n" +
+		"pri";
+
+	String completeBehind = "pri";
+	int cursorLocation = str.lastIndexOf("pri") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pri";
+	String expectedReplacedSource = "pri";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'private' keyword.
+ */
+public void test0370(){
+	String str =
+		"#\n" +
+		"public class X{\n" +
+		"  pri\n" +
+		"}";
+
+	String completeBehind = "pri";
+	int cursorLocation = str.lastIndexOf("pri") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:pri>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pri";
+	String expectedReplacedSource = "pri";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:pri>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'private' keyword.
+ */
+public void test0371(){
+	String str =
+		"#\n" +
+		"public class X{\n" +
+		"  public pri\n" +
+		"}";
+
+	String completeBehind = "pri";
+	int cursorLocation = str.lastIndexOf("pri") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:pri>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pri";
+	String expectedReplacedSource = "pri";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:pri>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'private' keyword.
+ */
+public void test0372(){
+	String str =
+		"#\n" +
+		"public class X{\n" +
+		"  private pri\n" +
+		"}";
+
+	String completeBehind = "pri";
+	int cursorLocation = str.lastIndexOf("pri") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:pri>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pri";
+	String expectedReplacedSource = "pri";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:pri>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'private' keyword.
+ */
+public void test0373(){
+	String str =
+		"#\n" +
+		"public class X{\n" +
+		"  protected pri\n" +
+		"}";
+
+	String completeBehind = "pri";
+	int cursorLocation = str.lastIndexOf("pri") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:pri>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pri";
+	String expectedReplacedSource = "pri";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:pri>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'private' keyword.
+ */
+public void test0374(){
+	String str =
+		"#\n" +
+		"public class X{\n" +
+		"  abstract pri\n" +
+		"}";
+
+	String completeBehind = "pri";
+	int cursorLocation = str.lastIndexOf("pri") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<CompleteOnType:pri>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "pri";
+	String expectedReplacedSource = "pri";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  <CompleteOnType:pri>;\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+}
+/*
+ * Test for 'super' keyword.
+ */
+public void test0375(){
+	String str =
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"    #\n" +
+		"    sup\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "sup";
+	int cursorLocation = str.lastIndexOf("sup") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:sup>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "sup";
+	expectedReplacedSource = "sup";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:sup>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'this' keyword.
+ */
+public void test0376(){
+	String str =
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"    #\n" +
+		"    thi\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "thi";
+	int cursorLocation = str.lastIndexOf("thi") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:thi>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "thi";
+	expectedReplacedSource = "thi";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:thi>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'true' keyword.
+ */
+public void test0377(){
+	String str =
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"    #\n" +
+		"    tru\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "tru";
+	int cursorLocation = str.lastIndexOf("tru") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:tru>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "tru";
+	expectedReplacedSource = "tru";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:tru>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'false' keyword.
+ */
+public void test0378(){
+	String str =
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"    #\n" +
+		"    fal\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "fal";
+	int cursorLocation = str.lastIndexOf("fal") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:fal>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "fal";
+	expectedReplacedSource = "fal";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:fal>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'null' keyword.
+ */
+public void test0379(){
+	String str =
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"    #\n" +
+		"    nul\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "nul";
+	int cursorLocation = str.lastIndexOf("nul") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:nul>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "nul";
+	expectedReplacedSource = "nul";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:nul>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'instanceof' keyword.
+ */
+public void test0380(){
+	String str =
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"    #\n" +
+		"    if(zzz ins\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "ins";
+	int cursorLocation = str.lastIndexOf("ins") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnKeyword:ins>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "ins";
+	expectedReplacedSource = "ins";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnKeyword:ins>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'instanceof' keyword.
+ */
+public void test0381(){
+	String str =
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"    #\n" +
+		"    ins\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "ins";
+	int cursorLocation = str.lastIndexOf("ins") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:ins>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "ins";
+	expectedReplacedSource = "ins";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:ins>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'instanceof' keyword.
+ */
+public void test0382(){
+	String str =
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"    #\n" +
+		"    if(zzz zzz ins\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "ins";
+	int cursorLocation = str.lastIndexOf("ins") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:ins>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "ins";
+	expectedReplacedSource = "ins";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    zzz zzz;\n" +
+		"    <CompleteOnName:ins>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'while' keyword.
+ */
+public void test0384(){
+	String str =
+		"public class X {\n" +
+		"  void foo() {\n" +
+		"    #\n" +
+		"    do{\n" +
+		"    } whi\n" +
+		"  }\n" +
+		"}";
+
+	String completeBehind = "whi";
+	int cursorLocation = str.lastIndexOf("whi") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnKeyword:whi>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "whi";
+	expectedReplacedSource = "whi";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnKeyword:whi>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'catch' keyword.
+ */
+public void test0385(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"    #\n" +
+		"    try {\n" +
+		"    } catch(E e) {\n" +
+		"    } cat\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "cat";
+	int cursorLocation = str.lastIndexOf("cat") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:cat>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "cat";
+	expectedReplacedSource = "cat";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:cat>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'finally' keyword.
+ */
+public void test0386(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"    #\n" +
+		"    try {" +
+		"    } catch(E e) {" +
+		"    } fin" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "fin";
+	int cursorLocation = str.lastIndexOf("fin") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:fin>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "fin";
+	expectedReplacedSource = "fin";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:fin>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'finally' keyword.
+ */
+public void test0387(){
+	String str =
+		"package p;\n" +
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"    #\n" +
+		"    try {" +
+		"    } finally {" +
+		"    } fin" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "fin";
+	int cursorLocation = str.lastIndexOf("fin") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:fin>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "fin";
+	expectedReplacedSource = "fin";
+	expectedUnitDisplayString =
+		"package p;\n" +
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:fin>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+/*
+ * Test for 'this' keyword.
+ */
+public void test0388(){
+	String str =
+		"public class X {\n" +
+		"  void foo(){\n" +
+		"    #\n" +
+		"    X.thi\n" +
+		"  }\n" +
+		"}\n";
+
+	String completeBehind = "thi";
+	int cursorLocation = str.lastIndexOf("thi") + completeBehind.length() - 1;
+
+	String expectedCompletionNodeToString = "<NONE>";
+	String expectedParentNodeToString = "<NONE>";
+	String completionIdentifier = "<NONE>";
+	String expectedReplacedSource = "<NONE>";
+	String expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"  }\n" +
+		"}\n";
+
+	checkDietParse(
+		str.toCharArray(),
+		cursorLocation,
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"diet ast");
+	
+	expectedCompletionNodeToString = "<CompleteOnName:X.thi>";
+	expectedParentNodeToString = "<NONE>";
+	completionIdentifier = "thi";
+	expectedReplacedSource = "X.thi";
+	expectedUnitDisplayString =
+		"public class X {\n" +
+		"  public X() {\n" +
+		"  }\n" +
+		"  void foo() {\n" +
+		"    <CompleteOnName:X.thi>;\n" +
+		"  }\n" +
+		"}\n";
+	
+	checkMethodParse(
+		str.toCharArray(), 
+		cursorLocation, 
+		expectedCompletionNodeToString,
+		expectedParentNodeToString,
+		expectedUnitDisplayString,
+		completionIdentifier,
+		expectedReplacedSource,
+		"full ast");
+}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietCompletionTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietCompletionTest.java
index e38ee45..81a2641 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietCompletionTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietCompletionTest.java
@@ -517,13 +517,13 @@ public void test16() {
 		"}											\n"; 
 
 	String completeBehind = "extends";
-	String expectedCompletionNodeToString = NONE;
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:extends>";
 	String completionIdentifier = "extends";
 	String expectedUnitDisplayString = 
 		"import java.io.*;\n" + 
-		"public class X {\n" + 
-		"  {\n" + 
-		"  }\n" + 
+		"public class X extends <CompleteOnKeyword:extends> {\n" + 
+		"  {\n" +
+		"  }\n" +
 		"  public X() {\n" + 
 		"  }\n" + 
 		"}\n";
@@ -552,13 +552,13 @@ public void test17() {
 		"}											\n"; 
 
 	String completeBehind = "ext";
-	String expectedCompletionNodeToString = NONE;
+	String expectedCompletionNodeToString = "<CompleteOnKeyword:ext>";
 	String completionIdentifier = "ext";
 	String expectedUnitDisplayString =
 		"import java.io.*;\n" + 
-		"public class X {\n" + 
-		"  {\n" + 
-		"  }\n" + 
+		"public class X extends <CompleteOnKeyword:ext> {\n" + 
+		"  {\n" +
+		"  }\n" +
 		"  public X() {\n" + 
 		"  }\n" + 
 		"}\n";
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TestAll.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TestAll.java
index c835ce8..b7b2daf 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TestAll.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/TestAll.java
@@ -59,6 +59,7 @@ public static Test suite() {
 	addTest(suite, NameReferenceCompletionTest.class);
 	addTest(suite, ReferenceTypeCompletionTest.class);
 	addTest(suite, CompletionParserTest2.class);
+	addTest(suite, CompletionParserTestKeyword.class);
 
 	/* selection tests */
 	addTest(suite, ExplicitConstructorInvocationSelectionTest.class);
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java
index e9025a6..78810dc 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java
@@ -173,6 +173,399 @@ public static Test suite() {
 	suite.addTest(new CompletionTests("testCompletionConditionalExpression1"));
 	suite.addTest(new CompletionTests("testCompletionConditionalExpression2"));
 	suite.addTest(new CompletionTests("testCompletionConditionalExpression3"));
+	
+	// completion keywords tests
+	suite.addTest(new CompletionTests("testCompletionKeywordThis1"));
+	suite.addTest(new CompletionTests("testCompletionKeywordThis2"));
+	suite.addTest(new CompletionTests("testCompletionKeywordThis3"));
+	suite.addTest(new CompletionTests("testCompletionKeywordThis4"));
+	suite.addTest(new CompletionTests("testCompletionKeywordThis5"));
+	suite.addTest(new CompletionTests("testCompletionKeywordThis6"));
+	suite.addTest(new CompletionTests("testCompletionKeywordThis7"));
+	suite.addTest(new CompletionTests("testCompletionKeywordThis8"));
+	suite.addTest(new CompletionTests("testCompletionKeywordThis9"));
+	suite.addTest(new CompletionTests("testCompletionKeywordThis10"));
+	suite.addTest(new CompletionTests("testCompletionKeywordThis11"));
+	suite.addTest(new CompletionTests("testCompletionKeywordThis12"));
+	suite.addTest(new CompletionTests("testCompletionKeywordThis13"));
+	suite.addTest(new CompletionTests("testCompletionKeywordThis14"));
+	suite.addTest(new CompletionTests("testCompletionKeywordSuper1"));
+	suite.addTest(new CompletionTests("testCompletionKeywordSuper2"));
+	suite.addTest(new CompletionTests("testCompletionKeywordSuper3"));
+	suite.addTest(new CompletionTests("testCompletionKeywordSuper4"));
+	suite.addTest(new CompletionTests("testCompletionKeywordSuper5"));
+	suite.addTest(new CompletionTests("testCompletionKeywordSuper6"));
+	suite.addTest(new CompletionTests("testCompletionKeywordSuper7"));
+	suite.addTest(new CompletionTests("testCompletionKeywordSuper8"));
+	suite.addTest(new CompletionTests("testCompletionKeywordSuper9"));
+	suite.addTest(new CompletionTests("testCompletionKeywordSuper10"));
+	suite.addTest(new CompletionTests("testCompletionKeywordSuper11"));
+	suite.addTest(new CompletionTests("testCompletionKeywordSuper12"));
+	suite.addTest(new CompletionTests("testCompletionKeywordTry1"));
+	suite.addTest(new CompletionTests("testCompletionKeywordTry2"));
+	suite.addTest(new CompletionTests("testCompletionKeywordTry3"));
+	suite.addTest(new CompletionTests("testCompletionKeywordTry4"));
+	suite.addTest(new CompletionTests("testCompletionKeywordTry5"));
+	suite.addTest(new CompletionTests("testCompletionKeywordTry6"));
+	suite.addTest(new CompletionTests("testCompletionKeywordDo1"));
+	suite.addTest(new CompletionTests("testCompletionKeywordDo2"));
+	suite.addTest(new CompletionTests("testCompletionKeywordDo3"));
+	suite.addTest(new CompletionTests("testCompletionKeywordDo4"));
+	suite.addTest(new CompletionTests("testCompletionKeywordDo5"));
+	suite.addTest(new CompletionTests("testCompletionKeywordDo6"));
+	suite.addTest(new CompletionTests("testCompletionKeywordFor1"));
+	suite.addTest(new CompletionTests("testCompletionKeywordFor2"));
+	suite.addTest(new CompletionTests("testCompletionKeywordFor3"));
+	suite.addTest(new CompletionTests("testCompletionKeywordFor4"));
+	suite.addTest(new CompletionTests("testCompletionKeywordFor5"));
+	suite.addTest(new CompletionTests("testCompletionKeywordFor6"));
+	suite.addTest(new CompletionTests("testCompletionKeywordIf1"));
+	suite.addTest(new CompletionTests("testCompletionKeywordIf2"));
+	suite.addTest(new CompletionTests("testCompletionKeywordIf3"));
+	suite.addTest(new CompletionTests("testCompletionKeywordIf4"));
+	suite.addTest(new CompletionTests("testCompletionKeywordIf5"));
+	suite.addTest(new CompletionTests("testCompletionKeywordIf6"));
+	suite.addTest(new CompletionTests("testCompletionKeywordReturn1"));
+	suite.addTest(new CompletionTests("testCompletionKeywordReturn2"));
+	suite.addTest(new CompletionTests("testCompletionKeywordReturn3"));
+	suite.addTest(new CompletionTests("testCompletionKeywordReturn4"));
+	suite.addTest(new CompletionTests("testCompletionKeywordReturn5"));
+	suite.addTest(new CompletionTests("testCompletionKeywordReturn6"));
+	suite.addTest(new CompletionTests("testCompletionKeywordSwitch1"));
+	suite.addTest(new CompletionTests("testCompletionKeywordSwitch2"));
+	suite.addTest(new CompletionTests("testCompletionKeywordSwitch3"));
+	suite.addTest(new CompletionTests("testCompletionKeywordSwitch4"));
+	suite.addTest(new CompletionTests("testCompletionKeywordSwitch5"));
+	suite.addTest(new CompletionTests("testCompletionKeywordSwitch6"));
+	suite.addTest(new CompletionTests("testCompletionKeywordThrow1"));
+	suite.addTest(new CompletionTests("testCompletionKeywordThrow2"));
+	suite.addTest(new CompletionTests("testCompletionKeywordThrow3"));
+	suite.addTest(new CompletionTests("testCompletionKeywordThrow4"));
+	suite.addTest(new CompletionTests("testCompletionKeywordThrow5"));
+	suite.addTest(new CompletionTests("testCompletionKeywordThrow6"));
+	suite.addTest(new CompletionTests("testCompletionKeywordAssert1"));
+	suite.addTest(new CompletionTests("testCompletionKeywordAssert2"));
+	suite.addTest(new CompletionTests("testCompletionKeywordAssert3"));
+	suite.addTest(new CompletionTests("testCompletionKeywordAssert4"));
+	suite.addTest(new CompletionTests("testCompletionKeywordAssert5"));
+	suite.addTest(new CompletionTests("testCompletionKeywordAssert6"));
+	suite.addTest(new CompletionTests("testCompletionKeywordElse1"));
+	suite.addTest(new CompletionTests("testCompletionKeywordElse2"));
+	suite.addTest(new CompletionTests("testCompletionKeywordElse3"));
+	suite.addTest(new CompletionTests("testCompletionKeywordElse4"));
+	suite.addTest(new CompletionTests("testCompletionKeywordElse5"));
+	suite.addTest(new CompletionTests("testCompletionKeywordElse6"));
+	suite.addTest(new CompletionTests("testCompletionKeywordElse7"));
+	suite.addTest(new CompletionTests("testCompletionKeywordElse8"));
+	suite.addTest(new CompletionTests("testCompletionKeywordCatch1"));
+	suite.addTest(new CompletionTests("testCompletionKeywordCatch2"));
+	suite.addTest(new CompletionTests("testCompletionKeywordCatch3"));
+	suite.addTest(new CompletionTests("testCompletionKeywordCatch4"));
+	suite.addTest(new CompletionTests("testCompletionKeywordCatch5"));
+	suite.addTest(new CompletionTests("testCompletionKeywordCatch6"));
+	suite.addTest(new CompletionTests("testCompletionKeywordCatch7"));
+	suite.addTest(new CompletionTests("testCompletionKeywordCatch8"));
+	suite.addTest(new CompletionTests("testCompletionKeywordCatch8"));
+	suite.addTest(new CompletionTests("testCompletionKeywordCatch10"));
+	suite.addTest(new CompletionTests("testCompletionKeywordFinally1"));
+	suite.addTest(new CompletionTests("testCompletionKeywordFinally2"));
+	suite.addTest(new CompletionTests("testCompletionKeywordFinally3"));
+	suite.addTest(new CompletionTests("testCompletionKeywordFinally4"));
+	suite.addTest(new CompletionTests("testCompletionKeywordFinally5"));
+	suite.addTest(new CompletionTests("testCompletionKeywordFinally6"));
+	suite.addTest(new CompletionTests("testCompletionKeywordFinally7"));
+	suite.addTest(new CompletionTests("testCompletionKeywordFinally8"));
+	suite.addTest(new CompletionTests("testCompletionKeywordFinally9"));
+	suite.addTest(new CompletionTests("testCompletionKeywordFinally10"));
+	suite.addTest(new CompletionTests("testCompletionKeywordFinally11"));
+	suite.addTest(new CompletionTests("testCompletionKeywordFinally12"));
+	suite.addTest(new CompletionTests("testCompletionKeywordFinally13"));
+	suite.addTest(new CompletionTests("testCompletionKeywordFinally14"));
+	suite.addTest(new CompletionTests("testCompletionKeywordContinue1"));
+	suite.addTest(new CompletionTests("testCompletionKeywordContinue2"));
+	suite.addTest(new CompletionTests("testCompletionKeywordContinue3"));
+	suite.addTest(new CompletionTests("testCompletionKeywordContinue4"));
+	suite.addTest(new CompletionTests("testCompletionKeywordBreak1"));
+	suite.addTest(new CompletionTests("testCompletionKeywordBreak2"));
+	suite.addTest(new CompletionTests("testCompletionKeywordBreak3"));
+	suite.addTest(new CompletionTests("testCompletionKeywordBreak4"));
+	suite.addTest(new CompletionTests("testCompletionKeywordBreak5"));
+	//suite.addTest(new CompletionTests("testCompletionKeywordBreak6"));
+	suite.addTest(new CompletionTests("testCompletionKeywordWhile1"));
+	suite.addTest(new CompletionTests("testCompletionKeywordWhile2"));
+	suite.addTest(new CompletionTests("testCompletionKeywordWhile3"));
+	suite.addTest(new CompletionTests("testCompletionKeywordWhile4"));
+	suite.addTest(new CompletionTests("testCompletionKeywordWhile5"));
+	suite.addTest(new CompletionTests("testCompletionKeywordWhile6"));
+	suite.addTest(new CompletionTests("testCompletionKeywordWhile7"));
+	suite.addTest(new CompletionTests("testCompletionKeywordWhile8"));
+	suite.addTest(new CompletionTests("testCompletionKeywordWhile9"));
+	suite.addTest(new CompletionTests("testCompletionKeywordWhile10"));
+	suite.addTest(new CompletionTests("testCompletionKeywordExtends1"));
+	suite.addTest(new CompletionTests("testCompletionKeywordExtends2"));
+	suite.addTest(new CompletionTests("testCompletionKeywordExtends3"));
+	suite.addTest(new CompletionTests("testCompletionKeywordExtends4"));
+	suite.addTest(new CompletionTests("testCompletionKeywordExtends5"));
+	suite.addTest(new CompletionTests("testCompletionKeywordExtends6"));
+	suite.addTest(new CompletionTests("testCompletionKeywordExtends7"));
+	suite.addTest(new CompletionTests("testCompletionKeywordExtends8"));
+	suite.addTest(new CompletionTests("testCompletionKeywordExtends9"));
+	suite.addTest(new CompletionTests("testCompletionKeywordExtends10"));
+	suite.addTest(new CompletionTests("testCompletionKeywordImplements1"));
+	suite.addTest(new CompletionTests("testCompletionKeywordImplements2"));
+	suite.addTest(new CompletionTests("testCompletionKeywordImplements3"));
+	suite.addTest(new CompletionTests("testCompletionKeywordImplements4"));
+	suite.addTest(new CompletionTests("testCompletionKeywordImplements5"));
+	suite.addTest(new CompletionTests("testCompletionKeywordImplements6"));
+	suite.addTest(new CompletionTests("testCompletionKeywordPackage1"));
+	suite.addTest(new CompletionTests("testCompletionKeywordPackage2"));
+	suite.addTest(new CompletionTests("testCompletionKeywordPackage3"));
+	suite.addTest(new CompletionTests("testCompletionKeywordPackage4"));
+	suite.addTest(new CompletionTests("testCompletionKeywordPackage5"));
+	suite.addTest(new CompletionTests("testCompletionKeywordPackage6"));
+	suite.addTest(new CompletionTests("testCompletionKeywordPackage7"));
+	suite.addTest(new CompletionTests("testCompletionKeywordPackage8"));
+	suite.addTest(new CompletionTests("testCompletionKeywordImport1"));
+	suite.addTest(new CompletionTests("testCompletionKeywordImport2"));
+	suite.addTest(new CompletionTests("testCompletionKeywordImport3"));
+	suite.addTest(new CompletionTests("testCompletionKeywordImport4"));
+	suite.addTest(new CompletionTests("testCompletionKeywordImport5"));
+	suite.addTest(new CompletionTests("testCompletionKeywordImport6"));
+	suite.addTest(new CompletionTests("testCompletionKeywordImport7"));
+	suite.addTest(new CompletionTests("testCompletionKeywordImport8"));
+	suite.addTest(new CompletionTests("testCompletionKeywordCase1"));
+	suite.addTest(new CompletionTests("testCompletionKeywordCase2"));
+	suite.addTest(new CompletionTests("testCompletionKeywordCase3"));
+	suite.addTest(new CompletionTests("testCompletionKeywordCase4"));
+	suite.addTest(new CompletionTests("testCompletionKeywordCase5"));
+	suite.addTest(new CompletionTests("testCompletionKeywordCase6"));
+	suite.addTest(new CompletionTests("testCompletionKeywordCase7"));
+	suite.addTest(new CompletionTests("testCompletionKeywordCase8"));
+	suite.addTest(new CompletionTests("testCompletionKeywordCase9"));
+	suite.addTest(new CompletionTests("testCompletionKeywordCase10"));
+	suite.addTest(new CompletionTests("testCompletionKeywordDefault1"));
+	suite.addTest(new CompletionTests("testCompletionKeywordDefault2"));
+	suite.addTest(new CompletionTests("testCompletionKeywordDefault3"));
+	suite.addTest(new CompletionTests("testCompletionKeywordDefault4"));
+	suite.addTest(new CompletionTests("testCompletionKeywordDefault5"));
+	suite.addTest(new CompletionTests("testCompletionKeywordDefault6"));
+	suite.addTest(new CompletionTests("testCompletionKeywordDefault7"));
+	suite.addTest(new CompletionTests("testCompletionKeywordDefault8"));
+	suite.addTest(new CompletionTests("testCompletionKeywordDefault9"));
+	//suite.addTest(new CompletionTests("testCompletionKeywordDefault10"));
+	suite.addTest(new CompletionTests("testCompletionKeywordClass1"));
+	suite.addTest(new CompletionTests("testCompletionKeywordClass2"));
+	suite.addTest(new CompletionTests("testCompletionKeywordClass3"));
+	suite.addTest(new CompletionTests("testCompletionKeywordClass4"));
+	suite.addTest(new CompletionTests("testCompletionKeywordClass5"));
+	suite.addTest(new CompletionTests("testCompletionKeywordClass6"));
+	suite.addTest(new CompletionTests("testCompletionKeywordClass7"));
+	suite.addTest(new CompletionTests("testCompletionKeywordClass8"));
+	suite.addTest(new CompletionTests("testCompletionKeywordClass9"));
+	suite.addTest(new CompletionTests("testCompletionKeywordClass10"));
+	suite.addTest(new CompletionTests("testCompletionKeywordClass11"));
+	suite.addTest(new CompletionTests("testCompletionKeywordClass12"));
+	suite.addTest(new CompletionTests("testCompletionKeywordClass13"));
+	suite.addTest(new CompletionTests("testCompletionKeywordClass14"));
+	suite.addTest(new CompletionTests("testCompletionKeywordClass15"));
+	suite.addTest(new CompletionTests("testCompletionKeywordClass16"));
+	suite.addTest(new CompletionTests("testCompletionKeywordClass17"));
+	suite.addTest(new CompletionTests("testCompletionKeywordClass18"));
+	suite.addTest(new CompletionTests("testCompletionKeywordClass19"));
+	suite.addTest(new CompletionTests("testCompletionKeywordClass20"));
+	suite.addTest(new CompletionTests("testCompletionKeywordClass21"));
+	suite.addTest(new CompletionTests("testCompletionKeywordClass22"));
+	suite.addTest(new CompletionTests("testCompletionKeywordClass23"));
+	suite.addTest(new CompletionTests("testCompletionKeywordClass24"));
+	suite.addTest(new CompletionTests("testCompletionKeywordInterface1"));
+	suite.addTest(new CompletionTests("testCompletionKeywordInterface2"));
+	suite.addTest(new CompletionTests("testCompletionKeywordInterface3"));
+	suite.addTest(new CompletionTests("testCompletionKeywordInterface4"));
+	suite.addTest(new CompletionTests("testCompletionKeywordInterface5"));
+	suite.addTest(new CompletionTests("testCompletionKeywordInterface6"));
+	suite.addTest(new CompletionTests("testCompletionKeywordInterface7"));
+	suite.addTest(new CompletionTests("testCompletionKeywordInterface8"));
+	suite.addTest(new CompletionTests("testCompletionKeywordInterface9"));
+	suite.addTest(new CompletionTests("testCompletionKeywordInterface10"));
+	suite.addTest(new CompletionTests("testCompletionKeywordInterface11"));
+	suite.addTest(new CompletionTests("testCompletionKeywordInterface12"));
+	suite.addTest(new CompletionTests("testCompletionKeywordInterface13"));
+	suite.addTest(new CompletionTests("testCompletionKeywordInterface14"));
+	suite.addTest(new CompletionTests("testCompletionKeywordInterface15"));
+	suite.addTest(new CompletionTests("testCompletionKeywordInterface16"));
+	suite.addTest(new CompletionTests("testCompletionKeywordInterface17"));
+	suite.addTest(new CompletionTests("testCompletionKeywordInterface18"));
+	suite.addTest(new CompletionTests("testCompletionKeywordThrows1"));
+	suite.addTest(new CompletionTests("testCompletionKeywordThrows2"));
+	suite.addTest(new CompletionTests("testCompletionKeywordThrows3"));
+	suite.addTest(new CompletionTests("testCompletionKeywordThrows4"));
+	suite.addTest(new CompletionTests("testCompletionKeywordThrows5"));
+	suite.addTest(new CompletionTests("testCompletionKeywordThrows6"));
+	suite.addTest(new CompletionTests("testCompletionKeywordThrows7"));
+	suite.addTest(new CompletionTests("testCompletionKeywordThrows8"));
+	suite.addTest(new CompletionTests("testCompletionKeywordSynchronized1"));
+	suite.addTest(new CompletionTests("testCompletionKeywordSynchronized2"));
+	suite.addTest(new CompletionTests("testCompletionKeywordSynchronized3"));
+	suite.addTest(new CompletionTests("testCompletionKeywordSynchronized4"));
+	suite.addTest(new CompletionTests("testCompletionKeywordSynchronized5"));
+	suite.addTest(new CompletionTests("testCompletionKeywordSynchronized6"));
+	suite.addTest(new CompletionTests("testCompletionKeywordSynchronized7"));
+	suite.addTest(new CompletionTests("testCompletionKeywordSynchronized8"));
+	suite.addTest(new CompletionTests("testCompletionKeywordSynchronized9"));
+	suite.addTest(new CompletionTests("testCompletionKeywordSynchronized10"));
+	suite.addTest(new CompletionTests("testCompletionKeywordSynchronized11"));
+	suite.addTest(new CompletionTests("testCompletionKeywordSynchronized12"));
+	suite.addTest(new CompletionTests("testCompletionKeywordNative1"));
+	suite.addTest(new CompletionTests("testCompletionKeywordNative2"));
+	suite.addTest(new CompletionTests("testCompletionKeywordNative3"));
+	suite.addTest(new CompletionTests("testCompletionKeywordNative4"));
+	suite.addTest(new CompletionTests("testCompletionKeywordNative5"));
+	suite.addTest(new CompletionTests("testCompletionKeywordNative6"));
+	suite.addTest(new CompletionTests("testCompletionKeywordNative7"));
+	suite.addTest(new CompletionTests("testCompletionKeywordNative8"));
+	suite.addTest(new CompletionTests("testCompletionKeywordStrictfp1"));
+	suite.addTest(new CompletionTests("testCompletionKeywordStrictfp2"));
+	suite.addTest(new CompletionTests("testCompletionKeywordStrictfp3"));
+	suite.addTest(new CompletionTests("testCompletionKeywordStrictfp4"));
+	suite.addTest(new CompletionTests("testCompletionKeywordStrictfp5"));
+	suite.addTest(new CompletionTests("testCompletionKeywordStrictfp6"));
+	suite.addTest(new CompletionTests("testCompletionKeywordStrictfp7"));
+	suite.addTest(new CompletionTests("testCompletionKeywordStrictfp8"));
+	suite.addTest(new CompletionTests("testCompletionKeywordVolatile1"));
+	suite.addTest(new CompletionTests("testCompletionKeywordVolatile2"));
+	suite.addTest(new CompletionTests("testCompletionKeywordVolatile3"));
+	suite.addTest(new CompletionTests("testCompletionKeywordVolatile4"));
+	suite.addTest(new CompletionTests("testCompletionKeywordVolatile5"));
+	suite.addTest(new CompletionTests("testCompletionKeywordVolatile6"));
+	suite.addTest(new CompletionTests("testCompletionKeywordVolatile7"));
+	suite.addTest(new CompletionTests("testCompletionKeywordVolatile8"));
+	suite.addTest(new CompletionTests("testCompletionKeywordTransient1"));
+	suite.addTest(new CompletionTests("testCompletionKeywordTransient2"));
+	suite.addTest(new CompletionTests("testCompletionKeywordTransient3"));
+	suite.addTest(new CompletionTests("testCompletionKeywordTransient4"));
+	suite.addTest(new CompletionTests("testCompletionKeywordTransient5"));
+	suite.addTest(new CompletionTests("testCompletionKeywordTransient6"));
+	suite.addTest(new CompletionTests("testCompletionKeywordTransient7"));
+	suite.addTest(new CompletionTests("testCompletionKeywordTransient8"));
+	suite.addTest(new CompletionTests("testCompletionKeywordNew1"));
+	suite.addTest(new CompletionTests("testCompletionKeywordNew2"));
+	suite.addTest(new CompletionTests("testCompletionKeywordNew3"));
+	suite.addTest(new CompletionTests("testCompletionKeywordNew4"));
+	suite.addTest(new CompletionTests("testCompletionKeywordNew5"));
+	suite.addTest(new CompletionTests("testCompletionKeywordNew6"));
+	suite.addTest(new CompletionTests("testCompletionKeywordNew7"));
+	suite.addTest(new CompletionTests("testCompletionKeywordNew8"));
+	suite.addTest(new CompletionTests("testCompletionKeywordNew9"));
+	suite.addTest(new CompletionTests("testCompletionKeywordNew10"));
+	suite.addTest(new CompletionTests("testCompletionKeywordNew11"));
+	suite.addTest(new CompletionTests("testCompletionKeywordNew12"));
+	suite.addTest(new CompletionTests("testCompletionKeywordNew13"));
+	suite.addTest(new CompletionTests("testCompletionKeywordNew14"));
+	suite.addTest(new CompletionTests("testCompletionKeywordNew15"));
+	suite.addTest(new CompletionTests("testCompletionKeywordNew16"));
+	suite.addTest(new CompletionTests("testCompletionKeywordStatic1"));
+	suite.addTest(new CompletionTests("testCompletionKeywordStatic2"));
+	suite.addTest(new CompletionTests("testCompletionKeywordStatic3"));
+	suite.addTest(new CompletionTests("testCompletionKeywordStatic4"));
+	suite.addTest(new CompletionTests("testCompletionKeywordStatic5"));
+	suite.addTest(new CompletionTests("testCompletionKeywordStatic6"));
+	suite.addTest(new CompletionTests("testCompletionKeywordStatic7"));
+	suite.addTest(new CompletionTests("testCompletionKeywordStatic8"));
+	suite.addTest(new CompletionTests("testCompletionKeywordStatic9"));
+	suite.addTest(new CompletionTests("testCompletionKeywordStatic10"));
+	suite.addTest(new CompletionTests("testCompletionKeywordPublic1"));
+	suite.addTest(new CompletionTests("testCompletionKeywordPublic2"));
+	suite.addTest(new CompletionTests("testCompletionKeywordPublic3"));
+	suite.addTest(new CompletionTests("testCompletionKeywordPublic4"));
+	suite.addTest(new CompletionTests("testCompletionKeywordPublic5"));
+	suite.addTest(new CompletionTests("testCompletionKeywordPublic6"));
+	suite.addTest(new CompletionTests("testCompletionKeywordPublic7"));
+	suite.addTest(new CompletionTests("testCompletionKeywordPublic8"));
+	suite.addTest(new CompletionTests("testCompletionKeywordPublic9"));
+	suite.addTest(new CompletionTests("testCompletionKeywordPublic10"));
+	suite.addTest(new CompletionTests("testCompletionKeywordPublic11"));
+	suite.addTest(new CompletionTests("testCompletionKeywordPublic12"));
+	suite.addTest(new CompletionTests("testCompletionKeywordPublic13"));
+	suite.addTest(new CompletionTests("testCompletionKeywordPublic14"));
+	suite.addTest(new CompletionTests("testCompletionKeywordPublic15"));
+	suite.addTest(new CompletionTests("testCompletionKeywordPublic16"));
+	suite.addTest(new CompletionTests("testCompletionKeywordPublic17"));
+	suite.addTest(new CompletionTests("testCompletionKeywordPublic18"));
+	suite.addTest(new CompletionTests("testCompletionKeywordPublic19"));
+	suite.addTest(new CompletionTests("testCompletionKeywordPublic20"));
+	suite.addTest(new CompletionTests("testCompletionKeywordPrivate1"));
+	suite.addTest(new CompletionTests("testCompletionKeywordPrivate2"));
+	suite.addTest(new CompletionTests("testCompletionKeywordPrivate3"));
+	suite.addTest(new CompletionTests("testCompletionKeywordPrivate4"));
+	suite.addTest(new CompletionTests("testCompletionKeywordPrivate5"));
+	suite.addTest(new CompletionTests("testCompletionKeywordPrivate6"));
+	suite.addTest(new CompletionTests("testCompletionKeywordPrivate7"));
+	suite.addTest(new CompletionTests("testCompletionKeywordPrivate8"));
+	suite.addTest(new CompletionTests("testCompletionKeywordPrivate9"));
+	suite.addTest(new CompletionTests("testCompletionKeywordPrivate10"));
+	suite.addTest(new CompletionTests("testCompletionKeywordProtected1"));
+	suite.addTest(new CompletionTests("testCompletionKeywordProtected2"));
+	suite.addTest(new CompletionTests("testCompletionKeywordProtected3"));
+	suite.addTest(new CompletionTests("testCompletionKeywordProtected4"));
+	suite.addTest(new CompletionTests("testCompletionKeywordProtected5"));
+	suite.addTest(new CompletionTests("testCompletionKeywordProtected6"));
+	suite.addTest(new CompletionTests("testCompletionKeywordProtected7"));
+	suite.addTest(new CompletionTests("testCompletionKeywordProtected8"));
+	suite.addTest(new CompletionTests("testCompletionKeywordProtected9"));
+	suite.addTest(new CompletionTests("testCompletionKeywordProtected10"));
+	suite.addTest(new CompletionTests("testCompletionKeywordFinal1"));
+	suite.addTest(new CompletionTests("testCompletionKeywordFinal2"));
+	suite.addTest(new CompletionTests("testCompletionKeywordFinal3"));
+	suite.addTest(new CompletionTests("testCompletionKeywordFinal4"));
+	suite.addTest(new CompletionTests("testCompletionKeywordFinal5"));
+	suite.addTest(new CompletionTests("testCompletionKeywordFinal6"));
+	suite.addTest(new CompletionTests("testCompletionKeywordFinal7"));
+	suite.addTest(new CompletionTests("testCompletionKeywordFinal8"));
+	suite.addTest(new CompletionTests("testCompletionKeywordFinal9"));
+	suite.addTest(new CompletionTests("testCompletionKeywordFinal10"));
+	suite.addTest(new CompletionTests("testCompletionKeywordFinal11"));
+	suite.addTest(new CompletionTests("testCompletionKeywordFinal12"));
+	suite.addTest(new CompletionTests("testCompletionKeywordFinal13"));
+	suite.addTest(new CompletionTests("testCompletionKeywordFinal14"));
+	suite.addTest(new CompletionTests("testCompletionKeywordFinal15"));
+	suite.addTest(new CompletionTests("testCompletionKeywordFinal16"));
+	suite.addTest(new CompletionTests("testCompletionKeywordFinal17"));
+	suite.addTest(new CompletionTests("testCompletionKeywordFinal18"));
+	suite.addTest(new CompletionTests("testCompletionKeywordAbstract1"));
+	suite.addTest(new CompletionTests("testCompletionKeywordAbstract2"));
+	suite.addTest(new CompletionTests("testCompletionKeywordAbstract3"));
+	suite.addTest(new CompletionTests("testCompletionKeywordAbstract4"));
+	suite.addTest(new CompletionTests("testCompletionKeywordAbstract5"));
+	suite.addTest(new CompletionTests("testCompletionKeywordAbstract6"));
+	suite.addTest(new CompletionTests("testCompletionKeywordAbstract7"));
+	suite.addTest(new CompletionTests("testCompletionKeywordAbstract8"));
+	suite.addTest(new CompletionTests("testCompletionKeywordAbstract9"));
+	suite.addTest(new CompletionTests("testCompletionKeywordAbstract10"));
+	suite.addTest(new CompletionTests("testCompletionKeywordAbstract11"));
+	suite.addTest(new CompletionTests("testCompletionKeywordAbstract12"));
+	suite.addTest(new CompletionTests("testCompletionKeywordAbstract13"));
+	suite.addTest(new CompletionTests("testCompletionKeywordAbstract14"));
+	suite.addTest(new CompletionTests("testCompletionKeywordAbstract15"));
+	suite.addTest(new CompletionTests("testCompletionKeywordAbstract16"));
+	suite.addTest(new CompletionTests("testCompletionKeywordTrue1"));
+	suite.addTest(new CompletionTests("testCompletionKeywordTrue2"));
+	suite.addTest(new CompletionTests("testCompletionKeywordTrue3"));
+	suite.addTest(new CompletionTests("testCompletionKeywordTrue4"));
+	suite.addTest(new CompletionTests("testCompletionKeywordFalse1"));
+	suite.addTest(new CompletionTests("testCompletionKeywordFalse2"));
+	suite.addTest(new CompletionTests("testCompletionKeywordFalse3"));
+	suite.addTest(new CompletionTests("testCompletionKeywordFalse4"));
+	suite.addTest(new CompletionTests("testCompletionKeywordNull1"));
+	suite.addTest(new CompletionTests("testCompletionKeywordNull2"));
+	suite.addTest(new CompletionTests("testCompletionKeywordNull3"));
+	suite.addTest(new CompletionTests("testCompletionKeywordNull4"));
+	suite.addTest(new CompletionTests("testCompletionKeywordInstanceof1"));
+	suite.addTest(new CompletionTests("testCompletionKeywordInstanceof2"));
+	suite.addTest(new CompletionTests("testCompletionKeywordInstanceof3"));
+	suite.addTest(new CompletionTests("testCompletionKeywordInstanceof4"));
+	suite.addTest(new CompletionTests("testCompletionKeywordInstanceof5"));
+	suite.addTest(new CompletionTests("testCompletionKeywordInstanceof6"));
+	
 	return suite;
 }
 /**
@@ -221,8 +614,8 @@ public void testCompletionEndOfCompilationUnit() throws JavaModelException {
 	cu.codeComplete(cu.getSourceRange().getOffset() + cu.getSourceRange().getLength(), requestor);
 	assertEquals(
 		"should have two methods of 'foo'", 
-		"element:foo    completion:foo()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED)+"\n" +
-		"element:foo    completion:foo()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED),
+		"element:foo    completion:foo()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_UNQUALIFIED)+"\n" +
+		"element:foo    completion:foo()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_UNQUALIFIED),
 		requestor.getResults());	
 }
 
@@ -1480,7 +1873,8 @@ public void testCompletionUnresolvedFieldType() throws JavaModelException {
 		requestor.getResults());
 }
 /*
- * bug : http://dev.eclipse.org/bugs/show_bug.cgi?id=24440 */
+ * bug : http://dev.eclipse.org/bugs/show_bug.cgi?id=24440
+ */
 public void testCompletionUnresolvedEnclosingType() throws JavaModelException {
 	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
 	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionUnresolvedEnclosingType.java");
@@ -2469,4 +2863,5147 @@ public void testCompletionConditionalExpression3() throws JavaModelException {
 			"element:var4    completion:var4    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED),
 			requestor.getResults());
 }
+public void testCompletionKeywordThis1() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordThis1.java");
+
+		String str = cu.getSource();
+		String completeBehind = "thi";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:this    completion:this    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordThis2() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordThis2.java");
+
+		String str = cu.getSource();
+		String completeBehind = "thi";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:this    completion:this    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordThis3() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordThis3.java");
+
+		String str = cu.getSource();
+		String completeBehind = "thi";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordThis4() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordThis4.java");
+
+		String str = cu.getSource();
+		String completeBehind = "thi";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:this    completion:this    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordThis5() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordThis5.java");
+
+		String str = cu.getSource();
+		String completeBehind = "thi";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordThis6() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordThis6.java");
+
+		String str = cu.getSource();
+		String completeBehind = "thi";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:this    completion:this    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordThis7() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordThis7.java");
+
+		String str = cu.getSource();
+		String completeBehind = "thi";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordSuper1() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordSuper1.java");
+
+		String str = cu.getSource();
+		String completeBehind = "sup";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:SuperClass    completion:SuperClass    relevance:" + (R_DEFAULT + R_INTERESTING + R_UNQUALIFIED) + "\n" +
+			"element:SuperInterface    completion:SuperInterface    relevance:" + (R_DEFAULT + R_INTERESTING + R_UNQUALIFIED) + "\n" +
+			"element:super    completion:super    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordSuper2() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordSuper2.java");
+
+		String str = cu.getSource();
+		String completeBehind = "sup";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:SuperClass    completion:SuperClass    relevance:" + (R_DEFAULT + R_INTERESTING + R_UNQUALIFIED) + "\n" +
+			"element:SuperInterface    completion:SuperInterface    relevance:" + (R_DEFAULT + R_INTERESTING + R_UNQUALIFIED) + "\n" +
+			"element:super    completion:super    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordSuper3() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordSuper3.java");
+
+		String str = cu.getSource();
+		String completeBehind = "sup";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:SuperClass    completion:SuperClass    relevance:" + (R_DEFAULT + R_INTERESTING + R_UNQUALIFIED) + "\n" +
+			"element:SuperInterface    completion:SuperInterface    relevance:" + (R_DEFAULT + R_INTERESTING + R_UNQUALIFIED),
+			requestor.getResults());
+}
+public void testCompletionKeywordSuper4() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordSuper4.java");
+
+		String str = cu.getSource();
+		String completeBehind = "sup";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:SuperClass    completion:SuperClass    relevance:" + (R_DEFAULT + R_INTERESTING + R_UNQUALIFIED) + "\n" +
+			"element:SuperInterface    completion:SuperInterface    relevance:" + (R_DEFAULT + R_INTERESTING + R_UNQUALIFIED) + "\n" +
+			"element:super    completion:super    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordSuper5() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordSuper5.java");
+
+		String str = cu.getSource();
+		String completeBehind = "sup";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:SuperClass    completion:SuperClass    relevance:" + (R_DEFAULT + R_INTERESTING + R_UNQUALIFIED) + "\n" +
+			"element:SuperInterface    completion:SuperInterface    relevance:" + (R_DEFAULT + R_INTERESTING + R_UNQUALIFIED),
+			requestor.getResults());
+}
+public void testCompletionKeywordSuper6() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordSuper6.java");
+
+		String str = cu.getSource();
+		String completeBehind = "sup";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:SuperClass    completion:SuperClass    relevance:" + (R_DEFAULT + R_INTERESTING + R_UNQUALIFIED) + "\n" +
+			"element:SuperInterface    completion:SuperInterface    relevance:" + (R_DEFAULT + R_INTERESTING + R_UNQUALIFIED) + "\n" +
+			"element:super    completion:super    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE) + "\n" +
+			"element:super    completion:super()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordTry1() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordTry1.java");
+
+		String str = cu.getSource();
+		String completeBehind = "tr";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:try    completion:try    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordTry2() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordTry2.java");
+
+		String str = cu.getSource();
+		String completeBehind = "tr";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:true    completion:true    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordTry3() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordTry3.java");
+
+		String str = cu.getSource();
+		String completeBehind = "try";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordDo1() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordDo1.java");
+
+		String str = cu.getSource();
+		String completeBehind = "do";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:do    completion:do    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME)+"\n"+
+			"element:double    completion:double    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordDo2() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordDo2.java");
+
+		String str = cu.getSource();
+		String completeBehind = "do";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:double    completion:double    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordDo3() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordDo3.java");
+
+		String str = cu.getSource();
+		String completeBehind = "do";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:double    completion:double    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordFor1() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordFor1.java");
+
+		String str = cu.getSource();
+		String completeBehind = "fo";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:foo    completion:foo()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED)+"\n"+
+			"element:for    completion:for    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordFor2() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordFor2.java");
+
+		String str = cu.getSource();
+		String completeBehind = "fo";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:foo    completion:foo()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED),
+			requestor.getResults());
+}
+public void testCompletionKeywordFor3() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordFor3.java");
+
+		String str = cu.getSource();
+		String completeBehind = "fo";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordIf1() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordIf1.java");
+
+		String str = cu.getSource();
+		String completeBehind = "if";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:if    completion:if    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME),
+			requestor.getResults());
+}
+public void testCompletionKeywordIf2() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordIf2.java");
+
+		String str = cu.getSource();
+		String completeBehind = "if";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordIf3() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordIf3.java");
+
+		String str = cu.getSource();
+		String completeBehind = "if";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordReturn1() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordReturn1.java");
+
+		String str = cu.getSource();
+		String completeBehind = "re";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:return    completion:return    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordReturn2() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordReturn2.java");
+
+		String str = cu.getSource();
+		String completeBehind = "re";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordReturn3() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordReturn3.java");
+
+		String str = cu.getSource();
+		String completeBehind = "re";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordSwitch1() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordSwitch1.java");
+
+		String str = cu.getSource();
+		String completeBehind = "sw";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:switch    completion:switch    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordSwitch2() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordSwitch2.java");
+
+		String str = cu.getSource();
+		String completeBehind = "sw";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordSwitch3() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordSwitch3.java");
+
+		String str = cu.getSource();
+		String completeBehind = "sw";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordThrow1() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordThrow1.java");
+
+		String str = cu.getSource();
+		String completeBehind = "thr";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:Throwable    completion:Throwable    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED)+"\n"+
+			"element:throw    completion:throw    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordThrow2() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordThrow2.java");
+
+		String str = cu.getSource();
+		String completeBehind = "thr";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:Throwable    completion:Throwable    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED),
+			requestor.getResults());
+}
+public void testCompletionKeywordThrow3() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordThrow3.java");
+
+		String str = cu.getSource();
+		String completeBehind = "thr";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:Throwable    completion:Throwable    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED),
+			requestor.getResults());
+}
+public void testCompletionKeywordAssert1() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordAssert1.java");
+
+		String str = cu.getSource();
+		String completeBehind = "as";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:assert    completion:assert    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordAssert2() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordAssert2.java");
+
+		String str = cu.getSource();
+		String completeBehind = "as";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordAssert3() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordAssert3.java");
+
+		String str = cu.getSource();
+		String completeBehind = "as";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordElse1() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordElse1.java");
+
+		String str = cu.getSource();
+		String completeBehind = "els";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:else    completion:else    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordElse2() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordElse2.java");
+
+		String str = cu.getSource();
+		String completeBehind = "els";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordElse3() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordElse3.java");
+
+		String str = cu.getSource();
+		String completeBehind = "els";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordElse4() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordElse4.java");
+
+		String str = cu.getSource();
+		String completeBehind = "els";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordCatch1() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordCatch1.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cat";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:catch    completion:catch    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordCatch2() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordCatch2.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cat";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordCatch3() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordCatch3.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cat";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordCatch4() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordCatch4.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cat";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordCatch5() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordCatch5.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cat";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:catch    completion:catch    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE)+"\n"+
+			"element:catchz    completion:catchz    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED),
+			requestor.getResults());
+}
+public void testCompletionKeywordFinally1() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordFinally1.java");
+
+		String str = cu.getSource();
+		String completeBehind = "finall";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:finally    completion:finally    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordFinally2() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordFinally2.java");
+
+		String str = cu.getSource();
+		String completeBehind = "finall";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordFinally3() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordFinally3.java");
+
+		String str = cu.getSource();
+		String completeBehind = "finall";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordFinally4() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordFinally4.java");
+
+		String str = cu.getSource();
+		String completeBehind = "finall";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordFinally5() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordFinally5.java");
+
+		String str = cu.getSource();
+		String completeBehind = "finall";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:finally    completion:finally    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordFinally6() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordFinally6.java");
+
+		String str = cu.getSource();
+		String completeBehind = "finall";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:finally    completion:finally    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE)+"\n"+
+			"element:finallyz    completion:finallyz    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED),
+			requestor.getResults());
+}
+public void testCompletionKeywordFinally7() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordFinally7.java");
+
+		String str = cu.getSource();
+		String completeBehind = "finall";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:finallyz    completion:finallyz    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED),
+			requestor.getResults());
+}
+public void testCompletionKeywordContinue1() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordContinue1.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cont";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:continue    completion:continue    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordContinue2() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordContinue2.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cont";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordBreak1() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordBreak1.java");
+
+		String str = cu.getSource();
+		String completeBehind = "bre";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:break    completion:break    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordBreak2() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordBreak2.java");
+
+		String str = cu.getSource();
+		String completeBehind = "bre";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordBreak3() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordBreak3.java");
+
+		String str = cu.getSource();
+		String completeBehind = "bre";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:break    completion:break    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordWhile1() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordWhile1.java");
+
+		String str = cu.getSource();
+		String completeBehind = "wh";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:while    completion:while    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordWhile2() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordWhile2.java");
+
+		String str = cu.getSource();
+		String completeBehind = "wh";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordWhile3() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordWhile3.java");
+
+		String str = cu.getSource();
+		String completeBehind = "wh";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordWhile4() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordWhile4.java");
+
+		String str = cu.getSource();
+		String completeBehind = "wh";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:while    completion:while    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordWhile5() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordWhile5.java");
+
+		String str = cu.getSource();
+		String completeBehind = "wh";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:while    completion:while    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordExtends1() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordExtends1.java");
+
+		String str = cu.getSource();
+		String completeBehind = "ext";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:extends    completion:extends    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordExtends2() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordExtends2.java");
+
+		String str = cu.getSource();
+		String completeBehind = "ext";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordExtends3() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordExtends3.java");
+
+		String str = cu.getSource();
+		String completeBehind = "ext";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordExtends4() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordExtends4.java");
+
+		String str = cu.getSource();
+		String completeBehind = "ext";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:extends    completion:extends    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordExtends5() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordExtends5.java");
+
+		String str = cu.getSource();
+		String completeBehind = "ext";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordImplements1() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordImplements1.java");
+
+		String str = cu.getSource();
+		String completeBehind = "imp";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:implements    completion:implements    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordImplements2() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordImplements2.java");
+
+		String str = cu.getSource();
+		String completeBehind = "imp";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:implements    completion:implements    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordImplements3() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordImplements3.java");
+
+		String str = cu.getSource();
+		String completeBehind = "imp";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordPackage1() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordPackage1.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pac";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:package    completion:package    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordPackage2() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "p", "CompletionKeywordPackage2.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pac";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordPackage3() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordPackage3.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pac";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordPackage4() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordPackage4.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pac";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordImport1() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordImport1.java");
+
+		String str = cu.getSource();
+		String completeBehind = "imp";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:import    completion:import    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordImport2() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "p", "CompletionKeywordImport2.java");
+
+		String str = cu.getSource();
+		String completeBehind = "imp";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:import    completion:import    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordImport3() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordImport3.java");
+
+		String str = cu.getSource();
+		String completeBehind = "imp";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:import    completion:import    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordImport4() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordImport4.java");
+
+		String str = cu.getSource();
+		String completeBehind = "imp";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordCase1() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordCase1.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cas";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:case    completion:case    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordCase2() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordCase2.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cas";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:case    completion:case    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordCase3() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordCase3.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cas";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:case    completion:case    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordCase4() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordCase4.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cas";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:case    completion:case    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordCase5() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordCase5.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cas";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordDefault1() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordDefault1.java");
+
+		String str = cu.getSource();
+		String completeBehind = "def";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:Default    completion:Default    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED)+"\n"+
+			"element:default    completion:default    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordDefault2() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordDefault2.java");
+
+		String str = cu.getSource();
+		String completeBehind = "def";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:Default    completion:Default    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED)+"\n"+
+			"element:default    completion:default    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordDefault3() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordDefault3.java");
+
+		String str = cu.getSource();
+		String completeBehind = "def";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:Default    completion:Default    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED)+"\n"+
+			"element:default    completion:default    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordDefault4() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordDefault4.java");
+
+		String str = cu.getSource();
+		String completeBehind = "def";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:Default    completion:Default    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED),
+			requestor.getResults());
+}
+public void testCompletionKeywordDefault5() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordDefault5.java");
+
+		String str = cu.getSource();
+		String completeBehind = "def";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:Default    completion:Default    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED),
+			requestor.getResults());
+}
+public void testCompletionKeywordClass1() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordClass1.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cla";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:class    completion:class    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordClass2() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordClass2.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cla";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:class    completion:class    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordClass3() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordClass3.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cla";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:class    completion:class    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordClass4() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordClass4.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cla";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:class    completion:class    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordClass5() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordClass5.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cla";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:class    completion:class    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordClass6() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordClass6.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cla";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:Class    completion:Class    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED)+"\n"+
+			"element:ClassWithComplexName    completion:ClassWithComplexName    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED)+"\n"+
+			"element:class    completion:class    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordClass7() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordClass7.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cla";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:Class    completion:Class    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED)+"\n"+
+			"element:ClassWithComplexName    completion:ClassWithComplexName    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED)+"\n"+
+			"element:class    completion:class    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordClass8() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordClass8.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cla";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:Class    completion:Class    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED)+"\n"+
+			"element:ClassWithComplexName    completion:ClassWithComplexName    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED)+"\n"+
+			"element:class    completion:class    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordClass9() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordClass9.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cla";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:Class    completion:Class    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED)+"\n"+
+			"element:ClassWithComplexName    completion:ClassWithComplexName    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED)+"\n"+
+			"element:class    completion:class    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordClass10() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordClass10.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cla";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:Class    completion:Class    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED)+"\n"+
+			"element:ClassWithComplexName    completion:ClassWithComplexName    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED)+"\n"+
+			"element:class    completion:class    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordClass11() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordClass11.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cla";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:Class    completion:Class    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED)+"\n"+
+			"element:ClassWithComplexName    completion:ClassWithComplexName    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED)+"\n"+
+			"element:class    completion:class    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordClass12() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordClass12.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cla";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:Class    completion:Class    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED)+"\n"+
+			"element:ClassWithComplexName    completion:ClassWithComplexName    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED)+"\n"+
+			"element:class    completion:class    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordInterface1() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordInterface1.java");
+
+		String str = cu.getSource();
+		String completeBehind = "interf";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:interface    completion:interface    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordInterface2() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordInterface2.java");
+
+		String str = cu.getSource();
+		String completeBehind = "interf";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:interface    completion:interface    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordInterface3() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordInterface3.java");
+
+		String str = cu.getSource();
+		String completeBehind = "interf";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:interface    completion:interface    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordInterface4() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordInterface4.java");
+
+		String str = cu.getSource();
+		String completeBehind = "interf";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:interface    completion:interface    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordInterface5() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordInterface5.java");
+
+		String str = cu.getSource();
+		String completeBehind = "interf";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:interface    completion:interface    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordInterface6() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordInterface6.java");
+
+		String str = cu.getSource();
+		String completeBehind = "interf";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:interface    completion:interface    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordInterface7() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordInterface7.java");
+
+		String str = cu.getSource();
+		String completeBehind = "interf";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:interface    completion:interface    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordInterface8() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordInterface8.java");
+
+		String str = cu.getSource();
+		String completeBehind = "interf";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:interface    completion:interface    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordInterface9() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordInterface9.java");
+
+		String str = cu.getSource();
+		String completeBehind = "interf";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:interface    completion:interface    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordThrows1() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordThrows1.java");
+
+		String str = cu.getSource();
+		String completeBehind = "thro";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:throws    completion:throws    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordThrows2() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordThrows2.java");
+
+		String str = cu.getSource();
+		String completeBehind = "thro";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordThrows3() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordThrows3.java");
+
+		String str = cu.getSource();
+		String completeBehind = "thro";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:throws    completion:throws    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordThrows4() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordThrows4.java");
+
+		String str = cu.getSource();
+		String completeBehind = "thro";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:throws    completion:throws    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordSynchronized1() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordSynchronized1.java");
+
+		String str = cu.getSource();
+		String completeBehind = "syn";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:synchronized    completion:synchronized    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordSynchronized2() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordSynchronized2.java");
+
+		String str = cu.getSource();
+		String completeBehind = "syn";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordSynchronized3() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordSynchronized3.java");
+
+		String str = cu.getSource();
+		String completeBehind = "syn";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:synchronized    completion:synchronized    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordSynchronized4() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordSynchronized4.java");
+
+		String str = cu.getSource();
+		String completeBehind = "syn";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordSynchronized5() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordSynchronized5.java");
+
+		String str = cu.getSource();
+		String completeBehind = "syn";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:synchronized    completion:synchronized    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordSynchronized6() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordSynchronized6.java");
+
+		String str = cu.getSource();
+		String completeBehind = "syn";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordNative1() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordNative1.java");
+
+		String str = cu.getSource();
+		String completeBehind = "nat";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:native    completion:native    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordNative2() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordNative2.java");
+
+		String str = cu.getSource();
+		String completeBehind = "nat";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordNative3() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordNative3.java");
+
+		String str = cu.getSource();
+		String completeBehind = "nat";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:native    completion:native    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordNative4() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordNative4.java");
+
+		String str = cu.getSource();
+		String completeBehind = "nat";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordStrictfp1() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordStrictfp1.java");
+
+		String str = cu.getSource();
+		String completeBehind = "stric";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:strictfp    completion:strictfp    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordStrictfp2() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordStrictfp2.java");
+
+		String str = cu.getSource();
+		String completeBehind = "stric";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordStrictfp3() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordStrictfp3.java");
+
+		String str = cu.getSource();
+		String completeBehind = "stric";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:strictfp    completion:strictfp    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordStrictfp4() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordStrictfp4.java");
+
+		String str = cu.getSource();
+		String completeBehind = "stric";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordVolatile1() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordVolatile1.java");
+
+		String str = cu.getSource();
+		String completeBehind = "vol";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:volatile    completion:volatile    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordVolatile2() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordVolatile2.java");
+
+		String str = cu.getSource();
+		String completeBehind = "vol";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordVolatile3() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordVolatile3.java");
+
+		String str = cu.getSource();
+		String completeBehind = "vol";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:volatile    completion:volatile    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordVolatile4() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordVolatile4.java");
+
+		String str = cu.getSource();
+		String completeBehind = "vol";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordTransient1() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordTransient1.java");
+
+		String str = cu.getSource();
+		String completeBehind = "tran";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:transient    completion:transient    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordTransient2() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordTransient2.java");
+
+		String str = cu.getSource();
+		String completeBehind = "tran";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordTransient3() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordTransient3.java");
+
+		String str = cu.getSource();
+		String completeBehind = "tran";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:transient    completion:transient    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordTransient4() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordTransient4.java");
+
+		String str = cu.getSource();
+		String completeBehind = "tran";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordNew1() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordNew1.java");
+
+		String str = cu.getSource();
+		String completeBehind = "ne";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:new    completion:new    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordNew2() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordNew2.java");
+
+		String str = cu.getSource();
+		String completeBehind = "ne";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:new    completion:new    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordNew3() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordNew3.java");
+
+		String str = cu.getSource();
+		String completeBehind = "ne";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:new    completion:new    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordNew4() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordNew4.java");
+
+		String str = cu.getSource();
+		String completeBehind = "ne";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:new    completion:new    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordNew5() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordNew5.java");
+
+		String str = cu.getSource();
+		String completeBehind = "ne";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:new    completion:new    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordNew6() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordNew6.java");
+
+		String str = cu.getSource();
+		String completeBehind = "ne";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:new    completion:new    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordNew7() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordNew7.java");
+
+		String str = cu.getSource();
+		String completeBehind = "ne";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:new    completion:new    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordNew8() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordNew8.java");
+
+		String str = cu.getSource();
+		String completeBehind = "ne";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:new    completion:new    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordStatic1() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordStatic1.java");
+
+		String str = cu.getSource();
+		String completeBehind = "sta";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:static    completion:static    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordStatic2() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordStatic2.java");
+
+		String str = cu.getSource();
+		String completeBehind = "sta";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:static    completion:static    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordStatic3() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordStatic3.java");
+
+		String str = cu.getSource();
+		String completeBehind = "sta";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:static    completion:static    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordStatic4() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordStatic4.java");
+
+		String str = cu.getSource();
+		String completeBehind = "sta";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordStatic5() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordStatic5.java");
+
+		String str = cu.getSource();
+		String completeBehind = "sta";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:static    completion:static    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordPublic1() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordPublic1.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pub";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:public    completion:public    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordPublic2() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordPublic2.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pub";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:public    completion:public    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordPublic3() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordPublic3.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pub";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:public    completion:public    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordPublic4() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordPublic4.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pub";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordPublic5() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordPublic5.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pub";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordPublic6() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordPublic6.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pub";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:public    completion:public    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordPublic7() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordPublic7.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pub";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:public    completion:public    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordPublic8() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordPublic8.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pub";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:public    completion:public    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordPublic9() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordPublic9.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pub";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordPublic10() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordPublic10.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pub";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordPrivate1() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordPrivate1.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pri";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:private    completion:private    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordPrivate2() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordPrivate2.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pri";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:private    completion:private    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordPrivate3() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordPrivate3.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pri";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:private    completion:private    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordPrivate4() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordPrivate4.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pri";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordPrivate5() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordPrivate5.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pri";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordProtected1() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordProtected1.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pro";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:protected    completion:protected    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordProtected2() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordProtected2.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pro";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:protected    completion:protected    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordProtected3() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordProtected3.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pro";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:protected    completion:protected    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordProtected4() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordProtected4.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pro";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordProtected5() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordProtected5.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pro";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordFinal1() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordFinal1.java");
+
+		String str = cu.getSource();
+		String completeBehind = "fin";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:final    completion:final    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordFinal2() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordFinal2.java");
+
+		String str = cu.getSource();
+		String completeBehind = "fin";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordFinal3() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordFinal3.java");
+
+		String str = cu.getSource();
+		String completeBehind = "fin";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:final    completion:final    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordFinal4() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordFinal4.java");
+
+		String str = cu.getSource();
+		String completeBehind = "fin";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:final    completion:final    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordFinal5() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordFinal5.java");
+
+		String str = cu.getSource();
+		String completeBehind = "fin";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:final    completion:final    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE)+"\n"+
+			"element:finalize    completion:protected void finalize() throws Throwable    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordFinal6() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordFinal6.java");
+
+		String str = cu.getSource();
+		String completeBehind = "fin";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordFinal7() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordFinal7.java");
+
+		String str = cu.getSource();
+		String completeBehind = "fin";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:final    completion:final    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE)+"\n"+
+			"element:finalize    completion:protected void finalize() throws Throwable    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordFinal8() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordFinal8.java");
+
+		String str = cu.getSource();
+		String completeBehind = "fin";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:final    completion:final    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordFinal9() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordFinal9.java");
+
+		String str = cu.getSource();
+		String completeBehind = "fin";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:final    completion:final    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE)+"\n"+
+			"element:finalize    completion:finalize()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE +R_UNQUALIFIED),
+			requestor.getResults());
+}
+public void testCompletionKeywordAbstract1() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordAbstract1.java");
+
+		String str = cu.getSource();
+		String completeBehind = "abs";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:abstract    completion:abstract    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordAbstract2() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordAbstract2.java");
+
+		String str = cu.getSource();
+		String completeBehind = "abs";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordAbstract3() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordAbstract3.java");
+
+		String str = cu.getSource();
+		String completeBehind = "abs";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:abstract    completion:abstract    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordAbstract4() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordAbstract4.java");
+
+		String str = cu.getSource();
+		String completeBehind = "abs";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:abstract    completion:abstract    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordAbstract5() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordAbstract5.java");
+
+		String str = cu.getSource();
+		String completeBehind = "abs";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:abstract    completion:abstract    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordAbstract6() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordAbstract6.java");
+
+		String str = cu.getSource();
+		String completeBehind = "abs";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordAbstract7() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordAbstract7.java");
+
+		String str = cu.getSource();
+		String completeBehind = "abs";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:abstract    completion:abstract    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordAbstract8() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordAbstract8.java");
+
+		String str = cu.getSource();
+		String completeBehind = "abs";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:abstract    completion:abstract    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordTrue1() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordTrue1.java");
+
+		String str = cu.getSource();
+		String completeBehind = "tru";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordTrue2() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordTrue2.java");
+
+		String str = cu.getSource();
+		String completeBehind = "tru";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:true    completion:true    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordFalse1() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordFalse1.java");
+
+		String str = cu.getSource();
+		String completeBehind = "fal";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordFalse2() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordFalse2.java");
+
+		String str = cu.getSource();
+		String completeBehind = "fal";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:false    completion:false    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordNull1() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordNull1.java");
+
+		String str = cu.getSource();
+		String completeBehind = "nul";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordNull2() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordNull2.java");
+
+		String str = cu.getSource();
+		String completeBehind = "nul";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:null    completion:null    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordInstanceof1() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordInstanceof1.java");
+
+		String str = cu.getSource();
+		String completeBehind = "ins";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:instanceof    completion:instanceof    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordInstanceof2() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordInstanceof2.java");
+
+		String str = cu.getSource();
+		String completeBehind = "ins";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordInstanceof3() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordInstanceof3.java");
+
+		String str = cu.getSource();
+		String completeBehind = "ins";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+
+public void testCompletionKeywordThis8() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordThis8.java");
+
+		String str = cu.getSource();
+		String completeBehind = "thi";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:this    completion:this    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordThis9() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordThis9.java");
+
+		String str = cu.getSource();
+		String completeBehind = "thi";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:this    completion:this    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordThis10() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordThis10.java");
+
+		String str = cu.getSource();
+		String completeBehind = "thi";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordThis11() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordThis11.java");
+
+		String str = cu.getSource();
+		String completeBehind = "thi";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:this    completion:this    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordThis12() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordThis12.java");
+
+		String str = cu.getSource();
+		String completeBehind = "thi";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordThis13() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordThis13.java");
+
+		String str = cu.getSource();
+		String completeBehind = "thi";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:this    completion:this    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordThis14() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordThis14.java");
+
+		String str = cu.getSource();
+		String completeBehind = "thi";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordSuper7() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordSuper7.java");
+
+		String str = cu.getSource();
+		String completeBehind = "sup";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:SuperClass    completion:SuperClass    relevance:" + (R_DEFAULT + R_INTERESTING + R_UNQUALIFIED) + "\n" +
+			"element:SuperInterface    completion:SuperInterface    relevance:" + (R_DEFAULT + R_INTERESTING + R_UNQUALIFIED) + "\n" +
+			"element:super    completion:super    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordSuper8() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordSuper8.java");
+
+		String str = cu.getSource();
+		String completeBehind = "sup";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:SuperClass    completion:SuperClass    relevance:" + (R_DEFAULT + R_INTERESTING + R_UNQUALIFIED) + "\n" +
+			"element:SuperInterface    completion:SuperInterface    relevance:" + (R_DEFAULT + R_INTERESTING + R_UNQUALIFIED) + "\n" +
+			"element:super    completion:super    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordSuper9() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordSuper9.java");
+
+		String str = cu.getSource();
+		String completeBehind = "sup";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:SuperClass    completion:SuperClass    relevance:" + (R_DEFAULT + R_INTERESTING + R_UNQUALIFIED) + "\n" +
+			"element:SuperInterface    completion:SuperInterface    relevance:" + (R_DEFAULT + R_INTERESTING + R_UNQUALIFIED),
+			requestor.getResults());
+}
+public void testCompletionKeywordSuper10() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordSuper10.java");
+
+		String str = cu.getSource();
+		String completeBehind = "sup";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:SuperClass    completion:SuperClass    relevance:" + (R_DEFAULT + R_INTERESTING + R_UNQUALIFIED) + "\n" +
+			"element:SuperInterface    completion:SuperInterface    relevance:" + (R_DEFAULT + R_INTERESTING + R_UNQUALIFIED) + "\n" +
+			"element:super    completion:super    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordSuper11() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordSuper11.java");
+
+		String str = cu.getSource();
+		String completeBehind = "sup";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:SuperClass    completion:SuperClass    relevance:" + (R_DEFAULT + R_INTERESTING + R_UNQUALIFIED) + "\n" +
+			"element:SuperInterface    completion:SuperInterface    relevance:" + (R_DEFAULT + R_INTERESTING + R_UNQUALIFIED),
+			requestor.getResults());
+}
+public void testCompletionKeywordSuper12() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordSuper12.java");
+
+		String str = cu.getSource();
+		String completeBehind = "sup";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:SuperClass    completion:SuperClass    relevance:" + (R_DEFAULT + R_INTERESTING + R_UNQUALIFIED) + "\n" +
+			"element:SuperInterface    completion:SuperInterface    relevance:" + (R_DEFAULT + R_INTERESTING + R_UNQUALIFIED) + "\n" +
+			"element:super    completion:super    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE) + "\n" +
+			"element:super    completion:super()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordTry4() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordTry4.java");
+
+		String str = cu.getSource();
+		String completeBehind = "tr";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:try    completion:try    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordTry5() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordTry5.java");
+
+		String str = cu.getSource();
+		String completeBehind = "tr";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:true    completion:true    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordTry6() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordTry6.java");
+
+		String str = cu.getSource();
+		String completeBehind = "try";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordDo4() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordDo4.java");
+
+		String str = cu.getSource();
+		String completeBehind = "do";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:do    completion:do    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME)+"\n"+
+			"element:double    completion:double    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordDo5() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordDo5.java");
+
+		String str = cu.getSource();
+		String completeBehind = "do";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:double    completion:double    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordDo6() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordDo6.java");
+
+		String str = cu.getSource();
+		String completeBehind = "do";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:double    completion:double    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordFor4() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordFor4.java");
+
+		String str = cu.getSource();
+		String completeBehind = "fo";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:foo    completion:foo()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED)+"\n"+
+			"element:for    completion:for    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordFor5() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordFor5.java");
+
+		String str = cu.getSource();
+		String completeBehind = "fo";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:foo    completion:foo()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED),
+			requestor.getResults());
+}
+public void testCompletionKeywordFor6() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordFor6.java");
+
+		String str = cu.getSource();
+		String completeBehind = "fo";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordIf4() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordIf4.java");
+
+		String str = cu.getSource();
+		String completeBehind = "if";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:if    completion:if    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME),
+			requestor.getResults());
+}
+public void testCompletionKeywordIf5() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordIf5.java");
+
+		String str = cu.getSource();
+		String completeBehind = "if";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordIf6() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordIf6.java");
+
+		String str = cu.getSource();
+		String completeBehind = "if";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordReturn4() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordReturn4.java");
+
+		String str = cu.getSource();
+		String completeBehind = "re";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:return    completion:return    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordReturn5() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordReturn5.java");
+
+		String str = cu.getSource();
+		String completeBehind = "re";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordReturn6() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordReturn6.java");
+
+		String str = cu.getSource();
+		String completeBehind = "re";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordSwitch4() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordSwitch4.java");
+
+		String str = cu.getSource();
+		String completeBehind = "sw";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:switch    completion:switch    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordSwitch5() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordSwitch5.java");
+
+		String str = cu.getSource();
+		String completeBehind = "sw";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordSwitch6() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordSwitch6.java");
+
+		String str = cu.getSource();
+		String completeBehind = "sw";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordThrow4() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordThrow4.java");
+
+		String str = cu.getSource();
+		String completeBehind = "thr";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:Throwable    completion:Throwable    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED)+"\n"+
+			"element:throw    completion:throw    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordThrow5() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordThrow5.java");
+
+		String str = cu.getSource();
+		String completeBehind = "thr";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:Throwable    completion:Throwable    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED),
+			requestor.getResults());
+}
+public void testCompletionKeywordThrow6() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordThrow6.java");
+
+		String str = cu.getSource();
+		String completeBehind = "thr";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:Throwable    completion:Throwable    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED),
+			requestor.getResults());
+}
+public void testCompletionKeywordAssert4() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordAssert4.java");
+
+		String str = cu.getSource();
+		String completeBehind = "as";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:assert    completion:assert    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordAssert5() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordAssert5.java");
+
+		String str = cu.getSource();
+		String completeBehind = "as";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordAssert6() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordAssert6.java");
+
+		String str = cu.getSource();
+		String completeBehind = "as";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordElse5() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordElse5.java");
+
+		String str = cu.getSource();
+		String completeBehind = "els";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:else    completion:else    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordElse6() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordElse6.java");
+
+		String str = cu.getSource();
+		String completeBehind = "els";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordElse7() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordElse7.java");
+
+		String str = cu.getSource();
+		String completeBehind = "els";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordElse8() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordElse8.java");
+
+		String str = cu.getSource();
+		String completeBehind = "els";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordCatch6() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordCatch6.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cat";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:catch    completion:catch    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordCatch7() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordCatch7.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cat";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordCatch8() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordCatch8.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cat";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordCatch9() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordCatch9.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cat";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordCatch10() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordCatch10.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cat";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:catch    completion:catch    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE)+"\n"+
+			"element:catchz    completion:catchz    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED),
+			requestor.getResults());
+}
+public void testCompletionKeywordFinally8() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordFinally8.java");
+
+		String str = cu.getSource();
+		String completeBehind = "finall";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:finally    completion:finally    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordFinally9() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordFinally9.java");
+
+		String str = cu.getSource();
+		String completeBehind = "finall";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordFinally10() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordFinally10.java");
+
+		String str = cu.getSource();
+		String completeBehind = "finall";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordFinally11() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordFinally11.java");
+
+		String str = cu.getSource();
+		String completeBehind = "finall";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordFinally12() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordFinally12.java");
+
+		String str = cu.getSource();
+		String completeBehind = "finall";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:finally    completion:finally    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordFinally13() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordFinally13.java");
+
+		String str = cu.getSource();
+		String completeBehind = "finall";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:finally    completion:finally    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE)+"\n"+
+			"element:finallyz    completion:finallyz    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED),
+			requestor.getResults());
+}
+public void testCompletionKeywordFinally14() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordFinally14.java");
+
+		String str = cu.getSource();
+		String completeBehind = "finall";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:finallyz    completion:finallyz    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED),
+			requestor.getResults());
+}
+public void testCompletionKeywordContinue3() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordContinue3.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cont";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:continue    completion:continue    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordContinue4() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordContinue4.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cont";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordBreak4() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordBreak4.java");
+
+		String str = cu.getSource();
+		String completeBehind = "bre";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:break    completion:break    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordBreak5() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordBreak5.java");
+
+		String str = cu.getSource();
+		String completeBehind = "bre";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordBreak6() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordBreak6.java");
+
+		String str = cu.getSource();
+		String completeBehind = "bre";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:break    completion:break    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordWhile6() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordWhile6.java");
+
+		String str = cu.getSource();
+		String completeBehind = "wh";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:while    completion:while    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordWhile7() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordWhile7.java");
+
+		String str = cu.getSource();
+		String completeBehind = "wh";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordWhile8() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordWhile8.java");
+
+		String str = cu.getSource();
+		String completeBehind = "wh";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordWhile9() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordWhile9.java");
+
+		String str = cu.getSource();
+		String completeBehind = "wh";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:while    completion:while    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordWhile10() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordWhile10.java");
+
+		String str = cu.getSource();
+		String completeBehind = "wh";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:while    completion:while    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordExtends6() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordExtends6.java");
+
+		String str = cu.getSource();
+		String completeBehind = "ext";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:extends    completion:extends    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordExtends7() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordExtends7.java");
+
+		String str = cu.getSource();
+		String completeBehind = "ext";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordExtends8() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordExtends8.java");
+
+		String str = cu.getSource();
+		String completeBehind = "ext";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordExtends9() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordExtends9.java");
+
+		String str = cu.getSource();
+		String completeBehind = "ext";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:extends    completion:extends    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordExtends10() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordExtends10.java");
+
+		String str = cu.getSource();
+		String completeBehind = "ext";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordImplements4() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordImplements4.java");
+
+		String str = cu.getSource();
+		String completeBehind = "imp";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:implements    completion:implements    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordImplements5() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordImplements5.java");
+
+		String str = cu.getSource();
+		String completeBehind = "imp";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:implements    completion:implements    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordImplements6() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordImplements6.java");
+
+		String str = cu.getSource();
+		String completeBehind = "imp";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordPackage5() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordPackage5.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pac";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordPackage6() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordPackage6.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pac";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordPackage7() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordPackage7.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pac";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordPackage8() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "p", "CompletionKeywordPackage8.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pac";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordImport5() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordImport5.java");
+
+		String str = cu.getSource();
+		String completeBehind = "imp";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:import    completion:import    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordImport6() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordImport6.java");
+
+		String str = cu.getSource();
+		String completeBehind = "imp";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordImport7() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordImport7.java");
+
+		String str = cu.getSource();
+		String completeBehind = "imp";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:import    completion:import    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordImport8() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "p", "CompletionKeywordImport8.java");
+
+		String str = cu.getSource();
+		String completeBehind = "imp";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:import    completion:import    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordCase6() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordCase6.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cas";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:case    completion:case    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordCase7() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordCase7.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cas";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:case    completion:case    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordCase8() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordCase8.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cas";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:case    completion:case    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordCase9() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordCase9.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cas";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:case    completion:case    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordCase10() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordCase10.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cas";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordDefault6() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordDefault6.java");
+
+		String str = cu.getSource();
+		String completeBehind = "def";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:Default    completion:Default    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED)+"\n"+
+			"element:default    completion:default    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordDefault7() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordDefault7.java");
+
+		String str = cu.getSource();
+		String completeBehind = "def";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:Default    completion:Default    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED)+"\n"+
+			"element:default    completion:default    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordDefault8() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordDefault8.java");
+
+		String str = cu.getSource();
+		String completeBehind = "def";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:Default    completion:Default    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED)+"\n"+
+			"element:default    completion:default    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordDefault9() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordDefault9.java");
+
+		String str = cu.getSource();
+		String completeBehind = "def";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:Default    completion:Default    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED),
+			requestor.getResults());
+}
+public void testCompletionKeywordDefault10() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordDefault10.java");
+
+		String str = cu.getSource();
+		String completeBehind = "def";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:Default    completion:Default    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED),
+			requestor.getResults());
+}
+public void testCompletionKeywordClass13() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordClass13.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cla";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:class    completion:class    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordClass14() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordClass14.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cla";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:Class    completion:Class    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED)+"\n"+
+			"element:ClassWithComplexName    completion:ClassWithComplexName    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED)+"\n"+
+			"element:class    completion:class    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordClass15() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordClass15.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cla";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:Class    completion:Class    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED)+"\n"+
+			"element:ClassWithComplexName    completion:ClassWithComplexName    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED)+"\n"+
+			"element:class    completion:class    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordClass16() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordClass16.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cla";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:Class    completion:Class    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED)+"\n"+
+			"element:ClassWithComplexName    completion:ClassWithComplexName    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED)+"\n"+
+			"element:class    completion:class    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordClass17() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordClass17.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cla";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:class    completion:class    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordClass18() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordClass18.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cla";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:class    completion:class    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordClass19() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordClass19.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cla";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:class    completion:class    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordClass20() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordClass20.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cla";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:class    completion:class    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordClass21() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordClass21.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cla";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:Class    completion:Class    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED)+"\n"+
+			"element:ClassWithComplexName    completion:ClassWithComplexName    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED)+"\n"+
+			"element:class    completion:class    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordClass22() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordClass22.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cla";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:Class    completion:Class    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED)+"\n"+
+			"element:ClassWithComplexName    completion:ClassWithComplexName    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED)+"\n"+
+			"element:class    completion:class    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordClass23() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordClass23.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cla";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:Class    completion:Class    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED)+"\n"+
+			"element:ClassWithComplexName    completion:ClassWithComplexName    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED)+"\n"+
+			"element:class    completion:class    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordClass24() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordClass24.java");
+
+		String str = cu.getSource();
+		String completeBehind = "cla";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:Class    completion:Class    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED)+"\n"+
+			"element:ClassWithComplexName    completion:ClassWithComplexName    relevance:"+(R_DEFAULT + R_INTERESTING + R_UNQUALIFIED)+"\n"+
+			"element:class    completion:class    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordInterface10() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordInterface1.java");
+
+		String str = cu.getSource();
+		String completeBehind = "interf";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:interface    completion:interface    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordInterface11() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordInterface11.java");
+
+		String str = cu.getSource();
+		String completeBehind = "interf";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:interface    completion:interface    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordInterface12() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordInterface12.java");
+
+		String str = cu.getSource();
+		String completeBehind = "interf";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:interface    completion:interface    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordInterface13() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordInterface13.java");
+
+		String str = cu.getSource();
+		String completeBehind = "interf";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:interface    completion:interface    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordInterface14() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordInterface14.java");
+
+		String str = cu.getSource();
+		String completeBehind = "interf";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:interface    completion:interface    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordInterface15() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordInterface15.java");
+
+		String str = cu.getSource();
+		String completeBehind = "interf";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:interface    completion:interface    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordInterface16() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordInterface16.java");
+
+		String str = cu.getSource();
+		String completeBehind = "interf";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:interface    completion:interface    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordInterface17() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordInterface17.java");
+
+		String str = cu.getSource();
+		String completeBehind = "interf";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:interface    completion:interface    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordInterface18() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordInterface18.java");
+
+		String str = cu.getSource();
+		String completeBehind = "interf";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:interface    completion:interface    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordThrows5() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordThrows5.java");
+
+		String str = cu.getSource();
+		String completeBehind = "thro";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:throws    completion:throws    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordThrows6() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordThrows6.java");
+
+		String str = cu.getSource();
+		String completeBehind = "thro";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordThrows7() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordThrows7.java");
+
+		String str = cu.getSource();
+		String completeBehind = "thro";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:throws    completion:throws    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordThrows8() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordThrows8.java");
+
+		String str = cu.getSource();
+		String completeBehind = "thro";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:throws    completion:throws    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordSynchronized7() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordSynchronized7.java");
+
+		String str = cu.getSource();
+		String completeBehind = "syn";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:synchronized    completion:synchronized    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordSynchronized8() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordSynchronized8.java");
+
+		String str = cu.getSource();
+		String completeBehind = "syn";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordSynchronized9() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordSynchronized9.java");
+
+		String str = cu.getSource();
+		String completeBehind = "syn";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:synchronized    completion:synchronized    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordSynchronized10() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordSynchronized10.java");
+
+		String str = cu.getSource();
+		String completeBehind = "syn";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordSynchronized11() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordSynchronized11.java");
+
+		String str = cu.getSource();
+		String completeBehind = "syn";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:synchronized    completion:synchronized    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordSynchronized12() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordSynchronized12.java");
+
+		String str = cu.getSource();
+		String completeBehind = "syn";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordNative5() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordNative5.java");
+
+		String str = cu.getSource();
+		String completeBehind = "nat";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:native    completion:native    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordNative6() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordNative6.java");
+
+		String str = cu.getSource();
+		String completeBehind = "nat";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordNative7() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordNative7.java");
+
+		String str = cu.getSource();
+		String completeBehind = "nat";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:native    completion:native    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordNative8() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordNative8.java");
+
+		String str = cu.getSource();
+		String completeBehind = "nat";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordStrictfp5() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordStrictfp5.java");
+
+		String str = cu.getSource();
+		String completeBehind = "stric";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:strictfp    completion:strictfp    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordStrictfp6() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordStrictfp6.java");
+
+		String str = cu.getSource();
+		String completeBehind = "stric";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordStrictfp7() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordStrictfp7.java");
+
+		String str = cu.getSource();
+		String completeBehind = "stric";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:strictfp    completion:strictfp    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordStrictfp8() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordStrictfp8.java");
+
+		String str = cu.getSource();
+		String completeBehind = "stric";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordVolatile5() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordVolatile5.java");
+
+		String str = cu.getSource();
+		String completeBehind = "vol";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:volatile    completion:volatile    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordVolatile6() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordVolatile6.java");
+
+		String str = cu.getSource();
+		String completeBehind = "vol";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordVolatile7() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordVolatile7.java");
+
+		String str = cu.getSource();
+		String completeBehind = "vol";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:volatile    completion:volatile    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordVolatile8() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordVolatile8.java");
+
+		String str = cu.getSource();
+		String completeBehind = "vol";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordTransient5() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordTransient5.java");
+
+		String str = cu.getSource();
+		String completeBehind = "tran";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:transient    completion:transient    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordTransient6() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordTransient6.java");
+
+		String str = cu.getSource();
+		String completeBehind = "tran";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordTransient7() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordTransient7.java");
+
+		String str = cu.getSource();
+		String completeBehind = "tran";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:transient    completion:transient    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordTransient8() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordTransient8.java");
+
+		String str = cu.getSource();
+		String completeBehind = "tran";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordNew9() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordNew9.java");
+
+		String str = cu.getSource();
+		String completeBehind = "ne";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:new    completion:new    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordNew10() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordNew10.java");
+
+		String str = cu.getSource();
+		String completeBehind = "ne";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:new    completion:new    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordNew11() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordNew11.java");
+
+		String str = cu.getSource();
+		String completeBehind = "ne";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:new    completion:new    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordNew12() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordNew12.java");
+
+		String str = cu.getSource();
+		String completeBehind = "ne";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:new    completion:new    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordNew13() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordNew13.java");
+
+		String str = cu.getSource();
+		String completeBehind = "ne";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:new    completion:new    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordNew14() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordNew14.java");
+
+		String str = cu.getSource();
+		String completeBehind = "ne";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:new    completion:new    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordNew15() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordNew15.java");
+
+		String str = cu.getSource();
+		String completeBehind = "ne";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:new    completion:new    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordNew16() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordNew16.java");
+
+		String str = cu.getSource();
+		String completeBehind = "ne";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:new    completion:new    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordStatic6() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordStatic6.java");
+
+		String str = cu.getSource();
+		String completeBehind = "sta";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:static    completion:static    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordStatic7() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordStatic7.java");
+
+		String str = cu.getSource();
+		String completeBehind = "sta";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:static    completion:static    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordStatic8() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordStatic8.java");
+
+		String str = cu.getSource();
+		String completeBehind = "sta";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:static    completion:static    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordStatic9() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordStatic9.java");
+
+		String str = cu.getSource();
+		String completeBehind = "sta";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordStatic10() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordStatic10.java");
+
+		String str = cu.getSource();
+		String completeBehind = "sta";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:static    completion:static    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordPublic20() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordPublic10.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pub";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordPublic11() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordPublic11.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pub";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:public    completion:public    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordPublic12() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordPublic12.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pub";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordPublic13() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordPublic13.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pub";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:public    completion:public    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordPublic14() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordPublic14.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pub";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:public    completion:public    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordPublic15() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordPublic15.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pub";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordPublic16() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordPublic16.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pub";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordPublic17() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordPublic17.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pub";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:public    completion:public    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordPublic18() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordPublic18.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pub";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:public    completion:public    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordPublic19() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordPublic19.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pub";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:public    completion:public    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordPrivate6() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordPrivate6.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pri";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:private    completion:private    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordPrivate7() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordPrivate7.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pri";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:private    completion:private    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordPrivate8() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordPrivate8.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pri";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:private    completion:private    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordPrivate9() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordPrivate9.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pri";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordPrivate10() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordPrivate10.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pri";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordProtected6() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordProtected6.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pro";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:protected    completion:protected    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordProtected7() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordProtected7.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pro";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:protected    completion:protected    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordProtected8() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordProtected8.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pro";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:protected    completion:protected    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordProtected9() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordProtected9.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pro";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordProtected10() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordProtected10.java");
+
+		String str = cu.getSource();
+		String completeBehind = "pro";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordFinal18() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordFinal18.java");
+
+		String str = cu.getSource();
+		String completeBehind = "fin";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:final    completion:final    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE)+"\n"+
+			"element:finalize    completion:finalize()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED),
+			requestor.getResults());
+}
+public void testCompletionKeywordFinal10() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordFinal10.java");
+
+		String str = cu.getSource();
+		String completeBehind = "fin";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:final    completion:final    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordFinal11() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordFinal11.java");
+
+		String str = cu.getSource();
+		String completeBehind = "fin";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordFinal12() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordFinal12.java");
+
+		String str = cu.getSource();
+		String completeBehind = "fin";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:final    completion:final    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordFinal13() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordFinal13.java");
+
+		String str = cu.getSource();
+		String completeBehind = "fin";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:final    completion:final    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordFinal14() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordFinal14.java");
+
+		String str = cu.getSource();
+		String completeBehind = "fin";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:final    completion:final    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE)+"\n"+
+			"element:finalize    completion:protected void finalize() throws Throwable    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordFinal15() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordFinal15.java");
+
+		String str = cu.getSource();
+		String completeBehind = "fin";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordFinal16() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordFinal16.java");
+
+		String str = cu.getSource();
+		String completeBehind = "fin";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:final    completion:final    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE)+"\n"+
+			"element:finalize    completion:protected void finalize() throws Throwable    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordFinal17() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordFinal17.java");
+
+		String str = cu.getSource();
+		String completeBehind = "fin";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:final    completion:final    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordAbstract9() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordAbstract9.java");
+
+		String str = cu.getSource();
+		String completeBehind = "abs";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:abstract    completion:abstract    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordAbstract10() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordAbstract10.java");
+
+		String str = cu.getSource();
+		String completeBehind = "abs";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordAbstract11() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordAbstract11.java");
+
+		String str = cu.getSource();
+		String completeBehind = "abs";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:abstract    completion:abstract    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordAbstract12() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordAbstract12.java");
+
+		String str = cu.getSource();
+		String completeBehind = "abs";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:abstract    completion:abstract    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordAbstract13() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordAbstract13.java");
+
+		String str = cu.getSource();
+		String completeBehind = "abs";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:abstract    completion:abstract    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordAbstract14() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordAbstract14.java");
+
+		String str = cu.getSource();
+		String completeBehind = "abs";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordAbstract15() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordAbstract15.java");
+
+		String str = cu.getSource();
+		String completeBehind = "abs";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:abstract    completion:abstract    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordAbstract16() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordAbstract16.java");
+
+		String str = cu.getSource();
+		String completeBehind = "abs";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:abstract    completion:abstract    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordTrue3() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordTrue3.java");
+
+		String str = cu.getSource();
+		String completeBehind = "tru";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordTrue4() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordTrue4.java");
+
+		String str = cu.getSource();
+		String completeBehind = "tru";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:true    completion:true    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordFalse3() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordFalse3.java");
+
+		String str = cu.getSource();
+		String completeBehind = "fal";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordFalse4() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordFalse4.java");
+
+		String str = cu.getSource();
+		String completeBehind = "fal";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:false    completion:false    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordNull3() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordNull3.java");
+
+		String str = cu.getSource();
+		String completeBehind = "nul";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordNull4() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordNull4.java");
+
+		String str = cu.getSource();
+		String completeBehind = "nul";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:null    completion:null    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordInstanceof4() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordInstanceof4.java");
+
+		String str = cu.getSource();
+		String completeBehind = "ins";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"element:instanceof    completion:instanceof    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE),
+			requestor.getResults());
+}
+public void testCompletionKeywordInstanceof5() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordInstanceof5.java");
+
+		String str = cu.getSource();
+		String completeBehind = "ins";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
+public void testCompletionKeywordInstanceof6() throws JavaModelException {
+		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
+		ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordInstanceof6.java");
+
+		String str = cu.getSource();
+		String completeBehind = "ins";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor);
+
+		assertEquals(
+			"",
+			requestor.getResults());
+}
 }
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/.classpath b/org.eclipse.jdt.core.tests.model/workspace/Completion/.classpath
index bc9a750..dcd105e 100644
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/.classpath
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/.classpath
@@ -1,6 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
     <classpathentry kind="src" path="src"/>
+    <classpathentry kind="src" path="src2"/>
     <classpathentry kind="var" path="JCL_LIB" sourcepath="JCL_SRC" rootpath="JCL_SRCROOT"/>
     <classpathentry kind="lib" path="zzz.jar" sourcepath="/Completion/zzzsrc.zip"/>
     <classpathentry kind="lib" path="pack.jar"/>
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionEndOfCompilationUnit.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionEndOfCompilationUnit.java
index bb59e63..7d2aafe 100644
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionEndOfCompilationUnit.java
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionEndOfCompilationUnit.java
@@ -2,4 +2,4 @@ public class CompletionEndOfCompilationUnit {
 	public void foo() {
 	}
 	public void foo(int i) {
-		fo
\ No newline at end of file
+		foo
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract1.java
new file mode 100644
index 0000000..bc05192
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract1.java
@@ -0,0 +1 @@
+abs
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract10.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract10.java
new file mode 100644
index 0000000..ba413ce
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract10.java
@@ -0,0 +1,2 @@
+#
+final abs
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract11.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract11.java
new file mode 100644
index 0000000..e41857c
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract11.java
@@ -0,0 +1,2 @@
+#
+abs class
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract12.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract12.java
new file mode 100644
index 0000000..ea03ce3
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract12.java
@@ -0,0 +1,2 @@
+#
+public abs
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract13.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract13.java
new file mode 100644
index 0000000..38d4e5c
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract13.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordAbstract13 {
+	abs
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract14.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract14.java
new file mode 100644
index 0000000..24d4e4b
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract14.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordAbstract14 {
+	final abs
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract15.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract15.java
new file mode 100644
index 0000000..b179cd7
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract15.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordAbstract15 {
+	abs class
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract16.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract16.java
new file mode 100644
index 0000000..2e28917
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract16.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordAbstract16 {
+	public abs
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract2.java
new file mode 100644
index 0000000..a6119aa
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract2.java
@@ -0,0 +1 @@
+final abs
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract3.java
new file mode 100644
index 0000000..e274149
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract3.java
@@ -0,0 +1 @@
+abs class
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract4.java
new file mode 100644
index 0000000..fb5ab14
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract4.java
@@ -0,0 +1 @@
+public abs
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract5.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract5.java
new file mode 100644
index 0000000..fd5dbed
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract5.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordAbstract5 {
+	abs
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract6.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract6.java
new file mode 100644
index 0000000..bd45745
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract6.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordAbstract6 {
+	final abs
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract7.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract7.java
new file mode 100644
index 0000000..ae47764
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract7.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordAbstract7 {
+	abs class
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract8.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract8.java
new file mode 100644
index 0000000..1d18af8
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract8.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordAbstract8 {
+	public abs
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract9.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract9.java
new file mode 100644
index 0000000..5e3a006
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAbstract9.java
@@ -0,0 +1,2 @@
+#
+abs
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAssert1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAssert1.java
new file mode 100644
index 0000000..e8a16b0
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAssert1.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordAssert1 {
+	void foo() {
+		as
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAssert2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAssert2.java
new file mode 100644
index 0000000..afdcec8
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAssert2.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordAssert2 {
+	void foo() {
+		if(as
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAssert3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAssert3.java
new file mode 100644
index 0000000..dfe04a5
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAssert3.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordAssert3 {
+	as
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAssert4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAssert4.java
new file mode 100644
index 0000000..fda05eb
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAssert4.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordAssert4 {
+	void foo() {
+		#
+		as
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAssert5.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAssert5.java
new file mode 100644
index 0000000..2f0b6f6
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAssert5.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordAssert5 {
+	void foo() {
+		#
+		if(as
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAssert6.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAssert6.java
new file mode 100644
index 0000000..95d10cd
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordAssert6.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordAssert6 {
+	as
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordBreak1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordBreak1.java
new file mode 100644
index 0000000..96d71ce
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordBreak1.java
@@ -0,0 +1,7 @@
+public class CompletionKeywordBreak1 {
+	void foo() {
+		for(;;) {
+			{
+				bre
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordBreak2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordBreak2.java
new file mode 100644
index 0000000..a13b2ae
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordBreak2.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordBreak2 {
+	void foo() {
+		if(true) {
+			bre
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordBreak3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordBreak3.java
new file mode 100644
index 0000000..8e8f000
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordBreak3.java
@@ -0,0 +1,8 @@
+public class CompletionKeywordBreak3 {
+	void foo() {
+		switch(0) {
+			case 1 :
+				bre
+		}
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordBreak4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordBreak4.java
new file mode 100644
index 0000000..3450cb8
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordBreak4.java
@@ -0,0 +1,8 @@
+public class CompletionKeywordBreak4 {
+	void foo() {
+		#
+		for(;;) {
+			{
+				bre
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordBreak5.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordBreak5.java
new file mode 100644
index 0000000..928f049
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordBreak5.java
@@ -0,0 +1,7 @@
+public class CompletionKeywordBreak5 {
+	void foo() {
+		#
+		if(true) {
+			bre
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordBreak6.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordBreak6.java
new file mode 100644
index 0000000..00e3923
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordBreak6.java
@@ -0,0 +1,9 @@
+public class CompletionKeywordBreak6 {
+	void foo() {
+		#
+		switch(0) {
+			case 1 :
+				bre
+		}
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCase1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCase1.java
new file mode 100644
index 0000000..810e4be
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCase1.java
@@ -0,0 +1,7 @@
+public class CompletionKeywordCase1 {
+	void foo(){
+		switch(0){
+			cas	
+		}
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCase10.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCase10.java
new file mode 100644
index 0000000..5e885c5
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCase10.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordCase10 {
+	void foo(){
+		#
+		cas
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCase2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCase2.java
new file mode 100644
index 0000000..24654c4
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCase2.java
@@ -0,0 +1,8 @@
+public class CompletionKeywordCase2 {
+	void foo(){
+		switch(0){
+			case 0:
+			cas	
+		}
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCase3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCase3.java
new file mode 100644
index 0000000..78bd81e
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCase3.java
@@ -0,0 +1,8 @@
+public class CompletionKeywordCase3 {
+	void foo(){
+		switch(0){
+			default:
+			cas	
+		}
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCase4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCase4.java
new file mode 100644
index 0000000..06f3814
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCase4.java
@@ -0,0 +1,9 @@
+public class CompletionKeywordCase4 {
+	void foo(){
+		switch(0){
+			case 0:
+				break;
+			cas	
+		}
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCase5.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCase5.java
new file mode 100644
index 0000000..0c4ff39
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCase5.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordCase5 {
+	void foo(){
+		cas
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCase6.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCase6.java
new file mode 100644
index 0000000..63f6465
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCase6.java
@@ -0,0 +1,8 @@
+public class CompletionKeywordCase6 {
+	void foo(){
+		#
+		switch(0){
+			cas	
+		}
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCase7.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCase7.java
new file mode 100644
index 0000000..1b8e949
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCase7.java
@@ -0,0 +1,9 @@
+public class CompletionKeywordCase7 {
+	void foo(){
+		#
+		switch(0){
+			case 0:
+			cas	
+		}
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCase8.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCase8.java
new file mode 100644
index 0000000..7605915
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCase8.java
@@ -0,0 +1,9 @@
+public class CompletionKeywordCase8 {
+	void foo(){
+		#
+		switch(0){
+			default:
+			cas	
+		}
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCase9.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCase9.java
new file mode 100644
index 0000000..829c425
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCase9.java
@@ -0,0 +1,10 @@
+public class CompletionKeywordCase9 {
+	void foo(){
+		#
+		switch(0){
+			case 0:
+				break;
+			cas	
+		}
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCatch1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCatch1.java
new file mode 100644
index 0000000..41ea397
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCatch1.java
@@ -0,0 +1,8 @@
+public class CompletionKeywordCatch1 {
+	int catchz;
+	void foo() {
+		try {
+		
+		} cat
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCatch10.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCatch10.java
new file mode 100644
index 0000000..16b0ca3
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCatch10.java
@@ -0,0 +1,10 @@
+public class CompletionKeywordCatch10 {
+	int catchz;
+	void foo() {
+		#
+		try {
+		
+		} catch(Exception e) {
+		} cat
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCatch2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCatch2.java
new file mode 100644
index 0000000..9f78558
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCatch2.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordCatch2 {
+	void foo() {
+		cat
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCatch3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCatch3.java
new file mode 100644
index 0000000..26c8484
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCatch3.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordCatch3 {
+	cat
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCatch4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCatch4.java
new file mode 100644
index 0000000..7b1481c
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCatch4.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordCatch4 {
+	void foo() {
+		if(cat
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCatch5.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCatch5.java
new file mode 100644
index 0000000..3a5e512
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCatch5.java
@@ -0,0 +1,9 @@
+public class CompletionKeywordCatch5 {
+	int catchz;
+	void foo() {
+		try {
+		
+		} catch(Exception e) {
+		} cat
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCatch6.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCatch6.java
new file mode 100644
index 0000000..39ef860
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCatch6.java
@@ -0,0 +1,9 @@
+public class CompletionKeywordCatch6 {
+	int catchz;
+	void foo() {
+		#
+		try {
+		
+		} cat
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCatch7.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCatch7.java
new file mode 100644
index 0000000..5835010
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCatch7.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordCatch7 {
+	void foo() {
+		#
+		cat
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCatch8.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCatch8.java
new file mode 100644
index 0000000..315cc04
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCatch8.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordCath8 {
+	cat
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCatch9.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCatch9.java
new file mode 100644
index 0000000..f4c9560
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordCatch9.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordCatch9 {
+	void foo() {
+		#
+		if(cat
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass1.java
new file mode 100644
index 0000000..50f43d4
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass1.java
@@ -0,0 +1 @@
+cla
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass10.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass10.java
new file mode 100644
index 0000000..dbb84a4
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass10.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordClass10 {
+	void foo(){
+		cla
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass11.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass11.java
new file mode 100644
index 0000000..5ec5e1a
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass11.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordClass11 {
+	void foo(){
+		final cla
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass12.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass12.java
new file mode 100644
index 0000000..fc03798
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass12.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordClass12 {
+	void foo(){
+		final cla X
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass13.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass13.java
new file mode 100644
index 0000000..c46d853
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass13.java
@@ -0,0 +1,2 @@
+#
+cla
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass14.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass14.java
new file mode 100644
index 0000000..8007eb7
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass14.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordClass14 {
+	void foo(){
+		#
+		cla
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass15.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass15.java
new file mode 100644
index 0000000..57c91df
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass15.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordClass15 {
+	void foo(){
+		#
+		final cla
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass16.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass16.java
new file mode 100644
index 0000000..b7bb317
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass16.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordClass16 {
+	void foo(){
+		#
+		final cla X
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass17.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass17.java
new file mode 100644
index 0000000..c6de1aa
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass17.java
@@ -0,0 +1,5 @@
+#
+public class CompletionKeywordClass17 {
+	
+}
+cla
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass18.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass18.java
new file mode 100644
index 0000000..e8f4bbc
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass18.java
@@ -0,0 +1,2 @@
+#
+public cla
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass19.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass19.java
new file mode 100644
index 0000000..28c56e2
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass19.java
@@ -0,0 +1,2 @@
+#
+public abstract cla
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass2.java
new file mode 100644
index 0000000..5186205
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass2.java
@@ -0,0 +1,4 @@
+public class CompletionKeywordClass2 {
+	
+}
+cla
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass20.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass20.java
new file mode 100644
index 0000000..48d06ed
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass20.java
@@ -0,0 +1,2 @@
+#
+public cla CompletionKeywordClass20
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass21.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass21.java
new file mode 100644
index 0000000..c8ccfb4
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass21.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordClass21 {
+	cla
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass22.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass22.java
new file mode 100644
index 0000000..143c903
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass22.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordClass22 {
+	public cla
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass23.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass23.java
new file mode 100644
index 0000000..62d9459
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass23.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordClass23 {
+	public abstract cla
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass24.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass24.java
new file mode 100644
index 0000000..2ad220b
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass24.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordClass24 {
+	public cla X
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass3.java
new file mode 100644
index 0000000..ae11224
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass3.java
@@ -0,0 +1 @@
+public cla
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass4.java
new file mode 100644
index 0000000..cad873b
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass4.java
@@ -0,0 +1 @@
+public abstract cla
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass5.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass5.java
new file mode 100644
index 0000000..96e5eba
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass5.java
@@ -0,0 +1 @@
+public cla CompletionKeywordClass5
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass6.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass6.java
new file mode 100644
index 0000000..711577f
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass6.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordClass6 {
+	cla
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass7.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass7.java
new file mode 100644
index 0000000..e041ca3
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass7.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordClass7 {
+	public cla
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass8.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass8.java
new file mode 100644
index 0000000..0b40a40
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass8.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordClass8 {
+	public abstract cla
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass9.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass9.java
new file mode 100644
index 0000000..4cd3910
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordClass9.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordClass9 {
+	public cla X
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordContinue1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordContinue1.java
new file mode 100644
index 0000000..bedeec1
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordContinue1.java
@@ -0,0 +1,7 @@
+public class CompletionKeywordContinue1 {
+	void foo() {
+		for(;;) {
+			{
+				cont
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordContinue2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordContinue2.java
new file mode 100644
index 0000000..23593bc
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordContinue2.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordContinue2 {
+	void foo() {
+		if(true) {
+			cont
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordContinue3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordContinue3.java
new file mode 100644
index 0000000..a62f479
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordContinue3.java
@@ -0,0 +1,8 @@
+public class CompletionKeywordContinue3 {
+	void foo() {
+		#
+		for(;;) {
+			{
+				cont
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordContinue4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordContinue4.java
new file mode 100644
index 0000000..e200244
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordContinue4.java
@@ -0,0 +1,7 @@
+public class CompletionKeywordContinue4 {
+	void foo() {
+		#
+		if(true) {
+			cont
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDefault1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDefault1.java
new file mode 100644
index 0000000..45f303d
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDefault1.java
@@ -0,0 +1,7 @@
+public class CompletionKeywordDefault1 {
+	void foo(){
+		switch(0){
+			def	
+		}
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDefault10.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDefault10.java
new file mode 100644
index 0000000..e94afad
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDefault10.java
@@ -0,0 +1,9 @@
+public class CompletionKeywordDefault10 {
+	void foo(){
+		#
+		switch(0){
+			default:
+			def	
+		}
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDefault2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDefault2.java
new file mode 100644
index 0000000..cf61617
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDefault2.java
@@ -0,0 +1,8 @@
+public class CompletionKeywordDefault2 {
+	void foo(){
+		switch(0){
+			case 0:
+			def	
+		}
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDefault3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDefault3.java
new file mode 100644
index 0000000..641ec0b
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDefault3.java
@@ -0,0 +1,9 @@
+public class CompletionKeywordDefault3 {
+	void foo(){
+		switch(0){
+			case 0:
+				break;
+			def	
+		}
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDefault4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDefault4.java
new file mode 100644
index 0000000..f1021d6
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDefault4.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordDefault4 {
+	void foo(){
+		def
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDefault5.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDefault5.java
new file mode 100644
index 0000000..319b457
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDefault5.java
@@ -0,0 +1,8 @@
+public class CompletionKeywordDefault5 {
+	void foo(){
+		switch(0){
+			default:
+			def	
+		}
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDefault6.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDefault6.java
new file mode 100644
index 0000000..8e63a0d
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDefault6.java
@@ -0,0 +1,8 @@
+public class CompletionKeywordDefault6 {
+	void foo(){
+		#
+		switch(0){
+			def	
+		}
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDefault7.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDefault7.java
new file mode 100644
index 0000000..b7cc0f7
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDefault7.java
@@ -0,0 +1,9 @@
+public class CompletionKeywordDefault7 {
+	void foo(){
+		#
+		switch(0){
+			case 0:
+			def	
+		}
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDefault8.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDefault8.java
new file mode 100644
index 0000000..38c1f22
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDefault8.java
@@ -0,0 +1,10 @@
+public class CompletionKeywordDefault8 {
+	void foo(){
+		#
+		switch(0){
+			case 0:
+				break;
+			def	
+		}
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDefault9.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDefault9.java
new file mode 100644
index 0000000..d96e8f3
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDefault9.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordDefault9 {
+	void foo(){
+		#
+		def
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDo1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDo1.java
new file mode 100644
index 0000000..4a3d80a
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDo1.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordDo1 {
+	void foo() {
+		do
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDo2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDo2.java
new file mode 100644
index 0000000..5540724
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDo2.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordDo2 {
+	void foo() {
+		if(do
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDo3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDo3.java
new file mode 100644
index 0000000..86c4a74
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDo3.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordDo3 {
+	do
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDo4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDo4.java
new file mode 100644
index 0000000..803942e
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDo4.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordDo4 {
+	void foo() {
+		#
+		do
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDo5.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDo5.java
new file mode 100644
index 0000000..984f95f
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDo5.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordDo5 {
+	void foo() {
+		#
+		if(do
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDo6.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDo6.java
new file mode 100644
index 0000000..4425c09
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordDo6.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordDo6 {
+	do
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordElse1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordElse1.java
new file mode 100644
index 0000000..b47a67e
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordElse1.java
@@ -0,0 +1,7 @@
+public class CompletionKeywordElse1 {
+	void foo() {
+		if(true) {
+		
+		} els
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordElse2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordElse2.java
new file mode 100644
index 0000000..e967e1e
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordElse2.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordElse2 {
+	void foo() {
+		els
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordElse3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordElse3.java
new file mode 100644
index 0000000..be0950d
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordElse3.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordElse3 {
+	els
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordElse4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordElse4.java
new file mode 100644
index 0000000..60e96e2
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordElse4.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordElse4 {
+	void foo() {
+		if(els
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordElse5.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordElse5.java
new file mode 100644
index 0000000..20b3742
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordElse5.java
@@ -0,0 +1,8 @@
+public class CompletionKeywordElse5 {
+	void foo() {
+		#
+		if(true) {
+		
+		} els
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordElse6.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordElse6.java
new file mode 100644
index 0000000..c6b1796
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordElse6.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordElse6 {
+	void foo() {
+		#
+		els
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordElse7.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordElse7.java
new file mode 100644
index 0000000..a733074
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordElse7.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordElse7 {
+	els
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordElse8.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordElse8.java
new file mode 100644
index 0000000..f03a2b8
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordElse8.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordElse8 {
+	void foo() {
+		#
+		if(els
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordExtends1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordExtends1.java
new file mode 100644
index 0000000..882aecd
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordExtends1.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordExtends1 ext {
+	
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordExtends10.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordExtends10.java
new file mode 100644
index 0000000..9d05f75
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordExtends10.java
@@ -0,0 +1,4 @@
+#
+public interface CompletionKeywordExtends10 extends SuperInterface ext{
+	
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordExtends2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordExtends2.java
new file mode 100644
index 0000000..b9b133c
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordExtends2.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordExtends2 extends SuperClass ext {
+	
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordExtends3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordExtends3.java
new file mode 100644
index 0000000..ce90371
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordExtends3.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordExtends3 implements SuperInterface ext {
+	
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordExtends4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordExtends4.java
new file mode 100644
index 0000000..e6c498c
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordExtends4.java
@@ -0,0 +1,3 @@
+public interface CompletionKeywordExtends4 ext {
+	
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordExtends5.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordExtends5.java
new file mode 100644
index 0000000..e08980e
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordExtends5.java
@@ -0,0 +1,3 @@
+public interface CompletionKeywordExtends5 extends SuperInterface ext{
+	
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordExtends6.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordExtends6.java
new file mode 100644
index 0000000..5ebd3a0
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordExtends6.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordExtends6 ext {
+	
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordExtends7.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordExtends7.java
new file mode 100644
index 0000000..0758cf4
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordExtends7.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordExtends7 extends SuperClass ext {
+	
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordExtends8.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordExtends8.java
new file mode 100644
index 0000000..93cfe47
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordExtends8.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordExtends8 implements SuperInterface ext {
+	
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordExtends9.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordExtends9.java
new file mode 100644
index 0000000..94cdb6b
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordExtends9.java
@@ -0,0 +1,4 @@
+#
+public interface CompletionKeywordExtends9 ext {
+	
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFalse1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFalse1.java
new file mode 100644
index 0000000..0b94f70
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFalse1.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordFalse1 {
+	void foo() {
+		fal
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFalse2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFalse2.java
new file mode 100644
index 0000000..1eae452
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFalse2.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordFalse2 {
+	void foo() {
+		if(fal
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFalse3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFalse3.java
new file mode 100644
index 0000000..5a24347
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFalse3.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordFalse3 {
+	void foo() {
+		#
+		fal
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFalse4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFalse4.java
new file mode 100644
index 0000000..d8f449e
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFalse4.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordFalse4 {
+	void foo() {
+		#
+		if(fal
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal1.java
new file mode 100644
index 0000000..baf752b
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal1.java
@@ -0,0 +1 @@
+fin
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal10.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal10.java
new file mode 100644
index 0000000..adc7630
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal10.java
@@ -0,0 +1,2 @@
+#
+fin
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal11.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal11.java
new file mode 100644
index 0000000..1c92322
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal11.java
@@ -0,0 +1,2 @@
+#
+abstract fin
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal12.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal12.java
new file mode 100644
index 0000000..ef49b72
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal12.java
@@ -0,0 +1,2 @@
+#
+fin class
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal13.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal13.java
new file mode 100644
index 0000000..b7fd961
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal13.java
@@ -0,0 +1,2 @@
+#
+public fin
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal14.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal14.java
new file mode 100644
index 0000000..8c88924
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal14.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordFinal14 {
+	fin
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal15.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal15.java
new file mode 100644
index 0000000..ac3496a
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal15.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordFinal15 {
+	abstract fin
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal16.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal16.java
new file mode 100644
index 0000000..3745cd9
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal16.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordFinal16 {
+	fin class
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal17.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal17.java
new file mode 100644
index 0000000..7631782
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal17.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordFinal17 {
+	public fin
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal18.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal18.java
new file mode 100644
index 0000000..5c0b983
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal18.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordFinal18 {
+	void foo(){
+		#
+		fin
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal2.java
new file mode 100644
index 0000000..d44bee0
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal2.java
@@ -0,0 +1 @@
+abstract fin
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal3.java
new file mode 100644
index 0000000..33294e2
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal3.java
@@ -0,0 +1 @@
+fin class
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal4.java
new file mode 100644
index 0000000..7f62626
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal4.java
@@ -0,0 +1 @@
+public fin
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal5.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal5.java
new file mode 100644
index 0000000..f802f85
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal5.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordFinal5 {
+	fin
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal6.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal6.java
new file mode 100644
index 0000000..4328670
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal6.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordFinal6 {
+	abstract fin
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal7.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal7.java
new file mode 100644
index 0000000..0856d4c
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal7.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordFinal7 {
+	fin class
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal8.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal8.java
new file mode 100644
index 0000000..41aebbc
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal8.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordFinal8 {
+	public fin
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal9.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal9.java
new file mode 100644
index 0000000..81abfb2
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinal9.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordFinal9 {
+	void foo(){
+		fin
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally1.java
new file mode 100644
index 0000000..7eb94f4
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally1.java
@@ -0,0 +1,8 @@
+public class CompletionKeywordFinally1 {
+	int finallyz;
+	void foo() {
+		try {
+		
+		} finall
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally10.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally10.java
new file mode 100644
index 0000000..f91f524
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally10.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordFinally10 {
+	finall
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally11.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally11.java
new file mode 100644
index 0000000..7000091
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally11.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordFinally11 {
+	void foo() {
+		#
+		if(finall
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally12.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally12.java
new file mode 100644
index 0000000..f26eca9
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally12.java
@@ -0,0 +1,10 @@
+public class CompletionKeywordFinally12 {
+	void foo() {
+		#
+		try {
+		
+		} catch(E e){
+		
+		} finall
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally13.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally13.java
new file mode 100644
index 0000000..179b5b1
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally13.java
@@ -0,0 +1,10 @@
+public class CompletionKeywordFinally13 {
+	int finallyz;
+	void foo() {
+		#
+		try {
+		
+		} catch(Exception e) {
+		} finall
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally14.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally14.java
new file mode 100644
index 0000000..8e81880
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally14.java
@@ -0,0 +1,10 @@
+public class CompletionKeywordFinally14 {
+	int finallyz;
+	void foo() {
+		#
+		try {
+		
+		} finally {
+		} finall
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally2.java
new file mode 100644
index 0000000..669f260
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally2.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordFinally2 {
+	void foo() {
+		finall
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally3.java
new file mode 100644
index 0000000..a27d2f0
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally3.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordFinally3 {
+	finall
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally4.java
new file mode 100644
index 0000000..b780825
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally4.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordFinally4 {
+	void foo() {
+		if(finall
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally5.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally5.java
new file mode 100644
index 0000000..565bda2
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally5.java
@@ -0,0 +1,9 @@
+public class CompletionKeywordFinally5 {
+	void foo() {
+		try {
+		
+		} catch(E e){
+		
+		} finall
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally6.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally6.java
new file mode 100644
index 0000000..bce9372
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally6.java
@@ -0,0 +1,9 @@
+public class CompletionKeywordFinally6 {
+	int finallyz;
+	void foo() {
+		try {
+		
+		} catch(Exception e) {
+		} finall
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally7.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally7.java
new file mode 100644
index 0000000..1112fdf
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally7.java
@@ -0,0 +1,9 @@
+public class CompletionKeywordFinally7 {
+	int finallyz;
+	void foo() {
+		try {
+		
+		} finally {
+		} finall
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally8.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally8.java
new file mode 100644
index 0000000..e45ea80
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally8.java
@@ -0,0 +1,9 @@
+public class CompletionKeywordFinally8 {
+	int finallyz;
+	void foo() {
+		#
+		try {
+		
+		} finall
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally9.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally9.java
new file mode 100644
index 0000000..789df13
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFinally9.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordFinally9 {
+	void foo() {
+		#
+		finall
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFor1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFor1.java
new file mode 100644
index 0000000..9518483
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFor1.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordFor1 {
+	void foo() {
+		fo
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFor2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFor2.java
new file mode 100644
index 0000000..02774f8
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFor2.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordFor2 {
+	void foo() {
+		if(fo
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFor3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFor3.java
new file mode 100644
index 0000000..091b6f9
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFor3.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordFor3 {
+	fo
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFor4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFor4.java
new file mode 100644
index 0000000..3008203
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFor4.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordFor4 {
+	void foo() {
+		#
+		fo
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFor5.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFor5.java
new file mode 100644
index 0000000..4aada9f
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFor5.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordFor5 {
+	void foo() {
+		#
+		if(fo
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFor6.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFor6.java
new file mode 100644
index 0000000..224437d
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordFor6.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordFor6 {
+	fo
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordIf1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordIf1.java
new file mode 100644
index 0000000..2ac64df
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordIf1.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordIf1 {
+	void foo() {
+		if
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordIf2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordIf2.java
new file mode 100644
index 0000000..dc63970
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordIf2.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordIf2 {
+	void foo() {
+		if(if
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordIf3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordIf3.java
new file mode 100644
index 0000000..9934d16
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordIf3.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordIf3 {
+	if
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordIf4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordIf4.java
new file mode 100644
index 0000000..dbb3bd3
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordIf4.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordIf4 {
+	void foo() {
+		#
+		if
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordIf5.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordIf5.java
new file mode 100644
index 0000000..134c17c
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordIf5.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordIf5 {
+	void foo() {
+		#
+		if(if
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordIf6.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordIf6.java
new file mode 100644
index 0000000..765f0b5
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordIf6.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordIf6 {
+	if
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImplements1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImplements1.java
new file mode 100644
index 0000000..d2aaef1
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImplements1.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordImplements1 imp {
+	
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImplements2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImplements2.java
new file mode 100644
index 0000000..7c5383d
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImplements2.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordImplements2 extends SuperClass imp {
+	
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImplements3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImplements3.java
new file mode 100644
index 0000000..e605dfc
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImplements3.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordImplements3 implements SuperInterface imp {
+	
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImplements4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImplements4.java
new file mode 100644
index 0000000..9512f18
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImplements4.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordImplements4 imp {
+	
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImplements5.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImplements5.java
new file mode 100644
index 0000000..eda2228
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImplements5.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordImplements5 extends SuperClass imp {
+	
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImplements6.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImplements6.java
new file mode 100644
index 0000000..290653e
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImplements6.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordImplements6 implements SuperInterface imp {
+	
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImport1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImport1.java
new file mode 100644
index 0000000..9f5cd1d
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImport1.java
@@ -0,0 +1,5 @@
+imp
+
+public class CompletionKeywordImport1 {
+
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImport3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImport3.java
new file mode 100644
index 0000000..91fa96e
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImport3.java
@@ -0,0 +1,5 @@
+import java.lang.Object;
+imp
+public class CompletionKeywordImport3 {
+
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImport4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImport4.java
new file mode 100644
index 0000000..ab0745b
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImport4.java
@@ -0,0 +1,4 @@
+public class CompletionKeywordImport4 {
+
+}
+imp
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImport5.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImport5.java
new file mode 100644
index 0000000..ac1da05
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImport5.java
@@ -0,0 +1,5 @@
+import java.lang.Object;
+imp
+public class CompletionKeywordImport5 {
+
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImport6.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImport6.java
new file mode 100644
index 0000000..f06134a
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImport6.java
@@ -0,0 +1,5 @@
+#
+public class CompletionKeywordImport6 {
+
+}
+imp
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImport7.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImport7.java
new file mode 100644
index 0000000..3ac498e
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordImport7.java
@@ -0,0 +1,7 @@
+#
+imp
+
+package bbb;
+public class CompletionKeywordImport7 {
+
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInstanceof1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInstanceof1.java
new file mode 100644
index 0000000..df7c7f5
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInstanceof1.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordInstanceof1 {
+	void foo() {
+		if(zzz ins
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInstanceof2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInstanceof2.java
new file mode 100644
index 0000000..239c47f
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInstanceof2.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordInstanceof1 {
+	void foo() {
+		ins
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInstanceof3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInstanceof3.java
new file mode 100644
index 0000000..4816692
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInstanceof3.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordInstanceof1 {
+	void foo() {
+		if(zzz zzz ins
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInstanceof4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInstanceof4.java
new file mode 100644
index 0000000..244101a
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInstanceof4.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordInstanceof4 {
+	void foo() {
+		#
+		if(zzz ins
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInstanceof5.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInstanceof5.java
new file mode 100644
index 0000000..d47e3d0
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInstanceof5.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordInstanceof5 {
+	void foo() {
+		#
+		ins
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInstanceof6.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInstanceof6.java
new file mode 100644
index 0000000..328880e
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInstanceof6.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordInstanceof6 {
+	void foo() {
+		#
+		if(zzz zzz ins
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface1.java
new file mode 100644
index 0000000..2195f20
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface1.java
@@ -0,0 +1 @@
+interf
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface10.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface10.java
new file mode 100644
index 0000000..c401877
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface10.java
@@ -0,0 +1,2 @@
+#
+interf
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface11.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface11.java
new file mode 100644
index 0000000..b08f40c
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface11.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordInterface11 {
+}
+interf
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface12.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface12.java
new file mode 100644
index 0000000..5647383
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface12.java
@@ -0,0 +1,2 @@
+#
+public interf
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface13.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface13.java
new file mode 100644
index 0000000..3115174
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface13.java
@@ -0,0 +1,2 @@
+#
+public abstract interf
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface14.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface14.java
new file mode 100644
index 0000000..e2396ea
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface14.java
@@ -0,0 +1,2 @@
+#
+public interf CompletionKeywordInterface14
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface15.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface15.java
new file mode 100644
index 0000000..c1ad791
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface15.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordInterface15 {
+	interf
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface16.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface16.java
new file mode 100644
index 0000000..f8eb227
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface16.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordInterface16 {
+	public interf
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface17.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface17.java
new file mode 100644
index 0000000..9158ae0
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface17.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordInterface17 {
+	public abstract interf
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface18.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface18.java
new file mode 100644
index 0000000..f6948e4
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface18.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordInterface18 {
+	public interf X
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface2.java
new file mode 100644
index 0000000..0af9cf1
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface2.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordInterface2 {
+}
+interf
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface3.java
new file mode 100644
index 0000000..786edf8
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface3.java
@@ -0,0 +1 @@
+public interf
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface4.java
new file mode 100644
index 0000000..ceba81f
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface4.java
@@ -0,0 +1 @@
+public abstract interf
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface5.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface5.java
new file mode 100644
index 0000000..5586456
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface5.java
@@ -0,0 +1 @@
+public interf CompletionKeywordInterface5
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface6.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface6.java
new file mode 100644
index 0000000..d6b46e9
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface6.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordInterface6 {
+	interf
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface7.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface7.java
new file mode 100644
index 0000000..5dfcb60
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface7.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordInterface7 {
+	public interf
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface8.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface8.java
new file mode 100644
index 0000000..89cb575
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface8.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordInterface8 {
+	public abstract interf
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface9.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface9.java
new file mode 100644
index 0000000..cbcf4a0
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordInterface9.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordInterface9 {
+	public interf X
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNative1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNative1.java
new file mode 100644
index 0000000..98350fd
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNative1.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordNative1 {
+	nat
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNative2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNative2.java
new file mode 100644
index 0000000..25996bf
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNative2.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordNative2 {
+	volatile nat
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNative3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNative3.java
new file mode 100644
index 0000000..dbbb221
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNative3.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordNative3 {
+	public nat
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNative4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNative4.java
new file mode 100644
index 0000000..4c33b9d
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNative4.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordNative4 {
+	abstract nat
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNative5.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNative5.java
new file mode 100644
index 0000000..09e4a4f
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNative5.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordNative5 {
+	nat
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNative6.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNative6.java
new file mode 100644
index 0000000..e2a4254
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNative6.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordNative6 {
+	volatile nat
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNative7.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNative7.java
new file mode 100644
index 0000000..c54f87c
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNative7.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordNative7 {
+	public nat
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNative8.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNative8.java
new file mode 100644
index 0000000..0e211a3
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNative8.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordNative8 {
+	abstract nat
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew1.java
new file mode 100644
index 0000000..9339997
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew1.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordNew1 {
+	void foo(){
+		ne
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew10.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew10.java
new file mode 100644
index 0000000..5bd2346
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew10.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordNew10 {
+	void foo(){
+		#
+		ne X
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew11.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew11.java
new file mode 100644
index 0000000..48aaf9b
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew11.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordNew11 {
+	void foo(){
+		#
+		ne X()
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew12.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew12.java
new file mode 100644
index 0000000..277a1cb
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew12.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordNew12 {
+	void foo(){
+		#
+		if(ne
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew13.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew13.java
new file mode 100644
index 0000000..feaa8d4
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew13.java
@@ -0,0 +1,7 @@
+public class CompletionKeywordNew13 {
+	public class X{}
+	void foo(){
+		#
+		this.ne
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew14.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew14.java
new file mode 100644
index 0000000..2c48807
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew14.java
@@ -0,0 +1,7 @@
+public class CompletionKeywordNew14 {
+	public class X{}
+	void foo(){
+		#
+		this.ne X
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew15.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew15.java
new file mode 100644
index 0000000..171de30
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew15.java
@@ -0,0 +1,7 @@
+public class CompletionKeywordNew15 {
+	public class X{}
+	void foo(){
+		#
+		this.ne X()
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew16.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew16.java
new file mode 100644
index 0000000..39b819c
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew16.java
@@ -0,0 +1,7 @@
+public class CompletionKeywordNew16 {
+	public class X{}
+	void foo(){
+		#
+		if(this.ne
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew2.java
new file mode 100644
index 0000000..79556c0
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew2.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordNew2 {
+	void foo(){
+		ne X
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew3.java
new file mode 100644
index 0000000..b67aecd
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew3.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordNew3 {
+	void foo(){
+		ne X()
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew4.java
new file mode 100644
index 0000000..0c57717
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew4.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordNew4 {
+	void foo(){
+		if(ne
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew5.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew5.java
new file mode 100644
index 0000000..1afa478
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew5.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordNew5 {
+	public class X{}
+	void foo(){
+		this.ne
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew6.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew6.java
new file mode 100644
index 0000000..80a097b
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew6.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordNew6 {
+	public class X{}
+	void foo(){
+		this.ne X
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew7.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew7.java
new file mode 100644
index 0000000..5232168
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew7.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordNew7 {
+	public class X{}
+	void foo(){
+		this.ne X()
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew8.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew8.java
new file mode 100644
index 0000000..c8d953f
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew8.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordNew8 {
+	public class X{}
+	void foo(){
+		if(this.ne
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew9.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew9.java
new file mode 100644
index 0000000..7600f2b
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNew9.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordNew9 {
+	void foo(){
+		#
+		ne
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNull1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNull1.java
new file mode 100644
index 0000000..5cfde48
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNull1.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordNull1 {
+	void foo() {
+		nul
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNull2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNull2.java
new file mode 100644
index 0000000..e97982b
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNull2.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordNull2 {
+	void foo() {
+		if(nul
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNull3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNull3.java
new file mode 100644
index 0000000..4e8dbde
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNull3.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordNull2 {
+	void foo() {
+		#
+		nul
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNull4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNull4.java
new file mode 100644
index 0000000..3154459
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordNull4.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordNull4 {
+	void foo() {
+		#
+		if(nul
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPackage1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPackage1.java
new file mode 100644
index 0000000..b4666ba
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPackage1.java
@@ -0,0 +1,5 @@
+pac
+
+public class CompletionKeywordPackage1 {
+
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPackage3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPackage3.java
new file mode 100644
index 0000000..2775a0f
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPackage3.java
@@ -0,0 +1,6 @@
+import java.lang.Object;
+pac
+
+public class CompletionKeywordPackage3 {
+
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPackage4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPackage4.java
new file mode 100644
index 0000000..53d737e
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPackage4.java
@@ -0,0 +1,4 @@
+public class CompletionKeywordPackage4 {
+
+}
+pac
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPackage5.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPackage5.java
new file mode 100644
index 0000000..43a928d
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPackage5.java
@@ -0,0 +1,7 @@
+#
+import java.lang.Object;
+pac
+
+public class CompletionKeywordPackage5 {
+
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPackage6.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPackage6.java
new file mode 100644
index 0000000..4b86ed2
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPackage6.java
@@ -0,0 +1,5 @@
+#
+public class CompletionKeywordPackage6 {
+
+}
+pac
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPackage7.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPackage7.java
new file mode 100644
index 0000000..29d13c2
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPackage7.java
@@ -0,0 +1,7 @@
+#
+pac
+
+package bbb;
+public class CompletionKeywordPackage7 {
+
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPrivate1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPrivate1.java
new file mode 100644
index 0000000..e80a3db
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPrivate1.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordPrivate1 {
+	pri
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPrivate10.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPrivate10.java
new file mode 100644
index 0000000..210b21c
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPrivate10.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordPrivate10 {
+	public pri
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPrivate2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPrivate2.java
new file mode 100644
index 0000000..aa86929
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPrivate2.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordPrivate2 {
+	pri class
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPrivate3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPrivate3.java
new file mode 100644
index 0000000..8344779
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPrivate3.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordPrivate3{
+	final pri
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPrivate4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPrivate4.java
new file mode 100644
index 0000000..0051dec
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPrivate4.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordPrivate4 {
+	private pri
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPrivate5.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPrivate5.java
new file mode 100644
index 0000000..f40c582
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPrivate5.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordPrivate5 {
+	public pri
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPrivate6.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPrivate6.java
new file mode 100644
index 0000000..3aa816c
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPrivate6.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordPrivate6 {
+	pri
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPrivate7.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPrivate7.java
new file mode 100644
index 0000000..91e3ae2
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPrivate7.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordPrivate7 {
+	pri class
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPrivate8.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPrivate8.java
new file mode 100644
index 0000000..67732fc
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPrivate8.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordPrivate8{
+	final pri
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPrivate9.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPrivate9.java
new file mode 100644
index 0000000..377c700
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPrivate9.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordPrivate9 {
+	private pri
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordProtected1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordProtected1.java
new file mode 100644
index 0000000..2a30b0f
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordProtected1.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordProtected1 {
+	pro
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordProtected10.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordProtected10.java
new file mode 100644
index 0000000..15e4478
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordProtected10.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordProtected10 {
+	public pro
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordProtected2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordProtected2.java
new file mode 100644
index 0000000..a44a5e5
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordProtected2.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordProtected2 {
+	pro class
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordProtected3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordProtected3.java
new file mode 100644
index 0000000..e7f8d19
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordProtected3.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordProtected3{
+	final pro
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordProtected4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordProtected4.java
new file mode 100644
index 0000000..c0f41b7
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordProtected4.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordProtected4 {
+	protected pro
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordProtected5.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordProtected5.java
new file mode 100644
index 0000000..465e5db
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordProtected5.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordProtected5 {
+	public pro
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordProtected6.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordProtected6.java
new file mode 100644
index 0000000..042d55f
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordProtected6.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordProtected6 {
+	pro
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordProtected7.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordProtected7.java
new file mode 100644
index 0000000..0d0ac8b
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordProtected7.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordProtected7 {
+	pro class
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordProtected8.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordProtected8.java
new file mode 100644
index 0000000..d83c65d
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordProtected8.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordProtected8{
+	final pro
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordProtected9.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordProtected9.java
new file mode 100644
index 0000000..c162ca8
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordProtected9.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordProtected9 {
+	protected pro
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic1.java
new file mode 100644
index 0000000..8b6b7b2
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic1.java
@@ -0,0 +1 @@
+pub
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic10.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic10.java
new file mode 100644
index 0000000..307fd63
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic10.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordPublic10 {
+	private pub
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic11.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic11.java
new file mode 100644
index 0000000..954f5cf
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic11.java
@@ -0,0 +1,2 @@
+#
+pub
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic12.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic12.java
new file mode 100644
index 0000000..1b6a609
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic12.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordPublic12 {
+	private pub
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic13.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic13.java
new file mode 100644
index 0000000..de50e0d
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic13.java
@@ -0,0 +1,4 @@
+#
+pub class CompletionKeywordPublic13 {
+	
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic14.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic14.java
new file mode 100644
index 0000000..88996bb
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic14.java
@@ -0,0 +1,2 @@
+#
+final pub
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic15.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic15.java
new file mode 100644
index 0000000..0091067
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic15.java
@@ -0,0 +1,2 @@
+#
+public pub
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic16.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic16.java
new file mode 100644
index 0000000..d1a6e06
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic16.java
@@ -0,0 +1,5 @@
+#
+public class CompletionKeywordPublic16 {
+	
+}
+pub
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic17.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic17.java
new file mode 100644
index 0000000..8351ac9
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic17.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordPublic17 {
+	pub
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic18.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic18.java
new file mode 100644
index 0000000..ef27236
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic18.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordPublic18 {
+	pub class
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic19.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic19.java
new file mode 100644
index 0000000..47954ad
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic19.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordPublic19 {
+	final pub
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic2.java
new file mode 100644
index 0000000..51fc957
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic2.java
@@ -0,0 +1,3 @@
+pub class CompletionKeywordPublic2 {
+	
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic20.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic20.java
new file mode 100644
index 0000000..057250e
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic20.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordPublic20 {
+	public pub
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic3.java
new file mode 100644
index 0000000..92836e9
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic3.java
@@ -0,0 +1 @@
+final pub
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic4.java
new file mode 100644
index 0000000..11633a7
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic4.java
@@ -0,0 +1 @@
+public pub
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic5.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic5.java
new file mode 100644
index 0000000..eaaa2fd
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic5.java
@@ -0,0 +1,4 @@
+public class CompletionKeywordPublic5 {
+	
+}
+pub
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic6.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic6.java
new file mode 100644
index 0000000..d69f268
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic6.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordPublic6 {
+	pub
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic7.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic7.java
new file mode 100644
index 0000000..1354a19
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic7.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordPublic7 {
+	pub class
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic8.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic8.java
new file mode 100644
index 0000000..c1b4c94
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic8.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordPublic8 {
+	final pub
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic9.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic9.java
new file mode 100644
index 0000000..ccb6c19
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordPublic9.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordPublic9 {
+	public pub
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordReturn1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordReturn1.java
new file mode 100644
index 0000000..48844c1
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordReturn1.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordReturn1 {
+	void foo() {
+		re
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordReturn2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordReturn2.java
new file mode 100644
index 0000000..3acaed8
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordReturn2.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordReturn2 {
+	void foo() {
+		if(re
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordReturn3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordReturn3.java
new file mode 100644
index 0000000..9288492
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordReturn3.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordReturn3 {
+	re
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordReturn4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordReturn4.java
new file mode 100644
index 0000000..4aacefe
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordReturn4.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordReturn4 {
+	void foo() {
+		#
+		re
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordReturn5.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordReturn5.java
new file mode 100644
index 0000000..f374aad
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordReturn5.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordReturn5 {
+	void foo() {
+		#
+		if(re
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordReturn6.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordReturn6.java
new file mode 100644
index 0000000..c97665e
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordReturn6.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordReturn6 {
+	re
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStatic1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStatic1.java
new file mode 100644
index 0000000..5cacce7
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStatic1.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordStatic1 {
+	sta
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStatic10.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStatic10.java
new file mode 100644
index 0000000..bd46887
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStatic10.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordStatic10 {
+	public sta foo
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStatic2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStatic2.java
new file mode 100644
index 0000000..f09a6dc
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStatic2.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordStatic2 {
+	public sta
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStatic3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStatic3.java
new file mode 100644
index 0000000..1f0cd31
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStatic3.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordStatic3 {
+	sta foo
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStatic4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStatic4.java
new file mode 100644
index 0000000..e4afb43
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStatic4.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordStatic4 {
+	abstract sta
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStatic5.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStatic5.java
new file mode 100644
index 0000000..4cce86c
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStatic5.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordStatic5 {
+	public sta foo
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStatic6.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStatic6.java
new file mode 100644
index 0000000..e65a496
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStatic6.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordStatic6 {
+	sta
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStatic7.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStatic7.java
new file mode 100644
index 0000000..75850e4
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStatic7.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordStatic7 {
+	public sta
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStatic8.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStatic8.java
new file mode 100644
index 0000000..038f5dd
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStatic8.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordStatic8 {
+	sta foo
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStatic9.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStatic9.java
new file mode 100644
index 0000000..9c33f28
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStatic9.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordStatic9 {
+	abstract sta
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStrictfp1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStrictfp1.java
new file mode 100644
index 0000000..a35135d
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStrictfp1.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordStrictfp1 {
+	stric
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStrictfp2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStrictfp2.java
new file mode 100644
index 0000000..a476dab
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStrictfp2.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordStrictfp2 {
+	volatile stric
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStrictfp3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStrictfp3.java
new file mode 100644
index 0000000..b8017ec
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStrictfp3.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordStrictfp3 {
+	public stric
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStrictfp4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStrictfp4.java
new file mode 100644
index 0000000..39c77a3
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStrictfp4.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordStrictfp4 {
+	abstract stric
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStrictfp5.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStrictfp5.java
new file mode 100644
index 0000000..9db9622
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStrictfp5.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordStrictfp5 {
+	stric
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStrictfp6.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStrictfp6.java
new file mode 100644
index 0000000..a13e50f
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStrictfp6.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordStrictfp6 {
+	volatile stric
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStrictfp7.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStrictfp7.java
new file mode 100644
index 0000000..4a00693
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStrictfp7.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordStrictfp7 {
+	public stric
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStrictfp8.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStrictfp8.java
new file mode 100644
index 0000000..4d0e717
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordStrictfp8.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordStrictfp8 {
+	abstract stric
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper1.java
new file mode 100644
index 0000000..ea15e65
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper1.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordSuper1 {
+	void foo() {
+		sup
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper10.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper10.java
new file mode 100644
index 0000000..faa1caf
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper10.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordSuper10 {
+	{
+		#
+		sup
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper11.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper11.java
new file mode 100644
index 0000000..051ba72
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper11.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordSuper11 {
+	static void foo() {
+		#
+		sup
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper12.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper12.java
new file mode 100644
index 0000000..03aa2b9
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper12.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordSuper12 {
+	public CompletionKeywordSuper12() {
+		#
+		sup
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper2.java
new file mode 100644
index 0000000..70de610
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper2.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordSuper2 {
+	void foo() {
+		if(sup	
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper3.java
new file mode 100644
index 0000000..c829466
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper3.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordSuper3 {
+	sup
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper4.java
new file mode 100644
index 0000000..0784c7e
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper4.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordSuper4 {
+	{
+		sup
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper5.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper5.java
new file mode 100644
index 0000000..1475f0c
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper5.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordSuper5 {
+	static void foo() {
+		sup
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper6.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper6.java
new file mode 100644
index 0000000..f6573da
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper6.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordSuper6 {
+	public CompletionKeywordSuper6() {
+		sup
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper7.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper7.java
new file mode 100644
index 0000000..0490a11
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper7.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordSuper7 {
+	void foo() {
+		#
+		sup
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper8.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper8.java
new file mode 100644
index 0000000..f6363dc
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper8.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordSuper8 {
+	void foo() {
+		#
+		if(sup	
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper9.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper9.java
new file mode 100644
index 0000000..57df9b7
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSuper9.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordSuper9 {
+	sup
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSwitch1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSwitch1.java
new file mode 100644
index 0000000..a177f42
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSwitch1.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordSwitch1 {
+	void foo() {
+		sw
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSwitch2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSwitch2.java
new file mode 100644
index 0000000..9a6f032
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSwitch2.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordSwitch2 {
+	void foo() {
+		if(sw
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSwitch3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSwitch3.java
new file mode 100644
index 0000000..c5384b7
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSwitch3.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordSwitch3 {
+	sw
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSwitch4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSwitch4.java
new file mode 100644
index 0000000..c451789
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSwitch4.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordSwitch4 {
+	void foo() {
+		#
+		sw
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSwitch5.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSwitch5.java
new file mode 100644
index 0000000..94b7593
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSwitch5.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordSwitch5 {
+	void foo() {
+		#
+		if(sw
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSwitch6.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSwitch6.java
new file mode 100644
index 0000000..9e2e88e
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSwitch6.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordSwitch6 {
+	sw
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized1.java
new file mode 100644
index 0000000..aba0852
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized1.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordSynchronized1 {
+	syn
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized10.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized10.java
new file mode 100644
index 0000000..7b58683
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized10.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordSynchronized10 {
+	abstract syn
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized11.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized11.java
new file mode 100644
index 0000000..b59cd24
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized11.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordSynchronized11 {
+	void foo() {
+		#
+		syn
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized12.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized12.java
new file mode 100644
index 0000000..3d149dc
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized12.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordSynchronized12 {
+	void foo() {
+		#
+		if(syn
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized2.java
new file mode 100644
index 0000000..1034f14
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized2.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordSynchronized2 {
+	volatile syn
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized3.java
new file mode 100644
index 0000000..385cb08
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized3.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordSynchronized3 {
+	public syn
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized4.java
new file mode 100644
index 0000000..ceba428
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized4.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordSynchronized4 {
+	abstract syn
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized5.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized5.java
new file mode 100644
index 0000000..b6caecb
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized5.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordSynchronized5 {
+	void foo() {
+		syn
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized6.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized6.java
new file mode 100644
index 0000000..d0ad5df
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized6.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordSynchronized6 {
+	void foo() {
+		if(syn
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized7.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized7.java
new file mode 100644
index 0000000..9803ae7
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized7.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordSynchronized7 {
+	syn
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized8.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized8.java
new file mode 100644
index 0000000..7997f2f
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized8.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordSynchronized8 {
+	volatile syn
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized9.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized9.java
new file mode 100644
index 0000000..7cc7b2b
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordSynchronized9.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordSynchronized9 {
+	public syn
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis1.java
new file mode 100644
index 0000000..8c4a672
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis1.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordThis1 {
+	void foo() {
+		thi
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis10.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis10.java
new file mode 100644
index 0000000..5577948
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis10.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordThis10 {
+	thi
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis11.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis11.java
new file mode 100644
index 0000000..b1b3a47
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis11.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordThis11 {
+	{
+		#
+		thi
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis12.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis12.java
new file mode 100644
index 0000000..7290416
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis12.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordThis12 {
+	static void foo() {
+		#
+		thi
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis13.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis13.java
new file mode 100644
index 0000000..3711250
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis13.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordThis13 {
+	void foo() {
+		#
+		CompletionKeywordThis13.thi
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis14.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis14.java
new file mode 100644
index 0000000..8bf2ac5
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis14.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordThis14 {
+	static void foo() {
+		#
+		CompletionKeywordThis14.thi
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis2.java
new file mode 100644
index 0000000..b12fbc6
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis2.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordThis2 {
+	void foo() {
+		if(thi	
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis3.java
new file mode 100644
index 0000000..01dc7b0
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis3.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordThis3 {
+	thi
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis4.java
new file mode 100644
index 0000000..3570c1c
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis4.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordThis4 {
+	{
+		thi
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis5.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis5.java
new file mode 100644
index 0000000..843f489
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis5.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordThis5 {
+	static void foo() {
+		thi
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis6.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis6.java
new file mode 100644
index 0000000..68c53be
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis6.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordThis6 {
+	void foo() {
+		CompletionKeywordThis6.thi
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis7.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis7.java
new file mode 100644
index 0000000..875dc20
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis7.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordThis7 {
+	static void foo() {
+		CompletionKeywordThis7.thi
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis8.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis8.java
new file mode 100644
index 0000000..8443de2
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis8.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordThis8 {
+	void foo() {
+		#
+		thi
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis9.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis9.java
new file mode 100644
index 0000000..e044787
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis9.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordThis9 {
+	void foo() {
+		#
+		if(thi	
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrow1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrow1.java
new file mode 100644
index 0000000..d26f55b
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrow1.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordThrow1 {
+	void foo() {
+		thr
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrow2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrow2.java
new file mode 100644
index 0000000..ca5278d
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrow2.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordThrow2 {
+	void foo() {
+		if(thr
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrow3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrow3.java
new file mode 100644
index 0000000..ace9d39
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrow3.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordThrow3 {
+	thr
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrow4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrow4.java
new file mode 100644
index 0000000..91641a1
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrow4.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordThrow4 {
+	void foo() {
+		#
+		thr
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrow5.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrow5.java
new file mode 100644
index 0000000..65a9203
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrow5.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordThrow5 {
+	void foo() {
+		#
+		if(thr
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrow6.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrow6.java
new file mode 100644
index 0000000..28ad9f4
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrow6.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordThrow6 {
+	thr
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrows1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrows1.java
new file mode 100644
index 0000000..24f4f0b
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrows1.java
@@ -0,0 +1,4 @@
+public class CompletionKeywordThrows1 {
+	void foo() thro {
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrows2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrows2.java
new file mode 100644
index 0000000..1bb0d89
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrows2.java
@@ -0,0 +1,4 @@
+public class CompletionKeywordThrows2 {
+	void foo() throw Exception thro {
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrows3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrows3.java
new file mode 100644
index 0000000..e43a05d
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrows3.java
@@ -0,0 +1,4 @@
+public class CompletionKeywordThrows3 {
+	int foo()[] thro {
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrows4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrows4.java
new file mode 100644
index 0000000..4582344
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrows4.java
@@ -0,0 +1,4 @@
+public class CompletionKeywordThrows4 {
+	public CompletionKeywordThrows4() thro {
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrows5.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrows5.java
new file mode 100644
index 0000000..9b1d101
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrows5.java
@@ -0,0 +1,5 @@
+#
+public class CompletionKeywordThrows5 {
+	void foo() thro {
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrows6.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrows6.java
new file mode 100644
index 0000000..3bcc7db
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrows6.java
@@ -0,0 +1,5 @@
+#
+public class CompletionKeywordThrows6 {
+	void foo() throw Exception thro {
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrows7.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrows7.java
new file mode 100644
index 0000000..381e453
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrows7.java
@@ -0,0 +1,5 @@
+#
+public class CompletionKeywordThrows7 {
+	int foo()[] thro {
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrows8.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrows8.java
new file mode 100644
index 0000000..9f261d6
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThrows8.java
@@ -0,0 +1,5 @@
+#
+public class CompletionKeywordThrows8 {
+	public CompletionKeywordThrows8() thro {
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTransient1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTransient1.java
new file mode 100644
index 0000000..32b83ea
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTransient1.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordTransient1 {
+	tran
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTransient2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTransient2.java
new file mode 100644
index 0000000..95718c5
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTransient2.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordTransient2 {
+	native tran
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTransient3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTransient3.java
new file mode 100644
index 0000000..7c3b86c
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTransient3.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordTransient3 {
+	public tran
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTransient4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTransient4.java
new file mode 100644
index 0000000..72bbc0e
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTransient4.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordTransient4 {
+	abstract tran
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTransient5.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTransient5.java
new file mode 100644
index 0000000..8eae6e7
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTransient5.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordTransient5 {
+	tran
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTransient6.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTransient6.java
new file mode 100644
index 0000000..211c865
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTransient6.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordTransient6 {
+	native tran
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTransient7.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTransient7.java
new file mode 100644
index 0000000..5d6ef83
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTransient7.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordTransient7 {
+	public tran
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTransient8.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTransient8.java
new file mode 100644
index 0000000..51e376e
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTransient8.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordTransient8 {
+	abstract tran
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTrue1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTrue1.java
new file mode 100644
index 0000000..10a05ec
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTrue1.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordTrue1 {
+	void foo() {
+		tru
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTrue2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTrue2.java
new file mode 100644
index 0000000..19dbfdb
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTrue2.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordTrue2 {
+	void foo() {
+		if(tru
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTrue3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTrue3.java
new file mode 100644
index 0000000..7597ba2
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTrue3.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordTrue3 {
+	void foo() {
+		#
+		tru
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTrue4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTrue4.java
new file mode 100644
index 0000000..e594645
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTrue4.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordTrue4 {
+	void foo() {
+		#
+		if(tru
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTry1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTry1.java
new file mode 100644
index 0000000..309f9e2
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTry1.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordTry1 {
+	void foo() {
+		tr
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTry2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTry2.java
new file mode 100644
index 0000000..e651351
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTry2.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordTry2 {
+	void foo() {
+		if(tr
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTry3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTry3.java
new file mode 100644
index 0000000..417b2c4
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTry3.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordTry3 {
+	try
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTry4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTry4.java
new file mode 100644
index 0000000..e88a4b5
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTry4.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordTry4 {
+	void foo() {
+		#
+		tr
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTry5.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTry5.java
new file mode 100644
index 0000000..a65c42f
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTry5.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordTry5 {
+	void foo() {
+		#
+		if(tr
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTry6.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTry6.java
new file mode 100644
index 0000000..d2558e4
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordTry6.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordTry6 {
+	try
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordVolatile1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordVolatile1.java
new file mode 100644
index 0000000..4f905e7
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordVolatile1.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordVolatile1 {
+	vol
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordVolatile2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordVolatile2.java
new file mode 100644
index 0000000..61e3db1
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordVolatile2.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordVolatile2 {
+	native vol
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordVolatile3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordVolatile3.java
new file mode 100644
index 0000000..1c05b37
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordVolatile3.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordVolatile3 {
+	public vol
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordVolatile4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordVolatile4.java
new file mode 100644
index 0000000..735c1cb
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordVolatile4.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordVolatile4 {
+	abstract vol
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordVolatile5.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordVolatile5.java
new file mode 100644
index 0000000..7b44483
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordVolatile5.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordVolatile5 {
+	vol
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordVolatile6.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordVolatile6.java
new file mode 100644
index 0000000..def2379
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordVolatile6.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordVolatile6 {
+	native vol
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordVolatile7.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordVolatile7.java
new file mode 100644
index 0000000..14ff9fc
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordVolatile7.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordVolatile7 {
+	public vol
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordVolatile8.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordVolatile8.java
new file mode 100644
index 0000000..cabfd25
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordVolatile8.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordVolatile8 {
+	abstract vol
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordWhile1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordWhile1.java
new file mode 100644
index 0000000..4e1f95c
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordWhile1.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordWhile1 {
+	void foo() {
+		wh
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordWhile10.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordWhile10.java
new file mode 100644
index 0000000..95b39da
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordWhile10.java
@@ -0,0 +1,8 @@
+public class CompletionKeywordWhile10 {
+	int whilez;
+	void foo(){
+		#
+		do {
+		} wh
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordWhile2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordWhile2.java
new file mode 100644
index 0000000..7c7cd10
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordWhile2.java
@@ -0,0 +1,5 @@
+public class CompletionKeywordWhile2 {
+	void foo() {
+		if(wh
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordWhile3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordWhile3.java
new file mode 100644
index 0000000..5b0d0c1
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordWhile3.java
@@ -0,0 +1,3 @@
+public class CompletionKeywordWhile3 {
+	wh
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordWhile4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordWhile4.java
new file mode 100644
index 0000000..4c322ed
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordWhile4.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordWhile4 {
+	void foo(){
+		do {
+		} wh
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordWhile5.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordWhile5.java
new file mode 100644
index 0000000..8ebd8ea
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordWhile5.java
@@ -0,0 +1,7 @@
+public class CompletionKeywordWhile5 {
+	int whilez;
+	void foo(){
+		do {
+		} wh
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordWhile6.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordWhile6.java
new file mode 100644
index 0000000..64584e0
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordWhile6.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordWhile6 {
+	void foo() {
+		#
+		wh
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordWhile7.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordWhile7.java
new file mode 100644
index 0000000..f748c4b
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordWhile7.java
@@ -0,0 +1,6 @@
+public class CompletionKeywordWhile7 {
+	void foo() {
+		#
+		if(wh
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordWhile8.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordWhile8.java
new file mode 100644
index 0000000..a030f56
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordWhile8.java
@@ -0,0 +1,4 @@
+#
+public class CompletionKeywordWhile8 {
+	wh
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordWhile9.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordWhile9.java
new file mode 100644
index 0000000..3b15277
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordWhile9.java
@@ -0,0 +1,7 @@
+public class CompletionKeywordWhile9 {
+	void foo(){
+		#
+		do {
+		} wh
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/p/CompletionKeywordImport2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/p/CompletionKeywordImport2.java
new file mode 100644
index 0000000..b0aa24b
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/p/CompletionKeywordImport2.java
@@ -0,0 +1,6 @@
+package p;
+imp
+
+public class CompletionKeywordImport2 {
+
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/p/CompletionKeywordImport8.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/p/CompletionKeywordImport8.java
new file mode 100644
index 0000000..5fffb18
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/p/CompletionKeywordImport8.java
@@ -0,0 +1,7 @@
+#
+package p;
+imp
+
+public class CompletionKeywordImport8 {
+
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/p/CompletionKeywordPackage2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/p/CompletionKeywordPackage2.java
new file mode 100644
index 0000000..0f4736d
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/p/CompletionKeywordPackage2.java
@@ -0,0 +1,5 @@
+package p;
+pac
+public class CompletionKeywordPackage2 {
+
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/p/CompletionKeywordPackage8.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/p/CompletionKeywordPackage8.java
new file mode 100644
index 0000000..de8d898
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/p/CompletionKeywordPackage8.java
@@ -0,0 +1,6 @@
+#
+package p;
+pac
+public class CompletionKeywordPackage8 {
+
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core/buildnotes_jdt-core.html b/org.eclipse.jdt.core/buildnotes_jdt-core.html
index 9cf63d8..7c84b41 100644
--- a/org.eclipse.jdt.core/buildnotes_jdt-core.html
+++ b/org.eclipse.jdt.core/buildnotes_jdt-core.html
@@ -44,7 +44,9 @@ What's new in this drop</h2>
 </ul>
 
 <h3>Problem Reports Fixed</h3>
-<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=29771">29771</a>
+<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=19063">19063</a>
+code assist proposals for keywords
+<br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=29771">29771</a>
 No reference found to IResource.getLocation when no case sensitive
 <br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=28236">28236</a>
 Search for refs to class in hierarchy matches class outside hierarchy 
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
index 3c0f8ad..dc10d58 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
@@ -24,6 +24,7 @@ import org.eclipse.jdt.core.compiler.IProblem;
 import org.eclipse.jdt.internal.codeassist.complete.*;
 import org.eclipse.jdt.internal.codeassist.impl.AssistParser;
 import org.eclipse.jdt.internal.codeassist.impl.Engine;
+import org.eclipse.jdt.internal.codeassist.impl.Keywords;
 import org.eclipse.jdt.internal.compiler.CompilationResult;
 import org.eclipse.jdt.internal.compiler.DefaultErrorHandlingPolicies;
 import org.eclipse.jdt.internal.compiler.ast.*;
@@ -378,16 +379,16 @@ public final class CompletionEngine
 		if(astNodeParent != null) {
 			computeExpectedTypes(astNodeParent, scope);
 		}
-
-		// defaults... some nodes will change these
+		
 		if (astNode instanceof CompletionOnFieldType) {
 
 			CompletionOnFieldType field = (CompletionOnFieldType) astNode;
 			CompletionOnSingleTypeReference type = (CompletionOnSingleTypeReference) field.type;
 			token = type.token;
 			setSourceRange(type.sourceStart, type.sourceEnd);
-			//		findKeywords(token, modifiers, scope); // could be the start of a field, method or member type
+			
 			findTypesAndPackages(token, scope);
+			findKeywordsForMember(token, field.modifiers);
 			
 			if(!field.isLocalVariable && field.modifiers == CompilerModifiers.AccDefault) {
 				findMethods(token,null,scope.enclosingSourceType(),scope,new ObjectVector(),false,false,true,null,null,false);
@@ -400,15 +401,16 @@ public final class CompletionEngine
 				token = type.token;
 				setSourceRange(type.sourceStart, type.sourceEnd);
 				findTypesAndPackages(token, scope);
-				
+				findKeywordsForMember(token, method.modifiers);
+			
 				if(method.modifiers == CompilerModifiers.AccDefault) {
 					findMethods(token,null,scope.enclosingSourceType(),scope,new ObjectVector(),false,false,true,null,null,false);
 				}
 			} else {
 				
 				if (astNode instanceof CompletionOnSingleNameReference) {
-	
-					token = ((CompletionOnSingleNameReference) astNode).token;
+					CompletionOnSingleNameReference singleNameReference = (CompletionOnSingleNameReference) astNode;
+					token = singleNameReference.token;
 					findVariablesAndMethods(
 						token,
 						scope,
@@ -416,7 +418,16 @@ public final class CompletionEngine
 						scope);
 					// can be the start of a qualified type name
 					findTypesAndPackages(token, scope);
-	
+					findKeywords(token, singleNameReference.possibleKeywords);
+					if(singleNameReference.canBeExplicitConstructor){
+						if(CharOperation.prefixEquals(token, Keywords.THIS, false)) {
+							ReferenceBinding ref = scope.enclosingSourceType();
+							findExplicitConstructors(Keywords.THIS, ref, (MethodScope)scope, singleNameReference);
+						} else if(CharOperation.prefixEquals(token, Keywords.SUPER, false)) {
+							ReferenceBinding ref = scope.enclosingSourceType();
+							findExplicitConstructors(Keywords.SUPER, ref.superclass(), (MethodScope)scope, singleNameReference);
+						}
+					}
 				} else {
 	
 					if (astNode instanceof CompletionOnSingleTypeReference) {
@@ -465,6 +476,12 @@ public final class CompletionEngine
 									findMemberTypes(token, receiverType, scope, scope.enclosingSourceType());
 	
 									findClassField(token, (TypeBinding) qualifiedBinding, scope);
+									
+									MethodScope methodScope = null;
+									if((scope instanceof MethodScope && !((MethodScope)scope).isStatic)
+										|| ((methodScope = scope.enclosingMethodScope()) != null && !methodScope.isStatic)) {
+										findKeywords(token, new char[][]{Keywords.THIS});
+									}
 	
 									findFields(
 										token,
@@ -545,7 +562,9 @@ public final class CompletionEngine
 									setSourceRange((int) (completionPosition >>> 32), (int) completionPosition);
 					
 									token = access.token;
-	
+									
+									findKeywords(token, new char[][]{Keywords.NEW});
+									
 									findFieldsAndMethods(
 										token,
 										(TypeBinding) qualifiedBinding,
@@ -683,6 +702,11 @@ public final class CompletionEngine
 																	token = ((CompletionOnArgumentName) variable).realName;
 																	findVariableNames(token, variable.type, excludeNames, ARGUMENT, variable.modifiers);
 																}
+															} else {
+																if(astNode instanceof CompletionOnKeyword) {
+																	CompletionOnKeyword keyword = (CompletionOnKeyword)astNode;
+																	findKeywords(keyword.getToken(), keyword.getPossibleKeywords());
+																}
 															}
 														}
 													}
@@ -839,6 +863,10 @@ public final class CompletionEngine
 						if (importReference instanceof CompletionOnImportReference) {
 							findImports((CompletionOnImportReference) importReference);
 							return;
+						} else if(importReference instanceof CompletionOnKeyword) {
+							setSourceRange(importReference.sourceStart, importReference.sourceEnd);
+							CompletionOnKeyword keyword = (CompletionOnKeyword)importReference;
+							findKeywords(keyword.getToken(), keyword.getPossibleKeywords());
 						}
 					}
 				}
@@ -971,6 +999,68 @@ public final class CompletionEngine
 		}
 	}
 
+	private void findExplicitConstructors(
+		char[] name,
+		ReferenceBinding currentType,
+		MethodScope scope,
+		InvocationSite invocationSite) {
+			
+		ConstructorDeclaration constructorDeclaration = (ConstructorDeclaration)scope.referenceContext;
+		MethodBinding enclosingConstructor = constructorDeclaration.binding;
+
+		// No visibility checks can be performed without the scope & invocationSite
+		MethodBinding[] methods = currentType.availableMethods();
+		if(methods != null) {
+			next : for (int f = methods.length; --f >= 0;) {
+				MethodBinding constructor = methods[f];
+				if (constructor != enclosingConstructor && constructor.isConstructor()) {
+					
+					if (constructor.isSynthetic()) continue next;
+						
+					if (options.checkVisibility
+						&& !constructor.canBeSeenBy(invocationSite, scope))	continue next;
+	
+					TypeBinding[] parameters = constructor.parameters;
+					int paramLength = parameters.length;
+	
+					char[][] parameterPackageNames = new char[paramLength][];
+					char[][] parameterTypeNames = new char[paramLength][];
+					for (int i = 0; i < paramLength; i++) {
+						TypeBinding type = parameters[i];
+						parameterPackageNames[i] = type.qualifiedPackageName();
+						parameterTypeNames[i] = type.qualifiedSourceName();
+					}
+					char[][] parameterNames = findMethodParameterNames(constructor,parameterTypeNames);
+					
+					char[] completion = CharOperation.NO_CHAR;
+					if (source != null
+						&& source.length > endPosition
+						&& source[endPosition] == '(')
+						completion = name;
+					else
+						completion = CharOperation.concat(name, new char[] { '(', ')' });
+					
+					int relevance = computeBaseRelevance();
+					relevance += computeRelevanceForInterestingProposal();
+					relevance += computeRelevanceForCaseMatching(token, name);
+					requestor.acceptMethod(
+						currentType.qualifiedPackageName(),
+						currentType.qualifiedSourceName(),
+						name,
+						parameterPackageNames,
+						parameterTypeNames,
+						parameterNames,
+						CharOperation.NO_CHAR,
+						CharOperation.NO_CHAR,
+						completion,
+						constructor.modifiers,
+						startPosition - offset,
+						endPosition - offset,
+						relevance);
+				}
+			}
+		}
+	}
 	private void findConstructors(
 		ReferenceBinding currentType,
 		TypeBinding[] argTypes,
@@ -1344,8 +1434,9 @@ public final class CompletionEngine
 
 	// what about onDemand types? Ignore them since it does not happen!
 	// import p1.p2.A.*;
-	private void findKeywords(char[] keyword, char[][] choices, Scope scope) {
-
+	private void findKeywords(char[] keyword, char[][] choices) {
+		if(choices == null || choices.length == 0) return;
+		
 		int length = keyword.length;
 		if (length > 0)
 			for (int i = 0; i < choices.length; i++)
@@ -1359,6 +1450,96 @@ public final class CompletionEngine
 					requestor.acceptKeyword(choices[i], startPosition - offset, endPosition - offset,relevance);
 				}
 	}
+	
+	private void findKeywordsForMember(char[] token, int modifiers) {
+		char[][] keywords = new char[Keywords.COUNT][];
+		int count = 0;
+				
+		// visibility
+		if((modifiers & CompilerModifiers.AccPrivate) == 0
+			&& (modifiers & CompilerModifiers.AccProtected) == 0
+			&& (modifiers & CompilerModifiers.AccPublic) == 0) {
+			keywords[count++] = Keywords.PROTECTED;
+			keywords[count++] = Keywords.PUBLIC;
+			if((modifiers & CompilerModifiers.AccAbstract) == 0) {
+				keywords[count++] = Keywords.PRIVATE;
+			}
+		}
+		
+		if((modifiers & CompilerModifiers.AccAbstract) == 0) {
+			// abtract
+			if((modifiers & ~(CompilerModifiers.AccVisibilityMASK | CompilerModifiers.AccStatic)) == 0) {
+				keywords[count++] = Keywords.ABSTARCT;
+			}
+			
+			// final
+			if((modifiers & CompilerModifiers.AccFinal) == 0) {
+				keywords[count++] = Keywords.FINAL;
+			}
+			
+			// static
+			if((modifiers & CompilerModifiers.AccStatic) == 0) {
+				keywords[count++] = Keywords.STATIC;
+			}
+			
+			boolean canBeField = true;
+			boolean canBeMethod = true;
+			boolean canBeType = true;
+			if((modifiers & CompilerModifiers.AccNative) != 0
+				|| (modifiers & CompilerModifiers.AccStrictfp) != 0
+				|| (modifiers & CompilerModifiers.AccSynchronized) != 0) {
+				canBeField = false;
+				canBeType = false;
+			}
+			
+			if((modifiers & CompilerModifiers.AccTransient) != 0
+				|| (modifiers & CompilerModifiers.AccVolatile) != 0) {
+				canBeMethod = false;
+				canBeType = false;
+			}
+			
+			if(canBeField) {
+				// transient
+				if((modifiers & CompilerModifiers.AccTransient) == 0) {
+					keywords[count++] = Keywords.TRANSIENT;
+				}
+				
+				// volatile
+				if((modifiers & CompilerModifiers.AccVolatile) == 0) {
+					keywords[count++] = Keywords.VOLATILE;
+				}
+			}
+			
+			if(canBeMethod) {
+				// native
+				if((modifiers & CompilerModifiers.AccNative) == 0) {
+					keywords[count++] = Keywords.NATIVE;
+				}
+	
+				// strictfp
+				if((modifiers & CompilerModifiers.AccStrictfp) == 0) {
+					keywords[count++] = Keywords.STRICTFP;
+				}
+				
+				// synchronized
+				if((modifiers & CompilerModifiers.AccSynchronized) == 0) {
+					keywords[count++] = Keywords.SYNCHRONIZED;
+				}
+			}
+			
+			if(canBeType) {
+				keywords[count++] = Keywords.CLASS;
+				keywords[count++] = Keywords.INTERFACE;
+			}
+		} else {
+			// class
+			keywords[count++] = Keywords.CLASS;
+			keywords[count++] = Keywords.INTERFACE;
+		}
+		System.arraycopy(keywords, 0, keywords = new char[count][], 0, count);
+		
+		findKeywords(token, keywords);
+	}
 
 	// Helper method for findMemberTypes(char[], ReferenceBinding, Scope)
 	private void findMemberTypes(
@@ -2449,7 +2630,7 @@ public final class CompletionEngine
 				}
 			} 
 		} else {
-			findKeywords(token, baseTypes, scope);
+			findKeywords(token, baseTypes);
 			nameEnvironment.findTypes(token, this);
 			nameEnvironment.findPackages(token, this);
 		}
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnKeyword.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnKeyword.java
new file mode 100644
index 0000000..3481ce4
--- /dev/null
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnKeyword.java
@@ -0,0 +1,16 @@
+/*******************************************************************************
+ * Copyright (c) 2003 International Business Machines Corp. and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Common Public License v1.0 
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/cpl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ ******************************************************************************/
+package org.eclipse.jdt.internal.codeassist.complete;
+
+public interface CompletionOnKeyword {
+	char[] getToken();
+	char[][] getPossibleKeywords();
+}
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnKeyword1.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnKeyword1.java
new file mode 100644
index 0000000..792adf8
--- /dev/null
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnKeyword1.java
@@ -0,0 +1,41 @@
+/*******************************************************************************
+ * Copyright (c) 2003 International Business Machines Corp. and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Common Public License v1.0 
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/cpl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ ******************************************************************************/
+package org.eclipse.jdt.internal.codeassist.complete;
+
+import org.eclipse.jdt.internal.compiler.ast.SingleTypeReference;
+import org.eclipse.jdt.internal.compiler.lookup.Scope;
+import org.eclipse.jdt.internal.compiler.lookup.TypeBinding;
+
+public class CompletionOnKeyword1 extends SingleTypeReference implements CompletionOnKeyword {
+	private char[][] possibleKeywords;
+	public CompletionOnKeyword1(char[] token, long pos, char[] possibleKeyword) {
+		this(token, pos, new char[][]{possibleKeyword});
+	}
+	public CompletionOnKeyword1(char[] token, long pos, char[][] possibleKeywords) {
+		super(token, pos);
+		this.possibleKeywords = possibleKeywords;
+	}
+	public char[] getToken() {
+		return token;
+	}
+	public char[][] getPossibleKeywords() {
+		return possibleKeywords;
+	}
+	public void aboutToResolve(Scope scope) {
+		getTypeBinding(scope);
+	}
+	public TypeBinding getTypeBinding(Scope scope) {
+		throw new CompletionNodeFound(this, scope);
+	}
+	public String toStringExpression(int tab){
+		return "<CompleteOnKeyword:"+new String(token)+">";  //$NON-NLS-1$  //$NON-NLS-2$
+	}
+}
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnKeyword2.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnKeyword2.java
new file mode 100644
index 0000000..a62ecba
--- /dev/null
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnKeyword2.java
@@ -0,0 +1,34 @@
+/*******************************************************************************
+ * Copyright (c) 2003 International Business Machines Corp. and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Common Public License v1.0 
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/cpl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ ******************************************************************************/
+package org.eclipse.jdt.internal.codeassist.complete;
+
+import org.eclipse.jdt.internal.compiler.ast.ImportReference;
+
+public class CompletionOnKeyword2 extends ImportReference implements CompletionOnKeyword {
+	private char[] token;
+	private long pos;
+	private char[][] possibleKeywords;
+	public CompletionOnKeyword2(char[] token, long pos, char[][] possibleKeywords) {
+		super(new char[][]{token}, new long[]{pos}, false);
+		this.token = token;
+		this.pos = pos;
+		this.possibleKeywords = possibleKeywords;
+	}
+	public char[] getToken() {
+		return token;
+	}
+	public char[][] getPossibleKeywords() {
+		return possibleKeywords;
+	}
+	public String toString(int tab, boolean withOnDemand) {
+		return "<CompleteOnKeyword:" + new String(token) + ">"; //$NON-NLS-1$ //$NON-NLS-2$
+	}
+}
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnKeyword3.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnKeyword3.java
new file mode 100644
index 0000000..8790635
--- /dev/null
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnKeyword3.java
@@ -0,0 +1,42 @@
+/*******************************************************************************
+ * Copyright (c) 2003 International Business Machines Corp. and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Common Public License v1.0 
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/cpl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ ******************************************************************************/
+package org.eclipse.jdt.internal.codeassist.complete;
+
+import org.eclipse.jdt.internal.compiler.ast.SingleNameReference;
+import org.eclipse.jdt.internal.compiler.lookup.BlockScope;
+import org.eclipse.jdt.internal.compiler.lookup.TypeBinding;
+
+public class CompletionOnKeyword3 extends SingleNameReference implements CompletionOnKeyword{
+	private char[] token;
+	private long pos;
+	private char[][] possibleKeywords;
+	public CompletionOnKeyword3(char[] token, long pos, char[] possibleKeyword) {
+		this(token, pos, new char[][]{possibleKeyword});
+	}
+	public CompletionOnKeyword3(char[] token, long pos, char[][] possibleKeywords) {
+		super(token, pos);
+		this.token = token;
+		this.pos = pos;
+		this.possibleKeywords = possibleKeywords;
+	}
+	public char[] getToken() {
+		return token;
+	}
+	public char[][] getPossibleKeywords() {
+		return possibleKeywords;
+	}
+	public TypeBinding resolveType(BlockScope scope) {
+		throw new CompletionNodeFound(this, scope);
+	}
+	public String toStringExpression() {
+		return "<CompleteOnKeyword:" + new String(token) + ">"; //$NON-NLS-1$ //$NON-NLS-2$
+	}
+}
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnSingleNameReference.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnSingleNameReference.java
index effaa36..c365386 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnSingleNameReference.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnSingleNameReference.java
@@ -35,8 +35,15 @@ import org.eclipse.jdt.internal.compiler.ast.*;
 import org.eclipse.jdt.internal.compiler.lookup.*;
  
 public class CompletionOnSingleNameReference extends SingleNameReference {
+public char[][] possibleKeywords;
+public boolean canBeExplicitConstructor;
 public CompletionOnSingleNameReference(char[] source, long pos) {
+	this(source, pos, null, false);
+}
+public CompletionOnSingleNameReference(char[] source, long pos, char[][] possibleKeywords, boolean canBeExplicitConstructor) {
 	super(source, pos);
+	this.possibleKeywords = possibleKeywords;
+	this.canBeExplicitConstructor = canBeExplicitConstructor;
 }
 public TypeBinding resolveType(BlockScope scope) {
 	throw new CompletionNodeFound(this, scope);
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java
index 3a38d95..8c5eeea 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java
@@ -25,6 +25,7 @@ import org.eclipse.jdt.internal.compiler.env.*;
 import org.eclipse.jdt.internal.compiler.ast.*;
 import org.eclipse.jdt.internal.compiler.parser.*;
 import org.eclipse.jdt.internal.compiler.problem.*;
+import org.eclipse.jdt.core.compiler.CharOperation;
 import org.eclipse.jdt.internal.codeassist.impl.*;
 
 public class CompletionParser extends AssistParser {
@@ -32,7 +33,7 @@ public class CompletionParser extends AssistParser {
 	protected static final int COMPLETION_PARSER = 1024;
 	protected static final int COMPLETION_OR_ASSIST_PARSER = ASSIST_PARSER + COMPLETION_PARSER;
 	
-	// KIND : all values known by CompletionParser are between 1025 and 1535
+	// KIND : all values known by CompletionParser are between 1025 and 1549
 	protected static final int K_BLOCK_DELIMITER = COMPLETION_PARSER + 1; // whether we are inside a block
 	protected static final int K_SELECTOR_INVOCATION_TYPE = COMPLETION_PARSER + 2; // whether we are inside a message send
 	protected static final int K_SELECTOR_QUALIFIER = COMPLETION_PARSER + 3; // whether we are inside a message send
@@ -51,13 +52,35 @@ public class CompletionParser extends AssistParser {
 	protected static final int K_BINARY_OPERATOR = COMPLETION_PARSER + 16;
 	protected static final int K_ASSISGNMENT_OPERATOR = COMPLETION_PARSER + 17;
 	protected static final int K_CONDITIONAL_OPERATOR = COMPLETION_PARSER + 18;
+	protected static final int K_BETWEEN_IF_AND_RIGHT_PAREN = COMPLETION_PARSER + 19;
+	protected static final int K_BETWEEN_WHILE_AND_RIGHT_PAREN = COMPLETION_PARSER + 20;
+	protected static final int K_BETWEEN_FOR_AND_RIGHT_PAREN = COMPLETION_PARSER + 21;
+	protected static final int K_BETWEEN_SWITCH_AND_RIGHT_PAREN = COMPLETION_PARSER + 22;
+	protected static final int K_BETWEEN_SYNCHRONIZED_AND_RIGHT_PAREN = COMPLETION_PARSER + 23;
+	protected static final int K_INSIDE_ASSERT_STATEMENT = COMPLETION_PARSER + 24;
+	protected static final int K_SWITCH_LABEL= COMPLETION_PARSER + 25;
+	
 
 	/* public fields */
 
 	public int cursorLocation;
 	public AstNode assistNodeParent; // the parent node of assist node
 	/* the following fields are internal flags */
-
+	
+	// block kind
+	static final int IF = 1;
+	static final int TRY = 2;
+	static final int CATCH = 3;
+	static final int WHILE = 4;
+	static final int SWITCH = 5;
+	static final int FOR = 6;
+	static final int DO = 7;
+	static final int SYNCHRONIZED = 8;
+	static final int METHOD = 9;
+	
+	// label kind
+	static final int DEFAULT = 1;
+	
 	// invocation type constants
 	static final int EXPLICIT_RECEIVER = 0;
 	static final int NO_RECEIVER = -1;
@@ -82,6 +105,13 @@ public class CompletionParser extends AssistParser {
 	// depth of '(', '{' and '[]'
 	int bracketDepth;
 	
+	// show if the current token can be an explicit constructor
+	int canBeExplicitConstructor = NO;
+	static final int NO = 0;
+	static final int NEXTTOKEN = 1;
+	static final int YES = 2;
+	
+	
 public CompletionParser(ProblemReporter problemReporter, boolean assertMode) {
 	super(problemReporter, assertMode);
 }
@@ -95,6 +125,12 @@ protected void attachOrphanCompletionNode(){
 		AstNode orphan = this.assistNode;
 		this.isOrphanCompletionNode = false;
 		
+		if (currentElement instanceof RecoveredUnit){
+			if (orphan instanceof ImportReference){
+				currentElement.add((ImportReference)orphan, 0);
+			}
+		}
+		
 		/* if in context of a type, then persists the identifier into a fake field return type */
 		if (currentElement instanceof RecoveredType){
 			RecoveredType recoveredType = (RecoveredType)currentElement;
@@ -575,6 +611,89 @@ private boolean checkClassLiteralAccess() {
 	}
 	return false;
 }
+private boolean checkKeyword() {
+	if (currentElement instanceof RecoveredUnit) {
+		RecoveredUnit unit = (RecoveredUnit) currentElement;
+		int index = -1;
+		if ((index = this.indexOfAssistIdentifier()) > -1) {
+			char[] ident = identifierStack[index];
+			long pos = identifierPositionStack[index];
+			
+			char[][] keywords = new char[Keywords.COUNT][];
+			int count = 0;
+			if(unit.typeCount == 0
+				&& lastModifiers == AccDefault
+				&& CharOperation.prefixEquals(identifierStack[index], Keywords.IMPORT)) {
+				keywords[count++] = Keywords.IMPORT;
+			}
+			if(unit.typeCount == 0
+				&& unit.importCount == 0
+				&& lastModifiers == AccDefault
+				&& compilationUnit.currentPackage == null
+				&& CharOperation.prefixEquals(identifierStack[index], Keywords.PACKAGE)) {
+				keywords[count++] = Keywords.PACKAGE;
+			}
+			if((lastModifiers & AccPublic) == 0
+				&& CharOperation.prefixEquals(identifierStack[index], Keywords.PUBLIC)) {
+				boolean hasNoPublicType = true;
+				for (int i = 0; i < unit.typeCount; i++) {
+					if((unit.types[i].typeDeclaration.modifiers & AccPublic) != 0) {
+						hasNoPublicType = false;
+					}
+				}
+				if(hasNoPublicType) {
+					keywords[count++] = Keywords.PUBLIC;
+				}
+			}
+			if((lastModifiers & AccAbstract) == 0
+				&& (lastModifiers & AccFinal) == 0
+				&& CharOperation.prefixEquals(identifierStack[index], Keywords.ABSTARCT)) {
+				keywords[count++] = Keywords.ABSTARCT;
+			}
+			if((lastModifiers & AccAbstract) == 0
+				&& (lastModifiers & AccFinal) == 0
+				&& CharOperation.prefixEquals(identifierStack[index], Keywords.FINAL)) {
+				keywords[count++] = Keywords.FINAL;
+			}
+			if(CharOperation.prefixEquals(identifierStack[index], Keywords.CLASS)) {
+				keywords[count++] = Keywords.CLASS;
+			}
+			if((lastModifiers & AccFinal) == 0
+				&& CharOperation.prefixEquals(identifierStack[index], Keywords.INTERFACE)) {
+				keywords[count++] = Keywords.INTERFACE;
+			}
+			if(count != 0) {
+				System.arraycopy(keywords, 0, keywords = new char[count][], 0, count);
+				
+				this.assistNode = new CompletionOnKeyword2(ident, pos, keywords);
+				this.lastCheckPoint = assistNode.sourceEnd + 1;
+				this.isOrphanCompletionNode = true;
+				return true;
+			}
+		}
+	}
+	return false;
+}
+private boolean checkInstanceofKeyword() {
+	if(isInsideMethod()) {
+		int kind = topKnownElementKind(COMPLETION_OR_ASSIST_PARSER);
+		int index;
+		if(kind != K_BLOCK_DELIMITER
+			&& (index = indexOfAssistIdentifier()) > -1
+			&& expressionPtr > -1
+			&& expressionLengthStack[expressionPtr] == 1
+			&& CharOperation.prefixEquals(identifierStack[index], Keywords.INSTANCEOF)) {
+			this.assistNode = new CompletionOnKeyword3(
+					identifierStack[index],
+					identifierPositionStack[index],
+					Keywords.INSTANCEOF);
+			this.lastCheckPoint = assistNode.sourceEnd + 1;
+			this.isOrphanCompletionNode = true;
+			return true;
+		}
+	}
+	return false;
+}
 /**
  * Checks if the completion is inside a method invocation or a constructor invocation.
  * Returns whether we found a completion node.
@@ -804,7 +923,9 @@ private boolean checkRecoveredType() {
  * resulting parsed structure.
  */
 public void completionIdentifierCheck(){
+	//if (assistNode != null) return; 
 
+	if (checkKeyword()) return;
 	if (checkRecoveredType()) return;
 	if (checkRecoveredMethod()) return;
 
@@ -844,7 +965,8 @@ public void completionIdentifierCheck(){
 		if (checkCatchClause()) return;
 		if (checkMemberAccess()) return;
 		if (checkClassLiteralAccess()) return;
-
+		if (checkInstanceofKeyword()) return;
+		
 		// if the completion was not on an empty name, it can still be inside an invocation (eg. this.fred("abc"[cursor])
 		// (NB: Put this check before checkNameCompletion() because the selector of the invocation can be on the identifier stack)
 		if (checkInvocation()) return;
@@ -880,6 +1002,12 @@ protected void consumeBinaryExpression(int op) {
 		}
 	}
 }
+protected void consumeCaseLabel() {
+	super.consumeCaseLabel();
+	if(topKnownElementKind(COMPLETION_OR_ASSIST_PARSER) != K_SWITCH_LABEL) {
+		pushOnElementStack(K_SWITCH_LABEL);
+	}
+}
 protected void consumeCastExpression() {
 	popElement(K_CAST_STATEMENT);
 	
@@ -902,10 +1030,77 @@ protected void consumeClassBodyopt() {
 	popElement(K_SELECTOR_INVOCATION_TYPE);
 	super.consumeClassBodyopt();
 }
+protected void consumeClassHeaderName() {
+	super.consumeClassHeaderName();
+
+	if (currentElement != null
+		&& currentToken == TokenNameIdentifier
+		&& this.cursorLocation+1 >= scanner.startPosition
+		&& this.cursorLocation < scanner.currentPosition){
+		this.pushIdentifier();
+
+		int index = -1;
+		/* check if current awaiting identifier is the completion identifier */
+		if ((index = this.indexOfAssistIdentifier()) > -1) {
+
+			RecoveredType recoveredType = (RecoveredType)currentElement;
+			/* filter out cases where scanner is still inside type header */
+			if (!recoveredType.foundOpeningBrace) {
+				char[][] keywords = new char[Keywords.COUNT][];
+				int count = 0;
+				
+				TypeDeclaration type = recoveredType.typeDeclaration;
+				if(type.superInterfaces == null) {
+					if(type.superclass == null) {;
+						keywords[count++] = Keywords.EXTENDS;
+					}
+					keywords[count++] = Keywords.IMPLEMENTS;
+				}
+				
+				System.arraycopy(keywords, 0, keywords = new char[count][], 0, count);
+				
+				if(count > 0) {
+					type.superclass = new CompletionOnKeyword1(
+						identifierStack[index],
+						identifierPositionStack[index],
+						keywords);
+					this.assistNode = type.superclass;
+					this.lastCheckPoint = type.superclass.sourceEnd + 1;
+				}
+			}
+		}
+	}
+}
 protected void consumeClassHeaderExtends() {
 	pushOnElementStack(K_NEXT_TYPEREF_IS_CLASS);
 	super.consumeClassHeaderExtends();
 	popElement(K_NEXT_TYPEREF_IS_CLASS);
+	
+	if (currentElement != null
+		&& currentToken == TokenNameIdentifier
+		&& this.cursorLocation+1 >= scanner.startPosition
+		&& this.cursorLocation < scanner.currentPosition){
+		this.pushIdentifier();
+		
+		int index = -1;
+		/* check if current awaiting identifier is the completion identifier */
+		if ((index = this.indexOfAssistIdentifier()) > -1) {
+
+			RecoveredType recoveredType = (RecoveredType)currentElement;
+			/* filter out cases where scanner is still inside type header */
+			if (!recoveredType.foundOpeningBrace) {
+				TypeDeclaration type = recoveredType.typeDeclaration;
+				if(type.superInterfaces == null) {
+					type.superclass = new CompletionOnKeyword1(
+						identifierStack[index],
+						identifierPositionStack[index],
+						Keywords.IMPLEMENTS);
+					this.assistNode = type.superclass;
+					this.lastCheckPoint = type.superclass.sourceEnd + 1;
+				}
+			}
+		}
+	}
 }
 protected void consumeClassTypeElt() {
 	pushOnElementStack(K_NEXT_TYPEREF_IS_EXCEPTION);
@@ -938,6 +1133,13 @@ protected void consumeConstructorHeaderName() {
 	}
 	this.restartRecovery = true;
 }
+protected void consumeDefaultLabel() {
+	super.consumeDefaultLabel();
+	if(topKnownElementKind(COMPLETION_OR_ASSIST_PARSER) == K_SWITCH_LABEL) {
+		popElement(K_SWITCH_LABEL);
+	}
+	pushOnElementStack(K_SWITCH_LABEL, DEFAULT);
+}
 protected void consumeEnterAnonymousClassBody() {
 	popElement(K_SELECTOR_QUALIFIER);
 	popElement(K_SELECTOR_INVOCATION_TYPE);
@@ -958,29 +1160,57 @@ protected void consumeEnterVariable() {
 	} else {
 		restartRecovery = true;
 		
+//		private boolean checkKeyword() {
+//			if (currentElement instanceof RecoveredUnit) {
+//				RecoveredUnit unit = (RecoveredUnit) currentElement;
+//				int index = -1;
+//				if ((index = this.indexOfAssistIdentifier()) > -1) {
+//					if(unit.typeCount == 0
+//						&& CharOperation.prefixEquals(identifierStack[index], Keywords.IMPORT)) {
+//						CompletionOnKeyword2 completionOnImportKeyword = new CompletionOnKeyword2(Keywords.IMPORT, identifierPositionStack[index]);
+//						this.assistNode = completionOnImportKeyword;
+//						this.lastCheckPoint = completionOnImportKeyword.sourceEnd + 1;
+//						this.isOrphanCompletionNode = true;
+//						return true;
+//					} else if(unit.typeCount == 0
+//						&& unit.importCount == 0
+//						&& CharOperation.prefixEquals(identifierStack[index], Keywords.PACKAGE)) {
+//						CompletionOnKeyword2 completionOnImportKeyword = new CompletionOnKeyword2(Keywords.PACKAGE, identifierPositionStack[index]);
+//						this.assistNode = completionOnImportKeyword;
+//						this.lastCheckPoint = completionOnImportKeyword.sourceEnd + 1;
+//						this.isOrphanCompletionNode = true;
+//						return true;
+//					}
+//				}
+//			}
+//			return false;
+//		}
+		
 		// recovery
 		if (currentElement != null) {
-			int nameSourceStart = (int)(identifierPositionStack[identifierPtr] >>> 32);
-			intPtr--;
-			
-			TypeReference type = getTypeReference(intStack[intPtr--]);
-			intPtr--;
-			
-			if (!(currentElement instanceof RecoveredType)
-				&& (currentToken == TokenNameDOT
-					|| (scanner.getLineNumber(type.sourceStart)
-							!= scanner.getLineNumber(nameSourceStart)))){
-				lastCheckPoint = nameSourceStart;
-				restartRecovery = true;
-				return;
+			if(!checkKeyword() && !(currentElement instanceof RecoveredUnit && ((RecoveredUnit)currentElement).typeCount == 0)) {
+				int nameSourceStart = (int)(identifierPositionStack[identifierPtr] >>> 32);
+				intPtr--;
+				
+				TypeReference type = getTypeReference(intStack[intPtr--]);
+				intPtr--;
+				
+				if (!(currentElement instanceof RecoveredType)
+					&& (currentToken == TokenNameDOT
+						|| (scanner.getLineNumber(type.sourceStart)
+								!= scanner.getLineNumber(nameSourceStart)))){
+					lastCheckPoint = nameSourceStart;
+					restartRecovery = true;
+					return;
+				}
+				
+				FieldDeclaration completionFieldDecl = new CompletionOnFieldType(type, false);
+				completionFieldDecl.modifiers = intStack[intPtr--];
+				assistNode = completionFieldDecl;
+				lastCheckPoint = type.sourceEnd + 1;
+				currentElement = currentElement.add(completionFieldDecl, 0);
+				lastIgnoredToken = -1;
 			}
-			
-			FieldDeclaration completionFieldDecl = new CompletionOnFieldType(type, false);
-			completionFieldDecl.modifiers = intStack[intPtr--];
-			assistNode = completionFieldDecl;
-			lastCheckPoint = type.sourceEnd + 1;
-			currentElement = currentElement.add(completionFieldDecl, 0);
-			lastIgnoredToken = -1;
 		}
 	}
 }
@@ -1083,7 +1313,36 @@ protected void consumeInstanceOfExpression(int op) {
 		assistNodeParent = exp;
 	}
 }
+protected void consumeInterfaceHeaderName() {
+	super.consumeInterfaceHeaderName();
+	
+	if (currentElement != null
+		&& currentToken == TokenNameIdentifier
+		&& this.cursorLocation+1 >= scanner.startPosition
+		&& this.cursorLocation < scanner.currentPosition){
+		this.pushIdentifier();
+		
+		int index = -1;
+		/* check if current awaiting identifier is the completion identifier */
+		if ((index = this.indexOfAssistIdentifier()) > -1) {
 
+			RecoveredType recoveredType = (RecoveredType)currentElement;
+			/* filter out cases where scanner is still inside type header */
+			if (!recoveredType.foundOpeningBrace) {
+				TypeDeclaration type = recoveredType.typeDeclaration;
+				if(type.superInterfaces == null) {
+					CompletionOnKeyword1 completionOnKeyword = new CompletionOnKeyword1(
+						identifierStack[index],
+						identifierPositionStack[index],
+						Keywords.EXTENDS);
+					type.superInterfaces = new TypeReference[]{completionOnKeyword};
+					this.assistNode = completionOnKeyword;
+					this.lastCheckPoint = completionOnKeyword.sourceEnd + 1;
+				}
+			}
+		}
+	}
+}
 protected void consumeInterfaceType() {
 	pushOnElementStack(K_NEXT_TYPEREF_IS_INTERFACE);
 	super.consumeInterfaceType();
@@ -1188,6 +1447,70 @@ protected void consumeMethodHeaderName() {
 		}
 	}
 }
+protected void consumeMethodHeaderParameters() {
+	super.consumeMethodHeaderParameters();
+	
+	if (currentElement != null
+		&& currentToken == TokenNameIdentifier
+		&& this.cursorLocation+1 >= scanner.startPosition
+		&& this.cursorLocation < scanner.currentPosition){
+		this.pushIdentifier();
+		
+		int index = -1;
+		/* check if current awaiting identifier is the completion identifier */
+		if ((index = this.indexOfAssistIdentifier()) > -1) {
+
+			RecoveredMethod recoveredMethod = (RecoveredMethod)currentElement;
+			/* filter out cases where scanner is still inside type header */
+			if (!recoveredMethod.foundOpeningBrace) {
+				AbstractMethodDeclaration method = recoveredMethod.methodDeclaration;
+				if(method.thrownExceptions == null
+					&& CharOperation.prefixEquals(identifierStack[index], Keywords.THROWS)) {
+					CompletionOnKeyword1 completionOnKeyword = new CompletionOnKeyword1(
+						identifierStack[index],
+						identifierPositionStack[index],
+						Keywords.THROWS);
+					method.thrownExceptions = new TypeReference[]{completionOnKeyword};
+					recoveredMethod.foundOpeningBrace = true;
+					this.assistNode = completionOnKeyword;
+					this.lastCheckPoint = completionOnKeyword.sourceEnd + 1;
+				}
+			}
+		}
+	}
+}
+protected void consumeMethodHeaderExtendedDims() {
+	super.consumeMethodHeaderExtendedDims();
+	
+	if (currentElement != null
+		&& currentToken == TokenNameIdentifier
+		&& this.cursorLocation+1 >= scanner.startPosition
+		&& this.cursorLocation < scanner.currentPosition){
+		this.pushIdentifier();
+		
+		int index = -1;
+		/* check if current awaiting identifier is the completion identifier */
+		if ((index = this.indexOfAssistIdentifier()) > -1) {
+
+			RecoveredMethod recoveredMethod = (RecoveredMethod)currentElement;
+			/* filter out cases where scanner is still inside type header */
+			if (!recoveredMethod.foundOpeningBrace) {
+				AbstractMethodDeclaration method = recoveredMethod.methodDeclaration;
+				if(method.thrownExceptions == null) {
+					CompletionOnKeyword1 completionOnKeyword = new CompletionOnKeyword1(
+						identifierStack[index],
+						identifierPositionStack[index],
+						Keywords.THROWS);
+					method.thrownExceptions = new TypeReference[]{completionOnKeyword};
+					recoveredMethod.foundOpeningBrace = true;
+					this.assistNode = completionOnKeyword;
+					this.lastCheckPoint = completionOnKeyword.sourceEnd + 1;
+				}
+			}
+		}
+	}
+}
+
 protected void consumeMethodBody() {
 	popElement(K_BLOCK_DELIMITER);
 	super.consumeMethodBody();
@@ -1208,6 +1531,12 @@ protected void consumeRestoreDiet() {
 		popElement(K_LOCAL_INITIALIZER_DELIMITER);
 	}
 }
+protected void consumeStatementSwitch() {
+	super.consumeStatementSwitch();
+	if(topKnownElementKind(COMPLETION_OR_ASSIST_PARSER) == K_SWITCH_LABEL) {
+		popElement(K_SWITCH_LABEL);
+	}
+}
 protected void consumeNestedMethod() {
 	super.consumeNestedMethod();
 	pushOnElementStack(K_BLOCK_DELIMITER);
@@ -1225,6 +1554,11 @@ protected void consumeToken(int token) {
 		super.consumeToken(token);
 		return;
 	}
+	if(canBeExplicitConstructor == NEXTTOKEN) {
+		canBeExplicitConstructor = YES;
+	} else {
+		canBeExplicitConstructor = NO;
+	}
 	
 	int previous = this.previousToken;
 	int previousIdentifierPtr = this.previousIdentifierPtr;
@@ -1358,7 +1692,42 @@ protected void consumeToken(int token) {
 					|| kind == K_ARRAY_CREATION) {
 					pushOnElementStack(K_ARRAY_INITIALIZER, endPosition);
 				} else {
-					pushOnElementStack(K_BLOCK_DELIMITER);
+					switch(previous) {
+						case TokenNameRPAREN :
+							switch(previousKind) {
+								case K_BETWEEN_IF_AND_RIGHT_PAREN :
+									pushOnElementStack(K_BLOCK_DELIMITER, IF);
+									break;
+								case K_BETWEEN_CATCH_AND_RIGHT_PAREN :
+									pushOnElementStack(K_BLOCK_DELIMITER, CATCH);
+									break;
+								case K_BETWEEN_WHILE_AND_RIGHT_PAREN :
+									pushOnElementStack(K_BLOCK_DELIMITER, WHILE);
+									break;
+								case K_BETWEEN_SWITCH_AND_RIGHT_PAREN :
+									pushOnElementStack(K_BLOCK_DELIMITER, SWITCH);
+									break;
+								case K_BETWEEN_FOR_AND_RIGHT_PAREN :
+									pushOnElementStack(K_BLOCK_DELIMITER, FOR);
+									break;
+								case K_BETWEEN_SYNCHRONIZED_AND_RIGHT_PAREN :
+									pushOnElementStack(K_BLOCK_DELIMITER, SYNCHRONIZED);
+									break;
+								default :
+									pushOnElementStack(K_BLOCK_DELIMITER);
+									break;
+							}
+							break;
+						case TokenNametry :
+							pushOnElementStack(K_BLOCK_DELIMITER, TRY);
+							break;
+						case TokenNamedo:
+							pushOnElementStack(K_BLOCK_DELIMITER, DO);
+							break;
+						default :
+							pushOnElementStack(K_BLOCK_DELIMITER);
+							break;
+					}
 				}
 				break;
 			case TokenNameLBRACKET:
@@ -1371,18 +1740,57 @@ protected void consumeToken(int token) {
 				this.bracketDepth--;
 				break; 
 			case TokenNameRPAREN:
-				popElement(K_BETWEEN_CATCH_AND_RIGHT_PAREN);
+				switch(topKnownElementKind(COMPLETION_OR_ASSIST_PARSER)) {
+					case K_BETWEEN_CATCH_AND_RIGHT_PAREN :
+						popElement(K_BETWEEN_CATCH_AND_RIGHT_PAREN);
+						break;
+					case K_BETWEEN_IF_AND_RIGHT_PAREN :
+						if(topKnownElementInfo(COMPLETION_OR_ASSIST_PARSER) == bracketDepth) {
+							popElement(K_BETWEEN_IF_AND_RIGHT_PAREN);
+						}
+						break;
+					case K_BETWEEN_WHILE_AND_RIGHT_PAREN :
+						if(topKnownElementInfo(COMPLETION_OR_ASSIST_PARSER) == bracketDepth) {
+							popElement(K_BETWEEN_WHILE_AND_RIGHT_PAREN);
+						}
+						break;
+					case K_BETWEEN_FOR_AND_RIGHT_PAREN :
+						if(topKnownElementInfo(COMPLETION_OR_ASSIST_PARSER) == bracketDepth) {
+							popElement(K_BETWEEN_FOR_AND_RIGHT_PAREN);
+						}
+						break;
+					case K_BETWEEN_SWITCH_AND_RIGHT_PAREN :
+						if(topKnownElementInfo(COMPLETION_OR_ASSIST_PARSER) == bracketDepth) {
+							popElement(K_BETWEEN_SWITCH_AND_RIGHT_PAREN);
+						}
+						break;
+					case K_BETWEEN_SYNCHRONIZED_AND_RIGHT_PAREN :
+						if(topKnownElementInfo(COMPLETION_OR_ASSIST_PARSER) == bracketDepth) {
+							popElement(K_BETWEEN_SYNCHRONIZED_AND_RIGHT_PAREN);
+						}
+						break;
+				}
 				break;
 			case TokenNamethrow:
 				pushOnElementStack(K_INSIDE_THROW_STATEMENT, bracketDepth);
 				break;
 			case TokenNameSEMICOLON:
-				if(topKnownElementKind(COMPLETION_OR_ASSIST_PARSER) == K_INSIDE_THROW_STATEMENT
-					&& topKnownElementInfo(COMPLETION_OR_ASSIST_PARSER) == this.bracketDepth) {
-					popElement(K_INSIDE_THROW_STATEMENT);
-				} else if (topKnownElementKind(COMPLETION_OR_ASSIST_PARSER) == K_INSIDE_RETURN_STATEMENT
-					&& topKnownElementInfo(COMPLETION_OR_ASSIST_PARSER) == this.bracketDepth){
-					popElement(K_INSIDE_RETURN_STATEMENT);
+				switch(topKnownElementKind(COMPLETION_OR_ASSIST_PARSER)) {
+					case K_INSIDE_THROW_STATEMENT :
+						if(topKnownElementInfo(COMPLETION_OR_ASSIST_PARSER) == this.bracketDepth) {
+							popElement(K_INSIDE_THROW_STATEMENT);
+						}
+						break;
+					case K_INSIDE_RETURN_STATEMENT :
+						if(topKnownElementInfo(COMPLETION_OR_ASSIST_PARSER) == this.bracketDepth) {
+							popElement(K_INSIDE_RETURN_STATEMENT);
+						}
+						break;
+					case K_INSIDE_ASSERT_STATEMENT :
+						if(topKnownElementInfo(COMPLETION_OR_ASSIST_PARSER) == this.bracketDepth) {
+							popElement(K_INSIDE_ASSERT_STATEMENT);
+						}
+						break;
 				}
 				break;
 			case TokenNamereturn:
@@ -1470,7 +1878,24 @@ protected void consumeToken(int token) {
 					pushOnElementStack(K_CONDITIONAL_OPERATOR, COLON);
 				}
 				break;
-			
+			case TokenNameif:
+				pushOnElementStack(K_BETWEEN_IF_AND_RIGHT_PAREN, bracketDepth);
+				break;
+			case TokenNamewhile:
+				pushOnElementStack(K_BETWEEN_WHILE_AND_RIGHT_PAREN, bracketDepth);
+				break;
+			case TokenNamefor:
+				pushOnElementStack(K_BETWEEN_FOR_AND_RIGHT_PAREN, bracketDepth);
+				break;
+			case TokenNameswitch:
+				pushOnElementStack(K_BETWEEN_SWITCH_AND_RIGHT_PAREN, bracketDepth);
+				break;
+			case TokenNamesynchronized:
+				pushOnElementStack(K_BETWEEN_SYNCHRONIZED_AND_RIGHT_PAREN, bracketDepth);
+				break;
+			case TokenNameassert:
+				pushOnElementStack(K_INSIDE_ASSERT_STATEMENT, this.bracketDepth);
+				break;
 		}
 	}
 }
@@ -1522,7 +1947,87 @@ public TypeReference createQualifiedAssistTypeReference(char[][] previousIdentif
 	}
 }
 public NameReference createSingleAssistNameReference(char[] name, long position) {
-	return new CompletionOnSingleNameReference(name, position);
+	int kind = topKnownElementKind(COMPLETION_OR_ASSIST_PARSER);
+	if(!isInsideMethod()) {
+		return new CompletionOnSingleNameReference(name, position);
+	} else {
+		boolean canBeExplicitConstructorCall = false;
+		if(kind == K_BLOCK_DELIMITER
+			&& previousKind == K_BLOCK_DELIMITER
+			&& previousInfo == DO) {
+			return new CompletionOnKeyword3(name, position, Keywords.WHILE);
+		} else if(kind == K_BLOCK_DELIMITER
+			&& previousKind == K_BLOCK_DELIMITER
+			&& previousInfo == TRY) {
+			return new CompletionOnKeyword3(name, position, new char[][]{Keywords.CATCH, Keywords.FINALLY});
+		} else {
+			char[][] keywords = new char[Keywords.COUNT][];
+			int count = 0;
+			
+			if((lastModifiers & AccStatic) == 0) {
+				keywords[count++]= Keywords.SUPER;
+				keywords[count++]= Keywords.THIS;
+			}
+			keywords[count++]= Keywords.NEW;
+			
+			if(kind == K_BLOCK_DELIMITER) {
+				if(canBeExplicitConstructor == YES) {
+					canBeExplicitConstructorCall = true;
+				}
+				
+				keywords[count++]= Keywords.ASSERT;
+				keywords[count++]= Keywords.DO;
+				keywords[count++]= Keywords.FOR;
+				keywords[count++]= Keywords.IF;
+				keywords[count++]= Keywords.RETURN;
+				keywords[count++]= Keywords.SWITCH;
+				keywords[count++]= Keywords.SYNCHRONIZED;
+				keywords[count++]= Keywords.THROW;
+				keywords[count++]= Keywords.TRY;
+				keywords[count++]= Keywords.WHILE;
+				
+				keywords[count++]= Keywords.FINAL;
+				keywords[count++]= Keywords.CLASS;
+				
+				if(previousKind == K_BLOCK_DELIMITER) {
+					switch (previousInfo) {
+						case IF :
+							keywords[count++]= Keywords.ELSE;
+							break;
+						case CATCH :
+							keywords[count++]= Keywords.CATCH;
+							keywords[count++]= Keywords.FINALLY;
+							break;
+					}
+				}
+				if(isInsideLoop()) {
+					keywords[count++]= Keywords.CONTINUE;
+				}
+				if(isInsideBreakable()) {
+					keywords[count++]= Keywords.BREAK;
+				}
+				if(topKnownElementInfo(COMPLETION_OR_ASSIST_PARSER) == SWITCH) {
+					keywords[count++]= Keywords.CASE;
+					keywords[count++]= Keywords.DEFAULT;
+				}
+			} else {
+				keywords[count++]= Keywords.TRUE;
+				keywords[count++]= Keywords.FALSE;
+				keywords[count++]= Keywords.NULL;
+			
+				if(kind == K_SWITCH_LABEL) {
+					if(topKnownElementInfo(COMPLETION_OR_ASSIST_PARSER) != DEFAULT) {
+						keywords[count++]= Keywords.DEFAULT;
+					}
+					keywords[count++]= Keywords.BREAK;
+					keywords[count++]= Keywords.CASE;
+				}
+			}
+			System.arraycopy(keywords, 0 , keywords = new char[count][], 0, count);
+			
+			return new CompletionOnSingleNameReference(name, position, keywords, canBeExplicitConstructorCall);
+		}
+	}
 }
 public TypeReference createSingleAssistTypeReference(char[] name, long position) {
 	switch (topKnownElementKind(COMPLETION_OR_ASSIST_PARSER)) {
@@ -1633,6 +2138,45 @@ protected boolean isInsideBlock(){
 	}
 	return false;
 }
+protected boolean isInsideBreakable(){
+	int i = elementPtr;
+	while(i > -1) {
+		switch (elementKindStack[i]) {
+			case K_TYPE_DELIMITER : return false;
+			case K_METHOD_DELIMITER : return false;
+			case K_FIELD_INITIALIZER_DELIMITER : return false;
+			case K_SWITCH_LABEL : return true;
+			case K_BLOCK_DELIMITER :
+				switch(elementInfoStack[i]) {
+					case FOR :
+					case DO :
+					case WHILE :
+						return true;
+				}
+		}
+		i--;
+	}
+	return false;
+}
+protected boolean isInsideLoop(){
+	int i = elementPtr;
+	while(i > -1) {
+		switch (elementKindStack[i]) {
+			case K_TYPE_DELIMITER : return false;
+			case K_METHOD_DELIMITER : return false;
+			case K_FIELD_INITIALIZER_DELIMITER : return false;
+			case K_BLOCK_DELIMITER :
+				switch(elementInfoStack[i]) {
+					case FOR :
+					case DO :
+					case WHILE :
+						return true;
+				}
+		}
+		i--;
+	}
+	return false;
+}
 protected boolean isInsideReturn(){
 	int i = elementPtr;
 	while(i > -1) {
@@ -1655,6 +2199,12 @@ public CompilationUnitDeclaration parse(ICompilationUnit sourceUnit, Compilation
 	completionScanner.cursorLocation = cursorLocation;
 	return this.parse(sourceUnit, compilationResult);
 }
+public void parseBlockStatements(
+	ConstructorDeclaration cd,
+	CompilationUnitDeclaration unit) {
+	canBeExplicitConstructor = 1;
+	super.parseBlockStatements(cd, unit);
+}
 /*
  * Prepares the state of the parser to go for BlockStatements.
  */
@@ -1714,6 +2264,20 @@ public void recoveryExitFromVariable() {
 		super.recoveryExitFromVariable();
 	}
 }
+public void recoveryTokenCheck() {
+	RecoveredElement oldElement = currentElement;
+	switch (currentToken) {
+		case TokenNameRBRACE :
+			super.recoveryTokenCheck();
+			if(currentElement != oldElement && oldElement instanceof RecoveredBlock) {
+				popElement(K_BLOCK_DELIMITER);
+			}
+			break;
+		default :
+			super.recoveryTokenCheck();
+			break;
+	}
+}
 protected void reportSyntaxError(int act, int currentKind, int stateStackTop) {
 
 	/* Intercept error state on EOF inside method bodies, due to 
@@ -1836,7 +2400,7 @@ protected LocalDeclaration createLocalDeclaration(Expression initialization, cha
 }
 
 protected FieldDeclaration createFieldDeclaration(Expression initialization, char[] name, int sourceStart, int sourceEnd) {
-	if (this.indexOfAssistIdentifier() < 0) {
+	if (this.indexOfAssistIdentifier() < 0 || (currentElement instanceof RecoveredUnit && ((RecoveredUnit)currentElement).typeCount == 0)) {
 		return super.createFieldDeclaration(initialization, name, sourceStart, sourceEnd);
 	} else {
 		CompletionOnFieldName field = new CompletionOnFieldName(initialization, name, sourceStart, sourceEnd);
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java
index 0e14df9..1102e5b 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java
@@ -58,6 +58,8 @@ public abstract class AssistParser extends Parser {
 	protected int elementPtr;
 	protected int[] elementKindStack = new int[ElementStackIncrement];
 	protected int[] elementInfoStack = new int[ElementStackIncrement];
+	protected int previousKind;
+	protected int previousInfo;
 	
 	// OWNER
 	protected static final int ASSIST_PARSER = 512;
@@ -93,7 +95,7 @@ public RecoveredElement buildInitialRecoveryState(){
 	if (referenceContext instanceof CompilationUnitDeclaration){
 		RecoveredElement element = super.buildInitialRecoveryState();
 		flushAssistState();
-		elementPtr = -1;
+		flushElementStack();
 		return element;
 	}
 
@@ -546,6 +548,11 @@ public void flushAssistState(){
 	this.isOrphanCompletionNode = false;
 	this.setAssistIdentifier(null);
 }
+protected void flushElementStack() {
+	this.elementPtr = -1;
+	this.previousKind = 0;
+	this.previousInfo = 0;
+}
 /*
  * Build specific type reference nodes in case the cursor is located inside the type reference
  */
@@ -712,7 +719,7 @@ protected int indexOfAssistIdentifier(){
 public void initialize() {
 	super.initialize();
 	this.flushAssistState();
-	this.elementPtr = -1;
+	this.flushElementStack();
 	this.previousIdentifierPtr = -1;
 }
 
@@ -889,6 +896,10 @@ public void parseBlockStatements(MethodDeclaration md, CompilationUnitDeclaratio
 }
 protected void popElement(int kind){
 	if(elementPtr < 0 || elementKindStack[elementPtr] != kind) return;
+	
+	previousKind = elementKindStack[elementPtr];
+	previousInfo = elementInfoStack[elementPtr];
+	
 	switch (kind) {
 		default :
 			elementPtr--;
@@ -902,6 +913,10 @@ protected void popUntilElement(int kind){
 		i--;
 	}
 	if(i > 0) {
+		if(i < elementPtr) {
+			previousKind = elementKindStack[i+1];
+			previousInfo = elementInfoStack[i+1];
+		}
 		elementPtr = i;	
 	}
 }
@@ -918,7 +933,7 @@ protected void prepareForBlockStatements() {
 	int methodIndex = lastIndexOfElement(K_METHOD_DELIMITER);
 	if(methodIndex == fieldInitializerIndex) {
 		// there is no method and no field initializer
-		elementPtr = -1;
+		flushElementStack();
 	} else if(methodIndex > fieldInitializerIndex) {
 		popUntilElement(K_METHOD_DELIMITER);
 	} else {
@@ -940,6 +955,10 @@ protected void pushOnElementStack(int kind){
 }
 protected void pushOnElementStack(int kind, int info){
 	if (this.elementPtr < -1) return;
+	
+	this.previousKind = 0;
+	this.previousInfo = 0;
+	
 	try {
 		this.elementPtr++;
 		this.elementKindStack[this.elementPtr] = kind;
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Keywords.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Keywords.java
new file mode 100644
index 0000000..2cc0c4e
--- /dev/null
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Keywords.java
@@ -0,0 +1,57 @@
+/*******************************************************************************
+ * Copyright (c) 2003 International Business Machines Corp. and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Common Public License v1.0 
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/cpl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ ******************************************************************************/
+package org.eclipse.jdt.internal.codeassist.impl;
+
+public interface Keywords {
+	int COUNT = 41;
+	
+	char[] ABSTARCT = "abstract".toCharArray(); //$NON-NLS-1$
+	char[] ASSERT = "assert".toCharArray(); //$NON-NLS-1$
+	char[] BREAK = "break".toCharArray(); //$NON-NLS-1$
+	char[] CASE = "case".toCharArray(); //$NON-NLS-1$
+	char[] CATCH = "catch".toCharArray(); //$NON-NLS-1$
+	char[] CLASS = "class".toCharArray(); //$NON-NLS-1$
+	char[] CONTINUE = "continue".toCharArray(); //$NON-NLS-1$
+	char[] DEFAULT = "default".toCharArray(); //$NON-NLS-1$
+	char[] DO = "do".toCharArray(); //$NON-NLS-1$
+	char[] ELSE = "else".toCharArray(); //$NON-NLS-1$
+	char[] EXTENDS = "extends".toCharArray(); //$NON-NLS-1$
+	char[] FINAL = "final".toCharArray(); //$NON-NLS-1$
+	char[] FINALLY = "finally".toCharArray(); //$NON-NLS-1$
+	char[] FOR = "for".toCharArray(); //$NON-NLS-1$
+	char[] IF = "if".toCharArray(); //$NON-NLS-1$
+	char[] IMPLEMENTS = "implements".toCharArray(); //$NON-NLS-1$
+	char[] IMPORT = "import".toCharArray(); //$NON-NLS-1$
+	char[] INSTANCEOF = "instanceof".toCharArray(); //$NON-NLS-1$
+	char[] INTERFACE = "interface".toCharArray(); //$NON-NLS-1$
+	char[] NATIVE = "native".toCharArray(); //$NON-NLS-1$
+	char[] NEW = "new".toCharArray(); //$NON-NLS-1$
+	char[] PACKAGE = "package".toCharArray(); //$NON-NLS-1$
+	char[] PRIVATE = "private".toCharArray(); //$NON-NLS-1$
+	char[] PROTECTED = "protected".toCharArray(); //$NON-NLS-1$
+	char[] PUBLIC = "public".toCharArray(); //$NON-NLS-1$
+	char[] RETURN = "return".toCharArray(); //$NON-NLS-1$
+	char[] STATIC = "static".toCharArray(); //$NON-NLS-1$
+	char[] STRICTFP = "strictfp".toCharArray(); //$NON-NLS-1$
+	char[] SUPER = "super".toCharArray(); //$NON-NLS-1$
+	char[] SWITCH = "switch".toCharArray(); //$NON-NLS-1$
+	char[] SYNCHRONIZED = "synchronized".toCharArray(); //$NON-NLS-1$
+	char[] THIS = "this".toCharArray(); //$NON-NLS-1$
+	char[] THROW = "throw".toCharArray(); //$NON-NLS-1$
+	char[] THROWS = "throws".toCharArray(); //$NON-NLS-1$
+	char[] TRANSIENT = "transient".toCharArray(); //$NON-NLS-1$
+	char[] TRY = "try".toCharArray(); //$NON-NLS-1$
+	char[] VOLATILE = "volatile".toCharArray(); //$NON-NLS-1$
+	char[] WHILE = "while".toCharArray(); //$NON-NLS-1$
+	char[] TRUE = "true".toCharArray(); //$NON-NLS-1$
+	char[] FALSE = "false".toCharArray(); //$NON-NLS-1$
+	char[] NULL = "null".toCharArray(); //$NON-NLS-1$
+}

commit b19e9753b2440fbc565e94b25c4419c1ce3ce1f2
Author: Anirban Chakraborty <anchakrk@in.ibm.com>
Date:   Mon Nov 11 19:30:34 2013 +0530

    Bug 414113 [1.8] Method Binding for default method has abstract modifier
    instead of default

22	0	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
21	19	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java
6	2	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java
17	19	org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetClassFile.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
index d2d7d5e..5dfb444 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
@@ -3375,4 +3375,26 @@ public class ASTConverter18Test extends ConverterTestSetup {
 		checkSourceRange(castType, "@Marker W<String>", contents);
 		checkSourceRange(type, "@Marker W", contents);
 	}
+
+	// Bug 414113 - [1.8] Method Binding for default method has abstract modifier instead of default
+	// https://bugs.eclipse.org/bugs/show_bug.cgi?id=414113
+	public void testBug414113() throws JavaModelException {
+		String contents =
+			"public interface X {\n" +
+			"	int i = foo();\n" +
+			"	default int foo_default() { return 1;}\n" +
+			"	static int foo_static() { return 1;}\n" +
+			"}\n";
+		this.workingCopy = getWorkingCopy("/Converter18/src/X.java", true);
+		ASTNode node = buildAST(contents, this.workingCopy, false);
+		assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, node.getNodeType());
+		CompilationUnit unit = (CompilationUnit) node;
+		TypeDeclaration type =  (TypeDeclaration) unit.types().get(0);
+		MethodDeclaration method = (MethodDeclaration) type.bodyDeclarations().get(1);
+		IMethodBinding binding =  method.resolveBinding();
+		assertTrue("binding is default", (binding.getModifiers() & Modifier.DEFAULT) != 0);
+		method = (MethodDeclaration) type.bodyDeclarations().get(2);
+		binding =  method.resolveBinding();
+		assertTrue("binding is static", (binding.getModifiers() & Modifier.STATIC) != 0);
+	}
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java
index 8fc58a1..f8a8d8a 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java
@@ -210,30 +210,28 @@ public class ClassFile implements TypeConstants, TypeIds {
 		System.arraycopy(problems, 0, problemsCopy, 0, problemsLength);
 
 		AbstractMethodDeclaration[] methodDecls = typeDeclaration.methods;
+		boolean abstractMethodsOnly = false;
 		if (methodDecls != null) {
 			if (typeBinding.isInterface()) {
-				// we cannot create problem methods for an interface. So we have to generate a clinit
-				// which should contain all the problem
+				if (typeBinding.scope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_8)
+					abstractMethodsOnly = true;
+				// We generate a clinit which contains all the problems, since we may not be able to generate problem methods (< 1.8) and problem constructors (all levels).
 				classFile.addProblemClinit(problemsCopy);
-				for (int i = 0, length = methodDecls.length; i < length; i++) {
-					AbstractMethodDeclaration methodDecl = methodDecls[i];
-					MethodBinding method = methodDecl.binding;
-					if (method == null || method.isConstructor()) continue;
+			}
+			for (int i = 0, length = methodDecls.length; i < length; i++) {
+				AbstractMethodDeclaration methodDecl = methodDecls[i];
+				MethodBinding method = methodDecl.binding;
+				if (method == null) continue;
+				if (abstractMethodsOnly) {
 					method.modifiers = ClassFileConstants.AccPublic | ClassFileConstants.AccAbstract;
-					classFile.addAbstractMethod(methodDecl, method);
 				}
-			} else {
-				for (int i = 0, length = methodDecls.length; i < length; i++) {
-					AbstractMethodDeclaration methodDecl = methodDecls[i];
-					MethodBinding method = methodDecl.binding;
-					if (method == null) continue;
-					if (method.isConstructor()) {
-						classFile.addProblemConstructor(methodDecl, method, problemsCopy);
-					} else if (method.isAbstract()) {
-						classFile.addAbstractMethod(methodDecl, method);
-					} else {
-						classFile.addProblemMethod(methodDecl, method, problemsCopy);
-					}
+				if (method.isConstructor()) {
+					if (typeBinding.isInterface()) continue;
+					classFile.addProblemConstructor(methodDecl, method, problemsCopy);
+				} else if (method.isAbstract()) {
+					classFile.addAbstractMethod(methodDecl, method);
+				} else {
+					classFile.addProblemMethod(methodDecl, method, problemsCopy);
 				}
 			}
 			// add abstract methods
@@ -686,6 +684,10 @@ public class ClassFile implements TypeConstants, TypeIds {
 		AbstractMethodDeclaration method,
 		MethodBinding methodBinding,
 		CategorizedProblem[] problems) {
+		
+		if (methodBinding.declaringClass.isInterface()) {
+			method.abort(ProblemSeverities.AbortType, null);
+		}
 
 		// always clear the strictfp/native/abstract bit for a problem method
 		generateMethodInfoHeader(methodBinding, methodBinding.modifiers & ~(ClassFileConstants.AccStrictfp | ClassFileConstants.AccNative | ClassFileConstants.AccAbstract));
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java
index c83c1b3..70003d4 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java
@@ -600,7 +600,7 @@ public char[] genericSignature() {
 }
 
 public final int getAccessFlags() {
-	return this.modifiers & ExtraCompilerModifiers.AccJustFlag;
+	return this.modifiers & (ExtraCompilerModifiers.AccJustFlag | ExtraCompilerModifiers.AccDefaultMethod);
 }
 
 public AnnotationBinding[] getAnnotations() {
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java
index ed1f555..3753e63 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java
@@ -1,10 +1,14 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2011 IBM Corporation and others.
+ * Copyright (c) 2000, 2013 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *     IBM Corporation - initial API and implementation
  *******************************************************************************/
@@ -31,7 +35,7 @@ class MethodBinding implements IMethodBinding {
 
 	private static final int VALID_MODIFIERS = Modifier.PUBLIC | Modifier.PROTECTED | Modifier.PRIVATE |
 		Modifier.ABSTRACT | Modifier.STATIC | Modifier.FINAL | Modifier.SYNCHRONIZED | Modifier.NATIVE |
-		Modifier.STRICTFP;
+		Modifier.STRICTFP | Modifier.DEFAULT;
 	private static final ITypeBinding[] NO_TYPE_BINDINGS = new ITypeBinding[0];
 	private org.eclipse.jdt.internal.compiler.lookup.MethodBinding binding;
 	private BindingResolver resolver;
diff --git a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetClassFile.java b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetClassFile.java
index 56a0ade..4c6ab56 100644
--- a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetClassFile.java
+++ b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetClassFile.java
@@ -193,30 +193,28 @@ public static void createProblemType(TypeDeclaration typeDeclaration, Compilatio
 	CategorizedProblem[] problemsCopy = new CategorizedProblem[problemsLength = problems.length];
 	System.arraycopy(problems, 0, problemsCopy, 0, problemsLength);
 	AbstractMethodDeclaration[] methodDecls = typeDeclaration.methods;
+	boolean abstractMethodsOnly = false;
 	if (methodDecls != null) {
 		if (typeBinding.isInterface()) {
-			// we cannot create problem methods for an interface. So we have to generate a clinit
-			// which should contain all the problem
+			if (typeBinding.scope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_8)
+				abstractMethodsOnly = true;
+			// We generate a clinit which contains all the problems, since we may not be able to generate problem methods (< 1.8) and problem constructors (all levels).
 			classFile.addProblemClinit(problemsCopy);
-			for (int i = 0, length = methodDecls.length; i < length; i++) {
-				AbstractMethodDeclaration methodDecl = methodDecls[i];
-				MethodBinding method = methodDecl.binding;
-				if (method == null || method.isConstructor()) continue;
+		}
+		for (int i = 0, length = methodDecls.length; i < length; i++) {
+			AbstractMethodDeclaration methodDecl = methodDecls[i];
+			MethodBinding method = methodDecl.binding;
+			if (method == null) continue;
+			if (abstractMethodsOnly) {
 				method.modifiers = ClassFileConstants.AccPublic | ClassFileConstants.AccAbstract;
-				classFile.addAbstractMethod(methodDecl, method);
 			}
-		} else {
-			for (int i = 0, length = methodDecls.length; i < length; i++) {
-				AbstractMethodDeclaration methodDecl = methodDecls[i];
-				MethodBinding method = methodDecl.binding;
-				if (method == null) continue;
-				if (method.isConstructor()) {
-					classFile.addProblemConstructor(methodDecl, method, problemsCopy);
-				} else if (method.isAbstract()) {
-					classFile.addAbstractMethod(methodDecl, method);
-				} else {
-					classFile.addProblemMethod(methodDecl, method, problemsCopy);
-				}
+			if (method.isConstructor()) {
+				if (typeBinding.isInterface()) continue;
+				classFile.addProblemConstructor(methodDecl, method, problemsCopy);
+			} else if (method.isAbstract()) {
+				classFile.addAbstractMethod(methodDecl, method);
+			} else {
+				classFile.addProblemMethod(methodDecl, method, problemsCopy);
 			}
 		}
 		// add abstract methods
commit 63ea92c6bca7bc4fd0ef97c7dc77b0ebedb8c05e
Author: ssankaran <srikanth_sankaran@in.ibm.com>
Date:   Tue Feb 4 06:25:11 2014 +0530

    Fixed Bug 414113 - [1.8] Method Binding for default method has abstract
    modifier instead of default

0	4	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IBinding.java
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IBinding.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IBinding.java
index 2717309..4f0a531 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IBinding.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IBinding.java
@@ -152,10 +152,6 @@ public interface IBinding {
 	 * Note that 'deprecated' is not included among the modifiers.
 	 * Use <code>isDeprecated</code> to find out whether a binding is deprecated.
 	 * </p>
-	 * <p>
-	 * Note that 'default' is not included among the modifiers.
-	 * Default methods are interface methods that are neither abstract nor static.
-	 * </p>
 	 *
 	 * @return the bit-wise or of <code>Modifier</code> constants
 	 * @see Modifier

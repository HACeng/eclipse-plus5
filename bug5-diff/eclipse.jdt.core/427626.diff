commit 8238d4886dd5cc2d15b3226c07195562e9c81134
Author: Stephan Herrmann <stephan.herrmann@berlin.de>
Date:   Sun Feb 9 01:08:45 2014 +0100

    Bug 427626 - StackOverflow while typing new ArrayList<String>().toArray(
    and asking for code completion

28	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java
3	3	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintFormula.java
3	3	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintTypeFormula.java
6	6	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java
7	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java
index 03a12a0..0098482 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java
@@ -2010,4 +2010,32 @@ public void testBug427479b() {
 		"The method getLast() is undefined for the type Object\n" + 
 		"----------\n");
 }
+public void testBug427626() {
+	runNegativeTest(
+		new String[] {
+			"X.java",
+			"import java.util.Arrays;\n" + 
+			"import java.util.List;\n" + 
+			"\n" + 
+			"public class X {\n" + 
+			"	void m() {\n" + 
+			"        List<String> ss = Arrays.asList(\"1\", \"2\", \"3\");\n" + 
+			"        \n" + 
+			"        ss.stream().map(s -> {\n" + 
+			"          class L1 {};\n" + 
+			"          class L2 {\n" + 
+			"            void mm(L1 l) {}\n" + 
+			"          }\n" + 
+			"          return new L2().mm(new L1());\n" + 
+			"        }).forEach(e -> System.out.println(e));\n" + 
+			"	}\n" + 
+			"}"
+		},
+		"----------\n" + 
+		"1. ERROR in X.java (at line 13)\n" + 
+		"	return new L2().mm(new L1());\n" + 
+		"	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
+		"Cannot return a void result\n" + 
+		"----------\n");
+}
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java
index e0a0249..c2f917f 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java
@@ -355,7 +355,7 @@ class ConstraintExpressionFormula extends ConstraintFormula {
 					toResolve = true;
 				} else if (inferenceContext.currentBounds.condition18_5_2_bullet_3_3_2(alpha, targetType, inferenceContext)) {
 					toResolve = true;
-				} else if (targetType.isBaseType()) {
+				} else if (targetType.isNormalBaseType()) {
 					TypeBinding wrapper = inferenceContext.currentBounds.findWrapperTypeBound(alpha);
 					if (wrapper != null)
 						toResolve = true;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintFormula.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintFormula.java
index eb9fbfb..61a0b15 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintFormula.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintFormula.java
@@ -38,13 +38,13 @@ abstract class ConstraintFormula extends ReductionResult {
 	protected boolean isCompatibleWithInLooseInvocationContext(TypeBinding one, TypeBinding two, InferenceContext18 context) {
 		if (one.isCompatibleWith(two, context.scope))
 			return true;
-		if (one.isBaseType()) {
-			if (one != TypeBinding.NULL && !two.isBaseType()) {
+		if (one.isNormalBaseType()) {
+			if (!two.isBaseType()) {
 				TypeBinding boxingType = context.environment.computeBoxingType(one);
 				if (boxingType != one) //$IDENTITY-COMPARISON$ just checking if boxing could help
 					return boxingType.isCompatibleWith(two, context.scope);
 			}
-		} else if (two.isBaseType() && two != TypeBinding.NULL) {
+		} else if (two.isNormalBaseType()) {
 			TypeBinding boxingType = context.environment.computeBoxingType(two);
 			if (boxingType != two) //$IDENTITY-COMPARISON$ just checking if boxing could help
 				return one.isCompatibleWith(boxingType, context.scope);
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintTypeFormula.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintTypeFormula.java
index 30e91b7..0ee7334 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintTypeFormula.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintTypeFormula.java
@@ -55,11 +55,11 @@ class ConstraintTypeFormula extends ConstraintFormula {
 					return TRUE;
 				return FALSE;
 			}
-			if (this.left.isBaseType() && this.left != TypeBinding.NULL) {
+			if (this.left.isNormalBaseType()) {
 				TypeBinding sPrime = inferenceContext.environment.computeBoxingType(this.left);
 				return new ConstraintTypeFormula(sPrime, this.right, COMPATIBLE, this.isSoft);
 			}
-			if (this.right.isBaseType() && this.right != TypeBinding.NULL) {
+			if (this.right.isNormalBaseType()) {
 				TypeBinding tPrime = inferenceContext.environment.computeBoxingType(this.right);
 				return new ConstraintTypeFormula(this.left, tPrime, SAME, this.isSoft);
 			}
@@ -264,7 +264,7 @@ class ConstraintTypeFormula extends ConstraintFormula {
 				if (sPrimeArray == null)
 					return FALSE;
 				TypeBinding sPrime = sPrimeArray.elementsType();
-				if (!tPrime.isBaseType() && !sPrime.isBaseType()) {
+				if (!tPrime.isNormalBaseType() && !sPrime.isNormalBaseType()) {
 					return new ConstraintTypeFormula(sPrime, tPrime, SUBTYPE, this.isSoft);
 				}
 				return TypeBinding.equalsEquals(tPrime, sPrime) ? TRUE : FALSE; // same primitive type?
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java
index adaf2ef..a2eb733 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java
@@ -687,19 +687,19 @@ public class InferenceContext18 {
 				}
 				return true;
 			}
-			checkPrimitive1: if (r1.isBaseType() && !r2.isBaseType()) {
+			checkPrimitive1: if (r1.isNormalBaseType() && !r2.isNormalBaseType()) {
 				// check: each result expression is a standalone expression of a primitive type
 				for (int i = 0; i < results.length; i++) {
-					if (results[i].isPolyExpression() || (results[i].resolvedType != null && !results[i].resolvedType.isBaseType()))
+					if (results[i].isPolyExpression() || (results[i].resolvedType != null && !results[i].resolvedType.isNormalBaseType()))
 						break checkPrimitive1;
 				}
 				return true;
 			}
-			checkPrimitive2: if (r2.isBaseType() && !r1.isBaseType()) {
+			checkPrimitive2: if (r2.isNormalBaseType() && !r1.isNormalBaseType()) {
 				for (int i = 0; i < results.length; i++) {
 					// for all expressions (not for any expression not)
 					if (!(
-							(!results[i].isPolyExpression() && (results[i].resolvedType != null && !results[i].resolvedType.isBaseType())) // standalone of a referencetype
+							(!results[i].isPolyExpression() && (results[i].resolvedType != null && !results[i].resolvedType.isNormalBaseType())) // standalone of a referencetype
 							|| results[i].isPolyExpression()))	// or a poly
 						break checkPrimitive2;
 				}
@@ -715,9 +715,9 @@ public class InferenceContext18 {
 					return true;
 				MethodBinding method = reference.findCompileTimeMethodTargeting(null, this.scope); // TODO directly access exactMethodBinding!
 				TypeBinding returnType = method.isConstructor() ? method.declaringClass : method.returnType;
-				if (r1.isBaseType() && !r2.isBaseType() && returnType.isBaseType()) 
+				if (r1.isNormalBaseType() && !r2.isNormalBaseType() && returnType.isNormalBaseType()) 
 					return true;
-				if (r2.isBaseType() && !r1.isBaseType() && !returnType.isBaseType())
+				if (r2.isNormalBaseType() && !r1.isNormalBaseType() && !returnType.isNormalBaseType())
 					return true;
 			}
 			return reduceAndIncorporate(new ConstraintTypeFormula(r1, r2, ReductionResult.SUBTYPE));
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java
index f7e6990..3d26948 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java
@@ -25,6 +25,7 @@
  *								Bug 426792 - [1.8][inference][impl] generify new type inference engine
  *								Bug 426764 - [1.8] Presence of conditional expression as method argument confuses compiler
  *								Bug 423505 - [1.8] Implement "18.5.4 More Specific Method Inference"
+ *								Bug 427626 - [1.8] StackOverflow while typing new ArrayList<String>().toArray( and asking for code completion
  *      Jesper S Moller <jesper@selskabet.org> -  Contributions for
  *								bug 382701 - [1.8][compiler] Implement semantic analysis of Lambda expressions & Reference expression
  *******************************************************************************/
@@ -517,6 +518,12 @@ public final boolean isBaseType() {
 	return (this.tagBits & TagBits.IsBaseType) != 0;
 }
 
+/* Answer true if the receiver is a base type other than void or null
+ */
+public final boolean isNormalBaseType() {
+	return (this.tagBits & TagBits.IsBaseType) != 0 && this.id != TypeIds.T_void && this.id != TypeIds.T_null;
+}
+
 /* Answer true if the receiver is a primitive type or a boxed primitive type
  */
 public final boolean isPrimitiveOrBoxedPrimitiveType() {

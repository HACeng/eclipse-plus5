commit 9d9dbf43d8d5adb49e2b6b1c21d735fa3526d7ec
Author: ssankaran <srikanth_sankaran@in.ibm.com>
Date:   Fri Feb 7 14:26:06 2014 +0530

    Fixed Bug 424914 - [1.8][compiler] No error shown for method reference
    with super enclosed in an interface

4	2	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java
63	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/InterfaceMethodsTest.java
3	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
4	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java
6	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SuperReference.java
6	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ThisReference.java
8	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
1	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java
index 274b562..8680d1b 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java
@@ -50,6 +50,8 @@ import java.util.Comparator;
 import java.util.HashMap;
 import java.util.Map;
 
+import junit.framework.Test;
+
 import org.eclipse.jdt.core.JavaCore;
 import org.eclipse.jdt.core.compiler.CategorizedProblem;
 import org.eclipse.jdt.core.compiler.IProblem;
@@ -61,8 +63,6 @@ import org.eclipse.jdt.internal.compiler.problem.DefaultProblemFactory;
 import org.eclipse.jdt.internal.compiler.problem.ProblemReporter;
 import org.eclipse.jdt.internal.compiler.problem.ProblemSeverities;
 
-import junit.framework.Test;
-
 /**
  * This class is meant to gather test cases related to the invocation of the
  * compiler, be it at an API or non API level.
@@ -812,6 +812,7 @@ public void test011_problem_categories() {
 		expectedProblemAttributes.put("NoImplicitStringConversionForCharArrayExpression", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));
 		expectedProblemAttributes.put("NoMessageSendOnArrayType", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));
 		expectedProblemAttributes.put("NoMessageSendOnBaseType", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));
+		expectedProblemAttributes.put("NoSuperInInterfaceContext", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));
 		expectedProblemAttributes.put("NonBlankFinalLocalAssignment", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));
 		expectedProblemAttributes.put("NonConstantExpression", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));
 		expectedProblemAttributes.put("NonExternalizedStringLiteral", new ProblemAttributes(CategorizedProblem.CAT_NLS));
@@ -1624,6 +1625,7 @@ public void test012_compiler_problems_tuning() {
 		expectedProblemAttributes.put("NoImplicitStringConversionForCharArrayExpression", new ProblemAttributes(JavaCore.COMPILER_PB_CHAR_ARRAY_IN_STRING_CONCATENATION));
 		expectedProblemAttributes.put("NoMessageSendOnArrayType", SKIP);
 		expectedProblemAttributes.put("NoMessageSendOnBaseType", SKIP);
+		expectedProblemAttributes.put("NoSuperInInterfaceContext", SKIP);
 		expectedProblemAttributes.put("NonBlankFinalLocalAssignment", SKIP);
 		expectedProblemAttributes.put("NonConstantExpression", SKIP);
 		expectedProblemAttributes.put("NonExternalizedStringLiteral", new ProblemAttributes(JavaCore.COMPILER_PB_NON_NLS_STRING_LITERAL));
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/InterfaceMethodsTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/InterfaceMethodsTest.java
index f20a6bb..32124ce 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/InterfaceMethodsTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/InterfaceMethodsTest.java
@@ -2347,4 +2347,67 @@ public class InterfaceMethodsTest extends AbstractComparableTest {
 			"Type safety: Potential heap pollution via varargs parameter x\n" + 
 			"----------\n");
 	}
+	// https://bugs.eclipse.org/bugs/show_bug.cgi?id=424914, [1.8][compiler] No error shown for method reference with super enclosed in an interface
+	public void test424914() throws Exception {
+		this.runNegativeTest(
+			new String[] {
+					"X.java",
+					"interface A {\n" +
+					"	String foo();\n" +
+					"	String b = super.toString();\n" +
+					"	default void fun1() {\n" +
+					"		System.out.println((A) super::toString);\n" +
+					"		super.toString();\n" +
+					"		Object.super.toString();\n" +
+					"	}\n" +
+					"}\n",
+			},
+			"----------\n" + 
+			"1. ERROR in X.java (at line 3)\n" + 
+			"	String b = super.toString();\n" + 
+			"	           ^^^^^\n" + 
+			"Cannot use super in a static context\n" + 
+			"----------\n" + 
+			"2. ERROR in X.java (at line 5)\n" + 
+			"	System.out.println((A) super::toString);\n" + 
+			"	                       ^^^^^\n" + 
+			"super reference is illegal in interface context\n" + 
+			"----------\n" + 
+			"3. ERROR in X.java (at line 6)\n" + 
+			"	super.toString();\n" + 
+			"	^^^^^\n" + 
+			"super reference is illegal in interface context\n" + 
+			"----------\n" + 
+			"4. ERROR in X.java (at line 7)\n" + 
+			"	Object.super.toString();\n" + 
+			"	^^^^^^^^^^^^\n" + 
+			"No enclosing instance of the type Object is accessible in scope\n" + 
+			"----------\n");
+	}
+	// https://bugs.eclipse.org/bugs/show_bug.cgi?id=424914, [1.8][compiler] No error shown for method reference with super enclosed in an interface
+	public void test424914a() throws Exception {
+		this.runConformTest(
+			new String[] {
+					"X.java",
+					"interface B {\n" +
+					"	default void foo() {\n" +
+					"		System.out.println(\"B.foo\");\n" +
+					"	}\n" +
+					"}\n" +
+					"interface A extends B {\n" +
+					"	default void foo() {\n" +
+					"		System.out.println(\"A.foo\");\n" +
+					"		B.super.foo();\n" +
+					"	}\n" +
+					"}\n" +
+					"public class X implements A {\n" +
+					"	public static void main(String[] args) {\n" +
+					"		A a = new X();\n" +
+					"		a.foo();\n" +
+					"	}\n" +
+					"}\n",
+			},
+			"A.foo\n" + 
+			"B.foo");
+	}	
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
index cefc3b1..8f005f8 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
@@ -664,6 +664,9 @@ void setSourceStart(int sourceStart);
 	/** @since 2.1 */
 	int InvalidParenthesizedExpression = Syntax + Internal + 225;
 
+	/** @since 3.9 BETA_JAVA8 */
+	int NoSuperInInterfaceContext = Syntax + Internal + 226;
+
 	/** @since 3.0 */
 	int ParsingErrorInsertTokenBefore = Syntax + Internal + 230;
 	/** @since 3.0 */
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java
index 114242e..3ad3a7f 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java
@@ -542,6 +542,10 @@ public abstract class ASTNode implements TypeConstants, TypeIds {
 
 		return false;
 	}
+	
+	public boolean isUnqualifiedSuper() {
+		return false;
+	}
 
 	/* Answer true if the type use is considered deprecated.
 	* An access in the same compilation unit is allowed.
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SuperReference.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SuperReference.java
index a7069ef..8017142 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SuperReference.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SuperReference.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2013 IBM Corporation and others.
+ * Copyright (c) 2000, 2014 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -43,6 +43,11 @@ public class SuperReference extends ThisReference {
 
 		return true;
 	}
+	
+	@Override
+	public boolean isUnqualifiedSuper() {
+		return true;
+	}
 
 	public boolean isThis() {
 
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ThisReference.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ThisReference.java
index 31cad42..5af3334 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ThisReference.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ThisReference.java
@@ -62,6 +62,12 @@ public class ThisReference extends Reference {
 		if (methodScope.isStatic) {
 			methodScope.problemReporter().errorThisSuperInStatic(this);
 			return false;
+		} else if (this.isUnqualifiedSuper()) {
+			TypeDeclaration type = methodScope.referenceType();
+			if (type != null && TypeDeclaration.kind(type.modifiers) == TypeDeclaration.INTERFACE_DECL) {
+				methodScope.problemReporter().errorNoSuperInInterface(this);
+				return false;
+			}
 		}
 		if (receiverType != null)
 			scope.tagAsAccessingEnclosingInstanceStateOf(receiverType, false /* type variable access */);
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
index e29e68c..405caaf 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
@@ -2108,6 +2108,14 @@ public void errorThisSuperInStatic(ASTNode reference) {
 		reference.sourceStart,
 		reference.sourceEnd);
 }
+public void errorNoSuperInInterface(ASTNode reference) {
+	this.handle(
+		IProblem.NoSuperInInterfaceContext,
+		NoArgument,
+		NoArgument,
+		reference.sourceStart,
+		reference.sourceEnd);
+}
 public void expressionShouldBeAVariable(Expression expression) {
 	this.handle(
 		IProblem.ExpressionShouldBeAVariable,
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
index 3b47828..569c7a8 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
@@ -240,6 +240,7 @@
 223 = The left-hand side of an assignment must be a variable
 224 = Missing semicolon
 225 = Invalid parenthesized expression
+226 = super reference is illegal in interface context
 
 230 = Syntax error on token "{0}", {1} expected before this token
 231 = Syntax error on token "{0}", {1} expected after this token

commit 9b825b2b97fc1913934f4045fd19eacdb55241ff
Author: Jayaprakash Arthanareeswaran <jarthana@in.ibm.com>
Date:   Wed Dec 18 10:09:05 2013 +0530

    Fixed Bug 405843 - [1.8] Support type annotations in Java Model

78	1	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/NullAnnotationModelTests.java
1	1	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java
8	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/ISourceElementRequestor.java
6	3	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementNotifier.java
11	3	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java
10	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitElementInfo.java
14	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitStructureRequestor.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/NullAnnotationModelTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/NullAnnotationModelTests.java
index 6db0e52..43a8443 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/NullAnnotationModelTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/NullAnnotationModelTests.java
@@ -64,7 +64,7 @@ public class NullAnnotationModelTests extends ReconcilerTests {
 
 	public void setUp() throws Exception {
 		super.setUp();
-		Bundle[] bundles = Platform.getBundles("org.eclipse.jdt.annotation", "[1.1.0,2.0.0)");
+		Bundle[] bundles = Platform.getBundles("org.eclipse.jdt.annotation", "[2.0.0,3.0.0)");
 		File bundleFile = FileLocator.getBundleFile(bundles[0]);
 		this.ANNOTATION_LIB = bundleFile.isDirectory() ? bundleFile.getPath()+"/bin" : bundleFile.getPath();
 	}
@@ -570,4 +570,81 @@ public class NullAnnotationModelTests extends ReconcilerTests {
 				deleteProject(project15);
 		}
 	}
+	/*
+	 * Bug 405843 - [1.8] Support type annotations in Java Model(https://bugs.eclipse.org/bugs/show_bug.cgi?id=405843)
+	 */
+	public void testBug405843() throws CoreException, IOException, InterruptedException {
+		IJavaProject project = null;
+		try {
+			project = createJavaProject("Bug405843", new String[] {"src"}, new String[] {"JCL18_LIB", this.ANNOTATION_LIB}, "bin", "1.8");
+			createFolder("/Bug405843/src/p1");
+			createFile("/Bug405843/src/p1/Function.java",
+					"package p1;\n" +
+					"public interface Function <I, O> {\n" +
+					"}\n;");
+
+			createFile("/Bug405843/src/p1/FunctionImpl.java",
+					"package p1;\n" +
+					"import org.eclipse.jdt.annotation.*;\n" +
+					"public class FunctionImpl implements Function<@NonNull String, @Nullable Object> {\n" +
+					"}\n");
+
+			project.setOption(JavaCore.COMPILER_ANNOTATION_NULL_ANALYSIS, JavaCore.ENABLED);
+
+			setUpWorkingCopy("/Bug405843/src/p1/X.java",
+					"package p1;\n" +
+					"import org.eclipse.jdt.annotation.*;\n" +
+					"public class X {\n" +
+					"	public Object foo() {\n" +
+					"		Function<@NonNull String, @Nullable Object> impl = new FunctionImpl();\n" +
+					"		return impl;\n" +
+					"	}\n" +
+					"}\n");
+			assertProblems(
+					"Unexpected problems",
+					"----------\n" +
+					"----------\n"
+					);
+
+		} finally {
+			if (project != null)
+				deleteProject(project);
+		}
+	}
+	public void testBug405843a() throws CoreException, IOException, InterruptedException {
+		IJavaProject project = null;
+		try {
+			project = createJavaProject("Bug405843", new String[] {"src"}, new String[] {"JCL18_LIB", this.ANNOTATION_LIB}, "bin", "1.8");
+			createFolder("/Bug405843/src/p1");
+			createFile("/Bug405843/src/p1/Y.java",
+					"package p1;\n" +
+					"import org.eclipse.jdt.annotation.*;\n" +
+					"public class Y {\n" +
+					"    void foo(@NonNull String @NonNull [] array) {}\n" +
+					"}\n;");
+
+			project.setOption(JavaCore.COMPILER_ANNOTATION_NULL_ANALYSIS, JavaCore.ENABLED);
+
+			setUpWorkingCopy("/Bug405843/src/p1/X.java",
+					"package p1;\n" +
+					"public class X {\n" +
+					"	public void foo(Y y) {\n" +
+					"		y.foo(null);\n" +
+					"	}\n" +
+					"}\n");
+			assertProblems(
+					"Unexpected problems",
+					"----------\n" + 
+					"1. ERROR in /Bug405843/src/p1/X.java (at line 4)\n" + 
+					"	y.foo(null);\n" + 
+					"	      ^^^^\n" + 
+					"Null type mismatch: required \'@NonNull String @NonNull[]\' but the provided value is null\n" + 
+					"----------\n"
+					);
+
+		} finally {
+			if (project != null)
+				deleteProject(project);
+		}
+	}
 }
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java
index 1b7c530..07f117d 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ReconcilerTests.java
@@ -291,7 +291,7 @@ private void setUp15WorkingCopy(String path, WorkingCopyOwner owner) throws Java
 	String contents = this.workingCopy.getSource();
 	setUpWorkingCopy(path, contents, owner);
 }
-private void setUpWorkingCopy(String path, String contents) throws JavaModelException {
+protected void setUpWorkingCopy(String path, String contents) throws JavaModelException {
 	setUpWorkingCopy(path, contents, this.wcOwner);
 }
 private void setUpWorkingCopy(String path, String contents, WorkingCopyOwner owner) throws JavaModelException {
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/ISourceElementRequestor.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/ISourceElementRequestor.java
index be37816..0117e55 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/ISourceElementRequestor.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/ISourceElementRequestor.java
@@ -1,10 +1,14 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2011 IBM Corporation and others.
+ * Copyright (c) 2000, 2013 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ * 
  * Contributors:
  *     IBM Corporation - initial API and implementation
  *******************************************************************************/
@@ -47,6 +51,7 @@ import org.eclipse.jdt.internal.compiler.ast.TypeDeclaration;
 public interface ISourceElementRequestor {
 
 	public static class TypeInfo {
+		public boolean typeAnnotated;
 		public int declarationStart;
 		public int modifiers;
 		public char[] name;
@@ -74,6 +79,7 @@ public interface ISourceElementRequestor {
 	}
 
 	public static class MethodInfo {
+		public boolean typeAnnotated;
 		public boolean isConstructor;
 		public boolean isAnnotation;
 		public int declarationStart;
@@ -104,6 +110,7 @@ public interface ISourceElementRequestor {
 		public char[] name;
 	}
 	public static class FieldInfo {
+		public boolean typeAnnotated;
 		public int declarationStart;
 		public int modifiers;
 		public char[] type;
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementNotifier.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementNotifier.java
index 5a48c45..fb66e79 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementNotifier.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceElementNotifier.java
@@ -273,6 +273,9 @@ protected void notifySourceElementRequestor(AbstractMethodDeclaration methodDecl
 	boolean isVarArgs = false;
 	Argument[] arguments = methodDeclaration.arguments;
 	ParameterInfo[] parameterInfos = null; 
+	ISourceElementRequestor.MethodInfo methodInfo = new ISourceElementRequestor.MethodInfo();
+	methodInfo.typeAnnotated = ((methodDeclaration.bits & ASTNode.HasTypeAnnotations) != 0);
+
 	if (arguments != null) {
 		Object[][] argumentInfos = getArgumentInfos(arguments);
 		parameterInfos = (ParameterInfo[]) argumentInfos[0];
@@ -294,7 +297,6 @@ protected void notifySourceElementRequestor(AbstractMethodDeclaration methodDecl
 			if (hasDeprecatedAnnotation(methodDeclaration.annotations))
 				currentModifiers |= ClassFileConstants.AccDeprecated;
 
-			ISourceElementRequestor.MethodInfo methodInfo = new ISourceElementRequestor.MethodInfo();
 			methodInfo.isConstructor = true;
 			methodInfo.declarationStart = methodDeclaration.declarationSourceStart;
 			methodInfo.modifiers = currentModifiers;
@@ -353,7 +355,6 @@ protected void notifySourceElementRequestor(AbstractMethodDeclaration methodDecl
 		TypeReference returnType = methodDeclaration instanceof MethodDeclaration
 			? ((MethodDeclaration) methodDeclaration).returnType
 			: null;
-		ISourceElementRequestor.MethodInfo methodInfo = new ISourceElementRequestor.MethodInfo();
 		methodInfo.isAnnotation = methodDeclaration instanceof AnnotationMethodDeclaration;
 		methodInfo.declarationStart = methodDeclaration.declarationSourceStart;
 		methodInfo.modifiers = currentModifiers;
@@ -514,6 +515,7 @@ protected void notifySourceElementRequestor(FieldDeclaration fieldDeclaration, T
 					typeName = CharOperation.concatWith(fieldDeclaration.type.getParameterizedTypeName(), '.');
 				}
 				ISourceElementRequestor.FieldInfo fieldInfo = new ISourceElementRequestor.FieldInfo();
+				fieldInfo.typeAnnotated = ((fieldDeclaration.bits & ASTNode.HasTypeAnnotations) != 0);
 				fieldInfo.declarationStart = fieldDeclaration.declarationSourceStart;
 				fieldInfo.name = fieldDeclaration.name;
 				fieldInfo.modifiers = deprecated ? (currentModifiers & ExtraCompilerModifiers.AccJustFlag) | ClassFileConstants.AccDeprecated : currentModifiers & ExtraCompilerModifiers.AccJustFlag;
@@ -597,6 +599,8 @@ protected void notifySourceElementRequestor(TypeDeclaration typeDeclaration, boo
 		char[][] interfaceNames = getInterfaceNames(typeDeclaration);
 		int kind = TypeDeclaration.kind(typeDeclaration.modifiers);
 		char[] implicitSuperclassName = TypeConstants.CharArray_JAVA_LANG_OBJECT;
+		ISourceElementRequestor.TypeInfo typeInfo = new ISourceElementRequestor.TypeInfo();
+		typeInfo.typeAnnotated = ((typeDeclaration.bits & ASTNode.HasTypeAnnotations) != 0);
 		if (isInRange) {
 			int currentModifiers = typeDeclaration.modifiers;
 
@@ -611,7 +615,6 @@ protected void notifySourceElementRequestor(TypeDeclaration typeDeclaration, boo
 			} else {
 				superclassName = getSuperclassName(typeDeclaration);
 			}
-			ISourceElementRequestor.TypeInfo typeInfo = new ISourceElementRequestor.TypeInfo();
 			if (typeDeclaration.allocation == null) {
 				typeInfo.declarationStart = typeDeclaration.declarationSourceStart;
 			} else if (isEnumInit) {
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java
index ffae433..471ff60 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java
@@ -1,10 +1,14 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2011 IBM Corporation and others.
+ * Copyright (c) 2000, 2013 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *     IBM Corporation - initial API and implementation
  *     Stephan Herrmann <stephan@cs.tu-berlin.de> - Contributions for
@@ -116,11 +120,15 @@ public class SourceTypeConverter extends TypeConverter {
 		org.eclipse.jdt.core.ICompilationUnit cuHandle = topLevelTypeInfo.getHandle().getCompilationUnit();
 		this.cu = (ICompilationUnit) cuHandle;
 
-		if (this.has1_5Compliance && ((CompilationUnitElementInfo) ((JavaElement) this.cu).getElementInfo()).annotationNumber > 10) { // experimental value
+		if (this.has1_5Compliance && 
+				((CompilationUnitElementInfo) ((JavaElement) this.cu).getElementInfo()).annotationNumber >= CompilationUnitElementInfo.ANNOTATION_THRESHOLD_FOR_DIET_PARSE) {
 			// If more than 10 annotations, diet parse as this is faster, but not if
-			// the client wants local and anonymous types to be converted (https://bugs.eclipse.org/bugs/show_bug.cgi?id=254738) 
+			// the client wants local and anonymous types to be converted (https://bugs.eclipse.org/bugs/show_bug.cgi?id=254738)
+			// Also see bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=405843
 			if ((this.flags & LOCAL_TYPE) == 0) {
 				return new Parser(this.problemReporter, true).dietParse(this.cu, compilationResult);
+			} else {
+				return new Parser(this.problemReporter, true).parse(this.cu, compilationResult);
 			}
 		}
 
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitElementInfo.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitElementInfo.java
index 6229d32..2f68bcc 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitElementInfo.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitElementInfo.java
@@ -1,10 +1,14 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2009 IBM Corporation and others.
+ * Copyright (c) 2000, 2013 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *     IBM Corporation - initial API and implementation
  *******************************************************************************/
@@ -14,6 +18,11 @@ import org.eclipse.jdt.core.ISourceRange;
 import org.eclipse.jdt.core.SourceRange;
 
 public class CompilationUnitElementInfo extends OpenableElementInfo {
+	
+	/**
+	 * Count that will be used by SourceTypeConverter to decide whether or not to diet parse.
+	 */
+	public static int ANNOTATION_THRESHOLD_FOR_DIET_PARSE = 10;
 
 	/**
 	 * The length of this compilation unit's source code <code>String</code>
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitStructureRequestor.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitStructureRequestor.java
index 2d08411..bbccdf8 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitStructureRequestor.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitStructureRequestor.java
@@ -1,10 +1,14 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2012 IBM Corporation and others.
+ * Copyright (c) 2000, 2013 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *     IBM Corporation - initial API and implementation
  *******************************************************************************/
@@ -446,6 +450,9 @@ private SourceMethodElementInfo createMethodInfo(MethodInfo methodInfo, SourceMe
 	if (methodInfo.node != null && methodInfo.node.arguments != null) {
 		info.arguments = acceptMethodParameters(methodInfo.node.arguments, handle, methodInfo);
 	}
+	if (methodInfo.typeAnnotated) {
+		this.unitInfo.annotationNumber = CompilationUnitElementInfo.ANNOTATION_THRESHOLD_FOR_DIET_PARSE;
+	}
 	return info;
 }
 private LocalVariable[] acceptMethodParameters(Argument[] arguments, JavaElement methodHandle, MethodInfo methodInfo) {
@@ -551,6 +558,9 @@ private SourceTypeElementInfo createTypeInfo(TypeInfo typeInfo, SourceType handl
 		}
 		
 	}
+	if (typeInfo.typeAnnotated) {
+		this.unitInfo.annotationNumber = CompilationUnitElementInfo.ANNOTATION_THRESHOLD_FOR_DIET_PARSE;
+	}
 	return info;
 }
 protected void acceptTypeParameter(TypeParameterInfo typeParameterInfo, JavaElementInfo parentInfo) {
@@ -646,6 +656,9 @@ public void exitField(int initializationStart, int declarationEnd, int declarati
 			}
 		}
 	}
+	if (fieldInfo.typeAnnotated) {
+		this.unitInfo.annotationNumber = CompilationUnitElementInfo.ANNOTATION_THRESHOLD_FOR_DIET_PARSE;
+	}
 }
 /**
  * @see ISourceElementRequestor

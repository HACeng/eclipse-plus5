commit 60307c1e2e6ef1d38cf313e756af798e2166cf66
Author: Walter Harley <wharley>
Date:   Mon Oct 15 20:46:45 2007 +0000

    Bug 170692: support timely problem removal for processors that only run during build.

1	0	org.eclipse.jdt.apt.core/plugin.properties
6	0	org.eclipse.jdt.apt.core/plugin.xml
12	3	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/env/EclipseAnnotationProcessorEnvironment.java
2	1	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/env/Phase.java
26	11	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java
2	0	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptPlugin.java
5	2	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/APTProblem.java
32	3	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/AbstractCompilationEnv.java
12	1	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptPreferenceConstants.java
diff --git a/org.eclipse.jdt.apt.core/plugin.properties b/org.eclipse.jdt.apt.core/plugin.properties
index 4e1a207..6067e68 100644
--- a/org.eclipse.jdt.apt.core/plugin.properties
+++ b/org.eclipse.jdt.apt.core/plugin.properties
@@ -13,5 +13,6 @@ pluginName=Java Annotation Processing Core
 annotationProcessorFactoriesName=Annotation Processor Factories
 annotationProcessingName=Annotation Processing
 aptBatchMarkerName=APT Batch Marker
+aptBatchMarkerBuildOnlyName=APT Nonreconcile Batch Marker
 aptBuildMarkerName=APT Build Marker
 aptConfigurationMarkerName=APT Configuration Marker
\ No newline at end of file
diff --git a/org.eclipse.jdt.apt.core/plugin.xml b/org.eclipse.jdt.apt.core/plugin.xml
index 53c8928..041aeb6 100644
--- a/org.eclipse.jdt.apt.core/plugin.xml
+++ b/org.eclipse.jdt.apt.core/plugin.xml
@@ -24,6 +24,7 @@
          id="APT"
          requiredSourceLevel="1.5">
       <managedMarker markerType="org.eclipse.jdt.apt.core.compile.problem"/>
+      <managedMarker markerType="org.eclipse.jdt.apt.core.nonreconcile.compile.problem"/>
    </compilationParticipant>
 </extension>
 
@@ -31,6 +32,11 @@
 <!-- Extension: APT Problem                                                             -->
 <!-- =================================================================================== -->
 <extension id="compile.problem" point="org.eclipse.core.resources.markers" name="%aptBatchMarkerName">
+	<super type="org.eclipse.jdt.core.problem"/>
+	<persistent value="true"/>
+</extension>  
+
+<extension id="nonreconcile.compile.problem" point="org.eclipse.core.resources.markers" name="%aptNonreconcileBatchMarkerName">
 	<super type="org.eclipse.core.resources.problemmarker"/>
 	<super type="org.eclipse.core.resources.textmarker"/>
 	<persistent value="true"/>
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/env/EclipseAnnotationProcessorEnvironment.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/env/EclipseAnnotationProcessorEnvironment.java
index 3a5cb72..33afa6c 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/env/EclipseAnnotationProcessorEnvironment.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/env/EclipseAnnotationProcessorEnvironment.java
@@ -36,10 +36,19 @@ public interface EclipseAnnotationProcessorEnvironment extends
 	 */
 	EclipseMessager getMessager();
 	
-	/**	
-	 * @return the current processing phase: either
-	 * {@link Phase#RECONCILE} or {@link Phase#BUILD}
+	/**
+	 * Indicate whether the processor is being called during a build or during editing
+	 * (that is, during reconcile).
+	 * <p>
+	 * Note that processors that behave differently depending on phase may cause
+	 * inconsistent results, such as problems showing up in the Problems view but not in
+	 * the editor window. If the goal is to improve edit-time performance by skipping
+	 * processing during reconcile, it is recommended to use the
+	 * {@link org.eclipse.jdt.apt.core.util.AptPreferenceConstants#PROCESSING_IN_EDITOR_DISABLED_OPTION
+	 * PROCESSING_IN_EDITOR_DISABLED} option instead.
 	 * 
+	 * @return the current processing phase: either {@link Phase#RECONCILE} or
+	 *         {@link Phase#BUILD}
 	 */
 	Phase getPhase();
 	
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/env/Phase.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/env/Phase.java
index 5b47b1f..ea1dc10 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/env/Phase.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/env/Phase.java
@@ -12,6 +12,7 @@ package org.eclipse.jdt.apt.core.env;
 
 /**
  * Enum for APT related operation phase.
+ * @see EclipseAnnotationProcessorEnvironment#getPhase()
  */
 public enum Phase { 
 	
@@ -20,7 +21,7 @@ public enum Phase {
 	/** During Build phase */    
 	BUILD, 
 	/** 
-	 * Neither reconcile or build. Completion would be an example.  
+	 * Neither reconcile nor build. Completion would be an example.  
 	 */ 
 	OTHER 
 }
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java
index 13be0c6..ce75ab9 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java
@@ -37,6 +37,7 @@ import org.eclipse.jdt.apt.core.internal.env.ReconcileEnv;
 import org.eclipse.jdt.apt.core.internal.env.AbstractCompilationEnv.EnvCallback;
 import org.eclipse.jdt.apt.core.internal.generatedfile.GeneratedFileManager;
 import org.eclipse.jdt.apt.core.internal.util.FactoryPath;
+import org.eclipse.jdt.apt.core.util.AptConfig;
 import org.eclipse.jdt.core.ICompilationUnit;
 import org.eclipse.jdt.core.IJavaProject;
 import org.eclipse.jdt.core.compiler.BuildContext;
@@ -73,7 +74,7 @@ public class APTDispatchRunnable implements IWorkspaceRunnable
 			
 			// Dispatch the annotation processors.  Env will keep track of problems and generated types.
 			try {
-				dispatchToFileBasedProcessor(reconcileEnv);
+				dispatchToFileBasedProcessor(reconcileEnv, true, true);
 			} catch (Throwable t) {
 				AptPlugin.log(t, "Processor failure during reconcile"); //$NON-NLS-1$
 			}
@@ -310,9 +311,10 @@ public class APTDispatchRunnable implements IWorkspaceRunnable
 	{
 		final BuildContext[] cpResults = processorEnv.getFilesWithAnnotation();
 		final GeneratedFileManager gfm = _aptProject.getGeneratedFileManager();
+		boolean projectEnablesReconcile = AptConfig.shouldProcessDuringReconcile(_aptProject.getJavaProject());
 		for (BuildContext curResult : cpResults ) {			
 			processorEnv.beginFileProcessing(curResult);
-			dispatchToFileBasedProcessor(processorEnv);
+			dispatchToFileBasedProcessor(processorEnv, projectEnablesReconcile, false);
 			reportResult(
 					curResult,
 					processorEnv.getAllGeneratedFiles(),
@@ -490,9 +492,9 @@ public class APTDispatchRunnable implements IWorkspaceRunnable
 							trace( "runAPT: invoking batch processor " + processor.getClass().getName(), //$NON-NLS-1$
 									processorEnv);
 						_currentDispatchBatchFactories.add(factory);
-						processorEnv.setCurrentProcessorFactory(factory);
+						processorEnv.setCurrentProcessorFactory(factory, false);
 						processor.process();
-						processorEnv.setCurrentProcessorFactory(null);
+						processorEnv.setCurrentProcessorFactory(null, false);
 					}
 				}
 			}	
@@ -507,9 +509,9 @@ public class APTDispatchRunnable implements IWorkspaceRunnable
 					if ( AptPlugin.DEBUG ) 
 						trace( "runAPT: invoking batch processor " + processor.getClass().getName(), //$NON-NLS-1$
 								processorEnv);
-					processorEnv.setCurrentProcessorFactory(prevRoundFactory);
+					processorEnv.setCurrentProcessorFactory(prevRoundFactory, false);
 					processor.process();
-					processorEnv.setCurrentProcessorFactory(null);
+					processorEnv.setCurrentProcessorFactory(null, false);
 				}
 			}
 			
@@ -548,6 +550,7 @@ public class APTDispatchRunnable implements IWorkspaceRunnable
 		
 		// Now, do the file based dispatch
 		if( !fileFactory2Annos.isEmpty() ){
+			boolean projectEnablesReconcile = AptConfig.shouldProcessDuringReconcile(_aptProject.getJavaProject());
 			for(BuildContext curResult : cpResults ){
 				final Set<AnnotationTypeDeclaration> annotationTypesInFile = file2AnnotationDecls.get(curResult);
 				if( annotationTypesInFile == null || annotationTypesInFile.isEmpty() )
@@ -565,9 +568,11 @@ public class APTDispatchRunnable implements IWorkspaceRunnable
 							if ( AptPlugin.DEBUG ) 
 								trace( "runAPT: invoking file-based processor " + processor.getClass().getName(), //$NON-NLS-1$
 										processorEnv );
-							processorEnv.setCurrentProcessorFactory(factory);
+							//TODO in 3.4: also consider factory path attributes
+							boolean willReconcile = projectEnablesReconcile && AbstractCompilationEnv.doesFactorySupportReconcile(factory);
+							processorEnv.setCurrentProcessorFactory(factory, willReconcile);
 							processor.process();
-							processorEnv.setCurrentProcessorFactory(null);
+							processorEnv.setCurrentProcessorFactory(null, false);
 						}
 					}
 				}
@@ -586,13 +591,23 @@ public class APTDispatchRunnable implements IWorkspaceRunnable
 		}
 	}
 	
+	/**
+	 * @param projectEnablesReconcile true if reconcile-time processing is enabled in the current project
+	 * @param isReconcile true if this call is during reconcile, e.g., processorEnv is a ReconcileEnv
+	 */
 	private void dispatchToFileBasedProcessor(
-			final AbstractCompilationEnv processorEnv){
+			final AbstractCompilationEnv processorEnv,
+			boolean projectEnablesReconcile, boolean isReconcile){
 		
 		Map<String, AnnotationTypeDeclaration> annotationDecls = processorEnv.getAnnotationTypes();
 		for( Map.Entry<AnnotationProcessorFactory, FactoryPath.Attributes> entry : _factories.entrySet() ){
 			if( entry.getValue().runInBatchMode() ) continue;
 			AnnotationProcessorFactory factory = entry.getKey();
+			//TODO in 3.4: also consider factory path attributes
+			boolean reconcileSupported = projectEnablesReconcile && 
+				AbstractCompilationEnv.doesFactorySupportReconcile(factory);
+			if (isReconcile && !reconcileSupported)
+				continue;
 			Set<AnnotationTypeDeclaration> factoryDecls = getFactorySupportedAnnotations(factory, annotationDecls);
 			if( factoryDecls != null ){
 				if(factoryDecls.size() == 0 ){
@@ -609,9 +624,9 @@ public class APTDispatchRunnable implements IWorkspaceRunnable
 						trace( "runAPT: invoking file-based processor " + processor.getClass().getName() + " on " + processorEnv.getFile(), //$NON-NLS-1$ //$NON-NLS-2$ 
 								processorEnv); 
 					}
-					processorEnv.setCurrentProcessorFactory(factory);
+					processorEnv.setCurrentProcessorFactory(factory, reconcileSupported);
 					processor.process();						
-					processorEnv.setCurrentProcessorFactory(null);
+					processorEnv.setCurrentProcessorFactory(null, false);
 				}
 			}
 
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptPlugin.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptPlugin.java
index 450f486..749ef90 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptPlugin.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptPlugin.java
@@ -54,6 +54,8 @@ public class AptPlugin extends Plugin {
 	public static final String APT_CONFIG_PROBLEM_MARKER = PLUGIN_ID + ".configproblem"; //$NON-NLS-1$
 	/** Marker ID used for posting problems during reconcile/build */
 	public static final String APT_COMPILATION_PROBLEM_MARKER = PLUGIN_ID + ".compile.problem"; //$NON-NLS-1$
+	/** Marker ID used for posting problems during build by processors that don't run in reconcile */
+	public static final String APT_NONRECONCILE_COMPILATION_PROBLEM_MARKER = PLUGIN_ID + ".nonreconcile.compile.problem"; //$NON-NLS-1$
 	
 	private static final SimpleDateFormat TRACE_DATE_FORMAT = new SimpleDateFormat("HH:mm:ss.SSS"); //$NON-NLS-1$
 	
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/APTProblem.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/APTProblem.java
index 36bf6d2..5fea082 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/APTProblem.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/APTProblem.java
@@ -26,6 +26,7 @@ class APTProblem extends CategorizedProblem implements IProblem
 	private int _line;
 	private IFile _resource;
 	private final String _message;
+	private final String _markerType;
 	
 	// May be null
 	private final String[] _arguments;
@@ -36,7 +37,8 @@ class APTProblem extends CategorizedProblem implements IProblem
 			   final int startingOffset,
 			   final int endingOffset,
 			   final int line,
-			   final String[] arguments){
+			   final String[] arguments,
+			   boolean isNonReconcile){
 		_message = msg;
 		_severity = severity;
 		_startingOffset = startingOffset;
@@ -44,6 +46,7 @@ class APTProblem extends CategorizedProblem implements IProblem
 		_line = line;
 		_resource = file;
 		_arguments = arguments;
+		_markerType = isNonReconcile ? AptPlugin.APT_NONRECONCILE_COMPILATION_PROBLEM_MARKER : AptPlugin.APT_COMPILATION_PROBLEM_MARKER;
 	}
 
 	public int getID() {
@@ -113,6 +116,6 @@ class APTProblem extends CategorizedProblem implements IProblem
 	
 	@Override
 	public String getMarkerType() {
-		return AptPlugin.APT_COMPILATION_PROBLEM_MARKER;
+		return _markerType;
 	}
 }
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/AbstractCompilationEnv.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/AbstractCompilationEnv.java
index 3073615..8e457f4 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/AbstractCompilationEnv.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/env/AbstractCompilationEnv.java
@@ -56,6 +56,7 @@ public abstract class AbstractCompilationEnv
 	
 	// Bugzilla 188185: accept "-AenableTypeGenerationInEditor" as well as "enableTypeGenerationInEditor".
 	private final static String RTTG_ENABLED_DASH_A_OPTION = "-A" + AptPreferenceConstants.RTTG_ENABLED_OPTION; //$NON-NLS-1$
+	private final static String PROCESSING_IN_EDITOR_DISABLED_DASH_A_OPTION = "-A" + AptPreferenceConstants.PROCESSING_IN_EDITOR_DISABLED_OPTION; //$NON-NLS-1$
 	
 	private Set<AnnotationProcessorListener> _listeners = null;
 	
@@ -76,6 +77,12 @@ public abstract class AbstractCompilationEnv
 	 * The processor that is currently being executed, or null if processing is not underway.
 	 */
 	private AnnotationProcessorFactory _currentProcessorFactory = null;
+
+	/**
+	 * True if the currently active processor will be called during reconcile as well as build.
+	 * Takes into account project settings, factory path, and processor options.
+	 */
+	private boolean _currentProcessorFactoryWillReconcile;
 	
 	public static interface EnvCallback {
 		public void run(AbstractCompilationEnv env);
@@ -102,6 +109,22 @@ public abstract class AbstractCompilationEnv
 		env._callback = callback;
 		env.createASTs(filesWithAnnotations);
     }
+    
+    /**
+     * Determine whether a processor wants to be called during reconcile. By default
+     * processors are called during both build and reconcile, but a processor can choose
+     * not to be called during reconcile by reporting 
+     * {@link AptPreferenceConstants#PROCESSING_IN_EDITOR_DISABLED_OPTION}
+     * in its supportedOptions() method.
+     * @return false if the processor reports PROCESSING_IN_EDITOR_DISABLED_OPTION.
+     * This does not consider project or factory path settings.
+     */
+    public static boolean doesFactorySupportReconcile(AnnotationProcessorFactory factory) {
+    	Collection<String> options = factory.supportedOptions();
+    	return options == null || 
+    		(!options.contains(AptPreferenceConstants.PROCESSING_IN_EDITOR_DISABLED_OPTION) &&
+    		!options.contains(PROCESSING_IN_EDITOR_DISABLED_DASH_A_OPTION));
+    }
 	
 	AbstractCompilationEnv(
 			CompilationUnit compilationUnit,
@@ -188,7 +211,7 @@ public abstract class AbstractCompilationEnv
     	// end-1 since IProblem ending offsets are inclusive but DOM layer
     	// ending offsets are exclusive.
     	final APTProblem newProblem = 
-        	new APTProblem(msg, severity, resource, start, end-1, line, arguments);
+        	new APTProblem(msg, severity, resource, start, end-1, line, arguments, !_currentProcessorFactoryWillReconcile);
     	return newProblem;
     }
 	
@@ -308,9 +331,15 @@ public abstract class AbstractCompilationEnv
 		return _currentProcessorFactory;
 	}
 	
-	public void setCurrentProcessorFactory(AnnotationProcessorFactory processor)
+	/**
+	 * @param factory a processor factory, or null to indicate processing is over.
+	 * @param willReconcile true if the processor will be called during reconcile as well as during build,
+	 * taking into account project settings, factory path, and processor options.
+	 */
+	public void setCurrentProcessorFactory(AnnotationProcessorFactory factory, boolean willReconcile)
 	{
-		_currentProcessorFactory = processor;	
+		_currentProcessorFactory = factory;
+		_currentProcessorFactoryWillReconcile = willReconcile;
 	}
 
 	public boolean currentProcessorSupportsRTTG()
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptPreferenceConstants.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptPreferenceConstants.java
index 76aea8b..988b34e 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptPreferenceConstants.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptPreferenceConstants.java
@@ -38,10 +38,21 @@ public class AptPreferenceConstants {
 	
 	/**
 	 * Processors should report this option in {@link com.sun.mirror.apt.AnnotationProcessorFactory#supportedOptions()}
-	 * in order to enable type generation while editing, that is, during reconcile.
+	 * in order to enable type generation while editing, that is, during reconcile.  This setting will be ignored if
+	 * the processor also reports {@link #PROCESSING_IN_EDITOR_DISABLED_OPTION}.
 	 */
 	public static final String RTTG_ENABLED_OPTION = "enableTypeGenerationInEditor"; //$NON-NLS-1$
 
+	/**
+	 * Processors should report this option in {@link com.sun.mirror.apt.AnnotationProcessorFactory#supportedOptions()}
+	 * in order to enable processing while editing, that is, during reconcile.  If this option is set, ie if processing
+	 * is disabled, then the value of {@link #RTTG_ENABLED_OPTION} will be ignored.  Whether a processor is called 
+	 * during reconcile is also influenced by the project settings and the project factory path.
+	 * <p>
+	 * @see AptConfig#setProcessDuringReconcile(org.eclipse.jdt.core.IJavaProject, boolean)
+	 */
+	public static final String PROCESSING_IN_EDITOR_DISABLED_OPTION = "disableProcessingInEditor"; //$NON-NLS-1$
+
 	public static Map<String,String> DEFAULT_OPTIONS_MAP;
 	
 	static {

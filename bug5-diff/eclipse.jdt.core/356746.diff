commit 355a63b4047e244d0e993584423379019fb4add9
Author: Olivier Thomann <oliviert>
Date:   Thu Sep 8 14:18:54 2011 +0000

    HEAD - Fixed bug 356746: ECJ accepts illegal unicode escape sequences

3	0	org.eclipse.jdt.core.tests.compiler/.settings/org.eclipse.core.resources.prefs
17	1	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ScannerTest.java
8	10	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java
3	1	org.eclipse.jdt.core/buildnotes_jdt-core.html
4	4	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
12	12	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionScanner.java
8	6	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java
4	3	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java
8	8	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java
7	7	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java
44	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/ScannerHelper.java
5	5	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceJavadocParser.java
7	7	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java
diff --git a/org.eclipse.jdt.core.tests.compiler/.settings/org.eclipse.core.resources.prefs b/org.eclipse.jdt.core.tests.compiler/.settings/org.eclipse.core.resources.prefs
new file mode 100644
index 0000000..0f2c123
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.compiler/.settings/org.eclipse.core.resources.prefs
@@ -0,0 +1,3 @@
+#Thu Sep 08 10:09:40 EDT 2011
+eclipse.preferences.version=1
+encoding//src/org/eclipse/jdt/core/tests/compiler/regression/ScannerTest.java=UTF-8
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ScannerTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ScannerTest.java
index 84f81da..6e782c5 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ScannerTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ScannerTest.java
@@ -31,7 +31,7 @@ public class ScannerTest extends AbstractRegressionTest {
 	// All specified tests which does not belong to the class are skipped...
 	static {
 //		TESTS_NAMES = new String[] { "test000" };
-//		TESTS_NUMBERS = new int[] { 58 };
+//		TESTS_NUMBERS = new int[] { 60 };
 //		TESTS_RANGE = new int[] { 54, -1 };
 	}
 
@@ -1290,4 +1290,20 @@ public class ScannerTest extends AbstractRegressionTest {
 				"----------\n");
 		}
 	}
+	//https://bugs.eclipse.org/bugs/show_bug.cgi?id=352553
+	public void test060() {
+		this.runNegativeTest(
+			new String[] {
+				"X.java",
+				"public class X {\n" + 
+				"	public static final String ERROR = \"\\u000Ⅻ\";\n" + 
+				"}"
+			},
+			"----------\n" + 
+			"1. ERROR in X.java (at line 2)\n" + 
+			"	public static final String ERROR = \"\\u000Ⅻ\";\n" + 
+			"	                                    ^^^^^^\n" + 
+			"Invalid unicode\n" + 
+			"----------\n");
+	}
 }
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java
index a34e7c8..441bc78 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverterJavadocTest.java
@@ -275,11 +275,10 @@ public class ASTConverterJavadocTest extends ConverterTestSetup {
 				int c1, c2, c3, c4;
 				charLength++;
 				while (source[idx+charLength] == 'u') charLength++;
-				if (((c1 = ScannerHelper.getNumericValue(source[idx+charLength++])) > 15
-					|| c1 < 0)
-					|| ((c2 = ScannerHelper.getNumericValue(source[idx+charLength++])) > 15 || c2 < 0)
-					|| ((c3 = ScannerHelper.getNumericValue(source[idx+charLength++])) > 15 || c3 < 0)
-					|| ((c4 = ScannerHelper.getNumericValue(source[idx+charLength++])) > 15 || c4 < 0)) {
+				if (((c1 = ScannerHelper.getHexadecimalValue(source[idx+charLength++])) > 15 || c1 < 0)
+					|| ((c2 = ScannerHelper.getHexadecimalValue(source[idx+charLength++])) > 15 || c2 < 0)
+					|| ((c3 = ScannerHelper.getHexadecimalValue(source[idx+charLength++])) > 15 || c3 < 0)
+					|| ((c4 = ScannerHelper.getHexadecimalValue(source[idx+charLength++])) > 15 || c4 < 0)) {
 					return ch;
 				}
 				ch = (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);
@@ -474,11 +473,10 @@ public class ASTConverterJavadocTest extends ConverterTestSetup {
 				int c1, c2, c3, c4;
 				unicodeSource[u++] = source[i];
 				unicodeSource[u++] = source[++i];
-				if (((c1 = ScannerHelper.getNumericValue(source[i+1])) > 15
-					|| c1 < 0)
-					|| ((c2 = ScannerHelper.getNumericValue(source[i+2])) > 15 || c2 < 0)
-					|| ((c3 = ScannerHelper.getNumericValue(source[i+3])) > 15 || c3 < 0)
-					|| ((c4 = ScannerHelper.getNumericValue(source[i+4])) > 15 || c4 < 0)) {
+				if (((c1 = ScannerHelper.getHexadecimalValue(source[i+1])) > 15 || c1 < 0)
+					|| ((c2 = ScannerHelper.getHexadecimalValue(source[i+2])) > 15 || c2 < 0)
+					|| ((c3 = ScannerHelper.getHexadecimalValue(source[i+3])) > 15 || c3 < 0)
+					|| ((c4 = ScannerHelper.getHexadecimalValue(source[i+4])) > 15 || c4 < 0)) {
 					throw new RuntimeException("Invalid unicode in source at "+i);
 				}
 				for (int j=0; j<4; j++) unicodeSource[u++] = source[++i];
diff --git a/org.eclipse.jdt.core/buildnotes_jdt-core.html b/org.eclipse.jdt.core/buildnotes_jdt-core.html
index 43bf895..6d41a0b 100644
--- a/org.eclipse.jdt.core/buildnotes_jdt-core.html
+++ b/org.eclipse.jdt.core/buildnotes_jdt-core.html
@@ -52,7 +52,9 @@ Eclipse SDK 3.8.0 - %date% - 3.8.0 M2
 <h2>What's new in this drop</h2>
 
 <h3>Problem Reports Fixed</h3>
-<a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=337935">337935</a>
+<a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=356746">356746</a>
+ECJ accepts illegal unicode escape sequences
+<br><a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=337935">337935</a>
 Test failures when run as an IDE (org.eclipse.sdk.ide)
 
 <a name="v_C08"></a>
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
index e4e1e3c..d1eec1d 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
@@ -531,13 +531,13 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 							}
 						}
 
-						if ((c1 = ScannerHelper.getNumericValue(source[pos++])) > 15
+						if ((c1 = ScannerHelper.getHexadecimalValue(source[pos++])) > 15
 							|| c1 < 0
-							|| (c2 = ScannerHelper.getNumericValue(source[pos++])) > 15
+							|| (c2 = ScannerHelper.getHexadecimalValue(source[pos++])) > 15
 							|| c2 < 0
-							|| (c3 = ScannerHelper.getNumericValue(source[pos++])) > 15
+							|| (c3 = ScannerHelper.getHexadecimalValue(source[pos++])) > 15
 							|| c3 < 0
-							|| (c4 = ScannerHelper.getNumericValue(source[pos++])) > 15
+							|| (c4 = ScannerHelper.getHexadecimalValue(source[pos++])) > 15
 							|| c4 < 0) {
 							return false;
 						} else {
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionScanner.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionScanner.java
index e63246b..e21f03f 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionScanner.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionScanner.java
@@ -552,13 +552,13 @@ public int getNextToken() throws InvalidInputException {
 									while (this.source[this.currentPosition] == 'u') {
 										this.currentPosition++;
 									}
-									if ((c1 = ScannerHelper.getNumericValue(this.source[this.currentPosition++])) > 15
+									if ((c1 = ScannerHelper.getHexadecimalValue(this.source[this.currentPosition++])) > 15
 										|| c1 < 0
-										|| (c2 = ScannerHelper.getNumericValue(this.source[this.currentPosition++])) > 15
+										|| (c2 = ScannerHelper.getHexadecimalValue(this.source[this.currentPosition++])) > 15
 										|| c2 < 0
-										|| (c3 = ScannerHelper.getNumericValue(this.source[this.currentPosition++])) > 15
+										|| (c3 = ScannerHelper.getHexadecimalValue(this.source[this.currentPosition++])) > 15
 										|| c3 < 0
-										|| (c4 = ScannerHelper.getNumericValue(this.source[this.currentPosition++])) > 15
+										|| (c4 = ScannerHelper.getHexadecimalValue(this.source[this.currentPosition++])) > 15
 										|| c4 < 0) {
 										throw new InvalidInputException(INVALID_UNICODE_ESCAPE);
 									} else {
@@ -585,13 +585,13 @@ public int getNextToken() throws InvalidInputException {
 										while (this.source[this.currentPosition] == 'u') {
 											this.currentPosition++;
 										}
-										if ((c1 = ScannerHelper.getNumericValue(this.source[this.currentPosition++])) > 15
+										if ((c1 = ScannerHelper.getHexadecimalValue(this.source[this.currentPosition++])) > 15
 											|| c1 < 0
-											|| (c2 = ScannerHelper.getNumericValue(this.source[this.currentPosition++])) > 15
+											|| (c2 = ScannerHelper.getHexadecimalValue(this.source[this.currentPosition++])) > 15
 											|| c2 < 0
-											|| (c3 = ScannerHelper.getNumericValue(this.source[this.currentPosition++])) > 15
+											|| (c3 = ScannerHelper.getHexadecimalValue(this.source[this.currentPosition++])) > 15
 											|| c3 < 0
-											|| (c4 = ScannerHelper.getNumericValue(this.source[this.currentPosition++])) > 15
+											|| (c4 = ScannerHelper.getHexadecimalValue(this.source[this.currentPosition++])) > 15
 											|| c4 < 0) {
 											throw new InvalidInputException(INVALID_UNICODE_ESCAPE);
 										} else {
@@ -623,13 +623,13 @@ public int getNextToken() throws InvalidInputException {
 										}
 										//-------------unicode traitement ------------
 										int c1 = 0, c2 = 0, c3 = 0, c4 = 0;
-										if ((c1 = ScannerHelper.getNumericValue(this.source[index++])) > 15
+										if ((c1 = ScannerHelper.getHexadecimalValue(this.source[index++])) > 15
 											|| c1 < 0
-											|| (c2 = ScannerHelper.getNumericValue(this.source[index++])) > 15
+											|| (c2 = ScannerHelper.getHexadecimalValue(this.source[index++])) > 15
 											|| c2 < 0
-											|| (c3 = ScannerHelper.getNumericValue(this.source[index++])) > 15
+											|| (c3 = ScannerHelper.getHexadecimalValue(this.source[index++])) > 15
 											|| c3 < 0
-											|| (c4 = ScannerHelper.getNumericValue(this.source[index++])) > 15
+											|| (c4 = ScannerHelper.getHexadecimalValue(this.source[index++])) > 15
 											|| c4 < 0) {
 											this.currentPosition = index;
 											throw new InvalidInputException(INVALID_UNICODE_ESCAPE);
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java
index ba7d9a0..6718cb3 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/AbstractCommentParser.java
@@ -1354,9 +1354,10 @@ public abstract class AbstractCommentParser implements JavadocTagConstants {
 			idx++;
 			while (this.source[idx] == 'u')
 				idx++;
-			if (!(((c1 = ScannerHelper.getNumericValue(this.source[idx++])) > 15 || c1 < 0)
-					|| ((c2 = ScannerHelper.getNumericValue(this.source[idx++])) > 15 || c2 < 0)
-					|| ((c3 = ScannerHelper.getNumericValue(this.source[idx++])) > 15 || c3 < 0) || ((c4 = ScannerHelper.getNumericValue(this.source[idx++])) > 15 || c4 < 0))) {
+			if (!(((c1 = ScannerHelper.getHexadecimalValue(this.source[idx++])) > 15 || c1 < 0)
+					|| ((c2 = ScannerHelper.getHexadecimalValue(this.source[idx++])) > 15 || c2 < 0)
+					|| ((c3 = ScannerHelper.getHexadecimalValue(this.source[idx++])) > 15 || c3 < 0)
+					|| ((c4 = ScannerHelper.getHexadecimalValue(this.source[idx++])) > 15 || c4 < 0))) {
 				c = (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);
 			}
 		}
@@ -1473,9 +1474,10 @@ public abstract class AbstractCommentParser implements JavadocTagConstants {
 			this.index++;
 			while (this.source[this.index] == 'u')
 				this.index++;
-			if (!(((c1 = ScannerHelper.getNumericValue(this.source[this.index++])) > 15 || c1 < 0)
-					|| ((c2 = ScannerHelper.getNumericValue(this.source[this.index++])) > 15 || c2 < 0)
-					|| ((c3 = ScannerHelper.getNumericValue(this.source[this.index++])) > 15 || c3 < 0) || ((c4 = ScannerHelper.getNumericValue(this.source[this.index++])) > 15 || c4 < 0))) {
+			if (!(((c1 = ScannerHelper.getHexadecimalValue(this.source[this.index++])) > 15 || c1 < 0)
+					|| ((c2 = ScannerHelper.getHexadecimalValue(this.source[this.index++])) > 15 || c2 < 0)
+					|| ((c3 = ScannerHelper.getHexadecimalValue(this.source[this.index++])) > 15 || c3 < 0)
+					|| ((c4 = ScannerHelper.getHexadecimalValue(this.source[this.index++])) > 15 || c4 < 0))) {
 				c = (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);
 			} else {
 				// TODO (frederic) currently reset to previous position, perhaps signal a syntax error would be more appropriate
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java
index b729329..699af71 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/JavadocParser.java
@@ -385,9 +385,10 @@ public class JavadocParser extends AbstractCommentParser {
 			this.index++;
 			while (this.source[this.index] == 'u')
 				this.index++;
-			if (!(((c1 = ScannerHelper.getNumericValue(this.source[this.index++])) > 15 || c1 < 0)
-					|| ((c2 = ScannerHelper.getNumericValue(this.source[this.index++])) > 15 || c2 < 0)
-					|| ((c3 = ScannerHelper.getNumericValue(this.source[this.index++])) > 15 || c3 < 0) || ((c4 = ScannerHelper.getNumericValue(this.source[this.index++])) > 15 || c4 < 0))) {
+			if (!(((c1 = ScannerHelper.getHexadecimalValue(this.source[this.index++])) > 15 || c1 < 0)
+					|| ((c2 = ScannerHelper.getHexadecimalValue(this.source[this.index++])) > 15 || c2 < 0)
+					|| ((c3 = ScannerHelper.getHexadecimalValue(this.source[this.index++])) > 15 || c3 < 0)
+					|| ((c4 = ScannerHelper.getHexadecimalValue(this.source[this.index++])) > 15 || c4 < 0))) {
 				first = (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);
 			} else {
 				this.index = pos;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java
index 741e8fa..7646bc4 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java
@@ -2993,13 +2993,13 @@ protected void consumeEmptyStatement() {
 				pos--;
 			}
 			if (source[pos] == '\\' &&
-					!((c1 = ScannerHelper.getNumericValue(source[this.endStatementPosition - 3])) > 15
+					!((c1 = ScannerHelper.getHexadecimalValue(source[this.endStatementPosition - 3])) > 15
 						|| c1 < 0
-						|| (c2 = ScannerHelper.getNumericValue(source[this.endStatementPosition - 2])) > 15
+						|| (c2 = ScannerHelper.getHexadecimalValue(source[this.endStatementPosition - 2])) > 15
 						|| c2 < 0
-						|| (c3 = ScannerHelper.getNumericValue(source[this.endStatementPosition - 1])) > 15
+						|| (c3 = ScannerHelper.getHexadecimalValue(source[this.endStatementPosition - 1])) > 15
 						|| c3 < 0
-						|| (c4 = ScannerHelper.getNumericValue(source[this.endStatementPosition])) > 15
+						|| (c4 = ScannerHelper.getHexadecimalValue(source[this.endStatementPosition])) > 15
 						|| c4 < 0) &&
 					((char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4)) == ';'){
 				// we have a Unicode for the ';' (/u003B)
@@ -8852,11 +8852,11 @@ public void getMethodBodies(CompilationUnitDeclaration unit) {
 				int c1, c2, c3, c4;
 				index[0]++;
 				while (comment[index[0]] == 'u') index[0]++;
-				if (!(((c1 = ScannerHelper.getNumericValue(comment[index[0]++])) > 15
+				if (!(((c1 = ScannerHelper.getHexadecimalValue(comment[index[0]++])) > 15
 					|| c1 < 0)
-					|| ((c2 = ScannerHelper.getNumericValue(comment[index[0]++])) > 15 || c2 < 0)
-					|| ((c3 = ScannerHelper.getNumericValue(comment[index[0]++])) > 15 || c3 < 0)
-					|| ((c4 = ScannerHelper.getNumericValue(comment[index[0]++])) > 15 || c4 < 0))) {
+					|| ((c2 = ScannerHelper.getHexadecimalValue(comment[index[0]++])) > 15 || c2 < 0)
+					|| ((c3 = ScannerHelper.getHexadecimalValue(comment[index[0]++])) > 15 || c3 < 0)
+					|| ((c4 = ScannerHelper.getHexadecimalValue(comment[index[0]++])) > 15 || c4 < 0))) {
 						nextCharacter = (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);
 				}
 				break;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java
index d152a23..26d3599 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java
@@ -1819,13 +1819,13 @@ public void getNextUnicodeChar()
 		this.currentPosition += (this.eofPosition - this.currentPosition);
 		throw new InvalidInputException(INVALID_UNICODE_ESCAPE);
 	}
-	if ((c1 = ScannerHelper.getNumericValue(this.source[this.currentPosition++])) > 15
+	if ((c1 = ScannerHelper.getHexadecimalValue(this.source[this.currentPosition++])) > 15
     		|| c1 < 0
-    		|| (c2 = ScannerHelper.getNumericValue(this.source[this.currentPosition++])) > 15
+    		|| (c2 = ScannerHelper.getHexadecimalValue(this.source[this.currentPosition++])) > 15
     		|| c2 < 0
-    		|| (c3 = ScannerHelper.getNumericValue(this.source[this.currentPosition++])) > 15
+    		|| (c3 = ScannerHelper.getHexadecimalValue(this.source[this.currentPosition++])) > 15
     		|| c3 < 0
-    		|| (c4 = ScannerHelper.getNumericValue(this.source[this.currentPosition++])) > 15
+    		|| (c4 = ScannerHelper.getHexadecimalValue(this.source[this.currentPosition++])) > 15
     		|| c4 < 0){
 		throw new InvalidInputException(INVALID_UNICODE_ESCAPE);
 	}
@@ -2725,18 +2725,18 @@ protected final void scanEscapeCharacter() throws InvalidInputException {
 			// OctalDigit OctalDigit
 			// ZeroToThree OctalDigit OctalDigit
 
-			int number = ScannerHelper.getNumericValue(this.currentCharacter);
+			int number = ScannerHelper.getHexadecimalValue(this.currentCharacter);
 			if (number >= 0 && number <= 7) {
 				boolean zeroToThreeNot = number > 3;
 				if (ScannerHelper.isDigit(this.currentCharacter = this.source[this.currentPosition++])) {
-					int digit = ScannerHelper.getNumericValue(this.currentCharacter);
+					int digit = ScannerHelper.getHexadecimalValue(this.currentCharacter);
 					if (digit >= 0 && digit <= 7) {
 						number = (number * 8) + digit;
 						if (ScannerHelper.isDigit(this.currentCharacter = this.source[this.currentPosition++])) {
 							if (zeroToThreeNot) {// has read \NotZeroToThree OctalDigit Digit --> ignore last character
 								this.currentPosition--;
 							} else {
-								digit = ScannerHelper.getNumericValue(this.currentCharacter);
+								digit = ScannerHelper.getHexadecimalValue(this.currentCharacter);
 								if (digit >= 0 && digit <= 7){ // has read \ZeroToThree OctalDigit OctalDigit
 									number = (number * 8) + digit;
 								} else {// has read \ZeroToThree OctalDigit NonOctalDigit --> ignore last character
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/ScannerHelper.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/ScannerHelper.java
index 69c1107..4ee486e 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/ScannerHelper.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/ScannerHelper.java
@@ -475,6 +475,50 @@ public static int getNumericValue(char c) {
 	}
 	return Character.getNumericValue(c);
 }
+public static int getHexadecimalValue(char c) {
+	switch(c) {
+		case '0' :
+			return 0;
+		case '1' :
+			return 1;
+		case '2' :
+			return 2;
+		case '3' :
+			return 3;
+		case '4' :
+			return 4;
+		case '5' :
+			return 5;
+		case '6' :
+			return 6;
+		case '7' :
+			return 7;
+		case '8' :
+			return 8;
+		case '9' :
+			return 9;
+		case 'A' :
+		case 'a' :
+			return 10;
+		case 'B' :
+		case 'b' :
+			return 11;
+		case 'C' :
+		case 'c' :
+			return 12;
+		case 'D' :
+		case 'd' :
+			return 13;
+		case 'E' :
+		case 'e' :
+			return 14;
+		case 'F' :
+		case 'f' :
+			return 15;
+		default:
+			return -1;
+	}
+}
 public static char toUpperCase(char c) {
 	if (c < MAX_OBVIOUS) {
 		if ((ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[c] & ScannerHelper.C_UPPER_LETTER) != 0) {
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceJavadocParser.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceJavadocParser.java
index 6f96497..00461e7 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceJavadocParser.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/SourceJavadocParser.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2009 IBM Corporation and others.
+ * Copyright (c) 2000, 2011 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -93,10 +93,10 @@ protected void parseSimpleTag() {
 		this.index++;
 		while (this.source[this.index] == 'u')
 			this.index++;
-		if (!(((c1 = ScannerHelper.getNumericValue(this.source[this.index++])) > 15 || c1 < 0)
-				|| ((c2 = ScannerHelper.getNumericValue(this.source[this.index++])) > 15 || c2 < 0)
-				|| ((c3 = ScannerHelper.getNumericValue(this.source[this.index++])) > 15 || c3 < 0)
-				|| ((c4 = ScannerHelper.getNumericValue(this.source[this.index++])) > 15 || c4 < 0))) {
+		if (!(((c1 = ScannerHelper.getHexadecimalValue(this.source[this.index++])) > 15 || c1 < 0)
+				|| ((c2 = ScannerHelper.getHexadecimalValue(this.source[this.index++])) > 15 || c2 < 0)
+				|| ((c3 = ScannerHelper.getHexadecimalValue(this.source[this.index++])) > 15 || c3 < 0)
+				|| ((c4 = ScannerHelper.getHexadecimalValue(this.source[this.index++])) > 15 || c4 < 0))) {
 			first = (char) (((c1 * 16 + c2) * 16 + c3) * 16 + c4);
 		} else {
 			this.index = pos;
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java
index db2eade..92cc37e 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PublicScanner.java
@@ -1817,13 +1817,13 @@ public void getNextUnicodeChar()
 		this.currentPosition += (this.eofPosition - this.currentPosition);
 		throw new InvalidInputException(INVALID_UNICODE_ESCAPE);
 	}
-	if ((c1 = ScannerHelper.getNumericValue(this.source[this.currentPosition++])) > 15
+	if ((c1 = ScannerHelper.getHexadecimalValue(this.source[this.currentPosition++])) > 15
     		|| c1 < 0
-    		|| (c2 = ScannerHelper.getNumericValue(this.source[this.currentPosition++])) > 15
+    		|| (c2 = ScannerHelper.getHexadecimalValue(this.source[this.currentPosition++])) > 15
     		|| c2 < 0
-    		|| (c3 = ScannerHelper.getNumericValue(this.source[this.currentPosition++])) > 15
+    		|| (c3 = ScannerHelper.getHexadecimalValue(this.source[this.currentPosition++])) > 15
     		|| c3 < 0
-    		|| (c4 = ScannerHelper.getNumericValue(this.source[this.currentPosition++])) > 15
+    		|| (c4 = ScannerHelper.getHexadecimalValue(this.source[this.currentPosition++])) > 15
     		|| c4 < 0){
 		throw new InvalidInputException(INVALID_UNICODE_ESCAPE);
 	}
@@ -2723,18 +2723,18 @@ protected final void scanEscapeCharacter() throws InvalidInputException {
 			// OctalDigit OctalDigit
 			// ZeroToThree OctalDigit OctalDigit
 
-			int number = ScannerHelper.getNumericValue(this.currentCharacter);
+			int number = ScannerHelper.getHexadecimalValue(this.currentCharacter);
 			if (number >= 0 && number <= 7) {
 				boolean zeroToThreeNot = number > 3;
 				if (ScannerHelper.isDigit(this.currentCharacter = this.source[this.currentPosition++])) {
-					int digit = ScannerHelper.getNumericValue(this.currentCharacter);
+					int digit = ScannerHelper.getHexadecimalValue(this.currentCharacter);
 					if (digit >= 0 && digit <= 7) {
 						number = (number * 8) + digit;
 						if (ScannerHelper.isDigit(this.currentCharacter = this.source[this.currentPosition++])) {
 							if (zeroToThreeNot) {// has read \NotZeroToThree OctalDigit Digit --> ignore last character
 								this.currentPosition--;
 							} else {
-								digit = ScannerHelper.getNumericValue(this.currentCharacter);
+								digit = ScannerHelper.getHexadecimalValue(this.currentCharacter);
 								if (digit >= 0 && digit <= 7){ // has read \ZeroToThree OctalDigit OctalDigit
 									number = (number * 8) + digit;
 								} else {// has read \ZeroToThree OctalDigit NonOctalDigit --> ignore last character

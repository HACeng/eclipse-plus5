commit 9d4deb39cd596c4aac108a1983a0ab5432be976e
Author: ssankaran <srikanth_sankaran@in.ibm.com>
Date:   Mon Nov 11 23:47:41 2013 +0530

    Fixed Bug 421473 - [1.8][compiler] Delayed assignment of declaring
    scope for arguments creates a race condition.

-	-	org.eclipse.jdt.compiler.apt.tests/lib/apttestprocessors.jar
35	1	org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/Java8ElementProcessor.java
17	0	org.eclipse.jdt.compiler.apt.tests/resources/targets/model8/InterfaceTest.java
17	0	org.eclipse.jdt.compiler.apt.tests/resources/targets/model8/a/TypeParameterTest.java
28	8	org.eclipse.jdt.compiler.apt.tests/src/org/eclipse/jdt/compiler/apt/tests/Java8ElementsTests.java
7	0	org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/lookup/AptSourceLocalVariableBinding.java
2	3	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Argument.java
7	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalVariableBinding.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java
diff --git a/org.eclipse.jdt.compiler.apt.tests/lib/apttestprocessors.jar b/org.eclipse.jdt.compiler.apt.tests/lib/apttestprocessors.jar
index cda4227..e3fc283 100644
Binary files a/org.eclipse.jdt.compiler.apt.tests/lib/apttestprocessors.jar and b/org.eclipse.jdt.compiler.apt.tests/lib/apttestprocessors.jar differ
diff --git a/org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/Java8ElementProcessor.java b/org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/Java8ElementProcessor.java
index 4d380be..df5b3bd 100644
--- a/org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/Java8ElementProcessor.java
+++ b/org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/Java8ElementProcessor.java
@@ -61,7 +61,8 @@ import org.eclipse.jdt.compiler.apt.tests.processors.base.BaseProcessor;
  * -Aorg.eclipse.jdt.compiler.apt.tests.processors.elements.Java8ElementProcessor to the command line.
  * @since 3.9 BETA_JAVA8
  */
-@SupportedAnnotationTypes({"org.eclipse.jdt.compiler.apt.tests.annotations.Type", "org.eclipse.jdt.compiler.apt.tests.annotations.Type$1", 
+@SupportedAnnotationTypes({"targets.model8.TypeAnnot",
+							"org.eclipse.jdt.compiler.apt.tests.annotations.Type", "org.eclipse.jdt.compiler.apt.tests.annotations.Type$1", 
 	                       "org.eclipse.jdt.compiler.apt.tests.annotations.Foo", "org.eclipse.jdt.compiler.apt.tests.annotations.FooContainer",
 	                       "org.eclipse.jdt.compiler.apt.tests.annotations.IFoo", "org.eclipse.jdt.compiler.apt.tests.annotations.IFooContainer",
 	                       "org.eclipse.jdt.compiler.apt.tests.annotations.Goo", "org.eclipse.jdt.compiler.apt.tests.annotations.GooNonContainer",
@@ -155,6 +156,8 @@ public class Java8ElementProcessor extends BaseProcessor {
 		testTypeAnnotations23();
 		testRepeatedAnnotations24();
 		testRepeatedAnnotations25();
+		testTypeAnnotations26();
+		testTypeAnnotations27();
 	}
 	
 	public void testLambdaSpecifics() {
@@ -895,6 +898,37 @@ public class Java8ElementProcessor extends BaseProcessor {
 		assertTrue("Should be equals", annotationOnJep7.equals(annotationOnSubclass));
 	}
 	
+	public void testTypeAnnotations26() {
+		TypeElement annotatedType = _elementUtils.getTypeElement("targets.model8.Iface");
+		List<? extends Element> members = _elementUtils.getAllMembers(annotatedType);
+		ExecutableElement method = null;
+		for (Element member : members) {
+			if ("foo".equals(member.getSimpleName().toString())) {
+				method = (ExecutableElement) member;
+				
+				List<? extends VariableElement> list = method.getParameters();
+				VariableElement param = list.get(0);
+				verifyAnnotations(param, new String[]{});
+			}
+		}
+	}
+	
+	public void testTypeAnnotations27() {
+		TypeElement annotatedType = _elementUtils.getTypeElement("targets.model8.a.Test");
+		List<? extends Element> members = _elementUtils.getAllMembers(annotatedType);
+		for (Element member : members) {
+			if ("foo".equals(member.getSimpleName().toString())) {
+				ExecutableElement method = (ExecutableElement) member;
+				
+				List<? extends TypeParameterElement> list = method.getTypeParameters();
+				TypeParameterElement tParam = list.get(0);
+				verifyAnnotations(tParam, new String[]{"@MarkerContainer(value=[@targets.model8.a.Marker, @targets.model8.a.Marker])"});
+			}
+		}
+		
+	}
+	
+	
 	private String getExceptionStackTrace(Throwable t) {
 		StringBuffer buf = new StringBuffer(t.getMessage());
 		StackTraceElement[] traces = t.getStackTrace();
diff --git a/org.eclipse.jdt.compiler.apt.tests/resources/targets/model8/InterfaceTest.java b/org.eclipse.jdt.compiler.apt.tests/resources/targets/model8/InterfaceTest.java
new file mode 100644
index 0000000..53b1fde
--- /dev/null
+++ b/org.eclipse.jdt.compiler.apt.tests/resources/targets/model8/InterfaceTest.java
@@ -0,0 +1,17 @@
+package targets.model8;
+import java.lang.annotation.Target;
+import java.lang.annotation.ElementType;
+
+@Target({ElementType.TYPE_USE}) @interface TypeAnnot {} 
+
+interface Iface {
+	static void foo(@TypeAnnot int i) {}
+}
+
+public class InterfaceTest implements Iface {
+
+    public static void main(String[] argv) {
+    	Iface.foo(10);
+    }
+}
+
diff --git a/org.eclipse.jdt.compiler.apt.tests/resources/targets/model8/a/TypeParameterTest.java b/org.eclipse.jdt.compiler.apt.tests/resources/targets/model8/a/TypeParameterTest.java
new file mode 100644
index 0000000..b2f934b
--- /dev/null
+++ b/org.eclipse.jdt.compiler.apt.tests/resources/targets/model8/a/TypeParameterTest.java
@@ -0,0 +1,17 @@
+package targets.model8.a;
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Target;
+import java.lang.annotation.Repeatable;
+
+
+@Target({ElementType.TYPE_USE, ElementType.TYPE_PARAMETER }) @interface MarkerContainer {Marker[] value();}
+@Repeatable(MarkerContainer .class)
+@Target({ElementType.TYPE_USE, ElementType.TYPE_PARAMETER }) @interface Marker {}
+
+
+class Test {
+     <@Marker() @Marker() T> T foo()  { return null; }
+}
+
+public class TypeParameterTest  {
+}
diff --git a/org.eclipse.jdt.compiler.apt.tests/src/org/eclipse/jdt/compiler/apt/tests/Java8ElementsTests.java b/org.eclipse.jdt.compiler.apt.tests/src/org/eclipse/jdt/compiler/apt/tests/Java8ElementsTests.java
index ee6cd53..c6d9b1b 100644
--- a/org.eclipse.jdt.compiler.apt.tests/src/org/eclipse/jdt/compiler/apt/tests/Java8ElementsTests.java
+++ b/org.eclipse.jdt.compiler.apt.tests/src/org/eclipse/jdt/compiler/apt/tests/Java8ElementsTests.java
@@ -48,7 +48,7 @@ public class Java8ElementsTests extends TestCase {
 		JavaCompiler compiler = BatchTestUtils.getEclipseCompiler();
 		internalTest(compiler, JAVA8_ANNOTATION_PROC, "testSE8Specifics");
 	}
-	public void testSE8SpecificsWithJavac() throws Exception {
+	public void _testSE8SpecificsWithJavac() throws Exception {
 		JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
 		internalTest(compiler, JAVA8_ANNOTATION_PROC, "testSE8Specifics");
 	}
@@ -64,7 +64,7 @@ public class Java8ElementsTests extends TestCase {
 		JavaCompiler compiler = BatchTestUtils.getEclipseCompiler();
 		internalTest(compiler, JAVA8_ANNOTATION_PROC, "testTypeAnnotations");
 	}
-	public void testTypeAnnotationsWithJavac() throws Exception {
+	public void _testTypeAnnotationsWithJavac() throws Exception {
 		JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
 		internalTest(compiler, JAVA8_ANNOTATION_PROC, "testTypeAnnotations");
 	}
@@ -80,7 +80,7 @@ public class Java8ElementsTests extends TestCase {
 		JavaCompiler compiler = BatchTestUtils.getEclipseCompiler();
 		internalTest(compiler, JAVA8_ANNOTATION_PROC, "testTypeAnnotations2");
 	}
-	public void testTypeAnnotations2WithJavac() throws Exception {
+	public void _testTypeAnnotations2WithJavac() throws Exception {
 		JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
 		internalTest(compiler, JAVA8_ANNOTATION_PROC, "testTypeAnnotations2");
 	}
@@ -88,7 +88,7 @@ public class Java8ElementsTests extends TestCase {
 		JavaCompiler compiler = BatchTestUtils.getEclipseCompiler();
 		internalTest(compiler, JAVA8_ANNOTATION_PROC, "testTypeAnnotations3");
 	}
-	public void testTypeAnnotations3WithJavac() throws Exception {
+	public void _testTypeAnnotations3WithJavac() throws Exception {
 		JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
 		internalTest(compiler, JAVA8_ANNOTATION_PROC, "testTypeAnnotations3");
 	}
@@ -96,7 +96,7 @@ public class Java8ElementsTests extends TestCase {
 		JavaCompiler compiler = BatchTestUtils.getEclipseCompiler();
 		internalTest(compiler, JAVA8_ANNOTATION_PROC, "testTypeAnnotations4");
 	}
-	public void testTypeAnnotations4WithJavac() throws Exception {
+	public void _testTypeAnnotations4WithJavac() throws Exception {
 		JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
 		internalTest(compiler, JAVA8_ANNOTATION_PROC, "testTypeAnnotations4");
 	}
@@ -104,7 +104,7 @@ public class Java8ElementsTests extends TestCase {
 		JavaCompiler compiler = BatchTestUtils.getEclipseCompiler();
 		internalTest(compiler, JAVA8_ANNOTATION_PROC, "testTypeAnnotations5");
 	}
-	public void testTypeAnnotations5WithJavac() throws Exception {
+	public void _testTypeAnnotations5WithJavac() throws Exception {
 		JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
 		internalTest(compiler, JAVA8_ANNOTATION_PROC, "testTypeAnnotations5");
 	}
@@ -136,7 +136,7 @@ public class Java8ElementsTests extends TestCase {
 		JavaCompiler compiler = BatchTestUtils.getEclipseCompiler();
 		internalTest(compiler, JAVA8_ANNOTATION_PROC, "testTypeAnnotations9");
 	}
-	public void testTypeAnnotations9WithJavac() throws Exception {
+	public void _testTypeAnnotations9WithJavac() throws Exception {
 		JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
 		internalTest(compiler, JAVA8_ANNOTATION_PROC, "testTypeAnnotations9");
 	}
@@ -152,7 +152,7 @@ public class Java8ElementsTests extends TestCase {
 		JavaCompiler compiler = BatchTestUtils.getEclipseCompiler();
 		internalTest(compiler, JAVA8_ANNOTATION_PROC, "testTypeAnnotations11");
 	}
-	public void testTypeAnnotations11WithJavac() throws Exception {
+	public void _testTypeAnnotations11WithJavac() throws Exception {
 		JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
 		internalTest(compiler, JAVA8_ANNOTATION_PROC, "testTypeAnnotations11");
 	}
@@ -278,6 +278,26 @@ public class Java8ElementsTests extends TestCase {
 		internalTest(compiler, JAVA8_ANNOTATION_PROC, "testRepeatedAnnotations25", "JEP120_7.java");
 	}
 
+	public void testTypeAnnotations26() throws Exception {
+		JavaCompiler compiler = BatchTestUtils.getEclipseCompiler();
+		internalTest(compiler, JAVA8_ANNOTATION_PROC, "testTypeAnnotations26");
+	}
+
+	public void testTypeAnnotations26WithJavac() throws Exception {
+		JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
+		internalTest(compiler, JAVA8_ANNOTATION_PROC, "testTypeAnnotations26");
+	}
+	
+	public void testTypeAnnotations27() throws Exception {
+		JavaCompiler compiler = BatchTestUtils.getEclipseCompiler();
+		internalTest(compiler, JAVA8_ANNOTATION_PROC, "testTypeAnnotations27");
+	}
+	
+	public void _testTypeAnnotations27WithJavac() throws Exception {
+		JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
+		internalTest(compiler, JAVA8_ANNOTATION_PROC, "testTypeAnnotations27");
+	}
+	
 	private void internalTest(JavaCompiler compiler, String processor, String testMethod) throws IOException {
 		internalTest(compiler, processor, testMethod, null);
 	}
diff --git a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/lookup/AptSourceLocalVariableBinding.java b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/lookup/AptSourceLocalVariableBinding.java
index f9039e6..81441c8 100644
--- a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/lookup/AptSourceLocalVariableBinding.java
+++ b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/lookup/AptSourceLocalVariableBinding.java
@@ -14,6 +14,7 @@ public class AptSourceLocalVariableBinding extends LocalVariableBinding {
 
 	// enclosing element
 	public MethodBinding methodBinding;
+	private LocalVariableBinding local;
 	
 	public AptSourceLocalVariableBinding(LocalVariableBinding localVariableBinding, MethodBinding methodBinding) {
 		super(localVariableBinding.name, localVariableBinding.type, localVariableBinding.modifiers, true);
@@ -27,5 +28,11 @@ public class AptSourceLocalVariableBinding extends LocalVariableBinding {
 		this.initializationCount = localVariableBinding.initializationCount;
 		this.initializationPCs = localVariableBinding.initializationPCs;
 		this.methodBinding = methodBinding;
+		this.local = localVariableBinding;
+	}
+	
+	@Override
+	public AnnotationBinding[] getAnnotations() {
+		return this.local.getAnnotations();
 	}
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java
index 4ecd3ce..3dd2a47 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java
@@ -800,9 +800,6 @@ public abstract class ASTNode implements TypeConstants, TypeIds {
 			}
 		}
 
-		if (copySE8AnnotationsToType)
-			copySE8AnnotationsToType(scope, recipient, sourceAnnotations);
-
 		/* See if the recipient is meta-annotated with @Repeatable and if so validate constraints. We can't do this during resolution of @Repeatable itself as @Target and 
 		   @Retention etc could come later
 		*/   
@@ -870,6 +867,8 @@ public abstract class ASTNode implements TypeConstants, TypeIds {
 				}
 			}
 		}
+		if (copySE8AnnotationsToType)
+			copySE8AnnotationsToType(scope, recipient, sourceAnnotations);
 		return annotations;
 	}
 	
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Argument.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Argument.java
index b447a4e..b46a2c4 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Argument.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Argument.java
@@ -58,7 +58,7 @@ public class Argument extends LocalDeclaration {
 	public TypeBinding createBinding(MethodScope scope, TypeBinding typeBinding) {
 		if (this.binding == null) {
 			// for default constructors and fake implementation of abstract methods 
-			this.binding = new LocalVariableBinding(this, typeBinding, this.modifiers, true /*isArgument*/);
+			this.binding = new LocalVariableBinding(this, typeBinding, this.modifiers, scope);
 		} else if (!this.binding.type.isValidBinding()) {
 			AbstractMethodDeclaration methodDecl = scope.referenceMethod();
 			if (methodDecl != null) {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalVariableBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalVariableBinding.java
index e02314f..451fbc6 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalVariableBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LocalVariableBinding.java
@@ -63,6 +63,13 @@ public class LocalVariableBinding extends VariableBinding {
 		this.declaration = declaration;
 		this.tagBits |= TagBits.IsEffectivelyFinal;
 	}
+	
+	// argument
+	public LocalVariableBinding(LocalDeclaration declaration, TypeBinding type, int modifiers, MethodScope declaringScope) {
+
+		this(declaration, type, modifiers, true);
+		this.declaringScope = declaringScope;
+	}
 
 	/* API
 	* Answer the receiver's binding type from Binding.BindingID.
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java
index 19b4220..58b84ac 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java
@@ -1846,7 +1846,7 @@ public MethodBinding resolveTypesFor(MethodBinding method) {
 				if (leafType instanceof ReferenceBinding && (((ReferenceBinding) leafType).modifiers & ExtraCompilerModifiers.AccGenericSignature) != 0)
 					method.modifiers |= ExtraCompilerModifiers.AccGenericSignature;
 				newParameters[i] = parameterType;
-				arg.binding = new LocalVariableBinding(arg, parameterType, arg.modifiers, true /*isArgument*/);
+				arg.binding = new LocalVariableBinding(arg, parameterType, arg.modifiers, methodDecl.scope);
 			}
 		}
 		// only assign parameters if no problems are found

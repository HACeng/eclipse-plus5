commit e877d064b04747bbafa04391a87e31df3c17a315
Author: Walter Harley <wharley>
Date:   Mon Mar 2 06:29:33 2009 +0000

    Bug 261600 - support AnnotationMirror and AnnotationValue parameters in Messager

1	1	org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/dispatch/IdeMessagerImpl.java
41	1	org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BaseMessagerImpl.java
1	2	org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BatchMessagerImpl.java
51	0	org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/AnnotationMemberValue.java
3	3	org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/AnnotationMirrorImpl.java
1	1	org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ExecutableElementImpl.java
diff --git a/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/dispatch/IdeMessagerImpl.java b/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/dispatch/IdeMessagerImpl.java
index 12b095a..3bb11d2 100644
--- a/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/dispatch/IdeMessagerImpl.java
+++ b/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/dispatch/IdeMessagerImpl.java
@@ -72,7 +72,7 @@ public class IdeMessagerImpl implements Messager {
 	 */
 	public void printMessage(Kind kind, CharSequence msg, Element e, AnnotationMirror a,
 			AnnotationValue v) {
-		AptProblem problem = BatchMessagerImpl.createProblem(kind, msg, e);
+		AptProblem problem = BatchMessagerImpl.createProblem(kind, msg, e, a, v);
 		if (kind == Kind.NOTE) {
 			Apt6Plugin.log(new Status(IStatus.INFO, Apt6Plugin.PLUGIN_ID, Apt6Plugin.STATUS_EXCEPTION, problem.getMessage(), null));
 		}
diff --git a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BaseMessagerImpl.java b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BaseMessagerImpl.java
index 49d49b9..5293313 100644
--- a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BaseMessagerImpl.java
+++ b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BaseMessagerImpl.java
@@ -11,18 +11,25 @@
  *******************************************************************************/
 package org.eclipse.jdt.internal.compiler.apt.dispatch;
 
+import javax.lang.model.element.AnnotationMirror;
+import javax.lang.model.element.AnnotationValue;
 import javax.lang.model.element.Element;
 import javax.tools.Diagnostic.Kind;
 
 import org.eclipse.jdt.internal.compiler.CompilationResult;
+import org.eclipse.jdt.internal.compiler.apt.model.AnnotationMemberValue;
+import org.eclipse.jdt.internal.compiler.apt.model.AnnotationMirrorImpl;
 import org.eclipse.jdt.internal.compiler.apt.model.ExecutableElementImpl;
 import org.eclipse.jdt.internal.compiler.apt.model.TypeElementImpl;
 import org.eclipse.jdt.internal.compiler.apt.model.VariableElementImpl;
 import org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;
+import org.eclipse.jdt.internal.compiler.ast.Annotation;
 import org.eclipse.jdt.internal.compiler.ast.FieldDeclaration;
 import org.eclipse.jdt.internal.compiler.ast.LocalDeclaration;
+import org.eclipse.jdt.internal.compiler.ast.MemberValuePair;
 import org.eclipse.jdt.internal.compiler.ast.TypeDeclaration;
 import org.eclipse.jdt.internal.compiler.impl.ReferenceContext;
+import org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding;
 import org.eclipse.jdt.internal.compiler.lookup.AptSourceLocalVariableBinding;
 import org.eclipse.jdt.internal.compiler.lookup.Binding;
 import org.eclipse.jdt.internal.compiler.lookup.FieldBinding;
@@ -44,8 +51,10 @@ public class BaseMessagerImpl {
 	 * and filename will be set to null.
 	 * @return
 	 */
-	public static AptProblem createProblem(Kind kind, CharSequence msg, Element e) {
+	public static AptProblem createProblem(Kind kind, CharSequence msg, Element e, 
+			AnnotationMirror a, AnnotationValue v) {
 		ReferenceContext referenceContext = null;
+		Annotation[] elementAnnotations = null;
 		int startPosition = 0;
 		int endPosition = 0;
 		if (e != null) {
@@ -60,6 +69,7 @@ public class BaseMessagerImpl {
 						SourceTypeBinding sourceTypeBinding = (SourceTypeBinding) typeBinding;
 						TypeDeclaration typeDeclaration = (TypeDeclaration) sourceTypeBinding.scope.referenceContext();
 						referenceContext = typeDeclaration;
+						elementAnnotations = typeDeclaration.annotations;
 						startPosition = typeDeclaration.sourceStart;
 						endPosition = typeDeclaration.sourceEnd;
 					}
@@ -76,6 +86,7 @@ public class BaseMessagerImpl {
 						AbstractMethodDeclaration sourceMethod = methodBinding.sourceMethod();
 						if (sourceMethod != null) {
 							referenceContext = sourceMethod;
+							elementAnnotations = sourceMethod.annotations;
 							startPosition = sourceMethod.sourceStart;
 							endPosition = sourceMethod.sourceEnd;
 						}
@@ -99,6 +110,7 @@ public class BaseMessagerImpl {
 								TypeDeclaration typeDeclaration = (TypeDeclaration) sourceTypeBinding.scope.referenceContext();
 								referenceContext = typeDeclaration;
 							}
+							elementAnnotations = fieldDeclaration.annotations;
 							startPosition = fieldDeclaration.sourceStart;
 							endPosition = fieldDeclaration.sourceEnd;
 						}
@@ -110,6 +122,7 @@ public class BaseMessagerImpl {
 							if (methodBinding != null) {
 								referenceContext = methodBinding.sourceMethod();
 							}
+							elementAnnotations = parameterDeclaration.annotations;
 							startPosition = parameterDeclaration.sourceStart;
 							endPosition = parameterDeclaration.sourceEnd;
 						}
@@ -127,6 +140,33 @@ public class BaseMessagerImpl {
 		if (msg != null) {
 			builder.append(msg);
 		}
+		if (a != null && elementAnnotations != null) {
+			AnnotationBinding annotationBinding = ((AnnotationMirrorImpl) a)._binding;
+			Annotation annotation = null;
+			for (int i = 0; annotation == null && i < elementAnnotations.length; i++) {
+				if (annotationBinding == elementAnnotations[i].getCompilerAnnotation()) {
+					annotation = elementAnnotations[i];
+				}
+			}
+			if (annotation != null) {
+				startPosition = annotation.sourceStart;
+				endPosition = annotation.sourceEnd;
+				if (v != null && v instanceof AnnotationMemberValue) {
+					MethodBinding methodBinding = ((AnnotationMemberValue) v).getMethodBinding();
+					MemberValuePair[] memberValuePairs = annotation.memberValuePairs();
+					MemberValuePair memberValuePair = null;
+					for (int i = 0; memberValuePair == null && i < memberValuePairs.length; i++) {
+						if (methodBinding == memberValuePairs[i].binding) {
+							memberValuePair = memberValuePairs[i];
+						}
+					}
+					if (memberValuePair != null) {
+						startPosition = memberValuePair.sourceStart;
+						endPosition = memberValuePair.sourceEnd;
+					}
+				}
+			}
+		}
 		int lineNumber = 0;
 		int columnNumber = 1;
 		char[] fileName = null;
diff --git a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BatchMessagerImpl.java b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BatchMessagerImpl.java
index 1d2fba3..34b1c81 100644
--- a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BatchMessagerImpl.java
+++ b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/BatchMessagerImpl.java
@@ -66,11 +66,10 @@ public class BatchMessagerImpl extends BaseMessagerImpl implements Messager {
 	@Override
 	public void printMessage(Kind kind, CharSequence msg, Element e,
 			AnnotationMirror a, AnnotationValue v) {
-		//TODO: we are currently ignoring 'a' and 'v'
 		if (kind == Kind.ERROR) {
 			_processingEnv.setErrorRaised(true);
 		}
-		CategorizedProblem problem = createProblem(kind, msg, e);
+		CategorizedProblem problem = createProblem(kind, msg, e, a, v);
 		if (problem != null) {
 			this._compiler.addExtraProblems(problem);
 		}
diff --git a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/AnnotationMemberValue.java b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/AnnotationMemberValue.java
new file mode 100644
index 0000000..9a90b33
--- /dev/null
+++ b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/AnnotationMemberValue.java
@@ -0,0 +1,51 @@
+/*******************************************************************************
+ * Copyright (c) 2009 Vladimir Piskarev and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     Vladimir Piskarev - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.jdt.internal.compiler.apt.model;
+
+import org.eclipse.jdt.internal.compiler.apt.dispatch.BaseProcessingEnvImpl;
+import org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding;
+import org.eclipse.jdt.internal.compiler.lookup.ElementValuePair;
+import org.eclipse.jdt.internal.compiler.lookup.FieldBinding;
+import org.eclipse.jdt.internal.compiler.lookup.MethodBinding;
+import org.eclipse.jdt.internal.compiler.lookup.TypeBinding;
+
+public class AnnotationMemberValue extends AnnotationValueImpl {
+
+	private final MethodBinding _methodBinding;
+	
+	/**
+	 * @param value
+	 *            The JDT representation of a compile-time constant. See
+	 *            {@link ElementValuePair#getValue()} for possible object types:
+	 *            <ul>
+	 *            <li>{@link org.eclipse.jdt.internal.compiler.impl.Constant} for member
+	 *            of primitive type or String</li>
+	 *            <li>{@link TypeBinding} for a member value of type
+	 *            {@link java.lang.Class}</li>
+	 *            <li>{@link FieldBinding} for an enum constant</li>
+	 *            <li>{@link AnnotationBinding} for an annotation instance</li>
+	 *            <li><code>Object[]</code> for a member value of array type, where the
+	 *            array entries are one of the above</li>
+	 *            </ul>
+	 * @param methodBinding the method binding that defined this member value pair
+	 */
+	public AnnotationMemberValue(BaseProcessingEnvImpl env, Object value, MethodBinding methodBinding) {
+		super(env, value, methodBinding.returnType);
+		_methodBinding = methodBinding;
+	}
+	
+	/**
+	 * @return the method binding that defined this member value pair.
+	 */
+	public MethodBinding getMethodBinding() {
+		return _methodBinding;
+	}
+}
diff --git a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/AnnotationMirrorImpl.java b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/AnnotationMirrorImpl.java
index 0594b13..78231ab 100644
--- a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/AnnotationMirrorImpl.java
+++ b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/AnnotationMirrorImpl.java
@@ -118,7 +118,7 @@ public class AnnotationMirrorImpl implements AnnotationMirror, InvocationHandler
 				continue;
 			}
 			ExecutableElement e = new ExecutableElementImpl(_env, method);
-			AnnotationValue v = new AnnotationValueImpl(_env, pair.getValue(), method.returnType);
+			AnnotationValue v = new AnnotationMemberValue(_env, pair.getValue(), method);
 			valueMap.put(e, v);
 		}
 		return Collections.unmodifiableMap(valueMap);
@@ -144,7 +144,7 @@ public class AnnotationMirrorImpl implements AnnotationMirror, InvocationHandler
 				MethodBinding explicitBinding = pairs[i].getMethodBinding();
 				if (method == explicitBinding) {
 					ExecutableElement e = new ExecutableElementImpl(_env, explicitBinding);
-					AnnotationValue v = new AnnotationValueImpl(_env, pairs[i].getValue(), explicitBinding.returnType);
+					AnnotationValue v = new AnnotationMemberValue(_env, pairs[i].getValue(), explicitBinding);
 					valueMap.put(e, v);
 					foundExplicitValue = true;
 					break;
@@ -155,7 +155,7 @@ public class AnnotationMirrorImpl implements AnnotationMirror, InvocationHandler
 				Object defaultVal = method.getDefaultValue();
 				if (null != defaultVal) {
 					ExecutableElement e = new ExecutableElementImpl(_env, method);
-					AnnotationValue v = new AnnotationValueImpl(_env, defaultVal, method.returnType);
+					AnnotationValue v = new AnnotationMemberValue(_env, defaultVal, method);
 					valueMap.put(e, v);
 				}
 			}
diff --git a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ExecutableElementImpl.java b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ExecutableElementImpl.java
index 0de2c7d..33b8241 100644
--- a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ExecutableElementImpl.java
+++ b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ExecutableElementImpl.java
@@ -69,7 +69,7 @@ public class ExecutableElementImpl extends ElementImpl implements
 	public AnnotationValue getDefaultValue() {
 		MethodBinding binding = (MethodBinding)_binding;
 		Object defaultValue = binding.getDefaultValue();
-		if (defaultValue != null) return new AnnotationValueImpl(_env, defaultValue, binding.returnType);
+		if (defaultValue != null) return new AnnotationMemberValue(_env, defaultValue, binding);
 		return null;
 	}
 	

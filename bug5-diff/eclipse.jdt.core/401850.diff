commit f74beb57e62e872a608b1d99069f6ffa51720699
Author: ssankaran <srikanth_sankaran@in.ibm.com>
Date:   Tue Nov 19 10:11:06 2013 +0530

    [1.8] Partial fix for Bug 401850 - [1.8][compiler] Compiler fails to
    type poly allocation expressions in method invocation contexts

142	81	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_7.java
65	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/OverloadResolutionTest8.java
22	12	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java
2	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedSingleTypeReference.java
1	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Binding.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeSystem.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_7.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_7.java
index c79521e..e7e8be1 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_7.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_7.java
@@ -12,6 +12,7 @@ package org.eclipse.jdt.core.tests.compiler.regression;
 
 import java.util.Map;
 
+import org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants;
 import org.eclipse.jdt.internal.compiler.impl.CompilerOptions;
 
 import junit.framework.Test;
@@ -134,48 +135,84 @@ public void test001c_1() {
 		"----------\n");
 }
 public void test001d() {
-	this.runNegativeTest(
-		new String[] {
-			"X.java",
-			"import java.util.ArrayList;\n" +
-			"public class X<T> {" +
-			"	public void ab(ArrayList<String> al){\n" + 
-			"		System.out.println(\"SUCCESS\");\n" +
-			"	}\n" + 
-			"	public static void main(String[] args) {\n" + 
-			"		X<String> x = new X<>();\n" + 
-			"		x.ab(new ArrayList<>());\n" + 
-			"	}\n" +
-			"}",
-		},
-		"----------\n" + 
-		"1. ERROR in X.java (at line 7)\n" + 
-		"	x.ab(new ArrayList<>());\n" + 
-		"	  ^^\n" + 
-		"The method ab(ArrayList<String>) in the type X<String> is not applicable for the arguments (ArrayList<Object>)\n" + 
-		"----------\n");
+	if (this.complianceLevel < ClassFileConstants.JDK1_8) {
+		this.runNegativeTest(
+			new String[] {
+				"X.java",
+				"import java.util.ArrayList;\n" +
+				"public class X<T> {" +
+				"	public void ab(ArrayList<String> al){\n" + 
+				"		System.out.println(\"SUCCESS\");\n" +
+				"	}\n" + 
+				"	public static void main(String[] args) {\n" + 
+				"		X<String> x = new X<>();\n" + 
+				"		x.ab(new ArrayList<>());\n" + 
+				"	}\n" +
+				"}",
+			},
+			"----------\n" + 
+			"1. ERROR in X.java (at line 7)\n" + 
+			"	x.ab(new ArrayList<>());\n" + 
+			"	  ^^\n" + 
+			"The method ab(ArrayList<String>) in the type X<String> is not applicable for the arguments (ArrayList<Object>)\n" + 
+			"----------\n");
+	} else {
+		this.runConformTest(
+				new String[] {
+					"X.java",
+					"import java.util.ArrayList;\n" +
+					"public class X<T> {" +
+					"	public void ab(ArrayList<String> al){\n" + 
+					"		System.out.println(\"SUCCESS\");\n" +
+					"	}\n" + 
+					"	public static void main(String[] args) {\n" + 
+					"		X<String> x = new X<>();\n" + 
+					"		x.ab(new ArrayList<>());\n" + 
+					"	}\n" +
+					"}",
+				},
+				"SUCCESS");
+	}
 }
 public void test001e() {
-	this.runNegativeTest(
-		new String[] {
-			"X.java",
-			"import java.util.ArrayList;\n" +
-			"public class X<T> {" +
-			"	public void ab(ArrayList<T> al){\n" + 
-			"		System.out.println(\"SUCCESS\");\n" +
-			"	}\n" + 
-			"	public static void main(String[] args) {\n" + 
-			"		X<String> x = new X<>();\n" + 
-			"		x.ab(new ArrayList<>());\n" + 
-			"	}\n" +
-			"}",
-		},
-		"----------\n" + 
-		"1. ERROR in X.java (at line 7)\n" + 
-		"	x.ab(new ArrayList<>());\n" + 
-		"	  ^^\n" + 
-		"The method ab(ArrayList<String>) in the type X<String> is not applicable for the arguments (ArrayList<Object>)\n" + 
-		"----------\n");
+	if (this.complianceLevel < ClassFileConstants.JDK1_8) {
+		this.runNegativeTest(
+			new String[] {
+				"X.java",
+				"import java.util.ArrayList;\n" +
+				"public class X<T> {" +
+				"	public void ab(ArrayList<T> al){\n" + 
+				"		System.out.println(\"SUCCESS\");\n" +
+				"	}\n" + 
+				"	public static void main(String[] args) {\n" + 
+				"		X<String> x = new X<>();\n" + 
+				"		x.ab(new ArrayList<>());\n" + 
+				"	}\n" +
+				"}",
+			},
+			"----------\n" + 
+			"1. ERROR in X.java (at line 7)\n" + 
+			"	x.ab(new ArrayList<>());\n" + 
+			"	  ^^\n" + 
+			"The method ab(ArrayList<String>) in the type X<String> is not applicable for the arguments (ArrayList<Object>)\n" + 
+			"----------\n");
+	} else {
+		this.runConformTest(
+				new String[] {
+					"X.java",
+					"import java.util.ArrayList;\n" +
+					"public class X<T> {" +
+					"	public void ab(ArrayList<T> al){\n" + 
+					"		System.out.println(\"SUCCESS\");\n" +
+					"	}\n" + 
+					"	public static void main(String[] args) {\n" + 
+					"		X<String> x = new X<>();\n" + 
+					"		x.ab(new ArrayList<>());\n" + 
+					"	}\n" +
+					"}",
+				},
+				"SUCCESS");
+	}
 }
 public void test001f() {
 	this.runNegativeTest(
@@ -533,45 +570,69 @@ public void test007() {
 		"2");
 }
 public void test007a() {
-	this.runNegativeTest(
-		new String[] {
-			"X.java",
-			"public class X<T> {\n" +
-			"	public X(){\n" +
-			"	}\n" +
-			"	public X(T param){\n" +
-			"		System.out.println(param);\n" +
-			"	}\n" +
-			"	public static void testFunction(X<String> param){\n" +
-			"		System.out.println(\"SUCCESS\");\n" +
-			"	}\n" +
-			"	public static void main(String[] args) {\n" + 
-			"		X.testFunction(new X<>());\n" + 
-			"		X.testFunction(new X(\"hello\"));\n" +
-			"	}\n" +
-			"}",
-		},
-		"----------\n" + 
-		"1. ERROR in X.java (at line 11)\n" + 
-		"	X.testFunction(new X<>());\n" + 
-		"	  ^^^^^^^^^^^^\n" + 
-		"The method testFunction(X<String>) in the type X is not applicable for the arguments (X<Object>)\n" + 
-		"----------\n" + 
-		"2. WARNING in X.java (at line 12)\n" + 
-		"	X.testFunction(new X(\"hello\"));\n" + 
-		"	               ^^^^^^^^^^^^^^\n" + 
-		"Type safety: The constructor X(Object) belongs to the raw type X. References to generic type X<T> should be parameterized\n" + 
-		"----------\n" + 
-		"3. WARNING in X.java (at line 12)\n" + 
-		"	X.testFunction(new X(\"hello\"));\n" + 
-		"	               ^^^^^^^^^^^^^^\n" + 
-		"Type safety: The expression of type X needs unchecked conversion to conform to X<String>\n" + 
-		"----------\n" + 
-		"4. WARNING in X.java (at line 12)\n" + 
-		"	X.testFunction(new X(\"hello\"));\n" + 
-		"	                   ^\n" + 
-		"X is a raw type. References to generic type X<T> should be parameterized\n" + 
-		"----------\n");
+	if (this.complianceLevel < ClassFileConstants.JDK1_8) {
+		this.runNegativeTest(
+			new String[] {
+				"X.java",
+				"public class X<T> {\n" +
+				"	public X(){\n" +
+				"	}\n" +
+				"	public X(T param){\n" +
+				"		System.out.println(param);\n" +
+				"	}\n" +
+				"	public static void testFunction(X<String> param){\n" +
+				"		System.out.println(\"SUCCESS\");\n" +
+				"	}\n" +
+				"	public static void main(String[] args) {\n" + 
+				"		X.testFunction(new X<>());\n" + 
+				"		X.testFunction(new X(\"hello\"));\n" +
+				"	}\n" +
+				"}",
+			},
+			"----------\n" + 
+			"1. ERROR in X.java (at line 11)\n" + 
+			"	X.testFunction(new X<>());\n" + 
+			"	  ^^^^^^^^^^^^\n" + 
+			"The method testFunction(X<String>) in the type X is not applicable for the arguments (X<Object>)\n" + 
+			"----------\n" + 
+			"2. WARNING in X.java (at line 12)\n" + 
+			"	X.testFunction(new X(\"hello\"));\n" + 
+			"	               ^^^^^^^^^^^^^^\n" + 
+			"Type safety: The constructor X(Object) belongs to the raw type X. References to generic type X<T> should be parameterized\n" + 
+			"----------\n" + 
+			"3. WARNING in X.java (at line 12)\n" + 
+			"	X.testFunction(new X(\"hello\"));\n" + 
+			"	               ^^^^^^^^^^^^^^\n" + 
+			"Type safety: The expression of type X needs unchecked conversion to conform to X<String>\n" + 
+			"----------\n" + 
+			"4. WARNING in X.java (at line 12)\n" + 
+			"	X.testFunction(new X(\"hello\"));\n" + 
+			"	                   ^\n" + 
+			"X is a raw type. References to generic type X<T> should be parameterized\n" + 
+			"----------\n");
+	} else {
+		this.runConformTest(
+				new String[] {
+					"X.java",
+					"public class X<T> {\n" +
+					"	public X(){\n" +
+					"	}\n" +
+					"	public X(T param){\n" +
+					"		System.out.println(param);\n" +
+					"	}\n" +
+					"	public static void testFunction(X<String> param){\n" +
+					"		System.out.println(\"SUCCESS\");\n" +
+					"	}\n" +
+					"	public static void main(String[] args) {\n" + 
+					"		X.testFunction(new X<>());\n" + 
+					"		X.testFunction(new X(\"hello\"));\n" +
+					"	}\n" +
+					"}",
+				},
+				"SUCCESS\n" + 
+				"hello\n" + 
+				"SUCCESS");
+	}
 }
 //shows the difference between using <> and the raw type - different semantics
 public void test008() {
@@ -920,7 +981,7 @@ public void test0020() {
 		"----------\n");
 }
 //check inference at method argument position.
-public void test0021() {
+public void _test0021() {
 	this.runNegativeTest(
 		new String[] {
 			"X.java",
@@ -1033,7 +1094,7 @@ public void test0025() {
 		"----------\n");
 }
 // Test various scenarios.
-public void test0026() {
+public void _test0026() {
 	this.runNegativeTest(
 		new String[] {
 			"X.java",
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/OverloadResolutionTest8.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/OverloadResolutionTest8.java
index a15c6fe..acfce81 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/OverloadResolutionTest8.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/OverloadResolutionTest8.java
@@ -873,4 +873,69 @@ public void test030() {
 			},
 			"foo(J)");
 }
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=401850, [1.8][compiler] Compiler fails to type poly allocation expressions in method invocation contexts
+public void test031() {
+	this.runConformTest(
+			new String[] {
+				"X.java",
+				"public class X<T> {\n" +
+				"	void foo(X<String> s) {\n" +
+				"       System.out.println(\"foo(X<String>)\");\n" +
+				"   }\n" +
+				"	public static void main(String[] args) {\n" +
+				"		new X<String>().foo(new X<>());\n" +
+				"	}\n" +
+				"}\n",
+			},
+			"foo(X<String>)");
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=401850, [1.8][compiler] Compiler fails to type poly allocation expressions in method invocation contexts
+public void test032() {
+	this.runNegativeTest(
+			new String[] {
+				"X.java",
+				"public class X<T> {\n" +
+				"    void foo(X<String> s, Object o) {\n" +
+				"        System.out.println(\"foo(X<String>)\");\n" +
+				"    }\n" +
+				"    void foo(X xs, String s) {\n" +
+				"        System.out.println(\"foo(X<String>)\");\n" +
+				"    }\n" +
+				"    public static void main(String[] args) {\n" +
+				"        new X<String>().foo(new X<>(), \"Hello\");\n" +
+				"    }\n" +
+				"}\n",
+			},
+			"----------\n" + 
+			"1. WARNING in X.java (at line 5)\n" + 
+			"	void foo(X xs, String s) {\n" + 
+			"	         ^\n" + 
+			"X is a raw type. References to generic type X<T> should be parameterized\n" + 
+			"----------\n" + 
+			"2. ERROR in X.java (at line 9)\n" + 
+			"	new X<String>().foo(new X<>(), \"Hello\");\n" + 
+			"	                ^^^\n" + 
+			"The method foo(X<String>, Object) is ambiguous for the type X<String>\n" + 
+			"----------\n");
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=401850, [1.8][compiler] Compiler fails to type poly allocation expressions in method invocation contexts
+public void test033() {
+	this.runConformTest(
+			new String[] {
+				"X.java",
+				"class Y<T> {}\n" +
+				"public class X<T> extends Y<T> {\n" +
+				"    void foo(X<String> s) {\n" +
+				"        System.out.println(\"foo(X<String>)\");\n" +
+				"    }\n" +
+				"    void foo(Y<String> y) {\n" +
+				"        System.out.println(\"foo(Y<String>)\");\n" +
+				"    }\n" +
+				"    public static void main(String[] args) {\n" +
+				"        new X<String>().foo(new X<>());\n" +
+				"    }\n" +
+				"}\n",
+			},
+			"foo(X<String>)");
+}
 }
\ No newline at end of file
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java
index 76e4e58..834a909 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java
@@ -298,12 +298,24 @@ public StringBuffer printExpression(int indent, StringBuffer output) {
 
 public TypeBinding resolveType(BlockScope scope) {
 	// Propagate the type checking to the arguments, and check if the constructor is defined.
-	this.constant = Constant.NotAConstant;
-	if (this.type == null) {
-		// initialization of an enum constant
-		this.resolvedType = scope.enclosingReceiverType();
+	final boolean isDiamond = this.type != null && (this.type.bits & ASTNode.IsDiamond) != 0;
+	final CompilerOptions compilerOptions = scope.compilerOptions();
+	if (this.constant != Constant.NotAConstant) {
+		this.constant = Constant.NotAConstant;
+		if (this.type == null) {
+			// initialization of an enum constant
+			this.resolvedType = scope.enclosingReceiverType();
+		} else {
+			this.resolvedType = this.type.resolveType(scope, true /* check bounds*/);
+			if (isDiamond && this.typeExpected == null && this.expressionContext == INVOCATION_CONTEXT && compilerOptions.sourceLevel >= ClassFileConstants.JDK1_8) {
+				return this.resolvedType = new PolyTypeBinding(this);
+			}
+		}
 	} else {
-		this.resolvedType = this.type.resolveType(scope, true /* check bounds*/);
+		this.resolvedType = this.type.resolvedType;
+	}
+
+	if (this.type != null) {
 		checkIllegalNullAnnotation(scope, this.resolvedType);
 		checkParameterizedAllocation: {
 			if (this.type instanceof ParameterizedQualifiedTypeReference) { // disallow new X<String>.Y<Integer>()
@@ -326,11 +338,10 @@ public TypeBinding resolveType(BlockScope scope) {
 	}
 	// will check for null after args are resolved
 
-	final boolean isDiamond = this.type != null && (this.type.bits & ASTNode.IsDiamond) != 0;
 	// resolve type arguments (for generic constructor call)
 	if (this.typeArguments != null) {
 		int length = this.typeArguments.length;
-		boolean argHasError = scope.compilerOptions().sourceLevel < ClassFileConstants.JDK1_5;
+		boolean argHasError = compilerOptions.sourceLevel < ClassFileConstants.JDK1_5;
 		this.genericTypeArguments = new TypeBinding[length];
 		for (int i = 0; i < length; i++) {
 			TypeReference typeReference = this.typeArguments[i];
@@ -459,7 +470,6 @@ public TypeBinding resolveType(BlockScope scope) {
 	if (!isDiamond && this.resolvedType.isParameterizedTypeWithActualArguments()) {
  		checkTypeArgumentRedundancy((ParameterizedTypeBinding) this.resolvedType, null, argumentTypes, scope);
  	}
-	final CompilerOptions compilerOptions = scope.compilerOptions();
 	if (compilerOptions.isAnnotationBasedNullAnalysisEnabled && (this.binding.tagBits & TagBits.IsNullnessKnown) == 0) {
 		new ImplicitNullAnnotationVerifier(scope.environment(), compilerOptions.inheritNullAnnotations)
 				.checkImplicitNullAnnotations(this.binding, null/*srcMethod*/, false, scope);
@@ -568,14 +578,14 @@ public void setExpressionContext(ExpressionContext context) {
 	this.expressionContext = context;
 }
 
+public boolean isCompatibleWith(TypeBinding left, Scope scope) {
+	return this.type.resolvedType != null && this.type.resolvedType.isCompatibleWith(left);
+}
+
 public boolean isPolyExpression() {
 	return (this.expressionContext == ASSIGNMENT_CONTEXT || this.expressionContext == INVOCATION_CONTEXT) &&
 			this.type != null && (this.type.bits & ASTNode.IsDiamond) != 0;
 }
-
-public boolean sIsMoreSpecific(TypeBinding s, TypeBinding t) {
-	return isPolyExpression() ? !s.isBaseType() && t.isBaseType() : super.sIsMoreSpecific(s, t);
-}
 /**
  * @see org.eclipse.jdt.internal.compiler.lookup.InvocationSite#expectedType()
  */
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java
index 2f3fc8a..5bc4532 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java
@@ -261,7 +261,7 @@ public class ParameterizedQualifiedTypeReference extends ArrayQualifiedTypeRefer
 			    }
 				int argLength = args.length;
 				boolean isDiamond = argLength == 0 && (i == (max -1)) && ((this.bits & ASTNode.IsDiamond) != 0);
-				TypeBinding[] argTypes = new TypeBinding[argLength];
+				TypeBinding[] argTypes = isDiamond ? Binding.INFERRED_TYPES : new TypeBinding[argLength];
 				boolean argHasError = false;
 				ReferenceBinding currentOriginal = (ReferenceBinding)currentType.original();
 				for (int j = 0; j < argLength; j++) {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedSingleTypeReference.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedSingleTypeReference.java
index 523fd8c..7dac990 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedSingleTypeReference.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedSingleTypeReference.java
@@ -227,8 +227,9 @@ public class ParameterizedSingleTypeReference extends ArrayTypeReference {
 	    	keep = ((ClassScope) scope).superTypeReference;
 	    	((ClassScope) scope).superTypeReference = null;
 	    }
+	    final boolean isDiamond = (this.bits & ASTNode.IsDiamond) != 0;
 		int argLength = this.typeArguments.length;
-		TypeBinding[] argTypes = new TypeBinding[argLength];
+		TypeBinding[] argTypes = isDiamond ? Binding.INFERRED_TYPES : new TypeBinding[argLength];
 		boolean argHasError = false;
 		ReferenceBinding currentOriginal = (ReferenceBinding)currentType.original();
 		for (int i = 0; i < argLength; i++) {
@@ -252,7 +253,6 @@ public class ParameterizedSingleTypeReference extends ArrayTypeReference {
 				return null;
 		}
 
-		final boolean isDiamond = (this.bits & ASTNode.IsDiamond) != 0;
 		TypeVariableBinding[] typeVariables = currentOriginal.typeVariables();
 		if (typeVariables == Binding.NO_TYPE_VARIABLES) { // non generic invoked with arguments
 			boolean isCompliant15 = scope.compilerOptions().originalSourceLevel >= ClassFileConstants.JDK1_5;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Binding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Binding.java
index 17836e5..83173c1 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Binding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Binding.java
@@ -58,6 +58,7 @@ public abstract class Binding {
 	public static final AnnotationBinding[] NO_ANNOTATIONS = new AnnotationBinding[0];
 	public static final ElementValuePair[] NO_ELEMENT_VALUE_PAIRS = new ElementValuePair[0];
 	public static final char[][] NO_PARAMETER_NAMES = new char[0][];
+	public static final TypeBinding[] INFERRED_TYPES = new TypeBinding[0];
 
 	public static final FieldBinding[] UNINITIALIZED_FIELDS = new FieldBinding[0];
 	public static final MethodBinding[] UNINITIALIZED_METHODS = new MethodBinding[0];
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java
index 5739087..284a5e5 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java
@@ -771,7 +771,7 @@ public class ParameterizedTypeBinding extends ReferenceBinding implements Substi
 	            }
 	            int length = this.arguments.length;
 	            TypeBinding[] otherArguments = otherParamType.arguments;
-	            if (otherArguments == null || otherArguments.length != length) return false;
+	            if (otherArguments == null || (otherArguments.length != length && this.arguments != Binding.INFERRED_TYPES)) return false;
 	            for (int i = 0; i < length; i++) {
 	            	if (!this.arguments[i].isTypeArgumentContainedBy(otherArguments[i]))
 	            		return false;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeSystem.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeSystem.java
index 38115fa..e4aa8ba 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeSystem.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeSystem.java
@@ -138,7 +138,7 @@ public class TypeSystem {
 	public ParameterizedTypeBinding getParameterizedType(ReferenceBinding genericType, TypeBinding[] typeArguments, ReferenceBinding enclosingType) {
 		ReferenceBinding unannotatedGenericType = (ReferenceBinding) getUnannotatedType(genericType);
 		int typeArgumentsLength = typeArguments == null ? 0: typeArguments.length;
-		TypeBinding [] unannotatedTypeArguments = typeArguments == null ? null : new TypeBinding[typeArgumentsLength];
+		TypeBinding [] unannotatedTypeArguments = typeArguments == null || typeArguments.length == 0 ? typeArguments : new TypeBinding[typeArgumentsLength];
 		for (int i = 0; i < typeArgumentsLength; i++) {
 			unannotatedTypeArguments[i] = getUnannotatedType(typeArguments[i]);
 		}

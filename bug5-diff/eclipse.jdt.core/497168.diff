commit de284f70417477c351890146486cb10691299d75
Author: Stefan Xenos <sxenos@gmail.com>
Date:   Fri Jul 1 16:53:44 2016 -0700

    Bug 497168 - Fix test failures in the new index branch
    
    Change-Id: Ic8592ea2f55c951bf27fb517e112816486150aaf
    Signed-off-by: Stefan Xenos <sxenos@gmail.com>

3	11	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java
index fe5483d..071cc3d 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java
@@ -37,7 +37,6 @@ import org.eclipse.jdt.internal.compiler.SourceElementParser;
 import org.eclipse.jdt.internal.core.JavaModelManager.PerProjectInfo;
 import org.eclipse.jdt.internal.core.builder.JavaBuilder;
 import org.eclipse.jdt.internal.core.hierarchy.TypeHierarchy;
-import org.eclipse.jdt.internal.core.nd.java.JavaIndex;
 import org.eclipse.jdt.internal.core.search.AbstractSearchScope;
 import org.eclipse.jdt.internal.core.search.JavaWorkspaceScope;
 import org.eclipse.jdt.internal.core.search.indexing.IndexManager;
@@ -1058,16 +1057,9 @@ public class DeltaProcessor {
 							if (VERBOSE){
 								System.out.println("- External JAR CHANGED, affecting root: "+root.getElementName()); //$NON-NLS-1$
 							}
-							if (JavaIndex.isEnabled()) {
-								// Deltas for changes in external jars are fired after indexing, to reduce the chance of listeners trying to
-								// read the new state of the .JAR before it can be cached in the index.
-								close(root);
-								this.projectCachesToReset.add(javaProject);
-							} else {
-								contentChanged(root);
-								deltaContainsModifiedJar = true;
-								hasDelta = true;
-							}
+							contentChanged(root);
+							hasDelta = true;
+							deltaContainsModifiedJar = true;
 						} else if (status == EXTERNAL_JAR_REMOVED) {
 							PackageFragmentRoot root = (PackageFragmentRoot) javaProject.getPackageFragmentRoot(entryPath.toString());
 							if (VERBOSE){
commit 334b691f3124d498b6b42952033d892a93fd2e23
Author: Stefan Xenos <sxenos@gmail.com>
Date:   Wed Jul 13 17:25:32 2016 -0700

    Bug 497168 - Add a comment explaining why some temporary code was removed.
    
    Signed-off-by: Stefan Xenos <sxenos@gmail.com>

4	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java
index 071cc3d..0e2c598 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java
@@ -1057,9 +1057,12 @@ public class DeltaProcessor {
 							if (VERBOSE){
 								System.out.println("- External JAR CHANGED, affecting root: "+root.getElementName()); //$NON-NLS-1$
 							}
+							// TODO(sxenos): this is causing each change event for an external jar file to be fired twice.
+							// We need to preserve the clearing of cached information in the jar but defer the actual firing of
+							// the event until after the indexer has processed the jar.
 							contentChanged(root);
-							hasDelta = true;
 							deltaContainsModifiedJar = true;
+							hasDelta = true;
 						} else if (status == EXTERNAL_JAR_REMOVED) {
 							PackageFragmentRoot root = (PackageFragmentRoot) javaProject.getPackageFragmentRoot(entryPath.toString());
 							if (VERBOSE){
commit e18d57dfbea96c37300d932b11f749f10337be92
Author: Stefan Xenos <sxenos@gmail.com>
Date:   Wed Jul 13 17:26:34 2016 -0700

    Bug 497168 - Fix test failures in the new index branch
    
    Fix test failure caused by null being returned as part of empty annotation
    set.
    
    Signed-off-by: Stefan Xenos <sxenos@gmail.com>

4	2	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/model/IndexBinaryType.java
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/model/IndexBinaryType.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/model/IndexBinaryType.java
index bd72d16..ed3d483 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/model/IndexBinaryType.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/model/IndexBinaryType.java
@@ -63,6 +63,8 @@ public class IndexBinaryType implements IBinaryType {
 
 	private long tagBits;
 
+	private static final IBinaryAnnotation[] NO_ANNOTATIONS = new IBinaryAnnotation[0];
+
 	public IndexBinaryType(TypeRef type, char[] indexPath) {
 		this.typeRef = type;
 		this.fileName = indexPath;
@@ -92,14 +94,14 @@ public class IndexBinaryType implements IBinaryType {
 			if (type != null) {
 				return toAnnotationArray(this.typeRef.get().getAnnotations());
 			} else {
-				return null;
+				return NO_ANNOTATIONS;
 			}
 		}
 	}
 
 	private static IBinaryAnnotation[] toAnnotationArray(List<NdAnnotation> annotations) {
 		if (annotations.isEmpty()) {
-			return null;
+			return NO_ANNOTATIONS;
 		}
 		IBinaryAnnotation[] result = new IBinaryAnnotation[annotations.size()];
 
commit e9bf59894c2a0b17c1f658923bda00df3c532ef0
Author: Stefan Xenos <sxenos@gmail.com>
Date:   Fri Jul 15 17:29:18 2016 -0700

    Bug 497168 - Fix test failures in the new index branch
    
    Add a specialized map implementation that is aware of the special cases
    for TypeBinding and can take into account the fact that the IDs can
    be assigned at any time.
    
    Change-Id: I29a68a3bdb5f876d26f0c8cbde9c012016a2f390

90	0	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/BindingMap.java
4	36	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/BindingMap.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/BindingMap.java
new file mode 100644
index 0000000..7884448
--- /dev/null
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/BindingMap.java
@@ -0,0 +1,90 @@
+package org.eclipse.jdt.internal.core.hierarchy;
+
+import java.util.HashSet;
+import java.util.IdentityHashMap;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Set;
+
+import org.eclipse.jdt.internal.compiler.lookup.TypeBinding;
+import org.eclipse.jdt.internal.compiler.lookup.TypeIds;
+
+/**
+ * Maps a {@link TypeBinding} onto values. Two {@link TypeBinding}s are considered equivalent
+ * if their IDs are the same or if they have TypeIds.NoId and they are identical objects.
+ * <p>
+ * Takes into account the fact that a ReferenceBinding may have its ID change from NoId
+ * to a real ID at any time without notice. (This is a behavior that was observed in
+ * TypeHierarchyTests.testAnonymousType01 -- if type IDs could be made invariant then it
+ * would be possible to implement a more efficient map that never needs to perform an
+ * exhaustive search.)
+ */
+public class BindingMap<V> {
+	private Map<TypeBinding, V> identityMap = new IdentityHashMap<>();
+	private Object[] mapIdToValue = new Object[0];
+	private Set<TypeBinding> bindingsWithoutAnId = new HashSet<>();
+
+	public void put(TypeBinding key, V value) {
+		this.identityMap.put(key, value);
+		if (key.id != TypeIds.NoId) {
+			int targetId = key.id;
+			insertIntoIdMap(targetId, value);
+		} else {
+			this.bindingsWithoutAnId.add(key);
+		}
+	}
+
+	@SuppressWarnings("unchecked")
+	public V get(TypeBinding key) {
+		// Check if we can find this binding by identity
+		V value = this.identityMap.get(key);
+		if (value != null) {
+			return value;
+		}
+		int targetId = key.id;
+		if (targetId != TypeIds.NoId) {
+			// Check if we can find this binding by value
+			if (targetId < this.mapIdToValue.length) {
+				value = (V)this.mapIdToValue[targetId];
+			}
+			if (value != null) {
+				return value;
+			}
+
+			// Check if there are any bindings that previously had no ID that have
+			// subsequently been assigned one.
+			for (Iterator<TypeBinding> bindingIter = this.bindingsWithoutAnId.iterator(); bindingIter.hasNext();) {
+				TypeBinding nextBinding = bindingIter.next();
+
+				if (nextBinding.id != TypeIds.NoId) {
+					insertIntoIdMap(nextBinding.id, this.identityMap.get(nextBinding));
+					bindingIter.remove();
+				}
+			}
+
+			// Now look again to see if this binding can be found
+			if (targetId < this.mapIdToValue.length) {
+				value = (V)this.mapIdToValue[targetId];
+			}
+		}
+
+		return value;
+	}
+
+	private void insertIntoIdMap(int targetId, V value) {
+		int requiredSize = targetId + 1;
+		if (this.mapIdToValue.length < requiredSize) {
+			int newSize = requiredSize * 2;
+			Object[] newArray = new Object[newSize];
+			System.arraycopy(this.mapIdToValue, 0, newArray, 0, this.mapIdToValue.length);
+			this.mapIdToValue = newArray;
+		}
+		this.mapIdToValue[targetId] = value;
+	}
+
+	public void clear() {
+		this.identityMap.clear();
+		this.bindingsWithoutAnId.clear();
+		this.mapIdToValue = new Object[0];
+	}
+}
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java
index 9278f3b..f232f66 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyResolver.java
@@ -74,39 +74,7 @@ public class HierarchyResolver implements ITypeRequestor {
 	private CompilerOptions options;
 	HierarchyBuilder builder;
 	private ReferenceBinding[] typeBindings;
-	private Map<ReferenceHolder, IGenericType> bindingMap = new HashMap<>();
-
-	private static class ReferenceHolder {
-		private final ReferenceBinding key;
-		private int hashCode;
-
-		public ReferenceHolder(ReferenceBinding key) {
-			this.key = key;
-			this.hashCode = computeHashCode();
-		}
-
-		@Override
-		public int hashCode() {
-			return this.hashCode;
-		}
-
-		private int computeHashCode() {
-			if (this.key.id == TypeIds.NoId) {
-				return System.identityHashCode(this.key);
-			}
-			return this.key.id;
-		}
-
-		@Override
-		public boolean equals(Object obj) {
-			if (obj instanceof ReferenceHolder) {
-				ReferenceHolder refHolder = (ReferenceHolder) obj;
-
-				return TypeBinding.equalsEquals(this.key, refHolder.key);
-			}
-			return false;
-		}
-	}
+	private BindingMap<IGenericType> bindingMap = new BindingMap<>();
 
 	private int typeIndex;
 	private IGenericType[] typeModels;
@@ -245,7 +213,7 @@ private IType findSuperClass(IGenericType type, ReferenceBinding typeBinding) {
 				}
 			}
 		}
-		IGenericType typeModel = this.bindingMap.get(new ReferenceHolder(superBinding));
+		IGenericType typeModel = this.bindingMap.get(superBinding);
 		if (typeModel != null) {
 			return this.builder.getHandle(typeModel, superBinding);
 		}
@@ -323,7 +291,7 @@ private IType[] findSuperInterfaces(IGenericType type, ReferenceBinding typeBind
 			// ensure that the binding corresponds to the interface defined by the user
 			if (CharOperation.equals(simpleName, interfaceBinding.sourceName)) {
 				bindingIndex++;
-				IGenericType genericType = this.bindingMap.get(new ReferenceHolder(interfaceBinding));
+				IGenericType genericType = this.bindingMap.get(interfaceBinding);
 				if (genericType != null) {
 					IType handle = this.builder.getHandle(genericType, interfaceBinding);
 					if (handle != null) {
@@ -424,7 +392,7 @@ private void remember(IGenericType suppliedType, ReferenceBinding typeBinding) {
 	}
 	this.typeModels[this.typeIndex] = suppliedType;
 	this.typeBindings[this.typeIndex] = typeBinding;
-	this.bindingMap.put(new ReferenceHolder(typeBinding), suppliedType);
+	this.bindingMap.put(typeBinding, suppliedType);
 }
 private void remember(IType type, ReferenceBinding typeBinding) {
 	if (((CompilationUnit)type.getCompilationUnit()).isOpen()) {
commit 02a027df97916391716c1892e58847f26d1c365d
Author: Stefan Xenos <sxenos@gmail.com>
Date:   Fri Jul 15 17:31:17 2016 -0700

    Bug 497168 - Fix test failures in the new index branch
    
    Deal with the case where the preferenceService is null.
    
    Change-Id: I65445a8bc0a7ec62fe96104b3de7df1daa12ce98

6	1	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/JavaIndex.java
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/JavaIndex.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/JavaIndex.java
index d7d1932..d7957a7 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/JavaIndex.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/JavaIndex.java
@@ -18,6 +18,7 @@ import org.eclipse.core.runtime.CoreException;
 import org.eclipse.core.runtime.IPath;
 import org.eclipse.core.runtime.Path;
 import org.eclipse.core.runtime.Platform;
+import org.eclipse.core.runtime.preferences.IPreferencesService;
 import org.eclipse.jdt.core.IJavaElement;
 import org.eclipse.jdt.core.JavaCore;
 import org.eclipse.jdt.internal.core.nd.Nd;
@@ -198,7 +199,11 @@ public class JavaIndex {
 	}
 
 	public static boolean isEnabled() {
-		return !Platform.getPreferencesService().getBoolean(JavaCore.PLUGIN_ID, "disableNewJavaIndex", false, //$NON-NLS-1$
+		IPreferencesService preferenceService = Platform.getPreferencesService();
+		if (preferenceService == null) {
+			return true;
+		}
+		return !preferenceService.getBoolean(JavaCore.PLUGIN_ID, "disableNewJavaIndex", false, //$NON-NLS-1$
 				null);
 	}
 
commit 0d665c71ae675194f3940900aa75d0b9e1476511
Author: Stefan Xenos <sxenos@gmail.com>
Date:   Tue Jul 26 18:37:51 2016 -0700

    Bug 497168 - Fix test failures in the new index branch
    
    Implement blocking in IndexBasedHierarchyBuilder that
    is consistent with the blocking used by the old implementation.
    
    Change-Id: Ie05a97a6494d73d6cabed84690ec60387ec20d04

5	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java
24	0	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/Indexer.java
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java
index 161027a..72ff411 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java
@@ -55,6 +55,7 @@ import org.eclipse.jdt.internal.core.PackageFragment;
 import org.eclipse.jdt.internal.core.SearchableEnvironment;
 import org.eclipse.jdt.internal.core.nd.IReader;
 import org.eclipse.jdt.internal.core.nd.Nd;
+import org.eclipse.jdt.internal.core.nd.indexer.Indexer;
 import org.eclipse.jdt.internal.core.nd.java.JavaIndex;
 import org.eclipse.jdt.internal.core.nd.java.JavaNames;
 import org.eclipse.jdt.internal.core.nd.java.NdType;
@@ -491,8 +492,11 @@ public static void searchAllPossibleSubTypes(
 
 private static void newSearchAllPossibleSubTypes(IType type, IJavaSearchScope scope2, Map binariesFromIndexMatches2,
 		IPathRequestor pathRequestor, int waitingPolicy, IProgressMonitor progressMonitor) {
-	SubMonitor subMonitor = SubMonitor.convert(progressMonitor);
+	SubMonitor subMonitor = SubMonitor.convert(progressMonitor, 2);
 	JavaIndex index = JavaIndex.getIndex();
+
+	Indexer.getInstance().waitForIndex(waitingPolicy, subMonitor.split(1));
+
 	Nd nd = index.getNd();
 	char[] fieldDefinition = JavaNames.fullyQualifiedNameToFieldDescriptor(type.getFullyQualifiedName().toCharArray());
 
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/Indexer.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/Indexer.java
index 9b012a0..0a5b779 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/Indexer.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/Indexer.java
@@ -24,6 +24,7 @@ import org.eclipse.core.runtime.CoreException;
 import org.eclipse.core.runtime.ICoreRunnable;
 import org.eclipse.core.runtime.IPath;
 import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.OperationCanceledException;
 import org.eclipse.core.runtime.Path;
 import org.eclipse.core.runtime.Platform;
 import org.eclipse.core.runtime.SubMonitor;
@@ -48,6 +49,7 @@ import org.eclipse.jdt.internal.core.nd.java.FileFingerprint.FingerprintTestResu
 import org.eclipse.jdt.internal.core.nd.java.JavaIndex;
 import org.eclipse.jdt.internal.core.nd.java.NdResourceFile;
 import org.eclipse.jdt.internal.core.nd.java.NdWorkspaceLocation;
+import org.eclipse.jdt.internal.core.search.processing.IJob;
 
 public final class Indexer {
 	private Nd nd;
@@ -818,4 +820,26 @@ public final class Indexer {
 			next.consume(event);
 		}
 	}
+
+	public void waitForIndex(int waitingPolicy, IProgressMonitor monitor) {
+		switch (waitingPolicy) {
+			case IJob.ForceImmediate: {
+				break;
+			}
+			case IJob.CancelIfNotReady: {
+				if (this.rescanJob.getState() != Job.NONE) {
+					throw new OperationCanceledException();
+				}
+				break;
+			}
+			case IJob.WaitUntilReady: {
+				try {
+					this.rescanJob.join(0, monitor);
+				} catch (InterruptedException e) {
+					throw new OperationCanceledException();
+				}
+				break;
+			}
+		}
+	}
 }

commit c1481bac406d75d14e6deeee7721d87f2f9b7275
Author: Markus Keller <markus_keller@ch.ibm.com>
Date:   Tue Jul 18 08:28:47 2017 +0530

    Fix for Bug 508889: [9] Support Module attribute in Disassembler
    Also-by: Manoj Palat <manpalat@in.ibm.com>
    
    Change-Id: I5d12112561953c575e880361d93fdc4c9b76f821

51	1	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ModuleAttributeTests.java
23	1	org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IAttributeNamesConstants.java
9	5	org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IClassFileReader.java
10	2	org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IConstantPool.java
5	5	org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IConstantPoolConstant.java
9	2	org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IConstantPoolEntry.java
64	0	org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IConstantPoolEntry3.java
27	1	org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IModifierConstants.java
142	0	org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IModuleAttribute.java
39	0	org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IModuleMainClassAttribute.java
46	0	org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IModulePackagesAttribute.java
66	0	org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IPackageVisibilityInfo.java
61	0	org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IProvidesInfo.java
61	0	org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IRequiresInfo.java
10	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ClassFileReader.java
23	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ConstantPool.java
6	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ConstantPoolEntry.java
50	5	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ConstantPoolEntry2.java
179	26	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java
5	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Messages.java
225	0	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ModuleAttribute.java
60	0	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ModuleMainClassAttribute.java
80	0	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ModulePackagesAttribute.java
97	0	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PackageVisibilityInfo.java
81	0	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ProvidesInfo.java
81	0	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/RequiresInfo.java
4	0	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/messages.properties
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ModuleAttributeTests.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ModuleAttributeTests.java
index 86722c6..d9d1c97 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ModuleAttributeTests.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ModuleAttributeTests.java
@@ -16,10 +16,12 @@
 package org.eclipse.jdt.core.tests.compiler.regression;
 
 import java.io.File;
+import java.util.Arrays;
 
 import org.eclipse.jdt.core.ToolFactory;
 import org.eclipse.jdt.core.util.IClassFileAttribute;
 import org.eclipse.jdt.core.util.IClassFileReader;
+import org.eclipse.jdt.core.util.IModuleAttribute;
 
 import junit.framework.Test;
 
@@ -37,7 +39,7 @@ public class ModuleAttributeTests extends AbstractRegressionTest {
 	// All specified tests which does not belong to the class are skipped...
 	static {
 //		TESTS_PREFIX = "testBug95521";
-//		TESTS_NAMES = new String[] { "testBug359495" };
+//		TESTS_NAMES = new String[] { "testBug508889_003" };
 //		TESTS_NUMBERS = new int[] { 53 };
 //		TESTS_RANGE = new int[] { 23 -1,};
 	}
@@ -45,6 +47,19 @@ public class ModuleAttributeTests extends AbstractRegressionTest {
 		return buildMinimalComplianceTestSuite(testClass(), F_9);
 	}
 
+	private IModuleAttribute getModuleAttribute(String[] contents) {
+		this.runConformTest(contents);
+		IClassFileReader cfr = ToolFactory.createDefaultClassFileReader(OUTPUT_DIR + File.separator + "module-info.class", IClassFileReader.CLASSFILE_ATTRIBUTES);
+		assertNotNull("Error reading module-info.class", cfr);
+		IClassFileAttribute attr = Arrays.stream(cfr.getAttributes())
+			.filter(e -> new String(e.getAttributeName()).equals("Module"))
+			.findFirst()
+			.orElse(null);
+		assertNotNull("Module attribute not found", attr);
+		assertTrue("Not a module attribute", attr instanceof IModuleAttribute);
+		return (IModuleAttribute) attr;
+	}
+
 	// basic test to check for presence of module attribute in module-info.class
 	public void test001() throws Exception {
 		this.runConformTest(
@@ -64,4 +79,39 @@ public class ModuleAttributeTests extends AbstractRegressionTest {
 		}
 		assertNotNull("Module attribute not found", moduleAttribute);
 	}
+	// Test that ther is at most one Module attribute in the attributes table of a ClassFile structure- JVMS Sec 4.7.25
+	public void _testBug508889_002() throws Exception {
+		this.runConformTest(
+			new String[] {
+				"module-info.java",
+				"module first {\n" +
+				"}\n",
+				});
+		IClassFileReader cfr = ToolFactory.createDefaultClassFileReader(OUTPUT_DIR + File.separator + "module-info.class", IClassFileReader.CLASSFILE_ATTRIBUTES);
+		assertNotNull("Error reading module-info.class", cfr);
+		long count = Arrays.stream(cfr.getAttributes())
+			.filter(e -> new String(e.getAttributeName()).equals("Module"))
+			.count();
+		assertEquals("Unexpected number of module attributes", 1,  count);
+	}
+	// Module Atrribute sanity
+	public void _testBug508889_003() throws Exception {
+		String[] contents = {
+			"module-info.java",
+			"module first {\n" +
+				"exports pack1;\n" +
+				"exports pack2 to zero;\n" +
+			"}\n",
+			"pack1/X11.java",
+			"package pack1;\n" +
+			"public class X11 {}\n",
+			"pack2/X21.java",
+			"package pack2;\n" +
+			"public class X21 {}\n",	
+		};
+		IModuleAttribute module = getModuleAttribute(contents);
+		assertEquals("Wrong Module Name", "first", new String(module.getModuleName()));
+		assertTrue("Unexpected attribute length", module.getAttributeLength() > 0);
+		int flags = module.getModuleFlags();
+	}
 }
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IAttributeNamesConstants.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IAttributeNamesConstants.java
index f6682a5..8459450 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IAttributeNamesConstants.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IAttributeNamesConstants.java
@@ -1,10 +1,14 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2013 IBM Corporation and others.
+ * Copyright (c) 2000, 2017 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *     IBM Corporation - initial API and implementation
  *        Andy Clement - Contributions for
@@ -169,4 +173,22 @@ public interface IAttributeNamesConstants {
 	 * @since 3.10
 	 */
 	char[] METHOD_PARAMETERS = "MethodParameters".toCharArray(); //$NON-NLS-1$
+
+	/**
+	 * "Module" attribute (added in Java SE 9).
+	 * @since 3.13 BETA_JAVA9
+	 */
+	char[] MODULE = "Module".toCharArray(); //$NON-NLS-1$
+
+	/**
+	 * "ModulePackages" attribute (added in Java SE 9).
+	 * @since 3.13 BETA_JAVA9
+	 */
+	char[] MODULE_PACKAGES = "ModulePackages".toCharArray(); //$NON-NLS-1$
+
+	/**
+	 * "ModuleMainClass" attribute (added in Java SE 9).
+	 * @since 3.13 BETA_JAVA9
+	 */
+	char[] MODULE_MAIN_CLASS = "ModuleMainClass".toCharArray(); //$NON-NLS-1$
 }
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IClassFileReader.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IClassFileReader.java
index 3ce95da..940fbe4 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IClassFileReader.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IClassFileReader.java
@@ -1,10 +1,14 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2009 IBM Corporation and others.
+ * Copyright (c) 2000, 2017 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *     IBM Corporation - initial API and implementation
  *******************************************************************************/
@@ -74,9 +78,9 @@ public interface IClassFileReader {
 	int ALL_BUT_METHOD_BODIES   = ALL & ~METHOD_BODIES;
 
 	/**
-	 * Answer back the access flag of the .class file.
+	 * Answer back the access flags of the .class file.
 	 *
-	 * @return the access flag of the .class file
+	 * @return the access flags of the .class file
 	 */
 	int getAccessFlags();
 
@@ -157,9 +161,9 @@ public interface IClassFileReader {
 	int getSuperclassIndex();
 
 	/**
-	 * Answer true if this .class file represents an class, false otherwise.
+	 * Answer true if this .class file represents a class, false otherwise.
 	 *
-	 * @return true if this .class file represents an class, false otherwise
+	 * @return true if this .class file represents a class, false otherwise
 	 */
 	boolean isClass();
 
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IConstantPool.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IConstantPool.java
index 9f57bb1..9f6acf0 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IConstantPool.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IConstantPool.java
@@ -1,10 +1,14 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2011 IBM Corporation and others.
+ * Copyright (c) 2000, 2017 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *     IBM Corporation - initial API and implementation
  *******************************************************************************/
@@ -36,11 +40,15 @@ public interface IConstantPool {
 
 	/**
 	 * Answer back the entry at the given index in the constant pool.
-	 * 
+	 *
 	 * <p>The return value can be an instance of {@link IConstantPoolEntry2} if the value returned
 	 * by {@link #getEntryKind(int)} is either {@link IConstantPoolConstant#CONSTANT_MethodHandle},
 	 * {@link IConstantPoolConstant#CONSTANT_MethodType} or {@link IConstantPoolConstant#CONSTANT_InvokeDynamic}.</p>
 	 *
+	 * <p>The return value can be an instance of {@link IConstantPoolEntry3} if the value returned
+	 * by {@link #getEntryKind(int)} is either {@link IConstantPoolConstant#CONSTANT_Module}
+	 * or {@link IConstantPoolConstant#CONSTANT_Package}.</p>
+	 *
 	 * @param index the index of the entry in the constant pool
 	 * @return the entry at the given index in the constant pool
 	 */
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IConstantPoolConstant.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IConstantPoolConstant.java
index abe8f8b..1ae0dd9 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IConstantPoolConstant.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IConstantPoolConstant.java
@@ -47,11 +47,11 @@ public interface IConstantPoolConstant {
 	int CONSTANT_InvokeDynamic = 18;
 
 	/**
-	 * @since 3.13
+	 * @since 3.13 BETA_JAVA9
 	 */
 	int CONSTANT_Module = 19;
 	/**
-	 * @since 3.13
+	 * @since 3.13 BETA_JAVA9
 	 */
 	int CONSTANT_Package = 20;
 
@@ -80,12 +80,12 @@ public interface IConstantPoolConstant {
 	int CONSTANT_InvokeDynamic_SIZE = 5;
 
 	/**
-	 * @since 3.13
+	 * @since 3.13 BETA_JAVA9
 	 */
 	int CONSTANT_Module_SIZE = 3;
-	
+
 	/**
-	 * @since 3.13
+	 * @since 3.13 BETA_JAVA9
 	 */
 	int CONSTANT_Package_SIZE = 3;
 	/**
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IConstantPoolEntry.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IConstantPoolEntry.java
index 343765b..27f4f6c 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IConstantPoolEntry.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IConstantPoolEntry.java
@@ -1,10 +1,14 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2016 IBM Corporation and others.
+ * Copyright (c) 2000, 2017 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *     IBM Corporation - initial API and implementation
  *******************************************************************************/
@@ -14,8 +18,11 @@ package org.eclipse.jdt.core.util;
  * Description of a constant pool entry as described in the JVM specifications.
  * Its contents is initialized according to its kind.
  *
- * This interface may be implemented by clients.
+ * This interface may be implemented by clients. Because of that questionable choice,
+ * clients may have to cast to {@link IConstantPoolEntry3} to get access to the relevant content.
  *
+ * @see IConstantPoolEntry2
+ * @see IConstantPoolEntry3
  * @since 2.0
  */
 public interface IConstantPoolEntry {
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IConstantPoolEntry3.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IConstantPoolEntry3.java
new file mode 100644
index 0000000..0ea1e9b
--- /dev/null
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IConstantPoolEntry3.java
@@ -0,0 +1,64 @@
+/*******************************************************************************
+ * Copyright (c) 2017 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.jdt.core.util;
+
+/**
+ * Description of a constant pool entry as described in the JVM specifications.
+ * Its contents is initialized according to its kind.
+ *
+ * @noimplement This interface is not intended to be implemented by clients.
+ * @since 3.13 BETA_JAVA9
+ */
+public interface IConstantPoolEntry3 extends IConstantPoolEntry2 {
+	/**
+	 * Returns the index for a CONSTANT_Module type entry.
+	 * The value is unspecified otherwise.
+	 *
+	 * @return the index for a CONSTANT_Module type entry
+	 * @see IConstantPoolConstant#CONSTANT_Module
+	 * @see #getModuleName()
+	 */
+	int getModuleIndex();
+
+	/**
+	 * Returns the name of a CONSTANT_Module type entry.
+	 * Returns null otherwise.
+	 *
+	 * @return the name of a CONSTANT_Module type entry
+	 * @see IConstantPoolConstant#CONSTANT_Module
+	 * @see #getModuleIndex()
+	 */
+	char[] getModuleName();
+
+	/**
+	 * Returns the index for a CONSTANT_Package type entry.
+	 * The value is unspecified otherwise.
+	 *
+	 * @return the index for a CONSTANT_Package type entry
+	 * @see IConstantPoolConstant#CONSTANT_Package
+	 * @see #getPackageName()
+	 */
+	int getPackageIndex();
+
+	/**
+	 * Returns the name of a CONSTANT_Package type entry.
+	 * Returns null otherwise.
+	 *
+	 * @return the name of a CONSTANT_Package type entry
+	 * @see IConstantPoolConstant#CONSTANT_Package
+	 * @see #getPackageIndex()
+	 */
+	char[] getPackageName();
+}
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IModifierConstants.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IModifierConstants.java
index 6af1f11..d700600 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IModifierConstants.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IModifierConstants.java
@@ -1,10 +1,13 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2013 IBM Corporation and others.
+ * Copyright (c) 2000, 2017 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
  *
  * Contributors:
  *     IBM Corporation - initial API and implementation
@@ -64,8 +67,31 @@ public interface IModifierConstants {
 	int ACC_ENUM         = 0x4000;
 
 	/**
+	 * Indicates a module (added in Java SE 9).
+	 * @since 3.13 BETA_JAVA9
+	 */
+	int ACC_MODULE       = 0x8000;
+
+	/**
 	 * Indicates a mandated parameter, such as this$1 (added in Java SE 8).
 	 * @since 3.10
 	 */
 	int ACC_MANDATED     = 0x8000;
+	/**
+	 * Indicates an open module in module-info file (added in Java SE 9).
+	 * @since 3.13 BETA_JAVA9
+	 */
+	int ACC_OPEN			= 0x0020;
+
+	/**
+	 * Indicates a transitive requires in module-info file (added in Java SE 9).
+	 * @since 3.13 BETA_JAVA9
+	 */
+	int ACC_TRANSITIVE     = 0x0020;
+
+	/**
+	 * Indicates a static requires in module-info file (added in Java SE 9).
+	 * @since 3.13 BETA_JAVA9
+	 */
+	int ACC_STATIC_PHASE	= 0x0040;
 }
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IModuleAttribute.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IModuleAttribute.java
new file mode 100644
index 0000000..ef004d33
--- /dev/null
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IModuleAttribute.java
@@ -0,0 +1,142 @@
+/*******************************************************************************
+ * Copyright (c) 2017 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.jdt.core.util;
+
+/**
+ * Description of a module's attributes as described in the JVM specifications.
+ *
+ * @noimplement This interface is not intended to be implemented by clients.
+ * @since 3.13 BETA_JAVA9
+ */
+public interface IModuleAttribute extends IClassFileAttribute {
+
+	/**
+	 * Answer back the module name index.
+	 *
+	 * @return the module name index
+	 */
+	int getModuleNameIndex();
+
+	/**
+	 * Answer back the module name.
+	 *
+	 * @return the module name
+	 */
+	char[] getModuleName();
+
+	/**
+	 * Answer back the module flags.
+	 *
+	 * @return the module flags
+	 */
+	int getModuleFlags();
+
+	/**
+	 * Answer back the module version index.
+	 *
+	 * @return the module version index
+	 */
+	int getModuleVersionIndex();
+
+	/**
+	 * Answer back the module version string.
+	 *
+	 * @return the module version string
+	 */
+	public char[] getModuleVersionValue();
+
+	/**
+	 * Answer back the requires count.
+	 *
+	 * @return the requires counts
+	 */
+	int getRequiresCount();
+
+	/**
+	 * Answer back the array of requires infos of the .class file,
+	 * an empty array if none.
+	 *
+	 * @return the array of requires infos of the .class file, an empty array if none
+	 */
+	IRequiresInfo[] getRequiresInfo();
+
+	/**
+	 * Answer back the exports count.
+	 *
+	 * @return the exports counts
+	 */
+	int getExportsCount();
+
+	/**
+	 * Answer back the array of exports infos of the .class file,
+	 * an empty array if none.
+	 *
+	 * @return the array of exports infos of the .class file, an empty array if none
+	 */
+	IPackageVisibilityInfo[] getExportsInfo();
+
+	/**
+	 * Answer back the opens count.
+	 *
+	 * @return the opens counts
+	 */
+	int getOpensCount();
+
+	/**
+	 * Answer back the array of opens infos of the .class file,
+	 * an empty array if none.
+	 *
+	 * @return the array of opens infos of the .class file, an empty array if none
+	 */
+	IPackageVisibilityInfo[] getOpensInfo();
+
+	/**
+	 * Answer back the uses count.
+	 *
+	 * @return the uses counts
+	 */
+	int getUsesCount();
+
+	/**
+	 * Answer back the array of uses indices of the .class file,
+	 * an empty array if none.
+	 *
+	 * @return the array of uses indices of the .class file, an empty array if none
+	 */
+	int[] getUsesIndices();
+
+	/**
+	 * Answer back the array of uses class names of the .class file,
+	 * an empty array if none.
+	 *
+	 * @return the array of uses class names of the .class file, an empty array if none
+	 */
+	char[][] getUsesClassNames();
+
+	/**
+	 * Answer back the provides count.
+	 *
+	 * @return the provides counts
+	 */
+	int getProvidesCount();
+
+	/**
+	 * Answer back the array of provides infos of the .class file,
+	 * an empty array if none.
+	 *
+	 * @return the array of provides infos of the .class file, an empty array if none
+	 */
+	IProvidesInfo[] getProvidesInfo();
+}
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IModuleMainClassAttribute.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IModuleMainClassAttribute.java
new file mode 100644
index 0000000..08f3d32
--- /dev/null
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IModuleMainClassAttribute.java
@@ -0,0 +1,39 @@
+/*******************************************************************************
+ * Copyright (c) 2017 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.jdt.core.util;
+
+/**
+ * Description of a Module Main Class Attribute as described in the JVMS9 4.7.27
+ *
+ * This interface may be implemented by clients.
+ *
+ * @since 3.13 BETA_JAVA9
+ */
+public interface IModuleMainClassAttribute extends IClassFileAttribute {
+
+	/**
+	 * Answer back the main class index.
+	 *
+	 * @return the main class index
+	 */
+	int getMainClassIndex();
+
+	/**
+	 * Answer back the name of main class.
+	 *
+	 * @return the name of main class
+	 */
+	char[] getMainClassName();
+}
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IModulePackagesAttribute.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IModulePackagesAttribute.java
new file mode 100644
index 0000000..725a976
--- /dev/null
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IModulePackagesAttribute.java
@@ -0,0 +1,46 @@
+/*******************************************************************************
+ * Copyright (c) 2017 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.jdt.core.util;
+
+/**
+ * Description of a Module Packages as described in the JVMS9 4.7.26
+ *
+ * This interface may be implemented by clients.
+ *
+ * @since 3.13 BETA_JAVA9
+ */
+public interface IModulePackagesAttribute extends IClassFileAttribute {
+
+	/**
+	 * Answer back the number of packages exported or opened.
+	 *
+	 * @return the number of packages exported or opened
+	 */
+	int getPackagesCount();
+
+	/**
+	 * Answer back the array of package indices.
+	 *
+	 * @return the array of package indices.
+	 */
+	int[] getPackageIndices();
+
+	/**
+	 * Answer back the names of packages. Answers an empty collection if none.
+	 *
+	 * @return the names of packages
+	 */
+	char[][] getPackageNames();
+}
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IPackageVisibilityInfo.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IPackageVisibilityInfo.java
new file mode 100644
index 0000000..57d119f
--- /dev/null
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IPackageVisibilityInfo.java
@@ -0,0 +1,66 @@
+/*******************************************************************************
+ * Copyright (c) 2017 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.jdt.core.util;
+
+/**
+ * Description of an exports/opens info as described in the JVM specifications 4.7.25
+ *
+ * @noimplement This interface is not intended to be implemented by clients.
+ * @since 3.13 BETA_JAVA9
+ */
+public interface IPackageVisibilityInfo {
+
+	/**
+	 * Answer back the exports/opens index.
+	 *
+	 * @return the exports/opens index
+	 */
+	int getIndex();
+
+	/**
+	 * Answer back the exports/opens package.
+	 *
+	 * @return the exports/opens package
+	 */
+	char[] getPackageName();
+
+	/**
+	 * Answer back the exports/opens flags.
+	 *
+	 * @return the exports/opens flags
+	 */
+	int getFlags();
+
+	/**
+	 * Answer back the number of targets, zero if none.
+	 *
+	 * @return the number of targets, zero if none.
+	 */
+	int getTargetsCount();
+
+	/**
+	 * Answer back the array of target module indices.
+	 *
+	 * @return the array of target module indices.
+	 */
+	int[] getTargetModuleIndices();
+
+	/**
+	 * Answer back the array of target module names.
+	 *
+	 * @return the array of target module names.
+	 */
+	char[][] getTargetModuleNames();
+}
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IProvidesInfo.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IProvidesInfo.java
new file mode 100644
index 0000000..c0c16f2
--- /dev/null
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IProvidesInfo.java
@@ -0,0 +1,61 @@
+/*******************************************************************************
+ * Copyright (c) 2017 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.jdt.core.util;
+
+/**
+ * Description of a provides info as described in JVMS9 4.7.25.
+ *
+ * @noimplement This interface is not intended to be implemented by clients.
+ * @noextend This interface is not intended to be extended by clients.
+ * @since 3.13 BETA_JAVA9
+ */
+public interface IProvidesInfo {
+
+	/**
+	 * Answer back the provides index.
+	 *
+	 * @return the provides index
+	 */
+	int getIndex();
+
+	/**
+	 * Answer back the service class/interface
+	 *
+	 * @return the service class/interface
+	 */
+	char[] getServiceName();
+
+	/**
+	 * Answer back the number of implementations.
+	 *
+	 * @return the number of implementations.
+	 */
+	int getImplementationsCount();
+
+	/**
+	 * Answer back the array of implementation indices.
+	 *
+	 * @return the array of implementation indices.
+	 */
+	int[] getImplementationIndices();
+
+	/**
+	 * Answer back the array of implementation names.
+	 *
+	 * @return the array of implementation names.
+	 */
+	char[][] getImplementationNames();
+
+}
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IRequiresInfo.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IRequiresInfo.java
new file mode 100644
index 0000000..4f01235
--- /dev/null
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/util/IRequiresInfo.java
@@ -0,0 +1,61 @@
+/*******************************************************************************
+ * Copyright (c) 2017 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.jdt.core.util;
+
+/**
+ * Description of a requires info as described in JVMS9 4.7.25
+ *
+ * @noimplement This interface is not intended to be implemented by clients.
+ * @noextend This interface is not intended to be extended by clients.
+ * @since 3.13 BETA_JAVA9
+ */
+public interface IRequiresInfo {
+
+	/**
+	 * Answer back the requires index.
+	 *
+	 * @return the requires index
+	 */
+	int getRequiresIndex();
+
+	/**
+	 * Answer back the requires module name.
+	 *
+	 * @return the requires module name
+	 */
+	char[] getRequiresModuleName();
+
+	/**
+	 * Answer back the requires flags.
+	 *
+	 * @return the requires flags
+	 */
+	int getRequiresFlags();
+
+	/**
+	 * Answer back the requires version index.
+	 *
+	 * @return the requires version index
+	 */
+	int getRequiresVersionIndex();
+
+	/**
+	 * Answer back the requires version string.
+	 *
+	 * @return the requires version string
+	 */
+	public char[] getRequiresVersionValue();
+
+}
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ClassFileReader.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ClassFileReader.java
index 81b196a..f452126 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ClassFileReader.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ClassFileReader.java
@@ -293,6 +293,12 @@ public class ClassFileReader extends ClassFileStruct implements IClassFileReader
 							this.attributes[attributesIndex++] = new RuntimeVisibleTypeAnnotationsAttribute(classFileBytes, this.constantPool, readOffset);
 						} else if (equals(attributeName, IAttributeNamesConstants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS)) {
 							this.attributes[attributesIndex++] = new RuntimeInvisibleTypeAnnotationsAttribute(classFileBytes, this.constantPool, readOffset);
+						} else if (equals(attributeName, IAttributeNamesConstants.MODULE)) {
+							this.attributes[attributesIndex++] = new ModuleAttribute(classFileBytes, this.constantPool, readOffset);
+						} else if (equals(attributeName, IAttributeNamesConstants.MODULE_PACKAGES)) {
+							this.attributes[attributesIndex++] = new ModulePackagesAttribute(classFileBytes, this.constantPool, readOffset);
+						} else if (equals(attributeName, IAttributeNamesConstants.MODULE_MAIN_CLASS)) {
+							this.attributes[attributesIndex++] = new ModuleMainClassAttribute(classFileBytes, this.constantPool, readOffset);
 						} else {
 							this.attributes[attributesIndex++] = new ClassFileAttribute(classFileBytes, this.constantPool, readOffset);
 						}
@@ -454,7 +460,7 @@ public class ClassFileReader extends ClassFileStruct implements IClassFileReader
 	 * @see IClassFileReader#isClass()
 	 */
 	public boolean isClass() {
-		return !isInterface();
+		return !(isInterface() || isModule());
 	}
 
 	/**
@@ -463,4 +469,7 @@ public class ClassFileReader extends ClassFileStruct implements IClassFileReader
 	public boolean isInterface() {
 		return (getAccessFlags() & IModifierConstants.ACC_INTERFACE) != 0;
 	}
+	private boolean isModule() {
+		return (getAccessFlags() & IModifierConstants.ACC_MODULE) != 0;
+	}
 }
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ConstantPool.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ConstantPool.java
index a9c4699..052c1a6 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ConstantPool.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ConstantPool.java
@@ -1,10 +1,14 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2011 IBM Corporation and others.
+ * Copyright (c) 2000, 2017 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *     IBM Corporation - initial API and implementation
  *******************************************************************************/
@@ -151,6 +155,24 @@ public class ConstantPool extends ClassFileStruct implements IConstantPool {
 				constantPoolEntry2.setMethodDescriptor(getUtf8ValueAt(methodDescriptorIndex));
 				constantPoolEntry = constantPoolEntry2;
 				break;
+			case IConstantPoolConstant.CONSTANT_Module :
+				constantPoolEntry2 = new ConstantPoolEntry2();
+				constantPoolEntry2.reset();
+				constantPoolEntry2.setKind(kind);
+				int moduleIndex = u2At(this.classFileBytes,  1, this.constantPoolOffset[index]);
+				constantPoolEntry2.setModuleIndex(moduleIndex);
+				constantPoolEntry2.setModuleName(getUtf8ValueAt(moduleIndex));
+				constantPoolEntry = constantPoolEntry2;
+				break;
+			case IConstantPoolConstant.CONSTANT_Package :
+				constantPoolEntry2 = new ConstantPoolEntry2();
+				constantPoolEntry2.reset();
+				constantPoolEntry2.setKind(kind);
+				int packageIndex = u2At(this.classFileBytes,  1, this.constantPoolOffset[index]);
+				constantPoolEntry2.setPackageIndex(packageIndex);
+				constantPoolEntry2.setPackageName(getUtf8ValueAt(packageIndex));
+				constantPoolEntry = constantPoolEntry2;
+				break;
 		}
 		return constantPoolEntry;
 	}
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ConstantPoolEntry.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ConstantPoolEntry.java
index 9f9cae6..ddf97b6 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ConstantPoolEntry.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ConstantPoolEntry.java
@@ -1,10 +1,14 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2011 IBM Corporation and others.
+ * Copyright (c) 2000, 2017 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *     IBM Corporation - initial API and implementation
  *******************************************************************************/
@@ -15,6 +19,7 @@ import org.eclipse.jdt.core.util.IConstantPoolEntry;
 /**
  * Default implementation of IConstantPoolEntry
  *
+ * @see ConstantPoolEntry2
  * @since 2.0
  */
 public class ConstantPoolEntry implements IConstantPoolEntry {
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ConstantPoolEntry2.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ConstantPoolEntry2.java
index c6c9686..1990886 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ConstantPoolEntry2.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ConstantPoolEntry2.java
@@ -1,29 +1,38 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2011 IBM Corporation and others.
+ * Copyright (c) 2000, 2017 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *     IBM Corporation - initial API and implementation
  *******************************************************************************/
 package org.eclipse.jdt.internal.core.util;
 
-import org.eclipse.jdt.core.util.IConstantPoolEntry2;
+import org.eclipse.jdt.core.util.IConstantPoolEntry3;
 
 /**
- * Default implementation of IConstantPoolEntry
+ * Default implementation of IConstantPoolEntry2 and IConstantPoolEntry3.
  *
  * @since 2.0
  */
-public class ConstantPoolEntry2 extends ConstantPoolEntry implements IConstantPoolEntry2 {
-	
+public class ConstantPoolEntry2 extends ConstantPoolEntry implements IConstantPoolEntry3 {
+
 	private int descriptorIndex;
 	private int referenceKind;
 	private int referenceIndex;
 	private int bootstrapMethodAttributeIndex;
 	
+	private int moduleIndex;
+	private char[] moduleName;
+	private int packageIndex;
+	private char[] packageName;
+
 	public int getDescriptorIndex() {
 		return this.descriptorIndex;
 	}
@@ -40,6 +49,22 @@ public class ConstantPoolEntry2 extends ConstantPoolEntry implements IConstantPo
 		return this.bootstrapMethodAttributeIndex;
 	}
 
+	public int getModuleIndex() {
+		return this.moduleIndex;
+	}
+
+	public char[] getModuleName() {
+		return this.moduleName;
+	}
+
+	public int getPackageIndex() {
+		return this.packageIndex;
+	}
+
+	public char[] getPackageName() {
+		return this.packageName;
+	}
+
 	public void setDescriptorIndex(int descriptorIndex) {
 		this.descriptorIndex = descriptorIndex;
 	}
@@ -56,11 +81,31 @@ public class ConstantPoolEntry2 extends ConstantPoolEntry implements IConstantPo
 		this.bootstrapMethodAttributeIndex = bootstrapMethodAttributeIndex;
 	}
 	
+	public void setModuleIndex(int moduleIndex) {
+		this.moduleIndex = moduleIndex;
+	}
+
+	public void setModuleName(char[] moduleName) {
+		this.moduleName = moduleName;
+	}
+
+	public void setPackageIndex(int packageIndex) {
+		this.packageIndex = packageIndex;
+	}
+
+	public void setPackageName(char[] packageName) {
+		this.packageName = packageName;
+	}
+
 	public void reset() {
 		super.reset();
 		this.descriptorIndex = 0;
 		this.referenceKind = 0;
 		this.referenceIndex = 0;
 		this.bootstrapMethodAttributeIndex = 0;
+		this.moduleIndex = 0;
+		this.moduleName = null;
+		this.packageIndex = 0;
+		this.packageName = null;
 	}
 }
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java
index 1e7dd39..f28fec4 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2016 IBM Corporation and others.
+ * Copyright (c) 2000, 2017 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -179,6 +179,30 @@ public class Disassembler extends ClassFileBytesDisassembler {
 				IModifierConstants.ACC_FINAL,
 		});
 	}
+	private final void decodeModifiersForModuleRequires(StringBuffer buffer, int accessFlags) {
+		int[] checkBits = new int[] {
+				IModifierConstants.ACC_TRANSITIVE,
+				IModifierConstants.ACC_STATIC_PHASE,
+		};
+		boolean firstModifier = true;
+		for (int i = 0, max = checkBits.length; i < max; i++) {
+			switch(checkBits[i]) {
+				case IModifierConstants.ACC_TRANSITIVE :
+					firstModifier = appendModifier(buffer, accessFlags, IModifierConstants.ACC_TRANSITIVE, "transitive", firstModifier); //$NON-NLS-1$
+					break;
+				case IModifierConstants.ACC_STATIC_PHASE :
+					firstModifier = appendModifier(buffer, accessFlags, IModifierConstants.ACC_STATIC_PHASE, "protected", firstModifier); //$NON-NLS-1$
+					break;
+			}
+		}
+		if (!firstModifier) {
+			buffer.append(Messages.disassembler_space);
+		}
+	}
+	private final void decodeModifiersForModule(StringBuffer buffer, int accessFlags) {
+		appendModifier(buffer, accessFlags, IModifierConstants.ACC_OPEN, "open", true); //$NON-NLS-1$
+		buffer.append(Messages.disassembler_space);
+	}
 	public static String escapeString(String s) {
 		return decodeStringValue(s);
 	}
@@ -1015,7 +1039,8 @@ public class Disassembler extends ClassFileBytesDisassembler {
 		IClassFileAttribute runtimeInvisibleTypeAnnotationsAttribute = Util.getAttribute(classFileReader, IAttributeNamesConstants.RUNTIME_INVISIBLE_TYPE_ANNOTATIONS);
 
 		IClassFileAttribute bootstrapMethods = Util.getAttribute(classFileReader, IAttributeNamesConstants.BOOTSTRAP_METHODS);
-	
+		IModuleAttribute moduleAttribute = (IModuleAttribute) Util.getAttribute(classFileReader, IAttributeNamesConstants.MODULE);
+
 		if (checkMode(mode, DETAILED)) {
 			// disassemble compact version of annotations
 			if (runtimeInvisibleAnnotationsAttribute != null) {
@@ -1055,9 +1080,12 @@ public class Disassembler extends ClassFileBytesDisassembler {
 		}
 	
 		final boolean isAnnotation = (accessFlags & IModifierConstants.ACC_ANNOTATION) != 0;
+		final boolean isModule = (accessFlags & IModifierConstants.ACC_MODULE) != 0;
 		boolean isInterface = false;
 		if (isEnum) {
 			buffer.append("enum "); //$NON-NLS-1$
+		} else if (isModule) {
+			// skip - process under module attribute
 		} else if (classFileReader.isClass()) {
 			buffer.append("class "); //$NON-NLS-1$
 		} else {
@@ -1076,7 +1104,7 @@ public class Disassembler extends ClassFileBytesDisassembler {
 			if (signatureAttribute != null) {
 				disassembleGenericSignature(mode, buffer, signatureAttribute.getSignature());
 			}
-		} else {
+		} else if (!isModule) {
 			buffer.append(className);
 		}
 	
@@ -1110,15 +1138,29 @@ public class Disassembler extends ClassFileBytesDisassembler {
 				}
 			}
 		}
-		buffer.append(Messages.bind(Messages.disassembler_opentypedeclaration));
+		if (!isModule)
+			buffer.append(Messages.bind(Messages.disassembler_opentypedeclaration));
 		if (checkMode(mode, SYSTEM)) {
 			disassemble(classFileReader.getConstantPool(), buffer, lineSeparator, 1);
 		}
+		if (isModule && moduleAttribute != null) { // print attributes - module package and main class only if the mandatory module attribute non-null
+			decodeModifiersForModule(buffer, accessFlags);
+			buffer.append("module"); //$NON-NLS-1$
+			buffer.append(Messages.disassembler_space);
+			buffer.append(moduleAttribute.getModuleName());
+			buffer.append(Messages.disassembler_space);
+			buffer.append(Messages.bind(Messages.disassembler_opentypedeclaration));
+			disassembleModule(moduleAttribute, buffer, lineSeparator, 1);
+			IModulePackagesAttribute modulePackagesAttribute = (IModulePackagesAttribute) Util.getAttribute(classFileReader, IAttributeNamesConstants.MODULE_PACKAGES);
+			disassembleModule(modulePackagesAttribute, buffer, lineSeparator, 1);
+			IModuleMainClassAttribute mainClassAttribute = (IModuleMainClassAttribute) Util.getAttribute(classFileReader, IAttributeNamesConstants.MODULE_MAIN_CLASS);
+			disassembleModule(mainClassAttribute, buffer, lineSeparator, 1);
+		}
 		disassembleTypeMembers(classFileReader, className, buffer, lineSeparator, 1, mode, isEnum);
 		if (checkMode(mode, SYSTEM | DETAILED)) {
 			IClassFileAttribute[] attributes = classFileReader.getAttributes();
 			int length = attributes.length;
-			IEnclosingMethodAttribute enclosingMethodAttribute = getEnclosingMethodAttribute(classFileReader);
+			IEnclosingMethodAttribute enclosingMethodAttribute = (IEnclosingMethodAttribute) Util.getAttribute(classFileReader, IAttributeNamesConstants.ENCLOSING_METHOD);
 			int remainingAttributesLength = length;
 			if (innerClassesAttribute != null) {
 				remainingAttributesLength--;
@@ -1135,9 +1177,13 @@ public class Disassembler extends ClassFileBytesDisassembler {
 			if (bootstrapMethods != null) {
 				remainingAttributesLength--;
 			}
+			if (moduleAttribute != null) {
+				remainingAttributesLength--;
+			}
 			if (innerClassesAttribute != null
 					|| enclosingMethodAttribute != null
 					|| bootstrapMethods != null
+					|| moduleAttribute != null
 					|| remainingAttributesLength != 0) {
 				// this test is to ensure we don't insert more than one line separator
 				if (buffer.lastIndexOf(lineSeparator) != buffer.length() - lineSeparator.length()) {
@@ -1179,7 +1225,9 @@ public class Disassembler extends ClassFileBytesDisassembler {
 								&& attribute != runtimeVisibleTypeAnnotationsAttribute
 								&& !CharOperation.equals(attribute.getAttributeName(), IAttributeNamesConstants.DEPRECATED)
 								&& !CharOperation.equals(attribute.getAttributeName(), IAttributeNamesConstants.SYNTHETIC)
-								&& attribute != bootstrapMethods) {
+								&& attribute != bootstrapMethods
+								&& attribute != moduleAttribute
+								) {
 							disassemble(attribute, buffer, lineSeparator, 0, mode);
 						}
 					}
@@ -1191,6 +1239,130 @@ public class Disassembler extends ClassFileBytesDisassembler {
 		return buffer.toString();
 	}
 
+	private void disassembleModule(IModuleAttribute moduleAttribute, StringBuffer buffer, String lineSeparator, int tabNumber) {
+		writeNewLine(buffer, lineSeparator, tabNumber);
+		char[] moduleVersion = moduleAttribute.getModuleVersionValue();
+		if (moduleVersion == null) {
+			moduleVersion = Messages.disassembler_module_version_none.toCharArray();
+		}
+		buffer.append(Messages.bind(Messages.disassembler_module_version, new String(moduleVersion)));
+		IRequiresInfo[] requiresInfo = moduleAttribute.getRequiresInfo();
+		if (requiresInfo.length > 0) {
+			writeNewLine(buffer, lineSeparator, 0);
+			for (int i = 0, max = requiresInfo.length; i < max; i++) {
+				writeNewLine(buffer, lineSeparator, tabNumber);
+				disassemble(requiresInfo[i], buffer, lineSeparator, tabNumber);
+			}
+		}
+		IPackageVisibilityInfo[] exportInfos = moduleAttribute.getExportsInfo();
+		if (exportInfos.length > 0) {
+			writeNewLine(buffer, lineSeparator, 0);
+			for (int i = 0, max = exportInfos.length; i < max; i++) {
+				writeNewLine(buffer, lineSeparator, tabNumber);
+				disassemble(exportInfos[i], buffer, lineSeparator, tabNumber, true);
+			}
+		}
+		IPackageVisibilityInfo[] opensInfos = moduleAttribute.getOpensInfo();
+		if (opensInfos.length > 0) {
+			writeNewLine(buffer, lineSeparator, 0);
+			for (int i = 0, max = opensInfos.length; i < max; i++) {
+				writeNewLine(buffer, lineSeparator, tabNumber);
+				disassemble(opensInfos[i], buffer, lineSeparator, tabNumber, false);
+			}
+		}
+		char[][] usesNames = moduleAttribute.getUsesClassNames();
+		if (usesNames.length > 0) {
+			writeNewLine(buffer, lineSeparator, 0);
+			for (int i = 0, max = usesNames.length; i < max; i++) {
+				writeNewLine(buffer, lineSeparator, tabNumber);
+				buffer.append("uses " + CharOperation.charToString(CharOperation.replaceOnCopy(usesNames[i], '/','.'))); //$NON-NLS-1$
+			}
+		}
+		IProvidesInfo[] providesInfos = moduleAttribute.getProvidesInfo();
+		if (providesInfos.length > 0) {
+			writeNewLine(buffer, lineSeparator, 0);
+			for (int i = 0, max = providesInfos.length; i < max; i++) {
+				writeNewLine(buffer, lineSeparator, tabNumber);
+				disassemble(providesInfos[i], buffer, lineSeparator, tabNumber);
+			}
+		}
+	}
+	private void convertModuleNames(StringBuffer buffer, char[] name) {
+		buffer.append(CharOperation.replaceOnCopy(CharOperation.replaceOnCopy(name, '$','.'), '/','.'));				
+	}
+
+	private void disassembleModule(IModulePackagesAttribute modulePackagesAttribute, StringBuffer buffer, String lineSeparator, int tabNumber) {
+		if (modulePackagesAttribute == null) return;
+		writeNewLine(buffer, lineSeparator, tabNumber);
+		writeNewLine(buffer, lineSeparator, tabNumber);
+		buffer.append(Messages.disassembler_modulepackagesattributeheader);
+		char[][] names = modulePackagesAttribute.getPackageNames();
+		for (int i = 0, l = modulePackagesAttribute.getPackagesCount(); i < l; ++i) {
+			writeNewLine(buffer, lineSeparator, tabNumber + 1);
+			convertModuleNames(buffer, names[i]);				
+		}
+		writeNewLine(buffer, lineSeparator, 0);
+	}
+
+	private void disassembleModule(IModuleMainClassAttribute moduleMainClassAttribute, StringBuffer buffer, String lineSeparator, int tabNumber) {
+		if (moduleMainClassAttribute == null) return;
+		writeNewLine(buffer, lineSeparator, tabNumber);
+		buffer.append(Messages.disassembler_modulemainclassattributeheader);
+		writeNewLine(buffer, lineSeparator, tabNumber + 1);
+		convertModuleNames(buffer, moduleMainClassAttribute.getMainClassName());				
+		writeNewLine(buffer, lineSeparator, 0);
+	}
+
+	private void disassemble(IProvidesInfo iProvidesInfo, StringBuffer buffer, String lineSeparator, int tabNumber) {
+		buffer.append("provides"); //$NON-NLS-1$
+		buffer.append(Messages.disassembler_space);
+		convertModuleNames(buffer, iProvidesInfo.getServiceName());
+		buffer.append(Messages.disassembler_space);
+		char[][] implementations = iProvidesInfo.getImplementationNames();
+		if (implementations.length > 0) {
+			buffer.append( "with"); //$NON-NLS-1$
+			buffer.append(Messages.disassembler_space);
+			for (int i = 0, l = implementations.length; i < l; ++i) {
+				if (i != 0) {
+					buffer
+						.append(Messages.disassembler_comma)
+						.append(Messages.disassembler_space);
+				}
+				convertModuleNames(buffer, implementations[i]);				
+			}
+		}
+		buffer.append(';');		
+	}
+
+	private void disassemble(IPackageVisibilityInfo iPackageVisibilityInfo, StringBuffer buffer, String lineSeparator,
+			int tabNumber, boolean isExports) {
+		buffer.append(isExports ? "exports" : "opens"); //$NON-NLS-1$ //$NON-NLS-2$
+		buffer.append(Messages.disassembler_space);
+		convertModuleNames(buffer, iPackageVisibilityInfo.getPackageName());
+		char[][] targets = iPackageVisibilityInfo.getTargetModuleNames();		
+		if (targets.length > 0) {
+			buffer.append(Messages.disassembler_space);
+			buffer.append( "to"); //$NON-NLS-1$
+			buffer.append(Messages.disassembler_space);
+			for (int i = 0, l = targets.length; i < l; ++i) {
+				if (i != 0) {
+					buffer
+						.append(Messages.disassembler_comma)
+						.append(Messages.disassembler_space);
+				}
+				buffer.append(targets[i]);
+			}
+		}
+		buffer.append(';');		
+	}
+
+	private void disassemble(IRequiresInfo iRequiresInfo, StringBuffer buffer, String lineSeparator, int tabNumber) {
+		buffer.append("requires "); //$NON-NLS-1$
+		decodeModifiersForModuleRequires(buffer, iRequiresInfo.getRequiresFlags());
+		buffer.append(iRequiresInfo.getRequiresModuleName());
+		buffer.append(';');		
+	}
+
 	private void disassembleGenericSignature(int mode, StringBuffer buffer, final char[] signature) {
 		CharOperation.replace(signature, '/', '.');
 		final char[][] typeParameters = Signature.getTypeParameters(signature);
@@ -1337,7 +1509,7 @@ public class Disassembler extends ClassFileBytesDisassembler {
 					}));
 			}
 		}
-		final ILocalVariableTypeTableAttribute localVariableTypeAttribute= (ILocalVariableTypeTableAttribute) getAttribute(IAttributeNamesConstants.LOCAL_VARIABLE_TYPE_TABLE, codeAttribute);
+		final ILocalVariableTypeTableAttribute localVariableTypeAttribute= (ILocalVariableTypeTableAttribute) Util.getAttribute(codeAttribute, IAttributeNamesConstants.LOCAL_VARIABLE_TYPE_TABLE);
 		final int localVariableTypeTableLength = localVariableTypeAttribute == null ? 0 : localVariableTypeAttribute.getLocalVariableTypeTableLength();
 		if (localVariableTypeTableLength != 0) {
 			int tabNumberForLocalVariableAttribute = tabNumber + 2;
@@ -2456,25 +2628,6 @@ public class Disassembler extends ClassFileBytesDisassembler {
 		return Messages.disassembler_description;
 	}
 
-	private IEnclosingMethodAttribute getEnclosingMethodAttribute(IClassFileReader classFileReader) {
-		IClassFileAttribute[] attributes = classFileReader.getAttributes();
-		for (int i = 0, max = attributes.length; i < max; i++) {
-			if (CharOperation.equals(attributes[i].getAttributeName(), IAttributeNamesConstants.ENCLOSING_METHOD)) {
-				return (IEnclosingMethodAttribute) attributes[i];
-			}
-		}
-		return null;
-	}
-	private IClassFileAttribute getAttribute(final char[] attributeName, final ICodeAttribute codeAttribute) {
-		IClassFileAttribute[] attributes = codeAttribute.getAttributes();
-		for (int i = 0, max = attributes.length; i < max; i++) {
-			if (CharOperation.equals(attributes[i].getAttributeName(), attributeName)) {
-				return attributes[i];
-			}
-		}
-		return null;
-	}
-
 	private char[][] getParameterNames(char[] methodDescriptor, ICodeAttribute codeAttribute, IMethodParametersAttribute parametersAttribute, int accessFlags) {
 		int paramCount = Signature.getParameterCount(methodDescriptor);
 		char[][] parameterNames = new char[paramCount][];
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Messages.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Messages.java
index 7362b46..bb289bf 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Messages.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Messages.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2015 IBM Corporation and others.
+ * Copyright (c) 2000, 2017 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -323,6 +323,10 @@ public final class Messages extends NLS {
 	public static String disassembler_extendedannotation_typepath_typeargument;
 	public static String disassembler_extendedannotation_typepath_innertype;
 	public static String disassembler_localvariabletargetheader;
+	public static String disassembler_module_version;
+	public static String disassembler_module_version_none;
+	public static String disassembler_modulepackagesattributeheader;
+	public static String disassembler_modulemainclassattributeheader;
 
 	public static String disassembler_runtimevisibleannotationsattributeheader;
 	public static String disassembler_runtimeinvisibleannotationsattributeheader;
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ModuleAttribute.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ModuleAttribute.java
new file mode 100644
index 0000000..2436e07
--- /dev/null
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ModuleAttribute.java
@@ -0,0 +1,225 @@
+/*******************************************************************************
+ * Copyright (c) 2017 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.jdt.internal.core.util;
+
+import org.eclipse.jdt.core.compiler.CharOperation;
+import org.eclipse.jdt.core.util.ClassFormatException;
+import org.eclipse.jdt.core.util.IConstantPool;
+import org.eclipse.jdt.core.util.IConstantPoolConstant;
+import org.eclipse.jdt.core.util.IConstantPoolEntry;
+import org.eclipse.jdt.core.util.IConstantPoolEntry3;
+import org.eclipse.jdt.core.util.IModuleAttribute;
+import org.eclipse.jdt.core.util.IPackageVisibilityInfo;
+import org.eclipse.jdt.core.util.IProvidesInfo;
+import org.eclipse.jdt.core.util.IRequiresInfo;
+
+/**
+ * @since 3.13 BETA_JAVA9
+ */
+public class ModuleAttribute extends ClassFileAttribute implements IModuleAttribute {
+
+	static final IRequiresInfo[] NO_REQUIRES = new IRequiresInfo[0];
+	static final IPackageVisibilityInfo[] NO_PACKAGE_VISIBILITY_INFOS = new IPackageVisibilityInfo[0];
+	static final int[] NO_USES = new int[0];
+	static final IProvidesInfo[] NO_PROVIDES_INFOS = new IProvidesInfo[0];
+	private int moduleNameIndex;
+	private char[] moduleName;
+	private int moduleFlags;
+	private int moduleVersionIndex;
+	private char[] moduleVersionValue;
+	private int requiresCount;
+	private IRequiresInfo[] requiresInfo;
+	private int exportsCount;
+	private IPackageVisibilityInfo[] exportsInfo;
+	private int opensCount;
+	private IPackageVisibilityInfo[] opensInfo;
+	private int usesCount;
+	private int[] usesIndices;
+	private char[][] usesNames;
+	private int providesCount;
+	private IProvidesInfo[] providesInfo;
+
+	ModuleAttribute(byte[] classFileBytes, IConstantPool constantPool, int offset) throws ClassFormatException {
+		super(classFileBytes, constantPool, offset);
+		int readOffset = 6; // skip attribute_name_index & attribute_length
+		this.moduleNameIndex = u2At(classFileBytes, readOffset, offset);
+		readOffset += 2;
+		IConstantPoolEntry constantPoolEntry = constantPool.decodeEntry(this.moduleNameIndex);
+		if (constantPoolEntry.getKind() != IConstantPoolConstant.CONSTANT_Module) {
+			throw new ClassFormatException(ClassFormatException.INVALID_CONSTANT_POOL_ENTRY);
+		}
+		this.moduleName = ((IConstantPoolEntry3) constantPoolEntry).getModuleName();
+		this.moduleFlags = u2At(classFileBytes, readOffset, offset);
+		readOffset += 2;
+		this.moduleVersionIndex = u2At(classFileBytes, readOffset, offset);
+		readOffset += 2;
+		if (this.moduleVersionIndex != 0) {
+			constantPoolEntry = constantPool.decodeEntry(this.moduleVersionIndex);
+			if (constantPoolEntry.getKind() != IConstantPoolConstant.CONSTANT_Utf8) {
+				throw new ClassFormatException(ClassFormatException.INVALID_CONSTANT_POOL_ENTRY);
+			}
+			this.moduleVersionValue = constantPoolEntry.getUtf8Value();
+		} else {
+			this.moduleVersionValue = CharOperation.NO_CHAR;
+		}
+
+		this.requiresCount = u2At(classFileBytes, readOffset, offset);
+		readOffset += 2;
+		if (this.requiresCount != 0) {
+			this.requiresInfo = new RequiresInfo[this.requiresCount];
+			for (int i = 0; i < this.requiresCount; i++) {
+				this.requiresInfo [i] = new RequiresInfo(classFileBytes, constantPool, offset + readOffset);
+				readOffset += 6;
+			}
+		} else {
+			this.requiresInfo = NO_REQUIRES;
+		}
+
+		this.exportsCount = u2At(classFileBytes, readOffset, offset);
+		readOffset += 2;
+		if (this.exportsCount != 0) {
+			this.exportsInfo = new PackageVisibilityInfo[this.exportsCount];
+			for (int i = 0; i < this.exportsCount; i++) {
+				this.exportsInfo [i] = new PackageVisibilityInfo(classFileBytes, constantPool, offset + readOffset);
+				readOffset += 6 + 2 * this.exportsInfo[i].getTargetsCount();
+			}
+		} else {
+			this.exportsInfo = NO_PACKAGE_VISIBILITY_INFOS;
+		}
+
+		this.opensCount = u2At(classFileBytes, readOffset, offset);
+		readOffset += 2;
+		if (this.opensCount != 0) {
+			this.opensInfo = new PackageVisibilityInfo[this.opensCount];
+			for (int i = 0; i < this.opensCount; i++) {
+				this.opensInfo [i] = new PackageVisibilityInfo(classFileBytes, constantPool, offset + readOffset);
+				readOffset += 6 + 2 * this.opensInfo[i].getTargetsCount();
+			}
+		} else {
+			this.opensInfo = NO_PACKAGE_VISIBILITY_INFOS;
+		}
+
+		this.usesCount = u2At(classFileBytes, readOffset, offset);
+		readOffset += 2;
+		if (this.usesCount != 0) {
+			this.usesIndices = new int[this.usesCount];
+			this.usesNames = new char[this.usesCount][];
+			for (int i = 0; i < this.usesCount; i++) {
+				this.usesIndices[i] = u2At(classFileBytes, readOffset, offset);
+				readOffset += 2;
+				constantPoolEntry = constantPool.decodeEntry(this.usesIndices[i]);
+				if (constantPoolEntry.getKind() != IConstantPoolConstant.CONSTANT_Class) {
+					throw new ClassFormatException(ClassFormatException.INVALID_CONSTANT_POOL_ENTRY);
+				}
+				this.usesNames[i] = constantPoolEntry.getClassInfoName();
+			}
+		} else {
+			this.usesIndices = NO_USES;
+			this.usesNames = CharOperation.NO_CHAR_CHAR;
+		}
+
+		this.providesCount = u2At(classFileBytes, readOffset, offset);
+		readOffset += 2;
+		if (this.providesCount != 0) {
+			this.providesInfo = new ProvidesInfo[this.providesCount];
+			for (int i = 0; i < this.providesCount; i++) {
+				this.providesInfo[i] = new ProvidesInfo(classFileBytes, constantPool, offset + readOffset);
+				readOffset += 4 + 2 * this.providesInfo[i].getImplementationsCount();
+			}
+		} else {
+			this.providesInfo = NO_PROVIDES_INFOS;
+		}
+	}
+
+	@Override
+	public int getModuleNameIndex() {
+		return this.moduleNameIndex;
+	}
+
+	@Override
+	public char[] getModuleName() {
+		return this.moduleName;
+	}
+
+	@Override
+	public int getModuleFlags() {
+		return this.moduleFlags;
+	}
+
+	@Override
+	public int getModuleVersionIndex() {
+		return this.moduleVersionIndex;
+	}
+
+	@Override
+	public char[] getModuleVersionValue() {
+		return this.moduleVersionValue;
+	}
+
+	@Override
+	public int getRequiresCount() {
+		return this.requiresCount;
+	}
+
+	@Override
+	public IRequiresInfo[] getRequiresInfo() {
+		return this.requiresInfo;
+	}
+
+	@Override
+	public int getExportsCount() {
+		return this.exportsCount;
+	}
+
+	@Override
+	public IPackageVisibilityInfo[] getExportsInfo() {
+		return this.exportsInfo;
+	}
+
+	@Override
+	public int getOpensCount() {
+		return this.opensCount;
+	}
+
+	@Override
+	public IPackageVisibilityInfo[] getOpensInfo() {
+		return this.opensInfo;
+	}
+
+	@Override
+	public int getUsesCount() {
+		return this.usesCount;
+	}
+
+	@Override
+	public int[] getUsesIndices() {
+		return this.usesIndices;
+	}
+
+	@Override
+	public char[][] getUsesClassNames() {
+		return this.usesNames;
+	}
+
+	@Override
+	public int getProvidesCount() {
+		return this.providesCount;
+	}
+
+	@Override
+	public IProvidesInfo[] getProvidesInfo() {
+		return this.providesInfo;
+	}
+}
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ModuleMainClassAttribute.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ModuleMainClassAttribute.java
new file mode 100644
index 0000000..5061c63
--- /dev/null
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ModuleMainClassAttribute.java
@@ -0,0 +1,60 @@
+/*******************************************************************************
+ * Copyright (c) 2017 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.jdt.internal.core.util;
+
+import org.eclipse.jdt.core.util.ClassFormatException;
+import org.eclipse.jdt.core.util.IConstantPool;
+import org.eclipse.jdt.core.util.IConstantPoolConstant;
+import org.eclipse.jdt.core.util.IConstantPoolEntry;
+import org.eclipse.jdt.core.util.IModuleMainClassAttribute;
+
+/**
+ * Default implementation of IModuleMainClassAttribute
+ */
+public class ModuleMainClassAttribute extends ClassFileAttribute implements IModuleMainClassAttribute {
+
+	private final int mainClassIndex;
+	private final char[] mainClassName;
+
+	/**
+	 * Constructor for ModuleMainClassAttribute.
+	 * @param classFileBytes
+	 * @param constantPool
+	 * @param offset
+	 * @throws ClassFormatException
+	 */
+	public ModuleMainClassAttribute(	byte[] classFileBytes,	IConstantPool constantPool,	int offset)	throws ClassFormatException {
+		super(classFileBytes, constantPool, offset);
+		int readOffset = 6;
+		this.mainClassIndex = u2At(classFileBytes, readOffset, offset);
+		readOffset += 2;
+		int index = u2At(classFileBytes, readOffset, offset);
+		IConstantPoolEntry constantPoolEntry = constantPool.decodeEntry(index);
+		if (constantPoolEntry.getKind() != IConstantPoolConstant.CONSTANT_Class) {
+			throw new ClassFormatException(ClassFormatException.INVALID_CONSTANT_POOL_ENTRY);
+		}
+		this.mainClassName = constantPoolEntry.getClassInfoName();
+	}
+
+	@Override
+	public int getMainClassIndex() {
+		return this.mainClassIndex;
+	}
+
+	@Override
+	public char[] getMainClassName() {
+		return this.mainClassName;
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ModulePackagesAttribute.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ModulePackagesAttribute.java
new file mode 100644
index 0000000..9932ad3
--- /dev/null
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ModulePackagesAttribute.java
@@ -0,0 +1,80 @@
+/*******************************************************************************
+ * Copyright (c) 2017 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.jdt.internal.core.util;
+
+import org.eclipse.jdt.core.compiler.CharOperation;
+import org.eclipse.jdt.core.util.ClassFormatException;
+import org.eclipse.jdt.core.util.IConstantPool;
+import org.eclipse.jdt.core.util.IConstantPoolConstant;
+import org.eclipse.jdt.core.util.IConstantPoolEntry;
+import org.eclipse.jdt.core.util.IConstantPoolEntry3;
+import org.eclipse.jdt.core.util.IModulePackagesAttribute;
+
+/**
+ * Default implementation of IModulePackagesAttribute
+ */
+public class ModulePackagesAttribute extends ClassFileAttribute implements IModulePackagesAttribute {
+
+	private int packagesCount;
+	private int[] packageIndices;
+	private char[][] packageNames;
+
+	/**
+	 * Constructor for ModulePackagesAttribute.
+	 * @param classFileBytes
+	 * @param constantPool
+	 * @param offset
+	 * @throws ClassFormatException
+	 */
+	public ModulePackagesAttribute(	byte[] classFileBytes,	IConstantPool constantPool,	int offset)	throws ClassFormatException {
+		super(classFileBytes, constantPool, offset);
+		int readOffset = 6;
+		final int length = u2At(classFileBytes, readOffset, offset);
+		readOffset += 2;
+		this.packagesCount = length;
+		if (length != 0) {
+			this.packageIndices = new int[length];
+			this.packageNames = new char[length][0];
+			for (int i = 0; i < length; i++) {
+				this.packageIndices[i] = u2At(classFileBytes, readOffset, offset);
+				readOffset += 2;
+				IConstantPoolEntry constantPoolEntry = constantPool.decodeEntry(this.packageIndices[i]);
+				if (constantPoolEntry.getKind() != IConstantPoolConstant.CONSTANT_Package) {
+					throw new ClassFormatException(ClassFormatException.INVALID_CONSTANT_POOL_ENTRY);
+				}
+				char[] name = ((IConstantPoolEntry3) constantPoolEntry).getPackageName();
+				this.packageNames[i] = name != null ? name : CharOperation.NO_CHAR;
+
+			}
+		} else {
+			this.packageNames = CharOperation.NO_CHAR_CHAR;
+		}
+	}
+
+	@Override
+	public int getPackagesCount() {
+		return this.packagesCount;
+	}
+
+	@Override
+	public int[] getPackageIndices() {
+		return this.packageIndices;
+	}
+
+	@Override
+	public char[][] getPackageNames() {
+		return this.packageNames;
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PackageVisibilityInfo.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PackageVisibilityInfo.java
new file mode 100644
index 0000000..fce0778
--- /dev/null
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/PackageVisibilityInfo.java
@@ -0,0 +1,97 @@
+/*******************************************************************************
+ * Copyright (c) 2017 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.jdt.internal.core.util;
+
+import org.eclipse.jdt.core.compiler.CharOperation;
+import org.eclipse.jdt.core.util.ClassFormatException;
+import org.eclipse.jdt.core.util.IConstantPool;
+import org.eclipse.jdt.core.util.IConstantPoolConstant;
+import org.eclipse.jdt.core.util.IConstantPoolEntry;
+import org.eclipse.jdt.core.util.IConstantPoolEntry3;
+import org.eclipse.jdt.core.util.IPackageVisibilityInfo;
+
+public class PackageVisibilityInfo extends ClassFileStruct implements IPackageVisibilityInfo {
+
+	private int index;
+	private char[] packageName;
+	private int flags;
+	private int targetsCount;
+	private int[] targetModuleIndices;
+	private char[][] targetModuleNames;
+
+	public PackageVisibilityInfo(byte[] classFileBytes, IConstantPool constantPool, int offset) throws ClassFormatException {
+		int readOffset = 0;
+		this.index = u2At(classFileBytes, readOffset, offset);
+		readOffset += 2;
+		IConstantPoolEntry constantPoolEntry = constantPool.decodeEntry(this.index);
+		if (constantPoolEntry.getKind() != IConstantPoolConstant.CONSTANT_Package) {
+			throw new ClassFormatException(ClassFormatException.INVALID_CONSTANT_POOL_ENTRY);
+		}
+		char[] tmp = ((IConstantPoolEntry3) constantPoolEntry).getPackageName();
+		this.packageName = tmp != null ? tmp : CharOperation.NO_CHAR;
+
+		this.flags = u2At(classFileBytes, readOffset, offset);
+		readOffset += 2;
+		this.targetsCount = u2At(classFileBytes, readOffset, offset);
+		readOffset += 2;
+
+		if (this.targetsCount != 0) {
+			this.targetModuleIndices = new int[this.targetsCount];
+			this.targetModuleNames = new char[this.targetsCount][];
+			for (int i = 0; i < this.targetsCount; i++) {
+				this.targetModuleIndices[i] = u2At(classFileBytes, readOffset, offset);
+				readOffset += 2;
+				constantPoolEntry = constantPool.decodeEntry(this.targetModuleIndices[i]);
+				if (constantPoolEntry.getKind() != IConstantPoolConstant.CONSTANT_Module) {
+					throw new ClassFormatException(ClassFormatException.INVALID_CONSTANT_POOL_ENTRY);
+				}
+				tmp = ((IConstantPoolEntry3) constantPoolEntry).getModuleName();
+				this.targetModuleNames[i] = tmp != null ? tmp : CharOperation.NO_CHAR;
+			}
+		} else {
+			this.targetModuleIndices = new int[0];
+			this.targetModuleNames = CharOperation.NO_CHAR_CHAR;
+		}
+	}
+	@Override
+	public int getIndex() {
+		return this.index;
+	}
+
+	@Override
+	public char[] getPackageName() {
+		return this.packageName;
+	}
+
+	@Override
+	public int getFlags() {
+		return this.flags;
+	}
+
+	@Override
+	public int getTargetsCount() {
+		return this.targetsCount;
+	}
+
+	@Override
+	public int[] getTargetModuleIndices() {
+		return this.targetModuleIndices;
+	}
+
+	@Override
+	public char[][] getTargetModuleNames() {
+		return this.targetModuleNames;
+	}
+}
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ProvidesInfo.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ProvidesInfo.java
new file mode 100644
index 0000000..b99c5c9
--- /dev/null
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ProvidesInfo.java
@@ -0,0 +1,81 @@
+/*******************************************************************************
+ * Copyright (c) 2017 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.jdt.internal.core.util;
+
+import org.eclipse.jdt.core.util.ClassFormatException;
+import org.eclipse.jdt.core.util.IConstantPool;
+import org.eclipse.jdt.core.util.IConstantPoolConstant;
+import org.eclipse.jdt.core.util.IConstantPoolEntry;
+import org.eclipse.jdt.core.util.IProvidesInfo;
+
+public class ProvidesInfo extends ClassFileStruct implements IProvidesInfo {
+	private int index;
+	private char[] serviceName;
+	private int implementationsCount;
+	private int[] implementationIndices;
+	private char[][] implementationNames;
+
+	public ProvidesInfo(byte[] classFileBytes, IConstantPool constantPool, int offset) throws ClassFormatException {
+		int readOffset = 0;
+		this.index = u2At(classFileBytes, readOffset, offset);
+		readOffset += 2;
+		IConstantPoolEntry constantPoolEntry = constantPool.decodeEntry(this.index);
+		if (constantPoolEntry.getKind() != IConstantPoolConstant.CONSTANT_Class) {
+			throw new ClassFormatException(ClassFormatException.INVALID_CONSTANT_POOL_ENTRY);
+		}
+		this.serviceName = constantPoolEntry.getClassInfoName();
+		this.implementationsCount = u2At(classFileBytes, readOffset, offset);
+		readOffset += 2;
+
+		if (this.implementationsCount != 0) {
+			this.implementationIndices = new int[this.implementationsCount];
+			this.implementationNames = new char[this.implementationsCount][];
+			for (int i = 0; i < this.implementationsCount; i++) {
+				this.implementationIndices[i] = u2At(classFileBytes, readOffset, offset);
+				readOffset += 2;
+				constantPoolEntry = constantPool.decodeEntry(this.implementationIndices[i]);
+				if (constantPoolEntry.getKind() != IConstantPoolConstant.CONSTANT_Class) {
+					throw new ClassFormatException(ClassFormatException.INVALID_CONSTANT_POOL_ENTRY);
+				}
+				this.implementationNames[i] = constantPoolEntry.getClassInfoName();
+			}
+		}
+	}
+	@Override
+	public int getIndex() {
+		return this.index;
+	}
+
+	@Override
+	public char[] getServiceName() {
+		return this.serviceName;
+	}
+
+	@Override
+	public int getImplementationsCount() {
+		return this.implementationsCount;
+	}
+
+	@Override
+	public int[] getImplementationIndices() {
+		return this.implementationIndices;
+	}
+
+	@Override
+	public char[][] getImplementationNames() {
+		return this.implementationNames;
+	}
+
+}
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/RequiresInfo.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/RequiresInfo.java
new file mode 100644
index 0000000..1f63e40
--- /dev/null
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/RequiresInfo.java
@@ -0,0 +1,81 @@
+/*******************************************************************************
+ * Copyright (c) 2017 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.jdt.internal.core.util;
+
+import org.eclipse.jdt.core.compiler.CharOperation;
+import org.eclipse.jdt.core.util.ClassFormatException;
+import org.eclipse.jdt.core.util.IConstantPool;
+import org.eclipse.jdt.core.util.IConstantPoolConstant;
+import org.eclipse.jdt.core.util.IConstantPoolEntry;
+import org.eclipse.jdt.core.util.IConstantPoolEntry3;
+import org.eclipse.jdt.core.util.IRequiresInfo;
+
+public class RequiresInfo extends ClassFileStruct implements IRequiresInfo {
+
+	private int index;
+	private char[] moduleName;
+	private int flags;
+	private int versionIndex;
+	private char[] versionName;
+
+	public RequiresInfo(byte[] classFileBytes, IConstantPool constantPool, int offset) throws ClassFormatException{
+		int readOffset = 0;
+		this.index = u2At(classFileBytes, readOffset, offset);
+		readOffset += 2;
+		IConstantPoolEntry constantPoolEntry = constantPool.decodeEntry(this.index);
+		if (constantPoolEntry.getKind() != IConstantPoolConstant.CONSTANT_Module) {
+			throw new ClassFormatException(ClassFormatException.INVALID_CONSTANT_POOL_ENTRY);
+		}
+		this.moduleName = ((IConstantPoolEntry3) constantPoolEntry).getModuleName();
+		this.flags = u2At(classFileBytes, readOffset, offset);
+		readOffset += 2;
+		this.versionIndex = u2At(classFileBytes, readOffset, offset);
+		readOffset += 2;
+		if (this.versionIndex != 0) {
+			constantPoolEntry = constantPool.decodeEntry(this.versionIndex);
+			if (constantPoolEntry.getKind() != IConstantPoolConstant.CONSTANT_Utf8) {
+				throw new ClassFormatException(ClassFormatException.INVALID_CONSTANT_POOL_ENTRY);
+			}
+			this.versionName = constantPoolEntry.getUtf8Value();
+		} else {
+			this.versionName = CharOperation.NO_CHAR;
+		}
+	}
+	@Override
+	public int getRequiresIndex() {
+		return this.index;
+	}
+
+	@Override
+	public char[] getRequiresModuleName() {
+		return this.moduleName;
+	}
+
+	@Override
+	public int getRequiresFlags() {
+		return this.flags;
+	}
+
+	@Override
+	public int getRequiresVersionIndex() {
+		return this.versionIndex;
+	}
+
+	@Override
+	public char[] getRequiresVersionValue() {
+		return this.versionName;
+	}
+
+}
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/messages.properties b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/messages.properties
index f8399f7..358751e 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/messages.properties
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/messages.properties
@@ -379,6 +379,10 @@ disassembler_extendedannotation_typepath_array=ARRAY
 disassembler_extendedannotation_typepath_innertype=INNER_TYPE
 disassembler_extendedannotation_typepath_wildcard=WILDCARD
 disassembler_extendedannotation_typepath_typeargument=TYPE_ARGUMENT({0})
+disassembler_module_version=// Version: {0}
+disassembler_module_version_none=<none>
+disassembler_modulepackagesattributeheader = Module packages:
+disassembler_modulemainclassattributeheader=Module main class:
 
 ### classfileformat decoding
 classfileformat_versiondetails =\ (version {0} : {1}.{2}, {3})

commit 243454d9ddff3b98b1fa12e536cfddbd176702ef
Author: Stephan Herrmann <stephan.herrmann@berlin.de>
Date:   Thu Jan 9 12:53:43 2014 +0100

    Bug 424205 - [1.8] Cannot infer type for diamond type with lambda on
    method invocation
    WIP - avoiding unnecessary complex work

40	1	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java
11	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java
index 4c9214a..1939d0d 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java
@@ -19,7 +19,7 @@ import junit.framework.Test;
 public class GenericsRegressionTest_1_8 extends AbstractRegressionTest {
 
 static {
-//	TESTS_NAMES = new String[] { "testBug414631" };
+//	TESTS_NAMES = new String[] { "testBug424205b" };
 //	TESTS_NUMBERS = new int[] { 40, 41, 43, 45, 63, 64 };
 //	TESTS_RANGE = new int[] { 11, -1 };
 }
@@ -464,4 +464,43 @@ public void testBug424075() {
 			"}\n"
 		});
 }
+public void testBug424205a() {
+	runConformTest(
+		new String[] {
+			"X.java",
+			"interface I {\n" + 
+			"	void bar(String t);\n" + 
+			"}\n" + 
+			"class X<T> implements I {\n" + 
+			"	public void bar(String t) {}\n" + 
+			"	X(String x) {}\n" + 
+			"	X(T x) {}\n" + 
+			"	public void one(X<I> c){}\n" + 
+			"	public void two() {\n" + 
+			"		X<I> i = new X<>((String s) -> { });\n" + 
+			"		one (i);\n" + 
+			"	}\n" + 
+			"}\n"
+		});
+}
+public void _testBug424205b() {
+	runConformTest(
+		new String[] {
+			"X.java",
+			"interface I {\n" + 
+			"	void bar(String t);\n" + 
+			"}\n" + 
+			"class X<T> implements I {\n" + 
+			"	public void bar(String t) {}\n" + 
+			"	X(String x) {}\n" + 
+			"	X(T x) {}\n" + 
+			"	public void one(X<I> c){}\n" + 
+			"	public void two() {\n" + 
+			"		one(new X<>((String s) -> { })); // 1. Three errors\n" + 
+			"		X<I> i = new X<>((String s) -> { }); // 2. Error - Comment out the previous line to see this error go away.\n" + 
+			"		one (i);\n" + 
+			"	}\n" + 
+			"}\n"
+		});
+}
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java
index d1bbb29..1e51068 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java
@@ -520,6 +520,17 @@ public TypeBinding[] inferElidedTypes(ReferenceBinding allocationType, Reference
 	if (factory instanceof ParameterizedGenericMethodBinding && factory.isValidBinding()) {
 		ParameterizedGenericMethodBinding genericFactory = (ParameterizedGenericMethodBinding) factory;
 		this.inferredReturnType = genericFactory.inferredReturnType;
+		// this is our last chance to inspect the result of the inference that is connected to the throw-away factory binding
+		InferenceContext18 infCtx18 = getInferenceContext(genericFactory);
+		if (infCtx18 != null && infCtx18.stepCompleted == InferenceContext18.BINDINGS_UPDATED) {
+			// refresh argumentTypes from updated bindings in arguments:
+			// (this shouldn't be strictly necessary, as FunctionExpression.isCompatibleWith() should give the same result,
+			//  but it's probably be a good idea to avoid the necessity to call isCompatibleWith() in the first place). 
+			for (int i = 0; i < argumentTypes.length; i++) {
+				if (argumentTypes[i] instanceof PolyTypeBinding)
+					argumentTypes[i] = this.arguments[i].resolvedType;
+			}
+		}
 		return ((ParameterizedTypeBinding)factory.returnType).arguments;
 	}
 	return null;
commit efe1773a267b3bdb803164d9b413b69c3685878f
Author: Stephan Herrmann <stephan.herrmann@berlin.de>
Date:   Sat Jan 11 18:14:12 2014 +0100

    Bug 424205 - [1.8] Cannot infer type for diamond type with lambda on
    method invocation

7	1	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_7.java
17	6	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java
6	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java
85	28	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java
2	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExplicitConstructorCall.java
6	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Invocation.java
3	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
2	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java
7	3	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java
10	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_7.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_7.java
index 9b556a8..156f877 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_7.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_7.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2011 IBM Corporation.
+ * Copyright (c) 2011, 2014 IBM Corporation.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -13,6 +13,7 @@
  *     IBM Corporation - initial API and implementation
  *     Stephan Herrmann - Contribution for
  *								Bug 400874 - [1.8][compiler] Inference infrastructure should evolve to meet JLS8 18.x (Part G of JSR335 spec)
+ *								Bug 424205 - [1.8] Cannot infer type for diamond type with lambda on method invocation
  *******************************************************************************/
 package org.eclipse.jdt.core.tests.compiler.regression;
 
@@ -1180,6 +1181,11 @@ public void test0026() {
 			"	X<Object> x4 = new X<>(1).idem();\n" + 
 			"	               ^^^^^^^^^^^^^^^^^\n" + 
 			"Type mismatch: cannot convert from X<Integer> to X<Object>\n" + 
+			"----------\n" + 
+			"2. ERROR in X.java (at line 15)\n" + 
+			"	int i = m(new X<>(\"\"));\n" + 
+			"	          ^^^^^^^^^^^\n" + 
+			"The constructor X<String>(String) is ambiguous\n" + 
 			"----------\n");
 }
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=344655
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java
index 61cfdcb..42b49c8 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java
@@ -19,7 +19,7 @@ import junit.framework.Test;
 public class GenericsRegressionTest_1_8 extends AbstractRegressionTest {
 
 static {
-//	TESTS_NAMES = new String[] { "testBug424845" };
+//	TESTS_NAMES = new String[] { "testBug424205b" };
 //	TESTS_NUMBERS = new int[] { 40, 41, 43, 45, 63, 64 };
 //	TESTS_RANGE = new int[] { 11, -1 };
 }
@@ -361,7 +361,7 @@ public void _testBug424403() {
 		});
 }
 public void testBug401850a() {
-	runConformTest(
+	runNegativeTest(
 		new String[] {
 			"X.java",
 			"import java.util.List;\n" + 
@@ -372,7 +372,13 @@ public void testBug401850a() {
 			"   int m(X<String> xs) { return 0; }\n" + 
 			"   int i = m(new X<>(\"\"));\n" + 
 			"}\n"
-		});
+		},
+		"----------\n" + 
+		"1. ERROR in X.java (at line 7)\n" + 
+		"	int i = m(new X<>(\"\"));\n" + 
+		"	          ^^^^^^^^^^^\n" + 
+		"The constructor X<String>(String) is ambiguous\n" + 
+		"----------\n");
 }
 public void testBug401850b() {
 	runNegativeTest(
@@ -483,14 +489,14 @@ public void testBug424205a() {
 			"}\n"
 		});
 }
-public void _testBug424205b() {
+public void testBug424205b() {
 	runConformTest(
 		new String[] {
 			"X.java",
 			"interface I {\n" + 
 			"	void bar(String t);\n" + 
 			"}\n" + 
-			"class X<T> implements I {\n" + 
+			"public class X<T> implements I {\n" + 
 			"	public void bar(String t) {}\n" + 
 			"	X(String x) {}\n" + 
 			"	X(T x) {}\n" + 
@@ -499,9 +505,14 @@ public void _testBug424205b() {
 			"		one(new X<>((String s) -> { })); // 1. Three errors\n" + 
 			"		X<I> i = new X<>((String s) -> { }); // 2. Error - Comment out the previous line to see this error go away.\n" + 
 			"		one (i);\n" + 
+			"	}\n" +
+			"	public static void main(String[] args) {\n" +
+			"		System.out.println(\"main\");\n" +
+			"		new X<Integer>(\"one\").two();\n" +
 			"	}\n" + 
 			"}\n"
-		});
+		},
+		"main");
 }
 public void testBug424712a() {
 	runNegativeTest(
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java
index 93f9bd7..b8ef725 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2013 IBM Corporation and others.
+ * Copyright (c) 2000, 2014 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -25,6 +25,7 @@
  *								Bug 400874 - [1.8][compiler] Inference infrastructure should evolve to meet JLS8 18.x (Part G of JSR335 spec)
  *								Bug 424742 - [1.8] NPE in LambdaExpression.isCompatibleWith
  *								Bug 424710 - [1.8][compiler] CCE in SingleNameReference.localVariableBinding
+ *								Bug 424205 - [1.8] Cannot infer type for diamond type with lambda on method invocation
  *     Jesper S Moller - Contributions for
  *								bug 382721 - [1.8][compiler] Effectively final variables needs special treatment
  *								bug 412153 - [1.8][compiler] Check validity of annotations which may be repeatable
@@ -662,6 +663,9 @@ public abstract class ASTNode implements TypeConstants, TypeIds {
 						return; // not yet ready for pushing type information down to arguments
 					variableArity &= infCtx.isVarArgs(); // TODO: if no infCtx is available, do we have to re-check if this is a varargs invocation?
 				}
+			} else if (invocation instanceof AllocationExpression) {
+				if (((AllocationExpression)invocation).suspendedResolutionState != null)
+					return; // not yet ready
 			}
 			
 			final TypeBinding[] parameters = candidateMethod.parameters;
@@ -679,7 +683,7 @@ public abstract class ASTNode implements TypeConstants, TypeIds {
 
 				if (argument instanceof Invocation) {
 					Invocation innerInvocation = (Invocation)argument;
-					MethodBinding binding = innerInvocation.binding();
+					MethodBinding binding = innerInvocation.binding(parameterType);
 					if (binding instanceof ParameterizedGenericMethodBinding) {
 						ParameterizedGenericMethodBinding parameterizedMethod = (ParameterizedGenericMethodBinding) binding;
 						InferenceContext18 innerContext = innerInvocation.getInferenceContext(parameterizedMethod);
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java
index 554afc8..27b2ca7 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java
@@ -28,6 +28,7 @@
  *							Bug 424727 - [compiler][null] NullPointerException in nullAnnotationUnsupportedLocation(ProblemReporter.java:5708)
  *							Bug 424710 - [1.8][compiler] CCE in SingleNameReference.localVariableBinding
  *							Bug 425152 - [1.8] [compiler] Lambda Expression not resolved but flow analyzed leading to NPE.
+ *							Bug 424205 - [1.8] Cannot infer type for diamond type with lambda on method invocation
  *     Jesper S Moller <jesper@selskabet.org> - Contributions for
  *							bug 378674 - "The method can be declared as static" is wrong
  *     Andy Clement (GoPivotal, Inc) aclement@gopivotal.com - Contributions for
@@ -68,6 +69,29 @@ public class AllocationExpression extends Expression implements Invocation {
 	 // hold on to this context from invocation applicability inference until invocation type inference (per method candidate):
 	private SimpleLookupTable/*<PGMB,IC18>*/ inferenceContexts;
 
+	/** Record to keep state between different parts of resolution. */
+	ResolutionState suspendedResolutionState;
+	class ResolutionState {
+		BlockScope scope;
+		boolean isDiamond;
+		boolean diamondNeedsDeferring;
+		boolean argsContainCast;
+		boolean polyExpressionSeen;
+		boolean cannotInferDiamond; // request the an error be reported in due time
+		TypeBinding[] argumentTypes;
+
+		ResolutionState(BlockScope scope, boolean isDiamond, boolean diamonNeedsDeferring,
+				boolean argsContainCast, boolean polyExpressionSeen, TypeBinding[] argumentTypes)
+		{
+			this.scope = scope;
+			this.isDiamond = isDiamond;
+			this.diamondNeedsDeferring = diamonNeedsDeferring;
+			this.argsContainCast = argsContainCast;
+			this.polyExpressionSeen = polyExpressionSeen;
+			this.argumentTypes = argumentTypes;
+		}
+	}
+
 public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, FlowInfo flowInfo) {
 	// check captured variables are initialized in current context (26134)
 	checkCapturedLocalInitializationIfNecessary((ReferenceBinding)this.binding.declaringClass.erasure(), currentScope, flowInfo);
@@ -442,24 +466,47 @@ public TypeBinding resolveType(BlockScope scope) {
 		scope.problemReporter().cannotInstantiate(this.type, this.resolvedType);
 		return this.resolvedType;
 	}
-	if (isDiamond && !diamondNeedsDeferring) {
+	ResolutionState state = new ResolutionState(scope, isDiamond, diamondNeedsDeferring, argsContainCast, polyExpressionSeen, argumentTypes);
+	if (diamondNeedsDeferring) {
+		this.suspendedResolutionState = state; // resolving to be continued later (via binding(TypeBinding targetType)).
+		return new PolyTypeBinding(this);
+	}
+
+	if (!resolvePart2(state))
+		return null;
+	return resolvePart3(state);
+}
+
+/** Second part of resolving that may happen multiple times during overload resolution. */
+boolean resolvePart2(ResolutionState state) {
+	// TODO: all information persisted during this method may need to be stored per targetType?
+	if (state.isDiamond) {
 		ReferenceBinding genericType = ((ParameterizedTypeBinding) this.resolvedType).genericType();
-		TypeBinding [] inferredTypes = inferElidedTypes(genericType, genericType.enclosingType(), argumentTypes, scope);
+		TypeBinding [] inferredTypes = inferElidedTypes(genericType, genericType.enclosingType(), state.argumentTypes, state.scope);
 		if (inferredTypes == null) {
-			scope.problemReporter().cannotInferElidedTypes(this);
-			return this.resolvedType = null;
+			if (!state.diamondNeedsDeferring) {
+				state.scope.problemReporter().cannotInferElidedTypes(this);
+				this.resolvedType = null;
+			} else {
+				state.cannotInferDiamond = true; // defer reporting
+			}
+			return false;
 		}
-		this.resolvedType = this.type.resolvedType = scope.environment().createParameterizedType(genericType, inferredTypes, ((ParameterizedTypeBinding) this.resolvedType).enclosingType());
+		this.resolvedType = this.type.resolvedType = state.scope.environment().createParameterizedType(genericType, inferredTypes, ((ParameterizedTypeBinding) this.resolvedType).enclosingType());
+		state.cannotInferDiamond = false;
  	}
 	ReferenceBinding receiverType = (ReferenceBinding) this.resolvedType;
-	if (diamondNeedsDeferring) {
-		// in this preliminary mode use the raw receiver type for constructor lookup, to avoid spurious type errors
-		receiverType = (ReferenceBinding) receiverType.original();
-		receiverType = scope.environment().createRawType(receiverType, receiverType.enclosingType());
-	}
-	
-	this.binding = findConstructorBinding(scope, this, receiverType, argumentTypes, polyExpressionSeen);
+	this.binding = findConstructorBinding(state.scope, this, receiverType, state.argumentTypes, state.polyExpressionSeen);
+	return true;
+}
 
+/** Final part of resolving (once): check and report various error conditions. */
+TypeBinding resolvePart3(ResolutionState state) {
+	this.suspendedResolutionState = null;
+	if (state.cannotInferDiamond) {
+		state.scope.problemReporter().cannotInferElidedTypes(this);
+		return this.resolvedType = null;
+	}
 	ReferenceBinding allocationType = (ReferenceBinding) this.resolvedType;
 	if (!this.binding.isValidBinding()) {
 		if (this.binding.declaringClass == null) {
@@ -468,31 +515,29 @@ public TypeBinding resolveType(BlockScope scope) {
 		if (this.type != null && !this.type.resolvedType.isValidBinding()) {
 			return null;
 		}
-		scope.problemReporter().invalidConstructor(this, this.binding);
+		state.scope.problemReporter().invalidConstructor(this, this.binding);
 		return this.resolvedType;
 	}
 	if ((this.binding.tagBits & TagBits.HasMissingType) != 0) {
-		scope.problemReporter().missingTypeInConstructor(this, this.binding);
+		state.scope.problemReporter().missingTypeInConstructor(this, this.binding);
 	}
-	if (isMethodUseDeprecated(this.binding, scope, true))
-		scope.problemReporter().deprecatedMethod(this.binding, this);
-	if (!diamondNeedsDeferring) { // don't check diamonds before we have the target type
-		if (checkInvocationArguments(scope, null, allocationType, this.binding, this.arguments, argumentTypes, argsContainCast, this)) {
-			this.bits |= ASTNode.Unchecked;
-		}
+	if (isMethodUseDeprecated(this.binding, state.scope, true)) {
+		state.scope.problemReporter().deprecatedMethod(this.binding, this);
+	}
+	if (checkInvocationArguments(state.scope, null, allocationType, this.binding, this.arguments, state.argumentTypes, state.argsContainCast, this)) {
+		this.bits |= ASTNode.Unchecked;
 	}
 	if (this.typeArguments != null && this.binding.original().typeVariables == Binding.NO_TYPE_VARIABLES) {
-		scope.problemReporter().unnecessaryTypeArgumentsForMethodInvocation(this.binding, this.genericTypeArguments, this.typeArguments);
+		state.scope.problemReporter().unnecessaryTypeArgumentsForMethodInvocation(this.binding, this.genericTypeArguments, this.typeArguments);
 	}
-	if (!isDiamond && this.resolvedType.isParameterizedTypeWithActualArguments()) {
- 		checkTypeArgumentRedundancy((ParameterizedTypeBinding) this.resolvedType, this.resolvedType.enclosingType(), argumentTypes, scope);
+	if (!state.isDiamond && this.resolvedType.isParameterizedTypeWithActualArguments()) {
+ 		checkTypeArgumentRedundancy((ParameterizedTypeBinding) this.resolvedType, this.resolvedType.enclosingType(), state.argumentTypes, state.scope);
  	}
+	CompilerOptions compilerOptions = state.scope.compilerOptions();
 	if (compilerOptions.isAnnotationBasedNullAnalysisEnabled && (this.binding.tagBits & TagBits.IsNullnessKnown) == 0) {
-		new ImplicitNullAnnotationVerifier(scope.environment(), compilerOptions.inheritNullAnnotations)
-				.checkImplicitNullAnnotations(this.binding, null/*srcMethod*/, false, scope);
+		new ImplicitNullAnnotationVerifier(state.scope.environment(), compilerOptions.inheritNullAnnotations)
+				.checkImplicitNullAnnotations(this.binding, null/*srcMethod*/, false, state.scope);
 	}
-	if (diamondNeedsDeferring)
-		return new PolyTypeBinding(this);
 	return allocationType;
 }
 
@@ -643,9 +688,21 @@ public boolean statementExpression() {
 }
 
 //-- interface Invocation: --
-public MethodBinding binding() {
+public MethodBinding binding(TypeBinding targetType) {
+	if (this.suspendedResolutionState != null && targetType != null) {
+		setExpectedType(targetType);
+		if (!resolvePart2(this.suspendedResolutionState))
+			return null;
+	}
 	return this.binding;
 }
+public TypeBinding checkAgainstFinalTargetType(TypeBinding targetType) {
+	if (this.suspendedResolutionState != null) {
+		return resolvePart3(this.suspendedResolutionState);
+		// also: should this trigger any propagation to inners, too?
+	}
+	return super.checkAgainstFinalTargetType(targetType);
+}
 public Expression[] arguments() {
 	return this.arguments;
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExplicitConstructorCall.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExplicitConstructorCall.java
index 63469d1..99fab46 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExplicitConstructorCall.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExplicitConstructorCall.java
@@ -21,6 +21,7 @@
  *								Bug 400874 - [1.8][compiler] Inference infrastructure should evolve to meet JLS8 18.x (Part G of JSR335 spec)
  *								Bug 424710 - [1.8][compiler] CCE in SingleNameReference.localVariableBinding
  *								Bug 425152 - [1.8] [compiler] Lambda Expression not resolved but flow analyzed leading to NPE.
+ *								Bug 424205 - [1.8] Cannot infer type for diamond type with lambda on method invocation
  *        Andy Clement (GoPivotal, Inc) aclement@gopivotal.com - Contributions for
  *                          Bug 409245 - [1.8][compiler] Type annotations dropped when call is routed through a synthetic bridge method
  *******************************************************************************/
@@ -491,7 +492,7 @@ public class ExplicitConstructorCall extends Statement implements Invocation, Ex
 	}
 
 	// -- interface Invocation: --
-	public MethodBinding binding() {
+	public MethodBinding binding(TypeBinding targetType) {
 		return this.binding;
 	}
 	public Expression[] arguments() {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Invocation.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Invocation.java
index 0175399..6020964 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Invocation.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Invocation.java
@@ -18,6 +18,7 @@ import org.eclipse.jdt.internal.compiler.lookup.InferenceContext18;
 import org.eclipse.jdt.internal.compiler.lookup.InvocationSite;
 import org.eclipse.jdt.internal.compiler.lookup.MethodBinding;
 import org.eclipse.jdt.internal.compiler.lookup.ParameterizedGenericMethodBinding;
+import org.eclipse.jdt.internal.compiler.lookup.TypeBinding;
 
 /**
  * Abstraction for invocation AST nodes that can trigger 
@@ -30,7 +31,11 @@ public interface Invocation extends InvocationSite {
 
 	Expression[] arguments();
 
-	MethodBinding binding();
+	/**
+	 * Answer the resolved method binding of this invocation.
+	 * If a target type is given, the invocation gets a chance to do repeated method lookup.
+	 */
+	MethodBinding binding(TypeBinding targetType);
 
 	/**
 	 * Register the given inference context, which produced the given method as its intermediate result.
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
index aeb4c7b..02ba631 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
@@ -23,6 +23,7 @@
  *							Bug 423504 - [1.8] Implement "18.5.3 Functional Interface Parameterization Inference"
  *							Bug 425142 - [1.8][compiler] NPE in ConstraintTypeFormula.reduceSubType
  *							Bug 425153 - [1.8] Having wildcard allows incompatible types in a lambda expression
+ *							Bug 424205 - [1.8] Cannot infer type for diamond type with lambda on method invocation
  *******************************************************************************/
 package org.eclipse.jdt.internal.compiler.ast;
 
@@ -503,6 +504,8 @@ public class LambdaExpression extends FunctionalExpression implements ReferenceC
 			if (method != null) { // when called from type inference
 				if (((TypeVariableBinding)targetType).declaringElement == method)
 					return false;
+				if (method.isConstructor() && ((TypeVariableBinding)targetType).declaringElement == method.declaringClass)
+					return false;
 			} else { // for internal calls
 				TypeVariableBinding typeVariable = (TypeVariableBinding) targetType;
 				if (typeVariable.declaringElement instanceof MethodBinding)
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java
index 1c816a7..86c4942 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java
@@ -42,6 +42,7 @@
  *								Bug 423504 - [1.8] Implement "18.5.3 Functional Interface Parameterization Inference"
  *								Bug 424710 - [1.8][compiler] CCE in SingleNameReference.localVariableBinding
  *								Bug 425152 - [1.8] [compiler] Lambda Expression not resolved but flow analyzed leading to NPE.
+ *								Bug 424205 - [1.8] Cannot infer type for diamond type with lambda on method invocation
  *     Jesper S Moller - Contributions for
  *								Bug 378674 - "The method can be declared as static" is wrong
  *        Andy Clement (GoPivotal, Inc) aclement@gopivotal.com - Contributions for
@@ -953,7 +954,7 @@ public boolean receiverIsImplicitThis() {
 	return this.receiver.isImplicitThis();
 }
 // -- interface Invocation: --
-public MethodBinding binding() {
+public MethodBinding binding(TypeBinding targetType) {
 	return this.binding;
 }
 public Expression[] arguments() {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java
index a166424..5d074b9 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java
@@ -88,7 +88,7 @@ class ConstraintExpressionFormula extends ConstraintFormula {
 			// - parenthesized expression : these are transparent in our AST
 			if (this.left instanceof Invocation) {
 				Invocation invocation = (Invocation) this.left;
-				MethodBinding previousMethod = invocation.binding();
+				MethodBinding previousMethod = invocation.binding(this.right);
 				MethodBinding method = previousMethod;
 				// ignore previous (inner) inference result and do a fresh start:
 				if (previousMethod instanceof ParameterizedMethodBinding) {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java
index 9c2908d..ff6b1e5 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2013 GK Software AG.
+ * Copyright (c) 2013, 2014 GK Software AG.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -883,7 +883,8 @@ public class InferenceContext18 {
 	public void rebindInnerPolies(BoundSet bounds, TypeBinding[] parameterTypes) {
 		// This updates all remaining poly expressions that are direct arguments of the current invocation:
 		// (handles FunctionalExpression & ConditionalExpression)
-		acceptPendingPolyArguments(bounds, parameterTypes, this.inferenceKind == CHECK_VARARG);
+		boolean isVarargs = this.inferenceKind == CHECK_VARARG;
+		acceptPendingPolyArguments(bounds, parameterTypes, isVarargs);
 		// This loops over all poly expressions for which a sub-inference was triggered:
 		// (handles generic invocations)
 		int len = this.innerPolies.size();
@@ -891,7 +892,10 @@ public class InferenceContext18 {
 			Expression inner = (Expression) this.innerPolies.get(i);
 			if (inner instanceof Invocation) {
 				Invocation innerMessage = (Invocation) inner;
-				MethodBinding original = innerMessage.binding().original();
+				MethodBinding binding = innerMessage.binding(getParameter(parameterTypes, i, isVarargs));
+				if (binding == null)
+					continue;
+				MethodBinding original = binding.original();
 
 				// apply inference results onto the allocation type of inner diamonds:
 				if (original.isConstructor() && inner.isPolyExpression()) {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
index 319badf..c74bb45 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2013 IBM Corporation and others.
+ * Copyright (c) 2000, 2014 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -25,6 +25,7 @@
  *								Bug 416176 - [1.8][compiler][null] null type annotations cause grief on type variables
  *								Bug 400874 - [1.8][compiler] Inference infrastructure should evolve to meet JLS8 18.x (Part G of JSR335 spec)
  *								Bug 424710 - [1.8][compiler] CCE in SingleNameReference.localVariableBinding
+ *								Bug 424205 - [1.8] Cannot infer type for diamond type with lambda on method invocation
  *     Jesper S Moller - Contributions for
  *								Bug 378674 - "The method can be declared as static" is wrong
  *  							Bug 405066 - [1.8][compiler][codegen] Implement code generation infrastructure for JSR335
@@ -783,7 +784,7 @@ public abstract class Scope {
 						}
 						TypeBinding resolvedType = invocArg.resolvedType; 
 						if (!resolvedType.isCompatibleWith(targetType, this)) {
-							MethodBinding innerBinding = innerPoly.binding();
+							MethodBinding innerBinding = innerPoly.binding(null); // 1. try without update
 							if (innerBinding instanceof ParameterizedGenericMethodBinding) {
 								ParameterizedGenericMethodBinding innerParameterized = (ParameterizedGenericMethodBinding) innerBinding;
 								InferenceContext18 infCtx18 = innerPoly.getInferenceContext(innerParameterized);
@@ -810,6 +811,13 @@ public abstract class Scope {
 										}
 									}
 								}
+							} else if (innerPoly instanceof AllocationExpression) {
+								MethodBinding updatedMethod = innerPoly.binding(targetType); // 2. try with updating
+								if (updatedMethod != innerBinding && updatedMethod != null && updatedMethod.isValidBinding()) {
+									if (updatedMethod.declaringClass.isCompatibleWith(targetType))
+										return COMPATIBLE;
+									return NOT_COMPATIBLE;
+								}
 							}
 						}
 					}

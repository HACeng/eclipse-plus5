commit eba08540864c5a072bab6eda44e20e08ad2dd7a0
Author: Jayaprakash Arthanareeswaran <jarthana@in.ibm.com>
Date:   Thu Jan 24 14:10:51 2013 +0530

    Fix for bug 391893 - [1.8][compiler] Add receiver parameter support in
    DOM/AST

3	1	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/RunAllJava8Tests.java
55	0	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
9	0	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTMatcherTest.java
4	0	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/RunConverterTests.java
9	10	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java
0	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java
39	0	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java
8	0	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java
4	0	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java
133	2	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java
1	1	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SimpleName.java
16	0	org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/NaiveASTFlattener.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/RunAllJava8Tests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/RunAllJava8Tests.java
index c77fcd0..365cbe8 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/RunAllJava8Tests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/RunAllJava8Tests.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2011, 2012 IBM Corporation and others.
+ * Copyright (c) 2011, 2013 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -35,6 +35,7 @@ import org.eclipse.jdt.core.tests.compiler.regression.NegativeLambdaExpressionsT
 import org.eclipse.jdt.core.tests.compiler.regression.NegativeTypeAnnotationTest;
 import org.eclipse.jdt.core.tests.compiler.regression.NullTypeAnnotationTest;
 import org.eclipse.jdt.core.tests.dom.ASTConverter15JLS8Test;
+import org.eclipse.jdt.core.tests.dom.ASTConverter18Test;
 import org.eclipse.jdt.core.tests.dom.ASTConverterAST8Test;
 import org.eclipse.jdt.core.tests.dom.ASTConverterBugsTestJLS8;
 import org.eclipse.jdt.core.tests.dom.ASTConverterTestAST8_2;
@@ -67,6 +68,7 @@ public class RunAllJava8Tests extends TestCase {
 				ASTConverterAST8Test.class,
 				ASTConverterBugsTestJLS8.class,
 				ASTConverter15JLS8Test.class,
+				ASTConverter18Test.class,
 		};
 	}
 	public static Test suite() {
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
index 6d7ec1c..061c916 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
@@ -23,9 +23,12 @@ import org.eclipse.jdt.core.ICompilationUnit;
 import org.eclipse.jdt.core.JavaModelException;
 import org.eclipse.jdt.core.dom.AST;
 import org.eclipse.jdt.core.dom.ASTNode;
+import org.eclipse.jdt.core.dom.AnnotatableType;
 import org.eclipse.jdt.core.dom.CompilationUnit;
 import org.eclipse.jdt.core.dom.MethodDeclaration;
+import org.eclipse.jdt.core.dom.SimpleType;
 import org.eclipse.jdt.core.dom.SingleVariableDeclaration;
+import org.eclipse.jdt.core.dom.TypeDeclaration;
 
 public class ASTConverter18Test extends ConverterTestSetup {
 
@@ -962,4 +965,56 @@ public class ASTConverter18Test extends ConverterTestSetup {
 		simpleType = (SimpleType) type;
 		assertEquals("Outer3", simpleType.toString());
 	}
+	// https://bugs.eclipse.org/bugs/show_bug.cgi?id=391893
+	public void test0007() throws JavaModelException {
+		String contents =
+			"public class X {\n" +
+			"	public void foo(@Marker @Marker2 X this, @Marker2 @Marker int i){}\n" +
+			"}\n" +
+			"@java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_USE)\n" +
+			"@interface Marker {}\n" +
+			"@java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_USE)\n" +
+			"@interface Marker2 {}";
+		this.workingCopy = getWorkingCopy("/Converter18/src/X.java", true);
+		ASTNode node = buildAST(contents, this.workingCopy);
+		assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, node.getNodeType());
+		CompilationUnit unit = (CompilationUnit) node;
+		node = getASTNode(unit, 0, 0);
+		assertEquals("Not a method Declaration", ASTNode.METHOD_DECLARATION, node.getNodeType());
+		MethodDeclaration method = (MethodDeclaration) node;
+		AnnotatableType receiver = method.getReceiverType();
+		assertEquals("Not an annotatable type", ASTNode.SIMPLE_TYPE, receiver.getNodeType());
+		assertEquals("Incorrect receiver signature", "@Marker @Marker2 X", ((SimpleType) receiver).toString());
+		assertEquals("Incorrect annotations on receiver", 2, ((SimpleType) receiver).annotations().size());
+		assertNull("Incorrect receiver qualfier", method.getReceiverQualifier());
+	}
+	// https://bugs.eclipse.org/bugs/show_bug.cgi?id=391893
+	public void test0008() throws JavaModelException {
+		String contents =
+			"public class X {\n" +
+			"	class Y {\n" +
+			"		public Y(@Marker @Marker2 X X.this, @Marker2 @Marker int i){}\n" +
+			"	}\n" +
+			"}\n" +
+			"@java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_USE)\n" +
+			"@interface Marker {}\n" +
+			"@java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_USE)\n" +
+			"@interface Marker2 {}";
+
+		this.workingCopy = getWorkingCopy("/Converter18/src/X.java", true);
+		ASTNode node = buildAST(contents, this.workingCopy);
+		assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, node.getNodeType());
+		CompilationUnit unit = (CompilationUnit) node;
+		node = getASTNode(unit, 0, 0);
+		assertEquals("Not a type Declaration", ASTNode.TYPE_DECLARATION, node.getNodeType());
+		TypeDeclaration innerType = (TypeDeclaration) node;
+		assertEquals("Incorrect no of methods", 1, innerType.getMethods().length);
+		MethodDeclaration method = innerType.getMethods()[0];
+		AnnotatableType receiver = method.getReceiverType();
+		assertEquals("Not an annotatable type", ASTNode.SIMPLE_TYPE, receiver.getNodeType());
+		assertEquals("Incorrect receiver signature", "@Marker @Marker2 X", ((SimpleType) receiver).toString());
+		assertEquals("Incorrect annotations on receiver", 2, ((SimpleType) receiver).annotations().size());
+		assertNotNull("Incorrect receiver qualfier", method.getReceiverQualifier());
+		assertEquals("Incorrect receiver qualfier", "X", method.getReceiverQualifier().getFullyQualifiedName());
+	}
 }
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTMatcherTest.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTMatcherTest.java
index cf39f0d..1d41acb 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTMatcherTest.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTMatcherTest.java
@@ -68,6 +68,8 @@ public class ASTMatcherTest extends org.eclipse.jdt.core.tests.junit.extension.T
 	Block B1;
 	SingleVariableDeclaration V1;
 	SingleVariableDeclaration V2;
+	AnnotatableType R1;
+	Name Q1;
 	VariableDeclarationFragment W1;
 	VariableDeclarationFragment W2;
 	FieldDeclaration FD1;
@@ -134,6 +136,10 @@ public class ASTMatcherTest extends org.eclipse.jdt.core.tests.junit.extension.T
 		this.S1 = this.ast.newContinueStatement();
 		this.S2 = this.ast.newBreakStatement();
 		this.B1 = this.ast.newBlock();
+		if (this.ast.apiLevel() >= AST.JLS8) {
+			this.R1 = this.ast.newSimpleType(this.ast.newSimpleName("XYZ"));
+			this.Q1 = this.ast.newSimpleName("XYZ");
+		}
 		this.V1 = this.ast.newSingleVariableDeclaration();
 		this.V1.setType(this.ast.newPrimitiveType(PrimitiveType.INT));
 		this.V1.setName(this.ast.newSimpleName("a")); //$NON-NLS-1$
@@ -996,6 +1002,9 @@ public class ASTMatcherTest extends org.eclipse.jdt.core.tests.junit.extension.T
 			x1.typeParameters().add(this.TP1);
 			x1.typeParameters().add(this.TP2);
 			x1.setReturnType2(this.T1);
+			if (this.ast.apiLevel() >= AST.JLS8) {
+				x1.setReceiverType(this.R1);
+			}
 		}
 		x1.setName(this.N1);
 		x1.parameters().add(this.V1);
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/RunConverterTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/RunConverterTests.java
index ecc8530..091821b 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/RunConverterTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/RunConverterTests.java
@@ -5,6 +5,10 @@
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *     IBM Corporation - initial API and implementation
  *******************************************************************************/
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java
index e1828c8..a420cf1 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java
@@ -50,7 +50,6 @@ public abstract class AbstractMethodDeclaration
 	public Annotation[] annotations;
 	// jsr 308
 	public Receiver receiver;
-	public Annotation[] receiverAnnotations;
 	public Argument[] arguments;
 	public TypeReference[] thrownExceptions;
 	public Statement[] statements;
@@ -452,10 +451,6 @@ public abstract class AbstractMethodDeclaration
 			}
 		}
 		output.append(')');
-		if (this.receiverAnnotations != null) {
-			output.append(" "); //$NON-NLS-1$
-			printAnnotations(this.receiverAnnotations, output);
-		}
 		if (this.thrownExceptions != null) {
 			output.append(" throws "); //$NON-NLS-1$
 			for (int i = 0; i < this.thrownExceptions.length; i++) {
@@ -502,7 +497,8 @@ public abstract class AbstractMethodDeclaration
 			resolveJavadoc();
 			resolveAnnotations(this.scope, this.annotations, this.binding);
 			// jsr 308
-			resolveAnnotations(this.scope, this.receiverAnnotations, new Annotation.TypeUseBinding(Binding.TYPE_USE));
+			if (this.receiver != null && this.receiver.annotations != null)
+				resolveAnnotations(this.scope, this.receiver.annotations, new Annotation.TypeUseBinding(Binding.TYPE_USE));
 			validateNullAnnotations();
 			resolveStatements();
 			// check @Deprecated annotation presence
@@ -530,6 +526,7 @@ public abstract class AbstractMethodDeclaration
 		/* neither static methods nor methods in anonymous types can have explicit 'this' */
 		if (this.isStatic() || declaringClass.isAnonymousType()) {
 			this.scope.problemReporter().disallowedThisParameter(this.receiver);
+			this.receiver = null;
 			return; // No need to do further validation
 		}
 
@@ -539,15 +536,12 @@ public abstract class AbstractMethodDeclaration
 			if (declaringClass.isStatic()
 					|| (declaringClass.tagBits & (TagBits.IsLocalType | TagBits.IsMemberType)) == 0) { /* neither member nor local type */
 				this.scope.problemReporter().disallowedThisParameter(this.receiver);
+				this.receiver = null;
 				return; // No need to do further validation
 			}
 			enclosingReceiver = enclosingReceiver.enclosingType();
 		}
 
-		if (enclosingReceiver != resolvedReceiverType) {
-			this.scope.problemReporter().illegalTypeForExplicitThis(this.receiver, enclosingReceiver);
-		}
-
 		char[][] tokens = (this.receiver.qualifyingName == null) ? null : this.receiver.qualifyingName.getName();
 		if (this.isConstructor()) {
 			if (tokens == null || tokens.length > 1 || !CharOperation.equals(enclosingReceiver.sourceName(), tokens[0])) {
@@ -558,6 +552,11 @@ public abstract class AbstractMethodDeclaration
 			this.scope.problemReporter().illegalQualifierForExplicitThis2(this.receiver);
 			this.receiver.qualifyingName = null;
 		}
+
+		if (enclosingReceiver != resolvedReceiverType) {
+			this.scope.problemReporter().illegalTypeForExplicitThis(this.receiver, enclosingReceiver);
+			this.receiver = null;
+		}
 	}
 	public void resolveJavadoc() {
 
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java
index 37db356..eb81321 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java
@@ -370,7 +370,6 @@ MethodBinding createMethod(AbstractMethodDeclaration method) {
 			problemReporter().illegalSourceLevelForThis(method.receiver);
 		}
 		if (method.receiver.annotations != null) {
-			method.receiverAnnotations = method.receiver.annotations;
 			method.bits |= ASTNode.HasTypeAnnotations;
 		}
 	}
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java
index 656fbd8..361ace6 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java
@@ -43,6 +43,7 @@ import org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference
 import org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference;
 import org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression;
 import org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference;
+import org.eclipse.jdt.internal.compiler.ast.Receiver;
 import org.eclipse.jdt.internal.compiler.ast.SingleNameReference;
 import org.eclipse.jdt.internal.compiler.ast.SingleTypeReference;
 import org.eclipse.jdt.internal.compiler.ast.StringLiteralConcatenation;
@@ -459,6 +460,14 @@ class ASTConverter {
 				methodHeaderEnd = thrownExceptionType.getStartPosition() + thrownExceptionType.getLength();				
 			}
 		}
+
+		if (methodDeclaration.receiver != null) {
+			if(this.ast.apiLevel >= AST.JLS8) {
+				convertAndSetReceiver(methodDeclaration, methodDecl);
+			} else {
+				methodDecl.setFlags(methodDecl.getFlags() | ASTNode.MALFORMED);
+			}
+		}
 		org.eclipse.jdt.internal.compiler.ast.Argument[] parameters = methodDeclaration.arguments;
 		int parametersLength = parameters == null ? 0 : parameters.length;
 		if (parametersLength > 0) {
@@ -779,6 +788,36 @@ class ASTConverter {
 		return annotationTypeMemberDeclaration2;
 	}
 
+	private void convertAndSetReceiver(AbstractMethodDeclaration method, MethodDeclaration methodDecl) {
+		Receiver receiver = method.receiver;
+		if (receiver.qualifyingName != null) {
+			final SimpleName name = new SimpleName(this.ast);
+			name.internalSetIdentifier(new String(receiver.qualifyingName.getName()[0]));
+			int start = receiver.qualifyingName.sourceStart;
+			int nameEnd = receiver.qualifyingName.sourceEnd;
+			name.setSourceRange(start, nameEnd - start + 1);
+			methodDecl.setReceiverQualifier(name);
+			if (this.resolveBindings) {
+				recordNodes(name, receiver);
+			}
+		}
+		AnnotatableType type = (AnnotatableType) convertType(receiver.type);
+		org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations = receiver.annotations;
+		int length = (annotations == null) ? 0 : annotations.length;
+		for (int i = 0; i < length; i++) {
+			type.annotations().add(convert(annotations[i]));
+		}
+		if (length > 0) {
+			int start = annotations[0].sourceStart;
+			type.setSourceRange(start, (receiver.type.sourceEnd - start + 1));
+		}
+		methodDecl.setReceiverType(type);
+		if (this.resolveBindings) {
+			recordNodes(type, receiver);
+			type.resolveBinding();
+		}
+	}
+
 	public SingleVariableDeclaration convert(org.eclipse.jdt.internal.compiler.ast.Argument argument) {
 		SingleVariableDeclaration variableDecl = new SingleVariableDeclaration(this.ast);
 		setModifiers(variableDecl, argument);
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java
index 3c14c0e..95c2e47 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java
@@ -1386,6 +1386,14 @@ public class ASTMatcher {
 				return false;
 			}
 		}
+		if (level >= AST.JLS8) {
+			if (!safeSubtreeMatch(node.getReceiverType(), o.getReceiverType())) {
+				return false;
+			}
+			if (!safeSubtreeMatch(node.getReceiverQualifier(), o.getReceiverQualifier())) {
+				return false;
+			}
+		}
 		return ((node.isConstructor() == o.isConstructor())
 				&& safeSubtreeMatch(node.getJavadoc(), o.getJavadoc())
 				&& safeSubtreeMatch(node.getName(), o.getName())
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java
index 77d48d4..055cd85 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/DefaultBindingResolver.java
@@ -43,6 +43,7 @@ import org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference
 import org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference;
 import org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference;
 import org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference;
+import org.eclipse.jdt.internal.compiler.ast.Receiver;
 import org.eclipse.jdt.internal.compiler.ast.SingleNameReference;
 import org.eclipse.jdt.internal.compiler.ast.SingleTypeReference;
 import org.eclipse.jdt.internal.compiler.ast.ThisReference;
@@ -1535,6 +1536,9 @@ class DefaultBindingResolver extends BindingResolver {
 		org.eclipse.jdt.internal.compiler.ast.ASTNode node = (org.eclipse.jdt.internal.compiler.ast.ASTNode) this.newAstToOldAst.get(type);
 		org.eclipse.jdt.internal.compiler.lookup.TypeBinding binding = null;
 		if (node != null) {
+			if (node instanceof Receiver) {
+				node = ((Receiver) node).type;
+			}
 			if (node instanceof ParameterizedQualifiedTypeReference) {
  				ParameterizedQualifiedTypeReference typeReference = (ParameterizedQualifiedTypeReference) node;
 				org.eclipse.jdt.internal.compiler.lookup.TypeBinding typeBinding = typeReference.resolvedType;
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java
index 3c5abcb..1946c00 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java
@@ -53,6 +53,23 @@ import java.util.List;
  * 			 { <b>,</b> FormalParameter } ] <b>)</b>
  *        [<b>throws</b> TypeName { <b>,</b> TypeName } ] Block
  * </pre>
+ * For JLS8 optional receiver parameter is added:
+ * <pre>
+ * MethodDeclaration:
+ *    [ Javadoc ] { ExtendedModifier }
+ *		  [ <b>&lt;</b> TypeParameter { <b>,</b> TypeParameter } <b>&gt;</b> ]
+ *        ( Type | <b>void</b> ) Identifier <b>(</b>
+ *        	[ ReceiverParameter ]
+ *         	[ <b>, </b> FormalParameter { <b>,</b> FormalParameter } ] <b>)</b> {<b>[</b> <b>]</b> }
+ *        [ <b>throws</b> TypeName { <b>,</b> TypeName } ] ( Block | <b>;</b> )
+ * ConstructorDeclaration:
+ *    [ Javadoc ] { ExtendedModifier }
+ *		  [ <b>&lt;</b> TypeParameter { <b>,</b> TypeParameter } <b>&gt;</b> ]
+ *        Identifier <b>(</b>
+ * 		  	[ ReceiverParameter ]
+ * 			[ <b>, </b> FormalParameter { <b>,</b> FormalParameter } ] <b>)</b>
+ *        [<b>throws</b> TypeName { <b>,</b> TypeName } ] Block
+ * </pre>
  * <p>
  * When a Javadoc comment is present, the source
  * range begins with the first character of the "/**" comment delimiter.
@@ -142,6 +159,22 @@ public class MethodDeclaration extends BodyDeclaration {
 		new ChildListPropertyDescriptor(MethodDeclaration.class, "parameters", SingleVariableDeclaration.class, CYCLE_RISK); //$NON-NLS-1$
 
 	/**
+	 * The "receiverType" structural property of this node type (element type:
+	 * {@link AnnotatableType}) (added in JLS8 API).
+	 * @since 3.9
+	 */
+	public static final ChildPropertyDescriptor RECEIVER_TYPE_PROPERTY =
+			new ChildPropertyDescriptor(MethodDeclaration.class, "receiverType", AnnotatableType.class, OPTIONAL, NO_CYCLE_RISK); //$NON-NLS-1$
+	
+	/**
+	 * The "receiverQualifier" structural property of this node type (element type:
+	 * {@link SimpleName}) (added in JLS8 API).
+	 * @since 3.9
+	 */
+	public static final ChildPropertyDescriptor RECEIVER_QUALIFIER_PROPERTY =
+			new ChildPropertyDescriptor(MethodDeclaration.class, "receiverQualifier", SimpleName.class, OPTIONAL, NO_CYCLE_RISK); //$NON-NLS-1$
+
+	/**
 	 * The "thrownExceptions" structural property of this node type (element type: {@link Name}) (Available in JLS2, JLS3, and JLS4 Only).
 	 * @since 3.0
 	 */
@@ -214,7 +247,7 @@ public class MethodDeclaration extends BodyDeclaration {
 		addProperty(BODY_PROPERTY, propertyList);
 		PROPERTY_DESCRIPTORS_3_0 = reapPropertyList(propertyList);
 
-		propertyList = new ArrayList(11);
+		propertyList = new ArrayList(13);
 		createPropertyList(MethodDeclaration.class, propertyList);
 		addProperty(JAVADOC_PROPERTY, propertyList);
 		addProperty(MODIFIERS2_PROPERTY, propertyList);
@@ -222,6 +255,8 @@ public class MethodDeclaration extends BodyDeclaration {
 		addProperty(TYPE_PARAMETERS_PROPERTY, propertyList);
 		addProperty(RETURN_TYPE2_PROPERTY, propertyList);
 		addProperty(NAME_PROPERTY, propertyList);
+		addProperty(RECEIVER_TYPE_PROPERTY, propertyList);
+		addProperty(RECEIVER_QUALIFIER_PROPERTY, propertyList);
 		addProperty(PARAMETERS_PROPERTY, propertyList);
 		addProperty(EXTRA_DIMENSIONS_PROPERTY, propertyList);
 		addProperty(THROWN_EXCEPTION_TYPES_PROPERTY, propertyList);
@@ -261,6 +296,16 @@ public class MethodDeclaration extends BodyDeclaration {
 	private SimpleName methodName = null;
 
 	/**
+	 * The explicit receiver type.
+	 */
+	private AnnotatableType receiverType = null;
+	
+	/**
+	 * Qualifying name if any of the explicit </code>this</code> parameter.
+	 */
+	private SimpleName receiverQualifier = null;
+
+	/**
 	 * The parameter declarations
 	 * (element type: {@link SingleVariableDeclaration}).
 	 * Defaults to an empty list.
@@ -427,6 +472,20 @@ public class MethodDeclaration extends BodyDeclaration {
 				return null;
 			}
 		}
+		if (property == RECEIVER_TYPE_PROPERTY) {
+			if (get) {
+				return this.receiverType;
+			} else {
+				setReceiverType((AnnotatableType) child);
+			}
+		}
+		if (property == RECEIVER_QUALIFIER_PROPERTY) {
+			if (get) {
+				return this.receiverQualifier;
+			} else {
+				setReceiverQualifier((SimpleName) child);
+			}
+		}
 		if (property == BODY_PROPERTY) {
 			if (get) {
 				return getBody();
@@ -510,6 +569,10 @@ public class MethodDeclaration extends BodyDeclaration {
 			result.setReturnType2(
 					(Type) ASTNode.copySubtree(target, getReturnType2()));
 		}
+		if (this.ast.apiLevel >= AST.JLS8) {
+			result.setReceiverType((AnnotatableType) ASTNode.copySubtree(target, this.receiverType));
+			result.setReceiverQualifier((SimpleName) ASTNode.copySubtree(target, this.receiverQualifier));
+		}
 		result.setConstructor(isConstructor());
 		result.setExtraDimensions(getExtraDimensions());
 		result.setName((SimpleName) getName().clone(target));
@@ -553,6 +616,10 @@ public class MethodDeclaration extends BodyDeclaration {
 			}
 			// n.b. visit return type even for constructors
 			acceptChild(visitor, getName());
+			if (this.ast.apiLevel >= AST.JLS8) {
+				acceptChild(visitor, this.receiverType);
+				acceptChild(visitor, this.receiverQualifier);
+			}
 			acceptChildren(visitor, this.parameters);
 			if (this.ast.apiLevel() < AST.JLS8) {
 				acceptChildren(visitor, this.thrownExceptions);				
@@ -648,6 +715,68 @@ public class MethodDeclaration extends BodyDeclaration {
 	}
 
 	/**
+	 * Returns the receiver type explicitly declared in the method or constructor 
+	 * declaration (JLS8 API only).
+	 *
+	 * If the receiver is not explicitly declared in the method or constructor 
+	 * declaration, <code>null</code> is returned.
+	 *
+	 * @return the receiver type or <code>null</code> if receiver is not declared explicitly
+	 * @exception UnsupportedOperationException if this operation is used below JLS8
+	 * @since 3.9
+	 */
+	public AnnotatableType getReceiverType() {
+		unsupportedIn2_3_4();
+		return this.receiverType;
+	}
+
+	/**
+	 * Sets the given type as the type of explicit receiver parameter. (JLS8 API only).
+	 *
+	 * @param receiverType type of explicit receiver parameter to be added to the method declaration
+	 * @exception UnsupportedOperationException if this operation is used below JLS8
+	 * @since 3.9
+
+	 */
+	public void setReceiverType(AnnotatableType receiverType) {
+		unsupportedIn2_3_4();
+		ASTNode oldChild = this.receiverType;
+		preReplaceChild(oldChild, receiverType, RECEIVER_TYPE_PROPERTY);
+		this.receiverType = receiverType;
+		postReplaceChild(oldChild, receiverType, RECEIVER_TYPE_PROPERTY);
+	}
+
+	/**
+	 * Returns the qualifying name, if any, for the explicit receiver or null if not used. This method
+	 * always returns <code>null</code> for a non-constructor.
+	 * This API is supported in JLS8 only.
+	 * 
+	 * @returns the qualifying name or <code>null</code> if a qualifier was not specified
+	 * @exception UnsupportedOperationException if this operation is used below JLS8
+	 * @since 3.9
+	 */
+	public SimpleName getReceiverQualifier() {
+		unsupportedIn2_3_4();
+		return this.receiverQualifier;
+	}
+	
+	/**
+	 * Sets the given simple name as the qualifier for the receiver.
+	 * This API is supported in JLS8 only.
+	 * 
+	 * @param receiverQualifier explicit receiver parameter to be added to the method declaration
+	 * @exception UnsupportedOperationException if this operation is used below JLS8
+	 * @since 3.9
+	 */
+	public void setReceiverQualifier(SimpleName receiverQualifier) {
+		unsupportedIn2_3_4();
+		ASTNode oldChild = this.receiverQualifier;
+		preReplaceChild(oldChild, receiverQualifier, RECEIVER_QUALIFIER_PROPERTY);
+		this.receiverQualifier = receiverQualifier;
+		postReplaceChild(oldChild, receiverQualifier, RECEIVER_QUALIFIER_PROPERTY);
+	}
+	
+	/**
 	 * Returns the live ordered list of method parameter declarations for this
 	 * method declaration.
 	 *
@@ -965,7 +1094,7 @@ public class MethodDeclaration extends BodyDeclaration {
 	 * Method declared on ASTNode.
 	 */
 	int memSize() {
-		return super.memSize() + 10 * 4;
+		return super.memSize() + 12 * 4;
 	}
 
 	/* (omit javadoc for this method)
@@ -978,6 +1107,8 @@ public class MethodDeclaration extends BodyDeclaration {
 			+ (this.modifiers == null ? 0 : this.modifiers.listSize())
 			+ (this.typeParameters == null ? 0 : this.typeParameters.listSize())
 			+ (this.methodName == null ? 0 : getName().treeSize())
+			+ (this.receiverType == null ? 0 : this.receiverType.treeSize())
+			+ (this.receiverQualifier == null ? 0 : this.receiverQualifier.treeSize())
 			+ (this.returnType == null ? 0 : this.returnType.treeSize())
 			+ this.parameters.listSize()
 			+ (this.ast.apiLevel < AST.JLS8 ? this.thrownExceptions.listSize() : this.thrownExceptionTypes.listSize())
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SimpleName.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SimpleName.java
index d4a1bf6..b8cd48f 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SimpleName.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SimpleName.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2011 IBM Corporation and others.
+ * Copyright (c) 2000, 2013 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/NaiveASTFlattener.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/NaiveASTFlattener.java
index d29903b..ecceda9 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/NaiveASTFlattener.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/NaiveASTFlattener.java
@@ -1013,6 +1013,22 @@ public class NaiveASTFlattener extends ASTVisitor {
 		}
 		node.getName().accept(this);
 		this.buffer.append("(");//$NON-NLS-1$
+		if (node.getAST().apiLevel() >= AST.JLS8) {
+			AnnotatableType receiverType = node.getReceiverType();
+			if (receiverType != null) {
+				receiverType.accept(this);
+				this.buffer.append(' ');
+				SimpleName qualifier = node.getReceiverQualifier();
+				if (qualifier != null) {
+					qualifier.accept(this);
+					this.buffer.append('.');
+				}
+				this.buffer.append("this"); //$NON-NLS-1$
+				if (node.parameters().size() > 0) {
+					this.buffer.append(',');
+				}
+			}
+		}
 		for (Iterator it = node.parameters().iterator(); it.hasNext(); ) {
 			SingleVariableDeclaration v = (SingleVariableDeclaration) it.next();
 			v.accept(this);

commit e593164022433d17467e437ca5f1d1580fcf9c34
Author: shankha banerjee <shankhba@in.ibm.com>
Date:   Thu Sep 26 11:31:10 2013 +0530

    Fix for Bug 415308 - [1.8][compiler] Illegal type annotations not
    rejected
    
    Signed-off-by: shankha banerjee <shankhba@in.ibm.com>

396	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java
3	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java
28	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java
2	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Argument.java
1	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java
2	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java
8	9	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedTypeReference.java
2	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java
index 4083c85..6d70074 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java
@@ -3487,4 +3487,400 @@ public class NegativeTypeAnnotationTest extends AbstractRegressionTest {
 				"This method must return a result of type String\n" + 
 				"----------\n");
 	}
+	// [1.8][compiler] Illegal type annotations not rejected (https://bugs.eclipse.org/bugs/show_bug.cgi?id=415308)
+	// This is the basic test case which demonstrated the issue for a local variable.
+	// We correctly identified the problem in function bar but failed to do so for foo.
+	public void test415308a() {
+		this.runNegativeTest(
+				new String[] {
+					"X.java",
+					"import java.lang.annotation.ElementType;\n" +
+					"import java.lang.annotation.Target;\n" +
+					"\n" +
+					"@Target(ElementType.TYPE_USE)\n" +
+					"@interface Illegal {\n" +
+					"}\n" +
+					"class Y {\n" +
+					"	static class Z {\n" +
+					"		Z() {}\n" +
+					"	}\n" +
+					"}\n" +
+					"class X {\n" +
+					"	Y.Z foo() {\n" +
+					"		@Illegal Y.Z z = null;\n" +
+					"		return z;\n" +
+					"	}\n" +
+					"	Y.Z bar() {\n" +
+					"		Y.Z z = (@Illegal Y.Z)null;\n" +
+					"		return z;\n" +
+					"	}\n" +
+					"}\n"
+				},
+				"----------\n" +
+				"1. ERROR in X.java (at line 14)\n" +
+				"	@Illegal Y.Z z = null;\n" +
+				"	^^^^^^^^\n" +
+				"Type annotations are not allowed on type names used to access static members\n" +
+				"----------\n" +
+				"2. ERROR in X.java (at line 18)\n" +
+				"	Y.Z z = (@Illegal Y.Z)null;\n" +
+				"	         ^^^^^^^^\n" +
+				"Type annotations are not allowed on type names used to access static members\n" +
+				"----------\n");
+	}
+	// [1.8][compiler] Illegal type annotations not rejected (https://bugs.eclipse.org/bugs/show_bug.cgi?id=415308)
+	// This test case is similar to test415308a. SimpleTypes on which annotations are applied are modified to array
+	// types.
+	public void test415308a2() {
+		this.runNegativeTest(
+				new String[] {
+						"X.java",
+						"import java.lang.annotation.ElementType;\n" +
+						"import java.lang.annotation.Target;\n" +
+						"\n" +
+						"@Target(ElementType.TYPE_USE)\n" +
+						"@interface Illegal {\n" +
+						"}\n" +
+						"class Y {\n" +
+						"	static class Z {\n" +
+						"		Z() {}\n" +
+						"	}\n" +
+						"}\n" +
+						"class X {\n" +
+						"	Y.Z[] foo() {\n" +
+						"		@Illegal Y.Z[] z = null;\n" +
+						"		return z;\n" +
+						"	}\n" +
+						"	Y.Z[] bar() {\n" +
+						"		Y.Z[] z = (@Illegal Y.Z[])null;\n" +
+						"		return z;\n" +
+						"	}\n" +
+						"}\n"
+				},
+				"----------\n" +
+				"1. ERROR in X.java (at line 14)\n" +
+				"	@Illegal Y.Z[] z = null;\n" +
+				"	^^^^^^^^\n" +
+				"Type annotations are not allowed on type names used to access static members\n" +
+				"----------\n" +
+				"2. ERROR in X.java (at line 18)\n" +
+				"	Y.Z[] z = (@Illegal Y.Z[])null;\n" +
+				"	           ^^^^^^^^\n" +
+				"Type annotations are not allowed on type names used to access static members\n" +
+				"----------\n");
+	}
+	// [1.8][compiler] Illegal type annotations not rejected (https://bugs.eclipse.org/bugs/show_bug.cgi?id=415308)
+	// Testing type use annotations on nested types.
+	// We check all the qualifiers as we look for a static type. This test checks if we are able to
+	// go beyond 1 level as part of the loop.
+	public void test415308b() {
+		this.runNegativeTest(
+				new String[] {
+						"X.java",
+						"import java.lang.annotation.ElementType;\n" +
+						"import java.lang.annotation.Target;\n" +
+						"\n" +
+						"@Target(ElementType.TYPE_USE)\n" +
+						"@interface Illegal {\n" +
+						"}\n" +
+						"class Y {\n" +
+						"	static class YY {\n" +
+						"		class Z {\n" +
+						"			Z() {}\n" +
+						"		}\n" +
+						"	}\n" +
+						"}\n" +
+						"class X {\n" +
+						"	Y.YY.Z foo() {\n" +
+						"		@Illegal Y.YY.Z z = null;\n" +
+						"		return z;\n" +
+						"	}\n" +
+						"	Y.YY.Z foo2() {\n" +
+						"		Y.@Illegal YY.Z z = null;\n" +
+						"		return z;\n" +
+						"	}\n" +
+						"	Y.YY.Z foo3() {\n" +
+						"		Y.YY.@Illegal Z z = null;\n" +
+						"		return z;\n" +
+						"	}\n" +
+						"}\n"
+				},
+				"----------\n" +
+				"1. ERROR in X.java (at line 16)\n" +
+				"	@Illegal Y.YY.Z z = null;\n" +
+				"	^^^^^^^^\n" +
+				"Type annotations are not allowed on type names used to access static members\n" +
+				"----------\n");
+	}
+	// [1.8][compiler] Illegal type annotations not rejected (https://bugs.eclipse.org/bugs/show_bug.cgi?id=415308)
+	// This test case is similar to test415308a. SimpleTypes on which annotations are applied are modified to array
+	// types.
+	public void test415308b2() {
+		this.runNegativeTest(
+				new String[] {
+						"X.java",
+						"import java.lang.annotation.ElementType;\n" +
+						"import java.lang.annotation.Target;\n" +
+						"\n" +
+						"@Target(ElementType.TYPE_USE)\n" +
+						"@interface Illegal {\n" +
+						"}\n" +
+						"class Y {\n" +
+						"	static class YY {\n" +
+						"		class Z {\n" +
+						"			Z() {}\n" +
+						"		}\n" +
+						"	}\n" +
+						"}\n" +
+						"class X {\n" +
+						"	Y.YY.Z[] foo() {\n" +
+						"		@Illegal Y.YY.Z[] z = null;\n" +
+						"		return z;\n" +
+						"	}\n" +
+						"	Y.YY.Z[] foo2() {\n" +
+						"		Y.@Illegal YY.Z[] z = null;\n" +
+						"		return z;\n" +
+						"	}\n" +
+						"	Y.YY.Z[] foo3() {\n" +
+						"		Y.YY.@Illegal Z[] z = null;\n" +
+						"		return z;\n" +
+						"	}\n" +
+						"}\n"
+				},
+				"----------\n" +
+				"1. ERROR in X.java (at line 16)\n" +
+				"	@Illegal Y.YY.Z[] z = null;\n" +
+				"	^^^^^^^^\n" +
+				"Type annotations are not allowed on type names used to access static members\n" +
+				"----------\n");
+	}
+	// [1.8][compiler] Illegal type annotations not rejected (https://bugs.eclipse.org/bugs/show_bug.cgi?id=415308)
+	// The test case is to validate that we report errors for only type annotations and nothing else in case of
+	// of parameter types.
+	public void test415308c() {
+		this.runNegativeTest(
+				new String[] {
+						"X.java",
+						"import java.lang.annotation.ElementType;\n" +
+						"import java.lang.annotation.Target;\n" +
+						"\n" +
+						"@Target(ElementType.TYPE_USE)\n" +
+						"@interface IllegalTypeUse {\n" +
+						"}\n" +
+						"@Target({ElementType.TYPE_USE, ElementType.PARAMETER})\n" +
+						"@interface LegalTypeUseParam {\n" +
+						"}\n" +
+						"@Target(ElementType.PARAMETER)\n" +
+						"@interface LegalParam {\n" +
+						"}\n" +
+						"class Y {\n" +
+						"	static class Z {\n" +
+						"		Z() {}\n" +
+						"	}\n" +
+						"}\n" +
+						"class X {\n" +
+						"	Y.Z foo(@LegalParam Y.Z z) { //Legal\n" +
+						"		return z;\n" +
+						"	}\n" +
+						"	Y.Z foo2(@LegalTypeUseParam Y.Z z) { //Legal\n" +
+						"		return z;\n" +
+						"	}\n" +
+						"	Y.Z foo3(@IllegalTypeUse @LegalParam Y.Z z) { //Illegal\n" +
+						"		return z;\n" +
+						"	}\n" +
+						"}\n"
+				},
+				"----------\n" +
+				"1. ERROR in X.java (at line 25)\n" +
+				"	Y.Z foo3(@IllegalTypeUse @LegalParam Y.Z z) { //Illegal\n" +
+				"	         ^^^^^^^^^^^^^^^\n" +
+				"Type annotations are not allowed on type names used to access static members\n" +
+				"----------\n");
+	}
+	//[1.8][compiler] Illegal type annotations not rejected (https://bugs.eclipse.org/bugs/show_bug.cgi?id=415308)
+	//The test case is to validate type use annotation for class fields.
+	public void test415308d() {
+		this.runNegativeTest(
+				new String[] {
+						"X.java",
+						"import java.lang.annotation.ElementType;\n" +
+						"import java.lang.annotation.Target;\n" +
+						"\n" +
+						"@Target(ElementType.TYPE_USE)\n" +
+						"@interface Illegal {\n" +
+						"}\n" +
+						"class Y {\n" +
+						"	static class Z {\n" +
+						"		Z() {}\n" +
+						"	}\n" +
+						"}\n" +
+						"class X {\n" +
+						"   @Illegal \n" +
+						"	Y.Z z;\n" +
+						"}\n"
+				},
+				"----------\n" +
+				"1. ERROR in X.java (at line 13)\n" +
+				"	@Illegal \n" +
+				"	^^^^^^^^\n" +
+				"Type annotations are not allowed on type names used to access static members\n" +
+				"----------\n");
+	}
+	//[1.8][compiler] Illegal type annotations not rejected (https://bugs.eclipse.org/bugs/show_bug.cgi?id=415308)
+	//The test case checks for annotations which are not exclusively TYPE_USE. We should not report a error.
+	public void test415308d2() {
+		this.runNegativeTest(
+				new String[] {
+						"X.java",
+						"import java.lang.annotation.ElementType;\n" +
+						"import java.lang.annotation.Target;\n" +
+						"\n" +
+						"@Target({ElementType.TYPE_USE, ElementType.FIELD})\n" +
+						"@interface Legal {\n" +
+						"}\n" +
+						"class Y {\n" +
+						"	static class Z {\n" +
+						"		Z() {}\n" +
+						"	}\n" +
+						"}\n" +
+						"class X {\n" +
+						"   @Legal \n" +
+						"	Y.Z z;\n" +
+						"}\n"
+				},
+				"");
+	}
+	//[1.8][compiler] Illegal type annotations not rejected (https://bugs.eclipse.org/bugs/show_bug.cgi?id=415308)
+	//The test case is to validate type use annotation for class fields.
+	//We check all the qualifiers as we look for a static type. This test checks if we are able to
+	//go beyond 1 level as part of the loop.
+	public void test415308e() {
+		this.runNegativeTest(
+				new String[] {
+						"X.java",
+						"import java.lang.annotation.ElementType;\n" +
+						"import java.lang.annotation.Target;\n" +
+						"\n" +
+						"@Target(ElementType.TYPE_USE)\n" +
+						"@interface Illegal {\n" +
+						"}\n" +
+						"@Target(ElementType.TYPE_USE)\n" +
+						"@interface Illegal2 {\n" +
+						"}\n" +
+						"@Target(ElementType.FIELD)\n" +
+						"@interface Legal {\n" +
+						"}\n" +
+						"class Y {\n" +
+						"	static class YY {\n" +
+						"		class Z {\n" +
+						"			Z() {}\n" +
+						"		}\n" +
+						"	}\n" +
+						"}\n" +
+						"class X {\n" +
+						"   @Legal @Illegal @Illegal2\n" +
+						"	Y.YY.Z z;\n" +
+						"}\n"
+				},
+				"----------\n" +
+				"1. ERROR in X.java (at line 21)\n" +
+				"	@Legal @Illegal @Illegal2\n" +
+				"	       ^^^^^^^^\n" +
+				"Type annotations are not allowed on type names used to access static members\n" +
+				"----------\n" +
+				"2. ERROR in X.java (at line 21)\n" +
+				"	@Legal @Illegal @Illegal2\n" +
+				"	                ^^^^^^^^^\n" +
+				"Type annotations are not allowed on type names used to access static members\n" +
+				"----------\n");
+	}
+	// [1.8][compiler] Illegal type annotations not rejected (https://bugs.eclipse.org/bugs/show_bug.cgi?id=415308)
+	// The test case is to validate type use annotations on return types for methods.
+	public void test415308f() {
+		this.runNegativeTest(
+				new String[] {
+						"X.java",
+						"import java.lang.annotation.ElementType;\n" +
+						"import java.lang.annotation.Target;\n" +
+						"\n" +
+						"@Target(ElementType.TYPE_USE)\n" +
+						"@interface Illegal {\n" +
+						"}\n" +
+						"class Y {\n" +
+						"	static class Z {\n" +
+						"		Z() {}\n" +
+						"	}\n" +
+						"}\n" +
+						"class X {\n" +
+						"   public @Illegal Y.Z foo() { return null;}\n" +
+						"}\n"
+				},
+				"----------\n" +
+				"1. ERROR in X.java (at line 13)\n" +
+				"	public @Illegal Y.Z foo() { return null;}\n" +
+				"	       ^^^^^^^^\n" +
+				"Type annotations are not allowed on type names used to access static members\n" +
+				"----------\n");
+	}
+	// [1.8][compiler] Illegal type annotations not rejected (https://bugs.eclipse.org/bugs/show_bug.cgi?id=415308)
+	// The test case is a array version of test415308f.
+	public void test415308f2() {
+		this.runNegativeTest(
+				new String[] {
+						"X.java",
+						"import java.lang.annotation.ElementType;\n" +
+						"import java.lang.annotation.Target;\n" +
+						"\n" +
+						"@Target(ElementType.TYPE_USE)\n" +
+						"@interface Illegal {\n" +
+						"}\n" +
+						"class Y {\n" +
+						"	static class Z {\n" +
+						"		Z() {}\n" +
+						"	}\n" +
+						"}\n" +
+						"class X {\n" +
+						"   public @Illegal Y.Z[] foo() { return null;}\n" +
+						"}\n"
+				},
+				"----------\n" +
+				"1. ERROR in X.java (at line 13)\n" +
+				"	public @Illegal Y.Z[] foo() { return null;}\n" +
+				"	       ^^^^^^^^\n" +
+				"Type annotations are not allowed on type names used to access static members\n" +
+				"----------\n");
+	}
+	// [1.8][compiler] Illegal type annotations not rejected (https://bugs.eclipse.org/bugs/show_bug.cgi?id=415308)
+	// The test case is used to test enums with type annotations.
+	public void test415308g() {
+		this.runNegativeTest(
+				new String[] {
+					"X.java",
+					"import java.lang.annotation.ElementType;\n" +
+					"import java.lang.annotation.Target;\n" +
+					"\n" +
+					"@Target(ElementType.TYPE_USE)\n" +
+					"@interface Illegal {\n" +
+					"}\n" +
+					"class Y {\n" +
+					"	enum A { B }\n" +
+					"}\n" +
+					"class X {\n" +
+					"	@Illegal Y.A foo(@Illegal Y.A a) {\n" +
+					"		return a;\n" +
+					"	}\n" +
+					"}\n"
+				},
+				"----------\n" +
+				"1. ERROR in X.java (at line 11)\n" +
+				"	@Illegal Y.A foo(@Illegal Y.A a) {\n" +
+				"	^^^^^^^^\n" +
+				"Type annotations are not allowed on type names used to access static members\n" +
+				"----------\n" +
+				"2. ERROR in X.java (at line 11)\n" +
+				"	@Illegal Y.A foo(@Illegal Y.A a) {\n" +
+				"	                 ^^^^^^^^\n" +
+				"Type annotations are not allowed on type names used to access static members\n" +
+				"----------\n");
+	}
 }
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java
index 860cc60..303cb49 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java
@@ -118,6 +118,9 @@ String targetTypeUseIfAvailable() {
 				: "";
 }
 
+/**
+ * @deprecated
+ */
 protected void setUp() throws Exception {
 	super.setUp();
 	if (this.complianceLevel >= ClassFileConstants.JDK1_8)
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java
index 15053a9..79a9a2e 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java
@@ -1133,7 +1133,8 @@ public abstract class Annotation extends Expression {
 			scope.problemReporter().disallowedTargetForContainerAnnotation(annotation, containerAnnotationType);
 		}
 	}
-
+	
+	// Check and answer if an attempt to annotate a package is being made. Error should be reported by caller.
 	public static boolean isTypeUseCompatible(TypeReference reference, Scope scope) {
 		if (reference != null && !(reference instanceof SingleTypeReference)) {
 			Binding binding = scope.getPackage(reference.getTypeName());
@@ -1144,6 +1145,32 @@ public abstract class Annotation extends Expression {
 		}
 		return true;
 	}
+	
+	// Complain if an attempt to annotate the enclosing type of a static member type is being made.
+	public static void isTypeUseCompatible(TypeReference reference, Scope scope, Annotation[] annotations) {
+		if (annotations == null || reference == null || reference.getAnnotatableLevels() == 1)
+			return;
+
+		TypeBinding resolvedType = reference.resolvedType == null ? null : reference.resolvedType.leafComponentType();
+		if (resolvedType == null || !resolvedType.isNestedType())
+			return;
+
+		nextAnnotation:
+			for (int i = 0, annotationsLength = annotations.length; i < annotationsLength; i++) {
+				Annotation annotation = annotations[i];
+				long metaTagBits = annotation.resolvedType.getAnnotationTagBits();
+				if ((metaTagBits & TagBits.AnnotationForTypeUse) != 0 && (metaTagBits & TagBits.SE7AnnotationTargetMASK) == 0) {
+					ReferenceBinding currentType = (ReferenceBinding) resolvedType;
+					while (currentType.isNestedType()) {
+						if (currentType.isStatic()) {
+							QualifiedTypeReference.rejectAnnotationsOnStaticMemberQualififer(scope, currentType, new Annotation [] { annotation });
+							continue nextAnnotation;
+						}
+						currentType = currentType.enclosingType();
+					}
+				}
+			}
+	}
 
 	public abstract void traverse(ASTVisitor visitor, BlockScope scope);
 
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Argument.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Argument.java
index 397e534..3f36712 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Argument.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Argument.java
@@ -70,6 +70,7 @@ public class Argument extends LocalDeclaration {
 		}
 		if ((this.binding.tagBits & TagBits.AnnotationResolved) == 0) {
 			resolveAnnotations(scope, this.annotations, this.binding, true);
+			Annotation.isTypeUseCompatible(this.type, scope, this.annotations);
 			if (scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_8)
 				scope.validateNullAnnotation(this.binding.tagBits, this.type, this.annotations);
 		}
@@ -196,6 +197,7 @@ public class Argument extends LocalDeclaration {
 			this.binding = new CatchParameterBinding(this, exceptionType, this.modifiers, false); // argument decl, but local var  (where isArgument = false)
 		}
 		resolveAnnotations(scope, this.annotations, this.binding, true);
+		Annotation.isTypeUseCompatible(this.type, scope, this.annotations);
 
 		// Type annotations may need attaching to the type references
 		// Example of code this block handles: } catch(@A Exception e) {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java
index 05af798..a9844b0 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java
@@ -283,6 +283,7 @@ public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, Fl
 		}
 		// only resolve annotation at the end, for constant to be positioned before (96991)
 		resolveAnnotations(scope, this.annotations, this.binding, true);
+		Annotation.isTypeUseCompatible(this.type, scope, this.annotations);
 		if (!scope.validateNullAnnotation(this.binding.tagBits, this.type, this.annotations))
 			this.binding.tagBits &= ~TagBits.AnnotationNullMASK;
 	}
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java
index 9a2e5e8..b17179c 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ParameterizedQualifiedTypeReference.java
@@ -235,7 +235,8 @@ public class ParameterizedQualifiedTypeReference extends ArrayQualifiedTypeRefer
 						: scope.environment().convertToParameterizedType(qualifyingType);
 				}
 			} else {
-				 rejectAnnotationsOnStaticMemberQualififer(scope, currentType, i);
+				if (this.annotations != null)
+					rejectAnnotationsOnStaticMemberQualififer(scope, currentType, this.annotations[i-1]);
 				if (typeIsConsistent && currentType.isStatic()
 						&& (qualifyingType.isParameterizedTypeWithActualArguments() || qualifyingType.isGenericType())) {
 					scope.problemReporter().staticMemberOfParameterizedType(this, scope.environment().createParameterizedType((ReferenceBinding)currentType.erasure(), null, qualifyingType), i);
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedTypeReference.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedTypeReference.java
index e26ca7f..7236dec 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedTypeReference.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedTypeReference.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2012 IBM Corporation and others.
+ * Copyright (c) 2000, 2013 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -91,14 +91,11 @@ public class QualifiedTypeReference extends TypeReference {
 		}
 	}
 
-	protected void rejectAnnotationsOnStaticMemberQualififer(Scope scope, ReferenceBinding currentType, int tokenIndex) {
+	protected static void rejectAnnotationsOnStaticMemberQualififer(Scope scope, ReferenceBinding currentType, Annotation[] qualifierAnnot) {
 		// https://bugs.eclipse.org/bugs/show_bug.cgi?id=385137
-		if (this.annotations != null && currentType.isMemberType() && currentType.isStatic()) {
-			Annotation[] qualifierAnnot = this.annotations[tokenIndex - 1];
-			if (qualifierAnnot != null) {
-				scope.problemReporter().illegalTypeAnnotationsInStaticMemberAccess(qualifierAnnot[0],
-						qualifierAnnot[qualifierAnnot.length - 1]);
-			}
+		if (currentType.isMemberType() && currentType.isStatic() && qualifierAnnot != null && qualifierAnnot.length > 0) {
+			scope.problemReporter().illegalTypeAnnotationsInStaticMemberAccess(qualifierAnnot[0],
+					qualifierAnnot[qualifierAnnot.length - 1]);
 		}
 	}
 
@@ -137,7 +134,9 @@ public class QualifiedTypeReference extends TypeReference {
 					return null;
 			ReferenceBinding currentType = (ReferenceBinding) this.resolvedType;
 			if (qualifiedType != null) {
-				rejectAnnotationsOnStaticMemberQualififer(scope, currentType, i);
+				if (this.annotations != null) {
+					rejectAnnotationsOnStaticMemberQualififer(scope, currentType, this.annotations[i-1]);
+				}
 				ReferenceBinding enclosingType = currentType.enclosingType();
 				if (enclosingType != null && enclosingType.erasure() != qualifiedType.erasure()) {
 					qualifiedType = enclosingType; // inherited member type, leave it associated with its enclosing rather than subtype
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java
index 5f6af26..407baef 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java
@@ -1643,6 +1643,7 @@ public FieldBinding resolveTypeFor(FieldBinding field) {
 					ASTNode.copySE8AnnotationsToType(initializationScope, field, fieldDecl.annotations);
 				}
 			}
+			Annotation.isTypeUseCompatible(fieldDecl.type, this.scope, fieldDecl.annotations);
 			// apply null default:
 			LookupEnvironment environment = this.scope.environment();
 			if (environment.globalOptions.isAnnotationBasedNullAnalysisEnabled) {
@@ -1828,6 +1829,7 @@ public MethodBinding resolveTypesFor(MethodBinding method) {
 						ASTNode.copySE8AnnotationsToType(methodDecl.scope, method, methodDecl.annotations);
 					}
 				}
+				Annotation.isTypeUseCompatible(returnType, this.scope, methodDecl.annotations);
 				TypeBinding leafType = methodType.leafComponentType();
 				if (leafType instanceof ReferenceBinding && (((ReferenceBinding) leafType).modifiers & ExtraCompilerModifiers.AccGenericSignature) != 0)
 					method.modifiers |= ExtraCompilerModifiers.AccGenericSignature;

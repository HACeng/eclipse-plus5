commit cfb9e308b9934bc0d4a17e2d4604db46f20af164
Author: Stephan Herrmann <stephan.herrmann@berlin.de>
Date:   Thu Feb 27 22:15:19 2014 +0100

    Bug 429090 - [1.8][compiler] Type Lambda expression's parameter c is
    expected to be of type Junk10.Observable
    - test & fix for NPE from comment 1

37	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java
20	20	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExceptionFormula.java
12	12	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java
36	23	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintTypeFormula.java
6	10	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java
4	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReductionResult.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java
index dcf9417..07c5ac4 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java
@@ -2426,4 +2426,41 @@ public void testBug428786() {
 			"}\n"
 		});
 }
+public void testBug429090_comment1() {
+	runNegativeTest(
+		new String[] {
+			"Junk10.java",
+			"\n" + 
+			"public class Junk10 {\n" + 
+			"    class Observable<T> {}\n" + 
+			"    interface InvalidationListener {\n" + 
+			"        public void invalidated(Observable<?> observable);\n" + 
+			"    }\n" + 
+			"    public static abstract class Change<E2> {}\n" + 
+			"    interface SetChangeListener<E1> {\n" + 
+			"        void onChanged(Change<? extends E1> change);\n" + 
+			"    }\n" + 
+			"    class SetListenerHelper<T> {}\n" + 
+			"    public static <E> SetListenerHelper<E> addListener(\n" +
+			"			SetListenerHelper<E> helper, SetChangeListener<? super E> listener) {\n" + 
+			"        return helper;\n" + 
+			"    }\n" + 
+			"    void junk() {\n" + 
+			"        addListener(null, (SetChangeListener.Change<?> c) -> {});\n" + 
+			"    }\n" + 
+			"}\n"
+		},
+		"----------\n" + 
+		"1. ERROR in Junk10.java (at line 17)\n" + 
+		"	addListener(null, (SetChangeListener.Change<?> c) -> {});\n" + 
+		"	^^^^^^^^^^^\n" + 
+		"The method addListener(Junk10.SetListenerHelper<E>, Junk10.SetChangeListener<? super E>) in the type Junk10 is not applicable for the arguments (null, (SetChangeListener.Change<?> c) -> {\n" + 
+		"})\n" + 
+		"----------\n" + 
+		"2. ERROR in Junk10.java (at line 17)\n" + 
+		"	addListener(null, (SetChangeListener.Change<?> c) -> {});\n" + 
+		"	                   ^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
+		"SetChangeListener.Change cannot be resolved to a type\n" + 
+		"----------\n");
+}
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java
index 96f5043..e6addef 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java
@@ -572,7 +572,7 @@ class BoundSet {
 									TypeBound bound = it.next();
 									if (!(bound.right instanceof InferenceVariable)) {
 										if (wildcardBinding.boundKind == Wildcard.SUPER)
-											reduceOneConstraint(context, new ConstraintTypeFormula(bound.right, t, ReductionResult.SUBTYPE));
+											reduceOneConstraint(context, ConstraintTypeFormula.create(bound.right, t, ReductionResult.SUBTYPE));
 										else
 											return false;
 									}
@@ -594,11 +594,11 @@ class BoundSet {
 		ConstraintFormula formula = null;
 		if (boundKind == Wildcard.EXTENDS) {
 			if (bi.id == TypeIds.T_JavaLangObject)
-				formula = new ConstraintTypeFormula(t, r, ReductionResult.SUBTYPE);
+				formula = ConstraintTypeFormula.create(t, r, ReductionResult.SUBTYPE);
 			if (t.id == TypeIds.T_JavaLangObject)
-				formula = new ConstraintTypeFormula(context.substitute(bi), r, ReductionResult.SUBTYPE);
+				formula = ConstraintTypeFormula.create(context.substitute(bi), r, ReductionResult.SUBTYPE);
 		} else {
-			formula = new ConstraintTypeFormula(context.substitute(bi), r, ReductionResult.SUBTYPE);
+			formula = ConstraintTypeFormula.create(context.substitute(bi), r, ReductionResult.SUBTYPE);
 		}
 		if (formula != null)
 			reduceOneConstraint(context, formula);
@@ -608,7 +608,7 @@ class BoundSet {
 		
 		// α = S and α = T imply ⟨S = T⟩
 		if (boundS.left == boundT.left) //$IDENTITY-COMPARISON$ InferenceVariable
-			return new ConstraintTypeFormula(boundS.right, boundT.right, ReductionResult.SAME, boundS.isSoft||boundT.isSoft);
+			return ConstraintTypeFormula.create(boundS.right, boundT.right, ReductionResult.SAME, boundS.isSoft||boundT.isSoft);
 
 		// match against more shapes:
 		ConstraintTypeFormula newConstraint;
@@ -629,7 +629,7 @@ class BoundSet {
 			InferenceVariable alpha = boundLeft.left;
 			TypeBinding left = boundRight.left; // no substitution since S inference variable and (S != α) per precondition
 			TypeBinding right = boundRight.right.substituteInferenceVariable(alpha, u);
-			return new ConstraintTypeFormula(left, right, ReductionResult.SAME, boundLeft.isSoft||boundRight.isSoft);
+			return ConstraintTypeFormula.create(left, right, ReductionResult.SAME, boundLeft.isSoft||boundRight.isSoft);
 		}
 		return null;
 	}
@@ -640,18 +640,18 @@ class BoundSet {
 		InferenceVariable alpha = boundS.left;
 		TypeBinding s = boundS.right;
 		if (alpha == boundT.left) //$IDENTITY-COMPARISON$ InferenceVariable
-			return new ConstraintTypeFormula(s, boundT.right, boundT.relation, boundT.isSoft||boundS.isSoft);
+			return ConstraintTypeFormula.create(s, boundT.right, boundT.relation, boundT.isSoft||boundS.isSoft);
 		if (alpha == boundT.right) //$IDENTITY-COMPARISON$ InferenceVariable
-			return new ConstraintTypeFormula(boundT.right, s, boundT.relation, boundT.isSoft||boundS.isSoft);
+			return ConstraintTypeFormula.create(boundT.right, s, boundT.relation, boundT.isSoft||boundS.isSoft);
 
 		if (boundS.right instanceof InferenceVariable) {
 			// reverse:
 			alpha = (InferenceVariable) boundS.right;
 			s = boundS.left;
 			if (alpha == boundT.left) //$IDENTITY-COMPARISON$ InferenceVariable
-				return new ConstraintTypeFormula(s, boundT.right, boundT.relation, boundT.isSoft||boundS.isSoft);
+				return ConstraintTypeFormula.create(s, boundT.right, boundT.relation, boundT.isSoft||boundS.isSoft);
 			if (alpha == boundT.right) //$IDENTITY-COMPARISON$ InferenceVariable
-				return new ConstraintTypeFormula(boundT.right, s, boundT.relation, boundT.isSoft||boundS.isSoft);			
+				return ConstraintTypeFormula.create(boundT.right, s, boundT.relation, boundT.isSoft||boundS.isSoft);			
 		}
 		
 		//  α = U and S <: T imply ⟨S[α:=U] <: T[α:=U]⟩ 
@@ -659,7 +659,7 @@ class BoundSet {
 		if (u.isProperType(true)) {
 			TypeBinding left = (alpha == boundT.left) ? u : boundT.left; //$IDENTITY-COMPARISON$ InferenceVariable
 			TypeBinding right = boundT.right.substituteInferenceVariable(alpha, u);
-			return new ConstraintTypeFormula(left, right, boundT.relation, boundT.isSoft||boundS.isSoft);
+			return ConstraintTypeFormula.create(left, right, boundT.relation, boundT.isSoft||boundS.isSoft);
 		}
 		return null;
 	}
@@ -669,13 +669,13 @@ class BoundSet {
 		InferenceVariable alpha = boundS.left;
 		if (alpha == boundT.left) //$IDENTITY-COMPARISON$ InferenceVariable
 			//  α >: S and α <: T imply ⟨S <: T⟩
-			return new ConstraintTypeFormula(boundS.right, boundT.right, ReductionResult.SUBTYPE, boundT.isSoft||boundS.isSoft);
+			return ConstraintTypeFormula.create(boundS.right, boundT.right, ReductionResult.SUBTYPE, boundT.isSoft||boundS.isSoft);
 		if (boundS.right instanceof InferenceVariable) {
 			// try reverse:
 			alpha = (InferenceVariable) boundS.right;
 			if (alpha == boundT.right) //$IDENTITY-COMPARISON$ InferenceVariable
 				// S :> α and T <: α  imply ⟨S :> T⟩
-				return new ConstraintTypeFormula(boundS.left, boundT.left, ReductionResult.SUPERTYPE, boundT.isSoft||boundS.isSoft);
+				return ConstraintTypeFormula.create(boundS.left, boundT.left, ReductionResult.SUPERTYPE, boundT.isSoft||boundS.isSoft);
 		}
 		return null;
 	}
@@ -684,10 +684,10 @@ class BoundSet {
 		//  more permutations of: S <: α and α <: T imply ⟨S <: T⟩
 		if (boundS.left == boundT.right) //$IDENTITY-COMPARISON$ InferenceVariable
 			// came in as: α REL S and T REL α imply ⟨T REL S⟩ 
-			return new ConstraintTypeFormula(boundT.left, boundS.right, boundS.relation, boundT.isSoft||boundS.isSoft);
+			return ConstraintTypeFormula.create(boundT.left, boundS.right, boundS.relation, boundT.isSoft||boundS.isSoft);
 		if (boundS.right == boundT.left) //$IDENTITY-COMPARISON$ InferenceVariable
 			// came in as: S REL α and α REL T imply ⟨S REL T⟩ 
-			return new ConstraintTypeFormula(boundS.left, boundT.right, boundS.relation, boundT.isSoft||boundS.isSoft);
+			return ConstraintTypeFormula.create(boundS.left, boundT.right, boundS.relation, boundT.isSoft||boundS.isSoft);
 		return null;
 	}
 
@@ -723,7 +723,7 @@ class BoundSet {
 			TypeBinding ti = tis[i];
 			if (si.isWildcard() || ti.isWildcard() || TypeBinding.equalsEquals(si, ti))
 				continue;
-			result.add(new ConstraintTypeFormula(si, ti, ReductionResult.SAME, isSoft));
+			result.add(ConstraintTypeFormula.create(si, ti, ReductionResult.SAME, isSoft));
 		}
 		if (result.size() > 0)
 			return result.toArray(new ConstraintTypeFormula[result.size()]);
@@ -737,14 +737,14 @@ class BoundSet {
 	 */
 	public boolean reduceOneConstraint(InferenceContext18 context, ConstraintFormula currentConstraint) throws InferenceFailureException {
 		Object result = currentConstraint.reduce(context);
-		if (result == currentConstraint) {
-			// not reduceable
-			throw new IllegalStateException("Failed to reduce constraint formula"); //$NON-NLS-1$
-		}
 		if (result == ReductionResult.FALSE)
 			return false;
 		if (result == ReductionResult.TRUE)
 			return true;
+		if (result == currentConstraint) {
+			// not reduceable
+			throw new IllegalStateException("Failed to reduce constraint formula"); //$NON-NLS-1$
+		}
 		if (result != null) {
 			if (result instanceof ConstraintFormula) {
 				if (!reduceOneConstraint(context, (ConstraintFormula) result))
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExceptionFormula.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExceptionFormula.java
index 1c6e6a0..d219838 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExceptionFormula.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExceptionFormula.java
@@ -103,7 +103,7 @@ public class ConstraintExceptionFormula extends ConstraintFormula {
 					if (thrown[j].isProperType(true) && ePrime[i].isCompatibleWith(thrown[j]))
 						continue actual;
 				for (int j = 0; j < n; j++)
-					result.add(new ConstraintTypeFormula(ePrime[i], e[j], SUBTYPE));
+					result.add(ConstraintTypeFormula.create(ePrime[i], e[j], SUBTYPE));
 			}				
 			for (int j = 0; j < n; j++)
 				result.add(new ConstraintExceptionFormula(this.left, e[j]));
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java
index dce7ccf..a32a7af 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintExpressionFormula.java
@@ -100,7 +100,7 @@ class ConstraintExpressionFormula extends ConstraintFormula {
 			TypeBinding exprType = this.left.resolvedType;
 			if (exprType == null || !exprType.isValidBinding())
 				return FALSE;
-			return new ConstraintTypeFormula(exprType, this.right, COMPATIBLE, this.isSoft);
+			return ConstraintTypeFormula.create(exprType, this.right, COMPATIBLE, this.isSoft);
 		} else {
 			// shapes of poly expressions (18.2.1)
 			// - parenthesized expression : these are transparent in our AST
@@ -129,7 +129,7 @@ class ConstraintExpressionFormula extends ConstraintFormula {
 							TypeBinding exprType = this.left.resolvedType;
 							if (exprType == null || !exprType.isValidBinding())
 								return FALSE;
-							return new ConstraintTypeFormula(exprType, this.right, COMPATIBLE, this.isSoft);
+							return ConstraintTypeFormula.create(exprType, this.right, COMPATIBLE, this.isSoft);
 						}
 						inferenceContext.inferenceKind = innerCtx.inferenceKind;
 						innerCtx.outerContext = inferenceContext;
@@ -185,10 +185,10 @@ class ConstraintExpressionFormula extends ConstraintFormula {
 				if (!lambda.argumentsTypeElided()) {
 					Argument[] arguments = lambda.arguments();
 					for (int i = 0; i < parameters.length; i++)
-						result.add(new ConstraintTypeFormula(parameters[i], arguments[i].type.resolveType(lambda.enclosingScope), SAME));
+						result.add(ConstraintTypeFormula.create(parameters[i], arguments[i].type.resolveType(lambda.enclosingScope), SAME));
 					// in addition, ⟨T' <: T⟩:
 					if (lambda.resolvedType != null)
-						result.add(new ConstraintTypeFormula(lambda.resolvedType, this.right, SUBTYPE));
+						result.add(ConstraintTypeFormula.create(lambda.resolvedType, this.right, SUBTYPE));
 				}
 				if (functionType.returnType != TypeBinding.VOID) {
 					TypeBinding r = functionType.returnType;
@@ -270,18 +270,18 @@ class ConstraintExpressionFormula extends ConstraintFormula {
 			int k = pPrime.length;
 			int offset = 0;
 			if (n == k+1) {
-				newConstraints.add(new ConstraintTypeFormula(p[0], reference.lhs.resolvedType, COMPATIBLE));
+				newConstraints.add(ConstraintTypeFormula.create(p[0], reference.lhs.resolvedType, COMPATIBLE));
 				offset = 1;
 			}
 			for (int i = offset; i < n; i++)
-				newConstraints.add(new ConstraintTypeFormula(p[i], pPrime[i-offset], COMPATIBLE));
+				newConstraints.add(ConstraintTypeFormula.create(p[i], pPrime[i-offset], COMPATIBLE));
 			TypeBinding r = functionType.returnType;
 			if (r != TypeBinding.VOID) {
 				TypeBinding rAppl = potentiallyApplicable.isConstructor() && !reference.isArrayConstructorReference() ? potentiallyApplicable.declaringClass : potentiallyApplicable.returnType;
 				if (rAppl == TypeBinding.VOID)
 					return FALSE;
 				TypeBinding rPrime = rAppl.capture(inferenceContext.scope, 14); // FIXME capture position??
-				newConstraints.add(new ConstraintTypeFormula(rPrime, r, COMPATIBLE));
+				newConstraints.add(ConstraintTypeFormula.create(rPrime, r, COMPATIBLE));
 			}
 			return newConstraints.toArray(new ConstraintFormula[newConstraints.size()]);
 		} else { // inexact
@@ -321,7 +321,7 @@ class ConstraintExpressionFormula extends ConstraintFormula {
 			TypeBinding rPrime = compileTimeDecl.isConstructor() ? compileTimeDecl.declaringClass : compileTimeDecl.returnType;
 			if (rPrime.id == TypeIds.T_void)
 				return FALSE;
-			return new ConstraintTypeFormula(rPrime, r, COMPATIBLE, this.isSoft);
+			return ConstraintTypeFormula.create(rPrime, r, COMPATIBLE, this.isSoft);
 		}
 	}
 
@@ -367,7 +367,7 @@ class ConstraintExpressionFormula extends ConstraintFormula {
 			if (inferenceContext.usesUncheckedConversion()) {
 				// spec says erasure, but we don't really have compatibility rules for erasure, use raw type instead:
 				TypeBinding erasure = inferenceContext.environment.convertToRawType(returnType, false);
-				ConstraintTypeFormula newConstraint = new ConstraintTypeFormula(erasure, targetType, COMPATIBLE);
+				ConstraintTypeFormula newConstraint = ConstraintTypeFormula.create(erasure, targetType, COMPATIBLE);
 				if (!inferenceContext.reduceAndIncorporate(newConstraint))
 					return false;
 				// continuing at true is not spec'd but needed for javac-compatibility,
@@ -382,7 +382,7 @@ class ConstraintExpressionFormula extends ConstraintFormula {
 				ParameterizedTypeBinding gbeta = inferenceContext.environment.createParameterizedType(
 						parameterizedType.genericType(), betas, parameterizedType.enclosingType(), parameterizedType.getTypeAnnotations());
 				inferenceContext.currentBounds.captures.put(gbeta, parameterizedType); // established: both types have nonnull arguments
-				ConstraintTypeFormula newConstraint = new ConstraintTypeFormula(gbeta, targetType, COMPATIBLE);
+				ConstraintTypeFormula newConstraint = ConstraintTypeFormula.create(gbeta, targetType, COMPATIBLE);
 				return inferenceContext.reduceAndIncorporate(newConstraint);
 			}
 			if (rTheta instanceof InferenceVariable) {
@@ -400,11 +400,11 @@ class ConstraintExpressionFormula extends ConstraintFormula {
 				if (toResolve) {
 					BoundSet solution = inferenceContext.solve(); // TODO: minimal resolving for only α
 					TypeBinding u = solution.getInstantiation(alpha, null).capture(inferenceContext.scope, invocationSite.sourceStart()); // TODO make position unique?
-					ConstraintTypeFormula newConstraint = new ConstraintTypeFormula(u, targetType, COMPATIBLE);
+					ConstraintTypeFormula newConstraint = ConstraintTypeFormula.create(u, targetType, COMPATIBLE);
 					return inferenceContext.reduceAndIncorporate(newConstraint);
 				}
 			}
-			ConstraintTypeFormula newConstraint = new ConstraintTypeFormula(rTheta, targetType, COMPATIBLE);
+			ConstraintTypeFormula newConstraint = ConstraintTypeFormula.create(rTheta, targetType, COMPATIBLE);
 			if (!inferenceContext.reduceAndIncorporate(newConstraint))
 				return false;
 		}
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintTypeFormula.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintTypeFormula.java
index 851806a..78254da 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintTypeFormula.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ConstraintTypeFormula.java
@@ -35,16 +35,29 @@ class ConstraintTypeFormula extends ConstraintFormula {
 	// this flag contributes to the workaround controlled by InferenceContext18.ARGUMENT_CONSTRAINTS_ARE_SOFT:
 	boolean isSoft;
 
-	public ConstraintTypeFormula(TypeBinding exprType, TypeBinding right, int relation) {
+	public static ConstraintTypeFormula create(TypeBinding exprType, TypeBinding right, int relation) {
+		if (exprType == null || right == null) 
+			return FALSE;
+		return new ConstraintTypeFormula(exprType, right, relation, false);
+	}
+
+	public static ConstraintTypeFormula create(TypeBinding exprType, TypeBinding right, int relation, boolean isSoft) {
+		if (exprType == null || right == null) 
+			return FALSE;
+		return new ConstraintTypeFormula(exprType, right, relation, isSoft);
+	}
+
+	// DON'T USE, use factory methods above instead.
+	private ConstraintTypeFormula(TypeBinding exprType, TypeBinding right, int relation, boolean isSoft) {
 		this.left = exprType;
 		this.right = right;
 		this.relation = relation;
-	}
-	public ConstraintTypeFormula(TypeBinding exprType, TypeBinding right, int relation, boolean isSoft) {
-		this(exprType, right, relation);
 		this.isSoft = isSoft;
 	}
 
+	// for constants TRUE & FALSE, only:
+	ConstraintTypeFormula() { }
+
 	// return: ReductionResult or ConstraintFormula[]
 	public Object reduce(InferenceContext18 inferenceContext) {
 		switch (this.relation) {
@@ -57,11 +70,11 @@ class ConstraintTypeFormula extends ConstraintFormula {
 			}
 			if (this.left.isPrimitiveType()) {
 				TypeBinding sPrime = inferenceContext.environment.computeBoxingType(this.left);
-				return new ConstraintTypeFormula(sPrime, this.right, COMPATIBLE, this.isSoft);
+				return ConstraintTypeFormula.create(sPrime, this.right, COMPATIBLE, this.isSoft);
 			}
 			if (this.right.isPrimitiveType()) {
 				TypeBinding tPrime = inferenceContext.environment.computeBoxingType(this.right);
-				return new ConstraintTypeFormula(this.left, tPrime, SAME, this.isSoft);
+				return ConstraintTypeFormula.create(this.left, tPrime, SAME, this.isSoft);
 			}
 			switch (this.right.kind()) {
 			case Binding.ARRAY_TYPE:
@@ -79,7 +92,7 @@ class ConstraintTypeFormula extends ConstraintFormula {
 					break;
 				}
 			}
-			return new ConstraintTypeFormula(this.left, this.right, SUBTYPE, this.isSoft);
+			return ConstraintTypeFormula.create(this.left, this.right, SUBTYPE, this.isSoft);
 		case SUBTYPE:
 			// 18.2.3:
 			return reduceSubType(inferenceContext.scope, this.left, this.right);
@@ -93,7 +106,7 @@ class ConstraintTypeFormula extends ConstraintFormula {
 			// 18.2.3:
 			if (this.right.kind() != Binding.WILDCARD_TYPE) { // "If T is a type" ... all alternatives require "wildcard"
 				if (this.left.kind() != Binding.WILDCARD_TYPE) {
-					return new ConstraintTypeFormula(this.left, this.right, SAME, this.isSoft);						
+					return ConstraintTypeFormula.create(this.left, this.right, SAME, this.isSoft);						
 				} else {
 					return FALSE;
 				}
@@ -103,27 +116,27 @@ class ConstraintTypeFormula extends ConstraintFormula {
 					return TRUE;
 				if (t.boundKind == Wildcard.EXTENDS) {
 					if (this.left.kind() != Binding.WILDCARD_TYPE) {
-						return new ConstraintTypeFormula(this.left, t.bound, SUBTYPE, this.isSoft);
+						return ConstraintTypeFormula.create(this.left, t.bound, SUBTYPE, this.isSoft);
 					} else {
 						WildcardBinding s = (WildcardBinding) this.left;
 						switch (s.boundKind) {
 							case Wildcard.UNBOUND:
-								return new ConstraintTypeFormula(inferenceContext.object, t.bound, SUBTYPE, this.isSoft);
+								return ConstraintTypeFormula.create(inferenceContext.object, t.bound, SUBTYPE, this.isSoft);
 							case Wildcard.EXTENDS: 
-								return new ConstraintTypeFormula(s.bound, t.bound, SUBTYPE, this.isSoft);
+								return ConstraintTypeFormula.create(s.bound, t.bound, SUBTYPE, this.isSoft);
 							case Wildcard.SUPER: 
-								return new ConstraintTypeFormula(inferenceContext.object, t.bound, SAME, this.isSoft);
+								return ConstraintTypeFormula.create(inferenceContext.object, t.bound, SAME, this.isSoft);
 							default:
 								throw new IllegalArgumentException("Unexpected boundKind "+s.boundKind);  //$NON-NLS-1$
 						}
 					}
 				} else { // SUPER 
 					if (this.left.kind() != Binding.WILDCARD_TYPE) {
-						return new ConstraintTypeFormula(t.bound, this.left, SUBTYPE, this.isSoft);
+						return ConstraintTypeFormula.create(t.bound, this.left, SUBTYPE, this.isSoft);
 					} else {
 						WildcardBinding s = (WildcardBinding) this.left;
 						if (s.boundKind == Wildcard.SUPER) {
-							return new ConstraintTypeFormula(t.bound, s.bound, SUBTYPE, this.isSoft);
+							return ConstraintTypeFormula.create(t.bound, s.bound, SUBTYPE, this.isSoft);
 						} else {
 							return FALSE;
 						}
@@ -144,13 +157,13 @@ class ConstraintTypeFormula extends ConstraintFormula {
 				if (leftWC.boundKind == Wildcard.UNBOUND && rightWC.boundKind == Wildcard.UNBOUND)
 					return TRUE;
 				if (leftWC.boundKind == Wildcard.UNBOUND && rightWC.boundKind == Wildcard.EXTENDS)
-					return new ConstraintTypeFormula(object, rightWC.bound, SAME, this.isSoft);
+					return ConstraintTypeFormula.create(object, rightWC.bound, SAME, this.isSoft);
 				if (leftWC.boundKind == Wildcard.EXTENDS && rightWC.boundKind == Wildcard.UNBOUND)
-					return new ConstraintTypeFormula(leftWC.bound, object, SAME, this.isSoft);
+					return ConstraintTypeFormula.create(leftWC.bound, object, SAME, this.isSoft);
 				if ((leftWC.boundKind == Wildcard.EXTENDS && rightWC.boundKind == Wildcard.EXTENDS)
 					||(leftWC.boundKind == Wildcard.SUPER && rightWC.boundKind == Wildcard.SUPER))
 				{
-					return new ConstraintTypeFormula(leftWC.bound, rightWC.bound, SAME, this.isSoft);
+					return ConstraintTypeFormula.create(leftWC.bound, rightWC.bound, SAME, this.isSoft);
 				}						
 			}
 		} else {
@@ -180,13 +193,13 @@ class ConstraintTypeFormula extends ConstraintFormula {
 					int len = leftParams.length;
 					ConstraintFormula[] constraints = new ConstraintFormula[len];
 					for (int i = 0; i < len; i++) {
-						constraints[i] = new ConstraintTypeFormula(leftParams[i], rightParams[i], SAME, this.isSoft);
+						constraints[i] = ConstraintTypeFormula.create(leftParams[i], rightParams[i], SAME, this.isSoft);
 					}
 					return constraints;
 				}
 				if (this.left.isArrayType() && this.right.isArrayType() && this.left.dimensions() == this.right.dimensions()) {
 					// checking dimensions already now is an optimization over reducing one dim at a time
-					return new ConstraintTypeFormula(this.left.leafComponentType(), this.right.leafComponentType(), SAME, this.isSoft);
+					return ConstraintTypeFormula.create(this.left.leafComponentType(), this.right.leafComponentType(), SAME, this.isSoft);
 				}
 			}
 		}
@@ -260,7 +273,7 @@ class ConstraintTypeFormula extends ConstraintFormula {
 					return FALSE;
 				TypeBinding sPrime = sPrimeArray.elementsType();
 				if (!tPrime.isPrimitiveType() && !sPrime.isPrimitiveType()) {
-					return new ConstraintTypeFormula(sPrime, tPrime, SUBTYPE, this.isSoft);
+					return ConstraintTypeFormula.create(sPrime, tPrime, SUBTYPE, this.isSoft);
 				}
 				return TypeBinding.equalsEquals(tPrime, sPrime) ? TRUE : FALSE; // same primitive type?
 
@@ -275,7 +288,7 @@ class ConstraintTypeFormula extends ConstraintFormula {
 				}
 				WildcardBinding variable = (WildcardBinding) superCandidate;
 				if (variable.boundKind == Wildcard.SUPER)
-					return new ConstraintTypeFormula(subCandidate, variable.bound, SUBTYPE, this.isSoft);
+					return ConstraintTypeFormula.create(subCandidate, variable.bound, SUBTYPE, this.isSoft);
 				return FALSE;
 			case Binding.TYPE_PARAMETER:
 				// similar to wildcard, but different queries for lower bound
@@ -289,7 +302,7 @@ class ConstraintTypeFormula extends ConstraintFormula {
 				if (superCandidate instanceof CaptureBinding) {
 					CaptureBinding capture = (CaptureBinding) superCandidate;
 					if (capture.lowerBound != null && (capture.firstBound == null || capture.firstBound.id == TypeIds.T_JavaLangObject))
-						return new ConstraintTypeFormula(subCandidate, capture.lowerBound, SUBTYPE, this.isSoft);
+						return ConstraintTypeFormula.create(subCandidate, capture.lowerBound, SUBTYPE, this.isSoft);
 				}
 				return FALSE;
 			case Binding.INTERSECTION_TYPE:
@@ -332,7 +345,7 @@ class ConstraintTypeFormula extends ConstraintFormula {
 		if (cb.isRawType() || bi == null || bi.length == 0)
 			return (this.isSoft && InferenceContext18.SIMULATE_BUG_JDK_8026527) ? true : false; // FALSE would conform to the spec 
 		for (int i = 0; i < ai.length; i++)
-			constraints.add(new ConstraintTypeFormula(bi[i], ai[i], TYPE_ARGUMENT_CONTAINED, this.isSoft));
+			constraints.add(ConstraintTypeFormula.create(bi[i], ai[i], TYPE_ARGUMENT_CONTAINED, this.isSoft));
 		return true;
 	}
 
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java
index 32cc29b..9059e10 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java
@@ -306,10 +306,6 @@ public class InferenceContext18 {
 			System.arraycopy(this.initialConstraints, 0, this.initialConstraints = new ConstraintFormula[numConstraints], 0, numConstraints);
 	}
 
-	public void setInitialConstraint(ConstraintFormula constraintFormula) {
-		this.initialConstraints = new ConstraintFormula[] { constraintFormula };
-	}
-
 	private InferenceVariable[] addInitialTypeVariableSubstitutions(TypeBinding[] typeVariables) {
 		int len = typeVariables.length;
 		if (len == 0) {
@@ -662,7 +658,7 @@ public class InferenceContext18 {
 		if (p != null) {
 			for (int i = 0; i < p.length; i++) {
 				try {
-					if (!this.reduceAndIncorporate(new ConstraintTypeFormula(p[i], q[i], ReductionResult.SAME)))
+					if (!this.reduceAndIncorporate(ConstraintTypeFormula.create(p[i], q[i], ReductionResult.SAME)))
 						return false;
 				} catch (InferenceFailureException e) {
 					return false;
@@ -697,13 +693,13 @@ public class InferenceContext18 {
 				if (result == Boolean.FALSE)
 					return false;
 				if (result == null)
-					if (!reduceAndIncorporate(new ConstraintTypeFormula(si, ti, ReductionResult.SUBTYPE)))
+					if (!reduceAndIncorporate(ConstraintTypeFormula.create(si, ti, ReductionResult.SUBTYPE)))
 						return false;
 			}
 			if (t.length == numInvocArgs + 1) {
 				TypeBinding skplus1 = getParameter(s, numInvocArgs, true);
 				TypeBinding tkplus1 = getParameter(t, numInvocArgs, true);
-				if (!reduceAndIncorporate(new ConstraintTypeFormula(skplus1, tkplus1, ReductionResult.SUBTYPE)))
+				if (!reduceAndIncorporate(ConstraintTypeFormula.create(skplus1, tkplus1, ReductionResult.SUBTYPE)))
 					return false;
 			}
 			return solve() != null;
@@ -786,11 +782,11 @@ public class InferenceContext18 {
 				}
 				return true;
 			}
-			return reduceAndIncorporate(new ConstraintTypeFormula(r1, r2, ReductionResult.SUBTYPE));
+			return reduceAndIncorporate(ConstraintTypeFormula.create(r1, r2, ReductionResult.SUBTYPE));
 		} else if (expri instanceof ReferenceExpression && ((ReferenceExpression)expri).isExactMethodReference()) {
 			for (int i = 0; i < u.length; i++) {
 				ReferenceExpression reference = (ReferenceExpression) expri;
-				if (!reduceAndIncorporate(new ConstraintTypeFormula(u[i], v[i], ReductionResult.SAME)))
+				if (!reduceAndIncorporate(ConstraintTypeFormula.create(u[i], v[i], ReductionResult.SAME)))
 					return false;
 				if (r2.id == TypeIds.T_void)
 					return true;
@@ -801,7 +797,7 @@ public class InferenceContext18 {
 				if (r2.isPrimitiveType() && !r1.isPrimitiveType() && !returnType.isPrimitiveType())
 					return true;
 			}
-			return reduceAndIncorporate(new ConstraintTypeFormula(r1, r2, ReductionResult.SUBTYPE));
+			return reduceAndIncorporate(ConstraintTypeFormula.create(r1, r2, ReductionResult.SUBTYPE));
 		} else if (expri instanceof ConditionalExpression) {
 			ConditionalExpression cond = (ConditionalExpression) expri;
 			return  checkExpression(cond.valueIfTrue, u, r1, v, r2) && checkExpression(cond.valueIfFalse, u, r1, v, r2);
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReductionResult.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReductionResult.java
index 351ce5b..540bfb3 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReductionResult.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReductionResult.java
@@ -20,12 +20,14 @@ package org.eclipse.jdt.internal.compiler.lookup;
  */
 public abstract class ReductionResult {
 
-	protected static final ReductionResult TRUE = new ReductionResult() {
+	protected static final ConstraintTypeFormula TRUE = new ConstraintTypeFormula() {
 		/* empty body just to make abstract class instantiable */
+		public Object reduce(InferenceContext18 context) { return this; }
 		public String toString() { return "TRUE"; } //$NON-NLS-1$
 	};
-	protected static final ReductionResult FALSE = new ReductionResult() { 
+	protected static final ConstraintTypeFormula FALSE = new ConstraintTypeFormula() { 
 		/* empty body just to make abstract class instantiable */ 
+		public Object reduce(InferenceContext18 context) { return this; }
 		public String toString() { return "FALSE"; } //$NON-NLS-1$
 	};
 	/** Used to accept unchecked conversion to make ecj conform with javac bug https://bugs.openjdk.java.net/browse/JDK-8026527 */

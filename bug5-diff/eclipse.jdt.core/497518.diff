commit bbebaacbe3431734fa3ac9262022a01387035db2
Author: Stefan Xenos <sxenos@gmail.com>
Date:   Thu Jul 7 11:13:03 2016 -0700

    Bug 497518 - Rename BinaryTypePrinter
    
    Signed-off-by: Stefan Xenos <sxenos@gmail.com>

1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/AnnotationInfo.java
126	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/BinaryTypeFormatter.java
0	126	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/BinaryTypePrinter.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/MethodInfo.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/TypeAnnotationInfo.java
2	2	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/model/IndexBinaryMethod.java
2	2	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/model/IndexBinaryType.java
2	2	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/model/IndexBinaryTypeAnnotation.java
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/AnnotationInfo.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/AnnotationInfo.java
index 63b00ba..247e293 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/AnnotationInfo.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/AnnotationInfo.java
@@ -377,7 +377,7 @@ private int scanElementValue(int offset) {
 	return currentOffset;
 }
 public String toString() {
-	return BinaryTypePrinter.printAnnotation(this);
+	return BinaryTypeFormatter.annotationToString(this);
 }
 public int hashCode() {
 	final int prime = 31;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/BinaryTypeFormatter.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/BinaryTypeFormatter.java
new file mode 100644
index 0000000..01da39d
--- /dev/null
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/BinaryTypeFormatter.java
@@ -0,0 +1,126 @@
+package org.eclipse.jdt.internal.compiler.classfmt;
+
+import org.eclipse.jdt.internal.compiler.env.IBinaryAnnotation;
+import org.eclipse.jdt.internal.compiler.env.IBinaryElementValuePair;
+import org.eclipse.jdt.internal.compiler.env.IBinaryMethod;
+import org.eclipse.jdt.internal.compiler.env.IBinaryTypeAnnotation;
+import org.eclipse.jdt.internal.compiler.util.Util;
+
+public class BinaryTypeFormatter {
+
+	public static String annotationToString(IBinaryAnnotation annotation) {
+		StringBuffer buffer = new StringBuffer();
+		buffer.append('@');
+		buffer.append(annotation.getTypeName());
+		IBinaryElementValuePair[] valuePairs = annotation.getElementValuePairs();
+		if (valuePairs != null) {
+			buffer.append('(');
+			buffer.append("\n\t"); //$NON-NLS-1$
+			for (int i = 0, len = valuePairs.length; i < len; i++) {
+				if (i > 0)
+					buffer.append(",\n\t"); //$NON-NLS-1$
+				buffer.append(valuePairs[i]);
+			}
+			buffer.append(')');
+		}
+		return buffer.toString();
+	}
+
+	public static String annotationToString(IBinaryTypeAnnotation typeAnnotation) {
+		StringBuffer buffer = new StringBuffer();
+		buffer.append(typeAnnotation.getAnnotation());
+		buffer.append(' ');
+		// Not fully decoding it here, just including all the information in the string
+		buffer.append("target_type=").append(typeAnnotation.getTargetType()); //$NON-NLS-1$
+		buffer.append(", info=").append(typeAnnotation.getSupertypeIndex()); //$NON-NLS-1$
+		buffer.append(", info2=").append(typeAnnotation.getBoundIndex()); //$NON-NLS-1$
+		int[] theTypePath = typeAnnotation.getTypePath();
+		if (theTypePath != null && theTypePath.length != 0) {
+			buffer.append(", location=["); //$NON-NLS-1$
+			for (int i = 0, max = theTypePath.length; i < max; i += 2) {
+				if (i > 0) {
+					buffer.append(", "); //$NON-NLS-1$
+				}
+				switch (theTypePath[i]) {
+					case 0:
+						buffer.append("ARRAY"); //$NON-NLS-1$
+						break;
+					case 1:
+						buffer.append("INNER_TYPE"); //$NON-NLS-1$
+						break;
+					case 2:
+						buffer.append("WILDCARD"); //$NON-NLS-1$
+						break;
+					case 3:
+						buffer.append("TYPE_ARGUMENT(").append(theTypePath[i+1]).append(')'); //$NON-NLS-1$
+						break;
+				}
+			}
+			buffer.append(']');
+		}
+		return buffer.toString();
+	}
+
+	public static String methodToString(IBinaryMethod method) {
+		StringBuffer result = new StringBuffer();
+		methodToStringContent(result, method);
+		return result.toString();
+	}
+
+	public static void methodToStringContent(StringBuffer buffer, IBinaryMethod method) {
+		int modifiers = method.getModifiers();
+		char[] desc = method.getGenericSignature();
+		if (desc == null)
+			desc = method.getMethodDescriptor();
+		buffer
+			.append('{')
+			.append(
+				((modifiers & ClassFileConstants.AccDeprecated) != 0 ? "deprecated " : Util.EMPTY_STRING) //$NON-NLS-1$
+					+ ((modifiers & 0x0001) == 1 ? "public " : Util.EMPTY_STRING) //$NON-NLS-1$
+					+ ((modifiers & 0x0002) == 0x0002 ? "private " : Util.EMPTY_STRING) //$NON-NLS-1$
+					+ ((modifiers & 0x0004) == 0x0004 ? "protected " : Util.EMPTY_STRING) //$NON-NLS-1$
+					+ ((modifiers & 0x0008) == 0x000008 ? "static " : Util.EMPTY_STRING) //$NON-NLS-1$
+					+ ((modifiers & 0x0010) == 0x0010 ? "final " : Util.EMPTY_STRING) //$NON-NLS-1$
+					+ ((modifiers & 0x0040) == 0x0040 ? "bridge " : Util.EMPTY_STRING) //$NON-NLS-1$
+					+ ((modifiers & 0x0080) == 0x0080 ? "varargs " : Util.EMPTY_STRING)) //$NON-NLS-1$
+			.append(method.getSelector())
+			.append(desc)
+			.append('}');
+
+		Object defaultValue = method.getDefaultValue();
+		if (defaultValue != null) {
+			buffer.append(" default "); //$NON-NLS-1$
+			if (defaultValue instanceof Object[]) {
+				buffer.append('{');
+				Object[] elements = (Object[]) defaultValue;
+				for (int i = 0, len = elements.length; i < len; i++) {
+					if (i > 0)
+						buffer.append(", "); //$NON-NLS-1$
+					buffer.append(elements[i]);
+				}
+				buffer.append('}');
+			} else {
+				buffer.append(defaultValue);
+			}
+			buffer.append('\n');
+		}
+
+		IBinaryAnnotation[] annotations = method.getAnnotations();
+		for (int i = 0, l = annotations == null ? 0 : annotations.length; i < l; i++) {
+			buffer.append(annotations[i]);
+			buffer.append('\n');
+		}
+
+		int annotatedParameterCount = method.getAnnotatedParametersCount();
+		for (int i = 0; i < annotatedParameterCount; i++) {
+			buffer.append("param" + (i - 1)); //$NON-NLS-1$
+			buffer.append('\n');
+			IBinaryAnnotation[] infos = method.getParameterAnnotations(i, new char[0]);
+			for (int j = 0, k = infos == null ? 0 : infos.length; j < k; j++) {
+				buffer.append(infos[j]);
+				buffer.append('\n');
+			}
+		}
+	}
+
+}
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/BinaryTypePrinter.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/BinaryTypePrinter.java
deleted file mode 100644
index 79e9506..0000000
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/BinaryTypePrinter.java
+++ /dev/null
@@ -1,126 +0,0 @@
-package org.eclipse.jdt.internal.compiler.classfmt;
-
-import org.eclipse.jdt.internal.compiler.env.IBinaryAnnotation;
-import org.eclipse.jdt.internal.compiler.env.IBinaryElementValuePair;
-import org.eclipse.jdt.internal.compiler.env.IBinaryMethod;
-import org.eclipse.jdt.internal.compiler.env.IBinaryTypeAnnotation;
-import org.eclipse.jdt.internal.compiler.util.Util;
-
-public class BinaryTypePrinter {
-
-	public static String printAnnotation(IBinaryAnnotation annotation) {
-		StringBuffer buffer = new StringBuffer();
-		buffer.append('@');
-		buffer.append(annotation.getTypeName());
-		IBinaryElementValuePair[] valuePairs = annotation.getElementValuePairs();
-		if (valuePairs != null) {
-			buffer.append('(');
-			buffer.append("\n\t"); //$NON-NLS-1$
-			for (int i = 0, len = valuePairs.length; i < len; i++) {
-				if (i > 0)
-					buffer.append(",\n\t"); //$NON-NLS-1$
-				buffer.append(valuePairs[i]);
-			}
-			buffer.append(')');
-		}
-		return buffer.toString();
-	}
-
-	public static String printTypeAnnotation(IBinaryTypeAnnotation typeAnnotation) {
-		StringBuffer buffer = new StringBuffer();
-		buffer.append(typeAnnotation.getAnnotation());
-		buffer.append(' ');
-		// Not fully decoding it here, just including all the information in the string
-		buffer.append("target_type=").append(typeAnnotation.getTargetType()); //$NON-NLS-1$
-		buffer.append(", info=").append(typeAnnotation.getSupertypeIndex()); //$NON-NLS-1$
-		buffer.append(", info2=").append(typeAnnotation.getBoundIndex()); //$NON-NLS-1$
-		int[] theTypePath = typeAnnotation.getTypePath();
-		if (theTypePath != null && theTypePath.length != 0) {
-			buffer.append(", location=["); //$NON-NLS-1$
-			for (int i = 0, max = theTypePath.length; i < max; i += 2) {
-				if (i > 0) {
-					buffer.append(", "); //$NON-NLS-1$
-				}
-				switch (theTypePath[i]) {
-					case 0:
-						buffer.append("ARRAY"); //$NON-NLS-1$
-						break;
-					case 1:
-						buffer.append("INNER_TYPE"); //$NON-NLS-1$
-						break;
-					case 2:
-						buffer.append("WILDCARD"); //$NON-NLS-1$
-						break;
-					case 3:
-						buffer.append("TYPE_ARGUMENT(").append(theTypePath[i+1]).append(')'); //$NON-NLS-1$
-						break;
-				}
-			}
-			buffer.append(']');
-		}
-		return buffer.toString();
-	}
-
-	public static String printMethod(IBinaryMethod method) {
-		StringBuffer result = new StringBuffer();
-		toStringContent(result, method);
-		return result.toString();
-	}
-
-	public static void toStringContent(StringBuffer buffer, IBinaryMethod method) {
-		int modifiers = method.getModifiers();
-		char[] desc = method.getGenericSignature();
-		if (desc == null)
-			desc = method.getMethodDescriptor();
-		buffer
-			.append('{')
-			.append(
-				((modifiers & ClassFileConstants.AccDeprecated) != 0 ? "deprecated " : Util.EMPTY_STRING) //$NON-NLS-1$
-					+ ((modifiers & 0x0001) == 1 ? "public " : Util.EMPTY_STRING) //$NON-NLS-1$
-					+ ((modifiers & 0x0002) == 0x0002 ? "private " : Util.EMPTY_STRING) //$NON-NLS-1$
-					+ ((modifiers & 0x0004) == 0x0004 ? "protected " : Util.EMPTY_STRING) //$NON-NLS-1$
-					+ ((modifiers & 0x0008) == 0x000008 ? "static " : Util.EMPTY_STRING) //$NON-NLS-1$
-					+ ((modifiers & 0x0010) == 0x0010 ? "final " : Util.EMPTY_STRING) //$NON-NLS-1$
-					+ ((modifiers & 0x0040) == 0x0040 ? "bridge " : Util.EMPTY_STRING) //$NON-NLS-1$
-					+ ((modifiers & 0x0080) == 0x0080 ? "varargs " : Util.EMPTY_STRING)) //$NON-NLS-1$
-			.append(method.getSelector())
-			.append(desc)
-			.append('}');
-
-		Object defaultValue = method.getDefaultValue();
-		if (defaultValue != null) {
-			buffer.append(" default "); //$NON-NLS-1$
-			if (defaultValue instanceof Object[]) {
-				buffer.append('{');
-				Object[] elements = (Object[]) defaultValue;
-				for (int i = 0, len = elements.length; i < len; i++) {
-					if (i > 0)
-						buffer.append(", "); //$NON-NLS-1$
-					buffer.append(elements[i]);
-				}
-				buffer.append('}');
-			} else {
-				buffer.append(defaultValue);
-			}
-			buffer.append('\n');
-		}
-
-		IBinaryAnnotation[] annotations = method.getAnnotations();
-		for (int i = 0, l = annotations == null ? 0 : annotations.length; i < l; i++) {
-			buffer.append(annotations[i]);
-			buffer.append('\n');
-		}
-
-		int annotatedParameterCount = method.getAnnotatedParametersCount();
-		for (int i = 0; i < annotatedParameterCount; i++) {
-			buffer.append("param" + (i - 1)); //$NON-NLS-1$
-			buffer.append('\n');
-			IBinaryAnnotation[] infos = method.getParameterAnnotations(i, new char[0]);
-			for (int j = 0, k = infos == null ? 0 : infos.length; j < k; j++) {
-				buffer.append(infos[j]);
-				buffer.append('\n');
-			}
-		}
-	}
-
-}
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/MethodInfo.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/MethodInfo.java
index ded6cb5..9300bdd 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/MethodInfo.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/MethodInfo.java
@@ -453,7 +453,7 @@ void toString(StringBuffer buffer) {
 	toStringContent(buffer);
 }
 protected void toStringContent(StringBuffer buffer) {
-	BinaryTypePrinter.toStringContent(buffer, this);
+	BinaryTypeFormatter.methodToStringContent(buffer, this);
 }
 private void readCodeAttribute() {
 	int attributesCount = u2At(6);
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/TypeAnnotationInfo.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/TypeAnnotationInfo.java
index 18d26b4..7f05ed2 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/TypeAnnotationInfo.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/TypeAnnotationInfo.java
@@ -123,7 +123,7 @@ protected void reset() {
 }
 
 public String toString() {
-	return BinaryTypePrinter.printTypeAnnotation(this);
+	return BinaryTypeFormatter.annotationToString(this);
 }
 
 public int getTargetType() {
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/model/IndexBinaryMethod.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/model/IndexBinaryMethod.java
index 29031c9..713a629 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/model/IndexBinaryMethod.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/model/IndexBinaryMethod.java
@@ -1,6 +1,6 @@
 package org.eclipse.jdt.internal.core.nd.java.model;
 
-import org.eclipse.jdt.internal.compiler.classfmt.BinaryTypePrinter;
+import org.eclipse.jdt.internal.compiler.classfmt.BinaryTypeFormatter;
 import org.eclipse.jdt.internal.compiler.env.IBinaryAnnotation;
 import org.eclipse.jdt.internal.compiler.env.IBinaryMethod;
 import org.eclipse.jdt.internal.compiler.env.IBinaryTypeAnnotation;
@@ -167,6 +167,6 @@ public final class IndexBinaryMethod implements IBinaryMethod {
 
 	@Override
 	public String toString() {
-		return BinaryTypePrinter.printMethod(this);
+		return BinaryTypeFormatter.methodToString(this);
 	}
 }
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/model/IndexBinaryType.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/model/IndexBinaryType.java
index ed335f0..bd72d16 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/model/IndexBinaryType.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/model/IndexBinaryType.java
@@ -4,7 +4,7 @@ import java.util.ArrayList;
 import java.util.List;
 
 import org.eclipse.jdt.core.compiler.CharOperation;
-import org.eclipse.jdt.internal.compiler.classfmt.BinaryTypePrinter;
+import org.eclipse.jdt.internal.compiler.classfmt.BinaryTypeFormatter;
 import org.eclipse.jdt.internal.compiler.classfmt.ElementValuePairInfo;
 import org.eclipse.jdt.internal.compiler.env.ClassSignature;
 import org.eclipse.jdt.internal.compiler.env.EnumConstantSignature;
@@ -582,7 +582,7 @@ public class IndexBinaryType implements IBinaryType {
 
 			@Override
 			public String toString() {
-				return BinaryTypePrinter.printAnnotation(this);
+				return BinaryTypeFormatter.annotationToString(this);
 			}
 		};
 	}
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/model/IndexBinaryTypeAnnotation.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/model/IndexBinaryTypeAnnotation.java
index f7a710c..22f82b6 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/model/IndexBinaryTypeAnnotation.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/model/IndexBinaryTypeAnnotation.java
@@ -1,6 +1,6 @@
 package org.eclipse.jdt.internal.core.nd.java.model;
 
-import org.eclipse.jdt.internal.compiler.classfmt.BinaryTypePrinter;
+import org.eclipse.jdt.internal.compiler.classfmt.BinaryTypeFormatter;
 import org.eclipse.jdt.internal.compiler.env.IBinaryAnnotation;
 import org.eclipse.jdt.internal.compiler.env.IBinaryTypeAnnotation;
 
@@ -75,6 +75,6 @@ public class IndexBinaryTypeAnnotation implements IBinaryTypeAnnotation {
 
 	@Override
 	public String toString() {
-		return BinaryTypePrinter.printTypeAnnotation(this);
+		return BinaryTypeFormatter.annotationToString(this);
 	}
 }

commit ada228b329eb7b8a5e5886df400ef6ba46d807cb
Author: Sasikanth Bharadwaj <sasikanth.bharadwaj@in.ibm.com>
Date:   Tue Oct 18 14:49:13 2016 +0530

    [9][compiler] Follow up tasks after (if) the patch for bug 500265 goes
    in - remove IModuleEnvironment from IModule and ModuleBinding to ease
    module implementation in the model
    
    Change-Id: I379eb7657f2af47b5085c3e912d981933d756507

0	7	org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/BinaryModule.java
4	0	org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java
0	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/env/IModule.java
1	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/env/IModuleAwareNameEnvironment.java
7	9	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ModuleBinding.java
0	7	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ModuleEnvironment.java
0	17	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Module.java
20	0	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java
11	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironment.java
0	6	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/Module.java
12	0	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/NameEnvironment.java
diff --git a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/BinaryModule.java b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/BinaryModule.java
index ea89799..7ee3db4 100644
--- a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/BinaryModule.java
+++ b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/BinaryModule.java
@@ -17,7 +17,6 @@ package org.eclipse.jdt.internal.compiler.batch;
 import org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader;
 import org.eclipse.jdt.internal.compiler.env.IModule;
 import org.eclipse.jdt.internal.compiler.env.IModuleDeclaration;
-import org.eclipse.jdt.internal.compiler.env.IModuleEnvironment;
 import org.eclipse.jdt.internal.compiler.env.IModulePathEntry;
 
 public class BinaryModule implements IModule {
@@ -40,10 +39,4 @@ public class BinaryModule implements IModule {
 		return this.declaration;
 	}
 
-	@Override
-	public IModuleEnvironment getLookupEnvironment() {
-		// 
-		return this.entry.getLookupEnvironment();
-	}
-
 }
diff --git a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java
index f6efc00..57d3263 100644
--- a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java
+++ b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java
@@ -35,6 +35,7 @@ import org.eclipse.jdt.internal.compiler.env.IModulePathEntry;
 import org.eclipse.jdt.internal.compiler.env.IModule;
 import org.eclipse.jdt.internal.compiler.env.IModuleAwareNameEnvironment;
 import org.eclipse.jdt.internal.compiler.env.IModuleContext;
+import org.eclipse.jdt.internal.compiler.env.IModuleEnvironment;
 import org.eclipse.jdt.internal.compiler.env.IModuleDeclaration.IPackageExport;
 import org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer;
 import org.eclipse.jdt.internal.compiler.env.ITypeLookup;
@@ -472,6 +473,9 @@ public IModule getModule(char[] name) {
 	return Stream.of(this.classpaths).map(cp -> cp.getModule(name)).filter(m -> m != null).findAny().orElse(null);
 	
 }
+public IModuleEnvironment getModuleEnvironmentFor(char[] moduleName) {
+	return (IModuleEnvironment) Stream.of(this.classpaths).filter(cp -> cp.getModule(moduleName) != null).findAny().orElse(null);
+}
 private NameEnvironmentAnswer internalFindClass(String qualifiedTypeName, char[] typeName, boolean asBinaryOnly, IModuleContext moduleContext) {
 	if (this.knownFileNames.contains(qualifiedTypeName)) return null; // looking for a file which we know was provided at the beginning of the compilation
 
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/env/IModule.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/env/IModule.java
index 156272d..1ae953b 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/env/IModule.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/env/IModule.java
@@ -23,6 +23,4 @@ public interface IModule {
 	public char[] name();
 
 	public IModuleDeclaration getDeclaration();
-	
-	IModuleEnvironment getLookupEnvironment();
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/env/IModuleAwareNameEnvironment.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/env/IModuleAwareNameEnvironment.java
index 1ad0836..137c8ac 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/env/IModuleAwareNameEnvironment.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/env/IModuleAwareNameEnvironment.java
@@ -33,4 +33,5 @@ public interface IModuleAwareNameEnvironment extends INameEnvironment {
 	NameEnvironmentAnswer findType(char[] typeName, char[][] packageName, IModuleContext moduleContext);
 	boolean isPackage(char[][] parentPackageName, char[] packageName, IModuleContext moduleContext);
 	IModule getModule(char[] moduleName);
+	IModuleEnvironment getModuleEnvironmentFor(char[] moduleName);
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ModuleBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ModuleBinding.java
index c9f69d9..ec58be8 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ModuleBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ModuleBinding.java
@@ -67,8 +67,6 @@ public class ModuleBinding extends Binding {
 	public TypeBinding[] implementations;
 	public CompilationUnitScope scope;
 	public LookupEnvironment environment;
-	public IModuleEnvironment moduleEnviroment;
-	public INameEnvironment nameEnvironment;
 	public int tagBits;
 	private ModuleBinding[] requiredModules = null;
 	
@@ -84,7 +82,6 @@ public class ModuleBinding extends Binding {
 		this.environment = env;
 		this.requires = NO_MODULE_REFS;
 		this.exports = NO_EXPORTS;
-		this.nameEnvironment = env.nameEnvironment;
 		this.declaredPackages = new HashtableOfPackage(0);
 		this.exportedPackages = new HashtableOfPackage(0);
 	}
@@ -101,8 +98,6 @@ public class ModuleBinding extends Binding {
 		this.uses = Binding.NO_TYPES;
 		this.services = Binding.NO_TYPES;
 		this.implementations = Binding.NO_TYPES;
-		this.moduleEnviroment = module.getLookupEnvironment();
-		this.nameEnvironment = environment.nameEnvironment;
 		this.declaredPackages = new HashtableOfPackage(5);
 		this.exportedPackages = new HashtableOfPackage(5);
 	}
@@ -321,10 +316,11 @@ public class ModuleBinding extends Binding {
 			else
 				return true;
 		}
-		if (this.nameEnvironment instanceof IModuleAwareNameEnvironment) {
-			return ((IModuleAwareNameEnvironment)this.nameEnvironment).isPackage(parentPackageName, name, getModuleLookupContext());
+		INameEnvironment nameEnvironment = this.environment.nameEnvironment;
+		if (nameEnvironment instanceof IModuleAwareNameEnvironment) {
+			return ((IModuleAwareNameEnvironment)nameEnvironment).isPackage(parentPackageName, name, getModuleLookupContext());
 		} else {
-			return this.nameEnvironment.isPackage(parentPackageName, name);
+			return nameEnvironment.isPackage(parentPackageName, name);
 		}
 	}
 	public PackageBinding getPackage(char[][] parentPackageName, char[] packageName) {
@@ -374,7 +370,9 @@ public class ModuleBinding extends Binding {
 	}
 	// A context representing just this module
  	public IModuleContext getModuleLookupContext() {
- 		return () -> this.moduleEnviroment == null ? Stream.empty() : Stream.of(this.moduleEnviroment);
+ 		IModuleAwareNameEnvironment env = (IModuleAwareNameEnvironment) this.environment.nameEnvironment;
+ 		IModuleEnvironment moduleEnvironment = env.getModuleEnvironmentFor(this.moduleName);
+ 		return () -> moduleEnvironment == null ? Stream.empty() : Stream.of(moduleEnvironment);
  	}
  	// A context including this module and all it's required modules
  	public IModuleContext getDependencyClosureContext() {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ModuleEnvironment.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ModuleEnvironment.java
index c81b503..1ed34ee 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ModuleEnvironment.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ModuleEnvironment.java
@@ -22,7 +22,6 @@ import org.eclipse.jdt.internal.compiler.env.IModule;
 import org.eclipse.jdt.internal.compiler.env.IModuleAwareNameEnvironment;
 import org.eclipse.jdt.internal.compiler.env.IModuleContext;
 import org.eclipse.jdt.internal.compiler.env.IModuleDeclaration;
-import org.eclipse.jdt.internal.compiler.env.IModuleEnvironment;
 import org.eclipse.jdt.internal.compiler.env.IModuleLocation;
 import org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer;
 import org.eclipse.jdt.internal.compiler.util.JRTUtil;
@@ -55,12 +54,6 @@ public abstract class ModuleEnvironment implements IModuleAwareNameEnvironment {
 			// TODO Auto-generated method stub
 			return null;
 		}
-
-		@Override
-		public IModuleEnvironment getLookupEnvironment() {
-			// TODO Auto-generated method stub
-			return null;
-		}
 	};
 	public static IModule[] UNNAMED_MODULE_ARRAY = new IModule[]{UNNAMED_MODULE};
 	private HashMap<String, IModule> modulesCache = null;
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Module.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Module.java
index 7bb9c7e..1899fec 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Module.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Module.java
@@ -14,13 +14,11 @@
  *******************************************************************************/
 package org.eclipse.jdt.internal.core;
 
-import org.eclipse.jdt.core.IJavaElement;
 import org.eclipse.jdt.core.IType;
 import org.eclipse.jdt.core.JavaModelException;
 import org.eclipse.jdt.core.compiler.CharOperation;
 import org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader;
 import org.eclipse.jdt.internal.compiler.env.IModuleDeclaration;
-import org.eclipse.jdt.internal.compiler.env.IModuleEnvironment;
 
 public class Module implements org.eclipse.jdt.internal.compiler.env.IModule {
 
@@ -59,21 +57,6 @@ public class Module implements org.eclipse.jdt.internal.compiler.env.IModule {
 		}
 		return this.declaration;
 	}
-	@Override
-	public IModuleEnvironment getLookupEnvironment() {
-		// TODO: this should refer to the ModuleSourcePathManager to map this module to
-		// an IModuelePathEntry
-		if (this.isBinary) {
-			PackageFragmentRoot root = (PackageFragmentRoot) this.binaryDecl
-					.getAncestor(IJavaElement.PACKAGE_FRAGMENT_ROOT);
-			if (root instanceof JrtPackageFragmentRoot)
-				return (JrtPackageFragmentRoot) root;
-		} else {
-			return (JavaProject) this.sourceDecl.getAncestor(IJavaElement.JAVA_PROJECT);
-
-		}
-		return null;
-	}
 	
 	public String toString() {
 		return new String(this.name());
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java
index f78b23d..4518f88 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java
@@ -37,6 +37,8 @@ import org.eclipse.jdt.internal.compiler.env.AccessRuleSet;
 import org.eclipse.jdt.internal.compiler.env.IBinaryType;
 import org.eclipse.jdt.internal.compiler.env.IModule;
 import org.eclipse.jdt.internal.compiler.env.IModuleContext;
+import org.eclipse.jdt.internal.compiler.env.IModuleEnvironment;
+import org.eclipse.jdt.internal.compiler.env.IModulePathEntry;
 import org.eclipse.jdt.internal.compiler.lookup.ModuleEnvironment;
 import org.eclipse.jdt.internal.compiler.lookup.TypeConstants;
 import org.eclipse.jdt.internal.compiler.parser.ScannerHelper;
@@ -1192,6 +1194,24 @@ public class NameLookup implements SuffixConstants {
 				requestor.acceptModule(module);
 		}
 	}
+	public IModuleEnvironment getModuleEnvironmentFor(char[] moduleName) throws JavaModelException {
+		String name = CharOperation.charToString(moduleName);
+		IModulePathEntry entry = JavaModelManager.getModulePathManager().getModuleRoot(name);
+		if (entry != null) {
+			IModule module = JavaModelManager.getModulePathManager().getModule(moduleName);
+			return entry.getLookupEnvironmentFor(module);
+		}
+		int count= this.packageFragmentRoots.length;
+		for (int i= 0; i < count; i++) {
+			IPackageFragmentRoot root= this.packageFragmentRoots[i];
+			if (root instanceof JrtPackageFragmentRoot) {
+				if (CharOperation.equals(moduleName, root.getElementName().toCharArray())) {
+					return (IModuleEnvironment) root;
+				}
+			}
+		}
+		return null;
+	}
 	public void seekModules(char[] name, JavaElementRequestor requestor) {
 		seekModule(name, false, requestor);
 	}
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironment.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironment.java
index a9cfb95..0205ff3 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironment.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironment.java
@@ -27,6 +27,7 @@ import org.eclipse.jdt.internal.compiler.env.IBinaryType;
 import org.eclipse.jdt.internal.compiler.env.ICompilationUnit;
 import org.eclipse.jdt.internal.compiler.env.IModuleAwareNameEnvironment;
 import org.eclipse.jdt.internal.compiler.env.IModuleContext;
+import org.eclipse.jdt.internal.compiler.env.IModuleEnvironment;
 import org.eclipse.jdt.internal.compiler.env.ISourceType;
 import org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer;
 import org.eclipse.jdt.internal.compiler.lookup.ModuleEnvironment;
@@ -776,7 +777,16 @@ public class SearchableEnvironment
 		}
 		return module;
 	}
-
+	public IModuleEnvironment getModuleEnvironmentFor(char[] moduleName) {
+		IModuleEnvironment env = null;
+		try {
+			env = this.nameLookup.getModuleEnvironmentFor(moduleName);
+		} catch (JavaModelException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+		return env;
+	}
 	@Override
 	public NameEnvironmentAnswer findType(char[][] compoundTypeName) {
 		// 
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/Module.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/Module.java
index 8333df1..4b8fe95 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/Module.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/Module.java
@@ -16,7 +16,6 @@ package org.eclipse.jdt.internal.core.builder;
 
 import org.eclipse.jdt.internal.compiler.env.IModule;
 import org.eclipse.jdt.internal.compiler.env.IModuleDeclaration;
-import org.eclipse.jdt.internal.compiler.env.IModuleEnvironment;
 import org.eclipse.jdt.internal.compiler.env.IModulePathEntry;
 
 public class Module implements IModule {
@@ -38,9 +37,4 @@ public class Module implements IModule {
 		// 
 		return this.declaration;
 	}
-	@Override
-	public IModuleEnvironment getLookupEnvironment() {
-		// 
-		return this.entry == null ? null : this.entry.getLookupEnvironment();
-	}
 }
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/NameEnvironment.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/NameEnvironment.java
index 420aede..0fa8df0 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/NameEnvironment.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/NameEnvironment.java
@@ -413,4 +413,16 @@ public IModule getModule(char[] name) {
 	}
 	return module;
 }
+public IModuleEnvironment getModuleEnvironmentFor(char[] moduleName) {
+	IModule module = null;
+	for (int i = 0, l = this.sourceLocations.length; i < l; i++) {
+		if ((module = this.sourceLocations[i].getModule(moduleName)) != null)
+			return this.sourceLocations[i].getLookupEnvironmentFor(module);
+	}
+	for (int i = 0, l = this.binaryLocations.length; i < l; i++) {
+		if ((module = this.binaryLocations[i].getModule(moduleName)) != null)
+			return this.binaryLocations[i].getLookupEnvironmentFor(module);
+	}
+	return null;
+}
 }
commit 76c819c382e0b9874c23fb7ae812e8d81fc05724
Author: Sasikanth Bharadwaj <sasikanth.bharadwaj@in.ibm.com>
Date:   Wed Oct 19 11:40:19 2016 +0530

    [9][compiler] Follow up tasks after (if) the patch for bug 500265 goes
    in - fix issue with NameLookup because of earlier commit

3	16	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ProjectEntry.java
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ProjectEntry.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ProjectEntry.java
index b979ca8..4acaeb2 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ProjectEntry.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ProjectEntry.java
@@ -18,14 +18,12 @@ import org.eclipse.jdt.core.JavaModelException;
 import org.eclipse.jdt.internal.compiler.env.IModule;
 import org.eclipse.jdt.internal.compiler.env.IModuleEnvironment;
 import org.eclipse.jdt.internal.compiler.env.IModulePathEntry;
-import org.eclipse.jdt.internal.compiler.env.IPackageLookup;
-import org.eclipse.jdt.internal.compiler.env.ITypeLookup;
 
 /**
  * Represents a project
  *
  */
-public class ProjectEntry implements IModulePathEntry, IModuleEnvironment {
+public class ProjectEntry implements IModulePathEntry {
 
 	JavaProject project;
 	
@@ -48,25 +46,14 @@ public class ProjectEntry implements IModulePathEntry, IModuleEnvironment {
 	@Override
 	public IModuleEnvironment getLookupEnvironment() {
 		// 
-		return this;
+		return this.project;
 	}
 
 	@Override
 	public IModuleEnvironment getLookupEnvironmentFor(IModule module) {
 		//
 		if (getModule() == module)
-			return this;
+			return this.project;
 		return null;
 	}
-	@Override
-	public ITypeLookup typeLookup() {
-		// 
-		return ITypeLookup.Dummy;
-	}
-	@Override
-	public IPackageLookup packageLookup() {
-		// 
-		return IPackageLookup.Dummy;
-	}
-
 }

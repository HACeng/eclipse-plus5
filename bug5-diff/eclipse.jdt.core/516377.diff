commit 6f90d44d90811c036e9a1d93a1138bbc37f8d26b
Author: Stephan Herrmann <stephan.herrmann@berlin.de>
Date:   Sat Sep 9 20:50:06 2017 +0200

    Bug 516377: [9] Add more attributes to module-info.class
    
    Change-Id: I247af00755199cddcb9c6b83ae7dfe06404aea13

140	0	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/Java9ElementTests.java
66	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java
3	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/AttributeNamesConstants.java
6	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/env/IUpdatableModule.java
28	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ModuleBinding.java
13	0	org.eclipse.jdt.core/model/org/eclipse/jdt/core/IClasspathAttribute.java
36	0	org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java
17	2	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ModuleUpdater.java
1	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironment.java
106	0	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ModuleInfoBuilder.java
1	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/NameEnvironment.java
1	3	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ModuleMainClassAttribute.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/Java9ElementTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/Java9ElementTests.java
index 125d6eb..575fb98 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/Java9ElementTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/Java9ElementTests.java
@@ -14,13 +14,19 @@
  *******************************************************************************/
 package org.eclipse.jdt.core.tests.model;
 
+import java.io.ByteArrayInputStream;
 import java.io.IOException;
+import java.io.InputStream;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.Map;
 import java.util.regex.Pattern;
 
 import org.eclipse.core.resources.IncrementalProjectBuilder;
 import org.eclipse.core.runtime.CoreException;
 import org.eclipse.core.runtime.IPath;
 import org.eclipse.core.runtime.Path;
+import org.eclipse.jdt.core.IClasspathAttribute;
 import org.eclipse.jdt.core.IClasspathEntry;
 import org.eclipse.jdt.core.ICompilationUnit;
 import org.eclipse.jdt.core.IJavaElement;
@@ -31,7 +37,14 @@ import org.eclipse.jdt.core.IPackageFragmentRoot;
 import org.eclipse.jdt.core.IType;
 import org.eclipse.jdt.core.ITypeRoot;
 import org.eclipse.jdt.core.JavaCore;
+import org.eclipse.jdt.core.ToolFactory;
+import org.eclipse.jdt.core.compiler.CharOperation;
 import org.eclipse.jdt.core.tests.util.AbstractCompilerTest;
+import org.eclipse.jdt.core.util.IAttributeNamesConstants;
+import org.eclipse.jdt.core.util.IClassFileAttribute;
+import org.eclipse.jdt.core.util.IClassFileReader;
+import org.eclipse.jdt.core.util.IModuleMainClassAttribute;
+import org.eclipse.jdt.core.util.IModulePackagesAttribute;
 import org.eclipse.jdt.internal.compiler.env.IModule.IPackageExport;
 import org.eclipse.jdt.internal.core.BinaryModule;
 
@@ -1088,4 +1101,131 @@ public class Java9ElementTests extends AbstractJavaModelTests {
 			deleteProject("mod.zero");
 		}
 	}
+
+	// using classpath attribute
+	public void testModuleAttributes1() throws Exception {
+		try {
+			IJavaProject javaProject = createJava9Project("mod.zero");
+			IClasspathAttribute[] cpMainAttribute = {JavaCore.newClasspathAttribute(IClasspathAttribute.MODULE_MAIN_CLASS, "test0.PQRS")};
+			IClasspathEntry src2 = JavaCore.newSourceEntry(new Path("/mod.zero/src2"), null, null, new Path("/mod.zero/bin"), cpMainAttribute);
+			addClasspathEntry(javaProject, src2);
+			createFolder("/mod.zero/src/test0");
+			createFile("/mod.zero/src/test0/PQRS.java",
+							"package test0;\n" +
+							"\n" +
+							"public class PQRS {}");
+			createFolder("/mod.zero/src/test1");
+			String content = 	"module mod.zero {\n" +
+								"	exports test0;\n" +
+								"}\n";
+			createFolder("/mod.zero/src2");
+			createFile("/mod.zero/src2/module-info.java", content);
+
+			javaProject.getProject().build(IncrementalProjectBuilder.FULL_BUILD, null);
+
+			String classFile = javaProject.getProject().getLocation().toString()+"/bin/module-info.class";
+			IClassFileReader cfr = ToolFactory.createDefaultClassFileReader(classFile, IClassFileReader.ALL);
+			assertNotNull("Error reading class bytes", cfr);
+			IClassFileAttribute attr = Arrays.stream(cfr.getAttributes())
+					.filter(e -> new String(e.getAttributeName()).equals("ModuleMainClass"))
+					.findFirst()
+					.orElse(null);
+			assertNotNull("ModuleMainClass attribute not found", attr);
+			IModuleMainClassAttribute mainAttribute = (IModuleMainClassAttribute) attr;
+			assertEquals("main attribute value", "test0/PQRS", String.valueOf(mainAttribute.getMainClassName()));
+
+		} finally {
+			deleteProject("mod.zero");
+		}
+	}
+
+	// using dedicated API
+	public void testModuleAttributes2() throws Exception {
+		try {
+			IJavaProject javaProject = createJava9Project("mod.zero");
+
+			createFolder("/mod.zero/src/test0");
+			createFile("/mod.zero/src/test0/SPQR.java",
+							"package test0;\n" +
+							"\n" +
+							"public class SPQR {}");
+
+			createFolder("/mod.zero/src/test1");
+			createFile("/mod.zero/src/test1/Service.java",
+							"package test1;\n" +
+							"\n" +
+							"public interface Service {}");
+
+			createFolder("/mod.zero/src/test2");
+			createFile("/mod.zero/src/test2/Impl.java",
+							"package test2;\n" +
+							"\n" +
+							"public class Impl implements test1.Service {}");
+
+			createFolder("/mod.zero/src/testDont");
+			createFile("/mod.zero/src/testDont/Show.java",
+							"package testDont;\n" +
+							"\n" +
+							"public class Show {}");
+
+			String content = 	"module mod.zero {\n" +
+								"	exports test0;\n" +
+								"	opens test1;\n" +
+								"	provides test1.Service with test2.Impl;\n" +
+								"}\n";
+			createFile("/mod.zero/src/module-info.java", content);
+
+			javaProject.getProject().build(IncrementalProjectBuilder.FULL_BUILD, null);
+
+			ICompilationUnit unit = getCompilationUnit("/mod.zero/src/module-info.java");
+			IModuleDescription module = unit.getModule();
+
+			Map<String,String> attributes = new HashMap<>();
+			attributes.put(String.valueOf(IAttributeNamesConstants.MODULE_MAIN_CLASS), "test0.SPQR");
+			attributes.put(String.valueOf(IAttributeNamesConstants.MODULE_PACKAGES), "");
+
+			byte[] bytes = JavaCore.compileWithAttributes(module, attributes);
+
+			InputStream byteStream = new ByteArrayInputStream(bytes);
+			IClassFileReader cfr = ToolFactory.createDefaultClassFileReader(byteStream, IClassFileReader.ALL);
+			assertNotNull("Error reading class bytes", cfr);
+			IClassFileAttribute attr = Arrays.stream(cfr.getAttributes())
+					.filter(e -> new String(e.getAttributeName()).equals("ModuleMainClass"))
+					.findFirst()
+					.orElse(null);
+			assertNotNull("Module attribute not found", attr);
+
+			assertNotNull("main attribute", attr);
+			IModuleMainClassAttribute mainAttribute = (IModuleMainClassAttribute) attr;
+			assertEquals("main attribute value", "test0/SPQR", String.valueOf(mainAttribute.getMainClassName()));
+
+			attr = Arrays.stream(cfr.getAttributes())
+					.filter(e -> new String(e.getAttributeName()).equals("ModulePackages"))
+					.findFirst()
+					.orElse(null);
+			assertNotNull("ModulePackages attribute not found", attr);
+			IModulePackagesAttribute packagesAttribute = (IModulePackagesAttribute) attr;
+			String[] packageNames = CharOperation.toStrings(packagesAttribute.getPackageNames());
+			assertEquals("main attribute value", "test0,test1,test2", String.join(",", packageNames));
+
+			// now include testDont in ModulePackages:
+			attributes.put(String.valueOf(IAttributeNamesConstants.MODULE_PACKAGES), "testDont");
+			bytes = JavaCore.compileWithAttributes(module, attributes);
+
+			byteStream = new ByteArrayInputStream(bytes);
+			cfr = ToolFactory.createDefaultClassFileReader(byteStream, IClassFileReader.ALL);
+			assertNotNull("Error reading class bytes", cfr);
+			attr = Arrays.stream(cfr.getAttributes())
+					.filter(e -> new String(e.getAttributeName()).equals("ModulePackages"))
+					.findFirst()
+					.orElse(null);
+			assertNotNull("ModulePackages attribute not found", attr);
+			packagesAttribute = (IModulePackagesAttribute) attr;
+			packageNames = CharOperation.toStrings(packagesAttribute.getPackageNames());
+			assertEquals("main attribute value", "testDont,test0,test1,test2", String.join(",", packageNames));
+
+		} finally {
+			deleteProject("mod.zero");
+		}
+	}
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java
index 6e76734..4390c6f 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java
@@ -492,6 +492,14 @@ public class ClassFile implements TypeConstants, TypeIds {
 			long targetMask = TagBits.AnnotationForModule;
 			attributesNumber += generateRuntimeAnnotations(annotations, targetMask); 
 		}
+		char[] mainClass = cud.moduleDeclaration.binding.mainClassName;
+		if (mainClass != null) {
+			attributesNumber += generateModuleMainClassAttribute(CharOperation.replaceOnCopy(mainClass, '.', '/'));
+		}
+		char[][] packageNames = cud.moduleDeclaration.binding.getPackageNamesForClassFile();
+		if (packageNames != null) {
+			attributesNumber += generateModulePackagesAttribute(packageNames);
+		}
 
 		// update the number of attributes
 		if (attributeOffset + 2 >= this.contents.length) {
@@ -2876,6 +2884,64 @@ public class ClassFile implements TypeConstants, TypeIds {
 		this.contentsOffset = localContentsOffset;
 		return 1;
 	}
+
+	private int generateModuleMainClassAttribute(char[] moduleMainClass) {
+		int localContentsOffset = this.contentsOffset;
+		if (localContentsOffset + 8 >= this.contents.length) {
+			resizeContents(8);
+		}
+		int moduleAttributeNameIndex =
+			this.constantPool.literalIndex(AttributeNamesConstants.ModuleMainClass);
+		this.contents[localContentsOffset++] = (byte) (moduleAttributeNameIndex >> 8);
+		this.contents[localContentsOffset++] = (byte) moduleAttributeNameIndex;
+		int attrLength = 2;
+		this.contents[localContentsOffset++] = (byte)(attrLength >> 24);
+		this.contents[localContentsOffset++] = (byte)(attrLength >> 16);
+		this.contents[localContentsOffset++] = (byte)(attrLength >> 8);
+		this.contents[localContentsOffset++] = (byte)attrLength;
+		int moduleNameIndex = this.constantPool.literalIndexForType(moduleMainClass);
+		this.contents[localContentsOffset++] = (byte) (moduleNameIndex >> 8);
+		this.contents[localContentsOffset++] = (byte) moduleNameIndex;
+		this.contentsOffset = localContentsOffset;
+		return 1;
+	}
+
+	private int generateModulePackagesAttribute(char[][] packageNames) {
+		int localContentsOffset = this.contentsOffset;
+		int maxSize = 6 + 2*packageNames.length;
+		if (localContentsOffset + maxSize >= this.contents.length) {
+			resizeContents(maxSize);
+		}
+		int moduleAttributeNameIndex =
+			this.constantPool.literalIndex(AttributeNamesConstants.ModulePackages);
+		this.contents[localContentsOffset++] = (byte) (moduleAttributeNameIndex >> 8);
+		this.contents[localContentsOffset++] = (byte) moduleAttributeNameIndex;
+
+		int attrLengthOffset = localContentsOffset;
+		localContentsOffset+= 4;
+		int packageCountOffset = localContentsOffset;
+		localContentsOffset+= 2;
+		
+		int packagesCount = 0;
+		for (char[] packageName : packageNames) {
+			if (packageName == null || packageName.length == 0) continue;
+			int packageNameIndex = this.constantPool.literalIndexForPackage(packageName);
+			this.contents[localContentsOffset++] = (byte) (packageNameIndex >> 8);
+			this.contents[localContentsOffset++] = (byte) packageNameIndex;
+			packagesCount++;
+		}
+
+		this.contents[packageCountOffset++] = (byte)(packagesCount >> 8);
+		this.contents[packageCountOffset++] = (byte)packagesCount;
+		int attrLength = 2 + 2 * packagesCount;
+		this.contents[attrLengthOffset++] = (byte)(attrLength >> 24);
+		this.contents[attrLengthOffset++] = (byte)(attrLength >> 16);
+		this.contents[attrLengthOffset++] = (byte)(attrLength >> 8);
+		this.contents[attrLengthOffset++] = (byte)attrLength;
+		this.contentsOffset = localContentsOffset;
+		return 1;
+	}
+
 	private void generateElementValue(
 			Expression defaultValue,
 			TypeBinding memberValuePairReturnType,
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/AttributeNamesConstants.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/AttributeNamesConstants.java
index 993dc8e..203c027 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/AttributeNamesConstants.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/AttributeNamesConstants.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2016 IBM Corporation and others.
+ * Copyright (c) 2000, 2017 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -33,6 +33,8 @@ public interface AttributeNamesConstants {
 	final char[] LocalVariableTypeTableName = "LocalVariableTypeTable".toCharArray(); //$NON-NLS-1$
 	final char[] EnclosingMethodName = "EnclosingMethod".toCharArray(); //$NON-NLS-1$
 	final char[] ModuleName = "Module".toCharArray(); //$NON-NLS-1$
+	final char[] ModuleMainClass = "ModuleMainClass".toCharArray(); //$NON-NLS-1$
+	final char[] ModulePackages = "ModulePackages".toCharArray(); //$NON-NLS-1$
 	final char[] AnnotationDefaultName = "AnnotationDefault".toCharArray(); //$NON-NLS-1$
 	final char[] RuntimeInvisibleAnnotationsName = "RuntimeInvisibleAnnotations".toCharArray(); //$NON-NLS-1$
 	final char[] RuntimeVisibleAnnotationsName = "RuntimeVisibleAnnotations".toCharArray(); //$NON-NLS-1$
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/env/IUpdatableModule.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/env/IUpdatableModule.java
index e4a6ca7..e5d0a79 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/env/IUpdatableModule.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/env/IUpdatableModule.java
@@ -19,6 +19,8 @@ import java.util.Collections;
 import java.util.List;
 import java.util.function.Consumer;
 
+import org.eclipse.jdt.internal.compiler.util.SimpleSetOfCharArray;
+
 /**
  * Interface to a module as needed to implement the updates for {@code --add-reads}
  * and {@code --add-exports} command line options (or corresponding classpath attributes).
@@ -57,4 +59,8 @@ public interface IUpdatableModule {
 	void addReads(char[] moduleName);
 	/** Perform an --add-exports update on the module. */
 	void addExports(char[] packageName, char[][] targetModules);
+	/** Define the ModuleMainClass to be recorded in the generated module-info.class. */
+	void setMainClassName(char[] mainClassName);
+	/** Passes names of packages to be recorded in the ModulePackages classfile attribute. */
+	void setPackageNames(SimpleSetOfCharArray packageNames);
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ModuleBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ModuleBinding.java
index b296817..5181085 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ModuleBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ModuleBinding.java
@@ -105,6 +105,8 @@ public class ModuleBinding extends Binding implements IUpdatableModule {
 	protected TypeBinding[] uses;
 	protected TypeBinding[] services;
 	public Map<TypeBinding,TypeBinding[]> implementations;
+	public char[] mainClassName;
+	private SimpleSetOfCharArray packageNames;
 	public int modifiers;
 	public LookupEnvironment environment;
 	public int tagBits;
@@ -250,6 +252,32 @@ public class ModuleBinding extends Binding implements IUpdatableModule {
 			addResolvedExport(declaredPackage, targetModules);
 	}
 
+	@Override
+	public void setMainClassName(char[] mainClassName) {
+		this.mainClassName = mainClassName;
+	}
+
+	@Override
+	public void setPackageNames(SimpleSetOfCharArray packageNames) {
+		this.packageNames = packageNames;
+	}
+
+	// for code gen:
+	/** @return array of names, which may contain nulls. */
+	public char[][] getPackageNamesForClassFile() {
+		if (this.packageNames == null)
+			return null;
+		for (PackageBinding packageBinding : this.exportedPackages)
+			this.packageNames.add(packageBinding.readableName());
+		for (PackageBinding packageBinding : this.openedPackages)
+			this.packageNames.add(packageBinding.readableName());
+		if (this.implementations != null)
+			for (TypeBinding[] types : this.implementations.values())
+				for (TypeBinding typeBinding : types)
+					this.packageNames.add(((ReferenceBinding)typeBinding).fPackage.readableName());
+		return this.packageNames.values;
+	}
+
 	// ---
 
 	public void addResolvedExport(PackageBinding declaredPackage, char[][] targetModules) {
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IClasspathAttribute.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IClasspathAttribute.java
index 899c0f3..6b2d5a6 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IClasspathAttribute.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IClasspathAttribute.java
@@ -172,6 +172,19 @@ public interface IClasspathAttribute {
 	String PATCH_MODULE = "patch-module"; //$NON-NLS-1$
 
 	/**
+	 * Constant of the name of the module-main-class attribute.
+	 * The classpath entry holding this attribute must refer to a source folder
+	 * containing the implementation of a module.
+	 * 
+	 * <p>The value of this attribute must be the name of a class defined in this module.
+	 * It will be used for generating the <code>ModuleMainClass</code> attribute
+	 * in <code>module-info.class</code>.</p>
+	 * 
+	 * @since 3.13 BETA_JAVA9
+	 */
+	String MODULE_MAIN_CLASS = "module-main-class"; //$NON-NLS-1$
+
+	/**
 	 * Constant for the name of the external annotation path attribute. 
 	 * 
 	 * <p>The value for this attribute has to be the string representation of a path.
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java
index 20d424f..99d83f4 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java
@@ -153,6 +153,7 @@ import org.eclipse.jdt.core.search.IJavaSearchScope;
 import org.eclipse.jdt.core.search.SearchEngine;
 import org.eclipse.jdt.core.search.SearchPattern;
 import org.eclipse.jdt.core.search.TypeNameRequestor;
+import org.eclipse.jdt.core.util.IAttributeNamesConstants;
 import org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants;
 import org.eclipse.jdt.internal.compiler.impl.CompilerOptions;
 import org.eclipse.jdt.internal.compiler.problem.ProblemReporter;
@@ -173,6 +174,7 @@ import org.eclipse.jdt.internal.core.Region;
 import org.eclipse.jdt.internal.core.SetContainerOperation;
 import org.eclipse.jdt.internal.core.SetVariablesOperation;
 import org.eclipse.jdt.internal.core.builder.JavaBuilder;
+import org.eclipse.jdt.internal.core.builder.ModuleInfoBuilder;
 import org.eclipse.jdt.internal.core.builder.State;
 import org.eclipse.jdt.internal.core.nd.indexer.Indexer;
 import org.eclipse.jdt.internal.core.search.indexing.IndexManager;
@@ -5971,6 +5973,40 @@ public final class JavaCore extends Plugin {
 		return ModuleUtil.getReferencedModules(project);
 	}
 
+	/**
+	 * Compile the given module description in the context of its enclosing Java project
+	 * and add class file attributes using the given map of attribute values.
+	 * <p>In this map, the following keys are supported</p>
+	 * <dl>
+	 * <dt>{@link IAttributeNamesConstants#MODULE_MAIN_CLASS}</dt>
+	 * <dd>The associated value will be used for the <code>ModuleMainClass</code> attribute.</dd>
+	 * <dt>{@link IAttributeNamesConstants#MODULE_PACKAGES}</dt>
+	 * <dd>If the associated value is an empty string, then the compiler will generate a
+	 * <code>ModulePackages</code> attribute with a list of packages that is computed from
+	 * <ul>
+	 * <li>all <code>exports</code> directives
+	 * <li>all <code>opens</code> directives
+	 * <li>the implementation classes of all <code>provides</code> directives.
+	 * </ul>
+	 * If the associated value is not empty, it must be a comma-separated list of package names,
+	 * which will be added to the computed list.
+	 * </dl>
+	 * <p>No other keys are supported in this version, but more keys may be added in the future.</p>
+	 *
+	 * @param module handle for the <code>module-info.java</code> file to be compiled.
+	 * @param classFileAttributes map of attribute names and values to be used during class file generation
+	 * @return the compiled byte code
+	 * 
+	 * @throws JavaModelException
+	 * @throws IllegalArgumentException if the map of classFileAttributes contains an unsupported key.
+	 * @since 3.13 BETA_JAVA9
+	 */
+	public static byte[] compileWithAttributes(IModuleDescription module, Map<String,String> classFileAttributes)
+			throws JavaModelException, IllegalArgumentException
+	{
+		return new ModuleInfoBuilder().compileWithAttributes(module, classFileAttributes);
+	}
+
 	/* (non-Javadoc)
 	 * Shutdown the JavaCore plug-in.
 	 * <p>
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ModuleUpdater.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ModuleUpdater.java
index 900a849..e570dc0 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ModuleUpdater.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ModuleUpdater.java
@@ -21,6 +21,9 @@ import java.util.function.Consumer;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.jdt.core.IClasspathAttribute;
 import org.eclipse.jdt.core.IClasspathEntry;
+import org.eclipse.jdt.core.IJavaModelStatusConstants;
+import org.eclipse.jdt.core.IModuleDescription;
+import org.eclipse.jdt.core.JavaModelException;
 import org.eclipse.jdt.core.compiler.CharOperation;
 import org.eclipse.jdt.internal.compiler.env.IModuleAwareNameEnvironment;
 import org.eclipse.jdt.internal.compiler.env.IUpdatableModule;
@@ -35,14 +38,21 @@ import org.eclipse.jdt.internal.core.util.Util;
  */
 public class ModuleUpdater {
 
+	private JavaProject javaProoject;
+
 	private Map<String,UpdatesByKind> moduleUpdates = new HashMap<>();
 
+	public ModuleUpdater(JavaProject javaProject) {
+		this.javaProoject = javaProject;
+	}
+
 	/**
 	 * Detects any ADD_EXPORTS or ADD_READS classpath attributes, parses the value,
 	 * and collects the resulting module updates.
 	 * @param entry a classpath entry of the current project.
+	 * @throws JavaModelException 
 	 */
-	public void computeModuleUpdates(IClasspathEntry entry) {
+	public void computeModuleUpdates(IClasspathEntry entry) throws JavaModelException {
 		for (IClasspathAttribute attribute : entry.getExtraAttributes()) {
 			String attributeName = attribute.getName();
 			String values = attribute.getValue(); // the attributes considered here may have multiple values separated by ':'
@@ -70,11 +80,16 @@ public class ModuleUpdater {
 						Util.log(IStatus.WARNING, "Invalid argument to add-reads: "+value); //$NON-NLS-1$
 					}
 				}
+			} else if (attributeName.equals(IClasspathAttribute.MODULE_MAIN_CLASS)) {
+				IModuleDescription module = this.javaProoject.getModuleDescription();
+				if (module == null)
+					throw new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.ELEMENT_DOES_NOT_EXIST));
+				addModuleUpdate(module.getElementName(), m -> m.setMainClassName(values.toCharArray()), UpdateKind.MODULE);
 			}
 		}
 	}
 
-	private void addModuleUpdate(String moduleName, Consumer<IUpdatableModule> update, UpdateKind kind) {
+	public void addModuleUpdate(String moduleName, Consumer<IUpdatableModule> update, UpdateKind kind) {
 		UpdatesByKind updates = this.moduleUpdates.get(moduleName);
 		if (updates == null) {
 			this.moduleUpdates.put(moduleName, updates = new UpdatesByKind());
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironment.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironment.java
index 063c7b9..611e9fc 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironment.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironment.java
@@ -90,7 +90,7 @@ public class SearchableEnvironment
 			}
 		}
 		if (CompilerOptions.versionToJdkLevel(project.getOption(JavaCore.COMPILER_COMPLIANCE, true)) >= ClassFileConstants.JDK9) {
-			this.moduleUpdater = new ModuleUpdater();
+			this.moduleUpdater = new ModuleUpdater(project);
 			for (IClasspathEntry entry : project.getRawClasspath())
 				this.moduleUpdater.computeModuleUpdates(entry);
 		}
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ModuleInfoBuilder.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ModuleInfoBuilder.java
new file mode 100644
index 0000000..64bdba5
--- /dev/null
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ModuleInfoBuilder.java
@@ -0,0 +1,106 @@
+/*******************************************************************************
+ * Copyright (c) 2017 GK Software AG, and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
+ * Contributors:
+ *     Stephan Herrmann - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.jdt.internal.core.builder;
+
+import java.util.Locale;
+import java.util.Map;
+
+import org.eclipse.core.resources.IFile;
+import org.eclipse.core.resources.IResource;
+import org.eclipse.jdt.core.IJavaElement;
+import org.eclipse.jdt.core.IJavaModelStatusConstants;
+import org.eclipse.jdt.core.IJavaProject;
+import org.eclipse.jdt.core.IModuleDescription;
+import org.eclipse.jdt.core.IPackageFragmentRoot;
+import org.eclipse.jdt.core.JavaModelException;
+import org.eclipse.jdt.core.util.IAttributeNamesConstants;
+import org.eclipse.jdt.internal.compiler.ClassFile;
+import org.eclipse.jdt.internal.compiler.CompilationResult;
+import org.eclipse.jdt.internal.compiler.Compiler;
+import org.eclipse.jdt.internal.compiler.DefaultErrorHandlingPolicies;
+import org.eclipse.jdt.internal.compiler.ICompilerRequestor;
+import org.eclipse.jdt.internal.compiler.env.ICompilationUnit;
+import org.eclipse.jdt.internal.compiler.env.IUpdatableModule.UpdateKind;
+import org.eclipse.jdt.internal.compiler.impl.CompilerOptions;
+import org.eclipse.jdt.internal.compiler.util.SimpleSetOfCharArray;
+import org.eclipse.jdt.internal.core.JavaModelStatus;
+import org.eclipse.jdt.internal.core.ModuleUpdater;
+
+/** Implementation of {@link org.eclipse.jdt.core.JavaCore#compileWithAttributes(IModuleDescription, Map)}. */
+public class ModuleInfoBuilder {
+	
+	static class BytecodeCollector implements ICompilerRequestor {
+		byte[] bytes;
+
+		@Override
+		public void acceptResult(CompilationResult result) {
+			assert this.bytes == null : "duplicate result"; //$NON-NLS-1$
+			ClassFile[] classFiles = result.getClassFiles();
+			assert classFiles.length == 1;
+			this.bytes = classFiles[0].getBytes();
+		}
+	}
+	
+	public byte[] compileWithAttributes(IModuleDescription module, Map<String,String> classFileAttributes) throws JavaModelException {
+		IJavaProject javaProject = module.getJavaProject();
+		NameEnvironment nameEnvironment = new NameEnvironment(javaProject);
+
+		addModuleUpdates(module, nameEnvironment.moduleUpdater, classFileAttributes);
+		
+		ClasspathMultiDirectory sourceLocation = getSourceLocation(javaProject, nameEnvironment, module); 
+		IFile file = (IFile) module.getCompilationUnit().getCorrespondingResource();
+		ICompilationUnit[] sourceUnits = { new SourceFile(file, sourceLocation) };
+		BytecodeCollector collector = new BytecodeCollector();
+		Compiler newCompiler = new Compiler(
+									nameEnvironment,
+									DefaultErrorHandlingPolicies.exitOnFirstError(),
+									new CompilerOptions(javaProject.getOptions(true)),
+									collector,
+									ProblemFactory.getProblemFactory(Locale.getDefault()));
+		newCompiler.compile(sourceUnits);
+		return collector.bytes;
+	}
+
+	private void addModuleUpdates(IModuleDescription module, ModuleUpdater moduleUpdater, Map<String,String> classFileAttributes) {
+		String mainClassName = classFileAttributes.remove(String.valueOf(IAttributeNamesConstants.MODULE_MAIN_CLASS));
+		if (mainClassName != null) {
+			moduleUpdater.addModuleUpdate(module.getElementName(), m -> m.setMainClassName(mainClassName.toCharArray()), UpdateKind.MODULE);
+		}
+		String modulePackageNames = classFileAttributes.remove(String.valueOf(IAttributeNamesConstants.MODULE_PACKAGES));
+		if (modulePackageNames != null) {
+			SimpleSetOfCharArray namesSet = new SimpleSetOfCharArray();
+			String[] providedNames = modulePackageNames.split(","); //$NON-NLS-1$
+			for (int i = 0; i < providedNames.length; i++) {
+				namesSet.add(providedNames[i].trim().toCharArray());
+			}
+			moduleUpdater.addModuleUpdate(module.getElementName(),  m -> m.setPackageNames(namesSet), UpdateKind.MODULE);
+		}
+		if (!classFileAttributes.isEmpty()) {
+			throw new IllegalArgumentException("Unsupported key(s): "+classFileAttributes.keySet().toString()); //$NON-NLS-1$
+		}
+	}
+
+	private ClasspathMultiDirectory getSourceLocation(IJavaProject javaProject, NameEnvironment nameEnvironment, IModuleDescription module)
+			throws JavaModelException {
+		IPackageFragmentRoot root = (IPackageFragmentRoot) module.getAncestor(IJavaElement.PACKAGE_FRAGMENT_ROOT);
+		IResource rootResource = root.getCorrespondingResource(); 
+		for (ClasspathMultiDirectory sourceLocation : nameEnvironment.sourceLocations) {
+			if (sourceLocation.sourceFolder.equals(rootResource)) {
+				return sourceLocation;
+			}
+		}
+		throw new JavaModelException(new JavaModelStatus(IJavaModelStatusConstants.ELEMENT_NOT_ON_CLASSPATH, module));
+	}
+}
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/NameEnvironment.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/NameEnvironment.java
index cdb3b1d..0271be8 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/NameEnvironment.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/NameEnvironment.java
@@ -114,7 +114,7 @@ private void computeClasspathLocations(
 	Map<String, IModulePathEntry> moduleEntries = null;
 	if (CompilerOptions.versionToJdkLevel(javaProject.getOption(JavaCore.COMPILER_COMPLIANCE, true)) >= ClassFileConstants.JDK9) {
 		moduleEntries = new HashMap<>(classpathEntries.length);
-		this.moduleUpdater = new ModuleUpdater();
+		this.moduleUpdater = new ModuleUpdater(javaProject);
 	}
 	IModuleDescription mod = null;
 	
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ModuleMainClassAttribute.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ModuleMainClassAttribute.java
index 5061c63..e34ff57 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ModuleMainClassAttribute.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/ModuleMainClassAttribute.java
@@ -39,9 +39,7 @@ public class ModuleMainClassAttribute extends ClassFileAttribute implements IMod
 		super(classFileBytes, constantPool, offset);
 		int readOffset = 6;
 		this.mainClassIndex = u2At(classFileBytes, readOffset, offset);
-		readOffset += 2;
-		int index = u2At(classFileBytes, readOffset, offset);
-		IConstantPoolEntry constantPoolEntry = constantPool.decodeEntry(index);
+		IConstantPoolEntry constantPoolEntry = constantPool.decodeEntry(this.mainClassIndex);
 		if (constantPoolEntry.getKind() != IConstantPoolConstant.CONSTANT_Class) {
 			throw new ClassFormatException(ClassFormatException.INVALID_CONSTANT_POOL_ENTRY);
 		}

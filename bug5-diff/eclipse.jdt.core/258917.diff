commit 02bf4272774dd4f6faf4897c054614bdc809ab9e
Author: Walter Harley <wharley>
Date:   Mon Jan 12 18:59:57 2009 +0000

    Bug 258917, bug 259248, bug 259249: support additional types in TypesImpl#isSubtype and VariableElementImpl#getEnclosingElement

-	-	org.eclipse.jdt.compiler.apt.tests/lib/apttestprocessors.jar
21	1	org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/ElementProc.java
40	2	org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/typeutils/TypeUtilsProc.java
8	5	org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/AnnotationDiscoveryVisitor.java
8	6	org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ExecutableElementImpl.java
10	5	org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypesImpl.java
7	5	org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/VariableElementImpl.java
27	0	org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/lookup/AptBinaryLocalVariableBinding.java
31	0	org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/lookup/AptSourceLocalVariableBinding.java
diff --git a/org.eclipse.jdt.compiler.apt.tests/lib/apttestprocessors.jar b/org.eclipse.jdt.compiler.apt.tests/lib/apttestprocessors.jar
index 8e481a2..ee191f2 100644
Binary files a/org.eclipse.jdt.compiler.apt.tests/lib/apttestprocessors.jar and b/org.eclipse.jdt.compiler.apt.tests/lib/apttestprocessors.jar differ
diff --git a/org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/ElementProc.java b/org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/ElementProc.java
index dddad55..0d42dca 100644
--- a/org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/ElementProc.java
+++ b/org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/elements/ElementProc.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007, 2008 BEA Systems, Inc. 
+ * Copyright (c) 2007, 2009 BEA Systems, Inc. 
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -393,6 +393,21 @@ public class ElementProc extends BaseProcessor {
 			reportError("Return type of A.methodIAString() does not equal java.lang.String");
 			return false;
 		}
+		List<ExecutableElement> methodsD = ElementFilter.methodsIn(_elementString.getEnclosedElements());
+		for (ExecutableElement method : methodsD) {
+			List<? extends VariableElement> params = method.getParameters();
+			for (VariableElement param : params) {
+				Element enclosingElement = param.getEnclosingElement();
+				if (enclosingElement == null) {
+					reportError("Enclosing element of a parameter in one of the java.lang.String methods is null");
+					return false;
+				}
+				if (!enclosingElement.equals(method)) {
+					reportError("Enclosing element of a parameter in one of the java.lang.String methods is not the method itself");
+					return false;
+				}
+			}
+		}
 		List<? extends VariableElement> paramsMethodIAString = methodIAString.getParameters();
 		VariableElement int1 = null;
 		for (VariableElement param : paramsMethodIAString) {
@@ -530,6 +545,11 @@ public class ElementProc extends BaseProcessor {
 			reportError("First parameter of D.methodDvoid() is not a declared type");
 			return false;
 		}
+		Element enclosingElement = param1.getEnclosingElement();
+		if (enclosingElement == null || enclosingElement.getKind() != ElementKind.METHOD) {
+			reportError("Enclosing element of first parameter of D.methodDvoid() is null or not a method");
+			return false;
+		}
 		if (!"targets.model.pb.D.DEnum".equals(param1Type.toString())) {
 			reportError("Type of first parameter of D.methodDvoid() is not DEnum");
 			return false;
diff --git a/org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/typeutils/TypeUtilsProc.java b/org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/typeutils/TypeUtilsProc.java
index 7019cf7..9485f86 100644
--- a/org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/typeutils/TypeUtilsProc.java
+++ b/org.eclipse.jdt.compiler.apt.tests/processors/org/eclipse/jdt/compiler/apt/tests/processors/typeutils/TypeUtilsProc.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007, 2008 BEA Systems, Inc. and others
+ * Copyright (c) 2007, 2009 BEA Systems, Inc. and others
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -23,6 +23,7 @@ import javax.lang.model.element.TypeElement;
 import javax.lang.model.type.ArrayType;
 import javax.lang.model.type.DeclaredType;
 import javax.lang.model.type.NoType;
+import javax.lang.model.type.PrimitiveType;
 import javax.lang.model.type.TypeKind;
 import javax.lang.model.type.TypeMirror;
 
@@ -160,7 +161,11 @@ public class TypeUtilsProc extends BaseProcessor
 			reportError("isAssignable(float, java.lang.Integer) should be false");
 			return false;
 		}
-		
+		TypeMirror erasureOfInt = _typeUtils.erasure(intType);
+		if (erasureOfInt != intType) {
+			reportError("erasure of a primitive type is the type itself");
+			return false;
+		}
 		return true;
 	}
 	
@@ -198,6 +203,39 @@ public class TypeUtilsProc extends BaseProcessor
 			reportError("Type of AB and superclass of D are not same type");
 			return false;
 		}
+		TypeMirror typeD = elementD.asType();
+		if (!_typeUtils.isSubtype(typeD, typeAB)) {
+			reportError("Type of D is not a subtype of type AB");
+			return false;
+		}
+		ArrayType arrayOfTypeD = _typeUtils.getArrayType(typeD);
+		ArrayType arrayOfTypeAB = _typeUtils.getArrayType(typeAB);
+		if (!_typeUtils.isSubtype(arrayOfTypeD, arrayOfTypeAB)) {
+			reportError("Array of type D is not a subtype of array of type AB");
+			return false;
+		}
+		PrimitiveType typeInt = _typeUtils.getPrimitiveType(TypeKind.INT);
+		ArrayType arrayOfInt = _typeUtils.getArrayType(typeInt);
+		ArrayType arrayOfIntInt = _typeUtils.getArrayType(arrayOfInt);
+		TypeElement objectTypeElement = _elementUtils.getTypeElement("java.lang.Object");
+		TypeMirror javaLangObject = objectTypeElement.asType();
+		if (!_typeUtils.isSubtype(arrayOfIntInt, javaLangObject)) {
+			reportError("int[][] is not a subtype of Object");
+			return false;
+		}
+		TypeElement stringTypeElement = _elementUtils.getTypeElement("java.lang.String");
+		TypeMirror javaLangString = stringTypeElement.asType();
+		ArrayType arrayOfString = _typeUtils.getArrayType(javaLangString);
+		ArrayType arrayOfObject = _typeUtils.getArrayType(javaLangObject);
+		ArrayType arrayOfObjectObject = _typeUtils.getArrayType(arrayOfObject);
+		if (_typeUtils.isSubtype(arrayOfString, arrayOfObjectObject)) {
+			reportError("String[] is a subtype of Object[][]");
+			return false;
+		}
+		if (!_typeUtils.isSubtype(arrayOfString, arrayOfObject)) {
+			reportError("String[] is not a subtype of Object[]");
+			return false;
+		}
 		return true;
 	}
 	
diff --git a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/AnnotationDiscoveryVisitor.java b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/AnnotationDiscoveryVisitor.java
index ed1db7a..dbc4647 100644
--- a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/AnnotationDiscoveryVisitor.java
+++ b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/dispatch/AnnotationDiscoveryVisitor.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2006, 2007 IBM Corporation and others.
+ * Copyright (c) 2006, 2009 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -25,6 +25,7 @@ import org.eclipse.jdt.internal.compiler.ast.FieldDeclaration;
 import org.eclipse.jdt.internal.compiler.ast.MethodDeclaration;
 import org.eclipse.jdt.internal.compiler.ast.TypeDeclaration;
 import org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding;
+import org.eclipse.jdt.internal.compiler.lookup.AptSourceLocalVariableBinding;
 import org.eclipse.jdt.internal.compiler.lookup.Binding;
 import org.eclipse.jdt.internal.compiler.lookup.BlockScope;
 import org.eclipse.jdt.internal.compiler.lookup.ClassScope;
@@ -56,9 +57,11 @@ public class AnnotationDiscoveryVisitor extends ASTVisitor {
 	@Override
 	public boolean visit(Argument argument, BlockScope scope) {
 		Annotation[] annotations = argument.annotations;
+		TypeDeclaration typeDeclaration = scope.referenceType();
+		MethodBinding binding = ((AbstractMethodDeclaration) scope.referenceContext()).binding;
+		typeDeclaration.binding.resolveTypesFor(binding);
+		argument.binding = new AptSourceLocalVariableBinding(argument.binding, binding);
 		if (annotations != null) {
-			TypeDeclaration typeDeclaration = scope.referenceType();
-			typeDeclaration.binding.resolveTypesFor(((AbstractMethodDeclaration) scope.referenceContext()).binding);
 			this.resolveAnnotations(
 					scope,
 					annotations,
@@ -72,7 +75,7 @@ public class AnnotationDiscoveryVisitor extends ASTVisitor {
 		Annotation[] annotations = constructorDeclaration.annotations;
 		if (annotations != null) {
 			MethodBinding constructorBinding = constructorDeclaration.binding;
-			((SourceTypeBinding) constructorBinding.declaringClass).resolveTypesFor(constructorBinding);					
+			((SourceTypeBinding) constructorBinding.declaringClass).resolveTypesFor(constructorBinding);
 			this.resolveAnnotations(
 					constructorDeclaration.scope,
 					annotations,
@@ -104,7 +107,7 @@ public class AnnotationDiscoveryVisitor extends ASTVisitor {
 		Annotation[] annotations = methodDeclaration.annotations;
 		if (annotations != null) {
 			MethodBinding methodBinding = methodDeclaration.binding;
-			((SourceTypeBinding) methodBinding.declaringClass).resolveTypesFor(methodBinding);					
+			((SourceTypeBinding) methodBinding.declaringClass).resolveTypesFor(methodBinding);
 			this.resolveAnnotations(
 					methodDeclaration.scope,
 					annotations,
diff --git a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ExecutableElementImpl.java b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ExecutableElementImpl.java
index 8a250b3..0de2c7d 100644
--- a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ExecutableElementImpl.java
+++ b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/ExecutableElementImpl.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2005, 2007 IBM Corporation and others.
+ * Copyright (c) 2005, 2009 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -34,7 +34,7 @@ import org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;
 import org.eclipse.jdt.internal.compiler.ast.Argument;
 import org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding;
 import org.eclipse.jdt.internal.compiler.lookup.AnnotationHolder;
-import org.eclipse.jdt.internal.compiler.lookup.BinaryLocalVariableBinding;
+import org.eclipse.jdt.internal.compiler.lookup.AptBinaryLocalVariableBinding;
 import org.eclipse.jdt.internal.compiler.lookup.ExtraCompilerModifiers;
 import org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment;
 import org.eclipse.jdt.internal.compiler.lookup.MethodBinding;
@@ -163,11 +163,12 @@ public class ExecutableElementImpl extends ElementImpl implements
 						StringBuilder builder = new StringBuilder("arg");//$NON-NLS-1$
 						builder.append(i - 2);
 						VariableElement param = new VariableElementImpl(_env,
-								new BinaryLocalVariableBinding(
+								new AptBinaryLocalVariableBinding(
 										String.valueOf(builder).toCharArray(),
 										typeBinding,
 										0,
-										null));
+										null,
+										binding));
 						params.add(param);
 					}
 				} else {
@@ -176,11 +177,12 @@ public class ExecutableElementImpl extends ElementImpl implements
 						StringBuilder builder = new StringBuilder("arg");//$NON-NLS-1$
 						builder.append(i);
 						VariableElement param = new VariableElementImpl(_env,
-								new BinaryLocalVariableBinding(
+								new AptBinaryLocalVariableBinding(
 										String.valueOf(builder).toCharArray(),
 										typeBinding,
 										0,
-										parameterAnnotationBindings != null ? parameterAnnotationBindings[i] : null));
+										parameterAnnotationBindings != null ? parameterAnnotationBindings[i] : null,
+										binding));
 						params.add(param);
 						i++;
 					}
diff --git a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypesImpl.java b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypesImpl.java
index 0666805..d213261 100644
--- a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypesImpl.java
+++ b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/TypesImpl.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007, 2008 BEA Systems, Inc. and others
+ * Copyright (c) 2007, 2009 BEA Systems, Inc. and others
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -32,6 +32,7 @@ import javax.lang.model.util.Types;
 import org.eclipse.jdt.core.compiler.CharOperation;
 import org.eclipse.jdt.internal.compiler.apt.dispatch.BaseProcessingEnvImpl;
 import org.eclipse.jdt.internal.compiler.ast.Wildcard;
+import org.eclipse.jdt.internal.compiler.lookup.ArrayBinding;
 import org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding;
 import org.eclipse.jdt.internal.compiler.lookup.Binding;
 import org.eclipse.jdt.internal.compiler.lookup.FieldBinding;
@@ -199,8 +200,13 @@ public class TypesImpl implements Types {
         if (binding instanceof ReferenceBinding) {
             return _env.getFactory().newTypeMirror(((ReferenceBinding) binding).erasure());
         }
-        // TODO should we return null or NoType ?
-        throw new UnsupportedOperationException("NYI: TypesImpl.erasure(...) when not a reference binding"); //$NON-NLS-1$
+        if (binding instanceof ArrayBinding) {
+        	TypeBinding typeBinding = (TypeBinding) binding;
+            return new ArrayTypeImpl(_env, this._env.getLookupEnvironment().createArrayType(
+                    typeBinding.leafComponentType().erasure(),
+                    typeBinding.dimensions()));
+        }
+        return t;
     }
 
     /* (non-Javadoc)
@@ -431,8 +437,7 @@ public class TypesImpl implements Types {
                 return ((TypeBinding)b1).isCompatibleWith((TypeBinding)b2);
             }
         }
-        // TODO: array types and reference types
-        throw new UnsupportedOperationException("NYI: TypesImpl.isSubtype(TypeMirror, TypeMirror) for array and reference types"); //$NON-NLS-1$
+        return ((TypeBinding)b1).isCompatibleWith((TypeBinding)b2);
     }
 
     @Override
diff --git a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/VariableElementImpl.java b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/VariableElementImpl.java
index ab78231..b4be313 100644
--- a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/VariableElementImpl.java
+++ b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/apt/model/VariableElementImpl.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007 BEA Systems, Inc. 
+ * Copyright (c) 2007 2009 BEA Systems, Inc. 
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -28,8 +28,9 @@ import org.eclipse.jdt.core.compiler.CharOperation;
 import org.eclipse.jdt.internal.compiler.apt.dispatch.BaseProcessingEnvImpl;
 import org.eclipse.jdt.internal.compiler.impl.Constant;
 import org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding;
+import org.eclipse.jdt.internal.compiler.lookup.AptBinaryLocalVariableBinding;
+import org.eclipse.jdt.internal.compiler.lookup.AptSourceLocalVariableBinding;
 import org.eclipse.jdt.internal.compiler.lookup.FieldBinding;
-import org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding;
 import org.eclipse.jdt.internal.compiler.lookup.PackageBinding;
 import org.eclipse.jdt.internal.compiler.lookup.TypeBinding;
 import org.eclipse.jdt.internal.compiler.lookup.TypeIds;
@@ -99,9 +100,10 @@ public class VariableElementImpl extends ElementImpl implements VariableElement
 		if (_binding instanceof FieldBinding) {
 			return _env.getFactory().newElement(((FieldBinding)_binding).declaringClass);
 		}
-		else if (_binding instanceof LocalVariableBinding){
-			//TODO: return enclosing method binding
-			throw new UnsupportedOperationException("NYI: VariableElementImpl.getEnclosingElement()"); //$NON-NLS-1$
+		else if (_binding instanceof AptSourceLocalVariableBinding){
+			return _env.getFactory().newElement(((AptSourceLocalVariableBinding) _binding).methodBinding);
+		} else if (_binding instanceof AptBinaryLocalVariableBinding) {
+			return _env.getFactory().newElement(((AptBinaryLocalVariableBinding) _binding).methodBinding);
 		}
 		return null;
 	}
diff --git a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/lookup/AptBinaryLocalVariableBinding.java b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/lookup/AptBinaryLocalVariableBinding.java
new file mode 100644
index 0000000..53315f5
--- /dev/null
+++ b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/lookup/AptBinaryLocalVariableBinding.java
@@ -0,0 +1,27 @@
+/*******************************************************************************
+ * Copyright (c) 2009 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.jdt.internal.compiler.lookup;
+
+public class AptBinaryLocalVariableBinding extends LocalVariableBinding {
+	AnnotationBinding[] annotationBindings;
+	// enclosing element
+	public MethodBinding methodBinding;
+	
+	public AptBinaryLocalVariableBinding(char[] name, TypeBinding type, int modifiers, AnnotationBinding[] annotationBindings, MethodBinding methodBinding) {
+		super(name, type, modifiers, true);
+		this.annotationBindings = annotationBindings == null ? Binding.NO_ANNOTATIONS : annotationBindings;
+		this.methodBinding = methodBinding;
+	}
+
+	public AnnotationBinding[] getAnnotations() {
+		return this.annotationBindings;
+	}
+}
diff --git a/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/lookup/AptSourceLocalVariableBinding.java b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/lookup/AptSourceLocalVariableBinding.java
new file mode 100644
index 0000000..f9039e6
--- /dev/null
+++ b/org.eclipse.jdt.compiler.apt/src/org/eclipse/jdt/internal/compiler/lookup/AptSourceLocalVariableBinding.java
@@ -0,0 +1,31 @@
+/*******************************************************************************
+ * Copyright (c) 2009 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.jdt.internal.compiler.lookup;
+
+public class AptSourceLocalVariableBinding extends LocalVariableBinding {
+
+	// enclosing element
+	public MethodBinding methodBinding;
+	
+	public AptSourceLocalVariableBinding(LocalVariableBinding localVariableBinding, MethodBinding methodBinding) {
+		super(localVariableBinding.name, localVariableBinding.type, localVariableBinding.modifiers, true);
+		this.constant = localVariableBinding.constant;
+		this.declaration = localVariableBinding.declaration;
+		this.declaringScope = localVariableBinding.declaringScope;
+		this.id = localVariableBinding.id;
+		this.resolvedPosition = localVariableBinding.resolvedPosition;
+		this.tagBits = localVariableBinding.tagBits;
+		this.useFlag = localVariableBinding.useFlag;
+		this.initializationCount = localVariableBinding.initializationCount;
+		this.initializationPCs = localVariableBinding.initializationPCs;
+		this.methodBinding = methodBinding;
+	}
+}
commit a67ffb8e13cbbb7425cd60ba8ef67910c34bd930
Author: Olivier Thomann <oliviert>
Date:   Mon Jan 12 19:33:40 2009 +0000

    HEAD - Removed as part of bug 258917

0	24	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryLocalVariableBinding.java
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryLocalVariableBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryLocalVariableBinding.java
deleted file mode 100644
index 1dd717c..0000000
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryLocalVariableBinding.java
+++ /dev/null
@@ -1,24 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.jdt.internal.compiler.lookup;
-
-public class BinaryLocalVariableBinding extends LocalVariableBinding {
-	AnnotationBinding[] annotationBindings;
-
-	public BinaryLocalVariableBinding(char[] name, TypeBinding type, int modifiers, AnnotationBinding[] annotationBindings) {
-		super(name, type, modifiers, true);
-		this.annotationBindings = annotationBindings == null ? Binding.NO_ANNOTATIONS : annotationBindings;
-	}
-
-	public AnnotationBinding[] getAnnotations() {
-		return this.annotationBindings;
-	}
-}

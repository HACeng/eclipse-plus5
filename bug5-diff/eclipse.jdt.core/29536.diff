commit 3925c1ac23de3f29b5056a6b42f80b41a7e25aa9
Author: Jerome lanneluc <jlanneluc>
Date:   Mon Jan 20 11:27:39 2003 +0000

    Fix for bug 29536

3	1	org.eclipse.jdt.core/buildnotes_jdt-core.html
4	1	org.eclipse.jdt.core/model/org/eclipse/jdt/core/ToolFactory.java
10	2	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java
3	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java
7	1	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/impl/JarFileDocument.java
1	0	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java
diff --git a/org.eclipse.jdt.core/buildnotes_jdt-core.html b/org.eclipse.jdt.core/buildnotes_jdt-core.html
index e94cc19..16b1a15 100644
--- a/org.eclipse.jdt.core/buildnotes_jdt-core.html
+++ b/org.eclipse.jdt.core/buildnotes_jdt-core.html
@@ -44,7 +44,9 @@ What's new in this drop</h2>
 </ul>
 
 <h3>Problem Reports Fixed</h3>
-<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=29337">29337</a>
+<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=29536">29536</a>
+Check use of IResource.getLocation 
+<br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=29337">29337</a>
 Poor wording in task message "This method overrides deprecated..."
 <br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=29601">29601</a>
 TypeHierarchy: Avoid to use 'isInterface' / 'isClass' 
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/ToolFactory.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/ToolFactory.java
index d7ab988..ba84e16 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/ToolFactory.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/ToolFactory.java
@@ -17,6 +17,7 @@ import java.util.Map;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipFile;
 
+import org.eclipse.core.runtime.*;
 import org.eclipse.core.runtime.CoreException;
 import org.eclipse.core.runtime.IConfigurationElement;
 import org.eclipse.core.runtime.IExtension;
@@ -177,7 +178,9 @@ public class ToolFactory {
 					}
 					return createDefaultClassFileReader(archiveName, entryName, decodingFlag);
 				} else {
-					return createDefaultClassFileReader(classfile.getResource().getLocation().toOSString(), decodingFlag);
+					IPath location = classfile.getResource().getLocation();
+					if (location == null) return null;
+					return createDefaultClassFileReader(location.toOSString(), decodingFlag);
 				}
 			} catch(CoreException e){
 			}
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java
index cf7b3cd..2530d19 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java
@@ -1055,14 +1055,22 @@ public class JavaModelManager implements ISaveParticipant {
 			if (file == null || file.getType() != IResource.FILE) {
 				fileSystemPath= path.toOSString();
 			} else {
-				fileSystemPath= file.getLocation().toOSString();
+				IPath location = file.getLocation();
+				if (location == null) {
+					throw new CoreException(new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind("file.notFound"), null)); //$NON-NLS-1$
+				}
+				fileSystemPath= location.toOSString();
 			}
 		} else if (!path.isAbsolute()) {
 			file= root.getFile(path);
 			if (file == null || file.getType() != IResource.FILE) {
 				throw new CoreException(new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind("file.notFound"), null)); //$NON-NLS-1$
 			}
-			fileSystemPath= file.getLocation().toOSString();
+			IPath location = file.getLocation();
+			if (location == null) {
+				throw new CoreException(new Status(IStatus.ERROR, JavaCore.PLUGIN_ID, -1, Util.bind("file.notFound"), null)); //$NON-NLS-1$
+			}
+			fileSystemPath= location.toOSString();
 		} else {
 			fileSystemPath= path.toOSString();
 		}
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java
index 0188bc7..b3da626 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java
@@ -571,7 +571,9 @@ protected boolean writeClassFileCheck(IFile file, String fileName, byte[] newByt
 				if (newBytes[i] != oldBytes[i]) break notEqual;
 			return false; // bytes are identical so skip them
 		}
-		ClassFileReader reader = new ClassFileReader(oldBytes, file.getLocation().toString().toCharArray());
+		IPath location = file.getLocation();
+		if (location == null) return false; // unable to determine location of this class file
+		ClassFileReader reader = new ClassFileReader(oldBytes, location.toString().toCharArray());
 		// ignore local types since they're only visible inside a single method
 		if (!(reader.isLocal() || reader.isAnonymous()) && reader.hasStructuralChanges(newBytes)) {
 			if (JavaBuilder.DEBUG)
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/impl/JarFileDocument.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/impl/JarFileDocument.java
index 302c1c4..ae680e7 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/impl/JarFileDocument.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/impl/JarFileDocument.java
@@ -14,6 +14,7 @@ import java.io.File;
 import java.io.IOException;
 
 import org.eclipse.core.resources.IFile;
+import org.eclipse.core.runtime.IPath;
 
 /**
  * An <code>JarFileDocument</code> represents an jar file.
@@ -49,7 +50,12 @@ public class JarFileDocument extends PropertyDocument {
 	}
 
 	public File getFile() {
-		return file.getLocation().toFile();
+		IPath location = file.getLocation();
+		if (location == null) {
+			return null;
+		} else {
+			return location.toFile();
+		}
 	}
 	/**
 	 * @see org.eclipse.jdt.internal.core.index.IDocument#getName()
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java
index ef02163..2f24093 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java
@@ -272,6 +272,7 @@ public class MatchLocator implements ITypeRequestor {
 			try {
 				if (root.isArchive()) {
 					IPath zipPath = root.isExternal() ? root.getPath() : root.getResource().getLocation();
+					if (zipPath == null) return null; // location is null
 					ZipFile zipFile = null;
 					try {
 						if (JavaModelManager.ZIP_ACCESS_VERBOSE) {

commit 3a5401b27a838fcf33757f0b2ef8214fd68d66ea
Author: M N Palat <manpalat@in.ibm.com>
Date:   Tue Jan 7 21:39:31 2014 +0530

    Fix for Bug 424138 [1.8][dom ast] Bad source ranges for qualified
    TYPE_USE annotation in extends clause

111	0	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
5	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayQualifiedTypeReference.java
5	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayTypeReference.java
14	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeReference.java
6	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java
22	79	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
index 2af1c7e..cfcec61 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
@@ -3551,6 +3551,117 @@ public class ASTConverter18Test extends ConverterTestSetup {
 	}
 	
 	/*
+	 * https://bugs.eclipse.org/bugs/show_bug.cgi?id=424138
+	 */
+	public void testBug424138_001() throws JavaModelException {
+		String contents =
+				"package jsr308.myex;\n" +
+				"\n" +
+				"public class X extends @jsr308.myex.X.Anno Object {\n" +
+				"    void foo(@jsr308.myex.X.Anno X this) {}\n" +
+				"    Y<@jsr308.myex.X.Anno Object> l;\n" +
+				"    int o @jsr308.myex.X.Anno[];\n" +
+				"\n" +
+				"	 @jsr308.myex.X.Anno X f;\n" +
+				"    int @jsr308.myex.X.Anno[] ok;\n" +
+				"    @jsr308.myex.X.Anno X g;\n" +
+				"	 void bar(@jsr308.myex.X.Anno X ok) {\n" +
+				"        @jsr308.myex.X.Anno X l;\n" +
+				"    }\n" +
+				"    @java.lang.annotation.Target(java.lang.annotation.ElementType.TYPE_USE)\n" +
+				"    public @interface Anno {}\n" +
+				"}\n" +
+				"class Y<T> {}\n";
+		this.workingCopy = getWorkingCopy("/Converter18/src/jsr308/myex/X.java", true/*resolve*/);
+		ASTNode node = buildAST(contents, this.workingCopy);
+		assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, node.getNodeType());
+		CompilationUnit compilationUnit = (CompilationUnit) node;
+		assertProblemsSize(compilationUnit, 0);
+		node = getASTNode(compilationUnit, 0);
+		assertEquals("Not a type declaration", ASTNode.TYPE_DECLARATION, node.getNodeType());
+		TypeDeclaration typeDeclaration = (TypeDeclaration) node;
+		SimpleType simpleType = (SimpleType) typeDeclaration.getSuperclassType();
+		checkSourceRange(simpleType, "@jsr308.myex.X.Anno Object", contents);
+		Annotation annotation = (Annotation) simpleType.annotations().get(0);
+		checkSourceRange(annotation, "@jsr308.myex.X.Anno", contents);
+		MethodDeclaration[] methods = ((TypeDeclaration) node).getMethods();
+		assertEquals("Incorrect no of methods", 2, methods.length);
+		MethodDeclaration method = methods[0];
+		simpleType = (SimpleType) method.getReceiverType();
+		checkSourceRange(simpleType, "@jsr308.myex.X.Anno X", contents);
+		FieldDeclaration [] fields = typeDeclaration.getFields();
+		FieldDeclaration f = fields[0];
+		checkSourceRange(f, "Y<@jsr308.myex.X.Anno Object> l;", contents);
+		Type type = f.getType();
+		assertTrue(type.isParameterizedType());
+		ParameterizedType parameterizedType = (ParameterizedType) type;
+		checkSourceRange((ASTNode) parameterizedType.typeArguments().get(0), "@jsr308.myex.X.Anno Object", contents);
+		f = fields[1];
+		checkSourceRange(f, "int o @jsr308.myex.X.Anno[];", contents);
+		assertTrue(f.getType().isPrimitiveType());
+		VariableDeclarationFragment fragment = (VariableDeclarationFragment) f.fragments().get(0);
+		checkSourceRange((ASTNode) fragment.extraDimensions().get(0), "@jsr308.myex.X.Anno[]", contents);
+	}
+	/*
+	 * https://bugs.eclipse.org/bugs/show_bug.cgi?id=424138
+	 */
+	public void testBug424138_002() throws JavaModelException {
+		String contents =
+				"package jsr308.myex;\n" +
+				"\n" +
+				"public class X{\n" +
+				"    int o2[];\n" +
+				"    int o1 @jsr308.myex.X.Anno[];\n" +
+				"    int @jsr308.myex.X.Anno[][] o3 @jsr308.myex.X.Anno[][];\n" +
+				"    @java.lang.annotation.Target(java.lang.annotation.ElementType.TYPE_USE)\n" +
+				"    public @interface Anno {}\n" +
+				"}\n";
+		this.workingCopy = getWorkingCopy("/Converter18/src/jsr308/myex/X.java", true/*resolve*/);
+		ASTNode node = buildAST(contents, this.workingCopy);
+		assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, node.getNodeType());
+		CompilationUnit compilationUnit = (CompilationUnit) node;
+		assertProblemsSize(compilationUnit, 0);
+		node = getASTNode(compilationUnit, 0);
+		assertEquals("Not a type declaration", ASTNode.TYPE_DECLARATION, node.getNodeType());
+		TypeDeclaration typeDeclaration = (TypeDeclaration) node;
+		FieldDeclaration [] fields = typeDeclaration.getFields();
+		FieldDeclaration f = fields[0];
+		checkSourceRange(f, "int o2[];", contents);
+		f = fields[1];
+		checkSourceRange(f, "int o1 @jsr308.myex.X.Anno[];", contents);
+	}
+	/*
+	 * https://bugs.eclipse.org/bugs/show_bug.cgi?id=424138
+	 */
+	public void testBug424138_003() throws JavaModelException {
+		String contents =
+				"package jsr308.myex;\n" +
+				"\n" +
+				"public class X{\n" +
+				"	public void foo() {\n" +
+				"		for (int i @jsr308.myex.X.Anno[]: new int[10][12]) {\n" +
+				"			System.out.println(\"hello\");\n" +
+				"		}\n" +
+				"	}\n" +
+				"   @java.lang.annotation.Target(java.lang.annotation.ElementType.TYPE_USE)\n" +
+				"   public @interface Anno {}\n" +
+				"}\n";
+		this.workingCopy = getWorkingCopy("/Converter18/src/jsr308/myex/X.java", true/*resolve*/);
+		ASTNode node = buildAST(contents, this.workingCopy);
+		assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, node.getNodeType());
+		CompilationUnit compilationUnit = (CompilationUnit) node;
+		assertProblemsSize(compilationUnit, 0);
+		node = getASTNode(compilationUnit, 0);
+		assertEquals("Not a type declaration", ASTNode.TYPE_DECLARATION, node.getNodeType());
+		TypeDeclaration typeDeclaration = (TypeDeclaration) node;
+		MethodDeclaration [] methods = typeDeclaration.getMethods();
+		EnhancedForStatement statement = (EnhancedForStatement) methods[0].getBody().statements().get(0);
+		SingleVariableDeclaration variable = statement.getParameter();
+		checkSourceRange(variable, "int i @jsr308.myex.X.Anno[]", contents);
+		Dimension dim = (Dimension) variable.extraDimensions().get(0);
+		checkSourceRange(dim, "@jsr308.myex.X.Anno[]", contents);
+	}
+	/*
 	 * https://bugs.eclipse.org/bugs/show_bug.cgi?id=423584, [1.8][dom ast] NPE in LambdaExpression#getMethodBinding() for lambda with unresolved type
 	 */
 	public void test423584() throws JavaModelException {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayQualifiedTypeReference.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayQualifiedTypeReference.java
index bf85fe9..5c6f4e7 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayQualifiedTypeReference.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayQualifiedTypeReference.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2012 IBM Corporation and others.
+ * Copyright (c) 2000, 2014 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -43,6 +43,10 @@ public class ArrayQualifiedTypeReference extends QualifiedTypeReference {
 		return this.dimensions;
 	}
 	
+	public int extraDimensions() {
+		return this.extendedDimensions;
+	}
+
 	/**
 	 @see org.eclipse.jdt.internal.compiler.ast.TypeReference#getAnnotationsOnDimensions(boolean)
 	*/
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayTypeReference.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayTypeReference.java
index 011600f..eb5df84 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayTypeReference.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ArrayTypeReference.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2012 IBM Corporation and others.
+ * Copyright (c) 2000, 2014 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -54,6 +54,10 @@ public class ArrayTypeReference extends SingleTypeReference {
 		return this.dimensions;
 	}
 	
+	public int extraDimensions() {
+		return this.extendedDimensions;
+	}
+
 	/**
 	 @see org.eclipse.jdt.internal.compiler.ast.TypeReference#getAnnotationsOnDimensions(boolean)
 	*/
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeReference.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeReference.java
index ac83267..1ff8e6a 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeReference.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TypeReference.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2013 IBM Corporation and others.
+ * Copyright (c) 2000, 2014 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -344,6 +344,19 @@ public int dimensions() {
 	return 0;
 }
 
+
+/**
+ * This method is used to return the array dimension declared after the
+ * name of a local or a field declaration.
+ * For example:
+ *    int i, j[] = null, k[][] = {{}};
+ *    It should return 0 for i, 1 for j and 2 for k.
+ * @return int the extra dimension found
+ */
+public int extraDimensions() {
+	return 0;
+}
+
 public AnnotationContext[] getAllAnnotationContexts(int targetType) {
 	List allAnnotationContexts = new ArrayList();
 	AnnotationCollector collector = new AnnotationCollector(this, targetType, allAnnotationContexts);
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java
index ad28f10..135e9d7 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2013 IBM Corporation and others.
+ * Copyright (c) 2000, 2014 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -3377,6 +3377,7 @@ protected void consumeEnhancedForStatementHeaderInit(boolean hasModifiers) {
 	localDeclaration.bits |= ASTNode.IsForeachElementVariable;
 
 	int extraDims = this.intStack[this.intPtr--];
+	Annotation [][] annotationsOnExtendedDimensions = extraDims == 0 ? null : getAnnotationsOnDimensions(extraDims);
 	this.identifierPtr--;
 	this.identifierLengthPtr--;
 	// remove fake modifiers/modifiers start
@@ -3389,7 +3390,7 @@ protected void consumeEnhancedForStatementHeaderInit(boolean hasModifiers) {
 		this.intPtr-=2;
 	}
 
-	type = getTypeReference(this.intStack[this.intPtr--] + extraDims); // type dimension
+	type = getTypeReference(this.intStack[this.intPtr--]); // type dimension
 
 	// consume annotations
 	int length;
@@ -3402,6 +3403,9 @@ protected void consumeEnhancedForStatementHeaderInit(boolean hasModifiers) {
 			length);
 		localDeclaration.bits |= ASTNode.HasTypeAnnotations;
 	}
+	if (extraDims != 0) {
+		type = augmentTypeWithAdditionalDimensions(type, extraDims, annotationsOnExtendedDimensions, false);
+	}
 	if (hasModifiers) {
 		localDeclaration.declarationSourceStart = declarationSourceStart;
 		localDeclaration.modifiers = modifiersValue;
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java
index 127f354..cff71a2 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java
@@ -581,9 +581,9 @@ class ASTConverter {
 				Type returnType = convertType(typeReference);
 				// get the positions of the right parenthesis
 				int rightParenthesisPosition = retrieveEndOfRightParenthesisPosition(end, method.bodyEnd);
-				int extraDimensions = retrieveExtraDimension(rightParenthesisPosition, method.bodyEnd);
+				int extraDimensions = typeReference.extraDimensions();
 				if (this.ast.apiLevel >= AST.JLS8) {
-					setExtraAnnotatedDimensions(rightParenthesisPosition, this.scanner.currentPosition, typeReference,
+					setExtraAnnotatedDimensions(rightParenthesisPosition, method.bodyEnd, typeReference,
 												methodDecl.extraDimensions(), extraDimensions);
 				} else {
 					internalSetExtraDimensions(methodDecl, extraDimensions);
@@ -903,9 +903,10 @@ class ASTConverter {
 		name.setSourceRange(start, nameEnd - start + 1);
 		variableDecl.setName(name);
 		final int typeSourceEnd = argument.type.sourceEnd;
-		final int extraDimensions = retrieveExtraDimension(nameEnd + 1, typeSourceEnd);
+		TypeReference typeReference = argument.type;
+		final int extraDimensions = typeReference.extraDimensions();
 		if (this.ast.apiLevel >= AST.JLS8) {
-			setExtraAnnotatedDimensions(nameEnd + 1, this.scanner.currentPosition, argument.type,
+			setExtraAnnotatedDimensions(nameEnd + 1, typeSourceEnd, typeReference,
 										variableDecl.extraDimensions(), extraDimensions);
 		} else {
 			internalSetExtraDimensions(variableDecl, extraDimensions);
@@ -3155,7 +3156,7 @@ class ASTConverter {
 				subarrayType.setSourceRange(sourceStart, end - sourceStart + 1);
 				index--;
 			}
-			if (length <= 0) arrayType.setSourceRange(sourceStart, arrayEnd - sourceStart + 1);
+			if (length < arrayEnd - sourceStart) arrayType.setSourceRange(sourceStart, arrayEnd - sourceStart + 1);
 			return arrayType;
 		}
 
@@ -3253,9 +3254,10 @@ class ASTConverter {
 		int nameEnd = localDeclaration.sourceEnd;
 		name.setSourceRange(start, nameEnd - start + 1);
 		variableDecl.setName(name);
-		final int extraDimensions = retrieveExtraDimension(nameEnd + 1, localDeclaration.type.sourceEnd);
+		TypeReference typeReference = localDeclaration.type;
+		final int extraDimensions = typeReference.extraDimensions();
 		if (this.ast.apiLevel >= AST.JLS8) {
-			setExtraAnnotatedDimensions(nameEnd + 1, this.scanner.currentPosition, localDeclaration.type,
+			setExtraAnnotatedDimensions(nameEnd + 1, localDeclaration.declarationSourceEnd, typeReference,
 					variableDecl.extraDimensions(), extraDimensions);
 		} else {
 			internalSetExtraDimensions(variableDecl, extraDimensions);
@@ -3300,10 +3302,11 @@ class ASTConverter {
 		variableDeclarationFragment.setName(name);
 		int start = fieldDeclaration.sourceEnd;
 		int end = start;
-		int extraDimensions = retrieveExtraDimension(fieldDeclaration.sourceEnd + 1, fieldDeclaration.declarationSourceEnd );
+		TypeReference typeReference = fieldDeclaration.type;
+		int extraDimensions = typeReference.extraDimensions();
 		if (this.ast.apiLevel >= AST.JLS8) {
-			setExtraAnnotatedDimensions(fieldDeclaration.sourceEnd + 1, this.scanner.currentPosition,
-					fieldDeclaration.type, variableDeclarationFragment.extraDimensions(), extraDimensions);
+			setExtraAnnotatedDimensions(fieldDeclaration.sourceEnd + 1, fieldDeclaration.declarationSourceEnd,
+					typeReference, variableDeclarationFragment.extraDimensions(), extraDimensions);
 		} else {
 			internalSetExtraDimensions(variableDeclarationFragment, extraDimensions);
 		}
@@ -3343,10 +3346,11 @@ class ASTConverter {
 		variableDeclarationFragment.setName(name);
 		int start = localDeclaration.sourceEnd;
 		org.eclipse.jdt.internal.compiler.ast.Expression initialization = localDeclaration.initialization;
-		int extraDimension = retrieveExtraDimension(localDeclaration.sourceEnd + 1, this.compilationUnitSourceLength);
+		TypeReference typeReference = localDeclaration.type;
+		int extraDimension = typeReference.extraDimensions();
 		if (this.ast.apiLevel >= AST.JLS8) {
-			setExtraAnnotatedDimensions(localDeclaration.sourceEnd + 1, this.scanner.currentPosition,
-					localDeclaration.type, variableDeclarationFragment.extraDimensions(), extraDimension);
+			setExtraAnnotatedDimensions(localDeclaration.sourceEnd + 1, this.compilationUnitSourceLength,
+					typeReference, variableDeclarationFragment.extraDimensions(), extraDimension);
 		} else {
 			internalSetExtraDimensions(variableDeclarationFragment, extraDimension);
 		}
@@ -3514,12 +3518,14 @@ class ASTConverter {
 		int length = 0;
 		int dimensions = typeReference.dimensions();
 		if (typeReference instanceof org.eclipse.jdt.internal.compiler.ast.SingleTypeReference) {
+			annotations = typeReference.annotations != null ? typeReference.annotations[0] : null;
+			int annotationsEnd = annotations != null ? annotations[annotations.length - 1].declarationSourceEnd + 1 : -1;
 			// this is either an ArrayTypeReference or a SingleTypeReference
 			char[] name = ((org.eclipse.jdt.internal.compiler.ast.SingleTypeReference) typeReference).getTypeName()[0];
 			length = typeReference.sourceEnd - typeReference.sourceStart + 1;
 			// need to find out if this is an array type of primitive types or not
 			if (isPrimitiveType(name)) {
-				int[] positions = retrieveEndOfElementTypeNamePosition(sourceStart, sourceStart + length);
+				int[] positions = retrieveEndOfElementTypeNamePosition(sourceStart < annotationsEnd ? annotationsEnd : sourceStart, sourceStart + length);
 				int end = positions[1];
 				if (end == -1) {
 					end = sourceStart + length - 1;
@@ -3535,7 +3541,7 @@ class ASTConverter {
 				ParameterizedSingleTypeReference parameterizedSingleTypeReference = (ParameterizedSingleTypeReference) typeReference;
 				final SimpleName simpleName = new SimpleName(this.ast);
 				simpleName.internalSetIdentifier(new String(name));
-				int[] positions = retrieveEndOfElementTypeNamePosition(sourceStart, sourceStart + length);
+				int[] positions = retrieveEndOfElementTypeNamePosition(sourceStart < annotationsEnd ? annotationsEnd : sourceStart, sourceStart + length);
 				int end = positions[1];
 				if (end == -1) {
 					end = sourceStart + length - 1;
@@ -3593,7 +3599,7 @@ class ASTConverter {
 				simpleName.internalSetIdentifier(new String(name));
 				// we need to search for the starting position of the first brace in order to set the proper length
 				// PR http://dev.eclipse.org/bugs/show_bug.cgi?id=10759
-				int[] positions = retrieveEndOfElementTypeNamePosition(sourceStart, sourceStart + length);
+				int[] positions = retrieveEndOfElementTypeNamePosition(sourceStart < annotationsEnd ? annotationsEnd : sourceStart, sourceStart + length);
 				int end = positions[1];
 				if (end == -1) {
 					end = sourceStart + length - 1;
@@ -4643,7 +4649,6 @@ class ASTConverter {
 	 */
 	protected int[] retrieveEndOfElementTypeNamePosition(int start, int end) {
 		this.scanner.resetTo(start, end);
-		boolean isAnnotation = false;
 		try {
 			int token;
 			int count = 0;
@@ -4655,15 +4660,7 @@ class ASTConverter {
 					case TerminalTokens.TokenNameRPAREN:
 						--count;
 						break;
-					case TerminalTokens.TokenNameAT:
-						isAnnotation = true;
-						break;
 					case TerminalTokens.TokenNameIdentifier:
-						if (isAnnotation) {
-							isAnnotation = false;
-							break;
-						}
-						//$FALL-THROUGH$
 					case TerminalTokens.TokenNamebyte:
 					case TerminalTokens.TokenNamechar:
 					case TerminalTokens.TokenNamedouble:
@@ -4710,60 +4707,6 @@ class ASTConverter {
 		return -1;
 	}
 
-	/**
-	 * This method is used to retrieve the array dimension declared after the
-	 * name of a local or a field declaration.
-	 * For example:
-	 *    int i, j[] = null, k[][] = {{}};
-	 *    It should return 0 for i, 1 for j and 2 for k.
-	 * @return int the dimension found
-	 */
-	protected int retrieveExtraDimension(int start, int end) {
-		this.scanner.resetTo(start, end);
-		int dimensions = 0;
-		try {
-			int token, lParenCount = 0;
-			boolean isAnnotation = false, foundAnnotation = false;
-			while ((token = this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {
-				if (foundAnnotation) {
-					if (token == TerminalTokens.TokenNameLPAREN) ++lParenCount;
-					else if (token == TerminalTokens.TokenNameRPAREN) {
-						--lParenCount;
-						continue;
-					}
-					if (lParenCount > 0) continue;
-				}
-				switch(token) {
-					case TerminalTokens.TokenNameLBRACKET:
-					case TerminalTokens.TokenNameCOMMENT_BLOCK:
-					case TerminalTokens.TokenNameCOMMENT_JAVADOC:
-					case TerminalTokens.TokenNameCOMMENT_LINE:
-						isAnnotation = false;
-						break;
-					case TerminalTokens.TokenNameAT:
-						isAnnotation = true;
-						foundAnnotation = true; /* check for params */
-						break;
-					case TerminalTokens.TokenNameIdentifier:
-						if (!isAnnotation) {
-							return dimensions;
-						}
-						isAnnotation = false;
-						break;
-					case TerminalTokens.TokenNameRBRACKET://166
-						isAnnotation = false;
-						dimensions++;
-						break;
-					default:
-						return dimensions;
-				}
-			}
-		} catch(InvalidInputException e) {
-			// ignore
-		}
-		return dimensions;
-	}
-
 	protected void retrieveDimensionAndSetPositions(int start, int end, Dimension dim) {
 		this.scanner.resetTo(start, end);
 		int token;

commit 382f13be1a95be764b13ca01158d15888308733b
Author: Stephan Herrmann <stephan.herrmann@berlin.de>
Date:   Sat Aug 1 14:27:28 2015 +0200

    Bug 474081: ArrayIndexOutOfBoundsException in
    MethodInfoWithParameterAnnotations.getParameterAnnotations (25)
    
    Change-Id: If3e47f17bd610794382834ab9a61dabc466d9614
    Signed-off-by: Stephan Herrmann <stephan.herrmann@berlin.de>

1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileReader.java
2	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/MethodInfo.java
21	3	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/MethodInfoWithParameterAnnotations.java
4	3	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/env/IBinaryMethod.java
3	3	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java
1	1	org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSkeleton.java
2	2	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java
2	2	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFileInfo.java
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileReader.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileReader.java
index 0e7bb06..e319e1d 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileReader.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileReader.java
@@ -1197,7 +1197,7 @@ private boolean hasStructuralMethodChanges(MethodInfo currentMethodInfo, MethodI
 	if (currentAnnotatedParamsCount != otherAnnotatedParamsCount)
 		return true;
 	for (int i=0; i<currentAnnotatedParamsCount; i++) {
-		if (hasStructuralAnnotationChanges(currentMethodInfo.getParameterAnnotations(i), otherMethodInfo.getParameterAnnotations(i)))
+		if (hasStructuralAnnotationChanges(currentMethodInfo.getParameterAnnotations(i, this.classFileName), otherMethodInfo.getParameterAnnotations(i, this.classFileName)))
 			return true;
 	}
 
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/MethodInfo.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/MethodInfo.java
index c2a2050..bfdfa50 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/MethodInfo.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/MethodInfo.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2013 IBM Corporation and others.
+ * Copyright (c) 2000, 2015 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -310,7 +310,7 @@ public int getModifiers() {
 	}
 	return this.accessFlags;
 }
-public IBinaryAnnotation[] getParameterAnnotations(int index) {
+public IBinaryAnnotation[] getParameterAnnotations(int index, char[] classFileName) {
 	return null;
 }
 public int getAnnotatedParametersCount() {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/MethodInfoWithParameterAnnotations.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/MethodInfoWithParameterAnnotations.java
index d472880..d29206f 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/MethodInfoWithParameterAnnotations.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/MethodInfoWithParameterAnnotations.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2005, 2013 BEA Systems, Inc.
+ * Copyright (c) 2005, 2015 BEA Systems, Inc.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -21,8 +21,26 @@ MethodInfoWithParameterAnnotations(MethodInfo methodInfo, AnnotationInfo[] annot
 	super(methodInfo, annotations);
 	this.parameterAnnotations = parameterAnnotations;
 }
-public IBinaryAnnotation[] getParameterAnnotations(int index) {
-	return this.parameterAnnotations == null ? null : this.parameterAnnotations[index];
+public IBinaryAnnotation[] getParameterAnnotations(int index, char[] classFileName) {
+	try {
+		return this.parameterAnnotations == null ? null : this.parameterAnnotations[index];
+	} catch (ArrayIndexOutOfBoundsException aioobe) {
+		// detailed reporting to track down https://bugs.eclipse.org/474081
+		StringBuffer message = new StringBuffer("Mismatching number of parameter annotations, "); //$NON-NLS-1$
+		message.append(index);
+		message.append('>');
+		message.append(this.parameterAnnotations.length-1);
+		message.append(" in "); //$NON-NLS-1$
+		message.append(getSelector());
+		char[] desc = getGenericSignature();
+		if (desc != null)
+			message.append(desc);
+		else
+			message.append(getMethodDescriptor());
+		if (classFileName != null)
+			message.append(" in ").append(classFileName); //$NON-NLS-1$
+		throw new IllegalStateException(message.toString(), aioobe);
+	}
 }
 public int getAnnotatedParametersCount() {
 	return this.parameterAnnotations == null ? 0 : this.parameterAnnotations.length;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/env/IBinaryMethod.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/env/IBinaryMethod.java
index 81ea620..e051087 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/env/IBinaryMethod.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/env/IBinaryMethod.java
@@ -65,13 +65,14 @@ char[] getMethodDescriptor();
 /**
  * Answer the annotations on the <code>index</code>th parameter or null if none
  * @param index the index of the parameter of interest
+ * @param classFileName (file) name of the declaring class for error reporting
  */
-IBinaryAnnotation[] getParameterAnnotations(int index);
+IBinaryAnnotation[] getParameterAnnotations(int index, char[] classFileName);
 
 /**
  * Answer the number of parameter annotations that can be retrieved
- * using {@link #getParameterAnnotations(int)}.
- * @return one beyond the highest legal argument to {@link #getParameterAnnotations(int)}.
+ * using {@link #getParameterAnnotations(int, char[])}.
+ * @return one beyond the highest legal argument to {@link #getParameterAnnotations(int, char[])}.
  */
 int getAnnotatedParametersCount();
 
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java
index a0918c7..5330998 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java
@@ -691,7 +691,7 @@ private MethodBinding createMethod(IBinaryMethod method, IBinaryType binaryType,
 					// 'paramAnnotations' line up with 'parameters'
 					// int parameter to method.getParameterAnnotations() include the synthetic arg
 					if (paramAnnotations != null)
-						paramAnnotations[i - startIndex] = createAnnotations(method.getParameterAnnotations(i - startIndex), this.environment, missingTypeNames);
+						paramAnnotations[i - startIndex] = createAnnotations(method.getParameterAnnotations(i - startIndex, this.fileName), this.environment, missingTypeNames);
 				}
 				index = end + 1;
 			}
@@ -753,7 +753,7 @@ private MethodBinding createMethod(IBinaryMethod method, IBinaryType binaryType,
 				if (this.environment.globalOptions.storeAnnotations) {
 					paramAnnotations = new AnnotationBinding[numParam][];
 					for (int i = 0; i < numParam; i++)
-						paramAnnotations[i] = createAnnotations(method.getParameterAnnotations(i), this.environment, missingTypeNames);
+						paramAnnotations[i] = createAnnotations(method.getParameterAnnotations(i,  this.fileName), this.environment, missingTypeNames);
 				}
 			}
 		}
@@ -1632,7 +1632,7 @@ private void scanMethodForNullAnnotation(IBinaryMethod method, MethodBinding met
 				ITypeAnnotationWalker parameterWalker = externalAnnotationWalker.toMethodParameter((short) (j+startIndex));
 				IBinaryAnnotation[] paramAnnotations = parameterWalker != ITypeAnnotationWalker.EMPTY_ANNOTATION_WALKER
 															? parameterWalker.getAnnotationsAtCursor(parameters[j].id)
-															: method.getParameterAnnotations(j+startIndex);
+															: method.getParameterAnnotations(j+startIndex, this.fileName);
 				if (paramAnnotations != null) {
 					for (int i = 0; i < paramAnnotations.length; i++) {
 						char[] annotationTypeName = paramAnnotations[i].getTypeName();
diff --git a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSkeleton.java b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSkeleton.java
index 2967162..385da47 100644
--- a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSkeleton.java
+++ b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetSkeleton.java
@@ -69,7 +69,7 @@ public class CodeSnippetSkeleton implements IBinaryType, EvaluationConstants {
 		public int getModifiers() {
 			return ClassFileConstants.AccPublic;
 		}
-		public IBinaryAnnotation[] getParameterAnnotations(int index) {
+		public IBinaryAnnotation[] getParameterAnnotations(int index, char[] classFileName) {
 			return null;
 		}
 		public int getAnnotatedParametersCount() {
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java
index 469b497..6719167 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryMethod.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2014 IBM Corporation and others.
+ * Copyright (c) 2000, 2015 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -129,7 +129,7 @@ public ILocalVariable[] getParameters() throws JavaModelException {
 					-1,
 					true);
 			localVariables[i] = localVariable;
-			IAnnotation[] annotations = getAnnotations(localVariable, info.getParameterAnnotations(i - startIndex));
+			IAnnotation[] annotations = getAnnotations(localVariable, info.getParameterAnnotations(i - startIndex, getDeclaringType().getElementName().toCharArray()));
 			localVariable.annotations = annotations;
 		}
 	}
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFileInfo.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFileInfo.java
index d4c1af6..f4a331b 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFileInfo.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClassFileInfo.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2014 IBM Corporation and others.
+ * Copyright (c) 2000, 2015 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -343,7 +343,7 @@ private void generateMethodInfos(IType type, IBinaryType typeInfo, HashMap newEl
 			// ignore
 		}
 		for (int j = startIndex; j < max; j++) {
-			IBinaryAnnotation[] parameterAnnotations = methodInfo.getParameterAnnotations(j - startIndex);
+			IBinaryAnnotation[] parameterAnnotations = methodInfo.getParameterAnnotations(j - startIndex, typeInfo.getFileName());
 			if (parameterAnnotations != null) {
 				LocalVariable localVariable = new LocalVariable(
 						method,

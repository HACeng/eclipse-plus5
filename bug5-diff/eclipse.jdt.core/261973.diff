commit 7c65ba31905e387e2902b13fe71f33b55f069273
Author: David Audel <daudel>
Date:   Thu Jan 22 09:46:59 2009 +0000

    HEAD - bug 261973

5	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java
7	0	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java
1	1	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java
130	1	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests2.java
1	1	org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/messages.properties
14	1	org.eclipse.jdt.core/buildnotes_jdt-core.html
14	40	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
7	4	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/InternalCompletionProposal.java
4	0	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java
16	47	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java
0	38	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorDeclarationPattern.java
6	4	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorPattern.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java
index f43c6c0..e0c6a67 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java
@@ -360,6 +360,11 @@ public static void createJar(String[] javaPathsAndContents, String[] extraPathsA
 public static void createJar(String[] javaPathsAndContents, String[] extraPathsAndContents, String jarPath, String[] classpath, String compliance) throws IOException {
 	createJar(javaPathsAndContents, extraPathsAndContents, getCompileOptions(compliance), classpath, jarPath);
 }
+public static void createJar(String[] javaPathsAndContents, String[] extraPathsAndContents, String jarPath, String[] classpath, String compliance, Map options) throws IOException {
+	Map compileOptions = getCompileOptions(compliance);
+	compileOptions.putAll(options);
+	createJar(javaPathsAndContents, extraPathsAndContents, compileOptions, classpath, jarPath);
+}
 public static void createSourceZip(String[] pathsAndContents, String zipPath) throws IOException {
     String sourcesPath = getOutputDirectory() + File.separator + "sources";
     createSourceDir(pathsAndContents, sourcesPath);
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java
index cbaabeb..dfd8d29 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/AbstractJavaModelTests.java
@@ -1129,6 +1129,10 @@ public abstract class AbstractJavaModelTests extends SuiteOfTestCases {
 		org.eclipse.jdt.core.tests.util.Util.createJar(javaPathsAndContents, jarPath, "1.4");
 	}
 	
+	protected void createJar(String[] javaPathsAndContents, String jarPath, Map options) throws IOException {
+		org.eclipse.jdt.core.tests.util.Util.createJar(javaPathsAndContents, null, jarPath, null, "1.4", options);
+	}
+	
 	protected void createJar(String[] javaPathsAndContents, String jarPath, String[] classpath, String compliance) throws IOException {
 		org.eclipse.jdt.core.tests.util.Util.createJar(javaPathsAndContents, null,jarPath, classpath, compliance);
 	}
@@ -1610,6 +1614,9 @@ public abstract class AbstractJavaModelTests extends SuiteOfTestCases {
 		getWorkspace().run(create, null);
 		return project;
 	}
+	public void createSourceZip(String[] pathsAndContents, String zipPath) throws IOException {
+		org.eclipse.jdt.core.tests.util.Util.createSourceZip(pathsAndContents, zipPath);
+	}
 	public void deleteResource(File resource) {
 		int retryCount = 0;
 		while (++retryCount <= 60) { // wait 1 minute at most
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java
index 7e70c8a..e13f47d 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java
@@ -107,7 +107,7 @@ public void testAbortCompletion2() throws JavaModelException {
 		IProgressMonitor monitor = new NullProgressMonitor();
 		monitor.setCanceled(true); /*force completion to abort*/
 		this.workingCopies[0].codeComplete(cursorLocation, requestor, this.wcOwner, monitor);
-		assertTrue("Should not be cancelled", false);
+		assertTrue("Should be cancelled", false);
 	} catch (OperationCanceledException e) {
 		assertResults(
 				"",
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests2.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests2.java
index b3b6abd..b290ce2 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests2.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests2.java
@@ -36,6 +36,7 @@ import org.eclipse.jdt.core.IJavaProject;
 import org.eclipse.jdt.core.JavaCore;
 import org.eclipse.jdt.core.tests.util.Util;
 import org.eclipse.jdt.internal.codeassist.RelevanceConstants;
+import org.eclipse.jdt.internal.compiler.impl.CompilerOptions;
 import org.eclipse.jdt.internal.core.JavaModelManager;
 
 import junit.framework.*;
@@ -2614,7 +2615,7 @@ public void testBug6930_33() throws Exception {
 	    assertResults(
 			"AllConstructors33[CONSTRUCTOR_INVOCATION]{(), Lp6930.AllConstructors33;, (Lp6930_1.ParamType;Lp6930_2.ParamType;)V, AllConstructors33, (p21, p22), "+(R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+"}\n" +
 			"   AllConstructors33[TYPE_REF]{p6930.AllConstructors33, p6930, Lp6930.AllConstructors33;, null, null, "+(R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+"}\n" +
-			"AllConstructors33[CONSTRUCTOR_INVOCATION]{(), Lp6930.AllConstructors33;, (Lp6930_1.ParamType;Lp6930_2.ParamType;)V, AllConstructors33, (p11, p12), "+(R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+"}\n" +
+			"AllConstructors33[CONSTRUCTOR_INVOCATION]{(), Lp6930.AllConstructors33;, (Lp6930_2.ParamType;Lp6930_2.ParamType;)V, AllConstructors33, (p11, p12), "+(R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+"}\n" +
 			"   AllConstructors33[TYPE_REF]{p6930.AllConstructors33, p6930, Lp6930.AllConstructors33;, null, null, "+(R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+"}",
 			requestor.getResults());
 	} finally {
@@ -2623,6 +2624,134 @@ public void testBug6930_33() throws Exception {
 		JavaCore.setOptions(oldOptions);
 	}
 }
+public void testBug6930_34() throws Exception {
+	Hashtable oldOptions = JavaCore.getOptions();
+	
+	try {
+		Hashtable options = new Hashtable(oldOptions);
+		options.put(JavaCore.CODEASSIST_VISIBILITY_CHECK, JavaCore.ENABLED);
+		JavaCore.setOptions(options);
+		
+		IJavaProject p = createJavaProject("P", new String[] {"src"}, new String[]{"JCL_LIB"}, "bin");
+		
+		Map compileOptions = new HashMap();
+		compileOptions.put(CompilerOptions.OPTION_LocalVariableAttribute, CompilerOptions.DO_NOT_GENERATE);
+	    
+		String[] pathsAndContents =
+			new String[] {
+				"p6930/AllConstructors34.java",
+				"package p6930;\n" +
+				"public class AllConstructors34 {\n" +
+				"  public AllConstructors34(Object o) {}\n" +
+				"}"
+			};
+		createJar(
+				pathsAndContents,
+				p.getProject().getLocation().append("lib6930.jar").toOSString(),
+				compileOptions);
+		
+		addLibraryEntry(p, "/P/lib6930.jar", null);
+		
+		refresh(p);
+		
+		waitUntilIndexesReady();
+		
+		this.workingCopies = new ICompilationUnit[1];
+		this.workingCopies[0] = getWorkingCopy(
+				"/P/src/test/Test.java",
+				"package test;"+
+				"public class Test {\n" +
+				"  void foo() {\n" +
+				"    new AllConstructors\n" +
+				"  }\n" +
+				"}");
+
+		// do completion
+		CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true, false, false, true, true);
+		requestor.allowAllRequiredProposals();
+		NullProgressMonitor monitor = new NullProgressMonitor();
+
+	    String str = this.workingCopies[0].getSource();
+	    String completeBehind = "AllConstructors";
+	    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+	    this.workingCopies[0].codeComplete(cursorLocation, requestor, this.wcOwner, monitor);
+	    
+	    assertResults(
+			"AllConstructors34[CONSTRUCTOR_INVOCATION]{(), Lp6930.AllConstructors34;, (Ljava.lang.Object;)V, AllConstructors34, (arg0), "+(R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+"}\n" +
+			"   AllConstructors34[TYPE_REF]{p6930.AllConstructors34, p6930, Lp6930.AllConstructors34;, null, null, "+(R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+"}",
+			requestor.getResults());
+	} finally {
+		deleteProject("P");
+		
+		JavaCore.setOptions(oldOptions);
+	}
+}
+public void testBug6930_35() throws Exception {
+	Hashtable oldOptions = JavaCore.getOptions();
+	
+	try {
+		Hashtable options = new Hashtable(oldOptions);
+		options.put(JavaCore.CODEASSIST_VISIBILITY_CHECK, JavaCore.ENABLED);
+		JavaCore.setOptions(options);
+		
+		IJavaProject p = createJavaProject("P", new String[] {"src"}, new String[]{"JCL_LIB"}, "bin");
+		
+		Map compileOptions = new HashMap();
+		compileOptions.put(CompilerOptions.OPTION_LocalVariableAttribute, CompilerOptions.DO_NOT_GENERATE);
+	    
+		String[] pathsAndContents =
+			new String[] {
+				"p6930/AllConstructors35.java",
+				"package p6930;\n" +
+				"public class AllConstructors35 {\n" +
+				"  public AllConstructors35(Object o) {}\n" +
+				"}"
+			};
+		createJar(
+				pathsAndContents,
+				p.getProject().getLocation().append("lib6930.jar").toOSString(),
+				compileOptions);
+		
+		createSourceZip(
+				pathsAndContents,
+				p.getProject().getLocation().append("lib6930src.zip").toOSString());
+		
+		addLibraryEntry(p, "/P/lib6930.jar", "/P/lib6930src.zip");
+		
+		refresh(p);
+		
+		waitUntilIndexesReady();
+		
+		this.workingCopies = new ICompilationUnit[1];
+		this.workingCopies[0] = getWorkingCopy(
+				"/P/src/test/Test.java",
+				"package test;"+
+				"public class Test {\n" +
+				"  void foo() {\n" +
+				"    new AllConstructors\n" +
+				"  }\n" +
+				"}");
+
+		// do completion
+		CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true, false, false, true, true);
+		requestor.allowAllRequiredProposals();
+		NullProgressMonitor monitor = new NullProgressMonitor();
+
+	    String str = this.workingCopies[0].getSource();
+	    String completeBehind = "AllConstructors";
+	    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+	    this.workingCopies[0].codeComplete(cursorLocation, requestor, this.wcOwner, monitor);
+	    
+	    assertResults(
+			"AllConstructors35[CONSTRUCTOR_INVOCATION]{(), Lp6930.AllConstructors35;, (Ljava.lang.Object;)V, AllConstructors35, (o), "+(R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+"}\n" +
+			"   AllConstructors35[TYPE_REF]{p6930.AllConstructors35, p6930, Lp6930.AllConstructors35;, null, null, "+(R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+"}",
+			requestor.getResults());
+	} finally {
+		deleteProject("P");
+		
+		JavaCore.setOptions(oldOptions);
+	}
+}
 public void testBug79288() throws Exception {
 	try {
 		// create variable
diff --git a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/messages.properties b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/messages.properties
index 22738c9..2023665 100644
--- a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/messages.properties
+++ b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/messages.properties
@@ -15,7 +15,7 @@
 #Format: compiler.name = word1 word2 word3
 compiler.name = Eclipse Java Compiler
 #Format: compiler.version = 0.XXX[, other words (don't forget the comma if adding other words)]
-compiler.version = 0.934, 3.5.0 milestone-5
+compiler.version = 0.935, 3.5.0 milestone-5
 compiler.copyright = Copyright IBM Corp 2000, 2008. All rights reserved.
 
 ### progress
diff --git a/org.eclipse.jdt.core/buildnotes_jdt-core.html b/org.eclipse.jdt.core/buildnotes_jdt-core.html
index b8007fe..fa3aa34 100644
--- a/org.eclipse.jdt.core/buildnotes_jdt-core.html
+++ b/org.eclipse.jdt.core/buildnotes_jdt-core.html
@@ -39,11 +39,24 @@
 	</td>
   </tr>
 </table>
+<a name="v_935"></a>
+<hr><h1>
+Eclipse Platform Build Notes<br>
+Java Development Tooling Core</h1>
+Eclipse SDK 3.5M5 - %date% - 3.5 MILESTONE 5
+<br>Project org.eclipse.jdt.core v_935
+(<a href="http://dev.eclipse.org/viewcvs/index.cgi/org.eclipse.jdt.core/?only_with_tag=v_935">cvs</a>).
+<h2>What's new in this drop</h2>
+
+<h3>Problem Reports Fixed</h3>
+<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=261973">261973</a>
+[assist] Constructor completion should be improved (bug 6930)
+
 <a name="v_934"></a>
 <hr><h1>
 Eclipse Platform Build Notes<br>
 Java Development Tooling Core</h1>
-Eclipse SDK 3.5M5 - January 20, 2009 - 3.5 MILESTONE 5
+Eclipse SDK 3.5M5 - January 20, 2009
 <br>Project org.eclipse.jdt.core v_934
 (<a href="http://dev.eclipse.org/viewcvs/index.cgi/org.eclipse.jdt.core/?only_with_tag=v_934">cvs</a>).
 <h2>What's new in this drop</h2>
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
index 17a42b2..1fc0a27 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
@@ -5214,56 +5214,30 @@ public final class CompletionEngine
 		}
 
 		if (guessedType != null && guessedType.isValidBinding()) {
-			if (guessedType instanceof ReferenceBinding) {
-				ReferenceBinding refBinding = (ReferenceBinding) guessedType;
+			if (guessedType instanceof SourceTypeBinding) {
+				SourceTypeBinding refBinding = (SourceTypeBinding) guessedType;
 				
-				MethodBinding bestConstructor = null;
-				int[] bestMatchingLengths = null;
-				
-				MethodBinding[] methods = refBinding.methods();
+				refBinding.methods(); // force resolution
+				if (refBinding.scope == null || refBinding.scope.referenceContext == null) return null;
+				TypeDeclaration typeDeclaration = refBinding.scope.referenceContext;
+				AbstractMethodDeclaration[] methods = typeDeclaration.methods;
 				next : for (int i = 0; i < methods.length; i++) {
-					MethodBinding method = methods[i];
+					AbstractMethodDeclaration method = methods[i];
 					
-					if (!method.isConstructor()) break next;
+					if (method.binding == null || !method.isConstructor()) continue next;
 					
-					TypeBinding[] parameters = method.parameters;
-					//TODO take careful of member types
-					int parametersLength = parameters == null ? 0 : parameters.length;
-					if (parameterCount != parametersLength) continue next;
+					Argument[] arguments = method.arguments;
+					int argumentsLength = arguments == null ? 0 : arguments.length;
+					if (parameterCount != argumentsLength) continue next;
 					
-					int[] matchingLengths = new int[parameterCount];
-					for (int j = 0; j < parametersLength; j++) {
-						TypeBinding parameter = parameters[j];
-						
-						char[] parameterTypeName;
-						if (parameter instanceof ReferenceBinding) {
-							parameterTypeName = CharOperation.concatWith(((ReferenceBinding)parameter).compoundName, '.');
-						} else {
-							parameterTypeName = parameter.sourceName();
-						}
-						
-						if (!CharOperation.endsWith(parameterTypeName, parameterTypes[j])) {
+					for (int j = 0; j < argumentsLength; j++) {
+						if (!CharOperation.equals(CharOperation.concatWith(arguments[j].type.getTypeName(), '.'), parameterTypes[j])) {
 							continue next;
 						}
-						
-						int matchingLength = parameterTypes[j].length;
-						
-						if (bestMatchingLengths != null) {
-							if (bestMatchingLengths[j] > matchingLength) {
-								continue next;
-							}
-						}
-						
-						matchingLengths[j] = matchingLength;
 					}
 					
-					
-					bestConstructor = method;
-					bestMatchingLengths = matchingLengths;
+					return getSignature(method.binding);
 				}
-				
-				if (bestConstructor == null) return null;
-				return getSignature(bestConstructor);
 			}
 		}
 		
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/InternalCompletionProposal.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/InternalCompletionProposal.java
index d54dbfe..9ded5eb 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/InternalCompletionProposal.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/InternalCompletionProposal.java
@@ -29,6 +29,7 @@ import org.eclipse.jdt.internal.compiler.env.IBinaryMethod;
 import org.eclipse.jdt.internal.compiler.env.IBinaryType;
 import org.eclipse.jdt.internal.core.BinaryType;
 import org.eclipse.jdt.internal.core.JavaElement;
+import org.eclipse.jdt.internal.core.JavaModelManager;
 import org.eclipse.jdt.internal.core.NameLookup;
 import org.eclipse.jdt.internal.core.SourceMapper;
 
@@ -38,9 +39,7 @@ import org.eclipse.jdt.internal.core.SourceMapper;
  */
 public class InternalCompletionProposal extends CompletionProposal {
 	private static Object NO_ATTACHED_SOURCE = new Object();
-	private static final int OPENED_BYNARY_TYPES_THRESHOLD = 100; // threshold of opened binary to avoid to harm java model cache
-
-
+	
 	protected CompletionEngine completionEngine;
 	protected NameLookup nameLookup;
 
@@ -220,7 +219,7 @@ public class InternalCompletionProposal extends CompletionProposal {
 			if (this.hasNoParameterNamesFromIndex) {
 				IPackageFragmentRoot packageFragmentRoot = (IPackageFragmentRoot)type.getAncestor(IJavaElement.PACKAGE_FRAGMENT_ROOT);
 				if (packageFragmentRoot.isArchive() ||
-						this.completionEngine.openedBinaryTypes < OPENED_BYNARY_TYPES_THRESHOLD) {
+						this.completionEngine.openedBinaryTypes < getOpenedBinaryTypesThreshold()) {
 					SourceMapper mapper = ((JavaElement)method).getSourceMapper();
 					if (mapper != null) {
 						try {
@@ -339,6 +338,10 @@ public class InternalCompletionProposal extends CompletionProposal {
 	protected char[] getDeclarationTypeName() {
 		return this.declarationTypeName;
 	}
+	
+	private int getOpenedBinaryTypesThreshold() {
+		return JavaModelManager.getJavaModelManager().getOpenableCacheSize() / 10;
+	}
 
 	protected char[] getPackageName() {
 		return this.packageName;
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java
index 7249125..54dc431 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java
@@ -4683,4 +4683,8 @@ public class JavaModelManager implements ISaveParticipant, IContentTypeChangeLis
 	public Stats debugNewOpenableCacheStats() {
 		return this.cache.openableCache.new Stats();
 	}
+	
+	public int getOpenableCacheSize() {
+		return this.cache.openableCache.getSpaceLimit();
+	}
 }
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java
index 35fbb2f..06ca594 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/BasicSearchEngine.java
@@ -430,43 +430,6 @@ public class BasicSearchEngine {
 		}
 		return true;
 	}
-	
-	boolean match(char[] patternPkg, char[] patternTypeName, int matchRule, char[] pkg, char[] typeName) {
-		
-		boolean isCaseSensitive = (matchRule & SearchPattern.R_CASE_SENSITIVE) != 0;
-		
-		if (patternPkg != null && !CharOperation.equals(patternPkg, pkg, true))
-			return false;
-		
-		if (patternTypeName != null) {
-			boolean isCamelCase = (matchRule & (SearchPattern.R_CAMELCASE_MATCH | SearchPattern.R_CAMELCASE_SAME_PART_COUNT_MATCH)) != 0;
-			int matchMode = matchRule & JavaSearchPattern.MATCH_MODE_MASK;
-			if (!isCaseSensitive && !isCamelCase) {
-				patternTypeName = CharOperation.toLowerCase(patternTypeName);
-			}
-			boolean matchFirstChar = !isCaseSensitive || patternTypeName[0] == typeName[0];
-			switch(matchMode) {
-				case SearchPattern.R_EXACT_MATCH :
-					return matchFirstChar && CharOperation.equals(patternTypeName, typeName, isCaseSensitive);
-				case SearchPattern.R_PREFIX_MATCH :
-					return matchFirstChar && CharOperation.prefixEquals(patternTypeName, typeName, isCaseSensitive);
-				case SearchPattern.R_PATTERN_MATCH :
-					return CharOperation.match(patternTypeName, typeName, isCaseSensitive);
-				case SearchPattern.R_REGEXP_MATCH :
-					// TODO (frederic) implement regular expression match
-					break;
-				case SearchPattern.R_CAMELCASE_MATCH:
-					if (matchFirstChar && CharOperation.camelCaseMatch(patternTypeName, typeName, false)) {
-						return true;
-					}
-					return !isCaseSensitive && matchFirstChar && CharOperation.prefixEquals(patternTypeName, typeName, false);
-				case SearchPattern.R_CAMELCASE_SAME_PART_COUNT_MATCH:
-					return matchFirstChar && CharOperation.camelCaseMatch(patternTypeName, typeName, true);
-			}
-		}
-		return true;
-
-	}
 
 	boolean match(char patternTypeSuffix, char[] patternPkg, char[] patternTypeName, int matchRule, int typeKind, char[] pkg, char[] typeName) {
 		switch(patternTypeSuffix) {
@@ -493,14 +456,18 @@ public class BasicSearchEngine {
 				break;
 			case IIndexConstants.TYPE_SUFFIX : // nothing
 		}
-
-		boolean isCaseSensitive = (matchRule & SearchPattern.R_CASE_SENSITIVE) != 0;
-		if (patternPkg != null && !CharOperation.equals(patternPkg, pkg, isCaseSensitive))
-				return false;
-
+		return match(patternPkg, matchRule, patternTypeName, matchRule, pkg, typeName);
+	}
+	
+	boolean match(char[] patternPkg, int matchRulePkg, char[] patternTypeName, int matchRuleTypeName, char[] pkg, char[] typeName) {
+		boolean isPkgCaseSensitive = (matchRulePkg & SearchPattern.R_CASE_SENSITIVE) != 0;
+		if (patternPkg != null && !CharOperation.equals(patternPkg, pkg, isPkgCaseSensitive))
+			return false;
+		
+		boolean isCaseSensitive = (matchRuleTypeName & SearchPattern.R_CASE_SENSITIVE) != 0;
 		if (patternTypeName != null) {
-			boolean isCamelCase = (matchRule & (SearchPattern.R_CAMELCASE_MATCH | SearchPattern.R_CAMELCASE_SAME_PART_COUNT_MATCH)) != 0;
-			int matchMode = matchRule & JavaSearchPattern.MATCH_MODE_MASK;
+			boolean isCamelCase = (matchRuleTypeName & (SearchPattern.R_CAMELCASE_MATCH | SearchPattern.R_CAMELCASE_SAME_PART_COUNT_MATCH)) != 0;
+			int matchMode = matchRuleTypeName & JavaSearchPattern.MATCH_MODE_MASK;
 			if (!isCaseSensitive && !isCamelCase) {
 				patternTypeName = CharOperation.toLowerCase(patternTypeName);
 			}
@@ -554,6 +521,8 @@ public class BasicSearchEngine {
 
 		// Validate match rule first
 		final int validatedTypeMatchRule = SearchPattern.validateMatchRule(typeName == null ? null : new String (typeName), typeMatchRule);
+		
+		final int pkgMatchRule = SearchPattern.R_EXACT_MATCH | SearchPattern.R_CASE_SENSITIVE;
 
 		// Debug
 		if (VERBOSE) {
@@ -685,7 +654,7 @@ public class BasicSearchEngine {
 						for (int j = 0, allTypesLength = allTypes.length; j < allTypesLength; j++) {
 							IType type = allTypes[j];
 							char[] simpleName = type.getElementName().toCharArray();
-							if (match(packageName, typeName, validatedTypeMatchRule, packageDeclaration, simpleName) && !type.isMember()) {
+							if (match(packageName, pkgMatchRule, typeName, validatedTypeMatchRule, packageDeclaration, simpleName) && !type.isMember()) {
 								
 								int extraFlags = ExtraFlags.getExtraFlags(type);
 								
@@ -752,7 +721,7 @@ public class BasicSearchEngine {
 								private void endVisit(TypeDeclaration typeDeclaration) {
 									if (!hasConstructor(typeDeclaration) && typeDeclaration.enclosingType == null) {
 									
-										if (match(packageName, typeName, validatedTypeMatchRule, packageDeclaration, typeDeclaration.name)) {
+										if (match(packageName, pkgMatchRule, typeName, validatedTypeMatchRule, packageDeclaration, typeDeclaration.name)) {
 											nameRequestor.acceptConstructor(
 													Flags.AccPublic,
 													typeName,
@@ -793,7 +762,7 @@ public class BasicSearchEngine {
 								}
 								public boolean visit(ConstructorDeclaration constructorDeclaration, ClassScope classScope) {
 									TypeDeclaration typeDeclaration = this.declaringTypes[this.declaringTypesPtr];
-									if (match(packageName, typeName, validatedTypeMatchRule, packageDeclaration, typeDeclaration.name)) {
+									if (match(packageName, pkgMatchRule, typeName, validatedTypeMatchRule, packageDeclaration, typeDeclaration.name)) {
 										Argument[] arguments = constructorDeclaration.arguments;
 										int length = arguments == null ? 0 : arguments.length;
 										char[][] parameterNames = new char[length][];
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorDeclarationPattern.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorDeclarationPattern.java
index 48a7853..ef15815 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorDeclarationPattern.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorDeclarationPattern.java
@@ -10,14 +10,10 @@
  *******************************************************************************/
 package org.eclipse.jdt.internal.core.search.matching;
 
-import java.io.IOException;
-
 import org.eclipse.jdt.core.compiler.CharOperation;
 import org.eclipse.jdt.core.search.SearchPattern;
 import org.eclipse.jdt.internal.compiler.ExtraFlags;
 import org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants;
-import org.eclipse.jdt.internal.core.index.EntryResult;
-import org.eclipse.jdt.internal.core.index.Index;
 
 public class ConstructorDeclarationPattern extends ConstructorPattern {
 	public int extraFlags;
@@ -152,40 +148,6 @@ public boolean matchesDecodedKey(SearchPattern decodedPattern) {
 	return (this.parameterCount == pattern.parameterCount || this.parameterCount == -1 || this.varargs)
 		&& matchesName(this.declaringSimpleName, pattern.declaringSimpleName);
 }
-public EntryResult[] queryIn(Index index) throws IOException {
-	char[] key = this.declaringSimpleName; // can be null
-	int matchRule = getMatchRule();
-
-	switch(getMatchMode()) {
-		case R_EXACT_MATCH :
-			if (this.declaringSimpleName != null && this.parameterCount >= 0 && !this.varargs) {
-				key = createIndexKey(this.declaringSimpleName, this.parameterCount);
-			} 
-			matchRule &= ~R_EXACT_MATCH;
-			matchRule |= R_PREFIX_MATCH;
-			break;
-		case R_PREFIX_MATCH :
-			// do a prefix query with the declaringSimpleName
-			break;
-		case R_PATTERN_MATCH :
-			if (this.parameterCount >= 0 && !this.varargs)
-				key = createIndexKey(this.declaringSimpleName == null ? ONE_STAR : this.declaringSimpleName, this.parameterCount);
-			else if (this.declaringSimpleName != null && this.declaringSimpleName[this.declaringSimpleName.length - 1] != '*')
-				key = CharOperation.concat(this.declaringSimpleName, ONE_STAR, SEPARATOR);
-			key = CharOperation.concat(key, ONE_STAR);
-			// else do a pattern query with just the declaringSimpleName
-			break;
-		case R_REGEXP_MATCH :
-			// TODO (frederic) implement regular expression match
-			break;
-		case R_CAMELCASE_MATCH:
-		case R_CAMELCASE_SAME_PART_COUNT_MATCH:
-			// do a prefix query with the declaringSimpleName
-			break;
-	}
-
-	return index.query(getIndexCategories(), key, matchRule); // match rule is irrelevant when the key is null
-}
 private void removeInternalFlags() {
 	this.extraFlags = this.extraFlags & ~ExtraFlags.ParameterTypesStoredAsSignature; // ParameterTypesStoredAsSignature is an internal flags only used to decode key
 }
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorPattern.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorPattern.java
index 3430ba1..1192314 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorPattern.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/ConstructorPattern.java
@@ -528,11 +528,13 @@ public EntryResult[] queryIn(Index index) throws IOException {
 			// do a prefix query with the declaringSimpleName
 			break;
 		case R_PATTERN_MATCH :
-			if (this.parameterCount >= 0 && !this.varargs)
-				key = createIndexKey(this.declaringSimpleName == null ? ONE_STAR : this.declaringSimpleName, this.parameterCount);
-			else if (this.declaringSimpleName != null && this.declaringSimpleName[this.declaringSimpleName.length - 1] != '*')
+			if (this.parameterCount >= 0 && !this.varargs) {
+				key = CharOperation.concat(createIndexKey(this.declaringSimpleName == null ? ONE_STAR : this.declaringSimpleName, this.parameterCount), ONE_STAR);
+			} else if (this.declaringSimpleName != null && this.declaringSimpleName[this.declaringSimpleName.length - 1] != '*') {
 				key = CharOperation.concat(this.declaringSimpleName, ONE_STAR, SEPARATOR);
-			key = CharOperation.concat(key, ONE_STAR);
+			} else if (key != null){
+				key = CharOperation.concat(key, ONE_STAR);
+			}
 			// else do a pattern query with just the declaringSimpleName
 			break;
 		case R_REGEXP_MATCH :

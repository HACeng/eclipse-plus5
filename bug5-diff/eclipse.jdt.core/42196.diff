commit 86fe5df1661ea451ff0236e707546d6bd1e84ff3
Author: David Audel <daudel>
Date:   Mon Sep 1 09:36:32 2003 +0000

    bug 42196

3	1	org.eclipse.jdt.core/buildnotes_jdt-core.html
43	21	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
3	2	org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/EvaluationContext.java
3	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryType.java
56	6	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompletionRequestorWrapper.java
3	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Openable.java
3	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceType.java
diff --git a/org.eclipse.jdt.core/buildnotes_jdt-core.html b/org.eclipse.jdt.core/buildnotes_jdt-core.html
index bee1e7f..0a139e4 100644
--- a/org.eclipse.jdt.core/buildnotes_jdt-core.html
+++ b/org.eclipse.jdt.core/buildnotes_jdt-core.html
@@ -81,7 +81,9 @@ to rather highlight the caught exception type instead of entire catch block.
 </ul>
 
 <h3>Problem Reports Fixed</h3>
-<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=41534">41534</a>
+<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=42196">42196</a>
+Method popup extremely slow for JOGL code 
+<br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=41534">41534</a>
 incorrect shadowing reported by rename [refactoring] 
 <br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=40937">40937</a>
 ISourceReference.getSource throws ArrayIndexOutOfBoundsException 
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
index 216eeed..7cf1d92 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
@@ -50,6 +50,8 @@ public final class CompletionEngine
 	extends Engine
 	implements ISearchRequestor, TypeConstants , TerminalTokens , RelevanceConstants, SuffixConstants {
 	
+	public HashtableOfObject typeCache;
+	
 	public static boolean DEBUG = false;
 
 	private final static char[] ERROR_PATTERN = "*error*".toCharArray();  //$NON-NLS-1$
@@ -166,6 +168,7 @@ public final class CompletionEngine
 		this.javaProject = javaProject;
 		this.requestor = requestor;
 		this.nameEnvironment = nameEnvironment;
+		this.typeCache = new HashtableOfObject(5);
 
 		problemReporter = new ProblemReporter(
 				DefaultErrorHandlingPolicies.proceedWithAllProblems(),
@@ -1223,6 +1226,7 @@ public final class CompletionEngine
 		Scope invocationScope,
 		boolean implicitCall) {
 
+		ObjectVector newFieldsFound = new ObjectVector();
 		// Inherited fields which are hidden by subclasses are filtered out
 		// No visibility checks can be performed without the scope & invocationSite
 		
@@ -1278,7 +1282,7 @@ public final class CompletionEngine
 				}
 			}
 			
-			fieldsFound.add(new Object[]{field, receiverType});
+			newFieldsFound.add(new Object[]{field, receiverType});
 			
 			char[] completion = field.name;
 			
@@ -1307,6 +1311,8 @@ public final class CompletionEngine
 			field.modifiers, startPosition - offset, endPosition - offset,
 			relevance);
 		}
+		
+		fieldsFound.addAll(newFieldsFound);
 	}
 
 	private void findFields(
@@ -1993,6 +1999,7 @@ public final class CompletionEngine
 		boolean implicitCall,
 		boolean superCall) {
 
+		ObjectVector newMethodsFound =  new ObjectVector();
 		// Inherited methods which are hidden by subclasses are filtered out
 		// No visibility checks can be performed without the scope & invocationSite
 
@@ -2080,7 +2087,7 @@ public final class CompletionEngine
 				}
 			}
 
-			methodsFound.add(new Object[]{method, receiverType});
+			newMethodsFound.add(new Object[]{method, receiverType});
 			int length = method.parameters.length;
 			char[][] parameterPackageNames = new char[length][];
 			char[][] parameterTypeNames = new char[length][];
@@ -2141,6 +2148,8 @@ public final class CompletionEngine
 				relevance);
 			startPosition = previousStartPosition;
 		}
+		
+		methodsFound.addAll(newMethodsFound);
 	}
 	
 	int computeRelevanceForCaseMatching(char[] token, char[] proposalName){
@@ -2248,6 +2257,7 @@ public final class CompletionEngine
 		boolean exactMatch,
 		ReferenceBinding receiverType) {
 
+		ObjectVector newMethodsFound =  new ObjectVector();
 		// Inherited methods which are hidden by subclasses are filtered out
 		// No visibility checks can be performed without the scope & invocationSite
 		int methodLength = methodName.length;
@@ -2295,7 +2305,7 @@ public final class CompletionEngine
 				}
 			}
 
-			methodsFound.add(method);
+			newMethodsFound.add(method);
 			
 			int length = method.parameters.length;
 			char[][] parameterPackageNames = new char[length][];
@@ -2392,6 +2402,7 @@ public final class CompletionEngine
 				endPosition - offset,
 				relevance);
 		}
+		methodsFound.addAll(newMethodsFound);
 	}
 	private void findMethods(
 		char[] selector,
@@ -2560,25 +2571,36 @@ public final class CompletionEngine
 		}
 		// look into the model		
 		if(parameterNames == null){
-			NameEnvironmentAnswer answer = nameEnvironment.findType(bindingType.compoundName);
-
-			if(answer != null){
-				if(answer.isSourceType()) {
-					ISourceType sourceType = answer.getSourceTypes()[0];
-					ISourceMethod[] sourceMethods = sourceType.getMethods();
-					int len = sourceMethods == null ? 0 : sourceMethods.length;
-					for(int i = 0; i < len ; i++){
-						ISourceMethod sourceMethod = sourceMethods[i];
-						char[][] argTypeNames = sourceMethod.getArgumentTypeNames();
-
-						if(argTypeNames != null &&
-							CharOperation.equals(method.selector,sourceMethod.getSelector()) &&
-							CharOperation.equals(argTypeNames,parameterTypeNames)){
-							parameterNames = sourceMethod.getArgumentNames();
-							break;
-						}
+			char[] compoundName = CharOperation.concatWith(bindingType.compoundName, '.');
+			Object type = typeCache.get(compoundName);
+			
+			ISourceType sourceType = null;
+			if(type != null) {
+				if(type instanceof ISourceType) {
+					sourceType = (ISourceType) type;
+				}
+			} else {
+				NameEnvironmentAnswer answer = nameEnvironment.findType(bindingType.compoundName);
+				if(answer != null && answer.isSourceType()) {
+					sourceType = answer.getSourceTypes()[0];
+					typeCache.put(compoundName, sourceType);
+				}
+			}
+			
+			if(sourceType != null) {
+				ISourceMethod[] sourceMethods = sourceType.getMethods();
+				int len = sourceMethods == null ? 0 : sourceMethods.length;
+				for(int i = 0; i < len ; i++){
+					ISourceMethod sourceMethod = sourceMethods[i];
+					char[][] argTypeNames = sourceMethod.getArgumentTypeNames();
+
+					if(argTypeNames != null &&
+						CharOperation.equals(method.selector,sourceMethod.getSelector()) &&
+						CharOperation.equals(argTypeNames,parameterTypeNames)){
+						parameterNames = sourceMethod.getArgumentNames();
+						break;
 					}
-				} 
+				}
 			}
 		}
 		return parameterNames;
diff --git a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/EvaluationContext.java b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/EvaluationContext.java
index fc8e43c..eacba8c 100644
--- a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/EvaluationContext.java
+++ b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/EvaluationContext.java
@@ -12,7 +12,6 @@ package org.eclipse.jdt.internal.eval;
 
 import java.util.Map;
 
-import org.eclipse.jdt.core.ICompletionRequestor;
 import org.eclipse.jdt.core.IJavaProject;
 import org.eclipse.jdt.core.compiler.*;
 import org.eclipse.jdt.core.compiler.IProblem;
@@ -27,6 +26,7 @@ import org.eclipse.jdt.internal.compiler.env.ICompilationUnit;
 import org.eclipse.jdt.internal.compiler.env.INameEnvironment;
 import org.eclipse.jdt.internal.compiler.problem.ProblemSeverities;
 import org.eclipse.jdt.internal.compiler.util.SuffixConstants;
+import org.eclipse.jdt.internal.core.CompletionRequestorWrapper;
 
 /**
  * @see org.eclipse.jdt.core.eval.IEvaluationContext
@@ -95,7 +95,7 @@ public GlobalVariable[] allVariables() {
  *  @param options
  *		set of options used to configure the code assist engine.
  */
-public void complete(char[] codeSnippet, int completionPosition, ISearchableNameEnvironment environment, ICompletionRequestor requestor, Map options, IJavaProject project) {
+public void complete(char[] codeSnippet, int completionPosition, ISearchableNameEnvironment environment, CompletionRequestorWrapper requestor, Map options, IJavaProject project) {
 	final char[] className = "CodeSnippetCompletion".toCharArray(); //$NON-NLS-1$
 	final CodeSnippetToCuMapper mapper = new CodeSnippetToCuMapper(
 		codeSnippet, 
@@ -123,6 +123,7 @@ public void complete(char[] codeSnippet, int completionPosition, ISearchableName
 		}
 	};
 	CompletionEngine engine = new CompletionEngine(environment, mapper.getCompletionRequestor(requestor), options, project);
+	requestor.completionEngine = engine;
 	engine.complete(sourceUnit, mapper.startPosOffset + completionPosition, 0);
 }
 /**
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryType.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryType.java
index 28de7b9..077d6e5 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryType.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/BinaryType.java
@@ -64,7 +64,9 @@ public void codeComplete(char[] snippet,int insertion,int position,char[][] loca
 	JavaProject project = (JavaProject) getJavaProject();
 	SearchableEnvironment environment = (SearchableEnvironment) project.getSearchableNameEnvironment();
 	NameLookup nameLookup = project.getNameLookup();
-	CompletionEngine engine = new CompletionEngine(environment, new CompletionRequestorWrapper(requestor,nameLookup), project.getOptions(true), project);
+	CompletionRequestorWrapper requestorWrapper = new CompletionRequestorWrapper(requestor,nameLookup);
+	CompletionEngine engine = new CompletionEngine(environment, requestorWrapper, project.getOptions(true), project);
+	requestorWrapper.completionEngine = engine;
 
 	String source = getClassFile().getSource();
 	if (source != null && insertion > -1 && insertion < source.length()) {
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompletionRequestorWrapper.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompletionRequestorWrapper.java
index f62115a..e42a88d 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompletionRequestorWrapper.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompletionRequestorWrapper.java
@@ -20,8 +20,19 @@ import org.eclipse.jdt.core.compiler.IProblem;
 import org.eclipse.jdt.internal.codeassist.CompletionEngine;
 
 public class CompletionRequestorWrapper implements ICompletionRequestor {
+	private static Object NO_ATTACHED_SOURCE = new Object();
+	
 	static final char[] ARG = "arg".toCharArray();  //$NON-NLS-1$
+	static final char[] ARG0 = "arg0".toCharArray();  //$NON-NLS-1$
+	static final char[] ARG1 = "arg1".toCharArray();  //$NON-NLS-1$
+	static final char[] ARG2 = "arg2".toCharArray();  //$NON-NLS-1$
+	static final char[] ARG3 = "arg3".toCharArray();  //$NON-NLS-1$
+	static final char[][] ARGS1 = new char[][]{ARG0};
+	static final char[][] ARGS2 = new char[][]{ARG0, ARG1};
+	static final char[][] ARGS3 = new char[][]{ARG0, ARG1, ARG2};
+	static final char[][] ARGS4 = new char[][]{ARG0, ARG1, ARG2, ARG3};
 	
+	public CompletionEngine completionEngine;
 	ICompletionRequestor clientRequestor;
 	NameLookup nameLookup;
 	
@@ -309,8 +320,28 @@ private char[][] findMethodParameterNames(char[] declaringTypePackageName, char[
 	int length = parameterTypeNames.length;
 	
 	char[] typeName = CharOperation.concat(declaringTypePackageName,declaringTypeName,'.');
-	IType type = nameLookup.findType(new String(typeName), false, NameLookup.ACCEPT_CLASSES & NameLookup.ACCEPT_INTERFACES);
-	if(type instanceof BinaryType){
+	Object cachedType = completionEngine.typeCache.get(typeName);
+	
+	IType type = null;
+	if(cachedType != null) {
+		if(cachedType != NO_ATTACHED_SOURCE && cachedType instanceof BinaryType) {
+			type = (BinaryType)cachedType;
+		}
+	} else { 
+		type = nameLookup.findType(new String(typeName), false, NameLookup.ACCEPT_CLASSES & NameLookup.ACCEPT_INTERFACES);
+		if(type instanceof BinaryType){
+			if(((BinaryType)type).getSourceMapper() != null) {
+				completionEngine.typeCache.put(typeName, type);
+			} else {
+				completionEngine.typeCache.put(typeName, NO_ATTACHED_SOURCE);
+				type = null;
+			}
+		} else {
+			type = null;
+		}
+	}
+	
+	if(type != null) {
 		String[] args = new String[length];
 		for(int i = 0;	i< length ; i++){
 			char[] parameterType = CharOperation.concat(parameterPackageNames[i],parameterTypeNames[i],'.');
@@ -326,14 +357,33 @@ private char[][] findMethodParameterNames(char[] declaringTypePackageName, char[
 		} catch(JavaModelException e){
 			parameterNames = null;
 		}
-			
 	}
 	// default parameters name
 	if(parameterNames == null) {
-		parameterNames = new char[length][];
-		for (int i = 0; i < length; i++) {
-			parameterNames[i] = CharOperation.concat(ARG, String.valueOf(i).toCharArray());
+		switch (length) {
+			case 0 :
+				parameterNames = new char[length][];
+				break;
+			case 1 :
+				parameterNames = ARGS1;
+				break;
+			case 2 :
+				parameterNames = ARGS2;
+				break;
+			case 3 :
+				parameterNames = ARGS3;
+				break;
+			case 4 :
+				parameterNames = ARGS4;
+				break;
+			default :
+				parameterNames = new char[length][];
+				for (int i = 0; i < length; i++) {
+					parameterNames[i] = CharOperation.concat(ARG, String.valueOf(i).toCharArray());
+				}
+				break;
 		}
+		
 	}
 	return parameterNames;
 }
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Openable.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Openable.java
index 9dcf05c..628f133 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Openable.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Openable.java
@@ -127,7 +127,9 @@ protected void codeComplete(org.eclipse.jdt.internal.compiler.env.ICompilationUn
 		nameLookup.setUnitsToLookInside(workingCopies);
 
 		// code complete
-		CompletionEngine engine = new CompletionEngine(environment, new CompletionRequestorWrapper(requestor,nameLookup), project.getOptions(true), project);
+		CompletionRequestorWrapper requestorWrapper = new CompletionRequestorWrapper(requestor,nameLookup);
+		CompletionEngine engine = new CompletionEngine(environment, requestorWrapper, project.getOptions(true), project);
+		requestorWrapper.completionEngine = engine;
 		engine.complete(cu, position, 0);
 	} finally {
 		if (environment != null) {
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceType.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceType.java
index cb9372b..d916dc0 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceType.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceType.java
@@ -60,7 +60,9 @@ public void codeComplete(char[] snippet,int insertion,int position,char[][] loca
 	JavaProject project = (JavaProject) getJavaProject();
 	SearchableEnvironment environment = (SearchableEnvironment) project.getSearchableNameEnvironment();
 	NameLookup nameLookup = project.getNameLookup();
-	CompletionEngine engine = new CompletionEngine(environment, new CompletionRequestorWrapper(requestor,nameLookup), project.getOptions(true), project);
+	CompletionRequestorWrapper requestorWrapper = new CompletionRequestorWrapper(requestor,nameLookup);
+	CompletionEngine engine = new CompletionEngine(environment, requestorWrapper, project.getOptions(true), project);
+	requestorWrapper.completionEngine = engine;
 	
 	String source = getCompilationUnit().getSource();
 	if (source != null && insertion > -1 && insertion < source.length()) {

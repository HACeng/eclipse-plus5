commit d0cadab17e13c2fbabeeab7e19dab0ead49500bf
Author: David Audel <daudel>
Date:   Mon May 12 15:25:59 2008 +0000

    HEAD - bug 230885

85	0	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionContextTests.java
3	1	org.eclipse.jdt.core/buildnotes_jdt-core.html
9	0	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionUnitStructureRequestor.java
21	3	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/InternalExtendedCompletionContext.java
12	1	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistSourceField.java
12	1	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistSourceMethod.java
12	1	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistSourceType.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionContextTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionContextTests.java
index 34b1755..7132e93 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionContextTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionContextTests.java
@@ -4779,4 +4779,89 @@ public void test0162() throws JavaModelException {
 		"}",
 		result.context);
 }
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=230885
+public void test0163() throws JavaModelException {
+	this.workingCopies = new ICompilationUnit[3];
+	this.workingCopies[0] = getWorkingCopy(
+		"/Completion/src3/test/X.java",
+		"public class Foo  {\n"+
+		"\n"+
+		"        private void addDepencency(int source, int target, int depth) {\n"+
+		"        }\n"+
+		"\n"+
+		"        private void addDataDependencies(int source) {\n"+
+		"                addD/**/\n"+
+		"        }\n"+
+		"\n"+
+		"        private void addDataDependencies(int source) {\n"+
+		"        }\n"+
+		"}");
+	
+	
+	String str = this.workingCopies[0].getSource();
+	int tokenStart = str.lastIndexOf("addD/**/");
+	int tokenEnd = tokenStart + "addD".length() - 1;
+	int cursorLocation = str.lastIndexOf("addD/**/") + "addD".length();
+
+	CompletionResult result = contextComplete(this.workingCopies[0], cursorLocation, false, true, "I");
+	
+	String jclPath = getExternalJCLPathString();
+	assertResults(
+		"completion offset="+(cursorLocation)+"\n" +
+		"completion range=["+(tokenStart)+", "+(tokenEnd)+"]\n" +
+		"completion token=\"addD\"\n" +
+		"completion token kind=TOKEN_KIND_NAME\n" +
+		"expectedTypesSignatures=null\n" +
+		"expectedTypesKeys=null\n" +
+		"completion token location={STATEMENT_START}\n" +
+		"visibleElements={\n" +
+		"	source [in addDataDependencies(int) [in Foo [in [Working copy] X.java [in test [in src3 [in Completion]]]]]],\n" +
+		"	hashCode() {key=Ljava/lang/Object;.hashCode()I} [in Object [in Object.class [in java.lang [in "+jclPath+"]]]],\n" +
+		"}",
+		result.context);
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=230885
+public void test0164() throws JavaModelException {
+	this.workingCopies = new ICompilationUnit[3];
+	this.workingCopies[0] = getWorkingCopy(
+		"/Completion/src3/test/X.java",
+		"public class Foo  {\n"+
+		"\n"+
+		"        private void addDepencency(int source, int target, int depth) {\n"+
+		"        }\n"+
+		"\n"+
+		"        private int addDataDependencies(int source) {\n"+
+		"        }\n"+
+		"\n"+
+		"        private int addDataDependencies(int source) {\n"+
+		"                addD/**/\n"+
+		"        }\n"+
+		"\n"+
+		"        private int addDataDependencies(int source) {\n"+
+		"        }\n"+
+		"}");
+	
+	
+	String str = this.workingCopies[0].getSource();
+	int tokenStart = str.lastIndexOf("addD/**/");
+	int tokenEnd = tokenStart + "addD".length() - 1;
+	int cursorLocation = str.lastIndexOf("addD/**/") + "addD".length();
+
+	CompletionResult result = contextComplete(this.workingCopies[0], cursorLocation, false, true, "I");
+	
+	String jclPath = getExternalJCLPathString();
+	assertResults(
+		"completion offset="+(cursorLocation)+"\n" +
+		"completion range=["+(tokenStart)+", "+(tokenEnd)+"]\n" +
+		"completion token=\"addD\"\n" +
+		"completion token kind=TOKEN_KIND_NAME\n" +
+		"expectedTypesSignatures=null\n" +
+		"expectedTypesKeys=null\n" +
+		"completion token location={STATEMENT_START}\n" +
+		"visibleElements={\n" +
+		"	source [in addDataDependencies(int)#2 [in Foo [in [Working copy] X.java [in test [in src3 [in Completion]]]]]],\n" +
+		"	hashCode() {key=Ljava/lang/Object;.hashCode()I} [in Object [in Object.class [in java.lang [in "+jclPath+"]]]],\n" +
+		"}",
+		result.context);
+}
 }
diff --git a/org.eclipse.jdt.core/buildnotes_jdt-core.html b/org.eclipse.jdt.core/buildnotes_jdt-core.html
index 09a7a98..3c31099 100644
--- a/org.eclipse.jdt.core/buildnotes_jdt-core.html
+++ b/org.eclipse.jdt.core/buildnotes_jdt-core.html
@@ -48,7 +48,9 @@ Eclipse SDK 3.4RC1 - %date% - 3.4 RELEASE CANDIDATE 1
 <h2>What's new in this drop</h2>
 
 <h3>Problem Reports Fixed</h3>
-<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=163200">163200</a>
+<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=230885">230885</a>
+[content assist] NPE at ParameterGuesser.createVariable()
+<br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=163200">163200</a>
 Moving code with compile errors outside of a source folder preserve compile errors
 <br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=229951">229951</a>
 StackOverflowError during JavaSearchScope.add for large workspace
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionUnitStructureRequestor.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionUnitStructureRequestor.java
index 839abfa..c27d94d 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionUnitStructureRequestor.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionUnitStructureRequestor.java
@@ -59,6 +59,7 @@ public class CompletionUnitStructureRequestor extends CompilationUnitStructureRe
 	
 	private Map bindingCache;
 	private Map elementCache;
+	private Map elementWithProblemCache;
 	
 	public CompletionUnitStructureRequestor(
 			ICompilationUnit unit,
@@ -67,12 +68,14 @@ public class CompletionUnitStructureRequestor extends CompilationUnitStructureRe
 			ASTNode assistNode,
 			Map bindingCache,
 			Map elementCache,
+			Map elementWithProblemCache,
 			Map newElements) {
 		super(unit, unitInfo, newElements);
 		this.parser = parser;
 		this.assistNode = assistNode;
 		this.bindingCache = bindingCache;
 		this.elementCache = elementCache;
+		this.elementWithProblemCache = elementWithProblemCache;
 	}
 	
 	protected Annotation createAnnotation(JavaElement parent, String name) {
@@ -85,6 +88,8 @@ public class CompletionUnitStructureRequestor extends CompilationUnitStructureRe
 		if (fieldInfo.node.binding != null) {
 			this.bindingCache.put(field, fieldInfo.node.binding);
 			this.elementCache.put(fieldInfo.node.binding, field);
+		} else {
+			this.elementWithProblemCache.put(fieldInfo.node, field);
 		}
 		return field;
 	}
@@ -108,6 +113,8 @@ public class CompletionUnitStructureRequestor extends CompilationUnitStructureRe
 		if (methodInfo.node.binding != null) {
 			this.bindingCache.put(method, methodInfo.node.binding);
 			this.elementCache.put(methodInfo.node.binding, method);
+		} else {
+			this.elementWithProblemCache.put(methodInfo.node, method);
 		}
 		return method;
 	}
@@ -122,6 +129,8 @@ public class CompletionUnitStructureRequestor extends CompilationUnitStructureRe
 		if (typeInfo.node.binding != null) {
 			this.bindingCache.put(type, typeInfo.node.binding);
 			this.elementCache.put(typeInfo.node.binding, type);
+		} else {
+			this.elementWithProblemCache.put(typeInfo.node, type);
 		}
 		return type;
 	}
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/InternalExtendedCompletionContext.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/InternalExtendedCompletionContext.java
index 03a8b5e..dcd58e5 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/InternalExtendedCompletionContext.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/InternalExtendedCompletionContext.java
@@ -86,6 +86,7 @@ public class InternalExtendedCompletionContext {
 	private boolean hasComputedEnclosingJavaElements;
 	Map bindingsToNodes;
 	private Map bindingsToHandles;
+	private Map nodesWithProblemsToHandles;
 	private ICompilationUnit compilationUnit;
 	
 	public InternalExtendedCompletionContext(
@@ -117,6 +118,7 @@ public class InternalExtendedCompletionContext {
 			
 			HashMap handleToBinding = new HashMap();
 			HashMap bindingToHandle = new HashMap();
+			HashMap nodeWithProblemToHandle = new HashMap();
 			HashMap handleToInfo = new HashMap();
 			
 			org.eclipse.jdt.core.ICompilationUnit handle = new AssistCompilationUnit(original, this.owner, handleToBinding, handleToInfo);
@@ -132,6 +134,7 @@ public class InternalExtendedCompletionContext {
 						this.assistNode,
 						handleToBinding,
 						bindingToHandle,
+						nodeWithProblemToHandle,
 						handleToInfo);
 			
 			CompletionElementNotifier notifier =
@@ -149,6 +152,7 @@ public class InternalExtendedCompletionContext {
 					new HashMap());
 			
 			this.bindingsToHandles = bindingToHandle;
+			this.nodesWithProblemsToHandles = nodeWithProblemToHandle;
 			this.compilationUnit = handle;
 		}
 	}
@@ -218,12 +222,12 @@ public class InternalExtendedCompletionContext {
 		ReferenceContext referenceContext = binding.declaringScope.referenceContext();
 		if (referenceContext instanceof AbstractMethodDeclaration) {
 			AbstractMethodDeclaration methodDeclaration = (AbstractMethodDeclaration) referenceContext;
-			parent = this.getJavaElementOfCompilationUnit(methodDeclaration.binding);
+			parent = this.getJavaElementOfCompilationUnit(methodDeclaration, methodDeclaration.binding);
 		} else if (referenceContext instanceof TypeDeclaration){
 			// Local variable is declared inside an initializer
 			TypeDeclaration typeDeclaration = (TypeDeclaration) referenceContext;
 			
-			IType type = (IType)this.getJavaElementOfCompilationUnit(typeDeclaration.binding);
+			IType type = (IType)this.getJavaElementOfCompilationUnit(typeDeclaration, typeDeclaration.binding);
 			if (type != null) {
 				try {
 					IInitializer[] initializers = type.getInitializers();
@@ -268,6 +272,19 @@ public class InternalExtendedCompletionContext {
 		return (JavaElement)this.bindingsToHandles.get(binding);
 	}
 	
+	private JavaElement getJavaElementOfCompilationUnit(ASTNode node, Binding binding) {
+		if (!this.hasComputedEnclosingJavaElements) {
+			computeEnclosingJavaElements();
+		}
+		if (binding != null) {
+			if (this.bindingsToHandles == null) return null;
+			return (JavaElement)this.bindingsToHandles.get(binding);
+		} else {
+			if (this.nodesWithProblemsToHandles == null) return null;
+			return (JavaElement)this.nodesWithProblemsToHandles.get(node);
+		}
+	}
+	
 	private TypeBinding getTypeFromSignature(String typeSignature, Scope scope) {
 		TypeBinding assignableTypeBinding = null;
 		
@@ -353,7 +370,8 @@ public class InternalExtendedCompletionContext {
 			next : for (int i = 0; i < size; i++) {
 				LocalVariableBinding binding = (LocalVariableBinding) visibleLocalVariables.elementAt(i);
 				if (assignableTypeBinding != null && !binding.type.isCompatibleWith(assignableTypeBinding)) continue next;
-				result[elementCount++] = getJavaElement(binding);
+				JavaElement localVariable = getJavaElement(binding);
+				if (localVariable != null) result[elementCount++] = localVariable;
 			}
 		
 		}
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistSourceField.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistSourceField.java
index 31b23c7..9b34353 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistSourceField.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistSourceField.java
@@ -25,6 +25,7 @@ public class AssistSourceField extends ResolvedSourceField {
 	private Map infoCache;
 	
 	private String uniqueKey;
+	private boolean isResolved;
 	
 	public AssistSourceField(JavaElement parent, String name, Map bindingCache, Map infoCache) {
 		super(parent, name, null);
@@ -43,14 +44,24 @@ public class AssistSourceField extends ResolvedSourceField {
 		if (this.uniqueKey == null) {
 			Binding binding = (Binding) this.bindingCache.get(this);
 			if (binding != null) {
+				this.isResolved = true;
 				this.uniqueKey = new String(binding.computeUniqueKey());
+			} else {
+				this.isResolved = false;
+				try {
+					this.uniqueKey = getKey(this, false/*don't open*/);
+				} catch (JavaModelException e) {
+					// happen only if force open is true
+					return null;
+				}
 			}
 		}
 		return this.uniqueKey;
 	}
 	
 	public boolean isResolved() {
-		return getKey() != null;
+		getKey();
+		return this.isResolved;
 	}
 	
 	protected void toStringInfo(int tab, StringBuffer buffer, Object info,boolean showResolvedInfo) {
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistSourceMethod.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistSourceMethod.java
index 1b6c810..189aca8 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistSourceMethod.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistSourceMethod.java
@@ -26,6 +26,7 @@ public class AssistSourceMethod extends ResolvedSourceMethod {
 	private Map infoCache;
 	
 	private String uniqueKey;
+	private boolean isResolved;
 	
 	public AssistSourceMethod(JavaElement parent, String name, String[] parameterTypes, Map bindingCache, Map infoCache) {
 		super(parent, name, parameterTypes, null);
@@ -44,14 +45,24 @@ public class AssistSourceMethod extends ResolvedSourceMethod {
 		if (this.uniqueKey == null) {
 			Binding binding = (Binding) this.bindingCache.get(this);
 			if (binding != null) {
+				this.isResolved = true;
 				this.uniqueKey = new String(binding.computeUniqueKey());
+			} else {
+				this.isResolved = false;
+				try {
+					this.uniqueKey = getKey(this, false/*don't open*/);
+				} catch (JavaModelException e) {
+					// happen only if force open is true
+					return null;
+				}
 			}
 		}
 		return this.uniqueKey;
 	}
 	
 	public boolean isResolved() {
-		return getKey() != null;
+		getKey();
+		return this.isResolved;
 	}
 	
 	protected void toStringInfo(int tab, StringBuffer buffer, Object info,boolean showResolvedInfo) {
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistSourceType.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistSourceType.java
index 72902d9..720cf7f 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistSourceType.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistSourceType.java
@@ -29,6 +29,7 @@ public class AssistSourceType extends ResolvedSourceType {
 	private Map infoCache;
 	
 	private String uniqueKey;
+	private boolean isResolved;
 	
 	public AssistSourceType(JavaElement parent, String name, Map bindingCache, Map infoCache) {
 		super(parent, name, null);
@@ -54,14 +55,24 @@ public class AssistSourceType extends ResolvedSourceType {
 		if (this.uniqueKey == null) {
 			Binding binding = (Binding) this.bindingCache.get(this);
 			if (binding != null) {
+				this.isResolved = true;
 				this.uniqueKey = new String(binding.computeUniqueKey());
+			} else {
+				this.isResolved = false;
+				try {
+					this.uniqueKey = getKey(this, false/*don't open*/);
+				} catch (JavaModelException e) {
+					// happen only if force open is true
+					return null;
+				}
 			}
 		}
 		return this.uniqueKey;
 	}
 	
 	public boolean isResolved() {
-		return getKey() != null;
+		getKey();
+		return this.isResolved;
 	}
 	
 	protected void toStringInfo(int tab, StringBuffer buffer, Object info,boolean showResolvedInfo) {

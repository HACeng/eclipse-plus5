commit 425b0c5314087893896fa849d0ee8761b973ef60
Author: Jayaprakash Arthanareeswaran <jarthana@in.ibm.com>
Date:   Wed Mar 12 15:29:22 2014 +0530

    Bug 430136 - [1.8][model] JavaElement.JEM_LAMBDA_METHOD should not use
    '*' and '>' as memento delimiter

3	3	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/MementoTests.java
57	0	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests18.java
2	2	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java
4	4	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/LambdaMethod.java
2	2	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Member.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/MementoTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/MementoTests.java
index b688133..81bf412 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/MementoTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/MementoTests.java
@@ -251,7 +251,7 @@ public void testBinaryMethodMemento4() throws JavaModelException {
 	IType type = getClassFile("/P/lib/p/X.class").getType();
 	IMethod method = type.getMethod("foo", new String[] {"Ljava.util.Collection<*>;"});
 	assertMemento(
-		"=P/lib<p(X.class[X~foo~Ljava.util.Collection\\<\\*\\>;",
+		"=P/lib<p(X.class[X~foo~Ljava.util.Collection\\<*>;",
 		method);
 }
 
@@ -382,7 +382,7 @@ public void testImportDeclarationMemento() {
 
 	importDecl = getCompilationUnit("/P/src/p/X.java").getImport("java.util.*");
 	assertMemento(
-		"=P/src<p{X.java#java.util.\\*",
+		"=P/src<p{X.java#java.util.*",
 		importDecl);
 }
 /*
@@ -698,7 +698,7 @@ public void testProjectMemento() {
 public void testProjectMemento2() {
 	IJavaProject project = getJavaProject("P (abc) ~");
 	assertMemento(
-		"=P \\(abc) \\~",
+		"=P \\(abc\\) \\~",
 		project);
 }
 /**
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests18.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests18.java
index 916fdaa..7ebeadb 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests18.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests18.java
@@ -18,8 +18,10 @@ import org.eclipse.jdt.core.ICodeAssist;
 import org.eclipse.jdt.core.ICompilationUnit;
 import org.eclipse.jdt.core.IJavaElement;
 import org.eclipse.jdt.core.IMethod;
+import org.eclipse.jdt.core.JavaCore;
 import org.eclipse.jdt.core.JavaModelException;
 import org.eclipse.jdt.core.WorkingCopyOwner;
+import org.eclipse.jdt.internal.core.LambdaExpression;
 
 public class ResolveTests18 extends AbstractJavaModelTests {
 	ICompilationUnit wc = null;
@@ -2394,4 +2396,59 @@ public void test429812() throws CoreException {
 	IMethod lambda = (IMethod) elements[0].getParent();
 	assertEquals("(Ljava.util.List<TU;>;I)TU;", lambda.getSignature());
 }
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=430136
+public void test430136() throws CoreException {
+	this.workingCopies = new ICompilationUnit[1];
+	this.workingCopies[0] = getWorkingCopy("/Resolve/src/X.java",
+			"import java.util.List;\n" +
+			"interface Getter<E> {\n" +
+			"    E get(List<E> list, int i);\n" +
+			"}\n" +
+			"public class X<U> {\n" +
+			"	public void foo(List<U> l) {\n" +
+			"		Getter<U> g= (x, i) -> x.get(i);\n" +
+			"		Getter<U> g1= (x, i) -> x.get(i);\n" +
+			"	} \n" +
+			"}\n"
+			);
+	
+	String str = this.workingCopies[0].getSource();
+	
+	String selection = "x,";
+	int start = str.indexOf(selection);
+	IJavaElement[] elements = this.workingCopies[0].codeSelect(start, 1);
+	IMethod lambda = (IMethod) elements[0].getParent();
+	String memento = lambda.getHandleIdentifier();
+	assertEquals("Incorrect memento string", 
+			"=Resolve/src<{X.java[X~foo~QList\\<QU;>;)Lambda\\(Getter\\)\"LGetter\\<TU;>;!144!161!152&get!2\"Ljava.util.List\\<TU;>;\"x\"I\"i\"TU;\"LX\\~Getter\\<LX;:TU;>;.get\\(Ljava\\/util\\/List\\<TU;>;I\\)TU;@x!145!145!145!145!Ljava\\/util\\/List;!0!true@i!148!148!148!148!I!0!true", 
+			memento);
+	IJavaElement result = JavaCore.create(memento);
+	assertEquals("Java elements should be equal", lambda, result);
+	LambdaExpression expression = (LambdaExpression) lambda.getParent();
+	memento = expression.getHandleIdentifier();
+	assertEquals("Incorrect memento string", 
+			"=Resolve/src<{X.java[X~foo~QList\\<QU;>;)Lambda\\(Getter\\)\"LGetter\\<TU;>;!144!161!152", 
+			memento);
+	result = JavaCore.create(memento);
+	assertEquals("Java elements should be equal", expression, result);
+	
+	start = str.lastIndexOf(selection);
+	elements = this.workingCopies[0].codeSelect(start, 1);
+	lambda = (IMethod) elements[0].getParent();
+	memento = lambda.getHandleIdentifier();
+	System.out.println(memento);
+	assertEquals("Incorrect memento string", 
+			"=Resolve/src<{X.java[X~foo~QList\\<QU;>;)Lambda\\(Getter\\)\"LGetter\\<TU;>;!180!197!188&get!2\"Ljava.util.List\\<TU;>;\"x\"I\"i\"TU;\"LX\\~Getter\\<LX;:TU;>;.get\\(Ljava\\/util\\/List\\<TU;>;I\\)TU;@x!181!181!181!181!Ljava\\/util\\/List;!0!true@i!184!184!184!184!I!0!true", 
+			memento);
+	result = JavaCore.create(memento);
+	assertEquals("Java elements should be equal", lambda, result);
+	expression = (LambdaExpression) lambda.getParent();
+	memento = expression.getHandleIdentifier();
+	System.out.println(memento);
+	assertEquals("Incorrect memento string", 
+			"=Resolve/src<{X.java[X~foo~QList\\<QU;>;)Lambda\\(Getter\\)\"LGetter\\<TU;>;!180!197!188", 
+			memento);
+	result = JavaCore.create(memento);
+	assertEquals("Java elements should be equal", expression, result);
+}
 }
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java
index a2e82a2..0c3e619 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java
@@ -69,8 +69,8 @@ public abstract class JavaElement extends PlatformObject implements IJavaElement
 	public static final char JEM_LOCALVARIABLE = '@';
 	public static final char JEM_TYPE_PARAMETER = ']';
 	public static final char JEM_ANNOTATION = '}';
-	public static final char JEM_LAMBDA_EXPRESSION = '>';
-	public static final char JEM_LAMBDA_METHOD = '*';
+	public static final char JEM_LAMBDA_EXPRESSION = ')';
+	public static final char JEM_LAMBDA_METHOD = '&';
 	public static final char JEM_STRING = '"';
 	
 
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/LambdaMethod.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/LambdaMethod.java
index 1bc360d..40afa74 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/LambdaMethod.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/LambdaMethod.java
@@ -140,14 +140,14 @@ public class LambdaMethod extends SourceMethod {
 		buff.append(this.parameterTypes.length);
 		for (int i = 0, length = this.parameterTypes.length; i < length; i++) {
 			buff.append(JEM_STRING);
-			buff.append(this.parameterTypes[i]);
+			escapeMementoName(buff, this.parameterTypes[i]);
 			buff.append(JEM_STRING);
-			buff.append(this.parameterNameStrings[i]);
+			escapeMementoName(buff, this.parameterNameStrings[i]);
 		}
 		buff.append(JEM_STRING);
-		buff.append(this.returnTypeString);
+		escapeMementoName(buff, this.returnTypeString);
 		buff.append(JEM_STRING);
-		buff.append(this.key);
+		escapeMementoName(buff, this.key);
 		ILocalVariable[] arguments = this.elementInfo.arguments;
 		for (int i = 0, length = arguments.length; i < length; i++) {
 			LocalVariable local = (LocalVariable) arguments[i];
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Member.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Member.java
index b64e142..38e4c04 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Member.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/Member.java
@@ -188,9 +188,9 @@ public IJavaElement getHandleFromMemento(String token, MementoTokenizer memento,
 			if (!memento.hasMoreTokens() || memento.nextToken() != MementoTokenizer.COUNT) 
 				return this;
 			int arrowPosition = Integer.parseInt(memento.nextToken());
-			if (!memento.hasMoreTokens() || (token = memento.nextToken()) != MementoTokenizer.LAMBDA_METHOD) 
-				return this;
 			LambdaExpression expression = new LambdaExpression(this, name, interphase, sourceStart, sourceEnd, arrowPosition);
+			if (!memento.hasMoreTokens() || (token = memento.nextToken()) != MementoTokenizer.LAMBDA_METHOD) 
+				return expression;
 			return expression.getHandleFromMemento(token, memento, workingCopyOwner);
 		case JEM_TYPE:
 			String typeName;
commit ba102afaa27b3b6b63ee0fd01eab5a8d45f4d8a9
Author: Jayaprakash Arthanareeswaran <jarthana@in.ibm.com>
Date:   Thu Mar 13 23:51:23 2014 +0530

    Fix for Bug 430136 - [1.8][model] JavaElement.JEM_LAMBDA_METHOD should
    not use '*' and '>' as memento delimiter

32	1	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaElement8Tests.java
1	1	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/MementoTests.java
4	4	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests18.java
26	3	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java
2	2	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/LambdaExpression.java
5	6	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/LambdaMethod.java
18	9	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/MementoTokenizer.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaElement8Tests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaElement8Tests.java
index 4f35ce4..502f89f 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaElement8Tests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaElement8Tests.java
@@ -493,5 +493,36 @@ public class JavaElement8Tests extends AbstractJavaModelTests {
 		finally {
 			deleteProject("Bug430141");
 		}
-	}	
+	}
+	// https://bugs.eclipse.org/bugs/show_bug.cgi?id=430136
+	public void test430136() throws CoreException {
+		String projectName = "([Bug430136])";
+		try {
+			IJavaProject project = createJavaProject(projectName, new String[] {"src"}, new String[] {"JCL18_LIB"}, "bin", "1.8");
+			project.open(null);
+			String fileContent = 
+					"interface MyFunction<T, R> {\n" +
+					"    R apply(T t);\n" +
+					"    default <V> MyFunction<V, R> compose(MyFunction<? super V, ? extends T> before) {\n" +
+					"        return v -> apply(before.apply(v));\n" +
+					"    }\n" +
+					"}\n";
+			String fileName = "/" + projectName + "/src/X.java";
+			createFile(fileName, fileContent);
+			
+			ICompilationUnit unit = getCompilationUnit(fileName);
+			int start = fileContent.indexOf("v");
+			IJavaElement[] elements = unit.codeSelect(start, 1);
+			assertEquals("Incorrect java element", IJavaElement.LOCAL_VARIABLE, elements[0].getElementType());
+			IType lambda = (IType) elements[0].getParent().getParent();
+			String mem = lambda.getHandleIdentifier();
+			String expected = "=\\(\\[Bug430136\\]\\)/src<{X.java[MyFunction~compose~QMyFunction\\<-QV;+QT;>;=)Lambda\\(MyFunction\\)=\"LMyFunction\\<TV;TR;>;!148!174!151";
+			assertEquals("Incorrect memento", expected, mem);
+			IJavaElement result = JavaCore.create(expected);
+			assertEquals("Incorrect element created", lambda, result);
+		}
+		finally {
+			deleteProject(projectName);
+		}
+	}
 }
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/MementoTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/MementoTests.java
index 81bf412..250235b 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/MementoTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/MementoTests.java
@@ -698,7 +698,7 @@ public void testProjectMemento() {
 public void testProjectMemento2() {
 	IJavaProject project = getJavaProject("P (abc) ~");
 	assertMemento(
-		"=P \\(abc\\) \\~",
+		"=P \\(abc) \\~",
 		project);
 }
 /**
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests18.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests18.java
index ea59505..0352149 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests18.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests18.java
@@ -2420,14 +2420,14 @@ public void test430136() throws CoreException {
 	IMethod lambda = (IMethod) elements[0].getParent();
 	String memento = lambda.getHandleIdentifier();
 	assertEquals("Incorrect memento string", 
-			"=Resolve/src<{X.java[X~foo~QList\\<QU;>;)Lambda\\(Getter\\)\"LGetter\\<TU;>;!144!161!152&get!2\"Ljava.util.List\\<TU;>;\"x\"I\"i\"TU;\"LX\\~Getter\\<LX;:TU;>;.get\\(Ljava\\/util\\/List\\<TU;>;I\\)TU;@x!145!145!145!145!Ljava\\/util\\/List;!0!true@i!148!148!148!148!I!0!true", 
+			"=Resolve/src<{X.java[X~foo~QList\\<QU;>;=)Lambda\\(Getter)=\"LGetter\\<TU;>;!144!161!152=&get!2=\"Ljava.util.List\\<TU;>;=\"x=\"I=\"i=\"TU;=\"LX\\~Getter\\<LX;:TU;>;.get\\(Ljava\\/util\\/List\\<TU;>;I)TU;@x!145!145!145!145!Ljava\\/util\\/List;!0!true@i!148!148!148!148!I!0!true", 
 			memento);
 	IJavaElement result = JavaCore.create(memento);
 	assertEquals("Java elements should be equal", lambda, result);
 	LambdaExpression expression = (LambdaExpression) lambda.getParent();
 	memento = expression.getHandleIdentifier();
 	assertEquals("Incorrect memento string", 
-			"=Resolve/src<{X.java[X~foo~QList\\<QU;>;)Lambda\\(Getter\\)\"LGetter\\<TU;>;!144!161!152", 
+			"=Resolve/src<{X.java[X~foo~QList\\<QU;>;=)Lambda\\(Getter)=\"LGetter\\<TU;>;!144!161!152", 
 			memento);
 	result = JavaCore.create(memento);
 	assertEquals("Java elements should be equal", expression, result);
@@ -2437,14 +2437,14 @@ public void test430136() throws CoreException {
 	lambda = (IMethod) elements[0].getParent();
 	memento = lambda.getHandleIdentifier();
 	assertEquals("Incorrect memento string", 
-			"=Resolve/src<{X.java[X~foo~QList\\<QU;>;)Lambda\\(Getter\\)\"LGetter\\<TU;>;!180!197!188&get!2\"Ljava.util.List\\<TU;>;\"x\"I\"i\"TU;\"LX\\~Getter\\<LX;:TU;>;.get\\(Ljava\\/util\\/List\\<TU;>;I\\)TU;@x!181!181!181!181!Ljava\\/util\\/List;!0!true@i!184!184!184!184!I!0!true", 
+			"=Resolve/src<{X.java[X~foo~QList\\<QU;>;=)Lambda\\(Getter)=\"LGetter\\<TU;>;!180!197!188=&get!2=\"Ljava.util.List\\<TU;>;=\"x=\"I=\"i=\"TU;=\"LX\\~Getter\\<LX;:TU;>;.get\\(Ljava\\/util\\/List\\<TU;>;I)TU;@x!181!181!181!181!Ljava\\/util\\/List;!0!true@i!184!184!184!184!I!0!true", 
 			memento);
 	result = JavaCore.create(memento);
 	assertEquals("Java elements should be equal", lambda, result);
 	expression = (LambdaExpression) lambda.getParent();
 	memento = expression.getHandleIdentifier();
 	assertEquals("Incorrect memento string", 
-			"=Resolve/src<{X.java[X~foo~QList\\<QU;>;)Lambda\\(Getter\\)\"LGetter\\<TU;>;!180!197!188", 
+			"=Resolve/src<{X.java[X~foo~QList\\<QU;>;=)Lambda\\(Getter)=\"LGetter\\<TU;>;!180!197!188", 
 			memento);
 	result = JavaCore.create(memento);
 	assertEquals("Java elements should be equal", expression, result);
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java
index 0c3e619..6abc0d1 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElement.java
@@ -73,6 +73,22 @@ public abstract class JavaElement extends PlatformObject implements IJavaElement
 	public static final char JEM_LAMBDA_METHOD = '&';
 	public static final char JEM_STRING = '"';
 	
+	/**
+	 * Before ')', '&' and '"' became the newest additions as delimiters, the former two
+	 * were allowed as part of element attributes and possibly stored. Trying to recreate 
+	 * elements from such memento would cause undesirable results. Consider the following 
+	 * valid project name: (abc)
+	 * If we were to use ')' alone as the delimiter and decode the above name, the memento
+	 * would be wrongly identified to contain a lambda expression.  
+	 *
+	 * In order to differentiate delimiters from characters that are part of element attributes, 
+	 * the following escape character is being introduced and all the new delimiters must 
+	 * be escaped with this. So, a lambda expression would be written as: "=)..."
+	 * 
+	 * @see JavaElement#appendEscapedDelimiter(StringBuffer, char)
+	 */
+	public static final char JEM_DELIMITER_ESCAPE = JEM_JAVAPROJECT;
+	
 
 	/**
 	 * This element's parent, or <code>null</code> if this
@@ -133,6 +149,16 @@ public abstract class JavaElement extends PlatformObject implements IJavaElement
 		return getElementName().equals(other.getElementName()) &&
 				this.parent.equals(other.parent);
 	}
+	/**
+	 * @see #JEM_DELIMITER_ESCAPE
+	 */
+	protected void appendEscapedDelimiter(StringBuffer buffer, char delimiter) {
+		buffer.append(JEM_DELIMITER_ESCAPE);
+		buffer.append(delimiter);
+	}
+	/*
+	 * Do not add new delimiters here
+	 */
 	protected void escapeMementoName(StringBuffer buffer, String mementoName) {
 		for (int i = 0, length = mementoName.length(); i < length; i++) {
 			char character = mementoName.charAt(i);
@@ -153,9 +179,6 @@ public abstract class JavaElement extends PlatformObject implements IJavaElement
 				case JEM_LOCALVARIABLE:
 				case JEM_TYPE_PARAMETER:
 				case JEM_ANNOTATION:
-				case JEM_LAMBDA_EXPRESSION:
-				case JEM_LAMBDA_METHOD:
-				case JEM_STRING:
 					buffer.append(JEM_ESCAPE);
 			}
 			buffer.append(character);
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/LambdaExpression.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/LambdaExpression.java
index 4831432..3e40860 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/LambdaExpression.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/LambdaExpression.java
@@ -133,9 +133,9 @@ public class LambdaExpression extends SourceType {
 	protected void getHandleMemento(StringBuffer buff, boolean memoizeParent) {
 		if (memoizeParent) 
 			((JavaElement)getParent()).getHandleMemento(buff);
-		buff.append(getHandleMementoDelimiter());
+		appendEscapedDelimiter(buff, getHandleMementoDelimiter());
 		escapeMementoName(buff, this.name);
-		buff.append(JEM_STRING);
+		appendEscapedDelimiter(buff, JEM_STRING);
 		escapeMementoName(buff, this.interphase);
 		buff.append(JEM_COUNT);
 		buff.append(this.sourceStart);
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/LambdaMethod.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/LambdaMethod.java
index 40afa74..f521e36 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/LambdaMethod.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/LambdaMethod.java
@@ -133,20 +133,19 @@ public class LambdaMethod extends SourceMethod {
 	public void getHandleMemento(StringBuffer buff, boolean memoizeParent) {
 		if (memoizeParent)
 			((JavaElement) getParent()).getHandleMemento(buff);
-		char delimiter = getHandleMementoDelimiter();
-		buff.append(delimiter);
+		appendEscapedDelimiter(buff, getHandleMementoDelimiter());
 		escapeMementoName(buff, getElementName());
 		buff.append(JEM_COUNT);
 		buff.append(this.parameterTypes.length);
 		for (int i = 0, length = this.parameterTypes.length; i < length; i++) {
-			buff.append(JEM_STRING);
+			appendEscapedDelimiter(buff, JEM_STRING);
 			escapeMementoName(buff, this.parameterTypes[i]);
-			buff.append(JEM_STRING);
+			appendEscapedDelimiter(buff, JEM_STRING);
 			escapeMementoName(buff, this.parameterNameStrings[i]);
 		}
-		buff.append(JEM_STRING);
+		appendEscapedDelimiter(buff, JEM_STRING);
 		escapeMementoName(buff, this.returnTypeString);
-		buff.append(JEM_STRING);
+		appendEscapedDelimiter(buff, JEM_STRING);
 		escapeMementoName(buff, this.key);
 		ILocalVariable[] arguments = this.elementInfo.arguments;
 		for (int i = 0, length = arguments.length; i < length; i++) {
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/MementoTokenizer.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/MementoTokenizer.java
index 529c65f..06f26fb 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/MementoTokenizer.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/MementoTokenizer.java
@@ -57,6 +57,24 @@ public class MementoTokenizer {
 			case JavaElement.JEM_COUNT:
 				return COUNT;
 			case JavaElement.JEM_JAVAPROJECT:
+				// Also covers JavaElement#JEM_DELIMITER_ESCAPE, in which case, 
+				// we seek ahead by one char and check if it's an escaped delimiter
+				// and if that's true, we return that as the token. 
+				// Else, we decide that JEM_JAVAPROJECT is the current token.
+				if (this.index < this.length) {
+					char nextChar = this.memento[this.index++];
+					switch(nextChar) {
+						case JavaElement.JEM_LAMBDA_EXPRESSION:
+							return LAMBDA_EXPRESSION;
+						case JavaElement.JEM_LAMBDA_METHOD:
+							return LAMBDA_METHOD;
+						case JavaElement.JEM_STRING:
+							return STRING;
+						default:
+							this.index--;
+							break;
+					}
+				}
 				return JAVAPROJECT;
 			case JavaElement.JEM_PACKAGEFRAGMENTROOT:
 				return PACKAGEFRAGMENTROOT;
@@ -78,12 +96,6 @@ public class MementoTokenizer {
 				return PACKAGEDECLARATION;
 			case JavaElement.JEM_IMPORTDECLARATION:
 				return IMPORTDECLARATION;
-			case JavaElement.JEM_LAMBDA_EXPRESSION:
-				return LAMBDA_EXPRESSION;
-			case JavaElement.JEM_LAMBDA_METHOD:
-				return LAMBDA_METHOD;
-			case JavaElement.JEM_STRING:
-				return STRING;
 			case JavaElement.JEM_LOCALVARIABLE:
 				return LOCALVARIABLE;
 			case JavaElement.JEM_TYPE_PARAMETER:
@@ -111,9 +123,6 @@ public class MementoTokenizer {
 				case JavaElement.JEM_PACKAGEDECLARATION:
 				case JavaElement.JEM_IMPORTDECLARATION:
 				case JavaElement.JEM_LOCALVARIABLE:
-				case JavaElement.JEM_LAMBDA_EXPRESSION:
-				case JavaElement.JEM_LAMBDA_METHOD:	
-				case JavaElement.JEM_STRING:
 				case JavaElement.JEM_TYPE_PARAMETER:
 				case JavaElement.JEM_ANNOTATION:
 					break loop;

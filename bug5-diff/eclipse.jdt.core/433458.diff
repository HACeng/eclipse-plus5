commit 2e69e8a11cb05780970de056d7605d61449c8411
Author: ssankaran <srikanth_sankaran@in.ibm.com>
Date:   Mon Sep 15 12:42:54 2014 +0530

    Fixed Bug 433458 - [1.8][compiler] Eclipse accepts lambda expression
    with potentially uninitialized arguments

46	2	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
4	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/ExceptionHandlingFlowContext.java
7	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowContext.java
5	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/InitializationFlowContext.java
2	4	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
index 47a40ab..d503a62 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
@@ -6971,7 +6971,6 @@ public void test412284c() {
 				"  }\n" +
 				"}\n"
 		},
-
 		"----------\n" + 
 		"1. ERROR in X.java (at line 4)\n" + 
 		"	X(){\n" + 
@@ -6981,9 +6980,19 @@ public void test412284c() {
 		"2. ERROR in X.java (at line 7)\n" + 
 		"	t += 3;\n" + 
 		"	^\n" + 
+		"The blank final field t may not have been initialized\n" + 
+		"----------\n" + 
+		"3. ERROR in X.java (at line 7)\n" + 
+		"	t += 3;\n" + 
+		"	^\n" + 
 		"The final field X.t cannot be assigned\n" + 
 		"----------\n" + 
-		"3. ERROR in X.java (at line 9)\n" + 
+		"4. ERROR in X.java (at line 9)\n" + 
+		"	t += 4;\n" + 
+		"	^\n" + 
+		"The blank final field t may not have been initialized\n" + 
+		"----------\n" + 
+		"5. ERROR in X.java (at line 9)\n" + 
 		"	t += 4;\n" + 
 		"	^\n" + 
 		"The final field X.t cannot be assigned\n" + 
@@ -9287,6 +9296,41 @@ public void test435397() {
 		"The method module(M) is ambiguous for the type M1\n" + 
 		"----------\n");
 }
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=433458, [1.8][compiler] Eclipse accepts lambda expression with potentially uninitialized arguments
+public void test433458() {
+	this.runNegativeTest(
+		new String[] {
+			"X.java",
+			"import java.util.Comparator;\n" +
+			"public class X {\n" +
+			"    final Comparator mComparator1;\n" +
+			//"    Comparator mComparator2 = mComparator1;\n" +
+			"    Comparator mComparator2 = (pObj1, pObj2) -> mComparator1.compare(pObj1, pObj2);\n" +
+			"    X() {mComparator1 = Comparator.naturalOrder();}\n" +
+			"}\n"
+		},
+		"----------\n" + 
+		"1. WARNING in X.java (at line 3)\n" + 
+		"	final Comparator mComparator1;\n" + 
+		"	      ^^^^^^^^^^\n" + 
+		"Comparator is a raw type. References to generic type Comparator<T> should be parameterized\n" + 
+		"----------\n" + 
+		"2. WARNING in X.java (at line 4)\n" + 
+		"	Comparator mComparator2 = (pObj1, pObj2) -> mComparator1.compare(pObj1, pObj2);\n" + 
+		"	^^^^^^^^^^\n" + 
+		"Comparator is a raw type. References to generic type Comparator<T> should be parameterized\n" + 
+		"----------\n" + 
+		"3. WARNING in X.java (at line 4)\n" + 
+		"	Comparator mComparator2 = (pObj1, pObj2) -> mComparator1.compare(pObj1, pObj2);\n" + 
+		"	                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
+		"Type safety: The method compare(Object, Object) belongs to the raw type Comparator. References to generic type Comparator<T> should be parameterized\n" + 
+		"----------\n" + 
+		"4. ERROR in X.java (at line 4)\n" + 
+		"	Comparator mComparator2 = (pObj1, pObj2) -> mComparator1.compare(pObj1, pObj2);\n" + 
+		"	                                            ^^^^^^^^^^^^\n" + 
+		"The blank final field mComparator1 may not have been initialized\n" + 
+		"----------\n");
+}
 public static Class testClass() {
 	return NegativeLambdaExpressionsTest.class;
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
index 625ebde..28899ba 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
@@ -470,7 +470,7 @@ public class LambdaExpression extends FunctionalExpression implements ReferenceC
 						flowContext,
 						this,
 						this.binding.thrownExceptions,
-						null,
+						flowContext.getInitializationContext(),
 						this.scope,
 						FlowInfo.DEAD_END);
 
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/ExceptionHandlingFlowContext.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/ExceptionHandlingFlowContext.java
index bd4c004..23fb7b0 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/ExceptionHandlingFlowContext.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/ExceptionHandlingFlowContext.java
@@ -196,7 +196,10 @@ private ASTNode getExceptionType(int index) {
 	return node;
 }
 
-
+@Override
+public FlowContext getInitializationContext() {
+	return this.initializationParent;
+}
 
 public String individualToString() {
 	StringBuffer buffer = new StringBuffer("Exception flow context"); //$NON-NLS-1$
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowContext.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowContext.java
index 04a47c0..af0b19c 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowContext.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowContext.java
@@ -607,6 +607,13 @@ public FlowContext getTargetContextForDefaultContinue() {
 }
 
 /** 
+ * Answer flow context that corresponds to initialization. Suitably override in subtypes.
+ */
+public FlowContext getInitializationContext() {
+	return null;
+}
+
+/** 
  * Answer the parent flow context but be careful not to cross the boundary of a nested type,
  * or null if no such parent exists. 
  */
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/InitializationFlowContext.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/InitializationFlowContext.java
index 9261ae1..86826d1 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/InitializationFlowContext.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/InitializationFlowContext.java
@@ -51,6 +51,11 @@ public class InitializationFlowContext extends ExceptionHandlingFlowContext {
 		}
 	}
 
+	@Override
+	public FlowContext getInitializationContext() {
+		return this;
+	}
+	
 	public String individualToString() {
 
 		StringBuffer buffer = new StringBuffer("Initialization flow context"); //$NON-NLS-1$
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java
index de2ea5f..139e5c5 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java
@@ -942,12 +942,10 @@ public final boolean needBlankFinalFieldInitializationCheck(FieldBinding binding
 	boolean isStatic = binding.isStatic();
 	ReferenceBinding fieldDeclaringClass = binding.declaringClass;
 	// loop in enclosing context, until reaching the field declaring context
-	MethodScope methodScope = methodScope();
+	MethodScope methodScope = namedMethodScope();
 	while (methodScope != null) {
 		if (methodScope.isStatic != isStatic)
 			return false;
-		if (methodScope.isLambdaScope())
-			return false;
 		if (!methodScope.isInsideInitializer() // inside initializer
 				&& !((AbstractMethodDeclaration) methodScope.referenceContext).isInitializationMethod()) { // inside constructor or clinit
 			return false; // found some non-initializer context
@@ -959,7 +957,7 @@ public final boolean needBlankFinalFieldInitializationCheck(FieldBinding binding
 		if (!enclosingType.erasure().isAnonymousType()) {
 			return false; // only check inside anonymous type
 		}
-		methodScope = methodScope.enclosingMethodScope();
+		methodScope = methodScope.enclosingMethodScope().namedMethodScope();
 	}
 	return false;
 }

commit 592b135627e5a06d1b39aee23540f897beee493f
Author: ssankaran <srikanth_sankaran@in.ibm.com>
Date:   Fri Feb 28 03:07:16 2014 +0530

    Fixed Bug 429262 - [1.8][code select] Hover/navigation support at ->
    and ::

171	0	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests18.java
30	2	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
44	0	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnLambdaExpression.java
36	0	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnReferenceExpression.java
26	0	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionParser.java
2	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java
2	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
5	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
4	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java
1	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/LambdaExpression.java
1	1	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests18.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests18.java
index a77cd32..e8c3451 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests18.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests18.java
@@ -1987,4 +1987,175 @@ public void test424198c() throws JavaModelException {
 		true
 	);
 }
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=429262,  [1.8][code select] Hover/navigation support at -> and ::
+public void test429262() throws JavaModelException {
+	this.wc = getWorkingCopy(
+			"/Resolve/src/X.java",
+			"class Y {\n" +
+			"    static void goo(I i) {}\n" +
+			"}\n" +
+			"public class X {\n" +
+			"    public static void main(String [] args) {\n" +
+			"        Y.goo(x -> x * x);\n" +
+			"    }\n" +
+			"}\n" +
+			"interface I {\n" +
+			"	int foo(int x);\n" +
+			"}\n");
+
+	String str = this.wc.getSource();
+	String selection = "->";
+	int start = str.indexOf(selection);
+	int length = selection.length();
+
+	IJavaElement[] elements = this.wc.codeSelect(start, length);
+	assertElementsEqual(
+		"Unexpected elements",
+		"foo(int) [in I [in [Working copy] X.java [in <default> [in src [in Resolve]]]]]",
+		elements
+	);
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=429262,  [1.8][code select] Hover/navigation support at -> and ::
+public void test429262a() throws JavaModelException {
+	this.wc = getWorkingCopy(
+			"/Resolve/src/X.java",
+			"class Y {\n" +
+			"    static void goo(I i) {}\n" +
+			"}\n" +
+			"public class X {\n" +
+			"    public static void main(String [] args) {\n" +
+			"        Y.goo(x -> x * x);\n" +
+			"    }\n" +
+			"}\n" +
+			"interface I {\n" +
+			"	int foo(int x);\n" +
+			"}\n");
+
+	String str = this.wc.getSource();
+	String selection = ">";
+	int start = str.indexOf(selection);
+	int length = selection.length();
+
+	IJavaElement[] elements = this.wc.codeSelect(start, length);
+	assertElementsEqual(
+		"Unexpected elements",
+		"foo(int) [in I [in [Working copy] X.java [in <default> [in src [in Resolve]]]]]",
+		elements
+	);
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=429262,  [1.8][code select] Hover/navigation support at -> and ::
+public void test429262b() throws JavaModelException {
+	this.wc = getWorkingCopy(
+			"/Resolve/src/X.java",
+			"class Y {\n" +
+			"    static void goo(I i) {}\n" +
+			"}\n" +
+			"public class X {\n" +
+			"    public static void main(String [] args) {\n" +
+			"        Y.goo(x -> x * x);\n" +
+			"    }\n" +
+			"}\n" +
+			"interface I {\n" +
+			"	int foo(int x);\n" +
+			"}\n");
+
+	String str = this.wc.getSource();
+	String selection = "-";
+	int start = str.indexOf(selection);
+	int length = selection.length();
+
+	IJavaElement[] elements = this.wc.codeSelect(start, length);
+	assertElementsEqual(
+		"Unexpected elements",
+		"foo(int) [in I [in [Working copy] X.java [in <default> [in src [in Resolve]]]]]",
+		elements
+	);
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=429262,  [1.8][code select] Hover/navigation support at -> and ::
+public void test429262c() throws JavaModelException {
+	this.wc = getWorkingCopy(
+			"/Resolve/src/X.java",
+			"class Y {\n" +
+			"    static void goo(I i) {}\n" +
+			"}\n" +
+			"public class X {\n" +
+			"    static int zoo(int x) { return x; }\n" +
+			"    public static void main(String [] args) {\n" +
+			"        Y.goo(X::zoo);\n" +
+			"    }\n" +
+			"}\n" +
+			"interface I {\n" +
+			"	int foo(int x);\n" +
+			"}\n");
+
+	String str = this.wc.getSource();
+	String selection = "::";
+	int start = str.indexOf(selection);
+	int length = selection.length();
+
+	IJavaElement[] elements = this.wc.codeSelect(start, length);
+	assertElementsEqual(
+		"Unexpected elements",
+		"foo(int) [in I [in [Working copy] X.java [in <default> [in src [in Resolve]]]]]",
+		elements
+	);
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=429262,  [1.8][code select] Hover/navigation support at -> and ::
+public void test429262d() throws JavaModelException {
+	this.wc = getWorkingCopy(
+			"/Resolve/src/X.java",
+			"class Y {\n" +
+			"    static void goo(I i) {}\n" +
+			"}\n" +
+			"public class X {\n" +
+			"    static int zoo(int x) { return x; }\n" +
+			"    public static void main(String [] args) {\n" +
+			"        Y.goo(X::zoo);\n" +
+			"    }\n" +
+			"}\n" +
+			"interface I {\n" +
+			"	int foo(int x);\n" +
+			"}\n");
+
+	String str = this.wc.getSource();
+	String selection = ":";
+	int start = str.indexOf(selection);
+	int length = selection.length();
+
+	IJavaElement[] elements = this.wc.codeSelect(start, length);
+	assertElementsEqual(
+		"Unexpected elements",
+		"foo(int) [in I [in [Working copy] X.java [in <default> [in src [in Resolve]]]]]",
+		elements
+	);
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=429262,  [1.8][code select] Hover/navigation support at -> and ::
+public void test429262e() throws JavaModelException {
+	this.wc = getWorkingCopy(
+			"/Resolve/src/X.java",
+			"class Y {\n" +
+			"    static void goo(I i) {}\n" +
+			"}\n" +
+			"public class X {\n" +
+			"    static int zoo(int x) { return x; }\n" +
+			"    public static void main(String [] args) {\n" +
+			"        Y.goo(X::zoo);\n" +
+			"    }\n" +
+			"}\n" +
+			"interface I {\n" +
+			"	int foo(int x);\n" +
+			"}\n");
+
+	String str = this.wc.getSource();
+	String selection = ":";
+	int start = str.lastIndexOf(selection);
+	int length = selection.length();
+
+	IJavaElement[] elements = this.wc.codeSelect(start, length);
+	assertElementsEqual(
+		"Unexpected elements",
+		"foo(int) [in I [in [Working copy] X.java [in <default> [in src [in Resolve]]]]]",
+		elements
+	);
+}
 }
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
index a4add88..c769f11 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2013 IBM Corporation and others.
+ * Copyright (c) 2000, 2014 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -504,7 +504,7 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 				null/*taskPriorities*/,
 				true /*taskCaseSensitive*/);
 		scanner.setSource(source);
-
+		
 		int lastIdentifierStart = -1;
 		int lastIdentifierEnd = -1;
 		char[] lastIdentifier = null;
@@ -597,6 +597,19 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 				}
 			} while (token != TerminalTokens.TokenNameEOF);
 		} else {
+			if (selectionStart == selectionEnd) { // Widen the selection to scan -> || :: if needed. No unicode handling for now.
+				if (selectionStart > 0 && selectionEnd < source.length - 1) {
+					if ((source[selectionStart] == '>' && source[selectionStart - 1] == '-') ||
+							source[selectionStart] == ':' && source[selectionStart - 1] == ':') { 
+						selectionStart--;
+					} else {
+						if ((source[selectionStart] == '-' && source[selectionEnd + 1] == '>') ||
+								source[selectionStart] == ':' && source[selectionEnd + 1] == ':') {
+							selectionEnd++;
+						}
+					}
+				}  
+			} // there could be some innocuous widening, shouldn't matter.
 			scanner.resetTo(selectionStart, selectionEnd);
 
 			boolean expectingIdentifier = true;
@@ -623,6 +636,13 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 						expectingIdentifier = false;
 						break;
 					case TerminalTokens.TokenNameCOLON_COLON:	
+						if (selectionStart >= scanner.startPosition && selectionEnd < scanner.currentPosition) {
+							this.actualSelectionStart = selectionStart;
+							this.actualSelectionEnd = selectionEnd;
+							this.selectedIdentifier = CharOperation.NO_CHAR;
+							return true;		
+						}
+						//$FALL-THROUGH$
 					case TerminalTokens.TokenNameDOT :
 						if (expectingIdentifier)
 							return false;
@@ -640,6 +660,14 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 						if(scanner.startPosition != scanner.initialPosition)
 							return false;
 						break;
+					case TerminalTokens.TokenNameARROW:
+						if (selectionStart >= scanner.startPosition && selectionEnd < scanner.currentPosition) {
+							this.actualSelectionStart = selectionStart;
+							this.actualSelectionEnd = selectionEnd;
+							this.selectedIdentifier = CharOperation.NO_CHAR;
+							return true;		
+						}
+						return false;
 					default :
 						return false;
 				}
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnLambdaExpression.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnLambdaExpression.java
new file mode 100644
index 0000000..ce03713
--- /dev/null
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnLambdaExpression.java
@@ -0,0 +1,44 @@
+/*******************************************************************************
+ * Copyright (c) 2014 IBM Corporation and others.
+ * 
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ */
+
+package org.eclipse.jdt.internal.codeassist.select;
+
+import org.eclipse.jdt.internal.compiler.ast.LambdaExpression;
+import org.eclipse.jdt.internal.compiler.lookup.BlockScope;
+import org.eclipse.jdt.internal.compiler.lookup.TypeBinding;
+
+public class SelectionOnLambdaExpression extends LambdaExpression {
+	public SelectionOnLambdaExpression(LambdaExpression expression) {
+		// Where is object derivation when I need it ???
+		super(expression.compilationResult(), true);
+		// copy all state created by the parser.
+		this.sourceStart = expression.sourceStart;
+		this.sourceEnd = expression.sourceEnd;
+		this.hasParentheses = expression.hasParentheses;
+		this.statementEnd = expression.statementEnd;
+		this.setBody(expression.body());
+		this.setArguments(expression.arguments());
+		this.setArrowPosition(expression.arrowPosition());
+	}
+	@Override
+	public TypeBinding resolveType(BlockScope blockScope) {
+		TypeBinding resolveType = super.resolveType(blockScope);
+		if (this.expectedType != null && this.original == this) {  // final resolution.
+			throw new SelectionNodeFound(this.descriptor);
+		}
+		return resolveType;
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnReferenceExpression.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnReferenceExpression.java
new file mode 100644
index 0000000..02804cc
--- /dev/null
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionOnReferenceExpression.java
@@ -0,0 +1,36 @@
+/*******************************************************************************
+ * Copyright (c) 2014 IBM Corporation and others.
+ * 
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ */
+
+package org.eclipse.jdt.internal.codeassist.select;
+
+import org.eclipse.jdt.internal.compiler.ast.ReferenceExpression;
+import org.eclipse.jdt.internal.compiler.lookup.BlockScope;
+import org.eclipse.jdt.internal.compiler.lookup.TypeBinding;
+
+public class SelectionOnReferenceExpression extends ReferenceExpression {
+	
+	public SelectionOnReferenceExpression(ReferenceExpression referenceExpression) {
+		initialize(referenceExpression.compilationResult, referenceExpression.lhs, referenceExpression.typeArguments, referenceExpression.selector, referenceExpression.sourceEnd);
+	}
+	
+	@Override
+	public TypeBinding resolveType(BlockScope scope) {
+		TypeBinding resolveType = super.resolveType(scope);
+		if (this.expectedType != null && !this.trialResolution)
+			throw new SelectionNodeFound(this.descriptor);
+		return resolveType;
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionParser.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionParser.java
index d7e2492..5342f03 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionParser.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionParser.java
@@ -40,6 +40,7 @@ import org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall;
 import org.eclipse.jdt.internal.compiler.ast.Expression;
 import org.eclipse.jdt.internal.compiler.ast.FieldReference;
 import org.eclipse.jdt.internal.compiler.ast.ImportReference;
+import org.eclipse.jdt.internal.compiler.ast.LambdaExpression;
 import org.eclipse.jdt.internal.compiler.ast.LocalDeclaration;
 import org.eclipse.jdt.internal.compiler.ast.MarkerAnnotation;
 import org.eclipse.jdt.internal.compiler.ast.MemberValuePair;
@@ -759,6 +760,31 @@ protected void consumeInstanceOfExpressionWithName() {
 		this.lastIgnoredToken = -1;
 	}
 }
+@Override
+protected void consumeLambdaExpression() {
+	super.consumeLambdaExpression();
+	LambdaExpression expression = (LambdaExpression) this.expressionStack[this.expressionPtr];
+	int arrowEnd = expression.arrowPosition();
+	int arrowStart = arrowEnd - 1;
+	if (this.selectionStart == arrowStart || this.selectionStart == arrowEnd) {
+		if (this.selectionEnd == arrowStart || this.selectionEnd == arrowEnd) {
+			this.expressionStack[this.expressionPtr] = new SelectionOnLambdaExpression(expression);
+		}
+	}
+}
+@Override
+protected void consumeReferenceExpression(ReferenceExpression referenceExpression) {
+	int kolonKolonStart = this.colonColonStart;
+	int kolonKolonEnd = kolonKolonStart + 1;
+	this.colonColonStart = -1;
+	if (this.selectionStart == kolonKolonStart || this.selectionStart == kolonKolonEnd) {
+		if (this.selectionEnd == kolonKolonStart || this.selectionEnd == kolonKolonEnd) {
+			referenceExpression = new SelectionOnReferenceExpression(referenceExpression);
+		}
+	}
+	super.consumeReferenceExpression(referenceExpression);
+}
+
 protected void consumeLocalVariableDeclarationStatement() {
 	super.consumeLocalVariableDeclarationStatement();
 
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java
index 7b393ab..7c408bd 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java
@@ -49,7 +49,7 @@ import org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding;
 
 public abstract class FunctionalExpression extends Expression {
 	
-	TypeBinding expectedType;
+	protected TypeBinding expectedType;
 	public MethodBinding descriptor;
 	public MethodBinding binding;                 // Code generation binding. May include synthetics. See getMethodBinding()
 	protected MethodBinding actualMethodBinding;  // void of synthetics.
@@ -57,7 +57,7 @@ public abstract class FunctionalExpression extends Expression {
 	protected ExpressionContext expressionContext = VANILLA_CONTEXT;
 	static Expression [] NO_EXPRESSIONS = new Expression[0];
 	protected Expression [] resultExpressions = NO_EXPRESSIONS;
-	protected CompilationResult compilationResult;
+	public CompilationResult compilationResult;
 	public BlockScope enclosingScope;
 	protected boolean ellipsisArgument;
 	public int bootstrapMethodNumber = -1;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
index 3e3dc4d..759745e 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
@@ -105,7 +105,7 @@ public class LambdaExpression extends FunctionalExpression implements ReferenceC
 	boolean returnsValue;
 	public boolean isSerializable;
 	boolean returnsVoid;
-	private LambdaExpression original = this;
+	protected LambdaExpression original = this;
 	public SyntheticArgumentBinding[] outerLocalVariables = NO_SYNTHETIC_ARGUMENTS;
 	private int outerLocalVariablesSlotSize = 0;
 	public boolean shouldCaptureInstance = false;
@@ -152,7 +152,7 @@ public class LambdaExpression extends FunctionalExpression implements ReferenceC
 		this.arrowPosition = arrowPosition;
 	}
 	
-	public int getArrowPosition() {
+	public int arrowPosition() {
 		return this.arrowPosition;
 	}
 	
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
index 262150f..4142915 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
@@ -86,6 +86,7 @@ public class ReferenceExpression extends FunctionalExpression implements Invocat
 	private int depth;
 	private MethodBinding exactMethodBinding; // != null ==> exact method reference.
 	private boolean receiverPrecedesParameters = false;
+	protected boolean trialResolution = false;
 	
 	public ReferenceExpression() {
 		super();
@@ -654,6 +655,7 @@ public class ReferenceExpression extends FunctionalExpression implements Invocat
 			setExpressionContext(INVOCATION_CONTEXT);
 			setExpectedType(targetType);
 			this.binding = null;
+			this.trialResolution = true;
 			resolveType(this.enclosingScope);
 			return this.binding;
 		} finally {
@@ -664,6 +666,7 @@ public class ReferenceExpression extends FunctionalExpression implements Invocat
 			this.resolvedType = previousResolvedType;
 			setExpressionContext(previousContext);
 			this.expectedType = null; // don't call setExpectedType(null), would NPE
+			this.trialResolution = false;
 		}
 	}
 
@@ -781,12 +784,14 @@ public class ReferenceExpression extends FunctionalExpression implements Invocat
 		IErrorHandlingPolicy oldPolicy = this.enclosingScope.problemReporter().switchErrorHandlingPolicy(silentErrorHandlingPolicy);
 		try {
 			this.binding = null;
+			this.trialResolution = true;
 			resolveType(this.enclosingScope);
 		} finally {
 			this.enclosingScope.problemReporter().switchErrorHandlingPolicy(oldPolicy);
 			isCompatible = this.binding != null && this.binding.isValidBinding();
 			this.binding = null;
 			setExpectedType(null);
+			this.trialResolution = false;
 		}
 		return isCompatible;
 	}
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java
index 491caed..5cce4d0 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java
@@ -957,6 +957,7 @@ public class Parser extends CommitRollbackParser implements ConflictedParser, Op
 	protected int lParenPos,rParenPos; //accurate only when used !
 	protected int modifiers;
 	protected int modifiersSourceStart;
+	protected int colonColonStart = -1;
 	protected int[] nestedMethod; //the ptr is nestedType
 
 	protected int nestedType, dimensions;
@@ -8794,6 +8795,9 @@ protected void consumeToken(int type) {
 		case TokenNameARROW:
 			consumeLambdaHeader();
 			break;
+		case TokenNameCOLON_COLON:
+			this.colonColonStart = this.scanner.currentPosition - 2;
+			break;
 		case TokenNameBeginLambda:
 			flushCommentsDefinedPriorTo(this.scanner.currentPosition);
 			break;
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/LambdaExpression.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/LambdaExpression.java
index c9347ff..c061d0a 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/LambdaExpression.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/LambdaExpression.java
@@ -108,7 +108,7 @@ public class LambdaExpression extends SourceType {
 
 	@Override
 	public ISourceRange getNameRange() throws JavaModelException {
-		return new SourceRange(this.lambdaExpression.sourceStart, this.lambdaExpression.getArrowPosition() - this.lambdaExpression.sourceStart + 1);
+		return new SourceRange(this.lambdaExpression.sourceStart, this.lambdaExpression.arrowPosition() - this.lambdaExpression.sourceStart + 1);
 	}
 
 	@Override
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java
index a6bf3c8..9d91647 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MatchLocator.java
@@ -2212,7 +2212,7 @@ protected void reportMatching(LambdaExpression lambdaExpression,  IJavaElement p
 			int nameSourceStart = lambdaExpression.sourceStart;
 			if (encloses(enclosingElement)) {
 				SearchMatch match = null;
-				int length = lambdaExpression.getArrowPosition() + 1 - nameSourceStart;
+				int length = lambdaExpression.arrowPosition() + 1 - nameSourceStart;
 				match = this.patternLocator.newDeclarationMatch(lambdaExpression, enclosingElement, null, accuracy, length, this);
 				if (match != null) {
 					report(match);

commit 01c814e6bd45b7fbd49eec3a490338a17c21d9fb
Author: ssankaran <srikanth_sankaran@in.ibm.com>
Date:   Sun Oct 20 19:22:44 2013 +0530

    Fixed Bug 419918 - [1.8][compiler] Annotations are not restored from
    class files in a few situations

141	0	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/TypeBindingTests308.java
22	13	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/TypeAnnotationWalker.java
39	39	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java
23	6	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java
1	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java
12	1	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IMethodBinding.java
6	0	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/TypeBindingTests308.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/TypeBindingTests308.java
index 7e511c9..1642e2c 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/TypeBindingTests308.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/TypeBindingTests308.java
@@ -1932,4 +1932,145 @@ public class TypeBindingTests308 extends ConverterTestSetup {
 		assertTrue("Should be just 1", typeAnnotations.length == 1);
 		assertEquals("Incorrect annotation", "@SillyAnnotation()", typeAnnotations[0].toString());
 	}
+	// https://bugs.eclipse.org/bugs/show_bug.cgi?id=419918, [1.8][compiler] Annotations are not restored from class files in a few situations.
+	public void testBinaryWithoutGenericSignature() throws CoreException, IOException {
+		String jarName = "TypeBindingTests308.jar";
+		String srcName = "TypeBindingTests308_src.zip";
+		final IJavaProject javaProject = getJavaProject("Converter18");
+		try {
+			String[] pathAndContents = new String[] {
+				"Superclass.java",
+				"import java.lang.annotation.ElementType;\n" +
+				"import java.lang.annotation.Target;\n" +
+				"@Target(ElementType.TYPE_USE)\n" +
+				"@interface T {\n" +
+				"	int value() default 0;\n" +
+				"}\n" +
+				"@T(1)\n" +
+				"public abstract class Superclass extends @T(2) Object implements @T(3) Runnable {\n" +
+				"	Object @T(4) [] field;\n" +
+				"	@T(5)\n" +
+				"	public String run(@T(6) Superclass this, Object @T(7) [] that) throws @T(8) NullPointerException {\n" +
+				"		return null;\n" +
+				"	}\n" +
+				"   @T(9)\n" +
+				"   Superclass () {}\n" +
+				"   @T(10)\n" +
+				"   class Inner {}\n" +
+				"}\n"
+			};
+			
+			HashMap libraryOptions = new HashMap(javaProject.getOptions(true));
+			libraryOptions.put(CompilerOptions.OPTION_Store_Annotations, CompilerOptions.ENABLED);
+			addLibrary(javaProject, jarName, srcName, pathAndContents, JavaCore.VERSION_1_8, libraryOptions);
+			
+			String contents = 
+					"@T(21)\n" +
+					"public abstract class X extends @T(22) Superclass implements @T(23) Runnable {\n" +
+					"	Object @T(24) [] field;\n" +
+					"	@T(25)\n" +
+					"	public String run(@T(26) X this, Object @T(27) [] that) throws @T(28) NullPointerException {\n" +
+					"		return null;\n" +
+					"	}\n" +
+					"   @T(29)\n" +
+					"   X() {\n" +
+		            "   }" +
+					"   @T(30)\n" +
+					"   class Inner {\n" +
+					"   }\n" +
+					"}\n";
+			
+			this.workingCopy = getWorkingCopy("/Converter18/src/X.java", true);
+			ASTNode node = buildAST(contents, this.workingCopy);
+			assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, node.getNodeType());
+			CompilationUnit compilationUnit = (CompilationUnit) node;
+			assertProblemsSize(compilationUnit, 0);
+			List types = compilationUnit.types();
+			assertEquals("Incorrect no of types", 1, types.size());
+			TypeDeclaration typeDecl = (TypeDeclaration) types.get(0);
+			ITypeBinding typeBinding = typeDecl.resolveBinding();
+			IAnnotationBinding[] annotations = typeBinding.getAnnotations();
+			assertTrue("Should be 1", annotations.length == 1);
+			assertEquals("Annotation mismatch", "@T(value = 21)", annotations[0].toString());
+			annotations = typeBinding.getSuperclass().getTypeAnnotations();
+			assertTrue("Should be 1", annotations.length == 1);
+			assertEquals("Annotation mismatch", "@T(value = 22)", annotations[0].toString());
+			annotations = typeBinding.getInterfaces()[0].getTypeAnnotations();
+			assertTrue("Should be 1", annotations.length == 1);
+			assertEquals("Annotation mismatch", "@T(value = 23)", annotations[0].toString());
+			
+			annotations = typeDecl.getFields()[0].getType().resolveBinding().getTypeAnnotations();
+			assertTrue("Should be 1", annotations.length == 1);
+			assertEquals("Annotation mismatch", "@T(value = 24)", annotations[0].toString());
+			
+			annotations = typeDecl.getMethods()[0].getReturnType2().resolveBinding().getTypeAnnotations();
+			assertTrue("Should be 1", annotations.length == 1);
+			assertEquals("Annotation mismatch", "@T(value = 25)", annotations[0].toString());
+			
+			annotations = typeDecl.getMethods()[0].getReceiverType().resolveBinding().getTypeAnnotations();
+			assertTrue("Should be 1", annotations.length == 1);
+			assertEquals("Annotation mismatch", "@T(value = 26)", annotations[0].toString());
+			
+			annotations = ((SingleVariableDeclaration) (typeDecl.getMethods()[0].parameters().get(0))).getType().resolveBinding().getTypeAnnotations();
+			assertTrue("Should be 1", annotations.length == 1);
+			assertEquals("Annotation mismatch", "@T(value = 27)", annotations[0].toString());
+			
+			annotations = ((Type) typeDecl.getMethods()[0].thrownExceptionTypes().get(0)).resolveBinding().getTypeAnnotations();
+			assertTrue("Should be 1", annotations.length == 1);
+			assertEquals("Annotation mismatch", "@T(value = 28)", annotations[0].toString());
+			
+			annotations = typeDecl.getMethods()[1].resolveBinding().getAnnotations();
+			assertTrue("Should be 1", annotations.length == 1);
+			assertEquals("Annotation mismatch", "@T(value = 29)", annotations[0].toString());
+			
+			annotations = typeDecl.getTypes()[0].resolveBinding().getAnnotations();
+			assertTrue("Should be 1", annotations.length == 1);
+			assertEquals("Annotation mismatch", "@T(value = 30)", annotations[0].toString());
+			
+			
+			// Check the same set of things for the binary type.
+			annotations = typeBinding.getSuperclass().getAnnotations();
+			assertTrue("Should be 1", annotations.length == 1);
+			assertEquals("Annotation mismatch", "@T(value = 1)", annotations[0].toString());
+			
+			annotations = typeBinding.getSuperclass().getSuperclass().getTypeAnnotations();
+			assertTrue("Should be 1", annotations.length == 1);
+			assertEquals("Annotation mismatch", "@T(value = 2)", annotations[0].toString());
+			
+			annotations = typeBinding.getSuperclass().getInterfaces()[0].getTypeAnnotations();
+			assertTrue("Should be 1", annotations.length == 1);
+			assertEquals("Annotation mismatch", "@T(value = 3)", annotations[0].toString());
+			
+			annotations = typeBinding.getSuperclass().getDeclaredFields()[0].getType().getTypeAnnotations();
+			assertTrue("Should be 1", annotations.length == 1);
+			assertEquals("Annotation mismatch", "@T(value = 4)", annotations[0].toString());
+			
+			// Skip past the constructor at [0]
+			annotations = typeBinding.getSuperclass().getDeclaredMethods()[1].getReturnType().getTypeAnnotations();
+			assertTrue("Should be 1", annotations.length == 1);
+			assertEquals("Annotation mismatch", "@T(value = 5)", annotations[0].toString());
+			
+			annotations = typeBinding.getSuperclass().getDeclaredMethods()[1].getDeclaredReceiverType().getTypeAnnotations();
+			assertTrue("Should be 1", annotations.length == 1);
+			assertEquals("Annotation mismatch", "@T(value = 6)", annotations[0].toString());
+			
+			annotations = typeBinding.getSuperclass().getDeclaredMethods()[1].getParameterTypes()[0].getTypeAnnotations();
+			assertTrue("Should be 1", annotations.length == 1);
+			assertEquals("Annotation mismatch", "@T(value = 7)", annotations[0].toString());
+			
+			annotations = typeBinding.getSuperclass().getDeclaredMethods()[1].getExceptionTypes()[0].getTypeAnnotations();
+			assertTrue("Should be 1", annotations.length == 1);
+			assertEquals("Annotation mismatch", "@T(value = 8)", annotations[0].toString());
+			
+			annotations = typeBinding.getSuperclass().getDeclaredMethods()[0].getAnnotations();
+			assertTrue("Should be 1", annotations.length == 1);
+			assertEquals("Annotation mismatch", "@T(value = 9)", annotations[0].toString());
+			
+			annotations = typeBinding.getSuperclass().getDeclaredTypes()[0].getAnnotations();
+			assertTrue("Should be 1", annotations.length == 1);
+			assertEquals("Annotation mismatch", "@T(value = 10)", annotations[0].toString());
+		} finally {
+			removeLibrary(javaProject, jarName, srcName);
+		}
+	}
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/TypeAnnotationWalker.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/TypeAnnotationWalker.java
index e77920b..b796d99 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/TypeAnnotationWalker.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/TypeAnnotationWalker.java
@@ -100,7 +100,8 @@ public class TypeAnnotationWalker {
 		if (newMatches == 0)
 			return EMPTY_ANNOTATION_WALKER;
 		int length = this.typeAnnotations.length;
-		for (int i = 0, mask = 1; i < length; i++, mask = mask << 1) {
+		long mask = 1;
+		for (int i = 0; i < length; i++, mask = mask << 1) {
 			if (this.typeAnnotations[i].getTargetType() != targetType)
 				newMatches &= ~mask;
 		}
@@ -118,7 +119,8 @@ public class TypeAnnotationWalker {
 			return EMPTY_ANNOTATION_WALKER;
 		int targetType = isClassTypeParameter ? AnnotationTargetTypeConstants.CLASS_TYPE_PARAMETER : AnnotationTargetTypeConstants.METHOD_TYPE_PARAMETER;
 		int length = this.typeAnnotations.length;
-		for (int i = 0, mask = 1; i < length; i++, mask = mask << 1) {
+		long mask = 1;
+		for (int i = 0; i < length; i++, mask = mask << 1) {
 			IBinaryTypeAnnotation candidate = this.typeAnnotations[i];
 			if (candidate.getTargetType() != targetType || candidate.getTypeParameterIndex() != rank) {
 				newMatches &= ~mask;
@@ -140,7 +142,8 @@ public class TypeAnnotationWalker {
 		int length = this.typeAnnotations.length;
 		int targetType = isClassTypeParameter ?
 				AnnotationTargetTypeConstants.CLASS_TYPE_PARAMETER_BOUND : AnnotationTargetTypeConstants.METHOD_TYPE_PARAMETER_BOUND;
-		for (int i = 0, mask = 1; i < length; i++, mask = mask << 1) {
+		long mask = 1;
+		for (int i = 0; i < length; i++, mask = mask << 1) {
 			IBinaryTypeAnnotation candidate = this.typeAnnotations[i];
 			if (candidate.getTargetType() != targetType || (short)candidate.getTypeParameterIndex() != parameterRank) {
 				newMatches &= ~mask;
@@ -158,7 +161,8 @@ public class TypeAnnotationWalker {
 		if (newMatches == 0)
 			return EMPTY_ANNOTATION_WALKER;
 		int length = this.typeAnnotations.length;
-		for (int i = 0, mask = 1; i < length; i++, mask = mask << 1) {
+		long mask = 1;
+		for (int i = 0; i < length; i++, mask = mask << 1) {
 			IBinaryTypeAnnotation candidate = this.typeAnnotations[i];
 			if ((short)candidate.getBoundIndex() != boundIndex) {
 				newMatches &= ~mask;
@@ -174,7 +178,8 @@ public class TypeAnnotationWalker {
 		if (newMatches == 0)
 			return EMPTY_ANNOTATION_WALKER;
 		int length = this.typeAnnotations.length;
-		for (int i = 0, mask = 1; i < length; i++, mask = mask << 1) {
+		long mask = 1;
+		for (int i = 0; i < length; i++, mask = mask << 1) {
 			IBinaryTypeAnnotation candidate = this.typeAnnotations[i];
 			if (candidate.getTargetType() != AnnotationTargetTypeConstants.CLASS_EXTENDS || (short)candidate.getSupertypeIndex() != index) {
 				newMatches &= ~mask;
@@ -189,7 +194,8 @@ public class TypeAnnotationWalker {
 		if (newMatches == 0)
 			return EMPTY_ANNOTATION_WALKER;
 		int length = this.typeAnnotations.length;
-		for (int i = 0, mask = 1; i < length; i++, mask = mask << 1) {
+		long mask = 1;
+		for (int i = 0; i < length; i++, mask = mask << 1) {
 			IBinaryTypeAnnotation candidate = this.typeAnnotations[i];
 			if (candidate.getTargetType() != AnnotationTargetTypeConstants.METHOD_FORMAL_PARAMETER || (short)candidate.getMethodFormalParameterIndex() != index) {
 				newMatches &= ~mask;
@@ -200,16 +206,16 @@ public class TypeAnnotationWalker {
 
 	/**
 	 * Walk to the throws type at the given index.
-	 * Note: Type annotations on throws are not currently used by the compiler.
 	 */
 	public TypeAnnotationWalker toThrows(int index) {
 		long newMatches = this.matches;
 		if (newMatches == 0)
 			return EMPTY_ANNOTATION_WALKER;
 		int length = this.typeAnnotations.length;
-		for (int i = 0, mask = 1; i < length; i++, mask = mask << 1) {
+		long mask = 1;
+		for (int i = 0; i < length; i++, mask = mask << 1) {
 			IBinaryTypeAnnotation candidate = this.typeAnnotations[i];
-			if (candidate.getTargetType() != AnnotationTargetTypeConstants.EXCEPTION_PARAMETER || candidate.getThrowsTypeIndex() != index) {
+			if (candidate.getTargetType() != AnnotationTargetTypeConstants.THROWS || candidate.getThrowsTypeIndex() != index) {
 				newMatches &= ~mask;
 			}
 		}
@@ -225,7 +231,8 @@ public class TypeAnnotationWalker {
 		if (newMatches == 0)
 			return EMPTY_ANNOTATION_WALKER;
 		int length = this.typeAnnotations.length;
-		for (int i = 0, mask = 1; i < length; i++, mask = mask << 1) {
+		long mask = 1;
+		for (int i = 0; i < length; i++, mask = mask << 1) {
 			IBinaryTypeAnnotation candidate = this.typeAnnotations[i];
 			int[] path = candidate.getTypePath();
 			if (this.pathPtr >= path.length 
@@ -243,7 +250,8 @@ public class TypeAnnotationWalker {
 		if (newMatches == 0)
 			return EMPTY_ANNOTATION_WALKER;
 		int length = this.typeAnnotations.length;
-		for (int i = 0, mask = 1; i < length; i++, mask = mask << 1) {
+		long mask = 1;
+		for (int i = 0; i < length; i++, mask = mask << 1) {
 			IBinaryTypeAnnotation candidate = this.typeAnnotations[i];
 			int[] path = candidate.getTypePath();
 			if (this.pathPtr >= path.length 
@@ -277,7 +285,8 @@ public class TypeAnnotationWalker {
 		if (newMatches == 0)
 			return EMPTY_ANNOTATION_WALKER;
 		int length = this.typeAnnotations.length;
-		for (int i = 0, mask = 1; i < length; i++, mask = mask << 1) {
+		long mask = 1;
+		for (int i = 0; i < length; i++, mask = mask << 1) {
 			IBinaryTypeAnnotation candidate = this.typeAnnotations[i];
 			int[] path = candidate.getTypePath();
 			if (this.pathPtr >= path.length || path[this.pathPtr] != detailKind) {
@@ -296,7 +305,7 @@ public class TypeAnnotationWalker {
 	public IBinaryAnnotation[] getAnnotationsAtCursor() {
 		int length = this.typeAnnotations.length;
 		IBinaryAnnotation[] filtered = new IBinaryAnnotation[length];
-		int ptr = 1;
+		long ptr = 1;
 		int count = 0;
 		for (int i = 0; i < length; i++, ptr<<=1) {
 			if ((this.matches & ptr) == 0)
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java
index 0d66261..29a7b7c 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java
@@ -109,6 +109,19 @@ static Object convertMemberValue(Object binaryValue, LookupEnvironment env, char
 public TypeBinding clone(TypeBinding outerType) {
 	BinaryTypeBinding copy = new BinaryTypeBinding(this);
 	copy.enclosingType = (ReferenceBinding) outerType;
+	
+	/* BinaryTypeBinding construction is not "atomic" and is split between the constructor and cachePartsFrom and between the two
+	   stages of construction, clone can kick in when LookupEnvironment.createBinaryTypeFrom calls PackageBinding.addType. This
+	   can result in some URB's being resolved, which could trigger the clone call, leaving the clone with semi-initialized prototype.
+	   Fortunately, the protocol for this type demands all clients to use public access methods, where we can deflect the call to the
+	   prototype. enclosingType() and memberTypes() should not delegate, so ...
+	*/
+	if (copy.enclosingType != null) 
+		copy.tagBits |= TagBits.HasUnresolvedEnclosingType;
+	else 
+		copy.tagBits &= ~TagBits.HasUnresolvedEnclosingType;
+	
+	copy.tagBits |= TagBits.HasUnresolvedMemberTypes;
 	return copy;
 }
 
@@ -246,8 +259,6 @@ public BinaryTypeBinding(PackageBinding packageBinding, IBinaryType binaryType,
 public FieldBinding[] availableFields() {
 	
 	if (!isPrototype()) {
-		if ((this.tagBits & TagBits.AreFieldsComplete) != 0)
-			return this.fields;
 		return this.prototype.availableFields();
 	}
 	
@@ -308,8 +319,6 @@ private TypeVariableBinding[] addMethodTypeVariables(TypeVariableBinding[] metho
 public MethodBinding[] availableMethods() {
 	
 	if (!isPrototype()) {
-		if ((this.tagBits & TagBits.AreMethodsComplete) != 0)
-			return this.methods;
 		return this.prototype.availableMethods();
 	}
 
@@ -399,7 +408,7 @@ void cachePartsFrom(IBinaryType binaryType, boolean needFieldsAndMethods) {
 			char[] superclassName = binaryType.getSuperclassName();
 			if (superclassName != null) {
 				// attempt to find the superclass if it exists in the cache (otherwise - resolve it when requested)
-				this.superclass = this.environment.getTypeFromConstantPoolName(superclassName, 0, -1, false, missingTypeNames);
+				this.superclass = this.environment.getTypeFromConstantPoolName(superclassName, 0, -1, false, missingTypeNames, walker.toSupertype((short) -1));
 				this.tagBits |= TagBits.HasUnresolvedSuperclass;
 			}
 
@@ -409,9 +418,9 @@ void cachePartsFrom(IBinaryType binaryType, boolean needFieldsAndMethods) {
 				int size = interfaceNames.length;
 				if (size > 0) {
 					this.superInterfaces = new ReferenceBinding[size];
-					for (int i = 0; i < size; i++)
+					for (short i = 0; i < size; i++)
 						// attempt to find each superinterface if it exists in the cache (otherwise - resolve it when requested)
-						this.superInterfaces[i] = this.environment.getTypeFromConstantPoolName(interfaceNames[i], 0, -1, false, missingTypeNames);
+						this.superInterfaces[i] = this.environment.getTypeFromConstantPoolName(interfaceNames[i], 0, -1, false, missingTypeNames, walker.toSupertype(i));
 					this.tagBits |= TagBits.HasUnresolvedSuperinterfaces;
 				}
 			}
@@ -621,7 +630,7 @@ private MethodBinding createMethod(IBinaryMethod method, long sourceLevel, char[
 			if (size > 0) {
 				exceptions = new ReferenceBinding[size];
 				for (int i = 0; i < size; i++)
-					exceptions[i] = this.environment.getTypeFromConstantPoolName(exceptionTypes[i], 0, -1, false, missingTypeNames);
+					exceptions[i] = this.environment.getTypeFromConstantPoolName(exceptionTypes[i], 0, -1, false, missingTypeNames, walker.toThrows(i));
 			}
 		}
 
@@ -652,9 +661,6 @@ private MethodBinding createMethod(IBinaryMethod method, long sourceLevel, char[
 			wrapper.start++; // skip '>'
 		}
 
-// 		Note(stephan): currently the compiler is not interested in retrieving receiver annotations, here is how we would do it:
-//		IBinaryAnnotation[] receiverAnnotations = walker.toReceiver().getAnnotationsAtCursor();
-		
 		if (wrapper.signature[wrapper.start] == Util.C_PARAM_START) {
 			wrapper.start++; // skip '('
 			if (wrapper.signature[wrapper.start] == Util.C_PARAM_END) {
@@ -697,7 +703,7 @@ private MethodBinding createMethod(IBinaryMethod method, long sourceLevel, char[
 				if (size > 0) {
 					exceptions = new ReferenceBinding[size];
 					for (int i = 0; i < size; i++)
-						exceptions[i] = this.environment.getTypeFromConstantPoolName(exceptionTypes[i], 0, -1, false, missingTypeNames);
+						exceptions[i] = this.environment.getTypeFromConstantPoolName(exceptionTypes[i], 0, -1, false, missingTypeNames, walker.toThrows(i));
 				}
 			}
 		}
@@ -706,12 +712,23 @@ private MethodBinding createMethod(IBinaryMethod method, long sourceLevel, char[
 	MethodBinding result = method.isConstructor()
 		? new MethodBinding(methodModifiers, parameters, exceptions, this)
 		: new MethodBinding(methodModifiers, method.getSelector(), returnType, parameters, exceptions, this);
-	if (this.environment.globalOptions.storeAnnotations)
+	
+	IBinaryAnnotation[] receiverAnnotations = walker.toReceiver().getAnnotationsAtCursor();
+	if (receiverAnnotations != null && receiverAnnotations.length > 0) {
+		result.receiver = this.environment.createAnnotatedType(this, createAnnotations(receiverAnnotations, this.environment, missingTypeNames));
+	}
+
+	if (this.environment.globalOptions.storeAnnotations) {
+		IBinaryAnnotation[] annotations = method.getAnnotations();
+	    if (annotations == null || annotations.length == 0)
+	    	if (method.isConstructor())
+	    		annotations = walker.toMethodReturn().getAnnotationsAtCursor(); // FIXME: When both exist, order could become an issue.
 		result.setAnnotations(
-			createAnnotations(method.getAnnotations(), this.environment, missingTypeNames),
+			createAnnotations(annotations, this.environment, missingTypeNames),
 			paramAnnotations,
 			isAnnotationType() ? convertMemberValue(method.getDefaultValue(), this.environment, missingTypeNames) : null,
 			this.environment);
+	}
 
 	if (argumentNames != null) result.parameterNames = argumentNames;
 	
@@ -856,11 +873,7 @@ public ReferenceBinding enclosingType() {  // should not delegate to prototype.
 public FieldBinding[] fields() {
 	
 	if (!isPrototype()) {
-		if ((this.tagBits & TagBits.AreFieldsComplete) != 0)
-			return this.fields;
-		this.fields = this.prototype.fields();
-		this.tagBits |= TagBits.AreFieldsComplete;
-		return this.fields;
+		return this.fields = this.prototype.fields();
 	}
 
 	if ((this.tagBits & TagBits.AreFieldsComplete) != 0)
@@ -1150,6 +1163,8 @@ public MethodBinding[] getMethods(char[] selector, int suggestedParameterLength)
 	return Binding.NO_METHODS;
 }
 public boolean hasMemberTypes() {
+	if (!isPrototype())
+		return this.prototype.hasMemberTypes();
     return this.memberTypes.length > 0;
 }
 // NOTE: member types of binary types are resolved when needed
@@ -1300,11 +1315,7 @@ public ReferenceBinding[] memberTypes() {
 public MethodBinding[] methods() {
 	
 	if (!isPrototype()) {
-		if ((this.tagBits & TagBits.AreMethodsComplete) != 0)
-			return this.methods;
-		this.methods = this.prototype.methods();
-		this.tagBits |= TagBits.AreMethodsComplete;
-		return this.methods;
+		return this.methods = this.prototype.methods();
 	}
 	
 	if ((this.tagBits & TagBits.AreMethodsComplete) != 0)
@@ -1404,6 +1415,7 @@ public void setContainerAnnotationType(ReferenceBinding value) {
 }
 
 public void tagAsHavingDefectiveContainerType() {
+	if (!isPrototype()) throw new IllegalStateException();
 	if (this.containerAnnotationType != null && this.containerAnnotationType.isValidBinding())
 		this.containerAnnotationType = new ProblemReferenceBinding(this.containerAnnotationType.compoundName, this.containerAnnotationType, ProblemReasons.DefectiveContainerAnnotationType);
 }
@@ -1644,11 +1656,7 @@ private void scanTypeForContainerAnnotation(IBinaryType binaryType, char[][][] m
 public ReferenceBinding superclass() {
 	
 	if (!isPrototype()) {
-		if ((this.tagBits & TagBits.HasUnresolvedSuperclass) == 0)
-			return this.superclass;
-		this.superclass = this.prototype.superclass();
-		this.tagBits &= ~TagBits.HasUnresolvedSuperclass;
-		return this.superclass;
+		return this.superclass = this.prototype.superclass();
 	}
 	
 	if ((this.tagBits & TagBits.HasUnresolvedSuperclass) == 0)
@@ -1679,11 +1687,7 @@ public ReferenceBinding superclass() {
 public ReferenceBinding[] superInterfaces() {
 	
 	if (!isPrototype()) {
-		if ((this.tagBits & TagBits.HasUnresolvedSuperinterfaces) == 0)
-			return this.superInterfaces;
-		this.superInterfaces = this.prototype.superInterfaces();
-		this.tagBits &= ~TagBits.HasUnresolvedSuperinterfaces;
-		return this.superInterfaces;
+		return this.superInterfaces = this.prototype.superInterfaces();
 	}
 	if ((this.tagBits & TagBits.HasUnresolvedSuperinterfaces) == 0)
 		return this.superInterfaces;
@@ -1711,11 +1715,7 @@ public ReferenceBinding[] superInterfaces() {
 public TypeVariableBinding[] typeVariables() {
 	
 	if (!isPrototype()) {
-		if ((this.tagBits & TagBits.HasUnresolvedTypeVariables) == 0)
-			return this.typeVariables;
-		this.typeVariables = this.prototype.typeVariables();
-		this.tagBits &= ~TagBits.HasUnresolvedTypeVariables;
-		return this.typeVariables;
+		return this.typeVariables = this.prototype.typeVariables();
 	}
  	if ((this.tagBits & TagBits.HasUnresolvedTypeVariables) == 0)
 		return this.typeVariables;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java
index 00a449d..4b9a915 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java
@@ -962,10 +962,7 @@ public TypeBinding createAnnotatedType(TypeBinding type, AnnotationBinding[] new
 		System.arraycopy(newbies, 0, newbies = new AnnotationBinding[newLength + oldLength], 0, newLength);
 		System.arraycopy(oldies, 0, newbies, newLength, oldLength);
 	}
-	
-	TypeBinding annotatedType = this.typeSystem.getAnnotatedType(type, new AnnotationBinding [][] { newbies });
-	annotatedType.tagBits |= type.tagBits & TagBits.AnnotationNullMASK; // carry over any synthesized null bits e.g new Object() unless the annotation binding themselves are synthesized.
-	return annotatedType;
+	return this.typeSystem.getAnnotatedType(type, new AnnotationBinding [][] { newbies });
 }
 
 public RawTypeBinding createRawType(ReferenceBinding genericType, ReferenceBinding enclosingType) {
@@ -1194,7 +1191,7 @@ private ReferenceBinding getTypeFromCompoundName(char[][] compoundName, boolean
 *
 * NOTE: Does NOT answer base types nor array types!
 */
-ReferenceBinding getTypeFromConstantPoolName(char[] signature, int start, int end, boolean isParameterized, char[][][] missingTypeNames) {
+ReferenceBinding getTypeFromConstantPoolName(char[] signature, int start, int end, boolean isParameterized, char[][][] missingTypeNames, TypeAnnotationWalker walker) {
 	if (end == -1)
 		end = signature.length;
 	char[][] compoundName = CharOperation.splitOn('/', signature, start, end);
@@ -1207,7 +1204,27 @@ ReferenceBinding getTypeFromConstantPoolName(char[] signature, int start, int en
 			}
 		}
 	}
-	return getTypeFromCompoundName(compoundName, isParameterized, wasMissingType);
+	ReferenceBinding binding = getTypeFromCompoundName(compoundName, isParameterized, wasMissingType);
+	if (walker != TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER) {
+		final int depth = binding.depth();
+		AnnotationBinding [][] annotations = null;
+		for (int i = 0; i <= depth; i++) {
+			AnnotationBinding[] annots = BinaryTypeBinding.createAnnotations(walker.getAnnotationsAtCursor(), this, missingTypeNames);
+			if (annots != null && annots.length > 0) {
+				if (annotations == null)
+					annotations = new AnnotationBinding[depth + 1][];
+				annotations[i] = annots;
+			}
+			walker = walker.toNextNestedType();
+		}
+		if (annotations != null)
+			binding = (ReferenceBinding) createAnnotatedType(binding, annotations);
+	}
+	return binding;
+}
+
+ReferenceBinding getTypeFromConstantPoolName(char[] signature, int start, int end, boolean isParameterized, char[][][] missingTypeNames) {
+	return getTypeFromConstantPoolName(signature, start, end, isParameterized, missingTypeNames, TypeAnnotationWalker.EMPTY_ANNOTATION_WALKER);
 }
 
 /* Answer the type corresponding to the signature from the binary file.
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java
index 612bf96..1be5677 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java
@@ -2115,6 +2115,7 @@ public void setContainerAnnotationType(ReferenceBinding value) {
 }
 
 public void tagAsHavingDefectiveContainerType() {
+	if (!isPrototype()) throw new IllegalStateException();
 	if (this.containerAnnotationType != null && this.containerAnnotationType.isValidBinding())
 		this.containerAnnotationType = new ProblemReferenceBinding(this.containerAnnotationType.compoundName, this.containerAnnotationType, ProblemReasons.DefectiveContainerAnnotationType);
 }
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IMethodBinding.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IMethodBinding.java
index 564b2a7..77e6cb3 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IMethodBinding.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IMethodBinding.java
@@ -137,7 +137,7 @@ public interface IMethodBinding extends IBinding {
 	 * </p>
 	 * <p>
 	 * Note: The result does not include synthetic parameters introduced by
-	 * inner class emulation.
+	 * inner class emulation. Explicit receiver parameters are also not included.
 	 * </p>
 	 *
 	 * @return a (possibly empty) list of type bindings for the formal
@@ -146,6 +146,17 @@ public interface IMethodBinding extends IBinding {
 	public ITypeBinding[] getParameterTypes();
 
 	/**
+	 * Returns the type of this method's receiver or <code>null</code> 
+	 * if there is no receiver declared explicitly.
+	 * 
+	 * @return the type of this method's receiver or <code>null</code> 
+	 * if there is no receiver declared explicitly.
+	 * 
+	 * @since 3.9 BETA_JAVA8
+	 */
+	public ITypeBinding getDeclaredReceiverType();
+	
+	/**
 	 * Returns the binding for the return type of this method. Returns the
 	 * special primitive <code>void</code> return type for constructors.
 	 *
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java
index 534984d..ed1f555 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodBinding.java
@@ -198,6 +198,12 @@ class MethodBinding implements IMethodBinding {
 	}
 
 	/**
+	 * @see IMethodBinding#getDeclaredReceiverType()
+	 */
+	public ITypeBinding getDeclaredReceiverType() {
+		return this.resolver.getTypeBinding(this.binding.receiver);
+	}
+	/**
 	 * @see IMethodBinding#getReturnType()
 	 */
 	public ITypeBinding getReturnType() {

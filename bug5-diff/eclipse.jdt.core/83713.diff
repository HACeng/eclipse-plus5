commit 562f566c1c2b8bfedaad7117a5b53ae2f781bec9
Author: David Audel <daudel>
Date:   Wed Jan 26 15:45:09 2005 +0000

    bug 83713

50	50	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests_1_5.java
34	24	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/ISelectionRequestor.java
29	7	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
12	12	org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetToCuMapper.java
2	2	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NamedMember.java
9	5	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ParameterizedBinaryField.java
24	5	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ParameterizedBinaryMethod.java
6	6	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ParameterizedBinaryType.java
9	5	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ParameterizedSourceField.java
23	5	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ParameterizedSourceMethod.java
6	6	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ParameterizedSourceType.java
71	23	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java
2	2	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceType.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests_1_5.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests_1_5.java
index 46bf672..cb1baab 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests_1_5.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests_1_5.java
@@ -33,7 +33,7 @@ public static Test suite() {
 		}
 		return suite;
 	}
-	suite.addTest(new ResolveTests_1_5("test0058"));			
+	suite.addTest(new ResolveTests_1_5("test0075"));			
 	return suite;
 }
 
@@ -106,7 +106,7 @@ public void test0002() throws JavaModelException {
 	IJavaElement[] elements = cu.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"Y key=Ltest0002/Test$X<Ljava/lang/Object;>.Y<Ljava/lang/Object;>; [in X [in Test [in Test.java [in test0002 [in src2 [in Resolve]]]]]]",
+		"Y genericTypeSignature=Ltest0002/Test$X<Ljava/lang/Object;>.Y<Ljava/lang/Object;>; [in X [in Test [in Test.java [in test0002 [in src2 [in Resolve]]]]]]",
 		elements
 	);
 }
@@ -121,7 +121,7 @@ public void test0003() throws JavaModelException {
 	IJavaElement[] elements = cu.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"X key=Ltest0003/Test$X<Ljava/lang/Object;>; [in Test [in Test.java [in test0003 [in src2 [in Resolve]]]]]",
+		"X genericTypeSignature=Ltest0003/Test$X<Ljava/lang/Object;>; [in Test [in Test.java [in test0003 [in src2 [in Resolve]]]]]",
 		elements
 	);
 }
@@ -145,7 +145,7 @@ public void test0004() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"Test key=Ltest0004/Test; [in [Working copy] Test.java [in test0004 [in src2 [in Resolve]]]]",
+		"Test genericTypeSignature=Ltest0004/Test; [in [Working copy] Test.java [in test0004 [in src2 [in Resolve]]]]",
 		elements
 	);
 }
@@ -439,7 +439,7 @@ public void test0022() throws JavaModelException {
 	IJavaElement[] elements = cu.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"add(T, A<T>, A<T>.B, A<T>.C<T>, A<T>.B.D<T>) key=Ltest0022/X;.add<T:Ltest0022/Y;>(TT;Ltest0022/A<TT;>;Ltest0022/A<TT;>.B;Ltest0022/A<TT;>.C<TT;>;Ltest0022/A<TT;>.B.D<TT;>;)V%<Ltest0022/Y;> [in X [in X.java [in test0022 [in src2 [in Resolve]]]]]",
+		"add(T, A<T>, A<T>.B, A<T>.C<T>, A<T>.B.D<T>) declaringSignature=Ltest0022/X; signature=(Ltest0022/Y;Ltest0022/A<Ltest0022/Y;>;Ltest0022/A<Ltest0022/Y;>.B;Ltest0022/A<Ltest0022/Y;>.C<Ltest0022/Y;>;Ltest0022/A<Ltest0022/Y;>.B.D<Ltest0022/Y;>;)V typeArgumentsSignature=<Ltest0022/Y;> [in X [in X.java [in test0022 [in src2 [in Resolve]]]]]",
 		elements
 	);
 }
@@ -514,7 +514,7 @@ public void test0026() throws JavaModelException {
 	IJavaElement[] elements = this.wc.codeSelect(start, 0);
 	assertElementsEqual(
 		"Unexpected elements",
-		"Inner key=Ltest0026/Test$Inner; [in Test [in [Working copy] Test.java [in test0026 [in src2 [in Resolve]]]]]",
+		"Inner genericTypeSignature=Ltest0026/Test$Inner; [in Test [in [Working copy] Test.java [in test0026 [in src2 [in Resolve]]]]]",
 		elements
 	);
 }
@@ -535,7 +535,7 @@ public void test0027() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, 0);
 	assertElementsEqual(
 		"Unexpected elements",
-		"Inner key=Ltest0027/Test$Inner<Ljava/lang/Object;>; [in Test [in [Working copy] Test.java [in test0027 [in src2 [in Resolve]]]]]",
+		"Inner genericTypeSignature=Ltest0027/Test$Inner<Ljava/lang/Object;>; [in Test [in [Working copy] Test.java [in test0027 [in src2 [in Resolve]]]]]",
 		elements
 	);
 }
@@ -556,7 +556,7 @@ public void test0028() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, 0);
 	assertElementsEqual(
 		"Unexpected elements",
-		"Inner key=Ltest0028/Test<Ljava/lang/Object;>.Inner; [in Test [in [Working copy] Test.java [in test0028 [in src2 [in Resolve]]]]]",
+		"Inner genericTypeSignature=Ltest0028/Test<Ljava/lang/Object;>.Inner; [in Test [in [Working copy] Test.java [in test0028 [in src2 [in Resolve]]]]]",
 		elements
 	);
 }
@@ -577,7 +577,7 @@ public void test0029() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, 0);
 	assertElementsEqual(
 		"Unexpected elements",
-		"Inner key=Ltest0029/Test<Ljava/lang/Object;>.Inner<Ljava/lang/Object;>; [in Test [in [Working copy] Test.java [in test0029 [in src2 [in Resolve]]]]]",
+		"Inner genericTypeSignature=Ltest0029/Test<Ljava/lang/Object;>.Inner<Ljava/lang/Object;>; [in Test [in [Working copy] Test.java [in test0029 [in src2 [in Resolve]]]]]",
 		elements
 	);
 }
@@ -599,7 +599,7 @@ public void test0030() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"Inner key=Ltest0030/Test$Inner; [in Test [in [Working copy] Test.java [in test0030 [in src2 [in Resolve]]]]]",
+		"Inner genericTypeSignature=Ltest0030/Test$Inner; [in Test [in [Working copy] Test.java [in test0030 [in src2 [in Resolve]]]]]",
 		elements
 	);
 }
@@ -621,7 +621,7 @@ public void test0031() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"Inner key=Ltest0031/Test$Inner<Ljava/lang/Object;>; [in Test [in [Working copy] Test.java [in test0031 [in src2 [in Resolve]]]]]",
+		"Inner genericTypeSignature=Ltest0031/Test$Inner<Ljava/lang/Object;>; [in Test [in [Working copy] Test.java [in test0031 [in src2 [in Resolve]]]]]",
 		elements
 	);
 }
@@ -643,7 +643,7 @@ public void test0032() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"Inner key=Ltest0032/Test<Ljava/lang/Object;>.Inner; [in Test [in [Working copy] Test.java [in test0032 [in src2 [in Resolve]]]]]",
+		"Inner genericTypeSignature=Ltest0032/Test<Ljava/lang/Object;>.Inner; [in Test [in [Working copy] Test.java [in test0032 [in src2 [in Resolve]]]]]",
 		elements
 	);
 }
@@ -665,7 +665,7 @@ public void test0033() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"Inner key=Ltest0033/Test<Ljava/lang/Object;>.Inner<Ljava/lang/Object;>; [in Test [in [Working copy] Test.java [in test0033 [in src2 [in Resolve]]]]]",
+		"Inner genericTypeSignature=Ltest0033/Test<Ljava/lang/Object;>.Inner<Ljava/lang/Object;>; [in Test [in [Working copy] Test.java [in test0033 [in src2 [in Resolve]]]]]",
 		elements
 	);
 }
@@ -687,7 +687,7 @@ public void test0034() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"Inner key=Ltest0034/Test$Inner; [in Test [in [Working copy] Test.java [in test0034 [in src2 [in Resolve]]]]]",
+		"Inner genericTypeSignature=Ltest0034/Test$Inner; [in Test [in [Working copy] Test.java [in test0034 [in src2 [in Resolve]]]]]",
 		elements
 	);
 }
@@ -709,7 +709,7 @@ public void test0035() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"Inner key=Ltest0035/Test$Inner<Ljava/lang/Object;>; [in Test [in [Working copy] Test.java [in test0035 [in src2 [in Resolve]]]]]",
+		"Inner genericTypeSignature=Ltest0035/Test$Inner<Ljava/lang/Object;>; [in Test [in [Working copy] Test.java [in test0035 [in src2 [in Resolve]]]]]",
 		elements
 	);
 }
@@ -731,7 +731,7 @@ public void test0036() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"Inner key=Ltest0036/Test<Ljava/lang/Object;>.Inner; [in Test [in [Working copy] Test.java [in test0036 [in src2 [in Resolve]]]]]",
+		"Inner genericTypeSignature=Ltest0036/Test<Ljava/lang/Object;>.Inner; [in Test [in [Working copy] Test.java [in test0036 [in src2 [in Resolve]]]]]",
 		elements
 	);
 }
@@ -753,7 +753,7 @@ public void test0037() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"Inner key=Ltest0037/Test<Ljava/lang/Object;>.Inner<Ljava/lang/Object;>; [in Test [in [Working copy] Test.java [in test0037 [in src2 [in Resolve]]]]]",
+		"Inner genericTypeSignature=Ltest0037/Test<Ljava/lang/Object;>.Inner<Ljava/lang/Object;>; [in Test [in [Working copy] Test.java [in test0037 [in src2 [in Resolve]]]]]",
 		elements
 	);
 }
@@ -775,7 +775,7 @@ public void test0038() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"Inner key=Ltest0038/Test$Inner<Ljava/lang/Object;>; [in Test [in [Working copy] Test.java [in test0038 [in src2 [in Resolve]]]]]",
+		"Inner genericTypeSignature=Ltest0038/Test$Inner<Ljava/lang/Object;>; [in Test [in [Working copy] Test.java [in test0038 [in src2 [in Resolve]]]]]",
 		elements
 	);
 }
@@ -797,7 +797,7 @@ public void test0039() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"Inner key=Ltest0039/Test<Ljava/lang/Object;>.Inner<Ljava/lang/Object;>; [in Test [in [Working copy] Test.java [in test0039 [in src2 [in Resolve]]]]]",
+		"Inner genericTypeSignature=Ltest0039/Test<Ljava/lang/Object;>.Inner<Ljava/lang/Object;>; [in Test [in [Working copy] Test.java [in test0039 [in src2 [in Resolve]]]]]",
 		elements
 	);
 }
@@ -819,7 +819,7 @@ public void test0040() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"Inner key=Ltest0040/Test<Ljava/lang/Object;>.Inner<Ljava/lang/Object;>; [in Test [in [Working copy] Test.java [in test0040 [in src2 [in Resolve]]]]]",
+		"Inner genericTypeSignature=Ltest0040/Test<Ljava/lang/Object;>.Inner<Ljava/lang/Object;>; [in Test [in [Working copy] Test.java [in test0040 [in src2 [in Resolve]]]]]",
 		elements
 	);
 }
@@ -847,7 +847,7 @@ public void test0041() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"Local2 key=Ltest0041/Test$1$Local1<Ltest0041/Test$1$Local3<Ljava/lang/Object;>;>.Local2<Ltest0041/Test$1$Local3<Ljava/lang/Object;>;>; [in Local1 [in foo() [in Test [in [Working copy] Test.java [in test0041 [in src2 [in Resolve]]]]]]]",
+		"Local2 genericTypeSignature=Ltest0041/Test$1$Local1<Ltest0041/Test$1$Local3<Ljava/lang/Object;>;>.Local2<Ltest0041/Test$1$Local3<Ljava/lang/Object;>;>; [in Local1 [in foo() [in Test [in [Working copy] Test.java [in test0041 [in src2 [in Resolve]]]]]]]",
 		elements
 	);
 }
@@ -869,7 +869,7 @@ public void test0042() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"Inner key=Ltest0042/Test<-Ljava/lang/String;>.Inner<+Ljava/lang/String;>; [in Test [in [Working copy] Test.java [in test0042 [in src2 [in Resolve]]]]]",
+		"Inner genericTypeSignature=Ltest0042/Test<-Ljava/lang/String;>.Inner<+Ljava/lang/String;>; [in Test [in [Working copy] Test.java [in test0042 [in src2 [in Resolve]]]]]",
 		elements
 	);
 }
@@ -911,7 +911,7 @@ public void test0044() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"Test key=Ltest0044/Test<Ltest0044/Test2<TT2;>;:TT2;>; [in [Working copy] Test.java [in test0044 [in src2 [in Resolve]]]]",
+		"Test genericTypeSignature=Ltest0044/Test<TT2;>; [in [Working copy] Test.java [in test0044 [in src2 [in Resolve]]]]",
 		elements
 	);
 }
@@ -978,7 +978,7 @@ public void test0047() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"var key=Ltest0047/Test<Ljava/lang/String;>;.var [in Test [in [Working copy] Test.java [in test0047 [in src2 [in Resolve]]]]]",
+		"var declaringSignature=Ltest0047/Test<Ljava/lang/String;>; signature=null [in Test [in [Working copy] Test.java [in test0047 [in src2 [in Resolve]]]]]",
 		elements
 	);
 }
@@ -1002,7 +1002,7 @@ public void test0048() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"var key=Ltest0048/Test<*>;.var [in Test [in [Working copy] Test.java [in test0048 [in src2 [in Resolve]]]]]",
+		"var declaringSignature=Ltest0048/Test<*>; signature=null [in Test [in [Working copy] Test.java [in test0048 [in src2 [in Resolve]]]]]",
 		elements
 	);
 }
@@ -1050,7 +1050,7 @@ public void test0050() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"var key=Ltest0050/Test;.var [in Test [in [Working copy] Test.java [in test0050 [in src2 [in Resolve]]]]]",
+		"var declaringSignature=Ltest0050/Test; signature=null [in Test [in [Working copy] Test.java [in test0050 [in src2 [in Resolve]]]]]",
 		elements
 	);
 }
@@ -1076,7 +1076,7 @@ public void test0051() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"var key=Ltest0051/Test$1$Inner<Ljava/lang/Object;>;.var [in Inner [in foo() [in Test [in [Working copy] Test.java [in test0051 [in src2 [in Resolve]]]]]]]",
+		"var declaringSignature=Ltest0051/Test$1$Inner<Ljava/lang/Object;>; signature=null [in Inner [in foo() [in Test [in [Working copy] Test.java [in test0051 [in src2 [in Resolve]]]]]]]",
 		elements
 	);
 }
@@ -1102,7 +1102,7 @@ public void test0052() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"var key=Ltest0052/Test$1$Inner<Ljava/lang/Object;>;.var [in Inner [in foo() [in Test [in [Working copy] Test.java [in test0052 [in src2 [in Resolve]]]]]]]",
+		"var declaringSignature=Ltest0052/Test$1$Inner<Ljava/lang/Object;>; signature=Ljava/lang/Object; [in Inner [in foo() [in Test [in [Working copy] Test.java [in test0052 [in src2 [in Resolve]]]]]]]",
 		elements
 	);
 }
@@ -1129,7 +1129,7 @@ public void test0053() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"foo() key=Ltest0053/Test<Ljava/lang/String;>;.foo()V [in Test [in [Working copy] Test.java [in test0053 [in src2 [in Resolve]]]]]",
+		"foo() declaringSignature=Ltest0053/Test<Ljava/lang/String;>; signature=null typeArgumentsSignature=null [in Test [in [Working copy] Test.java [in test0053 [in src2 [in Resolve]]]]]",
 		elements
 	);
 }
@@ -1156,7 +1156,7 @@ public void test0054() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"foo() key=Ltest0054/Test;.foo()V [in Test [in [Working copy] Test.java [in test0054 [in src2 [in Resolve]]]]]",
+		"foo() declaringSignature=Ltest0054/Test; signature=null typeArgumentsSignature=null [in Test [in [Working copy] Test.java [in test0054 [in src2 [in Resolve]]]]]",
 		elements
 	);
 }
@@ -1183,7 +1183,7 @@ public void test0055() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"foo() key=Ltest0055/Test<Ltest0055/Test2<TT;>;:TT;>;.foo()V [in Test [in [Working copy] Test.java [in test0055 [in src2 [in Resolve]]]]]",
+		"foo() declaringSignature=Ltest0055/Test<TT;>; signature=null typeArgumentsSignature=null [in Test [in [Working copy] Test.java [in test0055 [in src2 [in Resolve]]]]]",
 		elements
 	);
 }
@@ -1235,7 +1235,7 @@ public void test0057() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"foo() key=Ltest0057/Test<Ljava/lang/String;>;.foo<T2:Ljava/lang/Object;>()V%<Ljava/lang/Object;> [in Test [in [Working copy] Test.java [in test0057 [in src2 [in Resolve]]]]]",
+		"foo() declaringSignature=Ltest0057/Test<Ljava/lang/String;>; signature=()V typeArgumentsSignature=<Ljava/lang/Object;> [in Test [in [Working copy] Test.java [in test0057 [in src2 [in Resolve]]]]]",
 		elements
 	);
 }
@@ -1262,7 +1262,7 @@ public void test0058() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"foo() key=Ltest0058/Test<Ljava/lang/String;>;.foo<T2:Ljava/lang/Object;>()V%<Ltest0058/Test<Ljava/lang/String;>;.foo<T2:Ljava/lang/Object;>()V:TT2;> [in Test [in [Working copy] Test.java [in test0058 [in src2 [in Resolve]]]]]",
+		"foo() declaringSignature=Ltest0058/Test<Ljava/lang/String;>; signature=()V typeArgumentsSignature=<TT2;> [in Test [in [Working copy] Test.java [in test0058 [in src2 [in Resolve]]]]]",
 		elements
 	);
 }
@@ -1289,7 +1289,7 @@ public void test0059() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"foo() key=Ltest0059/Test;.foo<T2:Ljava/lang/Object;>()V%<Ljava/lang/String;> [in Test [in [Working copy] Test.java [in test0059 [in src2 [in Resolve]]]]]",
+		"foo() declaringSignature=Ltest0059/Test; signature=()V typeArgumentsSignature=<Ljava/lang/String;> [in Test [in [Working copy] Test.java [in test0059 [in src2 [in Resolve]]]]]",
 		elements
 	);
 }
@@ -1316,7 +1316,7 @@ public void test0060() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"foo() key=Ltest0060/Test;.foo<T2:Ljava/lang/Object;>()V%<Ltest0060/Test;.foo<T2:Ljava/lang/Object;>()V:TT2;> [in Test [in [Working copy] Test.java [in test0060 [in src2 [in Resolve]]]]]",
+		"foo() declaringSignature=Ltest0060/Test; signature=()V typeArgumentsSignature=<TT2;> [in Test [in [Working copy] Test.java [in test0060 [in src2 [in Resolve]]]]]",
 		elements
 	);
 }
@@ -1339,7 +1339,7 @@ public void test0061() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"foo() key=Ltest0061/Test;.foo<T2:Ljava/lang/Object;>()V%<Ltest0061/Test;.foo<T2:Ljava/lang/Object;>()V:TT2;> [in Test [in [Working copy] Test.java [in test0061 [in src2 [in Resolve]]]]]",
+		"foo() declaringSignature=Ltest0061/Test; signature=()V typeArgumentsSignature=<TT2;> [in Test [in [Working copy] Test.java [in test0061 [in src2 [in Resolve]]]]]",
 		elements
 	);
 }
@@ -1362,7 +1362,7 @@ public void test0062() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"foo() key=Ltest0062/Test;.foo<T2:Ljava/lang/Object;>()V [in Test [in [Working copy] Test.java [in test0062 [in src2 [in Resolve]]]]]",
+		"foo() declaringSignature=Ltest0062/Test; signature=()V typeArgumentsSignature=null [in Test [in [Working copy] Test.java [in test0062 [in src2 [in Resolve]]]]]",
 		elements
 	);
 }
@@ -1389,7 +1389,7 @@ public void test0063() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"foo() key=Ltest0063/Test<Ljava/lang/String;>;.foo()V [in Test [in [Working copy] Test.java [in test0063 [in src2 [in Resolve]]]]]",
+		"foo() declaringSignature=Ltest0063/Test<Ljava/lang/String;>; signature=null typeArgumentsSignature=null [in Test [in [Working copy] Test.java [in test0063 [in src2 [in Resolve]]]]]",
 		elements
 	);
 }
@@ -1413,7 +1413,7 @@ public void test0064() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"Test(U) key=Ltest0064/Test;.<U:Ljava/lang/Object;>(TU;)V%<Ljava/lang/String;> [in Test [in [Working copy] Test.java [in test0064 [in src2 [in Resolve]]]]]",
+		"Test(U) declaringSignature=Ltest0064/Test; signature=(Ljava/lang/String;)V typeArgumentsSignature=<Ljava/lang/String;> [in Test [in [Working copy] Test.java [in test0064 [in src2 [in Resolve]]]]]",
 		elements
 	);
 }
@@ -1437,7 +1437,7 @@ public void test0065() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"Test(U) key=Ltest0065/Test;.<U:Ljava/lang/Object;>(TU;)V%<Ltest0065/Test;.<U:Ljava/lang/Object;>(TU;)V:TU;> [in Test [in [Working copy] Test.java [in test0065 [in src2 [in Resolve]]]]]",
+		"Test(U) declaringSignature=Ltest0065/Test; signature=(TU;)V typeArgumentsSignature=<TU;> [in Test [in [Working copy] Test.java [in test0065 [in src2 [in Resolve]]]]]",
 		elements
 	);
 }
@@ -1461,7 +1461,7 @@ public void test0066() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"Test(U) key=Ltest0066/Test<Ljava/lang/String;>;.<U:Ljava/lang/Object;>(TU;)V%<Ljava/lang/String;> [in Test [in [Working copy] Test.java [in test0066 [in src2 [in Resolve]]]]]",
+		"Test(U) declaringSignature=Ltest0066/Test<Ljava/lang/String;>; signature=(Ljava/lang/String;)V typeArgumentsSignature=<Ljava/lang/String;> [in Test [in [Working copy] Test.java [in test0066 [in src2 [in Resolve]]]]]",
 		elements
 	);
 }
@@ -1485,7 +1485,7 @@ public void test0067() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"Test(U) key=Ltest0067/Test<Ljava/lang/String;>;.<U:Ljava/lang/Object;>(TU;)V%<Ltest0067/Test<Ljava/lang/String;>;.<U:Ljava/lang/Object;>(TU;)V:TU;> [in Test [in [Working copy] Test.java [in test0067 [in src2 [in Resolve]]]]]",
+		"Test(U) declaringSignature=Ltest0067/Test<Ljava/lang/String;>; signature=(TU;)V typeArgumentsSignature=<TU;> [in Test [in [Working copy] Test.java [in test0067 [in src2 [in Resolve]]]]]",
 		elements
 	);
 }
@@ -1509,7 +1509,7 @@ public void test0068() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"Test(U) key=Ltest0068/Test;.<U:Ljava/lang/Object;>(TU;)V [in Test [in [Working copy] Test.java [in test0068 [in src2 [in Resolve]]]]]",
+		"Test(U) declaringSignature=Ltest0068/Test; signature=(Ljava/lang/Object;)V typeArgumentsSignature=null [in Test [in [Working copy] Test.java [in test0068 [in src2 [in Resolve]]]]]",
 		elements
 	);
 }
@@ -1537,7 +1537,7 @@ public void test0069() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"Inner(W) key=Ltest0069/Test<Ljava/lang/String;>.Inner<Ljava/lang/String;>;.<W:Ljava/lang/Object;>(TW;)V%<Ljava/lang/String;> [in Inner [in Test [in [Working copy] Test.java [in test0069 [in src2 [in Resolve]]]]]]",
+		"Inner(W) declaringSignature=Ltest0069/Test<Ljava/lang/String;>.Inner<Ljava/lang/String;>; signature=(Ljava/lang/String;)V typeArgumentsSignature=<Ljava/lang/String;> [in Inner [in Test [in [Working copy] Test.java [in test0069 [in src2 [in Resolve]]]]]]",
 		elements
 	);
 }
@@ -1609,7 +1609,7 @@ public void test0072() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"Test(U) key=Ltest0072/Test<Ljava/lang/String;>;.<U:Ljava/lang/Object;>(TU;)V [in Test [in [Working copy] Test.java [in test0072 [in src2 [in Resolve]]]]]",
+		"Test(U) declaringSignature=Ltest0072/Test<Ljava/lang/String;>; signature=<U:Ljava/lang/Object;>(TU;)V typeArgumentsSignature=null [in Test [in [Working copy] Test.java [in test0072 [in src2 [in Resolve]]]]]",
 		elements
 	);
 }
@@ -1633,7 +1633,7 @@ public void test0073() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"Test(U) key=Ltest0073/Test<Ljava/lang/String;>;.<U:Ljava/lang/Object;>(TU;)V [in Test [in [Working copy] Test.java [in test0073 [in src2 [in Resolve]]]]]",
+		"Test(U) declaringSignature=Ltest0073/Test<Ljava/lang/String;>; signature=<U:Ljava/lang/Object;>(TU;)V typeArgumentsSignature=null [in Test [in [Working copy] Test.java [in test0073 [in src2 [in Resolve]]]]]",
 		elements
 	);
 }
@@ -1657,7 +1657,7 @@ public void test0074() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"Test(U) key=Ltest0074/Test;.<U:Ljava/lang/Object;>(TU;)V [in Test [in [Working copy] Test.java [in test0074 [in src2 [in Resolve]]]]]",
+		"Test(U) declaringSignature=Ltest0074/Test; signature=(Ljava/lang/Object;)V typeArgumentsSignature=null [in Test [in [Working copy] Test.java [in test0074 [in src2 [in Resolve]]]]]",
 		elements
 	);
 }
@@ -1685,7 +1685,7 @@ public void test0075() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"Inner(W) key=Ltest0075/Test$Inner;.<W:Ljava/lang/Object;>(TW;)V [in Inner [in Test [in [Working copy] Test.java [in test0075 [in src2 [in Resolve]]]]]]",
+		"Inner(W) declaringSignature=Ltest0075/Test$Inner; signature=(Ljava/lang/Object;)V typeArgumentsSignature=null [in Inner [in Test [in [Working copy] Test.java [in test0075 [in src2 [in Resolve]]]]]]",
 		elements
 	);
 }
@@ -1707,7 +1707,7 @@ public void test0076() throws JavaModelException {
 	IJavaElement[] elements = wc.codeSelect(start, length);
 	assertElementsEqual(
 		"Unexpected elements",
-		"Inner key=Ltest0076/Test<-Ljava/lang/String;>.Inner<[[ILtest0076/Test<[Ljava/lang/String;>;>; [in Test [in [Working copy] Test.java [in test0076 [in src2 [in Resolve]]]]]",
+		"Inner genericTypeSignature=Ltest0076/Test<-Ljava/lang/String;>.Inner<[[ILtest0076/Test<[Ljava/lang/String;>;>; [in Test [in [Working copy] Test.java [in test0076 [in src2 [in Resolve]]]]]",
 		elements
 	);
 }
@@ -1961,7 +1961,7 @@ public void test0089() throws JavaModelException {
 	
 	assertElementsEqual(
 		"Unexpected elements",
-		"Test(Test<String>) key=Ltest0089/Test<Ljava/lang/String;>;.(Ltest0089/Test<Ljava/lang/String;>;)V [in Test [in [Working copy] Test.java [in test0089 [in src2 [in Resolve]]]]]",
+		"Test(Test<String>) declaringSignature=Ltest0089/Test<Ljava/lang/String;>; signature=(Ltest0089/Test<Ljava/lang/String;>;)V typeArgumentsSignature=null [in Test [in [Working copy] Test.java [in test0089 [in src2 [in Resolve]]]]]",
 		elements
 	);
 
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/ISelectionRequestor.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/ISelectionRequestor.java
index cf86981..cc94755 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/ISelectionRequestor.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/ISelectionRequestor.java
@@ -27,9 +27,9 @@ public interface ISelectionRequestor {
 	 * @param isDeclaration boolean
 	 *  	Answer if the selected type is a declaration
 	 *  
-	 * @param uniqueKey
-	 *  	unique key of the selected type if it is a
-	 *  	parameterized type ({@link org.eclipse.jdt.internal.compiler.lookup.Binding#computeUniqueKey()})
+	 * @param genericTypeSignature
+	 *  	genric type signature of the selected type if it is a
+	 *  	parameterized type
 	 * 
 	 * @param start
 	 *  	Start of the selection
@@ -46,7 +46,7 @@ public interface ISelectionRequestor {
 		char[] packageName,
 		char[] annotationName,
 		boolean isDeclaration,
-		char[] uniqueKey,
+		char[] genericTypeSignature,
 		int start,
 		int end);
 	/**
@@ -60,9 +60,9 @@ public interface ISelectionRequestor {
 	 * @param isDeclaration boolean
 	 *  	Answer if the selected method is a declaration
 	 *  
-	 * @param uniqueKey
-	 *  	unique key of the selected type if it is a
-	 *  	parameterized type ({@link org.eclipse.jdt.internal.compiler.lookup.Binding#computeUniqueKey()})
+	 * @param genericTypeSignature
+	 *  	genric type signature of the selected type if it is a
+	 *  	parameterized type
 	 * 
 	 * @param start
 	 *  	Start of the selection
@@ -79,7 +79,7 @@ public interface ISelectionRequestor {
 		char[] packageName,
 		char[] className,
 		boolean isDeclaration,
-		char[] uniqueKey,
+		char[] genericTypeSignature,
 		int start,
 		int end);
 	
@@ -94,9 +94,9 @@ public interface ISelectionRequestor {
 	 * @param isDeclaration boolean
 	 *  	Answer if the selected type is a declaration
 	 *  
-	 * @param uniqueKey
-	 *  	unique key of the selected type if it is a
-	 *  	parameterized type ({@link org.eclipse.jdt.internal.compiler.lookup.Binding#computeUniqueKey()})
+	 * @param genericTypeSignature
+	 *  	genric type signature of the selected type if it is a
+	 *  	parameterized type
 	 * 
 	 * @param start
 	 *  	Start of the selection
@@ -113,7 +113,7 @@ public interface ISelectionRequestor {
 		char[] packageName,
 		char[] enumName,
 		boolean isDeclaration,
-		char[] uniqueKey,
+		char[] genericTypeSignature,
 		int start,
 		int end);
 
@@ -145,9 +145,11 @@ public interface ISelectionRequestor {
 	 * @param isDeclaration boolean
 	 *  	Answer if the selected field is a declaration
 	 * 
-	 * @param uniqueKey
-	 *  	unique key of the selected field if the field's type is a
-	 *  	parameterized type ({@link org.eclipse.jdt.internal.compiler.lookup.Binding#computeUniqueKey()})
+	 * @param genericDeclaringTypeSignature
+	 *  	generic signature of the field's declaring type
+	 *  
+	 * @param genericSignature
+	 *  	field's generic signature
 	 *  
 	 * @param start
 	 *  	Start of the selection
@@ -165,7 +167,8 @@ public interface ISelectionRequestor {
 		char[] declaringTypeName,
 		char[] name,
 		boolean isDeclaration,
-		char[] uniqueKey,
+		char[] genericDeclaringTypeSignature,
+		char[] genericSignature,
 		int start,
 		int end);
 
@@ -180,9 +183,9 @@ public interface ISelectionRequestor {
 	 * @param isDeclaration boolean
 	 *  	Answer if the selected method is a declaration
 	 *  
-	 * @param uniqueKey
-	 *  	unique key of the selected type if it is a
-	 *  	parameterized type ({@link org.eclipse.jdt.internal.compiler.lookup.Binding#computeUniqueKey()})
+	 * @param genericTypeSignature
+	 *  	genric type signature of the selected type if it is a
+	 *  	parameterized type
 	 * 
 	 * @param start
 	 *  	Start of the selection
@@ -199,7 +202,7 @@ public interface ISelectionRequestor {
 		char[] packageName,
 		char[] interfaceName,
 		boolean isDeclaration,
-		char[] uniqueKey,
+		char[] genericTypeSignature,
 		int start,
 		int end);
 
@@ -236,9 +239,14 @@ public interface ISelectionRequestor {
 	 * @param isDeclaration boolean
 	 *  	Answer if the selected method is a declaration
 	 * 
-	 * @param uniqueKey
-	 *  	unique key of the selected method if it is a
-	 *  	parameterized method ({@link org.eclipse.jdt.internal.compiler.lookup.Binding#computeUniqueKey()})
+	 * @param genericDeclaringTypeSignature
+	 *  	generic signature of the method's declaring type
+	 *  
+	 * @param genericSignature
+	 *  	method's generic signature
+	 *  
+	 * @param genericTypeArgumentsSignatures
+	 *  	genric types of the method's type arguments
 	 *  
 	 * @param start
 	 *  	Start of the selection
@@ -264,7 +272,9 @@ public interface ISelectionRequestor {
 		String[] parameterSignatures,
 		boolean isConstructor,
 		boolean isDeclaration,
-		char[] uniqueKey,
+		char[] genericDeclaringTypeSignature,
+		char[] genericSignature,
+		char[][] genericTypeArgumentsSignatures,
 		int start,
 		int end);
 	
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
index 184dbd3..df6a98c 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
@@ -859,7 +859,7 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 				char[] genericTypeSignature = null;
 				if(typeBinding.isParameterizedType() || typeBinding.isRawType()) {
 					completeLocalTypes(typeBinding);
-					genericTypeSignature = typeBinding.computeUniqueKey();
+					genericTypeSignature = typeBinding.genericTypeSignature();
 				}
 				if (typeBinding.isAnnotationType()) {
 					this.requestor.acceptAnnotation(
@@ -918,10 +918,24 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 					}
 					((SelectionRequestor)this.requestor).acceptLocalMethod(methodBinding);
 				} else {
-					char[] uniqueKey = null;
+					char[] genericDeclaringTypeSignature = null;
+					char[] genericSignature = null;
+					char[][] genericTypeArgumentsSignatures = null;
 					if(methodBinding instanceof ParameterizedMethodBinding) {
 						completeLocalTypes(methodBinding);
-						uniqueKey = methodBinding.computeUniqueKey();
+						genericDeclaringTypeSignature = methodBinding.declaringClass.genericTypeSignature();
+						genericSignature = methodBinding.genericSignature();
+						if(methodBinding instanceof ParameterizedGenericMethodBinding) {
+							ParameterizedGenericMethodBinding genericMethodBinding = (ParameterizedGenericMethodBinding) methodBinding;
+							if(!genericMethodBinding.isRaw) {
+								TypeBinding[] typeArguments = genericMethodBinding.typeArguments;
+								int typeArgumentsCount = typeArguments.length;
+								genericTypeArgumentsSignatures = new char[typeArgumentsCount][];
+								for (int i = 0; i < typeArgumentsCount; i++) {
+									genericTypeArgumentsSignatures[i] = typeArguments[i].genericTypeSignature();
+								}
+							}
+						}
 					}
 					this.requestor.acceptMethod(
 						declaringClass.qualifiedPackageName(),
@@ -935,7 +949,9 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 						parameterSignatures,
 						methodBinding.isConstructor(), 
 						isDeclaration,
-						uniqueKey,
+						genericDeclaringTypeSignature,
+						genericSignature,
+						genericTypeArgumentsSignatures,
 						this.actualSelectionStart,
 						this.actualSelectionEnd);
 				}
@@ -952,17 +968,20 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 							}
 							((SelectionRequestor)this.requestor).acceptLocalField(fieldBinding);
 						} else {
-							char[] uniqueKey = null;
+							char[] genericDeclaringTypeSignature = null;
+							char[] genericSignature = null;
 							if(fieldBinding instanceof ParameterizedFieldBinding) {
 								completeLocalTypes(fieldBinding.declaringClass);
-								uniqueKey = fieldBinding.computeUniqueKey();
+								genericDeclaringTypeSignature = fieldBinding.declaringClass.genericTypeSignature();
+								genericSignature = fieldBinding.genericSignature();
 							}
 							this.requestor.acceptField(
 								declaringClass.qualifiedPackageName(),
 								declaringClass.qualifiedSourceName(),
 								fieldBinding.name,
 								false,
-								uniqueKey,
+								genericDeclaringTypeSignature,
+								genericSignature,
 								this.actualSelectionStart,
 								this.actualSelectionEnd);
 						}
@@ -1272,6 +1291,7 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 					fields[i].name,
 					true,
 					null,
+					null,
 					this.actualSelectionStart,
 					this.actualSelectionEnd);
 
@@ -1303,6 +1323,8 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 					method.isConstructor(),
 					true,
 					null,
+					null,
+					null,
 					this.actualSelectionStart,
 					this.actualSelectionEnd);
 				
diff --git a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetToCuMapper.java b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetToCuMapper.java
index 9f36ecc..7bafb23 100644
--- a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetToCuMapper.java
+++ b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetToCuMapper.java
@@ -248,14 +248,14 @@ public char[] getImport(int lineNumber) {
  */
 public ISelectionRequestor getSelectionRequestor(final ISelectionRequestor originalRequestor) {
 	return new ISelectionRequestor() {
-		public void acceptAnnotation(char[] packageName, char[] annotationName, boolean isDeclaration, char[] uniqueKey, int start, int end) {
-			originalRequestor.acceptAnnotation(packageName, annotationName, isDeclaration, uniqueKey, start, end);
+		public void acceptAnnotation(char[] packageName, char[] annotationName, boolean isDeclaration, char[] genericTypeSignature, int start, int end) {
+			originalRequestor.acceptAnnotation(packageName, annotationName, isDeclaration, genericTypeSignature, start, end);
 		}
-		public void acceptClass(char[] packageName, char[] className, boolean isDeclaration, char[] uniqueKey, int start, int end) {
-			originalRequestor.acceptClass(packageName, className, isDeclaration, uniqueKey, start, end);
+		public void acceptClass(char[] packageName, char[] className, boolean isDeclaration, char[] genericTypeSignature, int start, int end) {
+			originalRequestor.acceptClass(packageName, className, isDeclaration, genericTypeSignature, start, end);
 		}
-		public void acceptEnum(char[] packageName, char[] enumName, boolean isDeclaration, char[] uniqueKey, int start, int end) {
-			originalRequestor.acceptClass(packageName, enumName, isDeclaration, uniqueKey, start, end);
+		public void acceptEnum(char[] packageName, char[] enumName, boolean isDeclaration, char[] genericTypeSignature, int start, int end) {
+			originalRequestor.acceptClass(packageName, enumName, isDeclaration, genericTypeSignature, start, end);
 		}
 		public void acceptError(IProblem error) {
 			error.setSourceLineNumber(error.getSourceLineNumber() -  CodeSnippetToCuMapper.this.lineNumberOffset);
@@ -263,14 +263,14 @@ public ISelectionRequestor getSelectionRequestor(final ISelectionRequestor origi
 			error.setSourceEnd(error.getSourceEnd() - CodeSnippetToCuMapper.this.startPosOffset);
 			originalRequestor.acceptError(error);
 		}
-		public void acceptField(char[] declaringTypePackageName, char[] declaringTypeName, char[] name, boolean isDeclaration, char[] uniqueKey, int start, int end) {
-			originalRequestor.acceptField(declaringTypePackageName, declaringTypeName, name, isDeclaration, uniqueKey, start, end);
+		public void acceptField(char[] declaringTypePackageName, char[] declaringTypeName, char[] name, boolean isDeclaration, char[] genericDeclaringTypeSignature, char[] genericTypeSignature, int start, int end) {
+			originalRequestor.acceptField(declaringTypePackageName, declaringTypeName, name, isDeclaration, genericDeclaringTypeSignature, genericTypeSignature, start, end);
 		}
-		public void acceptInterface(char[] packageName, char[] interfaceName, boolean isDeclaration, char[] uniqueKey, int start, int end) {
-			originalRequestor.acceptInterface(packageName, interfaceName, isDeclaration, uniqueKey, start, end);
+		public void acceptInterface(char[] packageName, char[] interfaceName, boolean isDeclaration, char[] genericTypeSignature, int start, int end) {
+			originalRequestor.acceptInterface(packageName, interfaceName, isDeclaration, genericTypeSignature, start, end);
 		}
-		public void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, String enclosingDeclaringTypeSignature, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, String[] parameterSignatures, boolean isConstructor, boolean isDeclaration, char[] uniqueKey, int start, int end) {
-			originalRequestor.acceptMethod(declaringTypePackageName, declaringTypeName, enclosingDeclaringTypeSignature, selector, parameterPackageNames, parameterTypeNames, parameterSignatures, isConstructor, isDeclaration, uniqueKey, start, end);
+		public void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, String enclosingDeclaringTypeSignature, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, String[] parameterSignatures, boolean isConstructor, boolean isDeclaration, char[] genericDeclaringTypeSignature, char[] genericSignature, char[][] genericTypeArgumentsSignatures, int start, int end) {
+			originalRequestor.acceptMethod(declaringTypePackageName, declaringTypeName, enclosingDeclaringTypeSignature, selector, parameterPackageNames, parameterTypeNames, parameterSignatures, isConstructor, isDeclaration, genericDeclaringTypeSignature, genericSignature, genericTypeArgumentsSignatures, start, end);
 		}
 		public void acceptPackage(char[] packageName) {
 			originalRequestor.acceptPackage(packageName);
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NamedMember.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NamedMember.java
index 330c57f..6b1a832 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NamedMember.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NamedMember.java
@@ -59,8 +59,8 @@ public abstract class NamedMember extends Member {
 		return this.name;
 	}
 
-	protected String getFullyQualifiedParameterizedName(String fullyQualifiedName, String uniqueKey) throws JavaModelException {
-		char[][] typeArguments = Signature.getTypeArguments(uniqueKey.toCharArray());
+	protected String getFullyQualifiedParameterizedName(String fullyQualifiedName, String genericTypeSignature) throws JavaModelException {
+		char[][] typeArguments = Signature.getTypeArguments(genericTypeSignature.toCharArray());
 		int length = typeArguments.length;
 		if (length == 0) return fullyQualifiedName;
 		StringBuffer buffer = new StringBuffer();
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ParameterizedBinaryField.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ParameterizedBinaryField.java
index b7fd630..ebe24e1 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ParameterizedBinaryField.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ParameterizedBinaryField.java
@@ -16,14 +16,16 @@ package org.eclipse.jdt.internal.core;
  */
 public class ParameterizedBinaryField extends BinaryField {
 	
-	public String uniqueKey;
+	public String genericDeclaringTypeSignature;
+	public String genericSignature;
 	
 	/*
 	 * See class comments.
 	 */
-	public ParameterizedBinaryField(JavaElement parent, String name, String uniqueKey) {
+	public ParameterizedBinaryField(JavaElement parent, String name, String declaringTypeSignature, String typeSignature) {
 		super(parent, name);
-		this.uniqueKey = uniqueKey;
+		this.genericDeclaringTypeSignature = declaringTypeSignature;
+		this.genericSignature = typeSignature;
 	}
 
 	/**
@@ -31,7 +33,9 @@ public class ParameterizedBinaryField extends BinaryField {
 	 */
 	protected void toStringInfo(int tab, StringBuffer buffer, Object info) {
 		super.toStringInfo(tab, buffer, info);
-		buffer.append(" key="); //$NON-NLS-1$
-		buffer.append(uniqueKey);
+		buffer.append(" declaringSignature="); //$NON-NLS-1$
+		buffer.append(genericDeclaringTypeSignature);
+		buffer.append(" signature="); //$NON-NLS-1$
+		buffer.append(genericSignature);
 	}
 }
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ParameterizedBinaryMethod.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ParameterizedBinaryMethod.java
index 835116a..ffd6512 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ParameterizedBinaryMethod.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ParameterizedBinaryMethod.java
@@ -16,14 +16,18 @@ package org.eclipse.jdt.internal.core;
  */
 public class ParameterizedBinaryMethod extends BinaryMethod {
 	
-	public String uniqueKey;
+	public String genericDeclaringTypeSignature;
+	public String genericSignature;
+	public String[] genericTypeArgumentsSignatures;
 	
 	/*
 	 * See class comments.
 	 */
-	public ParameterizedBinaryMethod(JavaElement parent, String name, String[] parameterTypes, String uniqueKey) {
+	public ParameterizedBinaryMethod(JavaElement parent, String name, String[] parameterTypes, String genericDeclaringTypeSignature, String genericSignature, String[] genericTypeArgumentsSignatures) {
 		super(parent, name, parameterTypes);
-		this.uniqueKey = uniqueKey;
+		this.genericDeclaringTypeSignature = genericDeclaringTypeSignature;
+		this.genericSignature = genericSignature;
+		this.genericTypeArgumentsSignatures = genericTypeArgumentsSignatures;
 	}
 
 	/**
@@ -31,7 +35,22 @@ public class ParameterizedBinaryMethod extends BinaryMethod {
 	 */
 	protected void toStringInfo(int tab, StringBuffer buffer, Object info) {
 		super.toStringInfo(tab, buffer, info);
-		buffer.append(" key="); //$NON-NLS-1$
-		buffer.append(uniqueKey);
+		buffer.append(" declaringSignature="); //$NON-NLS-1$
+		buffer.append(genericDeclaringTypeSignature);
+		buffer.append(" signature="); //$NON-NLS-1$
+		buffer.append(genericSignature);
+		buffer.append(" typeArgumentsSignature="); //$NON-NLS-1$
+		int length = this.genericTypeArgumentsSignatures == null ? 0 : this.genericTypeArgumentsSignatures.length;
+		if(length > 0) {
+			buffer.append('<');
+			for (int i = 0; i < length; i++) {
+				if(i != 0) buffer.append(',');
+				buffer.append(genericTypeArgumentsSignatures[i]);
+			}
+			buffer.append('>');
+		} else {
+			buffer.append("null"); //$NON-NLS-1$
+		}
+		
 	}
 }
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ParameterizedBinaryType.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ParameterizedBinaryType.java
index c4352ef..c34f86b 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ParameterizedBinaryType.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ParameterizedBinaryType.java
@@ -18,18 +18,18 @@ import org.eclipse.jdt.core.JavaModelException;
  */
 public class ParameterizedBinaryType extends BinaryType {
 	
-	public String uniqueKey;
+	public String genericTypeSignature;
 	
 	/*
 	 * See class comments.
 	 */
-	public ParameterizedBinaryType(JavaElement parent, String name, String uniqueKey) {
+	public ParameterizedBinaryType(JavaElement parent, String name, String genericTypeSignature) {
 		super(parent, name);
-		this.uniqueKey = uniqueKey;
+		this.genericTypeSignature = genericTypeSignature;
 	}
 
 	public String getFullyQualifiedParameterizedName() throws JavaModelException {
-		return getFullyQualifiedParameterizedName(getFullyQualifiedName(), this.uniqueKey);
+		return getFullyQualifiedParameterizedName(getFullyQualifiedName(), this.genericTypeSignature);
 	}
 	
 	/**
@@ -37,7 +37,7 @@ public class ParameterizedBinaryType extends BinaryType {
 	 */
 	protected void toStringInfo(int tab, StringBuffer buffer, Object info) {
 		super.toStringInfo(tab, buffer, info);
-		buffer.append(" key="); //$NON-NLS-1$
-		buffer.append(uniqueKey);
+		buffer.append(" genericTypeSignature="); //$NON-NLS-1$
+		buffer.append(genericTypeSignature);
 	}
 }
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ParameterizedSourceField.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ParameterizedSourceField.java
index 593ac98..a1251ed 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ParameterizedSourceField.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ParameterizedSourceField.java
@@ -16,14 +16,16 @@ package org.eclipse.jdt.internal.core;
  */
 public class ParameterizedSourceField extends SourceField {
 	
-	public String uniqueKey;
+	public String genericDeclaringTypeSignature;
+	public String genericSignature;
 	
 	/*
 	 * See class comments.
 	 */
-	public ParameterizedSourceField(JavaElement parent, String name, String uniqueKey) {
+	public ParameterizedSourceField(JavaElement parent, String name, String declaringTypeSignature, String typeSignature) {
 		super(parent, name);
-		this.uniqueKey = uniqueKey;
+		this.genericDeclaringTypeSignature = declaringTypeSignature;
+		this.genericSignature = typeSignature;
 	}
 	
 	/**
@@ -31,7 +33,9 @@ public class ParameterizedSourceField extends SourceField {
 	 */
 	protected void toStringInfo(int tab, StringBuffer buffer, Object info) {
 		super.toStringInfo(tab, buffer, info);
-		buffer.append(" key="); //$NON-NLS-1$
-		buffer.append(uniqueKey);
+		buffer.append(" declaringSignature="); //$NON-NLS-1$
+		buffer.append(genericDeclaringTypeSignature);
+		buffer.append(" signature="); //$NON-NLS-1$
+		buffer.append(genericSignature);
 	}
 }
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ParameterizedSourceMethod.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ParameterizedSourceMethod.java
index 6ee2145..13f6b77 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ParameterizedSourceMethod.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ParameterizedSourceMethod.java
@@ -16,14 +16,18 @@ package org.eclipse.jdt.internal.core;
  */
 public class ParameterizedSourceMethod extends SourceMethod {
 	
-	public String uniqueKey;
+	public String genericDeclaringTypeSignature;
+	public String genericSignature;
+	public String[] genericTypeArgumentsSignatures;
 	
 	/*
 	 * See class comments.
 	 */
-	public ParameterizedSourceMethod(JavaElement parent, String name, String[] parameterTypes, String uniqueKey) {
+	public ParameterizedSourceMethod(JavaElement parent, String name, String[] parameterTypes, String genericDeclaringTypeSignature, String genericSignature, String[] genericTypeArgumentsSignatures) {
 		super(parent, name, parameterTypes);
-		this.uniqueKey = uniqueKey;
+		this.genericDeclaringTypeSignature = genericDeclaringTypeSignature;
+		this.genericSignature = genericSignature;
+		this.genericTypeArgumentsSignatures = genericTypeArgumentsSignatures;
 	}
 
 	/**
@@ -31,7 +35,21 @@ public class ParameterizedSourceMethod extends SourceMethod {
 	 */
 	protected void toStringInfo(int tab, StringBuffer buffer, Object info) {
 		super.toStringInfo(tab, buffer, info);
-		buffer.append(" key="); //$NON-NLS-1$
-		buffer.append(uniqueKey);
+		buffer.append(" declaringSignature="); //$NON-NLS-1$
+		buffer.append(genericDeclaringTypeSignature);
+		buffer.append(" signature="); //$NON-NLS-1$
+		buffer.append(genericSignature);
+		buffer.append(" typeArgumentsSignature="); //$NON-NLS-1$
+		int length = this.genericTypeArgumentsSignatures == null ? 0 : this.genericTypeArgumentsSignatures.length;
+		if(length > 0) {
+			buffer.append('<');
+			for (int i = 0; i < length; i++) {
+				if(i != 0) buffer.append(',');
+				buffer.append(genericTypeArgumentsSignatures[i]);
+			}
+			buffer.append('>');
+		} else {
+			buffer.append("null"); //$NON-NLS-1$
+		}
 	}
 }
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ParameterizedSourceType.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ParameterizedSourceType.java
index 304f0cf..4d24395 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ParameterizedSourceType.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ParameterizedSourceType.java
@@ -18,18 +18,18 @@ import org.eclipse.jdt.core.JavaModelException;
  */
 public class ParameterizedSourceType extends SourceType {
 	
-	public String uniqueKey;
+	public String genericTypeSignature;
 	
 	/*
 	 * See class comments.
 	 */
-	public ParameterizedSourceType(JavaElement parent, String name, String uniqueKey) {
+	public ParameterizedSourceType(JavaElement parent, String name, String genericTypeSignature) {
 		super(parent, name);
-		this.uniqueKey = uniqueKey;
+		this.genericTypeSignature = genericTypeSignature;
 	}
 	
 	public String getFullyQualifiedParameterizedName() throws JavaModelException {
-		return getFullyQualifiedParameterizedName(getFullyQualifiedName(), this.uniqueKey);
+		return getFullyQualifiedParameterizedName(getFullyQualifiedName(), this.genericTypeSignature);
 	}
 	
 	/**
@@ -37,7 +37,7 @@ public class ParameterizedSourceType extends SourceType {
 	 */
 	protected void toStringInfo(int tab, StringBuffer buffer, Object info) {
 		super.toStringInfo(tab, buffer, info);
-		buffer.append(" key="); //$NON-NLS-1$
-		buffer.append(uniqueKey);
+		buffer.append(" genericTypeSignature="); //$NON-NLS-1$
+		buffer.append(genericTypeSignature);
 	}
 }
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java
index f6f6fb6..8fe98d0 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java
@@ -33,6 +33,7 @@ import org.eclipse.jdt.internal.compiler.lookup.LocalTypeBinding;
 import org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding;
 import org.eclipse.jdt.internal.compiler.lookup.MethodBinding;
 import org.eclipse.jdt.internal.compiler.lookup.ParameterizedFieldBinding;
+import org.eclipse.jdt.internal.compiler.lookup.ParameterizedGenericMethodBinding;
 import org.eclipse.jdt.internal.compiler.lookup.ParameterizedMethodBinding;
 import org.eclipse.jdt.internal.compiler.lookup.ParameterizedTypeBinding;
 import org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding;
@@ -79,15 +80,25 @@ public SelectionRequestor(NameLookup nameLookup, Openable openable) {
  *
  * fix for 1FWFT6Q
  */
-protected void acceptBinaryMethod(IType type, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, String[] paramterSignatures, char[] uniqueKey) {
+protected void acceptBinaryMethod(IType type, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, String[] paramterSignatures, char[] genericDeclaringTypeSignature, char[] genericSignature, char[][] genericTypeArgumentsSignatures) {
 	IMethod method= type.getMethod(new String(selector), paramterSignatures);
 	if (method.exists()) {
-		if(uniqueKey != null) {
+		if(genericDeclaringTypeSignature != null) {
+			String[] typeArguments = null;
+			if(genericTypeArgumentsSignatures != null) {
+				typeArguments = new String[genericTypeArgumentsSignatures.length];
+				for (int i = 0; i < typeArguments.length; i++) {
+					typeArguments[i] = new String(genericTypeArgumentsSignatures[i]);
+				}
+			}
+			
 			method = new ParameterizedBinaryMethod(
 					(JavaElement)method.getParent(),
 					method.getElementName(),
 					method.getParameterTypes(),
-					new String(uniqueKey));
+					new String(genericDeclaringTypeSignature),
+					genericSignature == null ? null : new String(genericSignature),
+					typeArguments);
 		}
 		addElement(method);
 		if(SelectionEngine.DEBUG){
@@ -124,7 +135,7 @@ public void acceptError(IProblem error) {
 /**
  * Resolve the field.
  */
-public void acceptField(char[] declaringTypePackageName, char[] declaringTypeName, char[] name, boolean isDeclaration, char[] uniqueKey, int start, int end) {
+public void acceptField(char[] declaringTypePackageName, char[] declaringTypeName, char[] name, boolean isDeclaration, char[] genericDeclaringTypeSignature, char[] genericTypeSignature, int start, int end) {
 	if(isDeclaration) {
 		IType type= resolveTypeByLocation(declaringTypePackageName, declaringTypeName,
 				NameLookup.ACCEPT_ALL,
@@ -156,17 +167,19 @@ public void acceptField(char[] declaringTypePackageName, char[] declaringTypeNam
 		if (type != null) {
 			IField field= type.getField(new String(name));
 			if (field.exists()) {
-				if(uniqueKey != null) {
+				if(genericDeclaringTypeSignature != null) {
 					if(field.isBinary()) {
 						field = new ParameterizedBinaryField(
 								(JavaElement)field.getParent(),
 								field.getElementName(),
-								new String(uniqueKey));
+								new String(genericDeclaringTypeSignature),
+								genericTypeSignature == null ? null : new String(genericTypeSignature));
 					} else {
 						field = new ParameterizedSourceField(
 								(JavaElement)field.getParent(),
 								field.getElementName(),
-								new String(uniqueKey));
+								new String(genericDeclaringTypeSignature),
+								genericTypeSignature == null ? null : new String(genericTypeSignature));
 					}
 				}
 				addElement(field);
@@ -199,16 +212,19 @@ public void acceptLocalField(FieldBinding fieldBinding) {
 		IField field= type.getField(new String(fieldBinding.name));
 		if (field.exists()) {
 			if (fieldBinding instanceof ParameterizedFieldBinding) {
+				char[] genericSignature = fieldBinding.genericSignature();
 				if(field.isBinary()) {
 					field = new ParameterizedBinaryField(
 							(JavaElement)field.getParent(),
 							field.getElementName(),
-							new String(fieldBinding.computeUniqueKey()));
+							new String(fieldBinding.declaringClass.genericTypeSignature()),
+							genericSignature == null ? null : new String(genericSignature));
 				} else {
 					field = new ParameterizedSourceField(
 							(JavaElement)field.getParent(),
 							field.getElementName(),
-							new String(fieldBinding.computeUniqueKey()));
+							new String(fieldBinding.declaringClass.genericTypeSignature()),
+							genericSignature == null ? null : new String(genericSignature));
 				}
 			}
 			addElement(field);
@@ -224,16 +240,38 @@ public void acceptLocalMethod(MethodBinding methodBinding) {
 	IJavaElement res = findLocalElement(methodBinding.sourceStart());
 	if(res != null && res.getElementType() == IJavaElement.METHOD) {
 		if (methodBinding instanceof ParameterizedMethodBinding) {
-			if(((IMethod)res).isBinary()) {
-				res = new ParameterizedBinaryField(
+			IMethod method = (IMethod) res;
+			
+			char[] genericSignature = methodBinding.genericSignature();
+			
+			String[] typeArgumentsSignature = null;
+			if(methodBinding instanceof ParameterizedGenericMethodBinding) {
+				ParameterizedGenericMethodBinding genericMethodBinding = (ParameterizedGenericMethodBinding) methodBinding;
+				if(!genericMethodBinding.isRaw) {
+					TypeBinding[] typeArguments = genericMethodBinding.typeArguments;
+					int typeArgumentsCount = typeArguments.length;
+					for (int i = 0; i < typeArgumentsCount; i++) {
+						typeArgumentsSignature[i] = new String(typeArguments[i].genericTypeSignature());
+					}
+				}
+			}
+			
+			if(method.isBinary()) {
+				res = new ParameterizedBinaryMethod(
 						(JavaElement)res.getParent(),
-						res.getElementName(),
-						new String(methodBinding.computeUniqueKey()));
+						method.getElementName(),
+						method.getParameterTypes(), 
+						new String(methodBinding.declaringClass.genericTypeSignature()),
+						genericSignature == null ? null : new String(genericSignature),
+						typeArgumentsSignature);
 			} else {
-				res = new ParameterizedSourceField(
+				res = new ParameterizedSourceMethod(
 						(JavaElement)res.getParent(),
-						res.getElementName(),
-						new String(methodBinding.computeUniqueKey()));
+						method.getElementName(),
+						method.getParameterTypes(), 
+						new String(methodBinding.declaringClass.genericTypeSignature()),
+						genericSignature == null ? null : new String(genericSignature),
+						typeArgumentsSignature);
 			}
 		}
 		addElement(res);
@@ -250,7 +288,7 @@ public void acceptLocalType(TypeBinding typeBinding) {
 		LocalTypeBinding localTypeBinding = (LocalTypeBinding)((ParameterizedTypeBinding)typeBinding).type;
 		res = findLocalElement(localTypeBinding.sourceStart());
 		if(typeBinding.isParameterizedType()) {
-			res = new ParameterizedSourceType((JavaElement)res.getParent(), res.getElementName(), new String(typeBinding.computeUniqueKey()));
+			res = new ParameterizedSourceType((JavaElement)res.getParent(), res.getElementName(), new String(typeBinding.genericTypeSignature()));
 		}
 	} else if(typeBinding instanceof SourceTypeBinding) {
 		res = findLocalElement(((SourceTypeBinding)typeBinding).sourceStart());
@@ -290,7 +328,7 @@ public void acceptLocalVariable(LocalVariableBinding binding) {
 /**
  * Resolve the method
  */
-public void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, String enclosingDeclaringTypeSignature, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, String[] parameterSignatures, boolean isConstructor, boolean isDeclaration, char[] uniqueKey, int start, int end) {
+public void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, String enclosingDeclaringTypeSignature, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, String[] parameterSignatures, boolean isConstructor, boolean isDeclaration, char[] genericDeclaringTypeSignature, char[] genericSignature, char[][] genericTypeArgumetsSignatures, int start, int end) {
 	IJavaElement[] previousElement = this.elements;
 	int previousElementIndex = this.elementIndex;
 	this.elements = JavaElement.NO_ELEMENTS;
@@ -332,9 +370,9 @@ public void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeNa
 					parameterSignatures[0] = enclosingDeclaringTypeSignature;
 				}
 				
-				acceptBinaryMethod(type, selector, parameterPackageNames, parameterTypeNames, parameterSignatures, uniqueKey);
+				acceptBinaryMethod(type, selector, parameterPackageNames, parameterTypeNames, parameterSignatures, genericDeclaringTypeSignature, genericSignature, genericTypeArgumetsSignatures);
 			} else {
-				acceptSourceMethod(type, selector, parameterPackageNames, parameterTypeNames, uniqueKey);
+				acceptSourceMethod(type, selector, parameterPackageNames, parameterTypeNames, genericDeclaringTypeSignature, genericSignature, genericTypeArgumetsSignatures);
 			}
 		}
 	}
@@ -369,7 +407,7 @@ public void acceptPackage(char[] packageName) {
  *
  * fix for 1FWFT6Q
  */
-protected void acceptSourceMethod(IType type, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, char[] uniqueKey) {
+protected void acceptSourceMethod(IType type, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, char[] genericDeclaringTypeSignature, char[] genericSignature, char[][] genericTypeArgumentsSignatures) {
 	String name = new String(selector);
 	IMethod[] methods = null;
 	try {
@@ -377,13 +415,23 @@ protected void acceptSourceMethod(IType type, char[] selector, char[][] paramete
 		for (int i = 0; i < methods.length; i++) {
 			if (methods[i].getElementName().equals(name)
 					&& methods[i].getParameterTypes().length == parameterTypeNames.length) {
-				if(uniqueKey != null) {
+				if(genericDeclaringTypeSignature != null) {
 					IMethod method = methods[i];
+					
+					String[] typeArguments = null;
+					if(genericTypeArgumentsSignatures != null) {
+						typeArguments = new String[genericTypeArgumentsSignatures.length];
+						for (int j = 0; j < typeArguments.length; j++) {
+							typeArguments[j] = new String(genericTypeArgumentsSignatures[j]);
+						}
+					}
 					ParameterizedSourceMethod parameterizedSourceMethod = new ParameterizedSourceMethod(
 							(JavaElement)method.getParent(),
 							method.getElementName(),
 							method.getParameterTypes(),
-							new String(uniqueKey));
+							new String(genericDeclaringTypeSignature),
+							genericSignature == null ? null : new String(genericSignature),
+							typeArguments);
 					addElement(parameterizedSourceMethod);
 				} else {
 					addElement(methods[i]);
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceType.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceType.java
index d9b120f..29cdca0 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceType.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceType.java
@@ -776,10 +776,10 @@ public String[][] resolveType(String typeName, WorkingCopyOwner owner) throws Ja
 		public void acceptError(IProblem error) {
 			// ignore
 		}
-		public void acceptField(char[] declaringTypePackageName, char[] declaringTypeName, char[] fieldName, boolean isDeclaration, char[] uniqueKey, int start, int end) {
+		public void acceptField(char[] declaringTypePackageName, char[] declaringTypeName, char[] fieldName, boolean isDeclaration, char[] genericDeclaringType, char[] genericType, int start, int end) {
 			// ignore
 		}
-		public void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, String enclosingDeclaringTypeSignature, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, String[] parameterSignatures, boolean isConstructor, boolean isDeclaration, char[] uniqueKey, int start, int end) {
+		public void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, String enclosingDeclaringTypeSignature, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, String[] parameterSignatures, boolean isConstructor, boolean isDeclaration, char[] genericDeclaringTypeSignature, char[] genericSignature, char[][] genericTypeArgumentsSignatures, int start, int end) {
 			// ignore
 		}
 		public void acceptPackage(char[] packageName){

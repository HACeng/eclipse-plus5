commit 9ae3eed40c22a55c55db2d88a9a2fe58acf0278f
Author: Jim Desrivieres <jdesrivieres>
Date:   Tue Apr 27 15:30:35 2004 +0000

    Remove obsolete AST.LEVEL* constants (bug 59788)

0	14	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java
index 102f2cc..05e7bdb 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java
@@ -117,20 +117,6 @@ public final class AST {
 	public static final int JLS3 = 3;
 	
 	/**
-	 * @since 3.0
-	 * @deprecated Renamed {@link #JLS2}.
-	 * // TODO (jeem) - remove after I20040427
-	 */
-	public static final int LEVEL_2_0 = JLS2;
-	
-	/**
-	 * @since 3.0
-	 * @deprecated Renamed {@link #JLS3}.
-	 * // TODO (jeem) - remove after I20040427
-	 */
-	public static final int LEVEL_3_0 = JLS3;
-	
-	/**
 	 * The binding resolver for this AST. Initially a binding resolver that
 	 * does not resolve names at all.
 	 */
commit b8323ccd49cf224a0070d2cb1a7a617400e273ad
Author: Jim Desrivieres <jdesrivieres>
Date:   Tue Apr 27 16:07:18 2004 +0000

    Improve comments re: JLS level (bug 59788)

22	22	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java
2	2	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java
4	4	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTNode.java
2	2	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnnotationTypeDeclaration.java
2	2	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnnotationTypeMemberDeclaration.java
2	2	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ArrayCreation.java
11	11	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BodyDeclaration.java
25	25	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ClassInstanceCreation.java
5	5	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnit.java
6	6	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ConstructorInvocation.java
1	1	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/EnhancedForStatement.java
2	2	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/EnumConstantDeclaration.java
3	3	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/EnumDeclaration.java
3	3	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/FieldDeclaration.java
8	8	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ImportDeclaration.java
3	3	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Initializer.java
4	4	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Javadoc.java
1	1	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MarkerAnnotation.java
1	1	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MemberValuePair.java
31	31	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java
6	6	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodInvocation.java
1	1	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java
1	1	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NormalAnnotation.java
8	8	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/PackageDeclaration.java
1	1	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ParameterizedType.java
2	2	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/QualifiedType.java
1	1	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleMemberAnnotation.java
18	18	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleVariableDeclaration.java
2	2	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Statement.java
6	6	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SuperConstructorInvocation.java
6	6	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SuperMethodInvocation.java
2	1	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Type.java
34	34	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeDeclaration.java
13	13	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeDeclarationStatement.java
1	1	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeParameter.java
14	14	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclarationExpression.java
15	15	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclarationStatement.java
1	1	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/WildcardType.java
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java
index 05e7bdb..b94b440 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java
@@ -93,7 +93,7 @@ public final class AST {
      *
 	 * @since 3.0
 	 */
-	// TODO (jeem) deprecated Clients should use the level 3 API.
+	// TODO (jeem) deprecated Clients should use the JLS3 API.
 	public static final int JLS2 = 2;
 	
 	/**
@@ -213,7 +213,7 @@ public final class AST {
 	 * 
 	 * @see JavaCore#getDefaultOptions()
 	 */
-	// TODO (jeem) deprecated Clients should port their code to use the new 3.0 API and call {@link #newAST(int)} instead of using this constructor.
+	// TODO (jeem) deprecated Clients should port their code to use the new JLS3 API and call {@link #newAST(int)} instead of using this constructor.
 	public AST() {
 		this(JavaCore.getDefaultOptions());
 	}
@@ -273,7 +273,7 @@ public final class AST {
 	 *    value type: <code>String</code>)
 	 * @see JavaCore#getDefaultOptions()
 	 */
-	// TODO (jeem) deprecated Clients should port their code to use the new 3.0 API and call {@link #newAST(int)} instead of using this constructor.
+	// TODO (jeem) deprecated Clients should port their code to use the new JLS3 API and call {@link #newAST(int)} instead of using this constructor.
 	public AST(Map options) {
 		this(JLS2);
 		// override scanner if 1.4 asked for
@@ -294,7 +294,7 @@ public final class AST {
      * (AST) following the specified set of API rules. 
      * <p>
      * Clients should use this method. It is provided only so that
-     * test suites can create AST instances that employ the 2.0 APIs.
+     * test suites can create AST instances that employ the JLS2 APIs.
      * </p>
      * 
  	 * @param level the API level; one of the LEVEL constants
@@ -1086,27 +1086,27 @@ public final class AST {
 
 	/**
      * Checks that this AST operation is not used when
-     * building level 2.0 ASTs.
+     * building level JLS2 ASTs.
 
      * @exception UnsupportedOperationException
 	 * @since 3.0
      */
 	void unsupportedIn2() {
 	  if (this.apiLevel == AST.JLS2) {
-	  	throw new UnsupportedOperationException("Operation not supported in 2.0 AST"); //$NON-NLS-1$
+	  	throw new UnsupportedOperationException("Operation not supported in JLS2 AST"); //$NON-NLS-1$
 	  }
 	}
 
 	/**
      * Checks that this AST operation is only used when
-     * building level 2.0 ASTs.
+     * building level JLS2 ASTs.
 
      * @exception UnsupportedOperationException
 	 * @since 3.0
      */
 	void supportedOnlyIn2() {
 	  if (this.apiLevel != AST.JLS2) {
-	  	throw new UnsupportedOperationException("Operation not supported in 2.0 AST"); //$NON-NLS-1$
+	  	throw new UnsupportedOperationException("Operation not supported in JLS2 AST"); //$NON-NLS-1$
 	  }
 	}
 
@@ -1343,7 +1343,7 @@ public final class AST {
 	 * <li>the node already has a parent</li>
 	 * </ul>
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * a 2.0 AST
+	 * a JLS2 AST
 	 * @since 3.0
 	 */
 	public ParameterizedType newParameterizedType(Type type) {
@@ -1365,7 +1365,7 @@ public final class AST {
 	 * <li>the node already has a parent</li>
 	 * </ul>
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * a 2.0 AST
+	 * a JLS2 AST
 	 * @since 3.0
 	 */
 	public QualifiedType newQualifiedType(Type qualifier, SimpleName name) {
@@ -1386,7 +1386,7 @@ public final class AST {
 	 * <li>the node already has a parent</li>
 	 * </ul>
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * a 2.0 AST
+	 * a JLS2 AST
 	 * @since 3.0
 	 */
 	public WildcardType newWildcardType() {
@@ -1532,7 +1532,7 @@ public final class AST {
 	 * 
 	 * @return a new unparented enum constant declaration node
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * a 2.0 AST
+	 * a JLS2 AST
 	 * @since 3.0
 	 */
 	public EnumConstantDeclaration newEnumConstantDeclaration() {
@@ -1548,7 +1548,7 @@ public final class AST {
 	 * 
 	 * @return a new unparented enum declaration node
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * a 2.0 AST
+	 * a JLS2 AST
 	 * @since 3.0
 	 */
 	public EnumDeclaration newEnumDeclaration() {
@@ -1562,7 +1562,7 @@ public final class AST {
 	 * 
 	 * @return a new unparented type parameter node
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * a 2.0 AST
+	 * a JLS2 AST
 	 * @since 3.0
 	 */
 	public TypeParameter newTypeParameter() {
@@ -1577,7 +1577,7 @@ public final class AST {
 	 * 
 	 * @return a new unparented annotation type declaration node
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * a 2.0 AST
+	 * a JLS2 AST
 	 * @since 3.0
 	 */
 	public AnnotationTypeDeclaration newAnnotationTypeDeclaration() {
@@ -1593,7 +1593,7 @@ public final class AST {
 	 * 
 	 * @return a new unparented annotation type member declaration node
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * a 2.0 AST
+	 * a JLS2 AST
 	 * @since 3.0
 	 */
 	public AnnotationTypeMemberDeclaration newAnnotationTypeMemberDeclaration() {
@@ -1609,7 +1609,7 @@ public final class AST {
 	 * @return a new unparented modifier node
 	 * @exception IllegalArgumentException if the primitive type code is invalid
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * a 2.0 AST
+	 * a JLS2 AST
 	 * @since 3.0
 	 */
 	public Modifier newModifier(Modifier.ModifierKeyword keyword) {
@@ -2053,7 +2053,7 @@ public final class AST {
 	 * 
 	 * @return a new unparented throw statement node
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * a 2.0 AST
+	 * a JLS2 AST
 	 * @since 3.0
 	 */
 	public EnhancedForStatement newEnhancedForStatement() {
@@ -2509,7 +2509,7 @@ public final class AST {
 	 * 
 	 * @return a new unparented normal annotation node
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * a 2.0 AST
+	 * a JLS2 AST
 	 * @since 3.0
 	 */
 	public NormalAnnotation newNormalAnnotation() {
@@ -2523,7 +2523,7 @@ public final class AST {
 	 * 
 	 * @return a new unparented marker annotation node
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * a 2.0 AST
+	 * a JLS2 AST
 	 * @since 3.0
 	 */
 	public MarkerAnnotation newMarkerAnnotation() {
@@ -2537,7 +2537,7 @@ public final class AST {
 	 * 
 	 * @return a new unparented single member annotation node
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * a 2.0 AST
+	 * a JLS2 AST
 	 * @since 3.0
 	 */
 	public SingleMemberAnnotation newSingleMemberAnnotation() {
@@ -2551,7 +2551,7 @@ public final class AST {
 	 * 
 	 * @return a new unparented member value pair node
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * a 2.0 AST
+	 * a JLS2 AST
 	 * @since 3.0
 	 */
 	public MemberValuePair newMemberValuePair() {
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java
index e8e8d8d..929359b 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java
@@ -179,7 +179,7 @@ public class ASTMatcher {
 			return false;
 		}
 		AnnotationTypeDeclaration o = (AnnotationTypeDeclaration) other;
-		// node type added in 3.0 - ignore old 2.0-style modifiers
+		// node type added in JLS3 - ignore old JLS2-style modifiers
 		return (safeSubtreeMatch(node.getJavadoc(), o.getJavadoc())
 				&& safeSubtreeListMatch(node.modifiers(), o.modifiers())
 				&& safeSubtreeMatch(node.getName(), o.getName())
@@ -206,7 +206,7 @@ public class ASTMatcher {
 			return false;
 		}
 		AnnotationTypeMemberDeclaration o = (AnnotationTypeMemberDeclaration) other;
-		// node type added in 3.0 - ignore old 2.0-style modifiers
+		// node type added in JLS3 - ignore old JLS2-style modifiers
 		return (safeSubtreeMatch(node.getJavadoc(), o.getJavadoc())
 				&& safeSubtreeListMatch(node.modifiers(), o.modifiers())
 				&& safeSubtreeMatch(node.getType(), o.getType())
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTNode.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTNode.java
index 6c31a08..f77901b 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTNode.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTNode.java
@@ -1752,27 +1752,27 @@ public abstract class ASTNode {
 	
 	/**
      * Checks that this AST operation is not used when
-     * building level 2.0 ASTs.
+     * building JLS2 level ASTs.
 
      * @exception UnsupportedOperationException
 	 * @since 3.0
      */
 	final void unsupportedIn2() {
 	  if (this.ast.apiLevel == AST.JLS2) {
-	  	throw new UnsupportedOperationException("Operation not supported in 2.0 AST"); //$NON-NLS-1$
+	  	throw new UnsupportedOperationException("Operation not supported in JLS2 AST"); //$NON-NLS-1$
 	  }
 	}
 
 	/**
      * Checks that this AST operation is only used when
-     * building level 2.0 ASTs.
+     * building JLS2 level ASTs.
 
      * @exception UnsupportedOperationException
 	 * @since 3.0
      */
 	final void supportedOnlyIn2() {
 	  if (this.ast.apiLevel != AST.JLS2) {
-	  	throw new UnsupportedOperationException("Operation only supported in 2.0 AST"); //$NON-NLS-1$
+	  	throw new UnsupportedOperationException("Operation only supported in JLS2 AST"); //$NON-NLS-1$
 	  }
 	}
 
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnnotationTypeDeclaration.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnnotationTypeDeclaration.java
index 3311793..26b465a 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnnotationTypeDeclaration.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnnotationTypeDeclaration.java
@@ -13,7 +13,7 @@ package org.eclipse.jdt.core.dom;
 import java.util.List;
 
 /**
- * Annotation type declaration AST node type (added in 3.0 API).
+ * Annotation type declaration AST node type (added in JLS3 API).
  * <pre>
  * AnnotationTypeDeclaration:
  *   [ Javadoc ] { ExtendedModifier } <b>@</b> <b>interface</b> Identifier
@@ -184,7 +184,7 @@ public class AnnotationTypeDeclaration extends AbstractTypeDeclaration {
 	 * Method declared on BodyDeclaration.
 	 */
 	final SimplePropertyDescriptor internalModifiersProperty() {
-		// this property will not be asked for (node type did not exist in 2.0)
+		// this property will not be asked for (node type did not exist in JLS2)
 		return null;
 	}
 
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnnotationTypeMemberDeclaration.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnnotationTypeMemberDeclaration.java
index 796362c..e9611ce 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnnotationTypeMemberDeclaration.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnnotationTypeMemberDeclaration.java
@@ -13,7 +13,7 @@ package org.eclipse.jdt.core.dom;
 import java.util.List;
 
 /**
- * Annotation type member declaration AST node type (added in 3.0 API).
+ * Annotation type member declaration AST node type (added in JLS3 API).
  * <pre>
  * AnnotationTypeMemberDeclaration:
  *   [ Javadoc ] { ExtendedModifier }
@@ -226,7 +226,7 @@ public class AnnotationTypeMemberDeclaration extends BodyDeclaration {
 	 * Method declared on BodyDeclaration.
 	 */
 	final SimplePropertyDescriptor internalModifiersProperty() {
-		// this property will not be asked for (node type did not exist in 2.0)
+		// this property will not be asked for (node type did not exist in JLS2)
 		return null;
 	}
 
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ArrayCreation.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ArrayCreation.java
index 4f0f049..5aeb4f8 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ArrayCreation.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ArrayCreation.java
@@ -14,7 +14,7 @@ import java.util.List;
 
 /**
  * Array creation expression AST node type.
- * For 2.0 (corresponding to JLS2):
+ * For JLS2:
  * <pre>
  * ArrayCreation:
  *    <b>new</b> PrimitiveType <b>[</b> Expression <b>]</b> { <b>[</b> Expression <b>]</b> } { <b>[</b> <b>]</b> }
@@ -31,7 +31,7 @@ import java.util.List;
  *   list.</li>
  * </ul>
  * </p>
- * For 3.0 (corresponding to JLS3), type arguments are added:
+ * For JLS3, type arguments are added:
  * <pre>
  * ArrayCreation:
  *    <b>new</b> PrimitiveType <b>[</b> Expression <b>]</b> { <b>[</b> Expression <b>]</b> } { <b>[</b> <b>]</b> }
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BodyDeclaration.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BodyDeclaration.java
index dda60ea..3d32c88 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BodyDeclaration.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BodyDeclaration.java
@@ -20,7 +20,7 @@ import java.util.List;
  * including anonymous class declarations, enumeration declarations, and
  * enumeration constant declarations.
  * <p>
- * For 2.0 (corresponding to JLS2):
+ * For JLS2:
  * <pre>
  * BodyDeclaration:
  *		ClassDeclaration
@@ -30,7 +30,7 @@ import java.util.List;
  * 		FieldDeclaration
  * 		Initializer
  * </pre>
- * For 3.0 (corresponding to JLS3), a number of new node types were introduced:
+ * For JLS3, a number of new node types were introduced:
  * <pre>
  * BodyDeclaration:
  *		ClassDeclaration
@@ -71,7 +71,7 @@ public abstract class BodyDeclaration extends ASTNode {
 	
 	/**
 	 * The extended modifiers (element type: <code>IExtendedModifier</code>). 
-	 * Null in 2.0. Added in 3.0; defaults to an empty list
+	 * Null in JLS2. Added in JLS3; defaults to an empty list
 	 * (see constructor).
 	 * 
 	 * @since 3.0
@@ -174,7 +174,7 @@ public abstract class BodyDeclaration extends ASTNode {
 	/**
 	 * Returns the modifiers explicitly specified on this declaration.
 	 * <p>
-	 * In the 3.0 API, this method is a convenience method that
+	 * In the JLS3 API, this method is a convenience method that
 	 * computes these flags from <code>modifiers()</code>.
 	 * </p>
 	 * 
@@ -184,10 +184,10 @@ public abstract class BodyDeclaration extends ASTNode {
 	public int getModifiers() {
 		// more efficient than checking getAST().API_LEVEL
 		if (this.modifiers == null) {
-			// 2.0 behavior - bona fide property
+			// JLS2 behavior - bona fide property
 			return this.modifierFlags;
 		} else {
-			// 3.0 behavior - convenience method
+			// JLS3 behavior - convenience method
 			// performance could be improved by caching computed flags
 			// but this would require tracking changes to this.modifiers
 			int computedmodifierFlags = Modifier.NONE;
@@ -202,14 +202,14 @@ public abstract class BodyDeclaration extends ASTNode {
 	}
 
 	/**
-	 * Sets the modifiers explicitly specified on this declaration (2.0 API only).
+	 * Sets the modifiers explicitly specified on this declaration (JLS2 API only).
 	 * 
 	 * @param modifiers the given modifiers (bit-wise or of <code>Modifier</code> constants)
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * an AST later than 2.0
+	 * an AST later than JLS2
 	 * @see Modifier
 	 */ 
-	// TODO (jeem ) - deprecated In the 3.0 API, this method is replaced by <code>modifiers()</code> which contains a list of a <code>Modifier</code> nodes.
+	// TODO (jeem ) - deprecated In the JLS3 API, this method is replaced by <code>modifiers()</code> which contains a list of a <code>Modifier</code> nodes.
 	public void setModifiers(int modifiers) {
 		// more efficient than just calling supportedOnlyIn2() to check
 		if (this.modifiers != null) {
@@ -223,12 +223,12 @@ public abstract class BodyDeclaration extends ASTNode {
 
 	/**
 	 * Returns the live ordered list of modifiers and annotations
-	 * of this declaration (added in 3.0 API).
+	 * of this declaration (added in JLS3 API).
 	 * 
 	 * @return the live list of modifiers and annotations
 	 *    (element type: <code>IExtendedModifier</code>)
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * a 2.0 AST
+	 * a JLS2 AST
 	 * @since 3.0
 	 */ 
 	public List modifiers() {
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ClassInstanceCreation.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ClassInstanceCreation.java
index c9baa26..08a24b2 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ClassInstanceCreation.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ClassInstanceCreation.java
@@ -15,14 +15,14 @@ import java.util.List;
 
 /**
  * Class instance creation expression AST node type.
- * For 2.0 (corresponding to JLS2):
+ * For JLS2:
  * <pre>
  * ClassInstanceCreation:
  *        [ Expression <b>.</b> ] <b>new</b> Name
  *            <b>(</b> [ Expression { <b>,</b> Expression } ] <b>)</b>
  *            [ AnonymousClassDeclaration ]
  * </pre>
- * For 3.0 (corresponding to JLS3), type arguments are added
+ * For JLS3, type arguments are added
  * and the type name is generalized to a type so that parameterized
  * types can be instantiated:
  * <pre>
@@ -52,8 +52,8 @@ import java.util.List;
  * The first form is preferred when "A" is known to be a type (as opposed
  * to a package). However, a parser cannot always determine this. Clients
  * should be prepared to handle either rather than make assumptions.
- * (Note also that the first form became possible as of 3.0; only the second
- * form existed in 2.0 and 2.1.)
+ * (Note also that the first form became possible as of JLS2; only the second
+ * form existed in JLS2.)
  * </p>
  * 
  * @since 2.0
@@ -61,7 +61,7 @@ import java.util.List;
 public class ClassInstanceCreation extends Expression {
 
 	/**
-	 * The "typeArguments" structural property of this node type (added in 3.0 API).
+	 * The "typeArguments" structural property of this node type (added in JLS3 API).
 	 * @since 3.0
 	 */
 	public static final ChildListPropertyDescriptor TYPE_ARGUMENTS_PROPERTY = 
@@ -75,15 +75,15 @@ public class ClassInstanceCreation extends Expression {
 		new ChildPropertyDescriptor(ClassInstanceCreation.class, "expression", Expression.class, OPTIONAL, CYCLE_RISK); //$NON-NLS-1$
 
 	/**
-	 * The "name" structural property of this node type (2.0 API only).
+	 * The "name" structural property of this node type (JLS2 API only).
 	 * @since 3.0
 	 */
-	// TODO (jeem) - @deprecated Replaced by {@link #TYPE_PROPERTY} in the 3.0 API.
+	// TODO (jeem) - @deprecated Replaced by {@link #TYPE_PROPERTY} in the JLS3 API.
 	public static final ChildPropertyDescriptor NAME_PROPERTY = 
 		new ChildPropertyDescriptor(ClassInstanceCreation.class, "name", Name.class, MANDATORY, NO_CYCLE_RISK); //$NON-NLS-1$
 
 	/**
-	 * The "type" structural property of this node type (added in 3.0 API).
+	 * The "type" structural property of this node type (added in JLS3 API).
 	 * @since 3.0
 	 */
 	public static final ChildPropertyDescriptor TYPE_PROPERTY = 
@@ -162,7 +162,7 @@ public class ClassInstanceCreation extends Expression {
 	
 	/**
 	 * The type arguments (element type: <code>Type</code>). 
-	 * Null in 2.0. Added in 3.0; defaults to an empty list
+	 * Null in JLS2. Added in JLS3; defaults to an empty list
 	 * (see constructor).
 	 * @since 3.0
 	 */
@@ -170,7 +170,7 @@ public class ClassInstanceCreation extends Expression {
 
 	/**
 	 * The type name; lazily initialized; defaults to a unspecified,
-	 * legal type name. Not used in 3.0.
+	 * legal type name. Not used in JLS3.
 	 */
 	private Name typeName = null;
 	
@@ -367,7 +367,7 @@ public class ClassInstanceCreation extends Expression {
 
 	/**
 	 * Returns the live ordered list of type arguments of this class
-	 * instance creation (added in 3.0 API).
+	 * instance creation (added in JLS3 API).
 	 * <p>
 	 * Note: This API element is only needed for dealing with Java code that uses
 	 * new language features of J2SE 1.5. It is included in anticipation of J2SE
@@ -378,7 +378,7 @@ public class ClassInstanceCreation extends Expression {
 	 * @return the live list of type arguments
 	 *    (element type: <code>Type</code>)
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * a 2.0 AST
+	 * a JLS2 AST
 	 * @since 3.0
 	 */ 
 	public List typeArguments() {
@@ -391,13 +391,13 @@ public class ClassInstanceCreation extends Expression {
 	
     /**
 	 * Returns the name of the type instantiated in this class instance 
-	 * creation expression (2.0 API only).
+	 * creation expression (JLS2 API only).
 	 * 
 	 * @return the type name node
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * an AST later than 2.0
+	 * an AST later than JLS2
 	 */ 
-	// TODO (jeem ) - deprecated In the 3.0 API, this method is replaced by <code>getType</code>, which returns a <code>Type</code> instead of a <code>Name</code>.
+	// TODO (jeem ) - deprecated In the JLS3 API, this method is replaced by <code>getType</code>, which returns a <code>Type</code> instead of a <code>Name</code>.
 	public Name getName() {
 	    supportedOnlyIn2();
 		if (this.typeName == null) {
@@ -415,7 +415,7 @@ public class ClassInstanceCreation extends Expression {
 	
 	/**
 	 * Sets the name of the type instantiated in this class instance 
-	 * creation expression (2.0 API only).
+	 * creation expression (JLS2 API only).
 	 * 
 	 * @param name the new type name
 	 * @exception IllegalArgumentException if:
@@ -424,9 +424,9 @@ public class ClassInstanceCreation extends Expression {
 	 * <li>the node already has a parent</li>`
 	 * </ul>
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * an AST later than 2.0
+	 * an AST later than JLS2
 	 */ 
-	// TODO (jeem ) deprecated In the 3.0 API, this method is replaced by <code>setType</code>, which expects a <code>Type</code> instead of a <code>Name</code>.
+	// TODO (jeem ) deprecated In the JLS3 API, this method is replaced by <code>setType</code>, which expects a <code>Type</code> instead of a <code>Name</code>.
 	public void setName(Name name) {
 	    supportedOnlyIn2();
 		if (name == null) {
@@ -440,11 +440,11 @@ public class ClassInstanceCreation extends Expression {
 
 	/**
 	 * Returns the type instantiated in this class instance creation
-	 * expression (added in 3.0 API).
+	 * expression (added in JLS3 API).
 	 * 
 	 * @return the type node
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * a 2.0 AST
+	 * a JLS2 AST
 	 * @since 3.0
 	 */ 
 	public Type getType() {
@@ -464,7 +464,7 @@ public class ClassInstanceCreation extends Expression {
 	
 	/**
 	 * Sets the type instantiated in this class instance creation
-	 * expression (added in 3.0 API).
+	 * expression (added in JLS3 API).
 	 * 
 	 * @param name the new type
 	 * @exception IllegalArgumentException if:
@@ -473,7 +473,7 @@ public class ClassInstanceCreation extends Expression {
 	 * <li>the node already has a parent</li>`
 	 * </ul>
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * a 2.0 AST
+	 * a JLS2 AST
 	 * @since 3.0
 	 */ 
 	public void setType(Type type) {
@@ -550,9 +550,9 @@ public class ClassInstanceCreation extends Expression {
 	 * Method declared on ASTNode.
 	 */
 	int treeSize() {
-		// n.b. type == null for ast.API_LEVEL == 2.0
-		// n.b. typeArguments == null for ast.API_LEVEL == 2.0
-		// n.b. typeName == null for ast.API_LEVEL >= 3.0
+		// n.b. type == null for ast.API_LEVEL == JLS2
+		// n.b. typeArguments == null for ast.API_LEVEL == JLS2
+		// n.b. typeName == null for ast.API_LEVEL >= JLS3
 		return 
 			memSize()
 			+ (this.typeName == null ? 0 : getName().treeSize())
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnit.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnit.java
index 1792e7a..bc1e92a 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnit.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnit.java
@@ -28,14 +28,14 @@ import org.eclipse.text.edits.TextEdit;
  * The source range for this type of node is ordinarily the entire source file,
  * including leading and trailing whitespace and comments.
  * </p>
- * For 2.0 (corresponding to JLS2):
+ * For JLS2:
  * <pre>
  * CompilationUnit:
  *    [ PackageDeclaration ]
  *        { ImportDeclaration }
  *        { TypeDeclaration | <b>;</b> }
  * </pre>
- * For 3.0 (corresponding to JLS3), the kinds of type declarations
+ * For JLS3, the kinds of type declarations
  * grew to include enum and annotation type declarations:
  * <pre>
  * CompilationUnit:
@@ -338,9 +338,9 @@ public class CompilationUnit extends ASTNode {
 	 * Returns the live list of nodes for the top-level type declarations of this 
 	 * compilation unit, in order of appearance.
      * <p>
-     * Note that in 3.0, the types may include both enum declarations
-     * and annotation type declarations introduced in JDK 1.5.
-     * For 2.0, the elements are always <code>TypeDeclaration</code>.
+     * Note that in JLS3, the types may include both enum declarations
+     * and annotation type declarations introduced in J2SE 1.5.
+     * For JLS2, the elements are always <code>TypeDeclaration</code>.
      * </p>
 	 * 
 	 * @return the live list of top-level type declaration
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ConstructorInvocation.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ConstructorInvocation.java
index ad34cdf..cd4642d 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ConstructorInvocation.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ConstructorInvocation.java
@@ -15,12 +15,12 @@ import java.util.List;
 
 /**
  * Alternate constructor invocation statement AST node type.
- * For 2.0 (corresponding to JLS2):
+ * For JLS2:
  * <pre>
  * ConstructorInvocation:
  *		<b>this</b> <b>(</b> [ Expression { <b>,</b> Expression } ] <b>)</b> <b>;</b>
  * </pre>
- * For 3.0 (corresponding to JLS3), type arguments are added:
+ * For JLS3, type arguments are added:
  * <pre>
  * ConstructorInvocation:
  *      [ <b>&lt;</b> Type { <b>,</b> Type } <b>&gt;</b> ]
@@ -32,7 +32,7 @@ import java.util.List;
 public class ConstructorInvocation extends Statement {
 	
 	/**
-	 * The "typeArguments" structural property of this node type (added in 3.0 API).
+	 * The "typeArguments" structural property of this node type (added in JLS3 API).
 	 * @since 3.0
 	 */
 	public static final ChildListPropertyDescriptor TYPE_ARGUMENTS_PROPERTY = 
@@ -93,7 +93,7 @@ public class ConstructorInvocation extends Statement {
 			
 	/**
 	 * The type arguments (element type: <code>Type</code>). 
-	 * Null in 2.0. Added in 3.0; defaults to an empty list
+	 * Null in JLS2. Added in JLS3; defaults to an empty list
 	 * (see constructor).
 	 * @since 3.0
 	 */
@@ -185,7 +185,7 @@ public class ConstructorInvocation extends Statement {
 	
 	/**
 	 * Returns the live ordered list of type arguments of this constructor
-	 * invocation (added in 3.0 API).
+	 * invocation (added in JLS3 API).
 	 * <p>
 	 * Note: This API element is only needed for dealing with Java code that uses
 	 * new language features of J2SE 1.5. It is included in anticipation of J2SE
@@ -196,7 +196,7 @@ public class ConstructorInvocation extends Statement {
 	 * @return the live list of type arguments
 	 *    (element type: <code>Type</code>)
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * a 2.0 AST
+	 * a JLS2 AST
 	 * @since 3.0
 	 */ 
 	public List typeArguments() {
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/EnhancedForStatement.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/EnhancedForStatement.java
index 7208937..2c75f57 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/EnhancedForStatement.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/EnhancedForStatement.java
@@ -14,7 +14,7 @@ package org.eclipse.jdt.core.dom;
 import java.util.List;
 
 /**
- * Enhanced For statement AST node type (added in 3.0 API).
+ * Enhanced For statement AST node type (added in JLS3 API).
  *
  * <pre>
  * EnhancedForStatement:
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/EnumConstantDeclaration.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/EnumConstantDeclaration.java
index 7173cdc..b7627f1 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/EnumConstantDeclaration.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/EnumConstantDeclaration.java
@@ -15,7 +15,7 @@ import java.util.Iterator;
 import java.util.List;
 
 /**
- * Enumeration constant declaration AST node type (added in 3.0 API).
+ * Enumeration constant declaration AST node type (added in JLS3 API).
  *
  * <pre>
  * EnumConstantDeclaration:
@@ -211,7 +211,7 @@ public class EnumConstantDeclaration extends BodyDeclaration {
 	 * Method declared on BodyDeclaration.
 	 */
 	final SimplePropertyDescriptor internalModifiersProperty() {
-		// this property will not be asked for (node type did not exist in 2.0)
+		// this property will not be asked for (node type did not exist in JLS2)
 		return null;
 	}
 
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/EnumDeclaration.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/EnumDeclaration.java
index 6009990..73fadfd 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/EnumDeclaration.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/EnumDeclaration.java
@@ -15,7 +15,7 @@ import java.util.Iterator;
 import java.util.List;
 
 /**
- * Enum declaration AST node type (added in 3.0 API).
+ * Enum declaration AST node type (added in JLS3 API).
  *
  * <pre>
  * EnumDeclaration:
@@ -53,7 +53,7 @@ public class EnumDeclaration extends AbstractTypeDeclaration {
 		internalJavadocPropertyFactory(EnumDeclaration.class);
 
 	/**
-	 * The "modifiers" structural property of this node type (added in 3.0 API).
+	 * The "modifiers" structural property of this node type (added in JLS3 API).
 	 */
 	public static final ChildListPropertyDescriptor MODIFIERS2_PROPERTY = 
 		internalModifiers2PropertyFactory(EnumDeclaration.class);
@@ -197,7 +197,7 @@ public class EnumDeclaration extends AbstractTypeDeclaration {
 	 * Method declared on BodyDeclaration.
 	 */
 	final SimplePropertyDescriptor internalModifiersProperty() {
-		// this property will not be asked for (node type did not exist in 2.0)
+		// this property will not be asked for (node type did not exist in JLS2)
 		return null;
 	}
 
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/FieldDeclaration.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/FieldDeclaration.java
index 8ea3836..29eb13e 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/FieldDeclaration.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/FieldDeclaration.java
@@ -45,15 +45,15 @@ public class FieldDeclaration extends BodyDeclaration {
 		internalJavadocPropertyFactory(FieldDeclaration.class);
 
 	/**
-	 * The "modifiers" structural property of this node type (2.0 API only).
+	 * The "modifiers" structural property of this node type (JLS2 API only).
 	 * @since 3.0
 	 */
-	// TODO (jeem) - @deprecated Replaced by {@link #MODIFIERS2_PROPERTY} in the 3.0 API.
+	// TODO (jeem) - @deprecated Replaced by {@link #MODIFIERS2_PROPERTY} in the JLS3 API.
 	public static final SimplePropertyDescriptor MODIFIERS_PROPERTY = 
 		internalModifiersPropertyFactory(FieldDeclaration.class);
 	
 	/**
-	 * The "modifiers" structural property of this node type (added in 3.0 API).
+	 * The "modifiers" structural property of this node type (added in JLS3 API).
 	 * @since 3.0
 	 */
 	public static final ChildListPropertyDescriptor MODIFIERS2_PROPERTY = 
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ImportDeclaration.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ImportDeclaration.java
index 27a0413..bc9b34b 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ImportDeclaration.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ImportDeclaration.java
@@ -16,12 +16,12 @@ import java.util.List;
 /**
  * Import declaration AST node type.
  *
- * For 2.0 (corresponding to JLS2):
+ * For JLS2:
  * <pre>
  * ImportDeclaration:
  *    <b>import</b> Name [ <b>.</b> <b>*</b> ] <b>;</b>
  * </pre>
- * For 3.0 (corresponding to JLS3), static was added:
+ * For JLS3, static was added:
  * <pre>
  * ImportDeclaration:
  *    <b>import</b> [ <b>static</b> ] Name [ <b>.</b> <b>*</b> ] <b>;</b>
@@ -45,7 +45,7 @@ public class ImportDeclaration extends ASTNode {
 		new SimplePropertyDescriptor(ImportDeclaration.class, "onDemand", boolean.class, MANDATORY); //$NON-NLS-1$
 	
 	/**
-	 * The "static" structural property of this node type (added in 3.0 API).
+	 * The "static" structural property of this node type (added in JLS3 API).
 	 * @since 3.0
 	 */
 	public static final SimplePropertyDescriptor STATIC_PROPERTY = 
@@ -112,7 +112,7 @@ public class ImportDeclaration extends ASTNode {
 
 	/**
 	 * Static versus regular; defaults to regular import.
-	 * Added in 3.0; not used in 2.0.
+	 * Added in JLS3; not used in JLS2.
 	 * @since 3.0
 	 */
 	private boolean isStatic = false;
@@ -299,7 +299,7 @@ public class ImportDeclaration extends ASTNode {
 	}
 	
 	/**
-	 * Returns whether this import declaration is a static import (added in 3.0 API).
+	 * Returns whether this import declaration is a static import (added in JLS3 API).
 	 * <p>
 	 * Note: This API element is only needed for dealing with Java code that uses
 	 * new language features of J2SE 1.5. It is included in anticipation of J2SE
@@ -310,7 +310,7 @@ public class ImportDeclaration extends ASTNode {
 	 * @return <code>true</code> if this is a static import,
 	 *    and <code>false</code> if this is a regular import
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * a 2.0 AST
+	 * a JLS2 AST
 	 * @since 3.0
 	 */ 
 	public boolean isStatic() {
@@ -319,7 +319,7 @@ public class ImportDeclaration extends ASTNode {
 	}
 		
 	/**
-	 * Sets whether this import declaration is a static import (added in 3.0 API).
+	 * Sets whether this import declaration is a static import (added in JLS3 API).
 	 * <p>
 	 * Note: This API element is only needed for dealing with Java code that uses
 	 * new language features of J2SE 1.5. It is included in anticipation of J2SE
@@ -330,7 +330,7 @@ public class ImportDeclaration extends ASTNode {
 	 * @param isStatic <code>true</code> if this is a static import,
 	 *    and <code>false</code> if this is a regular import
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * a 2.0 AST
+	 * a JLS2 AST
 	 * @since 3.0
 	 */ 
 	public void setStatic(boolean isStatic) {
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Initializer.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Initializer.java
index 6b24a7f..a5e7c6c 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Initializer.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Initializer.java
@@ -32,15 +32,15 @@ public class Initializer extends BodyDeclaration {
 		internalJavadocPropertyFactory(Initializer.class);
 
 	/**
-	 * The "modifiers" structural property of this node type (2.0 API only).
+	 * The "modifiers" structural property of this node type (JLS2 API only).
 	 * @since 3.0
 	 */
-	// TODO (jeem) - @deprecated Replaced by {@link #MODIFIERS2_PROPERTY} in the 3.0 API.
+	// TODO (jeem) - @deprecated Replaced by {@link #MODIFIERS2_PROPERTY} in the JLS3 API.
 	public static final SimplePropertyDescriptor MODIFIERS_PROPERTY = 
 		internalModifiersPropertyFactory(Initializer.class);
 	
 	/**
-	 * The "modifiers" structural property of this node type (added in 3.0 API).
+	 * The "modifiers" structural property of this node type (added in JLS3 API).
 	 * @since 3.0
 	 */
 	public static final ChildListPropertyDescriptor MODIFIERS2_PROPERTY = 
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Javadoc.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Javadoc.java
index e5e3f6d..0b114de 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Javadoc.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Javadoc.java
@@ -29,10 +29,10 @@ import org.eclipse.jdt.internal.compiler.parser.TerminalTokens;
 public class Javadoc extends Comment {
 	
 	/**
-	 * The "comment" structural property of this node type (2.0 API only).
+	 * The "comment" structural property of this node type (JLS2 API only).
 	 * @since 3.0
 	 */
-	// TODO (jeem) - @deprecated Replaced by {@link #TAGS_PROPERTY} in the 3.0 API.
+	// TODO (jeem) - @deprecated Replaced by {@link #TAGS_PROPERTY} in the JLS3 API.
 	public static final SimplePropertyDescriptor COMMENT_PROPERTY = 
 		new SimplePropertyDescriptor(Javadoc.class, "comment", String.class, MANDATORY); //$NON-NLS-1$
 	
@@ -208,7 +208,7 @@ public class Javadoc extends Comment {
 	 * 
 	 * @return the doc comment string
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * an AST later than 2.0
+	 * an AST later than JLS2
 	 * @deprecated The comment string was replaced in the 3.0 release
 	 * by a representation of the structure of the doc comment.
 	 * See {@link #tags() tags}.
@@ -226,7 +226,7 @@ public class Javadoc extends Comment {
 	 * @param docComment the doc comment string
 	 * @exception IllegalArgumentException if the Java comment string is invalid
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * an AST later than 2.0
+	 * an AST later than JLS2
 	 * @deprecated The comment string was replaced in the 3.0 release
 	 * by a representation of the structure of the doc comment.
 	 * See {@link #tags() tags}.
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MarkerAnnotation.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MarkerAnnotation.java
index c8f1a6e..79332e8 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MarkerAnnotation.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MarkerAnnotation.java
@@ -13,7 +13,7 @@ package org.eclipse.jdt.core.dom;
 import java.util.List;
 
 /**
- * Marker annotation node (added in 3.0 API). The marker annotation 
+ * Marker annotation node (added in JLS3 API). The marker annotation 
  * "@foo" is equivalent to the normal annotation "@foo()".
  * <p>
  * <pre>
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MemberValuePair.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MemberValuePair.java
index c3e576b..c7abc1a 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MemberValuePair.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MemberValuePair.java
@@ -14,7 +14,7 @@ package org.eclipse.jdt.core.dom;
 import java.util.List;
 
 /**
- * Member value pair node (added in 3.0 API). Member value pairs appear in annotations.
+ * Member value pair node (added in JLS3 API). Member value pairs appear in annotations.
  * <p>
  * <pre>
  * MemberValuePair:
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java
index 8962835..7953aca 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java
@@ -17,7 +17,7 @@ import java.util.List;
 /**
  * Method declaration AST node type. A method declaration
  * is the union of a method declaration and a constructor declaration.
- * For 2.0 (corresponding to JLS2):
+ * For JLS2:
  * <pre>
  * MethodDeclaration:
  *    [ Javadoc ] { Modifier } ( Type | <b>void</b> ) Identifier <b>(</b>
@@ -30,7 +30,7 @@ import java.util.List;
  * 			 { <b>,</b> FormalParameter } ] <b>)</b>
  *        [<b>throws</b> TypeName { <b>,</b> TypeName } ] Block
  * </pre>
- * For 3.0 (corresponding to JLS3), type parameters and reified modifiers
+ * For JLS3, type parameters and reified modifiers
  * (and annotations) were added:
  * <pre>
  * MethodDeclaration:
@@ -70,15 +70,15 @@ public class MethodDeclaration extends BodyDeclaration {
 		internalJavadocPropertyFactory(MethodDeclaration.class);
 
 	/**
-	 * The "modifiers" structural property of this node type (2.0 API only).
+	 * The "modifiers" structural property of this node type (JLS2 API only).
 	 * @since 3.0
 	 */
-	// TODO (jeem) - @deprecated Replaced by {@link #MODIFIERS2_PROPERTY} in the 3.0 API.
+	// TODO (jeem) - @deprecated Replaced by {@link #MODIFIERS2_PROPERTY} in the JLS3 API.
 	public static final SimplePropertyDescriptor MODIFIERS_PROPERTY = 
 		internalModifiersPropertyFactory(MethodDeclaration.class);
 	
 	/**
-	 * The "modifiers" structural property of this node type (added in 3.0 API).
+	 * The "modifiers" structural property of this node type (added in JLS3 API).
 	 * @since 3.0
 	 */
 	public static final ChildListPropertyDescriptor MODIFIERS2_PROPERTY = 
@@ -99,15 +99,15 @@ public class MethodDeclaration extends BodyDeclaration {
 		new ChildPropertyDescriptor(MethodDeclaration.class, "name", SimpleName.class, MANDATORY, NO_CYCLE_RISK); //$NON-NLS-1$
 
 	/**
-	 * The "returnType" structural property of this node type (2.0 API only).
+	 * The "returnType" structural property of this node type (JLS2 API only).
 	 * @since 3.0
 	 */
-	// TODO (jeem) - @deprecated Replaced by {@link #RETURN_TYPE2_PROPERTY} in the 3.0 API.
+	// TODO (jeem) - @deprecated Replaced by {@link #RETURN_TYPE2_PROPERTY} in the JLS3 API.
 	public static final ChildPropertyDescriptor RETURN_TYPE_PROPERTY = 
 		new ChildPropertyDescriptor(MethodDeclaration.class, "returnType", Type.class, MANDATORY, NO_CYCLE_RISK); //$NON-NLS-1$
 
 	/**
-	 * The "returnType2" structural property of this node type (added in 3.0 API).
+	 * The "returnType2" structural property of this node type (added in JLS3 API).
 	 * @since 3.0
 	 */
 	public static final ChildPropertyDescriptor RETURN_TYPE2_PROPERTY = 
@@ -121,7 +121,7 @@ public class MethodDeclaration extends BodyDeclaration {
 		new SimplePropertyDescriptor(MethodDeclaration.class, "extraDimensions", int.class, MANDATORY); //$NON-NLS-1$
 	
 	/**
-	 * The "typeParameters" structural property of this node type (added in 3.0 API).
+	 * The "typeParameters" structural property of this node type (added in JLS3 API).
 	 * @since 3.0
 	 */
 	public static final ChildListPropertyDescriptor TYPE_PARAMETERS_PROPERTY = 
@@ -230,21 +230,21 @@ public class MethodDeclaration extends BodyDeclaration {
 	
 	/**
 	 * The return type.
-	 * 2.0 bahevior: lazily initialized; defaults to void.
-	 * 3.0 behavior; lazily initialized; defaults to void; null allowed.
+	 * JLS2 behevior: lazily initialized; defaults to void.
+	 * JLS3 behavior; lazily initialized; defaults to void; null allowed.
 	 * Note that this field is ignored for constructor declarations.
 	 */
 	private Type returnType = null;
 	
 	/**
 	 * Indicated whether the return type has been initialized.
-	 * @sicne 3.0
+	 * @since 3.0
 	 */
 	private boolean returnType2Initialized = false;
 	
 	/**
 	 * The type paramters (element type: <code>TypeParameter</code>). 
-	 * Null in 2.0. Added in 3.0; defaults to an empty list
+	 * Null in JLS2. Added in JLS3; defaults to an empty list
 	 * (see constructor).
 	 * @since 3.0
 	 */
@@ -525,7 +525,7 @@ public class MethodDeclaration extends BodyDeclaration {
 
 	/**
 	 * Returns the live ordered list of type parameters of this method
-	 * declaration (added in 3.0 API). This list is non-empty for parameterized methods.
+	 * declaration (added in JLS3 API). This list is non-empty for parameterized methods.
 	 * <p>
 	 * Note that these children are not relevant for constructor declarations
 	 * (although it does still figure in subtree equality comparisons
@@ -542,7 +542,7 @@ public class MethodDeclaration extends BodyDeclaration {
 	 * @return the live list of type parameters
 	 *    (element type: <code>TypeParameter</code>)
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * a 2.0 AST
+	 * a JLS2 AST
 	 * @since 3.0
 	 */ 
 	public List typeParameters() {
@@ -609,7 +609,7 @@ public class MethodDeclaration extends BodyDeclaration {
 	
 	/**
 	 * Returns whether this method declaration declares a
-	 * variable arity method (added in 3.0 API). The convenience method checks
+	 * variable arity method (added in JLS3 API). The convenience method checks
 	 * whether the last parameter is so marked.
 	 * <p>
 	 * Note: This API element is only needed for dealing with Java code that uses
@@ -621,7 +621,7 @@ public class MethodDeclaration extends BodyDeclaration {
 	 * @return <code>true</code> if this is a variable arity method declaration,
 	 *    and <code>false</code> otherwise
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * a 2.0 AST
+	 * a JLS2 AST
 	 * @see SingleVariableDeclaration#isVarargs()
 	 * @since 3.0
 	 */ 
@@ -651,7 +651,7 @@ public class MethodDeclaration extends BodyDeclaration {
 	
 	/**
 	 * Returns the return type of the method declared in this method 
-	 * declaration, exclusive of any extra array dimensions (2.0 API only). 
+	 * declaration, exclusive of any extra array dimensions (JLS2 API only). 
 	 * This is one of the few places where the void type is meaningful.
 	 * <p>
 	 * Note that this child is not relevant for constructor declarations
@@ -662,9 +662,9 @@ public class MethodDeclaration extends BodyDeclaration {
 	 * 
 	 * @return the return type, possibly the void primitive type
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * an AST later than 2.0
+	 * an AST later than JLS2
 	 */ 
-	// TODO (jeem ) - deprecated In the 3.0 API, this method is replaced by <code>getReturnType2</code>, which may return <code>null</code>.
+	// TODO (jeem ) - deprecated In the JLS3 API, this method is replaced by <code>getReturnType2</code>, which may return <code>null</code>.
 	public Type getReturnType() {
 	    supportedOnlyIn2();
 		if (this.returnType == null) {
@@ -682,7 +682,7 @@ public class MethodDeclaration extends BodyDeclaration {
 
 	/**
 	 * Sets the return type of the method declared in this method declaration
-	 * to the given type, exclusive of any extra array dimensions (2.0 API only). This is one
+	 * to the given type, exclusive of any extra array dimensions (JLS2 API only). This is one
 	 * of the few places where the void type is meaningful.
 	 * <p>
 	 * Note that this child is not relevant for constructor declarations
@@ -696,9 +696,9 @@ public class MethodDeclaration extends BodyDeclaration {
 	 * <li>the node already has a parent</li>
 	 * </ul>
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * an AST later than 2.0
+	 * an AST later than JLS2
 	 */ 
-	// TODO (jeem ) - deprecated In the 3.0 API, this method is replaced by <code>setReturnType2</code>, which accepts <code>null</code>.
+	// TODO (jeem ) - deprecated In the JLS3 API, this method is replaced by <code>setReturnType2</code>, which accepts <code>null</code>.
 	public void setReturnType(Type type) {
 	    supportedOnlyIn2();
 		if (type == null) {
@@ -712,20 +712,20 @@ public class MethodDeclaration extends BodyDeclaration {
 
 	/**
 	 * Returns the return type of the method declared in this method 
-	 * declaration, exclusive of any extra array dimensions (added in 3.0 API). 
+	 * declaration, exclusive of any extra array dimensions (added in JLS3 API). 
 	 * This is one of the few places where the void type is meaningful.
 	 * <p>
 	 * Note that this child is not relevant for constructor declarations
 	 * (although, if present, it does still figure in subtree equality comparisons
 	 * and visits), and is devoid of the binding information ordinarily
-	 * available. In the 2.0 API, the return type is mandatory. 
-	 * In the 3.0 API, the return type is optional.
+	 * available. In the JLS2 API, the return type is mandatory. 
+	 * In the JLS3 API, the return type is optional.
 	 * </p>
 	 * 
 	 * @return the return type, possibly the void primitive type,
 	 * or <code>null</code> if none
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * a 2.0 AST
+	 * a JLS2 AST
 	 * @since 3.0
 	 */ 
 	public Type getReturnType2() {
@@ -746,19 +746,19 @@ public class MethodDeclaration extends BodyDeclaration {
 
 	/**
 	 * Sets the return type of the method declared in this method declaration
-	 * to the given type, exclusive of any extra array dimensions (added in 3.0 API).
+	 * to the given type, exclusive of any extra array dimensions (added in JLS3 API).
 	 * This is one of the few places where the void type is meaningful.
 	 * <p>
 	 * Note that this child is not relevant for constructor declarations
 	 * (although it does still figure in subtree equality comparisons and visits).
-	 * In the 2.0 API, the return type is mandatory. 
-	 * In the 3.0 API, the return type is optional.
+	 * In the JLS2 API, the return type is mandatory. 
+	 * In the JLS3 API, the return type is optional.
 	 * </p>
 	 * 
 	 * @param type the new return type, possibly the void primitive type,
 	 * or <code>null</code> if none
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * a 2.0 AST
+	 * a JLS2 AST
 	 * @exception IllegalArgumentException if:
 	 * <ul>
 	 * <li>the node belongs to a different AST</li>
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodInvocation.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodInvocation.java
index edca58d..c2b9026 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodInvocation.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodInvocation.java
@@ -15,13 +15,13 @@ import java.util.List;
 
 /**
  * Method invocation expression AST node type.
- * For 2.0 (corresponding to JLS2):
+ * For JLS2:
  * <pre>
  * MethodInvocation:
  *     [ Expression <b>.</b> ] Identifier 
  *         <b>(</b> [ Expression { <b>,</b> Expression } ] <b>)</b>
  * </pre>
- * For 3.0 (corresponding to JLS3), type arguments are added:
+ * For JLS3, type arguments are added:
  * <pre>
  * MethodInvocation:
  *     [ Expression <b>.</b> ]  
@@ -41,7 +41,7 @@ public class MethodInvocation extends Expression {
 		new ChildPropertyDescriptor(MethodInvocation.class, "expression", Expression.class, OPTIONAL, CYCLE_RISK); //$NON-NLS-1$
 
 	/**
-	 * The "typeArguments" structural property of this node type (added in 3.0 API).
+	 * The "typeArguments" structural property of this node type (added in JLS3 API).
 	 * @since 3.0
 	 */
 	public static final ChildListPropertyDescriptor TYPE_ARGUMENTS_PROPERTY = 
@@ -118,7 +118,7 @@ public class MethodInvocation extends Expression {
 	
 	/**
 	 * The type arguments (element type: <code>Type</code>). 
-	 * Null in 2.0. Added in 3.0; defaults to an empty list
+	 * Null in JLS2. Added in JLS3; defaults to an empty list
 	 * (see constructor).
 	 * @since 3.0
 	 */
@@ -275,7 +275,7 @@ public class MethodInvocation extends Expression {
 
 	/**
 	 * Returns the live ordered list of type arguments of this method
-	 * invocation (added in 3.0 API).
+	 * invocation (added in JLS3 API).
 	 * <p>
 	 * Note: This API element is only needed for dealing with Java code that uses
 	 * new language features of J2SE 1.5. It is included in anticipation of J2SE
@@ -286,7 +286,7 @@ public class MethodInvocation extends Expression {
 	 * @return the live list of type arguments
 	 *    (element type: <code>Type</code>)
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * a 2.0 AST
+	 * a JLS2 AST
 	 * @since 3.0
 	 */ 
 	public List typeArguments() {
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java
index d6cbaeb..c9d6f95 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java
@@ -82,7 +82,7 @@ class NaiveASTFlattener extends ASTVisitor {
 	
 	/**
 	 * Appends the text representation of the given modifier flags, followed by a single space.
-	 * Used for 2.0 modifiers.
+	 * Used for JLS2 modifiers.
 	 * 
 	 * @param modifiers the modifier flags
 	 */
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NormalAnnotation.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NormalAnnotation.java
index 9c97905..98b40e1 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NormalAnnotation.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NormalAnnotation.java
@@ -13,7 +13,7 @@ package org.eclipse.jdt.core.dom;
 import java.util.List;
 
 /**
- * Normal annotation node (added in 3.0 API).
+ * Normal annotation node (added in JLS3 API).
  * <p>
  * <pre>
  * NormalAnnotation:
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/PackageDeclaration.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/PackageDeclaration.java
index 0c63088..48e95e4 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/PackageDeclaration.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/PackageDeclaration.java
@@ -15,12 +15,12 @@ import java.util.List;
 
 /**
  * Package declaration AST node type.
- * For 2.0 (corresponding to JLS2):
+ * For JLS2:
  * <pre>
  * PackageDeclaration:
  *    <b>package</b> Name <b>;</b>
  * </pre>
- * For 3.0 (corresponding to JLS3), annotations and doc comment
+ * For JLS3, annotations and doc comment
  * were added:
  * <pre>
  * PackageDeclaration:
@@ -39,7 +39,7 @@ public class PackageDeclaration extends ASTNode {
 		new ChildPropertyDescriptor(PackageDeclaration.class, "javadoc", Javadoc.class, OPTIONAL, NO_CYCLE_RISK); //$NON-NLS-1$
 
 	/**
-	 * The "annotations" structural property of this node type (added in 3.0 API).
+	 * The "annotations" structural property of this node type (added in JLS3 API).
 	 * @since 3.0
 	 */
 	public static final ChildListPropertyDescriptor ANNOTATIONS_PROPERTY = 
@@ -108,7 +108,7 @@ public class PackageDeclaration extends ASTNode {
 
 	/**
 	 * The annotations (element type: <code>Annotation</code>). 
-	 * Null in 2.0. Added in 3.0; defaults to an empty list
+	 * Null in JLS2. Added in JLS3; defaults to an empty list
 	 * (see constructor).
 	 * @since 3.0
 	 */
@@ -227,7 +227,7 @@ public class PackageDeclaration extends ASTNode {
 	
 	/**
 	 * Returns the live ordered list of annotations of this 
-	 * package declaration (added in 3.0 API).
+	 * package declaration (added in JLS3 API).
 	 * <p>
 	 * Note: This API element is only needed for dealing with Java code that uses
 	 * new language features of J2SE 1.5. It is included in anticipation of J2SE
@@ -238,7 +238,7 @@ public class PackageDeclaration extends ASTNode {
 	 * @return the live list of annotations
 	 *    (element type: <code>Annotation</code>)
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * a 2.0 AST
+	 * a JLS2 AST
 	 * @since 3.0
 	 */ 
 	public List annotations() {
@@ -254,7 +254,7 @@ public class PackageDeclaration extends ASTNode {
 	 * 
 	 * @return the doc comment node, or <code>null</code> if none
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * a 2.0 AST
+	 * a JLS2 AST
 	 * @since 3.0
 	 */
 	public Javadoc getJavadoc() {
@@ -271,7 +271,7 @@ public class PackageDeclaration extends ASTNode {
 	 * @param docComment the doc comment node, or <code>null</code> if none
 	 * @exception IllegalArgumentException if the doc comment string is invalid
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * a 2.0 AST
+	 * a JLS2 AST
 	 * @since 3.0
 	 */
 	public void setJavadoc(Javadoc docComment) {
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ParameterizedType.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ParameterizedType.java
index aa74acc..cc30ad7 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ParameterizedType.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ParameterizedType.java
@@ -14,7 +14,7 @@ package org.eclipse.jdt.core.dom;
 import java.util.List;
 
 /**
- * Type node for a parameterized type (added in 3.0 API).
+ * Type node for a parameterized type (added in JLS3 API).
  * These nodes are used for type references (as opposed to
  * declarations of parameterized types.)
  * <pre>
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/QualifiedType.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/QualifiedType.java
index 8a16009..7fe4038 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/QualifiedType.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/QualifiedType.java
@@ -14,7 +14,7 @@ package org.eclipse.jdt.core.dom;
 import java.util.List;
 
 /**
- * Type node for a qualified type (added in 3.0 API).
+ * Type node for a qualified type (added in JLS3 API).
  * <pre>
  * QualifiedType:
  *    Type <b>.</b> SimpleName
@@ -37,7 +37,7 @@ import java.util.List;
  * The first form is preferred when "A" is known to be a type. However, a 
  * parser cannot always determine this. Clients should be prepared to handle
  * either rather than make assumptions. (Note also that the first form
- * became possible as of 3.0; only the second form existed in 2.0 and 2.1.)
+ * became possible as of JLS3; only the second form existed in JLS2 API.)
  * </p>
  * 
  * @since 3.0
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleMemberAnnotation.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleMemberAnnotation.java
index ff3c053..2e9d9ae 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleMemberAnnotation.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleMemberAnnotation.java
@@ -13,7 +13,7 @@ package org.eclipse.jdt.core.dom;
 import java.util.List;
 
 /**
- * Single member annotation node (added in 3.0 API). The single member annotation 
+ * Single member annotation node (added in JLS3 API). The single member annotation 
  * "@foo(bar)" is equivalent to the normal annotation "@foo(value=bar)". 
  * <p>
  * <pre>
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleVariableDeclaration.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleVariableDeclaration.java
index 2f22804..43d5f68 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleVariableDeclaration.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleVariableDeclaration.java
@@ -19,12 +19,12 @@ import java.util.List;
  * declaration nodes are used in a limited number of places, including formal
  * parameter lists and catch clauses. They are not used for field declarations
  * and regular variable declaration statements.
- * For 2.0 (corresponding to JLS2):
+ * For JLS2:
  * <pre>
  * SingleVariableDeclaration:
  *    { Modifier } Type Identifier { <b>[</b><b>]</b> } [ <b>=</b> Expression ]
  * </pre>
- * For 3.0 (corresponding to JLS3), the modifier flags were replaced by
+ * For JLS3, the modifier flags were replaced by
  * a list of modifier nodes (intermixed with annotations), and the variable arity
  * indicator was added:
  * <pre>
@@ -37,15 +37,15 @@ import java.util.List;
 public class SingleVariableDeclaration extends VariableDeclaration {
 	
 	/**
-	 * The "modifiers" structural property of this node type (2.0 API only).
+	 * The "modifiers" structural property of this node type (JLS2 API only).
 	 * @since 3.0
 	 */
-	// TODO (jeem) - @deprecated Replaced by {@link #MODIFIERS2_PROPERTY} in the 3.0 API.
+	// TODO (jeem) - @deprecated Replaced by {@link #MODIFIERS2_PROPERTY} in the JLS3 API.
 	public static final SimplePropertyDescriptor MODIFIERS_PROPERTY = 
 		new SimplePropertyDescriptor(SingleVariableDeclaration.class, "modifiers", int.class, MANDATORY); //$NON-NLS-1$
 	
 	/**
-	 * The "modifiers" structural property of this node type (added in 3.0 API).
+	 * The "modifiers" structural property of this node type (added in JLS3 API).
 	 * @since 3.0
 	 */
 	public static final ChildListPropertyDescriptor MODIFIERS2_PROPERTY = 
@@ -66,7 +66,7 @@ public class SingleVariableDeclaration extends VariableDeclaration {
 		new ChildPropertyDescriptor(SingleVariableDeclaration.class, "type", Type.class, MANDATORY, NO_CYCLE_RISK); //$NON-NLS-1$
 
 	/**
-	 * The "varargs" structural property of this node type (added in 3.0 API).
+	 * The "varargs" structural property of this node type (added in JLS3 API).
 	 * @since 3.0
 	 */
 	public static final SimplePropertyDescriptor VARARGS_PROPERTY = 
@@ -141,7 +141,7 @@ public class SingleVariableDeclaration extends VariableDeclaration {
 			
 	/**
 	 * The extended modifiers (element type: <code>IExtendedModifier</code>). 
-	 * Null in 2.0. Added in 3.0; defaults to an empty list
+	 * Null in JLS2. Added in JLS3; defaults to an empty list
 	 * (see constructor).
 	 * 
 	 * @since 3.0
@@ -350,7 +350,7 @@ public class SingleVariableDeclaration extends VariableDeclaration {
 	
 	/**
 	 * Returns the live ordered list of modifiers and annotations
-	 * of this declaration (added in 3.0 API).
+	 * of this declaration (added in JLS3 API).
 	 * <p>
 	 * Note that the final modifier is the only meaningful modifier for local
 	 * variable and formal parameter declarations.
@@ -359,7 +359,7 @@ public class SingleVariableDeclaration extends VariableDeclaration {
 	 * @return the live list of modifiers and annotations
 	 *    (element type: <code>IExtendedModifier</code>)
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * a 2.0 AST
+	 * a JLS2 AST
 	 * @since 3.0
 	 */ 
 	public List modifiers() {
@@ -373,7 +373,7 @@ public class SingleVariableDeclaration extends VariableDeclaration {
 	/**
 	 * Returns the modifiers explicitly specified on this declaration.
 	 * <p>
-	 * In the 3.0 API, this method is a convenience method that
+	 * In the JLS3 API, this method is a convenience method that
 	 * computes these flags from <code>modifiers()</code>.
 	 * </p>
 	 * 
@@ -383,10 +383,10 @@ public class SingleVariableDeclaration extends VariableDeclaration {
 	public int getModifiers() {
 		// more efficient than checking getAST().API_LEVEL
 		if (this.modifiers == null) {
-			// 2.0 behavior - bona fide property
+			// JLS2 behavior - bona fide property
 			return this.modifierFlags;
 		} else {
-			// 3.0 behavior - convenient method
+			// JLS3 behavior - convenient method
 			// performance could be improved by caching computed flags
 			// but this would require tracking changes to this.modifiers
 			int computedModifierFlags = Modifier.NONE;
@@ -401,7 +401,7 @@ public class SingleVariableDeclaration extends VariableDeclaration {
 	}
 
 	/**
-	 * Sets the modifiers explicitly specified on this declaration (2.0 API only).
+	 * Sets the modifiers explicitly specified on this declaration (JLS2 API only).
 	 * <p>
 	 * The following modifiers are meaningful for fields: public, private, protected,
 	 * static, final, volatile, and transient. For local variable and formal
@@ -410,10 +410,10 @@ public class SingleVariableDeclaration extends VariableDeclaration {
 	 * 
 	 * @param modifiers the given modifiers (bit-wise or of <code>Modifier</code> constants)
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * an AST later than 2.0
+	 * an AST later than JLS2
 	 * @see Modifier
 	 */ 
-	// TODO (jeem ) - deprecated In the 3.0 API, this method is replaced by <code>modifiers()</code> which contains a list of  a <code>Modifier</code> nodes.
+	// TODO (jeem ) - deprecated In the JLS3 API, this method is replaced by <code>modifiers()</code> which contains a list of  a <code>Modifier</code> nodes.
 	public void setModifiers(int modifiers) {
 	    supportedOnlyIn2();
 		preValueChange(MODIFIERS_PROPERTY);
@@ -494,7 +494,7 @@ public class SingleVariableDeclaration extends VariableDeclaration {
 
 	/**
 	 * Returns whether this declaration declares the last parameter of
-	 * a variable arity method (added in 3.0 API).
+	 * a variable arity method (added in JLS3 API).
 	 * <p>
 	 * Note: This API element is only needed for dealing with Java code that uses
 	 * new language features of J2SE 1.5. It is included in anticipation of J2SE
@@ -505,7 +505,7 @@ public class SingleVariableDeclaration extends VariableDeclaration {
 	 * @return <code>true</code> if this is a variable arity parameter declaration,
 	 *    and <code>false</code> otherwise
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * a 2.0 AST
+	 * a JLS2 AST
 	 * @since 3.0
 	 */ 
 	public boolean isVarargs() {
@@ -518,7 +518,7 @@ public class SingleVariableDeclaration extends VariableDeclaration {
 	
 	/**
 	 * Sets whether this declaration declares the last parameter of
-	 * a variable arity method (added in 3.0 API).
+	 * a variable arity method (added in JLS3 API).
 	 * <p>
 	 * Note: This API element is only needed for dealing with Java code that uses
 	 * new language features of J2SE 1.5. It is included in anticipation of J2SE
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Statement.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Statement.java
index ecfefe2..e7f483d 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Statement.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Statement.java
@@ -20,7 +20,7 @@ import org.eclipse.jdt.internal.compiler.parser.TerminalTokens;
  * There are many kinds of statements.
  * <p>
  * The grammar combines both Statement and BlockStatement.
- * For 2.0 (corresponding to JLS2):
+ * For JLS2:
  * <pre>
  * Statement:
  *    Block
@@ -44,7 +44,7 @@ import org.eclipse.jdt.internal.compiler.parser.TerminalTokens;
  *    ConstructorInvocation
  *    SuperConstructorInvocation
  * </pre>
- * For 3.0 (corresponding to JLS3), an enhanced for node type was added:
+ * For JLS3, an enhanced for node type was added:
  * <pre>
  * Statement:
  *    Block
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SuperConstructorInvocation.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SuperConstructorInvocation.java
index cd7f3f8..8cb79cd 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SuperConstructorInvocation.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SuperConstructorInvocation.java
@@ -15,12 +15,12 @@ import java.util.List;
 
 /**
  * Super constructor invocation statement AST node type.
- * For 2.0 (corresponding to JLS2): * <pre>
+ * For JLS2: * <pre>
  * SuperConstructorInvocation:
  *     [ Expression <b>.</b> ] <b>super</b>
  *         <b>(</b> [ Expression { <b>,</b> Expression } ] <b>)</b> <b>;</b>
  * </pre>
- * For 3.0 (corresponding to JLS3), type arguments are added:
+ * For JLS3, type arguments are added:
  * <pre>
  * SuperConstructorInvocation:
  *     [ Expression <b>.</b> ]
@@ -40,7 +40,7 @@ public class SuperConstructorInvocation extends Statement {
 		new ChildPropertyDescriptor(SuperConstructorInvocation.class, "expression", Expression.class, OPTIONAL, CYCLE_RISK); //$NON-NLS-1$
 
 	/**
-	 * The "typeArguments" structural property of this node type (added in 3.0 API).
+	 * The "typeArguments" structural property of this node type (added in JLS3 API).
 	 * @since 3.0
 	 */
 	public static final ChildListPropertyDescriptor TYPE_ARGUMENTS_PROPERTY = 
@@ -108,7 +108,7 @@ public class SuperConstructorInvocation extends Statement {
 	
 	/**
 	 * The type arguments (element type: <code>Type</code>). 
-	 * Null in 2.0. Added in 3.0; defaults to an empty list
+	 * Null in JLS2. Added in JLS3; defaults to an empty list
 	 * (see constructor).
 	 * @since 3.0
 	 */
@@ -251,7 +251,7 @@ public class SuperConstructorInvocation extends Statement {
 
 	/**
 	 * Returns the live ordered list of type arguments of this constructor
-	 * invocation (added in 3.0 API).
+	 * invocation (added in JLS3 API).
 	 * <p>
 	 * Note: This API element is only needed for dealing with Java code that uses
 	 * new language features of J2SE 1.5. It is included in anticipation of J2SE
@@ -262,7 +262,7 @@ public class SuperConstructorInvocation extends Statement {
 	 * @return the live list of type arguments
 	 *    (element type: <code>Type</code>)
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * a 2.0 AST
+	 * a JLS2 AST
 	 * @since 3.0
 	 */ 
 	public List typeArguments() {
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SuperMethodInvocation.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SuperMethodInvocation.java
index e70768c..b8ad70e 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SuperMethodInvocation.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SuperMethodInvocation.java
@@ -15,13 +15,13 @@ import java.util.List;
 
 /**
  * Simple or qualified "super" method invocation expression AST node type.
- * For 2.0 (corresponding to JLS2):
+ * For JLS2:
  * <pre>
  * SuperMethodInvocation:
  *     [ ClassName <b>.</b> ] <b>super</b> <b>.</b> Identifier
  *         <b>(</b> [ Expression { <b>,</b> Expression } ] <b>)</b>
  * </pre>
- * For 3.0 (corresponding to JLS3), type arguments are added:
+ * For JLS3, type arguments are added:
  * <pre>
  * SuperMethodInvocation:
  *     [ ClassName <b>.</b> ] <b>super</b> <b>.</b>
@@ -41,7 +41,7 @@ public class SuperMethodInvocation extends Expression {
 		new ChildPropertyDescriptor(SuperMethodInvocation.class, "qualifier", Name.class, OPTIONAL, NO_CYCLE_RISK); //$NON-NLS-1$
 
 	/**
-	 * The "typeArguments" structural property of this node type (added in 3.0 API).
+	 * The "typeArguments" structural property of this node type (added in JLS3 API).
 	 * @since 3.0
 	 */
 	public static final ChildListPropertyDescriptor TYPE_ARGUMENTS_PROPERTY = 
@@ -118,7 +118,7 @@ public class SuperMethodInvocation extends Expression {
 
 	/**
 	 * The type arguments (element type: <code>Type</code>). 
-	 * Null in 2.0. Added in 3.0; defaults to an empty list
+	 * Null in JLS2. Added in JLS3; defaults to an empty list
 	 * (see constructor).
 	 * @since 3.0
 	 */
@@ -273,7 +273,7 @@ public class SuperMethodInvocation extends Expression {
 	
 	/**
 	 * Returns the live ordered list of type arguments of this method
-	 * invocation (added in 3.0 API).
+	 * invocation (added in JLS3 API).
 	 * <p>
 	 * Note: This API element is only needed for dealing with Java code that uses
 	 * new language features of J2SE 1.5. It is included in anticipation of J2SE
@@ -284,7 +284,7 @@ public class SuperMethodInvocation extends Expression {
 	 * @return the live list of type arguments
 	 *    (element type: <code>Type</code>)
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * a 2.0 AST
+	 * a JLS2 AST
 	 * @since 3.0
 	 */ 
 	public List typeArguments() {
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Type.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Type.java
index 730eed3..9b6ea87 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Type.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Type.java
@@ -127,7 +127,8 @@ public abstract class Type extends ASTNode {
 	 * The first form is preferred when "A" is known to be a type. However, a 
 	 * parser cannot always determine this. Clients should be prepared to handle
 	 * either rather than make assumptions. (Note also that the first form
-	 * became possible as of 3.0; only the second form existed in 2.0 and 2.1.)
+	 * became possible as of JLS3; only the second form existed in the 
+	 * JLS2 API.)
 	 * </p>
 	 * 
 	 * @return <code>true</code> if this is a qualified type, and 
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeDeclaration.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeDeclaration.java
index badbc68..e581c64 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeDeclaration.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeDeclaration.java
@@ -17,7 +17,7 @@ import java.util.List;
 /**
  * Type declaration AST node type. A type declaration
  * is the union of a class declaration and an interface declaration.
- * For 2.0 (corresponding to JLS2):
+ * For JLS2:
  * <pre>
  * TypeDeclaration:
  * 		ClassDeclaration
@@ -32,7 +32,7 @@ import java.util.List;
  *			[ <b>extends</b> Type { <b>,</b> Type } ]
  * 			<b>{</b> { InterfaceBodyDeclaration | <b>;</b> } <b>}</b>
  * </pre>
- * For 3.0 (corresponding to JLS3), type parameters and reified modifiers
+ * For JLS3, type parameters and reified modifiers
  * (and annotations) were added, and the superclass type name and superinterface 
  * types names are generalized to type so that parameterized types can be 
  * referenced:
@@ -74,15 +74,15 @@ public class TypeDeclaration extends AbstractTypeDeclaration {
 		internalJavadocPropertyFactory(TypeDeclaration.class);
 
 	/**
-	 * The "modifiers" structural property of this node type (2.0 API only).
+	 * The "modifiers" structural property of this node type (JLS2 API only).
 	 * @since 3.0
 	 */
-	// TODO (jeem) - @deprecated Replaced by {@link #MODIFIERS2_PROPERTY} in the 3.0 API.
+	// TODO (jeem) - @deprecated Replaced by {@link #MODIFIERS2_PROPERTY} in the JLS3 API.
 	public static final SimplePropertyDescriptor MODIFIERS_PROPERTY = 
 		internalModifiersPropertyFactory(TypeDeclaration.class);
 	
 	/**
-	 * The "modifiers" structural property of this node type (added in 3.0 API).
+	 * The "modifiers" structural property of this node type (added in JLS3 API).
 	 * @since 3.0
 	 */
 	public static final ChildListPropertyDescriptor MODIFIERS2_PROPERTY = 
@@ -103,44 +103,44 @@ public class TypeDeclaration extends AbstractTypeDeclaration {
 		new ChildPropertyDescriptor(TypeDeclaration.class, "name", SimpleName.class, MANDATORY, NO_CYCLE_RISK); //$NON-NLS-1$
 
 	/**
-	 * The "superclass" structural property of this node type (2.0 API only).
+	 * The "superclass" structural property of this node type (JLS2 API only).
 	 * @since 3.0
 	 */
-	// TODO (jeem) - @deprecated Replaced by {@link #SUPERCLASS_TYPE_PROPERTY} in the 3.0 API.
+	// TODO (jeem) - @deprecated Replaced by {@link #SUPERCLASS_TYPE_PROPERTY} in the JLS3 API.
 	public static final ChildPropertyDescriptor SUPERCLASS_PROPERTY = 
 		new ChildPropertyDescriptor(TypeDeclaration.class, "superclass", Name.class, OPTIONAL, NO_CYCLE_RISK); //$NON-NLS-1$
 
 	/**
-	 * The "superInterfaces" structural property of this node type (2.0 API only).
+	 * The "superInterfaces" structural property of this node type (JLS2 API only).
 	 * @since 3.0
 	 */
-	// TODO (jeem) - @deprecated Replaced by {@link #SUPER_INTERFACE_TYPES_PROPERTY} in the 3.0 API.
+	// TODO (jeem) - @deprecated Replaced by {@link #SUPER_INTERFACE_TYPES_PROPERTY} in the JLS3 API.
 	public static final ChildListPropertyDescriptor SUPER_INTERFACES_PROPERTY = 
 		new ChildListPropertyDescriptor(TypeDeclaration.class, "superInterfaces", Name.class, NO_CYCLE_RISK); //$NON-NLS-1$
 
 	/**
-	 * The "superclassType" structural property of this node type (added in 3.0 API).
+	 * The "superclassType" structural property of this node type (added in JLS3 API).
 	 * @since 3.0
 	 */
 	public static final ChildPropertyDescriptor SUPERCLASS_TYPE_PROPERTY = 
 		new ChildPropertyDescriptor(TypeDeclaration.class, "superclassType", Type.class, OPTIONAL, NO_CYCLE_RISK); //$NON-NLS-1$
 
 	/**
-	 * The "superInterfaceTypes" structural property of this node type (added in 3.0 API).
+	 * The "superInterfaceTypes" structural property of this node type (added in JLS3 API).
 	 * @since 3.0
 	 */
 	public static final ChildListPropertyDescriptor SUPER_INTERFACE_TYPES_PROPERTY = 
 		new ChildListPropertyDescriptor(TypeDeclaration.class, "superInterfaceTypes", Type.class, NO_CYCLE_RISK); //$NON-NLS-1$
 	
 	/**
-	 * The "typeParameters" structural property of this node type (added in 3.0 API).
+	 * The "typeParameters" structural property of this node type (added in JLS3 API).
 	 * @since 3.0
 	 */
 	public static final ChildListPropertyDescriptor TYPE_PARAMETERS_PROPERTY = 
 		new ChildListPropertyDescriptor(TypeDeclaration.class, "typeParameters", TypeParameter.class, NO_CYCLE_RISK); //$NON-NLS-1$
 	
 	/**
-	 * The "bodyDeclarations" structural property of this node type (added in 3.0 API).
+	 * The "bodyDeclarations" structural property of this node type (added in JLS3 API).
 	 * @since 3.0
 	 */
 	public static final ChildListPropertyDescriptor BODY_DECLARATIONS_PROPERTY = 
@@ -212,7 +212,7 @@ public class TypeDeclaration extends AbstractTypeDeclaration {
 	
 	/**
 	 * The type paramters (element type: <code>TypeParameter</code>). 
-	 * Null in 2.0. Added in 3.0; defaults to an empty list
+	 * Null in JLS2. Added in JLS3; defaults to an empty list
 	 * (see constructor).
 	 * @since 3.0
 	 */
@@ -227,7 +227,7 @@ public class TypeDeclaration extends AbstractTypeDeclaration {
 
 	/**
 	 * The superinterface names (element type: <code>Name</code>). 
-	 * 2.0 only; defaults to an empty list. Not used in 3.0.
+	 * JLS2 only; defaults to an empty list. Not used in JLS3.
 	 * (see constructor).
 	 * 
 	 */
@@ -236,14 +236,14 @@ public class TypeDeclaration extends AbstractTypeDeclaration {
 	/**
 	 * The optional superclass type; <code>null</code> if none.
 	 * Defaults to none. Note that this field is not used for
-	 * interface declarations. Null in 2.0. Added in 3.0.
+	 * interface declarations. Null in JLS2. Added in JLS3.
 	 * @since 3.0
 	 */
 	private Type optionalSuperclassType = null;
 
 	/**
 	 * The superinterface types (element type: <code>Type</code>). 
-	 * Null in 2.0. Added in 3.0; defaults to an empty list
+	 * Null in JLS2. Added in JLS3; defaults to an empty list
 	 * (see constructor).
 	 * @since 3.0
 	 */
@@ -513,7 +513,7 @@ public class TypeDeclaration extends AbstractTypeDeclaration {
 
 	/**
 	 * Returns the live ordered list of type parameters of this type 
-	 * declaration (added in 3.0 API). This list is non-empty for parameterized types.
+	 * declaration (added in JLS3 API). This list is non-empty for parameterized types.
 	 * <p>
 	 * Note: This API element is only needed for dealing with Java code that uses
 	 * new language features of J2SE 1.5. It is included in anticipation of J2SE
@@ -524,7 +524,7 @@ public class TypeDeclaration extends AbstractTypeDeclaration {
 	 * @return the live list of type parameters
 	 *    (element type: <code>TypeParameter</code>)
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * a 2.0 AST
+	 * a JLS2 AST
 	 * @since 3.0
 	 */ 
 	public List typeParameters() {
@@ -537,7 +537,7 @@ public class TypeDeclaration extends AbstractTypeDeclaration {
 	
 	/**
 	 * Returns the name of the superclass declared in this type
-	 * declaration, or <code>null</code> if there is none (2.0 API only).
+	 * declaration, or <code>null</code> if there is none (JLS2 API only).
 	 * <p>
 	 * Note that this child is not relevant for interface 
 	 * declarations (although it does still figure in subtree
@@ -547,9 +547,9 @@ public class TypeDeclaration extends AbstractTypeDeclaration {
 	 * @return the superclass name node, or <code>null</code> if 
 	 *    there is none
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * an AST later than 2.0
+	 * an AST later than JLS2
 	 */ 
-	// TODO (jeem ) - deprecated In the 3.0 API, this method is replaced by <code>getSuperclassType</code>, which returns a <code>Type</code> instead of a <code>Name</code>.
+	// TODO (jeem ) - deprecated In the JLS3 API, this method is replaced by <code>getSuperclassType</code>, which returns a <code>Type</code> instead of a <code>Name</code>.
 	public Name getSuperclass() {
 	    supportedOnlyIn2();
 		return this.optionalSuperclassName;
@@ -557,7 +557,7 @@ public class TypeDeclaration extends AbstractTypeDeclaration {
 
 	/**
 	* Returns the superclass declared in this type
-	* declaration, or <code>null</code> if there is none (added in 3.0 API).
+	* declaration, or <code>null</code> if there is none (added in JLS3 API).
 	* <p>
 	* Note that this child is not relevant for interface 
 	* declarations (although it does still figure in subtree
@@ -567,7 +567,7 @@ public class TypeDeclaration extends AbstractTypeDeclaration {
 	* @return the superclass type node, or <code>null</code> if 
 	*    there is none
 	* @exception UnsupportedOperationException if this operation is used in
-	* a 2.0 AST
+	* a JLS2 AST
 	* @since 3.0
 	*/ 
 	public Type getSuperclassType() {
@@ -577,7 +577,7 @@ public class TypeDeclaration extends AbstractTypeDeclaration {
 
 	/**
 	 * Sets or clears the name of the superclass declared in this type
-	 * declaration (2.0 API only).
+	 * declaration (JLS2 API only).
 	 * <p>
 	 * Note that this child is not relevant for interface 
 	 * declarations (although it does still figure in subtree
@@ -592,9 +592,9 @@ public class TypeDeclaration extends AbstractTypeDeclaration {
 	 * <li>the node already has a parent</li>
 	 * </ul>
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * an AST later than 2.0
+	 * an AST later than JLS2
 	 */ 
-	// TODO (jeem ) deprecated In the 3.0 API, this method is replaced by <code>setType</code>, which expects a <code>Type</code> instead of a <code>Name</code>.
+	// TODO (jeem ) deprecated In the JLS3 API, this method is replaced by <code>setType</code>, which expects a <code>Type</code> instead of a <code>Name</code>.
 	public void setSuperclass(Name superclassName) {
 	    supportedOnlyIn2();
 		ASTNode oldChild = this.optionalSuperclassName;
@@ -605,7 +605,7 @@ public class TypeDeclaration extends AbstractTypeDeclaration {
 
 	/**
 	 * Sets or clears the superclass declared in this type
-	 * declaration (added in 3.0 API).
+	 * declaration (added in JLS3 API).
 	 * <p>
 	 * Note that this child is not relevant for interface declarations
 	 * (although it does still figure in subtree equality comparisons).
@@ -619,7 +619,7 @@ public class TypeDeclaration extends AbstractTypeDeclaration {
 	 * <li>the node already has a parent</li>
 	 * </ul>
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * a 2.0 AST
+	 * a JLS2 AST
 	 * @since 3.0
 	 */ 
 	public void setSuperclassType(Type superclassType) {
@@ -632,7 +632,7 @@ public class TypeDeclaration extends AbstractTypeDeclaration {
 
 	/**
 	 * Returns the live ordered list of names of superinterfaces of this type 
-	 * declaration (2.0 API only). For a class declaration, these are the names
+	 * declaration (JLS2 API only). For a class declaration, these are the names
 	 * of the interfaces that this class implements; for an interface
 	 * declaration, these are the names of the interfaces that this interface
 	 * extends.
@@ -640,9 +640,9 @@ public class TypeDeclaration extends AbstractTypeDeclaration {
 	 * @return the live list of interface names
 	 *    (element type: <code>Name</code>)
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * an AST later than 2.0
+	 * an AST later than JLS2
 	 */ 
-	// TODO (jeem ) - deprecated In the 3.0 API, this method is replaced by <code>superInterfaceTypes()</code>
+	// TODO (jeem ) - deprecated In the JLS3 API, this method is replaced by <code>superInterfaceTypes()</code>
 	public List superInterfaces() {
 		// more efficient than just calling supportedOnlyIn2() to check
 		if (this.superInterfaceNames == null) {
@@ -653,14 +653,14 @@ public class TypeDeclaration extends AbstractTypeDeclaration {
 	
 	/**
 	 * Returns the live ordered list of superinterfaces of this type 
-	 * declaration (added in 3.0 API). For a class declaration, these are the interfaces
+	 * declaration (added in JLS3 API). For a class declaration, these are the interfaces
 	 * that this class implements; for an interface declaration,
 	 * these are the interfaces that this interface extends.
 	 * 
 	 * @return the live list of interface types
 	 *    (element type: <code>Type</code>)
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * a 2.0 AST
+	 * a JLS2 AST
 	 * @since 3.0
 	 */ 
 	public List superInterfaceTypes() {
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeDeclarationStatement.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeDeclarationStatement.java
index 07de5cf..41996a3 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeDeclarationStatement.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeDeclarationStatement.java
@@ -19,12 +19,12 @@ import java.util.List;
  * This kind of node is used to convert a type declaration
  * node into a statement node by wrapping it.
  * </p>
- * For 2.0 (corresponding to JLS2):
+ * For JLS2:
  * <pre>
  * TypeDeclarationStatement:
  *    TypeDeclaration
  * </pre>
- * For 3.0 (corresponding to JLS3), the kinds of type declarations
+ * For JLS3, the kinds of type declarations
  * grew to include enum and annotation type declarations:
  * <pre>
  * TypeDeclarationStatement:
@@ -38,15 +38,15 @@ import java.util.List;
 public class TypeDeclarationStatement extends Statement {
 	
 	/**
-	 * The "typeDeclaration" structural property of this node type (2.0 API only).
+	 * The "typeDeclaration" structural property of this node type (JLS2 API only).
 	 * @since 3.0
 	 */
-	// TODO (jeem) - @deprecated Replaced by {@link #DECLARATION_PROPERTY} in the 3.0 API.
+	// TODO (jeem) - @deprecated Replaced by {@link #DECLARATION_PROPERTY} in the JLS3 API.
 	public static final ChildPropertyDescriptor TYPE_DECLARATION_PROPERTY = 
 		new ChildPropertyDescriptor(TypeDeclarationStatement.class, "typeDeclaration", TypeDeclaration.class, MANDATORY, CYCLE_RISK); //$NON-NLS-1$
 
 	/**
-	 * The "declaration" structural property of this node type (added in 3.0 API).
+	 * The "declaration" structural property of this node type (added in JLS3 API).
 	 * @since 3.0
 	 */
 	public static final ChildPropertyDescriptor DECLARATION_PROPERTY = 
@@ -190,7 +190,7 @@ public class TypeDeclarationStatement extends Statement {
 	
 	/**
 	 * Returns the abstract type declaration of this local type declaration
-	 * statement (2.0 API only).
+	 * statement (JLS2 API only).
 	 * 
 	 * @return the type declaration node
 	 * @since 3.0
@@ -211,7 +211,7 @@ public class TypeDeclarationStatement extends Statement {
 		
 	/**
 	 * Sets the abstract type declaration of this local type declaration
-	 * statement (2.0 API only).
+	 * statement (JLS2 API only).
 	 * 
 	 * @param decl the type declaration node
 	 * @exception IllegalArgumentException if:
@@ -236,13 +236,13 @@ public class TypeDeclarationStatement extends Statement {
 	
 	/**
 	 * Returns the type declaration of this local type declaration
-	 * statement (added in 3.0 API).
+	 * statement (added in JLS3 API).
 	 * 
 	 * @return the type declaration node
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * an AST later than 2.0
+	 * an AST later than JLS2
 	 */ 
-	// TODO (jeem ) - deprecated In the 3.0 API, this method is replaced by <code>getDeclaration</code>, which returns <code>AbstractTypeDeclaration</code> instead of <code>TypeDeclaration</code>.
+	// TODO (jeem ) - deprecated In the JLS3 API, this method is replaced by <code>getDeclaration</code>, which returns <code>AbstractTypeDeclaration</code> instead of <code>TypeDeclaration</code>.
 	public TypeDeclaration getTypeDeclaration() {
 	    supportedOnlyIn2();
 		return (TypeDeclaration) getDeclaration();
@@ -250,7 +250,7 @@ public class TypeDeclarationStatement extends Statement {
 		
 	/**
 	 * Sets the type declaration of this local type declaration
-	 * statement (added in 3.0 API).
+	 * statement (added in JLS3 API).
 	 * 
 	 * @param decl the type declaration node
 	 * @exception IllegalArgumentException if:
@@ -260,9 +260,9 @@ public class TypeDeclarationStatement extends Statement {
 	 * <li>a cycle in would be created</li>
 	 * </ul>
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * an AST later than 2.0
+	 * an AST later than JLS2
 	 */ 
-	// TODO (jeem ) - deprecated In the 3.0 API, this method is replaced by <code>setDeclaration</code> which takes <code>AbstractTypeDeclaration</code> instead of <code>TypeDeclaration</code>.
+	// TODO (jeem ) - deprecated In the JLS3 API, this method is replaced by <code>setDeclaration</code> which takes <code>AbstractTypeDeclaration</code> instead of <code>TypeDeclaration</code>.
 	public void setTypeDeclaration(TypeDeclaration decl) {
 	    supportedOnlyIn2();
 		// forward to non-deprecated replacement method
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeParameter.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeParameter.java
index 42a586a..1eddd60 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeParameter.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeParameter.java
@@ -14,7 +14,7 @@ package org.eclipse.jdt.core.dom;
 import java.util.List;
 
 /**
- * Type parameter node (added in 3.0 API).
+ * Type parameter node (added in JLS3 API).
  * <pre>
  * TypeParameter:
  *    TypeVariable [ <b>extends</b> Type { <b>&</b> Type } ]
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclarationExpression.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclarationExpression.java
index 52d10c1..3370c53 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclarationExpression.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclarationExpression.java
@@ -23,13 +23,13 @@ import java.util.List;
  * This type of node is used (only) as the initializer of a
  * <code>ForStatement</code>.
  * </p>
- * For 2.0 (corresponding to JLS2):
+ * For JLS2:
  * <pre>
  * VariableDeclarationExpression:
  *    { Modifier } Type VariableDeclarationFragment
  *         { <b>,</b> VariableDeclarationFragment } 
  * </pre>
- * For 3.0 (corresponding to JLS3), the modifier flags were replaced by
+ * For JLS3, the modifier flags were replaced by
  * a list of modifier nodes (intermixed with annotations):
  * <pre>
  * VariableDeclarationExpression:
@@ -42,15 +42,15 @@ import java.util.List;
 public class VariableDeclarationExpression extends Expression {
 
 	/**
-	 * The "modifiers" structural property of this node type (2.0 API only).
+	 * The "modifiers" structural property of this node type (JLS2 API only).
 	 * @since 3.0
 	 */
-	// TODO (jeem) - @deprecated Replaced by {@link #MODIFIERS2_PROPERTY} in the 3.0 API.
+	// TODO (jeem) - @deprecated Replaced by {@link #MODIFIERS2_PROPERTY} in the JLS3 API.
 	public static final SimplePropertyDescriptor MODIFIERS_PROPERTY = 
 		new SimplePropertyDescriptor(VariableDeclarationExpression.class, "modifiers", int.class, MANDATORY); //$NON-NLS-1$
 	
 	/**
-	 * The "modifiers" structural property of this node type (added in 3.0 API).
+	 * The "modifiers" structural property of this node type (added in JLS3 API).
 	 * @since 3.0
 	 */
 	public static final ChildListPropertyDescriptor MODIFIERS2_PROPERTY = 
@@ -121,7 +121,7 @@ public class VariableDeclarationExpression extends Expression {
 			
 	/**
 	 * The extended modifiers (element type: <code>IExtendedModifier</code>). 
-	 * Null in 2.0. Added in 3.0; defaults to an empty list
+	 * Null in JLS2. Added in JLS3; defaults to an empty list
 	 * (see constructor).
 	 * @since 3.0
 	 */
@@ -270,7 +270,7 @@ public class VariableDeclarationExpression extends Expression {
 	
 	/**
 	 * Returns the live ordered list of modifiers and annotations
-	 * of this declaration (added in 3.0 API).
+	 * of this declaration (added in JLS3 API).
 	 * <p>
 	 * Note that the final modifier is the only meaningful modifier for local
 	 * variable declarations.
@@ -285,7 +285,7 @@ public class VariableDeclarationExpression extends Expression {
 	 * @return the live list of modifiers and annotations
 	 *    (element type: <code>IExtendedModifier</code>)
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * a 2.0 AST
+	 * a JLS2 AST
 	 * @since 3.0
 	 */ 
 	public List modifiers() {
@@ -299,7 +299,7 @@ public class VariableDeclarationExpression extends Expression {
 	/**
 	 * Returns the modifiers explicitly specified on this declaration.
 	 * <p>
-	 * In the 3.0 API, this method is a convenience method that
+	 * In the JLS3 API, this method is a convenience method that
 	 * computes these flags from <code>modifiers()</code>.
 	 * </p>
 	 * 
@@ -309,10 +309,10 @@ public class VariableDeclarationExpression extends Expression {
 	public int getModifiers() {
 		// more efficient than checking getAST().API_LEVEL
 		if (this.modifiers == null) {
-			// 2.0 behavior - bona fide property
+			// JLS2 behavior - bona fide property
 			return this.modifierFlags;
 		} else {
-			// 3.0 behavior - convenient method
+			// JLS3 behavior - convenient method
 			// performance could be improved by caching computed flags
 			// but this would require tracking changes to this.modifiers
 			int computedModifierFlags = Modifier.NONE;
@@ -327,7 +327,7 @@ public class VariableDeclarationExpression extends Expression {
 	}
 
 	/**
-	 * Sets the modifiers explicitly specified on this declaration (2.0 API only).
+	 * Sets the modifiers explicitly specified on this declaration (JLS2 API only).
 	 * <p>
 	 * Note that the final modifier is the only meaningful modifier for local
 	 * variable declarations.
@@ -335,10 +335,10 @@ public class VariableDeclarationExpression extends Expression {
 	 * 
 	 * @param modifiers the given modifiers (bit-wise or of <code>Modifier</code> constants)
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * an AST later than 2.0
+	 * an AST later than JLS2
 	 * @see Modifier
 	 */ 
-	// TODO (jeem ) - deprecated In the 3.0 API, this method is replaced by <code>modifiers()</code> which contains a list of a <code>Modifier</code> nodes.
+	// TODO (jeem ) - deprecated In the JLS3 API, this method is replaced by <code>modifiers()</code> which contains a list of a <code>Modifier</code> nodes.
 	public void setModifiers(int modifiers) {
 	    supportedOnlyIn2();
 		preValueChange(MODIFIERS_PROPERTY);
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclarationStatement.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclarationStatement.java
index 5594c76..787e351 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclarationStatement.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclarationStatement.java
@@ -21,13 +21,13 @@ import java.util.List;
  * (<code>VariableDeclarationFragment</code>) into a statement 
  * (<code>Statement</code>), all sharing the same modifiers and base type.
  * </p>
- * For 2.0 (corresponding to JLS2):
+ * For JLS2:
  * <pre>
  * VariableDeclarationStatement:
  *    { Modifier } Type VariableDeclarationFragment 
  *        { <b>,</b> VariableDeclarationFragment } <b>;</b>
  * </pre>
- * For 3.0 (corresponding to JLS3), the modifier flags were replaced by
+ * For JLS3, the modifier flags were replaced by
  * a list of modifier nodes (intermixed with annotations):
  * <pre>
  * VariableDeclarationStatement:
@@ -40,15 +40,15 @@ import java.util.List;
 public class VariableDeclarationStatement extends Statement {
 	
 	/**
-	 * The "modifiers" structural property of this node type (2.0 API only).
+	 * The "modifiers" structural property of this node type (JLS2 API only).
 	 * @since 3.0
 	 */
-	// TODO (jeem) - @deprecated Replaced by {@link #MODIFIERS2_PROPERTY} in the 3.0 API.
+	// TODO (jeem) - @deprecated Replaced by {@link #MODIFIERS2_PROPERTY} in the JLS3 API.
 	public static final SimplePropertyDescriptor MODIFIERS_PROPERTY = 
 		new SimplePropertyDescriptor(VariableDeclarationStatement.class, "modifiers", int.class, MANDATORY); //$NON-NLS-1$
 	
 	/**
-	 * The "modifiers" structural property of this node type (added in 3.0 API).
+	 * The "modifiers" structural property of this node type (added in JLS3 API).
 	 * @since 3.0
 	 */
 	public static final ChildListPropertyDescriptor MODIFIERS2_PROPERTY = 
@@ -119,7 +119,7 @@ public class VariableDeclarationStatement extends Statement {
 			
 	/**
 	 * The extended modifiers (element type: <code>IExtendedModifier</code>). 
-	 * Null in 2.0. Added in 3.0; defaults to an empty list
+	 * Null in JLS2. Added in JLS3; defaults to an empty list
 	 * (see constructor).
 	 * @since 3.0
 	 */
@@ -127,7 +127,7 @@ public class VariableDeclarationStatement extends Statement {
 	
 	/**
 	 * The modifier flagss; bit-wise or of Modifier flags.
-	 * Defaults to none. Not used in 3.0.
+	 * Defaults to none. Not used in JLS3.
 	 */
 	private int modifierFlags = Modifier.NONE;
 		
@@ -268,7 +268,7 @@ public class VariableDeclarationStatement extends Statement {
 	
 	/**
 	 * Returns the live ordered list of modifiers and annotations
-	 * of this declaration (added in 3.0 API).
+	 * of this declaration (added in JLS3 API).
 	 * <p>
 	 * Note that the final modifier is the only meaningful modifier for local
 	 * variable declarations.
@@ -277,7 +277,7 @@ public class VariableDeclarationStatement extends Statement {
 	 * @return the live list of modifiers and annotations
 	 *    (element type: <code>IExtendedModifier</code>)
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * a 2.0 AST
+	 * a JLS2 AST
 	 * @since 3.0
 	 */ 
 	public List modifiers() {
@@ -291,7 +291,7 @@ public class VariableDeclarationStatement extends Statement {
 	/**
 	 * Returns the modifiers explicitly specified on this declaration.
 	 * <p>
-	 * In the 3.0 API, this method is a convenience method that
+	 * In the JLS3 API, this method is a convenience method that
 	 * computes these flags from <code>modifiers()</code>.
 	 * </p>
 	 * 
@@ -301,10 +301,10 @@ public class VariableDeclarationStatement extends Statement {
 	public int getModifiers() {
 		// more efficient than checking getAST().API_LEVEL
 		if (this.modifiers == null) {
-			// 2.0 behavior - bona fide property
+			// JLS2 behavior - bona fide property
 			return this.modifierFlags;
 		} else {
-			// 3.0 behavior - convenience method
+			// JLS3 behavior - convenience method
 			// performance could be improved by caching computed flags
 			// but this would require tracking changes to this.modifiers
 			int computedModifierFlags = Modifier.NONE;
@@ -319,7 +319,7 @@ public class VariableDeclarationStatement extends Statement {
 	}
 
 	/**
-	 * Sets the modifiers explicitly specified on this declaration (2.0 API only).
+	 * Sets the modifiers explicitly specified on this declaration (JLS2 API only).
 	 * <p>
 	 * Note that the final modifier is the only meaningful modifier for local
 	 * variable declarations.
@@ -327,10 +327,10 @@ public class VariableDeclarationStatement extends Statement {
 	 * 
 	 * @param modifiers the given modifiers (bit-wise or of <code>Modifier</code> constants)
 	 * @exception UnsupportedOperationException if this operation is used in
-	 * an AST later than 2.0
+	 * an AST later than JLS2
 	 * @see Modifier
 	 */ 
-	// TODO (jeem ) - deprecated In the 3.0 API, this method is replaced by <code>modifiers()</code> which contains a list of a <code>Modifier</code> nodes.
+	// TODO (jeem ) - deprecated In the JLS3 API, this method is replaced by <code>modifiers()</code> which contains a list of a <code>Modifier</code> nodes.
 	public void setModifiers(int modifiers) {
 	    supportedOnlyIn2();
 		preValueChange(MODIFIERS_PROPERTY);
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/WildcardType.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/WildcardType.java
index 6f4c815..3dd506d 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/WildcardType.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/WildcardType.java
@@ -14,7 +14,7 @@ package org.eclipse.jdt.core.dom;
 import java.util.List;
 
 /**
- * Type node for a wildcard type (added in 3.0 API).
+ * Type node for a wildcard type (added in JLS3 API).
  * <pre>
  * WildcardType:
  *    <b>?</b> [ ( <b>extends</b> | <b>super</b>) Type ] 
commit 90d5b8519b63ac68f2b1ae180ebd3100feb559a2
Author: Jim Desrivieres <jdesrivieres>
Date:   Wed May 19 17:06:20 2004 +0000

    Clarify TODO comments (bug 59788)

3	3	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java
1	1	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BodyDeclaration.java
3	3	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ClassInstanceCreation.java
1	1	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/FieldDeclaration.java
1	1	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Initializer.java
1	1	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Javadoc.java
4	4	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java
2	2	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleVariableDeclaration.java
6	6	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeDeclaration.java
3	3	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeDeclarationStatement.java
2	2	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclarationExpression.java
2	2	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclarationStatement.java
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java
index 0e6e681..cbac462 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java
@@ -93,7 +93,7 @@ public final class AST {
      *
 	 * @since 3.0
 	 */
-	// TODO (jeem) deprecated Clients should use the JLS3 API.
+	// TODO (jeem) When JLS3 support is complete (post 3.0) - deprecated Clients should use the JLS3 API.
 	public static final int JLS2 = 2;
 	
 	/**
@@ -213,7 +213,7 @@ public final class AST {
 	 * 
 	 * @see JavaCore#getDefaultOptions()
 	 */
-	// TODO (jeem) deprecated Clients should port their code to use the new JLS3 API and call {@link #newAST(int)} instead of using this constructor.
+	// TODO (jeem) When JLS3 support is complete (post 3.0) - deprecated Clients should port their code to use the new JLS3 API and call {@link #newAST(int)} instead of using this constructor.
 	public AST() {
 		this(JavaCore.getDefaultOptions());
 	}
@@ -276,7 +276,7 @@ public final class AST {
 	 *    value type: <code>String</code>)
 	 * @see JavaCore#getDefaultOptions()
 	 */
-	// TODO (jeem) deprecated Clients should port their code to use the new JLS3 API and call {@link #newAST(int)} instead of using this constructor.
+	// TODO (jeem) When JLS3 support is complete (post 3.0) - deprecated Clients should port their code to use the new JLS3 API and call {@link #newAST(int)} instead of using this constructor.
 	public AST(Map options) {
 		this(JLS2);
 		// override scanner if 1.4 asked for
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BodyDeclaration.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BodyDeclaration.java
index 3d32c88..8b4d8d6 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BodyDeclaration.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/BodyDeclaration.java
@@ -209,7 +209,7 @@ public abstract class BodyDeclaration extends ASTNode {
 	 * an AST later than JLS2
 	 * @see Modifier
 	 */ 
-	// TODO (jeem ) - deprecated In the JLS3 API, this method is replaced by <code>modifiers()</code> which contains a list of a <code>Modifier</code> nodes.
+	// TODO (jeem) When JLS3 support is complete (post 3.0) - deprecated In the JLS3 API, this method is replaced by <code>modifiers()</code> which contains a list of a <code>Modifier</code> nodes.
 	public void setModifiers(int modifiers) {
 		// more efficient than just calling supportedOnlyIn2() to check
 		if (this.modifiers != null) {
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ClassInstanceCreation.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ClassInstanceCreation.java
index 08a24b2..a750888 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ClassInstanceCreation.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ClassInstanceCreation.java
@@ -78,7 +78,7 @@ public class ClassInstanceCreation extends Expression {
 	 * The "name" structural property of this node type (JLS2 API only).
 	 * @since 3.0
 	 */
-	// TODO (jeem) - @deprecated Replaced by {@link #TYPE_PROPERTY} in the JLS3 API.
+	// TODO (jeem) When JLS3 support is complete (post 3.0) - deprecated Replaced by {@link #TYPE_PROPERTY} in the JLS3 API.
 	public static final ChildPropertyDescriptor NAME_PROPERTY = 
 		new ChildPropertyDescriptor(ClassInstanceCreation.class, "name", Name.class, MANDATORY, NO_CYCLE_RISK); //$NON-NLS-1$
 
@@ -397,7 +397,7 @@ public class ClassInstanceCreation extends Expression {
 	 * @exception UnsupportedOperationException if this operation is used in
 	 * an AST later than JLS2
 	 */ 
-	// TODO (jeem ) - deprecated In the JLS3 API, this method is replaced by <code>getType</code>, which returns a <code>Type</code> instead of a <code>Name</code>.
+	// TODO (jeem) When JLS3 support is complete (post 3.0) - deprecated In the JLS3 API, this method is replaced by <code>getType</code>, which returns a <code>Type</code> instead of a <code>Name</code>.
 	public Name getName() {
 	    supportedOnlyIn2();
 		if (this.typeName == null) {
@@ -426,7 +426,7 @@ public class ClassInstanceCreation extends Expression {
 	 * @exception UnsupportedOperationException if this operation is used in
 	 * an AST later than JLS2
 	 */ 
-	// TODO (jeem ) deprecated In the JLS3 API, this method is replaced by <code>setType</code>, which expects a <code>Type</code> instead of a <code>Name</code>.
+	// TODO (jeem) When JLS3 support is complete (post 3.0) - deprecated In the JLS3 API, this method is replaced by <code>setType</code>, which expects a <code>Type</code> instead of a <code>Name</code>.
 	public void setName(Name name) {
 	    supportedOnlyIn2();
 		if (name == null) {
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/FieldDeclaration.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/FieldDeclaration.java
index 29eb13e..d15d5b0 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/FieldDeclaration.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/FieldDeclaration.java
@@ -48,7 +48,7 @@ public class FieldDeclaration extends BodyDeclaration {
 	 * The "modifiers" structural property of this node type (JLS2 API only).
 	 * @since 3.0
 	 */
-	// TODO (jeem) - @deprecated Replaced by {@link #MODIFIERS2_PROPERTY} in the JLS3 API.
+    // TODO (jeem) When JLS3 support is complete (post 3.0) - deprecated Replaced by {@link #MODIFIERS2_PROPERTY} in the JLS3 API.
 	public static final SimplePropertyDescriptor MODIFIERS_PROPERTY = 
 		internalModifiersPropertyFactory(FieldDeclaration.class);
 	
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Initializer.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Initializer.java
index a5e7c6c..876ec68 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Initializer.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Initializer.java
@@ -35,7 +35,7 @@ public class Initializer extends BodyDeclaration {
 	 * The "modifiers" structural property of this node type (JLS2 API only).
 	 * @since 3.0
 	 */
-	// TODO (jeem) - @deprecated Replaced by {@link #MODIFIERS2_PROPERTY} in the JLS3 API.
+    // TODO (jeem) When JLS3 support is complete (post 3.0) - deprecated Replaced by {@link #MODIFIERS2_PROPERTY} in the JLS3 API.
 	public static final SimplePropertyDescriptor MODIFIERS_PROPERTY = 
 		internalModifiersPropertyFactory(Initializer.class);
 	
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Javadoc.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Javadoc.java
index 0b114de..5e420c3 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Javadoc.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Javadoc.java
@@ -32,7 +32,7 @@ public class Javadoc extends Comment {
 	 * The "comment" structural property of this node type (JLS2 API only).
 	 * @since 3.0
 	 */
-	// TODO (jeem) - @deprecated Replaced by {@link #TAGS_PROPERTY} in the JLS3 API.
+	// TODO (jeem) When JLS3 support is complete (post 3.0) - deprecated Replaced by {@link #TAGS_PROPERTY} in the JLS3 API.
 	public static final SimplePropertyDescriptor COMMENT_PROPERTY = 
 		new SimplePropertyDescriptor(Javadoc.class, "comment", String.class, MANDATORY); //$NON-NLS-1$
 	
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java
index 7953aca..69feab4 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java
@@ -73,7 +73,7 @@ public class MethodDeclaration extends BodyDeclaration {
 	 * The "modifiers" structural property of this node type (JLS2 API only).
 	 * @since 3.0
 	 */
-	// TODO (jeem) - @deprecated Replaced by {@link #MODIFIERS2_PROPERTY} in the JLS3 API.
+    // TODO (jeem) When JLS3 support is complete (post 3.0) - deprecated Replaced by {@link #MODIFIERS2_PROPERTY} in the JLS3 API.
 	public static final SimplePropertyDescriptor MODIFIERS_PROPERTY = 
 		internalModifiersPropertyFactory(MethodDeclaration.class);
 	
@@ -102,7 +102,7 @@ public class MethodDeclaration extends BodyDeclaration {
 	 * The "returnType" structural property of this node type (JLS2 API only).
 	 * @since 3.0
 	 */
-	// TODO (jeem) - @deprecated Replaced by {@link #RETURN_TYPE2_PROPERTY} in the JLS3 API.
+	// TODO (jeem) When JLS3 support is complete (post 3.0) - deprecated Replaced by {@link #RETURN_TYPE2_PROPERTY} in the JLS3 API.
 	public static final ChildPropertyDescriptor RETURN_TYPE_PROPERTY = 
 		new ChildPropertyDescriptor(MethodDeclaration.class, "returnType", Type.class, MANDATORY, NO_CYCLE_RISK); //$NON-NLS-1$
 
@@ -664,7 +664,7 @@ public class MethodDeclaration extends BodyDeclaration {
 	 * @exception UnsupportedOperationException if this operation is used in
 	 * an AST later than JLS2
 	 */ 
-	// TODO (jeem ) - deprecated In the JLS3 API, this method is replaced by <code>getReturnType2</code>, which may return <code>null</code>.
+	// TODO (jeem) When JLS3 support is complete (post 3.0) - deprecated In the JLS3 API, this method is replaced by <code>getReturnType2</code>, which may return <code>null</code>.
 	public Type getReturnType() {
 	    supportedOnlyIn2();
 		if (this.returnType == null) {
@@ -698,7 +698,7 @@ public class MethodDeclaration extends BodyDeclaration {
 	 * @exception UnsupportedOperationException if this operation is used in
 	 * an AST later than JLS2
 	 */ 
-	// TODO (jeem ) - deprecated In the JLS3 API, this method is replaced by <code>setReturnType2</code>, which accepts <code>null</code>.
+	// TODO (jeem) When JLS3 support is complete (post 3.0) - deprecated In the JLS3 API, this method is replaced by <code>setReturnType2</code>, which accepts <code>null</code>.
 	public void setReturnType(Type type) {
 	    supportedOnlyIn2();
 		if (type == null) {
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleVariableDeclaration.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleVariableDeclaration.java
index 43d5f68..7f2c782 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleVariableDeclaration.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleVariableDeclaration.java
@@ -40,7 +40,7 @@ public class SingleVariableDeclaration extends VariableDeclaration {
 	 * The "modifiers" structural property of this node type (JLS2 API only).
 	 * @since 3.0
 	 */
-	// TODO (jeem) - @deprecated Replaced by {@link #MODIFIERS2_PROPERTY} in the JLS3 API.
+    // TODO (jeem) When JLS3 support is complete (post 3.0) - deprecated Replaced by {@link #MODIFIERS2_PROPERTY} in the JLS3 API.
 	public static final SimplePropertyDescriptor MODIFIERS_PROPERTY = 
 		new SimplePropertyDescriptor(SingleVariableDeclaration.class, "modifiers", int.class, MANDATORY); //$NON-NLS-1$
 	
@@ -413,7 +413,7 @@ public class SingleVariableDeclaration extends VariableDeclaration {
 	 * an AST later than JLS2
 	 * @see Modifier
 	 */ 
-	// TODO (jeem ) - deprecated In the JLS3 API, this method is replaced by <code>modifiers()</code> which contains a list of  a <code>Modifier</code> nodes.
+	// TODO (jeem) When JLS3 support is complete (post 3.0) - deprecated In the JLS3 API, this method is replaced by <code>modifiers()</code> which contains a list of  a <code>Modifier</code> nodes.
 	public void setModifiers(int modifiers) {
 	    supportedOnlyIn2();
 		preValueChange(MODIFIERS_PROPERTY);
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeDeclaration.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeDeclaration.java
index e581c64..12b3fcd 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeDeclaration.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeDeclaration.java
@@ -77,7 +77,7 @@ public class TypeDeclaration extends AbstractTypeDeclaration {
 	 * The "modifiers" structural property of this node type (JLS2 API only).
 	 * @since 3.0
 	 */
-	// TODO (jeem) - @deprecated Replaced by {@link #MODIFIERS2_PROPERTY} in the JLS3 API.
+    // TODO (jeem) When JLS3 support is complete (post 3.0) - deprecated Replaced by {@link #MODIFIERS2_PROPERTY} in the JLS3 API.
 	public static final SimplePropertyDescriptor MODIFIERS_PROPERTY = 
 		internalModifiersPropertyFactory(TypeDeclaration.class);
 	
@@ -106,7 +106,7 @@ public class TypeDeclaration extends AbstractTypeDeclaration {
 	 * The "superclass" structural property of this node type (JLS2 API only).
 	 * @since 3.0
 	 */
-	// TODO (jeem) - @deprecated Replaced by {@link #SUPERCLASS_TYPE_PROPERTY} in the JLS3 API.
+	// TODO (jeem) When JLS3 support is complete (post 3.0) - deprecated Replaced by {@link #SUPERCLASS_TYPE_PROPERTY} in the JLS3 API.
 	public static final ChildPropertyDescriptor SUPERCLASS_PROPERTY = 
 		new ChildPropertyDescriptor(TypeDeclaration.class, "superclass", Name.class, OPTIONAL, NO_CYCLE_RISK); //$NON-NLS-1$
 
@@ -114,7 +114,7 @@ public class TypeDeclaration extends AbstractTypeDeclaration {
 	 * The "superInterfaces" structural property of this node type (JLS2 API only).
 	 * @since 3.0
 	 */
-	// TODO (jeem) - @deprecated Replaced by {@link #SUPER_INTERFACE_TYPES_PROPERTY} in the JLS3 API.
+	// TODO (jeem) When JLS3 support is complete (post 3.0) - deprecated Replaced by {@link #SUPER_INTERFACE_TYPES_PROPERTY} in the JLS3 API.
 	public static final ChildListPropertyDescriptor SUPER_INTERFACES_PROPERTY = 
 		new ChildListPropertyDescriptor(TypeDeclaration.class, "superInterfaces", Name.class, NO_CYCLE_RISK); //$NON-NLS-1$
 
@@ -549,7 +549,7 @@ public class TypeDeclaration extends AbstractTypeDeclaration {
 	 * @exception UnsupportedOperationException if this operation is used in
 	 * an AST later than JLS2
 	 */ 
-	// TODO (jeem ) - deprecated In the JLS3 API, this method is replaced by <code>getSuperclassType</code>, which returns a <code>Type</code> instead of a <code>Name</code>.
+	// TODO (jeem) When JLS3 support is complete (post 3.0) - deprecated In the JLS3 API, this method is replaced by <code>getSuperclassType</code>, which returns a <code>Type</code> instead of a <code>Name</code>.
 	public Name getSuperclass() {
 	    supportedOnlyIn2();
 		return this.optionalSuperclassName;
@@ -594,7 +594,7 @@ public class TypeDeclaration extends AbstractTypeDeclaration {
 	 * @exception UnsupportedOperationException if this operation is used in
 	 * an AST later than JLS2
 	 */ 
-	// TODO (jeem ) deprecated In the JLS3 API, this method is replaced by <code>setType</code>, which expects a <code>Type</code> instead of a <code>Name</code>.
+	// TODO (jeem) When JLS3 support is complete (post 3.0) - deprecated In the JLS3 API, this method is replaced by <code>setType</code>, which expects a <code>Type</code> instead of a <code>Name</code>.
 	public void setSuperclass(Name superclassName) {
 	    supportedOnlyIn2();
 		ASTNode oldChild = this.optionalSuperclassName;
@@ -642,7 +642,7 @@ public class TypeDeclaration extends AbstractTypeDeclaration {
 	 * @exception UnsupportedOperationException if this operation is used in
 	 * an AST later than JLS2
 	 */ 
-	// TODO (jeem ) - deprecated In the JLS3 API, this method is replaced by <code>superInterfaceTypes()</code>
+	// TODO (jeem) When JLS3 support is complete (post 3.0) - deprecated In the JLS3 API, this method is replaced by <code>superInterfaceTypes()</code>
 	public List superInterfaces() {
 		// more efficient than just calling supportedOnlyIn2() to check
 		if (this.superInterfaceNames == null) {
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeDeclarationStatement.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeDeclarationStatement.java
index 41996a3..300e6d2 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeDeclarationStatement.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeDeclarationStatement.java
@@ -41,7 +41,7 @@ public class TypeDeclarationStatement extends Statement {
 	 * The "typeDeclaration" structural property of this node type (JLS2 API only).
 	 * @since 3.0
 	 */
-	// TODO (jeem) - @deprecated Replaced by {@link #DECLARATION_PROPERTY} in the JLS3 API.
+	// TODO (jeem) When JLS3 support is complete (post 3.0) - deprecated Replaced by {@link #DECLARATION_PROPERTY} in the JLS3 API.
 	public static final ChildPropertyDescriptor TYPE_DECLARATION_PROPERTY = 
 		new ChildPropertyDescriptor(TypeDeclarationStatement.class, "typeDeclaration", TypeDeclaration.class, MANDATORY, CYCLE_RISK); //$NON-NLS-1$
 
@@ -242,7 +242,7 @@ public class TypeDeclarationStatement extends Statement {
 	 * @exception UnsupportedOperationException if this operation is used in
 	 * an AST later than JLS2
 	 */ 
-	// TODO (jeem ) - deprecated In the JLS3 API, this method is replaced by <code>getDeclaration</code>, which returns <code>AbstractTypeDeclaration</code> instead of <code>TypeDeclaration</code>.
+	// TODO (jeem) When JLS3 support is complete (post 3.0) - deprecated In the JLS3 API, this method is replaced by <code>getDeclaration</code>, which returns <code>AbstractTypeDeclaration</code> instead of <code>TypeDeclaration</code>.
 	public TypeDeclaration getTypeDeclaration() {
 	    supportedOnlyIn2();
 		return (TypeDeclaration) getDeclaration();
@@ -262,7 +262,7 @@ public class TypeDeclarationStatement extends Statement {
 	 * @exception UnsupportedOperationException if this operation is used in
 	 * an AST later than JLS2
 	 */ 
-	// TODO (jeem ) - deprecated In the JLS3 API, this method is replaced by <code>setDeclaration</code> which takes <code>AbstractTypeDeclaration</code> instead of <code>TypeDeclaration</code>.
+    // TODO (jeem) When JLS3 support is complete (post 3.0) - deprecated In the JLS3 API, this method is replaced by <code>setDeclaration</code> which takes <code>AbstractTypeDeclaration</code> instead of <code>TypeDeclaration</code>.
 	public void setTypeDeclaration(TypeDeclaration decl) {
 	    supportedOnlyIn2();
 		// forward to non-deprecated replacement method
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclarationExpression.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclarationExpression.java
index 3370c53..a3f8c57 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclarationExpression.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclarationExpression.java
@@ -45,7 +45,7 @@ public class VariableDeclarationExpression extends Expression {
 	 * The "modifiers" structural property of this node type (JLS2 API only).
 	 * @since 3.0
 	 */
-	// TODO (jeem) - @deprecated Replaced by {@link #MODIFIERS2_PROPERTY} in the JLS3 API.
+	// TODO (jeem) When JLS3 support is complete (post 3.0) - deprecated Replaced by {@link #MODIFIERS2_PROPERTY} in the JLS3 API.
 	public static final SimplePropertyDescriptor MODIFIERS_PROPERTY = 
 		new SimplePropertyDescriptor(VariableDeclarationExpression.class, "modifiers", int.class, MANDATORY); //$NON-NLS-1$
 	
@@ -338,7 +338,7 @@ public class VariableDeclarationExpression extends Expression {
 	 * an AST later than JLS2
 	 * @see Modifier
 	 */ 
-	// TODO (jeem ) - deprecated In the JLS3 API, this method is replaced by <code>modifiers()</code> which contains a list of a <code>Modifier</code> nodes.
+	// TODO (jeem) When JLS3 support is complete (post 3.0) - deprecated In the JLS3 API, this method is replaced by <code>modifiers()</code> which contains a list of a <code>Modifier</code> nodes.
 	public void setModifiers(int modifiers) {
 	    supportedOnlyIn2();
 		preValueChange(MODIFIERS_PROPERTY);
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclarationStatement.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclarationStatement.java
index 787e351..687d7c5 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclarationStatement.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclarationStatement.java
@@ -43,7 +43,7 @@ public class VariableDeclarationStatement extends Statement {
 	 * The "modifiers" structural property of this node type (JLS2 API only).
 	 * @since 3.0
 	 */
-	// TODO (jeem) - @deprecated Replaced by {@link #MODIFIERS2_PROPERTY} in the JLS3 API.
+	// TODO (jeem) When JLS3 support is complete (post 3.0) - deprecated Replaced by {@link #MODIFIERS2_PROPERTY} in the JLS3 API.
 	public static final SimplePropertyDescriptor MODIFIERS_PROPERTY = 
 		new SimplePropertyDescriptor(VariableDeclarationStatement.class, "modifiers", int.class, MANDATORY); //$NON-NLS-1$
 	
@@ -330,7 +330,7 @@ public class VariableDeclarationStatement extends Statement {
 	 * an AST later than JLS2
 	 * @see Modifier
 	 */ 
-	// TODO (jeem ) - deprecated In the JLS3 API, this method is replaced by <code>modifiers()</code> which contains a list of a <code>Modifier</code> nodes.
+	// TODO (jeem) When JLS3 support is complete (post 3.0) - deprecated In the JLS3 API, this method is replaced by <code>modifiers()</code> which contains a list of a <code>Modifier</code> nodes.
 	public void setModifiers(int modifiers) {
 	    supportedOnlyIn2();
 		preValueChange(MODIFIERS_PROPERTY);

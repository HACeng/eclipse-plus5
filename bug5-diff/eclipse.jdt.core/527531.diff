commit 43764a001d142827670f1a4488629cef2e527cce
Author: Andrey Loskutov <loskutov@gmx.de>
Date:   Tue Nov 21 00:02:57 2017 +0100

    Bug 527531 - Use sets for collections if element lookup is the only
    operation
    
    Change-Id: Ie3e60cf29ed446dc4f7af35cae2bf8bb615c30b6
    Signed-off-by: Andrey Loskutov <loskutov@gmx.de>

6	5	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
2	1	org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/linewrap/WrapExecutor.java
2	2	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java
1	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java
6	6	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java
2	2	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/BatchImageBuilder.java
4	4	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java
3	3	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java
1	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/State.java
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
index f556c9c..ac1ace9 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
@@ -18,6 +18,7 @@ package org.eclipse.jdt.internal.codeassist;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashSet;
+import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
@@ -154,12 +155,12 @@ import org.eclipse.jdt.internal.compiler.ast.OperatorIds;
 import org.eclipse.jdt.internal.compiler.ast.PackageVisibilityStatement;
 import org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference;
 import org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference;
+import org.eclipse.jdt.internal.compiler.ast.ProvidesStatement;
 import org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference;
 import org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference;
 import org.eclipse.jdt.internal.compiler.ast.ReferenceExpression;
 import org.eclipse.jdt.internal.compiler.ast.RequiresStatement;
 import org.eclipse.jdt.internal.compiler.ast.ReturnStatement;
-import org.eclipse.jdt.internal.compiler.ast.ProvidesStatement;
 import org.eclipse.jdt.internal.compiler.ast.SingleNameReference;
 import org.eclipse.jdt.internal.compiler.ast.SingleTypeReference;
 import org.eclipse.jdt.internal.compiler.ast.SuperReference;
@@ -231,10 +232,10 @@ import org.eclipse.jdt.internal.core.InternalNamingConventions;
 import org.eclipse.jdt.internal.core.JavaElementRequestor;
 import org.eclipse.jdt.internal.core.JavaModelManager;
 import org.eclipse.jdt.internal.core.ModuleSourcePathManager;
+import org.eclipse.jdt.internal.core.SearchableEnvironment;
 import org.eclipse.jdt.internal.core.SourceMethod;
 import org.eclipse.jdt.internal.core.SourceMethodElementInfo;
 import org.eclipse.jdt.internal.core.SourceType;
-import org.eclipse.jdt.internal.core.SearchableEnvironment;
 import org.eclipse.jdt.internal.core.SourceTypeElementInfo;
 import org.eclipse.jdt.internal.core.search.BasicSearchEngine;
 import org.eclipse.jdt.internal.core.search.matching.IndexBasedJavaSearchEnvironment;
@@ -11951,9 +11952,9 @@ public final class CompletionEngine
 		IJavaSearchScope searchScope = BasicSearchEngine.createJavaSearchScope(new IJavaElement[] {this.javaProject});
 		class ImplSearchRequestor extends SearchRequestor {
 			String prefix;
-			List<String> filter;
+			LinkedHashSet<String> filter;
 			public List<IType> types = new ArrayList<>();
-			public ImplSearchRequestor(char[] prefixToken, List<String> filter) {
+			public ImplSearchRequestor(char[] prefixToken, LinkedHashSet<String> filter) {
 				this.prefix = (prefixToken == CharOperation.ALL_PREFIX) ? null : new String(prefixToken);
 				this.filter = filter;
 			}
@@ -11979,7 +11980,7 @@ public final class CompletionEngine
 			}
 		}
 		try {
-			List<String> existingImpl = new ArrayList<>();
+			LinkedHashSet<String> existingImpl = new LinkedHashSet<>();
 			char[][] theInterfaceName = theInterface.getTypeName();
 			// filter out existing implementations of the same interfaces
 			for (int i = 0, l = this.moduleDeclaration.servicesCount; i < l; ++i) {
diff --git a/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/linewrap/WrapExecutor.java b/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/linewrap/WrapExecutor.java
index 6bd926f..293ead7 100644
--- a/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/linewrap/WrapExecutor.java
+++ b/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/linewrap/WrapExecutor.java
@@ -19,6 +19,7 @@ import static org.eclipse.jdt.internal.compiler.parser.TerminalTokens.TokenNameC
 import java.util.ArrayDeque;
 import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.LinkedHashSet;
 import java.util.List;
 
 import org.eclipse.jdt.internal.compiler.parser.ScannerHelper;
@@ -464,7 +465,7 @@ public class WrapExecutor {
 				depthLimit = currentDepth;
 		}
 		// optimization: turns out there's no point checking multiple wraps with the same policy 
-		ArrayList<WrapPolicy> policiesTried = new ArrayList<>();
+		LinkedHashSet<WrapPolicy> policiesTried = new LinkedHashSet<>();
 
 		for (int i = lastIndex; firstPotentialWrap >= 0 && i >= firstPotentialWrap; i--) {
 			token = this.tm.get(i);
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java
index 0ee4acb..45993e6 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java
@@ -40,7 +40,7 @@ import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Hashtable;
 import java.util.Iterator;
-import java.util.List;
+import java.util.LinkedHashSet;
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Set;
@@ -2101,7 +2101,7 @@ public class JavaModelManager implements ISaveParticipant, IContentTypeChangeLis
 		if(perProjectInfo == null) 
 			return referencedEntries;
 		
-		List pathToReferencedEntries = new ArrayList(referencedEntries.length);
+		LinkedHashSet<IPath> pathToReferencedEntries = new LinkedHashSet<>(referencedEntries.length);
 		for (int index = 0; index < referencedEntries.length; index++) {
 
 			if (pathToReferencedEntries.contains(referencedEntries[index].getPath()))
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java
index 6f39361..8966465 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java
@@ -2916,7 +2916,7 @@ public class JavaProject
 		Map knownDrives = new HashMap();
 
 		Map referencedEntriesMap = new HashMap();
-		List rawLibrariesPath = new ArrayList();
+		Set<IPath> rawLibrariesPath = new LinkedHashSet<>();
 		LinkedHashSet resolvedEntries = new LinkedHashSet();
 		
 		if(resolveChainedLibraries) {
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java
index 1b76311..fd8e382 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java
@@ -50,7 +50,7 @@ protected BuildNotifier notifier;
 
 protected Compiler compiler;
 protected WorkQueue workQueue;
-protected ArrayList problemSourceFiles;
+protected LinkedHashSet<SourceFile> problemSourceFiles;
 protected boolean compiledAllAtOnce;
 
 private boolean inCompiler;
@@ -99,7 +99,7 @@ protected AbstractImageBuilder(JavaBuilder javaBuilder, boolean buildStarting, S
 		this.newState = newState == null ? new State(javaBuilder) : newState;
 		this.compiler = newCompiler();
 		this.workQueue = new WorkQueue();
-		this.problemSourceFiles = new ArrayList(3);
+		this.problemSourceFiles = new LinkedHashSet(3);
 
 		if (this.javaBuilder.participants != null) {
 			for (int i = 0, l = this.javaBuilder.participants.length; i < l; i++) {
@@ -137,8 +137,7 @@ public void acceptResult(CompilationResult result) {
 
 		if (result.hasInconsistentToplevelHierarchies)
 			// ensure that this file is always retrieved from source for the rest of the build
-			if (!this.problemSourceFiles.contains(compilationUnit))
-				this.problemSourceFiles.add(compilationUnit);
+			this.problemSourceFiles.add(compilationUnit);
 
 		IType mainType = null;
 		String mainTypeName = null;
@@ -209,7 +208,7 @@ public void acceptResult(CompilationResult result) {
 protected void acceptSecondaryType(ClassFile classFile) {
 	// noop
 }
-protected void addAllSourceFiles(final ArrayList sourceFiles) throws CoreException {
+protected void addAllSourceFiles(final LinkedHashSet<SourceFile> sourceFiles) throws CoreException {
 	for (int i = 0, l = this.sourceLocations.length; i < l; i++) {
 		final ClasspathMultiDirectory sourceLocation = this.sourceLocations[i];
 		final char[][] exclusionPatterns = sourceLocation.exclusionPatterns;
@@ -355,8 +354,9 @@ protected void compile(SourceFile[] units, SourceFile[] additionalUnits, boolean
 			additionalUnits = new SourceFile[toAdd];
 		else
 			System.arraycopy(additionalUnits, 0, additionalUnits = new SourceFile[length + toAdd], 0, length);
+		Iterator<SourceFile> iterator = this.problemSourceFiles.iterator();
 		for (int i = 0; i < toAdd; i++)
-			additionalUnits[length + i] = (SourceFile) this.problemSourceFiles.get(i);
+			additionalUnits[length + i] = iterator.next();
 	}
 	String[] initialTypeNames = new String[units.length];
 	for (int i = 0, l = units.length; i < l; i++) {
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/BatchImageBuilder.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/BatchImageBuilder.java
index 26fb1c4..fd87968 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/BatchImageBuilder.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/BatchImageBuilder.java
@@ -48,7 +48,7 @@ public void build() {
 		this.notifier.updateProgressDelta(0.05f);
 
 		this.notifier.subTask(Messages.build_analyzingSources);
-		ArrayList sourceFiles = new ArrayList(33);
+		LinkedHashSet<SourceFile> sourceFiles = new LinkedHashSet<>(33);
 		addAllSourceFiles(sourceFiles);
 		this.notifier.updateProgressDelta(0.10f);
 
@@ -91,7 +91,7 @@ protected void cleanOutputFolders(boolean copyBack) throws CoreException {
 			for (int i = 0, l = this.javaBuilder.participants.length; i < l; i++)
 				this.javaBuilder.participants[i].cleanStarting(this.javaBuilder.javaProject);
 
-		ArrayList visited = new ArrayList(this.sourceLocations.length);
+		Set<IContainer> visited = new LinkedHashSet<>(this.sourceLocations.length);
 		for (int i = 0, l = this.sourceLocations.length; i < l; i++) {
 			this.notifier.subTask(Messages.bind(Messages.build_cleaningOutput, this.javaBuilder.currentProject.getName()));
 			ClasspathMultiDirectory sourceLocation = this.sourceLocations[i];
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java
index 917cf10..6ccae6d 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/IncrementalImageBuilder.java
@@ -35,8 +35,8 @@ import java.util.*;
 @SuppressWarnings({"rawtypes", "unchecked"})
 public class IncrementalImageBuilder extends AbstractImageBuilder {
 
-protected ArrayList sourceFiles;
-protected ArrayList previousSourceFiles;
+protected LinkedHashSet<SourceFile> sourceFiles;
+protected LinkedHashSet<SourceFile> previousSourceFiles;
 protected StringSet qualifiedStrings;
 protected StringSet simpleStrings;
 protected StringSet rootStrings;
@@ -781,7 +781,7 @@ protected void removeSecondaryTypes() throws CoreException {
 
 protected void resetCollections() {
 	if (this.sourceFiles == null) {
-		this.sourceFiles = new ArrayList(33);
+		this.sourceFiles = new LinkedHashSet<>(33);
 		this.previousSourceFiles = null;
 		this.qualifiedStrings = new StringSet(3);
 		this.simpleStrings = new StringSet(3);
@@ -789,7 +789,7 @@ protected void resetCollections() {
 		this.hasStructuralChanges = false;
 		this.compileLoop = 0;
 	} else {
-		this.previousSourceFiles = this.sourceFiles.isEmpty() ? null : (ArrayList) this.sourceFiles.clone();
+		this.previousSourceFiles = this.sourceFiles.isEmpty() ? null : (LinkedHashSet) this.sourceFiles.clone();
 
 		this.sourceFiles.clear();
 		this.qualifiedStrings.clear();
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java
index 451caed..f35b762 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/JavaBuilder.java
@@ -47,7 +47,7 @@ public static boolean SHOW_STATS = false;
  * This list is used to reset the JavaModel.existingExternalFiles cache when a build cycle begins
  * so that deleted external jars are discovered.
  */
-static ArrayList builtProjects = null;
+static LinkedHashSet<String> builtProjects;
 
 public static IMarker[] getProblemsFor(IResource resource) {
 	try {
@@ -431,7 +431,7 @@ public State getLastState(IProject project) {
 private IProject[] getRequiredProjects(boolean includeBinaryPrerequisites) {
 	if (this.javaProject == null || this.workspaceRoot == null) return new IProject[0];
 
-	ArrayList projects = new ArrayList();
+	LinkedHashSet<IProject> projects = new LinkedHashSet<>();
 	ExternalFoldersManager externalFoldersManager = JavaModelManager.getExternalManager();
 	try {
 		IClasspathEntry[] entries = this.javaProject.getExpandedClasspath();
@@ -595,7 +595,7 @@ private int initializeBuilder(int kind, boolean forBuild) throws CoreException {
 		// Flush the existing external files cache if this is the beginning of a build cycle
 		String projectName = this.currentProject.getName();
 		if (builtProjects == null || builtProjects.contains(projectName)) {
-			builtProjects = new ArrayList();
+			builtProjects = new LinkedHashSet();
 		}
 		builtProjects.add(projectName);
 	}
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/State.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/State.java
index a6d5695..520d43e 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/State.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/State.java
@@ -136,7 +136,7 @@ public boolean isDuplicateLocator(String qualifiedTypeName, String typeLocator)
 
 public boolean isKnownPackage(String qualifiedPackageName) {
 	if (this.knownPackageNames == null) {
-		ArrayList names = new ArrayList(this.typeLocators.elementSize);
+		LinkedHashSet<String> names = new LinkedHashSet<>(this.typeLocators.elementSize);
 		Object[] keyTable = this.typeLocators.keyTable;
 		for (int i = 0, l = keyTable.length; i < l; i++) {
 			if (keyTable[i] != null) {

commit fe8f03030c996e7f3abaa101bf62fc6c88122090
Author: Stephan Herrmann <stephan.herrmann@berlin.de>
Date:   Mon Dec 29 18:30:14 2014 +0100

    Bug 415790 - [compiler][resource]Incorrect potential resource leak
    warning in for loop with close in try/catch
    
    
    Change-Id: I0b251d352e757a09310d64a0fe7eca0821e3cbae
    Signed-off-by: Stephan Herrmann <stephan.herrmann@berlin.de>

236	14	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java
62	1	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ResourceLeakTests.java
3	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/DoStatement.java
4	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForStatement.java
9	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForeachStatement.java
9	23	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java
4	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/WhileStatement.java
11	6	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowContext.java
8	4	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/LoopingFlowContext.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java
index ec5c22c..15b3a88 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullReferenceTest.java
@@ -67,10 +67,10 @@ public NullReferenceTest(String name) {
 // Only the highest compliance level is run; add the VM argument
 // -Dcompliance=1.4 (for example) to lower it if needed
 static {
-//		TESTS_NAMES = new String[] { "test0525_try_finally_unchecked_exception" };
-//		TESTS_NAMES = new String[] { "testBug441737" };
-//		TESTS_NAMES = new String[] { "testBug453305" };
-//		TESTS_NAMES = new String[] { "testBug431016" };
+//		TESTS_NAMES = new String[] { "testBug406160a" };
+//		TESTS_NAMES = new String[] { "testBug384380" };
+//		TESTS_NAMES = new String[] { "testBug384380_b" };
+//		TESTS_NAMES = new String[] { "testBug321926a2" };
 //		TESTS_NAMES = new String[] { "testBug432109" };
 //		TESTS_NAMES = new String[] { "testBug418500" }; 
 //		TESTS_NUMBERS = new int[] { 561 };
@@ -12929,6 +12929,46 @@ public void testBug321926a() {
 			"}"},
 		"Compiler good");
 }
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=321926
+// need more precise info from the throw location
+public void testBug321926a2() {
+	if (this.complianceLevel < ClassFileConstants.JDK1_5) return; // uses @SW annotation
+	Map options = getCompilerOptions();
+	options.put(JavaCore.COMPILER_PB_UNUSED_WARNING_TOKEN, JavaCore.ERROR);
+	options.put(JavaCore.COMPILER_PB_REDUNDANT_NULL_CHECK, JavaCore.WARNING);
+	this.runConformTest(
+		new String[] {
+			"X.java",
+			"import java.io.IOException;\n" +
+			"public class X {\n" +
+			"	@SuppressWarnings(\"null\")\n" + // expecting "redundant null check" at "if (someVariable == null)"
+			"  public static void main(String[] args) {\n" +
+			"	 String someVariable = null;\n" +
+			"	 int i = 0;\n" +
+			"	 try {\n" +
+			"		while (true) {\n" +
+			"			if (i == 0){\n" +
+			"				someVariable = \"not null\";\n" +
+			"				i++;\n" +
+			"			}\n" +
+			"			else {\n" +
+			"				someVariable = \"value\";\n" +
+			"				throw new IOException();\n" +
+			"			}\n" +
+			"		}\n" +
+			"	 } catch (IOException e) {\n" +
+			"		// broken from loop, continue on\n" +
+			"	 }\n" +
+			"	 if (someVariable == null) {\n" +
+			"    	System.out.println(\"Compiler buggy\");\n" +
+			"	 } else {\n" +
+			"		System.out.println(\"Compiler good\");\n" +
+			"	 }\n" +
+			"  }\n" +
+			"}"},
+		"Compiler good",
+		options);
+}
 // Test that dead code warning does show up.
 public void testBug321926b() {
 	this.runNegativeTest(
@@ -13370,6 +13410,9 @@ public void testBug321926m() {
 		"Compiler good");
 }
 public void testBug321926n() {
+	Map options = getCompilerOptions();
+	options.put(JavaCore.COMPILER_PB_DEAD_CODE, JavaCore.WARNING);
+	options.put(JavaCore.COMPILER_PB_REDUNDANT_NULL_CHECK, JavaCore.WARNING);
 	this.runConformTest(
 		new String[] {
 			"X.java",
@@ -13398,9 +13441,13 @@ public void testBug321926n() {
 			"	 }\n" +
 			"  }\n" +
 			"}"},
-		"Compiler good");
+		"Compiler good",
+		options);
 }
 public void testBug321926o() {
+	Map options = getCompilerOptions();
+	options.put(JavaCore.COMPILER_PB_DEAD_CODE, JavaCore.WARNING);
+	options.put(JavaCore.COMPILER_PB_REDUNDANT_NULL_CHECK, JavaCore.WARNING);
 	this.runConformTest(
 		new String[] {
 			"X.java",
@@ -13429,9 +13476,13 @@ public void testBug321926o() {
 			"	 }\n" +
 			"  }\n" +
 			"}"},
-		"Compiler good");
+		"Compiler good",
+		options);
 }
 public void testBug321926p() {
+	Map options = getCompilerOptions();
+	options.put(JavaCore.COMPILER_PB_DEAD_CODE, JavaCore.WARNING);
+	options.put(JavaCore.COMPILER_PB_REDUNDANT_NULL_CHECK, JavaCore.WARNING);
 	this.runConformTest(
 		new String[] {
 			"X.java",
@@ -13460,7 +13511,8 @@ public void testBug321926p() {
 			"	 }\n" +
 			"  }\n" +
 			"}"},
-		"Compiler good");
+		"Compiler good",
+		options);
 }
 public void testBug321926q() {
 	Map options = getCompilerOptions();
@@ -13591,6 +13643,8 @@ public void testBug321926t() {
 		"Compiler good");
 }
 public void testBug321926u() {
+	Map options = getCompilerOptions();
+	options.put(CompilerOptions.OPTION_ReportRedundantNullCheck, CompilerOptions.IGNORE);
 	this.runConformTest(
 		new String[] {
 			"X.java",
@@ -13618,9 +13672,12 @@ public void testBug321926u() {
 			"		    System.out.println(\"Compiler bad\");\n" +
 			"	}\n" +
 			"}\n"},
-		"Compiler good");
+		"Compiler good",
+		options);
 }
 public void testBug321926v() {
+	Map options = getCompilerOptions();
+	options.put(CompilerOptions.OPTION_ReportRedundantNullCheck, CompilerOptions.IGNORE);
 	this.runConformTest(
 		new String[] {
 			"X.java",
@@ -13648,10 +13705,14 @@ public void testBug321926v() {
 			"		    System.out.println(\"Compiler good\");\n" +
 			"	}\n" +
 			"}\n"},
-		"Compiler good");
+		"Compiler good",
+		options);
 }
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=317829
 public void testBug317829a() {
+	Map options = getCompilerOptions();
+	options.put(JavaCore.COMPILER_PB_DEAD_CODE, JavaCore.WARNING);
+	options.put(JavaCore.COMPILER_PB_REDUNDANT_NULL_CHECK, JavaCore.WARNING);
 	this.runConformTest(
 		new String[] {
 			"X.java",
@@ -13679,10 +13740,47 @@ public void testBug317829a() {
 			"	 }\n" +
 			"  }\n" +
 			"}"},
+			"Compiler good Compiler good",
+			options);
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=317829
+// assignment from unknown - not reporting redundant check
+public void testBug317829a2() {
+	this.runConformTest(
+		new String[] {
+			"X.java",
+			"import java.io.IOException;\n" +
+			"public class X {\n" +
+			"  public static void main(String[] args) {\n" +
+			"	 String someVariable = null;\n" +
+			"	 int i = 0;\n" +
+			"	 try {\n" +
+			"       someVariable = getString();\n" +
+			"		while (true) {\n" +
+			"			throw new IOException();\n" +
+			"		}\n" +
+			"	 } catch (IOException e) {\n" +
+			"	 	if (someVariable == null) {\n" +
+			"    		System.out.println(\"Compiler bad\");\n" +
+			"	 	} else {\n" +
+			"			System.out.print(\"Compiler good \");\n" +
+			"	 	}\n" +
+			"	 }\n" +
+			"	 if (someVariable == null) {\n" +
+			"    	System.out.println(\"Compiler bad\");\n" +
+			"	 } else {\n" +
+			"		System.out.println(\"Compiler good\");\n" +
+			"	 }\n" +
+			"  }\n" +
+			"  static String getString() { return \"\"; }\n" +
+			"}"},
 			"Compiler good Compiler good");
 }
 //https://bugs.eclipse.org/bugs/show_bug.cgi?id=317829
 public void testBug317829b() {
+	Map options = getCompilerOptions();
+	options.put(JavaCore.COMPILER_PB_DEAD_CODE, JavaCore.WARNING);
+	options.put(JavaCore.COMPILER_PB_REDUNDANT_NULL_CHECK, JavaCore.WARNING);
 	this.runConformTest(
 		new String[] {
 			"X.java",
@@ -13713,10 +13811,14 @@ public void testBug317829b() {
 			"      throw new IOException();\n" +
 			"  }\n" +
 			"}"},
-			"Compiler good Compiler good");
+			"Compiler good Compiler good",
+			options);
 }
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=317829
 public void testBug317829c() {
+	Map options = getCompilerOptions();
+	options.put(JavaCore.COMPILER_PB_DEAD_CODE, JavaCore.WARNING);
+	options.put(JavaCore.COMPILER_PB_REDUNDANT_NULL_CHECK, JavaCore.WARNING);
 	this.runConformTest(
 		new String[] {
 			"X.java",
@@ -13744,10 +13846,14 @@ public void testBug317829c() {
 			"	 }\n" +
 			"  }\n" +
 			"}"},
-			"Compiler good Compiler good");
+			"Compiler good Compiler good",
+			options);
 }
 //https://bugs.eclipse.org/bugs/show_bug.cgi?id=317829
 public void testBug317829d() {
+	Map options = getCompilerOptions();
+	options.put(JavaCore.COMPILER_PB_DEAD_CODE, JavaCore.WARNING);
+	options.put(JavaCore.COMPILER_PB_REDUNDANT_NULL_CHECK, JavaCore.WARNING);
 	this.runConformTest(
 		new String[] {
 			"X.java",
@@ -13778,10 +13884,14 @@ public void testBug317829d() {
 			"      throw new IOException();\n" +
 			"  }\n" +
 			"}"},
-			"Compiler good Compiler good");
+			"Compiler good Compiler good",
+			options);
 }
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=317829
 public void testBug317829e() {
+	Map options = getCompilerOptions();
+	options.put(JavaCore.COMPILER_PB_DEAD_CODE, JavaCore.WARNING);
+	options.put(JavaCore.COMPILER_PB_REDUNDANT_NULL_CHECK, JavaCore.WARNING);
 	this.runConformTest(
 		new String[] {
 			"X.java",
@@ -13809,10 +13919,14 @@ public void testBug317829e() {
 			"	 }\n" +
 			"  }\n" +
 			"}"},
-			"Compiler good Compiler good");
+			"Compiler good Compiler good",
+			options);
 }
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=317829
 public void testBug317829f() {
+	Map options = getCompilerOptions();
+	options.put(JavaCore.COMPILER_PB_DEAD_CODE, JavaCore.WARNING);
+	options.put(JavaCore.COMPILER_PB_REDUNDANT_NULL_CHECK, JavaCore.WARNING);
 	this.runConformTest(
 		new String[] {
 			"X.java",
@@ -13843,7 +13957,8 @@ public void testBug317829f() {
 			"      throw new IOException();\n" +
 			"  }\n" +
 			"}"},
-			"Compiler good Compiler good");
+			"Compiler good Compiler good",
+			options);
 }
 
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=292478 -  Report potentially null across variable assignment
@@ -14575,6 +14690,74 @@ public void testBug332637b() {
 		"-1");
 }
 
+public void testBug406160a() {
+	if (this.complianceLevel < ClassFileConstants.JDK1_5)
+		return;
+	this.runConformTest(
+		new String[] {
+			"DeadCodeExample.java",
+			"public class DeadCodeExample {\n" + 
+			"\n" + 
+			"	class CanceledException extends Exception {\n" + 
+			"	}\n" + 
+			"\n" + 
+			"	private interface ProgressMonitor {\n" + 
+			"		boolean isCanceled();\n" + 
+			"	}\n" + 
+			"\n" + 
+			"	private void checkForCancellation(ProgressMonitor monitor)\n" + 
+			"			throws CanceledException {\n" + 
+			"		if (monitor.isCanceled()) {\n" + 
+			"			throw new CanceledException();\n" + 
+			"		}\n" + 
+			"	}\n" + 
+			"\n" + 
+			"	private int run() {\n" + 
+			"\n" + 
+			"		ProgressMonitor monitor = new ProgressMonitor() {\n" + 
+			"			private int i = 0;\n" + 
+			"\n" + 
+			"			public boolean isCanceled() {\n" + 
+			"				return (++i == 5);\n" + 
+			"			}\n" + 
+			"		};\n" + 
+			"\n" + 
+			"		Integer number = null;\n" + 
+			"\n" +
+			"		for (int j = 0; j < 1; ) {\n" + 
+			"\n" + 
+			"			try {\n" + 
+			"				checkForCancellation(monitor);\n" + 
+			"\n" + 
+			"				number = Integer.valueOf(0);\n" + 
+			"\n" + 
+			"				for (String s : new String[10]) {\n" + 
+			"					checkForCancellation(monitor);\n" + 
+			"					number++;\n" + 
+			"				}\n" + 
+			"				return 0;\n" + 
+			"			} catch (CanceledException e) {\n" + 
+			"				System.out.println(\"Canceled after \" + number\n" + 
+			"					+ \" times through the loop\");\n" + 
+			"				if (number != null) {\n" + 
+			"					System.out.println(\"number = \" + number);\n" + 
+			"				}\n" + 
+			"				return -1;\n" + 
+			"			}\n" + 
+			"		}\n" + 
+			"		return 13;\n" + 
+			"	}\n" + 
+			"\n" + 
+			"	public static void main(String[] args) {\n" + 
+			"		System.out.println(new DeadCodeExample().run());\n" + 
+			"	}\n" + 
+			"}\n"				
+		},
+		"Canceled after 3 times through the loop\n" + 
+		"number = 3\n" + 
+		"-1");
+}
+
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=333089 
 // null analysis -- to make sure no AIOOBE or NPE is thrown while calling UnconditionalFlowInfo.markNullStatus(..)
 public void testBug333089() {
@@ -16149,6 +16332,45 @@ public void testBug384380_a() {
 			"");
 	}
 }
+// Bug 384380 - False positive on a "Potential null pointer access" after a continue
+// while & foreach loops
+public void testBug384380_b() {
+	if (this.complianceLevel >= ClassFileConstants.JDK1_5) {
+		this.runConformTest(
+			new String[] {
+				"Test.java",
+				"public class Test {\n" +
+				"	public static class Container{\n" +
+				"		public int property;\n" +
+				"	}\n" +
+				"	public static class CustomException extends Exception {\n" +
+				"		private static final long	 serialVersionUID	= 1L;\n" +
+				"	}\n" +
+				"	public static void anotherMethod() throws CustomException {}\n" +
+				"\n" +
+				"	public static void method(final java.util.List<Container> list) {\n" +
+				"		java.util.Iterator<Container> it = list.iterator();\n" +
+				"		while (it.hasNext()) {\n" +
+				"			final Container c = it.next();\n" +
+				"			if(c == null)\n" +
+				"				continue; // return or break, are fine though\n" +
+				"\n" + 
+				"			// without this try-catch+for+exception block it does not fails\n" +
+				"			try {\n" +
+				"				for(Container c1 : list) // needs a loop here (a 'while' or a 'for') to fail\n" +
+				"					anotherMethod(); // throwing directly CustomException make it fails too\n" +
+				"			} catch (final CustomException e) {\n" +
+				"				// it fails even if catch is empty\n" +
+				"			}\n" +
+				"			c.property += 1; // \"Potential null pointer access: The variable c may be null at this location\"\n" +
+				"		}\n" +
+				"\n" +
+				"	}\n" +
+				"}\n"
+			},
+			"");
+	}
+}
 public void testBug376263() {
 	Map customOptions = getCompilerOptions();
 	customOptions.put(JavaCore.COMPILER_PB_POTENTIAL_NULL_REFERENCE, JavaCore.ERROR);
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ResourceLeakTests.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ResourceLeakTests.java
index cc55d47..344831d 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ResourceLeakTests.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ResourceLeakTests.java
@@ -49,7 +49,7 @@ private static final String APACHE_DBUTILS_CONTENT = "package org.apache.commons
 	"}\n";
 
 static {
-//	TESTS_NAMES = new String[] { "testBug376053" };
+//	TESTS_NAMES = new String[] { "testBug415790" };
 //	TESTS_NUMBERS = new int[] { 50 };
 //	TESTS_RANGE = new int[] { 11, -1 };
 }
@@ -4790,4 +4790,65 @@ public void testStream4() {
 		options
 		);
 }
+public void testBug415790_ex2() {
+	if (this.complianceLevel < ClassFileConstants.JDK1_5)
+		return; // uses foreach
+	Map options = getCompilerOptions();
+	options.put(CompilerOptions.OPTION_ReportPotentiallyUnclosedCloseable, CompilerOptions.ERROR);
+	options.put(CompilerOptions.OPTION_ReportUnclosedCloseable, CompilerOptions.ERROR);
+	runConformTest(
+		new String[] {
+			"X.java",
+			"import java.io.*;\n" +
+			"public class X {\n" +
+			"    public void example2() throws IOException {\n" + 
+			"        for (final File file : new File[] { new File(\"/\") }) {\n" + 
+			"            BufferedReader reader = null;\n" + 
+			"            try {\n" + 
+			"                reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)));\n" + 
+			"            }\n" + 
+			"            finally {\n" + 
+			"                try {\n" + 
+			"                    reader.close();\n" + 
+			"                }\n" + 
+			"                catch (IOException e) {\n" + 
+			"                }\n" + 
+			"            }\n" + 
+			"        }\n" + 
+			"    }\n" + 
+			"" +
+			"}\n"
+		},
+		options);
+}
+public void testBug415790_ex4() {
+	Map options = getCompilerOptions();
+	options.put(CompilerOptions.OPTION_ReportPotentiallyUnclosedCloseable, CompilerOptions.ERROR);
+	options.put(CompilerOptions.OPTION_ReportUnclosedCloseable, CompilerOptions.ERROR);
+	runConformTest(
+		new String[] {
+			"X.java",
+			"import java.io.*;\n" +
+			"public class X {\n" +
+			"    public void example2(File[] files) throws IOException {\n" + 
+			"        for (int i = 0; i < files.length; i++) {\n" +
+			"            File file = files[i];\n" + 
+			"            BufferedReader reader = null;\n" + 
+			"            try {\n" + 
+			"                reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)));\n" + 
+			"            }\n" + 
+			"            finally {\n" + 
+			"                try {\n" + 
+			"                    reader.close();\n" + 
+			"                }\n" + 
+			"                catch (IOException e) {\n" + 
+			"                }\n" + 
+			"            }\n" + 
+			"        }\n" + 
+			"    }\n" + 
+			"" +
+			"}\n"
+		},
+		options);
+}
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/DoStatement.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/DoStatement.java
index 2912fcd..2f82ac2 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/DoStatement.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/DoStatement.java
@@ -11,6 +11,7 @@
  *								bug 319201 - [null] no warning when unboxing SingleNameReference causes NPE
  *								bug 345305 - [compiler][null] Compiler misidentifies a case of "variable can only be null"
  *								bug 403147 - [compiler][null] FUP of bug 400761: consolidate interaction between unboxing, NPE, and deferred checking
+ *								Bug 415790 - [compiler][resource]Incorrect potential resource leak warning in for loop with close in try/catch
  *******************************************************************************/
 package org.eclipse.jdt.internal.compiler.ast;
 
@@ -119,7 +120,8 @@ public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, Fl
 	}
 	if (loopingContext.hasEscapingExceptions()) { // https://bugs.eclipse.org/bugs/show_bug.cgi?id=321926
 		FlowInfo loopbackFlowInfo = flowInfo.copy();
-		loopbackFlowInfo.mergedWith(condInfo.initsWhenTrue().unconditionalCopy());
+		// loopback | (loopback + action + condition):
+		loopbackFlowInfo = loopbackFlowInfo.mergedWith(loopbackFlowInfo.unconditionalCopy().addNullInfoFrom(condInfo.initsWhenTrue()).unconditionalInits());
 		loopingContext.simulateThrowAfterLoopBack(loopbackFlowInfo);
 	}
 	// end of loop
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForStatement.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForStatement.java
index bba7c51..deb2b0f 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForStatement.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForStatement.java
@@ -12,6 +12,7 @@
  *     							bug 349326 - [1.7] new warning for missing try-with-resources
  *								bug 345305 - [compiler][null] Compiler misidentifies a case of "variable can only be null"
  *								bug 403147 - [compiler][null] FUP of bug 400761: consolidate interaction between unboxing, NPE, and deferred checking
+ *								Bug 415790 - [compiler][resource]Incorrect potential resource leak warning in for loop with close in try/catch
  *******************************************************************************/
 package org.eclipse.jdt.internal.compiler.ast;
 
@@ -204,8 +205,9 @@ public class ForStatement extends Statement {
 		}
 		if (loopingContext.hasEscapingExceptions()) { // https://bugs.eclipse.org/bugs/show_bug.cgi?id=321926
 			FlowInfo loopbackFlowInfo = flowInfo.copy();
-			if (this.continueLabel != null) {  // we do get to the bottom 
-				loopbackFlowInfo.mergedWith(actionInfo.unconditionalCopy());
+			if (this.continueLabel != null) {  // we do get to the bottom
+				// loopback | (loopback + action):
+				loopbackFlowInfo = loopbackFlowInfo.mergedWith(loopbackFlowInfo.unconditionalCopy().addNullInfoFrom(actionInfo).unconditionalInits());
 			}
 			loopingContext.simulateThrowAfterLoopBack(loopbackFlowInfo);
 		}
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForeachStatement.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForeachStatement.java
index e7f4435..35b2042 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForeachStatement.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ForeachStatement.java
@@ -16,6 +16,7 @@
  *								Bug 411964 - [1.8][null] leverage null type annotation in foreach statement
  *								Bug 392099 - [1.8][compiler][null] Apply null annotation on types for null analysis
  *								Bug 453483 - [compiler][null][loop] Improve null analysis for loops
+ *								Bug 415790 - [compiler][resource]Incorrect potential resource leak warning in for loop with close in try/catch
  *     Jesper S Moller -  Contribution for
  *								bug 401853 - Eclipse Java compiler creates invalid bytecode (java.lang.VerifyError)
  *******************************************************************************/
@@ -166,6 +167,14 @@ public class ForeachStatement extends Statement {
 		}
 		//end of loop
 		loopingContext.complainOnDeferredNullChecks(currentScope, actionInfo);
+		if (loopingContext.hasEscapingExceptions()) { // https://bugs.eclipse.org/bugs/show_bug.cgi?id=321926
+			FlowInfo loopbackFlowInfo = flowInfo.copy();
+			if (this.continueLabel != null) {  // we do get to the bottom
+				// loopback | (loopback + action):
+				loopbackFlowInfo = loopbackFlowInfo.mergedWith(loopbackFlowInfo.unconditionalCopy().addNullInfoFrom(actionInfo).unconditionalInits());
+			}
+			loopingContext.simulateThrowAfterLoopBack(loopbackFlowInfo);
+		}
 
 		FlowInfo mergedInfo = FlowInfo.mergedOptimizedBranches(
 				(loopingContext.initsOnBreak.tagBits &
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java
index 3890394..1e0e627 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/TryStatement.java
@@ -19,6 +19,7 @@
  *								bug 401092 - [compiler][null] Wrong warning "Redundant null check" in outer catch of nested try
  *								bug 402993 - [null] Follow up of bug 401088: Missing warning about redundant null check
  *								bug 384380 - False positive on a ?? Potential null pointer access ?? after a continue
+ *								Bug 415790 - [compiler][resource]Incorrect potential resource leak warning in for loop with close in try/catch
  *     Jesper Steen Moller - Contributions for
  *								bug 404146 - [1.7][compiler] nested try-catch-finally-blocks leads to unrunnable Java byte code
  *     Andy Clement (GoPivotal, Inc) aclement@gopivotal.com - Contributions for
@@ -372,29 +373,14 @@ private FlowInfo prepareCatchInfo(FlowInfo flowInfo, ExceptionHandlingFlowContex
 			addNullInfoFrom(handlingContext.initsOnFinally);
 	} else {
 		FlowInfo initsOnException = handlingContext.initsOnException(i);
-		if ((handlingContext.tagBits & (FlowContext.DEFER_NULL_DIAGNOSTIC | FlowContext.PREEMPT_NULL_DIAGNOSTIC))
-				== FlowContext.DEFER_NULL_DIAGNOSTIC)
-		{
-			// if null diagnostics are being deferred, initsOnException are incomplete,
-			// need to start with the more accurate upstream flowInfo
-			catchInfo =
-				flowInfo.unconditionalCopy()
-					.addPotentialInitializationsFrom(initsOnException)
-					.addPotentialInitializationsFrom(
-							tryInfo.unconditionalCopy())
-					.addPotentialInitializationsFrom(
-							handlingContext.initsOnReturn.nullInfoLessUnconditionalCopy());						
-		} else {
-			// here initsOnException are precise, so use them as the only source for null information into the catch block:
-			catchInfo =
-				flowInfo.nullInfoLessUnconditionalCopy()
-					.addPotentialInitializationsFrom(initsOnException)
-					.addNullInfoFrom(initsOnException)
-					.addPotentialInitializationsFrom(
-							tryInfo.nullInfoLessUnconditionalCopy())
-					.addPotentialInitializationsFrom(
-							handlingContext.initsOnReturn.nullInfoLessUnconditionalCopy());
-		}
+		catchInfo =
+			flowInfo.nullInfoLessUnconditionalCopy()
+				.addPotentialInitializationsFrom(initsOnException)
+				.addNullInfoFrom(initsOnException) // <<== Null info only from here!
+				.addPotentialInitializationsFrom(
+						tryInfo.nullInfoLessUnconditionalCopy())
+				.addPotentialInitializationsFrom(
+						handlingContext.initsOnReturn.nullInfoLessUnconditionalCopy());
 	}
 
 	// catch var is always set
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/WhileStatement.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/WhileStatement.java
index 42c3cd7..ce709c9 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/WhileStatement.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/WhileStatement.java
@@ -12,6 +12,7 @@
  *     							bug 349326 - [1.7] new warning for missing try-with-resources
  *								bug 345305 - [compiler][null] Compiler misidentifies a case of "variable can only be null"
  *								bug 403147 - [compiler][null] FUP of bug 400761: consolidate interaction between unboxing, NPE, and deferred checking
+ *								Bug 415790 - [compiler][resource]Incorrect potential resource leak warning in for loop with close in try/catch
  *******************************************************************************/
 package org.eclipse.jdt.internal.compiler.ast;
 
@@ -145,8 +146,9 @@ public class WhileStatement extends Statement {
 			}
 			if (loopingContext.hasEscapingExceptions()) { // https://bugs.eclipse.org/bugs/show_bug.cgi?id=321926
 				FlowInfo loopbackFlowInfo = flowInfo.copy();
-				if (this.continueLabel != null) {  // we do get to the bottom 
-					loopbackFlowInfo.mergedWith(actionInfo.unconditionalCopy());
+				if (this.continueLabel != null) {  // we do get to the bottom
+					// loopback | (loopback + action):
+					loopbackFlowInfo = loopbackFlowInfo.mergedWith(loopbackFlowInfo.unconditionalCopy().addNullInfoFrom(actionInfo).unconditionalInits());
 				}
 				loopingContext.simulateThrowAfterLoopBack(loopbackFlowInfo);
 			}
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowContext.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowContext.java
index 92225dc..d4d99fd 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowContext.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowContext.java
@@ -19,6 +19,7 @@
  *								bug 403147 - [compiler][null] FUP of bug 400761: consolidate interaction between unboxing, NPE, and deferred checking
  *								Bug 453483 - [compiler][null][loop] Improve null analysis for loops
  *								Bug 455723 - Nonnull argument not correctly inferred in loop
+ *								Bug 415790 - [compiler][resource]Incorrect potential resource leak warning in for loop with close in try/catch
  *******************************************************************************/
 package org.eclipse.jdt.internal.compiler.flow;
 
@@ -253,20 +254,22 @@ public void checkExceptionHandlers(TypeBinding raisedException, ASTNode location
 					caughtIndex < caughtCount;
 					caughtIndex++) {
 					ReferenceBinding caughtException = caughtExceptions[caughtIndex];
+					FlowInfo exceptionFlow = flowInfo;
 				    int state = caughtException == null
 				    	? Scope.EQUAL_OR_MORE_SPECIFIC /* any exception */
 				        : Scope.compareTypes(raisedException, caughtException);
 				    if (abruptlyExitedLoops != null && caughtException != null && state != Scope.NOT_RELATED) {
 				    	for (int i = 0, abruptlyExitedLoopsCount = abruptlyExitedLoops.size(); i < abruptlyExitedLoopsCount; i++) {
 							LoopingFlowContext loop = (LoopingFlowContext) abruptlyExitedLoops.get(i);
-							loop.recordCatchContextOfEscapingException(exceptionContext, caughtException);
+							loop.recordCatchContextOfEscapingException(exceptionContext, caughtException, flowInfo);
 						}
+				    	exceptionFlow = FlowInfo.DEAD_END; // don't use flow info on first round, flow info will be evaluated during loopback simulation
 					}
 					switch (state) {
 						case Scope.EQUAL_OR_MORE_SPECIFIC :
 							exceptionContext.recordHandlingException(
 								caughtException,
-								flowInfo.unconditionalInits(),
+								exceptionFlow.unconditionalInits(),
 								raisedException,
 								raisedException, // precise exception that will be caught
 								location,
@@ -277,7 +280,7 @@ public void checkExceptionHandlers(TypeBinding raisedException, ASTNode location
 						case Scope.MORE_GENERIC :
 							exceptionContext.recordHandlingException(
 								caughtException,
-								flowInfo.unconditionalInits(),
+								exceptionFlow.unconditionalInits(),
 								raisedException,
 								caughtException,
 								location,
@@ -380,20 +383,22 @@ public void checkExceptionHandlers(TypeBinding[] raisedExceptions, ASTNode locat
 					for (int raisedIndex = 0; raisedIndex < raisedCount; raisedIndex++) {
 						TypeBinding raisedException;
 						if ((raisedException = raisedExceptions[raisedIndex]) != null) {
+							FlowInfo exceptionFlow = flowInfo;
 						    int state = caughtException == null
 						    	? Scope.EQUAL_OR_MORE_SPECIFIC /* any exception */
 						        : Scope.compareTypes(raisedException, caughtException);
 						    if (abruptlyExitedLoops != null && caughtException != null && state != Scope.NOT_RELATED) {
 						    	for (int i = 0, abruptlyExitedLoopsCount = abruptlyExitedLoops.size(); i < abruptlyExitedLoopsCount; i++) {
 									LoopingFlowContext loop = (LoopingFlowContext) abruptlyExitedLoops.get(i);
-									loop.recordCatchContextOfEscapingException(exceptionContext, caughtException);
+									loop.recordCatchContextOfEscapingException(exceptionContext, caughtException, flowInfo);
 								}
+						    	exceptionFlow = FlowInfo.DEAD_END; // don't use flow info on first round, flow info will be evaluated during loopback simulation
 							}
 							switch (state) {
 								case Scope.EQUAL_OR_MORE_SPECIFIC :
 									exceptionContext.recordHandlingException(
 										caughtException,
-										flowInfo.unconditionalInits(),
+										exceptionFlow.unconditionalInits(),
 										raisedException,
 										raisedException, // precise exception that will be caught
 										location,
@@ -408,7 +413,7 @@ public void checkExceptionHandlers(TypeBinding[] raisedExceptions, ASTNode locat
 								case Scope.MORE_GENERIC :
 									exceptionContext.recordHandlingException(
 										caughtException,
-										flowInfo.unconditionalInits(),
+										exceptionFlow.unconditionalInits(),
 										raisedException,
 										caughtException, 
 										location,
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/LoopingFlowContext.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/LoopingFlowContext.java
index f46b185..210650c 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/LoopingFlowContext.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/LoopingFlowContext.java
@@ -22,6 +22,7 @@
  *								Bug 453483 - [compiler][null][loop] Improve null analysis for loops
  *								Bug 455557 - [jdt] NPE LoopingFlowContext.recordNullReference
  *								Bug 455723 - Nonnull argument not correctly inferred in loop
+ *								Bug 415790 - [compiler][resource]Incorrect potential resource leak warning in for loop with close in try/catch
  *     Jesper S Moller - contributions for
  *								bug 404657 - [1.8][compiler] Analysis for effectively final variables fails to consider loops
  *******************************************************************************/
@@ -77,13 +78,16 @@ public class LoopingFlowContext extends SwitchFlowContext {
 	static private class EscapingExceptionCatchSite {
 		final ReferenceBinding caughtException;
 		final ExceptionHandlingFlowContext catchingContext;
-		public EscapingExceptionCatchSite(ExceptionHandlingFlowContext catchingContext,	ReferenceBinding caughtException) {
+		final FlowInfo exceptionInfo; // flow leading to the location of throwing
+		public EscapingExceptionCatchSite(ExceptionHandlingFlowContext catchingContext,	ReferenceBinding caughtException, FlowInfo exceptionInfo) {
 			this.catchingContext = catchingContext;
 			this.caughtException = caughtException;
+			this.exceptionInfo = exceptionInfo;
 		}
 		void simulateThrowAfterLoopBack(FlowInfo flowInfo) {
 			this.catchingContext.recordHandlingException(this.caughtException,
-					flowInfo.unconditionalInits(), null, // raised exception, irrelevant here,
+					flowInfo.unconditionalCopy().addNullInfoFrom(this.exceptionInfo).unconditionalInits(),
+					null, // raised exception, irrelevant here,
 					null, null, /* invocation site, irrelevant here */ true // we have no business altering the needed status.
 					);
 		}
@@ -745,11 +749,11 @@ public void recordUsingNullReference(Scope scope, LocalVariableBinding local,
 	   is caught by an outer catch block. This is used to propagate data flow
 	   along the edge back to the next iteration. See simulateThrowAfterLoopBack
 	 */
-	public void recordCatchContextOfEscapingException(ExceptionHandlingFlowContext catchingContext,	ReferenceBinding caughtException) {
+	public void recordCatchContextOfEscapingException(ExceptionHandlingFlowContext catchingContext,	ReferenceBinding caughtException, FlowInfo exceptionInfo) {
 		if (this.escapingExceptionCatchSites == null) {
 			this.escapingExceptionCatchSites = new ArrayList(5);
 		}
-		this.escapingExceptionCatchSites.add(new EscapingExceptionCatchSite(catchingContext, caughtException));
+		this.escapingExceptionCatchSites.add(new EscapingExceptionCatchSite(catchingContext, caughtException, exceptionInfo));
 	}
 
 	public boolean hasEscapingExceptions() {

commit 988b834a35e1571af05adddd8db1ce5aaa1f0ff0
Author: ssankaran <srikanth_sankaran@in.ibm.com>
Date:   Thu Feb 21 22:09:41 2013 -0500

    Fixed Bug 401222 - [1.8][compiler] Conditional operator expressions
    results differ from 8b76

27	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ExpressionContextTests.java
7	1	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnMessageSend.java
8	1	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnMessageSendName.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java
51	8	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java
7	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java
2	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExpressionContext.java
23	10	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java
22	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ExpressionContextTests.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ExpressionContextTests.java
index b66a07a..c8eeeee 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ExpressionContextTests.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ExpressionContextTests.java
@@ -630,6 +630,33 @@ public void test021() {
 			"The operator + is undefined for the argument type(s) int, I\n" + 
 			"----------\n");
 }
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=401222, [1.8][compiler] Conditional operator expressions results differ from 8b76
+public void test022() {
+	this.runNegativeTest(
+			new String[] {
+				"X.java",
+				"import java.util.Arrays;\n" +
+				"import java.util.List;\n" +
+				"class X {\n" +
+				"	int foo(int x) {\n" +
+				"		List<String> l = x == 2 ? (List<String>)(null) : 1;\n" +
+				"		List<String> m = x == 2 ? 1 : (List<String>)(null);\n" +
+				"		return 1;\n" +
+				"	}\n" +
+				"}\n",
+			},
+			"----------\n" + 
+			"1. ERROR in X.java (at line 5)\n" + 
+			"	List<String> l = x == 2 ? (List<String>)(null) : 1;\n" + 
+			"	                                                 ^\n" + 
+			"Type mismatch: cannot convert from int to List<String>\n" + 
+			"----------\n" + 
+			"2. ERROR in X.java (at line 6)\n" + 
+			"	List<String> m = x == 2 ? 1 : (List<String>)(null);\n" + 
+			"	                          ^\n" + 
+			"Type mismatch: cannot convert from int to List<String>\n" + 
+			"----------\n");
+}
 public static Class testClass() {
 	return ExpressionContextTests.class;
 }
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnMessageSend.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnMessageSend.java
index 9501162..2a46134 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnMessageSend.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnMessageSend.java
@@ -1,10 +1,14 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2009 IBM Corporation and others.
+ * Copyright (c) 2000, 2013 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ * 
  * Contributors:
  *     IBM Corporation - initial API and implementation
  *******************************************************************************/
@@ -33,11 +37,13 @@ package org.eclipse.jdt.internal.codeassist.complete;
  */
 
 import org.eclipse.jdt.internal.compiler.ast.*;
+import org.eclipse.jdt.internal.compiler.impl.Constant;
 import org.eclipse.jdt.internal.compiler.lookup.*;
 
 public class CompletionOnMessageSend extends MessageSend {
 
 	public TypeBinding resolveType(BlockScope scope) {
+		this.constant = Constant.NotAConstant;
 		if (this.arguments != null) {
 			int argsLength = this.arguments.length;
 			for (int a = argsLength; --a >= 0;)
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnMessageSendName.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnMessageSendName.java
index dd68571..b90eafb 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnMessageSendName.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnMessageSendName.java
@@ -1,9 +1,13 @@
 /*******************************************************************************
- * Copyright (c) 2006, 2008 IBM Corporation and others.
+ * Copyright (c) 2006, 2013 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
  *
  * Contributors:
  *     IBM Corporation - initial API and implementation
@@ -11,6 +15,7 @@
 package org.eclipse.jdt.internal.codeassist.complete;
 
 import org.eclipse.jdt.internal.compiler.ast.MessageSend;
+import org.eclipse.jdt.internal.compiler.impl.Constant;
 import org.eclipse.jdt.internal.compiler.lookup.BlockScope;
 import org.eclipse.jdt.internal.compiler.lookup.TypeBinding;
 
@@ -25,6 +30,8 @@ public class CompletionOnMessageSendName extends MessageSend {
 
 	public TypeBinding resolveType(BlockScope scope) {
 
+		this.constant = Constant.NotAConstant;
+		
 		if (this.receiver.isImplicitThis())
 			throw new CompletionNodeFound();
 
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java
index 2cb0ab0..e57addb 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java
@@ -495,7 +495,7 @@ public TypeBinding resolveType(BlockScope scope) {
 	TypeBinding castType = this.resolvedType = this.type.resolveType(scope);
 	if (scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_8) {
 		this.expression.setExpressionContext(CASTING_CONTEXT);
-		if (this.expression.isPolyExpression()) {
+		if (this.expression instanceof FunctionalExpression) {
 			this.expression.setExpectedType(this.resolvedType);
 			this.bits |= ASTNode.DisableUnnecessaryCastCheck;
 		}
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java
index aea320c..daafc6d 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java
@@ -423,11 +423,19 @@ public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext,
 
 		if (this.valueIfTrue instanceof CastExpression) this.valueIfTrue.bits |= DisableUnnecessaryCastCheck; // will check later on
 		
-		if (use18specifics) { 
-			if (this.valueIfTrue.isPolyExpression()) // context propagated already.
+		if (use18specifics) {
+			if (this.expressionContext == ASSIGNMENT_CONTEXT || this.expressionContext == INVOCATION_CONTEXT) {
+				/* 15.25.3 : Where a poly reference conditional expression appears in a context of a particular kind with target 
+				   type T (5), its second and third operand expressions similarly appear in a context of the same kind with target
+				   type T. We eagerly propagate the context and target type here, but that should be harmless. Nonpoly expressions
+				   won't respond to it at all. If someone down below does get influenced, then the conditional is poly.
+				*/
+				this.valueIfTrue.setExpressionContext(this.expressionContext);
 				this.valueIfTrue.setExpectedType(this.expectedType);
-			if (this.valueIfFalse.isPolyExpression())
+
+				this.valueIfFalse.setExpressionContext(this.expressionContext);
 				this.valueIfFalse.setExpectedType(this.expectedType);
+			}
 		}
 		
 		TypeBinding originalValueIfTrueType = this.valueIfTrue.resolveType(scope);
@@ -438,6 +446,40 @@ public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext,
 		if (conditionType == null || originalValueIfTrueType == null || originalValueIfFalseType == null)
 			return null;
 
+		if (use18specifics && this.expectedType != null) { // so the story is still untold for invocations.
+			
+			    TypeBinding trueType = originalValueIfTrueType;
+			    TypeBinding falseType = originalValueIfFalseType;
+			    if (this.valueIfTrue instanceof MessageSend) {
+			    	MessageSend message = (MessageSend) this.valueIfTrue;
+			    	if (message.binding instanceof ParameterizedGenericMethodBinding) {
+			    		ParameterizedGenericMethodBinding pgmb = (ParameterizedGenericMethodBinding) message.binding;
+			    		if (pgmb.inferredReturnType) {
+			    			trueType = pgmb.original().returnType;
+			    		}
+			    	}
+			    }
+			    if (this.valueIfFalse instanceof MessageSend) {
+			    	MessageSend message = (MessageSend) this.valueIfFalse;
+			    	if (message.binding instanceof ParameterizedGenericMethodBinding) {
+			    		ParameterizedGenericMethodBinding pgmb = (ParameterizedGenericMethodBinding) message.binding;
+			    		if (pgmb.inferredReturnType) {
+			    			falseType = pgmb.original().returnType;
+			    		}
+			    	}
+			    }
+			    
+			    if (!trueType.isPrimitiveOrBoxedPrimitiveType() || !falseType.isPrimitiveOrBoxedPrimitiveType()) { // reference conditional ==> poly expression.
+			    	if (!originalValueIfTrueType.isCompatibleWith(this.expectedType, scope))
+			    		scope.problemReporter().typeMismatchError(originalValueIfTrueType, this.expectedType, this.valueIfTrue, null);
+			    	if (!originalValueIfFalseType.isCompatibleWith(this.expectedType, scope))
+			    		scope.problemReporter().typeMismatchError(originalValueIfFalseType, this.expectedType, this.valueIfFalse, null);
+			    	// 15.25.3: The type of a poly reference conditional expression is the same as its target type.
+			    	return this.resolvedType = this.expectedType;
+			    }
+			
+		}
+		
 		TypeBinding valueIfTrueType = originalValueIfTrueType;
 		TypeBinding valueIfFalseType = originalValueIfFalseType;
 		if (use15specifics && valueIfTrueType != valueIfFalseType) {
@@ -615,13 +657,14 @@ public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext,
 	
 	public void setExpressionContext(ExpressionContext context) {
 		this.expressionContext = context;
-		this.valueIfTrue.setExpressionContext(context);
-		this.valueIfFalse.setExpressionContext(context);
 	}
 	
-	public boolean isPolyExpression() {
-		return (this.expressionContext == ASSIGNMENT_CONTEXT || this.expressionContext == INVOCATION_CONTEXT) &&
-				this.valueIfTrue.isPolyExpression() && this.valueIfFalse.isPolyExpression();
+	public boolean isPolyExpression() throws UnsupportedOperationException {
+		if (this.expressionContext != ASSIGNMENT_CONTEXT && this.expressionContext != INVOCATION_CONTEXT)
+			return false;
+		
+		return this.valueIfTrue.isPolyExpression() || this.valueIfFalse.isPolyExpression();
+	
 	}
 
 	public void traverse(ASTVisitor visitor, BlockScope scope) {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java
index e93c53f..826dafd 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java
@@ -1109,8 +1109,13 @@ public void setExpressionContext(ExpressionContext context) {
 	// don't care. Subclasses that are poly expressions in specific contexts should listen in and make note.
 }
 
-public boolean isPolyExpression() {
-	return false; // Subclasses that are poly expressions should answer appropriately based on the context they feature in.
+/* Answer if the receiver is a poly expression in the prevailing context. Caveat emptor: Some constructs (notably method calls)
+   cannot answer this question until after resolution is over and may throw unsupported operation exception if queried ahead of 
+   resolution. Default implementation here returns false which is true for vast majority of AST nodes. The ones that are poly
+   expressions under one or more contexts should override and return suitable value.  
+ */
+public boolean isPolyExpression() throws UnsupportedOperationException {
+	return false;
 }
 
 public void tagAsNeedCheckCast() {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExpressionContext.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExpressionContext.java
index b539fa0..6fe1a8a 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExpressionContext.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExpressionContext.java
@@ -31,11 +31,11 @@ public interface ExpressionContext {
 	
 	/* Invocation context: potential poly-expressions are: method invocations, lambdas, reference expressions, 
 	   conditional expressions and allocation expressions. At this point, we don't distinguish between strict 
-	   and loose invocation contexts.
+	   and loose invocation contexts - we may have to cross the bridge some day.
 	   
 	   Context induced by: AllocationExpression, QualifiedAllocationExpression, ExplicitConstructorCall, MessageSend
 	   CodeSnippetAllocationExpression and CodeSnippetMessageSend.
-	*/
+	*/													
 	public static final ExpressionContext INVOCATION_CONTEXT = 
 								new ExpressionContext() {
 									public String toString() {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java
index a6bc941..13b4ab0 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java
@@ -50,6 +50,7 @@ import org.eclipse.jdt.internal.compiler.lookup.InvocationSite;
 import org.eclipse.jdt.internal.compiler.lookup.MethodBinding;
 import org.eclipse.jdt.internal.compiler.lookup.MissingTypeBinding;
 import org.eclipse.jdt.internal.compiler.lookup.ImplicitNullAnnotationVerifier;
+import org.eclipse.jdt.internal.compiler.lookup.ParameterizedGenericMethodBinding;
 import org.eclipse.jdt.internal.compiler.lookup.PolymorphicMethodBinding;
 import org.eclipse.jdt.internal.compiler.lookup.ProblemMethodBinding;
 import org.eclipse.jdt.internal.compiler.lookup.ProblemReasons;
@@ -699,16 +700,28 @@ public void setExpressionContext(ExpressionContext context) {
 
 public boolean isPolyExpression() {
 	
-	/* 15.12 has four requirements: (1) The invocation appears in an assignment context or an invocation context
-       (2) The invocation elides NonWildTypeArguments (3) the method to be invoked is a generic method (8.4.4).
-       (4) The return type of the method to be invoked mentions at least one of the method's type parameters.
-    
-       We are in no position to ascertain the last two now - until the method call is fully resolved, there is no
-       way to know this. Instead, we simply claim we are a poly expression if the first two stipulations are met.
-       This should a harmless lie.
- */
-	return (this.expressionContext == ASSIGNMENT_CONTEXT || this.expressionContext == INVOCATION_CONTEXT) &&
-			(this.typeArguments == null || this.typeArguments.length == 0);		
+	/* 15.12 has four requirements: 1) The invocation appears in an assignment context or an invocation context
+       2) The invocation elides NonWildTypeArguments 3) the method to be invoked is a generic method (8.4.4).
+       4) The return type of the method to be invoked mentions at least one of the method's type parameters.
+
+       We are in no position to ascertain the last two until after resolution has happened. So no client should
+       depend on asking this question before resolution.
+	*/
+	if (this.expressionContext != ASSIGNMENT_CONTEXT && this.expressionContext != INVOCATION_CONTEXT)
+		return false;
+	
+	if (this.typeArguments != null && this.typeArguments.length > 0)
+		return false;
+	
+	if (this.constant != Constant.NotAConstant)
+		throw new UnsupportedOperationException("Unresolved MessageSend can't be queried if it is a polyexpression"); //$NON-NLS-1$
+	
+	if (this.binding != null && this.binding instanceof ParameterizedGenericMethodBinding) {
+		ParameterizedGenericMethodBinding pgmb = (ParameterizedGenericMethodBinding) this.binding;
+		return pgmb.inferredReturnType;
+	}
+	
+	return false;
 }
 
 public void setFieldIndex(int depth) {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java
index f40f35a..a753d8f 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java
@@ -439,6 +439,28 @@ public final boolean isBaseType() {
 	return (this.tagBits & TagBits.IsBaseType) != 0;
 }
 
+/* Answer true if the receiver is a primitive type or a boxed primitive type
+ */
+public final boolean isPrimitiveOrBoxedPrimitiveType() {
+	if (this == TypeBinding.NULL)
+		return false;
+	if ((this.tagBits & TagBits.IsBaseType) != 0)
+		return true;
+	switch (this.id) {
+		case TypeIds.T_JavaLangBoolean :
+		case TypeIds.T_JavaLangByte :
+		case TypeIds.T_JavaLangCharacter :
+		case TypeIds.T_JavaLangShort :
+		case TypeIds.T_JavaLangDouble :
+		case TypeIds.T_JavaLangFloat :
+		case TypeIds.T_JavaLangInteger :
+		case TypeIds.T_JavaLangLong :
+			return true;
+		default: 
+			return false;
+	}
+}
+
 /**
  *  Returns true if parameterized type AND not of the form List<?>
  */

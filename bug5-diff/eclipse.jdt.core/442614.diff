commit 8622e99cc18e0c0ae6c600de97be8d909f3d7ad6
Author: Markus Keller <markus_keller@ch.ibm.com>
Date:   Tue Aug 26 18:59:53 2014 +0200

    Bug 442614: Extract, merge, and fix string and char literal escaping

2	2	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest_1_5.java
4	2	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/AbstractCompilerTest.java
19	10	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java
3	29	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/StringLiteral.java
2	29	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/diagnose/DiagnoseParser.java
49	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/Util.java
3	53	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CharacterLiteral.java
3	50	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/StringLiteral.java
2	44	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest_1_5.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest_1_5.java
index 4f6a1f9..2a19011 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest_1_5.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ClassFileReaderTest_1_5.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2009 IBM Corporation and others.
+ * Copyright (c) 2000, 2014 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -516,7 +516,7 @@ public class ClassFileReaderTest_1_5 extends AbstractRegressionTest {
 			"}\n" + 
 			"";
 		String expectedOutput =
-			"  public abstract char test2() default \'\\0\';";
+			"  public abstract char test2() default \'\\u0000\';";
 		checkClassFile("", "MonAnnotation", source, expectedOutput, ClassFileBytesDisassembler.DETAILED | ClassFileBytesDisassembler.COMPACT);
 	}
 }
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/AbstractCompilerTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/AbstractCompilerTest.java
index 93bdec1..27fc1a0 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/AbstractCompilerTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/AbstractCompilerTest.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2013 IBM Corporation and others.
+ * Copyright (c) 2000, 2014 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -250,7 +250,9 @@ public class AbstractCompilerTest extends TestCase {
 		long highestLevel = highestComplianceLevels();
 		if (highestLevel < uniqueCompliance) {
 			String complianceString;
-			if (highestLevel == ClassFileConstants.JDK1_7)
+			if (highestLevel == ClassFileConstants.JDK1_8)
+				complianceString = "1.8";
+			else if (highestLevel == ClassFileConstants.JDK1_7)
 				complianceString = "1.7";
 			else if (highestLevel == ClassFileConstants.JDK1_6)
 				complianceString = "1.6";
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java
index 789fce5..9941271 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTTest.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2013 IBM Corporation and others.
+ * Copyright (c) 2000, 2014 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -1736,6 +1736,11 @@ public class ASTTest extends org.eclipse.jdt.core.tests.junit.extension.TestCase
 		x.setEscapedValue("\"'\"");
 		assertEquals("", "\"'\"", x.getEscapedValue());
 		assertEquals("", "'", x.getLiteralValue());
+		
+		// test for bug 442614
+		x.setLiteralValue("\0041");
+		assertEquals("", "\"\\u00041\"", x.getEscapedValue());
+		assertEquals("", "\u00041", x.getLiteralValue());
 	}
 
 	public void testStringLiteralUnicode() {
@@ -1874,23 +1879,27 @@ public class ASTTest extends org.eclipse.jdt.core.tests.junit.extension.TestCase
 		x.setCharValue('\r');
 		assertTrue(x.getEscapedValue().equals("\'\\r\'")); //$NON-NLS-1$
 		x.setCharValue('\"');
-		assertTrue(x.getEscapedValue().equals("\'\\\"\'")); //$NON-NLS-1$
+		assertTrue(x.getEscapedValue().equals("\'\"\'")); //$NON-NLS-1$
 		x.setCharValue('\0');
-		assertTrue(x.getEscapedValue().equals("\'\\0\'")); //$NON-NLS-1$
+		assertTrue(x.getEscapedValue().equals("\'\\u0000\'")); //$NON-NLS-1$
 		x.setCharValue('\1');
-		assertTrue(x.getEscapedValue().equals("\'\\1\'")); //$NON-NLS-1$
+		assertTrue(x.getEscapedValue().equals("\'\\u0001\'")); //$NON-NLS-1$
 		x.setCharValue('\2');
-		assertTrue(x.getEscapedValue().equals("\'\\2\'")); //$NON-NLS-1$
+		assertTrue(x.getEscapedValue().equals("\'\\u0002\'")); //$NON-NLS-1$
 		x.setCharValue('\3');
-		assertTrue(x.getEscapedValue().equals("\'\\3\'")); //$NON-NLS-1$
+		assertTrue(x.getEscapedValue().equals("\'\\u0003\'")); //$NON-NLS-1$
 		x.setCharValue('\4');
-		assertTrue(x.getEscapedValue().equals("\'\\4\'")); //$NON-NLS-1$
+		assertTrue(x.getEscapedValue().equals("\'\\u0004\'")); //$NON-NLS-1$
 		x.setCharValue('\5');
-		assertTrue(x.getEscapedValue().equals("\'\\5\'")); //$NON-NLS-1$
+		assertTrue(x.getEscapedValue().equals("\'\\u0005\'")); //$NON-NLS-1$
 		x.setCharValue('\6');
-		assertTrue(x.getEscapedValue().equals("\'\\6\'")); //$NON-NLS-1$
+		assertTrue(x.getEscapedValue().equals("\'\\u0006\'")); //$NON-NLS-1$
 		x.setCharValue('\7');
-		assertTrue(x.getEscapedValue().equals("\'\\7\'")); //$NON-NLS-1$
+		assertTrue(x.getEscapedValue().equals("\'\\u0007\'")); //$NON-NLS-1$
+		x.setCharValue('\33');
+		assertTrue(x.getEscapedValue().equals("\'\\u001b\'")); //$NON-NLS-1$
+		x.setCharValue('\41');
+		assertTrue(x.getEscapedValue().equals("\'!\'")); //$NON-NLS-1$
 	}
 
 	public void testNumberLiteral() {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/StringLiteral.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/StringLiteral.java
index 211cf17..ebf451a 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/StringLiteral.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/StringLiteral.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2009 IBM Corporation and others.
+ * Copyright (c) 2000, 2014 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -15,6 +15,7 @@ import org.eclipse.jdt.internal.compiler.codegen.CodeStream;
 import org.eclipse.jdt.internal.compiler.impl.StringConstant;
 import org.eclipse.jdt.internal.compiler.lookup.BlockScope;
 import org.eclipse.jdt.internal.compiler.lookup.TypeBinding;
+import org.eclipse.jdt.internal.compiler.util.Util;
 
 public class StringLiteral extends Literal {
 
@@ -77,34 +78,7 @@ public class StringLiteral extends Literal {
 		// handle some special char.....
 		output.append('\"');
 		for (int i = 0; i < this.source.length; i++) {
-			switch (this.source[i]) {
-				case '\b' :
-					output.append("\\b"); //$NON-NLS-1$
-					break;
-				case '\t' :
-					output.append("\\t"); //$NON-NLS-1$
-					break;
-				case '\n' :
-					output.append("\\n"); //$NON-NLS-1$
-					break;
-				case '\f' :
-					output.append("\\f"); //$NON-NLS-1$
-					break;
-				case '\r' :
-					output.append("\\r"); //$NON-NLS-1$
-					break;
-				case '\"' :
-					output.append("\\\""); //$NON-NLS-1$
-					break;
-				case '\'' :
-					output.append("\\'"); //$NON-NLS-1$
-					break;
-				case '\\' : //take care not to display the escape as a potential real char
-					output.append("\\\\"); //$NON-NLS-1$
-					break;
-				default :
-					output.append(this.source[i]);
-			}
+			Util.appendEscapedChar(output, this.source[i], true);
 		}
 		output.append('\"');
 		return output;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/diagnose/DiagnoseParser.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/diagnose/DiagnoseParser.java
index 746a38b..358ab95 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/diagnose/DiagnoseParser.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/diagnose/DiagnoseParser.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2012 IBM Corporation and others.
+ * Copyright (c) 2000, 2014 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -436,34 +436,7 @@ public class DiagnoseParser implements ParserBasicInformation, TerminalTokens, C
 		for (int i = start; i < end; i++) {
 			char c = tokenSource[i];
 
-			switch (c) {
-                case '\r' :
-                    tokenSourceBuffer.append("\\r"); //$NON-NLS-1$
-                    break;
-                case '\n' :
-                    tokenSourceBuffer.append("\\n"); //$NON-NLS-1$
-                    break;
-                case '\b' :
-                    tokenSourceBuffer.append("\\b"); //$NON-NLS-1$
-                    break;
-                case '\t' :
-                    tokenSourceBuffer.append("\t"); //$NON-NLS-1$
-                    break;
-                case '\f' :
-                    tokenSourceBuffer.append("\\f"); //$NON-NLS-1$
-                    break;
-                case '\"' :
-                    tokenSourceBuffer.append("\\\""); //$NON-NLS-1$
-                    break;
-                case '\'' :
-                    tokenSourceBuffer.append("\\'"); //$NON-NLS-1$
-                    break;
-                case '\\' :
-                    tokenSourceBuffer.append("\\\\"); //$NON-NLS-1$
-                    break;
-                default :
-                    tokenSourceBuffer.append(c);
-            }
+			Util.appendEscapedChar(tokenSourceBuffer, c, true);
 		}
 		for (int i = end; i < tokenSource.length; i++) {
 			tokenSourceBuffer.append(tokenSource[i]);
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/Util.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/Util.java
index cd6c6d2..59da8ab 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/Util.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/Util.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2013 IBM Corporation and others.
+ * Copyright (c) 2000, 2014 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -1573,4 +1573,52 @@ public class Util implements SuffixConstants {
 		}
 		return true;
 	}
+	
+	public static void appendEscapedChar(StringBuffer buffer, char c, boolean stringLiteral) {
+		switch (c) {
+			case '\b' :
+				buffer.append("\\b"); //$NON-NLS-1$
+				break;
+			case '\t' :
+				buffer.append("\\t"); //$NON-NLS-1$
+				break;
+			case '\n' :
+				buffer.append("\\n"); //$NON-NLS-1$
+				break;
+			case '\f' :
+				buffer.append("\\f"); //$NON-NLS-1$
+				break;
+			case '\r' :
+				buffer.append("\\r"); //$NON-NLS-1$
+				break;
+			case '\"':
+				if (stringLiteral) {
+					buffer.append("\\\""); //$NON-NLS-1$
+				} else {
+					buffer.append(c);
+				}
+				break;
+			case '\'':
+				if (stringLiteral) {
+					buffer.append(c);
+				} else {
+					buffer.append("\\\'"); //$NON-NLS-1$
+				}
+				break;
+			case '\\':
+				buffer.append("\\\\"); //$NON-NLS-1$
+				break;
+			default:
+				if (c >= 0x20) {
+					buffer.append(c);
+				} else if (c >= 0x10) {
+					buffer.append("\\u00").append(Integer.toHexString(c)); //$NON-NLS-1$
+				} else if (c >= 0) {
+					buffer.append("\\u000").append(Integer.toHexString(c)); //$NON-NLS-1$
+				} else {
+					buffer.append(c);
+				}
+		}
+	}
+
 }
\ No newline at end of file
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CharacterLiteral.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CharacterLiteral.java
index 59c2c73..b4b1da6 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CharacterLiteral.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CharacterLiteral.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2013 IBM Corporation and others.
+ * Copyright (c) 2000, 2014 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -18,6 +18,7 @@ import org.eclipse.jdt.core.compiler.InvalidInputException;
 import org.eclipse.jdt.internal.compiler.parser.Scanner;
 import org.eclipse.jdt.internal.compiler.parser.ScannerHelper;
 import org.eclipse.jdt.internal.compiler.parser.TerminalTokens;
+import org.eclipse.jdt.internal.compiler.util.Util;
 
 /**
  * Character literal nodes.
@@ -316,58 +317,7 @@ public class CharacterLiteral extends Expression {
 		StringBuffer b = new StringBuffer(3);
 
 		b.append('\''); // opening delimiter
-		switch(value) {
-			case '\b' :
-				b.append("\\b"); //$NON-NLS-1$
-				break;
-			case '\t' :
-				b.append("\\t"); //$NON-NLS-1$
-				break;
-			case '\n' :
-				b.append("\\n"); //$NON-NLS-1$
-				break;
-			case '\f' :
-				b.append("\\f"); //$NON-NLS-1$
-				break;
-			case '\r' :
-				b.append("\\r"); //$NON-NLS-1$
-				break;
-			case '\"':
-				b.append("\\\""); //$NON-NLS-1$
-				break;
-			case '\'':
-				b.append("\\\'"); //$NON-NLS-1$
-				break;
-			case '\\':
-				b.append("\\\\"); //$NON-NLS-1$
-				break;
-			case '\0' :
-				b.append("\\0"); //$NON-NLS-1$
-				break;
-			case '\1' :
-				b.append("\\1"); //$NON-NLS-1$
-				break;
-			case '\2' :
-				b.append("\\2"); //$NON-NLS-1$
-				break;
-			case '\3' :
-				b.append("\\3"); //$NON-NLS-1$
-				break;
-			case '\4' :
-				b.append("\\4"); //$NON-NLS-1$
-				break;
-			case '\5' :
-				b.append("\\5"); //$NON-NLS-1$
-				break;
-			case '\6' :
-				b.append("\\6"); //$NON-NLS-1$
-				break;
-			case '\7' :
-				b.append("\\7"); //$NON-NLS-1$
-				break;
-			default:
-				b.append(value);
-		}
+		Util.appendEscapedChar(b, value, false);
 		b.append('\''); // closing delimiter
 		setEscapedValue(b.toString());
 	}
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/StringLiteral.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/StringLiteral.java
index 6400b81..e5f6f46 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/StringLiteral.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/StringLiteral.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2013 IBM Corporation and others.
+ * Copyright (c) 2000, 2014 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -17,6 +17,7 @@ import java.util.List;
 import org.eclipse.jdt.core.compiler.InvalidInputException;
 import org.eclipse.jdt.internal.compiler.parser.Scanner;
 import org.eclipse.jdt.internal.compiler.parser.TerminalTokens;
+import org.eclipse.jdt.internal.compiler.util.Util;
 
 /**
  * String literal nodes.
@@ -273,55 +274,7 @@ public class StringLiteral extends Expression {
 		b.append("\""); // opening delimiter //$NON-NLS-1$
 		for (int i = 0; i < len; i++) {
 			char c = value.charAt(i);
-			switch(c) {
-				case '\b' :
-					b.append("\\b"); //$NON-NLS-1$
-					break;
-				case '\t' :
-					b.append("\\t"); //$NON-NLS-1$
-					break;
-				case '\n' :
-					b.append("\\n"); //$NON-NLS-1$
-					break;
-				case '\f' :
-					b.append("\\f"); //$NON-NLS-1$
-					break;
-				case '\r' :
-					b.append("\\r"); //$NON-NLS-1$
-					break;
-				case '\"':
-					b.append("\\\""); //$NON-NLS-1$
-					break;
-				case '\\':
-					b.append("\\\\"); //$NON-NLS-1$
-					break;
-				case '\0' :
-					b.append("\\0"); //$NON-NLS-1$
-					break;
-				case '\1' :
-					b.append("\\1"); //$NON-NLS-1$
-					break;
-				case '\2' :
-					b.append("\\2"); //$NON-NLS-1$
-					break;
-				case '\3' :
-					b.append("\\3"); //$NON-NLS-1$
-					break;
-				case '\4' :
-					b.append("\\4"); //$NON-NLS-1$
-					break;
-				case '\5' :
-					b.append("\\5"); //$NON-NLS-1$
-					break;
-				case '\6' :
-					b.append("\\6"); //$NON-NLS-1$
-					break;
-				case '\7' :
-					b.append("\\7"); //$NON-NLS-1$
-					break;
-				default:
-					b.append(c);
-			}
+			Util.appendEscapedChar(b, c, true);
 		}
 		b.append("\""); // closing delimiter //$NON-NLS-1$
 		setEscapedValue(b.toString());
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java
index 5db5a38..8a150b4 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Disassembler.java
@@ -183,55 +183,13 @@ public class Disassembler extends ClassFileBytesDisassembler {
 		StringBuffer buffer = new StringBuffer();
 		for (int i = 0, max = chars.length; i < max; i++) {
 			char c = chars[i];
-			escapeChar(buffer, c);
+			org.eclipse.jdt.internal.compiler.util.Util.appendEscapedChar(buffer, c, true);
 		}
 		return buffer.toString();
 	}
 
 	private static void escapeChar(StringBuffer buffer, char c) {
-		switch(c) {
-			case '\b' :
-				buffer.append("\\b"); //$NON-NLS-1$
-				break;
-			case '\t' :
-				buffer.append("\\t"); //$NON-NLS-1$
-				break;
-			case '\n' :
-				buffer.append("\\n"); //$NON-NLS-1$
-				break;
-			case '\f' :
-				buffer.append("\\f"); //$NON-NLS-1$
-				break;
-			case '\r' :
-				buffer.append("\\r"); //$NON-NLS-1$
-				break;
-			case '\0' :
-				buffer.append("\\0"); //$NON-NLS-1$
-				break;
-			case '\1' :
-				buffer.append("\\1"); //$NON-NLS-1$
-				break;
-			case '\2' :
-				buffer.append("\\2"); //$NON-NLS-1$
-				break;
-			case '\3' :
-				buffer.append("\\3"); //$NON-NLS-1$
-				break;
-			case '\4' :
-				buffer.append("\\4"); //$NON-NLS-1$
-				break;
-			case '\5' :
-				buffer.append("\\5"); //$NON-NLS-1$
-				break;
-			case '\6' :
-				buffer.append("\\6"); //$NON-NLS-1$
-				break;
-			case '\7' :
-				buffer.append("\\7"); //$NON-NLS-1$
-				break;
-			default:
-				buffer.append(c);
-		}
+		org.eclipse.jdt.internal.compiler.util.Util.appendEscapedChar(buffer, c, false);
 	}
 
 	static String decodeStringValue(String s) {

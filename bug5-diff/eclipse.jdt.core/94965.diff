commit f13a740e3b814a194962fd0ef85df91efde745be
Author: David Audel <daudel>
Date:   Wed May 18 13:24:01 2005 +0000

    bug 94965, 92733, 92555

31	15	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CodeCorrectionTests.java
1685	653	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java
1340	392	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests_1_5.java
0	11	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAbstractMethod1.java
0	11	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAbstractMethod2.java
0	10	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAbstractMethod3.java
0	14	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAbstractMethod4.java
0	3	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAbstractMethodRelevance1.java
0	3	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAbstractMethodRelevance2.java
0	5	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAbstractSuperClass.java
0	17	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAllocationExpressionIsParent2.java
0	17	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAllocationExpressionIsParent3.java
0	19	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAllocationExpressionIsParent6.java
0	8	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAmbiguousFieldName2.java
0	6	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionFindClass.java
0	13	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionFindMemberType1.java
0	13	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionFindMemberType2.java
0	3	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionFindSuperInterface.java
0	7	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionMemberType.java
0	7	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionMemberType2.java
0	7	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionMemberType3.java
0	3	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionMethodDeclaration2.java
0	7	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionMethodDeclaration3.java
0	3	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionMethodDeclaration4.java
0	6	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionMethodDeclaration5.java
0	11	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionPrefixFieldName1.java
0	11	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionPrefixFieldName2.java
0	11	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionPrefixMethodName1.java
0	11	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionPrefixMethodName2.java
0	11	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionPrefixMethodName3.java
0	7	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionQualifiedAllocationType1.java
0	7	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionQualifiedExpectedType.java
0	7	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSameSuperClass.java
0	5	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionStaticMethodDeclaration2.java
0	5	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionStaticMethodDeclaration3.java
0	6	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperClass.java
0	4	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperClass2.java
0	3	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperInterface.java
0	4	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperInterface2.java
0	1	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperType.java
0	1	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperType2.java
0	1	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperType3.java
0	1	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperType4.java
0	1	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperType5.java
0	1	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperType6.java
0	1	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperType7.java
0	1	org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperType8.java
0	7	org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis15.java
0	12	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/pkgstaticimport/QQType1.java
0	5	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/pkgstaticimport/QQType3.java
0	12	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/pkgstaticimport/QQType4.java
0	5	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/pkgstaticimport/QQType6.java
0	12	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/pkgstaticimport/QQType7.java
0	5	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/pkgstaticimport/QQType9.java
0	12	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0005/Test.java
0	12	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0006/Test.java
0	12	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0007/Test.java
0	18	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0008/Test.java
0	9	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0011/Test.java
0	9	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0012/Test.java
0	9	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0013/Test.java
0	8	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0014/Test.java
0	10	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0015/Test.java
0	11	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0016/Test.java
0	11	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0017/Test.java
0	11	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0018/Test.java
0	9	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0019/Test.java
0	11	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0020/Test.java
0	11	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0029/Test.java
0	10	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0031/Test.java
0	11	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0040/Test.java
0	13	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0041/Test.java
0	11	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0042/Test.java
0	13	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0043/Test.java
0	11	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0044/Test.java
0	13	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0045/Test.java
0	11	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0046/Test.java
0	13	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0047/Test.java
0	7	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0051/Test.java
0	11	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0052/QQType2.java
0	7	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0052/Test.java
0	7	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0053/Test.java
0	7	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0054/Test.java
0	8	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0055/Test.java
0	8	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0056/Test.java
0	12	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0059/QQType5.java
0	12	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0066/QQType8.java
0	5	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0070/p/ImportedClass.java
0	5	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0071/p/ImportedClass.java
0	7	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0072/p/ImportedClass.java
0	9	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0073/p/ImportedClass.java
0	9	org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0074/p/ImportedClass.java
17	1	org.eclipse.jdt.core/buildnotes_jdt-core.html
580	111	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
1	1	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/ISearchRequestor.java
18	7	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
1	0	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnSingleTypeReference.java
3	0	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java
136	31	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Engine.java
2	2	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CancelableNameEnvironment.java
3	3	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironment.java
1	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironmentRequestor.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CodeCorrectionTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CodeCorrectionTests.java
index de5e68f..50039e7 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CodeCorrectionTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CodeCorrectionTests.java
@@ -16,6 +16,7 @@ import org.eclipse.core.resources.*;
 import org.eclipse.core.runtime.*;
 import org.eclipse.jdt.core.*;
 import org.eclipse.jdt.core.search.*;
+import org.eclipse.jdt.internal.codeassist.CompletionEngine;
 
 
 public class CodeCorrectionTests extends AbstractJavaModelTests {
@@ -458,21 +459,36 @@ public void testCorrectSuperInterface2() throws JavaModelException {
 	int start = src.indexOf(error);
 	int end = start + error.length();
 	
-	assertEquals(
-		"should have two suggestions", 
-		"AListener\n"+
-		"AListenerEvent",
-		requestor.getSuggestions());
-	assertEquals(
-		"a start of a suggestion is not correct", 
-		start+"\n"+
-		start,
-		requestor.getStarts());
-	assertEquals(
-		"a end of a suggestion is not correct", 
-		end+"\n"+
-		end,
-		requestor.getEnds());
+	if(CompletionEngine.PROPOSE_MEMBER_TYPES) {
+		assertEquals(
+			"should have two suggestions", 
+			"AListener",
+			requestor.getSuggestions());
+		assertEquals(
+			"a start of a suggestion is not correct", 
+			""+start,
+			requestor.getStarts());
+		assertEquals(
+			"a end of a suggestion is not correct", 
+			""+end,
+			requestor.getEnds());
+	} else {
+		assertEquals(
+			"should have two suggestions", 
+			"AListener\n"+
+			"AListenerEvent",
+			requestor.getSuggestions());
+		assertEquals(
+			"a start of a suggestion is not correct", 
+			start+"\n"+
+			start,
+			requestor.getStarts());
+		assertEquals(
+			"a end of a suggestion is not correct", 
+			end+"\n"+
+			end,
+			requestor.getEnds());
+	}
 }
 public void testCorrectException1() throws JavaModelException {
 	CorrectionEngine engine = new CorrectionEngine(JavaCore.getOptions());
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java
index 545c269..92845e2 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests.java
@@ -15,6 +15,7 @@ import java.util.Hashtable;
 
 import org.eclipse.jdt.core.*;
 import org.eclipse.jdt.internal.codeassist.CompletionEngine;
+import org.eclipse.jdt.core.ICompilationUnit;
 import org.eclipse.jdt.internal.codeassist.RelevanceConstants;
 
 import junit.framework.*;
@@ -46,7 +47,7 @@ public static Test suite() {
 		}
 		return suite;
 	}
-	suite.addTest(new CompletionTests("testCompletionMemberType"));			
+	suite.addTest(new CompletionTests("testCompletionAllMemberTypes6"));			
 	return suite;
 }
 
@@ -106,23 +107,28 @@ public void testCompletionEndOfCompilationUnit() throws JavaModelException {
  * Complete the type "A" from "new A".
  */
 public void testCompletionFindClass() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionFindClass.java");
+	this.wc = getWorkingCopy(
+            "/Completion/src/CompletionFindClass.java",
+            "public class CompletionFindClass {\n" +
+            "	private    A[] a;\n" +
+            "	public CompletionFindClass () {\n" +
+            "		this.a = new A\n" +
+            "	}\n" +
+            "}");
+    
+    
+    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+    String str = this.wc.getSource();
+    String completeBehind = "A";
+    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+    this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
-	String str = cu.getSource();
-	String completeBehind = "A";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	
-	cu.codeComplete(cursorLocation, requestor);
-	assertEquals(
-		"should have one class",
-		"element:A    completion:A    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:A1    completion:A1    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:A2    completion:A2    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:A3    completion:A3    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:ABC    completion:p1.ABC    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+"\n" +
-		"element:ABC    completion:p2.ABC    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED),
-		requestor.getResults());	
+    assertResults(
+    		"ABC[TYPE_REF]{p1.ABC, p1, Lp1.ABC;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+"}\n" +
+    		"ABC[TYPE_REF]{p2.ABC, p2, Lp2.ABC;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+"}\n" +
+			"A3[TYPE_REF]{A3, , LA3;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"}\n" +
+			"A[TYPE_REF]{A, , LA;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_UNQUALIFIED + R_NON_RESTRICTED)+"}",
+            requestor.getResults());
 }
 
 /**
@@ -463,18 +469,28 @@ public void testCompletionFindMethodWhenInProcess() throws JavaModelException {
 }
 
 public void testCompletionFindSuperInterface() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionFindSuperInterface.java");
+	this.wc = getWorkingCopy(
+            "/Completion/src/CompletionFindSuperInterface.java",
+            "public class CompletionFindSuperInterface implements SuperInterface {\n"+
+            "}");
+    
+    
+    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+    String str = this.wc.getSource();
+    String completeBehind = "Super";
+    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+    this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
-	String str = cu.getSource();
-	String completeBehind = "Super";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-		
-	assertEquals(
-		"element:SuperClass    completion:SuperClass    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n"+
-		"element:SuperInterface    completion:SuperInterface    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_INTERFACE + R_UNQUALIFIED + R_NON_RESTRICTED),
-		requestor.getResults());
+    if(CompletionEngine.PROPOSE_MEMBER_TYPES) {
+	    assertResults(
+	           "SuperInterface[TYPE_REF]{SuperInterface, , LSuperInterface;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_INTERFACE + R_UNQUALIFIED + R_NON_RESTRICTED)+"}",
+				requestor.getResults());
+    } else {
+    	assertResults(
+	            "SuperClass[TYPE_REF]{SuperClass, , LSuperClass;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"}\n"+
+				"SuperInterface[TYPE_REF]{SuperInterface, , LSuperInterface;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_INTERFACE + R_UNQUALIFIED + R_NON_RESTRICTED)+"}",
+				requestor.getResults());
+    }
 }
 
 /**
@@ -625,20 +641,28 @@ public void testCompletionAmbiguousFieldName() throws JavaModelException {
 }
 
 public void testCompletionAmbiguousFieldName2() throws JavaModelException {
+	this.wc = getWorkingCopy(
+            "/Completion/src/CompletionAmbiguousFieldName2.java",
+            "public class CompletionAmbiguousFieldName2 {\n"+
+            "	int xBar;\n"+
+            "	class classFoo {\n"+
+            "		public void foo(int xBar){\n"+
+            "			xBa\n"+
+            "		}\n"+
+            "	}\n"+
+            "}");
+    
+    
+    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+    String str = this.wc.getSource();
+    String completeBehind = "xBa";
+    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+    this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionAmbiguousFieldName2.java");
-
-	String str = cu.getSource();
-	String completeBehind = "xBa";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-
-	assertEquals(
-		"should have two completions", 
-		"element:xBar    completion:CompletionAmbiguousFieldName2.this.xBar    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+"\n"+
-		"element:xBar    completion:xBar    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED+ R_NON_RESTRICTED),
-		requestor.getResults());
+    assertResults(
+            "xBar[FIELD_REF]{CompletionAmbiguousFieldName2.this.xBar, LCompletionAmbiguousFieldName2;, I, xBar, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+"}\n"+
+            "xBar[LOCAL_VARIABLE_REF]{xBar, null, I, xBar, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED+ R_NON_RESTRICTED)+"}",
+            requestor.getResults());
 }
 
 public void testCompletionAmbiguousFieldName3() throws JavaModelException {
@@ -677,116 +701,200 @@ public void testCompletionAmbiguousFieldName4() throws JavaModelException {
 
 
 public void testCompletionPrefixFieldName1() throws JavaModelException {
+	this.wc = getWorkingCopy(
+            "/Completion/src/CompletionPrefixFieldName1.java",
+            "public class CompletionPrefixFieldName1 {\n"+
+            "	int xBar;\n"+
+            "	\n"+
+            "	class classFoo {\n"+
+            "		int xBar;\n"+
+            "		\n"+
+            "		public void foo(){\n"+
+            "			xBa\n"+
+            "		}\n"+
+            "	}\n"+
+            "}");
+    
+    
+    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+    String str = this.wc.getSource();
+    String completeBehind = "xBa";
+    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+    this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionPrefixFieldName1.java");
-
-	String str = cu.getSource();
-	String completeBehind = "xBa";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-
-	assertEquals(
-		"should have two completions", 
-		"element:xBar    completion:CompletionPrefixFieldName1.this.xBar    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+"\n" +
-		"element:xBar    completion:xBar    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED+ R_NON_RESTRICTED),
+	assertResults(
+		"xBar[FIELD_REF]{CompletionPrefixFieldName1.this.xBar, LCompletionPrefixFieldName1;, I, xBar, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+"}\n" +
+		"xBar[FIELD_REF]{xBar, LCompletionPrefixFieldName1$classFoo;, I, xBar, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED+ R_NON_RESTRICTED)+"}",
 		requestor.getResults());
 }
 
 
 public void testCompletionPrefixFieldName2() throws JavaModelException {
+	this.wc = getWorkingCopy(
+            "/Completion/src/CompletionPrefixFieldName2.java",
+            "public class CompletionPrefixFieldName2 {\n"+
+            "	int xBar;\n"+
+            "	\n"+
+            "	class classFoo {\n"+
+            "		int xBar;\n"+
+            "		\n"+
+            "		public void foo(){\n"+
+            "			new CompletionPrefixFieldName2().xBa\n"+
+            "		}\n"+
+            "	}\n"+
+            "}");
+    
+    
+    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+    String str = this.wc.getSource();
+    String completeBehind = "xBa";
+    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+    this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionPrefixFieldName2.java");
-
-	String str = cu.getSource();
-	String completeBehind = "xBa";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-
-	assertEquals(
-		"should have one completion", 
-		"element:xBar    completion:xBar    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC+ R_NON_RESTRICTED),
+	assertResults(
+		"xBar[FIELD_REF]{xBar, LCompletionPrefixFieldName2;, I, xBar, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC+ R_NON_RESTRICTED)+"}",
 		requestor.getResults());
 }
 
 
 public void testCompletionPrefixMethodName1() throws JavaModelException {
+	this.wc = getWorkingCopy(
+            "/Completion/src/CompletionPrefixMethodName1.java",
+            "public class CompletionPrefixMethodName1 {\n"+
+           "	int xBar(){}\n"+
+           "	\n"+
+           "	class classFoo {\n"+
+           "		int xBar(){}\n"+
+           "		\n"+
+           "		public void foo(){\n"+
+           "			xBa\n"+
+           "		}\n"+
+           "	}\n"+
+           "}");
+    
+    
+    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+    String str = this.wc.getSource();
+    String completeBehind = "xBa";
+    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+    this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionPrefixMethodName1.java");
-
-	String str = cu.getSource();
-	String completeBehind = "xBa";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-
-	assertEquals(
-		"should have two completions", 
-		"element:xBar    completion:CompletionPrefixMethodName1.this.xBar()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+"\n" +
-		"element:xBar    completion:xBar()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED+ R_NON_RESTRICTED),
+	assertResults(
+		"xBar[METHOD_REF]{CompletionPrefixMethodName1.this.xBar(), LCompletionPrefixMethodName1;, ()I, xBar, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+"}\n" +
+		"xBar[METHOD_REF]{xBar(), LCompletionPrefixMethodName1$classFoo;, ()I, xBar, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED+ R_NON_RESTRICTED)+"}",
 		requestor.getResults());
 }
 
 
 public void testCompletionPrefixMethodName2() throws JavaModelException {
+	this.wc = getWorkingCopy(
+            "/Completion/src/CompletionPrefixMethodName2.java",
+            "public class CompletionPrefixMethodName2 {\n"+
+            "	int xBar(){}\n"+
+            "	\n"+
+            "	class classFoo {\n"+
+            "		int xBar(){}\n"+
+            "		\n"+
+            "		public void foo(){\n"+
+            "			new CompletionPrefixMethodName2().xBa\n"+
+            "		}\n"+
+            "	}\n"+
+            "}");
+    
+    
+    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+    String str = this.wc.getSource();
+    String completeBehind = "xBa";
+    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+    this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionPrefixMethodName2.java");
-
-	String str = cu.getSource();
-	String completeBehind = "xBa";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-
-	assertEquals(
-		"should have one completion", 
-		"element:xBar    completion:xBar()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC+ R_NON_RESTRICTED),
+	assertResults(
+		"xBar[METHOD_REF]{xBar(), LCompletionPrefixMethodName2;, ()I, xBar, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC+ R_NON_RESTRICTED)+"}",
 		requestor.getResults());
 }
 
 public void testCompletionPrefixMethodName3() throws JavaModelException {
+	this.wc = getWorkingCopy(
+            "/Completion/src/CompletionPrefixMethodName2.java",
+            "public class CompletionPrefixMethodName3 {\n"+
+            "	int xBar(int a, int b){}\n"+
+            "	\n"+
+            "	class classFoo {\n"+
+            "		int xBar(int a, int b){}\n"+
+            "		\n"+
+            "		public void foo(){\n"+
+            "			xBar(1,\n"+
+            "		}\n"+
+            "	}\n"+
+            "}");
+    
+    
+    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+    String str = this.wc.getSource();
+    String completeBehind = "xBar(1,";
+    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+    this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionPrefixMethodName3.java");
-
-	String str = cu.getSource();
-	String completeBehind = "xBar(1,";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-
-	assertEquals(
-		"should have one completion", 
-		"element:xBar    completion:    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:xBar    completion:CompletionPrefixMethodName3.this.xBar(1,    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME+ R_NON_RESTRICTED),
+	assertResults(
+		"xBar[METHOD_REF]{CompletionPrefixMethodName3.this.xBar(1,, LCompletionPrefixMethodName3;, (II)I, xBar, (a, b), "+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME+ R_NON_RESTRICTED)+"}\n"+
+		"xBar[METHOD_REF]{, LCompletionPrefixMethodName3$classFoo;, (II)I, xBar, (a, b), "+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_UNQUALIFIED + R_NON_RESTRICTED)+"}",
 		requestor.getResults());
 }
 
 public void testCompletionFindMemberType1() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionFindMemberType1.java");
-
-	String str = cu.getSource();
-	String completeBehind = "Inner";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
+	this.wc = getWorkingCopy(
+            "/Completion/src/CompletionFindMemberType1.java",
+            "interface A1 {\n"+
+            "	class Inner1 {\n"+
+            "	}\n"+
+            "}\n"+
+            "interface B1 extends A1 {\n"+
+            "	class Inner1 {\n"+
+            "	}\n"+
+            "}\n"+
+            "public class CompletionFindMemberType1 {\n"+
+            "	public void foo() {\n"+
+            "		B1.Inner\n"+
+            "	}\n"+
+            "}");
+    
+    
+    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+    String str = this.wc.getSource();
+    String completeBehind = "Inner";
+    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+    this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
-	assertEquals(
-		"element:B1.Inner1    completion:Inner1    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE+ R_NON_RESTRICTED),
+	assertResults(
+		"B1.Inner1[TYPE_REF]{Inner1, , LB1$Inner1;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE+ R_NON_RESTRICTED) +"}",
 		requestor.getResults());
 }
 
 public void testCompletionFindMemberType2() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionFindMemberType2.java");
-
-	String str = cu.getSource();
-	String completeBehind = "Inner";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
+	this.wc = getWorkingCopy(
+            "/Completion/src/CompletionPrefixMethodName2.java",
+            "interface A2 {\n"+
+            "	class ZInner2{\n"+
+            "	}\n"+
+            "}\n"+
+            "interface B2 extends A2 {\n"+
+            "	class ZInner2 {\n"+
+            "	}\n"+
+            "}\n"+
+            "public class CompletionFindMemberType2 implements B2{\n"+
+            "	public void foo() {\n"+
+            "		ZInner\n"+
+            "	}\n"+
+            "}");
+    
+    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+    String str = this.wc.getSource();
+    String completeBehind = "ZInner";
+    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+    this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
-	assertEquals(
-		"element:B2.Inner2    completion:Inner2    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE+ R_NON_RESTRICTED),
+	assertResults(
+		"B2.ZInner2[TYPE_REF]{ZInner2, , LB2$ZInner2;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE+ R_UNQUALIFIED + R_NON_RESTRICTED)+"}",
 		requestor.getResults());
 }
 
@@ -808,93 +916,176 @@ public void testCompletionMethodDeclaration() throws JavaModelException {
 }
 
 public void testCompletionMethodDeclaration2() throws JavaModelException {
-
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionMethodDeclaration2.java");
-
-	String str = cu.getSource();
-	String completeBehind = "eq";
-	int cursorLocation = str.indexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-
-	assertEquals(
-		"should have two completions", 
-		"element:eqFoo    completion:public int eqFoo(int a,Object b)    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+"\n" +
-		"element:equals    completion:public boolean equals(Object obj)    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE+ R_NON_RESTRICTED),
-		requestor.getResults());
+	ICompilationUnit superClass = null;
+	try {
+		superClass = getWorkingCopy(
+	            "/Completion/src/CompletionSuperClass.java",
+	            "public class CompletionSuperClass{\n" +
+	            "	public class Inner {}\n" +
+	            "	public int eqFoo(int a,Object b){\n" +
+	            "		return 1;\n" +
+	            "	}\n" +
+	            "}");
+		
+		this.wc = getWorkingCopy(
+	            "/Completion/src/CompletionMethodDeclaration2.java",
+	            "public class CompletionMethodDeclaration2 extends CompletionSuperClass {\n" +
+	            "	eq\n" +
+	            "}");
+	    
+	    
+	    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+	    String str = this.wc.getSource();
+	    String completeBehind = "eq";
+	    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+	    this.wc.codeComplete(cursorLocation, requestor, this.owner);
+	
+		assertResults(
+			"eq[POTENTIAL_METHOD_DECLARATION]{eq, LCompletionMethodDeclaration2;, ()V, eq, null, "+(R_DEFAULT + R_INTERESTING + R_NON_RESTRICTED)+"}\n" +
+			"eqFoo[METHOD_DECLARATION]{public int eqFoo(int a,Object b), LCompletionSuperClass;, (ILjava.lang.Object;)I, eqFoo, (a, b), "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+"}\n" +
+			"equals[METHOD_DECLARATION]{public boolean equals(Object obj), Ljava.lang.Object;, (Ljava.lang.Object;)Z, equals, (obj), "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE+ R_NON_RESTRICTED)+"}",
+			requestor.getResults());
+	} finally {
+		if(superClass != null) {
+			superClass.discardWorkingCopy();
+		}
+	}
 }
 
 /**
  * Completion should not propose declarations of method already locally implemented
  */
 public void testCompletionMethodDeclaration3() throws JavaModelException {
-
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionMethodDeclaration3.java");
-
-	String str = cu.getSource();
-	String completeBehind = "eq";
-	int cursorLocation = str.indexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-
-	assertEquals(
-		"should have one completion", 
-		"element:equals    completion:public boolean equals(Object obj)    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE+ R_NON_RESTRICTED),
-		requestor.getResults());
+	ICompilationUnit superClass = null;
+	try {
+		superClass = getWorkingCopy(
+	            "/Completion/src/CompletionSuperClass.java",
+	            "public class CompletionSuperClass{\n" +
+	            "	public class Inner {}\n" +
+	            "	public int eqFoo(int a,Object b){\n" +
+	            "		return 1;\n" +
+	            "	}\n" +
+	            "}");
+		
+		this.wc = getWorkingCopy(
+	            "/Completion/src/CompletionMethodDeclaration3.java",
+	            "public class CompletionMethodDeclaration3 extends CompletionSuperClass {\n" +
+	            "	eq\n" +
+	            "	\n" +
+	            "	public int eqFoo(int a,Object b){\n" +
+	            "		return 1;\n" +
+	            "	}\n" +
+	            "}");
+	    
+	    
+	    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+	    String str = this.wc.getSource();
+	    String completeBehind = "eq";
+	    int cursorLocation = str.indexOf(completeBehind) + completeBehind.length();
+	    this.wc.codeComplete(cursorLocation, requestor, this.owner);
+	
+		assertResults(
+			"eq[POTENTIAL_METHOD_DECLARATION]{eq, LCompletionMethodDeclaration3;, ()V, eq, null, "+(R_DEFAULT + R_INTERESTING + R_NON_RESTRICTED)+"}\n" +
+			"equals[METHOD_DECLARATION]{public boolean equals(Object obj), Ljava.lang.Object;, (Ljava.lang.Object;)Z, equals, (obj), "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE+ R_NON_RESTRICTED)+"}",
+			requestor.getResults());
+	} finally {
+		if(superClass != null) {
+			superClass.discardWorkingCopy();
+		}
+	}
 }
 
 
 public void testCompletionMethodDeclaration4() throws JavaModelException {
-
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionMethodDeclaration4.java");
-
-	String str = cu.getSource();
-	String completeBehind = "eq";
-	int cursorLocation = str.indexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-
-	assertEquals(
-		"should have one completion", 
-		"element:eqFoo    completion:public int eqFoo(int a,Object b)    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_ABSTRACT_METHOD + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+"\n"+
-		"element:equals    completion:public boolean equals(Object obj)    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE+ R_NON_RESTRICTED),
-		requestor.getResults());
+	ICompilationUnit superClass = null;
+	try {
+		superClass = getWorkingCopy(
+	            "/Completion/src/CompletionSuperInterface.java",
+	            "public interface CompletionSuperInterface{\n"+
+	            "	public int eqFoo(int a,Object b);\n"+
+	            "}");
+		
+		this.wc = getWorkingCopy(
+	            "/Completion/src/CompletionMethodDeclaration4.java",
+	            "public abstract class CompletionMethodDeclaration4 implements CompletionSuperInterface {\n"+
+	            "	eq\n"+
+	            "}");
+	    
+	    
+	    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+	    String str = this.wc.getSource();
+	    String completeBehind = "eq";
+	    int cursorLocation = str.indexOf(completeBehind) + completeBehind.length();
+	    this.wc.codeComplete(cursorLocation, requestor, this.owner);
+	
+		assertResults(
+			"eq[POTENTIAL_METHOD_DECLARATION]{eq, LCompletionMethodDeclaration4;, ()V, eq, null, "+(R_DEFAULT + R_INTERESTING + R_NON_RESTRICTED)+"}\n" +
+			"equals[METHOD_DECLARATION]{public boolean equals(Object obj), Ljava.lang.Object;, (Ljava.lang.Object;)Z, equals, (obj), "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+"}\n"+
+			"eqFoo[METHOD_DECLARATION]{public int eqFoo(int a,Object b), LCompletionSuperInterface;, (ILjava.lang.Object;)I, eqFoo, (a, b), "+(R_DEFAULT + R_INTERESTING + R_CASE + R_ABSTRACT_METHOD + R_NON_STATIC_OVERIDE+ R_NON_RESTRICTED)+"}",
+			requestor.getResults());
+	} finally {
+		if(superClass != null) {
+			superClass.discardWorkingCopy();
+		}
+	}
 }
 
 public void testCompletionMethodDeclaration5() throws JavaModelException {
-
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionMethodDeclaration5.java");
-
-	String str = cu.getSource();
-	String completeBehind = "new CompletionSuperClass() {";
-	int cursorLocation = str.indexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-
-	if(CompletionEngine.NO_TYPE_COMPLETION_ON_EMPTY_TOKEN) {
-		assertEquals(
-			"should have one completion", 
-			"element:clone    completion:protected Object clone() throws CloneNotSupportedException    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+"\n"+
-			"element:eqFoo    completion:public int eqFoo(int a,Object b)    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+"\n"+
-			"element:equals    completion:public boolean equals(Object obj)    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+"\n"+
-			"element:finalize    completion:protected void finalize() throws Throwable    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+"\n"+
-			"element:hashCode    completion:public int hashCode()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+"\n"+
-			"element:toString    completion:public String toString()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE+ R_NON_RESTRICTED),
-			requestor.getResults());
-	} else {
-		assertEquals(
-			"should have one completion", 
-			"element:CompletionMethodDeclaration5    completion:CompletionMethodDeclaration5    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n"+
-			"element:clone    completion:protected Object clone() throws CloneNotSupportedException    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+"\n"+
-			"element:eqFoo    completion:public int eqFoo(int a,Object b)    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+"\n"+
-			"element:equals    completion:public boolean equals(Object obj)    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+"\n"+
-			"element:finalize    completion:protected void finalize() throws Throwable    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+"\n"+
-			"element:hashCode    completion:public int hashCode()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+"\n"+
-			"element:toString    completion:public String toString()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE+ R_NON_RESTRICTED),
-			requestor.getResults());
+	ICompilationUnit superClass = null;
+	try {
+		superClass = getWorkingCopy(
+	            "/Completion/src/CompletionSuperClass.java",
+	            "public class CompletionSuperClass{\n" +
+	            "	public class Inner {}\n" +
+	            "	public int eqFoo(int a,Object b){\n" +
+	            "		return 1;\n" +
+	            "	}\n" +
+	            "}");
+		
+		this.wc = getWorkingCopy(
+	            "/Completion/src/CompletionMethodDeclaration5.java",
+	            "public class CompletionMethodDeclaration5 {\n" +
+	            "	public static void main(String[] args) {\n" +
+	            "		new CompletionSuperClass() {\n" +
+	            "	}\n" +
+	            "\n" +
+	            "}");
+	    
+	    
+	    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+	    String str = this.wc.getSource();
+	    String completeBehind = "new CompletionSuperClass() {";
+	    int cursorLocation = str.indexOf(completeBehind) + completeBehind.length();
+	    this.wc.codeComplete(cursorLocation, requestor, this.owner);
+	
+	    if(CompletionEngine.NO_TYPE_COMPLETION_ON_EMPTY_TOKEN) {
+			assertResults(
+				"[POTENTIAL_METHOD_DECLARATION]{, LCompletionSuperClass;, ()V, , null, "+(R_DEFAULT + R_INTERESTING + R_NON_RESTRICTED)+"}\n" +
+				"clone[METHOD_DECLARATION]{protected Object clone() throws CloneNotSupportedException, Ljava.lang.Object;, ()Ljava.lang.Object;, clone, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+"}\n"+
+				"eqFoo[METHOD_DECLARATION]{public int eqFoo(int a,Object b), LCompletionSuperClass;, (ILjava.lang.Object;)I, eqFoo, (a, b), "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+"}\n"+
+				"equals[METHOD_DECLARATION]{public boolean equals(Object obj), Ljava.lang.Object;, (Ljava.lang.Object;)Z, equals, (obj), "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+"}\n"+
+				"finalize[METHOD_DECLARATION]{protected void finalize() throws Throwable, Ljava.lang.Object;, ()V, finalize, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+"}\n"+
+				"hashCode[METHOD_DECLARATION]{public int hashCode(), Ljava.lang.Object;, ()I, hashCode, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+"}\n"+
+				"toString[METHOD_DECLARATION]{public String toString(), Ljava.lang.Object;, ()Ljava.lang.String;, toString, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE+ R_NON_RESTRICTED)+ "}",
+				requestor.getResults());
+		} else {
+			assertResults(
+				"[POTENTIAL_METHOD_DECLARATION]{, LCompletionSuperClass;, ()V, , null, "+(R_DEFAULT + R_INTERESTING + R_NON_RESTRICTED)+"}\n" +
+				"CompletionMethodDeclaration5[TYPE_REF]{CompletionMethodDeclaration5, , LCompletionMethodDeclaration5;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"}\n"+
+				"clone[METHOD_DECLARATION]{protected Object clone() throws CloneNotSupportedException, Ljava.lang.Object;, ()Ljava.lang.Object;, clone, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+"}\n"+
+				"eqFoo[METHOD_DECLARATION]{public int eqFoo(int a,Object b), LCompletionSuperClass;, (ILjava.lang.Object;)I, eqFoo, (a, b), "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+"}\n"+
+				"equals[METHOD_DECLARATION]{public boolean equals(Object obj), Ljava.lang.Object;, (Ljava.lang.Object;)Z, equals, (obj), "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+"}\n"+
+				"finalize[METHOD_DECLARATION]{protected void finalize() throws Throwable, Ljava.lang.Object;, ()V, finalize, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+"}\n"+
+				"hashCode[METHOD_DECLARATION]{public int hashCode(), Ljava.lang.Object;, ()I, hashCode, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+"}\n"+
+				"toString[METHOD_DECLARATION]{public String toString(), Ljava.lang.Object;, ()Ljava.lang.String;, toString, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE+ R_NON_RESTRICTED)+ "}",
+				requestor.getResults());
+		}
+	} finally {
+		if(superClass != null) {
+			superClass.discardWorkingCopy();
+		}
 	}
 }
-
 public void testCompletionMethodDeclaration6() throws JavaModelException {
 
 	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
@@ -984,11 +1175,11 @@ public void testCompletionMethodDeclaration11() throws JavaModelException {
 			"/Completion/src/test/CompletionMethodDeclaration11.java",
 			"package test;\n" +
 			"public class CompletionMethodDeclaration11 {\n" +
-			"  private void foo() {" +
-			"  }" +
-			"}" +
+			"  private void foo() {\n" +
+			"  }\n" +
+			"}\n" +
 			"class CompletionMethodDeclaration11_2 extends CompletionMethodDeclaration11 {\n" +
-			"  fo" +
+			"  fo\n" +
 			"}");
 	
 	
@@ -996,7 +1187,7 @@ public void testCompletionMethodDeclaration11() throws JavaModelException {
 	String str = this.wc.getSource();
 	String completeBehind = "fo";
 	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	this.wc.codeComplete(cursorLocation, requestor);
+	this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
 	assertResults(
 			"fo[POTENTIAL_METHOD_DECLARATION]{fo, Ltest.CompletionMethodDeclaration11_2;, ()V, fo, null, " + (R_DEFAULT + R_INTERESTING + R_NON_RESTRICTED) + "}",
@@ -1007,15 +1198,15 @@ public void testCompletionMethodDeclaration12() throws JavaModelException {
             "/Completion/src/test/CompletionMethodDeclaration12.java",
             "package test;\n" +
             "public class CompletionMethodDeclaration12 {\n" +
-            "  public void foo() {" +
-            "  }" +
-            "}" +
+            "  public void foo() {\n" +
+            "  }\n" +
+            "}\n" +
             "class CompletionMethodDeclaration12_2 extends CompletionMethodDeclaration12{\n" +
-            "  public final void foo() {" +
-            "  }" +
-            "}" +
+            "  public final void foo() {\n" +
+            "  }\n" +
+            "}\n" +
             "class CompletionMethodDeclaration12_3 extends CompletionMethodDeclaration12_2 {\n" +
-            "  fo" +
+            "  fo\n" +
             "}");
     
     
@@ -1023,7 +1214,7 @@ public void testCompletionMethodDeclaration12() throws JavaModelException {
     String str = this.wc.getSource();
     String completeBehind = "fo";
     int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-    this.wc.codeComplete(cursorLocation, requestor);
+    this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
     assertResults(
             "fo[POTENTIAL_METHOD_DECLARATION]{fo, Ltest.CompletionMethodDeclaration12_3;, ()V, fo, null, " + (R_DEFAULT + R_INTERESTING + R_NON_RESTRICTED) + "}",
@@ -1234,168 +1425,416 @@ public void testCompletionVariableNameUnresolvedType() throws JavaModelException
 
 
 public void testCompletionSameSuperClass() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionSameSuperClass.java");
+	this.wc = getWorkingCopy(
+            "/Completion/src/CompletionSameSuperClass.java",
+            "public class CompletionSameSuperClass extends A {\n" +
+            "	class Inner extends A {\n" +
+            "		void foo(int bar){\n" +
+            "			bar\n" +
+            "		}\n" +
+            "	}	\n" +
+            "}");
+    
+    
+    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+    String str = this.wc.getSource();
+    String completeBehind = "bar";
+    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+    this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
-	String str = cu.getSource();
-	String completeBehind = "bar";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-
-	assertEquals(
-		"should have five completions",
-		"element:bar    completion:CompletionSameSuperClass.this.bar    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_NON_RESTRICTED)+"\n"+
-		"element:bar    completion:CompletionSameSuperClass.this.bar()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_NON_RESTRICTED)+"\n"+
-		"element:bar    completion:bar    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n"+
-		"element:bar    completion:bar()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n"+
-		"element:bar    completion:this.bar    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME+ R_NON_RESTRICTED),
+	assertResults(
+		"bar[FIELD_REF]{CompletionSameSuperClass.this.bar, LA;, I, bar, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_NON_RESTRICTED)+"}\n"+
+		"bar[FIELD_REF]{this.bar, LA;, I, bar, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_NON_RESTRICTED)+"}\n"+
+		"bar[METHOD_REF]{CompletionSameSuperClass.this.bar(), LA;, ()V, bar, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_NON_RESTRICTED)+"}\n"+
+		"bar[LOCAL_VARIABLE_REF]{bar, null, I, bar, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_UNQUALIFIED + R_NON_RESTRICTED)+"}\n"+
+		"bar[METHOD_REF]{bar(), LA;, ()V, bar, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_UNQUALIFIED + R_NON_RESTRICTED)+"}",
 		requestor.getResults());
 }
 
 public void testCompletionSuperType() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionSuperType.java");
-
-	String str = cu.getSource();
-	String completeBehind = "CompletionSuperClass.";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-
-	assertEquals(
-		"element:CompletionSuperClass.Inner    completion:Inner    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_CLASS+ R_NON_RESTRICTED),
-		requestor.getResults());
+	ICompilationUnit superClass = null;
+	try {
+		superClass = getWorkingCopy(
+	            "/Completion/src/CompletionSuperClass.java",
+	            "public class CompletionSuperClass{\n" +
+	            "	public class Inner {}\n" +
+	            "	public int eqFoo(int a,Object b){\n" +
+	            "		return 1;\n" +
+	            "	}\n" +
+	            "}");
+		
+		this.wc = getWorkingCopy(
+	            "/Completion/src/CompletionSuperType.java",
+	            "public class CompletionSuperType extends CompletionSuperClass.");
+	    
+	    
+	    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+	    String str = this.wc.getSource();
+	    String completeBehind = "CompletionSuperClass.";
+	    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+	    this.wc.codeComplete(cursorLocation, requestor, this.owner);
+	
+		assertResults(
+			"CompletionSuperClass.Inner[TYPE_REF]{Inner, , LCompletionSuperClass$Inner;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_CLASS+ R_NON_RESTRICTED)+"}",
+			requestor.getResults());
+	} finally {
+		if(superClass != null) {
+			superClass.discardWorkingCopy();
+		}
+	}
 }
 
 public void testCompletionSuperType2() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionSuperType2.java");
-
-	String str = cu.getSource();
-	String completeBehind = "CompletionSuper";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-
-	assertEquals(
-		"element:CompletionSuperClass    completion:CompletionSuperClass    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_CLASS + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:CompletionSuperClass2    completion:CompletionSuperClass2    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_CLASS + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:CompletionSuperInterface    completion:CompletionSuperInterface    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:CompletionSuperInterface2    completion:CompletionSuperInterface2    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:CompletionSuperType    completion:CompletionSuperType    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_CLASS + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:CompletionSuperType3    completion:CompletionSuperType3    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_CLASS + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:CompletionSuperType4    completion:CompletionSuperType4    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_CLASS + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:CompletionSuperType5    completion:CompletionSuperType5    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_CLASS + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:CompletionSuperType6    completion:CompletionSuperType6    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:CompletionSuperType7    completion:CompletionSuperType7    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:CompletionSuperType8    completion:CompletionSuperType8    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED+ R_NON_RESTRICTED),
-		requestor.getResults());
+	ICompilationUnit superClass = null;
+	ICompilationUnit superClass2 = null;
+	ICompilationUnit superInterface = null;
+	ICompilationUnit superInterface2 = null;
+	try {
+		superClass = getWorkingCopy(
+	            "/Completion/src/CompletionSuperClass.java",
+	            "public class CompletionSuperClass{\n" +
+	            "	public class Inner {}\n" +
+	            "	public int eqFoo(int a,Object b){\n" +
+	            "		return 1;\n" +
+	            "	}\n" +
+	            "}");
+		
+		superClass2 = getWorkingCopy(
+	            "/Completion/src/CompletionSuperClass2.java",
+	            "public class CompletionSuperClass2 {\n" +
+	            "	public class InnerClass {}\n" +
+	            "	public interface InnerInterface {}\n" +
+	            "}");
+		
+		superInterface = getWorkingCopy(
+	            "/Completion/src/CompletionSuperInterface.java",
+	            "public interface CompletionSuperInterface{\n" +
+	            "	public int eqFoo(int a,Object b);\n" +
+	            "}");
+		
+		superInterface2 = getWorkingCopy(
+	            "/Completion/src/CompletionSuperInterface2.java",
+	            "public interface CompletionSuperInterface2 {\n" +
+	            "	public class InnerClass {}\n" +
+	            "	public interface InnerInterface {}\n" +
+	            "}");
+		
+		this.wc = getWorkingCopy(
+	            "/Completion/src/CompletionSuperType2.java",
+	            "public class CompletionSuperType2 extends CompletionSuper");
+	    
+	    
+	    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+	    String str = this.wc.getSource();
+	    String completeBehind = "CompletionSuper";
+	    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+	    this.wc.codeComplete(cursorLocation, requestor, this.owner);
+	
+	    if(CompletionEngine.PROPOSE_MEMBER_TYPES) {
+			assertResults(
+				"CompletionSuperClass[TYPE_REF]{CompletionSuperClass, , LCompletionSuperClass;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_CLASS + R_UNQUALIFIED + R_NON_RESTRICTED)+"}\n" +
+				"CompletionSuperClass2[TYPE_REF]{CompletionSuperClass2, , LCompletionSuperClass2;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_CLASS + R_UNQUALIFIED + R_NON_RESTRICTED)+"}",
+				requestor.getResults());
+	    } else {
+	    	assertResults(
+				"CompletionSuperInterface[TYPE_REF]{CompletionSuperInterface, , LCompletionSuperInterface;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"}\n" +
+				"CompletionSuperInterface2[TYPE_REF]{CompletionSuperInterface2, , LCompletionSuperInterface2;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"}\n" +
+				"CompletionSuperClass[TYPE_REF]{CompletionSuperClass, , LCompletionSuperClass;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_CLASS + R_UNQUALIFIED + R_NON_RESTRICTED)+"}\n" +
+				"CompletionSuperClass2[TYPE_REF]{CompletionSuperClass2, , LCompletionSuperClass2;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_CLASS + R_UNQUALIFIED + R_NON_RESTRICTED)+"}",
+				requestor.getResults());
+	    }
+	} finally {
+		if(superClass != null) {
+			superClass.discardWorkingCopy();
+		}
+		if(superClass2 != null) {
+			superClass2.discardWorkingCopy();
+		}
+		if(superInterface != null) {
+			superInterface.discardWorkingCopy();
+		}
+		if(superInterface2 != null) {
+			superInterface2.discardWorkingCopy();
+		}
+	}
 }
 
 public void testCompletionSuperType3() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionSuperType3.java");
-
-	String str = cu.getSource();
-	String completeBehind = "CompletionSuper";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-
-	assertEquals(
-		"element:CompletionSuperClass    completion:CompletionSuperClass    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:CompletionSuperClass2    completion:CompletionSuperClass2    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:CompletionSuperInterface    completion:CompletionSuperInterface    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_INTERFACE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:CompletionSuperInterface2    completion:CompletionSuperInterface2    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_INTERFACE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:CompletionSuperType    completion:CompletionSuperType    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:CompletionSuperType2    completion:CompletionSuperType2    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:CompletionSuperType4    completion:CompletionSuperType4    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:CompletionSuperType5    completion:CompletionSuperType5    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:CompletionSuperType6    completion:CompletionSuperType6    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_INTERFACE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:CompletionSuperType7    completion:CompletionSuperType7    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_INTERFACE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:CompletionSuperType8    completion:CompletionSuperType8    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_INTERFACE + R_UNQUALIFIED+ R_NON_RESTRICTED),
-		requestor.getResults());
+	ICompilationUnit superClass = null;
+	ICompilationUnit superClass2 = null;
+	ICompilationUnit superInterface = null;
+	ICompilationUnit superInterface2 = null;
+	try {
+		superClass = getWorkingCopy(
+	            "/Completion/src/CompletionSuperClass.java",
+	            "public class CompletionSuperClass{\n" +
+	            "	public class Inner {}\n" +
+	            "	public int eqFoo(int a,Object b){\n" +
+	            "		return 1;\n" +
+	            "	}\n" +
+	            "}");
+		
+		superClass2 = getWorkingCopy(
+	            "/Completion/src/CompletionSuperClass2.java",
+	            "public class CompletionSuperClass2 {\n" +
+	            "	public class InnerClass {}\n" +
+	            "	public interface InnerInterface {}\n" +
+	            "}");
+		
+		superInterface = getWorkingCopy(
+	            "/Completion/src/CompletionSuperInterface.java",
+	            "public interface CompletionSuperInterface{\n" +
+	            "	public int eqFoo(int a,Object b);\n" +
+	            "}");
+		
+		superInterface2 = getWorkingCopy(
+	            "/Completion/src/CompletionSuperInterface2.java",
+	            "public interface CompletionSuperInterface2 {\n" +
+	            "	public class InnerClass {}\n" +
+	            "	public interface InnerInterface {}\n" +
+	            "}");
+		
+		this.wc = getWorkingCopy(
+	            "/Completion/src/CompletionSuperType3.java",
+	            "public class CompletionSuperType3 implements CompletionSuper");
+	    
+	    
+	    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+	    String str = this.wc.getSource();
+	    String completeBehind = "CompletionSuper";
+	    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+	    this.wc.codeComplete(cursorLocation, requestor, this.owner);
+	
+	    if(CompletionEngine.PROPOSE_MEMBER_TYPES) {
+			assertResults(
+				"CompletionSuperInterface[TYPE_REF]{CompletionSuperInterface, , LCompletionSuperInterface;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_INTERFACE + R_UNQUALIFIED + R_NON_RESTRICTED)+"}\n" +
+				"CompletionSuperInterface2[TYPE_REF]{CompletionSuperInterface2, , LCompletionSuperInterface2;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_INTERFACE + R_UNQUALIFIED + R_NON_RESTRICTED)+"}",
+				requestor.getResults());
+	    } else {
+	    	assertResults(
+				"CompletionSuperClass[TYPE_REF]{CompletionSuperClass, , LCompletionSuperClass;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"}\n" +
+				"CompletionSuperClass2[TYPE_REF]{CompletionSuperClass2, , LCompletionSuperClass2;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"}\n" +
+				"CompletionSuperInterface[TYPE_REF]{CompletionSuperInterface, , LCompletionSuperInterface;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_INTERFACE + R_UNQUALIFIED + R_NON_RESTRICTED)+"}\n" +
+				"CompletionSuperInterface2[TYPE_REF]{CompletionSuperInterface2, , LCompletionSuperInterface2;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_INTERFACE + R_UNQUALIFIED + R_NON_RESTRICTED)+"}",
+				requestor.getResults());
+	    }
+	} finally {
+		if(superClass != null) {
+			superClass.discardWorkingCopy();
+		}
+		if(superClass2 != null) {
+			superClass2.discardWorkingCopy();
+		}
+		if(superInterface != null) {
+			superInterface.discardWorkingCopy();
+		}
+		if(superInterface2 != null) {
+			superInterface2.discardWorkingCopy();
+		}
+	}
 }
 
 public void testCompletionSuperType4() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionSuperType4.java");
-
-	String str = cu.getSource();
-	String completeBehind = "CompletionSuperClass2.Inner";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-
-	assertEquals(
-		"element:CompletionSuperClass2.InnerClass    completion:InnerClass    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_CLASS + R_NON_RESTRICTED)+"\n" +
-		"element:CompletionSuperClass2.InnerInterface    completion:InnerInterface    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE+ R_NON_RESTRICTED),
-		requestor.getResults());
+	ICompilationUnit superClass2 = null;
+	try {
+		superClass2 = getWorkingCopy(
+	            "/Completion/src/CompletionSuperClass2.java",
+	            "public class CompletionSuperClass2 {\n" +
+	            "	public class InnerClass {}\n" +
+	            "	public interface InnerInterface {}\n" +
+	            "}");
+		
+		this.wc = getWorkingCopy(
+	            "/Completion/src/CompletionSuperType4.java",
+	            "public class CompletionSuperType4 extends CompletionSuperClass2.Inner");
+	    
+	    
+	    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+	    String str = this.wc.getSource();
+	    String completeBehind = "CompletionSuperClass2.Inner";
+	    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+	    this.wc.codeComplete(cursorLocation, requestor, this.owner);
+	
+		assertResults(
+			"CompletionSuperClass2.InnerInterface[TYPE_REF]{InnerInterface, , LCompletionSuperClass2$InnerInterface;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE+ R_NON_RESTRICTED)+ "}\n"+
+			"CompletionSuperClass2.InnerClass[TYPE_REF]{InnerClass, , LCompletionSuperClass2$InnerClass;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_CLASS + R_NON_RESTRICTED)+"}",
+			requestor.getResults());
+	} finally {
+		if(superClass2 != null) {
+			superClass2.discardWorkingCopy();
+		}
+	}
 }
 
 public void testCompletionSuperType5() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionSuperType5.java");
-
-	String str = cu.getSource();
-	String completeBehind = "CompletionSuperInterface2.Inner";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-
-	assertEquals(
-		"element:CompletionSuperInterface2.InnerClass    completion:InnerClass    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+"\n" +
-		"element:CompletionSuperInterface2.InnerInterface    completion:InnerInterface    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_INTERFACE+ R_NON_RESTRICTED),
-		requestor.getResults());
+	ICompilationUnit superInterface2 = null;
+	try {
+		superInterface2 = getWorkingCopy(
+	            "/Completion/src/CompletionSuperInterface2.java",
+	            "public interface CompletionSuperInterface2 {\n" +
+	            "	public class InnerClass {}\n" +
+	            "	public interface InnerInterface {}\n" +
+	            "}");
+		
+		this.wc = getWorkingCopy(
+	            "/Completion/src/CompletionSuperType5.java",
+	            "public class CompletionSuperType5 implements CompletionSuperInterface2.Inner");
+	    
+	    
+	    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+	    String str = this.wc.getSource();
+	    String completeBehind = "CompletionSuperInterface2.Inner";
+	    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+	    this.wc.codeComplete(cursorLocation, requestor, this.owner);
+	
+		assertResults(
+			"CompletionSuperInterface2.InnerClass[TYPE_REF]{InnerClass, , LCompletionSuperInterface2$InnerClass;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+"}\n" +
+			"CompletionSuperInterface2.InnerInterface[TYPE_REF]{InnerInterface, , LCompletionSuperInterface2$InnerInterface;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_INTERFACE+ R_NON_RESTRICTED)+"}",
+			requestor.getResults());
+	} finally {
+		if(superInterface2 != null) {
+			superInterface2.discardWorkingCopy();
+		}
+	}
 }
 
 public void testCompletionSuperType6() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionSuperType6.java");
-
-	String str = cu.getSource();
-	String completeBehind = "CompletionSuper";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-
-	assertEquals(
-		"element:CompletionSuperClass    completion:CompletionSuperClass    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:CompletionSuperClass2    completion:CompletionSuperClass2    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:CompletionSuperInterface    completion:CompletionSuperInterface    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_INTERFACE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:CompletionSuperInterface2    completion:CompletionSuperInterface2    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_INTERFACE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:CompletionSuperType    completion:CompletionSuperType    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:CompletionSuperType2    completion:CompletionSuperType2    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:CompletionSuperType3    completion:CompletionSuperType3    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:CompletionSuperType4    completion:CompletionSuperType4    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:CompletionSuperType5    completion:CompletionSuperType5    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:CompletionSuperType7    completion:CompletionSuperType7    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_INTERFACE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:CompletionSuperType8    completion:CompletionSuperType8    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_INTERFACE + R_UNQUALIFIED+ R_NON_RESTRICTED),
-		requestor.getResults());
+	ICompilationUnit superClass = null;
+	ICompilationUnit superClass2 = null;
+	ICompilationUnit superInterface = null;
+	ICompilationUnit superInterface2 = null;
+	try {
+		superClass = getWorkingCopy(
+	            "/Completion/src/CompletionSuperClass.java",
+	            "public class CompletionSuperClass{\n" +
+	            "	public class Inner {}\n" +
+	            "	public int eqFoo(int a,Object b){\n" +
+	            "		return 1;\n" +
+	            "	}\n" +
+	            "}");
+		
+		superClass2 = getWorkingCopy(
+	            "/Completion/src/CompletionSuperClass2.java",
+	            "public class CompletionSuperClass2 {\n" +
+	            "	public class InnerClass {}\n" +
+	            "	public interface InnerInterface {}\n" +
+	            "}");
+		
+		superInterface = getWorkingCopy(
+	            "/Completion/src/CompletionSuperInterface.java",
+	            "public interface CompletionSuperInterface{\n" +
+	            "	public int eqFoo(int a,Object b);\n" +
+	            "}");
+		
+		superInterface2 = getWorkingCopy(
+	            "/Completion/src/CompletionSuperInterface2.java",
+	            "public interface CompletionSuperInterface2 {\n" +
+	            "	public class InnerClass {}\n" +
+	            "	public interface InnerInterface {}\n" +
+	            "}");
+		
+		this.wc = getWorkingCopy(
+	            "/Completion/src/CompletionSuperType6.java",
+	            "public interface CompletionSuperType6 extends CompletionSuper");
+	    
+	    
+	    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+	    String str = this.wc.getSource();
+	    String completeBehind = "CompletionSuper";
+	    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+	    this.wc.codeComplete(cursorLocation, requestor, this.owner);
+	
+	    if(CompletionEngine.PROPOSE_MEMBER_TYPES) {
+			assertResults(
+				"CompletionSuperInterface[TYPE_REF]{CompletionSuperInterface, , LCompletionSuperInterface;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_INTERFACE + R_NON_RESTRICTED)+"}\n" +
+				"CompletionSuperInterface2[TYPE_REF]{CompletionSuperInterface2, , LCompletionSuperInterface2;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_INTERFACE+ R_NON_RESTRICTED)+"}",
+				requestor.getResults());
+	    } else {
+	    	assertResults(
+				"CompletionSuperClass[TYPE_REF]{CompletionSuperClass, , LCompletionSuperClass;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"}\n" +
+				"CompletionSuperClass2[TYPE_REF]{CompletionSuperClass2, , LCompletionSuperClass2;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"}\n" +
+				"CompletionSuperInterface[TYPE_REF]{CompletionSuperInterface, , LCompletionSuperInterface;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_INTERFACE + R_NON_RESTRICTED)+"}\n" +
+				"CompletionSuperInterface2[TYPE_REF]{CompletionSuperInterface2, , LCompletionSuperInterface2;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_INTERFACE+ R_NON_RESTRICTED)+"}",
+				requestor.getResults());
+	    }
+	} finally {
+		if(superClass != null) {
+			superClass.discardWorkingCopy();
+		}
+		if(superClass2 != null) {
+			superClass2.discardWorkingCopy();
+		}
+		if(superInterface != null) {
+			superInterface.discardWorkingCopy();
+		}
+		if(superInterface2 != null) {
+			superInterface2.discardWorkingCopy();
+		}
+	}
 }
 
 public void testCompletionSuperType7() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionSuperType7.java");
-
-	String str = cu.getSource();
-	String completeBehind = "CompletionSuperClass2.Inner";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-
-	assertEquals(
-		"element:CompletionSuperClass2.InnerClass    completion:InnerClass    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+"\n" +
-		"element:CompletionSuperClass2.InnerInterface    completion:InnerInterface    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_INTERFACE+ R_NON_RESTRICTED),
-		requestor.getResults());
+	ICompilationUnit superClass2 = null;
+	try {
+		superClass2 = getWorkingCopy(
+	            "/Completion/src/CompletionSuperClass2.java",
+	            "public class CompletionSuperClass2 {\n" +
+	            "	public class InnerClass {}\n" +
+	            "	public interface InnerInterface {}\n" +
+	            "}");
+		
+		this.wc = getWorkingCopy(
+	            "/Completion/src/CompletionSuperType7.java",
+	            "public interface CompletionSuperType7 extends CompletionSuperClass2.Inner");
+	    
+	    
+	    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+	    String str = this.wc.getSource();
+	    String completeBehind = "CompletionSuperClass2.Inner";
+	    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+	    this.wc.codeComplete(cursorLocation, requestor, this.owner);
+	
+		assertResults(
+			"CompletionSuperClass2.InnerClass[TYPE_REF]{InnerClass, , LCompletionSuperClass2$InnerClass;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+"}\n" +
+			"CompletionSuperClass2.InnerInterface[TYPE_REF]{InnerInterface, , LCompletionSuperClass2$InnerInterface;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_INTERFACE+ R_NON_RESTRICTED)+"}",
+			requestor.getResults());
+	} finally {
+		if(superClass2 != null) {
+			superClass2.discardWorkingCopy();
+		}
+	}
 }
 
 public void testCompletionSuperType8() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionSuperType8.java");
-
-	String str = cu.getSource();
-	String completeBehind = "CompletionSuperInterface2.Inner";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-
-	assertEquals(
-		"element:CompletionSuperInterface2.InnerClass    completion:InnerClass    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+"\n" +
-		"element:CompletionSuperInterface2.InnerInterface    completion:InnerInterface    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_INTERFACE+ R_NON_RESTRICTED),
-		requestor.getResults());
+	ICompilationUnit superInterface2 = null;
+	try {
+		superInterface2 = getWorkingCopy(
+	            "/Completion/src/CompletionSuperInterface2.java",
+	            "public interface CompletionSuperInterface2 {\n" +
+	            "	public class InnerClass {}\n" +
+	            "	public interface InnerInterface {}\n" +
+	            "}");
+		
+		this.wc = getWorkingCopy(
+	            "/Completion/src/CompletionSuperType8.java",
+	            "public interface CompletionSuperType8 extends CompletionSuperInterface2.Inner");
+	    
+	    
+	    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+	    String str = this.wc.getSource();
+	    String completeBehind = "CompletionSuperInterface2.Inner";
+	    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+	    this.wc.codeComplete(cursorLocation, requestor, this.owner);
+	
+		assertResults(
+			"CompletionSuperInterface2.InnerClass[TYPE_REF]{InnerClass, , LCompletionSuperInterface2$InnerClass;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+"}\n" +
+			"CompletionSuperInterface2.InnerInterface[TYPE_REF]{InnerInterface, , LCompletionSuperInterface2$InnerInterface;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_INTERFACE+ R_NON_RESTRICTED)+"}",
+			requestor.getResults());
+	} finally {
+		if(superInterface2 != null) {
+			superInterface2.discardWorkingCopy();
+		}
+	}
 }
 
 public void testCompletionMethodThrowsClause() throws JavaModelException {
@@ -1733,39 +2172,77 @@ public void testCompletionAllocationExpressionIsParent1() throws JavaModelExcept
 }
 
 public void testCompletionAllocationExpressionIsParent2() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionAllocationExpressionIsParent2.java");
-
-	String str = cu.getSource();
-	String completeBehind = "zz";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
+	this.wc = getWorkingCopy(
+            "/Completion/src/CompletionAllocationExpressionIsParent2.java",
+            "public class CompletionAllocationExpressionIsParent2 {\n" +
+            "	public class Inner {\n" +
+            "		public Inner(long i, long j){super();}\n" +
+            "		public Inner(Object i, Object j){super();}\n" +
+            "		\n" +
+            "	}\n" +
+            "	\n" +
+            "	long zzlong;\n" +
+            "	int zzint;\n" +
+            "	double zzdouble;\n" +
+            "	boolean zzboolean;\n" +
+            "	Object zzObject;\n" +
+            "	\n" +
+            "	void foo() {\n" +
+            "		this.new Inner(1, zz\n" +
+            "	}\n" +
+            "}");
+    
+    
+    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+    String str = this.wc.getSource();
+    String completeBehind = "zz";
+    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+    this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
-	assertEquals(
-		"element:zzObject    completion:zzObject    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:zzboolean    completion:zzboolean    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:zzdouble    completion:zzdouble    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:zzint    completion:zzint    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXPECTED_TYPE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:zzlong    completion:zzlong    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_EXPECTED_TYPE + R_UNQUALIFIED+ R_NON_RESTRICTED),
-		requestor.getResults());
+    assertResults(
+            "zzObject[FIELD_REF]{zzObject, LCompletionAllocationExpressionIsParent2;, Ljava.lang.Object;, zzObject, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"}\n" +
+            "zzboolean[FIELD_REF]{zzboolean, LCompletionAllocationExpressionIsParent2;, Z, zzboolean, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"}\n" +
+            "zzdouble[FIELD_REF]{zzdouble, LCompletionAllocationExpressionIsParent2;, D, zzdouble, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"}\n" +
+            "zzint[FIELD_REF]{zzint, LCompletionAllocationExpressionIsParent2;, I, zzint, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXPECTED_TYPE + R_UNQUALIFIED + R_NON_RESTRICTED)+"}\n" +
+            "zzlong[FIELD_REF]{zzlong, LCompletionAllocationExpressionIsParent2;, J, zzlong, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_EXPECTED_TYPE + R_UNQUALIFIED+ R_NON_RESTRICTED)+"}",
+            requestor.getResults());
 }
 
 public void testCompletionAllocationExpressionIsParent3() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionAllocationExpressionIsParent3.java");
-
-	String str = cu.getSource();
-	String completeBehind = "zz";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
+	this.wc = getWorkingCopy(
+            "/Completion/src/CompletionAllocationExpressionIsParent3.java",
+            "public class CompletionAllocationExpressionIsParent3 {\n" +
+            "	public class Inner {\n" +
+            "		public Inner(long i, long j){super();}\n" +
+            "		public Inner(Object i, Object j){super();}\n" +
+            "		\n" +
+            "	}\n" +
+            "	\n" +
+            "	long zzlong;\n" +
+            "	int zzint;\n" +
+            "	double zzdouble;\n" +
+            "	boolean zzboolean;\n" +
+            "	Object zzObject;\n" +
+            "	\n" +
+            "	void foo() {\n" +
+            "		new CompletionAllocationExpressionIsParent3().new Inner(1, zz\n" +
+            "	}\n" +
+            "}");
+    
+    
+    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+    String str = this.wc.getSource();
+    String completeBehind = "zz";
+    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+    this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
-	assertEquals(
-		"element:zzObject    completion:zzObject    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:zzboolean    completion:zzboolean    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:zzdouble    completion:zzdouble    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:zzint    completion:zzint    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXPECTED_TYPE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:zzlong    completion:zzlong    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_EXPECTED_TYPE + R_UNQUALIFIED+ R_NON_RESTRICTED),
-		requestor.getResults());
+    assertResults(
+            "zzObject[FIELD_REF]{zzObject, LCompletionAllocationExpressionIsParent3;, Ljava.lang.Object;, zzObject, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"}\n" +
+            "zzboolean[FIELD_REF]{zzboolean, LCompletionAllocationExpressionIsParent3;, Z, zzboolean, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"}\n" +
+            "zzdouble[FIELD_REF]{zzdouble, LCompletionAllocationExpressionIsParent3;, D, zzdouble, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"}\n" +
+            "zzint[FIELD_REF]{zzint, LCompletionAllocationExpressionIsParent3;, I, zzint, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXPECTED_TYPE + R_UNQUALIFIED + R_NON_RESTRICTED)+"}\n" +
+            "zzlong[FIELD_REF]{zzlong, LCompletionAllocationExpressionIsParent3;, J, zzlong, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_EXPECTED_TYPE + R_UNQUALIFIED+ R_NON_RESTRICTED)+"}",
+            requestor.getResults());
 }
 
 public void testCompletionAllocationExpressionIsParent4() throws JavaModelException {
@@ -1805,21 +2282,42 @@ public void testCompletionAllocationExpressionIsParent5() throws JavaModelExcept
 }
 
 public void testCompletionAllocationExpressionIsParent6() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionAllocationExpressionIsParent6.java");
-
-	String str = cu.getSource();
-	String completeBehind = "zz";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
+	this.wc = getWorkingCopy(
+            "/Completion/src/CompletionAllocationExpressionIsParent6.java",
+            "public class CompletionAllocationExpressionIsParent6 {\n" +
+            "	\n" +
+            "	long zzlong;\n" +
+            "	int zzint;\n" +
+            "	double zzdouble;\n" +
+            "	boolean zzboolean;\n" +
+            "	Object zzObject;\n" +
+            "	\n" +
+            "	void foo() {\n" +
+            "		new CompletionAllocation_ERROR_ExpressionIsParent6Plus().new Inner(1, zz\n" +
+            "	}\n" +
+            "}\n" +
+            "class CompletionAllocationExpressionIsParent6Plus {\n" +
+            "	public class Inner {\n" +
+            "		public Inner(long i, long j){\n" +
+            "			\n" +
+            "		}	\n" +
+            "	}	\n" +
+            "}");
+    
+    
+    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+    String str = this.wc.getSource();
+    String completeBehind = "zz";
+    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+    this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
-	assertEquals(
-		"element:zzObject    completion:zzObject    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:zzboolean    completion:zzboolean    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:zzdouble    completion:zzdouble    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:zzint    completion:zzint    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:zzlong    completion:zzlong    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED+ R_NON_RESTRICTED),
-		requestor.getResults());
+    assertResults(
+            "zzObject[FIELD_REF]{zzObject, LCompletionAllocationExpressionIsParent6;, Ljava.lang.Object;, zzObject, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"}\n" +
+            "zzboolean[FIELD_REF]{zzboolean, LCompletionAllocationExpressionIsParent6;, Z, zzboolean, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"}\n" +
+            "zzdouble[FIELD_REF]{zzdouble, LCompletionAllocationExpressionIsParent6;, D, zzdouble, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"}\n" +
+            "zzint[FIELD_REF]{zzint, LCompletionAllocationExpressionIsParent6;, I, zzint, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"}\n" +
+            "zzlong[FIELD_REF]{zzlong, LCompletionAllocationExpressionIsParent6;, J, zzlong, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED+ R_NON_RESTRICTED)+"}",
+            requestor.getResults());
 }
 
 public void testCompletionFieldInitializer1() throws JavaModelException {
@@ -2143,38 +2641,38 @@ public void testCompletionEmptyTypeName2() throws JavaModelException {
 
 	if(CompletionEngine.NO_TYPE_COMPLETION_ON_EMPTY_TOKEN) {
 		assertEquals(
-		"element:a    completion:a    relevance:"+(R_DEFAULT + R_CASE + R_EXACT_EXPECTED_TYPE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:clone    completion:clone()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:equals    completion:equals()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:finalize    completion:finalize()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +		
-		"element:foo    completion:foo()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:getClass    completion:getClass()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:hashCode    completion:hashCode()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:notify    completion:notify()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:notifyAll    completion:notifyAll()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:toString    completion:toString()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:wait    completion:wait()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:wait    completion:wait()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:wait    completion:wait()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED+ R_NON_RESTRICTED),
-		requestor.getResults());
+			"element:a    completion:a    relevance:"+(R_DEFAULT + R_CASE + R_EXACT_EXPECTED_TYPE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
+			"element:clone    completion:clone()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
+			"element:equals    completion:equals()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
+			"element:finalize    completion:finalize()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +		
+			"element:foo    completion:foo()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
+			"element:getClass    completion:getClass()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
+			"element:hashCode    completion:hashCode()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
+			"element:notify    completion:notify()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
+			"element:notifyAll    completion:notifyAll()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
+			"element:toString    completion:toString()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
+			"element:wait    completion:wait()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
+			"element:wait    completion:wait()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
+			"element:wait    completion:wait()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED+ R_NON_RESTRICTED),
+			requestor.getResults());
 	} else {
 		assertEquals(
-		"element:A    completion:A    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_EXPECTED_TYPE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:CompletionEmptyTypeName2    completion:CompletionEmptyTypeName2    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:a    completion:a    relevance:"+(R_DEFAULT + R_CASE + R_EXACT_EXPECTED_TYPE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:clone    completion:clone()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:equals    completion:equals()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:finalize    completion:finalize()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +		
-		"element:foo    completion:foo()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:getClass    completion:getClass()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:hashCode    completion:hashCode()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:notify    completion:notify()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:notifyAll    completion:notifyAll()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:toString    completion:toString()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:wait    completion:wait()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:wait    completion:wait()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-		"element:wait    completion:wait()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED+ R_NON_RESTRICTED),
-		requestor.getResults());
+			"element:A    completion:A    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_EXPECTED_TYPE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
+			"element:CompletionEmptyTypeName2    completion:CompletionEmptyTypeName2    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
+			"element:a    completion:a    relevance:"+(R_DEFAULT + R_CASE + R_EXACT_EXPECTED_TYPE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
+			"element:clone    completion:clone()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
+			"element:equals    completion:equals()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
+			"element:finalize    completion:finalize()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +		
+			"element:foo    completion:foo()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
+			"element:getClass    completion:getClass()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
+			"element:hashCode    completion:hashCode()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
+			"element:notify    completion:notify()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
+			"element:notifyAll    completion:notifyAll()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
+			"element:toString    completion:toString()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
+			"element:wait    completion:wait()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
+			"element:wait    completion:wait()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
+			"element:wait    completion:wait()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED+ R_NON_RESTRICTED),
+			requestor.getResults());
 	}
 }
 /*
@@ -2231,36 +2729,76 @@ public void testCompletionEmptyTypeName3() throws JavaModelException {
 * http://dev.eclipse.org/bugs/show_bug.cgi?id=25578
 */
 public void testCompletionAbstractMethodRelevance1() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionAbstractMethodRelevance1.java");
-
-	String str = cu.getSource();
-	String completeBehind = "foo";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-
-	assertEquals(
-		"element:foo1    completion:public void foo1()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+"\n" +
-		"element:foo2    completion:public void foo2()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_ABSTRACT_METHOD + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+"\n" +
-		"element:foo3    completion:public void foo3()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE+ R_NON_RESTRICTED),
-		requestor.getResults());
+	ICompilationUnit superClass = null;
+	try {
+		superClass = getWorkingCopy(
+	            "/Completion/src/CompletionAbstractSuperClass.java",
+	            "public abstract class CompletionAbstractSuperClass {\n"+
+	            "	public void foo1(){}\n"+
+	            "	public abstract void foo2();\n"+
+	            "	public void foo3(){}\n"+
+	            "}");
+		
+		this.wc = getWorkingCopy(
+	            "/Completion/src/CompletionAbstractMethodRelevance1.java",
+	            "public class CompletionAbstractMethodRelevance1 extends CompletionAbstractSuperClass {\n"+
+	            "	foo\n"+
+	            "}");
+	    
+	    
+	    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+	    String str = this.wc.getSource();
+	    String completeBehind = "foo";
+	    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+	    this.wc.codeComplete(cursorLocation, requestor, this.owner);
+	
+		assertResults(
+			"foo[POTENTIAL_METHOD_DECLARATION]{foo, LCompletionAbstractMethodRelevance1;, ()V, foo, null, "+(R_DEFAULT + R_INTERESTING + R_NON_RESTRICTED)+"}\n" +
+			"foo1[METHOD_DECLARATION]{public void foo1(), LCompletionAbstractSuperClass;, ()V, foo1, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+"}\n" +
+			"foo3[METHOD_DECLARATION]{public void foo3(), LCompletionAbstractSuperClass;, ()V, foo3, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+"}\n" +
+			"foo2[METHOD_DECLARATION]{public void foo2(), LCompletionAbstractSuperClass;, ()V, foo2, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_ABSTRACT_METHOD + R_NON_STATIC_OVERIDE+ R_NON_RESTRICTED)+"}",
+			requestor.getResults());
+	} finally {
+		if(superClass != null) {
+			superClass.discardWorkingCopy();
+		}
+	}
 }
 /*
 * http://dev.eclipse.org/bugs/show_bug.cgi?id=25578
 */
 public void testCompletionAbstractMethodRelevance2() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionAbstractMethodRelevance2.java");
-
-	String str = cu.getSource();
-	String completeBehind = "eq";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-
-	assertEquals(
-		"element:eqFoo    completion:public int eqFoo(int a,Object b)    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_ABSTRACT_METHOD + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+"\n" +
-		"element:equals    completion:public boolean equals(Object obj)    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE+ R_NON_RESTRICTED),
-		requestor.getResults());
+	ICompilationUnit superClass = null;
+	try {
+		superClass = getWorkingCopy(
+	            "/Completion/src/CompletionSuperInterface.java",
+	            "public interface CompletionSuperInterface{\n"+
+	            "	public int eqFoo(int a,Object b);\n"+
+	            "}");
+		
+		this.wc = getWorkingCopy(
+	            "/Completion/src/CompletionAbstractMethodRelevance2.java",
+	            "public class CompletionAbstractMethodRelevance2 implements CompletionSuperInterface {\n"+
+	            "	eq\n"+
+	            "}");
+	    
+	    
+	    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+	    String str = this.wc.getSource();
+	    String completeBehind = "eq";
+	    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+	    this.wc.codeComplete(cursorLocation, requestor, this.owner);
+	
+		assertResults(
+			"eq[POTENTIAL_METHOD_DECLARATION]{eq, LCompletionAbstractMethodRelevance2;, ()V, eq, null, "+(R_DEFAULT + R_INTERESTING + R_NON_RESTRICTED)+"}\n" +
+			"equals[METHOD_DECLARATION]{public boolean equals(Object obj), Ljava.lang.Object;, (Ljava.lang.Object;)Z, equals, (obj), "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE + R_NON_RESTRICTED)+"}\n" +
+			"eqFoo[METHOD_DECLARATION]{public int eqFoo(int a,Object b), LCompletionSuperInterface;, (ILjava.lang.Object;)I, eqFoo, (a, b), "+(R_DEFAULT + R_INTERESTING + R_CASE + R_ABSTRACT_METHOD + R_NON_STATIC_OVERIDE+ R_NON_RESTRICTED)+"}",
+			requestor.getResults());
+	} finally {
+		if(superClass != null) {
+			superClass.discardWorkingCopy();
+		}
+	}
 }
 /*
 * http://dev.eclipse.org/bugs/show_bug.cgi?id=25591
@@ -2334,16 +2872,25 @@ public void testCompletionExpectedTypeIsNotValid() throws JavaModelException {
 * http://dev.eclipse.org/bugs/show_bug.cgi?id=25815
 */
 public void testCompletionMemberType() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionMemberType.java");
-
-	String str = cu.getSource();
-	String completeBehind = "new Y";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
+	this.wc = getWorkingCopy(
+            "/Completion/src/CompletionMemberType.java",
+            "public class CompletionMemberType {\n"+
+            "	public class Y {\n"+
+            "		public void foo(){\n"+
+            "			Y var = new Y\n"+
+            "		}\n"+
+            "	}\n"+
+            "}");
+    
+    
+    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+    String str = this.wc.getSource();
+    String completeBehind = "new Y";
+    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+    this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
-	assertEquals(
-		"element:CompletionMemberType.Y    completion:Y    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_EXPECTED_TYPE + R_EXACT_NAME+ R_NON_RESTRICTED),
+    assertResults(
+		"CompletionMemberType.Y[TYPE_REF]{Y, , LCompletionMemberType$Y;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_EXPECTED_TYPE + R_EXACT_NAME+ R_UNQUALIFIED + R_NON_RESTRICTED)+"}",
 		requestor.getResults());
 }
 /*
@@ -2402,24 +2949,33 @@ public void testCompletionOnStaticMember2() throws JavaModelException {
 * http://dev.eclipse.org/bugs/show_bug.cgi?id=26677
 */
 public void testCompletionQualifiedExpectedType() throws JavaModelException {
-		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-		ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionQualifiedExpectedType.java");
-
-		String str = cu.getSource();
-		String completeBehind = "new ";
-		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-		cu.codeComplete(cursorLocation, requestor);
+	this.wc = getWorkingCopy(
+            "/Completion/src/test/CompletionQualifiedExpectedType.java",
+            "import pack1.PX;\n"+
+            "\n"+
+            "public class CompletionQualifiedExpectedType {\n"+
+            "	void foo() {\n"+
+            "		pack2.PX var = new \n"+
+            "	}\n"+
+            "}");
+    
+    
+    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+    String str = this.wc.getSource();
+    String completeBehind = "new ";
+    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+    this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
-		if(CompletionEngine.NO_TYPE_COMPLETION_ON_EMPTY_TOKEN) {
-			assertEquals(
-				"",
+    if(CompletionEngine.NO_TYPE_COMPLETION_ON_EMPTY_TOKEN) {
+    	assertResults(
+	            "",
 				requestor.getResults());
-		} else {
-			assertEquals(
-				"element:CompletionQualifiedExpectedType    completion:CompletionQualifiedExpectedType    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n" +
-				"element:PX    completion:pack2.PX    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_EXPECTED_TYPE+ R_NON_RESTRICTED),
+    } else {
+	    assertResults(
+	            "CompletionQualifiedExpectedType[TYPE_REF]{CompletionQualifiedExpectedType, test, Ltest.CompletionQualifiedExpectedType;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"}\n" +
+				"PX[TYPE_REF]{pack2.PX, pack2, Lpack2.PX;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_EXPECTED_TYPE+ R_NON_RESTRICTED)+ "}",
 				requestor.getResults());
-		}
+    }
 }
 public void testCompletionUnaryOperator1() throws JavaModelException {
 		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
@@ -5227,18 +5783,27 @@ public void testCompletionKeywordThis14() throws JavaModelException {
  * bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=42402
  */
 public void testCompletionKeywordThis15() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src2", "", "CompletionKeywordThis15.java");
-
-	String str = cu.getSource();
-	String completeBehind = "CompletionKeywordThis15.";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
+	this.wc = getWorkingCopy(
+            "/Completion/src2/CompletionKeywordThis15.java",
+            "public class CompletionKeywordThis15 {\n" +
+            "	public class InnerClass {\n" +
+            "		public InnerClass() {\n" +
+            "			CompletionKeywordThis15 a = CompletionKeywordThis15.this;\n" +
+            "		}\n" +
+            "	}\n" +
+            "}");
+    
+    
+    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+    String str = this.wc.getSource();
+    String completeBehind = "CompletionKeywordThis15.";
+    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+    this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
-	assertEquals(
-			"element:CompletionKeywordThis15.InnerClass    completion:InnerClass    relevance:" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "\n" +
-			"element:class    completion:class    relevance:" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "\n"+
-			"element:this    completion:this    relevance:" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "",
+	assertResults(
+			"CompletionKeywordThis15.InnerClass[TYPE_REF]{InnerClass, , LCompletionKeywordThis15$InnerClass;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
+			"class[FIELD_REF]{class, null, Ljava.lang.Class;, class, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n"+
+			"this[KEYWORD]{this, null, null, this, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}",
 		requestor.getResults());
 }
 public void testCompletionKeywordSuper7() throws JavaModelException {
@@ -7635,10 +8200,10 @@ public void testCompletionKeywordTrue5() throws JavaModelException {
 			"/Completion/src/test/CompletionKeywordTrue5.java",
 			"package test;\n" +
 			"public class CompletionKeywordTrue5 {\n" +
-			"  public void foo() {" +
-			"    boolean var;" +
-			"    var = tr" +
-			"  }" +
+			"  public void foo() {\n" +
+			"    boolean var;\n" +
+			"    var = tr\n" +
+			"  }\n" +
 			"}");
 	
 	
@@ -7646,7 +8211,7 @@ public void testCompletionKeywordTrue5() throws JavaModelException {
 	String str = this.wc.getSource();
 	String completeBehind = "tr";
 	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	this.wc.codeComplete(cursorLocation, requestor);
+	this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
 	assertResults(
 			"true[KEYWORD]{true, null, null, true, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_EXACT_EXPECTED_TYPE + R_NON_RESTRICTED) + "}",
@@ -7658,10 +8223,10 @@ public void testCompletionKeywordTrue6() throws JavaModelException {
 			"/Completion/src/test/CompletionKeywordTrue6.java",
 			"package test;\n" +
 			"public class CompletionKeywordTrue6 {\n" +
-			"  public void foo() {" +
-			"    boolean var;" +
-			"    var = " +
-			"  }" +
+			"  public void foo() {\n" +
+			"    boolean var;\n" +
+			"    var = \n" +
+			"  }\n" +
 			"}");
 	
 	
@@ -7669,7 +8234,7 @@ public void testCompletionKeywordTrue6() throws JavaModelException {
 	String str = this.wc.getSource();
 	String completeBehind = "var = ";
 	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	this.wc.codeComplete(cursorLocation, requestor);
+	this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
 	if(CompletionEngine.NO_TYPE_COMPLETION_ON_EMPTY_TOKEN) {
 		assertResults(
@@ -7802,37 +8367,55 @@ public void testCompletionKeywordInstanceof6() throws JavaModelException {
 			requestor.getResults());
 }
 public void testCompletionMemberType2() throws JavaModelException {
-		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-		ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionMemberType2.java");
-
-		String str = cu.getSource();
-		String completeBehind = "new ";
-		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-		cu.codeComplete(cursorLocation, requestor);
+	this.wc = getWorkingCopy(
+            "/Completion/src/test/CompletionMemberType2.java",
+            "public class CompletionMemberType2 {\n"+
+            "	public class MemberException extends Exception {\n"+
+            "	}\n"+
+            "	void foo() {\n"+
+            "		throw new \n"+
+            "	}\n"+
+            "}");
+    
+    
+    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+    String str = this.wc.getSource();
+    String completeBehind = "new ";
+    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+    this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
-		if(CompletionEngine.NO_TYPE_COMPLETION_ON_EMPTY_TOKEN) {
-			assertEquals(
-				"",
-				requestor.getResults());
-		} else {
-			assertEquals(
-				"element:CompletionMemberType2    completion:CompletionMemberType2    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n"+
-				"element:CompletionMemberType2.MemberException    completion:MemberException    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXCEPTION+ R_NON_RESTRICTED),
-				requestor.getResults());
-		}
+	if(CompletionEngine.NO_TYPE_COMPLETION_ON_EMPTY_TOKEN) {
+		assertResults(
+			"",
+			requestor.getResults());
+	} else {
+		assertResults(
+			"CompletionMemberType2[TYPE_REF]{CompletionMemberType2, test, Ltest.CompletionMemberType2;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"}\n"+
+			"CompletionMemberType2.MemberException[TYPE_REF]{MemberException, test, Ltest.CompletionMemberType2$MemberException;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXCEPTION+ R_NON_RESTRICTED)+"}",
+			requestor.getResults());
+	}
 }
 public void testCompletionMemberType3() throws JavaModelException {
-		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-		ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionMemberType3.java");
-
-		String str = cu.getSource();
-		String completeBehind = "new MemberE";
-		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-		cu.codeComplete(cursorLocation, requestor);
+	this.wc = getWorkingCopy(
+            "/Completion/src/test/CompletionArrayClone.java",
+            "public class CompletionMemberType3 {\n"+
+            "	public class MemberException extends Exception {\n"+
+            "	}\n"+
+            "	void foo() {\n"+
+            "		throw new MemberE\n"+
+            "	}\n"+
+            "}");
+    
+    
+    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+    String str = this.wc.getSource();
+    String completeBehind = "new MemberE";
+    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+    this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
-		assertEquals(
-			"element:CompletionMemberType3.MemberException    completion:MemberException    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXCEPTION+ R_NON_RESTRICTED),
-			requestor.getResults());
+	assertResults(
+		"CompletionMemberType3.MemberException[TYPE_REF]{MemberException, test, Ltest.CompletionMemberType3$MemberException;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXCEPTION+ R_UNQUALIFIED + R_NON_RESTRICTED) +"}",
+		requestor.getResults());
 }
 public void testCompletionAfterCase1() throws JavaModelException {
 		CompletionTestsRequestor requestor = new CompletionTestsRequestor();
@@ -8059,16 +8642,25 @@ public void testCompletionType1() throws JavaModelException {
 		requestor.getResults());
 }
 public void testCompletionQualifiedAllocationType1() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionQualifiedAllocationType1.java");
-
-	String str = cu.getSource();
-	String completeBehind = "YYY";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
+	this.wc = getWorkingCopy(
+            "/Completion/src/CompletionQualifiedAllocationType1.java",
+            "public class CompletionQualifiedAllocationType1 {\n"+
+            "	public class YYY {\n"+
+            "	}\n"+
+            "	void foo(){\n"+
+            "		this.new YYY\n"+
+            "	}\n"+
+            "}");
+    
+    
+    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+    String str = this.wc.getSource();
+    String completeBehind = "YYY";
+    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+    this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
-	assertEquals(
-		"element:CompletionQualifiedAllocationType1.YYY    completion:YYY    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME+ R_NON_RESTRICTED),
+    assertResults(
+		"CompletionQualifiedAllocationType1.YYY[TYPE_REF]{YYY, , LCompletionQualifiedAllocationType1$YYY;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME+ R_UNQUALIFIED + R_NON_RESTRICTED)+"}",
 		requestor.getResults());
 }
 public void testCompletionClassLiteralAfterAnonymousType1() throws JavaModelException {
@@ -8098,56 +8690,110 @@ public void testCompletionArraysCloneMethod() throws JavaModelException {
 		requestor.getResults());
 }
 public void testCompletionAbstractMethod1() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionAbstractMethod1.java");
-
-	String str = cu.getSource();
-	String completeBehind = "fo";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
+	this.wc = getWorkingCopy(
+            "/Completion/src/CompletionAbstractMethod1.java",
+            "public class CompletionAbstractMethod1 {\n" +
+            "	abstract class A {\n" +
+            "		abstract void foo();\n" +
+            "	}\n" +
+            "	class B extends A {\n" +
+            "		void foo{} {}\n" +
+            "		void bar() {\n" +
+            "			super.fo\n" +
+            "		}\n" +
+            "	}\n" +
+            "}");
+    
+    
+    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+    String str = this.wc.getSource();
+    String completeBehind = "fo";
+    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+    this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
-	assertEquals(
-		"",
-		requestor.getResults());
+    assertResults(
+            "",
+            requestor.getResults());
 }
 public void testCompletionAbstractMethod2() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionAbstractMethod2.java");
-
-	String str = cu.getSource();
-	String completeBehind = "fo";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
+	this.wc = getWorkingCopy(
+            "/Completion/src/CompletionAbstractMethod2.java",
+            "public class CompletionAbstractMethod2 {\n" +
+            "	abstract class A {\n" +
+            "		abstract void foo();\n" +
+            "	}\n" +
+            "	class B extends A {\n" +
+            "		void foo{} {}\n" +
+            "		void bar() {\n" +
+            "			this.fo\n" +
+            "		}\n" +
+            "	}\n" +
+            "}");
+    
+    
+    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+    String str = this.wc.getSource();
+    String completeBehind = "fo";
+    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+    this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
-	assertEquals(
-		"element:foo    completion:foo()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC+ R_NON_RESTRICTED),
-		requestor.getResults());
+    assertResults(
+           "foo[METHOD_REF]{foo(), LCompletionAbstractMethod2$A;, ()V, foo, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC+ R_NON_RESTRICTED) + "}",
+           requestor.getResults());
 }
 public void testCompletionAbstractMethod3() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionAbstractMethod3.java");
-
-	String str = cu.getSource();
-	String completeBehind = "fo";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
+	this.wc = getWorkingCopy(
+            "/Completion/src/CompletionAbstractMethod3.java",
+            "public class CompletionAbstractMethod3 {\n" +
+            "	abstract class A {\n" +
+            "		abstract void foo();\n" +
+            "	}\n" +
+            "	class B extends A {\n" +
+            "		void bar() {\n" +
+            "			this.fo\n" +
+            "		}\n" +
+            "	}\n" +
+            "}");
+    
+    
+    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+    String str = this.wc.getSource();
+    String completeBehind = "fo";
+    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+    this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
-	assertEquals(
-		"element:foo    completion:foo()    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC+ R_NON_RESTRICTED),
-		requestor.getResults());
+    assertResults(
+           "foo[METHOD_REF]{foo(), LCompletionAbstractMethod3$A;, ()V, foo, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC+ R_NON_RESTRICTED)+"}",
+           requestor.getResults());
 }
 public void testCompletionAbstractMethod4() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionAbstractMethod4.java");
-
-	String str = cu.getSource();
-	String completeBehind = "fo";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
+	this.wc = getWorkingCopy(
+            "/Completion/src/CompletionAbstractMethod4.java",
+            "public class CompletionAbstractMethod1 {\n" +
+            "	class A {\n" +
+            "		void foo(){}\n" +
+            "	}\n" +
+            "	abstract class B extends A {\n" +
+            "		abstract void foo();\n" +
+            "	}\n" +
+            "	class C extends B {\n" +
+            "		void foo{} {}\n" +
+            "		void bar() {\n" +
+            "			super.fo\n" +
+            "		}\n" +
+            "	}\n" +
+            "}");
+    
+    
+    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+    String str = this.wc.getSource();
+    String completeBehind = "fo";
+    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+    this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
-	assertEquals(
-		"",
-		requestor.getResults());
+    assertResults(
+           "",
+           requestor.getResults());
 }
 public void testCompletionStaticMethodDeclaration1() throws JavaModelException {
 	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
@@ -8164,30 +8810,46 @@ public void testCompletionStaticMethodDeclaration1() throws JavaModelException {
 			requestor.getResults());
 }
 public void testCompletionStaticMethodDeclaration2() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionStaticMethodDeclaration2.java");
-
-	String str = cu.getSource();
-	String completeBehind = "foo";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
+	this.wc = getWorkingCopy(
+            "/Completion/src/CompletionStaticMethodDeclaration2.java",
+            "public class CompletionStaticMethodDeclaration2 {\n" +
+            "	class Inner1 extends TypeWithAMethodAndAStaticMethod {\n" +
+            "		foo\n" +
+            "	}\n" +
+            "}");
+    
+    
+    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+    String str = this.wc.getSource();
+    String completeBehind = "foo";
+    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+    this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
-	assertEquals(
-			"element:foo0    completion:public void foo0()    relevance:" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE+ R_NON_RESTRICTED),
+	assertResults(
+			"foo[POTENTIAL_METHOD_DECLARATION]{foo, LCompletionStaticMethodDeclaration2$Inner1;, ()V, foo, null, " + (R_DEFAULT + R_INTERESTING + R_NON_RESTRICTED) + "}\n" +
+			"foo0[METHOD_DECLARATION]{public void foo0(), LTypeWithAMethodAndAStaticMethod;, ()V, foo0, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE+ R_NON_RESTRICTED) + "}",
 			requestor.getResults());
 }
 public void testCompletionStaticMethodDeclaration3() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu= getCompilationUnit("Completion", "src", "", "CompletionStaticMethodDeclaration3.java");
-
-	String str = cu.getSource();
-	String completeBehind = "foo";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
+	this.wc = getWorkingCopy(
+            "/Completion/src/CompletionStaticMethodDeclaration3.java",
+            "public class CompletionStaticMethodDeclaration3 {\n" +
+            "	static class Inner1 extends TypeWithAMethodAndAStaticMethod {\n" +
+            "		foo\n" +
+            "	}\n" +
+            "}");
+    
+    
+    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+    String str = this.wc.getSource();
+    String completeBehind = "foo";
+    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+    this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
-	assertEquals(
-			"element:foo    completion:public static void foo()    relevance:" + (R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_NON_RESTRICTED) + "\n" +
-			"element:foo0    completion:public void foo0()    relevance:" + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE+ R_NON_RESTRICTED),
+	assertResults(
+			"foo[POTENTIAL_METHOD_DECLARATION]{foo, LCompletionStaticMethodDeclaration3$Inner1;, ()V, foo, null, " + (R_DEFAULT + R_INTERESTING + R_NON_RESTRICTED) + "}\n" +
+			"foo0[METHOD_DECLARATION]{public void foo0(), LTypeWithAMethodAndAStaticMethod;, ()V, foo0, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC_OVERIDE+ R_NON_RESTRICTED) + "}\n" +
+			"foo[METHOD_DECLARATION]{public static void foo(), LTypeWithAMethodAndAStaticMethod;, ()V, foo, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_NON_RESTRICTED) + "}",
 			requestor.getResults());
 }
 public void testCompletionStaticMethodDeclaration4() throws JavaModelException {
@@ -8536,7 +9198,7 @@ public void testCompletionInsideGenericClass() throws JavaModelException {
 			"/Completion/src/test/CompletionInsideGenericClass.java",
 			"package test;\n" +
 			"public class CompletionInsideGenericClass <CompletionInsideGenericClassParameter> {\n" +
-			"  CompletionInsideGenericClas" +
+			"  CompletionInsideGenericClas\n" +
 			"}");
 	
 	
@@ -8544,7 +9206,7 @@ public void testCompletionInsideGenericClass() throws JavaModelException {
 	String str = this.wc.getSource();
 	String completeBehind = "CompletionInsideGenericClas";
 	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	this.wc.codeComplete(cursorLocation, requestor);
+	this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
 	assertResults(
 			"CompletionInsideGenericClas[POTENTIAL_METHOD_DECLARATION]{CompletionInsideGenericClas, Ltest.CompletionInsideGenericClass;, ()V, CompletionInsideGenericClas, null, " + (R_DEFAULT + R_INTERESTING + R_NON_RESTRICTED) + "}\n" +
@@ -8558,8 +9220,8 @@ public void testCompletionInsideExtends1() throws JavaModelException {
 			"/Completion/src/test/CompletionInsideExtends1.java",
 			"package test;\n" +
 			"public class CompletionInsideExtends1 extends  {\n" +
-			"  public class CompletionInsideExtends1Inner {}" +
-			"}" +
+			"  public class CompletionInsideExtends1Inner {}\n" +
+			"}\n" +
 			"class CompletionInsideExtends1TopLevel {\n" +
 			"}");
 	
@@ -8568,7 +9230,7 @@ public void testCompletionInsideExtends1() throws JavaModelException {
 	String str = this.wc.getSource();
 	String completeBehind = "extends ";
 	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	this.wc.codeComplete(cursorLocation, requestor);
+	this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
 	if(CompletionEngine.NO_TYPE_COMPLETION_ON_EMPTY_TOKEN) {
 		assertResults(
@@ -8587,8 +9249,8 @@ public void testCompletionInsideExtends2() throws JavaModelException {
 			"/Completion/src/test/CompletionInsideExtends2.java",
 			"package test;\n" +
 			"public class CompletionInsideExtends2 extends CompletionInsideExtends {\n" +
-			"  public class CompletionInsideExtends2Inner {}" +
-			"}" +
+			"  public class CompletionInsideExtends2Inner {}\n" +
+			"}\n" +
 			"class CompletionInsideExtends2TopLevel {\n" +
 			"}");
 	
@@ -8597,7 +9259,7 @@ public void testCompletionInsideExtends2() throws JavaModelException {
 	String str = this.wc.getSource();
 	String completeBehind = "extends CompletionInsideExtends";
 	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	this.wc.codeComplete(cursorLocation, requestor);
+	this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
 	assertResults(
 			"CompletionInsideExtends2TopLevel[TYPE_REF]{CompletionInsideExtends2TopLevel, test, Ltest.CompletionInsideExtends2TopLevel;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CLASS + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}",
@@ -8609,11 +9271,11 @@ public void testCompletionInsideExtends3() throws JavaModelException {
 			"/Completion/src/test/CompletionInsideExtends3.java",
 			"package test;\n" +
 			"public class CompletionInsideExtends3 {\n" +
-			"  public class CompletionInsideExtends3Inner extends {" +
-			"    public class CompletionInsideExtends3InnerInner {" +
-			"    }" +
-			"  }" +
-			"}" +
+			"  public class CompletionInsideExtends3Inner extends {\n" +
+			"    public class CompletionInsideExtends3InnerInner {\n" +
+			"    }\n" +
+			"  }\n" +
+			"}\n" +
 			"class CompletionInsideExtends3TopLevel {\n" +
 			"}");
 	
@@ -8622,7 +9284,7 @@ public void testCompletionInsideExtends3() throws JavaModelException {
 	String str = this.wc.getSource();
 	String completeBehind = "extends ";
 	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	this.wc.codeComplete(cursorLocation, requestor);
+	this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
 	if(CompletionEngine.NO_TYPE_COMPLETION_ON_EMPTY_TOKEN) {
 		assertResults(
@@ -8641,11 +9303,11 @@ public void testCompletionInsideExtends4() throws JavaModelException {
 			"/Completion/src/test/CompletionInsideExtends4.java",
 			"package test;\n" +
 			"public class CompletionInsideExtends4 {\n" +
-			"  public class CompletionInsideExtends4Inner extends CompletionInsideExtends{" +
-			"    public class CompletionInsideExtends4InnerInner {" +
-			"    }" +
-			"  }" +
-			"}" +
+			"  public class CompletionInsideExtends4Inner extends CompletionInsideExtends{\n" +
+			"    public class CompletionInsideExtends4InnerInner {\n" +
+			"    }\n" +
+			"  }\n" +
+			"\n}" +
 			"class CompletionInsideExtends4TopLevel {\n" +
 			"}");
 	
@@ -8654,7 +9316,7 @@ public void testCompletionInsideExtends4() throws JavaModelException {
 	String str = this.wc.getSource();
 	String completeBehind = "extends CompletionInsideExtends";
 	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	this.wc.codeComplete(cursorLocation, requestor);
+	this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
 	assertResults(
 			"CompletionInsideExtends4[TYPE_REF]{CompletionInsideExtends4, test, Ltest.CompletionInsideExtends4;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CLASS + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}\n" +
@@ -8667,13 +9329,13 @@ public void testCompletionInsideExtends5() throws JavaModelException {
 			"/Completion/src/test/CompletionInsideExtends5.java",
 			"package test;\n" +
 			"public class CompletionInsideExtends5 {\n" +
-			"  void foo() {" +
-			"    public class CompletionInsideExtends5Inner extends {" +
-			"      public class CompletionInsideExtends5InnerInner {" +
-			"      }" +
-			"    }" +
-			"  }" +
-			"}" +
+			"  void foo() {\n" +
+			"    public class CompletionInsideExtends5Inner extends {\n" +
+			"      public class CompletionInsideExtends5InnerInner {\n" +
+			"      }\n" +
+			"    }\n" +
+			"  }\n" +
+			"}\n" +
 			"class CompletionInsideExtends5TopLevel {\n" +
 			"}");
 	
@@ -8682,7 +9344,7 @@ public void testCompletionInsideExtends5() throws JavaModelException {
 	String str = this.wc.getSource();
 	String completeBehind = "extends ";
 	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	this.wc.codeComplete(cursorLocation, requestor);
+	this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
 	if(CompletionEngine.NO_TYPE_COMPLETION_ON_EMPTY_TOKEN) {
 		assertResults(
@@ -8701,13 +9363,13 @@ public void testCompletionInsideExtends6() throws JavaModelException {
 			"/Completion/src/test/CompletionInsideExtends6.java",
 			"package test;\n" +
 			"public class CompletionInsideExtends6 {\n" +
-			"  void foo() {" +
-			"    public class CompletionInsideExtends6Inner extends CompletionInsideExtends {" +
-			"      public class CompletionInsideExtends6InnerInner {" +
-			"      }" +
-			"    }" +
-			"  }" +
-			"}" +
+			"  void foo() {\n" +
+			"    public class CompletionInsideExtends6Inner extends CompletionInsideExtends {\n" +
+			"      public class CompletionInsideExtends6InnerInner {\n" +
+			"      }\n" +
+			"    }\n" +
+			"  }\n" +
+			"}\n" +
 			"class CompletionInsideExtends6TopLevel {\n" +
 			"}");
 	
@@ -8716,7 +9378,7 @@ public void testCompletionInsideExtends6() throws JavaModelException {
 	String str = this.wc.getSource();
 	String completeBehind = "extends CompletionInsideExtends";
 	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	this.wc.codeComplete(cursorLocation, requestor);
+	this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
 	assertResults(
 			"CompletionInsideExtends6[TYPE_REF]{CompletionInsideExtends6, test, Ltest.CompletionInsideExtends6;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CLASS + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}\n" +
@@ -8729,8 +9391,8 @@ public void testCompletionInsideExtends7() throws JavaModelException {
 			"/Completion/src/test/CompletionInsideExtends7.java",
 			"package test;\n" +
 			"public interface CompletionInsideExtends7 extends  {\n" +
-			"  public interface CompletionInsideExtends7Inner {}" +
-			"}" +
+			"  public interface CompletionInsideExtends7Inner {}\n" +
+			"}\n" +
 			"interface CompletionInsideExtends7TopLevel {\n" +
 			"}");
 	
@@ -8739,7 +9401,7 @@ public void testCompletionInsideExtends7() throws JavaModelException {
 	String str = this.wc.getSource();
 	String completeBehind = "extends ";
 	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	this.wc.codeComplete(cursorLocation, requestor);
+	this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
 	if(CompletionEngine.NO_TYPE_COMPLETION_ON_EMPTY_TOKEN) {
 		assertResults(
@@ -8757,8 +9419,8 @@ public void testCompletionInsideExtends8() throws JavaModelException {
 			"/Completion/src/test/CompletionInsideExtends8.java",
 			"package test;\n" +
 			"public interface CompletionInsideExtends8 extends CompletionInsideExtends {\n" +
-			"  public interface CompletionInsideExtends8Inner {}" +
-			"}" +
+			"  public interface CompletionInsideExtends8Inner {}\n" +
+			"}\n" +
 			"interface CompletionInsideExtends8TopLevel {\n" +
 			"}");
 	
@@ -8767,7 +9429,7 @@ public void testCompletionInsideExtends8() throws JavaModelException {
 	String str = this.wc.getSource();
 	String completeBehind = "extends CompletionInsideExtends";
 	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	this.wc.codeComplete(cursorLocation, requestor);
+	this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
 	assertResults(
 			"CompletionInsideExtends8TopLevel[TYPE_REF]{CompletionInsideExtends8TopLevel, test, Ltest.CompletionInsideExtends8TopLevel;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CLASS + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}",
@@ -8779,11 +9441,11 @@ public void testCompletionInsideExtends9() throws JavaModelException {
 			"/Completion/src/test/CompletionInsideExtends9.java",
 			"package test;\n" +
 			"public interface CompletionInsideExtends9 {\n" +
-			"  public interface CompletionInsideExtends9Inner extends {" +
-			"    public interface CompletionInsideExtends9InnerInner {" +
-			"    }" +
-			"  }" +
-			"}" +
+			"  public interface CompletionInsideExtends9Inner extends {\n" +
+			"    public interface CompletionInsideExtends9InnerInner {\n" +
+			"    }\n" +
+			"  }\n" +
+			"}\n" +
 			"interface CompletionInsideExtends9TopLevel {\n" +
 			"}");
 	
@@ -8792,7 +9454,7 @@ public void testCompletionInsideExtends9() throws JavaModelException {
 	String str = this.wc.getSource();
 	String completeBehind = "extends ";
 	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	this.wc.codeComplete(cursorLocation, requestor);
+	this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
 	if(CompletionEngine.NO_TYPE_COMPLETION_ON_EMPTY_TOKEN) {
 		assertResults(
@@ -8811,11 +9473,11 @@ public void testCompletionInsideExtends10() throws JavaModelException {
 			"/Completion/src/test/CompletionInsideExtends10.java",
 			"package test;\n" +
 			"public interface CompletionInsideExtends10 {\n" +
-			"  public interface CompletionInsideExtends10Inner extends CompletionInsideExtends{" +
-			"    public interface CompletionInsideExtends10InnerInner {" +
-			"    }" +
-			"  }" +
-			"}" +
+			"  public interface CompletionInsideExtends10Inner extends CompletionInsideExtends{\n" +
+			"    public interface CompletionInsideExtends10InnerInner {\n" +
+			"    }\n" +
+			"  }\n" +
+			"}\n" +
 			"interface CompletionInsideExtends10TopLevel {\n" +
 			"}");
 	
@@ -8824,12 +9486,20 @@ public void testCompletionInsideExtends10() throws JavaModelException {
 	String str = this.wc.getSource();
 	String completeBehind = "extends CompletionInsideExtends";
 	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	this.wc.codeComplete(cursorLocation, requestor);
+	this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
-	assertResults(
-			"CompletionInsideExtends10[TYPE_REF]{CompletionInsideExtends10, test, Ltest.CompletionInsideExtends10;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CLASS + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}\n" +
-			"CompletionInsideExtends10TopLevel[TYPE_REF]{CompletionInsideExtends10TopLevel, test, Ltest.CompletionInsideExtends10TopLevel;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CLASS + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}",
-			requestor.getResults());
+	if(CompletionEngine.PROPOSE_MEMBER_TYPES) {
+		assertResults(
+				"CompletionInsideExtends10.CompletionInsideExtends10Inner.CompletionInsideExtends10InnerInner[TYPE_REF]{test.CompletionInsideExtends10.CompletionInsideExtends10Inner.CompletionInsideExtends10InnerInner, test, Ltest.CompletionInsideExtends10$CompletionInsideExtends10Inner$CompletionInsideExtends10InnerInner;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CLASS + R_CASE + R_NON_RESTRICTED) + "}\n" +
+				"CompletionInsideExtends10[TYPE_REF]{CompletionInsideExtends10, test, Ltest.CompletionInsideExtends10;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CLASS + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}\n" +
+				"CompletionInsideExtends10TopLevel[TYPE_REF]{CompletionInsideExtends10TopLevel, test, Ltest.CompletionInsideExtends10TopLevel;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CLASS + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}",
+				requestor.getResults());
+	} else {
+		assertResults(
+				"CompletionInsideExtends10[TYPE_REF]{CompletionInsideExtends10, test, Ltest.CompletionInsideExtends10;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CLASS + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}\n" +
+				"CompletionInsideExtends10TopLevel[TYPE_REF]{CompletionInsideExtends10TopLevel, test, Ltest.CompletionInsideExtends10TopLevel;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CLASS + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}",
+				requestor.getResults());
+	}
 }
 //https://bugs.eclipse.org/bugs/show_bug.cgi?id=78151
 public void testCompletionInsideExtends11() throws JavaModelException {
@@ -8837,9 +9507,9 @@ public void testCompletionInsideExtends11() throws JavaModelException {
 			"/Completion/src/test/CompletionInsideExtends11.java",
 			"package test;\n" +
 			"public class CompletionInsideExtends11 implements {\n" +
-			"  public class CompletionInsideExtends11Inner {" +
-			"  }" +
-			"}" +
+			"  public class CompletionInsideExtends11Inner {\n" +
+			"  }\n" +
+			"}\n" +
 			"class CompletionInsideExtends11TopLevel {\n" +
 			"}");
 	
@@ -8848,7 +9518,7 @@ public void testCompletionInsideExtends11() throws JavaModelException {
 	String str = this.wc.getSource();
 	String completeBehind = "implements ";
 	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	this.wc.codeComplete(cursorLocation, requestor);
+	this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
 	if(CompletionEngine.NO_TYPE_COMPLETION_ON_EMPTY_TOKEN) {
 		assertResults(
@@ -8866,9 +9536,9 @@ public void testCompletionInsideExtends12() throws JavaModelException {
 			"/Completion/src/test/CompletionInsideExtends12.java",
 			"package test;\n" +
 			"public class CompletionInsideExtends12 implements CompletionInsideExtends {\n" +
-			"  public class CompletionInsideExtends12Inner {" +
-			"  }" +
-			"}" +
+			"  public class CompletionInsideExtends12Inner {\n" +
+			"  }\n" +
+			"}\n" +
 			"class CompletionInsideExtends12TopLevel {\n" +
 			"}");
 	
@@ -8877,11 +9547,17 @@ public void testCompletionInsideExtends12() throws JavaModelException {
 	String str = this.wc.getSource();
 	String completeBehind = "implements CompletionInsideExtends";
 	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	this.wc.codeComplete(cursorLocation, requestor);
+	this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
-	assertResults(
-			"CompletionInsideExtends12TopLevel[TYPE_REF]{CompletionInsideExtends12TopLevel, test, Ltest.CompletionInsideExtends12TopLevel;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}",
-			requestor.getResults());
+	if(CompletionEngine.PROPOSE_MEMBER_TYPES) {
+		assertResults(
+				"",
+				requestor.getResults());
+	} else {
+		assertResults(
+				"CompletionInsideExtends12TopLevel[TYPE_REF]{CompletionInsideExtends12TopLevel, test, Ltest.CompletionInsideExtends12TopLevel;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}",
+				requestor.getResults());
+	}
 }
 //https://bugs.eclipse.org/bugs/show_bug.cgi?id=84690
 public void testCompletionArrayLength() throws JavaModelException {
@@ -8889,9 +9565,9 @@ public void testCompletionArrayLength() throws JavaModelException {
             "/Completion/src/test/CompletionArrayLength.java",
             "package test;\n" +
             "public class CompletionArrayLength {\n" +
-            "  public void foo() {" +
-            "    long[] var;" +
-            "    var.leng" +
+            "  public void foo() {\n" +
+            "    long[] var;\n" +
+            "    var.leng\n" +
             "  }" +
             "}");
     
@@ -8900,7 +9576,7 @@ public void testCompletionArrayLength() throws JavaModelException {
     String str = this.wc.getSource();
     String completeBehind = "leng";
     int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-    this.wc.codeComplete(cursorLocation, requestor);
+    this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
     assertResults(
             "length[FIELD_REF]{length, [J, I, length, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}",
@@ -8912,10 +9588,10 @@ public void testCompletionArrayClone() throws JavaModelException {
             "/Completion/src/test/CompletionArrayClone.java",
             "package test;\n" +
             "public class CompletionArrayClone {\n" +
-            "  public void foo() {" +
-            "    long[] var;" +
-            "    var.clon" +
-            "  }" +
+            "  public void foo() {\n" +
+            "    long[] var;\n" +
+            "    var.clon\n" +
+            "  }\n" +
             "}");
     
     
@@ -8923,10 +9599,366 @@ public void testCompletionArrayClone() throws JavaModelException {
     String str = this.wc.getSource();
     String completeBehind = "clon";
     int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-    this.wc.codeComplete(cursorLocation, requestor);
+    this.wc.codeComplete(cursorLocation, requestor, this.owner);
 
     assertResults(
             "clone[METHOD_REF]{clone(), [J, ()Ljava.lang.Object;, clone, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_STATIC + R_NON_RESTRICTED) + "}",
             requestor.getResults());
 }
+public void testCompletionAllMemberTypes() throws JavaModelException {
+    this.wc = getWorkingCopy(
+            "/Completion/src/test/CompletionAllMemberTypes.java",
+            "package test;\n" +
+            "public class CompletionAllMemberTypes {\n" +
+            "  class Member1 {\n" +
+            "    class Member2 {\n" +
+            "      class Member3 {\n" +
+            "      }\n" +
+            "    }\n" +
+            "    void foo(){\n" +
+            "      Member\n" +
+            "    }\n" +
+            "  \n}" +
+            "}");
+    
+    
+    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+    String str = this.wc.getSource();
+    String completeBehind = "Member";
+    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+    this.wc.codeComplete(cursorLocation, requestor, this.owner);
+
+    if(CompletionEngine.PROPOSE_MEMBER_TYPES) {
+    	assertResults(
+	            "CompletionAllMemberTypes.Member1.Member2.Member3[TYPE_REF]{test.CompletionAllMemberTypes.Member1.Member2.Member3, test, Ltest.CompletionAllMemberTypes$Member1$Member2$Member3;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
+				"CompletionAllMemberTypes.Member1[TYPE_REF]{Member1, test, Ltest.CompletionAllMemberTypes$Member1;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}\n" +
+				"CompletionAllMemberTypes.Member1.Member2[TYPE_REF]{Member2, test, Ltest.CompletionAllMemberTypes$Member1$Member2;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}",
+	            requestor.getResults());
+    } else {
+    	assertResults(
+	            "CompletionAllMemberTypes.Member1[TYPE_REF]{Member1, test, Ltest.CompletionAllMemberTypes$Member1;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}\n" +
+				"CompletionAllMemberTypes.Member1.Member2[TYPE_REF]{Member2, test, Ltest.CompletionAllMemberTypes$Member1$Member2;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}",
+	            requestor.getResults());
+    }
+}
+public void testCompletionAllMemberTypes2() throws JavaModelException {
+    this.wc = getWorkingCopy(
+            "/Completion/src/test/CompletionAllMemberTypes2.java",
+            "package test;\n" +
+            "public class CompletionAllMemberTypes2 {\n" +
+            "  class Member1 {\n" +
+            "    class Member5 {\n" +
+            "      class Member6 {\n" +
+            "      }\n" +
+            "    }\n" +
+            "    class Member2 {\n" +
+            "      class Member3 {\n" +
+            "        class Member4 {\n" +
+            "        }\n" +
+            "      }\n" +
+            "      void foo(){\n" +
+            "        Member\n" +
+            "      }\n" +
+            "    }\n" +
+            "  \n}" +
+            "}");
+    
+    
+    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+    String str = this.wc.getSource();
+    String completeBehind = "Member";
+    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+    this.wc.codeComplete(cursorLocation, requestor, this.owner);
+
+    if(CompletionEngine.PROPOSE_MEMBER_TYPES) {
+    	assertResults(
+	            "CompletionAllMemberTypes2.Member1.Member2.Member3.Member4[TYPE_REF]{test.CompletionAllMemberTypes2.Member1.Member2.Member3.Member4, test, Ltest.CompletionAllMemberTypes2$Member1$Member2$Member3$Member4;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
+				"CompletionAllMemberTypes2.Member1.Member5.Member6[TYPE_REF]{test.CompletionAllMemberTypes2.Member1.Member5.Member6, test, Ltest.CompletionAllMemberTypes2$Member1$Member5$Member6;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
+				"CompletionAllMemberTypes2.Member1[TYPE_REF]{Member1, test, Ltest.CompletionAllMemberTypes2$Member1;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}\n" +
+				"CompletionAllMemberTypes2.Member1.Member2[TYPE_REF]{Member2, test, Ltest.CompletionAllMemberTypes2$Member1$Member2;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}\n" +
+				"CompletionAllMemberTypes2.Member1.Member2.Member3[TYPE_REF]{Member3, test, Ltest.CompletionAllMemberTypes2$Member1$Member2$Member3;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}\n" +
+				"CompletionAllMemberTypes2.Member1.Member5[TYPE_REF]{Member5, test, Ltest.CompletionAllMemberTypes2$Member1$Member5;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}",
+	            requestor.getResults());
+    } else {
+    	assertResults(
+	            "CompletionAllMemberTypes2.Member1[TYPE_REF]{Member1, test, Ltest.CompletionAllMemberTypes2$Member1;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}\n" +
+				"CompletionAllMemberTypes2.Member1.Member2[TYPE_REF]{Member2, test, Ltest.CompletionAllMemberTypes2$Member1$Member2;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}\n" +
+				"CompletionAllMemberTypes2.Member1.Member2.Member3[TYPE_REF]{Member3, test, Ltest.CompletionAllMemberTypes2$Member1$Member2$Member3;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}\n" +
+				"CompletionAllMemberTypes2.Member1.Member5[TYPE_REF]{Member5, test, Ltest.CompletionAllMemberTypes2$Member1$Member5;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}",
+	            requestor.getResults());
+    }
+}
+public void testCompletionAllMemberTypes3() throws JavaModelException {
+    this.wc = getWorkingCopy(
+            "/Completion/src/test/CompletionAllMemberTypes2.java",
+            "package test;\n" +
+            "public interface CompletionAllMemberTypes2 {\n" +
+            "  interface Member1 {\n" +
+            "    interface Member5 {\n" +
+            "      interface Member6 {\n" +
+            "      }\n" +
+            "    }\n" +
+            "    interface Member2 {\n" +
+            "      interface Member3 {\n" +
+            "        interface Member4 {\n" +
+            "        }\n" +
+            "      }\n" +
+            "        Member\n" +
+            "    }\n" +
+            "  \n}" +
+            "}");
+    
+    
+    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+    String str = this.wc.getSource();
+    String completeBehind = "Member";
+    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+    this.wc.codeComplete(cursorLocation, requestor, this.owner);
+
+    if(CompletionEngine.PROPOSE_MEMBER_TYPES) {
+    	assertResults(
+	            "Member[POTENTIAL_METHOD_DECLARATION]{Member, Ltest.CompletionAllMemberTypes2$Member1$Member2;, ()V, Member, null, " + (R_DEFAULT + R_INTERESTING + R_NON_RESTRICTED) + "}\n" +
+				"CompletionAllMemberTypes2.Member1.Member2.Member3.Member4[TYPE_REF]{test.CompletionAllMemberTypes2.Member1.Member2.Member3.Member4, test, Ltest.CompletionAllMemberTypes2$Member1$Member2$Member3$Member4;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
+				"CompletionAllMemberTypes2.Member1.Member5.Member6[TYPE_REF]{test.CompletionAllMemberTypes2.Member1.Member5.Member6, test, Ltest.CompletionAllMemberTypes2$Member1$Member5$Member6;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
+				"CompletionAllMemberTypes2.Member1[TYPE_REF]{Member1, test, Ltest.CompletionAllMemberTypes2$Member1;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}\n" +
+				"CompletionAllMemberTypes2.Member1.Member2[TYPE_REF]{Member2, test, Ltest.CompletionAllMemberTypes2$Member1$Member2;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}\n" +
+				"CompletionAllMemberTypes2.Member1.Member2.Member3[TYPE_REF]{Member3, test, Ltest.CompletionAllMemberTypes2$Member1$Member2$Member3;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}\n" +
+				"CompletionAllMemberTypes2.Member1.Member5[TYPE_REF]{Member5, test, Ltest.CompletionAllMemberTypes2$Member1$Member5;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}",
+	            requestor.getResults());
+    } else {
+    	assertResults(
+	            "Member[POTENTIAL_METHOD_DECLARATION]{Member, Ltest.CompletionAllMemberTypes2$Member1$Member2;, ()V, Member, null, " + (R_DEFAULT + R_INTERESTING + R_NON_RESTRICTED) + "}\n" +
+				"CompletionAllMemberTypes2.Member1[TYPE_REF]{Member1, test, Ltest.CompletionAllMemberTypes2$Member1;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}\n" +
+				"CompletionAllMemberTypes2.Member1.Member2[TYPE_REF]{Member2, test, Ltest.CompletionAllMemberTypes2$Member1$Member2;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}\n" +
+				"CompletionAllMemberTypes2.Member1.Member2.Member3[TYPE_REF]{Member3, test, Ltest.CompletionAllMemberTypes2$Member1$Member2$Member3;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}\n" +
+				"CompletionAllMemberTypes2.Member1.Member5[TYPE_REF]{Member5, test, Ltest.CompletionAllMemberTypes2$Member1$Member5;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}",
+	            requestor.getResults());
+    }
+}
+public void testCompletionAllMemberTypes4() throws JavaModelException {
+	ICompilationUnit anInterface = null;
+	try {
+		anInterface = getWorkingCopy(
+	            "/Completion/src/test/AnInterface.java",
+	            "package test;\n" +
+	            "public interface AnInterface {\n" +
+	            "  public interface Member1 {\n" +
+	            "    public interface Member5 {\n" +
+	            "      public interface Member6 {\n" +
+	            "      }\n" +
+	            "    }\n" +
+	            "    public interface Member2 {\n" +
+	            "      public interface Member3 {\n" +
+	            "        interface Member4 {\n" +
+	            "        }\n" +
+	            "      }\n" +
+	            "        Member\n" +
+	            "    }\n" +
+	            "  \n}" +
+	            "}");
+		
+	    this.wc = getWorkingCopy(
+	            "/Completion/src/test/CompletionAllMemberTypes2.java",
+	            "package test;\n" +
+	            "public class CompletionAllMemberTypes2 {\n" +
+	            "  class Member1 {\n" +
+	            "    class Member5 {\n" +
+	            "      class Member6 {\n" +
+	            "      }\n" +
+	            "    }\n" +
+	            "    class Member2 implements AnInterface {\n" +
+	            "      class Member3 {\n" +
+	            "        class Member4 {\n" +
+	            "        }\n" +
+	            "      }\n" +
+	            "      void foo(){\n" +
+	            "        Member\n" +
+	            "      }\n" +
+	            "    }\n" +
+	            "  \n}" +
+	            "}");
+	    
+	    
+	    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+	    String str = this.wc.getSource();
+	    String completeBehind = "Member";
+	    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+	    this.wc.codeComplete(cursorLocation, requestor, this.owner);
+	
+	    if(CompletionEngine.PROPOSE_MEMBER_TYPES) {
+	    	assertResults(
+		            "AnInterface.Member1.Member2[TYPE_REF]{test.AnInterface.Member1.Member2, test, Ltest.AnInterface$Member1$Member2;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
+					"AnInterface.Member1.Member2.Member3[TYPE_REF]{test.AnInterface.Member1.Member2.Member3, test, Ltest.AnInterface$Member1$Member2$Member3;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
+					"AnInterface.Member1.Member2.Member3.Member4[TYPE_REF]{test.AnInterface.Member1.Member2.Member3.Member4, test, Ltest.AnInterface$Member1$Member2$Member3$Member4;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
+					"AnInterface.Member1.Member5[TYPE_REF]{test.AnInterface.Member1.Member5, test, Ltest.AnInterface$Member1$Member5;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
+					"AnInterface.Member1.Member5.Member6[TYPE_REF]{test.AnInterface.Member1.Member5.Member6, test, Ltest.AnInterface$Member1$Member5$Member6;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
+					"CompletionAllMemberTypes2.Member1.Member2.Member3.Member4[TYPE_REF]{test.CompletionAllMemberTypes2.Member1.Member2.Member3.Member4, test, Ltest.CompletionAllMemberTypes2$Member1$Member2$Member3$Member4;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
+					"CompletionAllMemberTypes2.Member1.Member5.Member6[TYPE_REF]{test.CompletionAllMemberTypes2.Member1.Member5.Member6, test, Ltest.CompletionAllMemberTypes2$Member1$Member5$Member6;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
+					"AnInterface.Member1[TYPE_REF]{Member1, test, Ltest.AnInterface$Member1;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}\n" +
+					"CompletionAllMemberTypes2.Member1[TYPE_REF]{Member1, test, Ltest.CompletionAllMemberTypes2$Member1;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}\n" +
+					"CompletionAllMemberTypes2.Member1.Member2[TYPE_REF]{Member2, test, Ltest.CompletionAllMemberTypes2$Member1$Member2;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}\n" +
+					"CompletionAllMemberTypes2.Member1.Member2.Member3[TYPE_REF]{Member3, test, Ltest.CompletionAllMemberTypes2$Member1$Member2$Member3;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}\n" +
+					"CompletionAllMemberTypes2.Member1.Member5[TYPE_REF]{Member5, test, Ltest.CompletionAllMemberTypes2$Member1$Member5;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}",
+		            requestor.getResults());
+	    } else {
+	    	assertResults(
+		            "AnInterface.Member1[TYPE_REF]{Member1, test, Ltest.AnInterface$Member1;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}\n" +
+					"CompletionAllMemberTypes2.Member1[TYPE_REF]{Member1, test, Ltest.CompletionAllMemberTypes2$Member1;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}\n" +
+					"CompletionAllMemberTypes2.Member1.Member2[TYPE_REF]{Member2, test, Ltest.CompletionAllMemberTypes2$Member1$Member2;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}\n" +
+					"CompletionAllMemberTypes2.Member1.Member2.Member3[TYPE_REF]{Member3, test, Ltest.CompletionAllMemberTypes2$Member1$Member2$Member3;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}\n" +
+					"CompletionAllMemberTypes2.Member1.Member5[TYPE_REF]{Member5, test, Ltest.CompletionAllMemberTypes2$Member1$Member5;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}",
+		            requestor.getResults());
+	    }
+	} finally {
+		if(anInterface != null) {
+			anInterface.discardWorkingCopy();
+		}
+	}
+}
+public void testCompletionAllMemberTypes5() throws JavaModelException {
+	ICompilationUnit aType = null;
+	Hashtable oldCurrentOptions = JavaCore.getOptions();
+	try {
+		Hashtable options = new Hashtable(oldCurrentOptions);
+		options.put(JavaCore.CODEASSIST_VISIBILITY_CHECK, JavaCore.ENABLED);
+		JavaCore.setOptions(options);
+		
+		aType = getWorkingCopy(
+	            "/Completion/src/test/AType.java",
+	            "package test;\n" +
+	            "public class AType {\n" +
+	            "  public class Member1 {\n" +
+	            "    private class Member2 {\n" +
+	            "      public class Member3 {\n" +
+	            "        public class Member4 {\n" +
+	            "        }\n" +
+	            "      }\n" +
+	            "    }\n" +
+	            "  \n}" +
+	            "}");
+		
+	    this.wc = getWorkingCopy(
+	            "/Completion/src/test/CompletionAllMemberTypes5.java",
+	            "package test;\n" +
+	            "public class CompletionAllMemberTypes5 {\n" +
+	            "  void foo(){\n" +
+	            "    Member\n" +
+	            "  }\n" +
+	            "}");
+	    
+	    
+	    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+	    String str = this.wc.getSource();
+	    String completeBehind = "Member";
+	    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+	    this.wc.codeComplete(cursorLocation, requestor, this.owner);
+	
+	    if(CompletionEngine.PROPOSE_MEMBER_TYPES) {
+	    	// AType.Member1.Member2.Member3 and AType.Member1.Member2.Member3.Member4 should not be proposed because they are not visible.
+	    	// But visibility need modifiers of enclosing types to be computed. 
+	    	assertResults(
+		            "AType.Member1[TYPE_REF]{test.AType.Member1, test, Ltest.AType$Member1;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
+					"AType.Member1.Member2.Member3[TYPE_REF]{test.AType.Member1.Member2.Member3, test, Ltest.AType$Member1$Member2$Member3;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
+					"AType.Member1.Member2.Member3.Member4[TYPE_REF]{test.AType.Member1.Member2.Member3.Member4, test, Ltest.AType$Member1$Member2$Member3$Member4;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}",
+		            requestor.getResults());
+	    } else {
+	    	assertResults(
+		            "",
+		            requestor.getResults());
+	    }
+	} finally {
+		if(aType != null) {
+			aType.discardWorkingCopy();
+		}
+		JavaCore.setOptions(oldCurrentOptions);
+	}
+}
+public void testCompletionAllMemberTypes6() throws JavaModelException {
+	Hashtable oldCurrentOptions = JavaCore.getOptions();
+	try {
+		Hashtable options = new Hashtable(oldCurrentOptions);
+		options.put(JavaCore.CODEASSIST_VISIBILITY_CHECK, JavaCore.ENABLED);
+		JavaCore.setOptions(options);
+		
+	    this.wc = getWorkingCopy(
+	            "/Completion/src/test/CompletionAllMemberTypes6.java",
+	            "package test;\n" +
+	            "class AType {\n" +
+	            "  public class Member1 {\n" +
+	            "    private class Member2 {\n" +
+	            "      public class Member3 {\n" +
+	            "      }\n" +
+	            "    }\n" +
+	            "  }\n" +
+	            "}\n" +
+	            "public class CompletionAllMemberTypes6 {\n" +
+	            "  void foo(){\n" +
+	            "    Member\n" +
+	            "  }\n" +
+	            "}");
+	    
+	    
+	    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+	    String str = this.wc.getSource();
+	    String completeBehind = "Member";
+	    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+	    this.wc.codeComplete(cursorLocation, requestor, this.owner);
+	
+	    if(CompletionEngine.PROPOSE_MEMBER_TYPES) {
+	    	assertResults(
+		            "AType.Member1[TYPE_REF]{test.AType.Member1, test, Ltest.AType$Member1;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}",
+		            requestor.getResults());
+	    } else {
+	    	assertResults(
+		            "",
+		            requestor.getResults());
+	    }
+	} finally {
+		JavaCore.setOptions(oldCurrentOptions);
+	}
+}
+public void testCompletionAllMemberTypes7() throws JavaModelException {
+	Hashtable oldCurrentOptions = JavaCore.getOptions();
+	try {
+		Hashtable options = new Hashtable(oldCurrentOptions);
+		options.put(JavaCore.CODEASSIST_VISIBILITY_CHECK, JavaCore.ENABLED);
+		JavaCore.setOptions(options);
+		
+	    this.wc = getWorkingCopy(
+	            "/Completion/src/test/AType.java",
+	            "package test;\n" +
+	            "class AType {\n" +
+	            "  public class Member1 {\n" +
+	            "    private class Member2 {\n" +
+	            "      public class Member3 {\n" +
+	            "      }\n" +
+	            "    }\n" +
+	            "  }\n" +
+	            "  void foo(){\n" +
+	            "    Member\n" +
+	            "  }\n" +
+	            "}");
+	    
+	    
+	    CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+	    String str = this.wc.getSource();
+	    String completeBehind = "Member";
+	    int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+	    this.wc.codeComplete(cursorLocation, requestor, this.owner);
+	
+	    if(CompletionEngine.PROPOSE_MEMBER_TYPES) {
+	    	assertResults(
+		            "AType.Member1.Member2[TYPE_REF]{test.AType.Member1.Member2, test, Ltest.AType$Member1$Member2;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
+					"AType.Member1.Member2.Member3[TYPE_REF]{test.AType.Member1.Member2.Member3, test, Ltest.AType$Member1$Member2$Member3;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
+					"AType.Member1[TYPE_REF]{Member1, test, Ltest.AType$Member1;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}",
+		            requestor.getResults());
+	    } else {
+	    	assertResults(
+		            "AType.Member1[TYPE_REF]{Member1, test, Ltest.AType$Member1;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}",
+		            requestor.getResults());
+	    }
+	} finally {
+		JavaCore.setOptions(oldCurrentOptions);
+	}
+}
 }
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests_1_5.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests_1_5.java
index 35b198b..b874fd2 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests_1_5.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests_1_5.java
@@ -46,10 +46,83 @@ public static Test suite() {
 		}
 		return suite;
 	}
-	suite.addTest(new CompletionTests_1_5("test0192"));			
+	suite.addTest(new CompletionTests_1_5("test0204"));			
 	return suite;
 }
-
+private ICompilationUnit[] getExternalQQTypes() throws JavaModelException {
+	ICompilationUnit[] units = new ICompilationUnit[6];
+	
+	units[0] = getWorkingCopy(
+		"/Completion/src3/pkgstaticimport/QQType1.java",
+		"package pkgstaticimport;\n"+
+		"\n"+
+		"public class QQType1 {\n"+
+		"	public class Inner1 {}\n"+
+		"	public static class Inner2 {}\n"+
+		"	protected class Inner3 {}\n"+
+		"	protected static class Inner4 {}\n"+
+		"	private class Inner5 {}\n"+
+		"	private static class Inner6 {}\n"+
+		"	class Inner7 {}\n"+
+		"	static class Inner8 {}\n"+
+		"}");
+	
+	units[1] = getWorkingCopy(
+		"/Completion/src3/pkgstaticimport/QQType3.java",
+		"package pkgstaticimport;\n"+
+		"\n"+
+		"public class QQType3 extends QQType1 {\n"+
+		"	\n"+
+		"}");
+	
+	units[2] = getWorkingCopy(
+		"/Completion/src3/pkgstaticimport/QQType4.java",
+		"package pkgstaticimport;\n"+
+		"\n"+
+		"public class QQType4 {\n"+
+		"	public int zzvarzz1;\n"+
+		"	public static int zzvarzz2;\n"+
+		"	protected int zzvarzz3;\n"+
+		"	protected static int zzvarzz4;\n"+
+		"	private int zzvarzz5;\n"+
+		"	private static int zzvarzz6;\n"+
+		"	int zzvarzz7;\n"+
+		"	static int zzvarzz8;\n"+
+		"}");
+	
+	units[3] = getWorkingCopy(
+		"/Completion/src3/pkgstaticimport/QQType6.java",
+		"package pkgstaticimport;\n"+
+		"\n"+
+		"public class QQType6 extends QQType4 {\n"+
+		"	\n"+
+		"}");
+	
+	units[4] = getWorkingCopy(
+		"/Completion/src3/pkgstaticimport/QQType7.java",
+		"package pkgstaticimport;\n"+
+		"\n"+
+		"public class QQType7 {\n"+
+		"	public void zzfoozz1(){};\n"+
+		"	public static void zzfoozz2(){};\n"+
+		"	protected void zzfoozz3(){};\n"+
+		"	protected static void zzfoozz4(){};\n"+
+		"	private void zzfoozz5(){};\n"+
+		"	private static void zzfoozz6(){};\n"+
+		"	void zzfoozz7(){};\n"+
+		"	static void zzfoozz8(){};\n"+
+		"}");
+	
+	units[5] = getWorkingCopy(
+		"/Completion/src3/pkgstaticimport/QQType9.java",
+		"package pkgstaticimport;\n"+
+		"\n"+
+		"public class QQType9 extends QQType7 {\n"+
+		"	\n"+
+		"}");
+	
+	return units;
+}
 public void test0001() throws JavaModelException {
 	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
 	ICompilationUnit cu = getCompilationUnit("Completion", "src3", "test0001", "Test.java");
@@ -104,57 +177,115 @@ public void test0004() throws JavaModelException {
 		requestor.getResults());
 }
 public void test0005() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu = getCompilationUnit("Completion", "src3", "test0005", "Test.java");
-	
-	String str = cu.getSource();
-	String completeBehind = "Y<St";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-	
-	assertEquals("should have one class",
-		"element:String    completion:String    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED),
-		requestor.getResults());
+	CompletionResult result = complete(
+            "/Completion/src3/test0005/Test.java",
+            "package test0005;\n" +
+            "\n" +
+            "public class Test {\n" +
+            "	void foo() {\n" +
+            "		X<Object>.Y<St\n" +
+            "	}\n" +
+            "}\n" +
+            "\n" +
+            "class X<T> {\n" +
+            "	public class Y<U> {\n" +
+            "	}\n" +
+            "}",
+            "Y<St");
+    
+    assertResults(
+            "expectedTypesSignatures=null\n" +
+            "expectedTypesKeys=null",
+            result.context);
+    
+    assertResults(
+            "String[TYPE_REF]{String, java.lang, Ljava.lang.String;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"}",
+            result.proposals);
 }
 public void test0006() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu = getCompilationUnit("Completion", "src3", "test0006", "Test.java");
-	
-	String str = cu.getSource();
-	String completeBehind = "Y<Ob";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-	
-	assertEquals("should have one class",
-		"element:Object    completion:Object    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED),
-		requestor.getResults());
+	CompletionResult result = complete(
+            "/Completion/src3/test0006/Test.java",
+            "package test0006;\n" +
+            "\n" +
+            "public class Test {\n" +
+            "	void foo() {\n" +
+            "		X<String>.Y<Ob\n" +
+            "	}\n" +
+            "}\n" +
+            "\n" +
+            "class X<T> {\n" +
+            "	public class Y<U> {\n" +
+            "	}\n" +
+            "}",
+            "Y<Ob");
+    
+    assertResults(
+            "expectedTypesSignatures=null\n" +
+            "expectedTypesKeys=null",
+            result.context);
+    
+    assertResults(
+            "Object[TYPE_REF]{Object, java.lang, Ljava.lang.Object;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) +"}",
+            result.proposals);
 }
 public void test0007() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu = getCompilationUnit("Completion", "src3", "test0007", "Test.java");
-	
-	String str = cu.getSource();
-	String completeBehind = "Y<St";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-	
-	assertEquals("should have one class",
-		"element:String    completion:String    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_EXACT_EXPECTED_TYPE + R_NON_RESTRICTED),
-		requestor.getResults());
+	CompletionResult result = complete(
+            "/Completion/src3/test0007/Test.java",
+            "package test0007;\n" +
+            "\n" +
+            "public class Test {\n" +
+            "	void foo() {\n" +
+            "		X<Object>.Y<St\n" +
+            "	}\n" +
+            "}\n" +
+            "\n" +
+            "class X<T> {\n" +
+            "	public class Y<U extends String> {\n" +
+            "	}\n" +
+            "}",
+            "Y<St");
+    
+    assertResults(
+            "expectedTypesSignatures={Ljava.lang.String;}\n" +
+            "expectedTypesKeys={Ljava/lang/String;}",
+            result.context);
+    
+    assertResults(
+            "String[TYPE_REF]{String, java.lang, Ljava.lang.String;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_EXACT_EXPECTED_TYPE + R_NON_RESTRICTED) +"}",
+            result.proposals);
 }
 public void test0008() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu = getCompilationUnit("Completion", "src3", "test0008", "Test.java");
-	
-	String str = cu.getSource();
-	String completeBehind = "Y<XY";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-	
-	assertEquals("should have one class",
-		"element:XYX    completion:XYX    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"\n"+
-		"element:XYXSuper    completion:XYXSuper    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_EXACT_EXPECTED_TYPE + R_NON_RESTRICTED),
-		requestor.getResults());
+	CompletionResult result = complete(
+            "/Completion/src3/test0008/Test.java",
+            "package test0008;\n" +
+            "\n" +
+            "public class Test {\n" +
+            "	void foo() {\n" +
+            "		X<Object>.Y<XY\n" +
+            "	}\n" +
+            "}\n" +
+            "\n" +
+            "class X<T> {\n" +
+            "	public class Y<U extends XYXSuper> {\n" +
+            "	}\n" +
+            "}\n" +
+            "class XYX {\n" +
+            "	\n" +
+            "}\n" +
+            "class XYXSuper {\n" +
+            "	\n" +
+            "}",
+            "Y<XY");
+    
+    assertResults(
+            "expectedTypesSignatures={Ltest0008.XYXSuper;}\n" +
+            "expectedTypesKeys={Ltest0008/Test~XYXSuper;}",
+            result.context);
+    
+    assertResults(
+            "XYX[TYPE_REF]{XYX, test0008, Ltest0008.XYX;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED)+"}\n"+
+			"XYXSuper[TYPE_REF]{XYXSuper, test0008, Ltest0008.XYXSuper;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_EXACT_EXPECTED_TYPE + R_NON_RESTRICTED)+"}",
+			result.proposals);
 }
 public void test0009() throws JavaModelException {
 	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
@@ -187,135 +318,243 @@ public void test0010() throws JavaModelException {
 		requestor.getResults());
 }
 public void test0011() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu = getCompilationUnit("Completion", "src3", "test0011", "Test.java");
-	
-	String str = cu.getSource();
-	String completeBehind = ".Y001";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-	
-	assertEquals("should have one class",
-		"element:Z0011<java.lang.Object>.Y0011    completion:Y0011    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED),
-		requestor.getResults());
+	CompletionResult result = complete(
+            "/Completion/src3/test0011/Test.java",
+            "package test0011;\n"+
+            "\n"+
+            "public class Test <T extends Z0011<Object>.Y001> {\n"+
+            "\n"+
+            "}\n"+
+            "class Z0011<T0011> {\n"+
+            "	public class Y0011 {\n"+
+            "	}\n"+
+            "}",
+            ".Y001");
+    
+    assertResults(
+            "expectedTypesSignatures=null\n" +
+            "expectedTypesKeys=null",
+            result.context);
+    
+    assertResults(
+            "Z0011<java.lang.Object>.Y0011[TYPE_REF]{Y0011, test0011, Ltest0011.Z0011<Ljava.lang.Object;>.Y0011;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED)+"}",
+            result.proposals);
 }
 public void test0012() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu = getCompilationUnit("Completion", "src3", "test0012", "Test.java");
-	
-	String str = cu.getSource();
-	String completeBehind = ".Y001";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-	
-	assertEquals("should have one class",
-		"element:Z0012<java.lang.Object>.Y0012    completion:Y0012    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED),
-		requestor.getResults());
+	CompletionResult result = complete(
+            "/Completion/src3/test0012/Test.java",
+            "package test0012;\n"+
+            "\n"+
+            "public class Test {\n"+
+            "	public Z0012<Object>.Y001\n"+
+            "}\n"+
+            "class Z0012<T0012> {\n"+
+            "	public class Y0012 {\n"+
+            "	}\n"+
+            "}",
+            ".Y001");
+    
+    assertResults(
+            "expectedTypesSignatures=null\n" +
+            "expectedTypesKeys=null",
+            result.context);
+    
+    assertResults(
+            "Z0012<java.lang.Object>.Y0012[TYPE_REF]{Y0012, test0012, Ltest0012.Z0012<Ljava.lang.Object;>.Y0012;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) +"}",
+            result.proposals);
 }
 public void test0013() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu = getCompilationUnit("Completion", "src3", "test0013", "Test.java");
-	
-	String str = cu.getSource();
-	String completeBehind = ".Y001";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-	
-	assertEquals("should have one class",
-		"element:Z0013<java.lang.Object>.Y0013    completion:Y0013    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED),
-		requestor.getResults());
+	CompletionResult result = complete(
+            "/Completion/src3/test0013/Test.java",
+            "package test0013;\n"+
+            "\n"+
+            "public class Test {\n"+
+            "	public Z0013<Object>.Y001 foo() {}\n"+
+            "}\n"+
+            "class Z0013<T0013> {\n"+
+            "	public class Y0013 {\n"+
+            "	}\n"+
+            "}",
+            ".Y001");
+    
+    assertResults(
+            "expectedTypesSignatures=null\n" +
+            "expectedTypesKeys=null",
+            result.context);
+    
+    assertResults(
+            "Z0013<java.lang.Object>.Y0013[TYPE_REF]{Y0013, test0013, Ltest0013.Z0013<Ljava.lang.Object;>.Y0013;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) +"}",
+            result.proposals);
 }
 public void test0014() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu = getCompilationUnit("Completion", "src3", "test0014", "Test.java");
-	
-	String str = cu.getSource();
-	String completeBehind = ".Y001";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-	
-	assertEquals("should have one class",
-		"element:Z0014<java.lang.Object>.Y0014    completion:Y0014    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_CLASS + R_NON_RESTRICTED),
-		requestor.getResults());
+	CompletionResult result = complete(
+            "/Completion/src3/test0014/Test.java",
+            "package test0014;\n" +
+            "\n" +
+            "public class Test extends Z0014<Object>.Y001 {\n" +
+            "}\n" +
+            "class Z0014<T0014> {\n" +
+            "	public class Y0014 {\n" +
+            "	}\n" +
+            "}",
+            ".Y001");
+    
+    assertResults(
+            "expectedTypesSignatures=null\n" +
+            "expectedTypesKeys=null",
+            result.context);
+    
+    assertResults(
+            "Z0014<java.lang.Object>.Y0014[TYPE_REF]{Y0014, test0014, Ltest0014.Z0014<Ljava.lang.Object;>.Y0014;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_CLASS + R_NON_RESTRICTED) +"}",
+            result.proposals);
 }
 public void test0015() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu = getCompilationUnit("Completion", "src3", "test0015", "Test.java");
-	
-	String str = cu.getSource();
-	String completeBehind = ".Y001";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-	
-	assertEquals("should have one class",
-		"element:Z0015<java.lang.Object>.Y0015    completion:Y0015    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "\n" +
-		"element:Z0015<java.lang.Object>.Y0015I    completion:Y0015I    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_CLASS + R_NON_RESTRICTED),
-		requestor.getResults());
+	CompletionResult result = complete(
+            "/Completion/src3/test0015/Test.java",
+            "package test0015;\n" +
+            "\n" +
+            "public class Test implements Z0015<Object>.Y001 {\n" +
+            "}\n" +
+            "class Z0015<T0015> {\n" +
+            "	public class Y0015 {\n" +
+            "	}\n" +
+            "	public interface Y0015I {\n" +
+            "	}\n" +
+            "}",
+            ".Y001");
+    
+    assertResults(
+            "expectedTypesSignatures=null\n" +
+            "expectedTypesKeys=null",
+            result.context);
+    
+    assertResults(
+            "Z0015<java.lang.Object>.Y0015[TYPE_REF]{Y0015, test0015, Ltest0015.Z0015<Ljava.lang.Object;>.Y0015;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) +"}\n" +
+            "Z0015<java.lang.Object>.Y0015I[TYPE_REF]{Y0015I, test0015, Ltest0015.Z0015<Ljava.lang.Object;>.Y0015I;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_INTERFACE+ R_NON_RESTRICTED) +"}",
+            result.proposals);
 }
 public void test0016() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu = getCompilationUnit("Completion", "src3", "test0016", "Test.java");
-	
-	String str = cu.getSource();
-	String completeBehind = ".Y001";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-	
-	assertEquals("should have one class",
-		"element:Z0016<java.lang.Object>.Y0016    completion:Y0016    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED),
-		requestor.getResults());
+	CompletionResult result = complete(
+            "/Completion/src3/test0016/Test.java",
+            "package test0016;\n" +
+            "\n" +
+            "public class Test implements  {\n" +
+            "	void foo(Z0016<Object>.Y001) {\n" +
+            "		\n" +
+            "	}\n" +
+            "}\n" +
+            "class Z0016<T0016> {\n" +
+            "	public class Y0016 {\n" +
+            "	}\n" +
+            "}",
+            ".Y001");
+    
+    assertResults(
+            "expectedTypesSignatures=null\n" +
+            "expectedTypesKeys=null",
+            result.context);
+    
+    assertResults(
+            "Z0016<java.lang.Object>.Y0016[TYPE_REF]{Y0016, test0016, Ltest0016.Z0016<Ljava.lang.Object;>.Y0016;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) +"}",
+            result.proposals);
 }
 public void test0017() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu = getCompilationUnit("Completion", "src3", "test0017", "Test.java");
-	
-	String str = cu.getSource();
-	String completeBehind = ".Y001";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-	
-	assertEquals("should have one class",
-		"element:Z0017<java.lang.Object>.Y0017    completion:Y0017    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED),
-		requestor.getResults());
+	CompletionResult result = complete(
+            "/Completion/src3/test0017/Test.java",
+            "package test0017;\n" +
+            "\n" +
+            "public class Test implements  {\n" +
+            "	void foo() throws Z0017<Object>.Y001{\n" +
+            "		\n" +
+            "	}\n" +
+            "}\n" +
+            "class Z0017<T0017> {\n" +
+            "	public class Y0017 {\n" +
+            "	}\n" +
+            "}",
+            ".Y001");
+    
+    assertResults(
+            "expectedTypesSignatures=null\n" +
+            "expectedTypesKeys=null",
+            result.context);
+    
+    assertResults(
+            "Z0017<java.lang.Object>.Y0017[TYPE_REF]{Y0017, test0017, Ltest0017.Z0017<Ljava.lang.Object;>.Y0017;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) +"}",
+            result.proposals);
 }
 public void test0018() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu = getCompilationUnit("Completion", "src3", "test0018", "Test.java");
-	
-	String str = cu.getSource();
-	String completeBehind = ".Y001";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-	
-	assertEquals("should have one class",
-		"element:Z0018<java.lang.Object>.Y0018    completion:Y0018    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED),
-		requestor.getResults());
+	CompletionResult result = complete(
+            "/Completion/src3/test0018/Test.java",
+            "package test0018;\n" +
+            "\n" +
+            "public class Test {\n" +
+            "	<T extends Z0018<Object>.Y001> void foo() {\n" +
+            "		\n" +
+            "	}\n" +
+            "}\n" +
+            "class Z0018<T0018> {\n" +
+            "	public class Y0018 {\n" +
+            "	}\n" +
+            "}",
+            ".Y001");
+    
+    assertResults(
+            "expectedTypesSignatures=null\n" +
+            "expectedTypesKeys=null",
+            result.context);
+    
+    assertResults(
+            "Z0018<java.lang.Object>.Y0018[TYPE_REF]{Y0018, test0018, Ltest0018.Z0018<Ljava.lang.Object;>.Y0018;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) +"}",
+            result.proposals);
 }
 public void test0019() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu = getCompilationUnit("Completion", "src3", "test0019", "Test.java");
-	
-	String str = cu.getSource();
-	String completeBehind = ".Y001";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-	
-	assertEquals("should have one class",
-		"element:Z0019<java.lang.Object>.Y0019    completion:Y0019    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED),
-		requestor.getResults());
+	CompletionResult result = complete(
+            "/Completion/src3/test0019/Test.java",
+            "package test0019;\n" +
+            "\n" +
+            "public class Test {\n" +
+            "	<T extends Z0019<Object>.Y001\n" +
+            "}\n" +
+            "class Z0019<T0019> {\n" +
+            "	public class Y0019 {\n" +
+            "	}\n" +
+            "}",
+            ".Y001");
+    
+    assertResults(
+            "expectedTypesSignatures=null\n" +
+            "expectedTypesKeys=null",
+            result.context);
+    
+    assertResults(
+            "Z0019<java.lang.Object>.Y0019[TYPE_REF]{Y0019, test0019, Ltest0019.Z0019<Ljava.lang.Object;>.Y0019;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) +"}",
+            result.proposals);
 }
 public void test0020() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu = getCompilationUnit("Completion", "src3", "test0020", "Test.java");
-	
-	String str = cu.getSource();
-	String completeBehind = ".Y002";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-	
-	assertEquals("should have one class",
-		"element:Z0020<java.lang.Object>.Y0020    completion:Y0020    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED),
-		requestor.getResults());
+	CompletionResult result = complete(
+            "/Completion/src3/test0020/Test.java",
+            "package test0020;\n"+
+            "\n"+
+            "public class Test {\n"+
+            "	void foo() {\n"+
+            "		Z0020<Object>.Y002\n"+
+            "	}\n"+
+            "}\n"+
+            "class Z0020<T0020> {\n"+
+            "	public class Y0020 {\n"+
+            "	}\n"+
+            "}",
+            ".Y002");
+    
+    assertResults(
+            "expectedTypesSignatures=null\n" +
+            "expectedTypesKeys=null",
+            result.context);
+    
+    assertResults(
+            "Z0020<java.lang.Object>.Y0020[TYPE_REF]{Y0020, test0020, Ltest0020.Z0020<Ljava.lang.Object;>.Y0020;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) +"}",
+            result.proposals);
 }
 public void test0021() throws JavaModelException {
 	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
@@ -424,17 +663,23 @@ public void test0028() throws JavaModelException {
 		requestor.getResults());
 }
 public void test0029() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu = getCompilationUnit("Completion", "src3", "test0029", "Test.java");
-	
-	String str = cu.getSource();
-	String completeBehind = "Inner2";
-	int cursorLocation = str.indexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-	
-	assertEquals("should have one class",
-		"element:Test.Inner2<T>    completion:Inner2    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_NON_RESTRICTED),
-		requestor.getResults());
+	CompletionResult result = complete(
+            "/Completion/src3/test0029/Test.java",
+            "package test0029;\n"+
+            "\n"+
+            "public class Test {\n"+
+            "	public class Inner {\n"+
+            "		/**/Inner2<Inner2<Object>> stack= new Inner2<Inner2<Object>>();\n"+
+            "	}\n"+
+            "	class Inner2<T>{\n"+
+            "	}\n"+
+            "}",
+            "/**/Inner2");
+    
+    assertResults(
+            "Inner2[POTENTIAL_METHOD_DECLARATION]{Inner2, Ltest0029.Test$Inner;, ()V, Inner2, null, "+(R_DEFAULT + R_INTERESTING + R_NON_RESTRICTED)+"}\n"+
+            "Test.Inner2<T>[TYPE_REF]{Inner2, test0029, Ltest0029.Test$Inner2<TT;>;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_UNQUALIFIED + R_NON_RESTRICTED)+"}",
+            result.proposals);
 }
 public void test0030() throws JavaModelException {
 	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
@@ -454,17 +699,27 @@ public void test0030() throws JavaModelException {
  * https://bugs.eclipse.org/bugs/show_bug.cgi?id=72501
  */
 public void test0031() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu = getCompilationUnit("Completion", "src3", "test0031", "Test.java");
-	
-	String str = cu.getSource();
-	String completeBehind = "Stri";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-	
-	assertEquals("unexpected result",
-		"",
-		requestor.getResults());
+	CompletionResult result = complete(
+            "/Completion/src3/test0031/Test.java",
+            "package test0031;\n" +
+            "\n" +
+            "public class Test <T> {\n" +
+            "	class Y {}\n" +
+            "		void foo(){\n" +
+            "			Test<T>.Y<Stri\n" +
+            "		}\n" +
+            "	}\n" +
+            "}",
+            "Stri");
+    
+    assertResults(
+            "expectedTypesSignatures=null\n" +
+            "expectedTypesKeys=null",
+            result.context);
+    
+    assertResults(
+            "",
+            result.proposals);
 }
 /*
  * https://bugs.eclipse.org/bugs/show_bug.cgi?id=59082
@@ -598,129 +853,226 @@ public void test0039() throws JavaModelException {
  * https://bugs.eclipse.org/bugs/show_bug.cgi?id=59082
  */
 public void test0040() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu = getCompilationUnit("Completion", "src3", "test0040", "Test.java");
-	
-	String str = cu.getSource();
-	String completeBehind = "Stri";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-	
-	assertEquals("unexpected result",
-		"element:String    completion:String    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED),
-		requestor.getResults());
+	CompletionResult result = complete(
+            "/Completion/src3/test0040/Test.java",
+            "package test0040;\n" +
+            "\n" +
+            "public class Test <T> {\n" +
+            "	public class Y {\n" +
+            "		public class Z <U>{\n" +
+            "			\n" +
+            "		}\n" +
+            "	}\n" +
+            "	Test<Object>.Y.Z<Stri\n" +
+            "}",
+            "Stri");
+    
+    assertResults(
+            "expectedTypesSignatures=null\n" +
+            "expectedTypesKeys=null",
+            result.context);
+    
+    assertResults(
+            "String[TYPE_REF]{String, java.lang, Ljava.lang.String;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) +"}",
+            result.proposals);
 }
 /*
  * https://bugs.eclipse.org/bugs/show_bug.cgi?id=59082
  */
 public void test0041() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu = getCompilationUnit("Completion", "src3", "test0041", "Test.java");
-	
-	String str = cu.getSource();
-	String completeBehind = "Stri";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-	
-	assertEquals("unexpected result",
-		"element:String    completion:String    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED),
-		requestor.getResults());
+	CompletionResult result = complete(
+            "/Completion/src3/test0041/Test.java",
+            "package test0041;\n" +
+            "\n" +
+            "public class Test <T> {\n" +
+            "	public class Y {\n" +
+            "		public class Z <U> {\n" +
+            "			\n" +
+            "		}\n" +
+            "	}\n" +
+            "	void foo() {\n" +
+            "		Test<Object>.Y.Z<Stri\n" +
+            "	}\n" +
+            "}",
+            "Stri");
+    
+    assertResults(
+            "expectedTypesSignatures=null\n" +
+            "expectedTypesKeys=null",
+            result.context);
+    
+    assertResults(
+            "String[TYPE_REF]{String, java.lang, Ljava.lang.String;, null, null, "+(R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED  + R_NON_RESTRICTED) +"}",
+            result.proposals);
 }
 /*
  * https://bugs.eclipse.org/bugs/show_bug.cgi?id=59082
  */
 public void test0042() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu = getCompilationUnit("Completion", "src3", "test0042", "Test.java");
-	
-	String str = cu.getSource();
-	String completeBehind = "Stri";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-	
-	assertEquals("unexpected result",
-		"",
-		requestor.getResults());
+	CompletionResult result = complete(
+            "/Completion/src3/test0042/Test.java",
+            "package test0042;\n" +
+            "\n" +
+            "public class Test <T> {\n" +
+            "	public class Y {\n" +
+            "		public class Z {\n" +
+            "			\n" +
+            "		}\n" +
+            "	}\n" +
+            "	Test<Object>.Y.Z<Stri\n" +
+            "}",
+            "Stri");
+    
+    assertResults(
+            "expectedTypesSignatures=null\n" +
+            "expectedTypesKeys=null",
+            result.context);
+    
+    assertResults(
+            "",
+            result.proposals);
+
 }
 /*
  * https://bugs.eclipse.org/bugs/show_bug.cgi?id=59082
  */
 public void test0043() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu = getCompilationUnit("Completion", "src3", "test0043", "Test.java");
-	
-	String str = cu.getSource();
-	String completeBehind = "Stri";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-	
-	assertEquals("unexpected result",
-		"",
-		requestor.getResults());
+	CompletionResult result = complete(
+            "/Completion/src3/test0043/Test.java",
+            "package test0043;\n" +
+            "\n" +
+            "public class Test <T> {\n" +
+            "	public class Y {\n" +
+            "		public class Z {\n" +
+            "			\n" +
+            "		}\n" +
+            "	}\n" +
+            "	void foo() {\n" +
+            "		Test<Object>.Y.Z<Stri\n" +
+            "	}\n" +
+            "}",
+            "Stri");
+    
+    assertResults(
+            "expectedTypesSignatures=null\n" +
+            "expectedTypesKeys=null",
+            result.context);
+    
+    assertResults(
+            "",
+            result.proposals);
 }
 /*
  * https://bugs.eclipse.org/bugs/show_bug.cgi?id=59082
  */
 public void test0044() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu = getCompilationUnit("Completion", "src3", "test0044", "Test.java");
-	
-	String str = cu.getSource();
-	String completeBehind = "Stri";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-	
-	assertEquals("unexpected result",
-		"",
-		requestor.getResults());
+	CompletionResult result = complete(
+            "/Completion/src3/test0044/Test.java",
+            "package test0044;\n" +
+            "\n" +
+            "public class Test <T> {\n" +
+            "	public class Y {\n" +
+            "		public class Z <U>{\n" +
+            "			\n" +
+            "		}\n" +
+            "	}\n" +
+            "	Test<Object>.Y.Z<Object, Stri\n" +
+            "}",
+            "Stri");
+    
+    assertResults(
+            "expectedTypesSignatures=null\n" +
+            "expectedTypesKeys=null",
+            result.context);
+    
+    assertResults(
+            "",
+            result.proposals);
 }
 /*
  * https://bugs.eclipse.org/bugs/show_bug.cgi?id=59082
  */
 public void test0045() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu = getCompilationUnit("Completion", "src3", "test0045", "Test.java");
-	
-	String str = cu.getSource();
-	String completeBehind = "Stri";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-	
-	assertEquals("unexpected result",
-		"",
-		requestor.getResults());
+	CompletionResult result = complete(
+            "/Completion/src3/test0045/Test.java",
+            "package test0045;\n" +
+            "\n" +
+            "public class Test <T> {\n" +
+            "	public class Y {\n" +
+            "		public class Z <U>{\n" +
+            "			\n" +
+            "		}\n" +
+            "	}\n" +
+            "	void foo() {\n" +
+            "		Test<Object>.Y.Z<Object, Stri\n" +
+            "	}\n" +
+            "}",
+            "Stri");
+    
+    assertResults(
+            "expectedTypesSignatures=null\n" +
+            "expectedTypesKeys=null",
+            result.context);
+    
+    assertResults(
+            "",
+            result.proposals);
 }
 /*
  * https://bugs.eclipse.org/bugs/show_bug.cgi?id=59082
  */
 public void test0046() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu = getCompilationUnit("Completion", "src3", "test0046", "Test.java");
-	
-	String str = cu.getSource();
-	String completeBehind = "Stri";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-	
-	assertEquals("unexpected result",
-		"",
-		requestor.getResults());
+	CompletionResult result = complete(
+            "/Completion/src3/test0046/Test.java",
+            "package test0046;\n" +
+            "\n" +
+            "public class Test <T> {\n" +
+            "	public class Y {\n" +
+            "		public class Z <U>{\n" +
+            "			\n" +
+            "		}\n" +
+            "	}\n" +
+            "	Test<Object>.Y.Z<Object, Stri, Object> x;\n" +
+            "}",
+            "Stri");
+    
+    assertResults(
+            "expectedTypesSignatures=null\n" +
+            "expectedTypesKeys=null",
+            result.context);
+    
+    assertResults(
+            "",
+            result.proposals);
 }
 /*
  * https://bugs.eclipse.org/bugs/show_bug.cgi?id=59082
  */
 public void test0047() throws JavaModelException {
-	CompletionTestsRequestor requestor = new CompletionTestsRequestor();
-	ICompilationUnit cu = getCompilationUnit("Completion", "src3", "test0047", "Test.java");
-	
-	String str = cu.getSource();
-	String completeBehind = "Stri";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-	
-	assertEquals("unexpected result",
-		"",
-		requestor.getResults());
+	CompletionResult result = complete(
+            "/Completion/src3/test0047/Test.java",
+            "package test0047;\n" +
+            "\n" +
+            "public class Test <T> {\n" +
+            "	public class Y {\n" +
+            "		public class Z <U>{\n" +
+            "			\n" +
+            "		}\n" +
+            "	}\n" +
+            "	void foo() {\n" +
+            "		Test<Object>.Y.Z<Object, Stri, Object> x;\n" +
+            "	}\n" +
+            "}",
+            "Stri");
+    
+    assertResults(
+            "expectedTypesSignatures=null\n" +
+            "expectedTypesKeys=null",
+            result.context);
+    
+    assertResults(
+            "",
+            result.proposals);
 }
 /*
  * https://bugs.eclipse.org/bugs/show_bug.cgi?id=75455
@@ -770,201 +1122,400 @@ public void test0050() throws JavaModelException {
 		"element:T_0050    completion:T_0050    relevance:"+(R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_UNQUALIFIED + R_NON_RESTRICTED),
 		requestor.getResults());
 }
+
 public void test0051() throws JavaModelException {
 	this.oldOptions = JavaCore.getOptions();
+	
+	ICompilationUnit[] qqTypes = null;
 	try {
 		Hashtable options = new Hashtable(this.oldOptions);
 		options.put(JavaCore.CODEASSIST_VISIBILITY_CHECK, JavaCore.ENABLED);
 		JavaCore.setOptions(options);
 		
+		qqTypes = this.getExternalQQTypes();
+		
+		this.wc = getWorkingCopy(
+				"/Completion/src3/test0051/Test.java",
+				"package test0051;\n"+
+				"import static pkgstaticimport.QQType1.*;\n"+
+				"public class Test {\n"+
+				"	void foo() {\n"+
+				"		Inner\n"+
+				"	}\n"+
+				"}");
+		
 		CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2();
-		ICompilationUnit cu= getCompilationUnit("Completion", "src3", "test0051", "Test.java");
 	
-		String str = cu.getSource();
+		String str = this.wc.getSource();
 		String completeBehind = "Inner";
 		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-		cu.codeComplete(cursorLocation, requestor);
-	
-		assertResults(
-				"QQType1.Inner2[TYPE_REF]{Inner2, pkgstaticimport, Lpkgstaticimport.QQType1$Inner2;, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}",
-				requestor.getResults());
+		this.wc.codeComplete(cursorLocation, requestor, this.owner);
+	
+		if(CompletionEngine.PROPOSE_MEMBER_TYPES) {
+			assertResults(
+					"QQType1.Inner1[TYPE_REF]{pkgstaticimport.QQType1.Inner1, pkgstaticimport, Lpkgstaticimport.QQType1$Inner1;, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
+					"QQType1.Inner2[TYPE_REF]{Inner2, pkgstaticimport, Lpkgstaticimport.QQType1$Inner2;, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}",
+					requestor.getResults());
+		} else {
+			assertResults(
+					"QQType1.Inner2[TYPE_REF]{Inner2, pkgstaticimport, Lpkgstaticimport.QQType1$Inner2;, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}",
+					requestor.getResults());
+		}
 	} finally {
+		this.discardWorkingCopies(qqTypes);
+		
 		JavaCore.setOptions(oldOptions);
 	}
 }
 public void test0052() throws JavaModelException {
 	this.oldOptions = JavaCore.getOptions();
+	
+	ICompilationUnit[] qqTypes = null;
+	ICompilationUnit qqType2 = null;
 	try {
 		Hashtable options = new Hashtable(this.oldOptions);
 		options.put(JavaCore.CODEASSIST_VISIBILITY_CHECK, JavaCore.ENABLED);
 		JavaCore.setOptions(options);
 		
+		qqTypes = this.getExternalQQTypes();
+		
+		qqType2 = getWorkingCopy(
+				"/Completion/src3/test0052/QQType2.java",
+				"package test0052;\n"+
+				"public class QQType2 {\n"+
+				"	public class Inner1 {}\n"+
+				"	public static class Inner2 {}\n"+
+				"	protected class Inner3 {}\n"+
+				"	protected static class Inner4 {}\n"+
+				"	private class Inner5 {}\n"+
+				"	private static class Inner6 {}\n"+
+				"	class Inner7 {}\n"+
+				"	static class Inner8 {}\n"+
+				"}");
+		
+		this.wc = getWorkingCopy(
+				"/Completion/src3/test0052/Test.java",
+				"package test0052;\n"+
+				"import static test0052.QQType2.*;\n"+
+				"public class Test {\n"+
+				"	void foo() {\n"+
+				"		Inner\n"+
+				"	}\n"+
+				"}");
+		
 		CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2();
-		ICompilationUnit cu= getCompilationUnit("Completion", "src3", "test0052", "Test.java");
 	
-		String str = cu.getSource();
+		String str = this.wc.getSource();
 		String completeBehind = "Inner";
 		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-		cu.codeComplete(cursorLocation, requestor);
-	
-		assertResults(
-				"QQType2.Inner2[TYPE_REF]{Inner2, test0052, Ltest0052.QQType2$Inner2;, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
-				"QQType2.Inner4[TYPE_REF]{Inner4, test0052, Ltest0052.QQType2$Inner4;, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
-				"QQType2.Inner8[TYPE_REF]{Inner8, test0052, Ltest0052.QQType2$Inner8;, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}",
-				requestor.getResults());
+		this.wc.codeComplete(cursorLocation, requestor, this.owner);
+	
+		if(CompletionEngine.PROPOSE_MEMBER_TYPES) {
+			assertResults(
+					"QQType1.Inner1[TYPE_REF]{pkgstaticimport.QQType1.Inner1, pkgstaticimport, Lpkgstaticimport.QQType1$Inner1;, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
+					"QQType1.Inner2[TYPE_REF]{pkgstaticimport.QQType1.Inner2, pkgstaticimport, Lpkgstaticimport.QQType1$Inner2;, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
+					"QQType2.Inner1[TYPE_REF]{test0052.QQType2.Inner1, test0052, Ltest0052.QQType2$Inner1;, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
+					"QQType2.Inner3[TYPE_REF]{test0052.QQType2.Inner3, test0052, Ltest0052.QQType2$Inner3;, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
+					"QQType2.Inner7[TYPE_REF]{test0052.QQType2.Inner7, test0052, Ltest0052.QQType2$Inner7;, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
+					"QQType2.Inner2[TYPE_REF]{Inner2, test0052, Ltest0052.QQType2$Inner2;, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}\n" +
+					"QQType2.Inner4[TYPE_REF]{Inner4, test0052, Ltest0052.QQType2$Inner4;, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}\n" +
+					"QQType2.Inner8[TYPE_REF]{Inner8, test0052, Ltest0052.QQType2$Inner8;, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}",
+					requestor.getResults());
+		} else {assertResults(
+					"QQType2.Inner2[TYPE_REF]{Inner2, test0052, Ltest0052.QQType2$Inner2;, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}\n" +
+					"QQType2.Inner4[TYPE_REF]{Inner4, test0052, Ltest0052.QQType2$Inner4;, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}\n" +
+					"QQType2.Inner8[TYPE_REF]{Inner8, test0052, Ltest0052.QQType2$Inner8;, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}",
+					requestor.getResults());
+		}
 	} finally {
+		this.discardWorkingCopies(qqTypes);
+		if(qqType2 != null) {
+			qqType2.discardWorkingCopy();
+		}
+		
 		JavaCore.setOptions(oldOptions);
 	}
 }
 public void test0053() throws JavaModelException {
 	this.oldOptions = JavaCore.getOptions();
+	
+	ICompilationUnit[] qqTypes = null;
 	try {
 		Hashtable options = new Hashtable(this.oldOptions);
 		options.put(JavaCore.CODEASSIST_VISIBILITY_CHECK, JavaCore.ENABLED);
 		JavaCore.setOptions(options);
 		
+		qqTypes = this.getExternalQQTypes();
+		
+		this.wc = getWorkingCopy(
+				"/Completion/src3/test0053/Test.java",
+				"package test0053;\n"+
+				"import static pkgstaticimport.QQType1.*;\n"+
+				"public class Test extends pkgstaticimport.QQType1 {\n"+
+				"	void foo() {\n"+
+				"		Inner\n"+
+				"	}\n"+
+				"}");
+		
 		CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2();
-		ICompilationUnit cu= getCompilationUnit("Completion", "src3", "test0053", "Test.java");
 	
-		String str = cu.getSource();
+		String str = this.wc.getSource();
 		String completeBehind = "Inner";
 		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-		cu.codeComplete(cursorLocation, requestor);
+		this.wc.codeComplete(cursorLocation, requestor, this.owner);
 	
 		assertResults(
-				"QQType1.Inner1[TYPE_REF]{Inner1, pkgstaticimport, Lpkgstaticimport.QQType1$Inner1;, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
-				"QQType1.Inner2[TYPE_REF]{Inner2, pkgstaticimport, Lpkgstaticimport.QQType1$Inner2;, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
-				"QQType1.Inner3[TYPE_REF]{Inner3, pkgstaticimport, Lpkgstaticimport.QQType1$Inner3;, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
-				"QQType1.Inner4[TYPE_REF]{Inner4, pkgstaticimport, Lpkgstaticimport.QQType1$Inner4;, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}",
+				"QQType1.Inner1[TYPE_REF]{Inner1, pkgstaticimport, Lpkgstaticimport.QQType1$Inner1;, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}\n" +
+				"QQType1.Inner2[TYPE_REF]{Inner2, pkgstaticimport, Lpkgstaticimport.QQType1$Inner2;, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}\n" +
+				"QQType1.Inner3[TYPE_REF]{Inner3, pkgstaticimport, Lpkgstaticimport.QQType1$Inner3;, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}\n" +
+				"QQType1.Inner4[TYPE_REF]{Inner4, pkgstaticimport, Lpkgstaticimport.QQType1$Inner4;, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}",
 				requestor.getResults());
 	} finally {
+		this.discardWorkingCopies(qqTypes);
+		
 		JavaCore.setOptions(oldOptions);
 	}
 }
 public void test0054() throws JavaModelException {
 	this.oldOptions = JavaCore.getOptions();
+	
+	ICompilationUnit[] qqTypes = null;
 	try {
 		Hashtable options = new Hashtable(this.oldOptions);
 		options.put(JavaCore.CODEASSIST_VISIBILITY_CHECK, JavaCore.ENABLED);
 		JavaCore.setOptions(options);
 		
+		qqTypes = this.getExternalQQTypes();
+		
+		this.wc = getWorkingCopy(
+				"/Completion/src3/test0054/Test.java",
+				"package test0054;\n"+
+				"import static pkgstaticimport.QQType1.Inner2;\n"+
+				"public class Test {\n"+
+				"	void foo() {\n"+
+				"		Inner\n"+
+				"	}\n"+
+				"}");
+		
 		CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2();
-		ICompilationUnit cu= getCompilationUnit("Completion", "src3", "test0054", "Test.java");
 	
-		String str = cu.getSource();
+		String str = this.wc.getSource();
 		String completeBehind = "Inner";
 		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-		cu.codeComplete(cursorLocation, requestor);
-	
-		assertResults(
-				"QQType1.Inner2[TYPE_REF]{Inner2, pkgstaticimport, Lpkgstaticimport.QQType1$Inner2;, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}",
-				requestor.getResults());
+		this.wc.codeComplete(cursorLocation, requestor, this.owner);
+	
+		if(CompletionEngine.PROPOSE_MEMBER_TYPES) {
+			assertResults(
+					"QQType1.Inner1[TYPE_REF]{pkgstaticimport.QQType1.Inner1, pkgstaticimport, Lpkgstaticimport.QQType1$Inner1;, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
+					"QQType1.Inner2[TYPE_REF]{Inner2, pkgstaticimport, Lpkgstaticimport.QQType1$Inner2;, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}",
+					requestor.getResults());
+		} else {
+			assertResults(
+					"QQType1.Inner2[TYPE_REF]{Inner2, pkgstaticimport, Lpkgstaticimport.QQType1$Inner2;, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}",
+					requestor.getResults());
+		}
 	} finally {
+		this.discardWorkingCopies(qqTypes);
+		
 		JavaCore.setOptions(oldOptions);
 	}
 }
 public void test0055() throws JavaModelException {
 	this.oldOptions = JavaCore.getOptions();
+	
+	ICompilationUnit[] qqTypes = null;
 	try {
 		Hashtable options = new Hashtable(this.oldOptions);
 		options.put(JavaCore.CODEASSIST_VISIBILITY_CHECK, JavaCore.ENABLED);
 		JavaCore.setOptions(options);
 		
+		qqTypes = this.getExternalQQTypes();
+		
+		this.wc = getWorkingCopy(
+				"/Completion/src3/test0055/Test.java",
+				"package test0055;\n"+
+				"import static pkgstaticimport.QQType1.*;\n"+
+				"import static pkgstaticimport.QQType1.Inner2;\n"+
+				"public class Test {\n"+
+				"	void foo() {\n"+
+				"		Inner\n"+
+				"	}\n"+
+				"}");
+		
 		CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2();
-		ICompilationUnit cu= getCompilationUnit("Completion", "src3", "test0055", "Test.java");
 	
-		String str = cu.getSource();
+		String str = this.wc.getSource();
 		String completeBehind = "Inner";
 		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-		cu.codeComplete(cursorLocation, requestor);
-	
-		assertResults(
-				"QQType1.Inner2[TYPE_REF]{Inner2, pkgstaticimport, Lpkgstaticimport.QQType1$Inner2;, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}",
-				requestor.getResults());
+		this.wc.codeComplete(cursorLocation, requestor, this.owner);
+	
+		if(CompletionEngine.PROPOSE_MEMBER_TYPES) {
+			assertResults(
+					"QQType1.Inner1[TYPE_REF]{pkgstaticimport.QQType1.Inner1, pkgstaticimport, Lpkgstaticimport.QQType1$Inner1;, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
+					"QQType1.Inner2[TYPE_REF]{Inner2, pkgstaticimport, Lpkgstaticimport.QQType1$Inner2;, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}",
+					requestor.getResults());
+		} else {
+			assertResults(
+					"QQType1.Inner2[TYPE_REF]{Inner2, pkgstaticimport, Lpkgstaticimport.QQType1$Inner2;, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}",
+					requestor.getResults());
+		}
 	} finally {
+		this.discardWorkingCopies(qqTypes);
+		
 		JavaCore.setOptions(oldOptions);
 	}
 }
 public void test0056() throws JavaModelException {
 	this.oldOptions = JavaCore.getOptions();
+	
+	ICompilationUnit[] qqTypes = null;
 	try {
 		Hashtable options = new Hashtable(this.oldOptions);
 		options.put(JavaCore.CODEASSIST_VISIBILITY_CHECK, JavaCore.ENABLED);
 		JavaCore.setOptions(options);
 		
+		qqTypes = this.getExternalQQTypes();
+		
+		this.wc = getWorkingCopy(
+				"/Completion/src3/test0056/Test.java",
+				"package test0056;\n"+
+				"import static pkgstaticimport.QQType1.Inner2;\n"+
+				"import static pkgstaticimport.QQType1.*;\n"+
+				"public class Test {\n"+
+				"	void foo() {\n"+
+				"		Inner\n"+
+				"	}\n"+
+				"}");
+		
 		CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2();
-		ICompilationUnit cu= getCompilationUnit("Completion", "src3", "test0056", "Test.java");
 	
-		String str = cu.getSource();
+		String str = this.wc.getSource();
 		String completeBehind = "Inner";
 		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-		cu.codeComplete(cursorLocation, requestor);
-	
-		assertResults(
-				"QQType1.Inner2[TYPE_REF]{Inner2, pkgstaticimport, Lpkgstaticimport.QQType1$Inner2;, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}",
-				requestor.getResults());
+		this.wc.codeComplete(cursorLocation, requestor, this.owner);
+	
+		if(CompletionEngine.PROPOSE_MEMBER_TYPES) {
+			assertResults(
+					"QQType1.Inner1[TYPE_REF]{pkgstaticimport.QQType1.Inner1, pkgstaticimport, Lpkgstaticimport.QQType1$Inner1;, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
+					"QQType1.Inner2[TYPE_REF]{Inner2, pkgstaticimport, Lpkgstaticimport.QQType1$Inner2;, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}",
+					requestor.getResults());
+		} else {
+			assertResults(
+					"QQType1.Inner2[TYPE_REF]{Inner2, pkgstaticimport, Lpkgstaticimport.QQType1$Inner2;, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}",
+					requestor.getResults());
+		}
 	} finally {
+		this.discardWorkingCopies(qqTypes);
+		
 		JavaCore.setOptions(oldOptions);
 	}
 }
 public void test0057() throws JavaModelException {
 	this.oldOptions = JavaCore.getOptions();
+	
+	ICompilationUnit[] qqTypes = null;
 	try {
 		Hashtable options = new Hashtable(this.oldOptions);
 		options.put(JavaCore.CODEASSIST_VISIBILITY_CHECK, JavaCore.ENABLED);
 		JavaCore.setOptions(options);
 		
+		qqTypes = this.getExternalQQTypes();
+		
+		this.wc = getWorkingCopy(
+				"/Completion/src3/test0056/Test.java",
+				"package test0057;\n"+
+				"import static pkgstaticimport.QQType3.*;\n"+
+				"public class Test {\n"+
+				"	void foo() {\n"+
+				"		Inner\n"+
+				"	}\n"+
+				"}");
+		
 		CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2();
-		ICompilationUnit cu= getCompilationUnit("Completion", "src3", "test0057", "Test.java");
 	
-		String str = cu.getSource();
+		String str = this.wc.getSource();
 		String completeBehind = "Inner";
 		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-		cu.codeComplete(cursorLocation, requestor);
-	
-		assertResults(
-				"QQType1.Inner2[TYPE_REF]{Inner2, pkgstaticimport, Lpkgstaticimport.QQType1$Inner2;, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}",
-				requestor.getResults());
+		this.wc.codeComplete(cursorLocation, requestor, this.owner);
+	
+		if(CompletionEngine.PROPOSE_MEMBER_TYPES) {
+			assertResults(
+					"QQType1.Inner1[TYPE_REF]{pkgstaticimport.QQType1.Inner1, pkgstaticimport, Lpkgstaticimport.QQType1$Inner1;, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
+					"QQType1.Inner2[TYPE_REF]{Inner2, pkgstaticimport, Lpkgstaticimport.QQType1$Inner2;, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}",
+					requestor.getResults());
+		} else {
+			assertResults(
+					"QQType1.Inner2[TYPE_REF]{Inner2, pkgstaticimport, Lpkgstaticimport.QQType1$Inner2;, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}",
+					requestor.getResults());
+		}
 	} finally {
+		this.discardWorkingCopies(qqTypes);
+		
 		JavaCore.setOptions(oldOptions);
 	}
 }
 public void test0058() throws JavaModelException {
 	this.oldOptions = JavaCore.getOptions();
+	
+	ICompilationUnit[] qqTypes = null;
 	try {
 		Hashtable options = new Hashtable(this.oldOptions);
 		options.put(JavaCore.CODEASSIST_VISIBILITY_CHECK, JavaCore.ENABLED);
 		JavaCore.setOptions(options);
 		
+		qqTypes = this.getExternalQQTypes();
+		
 		CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2();
 		ICompilationUnit cu= getCompilationUnit("Completion", "src3", "test0058", "Test.java");
 	
 		String str = cu.getSource();
 		String completeBehind = "zzvarzz";
 		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-		cu.codeComplete(cursorLocation, requestor);
+		cu.codeComplete(cursorLocation, requestor, this.owner);
 	
 		assertResults(
 				"zzvarzz2[FIELD_REF]{zzvarzz2, Lpkgstaticimport.QQType4;, I, zzvarzz2, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}",
 				requestor.getResults());
 	} finally {
+		this.discardWorkingCopies(qqTypes);
+		
 		JavaCore.setOptions(oldOptions);
 	}
 }
 public void test0059() throws JavaModelException {
 	this.oldOptions = JavaCore.getOptions();
+	
+	ICompilationUnit[] qqTypes = null;
+	ICompilationUnit qqType5 = null;
 	try {
 		Hashtable options = new Hashtable(this.oldOptions);
 		options.put(JavaCore.CODEASSIST_VISIBILITY_CHECK, JavaCore.ENABLED);
 		JavaCore.setOptions(options);
 		
+		qqTypes = this.getExternalQQTypes();
+		
+		qqType5 = getWorkingCopy(
+				"/Completion/src3/test0059/QQType5.java",
+				"package test0059;\n"+
+				"\n"+
+				"public class QQType5 {\n"+
+				"	public int zzvarzz1;\n"+
+				"	public static int zzvarzz2;\n"+
+				"	protected int zzvarzz3;\n"+
+				"	protected static int zzvarzz4;\n"+
+				"	private int zzvarzz5;\n"+
+				"	private static int zzvarzz6;\n"+
+				"	int zzvarzz7;\n"+
+				"	static int zzvarzz8;\n"+
+				"}");
+		
 		CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2();
 		ICompilationUnit cu= getCompilationUnit("Completion", "src3", "test0059", "Test.java");
 	
 		String str = cu.getSource();
 		String completeBehind = "zzvarzz";
 		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-		cu.codeComplete(cursorLocation, requestor);
+		cu.codeComplete(cursorLocation, requestor, this.owner);
 	
 		assertResults(
 				"zzvarzz2[FIELD_REF]{zzvarzz2, Ltest0059.QQType5;, I, zzvarzz2, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}\n" +
@@ -972,23 +1523,31 @@ public void test0059() throws JavaModelException {
 				"zzvarzz8[FIELD_REF]{zzvarzz8, Ltest0059.QQType5;, I, zzvarzz8, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}",
 				requestor.getResults());
 	} finally {
+		this.discardWorkingCopies(qqTypes);
+		if(qqType5 != null) {
+			qqType5.discardWorkingCopy();
+		}
 		JavaCore.setOptions(oldOptions);
 	}
 }
 public void test0060() throws JavaModelException {
 	this.oldOptions = JavaCore.getOptions();
+	
+	ICompilationUnit[] qqTypes = null;
 	try {
 		Hashtable options = new Hashtable(this.oldOptions);
 		options.put(JavaCore.CODEASSIST_VISIBILITY_CHECK, JavaCore.ENABLED);
 		JavaCore.setOptions(options);
 		
+		qqTypes = this.getExternalQQTypes();
+		
 		CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2();
 		ICompilationUnit cu= getCompilationUnit("Completion", "src3", "test0060", "Test.java");
 	
 		String str = cu.getSource();
 		String completeBehind = "zzvarzz";
 		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-		cu.codeComplete(cursorLocation, requestor);
+		cu.codeComplete(cursorLocation, requestor, this.owner);
 	
 		assertResults(
 				"zzvarzz1[FIELD_REF]{zzvarzz1, Lpkgstaticimport.QQType4;, I, zzvarzz1, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}\n" +
@@ -997,133 +1556,185 @@ public void test0060() throws JavaModelException {
 				"zzvarzz4[FIELD_REF]{zzvarzz4, Lpkgstaticimport.QQType4;, I, zzvarzz4, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}",
 				requestor.getResults());
 	} finally {
+		this.discardWorkingCopies(qqTypes);
+		
 		JavaCore.setOptions(oldOptions);
 	}
 }
 public void test0061() throws JavaModelException {
 	this.oldOptions = JavaCore.getOptions();
+	
+	ICompilationUnit[] qqTypes = null;
 	try {
 		Hashtable options = new Hashtable(this.oldOptions);
 		options.put(JavaCore.CODEASSIST_VISIBILITY_CHECK, JavaCore.ENABLED);
 		JavaCore.setOptions(options);
 		
+		qqTypes = this.getExternalQQTypes();
+		
 		CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2();
 		ICompilationUnit cu= getCompilationUnit("Completion", "src3", "test0061", "Test.java");
 	
 		String str = cu.getSource();
 		String completeBehind = "zzvarzz";
 		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-		cu.codeComplete(cursorLocation, requestor);
+		cu.codeComplete(cursorLocation, requestor, this.owner);
 	
 		assertResults(
 				"zzvarzz2[FIELD_REF]{zzvarzz2, Lpkgstaticimport.QQType4;, I, zzvarzz2, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}",
 				requestor.getResults());
 	} finally {
+		this.discardWorkingCopies(qqTypes);
+		
 		JavaCore.setOptions(oldOptions);
 	}
 }
 public void test0062() throws JavaModelException {
 	this.oldOptions = JavaCore.getOptions();
+	
+	ICompilationUnit[] qqTypes = null;
 	try {
 		Hashtable options = new Hashtable(this.oldOptions);
 		options.put(JavaCore.CODEASSIST_VISIBILITY_CHECK, JavaCore.ENABLED);
 		JavaCore.setOptions(options);
 		
+		qqTypes = this.getExternalQQTypes();
+		
 		CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2();
 		ICompilationUnit cu= getCompilationUnit("Completion", "src3", "test0062", "Test.java");
 	
 		String str = cu.getSource();
 		String completeBehind = "zzvarzz";
 		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-		cu.codeComplete(cursorLocation, requestor);
+		cu.codeComplete(cursorLocation, requestor, this.owner);
 	
 		assertResults(
 				"zzvarzz2[FIELD_REF]{zzvarzz2, Lpkgstaticimport.QQType4;, I, zzvarzz2, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}",
 				requestor.getResults());
 	} finally {
+		this.discardWorkingCopies(qqTypes);
+		
 		JavaCore.setOptions(oldOptions);
 	}
 }
 public void test0063() throws JavaModelException {
 	this.oldOptions = JavaCore.getOptions();
+	
+	ICompilationUnit[] qqTypes = null;
 	try {
 		Hashtable options = new Hashtable(this.oldOptions);
 		options.put(JavaCore.CODEASSIST_VISIBILITY_CHECK, JavaCore.ENABLED);
 		JavaCore.setOptions(options);
 		
+		qqTypes = this.getExternalQQTypes();
+		
 		CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2();
 		ICompilationUnit cu= getCompilationUnit("Completion", "src3", "test0063", "Test.java");
 	
 		String str = cu.getSource();
 		String completeBehind = "zzvarzz";
 		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-		cu.codeComplete(cursorLocation, requestor);
+		cu.codeComplete(cursorLocation, requestor, this.owner);
 	
 		assertResults(
 				"zzvarzz2[FIELD_REF]{zzvarzz2, Lpkgstaticimport.QQType4;, I, zzvarzz2, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}",
 				requestor.getResults());
 	} finally {
+		this.discardWorkingCopies(qqTypes);
+		
 		JavaCore.setOptions(oldOptions);
 	}
 }
 public void test0064() throws JavaModelException {
 	this.oldOptions = JavaCore.getOptions();
+	
+	ICompilationUnit[] qqTypes = null;
 	try {
 		Hashtable options = new Hashtable(this.oldOptions);
 		options.put(JavaCore.CODEASSIST_VISIBILITY_CHECK, JavaCore.ENABLED);
 		JavaCore.setOptions(options);
 		
+		qqTypes = this.getExternalQQTypes();
+		
 		CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2();
 		ICompilationUnit cu= getCompilationUnit("Completion", "src3", "test0064", "Test.java");
 	
 		String str = cu.getSource();
 		String completeBehind = "zzvarzz";
 		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-		cu.codeComplete(cursorLocation, requestor);
+		cu.codeComplete(cursorLocation, requestor, this.owner);
 	
 		assertResults(
 				"zzvarzz2[FIELD_REF]{zzvarzz2, Lpkgstaticimport.QQType4;, I, zzvarzz2, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}",
 				requestor.getResults());
 	} finally {
+		this.discardWorkingCopies(qqTypes);
+		
 		JavaCore.setOptions(oldOptions);
 	}
 }
 public void test0065() throws JavaModelException {
 	this.oldOptions = JavaCore.getOptions();
+	
+	ICompilationUnit[] qqTypes = null;
 	try {
 		Hashtable options = new Hashtable(this.oldOptions);
 		options.put(JavaCore.CODEASSIST_VISIBILITY_CHECK, JavaCore.ENABLED);
 		JavaCore.setOptions(options);
 		
+		qqTypes = this.getExternalQQTypes();
+		
 		CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2();
 		ICompilationUnit cu= getCompilationUnit("Completion", "src3", "test0065", "Test.java");
 	
 		String str = cu.getSource();
 		String completeBehind = "zzfoozz";
 		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-		cu.codeComplete(cursorLocation, requestor);
+		cu.codeComplete(cursorLocation, requestor, this.owner);
 	
 		assertResults(
 				"zzfoozz2[METHOD_REF]{zzfoozz2(), Lpkgstaticimport.QQType7;, ()V, zzfoozz2, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}",
 				requestor.getResults());
 	} finally {
+		this.discardWorkingCopies(qqTypes);
+		
 		JavaCore.setOptions(oldOptions);
 	}
 }
 public void test0066() throws JavaModelException {
 	this.oldOptions = JavaCore.getOptions();
+	
+	ICompilationUnit[] qqTypes = null;
+	ICompilationUnit qqType8 = null;
 	try {
 		Hashtable options = new Hashtable(this.oldOptions);
 		options.put(JavaCore.CODEASSIST_VISIBILITY_CHECK, JavaCore.ENABLED);
 		JavaCore.setOptions(options);
 		
+		qqTypes = this.getExternalQQTypes();
+		
+		qqType8 = getWorkingCopy(
+				"/Completion/src3/test0066/QQType8.java",
+				"package test0066;\n"+
+				"\n"+
+				"public class QQType8 {\n"+
+				"	public void zzfoozz1(){};\n"+
+				"	public static void zzfoozz2(){};\n"+
+				"	protected void zzfoozz3(){};\n"+
+				"	protected static void zzfoozz4(){};\n"+
+				"	private void zzfoozz5(){};\n"+
+				"	private static void zzfoozz6(){};\n"+
+				"	void zzfoozz7(){};\n"+
+				"	static void zzfoozz8(){};\n"+
+				"}");
+		
 		CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2();
 		ICompilationUnit cu= getCompilationUnit("Completion", "src3", "test0066", "Test.java");
 	
 		String str = cu.getSource();
 		String completeBehind = "zzfoozz";
 		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-		cu.codeComplete(cursorLocation, requestor);
+		cu.codeComplete(cursorLocation, requestor, this.owner);
 	
 		assertResults(
 				"zzfoozz2[METHOD_REF]{zzfoozz2(), Ltest0066.QQType8;, ()V, zzfoozz2, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}\n" +
@@ -1131,23 +1742,31 @@ public void test0066() throws JavaModelException {
 				"zzfoozz8[METHOD_REF]{zzfoozz8(), Ltest0066.QQType8;, ()V, zzfoozz8, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}",
 				requestor.getResults());
 	} finally {
+		this.discardWorkingCopies(qqTypes);
+		if(qqType8 != null) {
+			qqType8.discardWorkingCopy();
+		}
 		JavaCore.setOptions(oldOptions);
 	}
 }
 public void test0067() throws JavaModelException {
 	this.oldOptions = JavaCore.getOptions();
+	
+	ICompilationUnit[] qqTypes = null;
 	try {
 		Hashtable options = new Hashtable(this.oldOptions);
 		options.put(JavaCore.CODEASSIST_VISIBILITY_CHECK, JavaCore.ENABLED);
 		JavaCore.setOptions(options);
 		
+		qqTypes = this.getExternalQQTypes();
+		
 		CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2();
 		ICompilationUnit cu= getCompilationUnit("Completion", "src3", "test0067", "Test.java");
 	
 		String str = cu.getSource();
 		String completeBehind = "zzfoozz";
 		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-		cu.codeComplete(cursorLocation, requestor);
+		cu.codeComplete(cursorLocation, requestor, this.owner);
 	
 		assertResults(
 				"zzfoozz1[METHOD_REF]{zzfoozz1(), Lpkgstaticimport.QQType7;, ()V, zzfoozz1, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}\n" +
@@ -1156,28 +1775,36 @@ public void test0067() throws JavaModelException {
 				"zzfoozz4[METHOD_REF]{zzfoozz4(), Lpkgstaticimport.QQType7;, ()V, zzfoozz4, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}",
 				requestor.getResults());
 	} finally {
+		this.discardWorkingCopies(qqTypes);
+		
 		JavaCore.setOptions(oldOptions);
 	}
 }
 public void test0068() throws JavaModelException {
 	this.oldOptions = JavaCore.getOptions();
+	
+	ICompilationUnit[] qqTypes = null;
 	try {
 		Hashtable options = new Hashtable(this.oldOptions);
 		options.put(JavaCore.CODEASSIST_VISIBILITY_CHECK, JavaCore.ENABLED);
 		JavaCore.setOptions(options);
 		
+		qqTypes = this.getExternalQQTypes();
+		
 		CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2();
 		ICompilationUnit cu= getCompilationUnit("Completion", "src3", "test0068", "Test.java");
 	
 		String str = cu.getSource();
 		String completeBehind = "zzfoozz";
 		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-		cu.codeComplete(cursorLocation, requestor);
+		cu.codeComplete(cursorLocation, requestor, this.owner);
 	
 		assertResults(
 				"zzfoozz2[METHOD_REF]{zzfoozz2(), Lpkgstaticimport.QQType7;, ()V, zzfoozz2, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}",
 				requestor.getResults());
 	} finally {
+		this.discardWorkingCopies(qqTypes);
+		
 		JavaCore.setOptions(oldOptions);
 	}
 }
@@ -1201,88 +1828,173 @@ public void test0069() throws JavaModelException {
  * https://bugs.eclipse.org/bugs/show_bug.cgi?id=77573
  */
 public void test0070() throws JavaModelException {
-	CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
-	ICompilationUnit cu= getCompilationUnit("Completion", "src3", "test0070", "Test.java");
-
-	String str = cu.getSource();
-	String completeBehind = "test0070";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-
-	assertResults(
-			"test0070.p[PACKAGE_REF]{test0070.p.*;, test0070.p, null, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
-			"test0070[PACKAGE_REF]{test0070.*;, test0070, null, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_NON_RESTRICTED) + "}",
-			requestor.getResults());
+	ICompilationUnit importedClass = null;
+	try {
+		importedClass = getWorkingCopy(
+				"/Completion/src3/test0070/p/ImportedClass.java",
+				"package test0070.p;\n"+
+				"\n"+
+				"public class ImportedClass {\n"+
+				"	\n"+
+				"}");
+		
+		CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+		ICompilationUnit cu= getCompilationUnit("Completion", "src3", "test0070", "Test.java");
+	
+		String str = cu.getSource();
+		String completeBehind = "test0070";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor, this.owner);
+	
+		assertResults(
+				"test0070.p[PACKAGE_REF]{test0070.p.*;, test0070.p, null, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
+				"test0070[PACKAGE_REF]{test0070.*;, test0070, null, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_NON_RESTRICTED) + "}",
+				requestor.getResults());
+	} finally {
+		if(importedClass != null) {
+			importedClass.discardWorkingCopy();
+		}
+	}
 }
 /*
  * https://bugs.eclipse.org/bugs/show_bug.cgi?id=77573
  */
 public void test0071() throws JavaModelException {
-	CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
-	ICompilationUnit cu= getCompilationUnit("Completion", "src3", "test0071", "Test.java");
-
-	String str = cu.getSource();
-	String completeBehind = "test0071.p.Im";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-
-	assertResults(
-			"ImportedClass[TYPE_REF]{test0071.p.ImportedClass;, test0071.p, Ltest0071.p.ImportedClass;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}",
-			requestor.getResults());
+	ICompilationUnit importedClass = null;
+	try {
+		importedClass = getWorkingCopy(
+				"/Completion/src3/test0071/p/ImportedClass.java",
+				"package test0071.p;\n"+
+				"\n"+
+				"public class ImportedClass {\n"+
+				"	\n"+
+				"}");
+		
+		CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+		ICompilationUnit cu= getCompilationUnit("Completion", "src3", "test0071", "Test.java");
+	
+		String str = cu.getSource();
+		String completeBehind = "test0071.p.Im";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor, this.owner);
+	
+		assertResults(
+				"ImportedClass[TYPE_REF]{test0071.p.ImportedClass;, test0071.p, Ltest0071.p.ImportedClass;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}",
+				requestor.getResults());
+	} finally {
+		if(importedClass != null) {
+			importedClass.discardWorkingCopy();
+		}
+	}
 }
 /*
  * https://bugs.eclipse.org/bugs/show_bug.cgi?id=77573
  */
 public void test0072() throws JavaModelException {
-	CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
-	ICompilationUnit cu= getCompilationUnit("Completion", "src3", "test0072", "Test.java");
-
-	String str = cu.getSource();
-	String completeBehind = "test0072.p.ImportedClass.ZZ";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-
-	assertResults(
-			"ZZZ1[FIELD_REF]{test0072.p.ImportedClass.ZZZ1;, Ltest0072.p.ImportedClass;, I, ZZZ1, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
-			"ZZZ2[METHOD_IMPORT]{test0072.p.ImportedClass.ZZZ2;, Ltest0072.p.ImportedClass;, ()V, ZZZ2, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
-			"ZZZ2[METHOD_IMPORT]{test0072.p.ImportedClass.ZZZ2;, Ltest0072.p.ImportedClass;, (I)V, ZZZ2, (i), " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}",
-			requestor.getResults());
+	ICompilationUnit importedClass = null;
+	try {
+		importedClass = getWorkingCopy(
+				"/Completion/src3/test0072/p/ImportedClass.java",
+				"package test0072.p;\n"+
+				"\n"+
+				"public class ImportedClass {\n"+
+				"	public static int ZZZ1;\n"+
+				"	public static void ZZZ2() {}\n"+
+				"	public static void ZZZ2(int i) {}\n"+
+				"}");
+		
+		CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+		ICompilationUnit cu= getCompilationUnit("Completion", "src3", "test0072", "Test.java");
+	
+		String str = cu.getSource();
+		String completeBehind = "test0072.p.ImportedClass.ZZ";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor, this.owner);
+	
+		assertResults(
+				"ZZZ1[FIELD_REF]{test0072.p.ImportedClass.ZZZ1;, Ltest0072.p.ImportedClass;, I, ZZZ1, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
+				"ZZZ2[METHOD_IMPORT]{test0072.p.ImportedClass.ZZZ2;, Ltest0072.p.ImportedClass;, ()V, ZZZ2, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
+				"ZZZ2[METHOD_IMPORT]{test0072.p.ImportedClass.ZZZ2;, Ltest0072.p.ImportedClass;, (I)V, ZZZ2, (i), " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}",
+				requestor.getResults());
+	} finally {
+		if(importedClass != null) {
+			importedClass.discardWorkingCopy();
+		}
+	}
 }
 /*
  * https://bugs.eclipse.org/bugs/show_bug.cgi?id=77573
  */
 public void test0073() throws JavaModelException {
-	CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
-	ICompilationUnit cu= getCompilationUnit("Completion", "src3", "test0073", "Test.java");
-
-	String str = cu.getSource();
-	String completeBehind = "test0073.p.ImportedClass.Inner.ZZ";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-
-	assertResults(
-			"ZZZ1[FIELD_REF]{test0073.p.ImportedClass.Inner.ZZZ1;, Ltest0073.p.ImportedClass$Inner;, I, ZZZ1, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
-			"ZZZ2[METHOD_IMPORT]{test0073.p.ImportedClass.Inner.ZZZ2;, Ltest0073.p.ImportedClass$Inner;, ()V, ZZZ2, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
-			"ZZZ2[METHOD_IMPORT]{test0073.p.ImportedClass.Inner.ZZZ2;, Ltest0073.p.ImportedClass$Inner;, (I)V, ZZZ2, (i), " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}",
-			requestor.getResults());
+	ICompilationUnit importedClass = null;
+	try {
+		importedClass = getWorkingCopy(
+				"/Completion/src3/test0073/p/ImportedClass.java",
+				"package test0073.p;\n"+
+				"\n"+
+				"public class ImportedClass {\n"+
+				"	public static class Inner {\n"+
+				"		public static int ZZZ1;\n"+
+				"		public static void ZZZ2() {}\n"+
+				"		public static void ZZZ2(int i) {}\n"+
+				"	}\n"+
+				"}");
+		
+		CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+		ICompilationUnit cu= getCompilationUnit("Completion", "src3", "test0073", "Test.java");
+	
+		String str = cu.getSource();
+		String completeBehind = "test0073.p.ImportedClass.Inner.ZZ";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor, this.owner);
+	
+		assertResults(
+				"ZZZ1[FIELD_REF]{test0073.p.ImportedClass.Inner.ZZZ1;, Ltest0073.p.ImportedClass$Inner;, I, ZZZ1, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
+				"ZZZ2[METHOD_IMPORT]{test0073.p.ImportedClass.Inner.ZZZ2;, Ltest0073.p.ImportedClass$Inner;, ()V, ZZZ2, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
+				"ZZZ2[METHOD_IMPORT]{test0073.p.ImportedClass.Inner.ZZZ2;, Ltest0073.p.ImportedClass$Inner;, (I)V, ZZZ2, (i), " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}",
+				requestor.getResults());
+	} finally {
+		if(importedClass != null) {
+			importedClass.discardWorkingCopy();
+		}
+	}
 }
 /*
  * https://bugs.eclipse.org/bugs/show_bug.cgi?id=77573
  */
 public void test0074() throws JavaModelException {
-	CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
-	ICompilationUnit cu= getCompilationUnit("Completion", "src3", "test0074", "Test.java");
-
-	String str = cu.getSource();
-	String completeBehind = "test0074.p.ImportedClass.Inner.ZZ";
-	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
-	cu.codeComplete(cursorLocation, requestor);
-
-	assertResults(
-			"ZZZ1[FIELD_REF]{test0074.p.ImportedClass.Inner.ZZZ1;, Ltest0074.p.ImportedClass$Inner;, I, ZZZ1, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
-			"ZZZ2[METHOD_IMPORT]{test0074.p.ImportedClass.Inner.ZZZ2;, Ltest0074.p.ImportedClass$Inner;, ()V, ZZZ2, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
-			"ZZZ2[METHOD_IMPORT]{test0074.p.ImportedClass.Inner.ZZZ2;, Ltest0074.p.ImportedClass$Inner;, (I)V, ZZZ2, (i), " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}",
-			requestor.getResults());
+	ICompilationUnit importedClass = null;
+	try {
+		importedClass = getWorkingCopy(
+				"/Completion/src3/test0074/p/ImportedClass.java",
+				"package test0074.p;\n"+
+				"\n"+
+				"public class ImportedClass {\n"+
+				"	public class Inner {\n"+
+				"		public static int ZZZ1;\n"+
+				"		public static void ZZZ2() {}\n"+
+				"		public static void ZZZ2(int i) {}\n"+
+				"	}\n"+
+				"}");
+		
+		CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+		ICompilationUnit cu= getCompilationUnit("Completion", "src3", "test0074", "Test.java");
+	
+		String str = cu.getSource();
+		String completeBehind = "test0074.p.ImportedClass.Inner.ZZ";
+		int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+		cu.codeComplete(cursorLocation, requestor, this.owner);
+	
+		assertResults(
+				"ZZZ1[FIELD_REF]{test0074.p.ImportedClass.Inner.ZZZ1;, Ltest0074.p.ImportedClass$Inner;, I, ZZZ1, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
+				"ZZZ2[METHOD_IMPORT]{test0074.p.ImportedClass.Inner.ZZZ2;, Ltest0074.p.ImportedClass$Inner;, ()V, ZZZ2, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
+				"ZZZ2[METHOD_IMPORT]{test0074.p.ImportedClass.Inner.ZZZ2;, Ltest0074.p.ImportedClass$Inner;, (I)V, ZZZ2, (i), " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}",
+				requestor.getResults());
+	} finally {
+		if(importedClass != null) {
+			importedClass.discardWorkingCopy();
+		}
+	}
 }
 public void test0075() throws JavaModelException {
 	this.wc = getWorkingCopy(
@@ -5437,4 +6149,240 @@ public void test0201() throws JavaModelException {
             "ZZAnnot[TYPE_REF]{, test0201, Ltest0201.ZZAnnot;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_NAME + R_UNQUALIFIED + + R_NON_RESTRICTED) + "}",
             result.proposals);
 }
+public void test0202() throws JavaModelException {
+	ICompilationUnit aType = null;
+	try {
+		aType = getWorkingCopy(
+	            "/Completion/src3/p/ZZType.java",
+	            "package p;\n" +
+	            "public class ZZType {\n" +
+	            "  public class ZZClass {" +
+	            "  }" +
+	            "  public interface ZZInterface {" +
+	            "  }" +
+	            "  public enum ZZEnum {" +
+	            "  }" +
+	            "  public @interface ZZAnnotation {" +
+	            "  }" +
+	            "}");
+		
+	    CompletionResult result = complete(
+	            "/Completion/src3/test0202/Test.java",
+	            "package test0202;\n" +
+	            "public class Test {\n" +
+	            "  public void foo() {" +
+	            "    ZZ" +
+	            "  }" +
+	            "}",
+            	"ZZ");
+	    
+	
+	    assertResults(
+	            "expectedTypesSignatures=null\n" +
+	            "expectedTypesKeys=null",
+	            result.context);
+	    
+	    if(CompletionEngine.PROPOSE_MEMBER_TYPES) {
+		    assertResults(
+		            "ZZType[TYPE_REF]{p.ZZType, p, Lp.ZZType;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
+					"ZZType.ZZAnnotation[TYPE_REF]{p.ZZType.ZZAnnotation, p, Lp.ZZType$ZZAnnotation;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
+					"ZZType.ZZClass[TYPE_REF]{p.ZZType.ZZClass, p, Lp.ZZType$ZZClass;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
+					"ZZType.ZZEnum[TYPE_REF]{p.ZZType.ZZEnum, p, Lp.ZZType$ZZEnum;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}\n" +
+					"ZZType.ZZInterface[TYPE_REF]{p.ZZType.ZZInterface, p, Lp.ZZType$ZZInterface;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}",
+		            result.proposals);
+	    } else {
+	    	assertResults(
+		            "ZZType[TYPE_REF]{p.ZZType, p, Lp.ZZType;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}",
+		            result.proposals);
+	    }
+	} finally {
+		if(aType != null) {
+			aType.discardWorkingCopy();
+		}
+	}
+}
+public void test0203() throws JavaModelException {
+	ICompilationUnit aType = null;
+	try {
+		aType = getWorkingCopy(
+	            "/Completion/src3/p/ZZType.java",
+	            "package p;\n" +
+	            "public class ZZType {\n" +
+	            "  public class ZZClass {" +
+	            "  }" +
+	            "  public interface ZZInterface {" +
+	            "  }" +
+	            "  public enum ZZEnum {" +
+	            "  }" +
+	            "  public @interface ZZAnnotation {" +
+	            "  }" +
+	            "}");
+		
+	    CompletionResult result = complete(
+	            "/Completion/src3/test0203/Test.java",
+	            "package test0203;\n" +
+	            "public class Test extends ZZ{\n" +
+	            "}",
+            	"ZZ");
+	    
+	
+	    assertResults(
+	            "expectedTypesSignatures=null\n" +
+	            "expectedTypesKeys=null",
+	            result.context);
+	    
+	    if(CompletionEngine.PROPOSE_MEMBER_TYPES) {
+		    assertResults(
+		            "ZZType[TYPE_REF]{p.ZZType, p, Lp.ZZType;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_CLASS + R_NON_RESTRICTED) + "}\n" +
+					"ZZType.ZZClass[TYPE_REF]{p.ZZType.ZZClass, p, Lp.ZZType$ZZClass;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_CLASS + R_NON_RESTRICTED) + "}",
+		            result.proposals);
+	    } else {
+	    	assertResults(
+		            "ZZType[TYPE_REF]{p.ZZType, p, Lp.ZZType;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_CLASS + R_NON_RESTRICTED) + "}",
+		            result.proposals);
+	    }
+	} finally {
+		if(aType != null) {
+			aType.discardWorkingCopy();
+		}
+	}
+}
+public void test0204() throws JavaModelException {
+	ICompilationUnit aType = null;
+	try {
+		aType = getWorkingCopy(
+	            "/Completion/src3/p/ZZType.java",
+	            "package p;\n" +
+	            "public class ZZType {\n" +
+	            "  public class ZZClass {" +
+	            "  }" +
+	            "  public interface ZZInterface {" +
+	            "  }" +
+	            "  public enum ZZEnum {" +
+	            "  }" +
+	            "  public @interface ZZAnnotation {" +
+	            "  }" +
+	            "}");
+		
+	    CompletionResult result = complete(
+	            "/Completion/src3/test0204/Test.java",
+	            "package test0204;\n" +
+	            "public interface Test extends ZZ{\n" +
+	            "}",
+            	"ZZ");
+	    
+	
+	    assertResults(
+	            "expectedTypesSignatures=null\n" +
+	            "expectedTypesKeys=null",
+	            result.context);
+	    
+	    if(CompletionEngine.PROPOSE_MEMBER_TYPES) {
+		    assertResults(
+		            "ZZType.ZZAnnotation[TYPE_REF]{p.ZZType.ZZAnnotation, p, Lp.ZZType$ZZAnnotation;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_INTERFACE + R_NON_RESTRICTED) + "}\n" +
+					"ZZType.ZZInterface[TYPE_REF]{p.ZZType.ZZInterface, p, Lp.ZZType$ZZInterface;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_INTERFACE + R_NON_RESTRICTED) + "}",
+		            result.proposals);
+	    } else {
+	    	assertResults(
+		            "ZZType[TYPE_REF]{p.ZZType, p, Lp.ZZType;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}",
+		            result.proposals);
+	    }
+	} finally {
+		if(aType != null) {
+			aType.discardWorkingCopy();
+		}
+	}
+}
+public void test0205() throws JavaModelException {
+	ICompilationUnit aType = null;
+	try {
+		aType = getWorkingCopy(
+	            "/Completion/src3/p/ZZType.java",
+	            "package p;\n" +
+	            "public class ZZType {\n" +
+	            "  public class ZZClass {" +
+	            "  }" +
+	            "  public interface ZZInterface {" +
+	            "  }" +
+	            "  public enum ZZEnum {" +
+	            "  }" +
+	            "  public @interface ZZAnnotation {" +
+	            "  }" +
+	            "}");
+		
+	    CompletionResult result = complete(
+	            "/Completion/src3/test0205/Test.java",
+	            "package test0205;\n" +
+	            "public class Test implements ZZ {\n" +
+	            "}",
+            	"ZZ");
+	    
+	
+	    assertResults(
+	            "expectedTypesSignatures=null\n" +
+	            "expectedTypesKeys=null",
+	            result.context);
+	    
+	    if(CompletionEngine.PROPOSE_MEMBER_TYPES) {
+		    assertResults(
+		            "ZZType.ZZAnnotation[TYPE_REF]{p.ZZType.ZZAnnotation, p, Lp.ZZType$ZZAnnotation;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_INTERFACE + R_NON_RESTRICTED) + "}\n" +
+					"ZZType.ZZInterface[TYPE_REF]{p.ZZType.ZZInterface, p, Lp.ZZType$ZZInterface;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_INTERFACE + R_NON_RESTRICTED) + "}",
+		            result.proposals);
+	    } else {
+	    	assertResults(
+		            "ZZType[TYPE_REF]{p.ZZType, p, Lp.ZZType;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}",
+		            result.proposals);
+	    }
+	} finally {
+		if(aType != null) {
+			aType.discardWorkingCopy();
+		}
+	}
+}
+public void test0206() throws JavaModelException {
+	ICompilationUnit aType = null;
+	try {
+		aType = getWorkingCopy(
+	            "/Completion/src3/p/ZZType.java",
+	            "package p;\n" +
+	            "public class ZZType {\n" +
+	            "  public class ZZClass {" +
+	            "  }" +
+	            "  public interface ZZInterface {" +
+	            "  }" +
+	            "  public enum ZZEnum {" +
+	            "  }" +
+	            "  public @interface ZZAnnotation {" +
+	            "  }" +
+	            "}");
+		
+	    CompletionResult result = complete(
+	            "/Completion/src3/test0206/Test.java",
+	            "package test0206;\n" +
+	            "@ZZ\n" +
+	            "public class Test {\n" +
+	            "}",
+            	"ZZ");
+	    
+	
+	    assertResults(
+	            "expectedTypesSignatures=null\n" +
+	            "expectedTypesKeys=null",
+	            result.context);
+	    
+	    if(CompletionEngine.PROPOSE_MEMBER_TYPES) {
+		    assertResults(
+		            "ZZType.ZZAnnotation[TYPE_REF]{p.ZZType.ZZAnnotation, p, Lp.ZZType$ZZAnnotation;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_ANNOTATION + R_NON_RESTRICTED) + "}",
+		            result.proposals);
+	    } else {
+	    	assertResults(
+		            "ZZType[TYPE_REF]{p.ZZType, p, Lp.ZZType;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}",
+		            result.proposals);
+	    }
+	} finally {
+		if(aType != null) {
+			aType.discardWorkingCopy();
+		}
+	}
+}
 }
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAbstractMethod1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAbstractMethod1.java
deleted file mode 100644
index 4e54509..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAbstractMethod1.java
+++ /dev/null
@@ -1,11 +0,0 @@
-public class CompletionAbstractMethod1 {
-	abstract class A {
-		abstract void foo();
-	}
-	class B extends A {
-		void foo{} {}
-		void bar() {
-			super.fo
-		}
-	}
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAbstractMethod2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAbstractMethod2.java
deleted file mode 100644
index f20bf91..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAbstractMethod2.java
+++ /dev/null
@@ -1,11 +0,0 @@
-public class CompletionAbstractMethod2 {
-	abstract class A {
-		abstract void foo();
-	}
-	class B extends A {
-		void foo{} {}
-		void bar() {
-			this.fo
-		}
-	}
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAbstractMethod3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAbstractMethod3.java
deleted file mode 100644
index 32227c9..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAbstractMethod3.java
+++ /dev/null
@@ -1,10 +0,0 @@
-public class CompletionAbstractMethod3 {
-	abstract class A {
-		abstract void foo();
-	}
-	class B extends A {
-		void bar() {
-			this.fo
-		}
-	}
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAbstractMethod4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAbstractMethod4.java
deleted file mode 100644
index dc83813..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAbstractMethod4.java
+++ /dev/null
@@ -1,14 +0,0 @@
-public class CompletionAbstractMethod1 {
-	class A {
-		void foo(){}
-	}
-	abstract class B extends A {
-		abstract void foo();
-	}
-	class C extends B {
-		void foo{} {}
-		void bar() {
-			super.fo
-		}
-	}
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAbstractMethodRelevance1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAbstractMethodRelevance1.java
deleted file mode 100644
index a7de787..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAbstractMethodRelevance1.java
+++ /dev/null
@@ -1,3 +0,0 @@
-public class CompletionAbstractMethodRelevance1 extends CompletionAbstractSuperClass {
-	foo
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAbstractMethodRelevance2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAbstractMethodRelevance2.java
deleted file mode 100644
index ecc242b..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAbstractMethodRelevance2.java
+++ /dev/null
@@ -1,3 +0,0 @@
-public class CompletionAbstractMethodRelevance2 implements CompletionSuperInterface {
-	eq
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAbstractSuperClass.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAbstractSuperClass.java
deleted file mode 100644
index 05d75e3..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAbstractSuperClass.java
+++ /dev/null
@@ -1,5 +0,0 @@
-public abstract class CompletionAbstractSuperClass {
-	public void foo1(){}
-	public abstract void foo2();
-	public void foo3(){}
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAllocationExpressionIsParent2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAllocationExpressionIsParent2.java
deleted file mode 100644
index b0dc48e..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAllocationExpressionIsParent2.java
+++ /dev/null
@@ -1,17 +0,0 @@
-public class CompletionAllocationExpressionIsParent2 {
-	public class Inner {
-		public Inner(long i, long j){super();}
-		public Inner(Object i, Object j){super();}
-		
-	}
-	
-	long zzlong;
-	int zzint;
-	double zzdouble;
-	boolean zzboolean;
-	Object zzObject;
-	
-	void foo() {
-		this.new Inner(1, zz
-	}
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAllocationExpressionIsParent3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAllocationExpressionIsParent3.java
deleted file mode 100644
index a660ae3..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAllocationExpressionIsParent3.java
+++ /dev/null
@@ -1,17 +0,0 @@
-public class CompletionAllocationExpressionIsParent3 {
-	public class Inner {
-		public Inner(long i, long j){super();}
-		public Inner(Object i, Object j){super();}
-		
-	}
-	
-	long zzlong;
-	int zzint;
-	double zzdouble;
-	boolean zzboolean;
-	Object zzObject;
-	
-	void foo() {
-		new CompletionAllocationExpressionIsParent3().new Inner(1, zz
-	}
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAllocationExpressionIsParent6.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAllocationExpressionIsParent6.java
deleted file mode 100644
index 666588a..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAllocationExpressionIsParent6.java
+++ /dev/null
@@ -1,19 +0,0 @@
-public class CompletionAllocationExpressionIsParent6 {
-	
-	long zzlong;
-	int zzint;
-	double zzdouble;
-	boolean zzboolean;
-	Object zzObject;
-	
-	void foo() {
-		new CompletionAllocation_ERROR_ExpressionIsParent6Plus().new Inner(1, zz
-	}
-}
-class CompletionAllocationExpressionIsParent6Plus {
-	public class Inner {
-		public Inner(long i, long j){
-			
-		}	
-	}	
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAmbiguousFieldName2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAmbiguousFieldName2.java
deleted file mode 100644
index d7a44ad..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionAmbiguousFieldName2.java
+++ /dev/null
@@ -1,8 +0,0 @@
-public class CompletionAmbiguousFieldName2 {
-	int xBar;
-	class classFoo {
-		public void foo(int xBar){
-			xBa
-		}
-	}
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionFindClass.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionFindClass.java
deleted file mode 100644
index 5adbd11..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionFindClass.java
+++ /dev/null
@@ -1,6 +0,0 @@
-public class CompletionFindClass {
-	private    A[] a;
-	public CompletionFindClass () {
-		this.a = new A
-	}
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionFindMemberType1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionFindMemberType1.java
deleted file mode 100644
index d7653af..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionFindMemberType1.java
+++ /dev/null
@@ -1,13 +0,0 @@
-interface A1 {
-	class Inner1 {
-	}
-}
-interface B1 extends A1 {
-	class Inner1 {
-	}
-}
-public class CompletionFindMemberType1 {
-	public void foo() {
-		B1.Inner
-	}
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionFindMemberType2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionFindMemberType2.java
deleted file mode 100644
index 0f45fc9..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionFindMemberType2.java
+++ /dev/null
@@ -1,13 +0,0 @@
-interface A2 {
-	class Inner2{
-	}
-}
-interface B2 extends A2 {
-	class Inner2 {
-	}
-}
-public class CompletionFindMemberType2 implements B2{
-	public void foo() {
-		Inner
-	}
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionFindSuperInterface.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionFindSuperInterface.java
deleted file mode 100644
index cd2a0c7..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionFindSuperInterface.java
+++ /dev/null
@@ -1,3 +0,0 @@
-public class CompletionFindSuperInterface implements SuperInterface {
-
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionMemberType.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionMemberType.java
deleted file mode 100644
index 620fce1..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionMemberType.java
+++ /dev/null
@@ -1,7 +0,0 @@
-public class CompletionMemberType {
-	public class Y {
-		public void foo(){
-			Y var = new Y
-		}
-	}
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionMemberType2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionMemberType2.java
deleted file mode 100644
index 24e3f80..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionMemberType2.java
+++ /dev/null
@@ -1,7 +0,0 @@
-public class CompletionMemberType2 {
-	public class MemberException extends Exception {
-	}
-	void foo() {
-		throw new 
-	}
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionMemberType3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionMemberType3.java
deleted file mode 100644
index 6064304..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionMemberType3.java
+++ /dev/null
@@ -1,7 +0,0 @@
-public class CompletionMemberType3 {
-	public class MemberException extends Exception {
-	}
-	void foo() {
-		throw new MemberE
-	}
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionMethodDeclaration2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionMethodDeclaration2.java
deleted file mode 100644
index c4d911d..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionMethodDeclaration2.java
+++ /dev/null
@@ -1,3 +0,0 @@
-public class CompletionMethodDeclaration2 extends CompletionSuperClass {
-	eq
-}
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionMethodDeclaration3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionMethodDeclaration3.java
deleted file mode 100644
index 91404dd..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionMethodDeclaration3.java
+++ /dev/null
@@ -1,7 +0,0 @@
-public class CompletionMethodDeclaration3 extends CompletionSuperClass {
-	eq
-	
-	public int eqFoo(int a,Object b){
-		return 1;
-	}
-}
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionMethodDeclaration4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionMethodDeclaration4.java
deleted file mode 100644
index a3746fe..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionMethodDeclaration4.java
+++ /dev/null
@@ -1,3 +0,0 @@
-public abstract class CompletionMethodDeclaration4 implements CompletionSuperInterface {
-	eq
-}
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionMethodDeclaration5.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionMethodDeclaration5.java
deleted file mode 100644
index 6070dbe..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionMethodDeclaration5.java
+++ /dev/null
@@ -1,6 +0,0 @@
-public class CompletionMethodDeclaration5 {
-	public static void main(String[] args) {
-		new CompletionSuperClass() {
-	}
-
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionPrefixFieldName1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionPrefixFieldName1.java
deleted file mode 100644
index fffce74..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionPrefixFieldName1.java
+++ /dev/null
@@ -1,11 +0,0 @@
-public class CompletionPrefixFieldName1 {
-	int xBar;
-	
-	class classFoo {
-		int xBar;
-		
-		public void foo(){
-			xBa
-		}
-	}
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionPrefixFieldName2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionPrefixFieldName2.java
deleted file mode 100644
index 8e45ea3..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionPrefixFieldName2.java
+++ /dev/null
@@ -1,11 +0,0 @@
-public class CompletionPrefixFieldName2 {
-	int xBar;
-	
-	class classFoo {
-		int xBar;
-		
-		public void foo(){
-			new CompletionPrefixFieldName2().xBa
-		}
-	}
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionPrefixMethodName1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionPrefixMethodName1.java
deleted file mode 100644
index 7d39d1a..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionPrefixMethodName1.java
+++ /dev/null
@@ -1,11 +0,0 @@
-ublic class CompletionPrefixMethodName1 {
-	int xBar(){}
-	
-	class classFoo {
-		int xBar(){}
-		
-		public void foo(){
-			xBa
-		}
-	}
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionPrefixMethodName2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionPrefixMethodName2.java
deleted file mode 100644
index c54bf1a..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionPrefixMethodName2.java
+++ /dev/null
@@ -1,11 +0,0 @@
-public class CompletionPrefixMethodName2 {
-	int xBar(){}
-	
-	class classFoo {
-		int xBar(){}
-		
-		public void foo(){
-			new CompletionPrefixMethodName2().xBa
-		}
-	}
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionPrefixMethodName3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionPrefixMethodName3.java
deleted file mode 100644
index 22f6b8c..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionPrefixMethodName3.java
+++ /dev/null
@@ -1,11 +0,0 @@
-public class CompletionPrefixMethodName3 {
-	int xBar(int a, int b){}
-	
-	class classFoo {
-		int xBar(int a, int b){}
-		
-		public void foo(){
-			xBar(1,
-		}
-	}
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionQualifiedAllocationType1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionQualifiedAllocationType1.java
deleted file mode 100644
index f58661e..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionQualifiedAllocationType1.java
+++ /dev/null
@@ -1,7 +0,0 @@
-public class CompletionQualifiedAllocationType1 {
-	public class YYY {
-	}
-	void foo(){
-		this.new YYY
-	}
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionQualifiedExpectedType.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionQualifiedExpectedType.java
deleted file mode 100644
index 6374836..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionQualifiedExpectedType.java
+++ /dev/null
@@ -1,7 +0,0 @@
-import pack1.PX;
-
-public class CompletionQualifiedExpectedType {
-	void foo() {
-		pack2.PX var = new 
-	}
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSameSuperClass.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSameSuperClass.java
deleted file mode 100644
index b330990..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSameSuperClass.java
+++ /dev/null
@@ -1,7 +0,0 @@
-public class CompletionSameSuperClass extends A {
-	class Inner extends A {
-		void foo(int bar){
-			bar
-		}
-	}	
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionStaticMethodDeclaration2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionStaticMethodDeclaration2.java
deleted file mode 100644
index 3f0679f..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionStaticMethodDeclaration2.java
+++ /dev/null
@@ -1,5 +0,0 @@
-public class CompletionStaticMethodDeclaration2 {
-	class Inner1 extends TypeWithAMethodAndAStaticMethod {
-		foo
-	}
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionStaticMethodDeclaration3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionStaticMethodDeclaration3.java
deleted file mode 100644
index 72da49d..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionStaticMethodDeclaration3.java
+++ /dev/null
@@ -1,5 +0,0 @@
-public class CompletionStaticMethodDeclaration3 {
-	static class Inner1 extends TypeWithAMethodAndAStaticMethod {
-		foo
-	}
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperClass.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperClass.java
deleted file mode 100644
index 4d45311..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperClass.java
+++ /dev/null
@@ -1,6 +0,0 @@
-public class CompletionSuperClass{
-	public class Inner {}
-	public int eqFoo(int a,Object b){
-		return 1;
-	}
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperClass2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperClass2.java
deleted file mode 100644
index 39d1f6c..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperClass2.java
+++ /dev/null
@@ -1,4 +0,0 @@
-public class CompletionSuperClass2 {
-	public class InnerClass {}
-	public interface InnerInterface {}
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperInterface.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperInterface.java
deleted file mode 100644
index 7908efa..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperInterface.java
+++ /dev/null
@@ -1,3 +0,0 @@
-public interface CompletionSuperInterface{
-	public int eqFoo(int a,Object b);
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperInterface2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperInterface2.java
deleted file mode 100644
index 2c177ec..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperInterface2.java
+++ /dev/null
@@ -1,4 +0,0 @@
-public interface CompletionSuperInterface2 {
-	public class InnerClass {}
-	public interface InnerInterface {}
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperType.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperType.java
deleted file mode 100644
index 5b1512c..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperType.java
+++ /dev/null
@@ -1 +0,0 @@
-public class CompletionSuperType extends CompletionSuperClass.
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperType2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperType2.java
deleted file mode 100644
index 0ea8624..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperType2.java
+++ /dev/null
@@ -1 +0,0 @@
-public class CompletionSuperType2 extends CompletionSuper
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperType3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperType3.java
deleted file mode 100644
index 3f5a4f5..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperType3.java
+++ /dev/null
@@ -1 +0,0 @@
-public class CompletionSuperType3 implements CompletionSuper
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperType4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperType4.java
deleted file mode 100644
index 13e7798..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperType4.java
+++ /dev/null
@@ -1 +0,0 @@
-public class CompletionSuperType4 extends CompletionSuperClass2.Inner
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperType5.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperType5.java
deleted file mode 100644
index f42027b..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperType5.java
+++ /dev/null
@@ -1 +0,0 @@
-public class CompletionSuperType5 implements CompletionSuperInterface2.Inner
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperType6.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperType6.java
deleted file mode 100644
index 304719c..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperType6.java
+++ /dev/null
@@ -1 +0,0 @@
-public interface CompletionSuperType6 extends CompletionSuper
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperType7.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperType7.java
deleted file mode 100644
index 1341e22..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperType7.java
+++ /dev/null
@@ -1 +0,0 @@
-public interface CompletionSuperType7 extends CompletionSuperClass2.Inner
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperType8.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperType8.java
deleted file mode 100644
index 9cc2b5a..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src/CompletionSuperType8.java
+++ /dev/null
@@ -1 +0,0 @@
-public interface CompletionSuperType8 extends CompletionSuperInterface2.Inner
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis15.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis15.java
deleted file mode 100644
index 6ce900b..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src2/CompletionKeywordThis15.java
+++ /dev/null
@@ -1,7 +0,0 @@
-public class CompletionKeywordThis15 {
-	public class InnerClass {
-		public InnerClass() {
-			CompletionKeywordThis15 a = CompletionKeywordThis15.this;
-		}
-	}
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/pkgstaticimport/QQType1.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/pkgstaticimport/QQType1.java
deleted file mode 100644
index 8045882..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/pkgstaticimport/QQType1.java
+++ /dev/null
@@ -1,12 +0,0 @@
-package pkgstaticimport;
-
-public class QQType1 {
-	public class Inner1 {}
-	public static class Inner2 {}
-	protected class Inner3 {}
-	protected static class Inner4 {}
-	private class Inner5 {}
-	private static class Inner6 {}
-	class Inner7 {}
-	static class Inner8 {}
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/pkgstaticimport/QQType3.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/pkgstaticimport/QQType3.java
deleted file mode 100644
index aef3101..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/pkgstaticimport/QQType3.java
+++ /dev/null
@@ -1,5 +0,0 @@
-package pkgstaticimport;
-
-public class QQType3 extends QQType1 {
-	
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/pkgstaticimport/QQType4.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/pkgstaticimport/QQType4.java
deleted file mode 100644
index c210299..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/pkgstaticimport/QQType4.java
+++ /dev/null
@@ -1,12 +0,0 @@
-package pkgstaticimport;
-
-public class QQType4 {
-	public int zzvarzz1;
-	public static int zzvarzz2;
-	protected int zzvarzz3;
-	protected static int zzvarzz4;
-	private int zzvarzz5;
-	private static int zzvarzz6;
-	int zzvarzz7;
-	static int zzvarzz8;
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/pkgstaticimport/QQType6.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/pkgstaticimport/QQType6.java
deleted file mode 100644
index 9fe818e..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/pkgstaticimport/QQType6.java
+++ /dev/null
@@ -1,5 +0,0 @@
-package pkgstaticimport;
-
-public class QQType6 extends QQType4 {
-	
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/pkgstaticimport/QQType7.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/pkgstaticimport/QQType7.java
deleted file mode 100644
index f9be69c..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/pkgstaticimport/QQType7.java
+++ /dev/null
@@ -1,12 +0,0 @@
-package pkgstaticimport;
-
-public class QQType7 {
-	public void zzfoozz1(){};
-	public static void zzfoozz2(){};
-	protected void zzfoozz3(){};
-	protected static void zzfoozz4(){};
-	private void zzfoozz5(){};
-	private static void zzfoozz6(){};
-	void zzfoozz7(){};
-	static void zzfoozz8(){};
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/pkgstaticimport/QQType9.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/pkgstaticimport/QQType9.java
deleted file mode 100644
index 0e27020..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/pkgstaticimport/QQType9.java
+++ /dev/null
@@ -1,5 +0,0 @@
-package pkgstaticimport;
-
-public class QQType9 extends QQType7 {
-	
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0005/Test.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0005/Test.java
deleted file mode 100644
index cdbbc62..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0005/Test.java
+++ /dev/null
@@ -1,12 +0,0 @@
-package test0005;
-
-public class Test {
-	void foo() {
-		X<Object>.Y<St
-	}
-}
-
-class X<T> {
-	public class Y<U> {
-	}
-}
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0006/Test.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0006/Test.java
deleted file mode 100644
index b325385..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0006/Test.java
+++ /dev/null
@@ -1,12 +0,0 @@
-package test0005;
-
-public class Test {
-	void foo() {
-		X<String>.Y<Ob
-	}
-}
-
-class X<T> {
-	public class Y<U> {
-	}
-}
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0007/Test.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0007/Test.java
deleted file mode 100644
index 10f586f..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0007/Test.java
+++ /dev/null
@@ -1,12 +0,0 @@
-package test0007;
-
-public class Test {
-	void foo() {
-		X<Object>.Y<St
-	}
-}
-
-class X<T> {
-	public class Y<U extends String> {
-	}
-}
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0008/Test.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0008/Test.java
deleted file mode 100644
index 7bb9e45..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0008/Test.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package test0008;
-
-public class Test {
-	void foo() {
-		X<Object>.Y<XY
-	}
-}
-
-class X<T> {
-	public class Y<U extends XYXSuper> {
-	}
-}
-class XYX {
-	
-}
-class XYXSuper {
-	
-}
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0011/Test.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0011/Test.java
deleted file mode 100644
index 45bd1c2..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0011/Test.java
+++ /dev/null
@@ -1,9 +0,0 @@
-package test0011;
-
-public class Test <T extends Z0011<Object>.Y001> {
-
-}
-class Z0011<T0011> {
-	public class Y0011 {
-	}
-}
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0012/Test.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0012/Test.java
deleted file mode 100644
index 22a6f89..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0012/Test.java
+++ /dev/null
@@ -1,9 +0,0 @@
-package test0012;
-
-public class Test {
-	public Z0012<Object>.Y001
-}
-class Z0012<T0012> {
-	public class Y0012 {
-	}
-}
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0013/Test.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0013/Test.java
deleted file mode 100644
index 278a0e2..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0013/Test.java
+++ /dev/null
@@ -1,9 +0,0 @@
-package test0013;
-
-public class Test {
-	public Z0013<Object>.Y001 foo() {}
-}
-class Z0013<T0013> {
-	public class Y0013 {
-	}
-}
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0014/Test.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0014/Test.java
deleted file mode 100644
index 300b94e..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0014/Test.java
+++ /dev/null
@@ -1,8 +0,0 @@
-package test0014;
-
-public class Test extends Z0014<Object>.Y001 {
-}
-class Z0014<T0014> {
-	public class Y0014 {
-	}
-}
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0015/Test.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0015/Test.java
deleted file mode 100644
index deccad4..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0015/Test.java
+++ /dev/null
@@ -1,10 +0,0 @@
-package test0015;
-
-public class Test implements Z0015<Object>.Y001 {
-}
-class Z0015<T0015> {
-	public class Y0015 {
-	}
-	public interface Y0015I {
-	}
-}
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0016/Test.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0016/Test.java
deleted file mode 100644
index 9272f85..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0016/Test.java
+++ /dev/null
@@ -1,11 +0,0 @@
-package test0016;
-
-public class Test implements  {
-	void foo(Z0016<Object>.Y001) {
-		
-	}
-}
-class Z0016<T0016> {
-	public class Y0016 {
-	}
-}
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0017/Test.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0017/Test.java
deleted file mode 100644
index 8fa9b7d..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0017/Test.java
+++ /dev/null
@@ -1,11 +0,0 @@
-package test0017;
-
-public class Test implements  {
-	void foo() throws Z0017<Object>.Y001{
-		
-	}
-}
-class Z0017<T0017> {
-	public class Y0017 {
-	}
-}
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0018/Test.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0018/Test.java
deleted file mode 100644
index 806075f..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0018/Test.java
+++ /dev/null
@@ -1,11 +0,0 @@
-package test0018;
-
-public class Test {
-	<T extends Z0018<Object>.Y001> void foo() {
-		
-	}
-}
-class Z0018<T0018> {
-	public class Y0018 {
-	}
-}
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0019/Test.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0019/Test.java
deleted file mode 100644
index 3fd780e..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0019/Test.java
+++ /dev/null
@@ -1,9 +0,0 @@
-package test0019;
-
-public class Test {
-	<T extends Z0019<Object>.Y001
-}
-class Z0019<T0019> {
-	public class Y0019 {
-	}
-}
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0020/Test.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0020/Test.java
deleted file mode 100644
index 1d6bde9..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0020/Test.java
+++ /dev/null
@@ -1,11 +0,0 @@
-package test0020;
-
-public class Test {
-	void foo() {
-		Z0020<Object>.Y002
-	}
-}
-class Z0020<T0020> {
-	public class Y0020 {
-	}
-}
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0029/Test.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0029/Test.java
deleted file mode 100644
index daaad44..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0029/Test.java
+++ /dev/null
@@ -1,11 +0,0 @@
-package test0029;
-
-public class Test {
-	public class Inner {
-		Inner2<Inner2<Object>> stack= new Inner2<Inner2<Object>>();
-	}
-	class Inner2<T>{
-	}
-}
-
-
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0031/Test.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0031/Test.java
deleted file mode 100644
index 30c5d18..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0031/Test.java
+++ /dev/null
@@ -1,10 +0,0 @@
-package test0031;
-
-public class Test <T> {
-	class Y {}
-		void foo(){
-			Test<T>.Y<Stri
-		}
-	}
-}
-
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0040/Test.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0040/Test.java
deleted file mode 100644
index 56b39bc..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0040/Test.java
+++ /dev/null
@@ -1,11 +0,0 @@
-package test0040;
-
-public class Test <T> {
-	public class Y {
-		public class Z <U>{
-			
-		}
-	}
-	Test<Object>.Y.Z<Stri
-}
-
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0041/Test.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0041/Test.java
deleted file mode 100644
index 726a295..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0041/Test.java
+++ /dev/null
@@ -1,13 +0,0 @@
-package test0041;
-
-public class Test <T> {
-	public class Y {
-		public class Z <U> {
-			
-		}
-	}
-	void foo() {
-		Test<Object>.Y.Z<Stri
-	}
-}
-
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0042/Test.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0042/Test.java
deleted file mode 100644
index 8f9f9cb..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0042/Test.java
+++ /dev/null
@@ -1,11 +0,0 @@
-package test0042;
-
-public class Test <T> {
-	public class Y {
-		public class Z {
-			
-		}
-	}
-	Test<Object>.Y.Z<Stri
-}
-
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0043/Test.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0043/Test.java
deleted file mode 100644
index 243421b..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0043/Test.java
+++ /dev/null
@@ -1,13 +0,0 @@
-package test0043;
-
-public class Test <T> {
-	public class Y {
-		public class Z {
-			
-		}
-	}
-	void foo() {
-		Test<Object>.Y.Z<Stri
-	}
-}
-
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0044/Test.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0044/Test.java
deleted file mode 100644
index 3559473..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0044/Test.java
+++ /dev/null
@@ -1,11 +0,0 @@
-package test0044;
-
-public class Test <T> {
-	public class Y {
-		public class Z <U>{
-			
-		}
-	}
-	Test<Object>.Y.Z<Object, Stri
-}
-
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0045/Test.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0045/Test.java
deleted file mode 100644
index ed0e417..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0045/Test.java
+++ /dev/null
@@ -1,13 +0,0 @@
-package test0045;
-
-public class Test <T> {
-	public class Y {
-		public class Z <U>{
-			
-		}
-	}
-	void foo() {
-		Test<Object>.Y.Z<Object, Stri
-	}
-}
-
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0046/Test.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0046/Test.java
deleted file mode 100644
index e6fa6b1..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0046/Test.java
+++ /dev/null
@@ -1,11 +0,0 @@
-package test0046;
-
-public class Test <T> {
-	public class Y {
-		public class Z <U>{
-			
-		}
-	}
-	Test<Object>.Y.Z<Object, Stri, Object> x;
-}
-
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0047/Test.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0047/Test.java
deleted file mode 100644
index 3ed3290..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0047/Test.java
+++ /dev/null
@@ -1,13 +0,0 @@
-package test0039;
-
-public class Test <T> {
-	public class Y {
-		public class Z <U>{
-			
-		}
-	}
-	void foo() {
-		Test<Object>.Y.Z<Object, Stri, Object> x;
-	}
-}
-
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0051/Test.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0051/Test.java
deleted file mode 100644
index 6bde111..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0051/Test.java
+++ /dev/null
@@ -1,7 +0,0 @@
-package test0051;
-import static pkgstaticimport.QQType1.*;
-public class Test {
-	void foo() {
-		Inner
-	}
-}
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0052/QQType2.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0052/QQType2.java
deleted file mode 100644
index be50e75..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0052/QQType2.java
+++ /dev/null
@@ -1,11 +0,0 @@
-package test0052;
-public class QQType2 {
-	public class Inner1 {}
-	public static class Inner2 {}
-	protected class Inner3 {}
-	protected static class Inner4 {}
-	private class Inner5 {}
-	private static class Inner6 {}
-	class Inner7 {}
-	static class Inner8 {}
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0052/Test.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0052/Test.java
deleted file mode 100644
index 8c7ba64..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0052/Test.java
+++ /dev/null
@@ -1,7 +0,0 @@
-package test0052;
-import static test0052.QQType2.*;
-public class Test {
-	void foo() {
-		Inner
-	}
-}
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0053/Test.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0053/Test.java
deleted file mode 100644
index 969de94..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0053/Test.java
+++ /dev/null
@@ -1,7 +0,0 @@
-package test0053;
-import static pkgstaticimport.QQType1.*;
-public class Test extends pkgstaticimport.QQType1 {
-	void foo() {
-		Inner
-	}
-}
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0054/Test.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0054/Test.java
deleted file mode 100644
index 2c115fc..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0054/Test.java
+++ /dev/null
@@ -1,7 +0,0 @@
-package test0054;
-import static pkgstaticimport.QQType1.Inner2;
-public class Test {
-	void foo() {
-		Inner
-	}
-}
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0055/Test.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0055/Test.java
deleted file mode 100644
index 3ea5181..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0055/Test.java
+++ /dev/null
@@ -1,8 +0,0 @@
-package test0055;
-import static pkgstaticimport.QQType1.*;
-import static pkgstaticimport.QQType1.Inner2;
-public class Test {
-	void foo() {
-		Inner
-	}
-}
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0056/Test.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0056/Test.java
deleted file mode 100644
index 43573bf..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0056/Test.java
+++ /dev/null
@@ -1,8 +0,0 @@
-package test0056;
-import static pkgstaticimport.QQType1.Inner2;
-import static pkgstaticimport.QQType1.*;
-public class Test {
-	void foo() {
-		Inner
-	}
-}
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0059/QQType5.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0059/QQType5.java
deleted file mode 100644
index c4f7844..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0059/QQType5.java
+++ /dev/null
@@ -1,12 +0,0 @@
-package test0059;
-
-public class QQType5 {
-	public int zzvarzz1;
-	public static int zzvarzz2;
-	protected int zzvarzz3;
-	protected static int zzvarzz4;
-	private int zzvarzz5;
-	private static int zzvarzz6;
-	int zzvarzz7;
-	static int zzvarzz8;
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0066/QQType8.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0066/QQType8.java
deleted file mode 100644
index 94ccbe3..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0066/QQType8.java
+++ /dev/null
@@ -1,12 +0,0 @@
-package test0066;
-
-public class QQType8 {
-	public void zzfoozz1(){};
-	public static void zzfoozz2(){};
-	protected void zzfoozz3(){};
-	protected static void zzfoozz4(){};
-	private void zzfoozz5(){};
-	private static void zzfoozz6(){};
-	void zzfoozz7(){};
-	static void zzfoozz8(){};
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0070/p/ImportedClass.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0070/p/ImportedClass.java
deleted file mode 100644
index 632822d..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0070/p/ImportedClass.java
+++ /dev/null
@@ -1,5 +0,0 @@
-package test0070.p;
-
-public class ImportedClass {
-	
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0071/p/ImportedClass.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0071/p/ImportedClass.java
deleted file mode 100644
index cfc01c2..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0071/p/ImportedClass.java
+++ /dev/null
@@ -1,5 +0,0 @@
-package test0071.p;
-
-public class ImportedClass {
-	
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0072/p/ImportedClass.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0072/p/ImportedClass.java
deleted file mode 100644
index ce48d9b..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0072/p/ImportedClass.java
+++ /dev/null
@@ -1,7 +0,0 @@
-package test0072.p;
-
-public class ImportedClass {
-	public static int ZZZ1;
-	public static void ZZZ2() {}
-	public static void ZZZ2(int i) {}
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0073/p/ImportedClass.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0073/p/ImportedClass.java
deleted file mode 100644
index 162d32e..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0073/p/ImportedClass.java
+++ /dev/null
@@ -1,9 +0,0 @@
-package test0073.p;
-
-public class ImportedClass {
-	public static class Inner {
-		public static int ZZZ1;
-		public static void ZZZ2() {}
-		public static void ZZZ2(int i) {}
-	}
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0074/p/ImportedClass.java b/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0074/p/ImportedClass.java
deleted file mode 100644
index 6a4451d..0000000
--- a/org.eclipse.jdt.core.tests.model/workspace/Completion/src3/test0074/p/ImportedClass.java
+++ /dev/null
@@ -1,9 +0,0 @@
-package test0074.p;
-
-public class ImportedClass {
-	public class Inner {
-		public static int ZZZ1;
-		public static void ZZZ2() {}
-		public static void ZZZ2(int i) {}
-	}
-}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core/buildnotes_jdt-core.html b/org.eclipse.jdt.core/buildnotes_jdt-core.html
index 4b1f402..6149823 100644
--- a/org.eclipse.jdt.core/buildnotes_jdt-core.html
+++ b/org.eclipse.jdt.core/buildnotes_jdt-core.html
@@ -47,13 +47,29 @@ Eclipse SDK 3.1RC1 - ?th May 2005
 <h2>
 What's new in this drop</h2>
 <ul>
+<li> Code Assist suggest all member types when completion token is a single name.
+<pre>
+Y&lt;complete here&gt; // p.q.X.Y is proposed.
+</pre>
+As all member types are proposed, code assist does not propose types of the wrong kind.
+Only classes are proposed inside an extends clause, only interfaces inside an implements clause
+and only annotations in annotation reference (It was necessary before to be able to propose
+a top level type which contains these types).<br>
+Note: To re-enabled quickly the old behaviors, change the value of Completion.PROPOSE_MEMBER_TYPES.
+</li>
 <li>Added API <code>JavaCore#initializeAfterLoad(IProgressMonitor)</code> to allow
 	 a client to force the initialization of internal structures.
 </li>
 </ul>
 
 <h3>Problem Reports Fixed</h3>
-<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=92937">92937</a>
+<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=92555">92555</a>
+Code assist in Annotations suggests non-annotations
+<br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=92733">92733</a>
+[assist] Classes suggested in implements clause
+<br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=94965">94965</a>
+[assist] code assist should suggest inner types
+<br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=92937">92937</a>
 	  	Need API: JavaCore#initializeAfterLoad()
 <br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=90215">90215</a>
 [1.5] Enums implementing generic interfaces can compile incorrectly.
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
index e0cbca9..480d26d 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
@@ -69,7 +69,9 @@ public final class CompletionEngine
 	public static boolean DEBUG = false;
 	public static boolean PERF = false;
 	
+	// temporary constants to quickly disabled polish features if necessary
 	public final static boolean NO_TYPE_COMPLETION_ON_EMPTY_TOKEN = true;
+	public final static boolean PROPOSE_MEMBER_TYPES = true;
 	
 	private final static char[] ERROR_PATTERN = "*error*".toCharArray();  //$NON-NLS-1$
 	private final static char[] EXCEPTION_PATTERN = "*exception*".toCharArray();  //$NON-NLS-1$
@@ -101,6 +103,7 @@ public final class CompletionEngine
 	boolean assistNodeIsException;
 	boolean assistNodeIsInterface;
 	boolean assistNodeIsAnnotation;
+	boolean assistNodeIsConstructor;
 	
 	IJavaProject javaProject;
 	CompletionParser parser;
@@ -171,6 +174,44 @@ public final class CompletionEngine
 		public int sourceStart() { return 0; 	}
 		public int sourceEnd() { return 0; 	}
 	};
+	
+	private class AcceptedType {
+		public AcceptedType(
+			char[] packageName,
+			char[] simpleTypeName,
+			char[][] enclosingTypeNames,
+			int modifiers,
+			int accessibility) {
+			this.packageName = packageName;
+			this.simpleTypeName = simpleTypeName;
+			this.enclosingTypeNames = enclosingTypeNames;
+			this.modifiers = modifiers;
+			this.accessibility = accessibility;
+		}
+		public char[] packageName;
+		public char[] simpleTypeName;
+		public char[][] enclosingTypeNames;
+		public int modifiers;
+		public int accessibility;
+		
+		public boolean mustBeQualified = false;
+		public char[] fullyQualifiedName = null;
+		public char[] qualifiedTypeName = null;
+		
+		public String toString() {
+			StringBuffer buffer = new StringBuffer();
+			buffer.append('{');
+			buffer.append(packageName);
+			buffer.append(',');
+			buffer.append(simpleTypeName);
+			buffer.append(',');
+			buffer.append(CharOperation.concatWith(enclosingTypeNames, '.'));
+			buffer.append('}');
+			return buffer.toString();
+		}
+	}
+	
+	private ObjectVector acceptedTypes;
 
 	/**
 	 * The CompletionEngine is responsible for computing source completions.
@@ -264,17 +305,20 @@ public final class CompletionEngine
 	 */
 	public void acceptType(
 		char[] packageName,
-		char[] typeName,
+		char[] simpleTypeName,
+		char[][] enclosingTypeNames,
 		int modifiers,
 		AccessRestriction accessRestriction) {
 
-		char[] fullyQualifiedName = CharOperation.concat(packageName, typeName, '.');
-		char[] completionName = fullyQualifiedName;
-
-		if (this.knownTypes.containsKey(completionName)) return;
-
-		this.knownTypes.put(completionName, this);
-
+		if (this.options.checkVisibility) {
+			if((modifiers & IConstants.AccPublic) == 0) {
+				if((modifiers & IConstants.AccPrivate) != 0) return;
+				
+				char[] currentPackage = CharOperation.concatWith(this.unitScope.fPackage.compoundName, '.');
+				if(!CharOperation.equals(packageName, currentPackage)) return;
+			}
+		}
+		
 		int accessibility = IAccessRule.K_ACCESSIBLE;
 		if(accessRestriction != null) {
 			switch (accessRestriction.getProblemId()) {
@@ -303,45 +347,223 @@ public final class CompletionEngine
 			}
 		}
 		
-		boolean isQualified = true;
-		int relevance = computeBaseRelevance();
-		relevance += computeRelevanceForInterestingProposal();
-		relevance += computeRelevanceForRestrictions(accessibility);
-		if (this.resolvingImports) {
-			completionName = CharOperation.concat(completionName, new char[] { ';' });
-			relevance += computeRelevanceForCaseMatching(this.completionToken, fullyQualifiedName);
-		} else {
-			if (mustQualifyType(packageName, typeName)) {
-				if (packageName == null || packageName.length == 0)
-					if (this.unitScope != null && this.unitScope.fPackage.compoundName != CharOperation.NO_CHAR_CHAR)
-						return; // ignore types from the default package from outside it
+		if(acceptedTypes == null) {
+			acceptedTypes = new ObjectVector();
+		}
+		acceptedTypes.add(new AcceptedType(packageName, simpleTypeName, enclosingTypeNames, modifiers, accessibility));
+	}
+	
+	private void acceptTypes() {
+		if(this.acceptedTypes == null) return;
+		
+		int length = this.acceptedTypes.size();
+		
+		if(length == 0) return;
+		
+		HashtableOfObject onDemandFound = new HashtableOfObject();
+		
+		next : for (int i = 0; i < length; i++) {
+			AcceptedType acceptedType = (AcceptedType)this.acceptedTypes.elementAt(i);
+			char[] packageName = acceptedType.packageName;
+			char[] simpleTypeName = acceptedType.simpleTypeName;
+			char[][] enclosingTypeNames = acceptedType.enclosingTypeNames;
+			int modifiers = acceptedType.modifiers;
+			int accessibility = acceptedType.accessibility;
+			
+			char[] typeName;
+			char[] flatEnclosingTypeNames;
+			if(enclosingTypeNames == null || enclosingTypeNames.length == 0) {
+				flatEnclosingTypeNames = null;
+				typeName = simpleTypeName;
 			} else {
-				completionName = typeName;
-				isQualified = false;
+				flatEnclosingTypeNames = CharOperation.concatWith(acceptedType.enclosingTypeNames, '.');
+				typeName = CharOperation.concat(flatEnclosingTypeNames, simpleTypeName, '.');
 			}
-			relevance += computeRelevanceForCaseMatching(this.completionToken, typeName);
-			relevance += computeRelevanceForExpectingType(packageName, typeName);
-			relevance += computeRelevanceForQualification(isQualified);
+			char[] fullyQualifiedName = CharOperation.concat(packageName, typeName, '.');
 			
-			int kind = modifiers & (IConstants.AccInterface | IConstants.AccEnum | IConstants.AccAnnotation);
-			switch (kind) {
-				case IConstants.AccAnnotation:
-				case IConstants.AccAnnotation | IConstants.AccInterface:
-					relevance += computeRelevanceForAnnotation();
-					relevance += computeRelevanceForInterface();
-					break;
-				case IConstants.AccEnum:
-					relevance += computeRelevanceForEnum();
-					break;
-				case IConstants.AccInterface:
-					relevance += computeRelevanceForInterface();
-					break;
-				default:
-					relevance += computeRelevanceForClass();
-					relevance += computeRelevanceForException(typeName);
-					break;
+			if (this.knownTypes.containsKey(fullyQualifiedName)) continue next;
+	
+			this.knownTypes.put(fullyQualifiedName, this);
+			
+			if (this.resolvingImports) {
+				char[] completionName = CharOperation.concat(fullyQualifiedName, new char[] { ';' });
+				
+				int relevance = computeBaseRelevance();
+				relevance += computeRelevanceForInterestingProposal();
+				relevance += computeRelevanceForRestrictions(accessibility);
+				relevance += computeRelevanceForCaseMatching(this.completionToken, fullyQualifiedName);
+				
+				this.noProposal = false;
+				if(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {
+					CompletionProposal proposal = this.createProposal(CompletionProposal.TYPE_REF, this.actualCompletionPosition);
+					proposal.setDeclarationSignature(packageName);
+					proposal.setSignature(createNonGenericTypeSignature(packageName, typeName));
+					proposal.setPackageName(packageName);
+					proposal.setTypeName(typeName);
+					proposal.setCompletion(completionName);
+					proposal.setFlags(modifiers);
+					proposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);
+					proposal.setRelevance(relevance);
+					proposal.setAccessibility(accessibility);
+					this.requestor.accept(proposal);
+					if(DEBUG) {
+						this.printDebug(proposal);
+					}
+				}
+			} else {
+				if(!this.importCachesInitialized) {
+					this.initializeImportCaches();
+				}
+			
+				found : for (int j = 0; j < this.importCacheCount; j++) {
+					char[][] importName = this.importsCache[j];
+					if(CharOperation.equals(typeName, importName[0])) {
+						proposeType(
+								packageName,
+								simpleTypeName,
+								modifiers,
+								accessibility,
+								typeName,
+								fullyQualifiedName,
+								!CharOperation.equals(fullyQualifiedName, importName[1]));
+						continue next;
+					}
+				}
+				
+				
+				if ((enclosingTypeNames == null || enclosingTypeNames.length == 0 ) && CharOperation.equals(this.currentPackageName, packageName)) {
+					proposeType(
+							packageName,
+							simpleTypeName,
+							modifiers,
+							accessibility,
+							typeName,
+							fullyQualifiedName,
+							false);
+					continue next;
+				} else {
+					char[] fullyQualifiedEnclosingTypeOrPackageName = null;
+			
+					AcceptedType foundType = null;
+					if((foundType = (AcceptedType)onDemandFound.get(simpleTypeName)) == null) {
+						for (int j = 0; j < this.onDemandImportCacheCount; j++) {
+							ImportBinding importBinding = this.onDemandImportsCache[j];
+
+							char[][] importName = importBinding.compoundName;
+							char[] importFlatName = CharOperation.concatWith(importName, '.');
+						
+							if(fullyQualifiedEnclosingTypeOrPackageName == null) {
+								if(enclosingTypeNames != null && enclosingTypeNames.length != 0) {
+									fullyQualifiedEnclosingTypeOrPackageName =
+										CharOperation.concat(
+												packageName,
+												flatEnclosingTypeNames,
+												'.');
+								} else {
+									fullyQualifiedEnclosingTypeOrPackageName =
+										packageName;
+								}
+							}
+							if(CharOperation.equals(fullyQualifiedEnclosingTypeOrPackageName, importFlatName)) {
+								if(importBinding.isStatic()) {
+									if((modifiers & IConstants.AccStatic) != 0) {
+										acceptedType.qualifiedTypeName = typeName;
+										acceptedType.fullyQualifiedName = fullyQualifiedName;
+										onDemandFound.put(
+												simpleTypeName,
+												acceptedType);
+										continue next;
+									}
+								} else {
+									acceptedType.qualifiedTypeName = typeName;
+									acceptedType.fullyQualifiedName = fullyQualifiedName;
+									onDemandFound.put(
+											simpleTypeName,
+											acceptedType);
+									continue next;
+								}
+							}
+						}
+					} else {
+						foundType.mustBeQualified = true;
+					}
+					proposeType(
+							packageName,
+							simpleTypeName,
+							modifiers,
+							accessibility,
+							typeName,
+							fullyQualifiedName,
+							true);
+				}
+			}
+		}
+		char[][] keys = onDemandFound.keyTable;
+		Object[] values = onDemandFound.valueTable;
+		int max = keys.length;
+		for (int i = 0; i < max; i++) {
+			if(keys[i] != null) {
+				AcceptedType value = (AcceptedType) values[i];
+				if(value != null) {
+					proposeType(
+							value.packageName,
+							value.simpleTypeName,
+							value.modifiers,
+							value.accessibility,
+							value.qualifiedTypeName,
+							value.fullyQualifiedName,
+							value.mustBeQualified);
+				}
 			}
 		}
+		this.acceptedTypes = null; // reset
+	}
+
+	private void proposeType(char[] packageName, char[] simpleTypeName, int modifiers, int accessibility, char[] typeName, char[] fullyQualifiedName, boolean isQualified) {
+		if(PROPOSE_MEMBER_TYPES) {
+			if(this.assistNodeIsClass) {
+				if((modifiers & (IConstants.AccInterface | IConstants.AccAnnotation | IConstants.AccEnum)) != 0 ) return;
+			} else if(this.assistNodeIsInterface) {
+				if((modifiers & (IConstants.AccInterface | IConstants.AccAnnotation)) == 0) return;
+			} else if (this.assistNodeIsAnnotation) {
+				if((modifiers & IConstants.AccAnnotation) == 0) return;
+			}
+		}
+		
+		char[] completionName = fullyQualifiedName;
+		if(isQualified) {
+			if (packageName == null || packageName.length == 0)
+				if (this.unitScope != null && this.unitScope.fPackage.compoundName != CharOperation.NO_CHAR_CHAR)
+					return; // ignore types from the default package from outside it
+		} else {
+			completionName = simpleTypeName;
+		}
+		
+		int relevance = computeBaseRelevance();
+		relevance += computeRelevanceForInterestingProposal();
+		relevance += computeRelevanceForRestrictions(accessibility);
+		relevance += computeRelevanceForCaseMatching(this.completionToken, simpleTypeName);
+		relevance += computeRelevanceForExpectingType(packageName, simpleTypeName);
+		relevance += computeRelevanceForQualification(isQualified);
+		
+		int kind = modifiers & (IConstants.AccInterface | IConstants.AccEnum | IConstants.AccAnnotation);
+		switch (kind) {
+			case IConstants.AccAnnotation:
+			case IConstants.AccAnnotation | IConstants.AccInterface:
+				relevance += computeRelevanceForAnnotation();
+				relevance += computeRelevanceForInterface();
+				break;
+			case IConstants.AccEnum:
+				relevance += computeRelevanceForEnum();
+				break;
+			case IConstants.AccInterface:
+				relevance += computeRelevanceForInterface();
+				break;
+			default:
+				relevance += computeRelevanceForClass();
+				relevance += computeRelevanceForException(simpleTypeName);
+				break;
+		}
 		
 		this.noProposal = false;
 		if(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {
@@ -418,14 +640,14 @@ public final class CompletionEngine
 		this.requestor.acceptContext(context);
 	}
 	
-	private void complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation) {
+	private boolean complete(ASTNode astNode, ASTNode astNodeParent, Binding qualifiedBinding, Scope scope, boolean insideTypeAnnotation) {
 
 		setSourceRange(astNode.sourceStart, astNode.sourceEnd);
 		
 		scope = computeForbiddenBindings(astNode, astNodeParent, scope);
 		computeUninterestingBindings(astNodeParent, scope);
 		if(astNodeParent != null) {
-			if(!isValidParent(astNodeParent, astNode, scope)) return;
+			if(!isValidParent(astNodeParent, astNode, scope)) return false;
 			computeExpectedTypes(astNodeParent, astNode, scope);
 		}
 		
@@ -481,6 +703,7 @@ public final class CompletionEngine
 							&& switchStatement.expression.resolvedType != null
 							&& switchStatement.expression.resolvedType.isEnum()) {
 						if(!this.requestor.isIgnored(CompletionProposal.FIELD_REF)) {
+							this.assistNodeIsEnum = true;
 							this.findEnumConstant(this.completionToken, (SwitchStatement) astNodeParent);
 						}
 					} else {
@@ -521,10 +744,10 @@ public final class CompletionEngine
 						this.completionToken = ((CompletionOnSingleTypeReference) astNode).token;
 						
 						this.assistNodeIsClass = astNode instanceof CompletionOnClassReference;
-						this.assistNodeIsEnum = this.assistNodeIsClass;
 						this.assistNodeIsException = astNode instanceof CompletionOnExceptionReference;
 						this.assistNodeIsInterface = astNode instanceof CompletionOnInterfaceReference;
-	
+						this.assistNodeIsConstructor = ((CompletionOnSingleTypeReference) astNode).isConstructorType;
+						
 						// can be the start of a qualified type name
 						if (qualifiedBinding == null) {
 							if(this.completionToken.length == 0 &&
@@ -544,6 +767,10 @@ public final class CompletionEngine
 								scope,
 								scope.enclosingSourceType(),
 								false,
+								false,
+								false,
+								!this.assistNodeIsConstructor,
+								null,
 								new ObjectVector());
 							}
 						}
@@ -573,7 +800,13 @@ public final class CompletionEngine
 									setSourceRange((int) (completionPosition >>> 32), (int) completionPosition);
 	
 									if(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {
-										findMemberTypes(this.completionToken, receiverType, scope, scope.enclosingSourceType(), false, new ObjectVector());
+										findMemberTypes(
+												this.completionToken,
+												receiverType,
+												scope,
+												scope.enclosingSourceType(),
+												false,
+												new ObjectVector());
 									}
 									if(!this.requestor.isIgnored(CompletionProposal.FIELD_REF)) {
 										findClassField(this.completionToken, (TypeBinding) qualifiedBinding, scope);
@@ -655,7 +888,6 @@ public final class CompletionEngine
 								this.insideQualifiedReference = true;
 								
 								this.assistNodeIsClass = astNode instanceof CompletionOnQualifiedClassReference;
-								this.assistNodeIsEnum = this.assistNodeIsClass;
 								this.assistNodeIsException = astNode instanceof CompletionOnQualifiedExceptionReference;
 								this.assistNodeIsInterface = astNode instanceof CompletionOnQualifiedInterfaceReference;
 								
@@ -896,6 +1128,8 @@ public final class CompletionEngine
 																		
 																		findTypesAndPackages(this.completionToken, scope);
 																	} else if(annot.type instanceof CompletionOnQualifiedTypeReference) {
+																		this.insideQualifiedReference = true;
+																		
 																		CompletionOnQualifiedTypeReference type = (CompletionOnQualifiedTypeReference) annot.type;
 																		this.completionToken = type.completionIdentifier;
 																		long completionPosition = type.sourcePositions[type.tokens.length];
@@ -963,6 +1197,7 @@ public final class CompletionEngine
 				}
 			}
 		}
+		return true;
 	}
 	
 	public void complete(IType type, char[] snippet, int position, char[][] localVariableTypeNames, char[][] localVariableNames, int[] localVariableModifiers, boolean isStatic){	
@@ -1033,9 +1268,8 @@ public final class CompletionEngine
 					} catch (CompletionNodeFound e) {
 						//					completionNodeFound = true;
 						if (e.astNode != null) {
-							contextAccepted = true;
 							// if null then we found a problem in the completion node
-							complete(e.astNode, this.parser.assistNodeParent, e.qualifiedBinding, e.scope, e.insideTypeAnnotation);
+							contextAccepted = complete(e.astNode, this.parser.assistNodeParent, e.qualifiedBinding, e.scope, e.insideTypeAnnotation);
 						}
 					}
 				}
@@ -1159,34 +1393,36 @@ public final class CompletionEngine
 					for (int i = 0, length = imports.length; i < length; i++) {
 						ImportReference importReference = imports[i];
 						if (importReference instanceof CompletionOnImportReference) {
-							contextAccepted = true;
-							this.requestor.acceptContext(new CompletionContext());
-							findImports((CompletionOnImportReference) importReference);
-							if(this.noProposal && this.problem != null) {
-								this.requestor.completionFailure(this.problem);
-								if(DEBUG) {
-									this.printDebug(this.problem);
+							this.lookupEnvironment.buildTypeBindings(parsedUnit, null /*no access restriction*/);
+							if ((this.unitScope = parsedUnit.scope) != null) {
+								contextAccepted = true;
+								this.requestor.acceptContext(new CompletionContext());
+								findImports((CompletionOnImportReference) importReference);
+								if(this.noProposal && this.problem != null) {
+									this.requestor.completionFailure(this.problem);
+									if(DEBUG) {
+										this.printDebug(this.problem);
+									}
 								}
-							}
-							if(importReference.isStatic()) {
-								this.lookupEnvironment.buildTypeBindings(parsedUnit, null /*no access restriction*/);
-								if ((this.unitScope = parsedUnit.scope) != null) {
+								if(importReference.isStatic()) {
 									char[][] oldTokens = importReference.tokens;
 									int tokenCount = oldTokens.length;
 									char[] lastToken = oldTokens[tokenCount - 1];
 									char[][] qualifierTokens = CharOperation.subarray(oldTokens, 0, tokenCount - 1);
 									
-									Binding binding = this.unitScope.getTypeOrPackage(qualifierTokens);
-									if(binding != null && binding instanceof ReferenceBinding) {
-										ReferenceBinding ref = (ReferenceBinding) binding;
-										if(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {
-											this.findImportsOfMemberTypes(lastToken, ref);
-										}
-										if(!this.requestor.isIgnored(CompletionProposal.FIELD_REF)) {
-											this.findImportsOfStaticFields(lastToken, ref);
-										}
-										if(!this.requestor.isIgnored(CompletionProposal.METHOD_NAME_REFERENCE)) {
-											this.findImportsOfStaticMethdods(lastToken, ref);
+									if(qualifierTokens != null && qualifierTokens.length != 0) {
+										Binding binding = this.unitScope.getTypeOrPackage(qualifierTokens);
+										if(binding != null && binding instanceof ReferenceBinding) {
+											ReferenceBinding ref = (ReferenceBinding) binding;
+											if(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {
+												this.findImportsOfMemberTypes(lastToken, ref);
+											}
+											if(!this.requestor.isIgnored(CompletionProposal.FIELD_REF)) {
+												this.findImportsOfStaticFields(lastToken, ref);
+											}
+											if(!this.requestor.isIgnored(CompletionProposal.METHOD_NAME_REFERENCE)) {
+												this.findImportsOfStaticMethdods(lastToken, ref);
+											}
 										}
 									}
 								}
@@ -1237,9 +1473,8 @@ public final class CompletionEngine
 									System.out.println(this.parser.assistNodeParent);
 								}
 							}
-							contextAccepted = true;
 							// if null then we found a problem in the completion node
-							complete(e.astNode, this.parser.assistNodeParent, e.qualifiedBinding, e.scope, e.insideTypeAnnotation);
+							contextAccepted = complete(e.astNode, this.parser.assistNodeParent, e.qualifiedBinding, e.scope, e.insideTypeAnnotation);
 						}
 					}
 				}
@@ -1520,7 +1755,7 @@ public final class CompletionEngine
 
 				int relevance = computeBaseRelevance();
 				relevance += computeRelevanceForInterestingProposal(field);
-				relevance += R_ENUM_CONSTANT;
+				relevance += computeRelevanceForEnum();
 				relevance += computeRelevanceForCaseMatching(enumConstantName, field.name);
 				relevance += computeRelevanceForExpectingType(field.type);
 				relevance += computeRelevanceForQualification(false);
@@ -2113,7 +2348,8 @@ public final class CompletionEngine
 			this.nameEnvironment.findPackages(importName, this);
 		}
 		if(!this.requestor.isIgnored(CompletionProposal.TYPE_REF)) {
-			this.nameEnvironment.findTypes(importName, this);
+			this.nameEnvironment.findTypes(importName, PROPOSE_MEMBER_TYPES, this);
+			acceptTypes();
 		}
 	}
 	
@@ -2478,7 +2714,9 @@ public final class CompletionEngine
 		ObjectVector typesFound,
 		ReferenceBinding receiverType,
 		SourceTypeBinding invocationType,
-		boolean staticOnly) {
+		boolean staticOnly,
+		boolean fromStaticImport,
+		boolean checkQualification) {
 
 		// Inherited member types which are hidden by subclasses are filtered out
 		// No visibility checks can be performed without the scope & invocationSite
@@ -2533,11 +2771,47 @@ public final class CompletionEngine
 
 			typesFound.add(memberType);
 
+			if(!this.insideQualifiedReference && PROPOSE_MEMBER_TYPES) {
+				if(this.assistNodeIsClass) {
+					if(!memberType.isClass()) continue next;
+				} else if(this.assistNodeIsInterface) {
+					if(!memberType.isInterface() && !memberType.isAnnotationType()) continue next;
+				} else if (this.assistNodeIsAnnotation) {
+					if(!memberType.isAnnotationType()) continue next;
+				}
+			}
+			
+			char[] completionName = memberType.sourceName();
+			
+			boolean isQualified = false;
+			if(checkQualification && !fromStaticImport) {
+				char[] memberPackageName = memberType.qualifiedPackageName();
+				char[] memberTypeName = memberType.sourceName();
+				char[] memberEnclosingTypeNames = memberType.enclosingType().qualifiedSourceName();
+				if (mustQualifyType(memberPackageName, memberTypeName, memberEnclosingTypeNames, memberType.modifiers)) {
+					if (memberPackageName == null || memberPackageName.length == 0)
+						if (this.unitScope != null && this.unitScope.fPackage.compoundName != CharOperation.NO_CHAR_CHAR)
+							break next; // ignore types from the default package from outside it
+					isQualified = true;
+					completionName =
+						CharOperation.concat(
+								memberPackageName,
+								CharOperation.concat(
+										memberEnclosingTypeNames,
+										memberTypeName,
+										'.'),
+								'.');
+				}
+			}
+			
 			int relevance = computeBaseRelevance();
 			relevance += computeRelevanceForInterestingProposal();
 			relevance += computeRelevanceForCaseMatching(typeName, memberType.sourceName);
 			relevance += computeRelevanceForExpectingType(memberType);
 			relevance += computeRelevanceForRestrictions(IAccessRule.K_ACCESSIBLE);
+			if(!insideQualifiedReference) {
+				relevance += computeRelevanceForQualification(isQualified);
+			}
 
 			if (memberType.isClass()) {
 				relevance += computeRelevanceForClass();
@@ -2555,7 +2829,7 @@ public final class CompletionEngine
 				proposal.setSignature(getSignature(memberType));
 				proposal.setPackageName(memberType.qualifiedPackageName());
 				proposal.setTypeName(memberType.qualifiedSourceName());
-				proposal.setCompletion(memberType.sourceName());
+				proposal.setCompletion(completionName);
 				proposal.setFlags(memberType.modifiers);
 				proposal.setReplaceRange(this.startPosition - this.offset, this.endPosition - this.offset);
 				proposal.setRelevance(relevance);
@@ -2573,6 +2847,29 @@ public final class CompletionEngine
 		Scope scope,
 		SourceTypeBinding typeInvocation,
 		boolean staticOnly,
+		ObjectVector typesFound)  {
+		findMemberTypes(
+				typeName,
+				receiverType,
+				scope,
+				typeInvocation,
+				staticOnly,
+				false,
+				false,
+				false,
+				null,
+				typesFound);
+	}
+	private void findMemberTypes(
+		char[] typeName,
+		ReferenceBinding receiverType,
+		Scope scope,
+		SourceTypeBinding typeInvocation,
+		boolean staticOnly,
+		boolean fromStaticImport,
+		boolean checkQualification,
+		boolean proposeAllMemberTypes,
+		SourceTypeBinding typeToIgnore,
 		ObjectVector typesFound) {
 
 		ReferenceBinding currentType = receiverType;
@@ -2591,7 +2888,9 @@ public final class CompletionEngine
 				typesFound,
 				receiverType,
 				typeInvocation,
-				staticOnly);
+				staticOnly,
+				fromStaticImport,
+				checkQualification);
 			return;
 		}
 
@@ -2615,17 +2914,37 @@ public final class CompletionEngine
 						lastPosition);
 				interfacesToVisit[lastPosition] = itsInterfaces;
 			}
-
+			
 			findMemberTypes(
 				typeName,
 				currentType.memberTypes(),
 				typesFound,
 				receiverType,
 				typeInvocation,
-				staticOnly);
+				staticOnly,
+				fromStaticImport,
+				checkQualification);
+			
 			currentType = currentType.superclass();
 
 		} while (currentType != null);
+		
+		
+		if(proposeAllMemberTypes) {
+			ReferenceBinding[] memberTypes = receiverType.memberTypes();
+			for (int i = 0; i < memberTypes.length; i++) {
+				if(memberTypes[i] != typeToIgnore) {
+					findSubMemberTypes(
+						typeName,
+						memberTypes[i],
+						scope,
+						typeInvocation,
+						staticOnly,
+						fromStaticImport,
+						typesFound);
+				}
+			}
+		}
 
 		if (interfacesToVisit != null) {
 			for (int i = 0; i <= lastPosition; i++) {
@@ -2636,15 +2955,17 @@ public final class CompletionEngine
 					if ((anInterface.tagBits & TagBits.InterfaceVisited) == 0) {
 						// if interface as not already been visited
 						anInterface.tagBits |= TagBits.InterfaceVisited;
-
+						
 						findMemberTypes(
 							typeName,
 							anInterface.memberTypes(),
 							typesFound,
 							receiverType,
 							typeInvocation,
-							staticOnly);
-
+							staticOnly,
+							fromStaticImport,
+							checkQualification);
+								
 						ReferenceBinding[] itsInterfaces = anInterface.superInterfaces();
 						if (itsInterfaces != NoSuperInterfaces) {
 
@@ -2669,6 +2990,52 @@ public final class CompletionEngine
 			}
 		}
 	}
+	
+	private void findSubMemberTypes(
+		char[] typeName,
+		ReferenceBinding receiverType,
+		Scope scope,
+		SourceTypeBinding typeInvocation,
+		boolean staticOnly,
+		boolean fromStaticImport,
+		ObjectVector typesFound) {
+
+		ReferenceBinding currentType = receiverType;
+		if (typeName == null || typeName.length == 0)
+			return;
+
+		if (currentType.superInterfaces() == null)
+			return; // we're trying to find a supertype
+		
+		findMemberTypes(
+				typeName,
+				currentType.memberTypes(),
+				typesFound,
+				receiverType,
+				typeInvocation,
+				staticOnly,
+				fromStaticImport,
+				true);
+		
+		ReferenceBinding[] memberTypes = receiverType.memberTypes();
+		next : for (int i = 0; i < memberTypes.length; i++) {
+			if (this.options.checkVisibility) {
+				if (typeInvocation != null && !memberTypes[i].canBeSeenBy(receiverType, typeInvocation)) {
+					continue next;
+				} else if(typeInvocation == null && !memberTypes[i].canBeSeenBy(this.unitScope.fPackage)) {
+					continue next;
+				}
+			}
+			findSubMemberTypes(
+				typeName,
+				memberTypes[i],
+				scope,
+				typeInvocation,
+				staticOnly,
+				fromStaticImport,
+				typesFound);
+		}
+	}
 
 	private void findIntefacesMethods(
 		char[] selector,
@@ -3283,15 +3650,15 @@ public final class CompletionEngine
 			
 			int length = method.parameters.length;
 			char[][] parameterPackageNames = new char[length][];
-			char[][] parameterTypeNames = new char[length][];
+			char[][] parameterFullTypeNames = new char[length][];
 			
 			for (int i = 0; i < length; i++) {
 				TypeBinding type = method.parameters[i];
 				parameterPackageNames[i] = type.qualifiedPackageName();
-				parameterTypeNames[i] = type.qualifiedSourceName();
+				parameterFullTypeNames[i] = type.qualifiedSourceName();
 			}
 
-			char[][] parameterNames = findMethodParameterNames(method,parameterTypeNames);
+			char[][] parameterNames = findMethodParameterNames(method,parameterFullTypeNames);
 			
 			StringBuffer completion = new StringBuffer(10);
 			// flush uninteresting modifiers
@@ -3302,9 +3669,15 @@ public final class CompletionEngine
 					ASTNode.printModifiers(insertedModifiers, completion);
 				}
 				char[] returnPackageName = method.returnType.qualifiedPackageName();
-				char[] returnTypeName = method.returnType.qualifiedSourceName();
-				if(mustQualifyType(returnPackageName, returnTypeName)) {
-					completion.append(CharOperation.concat(returnPackageName, returnTypeName,'.'));
+				char[] returnFullTypeName = method.returnType.qualifiedSourceName();
+				
+				TypeBinding returnLeafType = method.returnType.leafComponentType();
+				if(!returnLeafType.isBaseType() && mustQualifyType(
+						returnPackageName,
+						returnLeafType.sourceName(),
+						returnLeafType.isMemberType() ? returnLeafType.enclosingType().qualifiedSourceName() : null,
+						((ReferenceBinding)returnLeafType).modifiers)) {
+					completion.append(CharOperation.concat(returnPackageName, returnFullTypeName,'.'));
 				} else {
 					completion.append(method.returnType.sourceName());
 				}
@@ -3313,10 +3686,16 @@ public final class CompletionEngine
 				completion.append('(');
 
 				for(int i = 0; i < length ; i++){
-					if(mustQualifyType(parameterPackageNames[i], parameterTypeNames[i])){
-						completion.append(CharOperation.concat(parameterPackageNames[i], parameterTypeNames[i], '.'));
+					TypeBinding type = method.parameters[i];
+					TypeBinding leafType = type.leafComponentType();
+					if(!leafType.isBaseType() && mustQualifyType(
+							parameterPackageNames[i],
+							leafType.sourceName(),
+							leafType.isMemberType() ? leafType.enclosingType().qualifiedSourceName() : null,
+							((ReferenceBinding)leafType).modifiers)){
+						completion.append(CharOperation.concat(parameterPackageNames[i], parameterFullTypeNames[i], '.'));
 					} else {
-						completion.append(parameterTypeNames[i]);
+						completion.append(parameterFullTypeNames[i]);
 					}
 					completion.append(' ');
 					if(parameterNames != null){
@@ -3339,15 +3718,19 @@ public final class CompletionEngine
 						ReferenceBinding exception = exceptions[i];
 
 						char[] exceptionPackageName = exception.qualifiedPackageName();
-						char[] exceptionTypeName = exception.qualifiedSourceName();
+						char[] exceptionFullTypeName = exception.qualifiedSourceName();
 						
 						if(i != 0){
 							completion.append(',');
 							completion.append(' ');
 						}
 						
-						if(mustQualifyType(exceptionPackageName, exceptionTypeName)){
-							completion.append(CharOperation.concat(exceptionPackageName, exceptionTypeName, '.'));
+						if(mustQualifyType(
+								exceptionPackageName,
+								exception.sourceName,
+								exception.isMemberType() ? exception.enclosingType().qualifiedSourceName() : null,
+								exception.modifiers)){
+							completion.append(CharOperation.concat(exceptionPackageName, exceptionFullTypeName, '.'));
 						} else {
 							completion.append(exception.sourceName());
 						}
@@ -3372,7 +3755,7 @@ public final class CompletionEngine
 				proposal.setDeclarationPackageName(method.declaringClass.qualifiedPackageName());
 				proposal.setDeclarationTypeName(method.declaringClass.qualifiedSourceName());
 				proposal.setParameterPackageNames(parameterPackageNames);
-				proposal.setParameterTypeNames(parameterTypeNames);
+				proposal.setParameterTypeNames(parameterFullTypeNames);
 				proposal.setPackageName(method.returnType.qualifiedPackageName());
 				proposal.setTypeName(method.returnType.qualifiedSourceName());
 				proposal.setCompletion(completion.toString().toCharArray());
@@ -3617,12 +4000,14 @@ public final class CompletionEngine
 		char[] typeName,
 		SourceTypeBinding currentType,
 		Scope scope,
+		boolean proposeAllMemberTypes,
 		ObjectVector typesFound) {
 		if (typeName == null)
 			return;
 
 		int typeLength = typeName.length;
 
+		SourceTypeBinding nextTypeToIgnore = null;
 		while (scope != null) { // done when a COMPILATION_UNIT_SCOPE is found
 
 			switch (scope.kind) {
@@ -3640,12 +4025,23 @@ public final class CompletionEngine
 							if (!localType.isAnonymousType()) {
 								if (this.isForbidden(localType))
 									continue next;
+								
 								if (typeLength > localType.sourceName.length)
 									continue next;
 								if (!CharOperation.prefixEquals(typeName, localType.sourceName, false
 									/* ignore case */
 									))
 									continue next;
+								
+								if(PROPOSE_MEMBER_TYPES) {
+									if(this.assistNodeIsClass) {
+										if(!localType.isClass()) continue next;
+									} else if(this.assistNodeIsInterface) {
+										if(!localType.isInterface() && !localType.isAnnotationType()) continue next;
+									} else if (this.assistNodeIsAnnotation) {
+										if(!localType.isAnnotationType()) continue next;
+									}
+								}
 
 								int relevance = computeBaseRelevance();
 								relevance += computeRelevanceForInterestingProposal();
@@ -3678,7 +4074,9 @@ public final class CompletionEngine
 					break;
 
 				case Scope.CLASS_SCOPE :
-					findMemberTypes(typeName, scope.enclosingSourceType(), scope, currentType, false, typesFound);
+					SourceTypeBinding enclosingSourceType = scope.enclosingSourceType();
+					findMemberTypes(typeName, enclosingSourceType, scope, currentType, false, false, false, proposeAllMemberTypes, nextTypeToIgnore, typesFound);
+					nextTypeToIgnore = enclosingSourceType;
 					if (typeLength == 0)
 						return; // do not search outside the class scope if no prefix was provided
 					break;
@@ -3837,20 +4235,46 @@ public final class CompletionEngine
 		
 		boolean proposeType = !this.requestor.isIgnored(CompletionProposal.TYPE_REF);
 		
+		boolean proposeAllMemberTypes = !this.assistNodeIsConstructor && PROPOSE_MEMBER_TYPES;
+		
 		ObjectVector typesFound = new ObjectVector();
 		
 		if (proposeType && scope.enclosingSourceType() != null) {
-			findNestedTypes(token, scope.enclosingSourceType(), scope, typesFound);
+			findNestedTypes(token, scope.enclosingSourceType(), scope, proposeAllMemberTypes, typesFound);
 			findTypeParameters(token, scope);
 		}
 
 		if (proposeType && this.unitScope != null) {
+			ReferenceBinding outerInvocationType = scope.enclosingSourceType();
+			if(outerInvocationType != null) {
+				ReferenceBinding temp = outerInvocationType.enclosingType();
+				while(temp != null) {
+					outerInvocationType = temp;
+					temp = temp.enclosingType();
+				}
+			}
+			
 			int typeLength = token.length;
 			SourceTypeBinding[] types = this.unitScope.topLevelTypes;
 
 			for (int i = 0, length = types.length; i < length; i++) {
 				SourceTypeBinding sourceType = types[i]; 
 				
+				if(isForbidden(sourceType)) continue;
+				
+				if(proposeAllMemberTypes &&
+					sourceType != outerInvocationType &&
+					PROPOSE_MEMBER_TYPES) {
+					findSubMemberTypes(
+							token,
+							sourceType,
+							scope,
+							scope.enclosingSourceType(),
+							false,
+							false,
+							typesFound);
+				}
+				
 				if (sourceType.sourceName == CompletionParser.FAKE_TYPE_NAME) continue;
 				if (sourceType.sourceName == TypeConstants.PACKAGE_INFO_NAME) continue;
 
@@ -3859,9 +4283,17 @@ public final class CompletionEngine
 				if (!CharOperation.prefixEquals(token, sourceType.sourceName, false))	continue;
 				
 				this.knownTypes.put(CharOperation.concat(sourceType.qualifiedPackageName(), sourceType.sourceName(), '.'), this);
-
-				if(isForbidden(sourceType)) continue;
-					
+				
+				if(PROPOSE_MEMBER_TYPES) {
+					if(this.assistNodeIsClass) {
+						if(!sourceType.isClass()) continue;
+					} else if(this.assistNodeIsInterface) {
+						if(!sourceType.isInterface() && !sourceType.isAnnotationType()) continue;
+					} else if (this.assistNodeIsAnnotation) {
+						if(!sourceType.isAnnotationType()) continue;
+					}
+				}
+				
 				int relevance = computeBaseRelevance();
 				relevance += computeRelevanceForInterestingProposal();
 				relevance += computeRelevanceForCaseMatching(token, sourceType.sourceName);
@@ -3873,7 +4305,7 @@ public final class CompletionEngine
 					relevance += computeRelevanceForAnnotation();
 				} else if (sourceType.isInterface()) {
 					relevance += computeRelevanceForInterface();
-				} else {
+				} else if(sourceType.isClass()){
 					relevance += computeRelevanceForClass();
 					relevance += computeRelevanceForException(sourceType.sourceName);
 				}
@@ -3897,7 +4329,7 @@ public final class CompletionEngine
 		}
 		
 		if(proposeType) {
-			this.findTypesFromStaticImports(token, scope, typesFound);
+			this.findTypesFromStaticImports(token, scope, proposeAllMemberTypes, typesFound);
 		}
 		
 		if (token.length == 0) {
@@ -3916,7 +4348,7 @@ public final class CompletionEngine
 											case AssistOptions.FILTER_WARNING:
 												return;
 											case AssistOptions.FILTER_ERROR:
-												if(this.forbiddenReferenceIsError) return;
+												if(this.forbiddenReferenceIsError) continue next;
 												break;
 											
 										}
@@ -3927,7 +4359,7 @@ public final class CompletionEngine
 											case AssistOptions.FILTER_WARNING:
 												return;
 											case AssistOptions.FILTER_ERROR:
-												if(this.discouragedReferenceIsError) return;
+												if(this.discouragedReferenceIsError) continue next;
 												break;
 											
 										}
@@ -3947,7 +4379,7 @@ public final class CompletionEngine
 							
 							boolean isQualified = false;
 							if (!this.insideQualifiedReference && !refBinding.isMemberType()) {
-								if (mustQualifyType(packageName, typeName)) {
+								if (mustQualifyType(packageName, typeName, null, refBinding.modifiers)) {
 									if (packageName == null || packageName.length == 0)
 										if (this.unitScope != null && this.unitScope.fPackage.compoundName != CharOperation.NO_CHAR_CHAR)
 											continue next; // ignore types from the default package from outside it
@@ -3956,6 +4388,16 @@ public final class CompletionEngine
 								}
 							}
 							
+							if(PROPOSE_MEMBER_TYPES) {
+								if(this.assistNodeIsClass) {
+									if(!refBinding.isClass()) continue next;
+								} else if(this.assistNodeIsInterface) {
+									if(!refBinding.isInterface() && !refBinding.isAnnotationType()) continue next;
+								} else if (this.assistNodeIsAnnotation) {
+									if(!refBinding.isAnnotationType()) continue next;
+								}
+							}
+							
 							int relevance = computeBaseRelevance();
 							relevance += computeRelevanceForInterestingProposal();
 							relevance += computeRelevanceForCaseMatching(token, typeName);
@@ -3997,7 +4439,18 @@ public final class CompletionEngine
 				findKeywords(token, baseTypes);
 			}
 			if(proposeType) {
-				this.nameEnvironment.findTypes(token, this);
+				int l = typesFound.size();
+				for (int i = 0; i < l; i++) {
+					ReferenceBinding typeFound = (ReferenceBinding) typesFound.elementAt(i);
+					char[] fullyQualifiedTypeName =
+						CharOperation.concat(
+								typeFound.qualifiedPackageName(),
+								typeFound.qualifiedSourceName(), 
+								'.');
+					this.knownTypes.put(fullyQualifiedTypeName, this);
+				}
+				this.nameEnvironment.findTypes(token, proposeAllMemberTypes, this);
+				acceptTypes();
 			}
 			if(!this.requestor.isIgnored(CompletionProposal.PACKAGE_REF)) {
 				this.nameEnvironment.findPackages(token, this);
@@ -4086,7 +4539,7 @@ public final class CompletionEngine
 					relevance += computeRelevanceForAnnotation();
 				} else if (sourceType.isInterface()) {
 					relevance += computeRelevanceForInterface();
-				} else {
+				} else if (sourceType.isClass()) {
 					relevance += computeRelevanceForClass();
 					relevance += computeRelevanceForException(sourceType.sourceName);
 				}
@@ -4111,14 +4564,15 @@ public final class CompletionEngine
 		}
 		
 		if(proposeType) {
-			this.nameEnvironment.findTypes(qualifiedName, this);
+			this.nameEnvironment.findTypes(qualifiedName, false, this);
+			acceptTypes();
 		}
 		if(!this.requestor.isIgnored(CompletionProposal.PACKAGE_REF)) {
 			this.nameEnvironment.findPackages(qualifiedName, this);
 		}
 	}
 
-	private void findTypesFromStaticImports(char[] token, Scope scope, ObjectVector typesFound) {
+	private void findTypesFromStaticImports(char[] token, Scope scope, boolean proposeAllMemberTypes, ObjectVector typesFound) {
 		ImportBinding[] importBindings = scope.compilationUnitScope().imports;
 		for (int i = 0; i < importBindings.length; i++) {
 			ImportBinding importBinding = importBindings[i];
@@ -4133,6 +4587,10 @@ public final class CompletionEngine
 									scope,
 									scope.enclosingSourceType(),
 									true,
+									true,
+									true,
+									proposeAllMemberTypes,
+									null,
 									typesFound);
 						}
 					} else {
@@ -4150,10 +4608,21 @@ public final class CompletionEngine
 							
 							typesFound.add(typeBinding);
 							
+							if(PROPOSE_MEMBER_TYPES) {
+								if(this.assistNodeIsClass) {
+									if(!typeBinding.isClass()) continue;
+								} else if(this.assistNodeIsInterface) {
+									if(!typeBinding.isInterface() && !typeBinding.isAnnotationType()) continue;
+								} else if (this.assistNodeIsAnnotation) {
+									if(!typeBinding.isAnnotationType()) continue;
+								}
+							}
+							
 							int relevance = computeBaseRelevance();
 							relevance += computeRelevanceForInterestingProposal();
 							relevance += computeRelevanceForCaseMatching(token, typeBinding.sourceName);
 							relevance += computeRelevanceForExpectingType(typeBinding);
+							relevance += computeRelevanceForQualification(false);
 							relevance += computeRelevanceForRestrictions(IAccessRule.K_ACCESSIBLE);
 							
 							if (typeBinding.isClass()) {
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/ISearchRequestor.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/ISearchRequestor.java
index f242334..0d8f71e 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/ISearchRequestor.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/ISearchRequestor.java
@@ -28,7 +28,7 @@ public interface ISearchRequestor {
 	 *    Nested type names are in the qualified form "A.I".
 	 *    The default package is represented by an empty array.
 	 */
-	public void acceptType(char[] packageName, char[] typeName, int modifiers, AccessRestriction accessRestriction);
+	public void acceptType(char[] packageName, char[] typeName, char[][] enclosingTypeNames, int modifiers, AccessRestriction accessRestriction);
 
 //	/**
 //	 * One result of the search consists of a new annotation.
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
index 07d600b..57e6cef 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
@@ -131,9 +131,20 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 		this.parser = new SelectionParser(problemReporter);
 	}
 
-	public void acceptType(char[] packageName, char[] typeName, int modifiers, AccessRestriction accessRestriction) {
-		if (CharOperation.equals(typeName, this.selectedIdentifier)) {
-			if(mustQualifyType(packageName, typeName)) {
+	public void acceptType(char[] packageName, char[] simpleTypeName, char[][] enclosingTypeNames, int modifiers, AccessRestriction accessRestriction) {
+		char[] typeName = enclosingTypeNames == null ?
+				simpleTypeName :
+					CharOperation.concat(
+						CharOperation.concatWith(enclosingTypeNames, '.'),
+						simpleTypeName,
+						'.');
+		
+		if (CharOperation.equals(simpleTypeName, this.selectedIdentifier)) {
+			char[] flatEnclosingTypeNames =
+				enclosingTypeNames == null || enclosingTypeNames.length == 0 ?
+						null :
+							CharOperation.concatWith(enclosingTypeNames, '.');
+			if(mustQualifyType(packageName, simpleTypeName, flatEnclosingTypeNames, modifiers)) {
 				int length = 0;
 				int kind = modifiers & (IConstants.AccInterface | IConstants.AccEnum | IConstants.AccAnnotation);
 				switch (kind) {
@@ -601,7 +612,7 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 							char[][] tokens = ((SelectionOnImportReference) importReference).tokens;
 							this.noProposal = false;
 							this.requestor.acceptPackage(CharOperation.concatWith(tokens, '.'));
-							this.nameEnvironment.findTypes(CharOperation.concatWith(tokens, '.'), this);
+							this.nameEnvironment.findTypes(CharOperation.concatWith(tokens, '.'), false, this);
 							
 							if(importReference.isStatic()) {
 								this.lookupEnvironment.buildTypeBindings(parsedUnit, null /*no access restriction*/);
@@ -623,7 +634,7 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 							if(!this.acceptedAnswer) {
 								acceptQualifiedTypes();
 								if (!this.acceptedAnswer) {
-									this.nameEnvironment.findTypes(this.selectedIdentifier, this);
+									this.nameEnvironment.findTypes(this.selectedIdentifier, false, this);
 									// try with simple type name
 									if(!this.acceptedAnswer) {
 										acceptQualifiedTypes();
@@ -672,7 +683,7 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 			// only reaches here if no selection could be derived from the parsed tree
 			// thus use the selected source and perform a textual type search
 			if (!this.acceptedAnswer) {
-				this.nameEnvironment.findTypes(this.selectedIdentifier, this);
+				this.nameEnvironment.findTypes(this.selectedIdentifier, false, this);
 				
 				// accept qualified types only if no unqualified type was accepted
 				if(!this.acceptedAnswer) {
@@ -1047,7 +1058,7 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 			// thus use the selected source and perform a textual type search
 			if (!this.acceptedAnswer && searchInEnvironment) {
 				if (this.selectedIdentifier != null) {
-					this.nameEnvironment.findTypes(typeName, this);
+					this.nameEnvironment.findTypes(typeName, false, this);
 					
 					// accept qualified types only if no unqualified type was accepted
 					if(!this.acceptedAnswer) {
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnSingleTypeReference.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnSingleTypeReference.java
index 7d40ec9..a7f415d 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnSingleTypeReference.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionOnSingleTypeReference.java
@@ -29,6 +29,7 @@ import org.eclipse.jdt.internal.compiler.lookup.*;
 
 public class CompletionOnSingleTypeReference extends SingleTypeReference {
 public boolean isCompletionNode;
+public boolean isConstructorType;
 public CompletionOnFieldType fieldTypeCompletionNode;
 
 public CompletionOnSingleTypeReference(char[] source, long pos) {
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java
index a254bd4..cb1371f 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java
@@ -905,6 +905,9 @@ private boolean checkClassInstanceCreation() {
 			} else {
 				type = getTypeReference(0);
 			}
+			if(type instanceof CompletionOnSingleTypeReference) {
+				((CompletionOnSingleTypeReference)type).isConstructorType = true;
+			}
 			allocExpr.type = type;
 			allocExpr.sourceStart = type.sourceStart;
 			allocExpr.sourceEnd = type.sourceEnd;
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Engine.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Engine.java
index 8e4cfe5..86b3a22 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Engine.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Engine.java
@@ -21,6 +21,7 @@ import org.eclipse.jdt.internal.compiler.lookup.*;
 import org.eclipse.jdt.internal.compiler.parser.*;
 import org.eclipse.jdt.internal.compiler.problem.ProblemSeverities;
 import org.eclipse.jdt.internal.compiler.impl.*;
+import org.eclipse.jdt.internal.core.NameLookup;
 import org.eclipse.jdt.internal.core.SearchableEnvironment;
 
 public abstract class Engine implements ITypeRequestor {
@@ -35,6 +36,13 @@ public abstract class Engine implements ITypeRequestor {
 	public boolean forbiddenReferenceIsError;
 	public boolean discouragedReferenceIsError;
 	
+	public boolean importCachesInitialized = false;
+	public char[][][] importsCache;
+	public ImportBinding[] onDemandImportsCache;
+	public int importCacheCount = 0;
+	public int onDemandImportCacheCount = 0;
+	public char[] currentPackageName = null;
+	
 	public Engine(Map settings){
 		this.options = new AssistOptions(settings);
 		this.compilerOptions = new CompilerOptions(settings);
@@ -87,47 +95,144 @@ public abstract class Engine implements ITypeRequestor {
 
 	public abstract AssistParser getParser();
 	
+	public void initializeImportCaches() {
+		ImportBinding[] importBindings = this.unitScope.imports;
+		int length = importBindings == null ? 0 : importBindings.length;
+		
+		this.currentPackageName = CharOperation.concatWith(unitScope.fPackage.compoundName, '.');
+		
+		for (int i = 0; i < length; i++) {
+			ImportBinding importBinding = importBindings[i];
+			if(importBinding.onDemand) {
+				if(this.onDemandImportsCache == null) {
+					this.onDemandImportsCache = new ImportBinding[length - i];
+				}
+				this.onDemandImportsCache[this.onDemandImportCacheCount++] = 
+					importBinding;
+			} else {
+				if(!(importBinding.resolvedImport instanceof MethodBinding) ||
+						importBinding instanceof ImportConflictBinding) {
+					if(this.importsCache == null) {
+						this.importsCache = new char[length - i][][];
+					}
+					this.importsCache[this.importCacheCount++] = new char[][]{
+							importBinding.compoundName[importBinding.compoundName.length - 1],
+							CharOperation.concatWith(importBinding.compoundName, '.')
+						};
+				}
+			}
+		}
+		
+		this.importCachesInitialized = true;
+	}
+	
 	protected boolean mustQualifyType(
 		char[] packageName,
-		char[] typeName) {
+		char[] typeName,
+		char[] enclosingTypeNames,
+		int modifiers) {
 
 		// If there are no types defined into the current CU yet.
 		if (unitScope == null)
 			return true;
-			
-		char[][] compoundPackageName = CharOperation.splitOn('.', packageName);
-		char[] readableTypeName = CharOperation.concat(packageName, typeName, '.');
-
-		if (CharOperation.equals(unitScope.fPackage.compoundName, compoundPackageName))
+		
+		if(!this.importCachesInitialized) {
+			this.initializeImportCaches();
+		}
+		
+		char[] fullyQualifiedTypeName = null;
+		
+		for (int i = 0; i < this.importCacheCount; i++) {
+			char[][] importName = this.importsCache[i];
+			if(CharOperation.equals(typeName, importName[0])) {
+				if (fullyQualifiedTypeName == null) {
+					fullyQualifiedTypeName =
+						enclosingTypeNames == null || enclosingTypeNames.length == 0
+								? CharOperation.concat(
+										packageName,
+										typeName,
+										'.')
+								: CharOperation.concat(
+										CharOperation.concat(
+											packageName,
+											enclosingTypeNames,
+											'.'),
+										typeName,
+										'.');
+				}
+				return !CharOperation.equals(fullyQualifiedTypeName, importName[1]);
+			}
+		}
+		
+		if ((enclosingTypeNames == null || enclosingTypeNames.length == 0 ) && CharOperation.equals(this.currentPackageName, packageName))
 			return false;
-
-		ImportBinding[] imports = unitScope.imports;
-		if (imports != null){
-			for (int i = 0, length = imports.length; i < length; i++) {
-				if (imports[i].onDemand) {
-					if (CharOperation.equals(imports[i].compoundName, compoundPackageName)) {
-						for (int j = 0; j < imports.length; j++) {
-							if(i != j){
-								if(imports[j].onDemand) {
-									if(nameEnvironment.findType(typeName, imports[j].compoundName) != null){
-										return true;
-									}
-								} else {
-									if(CharOperation.equals(CharOperation.lastSegment(imports[j].readableName(), '.'), typeName)
-										&& !CharOperation.equals(imports[j].compoundName, CharOperation.splitOn('.', readableTypeName))) {
-										return true;	
-									}
-								}
-							}
+		
+		char[] fullyQualifiedEnclosingTypeName = null;
+		
+		for (int i = 0; i < this.onDemandImportCacheCount; i++) {
+			ImportBinding importBinding = this.onDemandImportsCache[i];
+			Binding resolvedImport = importBinding.resolvedImport;
+			
+			char[][] importName = importBinding.compoundName;
+			char[] importFlatName = CharOperation.concatWith(importName, '.');
+			
+			boolean isFound = false;
+			// resolvedImport is a ReferenceBindng or a PackageBinding
+			if(resolvedImport instanceof ReferenceBinding) {
+				if(enclosingTypeNames != null && enclosingTypeNames.length != 0) {
+					if(fullyQualifiedEnclosingTypeName == null) {
+						fullyQualifiedEnclosingTypeName =
+							CharOperation.concat(
+									packageName,
+									enclosingTypeNames,
+									'.');
+					}
+					if(CharOperation.equals(fullyQualifiedEnclosingTypeName, importFlatName)) {
+						if(importBinding.isStatic()) {
+							isFound = (modifiers & IConstants.AccStatic) != 0;
+						} else {
+							isFound = true;
 						}
-						return false; // how do you match p1.p2.A.* ?
 					}
-	
-				} else
-	
-					if (CharOperation.equals(imports[i].readableName(), readableTypeName)) {
-						return false;
+				}
+			} else {
+				if(enclosingTypeNames == null || enclosingTypeNames.length == 0) {
+					if(CharOperation.equals(packageName, importFlatName)) {
+						if(importBinding.isStatic()) {
+							isFound = (modifiers & IConstants.AccStatic) != 0;
+						} else {
+							isFound = true;
+						}
 					}
+				}
+			}
+			
+			// find potential conflict with another import
+			if(isFound) {
+				for (int j = 0; j < this.onDemandImportCacheCount; j++) {
+					if(i != j) {
+						ImportBinding conflictingImportBinding = this.onDemandImportsCache[j];
+						if(conflictingImportBinding.resolvedImport instanceof ReferenceBinding) {
+							ReferenceBinding refBinding =
+								(ReferenceBinding) conflictingImportBinding.resolvedImport;
+							if (refBinding.getMemberType(typeName) != null) {
+								return true;
+							}
+						} else {
+							char[] conflictingImportName =
+								CharOperation.concatWith(conflictingImportBinding.compoundName, '.');
+							
+							if (this.nameEnvironment.nameLookup.findType(
+									String.valueOf(typeName),
+									String.valueOf(conflictingImportName),
+									false,
+									NameLookup.ACCEPT_ALL) != null) {
+								return true;
+							}
+						}
+					}
+				}
+				return false;
 			}
 		}
 		return true;
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CancelableNameEnvironment.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CancelableNameEnvironment.java
index 2110dde..f62da56 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CancelableNameEnvironment.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CancelableNameEnvironment.java
@@ -50,8 +50,8 @@ public class CancelableNameEnvironment extends SearchableEnvironment {
 		return super.findType(compoundTypeName);
 	}
 
-	public void findTypes(char[] prefix, ISearchRequestor storage) {
+	public void findTypes(char[] prefix, boolean findMembers, ISearchRequestor storage) {
 		checkCanceled();
-		super.findTypes(prefix, storage);
+		super.findTypes(prefix, findMembers, storage);
 	}
 }
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironment.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironment.java
index 6dab364..a4cf72e 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironment.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironment.java
@@ -205,7 +205,7 @@ public class SearchableEnvironment
 	 * This method can not be used to find member types... member
 	 * types are found relative to their enclosing type.
 	 */
-	public void findTypes(char[] prefix, final ISearchRequestor storage) {
+	public void findTypes(char[] prefix, final boolean findMembers, final ISearchRequestor storage) {
 
 		/*
 			if (true){
@@ -271,9 +271,9 @@ public class SearchableEnvironment
 				public void acceptType(int modifiers, char[] packageName, char[] simpleTypeName, char[][] enclosingTypeNames, String path, AccessRestriction access) {
 					if (excludePath != null && excludePath.equals(path))
 						return;
-					if (enclosingTypeNames != null && enclosingTypeNames.length > 0)
+					if (!findMembers && enclosingTypeNames != null && enclosingTypeNames.length > 0)
 						return; // accept only top level types
-					storage.acceptType(packageName, simpleTypeName, modifiers, access);
+					storage.acceptType(packageName, simpleTypeName, enclosingTypeNames, modifiers, access);
 				}
 			};
 			try {
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironmentRequestor.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironmentRequestor.java
index 0346a12..b859f90 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironmentRequestor.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SearchableEnvironmentRequestor.java
@@ -112,7 +112,7 @@ public void acceptType(IType type) {
 				}
 			}
 		}
-		this.requestor.acceptType(packageName, type.getElementName().toCharArray(), type.getFlags(), accessRestriction);
+		this.requestor.acceptType(packageName, type.getElementName().toCharArray(), null, type.getFlags(), accessRestriction);
 	} catch (JavaModelException jme) {
 		// ignore
 	}

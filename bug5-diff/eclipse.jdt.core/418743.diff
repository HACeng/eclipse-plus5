commit 906228369eed23f930bc548422a9ed0c01a3237e
Author: Stephan Herrmann <stephan.herrmann@berlin.de>
Date:   Tue Feb 25 19:59:49 2014 +0100

    Bug 418743 - [1.8][null] contradictory annotations on invocation of
    generic method not reported

3	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java
67	2	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
4	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
54	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java
7	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java
3	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java
27	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
3	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java
index 6c7d73a..cac7ec3 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java
@@ -35,6 +35,7 @@
  *								Bug 392238 - [1.8][compiler][null] Detect semantically invalid null type annotations
  *								Bug 416307 - [1.8][compiler][null] subclass with type parameter substitution confuses null checking
  *								Bug 424637 - [1.8][compiler][null] AIOOB in ReferenceExpression.resolveType with a method reference to Files::walk
+ *								Bug 418743 - [1.8][null] contradictory annotations on invocation of generic method not reported
  *     Jesper S Moller - Contributions for
  *								bug 382701 - [1.8][compiler] Implement semantic analysis of Lambda expressions & Reference expression
  *								bug 382721 - [1.8][compiler] Effectively final variables needs special treatment
@@ -434,6 +435,7 @@ public void test011_problem_categories() {
 		expectedProblemAttributes.put("ContainerAnnotationTypeMustHaveValue", new ProblemAttributes(CategorizedProblem.CAT_TYPE));
 		expectedProblemAttributes.put("ContradictoryNullAnnotations", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));
 		expectedProblemAttributes.put("ContradictoryNullAnnotationsOnBound", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));
+		expectedProblemAttributes.put("ContradictoryNullAnnotationsInferred", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));
 		expectedProblemAttributes.put("ComparingIdentical", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));
 		expectedProblemAttributes.put("ConflictingImport", new ProblemAttributes(CategorizedProblem.CAT_IMPORT));
 		expectedProblemAttributes.put("ConflictingNullAnnotations", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));
@@ -1256,6 +1258,7 @@ public void test012_compiler_problems_tuning() {
 		expectedProblemAttributes.put("ContainerAnnotationTypeMustHaveValue", SKIP);
 		expectedProblemAttributes.put("ContradictoryNullAnnotations", SKIP);
 		expectedProblemAttributes.put("ContradictoryNullAnnotationsOnBound", SKIP);
+		expectedProblemAttributes.put("ContradictoryNullAnnotationsInferred", SKIP);
 		expectedProblemAttributes.put("ConstructorVarargsArgumentNeedCast", new ProblemAttributes(JavaCore.COMPILER_PB_VARARGS_ARGUMENT_NEED_CAST));
 		expectedProblemAttributes.put("CorruptedSignature", SKIP);
 		expectedProblemAttributes.put("DanglingReference", SKIP);
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
index 8e87c5e..8397360 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
@@ -29,7 +29,7 @@ public class NullTypeAnnotationTest extends AbstractNullAnnotationTest {
 	// Static initializer to specify tests subset using TESTS_* static variables
 	// All specified tests which do not belong to the class are skipped...
 	static {
-//			TESTS_NAMES = new String[] { "testConditional2" };
+//			TESTS_NAMES = new String[] { "testNullTypeInference3b" };
 //			TESTS_NUMBERS = new int[] { 561 };
 //			TESTS_RANGE = new int[] { 1, 2049 };
 	}
@@ -2619,6 +2619,66 @@ public class NullTypeAnnotationTest extends AbstractNullAnnotationTest {
 			"----------\n");
 	}
 
+	// conflicting annotations from type variable application and type variable substitution
+	public void testNullTypeInference3() {
+		runNegativeTestWithLibs(
+			new String[] {
+				"Generics.java",
+				"import org.eclipse.jdt.annotation.*;\n" + 
+				"\n" + 
+				"public class Generics {\n" + 
+				"	<X> X m(@Nullable X a) { return null; }\n" + 
+				"	void test(@NonNull String in) {\n" + 
+				"		@NonNull String s = m(in);\n" + 
+				"		System.out.println(s.toLowerCase());\n" + 
+				"	}\n" + 
+				"	public static void main(String[] args) {\n" + 
+				"		new Generics().test(\"hallo\");\n" + 
+				"	}\n" + 
+				"}\n"
+			},
+			getCompilerOptions(),
+			"----------\n" + 
+			"1. ERROR in Generics.java (at line 6)\n" + 
+			"	@NonNull String s = m(in);\n" + 
+			"	                      ^^\n" + 
+			"Contradictory null annotations: method was inferred as \'@NonNull String m(@NonNull @Nullable String)\', but only one of \'@NonNull\' and \'@Nullable\' can be effective at any location\n" + 
+			"----------\n");
+	}
+
+	// conflicting annotations from type variable application and type variable substitution
+	public void testNullTypeInference3b() {
+		runNegativeTestWithLibs(
+			new String[] {
+				"Generics.java",
+				"import org.eclipse.jdt.annotation.*;\n" + 
+				"\n" + 
+				"public class Generics {\n" + 
+				"	<X> @Nullable X m1(@Nullable X a) { return null; }\n" + 
+				"	<X> @Nullable X m2(X a) { return null; }\n" + 
+				"	void test(@NonNull String in) {\n" + 
+				"		@NonNull String s1 = m1(in);\n" + 
+				"		@NonNull String s2 = m2(in);\n" + 
+				"	}\n" + 
+				"	public static void main(String[] args) {\n" + 
+				"		new Generics().test(\"hallo\");\n" + 
+				"	}\n" + 
+				"}\n"
+			},
+			getCompilerOptions(),
+			"----------\n" + 
+			"1. ERROR in Generics.java (at line 7)\n" + 
+			"	@NonNull String s1 = m1(in);\n" + 
+			"	                     ^^^^^^\n" + 
+			"Contradictory null annotations: method was inferred as \'@NonNull @Nullable String m1(@NonNull @Nullable String)\', but only one of \'@NonNull\' and \'@Nullable\' can be effective at any location\n" + 
+			"----------\n" + 
+			"2. ERROR in Generics.java (at line 8)\n" + 
+			"	@NonNull String s2 = m2(in);\n" + 
+			"	                     ^^^^^^\n" + 
+			"Contradictory null annotations: method was inferred as \'@NonNull @Nullable String m2(@NonNull String)\', but only one of \'@NonNull\' and \'@Nullable\' can be effective at any location\n" + 
+			"----------\n");
+	}
+
 	// missing return type should not cause NPE
 	public void testBug415850_01() {
 		runNegativeTestWithLibs(
@@ -3521,7 +3581,12 @@ public class NullTypeAnnotationTest extends AbstractNullAnnotationTest {
 				"}\n"
 			}, 
 			getCompilerOptions(), 
-			"");		
+			"----------\n" + 
+			"1. ERROR in X.java (at line 17)\n" + 
+			"	getAdd(lx);\n" + 
+			"	       ^^\n" + 
+			"Contradictory null annotations: method was inferred as \'void getAdd(List<@NonNull @Nullable capture#>)\', but only one of \'@NonNull\' and \'@Nullable\' can be effective at any location\n" + 
+			"----------\n");		
 	}
 	public void testLocalArrays() {
 		runNegativeTestWithLibs(
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
index e44eec9..328087c 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
@@ -192,6 +192,7 @@
  *									NullityMismatchTypeArgument
  *									ContradictoryNullAnnotationsOnBound
  *									UnsafeNullnessCast
+ *									ContradictoryNullAnnotationsInferred
  *      Jesper S Moller  - added the following constants
  *									TargetTypeNotAFunctionalInterface
  *									OuterLocalMustBeEffectivelyFinal
@@ -1772,7 +1773,9 @@ void setSourceStart(int sourceStart);
 	/** @since 3.9 BETA_JAVA8 */
 	int ContradictoryNullAnnotationsOnBound = Internal + 965;
 	/** @since 3.9 BETA_JAVA8 */
-	int UnsafeNullnessCast = Internal + 966;
+	int ContradictoryNullAnnotationsInferred = Internal + 966;
+	/** @since 3.9 BETA_JAVA8 */
+	int UnsafeNullnessCast = Internal + 967;
 
 	// Java 8 work
 	/** @since 3.9 BETA_JAVA8 */
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java
index 55d3783..87ac635 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java
@@ -20,10 +20,17 @@ import org.eclipse.jdt.internal.compiler.flow.FlowInfo;
 import org.eclipse.jdt.internal.compiler.impl.CompilerOptions;
 import org.eclipse.jdt.internal.compiler.lookup.ArrayBinding;
 import org.eclipse.jdt.internal.compiler.lookup.BlockScope;
+import org.eclipse.jdt.internal.compiler.lookup.InvocationSite;
+import org.eclipse.jdt.internal.compiler.lookup.ParameterizedGenericMethodBinding;
 import org.eclipse.jdt.internal.compiler.lookup.ParameterizedTypeBinding;
+import org.eclipse.jdt.internal.compiler.lookup.RawTypeBinding;
+import org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding;
+import org.eclipse.jdt.internal.compiler.lookup.Scope;
 import org.eclipse.jdt.internal.compiler.lookup.TagBits;
 import org.eclipse.jdt.internal.compiler.lookup.TypeBinding;
+import org.eclipse.jdt.internal.compiler.lookup.TypeBindingVisitor;
 import org.eclipse.jdt.internal.compiler.lookup.TypeIds;
+import org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding;
 import org.eclipse.jdt.internal.compiler.lookup.VariableBinding;
 import org.eclipse.jdt.internal.compiler.lookup.WildcardBinding;
 
@@ -212,4 +219,51 @@ public class NullAnnotationMatching {
 		}
 		return 0; // OK by tagBits
 	}
+
+	public static ParameterizedGenericMethodBinding checkForContraditions(
+			final ParameterizedGenericMethodBinding method, final InvocationSite invocationSite, final Scope scope) {
+		
+		class SearchContradictions extends TypeBindingVisitor {
+			ReferenceBinding typeWithContradiction;
+			@Override
+			public boolean visit(ReferenceBinding referenceBinding) {
+				if ((referenceBinding.tagBits & TagBits.AnnotationNullMASK) == TagBits.AnnotationNullMASK) {
+					this.typeWithContradiction = referenceBinding;
+					return false;
+				}
+				return true;
+			}
+			@Override
+			public boolean visit(TypeVariableBinding typeVariable) {
+				return visit((ReferenceBinding)typeVariable);
+			}
+			@Override
+			public boolean visit(RawTypeBinding rawType) {
+				return visit((ReferenceBinding)rawType);
+			}
+		}
+
+		SearchContradictions searchContradiction = new SearchContradictions();
+		TypeBindingVisitor.visit(searchContradiction, method.returnType);
+		if (searchContradiction.typeWithContradiction != null) {
+			scope.problemReporter().contradictoryNullAnnotationsInferred(method, invocationSite);
+			// note: if needed, we might want to update the method by removing the contradictory annotations??
+			return method;
+		}
+
+		Expression[] arguments = null;
+		if (invocationSite instanceof Invocation)
+			arguments = ((Invocation)invocationSite).arguments();
+		for (int i = 0; i < method.parameters.length; i++) {
+			TypeBindingVisitor.visit(searchContradiction, method.parameters[i]);
+			if (searchContradiction.typeWithContradiction != null) {
+				if (arguments != null && i < arguments.length)
+					scope.problemReporter().contradictoryNullAnnotationsInferred(method, arguments[i]);
+				else
+					scope.problemReporter().contradictoryNullAnnotationsInferred(method, invocationSite);
+				return method;
+			}
+		}
+		return method;
+	}
 }
\ No newline at end of file
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java
index 9b161db..247312c 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java
@@ -20,13 +20,16 @@
  *								Bug 424710 - [1.8][compiler] CCE in SingleNameReference.localVariableBinding
  *								Bug 423505 - [1.8] Implement "18.5.4 More Specific Method Inference"
  *								Bug 427438 - [1.8][compiler] NPE at org.eclipse.jdt.internal.compiler.ast.ConditionalExpression.generateCode(ConditionalExpression.java:280)
+ *								Bug 418743 - [1.8][null] contradictory annotations on invocation of generic method not reported
  *******************************************************************************/
 package org.eclipse.jdt.internal.compiler.lookup;
 
 import org.eclipse.jdt.internal.compiler.ast.Expression;
 import org.eclipse.jdt.internal.compiler.ast.Invocation;
+import org.eclipse.jdt.internal.compiler.ast.NullAnnotationMatching;
 import org.eclipse.jdt.internal.compiler.ast.Wildcard;
 import org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants;
+import org.eclipse.jdt.internal.compiler.impl.CompilerOptions;
 
 /**
  * Binding denoting a generic method after type parameter substitutions got performed.
@@ -93,7 +96,8 @@ public class ParameterizedGenericMethodBinding extends ParameterizedMethodBindin
 
 // ==== 1.8: The main driver for inference of generic methods: ====
 			InferenceContext18 infCtx18 = null;
-			if (scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_8) {
+			CompilerOptions compilerOptions = scope.compilerOptions();
+			if (compilerOptions.sourceLevel >= ClassFileConstants.JDK1_8) {
 				if ((inferenceLevel & Scope.APPLICABILITY) != 0)
 					infCtx18 = invocationSite.freshInferenceContext(scope);
 				else if (invocationSite instanceof Invocation && originalMethod instanceof ParameterizedGenericMethodBinding)
@@ -153,6 +157,8 @@ public class ParameterizedGenericMethodBinding extends ParameterizedMethodBindin
 						if (solutions != null) {
 							
 							methodSubstitute = scope.environment().createParameterizedGenericMethod(originalMethod, solutions);
+							if (compilerOptions.isAnnotationBasedNullAnalysisEnabled)
+								methodSubstitute = NullAnnotationMatching.checkForContraditions(methodSubstitute, invocationSite, scope);
 							if (hasReturnProblem) { // illegally working from the provisional result?
 								MethodBinding problemMethod = infCtx18.getReturnProblemMethodIfNeeded(expectedType, methodSubstitute);
 								if (problemMethod instanceof ProblemMethodBinding)
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java
index 42343ce..e0c03a2 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java
@@ -32,6 +32,7 @@
  *								Bug 426792 - [1.8][inference][impl] generify new type inference engine
  *								Bug 428019 - [1.8][compiler] Type inference failure with nested generic invocation.
  *								Bug 427199 - [1.8][resource] avoid resource leak warnings on Streams that have no resource
+ *								Bug 418743 - [1.8][null] contradictory annotations on invocation of generic method not reported
  *      Jesper S Moller - Contributions for
  *								bug 382701 - [1.8][compiler] Implement semantic analysis of Lambda expressions & Reference expression
  *								bug 412153 - [1.8][compiler] Check validity of annotations which may be repeatable
@@ -1598,7 +1599,8 @@ protected void appendNullAnnotation(StringBuffer nameBuffer, CompilerOptions opt
 	    if ((this.tagBits & TagBits.AnnotationNonNull) != 0) {
 	    	char[][] nonNullAnnotationName = options.nonNullAnnotationName;
 			nameBuffer.append('@').append(nonNullAnnotationName[nonNullAnnotationName.length-1]).append(' ');
-	    } else if ((this.tagBits & TagBits.AnnotationNullable) != 0) {
+	    }
+	    if ((this.tagBits & TagBits.AnnotationNullable) != 0) {
 	    	char[][] nullableAnnotationName = options.nullableAnnotationName;
 			nameBuffer.append('@').append(nullableAnnotationName[nullableAnnotationName.length-1]).append(' ');
 	    }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
index 29cc891..4402fe9 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
@@ -9429,6 +9429,33 @@ public void contradictoryNullAnnotations(int sourceStart, int sourceEnd) {
 	this.handle(IProblem.ContradictoryNullAnnotations, arguments, shortArguments, sourceStart, sourceEnd);
 }
 
+public void contradictoryNullAnnotationsInferred(MethodBinding inferredMethod, ASTNode location) {
+	contradictoryNullAnnotationsInferred(inferredMethod, location.sourceStart, location.sourceEnd);
+}
+public void contradictoryNullAnnotationsInferred(MethodBinding inferredMethod, InvocationSite location) {
+	contradictoryNullAnnotationsInferred(inferredMethod, location.sourceStart(), location.sourceEnd());
+}
+public void contradictoryNullAnnotationsInferred(MethodBinding inferredMethod, int sourceStart, int sourceEnd) {
+	// when this error is triggered we can safely assume that both annotations have been configured
+	char[][] nonNullAnnotationName = this.options.nonNullAnnotationName;
+	char[][] nullableAnnotationName = this.options.nullableAnnotationName;
+	String[] arguments = {
+		new String(CharOperation.concatWith(nonNullAnnotationName, '.')),
+		new String(CharOperation.concatWith(nullableAnnotationName, '.')),
+		new String(inferredMethod.returnType.nullAnnotatedReadableName(this.options, false)),
+		new String(inferredMethod.selector),
+		typesAsString(inferredMethod, false, true)
+	};
+	String[] shortArguments = {
+			new String(nonNullAnnotationName[nonNullAnnotationName.length-1]),
+			new String(nullableAnnotationName[nullableAnnotationName.length-1]),
+			new String(inferredMethod.returnType.nullAnnotatedReadableName(this.options, true)),
+			new String(inferredMethod.selector),
+			typesAsString(inferredMethod, true, true)
+		};
+	this.handle(IProblem.ContradictoryNullAnnotationsInferred, arguments, shortArguments, sourceStart, sourceEnd);
+}
+
 public void contradictoryNullAnnotationsOnBounds(Annotation annotation, long previousTagBit) {
 	char[][] annotationName = previousTagBit == TagBits.AnnotationNonNull ? this.options.nonNullAnnotationName : this.options.nullableAnnotationName;
 	String[] arguments = {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
index 54dfffe..92a4c2c 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
@@ -38,6 +38,7 @@
 #							Bug 416307 - [1.8][compiler][null] subclass with type parameter substitution confuses null checking
 #							Bug 400874 - [1.8][compiler] Inference infrastructure should evolve to meet JLS8 18.x (Part G of JSR335 spec)
 #							Bug 424637 - [1.8][compiler][null] AIOOB in ReferenceExpression.resolveType with a method reference to Files::walk
+#							Bug 418743 - [1.8][null] contradictory annotations on invocation of generic method not reported
 #		Jesper S Moller <jesper@selskabet.org> - Contributions for
 #							bug 382701 - [1.8][compiler] Implement semantic analysis of Lambda expressions & Reference expression
 #							bug 384567 - [1.5][compiler] Compiler accepts illegal modifiers on package declaration
@@ -814,7 +815,8 @@
 963 = Nullness annotations are not applicable at this location 
 964 = Null constraint mismatch: The type ''{2}'' is not a valid substitute for the type parameter ''{0}'' which is constrained as ''@{1}''
 965 = This nullness annotation conflicts with a ''@{0}'' annotation which is effective on the same type parameter 
-966 = Null type safety: Unchecked cast from {0} to {1}
+966 = Contradictory null annotations: method was inferred as ''{2} {3}({4})'', but only one of ''@{0}'' and ''@{1}'' can be effective at any location
+967 = Null type safety: Unchecked cast from {0} to {1}
 
 # Java 8
 1001 = Syntax error, modifiers and annotations are not allowed for the lambda parameter {0} as its type is elided

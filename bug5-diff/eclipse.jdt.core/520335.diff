commit fd65e2d43b5e75368168d826637c2e33d00715db
Author: Jay Arthanareeswaran <jarthana@in.ibm.com>
Date:   Sun Jul 30 20:17:56 2017 +0530

    Bug 520335 - [9] ClassCastException in compiler when passed an endorsed
    directory
    
    Change-Id: Ibc8e20e970a37c964164722538abf1188290881d
    Signed-off-by: Jay Arthanareeswaran <jarthana@in.ibm.com>

-	-	org.eclipse.jdt.core.tests.model/JCL/jclMin9src.zip
4	0	org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java
23	28	org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java
diff --git a/org.eclipse.jdt.core.tests.model/JCL/jclMin9src.zip b/org.eclipse.jdt.core.tests.model/JCL/jclMin9src.zip
index d46027f..37447f9 100644
Binary files a/org.eclipse.jdt.core.tests.model/JCL/jclMin9src.zip and b/org.eclipse.jdt.core.tests.model/JCL/jclMin9src.zip differ
diff --git a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java
index 94b31d2..8839205 100644
--- a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java
+++ b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java
@@ -47,6 +47,10 @@ import org.eclipse.jdt.internal.compiler.util.Util;
 
 @SuppressWarnings({ "rawtypes", "unchecked" })
 public class FileSystem implements IModuleAwareNameEnvironment, SuffixConstants {
+
+	// Keep the type as ArrayList and not List as there are clients that are already written to expect ArrayList.
+	public static ArrayList<FileSystem.Classpath> EMPTY_CLASSPATH = new ArrayList<>();
+
 	/**
 	 * A <code>Classpath</code>, even though an IModuleLocation, can represent a plain
 	 * classpath location too. The FileSystem tells the Classpath whether to behave as a module or regular class
diff --git a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java
index f1dcadc..f7f3a0b 100644
--- a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java
+++ b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java
@@ -1556,7 +1556,7 @@ public void addExtraProblems(CategorizedProblem problem) {
 	}
 	this.extraProblems.add(problem);
 }
-protected void addNewEntry(ArrayList paths, String currentClasspathName,
+protected void addNewEntry(ArrayList<FileSystem.Classpath> paths, String currentClasspathName,
 		ArrayList currentRuleSpecs, String customEncoding,
 		String destPath, boolean isSourceOnly,
 		boolean rejectDestinationPathOnJars) {
@@ -3451,36 +3451,29 @@ protected ArrayList handleModulepath(String arg) {
 	// TODO: What about chained jars from MANIFEST.MF? Check with spec
 	return modulePaths;
 }
-protected ArrayList handleModuleSourcepath(String arg) {
+protected ArrayList<FileSystem.Classpath> handleModuleSourcepath(String arg) {
 	ArrayList<String> modulePaths = processModulePathEntries(arg);
-	final int classpathsSize;
+	ArrayList<FileSystem.Classpath> result = new ArrayList<>();
 	if ((modulePaths != null)
-		&& ((classpathsSize = modulePaths.size()) != 0)) {
+		&& (modulePaths.size() != 0)) {
 
 		if (this.destinationPath == null) {
 			addPendingErrors(this.bind("configure.missingDestinationPath"));//$NON-NLS-1$
 		}
 		String[] paths = new String[modulePaths.size()];
 		modulePaths.toArray(paths);
-		// We reuse the same List to store <Classpath>, which earlier contained <String>
-		modulePaths.clear();
-		for (int i = 0; i < classpathsSize; i++) {
-			processPathEntries(DEFAULT_SIZE_CLASSPATH, modulePaths, paths[i],
-					null, false, true);
-		}
-//		Parser parser = getNewParser();
 		for (int i = 0; i < paths.length; i++) {
 			File dir = new File(paths[i]);
 			if (dir.isDirectory()) {
 				// 1. Create FileSystem.Classpath for each module
 				// 2. Iterator each module in case of directory for source files and add to this.fileNames
 
-				modulePaths =
+				result =
 						(ArrayList) ModuleFinder.findModules(dir, this.destinationPath, getNewParser(), this.options, false);
-				for (Object obj : modulePaths) {
+				for (Object obj : result) {
 					Classpath classpath = (Classpath) obj;
 					File modLocation = new File(classpath.getPath());
-					String[] result = FileFinder.find(modLocation, SuffixConstants.SUFFIX_STRING_java);
+					String[] files = FileFinder.find(modLocation, SuffixConstants.SUFFIX_STRING_java);
 					String destPath = classpath.getDestinationPath();
 					IModule mod = classpath.getModule();
 					String moduleName = mod == null ? null : new String(mod.name());
@@ -3489,7 +3482,7 @@ protected ArrayList handleModuleSourcepath(String arg) {
 					if (this.filenames != null) {
 						int filesCount = this.filenames.length;
 						// some source files were specified explicitly
-						int length = result.length;
+						int length = files.length;
 						System.arraycopy(
 							this.filenames,
 							0,
@@ -3514,14 +3507,14 @@ protected ArrayList handleModuleSourcepath(String arg) {
 								(this.modNames = new String[length + filesCount]),
 								0,
 								filesCount);
-						System.arraycopy(result, 0, this.filenames, filesCount, length);
+						System.arraycopy(files, 0, this.filenames, filesCount, length);
 						for (int j = 0; j < length; j++) {
 							this.modNames[filesCount + j] = moduleName;
 							this.destinationPaths[filesCount + j] = destPath;
 						}
 						filesCount += length;
 					} else {
-						this.filenames = result;
+						this.filenames = files;
 						int filesCount = this.filenames.length;
 						this.encodings = new String[filesCount];
 						this.destinationPaths = new String[filesCount];
@@ -3536,7 +3529,7 @@ protected ArrayList handleModuleSourcepath(String arg) {
 		}
 		
 	}
-	return modulePaths;
+	return result;
 }
 /*
  * External API
@@ -3606,7 +3599,7 @@ protected ArrayList handleClasspath(ArrayList classpaths, String customEncoding)
 /*
  * External API
  */
-protected ArrayList handleEndorseddirs(ArrayList endorsedDirClasspaths) {
+protected ArrayList<FileSystem.Classpath> handleEndorseddirs(ArrayList<String> endorsedDirClasspaths) {
  	final File javaHome = getJavaHome();
 	/*
 	 * Feed endorsedDirClasspath according to:
@@ -3634,10 +3627,10 @@ protected ArrayList handleEndorseddirs(ArrayList endorsedDirClasspaths) {
 	 * extdirsNames.
 	 */
 	if (endorsedDirClasspaths.size() != 0) {
+		ArrayList<FileSystem.Classpath> result = new ArrayList<>();
 		File[] directoriesToCheck = new File[endorsedDirClasspaths.size()];
 		for (int i = 0; i < directoriesToCheck.length; i++)
-			directoriesToCheck[i] = new File((String) endorsedDirClasspaths.get(i));
-		endorsedDirClasspaths.clear();
+			directoriesToCheck[i] = new File(endorsedDirClasspaths.get(i));
 		File[][] endorsedDirsJars = getLibrariesFiles(directoriesToCheck);
 		if (endorsedDirsJars != null) {
 			for (int i = 0, max = endorsedDirsJars.length; i < max; i++) {
@@ -3649,7 +3642,7 @@ protected ArrayList handleEndorseddirs(ArrayList endorsedDirClasspaths) {
 									current[j].getAbsolutePath(),
 									null, null, this.options);
 						if (classpath != null) {
-							endorsedDirClasspaths.add(classpath);
+							result.add(classpath);
 						}
 					}
 				} else if (directoriesToCheck[i].isFile()) {
@@ -3660,15 +3653,16 @@ protected ArrayList handleEndorseddirs(ArrayList endorsedDirClasspaths) {
 				}
 			}
 		}
+		return result;
 	}
-	return endorsedDirClasspaths;
+	return FileSystem.EMPTY_CLASSPATH;
 }
 
 /*
  * External API
  * Handle extdirs processing
  */
-protected ArrayList handleExtdirs(ArrayList extdirsClasspaths) {
+protected ArrayList<FileSystem.Classpath> handleExtdirs(ArrayList<String> extdirsClasspaths) {
  	final File javaHome = getJavaHome();
 
 	/*
@@ -3694,10 +3688,10 @@ protected ArrayList handleExtdirs(ArrayList extdirsClasspaths) {
 	 * extdirsNames.
 	 */
 	if (extdirsClasspaths.size() != 0) {
+		ArrayList<FileSystem.Classpath> result = new ArrayList<>();
 		File[] directoriesToCheck = new File[extdirsClasspaths.size()];
 		for (int i = 0; i < directoriesToCheck.length; i++)
-			directoriesToCheck[i] = new File((String) extdirsClasspaths.get(i));
-		extdirsClasspaths.clear();
+			directoriesToCheck[i] = new File(extdirsClasspaths.get(i));
 		File[][] extdirsJars = getLibrariesFiles(directoriesToCheck);
 		if (extdirsJars != null) {
 			for (int i = 0, max = extdirsJars.length; i < max; i++) {
@@ -3709,7 +3703,7 @@ protected ArrayList handleExtdirs(ArrayList extdirsClasspaths) {
 									current[j].getAbsolutePath(),
 									null, null, this.options);
 						if (classpath != null) {
-							extdirsClasspaths.add(classpath);
+							result.add(classpath);
 						}
 					}
 				} else if (directoriesToCheck[i].isFile()) {
@@ -3719,9 +3713,10 @@ protected ArrayList handleExtdirs(ArrayList extdirsClasspaths) {
 				}
 			}
 		}
+		return result; 
 	}
 
-	return extdirsClasspaths;
+	return FileSystem.EMPTY_CLASSPATH;
 }
 
 /*
commit a5d06d74fd15895dfc4f89b75ea5fb1e83e9f89a
Author: Jay Arthanareeswaran <jarthana@in.ibm.com>
Date:   Wed Aug 2 19:56:18 2017 +0530

    Bug 520335 - [9] ClassCastException in compiler when passed an endorsed
    directory
    
    Generify Main.java
    
    Change-Id: Ic30d27283c28bc8dff143b625663a14391a843fd
    Signed-off-by: Jay Arthanareeswaran <jarthana@in.ibm.com>

7	7	org.eclipse.jdt.compiler.tool/src/org/eclipse/jdt/internal/compiler/tool/EclipseCompilerImpl.java
3	2	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractBatchCompilerTest.java
3	2	org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/ClasspathJar.java
2	2	org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/CompilationUnit.java
1	1	org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java
104	124	org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java
3	3	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/Util.java
3	2	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java
diff --git a/org.eclipse.jdt.compiler.tool/src/org/eclipse/jdt/internal/compiler/tool/EclipseCompilerImpl.java b/org.eclipse.jdt.compiler.tool/src/org/eclipse/jdt/internal/compiler/tool/EclipseCompilerImpl.java
index cbe77aa..dd203a1 100644
--- a/org.eclipse.jdt.compiler.tool/src/org/eclipse/jdt/internal/compiler/tool/EclipseCompilerImpl.java
+++ b/org.eclipse.jdt.compiler.tool/src/org/eclipse/jdt/internal/compiler/tool/EclipseCompilerImpl.java
@@ -410,14 +410,14 @@ public class EclipseCompilerImpl extends Main {
 	}
 
 	@Override
-	protected void setPaths(ArrayList bootclasspaths,
+	protected void setPaths(ArrayList<String> bootclasspaths,
 			String sourcepathClasspathArg,
-			ArrayList sourcepathClasspaths,
-			ArrayList classpaths,
-			String modulePaths,
-			String moduleSourcepaths,
-			ArrayList extdirsClasspaths,
-			ArrayList endorsedDirClasspaths,
+			ArrayList<String> sourcepathClasspaths,
+			ArrayList<String> classpaths,
+			String modulePath,
+			String moduleSourcepath,
+			ArrayList<String> extdirsClasspaths,
+			ArrayList<String> endorsedDirClasspaths,
 			String customEncoding) {
 
 		ArrayList<FileSystem.Classpath> fileSystemClasspaths = new ArrayList<>();
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractBatchCompilerTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractBatchCompilerTest.java
index 6a3314b..b741ab0 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractBatchCompilerTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractBatchCompilerTest.java
@@ -24,6 +24,7 @@ import org.eclipse.jdt.core.compiler.CompilationProgress;
 import org.eclipse.jdt.core.compiler.batch.BatchCompiler;
 import org.eclipse.jdt.core.tests.util.Util;
 import org.eclipse.jdt.internal.compiler.batch.ClasspathLocation;
+import org.eclipse.jdt.internal.compiler.batch.FileSystem;
 import org.eclipse.jdt.internal.compiler.batch.Main;
 
 public abstract class AbstractBatchCompilerTest extends AbstractRegressionTest {
@@ -803,7 +804,7 @@ public abstract class AbstractBatchCompilerTest extends AbstractRegressionTest {
 		if (!outputDirectory.isDirectory()) {
 			outputDirectory.mkdirs();
 		}
-		ArrayList<ClasspathLocation> paths = new ArrayList<>(Main.DEFAULT_SIZE_CLASSPATH);
+		ArrayList<FileSystem.Classpath> paths = new ArrayList<>(Main.DEFAULT_SIZE_CLASSPATH);
 		try {
 			(new Main(new PrintWriter(System.out), new PrintWriter(System.err), true/*systemExit*/, null/*options*/, null/*progress*/)).
 				processPathEntries(Main.DEFAULT_SIZE_CLASSPATH, paths, classpathInput, null /* customEncoding */, true /* isSourceOnly */, false /* rejectDestinationPathOnJars*/);
@@ -822,7 +823,7 @@ public abstract class AbstractBatchCompilerTest extends AbstractRegressionTest {
 			assertEquals("unexpected classpaths entries number: ",
 					expectedClasspathEntries == null ? 0 : expectedClasspathEntries.length / 3, l);
 			for (int i = 0, j = 0; i < l ; i++) {
-				ClasspathLocation result = paths.get(i);
+				ClasspathLocation result = (ClasspathLocation) paths.get(i);
 				String expected = expectedClasspathEntries[j++];
 				String actual = result.toString();
 				if (! actual.equals("ClasspathDirectory " + expected + File.separator) &&
diff --git a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/ClasspathJar.java b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/ClasspathJar.java
index 79f5ade..ad66038 100644
--- a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/ClasspathJar.java
+++ b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/ClasspathJar.java
@@ -30,6 +30,7 @@ import java.util.zip.ZipEntry;
 import java.util.zip.ZipFile;
 
 import org.eclipse.jdt.core.compiler.CharOperation;
+import org.eclipse.jdt.internal.compiler.batch.FileSystem.Classpath;
 import org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader;
 import org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException;
 import org.eclipse.jdt.internal.compiler.classfmt.ExternalAnnotationDecorator;
@@ -61,13 +62,13 @@ public ClasspathJar(File file, boolean closeZipFileAtEnd,
 	this.closeZipFileAtEnd = closeZipFileAtEnd;
 }
 
-public List fetchLinkedJars(FileSystem.ClasspathSectionProblemReporter problemReporter) {
+public List<Classpath> fetchLinkedJars(FileSystem.ClasspathSectionProblemReporter problemReporter) {
 	// expected to be called once only - if multiple calls desired, consider
 	// using a cache
 	InputStream inputStream = null;
 	try {
 		initialize();
-		ArrayList result = new ArrayList();
+		ArrayList<Classpath> result = new ArrayList<>();
 		ZipEntry manifest = this.zipFile.getEntry("META-INF/MANIFEST.MF"); //$NON-NLS-1$
 		if (manifest != null) { // non-null implies regular file
 			inputStream = this.zipFile.getInputStream(manifest);
diff --git a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/CompilationUnit.java b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/CompilationUnit.java
index 34c62e8..68d8cf5 100644
--- a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/CompilationUnit.java
+++ b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/CompilationUnit.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2016 IBM Corporation and others.
+ * Copyright (c) 2000, 2017 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -126,7 +126,7 @@ public ModuleBinding module(LookupEnvironment rootEnvironment) {
 	if (CharOperation.endsWith(this.fileName, TypeConstants.MODULE_INFO_FILE_NAME)) {
 		this.moduleBinding = rootEnvironment.getModule(this.module);
 		if (this.moduleBinding == null)
-			throw new IllegalStateException("Module should be known");
+			throw new IllegalStateException("Module should be known"); //$NON-NLS-1$
 		return this.moduleBinding;
 	}
 	return rootEnvironment.UnNamedModule;
diff --git a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java
index 8839205..8bd9c88 100644
--- a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java
+++ b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java
@@ -73,7 +73,7 @@ public class FileSystem implements IModuleAwareNameEnvironment, SuffixConstants
 		 * @return a list of the jar file names defined in the Class-Path
 		 *         section of the jar file manifest if any
 		 */
-		List fetchLinkedJars(ClasspathSectionProblemReporter problemReporter);
+		List<Classpath> fetchLinkedJars(ClasspathSectionProblemReporter problemReporter);
 		/**
 		 * This method resets the environment. The resulting state is equivalent to
 		 * a new name environment without creating a new object.
diff --git a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java
index f7f3a0b..b9a1570 100644
--- a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java
+++ b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java
@@ -108,7 +108,6 @@ import org.eclipse.jdt.internal.compiler.util.Messages;
 import org.eclipse.jdt.internal.compiler.util.SuffixConstants;
 import org.eclipse.jdt.internal.compiler.util.Util;
 
-@SuppressWarnings({ "rawtypes", "unchecked" })
 public class Main implements ProblemSeverities, SuffixConstants {
 
 	public static class Logger {
@@ -116,7 +115,7 @@ public class Main implements ProblemSeverities, SuffixConstants {
 		private PrintWriter log;
 		private Main main;
 		private PrintWriter out;
-		private HashMap parameters;
+		private HashMap<String, Object> parameters;
 		int tagBits;
 		private static final String CLASS = "class"; //$NON-NLS-1$
 		private static final String CLASS_FILE = "classfile"; //$NON-NLS-1$
@@ -188,7 +187,7 @@ public class Main implements ProblemSeverities, SuffixConstants {
 		private static final String XML_DTD_DECLARATION = "<!DOCTYPE compiler PUBLIC \"-//Eclipse.org//DTD Eclipse JDT 3.2.005 Compiler//EN\" \"http://www.eclipse.org/jdt/core/compiler_32_005.dtd\">"; //$NON-NLS-1$
 		static {
 			try {
-				Class c = IProblem.class;
+				Class<?> c = IProblem.class;
 				Field[] fields = c.getFields();
 				for (int i = 0, max = fields.length; i < max; i++) {
 					Field field = fields[i];
@@ -212,7 +211,7 @@ public class Main implements ProblemSeverities, SuffixConstants {
 		public Logger(Main main, PrintWriter out, PrintWriter err) {
 			this.out = out;
 			this.err = err;
-			this.parameters = new HashMap();
+			this.parameters = new HashMap<>();
 			this.main = main;
 		}
 
@@ -649,7 +648,7 @@ public class Main implements ProblemSeverities, SuffixConstants {
 		}
 
 		public void loggingExtraProblems(Main currentMain) {
-			ArrayList problems = currentMain.extraProblems;
+			ArrayList<CategorizedProblem> problems = currentMain.extraProblems;
 			final int count = problems.size();
 			int localProblemCount = 0;
 			if (count != 0) {
@@ -657,7 +656,7 @@ public class Main implements ProblemSeverities, SuffixConstants {
 				int warnings = 0;
 				int infos = 0;
 				for (int i = 0; i < count; i++) {
-					CategorizedProblem problem = (CategorizedProblem) problems.get(i);
+					CategorizedProblem problem = problems.get(i);
 					if (problem != null) {
 						currentMain.globalProblemsCount++;
 						logExtraProblem(problem, localProblemCount, currentMain.globalProblemsCount);
@@ -678,7 +677,7 @@ public class Main implements ProblemSeverities, SuffixConstants {
 					if ((errors + warnings + infos) != 0) {
 						startLoggingExtraProblems(count);
 						for (int i = 0; i < count; i++) {
-							CategorizedProblem problem = (CategorizedProblem) problems.get(i);
+							CategorizedProblem problem = problems.get(i);
 							if (problem!= null) {
 								if (problem.getID() != IProblem.Task) {
 									logXmlExtraProblem(problem, localProblemCount, currentMain.globalProblemsCount);
@@ -1224,7 +1223,7 @@ public class Main implements ProblemSeverities, SuffixConstants {
 			}
 		}
 
-		private void printTag(String name, HashMap params, boolean insertNewLine, boolean closeTag) {
+		private void printTag(String name, HashMap<String, Object> params, boolean insertNewLine, boolean closeTag) {
 			if (this.log != null) {
 				((GenericXMLWriter) this.log).printTag(name, this.parameters, true, insertNewLine, closeTag);
 			}
@@ -1331,9 +1330,9 @@ public class Main implements ProblemSeverities, SuffixConstants {
 	 * Resource bundle factory to share bundles for the same locale
 	 */
 	public static class ResourceBundleFactory {
-		private static HashMap Cache = new HashMap();
+		private static HashMap<Locale, ResourceBundle> Cache = new HashMap<>();
 		public static synchronized ResourceBundle getBundle(Locale locale) {
-			ResourceBundle bundle = (ResourceBundle) Cache.get(locale);
+			ResourceBundle bundle = Cache.get(locale);
 			if (bundle == null) {
 				bundle = ResourceBundle.getBundle(Main.bundleName, locale);
 				Cache.put(locale, bundle);
@@ -1410,7 +1409,7 @@ public class Main implements ProblemSeverities, SuffixConstants {
 	public int currentRepetition, maxRepetition;
 	public boolean showProgress = false;
 	public long startTime;
-	public ArrayList pendingErrors;
+	public ArrayList<String> pendingErrors;
 	public boolean systemExitWhenFinished = true;
 
 	public static final int TIMING_DISABLED = 0;
@@ -1424,7 +1423,7 @@ public class Main implements ProblemSeverities, SuffixConstants {
 
 	private PrintWriter err;
 
-	protected ArrayList extraProblems;
+	protected ArrayList<CategorizedProblem> extraProblems;
 	public final static String bundleName = "org.eclipse.jdt.internal.compiler.batch.messages"; //$NON-NLS-1$
 	// two uses: recognize 'none' in options; code the singleton none
 	// for the '-d none' option (wherever it may be found)
@@ -1541,7 +1540,7 @@ public Main(PrintWriter outWriter, PrintWriter errWriter, boolean systemExitWhen
  * @deprecated - use {@link #Main(PrintWriter, PrintWriter, boolean, Map, CompilationProgress)} instead
  *                       e.g. Main(outWriter, errWriter, systemExitWhenFinished, customDefaultOptions, null)
  */
-public Main(PrintWriter outWriter, PrintWriter errWriter, boolean systemExitWhenFinished, Map customDefaultOptions) {
+public Main(PrintWriter outWriter, PrintWriter errWriter, boolean systemExitWhenFinished, Map<String, String> customDefaultOptions) {
 	this(outWriter, errWriter, systemExitWhenFinished, customDefaultOptions, null /* progress */);
 }
 
@@ -1552,12 +1551,12 @@ public Main(PrintWriter outWriter, PrintWriter errWriter, boolean systemExitWhen
 
 public void addExtraProblems(CategorizedProblem problem) {
 	if (this.extraProblems == null) {
-		this.extraProblems = new ArrayList();
+		this.extraProblems = new ArrayList<>();
 	}
 	this.extraProblems.add(problem);
 }
 protected void addNewEntry(ArrayList<FileSystem.Classpath> paths, String currentClasspathName,
-		ArrayList currentRuleSpecs, String customEncoding,
+		ArrayList<String> currentRuleSpecs, String customEncoding,
 		String destPath, boolean isSourceOnly,
 		boolean rejectDestinationPathOnJars) {
 
@@ -1566,10 +1565,10 @@ protected void addNewEntry(ArrayList<FileSystem.Classpath> paths, String current
 	if (rulesSpecsSize != 0) {
 		AccessRule[] accessRules = new AccessRule[currentRuleSpecs.size()];
 		boolean rulesOK = true;
-		Iterator i = currentRuleSpecs.iterator();
+		Iterator<String> i = currentRuleSpecs.iterator();
 		int j = 0;
 		while (i.hasNext()) {
-			String ruleSpec = (String) i.next();
+			String ruleSpec = i.next();
 			char key = ruleSpec.charAt(0);
 			String pattern = ruleSpec.substring(1);
 			if (pattern.length() > 0) {
@@ -1635,7 +1634,7 @@ protected void addNewEntry(ArrayList<FileSystem.Classpath> paths, String current
 }
 void addPendingErrors(String message) {
 	if (this.pendingErrors == null) {
-		this.pendingErrors = new ArrayList();
+		this.pendingErrors = new ArrayList<>();
 	}
 	this.pendingErrors.add(message);
 }
@@ -1784,7 +1783,8 @@ public boolean compile(String[] argv) {
 			System.exit(-1);
 		}
 		return false;
-	} catch (RuntimeException e) { // internal compiler failure
+	} catch (Exception e) { // internal compiler failure
+		e.printStackTrace();
 		this.logger.logException(e);
 		if (this.systemExitWhenFinished) {
 			this.logger.flush();
@@ -1839,14 +1839,14 @@ public void configure(String[] argv) {
 	final int INSIDE_SYSTEM = 27;
 
 	final int DEFAULT = 0;
-	ArrayList bootclasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);
+	ArrayList<String> bootclasspaths = new ArrayList<>(DEFAULT_SIZE_CLASSPATH);
 	String sourcepathClasspathArg = null;
 	String modulepathArg = null;
 	String moduleSourcepathArg = null;
-	ArrayList sourcepathClasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);
-	ArrayList classpaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);
-	ArrayList extdirsClasspaths = null;
-	ArrayList endorsedDirClasspaths = null;
+	ArrayList<String> sourcepathClasspaths = new ArrayList<>(DEFAULT_SIZE_CLASSPATH);
+	ArrayList<String> classpaths = new ArrayList<>(DEFAULT_SIZE_CLASSPATH);
+	ArrayList<String> extdirsClasspaths = null;
+	ArrayList<String> endorsedDirClasspaths = null;
 	this.annotationPaths = null;
 	this.annotationsFromClasspath = false;
 
@@ -1870,7 +1870,7 @@ public void configure(String[] argv) {
 	String currentArg = Util.EMPTY_STRING;
 	String moduleName = null;
 	
-	Set specifiedEncodings = null;
+	Set<String> specifiedEncodings = null;
 
 	// expand the command line if necessary
 	boolean needExpansion = false;
@@ -2746,7 +2746,7 @@ public void configure(String[] argv) {
 						}
 					}
 				} else {
-					specifiedEncodings = new HashSet();
+					specifiedEncodings = new HashSet<>();
 				}
 				try { // ensure encoding is supported
 					new InputStreamReader(new ByteArrayInputStream(new byte[0]), currentArg);
@@ -2815,7 +2815,7 @@ public void configure(String[] argv) {
 							"-extdir")); //$NON-NLS-1$
 				}
 				StringTokenizer tokenizer = new StringTokenizer(currentArg,	File.pathSeparator, false);
-				extdirsClasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);
+				extdirsClasspaths = new ArrayList<>(DEFAULT_SIZE_CLASSPATH);
 				while (tokenizer.hasMoreTokens())
 					extdirsClasspaths.add(tokenizer.nextToken());
 				mode = DEFAULT;
@@ -2826,7 +2826,7 @@ public void configure(String[] argv) {
 						this.bind("configure.unexpectedDestinationPathEntry", //$NON-NLS-1$
 							"-endorseddirs")); //$NON-NLS-1$
 				}				tokenizer = new StringTokenizer(currentArg,	File.pathSeparator, false);
-				endorsedDirClasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);
+				endorsedDirClasspaths = new ArrayList<>(DEFAULT_SIZE_CLASSPATH);
 				while (tokenizer.hasMoreTokens())
 					endorsedDirClasspaths.add(tokenizer.nextToken());
 				mode = DEFAULT;
@@ -3075,8 +3075,8 @@ public void configure(String[] argv) {
 				getAllEncodings(specifiedEncodings)));
 	}
 	if (this.pendingErrors != null) {
-		for (Iterator iterator = this.pendingErrors.iterator(); iterator.hasNext(); ) {
-			String message = (String) iterator.next();
+		for (Iterator<String> iterator = this.pendingErrors.iterator(); iterator.hasNext(); ) {
+			String message = iterator.next();
 			this.logger.logPendingError(message);
 		}
 		this.pendingErrors = null;
@@ -3139,7 +3139,7 @@ private static char[][] decodeIgnoreOptionalProblemsFromFolders(String folders)
 	return result;
 }
 
-private static String getAllEncodings(Set encodings) {
+private static String getAllEncodings(Set<String> encodings) {
 	int size = encodings.size();
 	String[] allEncodings = new String[size];
 	encodings.toArray(allEncodings);
@@ -3153,7 +3153,7 @@ private static String getAllEncodings(Set encodings) {
 	}
 	return String.valueOf(buffer);
 }
-
+@SuppressWarnings("rawtypes")
 private void initializeWarnings(String propertiesFile) {
 	File file = new File(propertiesFile);
 	if (!file.exists()) {
@@ -3177,7 +3177,7 @@ private void initializeWarnings(String propertiesFile) {
 			}
 		}
 	}
-	for (Iterator iterator = properties.entrySet().iterator(); iterator.hasNext(); ) {
+	for(Iterator iterator = properties.entrySet().iterator(); iterator.hasNext(); ) {
 		Map.Entry entry = (Map.Entry) iterator.next();
 		final String key = entry.getKey().toString();
 		if (key.startsWith("org.eclipse.jdt.core.compiler.")) { //$NON-NLS-1$
@@ -3230,15 +3230,10 @@ protected void disableAll(int severity) {
 			checkedValue = CompilerOptions.INFO;
 			break;
 	}
-	Object[] entries = this.options.entrySet().toArray();
-	for (int i = 0, max = entries.length; i < max; i++) {
-		Map.Entry entry = (Map.Entry) entries[i];
-		if (!(entry.getKey() instanceof String))
-			continue;
-		if (!(entry.getValue() instanceof String))
-			continue;
-		if (((String) entry.getValue()).equals(checkedValue)) {
-			this.options.put((String) entry.getKey(), CompilerOptions.IGNORE);
+	Set<Entry<String, String>> entrySet = this.options.entrySet();
+	for (Entry<String, String> entry : entrySet) {
+		if (entry.getValue().equals(checkedValue)) {
+			this.options.put(entry.getKey(), CompilerOptions.IGNORE);
 		}
 	}
 	if (severity == ProblemSeverities.Warning) {
@@ -3371,29 +3366,25 @@ public IProblemFactory getProblemFactory() {
 /*
  * External API
  */
-protected ArrayList handleBootclasspath(ArrayList bootclasspaths, String customEncoding) {
+protected ArrayList<Classpath> handleBootclasspath(ArrayList<String> bootclasspaths, String customEncoding) {
  	final int bootclasspathsSize;
+ 	ArrayList<Classpath> result = new ArrayList<>(DEFAULT_SIZE_CLASSPATH);
 	if ((bootclasspaths != null)
-		&& ((bootclasspathsSize = bootclasspaths.size()) != 0))
-	{
-		String[] paths = new String[bootclasspathsSize];
-		bootclasspaths.toArray(paths);
-		bootclasspaths.clear();
-		for (int i = 0; i < bootclasspathsSize; i++) {
-			processPathEntries(DEFAULT_SIZE_CLASSPATH, bootclasspaths,
-				paths[i], customEncoding, false, true);
+		&& ((bootclasspathsSize = bootclasspaths.size()) != 0)) {
+		result = new ArrayList<>(bootclasspathsSize);
+		for (String path : bootclasspaths) {
+			processPathEntries(DEFAULT_SIZE_CLASSPATH, result, path, customEncoding, false, true);
 		}
 	} else {
-		bootclasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);
 		try {
-			Util.collectVMBootclasspath(bootclasspaths, this.javaHomeCache);
+			Util.collectVMBootclasspath(result, this.javaHomeCache);
 		} catch(IllegalStateException e) {
 			this.logger.logWrongJDK();
 			this.proceed = false;
 			return null;
 		}
 	}
-	return bootclasspaths;
+	return result;
 }
 private void processAddonModuleOptions(FileSystem env) {
 	Map<String, IPackageExport[]> exports = new HashMap<>();
@@ -3432,24 +3423,20 @@ private void processAddonModuleOptions(FileSystem env) {
 		}
 	}
 }
-protected ArrayList handleModulepath(String arg) {
+protected ArrayList<FileSystem.Classpath> handleModulepath(String arg) {
 	ArrayList<String> modulePaths = processModulePathEntries(arg);
-	final int classpathsSize;
-	if ((modulePaths != null && modulePaths.size() > 0)
-		&& ((classpathsSize = modulePaths.size()) != 0)) {
-		String[] paths = new String[classpathsSize];
-		modulePaths.toArray(paths);
-		modulePaths.clear();
-		for (int i = 0; i < paths.length; i++) {
-			File dir = new File(paths[i]);
+	ArrayList<Classpath> result = new ArrayList<>();
+	if ((modulePaths != null && modulePaths.size() > 0)) {
+		for (String path : modulePaths) {
+			File dir = new File(path);
 			if (dir.isDirectory()) {
-			modulePaths =
-					(ArrayList) ModuleFinder.findModules(dir, null, getNewParser(), this.options, true);
+				result =
+					(ArrayList<Classpath>) ModuleFinder.findModules(dir, null, getNewParser(), this.options, true);
 			}
 		}
 	}
 	// TODO: What about chained jars from MANIFEST.MF? Check with spec
-	return modulePaths;
+	return result;
 }
 protected ArrayList<FileSystem.Classpath> handleModuleSourcepath(String arg) {
 	ArrayList<String> modulePaths = processModulePathEntries(arg);
@@ -3469,7 +3456,7 @@ protected ArrayList<FileSystem.Classpath> handleModuleSourcepath(String arg) {
 				// 2. Iterator each module in case of directory for source files and add to this.fileNames
 
 				result =
-						(ArrayList) ModuleFinder.findModules(dir, this.destinationPath, getNewParser(), this.options, false);
+						(ArrayList<Classpath>) ModuleFinder.findModules(dir, this.destinationPath, getNewParser(), this.options, false);
 				for (Object obj : result) {
 					Classpath classpath = (Classpath) obj;
 					File modLocation = new File(classpath.getPath());
@@ -3534,27 +3521,20 @@ protected ArrayList<FileSystem.Classpath> handleModuleSourcepath(String arg) {
 /*
  * External API
  */
-protected ArrayList handleClasspath(ArrayList classpaths, String customEncoding) {
-	final int classpathsSize;
-	if ((classpaths != null)
-		&& ((classpathsSize = classpaths.size()) != 0))
-	{
-		String[] paths = new String[classpathsSize];
-		classpaths.toArray(paths);
-		classpaths.clear();
-		for (int i = 0; i < classpathsSize; i++) {
-			processPathEntries(DEFAULT_SIZE_CLASSPATH, classpaths, paths[i],
-					customEncoding, false, true);
+protected ArrayList<FileSystem.Classpath> handleClasspath(ArrayList<String> classpaths, String customEncoding) {
+	ArrayList<FileSystem.Classpath> initial = new ArrayList<>(DEFAULT_SIZE_CLASSPATH);
+	if (classpaths != null && classpaths.size() > 0) {
+		for (String path : classpaths) {
+			processPathEntries(DEFAULT_SIZE_CLASSPATH, initial, path, customEncoding, false, true);
 		}
 	} else {
 		// no user classpath specified.
-		classpaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);
 		String classProp = System.getProperty("java.class.path"); //$NON-NLS-1$
 		if ((classProp == null) || (classProp.length() == 0)) {
 			addPendingErrors(this.bind("configure.noClasspath")); //$NON-NLS-1$
 			final Classpath classpath = FileSystem.getClasspath(System.getProperty("user.dir"), customEncoding, null, this.options);//$NON-NLS-1$
 			if (classpath != null) {
-				classpaths.add(classpath);
+				initial.add(classpath);
 			}
 		} else {
 			StringTokenizer tokenizer = new StringTokenizer(classProp, File.pathSeparator);
@@ -3564,15 +3544,15 @@ protected ArrayList handleClasspath(ArrayList classpaths, String customEncoding)
 				FileSystem.Classpath currentClasspath = FileSystem
 						.getClasspath(token, customEncoding, null, this.options);
 				if (currentClasspath != null) {
-					classpaths.add(currentClasspath);
+					initial.add(currentClasspath);
 				} else if (token.length() != 0) {
 					addPendingErrors(this.bind("configure.incorrectClasspath", token));//$NON-NLS-1$
 				}
 			}
 		}
 	}
-	ArrayList result = new ArrayList();
-	HashMap knownNames = new HashMap();
+	ArrayList<Classpath> result = new ArrayList<>();
+	HashMap<String, Classpath> knownNames = new HashMap<>();
 	FileSystem.ClasspathSectionProblemReporter problemReporter =
 		new FileSystem.ClasspathSectionProblemReporter() {
 			public void invalidClasspathSection(String jarFilePath) {
@@ -3582,15 +3562,15 @@ protected ArrayList handleClasspath(ArrayList classpaths, String customEncoding)
 				addPendingErrors(bind("configure.multipleClasspathSections", jarFilePath)); //$NON-NLS-1$
 			}
 		};
-	while (! classpaths.isEmpty()) {
-		Classpath current = (Classpath) classpaths.remove(0);
+	while (! initial.isEmpty()) {
+		Classpath current = initial.remove(0);
 		String currentPath = current.getPath();
 		if (knownNames.get(currentPath) == null) {
 			knownNames.put(currentPath, current);
 			result.add(current);
-			List linkedJars = current.fetchLinkedJars(problemReporter);
+			List<Classpath> linkedJars = current.fetchLinkedJars(problemReporter);
 			if (linkedJars != null) {
-				classpaths.addAll(0, linkedJars);
+				initial.addAll(0, linkedJars);
 			}
 		}
 	}
@@ -3608,7 +3588,7 @@ protected ArrayList<FileSystem.Classpath> handleEndorseddirs(ArrayList<String> e
 	 * - else default extensions directory for the platform. (/lib/endorsed)
 	 */
 	if (endorsedDirClasspaths == null) {
-		endorsedDirClasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);
+		endorsedDirClasspaths = new ArrayList<>(DEFAULT_SIZE_CLASSPATH);
 		String endorsedDirsStr = System.getProperty("java.endorsed.dirs"); //$NON-NLS-1$
 		if (endorsedDirsStr == null) {
 			if (javaHome != null) {
@@ -3672,7 +3652,7 @@ protected ArrayList<FileSystem.Classpath> handleExtdirs(ArrayList<String> extdir
 	 * - else default extensions directory for the platform.
 	 */
 	if (extdirsClasspaths == null) {
-		extdirsClasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);
+		extdirsClasspaths = new ArrayList<>(DEFAULT_SIZE_CLASSPATH);
 		String extdirsStr = System.getProperty("java.ext.dirs"); //$NON-NLS-1$
 		if (extdirsStr == null) {
 			extdirsClasspaths.add(javaHome.getAbsolutePath() + "/lib/ext"); //$NON-NLS-1$
@@ -4457,7 +4437,7 @@ protected void initialize(PrintWriter outWriter, PrintWriter errWriter, boolean
  * @deprecated - use {@link #initialize(PrintWriter, PrintWriter, boolean, Map, CompilationProgress)} instead
  *                       e.g. initialize(outWriter, errWriter, systemExit, customDefaultOptions, null)
  */
-protected void initialize(PrintWriter outWriter, PrintWriter errWriter, boolean systemExit, Map customDefaultOptions) {
+protected void initialize(PrintWriter outWriter, PrintWriter errWriter, boolean systemExit, Map<String, String> customDefaultOptions) {
 	this.initialize(outWriter, errWriter, systemExit, customDefaultOptions, null /* progress */);
 }
 protected void initialize(PrintWriter outWriter, PrintWriter errWriter, boolean systemExit, Map<String, String> customDefaultOptions, CompilationProgress compilationProgress) {
@@ -4486,7 +4466,7 @@ protected void initialize(PrintWriter outWriter, PrintWriter errWriter, boolean
 protected void initializeAnnotationProcessorManager() {
 	String className = "org.eclipse.jdt.internal.compiler.apt.dispatch.BatchAnnotationProcessorManager"; //$NON-NLS-1$
 	try {
-		Class c = Class.forName(className);
+		Class<?> c = Class.forName(className);
 		AbstractAnnotationProcessorManager annotationManager = (AbstractAnnotationProcessorManager) c.newInstance();
 		annotationManager.configure(this, this.expandedCommandLine);
 		annotationManager.setErr(this.err);
@@ -4693,15 +4673,15 @@ private ArrayList<String> processModulePathEntries(String arg) {
 /*
  * External API
  */
-public void processPathEntries(final int defaultSize, final ArrayList paths,
+public void processPathEntries(final int defaultSize, final ArrayList<FileSystem.Classpath> paths,
 			final String currentPath, String customEncoding, boolean isSourceOnly,
 			boolean rejectDestinationPathOnJars) {
 	String currentClasspathName = null;
 	String currentDestinationPath = null;
-	ArrayList currentRuleSpecs = new ArrayList(defaultSize);
+	ArrayList<String> currentRuleSpecs = new ArrayList<>(defaultSize);
 	StringTokenizer tokenizer = new StringTokenizer(currentPath,
 			File.pathSeparator + "[]", true); //$NON-NLS-1$
-	ArrayList tokens = new ArrayList();
+	ArrayList<String> tokens = new ArrayList<>();
 	while (tokenizer.hasMoreTokens()) {
 		tokens.add(tokenizer.nextToken());
 	}
@@ -4735,7 +4715,7 @@ public void processPathEntries(final int defaultSize, final ArrayList paths,
 	String token = null;
 	int cursor = 0, tokensNb = tokens.size(), bracket = -1;
 	while (cursor < tokensNb && state != error) {
-		token = (String) tokens.get(cursor++);
+		token = tokens.get(cursor++);
 		if (token.equals(File.pathSeparator)) {
 			switch (state) {
 			case start:
@@ -4840,7 +4820,7 @@ public void processPathEntries(final int defaultSize, final ArrayList paths,
 				break;
 			case bracketClosed:
 				for (int i = bracket; i < cursor ; i++) {
-					currentClasspathName += (String) tokens.get(i);
+					currentClasspathName += tokens.get(i);
 				}
 				state = readyToClose;
 				break;
@@ -4875,7 +4855,7 @@ public void processPathEntries(final int defaultSize, final ArrayList paths,
 	}
 }
 
-private int processPaths(String[] args, int index, String currentArg, ArrayList paths) {
+private int processPaths(String[] args, int index, String currentArg, ArrayList<String> paths) {
 	int localIndex = index;
 	int count = 0;
 	for (int i = 0, max = currentArg.length(); i < max; i++) {
@@ -5026,14 +5006,14 @@ public void setLocale(Locale locale) {
 /*
  * External API
  */
-protected void setPaths(ArrayList bootclasspaths,
+protected void setPaths(ArrayList<String> bootclasspaths,
 		String sourcepathClasspathArg,
-		ArrayList sourcepathClasspaths,
-		ArrayList classpaths,
+		ArrayList<String> sourcepathClasspaths,
+		ArrayList<String> classpaths,
 		String modulePath,
 		String moduleSourcepath,
-		ArrayList extdirsClasspaths,
-		ArrayList endorsedDirClasspaths,
+		ArrayList<String> extdirsClasspaths,
+		ArrayList<String> endorsedDirClasspaths,
 		String customEncoding) {
 
 	Object version = this.options.get(CompilerOptions.OPTION_Compliance);
@@ -5049,16 +5029,17 @@ protected void setPaths(ArrayList bootclasspaths,
 				this.bind("configure.unsupportedOption", "-endorseddirs")); //$NON-NLS-1$ //$NON-NLS-2$
 	}
 	// process bootclasspath, classpath and sourcepaths
- 	bootclasspaths = handleBootclasspath(bootclasspaths, customEncoding);
+ 	ArrayList<Classpath> allPaths = handleBootclasspath(bootclasspaths, customEncoding);
 
-	classpaths = handleClasspath(classpaths, customEncoding);
+	List<FileSystem.Classpath> cp = handleClasspath(classpaths, customEncoding);
 
-	List modulePaths = handleModulepath(modulePath);
+	List<FileSystem.Classpath> mp = handleModulepath(modulePath);
 
-	List moduleSourcepaths = handleModuleSourcepath(moduleSourcepath);
+	List<FileSystem.Classpath> msp = handleModuleSourcepath(moduleSourcepath);
 
+	ArrayList<FileSystem.Classpath> sourcepaths = new ArrayList<>();
 	if (sourcepathClasspathArg != null) {
-		processPathEntries(DEFAULT_SIZE_CLASSPATH, sourcepathClasspaths,
+		processPathEntries(DEFAULT_SIZE_CLASSPATH, sourcepaths,
 			sourcepathClasspathArg, customEncoding, true, false);
 	}
 
@@ -5068,9 +5049,9 @@ protected void setPaths(ArrayList bootclasspaths,
 	 * - else java.ext.dirs if defined;
 	 * - else default extensions directory for the platform.
 	 */
-	extdirsClasspaths = handleExtdirs(extdirsClasspaths);
+	List<FileSystem.Classpath> extdirs = handleExtdirs(extdirsClasspaths);
 
-	endorsedDirClasspaths = handleEndorseddirs(endorsedDirClasspaths);
+	List<FileSystem.Classpath> endorsed = handleEndorseddirs(endorsedDirClasspaths);
 
 	/*
 	 * Concatenate classpath entries
@@ -5080,24 +5061,23 @@ protected void setPaths(ArrayList bootclasspaths,
 	 * entries are searched for both sources and binaries except
 	 * the sourcepath entries which are searched for sources only.
 	 */
-	bootclasspaths.addAll(0, endorsedDirClasspaths);
-	bootclasspaths.addAll(extdirsClasspaths);
-	bootclasspaths.addAll(sourcepathClasspaths);
-	bootclasspaths.addAll(classpaths);
-	bootclasspaths.addAll(modulePaths);
-	bootclasspaths.addAll(moduleSourcepaths);
-	classpaths = bootclasspaths;
-	classpaths = FileSystem.ClasspathNormalizer.normalize(classpaths);
-	this.checkedClasspaths = new FileSystem.Classpath[classpaths.size()];
-	classpaths.toArray(this.checkedClasspaths);
+	allPaths.addAll(0, endorsed);
+	allPaths.addAll(extdirs);
+	allPaths.addAll(sourcepaths);
+	allPaths.addAll(cp);
+	allPaths.addAll(mp);
+	allPaths.addAll(msp);
+	allPaths = FileSystem.ClasspathNormalizer.normalize(allPaths);
+	this.checkedClasspaths = new FileSystem.Classpath[allPaths.size()];
+	allPaths.toArray(this.checkedClasspaths);
 	this.logger.logClasspath(this.checkedClasspaths);
 
 	if (this.annotationPaths != null && CompilerOptions.ENABLED.equals(this.options.get(CompilerOptions.OPTION_AnnotationBasedNullAnalysis))) {
-		for (FileSystem.Classpath cp : this.checkedClasspaths) {
-			if (cp instanceof ClasspathJar)
-				((ClasspathJar) cp).annotationPaths = this.annotationPaths;
-			else if (cp instanceof ClasspathJrt)
-				((ClasspathJrt) cp).annotationPaths = this.annotationPaths;
+		for (FileSystem.Classpath c : this.checkedClasspaths) {
+			if (c instanceof ClasspathJar)
+				((ClasspathJar) c).annotationPaths = this.annotationPaths;
+			else if (c instanceof ClasspathJrt)
+				((ClasspathJrt) c).annotationPaths = this.annotationPaths;
 		}
 	}
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/Util.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/Util.java
index ef346ad..7929313 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/Util.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/Util.java
@@ -54,7 +54,6 @@ import org.eclipse.jdt.internal.compiler.lookup.TypeBinding;
 import org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding;
 import org.eclipse.jdt.internal.compiler.lookup.WildcardBinding;
 
-@SuppressWarnings({"rawtypes", "unchecked"})
 public class Util implements SuffixConstants {
 
 	/**
@@ -1073,6 +1072,7 @@ public class Util implements SuffixConstants {
 			output.close();
 		}
 	}
+	@SuppressWarnings({ "rawtypes", "unchecked" })
 	public static void recordNestedType(ClassFile classFile, TypeBinding typeBinding) {
 		if (classFile.visitedTypes == null) {
 			classFile.visitedTypes = new HashSet(3);
@@ -1159,11 +1159,11 @@ public class Util implements SuffixConstants {
 		return null;
 	}
 
-	public static void collectVMBootclasspath(List bootclasspaths, File javaHome) {
+	public static void collectVMBootclasspath(List<Classpath> bootclasspaths, File javaHome) {
 		List<Classpath> classpaths = collectPlatformLibraries(javaHome);
 		bootclasspaths.addAll(classpaths);
 	}
-	public static void collectRunningVMBootclasspath(List bootclasspaths) {
+	public static void collectRunningVMBootclasspath(List<Classpath> bootclasspaths) {
 		collectVMBootclasspath(bootclasspaths, null);
 	}
 	public static long getJDKLevel(File javaHome) {
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java
index 2de8224..5943470 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java
@@ -39,6 +39,7 @@ import org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration;
 import org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration;
 import org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall;
 import org.eclipse.jdt.internal.compiler.batch.Main;
+import org.eclipse.jdt.internal.compiler.batch.FileSystem.Classpath;
 import org.eclipse.jdt.internal.compiler.env.IBinaryType;
 import org.eclipse.jdt.internal.compiler.parser.RecoveryScanner;
 import org.eclipse.jdt.internal.compiler.parser.RecoveryScannerData;
@@ -240,9 +241,9 @@ public class ASTParser {
 		initializeDefaults();
 	}
 
-	private List getClasspath() throws IllegalStateException {
+	private List<Classpath> getClasspath() throws IllegalStateException {
 		Main main = new Main(new PrintWriter(System.out), new PrintWriter(System.err), false/*systemExit*/, null/*options*/, null/*progress*/);
-		ArrayList allClasspaths = new ArrayList();
+		ArrayList<Classpath> allClasspaths = new ArrayList<Classpath>();
 		try {
 			if ((this.bits & CompilationUnitResolver.INCLUDE_RUNNING_VM_BOOTCLASSPATH) != 0) {
 				org.eclipse.jdt.internal.compiler.util.Util.collectRunningVMBootclasspath(allClasspaths);
commit faf81634e6a3078709fba2e76a6fcf36bd342a1b
Author: Jay Arthanareeswaran <jarthana@in.ibm.com>
Date:   Sun Jul 30 20:17:56 2017 +0530

    Bug 520335 - [9] ClassCastException in compiler when passed an endorsed
    directory
    
    Change-Id: Ibc8e20e970a37c964164722538abf1188290881d
    Signed-off-by: Jay Arthanareeswaran <jarthana@in.ibm.com>

3	0	org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java
13	11	org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java
diff --git a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java
index bc3e10d..9d24e70 100644
--- a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java
+++ b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java
@@ -33,6 +33,9 @@ import org.eclipse.jdt.internal.compiler.util.Util;
 
 @SuppressWarnings({ "rawtypes", "unchecked" })
 public class FileSystem implements INameEnvironment, SuffixConstants {
+	// Keep the type as ArrayList and not List as there are clients that are already written to expect ArrayList.
+	public static ArrayList<FileSystem.Classpath> EMPTY_CLASSPATH = new ArrayList<>();
+
 	public interface Classpath {
 		char[][][] findTypeNames(String qualifiedPackageName);
 		NameEnvironmentAnswer findClass(char[] typeName, String qualifiedPackageName, String qualifiedBinaryFileName);
diff --git a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java
index 0f4bb64..5e3f50a 100644
--- a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java
+++ b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java
@@ -1532,7 +1532,7 @@ public void addExtraProblems(CategorizedProblem problem) {
 	}
 	this.extraProblems.add(problem);
 }
-protected void addNewEntry(ArrayList paths, String currentClasspathName,
+protected void addNewEntry(ArrayList<FileSystem.Classpath> paths, String currentClasspathName,
 		ArrayList currentRuleSpecs, String customEncoding,
 		String destPath, boolean isSourceOnly,
 		boolean rejectDestinationPathOnJars) {
@@ -3277,7 +3277,7 @@ protected ArrayList handleClasspath(ArrayList classpaths, String customEncoding)
 /*
  * External API
  */
-protected ArrayList handleEndorseddirs(ArrayList endorsedDirClasspaths) {
+protected ArrayList<FileSystem.Classpath> handleEndorseddirs(ArrayList<String> endorsedDirClasspaths) {
  	final File javaHome = getJavaHome();
 	/*
 	 * Feed endorsedDirClasspath according to:
@@ -3305,10 +3305,10 @@ protected ArrayList handleEndorseddirs(ArrayList endorsedDirClasspaths) {
 	 * extdirsNames.
 	 */
 	if (endorsedDirClasspaths.size() != 0) {
+		ArrayList<FileSystem.Classpath> result = new ArrayList<>();
 		File[] directoriesToCheck = new File[endorsedDirClasspaths.size()];
 		for (int i = 0; i < directoriesToCheck.length; i++)
-			directoriesToCheck[i] = new File((String) endorsedDirClasspaths.get(i));
-		endorsedDirClasspaths.clear();
+			directoriesToCheck[i] = new File(endorsedDirClasspaths.get(i));
 		File[][] endorsedDirsJars = getLibrariesFiles(directoriesToCheck);
 		if (endorsedDirsJars != null) {
 			for (int i = 0, max = endorsedDirsJars.length; i < max; i++) {
@@ -3320,7 +3320,7 @@ protected ArrayList handleEndorseddirs(ArrayList endorsedDirClasspaths) {
 									current[j].getAbsolutePath(),
 									null, null, this.options);
 						if (classpath != null) {
-							endorsedDirClasspaths.add(classpath);
+							result.add(classpath);
 						}
 					}
 				} else if (directoriesToCheck[i].isFile()) {
@@ -3331,15 +3331,16 @@ protected ArrayList handleEndorseddirs(ArrayList endorsedDirClasspaths) {
 				}
 			}
 		}
+		return result;
 	}
-	return endorsedDirClasspaths;
+	return FileSystem.EMPTY_CLASSPATH;
 }
 
 /*
  * External API
  * Handle extdirs processing
  */
-protected ArrayList handleExtdirs(ArrayList extdirsClasspaths) {
+protected ArrayList<FileSystem.Classpath> handleExtdirs(ArrayList<String> extdirsClasspaths) {
  	final File javaHome = getJavaHome();
 
 	/*
@@ -3365,10 +3366,10 @@ protected ArrayList handleExtdirs(ArrayList extdirsClasspaths) {
 	 * extdirsNames.
 	 */
 	if (extdirsClasspaths.size() != 0) {
+		ArrayList<FileSystem.Classpath> result = new ArrayList<>();
 		File[] directoriesToCheck = new File[extdirsClasspaths.size()];
 		for (int i = 0; i < directoriesToCheck.length; i++)
-			directoriesToCheck[i] = new File((String) extdirsClasspaths.get(i));
-		extdirsClasspaths.clear();
+			directoriesToCheck[i] = new File(extdirsClasspaths.get(i));
 		File[][] extdirsJars = getLibrariesFiles(directoriesToCheck);
 		if (extdirsJars != null) {
 			for (int i = 0, max = extdirsJars.length; i < max; i++) {
@@ -3380,7 +3381,7 @@ protected ArrayList handleExtdirs(ArrayList extdirsClasspaths) {
 									current[j].getAbsolutePath(),
 									null, null, this.options);
 						if (classpath != null) {
-							extdirsClasspaths.add(classpath);
+							result.add(classpath);
 						}
 					}
 				} else if (directoriesToCheck[i].isFile()) {
@@ -3390,9 +3391,10 @@ protected ArrayList handleExtdirs(ArrayList extdirsClasspaths) {
 				}
 			}
 		}
+		return result; 
 	}
 
-	return extdirsClasspaths;
+	return FileSystem.EMPTY_CLASSPATH;
 }
 
 /*
commit a51e23dc5c8cc44060b6e7008ff0aa4af919df24
Author: Jay Arthanareeswaran <jarthana@in.ibm.com>
Date:   Wed Aug 2 19:56:18 2017 +0530

    Bug 520335 - [9] ClassCastException in compiler when passed an endorsed
    directory
    
    Generify Main.java
    
    Change-Id: I2b31e81b019cd720efddbf700994888081707ee5
    Signed-off-by: Jay Arthanareeswaran <jarthana@in.ibm.com>

5	5	org.eclipse.jdt.compiler.tool/src/org/eclipse/jdt/internal/compiler/tool/EclipseCompilerImpl.java
3	2	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractBatchCompilerTest.java
3	2	org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/ClasspathJar.java
1	1	org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/CompilationUnit.java
1	1	org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java
89	106	org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java
4	3	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/Util.java
3	2	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java
diff --git a/org.eclipse.jdt.compiler.tool/src/org/eclipse/jdt/internal/compiler/tool/EclipseCompilerImpl.java b/org.eclipse.jdt.compiler.tool/src/org/eclipse/jdt/internal/compiler/tool/EclipseCompilerImpl.java
index fa0fc71..903b9a4 100644
--- a/org.eclipse.jdt.compiler.tool/src/org/eclipse/jdt/internal/compiler/tool/EclipseCompilerImpl.java
+++ b/org.eclipse.jdt.compiler.tool/src/org/eclipse/jdt/internal/compiler/tool/EclipseCompilerImpl.java
@@ -406,12 +406,12 @@ public class EclipseCompilerImpl extends Main {
 	}
 
 	@Override
-	protected void setPaths(ArrayList bootclasspaths,
+	protected void setPaths(ArrayList<String> bootclasspaths,
 			String sourcepathClasspathArg,
-			ArrayList sourcepathClasspaths,
-			ArrayList classpaths,
-			ArrayList extdirsClasspaths,
-			ArrayList endorsedDirClasspaths,
+			ArrayList<String> sourcepathClasspaths,
+			ArrayList<String> classpaths,
+			ArrayList<String> extdirsClasspaths,
+			ArrayList<String> endorsedDirClasspaths,
 			String customEncoding) {
 
 		ArrayList<FileSystem.Classpath> fileSystemClasspaths = new ArrayList<>();
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractBatchCompilerTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractBatchCompilerTest.java
index 6a3314b..b741ab0 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractBatchCompilerTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractBatchCompilerTest.java
@@ -24,6 +24,7 @@ import org.eclipse.jdt.core.compiler.CompilationProgress;
 import org.eclipse.jdt.core.compiler.batch.BatchCompiler;
 import org.eclipse.jdt.core.tests.util.Util;
 import org.eclipse.jdt.internal.compiler.batch.ClasspathLocation;
+import org.eclipse.jdt.internal.compiler.batch.FileSystem;
 import org.eclipse.jdt.internal.compiler.batch.Main;
 
 public abstract class AbstractBatchCompilerTest extends AbstractRegressionTest {
@@ -803,7 +804,7 @@ public abstract class AbstractBatchCompilerTest extends AbstractRegressionTest {
 		if (!outputDirectory.isDirectory()) {
 			outputDirectory.mkdirs();
 		}
-		ArrayList<ClasspathLocation> paths = new ArrayList<>(Main.DEFAULT_SIZE_CLASSPATH);
+		ArrayList<FileSystem.Classpath> paths = new ArrayList<>(Main.DEFAULT_SIZE_CLASSPATH);
 		try {
 			(new Main(new PrintWriter(System.out), new PrintWriter(System.err), true/*systemExit*/, null/*options*/, null/*progress*/)).
 				processPathEntries(Main.DEFAULT_SIZE_CLASSPATH, paths, classpathInput, null /* customEncoding */, true /* isSourceOnly */, false /* rejectDestinationPathOnJars*/);
@@ -822,7 +823,7 @@ public abstract class AbstractBatchCompilerTest extends AbstractRegressionTest {
 			assertEquals("unexpected classpaths entries number: ",
 					expectedClasspathEntries == null ? 0 : expectedClasspathEntries.length / 3, l);
 			for (int i = 0, j = 0; i < l ; i++) {
-				ClasspathLocation result = paths.get(i);
+				ClasspathLocation result = (ClasspathLocation) paths.get(i);
 				String expected = expectedClasspathEntries[j++];
 				String actual = result.toString();
 				if (! actual.equals("ClasspathDirectory " + expected + File.separator) &&
diff --git a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/ClasspathJar.java b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/ClasspathJar.java
index ea7baa5..1aeaa68 100644
--- a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/ClasspathJar.java
+++ b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/ClasspathJar.java
@@ -25,6 +25,7 @@ import java.util.zip.ZipEntry;
 import java.util.zip.ZipFile;
 
 import org.eclipse.jdt.core.compiler.CharOperation;
+import org.eclipse.jdt.internal.compiler.batch.FileSystem.Classpath;
 import org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader;
 import org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException;
 import org.eclipse.jdt.internal.compiler.classfmt.ExternalAnnotationDecorator;
@@ -54,13 +55,13 @@ public ClasspathJar(File file, boolean closeZipFileAtEnd,
 	this.closeZipFileAtEnd = closeZipFileAtEnd;
 }
 
-public List fetchLinkedJars(FileSystem.ClasspathSectionProblemReporter problemReporter) {
+public List<Classpath> fetchLinkedJars(FileSystem.ClasspathSectionProblemReporter problemReporter) {
 	// expected to be called once only - if multiple calls desired, consider
 	// using a cache
 	InputStream inputStream = null;
 	try {
 		initialize();
-		ArrayList result = new ArrayList();
+		ArrayList<Classpath> result = new ArrayList<>();
 		ZipEntry manifest = this.zipFile.getEntry("META-INF/MANIFEST.MF"); //$NON-NLS-1$
 		if (manifest != null) { // non-null implies regular file
 			inputStream = this.zipFile.getInputStream(manifest);
diff --git a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/CompilationUnit.java b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/CompilationUnit.java
index 64d3d89..fe7bf63 100644
--- a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/CompilationUnit.java
+++ b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/CompilationUnit.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2012 IBM Corporation and others.
+ * Copyright (c) 2000, 2017 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
diff --git a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java
index 9d24e70..e917dd0 100644
--- a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java
+++ b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/FileSystem.java
@@ -50,7 +50,7 @@ public class FileSystem implements INameEnvironment, SuffixConstants {
 		 * @return a list of the jar file names defined in the Class-Path
 		 *         section of the jar file manifest if any
 		 */
-		List fetchLinkedJars(ClasspathSectionProblemReporter problemReporter);
+		List<Classpath> fetchLinkedJars(ClasspathSectionProblemReporter problemReporter);
 		/**
 		 * This method resets the environment. The resulting state is equivalent to
 		 * a new name environment without creating a new object.
diff --git a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java
index 5e3f50a..d372aa2 100644
--- a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java
+++ b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java
@@ -56,6 +56,7 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
+import java.util.Map.Entry;
 import java.util.MissingResourceException;
 import java.util.Properties;
 import java.util.ResourceBundle;
@@ -94,7 +95,6 @@ import org.eclipse.jdt.internal.compiler.util.Messages;
 import org.eclipse.jdt.internal.compiler.util.SuffixConstants;
 import org.eclipse.jdt.internal.compiler.util.Util;
 
-@SuppressWarnings({ "rawtypes", "unchecked" })
 public class Main implements ProblemSeverities, SuffixConstants {
 
 	public static class Logger {
@@ -102,7 +102,7 @@ public class Main implements ProblemSeverities, SuffixConstants {
 		private PrintWriter log;
 		private Main main;
 		private PrintWriter out;
-		private HashMap parameters;
+		private HashMap<String, Object> parameters;
 		int tagBits;
 		private static final String CLASS = "class"; //$NON-NLS-1$
 		private static final String CLASS_FILE = "classfile"; //$NON-NLS-1$
@@ -174,7 +174,7 @@ public class Main implements ProblemSeverities, SuffixConstants {
 		private static final String XML_DTD_DECLARATION = "<!DOCTYPE compiler PUBLIC \"-//Eclipse.org//DTD Eclipse JDT 3.2.005 Compiler//EN\" \"http://www.eclipse.org/jdt/core/compiler_32_005.dtd\">"; //$NON-NLS-1$
 		static {
 			try {
-				Class c = IProblem.class;
+				Class<?> c = IProblem.class;
 				Field[] fields = c.getFields();
 				for (int i = 0, max = fields.length; i < max; i++) {
 					Field field = fields[i];
@@ -198,7 +198,7 @@ public class Main implements ProblemSeverities, SuffixConstants {
 		public Logger(Main main, PrintWriter out, PrintWriter err) {
 			this.out = out;
 			this.err = err;
-			this.parameters = new HashMap();
+			this.parameters = new HashMap<>();
 			this.main = main;
 		}
 
@@ -631,7 +631,7 @@ public class Main implements ProblemSeverities, SuffixConstants {
 		}
 
 		public void loggingExtraProblems(Main currentMain) {
-			ArrayList problems = currentMain.extraProblems;
+			ArrayList<CategorizedProblem> problems = currentMain.extraProblems;
 			final int count = problems.size();
 			int localProblemCount = 0;
 			if (count != 0) {
@@ -639,7 +639,7 @@ public class Main implements ProblemSeverities, SuffixConstants {
 				int warnings = 0;
 				int infos = 0;
 				for (int i = 0; i < count; i++) {
-					CategorizedProblem problem = (CategorizedProblem) problems.get(i);
+					CategorizedProblem problem = problems.get(i);
 					if (problem != null) {
 						currentMain.globalProblemsCount++;
 						logExtraProblem(problem, localProblemCount, currentMain.globalProblemsCount);
@@ -660,7 +660,7 @@ public class Main implements ProblemSeverities, SuffixConstants {
 					if ((errors + warnings + infos) != 0) {
 						startLoggingExtraProblems(count);
 						for (int i = 0; i < count; i++) {
-							CategorizedProblem problem = (CategorizedProblem) problems.get(i);
+							CategorizedProblem problem = problems.get(i);
 							if (problem!= null) {
 								if (problem.getID() != IProblem.Task) {
 									logXmlExtraProblem(problem, localProblemCount, currentMain.globalProblemsCount);
@@ -1206,7 +1206,7 @@ public class Main implements ProblemSeverities, SuffixConstants {
 			}
 		}
 
-		private void printTag(String name, HashMap params, boolean insertNewLine, boolean closeTag) {
+		private void printTag(String name, HashMap<String, Object> params, boolean insertNewLine, boolean closeTag) {
 			if (this.log != null) {
 				((GenericXMLWriter) this.log).printTag(name, this.parameters, true, insertNewLine, closeTag);
 			}
@@ -1313,9 +1313,9 @@ public class Main implements ProblemSeverities, SuffixConstants {
 	 * Resource bundle factory to share bundles for the same locale
 	 */
 	public static class ResourceBundleFactory {
-		private static HashMap Cache = new HashMap();
+		private static HashMap<Locale, ResourceBundle> Cache = new HashMap<>();
 		public static synchronized ResourceBundle getBundle(Locale locale) {
-			ResourceBundle bundle = (ResourceBundle) Cache.get(locale);
+			ResourceBundle bundle = Cache.get(locale);
 			if (bundle == null) {
 				bundle = ResourceBundle.getBundle(Main.bundleName, locale);
 				Cache.put(locale, bundle);
@@ -1386,7 +1386,7 @@ public class Main implements ProblemSeverities, SuffixConstants {
 	public int currentRepetition, maxRepetition;
 	public boolean showProgress = false;
 	public long startTime;
-	public ArrayList pendingErrors;
+	public ArrayList<String> pendingErrors;
 	public boolean systemExitWhenFinished = true;
 
 	public static final int TIMING_DISABLED = 0;
@@ -1400,7 +1400,7 @@ public class Main implements ProblemSeverities, SuffixConstants {
 
 	private PrintWriter err;
 
-	protected ArrayList extraProblems;
+	protected ArrayList<CategorizedProblem> extraProblems;
 	public final static String bundleName = "org.eclipse.jdt.internal.compiler.batch.messages"; //$NON-NLS-1$
 	// two uses: recognize 'none' in options; code the singleton none
 	// for the '-d none' option (wherever it may be found)
@@ -1517,7 +1517,7 @@ public Main(PrintWriter outWriter, PrintWriter errWriter, boolean systemExitWhen
  * @deprecated - use {@link #Main(PrintWriter, PrintWriter, boolean, Map, CompilationProgress)} instead
  *                       e.g. Main(outWriter, errWriter, systemExitWhenFinished, customDefaultOptions, null)
  */
-public Main(PrintWriter outWriter, PrintWriter errWriter, boolean systemExitWhenFinished, Map customDefaultOptions) {
+public Main(PrintWriter outWriter, PrintWriter errWriter, boolean systemExitWhenFinished, Map<String, String> customDefaultOptions) {
 	this(outWriter, errWriter, systemExitWhenFinished, customDefaultOptions, null /* progress */);
 }
 
@@ -1528,12 +1528,12 @@ public Main(PrintWriter outWriter, PrintWriter errWriter, boolean systemExitWhen
 
 public void addExtraProblems(CategorizedProblem problem) {
 	if (this.extraProblems == null) {
-		this.extraProblems = new ArrayList();
+		this.extraProblems = new ArrayList<>();
 	}
 	this.extraProblems.add(problem);
 }
 protected void addNewEntry(ArrayList<FileSystem.Classpath> paths, String currentClasspathName,
-		ArrayList currentRuleSpecs, String customEncoding,
+		ArrayList<String> currentRuleSpecs, String customEncoding,
 		String destPath, boolean isSourceOnly,
 		boolean rejectDestinationPathOnJars) {
 
@@ -1542,10 +1542,10 @@ protected void addNewEntry(ArrayList<FileSystem.Classpath> paths, String current
 	if (rulesSpecsSize != 0) {
 		AccessRule[] accessRules = new AccessRule[currentRuleSpecs.size()];
 		boolean rulesOK = true;
-		Iterator i = currentRuleSpecs.iterator();
+		Iterator<String> i = currentRuleSpecs.iterator();
 		int j = 0;
 		while (i.hasNext()) {
-			String ruleSpec = (String) i.next();
+			String ruleSpec = i.next();
 			char key = ruleSpec.charAt(0);
 			String pattern = ruleSpec.substring(1);
 			if (pattern.length() > 0) {
@@ -1610,7 +1610,7 @@ protected void addNewEntry(ArrayList<FileSystem.Classpath> paths, String current
 }
 void addPendingErrors(String message) {
 	if (this.pendingErrors == null) {
-		this.pendingErrors = new ArrayList();
+		this.pendingErrors = new ArrayList<>();
 	}
 	this.pendingErrors.add(message);
 }
@@ -1757,7 +1757,7 @@ public boolean compile(String[] argv) {
 			System.exit(-1);
 		}
 		return false;
-	} catch (RuntimeException e) { // internal compiler failure
+	} catch (Exception e) { // internal compiler failure
 		this.logger.logException(e);
 		if (this.systemExitWhenFinished) {
 			this.logger.flush();
@@ -1807,12 +1807,12 @@ public void configure(String[] argv) {
 	final int INSIDE_ANNOTATIONPATH_start = 22;
 
 	final int DEFAULT = 0;
-	ArrayList bootclasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);
+	ArrayList<String> bootclasspaths = new ArrayList<>(DEFAULT_SIZE_CLASSPATH);
 	String sourcepathClasspathArg = null;
-	ArrayList sourcepathClasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);
-	ArrayList classpaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);
-	ArrayList extdirsClasspaths = null;
-	ArrayList endorsedDirClasspaths = null;
+	ArrayList<String> sourcepathClasspaths = new ArrayList<>(DEFAULT_SIZE_CLASSPATH);
+	ArrayList<String> classpaths = new ArrayList<>(DEFAULT_SIZE_CLASSPATH);
+	ArrayList<String> extdirsClasspaths = null;
+	ArrayList<String> endorsedDirClasspaths = null;
 	this.annotationPaths = null;
 	this.annotationsFromClasspath = false;
 
@@ -1835,7 +1835,7 @@ public void configure(String[] argv) {
 	String currentSourceDirectory = null;
 	String currentArg = Util.EMPTY_STRING;
 	
-	Set specifiedEncodings = null;
+	Set<String> specifiedEncodings = null;
 
 	// expand the command line if necessary
 	boolean needExpansion = false;
@@ -2658,7 +2658,7 @@ public void configure(String[] argv) {
 						}
 					}
 				} else {
-					specifiedEncodings = new HashSet();
+					specifiedEncodings = new HashSet<>();
 				}
 				try { // ensure encoding is supported
 					new InputStreamReader(new ByteArrayInputStream(new byte[0]), currentArg);
@@ -2695,7 +2695,7 @@ public void configure(String[] argv) {
 							"-extdir")); //$NON-NLS-1$
 				}
 				StringTokenizer tokenizer = new StringTokenizer(currentArg,	File.pathSeparator, false);
-				extdirsClasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);
+				extdirsClasspaths = new ArrayList<>(DEFAULT_SIZE_CLASSPATH);
 				while (tokenizer.hasMoreTokens())
 					extdirsClasspaths.add(tokenizer.nextToken());
 				mode = DEFAULT;
@@ -2706,7 +2706,7 @@ public void configure(String[] argv) {
 						this.bind("configure.unexpectedDestinationPathEntry", //$NON-NLS-1$
 							"-endorseddirs")); //$NON-NLS-1$
 				}				tokenizer = new StringTokenizer(currentArg,	File.pathSeparator, false);
-				endorsedDirClasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);
+				endorsedDirClasspaths = new ArrayList<>(DEFAULT_SIZE_CLASSPATH);
 				while (tokenizer.hasMoreTokens())
 					endorsedDirClasspaths.add(tokenizer.nextToken());
 				mode = DEFAULT;
@@ -2944,8 +2944,8 @@ public void configure(String[] argv) {
 				getAllEncodings(specifiedEncodings)));
 	}
 	if (this.pendingErrors != null) {
-		for (Iterator iterator = this.pendingErrors.iterator(); iterator.hasNext(); ) {
-			String message = (String) iterator.next();
+		for (Iterator<String> iterator = this.pendingErrors.iterator(); iterator.hasNext(); ) {
+			String message = iterator.next();
 			this.logger.logPendingError(message);
 		}
 		this.pendingErrors = null;
@@ -2976,7 +2976,7 @@ private static char[][] decodeIgnoreOptionalProblemsFromFolders(String folders)
 	return result;
 }
 
-private static String getAllEncodings(Set encodings) {
+private static String getAllEncodings(Set<String> encodings) {
 	int size = encodings.size();
 	String[] allEncodings = new String[size];
 	encodings.toArray(allEncodings);
@@ -2990,7 +2990,7 @@ private static String getAllEncodings(Set encodings) {
 	}
 	return String.valueOf(buffer);
 }
-
+@SuppressWarnings("rawtypes")
 private void initializeWarnings(String propertiesFile) {
 	File file = new File(propertiesFile);
 	if (!file.exists()) {
@@ -3014,7 +3014,7 @@ private void initializeWarnings(String propertiesFile) {
 			}
 		}
 	}
-	for (Iterator iterator = properties.entrySet().iterator(); iterator.hasNext(); ) {
+	for(Iterator iterator = properties.entrySet().iterator(); iterator.hasNext(); ) {
 		Map.Entry entry = (Map.Entry) iterator.next();
 		final String key = entry.getKey().toString();
 		if (key.startsWith("org.eclipse.jdt.core.compiler.")) { //$NON-NLS-1$
@@ -3067,15 +3067,10 @@ protected void disableAll(int severity) {
 			checkedValue = CompilerOptions.INFO;
 			break;
 	}
-	Object[] entries = this.options.entrySet().toArray();
-	for (int i = 0, max = entries.length; i < max; i++) {
-		Map.Entry entry = (Map.Entry) entries[i];
-		if (!(entry.getKey() instanceof String))
-			continue;
-		if (!(entry.getValue() instanceof String))
-			continue;
-		if (((String) entry.getValue()).equals(checkedValue)) {
-			this.options.put((String) entry.getKey(), CompilerOptions.IGNORE);
+	Set<Entry<String, String>> entrySet = this.options.entrySet();
+	for (Entry<String, String> entry : entrySet) {
+		if (entry.getValue().equals(checkedValue)) {
+			this.options.put(entry.getKey(), CompilerOptions.IGNORE);
 		}
 	}
 	if (severity == ProblemSeverities.Warning) {
@@ -3184,55 +3179,43 @@ public IProblemFactory getProblemFactory() {
 /*
  * External API
  */
-protected ArrayList handleBootclasspath(ArrayList bootclasspaths, String customEncoding) {
+protected ArrayList<Classpath> handleBootclasspath(ArrayList<String> bootclasspaths, String customEncoding) {
  	final int bootclasspathsSize;
+ 	ArrayList<Classpath> result = new ArrayList<>(DEFAULT_SIZE_CLASSPATH);
 	if ((bootclasspaths != null)
-		&& ((bootclasspathsSize = bootclasspaths.size()) != 0))
-	{
-		String[] paths = new String[bootclasspathsSize];
-		bootclasspaths.toArray(paths);
-		bootclasspaths.clear();
-		for (int i = 0; i < bootclasspathsSize; i++) {
-			processPathEntries(DEFAULT_SIZE_CLASSPATH, bootclasspaths,
-				paths[i], customEncoding, false, true);
+		&& ((bootclasspathsSize = bootclasspaths.size()) != 0)) {
+		result = new ArrayList<>(bootclasspathsSize);
+		for (String path : bootclasspaths) {
+			processPathEntries(DEFAULT_SIZE_CLASSPATH, result, path, customEncoding, false, true);
 		}
 	} else {
-		bootclasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);
 		try {
-			Util.collectRunningVMBootclasspath(bootclasspaths);
+			Util.collectRunningVMBootclasspath(result);
 		} catch(IllegalStateException e) {
 			this.logger.logWrongJDK();
 			this.proceed = false;
 			return null;
 		}
 	}
-	return bootclasspaths;
+	return result;
 }
-
 /*
  * External API
  */
-protected ArrayList handleClasspath(ArrayList classpaths, String customEncoding) {
-	final int classpathsSize;
-	if ((classpaths != null)
-		&& ((classpathsSize = classpaths.size()) != 0))
-	{
-		String[] paths = new String[classpathsSize];
-		classpaths.toArray(paths);
-		classpaths.clear();
-		for (int i = 0; i < classpathsSize; i++) {
-			processPathEntries(DEFAULT_SIZE_CLASSPATH, classpaths, paths[i],
-					customEncoding, false, true);
+protected ArrayList<FileSystem.Classpath> handleClasspath(ArrayList<String> classpaths, String customEncoding) {
+	ArrayList<FileSystem.Classpath> initial = new ArrayList<>(DEFAULT_SIZE_CLASSPATH);
+	if (classpaths != null && classpaths.size() > 0) {
+		for (String path : classpaths) {
+			processPathEntries(DEFAULT_SIZE_CLASSPATH, initial, path, customEncoding, false, true);
 		}
 	} else {
 		// no user classpath specified.
-		classpaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);
 		String classProp = System.getProperty("java.class.path"); //$NON-NLS-1$
 		if ((classProp == null) || (classProp.length() == 0)) {
 			addPendingErrors(this.bind("configure.noClasspath")); //$NON-NLS-1$
 			final Classpath classpath = FileSystem.getClasspath(System.getProperty("user.dir"), customEncoding, null, this.options);//$NON-NLS-1$
 			if (classpath != null) {
-				classpaths.add(classpath);
+				initial.add(classpath);
 			}
 		} else {
 			StringTokenizer tokenizer = new StringTokenizer(classProp, File.pathSeparator);
@@ -3242,15 +3225,15 @@ protected ArrayList handleClasspath(ArrayList classpaths, String customEncoding)
 				FileSystem.Classpath currentClasspath = FileSystem
 						.getClasspath(token, customEncoding, null, this.options);
 				if (currentClasspath != null) {
-					classpaths.add(currentClasspath);
+					initial.add(currentClasspath);
 				} else if (token.length() != 0) {
 					addPendingErrors(this.bind("configure.incorrectClasspath", token));//$NON-NLS-1$
 				}
 			}
 		}
 	}
-	ArrayList result = new ArrayList();
-	HashMap knownNames = new HashMap();
+	ArrayList<Classpath> result = new ArrayList<>();
+	HashMap<String, Classpath> knownNames = new HashMap<>();
 	FileSystem.ClasspathSectionProblemReporter problemReporter =
 		new FileSystem.ClasspathSectionProblemReporter() {
 			public void invalidClasspathSection(String jarFilePath) {
@@ -3260,15 +3243,15 @@ protected ArrayList handleClasspath(ArrayList classpaths, String customEncoding)
 				addPendingErrors(bind("configure.multipleClasspathSections", jarFilePath)); //$NON-NLS-1$
 			}
 		};
-	while (! classpaths.isEmpty()) {
-		Classpath current = (Classpath) classpaths.remove(0);
+	while (! initial.isEmpty()) {
+		Classpath current = initial.remove(0);
 		String currentPath = current.getPath();
 		if (knownNames.get(currentPath) == null) {
 			knownNames.put(currentPath, current);
 			result.add(current);
-			List linkedJars = current.fetchLinkedJars(problemReporter);
+			List<Classpath> linkedJars = current.fetchLinkedJars(problemReporter);
 			if (linkedJars != null) {
-				classpaths.addAll(0, linkedJars);
+				initial.addAll(0, linkedJars);
 			}
 		}
 	}
@@ -3286,7 +3269,7 @@ protected ArrayList<FileSystem.Classpath> handleEndorseddirs(ArrayList<String> e
 	 * - else default extensions directory for the platform. (/lib/endorsed)
 	 */
 	if (endorsedDirClasspaths == null) {
-		endorsedDirClasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);
+		endorsedDirClasspaths = new ArrayList<>(DEFAULT_SIZE_CLASSPATH);
 		String endorsedDirsStr = System.getProperty("java.endorsed.dirs"); //$NON-NLS-1$
 		if (endorsedDirsStr == null) {
 			if (javaHome != null) {
@@ -3350,7 +3333,7 @@ protected ArrayList<FileSystem.Classpath> handleExtdirs(ArrayList<String> extdir
 	 * - else default extensions directory for the platform.
 	 */
 	if (extdirsClasspaths == null) {
-		extdirsClasspaths = new ArrayList(DEFAULT_SIZE_CLASSPATH);
+		extdirsClasspaths = new ArrayList<>(DEFAULT_SIZE_CLASSPATH);
 		String extdirsStr = System.getProperty("java.ext.dirs"); //$NON-NLS-1$
 		if (extdirsStr == null) {
 			extdirsClasspaths.add(javaHome.getAbsolutePath() + "/lib/ext"); //$NON-NLS-1$
@@ -4125,7 +4108,7 @@ protected void initialize(PrintWriter outWriter, PrintWriter errWriter, boolean
  * @deprecated - use {@link #initialize(PrintWriter, PrintWriter, boolean, Map, CompilationProgress)} instead
  *                       e.g. initialize(outWriter, errWriter, systemExit, customDefaultOptions, null)
  */
-protected void initialize(PrintWriter outWriter, PrintWriter errWriter, boolean systemExit, Map customDefaultOptions) {
+protected void initialize(PrintWriter outWriter, PrintWriter errWriter, boolean systemExit, Map<String, String> customDefaultOptions) {
 	this.initialize(outWriter, errWriter, systemExit, customDefaultOptions, null /* progress */);
 }
 protected void initialize(PrintWriter outWriter, PrintWriter errWriter, boolean systemExit, Map<String, String> customDefaultOptions, CompilationProgress compilationProgress) {
@@ -4154,7 +4137,7 @@ protected void initialize(PrintWriter outWriter, PrintWriter errWriter, boolean
 protected void initializeAnnotationProcessorManager() {
 	String className = "org.eclipse.jdt.internal.compiler.apt.dispatch.BatchAnnotationProcessorManager"; //$NON-NLS-1$
 	try {
-		Class c = Class.forName(className);
+		Class<?> c = Class.forName(className);
 		AbstractAnnotationProcessorManager annotationManager = (AbstractAnnotationProcessorManager) c.newInstance();
 		annotationManager.configure(this, this.expandedCommandLine);
 		annotationManager.setErr(this.err);
@@ -4351,15 +4334,15 @@ private ReferenceBinding[] processClassNames(LookupEnvironment environment) {
 /*
  * External API
  */
-public void processPathEntries(final int defaultSize, final ArrayList paths,
+public void processPathEntries(final int defaultSize, final ArrayList<FileSystem.Classpath> paths,
 			final String currentPath, String customEncoding, boolean isSourceOnly,
 			boolean rejectDestinationPathOnJars) {
 	String currentClasspathName = null;
 	String currentDestinationPath = null;
-	ArrayList currentRuleSpecs = new ArrayList(defaultSize);
+	ArrayList<String> currentRuleSpecs = new ArrayList<>(defaultSize);
 	StringTokenizer tokenizer = new StringTokenizer(currentPath,
 			File.pathSeparator + "[]", true); //$NON-NLS-1$
-	ArrayList tokens = new ArrayList();
+	ArrayList<String> tokens = new ArrayList<>();
 	while (tokenizer.hasMoreTokens()) {
 		tokens.add(tokenizer.nextToken());
 	}
@@ -4393,7 +4376,7 @@ public void processPathEntries(final int defaultSize, final ArrayList paths,
 	String token = null;
 	int cursor = 0, tokensNb = tokens.size(), bracket = -1;
 	while (cursor < tokensNb && state != error) {
-		token = (String) tokens.get(cursor++);
+		token = tokens.get(cursor++);
 		if (token.equals(File.pathSeparator)) {
 			switch (state) {
 			case start:
@@ -4498,7 +4481,7 @@ public void processPathEntries(final int defaultSize, final ArrayList paths,
 				break;
 			case bracketClosed:
 				for (int i = bracket; i < cursor ; i++) {
-					currentClasspathName += (String) tokens.get(i);
+					currentClasspathName += tokens.get(i);
 				}
 				state = readyToClose;
 				break;
@@ -4533,7 +4516,7 @@ public void processPathEntries(final int defaultSize, final ArrayList paths,
 	}
 }
 
-private int processPaths(String[] args, int index, String currentArg, ArrayList paths) {
+private int processPaths(String[] args, int index, String currentArg, ArrayList<String> paths) {
 	int localIndex = index;
 	int count = 0;
 	for (int i = 0, max = currentArg.length(); i < max; i++) {
@@ -4684,21 +4667,22 @@ public void setLocale(Locale locale) {
 /*
  * External API
  */
-protected void setPaths(ArrayList bootclasspaths,
+protected void setPaths(ArrayList<String> bootclasspaths,
 		String sourcepathClasspathArg,
-		ArrayList sourcepathClasspaths,
-		ArrayList classpaths,
-		ArrayList extdirsClasspaths,
-		ArrayList endorsedDirClasspaths,
+		ArrayList<String> sourcepathClasspaths,
+		ArrayList<String> classpaths,
+		ArrayList<String> extdirsClasspaths,
+		ArrayList<String> endorsedDirClasspaths,
 		String customEncoding) {
 
 	// process bootclasspath, classpath and sourcepaths
- 	bootclasspaths = handleBootclasspath(bootclasspaths, customEncoding);
+ 	ArrayList<Classpath> allPaths = handleBootclasspath(bootclasspaths, customEncoding);
 
-	classpaths = handleClasspath(classpaths, customEncoding);
+	List<FileSystem.Classpath> cp = handleClasspath(classpaths, customEncoding);
 
+	ArrayList<FileSystem.Classpath> sourcepaths = new ArrayList<>();
 	if (sourcepathClasspathArg != null) {
-		processPathEntries(DEFAULT_SIZE_CLASSPATH, sourcepathClasspaths,
+		processPathEntries(DEFAULT_SIZE_CLASSPATH, sourcepaths,
 			sourcepathClasspathArg, customEncoding, true, false);
 	}
 
@@ -4708,9 +4692,9 @@ protected void setPaths(ArrayList bootclasspaths,
 	 * - else java.ext.dirs if defined;
 	 * - else default extensions directory for the platform.
 	 */
-	extdirsClasspaths = handleExtdirs(extdirsClasspaths);
+	List<FileSystem.Classpath> extdirs = handleExtdirs(extdirsClasspaths);
 
-	endorsedDirClasspaths = handleEndorseddirs(endorsedDirClasspaths);
+	List<FileSystem.Classpath> endorsed = handleEndorseddirs(endorsedDirClasspaths);
 
 	/*
 	 * Concatenate classpath entries
@@ -4720,20 +4704,19 @@ protected void setPaths(ArrayList bootclasspaths,
 	 * entries are searched for both sources and binaries except
 	 * the sourcepath entries which are searched for sources only.
 	 */
-	bootclasspaths.addAll(0, endorsedDirClasspaths);
-	bootclasspaths.addAll(extdirsClasspaths);
-	bootclasspaths.addAll(sourcepathClasspaths);
-	bootclasspaths.addAll(classpaths);
-	classpaths = bootclasspaths;
-	classpaths = FileSystem.ClasspathNormalizer.normalize(classpaths);
-	this.checkedClasspaths = new FileSystem.Classpath[classpaths.size()];
-	classpaths.toArray(this.checkedClasspaths);
+	allPaths.addAll(0, endorsed);
+	allPaths.addAll(extdirs);
+	allPaths.addAll(sourcepaths);
+	allPaths.addAll(cp);
+	allPaths = FileSystem.ClasspathNormalizer.normalize(allPaths);
+	this.checkedClasspaths = new FileSystem.Classpath[allPaths.size()];
+	allPaths.toArray(this.checkedClasspaths);
 	this.logger.logClasspath(this.checkedClasspaths);
 
 	if (this.annotationPaths != null && CompilerOptions.ENABLED.equals(this.options.get(CompilerOptions.OPTION_AnnotationBasedNullAnalysis))) {
-		for (FileSystem.Classpath cp : this.checkedClasspaths) {
-			if (cp instanceof ClasspathJar)
-				((ClasspathJar) cp).annotationPaths = this.annotationPaths;
+		for (FileSystem.Classpath c : this.checkedClasspaths) {
+			if (c instanceof ClasspathJar)
+				((ClasspathJar) c).annotationPaths = this.annotationPaths;
 		}
 	}
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/Util.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/Util.java
index 56a86ef..c9c502f 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/Util.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/Util.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2015 IBM Corporation and others.
+ * Copyright (c) 2000, 2017 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -35,6 +35,7 @@ import org.eclipse.jdt.core.compiler.CharOperation;
 import org.eclipse.jdt.internal.compiler.ClassFile;
 import org.eclipse.jdt.internal.compiler.ast.TypeDeclaration;
 import org.eclipse.jdt.internal.compiler.batch.FileSystem;
+import org.eclipse.jdt.internal.compiler.batch.FileSystem.Classpath;
 import org.eclipse.jdt.internal.compiler.batch.Main;
 import org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants;
 import org.eclipse.jdt.internal.compiler.lookup.ExtraCompilerModifiers;
@@ -45,7 +46,6 @@ import org.eclipse.jdt.internal.compiler.lookup.TypeBinding;
 import org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding;
 import org.eclipse.jdt.internal.compiler.lookup.WildcardBinding;
 
-@SuppressWarnings({"rawtypes", "unchecked"})
 public class Util implements SuffixConstants {
 
 	/**
@@ -1007,6 +1007,7 @@ public class Util implements SuffixConstants {
 			output.close();
 		}
 	}
+	@SuppressWarnings({ "rawtypes", "unchecked" })
 	public static void recordNestedType(ClassFile classFile, TypeBinding typeBinding) {
 		if (classFile.visitedTypes == null) {
 			classFile.visitedTypes = new HashSet(3);
@@ -1093,7 +1094,7 @@ public class Util implements SuffixConstants {
 		return null;
 	}
 
-	public static void collectRunningVMBootclasspath(List bootclasspaths) {
+	public static void collectRunningVMBootclasspath(List<Classpath> bootclasspaths) {
 		for (String filePath : collectFilesNames()) {
 			FileSystem.Classpath currentClasspath = FileSystem.getClasspath(filePath, null, null, null);
 			if (currentClasspath != null) {
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java
index 70a6e25..7ce431c 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java
@@ -35,6 +35,7 @@ import org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration;
 import org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration;
 import org.eclipse.jdt.internal.compiler.ast.ExplicitConstructorCall;
 import org.eclipse.jdt.internal.compiler.batch.Main;
+import org.eclipse.jdt.internal.compiler.batch.FileSystem.Classpath;
 import org.eclipse.jdt.internal.compiler.env.IBinaryType;
 import org.eclipse.jdt.internal.compiler.parser.RecoveryScanner;
 import org.eclipse.jdt.internal.compiler.parser.RecoveryScannerData;
@@ -235,9 +236,9 @@ public class ASTParser {
 		initializeDefaults();
 	}
 
-	private List getClasspath() throws IllegalStateException {
+	private List<Classpath> getClasspath() throws IllegalStateException {
 		Main main = new Main(new PrintWriter(System.out), new PrintWriter(System.err), false/*systemExit*/, null/*options*/, null/*progress*/);
-		ArrayList allClasspaths = new ArrayList();
+		ArrayList<Classpath> allClasspaths = new ArrayList<Classpath>();
 		try {
 			if ((this.bits & CompilationUnitResolver.INCLUDE_RUNNING_VM_BOOTCLASSPATH) != 0) {
 				org.eclipse.jdt.internal.compiler.util.Util.collectRunningVMBootclasspath(allClasspaths);

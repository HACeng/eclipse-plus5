commit dec08ba5b189563fc3fe0620826f7ae1c7797941
Author: Jim Desrivieres <jdesrivieres>
Date:   Mon Mar 11 23:24:10 2002 +0000

    Add useful toString methods for ASTNodes (bug 11076)

50	1	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTNode.java
18	0	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnit.java
19	0	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/FieldDeclaration.java
24	0	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java
952	0	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java
18	0	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeDeclaration.java
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTNode.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTNode.java
index a75d447..fa2d8ad 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTNode.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTNode.java
@@ -1031,11 +1031,60 @@ public abstract class ASTNode {
 	 * 
 	 * @return a debug string 
 	 */
-	public String toString() {
+	public final String toString() {
+		// allocate a buffer that is large enough to hold an average compilation unit
+		StringBuffer buffer = new StringBuffer(6000);
+		int p = buffer.length();
+		try {
+			appendDebugString(buffer);
+		} catch (RuntimeException e) {
+			// since debugger sometimes call toString methods, problems can easily happen when
+			// toString is called on an instance that is being initialized
+			buffer.setLength(p);
+			buffer.append("!");
+			buffer.append(standardToString());
+		}
+		// convert to a string, but lose the extra space in the string buffer by copying
+		return new String(buffer.toString());
+	}
+	
+	/**
+	 * Returns the string representation of this node produced by the standard
+	 * <code>Object.toString</code> method.
+	 * 
+	 * @return a debug string 
+	 */
+	final String standardToString() {
 		return super.toString();
 	}
 	
 	/**
+	 * Appends a debug representation of this node to the given string buffer.
+	 * <p>
+	 * The <code>ASTNode</code> implementation of this method prints out the entire 
+	 * subtree. Subclasses may override to provide a more succinct representation.
+	 * </p>
+	 * 
+	 * @param buffer the string buffer to append to
+	 */
+	void appendDebugString(StringBuffer buffer) {
+		// print the subtree by default
+		appendPrintString(buffer);
+	}
+		
+	/**
+	 * Appends a standard Java source code representation of this subtree to the given
+	 * string buffer.
+	 * 
+	 * @param buffer the string buffer to append to
+	 */
+	final void appendPrintString(StringBuffer buffer) {
+		NaiveASTFlattener printer = new NaiveASTFlattener();
+		this.accept(printer);
+		buffer.append(printer.getResult());
+	}
+	
+	/**
 	 * Estimate of size of an object header in bytes.
 	 */
 	static final int HEADERS = 12;
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnit.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnit.java
index 4a24c3f..3350d87 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnit.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnit.java
@@ -11,6 +11,7 @@
 
 package org.eclipse.jdt.core.dom;
 
+import java.util.Iterator;
 import java.util.List;
 
 /**
@@ -318,6 +319,23 @@ public class CompilationUnit extends ASTNode {
 	/* (omit javadoc for this method)
 	 * Method declared on ASTNode.
 	 */
+	void appendDebugString(StringBuffer buffer) {
+		buffer.append("CompilationUnit");
+		// include the type names
+		buffer.append("[");
+		for (Iterator it = types().iterator(); it.hasNext(); ) {
+			TypeDeclaration d = (TypeDeclaration) it.next();
+			buffer.append(d.getName().getIdentifier());
+			if (it.hasNext()) {
+				buffer.append(",");
+			}
+		}
+		buffer.append("]");
+	}
+		
+	/* (omit javadoc for this method)
+	 * Method declared on ASTNode.
+	 */
 	int memSize() {
 		int size = BASE_NODE_SIZE + 4 * 4;
 		if (lineEndTable != null) {
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/FieldDeclaration.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/FieldDeclaration.java
index 0b479bc..44acf5b 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/FieldDeclaration.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/FieldDeclaration.java
@@ -11,6 +11,7 @@
 
 package org.eclipse.jdt.core.dom;
 
+import java.util.Iterator;
 import java.util.List;
 
 /**
@@ -197,6 +198,24 @@ public class FieldDeclaration extends BodyDeclaration {
 	/* (omit javadoc for this method)
 	 * Method declared on ASTNode.
 	 */
+	void appendDebugString(StringBuffer buffer) {
+		buffer.append("FieldDeclaration[");
+		buffer.append("field ");
+		getType().appendPrintString(buffer);
+		buffer.append(" ");
+		for (Iterator it = fragments().iterator(); it.hasNext(); ) {
+			VariableDeclarationFragment d = (VariableDeclarationFragment) it.next();
+			d.getName().appendPrintString(buffer);
+			if (it.hasNext()) {
+				buffer.append(",");
+			}
+		}
+		buffer.append("]");
+	}
+
+	/* (omit javadoc for this method)
+	 * Method declared on ASTNode.
+	 */
 	int memSize() {
 		return super.memSize() + 3 * 4;
 	}
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java
index 0b11968..e7f70cc 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java
@@ -11,6 +11,7 @@
 
 package org.eclipse.jdt.core.dom;
 
+import java.util.Iterator;
 import java.util.List;
 
 /**
@@ -378,6 +379,29 @@ public class MethodDeclaration extends BodyDeclaration {
 	/* (omit javadoc for this method)
 	 * Method declared on ASTNode.
 	 */
+	void appendDebugString(StringBuffer buffer) {
+		buffer.append("MethodDeclaration[");
+		buffer.append(isConstructor() ? "constructor " : "method ");
+		buffer.append(getName().getIdentifier());
+		buffer.append("(");
+		for (Iterator it = parameters().iterator(); it.hasNext(); ) {
+			SingleVariableDeclaration d = (SingleVariableDeclaration) it.next();
+			d.getType().appendPrintString(buffer);
+			if (it.hasNext()) {
+				buffer.append(";");
+			}
+		}
+		buffer.append(")");
+		if (!isConstructor()) {
+			buffer.append(" returns ");
+			getReturnType().appendPrintString(buffer);
+		}
+		buffer.append("]");
+	}
+
+	/* (omit javadoc for this method)
+	 * Method declared on ASTNode.
+	 */
 	int memSize() {
 		return super.memSize() + 7 * 4;
 	}
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java
new file mode 100644
index 0000000..53653ab
--- /dev/null
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/NaiveASTFlattener.java
@@ -0,0 +1,952 @@
+/*******************************************************************************
+ * Copyright (c) 2002 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Common Public License v0.5 
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/cpl-v05.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ ******************************************************************************/
+package org.eclipse.jdt.core.dom;
+
+import java.util.Iterator;
+
+/**
+ * Internal AST visitor for serializing an AST in a qucik and dirty fashion.
+ * For various reasons the resulting string is not necessarily legal
+ * Java code; and even if it is legal Java code, it is not necessarily the string
+ * that corresponds to the given AST. Although useless for most purposes, it's
+ * fine for generating debug print strings.
+ * <p>
+ * Example usage:
+ * <code>
+ * <pre>
+ *    NaiveASTFlattener p = new NaiveASTFlattener();
+ *    node.accept(p);
+ *    String result = p.getResult();
+ * </pre>
+ * </code>
+ * Call the <code>reset</code> method to clear the previous result before reusing an
+ * existing instance.
+ * </p>
+ * 
+ * @since 2.0
+ */
+class NaiveASTFlattener extends ASTVisitor {
+	
+	/**
+	 * The string buffer into which the serialized representation of the AST is
+	 * written.
+	 */
+	private StringBuffer buffer = new StringBuffer(6000);
+	
+	/**
+	 * Creates a new AST printer.
+	 */
+	NaiveASTFlattener() {
+	}
+	
+	/**
+	 * Returns the string accumulated in the visit.
+	 *
+	 * @return the serialized 
+	 */
+	public String getResult() {
+		// convert to a string, but lose any extra space in the string buffer by copying
+		return new String(buffer.toString());
+	}
+	
+	/**
+	 * Resets this printer so that it can be used again.
+	 */
+	public void reset() {
+		buffer.setLength(0);
+	}
+	
+	/**
+	 * Appends the text representation of the given modifier flags, followed by a single space.
+	 * 
+	 * @param modifiers the modifiers
+	 */
+	void printModifiers(int modifiers) {
+		if (Modifier.isPublic(modifiers)) {
+			buffer.append("public ");
+		}
+		if (Modifier.isProtected(modifiers)) {
+			buffer.append("protected ");
+		}
+		if (Modifier.isPrivate(modifiers)) {
+			buffer.append("private ");
+		}
+		if (Modifier.isStatic(modifiers)) {
+			buffer.append("static ");
+		}
+		if (Modifier.isAbstract(modifiers)) {
+			buffer.append("abstract ");
+		}
+		if (Modifier.isFinal(modifiers)) {
+			buffer.append("final ");
+		}
+		if (Modifier.isSynchronized(modifiers)) {
+			buffer.append("synchronized ");
+		}
+		if (Modifier.isVolatile(modifiers)) {
+			buffer.append("volatile ");
+		}
+		if (Modifier.isNative(modifiers)) {
+			buffer.append("native ");
+		}
+		if (Modifier.isStrictfp(modifiers)) {
+			buffer.append("strictfp ");
+		}
+		if (Modifier.isTransient(modifiers)) {
+			buffer.append("transient ");
+		}
+	}		
+	
+	/*
+	 * @see ASTVisitor#visit(AnonymousClassDeclaration)
+	 */
+	public boolean visit(AnonymousClassDeclaration node) {
+		buffer.append("{");
+		for (Iterator it = node.bodyDeclarations().iterator(); it.hasNext(); ) {
+			BodyDeclaration b = (BodyDeclaration) it.next();
+			b.accept(this);
+		}
+		buffer.append("}");
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(ArrayAccess)
+	 */
+	public boolean visit(ArrayAccess node) {
+		node.getArray().accept(this);
+		buffer.append("[");
+		node.getIndex().accept(this);
+		buffer.append("]");
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(ArrayCreation)
+	 */
+	public boolean visit(ArrayCreation node) {
+		buffer.append("new ");
+		ArrayType at = node.getType();
+		int dims = at.getDimensions();
+		Type elementType = at.getElementType();
+		elementType.accept(this);
+		for (Iterator it = node.dimensions().iterator(); it.hasNext(); ) {
+			buffer.append("[");
+			Expression e = (Expression) it.next();
+			e.accept(this);
+			buffer.append("]");
+			dims--;
+		}
+		// add empty "[]" for each extra array dimension
+		for (int i= 0; i < dims; i++) {
+			buffer.append("[]");
+		}
+		if (node.getInitializer() != null) {
+			buffer.append("=");
+			node.getInitializer().accept(this);
+		}
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(ArrayInitializer)
+	 */
+	public boolean visit(ArrayInitializer node) {
+		buffer.append("{");
+		for (Iterator it = node.expressions().iterator(); it.hasNext(); ) {
+			Expression e = (Expression) it.next();
+			e.accept(this);
+			buffer.append(",");
+		}
+		buffer.append("}");
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(ArrayType)
+	 */
+	public boolean visit(ArrayType node) {
+		node.getComponentType().accept(this);
+		buffer.append("[]");
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(AssertStatement)
+	 */
+	public boolean visit(AssertStatement node) {
+		buffer.append("assert ");
+		node.getExpression().accept(this);
+		if (node.getMessage() != null) {
+			buffer.append(" : ");
+			node.getMessage().accept(this);
+		}
+		buffer.append(";");
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(Assignment)
+	 */
+	public boolean visit(Assignment node) {
+		node.getLeftHandSide().accept(this);
+		buffer.append(node.getOperator().toString());
+		node.getRightHandSide().accept(this);
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(Block)
+	 */
+	public boolean visit(Block node) {
+		buffer.append("{");
+		for (Iterator it = node.statements().iterator(); it.hasNext(); ) {
+			Statement s = (Statement) it.next();
+			s.accept(this);
+		}
+		buffer.append("}");
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(BooleanLiteral)
+	 */
+	public boolean visit(BooleanLiteral node) {
+		if (node.booleanValue()) {
+			buffer.append("true");
+		} else {
+			buffer.append("false");
+		}
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(BreakStatement)
+	 */
+	public boolean visit(BreakStatement node) {
+		buffer.append("break");
+		if (node.getLabel() != null) {
+			buffer.append(" ");
+			node.getLabel().accept(this);
+		}
+		buffer.append(";");
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(CastExpression)
+	 */
+	public boolean visit(CastExpression node) {
+		buffer.append("(");
+		node.getType().accept(this);
+		buffer.append(")");
+		node.getExpression().accept(this);
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(CatchClause)
+	 */
+	public boolean visit(CatchClause node) {
+		buffer.append("catch (");
+		node.getException().accept(this);
+		buffer.append(") ");
+		node.getBody().accept(this);
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(CharacterLiteral)
+	 */
+	public boolean visit(CharacterLiteral node) {
+		buffer.append(node.getEscapedValue());
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(ClassInstanceCreation)
+	 */
+	public boolean visit(ClassInstanceCreation node) {
+		if (node.getExpression() != null) {
+			node.getExpression().accept(this);
+			buffer.append(".");
+		}
+		buffer.append("new ");
+		node.getName().accept(this);
+		buffer.append("(");
+		for (Iterator it = node.arguments().iterator(); it.hasNext(); ) {
+			Expression e = (Expression) it.next();
+			e.accept(this);
+			if (it.hasNext()) {
+				buffer.append(",");
+			}
+		}
+		buffer.append(")");
+		if (node.getAnonymousClassDeclaration() != null) {
+			node.getAnonymousClassDeclaration().accept(this);
+		}
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(CompilationUnit)
+	 */
+	public boolean visit(CompilationUnit node) {
+		if (node.getPackage() != null) {
+			node.getPackage().accept(this);
+		}
+		for (Iterator it = node.imports().iterator(); it.hasNext(); ) {
+			ImportDeclaration d = (ImportDeclaration) it.next();
+			d.accept(this);
+		}
+		for (Iterator it = node.types().iterator(); it.hasNext(); ) {
+			TypeDeclaration d = (TypeDeclaration) it.next();
+			d.accept(this);
+		}
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(ConditionalExpression)
+	 */
+	public boolean visit(ConditionalExpression node) {
+		node.getExpression().accept(this);
+		buffer.append("?");
+		node.getThenExpression().accept(this);
+		buffer.append(":");
+		node.getElseExpression().accept(this);
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(ConstructorInvocation)
+	 */
+	public boolean visit(ConstructorInvocation node) {
+		buffer.append("this(");
+		for (Iterator it = node.arguments().iterator(); it.hasNext(); ) {
+			Expression e = (Expression) it.next();
+			e.accept(this);
+			if (it.hasNext()) {
+				buffer.append(",");
+			}
+		}
+		buffer.append(");");
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(ContinueStatement)
+	 */
+	public boolean visit(ContinueStatement node) {
+		buffer.append("continue");
+		if (node.getLabel() != null) {
+			buffer.append(" ");
+			node.getLabel().accept(this);
+		}
+		buffer.append(";");
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(DoStatement)
+	 */
+	public boolean visit(DoStatement node) {
+		buffer.append("do ");
+		node.getBody().accept(this);
+		buffer.append(" while (");
+		node.getExpression().accept(this);
+		buffer.append(");");
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(EmptyStatement)
+	 */
+	public boolean visit(EmptyStatement node) {
+		buffer.append(";");
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(ExpressionStatement)
+	 */
+	public boolean visit(ExpressionStatement node) {
+		node.getExpression().accept(this);
+		buffer.append(";");
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(FieldAccess)
+	 */
+	public boolean visit(FieldAccess node) {
+		node.getExpression().accept(this);
+		buffer.append(".");
+		node.getName().accept(this);
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(FieldDeclaration)
+	 */
+	public boolean visit(FieldDeclaration node) {
+		if (node.getJavadoc() != null) {
+			node.getJavadoc().accept(this);
+		}
+		printModifiers(node.getModifiers());
+		node.getType().accept(this);
+		buffer.append(" ");
+		for (Iterator it = node.fragments().iterator(); it.hasNext(); ) {
+			VariableDeclarationFragment f = (VariableDeclarationFragment) it.next();
+			f.accept(this);
+			if (it.hasNext()) {
+				buffer.append(", ");
+			}
+		}
+		buffer.append(";");
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(ForStatement)
+	 */
+	public boolean visit(ForStatement node) {
+		buffer.append("for (");
+		for (Iterator it = node.initializers().iterator(); it.hasNext(); ) {
+			Expression e = (Expression) it.next();
+			e.accept(this);
+		}
+		buffer.append("; ");
+		for (Iterator it = node.updaters().iterator(); it.hasNext(); ) {
+			Expression e = (Expression) it.next();
+			e.accept(this);
+		}
+		buffer.append("; ");
+		if (node.getExpression() != null) {
+			node.getExpression().accept(this);
+		}
+		buffer.append(") ");
+		node.getBody().accept(this);
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(IfStatement)
+	 */
+	public boolean visit(IfStatement node) {
+		buffer.append("if (");
+		node.getExpression().accept(this);
+		buffer.append(") ");
+		node.getThenStatement().accept(this);
+		if (node.getElseStatement() != null) {
+			buffer.append(" else ");
+			node.getElseStatement().accept(this);
+		}
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(ImportDeclaration)
+	 */
+	public boolean visit(ImportDeclaration node) {
+		buffer.append("import ");
+		node.getName().accept(this);
+		if (node.isOnDemand()) {
+			buffer.append(".*");
+		}
+		buffer.append(";");
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(InfixExpression)
+	 */
+	public boolean visit(InfixExpression node) {
+		node.getLeftOperand().accept(this);
+		if (node.getOperator() == InfixExpression.Operator.INSTANCEOF) {
+			buffer.append(" ");
+			buffer.append(node.getOperator().toString());
+			buffer.append(" ");
+		} else {	
+			buffer.append(node.getOperator().toString());
+		}
+		node.getRightOperand().accept(this);
+		for (Iterator it = node.extendedOperands().iterator(); it.hasNext(); ) {
+			buffer.append(node.getOperator().toString());
+			Expression e = (Expression) it.next();
+			e.accept(this);
+		}
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(Initializer)
+	 */
+	public boolean visit(Initializer node) {
+		if (node.getJavadoc() != null) {
+			node.getJavadoc().accept(this);
+		}
+		printModifiers(node.getModifiers());
+		node.getBody().accept(this);
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(Javadoc)
+	 */
+	public boolean visit(Javadoc node) {
+		buffer.append(node.getComment());
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(LabeledStatement)
+	 */
+	public boolean visit(LabeledStatement node) {
+		node.getLabel().accept(this);
+		buffer.append(": ");
+		node.getBody().accept(this);
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(MethodDeclaration)
+	 */
+	public boolean visit(MethodDeclaration node) {
+		if (node.getJavadoc() != null) {
+			node.getJavadoc().accept(this);
+		}
+		printModifiers(node.getModifiers());
+		if (!node.isConstructor()) {
+			node.getReturnType().accept(this);
+			buffer.append(" ");
+		}
+		node.getName().accept(this);
+		buffer.append("(");
+		for (Iterator it = node.parameters().iterator(); it.hasNext(); ) {
+			SingleVariableDeclaration v = (SingleVariableDeclaration) it.next();
+			v.accept(this);
+			if (it.hasNext()) {
+				buffer.append(",");
+			}
+		}
+		buffer.append(")");
+		if (!node.thrownExceptions().isEmpty()) {
+			buffer.append(" throws ");
+			for (Iterator it = node.thrownExceptions().iterator(); it.hasNext(); ) {
+				Name n = (Name) it.next();
+				n.accept(this);
+				if (it.hasNext()) {
+					buffer.append(", ");
+				}
+			}
+			buffer.append(" ");
+		}
+		if (node.getBody() == null) {
+			buffer.append(";");
+		} else {
+			node.getBody().accept(this);
+		}
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(MethodInvocation)
+	 */
+	public boolean visit(MethodInvocation node) {
+		if (node.getExpression() != null) {
+			node.getExpression().accept(this);
+			buffer.append(".");
+		}
+		node.getName().accept(this);
+		buffer.append("(");
+		for (Iterator it = node.arguments().iterator(); it.hasNext(); ) {
+			Expression e = (Expression) it.next();
+			e.accept(this);
+			if (it.hasNext()) {
+				buffer.append(",");
+			}
+		}
+		buffer.append(")");
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(NullLiteral)
+	 */
+	public boolean visit(NullLiteral node) {
+		buffer.append("null");
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(NumberLiteral)
+	 */
+	public boolean visit(NumberLiteral node) {
+		buffer.append(node.getToken());
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(PackageDeclaration)
+	 */
+	public boolean visit(PackageDeclaration node) {
+		buffer.append("package ");
+		node.getName().accept(this);
+		buffer.append(";");
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(ParenthesizedExpression)
+	 */
+	public boolean visit(ParenthesizedExpression node) {
+		buffer.append("(");
+		node.getExpression().accept(this);
+		buffer.append(")");
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(PostfixExpression)
+	 */
+	public boolean visit(PostfixExpression node) {
+		node.getOperand().accept(this);
+		buffer.append(node.getOperator().toString());
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(PrefixExpression)
+	 */
+	public boolean visit(PrefixExpression node) {
+		buffer.append(node.getOperator().toString());
+		node.getOperand().accept(this);
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(PrimitiveType)
+	 */
+	public boolean visit(PrimitiveType node) {
+		buffer.append(node.getPrimitiveTypeCode().toString());
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(QualifiedName)
+	 */
+	public boolean visit(QualifiedName node) {
+		node.getQualifier().accept(this);
+		buffer.append(".");
+		node.getName().accept(this);
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(ReturnStatement)
+	 */
+	public boolean visit(ReturnStatement node) {
+		buffer.append("return");
+		if (node.getExpression() != null) {
+			buffer.append(" ");
+			node.getExpression().accept(this);
+		}
+		buffer.append(";");
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(SimpleName)
+	 */
+	public boolean visit(SimpleName node) {
+		buffer.append(node.getIdentifier());
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(SimpleType)
+	 */
+	public boolean visit(SimpleType node) {
+		return true;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(SingleVariableDeclaration)
+	 */
+	public boolean visit(SingleVariableDeclaration node) {
+		printModifiers(node.getModifiers());
+		node.getType().accept(this);
+		buffer.append(" ");
+		node.getName().accept(this);
+		if (node.getInitializer() != null) {
+			buffer.append("=");
+			node.getInitializer().accept(this);
+		}
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(StringLiteral)
+	 */
+	public boolean visit(StringLiteral node) {
+		buffer.append(node.getEscapedValue());
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(SuperConstructorInvocation)
+	 */
+	public boolean visit(SuperConstructorInvocation node) {
+		if (node.getExpression() != null) {
+			node.getExpression().accept(this);
+			buffer.append(".");
+		}
+		buffer.append("super(");
+		for (Iterator it = node.arguments().iterator(); it.hasNext(); ) {
+			Expression e = (Expression) it.next();
+			e.accept(this);
+			if (it.hasNext()) {
+				buffer.append(",");
+			}
+		}
+		buffer.append(");");
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(SuperFieldAccess)
+	 */
+	public boolean visit(SuperFieldAccess node) {
+		if (node.getQualifier() != null) {
+			node.getQualifier().accept(this);
+			buffer.append(".");
+		}
+		buffer.append("super.");
+		node.getName().accept(this);
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(SuperMethodInvocation)
+	 */
+	public boolean visit(SuperMethodInvocation node) {
+		if (node.getQualifier() != null) {
+			node.getQualifier().accept(this);
+			buffer.append(".");
+		}
+		buffer.append("super.");
+		node.getName().accept(this);
+		buffer.append("(");
+		for (Iterator it = node.arguments().iterator(); it.hasNext(); ) {
+			Expression e = (Expression) it.next();
+			e.accept(this);
+			if (it.hasNext()) {
+				buffer.append(",");
+			}
+		}
+		buffer.append(")");
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(SwitchCase)
+	 */
+	public boolean visit(SwitchCase node) {
+		buffer.append("case ");
+		node.getExpression().accept(this);
+		buffer.append(": ");
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(SwitchStatement)
+	 */
+	public boolean visit(SwitchStatement node) {
+		buffer.append("switch (");
+		node.getExpression().accept(this);
+		buffer.append(") ");
+		buffer.append("{");
+		for (Iterator it = node.statements().iterator(); it.hasNext(); ) {
+			Statement s = (Statement) it.next();
+			s.accept(this);
+		}
+		buffer.append("}");
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(SynchronizedStatement)
+	 */
+	public boolean visit(SynchronizedStatement node) {
+		buffer.append("synchronized (");
+		node.getExpression().accept(this);
+		buffer.append(") ");
+		node.getBody().accept(this);
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(ThisExpression)
+	 */
+	public boolean visit(ThisExpression node) {
+		if (node.getQualifier() != null) {
+			node.getQualifier().accept(this);
+			buffer.append(".");
+		}
+		buffer.append("this");
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(ThrowStatement)
+	 */
+	public boolean visit(ThrowStatement node) {
+		buffer.append("throw ");
+		node.getExpression().accept(this);
+		buffer.append(";");
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(TryStatement)
+	 */
+	public boolean visit(TryStatement node) {
+		buffer.append("try ");
+		node.getBody().accept(this);
+		buffer.append(" ");
+		for (Iterator it = node.catchClauses().iterator(); it.hasNext(); ) {
+			CatchClause cc = (CatchClause) it.next();
+			cc.accept(this);
+		}
+		if (node.getFinally() != null) {
+			node.getFinally().accept(this);
+		}
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(TypeDeclaration)
+	 */
+	public boolean visit(TypeDeclaration node) {
+		if (node.getJavadoc() != null) {
+			node.getJavadoc().accept(this);
+		}
+		printModifiers(node.getModifiers());
+		buffer.append(node.isInterface() ? "interface " : "class ");
+		node.getName().accept(this);
+		buffer.append(" ");
+		if (node.getSuperclass() != null) {
+			buffer.append("extends ");
+			node.getSuperclass().accept(this);
+			buffer.append(" ");
+		}
+		if (!node.superInterfaces().isEmpty()) {
+			buffer.append(node.isInterface() ? "extends " : "implements ");
+			for (Iterator it = node.superInterfaces().iterator(); it.hasNext(); ) {
+				Name n = (Name) it.next();
+				n.accept(this);
+				if (it.hasNext()) {
+					buffer.append(", ");
+				}
+			}
+			buffer.append(" ");
+		}
+		buffer.append("{");
+		for (Iterator it = node.bodyDeclarations().iterator(); it.hasNext(); ) {
+			BodyDeclaration d = (BodyDeclaration) it.next();
+			d.accept(this);
+		}
+		buffer.append("}");
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(TypeDeclarationStatement)
+	 */
+	public boolean visit(TypeDeclarationStatement node) {
+		node.getTypeDeclaration().accept(this);
+		buffer.append(";");
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(TypeLiteral)
+	 */
+	public boolean visit(TypeLiteral node) {
+		node.getType().accept(this);
+		buffer.append(".class");
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(VariableDeclarationExpression)
+	 */
+	public boolean visit(VariableDeclarationExpression node) {
+		printModifiers(node.getModifiers());
+		node.getType().accept(this);
+		buffer.append(" ");
+		for (Iterator it = node.fragments().iterator(); it.hasNext(); ) {
+			VariableDeclarationFragment f = (VariableDeclarationFragment) it.next();
+			f.accept(this);
+			if (it.hasNext()) {
+				buffer.append(", ");
+			}
+		}
+		buffer.append(";");
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(VariableDeclarationFragment)
+	 */
+	public boolean visit(VariableDeclarationFragment node) {
+		node.getName().accept(this);
+		for (int i = 0; i < node.getExtraDimensions(); i++) {
+			buffer.append("[]");
+		}
+		if (node.getInitializer() != null) {
+			buffer.append("=");
+			node.getInitializer().accept(this);
+		}
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(VariableDeclarationStatement)
+	 */
+	public boolean visit(VariableDeclarationStatement node) {
+		printModifiers(node.getModifiers());
+		node.getType().accept(this);
+		buffer.append(" ");
+		for (Iterator it = node.fragments().iterator(); it.hasNext(); ) {
+			VariableDeclarationFragment f = (VariableDeclarationFragment) it.next();
+			f.accept(this);
+			if (it.hasNext()) {
+				buffer.append(", ");
+			}
+		}
+		buffer.append(";");
+		return false;
+	}
+
+	/*
+	 * @see ASTVisitor#visit(WhileStatement)
+	 */
+	public boolean visit(WhileStatement node) {
+		buffer.append("while (");
+		node.getExpression().accept(this);
+		buffer.append(") ");
+		node.getBody().accept(this);
+		return false;
+	}
+
+}
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeDeclaration.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeDeclaration.java
index 797f6af..725b50c 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeDeclaration.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeDeclaration.java
@@ -471,6 +471,24 @@ public class TypeDeclaration extends BodyDeclaration {
 	/* (omit javadoc for this method)
 	 * Method declared on ASTNode.
 	 */
+	void appendDebugString(StringBuffer buffer) {
+		buffer.append("TypeDeclaration[");
+		buffer.append(isInterface() ? "interface " : "class ");
+		buffer.append(getName().getIdentifier());
+		buffer.append(" ");
+		for (Iterator it = bodyDeclarations().iterator(); it.hasNext(); ) {
+			BodyDeclaration d = (BodyDeclaration) it.next();
+			d.appendDebugString(buffer);
+			if (it.hasNext()) {
+				buffer.append(";");
+			}
+		}
+		buffer.append("]");
+	}
+		
+	/* (omit javadoc for this method)
+	 * Method declared on ASTNode.
+	 */
 	int memSize() {
 		return super.memSize() + 6 * 4;
 	}

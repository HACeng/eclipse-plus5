commit 1fd3c9fc562cda07c874ee80cb4f5d32730433f0
Author: Stephan Herrmann <stephan.herrmann@berlin.de>
Date:   Sun Mar 9 13:57:31 2014 +0100

    Bug 392245 - [1.8][compiler][null] Define whether / how
    @NonNullByDefault applies to TYPE_USE locations

137	0	org.eclipse.jdt.annotation/src/org/eclipse/jdt/annotation/DefaultLocation.java
32	27	org.eclipse.jdt.annotation/src/org/eclipse/jdt/annotation/NonNullByDefault.java
2	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java
9	3	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java
25	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
-	-	org.eclipse.jdt.core.tests.compiler/workspace/Test374129_1.8.jar
-	-	org.eclipse.jdt.core.tests.compiler/workspace/Test388281_1.8.jar
3	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
16	6	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java
6	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java
5	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
2	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
diff --git a/org.eclipse.jdt.annotation/src/org/eclipse/jdt/annotation/DefaultLocation.java b/org.eclipse.jdt.annotation/src/org/eclipse/jdt/annotation/DefaultLocation.java
new file mode 100644
index 0000000..fbeea9e
--- /dev/null
+++ b/org.eclipse.jdt.annotation/src/org/eclipse/jdt/annotation/DefaultLocation.java
@@ -0,0 +1,137 @@
+/*******************************************************************************
+ * Copyright (c) 2014 Stephan Herrmann and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
+ * Contributors:
+ *     Stephan Herrmann - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.jdt.annotation;
+
+/**
+ * Locations that can be affected by a {@link NonNullByDefault} annotation.
+ * Each constant of this enum describes a specific kind of type use.
+ * Wildcards and the use of type variables are always excluded from {@link NonNullByDefault}.
+ * @since 2.0
+ */
+public enum DefaultLocation {
+	
+	/**
+	 * Defines that a given {@link NonNullByDefault} annotation should affect all unannotated
+	 * parameters of any method or constructor within the scope of the annotated declaration.
+	 * 
+	 * <h2>Example</h2>
+	 * <pre> @NonNullByDefault(PARAMETER)
+	 * interface X {
+	 *     void print(Number n);
+	 * }</pre>
+	 * <p>
+	 * Here <code>Number</code> will be interpreted as <code>@NonNull Number</code>.
+	 * </p>
+	 */
+	PARAMETER,
+	
+	/**
+	 * Defines that a given {@link NonNullByDefault} annotation should affect all unannotated
+	 * method return types within the scope of the annotated declaration.
+	 * 
+	 * <h2>Example</h2>
+	 * <pre> @NonNullByDefault(RETURN_TYPE)
+	 * interface X {
+	 *     Number getNumber();
+	 * }</pre>
+	 * <p>
+	 * Here <code>Number</code> will be interpreted as <code>@NonNull Number</code>.
+	 * </p>
+	 */
+	RETURN_TYPE,
+	
+	/**
+	 * Defines that a given {@link NonNullByDefault} annotation should affect all unannotated
+	 * field types within the scope of the annotated declaration.
+	 * 
+	 * <h2>Example</h2>
+	 * <pre> @NonNullByDefault(FIELD)
+	 * class X {
+	 *     Number number = Integer.MAX_VALUE;
+	 * }</pre>
+	 * <p>
+	 * Here <code>Number</code> will be interpreted as <code>@NonNull Number</code>.
+	 * </p>
+	 */
+	FIELD,
+	
+	/**
+	 * Defines that a given {@link NonNullByDefault} annotation should affect all unannotated
+	 * type parameter declarations within the scope of the annotated declaration.
+	 * 
+	 * <h2>Example</h2>
+	 * <pre> @NonNullByDefault(TYPE_PARAMETER)
+	 * class X {
+	 *     &lt;T&gt; T identity(T t) { return t; }
+	 * }</pre>
+	 * <p>
+	 * Here <code>&lt;T&gt;</code> will be interpreted as <code>&lt;@NonNull T&gt;</code>.
+	 * </p>
+	 */
+	TYPE_PARAMETER,
+	
+	/**
+	 * Defines that a given {@link NonNullByDefault} annotation should affect all unannotated
+	 * explicit type bounds within the scope of the annotated declaration.
+	 * 
+	 * <h2>Example</h2>
+	 * <pre> @NonNullByDefault(TYPE_BOUND)
+	 * interface X {
+	 *     &lt;T extends Number&gt; void process(T t, List&lt;? super Number&gt; l);
+	 * }</pre>
+	 * <p>
+	 * Here both occurrences of <code>Number</code> will be interpreted as <code>@NonNull Number</code>.
+	 * </p>
+	 */
+	TYPE_BOUND,
+	
+	/**
+	 * Defines that a given {@link NonNullByDefault} annotation should affect all unannotated
+	 * type arguments within the scope of the annotated declaration (except wildcards and
+	 * type variables).
+	 * 
+	 * <h2>Example</h2>
+	 * <pre> @NonNullByDefault(TYPE_ARGUMENT)
+	 * interface X&lt;T&gt; {
+	 *     void process(List&lt;T&gt; tl, List&lt;Number&gt; nl);
+	 * }</pre>
+	 * <p>
+	 * Here <code>Number</code> will be interpreted as <code>@NonNull Number</code>,
+	 * but the use of type variable <code>T</code> is not affected.
+	 * </p>
+	 */
+	TYPE_ARGUMENT,
+
+	/**
+	 * Defines that a given {@link NonNullByDefault} annotation should affect all unannotated
+	 * array components within the scope of the annotated declaration.
+	 * 
+	 * <h2>Example</h2>
+	 * <pre> @NonNullByDefault(ARRAY_CONTENTS)
+	 * interface X {
+	 *     Number[] n1;
+	 *     Number[][] n2;
+	 * }</pre>
+	 * <p>
+	 * These declarations are interpreted as:
+	 * <pre>    &#64;NonNull Number [] n1;
+	 *    &#64;NonNull Number [] @NonNull[] n2;</pre>
+	 * I.e., both fields can still be <code>null</code> (see the unannotated left-most pair
+	 * of brackets) but none of the <em>contents</em> of these arrays is allowed to be 
+	 * <code>null</code> (at any dimension).
+	 * </p>
+	 */
+	ARRAY_CONTENTS
+}
diff --git a/org.eclipse.jdt.annotation/src/org/eclipse/jdt/annotation/NonNullByDefault.java b/org.eclipse.jdt.annotation/src/org/eclipse/jdt/annotation/NonNullByDefault.java
index 1e81b05..da2c75e 100644
--- a/org.eclipse.jdt.annotation/src/org/eclipse/jdt/annotation/NonNullByDefault.java
+++ b/org.eclipse.jdt.annotation/src/org/eclipse/jdt/annotation/NonNullByDefault.java
@@ -1,20 +1,22 @@
 /*******************************************************************************
- * Copyright (c) 2011, 2013 Stephan Herrmann and others.
+ * Copyright (c) 2011, 2014 Stephan Herrmann and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *     Stephan Herrmann - initial API and implementation
  *     IBM Corporation - bug fixes
  *******************************************************************************/
 package org.eclipse.jdt.annotation;
 
-import static java.lang.annotation.ElementType.CONSTRUCTOR;
-import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.ElementType.PACKAGE;
-import static java.lang.annotation.ElementType.TYPE;
+import java.lang.annotation.ElementType;
+import static org.eclipse.jdt.annotation.DefaultLocation.*;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
@@ -22,38 +24,41 @@ import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
  
 /**
- * This annotation can be applied to a package, type, method or constructor in order to 
- * define that contained entities for which a null annotation is otherwise lacking
- * should be considered as {@link NonNull @NonNull}. Entities affected by
- * <code>@NonNullByDefault</code> are:
- * <ul>
- * <li>method return values</li>
- * <li>parameters of a method or constructor</li>
- * <li>fields.</li>
- * </ul>
- * Local variables are <em>not</em> affected.
+ * Applying this annotation to a declaration has the effect that type references,
+ * which are contained in the declaration, and for which a null annotation is otherwise lacking,
+ * should be considered as {@link NonNull @NonNull}.
  * <dl>
- * <dt>Canceling a default</dt>
- * <dd>By using a <code>@NonNullByDefault</code> annotation with the argument <code>false</code>,
- * a default from any enclosing scope can be canceled for the element being annotated.
+ * <dt>Locations</dt>
+ * <dd>This annotation is permitted for these declarations:
+ * {@link ElementType#PACKAGE PACKAGE}, {@link ElementType#TYPE TYPE}, 
+ * {@link ElementType#METHOD METHOD}, {@link ElementType#CONSTRUCTOR CONSTRUCTOR},
+ * {@link ElementType#FIELD FIELD}, {@link ElementType#LOCAL_VARIABLE LOCAL_VARIABLE}.</dd>
+ * <dt>Fine tuning</dt>
+ * <dd>The exact effect is further controlled by the attribute {@link #value}, specifying what 
+ * kinds of locations within the given declaration will be affected. See {@link DefaultLocation}
+ * for the meaning of the available values.</dd>
  * <dt>Nested defaults</dt>
- * <dd>If a <code>@NonNullByDefault</code>
- * annotation is used within the scope of another <code>@NonNullByDefault</code>
- * annotation, the innermost annotation defines the
- * default applicable at any given position (depending on the parameter {@link #value()}).</dd>
+ * <dd>If this annotation is applied to a declaration that is already affected by the same
+ * annotation at an enclosing scope, the inner annotation <em>replaces</em> the effect of the
+ * outer annotation for the scope of the inner declaration.</dd>
+ * <dt>Canceling a default</dt>
+ * <dd>In particular, specifying an empty value (<code>{}</code>) for the {@link #value}
+ * attribute has the effect of canceling any null defaults that might be defined for any
+ * enclosing scope.</dd>
  * </dl>
+ * <p>
  * Note that for applying an annotation to a package, a file by the name
  * <code>package-info.java</code> is used.
- * 
+ * </p>
  * @since 1.0
  */
 @Documented
 @Retention(RetentionPolicy.CLASS)
-@Target({ PACKAGE, TYPE, METHOD, CONSTRUCTOR })
+@Target({ ElementType.PACKAGE, ElementType.TYPE, ElementType.METHOD, ElementType.CONSTRUCTOR, ElementType.FIELD, ElementType.LOCAL_VARIABLE })
 public @interface NonNullByDefault {
 	/**
-	 * When parameterized with <code>false</code>, the annotation specifies that the current element should not apply
-	 * any default to un-annotated types.
+	 * Specifies the set of locations within the annotated declaration that should be affected by the nonnull default.
+	 * @since 2.0
 	 */
-	boolean value() default true;
+	DefaultLocation[] value() default { PARAMETER, RETURN_TYPE, FIELD, TYPE_BOUND, TYPE_ARGUMENT };
 }
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java
index 028e0bc..7fb53eb 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java
@@ -823,6 +823,7 @@ public void test011_problem_categories() {
 		expectedProblemAttributes.put("NonGenericConstructor", new ProblemAttributes(CategorizedProblem.CAT_TYPE));
 		expectedProblemAttributes.put("NonGenericMethod", new ProblemAttributes(CategorizedProblem.CAT_TYPE));
 		expectedProblemAttributes.put("NonGenericType", new ProblemAttributes(CategorizedProblem.CAT_TYPE));
+		expectedProblemAttributes.put("NonNullDefaultDetailIsNotEvaluated", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));
 		expectedProblemAttributes.put("NonNullExpressionComparisonYieldsFalse", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));
 		expectedProblemAttributes.put("NonNullMessageSendComparisonYieldsFalse", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));
 		expectedProblemAttributes.put("NonNullSpecdFieldComparisonYieldsFalse", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));
@@ -1639,6 +1640,7 @@ public void test012_compiler_problems_tuning() {
 		expectedProblemAttributes.put("NonGenericConstructor", SKIP);
 		expectedProblemAttributes.put("NonGenericMethod", SKIP);
 		expectedProblemAttributes.put("NonGenericType", SKIP);
+		expectedProblemAttributes.put("NonNullDefaultDetailIsNotEvaluated", SKIP);
 		expectedProblemAttributes.put("NonNullExpressionComparisonYieldsFalse", new ProblemAttributes(JavaCore.COMPILER_PB_REDUNDANT_NULL_CHECK));
 		expectedProblemAttributes.put("NonNullSpecdFieldComparisonYieldsFalse", new ProblemAttributes(JavaCore.COMPILER_PB_REDUNDANT_NULL_CHECK));
 		expectedProblemAttributes.put("NonNullLocalVariableComparisonYieldsFalse", new ProblemAttributes(JavaCore.COMPILER_PB_REDUNDANT_NULL_CHECK));
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java
index b962cbe..ba135b7 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java
@@ -116,6 +116,12 @@ String targetTypeUseIfAvailable() {
 				: "";
 }
 
+String cancenNonNullByDefault() {
+	return this.complianceLevel < ClassFileConstants.JDK1_8
+				? "    @NonNullByDefault(false)\n"
+				: "    @NonNullByDefault({})\n";
+}
+
 /**
  * @deprecated
  */
@@ -2613,7 +2619,7 @@ public void test_default_nullness_008() {
 			"@NonNullByDefault\n" +
 			"public class Y extends p1.X {\n" +
 			"    @Override\n" +
-			"    @NonNullByDefault(false)\n" +
+			cancenNonNullByDefault() +
 			"    protected Object getObject(Object o) {\n" +
 			"        if (o.toString().length() == 0)\n" + // dereference without a warning
 			"	        return null;\n" + // return null without a warning
@@ -2643,7 +2649,7 @@ public void test_default_nullness_009() {
 			"import org.eclipse.jdt.annotation.*;\n" +
 			"@NonNullByDefault\n" +
 			"public class Y { \n" +
-			"    @NonNullByDefault(false)\n" +
+			cancenNonNullByDefault() +
 			"    static class Z extends p1.X {\n" +
 			"        @Override\n" +
 			"        protected Object getObject(Object o) {\n" +
@@ -5579,7 +5585,7 @@ public interface II extends i.I {
 
 package i2;
 import org.eclipse.jdt.annotation.NonNullByDefault;
-@NonNullByDefault(false)
+@NonNullByDefault({})
 public interface I2A {
     Object m1(Object a1);
     String m2(Object a2);
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
index 3929201..213cbab 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
@@ -4303,6 +4303,31 @@ public void test429387() {
 		"IntStreamy cannot be resolved\n" + 
 		"----------\n");
 }
+public void testBug392245_tmp_warning() {
+	runNegativeTestWithLibs(
+		new String[] {
+			"X.java",
+			"import org.eclipse.jdt.annotation.*;\n" +
+			"@NonNullByDefault(DefaultLocation.TYPE_ARGUMENT)\n" +
+			"public class X {\n" +
+			"	void m(Object o) {}\n" +
+			"	void test() {\n" +
+			"		m(null); // ERR\n" + // since @NonNullByDefault is still interpreted as all or nothing
+			"	}\n" +
+			"}\n"
+		},
+		"----------\n" + 
+		"1. WARNING in X.java (at line 2)\n" + 
+		"	@NonNullByDefault(DefaultLocation.TYPE_ARGUMENT)\n" + 
+		"	                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
+		"Arguments controling the details of the nullness default are not yet evaluated by the analysis.\n" + 
+		"----------\n" + 
+		"2. ERROR in X.java (at line 6)\n" + 
+		"	m(null); // ERR\n" + 
+		"	  ^^^^\n" + 
+		"Null type mismatch: required \'@NonNull Object\' but the provided value is null\n" + 
+		"----------\n");
+}
 public void testBug429403() {
 	runNegativeTestWithLibs(
 		new String[] {
diff --git a/org.eclipse.jdt.core.tests.compiler/workspace/Test374129_1.8.jar b/org.eclipse.jdt.core.tests.compiler/workspace/Test374129_1.8.jar
index fbb65fb..815848f 100644
Binary files a/org.eclipse.jdt.core.tests.compiler/workspace/Test374129_1.8.jar and b/org.eclipse.jdt.core.tests.compiler/workspace/Test374129_1.8.jar differ
diff --git a/org.eclipse.jdt.core.tests.compiler/workspace/Test388281_1.8.jar b/org.eclipse.jdt.core.tests.compiler/workspace/Test388281_1.8.jar
index 9d36658..661301c 100644
Binary files a/org.eclipse.jdt.core.tests.compiler/workspace/Test388281_1.8.jar and b/org.eclipse.jdt.core.tests.compiler/workspace/Test388281_1.8.jar differ
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
index 2a95e04..5f2d9b3 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
@@ -193,6 +193,7 @@
  *									ContradictoryNullAnnotationsOnBound
  *									UnsafeNullnessCast
  *									ContradictoryNullAnnotationsInferred
+ *									NonNullDefaultDetailIsNotEvaluated
  *      Jesper S Moller  - added the following constants
  *									TargetTypeNotAFunctionalInterface
  *									OuterLocalMustBeEffectivelyFinal
@@ -1779,6 +1780,8 @@ void setSourceStart(int sourceStart);
 	int ContradictoryNullAnnotationsInferred = Internal + 966;
 	/** @since 3.9 BETA_JAVA8 */
 	int UnsafeNullnessCast = Internal + 967;
+	/** @since 3.9 BETA_JAVA8 */
+	int NonNullDefaultDetailIsNotEvaluated = 968;
 
 	// Java 8 work
 	/** @since 3.9 BETA_JAVA8 */
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java
index 80be345..79405c1 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Annotation.java
@@ -21,6 +21,7 @@
  *								Bug 415850 - [1.8] Ensure RunJDTCoreTests can cope with null annotations enabled
  *								Bug 417295 - [1.8[[null] Massage type annotated null analysis to gel well with deep encoded type bindings.
  *								Bug 424728 - [1.8][null] Unexpected error: The nullness annotation 'XXXX' is not applicable at this location
+ *								Bug 392245 - [1.8][compiler][null] Define whether / how @NonNullByDefault applies to TYPE_USE locations
  *        Andy Clement (GoPivotal, Inc) aclement@gopivotal.com - Contributions for
  *                          Bug 383624 - [1.8][compiler] Revive code generation support for type annotations (from Olivier's work)
  *                          Bug 409517 - [1.8][compiler] Type annotation problems on more elaborate array references
@@ -391,12 +392,21 @@ public abstract class Annotation extends Expression {
 				tagBits |= TagBits.AnnotationNonNull;
 				break;
 			case TypeIds.T_ConfiguredAnnotationNonNullByDefault :
-				if (valueAttribute != null 
-					&& valueAttribute.value instanceof FalseLiteral) 
-				{
-					// parameter 'false' means: this annotation cancels any defaults
-					tagBits |= TagBits.AnnotationNullUnspecifiedByDefault;
-					break;
+				if (valueAttribute != null) {
+					if (valueAttribute.value instanceof FalseLiteral) {
+						// parameter 'false' means: this annotation cancels any defaults
+						tagBits |= TagBits.AnnotationNullUnspecifiedByDefault;
+						break;
+					} else if (valueAttribute.compilerElementPair != null) {
+						Object value = valueAttribute.compilerElementPair.value;
+						if (value instanceof Object[] && ((Object[])value).length == 0) {
+							// empty parameter means: this annotation cancels any defaults
+							tagBits |= TagBits.AnnotationNullUnspecifiedByDefault;
+							break;
+						} else {
+							scope.problemReporter().nonNullDefaultDetailNotEvaluated(valueAttribute);
+						}
+					}
 				}
 				tagBits |= TagBits.AnnotationNonNullByDefault;
 				break;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java
index ac42be3..3eef017 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java
@@ -27,6 +27,7 @@
  *								Bug 415850 - [1.8] Ensure RunJDTCoreTests can cope with null annotations enabled
  *								Bug 417295 - [1.8[[null] Massage type annotated null analysis to gel well with deep encoded type bindings.
  *								Bug 427199 - [1.8][resource] avoid resource leak warnings on Streams that have no resource
+ *								Bug 392245 - [1.8][compiler][null] Define whether / how @NonNullByDefault applies to TYPE_USE locations
  *    Jesper Steen Moller - Contributions for
  *								Bug 412150 [1.8] [compiler] Enable reflected parameter names during annotation processing
  *								Bug 412153 - [1.8][compiler] Check validity of annotations which may be repeatable
@@ -1602,6 +1603,11 @@ private void scanTypeForNullDefaultAnnotation(IBinaryType binaryType, PackageBin
 						annotationBit = TagBits.AnnotationNullUnspecifiedByDefault;
 						nullness = NULL_UNSPECIFIED_BY_DEFAULT;
 						break;
+					} else if (value instanceof Object[] && ((Object[])value).length == 0) {
+						// parameter is '{}': this means we cancel defaults from outer scopes:
+						annotationBit = TagBits.AnnotationNullUnspecifiedByDefault;
+						nullness = NULL_UNSPECIFIED_BY_DEFAULT;
+						break;
 					}
 				}
 				annotationBit = TagBits.AnnotationNonNullByDefault;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
index 58a399a..a827edd 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
@@ -50,6 +50,7 @@
  *								Bug 428294 - [1.8][compiler] Type mismatch: cannot convert from List<Object> to Collection<Object[]>
  *								Bug 428366 - [1.8] [compiler] The method valueAt(ObservableList<Object>, int) is ambiguous for the type Bindings
  *								Bug 416190 - [1.8][null] detect incompatible overrides due to null type annotations
+ *								Bug 392245 - [1.8][compiler][null] Define whether / how @NonNullByDefault applies to TYPE_USE locations
  *      Jesper S Moller <jesper@selskabet.org> -  Contributions for
  *								bug 382701 - [1.8][compiler] Implement semantic analysis of Lambda expressions & Reference expression
  *								bug 382721 - [1.8][compiler] Effectively final variables needs special treatment
@@ -9443,6 +9444,10 @@ public void nullDefaultAnnotationIsRedundant(ASTNode location, Annotation[] anno
 	this.handle(problemId, args, shortArgs, start, end);
 }
 
+public void nonNullDefaultDetailNotEvaluated(ASTNode location) {
+	this.handle(IProblem.NonNullDefaultDetailIsNotEvaluated, NoArgument, NoArgument, ProblemSeverities.Warning, location.sourceStart, location.sourceEnd);
+}
+
 public void contradictoryNullAnnotations(Annotation annotation) {
 	contradictoryNullAnnotations(annotation.sourceStart, annotation.sourceEnd);
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
index 43ca0ea..b9382c0 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
@@ -40,6 +40,7 @@
 #							Bug 424637 - [1.8][compiler][null] AIOOB in ReferenceExpression.resolveType with a method reference to Files::walk
 #							Bug 418743 - [1.8][null] contradictory annotations on invocation of generic method not reported
 #							Bug 416190 - [1.8][null] detect incompatible overrides due to null type annotations
+#							Bug 392245 - [1.8][compiler][null] Define whether / how @NonNullByDefault applies to TYPE_USE locations
 #		Jesper S Moller <jesper@selskabet.org> - Contributions for
 #							bug 382701 - [1.8][compiler] Implement semantic analysis of Lambda expressions & Reference expression
 #							bug 384567 - [1.5][compiler] Compiler accepts illegal modifiers on package declaration
@@ -819,6 +820,7 @@
 965 = This nullness annotation conflicts with a ''@{0}'' annotation which is effective on the same type parameter 
 966 = Contradictory null annotations: method was inferred as ''{2} {3}({4})'', but only one of ''@{0}'' and ''@{1}'' can be effective at any location
 967 = Null type safety: Unchecked cast from {0} to {1}
+968 = Arguments controling the details of the nullness default are not yet evaluated by the analysis.
 
 # Java 8
 1001 = Syntax error, modifiers and annotations are not allowed for the lambda parameter {0} as its type is elided

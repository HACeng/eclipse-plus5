commit 243c120aa6f1012839cab61fb3a3ec35b618eb09
Author: Manoj Palat <manpalat@in.ibm.com>
Date:   Mon Jun 5 14:12:14 2017 +0530

    Added isOpen field for Bug 517269: [1.9][compiler]Module Binding - open
    field to be added, uses, services and implementations to be populated

6	0	org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/BasicModule.java
4	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ModuleInfo.java
1	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/env/IModule.java
2	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ModuleBinding.java
8	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ModuleEnvironment.java
12	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ModuleDescriptionInfo.java
6	0	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ModuleInfo.java
10	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/BasicModule.java
diff --git a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/BasicModule.java b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/BasicModule.java
index be313fe..fa0b250 100644
--- a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/BasicModule.java
+++ b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/BasicModule.java
@@ -93,6 +93,7 @@ public class BasicModule implements IModule {
 	}
 
 	boolean isAutomodule;
+	private boolean isOpen = false;
 	char[] name;
 	IModule.IModuleReference[] requires;
 	IModule.IPackageExport[] exports;
@@ -148,6 +149,7 @@ public class BasicModule implements IModule {
 			this.opens = new PackageExportImpl[0];
 		}
 		this.isAutomodule = false; // Just to be explicit
+		this.isOpen = descriptor.isOpen();
 	}
 	public BasicModule(char[] name, boolean isAuto) {
 		this.name = name;
@@ -183,6 +185,10 @@ public class BasicModule implements IModule {
 	public boolean isAutomatic() {
 		return this.isAutomodule;
 	}
+	@Override
+	public boolean isOpen() {
+		return this.isOpen;
+	}
 	public void addReads(char[] modName) {
 		Predicate<char[]> shouldAdd = m -> {
 			return Stream.of(this.requires).map(ref -> ref.name()).noneMatch(n -> CharOperation.equals(modName, n));
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ModuleInfo.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ModuleInfo.java
index 61a0328..72019ba 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ModuleInfo.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ModuleInfo.java
@@ -38,6 +38,10 @@ public class ModuleInfo extends ClassFileStruct implements IModule {
 	char[][] uses;
 	IModule.IService[] provides;
 
+	@Override
+	public boolean isOpen() {
+		return (this.flags & ClassFileConstants.ACC_OPEN) != 0;
+	}
 	public int requiresCount() {
 		return this.requiresCount;
 	}
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/env/IModule.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/env/IModule.java
index a0dd12c..12e5b7f 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/env/IModule.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/env/IModule.java
@@ -77,4 +77,5 @@ public interface IModule {
 	public default boolean isAutomatic() {
 		return false;
 	}
+	public abstract boolean isOpen();
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ModuleBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ModuleBinding.java
index b23f6c8..c312975 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ModuleBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ModuleBinding.java
@@ -57,6 +57,7 @@ public class ModuleBinding extends Binding {
 			return true;
 		}
 	}
+	public boolean isOpen;
 	public char[] moduleName;
 	public IModuleReference[] requires;
 	public IPackageExport[] exports;
@@ -83,6 +84,7 @@ public class ModuleBinding extends Binding {
 		this.exportedPackages = new HashtableOfPackage(0);
 	}
 	public ModuleBinding(IModule module, LookupEnvironment environment) {
+		this.isOpen = module.isOpen();
 		this.moduleName = module.name();
 		IModule decl = module;
 		this.requires = decl.requires();
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ModuleEnvironment.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ModuleEnvironment.java
index e3e42cc..9fc903a 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ModuleEnvironment.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ModuleEnvironment.java
@@ -44,6 +44,11 @@ public abstract class ModuleEnvironment implements IModuleAwareNameEnvironment {
 		}
 
 		@Override
+		public boolean isOpen() {
+			return false;
+		}
+
+		@Override
 		public char[] name() {
 			//
 			return UNNAMED;
@@ -112,6 +117,9 @@ public abstract class ModuleEnvironment implements IModuleAwareNameEnvironment {
 		public boolean isAutomatic() {
 			return true;
 		}
+		public boolean isOpen() {
+			return false;
+		}
 	}
 	public static IModule[] UNNAMED_MODULE_ARRAY = new IModule[]{UNNAMED_MODULE};
 
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ModuleDescriptionInfo.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ModuleDescriptionInfo.java
index 99aec49..d0e058a 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ModuleDescriptionInfo.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ModuleDescriptionInfo.java
@@ -44,6 +44,7 @@ public class ModuleDescriptionInfo extends AnnotatableInfo implements IModule {
 	char[][] usedServices;
 	IModuleDescription handle;
 	char[] name;
+	boolean isOpen = false;
 
 	static class ModuleReferenceInfo extends MemberElementInfo implements IModule.IModuleReference {
 		char[] name;
@@ -110,6 +111,7 @@ public class ModuleDescriptionInfo extends AnnotatableInfo implements IModule {
 	public static ModuleDescriptionInfo createModule(IModule module) {
 		ModuleDescriptionInfo mod = new ModuleDescriptionInfo();
 		mod.name = module.name();
+		mod.isOpen = module.isOpen();
 		if (module.requires().length > 0) {
 			IModuleReference[] refs = module.requires();
 			mod.requires = new ModuleReferenceInfo[refs.length];
@@ -200,6 +202,7 @@ public class ModuleDescriptionInfo extends AnnotatableInfo implements IModule {
 	public static ModuleDescriptionInfo createModule(ModuleDeclaration module) {
 		ModuleDescriptionInfo mod = new ModuleDescriptionInfo();
 		mod.name = module.moduleName;
+		mod.isOpen = module.isOpen();
 		if (module.requiresCount > 0) {
 			RequiresStatement[] refs = module.requires;
 			mod.requires = new ModuleReferenceInfo[refs.length];
@@ -297,6 +300,11 @@ public class ModuleDescriptionInfo extends AnnotatableInfo implements IModule {
 	}
 
 	@Override
+	public boolean isOpen() {
+		return this.isOpen;
+	}
+
+	@Override
 	public char[] name() {
 		return this.name;
 	}
@@ -331,7 +339,10 @@ public class ModuleDescriptionInfo extends AnnotatableInfo implements IModule {
 		return buffer.toString();
 	}
 	protected void toStringContent(StringBuffer buffer) {
-		buffer.append("\nmodule "); //$NON-NLS-1$
+		buffer.append("\n"); //$NON-NLS-1$
+		if (this.isOpen())
+			buffer.append("open "); //$NON-NLS-1$
+		buffer.append("module "); //$NON-NLS-1$
 		buffer.append(this.name).append(' ');
 		buffer.append('{').append('\n');
 		if (this.requires != null && this.requires.length > 0) {
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ModuleInfo.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ModuleInfo.java
index 579d2f3..59f1e21 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ModuleInfo.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ModuleInfo.java
@@ -56,6 +56,7 @@ public class ModuleInfo extends SourceTypeElementInfo implements IModule {
 		}
 	}
 	char[] name;
+	boolean isOpen = false;
 	ModuleReferenceImpl[] requires;
 	PackageExportImpl[] exports;
 	char[][] uses;
@@ -63,12 +64,17 @@ public class ModuleInfo extends SourceTypeElementInfo implements IModule {
 	PackageExportImpl[] opens;
 
 	@Override
+	public boolean isOpen() {
+		return this.isOpen;
+	}
+	@Override
 	public char[] name() {
 		return this.name;
 	}
 	public static ModuleInfo createModule(ModuleDeclaration module) {
 		ModuleInfo mod = new ModuleInfo();
 		mod.name = module.moduleName;
+		mod.isOpen = module.isOpen();
 		if (module.requiresCount > 0) {
 			RequiresStatement[] refs = module.requires;
 			mod.requires = new ModuleReferenceImpl[refs.length];
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/BasicModule.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/BasicModule.java
index 17d7086..bdff71e 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/BasicModule.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/BasicModule.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2016 IBM Corporation and others.
+ * Copyright (c) 2016, 2017 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -76,6 +76,7 @@ public class BasicModule implements IModule {
 		}
 	}
 
+	Boolean isOpen = null;
 	char[] name;
 	IModule.IModuleReference[] requires;
 	IModule.IPackageExport[] exports;
@@ -209,4 +210,12 @@ public class BasicModule implements IModule {
 		}
 		buffer.append('\n').append('}').toString();
 	}
+	@Override
+	public boolean isOpen() {
+		if (this.isOpen == null) {
+			IModule module = this.root != null ? this.root.getModule() : null;
+			this.isOpen = module != null ? module.isOpen() : Boolean.FALSE;
+		}
+		return this.isOpen;
+	}
 }
commit eda21b35f9c2448dc52766f9b2303fc96f610e69
Author: Manoj Palat <manpalat@in.ibm.com>
Date:   Tue Jun 13 22:59:33 2017 +0530

    Fix for bug 517269 [1.9][compiler]Module Binding - open field to be
    added, uses, services and implementations to be populated (plus dom part
    bug 515875)
    
    Change-Id: I185785e9854197ff92eef667537b3d9c38009183

82	8	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter9Test.java
50	12	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ModuleBinding.java
6	7	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IModuleBinding.java
16	9	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ModuleBinding.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter9Test.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter9Test.java
index 30b609f..2a9efa3 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter9Test.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter9Test.java
@@ -23,7 +23,6 @@ import org.eclipse.jdt.internal.core.JrtPackageFragmentRoot;
 import org.eclipse.jdt.internal.core.SourceModule;
 
 import java.util.List;
-
 import org.eclipse.core.runtime.CoreException;
 import org.eclipse.core.runtime.Path;
 import org.eclipse.jdt.core.ICompilationUnit;
@@ -440,16 +439,23 @@ public class ASTConverter9Test extends ConverterTestSetup {
 			IPackageBinding pack22 = secPacks[0];
 			assertTrue("Incorrect Package", pack22.getName().equals("pack22"));
 
-/*			ITypeBinding[] services = moduleBinding.getServices();
+			ITypeBinding[] uses = moduleBinding.getUses();
+			assertTrue("uses null", uses != null);
+			assertTrue("Incorrect number of uses", uses.length == 1);
+			assertTrue("Incorrect uses", uses[0].getQualifiedName().equals("pack22.I22"));
+
+			IModuleBinding.Service[] services = moduleBinding.getServices();
 			assertTrue("services null", services != null);
 			assertTrue("Incorrect number of services", services.length == 1);
-			assertTrue("Incorrect service", services[0].getName().equals("pack22.I22"));
+			for (IModuleBinding.Service s : services) {
+				assertTrue("Incorrect service", s.service.getQualifiedName().equals("pack22.I22"));
+				ITypeBinding[] implementations = s.implementations;
+				assertTrue("implementations null", implementations != null);
+				assertTrue("Incorrect number of implementations", implementations.length == 1);
+				assertTrue("Incorrect implementation", implementations[0].getQualifiedName().equals("pack1.X11"));
+			}
 
-			ITypeBinding[] implementations = moduleBinding.getImplementations();
-			assertTrue("implementations null", implementations != null);
-			assertTrue("Incorrect number of implementations", implementations.length == 1);
-			assertTrue("Incorrect implementation", implementations[0].getName().equals("pack1.X11"));
-*/		}
+		}
 		finally {
 			deleteProject("ConverterTests9");
 			deleteProject("second");
@@ -573,6 +579,74 @@ public class ASTConverter9Test extends ConverterTestSetup {
 			deleteProject("second");
 		}
 	}
+	public void testBug515875_005() throws Exception {
+		try {
+
+			IJavaProject project1 = createJavaProject("ConverterTests9", new String[] {"src"}, new String[] {"JCL18_LIB"}, "bin", "9");
+			project1.open(null);
+			addClasspathEntry(project1, JavaCore.newContainerEntry(new Path("org.eclipse.jdt.MODULE_PATH")));
+			String fileContent =
+				"module first {\n" +
+				"    requires second;\n" +
+				"    provides pack22.I22 with pack1.X11, pack1.X12;\n" +
+				"}";
+			createFile("/ConverterTests9/src/module-info.java",	fileContent);
+			createFolder("/ConverterTests9/src/pack1");
+			createFile("/ConverterTests9/src/pack1/X11.java",
+					"package pack1;\n" +
+					"public class X11 implements pack22.I22{}\n");
+			createFile("/ConverterTests9/src/pack1/X12.java",
+					"package pack1;\n" +
+					"public class X12 implements pack22.I22{}\n");
+
+			IJavaProject project2 = createJavaProject("second", new String[] {"src"}, new String[] {"JCL18_LIB"}, "bin", "9");
+			project2.open(null);
+			addClasspathEntry(project2, JavaCore.newContainerEntry(new Path("org.eclipse.jdt.MODULE_PATH")));
+			String secondFile =
+					"module second {\n" +
+					"    exports pack22 to first;\n" +
+					"}";
+			createFile("/second/src/module-info.java",	secondFile);
+			createFolder("/second/src/pack22");
+			createFile("/second/src/pack22/I22.java",
+					"package pack22;\n" +
+					"public interface I22 {}\n");
+
+			addClasspathEntry(project1, JavaCore.newProjectEntry(project2.getPath()));
+			project1.close(); // sync
+			project2.close();
+			project2.open(null);
+			project1.open(null);
+
+			ICompilationUnit sourceUnit1 = getCompilationUnit("ConverterTests9" , "src", "", "module-info.java"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
+			ASTNode unit1 = runConversion(AST_INTERNAL_JLS9, sourceUnit1, true);
+			assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, unit1.getNodeType());
+			ModuleDeclaration moduleDecl1 = ((CompilationUnit) unit1).getModule();
+			checkSourceRange(moduleDecl1, fileContent, fileContent);
+
+			ModuleBinding moduleBinding = (ModuleBinding) moduleDecl1.resolveBinding();
+			assertTrue("Module Binding null", moduleBinding != null);
+			String name = moduleBinding.getName();
+			assertTrue("Module Name null", name != null);
+			assertTrue("Wrong Module Name", name.equals("first"));
+
+			IModuleBinding.Service[] services = moduleBinding.getServices();
+			assertTrue("services null", services != null);
+			assertTrue("Incorrect number of services", services.length == 1);
+			for (IModuleBinding.Service s : services) {
+				assertTrue("Incorrect service", s.service.getQualifiedName().equals("pack22.I22"));
+				ITypeBinding[] implementations = s.implementations;
+				assertTrue("implementations null", implementations != null);
+				assertTrue("Incorrect number of implementations", implementations.length == 2);
+				assertTrue("Incorrect implementation", implementations[0].getQualifiedName().equals("pack1.X11"));
+				assertTrue("Incorrect implementation", implementations[1].getQualifiedName().equals("pack1.X12"));
+			}
+		}
+		finally {
+			deleteProject("ConverterTests9");
+			deleteProject("second");
+		}
+	}
 
 
 
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ModuleBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ModuleBinding.java
index c312975..552d57b 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ModuleBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ModuleBinding.java
@@ -8,18 +8,20 @@
  * This is an implementation of an early-draft specification developed under the Java
  * Community Process (JCP) and is made available for testing and evaluation purposes
  * only. The code is not compatible with any specification of the JCP.
- * 
+ *
  * Contributors:
  *     IBM Corporation - initial API and implementation
- *     
+ *
  *******************************************************************************/
 package org.eclipse.jdt.internal.compiler.lookup;
 
 import java.util.Collection;
 import java.util.HashSet;
 import java.util.Set;
+import java.util.function.Function;
 import java.util.function.Predicate;
 import java.util.function.Supplier;
+import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
 import org.eclipse.jdt.core.compiler.CharOperation;
@@ -29,6 +31,7 @@ import org.eclipse.jdt.internal.compiler.env.IModuleEnvironment;
 import org.eclipse.jdt.internal.compiler.env.IModule;
 import org.eclipse.jdt.internal.compiler.env.IModule.IModuleReference;
 import org.eclipse.jdt.internal.compiler.env.IModule.IPackageExport;
+import org.eclipse.jdt.internal.compiler.env.IModule.IService;
 import org.eclipse.jdt.internal.compiler.env.INameEnvironment;
 import org.eclipse.jdt.internal.compiler.util.HashtableOfPackage;
 import org.eclipse.jdt.internal.compiler.util.JRTUtil;
@@ -57,19 +60,24 @@ public class ModuleBinding extends Binding {
 			return true;
 		}
 	}
+	public static class Service {
+		public TypeBinding service;
+		public TypeBinding[] implementations;
+	}
 	public boolean isOpen;
 	public char[] moduleName;
 	public IModuleReference[] requires;
 	public IPackageExport[] exports;
 	public TypeBinding[] uses;
-	public TypeBinding[] services;
-	public TypeBinding[] implementations;
+//	public LinkedHashMap<TypeBinding, TypeBinding[]> services;
+	Service[] services;
 	public CompilationUnitScope scope;
 	public LookupEnvironment environment;
 	public int tagBits;
 	private ModuleBinding[] requiredModules = null;
 	private boolean isAuto;
-
+	private char[][] iUses = null;
+	private IService[] iServices = null;
 	HashtableOfPackage declaredPackages;
 	HashtableOfPackage exportedPackages;
 
@@ -80,6 +88,7 @@ public class ModuleBinding extends Binding {
 		this.environment = env;
 		this.requires = IModule.NO_MODULE_REFS;
 		this.exports = IModule.NO_EXPORTS;
+		this.services = new Service[0];
 		this.declaredPackages = new HashtableOfPackage(0);
 		this.exportedPackages = new HashtableOfPackage(0);
 	}
@@ -95,8 +104,9 @@ public class ModuleBinding extends Binding {
 			this.exports = IModule.NO_EXPORTS;
 		this.environment = environment;
 		this.uses = Binding.NO_TYPES;
-		this.services = Binding.NO_TYPES;
-		this.implementations = Binding.NO_TYPES;
+		this.services = new Service[0];
+		this.iUses = decl.uses();
+		this.iServices = decl.provides();
 		this.declaredPackages = new HashtableOfPackage(5);
 		this.exportedPackages = new HashtableOfPackage(5);
 		this.isAuto = module.isAutomatic();
@@ -164,6 +174,34 @@ public class ModuleBinding extends Binding {
 		return this.requiredModules = allRequires.size() > 0 ? allRequires.toArray(new ModuleBinding[allRequires.size()]) : NO_REQUIRES;
 	}
 
+	interface ICharTransType {
+		public TypeBinding[] apply(char[][] t);
+	}
+
+	Function<char[], TypeBinding> mapper = v -> this.environment.getType(CharOperation.splitOn('.', v));
+	ICharTransType cTrans = t -> Stream.of(t).map(e -> this.mapper.apply(e)).toArray(TypeBinding[] :: new);
+
+	public TypeBinding[] getUses() {
+		if (this.iUses == null) // either null or already processed
+			return this.uses;
+		this.uses = this.cTrans.apply(this.iUses);
+		this.iUses = null; //processed
+		return this.uses;
+	}
+	public Service[] getServices() {
+		if (this.iServices != null) {
+			int len = this.iServices.length;
+			this.services = new Service[len];
+			for (int i = 0; i < len; ++i) {
+				IService s = this.iServices[i];
+				Service ts = this.services[i] = new Service();
+				ts.service = this.environment.getType(CharOperation.splitOn('.', s.name()));
+				ts.implementations = this.cTrans.apply(s.with());
+			}
+			this.iServices = null; // done
+		}
+		return this.services;
+	}
 	public char[] name() {
 		return this.moduleName;
 	}
@@ -435,12 +473,12 @@ public class ModuleBinding extends Binding {
 		}
 		if (this.services != null && this.services.length > 0) {
 			buffer.append("\n/*    Services    */\n"); //$NON-NLS-1$
-			for (int i = 0; i < this.services.length; i++) {
-				buffer.append("\n\t"); //$NON-NLS-1$
-				buffer.append("provides "); //$NON-NLS-1$
-				buffer.append(this.services[i].debugName());
+			for (Service s : this.services) {
+				buffer.append("\nprovides "); //$NON-NLS-1$
+				buffer.append(s.service.qualifiedSourceName());
 				buffer.append(" with "); //$NON-NLS-1$
-				buffer.append(this.implementations[i].debugName());
+				buffer.append(Stream.of(s.implementations).map(t -> new String(t.qualifiedSourceName())).collect(Collectors.joining(", ")));//$NON-NLS-1$
+				buffer.append(";"); //$NON-NLS-1$
 			}
 		} else {
 			buffer.append("\nNo Services"); //$NON-NLS-1$
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IModuleBinding.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IModuleBinding.java
index 7f16727..baa383d 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IModuleBinding.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IModuleBinding.java
@@ -16,7 +16,6 @@
 
 package org.eclipse.jdt.core.dom;
 
-
 /**
  * A module binding represents a module.
  *
@@ -25,6 +24,11 @@ package org.eclipse.jdt.core.dom;
  */
 public interface IModuleBinding extends IBinding {
 
+	public static class Service {
+		public ITypeBinding service;
+		public ITypeBinding[] implementations;
+	}
+
 	@Override
 	public default int getKind() {
 		return IBinding.MODULE;
@@ -79,11 +83,6 @@ public interface IModuleBinding extends IBinding {
 	 *
 	 * @return array of service interfaces
 	 */
-	public abstract ITypeBinding[] getServices();
+	public abstract Service[] getServices();
 
-	/**
-	 *
-	 * @return array of implementations
-	 */
-	public abstract ITypeBinding[] getImplementations();
 }
\ No newline at end of file
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ModuleBinding.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ModuleBinding.java
index ad3ad4c..8f1ee20 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ModuleBinding.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ModuleBinding.java
@@ -2,7 +2,6 @@ package org.eclipse.jdt.core.dom;
 
 import java.util.ArrayList;
 import java.util.List;
-
 import org.eclipse.jdt.core.IJavaElement;
 import org.eclipse.jdt.core.compiler.CharOperation;
 import org.eclipse.jdt.internal.compiler.env.IModule.IPackageExport;
@@ -31,11 +30,12 @@ public class ModuleBinding implements IModuleBinding {
 	private IModuleBinding[] exportTargets;
 	private IPackageBinding[] openPackages;
 	private IModuleBinding[] openTargets;
+	private Service[] services = null;
 
 	ModuleBinding(BindingResolver resolver, org.eclipse.jdt.internal.compiler.lookup.ModuleBinding binding) {
 		this.resolver = resolver;
 		this.binding = binding;
-		this.isOpen = binding.isOpen; // TODO
+		this.isOpen = binding.isOpen;
 	}
 
 	@Override
@@ -214,18 +214,25 @@ public class ModuleBinding implements IModuleBinding {
 
 	@Override
 	public ITypeBinding[] getUses() {
-		return getTypes(this.binding.uses);
+		return getTypes(this.binding.getUses());
 	}
 
 	@Override
-	public ITypeBinding[] getServices() {
-		return getTypes(this.binding.services);
+	public Service[] getServices() {
+		if (this.services == null) {
+			org.eclipse.jdt.internal.compiler.lookup.ModuleBinding.Service[] cServices = this.binding.getServices();
+			int len = cServices.length;
+			this.services = new Service[len];
+			for (int i = 0; i < len; ++i) {
+				org.eclipse.jdt.internal.compiler.lookup.ModuleBinding.Service cs = cServices[i];
+				Service s = this.services[i] = new Service();
+				s.service = this.resolver.getTypeBinding(cs.service);
+				s.implementations = getTypes(cs.implementations);
+			}
+		}
+		return this.services;
 	}
 
-	@Override
-	public ITypeBinding[] getImplementations() {
-		return getTypes(this.binding.implementations);
-	}
 	/**
 	 * For debugging purpose only.
 	 * @see java.lang.Object#toString()

commit cf0fc1d100d6a0dfa353e3125744fa10a50c8d3b
Author: Stephan Herrmann <stephan.herrmann@berlin.de>
Date:   Tue Apr 22 14:10:45 2014 +0200

    Bug 430150 - [1.8][null] stricter checking against type variables

5	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java
184	12	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
6	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
3	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java
4	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java
18	10	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java
2	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java
47	13	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
3	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java
index c00caaa..880be0e 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java
@@ -32,6 +32,7 @@
  *								Bug 416307 - [1.8][compiler][null] subclass with type parameter substitution confuses null checking
  *								Bug 424637 - [1.8][compiler][null] AIOOB in ReferenceExpression.resolveType with a method reference to Files::walk
  *								Bug 418743 - [1.8][null] contradictory annotations on invocation of generic method not reported
+ *								Bug 430150 - [1.8][null] stricter checking against type variables
  *     Jesper S Moller - Contributions for
  *								bug 382701 - [1.8][compiler] Implement semantic analysis of Lambda expressions & Reference expression
  *								bug 382721 - [1.8][compiler] Effectively final variables needs special treatment
@@ -843,11 +844,13 @@ public void test011_problem_categories() {
 		expectedProblemAttributes.put("NullLocalVariableComparisonYieldsFalse", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));
 		expectedProblemAttributes.put("NullLocalVariableInstanceofYieldsFalse", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));
 		expectedProblemAttributes.put("NullLocalVariableReference", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));
+		expectedProblemAttributes.put("NullityMismatchAgainstFreeTypeVariable", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));
 		expectedProblemAttributes.put("NullityMismatchingTypeAnnotation", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));
 		expectedProblemAttributes.put("NullityMismatchingTypeAnnotationSuperHint", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));
 		expectedProblemAttributes.put("NullityMismatchTypeArgument", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));
 		expectedProblemAttributes.put("NullityUncheckedTypeAnnotationDetail", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));
 		expectedProblemAttributes.put("NullityUncheckedTypeAnnotationDetailSuperHint", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));
+		expectedProblemAttributes.put("NullNotCompatibleToFreeTypeVariable", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));
 		expectedProblemAttributes.put("NullSourceString", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));
 		expectedProblemAttributes.put("NullUnboxing", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));
 		expectedProblemAttributes.put("NumericValueOutOfRange", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));
@@ -1656,6 +1659,7 @@ public void test012_compiler_problems_tuning() {
 		expectedProblemAttributes.put("NullableFieldReference", new ProblemAttributes(JavaCore.COMPILER_PB_NULL_REFERENCE));
 		expectedProblemAttributes.put("NullAnnotationUnsupportedLocation", SKIP);
 		expectedProblemAttributes.put("NullAnnotationUnsupportedLocationAtType", SKIP);
+		expectedProblemAttributes.put("NullityMismatchAgainstFreeTypeVariable", new ProblemAttributes(JavaCore.COMPILER_PB_NULL_SPECIFICATION_VIOLATION));
 		expectedProblemAttributes.put("NullityMismatchingTypeAnnotation", new ProblemAttributes(JavaCore.COMPILER_PB_NULL_SPECIFICATION_VIOLATION));
 		expectedProblemAttributes.put("NullityMismatchingTypeAnnotationSuperHint", new ProblemAttributes(JavaCore.COMPILER_PB_NULL_SPECIFICATION_VIOLATION));
 		expectedProblemAttributes.put("NullityMismatchTypeArgument", new ProblemAttributes(JavaCore.COMPILER_PB_NULL_SPECIFICATION_VIOLATION));
@@ -1665,6 +1669,7 @@ public void test012_compiler_problems_tuning() {
 		expectedProblemAttributes.put("NullLocalVariableComparisonYieldsFalse", new ProblemAttributes(JavaCore.COMPILER_PB_REDUNDANT_NULL_CHECK));
 		expectedProblemAttributes.put("NullLocalVariableInstanceofYieldsFalse", new ProblemAttributes(JavaCore.COMPILER_PB_REDUNDANT_NULL_CHECK));
 		expectedProblemAttributes.put("NullLocalVariableReference", new ProblemAttributes(JavaCore.COMPILER_PB_NULL_REFERENCE));
+		expectedProblemAttributes.put("NullNotCompatibleToFreeTypeVariable", new ProblemAttributes(JavaCore.COMPILER_PB_NULL_SPECIFICATION_VIOLATION));
 		expectedProblemAttributes.put("NullSourceString", SKIP);
 		expectedProblemAttributes.put("NullUnboxing", new ProblemAttributes(JavaCore.COMPILER_PB_NULL_REFERENCE));
 		expectedProblemAttributes.put("NumericValueOutOfRange", SKIP);
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
index 61977d5..2492557 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
@@ -225,8 +225,9 @@ public class NullTypeAnnotationTest extends AbstractNullAnnotationTest {
 				  "import org.eclipse.jdt.annotation.*;\n" +
 				  "public class A<X> {\n" +
 				  "    public class I<Y> {\n" +
+				  "        X anX;\n" +
 				  "        public X foo(Y l) {\n" +
-				  "            return null;\n" +
+				  "            return anX;\n" +
 				  "        }\n" +
 				  "    }\n" +
 				  "    void bar(A<@Nullable Object>.I<@NonNull Object> i) {\n" + // legal instantiation
@@ -234,12 +235,12 @@ public class NullTypeAnnotationTest extends AbstractNullAnnotationTest {
 				  "    }\n" +
 				  "}\n"},
 			"----------\n" + 
-			"1. ERROR in A.java (at line 9)\n" + 
+			"1. ERROR in A.java (at line 10)\n" + 
 			"	@NonNull Object o = i.foo(null); // problems: argument and assignment violate null contracts\n" + 
 			"	                    ^^^^^^^^^^^\n" + 
 			"Null type mismatch (type annotations): required '@NonNull Object' but this expression has type '@Nullable Object'\n" + 
 			"----------\n" + 
-			"2. ERROR in A.java (at line 9)\n" + 
+			"2. ERROR in A.java (at line 10)\n" + 
 			"	@NonNull Object o = i.foo(null); // problems: argument and assignment violate null contracts\n" + 
 			"	                          ^^^^\n" + 
 			"Null type mismatch: required \'@NonNull Object\' but the provided value is null\n" + 
@@ -2594,12 +2595,17 @@ public class NullTypeAnnotationTest extends AbstractNullAnnotationTest {
 			},
 			getCompilerOptions(),
 			"----------\n" + 
-			"1. WARNING in PolyNull.java (at line 9)\n" + 
+			"1. ERROR in PolyNull.java (at line 7)\n" + 
+			"	<X> X extract(Func<@Nullable X> f, @Nullable X s) { return f.a(s); }\n" + 
+			"	                                                           ^^^^^^\n" + 
+			"Null type mismatch (type annotations): required \'X\' but this expression has type \'@Nullable X\', where 'X' is a free type variable\n" + 
+			"----------\n" + 
+			"2. WARNING in PolyNull.java (at line 9)\n" + 
 			"	return extract(i -> needNN(i), \"ola\");\n" + 
 			"	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
 			"Null type safety (type annotations): The expression of type \'String\' needs unchecked conversion to conform to \'@NonNull String\'\n" + 
 			"----------\n" + 
-			"2. ERROR in PolyNull.java (at line 9)\n" + 
+			"3. ERROR in PolyNull.java (at line 9)\n" + 
 			"	return extract(i -> needNN(i), \"ola\");\n" + 
 			"	                           ^\n" + 
 			"Null type mismatch (type annotations): required \'@NonNull String\' but this expression has type \'@Nullable String\'\n" + 
@@ -2628,7 +2634,12 @@ public class NullTypeAnnotationTest extends AbstractNullAnnotationTest {
 			},
 			compilerOptions,
 			"----------\n" + 
-			"1. ERROR in Generics.java (at line 6)\n" + 
+			"1. ERROR in Generics.java (at line 4)\n" + 
+			"	<X> X m(@Nullable X a) { return null; }\n" + 
+			"	                                ^^^^\n" + 
+			"Null type mismatch (type annotations): \'null\' is not compatible to the free type variable 'X'\n" + 
+			"----------\n" + 
+			"2. ERROR in Generics.java (at line 6)\n" + 
 			"	@NonNull String s = m(in);\n" + 
 			"	                    ^^^^^\n" + 
 			"Null type safety (type annotations): The expression of type \'String\' needs unchecked conversion to conform to \'@NonNull String\'\n" + 
@@ -3533,7 +3544,7 @@ public class NullTypeAnnotationTest extends AbstractNullAnnotationTest {
 			"Null type mismatch (type annotations): required \'@NonNull X<@NonNull ?>\' but this expression has type \'@NonNull X<@Nullable String>\'\n" + 
 			"----------\n");		
 	}
-	public void testTypeVariable() {
+	public void testTypeVariable1() {
 		runNegativeTestWithLibs(
 			new String[] {
 				"X.java",
@@ -3561,6 +3572,150 @@ public class NullTypeAnnotationTest extends AbstractNullAnnotationTest {
 			"Null type mismatch: required \'@NonNull T\' but the provided value is null\n" + 
 			"----------\n");		
 	}
+	// free type variable does not ensure @NonNull, but cannot accept null either, unbounded type variable
+	public void testTypeVariable2() {
+		runNegativeTestWithLibs(
+			new String[] {
+				"X.java",
+				"import org.eclipse.jdt.annotation.*;\n" +
+				"public class X<T> {\n" +
+				"	void consumeAny(T t) {\n" +
+				"		consume(t); // error, t can be null\n" +
+				"		consumeObject(t); // error, t can be null\n" +
+				"	}\n" +
+				"	void consumeNullable(@Nullable T t) {\n" +
+				"		consume(t); // error, both sides explicit, mismatch\n" +
+				"		consumeObject(t); // error, both sides explicit, mismatch\n" +
+				"	}\n" +
+				"	void consume(@NonNull T t) {}\n" +
+				"	void consumeObject(@NonNull Object o) {}\n" +
+				"	T produce() {\n" +
+				"		return null; // error, T may not accept null\n" +
+				"	}\n" +
+				"	T produceFromNullable(@Nullable T t) {\n" +
+				"		return t; // error, T may not accept nullable\n" +
+				"	}\n" +
+				"}\n"
+			},
+			getCompilerOptions(),
+			"----------\n" + 
+			"1. WARNING in X.java (at line 4)\n" + 
+			"	consume(t); // error, t can be null\n" + 
+			"	        ^\n" + 
+			"Null type safety (type annotations): The expression of type \'T\' needs unchecked conversion to conform to \'@NonNull T\'\n" + 
+			"----------\n" + 
+			"2. WARNING in X.java (at line 5)\n" + 
+			"	consumeObject(t); // error, t can be null\n" + 
+			"	              ^\n" + 
+			"Null type safety (type annotations): The expression of type \'T\' needs unchecked conversion to conform to \'@NonNull Object\'\n" + 
+			"----------\n" + 
+			"3. ERROR in X.java (at line 8)\n" + 
+			"	consume(t); // error, both sides explicit, mismatch\n" + 
+			"	        ^\n" + 
+			"Null type mismatch (type annotations): required \'@NonNull T\' but this expression has type \'@Nullable T\'\n" + 
+			"----------\n" + 
+			"4. ERROR in X.java (at line 9)\n" + 
+			"	consumeObject(t); // error, both sides explicit, mismatch\n" + 
+			"	              ^\n" + 
+			"Null type mismatch (type annotations): required \'@NonNull Object\' but this expression has type \'@Nullable T\'\n" + 
+			"----------\n" + 
+			"5. ERROR in X.java (at line 14)\n" + 
+			"	return null; // error, T may not accept null\n" + 
+			"	       ^^^^\n" + 
+			"Null type mismatch (type annotations): \'null\' is not compatible to the free type variable 'T'\n" + 
+			"----------\n" + 
+			"6. ERROR in X.java (at line 17)\n" + 
+			"	return t; // error, T may not accept nullable\n" + 
+			"	       ^\n" + 
+			"Null type mismatch (type annotations): required \'T\' but this expression has type \'@Nullable T\', where \'T\' is a free type variable\n" + 
+			"----------\n");
+	}
+	// free type variable does not ensure @NonNull, but cannot accept null either, type variable with upper bound
+	public void testTypeVariable3() {
+		runNegativeTestWithLibs(
+			new String[] {
+				"X.java",
+				"import org.eclipse.jdt.annotation.*;\n" +
+				"public class X<T extends Number> {\n" +
+				"	void consumeAny(T t) {\n" +
+				"		consume(t); // error, t can be null\n" +
+				"		consumeObject(t); // error, t can be null\n" +
+				"	}\n" +
+				"	void consumeNullable(@Nullable T t) {\n" +
+				"		consume(t); // error, both sides explicit, mismatch\n" +
+				"		consumeObject(t); // error, both sides explicit, mismatch\n" +
+				"	}\n" +
+				"	void consume(@NonNull T t) {}\n" +
+				"	void consumeObject(@NonNull Object o) {}\n" +
+				"	T produce() {\n" +
+				"		return null; // error, T may not accept null\n" +
+				"	}\n" +
+				"	T produceFromNullable(@Nullable T t) {\n" +
+				"		return t; // error, T may not accept nullable\n" +
+				"	}\n" +
+				"}\n"
+			},
+			getCompilerOptions(),
+			"----------\n" + 
+			"1. WARNING in X.java (at line 4)\n" + 
+			"	consume(t); // error, t can be null\n" + 
+			"	        ^\n" + 
+			"Null type safety (type annotations): The expression of type \'T extends Number\' needs unchecked conversion to conform to \'@NonNull T extends Number\'\n" + 
+			"----------\n" + 
+			"2. WARNING in X.java (at line 5)\n" + 
+			"	consumeObject(t); // error, t can be null\n" + 
+			"	              ^\n" + 
+			"Null type safety (type annotations): The expression of type \'T extends Number\' needs unchecked conversion to conform to \'@NonNull Object\'\n" + 
+			"----------\n" + 
+			"3. ERROR in X.java (at line 8)\n" + 
+			"	consume(t); // error, both sides explicit, mismatch\n" + 
+			"	        ^\n" + 
+			"Null type mismatch (type annotations): required \'@NonNull T extends Number\' but this expression has type \'@Nullable T extends Number\'\n" + 
+			"----------\n" + 
+			"4. ERROR in X.java (at line 9)\n" + 
+			"	consumeObject(t); // error, both sides explicit, mismatch\n" + 
+			"	              ^\n" + 
+			"Null type mismatch (type annotations): required \'@NonNull Object\' but this expression has type \'@Nullable T extends Number\'\n" + 
+			"----------\n" + 
+			"5. ERROR in X.java (at line 14)\n" + 
+			"	return null; // error, T may not accept null\n" + 
+			"	       ^^^^\n" + 
+			"Null type mismatch (type annotations): \'null\' is not compatible to the free type variable \'T\'\n" + 
+			"----------\n" + 
+			"6. ERROR in X.java (at line 17)\n" + 
+			"	return t; // error, T may not accept nullable\n" + 
+			"	       ^\n" + 
+			"Null type mismatch (type annotations): required \'T\' but this expression has type \'@Nullable T extends Number\', where \'T\' is a free type variable\n" + 
+			"----------\n");
+	}
+	// free type variable is compatible to itself even with different not null-related type annotations
+	public void testTypeVariable4() {
+		runNegativeTestWithLibs(
+			new String[] {
+				"X.java",
+				"import java.lang.annotation.*;\n" +
+				"import org.eclipse.jdt.annotation.*;\n" +
+				"@Target(ElementType.TYPE_USE) @interface TypeMarker {}\n" +
+				"public class X<T> {\n" +
+				"	T passThrough1(@TypeMarker T t) {\n" +
+				"		return t; // OK\n" +
+				"	}\n" +
+				"	@TypeMarker T passThrough2(T t) {\n" +
+				"		return t; // OK\n" +
+				"	}\n" +
+				"	@TypeMarker T passThrough3(@Nullable @TypeMarker T t) {\n" +
+				"		return t; // Not OK\n" +
+				"	}\n" +
+				"}\n"
+			},
+			getCompilerOptions(),
+			"----------\n" + 
+			"1. ERROR in X.java (at line 12)\n" + 
+			"	return t; // Not OK\n" + 
+			"	       ^\n" + 
+			"Null type mismatch (type annotations): required \'T\' but this expression has type \'@Nullable T\', where 'T' is a free type variable\n" + 
+			"----------\n");
+	}
 	public void testSE7AnnotationCopy() { // we were dropping annotations here, but null analysis worked already since the tagbits were not "dropped", just the same capturing in a test
 		runNegativeTestWithLibs(
 			new String[] {
@@ -4395,9 +4550,9 @@ public void testDefault01() {
 		"----------\n");
 }
 
-// apply null default to type arguments - no effect on type variable or wildcard:
+// apply null default to type arguments - no effect on type variable or wildcard, but apply strict checking assuming nothing
 public void testDefault01b() {
-	runConformTestWithLibs(
+	runNegativeTestWithLibs(
 		new String[] {
 			"X.java",
 			"import org.eclipse.jdt.annotation.*;\n" +
@@ -4405,13 +4560,30 @@ public void testDefault01b() {
 			"@NonNullByDefault(DefaultLocation.TYPE_ARGUMENT)\n" +
 			"public class X<T> {\n" +
 			"	List<T> test(List<? extends Number> in) {\n" +
-			"		in.add(null); // OK\n" +
-			"		return new ArrayList<@Nullable T>();\n" + // TODO: unannotated type variable should be regarded as 'could be either'
+			"		in.add(null); // NOK, cannot assume nullable\n" +
+			"		needNN(in.get(0)); // NOK, cannot assume nonnull\n" +
+			"		return new ArrayList<@Nullable T>(); // NOK, cannot assume nullable for T in List<T>\n" +
 			"	}\n" +
+			"	void needNN(@NonNull Number n) {}\n" +
 			"}\n"
 		},
 		getCompilerOptions(),
-		"");
+		"----------\n" + 
+		"1. ERROR in X.java (at line 6)\n" + 
+		"	in.add(null); // NOK, cannot assume nullable\n" + 
+		"	       ^^^^\n" + 
+		"Null type mismatch (type annotations): \'null\' is not compatible to the free type variable '? extends Number'\n" + 
+		"----------\n" + 
+		"2. WARNING in X.java (at line 7)\n" + 
+		"	needNN(in.get(0)); // NOK, cannot assume nonnull\n" + 
+		"	       ^^^^^^^^^\n" + 
+		"Null type safety (type annotations): The expression of type \'capture#of ? extends Number\' needs unchecked conversion to conform to \'@NonNull Number\'\n" + 
+		"----------\n" + 
+		"3. ERROR in X.java (at line 8)\n" + 
+		"	return new ArrayList<@Nullable T>(); // NOK, cannot assume nullable for T in List<T>\n" + 
+		"	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
+		"Null type mismatch (type annotations): required \'List<T>\' but this expression has type \'ArrayList<@Nullable T>\', corresponding supertype is \'List<@Nullable T>\'\n" + 
+		"----------\n");
 }
 
 // apply null default to parameters:
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
index b66d422..f22d461 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
@@ -190,6 +190,8 @@
  *									UnsafeNullnessCast
  *									ContradictoryNullAnnotationsInferred
  *									NonNullDefaultDetailIsNotEvaluated
+ *									NullNotCompatibleToFreeTypeVariable
+ *									NullityMismatchAgainstFreeTypeVariable
  *      Jesper S Moller  - added the following constants
  *									TargetTypeNotAFunctionalInterface
  *									OuterLocalMustBeEffectivelyFinal
@@ -1778,6 +1780,10 @@ void setSourceStart(int sourceStart);
 	int UnsafeNullnessCast = Internal + 967;
 	/** @since 3.10 */
 	int NonNullDefaultDetailIsNotEvaluated = 968; // no longer reported
+	/** @since 3.10 */
+	int NullNotCompatibleToFreeTypeVariable = 969;
+	/** @since 3.10 */
+	int NullityMismatchAgainstFreeTypeVariable = 970;
 
 	// Java 8 work
 	/** @since 3.10 */
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java
index b603b9e..171ef8d 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java
@@ -20,6 +20,7 @@
  *								Bug 392099 - [1.8][compiler][null] Apply null annotation on types for null analysis
  *								Bug 400874 - [1.8][compiler] Inference infrastructure should evolve to meet JLS8 18.x (Part G of JSR335 spec)
  *								Bug 427438 - [1.8][compiler] NPE at org.eclipse.jdt.internal.compiler.ast.ConditionalExpression.generateCode(ConditionalExpression.java:280)
+ *								Bug 430150 - [1.8][null] stricter checking against type variables
  *        Andy Clement (GoPivotal, Inc) aclement@gopivotal.com - Contributions for
  *                          Bug 415541 - [1.8][compiler] Type annotations in the body of static initializer get dropped
  *******************************************************************************/
@@ -549,7 +550,8 @@ public TypeBinding resolveType(BlockScope scope) {
 	if (castType != null) {
 		if (expressionType != null) {
 
-			boolean nullAnnotationMismatch = NullAnnotationMatching.analyse(castType, expressionType, -1).isAnyMismatch();
+			boolean nullAnnotationMismatch = scope.compilerOptions().isAnnotationBasedNullAnalysisEnabled
+					&& NullAnnotationMatching.analyse(castType, expressionType, -1).isAnyMismatch();
 
 			boolean isLegal = checkCastTypesCompatibility(scope, castType, expressionType, this.expression);
 			if (isLegal) {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java
index 3f1f584..aa225bc 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LocalDeclaration.java
@@ -24,6 +24,7 @@
  *							Bug 392238 - [1.8][compiler][null] Detect semantically invalid null type annotations
  *							Bug 392099 - [1.8][compiler][null] Apply null annotation on types for null analysis
  *							Bug 427438 - [1.8][compiler] NPE at org.eclipse.jdt.internal.compiler.ast.ConditionalExpression.generateCode(ConditionalExpression.java:280)
+ *							Bug 430150 - [1.8][null] stricter checking against type variables
  *     Jesper S Moller - Contributions for
  *							Bug 378674 - "The method can be declared as static" is wrong
  *        Andy Clement (GoPivotal, Inc) aclement@gopivotal.com - Contributions for
@@ -98,7 +99,9 @@ public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, Fl
 		this.bits &= ~FirstAssignmentToLocal;  // int i = (i = 0);
 	}
 	flowInfo.markAsDefinitelyAssigned(this.binding);
-	nullStatus = NullAnnotationMatching.checkAssignment(currentScope, flowContext, this.binding, nullStatus, this.initialization, this.initialization.resolvedType);
+	if (currentScope.compilerOptions().isAnnotationBasedNullAnalysisEnabled) {
+		nullStatus = NullAnnotationMatching.checkAssignment(currentScope, flowContext, this.binding, nullStatus, this.initialization, this.initialization.resolvedType);
+	}
 	if ((this.binding.type.tagBits & TagBits.IsBaseType) == 0) {
 		flowInfo.markNullStatus(this.binding, nullStatus);
 		// no need to inform enclosing try block since its locals won't get
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java
index 73e60a4..77649b4 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/NullAnnotationMatching.java
@@ -121,6 +121,8 @@ public class NullAnnotationMatching {
 		int severity = 0;
 		TypeBinding superTypeHint = null;
 		NullAnnotationMatching okStatus = NullAnnotationMatching.NULL_ANNOTATIONS_OK;
+		if (areSameTypes(requiredType, providedType)) // for type variable identity (and as shortcut for others)
+			return okStatus;
 		if (requiredType instanceof ArrayBinding) {
 			long[] requiredDimsTagBits = ((ArrayBinding)requiredType).nullTagBitsPerDimension;
 			if (requiredDimsTagBits != null) {
@@ -145,7 +147,7 @@ public class NullAnnotationMatching {
 						return NullAnnotationMatching.NULL_ANNOTATIONS_MISMATCH;
 				}
 			}
-		} else if (requiredType.hasNullTypeAnnotations() || providedType.hasNullTypeAnnotations()) {
+		} else if (requiredType.hasNullTypeAnnotations() || providedType.hasNullTypeAnnotations() || requiredType.isTypeVariable()) {
 			long requiredBits = requiredNullTagBits(requiredType);
 			if (requiredBits != TagBits.AnnotationNullable // nullable lhs accepts everything, ...
 					|| nullStatus == -1) // only at detail/recursion even nullable must be matched exactly
@@ -184,6 +186,17 @@ public class NullAnnotationMatching {
 		return new NullAnnotationMatching(severity, nullStatus, superTypeHint);
 	}
 
+	/** Are both types identical wrt the unannotated type and any null type annotations? Only unstructured types are considered. */
+	protected static boolean areSameTypes(TypeBinding requiredType, TypeBinding providedType) {
+		if (requiredType == providedType)  //$IDENTITY-COMPARISON$ // short cut for really-really-same types
+			return true;
+		if (requiredType.isParameterizedType() || requiredType.isArrayType())
+			return false; // not analysing details here
+		if (TypeBinding.notEquals(requiredType, providedType))
+			return false;
+		return (requiredType.tagBits & TagBits.AnnotationNullMASK) == (providedType.tagBits & TagBits.AnnotationNullMASK);
+	}
+
 	// interpreting 'type' as a required type, compute the required null bits
 	// we inspect the main type plus bounds of type variables and wildcards
 	static long requiredNullTagBits(TypeBinding type) {
@@ -213,22 +226,17 @@ public class NullAnnotationMatching {
 		} 
 		
 		if (type.isTypeVariable()) {
-			// assume we must require @NonNull, unless: (1) lower @Nullable bound, or (2) no nullness specified
-			TypeVariableBinding typeVariable = (TypeVariableBinding)type;
-			boolean haveNullBits = false;
+			// assume we must require @NonNull, unless lower @Nullable bound
+			// (annotation directly on the TV has already been checked above)
 			if (type.isCapture()) {
 				TypeBinding lowerBound = ((CaptureBinding) type).lowerBound;
 				if (lowerBound != null) {
 					tagBits = lowerBound.tagBits & TagBits.AnnotationNullMASK;
 					if (tagBits == TagBits.AnnotationNullable)
-						return TagBits.AnnotationNullable; // (1) type cannot require @NonNull
-					haveNullBits = tagBits != 0;
+						return TagBits.AnnotationNullable; // type cannot require @NonNull
 				}
 			}
-			if (typeVariable.firstBound != null)
-				haveNullBits |= (typeVariable.firstBound.tagBits & TagBits.AnnotationNullMASK) != 0;
-			if (haveNullBits)
-				return TagBits.AnnotationNonNull; // could require @NonNull (unless (2) unspecified nullness)
+			return TagBits.AnnotationNonNull; // instantiation could require @NonNull
 		}
 
 		return 0;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java
index f193e3d..038e860 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java
@@ -29,6 +29,7 @@
  *								Bug 416307 - [1.8][compiler][null] subclass with type parameter substitution confuses null checking
  *								Bug 417758 - [1.8][null] Null safety compromise during array creation.
  *								Bug 427438 - [1.8][compiler] NPE at org.eclipse.jdt.internal.compiler.ast.ConditionalExpression.generateCode(ConditionalExpression.java:280)
+ *								Bug 430150 - [1.8][null] stricter checking against type variables
  *     Jesper S Moller - Contributions for
  *								bug 382701 - [1.8][compiler] Implement semantic analysis of Lambda expressions & Reference expression
  *******************************************************************************/
@@ -81,7 +82,7 @@ public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, Fl
 	if (this.expression != null) {
 		flowInfo = this.expression.analyseCode(currentScope, flowContext, flowInfo);
 		this.expression.checkNPEbyUnboxing(currentScope, flowContext, flowInfo);
-		if (flowInfo.reachMode() == FlowInfo.REACHABLE)
+		if (flowInfo.reachMode() == FlowInfo.REACHABLE && currentScope.compilerOptions().isAnnotationBasedNullAnalysisEnabled)
 			checkAgainstNullAnnotation(currentScope, flowContext, flowInfo);
 		if (currentScope.compilerOptions().analyseResourceLeaks) {
 			FakedTrackingVariable trackingVariable = FakedTrackingVariable.getCloseTrackingVariable(this.expression, flowInfo, flowContext);
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
index 1953db5..6370feb 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
@@ -48,6 +48,7 @@
  *								Bug 416190 - [1.8][null] detect incompatible overrides due to null type annotations
  *								Bug 392245 - [1.8][compiler][null] Define whether / how @NonNullByDefault applies to TYPE_USE locations
  *								Bug 390889 - [1.8][compiler] Evaluate options to support 1.7- projects against 1.8 JRE.
+ *								Bug 430150 - [1.8][null] stricter checking against type variables
  *      Jesper S Moller <jesper@selskabet.org> -  Contributions for
  *								bug 382701 - [1.8][compiler] Implement semantic analysis of Lambda expressions & Reference expression
  *								bug 382721 - [1.8][compiler] Effectively final variables needs special treatment
@@ -389,6 +390,8 @@ public static int getIrritant(int problemID) {
 		case IProblem.CannotImplementIncompatibleNullness:
 		case IProblem.ConflictingNullAnnotations:
 		case IProblem.ConflictingInheritedNullAnnotations:
+		case IProblem.NullNotCompatibleToFreeTypeVariable:
+		case IProblem.NullityMismatchAgainstFreeTypeVariable:
 		case IProblem.NullityMismatchingTypeAnnotation:
 		case IProblem.NullityMismatchingTypeAnnotationSuperHint:
 		case IProblem.NullityMismatchTypeArgument:
@@ -9150,20 +9153,27 @@ public void nullityMismatch(Expression expression, TypeBinding providedType, Typ
 		nullityMismatchingTypeAnnotation(expression, providedType, requiredType, NullAnnotationMatching.NULL_ANNOTATIONS_UNCHECKED);
 }
 public void nullityMismatchIsNull(Expression expression, TypeBinding requiredType) {
+	int problemId = IProblem.RequiredNonNullButProvidedNull;
+	if (requiredType.isTypeVariable() && !requiredType.hasNullTypeAnnotations())
+		problemId = IProblem.NullNotCompatibleToFreeTypeVariable;
 	if (requiredType instanceof CaptureBinding) {
 		CaptureBinding capture = (CaptureBinding) requiredType;
 		if (capture.wildcard != null)
 			requiredType = capture.wildcard;
 	}
-	int problemId = IProblem.RequiredNonNullButProvidedNull;
 	String[] arguments;
 	String[] argumentsShort;
 	if (this.options.sourceLevel < ClassFileConstants.JDK1_8) {
 		arguments      = new String[] { annotatedTypeName(requiredType, this.options.nonNullAnnotationName) };
 		argumentsShort = new String[] { shortAnnotatedTypeName(requiredType, this.options.nonNullAnnotationName) };
 	} else {
-		arguments      = new String[] { new String(requiredType.nullAnnotatedReadableName(this.options, false)) };
-		argumentsShort = new String[] { new String(requiredType.nullAnnotatedReadableName(this.options, true)) };
+		if (problemId == IProblem.NullNotCompatibleToFreeTypeVariable) {
+			arguments      = new String[] { new String(requiredType.sourceName()) }; // don't show any bounds
+			argumentsShort = new String[] { new String(requiredType.sourceName()) };
+		} else {
+			arguments      = new String[] { new String(requiredType.nullAnnotatedReadableName(this.options, false)) };
+			argumentsShort = new String[] { new String(requiredType.nullAnnotatedReadableName(this.options, true))  };			
+		}
 	}
 	this.handle(problemId, arguments, argumentsShort, expression.sourceStart, expression.sourceEnd);
 }
@@ -9695,23 +9705,47 @@ public void nullityMismatchingTypeAnnotation(Expression expression, TypeBinding
 	String[] shortArguments;
 		
 	int problemId = 0;
+	String superHint = null;
+	String superHintShort = null;
 	if (status.superTypeHint != null) {
 		problemId = (status.isUnchecked()
 			? IProblem.NullityUncheckedTypeAnnotationDetailSuperHint
 			: IProblem.NullityMismatchingTypeAnnotationSuperHint);
-		arguments      = new String[] { null, null, status.superTypeHintName(this.options, false) };
-		shortArguments = new String[] { null, null, status.superTypeHintName(this.options, true) };
+		superHint = status.superTypeHintName(this.options, false);
+		superHintShort = status.superTypeHintName(this.options, true);
 	} else {
 		problemId = (status.isUnchecked()
 			? IProblem.NullityUncheckedTypeAnnotationDetail
-			: IProblem.NullityMismatchingTypeAnnotation);
-		arguments      = new String[2];
-		shortArguments = new String[2];
-	}
-	arguments[0] = String.valueOf(requiredType.nullAnnotatedReadableName(this.options, false));
-	arguments[1] = String.valueOf(providedType.nullAnnotatedReadableName(this.options, false));
-	shortArguments[0] = String.valueOf(requiredType.nullAnnotatedReadableName(this.options, true));
-	shortArguments[1] = String.valueOf(providedType.nullAnnotatedReadableName(this.options, true));
+			: (requiredType.isTypeVariable() && !requiredType.hasNullTypeAnnotations())
+				? IProblem.NullityMismatchAgainstFreeTypeVariable
+				: IProblem.NullityMismatchingTypeAnnotation);
+		if (problemId == IProblem.NullityMismatchAgainstFreeTypeVariable) {
+			arguments      = new String[] { null, null, new String(requiredType.sourceName()) }; // don't show bounds here
+			shortArguments = new String[] { null, null, new String(requiredType.sourceName()) };
+		} else {
+			arguments      = new String[2];
+			shortArguments = new String[2];
+		}
+	}
+	String requiredName;
+	String requiredNameShort;
+	if (problemId == IProblem.NullityMismatchAgainstFreeTypeVariable) {
+		requiredName		= new String(requiredType.sourceName()); // don't show bounds here
+		requiredNameShort 	= new String(requiredType.sourceName()); // don't show bounds here
+	} else {
+		requiredName 		= new String(requiredType.nullAnnotatedReadableName(this.options, false));
+		requiredNameShort 	= new String(requiredType.nullAnnotatedReadableName(this.options, true));
+	}
+	String providedName		 = String.valueOf(providedType.nullAnnotatedReadableName(this.options, false));
+	String providedNameShort = String.valueOf(providedType.nullAnnotatedReadableName(this.options, true));
+	// assemble arguments:
+	if (superHint != null) {
+		arguments 		= new String[] { requiredName, providedName, superHint };
+		shortArguments 	= new String[] { requiredNameShort, providedNameShort, superHintShort };
+	} else {
+		arguments 		= new String[] { requiredName, providedName };
+		shortArguments 	= new String[] { requiredNameShort, providedNameShort };
+	}
 	this.handle(problemId, arguments, shortArguments, expression.sourceStart, expression.sourceEnd);
 }
 
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
index eb73d55..e1c00c2 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
@@ -37,6 +37,7 @@
 #							Bug 418743 - [1.8][null] contradictory annotations on invocation of generic method not reported
 #							Bug 416190 - [1.8][null] detect incompatible overrides due to null type annotations
 #							Bug 392245 - [1.8][compiler][null] Define whether / how @NonNullByDefault applies to TYPE_USE locations
+#							Bug 430150 - [1.8][null] stricter checking against type variables
 #		Jesper S Moller <jesper@selskabet.org> - Contributions for
 #							bug 382701 - [1.8][compiler] Implement semantic analysis of Lambda expressions & Reference expression
 #							bug 384567 - [1.5][compiler] Compiler accepts illegal modifiers on package declaration
@@ -817,6 +818,8 @@
 966 = Contradictory null annotations: method was inferred as ''{2} {3}({4})'', but only one of ''@{0}'' and ''@{1}'' can be effective at any location
 967 = Null type safety: Unchecked cast from {0} to {1}
 #968 temporary warning has been removed
+969 = Null type mismatch (type annotations): 'null' is not compatible to the free type variable ''{0}''
+970 = Null type mismatch (type annotations): required ''{0}'' but this expression has type ''{1}'', where ''{0}'' is a free type variable
 
 # Java 8
 1001 = Syntax error, modifiers and annotations are not allowed for the lambda parameter {0} as its type is elided

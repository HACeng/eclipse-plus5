commit b67671a65a709645d39f3a40e516cebb408f1277
Author: Stefan Xenos <sxenos@gmail.com>
Date:   Wed Jul 20 17:24:36 2016 -0700

    Bug 497996 - Implement suggestions from the newindex code review
    
    Change-Id: Ia0df9484305969da036bd306f97a8e9be66939c7
    Signed-off-by: Stefan Xenos <sxenos@gmail.com>

5	6	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/NdNodeTypeRegistry.java
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/NdNodeTypeRegistry.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/NdNodeTypeRegistry.java
index ac308b7..9fb39c9 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/NdNodeTypeRegistry.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/NdNodeTypeRegistry.java
@@ -10,10 +10,9 @@
  *******************************************************************************/
 package org.eclipse.jdt.internal.core.nd;
 
+import java.util.BitSet;
 import java.util.HashMap;
-import java.util.HashSet;
 import java.util.Map;
-import java.util.Set;
 
 import org.eclipse.jdt.internal.core.nd.db.IndexException;
 
@@ -23,7 +22,7 @@ import org.eclipse.jdt.internal.core.nd.db.IndexException;
  */
 public class NdNodeTypeRegistry<R> {
 	private final Map<Short, ITypeFactory<? extends R>> types = new HashMap<>();
-	private final Set<Short> reserved = new HashSet<>();
+	private final BitSet reserved = new BitSet();
 	private final Map<Class<?>, Short> registeredClasses = new HashMap<>();
 
 	/**
@@ -38,7 +37,7 @@ public class NdNodeTypeRegistry<R> {
 		short shortTypeId = (short)typeId;
 		String fullyQualifiedClassName = toRegister.getElementClass().getName();
 
-		if (this.types.containsKey(typeId) || this.reserved.contains(typeId)) {
+		if (this.types.containsKey(typeId) || this.reserved.get(typeId)) {
 			throw new IllegalArgumentException(
 					"The type id " + typeId + " for class " + fullyQualifiedClassName + " is already in use."); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
 		}
@@ -53,10 +52,10 @@ public class NdNodeTypeRegistry<R> {
 	 * using this method. Doing so will prevent its type ID from being reused by another future class.
 	 */
 	public void reserve(short typeId) {
-		if (this.types.containsKey(typeId) || this.reserved.contains(typeId)) {
+		if (this.types.containsKey(typeId) || this.reserved.get(typeId)) {
 			throw new IllegalArgumentException("The type ID " + typeId + " is already in use"); //$NON-NLS-1$ //$NON-NLS-2$
 		}
-		this.reserved.add(typeId);
+		this.reserved.set(typeId);
 	}
 
 	/**
commit bf47135a8cdbed2a5bca5ddbe9067c0f4e144a2e
Author: Stefan Xenos <sxenos@gmail.com>
Date:   Fri Jul 15 18:06:07 2016 -0700

    Bug 497996 - Implement David Cheung's code review suggestions
    
    Change-Id: I10fb82b65ac4517feb1c73e3f8bda54e5f6e9bb0

2	4	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassWithExternalAnnotations.java
3	12	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyBuilder.java
2	3	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java
0	3	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/db/Database.java
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassWithExternalAnnotations.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassWithExternalAnnotations.java
index 8942100..2bd8669 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassWithExternalAnnotations.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassWithExternalAnnotations.java
@@ -172,11 +172,9 @@ public class ClassWithExternalAnnotations implements IBinaryType {
 	 */
 	public static ZipFile getAnnotationZipFile(String basePath, ZipFileProducer producer) throws IOException {
 		File annotationBase = new File(basePath);
-		if (annotationBase.isDirectory()) {
-			return null; // no zipFile
+		if (!annotationBase.isFile()) {
+			return null;
 		}
-		if (!annotationBase.exists())
-			return null; // no zipFile, treat as not-yet-created directory
 		return (producer != null ? producer.produce() : new ZipFile(annotationBase));
 	}
 
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyBuilder.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyBuilder.java
index 202e4d8..defb182 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyBuilder.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/HierarchyBuilder.java
@@ -317,18 +317,9 @@ protected IBinaryType createInfoFromClassFileInJar(Openable classFile) {
 		try {
 			zipFile = ((JarPackageFragmentRoot) pkg.getParent()).getJar();
 			info = org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader.read(zipFile, classFilePath);
-		} catch (org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException e) {
-			if (TypeHierarchy.DEBUG) {
-				e.printStackTrace();
-			}
-			return null;
-		} catch (java.io.IOException e) {
-			if (TypeHierarchy.DEBUG) {
-				e.printStackTrace();
-			}
-			return null;
-		} catch (CoreException e) {
-			if (TypeHierarchy.DEBUG) {
+			} catch (org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException | java.io.IOException
+					| CoreException e) {
+				if (TypeHierarchy.DEBUG) {
 				e.printStackTrace();
 			}
 			return null;
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java
index 1137a2f..161027a 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java
@@ -513,7 +513,7 @@ private static void newSearchAllPossibleSubTypes(IType type, IJavaSearchScope sc
 		while (!typesToVisit.isEmpty()) {
 			NdType nextType = typesToVisit.removeFirst();
 			NdTypeId typeId = nextType.getTypeId();
-			
+
 			// TODO(sxenos): Temporarily filter out any types that are contained in the workspace since the old index
 			// will return those types. Remove this once the new index is servicing source types as well as external
 			// ones.
@@ -539,8 +539,7 @@ private static void newSearchAllPossibleSubTypes(IType type, IJavaSearchScope sc
 			}
 
 			for (NdType subType : typeId.getSubTypes()) {
-				if (!discoveredTypes.contains(subType)) {
-					discoveredTypes.add(subType);
+				if (discoveredTypes.add(subType)) {
 					typesToVisit.add(subType);
 				}
 			}
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/db/Database.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/db/Database.java
index ce2ba4b..1501e5f 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/db/Database.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/db/Database.java
@@ -450,9 +450,6 @@ public class Database {
 			final int oldLen= this.fChunks.length;
 			Chunk[] newchunks = new Chunk[oldLen + numChunks];
 			System.arraycopy(this.fChunks, 0, newchunks, 0, oldLen);
-			for (int i = oldLen; i < oldLen + numChunks; i++) {
-				newchunks[i]= null;
-			}
 			final Chunk chunk= new Chunk(this, oldLen + numChunks - 1);
 			chunk.fDirty= true;
 			newchunks[ oldLen + numChunks - 1 ] = chunk;

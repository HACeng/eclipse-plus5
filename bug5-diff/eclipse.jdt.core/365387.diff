commit c077066d38e166a56e4eb4a0d6b6c8b7125fd6f2
Author: Srikanth <srikanth_sankaran@in.ibm.com>
Date:   Mon Dec 5 11:03:55 2011 +0530

    Partial fix for review comments captured in bug 365387

2	2	org.eclipse.jdt.annotation/src/org/eclipse/jdt/annotation/NonNull.java
116	1	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java
7	5	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15JLS4Test.java
7	4	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java
2	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java
3	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowContext.java
2	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java
2	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java
2	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java
diff --git a/org.eclipse.jdt.annotation/src/org/eclipse/jdt/annotation/NonNull.java b/org.eclipse.jdt.annotation/src/org/eclipse/jdt/annotation/NonNull.java
index 78aa71c..9372739 100644
--- a/org.eclipse.jdt.annotation/src/org/eclipse/jdt/annotation/NonNull.java
+++ b/org.eclipse.jdt.annotation/src/org/eclipse/jdt/annotation/NonNull.java
@@ -35,8 +35,8 @@ import java.lang.annotation.Target;
  * <li>Nullness of the value can be statically determined, the entity is definitely bound from either of:
  *     <ul><li>the value <code>null</code>, or</li>
  *         <li>an entity with a {@link Nullable @Nullable} type.</li></ul></li>
- * <li>Nullness can not definitely be determined, because different code branches yield different results.</li>
- * <li>Nullness can not be determined, because other program elements are involved for which
+ * <li>Nullness cannot definitely be determined, because different code branches yield different results.</li>
+ * <li>Nullness cannot be determined, because other program elements are involved for which
  *     null annotations are lacking.</li>
  * </ol>
  * </p>
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java
index 6c6bd01..53d8a6f 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java
@@ -52,7 +52,7 @@ public NullAnnotationTest(String name) {
 // Static initializer to specify tests subset using TESTS_* static variables
 // All specified tests which do not belong to the class are skipped...
 static {
-//		TESTS_NAMES = new String[] { "test_illegal_annotation_007" };
+//		TESTS_NAMES = new String[] { "test_assignment_expression_1" };
 //		TESTS_NUMBERS = new int[] { 561 };
 //		TESTS_RANGE = new int[] { 1, 2049 };
 }
@@ -2474,6 +2474,121 @@ public void test_nonnull_var_in_constrol_structure_3() {
 		"Type mismatch: required \'@NonNull String\' but the provided value can be null\n" +
 		"----------\n");
 }
+// witness for an AIOOBE in FlowContext.recordExpectedType()
+public void test_message_send_in_control_structure_01() {
+	Map customOptions = getCompilerOptions();
+	customOptions.put(JavaCore.COMPILER_PB_NULL_SPECIFICATION_INSUFFICIENT_INFO, JavaCore.IGNORE);
+	customOptions.put(JavaCore.COMPILER_PB_POTENTIAL_NULL_REFERENCE, JavaCore.WARNING);
+	runNegativeTestWithLibs(
+		new String[] {
+			"p/Scope.java",
+			"package p;\n" +
+			"@org.eclipse.jdt.annotation.NonNullByDefault\n" +
+			"public abstract class Scope {\n" +
+			"	public ReferenceBinding findMemberType(char[] typeName, ReferenceBinding enclosingType) {\n" +
+			"		ReferenceBinding enclosingSourceType = enclosingSourceType();\n" +
+			"		PackageBinding currentPackage = getCurrentPackage();\n" +
+			"		CompilationUnitScope unitScope = compilationUnitScope();\n" +
+			"		ReferenceBinding memberType = enclosingType.getMemberType(typeName);\n" +
+			"		ReferenceBinding currentType = enclosingType;\n" +
+			"		ReferenceBinding[] interfacesToVisit = null;\n" +
+			"		while (true) {\n" +
+			"			ReferenceBinding[] itsInterfaces = currentType.superInterfaces();\n" +
+			"			if (itsInterfaces != null) {\n" +
+			"				if (interfacesToVisit == null) {\n" +
+			"					interfacesToVisit = itsInterfaces;\n" +
+			"				}\n" +
+			"			}\n" +
+			"			unitScope.recordReference(currentType, typeName);\n" +
+			"			\n" +
+			"			if ((memberType = currentType.getMemberType(typeName)) != null) {\n" +
+			"				if (enclosingSourceType == null\n" +
+			"					? memberType.canBeSeenBy(currentPackage)\n" +
+			"					: memberType.canBeSeenBy(enclosingType, enclosingSourceType)) {\n" +
+			"						return memberType;\n" +
+			"				}\n" +
+			"			}\n" +
+			"		}\n" +
+			"	}\n" +
+			"	private CompilationUnitScope compilationUnitScope() {\n" +
+			"		return compilationUnitScope();\n" +
+			"	}\n" +
+			"	private PackageBinding getCurrentPackage() {\n" +
+			"		return getCurrentPackage();\n" +
+			"	}\n" +
+			"	private ReferenceBinding enclosingSourceType() {\n" +
+			"		return enclosingSourceType();\n" +
+			"	}\n" +
+			"}\n",
+			"p/CompilationUnitScope.java",
+			"package p;\n" +
+			"@org.eclipse.jdt.annotation.NonNullByDefault\n" +
+			"public class CompilationUnitScope {\n" +
+			"    void recordReference(ReferenceBinding rb, char[] name) {}\n" +
+			"}\n",
+			"p/PackageBinding.java",
+			"package p;\n" +
+			"@org.eclipse.jdt.annotation.NonNullByDefault\n" +
+			"public class PackageBinding {\n" +
+			"}\n",
+			"p/ReferenceBinding.java",
+			"package p;\n" +
+			"@org.eclipse.jdt.annotation.NonNullByDefault\n" +
+			"public class ReferenceBinding {\n" +
+			"    ReferenceBinding getMemberType(char[] name) { return this; }\n" +
+			"    ReferenceBinding[] superInterfaces() { return new ReferenceBinding[0]; }\n" +
+			"    boolean canBeSeenBy(PackageBinding ob) { return true; }\n" +
+			"    boolean canBeSeenBy(ReferenceBinding rb, ReferenceBinding rb2) { return true; }\n" +
+			"}\n"
+		},
+		customOptions,
+		"----------\n" +
+		"1. ERROR in p\\Scope.java (at line 13)\n" +
+		"	if (itsInterfaces != null) {\n" +
+		"	    ^^^^^^^^^^^^^\n" +
+		"Redundant null check: The variable itsInterfaces cannot be null at this location\n" +
+		"----------\n" +
+		"2. ERROR in p\\Scope.java (at line 20)\n" +
+		"	if ((memberType = currentType.getMemberType(typeName)) != null) {\n" +
+		"	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" +
+		"Redundant null check: The variable memberType cannot be null at this location\n" +
+		"----------\n" +
+		"3. ERROR in p\\Scope.java (at line 21)\n" +
+		"	if (enclosingSourceType == null\n" +
+		"	    ^^^^^^^^^^^^^^^^^^^\n" +
+		"Null comparison always yields false: The variable enclosingSourceType cannot be null at this location\n" +
+		"----------\n");
+}
+public void test_assignment_expression_1() {
+	Map customOptions = getCompilerOptions();
+//	customOptions.put(CompilerOptions.OPTION_ReportPotentialNullSpecViolation, JavaCore.ERROR);
+	customOptions.put(JavaCore.COMPILER_NONNULL_IS_DEFAULT, JavaCore.ENABLED);
+	customOptions.put(JavaCore.COMPILER_PB_REDUNDANT_NULL_CHECK, JavaCore.ERROR);
+	runConformTestWithLibs(
+		new String[] {
+			"X.java",
+			"import org.eclipse.jdt.annotation.*;\n" +
+			"public class X {\n" +
+			"	@Nullable Object foo() {\n" +
+			"		Object o = null;\n" +
+			"		boolean keepLooking = true;\n" +
+			"		while(keepLooking) {\n" +
+			"			if ((o=getO()) != null) {\n" +
+			"				return o;\n" +
+			"			}\n" +
+			"		}\n" +
+			"		return null;\n" +
+			"	}\n" +
+			"\n" +
+			"	private @Nullable Object getO() {\n" +
+			"		return new Object();\n" +
+			"	}\n" +
+			"}\n",
+
+		},
+		customOptions,
+		"");	
+}
 // a nonnull variable is dereferenced method of a nested type
 public void test_nesting_1() {
 	Map customOptions = getCompilerOptions();
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15JLS4Test.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15JLS4Test.java
index 1e06c11..9c7b8e9 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15JLS4Test.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15JLS4Test.java
@@ -7476,7 +7476,6 @@ public class ASTConverter15JLS4Test extends ConverterTestSetup {
     	assertTrue("Not assignement compatible", typeBinding.isAssignmentCompatible(typeBinding2));
     	assertTrue("Not assignement compatible", typeBinding.isAssignmentCompatible(collectionTypeBinding));
 	}
-
 	/*
 	 * https://bugs.eclipse.org/bugs/show_bug.cgi?id=156352
 	 */
@@ -7495,10 +7494,13 @@ public class ASTConverter15JLS4Test extends ConverterTestSetup {
 				buffer.append(typeBinding.getAnnotations().length);
 				typeBinding= typeBinding.getSuperclass();
 			}
-			// initially, this test expected "000", but after https://bugs.eclipse.org/186342
-			// annotations are resolved more eagerly, which makes the annotations on Test2 show up,
-			// which is actually the right outcome.
-			assertEquals("Wrong number of annotations", "020", String.valueOf(buffer));
+			// the right outcome would be "020", but depending on the strategy when exactly
+			// annotations are resolved the annotations on Test2 are (not) present when
+			// traversing the super-class chain.
+			// The patch in https://bugs.eclipse.org/186342#c196 produced "020" but
+			// the previous behavior ("000") was restored in https://bugs.eclipse.org/365387
+			// (see the change in SourceTypeBinding.resolveTypesFor(..))
+			assertEquals("Wrong number of annotations", "000", String.valueOf(buffer));
 		}
 	}
 
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java
index e89ba8f..fd388a6 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java
@@ -7498,10 +7498,13 @@ public class ASTConverter15Test extends ConverterTestSetup {
 				buffer.append(typeBinding.getAnnotations().length);
 				typeBinding= typeBinding.getSuperclass();
 			}
-			// initially, this test expected "000", but after https://bugs.eclipse.org/186342
-			// annotations are resolved more eagerly, which makes the annotations on Test2 show up,
-			// which is actually the right outcome.
-			assertEquals("Wrong number of annotations", "020", String.valueOf(buffer));
+			// the right outcome would be "020", but depending on the strategy when exactly
+			// annotations are resolved the annotations on Test2 are (not) present when
+			// traversing the super-class chain.
+			// The patch in https://bugs.eclipse.org/186342#c196 produced "020" but
+			// the previous behavior ("000") was restored in https://bugs.eclipse.org/365387
+			// (see the change in SourceTypeBinding.resolveTypesFor(..))
+			assertEquals("Wrong number of annotations", "000", String.valueOf(buffer));
 		}
 	}
 
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java
index 59a7ecd..46d4540 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java
@@ -119,7 +119,7 @@ public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, Fl
 }
 public void checkNPE(BlockScope scope, FlowContext flowContext, FlowInfo flowInfo) {
 	super.checkNPE(scope, flowContext, flowInfo);
-	if (nullStatus(flowInfo) == FlowInfo.POTENTIALLY_NULL)
+	if ((nullStatus(flowInfo) & FlowInfo.POTENTIALLY_NULL) != 0)
 		scope.problemReporter().messageSendPotentialNullReference(this.binding, this);
 }
 /**
@@ -281,7 +281,7 @@ public int nullStatus(FlowInfo flowInfo) {
 		if ((tagBits & TagBits.AnnotationNonNull) != 0)
 			return FlowInfo.NON_NULL;
 		if ((tagBits & TagBits.AnnotationNullable) != 0)
-			return FlowInfo.POTENTIALLY_NULL;
+			return FlowInfo.POTENTIALLY_NULL | FlowInfo.POTENTIALLY_NON_NULL;
 	}
 	return FlowInfo.UNKNOWN;
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowContext.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowContext.java
index 7df8a71..98caf30 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowContext.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/flow/FlowContext.java
@@ -564,9 +564,10 @@ protected void recordExpectedType(TypeBinding expectedType, int nullCount) {
 		while (size <= nullCount) size *= 2;
 		this.expectedTypes = new TypeBinding[size];
 	}
-	else if (nullCount == this.expectedTypes.length) {
+	else if (nullCount >= this.expectedTypes.length) {
+		int oldLen = this.expectedTypes.length;
 		System.arraycopy(this.expectedTypes, 0,
-			this.expectedTypes = new TypeBinding[nullCount * 2], 0, nullCount);
+			this.expectedTypes = new TypeBinding[nullCount * 2], 0, oldLen);
 	}
 	this.expectedTypes[nullCount] = expectedType;
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java
index 0ac09c9..c973fd3 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java
@@ -778,6 +778,7 @@ public class CompilerOptions {
 			OPTION_NonNullIsDefault,
 			OPTION_ReportNullSpecViolation,
 			OPTION_ReportPotentialNullSpecViolation,
+			OPTION_ReportNullSpecInsufficientInfo,
 			OPTION_ReportRedundantNullAnnotation
 		};
 		return result;
@@ -1225,6 +1226,7 @@ public class CompilerOptions {
 		this.nullableAnnotationName = DEFAULT_NULLABLE_ANNOTATION_NAME;
 		this.nonNullAnnotationName = DEFAULT_NONNULL_ANNOTATION_NAME;
 		this.nonNullByDefaultAnnotationName = DEFAULT_NONNULLBYDEFAULT_ANNOTATION_NAME;
+		this.defaultNonNullness = 0;
 	}
 
 	public void set(Map optionsMap) {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java
index 094c155..e8b277c 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java
@@ -1597,7 +1597,8 @@ public MethodBinding resolveTypesFor(MethodBinding method) {
 				typeParameters[i].binding = null;
 		return null;
 	}
-	createArgumentBindings(method);
+	if (this.scope.compilerOptions().isAnnotationBasedNullAnalysisEnabled)
+		createArgumentBindings(method); // need annotations resolved already at this point
 	if (foundReturnTypeProblem)
 		return method; // but its still unresolved with a null return type & is still connected to its method declaration
 
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java
index ca6b9fa..b381b01 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Scanner.java
@@ -547,11 +547,11 @@ public final int getLineEnd(int lineNumber) {
 
 	if (this.lineEnds == null || this.linePtr == -1)
 		return -1;
-	if (lineNumber > this.linePtr + 2)
+	if (lineNumber > this.lineEnds.length+1)
 		return -1;
 	if (lineNumber <= 0)
 		return -1;
-	if (lineNumber == this.linePtr + 2)
+	if (lineNumber == this.lineEnds.length + 1)
 		return this.eofPosition;
 	return this.lineEnds[lineNumber-1]; // next line start one character behind the lineEnd of the previous line
 }
commit 40ad9904e939ba54abece52421044021edd6e1c0
Author: Stephan Herrmann <sherrmann>
Date:   Sun Jan 15 13:12:01 2012 +0100

    HEAD - Fixed Bug 365387 - [compiler][null] bug 186342: Issues to follow
    up post review and verification. Item (22).

3	1	org.eclipse.jdt.core/buildnotes_jdt-core.html
17	19	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java
diff --git a/org.eclipse.jdt.core/buildnotes_jdt-core.html b/org.eclipse.jdt.core/buildnotes_jdt-core.html
index 70d29fb..23124c2 100644
--- a/org.eclipse.jdt.core/buildnotes_jdt-core.html
+++ b/org.eclipse.jdt.core/buildnotes_jdt-core.html
@@ -52,7 +52,9 @@ Eclipse SDK 3.8.0 - %date% - 3.8.0 M5
 <h2>What's new in this drop</h2>
 
 <h3>Problem Reports Fixed</h3>
-<a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=365519">365519</a>
+<a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=365387">365387</a>
+[compiler][null] bug 186342: Issues to follow up post review and verification.
+<br><a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=365519">365519</a>
 editorial cleanup after bug 186342 and bug 365387
 <br><a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=368435">368435</a>
 [compiler] NPE while compile a method with unused local
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java
index 9294726..ca320fa 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2011 IBM Corporation and others.
+ * Copyright (c) 2000, 2012 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -11,6 +11,7 @@
  *								bug 349326 - [1.7] new warning for missing try-with-resources
  *								bug 186342 - [compiler][null] Using annotations for null checking
  *								bug 364890 - BinaryTypeBinding should use char constants from Util
+ *								bug 365387 - [compiler][null] bug 186342: Issues to follow up post review and verification.
  *******************************************************************************/
 package org.eclipse.jdt.internal.compiler.lookup;
 
@@ -389,7 +390,13 @@ void cachePartsFrom(IBinaryType binaryType, boolean needFieldsAndMethods) {
 		if (this.environment.globalOptions.storeAnnotations)
 			setAnnotations(createAnnotations(binaryType.getAnnotations(), this.environment, missingTypeNames));
 
-		scanTypeForNullAnnotation(binaryType);
+		if (this.environment.globalOptions.isAnnotationBasedNullAnalysisEnabled
+				&& CharOperation.equals(TypeConstants.PACKAGE_INFO_NAME, binaryType.getSourceName())) 
+		{
+			// only for package-info.java can type-level null-annotations (i.e., @NonNullByDefault) 
+			// on a binary type influence the compilation
+			scanPackageInfoForNullDefaultAnnotation(binaryType);
+		}
 	} finally {
 		// protect against incorrect use of the needFieldsAndMethods flag, see 48459
 		if (this.fields == null)
@@ -1209,18 +1216,15 @@ void scanMethodForNullAnnotation(IBinaryMethod method, MethodBinding methodBindi
 		}
 	}
 }
-void scanTypeForNullAnnotation(IBinaryType binaryType) {
-	if (!this.environment.globalOptions.isAnnotationBasedNullAnalysisEnabled)
-		return;
+void scanPackageInfoForNullDefaultAnnotation(IBinaryType binaryType) {
 	char[][] nonNullByDefaultAnnotationName = this.environment.getNonNullByDefaultAnnotationName();
 	if (nonNullByDefaultAnnotationName == null)
 		return; // not well-configured to use null annotations
 
 	IBinaryAnnotation[] annotations = binaryType.getAnnotations();
 	if (annotations != null) {
-		long annotationBit = 0L;
-		TypeBinding defaultNullness = null;
-		for (int i = 0; i < annotations.length; i++) {
+		int length = annotations.length;
+		for (int i = 0; i < length; i++) {
 			char[] annotationTypeName = annotations[i].getTypeName();
 			if (annotationTypeName[0] != Util.C_RESOLVED)
 				continue;
@@ -1233,21 +1237,15 @@ void scanTypeForNullAnnotation(IBinaryType binaryType) {
 						&& !((BooleanConstant)value).booleanValue())
 					{
 						// parameter is 'false': this means we cancel defaults from outer scopes:
-						annotationBit = TagBits.AnnotationNullUnspecifiedByDefault;
-						defaultNullness = ReferenceBinding.NULL_UNSPECIFIED;
-						break;
+						this.getPackage().nullnessDefaultAnnotation = ReferenceBinding.NULL_UNSPECIFIED;
+						return;
 					}
 				}
-				annotationBit = TagBits.AnnotationNonNullByDefault;
-				defaultNullness = this.environment.getNullAnnotationBinding(TagBits.AnnotationNonNull, false/*resolve*/);
-				break;
+				this.getPackage().nullnessDefaultAnnotation = 
+						this.environment.getNullAnnotationBinding(TagBits.AnnotationNonNull, false/*resolve*/);
+				return;
 			}
 		}
-		if (annotationBit != 0L) {
-			this.tagBits |= annotationBit;
-			if (CharOperation.equals(this.sourceName(), TypeConstants.PACKAGE_INFO_NAME))
-				this.getPackage().nullnessDefaultAnnotation = defaultNullness;
-		}
 	}
 }
 

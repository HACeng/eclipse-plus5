commit fc3a0e68581fa07a1c3eb5b4b0688220544ee299
Author: Stefan Xenos <sxenos@gmail.com>
Date:   Mon Aug 29 21:58:40 2016 -0700

    Bug 500467 - [newindex] Fix test failures in JavaProjectTests
    
    Change-Id: I435abc7c2bd5cc8083a4bd8956810f21860f9c37
    Signed-off-by: Stefan Xenos <sxenos@gmail.com>

23	33	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/ClassFileToIndexConverter.java
8	4	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/Indexer.java
3	3	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/JavaIndex.java
24	0	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdType.java
9	1	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/model/IndexBinaryType.java
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/ClassFileToIndexConverter.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/ClassFileToIndexConverter.java
index d778125..c2d25b1 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/ClassFileToIndexConverter.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/ClassFileToIndexConverter.java
@@ -4,11 +4,11 @@ import java.lang.reflect.Modifier;
 import java.util.ArrayList;
 import java.util.List;
 
-import org.eclipse.core.resources.IResource;
 import org.eclipse.core.runtime.CoreException;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.jdt.core.IClassFile;
 import org.eclipse.jdt.core.compiler.CharOperation;
+import org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException;
 import org.eclipse.jdt.internal.compiler.classfmt.TypeAnnotationWalker;
 import org.eclipse.jdt.internal.compiler.env.ClassSignature;
 import org.eclipse.jdt.internal.compiler.env.EnumConstantSignature;
@@ -21,7 +21,6 @@ import org.eclipse.jdt.internal.compiler.env.IBinaryTypeAnnotation;
 import org.eclipse.jdt.internal.compiler.env.ITypeAnnotationWalker;
 import org.eclipse.jdt.internal.compiler.impl.Constant;
 import org.eclipse.jdt.internal.compiler.lookup.SignatureWrapper;
-import org.eclipse.jdt.internal.core.ClassFile;
 import org.eclipse.jdt.internal.core.JarPackageFragmentRoot;
 import org.eclipse.jdt.internal.core.JavaModelManager;
 import org.eclipse.jdt.internal.core.Openable;
@@ -52,11 +51,13 @@ import org.eclipse.jdt.internal.core.nd.java.NdTypeInterface;
 import org.eclipse.jdt.internal.core.nd.java.NdTypeParameter;
 import org.eclipse.jdt.internal.core.nd.java.NdTypeSignature;
 import org.eclipse.jdt.internal.core.nd.java.NdVariable;
+import org.eclipse.jdt.internal.core.nd.java.model.BinaryTypeDescriptor;
+import org.eclipse.jdt.internal.core.nd.java.model.BinaryTypeFactory;
 import org.eclipse.jdt.internal.core.nd.util.CharArrayUtils;
 import org.eclipse.jdt.internal.core.util.CharArrayBuffer;
 import org.eclipse.jdt.internal.core.util.Util;
 
-public class ClassFileToIndexConverter {
+public final class ClassFileToIndexConverter {
 	private static final char[] JAVA_LANG_OBJECT_FIELD_DESCRIPTOR = "Ljava/lang/Object;".toCharArray(); //$NON-NLS-1$
 	private static final char[] INNER_TYPE_SEPARATOR = new char[] { '$' };
 	private static final char[] FIELD_DESCRIPTOR_SUFFIX = new char[] { ';' };
@@ -79,32 +80,9 @@ public class ClassFileToIndexConverter {
 	}
 
 	public static IBinaryType getTypeFromClassFile(IClassFile iClassFile, IProgressMonitor monitor)
-			throws CoreException {
-		ClassFile classFile = (ClassFile) iClassFile;
-		IBinaryType binaryType;
-		// create binary type from file
-		if (classFile.getPackageFragmentRoot().isArchive()) {
-			binaryType = createInfoFromClassFileInJar(classFile);
-		} else {
-			binaryType = createInfoFromClassFile(classFile.resource());
-		}
-
-		return binaryType;
-	}
-
-	/**
-	 * Creates the type info from the given class file on disk and adds it to the given list of infos.
-	 *
-	 * @throws CoreException
-	 */
-	protected static IBinaryType createInfoFromClassFile(IResource file) throws CoreException {
-		IBinaryType info = null;
-		try {
-			info = Util.newClassFileReader(file);
-		} catch (Exception e) {
-			throw new CoreException(Package.createStatus("Unable to parse class file", e)); //$NON-NLS-1$
-		}
-		return info;
+			throws CoreException, ClassFormatException {
+		BinaryTypeDescriptor descriptor = BinaryTypeFactory.createDescriptor(iClassFile);
+		return BinaryTypeFactory.rawReadType(descriptor, true);
 	}
 
 	/**
@@ -128,11 +106,19 @@ public class ClassFileToIndexConverter {
 		return info;
 	}
 
-	public NdType addType(IBinaryType binaryType, IProgressMonitor monitor) throws CoreException {
-		char[] binaryName = binaryType.getName();
-		logInfo("adding binary type " + new String(binaryName)); //$NON-NLS-1$
+	/**
+	 * Adds a type to the index, given an input class file and a binary name. Note that the given binary name is 
+	 * 
+	 * @param binaryType an object used for parsing the .class file itself
+	 * @param fieldDescriptor the name that is used to locate the class, computed from the .class file's name and location.
+	 * In the event that the .class file has been moved, this may differ from the binary name stored in the .class file
+	 * itself, which is why this is received as an argument rather than extracted from the .class file.
+	 * @throws CoreException
+	 */
+	public NdType addType(IBinaryType binaryType, char[] fieldDescriptor, IProgressMonitor monitor) throws CoreException {
+		char[] fieldDescriptorFromClass = JavaNames.binaryNameToFieldDescriptor(binaryType.getName());
+		logInfo("adding binary type " + new String(fieldDescriptor)); //$NON-NLS-1$
 
-		char[] fieldDescriptor = JavaNames.binaryNameToFieldDescriptor(binaryName);
 		NdTypeId name = createTypeIdFromFieldDescriptor(fieldDescriptor);
 		NdType type = name.findTypeByResourceAddress(this.resource.address);
 
@@ -146,6 +132,10 @@ public class ClassFileToIndexConverter {
 
 		type.setTypeId(name);
 
+		if (!CharArrayUtils.equals(fieldDescriptorFromClass, fieldDescriptor)) {
+			type.setFieldDescriptorFromClass(fieldDescriptorFromClass);
+		}
+
 		char[][] interfaces = binaryType.getInterfaceNames();
 		if (interfaces == null) {
 			interfaces = EMPTY_CHAR_ARRAY_ARRAY;
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/Indexer.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/Indexer.java
index 0acacfb..fd26a23 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/Indexer.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/indexer/Indexer.java
@@ -39,7 +39,8 @@ import org.eclipse.jdt.core.IPackageFragmentRoot;
 import org.eclipse.jdt.core.IParent;
 import org.eclipse.jdt.core.JavaCore;
 import org.eclipse.jdt.core.JavaModelException;
-import org.eclipse.jdt.internal.compiler.env.IBinaryType;
+import org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader;
+import org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException;
 import org.eclipse.jdt.internal.core.JavaElementDelta;
 import org.eclipse.jdt.internal.core.JavaModel;
 import org.eclipse.jdt.internal.core.JavaModelManager;
@@ -50,6 +51,8 @@ import org.eclipse.jdt.internal.core.nd.java.FileFingerprint.FingerprintTestResu
 import org.eclipse.jdt.internal.core.nd.java.JavaIndex;
 import org.eclipse.jdt.internal.core.nd.java.NdResourceFile;
 import org.eclipse.jdt.internal.core.nd.java.NdWorkspaceLocation;
+import org.eclipse.jdt.internal.core.nd.java.model.BinaryTypeDescriptor;
+import org.eclipse.jdt.internal.core.nd.java.model.BinaryTypeFactory;
 import org.eclipse.jdt.internal.core.search.processing.IJob;
 
 public final class Indexer {
@@ -617,7 +620,8 @@ public final class Indexer {
 			SubMonitor iterationMonitor = subMonitor.split(1).setWorkRemaining(100);
 
 			try {
-				IBinaryType binaryType = ClassFileToIndexConverter.getTypeFromClassFile(next, iterationMonitor.split(50));
+				BinaryTypeDescriptor descriptor = BinaryTypeFactory.createDescriptor(next);
+				ClassFileReader binaryType = BinaryTypeFactory.rawReadType(descriptor, true);
 
 				this.nd.acquireWriteLock(iterationMonitor.split(5));
 				try {
@@ -625,12 +629,12 @@ public final class Indexer {
 						return classesIndexed;
 					}
 
-					converter.addType(binaryType, iterationMonitor.split(45));
+					converter.addType(binaryType, descriptor.fieldDescriptor, iterationMonitor.split(45));
 					classesIndexed++;
 				} finally {
 					this.nd.releaseWriteLock();
 				}
-			} catch (CoreException e) {
+			} catch (CoreException | ClassFormatException e) {
 				Package.log("Unable to index " + next.toString(), e); //$NON-NLS-1$
 			}
 
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/JavaIndex.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/JavaIndex.java
index 3274849..dc1f6d2 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/JavaIndex.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/JavaIndex.java
@@ -37,9 +37,9 @@ import org.eclipse.jdt.internal.core.nd.util.CharArrayUtils;
  */
 public class JavaIndex {
 	// Version constants
-	static final int CURRENT_VERSION = Nd.version(1, 35);
-	static final int MAX_SUPPORTED_VERSION = Nd.version(1, 35);
-	static final int MIN_SUPPORTED_VERSION = Nd.version(1, 35);
+	static final int CURRENT_VERSION = Nd.version(1, 36);
+	static final int MAX_SUPPORTED_VERSION = Nd.version(1, 36);
+	static final int MIN_SUPPORTED_VERSION = Nd.version(1, 36);
 
 	// Fields for the search header
 	public static final FieldSearchIndex<NdResourceFile> FILES;
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdType.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdType.java
index abed112..61b2468 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdType.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/NdType.java
@@ -39,6 +39,12 @@ public class NdType extends NdBinding {
 	public static final FieldString INNER_CLASS_SOURCE_NAME;
 	public static final FieldByte FLAGS;
 	public static final FieldLong TAG_BITS;
+	/**
+	 * Binary name that was recorded in the .class file if different from the binary
+	 * name that was determined by the .class's name and location. This is only set for
+	 * .class files that have been moved to the wrong folder.
+	 */
+	public static final FieldString FIELD_DESCRIPTOR_FROM_CLASS;
 
 	@SuppressWarnings("hiding")
 	public static final StructDef<NdType> type;
@@ -56,6 +62,7 @@ public class NdType extends NdBinding {
 		INNER_CLASS_SOURCE_NAME = type.addString();
 		FLAGS = type.addByte();
 		TAG_BITS = type.addLong();
+		FIELD_DESCRIPTOR_FROM_CLASS = type.addString();
 		type.done();
 	}
 
@@ -230,4 +237,21 @@ public class NdType extends NdBinding {
 	public long getTagBits() {
 		return TAG_BITS.get(getNd(), this.address);
 	}
+
+	public void setFieldDescriptorFromClass(char[] fieldDescriptorFromClass) {
+		FIELD_DESCRIPTOR_FROM_CLASS.put(getNd(), this.address, fieldDescriptorFromClass);
+	}
+
+	/**
+	 * Returns the field descriptor for this type, based on the binary type information stored in the
+	 * .class file itself. Note that this may differ from the field descriptor of this type's typeId in
+	 * the event that the .class file has been moved.
+	 */
+	public IString getFieldDescriptor() {
+		IString descriptorFromClass = FIELD_DESCRIPTOR_FROM_CLASS.get(getNd(), this.address);
+		if (descriptorFromClass.length() == 0) {
+			return getTypeId().getFieldDescriptor();
+		}
+		return descriptorFromClass;
+	}
 }
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/model/IndexBinaryType.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/model/IndexBinaryType.java
index b637b08..48617cf 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/model/IndexBinaryType.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/nd/java/model/IndexBinaryType.java
@@ -63,6 +63,8 @@ public class IndexBinaryType implements IBinaryType {
 
 	private long tagBits;
 
+	private char[] binaryTypeName;
+
 	private static final IBinaryAnnotation[] NO_ANNOTATIONS = new IBinaryAnnotation[0];
 
 	public IndexBinaryType(TypeRef type, char[] indexPath) {
@@ -305,7 +307,9 @@ public class IndexBinaryType implements IBinaryType {
 
 	@Override
 	public char[] getName() {
-		return JavaNames.fieldDescriptorToBinaryName(this.typeRef.getFieldDescriptor());
+		initSimpleAttributes();
+
+		return this.binaryTypeName;
 	}
 
 	@Override
@@ -644,6 +648,10 @@ public class IndexBinaryType implements IBinaryType {
 					} else {
 						this.superclassName = null;
 					}
+
+					this.binaryTypeName = JavaNames.fieldDescriptorToBinaryName(type.getFieldDescriptor().getChars());
+				} else {
+					this.binaryTypeName = JavaNames.fieldDescriptorToBinaryName(this.typeRef.getFieldDescriptor());
 				}
 			}
 		}

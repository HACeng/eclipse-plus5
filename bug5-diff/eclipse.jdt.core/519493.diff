commit a6f8fd76d9227338cb6d3c0f8edbb98361af9be6
Author: Manoj Palat <manpalat@in.ibm.com>
Date:   Wed Nov 8 17:48:30 2017 +0530

    Fix for Bug 519493: [9][dom ast] getDeclaringModule() requirement
    
    Change-Id: I7e56e33c5e690d7d82a049696ae66ebbf5b47d6c

190	0	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter9Test.java
11	1	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IPackageBinding.java
21	0	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ITypeBinding.java
6	0	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/PackageBinding.java
24	1	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/RecoveredTypeBinding.java
9	2	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter9Test.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter9Test.java
index 9dc228d..1f3e48c 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter9Test.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter9Test.java
@@ -826,5 +826,195 @@ public class ASTConverter9Test extends ConverterTestSetup {
 		}
 	}
 
+	public void testBug519493_001() throws Exception {
+		try {
+
+			IJavaProject project1 = createJavaProject("ConverterTests9", new String[] {"src"}, new String[] {jcl9lib}, "bin", "9");
+			project1.open(null);
+			String fileContent =
+				"module first {\n" +
+				"    exports pack1;\n" +
+				"}";
+			createFile("/ConverterTests9/src/module-info.java",	fileContent);
+			createFolder("/ConverterTests9/src/pack1");
+			createFile("/ConverterTests9/src/pack1/X.java",
+					"package pack1;\n" +
+					"public class X{}\n");
+
+			project1.close(); // sync
+			project1.open(null);
+
+			ICompilationUnit sourceUnit1 = getCompilationUnit("ConverterTests9" , "src", "pack1", "X.java"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
+			ASTNode unit1 = runConversion(AST_INTERNAL_JLS9, sourceUnit1, true);
+			assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, unit1.getNodeType());
+			TypeDeclaration typedeclaration = (TypeDeclaration) getASTNode((CompilationUnit) unit1, 0);
+			ITypeBinding typeBinding = typedeclaration.resolveBinding();
+			IModuleBinding moduleBinding = typeBinding.getModule();
+			assertTrue("Module binding null", moduleBinding != null);
+			String moduleName = moduleBinding.getName();
+			assertTrue("null module name", moduleName != null);
+			assertTrue("wrong module name", moduleName.equals("first"));
+		}
+		finally {
+			deleteProject("ConverterTests9");
+		}
+	}
+	public void testBug519493_002() throws Exception {
+		try {
+
+			IJavaProject project1 = createJavaProject("ConverterTests9", new String[] {"src"}, new String[] {jcl9lib}, "bin", "9");
+			project1.open(null);
+			String fileContent =
+				"module first {\n" +
+				"    exports pack1;\n" +
+				"}";
+			createFile("/ConverterTests9/src/module-info.java",	fileContent);
+			createFolder("/ConverterTests9/src/pack1");
+			createFile("/ConverterTests9/src/pack1/X.java",
+					"package pack1;\n" +
+					"public class X<T>{}\n");
+
+			project1.close(); // sync
+			project1.open(null);
+
+			ICompilationUnit sourceUnit1 = getCompilationUnit("ConverterTests9" , "src", "pack1", "X.java"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
+			ASTNode unit1 = runConversion(AST_INTERNAL_JLS9, sourceUnit1, true);
+			assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, unit1.getNodeType());
+			TypeDeclaration typedeclaration = (TypeDeclaration) getASTNode((CompilationUnit) unit1, 0);
+			TypeParameter typeParameter = (TypeParameter) typedeclaration.typeParameters().get(0);
+			ITypeBinding typeBinding = typeParameter.resolveBinding();
+			IModuleBinding moduleBinding = typeBinding.getModule();
+			assertTrue("Module binding non-null", moduleBinding == null);
+		}
+		finally {
+			deleteProject("ConverterTests9");
+		}
+	}
+	public void testBug519493_003() throws Exception {
+		try {
+
+			IJavaProject project1 = createJavaProject("ConverterTests9", new String[] {"src"}, new String[] {jcl9lib}, "bin", "9");
+			project1.open(null);
+			String fileContent =
+				"module first {\n" +
+				"    exports pack1;\n" +
+				"}";
+			createFile("/ConverterTests9/src/module-info.java",	fileContent);
+			createFolder("/ConverterTests9/src/pack1");
+			createFile("/ConverterTests9/src/pack1/X.java",
+					"package pack1;\n" +
+					"public class X{\n" +
+					"    public class Y{}\n" +
+					"}\n");
+
+			project1.close(); // sync
+			project1.open(null);
+
+			ICompilationUnit sourceUnit1 = getCompilationUnit("ConverterTests9" , "src", "pack1", "X.java"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
+			ASTNode unit1 = runConversion(AST_INTERNAL_JLS9, sourceUnit1, true);
+			assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, unit1.getNodeType());
+			TypeDeclaration typedeclaration = (TypeDeclaration) getASTNode((CompilationUnit) unit1, 0);
+			typedeclaration = typedeclaration.getTypes()[0];
+			ITypeBinding typeBinding = typedeclaration.resolveBinding();
+			IModuleBinding moduleBinding = typeBinding.getModule();
+			assertTrue("Module binding null", moduleBinding != null);
+			String moduleName = moduleBinding.getName();
+			assertTrue("null module name", moduleName != null);
+			assertTrue("wrong module name", moduleName.equals("first"));
+		}
+		finally {
+			deleteProject("ConverterTests9");
+		}
+	}
+	public void testBug519493_004() throws Exception {
+		try {
+
+			IJavaProject project1 = createJavaProject("ConverterTests9", new String[] {"src"}, new String[] {jcl9lib}, "bin", "9");
+			project1.open(null);
+			String fileContent =
+				"module first {\n" +
+				"}";
+			createFile("/ConverterTests9/src/module-info.java",	fileContent);
+			createFile("/ConverterTests9/src/X.java",
+					"public class X{}\n");
+
+			project1.close(); // sync
+			project1.open(null);
+
+			ICompilationUnit sourceUnit1 = getCompilationUnit("ConverterTests9" , "src", "", "X.java"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
+			ASTNode unit1 = runConversion(AST_INTERNAL_JLS9, sourceUnit1, true);
+			assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, unit1.getNodeType());
+			TypeDeclaration typedeclaration = (TypeDeclaration) getASTNode((CompilationUnit) unit1, 0);
+			ITypeBinding typeBinding = typedeclaration.resolveBinding();
+			IModuleBinding moduleBinding = typeBinding.getModule();
+			assertTrue("Module binding null", moduleBinding != null);
+			String moduleName = moduleBinding.getName();
+			assertTrue("null module name", moduleName != null);
+			assertTrue("wrong module name", moduleName.equals("first"));
+		}
+		finally {
+			deleteProject("ConverterTests9");
+		}
+	}
+	public void testBug519493_005() throws Exception {
+		try {
+
+			IJavaProject project1 = createJavaProject("ConverterTests9", new String[] {"src"}, new String[] {jcl9lib}, "bin", "9");
+			project1.open(null);
+			createFile("/ConverterTests9/src/X.java",
+					"public class X{}\n");
+
+			project1.close(); // sync
+			project1.open(null);
+
+			ICompilationUnit sourceUnit1 = getCompilationUnit("ConverterTests9" , "src", "", "X.java"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
+			ASTNode unit1 = runConversion(AST_INTERNAL_JLS9, sourceUnit1, true);
+			assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, unit1.getNodeType());
+			TypeDeclaration typedeclaration = (TypeDeclaration) getASTNode((CompilationUnit) unit1, 0);
+			ITypeBinding typeBinding = typedeclaration.resolveBinding();
+			IModuleBinding moduleBinding = typeBinding.getModule();
+			assertTrue("Module binding null", moduleBinding != null);
+			String moduleName = moduleBinding.getName();
+			assertTrue("null module name", moduleName != null);
+			assertTrue("wrong module name", moduleName.equals(""));
+		}
+		finally {
+			deleteProject("ConverterTests9");
+		}
+	}
+	public void testBug519493_006() throws Exception {
+		try {
+
+			IJavaProject project1 = createJavaProject("ConverterTests9", new String[] {"src"}, new String[] {jcl9lib}, "bin", "9");
+			project1.open(null);
+			String fileContent =
+				"module first {\n" +
+				"}";
+			createFile("/ConverterTests9/src/module-info.java",	fileContent);
+			createFolder("/ConverterTests9/src/pack1");
+			createFile("/ConverterTests9/src/pack1/X.java",
+					"package pack1;\n" +
+					"public class X{\n" +
+					"    public class Y{}\n" +
+					"}\n");
+
+			project1.close(); // sync
+			project1.open(null);
+
+			ICompilationUnit sourceUnit1 = getCompilationUnit("ConverterTests9" , "src", "pack1", "X.java"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
+			ASTNode unit1 = runConversion(AST_INTERNAL_JLS9, sourceUnit1, true);
+			assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, unit1.getNodeType());
+			PackageDeclaration packageDeclaration  = ((CompilationUnit) unit1).getPackage();
+			IPackageBinding packageBinding = packageDeclaration.resolveBinding();
+			IModuleBinding moduleBinding = packageBinding.getModule();
+			assertTrue("Module binding null", moduleBinding != null);
+			String moduleName = moduleBinding.getName();
+			assertTrue("null module name", moduleName != null);
+			assertTrue("wrong module name", moduleName.equals("first"));
+		}
+		finally {
+			deleteProject("ConverterTests9");
+		}
+	}
 // Add new tests here
 }
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IPackageBinding.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IPackageBinding.java
index cd6ac47..479cc67 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IPackageBinding.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IPackageBinding.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2008 IBM Corporation and others.
+ * Copyright (c) 2000, 2017 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -49,6 +49,16 @@ public interface IPackageBinding extends IBinding {
 	 */
 	public String[] getNameComponents();
 
+	/**
+	 * Returns the binding of the module associated with this package binding.
+	 * @return the binding of the module associated with this package, or
+	 * <code>null</code> if none
+	 * 
+	 * @since 3.14
+	 */
+	public default IModuleBinding getModule() {
+		return null;
+	}
 //	/**
 //	 * Finds and returns the binding for the class or interface with the given
 //	 * name declared in this package.
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ITypeBinding.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ITypeBinding.java
index 0603d9e..06771ab 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ITypeBinding.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ITypeBinding.java
@@ -277,6 +277,27 @@ public interface ITypeBinding extends IBinding {
 	public IBinding getDeclaringMember();
 
 	/**
+	 * Returns the binding of the module associated with the package in which
+	 * this type is declared.
+	 *
+	 * <p>The module of a recovered type reference binding is the module
+	 * associated with the package returned by {@link #getPackage()} ie either
+	 * the module associated with the package of the enclosing type, or, 
+	 * if the type name is the name of a {@linkplain AST#resolveWellKnownType(String) 
+	 * well-known type},  the module associated with the package of the matching 
+	 * well-known type.</p>
+	 *
+	 * @return the binding of the module associated with the package
+	 * in which this class, interface, enum, or annotation type is declared, 
+	 * or <code>null</code> if this type binding represents a primitive type, an array type, 
+	 * the null type, a type variable, a wildcard type or a capture binding.
+	 *
+	 * @since 3.14
+	 */
+	public default IModuleBinding getModule() {
+		return null;
+	}
+	/**
 	 * Returns the dimensionality of this array type, or <code>0</code> if this
 	 * is not an array type binding.
 	 *
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/PackageBinding.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/PackageBinding.java
index 4e97184..3581347 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/PackageBinding.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/PackageBinding.java
@@ -29,6 +29,7 @@ import org.eclipse.jdt.internal.compiler.env.IBinaryType;
 import org.eclipse.jdt.internal.compiler.env.INameEnvironment;
 import org.eclipse.jdt.internal.compiler.env.NameEnvironmentAnswer;
 import org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding;
+import org.eclipse.jdt.internal.compiler.lookup.ModuleBinding;
 import org.eclipse.jdt.internal.compiler.lookup.TypeConstants;
 import org.eclipse.jdt.internal.compiler.util.Util;
 import org.eclipse.jdt.internal.core.NameLookup;
@@ -128,6 +129,11 @@ class PackageBinding implements IPackageBinding {
 		return AnnotationBinding.NoAnnotations;
 	}
 
+	@Override
+	public IModuleBinding getModule() {
+		ModuleBinding moduleBinding = this.binding.enclosingModule;
+		return moduleBinding != null ? this.resolver.getModuleBinding(moduleBinding) : null;
+	}
 	/*
 	 * @see IBinding#getName()
 	 */
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/RecoveredTypeBinding.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/RecoveredTypeBinding.java
index 76c9bc7..4e754f0 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/RecoveredTypeBinding.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/RecoveredTypeBinding.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007, 2015 IBM Corporation and others.
+ * Copyright (c) 2007, 2017 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -20,6 +20,7 @@ import org.eclipse.jdt.core.compiler.CharOperation;
 import org.eclipse.jdt.internal.compiler.lookup.ArrayBinding;
 import org.eclipse.jdt.internal.compiler.lookup.Binding;
 import org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope;
+import org.eclipse.jdt.internal.compiler.lookup.PackageBinding;
 import org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding;
 import org.eclipse.jdt.internal.compiler.util.SuffixConstants;
 import org.eclipse.jdt.internal.compiler.util.Util;
@@ -249,6 +250,28 @@ class RecoveredTypeBinding implements ITypeBinding {
 		return getTypeNameFrom(getType());
 	}
 
+	@Override
+	public IModuleBinding getModule() {
+		if (this.binding != null) {
+			switch (this.binding.kind()) {
+				case Binding.BASE_TYPE :
+				case Binding.ARRAY_TYPE :
+				case Binding.TYPE_PARAMETER : // includes capture scenario
+				case Binding.WILDCARD_TYPE :
+				case Binding.INTERSECTION_TYPE:
+					return null;
+			}
+			return getModule(this.binding.getPackage());
+		}
+		CompilationUnitScope scope = this.resolver.scope();
+		return scope != null ? getModule(scope.getCurrentPackage()) : null;
+	}
+
+	private IModuleBinding getModule(PackageBinding pBinding) {
+		IPackageBinding packageBinding = this.resolver.getPackageBinding(pBinding);
+		return packageBinding != null ? packageBinding.getModule() : null;
+	}
+
 	/* (non-Javadoc)
 	 * @see org.eclipse.jdt.core.dom.ITypeBinding#getPackage()
 	 */
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java
index 1fd7224..17396c7 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeBinding.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2015 IBM Corporation and others.
+ * Copyright (c) 2000, 2017 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -451,7 +451,14 @@ class TypeBinding implements ITypeBinding {
 		}
 		return null;
 	}
-
+	@Override
+	public IModuleBinding getModule() {
+		if (this.binding instanceof ReferenceBinding && !this.binding.isTypeVariable()) {
+			IPackageBinding packageBinding = this.resolver.getPackageBinding(((ReferenceBinding) this.binding).getPackage());
+			return packageBinding != null ? packageBinding.getModule() : null;
+		}
+		return null;
+	}
 	@Override
 	public IBinding getDeclaringMember() {
 		return null;

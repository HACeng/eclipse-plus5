commit df9615ffbbc7235a218c4e9aa88ba85075714875
Author: ssankaran <srikanth_sankaran@in.ibm.com>
Date:   Tue Feb 26 15:06:03 2013 +0530

    Fixed Bug 401610 - [1.8][compiler] Allow lambda expressions in
    non-overloaded method invocation contexts

159	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
8	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java
120	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
9	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java
25	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/PolyExpression.java
1	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Binding.java
2	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java
60	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/PolyTypeBinding.java
6	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
index 0488d02..b263c15 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
@@ -4976,6 +4976,165 @@ this.runNegativeTest(
 				"The type of foo() from the type X is Zork, this is incompatible with the descriptor\'s return type: int[]\n" + 
 				"----------\n");
 }
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=401610, [1.8][compiler] Allow lambda/reference expressions in non-overloaded method invocation contexts
+public void test401610() {
+this.runConformTest(
+		new String[] {
+				"X.java",
+				"interface I {\n" +
+				"    void foo();\n" +
+				"}\n" +
+				"public class X {\n" +
+				"	void foo(I i) {\n" +
+				"		System.out.println(\"foo\");\n" +
+				"	}\n" +
+				"	public static void main(String[] args) {\n" +
+				"		new X().foo(()->{});\n" +
+				"	}\n" +
+				"}\n",
+				},
+				"foo");
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=401610, [1.8][compiler] Allow lambda/reference expressions in non-overloaded method invocation contexts
+public void test401610a() {
+this.runConformTest(
+		new String[] {
+				"X.java",
+				"interface I {\n" +
+				"    void foo();\n" +
+				"}\n" +
+				"interface J {\n" +
+				"    void foo(int x, int y);\n" +
+				"}\n" +
+				"interface K {\n" +
+				"    void foo(String s);\n" +
+				"}\n" +
+				"public class X {\n" +
+				"	void foo(I i) {\n" +
+				"		System.out.println(\"foo(I)\");\n" +
+				"	}\n" +
+				"	void foo(J j) {\n" +
+				"		System.out.println(\"foo(J)\");\n" +
+				"	}\n" +
+				"	void foo(K k) {\n" +
+				"		System.out.println(\"foo(K)\");\n" +
+				"	}\n" +
+				"	public static void main(String[] args) {\n" +
+				"		new X().foo(()->{});\n" +
+				"		new X().foo((x, y)->{});\n" +
+				"		new X().foo((s)->{});\n" +
+				"	}\n" +
+				"}\n",
+				},
+				"foo(I)\n" + 
+				"foo(J)\n" + 
+				"foo(K)");
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=401610, [1.8][compiler] Allow lambda/reference expressions in non-overloaded method invocation contexts
+public void test401610b() {
+this.runNegativeTest(
+		new String[] {
+				"X.java",
+				"interface I {\n" +
+				"    void foo();\n" +
+				"}\n" +
+				"interface J {\n" +
+				"    void foo(int x, int y);\n" +
+				"}\n" +
+				"interface K {\n" +
+				"    void foo(String s);\n" +
+				"}\n" +
+				"public class X {\n" +
+				"	void foo(I i) {\n" +
+				"		System.out.println(\"foo(I)\");\n" +
+				"	}\n" +
+				"	void foo(J j) {\n" +
+				"		System.out.println(\"foo(J)\");\n" +
+				"	}\n" +
+				"	public static void main(String[] args) {\n" +
+				"		new X().foo(()->{});\n" +
+				"		new X().foo((x, y)->{});\n" +
+				"		new X().foo((s)->{});\n" +
+				"	}\n" +
+				"}\n",
+				},
+				"----------\n" + 
+				"1. ERROR in X.java (at line 20)\n" + 
+				"	new X().foo((s)->{});\n" + 
+				"	        ^^^\n" + 
+				"The method foo(I) in the type X is not applicable for the arguments ((<no type> s) -> {\n" + 
+				"})\n" + 
+				"----------\n");
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=401610, [1.8][compiler] Allow lambda/reference expressions in non-overloaded method invocation contexts
+public void test401610c() {
+this.runNegativeTest(
+		new String[] {
+				"X.java",
+				"interface I {\n" +
+				"    void foo();\n" +
+				"}\n" +
+				"interface K {\n" +
+				"    String foo(String s);\n" +
+				"}\n" +
+				"public class X {\n" +
+				"	void foo(I i) {\n" +
+				"		System.out.println(\"foo(I)\");\n" +
+				"	}\n" +
+				"	void foo(K k) {\n" +
+				"		System.out.println(\"foo(K)\");\n" +
+				"	}\n" +
+				"	public static void main(String[] args) {\n" +
+				"		new X().foo(()->{ return \"\";});\n" +
+				"		new X().foo(()-> 10);\n" +
+				"		new X().foo((s)->{});\n" +
+				"		new X().foo((s)->{ return;});\n" +
+				"		new X().foo((s)->{ return \"\";});\n" +
+				"		new X().foo((s)-> \"hello\");\n" +
+				"		new X().foo(()->{ return;});\n" +
+				"		new X().foo(()-> System.out.println());\n" +
+				"	}\n" +
+				"}\n",
+				},
+				"----------\n" + 
+				"1. ERROR in X.java (at line 15)\n" + 
+				"	new X().foo(()->{ return \"\";});\n" + 
+				"	        ^^^\n" + 
+				"The method foo(I) in the type X is not applicable for the arguments (() -> {\n" + 
+				"  return \"\";\n" + 
+				"})\n" + 
+				"----------\n" + 
+				"2. ERROR in X.java (at line 16)\n" + 
+				"	new X().foo(()-> 10);\n" + 
+				"	        ^^^\n" + 
+				"The method foo(I) in the type X is not applicable for the arguments (() -> 10)\n" + 
+				"----------\n" + 
+				"3. ERROR in X.java (at line 17)\n" + 
+				"	new X().foo((s)->{});\n" + 
+				"	        ^^^\n" + 
+				"The method foo(I) in the type X is not applicable for the arguments ((<no type> s) -> {\n" + 
+				"})\n" + 
+				"----------\n" + 
+				"4. ERROR in X.java (at line 18)\n" + 
+				"	new X().foo((s)->{ return;});\n" + 
+				"	        ^^^\n" + 
+				"The method foo(I) in the type X is not applicable for the arguments ((<no type> s) -> {\n" + 
+				"  return ;\n" + 
+				"})\n" + 
+				"----------\n");
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=401610, [1.8][compiler] Allow lambda/reference expressions in non-overloaded method invocation contexts
+public void test401610d() {
+this.runNegativeTest(
+		new String[] {
+				"X.java",
+				"public class X {\n" +
+				"    <T> T id(T arg) { return arg; }\n" +
+				"    Runnable r = id(() -> { System.out.println(); });\n" +
+				"}\n",
+				},
+				"");
+}
 public static Class testClass() {
 	return NegativeLambdaExpressionsTest.class;
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java
index 826dafd..9767a8b 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java
@@ -886,6 +886,14 @@ public boolean isConstantValueOfTypeAssignableToType(TypeBinding constantType, T
 	return false;
 }
 
+public boolean isAssignmentCompatible (TypeBinding left, Scope scope) {
+	if (this.resolvedType == null)
+		return false;
+	return isConstantValueOfTypeAssignableToType(this.resolvedType, left) || 
+				this.resolvedType.isCompatibleWith(left) || 
+				isBoxingCompatible(this.resolvedType, left, this, scope);
+}
+
 public boolean isTypeReference() {
 	return false;
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
index 7f4b761..b400c55 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
@@ -35,23 +35,30 @@ import org.eclipse.jdt.internal.compiler.lookup.ExtraCompilerModifiers;
 import org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment;
 import org.eclipse.jdt.internal.compiler.lookup.MethodBinding;
 import org.eclipse.jdt.internal.compiler.lookup.MethodScope;
+import org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding;
 import org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding;
 import org.eclipse.jdt.internal.compiler.lookup.Scope;
 import org.eclipse.jdt.internal.compiler.lookup.TagBits;
 import org.eclipse.jdt.internal.compiler.lookup.TypeBinding;
 import org.eclipse.jdt.internal.compiler.lookup.TypeConstants;
+import org.eclipse.jdt.internal.compiler.lookup.TypeIds;
+import org.eclipse.jdt.internal.compiler.parser.Parser;
 import org.eclipse.jdt.internal.compiler.problem.AbortCompilation;
 import org.eclipse.jdt.internal.compiler.problem.AbortCompilationUnit;
 import org.eclipse.jdt.internal.compiler.problem.AbortMethod;
 import org.eclipse.jdt.internal.compiler.problem.AbortType;
 import org.eclipse.jdt.internal.compiler.problem.ProblemSeverities;
 
-public class LambdaExpression extends FunctionalExpression implements ProblemSeverities, ReferenceContext {
+public class LambdaExpression extends FunctionalExpression implements ProblemSeverities, ReferenceContext, PolyExpression {
 	public Argument [] arguments;
 	public Statement body;
 	private MethodScope scope;
 	private CompilationResult compilationResult;
 	private boolean ignoreFurtherInvestigation;
+	private BlockScope parentScope;
+	private static CompilationResult devNullCompilationResult;
+	protected boolean voidCompatible = true;
+	protected boolean valueCompatible = false;
 	
 	public LambdaExpression(CompilationResult compilationResult, Argument [] arguments, Statement body) {
 		this.compilationResult = compilationResult;
@@ -84,6 +91,36 @@ public class LambdaExpression extends FunctionalExpression implements ProblemSev
 	 */
 	public TypeBinding resolveType(BlockScope blockScope) {
 		
+		this.parentScope = blockScope;
+		if (this.expectedType == null && this.expressionContext == INVOCATION_CONTEXT) {
+			if (this.body instanceof Block) {
+				// Gather shape information for potential applicability analysis.
+				ASTVisitor visitor = new ASTVisitor() {
+					boolean valueReturnSeen = false;
+					boolean voidReturnSeen = false;
+					public boolean visit(ReturnStatement returnStatement, BlockScope dontCare) {
+						if (returnStatement.expression != null) {
+							this.valueReturnSeen = true;
+							LambdaExpression.this.voidCompatible = false;
+							LambdaExpression.this.valueCompatible = !this.voidReturnSeen;
+						} else {
+							this.voidReturnSeen = true;
+							LambdaExpression.this.valueCompatible = false;
+							LambdaExpression.this.voidCompatible = !this.valueReturnSeen;
+						}
+						return false;
+					}
+				};
+				this.traverse(visitor, blockScope);
+			} else {
+				Expression expression = (Expression) this.body;
+				this.voidCompatible = expression.statementExpression();
+				this.valueCompatible = true;
+			}	
+			if (devNullCompilationResult == null)
+				devNullCompilationResult = new CompilationResult(this.compilationResult.getCompilationUnit(), 0, 0, blockScope.compilerOptions().maxProblemsPerUnit);
+			return new PolyTypeBinding(this);
+		}
 		super.resolveType(blockScope); // compute & capture interface function descriptor in singleAbstractMethod.
 		
 		final boolean argumentsTypeElided = argumentsTypeElided();
@@ -373,7 +410,12 @@ public class LambdaExpression extends FunctionalExpression implements ProblemSev
 		return this.ignoreFurtherInvestigation;
 	}
 
+	private boolean shouldShutup() {
+		return this.compilationResult == devNullCompilationResult;
+	}
+	
 	public void tagAsHavingErrors() {
+		if (shouldShutup()) return;
 		this.ignoreFurtherInvestigation = true;
 		Scope parent = this.scope.parent;
 		while (parent != null) {
@@ -408,4 +450,80 @@ public class LambdaExpression extends FunctionalExpression implements ProblemSev
 			}
 			visitor.endVisit(this, blockScope);
 	}
-}
\ No newline at end of file
+	
+	public boolean isCompatibleWith(TypeBinding left, Scope someScope) {
+		
+		final MethodBinding sam = left.getSingleAbstractMethod(this.parentScope);
+		
+		if (sam == null || !sam.isValidBinding())
+			return false;
+		if (sam.parameters.length != this.arguments.length)
+			return false;
+		
+		if (sam.returnType.id == TypeIds.T_void) {
+			if (!this.voidCompatible)
+				return false;
+		} else {
+			if (!this.valueCompatible)
+				return false;
+		}
+		
+		LambdaExpression copy = copy();
+		copy.setExpressionContext(this.expressionContext);
+		copy.setExpectedType(left);
+		copy.resolveType(this.parentScope);
+		
+		if (!argumentsTypeElided()) {
+			for (int i = 0, length = sam.parameters.length; i < length; i++) {
+				TypeBinding argumentType = copy.arguments[i].binding.type;
+				if (sam.parameters[i] != argumentType)
+					return false;
+			}
+		}
+
+		try {
+			final TypeBinding returnType = sam.returnType;
+			if (this.body instanceof Block) {
+				ASTVisitor visitor = new ASTVisitor() {
+					public boolean visit(ReturnStatement returnStatement, BlockScope blockScope) {
+						Expression expression = returnStatement.expression;
+						if (expression != null && !expression.isAssignmentCompatible(returnType, blockScope))
+							throw new NoncongruentLambdaException();
+						return false;
+					}
+				};
+				copy.body.traverse(visitor, copy.scope);
+			} else {
+				Expression expression = (Expression) copy.body;
+				if (!expression.isAssignmentCompatible(returnType, copy.scope))
+					throw new NoncongruentLambdaException();
+			}
+		} catch (NoncongruentLambdaException e) {
+			return false;
+		}
+		return true;
+	}
+
+	LambdaExpression copy() {
+		final Parser parser = new Parser(this.parentScope.problemReporter(), false);
+		final char[] source = this.compilationResult.getCompilationUnit().getContents();
+		LambdaExpression copy;
+		
+		CompilationUnitDeclaration unit = this.parentScope.referenceCompilationUnit();
+		CompilationResult original = unit.compilationResult;
+		unit.compilationResult = devNullCompilationResult;
+		
+		try {
+			copy =  (LambdaExpression) parser.parseExpression(source, this.sourceStart, this.sourceEnd - this.sourceStart + 1, unit);
+		} finally {
+			unit.compilationResult = original;
+		}
+		copy.compilationResult = devNullCompilationResult;
+		return copy;
+	}
+}
+
+class NoncongruentLambdaException extends RuntimeException {
+	private static final long serialVersionUID = 4145723509219836114L;
+}
+
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java
index 13b4ab0..4ed7bff 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java
@@ -51,6 +51,7 @@ import org.eclipse.jdt.internal.compiler.lookup.MethodBinding;
 import org.eclipse.jdt.internal.compiler.lookup.MissingTypeBinding;
 import org.eclipse.jdt.internal.compiler.lookup.ImplicitNullAnnotationVerifier;
 import org.eclipse.jdt.internal.compiler.lookup.ParameterizedGenericMethodBinding;
+import org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding;
 import org.eclipse.jdt.internal.compiler.lookup.PolymorphicMethodBinding;
 import org.eclipse.jdt.internal.compiler.lookup.ProblemMethodBinding;
 import org.eclipse.jdt.internal.compiler.lookup.ProblemReasons;
@@ -574,6 +575,14 @@ public TypeBinding resolveType(BlockScope scope) {
 						? this.resolvedType
 						: null;
 	}
+	for (int i = 0, length = this.arguments == null ? 0 : this.arguments.length; i < length; i++) {
+		Expression argument = this.arguments[i];
+		if (argumentTypes[i] instanceof PolyTypeBinding) {
+			argument.setExpressionContext(INVOCATION_CONTEXT);
+			argument.setExpectedType(this.binding.parameters[i]);
+			argumentTypes[i] = argument.resolveType(scope);
+		}
+	}
 	final CompilerOptions compilerOptions = scope.compilerOptions();
 	if (compilerOptions.complianceLevel <= ClassFileConstants.JDK1_6
 			&& this.binding.isPolymorphic()) {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/PolyExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/PolyExpression.java
new file mode 100644
index 0000000..b9a7934
--- /dev/null
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/PolyExpression.java
@@ -0,0 +1,25 @@
+/*******************************************************************************
+ * Copyright (c) 2013 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+
+package org.eclipse.jdt.internal.compiler.ast;
+
+import org.eclipse.jdt.internal.compiler.lookup.Scope;
+import org.eclipse.jdt.internal.compiler.lookup.TypeBinding;
+
+public interface PolyExpression {
+
+	boolean isCompatibleWith(TypeBinding left, Scope scope);
+	public StringBuffer printExpression(int tab, StringBuffer output);
+}
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Binding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Binding.java
index 7c9e334..284b580 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Binding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Binding.java
@@ -39,6 +39,7 @@ public abstract class Binding {
 	// jsr 308
 	public static final int TYPE_USE = TYPE | ASTNode.Bit15;
 	public static final int INTERSECTION_CAST_TYPE = TYPE | ASTNode.Bit16;
+	public static final int POLY_TYPE = TYPE | ASTNode.Bit17;
 	
 	// In the unlikely event you add a new type binding, remember to update TypeBindingVisitor and Scope.substitute methods. 
 
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java
index 65539dc..9d6fd3d 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CompilationUnitScope.java
@@ -782,12 +782,13 @@ private ReferenceBinding typeToRecord(TypeBinding type) {
 		case Binding.TYPE_PARAMETER :
 		case Binding.WILDCARD_TYPE :
 		case Binding.INTERSECTION_TYPE :
+		case Binding.INTERSECTION_CAST_TYPE: // constituents would have been recorded.
+		case Binding.POLY_TYPE: // not a real type, will mutate into one, hopefully soon.
 			return null;
 		case Binding.PARAMETERIZED_TYPE :
 		case Binding.RAW_TYPE :
 			type = type.erasure();
 	}
-	if (type.isIntersectionCastType()) return null;  // constituents would have been recorded. 
 	ReferenceBinding refType = (ReferenceBinding) type;
 	if (refType.isLocalType()) return null;
 	return refType;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/PolyTypeBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/PolyTypeBinding.java
new file mode 100644
index 0000000..89e78fa
--- /dev/null
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/PolyTypeBinding.java
@@ -0,0 +1,60 @@
+/*******************************************************************************
+ * Copyright (c) 2013 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+
+package org.eclipse.jdt.internal.compiler.lookup;
+
+import org.eclipse.jdt.internal.compiler.ast.PolyExpression;
+
+public class PolyTypeBinding extends TypeBinding {
+
+	PolyExpression expression;
+	
+	public PolyTypeBinding(PolyExpression expression) {
+		this.expression = expression;
+	}
+	
+	public char[] constantPoolName() {
+		throw new UnsupportedOperationException();  // should never reach code generation
+	}
+
+	public PackageBinding getPackage() {
+		throw new UnsupportedOperationException();  // nobody should be asking this question.
+	}
+
+	public boolean isCompatibleWith(TypeBinding left, Scope scope) {
+		return this.expression.isCompatibleWith(left, scope);
+	}
+
+	public char[] qualifiedSourceName() {
+		return readableName();
+	}
+
+	public char[] sourceName() {
+		return readableName();
+	}
+
+	public char[] readableName() {
+		return this.expression.printExpression(0,  new StringBuffer()).toString().toCharArray();
+	}
+	
+	public String toString() {
+		StringBuffer buffer = new StringBuffer("PolyTypeBinding for: "); //$NON-NLS-1$
+		return this.expression.printExpression(0,  buffer).toString();
+	}
+	
+	public int kind() {
+		return Binding.POLY_TYPE;
+	}
+}
\ No newline at end of file
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java
index acb73f0..8103f9e 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java
@@ -1,10 +1,14 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2012 IBM Corporation and others.
+ * Copyright (c) 2000, 2013 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ * 
  * Contributors:
  *     IBM Corporation - initial API and implementation
  *     Stephan Herrmann <stephan@cs.tu-berlin.de> - Contributions for
@@ -213,6 +217,7 @@ public class TypeVariableBinding extends ReferenceBinding {
 				if (boxedType == actualType) return;
 				actualType = boxedType;
 				break;
+			case Binding.POLY_TYPE: // cannot steer inference, only learn from it.
 			case Binding.WILDCARD_TYPE :
 				return; // wildcards are not true type expressions (JLS 15.12.2.7, p.453 2nd discussion)
 		}
commit 77ac300d6d124e9b071b4e62fab3a583e6eecdc4
Author: ssankaran <srikanth_sankaran@in.ibm.com>
Date:   Tue Feb 26 18:59:31 2013 +0530

    More tests and some fixes for bug 401610: Allow lambda expressions in
    non-overloaded method invocation contexts

149	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
2	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ArrayBinding.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java
6	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
index b263c15..3ad2850 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
@@ -5135,6 +5135,155 @@ this.runNegativeTest(
 				},
 				"");
 }
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=401610, [1.8][compiler] Allow lambda/reference expressions in non-overloaded method invocation contexts
+public void test401610e() {
+this.runNegativeTest(
+		new String[] {
+				"X.java",
+				"interface I<T extends String> {\n" +
+				"	void foo();\n" +
+				"}\n" +
+				"public class X {\n" +
+				"	<T> T foo(I<T> it) { return null; }\n" +
+				"	public static void main(String[] args) {\n" +
+				"		new X().foo(()->{});\n" +
+				"	}\n" +
+				"}\n",
+				},
+				"----------\n" + 
+				"1. WARNING in X.java (at line 1)\n" + 
+				"	interface I<T extends String> {\n" + 
+				"	                      ^^^^^^\n" + 
+				"The type parameter T should not be bounded by the final type String. Final types cannot be further extended\n" + 
+				"----------\n" + 
+				"2. ERROR in X.java (at line 5)\n" + 
+				"	<T> T foo(I<T> it) { return null; }\n" + 
+				"	            ^\n" + 
+				"Bound mismatch: The type T is not a valid substitute for the bounded parameter <T extends String> of the type I<T>\n" + 
+				"----------\n" + 
+				"3. ERROR in X.java (at line 7)\n" + 
+				"	new X().foo(()->{});\n" + 
+				"	        ^^^\n" + 
+				"The method foo(I<T>) in the type X is not applicable for the arguments (() -> {\n" + 
+				"})\n" + 
+				"----------\n");
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=401610, [1.8][compiler] Allow lambda/reference expressions in non-overloaded method invocation contexts
+public void test401610f() {
+this.runNegativeTest(
+		new String[] {
+				"X.java",
+				"interface I<T> {\n" +
+				"	void foo();\n" +
+				"}\n" +
+				"public class X {\n" +
+				"	<T> T foo(I<T> it) { return null; }\n" +
+				"	public static void main(String[] args) {\n" +
+				"		new X().foo(()->{});\n" +
+				"	}\n" +
+				"}\n",
+				},
+				"");
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=401610, [1.8][compiler] Allow lambda/reference expressions in non-overloaded method invocation contexts
+public void test401610g() {
+this.runConformTest(
+		new String[] {
+				"X.java",
+				"interface I {\n" +
+				"	void foo();\n" +
+				"}\n" +
+				"interface J { \n" +
+				"    String foo();\n" +
+				"}\n" +
+				"public class X {\n" +
+				"	void foo(I it) { System.out.println(\"foo(I)\");}\n" +
+				"	void foo(J it) { System.out.println(\"foo(J)\");}\n" +
+				"	public static void main(String[] args) {\n" +
+				"		new X().foo(()->{});\n" +
+				"	}\n" +
+				"}\n",
+				},
+				"foo(I)");
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=401610, [1.8][compiler] Allow lambda/reference expressions in non-overloaded method invocation contexts
+public void test401610h() {
+this.runNegativeTest(
+		new String[] {
+				"X.java",
+				"interface I {\n" +
+				"	void foo();\n" +
+				"}\n" +
+				"interface J { \n" +
+				"    String foo();\n" +
+				"}\n" +
+				"public class X {\n" +
+				"	void foo(I it) { System.out.println(\"foo(I)\");}\n" +
+				"	void foo(J it) { System.out.println(\"foo(J)\");}\n" +
+				"	public static void main(String[] args) {\n" +
+				"		new X().foo(()->{ return 10; });\n" +
+				"	}\n" +
+				"}\n",
+				},
+				"----------\n" + 
+				"1. ERROR in X.java (at line 11)\n" + 
+				"	new X().foo(()->{ return 10; });\n" + 
+				"	        ^^^\n" + 
+				"The method foo(I) in the type X is not applicable for the arguments (() -> {\n" + 
+				"  return 10;\n" + 
+				"})\n" + 
+				"----------\n");
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=401610, [1.8][compiler] Allow lambda/reference expressions in non-overloaded method invocation contexts
+public void test401610i() {
+this.runConformTest(
+		new String[] {
+				"X.java",
+				"interface I {\n" +
+				"	void foo(int x);\n" +
+				"}\n" +
+				"interface J { \n" +
+				"    void foo(String s);\n" +
+				"}\n" +
+				"public class X {\n" +
+				"	void foo(I it) { System.out.println(\"foo(I)\");}\n" +
+				"	void foo(J it) { System.out.println(\"foo(J)\");}\n" +
+				
+				"	public static void main(String[] args) {\n" +
+				"		new X().foo((String s)->{});\n" +
+				"	}\n" +
+				"}\n",
+				},
+				"foo(J)");
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=401610, [1.8][compiler] Allow lambda/reference expressions in non-overloaded method invocation contexts
+public void test401610j() {
+this.runNegativeTest(
+		new String[] {
+				"X.java",
+				"interface I {\n" +
+				"	void foo(int x);\n" +
+				"}\n" +
+				"interface J { \n" +
+				"    void foo(String s);\n" +
+				"}\n" +
+				"public class X {\n" +
+				"	void foo(I it) { System.out.println(\"foo(I)\");}\n" +
+				"	void foo(J it) { System.out.println(\"foo(J)\");}\n" +
+				
+				"	public static void main(String[] args) {\n" +
+				"		new X().foo((Object o)->{});\n" +
+				"	}\n" +
+				"}\n",
+				},
+				"----------\n" + 
+				"1. ERROR in X.java (at line 11)\n" + 
+				"	new X().foo((Object o)->{});\n" + 
+				"	        ^^^\n" + 
+				"The method foo(I) in the type X is not applicable for the arguments ((Object o) -> {\n" + 
+				"})\n" + 
+				"----------\n");
+}
 public static Class testClass() {
 	return NegativeLambdaExpressionsTest.class;
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ArrayBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ArrayBinding.java
index a5aab92..3034e79 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ArrayBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ArrayBinding.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2012 IBM Corporation and others.
+ * Copyright (c) 2000, 2013 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -90,7 +90,7 @@ public List collectMissingTypes(List missingTypes) {
 public void collectSubstitutes(Scope scope, TypeBinding actualType, InferenceContext inferenceContext, int constraint) {
 
 	if ((this.tagBits & TagBits.HasTypeVariable) == 0) return;
-	if (actualType == TypeBinding.NULL) return;
+	if (actualType == TypeBinding.NULL || actualType.kind() == POLY_TYPE) return;
 
 	switch(actualType.kind()) {
 		case Binding.ARRAY_TYPE :
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java
index 6dc798a..b4140f0 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedTypeBinding.java
@@ -165,7 +165,7 @@ public class ParameterizedTypeBinding extends ReferenceBinding implements Substi
 			}
 			return;
 		}
-		if (actualType == TypeBinding.NULL) return;
+		if (actualType == TypeBinding.NULL || actualType.kind() == POLY_TYPE) return;
 
 		if (!(actualType instanceof ReferenceBinding)) return;
 		TypeBinding formalEquivalent, actualEquivalent;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java
index 93dffe1..bdbf393 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/WildcardBinding.java
@@ -1,9 +1,13 @@
 /*******************************************************************************
- * Copyright (c) 2005, 2012 IBM Corporation and others.
+ * Copyright (c) 2005, 2013 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
  *
  * Contributors:
  *     IBM Corporation - initial API and implementation
@@ -113,7 +117,7 @@ public class WildcardBinding extends ReferenceBinding {
 	public void collectSubstitutes(Scope scope, TypeBinding actualType, InferenceContext inferenceContext, int constraint) {
 
 		if ((this.tagBits & TagBits.HasTypeVariable) == 0) return;
-		if (actualType == TypeBinding.NULL) return;
+		if (actualType == TypeBinding.NULL || actualType.kind() == POLY_TYPE) return;
 
 		if (actualType.isCapture()) {
 			CaptureBinding capture = (CaptureBinding) actualType;

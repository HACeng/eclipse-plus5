commit 2d89f0516f5e5910bcd18015e8090ed0805dbb4e
Author: Stephan Herrmann <sherrmann>
Date:   Tue Oct 18 16:33:38 2011 +0200

    Combined fix for
    - bug 360164: Compile error in XSDImpl
    - bug 360317: [compiler] report switch over enum in 1.4- mode

2	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java
99	1	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaProjectTests.java
-	-	org.eclipse.jdt.core.tests.model/workspace/JavaProjectTests/bin/bug360164.jar
5	1	org.eclipse.jdt.core/buildnotes_jdt-core.html
2	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
3	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java
8	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java
1	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/UnresolvedReferenceBinding.java
15	6	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
1	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java
index 4e1cba7..9f0995d 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java
@@ -809,6 +809,7 @@ public void test011_problem_categories() {
 		expectedProblemAttributes.put("SuperclassNotFound", DEPRECATED);
 		expectedProblemAttributes.put("SuperclassNotVisible", DEPRECATED);
 		expectedProblemAttributes.put("SuperfluousSemicolon", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));
+		expectedProblemAttributes.put("SwitchOnEnumNotBelow15", new ProblemAttributes(CategorizedProblem.CAT_TYPE));
 		expectedProblemAttributes.put("SwitchOnStringsNotBelow17", new ProblemAttributes(CategorizedProblem.CAT_TYPE));
 		expectedProblemAttributes.put("Task", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));
 		expectedProblemAttributes.put("ThisInStaticContext", new ProblemAttributes(CategorizedProblem.CAT_INTERNAL));
@@ -1482,6 +1483,7 @@ public void test012_compiler_problems_tuning() {
 		expectedProblemAttributes.put("SuperclassNotFound", SKIP);
 		expectedProblemAttributes.put("SuperclassNotVisible", new ProblemAttributes(JavaCore.COMPILER_PB_REDUNDANT_SUPERINTERFACE));
 		expectedProblemAttributes.put("SuperfluousSemicolon", new ProblemAttributes(JavaCore.COMPILER_PB_EMPTY_STATEMENT));
+		expectedProblemAttributes.put("SwitchOnEnumNotBelow15", SKIP);
 		expectedProblemAttributes.put("SwitchOnStringsNotBelow17", SKIP);
 		expectedProblemAttributes.put("Task", SKIP);
 		expectedProblemAttributes.put("ThisInStaticContext", SKIP);
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaProjectTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaProjectTests.java
index 6357803..a7388ab 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaProjectTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaProjectTests.java
@@ -37,7 +37,7 @@ public JavaProjectTests(String name) {
 	super(name);
 }
 static {
-//	TESTS_NAMES = new String[] { "testAddExternalLibFolder6" };
+//	TESTS_NAMES = new String[] { "testBug360164" };
 }
 public static Test suite() {
 	TestSuite suite = (TestSuite) buildModelTestSuite(JavaProjectTests.class);
@@ -2389,4 +2389,102 @@ public void testBug183923() throws CoreException, IOException {
 		deleteProject("JavaProjectTestsInvalidProject");
 	}
 }
+// Bug 360164 - Compile error in XSDImpl
+// test that we can tolerate if a 1.4 project refers to an enum inside a library.
+public void testBug360164() throws IOException, CoreException {
+	String libPath = getWorkspacePath()+"JavaProjectTests/bin/bug360164.jar";
+	try {
+		this.createJavaProject("P", new String[] {"src"}, new String[] {"JCL_LIB", libPath}, "bin", JavaCore.VERSION_1_4);
+		IFile file = createFile("/P/src/X.java", 
+				"import p360164.Provider;\n" +
+				"import p360164.MyEnum;\n" +
+				"public class X {\n" +
+				"    int foo(Provider p) {\n" +
+				"        MyEnum e = p.getE();\n" +
+				"        switch (e.getValue()) {\n" +
+				"        case MyEnum.ONE_COMPAT: return 1;\n" +
+				"        case MyEnum.TWO_COMPAT: return 2;\n" +
+				"        }\n" +
+				"        return 0;\n" +
+				"    }\n" +
+				"}"
+		);	
+		ICompilationUnit unit = (ICompilationUnit)JavaCore.create(file);
+		ProblemRequestor problemRequestor = new ProblemRequestor();
+		WorkingCopyOwner owner = newWorkingCopyOwner(problemRequestor);
+		unit.getWorkingCopy(owner, null);
+		assertProblems("Unexpected problems", 
+				"----------\n" + 
+				"----------\n", 
+				problemRequestor);
+	} finally {
+		this.deleteProject("P");
+	}
+}
+// Bug 360164 - Compile error in XSDImpl
+// test that we still report the missing superclass when resolving non-local methods
+public void testBug360164a() throws IOException, CoreException {
+	String libPath = getWorkspacePath()+"JavaProjectTests/bin/bug360164.jar";
+	try {
+		this.createJavaProject("P", new String[] {"src"}, new String[] {"JCL_LIB", libPath}, "bin", JavaCore.VERSION_1_4);
+		IFile file = createFile("/P/src/X.java", 
+				"import p360164.Provider;\n" +
+				"import p360164.MyEnum;\n" +
+				"public class X {\n" +
+				"    String foo(Provider p) {\n" +
+				"        MyEnum e = p.getE();\n" +
+				"        return e.toString();\n" +
+				"    }\n" +
+				"}"
+		);	
+		ICompilationUnit unit = (ICompilationUnit)JavaCore.create(file);
+		ProblemRequestor problemRequestor = new ProblemRequestor();
+		WorkingCopyOwner owner = newWorkingCopyOwner(problemRequestor);
+		unit.getWorkingCopy(owner, null);
+		assertProblems("Unexpected problems", 
+				"----------\n" + 
+				"1. ERROR in /P/src/X.java\n" + 
+				"The type java.lang.Enum cannot be resolved. It is indirectly referenced from required .class files\n" + 
+				"----------\n", 
+				problemRequestor);
+	} finally {
+		this.deleteProject("P");
+	}
+}
+// Bug 360317 - [compiler] report switch over enum in 1.4- mode
+public void testBug360317() throws IOException, CoreException {
+	// use the setup from testBug360164():
+	String libPath = getWorkspacePath()+"JavaProjectTests/bin/bug360164.jar";
+	try {
+		this.createJavaProject("P", new String[] {"src"}, new String[] {"JCL_LIB", libPath}, "bin", JavaCore.VERSION_1_4);
+		String sourceX = "import p360164.Provider;\n" +
+						 "import p360164.MyEnum;\n" +
+						 "public class X {\n" +
+						 "    int foo(Provider p) {\n" +
+						 "        MyEnum e = p.getE();\n" +
+						 "        switch (e) {\n" +
+						 "        case ONE: return 1;\n" +
+						 "        case TWO: return 2;\n" +
+						 "        }\n" +
+						 "        return 0;\n" +
+						 "    }\n" +
+						 "}";
+		IFile file = createFile("/P/src/X.java", sourceX);	
+		ICompilationUnit unit = (ICompilationUnit)JavaCore.create(file);
+		ProblemRequestor problemRequestor = new ProblemRequestor();
+		problemRequestor.initialize(sourceX.toCharArray());
+		WorkingCopyOwner owner = newWorkingCopyOwner(problemRequestor);
+		unit.getWorkingCopy(owner, null);
+		assertProblems("Unexpected problems", 
+				"----------\n" +
+				"1. ERROR in /P/src/X.java (at line 6)\n" +
+				"	switch (e) {\n" +
+				"	        ^\n" +
+				"Cannot switch on an enum value for source level below 1.5. Only convertible int values are permitted\n" +
+				"----------\n",
+				problemRequestor);
+	} finally {
+		this.deleteProject("P");
+	}
+}
 }
diff --git a/org.eclipse.jdt.core.tests.model/workspace/JavaProjectTests/bin/bug360164.jar b/org.eclipse.jdt.core.tests.model/workspace/JavaProjectTests/bin/bug360164.jar
new file mode 100644
index 0000000..3defaf5
Binary files /dev/null and b/org.eclipse.jdt.core.tests.model/workspace/JavaProjectTests/bin/bug360164.jar differ
diff --git a/org.eclipse.jdt.core/buildnotes_jdt-core.html b/org.eclipse.jdt.core/buildnotes_jdt-core.html
index 9b14036..2b08ab8 100644
--- a/org.eclipse.jdt.core/buildnotes_jdt-core.html
+++ b/org.eclipse.jdt.core/buildnotes_jdt-core.html
@@ -52,7 +52,11 @@ Eclipse SDK 3.8.0 - %date% - 3.8.0 M3
 <h2>What's new in this drop</h2>
 
 <h3>Problem Reports Fixed</h3>
-<a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=359727">359727</a>
+<a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=360317">360317</a>
+[compiler] report switch over enum in 1.4- mode
+<br><a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=360164">360164</a>
+Compile error in XSDImpl
+<br><a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=359727">359727</a>
 [1.7][doc] Update doc for new resource leak warnings
 
 <a name="v_C16"></a>
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
index 4375e48..a89866f 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
@@ -1409,6 +1409,8 @@ void setSourceStart(int sourceStart);
 	int UnclosedCloseableAtExit = Internal + 888;
 	/** @since 3.8 */
 	int ExplicitlyClosedAutoCloseable = Internal + 889;
+	/** @since 3.8 */
+	int SwitchOnEnumNotBelow15 = TypeRelated + 890;	// https://bugs.eclipse.org/bugs/show_bug.cgi?id=360317
 	/**
 	 * External problems -- These are problems defined by other plugins
 	 */
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java
index 609a8a5..03c6e80 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java
@@ -463,6 +463,9 @@ public class SwitchStatement extends Statement {
 							break checkType;
 					} else if (expressionType.isEnum()) {
 						isEnumSwitch = true;
+						if (upperScope.compilerOptions().complianceLevel < ClassFileConstants.JDK1_5) {
+							upperScope.problemReporter().incorrectSwitchType(this.expression, expressionType); // https://bugs.eclipse.org/bugs/show_bug.cgi?id=360317
+						}
 						break checkType;
 					} else if (upperScope.isBoxingCompatibleWith(expressionType, TypeBinding.INT)) {
 						this.expression.computeConversion(upperScope, TypeBinding.INT, expressionType);
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java
index 74dd0eb..8a84619 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java
@@ -975,8 +975,14 @@ public TypeVariableBinding getTypeVariable(char[] variableName) {
 }
 public boolean hasTypeBit(int bit) {
 	// ensure hierarchy is resolved, which will propagate bits down to us
-	superclass();
-	superInterfaces();
+	boolean wasToleratingMissingTypeProcessingAnnotations = this.environment.mayTolerateMissingType;
+	this.environment.mayTolerateMissingType = true;
+	try {
+		superclass();
+		superInterfaces();
+	} finally {
+		this.environment.mayTolerateMissingType = wasToleratingMissingTypeProcessingAnnotations;
+	}
 	return (this.typeBits & bit) != 0;
 }
 private void initializeTypeVariable(TypeVariableBinding variable, TypeVariableBinding[] existingVariables, SignatureWrapper wrapper, char[][][] missingTypeNames) {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java
index 84d3e74..2e7fe97 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/LookupEnvironment.java
@@ -74,6 +74,7 @@ public class LookupEnvironment implements ProblemReasons, TypeConstants {
 	private ArrayList missingTypes;
 	Set typesBeingConnected;
 	public boolean isProcessingAnnotations = false;
+	public boolean mayTolerateMissingType = false;
 
 	final static int BUILD_FIELDS_AND_METHODS = 4;
 	final static int BUILD_TYPE_HIERARCHY = 1;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/UnresolvedReferenceBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/UnresolvedReferenceBinding.java
index 3038368..2da4984 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/UnresolvedReferenceBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/UnresolvedReferenceBinding.java
@@ -55,7 +55,7 @@ ReferenceBinding resolve(LookupEnvironment environment, boolean convertGenericTo
 		}
 		if (targetType == null || targetType == this) { // could not resolve any better, error was already reported against it
 			// report the missing class file first - only if not resolving a previously missing type
-			if ((this.tagBits & TagBits.HasMissingType) == 0) {
+			if ((this.tagBits & TagBits.HasMissingType) == 0 && !environment.mayTolerateMissingType) {
 				environment.problemReporter.isClassPathCorrect(
 					this.compoundName,
 					environment.unitBeingCompleted,
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
index c84b83d..0a3b191 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
@@ -2863,12 +2863,21 @@ public void incorrectSwitchType(Expression expression, TypeBinding testType) {
 					expression.sourceStart,
 					expression.sourceEnd);
 		} else {
-			this.handle(
-				IProblem.IncorrectSwitchType,
-				new String[] {new String(testType.readableName())},
-				new String[] {new String(testType.shortReadableName())},
-				expression.sourceStart,
-				expression.sourceEnd);
+			if (this.options.sourceLevel < ClassFileConstants.JDK1_5 && testType.isEnum()) {
+				this.handle(
+						IProblem.SwitchOnEnumNotBelow15,
+						new String[] {new String(testType.readableName())},
+						new String[] {new String(testType.shortReadableName())},
+						expression.sourceStart,
+						expression.sourceEnd);
+			} else {
+				this.handle(
+						IProblem.IncorrectSwitchType,
+						new String[] {new String(testType.readableName())},
+						new String[] {new String(testType.shortReadableName())},
+						expression.sourceStart,
+						expression.sourceEnd);
+			}
 		}
 	} else {
 		this.handle(
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
index 976a956..b497277 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
@@ -651,6 +651,7 @@
 887 = Resource leak: ''{0}'' is never closed
 888 = Resource leak: ''{0}'' is not closed at this location
 889 = Resource ''{0}'' should be managed by try-with-resource
+890 = Cannot switch on an enum value for source level below 1.5. Only convertible int values are permitted
 
 ### ELABORATIONS
 ## Access restrictions
commit 7cc08fd6458164ad4911bfd35d3157c5667751d0
Author: Srikanth <ssankaran>
Date:   Thu Oct 20 18:09:24 2011 +0530

    HEAD - Fixed bug 360164: Compile error in XSDImpl

77	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ProblemTypeAndMethodTest.java
16	4	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ProblemTypeAndMethodTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ProblemTypeAndMethodTest.java
index 986755e..3b4db37 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ProblemTypeAndMethodTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ProblemTypeAndMethodTest.java
@@ -7111,4 +7111,81 @@ public void test354502() {
 		compilerOptions /* custom options */
 	);
 }
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=360164
+public void test360164() {
+	if (this.complianceLevel < ClassFileConstants.JDK1_5) return;
+	this.runConformTest(
+			new String[] {
+					"p/B.java", 
+					"package p;\n" +
+					"\n" +
+					"public abstract class B<K,V> {\n" +
+					"	 protected abstract V foo(K element);\n" +
+					"}\n",
+					"p/C.java", 
+					"package p;\n" +
+					"public class C {\n" +
+					"}\n",
+					"p/D.java", 
+					"package p;\n" +
+					"public class D extends E {\n" +
+					"}\n",
+					"p/E.java", 
+					"package p;\n" +
+					"public abstract class E implements I {\n" +
+					"}\n",
+					"p/I.java", 
+					"package p;\n" +
+					"public interface I {\n" +
+					"}\n",
+					"p/X.java", 
+					"package p;\n" +
+					"public class X {\n" +
+					"	private final class A extends B<C,D>{\n" +
+					"		@Override\n" +
+					"		protected D foo(C c) {\n" +
+					"			return null;\n" +
+					"		}\n" +
+					"   }\n" +
+					"}\n",
+			},
+			"");
+
+	// delete binary file I (i.e. simulate removing it from classpath for subsequent compile)
+	Util.delete(new File(OUTPUT_DIR, "p" + File.separator + "I.class"));
+
+	runNegativeTest(
+		// test directory preparation
+		false /* do not flush output directory */,
+		new String[] { /* test files */
+				"p/X.java", 
+				"package p;\n" +
+				"public class X {\n" +
+				"	private final class A extends B<C,D>{\n" +
+				"		@Override\n" +
+				"		protected D foo(C c) {\n" +
+				"            Zork z;\n" +
+				"			return null;\n" +
+				"		}\n" +
+				"   }\n" +
+				"}\n",
+		},
+		// compiler options
+		null /* no class libraries */,
+		null /* no custom options */,
+		// compiler results 
+		"----------\n" + 
+		"1. WARNING in p\\X.java (at line 3)\n" + 
+		"	private final class A extends B<C,D>{\n" + 
+		"	                    ^\n" + 
+		"The type X.A is never used locally\n" + 
+		"----------\n" + 
+		"2. ERROR in p\\X.java (at line 6)\n" + 
+		"	Zork z;\n" + 
+		"	^^^^\n" + 
+		"Zork cannot be resolved to a type\n" + 
+		"----------\n",
+		// javac options
+		JavacTestOptions.SKIP_UNTIL_FRAMEWORK_FIX /* javac test options */);
+}
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java
index 8a84619..b8581e3 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BinaryTypeBinding.java
@@ -1157,8 +1157,14 @@ public ReferenceBinding superclass() {
 		this.tagBits |= TagBits.HierarchyHasProblems; // propagate type inconsistency
 	} else {
 		// make super-type resolving recursive for propagating typeBits downwards
-		this.superclass.superclass();
-		this.superclass.superInterfaces();
+		boolean wasToleratingMissingTypeProcessingAnnotations = this.environment.mayTolerateMissingType;
+		this.environment.mayTolerateMissingType = true; // https://bugs.eclipse.org/bugs/show_bug.cgi?id=360164
+		try {
+			this.superclass.superclass();
+			this.superclass.superInterfaces();
+		} finally {
+			this.environment.mayTolerateMissingType = wasToleratingMissingTypeProcessingAnnotations;
+		}
 	}
 	this.typeBits |= this.superclass.typeBits;
 	return this.superclass;
@@ -1174,8 +1180,14 @@ public ReferenceBinding[] superInterfaces() {
 			this.tagBits |= TagBits.HierarchyHasProblems; // propagate type inconsistency
 		} else {
 			// make super-type resolving recursive for propagating typeBits downwards
-			this.superInterfaces[i].superclass();
-			this.superInterfaces[i].superInterfaces();
+			boolean wasToleratingMissingTypeProcessingAnnotations = this.environment.mayTolerateMissingType;
+			this.environment.mayTolerateMissingType = true; // https://bugs.eclipse.org/bugs/show_bug.cgi?id=360164
+			try {
+				this.superInterfaces[i].superclass();
+				this.superInterfaces[i].superInterfaces();
+			} finally {
+				this.environment.mayTolerateMissingType = wasToleratingMissingTypeProcessingAnnotations;
+			}	
 		}
 		this.typeBits |= this.superInterfaces[i].typeBits;
 	}

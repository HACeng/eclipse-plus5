commit d22f2534ad71e981b8a20b49f3277de91c1c0a0c
Author: David Audel <daudel>
Date:   Tue Jun 8 11:02:47 2004 +0000

    bug 65259

34	0	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests.java
4	0	org.eclipse.jdt.core.tests.model/workspace/Resolve/src/ResolveDuplicateMethodDelcaration.java
15	2	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/ISelectionRequestor.java
17	11	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
5	0	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionNodeFound.java
2	2	org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetToCuMapper.java
14	6	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java
1	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceType.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests.java
index db5f5d5..ef48e0b 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ResolveTests.java
@@ -1023,4 +1023,38 @@ public void testEndOfFile() throws JavaModelException {
 			elements
 	);
 }
+/**
+ * https://bugs.eclipse.org/bugs/show_bug.cgi?id=65259
+ */
+public void testDuplicateMethodDelcaration() throws JavaModelException {
+	ICompilationUnit cu = getCompilationUnit("Resolve", "src", "", "ResolveDuplicateMethodDelcaration.java");
+	
+	String str = cu.getSource();
+	int start = str.indexOf("foo");
+	int length = "foo".length();
+	IJavaElement[] elements =  cu.codeSelect(start, length);
+	
+	assertElementsEqual(
+			"Unexpected elements",
+			"foo() [in ResolveDuplicateMethodDelcaration [in ResolveDuplicateMethodDelcaration.java [in <default> [in src [in Resolve]]]]]",
+			elements
+	);
+}
+/**
+ * https://bugs.eclipse.org/bugs/show_bug.cgi?id=65259
+ */
+public void testDuplicateMethodDelcaration2() throws JavaModelException {
+	ICompilationUnit cu = getCompilationUnit("Resolve", "src", "", "ResolveDuplicateMethodDelcaration.java");
+	
+	String str = cu.getSource();
+	int start = str.lastIndexOf("foo");
+	int length = "foo".length();
+	IJavaElement[] elements =  cu.codeSelect(start, length);
+	
+	assertElementsEqual(
+			"Unexpected elements",
+			"foo()#2 [in ResolveDuplicateMethodDelcaration [in ResolveDuplicateMethodDelcaration.java [in <default> [in src [in Resolve]]]]]",
+			elements
+	);
+}
 }
diff --git a/org.eclipse.jdt.core.tests.model/workspace/Resolve/src/ResolveDuplicateMethodDelcaration.java b/org.eclipse.jdt.core.tests.model/workspace/Resolve/src/ResolveDuplicateMethodDelcaration.java
new file mode 100644
index 0000000..18bb3bc
--- /dev/null
+++ b/org.eclipse.jdt.core.tests.model/workspace/Resolve/src/ResolveDuplicateMethodDelcaration.java
@@ -0,0 +1,4 @@
+public class ResolveDuplicateMethodDelcaration {
+	void foo() {}
+	void foo() {}
+}
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/ISelectionRequestor.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/ISelectionRequestor.java
index 5345d75..8e86534 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/ISelectionRequestor.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/ISelectionRequestor.java
@@ -116,6 +116,15 @@ public interface ISelectionRequestor {
 	 * 
 	 *  @param isConstructor boolean
 	 * 		Answer if the method is a constructor.
+	 * 
+	 * @param isDeclaration boolean
+	 *  	Answer if the selected method is a declaration
+	 * 
+	 * @param start
+	 *  	Start of the selection
+	 * 
+	 * @param end
+	 *  	End of the selection
 	 *
 	 * NOTE - All package and type names are presented in their readable form:
 	 *    Package names are in the form "a.b.c".
@@ -124,14 +133,18 @@ public interface ISelectionRequestor {
 	 *    Nested type names are in the qualified form "A.M".
 	 *    The default package is represented by an empty array.
 	 */
+	// parameters 'isDeclaration', 'start' and 'end' are use to distinguish duplicate methods declarations
 	void acceptMethod(
 		char[] declaringTypePackageName,
 		char[] declaringTypeName,
 		char[] selector,
 		char[][] parameterPackageNames,
 		char[][] parameterTypeNames,
-		boolean isConstructor);
-
+		boolean isConstructor,
+		boolean isDeclaration,
+		int start,
+		int end);
+	
 	/**
 	 * Code assist notification of a package selection.
 	 * @param packageName char[]
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
index 6eadacd..e79dcca 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
@@ -514,7 +514,7 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 									System.out.println(e.binding.toString());
 								}
 								// if null then we found a problem in the selection node
-								selectFrom(e.binding, parsedUnit);
+								selectFrom(e.binding, parsedUnit, e.isDeclaration);
 							}
 						}
 					}
@@ -540,7 +540,7 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 		}
 	}
 
-	private void selectFrom(Binding binding, CompilationUnitDeclaration parsedUnit) {
+	private void selectFrom(Binding binding, CompilationUnitDeclaration parsedUnit, boolean isDeclaration) {
 		if (binding instanceof ReferenceBinding) {
 			ReferenceBinding typeBinding = (ReferenceBinding) binding;
 			if (qualifiedSelection != null
@@ -609,7 +609,10 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 						parameterPackageNames,
 						parameterTypeNames,
 						methodBinding.isConstructor(),
-						parsedUnit);
+						parsedUnit,
+						isDeclaration,
+						actualSelectionStart,
+						actualSelectionEnd);
 				} else {
 					this.requestor.acceptMethod(
 						declaringClass.qualifiedPackageName(),
@@ -619,7 +622,10 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 							: methodBinding.selector,
 						parameterPackageNames,
 						parameterTypeNames,
-						methodBinding.isConstructor());
+						methodBinding.isConstructor(), 
+						isDeclaration,
+						actualSelectionStart,
+						actualSelectionEnd);
 				}
 				this.acceptedAnswer = true;
 			} else
@@ -650,11 +656,11 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 							this.acceptedAnswer = true;
 						} else {
 							// open on the type of the variable
-							selectFrom(((LocalVariableBinding) binding).type, parsedUnit);
+							selectFrom(((LocalVariableBinding) binding).type, parsedUnit, false);
 						}
 					} else
 						if (binding instanceof ArrayBinding) {
-							selectFrom(((ArrayBinding) binding).leafComponentType, parsedUnit);
+							selectFrom(((ArrayBinding) binding).leafComponentType, parsedUnit, false);
 							// open on the type of the array
 						} else
 							if (binding instanceof PackageBinding) {
@@ -824,7 +830,7 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 									System.out.println(e.binding.toString());
 								}
 								// if null then we found a problem in the selection node
-								selectFrom(e.binding, parsedUnit);
+								selectFrom(e.binding, parsedUnit, e.isDeclaration);
 							}
 						}
 					}
@@ -870,7 +876,7 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 	private void selectDeclaration(TypeDeclaration typeDeclaration, char[] assistIdentifier){
 	
 		if (typeDeclaration.name == assistIdentifier){
-			throw new SelectionNodeFound(typeDeclaration.binding);
+			throw new SelectionNodeFound(typeDeclaration.binding, true);
 		}
 		TypeDeclaration[] memberTypes = typeDeclaration.memberTypes;
 		for (int i = 0, length = memberTypes == null ? 0 : memberTypes.length; i < length; i++){
@@ -879,7 +885,7 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 		FieldDeclaration[] fields = typeDeclaration.fields;
 		for (int i = 0, length = fields == null ? 0 : fields.length; i < length; i++){
 			if (fields[i].name == assistIdentifier){
-				throw new SelectionNodeFound(fields[i].binding);
+				throw new SelectionNodeFound(fields[i].binding, true);
 			}
 		}
 		AbstractMethodDeclaration[] methods = typeDeclaration.methods;
@@ -887,10 +893,10 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 			AbstractMethodDeclaration method = methods[i];
 			if (method.selector == assistIdentifier){
 				if(method.binding != null) {
-					throw new SelectionNodeFound(method.binding);
+					throw new SelectionNodeFound(method.binding, true);
 				} else {
 					if(method.scope != null) {
-						throw new SelectionNodeFound(new MethodBinding(method.modifiers, method.selector, null, null, null, method.scope.referenceType().binding));
+						throw new SelectionNodeFound(new MethodBinding(method.modifiers, method.selector, null, null, null, method.scope.referenceType().binding), true);
 					}
 				}
 			}
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionNodeFound.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionNodeFound.java
index e2fa1de..7feb67e 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionNodeFound.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/select/SelectionNodeFound.java
@@ -14,10 +14,15 @@ import org.eclipse.jdt.internal.compiler.lookup.*;
 
 public class SelectionNodeFound extends RuntimeException {
 	public Binding binding;
+	public boolean isDeclaration;
 public SelectionNodeFound() {
 	this(null); // we found a problem in the selection node
 }
 public SelectionNodeFound(Binding binding) {
+	this(binding, false);
+}
+public SelectionNodeFound(Binding binding, boolean isDeclaration) {
 	this.binding = binding;
+	this.isDeclaration = isDeclaration;
 }
 }
diff --git a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetToCuMapper.java b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetToCuMapper.java
index 5dcf7f3..d007842 100644
--- a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetToCuMapper.java
+++ b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetToCuMapper.java
@@ -286,8 +286,8 @@ public ISelectionRequestor getSelectionRequestor(final ISelectionRequestor origi
 		public void acceptInterface(char[] packageName, char[] interfaceName, boolean needQualification) {
 			originalRequestor.acceptInterface(packageName, interfaceName, needQualification);
 		}
-		public void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, boolean isConstructor) {
-			originalRequestor.acceptMethod(declaringTypePackageName, declaringTypeName, selector, parameterPackageNames, parameterTypeNames, isConstructor);
+		public void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, boolean isConstructor, boolean isDeclaration, int start, int end) {
+			originalRequestor.acceptMethod(declaringTypePackageName, declaringTypeName, selector, parameterPackageNames, parameterTypeNames, isConstructor, isDeclaration, start, end);
 		}
 		public void acceptPackage(char[] packageName) {
 			originalRequestor.acceptPackage(packageName);
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java
index 9102ec7..e701cc1 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SelectionRequestor.java
@@ -17,6 +17,7 @@ import org.eclipse.jdt.core.IField;
 import org.eclipse.jdt.core.IJavaElement;
 import org.eclipse.jdt.core.IMethod;
 import org.eclipse.jdt.core.IPackageFragment;
+import org.eclipse.jdt.core.ISourceRange;
 import org.eclipse.jdt.core.IType;
 import org.eclipse.jdt.core.JavaModelException;
 import org.eclipse.jdt.core.Signature;
@@ -145,7 +146,7 @@ public void acceptLocalField(SourceTypeBinding typeBinding, char[] name, Compila
 		}
 	}
 }
-public void acceptLocalMethod(SourceTypeBinding typeBinding, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, boolean isConstructor, CompilationUnitDeclaration parsedUnit) {
+public void acceptLocalMethod(SourceTypeBinding typeBinding, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, boolean isConstructor, CompilationUnitDeclaration parsedUnit, boolean isDeclaration, int start, int end) {
 	IType type = (IType)this.handleFactory.createElement(typeBinding.scope.referenceContext, parsedUnit, this.openable);
 	// fix for 1FWFT6Q
 	if (type != null) {
@@ -172,7 +173,7 @@ public void acceptLocalMethod(SourceTypeBinding typeBinding, char[] selector, ch
 			
 			acceptBinaryMethod(type, selector, parameterPackageNames, parameterTypeNames);
 		} else {
-			acceptSourceMethod(type, selector, parameterPackageNames, parameterTypeNames);
+			acceptSourceMethod(type, selector, parameterPackageNames, parameterTypeNames, isDeclaration, start, end);
 		}
 	}
 }
@@ -201,7 +202,7 @@ public void acceptLocalVariable(LocalVariableBinding binding, CompilationUnitDec
 /**
  * Resolve the method
  */
-public void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, boolean isConstructor) {
+public void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, boolean isConstructor, boolean isDeclaration, int start, int end) {
 	IType type= resolveType(declaringTypePackageName, declaringTypeName,
 		NameLookup.ACCEPT_CLASSES | NameLookup.ACCEPT_INTERFACES);
 	// fix for 1FWFT6Q
@@ -229,7 +230,7 @@ public void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeNa
 			
 			acceptBinaryMethod(type, selector, parameterPackageNames, parameterTypeNames);
 		} else {
-			acceptSourceMethod(type, selector, parameterPackageNames, parameterTypeNames);
+			acceptSourceMethod(type, selector, parameterPackageNames, parameterTypeNames, isDeclaration, start, end);
 		}
 	}
 }
@@ -254,14 +255,21 @@ public void acceptPackage(char[] packageName) {
  *
  * fix for 1FWFT6Q
  */
-protected void acceptSourceMethod(IType type, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames) {
+protected void acceptSourceMethod(IType type, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, boolean isDeclaration, int start, int end) {
 	String name = new String(selector);
 	IMethod[] methods = null;
 	try {
 		methods = type.getMethods();
 		for (int i = 0; i < methods.length; i++) {
 			if (methods[i].getElementName().equals(name) && methods[i].getParameterTypes().length == parameterTypeNames.length) {
-				addElement(methods[i]);
+				if(isDeclaration) {
+					ISourceRange range = methods[i].getNameRange();
+					if(range.getOffset() <= start && range.getOffset() + range.getLength() >= end) {
+						addElement(methods[i]);
+					}
+				} else {
+					addElement(methods[i]);
+				}
 			}
 		}
 	} catch (JavaModelException e) {
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceType.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceType.java
index 74e1ad3..24b6fb7 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceType.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceType.java
@@ -732,7 +732,7 @@ public String[][] resolveType(String typeName, WorkingCopyOwner owner) throws Ja
 		public void acceptField(char[] declaringTypePackageName, char[] declaringTypeName, char[] fieldName) {
 			// ignore
 		}
-		public void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, boolean isConstructor) {
+		public void acceptMethod(char[] declaringTypePackageName, char[] declaringTypeName, char[] selector, char[][] parameterPackageNames, char[][] parameterTypeNames, boolean isConstructor, boolean isDeclaration, int start, int end) {
 			// ignore
 		}
 		public void acceptPackage(char[] packageName){

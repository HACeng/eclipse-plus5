commit 0a237b9304933d6b59816520b596e1161eaa11f3
Author: Jesse Garms <jgarms>
Date:   Wed May 10 22:31:06 2006 +0000

    Bugzilla Bug 140521
    Implementations of Declaration#accept(DeclarationVisitor) must not call super.accept(visitor).
    
    Correct implementation of accept() to match Sun's APT behavior.
    
    Also fix about.html files to match latest rev of EPL.

20	21	org.eclipse.jdt.apt.core/about.html
0	1	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ASTBasedAnnotationElementDeclarationImpl.java
0	1	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ASTBasedConstructorDeclarationImpl.java
0	1	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ASTBasedExecutableDeclarationImpl.java
0	1	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ASTBasedFieldDeclarationImpl.java
0	1	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ASTBasedMemberDeclarationImpl.java
0	1	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ASTBasedMethodDeclarationImpl.java
0	2	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/AnnotationDeclarationImpl.java
0	1	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/AnnotationElementDeclarationImpl.java
0	1	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/BinaryParameterDeclarationImpl.java
0	2	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ClassDeclarationImpl.java
0	1	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ConstructorDeclarationImpl.java
1	1	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/EnumConstantDeclarationImpl.java
0	2	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/EnumDeclarationImpl.java
0	1	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ExecutableDeclarationImpl.java
0	1	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/FieldDeclarationImpl.java
0	2	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/InterfaceDeclarationImpl.java
0	1	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/MemberDeclarationImpl.java
0	1	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/MethodDeclarationImpl.java
0	1	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/PackageDeclarationImpl.java
0	1	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/SourceParameterDeclarationImpl.java
6	9	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/TypeDeclarationImpl.java
0	3	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/TypeParameterDeclarationImpl.java
0	1	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/type/ArrayTypeImpl.java
0	6	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/type/ErrorType.java
0	1	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/type/PrimitiveTypeImpl.java
0	1	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/type/VoidTypeImpl.java
0	1	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/type/WildcardTypeImpl.java
21	21	org.eclipse.jdt.apt.tests/about.html
406	0	org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/DeclarationVisitorTests.java
1	1	org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/MirrorDeclarationTests.java
1	0	org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/TestAll.java
19	0	org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/generic/AbstractGenericProcessor.java
21	21	org.eclipse.jdt.apt.ui/about.html
diff --git a/org.eclipse.jdt.apt.core/about.html b/org.eclipse.jdt.apt.core/about.html
index 4b9fd7c..1651a32 100644
--- a/org.eclipse.jdt.apt.core/about.html
+++ b/org.eclipse.jdt.apt.core/about.html
@@ -1,33 +1,31 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">
-<html><head>
-
-<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
+    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml">
+<head>
+<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"/>
 <title>About</title>
 </head>
-
 <body lang="EN-US">
 <h2>About This Content</h2>
  
-<p>February 24, 2005</p>	
+<p>May 2, 2006</p>	
 <h3>License</h3>
 
-<p>The Eclipse Foundation makes available all content in this plug-in
-("Content"). Unless otherwise indicated below, the Content is provided
-to you under the terms and conditions of the
-Eclipse Public License Version 1.0 ("EPL"). A copy of the EPL is
-available at <a href="http://www.eclipse.org/legal/epl-v10.html">http://www.eclipse.org/legal/epl-v10.html</a>.
-For purposes of the EPL, "Program" will mean the Content.</p>
+<p>The Eclipse Foundation makes available all content in this plug-in (&quot;Content&quot;).  Unless otherwise 
+indicated below, the Content is provided to you under the terms and conditions of the
+Eclipse Public License Version 1.0 (&quot;EPL&quot;).  A copy of the EPL is available 
+at <a href="http://www.eclipse.org/legal/epl-v10.html">http://www.eclipse.org/legal/epl-v10.html</a>.
+For purposes of the EPL, &quot;Program&quot; will mean the Content.</p>
 
-<p>If you did not receive this Content directly from the Eclipse
-Foundation, the Content is being redistributed by another party
-("Redistributor") and different terms and conditions may
-apply to your use of any object code in the Content. Check the
-Redistributor's license that was provided with the Content. If no such
-license exists, contact the Redistributor. Unless otherwise
-indicated below, the terms and conditions of the EPL still apply to any
-source code in the Content.</p>
+<p>If you did not receive this Content directly from the Eclipse Foundation, the Content is 
+being redistributed by another party (&quot;Redistributor&quot;) and different terms and conditions may
+apply to your use of any object code in the Content.  Check the Redistributor's license that was 
+provided with the Content.  If no such license exists, contact the Redistributor.  Unless otherwise
+indicated below, the terms and conditions of the EPL still apply to any source code in the Content
+and such source code may be obtained at <a href="/">http://www.eclipse.org</a>.</p>
 
-<p>This plug-in contains a file, <code>mirrorapi.jar</code>, whose contents are covered by the following license:
+<p>This plug-in also contains java classes in the com.sun.mirror package, 
+whose contents are covered by the following license:
 
 <pre>
 Copyright (c) 2004, Sun Microsystems, Inc.All rights reserved.
@@ -59,5 +57,6 @@ THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 </pre>
+</p>
 
 </body></html>
\ No newline at end of file
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ASTBasedAnnotationElementDeclarationImpl.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ASTBasedAnnotationElementDeclarationImpl.java
index cc34435..6b43778 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ASTBasedAnnotationElementDeclarationImpl.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ASTBasedAnnotationElementDeclarationImpl.java
@@ -41,7 +41,6 @@ public class ASTBasedAnnotationElementDeclarationImpl
 	}
 
 	public void accept(DeclarationVisitor visitor) {
-		super.accept(visitor);
 		visitor.visitAnnotationTypeElementDeclaration(this);
 	}
 
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ASTBasedConstructorDeclarationImpl.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ASTBasedConstructorDeclarationImpl.java
index e5e3529..a84c185 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ASTBasedConstructorDeclarationImpl.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ASTBasedConstructorDeclarationImpl.java
@@ -30,7 +30,6 @@ public class ASTBasedConstructorDeclarationImpl
 	
 	public void accept(DeclarationVisitor visitor)
     {
-        super.accept(visitor);
         visitor.visitConstructorDeclaration(this);
     }
     
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ASTBasedExecutableDeclarationImpl.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ASTBasedExecutableDeclarationImpl.java
index 1c1bc98..37d7e70 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ASTBasedExecutableDeclarationImpl.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ASTBasedExecutableDeclarationImpl.java
@@ -39,7 +39,6 @@ public abstract class ASTBasedExecutableDeclarationImpl
 	
 	public void accept(DeclarationVisitor visitor)
     {
-        super.accept(visitor);
         visitor.visitExecutableDeclaration(this);
     }
 	
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ASTBasedFieldDeclarationImpl.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ASTBasedFieldDeclarationImpl.java
index 35ee806..4e2f228 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ASTBasedFieldDeclarationImpl.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ASTBasedFieldDeclarationImpl.java
@@ -49,7 +49,6 @@ public class ASTBasedFieldDeclarationImpl
 	
 	public void accept(DeclarationVisitor visitor)
     {
-        super.accept(visitor);
         visitor.visitFieldDeclaration(this);
     }
 
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ASTBasedMemberDeclarationImpl.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ASTBasedMemberDeclarationImpl.java
index 2180419..a6ae551 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ASTBasedMemberDeclarationImpl.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ASTBasedMemberDeclarationImpl.java
@@ -33,7 +33,6 @@ public abstract class ASTBasedMemberDeclarationImpl
 	}
 	
 	public void accept(DeclarationVisitor visitor) {
-		super.accept(visitor);
         visitor.visitMemberDeclaration(this);
 	}
     
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ASTBasedMethodDeclarationImpl.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ASTBasedMethodDeclarationImpl.java
index 70d4a4f..11c81d4 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ASTBasedMethodDeclarationImpl.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ASTBasedMethodDeclarationImpl.java
@@ -34,7 +34,6 @@ public class ASTBasedMethodDeclarationImpl
 	
 	public void accept(DeclarationVisitor visitor)
     {
-        super.accept(visitor);
         visitor.visitMethodDeclaration(this);
     }
 	
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/AnnotationDeclarationImpl.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/AnnotationDeclarationImpl.java
index 428ad18..b884a2f 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/AnnotationDeclarationImpl.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/AnnotationDeclarationImpl.java
@@ -31,7 +31,6 @@ public class AnnotationDeclarationImpl extends InterfaceDeclarationImpl implemen
 
     public void accept(DeclarationVisitor visitor)
     {
-        super.accept(visitor);
         visitor.visitAnnotationTypeDeclaration(this);
     }
 
@@ -43,7 +42,6 @@ public class AnnotationDeclarationImpl extends InterfaceDeclarationImpl implemen
     // start of implementation of AnnotationType API
     public void accept(TypeVisitor visitor)
     {
-        super.accept(visitor);
         visitor.visitAnnotationType(this);
     }
 
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/AnnotationElementDeclarationImpl.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/AnnotationElementDeclarationImpl.java
index 3423d86..2c4ffaf 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/AnnotationElementDeclarationImpl.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/AnnotationElementDeclarationImpl.java
@@ -35,7 +35,6 @@ public class AnnotationElementDeclarationImpl extends MethodDeclarationImpl impl
 
     public void accept(DeclarationVisitor visitor)
     {
-        super.accept(visitor);
         visitor.visitAnnotationTypeElementDeclaration(this);
     }
 
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/BinaryParameterDeclarationImpl.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/BinaryParameterDeclarationImpl.java
index 8fd6120..c8fc287 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/BinaryParameterDeclarationImpl.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/BinaryParameterDeclarationImpl.java
@@ -61,7 +61,6 @@ public class BinaryParameterDeclarationImpl extends DeclarationImpl implements P
     
     public void accept(DeclarationVisitor visitor)
     {
-        super.accept(visitor);
         visitor.visitParameterDeclaration(this);
     }  
  
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ClassDeclarationImpl.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ClassDeclarationImpl.java
index 81f2134..2e7d85f 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ClassDeclarationImpl.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ClassDeclarationImpl.java
@@ -43,7 +43,6 @@ public class ClassDeclarationImpl extends TypeDeclarationImpl implements ClassDe
 
     public void accept(DeclarationVisitor visitor)
     {
-        super.accept(visitor);
         visitor.visitClassDeclaration(this);
     }
     
@@ -126,7 +125,6 @@ public class ClassDeclarationImpl extends TypeDeclarationImpl implements ClassDe
     // Start of implementation of ClassType API
     public void accept(TypeVisitor visitor)
     {
-        super.accept(visitor);
         visitor.visitClassType(this);
     }
 
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ConstructorDeclarationImpl.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ConstructorDeclarationImpl.java
index cb578c0..10fddc3 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ConstructorDeclarationImpl.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ConstructorDeclarationImpl.java
@@ -28,7 +28,6 @@ public class ConstructorDeclarationImpl extends ExecutableDeclarationImpl implem
 
     public void accept(DeclarationVisitor visitor)
     {
-        super.accept(visitor);
         visitor.visitConstructorDeclaration(this);
     }
 
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/EnumConstantDeclarationImpl.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/EnumConstantDeclarationImpl.java
index ff169bd..96ea3af 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/EnumConstantDeclarationImpl.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/EnumConstantDeclarationImpl.java
@@ -28,7 +28,7 @@ public class EnumConstantDeclarationImpl extends FieldDeclarationImpl implements
 
     public void accept(DeclarationVisitor visitor)
     {
-        super.accept(visitor);
+        visitor.visitEnumConstantDeclaration(this);
     }
 
     public EnumDeclaration getDeclaringType()
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/EnumDeclarationImpl.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/EnumDeclarationImpl.java
index 8f61ad9..f372ccf 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/EnumDeclarationImpl.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/EnumDeclarationImpl.java
@@ -37,7 +37,6 @@ public class EnumDeclarationImpl extends ClassDeclarationImpl implements EnumDec
 
     public void accept(DeclarationVisitor visitor)
     {
-        super.accept(visitor);
         visitor.visitEnumDeclaration(this);
     }
 
@@ -61,7 +60,6 @@ public class EnumDeclarationImpl extends ClassDeclarationImpl implements EnumDec
     // end of implementation of EnumType API
     public void accept(TypeVisitor visitor)
     {
-        super.accept(visitor);
         visitor.visitEnumType(this);
     }
 
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ExecutableDeclarationImpl.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ExecutableDeclarationImpl.java
index 01c6c4c..8fb96ab 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ExecutableDeclarationImpl.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/ExecutableDeclarationImpl.java
@@ -35,7 +35,6 @@ public abstract class ExecutableDeclarationImpl
 
     public void accept(DeclarationVisitor visitor)
     {
-        super.accept(visitor);
         visitor.visitExecutableDeclaration(this);
     }
 
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/FieldDeclarationImpl.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/FieldDeclarationImpl.java
index 3c9bb5d..adaa079 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/FieldDeclarationImpl.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/FieldDeclarationImpl.java
@@ -20,7 +20,6 @@ public class FieldDeclarationImpl extends MemberDeclarationImpl implements Field
     
     public void accept(DeclarationVisitor visitor)
     {
-        super.accept(visitor);
         visitor.visitFieldDeclaration(this);
     }
 
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/InterfaceDeclarationImpl.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/InterfaceDeclarationImpl.java
index 931dfe9..5183ba8 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/InterfaceDeclarationImpl.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/InterfaceDeclarationImpl.java
@@ -31,7 +31,6 @@ public class InterfaceDeclarationImpl extends TypeDeclarationImpl implements Int
 
     public void accept(DeclarationVisitor visitor)
     {
-        super.accept(visitor);
         visitor.visitInterfaceDeclaration(this);
     }
 
@@ -43,7 +42,6 @@ public class InterfaceDeclarationImpl extends TypeDeclarationImpl implements Int
     // start of implementation of InterfaceType API
     public void accept(TypeVisitor visitor)
     {
-        super.accept(visitor);
         visitor.visitInterfaceType(this);
     }
 
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/MemberDeclarationImpl.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/MemberDeclarationImpl.java
index 9d1f6ea..f0458c0 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/MemberDeclarationImpl.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/MemberDeclarationImpl.java
@@ -31,7 +31,6 @@ public abstract class MemberDeclarationImpl extends DeclarationImpl implements M
     
     public void accept(DeclarationVisitor visitor)
     {
-        super.accept(visitor);
         visitor.visitMemberDeclaration(this);
     }
     
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/MethodDeclarationImpl.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/MethodDeclarationImpl.java
index 51254ec..593b9ac 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/MethodDeclarationImpl.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/MethodDeclarationImpl.java
@@ -42,7 +42,6 @@ public class MethodDeclarationImpl extends ExecutableDeclarationImpl implements
 
     public void accept(DeclarationVisitor visitor)
     {
-        super.accept(visitor);
         visitor.visitMethodDeclaration(this);
     }
 
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/PackageDeclarationImpl.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/PackageDeclarationImpl.java
index 2142ec4..5201e52 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/PackageDeclarationImpl.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/PackageDeclarationImpl.java
@@ -83,7 +83,6 @@ public class PackageDeclarationImpl extends DeclarationImpl implements PackageDe
 
     public void accept(DeclarationVisitor visitor)
     {
-        super.accept(visitor);
         visitor.visitPackageDeclaration(this);
     }
     
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/SourceParameterDeclarationImpl.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/SourceParameterDeclarationImpl.java
index a91298e..16e7d7c 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/SourceParameterDeclarationImpl.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/SourceParameterDeclarationImpl.java
@@ -44,7 +44,6 @@ public class SourceParameterDeclarationImpl
     
     public void accept(DeclarationVisitor visitor)
     {
-        super.accept(visitor);
         visitor.visitParameterDeclaration(this);
     }  
     
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/TypeDeclarationImpl.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/TypeDeclarationImpl.java
index b587fa9..e4a4139 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/TypeDeclarationImpl.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/TypeDeclarationImpl.java
@@ -29,13 +29,17 @@ import org.eclipse.jdt.core.dom.ITypeBinding;
 import org.eclipse.jdt.core.dom.IVariableBinding;
 import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
 
-import com.sun.mirror.declaration.*;
+import com.sun.mirror.declaration.Declaration;
+import com.sun.mirror.declaration.FieldDeclaration;
+import com.sun.mirror.declaration.MethodDeclaration;
+import com.sun.mirror.declaration.PackageDeclaration;
+import com.sun.mirror.declaration.TypeDeclaration;
+import com.sun.mirror.declaration.TypeParameterDeclaration;
 import com.sun.mirror.type.DeclaredType;
 import com.sun.mirror.type.InterfaceType;
 import com.sun.mirror.type.ReferenceType;
 import com.sun.mirror.type.TypeMirror;
 import com.sun.mirror.util.DeclarationVisitor;
-import com.sun.mirror.util.TypeVisitor;
 
 public abstract class TypeDeclarationImpl extends MemberDeclarationImpl 
 	implements TypeDeclaration, DeclaredType, ReferenceType, EclipseMirrorType
@@ -68,7 +72,6 @@ public abstract class TypeDeclarationImpl extends MemberDeclarationImpl
 
     public void accept(DeclarationVisitor visitor)
     {
-        super.accept(visitor);
         visitor.visitTypeDeclaration(this);
     }
 
@@ -221,12 +224,6 @@ public abstract class TypeDeclarationImpl extends MemberDeclarationImpl
         return results;
     }
 
-    public void accept(TypeVisitor visitor)
-    {
-        visitor.visitTypeMirror(this);
-        visitor.visitDeclaredType(this);
-        visitor.visitReferenceType(this);
-    }
 
     // End of implementation of DeclaredType API
 
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/TypeParameterDeclarationImpl.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/TypeParameterDeclarationImpl.java
index ca228fe..1e54910 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/TypeParameterDeclarationImpl.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/declaration/TypeParameterDeclarationImpl.java
@@ -46,7 +46,6 @@ public class TypeParameterDeclarationImpl extends DeclarationImpl implements
 
     public void accept(DeclarationVisitor visitor)
     {
-        super.accept(visitor);
         visitor.visitTypeParameterDeclaration(this);
     }
 
@@ -128,8 +127,6 @@ public class TypeParameterDeclarationImpl extends DeclarationImpl implements
     // Start of implementation of TypeVariable API
     public void accept(TypeVisitor visitor)
     {
-        visitor.visitTypeMirror(this);
-        visitor.visitReferenceType(this);
         visitor.visitTypeVariable(this);
     }
 
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/type/ArrayTypeImpl.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/type/ArrayTypeImpl.java
index cd5aed9..19986dc 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/type/ArrayTypeImpl.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/type/ArrayTypeImpl.java
@@ -34,7 +34,6 @@ public class ArrayTypeImpl implements ArrayType, EclipseMirrorType
 
     public void accept(TypeVisitor visitor)
     {
-        visitor.visitTypeMirror(this);
         visitor.visitArrayType(this);
     }
 
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/type/ErrorType.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/type/ErrorType.java
index 27d9fd9..8c41704 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/type/ErrorType.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/type/ErrorType.java
@@ -51,8 +51,6 @@ public abstract class ErrorType implements DeclaredType, ReferenceType, EclipseM
     public void accept(TypeVisitor visitor)
     {
         visitor.visitTypeMirror(this);
-        visitor.visitDeclaredType(this);
-        visitor.visitReferenceType(this);
     }
 
     public Collection<InterfaceType> getSuperinterfaces(){ return Collections.emptyList(); }
@@ -67,7 +65,6 @@ public abstract class ErrorType implements DeclaredType, ReferenceType, EclipseM
 
         public void accept(TypeVisitor visitor)
         {
-            super.accept(visitor);
             visitor.visitClassType(this);
         }
 
@@ -86,7 +83,6 @@ public abstract class ErrorType implements DeclaredType, ReferenceType, EclipseM
 
         public void accept(TypeVisitor visitor)
         {
-            super.accept(visitor);
             visitor.visitInterfaceType(this);
         }
 
@@ -99,7 +95,6 @@ public abstract class ErrorType implements DeclaredType, ReferenceType, EclipseM
 
         public void accept(TypeVisitor visitor)
         {
-            super.accept(visitor);
             visitor.visitAnnotationType(this);
         }
 
@@ -117,7 +112,6 @@ public abstract class ErrorType implements DeclaredType, ReferenceType, EclipseM
     	
     	public void accept(TypeVisitor visitor)
         {
-            super.accept(visitor);
             visitor.visitArrayType(this);
         }
     	
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/type/PrimitiveTypeImpl.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/type/PrimitiveTypeImpl.java
index b0140af..2930102 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/type/PrimitiveTypeImpl.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/type/PrimitiveTypeImpl.java
@@ -29,7 +29,6 @@ public class PrimitiveTypeImpl implements PrimitiveType, EclipseMirrorType
     }
     public void accept(TypeVisitor visitor)
     {
-        visitor.visitTypeMirror(this);
         visitor.visitPrimitiveType(this);
     }
 
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/type/VoidTypeImpl.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/type/VoidTypeImpl.java
index f4ed2b6..8901595 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/type/VoidTypeImpl.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/type/VoidTypeImpl.java
@@ -30,7 +30,6 @@ public class VoidTypeImpl implements VoidType, EclipseMirrorType
     
     public void accept(TypeVisitor visitor)
     {
-        visitor.visitTypeMirror(this);
         visitor.visitVoidType(this);
     }
 
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/type/WildcardTypeImpl.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/type/WildcardTypeImpl.java
index 6aad888..d66d346 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/type/WildcardTypeImpl.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/type/WildcardTypeImpl.java
@@ -37,7 +37,6 @@ public class WildcardTypeImpl implements WildcardType, EclipseMirrorType
     
     public void accept(TypeVisitor visitor)
     {
-        visitor.visitTypeMirror(this);
         visitor.visitWildcardType(this);
     }
 
diff --git a/org.eclipse.jdt.apt.tests/about.html b/org.eclipse.jdt.apt.tests/about.html
index f27b660..5d03fd4 100644
--- a/org.eclipse.jdt.apt.tests/about.html
+++ b/org.eclipse.jdt.apt.tests/about.html
@@ -1,28 +1,28 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">
-<html><head><title>About</title>
-
-<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"></head>
-
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
+    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml">
+<head>
+<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"/>
+<title>About</title>
+</head>
 <body lang="EN-US">
 <h2>About This Content</h2>
  
-<p>January 18, 2006</p>	
+<p>May 2, 2006</p>	
 <h3>License</h3>
 
-<p>The Eclipse Foundation makes available all content in this plug-in
-("Content"). Unless otherwise indicated below, the Content is provided
-to you under the terms and conditions of the
-Eclipse Public License Version 1.0 ("EPL"). A copy of the EPL is
-available at <a href="http://www.eclipse.org/legal/epl-v10.html">http://www.eclipse.org/legal/epl-v10.html</a>.
-For purposes of the EPL, "Program" will mean the Content.</p>
+<p>The Eclipse Foundation makes available all content in this plug-in (&quot;Content&quot;).  Unless otherwise 
+indicated below, the Content is provided to you under the terms and conditions of the
+Eclipse Public License Version 1.0 (&quot;EPL&quot;).  A copy of the EPL is available 
+at <a href="http://www.eclipse.org/legal/epl-v10.html">http://www.eclipse.org/legal/epl-v10.html</a>.
+For purposes of the EPL, &quot;Program&quot; will mean the Content.</p>
 
-<p>If you did not receive this Content directly from the Eclipse
-Foundation, the Content is being redistributed by another party
-("Redistributor") and different terms and conditions may
-apply to your use of any object code in the Content. Check the
-Redistributor's license that was provided with the Content. If no such
-license exists, contact the Redistributor. Unless otherwise
-indicated below, the terms and conditions of the EPL still apply to any
-source code in the Content.</p>
+<p>If you did not receive this Content directly from the Eclipse Foundation, the Content is 
+being redistributed by another party (&quot;Redistributor&quot;) and different terms and conditions may
+apply to your use of any object code in the Content.  Check the Redistributor's license that was 
+provided with the Content.  If no such license exists, contact the Redistributor.  Unless otherwise
+indicated below, the terms and conditions of the EPL still apply to any source code in the Content
+and such source code may be obtained at <a href="/">http://www.eclipse.org</a>.</p>
 
-</body></html>
\ No newline at end of file
+</body>
+</html>
\ No newline at end of file
diff --git a/org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/DeclarationVisitorTests.java b/org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/DeclarationVisitorTests.java
new file mode 100644
index 0000000..2e0aa60
--- /dev/null
+++ b/org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/DeclarationVisitorTests.java
@@ -0,0 +1,406 @@
+/*******************************************************************************
+ * Copyright (c) 2006 BEA Systems, Inc. 
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *    sbandow@bea.com - initial API and implementation
+ *    
+ *******************************************************************************/
+
+package org.eclipse.jdt.apt.tests;
+
+import java.util.ArrayList;
+import java.util.Collection;
+
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+import org.eclipse.core.resources.IProject;
+import org.eclipse.core.runtime.IPath;
+import org.eclipse.jdt.apt.tests.annotations.generic.AbstractGenericProcessor;
+import org.eclipse.jdt.apt.tests.annotations.generic.GenericFactory;
+
+import com.sun.mirror.declaration.AnnotationTypeDeclaration;
+import com.sun.mirror.declaration.AnnotationTypeElementDeclaration;
+import com.sun.mirror.declaration.ClassDeclaration;
+import com.sun.mirror.declaration.ConstructorDeclaration;
+import com.sun.mirror.declaration.Declaration;
+import com.sun.mirror.declaration.EnumConstantDeclaration;
+import com.sun.mirror.declaration.EnumDeclaration;
+import com.sun.mirror.declaration.ExecutableDeclaration;
+import com.sun.mirror.declaration.FieldDeclaration;
+import com.sun.mirror.declaration.InterfaceDeclaration;
+import com.sun.mirror.declaration.MemberDeclaration;
+import com.sun.mirror.declaration.MethodDeclaration;
+import com.sun.mirror.declaration.PackageDeclaration;
+import com.sun.mirror.declaration.ParameterDeclaration;
+import com.sun.mirror.declaration.TypeDeclaration;
+import com.sun.mirror.declaration.TypeParameterDeclaration;
+import com.sun.mirror.util.DeclarationVisitor;
+
+/**
+ * Tests for the JDT-APT implementation of Declaration Visitors
+ */
+public class DeclarationVisitorTests extends APTTestBase {
+	
+	public DeclarationVisitorTests(final String name) {
+		super(name);
+	}
+
+	public static Test suite() {
+		return new TestSuite(DeclarationVisitorTests.class);
+	}
+	
+	public void testPackageDeclarationVisitor() {
+		testCaseIdentifier = Cases.PackageDeclaration;
+		runProcessorBasedTest();
+	}
+
+	public void testClassDeclarationVisitor() {
+		testCaseIdentifier = Cases.ClassDeclaration;
+		runProcessorBasedTest();
+	}
+
+	public void testEnumDeclarationVisitor() {
+		testCaseIdentifier = Cases.EnumDeclaration;
+		runProcessorBasedTest();
+	}
+	
+	public void testInterfaceDeclarationVisitor() {
+		testCaseIdentifier = Cases.InterfaceDeclaration;
+		runProcessorBasedTest();
+	}
+
+	public void testAnnotationTypeDeclarationVisitor() {
+		testCaseIdentifier = Cases.AnnotationTypeDeclaration;
+		runProcessorBasedTest();
+	}
+
+	public void testFieldDeclarationVisitor() {
+		testCaseIdentifier = Cases.FieldDeclaration;
+		runProcessorBasedTest();
+	}
+
+	public void testEnumConstantDeclarationVisitor() {
+		testCaseIdentifier = Cases.EnumConstantDeclaration;
+		runProcessorBasedTest();
+	}
+
+	public void testConstructorDeclarationVisitor() {
+		testCaseIdentifier = Cases.ConstructorDeclaration;
+		runProcessorBasedTest();
+	}
+
+	public void testMethodDeclarationVisitor() {
+		testCaseIdentifier = Cases.MethodDeclaration;
+		runProcessorBasedTest();
+	}
+
+	public void testAnnotationTypeElementDeclarationVisitor() {
+		testCaseIdentifier = Cases.AnnotationTypeElementDeclaration;
+		runProcessorBasedTest();
+	}
+
+	public void testParameterDeclarationVisitor() {
+		testCaseIdentifier = Cases.ParameterDeclaration;
+		runProcessorBasedTest();
+	}
+
+	public void testTypeParameterDeclarationVisitor() {
+		testCaseIdentifier = Cases.TypeParameterDeclaration;
+		runProcessorBasedTest();
+	}
+	
+	
+	/**
+	 * Instantiate the AnnotationProcessor to run the actual tests
+	 */
+	void runProcessorBasedTest() {
+		DeclarationVisitorProc p = new DeclarationVisitorProc();
+		GenericFactory.PROCESSOR = p;
+		
+		IProject project = env.getProject(getProjectName());
+		IPath srcRoot = getSourcePath();
+
+		env.addClass(srcRoot, "test", "Test", code);		
+		
+		fullBuild( project.getFullPath() );
+		expectingNoProblems();
+		
+		assertTrue("Processor not invoked", p.called);
+	}
+
+	
+	/**
+	 * Annotation Processor containing the actual tests
+	 */
+	class DeclarationVisitorProc extends AbstractGenericProcessor {
+		boolean called;
+		
+		public void _process() {
+		
+			called = true;
+			assertTrue(decls.size() == 1);
+			
+			initDeclVisitList();
+
+			TypeDeclaration typeDecl = env.getTypeDeclarations().iterator().next();
+			Collection<TypeDeclaration> nestedTypes = typeDecl.getNestedTypes();
+			ClassDeclaration classDecl = null;
+			EnumDeclaration enumDecl = null;
+			InterfaceDeclaration interfaceDecl = null;
+			AnnotationTypeDeclaration annoTypeDecl = null;
+			EnumConstantDeclaration enumConstantDecl = null;
+			MethodDeclaration methodDecl = null;
+			
+			switch (testCaseIdentifier) {
+
+			case PackageDeclaration : 
+				PackageDeclaration packageDecl = typeDecl.getPackage();
+				packageDecl.accept(new DeclarationVisitorImpl());
+				assertEquals("Expect one visitor", 1, declarationsVisited.size());
+				assertEquals("Expected PackageDeclaration visitor", "PackageDeclarationImpl", declarationsVisited.get(0).getClass().getSimpleName());
+				break;
+
+			case ClassDeclaration :
+				for(TypeDeclaration tempDecl : nestedTypes) {
+					if(tempDecl.getSimpleName().equals("C")) {
+						classDecl = (ClassDeclaration)tempDecl;
+					}
+				}
+				classDecl.accept(new DeclarationVisitorImpl());
+				assertEquals("Expect one visitor", 1, declarationsVisited.size());
+				assertEquals("Expected ClassDeclaration visitor", "ClassDeclarationImpl", declarationsVisited.get(0).getClass().getSimpleName());
+				break;
+			
+			case EnumDeclaration :
+				for(TypeDeclaration tempDecl : nestedTypes) {
+					if(tempDecl.getSimpleName().equals("E")) {
+						enumDecl = (EnumDeclaration)tempDecl;
+					}
+				}
+				enumDecl.accept(new DeclarationVisitorImpl());
+				assertEquals("Expect one visitor", 1, declarationsVisited.size());
+				assertEquals("Expected EnumDeclaration visitor", "EnumDeclarationImpl", declarationsVisited.get(0).getClass().getSimpleName());
+				break;
+				
+			case InterfaceDeclaration :
+				for(TypeDeclaration tempDecl : nestedTypes) {
+					if(tempDecl.getSimpleName().equals("I")) {
+						interfaceDecl = (InterfaceDeclaration)tempDecl;
+					}
+				}
+				interfaceDecl.accept(new DeclarationVisitorImpl());
+				assertEquals("Expect one visitor", 1, declarationsVisited.size());
+				assertEquals("Expected InterfaceDeclaration visitor", "InterfaceDeclarationImpl", declarationsVisited.get(0).getClass().getSimpleName());
+				break;
+				
+			case AnnotationTypeDeclaration :
+				for(TypeDeclaration tempDecl : nestedTypes) {
+					if(tempDecl.getSimpleName().equals("A")) {
+						annoTypeDecl = (AnnotationTypeDeclaration)tempDecl;
+					}
+				}
+				annoTypeDecl.accept(new DeclarationVisitorImpl());
+				assertEquals("Expect one visitor", 1, declarationsVisited.size());
+				assertEquals("Expected AnnotationTypeDeclaration visitor", "AnnotationDeclarationImpl", declarationsVisited.get(0).getClass().getSimpleName());
+				break;
+				
+			case FieldDeclaration :
+				FieldDeclaration fieldDecl = typeDecl.getFields().iterator().next();
+				fieldDecl.accept(new DeclarationVisitorImpl());
+				assertEquals("Expect one visitor", 1, declarationsVisited.size());
+				assertEquals("Expected FieldDeclaration visitor", "FieldDeclarationImpl", declarationsVisited.get(0).getClass().getSimpleName());
+				break;
+				
+			case EnumConstantDeclaration :
+				for(TypeDeclaration tempDecl : nestedTypes) {
+					if(tempDecl.getSimpleName().equals("E")) {
+						enumDecl = (EnumDeclaration)tempDecl;
+					}
+				}
+				enumConstantDecl = enumDecl.getEnumConstants().iterator().next();
+				enumConstantDecl.accept(new DeclarationVisitorImpl());
+				assertEquals("Expect one visitor", 1, declarationsVisited.size());
+				assertEquals("Expected EnumConstantDeclaration visitor", "EnumConstantDeclarationImpl", declarationsVisited.get(0).getClass().getSimpleName());
+				break;
+				
+			case ConstructorDeclaration :
+				for(TypeDeclaration tempDecl : nestedTypes) {
+					if(tempDecl.getSimpleName().equals("C")) {
+						classDecl = (ClassDeclaration)tempDecl;
+					}
+				}
+				ConstructorDeclaration constructorDecl = classDecl.getConstructors().iterator().next();
+				constructorDecl.accept(new DeclarationVisitorImpl());
+				assertEquals("Expect one visitor", 1, declarationsVisited.size());
+				assertEquals("Expected ConstructorDeclaration visitor", "ConstructorDeclarationImpl", declarationsVisited.get(0).getClass().getSimpleName());
+				break;
+				
+			case MethodDeclaration :
+				methodDecl = typeDecl.getMethods().iterator().next();
+				methodDecl.accept(new DeclarationVisitorImpl());
+				assertEquals("Expect one visitor", 1, declarationsVisited.size());
+				assertEquals("Expected MethodDeclaration visitor", "MethodDeclarationImpl", declarationsVisited.get(0).getClass().getSimpleName());
+				break;
+				
+			case AnnotationTypeElementDeclaration :
+				for(TypeDeclaration tempDecl : nestedTypes) {
+					if(tempDecl.getSimpleName().equals("A")) {
+						annoTypeDecl = (AnnotationTypeDeclaration)tempDecl;
+					}
+				}
+				AnnotationTypeElementDeclaration annoTypeElementDecl = annoTypeDecl.getMethods().iterator().next();
+				annoTypeElementDecl.accept(new DeclarationVisitorImpl());
+				assertEquals("Expect one visitor", 1, declarationsVisited.size());
+				assertEquals("Expected AnnotationTypeElementDeclaration visitor", "AnnotationElementDeclarationImpl", declarationsVisited.get(0).getClass().getSimpleName());
+				break;
+				
+			case ParameterDeclaration :
+				methodDecl = typeDecl.getMethods().iterator().next();
+				ParameterDeclaration paramDecl = methodDecl.getParameters().iterator().next();
+				paramDecl.accept(new DeclarationVisitorImpl());
+				assertEquals("Expect one visitor", 1, declarationsVisited.size());
+				assertEquals("Expected ParameterDeclaration visitor", "SourceParameterDeclarationImpl", declarationsVisited.get(0).getClass().getSimpleName());
+				break;
+				
+			case TypeParameterDeclaration :
+				for(TypeDeclaration tempDecl : nestedTypes) {
+					if(tempDecl.getSimpleName().equals("P")) {
+						classDecl = (ClassDeclaration)tempDecl;
+					}
+				}
+				TypeParameterDeclaration typeParamDecl = classDecl.getFormalTypeParameters().iterator().next();
+				typeParamDecl.accept(new DeclarationVisitorImpl());
+				assertEquals("Expect one visitor", 1, declarationsVisited.size());
+				assertEquals("Expected TypeParameterDeclaration visitor", "TypeParameterDeclarationImpl", declarationsVisited.get(0).getClass().getSimpleName());
+				break;
+			}
+		
+		}
+		
+	}
+	
+	
+	/**
+	 * DeclarationVisitor implementation for the purposes of these tests
+	 */
+	class DeclarationVisitorImpl implements DeclarationVisitor {
+
+		public void visitDeclaration(Declaration d) {
+			fail("Should never visit a Declaration, only a subclass: " + d);
+		}
+
+		public void visitPackageDeclaration(PackageDeclaration d) {
+			declarationVisited(d);
+		}
+
+		public void visitMemberDeclaration(MemberDeclaration d) {
+			fail("Should never visit a Member, only a subclass: " + d);
+		}
+
+		public void visitTypeDeclaration(TypeDeclaration d) {
+			fail("Should never visit a Type, only a subclass: " + d);
+		}
+
+		public void visitClassDeclaration(ClassDeclaration d) {
+			declarationVisited(d);
+		}
+
+		public void visitEnumDeclaration(EnumDeclaration d) {
+			declarationVisited(d);
+		}
+
+		public void visitInterfaceDeclaration(InterfaceDeclaration d) {
+			declarationVisited(d);
+		}
+
+		public void visitAnnotationTypeDeclaration(AnnotationTypeDeclaration d) {
+			declarationVisited(d);
+		}
+
+		public void visitFieldDeclaration(FieldDeclaration d) {
+			declarationVisited(d);
+		}
+
+		public void visitEnumConstantDeclaration(EnumConstantDeclaration d) {
+			declarationVisited(d);
+		}
+
+		public void visitExecutableDeclaration(ExecutableDeclaration d) {
+			fail("Should never visit an ExecutableDeclaration, only a subclass: " + d);
+		}
+
+		public void visitConstructorDeclaration(ConstructorDeclaration d) {
+			declarationVisited(d);
+		}
+
+		public void visitMethodDeclaration(MethodDeclaration d) {
+			declarationVisited(d);
+		}
+
+		public void visitAnnotationTypeElementDeclaration(AnnotationTypeElementDeclaration d) {
+			declarationVisited(d);
+		}
+
+		public void visitParameterDeclaration(ParameterDeclaration d) {
+			declarationVisited(d);
+		}
+
+		public void visitTypeParameterDeclaration(TypeParameterDeclaration d) {
+			declarationVisited(d);
+		}
+	}
+	
+
+	/*
+	 * Utilities for running the DeclarationVisitor tests
+	 */
+	
+	enum Cases {
+		PackageDeclaration, 
+		ClassDeclaration, 
+		EnumDeclaration, 
+		InterfaceDeclaration,
+		AnnotationTypeDeclaration, 
+		FieldDeclaration, 
+		EnumConstantDeclaration, 
+		ConstructorDeclaration,
+		MethodDeclaration, 
+		AnnotationTypeElementDeclaration, 
+		ParameterDeclaration, 
+		TypeParameterDeclaration
+	}
+	
+	Cases testCaseIdentifier;
+	
+	ArrayList<Declaration> declarationsVisited = new ArrayList<Declaration>();
+	
+	void declarationVisited(Declaration d) {
+			declarationsVisited.add(d);
+	}
+	
+	void initDeclVisitList() {
+		if(declarationsVisited.size() > 0) {
+			declarationsVisited.clear();
+		}
+	}
+	
+	final String code =
+		"package test;" + "\n" +
+		"import org.eclipse.jdt.apt.tests.annotations.generic.*;" + "\n" +
+		"@GenericAnnotation public class Test" + "\n" +
+		"{" + "\n" +
+		"    Test() {}" + "\n" +
+		"    String s;" + "\n" +
+		"    class C {}" + "\n" +
+		"    class P<T> {}" + "\n" +
+		"    interface I {}" + "\n" +
+		"    void m(int i) {}" + "\n" +
+		"    enum E { elephant }" + "\n" +
+		"    @interface A { String strValue() default \"\"; }" + "\n" +
+		"}";
+}
diff --git a/org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/MirrorDeclarationTests.java b/org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/MirrorDeclarationTests.java
index ee57c93..7b127d5 100644
--- a/org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/MirrorDeclarationTests.java
+++ b/org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/MirrorDeclarationTests.java
@@ -243,7 +243,7 @@ public class MirrorDeclarationTests extends APTTestBase {
 
 		boolean called;
 		
-		public void process() {
+		public void _process() {
 			called = true;
 			assertTrue(decls.size() == 1);
 			
diff --git a/org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/TestAll.java b/org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/TestAll.java
index 7c8fea0..f43dd10 100644
--- a/org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/TestAll.java
+++ b/org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/TestAll.java
@@ -49,6 +49,7 @@ public class TestAll extends TestCase {
 		suite.addTest(MixedModeTesting.suite());
 		suite.addTest(ExceptionHandlingTests.suite());
 		suite.addTest(ScannerTests.suite());
+		suite.addTest(DeclarationVisitorTests.suite());
 	
 		return suite;
 		
diff --git a/org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/generic/AbstractGenericProcessor.java b/org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/generic/AbstractGenericProcessor.java
index 8d092af..26012bb 100644
--- a/org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/generic/AbstractGenericProcessor.java
+++ b/org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/annotations/generic/AbstractGenericProcessor.java
@@ -2,6 +2,8 @@ package org.eclipse.jdt.apt.tests.annotations.generic;
 
 import java.util.Collection;
 
+import junit.framework.AssertionFailedError;
+
 import com.sun.mirror.apt.*;
 import com.sun.mirror.declaration.*;
 
@@ -16,4 +18,21 @@ public abstract class AbstractGenericProcessor implements AnnotationProcessor {
 		decls = env.getDeclarationsAnnotatedWith(genericAnnotation);
 	}
 	
+	public abstract void _process();
+	
+	/**
+	 * This method is abstract, so that subclasses need to implement
+	 * _process. We'll handle catching any errant throwables
+	 * and fail any junit tests.
+	 */
+	public final void process() {
+		try {
+			_process();
+		}
+		catch (Throwable t) {
+			t.printStackTrace();
+			throw new AssertionFailedError("Processor threw an exception during processing");
+		}
+	}
+	
 }
diff --git a/org.eclipse.jdt.apt.ui/about.html b/org.eclipse.jdt.apt.ui/about.html
index 5f888df..5d03fd4 100644
--- a/org.eclipse.jdt.apt.ui/about.html
+++ b/org.eclipse.jdt.apt.ui/about.html
@@ -1,28 +1,28 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">
-<html><head><title>About</title>
-
-<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"></head>
-
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
+    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml">
+<head>
+<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"/>
+<title>About</title>
+</head>
 <body lang="EN-US">
 <h2>About This Content</h2>
  
-<p>February 24, 2005</p>	
+<p>May 2, 2006</p>	
 <h3>License</h3>
 
-<p>The Eclipse Foundation makes available all content in this plug-in
-("Content"). Unless otherwise indicated below, the Content is provided
-to you under the terms and conditions of the
-Eclipse Public License Version 1.0 ("EPL"). A copy of the EPL is
-available at <a href="http://www.eclipse.org/legal/epl-v10.html">http://www.eclipse.org/legal/epl-v10.html</a>.
-For purposes of the EPL, "Program" will mean the Content.</p>
+<p>The Eclipse Foundation makes available all content in this plug-in (&quot;Content&quot;).  Unless otherwise 
+indicated below, the Content is provided to you under the terms and conditions of the
+Eclipse Public License Version 1.0 (&quot;EPL&quot;).  A copy of the EPL is available 
+at <a href="http://www.eclipse.org/legal/epl-v10.html">http://www.eclipse.org/legal/epl-v10.html</a>.
+For purposes of the EPL, &quot;Program&quot; will mean the Content.</p>
 
-<p>If you did not receive this Content directly from the Eclipse
-Foundation, the Content is being redistributed by another party
-("Redistributor") and different terms and conditions may
-apply to your use of any object code in the Content. Check the
-Redistributor's license that was provided with the Content. If no such
-license exists, contact the Redistributor. Unless otherwise
-indicated below, the terms and conditions of the EPL still apply to any
-source code in the Content.</p>
+<p>If you did not receive this Content directly from the Eclipse Foundation, the Content is 
+being redistributed by another party (&quot;Redistributor&quot;) and different terms and conditions may
+apply to your use of any object code in the Content.  Check the Redistributor's license that was 
+provided with the Content.  If no such license exists, contact the Redistributor.  Unless otherwise
+indicated below, the terms and conditions of the EPL still apply to any source code in the Content
+and such source code may be obtained at <a href="/">http://www.eclipse.org</a>.</p>
 
-</body></html>
\ No newline at end of file
+</body>
+</html>
\ No newline at end of file

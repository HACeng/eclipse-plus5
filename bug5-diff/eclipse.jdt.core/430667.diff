commit caf8f2570058b398c8462d443be791a90c9aa823
Author: ssankaran <srikanth_sankaran@in.ibm.com>
Date:   Sun Sep 14 09:43:29 2014 +0530

    Partial fix for Bug 430667 - [1.8][content assist] no proposals around
    lambda as a field

44	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest18.java
27	0	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests18.java
2	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java
5	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredElement.java
9	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredField.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest18.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest18.java
index e5d2ccf..ae231e4 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest18.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest18.java
@@ -1855,4 +1855,48 @@ public void test435682() {
 				expectedReplacedSource,
 				"diet ast");
 }
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=430667, [1.8][content assist] no proposals around lambda as a field
+public void test430667() {
+			String string = 
+					"interface D_FI {\n" +
+					"	void print(String value, int n);\n" +
+					"}\n" +
+					"class D_DemoRefactorings {\n" +
+					"	\n" +
+					"	D_FI fi1= (String value, int n) -> {\n" +
+					"		for (int j = 0; j < n; j++) {\n" +
+					"			System.out.println(value); 			\n" +
+					"		}\n" +
+					"	};\n" +
+					"	D_F\n" +
+					"}\n";
+
+			String completeBehind = "D_F";
+			int cursorLocation = string.lastIndexOf(completeBehind) + completeBehind.length() - 1;
+
+			String expectedCompletionNodeToString = "<CompleteOnType:D_F>";
+			String expectedParentNodeToString = "<NONE>";
+			String completionIdentifier = "D_F";
+			String expectedReplacedSource = "D_F";
+			String expectedUnitDisplayString =
+					"interface D_FI {\n" + 
+					"  void print(String value, int n);\n" + 
+					"}\n" + 
+					"class D_DemoRefactorings {\n" + 
+					"  D_FI fi1;\n" + 
+					"  <CompleteOnType:D_F>;\n" + 
+					"  D_DemoRefactorings() {\n" + 
+					"  }\n" + 
+					"}\n";
+
+			checkMethodParse(
+				string.toCharArray(),
+				cursorLocation,
+				expectedCompletionNodeToString,
+				expectedParentNodeToString,
+				expectedUnitDisplayString,
+				completionIdentifier,
+				expectedReplacedSource,
+				"diet ast");
+}
 }
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests18.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests18.java
index 53a2fd1..ab7639d 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests18.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests18.java
@@ -1887,4 +1887,31 @@ public void test435682a() throws JavaModelException {
 	this.workingCopies[0].codeComplete(cursorLocation, requestor, this.wcOwner);
 	assertResults("trim[METHOD_REF]{trim(), Ljava.lang.String;, ()Ljava.lang.String;, null, null, trim, null, [246, 248], 35}", requestor.getResults());
 }
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=430667, [1.8][content assist] no proposals around lambda as a field 
+public void test430667() throws JavaModelException {
+	this.workingCopies = new ICompilationUnit[1];
+	this.workingCopies[0] = getWorkingCopy(
+			"/Completion/src/X.java",
+			"interface D_FI {\n" +
+			"	void print(String value, int n);\n" +
+			"}\n" +
+			"class D_DemoRefactorings {\n" +
+			"	\n" +
+			"	D_FI fi1= (String value, int n) -> {\n" +
+			"		for (int j = 0; j < n; j++) {\n" +
+			"			System.out.println(value); 			\n" +
+			"		}\n" +
+			"	};\n" +
+			"	D_F\n" +
+			"}\n");
+
+	CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true, true, true, false);
+	requestor.allowAllRequiredProposals();
+	String str = this.workingCopies[0].getSource();
+	String completeBehind = "D_F";
+	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+	this.workingCopies[0].codeComplete(cursorLocation, requestor, this.wcOwner);
+	assertResults("D_F[POTENTIAL_METHOD_DECLARATION]{D_F, LD_DemoRefactorings;, ()V, null, null, D_F, null, [195, 198], 14}\n" +
+				  "D_FI[TYPE_REF]{D_FI, , LD_FI;, null, null, null, null, [195, 198], 27}", requestor.getResults());
+}
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java
index 1eec555..997f066 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java
@@ -8002,6 +8002,7 @@ protected void consumeLambdaHeader() {
 	this.processingLambdaParameterList = false;
 	if (this.currentElement != null) {
 		this.lastCheckPoint = arrowPosition + 1; // we don't want the typed formal parameters to be processed by recovery.
+		this.currentElement.lambdaNestLevel++;
 	}
 }
 protected void consumeLambdaExpression() {
@@ -8034,6 +8035,7 @@ protected void consumeLambdaExpression() {
 	pushOnExpressionStack(lexp);
 	if (this.currentElement != null) {
 		this.lastCheckPoint = body.sourceEnd + 1;
+		this.currentElement.lambdaNestLevel --;
 	}
 	this.referenceContext.compilationResult().hasFunctionalTypes = true;
 	markEnclosingMemberWithLocalOrFunctionalType(LocalTypeKind.LAMBDA);
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredElement.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredElement.java
index 9e6ae03..ac1c1e5 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredElement.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredElement.java
@@ -30,6 +30,11 @@ public class RecoveredElement {
 	public int bracketBalance;
 	public boolean foundOpeningBrace;
 	protected Parser recoveringParser;
+	
+	// There is no RecoveredLambdaElement, we just keep track of entry and exit of lambdas via a counter. This allows to prevent certain incorrect mutations of current element.
+	// See https://bugs.eclipse.org/bugs/show_bug.cgi?id=430667.
+	public int lambdaNestLevel;
+	
 public RecoveredElement(RecoveredElement parent, int bracketBalance){
 	this(parent, bracketBalance, null);
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredField.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredField.java
index 96f9ab8..aa520ae 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredField.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/RecoveredField.java
@@ -24,6 +24,7 @@ import org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference;
 import org.eclipse.jdt.internal.compiler.ast.ArrayTypeReference;
 import org.eclipse.jdt.internal.compiler.ast.Expression;
 import org.eclipse.jdt.internal.compiler.ast.FieldDeclaration;
+import org.eclipse.jdt.internal.compiler.ast.LocalDeclaration;
 import org.eclipse.jdt.internal.compiler.ast.Statement;
 import org.eclipse.jdt.internal.compiler.ast.TypeDeclaration;
 
@@ -50,6 +51,14 @@ public RecoveredField(FieldDeclaration fieldDeclaration, RecoveredElement parent
 	this.alreadyCompletedFieldInitialization = fieldDeclaration.initialization != null;
 }
 /*
+ * Record a local declaration
+ */
+public RecoveredElement add(LocalDeclaration localDeclaration, int bracketBalanceValue) {
+	if (this.lambdaNestLevel > 0) // current element is really the lambda which is recovered in full elsewhere.
+		return this;
+	return super.add(localDeclaration, bracketBalanceValue);
+}
+/*
  * Record a field declaration
  */
 public RecoveredElement add(FieldDeclaration addedfieldDeclaration, int bracketBalanceValue) {
commit a6058a3a6ffb64f6b6041d6178bab879afbd0b14
Author: ssankaran <srikanth_sankaran@in.ibm.com>
Date:   Wed Sep 17 20:25:06 2014 +0530

    Fixed Bug 430667 - [1.8][content assist] no proposals around lambda as a
    field

137	5	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest18.java
55	0	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests18.java
4	1	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java
9	0	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest18.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest18.java
index ae231e4..a597440 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest18.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTest18.java
@@ -99,7 +99,7 @@ public void test0002() {
 	int cursorLocation = string.lastIndexOf(completeBehind) + completeBehind.length() - 1;
 
 	String expectedCompletionNodeToString = "<CompleteOnName:fi>";
-	String expectedParentNodeToString = "System.out.print(<CompleteOnName:fi>)";
+	String expectedParentNodeToString = "<NONE>";
 	String completionIdentifier = "fi";
 	String expectedReplacedSource = "fi";
 	String expectedUnitDisplayString =
@@ -813,7 +813,7 @@ public void testBrokenMethodCall() {  // verify that completion works when the c
 }
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=424080, [1.8][completion] Workbench hanging on code completion with lambda expression containing anonymous class
 public void test424080() {
-	String string = 
+String string = 
 			"interface FI {\n" +
 			"	public static int val = 5;\n" +
 			"	default int run (String x) { return 1;};\n" +
@@ -826,7 +826,7 @@ public void test424080() {
 			String completeBehind = "val";
 			int cursorLocation = string.lastIndexOf(completeBehind) + completeBehind.length() - 1;
 
-			String expectedCompletionNodeToString = "<CompleteOnName:val>";
+			String expectedCompletionNodeToString = "<NONE>";
 			String expectedParentNodeToString = "<NONE>";
 			String completionIdentifier = "val";
 			String expectedReplacedSource = "val";
@@ -840,7 +840,7 @@ public void test424080() {
 					"  public int run(int x);\n" + 
 					"}\n" + 
 					"public class X {\n" + 
-					"  FI fi = <CompleteOnName:val>;\n" + 
+					"  FI fi;\n" + 
 					"  public X() {\n" + 
 					"  }\n" + 
 					"}\n";
@@ -1098,6 +1098,8 @@ public void test427463() {
 					"  };\n" + 
 					"  Test() {\n" + 
 					"  }\n" + 
+					"  private void test() throws Exception {\n" + 
+					"  }\n" + 
 					"}\n";
 
 			checkMethodParse(
@@ -1469,7 +1471,7 @@ public void test428735e() { // field
 			int cursorLocation = string.lastIndexOf(completeBehind) + completeBehind.length() - 1;
 
 			String expectedCompletionNodeToString = "<CompleteOnName:y.get>";
-			String expectedParentNodeToString = "x.getLastName().compareTo(<CompleteOnName:y.get>)";
+			String expectedParentNodeToString = "<NONE>";
 			String completionIdentifier = "get";
 			String expectedReplacedSource = "y.get";
 			String expectedUnitDisplayString =
@@ -1899,4 +1901,134 @@ public void test430667() {
 				expectedReplacedSource,
 				"diet ast");
 }
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=430667, [1.8][content assist] no proposals around lambda as a field
+public void test430667a() {
+			String string = 
+					"class D_DemoRefactorings {\n" +
+					"	\n" +
+					"	D_FI fi1= (String value, int n) -> {\n" +
+					"		for (int j = 0; j < n; j++) {\n" +
+					"			System.out.println(value); 			\n" +
+					"		}\n" +
+					"	};\n" +
+					"	/*HERE*/D_F\n" +
+					"}\n" +
+					"interface D_FI {\n" +
+					"	void print(String value, int n);\n" +
+					"}\n";
+					
+
+			String completeBehind = "/*HERE*/D_F";
+			int cursorLocation = string.lastIndexOf(completeBehind) + completeBehind.length() - 1;
+
+			String expectedCompletionNodeToString = "<CompleteOnType:D_F>";
+			String expectedParentNodeToString = "<NONE>";
+			String completionIdentifier = "D_F";
+			String expectedReplacedSource = "D_F";
+			String expectedUnitDisplayString =
+					"class D_DemoRefactorings {\n" + 
+					"  D_FI fi1;\n" + 
+					"  <CompleteOnType:D_F>;\n" + 
+					"  D_DemoRefactorings() {\n" + 
+					"  }\n" + 
+					"}\n" + 
+					"interface D_FI {\n" + 
+					"  void print(String value, int n);\n" + 
+					"}\n";
+
+			checkMethodParse(
+				string.toCharArray(),
+				cursorLocation,
+				expectedCompletionNodeToString,
+				expectedParentNodeToString,
+				expectedUnitDisplayString,
+				completionIdentifier,
+				expectedReplacedSource,
+				"diet ast");
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=430667, [1.8][content assist] no proposals around lambda as a field
+public void test430667b() {
+			String string = 
+					"public class D_DemoRefactorings {\n" +
+					"   D_F\n" +
+					"	D_FI fi1= (String value, int n) -> {\n" +
+					"		for (int j = 0; j < n; j++) {\n" +
+					"			System.out.println(value); 			\n" +
+					"		}\n" +
+					"	};\n" +
+					"}\n" +
+					"interface D_FI {\n" +
+					"	void print(String value, int n);\n" +
+					"}\n";
+					
+			String completeBehind = "D_F";
+			int cursorLocation = string.indexOf(completeBehind) + completeBehind.length() - 1;
+
+			String expectedCompletionNodeToString = "<CompleteOnType:D_F>;";
+			String expectedParentNodeToString = "<NONE>";
+			String completionIdentifier = "D_F";
+			String expectedReplacedSource = "D_F";
+			String expectedUnitDisplayString =
+					"public class D_DemoRefactorings {\n" + 
+					"  <CompleteOnType:D_F>;\n" + 
+					"  D_FI fi1;\n" + 
+					"  public D_DemoRefactorings() {\n" + 
+					"  }\n" + 
+					"}\n" + 
+					"interface D_FI {\n" + 
+					"  void print(String value, int n);\n" + 
+					"}\n";
+
+			checkMethodParse(
+				string.toCharArray(),
+				cursorLocation,
+				expectedCompletionNodeToString,
+				expectedParentNodeToString,
+				expectedUnitDisplayString,
+				completionIdentifier,
+				expectedReplacedSource,
+				"diet ast");
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=430667, [1.8][content assist] no proposals around lambda as a field
+public void test430667c() {
+			String string = 
+					"public interface Foo {\n" +
+					"	int run(int s1, int s2);\n" +
+					"}\n" +
+					"interface B {\n" +
+					"	static Foo f = (int x5, int x2) -> anot\n" +
+					"	static int another = 3;\n" +
+					"  	static int two () { return 2; }\n" +
+					"}";
+					
+			String completeBehind = "(int x5, int x2) -> anot";
+			int cursorLocation = string.indexOf(completeBehind) + completeBehind.length() - 1;
+
+			String expectedCompletionNodeToString = "<CompleteOnName:anot>";
+			String expectedParentNodeToString = "<NONE>";
+			String completionIdentifier = "anot";
+			String expectedReplacedSource = "anot";
+			String expectedUnitDisplayString =
+					"public interface Foo {\n" + 
+					"  int run(int s1, int s2);\n" + 
+					"}\n" + 
+					"interface B {\n" + 
+					"  static Foo f = (int x5, int x2) -> <CompleteOnName:anot>;\n" + 
+					"  static int another;\n" + 
+					"  <clinit>() {\n" + 
+					"  }\n" + 
+					"  static int two() {\n" + 
+					"  }\n" + 
+					"}\n";
+
+			checkMethodParse(
+				string.toCharArray(),
+				cursorLocation,
+				expectedCompletionNodeToString,
+				expectedParentNodeToString,
+				expectedUnitDisplayString,
+				completionIdentifier,
+				expectedReplacedSource,
+				"diet ast");
+}
 }
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests18.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests18.java
index 8e5777b..f0a2eee 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests18.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests18.java
@@ -1915,6 +1915,61 @@ public void test430667() throws JavaModelException {
 	assertResults("D_F[POTENTIAL_METHOD_DECLARATION]{D_F, LD_DemoRefactorings;, ()V, null, null, D_F, null, [195, 198], 14}\n" +
 				  "D_FI[TYPE_REF]{D_FI, , LD_FI;, null, null, null, null, [195, 198], 27}", requestor.getResults());
 }
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=430667, [1.8][content assist] no proposals around lambda as a field 
+public void test430667a() throws JavaModelException {
+	this.workingCopies = new ICompilationUnit[1];
+	this.workingCopies[0] = getWorkingCopy(
+			"/Completion/src/X.java",
+			"class D_DemoRefactorings {\n" +
+			"	\n" +
+			"	D_FI fi1= (String value, int n) -> {\n" +
+			"		for (int j = 0; j < n; j++) {\n" +
+			"			System.out.println(value); 			\n" +
+			"		}\n" +
+			"	};\n" +
+			"	/*HERE*/D_F\n" +
+			"}\n" +
+			"interface D_FI {\n" +
+			"	void print(String value, int n);\n" +
+			"}\n"
+			);
+
+	CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true, true, true, false);
+	requestor.allowAllRequiredProposals();
+	String str = this.workingCopies[0].getSource();
+	String completeBehind = "/*HERE*/D_F";
+	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+	this.workingCopies[0].codeComplete(cursorLocation, requestor, this.wcOwner);
+	assertResults("D_F[POTENTIAL_METHOD_DECLARATION]{D_F, LD_DemoRefactorings;, ()V, null, null, D_F, null, [150, 153], 14}\n" +
+			"D_FI[TYPE_REF]{D_FI, , LD_FI;, null, null, null, null, [150, 153], 27}", requestor.getResults());
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=430667, [1.8][content assist] no proposals around lambda as a field 
+public void test430667b() throws JavaModelException {
+	this.workingCopies = new ICompilationUnit[1];
+	this.workingCopies[0] = getWorkingCopy(
+			"/Completion/src/X.java",
+			"class D_DemoRefactorings {\n" +
+			"	/*HERE*/D_F\n" +
+			"	D_FI fi1= (String value, int n) -> {\n" +
+			"		for (int j = 0; j < n; j++) {\n" +
+			"			System.out.println(value); 			\n" +
+			"		}\n" +
+			"	};\n" +
+			"}\n" +
+			"interface D_FI {\n" +
+			"	void print(String value, int n);\n" +
+			"}\n"
+			);
+
+	CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true, true, true, false);
+	requestor.allowAllRequiredProposals();
+	String str = this.workingCopies[0].getSource();
+	String completeBehind = "/*HERE*/D_F";
+	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+	this.workingCopies[0].codeComplete(cursorLocation, requestor, this.wcOwner);
+	assertResults("D_F[POTENTIAL_METHOD_DECLARATION]{D_F, LD_DemoRefactorings;, ()V, null, null, D_F, null, [36, 39], 14}\n" +
+			"D_FI[TYPE_REF]{D_FI, , LD_FI;, null, null, null, null, [36, 39], 27}", requestor.getResults());
+}
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=443932, [1.8][code complete] method reference proposals not applied when caret inside method name
 public void test443932() throws JavaModelException {
 	this.workingCopies = new ICompilationUnit[1];
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java
index 362599d..61c1539 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/complete/CompletionParser.java
@@ -2604,7 +2604,9 @@ protected void consumeExitVariableWithInitialization() {
 	} else if (this.assistNode != null && this.assistNode == variable.initialization) {
 			this.assistNodeParent = variable;
 	}
-	triggerRecoveryUponLambdaClosure(variable, false);
+	if (triggerRecoveryUponLambdaClosure(variable, false) && !isInsideMethod()) {
+		popElement(K_FIELD_INITIALIZER_DELIMITER);
+	}
 }
 protected void consumeExitVariableWithoutInitialization() {
 	// ExitVariableWithoutInitialization ::= $empty
@@ -3537,6 +3539,7 @@ protected void consumeToken(int token) {
 	if (token == TokenNameIdentifier
 			&& this.identifierStack[this.identifierPtr] == assistIdentifier()
 			&& this.currentElement == null
+			&& (!isIndirectlyInsideLambdaExpression() || isIndirectlyInsideLambdaBlock())
 			&& isIndirectlyInsideFieldInitialization()) {
 		this.scanner.eofPosition = this.cursorLocation < Integer.MAX_VALUE ? this.cursorLocation+1 : this.cursorLocation;
 	}
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java
index 9398809..8ce2c85 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/AssistParser.java
@@ -1408,6 +1408,15 @@ protected boolean isIndirectlyInsideLambdaExpression(){
 	}
 	return false;
 }
+protected boolean isIndirectlyInsideLambdaBlock(){
+	int i = this.elementPtr;
+	while (i > -1) {
+		if (this.elementKindStack[i] == K_LAMBDA_EXPRESSION_DELIMITER && this.elementInfoStack[i] == BLOCK_BODY)
+			return true;
+		i--;
+	}
+	return false;
+}
 protected boolean isIndirectlyInsideType(){
 	int i = this.elementPtr;
 	while(i > -1) {

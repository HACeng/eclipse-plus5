commit 639c767e46ba1affc29fe53d2703bf4af137793b
Author: David Audel <daudel>
Date:   Fri Apr 7 09:03:47 2006 +0000

    HEAD - bug 135217

17	13	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java
4	3	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java
4	4	org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java
3	1	org.eclipse.jdt.core/buildnotes_jdt-core.html
32	81	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java
8	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java
13	9	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java
3	4	org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetCompiler.java
8	4	org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetEvaluator.java
5	3	org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/Evaluator.java
16	14	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitProblemFinder.java
4	3	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java
index b59557f..e8584cd 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractRegressionTest.java
@@ -388,15 +388,16 @@ public abstract class AbstractRegressionTest extends AbstractCompilerTest implem
 			if (customOptions != null) {
 				options.putAll(customOptions);
 			}
+			CompilerOptions compilerOptions = new CompilerOptions(options);
+			compilerOptions.performStatementsRecovery = false;
 			Compiler batchCompiler = 
 				new Compiler(
 					getNameEnvironment(new String[]{}, classLib), 
 					getErrorHandlingPolicy(), 
-					options,
+					compilerOptions,
 					requestor, 
-					problemFactory,
-					false);
-			batchCompiler.options.produceReferenceInfo = true;
+					problemFactory);
+			compilerOptions.produceReferenceInfo = true;
 			try {
 				batchCompiler.compile(Util.compilationUnits(testFiles)); // compile all files together
 			} catch(RuntimeException e) {
@@ -496,14 +497,15 @@ public abstract class AbstractRegressionTest extends AbstractCompilerTest implem
 				false, /* show category */
 				false /* show warning token*/);
 		
+		CompilerOptions compilerOptions = new CompilerOptions(getCompilerOptions());
+		compilerOptions.performStatementsRecovery = false;
 		Compiler batchCompiler = 
 			new Compiler(
 				getNameEnvironment(new String[]{}, classLib), 
 				getErrorHandlingPolicy(),
-				getCompilerOptions(), 
+				compilerOptions, 
 				requestor, 
-				problemFactory,
-				false);
+				problemFactory);
 		batchCompiler.options.produceReferenceInfo = true;
 		Throwable exception = null;
 		try {
@@ -649,14 +651,15 @@ public abstract class AbstractRegressionTest extends AbstractCompilerTest implem
 			if (customOptions != null) {
 				options.putAll(customOptions);
 			}
+			CompilerOptions compilerOptions = new CompilerOptions(options);
+			compilerOptions.performStatementsRecovery = false;
 			Compiler batchCompiler = 
 				new Compiler(
 					getNameEnvironment(new String[]{}, classLib), 
 					getErrorHandlingPolicy(), 
-					options,
+					compilerOptions,
 					requestor, 
-					problemFactory,
-					false);
+					problemFactory);
 			batchCompiler.options.produceReferenceInfo = true;
 			Throwable exception = null;
 			try {
@@ -719,14 +722,15 @@ public abstract class AbstractRegressionTest extends AbstractCompilerTest implem
 		if (customOptions != null) {
 			options.putAll(customOptions);
 		}
+		CompilerOptions compilerOptions = new CompilerOptions(options);
+		compilerOptions.performStatementsRecovery = false;
 		Compiler batchCompiler = 
 			new Compiler(
 				getNameEnvironment(new String[]{}, classLib), 
 				getErrorHandlingPolicy(), 
-				options,
+				compilerOptions,
 				requestor, 
-				problemFactory,
-				false);
+				problemFactory);
 		batchCompiler.options.produceReferenceInfo = true;
 		try {
 			batchCompiler.compile(Util.compilationUnits(testFiles)); // compile all files together
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java
index dea09ab..e6e49d9 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java
@@ -82,14 +82,15 @@ public static void compile(String[] pathsAndContents, Map options, String output
 					return false;
 				}
 			};
+		CompilerOptions compilerOptions = new CompilerOptions(options);
+		compilerOptions.performStatementsRecovery = false;
 		Compiler batchCompiler = 
 			new Compiler(
 				nameEnvironment, 
 				errorHandlingPolicy, 
-				options,
+				compilerOptions,
 				requestor, 
-				problemFactory,
-				false);
+				problemFactory);
 		batchCompiler.options.produceReferenceInfo = true;
 		batchCompiler.compile(compilationUnits(pathsAndContents)); // compile all files together
 		System.err.print(requestor.problemLog); // problem log empty if no problems
diff --git a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java
index bf83597..50eacbd 100644
--- a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java
+++ b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java
@@ -2806,16 +2806,16 @@ public void performCompilation() throws InvalidInputException {
 	this.startTime = System.currentTimeMillis();
 
 	INameEnvironment environment = getLibraryAccess();
+	this.compilerOptions = new CompilerOptions(this.options);
+	this.compilerOptions.performStatementsRecovery = false;
 	this.batchCompiler =
 		new Compiler(
 			environment,
 			getHandlingPolicy(),
-			this.options,
+			this.compilerOptions,
 			getBatchRequestor(),
 			getProblemFactory(),
-			this.out,
-			false);
-	this.compilerOptions = this.batchCompiler.options;
+			this.out);
 
 	// set the non-externally configurable options.
 	this.compilerOptions.verbose = this.verbose;
diff --git a/org.eclipse.jdt.core/buildnotes_jdt-core.html b/org.eclipse.jdt.core/buildnotes_jdt-core.html
index a7014aa..e81799f 100644
--- a/org.eclipse.jdt.core/buildnotes_jdt-core.html
+++ b/org.eclipse.jdt.core/buildnotes_jdt-core.html
@@ -52,7 +52,9 @@ Eclipse SDK 3.2RC1 - ?th April 2006
 What's new in this drop</h2>
 
 <h3>Problem Reports Fixed</h3>
-<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=135083">135083</a>
+<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=135217">135217</a>
+Compiler class constructor change in 3.2
+<br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=135083">135083</a>
 RangeUtil#isInInterval(...) takes significant amount of time while editing
 <br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=134976">134976</a>
 [completion] relevance of some types aren't correct
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java
index 14b39dc..21237ee 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/Compiler.java
@@ -82,16 +82,16 @@ public class Compiler implements ITypeRequestor, ProblemSeverities {
 	 *      order to avoid object conversions. Note that the factory is not supposed
 	 *      to accumulate the created problems, the compiler will gather them all and hand
 	 *      them back as part of the compilation unit result.
+	 *      
+	 *  @deprecated this constructor is keeped to preserve 3.1 and 3.2M4 compatibility
 	 */
 	public Compiler(
-			INameEnvironment environment,
-			IErrorHandlingPolicy policy,
-			Map settings,
-			final ICompilerRequestor requestor,
-			IProblemFactory problemFactory,
-			boolean statementsRecovery) {
-		this(environment, policy, settings,	requestor, problemFactory, 
-				null, false, false, false, statementsRecovery); // all defaults
+		INameEnvironment environment,
+		IErrorHandlingPolicy policy,
+		Map settings,
+		final ICompilerRequestor requestor,
+		IProblemFactory problemFactory) {
+		this(environment, policy, new CompilerOptions(settings), requestor, problemFactory, null); 
 	}
 	
 	/**
@@ -126,22 +126,21 @@ public class Compiler implements ITypeRequestor, ProblemSeverities {
 	 *      order to avoid object conversions. Note that the factory is not supposed
 	 *      to accumulate the created problems, the compiler will gather them all and hand
 	 *      them back as part of the compilation unit result.
-	 *
-	 *  @param out java.io.PrintWriter
-	 *      Used by the compiler to output messages which are not related to problems,
-	 *      e.g. the information issued in verbose mode. If null, defaults to System.out 
-	 *      with automatic flushing. 
+	 *      
+	 *  @param parseLiteralExpressionsAsConstants <code>boolean</code>
+	 *		This parameter is used to optimize the literals or leave them as they are in the source.
+	 * 		If you put true, "Hello" + " world" will be converted to "Hello world".
+	 * 
+	 *  @deprecated this constructor is keeped to preserve 3.1 and 3.2M4 compatibility
 	 */
 	public Compiler(
-			INameEnvironment environment,
-			IErrorHandlingPolicy policy,
-			Map settings,
-			final ICompilerRequestor requestor,
-			IProblemFactory problemFactory,
-			PrintWriter out,
-			boolean statementsRecovery) {
-		this(environment, policy, settings,	requestor, problemFactory, out, 
-				false, false, false, statementsRecovery); // all defaults
+		INameEnvironment environment,
+		IErrorHandlingPolicy policy,
+		Map settings,
+		final ICompilerRequestor requestor,
+		IProblemFactory problemFactory,
+		boolean parseLiteralExpressionsAsConstants) {
+		this(environment, policy, new CompilerOptions(settings, parseLiteralExpressionsAsConstants), requestor, problemFactory, null); 
 	}
 	
 	/**
@@ -176,31 +175,14 @@ public class Compiler implements ITypeRequestor, ProblemSeverities {
 	 *      order to avoid object conversions. Note that the factory is not supposed
 	 *      to accumulate the created problems, the compiler will gather them all and hand
 	 *      them back as part of the compilation unit result.
-	 *
-	 *	@param parseLiteralExpressionsAsConstants <code>boolean</code>
-	 *		This parameter is used to optimize the literals or leave them as they are in the source.
-	 * 		If you put true, "Hello" + " world" will be converted to "Hello world".
-	 *
-	 *	@param storeAnnotations <code>boolean</code>
-	 *		This parameter is used to tell the compiler to store annotations on 
-	 *		type bindings, or not.
-	 *
-	 *	@param statementsRecovery <code>boolean</code>
-	 *		This parameter is used to tell the compiler to perform syntax error
-	 *      recovery on statements, or not. 
 	 */
 	public Compiler(
-			INameEnvironment environment,
-			IErrorHandlingPolicy policy,
-			Map settings,
-			final ICompilerRequestor requestor,
-			IProblemFactory problemFactory,
-			boolean parseLiteralExpressionsAsConstants,
-			boolean storeAnnotations,
-			boolean statementsRecovery) {
-		this(environment, policy, settings,	requestor, problemFactory, 
-				null, // default 
-				parseLiteralExpressionsAsConstants, storeAnnotations, true, statementsRecovery);
+		INameEnvironment environment,
+		IErrorHandlingPolicy policy,
+		CompilerOptions options,
+		final ICompilerRequestor requestor,
+		IProblemFactory problemFactory) {
+		this(environment, policy, options, requestor, problemFactory, null); 
 	}
 
 	/**
@@ -235,47 +217,16 @@ public class Compiler implements ITypeRequestor, ProblemSeverities {
 	 *      order to avoid object conversions. Note that the factory is not supposed
 	 *      to accumulate the created problems, the compiler will gather them all and hand
 	 *      them back as part of the compilation unit result.
-	 *
-	 *  @param out java.io.PrintWriter
-	 *      Used by the compiler to output messages which are not related to problems,
-	 *      e.g. the information issued in verbose mode. If null, defaults to System.out 
-	 *      with automatic flushing. 
-	 *
-	 *	@param parseLiteralExpressionsAsConstants <code>boolean</code>
-	 *		This parameter is used to optimize the literals or leave them as they are in the source.
-	 * 		If you put true, "Hello" + " world" will be converted to "Hello world".
-	 *
-	 *	@param storeAnnotations <code>boolean</code>
-	 *		This parameter is used to tell the compiler to store annotations on 
-	 *		type bindings, or not.
-	 *
-	 *  @param flag <code>boolean</code>
-	 *		Set to true if and only if the following boolean parameters are significant:
-	 * 		<code>parseLiteralExpressionsAsConstants</code>, <code>storeAnnotations</code>.
-	 *
-	 * @param statementsRecovery <code>boolean</code>
-	 *		This parameter is used to tell the compiler to perform syntax error
-	 *      recovery on statements, or not. 
 	 */
-	private Compiler(
+	public Compiler(
 			INameEnvironment environment,
 			IErrorHandlingPolicy policy,
-			Map settings,
+			CompilerOptions options,
 			final ICompilerRequestor requestor,
 			IProblemFactory problemFactory,
-			PrintWriter out,
-			boolean parseLiteralExpressionsAsConstants,
-			boolean storeAnnotations,
-			boolean flag,
-			boolean statementsRecovery) {
-
-		// create a problem handler given a handling policy
-		this.options = new CompilerOptions(settings);
-		this.options.performStatementsRecovery = statementsRecovery;
-		if (flag) { // boolean parameters are significant, pass them down
-			this.options.parseLiteralExpressionsAsConstants = parseLiteralExpressionsAsConstants;
-			this.options.storeAnnotations = storeAnnotations;
-		}
+			PrintWriter out) {
+		
+		this.options = options;
 		
 		// wrap requestor in DebugRequestor if one is specified
 		if(DebugRequestor == null) {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java
index 4764947..6925702 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java
@@ -309,6 +309,14 @@ public class CompilerOptions {
 		if (settings == null) return;
 		set(settings);		
 	}
+	
+	/**
+	 * @deprecated used to preserve 3.1 and 3.2M4 compatibility of some Compiler constructors
+	 */
+	public CompilerOptions(Map settings, boolean parseLiteralExpressionsAsConstants){
+		this(settings);
+		this.parseLiteralExpressionsAsConstants = parseLiteralExpressionsAsConstants;
+	}
 
 	public Map getMap() {
 		Map optionsMap = new HashMap(30);
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java
index bf7cf51..2a34d9d 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/CompilationUnitResolver.java
@@ -109,7 +109,7 @@ class CompilationUnitResolver extends Compiler {
 	 *      in UI when compiling interactively.
 	 *      @see org.eclipse.jdt.internal.compiler.DefaultErrorHandlingPolicies
 	 * 
-	 *	@param settings The settings to use for the resolution.
+	 *	@param compilerOptions The compiler options to use for the resolution.
 	 *      
 	 *  @param requestor org.eclipse.jdt.internal.compiler.api.ICompilerRequestor
 	 *      Component which will receive and persist all compilation results and is intended
@@ -127,13 +127,12 @@ class CompilationUnitResolver extends Compiler {
 	public CompilationUnitResolver(
 		INameEnvironment environment,
 		IErrorHandlingPolicy policy,
-		Map settings,
+		CompilerOptions compilerOptions,
 		ICompilerRequestor requestor,
 		IProblemFactory problemFactory,
-		boolean statementsRecovery,
 		IProgressMonitor monitor) {
 
-		super(environment, policy, settings, requestor, problemFactory, false, true/*store annotations in the bindings*/, statementsRecovery);
+		super(environment, policy, compilerOptions, requestor, problemFactory);
 		this.hasCompilationAborted = false;
 		this.monitor =monitor;
 	}
@@ -258,6 +257,13 @@ class CompilationUnitResolver extends Compiler {
 		return compilationUnit;
 	}
 	
+	protected static CompilerOptions getCompilerOptions(Map options, boolean statementsRecovery) {
+		CompilerOptions compilerOptions = new CompilerOptions(options);
+		compilerOptions.performStatementsRecovery = statementsRecovery;
+		compilerOptions.parseLiteralExpressionsAsConstants = false;
+		compilerOptions.storeAnnotations = true /*store annotations in the bindings*/;
+		return compilerOptions;
+	}
 	/*
 	 *  Low-level API performing the actual compilation
 	 */
@@ -450,10 +456,9 @@ class CompilationUnitResolver extends Compiler {
 				new CompilationUnitResolver(
 					environment,
 					getHandlingPolicy(),
-					options,
+					getCompilerOptions(options, statementsRecovery),
 					getRequestor(),
 					problemFactory, 
-					statementsRecovery,
 					monitor);
 
 			resolver.resolve(compilationUnits, bindingKeys, requestor, apiLevel, options, owner);
@@ -494,10 +499,9 @@ class CompilationUnitResolver extends Compiler {
 				new CompilationUnitResolver(
 					environment,
 					getHandlingPolicy(),
-					options,
+					getCompilerOptions(options, statementsRecovery),
 					getRequestor(),
-					problemFactory, 
-					statementsRecovery,
+					problemFactory,
 					monitor);
 
 			unit = 
diff --git a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetCompiler.java b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetCompiler.java
index 6004986..cc7752d 100644
--- a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetCompiler.java
+++ b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetCompiler.java
@@ -10,13 +10,12 @@
  *******************************************************************************/
 package org.eclipse.jdt.internal.eval;
 
-import java.util.Map;
-
 import org.eclipse.jdt.internal.compiler.Compiler;
 import org.eclipse.jdt.internal.compiler.ICompilerRequestor;
 import org.eclipse.jdt.internal.compiler.IErrorHandlingPolicy;
 import org.eclipse.jdt.internal.compiler.IProblemFactory;
 import org.eclipse.jdt.internal.compiler.env.INameEnvironment;
+import org.eclipse.jdt.internal.compiler.impl.CompilerOptions;
 
 /**
  * A compiler that compiles code snippets. 
@@ -33,13 +32,13 @@ public class CodeSnippetCompiler extends Compiler {
 	public CodeSnippetCompiler(
 		INameEnvironment environment,
 		IErrorHandlingPolicy policy,
-		Map settings,
+		CompilerOptions compilerOptions,
 		ICompilerRequestor requestor,
 		IProblemFactory problemFactory,
 		EvaluationContext evaluationContext,
 		int codeSnippetStart,
 		int codeSnippetEnd) {
-		super(environment, policy, settings, requestor, problemFactory, true);
+		super(environment, policy, compilerOptions, requestor, problemFactory);
 		this.parser =
 			new CodeSnippetParser(
 				this.problemReporter,
diff --git a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetEvaluator.java b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetEvaluator.java
index b68d149..dd0378c 100644
--- a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetEvaluator.java
+++ b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetEvaluator.java
@@ -22,6 +22,7 @@ import org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader;
 import org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException;
 import org.eclipse.jdt.internal.compiler.env.IBinaryType;
 import org.eclipse.jdt.internal.compiler.env.INameEnvironment;
+import org.eclipse.jdt.internal.compiler.impl.CompilerOptions;
 
 /**
  * A code snippet evaluator compiles and returns class file for a code snippet.
@@ -115,11 +116,13 @@ Compiler getCompiler(ICompilerRequestor compilerRequestor) {
 		// use a regular compiler and feed its lookup environment with 
 		// the code snippet support classes
 
+		CompilerOptions compilerOptions = new CompilerOptions(this.options);
+		compilerOptions.performStatementsRecovery = true;
 		compiler = 
 			new CodeSnippetCompiler(
 				this.environment, 
 				DefaultErrorHandlingPolicies.exitAfterAllProblems(), 
-				this.options, 
+				compilerOptions, 
 				compilerRequestor, 
 				this.problemFactory,
 				this.context,
@@ -149,13 +152,14 @@ Compiler getCompiler(ICompilerRequestor compilerRequestor) {
 		// use a wrapped environment so that if the code snippet classes are not found
 		// then a default implementation is provided.
 
+		CompilerOptions compilerOptions = new CompilerOptions(this.options);
+		compilerOptions.performStatementsRecovery = true;
 		compiler = new Compiler(
 			getWrapperEnvironment(), 
 			DefaultErrorHandlingPolicies.exitAfterAllProblems(), 
-			this.options, 
+			compilerOptions, 
 			compilerRequestor, 
-			this.problemFactory,
-			true);
+			this.problemFactory);
 	}
 	return compiler;
 }
diff --git a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/Evaluator.java b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/Evaluator.java
index b3eca45..c55d185 100644
--- a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/Evaluator.java
+++ b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/Evaluator.java
@@ -24,6 +24,7 @@ import org.eclipse.jdt.internal.compiler.ICompilerRequestor;
 import org.eclipse.jdt.internal.compiler.IProblemFactory;
 import org.eclipse.jdt.internal.compiler.env.ICompilationUnit;
 import org.eclipse.jdt.internal.compiler.env.INameEnvironment;
+import org.eclipse.jdt.internal.compiler.impl.CompilerOptions;
 import org.eclipse.jdt.internal.core.util.Util;
 
 /**
@@ -158,13 +159,14 @@ protected abstract char[] getClassName();
  * Creates and returns a compiler for this evaluator.
  */
 Compiler getCompiler(ICompilerRequestor compilerRequestor) {
+	CompilerOptions compilerOptions = new CompilerOptions(this.options);
+	compilerOptions.performStatementsRecovery = true;
 	return new Compiler(
 		this.environment, 
 		DefaultErrorHandlingPolicies.exitAfterAllProblems(), 
-		this.options, 
+		compilerOptions, 
 		compilerRequestor, 
-		this.problemFactory,
-		true);
+		this.problemFactory);
 }
 /**
  * Builds and returns the source for the current compilation unit.
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitProblemFinder.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitProblemFinder.java
index 9a066f3..14f42a5 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitProblemFinder.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/CompilationUnitProblemFinder.java
@@ -23,6 +23,7 @@ import org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration;
 import org.eclipse.jdt.internal.compiler.env.AccessRestriction;
 import org.eclipse.jdt.internal.compiler.env.INameEnvironment;
 import org.eclipse.jdt.internal.compiler.env.ISourceType;
+import org.eclipse.jdt.internal.compiler.impl.CompilerOptions;
 import org.eclipse.jdt.internal.compiler.lookup.PackageBinding;
 import org.eclipse.jdt.internal.compiler.parser.Parser;
 import org.eclipse.jdt.internal.compiler.parser.SourceTypeConverter;
@@ -55,7 +56,7 @@ public class CompilationUnitProblemFinder extends Compiler {
 	 *      in UI when compiling interactively.
 	 *      @see org.eclipse.jdt.internal.compiler.DefaultErrorHandlingPolicies
 	 * 
-	 *	@param settings The settings to use for the resolution.
+	 *	@param compilerOptions The compiler options to use for the resolution.
 	 *      
 	 *  @param requestor org.eclipse.jdt.internal.compiler.api.ICompilerRequestor
 	 *      Component which will receive and persist all compilation results and is intended
@@ -73,20 +74,15 @@ public class CompilationUnitProblemFinder extends Compiler {
 	protected CompilationUnitProblemFinder(
 		INameEnvironment environment,
 		IErrorHandlingPolicy policy,
-		Map settings,
+		CompilerOptions compilerOptions,
 		ICompilerRequestor requestor,
-		IProblemFactory problemFactory,
-		boolean creatingAST,
-		boolean statementsRecovery) {
+		IProblemFactory problemFactory) {
 
 		super(environment,
 			policy,
-			settings,
+			compilerOptions,
 			requestor,
-			problemFactory,
-			!creatingAST/*parse literal expressions as constants only if not creating a DOM AST*/,
-			creatingAST/*store annotations in the bindings if creating a DOM AST*/,
-			statementsRecovery/*perform statements recovery during parse if creating a DOM AST*/
+			problemFactory
 		);
 	}
 
@@ -117,6 +113,14 @@ public class CompilationUnitProblemFinder extends Compiler {
 		}
 	}
 
+	protected static CompilerOptions getCompilerOptions(Map settings, boolean creatingAST, boolean statementsRecovery) {
+		CompilerOptions compilerOptions = new CompilerOptions(settings);
+		compilerOptions.performStatementsRecovery = statementsRecovery;
+		compilerOptions.parseLiteralExpressionsAsConstants = !creatingAST; /*parse literal expressions as constants only if not creating a DOM AST*/
+		compilerOptions.storeAnnotations = creatingAST; /*store annotations in the bindings if creating a DOM AST*/
+		return compilerOptions;
+	}
+	
 	/*
 	 *  Low-level API performing the actual compilation
 	 */
@@ -157,11 +161,9 @@ public class CompilationUnitProblemFinder extends Compiler {
 			problemFinder = new CompilationUnitProblemFinder(
 				environment,
 				getHandlingPolicy(),
-				project.getOptions(true),
+				getCompilerOptions(project.getOptions(true), creatingAST, statementsRecovery),
 				getRequestor(),
-				problemFactory,
-				creatingAST,
-				statementsRecovery);
+				problemFactory);
 			if (parser != null) {
 				problemFinder.parser = parser;
 			}
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java
index 492bc4c..899275b 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/AbstractImageBuilder.java
@@ -418,13 +418,14 @@ protected Compiler newCompiler() {
 	}
 	
 	// called once when the builder is initialized... can override if needed
+	CompilerOptions compilerOptions = new CompilerOptions(projectOptions);
+	compilerOptions.performStatementsRecovery = true;
 	Compiler newCompiler = new Compiler(
 		nameEnvironment,
 		DefaultErrorHandlingPolicies.proceedWithAllProblems(),
-		projectOptions,
+		compilerOptions,
 		this,
-		ProblemFactory.getProblemFactory(Locale.getDefault()),
-		true);
+		ProblemFactory.getProblemFactory(Locale.getDefault()));
 	CompilerOptions options = newCompiler.options;
 
 	// enable the compiler reference info support

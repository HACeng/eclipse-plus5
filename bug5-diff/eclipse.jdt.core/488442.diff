commit 9dc4ad7f003e04d7d21fa806f2aa24966a4088d9
Author: Jay Arthanareeswaran <jarthana@in.ibm.com>
Date:   Tue Mar 1 09:27:58 2016 +0530

    Bug 488442 - [1.9] New icons for package fragment roots with modules in
    explorer
    
    Change-Id: I81481fcc5f18c4b6b569486ef962ff6915554472

62	1	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ModuleBuilderTests.java
7	1	org.eclipse.jdt.core/model/org/eclipse/jdt/core/IPackageFragmentRoot.java
4	0	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ModulePackageFragmentRoot.java
6	9	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java
29	0	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRootInfo.java
1	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ClasspathJar.java
3	3	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ModuleBuilderTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ModuleBuilderTests.java
index fc0bcf9..708a556 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ModuleBuilderTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ModuleBuilderTests.java
@@ -15,11 +15,14 @@
 package org.eclipse.jdt.core.tests.model;
 
 import java.io.File;
+import java.io.IOException;
 
+import org.eclipse.core.resources.IFolder;
 import org.eclipse.core.resources.IMarker;
 import org.eclipse.core.resources.IResource;
 import org.eclipse.core.resources.IncrementalProjectBuilder;
 import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IPath;
 import org.eclipse.core.runtime.Path;
 import org.eclipse.jdt.core.IClasspathEntry;
 import org.eclipse.jdt.core.IJavaProject;
@@ -36,7 +39,7 @@ public class ModuleBuilderTests extends ModifyingResourceTests {
 	}
 
 	static {
-		 //TESTS_NAMES = new String[] { "test003" };
+//		 TESTS_NAMES = new String[] { "test015" };
 	}
 	private static boolean isJRE9 = false;
 	public static Test suite() {
@@ -482,6 +485,64 @@ public class ModuleBuilderTests extends ModifyingResourceTests {
 			deleteProject("P3");
 		}
 	}
+	public void test015() throws CoreException, IOException {
+		if (!isJRE9) return;
+		try {
+			this.editFile("P1/src/module-info.java",
+					"module M1 {\n" +
+					"	exports com.greetings to M2;\n" +
+					"}");
+			IJavaProject p2 = setupP2();
+			this.editFile("P2/src/module-info.java",
+					"module M2 {\n" +
+					"	exports org.astro;\n" +
+					"	requires public M1;\n" +
+					"}");
+			waitForManualRefresh();
+			p2.getProject().getWorkspace().build(IncrementalProjectBuilder.FULL_BUILD, null);
+			IPackageFragmentRoot[] roots = this.currentProject.getAllPackageFragmentRoots();
+			boolean found = false;
+			for (IPackageFragmentRoot iRoot : roots) {
+				if (iRoot.isModule() && iRoot.getElementName().equals("java.base")) {
+					found = true;
+					break;
+				}
+			}
+			assertTrue("Should be a module", found);
+			IFolder folder = getFolder("P1/src");
+			IPackageFragmentRoot root = this.currentProject.getPackageFragmentRoot(folder);
+			assertTrue("Should be a module", root.isModule());
+			folder = getFolder("P2/src");
+			root = p2.getPackageFragmentRoot(folder);
+			assertTrue("Should be a module", root.isModule());
+			folder = getFolder("P1/bin");
+			IPath jarPath = p2.getResource().getLocation().append("m0.jar");
+			org.eclipse.jdt.core.tests.util.Util.zip(new File(folder.getLocation().toOSString()), jarPath.toOSString());
+			IClasspathEntry[] old = p2.getRawClasspath();
+			for (int i = 0; i < old.length; i++) {
+				if (old[i].isExported()) {
+					old[i] = JavaCore.newLibraryEntry(new Path("/P2/m0.jar"), null, null);
+					break;
+				}
+			}
+			p2.setRawClasspath(old, null);
+			p2.getProject().refreshLocal(IResource.DEPTH_INFINITE, null);
+			p2.getProject().getWorkspace().build(IncrementalProjectBuilder.FULL_BUILD, null);
+			roots = p2.getAllPackageFragmentRoots();
+			root = null;
+			for (IPackageFragmentRoot iRoot : roots) {
+				if (iRoot.isModule() && iRoot.getElementName().equals("m0.jar")) {
+					root = iRoot;
+					break;
+				}
+			}
+			assertNotNull("Root should be non null", root);
+			assertTrue("Should be a module", root.isModule());
+		} finally {
+			deleteProject("P2");
+			deleteProject("P3");
+		}
+	}
 	public void tearDownSuite() throws Exception {
 		super.tearDownSuite();
 		deleteProject("P1");
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IPackageFragmentRoot.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IPackageFragmentRoot.java
index 2e4bf98..c05aeb9 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IPackageFragmentRoot.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/IPackageFragmentRoot.java
@@ -450,8 +450,14 @@ public interface IPackageFragmentRoot
 	 * @since 2.1
 	 */
 	void move(IPath destination, int updateResourceFlags, int updateModelFlags, IClasspathEntry sibling, IProgressMonitor monitor) throws JavaModelException;
+
 	/**
+	 * Specifies whether this package fragment root represents a module or not.
+	 * 
+	 * A package fragment root is said to be a module if it contains a <code>module-info.java</code>
+	 * or <code>module-info.class</code> depending on whether this is a source or binary fragment root.
+	 *
 	 * @since 3.12 BETA_JAVA9
 	 */
-	public IModule getModule();
+	public boolean isModule();
 }
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ModulePackageFragmentRoot.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ModulePackageFragmentRoot.java
index 596bdeb..9a11b9a 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ModulePackageFragmentRoot.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ModulePackageFragmentRoot.java
@@ -100,6 +100,10 @@ public class ModulePackageFragmentRoot extends JarPackageFragmentRoot {
 	public String getElementName() {
 		return this.moduleName;
 	}
+	@Override
+	public boolean isModule() {
+		return true;
+	}
 	public PackageFragment getPackageFragment(String[] pkgName) {
 		// NOTE: Do we need a different kind of package fragment?
 		return new JarPackageFragment(this, pkgName);
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java
index 05d59b8..700297f 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java
@@ -843,14 +843,11 @@ protected void verifyAttachSource(IPath sourcePath) throws JavaModelException {
 }
 
 @Override
-public IModule getModule() {
-	IModule module = null;
-//	try {
-//		module = ((PackageFragmentRootInfo)getElementInfo()).getModule();
-//
-//	} catch (JavaModelException e) {
-//		// 
-//	}
-	return module;
+public boolean isModule() {
+	try {
+		return ((PackageFragmentRootInfo) getElementInfo()).isModule(resource(), this);
+	} catch (JavaModelException e) {
+		return false;
+	}
 }
 }
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRootInfo.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRootInfo.java
index c523f1b..4daca5b 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRootInfo.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRootInfo.java
@@ -16,6 +16,9 @@ import org.eclipse.core.runtime.CoreException;
 import org.eclipse.core.runtime.IPath;
 
 import org.eclipse.jdt.core.*;
+import org.eclipse.jdt.core.compiler.CharOperation;
+import org.eclipse.jdt.internal.compiler.lookup.ModuleEnvironment;
+import org.eclipse.jdt.internal.compiler.lookup.TypeConstants;
 import org.eclipse.jdt.internal.core.util.Util;
 
 /**
@@ -44,6 +47,7 @@ class PackageFragmentRootInfo extends OpenableElementInfo {
 
 	private boolean ignoreOptionalProblems;
 	private boolean initialized;
+	private boolean isModule;
 /**
  * Create and initialize a new instance of the receiver
  */
@@ -150,6 +154,31 @@ synchronized Object[] getNonJavaResources(IJavaProject project, IResource underl
 	}
 	return resources;
 }
+
+public boolean isModule(IResource resource, IPackageFragmentRoot handle) throws JavaModelException {
+	if (this.module == ModuleEnvironment.UNNAMED_MODULE)
+		return false;
+	if (this.module != null || this.isModule == true)
+		return true;
+	IPackageFragment fragment = handle.getPackageFragment(""); //$NON-NLS-1$
+	if (handle.getKind() == IPackageFragmentRoot.K_SOURCE) {
+		ICompilationUnit[] units = fragment.getCompilationUnits();
+		for (ICompilationUnit unit : units) {
+			if (CharOperation.contains(unit.getElementName().toCharArray(), TypeConstants.MODULE_INFO_NAME)) {
+				return (this.isModule = true);
+			}
+		}
+	} else {
+		IClassFile[] classfiles = fragment.getClassFiles();
+		for (IClassFile claaz : classfiles) {
+			if (CharOperation.contains(claaz.getElementName().toCharArray(), TypeConstants.MODULE_INFO_NAME)) {
+				return (this.isModule = true);
+			}
+		}
+	}
+	this.setModule(ModuleEnvironment.UNNAMED_MODULE);
+	return false;
+}
 /**
  * Returns the kind of this root.
  */
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ClasspathJar.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ClasspathJar.java
index 83b0e61..194d5d5 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ClasspathJar.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/builder/ClasspathJar.java
@@ -94,7 +94,7 @@ static SimpleSet findPackageSet(final ClasspathJar jar) {
 	PackageCache.put(zipFileName, new PackageCacheEntry(lastModified, fileSize, packageSet));
 	if (modInfo != null) {
 		try {
-			jar.acceptModule(ClassFileReader.read(modInfo));
+			jar.acceptModule(ClassFileReader.read(jar.zipFile, modInfo));
 		} catch (ClassFormatException | IOException e) {
 			// TODO BETA_JAVA9 Auto-generated catch block
 			e.printStackTrace();
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java
index c32ba66..fa3e8a5 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/IndexBasedHierarchyBuilder.java
@@ -30,7 +30,6 @@ import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.core.runtime.SubMonitor;
 import org.eclipse.jdt.core.IJavaElement;
 import org.eclipse.jdt.core.IJavaProject;
-import org.eclipse.jdt.core.IModule;
 import org.eclipse.jdt.core.IPackageFragmentRoot;
 import org.eclipse.jdt.core.IType;
 import org.eclipse.jdt.core.JavaCore;
@@ -226,9 +225,10 @@ private void buildForProject(JavaProject project, ArrayList potentialSubtypes, o
 					char[] typeQualifiedName = focusType.getTypeQualifiedName('.').toCharArray();
 					PackageFragment fragment = (PackageFragment) focusType.getPackageFragment();
 					String[] packageName = fragment.names;
-					IModule module = fragment.getPackageFragmentRoot().getModule();
+					IPackageFragmentRoot root = fragment.getPackageFragmentRoot();
+					String modName = root.isModule() ? root.getElementName() : null;
 					if (searchableEnvironment.findType(typeQualifiedName, Util.toCharArrays(packageName), 
-							module == null ? null : module.name()) == null) {
+							modName != null ? modName.toCharArray() : null) == null) {
 						// focus type is not visible in this project: no need to go further
 						return;
 					}

commit c775c1d0f23881553fb0e260a70314c10cea2026
Author: mdaniel <mdaniel>
Date:   Tue Jan 29 09:38:35 2008 +0000

    HEAD - reintroducing bug 210521

5	6	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java
21	27	org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java
0	2	org.eclipse.jdt.core/buildnotes_jdt-core.html
9	18	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java
0	11	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java
1	3	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java
0	1	org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java
0	14	org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java
index cb78f6c..414067a 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java
@@ -1234,7 +1234,6 @@ public void test012b(){
 			"		<option key=\"org.eclipse.jdt.core.compiler.problem.autoboxing\" value=\"ignore\"/>\n" + 
 			"		<option key=\"org.eclipse.jdt.core.compiler.problem.deprecation\" value=\"warning\"/>\n" + 
 			"		<option key=\"org.eclipse.jdt.core.compiler.problem.deprecationInDeprecatedCode\" value=\"disabled\"/>\n" + 
-			"		<option key=\"org.eclipse.jdt.core.compiler.problem.deprecationInNonDeprecatedCode\" value=\"enabled\"/>\n" + 
 			"		<option key=\"org.eclipse.jdt.core.compiler.problem.deprecationWhenOverridingDeprecatedMethod\" value=\"disabled\"/>\n" + 
 			"		<option key=\"org.eclipse.jdt.core.compiler.problem.discouragedReference\" value=\"warning\"/>\n" + 
 			"		<option key=\"org.eclipse.jdt.core.compiler.problem.emptyStatement\" value=\"ignore\"/>\n" + 
@@ -6103,7 +6102,7 @@ public void test172_warn_options() {
 }
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=210524
 // -warn option - regression tests
-public void test173_warn_options() {
+public void _test173_warn_options() {
 	// same source as 172, skip check defaults
 	this.runConformTest(
 		new String[] {
@@ -7864,7 +7863,7 @@ public void test215_warn_options() {
 }
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=211588
 // variant - check impact of javadoc upon other warnings
-public void test216a_warn_options() {
+public void _test216a_warn_options() {
 	// check what if allJavadoc on
 	this.runConformTest(
 		new String[] {
@@ -8053,7 +8052,7 @@ public static Class testClass() {
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=210524
 // -warn option - regression tests
 // variant
-public void test220_warn_options() {
+public void _test220_warn_options() {
 	// same source as 172, skip check defaults
 	this.runConformTest(
 		new String[] {
@@ -8186,7 +8185,7 @@ public void test223_warn_options() {
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=210524
 // -warn option - regression tests
 // variant
-public void test224_warn_options() {
+public void _test224_warn_options() {
 	this.runConformTest(
 		new String[] {
 			"X.java",
@@ -8247,7 +8246,7 @@ public void test225_warn_options() {
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=210524
 // -warn option - regression tests
 // variant
-public void test226_warn_options() {
+public void _test226_warn_options() {
 	this.runConformTest(
 		new String[] {
 			"X.java",
diff --git a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java
index 597b0ca..b5cd849 100644
--- a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java
+++ b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/Main.java
@@ -1623,17 +1623,24 @@ protected void handleWarningToken(String token, boolean isEnabling) throws Inval
 			isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
 	} else if (token.equals("deprecation")) { //$NON-NLS-1$
 		this.options.put(
-			CompilerOptions.OPTION_ReportDeprecationInNonDeprecatedCode,
-			isEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);
+			CompilerOptions.OPTION_ReportDeprecation,
+			isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
+		this.options.put(
+			CompilerOptions.OPTION_ReportDeprecationInDeprecatedCode,
+			CompilerOptions.DISABLED);
+		this.options.put(
+			CompilerOptions.OPTION_ReportDeprecationWhenOverridingDeprecatedMethod,
+			CompilerOptions.DISABLED);
 	} else if (token.equals("allDeprecation")) { //$NON-NLS-1$
-		String option = isEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED;
 		this.options.put(
-			CompilerOptions.OPTION_ReportDeprecationInNonDeprecatedCode, option);
+			CompilerOptions.OPTION_ReportDeprecation,
+			isEnabling ? CompilerOptions.WARNING : CompilerOptions.IGNORE);
 		this.options.put(
-			CompilerOptions.OPTION_ReportDeprecationInDeprecatedCode, option);
+			CompilerOptions.OPTION_ReportDeprecationInDeprecatedCode,
+			isEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);
 		this.options.put(
 			CompilerOptions.OPTION_ReportDeprecationWhenOverridingDeprecatedMethod,
-			option);
+			isEnabling ? CompilerOptions.ENABLED : CompilerOptions.DISABLED);
 	} else if (token.equals("unusedLocal") || token.equals("unusedLocals")/*backward compatible*/) { //$NON-NLS-1$ //$NON-NLS-2$
 		this.options.put(
 			CompilerOptions.OPTION_ReportUnusedLocal,
@@ -2201,6 +2208,7 @@ public void configure(String[] argv) throws InvalidInputException {
 	boolean printVersionRequired = false;
 
 	boolean didSpecifyDefaultEncoding = false;
+	boolean didSpecifyDeprecation = false;
 	boolean didSpecifyCompliance = false;
 	boolean didSpecifyDisabledAnnotationProcessing = false;
 
@@ -2514,7 +2522,8 @@ public void configure(String[] argv) throws InvalidInputException {
 					continue;
 				}
 				if ("-deprecation".equals(currentArg)) { //$NON-NLS-1$
-					this.options.put(CompilerOptions.OPTION_ReportDeprecationInNonDeprecatedCode, CompilerOptions.ENABLED);
+					didSpecifyDeprecation = true;
+					this.options.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.WARNING);
 					mode = DEFAULT;
 					continue;
 				}
@@ -2645,6 +2654,11 @@ public void configure(String[] argv) throws InvalidInputException {
 					StringTokenizer tokenizer =
 						new StringTokenizer(warningOption.substring(warnTokenStart, warningOption.length()), ","); //$NON-NLS-1$
 					int tokenCounter = 0;
+
+					if (didSpecifyDeprecation) {  // deprecation could have also been set through -deprecation option
+						this.options.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.WARNING);
+					}
+
 					nextToken: while (tokenizer.hasMoreTokens()) {
 						String token = tokenizer.nextToken();
 						tokenCounter++;
@@ -3004,13 +3018,6 @@ public void configure(String[] argv) throws InvalidInputException {
 		this.options.put(
 			CompilerOptions.OPTION_DocCommentSupport,
 			CompilerOptions.ENABLED);
-		// defaults may have been overridden
-		this.options.put(
-			CompilerOptions.OPTION_ReportUnusedParameterIncludeDocCommentReference,
-			CompilerOptions.ENABLED);
-		this.options.put(
-			CompilerOptions.OPTION_ReportUnusedDeclaredThrownExceptionIncludeDocCommentReference,
-			CompilerOptions.ENABLED);
 	} else if (this.warnJavadocOn || this.warnAllJavadocOn) {
 		this.options.put(
 			CompilerOptions.OPTION_DocCommentSupport,
@@ -3050,14 +3057,6 @@ public void configure(String[] argv) throws InvalidInputException {
 			CompilerOptions.OPTION_ReportMissingJavadocComments,
 			CompilerOptions.WARNING);
 	}
-	// configure deprecation level
-	if (this.options.get(CompilerOptions.OPTION_ReportDeprecationInNonDeprecatedCode) == CompilerOptions.ENABLED ||
-			this.options.get(CompilerOptions.OPTION_ReportDeprecationInDeprecatedCode) == CompilerOptions.ENABLED) {
-		this.options.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.WARNING);
-		// the default may have been reset
-	} else {
-		this.options.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.IGNORE);
-	}
 
 	if (printUsageRequired || (filesCount == 0 && classCount == 0)) {
 		if (usageSection ==  null) {
@@ -3144,11 +3143,6 @@ protected void disableWarnings() {
 		}
 	}
 	this.options.put(CompilerOptions.OPTION_TaskTags, Util.EMPTY_STRING);
-	this.options.put(CompilerOptions.OPTION_ReportDeprecationInNonDeprecatedCode, CompilerOptions.DISABLED);
-	this.options.put(CompilerOptions.OPTION_ReportDeprecationInDeprecatedCode, CompilerOptions.DISABLED);
-	this.options.put(CompilerOptions.OPTION_ReportDeprecationWhenOverridingDeprecatedMethod, CompilerOptions.DISABLED);
-	this.options.put(CompilerOptions.OPTION_ReportSpecialParameterHidingField, CompilerOptions.DISABLED);
-	this.options.put(CompilerOptions.OPTION_SuppressWarnings, CompilerOptions.DISABLED);
 }
 
 public String extractDestinationPathFromSourceFile(CompilationResult result) {
diff --git a/org.eclipse.jdt.core/buildnotes_jdt-core.html b/org.eclipse.jdt.core/buildnotes_jdt-core.html
index 501ba4c..385706b 100644
--- a/org.eclipse.jdt.core/buildnotes_jdt-core.html
+++ b/org.eclipse.jdt.core/buildnotes_jdt-core.html
@@ -87,8 +87,6 @@ Regression in TypeHierarchy when a super-class can't be resolved
 Type Hierarchy crashes in some cases of user input
 <br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=215333">215333</a>
 [batch][compiler][options] the documentation for specialParamHiding needs improvement
-<br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=210521">210521</a>
-[batch][compiler][options] -warn:allJavadoc -warn:-javadoc does not behave as documented
 <br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=100278">100278</a>
 [compiler] Add compiler warning for explicitly declared runtime exceptions
 <br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=191090">191090</a>
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java
index c4ef100..5e4bbd5 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java
@@ -364,12 +364,9 @@ public abstract class ASTNode implements TypeConstants, TypeIds {
 		// inside same unit - no report
 		if (scope.isDefinedInSameUnit(field.declaringClass)) return false;
 
-		// check against scope code deprecation
-		if (scope.isInsideDeprecatedCode()) {
-			return scope.compilerOptions().reportDeprecationInsideDeprecatedCode;
-		} else {
-			return scope.compilerOptions().reportDeprecationInNonDeprecatedCode;
-		}
+		// if context is deprecated, may avoid reporting
+		if (!scope.compilerOptions().reportDeprecationInsideDeprecatedCode && scope.isInsideDeprecatedCode()) return false;
+		return true;
 	}
 
 	public boolean isImplicitThis() {
@@ -414,12 +411,9 @@ public abstract class ASTNode implements TypeConstants, TypeIds {
 			return false;
 		}
 
-		// check against scope code deprecation
-		if (scope.isInsideDeprecatedCode()) {
-			return scope.compilerOptions().reportDeprecationInsideDeprecatedCode;
-		} else {
-			return scope.compilerOptions().reportDeprecationInNonDeprecatedCode;
-		}
+		// if context is deprecated, may avoid reporting
+		if (!scope.compilerOptions().reportDeprecationInsideDeprecatedCode && scope.isInsideDeprecatedCode()) return false;
+		return true;
 	}
 
 	public boolean isSuper() {
@@ -466,12 +460,9 @@ public abstract class ASTNode implements TypeConstants, TypeIds {
 		// inside same unit - no report
 		if (scope.isDefinedInSameUnit(refType)) return false;
 
-		// check against scope code deprecation
-		if (scope.isInsideDeprecatedCode()) {
-			return scope.compilerOptions().reportDeprecationInsideDeprecatedCode;
-		} else {
-			return scope.compilerOptions().reportDeprecationInNonDeprecatedCode;
-		}
+		// if context is deprecated, may avoid reporting
+		if (!scope.compilerOptions().reportDeprecationInsideDeprecatedCode && scope.isInsideDeprecatedCode()) return false;
+		return true;
 	}
 
 	public abstract StringBuffer print(int indent, StringBuffer output);
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java
index 404ea6d..0009fa9 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/CompilerOptions.java
@@ -38,7 +38,6 @@ public class CompilerOptions {
 	public static final String OPTION_ReportOverridingPackageDefaultMethod = "org.eclipse.jdt.core.compiler.problem.overridingPackageDefaultMethod"; //$NON-NLS-1$
 	public static final String OPTION_ReportDeprecation = "org.eclipse.jdt.core.compiler.problem.deprecation"; //$NON-NLS-1$
 	public static final String OPTION_ReportDeprecationInDeprecatedCode = "org.eclipse.jdt.core.compiler.problem.deprecationInDeprecatedCode"; //$NON-NLS-1$
-	public static final String OPTION_ReportDeprecationInNonDeprecatedCode = "org.eclipse.jdt.core.compiler.problem.deprecationInNonDeprecatedCode"; //$NON-NLS-1$
 	public static final String OPTION_ReportDeprecationWhenOverridingDeprecatedMethod = "org.eclipse.jdt.core.compiler.problem.deprecationWhenOverridingDeprecatedMethod"; //$NON-NLS-1$
 	public static final String OPTION_ReportHiddenCatchBlock = "org.eclipse.jdt.core.compiler.problem.hiddenCatchBlock"; //$NON-NLS-1$
 	public static final String OPTION_ReportUnusedLocal = "org.eclipse.jdt.core.compiler.problem.unusedLocal"; //$NON-NLS-1$
@@ -283,7 +282,6 @@ public class CompilerOptions {
 
 	// deprecation report
 	public boolean reportDeprecationInsideDeprecatedCode = false;
-	public boolean reportDeprecationInNonDeprecatedCode = true;
 	public boolean reportDeprecationWhenOverridingDeprecatedMethod = false;
 
 	// unused parameters report
@@ -377,7 +375,6 @@ public class CompilerOptions {
 		optionsMap.put(OPTION_ReportOverridingPackageDefaultMethod, getSeverityString(OverriddenPackageDefaultMethod));
 		optionsMap.put(OPTION_ReportDeprecation, getSeverityString(UsingDeprecatedAPI));
 		optionsMap.put(OPTION_ReportDeprecationInDeprecatedCode, this.reportDeprecationInsideDeprecatedCode ? ENABLED : DISABLED);
-		optionsMap.put(OPTION_ReportDeprecationInNonDeprecatedCode, this.reportDeprecationInNonDeprecatedCode ? ENABLED : DISABLED);
 		optionsMap.put(OPTION_ReportDeprecationWhenOverridingDeprecatedMethod, this.reportDeprecationWhenOverridingDeprecatedMethod ? ENABLED : DISABLED);
 		optionsMap.put(OPTION_ReportHiddenCatchBlock, getSeverityString(MaskedCatchBlock));
 		optionsMap.put(OPTION_ReportUnusedLocal, getSeverityString(UnusedLocalVariable));
@@ -683,13 +680,6 @@ public class CompilerOptions {
 				this.reportDeprecationInsideDeprecatedCode = false;
 			}
 		}
-		if ((optionValue = optionsMap.get(OPTION_ReportDeprecationInNonDeprecatedCode)) != null) {
-			if (ENABLED.equals(optionValue)) {
-				this.reportDeprecationInNonDeprecatedCode = true;
-			} else if (DISABLED.equals(optionValue)) {
-				this.reportDeprecationInNonDeprecatedCode = false;
-			}
-		}
 		if ((optionValue = optionsMap.get(OPTION_ReportDeprecationWhenOverridingDeprecatedMethod)) != null) {
 			if (ENABLED.equals(optionValue)) {
 				this.reportDeprecationWhenOverridingDeprecatedMethod = true;
@@ -1051,7 +1041,6 @@ public class CompilerOptions {
 		buf.append("\n\t- encoding : ").append(this.defaultEncoding == null ? "<default>" : this.defaultEncoding); //$NON-NLS-1$ //$NON-NLS-2$
 		buf.append("\n\t- task tags: ").append(this.taskTags == null ? Util.EMPTY_STRING : new String(CharOperation.concatWith(this.taskTags,',')));  //$NON-NLS-1$
 		buf.append("\n\t- task priorities : ").append(this.taskPriorites == null ? Util.EMPTY_STRING : new String(CharOperation.concatWith(this.taskPriorites,','))); //$NON-NLS-1$
-		buf.append("\n\t- report deprecation in non deprecated code : ").append(this.reportDeprecationInNonDeprecatedCode ? ENABLED : DISABLED); //$NON-NLS-1$
 		buf.append("\n\t- report deprecation inside deprecated code : ").append(this.reportDeprecationInsideDeprecatedCode ? ENABLED : DISABLED); //$NON-NLS-1$
 		buf.append("\n\t- report deprecation when overriding deprecated method : ").append(this.reportDeprecationWhenOverridingDeprecatedMethod ? ENABLED : DISABLED); //$NON-NLS-1$
 		buf.append("\n\t- report unused parameter when implementing abstract method : ").append(this.reportUnusedParameterWhenImplementingAbstract ? ENABLED : DISABLED); //$NON-NLS-1$
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java
index 4a23bfb..5f90045 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodVerifier.java
@@ -177,9 +177,7 @@ void checkAgainstInheritedMethods(MethodBinding currentMethod, MethodBinding[] m
 			if (!isAsVisible(currentMethod, inheritedMethod))
 				problemReporter(currentMethod).visibilityConflict(currentMethod, inheritedMethod);
 			if (options.reportDeprecationWhenOverridingDeprecatedMethod && inheritedMethod.isViewedAsDeprecated()) {
-				boolean currentViewedAsDeprecated = currentMethod.isViewedAsDeprecated();
-				if (options.reportDeprecationInNonDeprecatedCode && !currentViewedAsDeprecated ||
-						options.reportDeprecationInsideDeprecatedCode && currentViewedAsDeprecated) {
+				if (!currentMethod.isViewedAsDeprecated() || options.reportDeprecationInsideDeprecatedCode) {
 					// check against the other inherited methods to see if they hide this inheritedMethod
 					ReferenceBinding declaringClass = inheritedMethod.declaringClass;
 					if (declaringClass.isInterface())
diff --git a/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java b/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java
index bb35a5d..273bc47 100644
--- a/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java
+++ b/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java
@@ -334,7 +334,6 @@ public class DefaultCodeFormatter extends CodeFormatter {
 			optionsMap.put(CompilerOptions.OPTION_ReportOverridingMethodWithoutSuperInvocation, CompilerOptions.IGNORE);
 			optionsMap.put(CompilerOptions.OPTION_ReportDeprecation, CompilerOptions.IGNORE);
 			optionsMap.put(CompilerOptions.OPTION_ReportDeprecationInDeprecatedCode, CompilerOptions.DISABLED); 
-			optionsMap.put(CompilerOptions.OPTION_ReportDeprecationInNonDeprecatedCode, CompilerOptions.DISABLED);
 			optionsMap.put(CompilerOptions.OPTION_ReportDeprecationWhenOverridingDeprecatedMethod, CompilerOptions.DISABLED); 
 			optionsMap.put(CompilerOptions.OPTION_ReportHiddenCatchBlock, CompilerOptions.IGNORE);
 			optionsMap.put(CompilerOptions.OPTION_ReportUnusedLocal, CompilerOptions.IGNORE);
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java
index 5c4a478..6af2900 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java
@@ -269,12 +269,6 @@ public final class JavaCore extends Plugin {
 	/**
 	 * Possible  configurable option ID.
 	 * @see #getDefaultOptions()
-	 * @since 3.4
-	 */
-	public static final String COMPILER_PB_DEPRECATION_IN_NON_DEPRECATED_CODE = PLUGIN_ID + ".compiler.problem.deprecationInNonDeprecatedCode"; //$NON-NLS-1$
-	/**
-	 * Possible  configurable option ID.
-	 * @see #getDefaultOptions()
 	 * @since 3.0
 	 */
 	public static final String COMPILER_PB_DEPRECATION_WHEN_OVERRIDING_DEPRECATED_METHOD = "org.eclipse.jdt.core.compiler.problem.deprecationWhenOverridingDeprecatedMethod"; //$NON-NLS-1$
@@ -2079,14 +2073,6 @@ public final class JavaCore extends Plugin {
 	 *     - possible values:   { "enabled", "disabled" }
 	 *     - default:           "disabled"
 	 *
-	 * COMPILER / Reporting Deprecation In Non Deprecated Code
-	 *    When enabled, the compiler will signal use of deprecated API in non 
-	 *    deprecated code.
-	 *    The severity of the problem is controlled with option "org.eclipse.jdt.core.compiler.problem.deprecation".
-	 *     - option id:         "org.eclipse.jdt.core.compiler.problem.deprecationInNonDeprecatedCode"
-	 *     - possible values:   { "enabled", "disabled" }
-	 *     - default:           "enabled"
-	 *
 	 * COMPILER / Reporting Deprecation When Overriding Deprecated Method
 	 *    When enabled, the compiler will signal the declaration of a method overriding a deprecated one.
 	 *    The severity of the problem is controlled with option "org.eclipse.jdt.core.compiler.problem.deprecation".

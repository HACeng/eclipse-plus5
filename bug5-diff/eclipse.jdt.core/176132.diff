commit 7e373723161c71c5d5edc915bc1dcda42c748d81
Author: Walter Harley <wharley>
Date:   Sun Mar 18 01:05:02 2007 +0000

    Bug 176132 - add a flag to disable reconcile-time annotation processing

4	0	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptCompilationParticipant.java
1	1	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/CompilationUnitHelper.java
9	0	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java
23	0	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java
4	1	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptPreferenceConstants.java
110	0	org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/AptReconcileTests.java
58	12	org.eclipse.jdt.apt.ui/src/org/eclipse/jdt/apt/ui/internal/preferences/AptConfigurationBlock.java
2	0	org.eclipse.jdt.apt.ui/src/org/eclipse/jdt/apt/ui/internal/preferences/Messages.java
1	0	org.eclipse.jdt.apt.ui/src/org/eclipse/jdt/apt/ui/internal/preferences/messages.properties
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptCompilationParticipant.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptCompilationParticipant.java
index d1e10d2..7c221ba 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptCompilationParticipant.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptCompilationParticipant.java
@@ -178,6 +178,10 @@ public class AptCompilationParticipant extends CompilationParticipant
 			IJavaProject javaProject = workingCopy.getJavaProject();			
 			if( javaProject == null )
 				return;
+			if (!AptConfig.shouldProcessDuringReconcile(javaProject)) {
+				AptPlugin.trace("Reconcile-time processing is disabled for project: " + javaProject.getElementName()); //$NON-NLS-1$
+				return;
+			}
 			AptProject aptProject = AptPlugin.getAptProject(javaProject);
 			
 			Map<AnnotationProcessorFactory, FactoryPath.Attributes> factories = 
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/CompilationUnitHelper.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/CompilationUnitHelper.java
index 69fbca2..9c223d6 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/CompilationUnitHelper.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/CompilationUnitHelper.java
@@ -66,7 +66,7 @@ public class CompilationUnitHelper
 		try {
 			pkgFragment = root.getPackageFragment(pkgName );
 			workingCopy = pkgFragment.getCompilationUnit(fname);
-			workingCopy.becomeWorkingCopy(null, null);
+			workingCopy.becomeWorkingCopy(null);
 		} catch (JavaModelException e) {
 			AptPlugin.log(e, "Unable to become working copy: " + typeName); //$NON-NLS-1$
 			return null;
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java
index 6cf188b..33aa8fa 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/generatedfile/GeneratedFileManager.java
@@ -38,6 +38,7 @@ import org.eclipse.jdt.apt.core.internal.AptProject;
 import org.eclipse.jdt.apt.core.internal.Messages;
 import org.eclipse.jdt.apt.core.internal.util.FileSystemUtil;
 import org.eclipse.jdt.apt.core.internal.util.ManyToMany;
+import org.eclipse.jdt.apt.core.util.AptConfig;
 import org.eclipse.jdt.core.ElementChangedEvent;
 import org.eclipse.jdt.core.ICompilationUnit;
 import org.eclipse.jdt.core.IJavaProject;
@@ -1430,8 +1431,16 @@ public class GeneratedFileManager
 	private void saveCompilationUnit(IPackageFragment pkgFrag, final String cuName, String contents,
 			IProgressMonitor progressMonitor)
 	{
+		
 		ICompilationUnit unit = pkgFrag.getCompilationUnit(cuName);
 		boolean isWorkingCopy = unit.isWorkingCopy();
+		if (isWorkingCopy && !AptConfig.shouldProcessDuringReconcile(_jProject)) {
+			// Cover the case where the user turned off reconcile-time processing after some working
+			// copies were already created - else they'll get null timestamps and the commit will fail.
+			// There's probably a better way to do this but it's a corner case anyway. - WSH 3/07
+			_CUHELPER.discardWorkingCopy(unit);
+			isWorkingCopy = false;
+		}
 		if (isWorkingCopy) {
 			// If we have a working copy, all we
 			// need to do is update its contents and commit it.
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java
index c2a911e..bcb58d2 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptConfig.java
@@ -713,6 +713,7 @@ public class AptConfig {
 		return getBoolean(jproject, AptPreferenceConstants.APT_ENABLED);
 	}
 	
+	
 	/**
 	 * Turn annotation processing on or off for this project.
 	 * @param jproject an IJavaProject, or null to set workspace preferences.
@@ -729,6 +730,28 @@ public class AptConfig {
 		setBoolean(jproject, AptPreferenceConstants.APT_ENABLED, enabled);
 	}
 	
+	/**
+	 * Is annotation processing turned on during reconcile, or only during build?
+	 * Note that if isEnabled() is false, processing will not occur at all; the
+	 * two settings are independent.
+	 * @param jproject an IJavaProject to query, or null to get the default value.
+	 * @return true if processing is enabled during both reconcile and build
+	 */
+	public static boolean shouldProcessDuringReconcile(IJavaProject jproject) {
+		return getBoolean(jproject, AptPreferenceConstants.APT_RECONCILEENABLED);
+	}
+	
+	/**
+	 * Turn processing during reconcile on or off.  Processing during build is
+	 * unaffected.  Note that if isEnabled() is false, processing will not occur
+	 * at all; the two settings are independent.
+	 * @param jproject the IJavaProject to modify.  This setting is only valid
+	 * on individual projects.
+	 */
+	public static void setProcessDuringReconcile(IJavaProject jproject, boolean enabled) {
+		setBoolean(jproject, AptPreferenceConstants.APT_RECONCILEENABLED, enabled);
+	}
+	
 	private static boolean getBoolean(IJavaProject jproj, String optionName) {
 		IPreferencesService service = Platform.getPreferencesService();
 		IScopeContext[] contexts;
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptPreferenceConstants.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptPreferenceConstants.java
index 6233b9d..7de9886 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptPreferenceConstants.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/util/AptPreferenceConstants.java
@@ -23,6 +23,7 @@ public class AptPreferenceConstants {
 	public static final String APT_ENABLED = APT_STRING_BASE + ".aptEnabled"; //$NON-NLS-1$
 	public static final String APT_GENSRCDIR = APT_STRING_BASE + ".genSrcDir"; //$NON-NLS-1$
 	public static final String APT_PROCESSOROPTIONS = APT_STRING_BASE + ".processorOptions"; //$NON-NLS-1$
+	public static final String APT_RECONCILEENABLED = APT_STRING_BASE + ".reconcileEnabled"; //$NON-NLS-1$
 	
 	// Used in preference to indicate null value for processor option
 	public static final String APT_NULLVALUE = APT_STRING_BASE + ".NULLVALUE"; //$NON-NLS-1$
@@ -36,6 +37,7 @@ public class AptPreferenceConstants {
 		options.put(AptPreferenceConstants.APT_ENABLED, "false"); //$NON-NLS-1$
 		options.put(AptPreferenceConstants.APT_GENSRCDIR, DEFAULT_GENERATED_SOURCE_FOLDER_NAME);
 		options.put(AptPreferenceConstants.APT_PROCESSOROPTIONS, ""); //$NON-NLS-1$
+		options.put(AptPreferenceConstants.APT_RECONCILEENABLED, "true"); //$NON-NLS-1$
 		DEFAULT_OPTIONS_MAP = Collections.unmodifiableMap(options);
 	}
 	
@@ -49,7 +51,8 @@ public class AptPreferenceConstants {
 	public static final String[] OPTION_NAMES = {
 		APT_ENABLED,
 		APT_GENSRCDIR,
-		APT_PROCESSOROPTIONS
+		APT_PROCESSOROPTIONS,
+		APT_RECONCILEENABLED,
 	};
 	
 	/**
diff --git a/org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/AptReconcileTests.java b/org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/AptReconcileTests.java
index c1616e9..7c60629 100644
--- a/org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/AptReconcileTests.java
+++ b/org.eclipse.jdt.apt.tests/src/org/eclipse/jdt/apt/tests/AptReconcileTests.java
@@ -28,6 +28,8 @@ import org.eclipse.jdt.core.tests.model.ModifyingResourceTests;
 
 public class AptReconcileTests extends ModifyingResourceTests
 {
+	IJavaProject _jproject;
+	
 	public AptReconcileTests(String name)
 	{
 		super( name );
@@ -366,6 +368,111 @@ public class AptReconcileTests extends ModifyingResourceTests
 		
 	}
 
+	public void testNoReconcile() throws Throwable {
+		// Start by disabling reconcile-time processing
+		AptConfig.setProcessDuringReconcile(_jproject, false);
+		String fname = _testFolder + "/A.java";
+		try
+		{
+			
+			//
+			//  first make sure errors are present when the annotation
+			// is commented out
+			//
+			String codeWithErrors = "package test;" + "\n" +
+				"//import org.eclipse.jdt.apt.tests.annotations.helloworld.HelloWorldAnnotation;" + "\n" + 
+				"public class A " +  "\n" +
+				"{" +  "\n" +
+				"    //@HelloWorldAnnotation" + "\n" + 
+				"    public static void main( String[] argv )" + "\n" +
+				"    {" + "\n" +
+				"        generatedfilepackage.GeneratedFileTest.helloWorld();" + "\n" +
+				"    }" + "\n" +
+				"}";
+
+			createFile( fname, codeWithErrors );
+			this._problemRequestor = new ProblemRequestor();
+			
+			setUpWorkingCopy( fname, codeWithErrors );
+			this._workingCopy.reconcile( ICompilationUnit.NO_AST, true, null,
+				null );
+			
+			String expectedProblems = "----------\n" + 
+				"1. ERROR in /" + _testProject + "/src/test/A.java (at line 8)\n" + 
+				"	generatedfilepackage.GeneratedFileTest.helloWorld();\n" + 
+				"	^^^^^^^^^^^^^^^^^^^^\n" + 
+				"generatedfilepackage cannot be resolved\n" + 
+				"----------\n" + 
+				"----------\n" + 
+				"2. ERROR in /" + _testProject + "/src/test/A.java (at line 8)\n" + 
+				"	generatedfilepackage.GeneratedFileTest.helloWorld();\n" + 
+				"	^^^^^^^^^^^^^^^^^^^^\n" + 
+				"generatedfilepackage cannot be resolved\n" + 
+				"----------\n";
+			
+			assertProblems( "Unexpected problems", expectedProblems );
+			
+			
+			//
+			// should still see errors when annotations are present but reconcile is off
+			//
+			String codeWithOutErrors1 = "package test;" + "\n" +
+			    "import org.eclipse.jdt.apt.tests.annotations.helloworld.HelloWorldAnnotation;" + "\n" + 
+			    "public class A " +  "\n" +
+			    "{" +  "\n" +
+			    "    @HelloWorldAnnotation" + "\n" + 
+				"    public static void main( String[] argv )" + "\n" +
+				"    {" + "\n" +
+				"        generatedfilepackage.GeneratedFileTest.helloWorld();" + "\n" +
+				"    }" + "\n" +
+				"}";
+
+			setWorkingCopyContents( codeWithOutErrors1 );
+			this._workingCopy.reconcile( ICompilationUnit.NO_AST, true, null,
+					null );
+			
+			String expectedProblems2 = "----------\n" + 
+			"1. ERROR in /" + _testProject + "/src/test/A.java (at line 8)\n" + 
+			"	generatedfilepackage.GeneratedFileTest.helloWorld();\n" + 
+			"	^^^^^^^^^^^^^^^^^^^^\n" + 
+			"generatedfilepackage cannot be resolved\n" + 
+			"----------\n";
+		
+			assertProblems( "Unexpected problems", expectedProblems2 );
+			
+			//
+			// now enable reconcile-time processing and make sure errors go away
+			//
+			AptConfig.setProcessDuringReconcile(_jproject, true);
+			String codeWithOutErrors2 = "package test;" + "\n\n" +
+			    "import org.eclipse.jdt.apt.tests.annotations.helloworld.HelloWorldAnnotation;" + "\n" + 
+			    "public class A " +  "\n" +
+			    "{" +  "\n" +
+			    "    @HelloWorldAnnotation" + "\n" + 
+				"    public static void main( String[] argv )" + "\n" +
+				"    {" + "\n" +
+				"        generatedfilepackage.GeneratedFileTest.helloWorld();" + "\n" +
+				"    }" + "\n" +
+				"}";
+
+			setWorkingCopyContents( codeWithOutErrors2 );
+			this._workingCopy.reconcile( ICompilationUnit.NO_AST, true, null,
+					null );
+			
+			assertProblems( "UnexpectedProblems", "----------\n----------\n" );
+			
+		}
+		catch( Throwable e )
+		{
+			e.printStackTrace();
+			throw e;
+		}
+		finally
+		{
+			deleteFile( fname );
+		}
+	}
+
 	@SuppressWarnings("nls")
 	public void setUp() throws Exception 
 	{
@@ -392,10 +499,12 @@ public class AptReconcileTests extends ModifyingResourceTests
 		AptConfig.setEnabled(project, true);
 		
 		createFolder( _testFolder );
+		_jproject = project;
 		
 	}
 	public void tearDown() throws Exception
 	{
+		_jproject = null;
 		AptPlugin.trace("Tearing down " + _testProject );
 
 		deleteProject( _testProject );
@@ -415,6 +524,7 @@ public class AptReconcileTests extends ModifyingResourceTests
 		this._problemRequestor.initialize( contents.toCharArray() );
 	}
 
+	@SuppressWarnings("deprecation")
 	private void setUpWorkingCopy(String path, String contents)
 		throws JavaModelException
 	{
diff --git a/org.eclipse.jdt.apt.ui/src/org/eclipse/jdt/apt/ui/internal/preferences/AptConfigurationBlock.java b/org.eclipse.jdt.apt.ui/src/org/eclipse/jdt/apt/ui/internal/preferences/AptConfigurationBlock.java
index e8ae619..430937b 100644
--- a/org.eclipse.jdt.apt.ui/src/org/eclipse/jdt/apt/ui/internal/preferences/AptConfigurationBlock.java
+++ b/org.eclipse.jdt.apt.ui/src/org/eclipse/jdt/apt/ui/internal/preferences/AptConfigurationBlock.java
@@ -62,11 +62,12 @@ import org.eclipse.ui.preferences.IWorkbenchPreferenceContainer;
 public class AptConfigurationBlock extends BaseConfigurationBlock {
 		
 	private static final Key KEY_APTENABLED= getKey(AptPlugin.PLUGIN_ID, AptPreferenceConstants.APT_ENABLED);
+	private static final Key KEY_RECONCILEENABLED= getKey(AptPlugin.PLUGIN_ID, AptPreferenceConstants.APT_RECONCILEENABLED);
 	private static final Key KEY_GENSRCDIR= getKey(AptPlugin.PLUGIN_ID, AptPreferenceConstants.APT_GENSRCDIR);
 	
 	private static Key[] getAllKeys() {
 		return new Key[] {
-				KEY_APTENABLED, KEY_GENSRCDIR
+				KEY_APTENABLED, KEY_RECONCILEENABLED, KEY_GENSRCDIR
 		};	
 	}
 	
@@ -77,6 +78,7 @@ public class AptConfigurationBlock extends BaseConfigurationBlock {
 	private final IJavaProject fJProj;
 
 	private SelectionButtonDialogField fAptEnabledField;
+	private SelectionButtonDialogField fReconcileEnabledField;
 	private StringDialogField fGenSrcDirField;
 	private ListDialogField fProcessorOptionsField;
 	
@@ -86,6 +88,7 @@ public class AptConfigurationBlock extends BaseConfigurationBlock {
 	private Map<String, String> fOriginalProcOptions; // cache of saved values
 	private String fOriginalGenSrcDir;
 	private boolean fOriginalAptEnabled;
+	private boolean fOriginalReconcileEnabled;
 	
 	// used to distinguish actual changes from re-setting of same value - see useProjectSpecificSettings()
 	private boolean fPerProjSettingsEnabled; 
@@ -198,6 +201,10 @@ public class AptConfigurationBlock extends BaseConfigurationBlock {
 			fAptEnabledField = null;
 		}
 		
+		fReconcileEnabledField= new SelectionButtonDialogField(SWT.CHECK);
+		fReconcileEnabledField.setDialogFieldListener(adapter);
+		fReconcileEnabledField.setLabelText(Messages.AptConfigurationBlock_enableReconcileProcessing);
+		
 		fGenSrcDirField = new StringDialogField();
 		fGenSrcDirField.setDialogFieldListener(adapter);
 		fGenSrcDirField.setLabelText(Messages.AptConfigurationBlock_generatedSrcDir);
@@ -234,13 +241,23 @@ public class AptConfigurationBlock extends BaseConfigurationBlock {
 	 */
 	@Override
 	protected String[] getFullBuildDialogStrings(boolean workspaceSettings) {
-		return workspaceSettings ? null : super.getFullBuildDialogStrings(workspaceSettings);
+		if (workspaceSettings)
+			return null;
+		// if the only thing that changed was the reconcile setting, return null: a rebuild is not necessary
+		if (fOriginalGenSrcDir.equals(fGenSrcDirField.getText())) {
+			if (fOriginalAptEnabled == fAptEnabledField.isSelected()) {
+				if (!procOptionsChanged()) {
+					return null;
+				}
+			}
+		}
+		return super.getFullBuildDialogStrings(workspaceSettings);
 	}
 
 	/*
 	 * Helper to eliminate unchecked-conversion warning
 	 */
-	@SuppressWarnings("unchecked") 
+	@SuppressWarnings("unchecked")
 	private List<ProcessorOption> getListElements() {
 		return fProcessorOptionsField.getElements();
 	}
@@ -248,7 +265,7 @@ public class AptConfigurationBlock extends BaseConfigurationBlock {
 	/*
 	 * Helper to eliminate unchecked-conversion warning
 	 */
-	@SuppressWarnings("unchecked") 
+	@SuppressWarnings("unchecked")
 	private List<ProcessorOption> getListSelection() {
 		return fProcessorOptionsField.getSelectedElements();
 	}
@@ -269,6 +286,7 @@ public class AptConfigurationBlock extends BaseConfigurationBlock {
 		setShell(parent.getShell());
 		
 		fPixelConverter= new PixelConverter(parent);
+		int indent= fPixelConverter.convertWidthInCharsToPixels(4);
 		
 		fBlockControl = new Composite(parent, SWT.NONE);
 		fBlockControl.setFont(parent.getFont());
@@ -283,16 +301,22 @@ public class AptConfigurationBlock extends BaseConfigurationBlock {
 		DialogField[] fields = fAptEnabledField != null ? 
 				new DialogField[] {
 					fAptEnabledField,
+					fReconcileEnabledField,
 					fGenSrcDirField,
 					fProcessorOptionsField,
 				} :
 				new DialogField[] {
+					fReconcileEnabledField,
 					fGenSrcDirField,
 					fProcessorOptionsField,
 				};
 		LayoutUtil.doDefaultLayout(fBlockControl, fields, true, SWT.DEFAULT, SWT.DEFAULT);
 		LayoutUtil.setHorizontalGrabbing(fProcessorOptionsField.getListControl(null));
-
+		
+		GridData reconcileGD= (GridData)fReconcileEnabledField.getSelectionButton(parent).getLayoutData();
+		reconcileGD.horizontalIndent = indent;
+		fReconcileEnabledField.getSelectionButton(parent).setLayoutData(reconcileGD);
+		
 		Label description= new Label(fBlockControl, SWT.WRAP);
 		description.setText(Messages.AptConfigurationBlock_classpathAddedAutomaticallyNote); 
 		GridData gdLabel= new GridData(GridData.HORIZONTAL_ALIGN_FILL);
@@ -313,6 +337,7 @@ public class AptConfigurationBlock extends BaseConfigurationBlock {
 		fOriginalProcOptions= AptConfig.getRawProcessorOptions(fJProj);
 		fOriginalGenSrcDir = AptConfig.getGenSrcDir(fJProj);
 		fOriginalAptEnabled = AptConfig.isEnabled(fJProj);
+		fOriginalReconcileEnabled = AptConfig.shouldProcessDuringReconcile(fJProj);
 		fPerProjSettingsEnabled = hasProjectSpecificOptionsNoCache(fProject);
 	}
 
@@ -343,22 +368,26 @@ public class AptConfigurationBlock extends BaseConfigurationBlock {
 				if (fOriginalAptEnabled != AptConfig.isEnabled(null)) {
 					fAptProject.preferenceChanged(AptPreferenceConstants.APT_ENABLED);
 				}
+				if (fOriginalReconcileEnabled != AptConfig.shouldProcessDuringReconcile(null)) {
+					fAptProject.preferenceChanged(AptPreferenceConstants.APT_RECONCILEENABLED);
+				}
 			}
 			else { // compare against current settings
 				if (!fOriginalGenSrcDir.equals(fGenSrcDirField.getText()))
 					fAptProject.preferenceChanged(AptPreferenceConstants.APT_GENSRCDIR);
 				if (fOriginalAptEnabled != fAptEnabledField.isSelected())
 					fAptProject.preferenceChanged(AptPreferenceConstants.APT_ENABLED);
+				if (fOriginalReconcileEnabled != fReconcileEnabledField.isSelected())
+					fAptProject.preferenceChanged(AptPreferenceConstants.APT_RECONCILEENABLED);
 			}
 		}
 	}
-
+	
 	/**
-	 * Check whether any processor options have changed, as well as
-	 * any of the settings tracked in the "normal" way (as Keys).
+	 * Check whether any processor options have changed.
+	 * @return true if they did.
 	 */
-	@Override
-	protected boolean settingsChanged(IScopeContext currContext) {
+	private boolean procOptionsChanged() {
 		Map<String, String> savedProcOptions = new HashMap<String, String>(fOriginalProcOptions);
 		for (ProcessorOption o : getListElements()) {
 			final String savedVal = savedProcOptions.get(o.key);
@@ -374,7 +403,19 @@ public class AptConfigurationBlock extends BaseConfigurationBlock {
 			// found a saved option that has been removed
 			return true;
 		}
-		return super.settingsChanged(currContext);
+		return false;
+	}
+
+	/**
+	 * Check whether any processor options have changed, as well as
+	 * any of the settings tracked in the "normal" way (as Keys).
+	 */
+	@Override
+	protected boolean settingsChanged(IScopeContext currContext) {
+		if (procOptionsChanged())
+			return true;
+		else
+			return super.settingsChanged(currContext);
 	}
 
 	/**
@@ -440,6 +481,8 @@ public class AptConfigurationBlock extends BaseConfigurationBlock {
 			boolean aptEnabled= Boolean.valueOf(getValue(KEY_APTENABLED)).booleanValue();
 			fAptEnabledField.setSelection(aptEnabled);
 		}
+		boolean reconcileEnabled= Boolean.valueOf(getValue(KEY_RECONCILEENABLED)).booleanValue();
+		fReconcileEnabledField.setSelection(reconcileEnabled);
 		String str= getValue(KEY_GENSRCDIR);
 		fGenSrcDirField.setText(str == null ? "" : str); //$NON-NLS-1$
 	}	
@@ -455,7 +498,10 @@ public class AptConfigurationBlock extends BaseConfigurationBlock {
 		} else if (field == fGenSrcDirField) {
 			String newVal = fGenSrcDirField.getText();
 			setValue(KEY_GENSRCDIR, newVal);
-		} 
+		} else if (field == fReconcileEnabledField) {
+			String newVal = String.valueOf(fReconcileEnabledField.isSelected());
+			setValue(KEY_RECONCILEENABLED, newVal);
+		}
 		validateSettings(null, null, null); // params are ignored
 	}
 
diff --git a/org.eclipse.jdt.apt.ui/src/org/eclipse/jdt/apt/ui/internal/preferences/Messages.java b/org.eclipse.jdt.apt.ui/src/org/eclipse/jdt/apt/ui/internal/preferences/Messages.java
index 8fa73c3..5c61ed2 100644
--- a/org.eclipse.jdt.apt.ui/src/org/eclipse/jdt/apt/ui/internal/preferences/Messages.java
+++ b/org.eclipse.jdt.apt.ui/src/org/eclipse/jdt/apt/ui/internal/preferences/Messages.java
@@ -26,6 +26,8 @@ public class Messages extends NLS {
 
 	public static String AptConfigurationBlock_enable;
 
+	public static String AptConfigurationBlock_enableReconcileProcessing;
+
 	public static String AptConfigurationBlock_generatedSrcDir;
 
 	public static String AptConfigurationBlock_options;
diff --git a/org.eclipse.jdt.apt.ui/src/org/eclipse/jdt/apt/ui/internal/preferences/messages.properties b/org.eclipse.jdt.apt.ui/src/org/eclipse/jdt/apt/ui/internal/preferences/messages.properties
index 1c0720b..429a15e 100644
--- a/org.eclipse.jdt.apt.ui/src/org/eclipse/jdt/apt/ui/internal/preferences/messages.properties
+++ b/org.eclipse.jdt.apt.ui/src/org/eclipse/jdt/apt/ui/internal/preferences/messages.properties
@@ -7,6 +7,7 @@ AptConfigurationBlock_value=Value
 AptConfigurationBlock_generatedSrcDir=&Generated source directory:
 AptConfigurationBlock_warningIgnoredOptions=An automatically set option will override this option
 AptConfigurationBlock_warningContentsMayBeDeleted=Contents of generated source directory may be deleted
+AptConfigurationBlock_enableReconcileProcessing=Enable processing in edito&r
 AptConfigurationBlock_classpathAddedAutomaticallyNote=Note: options such as \"-classpath\" and \"-sourcepath\" are automatically passed to all processors, with values corresponding to the project's Java settings.
 AptConfigurationBlock_genSrcDirMustBeValidRelativePath=Generated source directory must be a valid relative path
 AptConfigurationBlock_options=Processor options (-Akey=value):

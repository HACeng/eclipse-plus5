commit b401873fa9856414ece5f19eca18820ba76eea31
Author: Stephan Herrmann <stephan.herrmann@berlin.de>
Date:   Fri Jan 1 10:51:03 2016 +0100

    Bug 485057 - [1.8][compiler] ecj gives no error when method call with
    lambda is ambiguous
    
    Change-Id: I0245fbcee59fa5dd390c4fef71ac365cb08c5537

60	13	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java
3	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java
25	17	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java
41	6	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ProblemMethodBinding.java
17	4	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java
index bf95527..cc694f2 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java
@@ -2063,20 +2063,8 @@ public void testBug427626() {
 			"}"
 		},
 		// 8u20 emits just one message inferred type not conforming to upper bound. ECJ's message is actually better.
-		// We used to emit only 1 error here. Here the lambda is broken, so inference fails leading to two messages.			
 		"----------\n" + 
-		"1. ERROR in X.java (at line 8)\n" + 
-		"	ss.stream().map(s -> {\n" + 
-		"          class L1 {};\n" + 
-		"          class L2 {\n" + 
-		"            void mm(L1 l) {}\n" + 
-		"          }\n" + 
-		"          return new L2().mm(new L1());\n" + 
-		"        }).forEach(e -> System.out.println(e));\n" + 
-		"	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
-		"Type mismatch: cannot convert from Stream<Object> to <unknown>\n" + 
-		"----------\n" + 
-		"2. ERROR in X.java (at line 13)\n" + 
+		"1. ERROR in X.java (at line 13)\n" + 
 		"	return new L2().mm(new L1());\n" + 
 		"	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
 		"Cannot return a void result\n" + 
@@ -6148,4 +6136,63 @@ public void testBug491485() {
 		"The type of foo(Object, Object) from the type Tester is Object, this is incompatible with the descriptor\'s return type: X3\n" + 
 		"----------\n");
 }
+
+public void testBug485057() {
+	runNegativeTest(
+		new String[] {
+			"Task.java",
+			"public class Task {\n" + 
+			"\n" + 
+			"	public static void main(String[] args) {\n" + 
+			"		foo(rt -> true); // PROBLEM HERE\n" + 
+			"	}\n" + 
+			"\n" + 
+			"	public static <T extends java.io.Serializable> Task foo(T serialiable) {\n" + 
+			"		return null;\n" + 
+			"	}\n" + 
+			"\n" + 
+			"	public static Task foo(java.util.function.Predicate<?> predicate) {\n" + 
+			"		return null;\n" + 
+			"	}\n" + 
+			"}\n"
+		},
+		"----------\n" + 
+		"1. ERROR in Task.java (at line 4)\n" + 
+		"	foo(rt -> true); // PROBLEM HERE\n" + 
+		"	^^^\n" + 
+		"The method foo(Serializable) is ambiguous for the type Task\n" + 
+		"----------\n" + 
+		"2. ERROR in Task.java (at line 4)\n" + 
+		"	foo(rt -> true); // PROBLEM HERE\n" + 
+		"	    ^^^^^^^^^^\n" + 
+		"The target type of this expression must be a functional interface\n" + 
+		"----------\n");
+}
+
+public void testBug485373() {
+	runNegativeTest(
+		new String[] {
+			"TestGenericsFunctional.java",
+			"import java.util.Collection;\n" + 
+			"import java.util.function.Consumer;\n" + 
+			"\n" + 
+			"public class TestGenericsFunctional {\n" + 
+			"\n" + 
+			"	public static void doStuff(String str, Consumer<String> consumer) {\n" + 
+			"		consumer.accept(str);\n" + 
+			"	}\n" + 
+			"	\n" + 
+			"	public static <C extends Collection<String>> C doStuff(String str, C collection) {\n" + 
+			"		doStuff(str, st -> collection.add(st));\n" + 
+			"		return collection;\n" + 
+			"	}\n" + 
+			"}\n"
+		},
+		"----------\n" + 
+		"1. ERROR in TestGenericsFunctional.java (at line 11)\n" + 
+		"	doStuff(str, st -> collection.add(st));\n" + 
+		"	^^^^^^^\n" + 
+		"The method doStuff(String, Consumer<String>) is ambiguous for the type TestGenericsFunctional\n" + 
+		"----------\n");
+}
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java
index 85ad8b5..f852d94 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java
@@ -1492,7 +1492,7 @@ public class InferenceContext18 {
 		   best and nothing more to do than to signal error. 
 		 */
 		ProblemMethodBinding problemMethod = new ProblemMethodBinding(method, method.selector, method.parameters, ProblemReasons.InvocationTypeInferenceFailure);
-		problemMethod.returnType = expectedType;
+		problemMethod.returnType = expectedType != null ? expectedType : method.returnType;
 		problemMethod.inferenceContext = this;
 		return problemMethod;
 	}
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java
index c7a0b55..2ee8dc5 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java
@@ -903,6 +903,9 @@ public final boolean isUsed() {
 public boolean isVarargs() {
 	return (this.modifiers & ClassFileConstants.AccVarargs) != 0;
 }
+public boolean isParameterizedGeneric() {
+	return false;
+}
 public boolean isPolymorphic() {
 	return false;
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java
index 8d9e6b2..741b838 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ParameterizedGenericMethodBinding.java
@@ -270,26 +270,29 @@ public class ParameterizedGenericMethodBinding extends ParameterizedMethodBindin
 					methodSubstitute = scope.environment().createParameterizedGenericMethod(originalMethod, solutions, infCtx18.usesUncheckedConversion, hasReturnProblem);
 					if (invocationSite instanceof Invocation)
 						infCtx18.forwardResults(result, (Invocation) invocationSite, methodSubstitute, expectedType);
-					if (hasReturnProblem) { // illegally working from the provisional result?
-						MethodBinding problemMethod = infCtx18.getReturnProblemMethodIfNeeded(expectedType, methodSubstitute);
-						if (problemMethod instanceof ProblemMethodBinding) {
-							return problemMethod;
+					try {
+						if (hasReturnProblem) { // illegally working from the provisional result?
+							MethodBinding problemMethod = infCtx18.getReturnProblemMethodIfNeeded(expectedType, methodSubstitute);
+							if (problemMethod instanceof ProblemMethodBinding) {
+								return problemMethod;
+							}
 						}
-					}
-					if (invocationTypeInferred) {
-						if (compilerOptions.isAnnotationBasedNullAnalysisEnabled)
-							NullAnnotationMatching.checkForContradictions(methodSubstitute, invocationSite, scope);
-						MethodBinding problemMethod = methodSubstitute.boundCheck18(scope, arguments, invocationSite);
-						if (problemMethod != null) {
-							return problemMethod;
+						if (invocationTypeInferred) {
+							if (compilerOptions.isAnnotationBasedNullAnalysisEnabled)
+								NullAnnotationMatching.checkForContradictions(methodSubstitute, invocationSite, scope);
+							MethodBinding problemMethod = methodSubstitute.boundCheck18(scope, arguments, invocationSite);
+							if (problemMethod != null) {
+								return problemMethod;
+							}
+						} else {
+							methodSubstitute = new PolyParameterizedGenericMethodBinding(methodSubstitute);
 						}
-					} else {
-						methodSubstitute = new PolyParameterizedGenericMethodBinding(methodSubstitute);
+					} finally {
+						if (invocationSite instanceof Invocation)
+							((Invocation) invocationSite).registerInferenceContext(methodSubstitute, infCtx18); // keep context so we can finish later
+						else if (invocationSite instanceof ReferenceExpression)
+							((ReferenceExpression) invocationSite).registerInferenceContext(methodSubstitute, infCtx18); // keep context so we can finish later
 					}
-					if (invocationSite instanceof Invocation)
-						((Invocation) invocationSite).registerInferenceContext(methodSubstitute, infCtx18); // keep context so we can finish later
-					else if (invocationSite instanceof ReferenceExpression)
-						((ReferenceExpression) invocationSite).registerInferenceContext(methodSubstitute, infCtx18); // keep context so we can finish later
 					return methodSubstitute; 
 				}
 			}
@@ -742,6 +745,11 @@ public class ParameterizedGenericMethodBinding extends ParameterizedMethodBindin
 	    return this;
 	}
 
+	@Override
+	public boolean isParameterizedGeneric() {
+		return true;
+	}
+
 	/* https://bugs.eclipse.org/bugs/show_bug.cgi?id=347600 && https://bugs.eclipse.org/bugs/show_bug.cgi?id=242159
 	   Sometimes due to recursion/circularity in formal bounds, even *published bounds* fail bound check. We need to
 	   break the circularity/self reference in order not to be overly strict during type equivalence checks.  
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ProblemMethodBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ProblemMethodBinding.java
index f6bb9b5..532bab5 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ProblemMethodBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ProblemMethodBinding.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2014 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -38,17 +38,52 @@ public ProblemMethodBinding(MethodBinding closestMatch, char[] selector, TypeBin
 	if (closestMatch != null && problemReason != ProblemReasons.Ambiguous) {
 		this.declaringClass = closestMatch.declaringClass;
 		this.returnType = closestMatch.returnType;
+		if (problemReason == ProblemReasons.InvocationTypeInferenceFailure) {
+			this.thrownExceptions = closestMatch.thrownExceptions;
+			this.typeVariables = closestMatch.typeVariables;
+			this.modifiers = closestMatch.modifiers;
+			this.tagBits = closestMatch.tagBits;
+		}
 	}
 }
 @Override
+MethodBinding computeSubstitutedMethod(MethodBinding method, LookupEnvironment env) {
+	return this.closestMatch == null ? this : this.closestMatch.computeSubstitutedMethod(method, env);
+}
+@Override
+public MethodBinding findOriginalInheritedMethod(MethodBinding inheritedMethod) {
+	return this.closestMatch == null ? this : this.closestMatch.findOriginalInheritedMethod(inheritedMethod);
+}
+@Override
+public MethodBinding genericMethod() {
+	return this.closestMatch == null ? this : this.closestMatch.genericMethod();
+}
+@Override
+public MethodBinding original() {
+	return this.closestMatch == null ? this : this.closestMatch.original();
+}
+@Override
 public MethodBinding shallowOriginal() {
 	return this.closestMatch == null ? this : this.closestMatch.shallowOriginal();
 }
-/* API
-* Answer the problem id associated with the receiver.
-* NoError if the receiver is a valid binding.
-*/
-
+@Override
+public MethodBinding tiebreakMethod() {
+	return this.closestMatch == null ? this : this.closestMatch.tiebreakMethod();
+}
+@Override
+public boolean hasSubstitutedParameters() {
+	if (this.closestMatch != null)
+		return this.closestMatch.hasSubstitutedParameters();
+	return false;
+}
+@Override
+public boolean isParameterizedGeneric() {
+	return this.closestMatch instanceof ParameterizedGenericMethodBinding;
+}
+/** API
+ * Answer the problem id associated with the receiver.
+ * NoError if the receiver is a valid binding.
+ */
 public final int problemId() {
 	return this.problemReason;
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
index 4c9547a..ade563a 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
@@ -1655,7 +1655,8 @@ public abstract class Scope {
 				MethodBinding methodBinding = (MethodBinding) found.elementAt(i);
 				MethodBinding compatibleMethod = computeCompatibleMethod(methodBinding, argumentTypes, invocationSite);
 				if (compatibleMethod != null) {
-					if (compatibleMethod.isValidBinding()) {
+					if (compatibleMethod.isValidBinding() || compatibleMethod.problemId() == ProblemReasons.InvocationTypeInferenceFailure) {
+						// we need to accept methods with InvocationTypeInferenceFailure, because logically overload resolution happens *before* invocation type inference
 						if (foundSize == 1 && compatibleMethod.canBeSeenBy(receiverType, invocationSite, this)) {
 							// return the single visible match now
 							if (searchForDefaultAbstractMethod)
@@ -1789,8 +1790,8 @@ public abstract class Scope {
 		if (compilerOptions().sourceLevel >= ClassFileConstants.JDK1_5) {
 			for (int i = 0; i < visiblesCount; i++) {
 				MethodBinding candidate = candidates[i];
-				if (candidate instanceof ParameterizedGenericMethodBinding)
-					candidate = ((ParameterizedGenericMethodBinding) candidate).originalMethod;
+				if (candidate.isParameterizedGeneric())
+					candidate = candidate.shallowOriginal();
 				if (candidate.hasSubstitutedParameters()) {
 					for (int j = i + 1; j < visiblesCount; j++) {
 						MethodBinding otherCandidate = candidates[j];
@@ -4626,6 +4627,12 @@ public abstract class Scope {
 	
 	// Version that just answers based on inference kind (at 1.8+) when available.
 	public int parameterCompatibilityLevel(MethodBinding method, TypeBinding[] arguments, InvocationSite site) {
+		if (method.problemId() == ProblemReasons.InvocationTypeInferenceFailure) {
+			// we need to accept methods with InvocationTypeInferenceFailure, because logically overload resolution happens *before* invocation type inference
+			method = ((ProblemMethodBinding)method).closestMatch; // for compatibility checks use the actual method
+			if (method == null)
+				return NOT_COMPATIBLE;
+		}
 		if (compilerOptions().sourceLevel >= ClassFileConstants.JDK1_8 && method instanceof ParameterizedGenericMethodBinding) {
 			int inferenceKind = InferenceContext18.CHECK_UNKNOWN;
 			InferenceContext18 context = null;
@@ -4649,8 +4656,14 @@ public abstract class Scope {
 					if (!argument.isFunctionalType())
 						continue;
 					TypeBinding parameter = InferenceContext18.getParameter(method.parameters, i, context.isVarArgs());
-					if (!argument.isCompatibleWith(parameter, this))
+					if (!argument.isCompatibleWith(parameter, this)) {
+						if (argument.isPolyType()) {
+							parameter = InferenceContext18.getParameter(method.original().parameters, i, context.isVarArgs());
+							if (!((PolyTypeBinding)argument).expression.isPertinentToApplicability(parameter, method))
+								continue;
+						}
 						return NOT_COMPATIBLE;
+					}
 				}
 			}
 			switch (inferenceKind) {

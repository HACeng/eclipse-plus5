commit d043ef6776b1e3fad1bb618496ee2a48a9410e4b
Author: ssankaran <srikanth_sankaran@in.ibm.com>
Date:   Mon Mar 4 20:25:37 2013 +0530

    Fixed Bug 401769 - [1.8][compiler] Explore solutions with better
    performance characteristics than LambdaExpression#copy()

27	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
14	8	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java
74	125	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
17	4	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java
11	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ThrowStatement.java
4	9	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
index f2e8095..ce99510 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
@@ -6065,6 +6065,33 @@ public void test402261c() {
 			"Zork cannot be resolved to a type\n" + 
 			"----------\n");
 }
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=401769, [1.8][compiler] Explore solutions with better performance characteristics than LambdaExpression#copy()
+public void test401769() {
+	this.runNegativeTest(
+			new String[] {
+				"X.java",
+				"interface I {\n" +
+				"	void foo();\n" +
+				"}\n" +
+				"interface J {\n" +
+				"	void foo();\n" +
+				"}\n" +
+				"class X {\n" +
+				"	void g(I i) {}\n" +
+				"	void g(J j) {}\n" +
+				"	int f;\n" +
+				"	{\n" +
+				"		g(() -> f++);\n" +
+				"	}\n" +
+				"}\n",			
+			},
+			"----------\n" + 
+			"1. ERROR in X.java (at line 12)\n" + 
+			"	g(() -> f++);\n" + 
+			"	^\n" + 
+			"The method g(I) is ambiguous for the type X\n" + 
+			"----------\n");
+}
 public static Class testClass() {
 	return NegativeLambdaExpressionsTest.class;
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java
index f6de18a..c73a5df 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java
@@ -50,6 +50,7 @@ public abstract class FunctionalExpression extends Expression implements Problem
 	boolean ignoreFurtherInvestigation;
 	protected ExpressionContext expressionContext = VANILLA_CONTEXT;
 	protected SimpleLookupTable resultExpressions;
+	protected boolean hasIgnoredMandatoryErrors = false;
 	protected CompilationResult compilationResult;
 	protected BlockScope enclosingScope;
 	protected boolean ellipsisArgument;
@@ -233,17 +234,22 @@ public abstract class FunctionalExpression extends Expression implements Problem
 	
 	public void tagAsHavingIgnoredMandatoryErrors(int problemId) {
 		// 15.27.3 requires exception throw related errors to not influence congruence. Also don't abort shape analysis.
-		if (shapeAnalysisComplete()) {
-			switch (problemId) {
-				case IProblem.UnhandledExceptionOnAutoClose:
-				case IProblem.UnhandledExceptionInDefaultConstructor:
-				case IProblem.UnhandledException:
-					return;
-				default: 
+		switch (problemId) {
+			case IProblem.UnhandledExceptionOnAutoClose:
+			case IProblem.UnhandledExceptionInDefaultConstructor:
+			case IProblem.UnhandledException:
+				return;
+			default: 
+				if (shapeAnalysisComplete())
 					throw new IncongruentLambdaException();
-			}
+				this.original().hasIgnoredMandatoryErrors = true;
+				return;
 		}
 	}
+
+	protected FunctionalExpression original() {
+		return this;
+	}
 }
 
 class IncongruentLambdaException extends RuntimeException {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
index 7dc3340..71e635c 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
@@ -49,11 +49,14 @@ public class LambdaExpression extends FunctionalExpression {
 	public Argument [] arguments;
 	public Statement body;
 	public boolean hasParentheses;
-	protected MethodScope scope;
-	protected boolean voidCompatible = true;
-	protected boolean valueCompatible = false;
-	protected boolean shapeAnalysisComplete = false;
-	protected int returnExpressionsTally = 0;
+	private MethodScope scope;
+	private boolean voidCompatible = true;
+	private boolean valueCompatible = false;
+	private boolean shapeAnalysisComplete = false;
+	private boolean returnsValue;
+	private boolean returnsVoid;
+	private boolean throwsException;
+	private LambdaExpression original = this;
 	
 	public LambdaExpression(CompilationResult compilationResult, Argument [] arguments, Statement body) {
 		super(compilationResult);
@@ -61,6 +64,10 @@ public class LambdaExpression extends FunctionalExpression {
 		this.body = body;
 	}
 	
+	protected FunctionalExpression original() {
+		return this.original;
+	}
+	
 	public void generateCode(BlockScope currentScope, CodeStream codeStream, boolean valueRequired) {
 		if (this.ignoreFurtherInvestigation) {
 			return;
@@ -88,63 +95,13 @@ public class LambdaExpression extends FunctionalExpression {
 		
 		this.constant = Constant.NotAConstant;
 		this.enclosingScope = blockScope;
-		this.scope = new MethodScope(blockScope, this, blockScope.methodScope().isStatic);
 		
 		if (this.expectedType == null && this.expressionContext == INVOCATION_CONTEXT) {
-			if (this.body instanceof Block) {
-				// Gather shape information for potential applicability analysis.
-				ASTVisitor visitor = new ASTVisitor() {
-					private boolean valueReturnSeen = false;
-					private boolean voidReturnSeen = false;
-					private boolean throwSeen = false;
-					public boolean visit(ReturnStatement returnStatement, BlockScope dontCare) {
-						if (returnStatement.expression != null) {
-							LambdaExpression.this.returnExpressionsTally++;
-							this.valueReturnSeen = true;
-							LambdaExpression.this.voidCompatible = false;
-							LambdaExpression.this.valueCompatible = !this.voidReturnSeen;
-						} else {
-							this.voidReturnSeen = true;
-							LambdaExpression.this.valueCompatible = false;
-							LambdaExpression.this.voidCompatible = !this.valueReturnSeen;
-						}
-						return false; // should not analyze any nested lambda returns.
-					}
-					public boolean visit(TypeDeclaration declaration, BlockScope dontCare) {
-						return false;  // do not analyze inner local types so as not to confuse returns from there.
-					}
-					public boolean visit(LambdaExpression lambda, BlockScope dontCare) {
-						return LambdaExpression.this == lambda;  // do not analyze any inner lambdas so as not to confuse returns from there.
-					}
-					public boolean visit(ThrowStatement throwStatement, BlockScope dontCare) {
-						this.throwSeen  = true;
-						return false;
-					}
-					public void endVisit(LambdaExpression expression, BlockScope dontCare) {
-						if (LambdaExpression.this == expression) {
-							if (!this.voidReturnSeen && !this.valueReturnSeen && this.throwSeen) {  // () -> { throw new Exception(); } is value compatible.
-								Block block = (Block) LambdaExpression.this.body;
-								final Statement[] statements = block.statements;
-								final int statementsLength = statements == null ? 0 : statements.length;
-								Statement ultimateStatement = statementsLength == 0 ? null : statements[statementsLength - 1];
-								LambdaExpression.this.valueCompatible = ultimateStatement instanceof ThrowStatement;
-								LambdaExpression.this.shapeAnalysisComplete = LambdaExpression.this.valueCompatible;
-							} else {
-								LambdaExpression.this.shapeAnalysisComplete = true;
-							}
-						}
-					}
-				};
-				this.traverse(visitor, blockScope);
-			} else {
-				Expression expression = (Expression) this.body;
-				this.voidCompatible = expression.statementExpression();
-				this.valueCompatible = true;
-				this.returnExpressionsTally = 1;
-				this.shapeAnalysisComplete = true;
-			}	
+			this.resultExpressions = new SimpleLookupTable();
 			return new PolyTypeBinding(this);
-		}
+		} 
+		
+		this.scope = new MethodScope(blockScope, this, blockScope.methodScope().isStatic);
 		super.resolveType(blockScope); // compute & capture interface function descriptor in singleAbstractMethod.
 		
 		final boolean argumentsTypeElided = argumentsTypeElided();
@@ -435,7 +392,7 @@ public class LambdaExpression extends FunctionalExpression {
 	}
 	
 	protected boolean shapeAnalysisComplete() {
-		return this.shapeAnalysisComplete;
+		return this.original.shapeAnalysisComplete;
 	}
 	
 	public boolean isCompatibleWith(final TypeBinding left, final Scope someScope) {
@@ -447,78 +404,46 @@ public class LambdaExpression extends FunctionalExpression {
 		if (sam.parameters.length != this.arguments.length)
 			return false;
 		
-		IErrorHandlingPolicy oldPolicy = this.scope.problemReporter().switchErrorHandlingPolicy(silentErrorHandlingPolicy);
+		if (!this.shapeAnalysisComplete && this.body instanceof Expression) {
+			Expression expression = (Expression) this.body;
+			this.voidCompatible = expression.statementExpression();
+			this.valueCompatible = true;
+			this.shapeAnalysisComplete = true;
+		}
 
+		if (this.shapeAnalysisComplete) {
+			if (squarePegInRoundHole(sam))
+				return false;
+		} 
+
+		IErrorHandlingPolicy oldPolicy = this.enclosingScope.problemReporter().switchErrorHandlingPolicy(silentErrorHandlingPolicy);
+		this.hasIgnoredMandatoryErrors = false;
 		try {
-			if (this.shapeAnalysisComplete) {
-				if (squarePegInRoundHole(sam))
-					return false;
-			} else {
-				LambdaExpression copy = copy();
-				if (copy == null)
-					return false;
-				copy.setExpressionContext(this.expressionContext);
-				copy.setExpectedType(left);
-				copy.resolveType(this.enclosingScope);
-				this.valueCompatible = copy.valueCompatible = copy.doesNotCompleteNormally();
-				this.shapeAnalysisComplete = copy.shapeAnalysisComplete = true;
-				if (squarePegInRoundHole(sam))
-					return false;
-			}
-		
 			final LambdaExpression copy = copy();
 			if (copy == null)
 				return false;
 			copy.setExpressionContext(this.expressionContext);
 			copy.setExpectedType(left);
+			this.resultExpressions.put(left, new Expression[0]);
 			copy.resolveType(this.enclosingScope);
-			
-			if (!argumentsTypeElided()) {
-				for (int i = 0, length = sam.parameters.length; i < length; i++) {
-					TypeBinding argumentType = copy.arguments[i].binding.type;
-					if (sam.parameters[i] != argumentType)
-						return false;
-				}
-			}
-
-			if (this.returnExpressionsTally > 0) {
-				final TypeBinding returnType = sam.returnType;
-				if (this.resultExpressions == null)
-					this.resultExpressions = new SimpleLookupTable(); // gather for more specific analysis later.
-				if (this.body instanceof Block) {
-					ASTVisitor visitor = new ASTVisitor() {
-						Expression [] returnExpressions = new Expression[LambdaExpression.this.returnExpressionsTally];
-						int returnExpressionsCount = 0;
-						public boolean visit(ReturnStatement returnStatement, BlockScope blockScope) {
-							Expression expression = returnStatement.expression;
-							if (expression != null && !expression.isAssignmentCompatible(returnType, blockScope))
-								throw new IncongruentLambdaException();
-							this.returnExpressions[this.returnExpressionsCount++] = expression;
-							return false; // should not analyze any nested lambda returns
-						}
-						public boolean visit(TypeDeclaration declaration, BlockScope dontCare) {
-							return false;  // do not analyze inner local types so as not to confuse returns from there.
-						}
-						public boolean visit(LambdaExpression lambda, BlockScope dontCare) {
-							return LambdaExpression.this == lambda;  // do not analyze any inner lambdas so as not to confuse returns from there.
-						}
-						public void endVisit(Block block, BlockScope blockScope) {
-							if (block == copy.body)
-								LambdaExpression.this.resultExpressions.put(left, this.returnExpressions);
-						}
-					};
-					copy.body.traverse(visitor, copy.scope);
-				} else if (this.body instanceof Expression){
-					Expression expression = (Expression) copy.body;
-					if (!expression.isAssignmentCompatible(returnType, copy.scope))
-						throw new IncongruentLambdaException();
-					this.resultExpressions.put(left, new Expression [] { expression });
+			if (!this.shapeAnalysisComplete) {
+				boolean lambdaIsFubar = this.hasIgnoredMandatoryErrors; // capture now, before doesNotCompleteNormally which runs analyzeCode on lambda body *without* the enclosing context being analyzed 
+				if (!this.returnsVoid && !this.returnsValue && this.throwsException) {  // () -> { throw new Exception(); } is value compatible.
+					Block block = (Block) this.body;
+					final Statement[] statements = block.statements;
+					final int statementsLength = statements == null ? 0 : statements.length;
+					Statement ultimateStatement = statementsLength == 0 ? null : statements[statementsLength - 1];
+					this.valueCompatible = ultimateStatement instanceof ThrowStatement ? true: copy.doesNotCompleteNormally(); 
 				}
+				this.shapeAnalysisComplete = true;
+				if (squarePegInRoundHole(sam) || lambdaIsFubar)
+					return false;
 			}
 		} catch (IncongruentLambdaException e) {
 			return false;
 		} finally {
-			this.scope.problemReporter().switchErrorHandlingPolicy(oldPolicy);
+			this.enclosingScope.problemReporter().switchErrorHandlingPolicy(oldPolicy);
+			this.hasIgnoredMandatoryErrors = false;
 		}
 		return true;
 	}
@@ -584,16 +509,40 @@ public class LambdaExpression extends FunctionalExpression {
 	}
 
 	LambdaExpression copy() {
-		final Parser parser = new Parser(this.scope.problemReporter(), false);
+		final Parser parser = new Parser(this.enclosingScope.problemReporter(), false);
 		final char[] source = this.compilationResult.getCompilationUnit().getContents();
 		LambdaExpression copy =  (LambdaExpression) parser.parseLambdaExpression(source, this.sourceStart, this.sourceEnd - this.sourceStart + 1, 
-										this.scope.referenceCompilationUnit(), false /* record line separators */);
+										this.enclosingScope.referenceCompilationUnit(), false /* record line separators */);
 
-		if (copy != null) { // ==> syntax errors
-			copy.valueCompatible = this.valueCompatible;
-			copy.voidCompatible = this.voidCompatible;
-			copy.shapeAnalysisComplete = this.shapeAnalysisComplete;
+		if (copy != null) { // ==> syntax errors == null
+			copy.original = this;
 		}
 		return copy;
 	}
+
+	public void returnsExpression(Expression expression, TypeBinding resultType) {
+		if (this.expressionContext != INVOCATION_CONTEXT)
+			return;
+		if (expression != null) {
+			this.original.returnsValue = true;
+			this.original.voidCompatible = false;
+			this.original.valueCompatible = !this.original.returnsVoid;
+			if (resultType != null) {
+				Expression [] results = (Expression[]) this.original.resultExpressions.get(this.expectedType);
+				int resultsLength = results.length;
+				System.arraycopy(results, 0, results = new Expression[resultsLength + 1], 0, resultsLength);
+				results[resultsLength] = expression;
+			}
+		} else {
+			this.original.returnsVoid = true;
+			this.original.valueCompatible = false;
+			this.original.voidCompatible = !this.original.returnsValue;
+		}
+	}
+
+	public void throwsException(TypeBinding exceptionType) {
+		if (this.expressionContext != INVOCATION_CONTEXT)
+			return;
+		this.original.throwsException = true;
+	}
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java
index 3ec6b0e..eeb67e6 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReturnStatement.java
@@ -272,8 +272,9 @@ public StringBuffer printStatement(int tab, StringBuffer output){
 public void resolve(BlockScope scope) {
 	MethodScope methodScope = scope.methodScope();
 	MethodBinding methodBinding;
+	LambdaExpression lambda = methodScope.referenceContext instanceof LambdaExpression ? (LambdaExpression) methodScope.referenceContext : null;
 	TypeBinding methodType =
-		(methodScope.referenceContext instanceof LambdaExpression) ? ((LambdaExpression) methodScope.referenceContext).expectedResultType() :
+		lambda != null ? lambda.expectedResultType() :
 		(methodScope.referenceContext instanceof AbstractMethodDeclaration)
 			? ((methodBinding = ((AbstractMethodDeclaration) methodScope.referenceContext).binding) == null
 				? null
@@ -287,10 +288,15 @@ public void resolve(BlockScope scope) {
 	}
 	
 	if (methodType == TypeBinding.VOID) {
-		// the expression should be null
-		if (this.expression == null)
+		// the expression should be null, exceptions exist for lambda expressions.
+		if (this.expression == null) {
+			if (lambda != null)
+				lambda.returnsExpression(null, TypeBinding.VOID);
 			return;
+		}
 		expressionType = this.expression.resolveType(scope);
+		if (lambda != null && !this.implicitReturn)
+			lambda.returnsExpression(this.expression, expressionType);
 		if (this.implicitReturn && (expressionType == TypeBinding.VOID || this.expression.statementExpression()))
 			return;
 		if (expressionType != null)
@@ -298,10 +304,17 @@ public void resolve(BlockScope scope) {
 		return;
 	}
 	if (this.expression == null) {
+		if (lambda != null)
+			lambda.returnsExpression(null,  methodType);
 		if (methodType != null) scope.problemReporter().shouldReturn(methodType, this);
 		return;
 	}
-	if ((expressionType = this.expression.resolveType(scope)) == null) return;
+	
+	expressionType = this.expression.resolveType(scope);
+	if (lambda != null)
+		lambda.returnsExpression(this.expression, expressionType);
+	
+	if (expressionType == null) return;
 	if (expressionType == TypeBinding.VOID) {
 		scope.problemReporter().attemptToReturnVoidValue(this);
 		return;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ThrowStatement.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ThrowStatement.java
index df15cc1..02cf189 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ThrowStatement.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ThrowStatement.java
@@ -1,10 +1,14 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2012 IBM Corporation and others.
+ * Copyright (c) 2000, 2013 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ * 
  * Contributors:
  *     IBM Corporation - initial API and implementation
  *     Stephan Herrmann - Contributions for
@@ -20,6 +24,7 @@ import org.eclipse.jdt.internal.compiler.codegen.CodeStream;
 import org.eclipse.jdt.internal.compiler.flow.FlowContext;
 import org.eclipse.jdt.internal.compiler.flow.FlowInfo;
 import org.eclipse.jdt.internal.compiler.lookup.BlockScope;
+import org.eclipse.jdt.internal.compiler.lookup.MethodScope;
 import org.eclipse.jdt.internal.compiler.lookup.TypeBinding;
 import org.eclipse.jdt.internal.compiler.lookup.TypeIds;
 
@@ -67,6 +72,11 @@ public StringBuffer printStatement(int indent, StringBuffer output) {
 
 public void resolve(BlockScope scope) {
 	this.exceptionType = this.exception.resolveType(scope);
+	MethodScope methodScope = scope.methodScope();
+	LambdaExpression lambda = methodScope.referenceContext instanceof LambdaExpression ? (LambdaExpression) methodScope.referenceContext : null;
+	if (lambda != null) {
+		lambda.throwsException(this.exceptionType);
+	}
 	if (this.exceptionType != null && this.exceptionType.isValidBinding()) {
 		if (this.exceptionType == TypeBinding.NULL) {
 			if (scope.compilerOptions().complianceLevel <= ClassFileConstants.JDK1_3){
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java
index 3be33ab..ac26c01 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java
@@ -1003,7 +1003,7 @@ private int valueLambdaNestDepth = -1;
 private int stateStackLengthStack[] = new int[0];
 private boolean parsingJava8Plus;
 protected int unstackedAct = ERROR_ACTION;
-private boolean dontResumeOnSyntaxError = false;
+private boolean haltOnSyntaxError = false;
 
 protected Parser () {
 	// Caveat Emptor: For inheritance purposes and then only in very special needs. Only minimal state is initialized !
@@ -11392,13 +11392,8 @@ public ASTNode[] parseClassBodyDeclarations(char[] source, int offset, int lengt
 }
 
 public Expression parseLambdaExpression(char[] source, int offset, int length, CompilationUnitDeclaration unit, boolean recordLineSeparators) {
-	boolean resumptionStatus = this.dontResumeOnSyntaxError;
-	this.dontResumeOnSyntaxError = true;
-	try {
-		return parseExpression(source, offset, length, unit, recordLineSeparators);
-	} finally {
-		this.dontResumeOnSyntaxError = resumptionStatus;
-	}
+	this.haltOnSyntaxError = true; // unexposed/unshared object, no threading concerns.
+	return parseExpression(source, offset, length, unit, recordLineSeparators);
 }
 
 public Expression parseExpression(char[] source, int offset, int length, CompilationUnitDeclaration unit, boolean recordLineSeparators) {
@@ -12130,7 +12125,7 @@ protected boolean resumeAfterRecovery() {
 	}
 }
 protected boolean resumeOnSyntaxError() {
-	if (this.dontResumeOnSyntaxError)
+	if (this.haltOnSyntaxError)
 		return false;
 	/* request recovery initialization */
 	if (this.currentElement == null){

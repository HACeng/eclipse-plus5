commit cedc325f2a935c759cba1f1e5e6c7415bee87a4f
Author: Jayaprakash Arthanareeswaran <jarthana@in.ibm.com>
Date:   Tue Aug 21 11:58:36 2012 +0530

    Fix for bug 383908: [1.8][compiler] Explicit this parameter interferes
    with method overloading/resolution.

63	20	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java
29	0	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java
32	31	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java
1	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java
12	15	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java
4	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java
19	6	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java
11	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java
index 6adb42d..be3137f 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java
@@ -1082,9 +1082,9 @@ public class NegativeTypeAnnotationTest extends AbstractRegressionTest {
 						"            InnerMost(Outer.Inner this) {}\n" +
 						"            InnerMost(Outer.Inner Outer.Inner.this, int i, float f) {}\n" +
 						"            InnerMost(Outer Outer.this, float f) {}\n" +
-						"            InnerMost(Outer.Inner<K,V>.InnerMost<T> Outer.Inner.InnerMost.this) {}\n" +
+						"            InnerMost(Outer.Inner<K,V>.InnerMost<T> Outer.Inner.InnerMost.this, Object obj) {}\n" +
 						"            InnerMost(Inner<K,V> Outer.Inner.InnerMost.this, int i) {}\n" +
-						"            InnerMost(Outer.Inner<K, V> this, float f) {}\n" +
+						"            InnerMost(Outer.Inner<K, V> this, float f, int i) {}\n" +
 						"            InnerMost(Outer.Inner<K,V> Inner.this, long l) {}\n" +
 						"        }\n" +
 						"    }\n" +
@@ -1136,12 +1136,12 @@ public class NegativeTypeAnnotationTest extends AbstractRegressionTest {
 						"The explicit 'this' parameter is expected to be qualified with Outer.Inner\n" + 
 						"----------\n" + 
 						"10. ERROR in Outer.java (at line 9)\n" + 
-						"	InnerMost(Outer.Inner<K,V>.InnerMost<T> Outer.Inner.InnerMost.this) {}\n" + 
+						"	InnerMost(Outer.Inner<K,V>.InnerMost<T> Outer.Inner.InnerMost.this, Object obj) {}\n" + 
 						"	          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
 						"The declared type of the explicit 'this' parameter is expected to be Outer.Inner<K,V>\n" + 
 						"----------\n" + 
 						"11. ERROR in Outer.java (at line 9)\n" + 
-						"	InnerMost(Outer.Inner<K,V>.InnerMost<T> Outer.Inner.InnerMost.this) {}\n" + 
+						"	InnerMost(Outer.Inner<K,V>.InnerMost<T> Outer.Inner.InnerMost.this, Object obj) {}\n" + 
 						"	                                                              ^^^^\n" + 
 						"The explicit 'this' parameter is expected to be qualified with Outer.Inner\n" + 
 						"----------\n" + 
@@ -1151,7 +1151,7 @@ public class NegativeTypeAnnotationTest extends AbstractRegressionTest {
 						"The explicit 'this' parameter is expected to be qualified with Outer.Inner\n" + 
 						"----------\n" + 
 						"13. ERROR in Outer.java (at line 11)\n" + 
-						"	InnerMost(Outer.Inner<K, V> this, float f) {}\n" + 
+						"	InnerMost(Outer.Inner<K, V> this, float f, int i) {}\n" + 
 						"	                            ^^^^\n" + 
 						"The explicit 'this' parameter is expected to be qualified with Outer.Inner\n" + 
 						"----------\n");
@@ -1166,11 +1166,11 @@ public class NegativeTypeAnnotationTest extends AbstractRegressionTest {
 						"        class InnerMost<T> {\n" +
 						"            public void foo(Outer Outer.this) {}\n" +
 						"            public void foo(Inner<K,V> Inner.this, int i) {}\n" +
-						"            public void foo(InnerMost this) {}\n" +
+						"            public void foo(InnerMost this, int i, int j) {}\n" +
 						"            public void foo(Inner.InnerMost<T> this, Object obj) {}\n" +
-						"            public void foo(InnerMost<T> this, int i) {}\n" +
+						"            public void foo(InnerMost<T> this, float f) {}\n" +
 						"            public void foo(Inner<K,V>.InnerMost<T> this, long l) {}\n" +
-						"            public void foo(Outer.Inner<K,V>.InnerMost<T> this, float f) {}\n" +
+						"            public void foo(Outer.Inner<K,V>.InnerMost<T> this, float f, float ff) {}\n" +
 						"            public void foo(InnerMost<T> Outer.Inner.InnerMost.this, int i, float f) {}\n" +
 						"        }\n" +
 						"    }\n" +
@@ -1197,12 +1197,12 @@ public class NegativeTypeAnnotationTest extends AbstractRegressionTest {
 						"The explicit 'this' parameter is expected to be qualified with Outer.Inner.InnerMost\n" + 
 						"----------\n" + 
 						"5. WARNING in Outer.java (at line 6)\n" + 
-						"	public void foo(InnerMost this) {}\n" + 
+						"	public void foo(InnerMost this, int i, int j) {}\n" + 
 						"	                ^^^^^^^^^\n" + 
 						"Outer.Inner.InnerMost is a raw type. References to generic type Outer.Inner<K,V>.InnerMost<T> should be parameterized\n" + 
 						"----------\n" + 
 						"6. ERROR in Outer.java (at line 6)\n" + 
-						"	public void foo(InnerMost this) {}\n" + 
+						"	public void foo(InnerMost this, int i, int j) {}\n" + 
 						"	                ^^^^^^^^^\n" + 
 						"The declared type of the explicit 'this' parameter is expected to be Outer.Inner<K,V>.InnerMost<T>\n" + 
 						"----------\n" + 
@@ -1222,6 +1222,8 @@ public class NegativeTypeAnnotationTest extends AbstractRegressionTest {
 		this.runNegativeTest(
 				new String[] {
 						"Outer.java",
+						"import java.lang.annotation.Target;\n" + 
+						"import static java.lang.annotation.ElementType.*;\n" + 
 						"public class Outer {\n" +
 						"    class Inner<K,V> {\n" +
 						"		public Inner(@Missing Outer Outer.this) {}\n" +
@@ -1233,7 +1235,7 @@ public class NegativeTypeAnnotationTest extends AbstractRegressionTest {
 						"            }\n" +
 						"            void bar(int i) {\n" +
 						"                class Local {\n" +
-						"                    public int hashCode(Local this) { return 0; }\n" +
+						"                    public int hashCode(Local this, int k) { return 0; }\n" +
 						"                    public int hashCode(Outer.Local this) { return 0; }\n" +
 						"                }\n" +
 						"            }\n" +
@@ -1248,37 +1250,78 @@ public class NegativeTypeAnnotationTest extends AbstractRegressionTest {
 						"interface AnonymousInner {\n" +
 						"    public void foobar(AnonymousInner this);\n" +
 						"}\n" +
+						"@Target(TYPE_USE)\n" + 
 						"@interface Marker {}"},
 							"----------\n" + 
-							"1. ERROR in Outer.java (at line 3)\n" + 
+							"1. ERROR in Outer.java (at line 5)\n" + 
 							"	public Inner(@Missing Outer Outer.this) {}\n" + 
 							"	              ^^^^^^^\n" + 
 							"Missing cannot be resolved to a type\n" + 
 							"----------\n" + 
-							"2. ERROR in Outer.java (at line 7)\n" + 
+							"2. ERROR in Outer.java (at line 9)\n" + 
 							"	public void foobar(AnonymousInner this) {}\n" + 
 							"	                                  ^^^^\n" + 
-							"Explicit 'this' parameter is allowed only in instance methods of non-anonymous classes and inner class constructors\n" + 
+							"Explicit \'this\' parameter is allowed only in instance methods of non-anonymous classes and inner class constructors\n" + 
 							"----------\n" + 
-							"3. ERROR in Outer.java (at line 13)\n" + 
+							"3. ERROR in Outer.java (at line 15)\n" + 
 							"	public int hashCode(Outer.Local this) { return 0; }\n" + 
 							"	                    ^^^^^^^^^^^\n" + 
 							"Outer.Local cannot be resolved to a type\n" + 
 							"----------\n" + 
-							"4. ERROR in Outer.java (at line 19)\n" + 
+							"4. ERROR in Outer.java (at line 21)\n" + 
 							"	public StaticNested(@Marker Outer.StaticNested Outer.StaticNested.this) {}\n" + 
-							"	                                                                  ^^^^\n" + 
-							"Explicit 'this' parameter is allowed only in instance methods of non-anonymous classes and inner class constructors\n" + 
+							"	                    ^^^^^^^\n" + 
+							"The annotation @Marker is disallowed for this location\n" + 
 							"----------\n" + 
 							"5. ERROR in Outer.java (at line 21)\n" + 
+							"	public StaticNested(@Marker Outer.StaticNested Outer.StaticNested.this) {}\n" + 
+							"	                                                                  ^^^^\n" + 
+							"Explicit \'this\' parameter is allowed only in instance methods of non-anonymous classes and inner class constructors\n" + 
+							"----------\n" + 
+							"6. ERROR in Outer.java (at line 23)\n" + 
+							"	public static void foo(@Marker Outer this) {}\n" + 
+							"	                       ^^^^^^^\n" + 
+							"The annotation @Marker is disallowed for this location\n" + 
+							"----------\n" + 
+							"7. ERROR in Outer.java (at line 23)\n" + 
 							"	public static void foo(@Marker Outer this) {}\n" + 
 							"	                                     ^^^^\n" + 
-							"Explicit 'this' parameter is allowed only in instance methods of non-anonymous classes and inner class constructors\n" + 
+							"Explicit \'this\' parameter is allowed only in instance methods of non-anonymous classes and inner class constructors\n" + 
 							"----------\n" + 
-							"6. ERROR in Outer.java (at line 22)\n" + 
+							"8. ERROR in Outer.java (at line 24)\n" + 
 							"	public void foo(@Missing Outer this, int i) {}\n" + 
 							"	                 ^^^^^^^\n" + 
 							"Missing cannot be resolved to a type\n" + 
+							"----------\n" + 
+							"9. ERROR in Outer.java (at line 29)\n" + 
+							"	@Target(TYPE_USE)\n" + 
+							"	        ^^^^^^^^\n" + 
+							"TYPE_USE cannot be resolved to a variable\n" + 
 							"----------\n");
 	}
+	public void test0383908() {
+		this.runNegativeTest(
+				new String[]{"X.java",
+				"public class X { \n" +
+				"	void foo(X this) {}\n" +
+				"   void foo() {}\n" +
+				"}\n" +
+				"class Y {\n" +
+				"	void foo(Y this) {}\n" +
+				"	public static void main(String[] args) {\n" +
+				"		new Y().foo();\n" +
+				"	}\n" +
+				"}"}, 
+				"----------\n" + 
+				"1. ERROR in X.java (at line 2)\n" + 
+				"	void foo(X this) {}\n" + 
+				"	     ^^^^^^^^^^^\n" + 
+				"Duplicate method foo() in type X\n" + 
+				"----------\n" + 
+				"2. ERROR in X.java (at line 3)\n" + 
+				"	void foo() {}\n" + 
+				"	     ^^^^^\n" + 
+				"Duplicate method foo() in type X\n" + 
+				"----------\n");
+	}
 }
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java
index 316b1c7..f397671 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchTests.java
@@ -4464,4 +4464,33 @@ public void testBug160323() throws CoreException {
 	// Should have same types with these 2 searches
 	assertEquals("Found types sounds not to be correct", requestor.toString(), collector.toString());
 }
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=383908
+public void testBug383908() throws CoreException {
+	try {
+		String fileContent = "package p;\n" +
+								"public class X {\n" +
+								"  public void foobar(X this, String str) {\n" +
+								"  }\n" +
+								"}";
+		createJavaProject("P", new String[] {"src"}, new String[0], "bin");
+		createFolder("/P/src/p");
+		createFile("/P/src/p/X.java", fileContent);
+
+		IType type = getCompilationUnit("P", "src", "p", "X.java").getType("X");
+		IMethod[] methods = type.getMethods();
+		search(
+				methods[0],
+				DECLARATIONS,
+				SearchEngine.createJavaSearchScope(new IJavaElement[] {type}),
+				this.resultCollector);
+
+		assertSearchResults(
+				"src/p/X.java void p.X.foobar(String) [foobar]",
+				this.resultCollector);
+
+	} finally {
+		deleteProject("P");
+	}
+}
+
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java
index fd36459..9df127c 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java
@@ -47,6 +47,7 @@ public abstract class AbstractMethodDeclaration
 	public int modifiersSourceStart;
 	public Annotation[] annotations;
 	// jsr 308
+	public Receiver receiver;
 	public Annotation[] receiverAnnotations;
 	public Argument[] arguments;
 	public TypeReference[] thrownExceptions;
@@ -431,9 +432,12 @@ public abstract class AbstractMethodDeclaration
 		}
 
 		printReturnType(0, output).append(this.selector).append('(');
+		if (this.receiver != null) {
+			this.receiver.print(0, output);
+		}
 		if (this.arguments != null) {
 			for (int i = 0; i < this.arguments.length; i++) {
-				if (i > 0) output.append(", "); //$NON-NLS-1$
+				if (i > 0 || this.receiver != null) output.append(", "); //$NON-NLS-1$
 				this.arguments[i].print(0, output);
 			}
 		}
@@ -505,40 +509,37 @@ public abstract class AbstractMethodDeclaration
 	}
 
 	public void resolveReceiver() {
-		if (this.arguments != null && this.arguments.length > 0) {
-			if (this.arguments[0].isReceiver()) {
-				Receiver receiver = (Receiver) this.arguments[0];
-
-				TypeBinding resolvedReceiverType = receiver.type.resolvedType;
-				if (this.binding == null || resolvedReceiverType == null || !resolvedReceiverType.isValidBinding())
-					return;
-
-				ReferenceBinding declaringClass = this.binding.declaringClass;
-				/* neither static methods nor methods in anonymous types can have explicit 'this' */
-				if (this.isStatic() || declaringClass.isAnonymousType()) {
-					this.scope.problemReporter().disallowedThisParameter(receiver);
-					return; // No need to do further validation
-				}
+		if (this.receiver == null) return;
 
-				ReferenceBinding enclosingReceiver = this.scope.enclosingReceiverType();
-				if (this.isConstructor()) {
-					/* Only non static member types or local types can declare explicit 'this' params in constructors */
-					if (declaringClass.isStatic()
-							|| (declaringClass.tagBits & (TagBits.IsLocalType | TagBits.IsMemberType)) == 0) { /* neither member nor local type */
-						this.scope.problemReporter().disallowedThisParameter(receiver);
-						return; // No need to do further validation
-					}
-					enclosingReceiver = enclosingReceiver.enclosingType();
-				}
+		TypeBinding resolvedReceiverType = this.receiver.type.resolvedType;
+		if (this.binding == null || resolvedReceiverType == null || !resolvedReceiverType.isValidBinding()) {
+			return;
+		}
 
-				if (enclosingReceiver != resolvedReceiverType) {
-					this.scope.problemReporter().illegalTypeForExplicitThis(receiver, enclosingReceiver);
-				}
+		ReferenceBinding declaringClass = this.binding.declaringClass;
+		/* neither static methods nor methods in anonymous types can have explicit 'this' */
+		if (this.isStatic() || declaringClass.isAnonymousType()) {
+			this.scope.problemReporter().disallowedThisParameter(this.receiver);
+			return; // No need to do further validation
+		}
 
-				if ((receiver.qualifyingName == null) ? this.isConstructor() : !isQualifierValidForType(receiver.qualifyingName.getName(), enclosingReceiver)) {
-					this.scope.problemReporter().illegalQualifierForExplicitThis(receiver, enclosingReceiver);					
-				}
+		ReferenceBinding enclosingReceiver = this.scope.enclosingReceiverType();
+		if (this.isConstructor()) {
+			/* Only non static member types or local types can declare explicit 'this' params in constructors */
+			if (declaringClass.isStatic()
+					|| (declaringClass.tagBits & (TagBits.IsLocalType | TagBits.IsMemberType)) == 0) { /* neither member nor local type */
+				this.scope.problemReporter().disallowedThisParameter(this.receiver);
+				return; // No need to do further validation
 			}
+			enclosingReceiver = enclosingReceiver.enclosingType();
+		}
+
+		if (enclosingReceiver != resolvedReceiverType) {
+			this.scope.problemReporter().illegalTypeForExplicitThis(this.receiver, enclosingReceiver);
+		}
+
+		if ((this.receiver.qualifyingName == null) ? this.isConstructor() : !isQualifierValidForType(this.receiver.qualifyingName.getName(), enclosingReceiver)) {
+			this.scope.problemReporter().illegalQualifierForExplicitThis(this.receiver, enclosingReceiver);					
 		}
 	}
 	private boolean isQualifierValidForType(char[][] tokens, TypeBinding enclosingType) {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java
index ce25e57..2834864 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodBinding.java
@@ -34,6 +34,7 @@ public class MethodBinding extends Binding {
 	public char[] selector;
 	public TypeBinding returnType;
 	public TypeBinding[] parameters;
+	public TypeBinding receiver;  // JSR308 - explicit this parameter
 	public ReferenceBinding[] thrownExceptions;
 	public ReferenceBinding declaringClass;
 	public TypeVariableBinding[] typeVariables = Binding.NO_TYPE_VARIABLES;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java
index 8b5f820..2a0520d 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java
@@ -353,27 +353,24 @@ MethodBinding createMethod(AbstractMethodDeclaration method) {
 		if (argument.isVarArgs() && sourceLevel >= ClassFileConstants.JDK1_5)
 			method.binding.modifiers |= ClassFileConstants.AccVarargs;
 		if (CharOperation.equals(argument.name, ConstantPool.This)) {
-			if (argLength != 0 || sourceLevel <= ClassFileConstants.JDK1_7) {
-				problemReporter().illegalThis(argument, method, sourceLevel);
-			}
-			if (argument.annotations != null) {
-				method.receiverAnnotations = argument.annotations;
-				method.bits |= ASTNode.HasTypeAnnotations;
-			}
+			problemReporter().illegalThisDeclaration(argument);
 		}
 		while (--argLength >= 0) {
 			argument = argTypes[argLength];
 			if (argument.isVarArgs() && sourceLevel >= ClassFileConstants.JDK1_5)
 				problemReporter().illegalVararg(argument, method);
 			if (CharOperation.equals(argument.name, ConstantPool.This)) {
-				if (argLength != 0 || sourceLevel <= ClassFileConstants.JDK1_7) {
-					problemReporter().illegalThis(argument, method, sourceLevel);
-				}
-				if (argument.annotations != null) {
-					method.receiverAnnotations = argument.annotations;
-					method.bits |= ASTNode.HasTypeAnnotations;
-				}
-			}	
+				problemReporter().illegalThisDeclaration(argument);
+			}
+		}
+	}
+	if (method.receiver != null) {
+		if (sourceLevel <= ClassFileConstants.JDK1_7) {
+			problemReporter().illegalSourceLevelForThis(method.receiver);
+		}
+		if (method.receiver.annotations != null) {
+			method.receiverAnnotations = method.receiver.annotations;
+			method.bits |= ASTNode.HasTypeAnnotations;
 		}
 	}
 
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java
index b6ec8bf..3f40a93 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/SourceTypeBinding.java
@@ -1504,6 +1504,10 @@ public MethodBinding resolveTypesFor(MethodBinding method) {
 		if (count < size)
 			System.arraycopy(method.thrownExceptions, 0, method.thrownExceptions = new ReferenceBinding[count], 0, count);
 	}
+	
+	if (methodDecl.receiver != null) {
+		method.receiver = methodDecl.receiver.type.resolveType(methodDecl.scope, true /* check bounds*/);
+	}
 	final boolean reportUnavoidableGenericTypeProblems = this.scope.compilerOptions().reportUnavoidableGenericTypeProblems;
 	boolean foundArgProblem = false;
 	Argument[] arguments = methodDecl.arguments;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java
index aa7d315..aaface4 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java
@@ -5222,12 +5222,25 @@ protected void consumeMethodHeaderRightParen() {
 	md.sourceEnd = 	this.rParenPos;
 	//arguments
 	if (length != 0) {
-		System.arraycopy(
-			this.astStack,
-			this.astPtr + 1,
-			md.arguments = new Argument[length],
-			0,
-			length);
+		Argument arg = (Argument) this.astStack[this.astPtr + 1];
+		if (arg.isReceiver()) {
+			md.receiver = (Receiver) arg;
+			if (length > 1) {
+				System.arraycopy(
+					this.astStack,
+					this.astPtr + 2,
+					md.arguments = new Argument[length - 1],
+					0,
+					length - 1);
+			}
+		} else {
+			System.arraycopy(
+					this.astStack,
+					this.astPtr + 1,
+					md.arguments = new Argument[length],
+					0,
+					length);
+		}
 	}
 	md.bodyStart = this.rParenPos+1;
 	this.listLength = 0; // reset this.listLength after having read all parameters
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
index 5aaf570..755ce41 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
@@ -2672,10 +2672,19 @@ public void illegalVararg(Argument argType, AbstractMethodDeclaration methodDecl
 		argType.sourceStart,
 		argType.sourceEnd);
 }
-public void illegalThis(Argument argument, AbstractMethodDeclaration method, long sourceLevel) {
+public void illegalThisDeclaration(Argument argument) {
 	String[] arguments = NoArgument;
 	this.handle(
-		sourceLevel <= ClassFileConstants.JDK1_7 ?  IProblem.ExplicitThisParameterNotBelow18 : IProblem.IllegalDeclarationOfThisParameter,
+		IProblem.IllegalDeclarationOfThisParameter,
+		arguments,
+		arguments,
+		argument.sourceStart,
+		argument.sourceEnd);
+}
+public void illegalSourceLevelForThis(Argument argument) {
+	String[] arguments = NoArgument;
+	this.handle(
+		IProblem.ExplicitThisParameterNotBelow18,
 		arguments,
 		arguments,
 		argument.sourceStart,

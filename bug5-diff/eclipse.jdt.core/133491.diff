commit a15857c78be035e31c0bb57b42d7b9ffa74cef8c
Author: David Audel <daudel>
Date:   Wed Apr 19 13:33:37 2006 +0000

    HEAD - bug 133491

39	0	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests_1_5.java
3	1	org.eclipse.jdt.core/buildnotes_jdt-core.html
34	25	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
5	0	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
3	3	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Engine.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests_1_5.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests_1_5.java
index 5748546..7e49f1f 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests_1_5.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CompletionTests_1_5.java
@@ -8620,4 +8620,43 @@ public void test0284() throws JavaModelException {
 			"zzz2[METHOD_REF]{zzz2(), Ltest.Test;, (Ljava.lang.Object;)V, zzz2, (t), " + (R_DEFAULT + R_INTERESTING + R_CASE + R_NON_RESTRICTED) + "}",
 			requestor.getResults());
 }
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=133491
+public void test0285() throws JavaModelException {
+	this.workingCopies = new ICompilationUnit[3];
+	this.workingCopies[0] = getWorkingCopy(
+		"/Completion/src/other/Test.java",
+		"package other;\n"+
+		"import pack.*;\n"+
+		"public class Test {\n"+
+		"  @MyAnnotation(ZZZN\n"+
+		"  public void hello() {\n"+
+		"  }\n"+
+		"}\n");
+	
+	this.workingCopies[1] = getWorkingCopy(
+		"/Completion/src/pack/ZZZNeedsImportEnum.java",
+		"package pack;\n"+
+		"public enum ZZZNeedsImportEnum {\n"+
+		"  HELLO;\n"+
+		"}\n");
+	
+	this.workingCopies[2] = getWorkingCopy(
+		"/Completion/src/pack/MyAnnotation.java",
+		"package pack;\n"+
+		"public @interface MyAnnotation {\n"+
+		"  ZZZNeedsImportEnum value();\n"+
+		"  boolean value2() default false;\n"+
+		"}\n");
+
+	CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true);
+	
+	String str = this.workingCopies[0].getSource();
+	String completeBehind = "ZZZN";
+	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
+	this.workingCopies[0].codeComplete(cursorLocation, requestor, this.wcOwner);
+
+	assertResults(
+			"ZZZNeedsImportEnum[TYPE_REF]{ZZZNeedsImportEnum, pack, Lpack.ZZZNeedsImportEnum;, null, null, " + (R_DEFAULT + R_INTERESTING + R_CASE + R_EXACT_EXPECTED_TYPE + R_UNQUALIFIED + R_NON_RESTRICTED) + "}",
+			requestor.getResults());
+}
 }
diff --git a/org.eclipse.jdt.core/buildnotes_jdt-core.html b/org.eclipse.jdt.core/buildnotes_jdt-core.html
index c45108c..f0673c5 100644
--- a/org.eclipse.jdt.core/buildnotes_jdt-core.html
+++ b/org.eclipse.jdt.core/buildnotes_jdt-core.html
@@ -55,7 +55,9 @@ What's new in this drop</h2>
 </ul>
 
 <h3>Problem Reports Fixed</h3>
-<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=137298">137298</a>
+<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=133491">133491</a>
+Missing code assist in annotation
+<br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=137298">137298</a>
 [compiler] Local variables not reported as not been initialized when more than 64 locals are defined
 <br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=136972">136972</a>
 [reconciler] Error in static init blok with inner classes
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
index f655065..000ef49 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
@@ -111,6 +111,7 @@ public final class CompletionEngine
 	boolean assistNodeIsAnnotation;
 	boolean assistNodeIsConstructor;
 	int  assistNodeInJavadoc = 0;
+	boolean assistNodeCanBeSingleMemberAnnotation = false;
 	
 	IJavaProject javaProject;
 	CompletionParser parser;
@@ -253,6 +254,7 @@ public final class CompletionEngine
 			Map settings,
 			IJavaProject javaProject) {
 		super(settings);
+		this.compilerOptions.storeAnnotations = true;
 		this.javaProject = javaProject;
 		this.requestor = requestor;
 		this.nameEnvironment = nameEnvironment;
@@ -1203,31 +1205,22 @@ public final class CompletionEngine
 					findAnnotationReference(annotation.type, scope);
 				}
 			} else {
-				MemberValuePair[] memberValuePairs = annotation.memberValuePairs();
 				if (!this.requestor.isIgnored(CompletionProposal.ANNOTATION_ATTRIBUTE_REF)) {
 					this.findAnnotationAttributes(this.completionToken, annotation.memberValuePairs(), (ReferenceBinding)annotation.resolvedType);
 				}
-				if (memberValuePairs == null || memberValuePairs.length == 0) {
-					if (annotation.resolvedType instanceof ReferenceBinding) {
-						MethodBinding[] methodBindings =
-							((ReferenceBinding)annotation.resolvedType).availableMethods();
-						if (methodBindings != null &&
-								methodBindings.length == 1 &&
-								CharOperation.equals(methodBindings[0].selector, VALUE)) {
-							if (this.expectedTypesPtr > -1 && this.expectedTypes[0].isAnnotationType()) {
-								findTypesAndPackages(this.completionToken, scope);
-							} else {
-								findVariablesAndMethods(
-									this.completionToken,
-									scope,
-									FakeInvocationSite,
-									scope,
-									insideTypeAnnotation,
-									true);
-								// can be the start of a qualified type name
-								findTypesAndPackages(this.completionToken, scope);
-							}
-						}
+				if (this.assistNodeCanBeSingleMemberAnnotation) {
+					if (this.expectedTypesPtr > -1 && this.expectedTypes[0].isAnnotationType()) {
+						findTypesAndPackages(this.completionToken, scope);
+					} else {
+						findVariablesAndMethods(
+							this.completionToken,
+							scope,
+							FakeInvocationSite,
+							scope,
+							insideTypeAnnotation,
+							true);
+						// can be the start of a qualified type name
+						findTypesAndPackages(this.completionToken, scope);
 					}
 				}
 			}
@@ -5880,6 +5873,12 @@ public final class CompletionEngine
 
 		return this.parser;
 	}
+	
+	protected int getSourceTypeConverterFlag() {
+		return SourceTypeConverter.FIELD_AND_METHOD // need field and methods
+				| SourceTypeConverter.MEMBER_TYPE // need member types
+				| SourceTypeConverter.FIELD_INITIALIZATION; // need field initializer for annotations default value 
+	}
 
 	protected void reset() {
 
@@ -6100,10 +6099,20 @@ public final class CompletionEngine
 				if(annotation.resolvedType instanceof ReferenceBinding) {
 					MethodBinding[] methodBindings =
 						((ReferenceBinding)annotation.resolvedType).availableMethods();
-					if(methodBindings != null &&
-							methodBindings.length == 1 &&
+					if (methodBindings != null &&
+							methodBindings.length > 0 &&
 							CharOperation.equals(methodBindings[0].selector, VALUE)) {
-						addExpectedType(methodBindings[0].returnType, scope);
+						boolean canBeSingleMemberAnnotation = true;
+						done : for (int i = 1; i < methodBindings.length; i++) {
+							if(methodBindings[i].getDefaultValue() == null) {
+								canBeSingleMemberAnnotation = false;
+								break done;
+							}
+						}
+						if (canBeSingleMemberAnnotation) {
+							this.assistNodeCanBeSingleMemberAnnotation = canBeSingleMemberAnnotation;
+							addExpectedType(methodBindings[0].returnType, scope);
+						}
 					}
 				}
 			}
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
index a00ebbd..be530ec 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
@@ -532,6 +532,11 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 	public AssistParser getParser() {
 		return this.parser;
 	}
+	
+	protected int getSourceTypeConverterFlag() {
+		return SourceTypeConverter.FIELD_AND_METHOD // need field and methods
+				| SourceTypeConverter.MEMBER_TYPE; // need member types
+	}
 
 	/*
 	 * Returns whether the given binding is a local/anonymous reference binding, or if its declaring class is
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Engine.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Engine.java
index d9e4132..28e3cad 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Engine.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Engine.java
@@ -82,9 +82,7 @@ public abstract class Engine implements ITypeRequestor {
 		CompilationUnitDeclaration unit =
 			SourceTypeConverter.buildCompilationUnit(
 				sourceTypes,//sourceTypes[0] is always toplevel here
-				SourceTypeConverter.FIELD_AND_METHOD // need field and methods
-				| SourceTypeConverter.MEMBER_TYPE, // need member types
-				// no need for field initialization
+				getSourceTypeConverterFlag(),
 				lookupEnvironment.problemReporter,
 				result);
 
@@ -96,6 +94,8 @@ public abstract class Engine implements ITypeRequestor {
 
 	public abstract AssistParser getParser();
 	
+	protected abstract int getSourceTypeConverterFlag();
+	
 	public void initializeImportCaches() {
 		ImportBinding[] importBindings = this.unitScope.imports;
 		int length = importBindings == null ? 0 : importBindings.length;
commit 87311dbca895b8fec29b894c95fd1dc13225e0e2
Author: David Audel <daudel>
Date:   Mon Apr 24 15:04:29 2006 +0000

    HEAD - bug 133491 (better fix)

1	8	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
0	5	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
3	3	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Engine.java
6	3	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java
2	9	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceAnnotationMethodInfo.java
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
index d63f6d0..d50a843 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
@@ -254,7 +254,6 @@ public final class CompletionEngine
 			Map settings,
 			IJavaProject javaProject) {
 		super(settings);
-		this.compilerOptions.storeAnnotations = true;
 		this.javaProject = javaProject;
 		this.requestor = requestor;
 		this.nameEnvironment = nameEnvironment;
@@ -5873,12 +5872,6 @@ public final class CompletionEngine
 
 		return this.parser;
 	}
-	
-	protected int getSourceTypeConverterFlag() {
-		return SourceTypeConverter.FIELD_AND_METHOD // need field and methods
-				| SourceTypeConverter.MEMBER_TYPE // need member types
-				| SourceTypeConverter.FIELD_INITIALIZATION; // need field initializer for annotations default value 
-	}
 
 	protected void reset() {
 
@@ -6104,7 +6097,7 @@ public final class CompletionEngine
 							CharOperation.equals(methodBindings[0].selector, VALUE)) {
 						boolean canBeSingleMemberAnnotation = true;
 						done : for (int i = 1; i < methodBindings.length; i++) {
-							if(methodBindings[i].getDefaultValue() == null) {
+							if((methodBindings[i].modifiers & ClassFileConstants.AccAnnotationDefault) == 0) {
 								canBeSingleMemberAnnotation = false;
 								break done;
 							}
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
index be530ec..a00ebbd 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/SelectionEngine.java
@@ -532,11 +532,6 @@ public final class SelectionEngine extends Engine implements ISearchRequestor {
 	public AssistParser getParser() {
 		return this.parser;
 	}
-	
-	protected int getSourceTypeConverterFlag() {
-		return SourceTypeConverter.FIELD_AND_METHOD // need field and methods
-				| SourceTypeConverter.MEMBER_TYPE; // need member types
-	}
 
 	/*
 	 * Returns whether the given binding is a local/anonymous reference binding, or if its declaring class is
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Engine.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Engine.java
index 28e3cad..d9e4132 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Engine.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/impl/Engine.java
@@ -82,7 +82,9 @@ public abstract class Engine implements ITypeRequestor {
 		CompilationUnitDeclaration unit =
 			SourceTypeConverter.buildCompilationUnit(
 				sourceTypes,//sourceTypes[0] is always toplevel here
-				getSourceTypeConverterFlag(),
+				SourceTypeConverter.FIELD_AND_METHOD // need field and methods
+				| SourceTypeConverter.MEMBER_TYPE, // need member types
+				// no need for field initialization
 				lookupEnvironment.problemReporter,
 				result);
 
@@ -94,8 +96,6 @@ public abstract class Engine implements ITypeRequestor {
 
 	public abstract AssistParser getParser();
 	
-	protected abstract int getSourceTypeConverterFlag();
-	
 	public void initializeImportCaches() {
 		ImportBinding[] importBindings = this.unitScope.imports;
 		int length = importBindings == null ? 0 : importBindings.length;
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java
index 1fea7e3..1ceb639 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/compiler/parser/SourceTypeConverter.java
@@ -308,16 +308,19 @@ public class SourceTypeConverter {
 				AnnotationMethodDeclaration annotationMethodDeclaration = new AnnotationMethodDeclaration(compilationResult);
 
 				/* conversion of default value */
+				SourceAnnotationMethodInfo annotationMethodInfo = (SourceAnnotationMethodInfo) methodInfo;
+				boolean hasDefaultValue = annotationMethodInfo.defaultValueStart != -1 || annotationMethodInfo.defaultValueEnd != -1;
 				if ((this.flags & FIELD_INITIALIZATION) != 0) {
-					char[] defaultValueSource = ((SourceAnnotationMethodInfo) methodInfo).getDefaultValueSource(getSource());
-					if (defaultValueSource != null) {
+					if (hasDefaultValue) {
+						char[] defaultValueSource = CharOperation.subarray(getSource(), annotationMethodInfo.defaultValueStart, annotationMethodInfo.defaultValueEnd+1);
 						Expression expression =  parseMemberValue(defaultValueSource);
 						if (expression != null) {
 							annotationMethodDeclaration.defaultValue = expression;
-							modifiers |= ClassFileConstants.AccAnnotationDefault;
 						}
 					}
 				}
+				if (hasDefaultValue)
+					modifiers |= ClassFileConstants.AccAnnotationDefault;
 				decl = annotationMethodDeclaration;
 			} else {
 				decl = new MethodDeclaration(compilationResult);
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceAnnotationMethodInfo.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceAnnotationMethodInfo.java
index 6bed80c..396f475 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceAnnotationMethodInfo.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SourceAnnotationMethodInfo.java
@@ -10,8 +10,6 @@
  *******************************************************************************/
 package org.eclipse.jdt.internal.core;
 
-import org.eclipse.jdt.core.compiler.CharOperation;
-
 /*
  * Element info for annotation method from source.
  */
@@ -22,16 +20,11 @@ public class SourceAnnotationMethodInfo extends SourceMethodInfo {
 	 * These are {-1, -1} if the method is an annotation method with no default value.
 	 * Otherwise these are the start and end (inclusive) of the expression representing the default value.
 	 */
-	protected int defaultValueStart;
-	protected int defaultValueEnd;
+ public int defaultValueStart;
+ public int defaultValueEnd;
 
 	public boolean isAnnotationMethod() {
 		return true;
 	}
 	
-	public char[] getDefaultValueSource(char[] cuSource) {
-		if (this.defaultValueStart == -1 && this.defaultValueEnd == -1) 
-			return null;
-		return CharOperation.subarray(cuSource, this.defaultValueStart, this.defaultValueEnd+1);
-	}
 }

commit 528d8fc589253148b12ff615e989162fcd5beabc
Author: Stephan Herrmann <stephan.herrmann@berlin.de>
Date:   Tue Feb 4 23:47:33 2014 +0100

    Bug 425183 - [1.8][inference] make CaptureBinding18 safe
    - genericTypeSignature()

15	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java
25	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding18.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java
index 6a0ac94..e5d5104 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericsRegressionTest_1_8.java
@@ -1869,4 +1869,19 @@ public void testBug427223() {
 			"}\n"
 		});
 }
+public void testBug425183_comment8() {
+	// similar to what triggered the NPE, but it never did trigger
+	runConformTest(
+		new String[] {
+			"X.java",
+			"public class X {\n" +
+			"    public static void main(String... args) {\n" + 
+			"        java.util.Comparator.reverseOrder().thenComparingLong(X::toLong);\n" +
+			"        System.out.println(\"ok\");\n" + 
+			"    }\n" +
+			"    static <T> long toLong(T in) { return 0L; }\n" +
+			"}\n"
+		},
+		"ok");
+}
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding18.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding18.java
index 0861bf8..625af73 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding18.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding18.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2013 GK Software AG.
+ * Copyright (c) 2013, 2014 GK Software AG.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -14,6 +14,8 @@
  *******************************************************************************/
 package org.eclipse.jdt.internal.compiler.lookup;
 
+import org.eclipse.jdt.core.compiler.CharOperation;
+
 /**
  * Capture-like type variable introduced during 1.8 type inference.
  */
@@ -209,6 +211,28 @@ public class CaptureBinding18 extends CaptureBinding {
 	}
 
 	int recursionLevel = 0; // used to give a hint at recursive types without going into infinity
+
+	public char[] genericTypeSignature() {
+		// since we have no wildcard, we combine the logic from CaptureBinding plus WildcardBinding here:
+		if (this.genericTypeSignature == null) {
+			char[] boundSignature;
+			try {
+				if (this.recursionLevel++ > 0 || this.firstBound == null) {
+					boundSignature = TypeConstants.WILDCARD_STAR;
+				} else if (this.upperBounds != null) {
+					boundSignature = CharOperation.concat(TypeConstants.WILDCARD_PLUS, this.firstBound.genericTypeSignature());
+				} else if (this.lowerBound != null) {
+					boundSignature = CharOperation.concat(TypeConstants.WILDCARD_MINUS, this.lowerBound.genericTypeSignature());
+				} else {
+					boundSignature = TypeConstants.WILDCARD_STAR;
+				}
+				this.genericTypeSignature = CharOperation.concat(TypeConstants.WILDCARD_CAPTURE, boundSignature);
+			} finally {
+				this.recursionLevel--;
+			}
+		}
+		return this.genericTypeSignature;
+	}
 	
 	public char[] readableName() {
 		if (this.lowerBound == null && this.firstBound != null) {
commit 1f1c7c285f7f6d962c03df0c90855f08aed5d7d3
Author: Stephan Herrmann <stephan.herrmann@berlin.de>
Date:   Thu Feb 27 20:10:00 2014 +0100

    Bug 425183 - [1.8][inference] make CaptureBinding18 safe

51	18	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
14	3	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding18.java
6	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java
2	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeConstants.java
14	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/Sorting.java
58	3	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyParser.java
21	2	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyResolver.java
8	0	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/KeyToSignature.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
index cb65da0..e0c2326 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
@@ -11,6 +11,8 @@
  * 
  * Contributors:
  *     IBM Corporation - initial API and implementation
+ *     Stephan Herrmann - Contribution for
+ *								Bug 425183 - [1.8][inference] make CaptureBinding18 safe
  *******************************************************************************/
 package org.eclipse.jdt.core.tests.dom;
 
@@ -19,26 +21,11 @@ import java.util.List;
 import junit.framework.Test;
 
 import org.eclipse.jdt.core.dom.*;
+import org.eclipse.jdt.core.BindingKey;
 import org.eclipse.jdt.core.ICompilationUnit;
+import org.eclipse.jdt.core.IJavaElement;
+import org.eclipse.jdt.core.IMethod;
 import org.eclipse.jdt.core.JavaModelException;
-import org.eclipse.jdt.core.dom.AST;
-import org.eclipse.jdt.core.dom.ASTNode;
-import org.eclipse.jdt.core.dom.AnnotatableType;
-import org.eclipse.jdt.core.dom.ArrayCreation;
-import org.eclipse.jdt.core.dom.ArrayType;
-import org.eclipse.jdt.core.dom.CompilationUnit;
-import org.eclipse.jdt.core.dom.Dimension;
-import org.eclipse.jdt.core.dom.Expression;
-import org.eclipse.jdt.core.dom.IMethodBinding;
-import org.eclipse.jdt.core.dom.ITypeBinding;
-import org.eclipse.jdt.core.dom.LambdaExpression;
-import org.eclipse.jdt.core.dom.MethodDeclaration;
-import org.eclipse.jdt.core.dom.SimpleType;
-import org.eclipse.jdt.core.dom.SingleVariableDeclaration;
-import org.eclipse.jdt.core.dom.Type;
-import org.eclipse.jdt.core.dom.TypeDeclaration;
-import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
-import org.eclipse.jdt.core.dom.VariableDeclarationStatement;
 
 public class ASTConverter18Test extends ConverterTestSetup {
 
@@ -4296,4 +4283,50 @@ public class ASTConverter18Test extends ConverterTestSetup {
 		ITypeBinding returnType = functionalInterfaceMethod.getReturnType();
 		assertEquals("Y", returnType.getName());
 	}
+
+// round-trip for binding keys of CaptureBinding18:
+public void testBug425183a() throws JavaModelException {
+	String contents = 
+			"interface Comparator<T> {\n" +
+			"    public static <T extends Comparable<? super T>> Comparator<T> naturalOrder() { return null; }\n" +
+			"}\n" + 
+			"public class Bug425183a {\n" +
+			"    @SuppressWarnings(\"unchecked\")\n" + 
+			"	<T> void test() {\n" + 
+			"		Comparator<? super T> comparator = (Comparator<? super T>) Comparator.naturalOrder();\n" +
+			"		System.out.println(\"OK\");\n" + 
+			"	}\n" +
+			"	public static void main(String[] args) {\n" +
+			"		new Bug425183a().test();\n" +
+			"	}\n" +
+			"}\n";
+	
+	this.workingCopy = getWorkingCopy("/Converter18/src/Bug425183a.java", true);
+	ASTNode node = buildAST(contents, this.workingCopy);
+	assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, node.getNodeType());
+	CompilationUnit compilationUnit = (CompilationUnit) node;
+	assertProblemsSize(compilationUnit, 0);
+	
+	String selection = "naturalOrder";
+	int start = contents.lastIndexOf(selection);
+	int length = selection.length();
+
+	IJavaElement[] elements = this.workingCopy.codeSelect(start, length);
+	assertElementsEqual(
+		"Unexpected elements",
+		"naturalOrder() {key=LBug425183a~Comparator<>;.naturalOrder<T::Ljava/lang/Comparable<-TT;>;>()LComparator<TT;>;%<^{267#0};>} [in Comparator [in [Working copy] Bug425183a.java [in <default> [in src [in Converter18]]]]]",
+		elements,
+		true
+	);
+	IMethod method = (IMethod)elements[0];
+	String[] keys = new String[] { method.getKey() };
+	BindingRequestor requestor = new BindingRequestor();
+	resolveASTs(new ICompilationUnit[] { this.workingCopy } , keys, requestor, getJavaProject("Converter18"), null);
+	assertBindingsEqual(
+			keys[0],
+			requestor.getBindings(keys));
+	
+	// assert that KeyToSignature doesn't throw AIOOBE, the result containing '!*' is a workaround for now, see https://bugs.eclipse.org/429264
+	assertEquals("wrong signature", "<T::Ljava.lang.Comparable<-TT;>;>()LComparator<!*>;", new BindingKey(method.getKey()).toSignature());
+}
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding18.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding18.java
index 6b484df..d72cda5 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding18.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding18.java
@@ -24,8 +24,8 @@ public class CaptureBinding18 extends CaptureBinding {
 	TypeBinding[] upperBounds;
 	private char[] originalName;
 
-	public CaptureBinding18(ReferenceBinding contextType, char[] sourceName, char[] originalName, int captureID, LookupEnvironment environment) {
-		super(contextType, sourceName, 0, captureID, environment);
+	public CaptureBinding18(ReferenceBinding contextType, char[] sourceName, char[] originalName, int position, int captureID, LookupEnvironment environment) {
+		super(contextType, sourceName, position, captureID, environment);
 		this.originalName = originalName;
 	}
 	
@@ -72,7 +72,7 @@ public class CaptureBinding18 extends CaptureBinding {
 	}
 
 	public TypeBinding clone(TypeBinding enclosingType) {
-		return new CaptureBinding18(this.sourceType, this.sourceName, this.originalName, this.captureID, this.environment);
+		return new CaptureBinding18(this.sourceType, this.sourceName, this.originalName, this.position, this.captureID, this.environment);
 	}
 
 	public MethodBinding[] getMethods(char[] selector) {
@@ -290,4 +290,15 @@ public class CaptureBinding18 extends CaptureBinding {
 	public TypeBinding uncapture(Scope scope) {
 		return this;
 	}
+	@Override
+	public char[] computeUniqueKey(boolean isLeaf) {
+		StringBuffer buffer = new StringBuffer();
+		buffer.append(TypeConstants.CAPTURE18);
+		buffer.append('{').append(this.position).append('#').append(this.captureID).append('}');
+		buffer.append(';');
+		int length = buffer.length();
+		char[] uniqueKey = new char[length];
+		buffer.getChars(0, length, uniqueKey, 0);
+		return uniqueKey;
+	}
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java
index 5157bef..9049879 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceContext18.java
@@ -37,6 +37,7 @@ import org.eclipse.jdt.internal.compiler.ast.NullAnnotationMatching;
 import org.eclipse.jdt.internal.compiler.ast.ReferenceExpression;
 import org.eclipse.jdt.internal.compiler.ast.Statement;
 import org.eclipse.jdt.internal.compiler.ast.Wildcard;
+import org.eclipse.jdt.internal.compiler.util.Sorting;
 
 /**
  * Main class for new type inference as per JLS8 sect 18.
@@ -908,6 +909,7 @@ public class InferenceContext18 {
 	 * @throws InferenceFailureException 
 	 */
 	private /*@Nullable*/ BoundSet resolve(InferenceVariable[] toResolve) throws InferenceFailureException {
+		this.captureId = 0;
 		// NOTE: 18.5.2 ... 
 		// "(While it was necessary to demonstrate that the inference variables in B1 could be resolved
 		//   in order to establish applicability, the resulting instantiations are not considered part of B1.)
@@ -965,6 +967,7 @@ public class InferenceContext18 {
 						tmpBoundSet = prevBoundSet;// clean-up for second attempt
 					}
 					// Otherwise, a second attempt is made...
+					Sorting.sortInferenceVariables(variables); // ensure stability of capture IDs
 					final CaptureBinding18[] zs = new CaptureBinding18[numVars];
 					for (int j = 0; j < numVars; j++)
 						zs[j] = freshCapture(variables[j]);
@@ -1032,13 +1035,14 @@ public class InferenceContext18 {
 		return tmpBoundSet;
 	}
 	
-	// === FIXME(stephan): this capture business is a bit drafty: ===
 	int captureId = 0;
 	
 	/** For 18.4: "Let Z1, ..., Zn be fresh type variables" use capture bindings. */
 	private CaptureBinding18 freshCapture(InferenceVariable variable) {
 		char[] sourceName = CharOperation.concat("Z-".toCharArray(), variable.sourceName); //$NON-NLS-1$
-		return new CaptureBinding18(this.scope.enclosingSourceType(), sourceName, variable.typeParameter.shortReadableName(), this.captureId++, this.environment);
+		int position = this.currentInvocation != null ? this.currentInvocation.sourceStart() : 0;
+		return new CaptureBinding18(this.scope.enclosingSourceType(), sourceName, variable.typeParameter.shortReadableName(),
+						position, this.captureId++, this.environment);
 	}
 	// === ===
 	
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeConstants.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeConstants.java
index 4f426a9..a4551ac 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeConstants.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeConstants.java
@@ -19,6 +19,7 @@
  *								bug 382069 - [null] Make the null analysis consider JUnit's assertNotNull similarly to assertions
  *								Bug 405569 - Resource leak check false positive when using DbUtils.closeQuietly
  *								Bug 427199 - [1.8][resource] avoid resource leak warnings on Streams that have no resource
+ *								Bug 425183 - [1.8][inference] make CaptureBinding18 safe
  *    Jesper S Moller - Contributions for
  *								Bug 405066 - [1.8][compiler][codegen] Implement code generation infrastructure for JSR335
  *								Bug 412153 - [1.8][compiler] Check validity of annotations which may be repeatable
@@ -68,6 +69,7 @@ public interface TypeConstants {
     char[] WILDCARD_CAPTURE_NAME_PREFIX = "capture#".toCharArray(); //$NON-NLS-1$
     char[] WILDCARD_CAPTURE_NAME_SUFFIX = "-of ".toCharArray(); //$NON-NLS-1$
 	char[] WILDCARD_CAPTURE = { '!' };
+	char[] CAPTURE18 = { '^' };
 	char[] BYTE = "byte".toCharArray(); //$NON-NLS-1$
 	char[] SHORT = "short".toCharArray(); //$NON-NLS-1$
 	char[] INT = "int".toCharArray(); //$NON-NLS-1$
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/Sorting.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/Sorting.java
index 1934d00..7acbd79 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/Sorting.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/util/Sorting.java
@@ -14,6 +14,10 @@
  **********************************************************************/
 package org.eclipse.jdt.internal.compiler.util;
 
+import java.util.Arrays;
+import java.util.Comparator;
+
+import org.eclipse.jdt.internal.compiler.lookup.InferenceVariable;
 import org.eclipse.jdt.internal.compiler.lookup.MethodBinding;
 import org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding;
 import org.eclipse.jdt.internal.compiler.lookup.TypeBinding;
@@ -108,4 +112,14 @@ public class Sorting {
 				copy[idx++] = methods[i];
 		return copy;
 	}
+
+	/** Sort inference variables by rank. */
+	public static void sortInferenceVariables(InferenceVariable[] variables) {
+		Arrays.sort(variables, new Comparator<InferenceVariable>() {
+			@Override
+			public int compare(InferenceVariable iv1, InferenceVariable iv2) {
+				return iv1.rank - iv2.rank;
+			}
+		});		
+	}
 }
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyParser.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyParser.java
index aacd3e1..961c747 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyParser.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyParser.java
@@ -1,12 +1,18 @@
 /*******************************************************************************
- * Copyright (c) 2005, 2013 IBM Corporation and others.
+ * Copyright (c) 2005, 2014 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *     IBM Corporation - initial API and implementation
+ *     Stephan Herrmann - Contribution for
+ *     							Bug 425183 - [1.8][inference] make CaptureBinding18 safe
  *******************************************************************************/
 package org.eclipse.jdt.internal.core.util;
 
@@ -29,8 +35,9 @@ public class BindingKeyParser {
 		static final int FLAGS = 6;
 		static final int WILDCARD = 7;
 		static final int CAPTURE = 8;
-		static final int BASE_TYPE = 9;
-		static final int END = 10;
+		static final int CAPTURE18 = 9;
+		static final int BASE_TYPE = 10;
+		static final int END = 11;
 
 		static final int START = -1;
 
@@ -61,6 +68,12 @@ public class BindingKeyParser {
 				&& this.source[this.index] == '!';
 		}
 
+		boolean isAtCapture18Start() {
+			return
+				this.index < this.source.length
+				&& this.source[this.index] == '^';
+		}
+
 		boolean isAtFieldOrMethodStart() {
 			return
 				this.index < this.source.length
@@ -305,6 +318,10 @@ public class BindingKeyParser {
 						this.index++;
 						this.token = CAPTURE;
 						return this.token;
+					case '^':
+						this.index++;
+						this.token = CAPTURE18;
+						return this.token;
 				}
 				this.index++;
 			}
@@ -377,6 +394,12 @@ public class BindingKeyParser {
 			this.start = this.index;
 		}
 
+		void skipCapture18Delim() {
+			if (this.index < this.source.length && this.source[this.index] == '#')
+				this.index++;
+			this.start = this.index;
+		}
+
 		public String toString() {
 			StringBuffer buffer = new StringBuffer();
 			switch (this.token) {
@@ -410,6 +433,9 @@ public class BindingKeyParser {
 				case CAPTURE:
 					buffer.append("CAPTURE: "); //$NON-NLS-1$
 					break;
+				case CAPTURE18:
+					buffer.append("CAPTURE18: "); //$NON-NLS-1$
+					break;
 				case BASE_TYPE:
 					buffer.append("BASE TYPE: "); //$NON-NLS-1$
 					break;
@@ -473,6 +499,10 @@ public class BindingKeyParser {
 		// default is to do nothing
 	}
 
+	public void consumeCapture18ID(int id, int position) {
+		// default is to do nothing		
+	}
+
 	public void consumeException() {
 		// default is to do nothing
 	}
@@ -673,6 +703,11 @@ public class BindingKeyParser {
 			this.hasTypeName = false;
 			return;
 		}
+		if (this.scanner.isAtCapture18Start()) {
+			parseCapture18();
+			this.hasTypeName = false;
+			return;
+		}
 		switch(this.scanner.nextToken()) {
 			case Scanner.PACKAGE:
 				this.keyStart = 0;
@@ -835,6 +870,26 @@ public class BindingKeyParser {
 		this.scanner.skipTypeEnd();
 	}
 
+	private void parseCapture18() {
+		// syntax: ^{int#int}
+		if (this.scanner.nextToken() != Scanner.CAPTURE18) return;
+
+		this.scanner.skipRankStart(); // {
+		this.scanner.skipRank();
+		char[] source = this.scanner.getTokenSource();
+		int position = Integer.parseInt(new String(source));
+
+		this.scanner.skipCapture18Delim(); // #
+		this.scanner.skipRank();
+		source = this.scanner.getTokenSource();
+		int id = Integer.parseInt(new String(source));
+		this.scanner.skipRankEnd(); // }
+		
+		consumeCapture18ID(id, position);
+		
+		this.scanner.skipTypeEnd();
+	}
+
 	private void parseCaptureWildcard() {
 		/*
 		 * The call parser.parse() might have a side-effect on the current token type
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyResolver.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyResolver.java
index 0e82708..4507d07 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyResolver.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/BindingKeyResolver.java
@@ -1,12 +1,18 @@
 /*******************************************************************************
- * Copyright (c) 2005, 2013 IBM Corporation and others.
+ * Copyright (c) 2005, 2014 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *     IBM Corporation - initial API and implementation
+ *     Stephan Herrmann - Contribution for
+ *     							Bug 425183 - [1.8][inference] make CaptureBinding18 safe
  *******************************************************************************/
 package org.eclipse.jdt.internal.core.util;
 
@@ -32,6 +38,7 @@ import org.eclipse.jdt.internal.compiler.lookup.ArrayBinding;
 import org.eclipse.jdt.internal.compiler.lookup.Binding;
 import org.eclipse.jdt.internal.compiler.lookup.BlockScope;
 import org.eclipse.jdt.internal.compiler.lookup.CaptureBinding;
+import org.eclipse.jdt.internal.compiler.lookup.CaptureBinding18;
 import org.eclipse.jdt.internal.compiler.lookup.FieldBinding;
 import org.eclipse.jdt.internal.compiler.lookup.LocalTypeBinding;
 import org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding;
@@ -138,10 +145,18 @@ public class BindingKeyResolver extends BindingKeyParser {
 		}
 	}
 
+	public void consumeCapture18ID(int id, int position) {
+		consumeAnyCapture(id, position);
+	}
+
 	public void consumeCapture(final int position) {
+		consumeAnyCapture(-1, position);
+	}
+	public void consumeAnyCapture(final int capture18id, final int position) {
 		CompilationUnitDeclaration outerParsedUnit = this.outerMostParsedUnit == null ? this.parsedUnit : this.outerMostParsedUnit;
 		if (outerParsedUnit == null) return;
-		final Binding wildcardBinding = ((BindingKeyResolver) this.types.get(0)).compilerBinding;
+		final Binding wildcardBinding = this.types.size() > 0  // 0 may happen for CaptureBinding18
+				? ((BindingKeyResolver) this.types.get(0)).compilerBinding : null;
 		class CaptureFinder extends ASTVisitor {
 			CaptureBinding capture;
 			boolean checkType(TypeBinding binding) {
@@ -174,6 +189,10 @@ public class BindingKeyResolver extends BindingKeyParser {
 						if (binding.isCapture()) {
 							CaptureBinding captureBinding = (CaptureBinding) binding;
 							if (captureBinding.position == position && captureBinding.wildcard == wildcardBinding) {
+								if (captureBinding instanceof CaptureBinding18) {
+									if (((CaptureBinding18)captureBinding).captureID != capture18id)
+										return false;
+								}
 								this.capture = captureBinding;
 								return true;
 							}
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/KeyToSignature.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/KeyToSignature.java
index 3d419ad..ebbc201 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/KeyToSignature.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/KeyToSignature.java
@@ -7,6 +7,8 @@
  *
  * Contributors:
  *     IBM Corporation - initial API and implementation
+ *	   Stephan Herrmann - Contribution for
+ *								Bug 425183 - [1.8][inference] make CaptureBinding18 safe
  *******************************************************************************/
 package org.eclipse.jdt.internal.core.util;
 
@@ -62,6 +64,12 @@ public class KeyToSignature extends BindingKeyParser {
 		this.signature.append(((KeyToSignature) this.arguments.get(0)).signature);
 	}
 
+	@Override
+	public void consumeCapture18ID(int id, int position) {
+		// see https://bugs.eclipse.org/429264
+		this.signature.append("!*"); // pretend a 'capture-of ?' //$NON-NLS-1$
+	}
+
 	public void consumeLocalType(char[] uniqueKey) {
 		this.signature = new StringBuffer();
 		// remove trailing semi-colon as it is added later in comsumeType()

commit fbf658958d1eb066a4b5c16fdea253c3d8d5019c
Author: ssankaran <srikanth_sankaran@in.ibm.com>
Date:   Tue Feb 26 23:51:24 2013 +0530

    Fix for Bug 401790 and bug 401789

162	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
8	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java
9	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExplicitConstructorCall.java
65	3	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java
10	69	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
17	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java
64	25	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
5	5	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java
9	0	org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetAllocationExpression.java
9	0	org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetMessageSend.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
index 3ad2850..7763e35 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
@@ -5284,6 +5284,168 @@ this.runNegativeTest(
 				"})\n" + 
 				"----------\n");
 }
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=401789, [1.8][compiler] Enable support for method/constructor references in non-overloaded method calls.
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=401790, Follow up of bug 401610, explicit constructor calls and allocation expressions needs updates too.
+public void test401789_401790() {
+this.runNegativeTest(
+		new String[] {
+				"X.java",
+				"interface I {\n" +
+				"	Integer foo(X x);\n" +
+				"}\n" +
+				"public class X {\n" +
+				"	int foo(I i) { return 10;}\n" +
+				"	class Y {\n" +
+				"		Y (I i) {}\n" +
+				"		Y() {\n" +
+				"			this(X::goo);\n" +
+				"		}\n" +
+				"	}\n" +
+				"	X(I i) {}\n" +
+				"	X() {\n" +
+				"		this((x) -> { return 10;});\n" +
+				"	}\n" +
+				"	int goo() { return 0;}\n" +
+				"	{\n" +
+				"		foo(X::goo);\n" +
+				"		new X((x)->{ return 10;});\n" +
+				"		new X((x)->{ return 10;}).new Y((x) -> { return 0;});\n" +
+				"		new X((x)->{ return 10;}) {};\n" +
+				"	}\n" +
+				"}\n" +
+				"class Z extends X {\n" +
+				"	Z() {\n" +
+				"		super(X::goo);\n" +
+				"	}\n" +
+				"	Z(int i) {\n" +
+				"		super (x -> 10);\n" +
+				"	}\n" +
+				"   Zork z;\n" +
+				"}\n"
+				},
+				"----------\n" + 
+				"1. ERROR in X.java (at line 31)\n" + 
+				"	Zork z;\n" + 
+				"	^^^^\n" + 
+				"Zork cannot be resolved to a type\n" + 
+				"----------\n");
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=401789, [1.8][compiler] Enable support for method/constructor references in non-overloaded method calls.
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=401790, Follow up of bug 401610, explicit constructor calls and allocation expressions needs updates too.
+public void test401789_401790a() {
+this.runNegativeTest(
+		new String[] {
+				"X.java",
+				"interface I {\n" +
+				"	String foo(X x);\n" +
+				"}\n" +
+				"public class X {\n" +
+				"	int foo(I i) { return 10;}\n" +
+				"	class Y {\n" +
+				"		Y (I i) {}\n" +
+				"		Y() {\n" +
+				"			this(X::goo);\n" +
+				"		}\n" +
+				"	}\n" +
+				"	X(I i) {}\n" +
+				"	X() {\n" +
+				"		this((x) -> { return 10;});\n" +
+				"	}\n" +
+				"	int goo() { return 0;}\n" +
+				"	{\n" +
+				"		foo(X::goo);\n" +
+				"		new X((x)->{ return 10;});\n" +
+				"		new X((x)->{ return 10;}).new Y((x) -> { return 0;});\n" +
+				"		new X((x)->{ return 10;}) {};\n" +
+				"	}\n" +
+				"}\n" +
+				"class Z extends X {\n" +
+				"	Z() {\n" +
+				"		super(X::goo);\n" +
+				"	}\n" +
+				"	Z(int i) {\n" +
+				"		super (x -> 10);\n" +
+				"	}\n" +
+				"   Zork z;\n" +
+				"}\n"
+				},
+				"----------\n" + 
+				"1. ERROR in X.java (at line 9)\n" + 
+				"	this(X::goo);\n" + 
+				"	^^^^^^^^^^^^^\n" + 
+				"The constructor X.Y(X::goo) is undefined\n" + 
+				"----------\n" + 
+				"2. ERROR in X.java (at line 9)\n" + 
+				"	this(X::goo);\n" + 
+				"	     ^^^^^^\n" + 
+				"The type of goo() from the type X is int, this is incompatible with the descriptor\'s return type: String\n" + 
+				"----------\n" + 
+				"3. ERROR in X.java (at line 14)\n" + 
+				"	this((x) -> { return 10;});\n" + 
+				"	^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
+				"The constructor X((<no type> x) -> {\n" + 
+				"  return 10;\n" + 
+				"}) is undefined\n" + 
+				"----------\n" + 
+				"4. ERROR in X.java (at line 18)\n" + 
+				"	foo(X::goo);\n" + 
+				"	^^^\n" + 
+				"The method foo(I) in the type X is not applicable for the arguments (X::goo)\n" + 
+				"----------\n" + 
+				"5. ERROR in X.java (at line 18)\n" + 
+				"	foo(X::goo);\n" + 
+				"	    ^^^^^^\n" + 
+				"The type of goo() from the type X is int, this is incompatible with the descriptor\'s return type: String\n" + 
+				"----------\n" + 
+				"6. ERROR in X.java (at line 19)\n" + 
+				"	new X((x)->{ return 10;});\n" + 
+				"	^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
+				"The constructor X((<no type> x) -> {\n" + 
+				"  return 10;\n" + 
+				"}) is undefined\n" + 
+				"----------\n" + 
+				"7. ERROR in X.java (at line 20)\n" + 
+				"	new X((x)->{ return 10;}).new Y((x) -> { return 0;});\n" + 
+				"	^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
+				"The constructor X((<no type> x) -> {\n" + 
+				"  return 10;\n" + 
+				"}) is undefined\n" + 
+				"----------\n" + 
+				"8. ERROR in X.java (at line 20)\n" + 
+				"	new X((x)->{ return 10;}).new Y((x) -> { return 0;});\n" + 
+				"	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
+				"The constructor X.Y((<no type> x) -> {\n" + 
+				"  return 0;\n" + 
+				"}) is undefined\n" + 
+				"----------\n" + 
+				"9. ERROR in X.java (at line 21)\n" + 
+				"	new X((x)->{ return 10;}) {};\n" + 
+				"	^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
+				"The constructor X((<no type> x) -> {\n" + 
+				"  return 10;\n" + 
+				"}) is undefined\n" + 
+				"----------\n" + 
+				"10. ERROR in X.java (at line 26)\n" + 
+				"	super(X::goo);\n" + 
+				"	^^^^^^^^^^^^^^\n" + 
+				"The constructor X(X::goo) is undefined\n" + 
+				"----------\n" + 
+				"11. ERROR in X.java (at line 26)\n" + 
+				"	super(X::goo);\n" + 
+				"	      ^^^^^^\n" + 
+				"The type of goo() from the type X is int, this is incompatible with the descriptor\'s return type: String\n" + 
+				"----------\n" + 
+				"12. ERROR in X.java (at line 29)\n" + 
+				"	super (x -> 10);\n" + 
+				"	^^^^^^^^^^^^^^^^\n" + 
+				"The constructor X((<no type> x) -> 10) is undefined\n" + 
+				"----------\n" + 
+				"13. ERROR in X.java (at line 31)\n" + 
+				"	Zork z;\n" + 
+				"	^^^^\n" + 
+				"Zork cannot be resolved to a type\n" + 
+				"----------\n");
+}
 public static Class testClass() {
 	return NegativeLambdaExpressionsTest.class;
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java
index 1a6166b..287ef00 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AllocationExpression.java
@@ -424,6 +424,14 @@ public TypeBinding resolveType(BlockScope scope) {
 		scope.problemReporter().invalidConstructor(this, this.binding);
 		return this.resolvedType;
 	}
+	for (int i = 0, length = this.arguments == null ? 0 : this.arguments.length; i < length; i++) {
+		Expression argument = this.arguments[i];
+		if (argumentTypes[i] instanceof PolyTypeBinding) {
+			argument.setExpressionContext(INVOCATION_CONTEXT);
+			argument.setExpectedType(this.binding.parameters[i]);
+			argumentTypes[i] = argument.resolveType(scope);
+		}
+	}
 	if ((this.binding.tagBits & TagBits.HasMissingType) != 0) {
 		scope.problemReporter().missingTypeInConstructor(this, this.binding);
 	}
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExplicitConstructorCall.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExplicitConstructorCall.java
index 6705d9b..7524584 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExplicitConstructorCall.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ExplicitConstructorCall.java
@@ -29,6 +29,7 @@ import org.eclipse.jdt.internal.compiler.lookup.InvocationSite;
 import org.eclipse.jdt.internal.compiler.lookup.LocalTypeBinding;
 import org.eclipse.jdt.internal.compiler.lookup.MethodBinding;
 import org.eclipse.jdt.internal.compiler.lookup.MethodScope;
+import org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding;
 import org.eclipse.jdt.internal.compiler.lookup.ProblemMethodBinding;
 import org.eclipse.jdt.internal.compiler.lookup.RawTypeBinding;
 import org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding;
@@ -409,6 +410,14 @@ public class ExplicitConstructorCall extends Statement implements InvocationSite
 				return;
 			}
 			if ((this.binding = scope.getConstructor(receiverType, argumentTypes, this)).isValidBinding()) {
+				for (int i = 0, length = this.arguments == null ? 0 : this.arguments.length; i < length; i++) {
+					Expression argument = this.arguments[i];
+					if (argumentTypes[i] instanceof PolyTypeBinding) {
+						argument.setExpressionContext(INVOCATION_CONTEXT);
+						argument.setExpectedType(this.binding.parameters[i]);
+						argumentTypes[i] = argument.resolveType(scope);
+					}
+				}
 				if ((this.binding.tagBits & TagBits.HasMissingType) != 0) {
 					if (!methodScope.enclosingSourceType().isAnonymousType()) {
 						scope.problemReporter().missingTypeInConstructor(this, this.binding);
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java
index 60b3f4e..aba011a 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java
@@ -16,9 +16,12 @@
  *******************************************************************************/
 package org.eclipse.jdt.internal.compiler.ast;
 
+import org.eclipse.jdt.core.compiler.CategorizedProblem;
+import org.eclipse.jdt.internal.compiler.CompilationResult;
 import org.eclipse.jdt.internal.compiler.codegen.CodeStream;
 import org.eclipse.jdt.internal.compiler.flow.FlowInfo;
 import org.eclipse.jdt.internal.compiler.impl.Constant;
+import org.eclipse.jdt.internal.compiler.impl.ReferenceContext;
 import org.eclipse.jdt.internal.compiler.lookup.BlockScope;
 import org.eclipse.jdt.internal.compiler.lookup.MethodBinding;
 import org.eclipse.jdt.internal.compiler.lookup.ParameterizedTypeBinding;
@@ -28,16 +31,28 @@ import org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding;
 import org.eclipse.jdt.internal.compiler.lookup.Scope;
 import org.eclipse.jdt.internal.compiler.lookup.TypeBinding;
 import org.eclipse.jdt.internal.compiler.lookup.TypeBindingVisitor;
+import org.eclipse.jdt.internal.compiler.problem.AbortCompilation;
+import org.eclipse.jdt.internal.compiler.problem.AbortCompilationUnit;
+import org.eclipse.jdt.internal.compiler.problem.AbortMethod;
+import org.eclipse.jdt.internal.compiler.problem.AbortType;
+import org.eclipse.jdt.internal.compiler.problem.ProblemSeverities;
 
-public abstract class FunctionalExpression extends Expression {
+public abstract class FunctionalExpression extends Expression implements ProblemSeverities, ReferenceContext, PolyExpression {
 	
 	TypeBinding expectedType;
 	MethodBinding descriptor;
 	public MethodBinding binding;
+	boolean ignoreFurtherInvestigation;
 	protected ExpressionContext expressionContext = VANILLA_CONTEXT;
+	protected CompilationResult compilationResult;
+	protected BlockScope enclosingScope;
+	protected static CompilationResult devNullCompilationResult;
 	
-	public FunctionalExpression() {
-		super();
+	public FunctionalExpression(CompilationResult compilationResult) {
+		this.compilationResult = compilationResult;
+		if (devNullCompilationResult == null) {
+			devNullCompilationResult = new CompilationResult(this.compilationResult.getCompilationUnit(), 0, 0, Integer.MAX_VALUE /* maximum problems per unit */);
+		}
 	}
 
 	public void setExpectedType(TypeBinding expectedType) {
@@ -162,4 +177,51 @@ public abstract class FunctionalExpression extends Expression {
 		}
 		codeStream.recordPositionsFrom(pc, this.sourceStart);
 	}
+
+	public CompilationResult compilationResult() {
+		return this.compilationResult;
+	}
+
+	public void abort(int abortLevel, CategorizedProblem problem) {
+	
+		switch (abortLevel) {
+			case AbortCompilation :
+				throw new AbortCompilation(this.compilationResult, problem);
+			case AbortCompilationUnit :
+				throw new AbortCompilationUnit(this.compilationResult, problem);
+			case AbortType :
+				throw new AbortType(this.compilationResult, problem);
+			default :
+				throw new AbortMethod(this.compilationResult, problem);
+		}
+	}
+
+	public CompilationUnitDeclaration getCompilationUnitDeclaration() {
+		return this.enclosingScope == null ? null : this.enclosingScope.compilationUnitScope().referenceContext;
+	}
+
+	public boolean hasErrors() {
+		return this.ignoreFurtherInvestigation;
+	}
+
+	private boolean shouldShutup() {
+		return this.compilationResult == devNullCompilationResult;
+	}
+
+	public void tagAsHavingErrors() {
+		if (shouldShutup()) return;
+		this.ignoreFurtherInvestigation = true;
+		Scope parent = this.enclosingScope.parent;
+		while (parent != null) {
+			switch(parent.kind) {
+				case Scope.CLASS_SCOPE:
+				case Scope.METHOD_SCOPE:
+					parent.referenceContext().tagAsHavingErrors();
+					return;
+				default:
+					parent = parent.parent;
+					break;
+			}
+		}
+	}
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
index b400c55..1ab60c2 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
@@ -19,7 +19,6 @@
  *******************************************************************************/
 package org.eclipse.jdt.internal.compiler.ast;
 
-import org.eclipse.jdt.core.compiler.CategorizedProblem;
 import org.eclipse.jdt.internal.compiler.ASTVisitor;
 import org.eclipse.jdt.internal.compiler.CompilationResult;
 import org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants;
@@ -27,7 +26,7 @@ import org.eclipse.jdt.internal.compiler.codegen.CodeStream;
 import org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext;
 import org.eclipse.jdt.internal.compiler.flow.FlowContext;
 import org.eclipse.jdt.internal.compiler.flow.FlowInfo;
-import org.eclipse.jdt.internal.compiler.impl.ReferenceContext;
+import org.eclipse.jdt.internal.compiler.impl.Constant;
 import org.eclipse.jdt.internal.compiler.lookup.AnnotationBinding;
 import org.eclipse.jdt.internal.compiler.lookup.Binding;
 import org.eclipse.jdt.internal.compiler.lookup.BlockScope;
@@ -43,25 +42,16 @@ import org.eclipse.jdt.internal.compiler.lookup.TypeBinding;
 import org.eclipse.jdt.internal.compiler.lookup.TypeConstants;
 import org.eclipse.jdt.internal.compiler.lookup.TypeIds;
 import org.eclipse.jdt.internal.compiler.parser.Parser;
-import org.eclipse.jdt.internal.compiler.problem.AbortCompilation;
-import org.eclipse.jdt.internal.compiler.problem.AbortCompilationUnit;
-import org.eclipse.jdt.internal.compiler.problem.AbortMethod;
-import org.eclipse.jdt.internal.compiler.problem.AbortType;
-import org.eclipse.jdt.internal.compiler.problem.ProblemSeverities;
 
-public class LambdaExpression extends FunctionalExpression implements ProblemSeverities, ReferenceContext, PolyExpression {
+public class LambdaExpression extends FunctionalExpression {
 	public Argument [] arguments;
 	public Statement body;
-	private MethodScope scope;
-	private CompilationResult compilationResult;
-	private boolean ignoreFurtherInvestigation;
-	private BlockScope parentScope;
-	private static CompilationResult devNullCompilationResult;
+	MethodScope scope;
 	protected boolean voidCompatible = true;
 	protected boolean valueCompatible = false;
 	
 	public LambdaExpression(CompilationResult compilationResult, Argument [] arguments, Statement body) {
-		this.compilationResult = compilationResult;
+		super(compilationResult);
 		this.arguments = arguments != null ? arguments : ASTNode.NO_ARGUMENTS;
 		this.body = body;
 	}
@@ -90,8 +80,8 @@ public class LambdaExpression extends FunctionalExpression implements ProblemSev
 	 * @see org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(ClassScope)
 	 */
 	public TypeBinding resolveType(BlockScope blockScope) {
-		
-		this.parentScope = blockScope;
+		this.constant = Constant.NotAConstant;
+		this.enclosingScope = blockScope;
 		if (this.expectedType == null && this.expressionContext == INVOCATION_CONTEXT) {
 			if (this.body instanceof Block) {
 				// Gather shape information for potential applicability analysis.
@@ -117,8 +107,6 @@ public class LambdaExpression extends FunctionalExpression implements ProblemSev
 				this.voidCompatible = expression.statementExpression();
 				this.valueCompatible = true;
 			}	
-			if (devNullCompilationResult == null)
-				devNullCompilationResult = new CompilationResult(this.compilationResult.getCompilationUnit(), 0, 0, blockScope.compilerOptions().maxProblemsPerUnit);
 			return new PolyTypeBinding(this);
 		}
 		super.resolveType(blockScope); // compute & capture interface function descriptor in singleAbstractMethod.
@@ -384,53 +372,6 @@ public class LambdaExpression extends FunctionalExpression implements ProblemSev
 		return output.append(suffix);
 	}
 
-	public CompilationResult compilationResult() {
-		return this.compilationResult;
-	}
-	
-	public void abort(int abortLevel, CategorizedProblem problem) {
-
-		switch (abortLevel) {
-			case AbortCompilation :
-				throw new AbortCompilation(this.compilationResult, problem);
-			case AbortCompilationUnit :
-				throw new AbortCompilationUnit(this.compilationResult, problem);
-			case AbortType :
-				throw new AbortType(this.compilationResult, problem);
-			default :
-				throw new AbortMethod(this.compilationResult, problem);
-		}
-	}
-
-	public CompilationUnitDeclaration getCompilationUnitDeclaration() {
-		return this.scope == null ? null : this.scope.compilationUnitScope().referenceContext;
-	}
-
-	public boolean hasErrors() {
-		return this.ignoreFurtherInvestigation;
-	}
-
-	private boolean shouldShutup() {
-		return this.compilationResult == devNullCompilationResult;
-	}
-	
-	public void tagAsHavingErrors() {
-		if (shouldShutup()) return;
-		this.ignoreFurtherInvestigation = true;
-		Scope parent = this.scope.parent;
-		while (parent != null) {
-			switch(parent.kind) {
-				case Scope.CLASS_SCOPE:
-				case Scope.METHOD_SCOPE:
-					parent.referenceContext().tagAsHavingErrors();
-					return;
-				default:
-					parent = parent.parent;
-					break;
-			}
-		}
-	}
-
 	public TypeBinding expectedResultType() {
 		return this.descriptor != null && this.descriptor.isValidBinding() ? this.descriptor.returnType : null;
 	}
@@ -453,7 +394,7 @@ public class LambdaExpression extends FunctionalExpression implements ProblemSev
 	
 	public boolean isCompatibleWith(TypeBinding left, Scope someScope) {
 		
-		final MethodBinding sam = left.getSingleAbstractMethod(this.parentScope);
+		final MethodBinding sam = left.getSingleAbstractMethod(this.enclosingScope);
 		
 		if (sam == null || !sam.isValidBinding())
 			return false;
@@ -471,7 +412,7 @@ public class LambdaExpression extends FunctionalExpression implements ProblemSev
 		LambdaExpression copy = copy();
 		copy.setExpressionContext(this.expressionContext);
 		copy.setExpectedType(left);
-		copy.resolveType(this.parentScope);
+		copy.resolveType(this.enclosingScope);
 		
 		if (!argumentsTypeElided()) {
 			for (int i = 0, length = sam.parameters.length; i < length; i++) {
@@ -505,11 +446,11 @@ public class LambdaExpression extends FunctionalExpression implements ProblemSev
 	}
 
 	LambdaExpression copy() {
-		final Parser parser = new Parser(this.parentScope.problemReporter(), false);
+		final Parser parser = new Parser(this.enclosingScope.problemReporter(), false);
 		final char[] source = this.compilationResult.getCompilationUnit().getContents();
 		LambdaExpression copy;
 		
-		CompilationUnitDeclaration unit = this.parentScope.referenceCompilationUnit();
+		CompilationUnitDeclaration unit = this.enclosingScope.referenceCompilationUnit();
 		CompilationResult original = unit.compilationResult;
 		unit.compilationResult = devNullCompilationResult;
 		
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java
index efe496b..07a1b6e 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedAllocationExpression.java
@@ -36,6 +36,7 @@ import org.eclipse.jdt.internal.compiler.lookup.ExtraCompilerModifiers;
 import org.eclipse.jdt.internal.compiler.lookup.LocalTypeBinding;
 import org.eclipse.jdt.internal.compiler.lookup.MethodBinding;
 import org.eclipse.jdt.internal.compiler.lookup.ParameterizedTypeBinding;
+import org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding;
 import org.eclipse.jdt.internal.compiler.lookup.ProblemMethodBinding;
 import org.eclipse.jdt.internal.compiler.lookup.ProblemReasons;
 import org.eclipse.jdt.internal.compiler.lookup.ProblemReferenceBinding;
@@ -445,6 +446,14 @@ public class QualifiedAllocationExpression extends AllocationExpression {
 			}
 			ReferenceBinding allocationType = (ReferenceBinding) receiverType;
 			if ((this.binding = scope.getConstructor(allocationType, argumentTypes, this)).isValidBinding()) {
+				for (int i = 0, length = this.arguments == null ? 0 : this.arguments.length; i < length; i++) {
+					Expression argument = this.arguments[i];
+					if (argumentTypes[i] instanceof PolyTypeBinding) {
+						argument.setExpressionContext(INVOCATION_CONTEXT);
+						argument.setExpectedType(this.binding.parameters[i]);
+						argumentTypes[i] = argument.resolveType(scope);
+					}
+				}
 				if (isMethodUseDeprecated(this.binding, scope, true)) {
 					scope.problemReporter().deprecatedMethod(this.binding, this);
 				}
@@ -520,6 +529,14 @@ public class QualifiedAllocationExpression extends AllocationExpression {
 			scope.problemReporter().invalidConstructor(this, inheritedBinding);
 			return this.resolvedType;
 		}
+		for (int i = 0, length = this.arguments == null ? 0 : this.arguments.length; i < length; i++) {
+			Expression argument = this.arguments[i];
+			if (argumentTypes[i] instanceof PolyTypeBinding) {
+				argument.setExpressionContext(INVOCATION_CONTEXT);
+				argument.setExpectedType(inheritedBinding.parameters[i]);
+				argumentTypes[i] = argument.resolveType(scope);
+			}
+		}
 		if ((inheritedBinding.tagBits & TagBits.HasMissingType) != 0) {
 			scope.problemReporter().missingTypeInConstructor(this, inheritedBinding);
 		}
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
index 8b6128e..6aee0b7 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
@@ -20,13 +20,16 @@ package org.eclipse.jdt.internal.compiler.ast;
 
 import org.eclipse.jdt.core.compiler.CharOperation;
 import org.eclipse.jdt.internal.compiler.ASTVisitor;
+import org.eclipse.jdt.internal.compiler.CompilationResult;
 import org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants;
 import org.eclipse.jdt.internal.compiler.codegen.ConstantPool;
 import org.eclipse.jdt.internal.compiler.impl.CompilerOptions;
+import org.eclipse.jdt.internal.compiler.impl.Constant;
 import org.eclipse.jdt.internal.compiler.lookup.Binding;
 import org.eclipse.jdt.internal.compiler.lookup.BlockScope;
 import org.eclipse.jdt.internal.compiler.lookup.InvocationSite;
 import org.eclipse.jdt.internal.compiler.lookup.MethodBinding;
+import org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding;
 import org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding;
 import org.eclipse.jdt.internal.compiler.lookup.Scope;
 import org.eclipse.jdt.internal.compiler.lookup.TagBits;
@@ -43,8 +46,10 @@ public class ReferenceExpression extends FunctionalExpression implements Invocat
 	private TypeBinding receiverType;
 	private boolean haveReceiver;
 	public TypeBinding[] resolvedTypeArguments;
+	private boolean typeArgumentsHaveErrors;
 	
-	public ReferenceExpression(Expression lhs, TypeReference [] typeArguments, SingleNameReference method, int sourceEnd) {
+	public ReferenceExpression(CompilationResult compilationResult, Expression lhs, TypeReference [] typeArguments, SingleNameReference method, int sourceEnd) {
+		super(compilationResult);
 		this.lhs = lhs;
 		this.typeArguments = typeArguments;
 		this.method = method;
@@ -54,31 +59,43 @@ public class ReferenceExpression extends FunctionalExpression implements Invocat
 
 	public TypeBinding resolveType(BlockScope scope) {
 		
-		super.resolveType(scope);
-		
 		final CompilerOptions compilerOptions = scope.compilerOptions();
-    	if (isConstructorReference())
-			this.lhs.bits |= ASTNode.IgnoreRawTypeCheck; // raw types in constructor references are to be treated as though <> were specified.
-		
-		TypeBinding lhsType = this.lhs.resolveType(scope);
-		if (this.typeArguments != null) {
-			int length = this.typeArguments.length;
-			boolean argHasError = compilerOptions.sourceLevel < ClassFileConstants.JDK1_5;
-			this.resolvedTypeArguments = new TypeBinding[length];
-			for (int i = 0; i < length; i++) {
-				TypeReference typeReference = this.typeArguments[i];
-				if ((this.resolvedTypeArguments[i] = typeReference.resolveType(scope, true /* check bounds*/)) == null) {
-					argHasError = true;
-				}
-				if (argHasError && typeReference instanceof Wildcard) { // resolveType on wildcard always return null above, resolveTypeArgument is the real workhorse.
-					scope.problemReporter().illegalUsageOfWildcard(typeReference);
-				}
-			}
-			if (argHasError)
+		TypeBinding lhsType;
+    	if (this.constant != Constant.NotAConstant) {
+    		this.constant = Constant.NotAConstant;
+    		this.enclosingScope = scope;
+    		if (isConstructorReference())
+    			this.lhs.bits |= ASTNode.IgnoreRawTypeCheck; // raw types in constructor references are to be treated as though <> were specified.
+
+    		lhsType = this.lhs.resolveType(scope);
+    		if (this.typeArguments != null) {
+    			int length = this.typeArguments.length;
+    			this.typeArgumentsHaveErrors = compilerOptions.sourceLevel < ClassFileConstants.JDK1_5;
+    			this.resolvedTypeArguments = new TypeBinding[length];
+    			for (int i = 0; i < length; i++) {
+    				TypeReference typeReference = this.typeArguments[i];
+    				if ((this.resolvedTypeArguments[i] = typeReference.resolveType(scope, true /* check bounds*/)) == null) {
+    					this.typeArgumentsHaveErrors = true;
+    				}
+    				if (this.typeArgumentsHaveErrors && typeReference instanceof Wildcard) { // resolveType on wildcard always return null above, resolveTypeArgument is the real workhorse.
+    					scope.problemReporter().illegalUsageOfWildcard(typeReference);
+    				}
+    			}
+    			if (this.typeArgumentsHaveErrors)
+    				return this.resolvedType;
+    		}
+    	} else {
+    		if (this.typeArgumentsHaveErrors)
 				return this.resolvedType;
+    		lhsType = this.lhs.resolvedType;
+    	}
+
+    	if (this.expectedType == null && this.expressionContext == INVOCATION_CONTEXT) {
+			return new PolyTypeBinding(this);
 		}
+		super.resolveType(scope);
 		
-		if (lhsType == null || !lhsType.isValidBinding()) 
+    	if (lhsType == null || !lhsType.isValidBinding()) 
 			return null;
 		
 		final TypeBinding[] descriptorParameters = this.descriptor != null ? this.descriptor.parameters : Binding.NO_PARAMETERS;
@@ -192,8 +209,9 @@ public class ReferenceExpression extends FunctionalExpression implements Invocat
         	return null;
         }
 
-        this.binding = someMethod != null && someMethod.isValidBinding() ? someMethod : anotherMethod != null && anotherMethod.isValidBinding() ? anotherMethod : null;
-        this.method.binding = this.binding;
+        this.method.binding = this.binding = someMethod != null && someMethod.isValidBinding() ? someMethod : 
+        											anotherMethod != null && anotherMethod.isValidBinding() ? anotherMethod : null;
+
         if (this.binding == null) {
         	char [] visibleName = isConstructorReference() ? this.receiverType.sourceName() : selector;
         	scope.problemReporter().danglingReference(this, this.receiverType, visibleName, descriptorParameters);
@@ -250,8 +268,10 @@ public class ReferenceExpression extends FunctionalExpression implements Invocat
     				}
     			}
     		}
-    		if (!returnType.isCompatibleWith(this.descriptor.returnType, scope))
+    		if (!returnType.isCompatibleWith(this.descriptor.returnType, scope) && !isBoxingCompatible(returnType, this.descriptor.returnType, this, scope)) {
     			scope.problemReporter().incompatibleReturnType(this, this.binding, this.descriptor.returnType);
+    			this.method.binding = this.binding = null;
+    		}
     	}
 
     	return this.resolvedType; // Phew !
@@ -327,4 +347,23 @@ public class ReferenceExpression extends FunctionalExpression implements Invocat
 		}
 		visitor.endVisit(this, blockScope);
 	}
+
+	public boolean isCompatibleWith(TypeBinding left, Scope scope) {
+		// 15.28.1
+		final MethodBinding sam = left.getSingleAbstractMethod(scope);
+		if (sam == null || !sam.isValidBinding())
+			return false;
+		this.method.binding = this.binding = null;
+		setExpectedType(left);
+		CompilationResult original = this.compilationResult;
+		try {
+			this.compilationResult = devNullCompilationResult;
+			resolveType(this.enclosingScope);
+		} finally {
+			this.compilationResult = original;
+		}
+		boolean isCompatible = this.binding != null && this.binding.isValidBinding();
+		this.method.binding = this.binding = null;
+		return isCompatible;
+	}
 }
\ No newline at end of file
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java
index 716139a..9b5c41c 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java
@@ -7989,9 +7989,9 @@ protected void consumeReferenceExpressionTypeForm(boolean isPrimitive) { // actu
 			pushOnGenericsLengthStack(0);
 			pushOnGenericsIdentifiersLengthStack(this.identifierLengthStack[this.identifierLengthPtr]);
 		}
-		referenceExpression = new ReferenceExpression(getTypeReference(dimension), typeArguments, method, sourceEnd);
+		referenceExpression = new ReferenceExpression(this.compilationUnit.compilationResult, getTypeReference(dimension), typeArguments, method, sourceEnd);
 	} else {
-		referenceExpression = new ReferenceExpression(getUnspecifiedReference(), typeArguments, method, sourceEnd);
+		referenceExpression = new ReferenceExpression(this.compilationUnit.compilationResult, getUnspecifiedReference(), typeArguments, method, sourceEnd);
 	}
 	pushOnExpressionStack(referenceExpression);
 
@@ -8016,7 +8016,7 @@ protected void consumeReferenceExpressionPrimaryForm() {
 	
 	Expression primary = this.expressionStack[this.expressionPtr--];
 	this.expressionLengthPtr--;
-	referenceExpression = new ReferenceExpression(primary, typeArguments, method, method.sourceEnd);
+	referenceExpression = new ReferenceExpression(this.compilationUnit.compilationResult, primary, typeArguments, method, method.sourceEnd);
 	pushOnExpressionStack(referenceExpression);
 	if (!this.parsingJava8Plus) {
 		problemReporter().referenceExpressionsNotBelow18(referenceExpression);
@@ -8038,7 +8038,7 @@ protected void consumeReferenceExpressionSuperForm() {
 	}
 	
 	SuperReference superReference = new SuperReference(this.intStack[this.intPtr--], this.endPosition);
-	referenceExpression = new ReferenceExpression(superReference, typeArguments, method, method.sourceEnd);
+	referenceExpression = new ReferenceExpression(this.compilationUnit.compilationResult, superReference, typeArguments, method, method.sourceEnd);
 	pushOnExpressionStack(referenceExpression);
 	if (!this.parsingJava8Plus) {
 		problemReporter().referenceExpressionsNotBelow18(referenceExpression);
@@ -8084,7 +8084,7 @@ protected void consumeReferenceExpressionGenericTypeForm() {
 	this.intPtr--; // pop '<' position
 	type.sourceEnd = typeSourceEnd;
 	
-	referenceExpression = new ReferenceExpression(type, typeArguments, method, sourceEnd);
+	referenceExpression = new ReferenceExpression(this.compilationUnit.compilationResult, type, typeArguments, method, sourceEnd);
 
 	pushOnExpressionStack(referenceExpression);
 	if (!this.parsingJava8Plus) {
diff --git a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetAllocationExpression.java b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetAllocationExpression.java
index 0d9a77e..2c4f034 100644
--- a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetAllocationExpression.java
+++ b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetAllocationExpression.java
@@ -31,6 +31,7 @@ import org.eclipse.jdt.internal.compiler.lookup.BlockScope;
 import org.eclipse.jdt.internal.compiler.lookup.FieldBinding;
 import org.eclipse.jdt.internal.compiler.lookup.MethodBinding;
 import org.eclipse.jdt.internal.compiler.lookup.ParameterizedTypeBinding;
+import org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding;
 import org.eclipse.jdt.internal.compiler.lookup.ProblemMethodBinding;
 import org.eclipse.jdt.internal.compiler.lookup.ProblemReasons;
 import org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding;
@@ -264,6 +265,14 @@ public TypeBinding resolveType(BlockScope scope) {
 			return this.resolvedType;
 		}
 	}
+	for (int i = 0, length = this.arguments == null ? 0 : this.arguments.length; i < length; i++) {
+		Expression argument = this.arguments[i];
+		if (argumentTypes[i] instanceof PolyTypeBinding) {
+			argument.setExpressionContext(INVOCATION_CONTEXT);
+			argument.setExpectedType(this.binding.parameters[i]);
+			argumentTypes[i] = argument.resolveType(scope);
+		}
+	}
 	if (isMethodUseDeprecated(this.binding, scope, true)) {
 		scope.problemReporter().deprecatedMethod(this.binding, this);
 	}
diff --git a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetMessageSend.java b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetMessageSend.java
index a434b92..dc62401 100644
--- a/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetMessageSend.java
+++ b/org.eclipse.jdt.core/eval/org/eclipse/jdt/internal/eval/CodeSnippetMessageSend.java
@@ -29,6 +29,7 @@ import org.eclipse.jdt.internal.compiler.lookup.Binding;
 import org.eclipse.jdt.internal.compiler.lookup.BlockScope;
 import org.eclipse.jdt.internal.compiler.lookup.FieldBinding;
 import org.eclipse.jdt.internal.compiler.lookup.MethodBinding;
+import org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding;
 import org.eclipse.jdt.internal.compiler.lookup.ProblemMethodBinding;
 import org.eclipse.jdt.internal.compiler.lookup.ProblemReasons;
 import org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding;
@@ -301,6 +302,14 @@ public TypeBinding resolveType(BlockScope scope) {
 			return null;
 		}
 	}
+	for (int i = 0, length = this.arguments == null ? 0 : this.arguments.length; i < length; i++) {
+		Expression argument = this.arguments[i];
+		if (argumentTypes[i] instanceof PolyTypeBinding) {
+			argument.setExpressionContext(INVOCATION_CONTEXT);
+			argument.setExpectedType(this.binding.parameters[i]);
+			argumentTypes[i] = argument.resolveType(scope);
+		}
+	}
 	if (!this.binding.isStatic()) {
 		// the "receiver" must not be a type, in other words, a NameReference that the TC has bound to a Type
 		if (this.receiver instanceof NameReference

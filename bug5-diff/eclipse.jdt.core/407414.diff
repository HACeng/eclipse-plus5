commit e659592a32935b3480e8554de2e33b0870ea4573
Author: Stephan Herrmann <stephan.herrmann@berlin.de>
Date:   Tue Apr 21 20:15:40 2015 +0200

    Bug 407414 - [compiler][null] Incorrect warning on a primitive type
    being null
    
    Change-Id: I31737814fa7723fd810f1215bb0437197c679b93
    Signed-off-by: Stephan Herrmann <stephan.herrmann@berlin.de>

345	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java
10	10	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
3	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Assignment.java
4	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java
4	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java
3	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java
4	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Reference.java
3	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java
index ac0a938..e0ffd8e 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullAnnotationTest.java
@@ -8149,4 +8149,349 @@ public void testBug459967_Enum_values() {
 				"");
 	}
 }
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=407414
+// Incorrect warning on a primitive type being null.
+public void test407414a()  {
+	 String testCode = "package p1;\n" +
+			 "public class Test {\n" +
+			 "	void fooI(int i) { \n" +
+			 "		barI(i);\n" +
+			 "	}\n" +
+			 "	void fooB(boolean i) {\n" +
+			 "		barB(i);\n" +
+			 "	}\n" +
+			 "	void fooBy(byte i) {\n" +
+			 "		barBy(i);\n" +
+			 "	}\n" +
+			 "	void fooF(float i) {\n" +
+			 "		barF(i);\n" +
+			 "	}\n" +
+			 "	void fooL(long i) {\n" +
+			 "		barL(i);\n" +
+			 "	}\n" +
+			 "	void fooC(char i) {\n" +
+			 "		barC(i);\n" +
+			 "	}\n" +
+			 "	void fooS(short i) {\n" +
+			 "		barS(i);\n" +
+			 "	}\n" +
+			 "	static void barI(Integer i) {}\n" +
+			 "	static void barB(Boolean i) {}\n" +
+			 "	static void barBy(Byte i) {}\n" +
+			 "	static void barF(Float i) {}\n" +
+			 "	static void barL(Long i) {}\n" +
+			 "	static void barC(Character i) {}\n" +
+			 "	static void barS(Short i) {}\n" +
+			 "}";
+	 String pcode = "@org.eclipse.jdt.annotation.NonNullByDefault\n" +
+			 "package p1;";
+	 runConformTestWithLibs(
+		new String[] {
+			"p1/package-info.java",
+			pcode,
+			"p1/Test.java",
+			testCode
+		},
+		getCompilerOptions(),
+		"");
+}
+
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=407414
+// Incorrect warning on a primitive type being null.
+// The information that boxing is happening at i2 = i
+// and therefore there cannot be null values in i2 is
+// not flowing down to access of i2.
+// The test case also illustrates array access and Qualified access.
+public void test407414b() {
+	 String testCode = "package p1;\n" +
+			 "  public class Test {\n" +
+			 "  class Y {\n" +
+			 "		class Z {\n" +
+			 "			int i;\n" +
+			 "          int a[];\n" +
+			 "      	Z() {\n" +
+			 "				a = new int[0];\n" +
+			 "      	}\n" +
+			 "		}\n" +
+			 "  }\n" +
+			 "	void foo(int i) {\n" +
+			 "		Integer i2 = i;\n" +
+			 "		bar(i2);\n" +
+			 "	}\n" +
+			 "	void fooA(int a[], int i) {\n" +
+			 "		Integer i2 = a[i];\n" +
+			 "		bar(i2);\n" +
+			 "	}\n" +
+			 "  void fooQ(Y.Z yz, int i) {\n" +
+			 "		Integer i2 = yz.i;\n" +
+			 "		bar(i2);\n" +
+			 "      i2 = yz.a[i];\n" +
+			 "      bar(i2);\n" +
+			 "  }\n" +
+			 "	static void bar(Integer i) { }\n" +
+			 "}";
+	 String pcode = "@org.eclipse.jdt.annotation.NonNullByDefault\n" +
+			 "package p1;";
+	 runConformTestWithLibs(
+		new String[] {
+			"p1/package-info.java",
+			pcode,
+			"p1/Test.java",
+			testCode
+		},
+		getCompilerOptions(),
+		"");
+}
+
+public void test407414b2() {
+	 String testCode = "package p1;\n" +
+			 "  public class Test {\n" +
+			 "  int a[];\n" +
+			 "  Test() {\n" +
+			 "		a = new int[0];\n" +
+			 "      a[0] = 0;\n" +
+			 "  }\n" +
+			 "	void fooA(int i) {\n" +
+			 "		Integer i2 = a[i];\n" +
+			 "		bar(i2);\n" +
+			 "	}\n" +
+			 "	static void bar(Integer i) { }\n" +
+			 "}";
+	 String pcode = "@org.eclipse.jdt.annotation.NonNullByDefault\n" +
+			 "package p1;";
+	 runConformTestWithLibs(
+		new String[] {
+			"p1/package-info.java",
+			pcode,
+			"p1/Test.java",
+			testCode
+		},
+		getCompilerOptions(),
+		"");
+}
+
+// FieldReference.
+public void test407414b3() {
+	 String testCode = "package p1;\n" +
+			 "public class Test {\n" +
+			 "  class Z {\n" +
+			 "		int a[];\n" +
+			 "		Z() {\n" +
+			 "	  		a = new int[0];\n" +
+			 "	  		a[0] = 0;\n" +
+			 "		}\n" +
+			 "  }\n" +
+			 "  class Y {\n" +
+			 "		Z[] z;\n" +
+			 "		Y () {\n" +
+			 "	 		z = new Z[0];\n" +
+			 "		}\n" +
+			 "  }\n" +
+			 "  void fooQ(Y y, int i) {\n" +
+			 "		Integer i2 = y.z[i].a[i];\n" +
+			 "		bar(i2);\n" +
+			 "  }\n" +
+			 "  static void bar(Integer i) { }\n" +
+			 "}";
+	 String pcode = "@org.eclipse.jdt.annotation.NonNullByDefault\n" +
+			 "package p1;";
+	 runConformTestWithLibs(
+		new String[] {
+			"p1/package-info.java",
+			pcode,
+			"p1/Test.java",
+			testCode
+		},
+		getCompilerOptions(),
+		"");
+}
+
+// arrayRefrence
+public void test407414b4() {
+	 String testCode = "package p1;\n" +
+			 "public class Test {\n" +
+			 "  class Y {\n" +
+			 "		int a[];\n" +
+			 "		Y() {\n" +
+			 "		  a = new int[0];\n" +
+			 "		  a[0] = 0;\n" +
+			 "		}\n" +
+			 "  }\n" +
+			 "  void fooQ(Y[] y, int i) {\n" +
+			 "		Integer i2 = y[i].a[i];\n" +
+			 "		bar(i2);\n" +
+			 "  }\n" +
+			 "  static void bar(Integer i) { }\n" +
+			 "}";
+	 String pcode = "@org.eclipse.jdt.annotation.NonNullByDefault\n" +
+			 "package p1;";
+	 runConformTestWithLibs(
+		new String[] {
+			"p1/package-info.java",
+			pcode,
+			"p1/Test.java",
+			testCode
+		},
+		getCompilerOptions(),
+		"");
+}
+
+// value of a (compound) assignment
+public void testBug407414c() {
+	runConformTestWithLibs(
+		new String[] {
+			"X.java",
+			"public class X {\n" +
+			"  int fI;\n" +
+			"  @org.eclipse.jdt.annotation.NonNull Integer test1(int i) {\n" +
+			"		return fI = i;\n" +
+			"  }\n" + 
+			"  @org.eclipse.jdt.annotation.NonNull Integer test2(int i) {\n" +
+			"		return fI += i;\n" +
+			"  }\n" + 
+			"}\n"
+		},
+		getCompilerOptions(),
+		"");
+}
+
+// primitive cast
+public void testBug407414d() {
+	runConformTestWithLibs(
+		new String[] {
+			"X.java",
+			"public class X {\n" +
+			"  @org.eclipse.jdt.annotation.NonNull Long test(int i) {\n" +
+			"		return (long)i;\n" +
+			"  }\n" + 
+			"}\n"
+		},
+		getCompilerOptions(),
+		"");
+}
+
+// conditional
+public void testBug407414e() {
+	runConformTestWithLibs(
+		new String[] {
+			"X.java",
+			"public class X {\n" +
+			"  @org.eclipse.jdt.annotation.NonNull Long test(long l, boolean b) {\n" +
+			"		return b ? l : 3;\n" +
+			"  }\n" + 
+			"}\n"
+		},
+		getCompilerOptions(),
+		"");
+}
+
+// operators
+public void testBug407414f() {
+	runConformTestWithLibs(
+		new String[] {
+			"X.java",
+			"public class X {\n" +
+			"  @org.eclipse.jdt.annotation.NonNull Long test1(long l) {\n" +
+			"		return l + 3;\n" +
+			"  }\n" + 
+			"  @org.eclipse.jdt.annotation.NonNull Long test2(long l) {\n" +
+			"		return l << 3;\n" +
+			"  }\n" + 
+			"  @org.eclipse.jdt.annotation.NonNull Long test3(long l) {\n" +
+			"		return l++;\n" +
+			"  }\n" +
+			"  @org.eclipse.jdt.annotation.NonNull Long test4(long l) {\n" +
+			"		return -l;\n" +
+			"  }\n" +
+			"}\n"
+		},
+		getCompilerOptions(),
+		"");
+}
+
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=428104
+// Null annotation heuristics does not understand autoboxed primitives to be non-null.
+public void test428104() {
+	 String testCode = "package p1;\n" +
+			 "import org.eclipse.jdt.annotation.NonNull;\n" +
+			 "public class Test {\n" +
+			 "    @NonNull\n" +
+			 "    Boolean case1Parent() {\n" +
+			 "        return case1Child();\n" +
+			 "    }\n" +
+			 "    boolean case1Child() {\n" +
+			 "        return Math.random() > 0.5;\n" +
+			 "    }\n" +
+			 "}\n";
+	 String pcode = "package p1;";
+	 runConformTestWithLibs(
+		new String[] {
+			"p1/package-info.java",
+			pcode,
+			"p1/Test.java",
+			testCode
+		},
+		getCompilerOptions(),
+		"");
+}
+
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=424702
+// Warning at an assignment of a boolean-Variable to an Boolean-Variable
+public void test424702() {
+	 String testCode = "package p1;\n" +
+			 "import org.eclipse.jdt.annotation.NonNull;\n" +
+			 "public class Test {\n" +
+			 "    private @NonNull Boolean t = true;\n" +
+			 "    Boolean foo() {\n" +
+			 "		boolean y = false;\n" +
+			 "      t = y;\n" +
+			 "		return t;\n" +
+			 "    }\n" +
+			 "}\n";
+	 String pcode = "package p1;";
+	 runConformTestWithLibs(
+		new String[] {
+			"p1/package-info.java",
+			pcode,
+			"p1/Test.java",
+			testCode
+		},
+		getCompilerOptions(),
+		"");
+}
+
+public void testBug237236() {
+	runConformTestWithLibs(
+		new String[] {
+			"X.java",
+			"@org.eclipse.jdt.annotation.NonNullByDefault\n" +
+			"public class X {\n" +
+			"  public void x(Long l) {}\n" + 
+			"  public long z() { return 0L; }\n" + 
+			"  public void y() { x(z()); }\n" +
+			"}\n"
+		},
+		getCompilerOptions(),
+		"");
+}
+public void testBug418236() {
+	runConformTestWithLibs(
+		new String[] {
+			"MyClass.java",
+			"@org.eclipse.jdt.annotation.NonNullByDefault\n" + 
+			"public class MyClass {\n" + 
+			"  private static final int CONSTANT = 24;\n" + 
+			"\n" + 
+			"  public Integer returnConstant() {\n" + 
+			"    return CONSTANT; // <-- incorrect error. Integer.valueOf is declared as non-null.\n" + 
+			"  }\n" + 
+			"\n" + 
+			"  public Integer returnInteger() {\n" + 
+			"    return 24; // <-- no error reported here\n" + 
+			"  }\n" + 
+			"}\n"
+		},
+		getCompilerOptions(),
+		"");
+}
 }
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
index f3824c0..162f7c4 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
@@ -4923,7 +4923,7 @@ public void testDefault07() {
 			" 		}\n" +
 			"	}\n" +
 			"	void test(Inner inner) {\n" +
-			"		@NonNull Number nnn = inner.process(Integer.MAX_VALUE, new ArrayList<@Nullable Integer>()); // WARN on 1. arg; ERR on 2. arg\n" +
+			"		@NonNull Number nnn = inner.process(Integer.valueOf(3), new ArrayList<@Nullable Integer>()); // WARN on 1. arg; ERR on 2. arg\n" +
 			"	}\n" +
 			"}\n"
 		},
@@ -4935,13 +4935,13 @@ public void testDefault07() {
 		"Null type mismatch: required \'T extends @NonNull Number\' but the provided value is null\n" + 
 		"----------\n" + 
 		"2. WARNING in X.java (at line 13)\n" + 
-		"	@NonNull Number nnn = inner.process(Integer.MAX_VALUE, new ArrayList<@Nullable Integer>()); // WARN on 1. arg; ERR on 2. arg\n" + 
-		"	                                    ^^^^^^^^^^^^^^^^^\n" + 
-		"Null type safety (type annotations): The expression of type \'int\' needs unchecked conversion to conform to \'@NonNull Integer\'\n" + 
+		"	@NonNull Number nnn = inner.process(Integer.valueOf(3), new ArrayList<@Nullable Integer>()); // WARN on 1. arg; ERR on 2. arg\n" + 
+		"	                                    ^^^^^^^^^^^^^^^^^^\n" + 
+		"Null type safety (type annotations): The expression of type \'Integer\' needs unchecked conversion to conform to \'@NonNull Integer\'\n" + 
 		"----------\n" + 
 		"3. ERROR in X.java (at line 13)\n" + 
-		"	@NonNull Number nnn = inner.process(Integer.MAX_VALUE, new ArrayList<@Nullable Integer>()); // WARN on 1. arg; ERR on 2. arg\n" + 
-		"	                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
+		"	@NonNull Number nnn = inner.process(Integer.valueOf(3), new ArrayList<@Nullable Integer>()); // WARN on 1. arg; ERR on 2. arg\n" + 
+		"	                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
 		"Null type mismatch (type annotations): required \'List<? extends @NonNull Number>\' but this expression has type \'ArrayList<@Nullable Integer>\', corresponding supertype is \'List<@Nullable Integer>\'\n" + 
 		"----------\n");
 }
@@ -5192,16 +5192,16 @@ public void testDefault07_bin() {
 			"import java.util.*;\n" +
 			"public class Y {\n" +
 			"	void test(X.Inner inner) {\n" +
-			"		@NonNull Number nnn = inner.process(Integer.MAX_VALUE, new ArrayList<@Nullable Integer>()); // WARN on 1. arg; ERR on 2. arg\n" +
+			"		@NonNull Number nnn = inner.process(Integer.valueOf(3), new ArrayList<@Nullable Integer>()); // WARN on 1. arg; ERR on 2. arg\n" +
 			"	}\n" +
 			"}\n"
 		},
 		getCompilerOptions(),
 		"----------\n" +  // FIXME: this should not be a warning, a case of unrecognized boxing
 		"1. WARNING in Y.java (at line 5)\n" + 
-		"	@NonNull Number nnn = inner.process(Integer.MAX_VALUE, new ArrayList<@Nullable Integer>()); // WARN on 1. arg; ERR on 2. arg\n" + 
-		"	                                    ^^^^^^^^^^^^^^^^^\n" + 
-		"Null type safety (type annotations): The expression of type \'int\' needs unchecked conversion to conform to \'@NonNull Integer\'\n" + 
+		"	@NonNull Number nnn = inner.process(Integer.valueOf(3), new ArrayList<@Nullable Integer>()); // WARN on 1. arg; ERR on 2. arg\n" + 
+		"	                                    ^^^^^^^^^^^^^^^^^^\n" + 
+		"Null type safety (type annotations): The expression of type \'Integer\' needs unchecked conversion to conform to \'@NonNull Integer\'\n" + 
 		"----------\n");
 }
 public void testBug431269() {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Assignment.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Assignment.java
index d855695..dd6dd1b 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Assignment.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Assignment.java
@@ -28,6 +28,7 @@
  *							Bug 392099 - [1.8][compiler][null] Apply null annotation on types for null analysis
  *							Bug 427438 - [1.8][compiler] NPE at org.eclipse.jdt.internal.compiler.ast.ConditionalExpression.generateCode(ConditionalExpression.java:280)
  *							Bug 453483 - [compiler][null][loop] Improve null analysis for loops
+ *							Bug 407414 - [compiler][null] Incorrect warning on a primitive type being null
  *******************************************************************************/
 package org.eclipse.jdt.internal.compiler.ast;
 
@@ -159,6 +160,8 @@ FieldBinding getLastField(Expression someExpression) {
 }
 
 public int nullStatus(FlowInfo flowInfo, FlowContext flowContext) {
+	if ((this.implicitConversion & TypeIds.BOXING) != 0)
+		return FlowInfo.NON_NULL;
 	return this.expression.nullStatus(flowInfo, flowContext);
 }
 
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java
index aa7b14e..c42960c 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2014 IBM Corporation and others.
+ * Copyright (c) 2000, 2015 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -22,6 +22,7 @@
  *								Bug 427438 - [1.8][compiler] NPE at org.eclipse.jdt.internal.compiler.ast.ConditionalExpression.generateCode(ConditionalExpression.java:280)
  *								Bug 430150 - [1.8][null] stricter checking against type variables
  *								Bug 435805 - [1.8][compiler][null] Java 8 compiler does not recognize declaration style null annotations
+ *								Bug 407414 - [compiler][null] Incorrect warning on a primitive type being null
  *        Andy Clement (GoPivotal, Inc) aclement@gopivotal.com - Contributions for
  *                          Bug 415541 - [1.8][compiler] Type annotations in the body of static initializer get dropped
  *******************************************************************************/
@@ -492,6 +493,8 @@ public LocalVariableBinding localVariableBinding() {
 }
 
 public int nullStatus(FlowInfo flowInfo, FlowContext flowContext) {
+	if ((this.implicitConversion & TypeIds.BOXING) != 0)
+		return FlowInfo.NON_NULL;
 	return this.expression.nullStatus(flowInfo, flowContext);
 }
 
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java
index 079a108..d285c6d 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2014 IBM Corporation and others.
+ * Copyright (c) 2000, 2015 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -24,6 +24,7 @@
  *							Bug 427438 - [1.8][compiler] NPE at org.eclipse.jdt.internal.compiler.ast.ConditionalExpression.generateCode(ConditionalExpression.java:280)
  *							Bug 418537 - [1.8][null] Fix null type annotation analysis for poly conditional expressions
  *							Bug 428352 - [1.8][compiler] Resolution errors don't always surface
+ *							Bug 407414 - [compiler][null] Incorrect warning on a primitive type being null
  *******************************************************************************/
 package org.eclipse.jdt.internal.compiler.ast;
 
@@ -418,6 +419,8 @@ public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext,
 	}
 
 	public int nullStatus(FlowInfo flowInfo, FlowContext flowContext) {
+		if ((this.implicitConversion & TypeIds.BOXING) != 0)
+			return FlowInfo.NON_NULL;
 		return this.nullStatus;
 	}
 
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java
index 0fa81d7..59e9d9c 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java
@@ -50,6 +50,7 @@
  *								Bug 441734 - [1.8][inference] Generic method with nested parameterized type argument fails on method reference
  *								Bug 452788 - [1.8][compiler] Type not correctly inferred in lambda expression
  *								Bug 456487 - [1.8][null] @Nullable type variant of @NonNull-constrained type parameter causes grief
+ *								Bug 407414 - [compiler][null] Incorrect warning on a primitive type being null
  *     Jesper S Moller - Contributions for
  *								Bug 378674 - "The method can be declared as static" is wrong
  *        Andy Clement (GoPivotal, Inc) aclement@gopivotal.com - Contributions for
@@ -527,6 +528,8 @@ public void manageSyntheticAccessIfNecessary(BlockScope currentScope, FlowInfo f
 	}
 }
 public int nullStatus(FlowInfo flowInfo, FlowContext flowContext) {
+	if ((this.implicitConversion & TypeIds.BOXING) != 0)
+		return FlowInfo.NON_NULL;
 	if (this.binding.isValidBinding()) {
 		// try to retrieve null status of this message send from an annotation of the called method:
 		long tagBits = this.binding.tagBits;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Reference.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Reference.java
index 27fbe8e..96ee371 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Reference.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Reference.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2013 IBM Corporation and others.
+ * Copyright (c) 2000, 2015 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -15,6 +15,7 @@
  *								bug 392384 - [1.8][compiler][null] Restore nullness info from type annotations in class files
  *								Bug 392099 - [1.8][compiler][null] Apply null annotation on types for null analysis 
  *								Bug 411964 - [1.8][null] leverage null type annotation in foreach statement
+ *								Bug 407414 - [compiler][null] Incorrect warning on a primitive type being null
  *******************************************************************************/
 package org.eclipse.jdt.internal.compiler.ast;
 
@@ -136,6 +137,8 @@ public FieldBinding lastFieldBinding() {
 }
 
 public int nullStatus(FlowInfo flowInfo, FlowContext flowContext) {
+	if ((this.implicitConversion & TypeIds.BOXING) != 0)
+		return FlowInfo.NON_NULL;
 	FieldBinding fieldBinding = lastFieldBinding();
 	if (fieldBinding != null) {
 		if (fieldBinding.isNonNull() || flowContext.isNullcheckedFieldAccess(this)) {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java
index dbeea60..297e072 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java
@@ -14,6 +14,7 @@
  *								bug 383368 - [compiler][null] syntactic null analysis for field references
  *								Bug 412203 - [compiler] Internal compiler error: java.lang.IllegalArgumentException: info cannot be null
  *								Bug 458396 - NPE in CodeStream.invoke()
+ *								Bug 407414 - [compiler][null] Incorrect warning on a primitive type being null
  *     Jesper S Moller - <jesper@selskabet.org>   - Contributions for 
  *     							bug 382721 - [1.8][compiler] Effectively final variables needs special treatment
  *								bug 378674 - "The method can be declared as static" is wrong
@@ -866,6 +867,8 @@ public VariableBinding nullAnnotatedVariableBinding(boolean supportTypeAnnotatio
 }
 
 public int nullStatus(FlowInfo flowInfo, FlowContext flowContext) {
+	if ((this.implicitConversion & TypeIds.BOXING) != 0)
+		return FlowInfo.NON_NULL;
 	LocalVariableBinding local = localVariableBinding();
 	if (local != null) {
 		return flowInfo.nullStatus(local);

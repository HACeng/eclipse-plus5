commit b035f7a4c467249c63cc869fd5f75e4bad8cf303
Author: Stephan Herrmann <stephan.herrmann@berlin.de>
Date:   Thu Jan 1 23:30:57 2015 +0100

    Bug 456497 - [1.8][null] during inference nullness from target type is
    lost against weaker hint from applicability analysis
    
    Change-Id: Id89b5417db3b7230047284af61e5e9d6c833aa55
    Signed-off-by: Stephan Herrmann <stephan.herrmann@berlin.de>

42	15	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
3	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java
5	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding.java
3	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceSubstitution.java
18	4	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBound.java
4	8	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeSystem.java
12	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
index 500c082..bd84972 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NullTypeAnnotationTest.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2012, 2014 GK Software AG and others.
+ * Copyright (c) 2012, 2015 GK Software AG and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -28,7 +28,7 @@ public class NullTypeAnnotationTest extends AbstractNullAnnotationTest {
 	// Static initializer to specify tests subset using TESTS_* static variables
 	// All specified tests which do not belong to the class are skipped...
 	static {
-//			TESTS_NAMES = new String[] { "testBug441693other" };
+//			TESTS_NAMES = new String[] { "testBug456497" };
 //			TESTS_NUMBERS = new int[] { 561 };
 //			TESTS_RANGE = new int[] { 1, 2049 };
 	}
@@ -2642,19 +2642,15 @@ public class NullTypeAnnotationTest extends AbstractNullAnnotationTest {
 			"	                                                           ^^^^^^\n" + 
 			"Null type mismatch (type annotations): required \'X\' but this expression has type \'@Nullable X\', where 'X' is a free type variable\n" + 
 			"----------\n" + 
-			"2. WARNING in PolyNull.java (at line 9)\n" + 
-			"	return extract(i -> needNN(i), \"ola\");\n" + 
-			"	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
-			"Null type safety (type annotations): The expression of type \'String\' needs unchecked conversion to conform to \'@NonNull String\'\n" + 
-			"----------\n" + 
-			"3. ERROR in PolyNull.java (at line 9)\n" + 
+			"2. ERROR in PolyNull.java (at line 9)\n" + 
 			"	return extract(i -> needNN(i), \"ola\");\n" + 
 			"	                           ^\n" + 
 			"Null type mismatch (type annotations): required \'@NonNull String\' but this expression has type \'@Nullable String\'\n" + 
 			"----------\n");
 	}
 
-	// conflicting annotations from type variable application and type variable substitution -> exclude null annotations from inference
+	// seemingly conflicting annotations from type variable application and type variable substitution 
+	// -> ignore @Nullable which overrides the type variable's nullness for this one location
 	public void testNullTypeInference3() {
 		Map compilerOptions = getCompilerOptions();
 		compilerOptions.put(JavaCore.COMPILER_PB_NULL_UNCHECKED_CONVERSION, JavaCore.ERROR);
@@ -2666,7 +2662,7 @@ public class NullTypeAnnotationTest extends AbstractNullAnnotationTest {
 				"public class Generics {\n" + 
 				"	<X> X m(@Nullable X a) { return null; }\n" + 
 				"	void test(@NonNull String in) {\n" + 
-				"		@NonNull String s = m(in);\n" + 
+				"		@NonNull String s = m(in);\n" +  // inferred OK as 'm(@Nullable String) -> @NonNull String'
 				"		System.out.println(s.toLowerCase());\n" + 
 				"	}\n" + 
 				"	public static void main(String[] args) {\n" + 
@@ -2680,11 +2676,6 @@ public class NullTypeAnnotationTest extends AbstractNullAnnotationTest {
 			"	<X> X m(@Nullable X a) { return null; }\n" + 
 			"	                                ^^^^\n" + 
 			"Null type mismatch (type annotations): \'null\' is not compatible to the free type variable 'X'\n" + 
-			"----------\n" + 
-			"2. ERROR in Generics.java (at line 6)\n" + 
-			"	@NonNull String s = m(in);\n" + 
-			"	                    ^^^^^\n" + 
-			"Null type safety (type annotations): The expression of type \'String\' needs unchecked conversion to conform to \'@NonNull String\'\n" + 
 			"----------\n");
 	}
 
@@ -7408,4 +7399,40 @@ public void testBug456236() {
 		null,
 		"");
 }
+
+public void testBug456497() throws Exception {
+	runConformTestWithLibs(
+		new String[] {
+			"libs/Lib1.java",
+			"package libs;\n" + 
+			"\n" + 
+			"import java.util.Collection;\n" + 
+			"import java.util.Iterator;\n" + 
+			"import org.eclipse.jdt.annotation.*;\n" +
+			"\n" + 
+			"public interface Lib1 {\n" + 
+			"	<T> Iterator<T> unconstrainedTypeArguments1(Collection<@Nullable T> in);\n" + 
+			"	Iterator<@NonNull String> unconstrainedTypeArguments2(Collection<String> in);\n" + 
+			"}\n",
+			"tests/Test1.java",
+			"package tests;\n" + 
+			"import org.eclipse.jdt.annotation.*;\n" + 
+			"\n" + 
+			"import java.util.Collection;\n" + 
+			"import java.util.Iterator;\n" + 
+			"\n" + 
+			"import libs.Lib1;\n" + 
+			"\n" + 
+			"public class Test1 {\n" + 
+			"	Iterator<@NonNull String> test1(Lib1 lib, Collection<@Nullable String> coll) {\n" + 
+			"		return lib.unconstrainedTypeArguments1(coll);\n" + 
+			"	}\n" + 
+			"	Iterator<@NonNull String> test2(Lib1 lib, Collection<@Nullable String> coll) {\n" + 
+			"		return lib.unconstrainedTypeArguments2(coll);\n" + 
+			"	}\n" +
+			"}\n"
+		},	
+		null,
+		"");
+}
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java
index 23ae246..2b1e8b9 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BoundSet.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2013, 2014 GK Software AG.
+ * Copyright (c) 2013, 2015 GK Software AG.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -286,6 +286,8 @@ class BoundSet {
 					AnnotationBinding[] annot = environment.nullAnnotationsFromTagBits(allBits);
 					if (annot != null)
 						type = environment.createAnnotatedType(type.withoutToplevelNullAnnotation(), annot);
+					else if (type.hasNullTypeAnnotations())
+						type = type.withoutToplevelNullAnnotation();
 				}
 			}
 			this.instantiation = type;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding.java
index 860149b..1325ef0 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2014 IBM Corporation and others.
+ * Copyright (c) 2000, 2015 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -11,6 +11,7 @@
  *								Bug 400874 - [1.8][compiler] Inference infrastructure should evolve to meet JLS8 18.x (Part G of JSR335 spec)
  *								Bug 429384 - [1.8][null] implement conformance rules for null-annotated lower / upper type bounds
  *								Bug 441797 - [1.8] synchronize type annotations on capture and its wildcard
+ *								Bug 456497 - [1.8][null] during inference nullness from target type is lost against weaker hint from applicability analysis
  *******************************************************************************/
 package org.eclipse.jdt.internal.compiler.lookup;
 
@@ -33,7 +34,7 @@ public class CaptureBinding extends TypeVariableBinding {
 	public ASTNode cud; // to facilitate recaptures.
 
 	public CaptureBinding(WildcardBinding wildcard, ReferenceBinding sourceType, int start, int end, ASTNode cud, int captureID) {
-		super(TypeConstants.WILDCARD_CAPTURE_NAME_PREFIX, null, 0, wildcard.environment);
+		super(TypeConstants.WILDCARD_CAPTURE_NAME_PREFIX, wildcard.environment);
 		this.wildcard = wildcard;
 		this.modifiers = ClassFileConstants.AccPublic | ExtraCompilerModifiers.AccGenericSignature; // treat capture as public
 		this.fPackage = wildcard.fPackage;
@@ -54,6 +55,8 @@ public class CaptureBinding extends TypeVariableBinding {
 			super.setTypeAnnotations(wildcard.getTypeAnnotations(), wildcard.environment.globalOptions.isAnnotationBasedNullAnalysisEnabled);
 			if (wildcard.hasNullTypeAnnotations())
 				this.tagBits |= TagBits.HasNullTypeAnnotation;
+		} else {			
+			computeId(this.environment);
 		}
 		this.cud = cud;
 	}
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceSubstitution.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceSubstitution.java
index a4248eb..e77da15 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceSubstitution.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InferenceSubstitution.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2013, 2014 GK Software AG.
+ * Copyright (c) 2013, 2015 GK Software AG.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -31,7 +31,8 @@ public class InferenceSubstitution extends Scope.Substitutor implements Substitu
 		for (int i = 0; i < this.variables.length; i++) {
 			InferenceVariable variable = this.variables[i];
 			if (TypeBinding.equalsEquals(getP(i), originalType)) {
-				variable.nullHints |= originalType.tagBits & TagBits.AnnotationNullMASK;
+				if (this.environment.globalOptions.isAnnotationBasedNullAnalysisEnabled && originalType.hasNullTypeAnnotations())
+					return this.environment.createAnnotatedType(variable.withoutToplevelNullAnnotation(), originalType.getTypeAnnotations());
 				return variable;
 			}
 		}
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBound.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBound.java
index dbb99b9..6194f0d 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBound.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBound.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2013, 2014 GK Software AG and others.
+ * Copyright (c) 2013, 2015 GK Software AG and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -33,14 +33,28 @@ public class TypeBound extends ReductionResult {
 
 	/** Create a true type bound or a dependency. */
 	TypeBound(InferenceVariable inferenceVariable, TypeBinding typeBinding, int relation) {
-		this.left = inferenceVariable;
-		this.right = safeType(typeBinding);
-		this.relation = relation;
+		this(inferenceVariable, typeBinding, relation, false);
 	}
 	
 	TypeBound(InferenceVariable inferenceVariable, TypeBinding typeBinding, int relation, boolean isSoft) {
 		this.left = inferenceVariable;
 		this.right = safeType(typeBinding);
+		if (((inferenceVariable.tagBits | this.right.tagBits) & TagBits.AnnotationNullMASK) != 0) {
+			if ((inferenceVariable.tagBits & TagBits.AnnotationNullMASK) == (this.right.tagBits & TagBits.AnnotationNullMASK)) {
+				// strip off identical nullness on both sides:
+				this.left = (InferenceVariable) inferenceVariable.withoutToplevelNullAnnotation();
+				this.right = this.right.withoutToplevelNullAnnotation();
+			} else {
+				long mask = 0;
+				// extract hint, e.g.: T#0 <: @NonNull Right  =>  T#0 hinted as @NonNull
+				switch (relation) {
+					case SAME: 		mask = TagBits.AnnotationNullMASK; break;
+					case SUBTYPE: 	mask = TagBits.AnnotationNonNull; break;  // sub of @Nullable is irrelevant
+					case SUPERTYPE: mask = TagBits.AnnotationNullable; break; // super of @NonNull is irrelevant
+				}
+				inferenceVariable.prototype().nullHints |= this.right.tagBits & mask;
+			}
+		}
 		this.relation = relation;
 		this.isSoft = isSoft;
 	}
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeSystem.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeSystem.java
index 95142c3..c912c1d 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeSystem.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeSystem.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2013 IBM Corporation and others.
+ * Copyright (c) 2013, 2015 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -9,6 +9,7 @@
  *     IBM Corporation - initial API and implementation
  *     Stephan Herrmann - Contribution for
  *								Bug 434602 - Possible error with inferred null annotations leading to contradictory null annotations
+ *								Bug 456497 - [1.8][null] during inference nullness from target type is lost against weaker hint from applicability analysis
  *******************************************************************************/
 package org.eclipse.jdt.internal.compiler.lookup;
 
@@ -384,13 +385,8 @@ public class TypeSystem {
 			System.arraycopy(derivedTypes, 0, derivedTypes = new TypeBinding[length * 2], 0, length);
 			this.types[unannotatedWildcard.id] = derivedTypes;
 		}
-		TypeBinding capture = derivedTypes[i] = new CaptureBinding(wildcard, contextType, start, end, cud, id);
-	
-		int typesLength = this.types.length;
-		if (this.typeid == typesLength)
-			System.arraycopy(this.types, 0, this.types = new TypeBinding[typesLength * 2][], 0, typesLength);
-		this.types[this.typeid] = new TypeBinding[1];
-		return (CaptureBinding) (this.types[capture.id = this.typeid++][0] = capture);
+		return (CaptureBinding) (derivedTypes[i] = new CaptureBinding(wildcard, contextType, start, end, cud, id));
+		// the above constructor already registers the capture, don't repeat that here
 	}
 	
 	public WildcardBinding getWildcard(ReferenceBinding genericType, int rank, TypeBinding bound, TypeBinding[] otherBounds, int boundKind, AnnotationBinding[] annotations) {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java
index 24a25fa..80929f0 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeVariableBinding.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2014 IBM Corporation and others.
+ * Copyright (c) 2000, 2015 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -29,6 +29,7 @@
  *								Bug 440143 - [1.8][null] one more case of contradictory null annotations regarding type variables
  *								Bug 440759 - [1.8][null] @NonNullByDefault should never affect wildcards and uses of a type variable
  *								Bug 441693 - [1.8][null] Bogus warning for type argument annotated with @NonNull
+ *								Bug 456497 - [1.8][null] during inference nullness from target type is lost against weaker hint from applicability analysis
  *******************************************************************************/
 package org.eclipse.jdt.internal.compiler.lookup;
 
@@ -74,6 +75,16 @@ public class TypeVariableBinding extends ReferenceBinding {
 		computeId(environment);
 	}
 	
+	// for subclass CaptureBinding
+	protected TypeVariableBinding(char[] sourceName, LookupEnvironment environment) {
+		this.sourceName = sourceName;
+		this.modifiers = ClassFileConstants.AccPublic | ExtraCompilerModifiers.AccGenericSignature; // treat type var as public
+		this.tagBits |= TagBits.HasTypeVariable;
+		this.environment = environment;
+		this.typeBits = TypeIds.BitUninitialized;
+		// don't yet compute the ID!
+	}
+
 	public TypeVariableBinding(TypeVariableBinding prototype) {
 		super(prototype);
 		this.declaringElement = prototype.declaringElement;

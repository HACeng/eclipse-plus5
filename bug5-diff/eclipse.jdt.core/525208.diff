commit 90687923d91f08d5530de432f2c22e9e1dbbd568
Author: Stephan Herrmann <stephan.herrmann@berlin.de>
Date:   Tue Sep 26 15:30:04 2017 +0200

    Bug 525208: [9] need API to ask for the module descriptor of an
    automatic module
    
    Change-Id: I36c3d66b4a1bf3229e37bbf92a5cc2adc5c1e979

54	0	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/Java9ElementTests.java
29	0	org.eclipse.jdt.core/model/org/eclipse/jdt/core/provisional/JavaModelAccess.java
31	0	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/AbstractModule.java
7	0	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java
1	32	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java
23	0	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/Java9ElementTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/Java9ElementTests.java
index cb6f834..bc15c6e 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/Java9ElementTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/Java9ElementTests.java
@@ -35,6 +35,7 @@ import org.eclipse.jdt.core.ITypeRoot;
 import org.eclipse.jdt.core.JavaCore;
 import org.eclipse.jdt.core.ToolFactory;
 import org.eclipse.jdt.core.compiler.CharOperation;
+import org.eclipse.jdt.core.provisional.JavaModelAccess;
 import org.eclipse.jdt.core.tests.util.AbstractCompilerTest;
 import org.eclipse.jdt.core.util.IAttributeNamesConstants;
 import org.eclipse.jdt.core.util.IClassFileAttribute;
@@ -1224,4 +1225,57 @@ public class Java9ElementTests extends AbstractJavaModelTests {
 			deleteProject("mod.zero");
 		}
 	}
+	public void testAutoModule1() throws Exception {
+		try {
+			IJavaProject project1 = createJavaProject("my_mod", new String[] {"src"}, new String[] {"JCL19_LIB"}, "bin", "9");
+			project1.open(null);
+			createFolder("/my_mod/src/p/q");
+			createFile("/my_mod/src/p/q/R.java", 
+					"package p.q;\n" +
+					"public class R {\n" +
+					"}");
+
+			IJavaProject project2 = createJava9Project("your.mod", new String[] {"src"});
+			IClasspathAttribute[] attrs = { JavaCore.newClasspathAttribute(IClasspathAttribute.MODULE, "true") };
+			IClasspathEntry dep = JavaCore.newProjectEntry(project1.getPath(), null, false, attrs, false);
+			addClasspathEntry(project2, dep);
+			project2.open(null);
+			createFile("/your.mod/src/module-info.java",
+					"module your.mod{\n" +
+					"	requires my.mod;\n" +
+					"}");
+
+			IModuleDescription mod1 = JavaModelAccess.getAutomaticModuleDescription(project1);
+			assertNotNull("auto module not found via project", mod1);
+
+			IPackageFragmentRoot fragmentRoot = project2.getPackageFragmentRoot(project1.getResource());
+			IModuleDescription mod2 = JavaModelAccess.getAutomaticModuleDescription(fragmentRoot);
+			assertNotNull("auto module not found via package fragment root", mod2);
+
+			assertEquals("names of module descriptions should be equal", mod1.getElementName(), mod2.getElementName());
+
+			for (IModuleDescription m : new IModuleDescription[] {mod1, mod2}) {
+				assertFalse(m.exists()); // exists would imply: included in getParent().getChildren()
+				assertTrue(m.getParent().exists());
+				assertNull(m.getClassFile());
+				assertNull(m.getCompilationUnit());
+				assertNull(m.getDeclaringType());
+				assertNull(m.getTypeRoot());
+				assertEquals(0, m.getChildren().length);
+				assertEquals(IJavaElement.JAVA_MODULE, m.getElementType());
+				assertEquals(0, m.getFlags());
+				assertEquals(m.getParent(), m.getOpenable());
+// these throw exceptions, which is OK after exists() answers false:
+//				assertNull(m.getCorrespondingResource());
+//				assertNull(m.getJavadocRange());
+//				assertNull(m.getSourceRange());
+			}
+			assertEquals(project1, mod1.getParent());
+			assertEquals(fragmentRoot, mod2.getParent());
+		}
+		finally {
+			deleteProject("Java9Elements");
+			deleteProject("Java9Elements2");
+		}	
+	}
 }
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/provisional/JavaModelAccess.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/provisional/JavaModelAccess.java
index 2d0d86d..7a9d6eb 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/provisional/JavaModelAccess.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/provisional/JavaModelAccess.java
@@ -15,6 +15,7 @@ import java.util.List;
 
 import org.eclipse.jdt.core.IClasspathAttribute;
 import org.eclipse.jdt.core.IClasspathEntry;
+import org.eclipse.jdt.core.IJavaElement;
 import org.eclipse.jdt.core.IJavaProject;
 import org.eclipse.jdt.core.IModuleDescription;
 import org.eclipse.jdt.core.IPackageFragmentRoot;
@@ -22,6 +23,7 @@ import org.eclipse.jdt.core.JavaModelException;
 import org.eclipse.jdt.internal.compiler.env.IModule.IModuleReference;
 import org.eclipse.jdt.internal.core.AbstractModule;
 import org.eclipse.jdt.internal.core.JavaProject;
+import org.eclipse.jdt.internal.core.PackageFragmentRoot;
 
 /**
  * Provisional API for use by JDT/UI, which may possibly be removed in a future version.
@@ -69,4 +71,31 @@ public class JavaModelAccess {
 	public static List<String> defaultRootModules(Iterable<IPackageFragmentRoot> allSystemRoots) {
 		return JavaProject.defaultRootModules(allSystemRoots);
 	}
+
+	/**
+	 * Returns the <code>IModuleDescription</code> that the given java element contains 
+	 * when regarded as an automatic module. The element must be an <code>IPackageFragmentRoot</code>
+	 * or an <code>IJavaProject</code>.
+	 * 
+	 * <p>The returned module descriptor has a name (<code>getElementName()</code>) following
+	 * the specification of <code>java.lang.module.ModuleFinder.of(Path...)</code>, but it
+	 * contains no other useful information.</p>
+	 * 
+	 * @return the <code>IModuleDescription</code> representing this java element as an automatic module,
+	 * 		never <code>null</code>.
+	 * @throws JavaModelException
+	 * @throws IllegalArgumentException if the provided element is neither <code>IPackageFragmentRoot</code>
+	 * 	nor <code>IJavaProject</code>
+	 * @since 3.14
+	 */
+	public static IModuleDescription getAutomaticModuleDescription(IJavaElement element) throws JavaModelException, IllegalArgumentException {
+		switch (element.getElementType()) {
+			case IJavaElement.JAVA_PROJECT:
+				return ((JavaProject) element).getAutomaticModuleDescription();
+			case IJavaElement.PACKAGE_FRAGMENT_ROOT:
+				return ((PackageFragmentRoot) element).getAutomaticModuleDescription();
+			default:
+				throw new IllegalArgumentException("Illegal kind of java element: "+element.getElementType()); //$NON-NLS-1$
+		}
+	}
 }
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/AbstractModule.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/AbstractModule.java
index 2ec7f06..9fa0bc5 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/AbstractModule.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/AbstractModule.java
@@ -10,13 +10,44 @@
  *******************************************************************************/
 package org.eclipse.jdt.internal.core;
 
+import org.eclipse.jdt.core.IJavaElement;
 import org.eclipse.jdt.core.IModuleDescription;
+import org.eclipse.jdt.core.ITypeRoot;
 import org.eclipse.jdt.core.JavaModelException;
 import org.eclipse.jdt.internal.compiler.env.IModule.IModuleReference;
 import org.eclipse.jdt.internal.compiler.env.IModule.IPackageExport;
 import org.eclipse.jdt.internal.compiler.env.IModule.IService;
 
 public abstract class AbstractModule extends NamedMember implements IModuleDescription {
+	
+	/**
+	 * Handle for an automatic module.
+	 *
+	 * <p>Note, that by definition this is mostly a fake, only {@link #getElementName()} provides a useful value.</p>
+	 */
+	static class AutoModule extends AbstractModule {
+	
+		public AutoModule(JavaElement parent, String name) {
+			super(parent, name);
+		}
+		@Override
+		public IJavaElement[] getChildren() throws JavaModelException {
+			return JavaElement.NO_ELEMENTS; // may later answer computed details
+		}
+		@Override
+		public int getFlags() throws JavaModelException {
+			return 0;
+		}
+		public ITypeRoot getTypeRoot() {
+			return null; // has no real CompilationUnit nor ClassFile
+		}
+		@Override
+		protected void toStringContent(StringBuffer buffer, String lineDelimiter) throws JavaModelException {
+			buffer.append("automatic module "); //$NON-NLS-1$
+			buffer.append(this.name);
+		}
+	}
+	
 	protected AbstractModule(JavaElement parent, String name) {
 		super(parent, name);
 	}
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java
index 9ee098a..7fefd4d 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java
@@ -80,6 +80,7 @@ import org.eclipse.jdt.core.compiler.CharOperation;
 import org.eclipse.jdt.core.eval.IEvaluationContext;
 import org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader;
 import org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException;
+import org.eclipse.jdt.internal.compiler.env.AutomaticModuleNaming;
 import org.eclipse.jdt.internal.compiler.env.IModule;
 import org.eclipse.jdt.internal.compiler.env.IModule.IModuleReference;
 import org.eclipse.jdt.internal.compiler.env.IModule.IPackageExport;
@@ -3507,6 +3508,7 @@ public class JavaProject
 		return JavaModelStatus.VERIFIED_OK;
 	}
 
+	@Override
 	public IModuleDescription getModuleDescription() throws JavaModelException {
 		JavaProjectElementInfo info = (JavaProjectElementInfo) getElementInfo();
 		IModuleDescription module = info.getModule();
@@ -3535,6 +3537,11 @@ public class JavaProject
 		return null;
 	}
 
+	public IModuleDescription getAutomaticModuleDescription() throws JavaModelException {
+		char[] moduleName = AutomaticModuleNaming.determineAutomaticModuleName(getElementName(), false, getManifest());
+		return new AbstractModule.AutoModule(this, String.valueOf(moduleName));
+	}
+
 	public void setModuleDescription(IModuleDescription module) throws JavaModelException {
 		JavaProjectElementInfo info = (JavaProjectElementInfo) getElementInfo();	
 		IModuleDescription current = info.getModule();
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java
index 1ab7ef7..9396d18 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/NameLookup.java
@@ -14,7 +14,6 @@ package org.eclipse.jdt.internal.core;
 import java.io.File;
 import java.util.*;
 import java.util.function.Function;
-import java.util.jar.Manifest;
 
 import org.eclipse.core.resources.*;
 import org.eclipse.core.runtime.IPath;
@@ -38,7 +37,6 @@ import org.eclipse.jdt.internal.compiler.ast.ASTNode;
 import org.eclipse.jdt.internal.compiler.ast.TypeDeclaration;
 import org.eclipse.jdt.internal.compiler.env.AccessRestriction;
 import org.eclipse.jdt.internal.compiler.env.AccessRuleSet;
-import org.eclipse.jdt.internal.compiler.env.AutomaticModuleNaming;
 import org.eclipse.jdt.internal.compiler.env.IBinaryType;
 import org.eclipse.jdt.internal.compiler.env.IModule;
 import org.eclipse.jdt.internal.compiler.lookup.TypeConstants;
@@ -68,24 +66,6 @@ import org.eclipse.jdt.internal.core.util.Util;
 @SuppressWarnings({"rawtypes", "unchecked"})
 public class NameLookup implements SuffixConstants {
 
-	/**
-	 * Handle for an automatic module.
-	 *
-	 * <p>Note, that by definition this is mostly a fake, only {@link #getElementName()} provides a useful value.</p>
-	 */
-	private static class AutoModule extends AbstractModule {
-
-		public AutoModule(JavaElement parent, String name) {
-			super(parent, name);
-		}
-
-		@Override
-		protected void toStringContent(StringBuffer buffer, String lineDelimiter) throws JavaModelException {
-			buffer.append("automatic module "); //$NON-NLS-1$
-			buffer.append(this.name);
-		}
-	}
-
 	public static class Answer {
 		public IType type;
 		public IModuleDescription module;
@@ -905,18 +885,7 @@ public class NameLookup implements SuffixConstants {
 			if (classpathEntry instanceof ClasspathEntry) {
 				if (((ClasspathEntry) classpathEntry).isModular()) {
 					// modular but no module-info implies this is an automatic module
-					Manifest manifest = null;
-					switch (classpathEntry.getEntryKind()) {
-						case IClasspathEntry.CPE_LIBRARY:
-							manifest = ((PackageFragmentRoot) root).getManifest();
-							break;
-						case IClasspathEntry.CPE_PROJECT:
-							JavaProject javaProject = (JavaProject) root.getJavaModel().getJavaProject(classpathEntry.getPath().lastSegment());
-							manifest = javaProject.getManifest();
-							break;
-					}
-					char[] moduleName = AutomaticModuleNaming.determineAutomaticModuleName(root.getElementName(), root.isArchive(), manifest);
-					module = new AutoModule((JavaElement) root, String.valueOf(moduleName));
+					module = ((PackageFragmentRoot) root).getAutomaticModuleDescription(classpathEntry);
 				}
 			}
 		}
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java
index 21390b3..ce24470 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java
@@ -19,6 +19,7 @@ import org.eclipse.core.resources.*;
 import org.eclipse.core.runtime.*;
 import org.eclipse.jdt.core.*;
 import org.eclipse.jdt.core.compiler.CharOperation;
+import org.eclipse.jdt.internal.compiler.env.AutomaticModuleNaming;
 import org.eclipse.jdt.internal.compiler.lookup.TypeConstants;
 import org.eclipse.jdt.internal.core.util.MementoTokenizer;
 import org.eclipse.jdt.internal.core.util.Messages;
@@ -881,6 +882,28 @@ public IModuleDescription getModuleDescription() {
 	}
 	return null;
 }
+
+public IModuleDescription getAutomaticModuleDescription() throws JavaModelException {
+	return getAutomaticModuleDescription(getRawClasspathEntry());
+}
+
+IModuleDescription getAutomaticModuleDescription(IClasspathEntry classpathEntry) {
+	String elementName = getElementName();
+	Manifest manifest = null;
+	switch (classpathEntry.getEntryKind()) {
+		case IClasspathEntry.CPE_LIBRARY:
+			manifest = getManifest();
+			break;
+		case IClasspathEntry.CPE_PROJECT:
+			JavaProject javaProject = (JavaProject) getJavaModel().getJavaProject(classpathEntry.getPath().lastSegment());
+			manifest = javaProject.getManifest();
+			elementName = javaProject.getElementName();
+			break;
+	}
+	char[] moduleName = AutomaticModuleNaming.determineAutomaticModuleName(elementName, isArchive(), manifest);
+	return new AbstractModule.AutoModule(this, String.valueOf(moduleName));
+}
+
 /** @see org.eclipse.jdt.internal.compiler.env.IModulePathEntry#hasCompilationUnit(String, String) */
 public boolean hasCompilationUnit(String qualifiedPackageName, String moduleName) {
 	IPackageFragment fragment = getPackageFragment(qualifiedPackageName.replace('/', '.'));
commit caeb12d66bfab6f6628ff85d24e7ccd83ef09ba4
Author: Stephan Herrmann <stephan.herrmann@berlin.de>
Date:   Tue Sep 26 17:34:59 2017 +0200

    Bug 525208: [9] need API to ask for the module descriptor of an
    automatic module
    
    - avoid JavaModelException from JavaModelAccess.getRequiredModules()
    
    Change-Id: I4b81496c18094f0fc617dbf1fb0f09c94305354f

4	0	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/AbstractModule.java
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/AbstractModule.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/AbstractModule.java
index 9fa0bc5..01fbe85 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/AbstractModule.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/AbstractModule.java
@@ -42,6 +42,10 @@ public abstract class AbstractModule extends NamedMember implements IModuleDescr
 			return null; // has no real CompilationUnit nor ClassFile
 		}
 		@Override
+		public IModuleReference[] getRequiredModules() throws JavaModelException {
+			return ModuleDescriptionInfo.NO_REQUIRES;
+		}
+		@Override
 		protected void toStringContent(StringBuffer buffer, String lineDelimiter) throws JavaModelException {
 			buffer.append("automatic module "); //$NON-NLS-1$
 			buffer.append(this.name);

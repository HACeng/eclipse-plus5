commit 5b0c62f0c85cc7c393266b52408d3bd3c14d0ef5
Author: Jerome Lanneluc <jeromel>
Date:   Fri Apr 13 16:02:17 2007 +0000

    HEAD - bug 145329

1	1	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClasspathTests.java
3	1	org.eclipse.jdt.core/buildnotes_jdt-core.html
0	3	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathChange.java
3	4	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessingState.java
1	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ExternalJavaProject.java
15	12	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java
21	31	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java
6	10	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProjectElementInfo.java
62	106	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java
1	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java
3	6	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.java
11	16	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/HandleFactory.java
37	0	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java
11	14	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/HierarchyScope.java
5	7	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/IndexSelector.java
3	3	org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClasspathTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClasspathTests.java
index ad1e78c..4602a24 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClasspathTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/ClasspathTests.java
@@ -261,7 +261,7 @@ public void testClasspathCorruption() throws CoreException {
 */
 		p1.close();
 		JavaModelManager.PerProjectInfo perProjectInfo = JavaModelManager.getJavaModelManager().getPerProjectInfo(p1.getProject(), true/*create if missing*/);
-		perProjectInfo.setClasspath(null, null, null, null, null, null);
+		perProjectInfo.setClasspath(null, null, null, null, null, null, null);
 
 		// shouldn't fail 
 		p1.getExpandedClasspath();
diff --git a/org.eclipse.jdt.core/buildnotes_jdt-core.html b/org.eclipse.jdt.core/buildnotes_jdt-core.html
index 4b8f488..22570dd 100644
--- a/org.eclipse.jdt.core/buildnotes_jdt-core.html
+++ b/org.eclipse.jdt.core/buildnotes_jdt-core.html
@@ -52,7 +52,9 @@ Eclipse SDK 3.3M7 - %date%
 <h2>What's new in this drop</h2>
 
 <h3>Problem Reports Fixed</h3>
-<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=177174">177174</a>
+<a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=145329">145329</a>
+[scaling] Unable to locate source in monster workspace
+<br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=177174">177174</a>
 [assist] Wrong names are proposed as unresolved local variable
 <br><a href="http://bugs.eclipse.org/bugs/show_bug.cgi?id=181727">181727</a>
 [perfs] JDT/Core performances tests last too long on slowest releng test boxes
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathChange.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathChange.java
index 0d792db..92f8f6e 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathChange.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathChange.java
@@ -61,8 +61,6 @@ public class ClasspathChange {
 				} catch (JavaModelException e) {
 					// ignore
 				}
-				// force detach source on jar package fragment roots (source will be lazily computed when needed)
-				((PackageFragmentRoot) root).setSourceAttachmentProperty(null);// loose info - will be recomputed
 			}
 		}
 	}
@@ -335,7 +333,6 @@ public class ClasspathChange {
 							} catch (JavaModelException e) {
 								// ignore
 							}
-							((PackageFragmentRoot) root).setSourceAttachmentProperty(null);// loose info - will be recomputed
 						}
 					}
 				}
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessingState.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessingState.java
index 4001a61..19f50c1 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessingState.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessingState.java
@@ -235,12 +235,11 @@ public class DeltaProcessingState implements IResourceChangeListener {
 						
 						// source attachment path
 						if (entry.getEntryKind() != IClasspathEntry.CPE_LIBRARY) continue;
-						QualifiedName qName = new QualifiedName(JavaCore.PLUGIN_ID, "sourceattachment: " + path.toOSString()); //$NON-NLS-1$;
 						String propertyString = null;
 						try {
-							propertyString = ResourcesPlugin.getWorkspace().getRoot().getPersistentProperty(qName);
-						} catch (CoreException e) {
-							continue;
+							propertyString = Util.getSourceAttachmentProperty(path);
+						} catch (JavaModelException e) {
+							e.printStackTrace();
 						}
 						IPath sourceAttachmentPath;
 						if (propertyString != null) {
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ExternalJavaProject.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ExternalJavaProject.java
index ef15405..09b1f41 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ExternalJavaProject.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ExternalJavaProject.java
@@ -27,7 +27,7 @@ public class ExternalJavaProject extends JavaProject {
 	public ExternalJavaProject(IClasspathEntry[] rawClasspath) {
 		super(ResourcesPlugin.getWorkspace().getRoot().getProject(EXTERNAL_PROJECT_NAME), JavaModelManager.getJavaModelManager().getJavaModel());
 		try {
-			getPerProjectInfo().setClasspath(rawClasspath, defaultOutputLocation(), JavaModelStatus.VERIFIED_OK/*no .classpath format problem*/, null/*no resolved claspath*/, null/*no reverse map*/, null/*no resolved status*/);
+			getPerProjectInfo().setClasspath(rawClasspath, defaultOutputLocation(), JavaModelStatus.VERIFIED_OK/*no .classpath format problem*/, null/*no resolved claspath*/, null/*no reverse map*/, null/*no resolve entry map*/, null/*no resolved status*/);
 		} catch (JavaModelException e) {
 			// getPerProjectInfo() never throws JavaModelException for an ExternalJavaProject
 		}
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java
index 795e570..362b4c5 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaModelManager.java
@@ -123,6 +123,11 @@ public class JavaModelManager implements ISaveParticipant, IContentTypeChangeLis
 	 * Extension used to construct Java 6 annotation processor managers
 	 */
 	private IConfigurationElement annotationProcessorManagerFactory = null;
+	
+	/* 
+	 * Map from a package fragment root's path to a source attachment property (source path + ATTACHMENT_PROPERTY_DELIMITER + source root path)
+	 */
+	public Map rootPathToAttachments = new HashMap();
 
 	public final static String CP_VARIABLE_PREFERENCES_PREFIX = JavaCore.PLUGIN_ID+".classpathVariable."; //$NON-NLS-1$
 	public final static String CP_CONTAINER_PREFERENCES_PREFIX = JavaCore.PLUGIN_ID+".classpathContainer."; //$NON-NLS-1$
@@ -862,13 +867,9 @@ public class JavaModelManager implements ISaveParticipant, IContentTypeChangeLis
 		// Create a jar package fragment root only if on the classpath
 		IPath resourcePath = file.getFullPath();
 		try {
-			IClasspathEntry[] entries = ((JavaProject)project).getResolvedClasspath();
-			for (int i = 0, length = entries.length; i < length; i++) {
-				IClasspathEntry entry = entries[i];
-				IPath rootPath = entry.getPath();
-				if (rootPath.equals(resourcePath)) {
-					return project.getPackageFragmentRoot(file);
-				}
+			IClasspathEntry entry = ((JavaProject)project).getClasspathEntryFor(resourcePath);
+			if (entry != null) {
+				return project.getPackageFragmentRoot(file);
 			}
 		} catch (JavaModelException e) {
 			// project doesn't exist: return null
@@ -984,7 +985,8 @@ public class JavaModelManager implements ISaveParticipant, IContentTypeChangeLis
 		public IJavaModelStatus rawClasspathStatus;
 		public IClasspathEntry[] resolvedClasspath;
 		public IJavaModelStatus unresolvedEntryStatus;
-		public Map resolvedPathToRawEntries; // reverse map from resolved path to raw entries
+		public Map rootPathToRawEntries; // reverse map from a package fragment root's path to the raw entry
+		public Map rootPathToResolvedEntries; // map from a package fragment root's path to the resolved entry
 		public IPath outputLocation;
 		
 		public IEclipsePreferences preferences;
@@ -1022,10 +1024,10 @@ public class JavaModelManager implements ISaveParticipant, IContentTypeChangeLis
 		
 		public synchronized void resetResolvedClasspath() {
 			// null out resolved information
-			setClasspath(this.rawClasspath, this.outputLocation, this.rawClasspathStatus, null, null, null);
+			setClasspath(this.rawClasspath, this.outputLocation, this.rawClasspathStatus, null, null, null, null);
 		}
 		
-		public synchronized void setClasspath(IClasspathEntry[] newRawClasspath, IPath newOutputLocation, IJavaModelStatus newRawClasspathStatus, IClasspathEntry[] newResolvedClasspath, Map newResolvedPathToRawEntries, IJavaModelStatus newUnresolvedEntryStatus) {
+		public synchronized void setClasspath(IClasspathEntry[] newRawClasspath, IPath newOutputLocation, IJavaModelStatus newRawClasspathStatus, IClasspathEntry[] newResolvedClasspath, Map newRootPathToRawEntries, Map newRootPathToResolvedEntries, IJavaModelStatus newUnresolvedEntryStatus) {
 			// remember old info
 			JavaModelManager manager = JavaModelManager.getJavaModelManager();
 			DeltaProcessor deltaProcessor = manager.deltaState.getDeltaProcessor();
@@ -1035,7 +1037,8 @@ public class JavaModelManager implements ISaveParticipant, IContentTypeChangeLis
 			this.outputLocation = newOutputLocation;
 			this.rawClasspathStatus = newRawClasspathStatus;
 			this.resolvedClasspath = newResolvedClasspath;
-			this.resolvedPathToRawEntries = newResolvedPathToRawEntries;
+			this.rootPathToRawEntries = newRootPathToRawEntries;
+			this.rootPathToResolvedEntries = newRootPathToResolvedEntries;
 			this.unresolvedEntryStatus = newUnresolvedEntryStatus;
 			this.javadocCache = new LRUCache(JAVADOC_CACHE_INITIAL_SIZE);
 		}
@@ -1090,7 +1093,7 @@ public class JavaModelManager implements ISaveParticipant, IContentTypeChangeLis
 			}
 			
 			// store new raw classpath, new output and new status, and null out resolved info
-			setClasspath(classpath, output, status, null, null, null);
+			setClasspath(classpath, output, status, null, null, null, null);
 			
 			return classpath;
 		}
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java
index 37c90c7..4584315 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProject.java
@@ -402,20 +402,6 @@ public class JavaProject
 		return true;
 	}
 
-	protected void closing(Object info) {
-		
-		// forget source attachment recommendations
-		Object[] children = ((JavaElementInfo)info).children;
-		for (int i = 0, length = children.length; i < length; i++) {
-			Object child = children[i];
-			if (child instanceof JarPackageFragmentRoot){
-				((JarPackageFragmentRoot)child).setSourceAttachmentProperty(null); 
-			}
-		}
-		
-		super.closing(info);
-	}
-
 	/**
 	 * Computes the collection of package fragment roots (local ones) and set it on the given info.
 	 * Need to check *all* package fragment roots in order to reset NameLookup
@@ -1354,16 +1340,15 @@ public class JavaProject
 	 * @return IClasspathEntry
 	 * @throws JavaModelException
 	 */
-	public IClasspathEntry getClasspathEntryFor(IPath path)
-		throws JavaModelException {
-
-		IClasspathEntry[] entries = getExpandedClasspath();
-		for (int i = 0; i < entries.length; i++) {
-			if (entries[i].getPath().equals(path)) {
-				return entries[i];
-			}
-		}
-		return null;
+	public IClasspathEntry getClasspathEntryFor(IPath path) throws JavaModelException {
+		getResolvedClasspath(); // force resolution
+		PerProjectInfo perProjectInfo = getPerProjectInfo();
+		if (perProjectInfo == null)
+			return null;
+		Map rootPathToResolvedEntries = perProjectInfo.rootPathToResolvedEntries;
+		if (rootPathToResolvedEntries == null)
+			return null;
+		return (IClasspathEntry) rootPathToResolvedEntries.get(path);
 	}
 	
 	/*
@@ -2552,6 +2537,7 @@ public class JavaProject
 			 			
 			IJavaModelStatus unresolvedEntryStatus = JavaModelStatus.VERIFIED_OK;
 			HashMap rawReverseMap = new HashMap();
+			Map rootPathToResolvedEntries = new HashMap();
 			
 			ArrayList resolvedEntries = new ArrayList();
 			int length = rawClasspath.length;
@@ -2575,8 +2561,9 @@ public class JavaProject
 						if (resolvedEntry == null) {
 							unresolvedEntryStatus = new JavaModelStatus(IJavaModelStatusConstants.CP_VARIABLE_PATH_UNBOUND, this, rawEntry.getPath());
 						} else {
-							if (rawReverseMap != null) {
-								if (rawReverseMap.get(resolvedPath = resolvedEntry.getPath()) == null) rawReverseMap.put(resolvedPath , rawEntry);
+							if (rawReverseMap.get(resolvedPath = resolvedEntry.getPath()) == null) {
+								rawReverseMap.put(resolvedPath , rawEntry);
+								rootPathToResolvedEntries.put(resolvedPath, resolvedEntry);
 							}
 							resolvedEntries.add(resolvedEntry);
 						}
@@ -2603,25 +2590,28 @@ public class JavaProject
 							}
 							// if container is exported or restricted, then its nested entries must in turn be exported  (21749) and/or propagate restrictions
 							cEntry = cEntry.combineWith((ClasspathEntry) rawEntry);
-							if (rawReverseMap != null) {
-								if (rawReverseMap.get(resolvedPath = cEntry.getPath()) == null) rawReverseMap.put(resolvedPath , rawEntry);
+							if (rawReverseMap.get(resolvedPath = cEntry.getPath()) == null) {
+								rawReverseMap.put(resolvedPath , rawEntry);
+								rootPathToResolvedEntries.put(resolvedPath, cEntry);
 							}
 							resolvedEntries.add(cEntry);
 						}
 						break;
 											
 					default :
-						if (rawReverseMap != null) {
-							if (rawReverseMap.get(resolvedPath = rawEntry.getPath()) == null) rawReverseMap.put(resolvedPath , rawEntry);
+						if (rawReverseMap.get(resolvedPath = rawEntry.getPath()) == null) {
+							rawReverseMap.put(resolvedPath , rawEntry);
+							rootPathToResolvedEntries.put(resolvedPath, rawEntry);
 						}
 						resolvedEntries.add(rawEntry);
+
 				}					
 			}
 	
 			// store resolved info along with the raw info to ensure consistency
 			IClasspathEntry[] resolvedClasspath = new IClasspathEntry[resolvedEntries.size()];
 			resolvedEntries.toArray(resolvedClasspath);
-			perProjectInfo.setClasspath(rawClasspath, outputLocation, rawClasspathStatus, resolvedClasspath, rawReverseMap, unresolvedEntryStatus);
+			perProjectInfo.setClasspath(rawClasspath, outputLocation, rawClasspathStatus, resolvedClasspath, rawReverseMap, rootPathToResolvedEntries, unresolvedEntryStatus);
 		} finally {
 			manager.setClasspathBeingResolved(this, false);
 		}
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProjectElementInfo.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProjectElementInfo.java
index 420f158..8b88288 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProjectElementInfo.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaProjectElementInfo.java
@@ -100,19 +100,14 @@ class JavaProjectElementInfo extends OpenableElementInfo {
 		boolean binIsProject = false;
 		char[][] inclusionPatterns = null;
 		char[][] exclusionPatterns = null;
-		IClasspathEntry[] classpath = null;
 		IPath projectOutput = null;
 		boolean isClasspathResolved = true;
 		try {
-			classpath = project.getResolvedClasspath();
-			for (int i = 0; i < classpath.length; i++) {
-				IClasspathEntry entry = classpath[i];
-				if (projectPath.equals(entry.getPath())) {
-					srcIsProject = true;
-					inclusionPatterns = ((ClasspathEntry)entry).fullInclusionPatternChars();
-					exclusionPatterns = ((ClasspathEntry)entry).fullExclusionPatternChars();
-					break;
-				}
+			IClasspathEntry entry = project.getClasspathEntryFor(projectPath);
+			if (entry != null) {
+				srcIsProject = true;
+				inclusionPatterns = ((ClasspathEntry)entry).fullInclusionPatternChars();
+				exclusionPatterns = ((ClasspathEntry)entry).fullExclusionPatternChars();
 			}
 			projectOutput = project.getOutputLocation();
 			binIsProject = projectPath.equals(projectOutput);
@@ -128,6 +123,7 @@ class JavaProjectElementInfo extends OpenableElementInfo {
 			if (length > 0) {
 				String sourceLevel = project.getOption(JavaCore.COMPILER_SOURCE, true);
 				String complianceLevel = project.getOption(JavaCore.COMPILER_COMPLIANCE, true);
+				IClasspathEntry[] classpath = project.getResolvedClasspath();
 				for (int i = 0; i < length; i++) {
 					IResource res = members[i];
 					switch (res.getType()) {
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java
index 8c9d5eb..0dc0b7b 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java
@@ -15,13 +15,7 @@ import java.util.Enumeration;
 import java.util.Map;
 
 import org.eclipse.core.resources.*;
-import org.eclipse.core.resources.IContainer;
-import org.eclipse.core.resources.IFolder;
-import org.eclipse.core.resources.IResource;
 import org.eclipse.core.runtime.*;
-import org.eclipse.core.runtime.CoreException;
-import org.eclipse.core.runtime.IPath;
-import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.jdt.core.*;
 import org.eclipse.jdt.core.compiler.CharOperation;
 import org.eclipse.jdt.internal.core.util.MementoTokenizer;
@@ -41,7 +35,7 @@ public class PackageFragmentRoot extends Openable implements IPackageFragmentRoo
 	/*
 	 * No source attachment property
 	 */
-	protected final static String NO_SOURCE_ATTACHMENT = ""; //$NON-NLS-1$
+	public final static String NO_SOURCE_ATTACHMENT = ""; //$NON-NLS-1$
 
 	/**
 	 * The resource associated with this root.
@@ -119,10 +113,11 @@ public void attachSource(IPath sourcePath, IPath rootPath, IProgressMonitor moni
 			setSourceMapper(mapper);
 		}
 		if (sourcePath == null) {
-			setSourceAttachmentProperty(null); //remove the property
+			Util.setSourceAttachmentProperty(getPath(), null); //remove the property
 		} else {
 			//set the property to the path of the mapped source
-			setSourceAttachmentProperty(
+			Util.setSourceAttachmentProperty(
+				getPath(),
 				sourcePath.toString() 
 				+ (rootPath == null ? "" : (ATTACHMENT_PROPERTY_DELIMITER + rootPath.toString()))); //$NON-NLS-1$
 		}
@@ -144,7 +139,7 @@ public void attachSource(IPath sourcePath, IPath rootPath, IProgressMonitor moni
 			}
 		}
 	} catch (JavaModelException e) {
-		setSourceAttachmentProperty(null); // loose info - will be recomputed
+		Util.setSourceAttachmentProperty(getPath(), null); // loose info - will be recomputed
 		throw e;
 	} finally {
 		if (monitor != null) {
@@ -316,12 +311,9 @@ public IPackageFragment createPackageFragment(String pkgName, boolean force, IPr
  * 		not exist.
  */
 protected int determineKind(IResource underlyingResource) throws JavaModelException {
-	IClasspathEntry[] entries= ((JavaProject)getJavaProject()).getResolvedClasspath();
-	for (int i= 0; i < entries.length; i++) {
-		IClasspathEntry entry= entries[i];
-		if (entry.getPath().equals(underlyingResource.getFullPath())) {
-			return entry.getContentKind();
-		}
+	IClasspathEntry entry = ((JavaProject)getJavaProject()).getClasspathEntryFor(underlyingResource.getFullPath());
+	if (entry != null) {
+		return entry.getContentKind();
 	}
 	return IPackageFragmentRoot.K_SOURCE;
 }
@@ -349,7 +341,7 @@ public boolean exists() {
 	return super.exists() && validateOnClasspath().isOK();
 }
 
-public IClasspathEntry findSourceAttachmentRecommendation() {
+private IClasspathEntry findSourceAttachmentRecommendation() {
 	try {
 		IPath rootPath = this.getPath();
 		IClasspathEntry entry;
@@ -587,9 +579,9 @@ public IClasspathEntry getRawClasspathEntry() throws JavaModelException {
 	IClasspathEntry rawEntry = null;
 	JavaProject project = (JavaProject)this.getJavaProject();
 	project.getResolvedClasspath(); // force the reverse rawEntry cache to be populated
-	Map resolvedPathToRawEntries = project.getPerProjectInfo().resolvedPathToRawEntries;
-	if (resolvedPathToRawEntries != null) {
-		rawEntry = (IClasspathEntry) resolvedPathToRawEntries.get(this.getPath());
+	Map rootPathToRawEntries = project.getPerProjectInfo().rootPathToRawEntries;
+	if (rootPathToRawEntries != null) {
+		rawEntry = (IClasspathEntry) rootPathToRawEntries.get(this.getPath());
 	}
 	return rawEntry;
 }
@@ -607,69 +599,33 @@ public IResource getResource() {
 public IPath getSourceAttachmentPath() throws JavaModelException {
 	if (getKind() != K_BINARY) return null;
 	
-	String serverPathString= getSourceAttachmentProperty();
-	if (serverPathString == null) {
-		return null;
-	}
-	int index= serverPathString.lastIndexOf(ATTACHMENT_PROPERTY_DELIMITER);
-	if (index < 0) {
-		// no root path specified
-		return new Path(serverPathString);
-	} else {
-		String serverSourcePathString= serverPathString.substring(0, index);
-		return new Path(serverSourcePathString);
-	}
-}
-
-/**
- * Returns the server property for this package fragment root's
- * source attachement.
- */
-protected String getSourceAttachmentProperty() throws JavaModelException {
-	String propertyString = null;
-	QualifiedName qName= getSourceAttachmentPropertyName();
-	try {
-		propertyString = ResourcesPlugin.getWorkspace().getRoot().getPersistentProperty(qName);
-		
-		// if no existing source attachment information, then lookup a recommendation from classpath entries
-		if (propertyString == null) {
-			IClasspathEntry recommendation = findSourceAttachmentRecommendation();
-			if (recommendation != null) {
-				IPath rootPath = recommendation.getSourceAttachmentRootPath();
-				propertyString = 
-					recommendation.getSourceAttachmentPath().toString() 
-						+ ((rootPath == null) 
-							? "" : //$NON-NLS-1$
-							(ATTACHMENT_PROPERTY_DELIMITER + rootPath.toString())); 
-				setSourceAttachmentProperty(propertyString);
-			} else {
-				// mark as being already looked up
-				setSourceAttachmentProperty(NO_SOURCE_ATTACHMENT);
-			}
-		} else if (NO_SOURCE_ATTACHMENT.equals(propertyString)) {
-			// already looked up and no source attachment found
-			return null;
+	// 1) look source attachment property (set iff attachSource(...) was called
+	IPath path = getPath();
+	String serverPathString= Util.getSourceAttachmentProperty(path);
+	if (serverPathString != null) {
+		int index= serverPathString.lastIndexOf(ATTACHMENT_PROPERTY_DELIMITER);
+		if (index < 0) {
+			// no root path specified
+			return new Path(serverPathString);
+		} else {
+			String serverSourcePathString= serverPathString.substring(0, index);
+			return new Path(serverSourcePathString);
 		}
-		return propertyString;
-	} catch (CoreException ce) {
-		throw new JavaModelException(ce);
 	}
-}
-	
-/**
- * Returns the qualified name for the source attachment property
- * of this root.
- */
-protected QualifiedName getSourceAttachmentPropertyName() {
-	return new QualifiedName(JavaCore.PLUGIN_ID, "sourceattachment: " + this.getPath().toOSString()); //$NON-NLS-1$
-}
 
-public void setSourceAttachmentProperty(String property) {
-	try {
-		ResourcesPlugin.getWorkspace().getRoot().setPersistentProperty(this.getSourceAttachmentPropertyName(), property);
-	} catch (CoreException ce) {
-		// ignore
+	// 2) look at classpath entry
+	IClasspathEntry entry = ((JavaProject) getParent()).getClasspathEntryFor(path);
+	IPath sourceAttachmentPath;
+	if (entry != null && (sourceAttachmentPath = entry.getSourceAttachmentPath()) != null)
+		return sourceAttachmentPath;
+	
+	// 3) look for a recommendation
+	entry = findSourceAttachmentRecommendation();
+	if (entry != null && (sourceAttachmentPath = entry.getSourceAttachmentPath()) != null) {
+		return sourceAttachmentPath;
 	}
+	
+	return null;	
 }
 
 /**
@@ -688,17 +644,31 @@ public void setSourceMapper(SourceMapper mapper) throws JavaModelException {
 public IPath getSourceAttachmentRootPath() throws JavaModelException {
 	if (getKind() != K_BINARY) return null;
 	
-	String serverPathString= getSourceAttachmentProperty();
-	if (serverPathString == null) {
-		return null;
-	}
-	int index = serverPathString.lastIndexOf(ATTACHMENT_PROPERTY_DELIMITER);
-	if (index == -1) return null;
-	String serverRootPathString= IPackageFragmentRoot.DEFAULT_PACKAGEROOT_PATH;
-	if (index != serverPathString.length() - 1) {
-		serverRootPathString= serverPathString.substring(index + 1);
+	// 1) look source attachment property (set iff attachSource(...) was called
+	IPath path = getPath();
+	String serverPathString= Util.getSourceAttachmentProperty(path);
+	if (serverPathString != null) {
+		int index = serverPathString.lastIndexOf(ATTACHMENT_PROPERTY_DELIMITER);
+		if (index == -1) return null;
+		String serverRootPathString= IPackageFragmentRoot.DEFAULT_PACKAGEROOT_PATH;
+		if (index != serverPathString.length() - 1) {
+			serverRootPathString= serverPathString.substring(index + 1);
+		}
+		return new Path(serverRootPathString);
 	}
-	return new Path(serverRootPathString);
+
+	// 2) look at classpath entry
+	IClasspathEntry entry = ((JavaProject) getParent()).getClasspathEntryFor(path);
+	IPath sourceAttachmentRootPath;
+	if (entry != null && (sourceAttachmentRootPath = entry.getSourceAttachmentRootPath()) != null)
+		return sourceAttachmentRootPath;
+	
+	// 3) look for a recomendation
+	entry = findSourceAttachmentRecommendation();
+	if (entry != null && (sourceAttachmentRootPath = entry.getSourceAttachmentRootPath()) != null)
+		return sourceAttachmentRootPath;
+	
+	return null;	
 }
 
 /**
@@ -717,17 +687,6 @@ public SourceMapper getSourceMapper() {
 				mapper = createSourceMapper(getPath(), rootPath); // attach root to itself
 			else
 				mapper = createSourceMapper(sourcePath, rootPath);
-			if (rootPath == null && mapper.rootPath != null) {
-				// as a side effect of calling the SourceMapper constructor, the root path was computed
-				rootPath = new Path(mapper.rootPath);
-				
-				//set the property to the path of the mapped source
-				if (sourcePath != null)
-					setSourceAttachmentProperty(
-						sourcePath.toString() 
-						+ ATTACHMENT_PROPERTY_DELIMITER 
-						+ rootPath.toString());
-			}
 			rootInfo.setSourceMapper(mapper);
 		}
 	} catch (JavaModelException e) {
@@ -780,12 +739,9 @@ protected IStatus validateOnClasspath() {
 	try {
 		// check package fragment root on classpath of its project
 		JavaProject project = (JavaProject) getJavaProject();
-		IClasspathEntry[] classpath = project.getResolvedClasspath();	
-		for (int i = 0, length = classpath.length; i < length; i++) {
-			IClasspathEntry entry = classpath[i];
-			if (entry.getPath().equals(path)) {
-				return Status.OK_STATUS;
-			}
+		IClasspathEntry entry = project.getClasspathEntryFor(path);	
+		if (entry != null) {
+			return Status.OK_STATUS;
 		}
 	} catch(JavaModelException e){
 		// could not read classpath, then assume it is outside
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java
index eff4381..d21117a 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/SetClasspathOperation.java
@@ -50,7 +50,7 @@ public class SetClasspathOperation extends ChangeClasspathOperation {
 		checkCanceled();
 		try {
 			// set raw classpath and null out resolved info
-			this.project.getPerProjectInfo().setClasspath(this.newRawClasspath, this.newOutputLocation, JavaModelStatus.VERIFIED_OK/*format is ok*/, null, null, null);
+			this.project.getPerProjectInfo().setClasspath(this.newRawClasspath, this.newOutputLocation, JavaModelStatus.VERIFIED_OK/*format is ok*/, null, null, null, null);
 			
 			// if needed, generate delta, update project ref, create markers, ...
 			classpathChanged(this.project);
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.java
index 5452e3e..7397703 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/hierarchy/TypeHierarchy.java
@@ -930,12 +930,9 @@ private boolean isAffectedByPackageFragmentRoot(IJavaElementDelta delta, IJavaEl
 					for (int i = 0; i < elements.length; i++) {
 						JavaProject javaProject = (JavaProject)elements[i];
 						try {
-							IClasspathEntry[] classpath = javaProject.getResolvedClasspath();
-							for (int j = 0; j < classpath.length; j++) {
-								IClasspathEntry entry = classpath[j];
-								if (entry.getPath().equals(rootPath)) {
-									return true;
-								}
+							IClasspathEntry entry = javaProject.getClasspathEntryFor(rootPath);
+							if (entry != null) {
+								return true;
 							}
 						} catch (JavaModelException e) {
 							// igmore this project
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/HandleFactory.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/HandleFactory.java
index 859800c..d099050 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/HandleFactory.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/HandleFactory.java
@@ -258,13 +258,10 @@ public class HandleFactory {
 			//        is NOT on the classpath of org.eclipse.swt.win32
 			IFile jarFile = (IFile)target;
 			JavaProject javaProject = (JavaProject) this.javaModel.getJavaProject(jarFile);
-			IClasspathEntry[] classpathEntries;
 			try {
-				classpathEntries = javaProject.getResolvedClasspath();
-				for (int j= 0, entryCount= classpathEntries.length; j < entryCount; j++) {
-					if (classpathEntries[j].getPath().equals(jarPath)) {
-						return javaProject.getPackageFragmentRoot(jarFile);
-					}
+				IClasspathEntry entry = javaProject.getClasspathEntryFor(jarPath);
+				if (entry != null) {
+					return javaProject.getPackageFragmentRoot(jarFile);
 				}
 			} catch (JavaModelException e) {
 				// ignore and try to find another project
@@ -310,16 +307,14 @@ public class HandleFactory {
 		for (int i= 0, projectCount= projects.length; i < projectCount; i++) {
 			try {
 				JavaProject javaProject= (JavaProject)projects[i];
-				IClasspathEntry[] classpathEntries= javaProject.getResolvedClasspath();
-				for (int j= 0, entryCount= classpathEntries.length; j < entryCount; j++) {
-					if (classpathEntries[j].getPath().equals(jarPath)) {
-						if (target instanceof IFile) {
-							// internal jar
-							return javaProject.getPackageFragmentRoot((IFile)target);
-						} else {
-							// external jar
-							return javaProject.getPackageFragmentRoot0(jarPath);
-						}
+				IClasspathEntry classpathEnty = javaProject.getClasspathEntryFor(jarPath);
+				if (classpathEnty != null) {
+					if (target instanceof IFile) {
+						// internal jar
+						return javaProject.getPackageFragmentRoot((IFile)target);
+					} else {
+						// external jar
+						return javaProject.getPackageFragmentRoot0(jarPath);
 					}
 				}
 			} catch (JavaModelException e) {
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java
index 78a8b4a..96a83ec 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/util/Util.java
@@ -1081,6 +1081,43 @@ public class Util {
 	}
 	
 	/*
+	 * Returns the source attachment property for this package fragment root's path
+	 */
+	public static String getSourceAttachmentProperty(IPath path) throws JavaModelException {
+		Map rootPathToAttachments = JavaModelManager.getJavaModelManager().rootPathToAttachments;
+		String property = (String) rootPathToAttachments.get(path);
+		if (property == null) {
+			try {
+				property = ResourcesPlugin.getWorkspace().getRoot().getPersistentProperty(getSourceAttachmentPropertyName(path));
+				if (property == null) {
+					rootPathToAttachments.put(path, PackageFragmentRoot.NO_SOURCE_ATTACHMENT);
+					return null;
+				}
+				rootPathToAttachments.put(path, property);
+				return property;
+			} catch (CoreException e)  {
+				throw new JavaModelException(e);
+			}
+		} else if (property.equals(PackageFragmentRoot.NO_SOURCE_ATTACHMENT)) {
+			return null;
+		} else
+			return property;
+	}
+	
+	private static QualifiedName getSourceAttachmentPropertyName(IPath path) {
+		return new QualifiedName(JavaCore.PLUGIN_ID, "sourceattachment: " + path.toOSString()); //$NON-NLS-1$
+	}
+
+	public static void setSourceAttachmentProperty(IPath path, String property) {
+		JavaModelManager.getJavaModelManager().rootPathToAttachments.put(path, property);
+		try {
+			ResourcesPlugin.getWorkspace().getRoot().setPersistentProperty(getSourceAttachmentPropertyName(path), property);
+		} catch (CoreException e) {
+			e.printStackTrace();
+		}
+	}
+	
+	/*
 	 * Returns the declaring type signature of the element represented by the given binding key.
 	 * Returns the signature of the element if it is a type.
 	 * 
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/HierarchyScope.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/HierarchyScope.java
index 7af6d33..233858b 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/HierarchyScope.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/HierarchyScope.java
@@ -162,22 +162,19 @@ public class HierarchyScope extends AbstractSearchScope implements SuffixConstan
 			HashSet visited = new HashSet();
 			for (int i = 0; i < projects.length; i++) {
 				JavaProject project = (JavaProject) projects[i];
-				IClasspathEntry[] classpath = project.getResolvedClasspath();
-				for (int j = 0; j < classpath.length; j++) {
-					if (rootPath.equals(classpath[j].getPath())) {
-						// add the project and its binary pkg fragment roots
-						IPackageFragmentRoot[] roots = project.getAllPackageFragmentRoots();
-						set.add(project.getPath());
-						for (int k = 0; k < roots.length; k++) {
-							IPackageFragmentRoot pkgFragmentRoot = roots[k];
-							if (pkgFragmentRoot.getKind() == IPackageFragmentRoot.K_BINARY) {
-								set.add(pkgFragmentRoot.getPath());
-							}
+				IClasspathEntry entry = project.getClasspathEntryFor(rootPath);
+				if (entry != null) {
+					// add the project and its binary pkg fragment roots
+					IPackageFragmentRoot[] roots = project.getAllPackageFragmentRoots();
+					set.add(project.getPath());
+					for (int k = 0; k < roots.length; k++) {
+						IPackageFragmentRoot pkgFragmentRoot = roots[k];
+						if (pkgFragmentRoot.getKind() == IPackageFragmentRoot.K_BINARY) {
+							set.add(pkgFragmentRoot.getPath());
 						}
-						// add the dependent projects
-						this.computeDependents(project, set, visited);
-						break;
 					}
+					// add the dependent projects
+					this.computeDependents(project, set, visited);
 				}
 			}
 		} else {
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/IndexSelector.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/IndexSelector.java
index b68514c..26f8505 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/IndexSelector.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/IndexSelector.java
@@ -64,13 +64,11 @@ public static boolean canSeeFocus(IJavaElement focus, boolean isPolymorphicSearc
 		IJavaProject[] allProjects = model.getJavaProjects();
 		for (int i = 0, length = allProjects.length; i < length; i++) {
 			JavaProject otherProject = (JavaProject) allProjects[i];
-			IClasspathEntry[] entries = otherProject.getResolvedClasspath();
-			for (int j = 0, length2 = entries.length; j < length2; j++) {
-				IClasspathEntry entry = entries[j];
-				if (entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY && entry.getPath().equals(projectOrJarPath))
-					if (canSeeFocus(focus, otherProject, focusEntries))
-						return true;
-			}
+			IClasspathEntry entry = otherProject.getClasspathEntryFor(projectOrJarPath);
+			if (entry != null 
+					&& entry.getEntryKind() == IClasspathEntry.CPE_LIBRARY 
+					&& canSeeFocus(focus, otherProject, focusEntries))
+				return true;
 		}
 		return false;
 	} catch (JavaModelException e) {
diff --git a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java
index 74430f8..8cd1007 100644
--- a/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java
+++ b/org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchScope.java
@@ -129,9 +129,9 @@ void add(JavaProject javaProject, IPath pathToAdd, int includeMask, HashSet visi
 		switch (entry.getEntryKind()) {
 			case IClasspathEntry.CPE_LIBRARY:
 				IClasspathEntry rawEntry = null;
-				Map resolvedPathToRawEntries = perProjectInfo.resolvedPathToRawEntries;
-				if (resolvedPathToRawEntries != null) {
-					rawEntry = (IClasspathEntry) resolvedPathToRawEntries.get(entry.getPath());
+				Map rootPathToRawEntries = perProjectInfo.rootPathToRawEntries;
+				if (rootPathToRawEntries != null) {
+					rawEntry = (IClasspathEntry) rootPathToRawEntries.get(entry.getPath());
 				}
 				if (rawEntry == null) break;
 				switch (rawEntry.getEntryKind()) {

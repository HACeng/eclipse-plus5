commit efbb35fec136307638ca255f1be7d8d4cb9becd1
Author: Stephan Herrmann <stephan.herrmann@berlin.de>
Date:   Thu Feb 11 01:09:40 2016 +0100

    Bug 487586: [1.8][compiler] intersection type wrongly claims to be a
    functional interface
    
    Change-Id: I8e3c1f9d9880ff5c84b76143286c8624d5ba36dd

3	9	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ExpressionContextTests.java
2	2	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JSR335ClassFileTest.java
48	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaExpressionsTest.java
5	12	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
2	2	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java
10	9	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
20	28	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/IntersectionTypeBinding18.java
2	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java
3	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ExpressionContextTests.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ExpressionContextTests.java
index c0763a3..6cc0ae1 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ExpressionContextTests.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/ExpressionContextTests.java
@@ -65,7 +65,7 @@ public void test001() {
 }
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=399773, [1.8][compiler] Cast expression should allow for additional bounds to form intersection types
 public void test002() {
-	this.runNegativeTest(
+	this.runConformTest(
 			new String[] {
 				"X.java",
 				"interface I {\n" +
@@ -79,13 +79,7 @@ public void test002() {
 				"public class X {\n" +
 				"	Object p = (I & J) () -> {};\n" +
 				"}\n" ,
-			},
-			"----------\n" + 
-			"1. ERROR in X.java (at line 10)\n" + 
-			"	Object p = (I & J) () -> {};\n" + 
-			"	                   ^^^^^\n" +
-			"The target type of this expression is not a functional interface: more than one of the intersecting interfaces are functional\n" + 
-			"----------\n");
+			});
 }
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=399773, [1.8][compiler] Cast expression should allow for additional bounds to form intersection types
 public void test003() {
@@ -257,7 +251,7 @@ public void test008() {
 			"3. ERROR in X.java (at line 10)\n" + 
 			"	Object p = (@Marker java.lang. @Readonly String & I & J) () -> {};\n" + 
 			"	                                                         ^^^^^\n" +
-			"The target type of this expression is not a functional interface: more than one of the intersecting interfaces are functional\n" + 
+			"The target type of this expression must be a functional interface\n" + 
 			"----------\n");
 }
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=399773, [1.8][compiler] Cast expression should allow for additional bounds to form intersection types
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JSR335ClassFileTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JSR335ClassFileTest.java
index d9cc6a6..d38273d 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JSR335ClassFileTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/JSR335ClassFileTest.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2013, 2014 Jesper Steen Moller, IBM and others.
+ * Copyright (c) 2013, 2016 Jesper Steen Moller, IBM and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -3212,7 +3212,7 @@ public void test435869() throws IOException, ClassFormatException {
 				"}\n" +
 				"interface J {\n" +
 				"  public void foo();\n" +
-				"  public void bar();\n" +
+				"  public default void bar() {}\n" +
 				"}\n" +
 				"interface K {\n" +
 				"  public void foo();\n" +
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaExpressionsTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaExpressionsTest.java
index b426473..698d72d 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaExpressionsTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaExpressionsTest.java
@@ -5882,6 +5882,54 @@ public void test477263b() {
 	},
 	"10");
 }
+public void testBug487586() {
+	runNegativeTest(
+		new String[] {
+			"X.java",
+			"\n" + 
+			"interface Calculator {\n" + 
+			"    public int calculate(int a, int b);\n" + 
+			"}\n" + 
+			"\n" + 
+			"interface Sumator {\n" + 
+			"    public int test();\n" + 
+			"\n" + 
+			"    public int test3(int a, int b);\n" + 
+			"}\n" + 
+			"\n" + 
+			"// intersection of both types\n" + 
+			"interface Both extends Sumator, Calculator {\n" + 
+			"\n" + 
+			"}\n" + 
+			"public class X {\n" + 
+			"  public static void main(String[] args) {\n" + 
+			"    Calculator test = (Calculator & Sumator) (a, b) -> a + b;\n" + 
+			"    System.out.println(test.calculate(2, 3));\n" + 
+			"\n" + 
+			"    Sumator sumator = (Calculator & Sumator) (a, b) -> a + b; // does compile, but throws an Exception\n" + 
+			"    sumator.test();\n" + 
+			"\n" + 
+			"    Both both = (Both) (a, b) -> a + b; // does not compile\n" + 
+			"  }\n" + 
+			"}\n"
+		},
+		"----------\n" + 
+		"1. ERROR in X.java (at line 18)\n" + 
+		"	Calculator test = (Calculator & Sumator) (a, b) -> a + b;\n" + 
+		"	                                         ^^^^^^^^^^^^^^^\n" + 
+		"The target type of this expression must be a functional interface\n" + 
+		"----------\n" + 
+		"2. ERROR in X.java (at line 21)\n" + 
+		"	Sumator sumator = (Calculator & Sumator) (a, b) -> a + b; // does compile, but throws an Exception\n" + 
+		"	                                         ^^^^^^^^^^^^^^^\n" + 
+		"The target type of this expression must be a functional interface\n" + 
+		"----------\n" + 
+		"3. ERROR in X.java (at line 24)\n" + 
+		"	Both both = (Both) (a, b) -> a + b; // does not compile\n" + 
+		"	                   ^^^^^^^^^^^^^^^\n" + 
+		"The target type of this expression must be a functional interface\n" + 
+		"----------\n");
+}
 public static Class testClass() {
 	return LambdaExpressionsTest.class;
 }
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
index 23282ac..60833e2 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
@@ -7311,9 +7311,7 @@ public void testGenericArrayCreation() {
 
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=420598, [1.8][compiler] Incorrect error about intersection cast type not being a functional interface. 
 public void testIntersectionCast() {
-		this.runNegativeTest(
-			true /* skipJavac */,
-			JavacTestOptions.EclipseHasABug.EclipseBug424410,
+		this.runConformTest(
 			new String[] {
 					"X.java", 
 					"import java.io.Serializable;\n" +
@@ -7328,23 +7326,18 @@ public void testIntersectionCast() {
 					"interface L {\n" +
 					"	void foo();\n" +
 					"}\n" +
+					"interface All extends J, I, K, L {}\n" +
 					"public class X {\n" +
 					"	public static void main(String[] args) {\n" +
 					"		I i = (I & Serializable) () -> {};\n" +
 					"		i = (I & J & K) () -> {};\n" +
 					"		i = (J & I & K) () -> {};  \n" +
 					"		i = (J & I & K & L) () -> {};  \n" +
+					"		i = (All) () -> {};\n" +
 					"	}\n" +
-					"}\n" + 
-					""
+					"}\n"
 			},
-			"----------\n" + 
-			"1. ERROR in X.java (at line 18)\n" + 
-			"	i = (J & I & K & L) () -> {};  \n" + 
-			"	                    ^^^^^\n" + 
-			"The target type of this expression is not a functional interface: more than one of the intersecting interfaces are functional\n" + 
-			"----------\n"
-		);
+			"");
 }
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=421711, [1.8][compiler] '_' as identifier for a lambda parameter should be rejected.
 public void testUnderScoreParameter() {
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
index 8e0ba63..f26bf1d 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2015 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -5245,7 +5245,7 @@ public void testBug470794_001() throws JavaModelException {
 			"}\n" +
 			"interface J {\n" +
 			"  public void foo();\n" +
-			"  public void bar();\n" +
+			"  public default void bar() {}\n" +
 			"}\n" +
 			"interface K {\n" +
 			"  public void foo();\n" +
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java
index 5025a1e..08f5e9e 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java
@@ -131,7 +131,7 @@ public abstract class FunctionalExpression extends Expression {
 		// we simulate an *invocation* of this functional expression,
 		// where the expected type of the expression is the return type of the sam:
 		MethodBinding sam = this.expectedType.getSingleAbstractMethod(this.enclosingScope, true);
-		if (sam != null) {
+		if (sam != null && sam.problemId() != ProblemReasons.NoSuchSingleAbstractMethod) {
 			if (sam.isConstructor())
 				return sam.declaringClass;
 			else
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
index 8b5dc9a..21918ab 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
@@ -825,6 +825,9 @@ public class LambdaExpression extends FunctionalExpression implements IPolyExpre
 		// copy here is potentially compatible with the target type and has its shape fully computed: i.e value/void compatibility is determined and result expressions have been gathered.
 		targetType = findGroundTargetType(this.enclosingScope, targetType, argumentsTypeElided());
 		MethodBinding sam = targetType.getSingleAbstractMethod(this.enclosingScope, true);
+		if (sam == null || sam.problemId() == ProblemReasons.NoSuchSingleAbstractMethod) {
+			return false;
+		}
 		if (sam.returnType.id == TypeIds.T_void) {
 			if (!copy.voidCompatible)
 				return false;
@@ -1271,17 +1274,15 @@ public class LambdaExpression extends FunctionalExpression implements IPolyExpre
 	public TypeBinding[] getMarkerInterfaces() {
 		if (this.expectedType instanceof IntersectionTypeBinding18) {
 			Set markerBindings = new LinkedHashSet();
-			TypeBinding[] intersectionTypes = ((IntersectionTypeBinding18)this.expectedType).intersectingTypes;
+			IntersectionTypeBinding18 intersectionType = (IntersectionTypeBinding18)this.expectedType;
+			TypeBinding[] intersectionTypes = intersectionType.intersectingTypes;
+			TypeBinding samType = intersectionType.getSAMType(this.enclosingScope);
 			for (int i = 0,max = intersectionTypes.length; i < max; i++) {
 				TypeBinding typeBinding = intersectionTypes[i];
-				MethodBinding methodBinding = typeBinding.getSingleAbstractMethod(this.scope, true);
-				// Why doesn't getSingleAbstractMethod do as the javadoc says, and return null
-				// when it is not a SAM type
-				if (!(methodBinding instanceof ProblemMethodBinding && ((ProblemMethodBinding)methodBinding).problemId()==ProblemReasons.NoSuchSingleAbstractMethod)) {
-					continue;
-				}
-				if (typeBinding.id == TypeIds.T_JavaIoSerializable) {
-					// Serializable is captured as a bitflag
+				if (!typeBinding.isInterface()							// only interfaces
+					|| TypeBinding.equalsEquals(samType, typeBinding)	// except for the samType itself
+					|| typeBinding.id == TypeIds.T_JavaIoSerializable)	// but Serializable is captured as a bitflag
+				{
 					continue;
 				}
 				markerBindings.add(typeBinding);
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
index a7d145d..a0b9f3d 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ReferenceExpression.java
@@ -849,7 +849,7 @@ public class ReferenceExpression extends FunctionalExpression implements IPolyEx
 	public ReferenceExpression resolveExpressionExpecting(TypeBinding targetType, Scope scope, InferenceContext18 inferenceContext) {
 		if (this.exactMethodBinding != null) { // We may see inference variables in target type.
 			MethodBinding functionType = targetType.getSingleAbstractMethod(scope, true);
-			if (functionType == null)
+			if (functionType == null || functionType.problemId() == ProblemReasons.NoSuchSingleAbstractMethod)
 				return null;
 			int n = functionType.parameters.length;
 			int k = this.exactMethodBinding.parameters.length;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/IntersectionTypeBinding18.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/IntersectionTypeBinding18.java
index 4a3df99..48fc7b0 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/IntersectionTypeBinding18.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/IntersectionTypeBinding18.java
@@ -20,6 +20,7 @@ package org.eclipse.jdt.internal.compiler.lookup;
 
 import java.util.Set;
 
+import org.eclipse.jdt.core.compiler.InvalidInputException;
 import org.eclipse.jdt.internal.compiler.ast.Wildcard;
 import org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants;
 
@@ -51,28 +52,24 @@ public class IntersectionTypeBinding18 extends ReferenceBinding { // abstraction
 	public TypeBinding clone(TypeBinding enclosingType) {
 		return new IntersectionTypeBinding18(this);
 	}
-	
-	public MethodBinding getSingleAbstractMethod(Scope scope, boolean replaceWildcards) {
-		int index = replaceWildcards ? 0 : 1;
-		if (this.singleAbstractMethod != null) {
-			if (this.singleAbstractMethod[index] != null)
-			return this.singleAbstractMethod[index];
-		} else {
-			this.singleAbstractMethod = new MethodBinding[2];
+
+	@Override
+	protected MethodBinding[] getInterfaceAbstractContracts(Scope scope) throws InvalidInputException {
+		int typesLength = this.intersectingTypes.length;
+		MethodBinding[][] methods = new MethodBinding[typesLength][];
+		int contractsLength = 0;
+		for (int i = 0; i < typesLength; i++) {
+			methods[i] = this.intersectingTypes[i].getInterfaceAbstractContracts(scope);
+			contractsLength += methods[i].length;
 		}
-		MethodBinding sam = samProblemBinding;  // guilty unless proven innocent !
-		for (int i = 0; i < this.length; i++) {
-			MethodBinding method = this.intersectingTypes[i].getSingleAbstractMethod(scope, replaceWildcards);
-			if (method != null) {
-				if (method.isValidBinding()) {
-					if (sam.isValidBinding())
-						return this.singleAbstractMethod[index] = new ProblemMethodBinding(TypeConstants.ANONYMOUS_METHOD, null, ProblemReasons.IntersectionHasMultipleFunctionalInterfaces);
-					else
-						sam = method;
-				}
-			}
+		MethodBinding[] contracts = new MethodBinding[contractsLength];
+		int idx = 0;
+		for (int i = 0; i < typesLength; i++) {
+			int len = methods[i].length;
+			System.arraycopy(methods[i], 0, contracts, idx, len);
+			idx += len;
 		}
-		return this.singleAbstractMethod[index] = sam; // I don't see a value in building the notional interface described in 9.8 - it appears just pedantic/normative - perhaps it plays a role in wildcard parameterized types ?
+		return contracts;
 	}
 
 	public boolean hasTypeBit(int bit) { // Stephan ??
@@ -256,21 +253,16 @@ public class IntersectionTypeBinding18 extends ReferenceBinding { // abstraction
 	}
 
 	public TypeBinding getSAMType(Scope scope) {
-		TypeBinding samType = null;
 		for (int i = 0, max = this.intersectingTypes.length; i < max; i++) {
 			TypeBinding typeBinding = this.intersectingTypes[i];
 			MethodBinding methodBinding = typeBinding.getSingleAbstractMethod(scope, true);
 			// Why doesn't getSingleAbstractMethod do as the javadoc says, and return null
 			// when it is not a SAM type
-			if (methodBinding instanceof ProblemMethodBinding && ((ProblemMethodBinding) methodBinding).problemId()==ProblemReasons.NoSuchSingleAbstractMethod) {
-				continue;
-			}
-			if (samType != null) {
-				return null; // There is more than one (!), so we don't know which
+			if (methodBinding != null && methodBinding.problemId() != ProblemReasons.NoSuchSingleAbstractMethod) {
+				return typeBinding; // answer the first SAM we find
 			}
-			samType = typeBinding;
 		}
-		return samType;
+		return null;
 	}
 
 	@Override
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java
index 569bc99..0ac8193 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ReferenceBinding.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2015 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -1922,7 +1922,7 @@ protected int applyCloseableInterfaceWhitelists() {
 	return 0;
 }
 
-private MethodBinding [] getInterfaceAbstractContracts(Scope scope) throws InvalidInputException {
+protected MethodBinding [] getInterfaceAbstractContracts(Scope scope) throws InvalidInputException {
 	
 	if (!isInterface() || !isValidBinding()) {
 		throw new InvalidInputException("Not a functional interface"); //$NON-NLS-1$
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java
index 80997ca..a2612d0 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeBinding.java
@@ -1565,11 +1565,12 @@ public TypeVariableBinding[] typeVariables() {
 }
 
 /**
- * Return the single abstract method of a functional interface, or null, if the receiver is not a functional interface as defined in JLS 9.8.
+ * Return the single abstract method of a functional interface, or one of {@code null} or {@link ReferenceBinding#samProblemBinding}, if the receiver is not a functional interface as defined in JLS 9.8.
+ * In particular {@code null} is answered if the receiver is not a reference type, or is a problem type.
  * @param scope scope
  * @param replaceWildcards Should wildcards be replaced following JLS 9.8? Say false for lambdas with explicit argument types which should apply 18.5.3
  *  
- * @return The single abstract method of a functional interface, or null, if the receiver is not a functional interface. 
+ * @return The single abstract method of a functional interface, or one of {@code null} or {@link ReferenceBinding#samProblemBinding}, if the receiver is not a functional interface. 
  */
 public MethodBinding getSingleAbstractMethod(Scope scope, boolean replaceWildcards) {
 	return null;
commit 0ce6ef6fc79f7d6e2df9f237a8830f5d21f17ce9
Author: Stephan Herrmann <stephan.herrmann@berlin.de>
Date:   Fri Feb 12 18:29:34 2016 +0100

    Bug 487586: [1.8][compiler] intersection type wrongly claims to be a
    functional interface
    
    - cleanup
    
    Change-Id: Ic925874f490d912f01d3f49f9b41621fa7463a55

2	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
0	4	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java
0	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ProblemReasons.java
0	8	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
index a6b322b..40b86d6 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
@@ -1655,7 +1655,8 @@ void setSourceStart(int sourceStart);
 	int IllegalArrayTypeInIntersectionCast = TypeRelated + 893;
 	/** @since 3.10 */
 	int DuplicateBoundInIntersectionCast = TypeRelated + 894;
-	/** @since 3.10 */
+	/** @deprecated This problem is no longer reported; number Of functional interface is not an issue, number of abstract methods is.
+	 * @since 3.10 */
 	int MultipleFunctionalInterfaces = TypeRelated + 895;
 	/** @since 3.10 */
 	int StaticInterfaceMethodNotBelow18 = Internal + Syntax + 896;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java
index 08f5e9e..39f9085 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java
@@ -205,10 +205,6 @@ public abstract class FunctionalExpression extends Expression {
 				blockScope.problemReporter().illFormedParameterizationOfFunctionalInterface(this);
 				this.hasReportedSamProblem = true;
 				break;
-			case ProblemReasons.IntersectionHasMultipleFunctionalInterfaces:
-				blockScope.problemReporter().multipleFunctionalInterfaces(this);
-				this.hasReportedSamProblem = true;
-				break;
 		}
 		return null;
 	}
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
index 21918ab..7227965 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
@@ -1101,7 +1101,6 @@ public class LambdaExpression extends FunctionalExpression implements IPolyExpre
 			case IProblem.LambdaDescriptorMentionsUnmentionable:
 			case IProblem.TargetTypeNotAFunctionalInterface:
 			case IProblem.illFormedParameterizationOfFunctionalInterface:
-			case IProblem.MultipleFunctionalInterfaces:
 			case IProblem.NoGenericLambda:
 				return;
 			default: 
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ProblemReasons.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ProblemReasons.java
index 21d07eb..72c969d 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ProblemReasons.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ProblemReasons.java
@@ -36,7 +36,7 @@ public interface ProblemReasons {
 	final int VarargsElementTypeNotVisible = 16;
 	final int NoSuchSingleAbstractMethod = 17;
 	final int NotAWellFormedParameterizedType = 18;
-	final int IntersectionHasMultipleFunctionalInterfaces = 19;
+	// no longer in use: final int IntersectionHasMultipleFunctionalInterfaces = 19;
 	final int NonStaticOrAlienTypeReceiver = 20;
 	final int AttemptToBypassDirectSuper = 21; // super access within default method
 	final int DefectiveContainerAnnotationType = 22;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
index f3f50e2..e365871 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
@@ -9960,14 +9960,6 @@ public void duplicateBoundInIntersectionCast(TypeReference typeReference) {
 			typeReference.sourceEnd);
 }
 
-public void multipleFunctionalInterfaces(FunctionalExpression functionalExpression) {
-	this.handle(
-			IProblem.MultipleFunctionalInterfaces,
-			NoArgument,
-			NoArgument,
-			functionalExpression.sourceStart,
-			functionalExpression.diagnosticsSourceEnd());
-}
 public void lambdaRedeclaresArgument(Argument argument) {
 	String[] arguments = new String[] {new String(argument.name)};
 	this.handle(
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
index 2319d37..34e1866 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
@@ -757,7 +757,7 @@
 892 = Base types are not allowed in intersection cast operator
 893 = Arrays are not allowed in intersection cast operator
 894 = Duplicate type in intersection cast operator
-895 = The target type of this expression is not a functional interface: more than one of the intersecting interfaces are functional
+#[obsolete] 895 = The target type of this expression is not a functional interface: more than one of the intersecting interfaces are functional
 896 = Static methods are allowed in interfaces only at source level 1.8 or above
 
 897 = Duplicate annotation of non-repeatable type @{0}. Only annotation types marked @Repeatable can be used multiple times at one target.

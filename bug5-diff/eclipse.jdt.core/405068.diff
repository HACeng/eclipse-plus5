commit 07061c09a4baa11ac0a53e425e478493f3662bd4
Author: ssankaran <srikanth_sankaran@in.ibm.com>
Date:   Tue Apr 23 19:14:46 2013 +0530

    Fixed Bug 405068 - [1.8][compiler][codegen] Generate code for lambdas
    that capture locals from enclosing/outer contexts

97	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaExpressionsTest.java
5	30	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
13	5	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java
66	4	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java
27	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaExpressionsTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaExpressionsTest.java
index a6f1f3d..1bce134 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaExpressionsTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/LambdaExpressionsTest.java
@@ -272,6 +272,103 @@ public void test012() {
 			},
 			"Some Y");
 }
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=406175, [1.8][compiler][codegen] Generate code for lambdas with expression body.
+public void test013() {
+	this.runConformTest(
+			new String[] {
+				"X.java",
+				"interface I {\n" +
+				"    void foo(String s);\n" +
+				"}\n" +
+				"public class X {\n" +
+				"    public static void main(String [] args) {\n" +
+				"        int in = 12345678;\n" +
+				"        I i = (s) -> {\n" +
+				"            I j = (s2) -> {\n" +
+				"                System.out.println(s + s2 + in);  \n" +
+				"            };\n" +
+				"            j.foo(\"Number=\");\n" +
+				"        };\n" +
+				"        i.foo(\"The \");\n" +
+				"    }\n" +
+				"}\n"
+			},
+			"The Number=12345678");
+}
+public void test014() {
+	this.runConformTest(
+			new String[] {
+					"X.java",
+					"interface I {\n" + 
+					"	void doit();\n" + 
+					"}\n" + 
+					"public class X {\n" + 
+					"  public static void nonmain(String[] args) {\n" + 
+					"    int var = 2;\n" + 
+					"    I x2 = () -> {\n" + 
+					"      System.out.println(\"Argc = \" + args.length);\n" + 
+					"      for (int i = 0; i < args.length; i++) {\n" +
+					"          System.out.println(\"Argv[\" + i + \"] = \" + args[i]);\n" +
+					"      }\n" +
+					"    };\n" +
+					"    x2.doit();\n" +
+					"    var=2;\n" + 
+					"  }\n" +
+					"  public static void main(String[] args) {\n" + 
+					"      nonmain(new String[] {\"Hello! \", \"World!\" });\n" +
+					"  }\n" +
+					"}" ,
+				},
+				"Argc = 2\n" + 
+				"Argv[0] = Hello! \n" + 
+				"Argv[1] = World!");
+}
+public void test015() {
+	this.runConformTest(
+			new String[] {
+					"X.java",
+					"interface I {\n" + 
+					"	void doit();\n" + 
+					"}\n" + 
+					"public class X {\n" + 
+					"  public static void main(String[] args) {\n" + 
+					"    try {\n" + 
+					"      new java.io.File((String) null).getCanonicalPath();\n" + 
+					"    } catch (NullPointerException | java.io.IOException ioe) {\n" + 
+					"      I x2 = () -> {\n" + 
+					"        System.out.println(ioe.getMessage()); // OK: args is not re-assignment since declaration/first assignment\n" + 
+					"      };\n" +
+					"      x2.doit();\n" +
+					"    };\n"+
+					"  }\n" +
+					"}\n"
+				},
+				"null");
+}
+public void test016() {
+	this.runConformTest(
+			new String[] {
+					"X.java",
+					"interface I {\n" + 
+					"	void doit();\n" + 
+					"}\n" + 
+					"public class X {\n" + 
+					"  public static void main(String[] args) {\n" + 
+					"    java.util.List<String> list = new java.util.ArrayList<>();\n" + 
+					"    list.add(\"SomeString\");\n" +
+					"    for (String s : list) {\n" + 
+					"      I x2 = () -> {\n" + 
+					"        System.out.println(s); // OK: args is not re-assignment since declaration/first assignment\n" + 
+					"      };\n" + 
+					"      x2.doit();\n" +
+					"    };\n" + 
+					"  }\n" + 
+					"\n" +
+					"}\n" ,
+				},
+				"SomeString");
+}
+
 public static Class testClass() {
 	return LambdaExpressionsTest.class;
 }
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
index c26bbb2..62a8dfa 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
@@ -1815,12 +1815,7 @@ public void test049() {
 					"  }\n" + 
 					"}" ,
 				},
-				"----------\n" + 
-				"1. ERROR in X.java (at line 8)\n" + 
-				"	System.out.println(args); // OK: args is not re-assignment since declaration/first assignment\n" + 
-				"	                   ^^^^\n" + 
-				"Missing code implementation in the compiler\n" +  // expected since emulation path computation is not in place.
-				"----------\n");
+				"");
 }
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=382721, [1.8][compiler] Effectively final variables needs special treatment
 public void test050() {
@@ -1843,12 +1838,7 @@ public void test050() {
 					"  }\n" +
 					"}\n"
 				},
-				"----------\n" + 
-				"1. ERROR in X.java (at line 10)\n" + 
-				"	System.out.println(ioe.getMessage()); // OK: args is not re-assignment since declaration/first assignment\n" + 
-				"	                   ^^^\n" + 
-				"Missing code implementation in the compiler\n" + // expected since emulation path computation is not in place.
-				"----------\n");
+				"");
 }
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=382721, [1.8][compiler] Effectively final variables needs special treatment
 public void test051() {
@@ -1871,12 +1861,7 @@ public void test051() {
 					"\n" +
 					"}\n" ,
 				},
-				"----------\n" + 
-				"1. ERROR in X.java (at line 9)\n" + 
-				"	System.out.println(s); // OK: args is not re-assignment since declaration/first assignment\n" + 
-				"	                   ^\n" + 
-				"Missing code implementation in the compiler\n" + // expected since emulation path computation is not in place.
-				"----------\n");
+				"");
 }
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=382721, [1.8][compiler] Effectively final variables needs special treatment
 public void test052() {
@@ -1928,12 +1913,7 @@ public void test053() {
 					"  }\n" +
 					"}\n" ,
 				},
-				"----------\n" + 
-				"1. ERROR in X.java (at line 10)\n" + 
-				"	System.out.println(e);\n" + 
-				"	                   ^\n" + 
-				"Missing code implementation in the compiler\n" + 
-				"----------\n");
+				"");
 }
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=382721, [1.8][compiler] Effectively final variables needs special treatment
 public void test054() {
@@ -2105,12 +2085,7 @@ public void test060() {
 					"	}\n" +
 					"}\n",
 				},
-				"----------\n" + 
-				"1. ERROR in X.java (at line 8)\n" + 
-				"	System.out.println(is);\n" + 
-				"	                   ^^\n" + 
-				"Missing code implementation in the compiler\n" + // expected. 
-				"----------\n");
+				"");
 }
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=382721, [1.8][compiler] Effectively final variables needs special treatment
 public void test061() {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java
index e928fff..7cdb0b6 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java
@@ -802,10 +802,18 @@ public class ClassFile implements TypeConstants, TypeIds {
 			completeMethodInfo(methodBinding, methodAttributeOffset, attributeNumber);
 		}
 		
-		LambdaExpression [] lambdas = this.referenceBinding.getLambdaMethods();
-		for (int i = 0, length = lambdas == null ? 0 : lambdas.length; i < length; i++) {
-			lambdas[i].generateCode(this.referenceBinding.scope, this);
-		}
+		boolean doneGeneratingLambdas = false;
+		int currentLambda = 0;
+		do {
+			LambdaExpression [] lambdas = this.referenceBinding.getLambdaMethods();  // refresh as a lambda code generation could schedule nested lambdas for code generation.
+			int lambdaCount = lambdas == null ? 0 : lambdas.length;
+			if (lambdaCount > currentLambda) {
+				lambdas[currentLambda++].generateCode(this.referenceBinding.scope, this);
+			} else {
+				doneGeneratingLambdas = true;
+			}
+		} while (!doneGeneratingLambdas);
+		
 		// add synthetic methods infos
 		SyntheticMethodBinding[] syntheticMethods = this.referenceBinding.syntheticMethods();
 		if (syntheticMethods != null) {
@@ -2476,7 +2484,7 @@ public class ClassFile implements TypeConstants, TypeIds {
 			this.contents[localContentsOffset++] = (byte) (methodHandleIndex >> 8);
 			this.contents[localContentsOffset++] = (byte) methodHandleIndex;
 
-			char [] instantiatedSignature = functional.signature();
+			char [] instantiatedSignature = functional.descriptor.signature();
 			int methodTypeIndex = this.constantPool.literalIndexForMethodType(instantiatedSignature);
 			this.contents[localContentsOffset++] = (byte) (methodTypeIndex >> 8);
 			this.contents[localContentsOffset++] = (byte) methodTypeIndex;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
index fd437c9..619ba3c 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
@@ -45,10 +45,12 @@ import org.eclipse.jdt.internal.compiler.lookup.MethodScope;
 import org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding;
 import org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding;
 import org.eclipse.jdt.internal.compiler.lookup.Scope;
+import org.eclipse.jdt.internal.compiler.lookup.SyntheticArgumentBinding;
 import org.eclipse.jdt.internal.compiler.lookup.TagBits;
 import org.eclipse.jdt.internal.compiler.lookup.TypeBinding;
 import org.eclipse.jdt.internal.compiler.lookup.TypeConstants;
 import org.eclipse.jdt.internal.compiler.lookup.TypeIds;
+import org.eclipse.jdt.internal.compiler.lookup.VariableBinding;
 import org.eclipse.jdt.internal.compiler.parser.Parser;
 import org.eclipse.jdt.internal.compiler.problem.AbortCompilation;
 import org.eclipse.jdt.internal.compiler.problem.AbortCompilationUnit;
@@ -69,6 +71,9 @@ public class LambdaExpression extends FunctionalExpression implements ReferenceC
 	private boolean returnsVoid;
 	private boolean throwsException;
 	private LambdaExpression original = this;
+	private SyntheticArgumentBinding[] outerLocalVariables = NO_SYNTHETIC_ARGUMENTS;
+	private int outerLocalVariablesSlotSize = 0;
+	private static final SyntheticArgumentBinding [] NO_SYNTHETIC_ARGUMENTS = new SyntheticArgumentBinding[0];
 	
 	public LambdaExpression(CompilationResult compilationResult, Argument [] arguments, Statement body) {
 		super(compilationResult);
@@ -86,7 +91,17 @@ public class LambdaExpression extends FunctionalExpression implements ReferenceC
 		this.binding.selector = CharOperation.concat(TypeConstants.ANONYMOUS_METHOD, Integer.toString(this.ordinal).toCharArray());
 		int pc = codeStream.position;
 		int invokeDynamicNumber = codeStream.classFile.recordBootstrapMethod(this);
-		codeStream.invokeDynamic(invokeDynamicNumber, 0, 1, TypeConstants.ANONYMOUS_METHOD, CharOperation.concat("()".toCharArray(), this.descriptor.declaringClass.signature())); //$NON-NLS-1$
+		StringBuffer signature = new StringBuffer();
+		signature.append('(');
+		for (int i = 0, length = this.outerLocalVariables == null ? 0 : this.outerLocalVariables.length; i < length; i++) {
+			signature.append(this.outerLocalVariables[i].type.signature());
+			LocalVariableBinding capturedOuterLocal = this.outerLocalVariables[i].actualOuterLocalVariable;
+			VariableBinding[] path = currentScope.getEmulationPath(capturedOuterLocal);
+			codeStream.generateOuterAccess(path, this, capturedOuterLocal, currentScope);
+		}
+		signature.append(')');
+		signature.append(this.descriptor.declaringClass.signature());
+		codeStream.invokeDynamic(invokeDynamicNumber, this.outerLocalVariablesSlotSize, 1, TypeConstants.ANONYMOUS_METHOD, signature.toString().toCharArray());
 		codeStream.recordPositionsFrom(pc, this.sourceStart);		
 	}
 
@@ -651,7 +666,6 @@ public class LambdaExpression extends FunctionalExpression implements ReferenceC
 	}
 	
 	public void generateCode(ClassFile classFile) {
-
 		classFile.generateMethodInfoHeader(this.binding);
 		int methodAttributeOffset = classFile.contentsOffset;
 		int attributeNumber = classFile.generateMethodInfoAttributes(this.binding);
@@ -660,8 +674,15 @@ public class LambdaExpression extends FunctionalExpression implements ReferenceC
 		CodeStream codeStream = classFile.codeStream;
 		codeStream.reset(this, classFile);
 		// initialize local positions
-		this.scope.computeLocalVariablePositions(this.binding.isStatic() ? 0 : 1, codeStream);
-
+		this.scope.computeLocalVariablePositions(this.outerLocalVariablesSlotSize + (this.binding.isStatic() ? 0 : 1), codeStream);
+		if (this.outerLocalVariables != null) {
+			for (int i = 0, max = this.outerLocalVariables.length; i < max; i++) {
+				LocalVariableBinding argBinding;
+				codeStream.addVisibleLocalVariable(argBinding = this.outerLocalVariables[i]);
+				codeStream.record(argBinding);
+				argBinding.recordInitializationStartPC(0);
+			}
+		}
 		// arguments initialization for local variable debug attributes
 		if (this.arguments != null) {
 			for (int i = 0, max = this.arguments.length; i < max; i++) {
@@ -700,6 +721,47 @@ public class LambdaExpression extends FunctionalExpression implements ReferenceC
 	public char[] signature() {
 		return this.binding.signature();
 	}
+
+	public void addSyntheticArgument(LocalVariableBinding actualOuterLocalVariable) {
+		
+		if (this.original != this || this.binding == null) 
+			return; // Do not bother tracking outer locals for clones created during overload resolution.
+		
+		SyntheticArgumentBinding syntheticLocal = null;
+		int newSlot = this.outerLocalVariables.length;
+		for (int i = 0; i < newSlot; i++) {
+			if (this.outerLocalVariables[i].actualOuterLocalVariable == actualOuterLocalVariable)
+				return;
+		}
+		System.arraycopy(this.outerLocalVariables, 0, this.outerLocalVariables = new SyntheticArgumentBinding[newSlot + 1], 0, newSlot);
+		this.outerLocalVariables[newSlot] = syntheticLocal = new SyntheticArgumentBinding(actualOuterLocalVariable);
+		syntheticLocal.resolvedPosition = this.outerLocalVariablesSlotSize + (this.binding.isStatic() ? 0 : 1);
+		syntheticLocal.declaringScope = this.scope;
+		int parameterCount = this.binding.parameters.length;
+		TypeBinding [] newParameters = new TypeBinding[parameterCount + 1];
+		newParameters[newSlot] = actualOuterLocalVariable.type;
+		for (int i = 0, j = 0; i < parameterCount; i++, j++) {
+			if (i == newSlot) j++;
+			newParameters[j] = this.binding.parameters[i];
+		}
+		this.binding.parameters = newParameters;
+		switch (syntheticLocal.type.id) {
+			case TypeIds.T_long :
+			case TypeIds.T_double :
+				this.outerLocalVariablesSlotSize  += 2;
+				break;
+			default :
+				this.outerLocalVariablesSlotSize++;
+				break;
+		}		
+	}
+
+	public SyntheticArgumentBinding getSyntheticArgument(LocalVariableBinding actualOuterLocalVariable) {
+		for (int i = 0, length = this.outerLocalVariables == null ? 0 : this.outerLocalVariables.length; i < length; i++)
+			if (this.outerLocalVariables[i].actualOuterLocalVariable == actualOuterLocalVariable)
+				return this.outerLocalVariables[i];
+		return null;
+	}
 }
 class IncongruentLambdaException extends RuntimeException {
 	private static final long serialVersionUID = 4145723509219836114L;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java
index 2352a77..b9b3f29 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedNameReference.java
@@ -858,7 +858,7 @@ public FieldBinding lastFieldBinding() {
 
 public void manageEnclosingInstanceAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo) {
 	//If inlinable field, forget the access emulation, the code gen will directly target it
-	if (((this.bits & ASTNode.DepthMASK) == 0) || (this.constant != Constant.NotAConstant)) {
+	if (((this.bits & ASTNode.DepthMASK) == 0 && (this.bits & ASTNode.IsCapturedOuterLocal) == 0) || (this.constant != Constant.NotAConstant)) {
 		return;
 	}
 	if ((this.bits & ASTNode.RestrictiveFlagMASK) == Binding.LOCAL) {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java
index 7b24a77..67dd5e8 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SingleNameReference.java
@@ -863,7 +863,7 @@ public int nullStatus(FlowInfo flowInfo, FlowContext flowContext) {
 
 public void manageEnclosingInstanceAccessIfNecessary(BlockScope currentScope, FlowInfo flowInfo) {
 	//If inlinable field, forget the access emulation, the code gen will directly target it
-	if (((this.bits & ASTNode.DepthMASK) == 0) || (this.constant != Constant.NotAConstant)) {
+	if (((this.bits & ASTNode.DepthMASK) == 0 && (this.bits & ASTNode.IsCapturedOuterLocal) == 0) || (this.constant != Constant.NotAConstant)) {
 		return;
 	}
 	if ((this.bits & ASTNode.RestrictiveFlagMASK) == Binding.LOCAL) {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java
index 4949b26..ddea507 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/BlockScope.java
@@ -270,6 +270,26 @@ public void emulateOuterAccess(LocalVariableBinding outerLocalVariable) {
 	BlockScope outerVariableScope = outerLocalVariable.declaringScope;
 	if (outerVariableScope == null)
 		return; // no need to further emulate as already inserted (val$this$0)
+	
+	int depth = 0;
+	Scope scope = this;
+	while (outerVariableScope != scope) {
+		switch(scope.kind) {
+			case CLASS_SCOPE:
+				depth++;
+				break;
+			case METHOD_SCOPE: 
+				if (scope.isLambdaScope()) {
+					LambdaExpression lambdaExpression = (LambdaExpression) scope.referenceContext();
+					lambdaExpression.addSyntheticArgument(outerLocalVariable);
+				}
+				break;
+		}
+		scope = scope.parent;
+	}
+	if (depth == 0) 
+		return;
+	
 	MethodScope currentMethodScope = methodScope();
 	if (outerVariableScope.methodScope() != currentMethodScope) {
 		NestedTypeBinding currentType = (NestedTypeBinding) enclosingSourceType();
@@ -703,6 +723,13 @@ public VariableBinding[] getEmulationPath(LocalVariableBinding outerLocalVariabl
 		return new VariableBinding[] { outerLocalVariable };
 		// implicit this is good enough
 	}
+	if (currentMethodScope.isLambdaScope()) {
+		LambdaExpression lambda = (LambdaExpression) currentMethodScope.referenceContext;
+		SyntheticArgumentBinding syntheticArgument;
+		if ((syntheticArgument = lambda.getSyntheticArgument(outerLocalVariable)) != null) {
+			return new VariableBinding[] { syntheticArgument };
+		}
+	}
 	// use synthetic constructor arguments if possible
 	if (currentMethodScope.isInsideInitializerOrConstructor()
 		&& (sourceType.isNestedType())) {

commit d5a32e245b27c645dcf70347396d7253765682d3
Author: Stephan Herrmann <sherrmann>
Date:   Tue Feb 28 18:28:09 2012 +0100

    HEAD - Fixed bug 265744: Enum switch should warn about missing default

1	1	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java
2	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java
117	27	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java
13	3	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/StaticImportTest.java
8	3	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/SwitchTest.java
2	1	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15JLS4Test.java
2	1	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java
2	1	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CodeCorrectionTests.java
1	1	org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/messages.properties
23	1	org.eclipse.jdt.core/buildnotes_jdt-core.html
2	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
7	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java
3	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/IrritantSet.java
9	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
1	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java
index af0d0b0..e8f37f6 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/BatchCompilerTest.java
@@ -1875,7 +1875,7 @@ public void test012b(){
 			"		<option key=\"org.eclipse.jdt.core.compiler.problem.hiddenCatchBlock\" value=\"warning\"/>\n" + 
 			"		<option key=\"org.eclipse.jdt.core.compiler.problem.includeNullInfoFromAsserts\" value=\"disabled\"/>\n" + 
 			"		<option key=\"org.eclipse.jdt.core.compiler.problem.incompatibleNonInheritedInterfaceMethod\" value=\"warning\"/>\n" + 
-			"		<option key=\"org.eclipse.jdt.core.compiler.problem.incompleteEnumSwitch\" value=\"ignore\"/>\n" + 
+			"		<option key=\"org.eclipse.jdt.core.compiler.problem.incompleteEnumSwitch\" value=\"warning\"/>\n" + 
 			"		<option key=\"org.eclipse.jdt.core.compiler.problem.indirectStaticAccess\" value=\"ignore\"/>\n" + 
 			"		<option key=\"org.eclipse.jdt.core.compiler.problem.invalidJavadoc\" value=\"ignore\"/>\n" + 
 			"		<option key=\"org.eclipse.jdt.core.compiler.problem.invalidJavadocTags\" value=\"disabled\"/>\n" + 
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java
index b0803a2..23dcb7b 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java
@@ -697,6 +697,7 @@ public void test011_problem_categories() {
 		expectedProblemAttributes.put("MissingEnclosingInstance", new ProblemAttributes(CategorizedProblem.CAT_TYPE));
 		expectedProblemAttributes.put("MissingEnclosingInstanceForConstructorCall", new ProblemAttributes(CategorizedProblem.CAT_TYPE));
 		expectedProblemAttributes.put("MissingEnumConstantCase", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));
+		expectedProblemAttributes.put("MissingEnumDefaultCase", new ProblemAttributes(CategorizedProblem.CAT_POTENTIAL_PROGRAMMING_PROBLEM));
 		expectedProblemAttributes.put("MissingOverrideAnnotation", new ProblemAttributes(CategorizedProblem.CAT_CODE_STYLE));
 		expectedProblemAttributes.put("MissingOverrideAnnotationForInterfaceMethodImplementation", new ProblemAttributes(CategorizedProblem.CAT_CODE_STYLE));
 		expectedProblemAttributes.put("MissingReturnType", new ProblemAttributes(CategorizedProblem.CAT_TYPE));
@@ -1391,6 +1392,7 @@ public void test012_compiler_problems_tuning() {
 		expectedProblemAttributes.put("MissingEnclosingInstance", SKIP);
 		expectedProblemAttributes.put("MissingEnclosingInstanceForConstructorCall", SKIP);
 		expectedProblemAttributes.put("MissingEnumConstantCase", new ProblemAttributes(JavaCore.COMPILER_PB_INCOMPLETE_ENUM_SWITCH));
+		expectedProblemAttributes.put("MissingEnumDefaultCase", new ProblemAttributes(JavaCore.COMPILER_PB_INCOMPLETE_ENUM_SWITCH));
 		expectedProblemAttributes.put("MissingOverrideAnnotation", new ProblemAttributes(JavaCore.COMPILER_PB_MISSING_OVERRIDE_ANNOTATION));
 		expectedProblemAttributes.put("MissingOverrideAnnotationForInterfaceMethodImplementation", new ProblemAttributes(JavaCore.COMPILER_PB_MISSING_OVERRIDE_ANNOTATION));
 		expectedProblemAttributes.put("MissingReturnType", SKIP);
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java
index 5e591cc..f3fbf69 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/EnumTest.java
@@ -7,7 +7,9 @@
  *
  * Contributors:
  *		IBM Corporation - initial API and implementation
- *		Stephan Herrmann - Contribution for Bug 365519 - editorial cleanup after bug 186342 and bug 365387
+ *		Stephan Herrmann - Contributions for
+ *								Bug 365519 - editorial cleanup after bug 186342 and bug 365387
+ *								Bug 265744 - Enum switch should warn about missing default
  *******************************************************************************/
 package org.eclipse.jdt.core.tests.compiler.regression;
 
@@ -34,7 +36,7 @@ public class EnumTest extends AbstractComparableTest {
 	// Static initializer to specify tests subset using TESTS_* static variables
 	// All specified tests which does not belong to the class are skipped...
 	static {
-//		TESTS_NAMES = new String[] { "test000" };
+//		TESTS_NAMES = new String[] { "test146" };
 //		TESTS_NUMBERS = new int[] { 185 };
 //		TESTS_RANGE = new int[] { 21, 50 };
 	}
@@ -389,6 +391,7 @@ public void test009() {
 			"			case ROUGE :\n" +
 			"				System.out.println(\"FAILED\");\n" +
 			"				break;\n" +
+			"           default: // nop\n" +
 			"		}\n" +
 			"	}\n" +
 			"	\n" +
@@ -419,6 +422,7 @@ public void test010() {
 			"			case ROUGE :\n" +
 			"				System.out.println(\"FAILED\");\n" +
 			"				break;\n" +
+			"           default: // nop\n" +
 			"		}\n" +
 			"	}\n" +
 			"	\n" +
@@ -668,8 +672,8 @@ public void test019() {
 			"    	boolean leapYear = true;\n" +
 			"    	switch(this) {\n" +
 			"    		case FEBRUARY: if(leapYear) return days+1;\n" +
+			"           default: return days;\n" +
 			"    	}\n" +
-			"    	return days;\n" +
 			"    }\n" +
 			"    \n" +
 			"    public static void main(String[] args) {\n" +
@@ -731,17 +735,22 @@ public void test022() {
 			"}\n",
 		},
 		"----------\n" + 
-		"1. ERROR in X.java (at line 7)\n" + 
+		"1. WARNING in X.java (at line 6)\n" + 
+		"	switch(e) {\n" + 
+		"	       ^\n" + 
+		"The switch on the enum type X.MX should have a default case\n" + 
+		"----------\n" + 
+		"2. ERROR in X.java (at line 7)\n" + 
 		"	case MX.BLEU : break;\n" + 
 		"	     ^^^^^^^\n" + 
 		"The qualified case label X.MX.BLEU must be replaced with the unqualified enum constant BLEU\n" + 
 		"----------\n" + 
-		"2. ERROR in X.java (at line 8)\n" + 
+		"3. ERROR in X.java (at line 8)\n" + 
 		"	case MX.BLANC : break;\n" + 
 		"	     ^^^^^^^^\n" + 
 		"The qualified case label X.MX.BLANC must be replaced with the unqualified enum constant BLANC\n" + 
 		"----------\n" + 
-		"3. ERROR in X.java (at line 9)\n" + 
+		"4. ERROR in X.java (at line 9)\n" + 
 		"	case MX.ROUGE : break;\n" + 
 		"	     ^^^^^^^^\n" + 
 		"The qualified case label X.MX.ROUGE must be replaced with the unqualified enum constant ROUGE\n" + 
@@ -858,6 +867,7 @@ public void test027() {
 			"					break;\n" +
 			"				case ROUGE :\n" +
 			"					break;\n" +
+			"               default: // nop\n" +
 			"			}\n" +
 			"		}	\n" +
 			"	}\n" +
@@ -885,6 +895,7 @@ public void test028() {
 			"					break;\n" +
 			"				case ROUGE :\n" +
 			"					break;\n" +
+			"               default: // nop\n" +
 			"			}\n" +
 			"			FOO();\n" +
 			"			C++;\n" +
@@ -893,12 +904,12 @@ public void test028() {
 			"}\n",
 		},
 		"----------\n" +
-		"1. ERROR in X.java (at line 17)\n" +
+		"1. ERROR in X.java (at line 18)\n" +
 		"	FOO();\n" +
 		"	^^^\n" +
 		"The method FOO() is undefined for the type X.Y\n" +
 		"----------\n" +
-		"2. ERROR in X.java (at line 18)\n" +
+		"2. ERROR in X.java (at line 19)\n" +
 		"	C++;\n" +
 		"	^\n" +
 		"C cannot be resolved to a variable\n" +
@@ -922,6 +933,7 @@ public void test029() {
 			"					break;\n" +
 			"				case ROUGE :\n" +
 			"					break;\n" +
+			"               default: // nop\n" +
 			"			}\n" +
 			"		}	\n" +
 			"	}\n" +
@@ -952,6 +964,7 @@ public void test030() {
 			"					break;\n" +
 			"				case ROUGE :\n" +
 			"					break;\n" +
+			"               default: // nop\n" +
 			"			}\n" +
 			"		}	\n" +
 			"	}\n" +
@@ -979,6 +992,7 @@ public void test031() {
 			"					break;\n" +
 			"				case ROUGE :\n" +
 			"					break;\n" +
+			"               default: // nop\n" +
 			"			}\n" +
 			"		}	\n" +
 			"	}\n" +
@@ -1650,6 +1664,7 @@ public void test057() {
 			"        case GREEN:\n" +
 			"            System.out.println(c);\n" +
 			"            break;\n" +
+			"        default: // nop\n" +
 			"        }\n" +
 			"    }\n" +
 			"}\n"
@@ -1675,12 +1690,14 @@ public void test058() {
 			"		if (x == a) a++; // incomparable types: X and int\n" +
 			"		switch(x) {\n" +
 			"			case a : System.out.println(a); // prints \'9\'\n" +
+			"           default: // nop\n" +
 			"		}\n" +
 			"	}\n" +
 			"	static void test2(X x, final int aa) {\n" +
 			"		switch(x) {\n" +
 			"			case aa : // unqualified enum constant error\n" +
 			"				System.out.println(a); // cannot find a\n" +
+			"           default: // nop\n" +
 			"		}\n" +
 			"	}\n" +
 			"}\n"
@@ -1691,12 +1708,12 @@ public void test058() {
 		"	    ^^^^^^\n" +
 		"Incompatible operand types X and int\n" +
 		"----------\n" +
-		"2. ERROR in X.java (at line 15)\n" +
+		"2. ERROR in X.java (at line 16)\n" +
 		"	case aa : // unqualified enum constant error\n" +
 		"	     ^^\n" +
 		"aa cannot be resolved or is not a field\n" +
 		"----------\n" +
-		"3. ERROR in X.java (at line 16)\n" +
+		"3. ERROR in X.java (at line 17)\n" +
 		"	System.out.println(a); // cannot find a\n" +
 		"	                   ^\n" +
 		"a cannot be resolved to a variable\n" +
@@ -1753,6 +1770,7 @@ public void test060() {
 			"            break;\n" +
 			"        case Second:\n" +
 			"            break;\n" +
+			"        default: // nop\n" +
 			"        }\n" +
 			"        throw new Exception();\n" + // fake error to cause dump of unused import warnings
 			"    }\n" +
@@ -1769,7 +1787,7 @@ public void test060() {
 		"	              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" +
 		"The import com.flarion.test.a.MyEnum.Second is never used\n" +
 		"----------\n" +
-		"3. ERROR in com\\flarion\\test\\b\\MyClass.java (at line 15)\n" +
+		"3. ERROR in com\\flarion\\test\\b\\MyClass.java (at line 16)\n" +
 		"	throw new Exception();\n" +
 		"	^^^^^^^^^^^^^^^^^^^^^^\n" +
 		"Unhandled exception type Exception\n" +
@@ -1800,19 +1818,24 @@ public void test061() {
 		"1. WARNING in X.java (at line 8)\n" +
 		"	switch (x) {\n" +
 		"	        ^\n" +
-		"The enum constant A needs a corresponding case label in this enum switch on X\n" +
+		"The switch on the enum type X should have a default case\n" +
 		"----------\n" +
 		"2. WARNING in X.java (at line 8)\n" +
 		"	switch (x) {\n" +
 		"	        ^\n" +
-		"The enum constant B needs a corresponding case label in this enum switch on X\n" +
+		"The enum constant A needs a corresponding case label in this enum switch on X\n" +
 		"----------\n" +
 		"3. WARNING in X.java (at line 8)\n" +
 		"	switch (x) {\n" +
 		"	        ^\n" +
+		"The enum constant B needs a corresponding case label in this enum switch on X\n" +
+		"----------\n" +
+		"4. WARNING in X.java (at line 8)\n" +
+		"	switch (x) {\n" +
+		"	        ^\n" +
 		"The enum constant C needs a corresponding case label in this enum switch on X\n" +
 		"----------\n" +
-		"4. ERROR in X.java (at line 9)\n" +
+		"5. ERROR in X.java (at line 9)\n" +
 		"	case D:\n" +
 		"	     ^\n" +
 		"The field X.D cannot be referenced from an enum case label; only enum constants can be used in enum switch\n" +
@@ -1843,19 +1866,24 @@ public void test062() {
 		"1. WARNING in X.java (at line 8)\n" +
 		"	switch (x) {\n" +
 		"	        ^\n" +
-		"The enum constant A needs a corresponding case label in this enum switch on X\n" +
+		"The switch on the enum type X should have a default case\n" +
 		"----------\n" +
 		"2. WARNING in X.java (at line 8)\n" +
 		"	switch (x) {\n" +
 		"	        ^\n" +
-		"The enum constant B needs a corresponding case label in this enum switch on X\n" +
+		"The enum constant A needs a corresponding case label in this enum switch on X\n" +
 		"----------\n" +
 		"3. WARNING in X.java (at line 8)\n" +
 		"	switch (x) {\n" +
 		"	        ^\n" +
+		"The enum constant B needs a corresponding case label in this enum switch on X\n" +
+		"----------\n" +
+		"4. WARNING in X.java (at line 8)\n" +
+		"	switch (x) {\n" +
+		"	        ^\n" +
 		"The enum constant C needs a corresponding case label in this enum switch on X\n" +
 		"----------\n" +
-		"4. ERROR in X.java (at line 9)\n" +
+		"5. ERROR in X.java (at line 9)\n" +
 		"	case X.D:\n" +
 		"	       ^\n" +
 		"The field X.D cannot be referenced from an enum case label; only enum constants can be used in enum switch\n" +
@@ -1875,6 +1903,7 @@ public void test063() {
 			"    switch (item) {\n" +
 			"    case ALPHA:      break;\n" +
 			"    case BRAVO:      break;\n" +
+			"    default:         break;\n" +
 			"    }\n" +
 			"  }\n" +
 			"}\n",
@@ -3065,6 +3094,7 @@ public void test097() {
 			"			case BLUE:\n" +
 			"			case RED:\n" +
 			"				break;\n" +
+			"			default: // nop\n" +
 			"		} \n" +
 			"	}\n" +
 			"}\n" +
@@ -3111,19 +3141,24 @@ public void test098() {
 		"1. WARNING in E.java (at line 5)\n" +
 		"	switch (color) {\n" +
 		"	        ^^^^^\n" +
-		"The enum constant BLACK needs a corresponding case label in this enum switch on Colors\n" +
+		"The switch on the enum type Colors should have a default case\n" +
 		"----------\n" +
 		"2. WARNING in E.java (at line 5)\n" +
 		"	switch (color) {\n" +
 		"	        ^^^^^\n" +
-		"The enum constant RED needs a corresponding case label in this enum switch on Colors\n" +
+		"The enum constant BLACK needs a corresponding case label in this enum switch on Colors\n" +
 		"----------\n" +
 		"3. WARNING in E.java (at line 5)\n" +
 		"	switch (color) {\n" +
 		"	        ^^^^^\n" +
+		"The enum constant RED needs a corresponding case label in this enum switch on Colors\n" +
+		"----------\n" +
+		"4. WARNING in E.java (at line 5)\n" +
+		"	switch (color) {\n" +
+		"	        ^^^^^\n" +
 		"The enum constant WHITE needs a corresponding case label in this enum switch on Colors\n" +
 		"----------\n" +
-		"4. ERROR in E.java (at line 16)\n" +
+		"5. ERROR in E.java (at line 16)\n" +
 		"	Zork z;\n" +
 		"	^^^^\n" +
 		"Zork cannot be resolved to a type\n" +
@@ -3349,6 +3384,7 @@ public void test105() {
 				"        case WHITE:\n" +
 				"            System.out.print(\"White\");\n" +
 				"            break;\n" +
+				"        default: // nop\n" +
 				"        }\n" +
 				"    }\n" +
 				"}",
@@ -3383,6 +3419,8 @@ public void test105() {
 
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=88395
 public void test106() {
+	Map options = getCompilerOptions();
+	options.put(JavaCore.COMPILER_PB_INCOMPLETE_ENUM_SWITCH, JavaCore.IGNORE);
 	this.runConformTest(
 			new String[] {
 				"pack/X.java",
@@ -3400,7 +3438,12 @@ public void test106() {
 				"package pack;\n" +
 				"enum Color {WHITE, BLACK}"
 			},
-			"SUCCESS"
+			"SUCCESS",
+			null,
+			true,
+			null,
+			options,
+			null
 		);
 
 	this.runConformTest(
@@ -3426,6 +3469,8 @@ public void test106() {
 }
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=88395
 public void test107() {
+	Map options = getCompilerOptions();
+	options.put(JavaCore.COMPILER_PB_INCOMPLETE_ENUM_SWITCH, JavaCore.IGNORE);
 	this.runConformTest(
 			new String[] {
 				"pack/X.java",
@@ -3456,7 +3501,12 @@ public void test107() {
 				"package pack;\n" +
 				"enum Color {WHITE, BLACK}"
 			},
-			"BlackBlack"
+			"BlackBlack",
+			null,
+			true,
+			null,
+			options,
+			null
 		);
 
 	this.runConformTest(
@@ -3483,6 +3533,8 @@ public void test107() {
 
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=88395
 public void test108() {
+	Map options = getCompilerOptions();
+	options.put(JavaCore.COMPILER_PB_INCOMPLETE_ENUM_SWITCH, JavaCore.IGNORE);
 	this.runConformTest(
 			new String[] {
 				"pack/X.java",
@@ -3508,7 +3560,12 @@ public void test108() {
 				"package pack;\n" +
 				"enum Color {WHITE, BLACK}"
 			},
-			"Black"
+			"Black",
+			null,
+			true,
+			null,
+			options,
+			null
 		);
 
 	this.runConformTest(
@@ -3535,6 +3592,8 @@ public void test108() {
 
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=88395
 public void test109() {
+	Map options = getCompilerOptions();
+	options.put(JavaCore.COMPILER_PB_INCOMPLETE_ENUM_SWITCH, JavaCore.IGNORE);
 	this.runConformTest(
 			new String[] {
 				"pack/X.java",
@@ -3563,7 +3622,12 @@ public void test109() {
 				"package pack;\n" +
 				"enum Color {WHITE, BLACK}"
 			},
-			"Black"
+			"Black",
+			null,
+			true,
+			null,
+			options,
+			null
 		);
 
 	this.runConformTest(
@@ -3590,6 +3654,8 @@ public void test109() {
 
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=88395
 public void test110() {
+	Map options = getCompilerOptions();
+	options.put(JavaCore.COMPILER_PB_INCOMPLETE_ENUM_SWITCH, JavaCore.IGNORE);
 	this.runConformTest(
 			new String[] {
 				"pack/X.java",
@@ -3614,7 +3680,12 @@ public void test110() {
 				"package pack;\n" +
 				"enum Color {WHITE, BLACK}"
 			},
-			"Black"
+			"Black",
+			null,
+			true,
+			null,
+			options,
+			null
 		);
 
 	this.runConformTest(
@@ -3646,6 +3717,7 @@ public void test111() {
 				"pack/X.java",
 				"package pack;\n" +
 				"import static pack.Color.*;\n" +
+				"@SuppressWarnings(\"incomplete-switch\")\n" +
 				"public class X {\n" +
 				"	public int[] $SWITCH_TABLE$pack$Color;\n" +
 				"	public int[] $SWITCH_TABLE$pack$Color() { return null; }\n" +
@@ -3704,6 +3776,8 @@ public void test111() {
 
 // https://bugs.eclipse.org/bugs/show_bug.cgi?id=97247
 public void test112() {
+	Map options = getCompilerOptions();
+	options.put(JavaCore.COMPILER_PB_INCOMPLETE_ENUM_SWITCH, JavaCore.IGNORE);
 	this.runConformTest(
 		new String[] {
 			"com/annot/Foo.java",
@@ -3745,7 +3819,12 @@ public void test112() {
 			"	PERFORMANCE\n" +
 			"}"
 		},
-		""
+		"",
+		null,
+		true,
+		null,
+		options,
+		null
 	);
 }
 //https://bugs.eclipse.org/bugs/show_bug.cgi?id=93789
@@ -4151,6 +4230,7 @@ public void test122() {
 			"		case (NORMAL) :\n" +
 			"			System.out.println(State.NORMAL);\n" +
 			"			break;\n" +
+			"       default: // nop\n" +
 			"		}\n" +
 			"	}\n" +
 			"}"
@@ -4678,8 +4758,13 @@ public void test135() {
 			"    }\n" +
 			"}",
         },
+        "----------\n" + 
+		"1. WARNING in X.java (at line 4)\n" + 
+		"	switch (e) {\n" + 
+		"	        ^\n" + 
+		"The switch on the enum type E should have a default case\n" + 
 		"----------\n" +
-		"1. ERROR in X.java (at line 12)\n" +
+		"2. ERROR in X.java (at line 12)\n" +
 		"	return b;\n" +
 		"	       ^\n" +
 		"The local variable b may not have been initialized\n" +
@@ -5095,6 +5180,11 @@ public void test146() {
 		"	public X(MyEnum e) { // error\n" +
 		"	       ^^^^^^^^^^^\n" +
 		"The blank final field test may not have been initialized\n" +
+		"----------\n" + 
+		"2. WARNING in X.java (at line 7)\n" + 
+		"	switch (e) {\n" + 
+		"	        ^\n" + 
+		"The switch on the enum type X.MyEnum should have a default case\n" + 
 		"----------\n");
 }
 //https://bugs.eclipse.org/bugs/show_bug.cgi?id=227502
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/StaticImportTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/StaticImportTest.java
index a814439..1200657 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/StaticImportTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/StaticImportTest.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2011 IBM Corporation and others.
+ * Copyright (c) 2000, 2012 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -1802,7 +1802,12 @@ public class StaticImportTest extends AbstractComparableTest {
 			"	              ^^^^^^^^^^^^^^^^^^^^\n" +
 			"The import sample.X.TestEnum.V2 is never used\n" +
 			"----------\n" +
-			"3. ERROR in sample\\X.java (at line 22)\n" +
+			"3. WARNING in sample\\X.java (at line 12)\n" +
+			"	switch (value) {\n" +
+			"	        ^^^^^\n" +
+			"The switch on the enum type X.TestEnum should have a default case\n" +
+			"----------\n" +
+			"4. ERROR in sample\\X.java (at line 22)\n" +
 			"	i++;\n" +
 			"	^\n" +
 			"The local variable i may not have been initialized\n" +
@@ -1843,8 +1848,13 @@ public class StaticImportTest extends AbstractComparableTest {
 			"	import static sample.X.TestEnum.*;\n" +
 			"	              ^^^^^^^^^^^^^^^^^\n" +
 			"The import sample.X.TestEnum is never used\n" +
+			"----------\n" + 
+			"2. WARNING in sample\\X.java (at line 11)\n" + 
+			"	switch (value) {\n" + 
+			"	        ^^^^^\n" + 
+			"The switch on the enum type X.TestEnum should have a default case\n" + 
 			"----------\n" +
-			"2. ERROR in sample\\X.java (at line 21)\n" +
+			"3. ERROR in sample\\X.java (at line 21)\n" +
 			"	i++;\n" +
 			"	^\n" +
 			"The local variable i may not have been initialized\n" +
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/SwitchTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/SwitchTest.java
index d0d15f0..f45096e 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/SwitchTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/SwitchTest.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2005, 2011 IBM Corporation and others.
+ * Copyright (c) 2005, 2012 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -1028,12 +1028,17 @@ public void testCaseTypeMismatch3() {
 		"	     ^^^\n" + 
 		"Type mismatch: cannot convert from String to int\n" + 
 		"----------\n" + 
-		"2. ERROR in X.java (at line 10)\n" + 
+		"2. WARNING in X.java (at line 9)\n" + 
+		"	switch(Days.Sunday) {\n" + 
+		"	       ^^^^^^^^^^^\n" + 
+		"The switch on the enum type Days should have a default case\n" + 
+		"----------\n" + 
+		"3. ERROR in X.java (at line 10)\n" + 
 		"	case \"Sunday\": break;\n" + 
 		"	     ^^^^^^^^\n" + 
 		"Type mismatch: cannot convert from String to Days\n" + 
 		"----------\n" + 
-		"3. ERROR in X.java (at line 13)\n" + 
+		"4. ERROR in X.java (at line 13)\n" + 
 		"	case \"0\": break;\n" + 
 		"	     ^^^\n" + 
 		"Type mismatch: cannot convert from String to Integer\n" + 
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15JLS4Test.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15JLS4Test.java
index 9c7b8e9..1f8259e 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15JLS4Test.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15JLS4Test.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2011 IBM Corporation and others.
+ * Copyright (c) 2011, 2012 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -4767,6 +4767,7 @@ public class ASTConverter15JLS4Test extends ConverterTestSetup {
     		"	RED, GREEN(), BLUE(17);\n" +
     		"	X() {}\n" +
     		"	X(int i) {}\n" +
+    		"   @SuppressWarnings(\"incomplete-switch\")\n" +
     		"	public static void main(String[] args) {\n" +
     		"		for (X x : X.values()) {\n" +
     		"			switch(x) {\n" +
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java
index fd388a6..05114e1 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter15Test.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2011 IBM Corporation and others.
+ * Copyright (c) 2000, 2012 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -4770,6 +4770,7 @@ public class ASTConverter15Test extends ConverterTestSetup {
     		"	RED, GREEN(), BLUE(17);\n" +
     		"	X() {}\n" +
     		"	X(int i) {}\n" +
+    		"   @SuppressWarnings(\"incomplete-switch\")\n" +
     		"	public static void main(String[] args) {\n" +
     		"		for (X x : X.values()) {\n" +
     		"			switch(x) {\n" +
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CodeCorrectionTests.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CodeCorrectionTests.java
index d55fa60..62da35b 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CodeCorrectionTests.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/CodeCorrectionTests.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2010 IBM Corporation and others.
+ * Copyright (c) 2000, 2012 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -804,6 +804,7 @@ public void testWarningTokens() {
 	assertEquals("wrong token", "hiding", CorrectionEngine.getWarningToken(IProblem.TypeParameterHidingType));
 	assertEquals("wrong token", "nls", CorrectionEngine.getWarningToken(IProblem.NonExternalizedStringLiteral));
 	assertEquals("wrong token", "incomplete-switch", CorrectionEngine.getWarningToken(IProblem.MissingEnumConstantCase));
+	assertEquals("wrong token", "incomplete-switch", CorrectionEngine.getWarningToken(IProblem.MissingEnumDefaultCase));
 	assertEquals("wrong token", "unused", CorrectionEngine.getWarningToken(IProblem.UnusedImport));
 	assertEquals("wrong token", "unused", CorrectionEngine.getWarningToken(IProblem.LocalVariableIsNeverUsed));
 	assertEquals("wrong token", "unused", CorrectionEngine.getWarningToken(IProblem.ArgumentIsNeverUsed));
diff --git a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/messages.properties b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/messages.properties
index 85eeee1..b1cbf89 100644
--- a/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/messages.properties
+++ b/org.eclipse.jdt.core/batch/org/eclipse/jdt/internal/compiler/batch/messages.properties
@@ -20,7 +20,7 @@
 #Format: compiler.name = word1 word2 word3
 compiler.name = Eclipse Compiler for Java(TM)
 #Format: compiler.version = 0.XXX[, other words (don't forget the comma if adding other words)]
-compiler.version = 0.C36, 3.8.0 M6
+compiler.version = 0.C37, 3.8.0 M6
 compiler.copyright = Copyright IBM Corp 2000, 2011. All rights reserved.
 
 ### progress
diff --git a/org.eclipse.jdt.core/buildnotes_jdt-core.html b/org.eclipse.jdt.core/buildnotes_jdt-core.html
index 4afbf59..53c9680 100644
--- a/org.eclipse.jdt.core/buildnotes_jdt-core.html
+++ b/org.eclipse.jdt.core/buildnotes_jdt-core.html
@@ -42,11 +42,33 @@
 	</td>
   </tr>
 </table>
+<a name="v_C37"></a>
+<hr><h1>
+Eclipse Platform Build Notes<br>
+Java development tools core</h1>
+Eclipse SDK 3.8.0 - %date% - 3.8.0 M6
+<br>Project org.eclipse.jdt.core v_C37
+(<a href="http://dev.eclipse.org/viewcvs/index.cgi/org.eclipse.jdt.core/?only_with_tag=v_C37">cvs</a>).
+<h2>What's new in this drop</h2>
+
+<ul>
+<li> New IProblems for reporting if an enum switch lacks a default cause (recommended by the JLS).
+<pre>
+	/** @since 3.8 */
+	int MissingEnumDefaultCase = Internal + 766;
+</pre>
+</li>
+</ul>
+
+<h3>Problem Reports Fixed</h3>
+<a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=265744">265744</a>
+Enum switch should warn about missing default
+
 <a name="v_C36"></a>
 <hr><h1>
 Eclipse Platform Build Notes<br>
 Java development tools core</h1>
-Eclipse SDK 3.8.0 - February 28, 2012 - 3.8.0 M6
+Eclipse SDK 3.8.0 - February 28, 2012
 <br>
 <h2>What's new in this drop</h2>
 
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
index c8844a3..937a190 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
@@ -1342,6 +1342,8 @@ void setSourceStart(int sourceStart);
 	int EnumConstantCannotDefineAbstractMethod = MethodRelated + 764;
 	/** @since 3.5 */
 	int AbstractMethodInEnum = MethodRelated + 765;
+	/** @since 3.8 */
+	int MissingEnumDefaultCase = Internal + 766;
 
 	/**
 	 * Var args
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java
index 03c6e80..576e200 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/SwitchStatement.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2011 IBM Corporation and others.
+ * Copyright (c) 2000, 2012 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -10,6 +10,7 @@
  *     Stephan Herrmann - Contributions for 
  *     							bug 319201 - [null] no warning when unboxing SingleNameReference causes NPE
  *     							bug 349326 - [1.7] new warning for missing try-with-resources
+ *								bug 265744 - Enum switch should warn about missing default
  *******************************************************************************/
 package org.eclipse.jdt.internal.compiler.ast;
 
@@ -538,6 +539,11 @@ public class SwitchStatement extends Statement {
 			// for enum switch, check if all constants are accounted for (if no default)
 			if (isEnumSwitch && this.defaultCase == null
 					&& upperScope.compilerOptions().getSeverity(CompilerOptions.IncompleteEnumSwitch) != ProblemSeverities.Ignore) {
+				// JLS recommends a default case for every enum switch
+				if (upperScope.compilerOptions().complianceLevel >= ClassFileConstants.JDK1_5) { // report only if enum is legal in the first place
+					upperScope.problemReporter().missingEnumDefaultCase(this, expressionType);
+				}
+
 				int constantCount = this.constants == null ? 0 : this.constants.length; // could be null if no case statement
 				if (constantCount == this.caseCount
 						&& this.caseCount != ((ReferenceBinding)expressionType).enumConstantCount()) {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/IrritantSet.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/IrritantSet.java
index d526c4e..1f53ff7 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/IrritantSet.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/impl/IrritantSet.java
@@ -11,6 +11,7 @@
  *     							bug 349326 - [1.7] new warning for missing try-with-resources
  *								bug 186342 - [compiler][null] Using annotations for null checking
  *								bug 370639 - [compiler][resource] restore the default for resource leak warnings
+ *								bug 265744 - Enum switch should warn about missing default
  *******************************************************************************/
 
 package org.eclipse.jdt.internal.compiler.impl;
@@ -101,7 +102,8 @@ public class IrritantSet {
 				| CompilerOptions.UnusedLabel
 				| CompilerOptions.UnusedTypeArguments
 				| CompilerOptions.UnusedWarningToken
-				| CompilerOptions.ComparingIdentical)
+				| CompilerOptions.ComparingIdentical
+				| CompilerOptions.IncompleteEnumSwitch)
 			// group-2 warnings enabled by default
 			.set(
 				CompilerOptions.DeadCode
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
index 3dd639a..379f232 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
@@ -330,6 +330,7 @@ public static int getIrritant(int problemID) {
 			return CompilerOptions.AutoBoxing;
 
 		case IProblem.MissingEnumConstantCase :
+		case IProblem.MissingEnumDefaultCase :
 			return CompilerOptions.IncompleteEnumSwitch;
 
 		case IProblem.AnnotationTypeUsedAsSuperInterface :
@@ -5353,6 +5354,14 @@ public void missingEnumConstantCase(SwitchStatement switchStatement, FieldBindin
 		switchStatement.expression.sourceStart,
 		switchStatement.expression.sourceEnd);
 }
+public void missingEnumDefaultCase(SwitchStatement switchStatement, TypeBinding enumType) {
+	this.handle(
+		IProblem.MissingEnumDefaultCase,
+		new String[] {new String(enumType.readableName())},
+		new String[] {new String(enumType.shortReadableName())},
+		switchStatement.expression.sourceStart,
+		switchStatement.expression.sourceEnd);
+}
 public void missingOverrideAnnotation(AbstractMethodDeclaration method) {
 	int severity = computeSeverity(IProblem.MissingOverrideAnnotation);
 	if (severity == ProblemSeverities.Ignore) return;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
index 265efae..df70ede 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
@@ -611,6 +611,7 @@
 763 = The enum constant {2} must implement the abstract method {0}({1})
 764 = The enum constant {0} cannot define abstract methods
 765 = The method {1} cannot be abstract in the enum constant {0}
+766 = The switch on the enum type {0} should have a default case
 
 ### VARARGS
 800 = Extended dimensions are illegal for a variable argument
commit 4de8875392f1614ce3d9b4e720843df3cd1fa2b7
Author: Stephan Herrmann <sherrmann>
Date:   Fri Mar 2 22:57:59 2012 +0100

    javadoc update for Bug 265744 - Enum switch should warn about missing
    default

18	0	org.eclipse.jdt.core/buildnotes_jdt-core.html
4	3	org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java
diff --git a/org.eclipse.jdt.core/buildnotes_jdt-core.html b/org.eclipse.jdt.core/buildnotes_jdt-core.html
index 710f96e..93e218a 100644
--- a/org.eclipse.jdt.core/buildnotes_jdt-core.html
+++ b/org.eclipse.jdt.core/buildnotes_jdt-core.html
@@ -58,6 +58,24 @@ Eclipse SDK 3.8.0 - %date% - 3.8.0 M6
 	int MissingEnumDefaultCase = Internal + 766;
 </pre>
 </li>
+<li>Adjusted the specification of the corresponding constant in JavaCore:
+<pre>
+	/**
+	 * Compiler option ID: Reporting Incomplete Enum Switch.
+	 *    
+	 * When enabled, the compiler will issue an error or a warning whenever
+	 * an enum switch statement lacks a default case.
+	 * If no default case is given, additionally one error or warning is issued
+	 * regarding each enum constant for which a corresponding case label is lacking.
+	 * 
+	 * Option id: "org.eclipse.jdt.core.compiler.problem.incompleteEnumSwitch"
+	 * Possible values: { "error", "warning", "ignore" }
+	 * Default: "warning"
+	 * @since 3.1
+	 * @category CompilerOptionID
+	 */
+	public static final String COMPILER_PB_INCOMPLETE_ENUM_SWITCH = PLUGIN_ID + ".compiler.problem.incompleteEnumSwitch"; //$NON-NLS-1$
+</pre>
 </ul>
 
 <h3>Problem Reports Fixed</h3>
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java
index 1888747..f8d795d 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java
@@ -1075,12 +1075,13 @@ public final class JavaCore extends Plugin {
 	/**
 	 * Compiler option ID: Reporting Incomplete Enum Switch.
 	 * <p>When enabled, the compiler will issue an error or a warning whenever
-	 *    an enum constant has no corresponding case label in an enum switch
-	 *    statement.
+	 *    an enum switch statement lacks a default case.
+	 *    If no default case is given, additionally one error or warning is issued
+	 *    regarding each enum constant for which a corresponding case label is lacking.
 	 * <dl>
 	 * <dt>Option id:</dt><dd><code>"org.eclipse.jdt.core.compiler.problem.incompleteEnumSwitch"</code></dd>
 	 * <dt>Possible values:</dt><dd><code>{ "error", "warning", "ignore" }</code></dd>
-	 * <dt>Default:</dt><dd><code>"ignore"</code></dd>
+	 * <dt>Default:</dt><dd><code>"warning"</code></dd>
 	 * </dl>
 	 * @since 3.1
 	 * @category CompilerOptionID

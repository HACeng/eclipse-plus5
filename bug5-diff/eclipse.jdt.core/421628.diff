commit 67477b0856fe5c7ef8dbf44885f837fd7ffcb0c3
Author: Markus Keller <markus_keller@ch.ibm.com>
Date:   Mon Jan 27 22:44:08 2014 +0100

    Bug 421628: [1.8][dom ast][api] document new rules for ITypeBinding
    equality

6	6	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java
17	3	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnnotatableType.java
38	13	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IBinding.java
13	3	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IMethodBinding.java
26	25	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ITypeBinding.java
2	2	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Type.java
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java
index 5ae5776..3099c0c 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTParser.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2004, 2013 IBM Corporation and others.
+ * Copyright (c) 2004, 2014 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -384,7 +384,7 @@ public class ASTParser {
 	 * Requests that the compiler should provide binding information for
 	 * the AST nodes it creates.
 	 * <p>
-	 * Default to <code>false</code> (no bindings).
+	 * Defaults to <code>false</code> (no bindings).
 	 * </p>
 	 * <p>
 	 * If {@link #setResolveBindings(boolean) setResolveBindings(true)}, the various names
@@ -407,12 +407,12 @@ public class ASTParser {
 	 * <code>resolveBinding</code> methods return <code>null</code> from the outset.
 	 * </p>
 	 * <p>
-	 * When bindings are requested, instead of considering compilation units on disk only
-	 * one can supply a <code>WorkingCopyOwner</code>. Working copies owned
+	 * When bindings are requested, instead of considering compilation units on disk only,
+	 * one can also supply a <code>WorkingCopyOwner</code>. Working copies owned
 	 * by this owner take precedence over the underlying compilation units when looking
 	 * up names and drawing the connections.
 	 * </p>
-	 * <p>Note that working copy owner are used only if the <code>org.eclipse.jdt.core</code>
+	 * <p>Note that working copy owners are used only if the <code>org.eclipse.jdt.core</code>
 	 * bundle is initialized.</p>
 	 * <p>
 	 * Binding information is obtained from the Java model.
@@ -715,7 +715,7 @@ public class ASTParser {
 	}
 
     /**
-     * Sets the working copy owner using when resolving bindings, where
+     * Sets the working copy owner used when resolving bindings, where
      * <code>null</code> means the primary owner. Defaults to the primary owner.
      *
 	 * @param owner the owner of working copies that take precedence over underlying
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnnotatableType.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnnotatableType.java
index 8b2c16d..81d08a2 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnnotatableType.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnnotatableType.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2013 IBM Corporation and others.
+ * Copyright (c) 2000, 2014 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -20,7 +20,14 @@ import java.util.List;
  * Abstract base class of AST nodes that represent an annotatable type (added in JLS8 API).
  * <p>
  * Introduced in JLS8, type references that can be annotated are represented by 
- * AnnotatableType. For the list of types extending AnnotatableType, see {@link Type}.</p>
+ * AnnotatableType. For the list of types extending AnnotatableType, see {@link Type}.
+ * </p>
+ * <p>
+ * Note that type annotations ({@link ITypeBinding#getTypeAnnotations()}) that semantically
+ * belong to a resolved type reference don't always show up in {@link AnnotatableType#annotations()}.
+ * Syntactically, type annotations can also be part of an associated declaration node's
+ * <code>modifiers()</code> list.
+ * </p>
  *
  * @since 3.9 BETA_JAVA8
  */
@@ -78,9 +85,16 @@ public abstract class AnnotatableType extends Type {
 
 	/**
 	 * Returns the live ordered list of annotations for this Type node (added in JLS8 API).
-	 *
+	 * <p>
+	 * Note that type annotations ({@link ITypeBinding#getTypeAnnotations()}) that semantically
+	 * belong to a resolved type reference don't always show up in this list.
+	 * Syntactically, type annotations can also be part of an associated declaration node's
+	 * <code>modifiers()</code> list.
+	 * </p>
+	 * 
 	 * @return the live list of annotations (element type: {@link Annotation})
 	 * @exception UnsupportedOperationException if this operation is used below JLS8
+	 * @see ITypeBinding#getTypeAnnotations()
 	 */
 	public List annotations() {
 		// more efficient than just calling unsupportedIn2_3_4() to check
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IBinding.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IBinding.java
index 4a24f8c..c8367bb 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IBinding.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IBinding.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2013 IBM Corporation and others.
+ * Copyright (c) 2000, 2014 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -21,9 +21,9 @@ import org.eclipse.jdt.core.IJavaElement;
 /**
  * A binding represents a named entity in the Java language. The world of
  * bindings provides an integrated picture of the structure of the program as
- * seen from the compiler's point of view. This interface declare protocol
+ * seen from the compiler's point of view. This interface declares protocols
  * common to the various different kinds of named entities in the Java language:
- * packages, types, fields, methods, constructors, and local variables.
+ * packages, types, fields, methods, constructors, local variables, and annotations.
  *
  * @see IPackageBinding
  * @see ITypeBinding
@@ -93,7 +93,7 @@ public interface IBinding {
 	public static final int MEMBER_VALUE_PAIR = 6;
 
 	/**
-	 * Return the resolved annotations associated with this binding.
+	 * Returns the resolved declaration annotations associated with this binding.
 	 * <ul>
 	 * <li>Package bindings - these are annotations on a package declaration.
 	 * </li>
@@ -108,9 +108,14 @@ public interface IBinding {
 	 * <li>Annotation bindings - an empty array is always returned</li>
 	 * <li>Member value pair bindings - an empty array is always returned</li>
 	 * </ul>
+	 * <p>
+	 * <b>Note:</b> This method only returns declaration annotations.
+	 * <em>Type annotations</em> in the sense of JLS8 9.7.4 are <em>not</em> returned.
+	 * Type annotations can be retrieved via {@link ITypeBinding#getTypeAnnotations()}. 
+	 * </p>
 	 *
-	 * @return the list of resolved annotations, or the empty list if there are no
-	 * annotations associated with the object
+	 * @return the list of resolved declaration annotations, or the empty list if there are no
+	 *    declaration annotations associated with the entity represented by this binding
 	 * @since 3.2
 	 */
 	public IAnnotationBinding[] getAnnotations();
@@ -230,8 +235,8 @@ public interface IBinding {
 	/**
 	 * Returns the key for this binding.
 	 * <p>
-	 * Within a connected cluster of bindings (for example, all bindings
-	 * reachable from a given AST), each binding will have a distinct keys.
+	 * Within a connected cluster of bindings (produced by the same call to an
+	 * {@code ASTParser#create*(*)} method)), each binding will have a distinct key.
 	 * The keys are generated in a manner that is predictable and as
 	 * stable as possible. This last property makes these keys useful for
 	 * comparing bindings between disconnected clusters of bindings (for example,
@@ -259,7 +264,7 @@ public interface IBinding {
 	 *   declaring block relative to its parent, the key of its method</li>
 	 * <li>local types - the name of the type, the index of the declaring
 	 *   block relative to its parent, the key of its method</li>
-	 * <li>anonymous types - the occurence count of the anonymous
+	 * <li>anonymous types - the occurrence count of the anonymous
 	 *   type relative to its declaring type, the key of its declaring type</li>
 	 * <li>enum types - treated like classes</li>
 	 * <li>annotation types - treated like interfaces</li>
@@ -283,8 +288,12 @@ public interface IBinding {
 	 * the annotation type</li>
 	 * </ul>
 	 * </p>
+	 * <p>
+	 * The key for a type binding does not contain {@link ITypeBinding#getTypeAnnotations() type annotations},
+	 * so bindings with different type annotations may have the same key (iff they denote the same un-annotated type).
+	 * </p>
 	 * <p>Note that the key for member value pair bindings is
-	 * not yet implemented. This returns <code>null</code> for this kind of bindings.<br>
+	 * not yet implemented. This method returns <code>null</code> for that kind of bindings.<br>
 	 * Recovered bindings have a unique key.
 	 * </p>
 	 *
@@ -295,23 +304,39 @@ public interface IBinding {
 	/**
 	 * There is no special definition of equality for bindings; equality is
 	 * simply object identity.  Within the context of a single cluster of
-	 * bindings, each binding is represented by a distinct object. However,
+	 * bindings (produced by the same call to an {@code ASTParser#create*(*)} method),
+	 * each binding is represented by a separate object. However,
 	 * between different clusters of bindings, the binding objects may or may
 	 * not be different; in these cases, the client should compare bindings
-	 * using {@link #isEqualTo(IBinding)}, which checks their keys.
+	 * using {@link #isEqualTo(IBinding)}, which is functionally equivalent to
+	 * checking their keys for equality.
+	 * <p>
+	 * Since JLS8, type bindings can contain {@link ITypeBinding#getTypeAnnotations() type annotations}.
+	 * Note that type bindings that denote the same un-annotated type have the same {@link #getKey() key},
+	 * but they are not identical if they contain different type annotations.
+	 * Type bindings that contain the same type annotations may or may not be identical.
+	 * </p>
 	 *
 	 * @param obj {@inheritDoc}
 	 * @return {@inheritDoc}
+	 * @see ITypeBinding#getTypeDeclaration()
 	 */
 	public boolean equals(Object obj);
 
 	/**
 	 * Returns whether this binding has the same key as that of the given
-	 * binding. Within the context of a single cluster of bindings, each
+	 * binding. Within the context of a single cluster of bindings
+	 * (produced by the same call to an {@code ASTParser#create*(*)} method), each
 	 * binding is represented by a distinct object. However, between
 	 * different clusters of bindings, the binding objects may or may
 	 * not be different objects; in these cases, the binding keys
 	 * are used where available.
+	 * 
+	 * <p>
+	 * Note that type binding that only differ in their {@link ITypeBinding#getTypeAnnotations() type annotations}
+	 * have the same {@link IBinding#getKey() key}, and hence this method returns
+	 * <code>true</code> for such type bindings.
+	 * </p>
 	 *
 	 * @param binding the other binding, or <code>null</code>
 	 * @return <code>true</code> if the given binding is the identical
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IMethodBinding.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IMethodBinding.java
index 77e6cb3..35b214f 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IMethodBinding.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IMethodBinding.java
@@ -1,10 +1,14 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2011 IBM Corporation and others.
+ * Copyright (c) 2000, 2014 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ *
  * Contributors:
  *     IBM Corporation - initial API and implementation
  *******************************************************************************/
@@ -109,12 +113,18 @@ public interface IMethodBinding extends IBinding {
 	public Object getDefaultValue();
 
 	/**
-	 * Returns the resolved annotations of a parameter of this method.
+	 * Returns the resolved declaration annotations of a parameter of this method.
 	 * The result returned is the same regardless of whether
 	 * this is a parameterized method.
+	 * <p>
+	 * <b>Note:</b> This method only returns declaration annotations.
+	 * <em>Type annotations</em> in the sense of JLS8 9.7.4 are <em>not</em> returned.
+	 * Type annotations can be retrieved from a parameter type 
+	 * via {@link ITypeBinding#getTypeAnnotations()}. 
+	 * </p>
 	 *
 	 * @param paramIndex the index of the parameter of interest
-	 * @return the resolved annotations of the <code>paramIndex</code>th parameter,
+	 * @return the resolved declaration annotations of the <code>paramIndex</code>th parameter,
 	 * or an empty list if there are none
 	 * @throws ArrayIndexOutOfBoundsException if <code>paramIndex</code> is
 	 * not a valid index
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ITypeBinding.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ITypeBinding.java
index 704f18d..941ebdc 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ITypeBinding.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ITypeBinding.java
@@ -119,7 +119,6 @@ public interface ITypeBinding extends IBinding {
 	 * Returns the binding representing the component type of this array type,
 	 * or <code>null</code> if this is not an array type binding. The component
 	 * type of an array might be an array type.
-	 * <p>This is subject to change before 3.2 release.</p>
 	 *
 	 * @return the component type binding, or <code>null</code> if this is
 	 *   not an array type
@@ -509,6 +508,26 @@ public interface ITypeBinding extends IBinding {
 	public ITypeBinding getSuperclass();
 
 	/**
+	 * Returns the type annotations that this type reference is annotated with. Since JLS8, 
+	 * multiple instances of type bindings may be created if they are annotated with 
+	 * different type use annotations.
+	 * <p>
+	 * For example, the following three type references would produce three distinct type 
+	 * bindings for java.lang.String.
+	 * <ul>
+	 * <li>java.lang.@Marker1 String</li>
+	 * <li>java.lang.@Marker2 String</li>
+	 * <li>java.lang.String</li>
+	 * </ul>
+	 * </p>
+	 * @return type annotations specified on this type reference, or an empty array if
+	 * no type use annotations are found.
+	 * @see #getTypeDeclaration()
+	 * @since 3.9 BETA_JAVA8
+	 */
+	public IAnnotationBinding[] getTypeAnnotations();
+
+	/**
 	 * Returns the type arguments of this generic type instance, or the
 	 * empty list for other type bindings.
 	 * <p>
@@ -555,19 +574,20 @@ public interface ITypeBinding extends IBinding {
 	 * binding.
 	 * <p>For parameterized types ({@link #isParameterizedType()})
 	 * and most raw types ({@link #isRawType()}), this method returns the binding
-	 * for the corresponding generic type.</p>
+	 * for the corresponding generic type ({@link #isGenericType()}.</p>
 	 * <p>For raw member types ({@link #isRawType()}, {@link #isMember()})
 	 * of a raw declaring class, the type declaration is a generic or a non-generic
 	 * type.</p>
 	 * <p>A different non-generic binding will be returned when one of the declaring
 	 * types/methods was parameterized.</p>
-	 * <p>For other type bindings, this returns the binding for the type declaration
+	 * <p>For other type bindings, this method returns the binding for the type declaration
 	 * corresponding to this type binding. In particular, for type bindings that
-	 * correspond to an annotated type use, this returns the binding for the type
-	 * declaration which will not have the type annotations from the use site.</p>
+	 * contain a {@link #getTypeAnnotations() type annotation}, this method returns the binding for the type
+	 * declaration, which does not contain the type annotations from the use site.</p>
 	 *
-	 * @return the type binding
+	 * @return the declaration type binding
 	 * @since 3.1
+	 * @see #isEqualTo(IBinding)
 	 */
 	public ITypeBinding getTypeDeclaration();
 
@@ -586,7 +606,6 @@ public interface ITypeBinding extends IBinding {
 	 * @see #isTypeVariable()
 	 * @since 3.1
 	 */
-	// TODO (jeem) - clarify whether binding for a generic type instance carries a copy of the generic type's type parameters as well as type arguments
 	public ITypeBinding[] getTypeParameters();
 
 	/**
@@ -979,23 +998,5 @@ public interface ITypeBinding extends IBinding {
 	 * @see #isUpperbound()
 	 */
 	public boolean isWildcardType();
-
-	/**
-	 * Returns the annotations that this type reference is annotated with. Since JLS8, 
-	 * multiple instances of type bindings may be created if they are annotated with 
-	 * different type use annotations.
-	 * <p>
-	 * For example, the following two type references would produce two distinct type 
-	 * bindings for java.lang.String.
-	 * <ul>
-	 * <li>java.lang.@Marker1 String</li>
-	 * <li>java.lang.@Marker2 String</li>
-	 * </ul>
-	 * </p>
-	 * @return type annotations specified on this type reference, or an empty array if
-	 * no type use annotations are found.
-	 * @since 3.9 BETA_JAVA8
-	 */
-	public IAnnotationBinding[] getTypeAnnotations();
 	
 }
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Type.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Type.java
index 4095474..2ed175c 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Type.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Type.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2013 IBM Corporation and others.
+ * Copyright (c) 2000, 2014 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -17,7 +17,7 @@ package org.eclipse.jdt.core.dom;
 
 
 /**
- * Abstract base class of all type AST node types. A type node represents a
+ * Abstract base class of all type reference AST node types. A type node represents a
  * reference to a primitive type (including void), to an array type, or to a
  * simple named type (or type variable), to a qualified type, to a
  * parameterized type, to a union type, to an intersection type, or to a wildcard type. Note that not all of these
commit 641f1c4bb35d7a1ed42a954deff417eac24d11cb
Author: Markus Keller <markus_keller@ch.ibm.com>
Date:   Mon Jan 27 23:10:50 2014 +0100

    Bug 421628: [1.8][dom ast][api] document new rules for ITypeBinding
    equality

6	4	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IBinding.java
2	1	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ITypeBinding.java
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IBinding.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IBinding.java
index c8367bb..d708a69 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IBinding.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IBinding.java
@@ -236,7 +236,7 @@ public interface IBinding {
 	 * Returns the key for this binding.
 	 * <p>
 	 * Within a connected cluster of bindings (produced by the same call to an
-	 * {@code ASTParser#create*(*)} method)), each binding will have a distinct key.
+	 * {@code ASTParser#create*(*)} method)), each binding has a distinct key.
 	 * The keys are generated in a manner that is predictable and as
 	 * stable as possible. This last property makes these keys useful for
 	 * comparing bindings between disconnected clusters of bindings (for example,
@@ -290,7 +290,8 @@ public interface IBinding {
 	 * </p>
 	 * <p>
 	 * The key for a type binding does not contain {@link ITypeBinding#getTypeAnnotations() type annotations},
-	 * so bindings with different type annotations may have the same key (iff they denote the same un-annotated type).
+	 * so type bindings with different type annotations may have the same key (iff they denote the same un-annotated type).
+	 * By construction, this also applies to method bindings if their declaring types contain type annotations.
 	 * </p>
 	 * <p>Note that the key for member value pair bindings is
 	 * not yet implemented. This method returns <code>null</code> for that kind of bindings.<br>
@@ -333,9 +334,10 @@ public interface IBinding {
 	 * are used where available.
 	 * 
 	 * <p>
-	 * Note that type binding that only differ in their {@link ITypeBinding#getTypeAnnotations() type annotations}
+	 * Note that type bindings that only differ in their {@link ITypeBinding#getTypeAnnotations() type annotations}
 	 * have the same {@link IBinding#getKey() key}, and hence this method returns
-	 * <code>true</code> for such type bindings.
+	 * <code>true</code> for such type bindings. By construction of the key, this also applies
+	 * to method bindings if their declaring types contain type annotations.
 	 * </p>
 	 *
 	 * @param binding the other binding, or <code>null</code>
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ITypeBinding.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ITypeBinding.java
index 941ebdc..ef59468 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ITypeBinding.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ITypeBinding.java
@@ -513,7 +513,7 @@ public interface ITypeBinding extends IBinding {
 	 * different type use annotations.
 	 * <p>
 	 * For example, the following three type references would produce three distinct type 
-	 * bindings for java.lang.String.
+	 * bindings for java.lang.String that share the same key:
 	 * <ul>
 	 * <li>java.lang.@Marker1 String</li>
 	 * <li>java.lang.@Marker2 String</li>
@@ -523,6 +523,7 @@ public interface ITypeBinding extends IBinding {
 	 * @return type annotations specified on this type reference, or an empty array if
 	 * no type use annotations are found.
 	 * @see #getTypeDeclaration()
+	 * @see #getKey()
 	 * @since 3.9 BETA_JAVA8
 	 */
 	public IAnnotationBinding[] getTypeAnnotations();
commit 9ecc2f6122d7f7a662b22f71e69ff3081609219c
Author: Markus Keller <markus_keller@ch.ibm.com>
Date:   Mon Feb 3 16:27:20 2014 +0100

    Bug 421628: [1.8][dom ast][api] document new rules for ITypeBinding
    equality
    
    Replaced "connected/disconnected clusters" with "single/different
    clusters" to match the wording in #isEqualTo(..).

3	3	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IBinding.java
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IBinding.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IBinding.java
index d708a69..2717309 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IBinding.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/IBinding.java
@@ -235,11 +235,11 @@ public interface IBinding {
 	/**
 	 * Returns the key for this binding.
 	 * <p>
-	 * Within a connected cluster of bindings (produced by the same call to an
+	 * Within a single cluster of bindings (produced by the same call to an
 	 * {@code ASTParser#create*(*)} method)), each binding has a distinct key.
 	 * The keys are generated in a manner that is predictable and as
 	 * stable as possible. This last property makes these keys useful for
-	 * comparing bindings between disconnected clusters of bindings (for example,
+	 * comparing bindings between different clusters of bindings (for example,
 	 * the bindings between the "before" and "after" ASTs of the same
 	 * compilation unit).
 	 * </p>
@@ -289,7 +289,7 @@ public interface IBinding {
 	 * </ul>
 	 * </p>
 	 * <p>
-	 * The key for a type binding does not contain {@link ITypeBinding#getTypeAnnotations() type annotations},
+	 * The key for a type binding does <em>not</em> contain {@link ITypeBinding#getTypeAnnotations() type annotations},
 	 * so type bindings with different type annotations may have the same key (iff they denote the same un-annotated type).
 	 * By construction, this also applies to method bindings if their declaring types contain type annotations.
 	 * </p>

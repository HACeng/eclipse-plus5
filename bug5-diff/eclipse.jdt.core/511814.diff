commit 7e5aafb6b9ba77e416b9fcbde2f74308f8493de4
Author: Sasikanth Bharadwaj <sasikanth.bharadwaj@in.ibm.com>
Date:   Fri Feb 3 15:13:46 2017 +0530

    Fixed bug 511814 [9] ClassFormatException reading module-info.class from
    jdk-9-ea+153
    
    Change-Id: I56eac004c8a7217ae1a65f1fae72336638513488

23	14	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java
5	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileConstants.java
9	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileReader.java
27	7	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ModuleInfo.java
67	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java
2	7	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ModuleBinding.java
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java
index c543bc2..cf5e4b2 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ClassFile.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2016 IBM Corporation and others.
+ * Copyright (c) 2000, 2017 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -2613,13 +2613,16 @@ public class ClassFile implements TypeConstants, TypeIds {
 		int attrLengthOffset = localContentsOffset;
 		localContentsOffset += 4;
 		int moduleNameIndex =
-				this.constantPool.literalIndex(binding.constantPoolName());
+				this.constantPool.literalIndexForModule(binding.moduleName);
 		this.contents[localContentsOffset++] = (byte) (moduleNameIndex >> 8);
 		this.contents[localContentsOffset++] = (byte) moduleNameIndex;
 		int flags = module.modifiers & ~(ClassFileConstants.AccModule);
 		this.contents[localContentsOffset++] = (byte) (flags >> 8);
 		this.contents[localContentsOffset++] = (byte) flags;
-		int attrLength = 4;
+		int module_version = 0;
+		this.contents[localContentsOffset++] = (byte) (module_version >> 8);
+		this.contents[localContentsOffset++] = (byte) module_version;
+		int attrLength = 6;
 		
 		// ================= requires section =================
 		/** u2 requires_count;
@@ -2629,7 +2632,7 @@ public class ClassFile implements TypeConstants, TypeIds {
 	    **/
 		int requiresCountOffset = localContentsOffset;
 		int requiresCount = module.requiresCount;
-		int requiresSize = 2 + requiresCount * 4;
+		int requiresSize = 2 + requiresCount * 6;
 		if (localContentsOffset + requiresSize >= this.contents.length) {
 			resizeContents(requiresSize);
 		}
@@ -2642,29 +2645,35 @@ public class ClassFile implements TypeConstants, TypeIds {
 			if (CharOperation.equals(req.module.moduleName, TypeConstants.JAVA_BASE)) {
 				javaBaseBinding = reqBinding;
 			}
-			int nameIndex = this.constantPool.literalIndex(reqBinding.constantPoolName());
+			int nameIndex = this.constantPool.literalIndexForModule(reqBinding.moduleName);
 			this.contents[localContentsOffset++] = (byte) (nameIndex >> 8);
 			this.contents[localContentsOffset++] = (byte) (nameIndex);
 			flags = req.modifiers;
 			this.contents[localContentsOffset++] = (byte) (flags >> 8);
 			this.contents[localContentsOffset++] = (byte) (flags);
+			int required_version = 0;
+			this.contents[localContentsOffset++] = (byte) (required_version >> 8);
+			this.contents[localContentsOffset++] = (byte) (required_version);
 		}
 		if (javaBaseBinding == null) {
-			if (localContentsOffset + 4 >= this.contents.length) {
-				resizeContents(4);
+			if (localContentsOffset + 6 >= this.contents.length) {
+				resizeContents(6);
 			}
 			javaBaseBinding = binding.environment.getModule(TypeConstants.JAVA_BASE);
-			int javabase_index = this.constantPool.literalIndex(javaBaseBinding.constantPoolName());
+			int javabase_index = this.constantPool.literalIndexForModule(javaBaseBinding.moduleName);
 			this.contents[localContentsOffset++] = (byte) (javabase_index >> 8);
 			this.contents[localContentsOffset++] = (byte) (javabase_index);
 			flags = ClassFileConstants.AccMandated;
 			this.contents[localContentsOffset++] = (byte) (flags >> 8);
 			this.contents[localContentsOffset++] = (byte) flags;
+			int required_version = 0;
+			this.contents[localContentsOffset++] = (byte) (required_version >> 8);
+			this.contents[localContentsOffset++] = (byte) (required_version);
 			requiresCount++;
 		}
 		this.contents[requiresCountOffset++] = (byte) (requiresCount >> 8);
 		this.contents[requiresCountOffset++] = (byte) requiresCount;
-		attrLength += 2 + 4 * requiresCount;
+		attrLength += 2 + 6 * requiresCount;
 		// ================= end requires section =================
 
 		// ================= exports section =================
@@ -2684,7 +2693,7 @@ public class ClassFile implements TypeConstants, TypeIds {
 		this.contents[localContentsOffset++] = (byte) module.exportsCount;
 		for (int i = 0; i < module.exportsCount; i++) {
 			ExportsStatement ref = module.exports[i];
-			int nameIndex = this.constantPool.literalIndex(CharOperation.replaceOnCopy(ref.pkgName, '.', '/'));
+			int nameIndex = this.constantPool.literalIndexForPackage(CharOperation.replaceOnCopy(ref.pkgName, '.', '/'));
 			this.contents[localContentsOffset++] = (byte) (nameIndex >> 8);
 			this.contents[localContentsOffset++] = (byte) (nameIndex);
 			// TODO exports_flags - check when they are set
@@ -2700,7 +2709,7 @@ public class ClassFile implements TypeConstants, TypeIds {
 					resizeContents(targetSize);
 				}
 				for(int j = 0; j < exportsToCount; j++) {
-					nameIndex = this.constantPool.literalIndex(CharOperation.replaceOnCopy(ref.targets[j].moduleName, '.', '/'));
+					nameIndex = this.constantPool.literalIndexForModule(ref.targets[j].moduleName);
 					this.contents[localContentsOffset++] = (byte) (nameIndex >> 8);
 					this.contents[localContentsOffset++] = (byte) (nameIndex);
 				}
@@ -2727,7 +2736,7 @@ public class ClassFile implements TypeConstants, TypeIds {
 		this.contents[localContentsOffset++] = (byte) module.opensCount;
 		for (int i = 0; i < module.opensCount; i++) {
 			OpensStatement ref = module.opens[i];
-			int nameIndex = this.constantPool.literalIndex(CharOperation.replaceOnCopy(ref.pkgName, '.', '/'));
+			int nameIndex = this.constantPool.literalIndexForPackage(CharOperation.replaceOnCopy(ref.pkgName, '.', '/'));
 			this.contents[localContentsOffset++] = (byte) (nameIndex >> 8);
 			this.contents[localContentsOffset++] = (byte) (nameIndex);
 			// TODO opens_flags - check when they are set
@@ -2743,7 +2752,7 @@ public class ClassFile implements TypeConstants, TypeIds {
 					resizeContents(targetSize);
 				}
 				for(int j = 0; j < opensToCount; j++) {
-					nameIndex = this.constantPool.literalIndex(CharOperation.replaceOnCopy(ref.targets[j].moduleName, '.', '/'));
+					nameIndex = this.constantPool.literalIndexForModule(ref.targets[j].moduleName);
 					this.contents[localContentsOffset++] = (byte) (nameIndex >> 8);
 					this.contents[localContentsOffset++] = (byte) (nameIndex);
 				}
@@ -5202,7 +5211,7 @@ public class ClassFile implements TypeConstants, TypeIds {
 		// now we continue to generate the bytes inside the contents array
 		this.contents[this.contentsOffset++] = (byte) (accessFlags >> 8);
 		this.contents[this.contentsOffset++] = (byte) accessFlags;
-		int classNameIndex = aType.isModule() ? 0 : this.constantPool.literalIndexForType(aType);
+		int classNameIndex = this.constantPool.literalIndexForType(aType);
 		this.contents[this.contentsOffset++] = (byte) (classNameIndex >> 8);
 		this.contents[this.contentsOffset++] = (byte) classNameIndex;
 		int superclassNameIndex;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileConstants.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileConstants.java
index 150124b..47c3ed1 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileConstants.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileConstants.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2016 IBM Corporation and others.
+ * Copyright (c) 2000, 2017 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -85,6 +85,8 @@ public interface ClassFileConstants {
 	int MethodHandleTag = 15;
 	int MethodTypeTag = 16;
 	int InvokeDynamicTag = 18;
+	int ModuleTag = 19;
+	int PackageTag = 20;
 
 	int ConstantMethodRefFixedSize = 5;
 	int ConstantClassFixedSize = 3;
@@ -100,6 +102,8 @@ public interface ClassFileConstants {
 	int ConstantMethodHandleFixedSize = 4;
 	int ConstantMethodTypeFixedSize = 3;
 	int ConstantInvokeDynamicFixedSize = 5;
+	int ConstantModuleFixedSize = 3;
+	int ConstantPackageFixedSize = 3;
 
 	// JVMS 4.4.8
 	int MethodHandleRefKindGetField = 1;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileReader.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileReader.java
index ab3aeae..c7bc52e 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileReader.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ClassFileReader.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2016 IBM Corporation and others.
+ * Copyright (c) 2000, 2017 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -275,6 +275,14 @@ public ClassFileReader(byte[] classFileBytes, char[] fileName, boolean fullyInit
 					this.constantPoolOffsets[i] = readOffset;
 					readOffset += ClassFileConstants.ConstantInvokeDynamicFixedSize;
 					break;
+				case ClassFileConstants.ModuleTag:
+					this.constantPoolOffsets[i] = readOffset;
+					readOffset += ClassFileConstants.ConstantModuleFixedSize;
+					break;
+				case ClassFileConstants.PackageTag:
+					this.constantPoolOffsets[i] = readOffset;
+					readOffset += ClassFileConstants.ConstantPackageFixedSize;
+					break;
 			}
 		}
 		// Read and validate access flags
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ModuleInfo.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ModuleInfo.java
index 240f95a..61a0328 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ModuleInfo.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/classfmt/ModuleInfo.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2016 IBM Corporation.
+ * Copyright (c) 2016, 2017 IBM Corporation.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -31,6 +31,7 @@ public class ModuleInfo extends ClassFileStruct implements IModule {
 	protected int providesCount;
 	protected int opensCount;
 	protected char[] name;
+	protected char[] version;
 	protected ModuleReferenceInfo[] requires;
 	protected PackageExportInfo[] exports;
 	protected PackageExportInfo[] opens;
@@ -121,12 +122,19 @@ public class ModuleInfo extends ClassFileStruct implements IModule {
 		int moduleOffset = readOffset + 6;
 		int utf8Offset;
 		ModuleInfo module = new ModuleInfo(classFileBytes, offsets, 0);
-		utf8Offset = module.constantPoolOffsets[module.u2At(moduleOffset)];
+		int name_index = module.constantPoolOffsets[module.u2At(moduleOffset)];
+		utf8Offset = module.constantPoolOffsets[module.u2At(name_index + 1)];
 		module.name = module.utf8At(utf8Offset + 3, module.u2At(utf8Offset + 1));
 		CharOperation.replace(module.name, '/', '.');
 		moduleOffset += 2;
 		module.flags = module.u2At(moduleOffset);
 		moduleOffset += 2;
+		int version_index = module.u2At(moduleOffset);
+		if (version_index > 0) {
+			utf8Offset = module.constantPoolOffsets[version_index];
+			module.version = module.utf8At(utf8Offset + 3, module.u2At(utf8Offset + 1));
+		}
+		moduleOffset += 2;
 
 		utf8Offset = module.constantPoolOffsets[module.u2At(readOffset)];
 		int count = module.u2At(moduleOffset);
@@ -134,7 +142,8 @@ public class ModuleInfo extends ClassFileStruct implements IModule {
 		module.requires = new ModuleReferenceInfo[count];
 		moduleOffset += 2;
 		for (int i = 0; i < count; i++) {
-			utf8Offset = module.constantPoolOffsets[module.u2At(moduleOffset)];
+			name_index = module.constantPoolOffsets[module.u2At(moduleOffset)];
+			utf8Offset = module.constantPoolOffsets[module.u2At(name_index + 1)];
 			char[] requiresNames = module.utf8At(utf8Offset + 3, module.u2At(utf8Offset + 1));
 			module.requires[i] = module.new ModuleReferenceInfo();
 			CharOperation.replace(requiresNames, '/', '.');
@@ -144,13 +153,20 @@ public class ModuleInfo extends ClassFileStruct implements IModule {
 			module.requires[i].modifiers = modifiers;
 			module.requires[i].isTransitive = (ClassFileConstants.ACC_TRANSITIVE & modifiers) != 0; // Access modifier
 			moduleOffset += 2;
+			version_index = module.u2At(moduleOffset);
+			if (version_index > 0) {
+				utf8Offset = module.constantPoolOffsets[version_index];
+				module.requires[i].required_version = module.utf8At(utf8Offset + 3, module.u2At(utf8Offset + 1));
+			}
+			moduleOffset += 2;
 		}
 		count = module.u2At(moduleOffset);
 		moduleOffset += 2;
 		module.exportsCount = count;
 		module.exports = new PackageExportInfo[count];
 		for (int i = 0; i < count; i++) {
-			utf8Offset = module.constantPoolOffsets[module.u2At(moduleOffset)];
+			name_index = module.constantPoolOffsets[module.u2At(moduleOffset)];
+			utf8Offset = module.constantPoolOffsets[module.u2At(name_index + 1)];
 			char[] exported = module.utf8At(utf8Offset + 3, module.u2At(utf8Offset + 1));
 			CharOperation.replace(exported, '/', '.');
 			PackageExportInfo pack = module.new PackageExportInfo();
@@ -165,7 +181,8 @@ public class ModuleInfo extends ClassFileStruct implements IModule {
 				pack.exportedTo = new char[exportedtoCount][];
 				pack.exportedToCount = exportedtoCount;
 				for(int k = 0; k < exportedtoCount; k++) {
-					utf8Offset = module.constantPoolOffsets[module.u2At(moduleOffset)];
+					name_index = module.constantPoolOffsets[module.u2At(moduleOffset)];
+					utf8Offset = module.constantPoolOffsets[module.u2At(name_index + 1)];
 					char[] exportedToName = module.utf8At(utf8Offset + 3, module.u2At(utf8Offset + 1));
 					CharOperation.replace(exportedToName, '/', '.');
 					pack.exportedTo[k] = exportedToName;
@@ -178,7 +195,8 @@ public class ModuleInfo extends ClassFileStruct implements IModule {
 		module.opensCount = count;
 		module.opens = new PackageExportInfo[count];
 		for (int i = 0; i < count; i++) {
-			utf8Offset = module.constantPoolOffsets[module.u2At(moduleOffset)];
+			name_index = module.constantPoolOffsets[module.u2At(moduleOffset)];
+			utf8Offset = module.constantPoolOffsets[module.u2At(name_index + 1)];
 			char[] exported = module.utf8At(utf8Offset + 3, module.u2At(utf8Offset + 1));
 			CharOperation.replace(exported, '/', '.');
 			PackageExportInfo pack = module.new PackageExportInfo();
@@ -193,7 +211,8 @@ public class ModuleInfo extends ClassFileStruct implements IModule {
 				pack.exportedTo = new char[exportedtoCount][];
 				pack.exportedToCount = exportedtoCount;
 				for(int k = 0; k < exportedtoCount; k++) {
-					utf8Offset = module.constantPoolOffsets[module.u2At(moduleOffset)];
+					name_index = module.constantPoolOffsets[module.u2At(moduleOffset)];
+					utf8Offset = module.constantPoolOffsets[module.u2At(name_index + 1)];
 					char[] exportedToName = module.utf8At(utf8Offset + 3, module.u2At(utf8Offset + 1));
 					CharOperation.replace(exportedToName, '/', '.');
 					pack.exportedTo[k] = exportedToName;
@@ -247,6 +266,7 @@ public class ModuleInfo extends ClassFileStruct implements IModule {
 		char[] refName;
 		boolean isTransitive = false;
 		int modifiers;
+		char[] required_version;
 		@Override
 		public char[] name() {
 			return this.refName;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java
index 2cc8154..d56c3f0 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/codegen/ConstantPool.java
@@ -1,10 +1,14 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2014 IBM Corporation and others.
+ * Copyright (c) 2000, 2017 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
  * http://www.eclipse.org/legal/epl-v10.html
  *
+ * This is an implementation of an early-draft specification developed under the Java
+ * Community Process (JCP) and is made available for testing and evaluation purposes
+ * only. The code is not compatible with any specification of the JCP.
+ * 
  * Contributors:
  *     IBM Corporation - initial API and implementation
  *     Jesper S Moller - Contributions for
@@ -51,6 +55,8 @@ public class ConstantPool implements ClassFileConstants, TypeIds {
 	protected CharArrayCache stringCache;
 	protected HashtableOfObject methodsAndFieldsCache;
 	protected CharArrayCache classCache;
+	protected CharArrayCache moduleCache;
+	protected CharArrayCache packageCache;
 	protected HashtableOfObject nameAndTypeCacheForFieldsAndMethods;
 	public byte[] poolContent;
 	public int currentIndex = 1;
@@ -306,6 +312,8 @@ public class ConstantPool implements ClassFileConstants, TypeIds {
 		this.stringCache = new CharArrayCache(STRING_INITIAL_SIZE);
 		this.methodsAndFieldsCache = new HashtableOfObject(METHODS_AND_FIELDS_INITIAL_SIZE);
 		this.classCache = new CharArrayCache(CLASS_INITIAL_SIZE);
+		this.moduleCache = new CharArrayCache(5);
+		this.packageCache = new CharArrayCache(5);
 		this.nameAndTypeCacheForFieldsAndMethods = new HashtableOfObject(NAMEANDTYPE_INITIAL_SIZE);
 		this.offsets = new int[5];
 		initialize(classFile);
@@ -671,6 +679,64 @@ public class ConstantPool implements ClassFileConstants, TypeIds {
 		}
 		return index;
 	}
+	public int literalIndexForModule(final char[] moduleName) {
+		int index;
+		if ((index = this.moduleCache.putIfAbsent(moduleName, this.currentIndex)) < 0) {
+			// The entry doesn't exit yet
+			this.currentIndex++;
+			if ((index = -index) > 0xFFFF){
+				this.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());
+			}
+			// Write the tag first
+			int length = this.offsets.length;
+			if (length <= index) {
+				// resize
+				System.arraycopy(this.offsets, 0, (this.offsets = new int[index * 2]), 0, length);
+			}
+			this.offsets[index] = this.currentOffset;
+			writeU1(ModuleTag);
+			// Then the string index
+			int stringIndexOffset = this.currentOffset;
+			if (this.currentOffset + 2 >= this.poolContent.length) {
+				resizePoolContents(2);
+			}
+			this.currentOffset+=2;
+
+			final int stringIndex = literalIndex(moduleName);
+			this.poolContent[stringIndexOffset++] = (byte) (stringIndex >> 8);
+			this.poolContent[stringIndexOffset] = (byte) stringIndex;
+		}
+		return index;
+	}
+	public int literalIndexForPackage(final char[] packageName) {
+		int index;
+		if ((index = this.packageCache.putIfAbsent(packageName, this.currentIndex)) < 0) {
+			// The entry doesn't exit yet
+			this.currentIndex++;
+			if ((index = -index) > 0xFFFF){
+				this.classFile.referenceBinding.scope.problemReporter().noMoreAvailableSpaceInConstantPool(this.classFile.referenceBinding.scope.referenceType());
+			}
+			// Write the tag first
+			int length = this.offsets.length;
+			if (length <= index) {
+				// resize
+				System.arraycopy(this.offsets, 0, (this.offsets = new int[index * 2]), 0, length);
+			}
+			this.offsets[index] = this.currentOffset;
+			writeU1(PackageTag);
+			// Then the string index
+			int stringIndexOffset = this.currentOffset;
+			if (this.currentOffset + 2 >= this.poolContent.length) {
+				resizePoolContents(2);
+			}
+			this.currentOffset+=2;
+
+			final int stringIndex = literalIndex(packageName);
+			this.poolContent[stringIndexOffset++] = (byte) (stringIndex >> 8);
+			this.poolContent[stringIndexOffset] = (byte) stringIndex;
+		}
+		return index;
+	}
 	public int literalIndexForType(final char[] constantPoolName) {
 		int index;
 		if ((index = this.classCache.putIfAbsent(constantPoolName, this.currentIndex)) < 0) {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ModuleBinding.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ModuleBinding.java
index 8347182..3e3499e 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ModuleBinding.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ModuleBinding.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2016 IBM Corporation and others.
+ * Copyright (c) 2016, 2017 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -69,7 +69,6 @@ public class ModuleBinding extends Binding {
 	public int tagBits;
 	private ModuleBinding[] requiredModules = null;
 	private boolean isAuto;
-	private char[] constantPoolName;
 
 	HashtableOfPackage declaredPackages;
 	HashtableOfPackage exportedPackages;
@@ -121,11 +120,7 @@ public class ModuleBinding extends Binding {
 			}
 		});
 	}
-	public char[] constantPoolName() /* java/lang/Object */ {
-		if (this.constantPoolName == null)
-			this.constantPoolName = CharOperation.replaceOnCopy(this.moduleName, '.', '/');
-		return this.constantPoolName;
-	}
+
 	// All modules required by this module, either directly or indirectly
 	public Supplier<Collection<ModuleBinding>> dependencyGraphCollector() {
 		return () -> getRequiredModules(false)

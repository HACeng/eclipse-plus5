commit a9a2f610dbfd1c80acbe2670e60eb850641763f6
Author: shankha banerjee <shankhba@in.ibm.com>
Date:   Thu Apr 25 13:42:32 2013 +0530

    Fix for bug 403810 - [1.8] @since tags need adjusting

3	3	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java
2	2	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java
4	4	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTNode.java
4	4	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTVisitor.java
1	1	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnnotatableType.java
3	3	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ArrayType.java
1	1	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ExtraDimension.java
1	1	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/LambdaExpression.java
16	16	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java
4	4	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Modifier.java
3	3	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/PrimitiveType.java
3	3	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/QualifiedType.java
3	3	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SimpleType.java
6	6	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleVariableDeclaration.java
1	1	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Type.java
3	3	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeParameter.java
5	5	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclaration.java
3	3	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclarationFragment.java
3	3	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/WildcardType.java
3	3	org.eclipse.jdt.core/formatter/org/eclipse/jdt/core/formatter/DefaultCodeFormatterConstants.java
4	4	org.eclipse.jdt.core/model/org/eclipse/jdt/core/Flags.java
1	1	org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java
3	3	org.eclipse.jdt.core/model/org/eclipse/jdt/core/compiler/ITerminalSymbols.java
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java
index 20781c3..660201e 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AST.java
@@ -187,7 +187,7 @@ public final class AST {
 	 * up to and including Java SE 8 (aka JDK 1.8).
 	 * </p>
 	 *
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public static final int JLS8 = 8;
 
@@ -1449,7 +1449,7 @@ public final class AST {
 	 * </ul>
 	 * @exception UnsupportedOperationException if this operation is used
 	 *            in a JLS2, JLS3 or JLS4 AST
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public ExtraDimension newExtraDimension() {
 		ExtraDimension result = new ExtraDimension(this);
@@ -1600,7 +1600,7 @@ public final class AST {
 	 * 
 	 * @return a new unparented lambda expression node
 	 * @exception UnsupportedOperationException if this operation is used in a JLS2, JLS3 or JLS4 AST
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public LambdaExpression newLambdaExpression() {
 		LambdaExpression result = new LambdaExpression(this);
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java
index d631372..76ad87b 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTMatcher.java
@@ -854,7 +854,7 @@ public class ASTMatcher {
 	 * @return <code>true</code> if the subtree matches, or
 	 *   <code>false</code> if they do not match or the other object has a
 	 *   different node type or is <code>null</code>
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public boolean match(ExtraDimension node, Object other) {
 		if (!(other instanceof ExtraDimension)) {
@@ -1209,7 +1209,7 @@ public class ASTMatcher {
 	 * @return <code>true</code> if the subtree matches, or
 	 *   <code>false</code> if they do not match or the other object has a
 	 *   different node type or is <code>null</code>
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public boolean match(LambdaExpression node, Object other) {
 		if (!(other instanceof LambdaExpression)) {
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTNode.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTNode.java
index 2a87561..6bba4f5 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTNode.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTNode.java
@@ -838,7 +838,7 @@ public abstract class ASTNode {
 	 * <code>ExtraDimension</code>.
 	 *
 	 * @see ExtraDimension
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public static final int EXTRA_DIMENSION = 85;
 
@@ -846,7 +846,7 @@ public abstract class ASTNode {
 	 * Node type constant indicating a node of type
 	 * <code>LambdaExpression</code>.
 	 * @see LambdaExpression
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public static final int LAMBDA_EXPRESSION = 86;
 
@@ -1920,7 +1920,7 @@ public abstract class ASTNode {
      * </p>
      * 
 	 * @exception UnsupportedOperationException if this operation is used below JLS8
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	final void unsupportedIn2_3_4() {
 		if (this.ast.apiLevel < AST.JLS8) {
@@ -1953,7 +1953,7 @@ public abstract class ASTNode {
      * </p>
      * 
 	 * @exception UnsupportedOperationException if this operation is used in an AST later than JLS4
-     * @since 3.9
+     * @since 3.9 BETA_JAVA8
      */
 	// In API Javadocs, add: * @deprecated In the JLS8 API, this method is replaced by {@link #replacement()}.
 	final void supportedOnlyIn2_3_4() {
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTVisitor.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTVisitor.java
index d519f2a..681e325 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTVisitor.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTVisitor.java
@@ -641,7 +641,7 @@ public abstract class ASTVisitor {
 	 * @return <code>true</code> if the children of this node should be
 	 * visited, and <code>false</code> if the children of this node should
 	 * be skipped
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public boolean visit(ExtraDimension node) {
 		return true;
@@ -842,7 +842,7 @@ public abstract class ASTVisitor {
 	 * @return <code>true</code> if the children of this node should be
 	 * visited, and <code>false</code> if the children of this node should
 	 * be skipped
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public boolean visit(LambdaExpression node) {
 		return true;
@@ -1993,7 +1993,7 @@ public abstract class ASTVisitor {
 	 * </p>
 	 *
 	 * @param node the node to visit
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public void endVisit(ExtraDimension node) {
 		// do nothing by default
@@ -2126,7 +2126,7 @@ public abstract class ASTVisitor {
 	 * </p>
 	 *
 	 * @param node the node to visit
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public void endVisit(LambdaExpression node) {
 		// default implementation: do nothing
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnnotatableType.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnnotatableType.java
index 2350a7c..c62d510 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnnotatableType.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/AnnotatableType.java
@@ -22,7 +22,7 @@ import java.util.List;
  * Introduced in JLS8, type references that can be annotated are represented by 
  * AnnotatableType. For the list of types extending AnnotatableType, see {@link Type}.</p>
  *
- * @since 3.9
+ * @since 3.9 BETA_JAVA8
  */
 public abstract class AnnotatableType extends Type {
 	
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ArrayType.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ArrayType.java
index ef35d98..cd1dd83 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ArrayType.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ArrayType.java
@@ -42,7 +42,7 @@ public class ArrayType extends AnnotatableType {
 
 	/**
 	 * The "annotations" structural property of this node type (element type: {@link Annotation}).
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public static final ChildListPropertyDescriptor ANNOTATIONS_PROPERTY =
 			internalAnnotationsPropertyFactory(ArrayType.class);
@@ -57,7 +57,7 @@ public class ArrayType extends AnnotatableType {
 	 * A list of property descriptors (element type:
 	 * {@link StructuralPropertyDescriptor}),
 	 * or null if uninitialized.
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	private static final List PROPERTY_DESCRIPTORS_8_0;
 
@@ -117,7 +117,7 @@ public class ArrayType extends AnnotatableType {
 
 	/* (omit javadoc for this method)
 	 * Method declared on AnnotatableType.
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	final ChildListPropertyDescriptor internalAnnotationsProperty() {
 		return ANNOTATIONS_PROPERTY;
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ExtraDimension.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ExtraDimension.java
index 32db075..306abe9 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ExtraDimension.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ExtraDimension.java
@@ -31,7 +31,7 @@ import java.util.List;
  * 	{ Annotation } <b>[]</b>
  * </pre>
  *
- * @since 3.9
+ * @since 3.9 BETA_JAVA8
  * @noinstantiate This class is not intended to be instantiated by clients.
  */
 public class ExtraDimension extends ASTNode {
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/LambdaExpression.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/LambdaExpression.java
index 9c0dcbd..fd541a5 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/LambdaExpression.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/LambdaExpression.java
@@ -31,7 +31,7 @@ import java.util.List;
  * while the third form uses {@link SingleVariableDeclaration}.</p>
  *<p>The Body can be either a {@link Block} or an {@link Expression}.</p>
  *
- * @since 3.9 
+ * @since 3.9 BETA_JAVA8
  * @noinstantiate This class is not intended to be instantiated by clients 
  */
 public class LambdaExpression extends Expression {
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java
index 9256b4b..b00d0de 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/MethodDeclaration.java
@@ -121,7 +121,7 @@ public class MethodDeclaration extends BodyDeclaration {
 	
 	/**
 	 * The "extraDimensions2" structural property of this node type (element type: {@link ExtraDimension}) (added in JLS8 API).
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public static final ChildListPropertyDescriptor EXTRA_DIMENSIONS2_PROPERTY =
 			new ChildListPropertyDescriptor(MethodDeclaration.class, "extraDimensions2", ExtraDimension.class, NO_CYCLE_RISK); //$NON-NLS-1$
@@ -142,14 +142,14 @@ public class MethodDeclaration extends BodyDeclaration {
 
 	/**
 	 * The "receiverType" structural property of this node type (child type: {@link AnnotatableType}) (added in JLS8 API).
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public static final ChildPropertyDescriptor RECEIVER_TYPE_PROPERTY =
 			new ChildPropertyDescriptor(MethodDeclaration.class, "receiverType", AnnotatableType.class, OPTIONAL, NO_CYCLE_RISK); //$NON-NLS-1$
 	
 	/**
 	 * The "receiverQualifier" structural property of this node type (child type: {@link SimpleName}) (added in JLS8 API).
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public static final ChildPropertyDescriptor RECEIVER_QUALIFIER_PROPERTY =
 			new ChildPropertyDescriptor(MethodDeclaration.class, "receiverQualifier", SimpleName.class, OPTIONAL, NO_CYCLE_RISK); //$NON-NLS-1$
@@ -164,7 +164,7 @@ public class MethodDeclaration extends BodyDeclaration {
 
 	/**
 	 * The "thrownExceptionTypes" structural property of this node type (element type: {@link Type}) (added in JLS8 API).
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public static final ChildListPropertyDescriptor THROWN_EXCEPTION_TYPES_PROPERTY =
 		new ChildListPropertyDescriptor(MethodDeclaration.class, "thrownExceptionTypes", Type.class, NO_CYCLE_RISK); //$NON-NLS-1$
@@ -196,7 +196,7 @@ public class MethodDeclaration extends BodyDeclaration {
 	 * A list of property descriptors (element type:
 	 * {@link StructuralPropertyDescriptor}),
 	 * or null if uninitialized.
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	private static final List PROPERTY_DESCRIPTORS_8_0;
 
@@ -279,14 +279,14 @@ public class MethodDeclaration extends BodyDeclaration {
 	/**
 	 * The explicit receiver type, or <code>null</code> if none.
 	 * Defaults to none.
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	private AnnotatableType optionalReceiverType = null;
 	
 	/**
 	 * Qualifying name of the explicit </code>this</code> parameter, or <code>null</code> if none.
 	 * Defaults to none.
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	private SimpleName optionalReceiverQualifier = null;
 
@@ -335,7 +335,7 @@ public class MethodDeclaration extends BodyDeclaration {
 	 * Null before JLS8. Added in JLS8; defaults to an empty list
 	 * (see constructor).
 	 * 
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	private ASTNode.NodeList extraDimensions = null;
 
@@ -352,7 +352,7 @@ public class MethodDeclaration extends BodyDeclaration {
 	 * Null before JLS8. Added in JLS8; defaults to an empty list
 	 * (see constructor).
 	 * 
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	private ASTNode.NodeList thrownExceptionTypes = null;
 
@@ -732,7 +732,7 @@ public class MethodDeclaration extends BodyDeclaration {
 	 *
 	 * @return the receiver type or <code>null</code> if receiver is not declared explicitly
 	 * @exception UnsupportedOperationException if this operation is used below JLS8
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public AnnotatableType getReceiverType() {
 		unsupportedIn2_3_4();
@@ -747,7 +747,7 @@ public class MethodDeclaration extends BodyDeclaration {
 	 * 
 	 * @param receiverType type of the explicit receiver parameter, or <code>null</code> if there is none
 	 * @exception UnsupportedOperationException if this operation is used below JLS8
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public void setReceiverType(AnnotatableType receiverType) {
 		unsupportedIn2_3_4();
@@ -765,7 +765,7 @@ public class MethodDeclaration extends BodyDeclaration {
 	 * 
 	 * @returns the qualifying name or <code>null</code> if a qualifier was not specified
 	 * @exception UnsupportedOperationException if this operation is used below JLS8
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public SimpleName getReceiverQualifier() {
 		unsupportedIn2_3_4();
@@ -777,7 +777,7 @@ public class MethodDeclaration extends BodyDeclaration {
 	 * 
 	 * @param receiverQualifier explicit receiver parameter to be added to the method declaration
 	 * @exception UnsupportedOperationException if this operation is used below JLS8
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public void setReceiverQualifier(SimpleName receiverQualifier) {
 		unsupportedIn2_3_4();
@@ -842,7 +842,7 @@ public class MethodDeclaration extends BodyDeclaration {
 	 * deprecation warnings.
 	 * @exception UnsupportedOperationException if this operation is used in
 	 *    a JLS8 or later AST
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	/*package*/	List internalThrownExceptions() {
 		// more efficient than just calling supportedOnlyIn2_3_4() to check
@@ -860,7 +860,7 @@ public class MethodDeclaration extends BodyDeclaration {
 	 *    (element type: {@link Type})
 	 * @exception UnsupportedOperationException if this operation is used
 	 *            in a JLS2, JLS3 or JLS4 AST    
-	 * @since 3.9    	
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public List thrownExceptionTypes()  {
 		if (this.thrownExceptionTypes == null) {
@@ -1085,7 +1085,7 @@ public class MethodDeclaration extends BodyDeclaration {
 	 * 
 	 * @return the live list of extra dimensions with optional annotations (element type: {@link ExtraDimension})
 	 * @exception UnsupportedOperationException if this operation is used below JLS8
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public List extraDimensions() {
 		// more efficient than just calling unsupportedIn2_3_4() to check
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Modifier.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Modifier.java
index f617652..b30efd0 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Modifier.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Modifier.java
@@ -101,7 +101,7 @@ public final class Modifier extends ASTNode implements IExtendedModifier {
 		 * Note that the value of this modifier is
 		 * internal and is not specified in the Java Virtual Machine Specification.
 		 * </p>
-		 * @since 3.9
+		 * @since 3.9 BETA_JAVA8
 		 */
 		public static final ModifierKeyword DEFAULT_KEYWORD = new ModifierKeyword("default", DEFAULT);//$NON-NLS-1$
 
@@ -317,7 +317,7 @@ public final class Modifier extends ASTNode implements IExtendedModifier {
 	 * Note that the value of this flag is internal and is not
 	 * specified in the Java Virtual Machine Specification.
 	 * </p>
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public static final int DEFAULT = 0x10000;
 
@@ -478,7 +478,7 @@ public final class Modifier extends ASTNode implements IExtendedModifier {
 	 * @param flags the modifier flags
 	 * @return <code>true</code> if the <code>DEFAULT</code> bit is set
 	 * and <code>false</code> otherwise
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public static boolean isDefault(int flags) {
 		return (flags & DEFAULT) != 0;
@@ -708,7 +708,7 @@ public final class Modifier extends ASTNode implements IExtendedModifier {
 	/**
 	 * Answer true if the receiver is the default modifier, false otherwise.
 	 * @return true if the receiver is the default modifier, false otherwise
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public boolean isDefault() {
 		return this.modifierKeyword == ModifierKeyword.DEFAULT_KEYWORD;
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/PrimitiveType.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/PrimitiveType.java
index 38fe8dc..948c32c 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/PrimitiveType.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/PrimitiveType.java
@@ -160,7 +160,7 @@ public class PrimitiveType extends AnnotatableType {
 
 	/**
 	 * The "annotations" structural property of this node type (element type: {@link Annotation}).
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public static final ChildListPropertyDescriptor ANNOTATIONS_PROPERTY =
 			internalAnnotationsPropertyFactory(PrimitiveType.class);
@@ -182,7 +182,7 @@ public class PrimitiveType extends AnnotatableType {
 	 * A list of property descriptors (element type:
 	 * {@link StructuralPropertyDescriptor}),
 	 * or null if uninitialized.
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	private static final List PROPERTY_DESCRIPTORS_8_0;
 	static {
@@ -235,7 +235,7 @@ public class PrimitiveType extends AnnotatableType {
 
 	/* (omit javadoc for this method)
 	 * Method declared on AnnotatableType.
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	final ChildListPropertyDescriptor internalAnnotationsProperty() {
 		return ANNOTATIONS_PROPERTY;
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/QualifiedType.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/QualifiedType.java
index c862ba7..b3b549f 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/QualifiedType.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/QualifiedType.java
@@ -78,7 +78,7 @@ public class QualifiedType extends AnnotatableType {
 
 	/**
 	 * The "annotations" structural property of this node type (element type: {@link Annotation}).
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public static final ChildListPropertyDescriptor ANNOTATIONS_PROPERTY =
 			internalAnnotationsPropertyFactory(QualifiedType.class);
@@ -99,7 +99,7 @@ public class QualifiedType extends AnnotatableType {
 	 * A list of property descriptors (element type:
 	 * {@link StructuralPropertyDescriptor}),
 	 * or null if uninitialized.
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	private static final List PROPERTY_DESCRIPTORS_8_0;
 
@@ -166,7 +166,7 @@ public class QualifiedType extends AnnotatableType {
 
 	/* (omit javadoc for this method)
 	 * Method declared on AnnotatableType.
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	final ChildListPropertyDescriptor internalAnnotationsProperty() {
 		return ANNOTATIONS_PROPERTY;
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SimpleType.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SimpleType.java
index 1135555..91818f4 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SimpleType.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SimpleType.java
@@ -43,7 +43,7 @@ public class SimpleType extends AnnotatableType {
 
 	/**
 	 * The "annotations" structural property of this node type (element type: {@link Annotation}).
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public static final ChildListPropertyDescriptor ANNOTATIONS_PROPERTY =
 			internalAnnotationsPropertyFactory(SimpleType.class);
@@ -65,7 +65,7 @@ public class SimpleType extends AnnotatableType {
 	 * A list of property descriptors (element type:
 	 * {@link StructuralPropertyDescriptor}),
 	 * or null if uninitialized.
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	private static final List PROPERTY_DESCRIPTORS_8_0;
 
@@ -124,7 +124,7 @@ public class SimpleType extends AnnotatableType {
 
 	/* (omit javadoc for this method)
 	 * Method declared on AnnotatableType.
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	final ChildListPropertyDescriptor internalAnnotationsProperty() {
 		return ANNOTATIONS_PROPERTY;
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleVariableDeclaration.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleVariableDeclaration.java
index ed20968..1045a6a 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleVariableDeclaration.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/SingleVariableDeclaration.java
@@ -62,7 +62,7 @@ public class SingleVariableDeclaration extends VariableDeclaration {
 	/**
 	 * The "varargsAnnotations" structural property of variable arguments of this node type (element type: {@link Annotation})
 	 * (added in JLS8 API).
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public static final ChildListPropertyDescriptor VARARGS_ANNOTATIONS_PROPERTY =
 			new ChildListPropertyDescriptor(SingleVariableDeclaration.class, "varargsAnnotations", Annotation.class, CYCLE_RISK); //$NON-NLS-1$
@@ -93,7 +93,7 @@ public class SingleVariableDeclaration extends VariableDeclaration {
 
 	/**
 	 * The "extraDimensions2" structural property of this node type (element type: {@link ExtraDimension}) (added in JLS8 API).
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public static final ChildListPropertyDescriptor EXTRA_DIMENSIONS2_PROPERTY =
 			internalExtraDimensions2PropertyFactory(SingleVariableDeclaration.class);
@@ -125,7 +125,7 @@ public class SingleVariableDeclaration extends VariableDeclaration {
 	 * A list of property descriptors (element type:
 	 * {@link StructuralPropertyDescriptor}),
 	 * or null if uninitialized.
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	private static final List PROPERTY_DESCRIPTORS_8_0;
 
@@ -207,7 +207,7 @@ public class SingleVariableDeclaration extends VariableDeclaration {
 	 * Null before JLS8. Added in JLS8; defaults to an empty list
 	 * (see constructor).
 	 * 
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	private ASTNode.NodeList varargsAnnotations = null;
 
@@ -258,7 +258,7 @@ public class SingleVariableDeclaration extends VariableDeclaration {
 
 	/* (omit javadoc for this method)
 	 * Method declared on VariableDeclaration.
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	final ChildListPropertyDescriptor internalExtraDimensions2Property() {
 		return EXTRA_DIMENSIONS2_PROPERTY;
@@ -610,7 +610,7 @@ public class SingleVariableDeclaration extends VariableDeclaration {
 	 * @return the list of annotations on the varargs token (element type: {@link Annotation})
 	 * @exception UnsupportedOperationException if this operation is used
 	 *            in a JLS2, JLS3 or JLS4 AST
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public List varargsAnnotations() {
 		if (this.varargsAnnotations == null) {
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Type.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Type.java
index 8b4e9bc..336deda 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Type.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/Type.java
@@ -216,7 +216,7 @@ public abstract class Type extends ASTNode {
 	 * @return <code>true</code> if this type is an instance of {@link AnnotatableType}, and
 	 * <code>false</code> otherwise
 	 * 			
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public boolean isAnnotatable() {
 		return (this instanceof AnnotatableType);
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeParameter.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeParameter.java
index bed3dc1..1db6bf4 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeParameter.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/TypeParameter.java
@@ -33,7 +33,7 @@ public class TypeParameter extends ASTNode {
 
 	/**
 	 * The "annotations" structural property of this node type (element type: {@link Annotation}) (added in JLS8 API).
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public static final ChildListPropertyDescriptor ANNOTATIONS_PROPERTY =
 			new ChildListPropertyDescriptor(TypeParameter.class, "annotations", Annotation.class, CYCLE_RISK); //$NON-NLS-1$
@@ -60,7 +60,7 @@ public class TypeParameter extends ASTNode {
 	 * A list of property descriptors (element type:
 	 * {@link StructuralPropertyDescriptor}),
 	 * or null if uninitialized.
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	private static final List PROPERTY_DESCRIPTORS_8_0;
 
@@ -296,7 +296,7 @@ public class TypeParameter extends ASTNode {
 	 * @return the live list of annotations (element type: {@link Annotation})
 	 * @exception UnsupportedOperationException if this operation is used
 	 *            in a JLS2, JLS3 or JLS4 AST
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public List annotations() {
 		// more efficient than just calling unsupportedIn2_3_4() to check
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclaration.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclaration.java
index c141404..c13bd9b 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclaration.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclaration.java
@@ -51,7 +51,7 @@ public abstract class VariableDeclaration extends ASTNode {
 	 * Null before JLS8. Added in JLS8; defaults to an empty list
 	 * (see constructor).
 	 * 
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	ASTNode.NodeList extraDimensions = null;
 
@@ -150,7 +150,7 @@ public abstract class VariableDeclaration extends ASTNode {
 	 * of this node (element type: {@link ExtraDimension}) (added in JLS8 API).
 	 *
 	 * @return the property descriptor
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	abstract ChildListPropertyDescriptor internalExtraDimensions2Property();
 	
@@ -159,7 +159,7 @@ public abstract class VariableDeclaration extends ASTNode {
 	 * of this node (element type: {@link ExtraDimension}) (added in JLS8 API).
 	 *
 	 * @return the property descriptor
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public final ChildListPropertyDescriptor getExtraDimensions2Property() {
 		return internalExtraDimensions2Property();
@@ -298,7 +298,7 @@ public abstract class VariableDeclaration extends ASTNode {
 	/**
 	 * Internal synonym for deprecated method. Used to avoid
 	 * deprecation warnings.
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	final void internalSetExtraDimensions(int dimensions) {
 		// more efficient than just calling supportedOnlyIn2_3_4() to check
@@ -319,7 +319,7 @@ public abstract class VariableDeclaration extends ASTNode {
 	 *
 	 * @return the live list of extra dimensions with optional annotations (element type: {@link ExtraDimension})
 	 * @exception UnsupportedOperationException if this operation is used below JLS8
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public List extraDimensions() {
 		// more efficient than just calling unsupportedIn2_3_4() to check
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclarationFragment.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclarationFragment.java
index 866436d..7d990e9 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclarationFragment.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/VariableDeclarationFragment.java
@@ -48,7 +48,7 @@ public class VariableDeclarationFragment extends VariableDeclaration {
 
 	/**
 	 * The "extraDimensions2" structural property of this node type (element type: {@link ExtraDimension}) (added in JLS8 API).
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public static final ChildListPropertyDescriptor EXTRA_DIMENSIONS2_PROPERTY =
 			internalExtraDimensions2PropertyFactory(VariableDeclarationFragment.class);
@@ -72,7 +72,7 @@ public class VariableDeclarationFragment extends VariableDeclaration {
 	 * A list of property descriptors (element type:
 	 * {@link StructuralPropertyDescriptor}),
 	 * or null if uninitialized.
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	private static final List PROPERTY_DESCRIPTORS_8_0;
 
@@ -142,7 +142,7 @@ public class VariableDeclarationFragment extends VariableDeclaration {
 
 	/* (omit javadoc for this method)
 	 * Method declared on VariableDeclaration.
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	final ChildListPropertyDescriptor internalExtraDimensions2Property() {
 		return EXTRA_DIMENSIONS2_PROPERTY;
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/WildcardType.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/WildcardType.java
index ded345a..93fd054 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/WildcardType.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/WildcardType.java
@@ -37,7 +37,7 @@ public class WildcardType extends AnnotatableType {
 
 	/**
 	 * The "annotations" structural property of this node type (element type: {@link Annotation}).
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public static final ChildListPropertyDescriptor ANNOTATIONS_PROPERTY =
 			internalAnnotationsPropertyFactory(WildcardType.class);
@@ -64,7 +64,7 @@ public class WildcardType extends AnnotatableType {
 	 * A list of property descriptors (element type:
 	 * {@link StructuralPropertyDescriptor}),
 	 * or null if uninitialized.
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	private static final List PROPERTY_DESCRIPTORS_8_0;
 
@@ -133,7 +133,7 @@ public class WildcardType extends AnnotatableType {
 
 	/* (omit javadoc for this method)
 	 * Method declared on AnnotatableType.
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	final ChildListPropertyDescriptor internalAnnotationsProperty() {
 		return ANNOTATIONS_PROPERTY;
diff --git a/org.eclipse.jdt.core/formatter/org/eclipse/jdt/core/formatter/DefaultCodeFormatterConstants.java b/org.eclipse.jdt.core/formatter/org/eclipse/jdt/core/formatter/DefaultCodeFormatterConstants.java
index 7ea0ead..87600c7 100644
--- a/org.eclipse.jdt.core/formatter/org/eclipse/jdt/core/formatter/DefaultCodeFormatterConstants.java
+++ b/org.eclipse.jdt.core/formatter/org/eclipse/jdt/core/formatter/DefaultCodeFormatterConstants.java
@@ -624,7 +624,7 @@ public class DefaultCodeFormatterConstants {
 	 * @see #NEXT_LINE
 	 * @see #NEXT_LINE_SHIFTED
 	 * @see #NEXT_LINE_ON_WRAP
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public static final String FORMATTER_BRACE_POSITION_FOR_LAMBDA_BODY = JavaCore.PLUGIN_ID + ".formatter.brace_position_for_lambda_body";	//$NON-NLS-1$
 
@@ -2030,7 +2030,7 @@ public class DefaultCodeFormatterConstants {
 	 * </pre>
 	 * @see JavaCore#INSERT
 	 * @see JavaCore#DO_NOT_INSERT
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public static final String FORMATTER_INSERT_SPACE_AFTER_LAMBDA_ARROW  = JavaCore.PLUGIN_ID + ".formatter.insert_space_after_lambda_arrow";	//$NON-NLS-1$
 	/**
@@ -2967,7 +2967,7 @@ public class DefaultCodeFormatterConstants {
 	 * </pre>
 	 * @see JavaCore#INSERT
 	 * @see JavaCore#DO_NOT_INSERT
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public static final String FORMATTER_INSERT_SPACE_BEFORE_LAMBDA_ARROW = JavaCore.PLUGIN_ID + ".formatter.insert_space_before_lambda_arrow";	//$NON-NLS-1$
 	/**
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/Flags.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/Flags.java
index ce552b4..07fc92c 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/Flags.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/Flags.java
@@ -161,7 +161,7 @@ public final class Flags {
 	 * Note that this flag's value is internal and is not defined in the
 	 * Virtual Machine specification.
 	 * </p>
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public static final int AccDefaultMethod = ExtraCompilerModifiers.AccDefaultMethod;
 
@@ -172,7 +172,7 @@ public final class Flags {
 	 * Note that this flag's value is internal and is not defined in the
 	 * Virtual Machine specification.
 	 * </p>
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public static final int AccAnnotationDefault = ClassFileConstants.AccAnnotationDefault;
 	
@@ -392,7 +392,7 @@ public final class Flags {
 	 *
 	 * @return <code>true</code> if the <code>AccDefaultMethod</code> flag is included
 	 * @see #AccDefaultMethod
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public static boolean isDefaultMethod(int flags) {
 		return (flags & AccDefaultMethod) != 0;
@@ -404,7 +404,7 @@ public final class Flags {
 	 *
 	 * @return <code>true</code> if the <code>AccAnnotationDefault</code> flag is included
 	 * @see #AccAnnotationDefault
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	public static boolean isAnnnotationDefault(int flags) {
 		return (flags & AccAnnotationDefault) != 0;
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java
index 03934cc..ec6f02d6 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java
@@ -2646,7 +2646,7 @@ public final class JavaCore extends Plugin {
 	public static final String VERSION_1_7 = "1.7"; //$NON-NLS-1$
 	/**
 	 * Configurable option value: {@value}.
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 * @category OptionValue
 	 */
 	public static final String VERSION_1_8 = "1.8"; //$NON-NLS-1$
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/compiler/ITerminalSymbols.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/compiler/ITerminalSymbols.java
index 9f3caae..8944828 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/compiler/ITerminalSymbols.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/compiler/ITerminalSymbols.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2012 IBM Corporation and others.
+ * Copyright (c) 2000, 2013 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -169,11 +169,11 @@ public interface ITerminalSymbols {
 	int TokenNamegoto = 404;  // goto not found in Java ? :)
 
 	/**
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	int TokenNameARROW = 405;
 	/**
-	 * @since 3.9
+	 * @since 3.9 BETA_JAVA8
 	 */
 	int TokenNameCOLON_COLON = 406;
 	

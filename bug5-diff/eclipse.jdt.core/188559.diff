commit 4c50a1509b1f29ee2e7f2429bff60734b9f852b8
Author: Walter Harley <wharley>
Date:   Wed Aug 15 23:30:39 2007 +0000

    Bug 188559: delete files that were generated by Java 6 processors in previous builds but were not generated in the current build.

24	6	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java
31	0	org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptCompilationParticipant.java
6	0	org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/Apt6Plugin.java
6	1	org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/dispatch/IdeProcessingEnvImpl.java
4	6	org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/filer/IdeFilerImpl.java
1	0	org.eclipse.jdt.apt.pluggable.tests/src/org/eclipse/jdt/apt/pluggable/tests/FilerTests.java
1	0	org.eclipse.jdt.apt.pluggable.tests/src/org/eclipse/jdt/apt/pluggable/tests/TestAll.java
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java
index 9b5ed1f..a5c3ddf 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/APTDispatchRunnable.java
@@ -334,22 +334,40 @@ public class APTDispatchRunnable implements IWorkspaceRunnable
 	 */
 	private void reportResult(
 			BuildContext curResult,
-			Set<IFile> generatedFiles,
+			Set<IFile> java5GeneratedFiles,
 			Set<IFile> modifiedGeneratedFiles,
 			List<? extends CategorizedProblem> problems,
 			Set<String> deps,
 			GeneratedFileManager gfm, 
-			BuildEnv processorEnv){
-		
+			BuildEnv processorEnv)
+	{
+		// Combine files generated by Java 5 and Java 6 processing phases
+		Set<IFile> allGeneratedFiles = null;
+		Set<IFile> java6GeneratedFiles = AptCompilationParticipant.getInstance().getJava6GeneratedFiles();
+		if (java5GeneratedFiles == null || java5GeneratedFiles.isEmpty()) {
+			if (java6GeneratedFiles == null || java6GeneratedFiles.isEmpty()) {
+				allGeneratedFiles = Collections.emptySet();
+			}
+			else {
+				allGeneratedFiles = java6GeneratedFiles;
+			}
+		}
+		else {
+			if (java6GeneratedFiles == null || java6GeneratedFiles.isEmpty()) {
+				allGeneratedFiles = java5GeneratedFiles;
+			}
+			else {
+				allGeneratedFiles = new HashSet<IFile>(java6GeneratedFiles);
+				allGeneratedFiles.addAll(java5GeneratedFiles);
+			}
+		}
 		
-		if (generatedFiles == null )
-			generatedFiles = Collections.emptySet();
 		// figure out exactly what got deleted
 		final List<IFile> deletedFiles = new ArrayList<IFile>(); 
 		IFile parentFile = curResult.getFile();
 		cleanupNoLongerGeneratedFiles(
 				parentFile, 
-				generatedFiles, 
+				allGeneratedFiles, 
 				gfm,
 				processorEnv,
 				deletedFiles);
diff --git a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptCompilationParticipant.java b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptCompilationParticipant.java
index 4eb6b61..f1c04e1 100644
--- a/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptCompilationParticipant.java
+++ b/org.eclipse.jdt.apt.core/src/org/eclipse/jdt/apt/core/internal/AptCompilationParticipant.java
@@ -12,7 +12,9 @@
 
 package org.eclipse.jdt.apt.core.internal;
 
+import java.util.Collections;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.LinkedHashSet;
 import java.util.Map;
 import java.util.Set;
@@ -61,6 +63,19 @@ public class AptCompilationParticipant extends CompilationParticipant
 	 */
 	private Map<IFile, CategorizedProblem[]> _processedFiles = null;
 	
+	/**
+	 * Files generated by Java 6 annotation processing during the current build.
+	 * These must be stored here in order to communicate between the Java 6 annotation
+	 * processing phase, which runs during Java compilation, and the Java 5 phase,
+	 * which runs afterwards.  This member is reinitialized during aboutToBuild()
+	 * and cleared in buildComplete().
+	 * 
+	 * Doing it this way implies that files can only be generated by Java 6 processing
+	 * during a build.  That is true as of 8/07.  If that changes, then this may need
+	 * to be stored as a thread local, or elsewhere entirely.
+	 */
+	private HashSet<IFile> _java6GeneratedFiles = null;
+	
 	public static AptCompilationParticipant getInstance() {
 		return INSTANCE;
 	}
@@ -242,11 +257,27 @@ public class AptCompilationParticipant extends CompilationParticipant
 		_buildRound = 0; // reset
 		// Note that for each project build, we blow away the last project's processed files.
 		_processedFiles = new HashMap<IFile, CategorizedProblem[]>();
+		_java6GeneratedFiles = new HashSet<IFile>();
 		// TODO: (wharley) if the factory path is different we need a full build
 		return CompilationParticipant.READY_FOR_BUILD;
 	}
 	
+	/**
+	 * Called during Java 6 annotation processing phase to register newly-generated files.
+	 * This information is then used in the Java 5 (post-compilation) phase when 
+	 * determining no-longer-generated files to delete.  The list of files is discarded
+	 * at the end of each build.
+	 */
+	public void addJava6GeneratedFile(IFile file) {
+		_java6GeneratedFiles.add(file);
+	}
+	
+	public Set<IFile> getJava6GeneratedFiles() {
+		return Collections.unmodifiableSet(_java6GeneratedFiles);
+	}
+	
 	private void buildComplete() {
 		_processedFiles = null;
+		_java6GeneratedFiles = null;
 	}
 }
diff --git a/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/Apt6Plugin.java b/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/Apt6Plugin.java
index a6f84d2..023fb92 100644
--- a/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/Apt6Plugin.java
+++ b/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/Apt6Plugin.java
@@ -19,6 +19,12 @@ import org.eclipse.core.runtime.Plugin;
 import org.eclipse.core.runtime.Status;
 import org.osgi.framework.BundleContext;
 
+/**
+ * The plug-in responsible for dispatch of Java 6 (JSR269 Pluggable Annotation
+ * Processing API) annotation processors in the IDE.
+ * This is named Apt6Plugin to distinguish it from AptPlugin, which is responsible
+ * for Java 5 (com.sun.mirror) processors.
+ */
 public class Apt6Plugin extends Plugin {
 
 	private static final SimpleDateFormat TRACE_DATE_FORMAT = new SimpleDateFormat("HH:mm:ss.SSS"); //$NON-NLS-1$
diff --git a/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/dispatch/IdeProcessingEnvImpl.java b/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/dispatch/IdeProcessingEnvImpl.java
index 36093dd..e6b7705 100644
--- a/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/dispatch/IdeProcessingEnvImpl.java
+++ b/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/dispatch/IdeProcessingEnvImpl.java
@@ -20,7 +20,9 @@ import java.util.Map;
 import javax.lang.model.element.Element;
 
 import org.eclipse.core.resources.IFile;
+import org.eclipse.core.runtime.Path;
 import org.eclipse.jdt.apt.core.env.Phase;
+import org.eclipse.jdt.apt.core.internal.AptCompilationParticipant;
 import org.eclipse.jdt.apt.core.internal.AptPlugin;
 import org.eclipse.jdt.apt.core.internal.AptProject;
 import org.eclipse.jdt.apt.core.internal.generatedfile.FileGenerationResult;
@@ -108,10 +110,13 @@ public abstract class IdeProcessingEnvImpl extends BaseProcessingEnvImpl {
 		if (name == null) {
 			return null;
 		}
-		return _javaProject.getProject().getFile(name);
+		// The name will be workspace-relative, e.g., /project/src/packages/File.java.
+		IFile file = _javaProject.getProject().getParent().getFile(new Path(name));
+		return file;
 	}
 
 	public void addNewUnit(FileGenerationResult result) {
+		AptCompilationParticipant.getInstance().addJava6GeneratedFile(result.getFile());
 		addNewUnit(_dispatchManager.findCompilationUnit(result.getFile()));
 	}
 
diff --git a/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/filer/IdeFilerImpl.java b/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/filer/IdeFilerImpl.java
index 13c38a3..428d92c 100644
--- a/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/filer/IdeFilerImpl.java
+++ b/org.eclipse.jdt.apt.pluggable.core/src/org/eclipse/jdt/internal/apt/pluggable/core/filer/IdeFilerImpl.java
@@ -58,8 +58,8 @@ public class IdeFilerImpl implements Filer {
 	@Override
 	public FileObject createResource(Location location, CharSequence pkg,
 			CharSequence relativeName, Element... originatingElements) throws IOException {
-		// TODO Auto-generated method stub
-		return null;
+		//TODO
+		throw new UnsupportedOperationException("Creating resource files is not yet implemented"); //$NON-NLS-1$
 	}
 
 	/**
@@ -76,8 +76,6 @@ public class IdeFilerImpl implements Filer {
 		for (Element elem : originatingElements) {
 			parentFiles.add(_env.getEnclosingIFile(elem));
 		}
-		// Convert originatingElements to List<IFile>.  The originatingElements should all 
-		// be source types, else they would not be getting 
 		return new IdeJavaFileObject(_env, name, parentFiles);
 	}
 
@@ -87,8 +85,8 @@ public class IdeFilerImpl implements Filer {
 	@Override
 	public FileObject getResource(Location location, CharSequence pkg, CharSequence relativeName)
 			throws IOException {
-		// TODO Auto-generated method stub
-		return null;
+		//TODO
+		throw new UnsupportedOperationException("Reading resource files is not yet implemented"); //$NON-NLS-1$
 	}
 
 }
diff --git a/org.eclipse.jdt.apt.pluggable.tests/src/org/eclipse/jdt/apt/pluggable/tests/FilerTests.java b/org.eclipse.jdt.apt.pluggable.tests/src/org/eclipse/jdt/apt/pluggable/tests/FilerTests.java
index 3a37c3c..64c87c3 100644
--- a/org.eclipse.jdt.apt.pluggable.tests/src/org/eclipse/jdt/apt/pluggable/tests/FilerTests.java
+++ b/org.eclipse.jdt.apt.pluggable.tests/src/org/eclipse/jdt/apt/pluggable/tests/FilerTests.java
@@ -47,6 +47,7 @@ public class FilerTests extends TestBase
 		expectingNoProblems();
 		
 		// Check whether generated sources were generated and compiled
+		expectingFile(proj, ".apt_generated/gen6/Generated01.java");
 		final String[] expectedClasses = { "targets.filer.Parent01", "gen6.Generated01" };
 		expectingUniqueCompiledClasses(expectedClasses);
 		
diff --git a/org.eclipse.jdt.apt.pluggable.tests/src/org/eclipse/jdt/apt/pluggable/tests/TestAll.java b/org.eclipse.jdt.apt.pluggable.tests/src/org/eclipse/jdt/apt/pluggable/tests/TestAll.java
index f83807d..499d0e9 100644
--- a/org.eclipse.jdt.apt.pluggable.tests/src/org/eclipse/jdt/apt/pluggable/tests/TestAll.java
+++ b/org.eclipse.jdt.apt.pluggable.tests/src/org/eclipse/jdt/apt/pluggable/tests/TestAll.java
@@ -34,6 +34,7 @@ public class TestAll extends TestCase {
 		TestSuite suite = new TestSuite();
 		
 		suite.addTest(InfrastructureTests.suite());
+		suite.addTest(FilerTests.suite());
 	
 		return suite;
 		

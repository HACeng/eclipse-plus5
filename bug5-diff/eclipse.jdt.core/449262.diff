commit 13d88a2db10e3a34264b75313001b46a5abddbdd
Author: Harry Terkelsen <het@google.com>
Date:   Wed Oct 29 15:57:14 2014 -0700

    Fixes Bug 449262 - Allow the use of third-party Java formatters
    
    Change-Id: I5e3c599c17df1eb68c1101901334b7fd48ac1d63
    Signed-off-by: Harry Terkelsen <het@google.com>

15	2	org.eclipse.jdt.core/formatter/org/eclipse/jdt/core/formatter/CodeFormatter.java
29	16	org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java
31	0	org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java
48	11	org.eclipse.jdt.core/model/org/eclipse/jdt/core/ToolFactory.java
3	1	org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaCorePreferenceInitializer.java
2	0	org.eclipse.jdt.core/plugin.properties
21	0	org.eclipse.jdt.core/plugin.xml
125	0	org.eclipse.jdt.core/schema/javaFormatter.exsd
diff --git a/org.eclipse.jdt.core/formatter/org/eclipse/jdt/core/formatter/CodeFormatter.java b/org.eclipse.jdt.core/formatter/org/eclipse/jdt/core/formatter/CodeFormatter.java
index 787d4e6..75a8ff9 100644
--- a/org.eclipse.jdt.core/formatter/org/eclipse/jdt/core/formatter/CodeFormatter.java
+++ b/org.eclipse.jdt.core/formatter/org/eclipse/jdt/core/formatter/CodeFormatter.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2010 IBM Corporation and others.
+ * Copyright (c) 2000, 2014 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -7,6 +7,7 @@
  *
  * Contributors:
  *     IBM Corporation - initial API and implementation
+ *     Harry Terkelsen (het@google.com) - Bug 449262 - Allow the use of third-party Java formatters
  *******************************************************************************/
 package org.eclipse.jdt.core.formatter;
 
@@ -14,11 +15,12 @@ import org.eclipse.jdt.internal.compiler.util.Util;
 import org.eclipse.jface.text.IRegion;
 import org.eclipse.text.edits.TextEdit;
 
+import java.util.Map;
+
 /**
  * Specification for a generic source code formatter.
  *
  * @since 3.0
- * @noextend This class is not intended to be subclassed by clients.
  */
 public abstract class CodeFormatter {
 
@@ -282,4 +284,15 @@ public abstract class CodeFormatter {
 	public String createIndentationString(int indentationLevel) {
 		return Util.EMPTY_STRING;
 	}
+
+	/**
+	 * Sets the formatting options for this formatter.
+	 * <p>The default implementation ignores the options.
+	 *
+	 * @param options the options for the formatter
+	 * @since 3.11
+	 */
+	public void setOptions(Map<String, String> options) {
+		// Do nothing by default
+	}
 }
diff --git a/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java b/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java
index 3d697be..71d8bea 100644
--- a/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java
+++ b/org.eclipse.jdt.core/formatter/org/eclipse/jdt/internal/formatter/DefaultCodeFormatter.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2013 IBM Corporation and others.
+ * Copyright (c) 2000, 2014 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -9,6 +9,7 @@
  *     IBM Corporation - initial API and implementation
  *     Jesper Steen Moller - Contributions for
  *								bug 404146 - [1.7][compiler] nested try-catch-finally-blocks leads to unrunnable Java byte code
+ *     Harry Terkelsen (het@google.com) - Bug 449262 - Allow the use of third-party Java formatters
  *******************************************************************************/
 package org.eclipse.jdt.internal.formatter;
 
@@ -72,14 +73,13 @@ public class DefaultCodeFormatter extends CodeFormatter {
 	}
 
 	public DefaultCodeFormatter(DefaultCodeFormatterOptions defaultCodeFormatterOptions, Map options) {
-		if (options != null) {
-			this.options = options;
-			this.preferences = new DefaultCodeFormatterOptions(options);
-		} else {
+		if (options == null) {
 			this.options = JavaCore.getOptions();
 			this.preferences = new DefaultCodeFormatterOptions(DefaultCodeFormatterConstants.getJavaConventionsSettings());
+			setDefaultCompilerOptions();
+		} else {
+			setOptions(options);
 		}
-		this.defaultCompilerOptions = getDefaultCompilerOptions();
 		if (defaultCodeFormatterOptions != null) {
 			this.preferences.set(defaultCodeFormatterOptions.getMap());
 		}
@@ -180,7 +180,7 @@ public class DefaultCodeFormatter extends CodeFormatter {
 	}
 
 	private TextEdit formatClassBodyDeclarations(String source, int indentationLevel, String lineSeparator, IRegion[] regions, boolean includeComments) {
-		ASTNode[] bodyDeclarations = this.codeSnippetParsingUtil.parseClassBodyDeclarations(source.toCharArray(), getDefaultCompilerOptions(), true);
+		ASTNode[] bodyDeclarations = this.codeSnippetParsingUtil.parseClassBodyDeclarations(source.toCharArray(), this.defaultCompilerOptions, true);
 
 		if (bodyDeclarations == null) {
 			// a problem occurred while parsing the source
@@ -218,7 +218,7 @@ public class DefaultCodeFormatter extends CodeFormatter {
 			}
 			this.preferences.initial_indentation_level = indentationLevel;
 			if (this.codeSnippetParsingUtil == null) this.codeSnippetParsingUtil = new CodeSnippetParsingUtil();
-			this.codeSnippetParsingUtil.parseCompilationUnit(source.toCharArray(), getDefaultCompilerOptions(), true);
+			this.codeSnippetParsingUtil.parseCompilationUnit(source.toCharArray(), this.defaultCompilerOptions, true);
 			this.newCodeFormatter = new CodeFormatterVisitor(this.preferences, this.options, regions, this.codeSnippetParsingUtil, true);
 			IRegion coveredRegion = getCoveredRegion(regions);
 			int start = coveredRegion.getOffset();
@@ -230,7 +230,7 @@ public class DefaultCodeFormatter extends CodeFormatter {
 	}
 
 	private TextEdit formatCompilationUnit(String source, int indentationLevel, String lineSeparator, IRegion[] regions, boolean includeComments) {
-		CompilationUnitDeclaration compilationUnitDeclaration = this.codeSnippetParsingUtil.parseCompilationUnit(source.toCharArray(), getDefaultCompilerOptions(), true);
+		CompilationUnitDeclaration compilationUnitDeclaration = this.codeSnippetParsingUtil.parseCompilationUnit(source.toCharArray(), this.defaultCompilerOptions, true);
 
 		if (lineSeparator != null) {
 			this.preferences.line_separator = lineSeparator;
@@ -245,7 +245,7 @@ public class DefaultCodeFormatter extends CodeFormatter {
 	}
 
 	private TextEdit formatExpression(String source, int indentationLevel, String lineSeparator, IRegion[] regions, boolean includeComments) {
-		Expression expression = this.codeSnippetParsingUtil.parseExpression(source.toCharArray(), getDefaultCompilerOptions(), true);
+		Expression expression = this.codeSnippetParsingUtil.parseExpression(source.toCharArray(), this.defaultCompilerOptions, true);
 
 		if (expression == null) {
 			// a problem occurred while parsing the source
@@ -255,7 +255,7 @@ public class DefaultCodeFormatter extends CodeFormatter {
 	}
 
 	private TextEdit formatStatements(String source, int indentationLevel, String lineSeparator, IRegion[] regions, boolean includeComments) {
-		ConstructorDeclaration constructorDeclaration = this.codeSnippetParsingUtil.parseStatements(source.toCharArray(), getDefaultCompilerOptions(), true, false);
+		ConstructorDeclaration constructorDeclaration = this.codeSnippetParsingUtil.parseStatements(source.toCharArray(), this.defaultCompilerOptions, true, false);
 
 		if (constructorDeclaration.statements == null) {
 			// a problem occured while parsing the source
@@ -280,7 +280,7 @@ public class DefaultCodeFormatter extends CodeFormatter {
 		return this.newCodeFormatter.scribe.toString();
 	}
 
-	private Map getDefaultCompilerOptions() {
+	private void setDefaultCompilerOptions() {
 		if (this.defaultCompilerOptions ==  null) {
 			Map optionsMap = new HashMap(30);
 			optionsMap.put(CompilerOptions.OPTION_LocalVariableAttribute, CompilerOptions.DO_NOT_GENERATE);
@@ -355,7 +355,6 @@ public class DefaultCodeFormatter extends CodeFormatter {
 		} else {
 			this.defaultCompilerOptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_3);
 		}
-		return this.defaultCompilerOptions;
 	}
 
 	private TextEdit internalFormatClassBodyDeclarations(String source, int indentationLevel, String lineSeparator, ASTNode[] bodyDeclarations, IRegion[] regions, boolean includeComments) {
@@ -446,19 +445,19 @@ public class DefaultCodeFormatter extends CodeFormatter {
 		PROBING_SCANNER.setSource((char[]) null);
 
 		// probe for expression
-		Expression expression = this.codeSnippetParsingUtil.parseExpression(source.toCharArray(), getDefaultCompilerOptions(), true);
+		Expression expression = this.codeSnippetParsingUtil.parseExpression(source.toCharArray(), this.defaultCompilerOptions, true);
 		if (expression != null) {
 			return internalFormatExpression(source, indentationLevel, lineSeparator, expression, regions, includeComments);
 		}
 
 		// probe for body declarations (fields, methods, constructors)
-		ASTNode[] bodyDeclarations = this.codeSnippetParsingUtil.parseClassBodyDeclarations(source.toCharArray(), getDefaultCompilerOptions(), true);
+		ASTNode[] bodyDeclarations = this.codeSnippetParsingUtil.parseClassBodyDeclarations(source.toCharArray(), this.defaultCompilerOptions, true);
 		if (bodyDeclarations != null) {
 			return internalFormatClassBodyDeclarations(source, indentationLevel, lineSeparator, bodyDeclarations, regions, includeComments);
 		}
 
 		// probe for statements
-		ConstructorDeclaration constructorDeclaration = this.codeSnippetParsingUtil.parseStatements(source.toCharArray(), getDefaultCompilerOptions(), true, false);
+		ConstructorDeclaration constructorDeclaration = this.codeSnippetParsingUtil.parseStatements(source.toCharArray(), this.defaultCompilerOptions, true, false);
 		if (constructorDeclaration.statements != null) {
 			return internalFormatStatements(source, indentationLevel, lineSeparator, constructorDeclaration, regions, includeComments);
 		}
@@ -500,4 +499,18 @@ public class DefaultCodeFormatter extends CodeFormatter {
 
 		return true;
 	}
+
+	@Override
+	public void setOptions(Map<String, String> options) {
+		this.options = options;
+		Map<String, String> formatterPrefs = new HashMap<String, String>(options.size());
+		for (String key : options.keySet()) {
+			Object value = options.get(key);
+			if (value instanceof String) {
+				formatterPrefs.put(key, (String) value);
+			}
+		}
+		this.preferences = new DefaultCodeFormatterOptions(formatterPrefs);
+		setDefaultCompilerOptions();
+	}
 }
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java
index 2389199..2c0c02c 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/JavaCore.java
@@ -101,6 +101,7 @@
  *     Jesper S Moller   - Contributions for bug 381345 : [1.8] Take care of the Java 8 major version
  *                       - added the following constants:
  *									COMPILER_CODEGEN_METHOD_PARAMETERS_ATTR
+ *     Harry Terkelsen (het@google.com) - Bug 449262 - Allow the use of third-party Java formatters
  *     
  *******************************************************************************/
 
@@ -2288,6 +2289,19 @@ public final class JavaCore extends Plugin {
 	public static final String TIMEOUT_FOR_PARAMETER_NAME_FROM_ATTACHED_JAVADOC = PLUGIN_ID + ".timeoutForParameterNameFromAttachedJavadoc"; //$NON-NLS-1$
 
 	/**
+	 * Core option ID: The ID of the formatter to use in formatting operations.
+	 * <dl>
+	 * <dt>Option id:</dt><dd><code>"org.eclipse.jdt.core.javaFormatter"</code></dd>
+	 * <dt>Default:</dt><dd><code>"org.eclipse.jdt.core.defaultJavaFormatter"</code></dd>
+	 * </dl>
+	 * @see #DEFAULT_JAVA_FORMATTER
+	 * @see #JAVA_FORMATTER_EXTENSION_POINT_ID
+	 * @since 3.11
+	 * @category CoreOptionID
+	 */
+	public static final String JAVA_FORMATTER = PLUGIN_ID + ".javaFormatter"; //$NON-NLS-1$
+
+	/**
 	 * @since 2.0
 	 * @deprecated Use {@link org.eclipse.jdt.core.formatter.DefaultCodeFormatterConstants#FORMATTER_BRACE_POSITION_FOR_ANONYMOUS_TYPE_DECLARATION},
 	 * {@link org.eclipse.jdt.core.formatter.DefaultCodeFormatterConstants#FORMATTER_BRACE_POSITION_FOR_BLOCK} ,
@@ -2844,6 +2858,23 @@ public final class JavaCore extends Plugin {
 	public static final String JAVA_SOURCE_CONTENT_TYPE = JavaCore.PLUGIN_ID+".javaSource" ; //$NON-NLS-1$
 
 	/**
+	 * The ID of the Eclipse built-in formatter.
+	 *
+	 * @see #JAVA_FORMATTER
+	 * @see #JAVA_FORMATTER_EXTENSION_POINT_ID
+	 * @since 3.11
+	 */
+	public static final String DEFAULT_JAVA_FORMATTER = PLUGIN_ID + ".defaultJavaFormatter"; //$NON-NLS-1$
+
+	/**
+	 * Name of the extension point for contributing a source code formatter
+	 * @see #JAVA_FORMATTER
+	 * @see #DEFAULT_JAVA_FORMATTER
+	 * @since 3.11
+	 */
+	public static final String JAVA_FORMATTER_EXTENSION_POINT_ID = "javaFormatter" ;  //$NON-NLS-1$
+
+	/**
 	 * Creates the Java core plug-in.
 	 * <p>
 	 * The plug-in instance is created automatically by the
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/ToolFactory.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/ToolFactory.java
index 5a4f646..205b661 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/ToolFactory.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/ToolFactory.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2013 IBM Corporation and others.
+ * Copyright (c) 2000, 2014 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -7,19 +7,18 @@
  *
  * Contributors:
  *     IBM Corporation - initial API and implementation
+ *     Harry Terkelsen (het@google.com) - Bug 449262 - Allow the use of third-party Java formatters
  *******************************************************************************/
 package org.eclipse.jdt.core;
 
-import java.io.File;
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.zip.ZipEntry;
-import java.util.zip.ZipFile;
-
 import org.eclipse.core.resources.IFile;
-import org.eclipse.core.runtime.*;
+import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.IConfigurationElement;
+import org.eclipse.core.runtime.IExtension;
+import org.eclipse.core.runtime.IExtensionPoint;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Platform;
+import org.eclipse.core.runtime.Plugin;
 import org.eclipse.jdt.core.compiler.IScanner;
 import org.eclipse.jdt.core.compiler.ITerminalSymbols;
 import org.eclipse.jdt.core.formatter.CodeFormatter;
@@ -40,6 +39,14 @@ import org.eclipse.jdt.internal.core.util.Disassembler;
 import org.eclipse.jdt.internal.core.util.PublicScanner;
 import org.eclipse.jdt.internal.formatter.DefaultCodeFormatter;
 
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipFile;
+
 /**
  * Factory for creating various compiler tools, such as scanners, parsers and compilers.
  * <p>
@@ -140,7 +147,10 @@ public class ToolFactory {
 	}
 
 	/**
-	 * Create an instance of the built-in code formatter.
+	 * Creates an instance of a code formatter. A code formatter implementation can be contributed via the extension
+	 * point "org.eclipse.jdt.core.javaFormatter". The formatter id specified in the
+	 * "org.eclipse.jdt.core.javaFormatter" is instantiated. If unable to find a registered extension, the factory will
+	 * default to using the default code formatter.
 	 * <p>The given options should at least provide the source level ({@link JavaCore#COMPILER_SOURCE}),
 	 * the  compiler compliance level ({@link JavaCore#COMPILER_COMPLIANCE}) and the target platform
 	 * ({@link JavaCore#COMPILER_CODEGEN_TARGET_PLATFORM}).
@@ -170,6 +180,33 @@ public class ToolFactory {
 			currentOptions.put(DefaultCodeFormatterConstants.FORMATTER_NEVER_INDENT_BLOCK_COMMENTS_ON_FIRST_COLUMN, DefaultCodeFormatterConstants.FALSE);
 			currentOptions.put(DefaultCodeFormatterConstants.FORMATTER_NEVER_INDENT_LINE_COMMENTS_ON_FIRST_COLUMN, DefaultCodeFormatterConstants.FALSE);
 		}
+		String formatterId = (String) options.get(JavaCore.JAVA_FORMATTER);
+		IExtensionPoint extension = Platform.getExtensionRegistry().getExtensionPoint(JavaCore.PLUGIN_ID,
+				JavaCore.JAVA_FORMATTER_EXTENSION_POINT_ID);
+		if (extension != null) {
+			IExtension[] extensions = extension.getExtensions();
+			for (int i = 0; i < extensions.length; i++) {
+				IConfigurationElement[] configElements = extensions[i].getConfigurationElements();
+				for (int j = 0; j < configElements.length; j++) {
+					String initializerID = configElements[j].getAttribute("id"); //$NON-NLS-1$
+					if (initializerID != null && initializerID.equals(formatterId)) {
+						try {
+							Object execExt = configElements[j].createExecutableExtension("class"); //$NON-NLS-1$
+							if (execExt instanceof CodeFormatter) {
+								CodeFormatter formatter = (CodeFormatter) execExt;
+								formatter.setOptions(currentOptions);
+								return formatter;
+							}
+						} catch (CoreException e) {
+							org.eclipse.jdt.internal.core.util.Util.log(e.getStatus());
+							break;
+						}
+					}
+				}
+			}
+		}
+		org.eclipse.jdt.internal.core.util.Util.log(IStatus.WARNING,
+				"Unable to instantiate formatter extension, returning built-in formatter."); //$NON-NLS-1$
 		return new DefaultCodeFormatter(currentOptions);
 	}
 
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaCorePreferenceInitializer.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaCorePreferenceInitializer.java
index 92ac570..28812d7 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaCorePreferenceInitializer.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaCorePreferenceInitializer.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2013 IBM Corporation and others.
+ * Copyright (c) 2000, 2014 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -7,6 +7,7 @@
  *
  * Contributors:
  *     IBM Corporation - initial API and implementation
+ *     Harry Terkelsen (het@google.com) - Bug 449262 - Allow the use of third-party Java formatters
  *******************************************************************************/
 package org.eclipse.jdt.internal.core;
 
@@ -73,6 +74,7 @@ public class JavaCorePreferenceInitializer extends AbstractPreferenceInitializer
 			defaultOptionsMap.put(optionName, entry.getValue());
 			optionNames.add(optionName);
 		}
+		defaultOptionsMap.put(JavaCore.JAVA_FORMATTER, JavaCore.DEFAULT_JAVA_FORMATTER);
 
 		// CodeAssist settings
 		defaultOptionsMap.put(JavaCore.CODEASSIST_VISIBILITY_CHECK, JavaCore.DISABLED);
diff --git a/org.eclipse.jdt.core/plugin.properties b/org.eclipse.jdt.core/plugin.properties
index b6804b8..33b9d5d 100644
--- a/org.eclipse.jdt.core/plugin.properties
+++ b/org.eclipse.jdt.core/plugin.properties
@@ -7,6 +7,7 @@
 #
 # Contributors:
 #     IBM Corporation - initial API and implementation
+#     Harry Terkelsen (het@google.com) - Bug 449262 - Allow the use of third-party Java formatters
 ###############################################################################
 providerName=Eclipse.org
 pluginName=Java Development Tools Core
@@ -26,3 +27,4 @@ javaSourceName=Java Source File
 javaClassName=Java Class File
 jarManifestName=JAR Manifest File
 traceComponentLabel=JDT Core
+javaFormatterName=Java Formatter
diff --git a/org.eclipse.jdt.core/plugin.xml b/org.eclipse.jdt.core/plugin.xml
index fb4ac26..2f48730 100644
--- a/org.eclipse.jdt.core/plugin.xml
+++ b/org.eclipse.jdt.core/plugin.xml
@@ -9,6 +9,7 @@
     
     Contributors:
         IBM Corporation - initial API and implementation
+        Harry Terkelsen (het@google.com) - Bug 449262 - Allow the use of third-party Java formatters
  -->
 
 <!-- =================================================================================== -->
@@ -67,6 +68,14 @@
 	schema="schema/annotationProcessorManager.exsd"/>
 
 <!-- =================================================================================== -->
+<!-- Extension Point: Java Source Formatter                                              -->
+<!-- =================================================================================== -->
+
+<extension-point name="%javaFormatterName"
+  id="javaFormatter"
+  schema="schema/javaFormatter.exsd"/>
+
+<!-- =================================================================================== -->
 <!-- Extension: Java Nature                                                              -->
 <!-- =================================================================================== -->
 
@@ -274,4 +283,16 @@
    </component>
 </extension>
 
+<!-- =================================================================================== -->
+<!-- Extension: Java Code Formatter                                                      -->
+<!-- =================================================================================== -->
+<extension
+      point="org.eclipse.jdt.core.javaFormatter">
+   <javaFormatter
+         class="org.eclipse.jdt.internal.formatter.DefaultCodeFormatter"
+         id="org.eclipse.jdt.core.defaultJavaFormatter"
+         name="Eclipse [built-in]">
+   </javaFormatter>
+</extension>
+
 </plugin>
diff --git a/org.eclipse.jdt.core/schema/javaFormatter.exsd b/org.eclipse.jdt.core/schema/javaFormatter.exsd
new file mode 100644
index 0000000..a10d89b
--- /dev/null
+++ b/org.eclipse.jdt.core/schema/javaFormatter.exsd
@@ -0,0 +1,125 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<!-- Schema file written by PDE -->
+<schema targetNamespace="org.eclipse.jdt.core" xmlns="http://www.w3.org/2001/XMLSchema">
+<annotation>
+      <appInfo>
+         <meta.schema plugin="org.eclipse.jdt.core" id="javaFormatter" name="Java Formatter"/>
+      </appInfo>
+      <documentation>
+         This extension point allows clients to supply their own Java source code formatter.
+The formatter is expected to use the default formatter&apos;s options.
+      </documentation>
+   </annotation>
+
+   <element name="extension">
+      <annotation>
+         <appInfo>
+            <meta.element />
+         </appInfo>
+      </annotation>
+      <complexType>
+         <sequence minOccurs="1" maxOccurs="unbounded">
+            <element ref="javaFormatter"/>
+         </sequence>
+         <attribute name="point" type="string" use="required">
+            <annotation>
+               <documentation>
+                  
+               </documentation>
+            </annotation>
+         </attribute>
+         <attribute name="id" type="string">
+            <annotation>
+               <documentation>
+                  
+               </documentation>
+            </annotation>
+         </attribute>
+         <attribute name="name" type="string">
+            <annotation>
+               <documentation>
+                  
+               </documentation>
+               <appInfo>
+                  <meta.attribute translatable="true"/>
+               </appInfo>
+            </annotation>
+         </attribute>
+      </complexType>
+   </element>
+
+   <element name="javaFormatter">
+      <complexType>
+         <attribute name="id" type="string" use="required">
+            <annotation>
+               <documentation>
+                  A unique identifier used to reference this Java formatter.
+               </documentation>
+            </annotation>
+         </attribute>
+         <attribute name="name" type="string" use="required">
+            <annotation>
+               <documentation>
+                  The name of this Java formatter, used to present this formatter in the UI.
+               </documentation>
+               <appInfo>
+                  <meta.attribute translatable="true"/>
+               </appInfo>
+            </annotation>
+         </attribute>
+         <attribute name="class" type="string" use="required">
+            <annotation>
+               <documentation>
+                  The fully-qualified name of the Java class that extends the org.eclipse.jdt.core.formatter.CodeFormatter abstract class.
+               </documentation>
+               <appInfo>
+                  <meta.attribute kind="java" basedOn="org.eclipse.jdt.core.formatter.CodeFormatter:"/>
+               </appInfo>
+            </annotation>
+         </attribute>
+      </complexType>
+   </element>
+
+   <annotation>
+      <appInfo>
+         <meta.section type="since"/>
+      </appInfo>
+      <documentation>
+         3.11
+      </documentation>
+   </annotation>
+
+   <annotation>
+      <appInfo>
+         <meta.section type="examples"/>
+      </appInfo>
+      <documentation>
+         Example of a declaration of a &lt;code&gt;javaFormatter&lt;/code&gt;:
+&lt;pre&gt;
+&lt;extension point=&quot;org.eclipse.jdt.core.javaFormatter&quot;&gt;
+   &lt;javaFormatter
+         class=&quot;myformatter.MyFormatter&quot;
+         id=&quot;myformatter.javaFormatter&quot;
+         name=&quot;My Custom Formatter&quot;&gt;
+   &lt;/javaFormatter&gt;
+&lt;/extension&gt;
+&lt;/pre&gt;
+      </documentation>
+   </annotation>
+
+
+
+   <annotation>
+      <appInfo>
+         <meta.section type="copyright"/>
+      </appInfo>
+      <documentation>
+         Copyright (c) 2014 Google Inc. and others.&lt;br&gt;
+All rights reserved. This program and the accompanying materials
+are made available under the terms of the Eclipse Public License v1.0
+which accompanies this distribution, and is available at 
+&lt;a href=&quot;http://www.eclipse.org/legal/epl-v10.html&quot;&gt;http://www.eclipse.org/legal/epl-v10.html&lt;/a&gt;
+      </documentation>
+   </annotation>
+
+</schema>
commit 364abd1fe47d562f576cb6b54a083094e0671f23
Author: Markus Keller <markus_keller@ch.ibm.com>
Date:   Mon Dec 8 20:30:46 2014 +0100

    Bug 449262: [formatter] Allow the use of third-party Java code formatters

22	20	org.eclipse.jdt.core/model/org/eclipse/jdt/core/ToolFactory.java
diff --git a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/ToolFactory.java b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/ToolFactory.java
index 205b661..d8dc589 100644
--- a/org.eclipse.jdt.core/model/org/eclipse/jdt/core/ToolFactory.java
+++ b/org.eclipse.jdt.core/model/org/eclipse/jdt/core/ToolFactory.java
@@ -181,32 +181,34 @@ public class ToolFactory {
 			currentOptions.put(DefaultCodeFormatterConstants.FORMATTER_NEVER_INDENT_LINE_COMMENTS_ON_FIRST_COLUMN, DefaultCodeFormatterConstants.FALSE);
 		}
 		String formatterId = (String) options.get(JavaCore.JAVA_FORMATTER);
-		IExtensionPoint extension = Platform.getExtensionRegistry().getExtensionPoint(JavaCore.PLUGIN_ID,
-				JavaCore.JAVA_FORMATTER_EXTENSION_POINT_ID);
-		if (extension != null) {
-			IExtension[] extensions = extension.getExtensions();
-			for (int i = 0; i < extensions.length; i++) {
-				IConfigurationElement[] configElements = extensions[i].getConfigurationElements();
-				for (int j = 0; j < configElements.length; j++) {
-					String initializerID = configElements[j].getAttribute("id"); //$NON-NLS-1$
-					if (initializerID != null && initializerID.equals(formatterId)) {
-						try {
-							Object execExt = configElements[j].createExecutableExtension("class"); //$NON-NLS-1$
-							if (execExt instanceof CodeFormatter) {
-								CodeFormatter formatter = (CodeFormatter) execExt;
-								formatter.setOptions(currentOptions);
-								return formatter;
+		if (formatterId != null) {
+			IExtensionPoint extension = Platform.getExtensionRegistry().getExtensionPoint(JavaCore.PLUGIN_ID,
+					JavaCore.JAVA_FORMATTER_EXTENSION_POINT_ID);
+			if (extension != null) {
+				IExtension[] extensions = extension.getExtensions();
+				for (int i = 0; i < extensions.length; i++) {
+					IConfigurationElement[] configElements = extensions[i].getConfigurationElements();
+					for (int j = 0; j < configElements.length; j++) {
+						String initializerID = configElements[j].getAttribute("id"); //$NON-NLS-1$
+						if (initializerID != null && initializerID.equals(formatterId)) {
+							try {
+								Object execExt = configElements[j].createExecutableExtension("class"); //$NON-NLS-1$
+								if (execExt instanceof CodeFormatter) {
+									CodeFormatter formatter = (CodeFormatter) execExt;
+									formatter.setOptions(currentOptions);
+									return formatter;
+								}
+							} catch (CoreException e) {
+								org.eclipse.jdt.internal.core.util.Util.log(e.getStatus());
+								break;
 							}
-						} catch (CoreException e) {
-							org.eclipse.jdt.internal.core.util.Util.log(e.getStatus());
-							break;
 						}
 					}
 				}
 			}
+			org.eclipse.jdt.internal.core.util.Util.log(IStatus.WARNING,
+					"Unable to instantiate formatter extension '" + formatterId + "', returning built-in formatter."); //$NON-NLS-1$ //$NON-NLS-2$
 		}
-		org.eclipse.jdt.internal.core.util.Util.log(IStatus.WARNING,
-				"Unable to instantiate formatter extension, returning built-in formatter."); //$NON-NLS-1$
 		return new DefaultCodeFormatter(currentOptions);
 	}
 

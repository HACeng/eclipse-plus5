commit a08e8dc8e9230a115f0cfdb4f78a05f8533a21b8
Author: ssankaran <srikanth_sankaran@in.ibm.com>
Date:   Sat Feb 2 07:00:04 2013 -0500

    Partial fix for Bug 399537 - [1.8][compiler] Exceptions thrown from
    lambda body must match specification per function descriptor

2	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java
2	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
8	8	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java
2	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java
56	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
2	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MethodDeclaration.java
21	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeConstants.java
9	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
1	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java
index 290646c..87d5a25 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java
@@ -550,6 +550,7 @@ public void test011_problem_categories() {
 		expectedProblemAttributes.put("IllegalUsageOfQualifiedTypeReference", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));
 		expectedProblemAttributes.put("IllegalUsageOfTypeAnnotations", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));
 		expectedProblemAttributes.put("IllegalVararg", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));
+		expectedProblemAttributes.put("IllegalVarargInLambda", new ProblemAttributes(CategorizedProblem.CAT_TYPE));
 		expectedProblemAttributes.put("IllegalVisibilityModifierCombinationForField", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));
 		expectedProblemAttributes.put("IllegalVisibilityModifierCombinationForMemberType", new ProblemAttributes(CategorizedProblem.CAT_TYPE));
 		expectedProblemAttributes.put("IllegalVisibilityModifierCombinationForMethod", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));
@@ -1284,6 +1285,7 @@ public void test012_compiler_problems_tuning() {
 		expectedProblemAttributes.put("IllegalUsageOfQualifiedTypeReference", SKIP);
 		expectedProblemAttributes.put("IllegalUsageOfTypeAnnotations", SKIP);
 		expectedProblemAttributes.put("IllegalVararg", SKIP);
+		expectedProblemAttributes.put("IllegalVarargInLambda", SKIP);
 		expectedProblemAttributes.put("IllegalVisibilityModifierCombinationForField", SKIP);
 		expectedProblemAttributes.put("IllegalVisibilityModifierCombinationForMemberType", SKIP);
 		expectedProblemAttributes.put("IllegalVisibilityModifierCombinationForMethod", SKIP);
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
index 4d49dcd..b7e7e36 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
@@ -1335,6 +1335,8 @@ void setSourceStart(int sourceStart);
     int IllegalQualifierForExplicitThis2 = Internal + Syntax + 652;
     /** @since 3.9 */
     int TargetTypeNotAFunctionalInterface = Internal + TypeRelated + 653;
+    /** @since 3.9 */
+    int IllegalVarargInLambda = Internal + TypeRelated + 654;
     
 	/**
 	 * More problems in generics
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java
index a420cf1..87db0ed 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java
@@ -190,21 +190,21 @@ public abstract class AbstractMethodDeclaration
 	/**
 	 * Feed null information from argument annotations into the analysis and mark arguments as assigned.
 	 */
-	void analyseArguments(FlowInfo flowInfo) {
-		if (this.arguments != null) {
-			for (int i = 0, count = this.arguments.length; i < count; i++) {
-				if (this.binding.parameterNonNullness != null) {
+	static void analyseArguments(FlowInfo flowInfo, Argument[] methodArguments, MethodBinding methodBinding) {
+		if (methodArguments != null) {
+			for (int i = 0, count = methodArguments.length; i < count; i++) {
+				if (methodBinding.parameterNonNullness != null) {
 					// leverage null-info from parameter annotations:
-					Boolean nonNullNess = this.binding.parameterNonNullness[i];
+					Boolean nonNullNess = methodBinding.parameterNonNullness[i];
 					if (nonNullNess != null) {
 						if (nonNullNess.booleanValue())
-							flowInfo.markAsDefinitelyNonNull(this.arguments[i].binding);
+							flowInfo.markAsDefinitelyNonNull(methodArguments[i].binding);
 						else
-							flowInfo.markPotentiallyNullBit(this.arguments[i].binding);
+							flowInfo.markPotentiallyNullBit(methodArguments[i].binding);
 					}
 				}
 				// tag parameters as being set:
-				flowInfo.markAsDefinitelyAssigned(this.arguments[i].binding);
+				flowInfo.markAsDefinitelyAssigned(methodArguments[i].binding);
 			}
 		}
 	}
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java
index 63a1948..4bd9bb8 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConstructorDeclaration.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2012 IBM Corporation and others.
+ * Copyright (c) 2000, 2013 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -127,7 +127,7 @@ public void analyseCode(ClassScope classScope, InitializationFlowContext initial
 		}
 
 		// nullity and mark as assigned
-		analyseArguments(flowInfo);
+		analyseArguments(flowInfo, this.arguments, this.binding);
 
 		// propagate to constructor call
 		if (this.constructorCall != null) {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
index 4740cc3..92eec62 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
@@ -19,9 +19,15 @@ package org.eclipse.jdt.internal.compiler.ast;
 import org.eclipse.jdt.core.compiler.CategorizedProblem;
 import org.eclipse.jdt.internal.compiler.ASTVisitor;
 import org.eclipse.jdt.internal.compiler.CompilationResult;
+import org.eclipse.jdt.internal.compiler.flow.ExceptionHandlingFlowContext;
+import org.eclipse.jdt.internal.compiler.flow.FlowContext;
+import org.eclipse.jdt.internal.compiler.flow.FlowInfo;
 import org.eclipse.jdt.internal.compiler.impl.ReferenceContext;
+import org.eclipse.jdt.internal.compiler.lookup.Binding;
 import org.eclipse.jdt.internal.compiler.lookup.BlockScope;
+import org.eclipse.jdt.internal.compiler.lookup.MethodBinding;
 import org.eclipse.jdt.internal.compiler.lookup.MethodScope;
+import org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding;
 import org.eclipse.jdt.internal.compiler.lookup.TypeBinding;
 import org.eclipse.jdt.internal.compiler.problem.AbortCompilation;
 import org.eclipse.jdt.internal.compiler.problem.AbortCompilationUnit;
@@ -30,11 +36,12 @@ import org.eclipse.jdt.internal.compiler.problem.AbortType;
 import org.eclipse.jdt.internal.compiler.problem.ProblemSeverities;
 
 public class LambdaExpression extends FunctionalExpression implements ProblemSeverities, ReferenceContext {
-	Argument [] arguments;
+	public Argument [] arguments;
 	Statement body;
 	private MethodScope scope;
 	private CompilationResult compilationResult;
 	private boolean ignoreFurtherInvestigation;
+	private MethodBinding binding;
 	
 	public LambdaExpression(CompilationResult compilationResult, Argument [] arguments, Statement body) {
 		this.compilationResult = compilationResult;
@@ -45,8 +52,9 @@ public class LambdaExpression extends FunctionalExpression implements ProblemSev
 	public TypeBinding resolveType(BlockScope blockScope) {
 		super.resolveType(blockScope);
 		this.scope = new MethodScope(blockScope, this, blockScope.methodScope().isStatic);
-
+		this.binding = this.scope.createAnonymousMethodBinding(this);
 		if (this.functionalInterfaceType.isValidBinding()) {
+			this.binding.thrownExceptions = computeKosherThrowables();
 			// Resolve arguments, validate signature ...
 			if (this.arguments != null && this.singleAbstractMethod != null) {
 				int parameterCount = this.singleAbstractMethod.parameters != null ? this.singleAbstractMethod.parameters.length : 0;
@@ -76,6 +84,52 @@ public class LambdaExpression extends FunctionalExpression implements ProblemSev
 		}
 		return this.functionalInterfaceType;
 	}
+	
+	private ReferenceBinding[] computeKosherThrowables() {
+		return this.singleAbstractMethod == null || !this.singleAbstractMethod.isValidBinding() ? Binding.NO_EXCEPTIONS : this.singleAbstractMethod.thrownExceptions; // for now.
+	}
+
+	public FlowInfo analyseCode(BlockScope currentScope, FlowContext flowContext, final FlowInfo flowInfo) {
+		
+		if (this.ignoreFurtherInvestigation) 
+			return flowInfo;
+		
+		FlowInfo lambdaInfo = flowInfo.copy(); // occurrence context immune to data flow inside lambda.
+		ExceptionHandlingFlowContext methodContext =
+				new ExceptionHandlingFlowContext(
+						flowContext,
+						this,
+						this.binding.thrownExceptions,
+						null,
+						this.scope,
+						FlowInfo.DEAD_END);
+
+		// nullity and mark as assigned
+		AbstractMethodDeclaration.analyseArguments(lambdaInfo, this.arguments, this.binding);
+
+		if (this.arguments != null) {
+			for (int i = 0, count = this.arguments.length; i < count; i++) {
+				this.bits |= (this.arguments[i].bits & ASTNode.HasTypeAnnotations);
+			}
+		}
+		
+		lambdaInfo = this.body.analyseCode(this.scope, methodContext, lambdaInfo);
+		
+		// check for missing returning path for block body's ...
+		if (this.body instanceof Block) {
+			TypeBinding returnTypeBinding = expectedResultType();
+			if ((returnTypeBinding == TypeBinding.VOID)) {
+				if ((lambdaInfo.tagBits & FlowInfo.UNREACHABLE_OR_DEAD) == 0) {
+					this.bits |= ASTNode.NeedFreeReturn;
+				}
+			} else {
+				if (lambdaInfo != FlowInfo.DEAD_END) {
+					this.scope.problemReporter().shouldReturn(returnTypeBinding, this);
+				}
+			}
+		}
+		return flowInfo;
+	}
 
 	public StringBuffer printExpression(int tab, StringBuffer output) {
 		int parenthesesCount = (this.bits & ASTNode.ParenthesizedMASK) >> ASTNode.ParenthesizedSHIFT;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MethodDeclaration.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MethodDeclaration.java
index d36ab98..4f7b68d 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MethodDeclaration.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MethodDeclaration.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2012 IBM Corporation and others.
+ * Copyright (c) 2000, 2013 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -103,7 +103,7 @@ public class MethodDeclaration extends AbstractMethodDeclaration {
 					FlowInfo.DEAD_END);
 
 			// nullity and mark as assigned
-			analyseArguments(flowInfo);
+			analyseArguments(flowInfo, this.arguments, this.binding);
 
 			if (this.arguments != null) {
 				for (int i = 0, count = this.arguments.length; i < count; i++) {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java
index 29ef6a6..db558cd 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java
@@ -387,6 +387,27 @@ MethodBinding createMethod(AbstractMethodDeclaration method) {
 	return method.binding;
 }
 
+public MethodBinding createAnonymousMethodBinding(LambdaExpression lambda) {
+	
+	SourceTypeBinding declaringClass = null; // for now.
+	int modifiers = ClassFileConstants.AccPublic | ExtraCompilerModifiers.AccUnresolved;
+	MethodBinding binding = new MethodBinding(modifiers, TypeConstants.ANONYMOUS_METHOD, null, null, null, declaringClass);
+
+	Argument[] arguments = lambda.arguments;
+	int argLength = arguments == null ? 0 : arguments.length;
+	if (argLength > 0) {
+		Argument argument = arguments[--argLength];
+		if (argument.isVarArgs())
+			binding.modifiers |= ClassFileConstants.AccVarargs;
+		while (--argLength >= 0) {
+			argument = arguments[argLength];
+			if (argument.isVarArgs())
+				problemReporter().illegalVarargInLambda(argument);
+		}
+	}
+	return binding;
+}
+
 /**
  * Overridden to detect the error case inside an explicit constructor call:
 class X {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeConstants.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeConstants.java
index a9875ba..8205d62 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeConstants.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/TypeConstants.java
@@ -85,7 +85,7 @@ public interface TypeConstants {
     char[] UPPER_LOCAL_VARIABLE = "LOCAL_VARIABLE".toCharArray(); //$NON-NLS-1$
     char[] UPPER_ANNOTATION_TYPE = "ANNOTATION_TYPE".toCharArray(); //$NON-NLS-1$
     char[] UPPER_PACKAGE = "PACKAGE".toCharArray(); //$NON-NLS-1$
-    char[] ANONYMOUS_METHOD = " anonymous ".toCharArray(); //$NON-NLS-1$
+    char[] ANONYMOUS_METHOD = " anonymous ".toCharArray(); //$NON-NLS-1$ // for now - serialization issues ?
     
 	// jsr308
 	char[] TYPE_USE_TARGET  = "TYPE_USE".toCharArray(); //$NON-NLS-1$
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
index 9f63acb..553f390 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
@@ -2703,6 +2703,15 @@ public void illegalVararg(Argument argType, AbstractMethodDeclaration methodDecl
 		argType.sourceStart,
 		argType.sourceEnd);
 }
+public void illegalVarargInLambda(Argument argType) {
+	String[] arguments = new String[] { CharOperation.toString(argType.type.getTypeName())};
+	this.handle(
+		IProblem.IllegalVarargInLambda,
+		arguments,
+		arguments,
+		argType.sourceStart,
+		argType.sourceEnd);
+}
 public void illegalThisDeclaration(Argument argument) {
 	String[] arguments = NoArgument;
 	this.handle(
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
index dde491e..e4c28f1 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
@@ -609,6 +609,7 @@
 651 = The explicit ''this'' parameter is expected to be qualified with {0}
 652 = The explicit ''this'' parameter for a method cannot have a qualifying name
 653 = The target type of this expression must be a functional interface
+654 = The variable argument type {0} of the lambda expression must be the last parameter
 ### MORE GENERICS
 660 = Unused type arguments for the non generic constructor {0}({1}) of type {2}; it should not be parameterized with arguments <{3}>
 661 = Unused type parameter {0}
commit e4130120ae791b6450af86266caf3711f6b81fa5
Author: ssankaran <srikanth_sankaran@in.ibm.com>
Date:   Wed Feb 6 19:16:57 2013 -0500

    Fixed Bug 399537 - [1.8][compiler] Exceptions thrown from lambda body
    must match specification per function descriptor

156	1	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
index fae6c66..707ed29 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
@@ -1278,7 +1278,162 @@ public void test037() {
 			"The target type of this expression must be a functional interface\n" + 
 			"----------\n");
 }
-
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=399537 - [1.8][compiler] Exceptions thrown from lambda body must match specification per function descriptor 
+public void test038() {
+	this.runNegativeTest(
+			new String[] {
+			"X.java",
+			"import java.io.EOFException;\n" +
+			"import java.io.IOException;\n" +
+			"interface I { void m() throws IOException; }\n" +
+			"interface J { void m() throws EOFException; }\n" +
+			"interface K { void m() throws ClassNotFoundException; }\n" +
+			"interface IJ extends I, J {}\n" +
+			"interface IJK extends I, J, K {}\n" +
+			"public class X {\n" +
+			"	int var;\n" +
+			"	IJ ij = () -> {\n" +
+			"		if (var == 0) {\n" +
+			"			throw new IOException();\n" +
+			"		} else if (var == 2) {\n" +
+			"			throw new EOFException();\n" +
+			"		} else {\n" +
+			"			throw new ClassNotFoundException(); \n" +
+			"		}\n" +
+			"	};\n" +
+			"}\n"
+			},
+			"----------\n" + 
+			"1. ERROR in X.java (at line 12)\n" + 
+			"	throw new IOException();\n" + 
+			"	^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
+			"Unhandled exception type IOException\n" + 
+			"----------\n" + 
+			"2. ERROR in X.java (at line 16)\n" + 
+			"	throw new ClassNotFoundException(); \n" + 
+			"	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
+			"Unhandled exception type ClassNotFoundException\n" + 
+			"----------\n");
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=399537 - [1.8][compiler] Exceptions thrown from lambda body must match specification per function descriptor 
+public void test039() {
+	this.runNegativeTest(
+			new String[] {
+			"X.java",
+			"import java.io.EOFException;\n" +
+			"import java.io.IOException;\n" +
+			"import java.sql.SQLException;\n" +
+			"import java.sql.SQLTransientException;\n" +
+			"import java.util.List;\n" +
+			"import java.util.concurrent.TimeoutException;\n" +
+			"interface A {\n" +
+			"  List<String> foo(List<String> arg) throws IOException, SQLTransientException;\n" +
+			"}\n" +
+			"interface B {\n" +
+			"  List foo(List<String> arg) throws EOFException, SQLException, TimeoutException;\n" +
+			"}\n" +
+			"interface C {\n" +
+			"  List foo(List arg) throws Exception;\n" +
+			"}\n" +
+			"interface D extends A, B {}\n" +
+			"interface E extends A, B, C {}\n" +
+			"public class X {\n" +
+			"	int var;\n" +
+			"	D d = (x) -> {\n" +
+			"		switch (var) {\n" +
+			"		case 0 : throw new EOFException();\n" +
+			"		case 1: throw new IOException();\n" +
+			"		case 2: throw new SQLException();\n" +
+			"		case 3: throw new SQLTransientException();\n" +
+			"		case 4: throw new TimeoutException();\n" +
+			"		default: throw new NullPointerException();\n" +
+			"		}\n" +
+			"	};\n" +
+			"	E e = (x) -> {\n" +
+			"		switch (var) {\n" +
+			"		case 0 : throw new EOFException();\n" +
+			"		case 1: throw new IOException();\n" +
+			"		case 2: throw new SQLException();\n" +
+			"		case 3: throw new SQLTransientException();\n" +
+			"		case 4: throw new TimeoutException();\n" +
+			"		default: throw new NullPointerException();\n" +
+			"		}\n" +
+			"	};\n" +
+			"}\n"
+			},
+			"----------\n" + 
+			"1. WARNING in X.java (at line 11)\n" + 
+			"	List foo(List<String> arg) throws EOFException, SQLException, TimeoutException;\n" + 
+			"	^^^^\n" + 
+			"List is a raw type. References to generic type List<E> should be parameterized\n" + 
+			"----------\n" + 
+			"2. WARNING in X.java (at line 14)\n" + 
+			"	List foo(List arg) throws Exception;\n" + 
+			"	^^^^\n" + 
+			"List is a raw type. References to generic type List<E> should be parameterized\n" + 
+			"----------\n" + 
+			"3. WARNING in X.java (at line 14)\n" + 
+			"	List foo(List arg) throws Exception;\n" + 
+			"	         ^^^^\n" + 
+			"List is a raw type. References to generic type List<E> should be parameterized\n" + 
+			"----------\n" + 
+			"4. ERROR in X.java (at line 23)\n" + 
+			"	case 1: throw new IOException();\n" + 
+			"	        ^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
+			"Unhandled exception type IOException\n" + 
+			"----------\n" + 
+			"5. ERROR in X.java (at line 24)\n" + 
+			"	case 2: throw new SQLException();\n" + 
+			"	        ^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
+			"Unhandled exception type SQLException\n" + 
+			"----------\n" + 
+			"6. ERROR in X.java (at line 26)\n" + 
+			"	case 4: throw new TimeoutException();\n" + 
+			"	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
+			"Unhandled exception type TimeoutException\n" + 
+			"----------\n" + 
+			"7. ERROR in X.java (at line 33)\n" + 
+			"	case 1: throw new IOException();\n" + 
+			"	        ^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
+			"Unhandled exception type IOException\n" + 
+			"----------\n" + 
+			"8. ERROR in X.java (at line 34)\n" + 
+			"	case 2: throw new SQLException();\n" + 
+			"	        ^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
+			"Unhandled exception type SQLException\n" + 
+			"----------\n" + 
+			"9. ERROR in X.java (at line 36)\n" + 
+			"	case 4: throw new TimeoutException();\n" + 
+			"	        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
+			"Unhandled exception type TimeoutException\n" + 
+			"----------\n");
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=399537 - [1.8][compiler] Exceptions thrown from lambda body must match specification per function descriptor 
+public void test040() {
+	this.runNegativeTest(
+			new String[] {
+			"X.java",
+			"interface I {\n" +
+			"  <P extends Exception> Object m() throws P;\n" +
+			"}\n" +
+			"interface J {\n" +
+			"  <Q extends Exception> String m() throws Exception;\n" +
+			"}\n" +
+			"interface G extends I, J {}\n" +
+			"public class X {\n" +
+			"	int var;\n" +
+			"	G g1 = () -> {\n" +
+			"	    throw new Exception(); \n" +
+			"	};\n" +
+			"}\n"
+			},
+			"----------\n" + 
+			"1. ERROR in X.java (at line 11)\n" + 
+			"	throw new Exception(); \n" + 
+			"	^^^^^^^^^^^^^^^^^^^^^^\n" + 
+			"Unhandled exception type Exception\n" + 
+			"----------\n");
+}
 public static Class testClass() {
 	return NegativeLambdaExpressionsTest.class;
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java
index 74434f0..a574ca4 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FunctionalExpression.java
@@ -60,7 +60,7 @@ public abstract class FunctionalExpression extends Expression {
 			return null;
 		}
 		this.singleAbstractMethod = descriptor;
-		return this.resolvedType = descriptor.declaringClass;
+		return this.resolvedType = this.expectedType;  // if interface IJ extends I, J() & IJ's descriptor is I.foo, can't return I
 	}
 
 	public int nullStatus(FlowInfo flowInfo) {
commit bf8a7b7e6b47a650d6aaf7861f34e5fb24492152
Author: ssankaran <srikanth_sankaran@in.ibm.com>
Date:   Wed Feb 6 23:24:30 2013 -0500

    Polish work & more tests for Bug 399537 - [1.8][compiler] Exceptions
    thrown from lambda body must match specification per function descriptor

3	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java
79	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
3	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java
index e402cbb..1ccfaa5 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java
@@ -564,11 +564,13 @@ public void test011_problem_categories() {
 		expectedProblemAttributes.put("IncompatibleExceptionInInheritedMethodThrowsClause", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));
 		expectedProblemAttributes.put("IncompatibleExceptionInThrowsClause", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));
 		expectedProblemAttributes.put("IncompatibleExceptionInThrowsClauseForNonInheritedInterfaceMethod", new ProblemAttributes(CategorizedProblem.CAT_NAME_SHADOWING_CONFLICT));
+		expectedProblemAttributes.put("IncompatibleLambdaParameterType", new ProblemAttributes(CategorizedProblem.CAT_TYPE));
 		expectedProblemAttributes.put("IncompatibleReturnType", new ProblemAttributes(CategorizedProblem.CAT_MEMBER));
 		expectedProblemAttributes.put("IncompatibleReturnTypeForNonInheritedInterfaceMethod", new ProblemAttributes(CategorizedProblem.CAT_NAME_SHADOWING_CONFLICT));
 		expectedProblemAttributes.put("IncompatibleTypesInConditionalOperator", new ProblemAttributes(CategorizedProblem.CAT_TYPE));
 		expectedProblemAttributes.put("IncompatibleTypesInEqualityOperator", new ProblemAttributes(CategorizedProblem.CAT_TYPE));
 		expectedProblemAttributes.put("IncompatibleTypesInForeach", new ProblemAttributes(CategorizedProblem.CAT_TYPE));
+		
 		expectedProblemAttributes.put("IncorrectArityForParameterizedConstructor", new ProblemAttributes(CategorizedProblem.CAT_TYPE));
 		expectedProblemAttributes.put("IncorrectArityForParameterizedMethod", new ProblemAttributes(CategorizedProblem.CAT_TYPE));
 		expectedProblemAttributes.put("IncorrectArityForParameterizedType", new ProblemAttributes(CategorizedProblem.CAT_TYPE));
@@ -1308,6 +1310,7 @@ public void test012_compiler_problems_tuning() {
 		expectedProblemAttributes.put("IncompatibleTypesInConditionalOperator", SKIP);
 		expectedProblemAttributes.put("IncompatibleTypesInEqualityOperator", SKIP);
 		expectedProblemAttributes.put("IncompatibleTypesInForeach", SKIP);
+		expectedProblemAttributes.put("IncompatibleLambdaParameterType", SKIP);
 		expectedProblemAttributes.put("IncorrectArityForParameterizedConstructor", SKIP);
 		expectedProblemAttributes.put("IncorrectArityForParameterizedMethod", SKIP);
 		expectedProblemAttributes.put("IncorrectArityForParameterizedType", SKIP);
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
index 707ed29..35d2cc7 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
@@ -1434,6 +1434,85 @@ public void test040() {
 			"Unhandled exception type Exception\n" + 
 			"----------\n");
 }
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=399537 - [1.8][compiler] Exceptions thrown from lambda body must match specification per function descriptor 
+public void test041() {
+	this.runNegativeTest(
+			new String[] {
+			"X.java",
+			"import java.io.IOException;\n" +
+			"import java.sql.SQLException;\n" +
+			"interface G1 {\n" +
+			"  <E extends Exception> Object m(E p) throws E;\n" +
+			"}\n" +
+			"interface G2 {\n" +
+			"  <F extends Exception> String m(F q) throws Exception;\n" +
+			"}\n" +
+			"interface G extends G1, G2 {} // G has descriptor <F extends Exception> ()->String throws F\n" +
+			"public class X {\n" +
+			"	G g = (x) -> { // Elided type is inferred from descriptor to be F\n" +
+			"	    throw x;    // ~== throw new F()\n" + // javac 8b74 complains here.
+			"	};\n" +
+			"}\n" +
+			"class Y implements G {\n" +
+			"	public <T extends Exception> String m(T t) throws T {\n" +
+			"		throw t;\n" +
+			"	}\n" +
+			"	void foo(G1 g1) {\n" +
+			"			g1.m(new IOException());\n" +
+			"	}\n" +
+			"	void foo(G2 g2) {\n" +
+			"			g2.m(new SQLException());\n" +
+			"	}\n" +
+			"}\n"
+
+			},
+			"----------\n" + 
+			"1. ERROR in X.java (at line 20)\n" + 
+			"	g1.m(new IOException());\n" + 
+			"	^^^^^^^^^^^^^^^^^^^^^^^\n" + 
+			"Unhandled exception type IOException\n" + 
+			"----------\n" + 
+			"2. ERROR in X.java (at line 23)\n" + 
+			"	g2.m(new SQLException());\n" + 
+			"	^^^^^^^^^^^^^^^^^^^^^^^^\n" + 
+			"Unhandled exception type Exception\n" + 
+			"----------\n");
+}
+// https://bugs.eclipse.org/bugs/show_bug.cgi?id=399537 - [1.8][compiler] Exceptions thrown from lambda body must match specification per function descriptor 
+public void test042() {
+	this.runNegativeTest(
+			new String[] {
+			"X.java",
+			"import java.io.IOException;\n" +
+			"import java.sql.SQLException;\n" +
+			"interface G1 {\n" +
+			"  <E extends Exception> Object m(E p) throws E;\n" +
+			"}\n" +
+			"interface G2 {\n" +
+			"  <F extends Exception> String m(F q) throws Exception;\n" +
+			"}\n" +
+			"interface G extends G1, G2 {} // G has descriptor <F extends Exception> ()->String throws F\n" +
+			"public class X {\n" +
+			"	G g1 = (F x) -> {\n" +
+			"	    throw x;\n" +
+			"	};\n" +
+			"	G g2 = (IOException x) -> {\n" +
+			"	    throw x;\n" +
+			"	};\n" +
+			"}\n"
+			},
+			"----------\n" + 
+			"1. ERROR in X.java (at line 11)\n" + 
+			"	G g1 = (F x) -> {\n" + 
+			"	        ^\n" + 
+			"F cannot be resolved to a type\n" + 
+			"----------\n" + 
+			"2. ERROR in X.java (at line 14)\n" + 
+			"	G g2 = (IOException x) -> {\n" + 
+			"	        ^^^^^^^^^^^\n" + 
+			"Incompatible type specified for lambda expression\'s parameter x\n" + 
+			"----------\n");
+}
 public static Class testClass() {
 	return NegativeLambdaExpressionsTest.class;
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
index e4458cd..80781a4 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
@@ -1347,7 +1347,9 @@ void setSourceStart(int sourceStart);
     int lambdaSignatureMismatched = Internal + TypeRelated + 656;
     /** @since 3.9 */
     int lambdaParameterTypeMismatched = Internal + TypeRelated + 657;
-	/**
+    /** @since 3.9 */
+    int IncompatibleLambdaParameterType = Internal + TypeRelated + 658;
+    /**
 	 * More problems in generics
 	 */
     /** @since 3.4 */
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
index 0ab29f4..30957cc 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/LambdaExpression.java
@@ -121,7 +121,7 @@ public class LambdaExpression extends FunctionalExpression implements ProblemSev
 				if ((parameterType.tagBits & TagBits.HasMissingType) != 0) {
 					this.binding.tagBits |= TagBits.HasMissingType;
 				}
-				if (haveDescriptor && expectedParameterType != null && parameterType != expectedParameterType) {
+				if (haveDescriptor && expectedParameterType != null && parameterType.isValidBinding() && parameterType != expectedParameterType) {
 					this.scope.problemReporter().lambdaParameterTypeMismatched(argument, argument.type, expectedParameterType);
 				}
 
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
index 9dca5d4..b39a983 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
@@ -1311,7 +1311,7 @@ public void lambdaParameterTypeMismatched(Argument argument, TypeReference type,
 	String expectedTypeFullName = new String(expectedParameterType.readableName());
 	String expectedTypeShortName = new String(expectedParameterType.shortReadableName());
 	this.handle(
-			IProblem.lambdaParameterTypeMismatched,
+			expectedParameterType.isTypeVariable() ? IProblem.IncompatibleLambdaParameterType : IProblem.lambdaParameterTypeMismatched,
 			new String[] { name, expectedTypeFullName },
 			new String[] { name, expectedTypeShortName },
 			type.sourceStart,
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
index 81edc80..9772a5e 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
@@ -616,7 +616,7 @@
 655 = The target type of this expression is not a well formed parameterized type due to bound(s) mismatch
 656 = Lambda expression's signature does not match the signature of the functional interface method
 657 = Lambda expression's parameter {0} is expected to be of type {1}
-
+658 = Incompatible type specified for lambda expression's parameter {0}
 ### MORE GENERICS
 660 = Unused type arguments for the non generic constructor {0}({1}) of type {2}; it should not be parameterized with arguments <{3}>
 661 = Unused type parameter {0}

commit f875f4161e47c5087f589529b7e7ee5cf66c1b26
Author: Jayaprakash Arthanareeswaran <jarthana@in.ibm.com>
Date:   Fri Mar 15 13:00:05 2013 -0400

    Fixed Bug 403410 - Modifiers should be rejected on receiver parameters

39	1	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java
30	0	org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
4	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java
1	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java
2	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
3	0	org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java
index dddb3ba..5600a82 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeTypeAnnotationTest.java
@@ -3279,4 +3279,42 @@ public class NegativeTypeAnnotationTest extends AbstractRegressionTest {
 				"C cannot be resolved to a type\n" + 
 				"----------\n");
 	}
-}
\ No newline at end of file
+	// https://bugs.eclipse.org/bugs/show_bug.cgi?id=403410
+	public void testBug403410() {
+		this.runNegativeTest(
+				new String[] {
+					"X.java",
+					"import java.lang.annotation.Target;\n" +
+					"import static java.lang.annotation.ElementType.*;\n" +
+					"@Target (java.lang.annotation.ElementType.TYPE_USE)\n" +
+					"@interface A {}\n" +
+					"public class X {\n" +
+					"	class Y {\n" +
+					"		public Y (final @A X X.this) {}\n" +
+					"		public Y (static @A X X.this, int i) {}\n" +
+					"		public void foo(final @A Y this) {}\n" +
+					"		public void foo(static @A Y this, int i) {}\n" +
+					"}\n}"},
+					"----------\n" + 
+					"1. ERROR in X.java (at line 7)\n" + 
+					"	public Y (final @A X X.this) {}\n" + 
+					"	          ^^^^^^^^^^^^^^^^^\n" + 
+					"Syntax error, modifiers are not allowed here\n" + 
+					"----------\n" +
+					"2. ERROR in X.java (at line 8)\n" + 
+					"	public Y (static @A X X.this, int i) {}\n" + 
+					"	          ^^^^^^^^^^^^^^^^^^\n" + 
+					"Syntax error, modifiers are not allowed here\n" + 
+					"----------\n" + 
+					"3. ERROR in X.java (at line 9)\n" + 
+					"	public void foo(final @A Y this) {}\n" + 
+					"	                ^^^^^^^^^^^^^^^\n" + 
+					"Syntax error, modifiers are not allowed here\n" + 
+					"----------\n" + 
+					"4. ERROR in X.java (at line 10)\n" + 
+					"	public void foo(static @A Y this, int i) {}\n" + 
+					"	                ^^^^^^^^^^^^^^^^\n" + 
+					"Syntax error, modifiers are not allowed here\n" + 
+					"----------\n");
+	}
+}
diff --git a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
index 161fe1b..7514bf3 100644
--- a/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
+++ b/org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/dom/ASTConverter18Test.java
@@ -1798,5 +1798,35 @@ public class ASTConverter18Test extends ConverterTestSetup {
 		assertEquals("Incorrect receiver", "@A X.@B Y.@C Z", ((QualifiedType) receiver).toString());
 		assertEquals("Incorrect method signature", "public void foo(@A X.@B Y.@C Z this,String str){\n}\n", method.toString());
 	}
+	// https://bugs.eclipse.org/bugs/show_bug.cgi?id=403410
+	public void testBug403410() throws JavaModelException {
+		String contents =
+			"import java.lang.annotation.*;\n" +
+			"public class X {\n" +
+			"	class Y {\n" +
+			"		class Z {\n" +
+			"			public Z(final Y Y.this){\n}" +
+			"    	 	public void foo(static @A Z this){\n}\n" +
+			"		}\n" +
+			"    }\n" +
+			"}\n" +
+			"@Target(ElementType.TYPE_USE)\n" +
+			"@interface A {}\n";
+		this.workingCopy = getWorkingCopy("/Converter18/src/X.java", false);
+		ASTNode node = buildAST(contents, this.workingCopy);
+		assertEquals("Not a compilation unit", ASTNode.COMPILATION_UNIT, node.getNodeType());
+		CompilationUnit unit = (CompilationUnit) node;
+		node = getASTNode(unit, 0, 0);
+		TypeDeclaration type = (TypeDeclaration)node;
+		node = (ASTNode) type.bodyDeclarations().get(0);
+		type = (TypeDeclaration) node;
+		node = (ASTNode) type.bodyDeclarations().get(0);
+		assertEquals("Not a method Declaration", ASTNode.METHOD_DECLARATION, node.getNodeType());
+		MethodDeclaration method = (MethodDeclaration) node;
+		assertEquals("Type should be malformed", ASTNode.MALFORMED, (method.getFlags() & ASTNode.MALFORMED));
+
+		method = (MethodDeclaration) type.bodyDeclarations().get(1);
+		assertEquals("Type should be malformed", ASTNode.MALFORMED, (method.getFlags() & ASTNode.MALFORMED));
+	}
 
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
index 4e79e32..f025b2a 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
@@ -1672,7 +1672,7 @@ void setSourceStart(int sourceStart);
 	/** @since 3.9 */
 	int IllegalModifiersForElidedType = Internal + 1001;
 	/** @since 3.9 */
-	int IllegalModifiersForPackage = Internal + 1002;
+	int IllegalModifiers = Internal + 1002;
 
 	// default methods:
 	/** @since 3.9 */
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java
index b1758f4..a048315 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/AbstractMethodDeclaration.java
@@ -519,6 +519,10 @@ public abstract class AbstractMethodDeclaration
 	public void resolveReceiver() {
 		if (this.receiver == null) return;
 
+		if (this.receiver.modifiers != 0) {
+			this.scope.problemReporter().illegalModifiers(this.receiver.declarationSourceStart, this.receiver.declarationSourceEnd);
+		}
+
 		TypeBinding resolvedReceiverType = this.receiver.type.resolvedType;
 		if (this.binding == null || resolvedReceiverType == null || !resolvedReceiverType.isValidBinding()) {
 			return;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java
index a847f2b..8a10998 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/parser/Parser.java
@@ -5598,7 +5598,7 @@ protected void consumePackageDeclarationNameWithModifiers() {
 	}
 
 	if (packageModifiers != 0) {
-		problemReporter().illegalModifiersForPackage(packageModifiersSourceStart, packageModifiersSourceEnd);
+		problemReporter().illegalModifiers(packageModifiersSourceStart, packageModifiersSourceEnd);
 	}
 	
 	
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
index 38af74a..9900435 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
@@ -9177,9 +9177,9 @@ public void illegalModifiersForElidedType(Argument argument) {
 			argument.declarationSourceEnd);
 }
 
-public void illegalModifiersForPackage(int modifierSourceStart, int modifiersSourceEnd) {
+public void illegalModifiers(int modifierSourceStart, int modifiersSourceEnd) {
 	this.handle(
-			IProblem.IllegalModifiersForPackage,
+			IProblem.IllegalModifiers,
 			NoArgument,
 			NoArgument,
 			modifierSourceStart,
diff --git a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java
index 4b7b818..d0f2d71 100644
--- a/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java
+++ b/org.eclipse.jdt.core/dom/org/eclipse/jdt/core/dom/ASTConverter.java
@@ -840,6 +840,9 @@ class ASTConverter {
 		}
 		AnnotatableType type = (AnnotatableType) convertType(receiver.type);
 		methodDecl.setReceiverType(type);
+		if (receiver.modifiers != 0) {
+			methodDecl.setFlags(methodDecl.getFlags() | ASTNode.MALFORMED);
+		}
 		if (this.resolveBindings) {
 			recordNodes(type, receiver);
 			type.resolveBinding();

commit 92d8872e8a618ddba36d41f3d903f6d211bf20ba
Author: shankha <shankhba@in.ibm.com>
Date:   Thu Oct 16 16:06:54 2014 +0530

    Fixed Bug 437522 - [1.8][compiler] Missing compile error in Java 8 mode for Interface.super.field access
    
    Signed-off-by: ssankaran <srikanth_sankaran@in.ibm.com>

29	0	org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/IncrementalTests18.java
154	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/InterfaceMethodsTest.java
1	0	org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
5	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java
1	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java
6	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java
4	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java
5	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedSuperReference.java
3	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InvocationSite.java
8	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java
1	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ProblemReasons.java
1	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
3	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
diff --git a/org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/IncrementalTests18.java b/org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/IncrementalTests18.java
index ef5e117..b533ca4 100644
--- a/org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/IncrementalTests18.java
+++ b/org.eclipse.jdt.core.tests.builder/src/org/eclipse/jdt/core/tests/builder/IncrementalTests18.java
@@ -496,4 +496,33 @@ public class IncrementalTests18 extends BuilderTests {
 			"Problem : The type Y cannot be resolved. It is indirectly referenced from" +
 			" required .class files [ resource : </Project/X.java> range : <0,1> category : <10> severity : <2>]");
 	}
+
+	// https://bugs.eclipse.org/bugs/show_bug.cgi?id=445049,
+	// [compiler] java.lang.ClassCastException: org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding
+	// cannot be cast to org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding
+	public void test445049() throws JavaModelException, IOException {
+		IPath projectPath = env.addProject("Project", "1.8");
+		env.addExternalJars(projectPath, Util.getJavaClassLibs());
+
+		// remove old package fragment root so that names don't collide
+		env.removePackageFragmentRoot(projectPath, "");
+
+		IPath root = env.addPackageFragmentRoot(projectPath, "src");
+		env.setOutputFolder(projectPath, "bin");
+
+		setupProjectForNullAnnotations();
+		env.addClass(root, "", "I",
+				"public interface I { int f = 0;}");
+
+		fullBuild(projectPath);
+		expectingNoProblems();
+
+		env.addClass(root, "", "X", "class X implements I { int i = I.super.f;}");
+
+		incrementalBuild(projectPath);
+		expectingProblemsFor(
+			projectPath,
+			"Problem : No enclosing instance of the type I is accessible in scope [" +
+			" resource : </Project/src/X.java> range : <31,38> category : <40> severity : <2>]");
+	}
 }
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/InterfaceMethodsTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/InterfaceMethodsTest.java
index 7e881b0..2bb87bd 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/InterfaceMethodsTest.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/InterfaceMethodsTest.java
@@ -2641,4 +2641,158 @@ public class InterfaceMethodsTest extends AbstractComparableTest {
 			"Anonymous class value: 6.0\n" + 
 			"Lambda expression value: 6.0");
 	}
+	// https://bugs.eclipse.org/bugs/show_bug.cgi?id=437522, [1.8][compiler] Missing compile error in Java 8 mode for Interface.super.field access
+	public void testBug437522() throws Exception {
+		runNegativeTest(
+			new String[] {
+				"X.java",
+				"interface T {\n" +
+				"    int f = 0;\n" +
+				"    void foo();\n" +
+				"    default String def() { return \"T.def\"; }\n" +
+				"}\n" +
+				"class S {\n" +
+				"    public static final int f = 0;\n" +
+				"}\n" +
+				"class C extends S implements T {\n" +
+				"    @Override\n" +
+				"    public void foo() {\n" +
+				"        System.out.println(T.super.f); // no error in Java 8 (wrong) without fix\n" +
+				"        System.out.println(T.super.def()); // new JLS8 15.12.1 form (OK)\n" +
+				"        System.out.println(S.super.f); // compile error (correct)\n" +
+				"    }\n" +
+				"}\n" +
+				"class X {\n" +
+				"    T f = new T() {\n" +
+				"        @Override\n" +
+				"        public void foo() {\n" +
+				"            System.out.println(T.super.f); // no error in Java 8 (wrong) without fix\n" +
+				"        }\n" +
+				"    };\n" +
+				"}\n" +
+				"class Y { int f = 1;}\n" +
+				"class Z extends Y {\n" +
+				"	int foo2() { return super.f;}\n" +
+				"	static int foo() { return super.f;}\n" +
+				"}\n" +
+				"interface T2 { int f = 0; }\n" +
+				"class X2  implements T2 {	\n" +
+				"	int i = T2.super.f;\n" +
+				"}\n" +
+				"interface T3 { int f = 0; }\n" +
+				"interface T4 extends T3 { int f = 0; }\n" +
+				"class X3  implements T4 {	\n" +
+				"	int i = T4.super.f;\n" +
+				"}\n" +
+				"interface T5 { int f = 0; }\n" +
+				"class X5 implements T5 {	\n" +
+				"	static int i = T5.super.f;\n" +
+				"}\n" +
+				"interface T6 { int f = 0; }\n" +
+				"class X6 implements T6 {	\n" +
+				"	static int i = T6.super.f;\n" +
+				"}\n",
+			},
+			"----------\n" +
+			"1. ERROR in X.java (at line 12)\n" +
+			"	System.out.println(T.super.f); // no error in Java 8 (wrong) without fix\n" +
+			"	                   ^^^^^^^\n" +
+			"No enclosing instance of the type T is accessible in scope\n" +
+			"----------\n" +
+			"2. ERROR in X.java (at line 14)\n" +
+			"	System.out.println(S.super.f); // compile error (correct)\n" +
+			"	                   ^^^^^^^\n" +
+			"No enclosing instance of the type S is accessible in scope\n" +
+			"----------\n" +
+			"3. ERROR in X.java (at line 21)\n" +
+			"	System.out.println(T.super.f); // no error in Java 8 (wrong) without fix\n" +
+			"	                   ^^^^^^^\n" +
+			"No enclosing instance of the type T is accessible in scope\n" +
+			"----------\n" +
+			"4. ERROR in X.java (at line 28)\n" +
+			"	static int foo() { return super.f;}\n" +
+			"	                          ^^^^^\n" +
+			"Cannot use super in a static context\n" +
+			"----------\n" +
+			"5. ERROR in X.java (at line 32)\n" +
+			"	int i = T2.super.f;\n" +
+			"	        ^^^^^^^^\n" +
+			"No enclosing instance of the type T2 is accessible in scope\n" +
+			"----------\n" +
+			"6. ERROR in X.java (at line 37)\n" +
+			"	int i = T4.super.f;\n" +
+			"	        ^^^^^^^^\n" +
+			"No enclosing instance of the type T4 is accessible in scope\n" +
+			"----------\n" +
+			"7. ERROR in X.java (at line 41)\n" +
+			"	static int i = T5.super.f;\n" +
+			"	               ^^^^^^^^\n" +
+			"Cannot use super in a static context\n" +
+			"----------\n" +
+			"8. ERROR in X.java (at line 41)\n" +
+			"	static int i = T5.super.f;\n" +
+			"	               ^^^^^^^^\n" +
+			"No enclosing instance of the type T5 is accessible in scope\n" +
+			"----------\n" +
+			"9. ERROR in X.java (at line 45)\n" +
+			"	static int i = T6.super.f;\n" +
+			"	               ^^^^^^^^\n" +
+			"Cannot use super in a static context\n" +
+			"----------\n" +
+			"10. ERROR in X.java (at line 45)\n" +
+			"	static int i = T6.super.f;\n" +
+			"	               ^^^^^^^^\n" +
+			"No enclosing instance of the type T6 is accessible in scope\n" +
+			"----------\n");
+	}
+	// https://bugs.eclipse.org/bugs/show_bug.cgi?id=437522, [1.8][compiler] Missing compile error in Java 8 mode for Interface.super.field access
+	// Example JLS: 15.11.2-1.
+	public void testBug437522a() throws Exception {
+		runConformTest(
+			true,
+			new String[] {
+				"X.java",
+				"interface I  { int x = 0; }\n" +
+				"class T1 implements I { int x = 1; }\n" +
+				"class T2 extends T1   { int x = 2; }\n" +
+				"class T3 extends T2 {\n" +
+				"    int x = 3;\n" +
+				"    void test() {\n" +
+				"        System.out.println(\"x= \"          + x);\n" +
+				"        System.out.println(\"super.x= \"    + super.x);\n" +
+				"        System.out.println(\"((T2)this).x= \" + ((T2)this).x);\n" +
+				"        System.out.println(\"((T1)this).x= \" + ((T1)this).x);\n" +
+				"        System.out.println(\"((I)this).x= \"  + ((I)this).x);\n" +
+				"    }\n" +
+				"}\n" +
+				"public class X {\n" +
+				"    public static void main(String[] args) {\n" +
+				"        new T3().test();\n" +
+				"    }\n" +
+				"}\n",
+			},
+			null, null,
+			"----------\n" +
+			"1. WARNING in X.java (at line 3)\n" +
+			"	class T2 extends T1   { int x = 2; }\n" +
+			"	                            ^\n" +
+			"The field T2.x is hiding a field from type T1\n" +
+			"----------\n" +
+			"2. WARNING in X.java (at line 5)\n" +
+			"	int x = 3;\n" +
+			"	    ^\n" +
+			"The field T3.x is hiding a field from type T2\n" +
+			"----------\n" +
+			"3. WARNING in X.java (at line 11)\n" +
+			"	System.out.println(\"((I)this).x= \"  + ((I)this).x);\n" +
+			"	                                                ^\n" +
+			"The static field I.x should be accessed in a static way\n" +
+			"----------\n",
+			"x= 3\n" +
+			"super.x= 2\n" +
+			"((T2)this).x= 2\n"	+
+			"((T1)this).x= 1\n" +
+			"((I)this).x= 0",
+			"", JavacTestOptions.DEFAULT);
+	}
 }
diff --git a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
index bcf2a57..2755ecd 100644
--- a/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
+++ b/org.eclipse.jdt.core/codeassist/org/eclipse/jdt/internal/codeassist/CompletionEngine.java
@@ -629,6 +629,7 @@ public final class CompletionEngine
 		public boolean receiverIsImplicitThis() { return false; }
 		public InferenceContext18 freshInferenceContext(Scope scope) { return null; }
 		public ExpressionContext getExpressionContext() { return ExpressionContext.VANILLA_CONTEXT; }
+		public boolean isQualifiedSuper() { return false; }
 	};
 
 	private int foundTypesCount;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java
index ed204b5..e7b534a 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ASTNode.java
@@ -543,6 +543,11 @@ public abstract class ASTNode implements TypeConstants, TypeIds {
 		return false;
 	}
 
+	public boolean isQualifiedSuper() {
+
+		return false;
+	}
+
 	public boolean isThis() {
 
 		return false;
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java
index abf92d7..122eb4f 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/CastExpression.java
@@ -283,6 +283,7 @@ private static void checkAlternateBinding(BlockScope scope, Expression receiver,
 			public boolean receiverIsImplicitThis() { return invocationSite.receiverIsImplicitThis();}
 			public InferenceContext18 freshInferenceContext(Scope someScope) { return invocationSite.freshInferenceContext(someScope); }
 			public ExpressionContext getExpressionContext() { return invocationSite.getExpressionContext(); }
+			public boolean isQualifiedSuper() { return invocationSite.isQualifiedSuper(); }
 		};
 		MethodBinding bindingIfNoCast;
 		if (binding.isConstructor()) {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java
index 6f819e1..a694585 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/FieldReference.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2013 IBM Corporation and others.
+ * Copyright (c) 2000, 2014 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -492,6 +492,11 @@ public boolean isSuperAccess() {
 	return this.receiver.isSuper();
 }
 
+@Override
+public boolean isQualifiedSuper() {
+	return this.receiver.isQualifiedSuper();
+}
+
 public boolean isTypeAccess() {
 	return this.receiver != null && this.receiver.isTypeReference();
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java
index 35fd3d5..4c4eea2 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/MessageSend.java
@@ -1085,4 +1085,8 @@ public InnerInferenceHelper innerInferenceHelper() {
 public InferenceContext18 freshInferenceContext(Scope scope) {
 	return new InferenceContext18(scope, this.arguments, this);
 }
+@Override
+public boolean isQualifiedSuper() {
+	return this.receiver.isQualifiedSuper();
+}
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedSuperReference.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedSuperReference.java
index 4647276..4376194 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedSuperReference.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedSuperReference.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2013 IBM Corporation and others.
+ * Copyright (c) 2000, 2014 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -27,6 +27,10 @@ public boolean isSuper() {
 	return true;
 }
 
+public boolean isQualifiedSuper() {
+	return true;
+}
+
 public boolean isThis() {
 	return false;
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InvocationSite.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InvocationSite.java
index 3567686..0527f27 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InvocationSite.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/InvocationSite.java
@@ -20,6 +20,7 @@ public interface InvocationSite {
 
 	TypeBinding[] genericTypeArguments();
 	boolean isSuperAccess();
+	boolean isQualifiedSuper();
 	boolean isTypeAccess();
 	// in case the receiver type does not match the actual receiver type
 	// e.g. pkg.Type.C (receiver type of C is type of source context,
@@ -53,5 +54,7 @@ public interface InvocationSite {
 		public boolean receiverIsImplicitThis() { return false; }
 		public InferenceContext18 freshInferenceContext(Scope scope) { return null; }
 		public ExpressionContext getExpressionContext() { return ExpressionContext.VANILLA_CONTEXT; }
+		@Override
+		public boolean isQualifiedSuper() { return false; }
 	}
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java
index cf030e5..ebdd045 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/MethodScope.java
@@ -419,6 +419,14 @@ public FieldBinding findField(TypeBinding receiverType, char[] fieldName, Invoca
 		return null;
 	if (!field.isValidBinding())
 		return field; // answer the error field
+
+	if (receiverType.isInterface() && invocationSite.isQualifiedSuper())
+		return new ProblemFieldBinding(
+				field, // closest match
+				field.declaringClass,
+				fieldName,
+				ProblemReasons.NoProperEnclosingInstance);
+
 	if (field.isStatic())
 		return field; // static fields are always accessible
 
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ProblemReasons.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ProblemReasons.java
index 73e041b..b3d6005 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ProblemReasons.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ProblemReasons.java
@@ -45,4 +45,5 @@ public interface ProblemReasons {
 	final int ContradictoryNullAnnotations = 25;
 	final int NoSuchMethodOnArray = 26;
 	final int InferredAppliableMethodInapplicable = 27; // 18.5.1 ignores arguments not pertinent to applicability. When these are taken into consideration method could fail applicability
+	final int NoProperEnclosingInstance = 28;
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
index 4233698..6dfc0b4 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
@@ -4494,6 +4494,7 @@ public abstract class Scope {
 				public boolean receiverIsImplicitThis() { return invocationSite.receiverIsImplicitThis();}
 				public InferenceContext18 freshInferenceContext(Scope scope) { return null; /* no inference when ignoring genericTypeArgs */ }
 				public ExpressionContext getExpressionContext() { return ExpressionContext.VANILLA_CONTEXT; }
+				public boolean isQualifiedSuper() { return invocationSite.isQualifiedSuper(); }
 			};
 			int count = 0;
 			for (int level = 0, max = VARARGS_COMPATIBLE; level <= max; level++) {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
index 93fc08c..dd677fe 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
@@ -3814,6 +3814,9 @@ public void invalidField(FieldReference fieldRef, TypeBinding searchedType) {
 		case ProblemReasons.Ambiguous :
 			id = IProblem.AmbiguousField;
 			break;
+		case ProblemReasons.NoProperEnclosingInstance:
+			noSuchEnclosingInstance(fieldRef.actualReceiverType, fieldRef.receiver, false);
+			return;
 		case ProblemReasons.NonStaticReferenceInStaticContext :
 			id = IProblem.NonStaticFieldFromStaticInvocation;
 			break;

commit 8d2352ba4703e7d18c3c484c6ecaef6804365f32
Author: Markus Keller <markus_keller@ch.ibm.com>
Date:   Tue Apr 19 17:33:44 2016 +0200

    Bug 490988: [compiler] Able to compile Interface.super construct in 1.7
    project while using classes defined in 1.8 project
    
    Change-Id: I1d6af972a7fc96f880a025c98acdbc680635c559

4	0	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java
48	1	org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_7.java
4	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
15	6	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedSuperReference.java
3	3	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedThisReference.java
2	1	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ProblemReasons.java
8	2	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
27	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
2	0	org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java
index c524b50..d017fbf 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/CompilerInvocationTests.java
@@ -645,6 +645,8 @@ public void test011_problem_categories() {
 		expectedProblemAttributes.put("InterfaceNotFound", DEPRECATED);
 		expectedProblemAttributes.put("InterfaceNotFunctionalInterface", new ProblemAttributes(CategorizedProblem.CAT_TYPE));
 		expectedProblemAttributes.put("InterfaceNotVisible", DEPRECATED);
+		expectedProblemAttributes.put("InterfaceStaticMethodInvocationNotBelow18", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));
+		expectedProblemAttributes.put("InterfaceSuperInvocationNotBelow18", new ProblemAttributes(CategorizedProblem.CAT_SYNTAX));
 		expectedProblemAttributes.put("InternalTypeNameProvided", new ProblemAttributes(CategorizedProblem.CAT_TYPE));
 		expectedProblemAttributes.put("IntersectionCastNotBelow18", new ProblemAttributes(CategorizedProblem.CAT_TYPE));
 		expectedProblemAttributes.put("InvalidAnnotationMemberType", new ProblemAttributes(CategorizedProblem.CAT_TYPE));
@@ -1478,6 +1480,8 @@ public void test012_compiler_problems_tuning() {
 		expectedProblemAttributes.put("InterfaceNotFound", SKIP);
 		expectedProblemAttributes.put("InterfaceNotFunctionalInterface", SKIP);
 		expectedProblemAttributes.put("InterfaceNotVisible", SKIP);
+		expectedProblemAttributes.put("InterfaceStaticMethodInvocationNotBelow18", SKIP);
+		expectedProblemAttributes.put("InterfaceSuperInvocationNotBelow18", SKIP);
 		expectedProblemAttributes.put("InternalTypeNameProvided", SKIP);
 		expectedProblemAttributes.put("IntersectionCastNotBelow18", SKIP);
 		expectedProblemAttributes.put("InvalidAnnotationMemberType", SKIP);
diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_7.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_7.java
index 1c2e0d6..42f87ce 100644
--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_7.java
+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/Compliance_1_7.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2011, 2014 IBM Corporation and others.
+ * Copyright (c) 2011, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -177,6 +177,53 @@ public void testBug390889_c() {
 			options,
 			null/* do not perform statements recovery */);
 }
+// Project with 1.7 compliance compiled against JRE 8
+// assert that 1.8 constructs are not allowed at compliance 1.7
+public void testBug490988() {
+	if (this.complianceLevel < ClassFileConstants.JDK1_8)
+		return;
+	Map options = getCompilerOptions();
+	options.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_7);
+	options.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_7);
+	options.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_7);
+	this.runNegativeTest(
+			new String[] {
+				"Thing.java",
+				"import java.util.Comparator;\n" + 
+				"import java.util.Iterator;\n" + 
+				"public class Thing implements Iterator<Object> {\n" + 
+				"    void breaking() {\n" + 
+				"        Iterator.super.remove(); // not 1.7-compliant (must be an error)\n" + 
+				"        Comparator.naturalOrder(); // not 1.7-compliant (bad error message)\n" + 
+				"    }\n" + 
+				"    @Override\n" + 
+				"    public boolean hasNext() {\n" + 
+				"        return false;\n" + 
+				"    }\n" + 
+				"    @Override\n" + 
+				"    public Object next() {\n" + 
+				"        return null;\n" + 
+				"    }\n" + 
+				"    public static void main(String[] args) {\n" + 
+				"        new Thing().breaking();\n" + 
+				"    }\n" + 
+				"}"
+			},
+			"----------\n" +
+			"1. ERROR in Thing.java (at line 5)\n" +
+			"	Iterator.super.remove(); // not 1.7-compliant (must be an error)\n" +
+			"	^^^^^^^^^^^^^^\n" + 
+			"Super method references to interface default methods are allowed only at source level 1.8 or above\n" +
+			"----------\n" +
+			"2. ERROR in Thing.java (at line 6)\n" +
+			"	Comparator.naturalOrder(); // not 1.7-compliant (bad error message)\n" +
+			"	           ^^^^^^^^^^^^\n" + 
+			"References to interface static methods are allowed only at source level 1.8 or above\n" +
+			"----------\n",
+			null,
+			false,
+			options);
+}
 public static Class testClass() {
 	return Compliance_1_7.class;
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
index 2f046a5..6ac91a7 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/core/compiler/IProblem.java
@@ -1470,6 +1470,10 @@ void setSourceStart(int sourceStart);
 	int ConstructionTypeMismatch = Internal + TypeRelated + 665;
     /** @since 3.10 */
     int ToleratedMisplacedTypeAnnotations = Syntax + Internal + 666;
+    /** @since 3.13*/
+    int InterfaceSuperInvocationNotBelow18 = Internal + Syntax + 667;
+    /** @since 3.13*/
+    int InterfaceStaticMethodInvocationNotBelow18 = Internal + Syntax + 668;
 
 
 	/**
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedSuperReference.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedSuperReference.java
index 4376194..67c9f2a 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedSuperReference.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedSuperReference.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2014 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -15,7 +15,14 @@
 package org.eclipse.jdt.internal.compiler.ast;
 
 import org.eclipse.jdt.internal.compiler.ASTVisitor;
-import org.eclipse.jdt.internal.compiler.lookup.*;
+import org.eclipse.jdt.internal.compiler.classfmt.ClassFileConstants;
+import org.eclipse.jdt.internal.compiler.impl.CompilerOptions;
+import org.eclipse.jdt.internal.compiler.lookup.BlockScope;
+import org.eclipse.jdt.internal.compiler.lookup.ClassScope;
+import org.eclipse.jdt.internal.compiler.lookup.ProblemReasons;
+import org.eclipse.jdt.internal.compiler.lookup.ProblemReferenceBinding;
+import org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding;
+import org.eclipse.jdt.internal.compiler.lookup.TypeBinding;
 
 public class QualifiedSuperReference extends QualifiedThisReference {
 
@@ -61,11 +68,13 @@ public TypeBinding resolveType(BlockScope scope) {
 			: this.currentCompatibleType.superclass());
 }
 
-int findCompatibleEnclosing(ReferenceBinding enclosingType, TypeBinding type) {
+int findCompatibleEnclosing(ReferenceBinding enclosingType, TypeBinding type, BlockScope scope) {
 	if (type.isInterface()) {
 		// super call to an overridden default method? (not considering outer enclosings)
+		CompilerOptions compilerOptions = scope.compilerOptions();
 		ReferenceBinding[] supers = enclosingType.superInterfaces();
 		int length = supers.length;
+		boolean isJava8 = compilerOptions.complianceLevel >= ClassFileConstants.JDK1_8;
 		boolean isLegal = true; // false => compoundName != null && closestMatch != null
 		char[][] compoundName = null;
 		ReferenceBinding closestMatch = null;
@@ -80,18 +89,18 @@ int findCompatibleEnclosing(ReferenceBinding enclosingType, TypeBinding type) {
 				// keep looking to ensure we always find the referenced type (even if illegal) 
 			}
 		}
-		if (!isLegal) {
+		if (!isLegal || !isJava8) {
 			this.currentCompatibleType = null;
 			// Please note the slightly unconventional use of the ProblemReferenceBinding:
 			// we use the problem's compoundName to report the type being illegally bypassed,
 			// whereas the closestMatch denotes the resolved (though illegal) target type
 			// for downstream resolving.
 			this.resolvedType =  new ProblemReferenceBinding(compoundName, 
-					closestMatch, ProblemReasons.AttemptToBypassDirectSuper);
+					closestMatch, isJava8 ? ProblemReasons.AttemptToBypassDirectSuper : ProblemReasons.InterfaceMethodInvocationNotBelow18);
 		}
 		return 0; // never an outer enclosing type
 	}
-	return super.findCompatibleEnclosing(enclosingType, type);
+	return super.findCompatibleEnclosing(enclosingType, type, scope);
 }
 
 public void traverse(
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedThisReference.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedThisReference.java
index b9a63cf..64bfb02 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedThisReference.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/QualifiedThisReference.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2014 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -95,7 +95,7 @@ public class QualifiedThisReference extends ThisReference {
 
 		// the qualification MUST exactly match some enclosing type name
 		// It is possible to qualify 'this' by the name of the current class
-		int depth = findCompatibleEnclosing(scope.referenceType().binding, type);
+		int depth = findCompatibleEnclosing(scope.referenceType().binding, type, scope);
 		this.bits &= ~DepthMASK; // flush previous depth if any
 		this.bits |= (depth & 0xFF) << DepthSHIFT; // encoded depth into 8 bits
 
@@ -128,7 +128,7 @@ public class QualifiedThisReference extends ThisReference {
 		return this.resolvedType;
 	}
 
-	int findCompatibleEnclosing(ReferenceBinding enclosingType, TypeBinding type) {
+	int findCompatibleEnclosing(ReferenceBinding enclosingType, TypeBinding type, BlockScope scope) {
 		int depth = 0;
 		this.currentCompatibleType = enclosingType;
 		while (this.currentCompatibleType != null && TypeBinding.notEquals(this.currentCompatibleType, type)) {
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ProblemReasons.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ProblemReasons.java
index 72c969d..b8116a0 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ProblemReasons.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ProblemReasons.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2014 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -46,4 +46,5 @@ public interface ProblemReasons {
 	final int NoSuchMethodOnArray = 26;
 	final int InferredApplicableMethodInapplicable = 27; // 18.5.1 ignores arguments not pertinent to applicability. When these are taken into consideration method could fail applicability
 	final int NoProperEnclosingInstance = 28;
+	final int InterfaceMethodInvocationNotBelow18 = 29;
 }
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
index b96939c..d7854b4 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/Scope.java
@@ -1766,8 +1766,14 @@ public abstract class Scope {
 				findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, null);
 				if (interfaceMethod != null) return interfaceMethod;
 				MethodBinding candidate = candidates[0];
-				return new ProblemMethodBinding(candidates[0], candidates[0].selector, candidates[0].parameters, 
-						candidate.isStatic() && candidate.declaringClass.isInterface() ? ProblemReasons.NonStaticOrAlienTypeReceiver : ProblemReasons.NotVisible);
+				int reason = ProblemReasons.NotVisible;
+				if (candidate.isStatic() && candidate.declaringClass.isInterface()) {
+					if (soureLevel18)
+						reason = ProblemReasons.NonStaticOrAlienTypeReceiver;
+					else
+						reason = ProblemReasons.InterfaceMethodInvocationNotBelow18;
+				}
+				return new ProblemMethodBinding(candidate, candidate.selector, candidate.parameters, reason);
 			case 1 :
 				if (searchForDefaultAbstractMethod)
 					return findDefaultAbstractMethod(receiverType, selector, argumentTypes, invocationSite, classHierarchyStart, found, new MethodBinding [] { candidates[0] });
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
index 3845a58..6517873 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/ProblemReporter.java
@@ -134,6 +134,7 @@ import org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference
 import org.eclipse.jdt.internal.compiler.ast.ParameterizedSingleTypeReference;
 import org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression;
 import org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference;
+import org.eclipse.jdt.internal.compiler.ast.QualifiedSuperReference;
 import org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference;
 import org.eclipse.jdt.internal.compiler.ast.Receiver;
 import org.eclipse.jdt.internal.compiler.ast.Reference;
@@ -3010,6 +3011,14 @@ public void defaultMethodsNotBelow18(MethodDeclaration md) {
 			md.sourceStart,
 			md.sourceEnd);
 }
+public void interfaceSuperInvocationNotBelow18(QualifiedSuperReference qualifiedSuperReference) {
+	this.handle(
+			IProblem.InterfaceSuperInvocationNotBelow18,
+			NoArgument,
+			NoArgument,
+			qualifiedSuperReference.sourceStart,
+			qualifiedSuperReference.sourceEnd);
+}
 public void staticInterfaceMethodsNotBelow18(MethodDeclaration md) {
 	this.handle(
 			IProblem.StaticInterfaceMethodNotBelow18,
@@ -4154,6 +4163,20 @@ public void invalidMethod(MessageSend messageSend, MethodBinding method, Scope s
 					(int) (messageSend.nameSourcePosition >>> 32),
 					(int) messageSend.nameSourcePosition);
 			return;
+		case ProblemReasons.InterfaceMethodInvocationNotBelow18:
+			this.handle(
+					IProblem.InterfaceStaticMethodInvocationNotBelow18,
+					new String[] {
+							new String(method.declaringClass.readableName()),
+					        new String(method.selector),
+					},
+					new String[] {
+							new String(method.declaringClass.shortReadableName()),
+					        new String(method.selector),
+					},
+					(int) (messageSend.nameSourcePosition >>> 32),
+					(int) messageSend.nameSourcePosition);
+			return;
 		case ProblemReasons.ReceiverTypeNotVisible :
 			this.handle(
 				IProblem.NotVisibleType,	// cannot occur in javadoc comments
@@ -10322,6 +10345,10 @@ public void incompatibleReturnType(ReferenceExpression expression, MethodBinding
 }
 
 public void illegalSuperAccess(TypeBinding superType, TypeBinding directSuperType, ASTNode location) {
+	if (directSuperType.problemId() == ProblemReasons.InterfaceMethodInvocationNotBelow18) {
+		interfaceSuperInvocationNotBelow18((QualifiedSuperReference) location);
+		return;
+	}
 	if (directSuperType.problemId() != ProblemReasons.AttemptToBypassDirectSuper)
 		needImplementation(location);
 	handle(IProblem.SuperAccessCannotBypassDirectSuper, 
diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
index db3cc7a..f80d5ef 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/problem/messages.properties
@@ -663,6 +663,8 @@
 664 = Invalid ''@FunctionalInterface'' annotation; {0} is not a functional interface
 665 = The constructed object of type {0} is incompatible with the descriptor''s return type: {1}
 666 = Syntax error, type annotations are illegal here
+667 = Super method references to interface default methods are allowed only at source level 1.8 or above
+668 = References to interface static methods are allowed only at source level 1.8 or above
 
 ### NULL ANALYSIS FOR OTHER EXPRESSIONS
 670 = Null comparison always yields false: this expression cannot be null

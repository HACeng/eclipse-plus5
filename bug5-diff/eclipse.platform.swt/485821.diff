commit 7ea03d5ad5365ff1ae53219e5549fc9ceee1192f
Author: Alexander Kurtakov <akurtako@redhat.com>
Date:   Thu Jan 14 11:28:47 2016 +0200

    Bug 485821 - Make examples/snippets use lambdas
    
    Convert Display.syncExec/asyncExec.
    
    Change-Id: I9327a1bc93e1a0f2981162b8f15a814692a9635b
    Signed-off-by: Alexander Kurtakov <akurtako@redhat.com>

3	11	examples/org.eclipse.swt.examples.browser.demos/src/org/eclipse/swt/examples/browser/demos/views/PawnTab.java
8	14	examples/org.eclipse.swt.examples.watchdog/src/org/eclipse/swt/examples/watchdog/WatchdogPlugin.java
13	19	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/fileviewer/FileViewer.java
46	62	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/imageanalyzer/ImageAnalyzer.java
2	7	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/javaviewer/JavaViewer.java
20	23	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet104.java
7	13	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet130.java
6	8	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet151.java
7	10	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet157.java
4	9	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet173.java
6	8	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet288.java
6	9	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet320.java
17	26	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet337.java
9	12	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet343.java
5	8	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet56.java
7	10	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet7.java
diff --git a/examples/org.eclipse.swt.examples.browser.demos/src/org/eclipse/swt/examples/browser/demos/views/PawnTab.java b/examples/org.eclipse.swt.examples.browser.demos/src/org/eclipse/swt/examples/browser/demos/views/PawnTab.java
index 3f7d803..a496798 100644
--- a/examples/org.eclipse.swt.examples.browser.demos/src/org/eclipse/swt/examples/browser/demos/views/PawnTab.java
+++ b/examples/org.eclipse.swt.examples.browser.demos/src/org/eclipse/swt/examples/browser/demos/views/PawnTab.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2004 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -151,11 +151,7 @@ public class PawnTab {
 				game = new byte[8][8];
 				if (computer) ttr = new Pawns();
 				for (int i = 0; i < 5; i++) game[(int)(Math.random()*game.length)][(int)(Math.random()*game[0].length)] = WALL;
-				e.display.asyncExec(new Runnable() {
-					@Override
-					public void run() {
-						browser.setText(getHtml(TYPE_BOARD));
-				}});
+				e.display.asyncExec(() -> browser.setText(getHtml(TYPE_BOARD)));
 				e.doit = false;
 				return;
 			}
@@ -164,11 +160,7 @@ public class PawnTab {
 				CSS_FOLDER = e.location.substring(index, index + 4);
 				URL_CSS = PLUGIN_PATH+CSS_FOLDER+"/style.css";
 				URL_WELCOME = PLUGIN_PATH+CSS_FOLDER+"/welcome.html";
-				e.display.asyncExec(new Runnable() {
-					@Override
-					public void run() {
-						browser.setUrl(URL_WELCOME);
-				}});
+				e.display.asyncExec(() -> browser.setUrl(URL_WELCOME));
 				e.doit = false;
 				return;
 			}
diff --git a/examples/org.eclipse.swt.examples.watchdog/src/org/eclipse/swt/examples/watchdog/WatchdogPlugin.java b/examples/org.eclipse.swt.examples.watchdog/src/org/eclipse/swt/examples/watchdog/WatchdogPlugin.java
index 4712bab..8f00ae0 100644
--- a/examples/org.eclipse.swt.examples.watchdog/src/org/eclipse/swt/examples/watchdog/WatchdogPlugin.java
+++ b/examples/org.eclipse.swt.examples.watchdog/src/org/eclipse/swt/examples/watchdog/WatchdogPlugin.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2013, Google Inc. and others.
+ * Copyright (c) 2013, 2016 Google Inc. and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -40,12 +40,9 @@ public class WatchdogPlugin extends AbstractUIPlugin implements IStartup {
 	@Override
 	public void earlyStartup() {
 		if (display != null) {
-			display.asyncExec(new Runnable() {
-				@Override
-				public void run() {
-					display.addListener(SWT.PreEvent, watchdog);
-					display.addListener(SWT.PostEvent, watchdog);
-				}
+			display.asyncExec(() -> {
+				display.addListener(SWT.PreEvent, watchdog);
+				display.addListener(SWT.PostEvent, watchdog);
 			});
 		}
 	}
@@ -54,13 +51,10 @@ public class WatchdogPlugin extends AbstractUIPlugin implements IStartup {
 	public void stop(BundleContext context) throws Exception {
 		try {
 			if (display != null && !display.isDisposed()) {
-				display.asyncExec(new Runnable() {
-					@Override
-					public void run() {
-						if (!display.isDisposed()) {
-							display.removeListener(SWT.PreEvent, watchdog);
-							display.removeListener(SWT.PostEvent, watchdog);
-						}
+				display.asyncExec(() -> {
+					if (!display.isDisposed()) {
+						display.removeListener(SWT.PreEvent, watchdog);
+						display.removeListener(SWT.PostEvent, watchdog);
 					}
 				});
 			}
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/fileviewer/FileViewer.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/fileviewer/FileViewer.java
index deb20f1..baf1670 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/fileviewer/FileViewer.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/fileviewer/FileViewer.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2006 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -1581,14 +1581,11 @@ public class FileViewer {
 	private void workerExecute() {
 		File[] dirList;
 		// Clear existing information
-		display.syncExec(new Runnable() {
-			@Override
-			public void run() {
-				tableContentsOfLabel.setText(FileViewer.getResourceString("details.ContentsOf.text",
-					new Object[] { workerStateDir.getPath() }));
-				table.removeAll();
-				table.setData(TABLEDATA_DIR, workerStateDir);
-			}
+		display.syncExec(() -> {
+			tableContentsOfLabel.setText(FileViewer.getResourceString("details.ContentsOf.text",
+				new Object[] { workerStateDir.getPath() }));
+			table.removeAll();
+			table.setData(TABLEDATA_DIR, workerStateDir);
 		});
 		dirList = getDirectoryList(workerStateDir);
 		
@@ -1634,16 +1631,13 @@ public class FileViewer {
 		}
 		final String[] strings = new String[] { nameString, sizeString, typeString, dateString };
 
-		display.syncExec(new Runnable() {
-			@Override
-			public void run () {
-				// guard against the shell being closed before this runs
-				if (shell.isDisposed()) return;
-				TableItem tableItem = new TableItem(table, 0);
-				tableItem.setText(strings);
-				tableItem.setImage(iconImage);
-				tableItem.setData(TABLEITEMDATA_FILE, file);
-			}
+		display.syncExec(() -> {
+			// guard against the shell being closed before this runs
+			if (shell.isDisposed()) return;
+			TableItem tableItem = new TableItem(table, 0);
+			tableItem.setText(strings);
+			tableItem.setImage(iconImage);
+			tableItem.setData(TABLEITEMDATA_FILE, file);
 		});
 	}
 	
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/imageanalyzer/ImageAnalyzer.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/imageanalyzer/ImageAnalyzer.java
index f6f7e71..19f1f4c 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/imageanalyzer/ImageAnalyzer.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/imageanalyzer/ImageAnalyzer.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -1632,14 +1632,9 @@ public class ImageAnalyzer {
 					try {
 						animateLoop();
 					} catch (final SWTException e) {
-						display.syncExec(new Runnable() {
-							@Override
-							public void run() {
-								showErrorDialog(createMsg(bundle.getString("Creating_image"), 
-										    new Integer(imageDataIndex+1)),
-										    currentName, e);
-							}
-						});
+						display.syncExec(() -> showErrorDialog(createMsg(bundle.getString("Creating_image"), 
+								    new Integer(imageDataIndex+1)),
+								    currentName, e));
 					}
 					
 					// Post animation widget reset.
@@ -1663,12 +1658,7 @@ public class ImageAnalyzer {
 		
 		try {
 			// Use syncExec to get the background color of the imageCanvas.
-			display.syncExec(new Runnable() {
-				@Override
-				public void run() {
-					canvasBackground = imageCanvas.getBackground();
-				}
-			});
+			display.syncExec(() -> canvasBackground = imageCanvas.getBackground());
 
 			// Fill the off-screen image with the background color of the canvas.
 			offScreenImageGC.setBackground(canvasBackground);
@@ -1766,29 +1756,26 @@ public class ImageAnalyzer {
 	 * Pre animation setup.
 	 */
 	void preAnimation() {
-		display.syncExec(new Runnable() {
-			@Override
-			public void run() {
-				// Change the label of the Animate button to 'Stop'.
-				animateButton.setText(bundle.getString("Stop"));
-				
-				// Disable anything we don't want the user
-				// to select during the animation.
-				previousButton.setEnabled(false);
-				nextButton.setEnabled(false);
-				backgroundCombo.setEnabled(false);
-				scaleXCombo.setEnabled(false);
-				scaleYCombo.setEnabled(false);
-				alphaCombo.setEnabled(false);
-				incrementalCheck.setEnabled(false);
-				transparentCheck.setEnabled(false);
-				maskCheck.setEnabled(false);
-				// leave backgroundCheck enabled
+		display.syncExec(() -> {
+			// Change the label of the Animate button to 'Stop'.
+			animateButton.setText(bundle.getString("Stop"));
 			
-				// Reset the scale combos and scrollbars.
-				resetScaleCombos();
-				resetScrollBars();
-			}
+			// Disable anything we don't want the user
+			// to select during the animation.
+			previousButton.setEnabled(false);
+			nextButton.setEnabled(false);
+			backgroundCombo.setEnabled(false);
+			scaleXCombo.setEnabled(false);
+			scaleYCombo.setEnabled(false);
+			alphaCombo.setEnabled(false);
+			incrementalCheck.setEnabled(false);
+			transparentCheck.setEnabled(false);
+			maskCheck.setEnabled(false);
+			// leave backgroundCheck enabled
+		
+			// Reset the scale combos and scrollbars.
+			resetScaleCombos();
+			resetScrollBars();
 		});
 	}
 
@@ -1796,31 +1783,28 @@ public class ImageAnalyzer {
 	 * Post animation reset.
 	 */
 	void postAnimation() {
-		display.syncExec(new Runnable() {
-			@Override
-			public void run() {
-				// Enable anything we disabled before the animation.
-				previousButton.setEnabled(true);
-				nextButton.setEnabled(true);
-				backgroundCombo.setEnabled(true);
-				scaleXCombo.setEnabled(true);
-				scaleYCombo.setEnabled(true);
-				alphaCombo.setEnabled(true);
-				incrementalCheck.setEnabled(true);
-				transparentCheck.setEnabled(true);
-				maskCheck.setEnabled(true);
-			
-				// Reset the label of the Animate button.
-				animateButton.setText(bundle.getString("Animate"));
-			
-				if (animate) {
-					// If animate is still true, we finished the
-					// full number of repeats. Leave the image as-is.
-					animate = false;
-				} else {
-					// Redisplay the current image and its palette.
-					displayImage(imageDataArray[imageDataIndex]);
-				}
+		display.syncExec(() -> {
+			// Enable anything we disabled before the animation.
+			previousButton.setEnabled(true);
+			nextButton.setEnabled(true);
+			backgroundCombo.setEnabled(true);
+			scaleXCombo.setEnabled(true);
+			scaleYCombo.setEnabled(true);
+			alphaCombo.setEnabled(true);
+			incrementalCheck.setEnabled(true);
+			transparentCheck.setEnabled(true);
+			maskCheck.setEnabled(true);
+		
+			// Reset the label of the Animate button.
+			animateButton.setText(bundle.getString("Animate"));
+		
+			if (animate) {
+				// If animate is still true, we finished the
+				// full number of repeats. Leave the image as-is.
+				animate = false;
+			} else {
+				// Redisplay the current image and its palette.
+				displayImage(imageDataArray[imageDataIndex]);
 			}
 		});
 	}
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/javaviewer/JavaViewer.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/javaviewer/JavaViewer.java
index 07296a23..422c792 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/javaviewer/JavaViewer.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/javaviewer/JavaViewer.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -186,12 +186,7 @@ void open(String name) {
 	}
 	// Guard against superfluous mouse move events -- defer action until later
 	Display display = text.getDisplay();
-	display.asyncExec(new Runnable() {
-		@Override
-		public void run() {
-			text.setText(textString);
-		}
-	});	
+	display.asyncExec(() -> text.setText(textString));	
 	
 	// parse the block comments up front since block comments can go across
 	// lines - inefficient way of doing this
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet104.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet104.java
index 198febf..bba1647 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet104.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet104.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2004 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -18,8 +18,8 @@ package org.eclipse.swt.snippets;
  */
 import org.eclipse.swt.*;
 import org.eclipse.swt.graphics.*;
-import org.eclipse.swt.widgets.*;
 import org.eclipse.swt.layout.*;
+import org.eclipse.swt.widgets.*;
 
 public class Snippet104 {
 
@@ -55,27 +55,24 @@ public static void main(String[] args) {
 	int y = (displayRect.height - splashRect.height) / 2;
 	splash.setLocation(x, y);
 	splash.open();
-	display.asyncExec(new Runnable() {
-		@Override
-		public void run() {
-			Shell [] shells = new Shell[count[0]];
-			for (int i=0; i<count[0]; i++) {
-				shells [i] = new Shell(display);
-				shells [i].setSize (300, 300);
-				shells [i].addListener(SWT.Close, new Listener() {
-					@Override
-					public void handleEvent (Event e) {
-						--count[0];
-					}
-				});
-				bar.setSelection(i+1);
-				try {Thread.sleep(1000);} catch (Throwable e) {}
-			}
-			splash.close();
-			image.dispose();
-			for (int i=0; i<count[0]; i++) {
-				shells [i].open();
-			}
+	display.asyncExec(() -> {
+		Shell [] shells = new Shell[count[0]];
+		for (int i1=0; i1<count[0]; i1++) {
+			shells [i1] = new Shell(display);
+			shells [i1].setSize (300, 300);
+			shells [i1].addListener(SWT.Close, new Listener() {
+				@Override
+				public void handleEvent (Event e) {
+					--count[0];
+				}
+			});
+			bar.setSelection(i1+1);
+			try {Thread.sleep(1000);} catch (Throwable e) {}
+		}
+		splash.close();
+		image.dispose();
+		for (int i2=0; i2<count[0]; i2++) {
+			shells [i2].open();
 		}
 	});
 	while (count [0] != 0) {
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet130.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet130.java
index 208b086..6c550cc 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet130.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet130.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2004 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -45,24 +45,18 @@ public class Snippet130 {
 							@Override
 							public void run() {
 								id = nextId[0]++;
-								display.syncExec(new Runnable() {
-									@Override
-									public void run() {
-										if (text.isDisposed()) return;
-										text.append("\nStart long running task "+id);
-									}
+								display.syncExec(() -> {
+									if (text.isDisposed()) return;
+									text.append("\nStart long running task "+id);
 								});
 								for (int i = 0; i < 100000; i++) {
 									if (display.isDisposed()) return;
 									System.out.println("do task that takes a long time in a separate thread "+id);
 								}
 								if (display.isDisposed()) return;
-								display.syncExec(new Runnable() {
-									@Override
-									public void run() {
-										if (text.isDisposed()) return;
-										text.append("\nCompleted long running task "+id);
-									}
+								display.syncExec(() -> {
+									if (text.isDisposed()) return;
+									text.append("\nCompleted long running task "+id);
 								});
 								done = true;
 								display.wake();
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet151.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet151.java
index b082954..1fa803b 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet151.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet151.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2005 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -19,6 +19,7 @@ package org.eclipse.swt.snippets;
  * @since 3.0
  */
 import java.util.*;
+
 import org.eclipse.swt.*;
 import org.eclipse.swt.layout.*;
 import org.eclipse.swt.widgets.*;
@@ -57,13 +58,10 @@ public static void main (String [] args) {
 					data[index++] = random.nextInt();
 				}
 				Arrays.sort(data);
-				display.syncExec(new Runnable() {
-					@Override
-					public void run() {
-						if (table.isDisposed()) return;
-						table.setItemCount(data.length);
-						table.clearAll();
-					}
+				display.syncExec(() -> {
+					if (table.isDisposed()) return;
+					table.setItemCount(data.length);
+					table.clearAll();
 				});
 				try {Thread.sleep(500);} catch (Throwable t) {}
 			}
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet157.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet157.java
index b2a3719..9be3880 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet157.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet157.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2004 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -61,15 +61,12 @@ public void init () {
  @Override
 public void stop (){
  	if (display != null && !display.isDisposed ()){
- 		display.syncExec(new Runnable () {
- 			@Override
-			public void run () {
- 				if (swtParent != null && !swtParent.isDisposed ()) swtParent.dispose ();
- 				swtParent = null;
- 				display.dispose ();
- 				display = null;
- 			}
- 		});
+ 		display.syncExec(() -> {
+			if (swtParent != null && !swtParent.isDisposed ()) swtParent.dispose ();
+			swtParent = null;
+			display.dispose ();
+			display = null;
+		});
  		remove (awtParent);
  		awtParent = null;
  	}
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet173.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet173.java
index 454a9c8..69c54cf 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet173.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet173.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2005 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -19,10 +19,10 @@ package org.eclipse.swt.snippets;
  * @since 3.1
  */
 import org.eclipse.swt.*;
-import org.eclipse.swt.widgets.*;
+import org.eclipse.swt.browser.*;
 import org.eclipse.swt.graphics.*;
 import org.eclipse.swt.layout.*;
-import org.eclipse.swt.browser.*;
+import org.eclipse.swt.widgets.*;
 
 public class Snippet173 {
 
@@ -80,12 +80,7 @@ static void initialize(final Display display, Browser browser) {
 			boolean isOSX = SWT.getPlatform().equals ("cocoa");
 			if (!event.addressBar && !event.statusBar && !event.toolBar && (!event.menuBar || isOSX)) {
 				System.out.println("Popup blocked.");
-				event.display.asyncExec(new Runnable() {
-					@Override
-					public void run() {
-						shell.close();
-					}
-				});
+				event.display.asyncExec(() -> shell.close());
 				return;
 			}
 			if (event.location != null) shell.setLocation(event.location);
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet288.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet288.java
index cac05fa..4cc6f50 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet288.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet288.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2008 IBM Corporation and others.
+ * Copyright (c) 2008, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -16,7 +16,8 @@ package org.eclipse.swt.snippets;
  * For a list of all SWT example snippets see
  * http://www.eclipse.org/swt/snippets/
  */
-import java.io.File;
+import java.io.*;
+
 import org.eclipse.swt.*;
 import org.eclipse.swt.graphics.*;
 import org.eclipse.swt.widgets.*;
@@ -156,12 +157,9 @@ public class Snippet288 {
 						while (loader[i].repeatCount == 0 || repeatCount > 0) {
 							imageDataIndex = (imageDataIndex + 1) % imageDataArray[i].length;
 							if (!display.isDisposed()) {
-								display.asyncExec(new Runnable() {
-									@Override
-									public void run() {
-										if (!item[i].isDisposed())
-											item[i].setImage(image[i][imageDataIndex]);
-									}
+								display.asyncExec(() -> {
+									if (!item[i].isDisposed())
+										item[i].setImage(image[i][imageDataIndex]);
 								});
 							}
 							
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet320.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet320.java
index 7df4b1e..a4b155c 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet320.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet320.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2009 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -104,14 +104,11 @@ public static void main(String [] args) {
 		@Override
 		public void handleEvent(Event event) {
 			/* async is needed to wait until focus reaches its new Control */
-			display.asyncExec(new Runnable() {
-				@Override
-				public void run() {
-					if (display.isDisposed()) return;
-					Control control = display.getFocusControl();
-					if (control == null || (control != text && control != table)) {
-						popupShell.setVisible(false);
-					}
+			display.asyncExec(() -> {
+				if (display.isDisposed()) return;
+				Control control = display.getFocusControl();
+				if (control == null || (control != text && control != table)) {
+					popupShell.setVisible(false);
 				}
 			});
 		}
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet337.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet337.java
index 8e70c5a..cb77410 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet337.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet337.java
@@ -6,24 +6,18 @@ package org.eclipse.swt.snippets;
  * For a list of all SWT example snippets see
  * http://www.eclipse.org/swt/snippets/
  */
-
-import java.awt.BorderLayout;
+import java.awt.*;
 import java.awt.Canvas;
-import java.awt.EventQueue;
-import java.awt.FlowLayout;
-import java.awt.Frame;
-import java.awt.event.ActionEvent;
-import java.awt.event.ActionListener;
-import javax.swing.JButton;
-import javax.swing.JFrame;
-import javax.swing.JPanel;
-import javax.swing.JTextField;
+import java.awt.event.*;
+
+import javax.swing.*;
 
-import org.eclipse.swt.SWT;
-import org.eclipse.swt.awt.SWT_AWT;
-import org.eclipse.swt.browser.Browser;
-import org.eclipse.swt.layout.GridData;
+import org.eclipse.swt.*;
+import org.eclipse.swt.awt.*;
+import org.eclipse.swt.browser.*;
+import org.eclipse.swt.layout.*;
 import org.eclipse.swt.widgets.*;
+import org.eclipse.swt.widgets.Event;
 
 public class Snippet337 {
 
@@ -46,17 +40,14 @@ public static void main(String args[]) {
 					childFrame.setSize(850, 650);
 					childFrame.getContentPane().add(canvas);
 					childFrame.setVisible(true);
-					display.asyncExec(new Runnable() {
-						@Override
-						public void run() {
-							Shell shell = SWT_AWT.new_Shell(display, canvas);
-							shell.setSize(800, 600);
-							Browser browser = new Browser(shell, SWT.NONE);
-							browser.setLayoutData(new GridData(GridData.FILL_BOTH));
-							browser.setSize(800, 600);
-							browser.setUrl("http://www.eclipse.org");
-							shell.open();
-						}
+					display.asyncExec(() -> {
+						Shell shell = SWT_AWT.new_Shell(display, canvas);
+						shell.setSize(800, 600);
+						Browser browser = new Browser(shell, SWT.NONE);
+						browser.setLayoutData(new GridData(GridData.FILL_BOTH));
+						browser.setSize(800, 600);
+						browser.setUrl("http://www.eclipse.org");
+						shell.open();
 					});
 				}
 			});
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet343.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet343.java
index a106abc..c0be052 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet343.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet343.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2010 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -17,10 +17,10 @@ package org.eclipse.swt.snippets;
  * For a list of all SWT example snippets see
  * http://www.eclipse.org/swt/snippets/
  */
-import org.eclipse.swt.SWT;
+import org.eclipse.swt.*;
 import org.eclipse.swt.custom.*;
-import org.eclipse.swt.graphics.Point;
-import org.eclipse.swt.layout.FillLayout;
+import org.eclipse.swt.graphics.*;
+import org.eclipse.swt.layout.*;
 import org.eclipse.swt.widgets.*;
 
 public class Snippet343 {
@@ -63,14 +63,11 @@ public static void main(String[] args) {
 			 * The following is done asynchronously to allow the Text's width
 			 * to be changed before re-calculating its preferred height. 
 			 */
-			display.asyncExec(new Runnable() {
-				@Override
-				public void run() {
-					if (text.isDisposed()) return;
-					Point size = text.computeSize(text.getSize().x - trimWidth, SWT.DEFAULT);
-					if (expandItem1.getHeight() != size.y) {
-						expandItem1.setHeight(size.y);
-					}
+			display.asyncExec(() -> {
+				if (text.isDisposed()) return;
+				Point size = text.computeSize(text.getSize().x - trimWidth, SWT.DEFAULT);
+				if (expandItem1.getHeight() != size.y) {
+					expandItem1.setHeight(size.y);
 				}
 			});
 		}
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet56.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet56.java
index 8b8509e..8057b3e 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet56.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet56.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2004 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -17,7 +17,7 @@ package org.eclipse.swt.snippets;
  * http://www.eclipse.org/swt/snippets/
  */
 import org.eclipse.swt.*;
-import org.eclipse.swt.graphics.Rectangle;
+import org.eclipse.swt.graphics.*;
 import org.eclipse.swt.widgets.*;
 
 public class Snippet56 {
@@ -36,12 +36,9 @@ public class Snippet56 {
 				for (final int[] i = new int[1]; i[0] <= maximum; i[0]++) {
 				try {Thread.sleep (100);} catch (Throwable th) {}
 					if (display.isDisposed()) return;
-					display.asyncExec(new Runnable() {
-						@Override
-						public void run() {
-						if (bar.isDisposed ()) return;
-							bar.setSelection(i[0]);
-						}
+					display.asyncExec(() -> {
+					if (bar.isDisposed ()) return;
+						bar.setSelection(i[0]);
 					});
 				}
 			}
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet7.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet7.java
index 2bab647..cb825a6 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet7.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet7.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2004 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -17,8 +17,8 @@ package org.eclipse.swt.snippets;
  * http://www.eclipse.org/swt/snippets/
  */
 import org.eclipse.swt.*;
-import org.eclipse.swt.layout.*;
 import org.eclipse.swt.graphics.*;
+import org.eclipse.swt.layout.*;
 import org.eclipse.swt.widgets.*;
 
 public class Snippet7 {
@@ -41,14 +41,11 @@ public static void main (String [] args) {
 			for (int i=0; i<20000; i++) {
 				if (table.isDisposed ()) return;
 				final int [] index = new int [] {i};
-				display.syncExec (new Runnable () {
-					@Override
-					public void run () {
-						if (table.isDisposed ()) return;
-						TableItem item = new TableItem (table, SWT.NONE);
-						item.setText ("Table Item " + index [0]);
-						item.setImage (image);
-					}
+				display.syncExec (() -> {
+					if (table.isDisposed ()) return;
+					TableItem item = new TableItem (table, SWT.NONE);
+					item.setText ("Table Item " + index [0]);
+					item.setImage (image);
 				});
 			}
 		}
commit 3cb12b795b3443d0928c28de8b885864798a15e4
Author: Alexander Kurtakov <akurtako@redhat.com>
Date:   Fri Jan 15 09:55:48 2016 +0200

    Bug 485821 - Make examples/snippets use lambdas
    
    Convert Display.timerExec/disposeExec.
    
    Change-Id: Ic9c427473680ee2b3a5a591eaecd778c5223623a
    Signed-off-by: Alexander Kurtakov <akurtako@redhat.com>

5	8	examples/org.eclipse.swt.examples.browser.demos/src/org/eclipse/swt/examples/browser/demos/views/PawnTab.java
17	20	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/CTable.java
7	10	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet221.java
2	12	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet60.java
diff --git a/examples/org.eclipse.swt.examples.browser.demos/src/org/eclipse/swt/examples/browser/demos/views/PawnTab.java b/examples/org.eclipse.swt.examples.browser.demos/src/org/eclipse/swt/examples/browser/demos/views/PawnTab.java
index a496798..8ad7c91 100644
--- a/examples/org.eclipse.swt.examples.browser.demos/src/org/eclipse/swt/examples/browser/demos/views/PawnTab.java
+++ b/examples/org.eclipse.swt.examples.browser.demos/src/org/eclipse/swt/examples/browser/demos/views/PawnTab.java
@@ -251,14 +251,11 @@ public class PawnTab {
 	
 	public static void play(final Display display, final Browser browser, int delay) {
 		ttr.playRequest(game, BLACK);
-		display.timerExec(3000, new Runnable() {
-				@Override
-				public void run() {
-					ttr.getBestMove(move);
-					boolean hasMore = add(move[0], move[1], BLACK);
-					isWhite = true;
-					browser.setText(getHtml(hasMore ? TYPE_BOARD : TYPE_BOARD_OVER));
-				}
+		display.timerExec(3000, () -> {
+			ttr.getBestMove(move);
+			boolean hasMore = add(move[0], move[1], BLACK);
+			isWhite = true;
+			browser.setText(getHtml(hasMore ? TYPE_BOARD : TYPE_BOARD_OVER));
 		});
 	}
 	
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/CTable.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/CTable.java
index ce70a0a..43c7f4b 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/CTable.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/CTable.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2009 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -2125,26 +2125,23 @@ static void initImages (final Display display) {
 		display.setData (ID_GRAYUNCHECKED, new Image (display, grayUnchecked));
 	}
 
-	display.disposeExec (new Runnable () {
-		@Override
-		public void run() {
-			Image unchecked = (Image) display.getData (ID_UNCHECKED);
-			if (unchecked != null) unchecked.dispose ();
-			Image grayUnchecked = (Image) display.getData (ID_GRAYUNCHECKED);
-			if (grayUnchecked != null) grayUnchecked.dispose ();
-			Image checkmark = (Image) display.getData (ID_CHECKMARK);
-			if (checkmark != null) checkmark.dispose ();
-			Image arrowDown = (Image) display.getData (ID_ARROWDOWN);
-			if (arrowDown != null) arrowDown.dispose ();
-			Image arrowUp = (Image) display.getData (ID_ARROWUP);
-			if (arrowUp != null) arrowUp.dispose ();
+	display.disposeExec (() -> {
+		Image unchecked = (Image) display.getData (ID_UNCHECKED);
+		if (unchecked != null) unchecked.dispose ();
+		Image grayUnchecked = (Image) display.getData (ID_GRAYUNCHECKED);
+		if (grayUnchecked != null) grayUnchecked.dispose ();
+		Image checkmark1 = (Image) display.getData (ID_CHECKMARK);
+		if (checkmark1 != null) checkmark1.dispose ();
+		Image arrowDown = (Image) display.getData (ID_ARROWDOWN);
+		if (arrowDown != null) arrowDown.dispose ();
+		Image arrowUp = (Image) display.getData (ID_ARROWUP);
+		if (arrowUp != null) arrowUp.dispose ();
 
-			display.setData (ID_UNCHECKED, null);
-			display.setData (ID_GRAYUNCHECKED, null);
-			display.setData (ID_CHECKMARK, null);
-			display.setData (ID_ARROWDOWN, null);
-			display.setData (ID_ARROWUP, null);
-		}
+		display.setData (ID_UNCHECKED, null);
+		display.setData (ID_GRAYUNCHECKED, null);
+		display.setData (ID_CHECKMARK, null);
+		display.setData (ID_ARROWDOWN, null);
+		display.setData (ID_ARROWUP, null);
 	});
 }
 /**
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet221.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet221.java
index eb0b19c..6ff46bc 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet221.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet221.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2004 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -60,15 +60,12 @@ public static void main(String[] args) {
 	column1.pack();
 	column2.pack();
 	
-	Heartbeat = new Runnable() {
-		@Override
-		public void run() {
-			if (!Tracking || tree.isDisposed()) return;
-			Point cursor = display.getCursorLocation();
-			cursor = display.map(null, tree, cursor);
-			Scroll(tree, cursor.x, cursor.y);
-			display.timerExec(ScrollSpeed, Heartbeat);
-		}
+	Heartbeat = () -> {
+		if (!Tracking || tree.isDisposed()) return;
+		Point cursor = display.getCursorLocation();
+		cursor = display.map(null, tree, cursor);
+		Scroll(tree, cursor.x, cursor.y);
+		display.timerExec(ScrollSpeed, Heartbeat);
 	};
 	Listener listener = new Listener() {
 		@Override
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet60.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet60.java
index 64d766b..a02a200 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet60.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet60.java
@@ -25,18 +25,8 @@ public static void main (String [] args) {
 	Shell shell = new Shell (display);
 	shell.setSize (200, 200);
 	shell.open ();
-	display.timerExec (5000, new Runnable () {
-		@Override
-		public void run () {
-			System.out.println ("5000");
-		}
-	});
-	display.timerExec (2000, new Runnable () {
-		@Override
-		public void run () {
-			System.out.println ("2000");
-		}
-	});
+	display.timerExec (5000, () -> System.out.println ("5000"));
+	display.timerExec (2000, () -> System.out.println ("2000"));
 	while (!shell.isDisposed ()) {
 		if (!display.readAndDispatch ()) display.sleep ();
 	}
commit 6f85200655d0d84b24fd6a5b181f0292638ef94a
Author: Alexander Kurtakov <akurtako@redhat.com>
Date:   Fri Jan 15 10:26:03 2016 +0200

    Bug 485821 - Make examples/snippets use lambdas
    
    Convert examples Listener cases.
    
    Change-Id: I472cc59015a95e108dd273db0f1f635395a9dda0
    Signed-off-by: Alexander Kurtakov <akurtako@redhat.com>

13	20	examples/org.eclipse.swt.examples.browser.demos/src/org/eclipse/swt/examples/browser/demos/views/EditorTab.java
6	11	examples/org.eclipse.swt.examples.browser.demos/src/org/eclipse/swt/examples/browser/demos/views/PawnTab.java
11	19	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/CTable.java
12	29	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/browserexample/BrowserExample.java
55	75	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/clipboard/ClipboardExample.java
3	15	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/BrowserTab.java
2	9	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CTabFolderTab.java
2	9	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CoolBarTab.java
2	9	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ShellTab.java
19	47	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/Tab.java
22	30	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/AdvancedGraphics.java
13	17	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/AnimatedGraphicsTab.java
11	20	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/CountDownTab.java
9	19	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/CustomAlphaTab.java
4	19	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/CustomFontTab.java
29	46	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/GradientDialog.java
22	33	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/GradientTab.java
9	19	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/GraphicAntialiasTab.java
53	76	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/GraphicsExample.java
7	39	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/ImageTransformTab.java
2	9	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/InterpolationTab.java
8	13	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/LineCapTab.java
9	19	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/LineJoinTab.java
9	19	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/LineStyleTab.java
5	10	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/MazeTab.java
8	13	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/PathClippingAnimTab.java
9	19	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/PathClippingTab.java
4	19	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/PathTab.java
16	29	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/RegionClippingTab.java
2	7	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/SpiralTab.java
2	9	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/StarPolyTab.java
9	22	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/TextAntialiasTab.java
12	15	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/paint/PaintExample.java
19	55	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/texteditor/TextEditor.java
diff --git a/examples/org.eclipse.swt.examples.browser.demos/src/org/eclipse/swt/examples/browser/demos/views/EditorTab.java b/examples/org.eclipse.swt.examples.browser.demos/src/org/eclipse/swt/examples/browser/demos/views/EditorTab.java
index ff47fce..dc6996f 100644
--- a/examples/org.eclipse.swt.examples.browser.demos/src/org/eclipse/swt/examples/browser/demos/views/EditorTab.java
+++ b/examples/org.eclipse.swt.examples.browser.demos/src/org/eclipse/swt/examples/browser/demos/views/EditorTab.java
@@ -22,7 +22,6 @@ import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.Button;
 import org.eclipse.swt.widgets.Composite;
-import org.eclipse.swt.widgets.Event;
 import org.eclipse.swt.widgets.Group;
 import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.Sash;
@@ -86,18 +85,15 @@ public class EditorTab {
 		sashData.top = new FormAttachment(0, 0);
 		sashData.bottom = new FormAttachment(100, 0);
 		sash.setLayoutData(sashData);
-		sash.addListener(SWT.Selection, new Listener() {
-			@Override
-			public void handleEvent(Event e) {
-				Rectangle rect = sash.getBounds();
-				Rectangle parentRect = sash.getParent().getClientArea();
-				int right = parentRect.width - rect.width - 20;
-				e.x = Math.max(Math.min(e.x, right), 20);
-				if (e.x != rect.x) {
-					sashData.left = new FormAttachment(0, e.x);
-					parent.layout();
-				}
-			}			
+		sash.addListener(SWT.Selection, e -> {
+			Rectangle rect = sash.getBounds();
+			Rectangle parentRect = sash.getParent().getClientArea();
+			int right = parentRect.width - rect.width - 20;
+			e.x = Math.max(Math.min(e.x, right), 20);
+			if (e.x != rect.x) {
+				sashData.left = new FormAttachment(0, e.x);
+				parent.layout();
+			}
 		});
 		data = new FormData();
 		data.left = new FormAttachment(sash, 0);
@@ -149,13 +145,10 @@ public class EditorTab {
 		scriptText.setText(script);
 		parent.layout();
 		
-		Listener listener = new Listener() {
-			@Override
-			public void handleEvent(Event e) {
-				Widget w = e.widget;
-				if (w == htmlButton) browser.setText(htmlText.getText());
-				if (w == scriptButton) browser.execute(scriptText.getText());
-			}
+		Listener listener = e -> {
+			Widget w = e.widget;
+			if (w == htmlButton) browser.setText(htmlText.getText());
+			if (w == scriptButton) browser.execute(scriptText.getText());
 		};
 		
 		htmlButton.addListener(SWT.Selection, listener);
diff --git a/examples/org.eclipse.swt.examples.browser.demos/src/org/eclipse/swt/examples/browser/demos/views/PawnTab.java b/examples/org.eclipse.swt.examples.browser.demos/src/org/eclipse/swt/examples/browser/demos/views/PawnTab.java
index 8ad7c91..4914044 100644
--- a/examples/org.eclipse.swt.examples.browser.demos/src/org/eclipse/swt/examples/browser/demos/views/PawnTab.java
+++ b/examples/org.eclipse.swt.examples.browser.demos/src/org/eclipse/swt/examples/browser/demos/views/PawnTab.java
@@ -19,8 +19,6 @@ import org.eclipse.swt.browser.LocationListener;
 import org.eclipse.swt.examples.browser.demos.BrowserDemoPlugin;
 import org.eclipse.swt.examples.browser.demos.Pawns;
 import org.eclipse.swt.widgets.Display;
-import org.eclipse.swt.widgets.Event;
-import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.Menu;
 import org.eclipse.swt.widgets.MenuItem;
 import org.eclipse.swt.widgets.TabItem;
@@ -77,15 +75,12 @@ public class PawnTab {
 		menu = new Menu(browser.getShell(), SWT.POP_UP);
 		MenuItem item2 = new MenuItem(menu, SWT.PUSH);
 		item2.setText("End Game");
-		item2.addListener(SWT.Selection, new Listener() {
-			@Override
-			public void handleEvent(Event e) {
-				game = null;
-				isWhite = true;
-				cntWhite = 0; cntBlack = 0;
-				ttr = null;
-				browser.setUrl(URL_WELCOME);
-			}
+		item2.addListener(SWT.Selection, e -> {
+			game = null;
+			isWhite = true;
+			cntWhite = 0; cntBlack = 0;
+			ttr = null;
+			browser.setUrl(URL_WELCOME);
 		});
 		browser.setMenu(menu);
 		
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/CTable.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/CTable.java
index 43c7f4b..1c9de87 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/CTable.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/CTable.java
@@ -193,12 +193,7 @@ public CTable (Composite parent, int style) {
 	arrowBounds = getArrowDownImage ().getBounds ();
 	clientArea = getClientArea ();
 	
-	Listener listener = new Listener () {
-		@Override
-		public void handleEvent (Event event) {
-			handleEvents (event);
-		}
-	};
+	Listener listener = event -> handleEvents (event);
 	addListener (SWT.Paint, listener);
 	addListener (SWT.MouseDown, listener);
 	addListener (SWT.MouseUp, listener);
@@ -224,19 +219,16 @@ public CTable (Composite parent, int style) {
 	header.addListener (SWT.MouseExit, listener);
 	header.addListener (SWT.MenuDetect, listener);
 
-	toolTipListener = new Listener () {
-		@Override
-		public void handleEvent (Event event) {
-			switch (event.type) {
-				case SWT.MouseHover:
-				case SWT.MouseMove:
-					if (headerUpdateToolTip (event.x)) break;
-					// FALL THROUGH
-				case SWT.MouseExit:
-				case SWT.MouseDown:
-					headerHideToolTip ();
-					break;
-			}
+	toolTipListener = event -> {
+		switch (event.type) {
+			case SWT.MouseHover:
+			case SWT.MouseMove:
+				if (headerUpdateToolTip (event.x)) break;
+				// FALL THROUGH
+			case SWT.MouseExit:
+			case SWT.MouseDown:
+				headerHideToolTip ();
+				break;
 		}
 	};
 
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/browserexample/BrowserExample.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/browserexample/BrowserExample.java
index b6939c9..252740b 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/browserexample/BrowserExample.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/browserexample/BrowserExample.java
@@ -42,7 +42,6 @@ import org.eclipse.swt.widgets.Canvas;
 import org.eclipse.swt.widgets.Composite;
 import org.eclipse.swt.widgets.Control;
 import org.eclipse.swt.widgets.Display;
-import org.eclipse.swt.widgets.Event;
 import org.eclipse.swt.widgets.Label;
 import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.ProgressBar;
@@ -184,16 +183,13 @@ public class BrowserExample {
 			
 			itemBack.setEnabled(browser.isBackEnabled());
 			itemForward.setEnabled(browser.isForwardEnabled());
-			Listener listener = new Listener() {
-				@Override
-				public void handleEvent(Event event) {
-					ToolItem item = (ToolItem)event.widget;
-					if (item == itemBack) browser.back(); 
-					else if (item == itemForward) browser.forward();
-					else if (item == itemStop) browser.stop();
-					else if (item == itemRefresh) browser.refresh();
-					else if (item == itemGo) browser.setUrl(locationBar.getText());
-				}
+			Listener listener = event -> {
+				ToolItem item = (ToolItem)event.widget;
+				if (item == itemBack) browser.back(); 
+				else if (item == itemForward) browser.forward();
+				else if (item == itemStop) browser.stop();
+				else if (item == itemRefresh) browser.refresh();
+				else if (item == itemGo) browser.setUrl(locationBar.getText());
 			};
 			itemBack.addListener(SWT.Selection, listener);
 			itemForward.addListener(SWT.Selection, listener);
@@ -210,19 +206,11 @@ public class BrowserExample {
 			canvas.setLayoutData(data);
 			
 			final Rectangle rect = images[0].getBounds();
-			canvas.addListener(SWT.Paint, new Listener() {
-				@Override
-				public void handleEvent(Event e) {
-					Point pt = ((Canvas)e.widget).getSize();
-					e.gc.drawImage(images[index], 0, 0, rect.width, rect.height, 0, 0, pt.x, pt.y);			
-				}
-			});
-			canvas.addListener(SWT.MouseDown, new Listener() {
-				@Override
-				public void handleEvent(Event e) {
-					browser.setUrl(getResourceString("Startup"));
-				}
+			canvas.addListener(SWT.Paint, e -> {
+				Point pt = ((Canvas)e.widget).getSize();
+				e.gc.drawImage(images[index], 0, 0, rect.width, rect.height, 0, 0, pt.x, pt.y);			
 			});
+			canvas.addListener(SWT.MouseDown, e -> browser.setUrl(getResourceString("Startup")));
 			
 			final Display display = parent.getDisplay();
 			display.asyncExec(new Runnable() {
@@ -251,12 +239,7 @@ public class BrowserExample {
 				data.right = new FormAttachment(100, 0);			
 			}
 			locationBar.setLayoutData(data);
-			locationBar.addListener(SWT.DefaultSelection, new Listener() {
-				@Override
-				public void handleEvent(Event e) {
-					browser.setUrl(locationBar.getText());
-				}
-			});
+			locationBar.addListener(SWT.DefaultSelection, e -> browser.setUrl(locationBar.getText()));
 		}
 		if (statusBar) {
 			status = new Label(parent, SWT.NONE);
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/clipboard/ClipboardExample.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/clipboard/ClipboardExample.java
index 37ce175..414d353 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/clipboard/ClipboardExample.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/clipboard/ClipboardExample.java
@@ -36,12 +36,10 @@ import org.eclipse.swt.widgets.Combo;
 import org.eclipse.swt.widgets.Composite;
 import org.eclipse.swt.widgets.DirectoryDialog;
 import org.eclipse.swt.widgets.Display;
-import org.eclipse.swt.widgets.Event;
 import org.eclipse.swt.widgets.FileDialog;
 import org.eclipse.swt.widgets.Group;
 import org.eclipse.swt.widgets.Label;
 import org.eclipse.swt.widgets.List;
-import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.ScrollBar;
 import org.eclipse.swt.widgets.Shell;
 import org.eclipse.swt.widgets.Table;
@@ -401,50 +399,41 @@ void createImageTransfer(Composite copyParent, Composite pasteParent){
 	final Point copyOrigin = new Point(0, 0);
 	final ScrollBar copyHBar = copyImageCanvas.getHorizontalBar();
 	copyHBar.setEnabled(false);	
-	copyHBar.addListener(SWT.Selection, new Listener() {
-		@Override
-		public void handleEvent(Event e) {
-			if (copyImage[0] != null) {
-				int hSelection = copyHBar.getSelection();
-				int destX = -hSelection - copyOrigin.x;
-				Rectangle rect = copyImage[0].getBounds();
-				copyImageCanvas.scroll(destX, 0, 0, 0, rect.width, rect.height, false);
-				copyOrigin.x = -hSelection;
-			}
+	copyHBar.addListener(SWT.Selection, e -> {
+		if (copyImage[0] != null) {
+			int hSelection = copyHBar.getSelection();
+			int destX = -hSelection - copyOrigin.x;
+			Rectangle rect = copyImage[0].getBounds();
+			copyImageCanvas.scroll(destX, 0, 0, 0, rect.width, rect.height, false);
+			copyOrigin.x = -hSelection;
 		}
 	});
 	final ScrollBar copyVBar = copyImageCanvas.getVerticalBar();
 	copyVBar.setEnabled(false);
-	copyVBar.addListener(SWT.Selection, new Listener() {
-		@Override
-		public void handleEvent (Event e) {
-			if (copyImage[0] != null) {
-				int vSelection = copyVBar.getSelection();
-				int destY = -vSelection - copyOrigin.y;
-				Rectangle rect = copyImage[0].getBounds();
-				copyImageCanvas.scroll(0, destY, 0, 0, rect.width, rect.height, false);
-				copyOrigin.y = -vSelection;
-			}
+	copyVBar.addListener(SWT.Selection, e -> {
+		if (copyImage[0] != null) {
+			int vSelection = copyVBar.getSelection();
+			int destY = -vSelection - copyOrigin.y;
+			Rectangle rect = copyImage[0].getBounds();
+			copyImageCanvas.scroll(0, destY, 0, 0, rect.width, rect.height, false);
+			copyOrigin.y = -vSelection;
 		}
 	});
-	copyImageCanvas.addListener(SWT.Paint, new Listener() {
-		@Override
-		public void handleEvent(Event e) {
-			if(copyImage[0] != null) {
-				GC gc = e.gc;
-				gc.drawImage(copyImage[0], copyOrigin.x, copyOrigin.y);
-				Rectangle rect = copyImage[0].getBounds();
-				Rectangle client = copyImageCanvas.getClientArea ();
-				int marginWidth = client.width - rect.width;
-				if (marginWidth > 0) {
-					gc.fillRectangle (rect.width, 0, marginWidth, client.height);
-				}
-				int marginHeight = client.height - rect.height;
-				if (marginHeight > 0) {
-					gc.fillRectangle(0, rect.height, client.width, marginHeight);
-				}
-				gc.dispose();
+	copyImageCanvas.addListener(SWT.Paint, e -> {
+		if(copyImage[0] != null) {
+			GC gc = e.gc;
+			gc.drawImage(copyImage[0], copyOrigin.x, copyOrigin.y);
+			Rectangle rect = copyImage[0].getBounds();
+			Rectangle client = copyImageCanvas.getClientArea ();
+			int marginWidth = client.width - rect.width;
+			if (marginWidth > 0) {
+				gc.fillRectangle (rect.width, 0, marginWidth, client.height);
 			}
+			int marginHeight = client.height - rect.height;
+			if (marginHeight > 0) {
+				gc.fillRectangle(0, rect.height, client.width, marginHeight);
+			}
+			gc.dispose();
 		}
 	});
 	Button openButton = new Button(copyParent, SWT.PUSH);
@@ -502,48 +491,39 @@ void createImageTransfer(Composite copyParent, Composite pasteParent){
 	final Point pasteOrigin = new Point(0, 0);
 	final ScrollBar pasteHBar = pasteImageCanvas.getHorizontalBar();
 	pasteHBar.setEnabled(false);	
-	pasteHBar.addListener(SWT.Selection, new Listener() {
-		@Override
-		public void handleEvent(Event e) {
-			if (pasteImage[0] != null) {
-				int hSelection = pasteHBar.getSelection();
-				int destX = -hSelection - pasteOrigin.x;
-				Rectangle rect = pasteImage[0].getBounds();
-				pasteImageCanvas.scroll(destX, 0, 0, 0, rect.width, rect.height, false);
-				pasteOrigin.x = -hSelection;
-			}
+	pasteHBar.addListener(SWT.Selection, e -> {
+		if (pasteImage[0] != null) {
+			int hSelection = pasteHBar.getSelection();
+			int destX = -hSelection - pasteOrigin.x;
+			Rectangle rect = pasteImage[0].getBounds();
+			pasteImageCanvas.scroll(destX, 0, 0, 0, rect.width, rect.height, false);
+			pasteOrigin.x = -hSelection;
 		}
 	});
 	final ScrollBar pasteVBar = pasteImageCanvas.getVerticalBar();
 	pasteVBar.setEnabled(false);
-	pasteVBar.addListener(SWT.Selection, new Listener() {
-		@Override
-		public void handleEvent(Event e) {
-			if (pasteImage[0] != null) {
-				int vSelection = pasteVBar.getSelection();
-				int destY = -vSelection - pasteOrigin.y;
-				Rectangle rect = pasteImage[0].getBounds();
-				pasteImageCanvas.scroll(0, destY, 0, 0, rect.width, rect.height, false);
-				pasteOrigin.y = -vSelection;
-			}
+	pasteVBar.addListener(SWT.Selection, e -> {
+		if (pasteImage[0] != null) {
+			int vSelection = pasteVBar.getSelection();
+			int destY = -vSelection - pasteOrigin.y;
+			Rectangle rect = pasteImage[0].getBounds();
+			pasteImageCanvas.scroll(0, destY, 0, 0, rect.width, rect.height, false);
+			pasteOrigin.y = -vSelection;
 		}
 	});
-	pasteImageCanvas.addListener(SWT.Paint, new Listener() {
-		@Override
-		public void handleEvent(Event e) {
-			if(pasteImage[0] != null) {
-				GC gc = e.gc;
-				gc.drawImage(pasteImage[0], pasteOrigin.x, pasteOrigin.y);
-				Rectangle rect = pasteImage[0].getBounds();
-				Rectangle client = pasteImageCanvas.getClientArea ();
-				int marginWidth = client.width - rect.width;
-				if (marginWidth > 0) {
-					gc.fillRectangle(rect.width, 0, marginWidth, client.height);
-				}
-				int marginHeight = client.height - rect.height;
-				if (marginHeight > 0) {
-					gc.fillRectangle(0, rect.height, client.width, marginHeight);
-				}
+	pasteImageCanvas.addListener(SWT.Paint, e -> {
+		if(pasteImage[0] != null) {
+			GC gc = e.gc;
+			gc.drawImage(pasteImage[0], pasteOrigin.x, pasteOrigin.y);
+			Rectangle rect = pasteImage[0].getBounds();
+			Rectangle client = pasteImageCanvas.getClientArea ();
+			int marginWidth = client.width - rect.width;
+			if (marginWidth > 0) {
+				gc.fillRectangle(rect.width, 0, marginWidth, client.height);
+			}
+			int marginHeight = client.height - rect.height;
+			if (marginHeight > 0) {
+				gc.fillRectangle(0, rect.height, client.width, marginHeight);
 			}
 		}
 	});
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/BrowserTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/BrowserTab.java
index 578576a..ac729b7 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/BrowserTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/BrowserTab.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2012 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -41,9 +41,7 @@ import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.Button;
 import org.eclipse.swt.widgets.Composite;
-import org.eclipse.swt.widgets.Event;
 import org.eclipse.swt.widgets.Group;
-import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.MessageBox;
 import org.eclipse.swt.widgets.TabFolder;
 import org.eclipse.swt.widgets.Widget;
@@ -179,20 +177,10 @@ class BrowserTab extends Tab {
 		/* Create the extra widgets */
 		mozillaButton = new Button (styleGroup, SWT.CHECK);
 		mozillaButton.setText ("SWT.MOZILLA");
-		mozillaButton.addListener(SWT.Selection, new Listener() {
-			@Override
-			public void handleEvent(Event event) {
-				webKitButton.setSelection(false);
-			}
-		});
+		mozillaButton.addListener(SWT.Selection, event -> webKitButton.setSelection(false));
 		webKitButton = new Button (styleGroup, SWT.CHECK);
 		webKitButton.setText ("SWT.WEBKIT");
-		webKitButton.addListener(SWT.Selection, new Listener() {
-			@Override
-			public void handleEvent(Event event) {
-				mozillaButton.setSelection(false);
-			}
-		});
+		webKitButton.addListener(SWT.Selection, event -> mozillaButton.setSelection(false));
 		borderButton = new Button (styleGroup, SWT.CHECK);
 		borderButton.setText ("SWT.BORDER");
 	}
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CTabFolderTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CTabFolderTab.java
index c4c15d7..1873699 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CTabFolderTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CTabFolderTab.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2012 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -28,10 +28,8 @@ import org.eclipse.swt.graphics.RGB;
 import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.Button;
-import org.eclipse.swt.widgets.Event;
 import org.eclipse.swt.widgets.Group;
 import org.eclipse.swt.widgets.Item;
-import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.TableItem;
 import org.eclipse.swt.widgets.Text;
 import org.eclipse.swt.widgets.ToolBar;
@@ -269,12 +267,7 @@ class CTabFolderTab extends Tab {
 			text.setText(ControlExample.getResourceString("CTabItem_content") + ": " + i);
 			item.setControl(text);
 		}
-		tabFolder1.addListener(SWT.Selection, new Listener() {
-			@Override
-			public void handleEvent(Event event) {
-				lastSelectedTab = tabFolder1.getSelectionIndex();
-			}
-		});
+		tabFolder1.addListener(SWT.Selection, event -> lastSelectedTab = tabFolder1.getSelectionIndex());
 		
 		/* If we have saved state, restore it */
 		tabFolder1.setSelection(lastSelectedTab);
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CoolBarTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CoolBarTab.java
index 5d87e29..bde6ee7 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CoolBarTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CoolBarTab.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -25,10 +25,8 @@ import org.eclipse.swt.widgets.Button;
 import org.eclipse.swt.widgets.Control;
 import org.eclipse.swt.widgets.CoolBar;
 import org.eclipse.swt.widgets.CoolItem;
-import org.eclipse.swt.widgets.Event;
 import org.eclipse.swt.widgets.Group;
 import org.eclipse.swt.widgets.Item;
-import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.Menu;
 import org.eclipse.swt.widgets.MenuItem;
 import org.eclipse.swt.widgets.Text;
@@ -231,12 +229,7 @@ class CoolBarTab extends Tab {
 		}
 		
 		/* Add a listener to resize the group box to match the coolbar */
-		coolBar.addListener(SWT.Resize, new Listener() {
-			@Override
-			public void handleEvent(Event event) {
-				exampleGroup.layout();
-			}
-		});
+		coolBar.addListener(SWT.Resize, event -> exampleGroup.layout());
 	}
 	
 	/**
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ShellTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ShellTab.java
index bccee6a..866abfd 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ShellTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ShellTab.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2015 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -18,10 +18,8 @@ import org.eclipse.swt.events.SelectionListener;
 import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.Button;
-import org.eclipse.swt.widgets.Event;
 import org.eclipse.swt.widgets.Group;
 import org.eclipse.swt.widgets.Label;
-import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.Shell;
 import org.eclipse.swt.widgets.Widget;
 
@@ -113,12 +111,7 @@ class ShellTab extends Tab {
 		Button close = new Button(currentShell, SWT.PUSH);
 		close.setBounds(160, 20, 120, 30);
 		close.setText(ControlExample.getResourceString("Close"));
-		close.addListener(SWT.Selection, new Listener() {
-			@Override
-			public void handleEvent(Event event) {
-				currentShell.dispose();
-			}
-		});
+		close.addListener(SWT.Selection, event1 -> currentShell.dispose());
 	
 		/* Set the size, title, and image, and open the shell */
 		currentShell.setSize (300, 100);
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/Tab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/Tab.java
index 93e91ce..db83f4d 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/Tab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/Tab.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2014 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -798,37 +798,17 @@ abstract class Tab {
 
 		MenuItem cut = new MenuItem (popup, SWT.PUSH);
 		cut.setText (ControlExample.getResourceString("MenuItem_Cut"));
-		cut.addListener (SWT.Selection, new Listener () {
-			@Override
-			public void handleEvent (Event event) {
-				eventConsole.cut ();
-			}
-		});
+		cut.addListener (SWT.Selection, event -> eventConsole.cut ());
 		MenuItem copy = new MenuItem (popup, SWT.PUSH);
 		copy.setText (ControlExample.getResourceString("MenuItem_Copy"));
-		copy.addListener (SWT.Selection, new Listener () {
-			@Override
-			public void handleEvent (Event event) {
-				eventConsole.copy ();
-			}
-		});
+		copy.addListener (SWT.Selection, event -> eventConsole.copy ());
 		MenuItem paste = new MenuItem (popup, SWT.PUSH);
 		paste.setText (ControlExample.getResourceString("MenuItem_Paste"));
-		paste.addListener (SWT.Selection, new Listener () {
-			@Override
-			public void handleEvent (Event event) {
-				eventConsole.paste ();
-			}
-		});
+		paste.addListener (SWT.Selection, event -> eventConsole.paste ());
 		new MenuItem (popup, SWT.SEPARATOR);
 		MenuItem selectAll = new MenuItem (popup, SWT.PUSH);
 		selectAll.setText(ControlExample.getResourceString("MenuItem_SelectAll"));
-		selectAll.addListener (SWT.Selection, new Listener () {
-			@Override
-			public void handleEvent (Event event) {
-				eventConsole.selectAll ();
-			}
-		});
+		selectAll.addListener (SWT.Selection, event -> eventConsole.selectAll ());
 	}
 
 	/**
@@ -1383,22 +1363,19 @@ abstract class Tab {
 	void setExampleWidgetPopupMenu() {
 		Control[] controls = getExampleControls();
 		for (final Control control : controls) {
-			control.addListener(SWT.MenuDetect, new Listener() {
-				@Override
-				public void handleEvent(Event event) {
-		        	Menu menu = control.getMenu();
-		        	if (menu != null && samplePopup) {
-		        		menu.dispose();
-		        		menu = null;
-		        	}
-		        	if (menu == null && popupMenuButton.getSelection()) {
-		        		menu = new Menu(shell, SWT.POP_UP | (control.getStyle() & (SWT.RIGHT_TO_LEFT | SWT.LEFT_TO_RIGHT)));
-			        	MenuItem item = new MenuItem(menu, SWT.PUSH);
-			        	item.setText("Sample popup menu item");
-			        	specialPopupMenuItems(menu, event);
-			        	control.setMenu(menu);
-		        		samplePopup = true;
-		        	}
+			control.addListener(SWT.MenuDetect, event -> {
+				Menu menu = control.getMenu();
+				if (menu != null && samplePopup) {
+					menu.dispose();
+					menu = null;
+				}
+				if (menu == null && popupMenuButton.getSelection()) {
+					menu = new Menu(shell, SWT.POP_UP | (control.getStyle() & (SWT.RIGHT_TO_LEFT | SWT.LEFT_TO_RIGHT)));
+			    	MenuItem item = new MenuItem(menu, SWT.PUSH);
+			    	item.setText("Sample popup menu item");
+			    	specialPopupMenuItems(menu, event);
+			    	control.setMenu(menu);
+					samplePopup = true;
 				}
 			});
 		}
@@ -1593,12 +1570,7 @@ abstract class Tab {
 	 */
 	void hookListeners (Widget widget) {
 		if (logging) {
-			Listener listener = new Listener() {
-				@Override
-				public void handleEvent (Event event) {
-					log (event);
-				}
-			};
+			Listener listener = event -> log (event);
 			for (int i = 0; i < EVENT_INFO.length; i++) {
 				if (eventsFilter [i]) {
 					widget.addListener (EVENT_INFO[i].type, listener);
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/AdvancedGraphics.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/AdvancedGraphics.java
index f20d329..f63bfbb 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/AdvancedGraphics.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/AdvancedGraphics.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2006 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -31,8 +31,6 @@ import org.eclipse.swt.graphics.Path;
 import org.eclipse.swt.graphics.Rectangle;
 import org.eclipse.swt.graphics.Transform;
 import org.eclipse.swt.widgets.Display;
-import org.eclipse.swt.widgets.Event;
-import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.MessageBox;
 import org.eclipse.swt.widgets.Shell;
 
@@ -73,36 +71,30 @@ public class AdvancedGraphics {
 		final Font font = new Font(display, fd.getName(), 96, SWT.BOLD | SWT.ITALIC);
 		final Image image = loadImage(display, AdvancedGraphics.class, "irmaos.jpg");
 		final Rectangle rect = image.getBounds();
-		shell.addListener(SWT.Paint, new Listener() {
-			@Override
-			public void handleEvent(Event event) {
-				GC gc = event.gc;				
-				Transform tr = new Transform(display);
-				tr.translate(rect.width / 4, rect.height / 2);
-				tr.rotate(-30);
-				if (image != null) {
-					gc.drawImage(image, 0, 0, rect.width, rect.height, 0, 0, rect.width, rect.height);
-				}
-				gc.setAlpha(100);
-				gc.setTransform(tr);
-				Path path = new Path(display);
-				path.addString("SWT", 0, 0, font);
-				gc.setBackground(display.getSystemColor(SWT.COLOR_GREEN));
-				gc.setForeground(display.getSystemColor(SWT.COLOR_BLUE));
-				gc.fillPath(path);
-				gc.drawPath(path);
-				tr.dispose();
-				path.dispose();
-			}			
+		shell.addListener(SWT.Paint, event -> {
+			GC gc = event.gc;				
+			Transform tr = new Transform(display);
+			tr.translate(rect.width / 4, rect.height / 2);
+			tr.rotate(-30);
+			if (image != null) {
+				gc.drawImage(image, 0, 0, rect.width, rect.height, 0, 0, rect.width, rect.height);
+			}
+			gc.setAlpha(100);
+			gc.setTransform(tr);
+			Path path = new Path(display);
+			path.addString("SWT", 0, 0, font);
+			gc.setBackground(display.getSystemColor(SWT.COLOR_GREEN));
+			gc.setForeground(display.getSystemColor(SWT.COLOR_BLUE));
+			gc.fillPath(path);
+			gc.drawPath(path);
+			tr.dispose();
+			path.dispose();
 		});
 		shell.setSize(shell.computeSize(rect.width, rect.height));
 		shell.open();
-		shell.addListener(SWT.Dispose, new Listener() {
-			@Override
-			public void handleEvent(Event event) {
-				if (image != null) image.dispose();
-				font.dispose();
-			}
+		shell.addListener(SWT.Dispose, event -> {
+			if (image != null) image.dispose();
+			font.dispose();
 		});	
 		return shell;
 	}
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/AnimatedGraphicsTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/AnimatedGraphicsTab.java
index 7746efa..00b0469 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/AnimatedGraphicsTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/AnimatedGraphicsTab.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2006 IBM Corporation and others.
+ * Copyright (c) 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -16,7 +16,6 @@ import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.layout.RowLayout;
 import org.eclipse.swt.widgets.Composite;
 import org.eclipse.swt.widgets.Display;
-import org.eclipse.swt.widgets.Event;
 import org.eclipse.swt.widgets.Label;
 import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.Spinner;
@@ -64,23 +63,20 @@ public abstract class AnimatedGraphicsTab extends GraphicsTab {
 		final Display display = parent.getDisplay();
 				
 		toolBar = new ToolBar(parent, SWT.FLAT);
-		Listener toolBarListener = new Listener() {
-			@Override
-			public void handleEvent(Event event) {
-				switch (event.type) {
-					case SWT.Selection: {
-						if (event.widget == playItem) {
-							animate = true;
-							playItem.setEnabled(!animate);
-							pauseItem.setEnabled(animate);
-						} else if (event.widget == pauseItem) {
-							animate = false;
-							playItem.setEnabled(!animate);
-							pauseItem.setEnabled(animate);
-						}
+		Listener toolBarListener = event -> {
+			switch (event.type) {
+				case SWT.Selection: {
+					if (event.widget == playItem) {
+						animate = true;
+						playItem.setEnabled(!animate);
+						pauseItem.setEnabled(animate);
+					} else if (event.widget == pauseItem) {
+						animate = false;
+						playItem.setEnabled(!animate);
+						pauseItem.setEnabled(animate);
 					}
-					break;
 				}
+				break;
 			}
 		};
 		
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/CountDownTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/CountDownTab.java
index 02f387d..c2bdd3b 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/CountDownTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/CountDownTab.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2006 IBM Corporation and others.
+ * Copyright (c) 2006, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -68,12 +68,9 @@ public class CountDownTab extends AnimatedGraphicsTab {
 
 		// add selection listener to reset nextNumber after
 		// the sequence has completed
-		playItem.addListener(SWT.Selection, new Listener() {
-			@Override
-			public void handleEvent(Event event) {
-				if (nextNumber < 1)
-					nextNumber = startNumber;
-			}
+		playItem.addListener(SWT.Selection, event -> {
+			if (nextNumber < 1)
+				nextNumber = startNumber;
 		});
 
 		Composite comp;
@@ -88,12 +85,9 @@ public class CountDownTab extends AnimatedGraphicsTab {
 		lineWidthSpinner.setSelection(20);
 		lineWidthSpinner.setMinimum(1);
 		lineWidthSpinner.setMaximum(100);
-		lineWidthSpinner.addListener(SWT.Selection, new Listener() {
-			@Override
-			public void handleEvent(Event event) {
-				if (!pauseItem.isEnabled()) {
-					example.redraw();
-				}
+		lineWidthSpinner.addListener(SWT.Selection, event -> {
+			if (!pauseItem.isEnabled()) {
+				example.redraw();
 			}
 		});
 
@@ -108,13 +102,10 @@ public class CountDownTab extends AnimatedGraphicsTab {
 		aliasCombo.add("ON");
 		aliasCombo.select(0);
 		antialias = aliasValues[0];
-		aliasCombo.addListener(SWT.Selection, new Listener() {
-			@Override
-			public void handleEvent(Event event) {
-				antialias = aliasValues[aliasCombo.getSelectionIndex()];
-				if (!pauseItem.isEnabled()) {
-					example.redraw();
-				}
+		aliasCombo.addListener(SWT.Selection, event -> {
+			antialias = aliasValues[aliasCombo.getSelectionIndex()];
+			if (!pauseItem.isEnabled()) {
+				example.redraw();
 			}
 		});
 
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/CustomAlphaTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/CustomAlphaTab.java
index d0cca25..c93f50e 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/CustomAlphaTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/CustomAlphaTab.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2006 IBM Corporation and others.
+ * Copyright (c) 2006, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -22,9 +22,7 @@ import org.eclipse.swt.graphics.Transform;
 import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.Button;
 import org.eclipse.swt.widgets.Composite;
-import org.eclipse.swt.widgets.Event;
 import org.eclipse.swt.widgets.Label;
-import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.Menu;
 import org.eclipse.swt.widgets.Spinner;
 
@@ -86,12 +84,7 @@ public void createControlPanel(Composite parent) {
 	alphaSpinner.setMinimum(0);
 	alphaSpinner.setMaximum(255);
 	alphaSpinner.setSelection(127);
-	alphaSpinner.addListener(SWT.Selection, new Listener() {
-		@Override
-		public void handleEvent(Event event) {
-				example.redraw();
-		}
-	});
+	alphaSpinner.addListener(SWT.Selection, event -> example.redraw());
 	
 	// color menu
 	ColorMenu cm = new ColorMenu();
@@ -116,16 +109,13 @@ public void createControlPanel(Composite parent) {
 	colorButton.setText(GraphicsExample
 			.getResourceString("Color")); //$NON-NLS-1$
 	colorButton.setImage(background.getThumbNail());
-	colorButton.addListener(SWT.Selection, new Listener() { 
-		@Override
-		public void handleEvent(Event event) {
-			final Button button = (Button) event.widget;
-			final Composite parent = button.getParent(); 
-			Rectangle bounds = button.getBounds();
-			Point point = parent.toDisplay(new Point(bounds.x, bounds.y));
-			menu.setLocation(point.x, point.y + bounds.height);
-			menu.setVisible(true);
-		}
+	colorButton.addListener(SWT.Selection, event -> {
+		final Button button = (Button) event.widget;
+		final Composite parent1 = button.getParent(); 
+		Rectangle bounds = button.getBounds();
+		Point point = parent1.toDisplay(new Point(bounds.x, bounds.y));
+		menu.setLocation(point.x, point.y + bounds.height);
+		menu.setVisible(true);
 	});
 }
 
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/CustomFontTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/CustomFontTab.java
index 7fa47a2..e1df179 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/CustomFontTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/CustomFontTab.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2006 IBM Corporation and others.
+ * Copyright (c) 2006, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -115,12 +115,7 @@ public void createControlPanel(Composite parent) {
 		fontFaceCb.add(name);
 	}
 	fontFaceCb.select(0);
-	fontFaceCb.addListener(SWT.Selection, new Listener() {
-		@Override
-		public void handleEvent (Event event) {
-			example.redraw();
-		}
-	});
+	fontFaceCb.addListener(SWT.Selection, event -> example.redraw());
 	
 	// create combo for font style
 	comp = new Composite(mainComp, SWT.NONE);
@@ -132,12 +127,7 @@ public void createControlPanel(Composite parent) {
 		fontStyleCb.add(fontStyle);
 	}
 	fontStyleCb.select(0);
-	fontStyleCb.addListener(SWT.Selection, new Listener() {
-		@Override
-		public void handleEvent (Event event) {
-			example.redraw();
-		}
-	});
+	fontStyleCb.addListener(SWT.Selection, event -> example.redraw());
 	
 	// create spinner for font size (points)
 	comp = new Composite(mainComp, SWT.NONE);
@@ -148,12 +138,7 @@ public void createControlPanel(Composite parent) {
 	fontPointSpinner.setMinimum(1);
 	fontPointSpinner.setMaximum(1000);
 	fontPointSpinner.setSelection(200);
-	fontPointSpinner.addListener(SWT.Selection, new Listener() {
-		@Override
-		public void handleEvent(Event event) {
-				example.redraw();
-		}
-	});
+	fontPointSpinner.addListener(SWT.Selection, event -> example.redraw());
 
 	ColorMenu cm = new ColorMenu();
 	cm.setColorItems(true);
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/GradientDialog.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/GradientDialog.java
index e1ced08..c339151 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/GradientDialog.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/GradientDialog.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2006 IBM Corporation and others.
+ * Copyright (c) 2006, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -81,17 +81,14 @@ public class GradientDialog extends Dialog {
 	    // create the controls in the dialog
 	    createDialogControls(dialog);
 		
-		dialog.addListener(SWT.Close, new Listener() {
-			@Override
-			public void handleEvent(Event event) {
-				for (int i = 0; i < resources.size(); i++) {
-					Object obj = resources.get(i);
-					if (obj != null && obj instanceof Resource) {
-						((Resource) obj).dispose();
-					}
+		dialog.addListener(SWT.Close, event -> {
+			for (int i = 0; i < resources.size(); i++) {
+				Object obj = resources.get(i);
+				if (obj != null && obj instanceof Resource) {
+					((Resource) obj).dispose();
 				}
-				dialog.dispose();
 			}
+			dialog.dispose();
 		});	
 
 		dialog.setDefaultButton (okButton);
@@ -146,21 +143,18 @@ public class GradientDialog extends Dialog {
 		gridData.widthHint = 200;
 		gridData.heightHint = 100;
 		canvas.setLayoutData(gridData);
-		canvas.addListener (SWT.Paint, new Listener () {
-			@Override
-			public void handleEvent (Event e) {
-				Image preview = null;
-				Point size = canvas.getSize();
-				Color color1 = new Color(display, rgb1);
-				Color color2 = new Color(display, rgb2);
-				preview = GraphicsExample.createImage(display, color1, color2, size.x, size.y);
-				if (preview != null) {
-					e.gc.drawImage (preview, 0, 0);
-				}
-				preview.dispose();
-				color1.dispose();
-				color2.dispose();
+		canvas.addListener (SWT.Paint, e -> {
+			Image preview = null;
+			Point size = canvas.getSize();
+			Color color1 = new Color(display, rgb1);
+			Color color2 = new Color(display, rgb2);
+			preview = GraphicsExample.createImage(display, color1, color2, size.x, size.y);
+			if (preview != null) {
+				e.gc.drawImage (preview, 0, 0);
 			}
+			preview.dispose();
+			color1.dispose();
+			color2.dispose();
 		});
 		
 		// composite used for both color buttons
@@ -222,16 +216,13 @@ public class GradientDialog extends Dialog {
 				if (canvas != null) canvas.redraw();
 			}
 		});
-		colorButton2.addListener(SWT.Selection, new Listener() { 
-			@Override
-			public void handleEvent(Event event) {
-				final Button button = (Button) event.widget;
-				final Composite parent = button.getParent(); 
-				Rectangle bounds = button.getBounds();
-				Point point = parent.toDisplay(new Point(bounds.x, bounds.y));
-				menu2.setLocation(point.x, point.y + bounds.height);
-				menu2.setVisible(true);
-			}
+		colorButton2.addListener(SWT.Selection, event -> {
+			final Button button = (Button) event.widget;
+			final Composite parent1 = button.getParent(); 
+			Rectangle bounds = button.getBounds();
+			Point point = parent1.toDisplay(new Point(bounds.x, bounds.y));
+			menu2.setLocation(point.x, point.y + bounds.height);
+			menu2.setVisible(true);
 		});
 		
 		// composite used for ok and cancel buttons
@@ -251,23 +242,15 @@ public class GradientDialog extends Dialog {
 	    // OK button
 		okButton = new Button (okCancelComp, SWT.PUSH);
 		okButton.setText("&OK");
-		okButton.addListener(SWT.Selection, new Listener() {
-			@Override
-			public void handleEvent(Event event) {
-				returnVal = SWT.OK;
-				parent.close();
-			}
+		okButton.addListener(SWT.Selection, event -> {
+			returnVal = SWT.OK;
+			parent.close();
 		});
 		
 		// cancel button
 		cancelButton = new Button (okCancelComp, SWT.PUSH);
 		cancelButton.setText("&Cancel");
-		cancelButton.addListener(SWT.Selection, new Listener() {
-			@Override
-			public void handleEvent(Event event) {
-				parent.close();
-			}
-		});
+		cancelButton.addListener(SWT.Selection, event -> parent.close());
 	}
 	
 	/**
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/GradientTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/GradientTab.java
index 0e94253..e97298d 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/GradientTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/GradientTab.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2006 IBM Corporation and others.
+ * Copyright (c) 2006, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -22,8 +22,6 @@ import org.eclipse.swt.graphics.Point;
 import org.eclipse.swt.graphics.Rectangle;
 import org.eclipse.swt.widgets.Composite;
 import org.eclipse.swt.widgets.Display;
-import org.eclipse.swt.widgets.Event;
-import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.Menu;
 import org.eclipse.swt.widgets.ToolBar;
 import org.eclipse.swt.widgets.ToolItem;
@@ -101,16 +99,13 @@ public void createControlPanel(final Composite parent) {
 	colorItem1 = new ToolItem(toolBar, SWT.PUSH);
 	colorItem1.setText(GraphicsExample.getResourceString("GradientTabItem1"));
 	colorItem1.setImage(colorGB1.getThumbNail());
-	colorItem1.addListener(SWT.Selection, new Listener(){
-		@Override
-		public void handleEvent(Event event) {
-			final ToolItem toolItem = (ToolItem) event.widget;
-			final ToolBar  toolBar = toolItem.getParent();
-			Rectangle toolItemBounds = toolItem.getBounds();
-			Point point = toolBar.toDisplay(new Point(toolItemBounds.x, toolItemBounds.y));
-			menu1.setLocation(point.x, point.y + toolItemBounds.height);
-			menu1.setVisible(true);
-		}
+	colorItem1.addListener(SWT.Selection, event -> {
+		final ToolItem toolItem = (ToolItem) event.widget;
+		final ToolBar  toolBar = toolItem.getParent();
+		Rectangle toolItemBounds = toolItem.getBounds();
+		Point point = toolBar.toDisplay(new Point(toolItemBounds.x, toolItemBounds.y));
+		menu1.setLocation(point.x, point.y + toolItemBounds.height);
+		menu1.setVisible(true);
 	});
 	
 	// menu for colorItem2
@@ -130,32 +125,26 @@ public void createControlPanel(final Composite parent) {
 	colorItem2 = new ToolItem(toolBar, SWT.PUSH);
 	colorItem2.setText(GraphicsExample.getResourceString("GradientTabItem2"));
 	colorItem2.setImage(colorGB2.getThumbNail());
-	colorItem2.addListener(SWT.Selection, new Listener(){
-		@Override
-		public void handleEvent(Event event) {
-			final ToolItem toolItem = (ToolItem) event.widget;
-			final ToolBar  toolBar = toolItem.getParent();
-			Rectangle toolItemBounds = toolItem.getBounds();
-			Point point = toolBar.toDisplay(new Point(toolItemBounds.x, toolItemBounds.y));
-			menu2.setLocation(point.x, point.y + toolItemBounds.height);
-			menu2.setVisible(true);
-		}
+	colorItem2.addListener(SWT.Selection, event -> {
+		final ToolItem toolItem = (ToolItem) event.widget;
+		final ToolBar  toolBar = toolItem.getParent();
+		Rectangle toolItemBounds = toolItem.getBounds();
+		Point point = toolBar.toDisplay(new Point(toolItemBounds.x, toolItemBounds.y));
+		menu2.setLocation(point.x, point.y + toolItemBounds.height);
+		menu2.setVisible(true);
 	});
 	
 	// toolbar item for swapping colors
 	ToolItem swapItem = new ToolItem(toolBar, SWT.PUSH);
 	swapItem.setText(GraphicsExample.getResourceString("SwapColors")); //$NON-NLS-1$
 	swapItem.setImage(example.loadImage(display, "swap.gif"));
-	swapItem.addListener(SWT.Selection, new Listener(){
-		@Override
-		public void handleEvent(Event event) {
-			GraphicsBackground tmp = colorGB1;
-			colorGB1 = colorGB2;
-			colorGB2 = tmp;
-			colorItem1.setImage(colorGB1.getThumbNail());
-			colorItem2.setImage(colorGB2.getThumbNail());
-			example.redraw();
-		}
+	swapItem.addListener(SWT.Selection, event -> {
+		GraphicsBackground tmp = colorGB1;
+		colorGB1 = colorGB2;
+		colorGB2 = tmp;
+		colorItem1.setImage(colorGB1.getThumbNail());
+		colorItem2.setImage(colorGB2.getThumbNail());
+		example.redraw();
 	});
 }
 
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/GraphicAntialiasTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/GraphicAntialiasTab.java
index aedb820..e592eb5 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/GraphicAntialiasTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/GraphicAntialiasTab.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2006 IBM Corporation and others.
+ * Copyright (c) 2006, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -21,9 +21,7 @@ import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.Button;
 import org.eclipse.swt.widgets.Combo;
 import org.eclipse.swt.widgets.Composite;
-import org.eclipse.swt.widgets.Event;
 import org.eclipse.swt.widgets.Label;
-import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.Menu;
 
 /**
@@ -83,12 +81,7 @@ public void createControlPanel(Composite parent) {
 	aliasCombo.add("DEFAULT");
 	aliasCombo.add("ON");
 	aliasCombo.select(0);
-	aliasCombo.addListener(SWT.Selection, new Listener() {
-		@Override
-		public void handleEvent(Event event) {
-				example.redraw();
-		}
-	});
+	aliasCombo.addListener(SWT.Selection, event -> example.redraw());
 
 	ColorMenu cm = new ColorMenu();
 	cm.setColorItems(true);
@@ -112,16 +105,13 @@ public void createControlPanel(Composite parent) {
 	colorButton = new Button(comp, SWT.PUSH);
 	colorButton.setText(GraphicsExample.getResourceString("Color")); //$NON-NLS-1$
 	colorButton.setImage(ovalColorGB.getThumbNail());
-	colorButton.addListener(SWT.Selection, new Listener() { 
-		@Override
-		public void handleEvent(Event event) {
-			final Button button = (Button) event.widget;
-			final Composite parent = button.getParent(); 
-			Rectangle bounds = button.getBounds();
-			Point point = parent.toDisplay(new Point(bounds.x, bounds.y));
-			menu.setLocation(point.x, point.y + bounds.height);
-			menu.setVisible(true);
-		}
+	colorButton.addListener(SWT.Selection, event -> {
+		final Button button = (Button) event.widget;
+		final Composite parent1 = button.getParent(); 
+		Rectangle bounds = button.getBounds();
+		Point point = parent1.toDisplay(new Point(bounds.x, bounds.y));
+		menu.setLocation(point.x, point.y + bounds.height);
+		menu.setVisible(true);
 	});
 }
 
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/GraphicsExample.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/GraphicsExample.java
index 91499e0..088dc02 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/GraphicsExample.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/GraphicsExample.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2006 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -177,31 +177,25 @@ void createControls(final Composite parent) {
 	data.bottom = new FormAttachment(100, -MARGIN);
 	tabControlPanel.setLayoutData(data);
 	
-	vSash.addListener(SWT.Selection, new Listener() {
-		@Override
-		public void handleEvent(Event event) {
-			Rectangle rect = hSash.getParent().getClientArea();
-			event.x = Math.min (Math.max (event.x, 60), rect.width - 60);
-			if (event.detail != SWT.DRAG) {
-				FormData data = (FormData)vSash.getLayoutData();
-				data.left.offset = event.x;
-				vSash.requestLayout();
-				animate = true;
-			} else {
-				animate = false;
-			}
+	vSash.addListener(SWT.Selection, event -> {
+		Rectangle rect = hSash.getParent().getClientArea();
+		event.x = Math.min (Math.max (event.x, 60), rect.width - 60);
+		if (event.detail != SWT.DRAG) {
+			FormData data1 = (FormData)vSash.getLayoutData();
+			data1.left.offset = event.x;
+			vSash.requestLayout();
+			animate = true;
+		} else {
+			animate = false;
 		}
 	});
-	hSash.addListener (SWT.Selection, new Listener () {
-		@Override
-		public void handleEvent (Event event) {
-			Rectangle rect = vSash.getParent().getClientArea();
-			event.y = Math.min (Math.max (event.y, tabList.getLocation().y + 60), rect.height - 60);
-			if (event.detail != SWT.DRAG) {
-				FormData data = (FormData)hSash.getLayoutData();
-				data.top.offset = event.y;
-				hSash.requestLayout();
-			}
+	hSash.addListener (SWT.Selection, event -> {
+		Rectangle rect = vSash.getParent().getClientArea();
+		event.y = Math.min (Math.max (event.y, tabList.getLocation().y + 60), rect.height - 60);
+		if (event.detail != SWT.DRAG) {
+			FormData data1 = (FormData)hSash.getLayoutData();
+			data1.top.offset = event.y;
+			hSash.requestLayout();
 		}
 	});
 }
@@ -210,32 +204,29 @@ void createCanvas(Composite parent) {
 	int style = SWT.NO_BACKGROUND;
 	if (dbItem.getSelection()) style |= SWT.DOUBLE_BUFFERED;
 	canvas = new Canvas(parent, style);
-	canvas.addListener(SWT.Paint, new Listener() {
-		@Override
-		public void handleEvent(Event event) {
-			GC gc = event.gc;
-			Rectangle rect = canvas.getClientArea();			
-			Device device = gc.getDevice();
-			Pattern pattern = null;
-			if (background.getBgColor1() != null) {
-				if (background.getBgColor2() != null) { // gradient
-					pattern = new Pattern(device, 0, 0, rect.width, 
-							rect.height,
-							background.getBgColor1(),
-							background.getBgColor2());
-					gc.setBackgroundPattern(pattern);
-				} else {	// solid color
-					gc.setBackground(background.getBgColor1());
-				}
-			} else if (background.getBgImage() != null) {		// image
-				pattern = new Pattern(device, background.getBgImage());
+	canvas.addListener(SWT.Paint, event -> {
+		GC gc = event.gc;
+		Rectangle rect = canvas.getClientArea();			
+		Device device = gc.getDevice();
+		Pattern pattern = null;
+		if (background.getBgColor1() != null) {
+			if (background.getBgColor2() != null) { // gradient
+				pattern = new Pattern(device, 0, 0, rect.width, 
+						rect.height,
+						background.getBgColor1(),
+						background.getBgColor2());
 				gc.setBackgroundPattern(pattern);
+			} else {	// solid color
+				gc.setBackground(background.getBgColor1());
 			}
-			gc.fillRectangle(rect);
-			GraphicsTab tab = getTab();
-			if (tab != null) tab.paint(gc, rect.width, rect.height);
-			if (pattern != null) pattern.dispose();
+		} else if (background.getBgImage() != null) {		// image
+			pattern = new Pattern(device, background.getBgImage());
+			gc.setBackgroundPattern(pattern);
 		}
+		gc.fillRectangle(rect);
+		GraphicsTab tab = getTab();
+		if (tab != null) tab.paint(gc, rect.width, rect.height);
+		if (pattern != null) pattern.dispose();
 	});
 }
 
@@ -268,25 +259,19 @@ void createToolBar(final Composite parent) {
 	back.setText(getResourceString("Back")); //$NON-NLS-1$
 	back.setImage(loadImage(display, "back.gif")); //$NON-NLS-1$
 	
-	back.addListener(SWT.Selection, new Listener() {
-		@Override
-		public void handleEvent(Event event) {
-			int index = tabs_in_order.indexOf(tab) - 1;
-			if (index < 0)
-				index = tabs_in_order.size() - 1;
-			setTab(tabs_in_order.get(index));
-		}
+	back.addListener(SWT.Selection, event -> {
+		int index = tabs_in_order.indexOf(tab) - 1;
+		if (index < 0)
+			index = tabs_in_order.size() - 1;
+		setTab(tabs_in_order.get(index));
 	});
 	
 	ToolItem  next = new ToolItem(toolBar, SWT.PUSH);
 	next.setText(getResourceString("Next")); //$NON-NLS-1$
 	next.setImage(loadImage(display, "next.gif")); //$NON-NLS-1$
-	next.addListener(SWT.Selection, new Listener() {
-		@Override
-		public void handleEvent(Event event) {
-			int index = (tabs_in_order.indexOf(tab) + 1)%tabs_in_order.size();
-			setTab(tabs_in_order.get(index));
-		}
+	next.addListener(SWT.Selection, event -> {
+		int index = (tabs_in_order.indexOf(tab) + 1)%tabs_in_order.size();
+		setTab(tabs_in_order.get(index));
 	});
 	
 	ColorMenu colorMenu = new ColorMenu();
@@ -439,15 +424,12 @@ void createTabList(Composite parent) {
 			}
 		}
 	}
-	tabList.addListener(SWT.Selection, new Listener() {
-		@Override
-		public void handleEvent(Event event) {
-			TreeItem item = (TreeItem)event.item;
-			if (item != null) {
-				GraphicsTab gt = (GraphicsTab)item.getData();
-				if (gt == tab) return;
-				setTab((GraphicsTab)item.getData());
-			}
+	tabList.addListener(SWT.Selection, event -> {
+		TreeItem item = (TreeItem)event.item;
+		if (item != null) {
+			GraphicsTab gt = (GraphicsTab)item.getData();
+			if (gt == tab) return;
+			setTab((GraphicsTab)item.getData());
 		}
 	});
 }
@@ -581,12 +563,7 @@ public Shell open(final Display display) {
 	Shell shell = new Shell(display);
 	shell.setText(getResourceString("GraphicsExample")); //$NON-NLS-1$
 	final GraphicsExample example = new GraphicsExample(shell);
-	shell.addListener(SWT.Close, new Listener() {
-		@Override
-		public void handleEvent(Event event) {
-			example.dispose();
-		}
-	});	
+	shell.addListener(SWT.Close, event -> example.dispose());	
 	shell.open();
 	return shell;
 }
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/ImageTransformTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/ImageTransformTab.java
index ce977a1..46031d3 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/ImageTransformTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/ImageTransformTab.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2006 IBM Corporation and others.
+ * Copyright (c) 2006, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -21,9 +21,7 @@ import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.Button;
 import org.eclipse.swt.widgets.Composite;
-import org.eclipse.swt.widgets.Event;
 import org.eclipse.swt.widgets.Label;
-import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.Spinner;
 
 /**
@@ -85,12 +83,7 @@ public void createControlPanel(Composite parent) {
 	rotateSpinner.setMinimum(-720);
 	rotateSpinner.setMaximum(720);
 	rotateSpinner.setIncrement(30);
-	rotateSpinner.addListener(SWT.Selection, new Listener() {
-		@Override
-		public void handleEvent(Event event) {	
-				example.redraw();
-		}
-	});
+	rotateSpinner.addListener(SWT.Selection, event -> example.redraw());
 	
 	// create a spinner for translating along the x axis
 	comp = new Composite(parent, SWT.NONE);
@@ -103,12 +96,7 @@ public void createControlPanel(Composite parent) {
 	translateSpinnerX.setMaximum(500);
 	translateSpinnerX.setSelection(0);
 	translateSpinnerX.setIncrement(10);
-	translateSpinnerX.addListener(SWT.Selection, new Listener() {
-		@Override
-		public void handleEvent(Event event) {	
-				example.redraw();
-		}
-	});
+	translateSpinnerX.addListener(SWT.Selection, event -> example.redraw());
 	
 	// create a spinner for translating along the y axis
 	comp = new Composite(parent, SWT.NONE);
@@ -121,12 +109,7 @@ public void createControlPanel(Composite parent) {
 	translateSpinnerY.setMaximum(500);
 	translateSpinnerY.setSelection(0);
 	translateSpinnerY.setIncrement(10);
-	translateSpinnerY.addListener(SWT.Selection, new Listener() {
-		@Override
-		public void handleEvent(Event event) {	
-				example.redraw();
-		}
-	});
+	translateSpinnerY.addListener(SWT.Selection, event -> example.redraw());
 	
 	// create a spinner for scaling along the x axis
 	comp = new Composite(parent, SWT.NONE);
@@ -140,12 +123,7 @@ public void createControlPanel(Composite parent) {
 	scaleSpinnerX.setMaximum(400);
 	scaleSpinnerX.setSelection(100);
 	scaleSpinnerX.setIncrement(10);
-	scaleSpinnerX.addListener(SWT.Selection, new Listener() {
-		@Override
-		public void handleEvent(Event event) {	
-				example.redraw();
-		}
-	});
+	scaleSpinnerX.addListener(SWT.Selection, event -> example.redraw());
 	
 	// create a spinner for scaling along the y axis
 	comp = new Composite(parent, SWT.NONE);
@@ -159,24 +137,14 @@ public void createControlPanel(Composite parent) {
 	scaleSpinnerY.setMaximum(400);
 	scaleSpinnerY.setSelection(100);
 	scaleSpinnerY.setIncrement(10);
-	scaleSpinnerY.addListener(SWT.Selection, new Listener() {
-		@Override
-		public void handleEvent(Event event) {	
-				example.redraw();
-		}
-	});
+	scaleSpinnerY.addListener(SWT.Selection, event -> example.redraw());
 	
 	// create a button for inverting the transform matrix
 	comp = new Composite(parent, SWT.NONE);
 	comp.setLayout(new GridLayout());
 	invertButton = new Button(comp, SWT.TOGGLE);
 	invertButton.setText(GraphicsExample.getResourceString("Invert")); //$NON-NLS-1$
-	invertButton.addListener(SWT.Selection, new Listener() {
-		@Override
-		public void handleEvent(Event event) {	
-				example.redraw();
-		}
-	});
+	invertButton.addListener(SWT.Selection, event -> example.redraw());
 }
 
 /* (non-Javadoc)
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/InterpolationTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/InterpolationTab.java
index f756e1c..805b9a3 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/InterpolationTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/InterpolationTab.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2006 IBM Corporation and others.
+ * Copyright (c) 2006, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -22,9 +22,7 @@ import org.eclipse.swt.graphics.Transform;
 import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.Combo;
 import org.eclipse.swt.widgets.Composite;
-import org.eclipse.swt.widgets.Event;
 import org.eclipse.swt.widgets.Label;
-import org.eclipse.swt.widgets.Listener;
 
 /**
  * This tab shows the effects of applying various interpolation algorithms to
@@ -73,12 +71,7 @@ public void createControlPanel(Composite parent) {
 	imageCb.add(GraphicsExample.getResourceString("SWT")); //$NON-NLS-1$
 	imageCb.add(GraphicsExample.getResourceString("Ovals")); //$NON-NLS-1$
 	imageCb.select(0);
-	imageCb.addListener(SWT.Selection, new Listener() {
-		@Override
-		public void handleEvent(Event event) {
-				example.redraw();
-		}
-	});
+	imageCb.addListener(SWT.Selection, event -> example.redraw());
 }
 
 @Override
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/LineCapTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/LineCapTab.java
index 4f64d08..af45d23 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/LineCapTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/LineCapTab.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2006 IBM Corporation and others.
+ * Copyright (c) 2006, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -21,8 +21,6 @@ import org.eclipse.swt.graphics.Rectangle;
 import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.Button;
 import org.eclipse.swt.widgets.Composite;
-import org.eclipse.swt.widgets.Event;
-import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.Menu;
 
 /**
@@ -89,16 +87,13 @@ public void createControlPanel(Composite parent) {
 	colorButton.setText(GraphicsExample
 			.getResourceString("Color")); //$NON-NLS-1$
 	colorButton.setImage(foreground.getThumbNail());
-	colorButton.addListener(SWT.Selection, new Listener() { 
-		@Override
-		public void handleEvent(Event event) {
-			final Button button = (Button) event.widget;
-			final Composite parent = button.getParent(); 
-			Rectangle bounds = button.getBounds();
-			Point point = parent.toDisplay(new Point(bounds.x, bounds.y));
-			menu.setLocation(point.x, point.y + bounds.height);
-			menu.setVisible(true);
-		}
+	colorButton.addListener(SWT.Selection, event -> {
+		final Button button = (Button) event.widget;
+		final Composite parent1 = button.getParent(); 
+		Rectangle bounds = button.getBounds();
+		Point point = parent1.toDisplay(new Point(bounds.x, bounds.y));
+		menu.setLocation(point.x, point.y + bounds.height);
+		menu.setVisible(true);
 	});
 }
 
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/LineJoinTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/LineJoinTab.java
index e7f2aa5..d1f8cd1 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/LineJoinTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/LineJoinTab.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2006 IBM Corporation and others.
+ * Copyright (c) 2006, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -22,9 +22,7 @@ import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.Button;
 import org.eclipse.swt.widgets.Combo;
 import org.eclipse.swt.widgets.Composite;
-import org.eclipse.swt.widgets.Event;
 import org.eclipse.swt.widgets.Label;
-import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.Menu;
 
 /**
@@ -83,12 +81,7 @@ public void createControlPanel(Composite parent) {
 	joinCb.add(GraphicsExample
 			.getResourceString("round")); //$NON-NLS-1$
 	joinCb.select(1);
-	joinCb.addListener(SWT.Selection, new Listener() {
-		@Override
-		public void handleEvent(Event event) {
-				example.redraw();
-		}
-	});
+	joinCb.addListener(SWT.Selection, event -> example.redraw());
 	
 	// color menu
 	ColorMenu cm = new ColorMenu();
@@ -113,16 +106,13 @@ public void createControlPanel(Composite parent) {
 	colorButton.setText(GraphicsExample
 			.getResourceString("Color")); //$NON-NLS-1$
 	colorButton.setImage(shapeColor.getThumbNail());
-	colorButton.addListener(SWT.Selection, new Listener() { 
-		@Override
-		public void handleEvent(Event event) {
-			final Button button = (Button) event.widget;
-			final Composite parent = button.getParent(); 
-			Rectangle bounds = button.getBounds();
-			Point point = parent.toDisplay(new Point(bounds.x, bounds.y));
-			menu.setLocation(point.x, point.y + bounds.height);
-			menu.setVisible(true);
-		}
+	colorButton.addListener(SWT.Selection, event -> {
+		final Button button = (Button) event.widget;
+		final Composite parent1 = button.getParent(); 
+		Rectangle bounds = button.getBounds();
+		Point point = parent1.toDisplay(new Point(bounds.x, bounds.y));
+		menu.setLocation(point.x, point.y + bounds.height);
+		menu.setVisible(true);
 	});
 
 }
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/LineStyleTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/LineStyleTab.java
index 712d6b6..2314589 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/LineStyleTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/LineStyleTab.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2006 IBM Corporation and others.
+ * Copyright (c) 2006, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -21,9 +21,7 @@ import org.eclipse.swt.graphics.Rectangle;
 import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.Button;
 import org.eclipse.swt.widgets.Composite;
-import org.eclipse.swt.widgets.Event;
 import org.eclipse.swt.widgets.Label;
-import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.Menu;
 import org.eclipse.swt.widgets.Spinner;
 
@@ -79,12 +77,7 @@ public void createControlPanel(Composite parent) {
 	lineWidthSpinner.setSelection(10);
 	lineWidthSpinner.setMinimum(1);
 	lineWidthSpinner.setMaximum(30);
-	lineWidthSpinner.addListener(SWT.Selection, new Listener() {
-		@Override
-		public void handleEvent(Event event) {
-				example.redraw();
-		}
-	});
+	lineWidthSpinner.addListener(SWT.Selection, event -> example.redraw());
 		
 	ColorMenu cm = new ColorMenu();
 	cm.setPatternItems(example.checkAdvancedGraphics());
@@ -109,16 +102,13 @@ public void createControlPanel(Composite parent) {
 	colorButton.setText(GraphicsExample
 			.getResourceString("Color")); //$NON-NLS-1$
 	colorButton.setImage(lineColor.getThumbNail());
-	colorButton.addListener(SWT.Selection, new Listener() { 
-		@Override
-		public void handleEvent(Event event) {
-			final Button button = (Button) event.widget;
-			final Composite parent = button.getParent(); 
-			Rectangle bounds = button.getBounds();
-			Point point = parent.toDisplay(new Point(bounds.x, bounds.y));
-			menu.setLocation(point.x, point.y + bounds.height);
-			menu.setVisible(true);
-		}
+	colorButton.addListener(SWT.Selection, event -> {
+		final Button button = (Button) event.widget;
+		final Composite parent1 = button.getParent(); 
+		Rectangle bounds = button.getBounds();
+		Point point = parent1.toDisplay(new Point(bounds.x, bounds.y));
+		menu.setLocation(point.x, point.y + bounds.height);
+		menu.setVisible(true);
 	});
 }
 
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/MazeTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/MazeTab.java
index c6e8fed..6cac112 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/MazeTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/MazeTab.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2006 IBM Corporation and others.
+ * Copyright (c) 2006, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -20,8 +20,6 @@ import org.eclipse.swt.graphics.GC;
 import org.eclipse.swt.graphics.Image;
 import org.eclipse.swt.graphics.Rectangle;
 import org.eclipse.swt.widgets.Composite;
-import org.eclipse.swt.widgets.Event;
-import org.eclipse.swt.widgets.Listener;
 
 /**
  * This tab shows three circles, each following a different path in a maze.
@@ -136,13 +134,10 @@ public void createControlPanel(Composite parent) {
 	
 	// add selection listener to reset nextNumber after 
 	// the sequence has completed
-	playItem.addListener(SWT.Selection, new Listener() {
-		@Override
-		public void handleEvent(Event event) {
-			if (isDone){
-				nextIndex = nextIndex2 = nextIndex3 = 0;
-				isDone = isDone2 = isDone3 = false; 
-			}
+	playItem.addListener(SWT.Selection, event -> {
+		if (isDone){
+			nextIndex = nextIndex2 = nextIndex3 = 0;
+			isDone = isDone2 = isDone3 = false; 
 		}
 	});
 }
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/PathClippingAnimTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/PathClippingAnimTab.java
index 9563df1..cb9670f 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/PathClippingAnimTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/PathClippingAnimTab.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2006 IBM Corporation and others.
+ * Copyright (c) 2006, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -21,8 +21,6 @@ import org.eclipse.swt.graphics.Rectangle;
 import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.Button;
 import org.eclipse.swt.widgets.Composite;
-import org.eclipse.swt.widgets.Event;
-import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.Menu;
 
 /**
@@ -96,16 +94,13 @@ public class PathClippingAnimTab extends AnimatedGraphicsTab {
 		colorButton = new Button(comp, SWT.PUSH);
 		colorButton.setText(GraphicsExample.getResourceString("Color")); //$NON-NLS-1$
 		colorButton.setImage(background.getThumbNail());
-		colorButton.addListener(SWT.Selection, new Listener() {
-			@Override
-			public void handleEvent(Event event) {
-				final Button button = (Button) event.widget;
-				final Composite parent = button.getParent();
-				Rectangle bounds = button.getBounds();
-				Point point = parent.toDisplay(new Point(bounds.x, bounds.y));
-				menu.setLocation(point.x, point.y + bounds.height);
-				menu.setVisible(true);
-			}
+		colorButton.addListener(SWT.Selection, event -> {
+			final Button button = (Button) event.widget;
+			final Composite parent1 = button.getParent();
+			Rectangle bounds = button.getBounds();
+			Point point = parent1.toDisplay(new Point(bounds.x, bounds.y));
+			menu.setLocation(point.x, point.y + bounds.height);
+			menu.setVisible(true);
 		});
 	}
 
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/PathClippingTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/PathClippingTab.java
index 4c9a7f4..15c4458 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/PathClippingTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/PathClippingTab.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2006 IBM Corporation and others.
+ * Copyright (c) 2006, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -23,9 +23,7 @@ import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.Button;
 import org.eclipse.swt.widgets.Combo;
 import org.eclipse.swt.widgets.Composite;
-import org.eclipse.swt.widgets.Event;
 import org.eclipse.swt.widgets.Label;
-import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.Menu;
 
 /**
@@ -87,12 +85,7 @@ public void createControlPanel(Composite parent) {
 	clippingCb.add(GraphicsExample.getResourceString("Triangles")); //$NON-NLS-1$
 	clippingCb.add(GraphicsExample.getResourceString("Default")); //$NON-NLS-1$
 	clippingCb.select(0);
-	clippingCb.addListener(SWT.Selection, new Listener() {
-		@Override
-		public void handleEvent(Event event) {
-				example.redraw();
-		}
-	});
+	clippingCb.addListener(SWT.Selection, event -> example.redraw());
 	
 	// color menu
 	ColorMenu cm = new ColorMenu();
@@ -117,16 +110,13 @@ public void createControlPanel(Composite parent) {
 	colorButton.setText(GraphicsExample
 			.getResourceString("Color")); //$NON-NLS-1$
 	colorButton.setImage(background.getThumbNail());
-	colorButton.addListener(SWT.Selection, new Listener() { 
-		@Override
-		public void handleEvent(Event event) {
-			final Button button = (Button) event.widget;
-			final Composite parent = button.getParent(); 
-			Rectangle bounds = button.getBounds();
-			Point point = parent.toDisplay(new Point(bounds.x, bounds.y));
-			menu.setLocation(point.x, point.y + bounds.height);
-			menu.setVisible(true);
-		}
+	colorButton.addListener(SWT.Selection, event -> {
+		final Button button = (Button) event.widget;
+		final Composite parent1 = button.getParent(); 
+		Rectangle bounds = button.getBounds();
+		Point point = parent1.toDisplay(new Point(bounds.x, bounds.y));
+		menu.setLocation(point.x, point.y + bounds.height);
+		menu.setVisible(true);
 	});
 }
 @Override
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/PathTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/PathTab.java
index cc6bc29..3ce8f00 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/PathTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/PathTab.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2006 IBM Corporation and others.
+ * Copyright (c) 2006, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -74,12 +74,7 @@ public void createControlPanel(Composite parent) {
 	
 	drawButton = new Button(comp, SWT.TOGGLE);
 	drawButton.setText(GraphicsExample.getResourceString("DrawPath")); //$NON-NLS-1$
-	drawButton.addListener(SWT.Selection, new Listener() { 
-		@Override
-		public void handleEvent(Event event) {
-			example.redraw();
-		}
-	});
+	drawButton.addListener(SWT.Selection, event -> example.redraw());
 	drawButton.setSelection(true);
 	
 	// create fill button
@@ -88,12 +83,7 @@ public void createControlPanel(Composite parent) {
 	
 	fillButton = new Button(comp, SWT.TOGGLE);
 	fillButton.setText(GraphicsExample.getResourceString("FillPath")); //$NON-NLS-1$
-	fillButton.addListener(SWT.Selection, new Listener() { 
-		@Override
-		public void handleEvent(Event event) {
-			example.redraw();
-		}
-	});
+	fillButton.addListener(SWT.Selection, event -> example.redraw());
 	
 	// create close button
 	comp = new Composite(parent, SWT.NONE);
@@ -101,12 +91,7 @@ public void createControlPanel(Composite parent) {
 	
 	closeButton = new Button(comp, SWT.TOGGLE);
 	closeButton.setText(GraphicsExample.getResourceString("ClosePath")); //$NON-NLS-1$
-	closeButton.addListener(SWT.Selection, new Listener() { 
-		@Override
-		public void handleEvent(Event event) {
-			example.redraw();
-		}
-	});
+	closeButton.addListener(SWT.Selection, event -> example.redraw());
 		
 	// create color button
 	comp = new Composite(parent, SWT.NONE);
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/RegionClippingTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/RegionClippingTab.java
index 345a983..1e8a3dd 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/RegionClippingTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/RegionClippingTab.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2006 IBM Corporation and others.
+ * Copyright (c) 2006, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -21,9 +21,7 @@ import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.Button;
 import org.eclipse.swt.widgets.Combo;
 import org.eclipse.swt.widgets.Composite;
-import org.eclipse.swt.widgets.Event;
 import org.eclipse.swt.widgets.Label;
-import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.Menu;
 
 /**
@@ -86,12 +84,7 @@ public void createControlPanel(Composite parent) {
 	clippingCb.add(GraphicsExample.getResourceString("Sub")); //$NON-NLS-1$
 	clippingCb.add(GraphicsExample.getResourceString("Inter")); //$NON-NLS-1$
 	clippingCb.select(0);
-	clippingCb.addListener(SWT.Selection, new Listener() {
-		@Override
-		public void handleEvent(Event event) {
-				example.redraw();
-		}
-	});
+	clippingCb.addListener(SWT.Selection, event -> example.redraw());
 
 	// color menu
 	ColorMenu cm = new ColorMenu();
@@ -125,16 +118,13 @@ public void createControlPanel(Composite parent) {
 	colorButton1.setText(GraphicsExample
 			.getResourceString("Color1")); //$NON-NLS-1$
 	colorButton1.setImage(colorGB1.getThumbNail());
-	colorButton1.addListener(SWT.Selection, new Listener() { 
-		@Override
-		public void handleEvent(Event event) {
-			final Button button = (Button) event.widget;
-			final Composite parent = button.getParent(); 
-			Rectangle bounds = button.getBounds();
-			Point point = parent.toDisplay(new Point(bounds.x, bounds.y));
-			menu1.setLocation(point.x, point.y + bounds.height);
-			menu1.setVisible(true);
-		}
+	colorButton1.addListener(SWT.Selection, event -> {
+		final Button button = (Button) event.widget;
+		final Composite parent1 = button.getParent(); 
+		Rectangle bounds = button.getBounds();
+		Point point = parent1.toDisplay(new Point(bounds.x, bounds.y));
+		menu1.setLocation(point.x, point.y + bounds.height);
+		menu1.setVisible(true);
 	});
 
 	// color button 2
@@ -145,16 +135,13 @@ public void createControlPanel(Composite parent) {
 	colorButton2.setText(GraphicsExample
 			.getResourceString("Color2")); //$NON-NLS-1$
 	colorButton2.setImage(colorGB2.getThumbNail());
-	colorButton2.addListener(SWT.Selection, new Listener() { 
-		@Override
-		public void handleEvent(Event event) {
-			final Button button = (Button) event.widget;
-			final Composite parent = button.getParent(); 
-			Rectangle bounds = button.getBounds();
-			Point point = parent.toDisplay(new Point(bounds.x, bounds.y));
-			menu2.setLocation(point.x, point.y + bounds.height);
-			menu2.setVisible(true);
-		}
+	colorButton2.addListener(SWT.Selection, event -> {
+		final Button button = (Button) event.widget;
+		final Composite parent1 = button.getParent(); 
+		Rectangle bounds = button.getBounds();
+		Point point = parent1.toDisplay(new Point(bounds.x, bounds.y));
+		menu2.setLocation(point.x, point.y + bounds.height);
+		menu2.setVisible(true);
 	});
 }
 
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/SpiralTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/SpiralTab.java
index ce319ef..484c2f1 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/SpiralTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/SpiralTab.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2006 IBM Corporation and others.
+ * Copyright (c) 2006, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -71,12 +71,7 @@ public void createControlPanel(Composite parent) {
 	petalSpinner.setSelection(8);
 	petalSpinner.setMinimum(3);
 	petalSpinner.setMaximum(20);
-	petalSpinner.addListener(SWT.Selection, new Listener() {
-		@Override
-		public void handleEvent (Event event) {
-			example.redraw();
-		}
-	});
+	petalSpinner.addListener(SWT.Selection, event -> example.redraw());
 	
 	// create color button
 	comp = new Composite(parent, SWT.NONE);
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/StarPolyTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/StarPolyTab.java
index b8af4ca..829ab54 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/StarPolyTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/StarPolyTab.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2006 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -14,9 +14,7 @@ import org.eclipse.swt.SWT;
 import org.eclipse.swt.graphics.GC;
 import org.eclipse.swt.widgets.Combo;
 import org.eclipse.swt.widgets.Composite;
-import org.eclipse.swt.widgets.Event;
 import org.eclipse.swt.widgets.Label;
-import org.eclipse.swt.widgets.Listener;
 
 public class StarPolyTab extends GraphicsTab {
 	int[] radial;
@@ -36,12 +34,7 @@ public void createControlPanel(Composite parent) {
 	fillRuleCb.add("FILL_EVEN_ODD");
 	fillRuleCb.add("FILL_WINDING");
 	fillRuleCb.select(0);
-	fillRuleCb.addListener(SWT.Selection, new Listener() {
-		@Override
-		public void handleEvent (Event event) {
-			example.redraw();
-		}
-	});
+	fillRuleCb.addListener(SWT.Selection, event -> example.redraw());
 }
 
 @Override
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/TextAntialiasTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/TextAntialiasTab.java
index e58b0f1..8eb9e7f 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/TextAntialiasTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/TextAntialiasTab.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2006, 2007 IBM Corporation and others.
+ * Copyright (c) 2006, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -21,9 +21,7 @@ import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.Button;
 import org.eclipse.swt.widgets.Combo;
 import org.eclipse.swt.widgets.Composite;
-import org.eclipse.swt.widgets.Event;
 import org.eclipse.swt.widgets.Label;
-import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.Menu;
 
 /**
@@ -84,12 +82,7 @@ public void createControlPanel(Composite parent) {
 	aliasCombo.add("DEFAULT");
 	aliasCombo.add("ON");
 	aliasCombo.select(0);
-	aliasCombo.addListener(SWT.Selection, new Listener() {
-		@Override
-		public void handleEvent(Event event) {
-				example.redraw();
-		}
-	});
+	aliasCombo.addListener(SWT.Selection, event -> example.redraw());
 		
 	ColorMenu cm = new ColorMenu();
 	cm.setColorItems(true);
@@ -113,22 +106,16 @@ public void createControlPanel(Composite parent) {
 	colorButton.setText(GraphicsExample.getResourceString("Color")); //$NON-NLS-1$
 	colorButton.setImage(textColor.getThumbNail());
 	
-	colorButton.addListener(SWT.Selection, new Listener() { 
-		@Override
-		public void handleEvent(Event event) {
-			final Button button = (Button) event.widget;
-			final Composite parent = button.getParent(); 
-			Rectangle bounds = button.getBounds();
-			Point point = parent.toDisplay(new Point(bounds.x, bounds.y));
-			menu.setLocation(point.x, point.y + bounds.height);
-			menu.setVisible(true);
-		}
+	colorButton.addListener(SWT.Selection, event -> {
+		final Button button = (Button) event.widget;
+		final Composite parent1 = button.getParent(); 
+		Rectangle bounds = button.getBounds();
+		Point point = parent1.toDisplay(new Point(bounds.x, bounds.y));
+		menu.setLocation(point.x, point.y + bounds.height);
+		menu.setVisible(true);
 	});
 }
 
-/* (non-Javadoc)
- * @see org.eclipse.swt.examples.graphics.GraphicsTab#paint(org.eclipse.swt.graphics.GC, int, int)
- */
 @Override
 public void paint(GC gc, int width, int height) {
 	if (!example.checkAdvancedGraphics()) return;
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/paint/PaintExample.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/paint/PaintExample.java
index d038417..09bdcc3 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/paint/PaintExample.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/paint/PaintExample.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2005 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -289,20 +289,17 @@ public class PaintExample {
 				return paintColors[Math.min(Math.max(row * numPaletteCols + col, 0), paintColors.length - 1)];
 			}
 		});
-		Listener refreshListener = new Listener() {
-			@Override
-			public void handleEvent(Event e) {
-				if (e.gc == null) return;
-				Rectangle bounds = paletteCanvas.getClientArea();
-				for (int row = 0; row < numPaletteRows; ++row) {
-					for (int col = 0; col < numPaletteCols; ++col) {
-						final int x = bounds.width * col / numPaletteCols;
-						final int y = bounds.height * row / numPaletteRows;
-						final int width = Math.max(bounds.width * (col + 1) / numPaletteCols - x, 1);
-						final int height = Math.max(bounds.height * (row + 1) / numPaletteRows - y, 1);
-						e.gc.setBackground(paintColors[row * numPaletteCols + col]);
-						e.gc.fillRectangle(bounds.x + x, bounds.y + y, width, height);
-					}
+		Listener refreshListener = e -> {
+			if (e.gc == null) return;
+			Rectangle bounds = paletteCanvas.getClientArea();
+			for (int row = 0; row < numPaletteRows; ++row) {
+				for (int col = 0; col < numPaletteCols; ++col) {
+					final int x = bounds.width * col / numPaletteCols;
+					final int y = bounds.height * row / numPaletteRows;
+					final int width = Math.max(bounds.width * (col + 1) / numPaletteCols - x, 1);
+					final int height = Math.max(bounds.height * (row + 1) / numPaletteRows - y, 1);
+					e.gc.setBackground(paintColors[row * numPaletteCols + col]);
+					e.gc.fillRectangle(bounds.x + x, bounds.y + y, width, height);
 				}
 			}
 		};
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/texteditor/TextEditor.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/texteditor/TextEditor.java
index c23a89f..c9c7d1c 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/texteditor/TextEditor.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/texteditor/TextEditor.java
@@ -1,5 +1,5 @@
 /*****************************************************************************
- * Copyright (c) 2000, 2008 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -566,39 +566,19 @@ public class TextEditor {
 		final MenuItem cutItem = new MenuItem (menu, SWT.PUSH);
 		cutItem.setText (getResourceString("Cut_menuitem")); //$NON-NLS-1$
 		cutItem.setImage(iCut);
-		cutItem.addListener (SWT.Selection, new Listener () {
-			@Override
-			public void handleEvent (Event event) {
-				styledText.cut();
-			}
-		});
+		cutItem.addListener (SWT.Selection, event -> styledText.cut());
 		final MenuItem copyItem = new MenuItem (menu, SWT.PUSH);
 		copyItem.setText (getResourceString("Copy_menuitem")); //$NON-NLS-1$
 		copyItem.setImage(iCopy);
-		copyItem.addListener (SWT.Selection, new Listener () {
-			@Override
-			public void handleEvent (Event event) {
-				styledText.copy();
-			}
-		});
+		copyItem.addListener (SWT.Selection, event -> styledText.copy());
 		final MenuItem pasteItem = new MenuItem (menu, SWT.PUSH);
 		pasteItem.setText (getResourceString("Paste_menuitem")); //$NON-NLS-1$
 		pasteItem.setImage(iPaste);
-		pasteItem.addListener (SWT.Selection, new Listener () {
-			@Override
-			public void handleEvent (Event event) {
-				styledText.paste();
-			}
-		});
+		pasteItem.addListener (SWT.Selection, event -> styledText.paste());
 		new MenuItem (menu, SWT.SEPARATOR);
 		final MenuItem selectAllItem = new MenuItem (menu, SWT.PUSH);
 		selectAllItem.setText (getResourceString("SelectAll_menuitem")); //$NON-NLS-1$
-		selectAllItem.addListener (SWT.Selection, new Listener () {
-			@Override
-			public void handleEvent (Event event) {
-				styledText.selectAll();
-			}
-		});
+		selectAllItem.addListener (SWT.Selection, event -> styledText.selectAll());
 		menu.addMenuListener(new MenuAdapter() {
 			@Override
 			public void menuShown(MenuEvent event) {
@@ -1325,18 +1305,8 @@ public class TextEditor {
 				updateToolBar();
 			}
 		});
-		styledText.addListener(SWT.MouseUp, new Listener() {
-			@Override
-			public void handleEvent(Event event) {
-				handleMouseUp(event);
-			}
-		});
-		styledText.addListener(SWT.KeyDown, new Listener() {
-			@Override
-			public void handleEvent(Event event) {
-				handleKeyDown(event);
-			}
-		});
+		styledText.addListener(SWT.MouseUp, event -> handleMouseUp(event));
+		styledText.addListener(SWT.KeyDown, event -> handleKeyDown(event));
 		styledText.addVerifyListener(new VerifyListener() {
 			@Override
 			public void verifyText(VerifyEvent event) {
@@ -1355,16 +1325,13 @@ public class TextEditor {
 				handlePaintObject(event);
 			}
 		});
-		styledText.addListener(SWT.Dispose, new Listener() {
-			@Override
-			public void handleEvent(Event event) {
-				StyleRange[] styles = styledText.getStyleRanges(0, styledText.getCharCount(), false);
-				for (int i = 0; i < styles.length; i++) {
-					Object data = styles[i].data;
-					if (data != null) {
-						if (data instanceof Image) ((Image)data).dispose();
-						if (data instanceof Control) ((Control)data).dispose();
-					}
+		styledText.addListener(SWT.Dispose, event -> {
+			StyleRange[] styles = styledText.getStyleRanges(0, styledText.getCharCount(), false);
+			for (int i = 0; i < styles.length; i++) {
+				Object data = styles[i].data;
+				if (data != null) {
+					if (data instanceof Image) ((Image)data).dispose();
+					if (data instanceof Control) ((Control)data).dispose();
 				}
 			}
 		});
@@ -1540,15 +1507,12 @@ public class TextEditor {
 		okButton.setText(getResourceString("Ok")); //$NON-NLS-1$
 		final Button cancelButton = new Button(dialog, SWT.PUSH);
 		cancelButton.setText(getResourceString("Cancel")); //$NON-NLS-1$
-		Listener listener = new Listener() {
-			@Override
-			public void handleEvent(Event event) {
-				if (event.widget == okButton) {
-					link = text.getText();
-					setStyle(UNDERLINE_LINK);
-				}
-				dialog.dispose();
+		Listener listener = event -> {
+			if (event.widget == okButton) {
+				link = text.getText();
+				setStyle(UNDERLINE_LINK);
 			}
+			dialog.dispose();
 		};
 		okButton.addListener(SWT.Selection, listener);
 		cancelButton.addListener(SWT.Selection, listener);
commit 9482ddbdbe01c9ae8c0cdb66f1a9f789d7c5d867
Author: Alexander Kurtakov <akurtako@redhat.com>
Date:   Fri Feb 12 01:22:21 2016 +0200

    Bug 485821 - Make examples/snippets use lambdas
    
    Convert all applicable *Listener cases.
    
    Change-Id: I3de28bdcd1b226a0d0152a89f79e87534e7d30d5
    Signed-off-by: Alexander Kurtakov <akurtako@redhat.com>

35	22	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/AccessibleActionExample.java
11	16	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/AccessibleValueExample.java
72	82	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/BarChart.java
44	68	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/ControlsWithAccessibleNamesExample.java
3	17	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/ControlsWithLabelsExample.java
30	40	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/Shape.java
87	92	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/addressbook/AddressBook.java
25	30	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/addressbook/DataEntryDialog.java
20	25	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/addressbook/SearchDialog.java
37	59	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/browserexample/BrowserExample.java
5	38	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/BrowserTab.java
37	42	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CTabFolderTab.java
30	35	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CanvasTab.java
29	36	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/MenuTab.java
39	86	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/StyledTextTab.java
163	188	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/Tab.java
47	52	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/TableTab.java
26	33	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ToolTipTab.java
48	53	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/TreeTab.java
106	111	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/dnd/DNDExample.java
12	17	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/CountDownTab.java
101	105	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/CurvesSWTTab.java
67	71	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/CurvesTab.java
20	23	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/CustomAlphaTab.java
26	34	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/CustomFontTab.java
49	60	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/GradientDialog.java
24	30	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/GradientTab.java
13	16	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/GraphicAntialiasTab.java
47	60	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/GraphicsExample.java
17	20	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/LineCapTab.java
14	17	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/LineJoinTab.java
18	21	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/LineStyleTab.java
17	20	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/PathClippingAnimTab.java
23	26	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/PathClippingTab.java
23	31	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/PathTab.java
27	33	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/RegionClippingTab.java
24	32	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/SpiralTab.java
23	26	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/TextAntialiasTab.java
8	20	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/helloworld/HelloWorld5.java
49	59	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/hoverhelp/HoverHelp.java
145	177	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/imageanalyzer/ImageAnalyzer.java
63	67	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/layoutexample/GridLayoutTab.java
88	98	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/layoutexample/Tab.java
71	87	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/paint/PaintSurface.java
66	89	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/texteditor/TextEditor.java
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/AccessibleActionExample.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/AccessibleActionExample.java
index da927f6..b23b62e 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/AccessibleActionExample.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/AccessibleActionExample.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2008 IBM Corporation and others.
+ * Copyright (c) 2008, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -10,14 +10,30 @@
  *******************************************************************************/
 package org.eclipse.swt.examples.accessibility;
 
-import java.util.*;
+import java.util.MissingResourceException;
+import java.util.ResourceBundle;
 
-import org.eclipse.swt.*;
-import org.eclipse.swt.widgets.*;
-import org.eclipse.swt.layout.*;
-import org.eclipse.swt.events.*;
-import org.eclipse.swt.graphics.*;
-import org.eclipse.swt.accessibility.*;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.accessibility.ACC;
+import org.eclipse.swt.accessibility.Accessible;
+import org.eclipse.swt.accessibility.AccessibleActionAdapter;
+import org.eclipse.swt.accessibility.AccessibleActionEvent;
+import org.eclipse.swt.accessibility.AccessibleAdapter;
+import org.eclipse.swt.accessibility.AccessibleControlAdapter;
+import org.eclipse.swt.accessibility.AccessibleControlEvent;
+import org.eclipse.swt.accessibility.AccessibleEvent;
+import org.eclipse.swt.events.KeyAdapter;
+import org.eclipse.swt.events.KeyEvent;
+import org.eclipse.swt.events.MouseAdapter;
+import org.eclipse.swt.events.MouseEvent;
+import org.eclipse.swt.graphics.GC;
+import org.eclipse.swt.graphics.Point;
+import org.eclipse.swt.graphics.Rectangle;
+import org.eclipse.swt.layout.FillLayout;
+import org.eclipse.swt.widgets.Button;
+import org.eclipse.swt.widgets.Canvas;
+import org.eclipse.swt.widgets.Display;
+import org.eclipse.swt.widgets.Shell;
 
 /**
  * This example shows how to use an AccessibleActionListener
@@ -33,7 +49,7 @@ public class AccessibleActionExample {
 			return key;
 		} catch (NullPointerException e) {
 			return "!" + key + "!"; //$NON-NLS-1$ //$NON-NLS-2$
-		}			
+		}
 	}
 	final static String buttonText = "Action Button";
 
@@ -42,10 +58,10 @@ public class AccessibleActionExample {
 		Shell shell = new Shell(display);
 		shell.setLayout(new FillLayout());
 		shell.setText("Accessible Action Example");
-		
+
 		Button button = new Button(shell, SWT.PUSH);
 		button.setText("Button");
-		
+
 		final Canvas customButton = new Canvas(shell, SWT.NONE) {
 			@Override
 			public Point computeSize(int wHint, int hHint, boolean changed) {
@@ -57,15 +73,12 @@ public class AccessibleActionExample {
 				return point;
 			}
 		};
-		customButton.addPaintListener(new PaintListener() {
-			@Override
-			public void paintControl(PaintEvent e) {
-				Rectangle clientArea = customButton.getClientArea();
-				Point stringExtent = e.gc.stringExtent(buttonText);
-				int x = clientArea.x + (clientArea.width - stringExtent.x) / 2;
-				int y = clientArea.y + (clientArea.height - stringExtent.y) / 2;
-				e.gc.drawString(buttonText, x, y);
-			}
+		customButton.addPaintListener(e -> {
+			Rectangle clientArea = customButton.getClientArea();
+			Point stringExtent = e.gc.stringExtent(buttonText);
+			int x = clientArea.x + (clientArea.width - stringExtent.x) / 2;
+			int y = clientArea.y + (clientArea.height - stringExtent.y) / 2;
+			e.gc.drawString(buttonText, x, y);
 		});
 		customButton.addMouseListener(new MouseAdapter() {
 			@Override
@@ -132,7 +145,7 @@ public class AccessibleActionExample {
 			}
 			@Override
 			public void getKeyBinding(AccessibleActionEvent e) {
-				switch (e.index) { 
+				switch (e.index) {
 					case 0: e.result = "1;CTRL+1"; break;
 					case 1: e.result = "2;CTRL+2"; break;
 					default: e.result = null;
@@ -147,7 +160,7 @@ public class AccessibleActionExample {
 		}
 		display.dispose();
 	}
-	
+
 	/**
 	 * Perform the specified action.
 	 * @param action - must be 0 (for action 1) or 1 (for action 2)
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/AccessibleValueExample.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/AccessibleValueExample.java
index bc1706c..12b9b76 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/AccessibleValueExample.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/AccessibleValueExample.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2008 IBM Corporation and others.
+ * Copyright (c) 2008, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -19,8 +19,6 @@ import org.eclipse.swt.accessibility.AccessibleControlEvent;
 import org.eclipse.swt.accessibility.AccessibleEvent;
 import org.eclipse.swt.accessibility.AccessibleValueAdapter;
 import org.eclipse.swt.accessibility.AccessibleValueEvent;
-import org.eclipse.swt.events.PaintEvent;
-import org.eclipse.swt.events.PaintListener;
 import org.eclipse.swt.graphics.Point;
 import org.eclipse.swt.graphics.Rectangle;
 import org.eclipse.swt.layout.FillLayout;
@@ -36,26 +34,23 @@ public class AccessibleValueExample {
 	static int value = 40;
 	static int min = 0;
 	static int max = 100;
-	
+
 	public static void main(String[] args) {
 		Display display = new Display();
 		Shell shell = new Shell(display);
 		shell.setLayout(new FillLayout());
 		shell.setText("Accessible Value Example");
-		
+
 		final Canvas canvas = new Canvas(shell, SWT.DOUBLE_BUFFERED);
-		canvas.addPaintListener(new PaintListener() {
-			@Override
-			public void paintControl(PaintEvent e) {
-				Rectangle rect = canvas.getClientArea();
-				String val = String.valueOf(value);
-				Point size = e.gc.stringExtent(val);
-				e.gc.setBackground(e.display.getSystemColor(SWT.COLOR_LIST_SELECTION));
-				e.gc.fillRectangle(0, 0, rect.width * value / (max - min), rect.height);
-				e.gc.drawString(val, rect.x + (rect.width - size.x) / 2, rect.y + (rect.height - size.y) / 2, true);
-			}
+		canvas.addPaintListener(e -> {
+			Rectangle rect = canvas.getClientArea();
+			String val = String.valueOf(value);
+			Point size = e.gc.stringExtent(val);
+			e.gc.setBackground(e.display.getSystemColor(SWT.COLOR_LIST_SELECTION));
+			e.gc.fillRectangle(0, 0, rect.width * value / (max - min), rect.height);
+			e.gc.drawString(val, rect.x + (rect.width - size.x) / 2, rect.y + (rect.height - size.y) / 2, true);
 		});
-		
+
 		Accessible accessible = canvas.getAccessible();
 		accessible.addAccessibleListener(new AccessibleAdapter() {
 			@Override
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/BarChart.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/BarChart.java
index 54182f9..eec24f6 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/BarChart.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/BarChart.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2008 IBM Corporation and others.
+ * Copyright (c) 2008, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -27,10 +27,6 @@ import org.eclipse.swt.events.KeyAdapter;
 import org.eclipse.swt.events.KeyEvent;
 import org.eclipse.swt.events.MouseAdapter;
 import org.eclipse.swt.events.MouseEvent;
-import org.eclipse.swt.events.PaintEvent;
-import org.eclipse.swt.events.PaintListener;
-import org.eclipse.swt.events.TraverseEvent;
-import org.eclipse.swt.events.TraverseListener;
 import org.eclipse.swt.graphics.GC;
 import org.eclipse.swt.graphics.Point;
 import org.eclipse.swt.graphics.Rectangle;
@@ -53,7 +49,7 @@ public class BarChart extends Canvas {
 	int valueIncrement = 1;
 	static final int GAP = 4;
 	static final int AXIS_WIDTH = 2;
-	
+
 	/**
 	 * Constructs a new instance of this class given its parent
 	 * and a style value describing its behavior and appearance.
@@ -68,62 +64,59 @@ public class BarChart extends Canvas {
 	}
 
 	void addListeners() {
-		addPaintListener(new PaintListener() {
-			@Override
-			public void paintControl(PaintEvent e) {
-				GC gc = e.gc;
-				Rectangle rect = getClientArea();
-				Display display = getDisplay();
-				int count = data.size();
-				Point valueSize = gc.stringExtent (new Integer(valueMax).toString());
-				int leftX = rect.x + 2 * GAP + valueSize.x;
-				int bottomY = rect.y + rect.height - 2 * GAP - valueSize.y;
-				int unitWidth = (rect.width - 4 * GAP - valueSize.x - AXIS_WIDTH) / count - GAP;
-				int unitHeight = (rect.height - 3 * GAP - AXIS_WIDTH - 2 * valueSize.y) / ((valueMax - valueMin) / valueIncrement);
-				// draw the title
-				int titleWidth = gc.stringExtent (title).x;
-				int center = (Math.max(titleWidth, count * (unitWidth + GAP) + GAP) - titleWidth) / 2;
-				gc.setForeground(display.getSystemColor(SWT.COLOR_BLACK));
-				gc.drawString(title, leftX + AXIS_WIDTH + center, rect.y + GAP);
-				// draw the y axis and value labels
-				gc.setLineWidth(AXIS_WIDTH);
-				gc.drawLine(leftX, rect.y + GAP + valueSize.y, leftX, bottomY);
-				for (int i = valueMin; i <= valueMax; i+=valueIncrement) {
-					int y = bottomY - i * unitHeight;
-					gc.drawLine(leftX, y, leftX - GAP, y);
-					gc.drawString(new Integer(i).toString(), rect.x + GAP, y - valueSize.y);
-				}
-				// draw the x axis and item labels
-				gc.drawLine(leftX, bottomY, rect.x + rect.width - GAP, bottomY);
-				for (int i = 0; i < count; i++) {
-					Object [] dataItem = data.get(i);
-					String itemLabel = (String)dataItem[0];
-					int x = leftX + AXIS_WIDTH + GAP + i * (unitWidth + GAP);
-					gc.drawString(itemLabel, x, bottomY + GAP);
-				}
-				// draw the bars
-				gc.setBackground(display.getSystemColor(color));
-				for (int i = 0; i < count; i++) {
-					Object [] dataItem = data.get(i);
-					int itemValue = ((Integer)dataItem[1]).intValue();
-					int x = leftX + AXIS_WIDTH + GAP + i * (unitWidth + GAP);
-					gc.fillRectangle(x, bottomY - AXIS_WIDTH - itemValue * unitHeight, unitWidth, itemValue * unitHeight);
-				}
-				if (isFocusControl()) {
-					if (selectedItem == -1) {
-						// draw the focus rectangle around the whole bar chart
-						gc.drawFocus(rect.x, rect.y, rect.width, rect.height);
-					} else {
-						// draw the focus rectangle around the selected item
-						Object [] dataItem = data.get(selectedItem);
-						int itemValue = ((Integer)dataItem[1]).intValue();
-						int x = leftX + AXIS_WIDTH + GAP + selectedItem * (unitWidth + GAP);
-						gc.drawFocus(x, bottomY - itemValue * unitHeight - AXIS_WIDTH, unitWidth, itemValue * unitHeight + AXIS_WIDTH + GAP + valueSize.y);
-					}
+		addPaintListener(e -> {
+			GC gc = e.gc;
+			Rectangle rect = getClientArea();
+			Display display = getDisplay();
+			int count = data.size();
+			Point valueSize = gc.stringExtent (new Integer(valueMax).toString());
+			int leftX = rect.x + 2 * GAP + valueSize.x;
+			int bottomY = rect.y + rect.height - 2 * GAP - valueSize.y;
+			int unitWidth = (rect.width - 4 * GAP - valueSize.x - AXIS_WIDTH) / count - GAP;
+			int unitHeight = (rect.height - 3 * GAP - AXIS_WIDTH - 2 * valueSize.y) / ((valueMax - valueMin) / valueIncrement);
+			// draw the title
+			int titleWidth = gc.stringExtent (title).x;
+			int center = (Math.max(titleWidth, count * (unitWidth + GAP) + GAP) - titleWidth) / 2;
+			gc.setForeground(display.getSystemColor(SWT.COLOR_BLACK));
+			gc.drawString(title, leftX + AXIS_WIDTH + center, rect.y + GAP);
+			// draw the y axis and value labels
+			gc.setLineWidth(AXIS_WIDTH);
+			gc.drawLine(leftX, rect.y + GAP + valueSize.y, leftX, bottomY);
+			for (int i1 = valueMin; i1 <= valueMax; i1+=valueIncrement) {
+				int y = bottomY - i1 * unitHeight;
+				gc.drawLine(leftX, y, leftX - GAP, y);
+				gc.drawString(new Integer(i1).toString(), rect.x + GAP, y - valueSize.y);
+			}
+			// draw the x axis and item labels
+			gc.drawLine(leftX, bottomY, rect.x + rect.width - GAP, bottomY);
+			for (int i2 = 0; i2 < count; i2++) {
+				Object [] dataItem1 = data.get(i2);
+				String itemLabel = (String)dataItem1[0];
+				int x1 = leftX + AXIS_WIDTH + GAP + i2 * (unitWidth + GAP);
+				gc.drawString(itemLabel, x1, bottomY + GAP);
+			}
+			// draw the bars
+			gc.setBackground(display.getSystemColor(color));
+			for (int i3 = 0; i3 < count; i3++) {
+				Object [] dataItem2 = data.get(i3);
+				int itemValue1 = ((Integer)dataItem2[1]).intValue();
+				int x2 = leftX + AXIS_WIDTH + GAP + i3 * (unitWidth + GAP);
+				gc.fillRectangle(x2, bottomY - AXIS_WIDTH - itemValue1 * unitHeight, unitWidth, itemValue1 * unitHeight);
+			}
+			if (isFocusControl()) {
+				if (selectedItem == -1) {
+					// draw the focus rectangle around the whole bar chart
+					gc.drawFocus(rect.x, rect.y, rect.width, rect.height);
+				} else {
+					// draw the focus rectangle around the selected item
+					Object [] dataItem3 = data.get(selectedItem);
+					int itemValue2 = ((Integer)dataItem3[1]).intValue();
+					int x3 = leftX + AXIS_WIDTH + GAP + selectedItem * (unitWidth + GAP);
+					gc.drawFocus(x3, bottomY - itemValue2 * unitHeight - AXIS_WIDTH, unitWidth, itemValue2 * unitHeight + AXIS_WIDTH + GAP + valueSize.y);
 				}
 			}
 		});
-		
+
 		addFocusListener(new FocusAdapter() {
 			@Override
 			public void focusGained(FocusEvent e) {
@@ -134,7 +127,7 @@ public class BarChart extends Canvas {
 				redraw();
 			}
 		});
-		
+
 		addMouseListener(new MouseAdapter() {
 			@Override
 			public void mouseDown(MouseEvent e) {
@@ -157,7 +150,7 @@ public class BarChart extends Canvas {
 				}
 			}
 		});
-		
+
 		addKeyListener(new KeyAdapter() {
 			@Override
 			public void keyPressed(KeyEvent e) {
@@ -191,16 +184,13 @@ public class BarChart extends Canvas {
 				}
 			}
 		});
-		
-		addTraverseListener(new TraverseListener() {
-			@Override
-			public void keyTraversed(TraverseEvent e) {
-				switch (e.detail) {
-					case SWT.TRAVERSE_TAB_NEXT:
-					case SWT.TRAVERSE_TAB_PREVIOUS:
-						e.doit = true;
-						break;
-				}
+
+		addTraverseListener(e -> {
+			switch (e.detail) {
+				case SWT.TRAVERSE_TAB_NEXT:
+				case SWT.TRAVERSE_TAB_PREVIOUS:
+					e.doit = true;
+					break;
 			}
 		});
 
@@ -230,7 +220,7 @@ public class BarChart extends Canvas {
 				}
 			}
 		});
-		
+
 		getAccessible().addAccessibleControlListener(new AccessibleControlAdapter() {
 			@Override
 			public void getRole(AccessibleControlEvent e) {
@@ -297,7 +287,7 @@ public class BarChart extends Canvas {
 					}
 				}
 				e.childID = childID;
-			
+
 			}
 			@Override
 			public void getSelection(AccessibleControlEvent e) {
@@ -308,7 +298,7 @@ public class BarChart extends Canvas {
 				int childID = e.childID;
 				if (childID != ACC.CHILDID_SELF) {
 					Object [] dataItem = data.get(childID);
-					e.result = ((Integer)dataItem[1]).toString();					
+					e.result = ((Integer)dataItem[1]).toString();
 				}
 			}
 			@Override
@@ -323,7 +313,7 @@ public class BarChart extends Canvas {
 			}
 		});
 	}
-	
+
 	@Override
 	public Point computeSize (int wHint, int hHint, boolean changed) {
 		checkWidget ();
@@ -349,7 +339,7 @@ public class BarChart extends Canvas {
 
 	/**
 	 * Add a labeled data value to the bar chart.
-	 * 
+	 *
 	 * @param label a string describing the value
 	 * @param value the data value
 	 */
@@ -357,10 +347,10 @@ public class BarChart extends Canvas {
 		checkWidget ();
 		data.add(new Object[] {label, new Integer(value)});
 	}
-	
+
 	/**
 	 * Set the title of the bar chart.
-	 * 
+	 *
 	 * @param title a string to display as the bar chart's title.
 	 */
 	public void setTitle (String title) {
@@ -371,7 +361,7 @@ public class BarChart extends Canvas {
 	/**
 	 * Set the bar color to the specified color.
 	 * The default color is SWT.COLOR_RED.
-	 * 
+	 *
 	 * @param color any of the SWT.COLOR_* constants
 	 */
 	public void setColor (int color) {
@@ -382,7 +372,7 @@ public class BarChart extends Canvas {
 	/**
 	 * Set the minimum value for the y axis.
 	 * The default minimum is 0.
-	 * 
+	 *
 	 * @param min the minimum value
 	 */
 	public void setValueMin (int min) {
@@ -393,7 +383,7 @@ public class BarChart extends Canvas {
 	/**
 	 * Set the maximum value for the y axis.
 	 * The default maximum is 10.
-	 * 
+	 *
 	 * @param max the maximum value
 	 */
 	public void setValueMax (int max) {
@@ -404,7 +394,7 @@ public class BarChart extends Canvas {
 	/**
 	 * Set the increment value for the y axis.
 	 * The default increment is 1.
-	 * 
+	 *
 	 * @param increment the increment value
 	 */
 	public void setValueIncrement (int increment) {
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/ControlsWithAccessibleNamesExample.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/ControlsWithAccessibleNamesExample.java
index c200f6b..1822c9a 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/ControlsWithAccessibleNamesExample.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/ControlsWithAccessibleNamesExample.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2008 IBM Corporation and others.
+ * Copyright (c) 2008, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -22,10 +22,6 @@ import org.eclipse.swt.custom.CTabItem;
 import org.eclipse.swt.custom.StyledText;
 import org.eclipse.swt.events.KeyAdapter;
 import org.eclipse.swt.events.KeyEvent;
-import org.eclipse.swt.events.PaintEvent;
-import org.eclipse.swt.events.PaintListener;
-import org.eclipse.swt.events.TraverseEvent;
-import org.eclipse.swt.events.TraverseListener;
 import org.eclipse.swt.graphics.Image;
 import org.eclipse.swt.graphics.ImageData;
 import org.eclipse.swt.graphics.Point;
@@ -94,24 +90,24 @@ public class ControlsWithAccessibleNamesExample {
 	static Slider slider, overrideSlider;
 	static Link link, overrideLink;
 	static Image smallImage, largeImage, transparentImage;
-		
+
 	public static void main(String[] args) {
 		display = new Display();
 		shell = new Shell(display);
 		shell.setLayout(new GridLayout(4, true));
 		shell.setText("Override Accessibility Test");
-		
+
 		largeImage = new Image(display, ControlsWithAccessibleNamesExample.class.getResourceAsStream("run_wiz.gif"));
 		smallImage = new Image(display, ControlsWithAccessibleNamesExample.class.getResourceAsStream("run.gif"));
 		ImageData source = smallImage.getImageData();
 		ImageData mask = source.getTransparencyMask();
 		transparentImage = new Image(display, source, mask);
-		
+
 		new Label(shell, SWT.NONE).setText("Use Platform Name");
 		new Label(shell, SWT.NONE).setText("Override Platform Name");
 		new Label(shell, SWT.NONE).setText("Use Platform Name");
 		new Label(shell, SWT.NONE).setText("Override Platform Name");
-		
+
 		AccessibleAdapter overrideAccessibleAdapter = new AccessibleAdapter() {
 			@Override
 			public void getName(AccessibleEvent e) {
@@ -132,7 +128,7 @@ public class ControlsWithAccessibleNamesExample {
 				}
 			}
 		};
-		
+
 //		Shell shell;
 		shell.setData("name", "Shell");
 		shell.getAccessible().addAccessibleListener(overrideAccessibleAdapter);
@@ -174,13 +170,13 @@ public class ControlsWithAccessibleNamesExample {
 		imageButton = new Button(shell, SWT.PUSH);
 		imageButton.setImage(smallImage);
 		imageButton.setToolTipText("Image Button ToolTip");
-		
+
 		overrideImageButton = new Button(shell, SWT.PUSH);
 		overrideImageButton.setImage(smallImage);
 		overrideImageButton.setToolTipText("Image Button ToolTip");
 		overrideImageButton.setData("name", "Image Button");
 		overrideImageButton.getAccessible().addAccessibleListener(overrideAccessibleAdapter);
-		
+
 //		Combo combo, overrideCombo;
 		combo = new Combo(shell, SWT.BORDER);
 		for (int i = 0; i < 5; i++) {
@@ -197,7 +193,7 @@ public class ControlsWithAccessibleNamesExample {
 		overrideCombo.setToolTipText("Combo ToolTip");
 		overrideCombo.setData("name", "Combo");
 		overrideCombo.getAccessible().addAccessibleListener(overrideAccessibleAdapter);
-				
+
 //		Spinner spinner, overrideSpinner;
 		spinner = new Spinner(shell, SWT.BORDER);
 		spinner.setSelection(5);
@@ -208,20 +204,20 @@ public class ControlsWithAccessibleNamesExample {
 		overrideSpinner.setToolTipText("Spinner ToolTip");
 		overrideSpinner.setData("name", "Spinner");
 		overrideSpinner.getAccessible().addAccessibleListener(overrideAccessibleAdapter);
-				
+
 //		Text text, overrideText;
 		text = new Text(shell, SWT.SINGLE | SWT.BORDER);
 		text.setText("Contents of single-line Text");
-		
+
 		overrideText = new Text(shell, SWT.SINGLE | SWT.BORDER);
 		overrideText.setText("Contents of single-line Text");
 		overrideText.setData("name", "Text");
 		overrideText.getAccessible().addAccessibleListener(overrideAccessibleAdapter);
-		
+
 //		Text multiLineText, overrideMultiLineText;
 		multiLineText = new Text(shell, SWT.MULTI | SWT.BORDER);
 		multiLineText.setText("Contents of multi-line Text\nLine 2\nLine 3\nLine 4");
-		
+
 		overrideMultiLineText = new Text(shell, SWT.MULTI | SWT.BORDER);
 		overrideMultiLineText.setText("Contents of multi-line Text\nLine 2\nLine 3\nLine 4");
 		overrideMultiLineText.setData("name", "MultiLineText");
@@ -230,13 +226,13 @@ public class ControlsWithAccessibleNamesExample {
 //		List list, overrideList;
 		list = new List(shell, SWT.SINGLE | SWT.BORDER);
 		list.setItems(new String[] {"Item0", "Item1", "Item2"});
-		
+
 		overrideList = new List(shell, SWT.SINGLE | SWT.BORDER);
 		overrideList.setItems(new String[] {"Item0", "Item1", "Item2"});
 		overrideList.setData("name", "List");
 		overrideList.setData("child", "List Item");
 		overrideList.getAccessible().addAccessibleListener(overrideAccessibleAdapter);
-		
+
 //		Table table, overrideTable;
 		table = new Table(shell, SWT.BORDER | SWT.MULTI | SWT.FULL_SELECTION);
 		table.setHeaderVisible(true);
@@ -250,7 +246,7 @@ public class ControlsWithAccessibleNamesExample {
 			TableItem item = new TableItem(table, SWT.NONE);
 			item.setText(new String [] {"C0R" + row, "C1R" + row, "C2R" + row});
 		}
-		
+
 		overrideTable = new Table(shell, SWT.BORDER | SWT.MULTI | SWT.FULL_SELECTION);
 		overrideTable.setHeaderVisible(true);
 		overrideTable.setLinesVisible(true);
@@ -266,7 +262,7 @@ public class ControlsWithAccessibleNamesExample {
 		overrideTable.setData("name", "Table");
 		overrideTable.setData("child", "Table Item");
 		overrideTable.getAccessible().addAccessibleListener(overrideAccessibleAdapter);
-		
+
 //		Tree tree, overrideTree;
 		tree = new Tree(shell, SWT.BORDER | SWT.MULTI);
 		for (int i = 0; i < 3; i++) {
@@ -276,7 +272,7 @@ public class ControlsWithAccessibleNamesExample {
 				new TreeItem(item, SWT.NONE).setText("Item" + i + j);
 			}
 		}
-		
+
 		overrideTree = new Tree(shell, SWT.BORDER | SWT.MULTI);
 		for (int i = 0; i < 3; i++) {
 			TreeItem item = new TreeItem(overrideTree, SWT.NONE);
@@ -288,7 +284,7 @@ public class ControlsWithAccessibleNamesExample {
 		overrideTree.setData("name", "Tree");
 		overrideTree.setData("child", "Tree Item");
 		overrideTree.getAccessible().addAccessibleListener(overrideAccessibleAdapter);
-						
+
 //		Tree treeTable, overrideTreeTable;
 		treeTable = new Tree(shell, SWT.BORDER | SWT.MULTI);
 		treeTable.setHeaderVisible(true);
@@ -305,7 +301,7 @@ public class ControlsWithAccessibleNamesExample {
 				new TreeItem(item, SWT.NONE).setText(new String [] {"I" + i + j + "C0", "I" + i + j + "C1", "I" + i + j + "C2"});
 			}
 		}
-		
+
 		overrideTreeTable = new Tree(shell, SWT.BORDER | SWT.MULTI);
 		overrideTreeTable.setHeaderVisible(true);
 		overrideTreeTable.setLinesVisible(true);
@@ -324,7 +320,7 @@ public class ControlsWithAccessibleNamesExample {
 		overrideTreeTable.setData("name", "Tree Table");
 		overrideTreeTable.setData("child", "Tree Table Item");
 		overrideTreeTable.getAccessible().addAccessibleListener(overrideAccessibleAdapter);
-						
+
 //		ToolBar toolBar, overrideToolBar;
 		toolBar = new ToolBar(shell, SWT.FLAT);
 		for (int i = 0; i < 3; i++) {
@@ -332,7 +328,7 @@ public class ControlsWithAccessibleNamesExample {
 			item.setText("Item" + i);
 			item.setToolTipText("ToolItem ToolTip" + i);
 		}
-		
+
 		overrideToolBar = new ToolBar(shell, SWT.FLAT);
 		for (int i = 0; i < 3; i++) {
 			ToolItem item = new ToolItem(overrideToolBar, SWT.PUSH);
@@ -342,7 +338,7 @@ public class ControlsWithAccessibleNamesExample {
 		overrideToolBar.setData("name", "ToolBar");
 		overrideToolBar.setData("child", "ToolBar Item");
 		overrideToolBar.getAccessible().addAccessibleListener(overrideAccessibleAdapter);
-		
+
 //		ToolBar imageToolBar, overrideImageToolBar;
 		imageToolBar = new ToolBar(shell, SWT.FLAT);
 		for (int i = 0; i < 3; i++) {
@@ -350,7 +346,7 @@ public class ControlsWithAccessibleNamesExample {
 			item.setImage(transparentImage);
 			item.setToolTipText("Image ToolItem ToolTip" + i);
 		}
-		
+
 		overrideImageToolBar = new ToolBar(shell, SWT.FLAT);
 		for (int i = 0; i < 3; i++) {
 			ToolItem item = new ToolItem(overrideImageToolBar, SWT.PUSH);
@@ -360,7 +356,7 @@ public class ControlsWithAccessibleNamesExample {
 		overrideImageToolBar.setData("name", "Image ToolBar");
 		overrideImageToolBar.setData("child", "Image ToolBar Item");
 		overrideImageToolBar.getAccessible().addAccessibleListener(overrideAccessibleAdapter);
-		
+
 //		CoolBar coolBar, overrideCoolBar;
 		coolBar = new CoolBar(shell, SWT.FLAT);
 		for (int i = 0; i < 2; i++) {
@@ -380,7 +376,7 @@ public class ControlsWithAccessibleNamesExample {
 	        coolItem.setPreferredSize(coolSize);
 	        coolItem.setSize(coolSize);
 		}
-		
+
 		overrideCoolBar = new CoolBar(shell, SWT.FLAT);
 		for (int i = 0; i < 2; i++) {
 			CoolItem coolItem = new CoolItem(overrideCoolBar, SWT.PUSH);
@@ -402,15 +398,10 @@ public class ControlsWithAccessibleNamesExample {
 		overrideCoolBar.setData("name", "CoolBar");
 		overrideCoolBar.setData("child", "CoolBar Item");
 		overrideCoolBar.getAccessible().addAccessibleListener(overrideAccessibleAdapter);
-				
+
 //		Canvas canvas, overrideCanvas;
 		canvas = new Canvas(shell, SWT.BORDER);
-		canvas.addPaintListener(new PaintListener() {
-			@Override
-			public void paintControl(PaintEvent e) {
-				e.gc.drawString("Canvas", 15, 25);
-			}
-		});
+		canvas.addPaintListener(e -> e.gc.drawString("Canvas", 15, 25));
 		/* Set a caret into the canvas so that it will take focus. */
 		Caret caret = new Caret(canvas, SWT.NONE);
 		caret.setBounds(15, 25, 2, 20);
@@ -427,20 +418,10 @@ public class ControlsWithAccessibleNamesExample {
 			}
 		});
 		/* Hook traverse listener to make canvas give up focus during traversal out. */
-		canvas.addTraverseListener(new TraverseListener() {
-			@Override
-			public void keyTraversed(TraverseEvent e) {
-				e.doit = true;
-			}
-		});
+		canvas.addTraverseListener(e -> e.doit = true);
 
 		overrideCanvas = new Canvas(shell, SWT.BORDER);
-		overrideCanvas.addPaintListener(new PaintListener() {
-			@Override
-			public void paintControl(PaintEvent e) {
-				e.gc.drawString("Canvas", 15, 25);
-			}
-		});
+		overrideCanvas.addPaintListener(e -> e.gc.drawString("Canvas", 15, 25));
 		/* Set a caret into the canvas so that it will take focus. */
 		caret = new Caret(overrideCanvas, SWT.NONE);
 		caret.setBounds(15, 25, 2, 20);
@@ -457,15 +438,10 @@ public class ControlsWithAccessibleNamesExample {
 			}
 		});
 		/* Hook traverse listener to make canvas give up focus during traversal out. */
-		overrideCanvas.addTraverseListener(new TraverseListener() {
-			@Override
-			public void keyTraversed(TraverseEvent e) {
-				e.doit = true;
-			}
-		});
+		overrideCanvas.addTraverseListener(e -> e.doit = true);
 		overrideCanvas.setData("name", "Canvas");
 		overrideCanvas.getAccessible().addAccessibleListener(overrideAccessibleAdapter);
-		
+
 //		Composite composite, overrideComposite;
 		composite = new Composite(shell, SWT.BORDER);
 		composite.setLayout(new GridLayout());
@@ -478,20 +454,20 @@ public class ControlsWithAccessibleNamesExample {
 		new Button(overrideComposite, SWT.RADIO).setText("Child 2");
 		overrideComposite.setData("name", "Composite");
 		overrideComposite.getAccessible().addAccessibleListener(overrideAccessibleAdapter);
-		
+
 //		Group group, overrideGroup;
 		group = new Group(shell, SWT.NONE);
 		group.setText("Group");
 		group.setLayout(new FillLayout());
 		new Text(group, SWT.SINGLE).setText("Text in Group");
-		
+
 		overrideGroup = new Group(shell, SWT.NONE);
 		overrideGroup.setText("Group");
 		overrideGroup.setLayout(new FillLayout());
 		new Text(overrideGroup, SWT.SINGLE).setText("Text in Group");
 		overrideGroup.setData("name", "Group");
 		overrideGroup.getAccessible().addAccessibleListener(overrideAccessibleAdapter);
-		
+
 //		TabFolder tabFolder, overrideTabFolder;
 		tabFolder = new TabFolder(shell, SWT.NONE);
 		for (int i = 0; i < 3; i++) {
@@ -502,7 +478,7 @@ public class ControlsWithAccessibleNamesExample {
 			itemText.setText("\nText for TabItem " + i + "\n\n");
 			item.setControl(itemText);
 		}
-		
+
 		overrideTabFolder = new TabFolder(shell, SWT.NONE);
 		for (int i = 0; i < 3; i++) {
 			TabItem item = new TabItem(overrideTabFolder, SWT.NONE);
@@ -528,7 +504,7 @@ public class ControlsWithAccessibleNamesExample {
 		overrideCLabel.setLayoutData(new GridData(100, SWT.DEFAULT));
 		overrideCLabel.setData("name", "CLabel");
 		overrideCLabel.getAccessible().addAccessibleListener(overrideAccessibleAdapter);
-		
+
 //		CCombo cCombo, overrideCCombo;
 		cCombo = new CCombo(shell, SWT.BORDER);
 		for (int i = 0; i < 5; i++) {
@@ -546,7 +522,7 @@ public class ControlsWithAccessibleNamesExample {
 		overrideCCombo.setToolTipText("CCombo ToolTip");
 		overrideCCombo.setData("name", "CCombo");
 		overrideCCombo.getAccessible().addAccessibleListener(overrideAccessibleAdapter);
-				
+
 //		CTabFolder cTabFolder, overrideCTabFolder;
 		cTabFolder = new CTabFolder(shell, SWT.NONE);
 		for (int i = 0; i < 3; i++) {
@@ -558,7 +534,7 @@ public class ControlsWithAccessibleNamesExample {
 			item.setControl(itemText);
 		}
 		cTabFolder.setSelection(cTabFolder.getItem(0));
-		
+
 		overrideCTabFolder = new CTabFolder(shell, SWT.NONE);
 		for (int i = 0; i < 3; i++) {
 			CTabItem item = new CTabItem(overrideCTabFolder, SWT.NONE);
@@ -576,21 +552,21 @@ public class ControlsWithAccessibleNamesExample {
 //		StyledText styledText, overrideStyledText;
 		styledText = new StyledText(shell, SWT.SINGLE | SWT.BORDER);
 		styledText.setText("Contents of single-line StyledText");
-		
+
 		overrideStyledText = new StyledText(shell, SWT.SINGLE | SWT.BORDER);
 		overrideStyledText.setText("Contents of single-line StyledText");
 		overrideStyledText.setData("name", "StyledText");
 		overrideStyledText.getAccessible().addAccessibleListener(overrideAccessibleAdapter);
-	
+
 //		StyledText multiLineStyledText, overrideMultiLineStyledText;
 		multiLineStyledText = new StyledText(shell, SWT.MULTI | SWT.BORDER);
 		multiLineStyledText.setText("Contents of multi-line StyledText\nLine 2\nLine 3\nLine 4");
-		
+
 		overrideMultiLineStyledText = new StyledText(shell, SWT.MULTI | SWT.BORDER);
 		overrideMultiLineStyledText.setText("Contents of multi-line StyledText\nLine 2\nLine 3\nLine 4");
 		overrideMultiLineStyledText.setData("name", "MultiLineStyledText");
 		overrideMultiLineStyledText.getAccessible().addAccessibleListener(overrideAccessibleAdapter);
-	
+
 //		Scale scale, overrideScale;
 		scale = new Scale(shell, SWT.NONE);
 		scale.setToolTipText("Scale ToolTip");
@@ -614,7 +590,7 @@ public class ControlsWithAccessibleNamesExample {
 			progressBar = new ProgressBar(shell, SWT.NONE);
 			progressBar.setSelection(50);
 			progressBar.setToolTipText("ProgressBar ToolTip");
-	
+
 			overrideProgressBar = new ProgressBar(shell, SWT.NONE);
 			overrideProgressBar.setSelection(50);
 			overrideProgressBar.setToolTipText("ProgressBar ToolTip");
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/ControlsWithLabelsExample.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/ControlsWithLabelsExample.java
index 7bcce19..0feef15 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/ControlsWithLabelsExample.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/ControlsWithLabelsExample.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2008 IBM Corporation and others.
+ * Copyright (c) 2008, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -18,10 +18,6 @@ import org.eclipse.swt.custom.CTabItem;
 import org.eclipse.swt.custom.StyledText;
 import org.eclipse.swt.events.KeyAdapter;
 import org.eclipse.swt.events.KeyEvent;
-import org.eclipse.swt.events.PaintEvent;
-import org.eclipse.swt.events.PaintListener;
-import org.eclipse.swt.events.TraverseEvent;
-import org.eclipse.swt.events.TraverseListener;
 import org.eclipse.swt.graphics.Point;
 import org.eclipse.swt.layout.FillLayout;
 import org.eclipse.swt.layout.GridData;
@@ -226,12 +222,7 @@ public class ControlsWithLabelsExample {
 		new Label(shell, SWT.NONE).setText("Label for Canvas");
 		canvas = new Canvas(shell, SWT.BORDER);
 		canvas.setLayoutData(new GridData(64, 64));
-		canvas.addPaintListener(new PaintListener() {
-			@Override
-			public void paintControl(PaintEvent e) {
-				e.gc.drawString("Canvas", 15, 25);
-			}
-		});
+		canvas.addPaintListener(e -> e.gc.drawString("Canvas", 15, 25));
 		canvas.setCaret (new Caret(canvas, SWT.NONE));
 		/* Hook key listener so canvas will take focus during traversal in. */
 		canvas.addKeyListener(new KeyAdapter() {
@@ -243,12 +234,7 @@ public class ControlsWithLabelsExample {
 			}
 		});
 		/* Hook traverse listener to make canvas give up focus during traversal out. */
-		canvas.addTraverseListener(new TraverseListener() {
-			@Override
-			public void keyTraversed(TraverseEvent e) {
-				e.doit = true;
-			}
-		});
+		canvas.addTraverseListener(e -> e.doit = true);
 
 		new Label(shell, SWT.NONE).setText("Label for Group");
 		group = new Group(shell, SWT.NONE);
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/Shape.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/Shape.java
index 8b392b0..6e1e047 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/Shape.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/Shape.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2008 IBM Corporation and others.
+ * Copyright (c) 2008, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -25,10 +25,6 @@ import org.eclipse.swt.events.KeyAdapter;
 import org.eclipse.swt.events.KeyEvent;
 import org.eclipse.swt.events.MouseAdapter;
 import org.eclipse.swt.events.MouseEvent;
-import org.eclipse.swt.events.PaintEvent;
-import org.eclipse.swt.events.PaintListener;
-import org.eclipse.swt.events.TraverseEvent;
-import org.eclipse.swt.events.TraverseListener;
 import org.eclipse.swt.graphics.Color;
 import org.eclipse.swt.graphics.GC;
 import org.eclipse.swt.graphics.Rectangle;
@@ -48,7 +44,7 @@ public class Shape extends Canvas {
 	static ResourceBundle bundle = ResourceBundle.getBundle("examples_accessibility");
 	int color = SWT.COLOR_BLUE;
 	int shape = SQUARE;
-	
+
 	/**
 	 * Constructs a new instance of this class given its parent
 	 * and a style value describing its behavior and appearance.
@@ -63,24 +59,21 @@ public class Shape extends Canvas {
 	}
 
 	void addListeners() {
-		addPaintListener(new PaintListener() {
-			@Override
-			public void paintControl(PaintEvent e) {
-				GC gc = e.gc;
-				Display display = getDisplay();
-				Color c = display.getSystemColor(color);
-				gc.setBackground(c);
-				Rectangle rect = getClientArea();
-				int length = Math.min(rect.width, rect.height);
-				if (shape == CIRCLE) {
-					gc.fillOval(0, 0, length, length);
-				} else {
-					gc.fillRectangle(0, 0, length, length);
-				}
-				if (isFocusControl()) gc.drawFocus(rect.x, rect.y, rect.width, rect.height);
+		addPaintListener(e -> {
+			GC gc = e.gc;
+			Display display = getDisplay();
+			Color c = display.getSystemColor(color);
+			gc.setBackground(c);
+			Rectangle rect = getClientArea();
+			int length = Math.min(rect.width, rect.height);
+			if (shape == CIRCLE) {
+				gc.fillOval(0, 0, length, length);
+			} else {
+				gc.fillRectangle(0, 0, length, length);
 			}
+			if (isFocusControl()) gc.drawFocus(rect.x, rect.y, rect.width, rect.height);
 		});
-		
+
 		addFocusListener(new FocusAdapter() {
 			@Override
 			public void focusGained(FocusEvent e) {
@@ -91,7 +84,7 @@ public class Shape extends Canvas {
 				redraw();
 			}
 		});
-		
+
 		addMouseListener(new MouseAdapter() {
 			@Override
 			public void mouseDown(MouseEvent e) {
@@ -100,23 +93,20 @@ public class Shape extends Canvas {
 				}
 			}
 		});
-		
+
 		addKeyListener(new KeyAdapter() {
 			@Override
 			public void keyPressed(KeyEvent e) {
 				// key listener enables traversal out
 			}
 		});
-		
-		addTraverseListener(new TraverseListener() {
-			@Override
-			public void keyTraversed(TraverseEvent e) {
-				switch (e.detail) {
-					case SWT.TRAVERSE_TAB_NEXT:
-					case SWT.TRAVERSE_TAB_PREVIOUS:
-						e.doit = true;
-						break;
-				}
+
+		addTraverseListener(e -> {
+			switch (e.detail) {
+				case SWT.TRAVERSE_TAB_NEXT:
+				case SWT.TRAVERSE_TAB_PREVIOUS:
+					e.doit = true;
+					break;
 			}
 		});
 
@@ -130,7 +120,7 @@ public class Shape extends Canvas {
 				e.result = formatter.format(new String [] {colorName, shapeName}); //$NON_NLS$
 			}
 		});
-		
+
 		getAccessible().addAccessibleControlListener(new AccessibleControlAdapter() {
 			@Override
 			public void getRole(AccessibleControlEvent e) {
@@ -143,11 +133,11 @@ public class Shape extends Canvas {
 			}
 		});
 	}
-	
+
 	/**
 	 * Return the receiver's color.
 	 * The default color is SWT.COLOR_BLUE.
-	 * 
+	 *
 	 * @return the color, which may be any of the SWT.COLOR_ constants
 	 */
 	public int getColor () {
@@ -157,7 +147,7 @@ public class Shape extends Canvas {
 	/**
 	 * Return the receiver's shape.
 	 * The default shape is SQUARE.
-	 * 
+	 *
 	 * @return the shape, which may be either CIRCLE or SQUARE
 	 */
 	public int getShape () {
@@ -167,7 +157,7 @@ public class Shape extends Canvas {
 	/**
 	 * Set the receiver's color to the specified color.
 	 * The default color is SWT.COLOR_BLUE.
-	 * 
+	 *
 	 * @param color any of the SWT.COLOR_ constants
 	 */
 	public void setColor (int color) {
@@ -177,7 +167,7 @@ public class Shape extends Canvas {
 	/**
 	 * Set the receiver's shape to the specified shape.
 	 * The default shape is SQUARE.
-	 * 
+	 *
 	 * @param shape an int that can be either CIRCLE or SQUARE
 	 */
 	public void setShape (int shape) {
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/addressbook/AddressBook.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/addressbook/AddressBook.java
index 87b7892..d3c781c 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/addressbook/AddressBook.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/addressbook/AddressBook.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2006 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -42,8 +42,8 @@ import org.eclipse.swt.widgets.TableColumn;
 import org.eclipse.swt.widgets.TableItem;
 
 /**
- * AddressBookExample is an example that uses <code>org.eclipse.swt</code> 
- * libraries to implement a simple address book.  This application has 
+ * AddressBookExample is an example that uses <code>org.eclipse.swt</code>
+ * libraries to implement a simple address book.  This application has
  * save, load, sorting, and searching functions common
  * to basic address books.
  */
@@ -51,17 +51,17 @@ public class AddressBook {
 
 	private static ResourceBundle resAddressBook = ResourceBundle.getBundle("examples_addressbook");
 	private Shell shell;
-	
+
 	private Table table;
 	private SearchDialog searchDialog;
-	
+
 	private File file;
 	private boolean isModified;
-	
+
 	private String[] copyBuffer;
 
 	private int lastSortColumn= -1;
-	
+
 	private static final String DELIMITER = "\t";
 	private static final String[] columnNames = {resAddressBook.getString("Last_name"),
 												 resAddressBook.getString("First_name"),
@@ -69,7 +69,7 @@ public class AddressBook {
 												 resAddressBook.getString("Home_phone"),
 												 resAddressBook.getString("Email"),
 												 resAddressBook.getString("Fax")};
-	
+
 public static void main(String[] args) {
 	Display display = new Display();
 	AddressBook application = new AddressBook();
@@ -89,22 +89,17 @@ public Shell open(Display display) {
 			e.doit = closeAddressBook();
 		}
 	});
-	
+
 	createMenuBar();
 
 	searchDialog = new SearchDialog(shell);
 	searchDialog.setSearchAreaNames(columnNames);
 	searchDialog.setSearchAreaLabel(resAddressBook.getString("Column"));
-	searchDialog.addFindListener(new FindListener () {
-		@Override
-		public boolean find() {
-			return findEntry();
-		}
-	});
-					
+	searchDialog.addFindListener(() -> findEntry());
+
 	table = new Table(shell, SWT.SINGLE | SWT.BORDER | SWT.FULL_SELECTION);
-	table.setHeaderVisible(true);	
-	table.setMenu(createPopUpMenu());	
+	table.setHeaderVisible(true);
+	table.setMenu(createPopUpMenu());
 	table.addSelectionListener(new SelectionAdapter() {
 		@Override
 		public void widgetDefaultSelected(SelectionEvent e) {
@@ -117,7 +112,7 @@ public Shell open(Display display) {
 		column.setText(columnNames[i]);
 		column.setWidth(150);
 		final int columnIndex = i;
-		column.addSelectionListener(new SelectionAdapter() {		
+		column.addSelectionListener(new SelectionAdapter() {
 			@Override
 			public void widgetSelected(SelectionEvent e) {
 				sort(columnIndex);
@@ -138,7 +133,7 @@ private boolean closeAddressBook() {
 		MessageBox box = new MessageBox(shell, SWT.ICON_WARNING | SWT.YES | SWT.NO | SWT.CANCEL);
 		box.setText(shell.getText());
 		box.setMessage(resAddressBook.getString("Close_save"));
-	
+
 		int choice = box.open();
 		if(choice == SWT.CANCEL) {
 			return false;
@@ -146,12 +141,12 @@ private boolean closeAddressBook() {
 			if (!save()) return false;
 		}
 	}
-		
+
 	TableItem[] items = table.getItems();
 	for (int i = 0; i < items.length; i ++) {
 		items[i].dispose();
 	}
-	
+
 	return true;
 }
 /**
@@ -163,13 +158,13 @@ private boolean closeAddressBook() {
 private Menu createMenuBar() {
 	Menu menuBar = new Menu(shell, SWT.BAR);
 	shell.setMenuBar(menuBar);
-	
+
 	//create each header and subMenu for the menuBar
 	createFileMenu(menuBar);
 	createEditMenu(menuBar);
 	createSearchMenu(menuBar);
 	createHelpMenu(menuBar);
-	
+
 	return menuBar;
 }
 
@@ -178,7 +173,7 @@ private Menu createMenuBar() {
  */
 private String[] decodeLine(String line) {
 	if(line == null) return null;
-	
+
 	String[] parsedLine = new String[table.getColumnCount()];
 	for(int i = 0; i < parsedLine.length - 1; i++) {
 		int index = line.indexOf(DELIMITER);
@@ -189,9 +184,9 @@ private String[] decodeLine(String line) {
 			return null;
 		}
 	}
-	
+
 	if (line.indexOf(DELIMITER) != -1) return null;
-	
+
 	parsedLine[parsedLine.length - 1] = line;
 
 	return parsedLine;
@@ -221,20 +216,20 @@ private String encodeLine(String[] tableItems) {
 		line += tableItems[i] + DELIMITER;
 	}
 	line += tableItems[tableItems.length - 1] + "\n";
-	
+
 	return line;
 }
 private boolean findEntry() {
 	Cursor waitCursor = shell.getDisplay().getSystemCursor(SWT.CURSOR_WAIT);
 	shell.setCursor(waitCursor);
-	
+
 	boolean matchCase = searchDialog.getMatchCase();
 	boolean matchWord = searchDialog.getMatchWord();
 	String searchString = searchDialog.getSearchString();
 	int column = searchDialog.getSelectedSearchArea();
-	
+
 	searchString = matchCase ? searchString : searchString.toLowerCase();
-	
+
 	boolean found = false;
 	if (searchDialog.getSearchDown()) {
 		for(int i = table.getSelectionIndex() + 1; i < table.getItemCount(); i++) {
@@ -251,19 +246,19 @@ private boolean findEntry() {
 			}
 		}
 	}
-	
+
 	shell.setCursor(null);
-		
+
 	return found;
 }
 private boolean findMatch(String searchString, TableItem item, int column, boolean matchWord, boolean matchCase) {
-	
+
 	String tableText = matchCase ? item.getText(column) : item.getText(column).toLowerCase();
 	if (matchWord) {
 		if (tableText != null && tableText.equals(searchString)) {
 			return true;
 		}
-		
+
 	} else {
 		if(tableText!= null && tableText.indexOf(searchString) != -1) {
 			return true;
@@ -271,7 +266,7 @@ private boolean findMatch(String searchString, TableItem item, int column, boole
 	}
 	return false;
 }
-private void newAddressBook() {	
+private void newAddressBook() {
 	shell.setText(resAddressBook.getString("Title_bar") + resAddressBook.getString("New_title"));
 	file = null;
 	isModified = false;
@@ -287,24 +282,24 @@ private void newEntry() {
 	}
 }
 
-private void openAddressBook() {	
+private void openAddressBook() {
 	FileDialog fileDialog = new FileDialog(shell, SWT.OPEN);
 
 	fileDialog.setFilterExtensions(new String[] {"*.adr;", "*.*"});
-	fileDialog.setFilterNames(new String[] {resAddressBook.getString("Book_filter_name") + " (*.adr)", 
+	fileDialog.setFilterNames(new String[] {resAddressBook.getString("Book_filter_name") + " (*.adr)",
 											resAddressBook.getString("All_filter_name") + " (*.*)"});
 	String name = fileDialog.open();
 
 	if(name == null) return;
 	File file = new File(name);
 	if (!file.exists()) {
-		displayError(resAddressBook.getString("File")+file.getName()+" "+resAddressBook.getString("Does_not_exist")); 
+		displayError(resAddressBook.getString("File")+file.getName()+" "+resAddressBook.getString("Does_not_exist"));
 		return;
 	}
-	
+
 	Cursor waitCursor = shell.getDisplay().getSystemCursor(SWT.CURSOR_WAIT);
 	shell.setCursor(waitCursor);
-	
+
 	FileReader fileReader = null;
 	BufferedReader bufferedReader = null;
 	String[] data = new String[0];
@@ -325,10 +320,10 @@ private void openAddressBook() {
 	} catch (IOException e ) {
 		displayError(resAddressBook.getString("IO_error_read") + "\n" + file.getName());
 		return;
-	} finally {	
-		
+	} finally {
+
 		shell.setCursor(null);
-	
+
 		if(fileReader != null) {
 			try {
 				fileReader.close();
@@ -338,7 +333,7 @@ private void openAddressBook() {
 			}
 		}
 	}
-	
+
 	String[][] tableInfo = new String[data.length][table.getColumnCount()];
 	int writeIndex = 0;
 	for (int i = 0; i < data.length; i++) {
@@ -362,10 +357,10 @@ private void openAddressBook() {
 }
 private boolean save() {
 	if(file == null) return saveAs();
-	
+
 	Cursor waitCursor = new Cursor(shell.getDisplay(), SWT.CURSOR_WAIT);
 	shell.setCursor(waitCursor);
-	
+
 	TableItem[] items = table.getItems();
 	String[] lines = new String[items.length];
 	for(int i = 0; i < items.length; i++) {
@@ -375,9 +370,9 @@ private boolean save() {
 		}
 		lines[i] = encodeLine(itemText);
 	}
-		
+
 	FileWriter fileWriter = null;
-	try { 
+	try {
 		fileWriter = new FileWriter(file.getAbsolutePath(), false);
 		for (int i = 0; i < lines.length; i++) {
 			fileWriter.write(lines[i]);
@@ -390,7 +385,7 @@ private boolean save() {
 		return false;
 	} finally {
 		shell.setCursor(null);
-		
+
 		if(fileWriter != null) {
 			try {
 				fileWriter.close();
@@ -406,14 +401,14 @@ private boolean save() {
 	return true;
 }
 private boolean saveAs() {
-		
+
 	FileDialog saveDialog = new FileDialog(shell, SWT.SAVE);
 	saveDialog.setFilterExtensions(new String[] {"*.adr;",  "*.*"});
 	saveDialog.setFilterNames(new String[] {"Address Books (*.adr)", "All Files "});
-	
+
 	saveDialog.open();
 	String name = saveDialog.getFileName();
-		
+
 	if(name.isEmpty()) return false;
 
 	if(name.indexOf(".adr") != name.length() - 4) {
@@ -430,7 +425,7 @@ private boolean saveAs() {
 		}
 	}
 	this.file = file;
-	return save();	
+	return save();
 }
 private void sort(int column) {
 	if(table.getItemCount() <= 1) return;
@@ -442,9 +437,9 @@ private void sort(int column) {
 			data[i][j] = items[i].getText(j);
 		}
 	}
-	
+
 	Arrays.sort(data, new RowComparator(column));
-	
+
 	if (lastSortColumn != column) {
 		table.setSortColumn(table.getColumn(column));
 		table.setSortDirection(SWT.DOWN);
@@ -461,7 +456,7 @@ private void sort(int column) {
 		}
 		lastSortColumn = -1;
 	}
-	
+
 }
 /**
  * Creates all the items located in the File submenu and
@@ -478,8 +473,8 @@ private void createFileMenu(Menu menuBar) {
 	item.setText(resAddressBook.getString("File_menu_title"));
 	Menu menu = new Menu(shell, SWT.DROP_DOWN);
 	item.setMenu(menu);
-	/** 
-	 * Adds a listener to handle enabling and disabling 
+	/**
+	 * Adds a listener to handle enabling and disabling
 	 * some items in the Edit submenu.
 	 */
 	menu.addMenuListener(new MenuAdapter() {
@@ -516,9 +511,9 @@ private void createFileMenu(Menu menuBar) {
 		}
 	});
 
-	
+
 	new MenuItem(menu, SWT.SEPARATOR);
-	
+
 	//File -> New Address Book
 	subItem = new MenuItem(menu, SWT.NONE);
 	subItem.setText(resAddressBook.getString("New_address_book"));
@@ -555,7 +550,7 @@ private void createFileMenu(Menu menuBar) {
 			save();
 		}
 	});
-	
+
 	//File -> Save As.
 	subItem = new MenuItem(menu, SWT.NONE);
 	subItem.setText(resAddressBook.getString("Save_book_as"));
@@ -567,9 +562,9 @@ private void createFileMenu(Menu menuBar) {
 		}
 	});
 
-		
+
 	new MenuItem(menu, SWT.SEPARATOR);
-	
+
 	//File -> Exit.
 	subItem = new MenuItem(menu, SWT.NONE);
 	subItem.setText(resAddressBook.getString("Exit"));
@@ -598,9 +593,9 @@ private MenuItem createEditMenu(Menu menuBar) {
 	item.setText(resAddressBook.getString("Edit_menu_title"));
 	Menu menu = new Menu(shell, SWT.DROP_DOWN);
 	item.setMenu(menu);
-	
-	/** 
-	 * Add a listener to handle enabling and disabling 
+
+	/**
+	 * Add a listener to handle enabling and disabling
 	 * some items in the Edit submenu.
 	 */
 	menu.addMenuListener(new MenuAdapter() {
@@ -616,7 +611,7 @@ private MenuItem createEditMenu(Menu menuBar) {
 			items[5].setEnabled(table.getItemCount() != 0); // sort
 		}
 	});
-	
+
 	//Edit -> Edit
 	MenuItem subItem = new MenuItem(menu, SWT.PUSH);
 	subItem.setText(resAddressBook.getString("Edit"));
@@ -645,7 +640,7 @@ private MenuItem createEditMenu(Menu menuBar) {
 			}
 		}
 	});
-	
+
 	//Edit -> Paste
 	subItem = new MenuItem(menu, SWT.NONE);
 	subItem.setText(resAddressBook.getString("Paste"));
@@ -659,7 +654,7 @@ private MenuItem createEditMenu(Menu menuBar) {
 			isModified = true;
 		}
 	});
-	
+
 	//Edit -> Delete
 	subItem = new MenuItem(menu, SWT.NONE);
 	subItem.setText(resAddressBook.getString("Delete"));
@@ -671,17 +666,17 @@ private MenuItem createEditMenu(Menu menuBar) {
 			items[0].dispose();
 			isModified = true;		}
 	});
-	
+
 	new MenuItem(menu, SWT.SEPARATOR);
-	
+
 	//Edit -> Sort(Cascade)
 	subItem = new MenuItem(menu, SWT.CASCADE);
 	subItem.setText(resAddressBook.getString("Sort"));
 	Menu submenu = createSortMenu();
 	subItem.setMenu(submenu);
-	
+
 	return item;
-	
+
 }
 
 /**
@@ -707,7 +702,7 @@ private Menu createSortMenu() {
 		});
 
 	}
-	
+
 	return submenu;
 }
 
@@ -755,7 +750,7 @@ private void createSearchMenu(Menu menuBar) {
 	});
 }
 
-/** 
+/**
  * Creates all items located in the popup menu and associates
  * all the menu items with their appropriate functions.
  *
@@ -765,8 +760,8 @@ private void createSearchMenu(Menu menuBar) {
 private Menu createPopUpMenu() {
 	Menu popUpMenu = new Menu(shell, SWT.POP_UP);
 
-	/** 
-	 * Adds a listener to handle enabling and disabling 
+	/**
+	 * Adds a listener to handle enabling and disabling
 	 * some items in the Edit submenu.
 	 */
 	popUpMenu.addMenuListener(new MenuAdapter() {
@@ -792,9 +787,9 @@ private Menu createPopUpMenu() {
 			newEntry();
 		}
 	});
-	
-	new MenuItem(popUpMenu, SWT.SEPARATOR);	
-	
+
+	new MenuItem(popUpMenu, SWT.SEPARATOR);
+
 	//Edit
 	item = new MenuItem(popUpMenu, SWT.PUSH);
 	item.setText(resAddressBook.getString("Pop_up_edit"));
@@ -821,7 +816,7 @@ private Menu createPopUpMenu() {
 			}
 		}
 	});
-	
+
 	//Paste
 	item = new MenuItem(popUpMenu, SWT.PUSH);
 	item.setText(resAddressBook.getString("Pop_up_paste"));
@@ -834,7 +829,7 @@ private Menu createPopUpMenu() {
 			isModified = true;
 		}
 	});
-	
+
 	//Delete
 	item = new MenuItem(popUpMenu, SWT.PUSH);
 	item.setText(resAddressBook.getString("Pop_up_delete"));
@@ -847,9 +842,9 @@ private Menu createPopUpMenu() {
 			isModified = true;
 		}
 	});
-	
-	new MenuItem(popUpMenu, SWT.SEPARATOR);	
-	
+
+	new MenuItem(popUpMenu, SWT.SEPARATOR);
+
 	//Find...
 	item = new MenuItem(popUpMenu, SWT.PUSH);
 	item.setText(resAddressBook.getString("Pop_up_find"));
@@ -873,13 +868,13 @@ private Menu createPopUpMenu() {
  *				the Help submenu.
  */
 private void createHelpMenu(Menu menuBar) {
-	
+
 	//Help Menu
 	MenuItem item = new MenuItem(menuBar, SWT.CASCADE);
-	item.setText(resAddressBook.getString("Help_menu_title"));	
+	item.setText(resAddressBook.getString("Help_menu_title"));
 	Menu menu = new Menu(shell, SWT.DROP_DOWN);
 	item.setMenu(menu);
-	
+
 	//Help -> About Text Editor
 	MenuItem subItem = new MenuItem(menu, SWT.NONE);
 	subItem.setText(resAddressBook.getString("About"));
@@ -889,7 +884,7 @@ private void createHelpMenu(Menu menuBar) {
 			MessageBox box = new MessageBox(shell, SWT.NONE);
 			box.setText(resAddressBook.getString("About_1") + shell.getText());
 			box.setMessage(shell.getText() + resAddressBook.getString("About_2"));
-			box.open();		
+			box.open();
 		}
 	});
 }
@@ -899,7 +894,7 @@ private void createHelpMenu(Menu menuBar) {
  */
 private class RowComparator implements Comparator<String[]> {
 	private int column;
-	
+
 	/**
 	 * Constructs a RowComparator given the column index
 	 * @param col The index (starting at zero) of the column
@@ -907,7 +902,7 @@ private class RowComparator implements Comparator<String[]> {
 	public RowComparator(int col) {
 		column = col;
 	}
-	
+
 	/**
 	 * Compares two rows (type String[]) using the specified
 	 * column entry.
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/addressbook/DataEntryDialog.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/addressbook/DataEntryDialog.java
index 03fd4e1..49ab5d0 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/addressbook/DataEntryDialog.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/addressbook/DataEntryDialog.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2005 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -15,8 +15,6 @@ package org.eclipse.swt.examples.addressbook;
 import java.util.ResourceBundle;
 
 import org.eclipse.swt.SWT;
-import org.eclipse.swt.events.ModifyEvent;
-import org.eclipse.swt.events.ModifyListener;
 import org.eclipse.swt.events.SelectionAdapter;
 import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.layout.GridData;
@@ -29,31 +27,28 @@ import org.eclipse.swt.widgets.Shell;
 import org.eclipse.swt.widgets.Text;
 
 /**
- * DataEntryDialog class uses <code>org.eclipse.swt</code> 
+ * DataEntryDialog class uses <code>org.eclipse.swt</code>
  * libraries to implement a dialog that accepts basic personal information that
- * is added to a <code>Table</code> widget or edits a <code>TableItem</code> entry 
+ * is added to a <code>Table</code> widget or edits a <code>TableItem</code> entry
  * to represent the entered data.
  */
 public class DataEntryDialog {
 
 	private static ResourceBundle resAddressBook = ResourceBundle.getBundle("examples_addressbook");
-	
+
 	Shell shell;
 	String[] values;
 	String[] labels;
-	
+
 public DataEntryDialog(Shell parent) {
 	shell = new Shell(parent, SWT.DIALOG_TRIM | SWT.PRIMARY_MODAL);
-	shell.setLayout(new GridLayout());		
+	shell.setLayout(new GridLayout());
 }
 
 private void addTextListener(final Text text) {
-	text.addModifyListener(new ModifyListener() {
-		@Override
-		public void modifyText(ModifyEvent e){
-			Integer index = (Integer)(text.getData("index"));
-			values[index.intValue()] = text.getText();
-		}
+	text.addModifyListener(e -> {
+		Integer index = (Integer)(text.getData("index"));
+		values[index.intValue()] = text.getText();
 	});
 }
 private void createControlButtons() {
@@ -62,7 +57,7 @@ private void createControlButtons() {
 	GridLayout layout = new GridLayout();
 	layout.numColumns = 2;
 	composite.setLayout(layout);
-	
+
 	Button okButton = new Button(composite, SWT.PUSH);
 	okButton.setText(resAddressBook.getString("OK"));
 	okButton.addSelectionListener(new SelectionAdapter() {
@@ -71,7 +66,7 @@ private void createControlButtons() {
 			shell.close();
 		}
 	});
-	
+
 	Button cancelButton = new Button(composite, SWT.PUSH);
 	cancelButton.setText(resAddressBook.getString("Cancel"));
 	cancelButton.addSelectionListener(new SelectionAdapter() {
@@ -81,25 +76,25 @@ private void createControlButtons() {
 			shell.close();
 		}
 	});
-	
+
 	shell.setDefaultButton(okButton);
 }
 
 private void createTextWidgets() {
 	if (labels == null) return;
-	
+
 	Composite composite = new Composite(shell, SWT.NONE);
 	composite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
 	GridLayout layout= new GridLayout();
 	layout.numColumns = 2;
 	composite.setLayout(layout);
-	
+
 	if (values == null)
 		values = new String[labels.length];
-	
+
 	for (int i = 0; i < labels.length; i++) {
 		Label label = new Label(composite, SWT.RIGHT);
-		label.setText(labels[i]);	
+		label.setText(labels[i]);
 		Text text = new Text(composite, SWT.BORDER);
 		GridData gridData = new GridData();
 		gridData.widthHint = 400;
@@ -108,7 +103,7 @@ private void createTextWidgets() {
 			text.setText(values[i]);
 		}
 		text.setData("index", new Integer(i));
-		addTextListener(text);	
+		addTextListener(text);
 	}
 }
 
@@ -119,18 +114,18 @@ public String getTitle() {
 	return shell.getText();
 }
 /**
- * Returns the contents of the <code>Text</code> widgets in the dialog in a 
+ * Returns the contents of the <code>Text</code> widgets in the dialog in a
  * <code>String</code> array.
  *
- * @return	String[]	
+ * @return	String[]
  *			The contents of the text widgets of the dialog.
  *			May return null if all text widgets are empty.
- */ 
+ */
 public String[] getValues() {
 	return values;
 }
-/** 
- * Opens the dialog in the given state.  Sets <code>Text</code> widget contents 
+/**
+ * Opens the dialog in the given state.  Sets <code>Text</code> widget contents
  * and dialog behaviour accordingly.
  *
  * @param 	dialogState	int
@@ -146,7 +141,7 @@ public String[] open() {
 		if(!display.readAndDispatch())
 			display.sleep();
 	}
-	
+
 	return getValues();
 }
 public void setLabels(String[] labels) {
@@ -164,13 +159,13 @@ public void setTitle(String title) {
  */
 public void setValues(String[] itemInfo) {
 	if (labels == null) return;
-	
+
 	if (values == null)
 		values = new String[labels.length];
 
 	int numItems = Math.min(values.length, itemInfo.length);
 	for(int i = 0; i < numItems; i++) {
 		values[i] = itemInfo[i];
-	}	
+	}
 }
 }
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/addressbook/SearchDialog.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/addressbook/SearchDialog.java
index df99363..166104c 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/addressbook/SearchDialog.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/addressbook/SearchDialog.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2003 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -15,8 +15,6 @@ package org.eclipse.swt.examples.addressbook;
 import java.util.ResourceBundle;
 
 import org.eclipse.swt.SWT;
-import org.eclipse.swt.events.ModifyEvent;
-import org.eclipse.swt.events.ModifyListener;
 import org.eclipse.swt.events.SelectionAdapter;
 import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.events.ShellAdapter;
@@ -34,7 +32,7 @@ import org.eclipse.swt.widgets.Shell;
 import org.eclipse.swt.widgets.Text;
 
 /**
- * SearchDialog is a simple class that uses <code>org.eclipse.swt</code> 
+ * SearchDialog is a simple class that uses <code>org.eclipse.swt</code>
  * libraries to implement a basic search dialog.
  */
 public class SearchDialog {
@@ -55,7 +53,7 @@ public class SearchDialog {
  * Class constructor that sets the parent shell and the table widget that
  * the dialog will search.
  *
- * @param parent	Shell 
+ * @param parent	Shell
  *			The shell that is the parent of the dialog.
  */
 public SearchDialog(Shell parent) {
@@ -72,19 +70,16 @@ public SearchDialog(Shell parent) {
 			shell.setVisible(false);
 		}
 	});
-		
+
 	Label label = new Label(shell, SWT.LEFT);
-	label.setText(resAddressBook.getString("Dialog_find_what"));	
+	label.setText(resAddressBook.getString("Dialog_find_what"));
 	searchText = new Text(shell, SWT.BORDER);
 	GridData gridData = new GridData(GridData.FILL_HORIZONTAL);
 	gridData.widthHint = 200;
 	searchText.setLayoutData(gridData);
-	searchText.addModifyListener(new ModifyListener() {
-		@Override
-		public void modifyText(ModifyEvent e) {
-			boolean enableFind = (searchText.getCharCount() != 0);
-			findButton.setEnabled(enableFind);
-		}
+	searchText.addModifyListener(e -> {
+		boolean enableFind = (searchText.getCharCount() != 0);
+		findButton.setEnabled(enableFind);
 	});
 
 	searchAreaLabel = new Label(shell, SWT.LEFT);
@@ -92,30 +87,30 @@ public SearchDialog(Shell parent) {
 	gridData = new GridData(GridData.FILL_HORIZONTAL);
 	gridData.widthHint = 200;
 	searchArea.setLayoutData(gridData);
-	
+
 	matchCase = new Button(shell, SWT.CHECK);
 	matchCase.setText(resAddressBook.getString("Dialog_match_case"));
 	gridData = new GridData();
 	gridData.horizontalSpan = 2;
 	matchCase.setLayoutData(gridData);
-	
+
 	matchWord = new Button(shell, SWT.CHECK);
 	matchWord.setText(resAddressBook.getString("Dialog_match_word"));
 	gridData = new GridData();
 	gridData.horizontalSpan = 2;
 	matchWord.setLayoutData(gridData);
-	
+
 	Group direction = new Group(shell, SWT.NONE);
 	gridData = new GridData();
 	gridData.horizontalSpan = 2;
 	direction.setLayoutData(gridData);
-	direction.setLayout (new FillLayout ());	
+	direction.setLayout (new FillLayout ());
 	direction.setText(resAddressBook.getString("Dialog_direction"));
-	
+
 	Button up = new Button(direction, SWT.RADIO);
 	up.setText(resAddressBook.getString("Dialog_dir_up"));
 	up.setSelection(false);
-		
+
 	down = new Button(direction, SWT.RADIO);
 	down.setText(resAddressBook.getString("Dialog_dir_down"));
 	down.setSelection(true);
@@ -128,7 +123,7 @@ public SearchDialog(Shell parent) {
 	layout.numColumns = 2;
 	layout.makeColumnsEqualWidth = true;
 	composite.setLayout(layout);
-	
+
 	findButton = new Button(composite, SWT.PUSH);
 	findButton.setText(resAddressBook.getString("Dialog_find"));
 	findButton.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_END));
@@ -140,11 +135,11 @@ public SearchDialog(Shell parent) {
 				MessageBox box = new MessageBox(shell, SWT.ICON_INFORMATION | SWT.OK | SWT.PRIMARY_MODAL);
 				box.setText(shell.getText());
 				box.setMessage(resAddressBook.getString("Cannot_find") + "\"" + searchText.getText() + "\"");
-				box.open();	
-			}		
+				box.open();
+			}
 		}
 	});
-			
+
 	Button cancelButton = new Button(composite, SWT.PUSH);
 	cancelButton.setText(resAddressBook.getString("Cancel"));
 	cancelButton.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING));
@@ -154,7 +149,7 @@ public SearchDialog(Shell parent) {
 			shell.setVisible(false);
 		}
 	});
-	
+
 	shell.pack();
 }
 public String getSearchAreaLabel(String label) {
@@ -213,7 +208,7 @@ public void setSelectedSearchArea(int index) {
 	searchArea.select(index);
 }
 public void addFindListener(FindListener listener) {
-	this.findHandler = listener;	
+	this.findHandler = listener;
 }
 public void removeFindListener(FindListener listener) {
 	this.findHandler = null;
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/browserexample/BrowserExample.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/browserexample/BrowserExample.java
index 252740b..089f818 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/browserexample/BrowserExample.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/browserexample/BrowserExample.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2006 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -18,16 +18,10 @@ import java.util.ResourceBundle;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.SWTError;
 import org.eclipse.swt.browser.Browser;
-import org.eclipse.swt.browser.CloseWindowListener;
 import org.eclipse.swt.browser.LocationEvent;
 import org.eclipse.swt.browser.LocationListener;
-import org.eclipse.swt.browser.OpenWindowListener;
 import org.eclipse.swt.browser.ProgressEvent;
 import org.eclipse.swt.browser.ProgressListener;
-import org.eclipse.swt.browser.StatusTextEvent;
-import org.eclipse.swt.browser.StatusTextListener;
-import org.eclipse.swt.browser.TitleEvent;
-import org.eclipse.swt.browser.TitleListener;
 import org.eclipse.swt.browser.VisibilityWindowListener;
 import org.eclipse.swt.browser.WindowEvent;
 import org.eclipse.swt.graphics.Image;
@@ -72,7 +66,7 @@ public class BrowserExample {
 			"eclipse06.bmp", "eclipse07.bmp", "eclipse08.bmp", "eclipse09.bmp", "eclipse10.bmp",
 			"eclipse11.bmp", "eclipse12.bmp",};
 	static final String iconLocation = "document.gif";
-		
+
 	public BrowserExample(Composite parent, boolean top) {
 		this.parent = parent;
 		try {
@@ -89,16 +83,13 @@ public class BrowserExample {
 		initResources();
 		final Display display = parent.getDisplay();
 		browser.setData("org.eclipse.swt.examples.browserexample.BrowserApplication", this);
-		browser.addOpenWindowListener(new OpenWindowListener() {
-			@Override
-			public void open(WindowEvent event) {
-				Shell shell = new Shell(display);
-				if (icon != null) shell.setImage(icon);
-				shell.setLayout(new FillLayout());
-				BrowserExample app = new BrowserExample(shell, false);
-				app.setShellDecoration(icon, true);
-				event.browser = app.getBrowser();
-			}
+		browser.addOpenWindowListener(event -> {
+			Shell shell = new Shell(display);
+			if (icon != null) shell.setImage(icon);
+			shell.setLayout(new FillLayout());
+			BrowserExample app = new BrowserExample(shell, false);
+			app.setShellDecoration(icon, true);
+			event.browser = app.getBrowser();
 		});
 		if (top) {
 			browser.setUrl(getResourceString("Startup"));
@@ -115,13 +106,10 @@ public class BrowserExample {
 					app.show(true, e.location, e.size, e.addressBar, e.menuBar, e.statusBar, e.toolBar);
 				}
 			});
-			browser.addCloseWindowListener(new CloseWindowListener() {
-				@Override
-				public void close(WindowEvent event) {
-					Browser browser = (Browser)event.widget;
-					Shell shell = browser.getShell();
-					shell.close();
-				}
+			browser.addCloseWindowListener(event -> {
+				Browser browser = (Browser)event.widget;
+				Shell shell = browser.getShell();
+				shell.close();
 			});
 		}
 	}
@@ -129,11 +117,11 @@ public class BrowserExample {
 	/**
 	 * Disposes of all resources associated with a particular
 	 * instance of the BrowserApplication.
-	 */	
+	 */
 	public void dispose() {
 		freeResources();
 	}
-	
+
 	/**
 	 * Gets a string from the resource bundle.
 	 * We don't want to crash because of a missing String.
@@ -146,18 +134,18 @@ public class BrowserExample {
 			return key;
 		} catch (NullPointerException e) {
 			return "!" + key + "!";
-		}			
+		}
 	}
-	
+
 	public SWTError getError() { return error; }
-	
+
 	public Browser getBrowser() { return browser; }
-	
+
 	public void setShellDecoration(Image icon, boolean title) {
 		this.icon = icon;
 		this.title = title;
 	}
-	
+
 	void show(boolean owned, Point location, Point size, boolean addressBar, boolean menuBar, boolean statusBar, boolean toolBar) {
 		final Shell shell = browser.getShell();
 		if (owned) {
@@ -180,12 +168,12 @@ public class BrowserExample {
 			itemRefresh.setText(getResourceString("Refresh"));
 			final ToolItem itemGo = new ToolItem(toolbar, SWT.PUSH);
 			itemGo.setText(getResourceString("Go"));
-			
+
 			itemBack.setEnabled(browser.isBackEnabled());
 			itemForward.setEnabled(browser.isForwardEnabled());
 			Listener listener = event -> {
 				ToolItem item = (ToolItem)event.widget;
-				if (item == itemBack) browser.back(); 
+				if (item == itemBack) browser.back();
 				else if (item == itemForward) browser.forward();
 				else if (item == itemStop) browser.stop();
 				else if (item == itemRefresh) browser.refresh();
@@ -204,14 +192,14 @@ public class BrowserExample {
 			data.top = new FormAttachment(0, 5);
 			data.right = new FormAttachment(100, -5);
 			canvas.setLayoutData(data);
-			
+
 			final Rectangle rect = images[0].getBounds();
 			canvas.addListener(SWT.Paint, e -> {
 				Point pt = ((Canvas)e.widget).getSize();
-				e.gc.drawImage(images[index], 0, 0, rect.width, rect.height, 0, 0, pt.x, pt.y);			
+				e.gc.drawImage(images[index], 0, 0, rect.width, rect.height, 0, 0, pt.x, pt.y);
 			});
 			canvas.addListener(SWT.MouseDown, e -> browser.setUrl(getResourceString("Startup")));
-			
+
 			final Display display = parent.getDisplay();
 			display.asyncExec(new Runnable() {
 				@Override
@@ -232,11 +220,11 @@ public class BrowserExample {
 			if (toolbar != null) {
 				data.top = new FormAttachment(toolbar, 0, SWT.TOP);
 				data.left = new FormAttachment(toolbar, 5, SWT.RIGHT);
-				data.right = new FormAttachment(canvas, -5, SWT.DEFAULT);			
+				data.right = new FormAttachment(canvas, -5, SWT.DEFAULT);
 			} else {
 				data.top = new FormAttachment(0, 0);
 				data.left = new FormAttachment(0, 0);
-				data.right = new FormAttachment(100, 0);			
+				data.right = new FormAttachment(100, 0);
 			}
 			locationBar.setLayoutData(data);
 			locationBar.addListener(SWT.DefaultSelection, e -> browser.setUrl(locationBar.getText()));
@@ -244,24 +232,19 @@ public class BrowserExample {
 		if (statusBar) {
 			status = new Label(parent, SWT.NONE);
 			progressBar = new ProgressBar(parent, SWT.NONE);
-			
+
 			data = new FormData();
 			data.left = new FormAttachment(0, 5);
 			data.right = new FormAttachment(progressBar, 0, SWT.DEFAULT);
 			data.bottom = new FormAttachment(100, -5);
 			status.setLayoutData(data);
-			
+
 			data = new FormData();
 			data.right = new FormAttachment(100, -5);
 			data.bottom = new FormAttachment(100, -5);
 			progressBar.setLayoutData(data);
-			
-			browser.addStatusTextListener(new StatusTextListener() {
-				@Override
-				public void changed(StatusTextEvent event) {
-					status.setText(event.text);	
-				}
-			});
+
+			browser.addStatusTextListener(event -> status.setText(event.text));
 		}
 		parent.setLayout(new FormLayout());
 
@@ -272,12 +255,12 @@ public class BrowserExample {
 		data.right = new FormAttachment(100, 0);
 		data.bottom = status != null ? new FormAttachment(status, -5, SWT.DEFAULT) : new FormAttachment(100, 0);
 		browser.setLayoutData(data);
-			
+
 		if (statusBar || toolBar) {
 			browser.addProgressListener(new ProgressListener() {
 				@Override
 				public void changed(ProgressEvent event) {
-					if (event.total == 0) return;                            
+					if (event.total == 0) return;
 					int ratio = event.current * 100 / event.total;
 					if (progressBar != null) progressBar.setSelection(ratio);
 					busy = event.current != event.total;
@@ -312,12 +295,7 @@ public class BrowserExample {
 			});
 		}
 		if (title) {
-			browser.addTitleListener(new TitleListener() {
-				@Override
-				public void changed(TitleEvent event) {
-					shell.setText(event.title+" - "+getResourceString("window.title"));
-				}
-			});
+			browser.addTitleListener(event -> shell.setText(event.title+" - "+getResourceString("window.title")));
 		}
 		parent.layout(true);
 		if (owned) shell.open();
@@ -331,7 +309,7 @@ public class BrowserExample {
 		else if (browser != null) browser.setFocus();
 		else parent.setFocus();
 	}
-	
+
 	/**
 	 * Frees the resources
 	 */
@@ -344,7 +322,7 @@ public class BrowserExample {
 			images = null;
 		}
 	}
-	
+
 	/**
 	 * Loads the resources
 	 */
@@ -374,7 +352,7 @@ public class BrowserExample {
 		freeResources();
 		throw new RuntimeException(error);
 	}
-	
+
 	public static void main(String [] args) {
 		Display display = new Display();
 		Shell shell = new Shell(display);
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/BrowserTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/BrowserTab.java
index ac729b7..9a12879 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/BrowserTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/BrowserTab.java
@@ -18,19 +18,11 @@ import java.io.InputStreamReader;
 
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.SWTError;
-import org.eclipse.swt.browser.AuthenticationEvent;
-import org.eclipse.swt.browser.AuthenticationListener;
 import org.eclipse.swt.browser.Browser;
-import org.eclipse.swt.browser.CloseWindowListener;
 import org.eclipse.swt.browser.LocationEvent;
 import org.eclipse.swt.browser.LocationListener;
-import org.eclipse.swt.browser.OpenWindowListener;
 import org.eclipse.swt.browser.ProgressEvent;
 import org.eclipse.swt.browser.ProgressListener;
-import org.eclipse.swt.browser.StatusTextEvent;
-import org.eclipse.swt.browser.StatusTextListener;
-import org.eclipse.swt.browser.TitleEvent;
-import org.eclipse.swt.browser.TitleListener;
 import org.eclipse.swt.browser.VisibilityWindowListener;
 import org.eclipse.swt.browser.WindowEvent;
 import org.eclipse.swt.events.ControlAdapter;
@@ -305,20 +297,10 @@ class BrowserTab extends Tab {
 	void hookCustomListener (final String eventName) {
 		if (browser == null) return;
 		if (eventName == "AuthenticationListener") {
-			browser.addAuthenticationListener(new AuthenticationListener () {
-				@Override
-				public void authenticate(AuthenticationEvent event) {
-					log (eventName, event);
-				}
-			});
+			browser.addAuthenticationListener(event -> log (eventName, event));
 		}
 		if (eventName == "CloseWindowListener") {
-			browser.addCloseWindowListener (new CloseWindowListener () {
-				@Override
-				public void close(WindowEvent event) {
-					log (eventName, event);
-				}
-			});
+			browser.addCloseWindowListener (event -> log (eventName, event));
 		}
 		if (eventName == "LocationListener") {
 			browser.addLocationListener (new LocationListener () {
@@ -333,12 +315,7 @@ class BrowserTab extends Tab {
 			});
 		}
 		if (eventName == "OpenWindowListener") {
-			browser.addOpenWindowListener (new OpenWindowListener () {
-				@Override
-				public void open(WindowEvent event) {
-					log (eventName, event);
-				}
-			});
+			browser.addOpenWindowListener (event -> log (eventName, event));
 		}
 		if (eventName == "ProgressListener") {
 			browser.addProgressListener (new ProgressListener () {
@@ -353,20 +330,10 @@ class BrowserTab extends Tab {
 			});
 		}
 		if (eventName == "StatusTextListener") {
-			browser.addStatusTextListener (new StatusTextListener () {
-				@Override
-				public void changed(StatusTextEvent event) {
-					log (eventName, event);
-				}
-			});
+			browser.addStatusTextListener (event -> log (eventName, event));
 		}
 		if (eventName == "TitleListener") {
-			browser.addTitleListener (new TitleListener () {
-				@Override
-				public void changed(TitleEvent event) {
-					log (eventName, event);
-				}
-			});
+			browser.addTitleListener (event -> log (eventName, event));
 		}
 		if (eventName == "VisibilityWindowListener") {
 			browser.addVisibilityWindowListener (new VisibilityWindowListener () {
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CTabFolderTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CTabFolderTab.java
index 1873699..bfed02a 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CTabFolderTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CTabFolderTab.java
@@ -16,8 +16,6 @@ import org.eclipse.swt.custom.CTabFolder;
 import org.eclipse.swt.custom.CTabFolder2Listener;
 import org.eclipse.swt.custom.CTabFolderEvent;
 import org.eclipse.swt.custom.CTabItem;
-import org.eclipse.swt.events.DisposeEvent;
-import org.eclipse.swt.events.DisposeListener;
 import org.eclipse.swt.events.SelectionAdapter;
 import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.graphics.Color;
@@ -38,11 +36,11 @@ import org.eclipse.swt.widgets.Widget;
 
 class CTabFolderTab extends Tab {
 	int lastSelectedTab = 0;
-	
+
 	/* Example widgets and groups that contain them */
 	CTabFolder tabFolder1;
 	Group tabFolderGroup, itemGroup;
-	
+
 	/* Style widgets added to the "Style" group */
 	Button topButton, bottomButton, flatButton, closeButton;
 	Button rightButton, fillButton, wrapButton;
@@ -57,7 +55,7 @@ class CTabFolderTab extends Tab {
 	static final int ITEM_FONT = 5;
 	Color selectionForegroundColor, selectionBackgroundColor;
 	Font itemFont;
-	
+
 	/* Other widgets added to the "Other" group */
 	Button simpleTabButton, singleTabButton, imageButton, showMinButton, showMaxButton,
 	topRightButton, unselectedCloseButton, unselectedImageButton;
@@ -70,14 +68,14 @@ class CTabFolderTab extends Tab {
 	CTabFolderTab(ControlExample instance) {
 		super(instance);
 	}
-	
+
 	/**
 	 * Creates the "Colors and Fonts" group.
 	 */
 	@Override
 	void createColorAndFontGroup () {
 		super.createColorAndFontGroup();
-		
+
 		TableItem item = new TableItem(colorAndFontTable, SWT.None);
 		item.setText(ControlExample.getResourceString ("Selection_Foreground_Color"));
 		item = new TableItem(colorAndFontTable, SWT.None);
@@ -85,16 +83,13 @@ class CTabFolderTab extends Tab {
 		item = new TableItem(colorAndFontTable, SWT.None);
 		item.setText(ControlExample.getResourceString ("Item_Font"));
 
-		shell.addDisposeListener(new DisposeListener() {
-			@Override
-			public void widgetDisposed(DisposeEvent event) {
-				if (selectionBackgroundColor != null) selectionBackgroundColor.dispose();
-				if (selectionForegroundColor != null) selectionForegroundColor.dispose();
-				if (itemFont != null) itemFont.dispose();
-				selectionBackgroundColor = null;
-				selectionForegroundColor = null;			
-				itemFont = null;
-			}
+		shell.addDisposeListener(event -> {
+			if (selectionBackgroundColor != null) selectionBackgroundColor.dispose();
+			if (selectionForegroundColor != null) selectionForegroundColor.dispose();
+			if (itemFont != null) itemFont.dispose();
+			selectionBackgroundColor = null;
+			selectionForegroundColor = null;
+			itemFont = null;
 		});
 	}
 
@@ -149,7 +144,7 @@ class CTabFolderTab extends Tab {
 	@Override
 	void createOtherGroup () {
 		super.createOtherGroup ();
-	
+
 		/* Create display controls specific to this example */
 		simpleTabButton = new Button (otherGroup, SWT.CHECK);
 		simpleTabButton.setText (ControlExample.getResourceString("Set_Simple_Tabs"));
@@ -160,7 +155,7 @@ class CTabFolderTab extends Tab {
 				setSimpleTabs();
 			}
 		});
-				
+
 		singleTabButton = new Button (otherGroup, SWT.CHECK);
 		singleTabButton.setText (ControlExample.getResourceString("Set_Single_Tabs"));
 		singleTabButton.setSelection(false);
@@ -170,7 +165,7 @@ class CTabFolderTab extends Tab {
 				setSingleTabs();
 			}
 		});
-		
+
 		showMinButton = new Button (otherGroup, SWT.CHECK);
 		showMinButton.setText (ControlExample.getResourceString("Set_Min_Visible"));
 		showMinButton.setSelection(false);
@@ -180,7 +175,7 @@ class CTabFolderTab extends Tab {
 				setMinimizeVisible();
 			}
 		});
-		
+
 		showMaxButton = new Button (otherGroup, SWT.CHECK);
 		showMaxButton.setText (ControlExample.getResourceString("Set_Max_Visible"));
 		showMaxButton.setSelection(false);
@@ -190,7 +185,7 @@ class CTabFolderTab extends Tab {
 				setMaximizeVisible();
 			}
 		});
-		
+
 		topRightButton = new Button (otherGroup, SWT.CHECK);
 		topRightButton.setText (ControlExample.getResourceString("Set_Top_Right"));
 		topRightButton.setSelection(false);
@@ -200,7 +195,7 @@ class CTabFolderTab extends Tab {
 				setTopRight();
 			}
 		});
-		
+
 		imageButton = new Button (otherGroup, SWT.CHECK);
 		imageButton.setText (ControlExample.getResourceString("Set_Image"));
 		imageButton.addSelectionListener (new SelectionAdapter () {
@@ -209,7 +204,7 @@ class CTabFolderTab extends Tab {
 				setImages();
 			}
 		});
-		
+
 		unselectedImageButton = new Button (otherGroup, SWT.CHECK);
 		unselectedImageButton.setText (ControlExample.getResourceString("Set_Unselected_Image_Visible"));
 		unselectedImageButton.setSelection(true);
@@ -236,20 +231,20 @@ class CTabFolderTab extends Tab {
 	@Override
 	void createExampleGroup () {
 		super.createExampleGroup ();
-		
+
 		/* Create a group for the CTabFolder */
 		tabFolderGroup = new Group (exampleGroup, SWT.NONE);
 		tabFolderGroup.setLayout (new GridLayout ());
 		tabFolderGroup.setLayoutData (new GridData (SWT.FILL, SWT.FILL, true, true));
 		tabFolderGroup.setText ("CTabFolder");
 	}
-	
+
 	/**
 	 * Creates the "Example" widgets.
 	 */
 	@Override
 	void createExampleWidgets () {
-		
+
 		/* Compute the widget style */
 		int style = getDefaultStyle();
 		if (topButton.getSelection ()) style |= SWT.TOP;
@@ -268,19 +263,19 @@ class CTabFolderTab extends Tab {
 			item.setControl(text);
 		}
 		tabFolder1.addListener(SWT.Selection, event -> lastSelectedTab = tabFolder1.getSelectionIndex());
-		
+
 		/* If we have saved state, restore it */
 		tabFolder1.setSelection(lastSelectedTab);
 		setTopRight ();
 	}
-	
+
 	/**
 	 * Creates the "Style" group.
 	 */
 	@Override
 	void createStyleGroup() {
 		super.createStyleGroup ();
-		
+
 		/* Create the extra widgets */
 		topButton = new Button (styleGroup, SWT.RADIO);
 		topButton.setText ("SWT.TOP");
@@ -293,7 +288,7 @@ class CTabFolderTab extends Tab {
 		flatButton.setText ("SWT.FLAT");
 		closeButton = new Button (styleGroup, SWT.CHECK);
 		closeButton.setText ("SWT.CLOSE");
-		
+
 		Group topRightGroup = new Group(styleGroup, SWT.NONE);
 		topRightGroup.setLayout (new GridLayout ());
 		topRightGroup.setLayoutData (new GridData (SWT.FILL, SWT.FILL, false, false));
@@ -306,17 +301,17 @@ class CTabFolderTab extends Tab {
 		wrapButton = new Button (topRightGroup, SWT.RADIO);
 		wrapButton.setText ("SWT.RIGHT | SWT.WRAP");
 	}
-	
+
 	/**
 	 * Gets the list of custom event names.
-	 * 
+	 *
 	 * @return an array containing custom event names
 	 */
 	@Override
 	String [] getCustomEventNames () {
 		return new String [] {"CTabFolderEvent"};
 	}
-	
+
 	/**
 	 * Gets the "Example" widget children's items, if any.
 	 *
@@ -326,7 +321,7 @@ class CTabFolderTab extends Tab {
 	Item [] getExampleWidgetItems () {
 		return tabFolder1.getItems();
 	}
-	
+
 	/**
 	 * Gets the "Example" widget children.
 	 */
@@ -334,7 +329,7 @@ class CTabFolderTab extends Tab {
 	Widget [] getExampleWidgets () {
 		return new Widget [] {tabFolder1};
 	}
-	
+
 	/**
 	 * Gets the text for the tab folder item.
 	 */
@@ -396,7 +391,7 @@ class CTabFolderTab extends Tab {
 		setItemFont ();
 		if (oldFont != null) oldFont.dispose();
 	}
-	
+
 	/**
 	 * Sets the state of the "Example" widgets.
 	 */
@@ -415,15 +410,15 @@ class CTabFolderTab extends Tab {
 		setItemFont ();
 		setExampleWidgetSize();
 	}
-	
+
 	/**
-	 * Sets the shape that the CTabFolder will use to render itself. 
+	 * Sets the shape that the CTabFolder will use to render itself.
 	 */
 	void setSimpleTabs () {
 		tabFolder1.setSimple (simpleTabButton.getSelection ());
 		setExampleWidgetSize();
 	}
-	
+
 	/**
 	 * Sets the number of tabs that the CTabFolder should display.
 	 */
@@ -512,7 +507,7 @@ class CTabFolderTab extends Tab {
 		if (oldImage != null) oldImage.dispose();
 		item.setImage (colorImage(color));
 	}
-	
+
 	/**
 	 * Sets the foreground color of CTabItem 0.
 	 */
@@ -528,7 +523,7 @@ class CTabFolderTab extends Tab {
 		if (oldImage != null) oldImage.dispose();
 		item.setImage (colorImage(color));
 	}
-	
+
 	/**
 	 * Sets the font of CTabItem 0.
 	 */
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CanvasTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CanvasTab.java
index b48df05..e916b65 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CanvasTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CanvasTab.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -14,8 +14,6 @@ package org.eclipse.swt.examples.controlexample;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.events.ControlAdapter;
 import org.eclipse.swt.events.ControlEvent;
-import org.eclipse.swt.events.PaintEvent;
-import org.eclipse.swt.events.PaintListener;
 import org.eclipse.swt.events.SelectionAdapter;
 import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.graphics.Color;
@@ -50,13 +48,13 @@ class CanvasTab extends Tab {
 		SWT.COLOR_DARK_CYAN
 	};
 	static final String canvasString = "Canvas"; //$NON-NLS-1$
-	
+
 	/* Example widgets and groups that contain them */
 	Canvas canvas;
 	Group canvasGroup;
 
 	/* Style widgets added to the "Style" group */
-	Button horizontalButton, verticalButton, noBackgroundButton, noFocusButton, 
+	Button horizontalButton, verticalButton, noBackgroundButton, noFocusButton,
 	noMergePaintsButton, noRedrawResizeButton, doubleBufferedButton;
 
 	/* Other widgets added to the "Other" group */
@@ -65,7 +63,7 @@ class CanvasTab extends Tab {
 	int paintCount;
 	int cx, cy;
 	int maxX, maxY;
-	
+
 	/**
 	 * Creates the Tab within a given instance of ControlExample.
 	 */
@@ -79,13 +77,13 @@ class CanvasTab extends Tab {
 	@Override
 	void createOtherGroup () {
 		super.createOtherGroup ();
-	
+
 		/* Create display controls specific to this example */
 		caretButton = new Button (otherGroup, SWT.CHECK);
 		caretButton.setText (ControlExample.getResourceString("Caret"));
 		fillDamageButton = new Button (otherGroup, SWT.CHECK);
 		fillDamageButton.setText (ControlExample.getResourceString("FillDamage"));
-			
+
 		/* Add the listeners */
 		caretButton.addSelectionListener (new SelectionAdapter () {
 			@Override
@@ -94,27 +92,27 @@ class CanvasTab extends Tab {
 			}
 		});
 	}
-	
+
 	/**
 	 * Creates the "Example" group.
 	 */
 	@Override
 	void createExampleGroup () {
 		super.createExampleGroup ();
-		
+
 		/* Create a group for the canvas widget */
 		canvasGroup = new Group (exampleGroup, SWT.NONE);
 		canvasGroup.setLayout (new GridLayout ());
 		canvasGroup.setLayoutData (new GridData (SWT.FILL, SWT.FILL, true, true));
 		canvasGroup.setText ("Canvas");
 	}
-	
+
 	/**
 	 * Creates the "Example" widgets.
 	 */
 	@Override
 	void createExampleWidgets () {
-		
+
 		/* Compute the widget style */
 		int style = getDefaultStyle();
 		if (horizontalButton.getSelection ()) style |= SWT.H_SCROLL;
@@ -129,22 +127,19 @@ class CanvasTab extends Tab {
 		/* Create the example widgets */
 		paintCount = 0; cx = 0; cy = 0;
 		canvas = new Canvas (canvasGroup, style);
-		canvas.addPaintListener(new PaintListener () {
-			@Override
-			public void paintControl(PaintEvent e) {
-				paintCount++;
-				GC gc = e.gc;
-				if (fillDamageButton.getSelection ()) {
-					Color color = e.display.getSystemColor (colors [paintCount % colors.length]);
-					gc.setBackground(color);
-					gc.fillRectangle(e.x, e.y, e.width, e.height);
-				}
-				Point size = canvas.getSize ();
-				gc.drawArc(cx + 1, cy + 1, size.x - 2, size.y - 2, 0, 360);
-				gc.drawRectangle(cx + (size.x - 10) / 2, cy + (size.y - 10) / 2, 10, 10);
-				Point extent = gc.textExtent(canvasString);
-				gc.drawString(canvasString, cx + (size.x - extent.x) / 2, cy - extent.y + (size.y - 10) / 2, true);
+		canvas.addPaintListener(e -> {
+			paintCount++;
+			GC gc = e.gc;
+			if (fillDamageButton.getSelection ()) {
+				Color color = e.display.getSystemColor (colors [paintCount % colors.length]);
+				gc.setBackground(color);
+				gc.fillRectangle(e.x, e.y, e.width, e.height);
 			}
+			Point size = canvas.getSize ();
+			gc.drawArc(cx + 1, cy + 1, size.x - 2, size.y - 2, 0, 360);
+			gc.drawRectangle(cx + (size.x - 10) / 2, cy + (size.y - 10) / 2, 10, 10);
+			Point extent = gc.textExtent(canvasString);
+			gc.drawString(canvasString, cx + (size.x - extent.x) / 2, cy - extent.y + (size.y - 10) / 2, true);
 		});
 		canvas.addControlListener(new ControlAdapter() {
 			@Override
@@ -175,14 +170,14 @@ class CanvasTab extends Tab {
 			});
 		}
 	}
-	
+
 	/**
 	 * Creates the "Style" group.
 	 */
 	@Override
 	void createStyleGroup() {
 		super.createStyleGroup();
-	
+
 		/* Create the extra widgets */
 		horizontalButton = new Button (styleGroup, SWT.CHECK);
 		horizontalButton.setText ("SWT.H_SCROLL");
@@ -226,7 +221,7 @@ class CanvasTab extends Tab {
 				setExampleWidgetSize ();
 			}
 		});
-		
+
 		return tabFolderPage;
 	}
 
@@ -237,7 +232,7 @@ class CanvasTab extends Tab {
 	Widget [] getExampleWidgets () {
 		return new Widget [] {canvas};
 	}
-	
+
 	/**
 	 * Returns a list of set/get API method names (without the set/get prefix)
 	 * that can be used to set/get values in the example control(s).
@@ -254,7 +249,7 @@ class CanvasTab extends Tab {
 	String getTabText () {
 		return "Canvas";
 	}
-	
+
 	/**
 	 * Resizes the maximum and thumb of both scrollbars.
 	 */
@@ -276,7 +271,7 @@ class CanvasTab extends Tab {
 
 	/**
 	 * Scrolls the canvas horizontally.
-	 * 
+	 *
 	 * @param scrollBar
 	 */
 	void scrollHorizontal (ScrollBar scrollBar) {
@@ -291,7 +286,7 @@ class CanvasTab extends Tab {
 
 	/**
 	 * Scrolls the canvas vertically.
-	 * 
+	 *
 	 * @param scrollBar
 	 */
 	void scrollVertical (ScrollBar scrollBar) {
@@ -324,7 +319,7 @@ class CanvasTab extends Tab {
 		}
 		if (oldCaret != null) oldCaret.dispose ();
 	}
-	
+
 	/**
 	 * Sets the state of the "Example" widgets.
 	 */
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/MenuTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/MenuTab.java
index bbe03a9..d42a6e2 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/MenuTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/MenuTab.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2014 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -12,8 +12,6 @@ package org.eclipse.swt.examples.controlexample;
 
 
 import org.eclipse.swt.SWT;
-import org.eclipse.swt.events.PaintEvent;
-import org.eclipse.swt.events.PaintListener;
 import org.eclipse.swt.events.SelectionAdapter;
 import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.layout.GridData;
@@ -25,7 +23,7 @@ import org.eclipse.swt.widgets.Menu;
 import org.eclipse.swt.widgets.MenuItem;
 import org.eclipse.swt.widgets.Shell;
 
-class MenuTab extends Tab {	
+class MenuTab extends Tab {
 	/* Widgets added to the "Menu Style", "MenuItem Style" and "Other" groups */
 	Button barButton, dropDownButton, popUpButton, noRadioGroupButton, leftToRightButton, rightToLeftButton;
 	Button checkButton, cascadeButton, pushButton, radioButton, separatorButton;
@@ -36,7 +34,7 @@ class MenuTab extends Tab {
 	/* Variables used to track the open shells */
 	int shellCount = 0;
 	Shell [] shells = new Shell [4];
-	
+
 	/**
 	 * Creates the Tab within a given instance of ControlExample.
 	 */
@@ -55,14 +53,14 @@ class MenuTab extends Tab {
 		}
 		shellCount = 0;
 	}
-	
+
 	/**
 	 * Handle the Create button selection event.
 	 *
 	 * @param event org.eclipse.swt.events.SelectionEvent
 	 */
 	public void createButtonSelected(SelectionEvent event) {
-	
+
 		/*
 		 * Remember the example shells so they
 		 * can be disposed by the user.
@@ -72,13 +70,13 @@ class MenuTab extends Tab {
 			System.arraycopy (shells, 0, newShells, 0, shells.length);
 			shells = newShells;
 		}
-	
+
 		int orientation = 0;
 		if (leftToRightButton.getSelection()) orientation |= SWT.LEFT_TO_RIGHT;
 		if (rightToLeftButton.getSelection()) orientation |= SWT.RIGHT_TO_LEFT;
 		int radioBehavior = 0;
 		if (noRadioGroupButton.getSelection()) radioBehavior |= SWT.NO_RADIO_GROUP;
-		
+
 		/* Create the shell and menu(s) */
 		Shell shell = new Shell (SWT.SHELL_TRIM | orientation);
 		shells [shellCount] = shell;
@@ -98,12 +96,12 @@ class MenuTab extends Tab {
 				Menu dropDownMenu = new Menu(shell, SWT.DROP_DOWN | radioBehavior);
 				item.setMenu(dropDownMenu);
 				hookListeners(dropDownMenu);
-	
+
 				/* Create various menu items, depending on selections. */
 				createMenuItems(dropDownMenu, subMenuButton.getSelection(), subSubMenuButton.getSelection());
 			}
 		}
-		
+
 		if (popUpButton.getSelection()) {
 			/* Create pop-up menu. */
 			Menu popUpMenu = new Menu(shell, SWT.POP_UP | radioBehavior);
@@ -113,22 +111,17 @@ class MenuTab extends Tab {
 			/* Create various menu items, depending on selections. */
 			createMenuItems(popUpMenu, subMenuButton.getSelection(), subSubMenuButton.getSelection());
 		}
-		
+
 		/* Set the size, title and open the shell. */
 		shell.setSize (300, 100);
 		shell.setText (ControlExample.getResourceString("Title") + shellCount);
-		shell.addPaintListener(new PaintListener() {
-			@Override
-			public void paintControl(PaintEvent e) {
-				e.gc.drawString(ControlExample.getResourceString("PopupMenuHere"), 20, 20);
-			}
-		});
+		shell.addPaintListener(e -> e.gc.drawString(ControlExample.getResourceString("PopupMenuHere"), 20, 20));
 		shell.open ();
 		shellCount++;
 	}
-	
+
 	/**
-	 * Creates the "Control" group. 
+	 * Creates the "Control" group.
 	 */
 	@Override
 	void createControlGroup () {
@@ -136,18 +129,18 @@ class MenuTab extends Tab {
 		 * Create the "Control" group.  This is the group on the
 		 * right half of each example tab.  For MenuTab, it consists of
 		 * the Menu style group, the MenuItem style group and the 'other' group.
-		 */		
+		 */
 		controlGroup = new Group (tabFolderPage, SWT.NONE);
 		controlGroup.setLayout (new GridLayout (2, true));
 		controlGroup.setLayoutData (new GridData (GridData.HORIZONTAL_ALIGN_FILL | GridData.VERTICAL_ALIGN_FILL));
 		controlGroup.setText (ControlExample.getResourceString("Parameters"));
-	
+
 		/* Create a group for the menu style controls */
 		styleGroup = new Group (controlGroup, SWT.NONE);
 		styleGroup.setLayout (new GridLayout ());
 		styleGroup.setLayoutData (new GridData (GridData.HORIZONTAL_ALIGN_FILL | GridData.VERTICAL_ALIGN_FILL));
 		styleGroup.setText (ControlExample.getResourceString("Menu_Styles"));
-	
+
 		/* Create a group for the menu item style controls */
 		menuItemStyleGroup = new Group (controlGroup, SWT.NONE);
 		menuItemStyleGroup.setLayout (new GridLayout ());
@@ -160,13 +153,13 @@ class MenuTab extends Tab {
 		otherGroup.setLayoutData (new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.VERTICAL_ALIGN_FILL));
 		otherGroup.setText (ControlExample.getResourceString("Other"));
 	}
-	
+
 	/**
 	 * Creates the "Control" widget children.
 	 */
 	@Override
 	void createControlWidgets () {
-	
+
 		/* Create the menu style buttons */
 		barButton = new Button (styleGroup, SWT.CHECK);
 		barButton.setText ("SWT.BAR");
@@ -181,7 +174,7 @@ class MenuTab extends Tab {
 		leftToRightButton.setSelection(true);
 		rightToLeftButton = new Button (styleGroup, SWT.RADIO);
 		rightToLeftButton.setText ("SWT.RIGHT_TO_LEFT");
-	
+
 		/* Create the menu item style buttons */
 		cascadeButton = new Button (menuItemStyleGroup, SWT.CHECK);
 		cascadeButton.setText ("SWT.CASCADE");
@@ -193,7 +186,7 @@ class MenuTab extends Tab {
 		radioButton.setText ("SWT.RADIO");
 		separatorButton = new Button (menuItemStyleGroup, SWT.CHECK);
 		separatorButton.setText ("SWT.SEPARATOR");
-		
+
 		/* Create the 'other' buttons */
 		enabledButton = new Button(otherGroup, SWT.CHECK);
 		enabledButton.setText(ControlExample.getResourceString("Enabled"));
@@ -210,7 +203,7 @@ class MenuTab extends Tab {
 		subSubMenuButton.setText (ControlExample.getResourceString("SubSubMenu"));
 		tooltipButton = new Button (otherGroup, SWT.CHECK);
 		tooltipButton.setText (ControlExample.getResourceString("Show_Tooltip"));
-		
+
 		/* Create the "create" and "closeAll" buttons (and a 'filler' label to place them) */
 		new Label(controlGroup, SWT.NONE);
 		createButton = new Button (controlGroup, SWT.NONE);
@@ -219,7 +212,7 @@ class MenuTab extends Tab {
 		closeAllButton = new Button (controlGroup, SWT.NONE);
 		closeAllButton.setLayoutData (new GridData (GridData.HORIZONTAL_ALIGN_BEGINNING));
 		closeAllButton.setText (ControlExample.getResourceString("Close_All_Shells"));
-	
+
 		/* Add the listeners */
 		createButton.addSelectionListener(new SelectionAdapter() {
 			@Override
@@ -239,7 +232,7 @@ class MenuTab extends Tab {
 				subSubMenuButton.setEnabled (subMenuButton.getSelection ());
 			}
 		});
-	
+
 		/* Set the default state */
 		barButton.setSelection (true);
 		dropDownButton.setSelection (true);
@@ -251,7 +244,7 @@ class MenuTab extends Tab {
 		separatorButton.setSelection (true);
 		subSubMenuButton.setEnabled (subMenuButton.getSelection ());
 	}
-	
+
 	/* Create various menu items, depending on selections. */
 	void createMenuItems(Menu menu, boolean createSubMenu, boolean createSubSubMenu) {
 		MenuItem item;
@@ -264,12 +257,12 @@ class MenuTab extends Tab {
 			if (tooltipButton.getSelection()) item.setToolTipText(ControlExample.getResourceString("Tooltip", new String[] {item.getText() }));
 			hookListeners(item);
 		}
-		
+
 		if (separatorButton.getSelection()) {
 			item = new MenuItem(menu, SWT.SEPARATOR);
 			if (tooltipButton.getSelection()) item.setToolTipText(ControlExample.getResourceString("Tooltip", new String[] {item.getText() }));
 		}
-		
+
 		if (checkButton.getSelection()) {
 			item = new MenuItem(menu, SWT.CHECK);
 			item.setText(getMenuItemText("Check"));
@@ -279,7 +272,7 @@ class MenuTab extends Tab {
 			if (tooltipButton.getSelection()) item.setToolTipText(ControlExample.getResourceString("Tooltip", new String[] {item.getText() }));
 			hookListeners(item);
 		}
-				
+
 		if (radioButton.getSelection()) {
 			item = new MenuItem(menu, SWT.RADIO);
 			item.setText(getMenuItemText("1Radio"));
@@ -313,7 +306,7 @@ class MenuTab extends Tab {
 			createMenuItems(subMenu, createSubSubMenu, false);
 		}
 	}
-	
+
 	String getMenuItemText(String item) {
 		boolean cascade = item.equals("Cascade");
 		boolean mnemonic = mnemonicsButton.getSelection();
@@ -330,7 +323,7 @@ class MenuTab extends Tab {
 		}
 		return ControlExample.getResourceString(item);
 	}
-	
+
 	/**
 	 * Gets the text for the tab folder item.
 	 */
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/StyledTextTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/StyledTextTab.java
index 1c50cee..7da872a 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/StyledTextTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/StyledTextTab.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2014 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -15,32 +15,18 @@ import java.io.IOException;
 import java.io.InputStream;
 
 import org.eclipse.swt.SWT;
-import org.eclipse.swt.custom.BidiSegmentEvent;
-import org.eclipse.swt.custom.BidiSegmentListener;
-import org.eclipse.swt.custom.ExtendedModifyEvent;
-import org.eclipse.swt.custom.ExtendedModifyListener;
-import org.eclipse.swt.custom.LineBackgroundEvent;
-import org.eclipse.swt.custom.LineBackgroundListener;
-import org.eclipse.swt.custom.LineStyleEvent;
-import org.eclipse.swt.custom.LineStyleListener;
 import org.eclipse.swt.custom.MovementEvent;
 import org.eclipse.swt.custom.MovementListener;
-import org.eclipse.swt.custom.PaintObjectEvent;
-import org.eclipse.swt.custom.PaintObjectListener;
 import org.eclipse.swt.custom.StyleRange;
 import org.eclipse.swt.custom.StyledText;
 import org.eclipse.swt.custom.TextChangeListener;
 import org.eclipse.swt.custom.TextChangedEvent;
 import org.eclipse.swt.custom.TextChangingEvent;
-import org.eclipse.swt.custom.VerifyKeyListener;
 import org.eclipse.swt.events.ControlAdapter;
 import org.eclipse.swt.events.ControlEvent;
-import org.eclipse.swt.events.DisposeEvent;
-import org.eclipse.swt.events.DisposeListener;
 import org.eclipse.swt.events.SelectionAdapter;
 import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.events.SelectionListener;
-import org.eclipse.swt.events.VerifyEvent;
 import org.eclipse.swt.graphics.Color;
 import org.eclipse.swt.graphics.Image;
 import org.eclipse.swt.graphics.ImageData;
@@ -62,11 +48,11 @@ class StyledTextTab extends ScrollableTab {
 
 	/* Style widgets added to the "Style" group */
 	Button wrapButton, readOnlyButton, fullSelectionButton;
-	
+
 	/* Buttons for adding StyleRanges to StyledText */
 	Button boldButton, italicButton, redButton, yellowButton, underlineButton, strikeoutButton, resetButton;
 	Image boldImage, italicImage, redImage, yellowImage, underlineImage, strikeoutImage;
-	
+
 	/* Variables for saving state. */
 	String text;
 	StyleRange[] styleRanges;
@@ -77,9 +63,9 @@ class StyledTextTab extends ScrollableTab {
 	StyledTextTab(ControlExample instance) {
 		super(instance);
 	}
-	
+
 	/**
-	 * Creates a bitmap image. 
+	 * Creates a bitmap image.
 	 */
 	Image createBitmapImage (Display display, String name) {
 		InputStream sourceStream = ControlExample.class.getResourceAsStream (name + ".bmp");
@@ -95,14 +81,14 @@ class StyledTextTab extends ScrollableTab {
 		}
 		return result;
 	}
-	
+
 	/**
 	 * Creates the "Control" widget children.
 	 */
 	@Override
 	void createControlWidgets () {
 		super.createControlWidgets ();
-		
+
 		/* Add a group for modifying the StyledText widget */
 		createStyledTextStyleGroup ();
 	}
@@ -113,20 +99,20 @@ class StyledTextTab extends ScrollableTab {
 	@Override
 	void createExampleGroup () {
 		super.createExampleGroup ();
-		
+
 		/* Create a group for the styled text widget */
 		styledTextGroup = new Group (exampleGroup, SWT.NONE);
 		styledTextGroup.setLayout (new GridLayout ());
 		styledTextGroup.setLayoutData (new GridData (SWT.FILL, SWT.FILL, true, true));
 		styledTextGroup.setText ("StyledText");
 	}
-	
+
 	/**
 	 * Creates the "Example" widgets.
 	 */
 	@Override
 	void createExampleWidgets () {
-		
+
 		/* Compute the widget style */
 		int style = getDefaultStyle();
 		if (singleButton.getSelection ()) style |= SWT.SINGLE;
@@ -137,13 +123,13 @@ class StyledTextTab extends ScrollableTab {
 		if (readOnlyButton.getSelection ()) style |= SWT.READ_ONLY;
 		if (borderButton.getSelection ()) style |= SWT.BORDER;
 		if (fullSelectionButton.getSelection ()) style |= SWT.FULL_SELECTION;
-	
+
 		/* Create the example widgets */
 		styledText = new StyledText (styledTextGroup, style);
 		styledText.setText (ControlExample.getResourceString("Example_string"));
 		styledText.append ("\n");
 		styledText.append (ControlExample.getResourceString("One_Two_Three"));
-		
+
 		if (text != null) {
 			styledText.setText(text);
 			text = null;
@@ -153,14 +139,14 @@ class StyledTextTab extends ScrollableTab {
 			styleRanges = null;
 		}
 	}
-	
+
 	/**
 	 * Creates the "Style" group.
 	 */
 	@Override
 	void createStyleGroup() {
 		super.createStyleGroup();
-	
+
 		/* Create the extra widgets */
 		wrapButton = new Button (styleGroup, SWT.CHECK);
 		wrapButton.setText ("SWT.WRAP");
@@ -169,7 +155,7 @@ class StyledTextTab extends ScrollableTab {
 		fullSelectionButton = new Button (styleGroup, SWT.CHECK);
 		fullSelectionButton.setText ("SWT.FULL_SELECTION");
 	}
-	
+
 	/**
 	 * Creates the "StyledText Style" group.
 	 */
@@ -180,7 +166,7 @@ class StyledTextTab extends ScrollableTab {
 		GridData data = new GridData (GridData.HORIZONTAL_ALIGN_FILL);
 		data.horizontalSpan = 2;
 		styledTextStyleGroup.setLayoutData (data);
-		
+
 		/* Get images */
 		boldImage = createBitmapImage (display, "bold");
 		italicImage = createBitmapImage (display, "italic");
@@ -188,7 +174,7 @@ class StyledTextTab extends ScrollableTab {
 		yellowImage = createBitmapImage (display, "yellow");
 		underlineImage = createBitmapImage (display, "underline");
 		strikeoutImage = createBitmapImage (display, "strikeout");
-		
+
 		/* Create controls to modify the StyledText */
 		Label label = new Label (styledTextStyleGroup, SWT.NONE);
 		label.setText (ControlExample.getResourceString ("StyledText_Style_Instructions"));
@@ -244,7 +230,7 @@ class StyledTextTab extends ScrollableTab {
 					if (e.widget == boldButton) {
 						style.fontStyle ^= SWT.BOLD;
 					} else if (e.widget == italicButton) {
-						style.fontStyle ^= SWT.ITALIC;						
+						style.fontStyle ^= SWT.ITALIC;
 					} else if (e.widget == underlineButton) {
 						style.underline = !style.underline;
 					} else if (e.widget == strikeoutButton) {
@@ -252,7 +238,7 @@ class StyledTextTab extends ScrollableTab {
 					}
 					styledText.setStyleRange(style);
 				}
-				styledText.setSelectionRange(sel.x + sel.y, 0);			
+				styledText.setSelectionRange(sel.x + sel.y, 0);
 			}
 		};
 		SelectionListener colorListener = new SelectionAdapter () {
@@ -290,19 +276,16 @@ class StyledTextTab extends ScrollableTab {
 		strikeoutButton.addSelectionListener(styleListener);
 		redButton.addSelectionListener(colorListener);
 		yellowButton.addSelectionListener(colorListener);
-		yellowButton.addDisposeListener(new DisposeListener () {
-			@Override
-			public void widgetDisposed (DisposeEvent e) {
-				boldImage.dispose();
-				italicImage.dispose();
-				redImage.dispose();
-				yellowImage.dispose();
-				underlineImage.dispose();
-				strikeoutImage.dispose();
-			}
+		yellowButton.addDisposeListener(e -> {
+			boldImage.dispose();
+			italicImage.dispose();
+			redImage.dispose();
+			yellowImage.dispose();
+			underlineImage.dispose();
+			strikeoutImage.dispose();
 		});
 	}
-	
+
 	/**
 	 * Creates the tab folder page.
 	 *
@@ -325,7 +308,7 @@ class StyledTextTab extends ScrollableTab {
 				setExampleWidgetSize ();
 			}
 		});
-		
+
 		return tabFolderPage;
 	}
 
@@ -339,12 +322,12 @@ class StyledTextTab extends ScrollableTab {
 			styleRanges = styledText.getStyleRanges();
 			text = styledText.getText();
 		}
-		super.disposeExampleWidgets();	
+		super.disposeExampleWidgets();
 	}
 
 	/**
 	 * Gets the list of custom event names.
-	 * 
+	 *
 	 * @return an array containing custom event names
 	 */
 	@Override
@@ -362,7 +345,7 @@ class StyledTextTab extends ScrollableTab {
 	Widget [] getExampleWidgets () {
 		return new Widget [] {styledText};
 	}
-	
+
 	/**
 	 * Returns a list of set/get API method names (without the set/get prefix)
 	 * that can be used to set/get values in the example control(s).
@@ -372,7 +355,7 @@ class StyledTextTab extends ScrollableTab {
 		return new String[] {"Alignment", "AlwaysShowScrollBars", "BlockSelection", "BottomMargin", "CaretOffset", "DoubleClickEnabled", "Editable", "HorizontalIndex", "HorizontalPixel", "Indent", "Justify", "LeftMargin", "LineSpacing", "Orientation", "RightMargin", "Selection", "Tabs", "TabStops", "Text", "TextLimit", "ToolTipText", "TopIndex", "TopMargin", "TopPixel", "WrapIndent", "WordWrap"};
 	}
 
-	
+
 	/**
 	 * Gets the text for the tab folder item.
 	 */
@@ -380,51 +363,26 @@ class StyledTextTab extends ScrollableTab {
 	String getTabText () {
 		return "StyledText";
 	}
-	
+
 	/**
 	 * Hooks the custom listener specified by eventName.
 	 */
 	@Override
 	void hookCustomListener (final String eventName) {
 		if (eventName == "ExtendedModifyListener") {
-			styledText.addExtendedModifyListener (new ExtendedModifyListener() {
-				@Override
-				public void modifyText(ExtendedModifyEvent event) {
-					log (eventName, event);
-				}
-			});
+			styledText.addExtendedModifyListener (event -> log (eventName, event));
 		}
 		if (eventName == "BidiSegmentListener") {
-			styledText.addBidiSegmentListener (new BidiSegmentListener() {
-				@Override
-				public void lineGetSegments(BidiSegmentEvent event) {
-					log (eventName, event);
-				}
-			});
+			styledText.addBidiSegmentListener (event -> log (eventName, event));
 		}
 		if (eventName == "LineBackgroundListener") {
-			styledText.addLineBackgroundListener (new LineBackgroundListener() {
-				@Override
-				public void lineGetBackground(LineBackgroundEvent event) {
-					log (eventName, event);
-				}
-			});
+			styledText.addLineBackgroundListener (event -> log (eventName, event));
 		}
 		if (eventName == "LineStyleListener") {
-			styledText.addLineStyleListener (new LineStyleListener() {
-				@Override
-				public void lineGetStyle(LineStyleEvent event) {
-					log (eventName, event);
-				}
-			});
+			styledText.addLineStyleListener (event -> log (eventName, event));
 		}
 		if (eventName == "PaintObjectListener") {
-			styledText.addPaintObjectListener (new PaintObjectListener() {
-				@Override
-				public void paintObject(PaintObjectEvent event) {
-					log (eventName, event);
-				}
-			});
+			styledText.addPaintObjectListener (event -> log (eventName, event));
 		}
 		if (eventName == "TextChangeListener") {
 			styledText.getContent().addTextChangeListener (new TextChangeListener() {
@@ -443,12 +401,7 @@ class StyledTextTab extends ScrollableTab {
 			});
 		}
 		if (eventName == "VerifyKeyListener") {
-			styledText.addVerifyKeyListener (new VerifyKeyListener() {
-				@Override
-				public void verifyKey(VerifyEvent event) {
-					log (eventName, event);
-				}
-			});
+			styledText.addVerifyKeyListener (event -> log (eventName, event));
 		}
 		if (eventName == "WordMovementListener") {
 			styledText.addWordMovementListener (new MovementListener() {
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/Tab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/Tab.java
index 22c8916..0d1260f 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/Tab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/Tab.java
@@ -17,14 +17,12 @@ import org.eclipse.swt.SWT;
 import org.eclipse.swt.events.ArmEvent;
 import org.eclipse.swt.events.ControlEvent;
 import org.eclipse.swt.events.DisposeEvent;
-import org.eclipse.swt.events.DisposeListener;
 import org.eclipse.swt.events.FocusEvent;
 import org.eclipse.swt.events.HelpEvent;
 import org.eclipse.swt.events.KeyAdapter;
 import org.eclipse.swt.events.KeyEvent;
 import org.eclipse.swt.events.MenuEvent;
 import org.eclipse.swt.events.ModifyEvent;
-import org.eclipse.swt.events.ModifyListener;
 import org.eclipse.swt.events.MouseEvent;
 import org.eclipse.swt.events.PaintEvent;
 import org.eclipse.swt.events.SelectionAdapter;
@@ -87,7 +85,7 @@ import org.eclipse.swt.widgets.Widget;
 abstract class Tab {
 	Shell shell;
 	Display display;
-	
+
 	/* Common control buttons */
 	Button borderButton, enabledButton, visibleButton, backgroundImageButton, popupMenuButton;
 	Button preferredButton, tooSmallButton, smallButton, largeButton, fillHButton, fillVButton;
@@ -103,7 +101,7 @@ abstract class Tab {
 	static final int TOO_SMALL_SIZE	= 10;
 	static final int SMALL_SIZE		= 50;
 	static final int LARGE_SIZE		= 100;
-	
+
 	/* Right-to-left support */
 	static final boolean RTL_SUPPORT_ENABLE = "win32".equals(SWT.getPlatform()) || "gtk".equals(SWT.getPlatform());
 	Group orientationGroup;
@@ -121,13 +119,13 @@ abstract class Tab {
 	FontDialog fontDialog;
 	Color foregroundColor, backgroundColor;
 	Font font;
-	
+
 	/* Controls and resources for the "Background Mode" group */
 	Combo backgroundModeCombo;
 	Button backgroundModeImageButton, backgroundModeColorButton;
 
 	boolean samplePopup = false;
-	
+
 	/* Set/Get API controls */
 	Combo nameCombo;
 	Label returnTypeLabel;
@@ -143,7 +141,7 @@ abstract class Tab {
 	int setFieldsMask = 0;
 	Event setFieldsEvent = new Event ();
 	boolean ignore = false;
-	
+
 	/* Event logging constants */
 	static final int DOIT	= 0x0100;
 	static final int DETAIL	= 0x0200;
@@ -171,48 +169,48 @@ abstract class Tab {
 			this.event = event;
 		}
 	}
-	
+
 	final EventInfo [] EVENT_INFO = {
-		new EventInfo ("Activate", SWT.Activate, 0, 0, new Event()), 
-		new EventInfo ("Arm", SWT.Arm, 0, 0, new Event()), 
+		new EventInfo ("Activate", SWT.Activate, 0, 0, new Event()),
+		new EventInfo ("Arm", SWT.Arm, 0, 0, new Event()),
 		new EventInfo ("Close", SWT.Close, DOIT, 0, new Event()),
 		new EventInfo ("Collapse", SWT.Collapse, 0, 0, new Event()),
 		new EventInfo ("Deactivate", SWT.Deactivate, 0, 0, new Event()),
 		new EventInfo ("DefaultSelection", SWT.DefaultSelection, 0, 0, new Event()),
-		new EventInfo ("Deiconify", SWT.Deiconify, 0, 0, new Event()), 
+		new EventInfo ("Deiconify", SWT.Deiconify, 0, 0, new Event()),
 		new EventInfo ("Dispose", SWT.Dispose, 0, 0, new Event()),
-		new EventInfo ("DragDetect", SWT.DragDetect, 0, 0, new Event()), 
+		new EventInfo ("DragDetect", SWT.DragDetect, 0, 0, new Event()),
 		new EventInfo ("EraseItem", SWT.EraseItem, DETAIL | DETAIL_ERASE_ITEM, 0, new Event()),
-		new EventInfo ("Expand", SWT.Expand, 0, 0, new Event()), 
-		new EventInfo ("FocusIn", SWT.FocusIn, 0, 0, new Event()), 
+		new EventInfo ("Expand", SWT.Expand, 0, 0, new Event()),
+		new EventInfo ("FocusIn", SWT.FocusIn, 0, 0, new Event()),
 		new EventInfo ("FocusOut", SWT.FocusOut, 0, 0, new Event()),
-		new EventInfo ("HardKeyDown", SWT.HardKeyDown, 0, 0, new Event()), 
+		new EventInfo ("HardKeyDown", SWT.HardKeyDown, 0, 0, new Event()),
 		new EventInfo ("HardKeyUp", SWT.HardKeyUp, 0, 0, new Event()),
-		new EventInfo ("Help", SWT.Help, 0, 0, new Event()), 
+		new EventInfo ("Help", SWT.Help, 0, 0, new Event()),
 		new EventInfo ("Hide", SWT.Hide, 0, 0, new Event()),
-		new EventInfo ("Iconify", SWT.Iconify, 0, 0, new Event()), 
+		new EventInfo ("Iconify", SWT.Iconify, 0, 0, new Event()),
 		new EventInfo ("KeyDown", SWT.KeyDown, DOIT, 0, new Event()),
 		new EventInfo ("KeyUp", SWT.KeyUp, DOIT, 0, new Event()),
 		new EventInfo ("MeasureItem", SWT.MeasureItem, 0, 0, new Event()),
 		new EventInfo ("MenuDetect", SWT.MenuDetect, X | Y | DOIT, 0, new Event()),
-		new EventInfo ("Modify", SWT.Modify, 0, 0, new Event()), 
+		new EventInfo ("Modify", SWT.Modify, 0, 0, new Event()),
 		new EventInfo ("MouseDoubleClick", SWT.MouseDoubleClick, 0, 0, new Event()),
-		new EventInfo ("MouseDown", SWT.MouseDown, 0, 0, new Event()), 
-		new EventInfo ("MouseEnter", SWT.MouseEnter, 0, 0, new Event()), 
-		new EventInfo ("MouseExit", SWT.MouseExit, 0, 0, new Event()), 
+		new EventInfo ("MouseDown", SWT.MouseDown, 0, 0, new Event()),
+		new EventInfo ("MouseEnter", SWT.MouseEnter, 0, 0, new Event()),
+		new EventInfo ("MouseExit", SWT.MouseExit, 0, 0, new Event()),
 		new EventInfo ("MouseHorizontalWheel", SWT.MouseHorizontalWheel, 0, 0, new Event()),
 		new EventInfo ("MouseHover", SWT.MouseHover, 0, 0, new Event()),
-		new EventInfo ("MouseMove", SWT.MouseMove, 0, 0, new Event()), 
-		new EventInfo ("MouseUp", SWT.MouseUp, 0, 0, new Event()), 
+		new EventInfo ("MouseMove", SWT.MouseMove, 0, 0, new Event()),
+		new EventInfo ("MouseUp", SWT.MouseUp, 0, 0, new Event()),
 		new EventInfo ("MouseVerticalWheel", SWT.MouseVerticalWheel, 0, 0, new Event()),
-		new EventInfo ("Move", SWT.Move, 0, 0, new Event()), 
-		new EventInfo ("Paint", SWT.Paint, 0, 0, new Event()), 
+		new EventInfo ("Move", SWT.Move, 0, 0, new Event()),
+		new EventInfo ("Paint", SWT.Paint, 0, 0, new Event()),
 		new EventInfo ("PaintItem", SWT.PaintItem, 0, 0, new Event()),
-		new EventInfo ("Resize", SWT.Resize, 0, 0, new Event()), 
+		new EventInfo ("Resize", SWT.Resize, 0, 0, new Event()),
 		new EventInfo ("Selection", SWT.Selection, X | Y | DOIT, 0, new Event()), // sash
 		new EventInfo ("SetData", SWT.SetData, 0, 0, new Event()),
 //		new EventInfo ("Settings", SWT.Settings, 0, 0, new Event()),  // note: this event only goes to Display
-		new EventInfo ("Show", SWT.Show, 0, 0, new Event()), 
+		new EventInfo ("Show", SWT.Show, 0, 0, new Event()),
 		new EventInfo ("Traverse", SWT.Traverse, DETAIL | DETAIL_TRAVERSE | DOIT, 0, new Event()),
 		new EventInfo ("Verify", SWT.Verify, TEXT | DOIT, 0, new Event()),
 		new EventInfo ("ImeComposition", SWT.ImeComposition, DETAIL | DETAIL_IME | TEXT | DOIT, 0, new Event()),
@@ -265,7 +263,7 @@ abstract class Tab {
 		"SWT.TRAVERSE_PAGE_PREVIOUS", new Integer(SWT.TRAVERSE_PAGE_PREVIOUS),
 		"SWT.TRAVERSE_PAGE_NEXT", new Integer(SWT.TRAVERSE_PAGE_NEXT),
 	};
-		
+
 	/**
 	 * Creates the Tab within a given instance of ControlExample.
 	 */
@@ -278,17 +276,17 @@ abstract class Tab {
 	 * is typically the right hand column in the tab.
 	 */
 	void createControlGroup () {
-	
+
 		/*
 		 * Create the "Control" group.  This is the group on the
 		 * right half of each example tab.  It consists of the
 		 * "Style" group, the "Other" group and the "Size" group.
-		 */	
+		 */
 		controlGroup = new Group (tabFolderPage, SWT.NONE);
 		controlGroup.setLayout (new GridLayout (2, true));
 		controlGroup.setLayoutData (new GridData(SWT.FILL, SWT.FILL, false, false));
 		controlGroup.setText (ControlExample.getResourceString("Parameters"));
-	
+
 		/* Create individual groups inside the "Control" group */
 		createStyleGroup ();
 		createOtherGroup ();
@@ -300,7 +298,7 @@ abstract class Tab {
 			createDirectionGroup ();
 		}
 		createBackgroundModeGroup ();
-	
+
 		/*
 		 * For each Button child in the style group, add a selection
 		 * listener that will recreate the example controls.  If the
@@ -350,16 +348,16 @@ abstract class Tab {
 			}
 		}
 		if (rtlSupport()) {
-			rtlButton.addSelectionListener (selectionListener); 
-			ltrButton.addSelectionListener (selectionListener);		
+			rtlButton.addSelectionListener (selectionListener);
+			ltrButton.addSelectionListener (selectionListener);
 			defaultOrietationButton.addSelectionListener (selectionListener);
-			rtlDirectionButton.addSelectionListener (selectionListener); 
-			ltrDirectionButton.addSelectionListener (selectionListener);		
-			autoDirectionButton.addSelectionListener (selectionListener); 
-			defaultDirectionButton.addSelectionListener (selectionListener); 
+			rtlDirectionButton.addSelectionListener (selectionListener);
+			ltrDirectionButton.addSelectionListener (selectionListener);
+			autoDirectionButton.addSelectionListener (selectionListener);
+			defaultDirectionButton.addSelectionListener (selectionListener);
 		}
 	}
-	
+
 	/**
 	 * Append the Set/Get API controls to the "Other" group.
 	 */
@@ -397,7 +395,7 @@ abstract class Tab {
 	 */
 	void createControlWidgets () {
 	}
-	
+
 	/**
 	 * Creates the "Colors and Fonts" group. This is typically
 	 * a child of the "Control" group. Subclasses override
@@ -446,26 +444,23 @@ abstract class Tab {
 				resetColorsAndFonts ();
 			}
 		});
-		shell.addDisposeListener(new DisposeListener() {
-			@Override
-			public void widgetDisposed(DisposeEvent event) {
-				if (foregroundColor != null) foregroundColor.dispose();
-				if (backgroundColor != null) backgroundColor.dispose();
-				if (font != null) font.dispose();
-				foregroundColor = null;
-				backgroundColor = null;
-				font = null;
-				if (colorAndFontTable != null && !colorAndFontTable.isDisposed()) {
-					TableItem [] items = colorAndFontTable.getItems();
-					for (int i = 0; i < items.length; i++) {
-						Image image = items[i].getImage();
-						if (image != null) image.dispose();
-					}
+		shell.addDisposeListener(event -> {
+			if (foregroundColor != null) foregroundColor.dispose();
+			if (backgroundColor != null) backgroundColor.dispose();
+			if (font != null) font.dispose();
+			foregroundColor = null;
+			backgroundColor = null;
+			font = null;
+			if (colorAndFontTable != null && !colorAndFontTable.isDisposed()) {
+				TableItem [] items = colorAndFontTable.getItems();
+				for (int i = 0; i < items.length; i++) {
+					Image image = items[i].getImage();
+					if (image != null) image.dispose();
 				}
 			}
 		});
 	}
-	
+
 	void changeFontOrColor(int index) {
 		switch (index) {
 			case FOREGROUND_COLOR: {
@@ -527,7 +522,7 @@ abstract class Tab {
 		otherGroup.setLayout (new GridLayout ());
 		otherGroup.setLayoutData (new GridData (SWT.FILL, SWT.FILL, false, false));
 		otherGroup.setText (ControlExample.getResourceString("Other"));
-	
+
 		/* Create the controls */
 		enabledButton = new Button(otherGroup, SWT.CHECK);
 		enabledButton.setText(ControlExample.getResourceString("Enabled"));
@@ -537,7 +532,7 @@ abstract class Tab {
 		backgroundImageButton.setText(ControlExample.getResourceString("BackgroundImage"));
 		popupMenuButton = new Button(otherGroup, SWT.CHECK);
 		popupMenuButton.setText(ControlExample.getResourceString("PopupMenu"));
-		
+
 		/* Add the listeners */
 		enabledButton.addSelectionListener (new SelectionAdapter () {
 			@Override
@@ -563,14 +558,14 @@ abstract class Tab {
 				setExampleWidgetPopupMenu ();
 			}
 		});
-	
+
 		/* Set the default state */
 		enabledButton.setSelection(true);
 		visibleButton.setSelection(true);
 		backgroundImageButton.setSelection(false);
 		popupMenuButton.setSelection(false);
 	}
-	
+
 	/**
 	 * Creates the "Background Mode" group.
 	 */
@@ -580,7 +575,7 @@ abstract class Tab {
 		backgroundModeGroup.setLayout (new GridLayout ());
 		backgroundModeGroup.setLayoutData (new GridData (SWT.FILL, SWT.FILL, false, false));
 		backgroundModeGroup.setText (ControlExample.getResourceString("Background_Mode"));
-	
+
 		/* Create the controls */
 		backgroundModeCombo = new Combo(backgroundModeGroup, SWT.READ_ONLY);
 		backgroundModeCombo.setItems("SWT.INHERIT_NONE", "SWT.INHERIT_DEFAULT", "SWT.INHERIT_FORCE");
@@ -588,7 +583,7 @@ abstract class Tab {
 		backgroundModeImageButton.setText(ControlExample.getResourceString("BackgroundImage"));
 		backgroundModeColorButton = new Button(backgroundModeGroup, SWT.CHECK);
 		backgroundModeColorButton.setText(ControlExample.getResourceString("BackgroundColor"));
-	
+
 		/* Add the listeners */
 		backgroundModeCombo.addSelectionListener (new SelectionAdapter () {
 			@Override
@@ -608,29 +603,29 @@ abstract class Tab {
 				setExampleGroupBackgroundColor ();
 			}
 		});
-	
+
 		/* Set the default state */
 		backgroundModeCombo.setText(backgroundModeCombo.getItem(0));
 		backgroundModeImageButton.setSelection(false);
 		backgroundModeColorButton.setSelection(false);
 	}
-	
+
 	void createEditEventDialog(Shell parent, int x, int y, final int index) {
 		final Shell dialog = new Shell(parent, SWT.DIALOG_TRIM | SWT.RESIZE | SWT.APPLICATION_MODAL);
 		dialog.setLayout(new GridLayout());
 		dialog.setText(ControlExample.getResourceString ("Edit_Event"));
 		Label label = new Label (dialog, SWT.NONE);
 		label.setText (ControlExample.getResourceString ("Edit_Event_Fields", new String [] {EVENT_INFO[index].name}));
-		
+
 		Group group = new Group (dialog, SWT.NONE);
 		group.setLayout(new GridLayout(2, false));
-		group.setLayoutData(new GridData (SWT.FILL, SWT.FILL, true, true)); 
-		
+		group.setLayoutData(new GridData (SWT.FILL, SWT.FILL, true, true));
+
 		final int fields = EVENT_INFO[index].settableFields;
 		final int eventType = EVENT_INFO[index].type;
 		setFieldsMask = EVENT_INFO[index].setFields;
 		setFieldsEvent = EVENT_INFO[index].event;
-		
+
 		if ((fields & DOIT) != 0) {
 			new Label (group, SWT.NONE).setText ("doit");
 			final Combo doitCombo = new Combo (group, SWT.READ_ONLY);
@@ -653,7 +648,7 @@ abstract class Tab {
 		}
 
 		if ((fields & DETAIL) != 0) {
-			new Label (group, SWT.NONE).setText ("detail");			
+			new Label (group, SWT.NONE).setText ("detail");
 			int detailType = fields & 0xFF;
 			final Combo detailCombo = new Combo (group, SWT.READ_ONLY);
 			detailCombo.setItems (DETAIL_CONSTANTS[detailType]);
@@ -682,105 +677,90 @@ abstract class Tab {
 		}
 
 		if ((fields & TEXT) != 0) {
-			new Label (group, SWT.NONE).setText ("text");	
+			new Label (group, SWT.NONE).setText ("text");
 			final Text textText = new Text (group, SWT.BORDER);
 			if ((setFieldsMask & TEXT) != 0) textText.setText(setFieldsEvent.text);
 			textText.setLayoutData (new GridData (SWT.FILL, SWT.CENTER, true, false));
-			textText.addModifyListener(new ModifyListener () {
-				@Override
-				public void modifyText(ModifyEvent e) {
-					String newValue = textText.getText();
-					if (newValue.length() == 0) {
-						setFieldsMask &= ~TEXT;
-					} else {
-						setFieldsEvent.type = eventType;
-						setFieldsEvent.text = newValue;
-						setFieldsMask |= TEXT;
-					}
+			textText.addModifyListener(e -> {
+				String newValue = textText.getText();
+				if (newValue.length() == 0) {
+					setFieldsMask &= ~TEXT;
+				} else {
+					setFieldsEvent.type = eventType;
+					setFieldsEvent.text = newValue;
+					setFieldsMask |= TEXT;
 				}
 			});
 		}
 
 		if ((fields & X) != 0) {
-			new Label (group, SWT.NONE).setText ("x");	
+			new Label (group, SWT.NONE).setText ("x");
 			final Text xText = new Text (group, SWT.BORDER);
 			if ((setFieldsMask & X) != 0) xText.setText(Integer.toString(setFieldsEvent.x));
 			xText.setLayoutData (new GridData (SWT.FILL, SWT.CENTER, true, false));
-			xText.addModifyListener(new ModifyListener () {
-				@Override
-				public void modifyText(ModifyEvent e) {
-					String newValue = xText.getText ();
-					try {
-						int newIntValue = Integer.parseInt (newValue);
-						setFieldsEvent.type = eventType;
-						setFieldsEvent.x = newIntValue;
-						setFieldsMask |= X;
-					} catch (NumberFormatException ex) {
-						setFieldsMask &= ~X;
-					}
+			xText.addModifyListener(e -> {
+				String newValue = xText.getText ();
+				try {
+					int newIntValue = Integer.parseInt (newValue);
+					setFieldsEvent.type = eventType;
+					setFieldsEvent.x = newIntValue;
+					setFieldsMask |= X;
+				} catch (NumberFormatException ex) {
+					setFieldsMask &= ~X;
 				}
 			});
 		}
 
 		if ((fields & Y) != 0) {
-			new Label (group, SWT.NONE).setText ("y");	
+			new Label (group, SWT.NONE).setText ("y");
 			final Text yText = new Text (group, SWT.BORDER);
 			if ((setFieldsMask & Y) != 0) yText.setText(Integer.toString(setFieldsEvent.y));
 			yText.setLayoutData (new GridData (SWT.FILL, SWT.CENTER, true, false));
-			yText.addModifyListener(new ModifyListener () {
-				@Override
-				public void modifyText(ModifyEvent e) {
-					String newValue = yText.getText ();
-					try {
-						int newIntValue = Integer.parseInt (newValue);
-						setFieldsEvent.type = eventType;
-						setFieldsEvent.y = newIntValue;
-						setFieldsMask |= Y;
-					} catch (NumberFormatException ex) {
-						setFieldsMask &= ~Y;
-					}
+			yText.addModifyListener(e -> {
+				String newValue = yText.getText ();
+				try {
+					int newIntValue = Integer.parseInt (newValue);
+					setFieldsEvent.type = eventType;
+					setFieldsEvent.y = newIntValue;
+					setFieldsMask |= Y;
+				} catch (NumberFormatException ex) {
+					setFieldsMask &= ~Y;
 				}
 			});
 		}
 
 		if ((fields & WIDTH) != 0) {
-			new Label (group, SWT.NONE).setText ("width");	
+			new Label (group, SWT.NONE).setText ("width");
 			final Text widthText = new Text (group, SWT.BORDER);
 			if ((setFieldsMask & WIDTH) != 0) widthText.setText(Integer.toString(setFieldsEvent.width));
 			widthText.setLayoutData (new GridData (SWT.FILL, SWT.CENTER, true, false));
-			widthText.addModifyListener(new ModifyListener () {
-				@Override
-				public void modifyText(ModifyEvent e) {
-					String newValue = widthText.getText ();
-					try {
-						int newIntValue = Integer.parseInt (newValue);
-						setFieldsEvent.type = eventType;
-						setFieldsEvent.width = newIntValue;
-						setFieldsMask |= WIDTH;
-					} catch (NumberFormatException ex) {
-						setFieldsMask &= ~WIDTH;
-					}
+			widthText.addModifyListener(e -> {
+				String newValue = widthText.getText ();
+				try {
+					int newIntValue = Integer.parseInt (newValue);
+					setFieldsEvent.type = eventType;
+					setFieldsEvent.width = newIntValue;
+					setFieldsMask |= WIDTH;
+				} catch (NumberFormatException ex) {
+					setFieldsMask &= ~WIDTH;
 				}
 			});
 		}
 
 		if ((fields & HEIGHT) != 0) {
-			new Label (group, SWT.NONE).setText ("height");	
+			new Label (group, SWT.NONE).setText ("height");
 			final Text heightText = new Text (group, SWT.BORDER);
 			if ((setFieldsMask & HEIGHT) != 0) heightText.setText(Integer.toString(setFieldsEvent.height));
 			heightText.setLayoutData (new GridData (SWT.FILL, SWT.CENTER, true, false));
-			heightText.addModifyListener(new ModifyListener () {
-				@Override
-				public void modifyText(ModifyEvent e) {
-					String newValue = heightText.getText ();
-					try {
-						int newIntValue = Integer.parseInt (newValue);
-						setFieldsEvent.type = eventType;
-						setFieldsEvent.height = newIntValue;
-						setFieldsMask |= HEIGHT;
-					} catch (NumberFormatException ex) {
-						setFieldsMask &= ~HEIGHT;
-					}
+			heightText.addModifyListener(e -> {
+				String newValue = heightText.getText ();
+				try {
+					int newIntValue = Integer.parseInt (newValue);
+					setFieldsEvent.type = eventType;
+					setFieldsEvent.height = newIntValue;
+					setFieldsMask |= HEIGHT;
+				} catch (NumberFormatException ex) {
+					setFieldsMask &= ~HEIGHT;
 				}
 			});
 		}
@@ -836,7 +816,7 @@ abstract class Tab {
 		exampleGroup.setLayout (new GridLayout ());
 		exampleGroup.setLayoutData (new GridData (SWT.FILL, SWT.FILL, true, true));
 	}
-	
+
 	/**
 	 * Creates the "Example" widget children of the "Example" group.
 	 * Subclasses override this method to create the particular
@@ -845,7 +825,7 @@ abstract class Tab {
 	void createExampleWidgets () {
 		/* Do nothing */
 	}
-	
+
 	/**
 	 * Creates and opens the "Listener selection" dialog.
 	 */
@@ -994,7 +974,7 @@ abstract class Tab {
 				recreateExampleWidgets ();
 			}
 		});
-		
+
 		/*
 		 * Create the checkbox to specify whether typed or untyped events are displayed in the log.
 		 */
@@ -1032,7 +1012,7 @@ abstract class Tab {
 				eventConsole.setText ("");
 			}
 		});
-		
+
 		/* Initialize the eventsFilter to log all events. */
 		int customEventCount = getCustomEventNames ().length;
 		eventsFilter = new boolean [EVENT_INFO.length + customEventCount];
@@ -1057,7 +1037,7 @@ abstract class Tab {
 			}
 		});
 	}
-	
+
 	/**
 	 * Returns a list of set/get API method names (without the set/get prefix)
 	 * that can be used to set/get values in the example control(s).
@@ -1111,12 +1091,7 @@ abstract class Tab {
 		resetLabels();
 		dialog.setDefaultButton(setButton);
 		dialog.pack();
-		dialog.addDisposeListener(new DisposeListener() {
-			@Override
-			public void widgetDisposed(DisposeEvent e) {
-				setGetDialog = null;
-			}
-		});
+		dialog.addDisposeListener(e -> setGetDialog = null);
 		return dialog;
 	}
 
@@ -1198,7 +1173,7 @@ abstract class Tab {
 		}
 		return returnType;
 	}
-	
+
 	void setValue() {
 		/* The parameter type must be the same as the get method's return type */
 		String methodRoot = nameCombo.getText();
@@ -1280,7 +1255,7 @@ abstract class Tab {
 		rtlButton = new Button (orientationGroup, SWT.RADIO);
 		rtlButton.setText ("SWT.RIGHT_TO_LEFT");
 	}
-	
+
 	void createDirectionGroup () {
 		/* Create Text Direction group*/
 		directionGroup = new Group (controlGroup, SWT.NONE);
@@ -1309,9 +1284,9 @@ abstract class Tab {
 		sizeGroup.setLayout (new GridLayout());
 		sizeGroup.setLayoutData (new GridData (SWT.FILL, SWT.FILL, false, false));
 		sizeGroup.setText (ControlExample.getResourceString("Size"));
-	
+
 		/* Create the controls */
-	
+
 		/*
 		 * The preferred size of a widget is the size returned
 		 * by widget.computeSize (SWT.DEFAULT, SWT.DEFAULT).
@@ -1330,7 +1305,7 @@ abstract class Tab {
 		fillHButton.setText (ControlExample.getResourceString("Fill_X"));
 		fillVButton = new Button (sizeGroup, SWT.CHECK);
 		fillVButton.setText (ControlExample.getResourceString("Fill_Y"));
-		
+
 		/* Add the listeners */
 		SelectionAdapter selectionListener = new SelectionAdapter () {
 			@Override
@@ -1344,11 +1319,11 @@ abstract class Tab {
 		largeButton.addSelectionListener(selectionListener);
 		fillHButton.addSelectionListener(selectionListener);
 		fillVButton.addSelectionListener(selectionListener);
-	
+
 		/* Set the default state */
 		preferredButton.setSelection (true);
 	}
-	
+
 	/**
 	 * Creates the "Style" group.  The "Style" group contains
 	 * controls that allow the user to change the style of
@@ -1361,7 +1336,7 @@ abstract class Tab {
 		styleGroup.setLayoutData (new GridData (SWT.FILL, SWT.FILL, false, false));
 		styleGroup.setText (ControlExample.getResourceString("Styles"));
 	}
-	
+
 	/**
 	 * Creates the tab folder page.
 	 *
@@ -1372,27 +1347,27 @@ abstract class Tab {
 		/* Cache the shell and display. */
 		shell = tabFolder.getShell ();
 		display = shell.getDisplay ();
-		
+
 		/* Create a two column page. */
 		tabFolderPage = new Composite (tabFolder, SWT.NONE);
 		tabFolderPage.setLayout (new GridLayout (2, false));
-	
+
 		/* Create the "Example" and "Control" groups. */
 		createExampleGroup ();
 		createControlGroup ();
-		
+
 		/* Create the "Listeners" group under the "Control" group. */
 		createListenersGroup ();
-		
+
 		/* Create and initialize the example and control widgets. */
 		createExampleWidgets ();
 		hookExampleWidgetListeners ();
 		createControlWidgets ();
 		setExampleWidgetState ();
-		
+
 		return tabFolderPage;
 	}
-	
+
 	void setExampleWidgetPopupMenu() {
 		Control[] controls = getExampleControls();
 		for (final Control control : controls) {
@@ -1426,7 +1401,7 @@ abstract class Tab {
 			widget.dispose ();
 		}
 	}
-	
+
 	Image colorImage (Color color) {
 		Image image = new Image (display, IMAGE_SIZE, IMAGE_SIZE);
 		GC gc = new GC(image);
@@ -1438,7 +1413,7 @@ abstract class Tab {
 		gc.dispose();
 		return image;
 	}
-	
+
 	Image fontImage (Font font) {
 		Image image = new Image (display, IMAGE_SIZE, IMAGE_SIZE);
 		GC gc = new GC(image);
@@ -1484,18 +1459,18 @@ abstract class Tab {
 		gc.dispose();
 		return image;
 	}
-	
+
 	/**
 	 * Gets the list of custom event names.
 	 * Subclasses override this method to allow adding of custom events.
-	 * 
+	 *
 	 * @return an array containing custom event names
 	 * @see hookCustomListener
 	 */
 	String [] getCustomEventNames () {
 		return new String [0];
 	}
-	
+
 	/**
 	 * Gets the default style for a widget
 	 *
@@ -1510,7 +1485,7 @@ abstract class Tab {
 		}
 		return SWT.NONE;
 	}
-	
+
 	/**
 	 * Gets the "Example" widgets.
 	 *
@@ -1519,7 +1494,7 @@ abstract class Tab {
 	Widget [] getExampleWidgets () {
 		return new Widget [0];
 	}
-	
+
 	/**
 	 * Gets the "Example" controls.
 	 * This is the subset of "Example" widgets that are controls.
@@ -1539,7 +1514,7 @@ abstract class Tab {
 		}
 		return controls;
 	}
-	
+
 	/**
 	 * Gets the "Example" widget's items, if any.
 	 *
@@ -1548,7 +1523,7 @@ abstract class Tab {
 	Item [] getExampleWidgetItems () {
 		return new Item [0];
 	}
-	
+
 	/**
 	 * Gets the short text for the tab folder item.
 	 *
@@ -1566,7 +1541,7 @@ abstract class Tab {
 	String getTabText () {
 		return "";
 	}
-	
+
 	/**
 	 * In case one of the buttons that control text direction was selected,
 	 * apply the text direction on the controls in the client area.
@@ -1598,7 +1573,7 @@ abstract class Tab {
 		}
 		return true;
 	}
-	
+
 	/**
 	 * Hooks all listeners to all example controls
 	 * and example control items.
@@ -1621,7 +1596,7 @@ abstract class Tab {
 			}
 		}
 	}
-	
+
 	/**
 	 * Hooks the custom listener specified by eventName.
 	 * Subclasses override this method to add custom listeners.
@@ -1629,7 +1604,7 @@ abstract class Tab {
 	 */
 	void hookCustomListener (String eventName) {
 	}
-	
+
 	/**
 	 * Hooks all listeners to the specified widget.
 	 */
@@ -1643,7 +1618,7 @@ abstract class Tab {
 			}
 		}
 	}
-	
+
 	/**
 	 * Logs an untyped event to the event console.
 	 */
@@ -1664,7 +1639,7 @@ abstract class Tab {
 				case SWT.MouseEnter:
 				case SWT.MouseExit:
 				case SWT.MouseDoubleClick:
-				case SWT.MouseWheel: 
+				case SWT.MouseWheel:
 				case SWT.MouseHover: toString += new MouseEvent (event).toString (); break;
 				case SWT.Paint: toString += new PaintEvent (event).toString (); break;
 				case SWT.Move:
@@ -1699,7 +1674,7 @@ abstract class Tab {
 			toString += event.toString();
 		}
 		log (toString);
-		
+
 		/* Return values for event fields. */
 		int mask = EVENT_INFO[i].setFields;
 		if (!ignore && mask != 0) {
@@ -1717,7 +1692,7 @@ abstract class Tab {
 			ignore = false;
 		}
 	}
-	
+
 	/**
 	 * Logs a string to the event console.
 	 */
@@ -1734,7 +1709,7 @@ abstract class Tab {
 	void log (String eventName, TypedEvent event) {
 		log (eventName + ": " + event.toString ());
 	}
-	
+
 	/**
 	 * Recreates the "Example" widgets.
 	 */
@@ -1744,7 +1719,7 @@ abstract class Tab {
 		hookExampleWidgetListeners ();
 		setExampleWidgetState ();
 	}
-	
+
 	/**
 	 * Sets the foreground color, background color, and font
 	 * of the "Example" widgets to their default settings.
@@ -1766,11 +1741,11 @@ abstract class Tab {
 		setExampleWidgetSize ();
 		if (oldFont != null) oldFont.dispose();
 	}
-	
+
 	boolean rtlSupport() {
 		return RTL_SUPPORT_ENABLE;
 	}
-	
+
 	/**
 	 * Sets the background color of the "Example" widgets' parent.
 	 */
@@ -1818,7 +1793,7 @@ abstract class Tab {
 		if (oldImage != null) oldImage.dispose();
 		item.setImage (colorImage (color));
 	}
-	
+
 	/**
 	 * Sets the enabled state of the "Example" widgets.
 	 */
@@ -1828,7 +1803,7 @@ abstract class Tab {
 			control.setEnabled (enabledButton.getSelection ());
 		}
 	}
-	
+
 	/**
 	 * Sets the font of the "Example" widgets.
 	 */
@@ -1851,7 +1826,7 @@ abstract class Tab {
 		item.setFont(ft);
 		colorAndFontTable.layout ();
 	}
-	
+
 	/**
 	 * Sets the foreground color of the "Example" widgets.
 	 */
@@ -1872,7 +1847,7 @@ abstract class Tab {
 		if (oldImage != null) oldImage.dispose();
 		item.setImage (colorImage(color));
 	}
-	
+
 	/**
 	 * Sets the size of the "Example" widgets.
 	 */
@@ -1885,7 +1860,7 @@ abstract class Tab {
 		if (largeButton.getSelection()) size = LARGE_SIZE;
 		Control [] controls = getExampleControls ();
 		for (Control control : controls) {
-			GridData gridData = new GridData(size, size); 
+			GridData gridData = new GridData(size, size);
 			gridData.grabExcessHorizontalSpace = fillHButton.getSelection();
 			gridData.grabExcessVerticalSpace = fillVButton.getSelection();
 			gridData.horizontalAlignment = fillHButton.getSelection() ? SWT.FILL : SWT.LEFT;
@@ -1894,7 +1869,7 @@ abstract class Tab {
 		}
 		tabFolderPage.layout (controls);
 	}
-	
+
 	/**
 	 * Sets the state of the "Example" widgets.  Subclasses
 	 * may extend this method to set "Example" widget state
@@ -1920,7 +1895,7 @@ abstract class Tab {
 //			log ("Control=" + controls [i] + ", border width=" + controls [i].getBorderWidth ());
 //		}
 	}
-	
+
 	/**
 	 * Sets the visibility of the "Example" widgets.
 	 */
@@ -1941,10 +1916,10 @@ abstract class Tab {
 			control.setBackgroundImage (backgroundImageButton.getSelection () ? instance.images[ControlExample.ciBackground] : null);
 		}
 	}
-	
+
 	/**
 	 * Splits the given string around matches of the given character.
-	 * 
+	 *
 	 * This subset of java.lang.String.split(String regex)
 	 * uses only code that can be run on CLDC platforms.
 	 */
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/TableTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/TableTab.java
index 8b06fb5..6387fcf 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/TableTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/TableTab.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -12,8 +12,6 @@ package org.eclipse.swt.examples.controlexample;
 
 
 import org.eclipse.swt.SWT;
-import org.eclipse.swt.events.DisposeEvent;
-import org.eclipse.swt.events.DisposeListener;
 import org.eclipse.swt.events.SelectionAdapter;
 import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.events.SelectionListener;
@@ -43,13 +41,13 @@ class TableTab extends ScrollableTab {
 
 	/* Size widgets added to the "Size" group */
 	Button packColumnsButton;
-	
+
 	/* Style widgets added to the "Style" group */
 	Button noScrollButton, checkButton, fullSelectionButton, hideSelectionButton;
 
 	/* Other widgets added to the "Other" group */
 	Button multipleColumns, moveableColumns, resizableColumns, headerVisibleButton, sortIndicatorButton, headerImagesButton, linesVisibleButton, subImagesButton;
-	
+
 	/* Controls and resources added to the "Colors and Fonts" group */
 	static final int ITEM_FOREGROUND_COLOR = 3;
 	static final int ITEM_BACKGROUND_COLOR = 4;
@@ -59,12 +57,12 @@ class TableTab extends ScrollableTab {
 	static final int CELL_FONT = 8;
 	Color itemForegroundColor, itemBackgroundColor, cellForegroundColor, cellBackgroundColor;
 	Font itemFont, cellFont;
-	
+
 	static String [] columnTitles	= {ControlExample.getResourceString("TableTitle_0"),
 									   ControlExample.getResourceString("TableTitle_1"),
 									   ControlExample.getResourceString("TableTitle_2"),
 									   ControlExample.getResourceString("TableTitle_3")};
-									   
+
 	static String[][] tableData = {
 		{ ControlExample.getResourceString("TableLine0_0"),
 				ControlExample.getResourceString("TableLine0_1"),
@@ -80,21 +78,21 @@ class TableTab extends ScrollableTab {
 				ControlExample.getResourceString("TableLine2_3") } };
 
 	Point menuMouseCoords;
-	
+
 	/**
 	 * Creates the Tab within a given instance of ControlExample.
 	 */
 	TableTab(ControlExample instance) {
 		super(instance);
 	}
-	
+
 	/**
 	 * Creates the "Colors and Fonts" group.
 	 */
 	@Override
 	void createColorAndFontGroup () {
 		super.createColorAndFontGroup();
-		
+
 		TableItem item = new TableItem(colorAndFontTable, SWT.None);
 		item.setText(ControlExample.getResourceString ("Item_Foreground_Color"));
 		item = new TableItem(colorAndFontTable, SWT.None);
@@ -108,22 +106,19 @@ class TableTab extends ScrollableTab {
 		item = new TableItem(colorAndFontTable, SWT.None);
 		item.setText(ControlExample.getResourceString ("Cell_Font"));
 
-		shell.addDisposeListener(new DisposeListener() {
-			@Override
-			public void widgetDisposed(DisposeEvent event) {
-				if (itemBackgroundColor != null) itemBackgroundColor.dispose();
-				if (itemForegroundColor != null) itemForegroundColor.dispose();
-				if (itemFont != null) itemFont.dispose();
-				if (cellBackgroundColor != null) cellBackgroundColor.dispose();
-				if (cellForegroundColor != null) cellForegroundColor.dispose();
-				if (cellFont != null) cellFont.dispose();
-				itemBackgroundColor = null;
-				itemForegroundColor = null;			
-				itemFont = null;
-				cellBackgroundColor = null;
-				cellForegroundColor = null;			
-				cellFont = null;
-			}
+		shell.addDisposeListener(event -> {
+			if (itemBackgroundColor != null) itemBackgroundColor.dispose();
+			if (itemForegroundColor != null) itemForegroundColor.dispose();
+			if (itemFont != null) itemFont.dispose();
+			if (cellBackgroundColor != null) cellBackgroundColor.dispose();
+			if (cellForegroundColor != null) cellForegroundColor.dispose();
+			if (cellFont != null) cellFont.dispose();
+			itemBackgroundColor = null;
+			itemForegroundColor = null;
+			itemFont = null;
+			cellBackgroundColor = null;
+			cellForegroundColor = null;
+			cellFont = null;
 		});
 	}
 
@@ -215,7 +210,7 @@ class TableTab extends ScrollableTab {
 	@Override
 	void createOtherGroup () {
 		super.createOtherGroup ();
-	
+
 		/* Create display controls specific to this example */
 		linesVisibleButton = new Button (otherGroup, SWT.CHECK);
 		linesVisibleButton.setText (ControlExample.getResourceString("Lines_Visible"));
@@ -285,26 +280,26 @@ class TableTab extends ScrollableTab {
 			}
 		});
 	}
-	
+
 	/**
 	 * Creates the "Example" group.
 	 */
 	@Override
 	void createExampleGroup () {
 		super.createExampleGroup ();
-		
+
 		/* Create a group for the table */
 		tableGroup = new Group (exampleGroup, SWT.NONE);
 		tableGroup.setLayout (new GridLayout ());
 		tableGroup.setLayoutData (new GridData (SWT.FILL, SWT.FILL, true, true));
 		tableGroup.setText ("Table");
 	}
-	
+
 	/**
 	 * Creates the "Example" widgets.
 	 */
 	@Override
-	void createExampleWidgets () {	
+	void createExampleWidgets () {
 		/* Compute the widget style */
 		int style = getDefaultStyle();
 		if (singleButton.getSelection ()) style |= SWT.SINGLE;
@@ -316,10 +311,10 @@ class TableTab extends ScrollableTab {
 		if (fullSelectionButton.getSelection ()) style |= SWT.FULL_SELECTION;
 		if (hideSelectionButton.getSelection ()) style |= SWT.HIDE_SELECTION;
 		if (borderButton.getSelection ()) style |= SWT.BORDER;
-	
+
 		/* Create the table widget */
 		table1 = new Table (tableGroup, style);
-	
+
 		/* Fill the table with data */
 		boolean multiColumn = multipleColumns.getSelection();
 		if (multiColumn) {
@@ -344,7 +339,7 @@ class TableTab extends ScrollableTab {
 		}
 		packColumns();
 	}
-	
+
 	void setItemText(TableItem item, int i, String node) {
 		int index = i % 3;
 		if (multipleColumns.getSelection()) {
@@ -354,7 +349,7 @@ class TableTab extends ScrollableTab {
 			item.setText (node);
 		}
 	}
-	
+
 	/**
 	 * Creates the "Size" group.  The "Size" group contains
 	 * controls that allow the user to change the size of
@@ -363,7 +358,7 @@ class TableTab extends ScrollableTab {
 	@Override
 	void createSizeGroup () {
 		super.createSizeGroup();
-	
+
 		packColumnsButton = new Button (sizeGroup, SWT.PUSH);
 		packColumnsButton.setText (ControlExample.getResourceString("Pack_Columns"));
 		packColumnsButton.addSelectionListener(new SelectionAdapter () {
@@ -374,14 +369,14 @@ class TableTab extends ScrollableTab {
 			}
 		});
 	}
-	
+
 	/**
 	 * Creates the "Style" group.
 	 */
 	@Override
 	void createStyleGroup () {
 		super.createStyleGroup ();
-		
+
 		/* Create the extra widgets */
 		noScrollButton = new Button (styleGroup, SWT.CHECK);
 		noScrollButton.setText ("SWT.NO_SCROLL");
@@ -393,7 +388,7 @@ class TableTab extends ScrollableTab {
 		hideSelectionButton = new Button (styleGroup, SWT.CHECK);
 		hideSelectionButton.setText ("SWT.HIDE_SELECTION");
 	}
-	
+
 	/**
 	 * Gets the "Example" widget children's items, if any.
 	 *
@@ -408,7 +403,7 @@ class TableTab extends ScrollableTab {
 		System.arraycopy(items, 0, allItems, columns.length, items.length);
 		return allItems;
 	}
-	
+
 	/**
 	 * Gets the "Example" widget children.
 	 */
@@ -416,7 +411,7 @@ class TableTab extends ScrollableTab {
 	Widget [] getExampleWidgets () {
 		return new Widget [] {table1};
 	}
-	
+
 	/**
 	 * Returns a list of set/get API method names (without the set/get prefix)
 	 * that can be used to set/get values in the example control(s).
@@ -433,7 +428,7 @@ class TableTab extends ScrollableTab {
 	}
 
 	void packColumns () {
-		int columnCount = table1.getColumnCount(); 
+		int columnCount = table1.getColumnCount();
 		for (int i = 0; i < columnCount; i++) {
 			TableColumn tableColumn = table1.getColumn(i);
 			tableColumn.pack();
@@ -472,7 +467,7 @@ class TableTab extends ScrollableTab {
 	String getTabText () {
 		return "Table";
 	}
-	
+
 	/**
 	 * Sets the foreground color, background color, and font
 	 * of the "Example" widgets to their default settings.
@@ -507,7 +502,7 @@ class TableTab extends ScrollableTab {
 		setCellFont ();
 		if (oldFont != null) oldFont.dispose();
 	}
-	
+
 	/**
 	 * Sets the background color of the Row 0 TableItem in column 1.
 	 */
@@ -523,7 +518,7 @@ class TableTab extends ScrollableTab {
 		if (oldImage != null) oldImage.dispose();
 		item.setImage (colorImage(color));
 	}
-	
+
 	/**
 	 * Sets the foreground color of the Row 0 TableItem in column 1.
 	 */
@@ -539,7 +534,7 @@ class TableTab extends ScrollableTab {
 		if (oldImage != null) oldImage.dispose();
 		item.setImage (colorImage(color));
 	}
-	
+
 	/**
 	 * Sets the font of the Row 0 TableItem in column 1.
 	 */
@@ -573,7 +568,7 @@ class TableTab extends ScrollableTab {
 		if (oldImage != null) oldImage.dispose();
 		item.setImage (colorImage(color));
 	}
-	
+
 	/**
 	 * Sets the foreground color of TableItem [0].
 	 */
@@ -589,7 +584,7 @@ class TableTab extends ScrollableTab {
 		if (oldImage != null) oldImage.dispose();
 		item.setImage (colorImage(color));
 	}
-	
+
 	/**
 	 * Sets the font of TableItem 0.
 	 */
@@ -661,14 +656,14 @@ class TableTab extends ScrollableTab {
 		headerVisibleButton.setSelection (table1.getHeaderVisible());
 		linesVisibleButton.setSelection (table1.getLinesVisible());
 	}
-	
+
 	/**
 	 * Sets the header visible state of the "Example" widgets.
 	 */
 	void setWidgetHeaderVisible () {
 		table1.setHeaderVisible (headerVisibleButton.getSelection ());
 	}
-	
+
 	/**
 	 * Sets the sort indicator state of the "Example" widgets.
 	 */
@@ -707,14 +702,14 @@ class TableTab extends ScrollableTab {
 			}
 		}
 	}
-	
+
 	/**
 	 * Sets the lines visible state of the "Example" widgets.
 	 */
 	void setWidgetLinesVisible () {
 		table1.setLinesVisible (linesVisibleButton.getSelection ());
 	}
-	
+
 	@Override
 	protected void specialPopupMenuItems(Menu menu, Event event) {
     	MenuItem item = new MenuItem(menu, SWT.PUSH);
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ToolTipTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ToolTipTab.java
index ca92c86..ab47da1 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ToolTipTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ToolTipTab.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -14,8 +14,6 @@ package org.eclipse.swt.examples.controlexample;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.events.ControlAdapter;
 import org.eclipse.swt.events.ControlEvent;
-import org.eclipse.swt.events.DisposeEvent;
-import org.eclipse.swt.events.DisposeListener;
 import org.eclipse.swt.events.SelectionAdapter;
 import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.layout.GridData;
@@ -34,30 +32,30 @@ class ToolTipTab extends Tab {
 	/* Example widgets and groups that contain them */
 	ToolTip toolTip1;
 	Group toolTipGroup;
-	
+
 	/* Style widgets added to the "Style" group */
 	Button balloonButton, iconErrorButton, iconInformationButton, iconWarningButton, noIconButton;
-	
+
 	/* Other widgets added to the "Other" group */
 	Button autoHideButton, showInTrayButton;
-	
+
 	Tray tray;
 	TrayItem trayItem;
-	
+
 	/**
 	 * Creates the Tab within a given instance of ControlExample.
 	 */
 	ToolTipTab(ControlExample instance) {
 		super(instance);
 	}
-	
+
 	/**
 	 * Creates the "Example" group.
 	 */
 	@Override
 	void createExampleGroup () {
 		super.createExampleGroup ();
-		
+
 		/* Create a group for the tooltip visibility check box */
 		toolTipGroup = new Group (exampleGroup, SWT.NONE);
 		toolTipGroup.setLayout (new GridLayout ());
@@ -72,26 +70,26 @@ class ToolTipTab extends Tab {
 			}
 		});
 	}
-	
+
 	/**
 	 * Creates the "Example" widgets.
 	 */
 	@Override
 	void createExampleWidgets () {
-		
+
 		/* Compute the widget style */
 		int style = getDefaultStyle();
 		if (balloonButton.getSelection ()) style |= SWT.BALLOON;
 		if (iconErrorButton.getSelection ()) style |= SWT.ICON_ERROR;
 		if (iconInformationButton.getSelection ()) style |= SWT.ICON_INFORMATION;
 		if (iconWarningButton.getSelection ()) style |= SWT.ICON_WARNING;
-		
+
 		/* Create the example widgets */
 		toolTip1 = new ToolTip (shell, style);
 		toolTip1.setText(ControlExample.getResourceString("ToolTip_Title"));
 		toolTip1.setMessage(ControlExample.getResourceString("Example_string"));
 	}
-	
+
 	/**
 	 * Creates the tab folder page.
 	 *
@@ -114,7 +112,7 @@ class ToolTipTab extends Tab {
 				setExampleWidgetSize ();
 			}
 		});
-		
+
 		return tabFolderPage;
 	}
 
@@ -124,7 +122,7 @@ class ToolTipTab extends Tab {
 	@Override
 	void createStyleGroup () {
 		super.createStyleGroup ();
-	
+
 		/* Create the extra widgets */
 		balloonButton = new Button (styleGroup, SWT.CHECK);
 		balloonButton.setText ("SWT.BALLOON");
@@ -137,12 +135,12 @@ class ToolTipTab extends Tab {
 		noIconButton = new Button (styleGroup, SWT.RADIO);
 		noIconButton.setText(ControlExample.getResourceString("No_Icon"));
 	}
-	
+
 	@Override
 	void createColorAndFontGroup () {
 		// ToolTip does not need a color and font group.
 	}
-	
+
 	@Override
 	void createOtherGroup () {
 		/* Create the group */
@@ -150,7 +148,7 @@ class ToolTipTab extends Tab {
 		otherGroup.setLayout (new GridLayout ());
 		otherGroup.setLayoutData (new GridData (SWT.FILL, SWT.FILL, false, false));
 		otherGroup.setText (ControlExample.getResourceString("Other"));
-	
+
 		/* Create the controls */
 		autoHideButton = new Button(otherGroup, SWT.CHECK);
 		autoHideButton.setText(ControlExample.getResourceString("AutoHide"));
@@ -172,27 +170,22 @@ class ToolTipTab extends Tab {
 				showExampleWidgetInTray ();
 			}
 		});
-		shell.addDisposeListener(new DisposeListener() {
-			@Override
-			public void widgetDisposed(DisposeEvent event) {
-				disposeTrayItem();
-			}
-		});
+		shell.addDisposeListener(event -> disposeTrayItem());
 
 		/* Set the default state */
 		autoHideButton.setSelection(true);
 	}
-	
+
 	@Override
 	void createSizeGroup () {
 		// ToolTip does not need a size group.
 	}
-	
+
 	@Override
 	void createBackgroundModeGroup () {
 		// ToolTip does not need a background mode group.
 	}
-	
+
 	/**
 	 * Disposes the "Example" widgets.
 	 */
@@ -201,7 +194,7 @@ class ToolTipTab extends Tab {
 		disposeTrayItem();
 		super.disposeExampleWidgets();
 	}
-	
+
 	/**
 	 * Gets the "Example" widget children.
 	 */
@@ -210,7 +203,7 @@ class ToolTipTab extends Tab {
 	Widget[] getExampleWidgets () {
 		return new Widget [] {toolTip1};
 	}
-	
+
 	/**
 	 * Returns a list of set/get API method names (without the set/get prefix)
 	 * that can be used to set/get values in the example control(s).
@@ -235,7 +228,7 @@ class ToolTipTab extends Tab {
 	String getTabText () {
 		return "ToolTip";
 	}
-	
+
 	/**
 	 * Sets the state of the "Example" widgets.
 	 */
@@ -259,14 +252,14 @@ class ToolTipTab extends Tab {
 	void setExampleWidgetVisibility () {
 		toolTip1.setVisible (visibleButton.getSelection ());
 	}
-	
+
 	/**
 	 * Sets the autoHide state of the "Example" widgets.
 	 */
 	void setExampleWidgetAutoHide () {
 		toolTip1.setAutoHide(autoHideButton.getSelection ());
 	}
-	
+
 	void showExampleWidgetInTray () {
 		if (showInTrayButton.getSelection ()) {
 			createTrayItem();
@@ -282,7 +275,7 @@ class ToolTipTab extends Tab {
 			trayItem.setImage(instance.images[ControlExample.ciTarget]);
 		}
 	}
-	
+
 	void disposeTrayItem() {
 		if (trayItem != null) {
 			trayItem.setToolTip(null);
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/TreeTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/TreeTab.java
index 86b9417..c80619d 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/TreeTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/TreeTab.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -12,8 +12,6 @@ package org.eclipse.swt.examples.controlexample;
 
 
 import org.eclipse.swt.SWT;
-import org.eclipse.swt.events.DisposeEvent;
-import org.eclipse.swt.events.DisposeListener;
 import org.eclipse.swt.events.SelectionAdapter;
 import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.events.SelectionListener;
@@ -42,16 +40,16 @@ class TreeTab extends ScrollableTab {
 	Tree tree1, tree2;
 	TreeItem textNode1, imageNode1;
 	Group treeGroup, imageTreeGroup, itemGroup;
-	
+
 	/* Size widgets added to the "Size" group */
 	Button packColumnsButton;
-	
+
 	/* Style widgets added to the "Style" group */
 	Button noScrollButton, checkButton, fullSelectionButton;
 
 	/* Other widgets added to the "Other" group */
 	Button multipleColumns, moveableColumns, resizableColumns, headerVisibleButton, sortIndicatorButton, headerImagesButton, subImagesButton, linesVisibleButton;
-	
+
 	/* Controls and resources added to the "Colors and Fonts" group */
 	static final int ITEM_FOREGROUND_COLOR = 3;
 	static final int ITEM_BACKGROUND_COLOR = 4;
@@ -66,7 +64,7 @@ class TreeTab extends ScrollableTab {
 		   ControlExample.getResourceString("TableTitle_1"),
 		   ControlExample.getResourceString("TableTitle_2"),
 		   ControlExample.getResourceString("TableTitle_3")};
-		   
+
 	static String[][] tableData = {
 			{ ControlExample.getResourceString("TableLine0_0"),
 					ControlExample.getResourceString("TableLine0_1"),
@@ -96,7 +94,7 @@ class TreeTab extends ScrollableTab {
 	@Override
 	void createColorAndFontGroup () {
 		super.createColorAndFontGroup();
-		
+
 		TableItem item = new TableItem(colorAndFontTable, SWT.None);
 		item.setText(ControlExample.getResourceString ("Item_Foreground_Color"));
 		item = new TableItem(colorAndFontTable, SWT.None);
@@ -110,22 +108,19 @@ class TreeTab extends ScrollableTab {
 		item = new TableItem(colorAndFontTable, SWT.None);
 		item.setText(ControlExample.getResourceString ("Cell_Font"));
 
-		shell.addDisposeListener(new DisposeListener() {
-			@Override
-			public void widgetDisposed(DisposeEvent event) {
-				if (itemBackgroundColor != null) itemBackgroundColor.dispose();
-				if (itemForegroundColor != null) itemForegroundColor.dispose();
-				if (itemFont != null) itemFont.dispose();
-				if (cellBackgroundColor != null) cellBackgroundColor.dispose();
-				if (cellForegroundColor != null) cellForegroundColor.dispose();
-				if (cellFont != null) cellFont.dispose();
-				itemBackgroundColor = null;
-				itemForegroundColor = null;			
-				itemFont = null;
-				cellBackgroundColor = null;
-				cellForegroundColor = null;			
-				cellFont = null;
-			}
+		shell.addDisposeListener(event -> {
+			if (itemBackgroundColor != null) itemBackgroundColor.dispose();
+			if (itemForegroundColor != null) itemForegroundColor.dispose();
+			if (itemFont != null) itemFont.dispose();
+			if (cellBackgroundColor != null) cellBackgroundColor.dispose();
+			if (cellForegroundColor != null) cellForegroundColor.dispose();
+			if (cellFont != null) cellFont.dispose();
+			itemBackgroundColor = null;
+			itemForegroundColor = null;
+			itemFont = null;
+			cellBackgroundColor = null;
+			cellForegroundColor = null;
+			cellFont = null;
 		});
 	}
 
@@ -217,7 +212,7 @@ class TreeTab extends ScrollableTab {
 	@Override
 	void createOtherGroup () {
 		super.createOtherGroup ();
-	
+
 		/* Create display controls specific to this example */
 		linesVisibleButton = new Button (otherGroup, SWT.CHECK);
 		linesVisibleButton.setText (ControlExample.getResourceString("Lines_Visible"));
@@ -235,7 +230,7 @@ class TreeTab extends ScrollableTab {
 		headerImagesButton.setText (ControlExample.getResourceString("Header_Images"));
 		subImagesButton = new Button (otherGroup, SWT.CHECK);
 		subImagesButton.setText (ControlExample.getResourceString("Sub_Images"));
-	
+
 		/* Add the listeners */
 		linesVisibleButton.addSelectionListener (new SelectionAdapter () {
 			@Override
@@ -286,27 +281,27 @@ class TreeTab extends ScrollableTab {
 			}
 		});
 	}
-	
+
 	/**
 	 * Creates the "Example" group.
 	 */
 	@Override
 	void createExampleGroup () {
 		super.createExampleGroup ();
-		
+
 		/* Create a group for the text tree */
 		treeGroup = new Group (exampleGroup, SWT.NONE);
 		treeGroup.setLayout (new GridLayout ());
 		treeGroup.setLayoutData (new GridData (SWT.FILL, SWT.FILL, true, true));
 		treeGroup.setText ("Tree");
-	
+
 		/* Create a group for the image tree */
 		imageTreeGroup = new Group (exampleGroup, SWT.NONE);
 		imageTreeGroup.setLayout (new GridLayout ());
 		imageTreeGroup.setLayoutData (new GridData (SWT.FILL, SWT.FILL, true, true));
 		imageTreeGroup.setText (ControlExample.getResourceString("Tree_With_Images"));
 	}
-	
+
 	/**
 	 * Creates the "Example" widgets.
 	 */
@@ -322,7 +317,7 @@ class TreeTab extends ScrollableTab {
 		if (checkButton.getSelection()) style |= SWT.CHECK;
 		if (fullSelectionButton.getSelection ()) style |= SWT.FULL_SELECTION;
 		if (borderButton.getSelection()) style |= SWT.BORDER;
-	
+
 		/* Create the text tree */
 		tree1 = new Tree (treeGroup, style);
 		boolean multiColumn = multipleColumns.getSelection();
@@ -346,7 +341,7 @@ class TreeTab extends ScrollableTab {
 		TreeItem item = new TreeItem (treeRoots[1], SWT.NONE);
 		setItemText(item, 1, ControlExample.getResourceString("Node_2_2"));
 		item = new TreeItem (item, SWT.NONE);
-		setItemText(item, 1, ControlExample.getResourceString("Node_2_2_1"));					
+		setItemText(item, 1, ControlExample.getResourceString("Node_2_2_1"));
 		textNode1 = treeRoots[0];
 		packColumns(tree1);
 		try {
@@ -354,7 +349,7 @@ class TreeTab extends ScrollableTab {
 			resizableColumns.setSelection (column.getResizable());
 		} catch (IllegalArgumentException ex) {}
 
-		/* Create the image tree */	
+		/* Create the image tree */
 		tree2 = new Tree (imageTreeGroup, style);
 		Image image = instance.images[ControlExample.ciClosedFolder];
 		if (multiColumn) {
@@ -409,7 +404,7 @@ class TreeTab extends ScrollableTab {
 		imageNode1 = treeRoots[0];
 		packColumns(tree2);
 	}
-	
+
 	void setItemText(TreeItem item, int i, String node) {
 		int index = i % 3;
 		if (multipleColumns.getSelection()) {
@@ -417,9 +412,9 @@ class TreeTab extends ScrollableTab {
 			item.setText (tableData [index]);
 		} else {
 			item.setText (node);
-		}		
+		}
 	}
-	
+
 	/**
 	 * Creates the "Size" group.  The "Size" group contains
 	 * controls that allow the user to change the size of
@@ -428,7 +423,7 @@ class TreeTab extends ScrollableTab {
 	@Override
 	void createSizeGroup () {
 		super.createSizeGroup();
-	
+
 		packColumnsButton = new Button (sizeGroup, SWT.PUSH);
 		packColumnsButton.setText (ControlExample.getResourceString("Pack_Columns"));
 		packColumnsButton.addSelectionListener(new SelectionAdapter () {
@@ -440,14 +435,14 @@ class TreeTab extends ScrollableTab {
 			}
 		});
 	}
-	
+
 	/**
 	 * Creates the "Style" group.
 	 */
 	@Override
 	void createStyleGroup() {
 		super.createStyleGroup();
-		
+
 		/* Create the extra widgets */
 		noScrollButton = new Button (styleGroup, SWT.CHECK);
 		noScrollButton.setText ("SWT.NO_SCROLL");
@@ -457,7 +452,7 @@ class TreeTab extends ScrollableTab {
 		fullSelectionButton = new Button (styleGroup, SWT.CHECK);
 		fullSelectionButton.setText ("SWT.FULL_SELECTION");
 	}
-	
+
 	/**
 	 * Gets the "Example" widget children's items, if any.
 	 *
@@ -476,7 +471,7 @@ class TreeTab extends ScrollableTab {
 		System.arraycopy(columns2, 0, allItems, columns1.length, columns2.length);
 		return allItems;
 	}
-	
+
 	/**
 	 * Gets the "Example" widget children.
 	 */
@@ -484,7 +479,7 @@ class TreeTab extends ScrollableTab {
 	Widget [] getExampleWidgets () {
 		return new Widget [] {tree1, tree2};
 	}
-	
+
 	/**
 	 * Returns a list of set/get API method names (without the set/get prefix)
 	 * that can be used to set/get values in the example control(s).
@@ -506,7 +501,7 @@ class TreeTab extends ScrollableTab {
 			for (int i = 0; i < values.length; i++) {
 				TreeItem item = findItem(values[i], ((Tree) widget).getItems());
 				if (item == null) break;
-				items[i] = item;				
+				items[i] = item;
 			}
 			return new Object[] {items};
 		}
@@ -539,7 +534,7 @@ class TreeTab extends ScrollableTab {
 			}
 		}
 	}
-	
+
 	/**
 	 * Sets the moveable columns state of the "Example" widgets.
 	 */
@@ -604,7 +599,7 @@ class TreeTab extends ScrollableTab {
 		setCellFont ();
 		if (oldFont != null) oldFont.dispose();
 	}
-	
+
 	/**
 	 * Sets the state of the "Example" widgets.
 	 */
@@ -635,7 +630,7 @@ class TreeTab extends ScrollableTab {
 		headerVisibleButton.setSelection (tree1.getHeaderVisible());
 		linesVisibleButton.setSelection (tree1.getLinesVisible());
 	}
-	
+
 	/**
 	 * Sets the background color of the Node 1 TreeItems in column 1.
 	 */
@@ -652,7 +647,7 @@ class TreeTab extends ScrollableTab {
 		if (oldImage != null) oldImage.dispose();
 		item.setImage (colorImage(color));
 	}
-	
+
 	/**
 	 * Sets the foreground color of the Node 1 TreeItems in column 1.
 	 */
@@ -669,7 +664,7 @@ class TreeTab extends ScrollableTab {
 		if (oldImage != null) oldImage.dispose();
 		item.setImage (colorImage(color));
 	}
-	
+
 	/**
 	 * Sets the font of the Node 1 TreeItems in column 1.
 	 */
@@ -705,7 +700,7 @@ class TreeTab extends ScrollableTab {
 		if (oldImage != null) oldImage.dispose();
 		item.setImage (colorImage(color));
 	}
-	
+
 	/**
 	 * Sets the foreground color of the Node 1 TreeItems.
 	 */
@@ -722,7 +717,7 @@ class TreeTab extends ScrollableTab {
 		if (oldImage != null) oldImage.dispose();
 		item.setImage (colorImage(color));
 	}
-	
+
 	/**
 	 * Sets the font of the Node 1 TreeItems.
 	 */
@@ -749,7 +744,7 @@ class TreeTab extends ScrollableTab {
 		tree1.setHeaderVisible (headerVisibleButton.getSelection ());
 		tree2.setHeaderVisible (headerVisibleButton.getSelection ());
 	}
-	
+
 	/**
 	 * Sets the sort indicator state of the "Example" widgets.
 	 */
@@ -762,7 +757,7 @@ class TreeTab extends ScrollableTab {
 			resetSortState (tree2);
 		}
 	}
-	
+
 	/**
 	 * Sets the initial sort indicator state and adds a listener
 	 * to cycle through sort states and columns.
@@ -803,7 +798,7 @@ class TreeTab extends ScrollableTab {
 			if (listener != null) column.removeSelectionListener(listener);
 		}
 	}
-	
+
 	/**
 	 * Sets the lines visible state of the "Example" widgets.
 	 */
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/dnd/DNDExample.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/dnd/DNDExample.java
index 3ff7aed..cba23d9 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/dnd/DNDExample.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/dnd/DNDExample.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -10,7 +10,7 @@
  *******************************************************************************/
 package org.eclipse.swt.examples.dnd;
 
- 
+
 import java.net.MalformedURLException;
 import java.net.URL;
 
@@ -31,8 +31,6 @@ import org.eclipse.swt.dnd.RTFTransfer;
 import org.eclipse.swt.dnd.TextTransfer;
 import org.eclipse.swt.dnd.Transfer;
 import org.eclipse.swt.dnd.URLTransfer;
-import org.eclipse.swt.events.PaintEvent;
-import org.eclipse.swt.events.PaintListener;
 import org.eclipse.swt.events.SelectionAdapter;
 import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.graphics.FontMetrics;
@@ -68,7 +66,7 @@ import org.eclipse.swt.widgets.TreeColumn;
 import org.eclipse.swt.widgets.TreeItem;
 
 public class DNDExample {
-	
+
 	private int dragOperation = 0;
 	private Transfer[] dragTypes = new Transfer[0];
 	private Control dragControl;
@@ -81,7 +79,7 @@ public class DNDExample {
 	private String[] dragDataFiles;
 	private List fileList;
 	private boolean dragEnabled = false;
-	
+
 	private int dropOperation = 0;
 	private int dropFeedback = 0;
 	private int dropDefaultOperation = 0;
@@ -91,14 +89,14 @@ public class DNDExample {
 	private int dropControlType = 0;
 	private Composite defaultParent;
 	private boolean dropEnabled = false;
-	
+
 	private Text dragConsole;
 	private boolean dragEventDetail = false;
 	private Text dropConsole;
 	private boolean dropEventDetail = false;
-	
+
 	private Image itemImage;
-	
+
 	private static final int BUTTON_TOGGLE = 0;
 	private static final int BUTTON_RADIO = 1;
 	private static final int BUTTON_CHECK = 2;
@@ -110,7 +108,7 @@ public class DNDExample {
 	private static final int TEXT = 8;
 	private static final int STYLED_TEXT = 9;
 	private static final int COMBO = 10;
-	
+
 public static void main(String[] args) {
 	Display display = new Display();
 	DNDExample example = new DNDExample();
@@ -147,7 +145,7 @@ private void createDragOperations(Composite parent) {
 		public void widgetSelected(SelectionEvent e) {
 			Button b = (Button)e.widget;
 			if (b.getSelection()) {
-				dragOperation |= DND.DROP_MOVE;			
+				dragOperation |= DND.DROP_MOVE;
 			} else {
 				dragOperation = dragOperation &~DND.DROP_MOVE;
 				if (dragOperation == 0) {
@@ -160,7 +158,7 @@ private void createDragOperations(Composite parent) {
 			}
 		}
 	});
-	
+
 
 	Button copyButton = new Button(parent, SWT.CHECK);
 	copyButton.setText("DND.DROP_COPY");
@@ -169,7 +167,7 @@ private void createDragOperations(Composite parent) {
 		public void widgetSelected(SelectionEvent e) {
 			Button b = (Button)e.widget;
 			if (b.getSelection()) {
-				dragOperation |= DND.DROP_COPY;			
+				dragOperation |= DND.DROP_COPY;
 			} else {
 				dragOperation = dragOperation &~DND.DROP_COPY;
 				if (dragOperation == 0) {
@@ -190,7 +188,7 @@ private void createDragOperations(Composite parent) {
 		public void widgetSelected(SelectionEvent e) {
 			Button b = (Button)e.widget;
 			if (b.getSelection()) {
-				dragOperation |= DND.DROP_LINK;			
+				dragOperation |= DND.DROP_LINK;
 			} else {
 				dragOperation = dragOperation &~DND.DROP_LINK;
 				if (dragOperation == 0) {
@@ -203,7 +201,7 @@ private void createDragOperations(Composite parent) {
 			}
 		}
 	});
-	
+
 	//initialize state
 	moveButton.setSelection(true);
 	copyButton.setSelection(true);
@@ -435,7 +433,7 @@ private void createDragSource() {
 					dragDataURL = null;
 				}
 			}
-			
+
 			for (int i = 0; i < dragTypes.length; i++) {
 				if (dragTypes[i] instanceof TextTransfer && dragDataText == null) {
 					event.doit = false;
@@ -466,13 +464,13 @@ private void createDragTypes(Composite parent) {
 		public void widgetSelected(SelectionEvent e) {
 			Button b = (Button)e.widget;
 			if (b.getSelection()) {
-				addDragTransfer(TextTransfer.getInstance());			
+				addDragTransfer(TextTransfer.getInstance());
 			} else {
 				removeDragTransfer(TextTransfer.getInstance());
 			}
 		}
 	});
-	
+
 	Button b = new Button(parent, SWT.CHECK);
 	b.setText("RTF Transfer");
 	b.addSelectionListener(new SelectionAdapter() {
@@ -480,13 +478,13 @@ private void createDragTypes(Composite parent) {
 		public void widgetSelected(SelectionEvent e) {
 			Button b = (Button)e.widget;
 			if (b.getSelection()) {
-				addDragTransfer(RTFTransfer.getInstance());			
+				addDragTransfer(RTFTransfer.getInstance());
 			} else {
 				removeDragTransfer(RTFTransfer.getInstance());
 			}
 		}
 	});
-	
+
 	b = new Button(parent, SWT.CHECK);
 	b.setText("HTML Transfer");
 	b.addSelectionListener(new SelectionAdapter() {
@@ -494,13 +492,13 @@ private void createDragTypes(Composite parent) {
 		public void widgetSelected(SelectionEvent e) {
 			Button b = (Button)e.widget;
 			if (b.getSelection()) {
-				addDragTransfer(HTMLTransfer.getInstance());			
+				addDragTransfer(HTMLTransfer.getInstance());
 			} else {
 				removeDragTransfer(HTMLTransfer.getInstance());
 			}
 		}
 	});
-	
+
 	b = new Button(parent, SWT.CHECK);
 	b.setText("URL Transfer");
 	b.addSelectionListener(new SelectionAdapter() {
@@ -508,13 +506,13 @@ private void createDragTypes(Composite parent) {
 		public void widgetSelected(SelectionEvent e) {
 			Button b = (Button)e.widget;
 			if (b.getSelection()) {
-				addDragTransfer(URLTransfer.getInstance());			
+				addDragTransfer(URLTransfer.getInstance());
 			} else {
 				removeDragTransfer(URLTransfer.getInstance());
 			}
 		}
 	});
-	
+
 	b = new Button(parent, SWT.CHECK);
 	b.setText("File Transfer");
 	b.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
@@ -523,7 +521,7 @@ private void createDragTypes(Composite parent) {
 		public void widgetSelected(SelectionEvent e) {
 			Button b = (Button)e.widget;
 			if (b.getSelection()) {
-				addDragTransfer(FileTransfer.getInstance());			
+				addDragTransfer(FileTransfer.getInstance());
 			} else {
 				removeDragTransfer(FileTransfer.getInstance());
 			}
@@ -554,7 +552,7 @@ private void createDragTypes(Composite parent) {
 	data.horizontalAlignment = GridData.FILL;
 	data.verticalAlignment = GridData.BEGINNING;
 	fileList.setLayoutData(data);
-	
+
 	// initialize state
 	textButton.setSelection(true);
 	addDragTransfer(TextTransfer.getInstance());
@@ -567,14 +565,14 @@ private void createDragWidget(Composite parent) {
 	combo.select(LABEL);
 	dragControlType = combo.getSelectionIndex();
 	dragControl = createWidget(dragControlType, parent, "Drag Source");
-	
+
 	combo.addSelectionListener(new SelectionAdapter() {
 		@Override
 		public void widgetSelected(SelectionEvent e) {
 			Object data = dragControl.getLayoutData();
 			Composite parent = dragControl.getParent();
 			dragControl.dispose();
-			Combo c = (Combo)e.widget; 
+			Combo c = (Combo)e.widget;
 			dragControlType = c.getSelectionIndex();
 			dragControl = createWidget(dragControlType, parent, "Drag Source");
 			dragControl.setLayoutData(data);
@@ -582,7 +580,7 @@ private void createDragWidget(Composite parent) {
 			parent.layout();
 		}
 	});
-	
+
 	Button b = new Button(parent, SWT.CHECK);
 	b.setText("DragSource");
 	b.addSelectionListener(new SelectionAdapter() {
@@ -602,19 +600,19 @@ private void createDragWidget(Composite parent) {
 	});
 	b.setSelection(true);
 	dragEnabled = true;
-	
+
 	FormData data = new FormData();
 	data.top = new FormAttachment(0, 10);
 	data.bottom = new FormAttachment(combo, -10);
 	data.left = new FormAttachment(0, 10);
 	data.right = new FormAttachment(100, -10);
 	dragControl.setLayoutData(data);
-	
+
 	data = new FormData();
 	data.bottom = new FormAttachment(100, -10);
 	data.left = new FormAttachment(0, 10);
 	combo.setLayoutData(data);
-	
+
 	data = new FormData();
 	data.bottom = new FormAttachment(100, -10);
 	data.left = new FormAttachment(combo, 10);
@@ -630,7 +628,7 @@ private void createDropOperations(Composite parent) {
 		public void widgetSelected(SelectionEvent e) {
 			Button b = (Button)e.widget;
 			if (b.getSelection()) {
-				dropOperation |= DND.DROP_MOVE;			
+				dropOperation |= DND.DROP_MOVE;
 			} else {
 				dropOperation = dropOperation & ~DND.DROP_MOVE;
 				if (dropOperation == 0 || (dropDefaultOperation & DND.DROP_MOVE) != 0) {
@@ -643,7 +641,7 @@ private void createDropOperations(Composite parent) {
 			}
 		}
 	});
-	
+
 
 	final Button copyButton = new Button(parent, SWT.CHECK);
 	copyButton.setText("DND.DROP_COPY");
@@ -652,7 +650,7 @@ private void createDropOperations(Composite parent) {
 		public void widgetSelected(SelectionEvent e) {
 			Button b = (Button)e.widget;
 			if (b.getSelection()) {
-				dropOperation |= DND.DROP_COPY;			
+				dropOperation |= DND.DROP_COPY;
 			} else {
 				dropOperation = dropOperation & ~DND.DROP_COPY;
 				if (dropOperation == 0 || (dropDefaultOperation & DND.DROP_COPY) != 0) {
@@ -673,7 +671,7 @@ private void createDropOperations(Composite parent) {
 		public void widgetSelected(SelectionEvent e) {
 			Button b = (Button)e.widget;
 			if (b.getSelection()) {
-				dropOperation |= DND.DROP_LINK;			
+				dropOperation |= DND.DROP_LINK;
 			} else {
 				dropOperation = dropOperation & ~DND.DROP_LINK;
 				if (dropOperation == 0 || (dropDefaultOperation & DND.DROP_LINK) != 0) {
@@ -686,7 +684,7 @@ private void createDropOperations(Composite parent) {
 			}
 		}
 	});
-	
+
 	Button b = new Button(parent, SWT.CHECK);
 	b.setText("DND.DROP_DEFAULT");
 	defaultParent = new Composite(parent, SWT.NONE);
@@ -696,7 +694,7 @@ private void createDropOperations(Composite parent) {
 			Button b = (Button)e.widget;
 			if (b.getSelection()) {
 				dropOperation |= DND.DROP_DEFAULT;
-				defaultParent.setVisible(true);			
+				defaultParent.setVisible(true);
 			} else {
 				dropOperation = dropOperation & ~DND.DROP_DEFAULT;
 				defaultParent.setVisible(false);
@@ -706,7 +704,7 @@ private void createDropOperations(Composite parent) {
 			}
 		}
 	});
-	
+
 	defaultParent.setVisible(false);
 	GridLayout layout = new GridLayout();
 	layout.marginWidth = 20;
@@ -729,7 +727,7 @@ private void createDropOperations(Composite parent) {
 			}
 		}
 	});
-	
+
 	b = new Button(defaultParent, SWT.RADIO);
 	b.setText("DND.DROP_COPY");
 	b.addSelectionListener(new SelectionAdapter() {
@@ -763,7 +761,7 @@ private void createDropOperations(Composite parent) {
 			}
 		}
 	});
-	
+
 	b = new Button(defaultParent, SWT.RADIO);
 	b.setText("DND.DROP_NONE");
 	b.setSelection(true);
@@ -780,7 +778,7 @@ private void createDropOperations(Composite parent) {
 			}
 		}
 	});
-	
+
 	// initialize state
 	moveButton.setSelection(true);
 	copyButton.setSelection(true);
@@ -840,11 +838,11 @@ private void createDropTarget() {
 				dropConsole.append("!!Invalid data dropped");
 				return;
 			}
-			
-			if (strings.length == 1 && (dropControlType == TABLE || 
-			                            dropControlType == TREE || 
+
+			if (strings.length == 1 && (dropControlType == TABLE ||
+			                            dropControlType == TREE ||
 			                            dropControlType == LIST)) {
-				// convert string separated by "\n" into an array of strings 
+				// convert string separated by "\n" into an array of strings
 				String string = strings[0];
 				int count = 0;
 				int offset = string.indexOf("\n", 0);
@@ -956,13 +954,13 @@ private void createFeedbackTypes(Group parent) {
 		public void widgetSelected(SelectionEvent e) {
 			Button b = (Button)e.widget;
 			if (b.getSelection()) {
-				dropFeedback |= DND.FEEDBACK_SELECT;			
+				dropFeedback |= DND.FEEDBACK_SELECT;
 			} else {
 				dropFeedback &= ~DND.FEEDBACK_SELECT;
 			}
 		}
 	});
-	
+
 	b = new Button(parent, SWT.CHECK);
 	b.setText("FEEDBACK_SCROLL");
 	b.addSelectionListener(new SelectionAdapter() {
@@ -970,14 +968,14 @@ private void createFeedbackTypes(Group parent) {
 		public void widgetSelected(SelectionEvent e) {
 			Button b = (Button)e.widget;
 			if (b.getSelection()) {
-				dropFeedback |= DND.FEEDBACK_SCROLL;			
+				dropFeedback |= DND.FEEDBACK_SCROLL;
 			} else {
 				dropFeedback &= ~DND.FEEDBACK_SCROLL;
 			}
 		}
 	});
-	
-	
+
+
 	b = new Button(parent, SWT.CHECK);
 	b.setText("FEEDBACK_INSERT_BEFORE");
 	b.addSelectionListener(new SelectionAdapter() {
@@ -985,13 +983,13 @@ private void createFeedbackTypes(Group parent) {
 		public void widgetSelected(SelectionEvent e) {
 			Button b = (Button)e.widget;
 			if (b.getSelection()) {
-				dropFeedback |= DND.FEEDBACK_INSERT_BEFORE;			
+				dropFeedback |= DND.FEEDBACK_INSERT_BEFORE;
 			} else {
 				dropFeedback &= ~DND.FEEDBACK_INSERT_BEFORE;
 			}
 		}
 	});
-	
+
 	b = new Button(parent, SWT.CHECK);
 	b.setText("FEEDBACK_INSERT_AFTER");
 	b.addSelectionListener(new SelectionAdapter() {
@@ -1005,7 +1003,7 @@ private void createFeedbackTypes(Group parent) {
 			}
 		}
 	});
-	
+
 	b = new Button(parent, SWT.CHECK);
 	b.setText("FEEDBACK_EXPAND");
 	b.addSelectionListener(new SelectionAdapter() {
@@ -1013,7 +1011,7 @@ private void createFeedbackTypes(Group parent) {
 		public void widgetSelected(SelectionEvent e) {
 			Button b = (Button)e.widget;
 			if (b.getSelection()) {
-				dropFeedback |= DND.FEEDBACK_EXPAND;			
+				dropFeedback |= DND.FEEDBACK_EXPAND;
 			} else {
 				dropFeedback &= ~DND.FEEDBACK_EXPAND;
 			}
@@ -1030,13 +1028,13 @@ private void createDropTypes(Composite parent) {
 		public void widgetSelected(SelectionEvent e) {
 			Button b = (Button)e.widget;
 			if (b.getSelection()) {
-				addDropTransfer(TextTransfer.getInstance());			
+				addDropTransfer(TextTransfer.getInstance());
 			} else {
 				removeDropTransfer(TextTransfer.getInstance());
 			}
 		}
 	});
-	
+
 	Button b = new Button(parent, SWT.CHECK);
 	b.setText("RTF Transfer");
 	b.addSelectionListener(new SelectionAdapter() {
@@ -1044,14 +1042,14 @@ private void createDropTypes(Composite parent) {
 		public void widgetSelected(SelectionEvent e) {
 			Button b = (Button)e.widget;
 			if (b.getSelection()) {
-				addDropTransfer(RTFTransfer.getInstance());			
+				addDropTransfer(RTFTransfer.getInstance());
 			} else {
 				removeDropTransfer(RTFTransfer.getInstance());
 			}
 		}
 	});
-	
-	
+
+
 	b = new Button(parent, SWT.CHECK);
 	b.setText("HTML Transfer");
 	b.addSelectionListener(new SelectionAdapter() {
@@ -1059,13 +1057,13 @@ private void createDropTypes(Composite parent) {
 		public void widgetSelected(SelectionEvent e) {
 			Button b = (Button)e.widget;
 			if (b.getSelection()) {
-				addDropTransfer(HTMLTransfer.getInstance());			
+				addDropTransfer(HTMLTransfer.getInstance());
 			} else {
 				removeDropTransfer(HTMLTransfer.getInstance());
 			}
 		}
 	});
-	
+
 	b = new Button(parent, SWT.CHECK);
 	b.setText("URL Transfer");
 	b.addSelectionListener(new SelectionAdapter() {
@@ -1073,13 +1071,13 @@ private void createDropTypes(Composite parent) {
 		public void widgetSelected(SelectionEvent e) {
 			Button b = (Button)e.widget;
 			if (b.getSelection()) {
-				addDropTransfer(URLTransfer.getInstance());			
+				addDropTransfer(URLTransfer.getInstance());
 			} else {
 				removeDropTransfer(URLTransfer.getInstance());
 			}
 		}
 	});
-	
+
 	b = new Button(parent, SWT.CHECK);
 	b.setText("File Transfer");
 	b.addSelectionListener(new SelectionAdapter() {
@@ -1087,13 +1085,13 @@ private void createDropTypes(Composite parent) {
 		public void widgetSelected(SelectionEvent e) {
 			Button b = (Button)e.widget;
 			if (b.getSelection()) {
-				addDropTransfer(FileTransfer.getInstance());			
+				addDropTransfer(FileTransfer.getInstance());
 			} else {
 				removeDropTransfer(FileTransfer.getInstance());
 			}
 		}
 	});
-	
+
 	// initialize state
 	textButton.setSelection(true);
 	addDropTransfer(TextTransfer.getInstance());
@@ -1113,14 +1111,14 @@ private void createDropWidget(Composite parent) {
 			Composite parent = dropControl.getParent();
 			dropControl.dispose();
 			Combo c = (Combo)e.widget;
-			dropControlType = c.getSelectionIndex(); 
+			dropControlType = c.getSelectionIndex();
 			dropControl = createWidget(dropControlType, parent, "Drop Target");
 			dropControl.setLayoutData(data);
 			if (dropEnabled) createDropTarget();
 			parent.layout();
 		}
 	});
-	
+
 	Button b = new Button(parent, SWT.CHECK);
 	b.setText("DropTarget");
 	b.addSelectionListener(new SelectionAdapter() {
@@ -1141,19 +1139,19 @@ private void createDropWidget(Composite parent) {
 	// initialize state
 	b.setSelection(true);
 	dropEnabled = true;
-	
+
 	FormData data = new FormData();
 	data.top = new FormAttachment(0, 10);
 	data.bottom = new FormAttachment(combo, -10);
 	data.left = new FormAttachment(0, 10);
 	data.right = new FormAttachment(100, -10);
 	dropControl.setLayoutData(data);
-	
+
 	data = new FormData();
 	data.bottom = new FormAttachment(100, -10);
 	data.left = new FormAttachment(0, 10);
 	combo.setLayoutData(data);
-	
+
 	data = new FormData();
 	data.bottom = new FormAttachment(100, -10);
 	data.left = new FormAttachment(combo, 10);
@@ -1246,23 +1244,20 @@ private Control createWidget(int type, Composite parent, String prefix){
 		case CANVAS: {
 			Canvas canvas = new Canvas(parent, SWT.BORDER);
 			canvas.setData("STRINGS", new String[] {prefix+" Canvas widget"});
-			canvas.addPaintListener(new PaintListener() {
-				@Override
-				public void paintControl(PaintEvent e) {
-					Canvas c = (Canvas)e.widget;
-					Image image = (Image)c.getData("IMAGE");
-					if (image != null) {
-						e.gc.drawImage(image, 5, 5);
-					} else {
-						String[] strings = (String[])c.getData("STRINGS");
-						if (strings != null) {
-							FontMetrics metrics = e.gc.getFontMetrics();
-							int height = metrics.getHeight();
-							int y = 5;
-							for(int i = 0; i < strings.length; i++) {
-								e.gc.drawString(strings[i], 5, y);
-								y += height + 5;
-							}
+			canvas.addPaintListener(e -> {
+				Canvas c = (Canvas)e.widget;
+				Image image = (Image)c.getData("IMAGE");
+				if (image != null) {
+					e.gc.drawImage(image, 5, 5);
+				} else {
+					String[] strings = (String[])c.getData("STRINGS");
+					if (strings != null) {
+						FontMetrics metrics = e.gc.getFontMetrics();
+						int height = metrics.getHeight();
+						int y = 5;
+						for(int i = 0; i < strings.length; i++) {
+							e.gc.drawString(strings[i], 5, y);
+							y += height + 5;
 						}
 					}
 				}
@@ -1293,34 +1288,34 @@ public void open(Display display) {
 	Shell shell = new Shell(display);
 	shell.setText("Drag and Drop Example");
 	shell.setLayout(new FillLayout());
-	
+
 	itemImage = new Image (display, DNDExample.class.getResourceAsStream("openFolder.gif"));
 
 	ScrolledComposite sc = new ScrolledComposite(shell, SWT.H_SCROLL | SWT.V_SCROLL);
 	Composite parent = new Composite(sc, SWT.NONE);
 	sc.setContent(parent);
 	parent.setLayout(new FormLayout());
-	
+
 	Label dragLabel = new Label(parent, SWT.LEFT);
 	dragLabel.setText("Drag Source:");
-	
+
 	Group dragWidgetGroup = new Group(parent, SWT.NONE);
 	dragWidgetGroup.setText("Widget");
 	createDragWidget(dragWidgetGroup);
-	
+
 	Composite cLeft = new Composite(parent, SWT.NONE);
 	cLeft.setLayout(new GridLayout(2, false));
-	
+
 	Group dragOperationsGroup = new Group(cLeft, SWT.NONE);
 	dragOperationsGroup.setLayoutData(new GridData(SWT.LEFT, SWT.FILL, false, false, 1, 1));
 	dragOperationsGroup.setText("Allowed Operation(s):");
 	createDragOperations(dragOperationsGroup);
-	
+
 	Group dragTypesGroup = new Group(cLeft, SWT.NONE);
 	dragTypesGroup.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false, 1, 1));
 	dragTypesGroup.setText("Transfer Type(s):");
 	createDragTypes(dragTypesGroup);
-	
+
 	dragConsole = new Text(cLeft, SWT.READ_ONLY | SWT.BORDER |SWT.V_SCROLL | SWT.H_SCROLL | SWT.MULTI);
 	dragConsole.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 2, 1));
 	Menu menu = new Menu (shell, SWT.POP_UP);
@@ -1342,30 +1337,30 @@ public void open(Display display) {
 		}
 	});
 	dragConsole.setMenu(menu);
-	
+
 	Label dropLabel = new Label(parent, SWT.LEFT);
 	dropLabel.setText("Drop Target:");
-	
+
 	Group dropWidgetGroup = new Group(parent, SWT.NONE);
 	dropWidgetGroup.setText("Widget");
 	createDropWidget(dropWidgetGroup);
-	
+
 	Composite cRight = new Composite(parent, SWT.NONE);
 	cRight.setLayout(new GridLayout(2, false));
-	
+
 	Group dropOperationsGroup = new Group(cRight, SWT.NONE);
 	dropOperationsGroup.setLayoutData(new GridData(SWT.LEFT, SWT.FILL, false, false, 1, 2));
 	dropOperationsGroup.setText("Allowed Operation(s):");
 	createDropOperations(dropOperationsGroup);
-	
+
 	Group dropTypesGroup = new Group(cRight, SWT.NONE);
 	dropTypesGroup.setText("Transfer Type(s):");
 	createDropTypes(dropTypesGroup);
-	
+
 	Group feedbackTypesGroup = new Group(cRight, SWT.NONE);
 	feedbackTypesGroup.setText("Feedback Type(s):");
 	createFeedbackTypes(feedbackTypesGroup);
-	
+
 	dropConsole = new Text(cRight, SWT.READ_ONLY | SWT.BORDER |SWT.V_SCROLL | SWT.H_SCROLL | SWT.MULTI);
 	dropConsole.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 2, 1));
 	menu = new Menu (shell, SWT.POP_UP);
@@ -1387,23 +1382,23 @@ public void open(Display display) {
 		}
 	});
 	dropConsole.setMenu(menu);
-	
+
 	if (dragEnabled) createDragSource();
 	if (dropEnabled) createDropTarget();
-	
+
 	int height = 200;
 	FormData data = new FormData();
 	data.top = new FormAttachment(0, 10);
 	data.left = new FormAttachment(0, 10);
 	dragLabel.setLayoutData(data);
-	
+
 	data = new FormData();
 	data.top = new FormAttachment(dragLabel, 10);
 	data.left = new FormAttachment(0, 10);
 	data.right = new FormAttachment(50, -10);
 	data.height = height;
 	dragWidgetGroup.setLayoutData(data);
-	
+
 	data = new FormData();
 	data.top = new FormAttachment(dragWidgetGroup, 10);
 	data.left = new FormAttachment(0, 10);
@@ -1415,30 +1410,30 @@ public void open(Display display) {
 	data.top = new FormAttachment(0, 10);
 	data.left = new FormAttachment(cLeft, 10);
 	dropLabel.setLayoutData(data);
-	
+
 	data = new FormData();
 	data.top = new FormAttachment(dropLabel, 10);
 	data.left = new FormAttachment(cLeft, 10);
 	data.right = new FormAttachment(100, -10);
 	data.height = height;
 	dropWidgetGroup.setLayoutData(data);
-	
+
 	data = new FormData();
 	data.top = new FormAttachment(dropWidgetGroup, 10);
 	data.left = new FormAttachment(cLeft, 10);
 	data.right = new FormAttachment(100, -10);
 	data.bottom = new FormAttachment(100, -10);
 	cRight.setLayoutData(data);
-		
+
 	sc.setMinSize(parent.computeSize(SWT.DEFAULT, SWT.DEFAULT));
 	sc.setExpandHorizontal(true);
 	sc.setExpandVertical(true);
-	
+
 	Point size = shell.computeSize(SWT.DEFAULT, SWT.DEFAULT);
 	Rectangle monitorArea = shell.getMonitor().getClientArea();
 	shell.setSize(Math.min(size.x, monitorArea.width - 20), Math.min(size.y, monitorArea.height - 20));
 	shell.open();
-		
+
 	while (!shell.isDisposed()) {
 		if (!display.readAndDispatch())
 			display.sleep();
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/CountDownTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/CountDownTab.java
index c2bdd3b..9a0c01c 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/CountDownTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/CountDownTab.java
@@ -21,9 +21,7 @@ import org.eclipse.swt.graphics.Transform;
 import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.Combo;
 import org.eclipse.swt.widgets.Composite;
-import org.eclipse.swt.widgets.Event;
 import org.eclipse.swt.widgets.Label;
-import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.Spinner;
 
 /**
@@ -43,7 +41,7 @@ public class CountDownTab extends AnimatedGraphicsTab {
 
 	/**
 	 * Constructor
-	 * 
+	 *
 	 * @param example
 	 *            A GraphicsExample
 	 */
@@ -55,7 +53,7 @@ public class CountDownTab extends AnimatedGraphicsTab {
 	 * This method creates the controls specific to the tab. The call to the
 	 * createControlPanel method in the super class create the controls that are
 	 * defined in the super class.
-	 * 
+	 *
 	 * @param parent
 	 *            The parent composite
 	 */
@@ -120,13 +118,10 @@ public class CountDownTab extends AnimatedGraphicsTab {
 		lineCapCombo.add("ROUND");
 		lineCapCombo.select(0);
 		lineCap = capValues[0];
-		lineCapCombo.addListener(SWT.Selection, new Listener() {
-			@Override
-			public void handleEvent(Event event) {
-				lineCap = capValues[lineCapCombo.getSelectionIndex()];
-				if (!pauseItem.isEnabled()) {
-					example.redraw();
-				}
+		lineCapCombo.addListener(SWT.Selection, event -> {
+			lineCap = capValues[lineCapCombo.getSelectionIndex()];
+			if (!pauseItem.isEnabled()) {
+				example.redraw();
 			}
 		});
 	}
@@ -140,7 +135,7 @@ public class CountDownTab extends AnimatedGraphicsTab {
 	public String getText() {
 		return GraphicsExample.getResourceString("Countdown"); //$NON-NLS-1$
 	}
-	
+
 	@Override
 	public String getDescription() {
 		return GraphicsExample.getResourceString("CountdownDescription"); //$NON-NLS-1$
@@ -148,7 +143,7 @@ public class CountDownTab extends AnimatedGraphicsTab {
 
 	/*
 	 * (non-Javadoc)
-	 * 
+	 *
 	 * @see org.eclipse.swt.examples.graphics.AnimatedGraphicsTab#getAnimationTime()
 	 */
 	@Override
@@ -158,7 +153,7 @@ public class CountDownTab extends AnimatedGraphicsTab {
 
 	/*
 	 * (non-Javadoc)
-	 * 
+	 *
 	 * @see org.eclipse.swt.examples.graphics.AnimatedGraphicsTab#next(int, int)
 	 */
 	@Override
@@ -177,7 +172,7 @@ public class CountDownTab extends AnimatedGraphicsTab {
 
 	/*
 	 * (non-Javadoc)
-	 * 
+	 *
 	 * @see org.eclipse.swt.examples.graphics.GraphicsTab#paint(org.eclipse.swt.graphics.GC,
 	 *      int, int)
 	 */
@@ -254,7 +249,7 @@ public class CountDownTab extends AnimatedGraphicsTab {
 
 	/**
 	 * Returns the name of a valid font for the resident platform.
-	 * 
+	 *
 	 * @param index
 	 *            index is used to determine the appropriate font face
 	 */
@@ -263,7 +258,7 @@ public class CountDownTab extends AnimatedGraphicsTab {
 			return new String[] { "Courier", "Impact" }[index];
 		} else if (SWT.getPlatform() == "gtk") {
 			return new String[] { "Courier", "Baekmuk Headline" }[index];
-		} else { 
+		} else {
 			return new String[] { "Courier", "Verdana" }[index];
 		}
 	}
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/CurvesSWTTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/CurvesSWTTab.java
index d60694d..f0cae09 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/CurvesSWTTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/CurvesSWTTab.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2006 IBM Corporation and others.
+ * Copyright (c) 2006, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -27,38 +27,38 @@ import org.eclipse.swt.widgets.Composite;
 /**
  * This tab presents cubic and quadratic curves that can be drawn. As a
  * demonstration, cubic and quadratic curves are used to spell out "SWT".
- * The user may reposition the cubic and quadratic handles. 
+ * The user may reposition the cubic and quadratic handles.
  */
 public class CurvesSWTTab extends GraphicsTab {
 	/** These rectangles represent the handles on the curves. */
-	private Rectangle sRect1, sRect2, wRect1, wRect2, tTopRect1, tTopRect2, 
+	private Rectangle sRect1, sRect2, wRect1, wRect2, tTopRect1, tTopRect2,
 			tBottomRect1, tBottomRect2;
-	
+
 	/** These values represent the positions of the curves. */
-	private float sXPos, sYPos, wXPos, wYPos, topTXPos, topTYPos, 
+	private float sXPos, sYPos, wXPos, wYPos, topTXPos, topTYPos,
 			botTXPos, botTYPos;
-	
+
 	/** These values represent the x and y displacement of each handle. */
 	private float sDiffX1, sDiffY1, sDiffX2, sDiffY2;
 	private float wDiffX1, wDiffY1, wDiffX2, wDiffY2;
 	private float tTopDiffX1, tTopDiffY1, tTopDiffX2, tTopDiffY2;
 	private float tBotDiffX1, tBotDiffY1, tBotDiffX2, tBotDiffY2;
-	
+
 	/** These are flags that indicate whether or not a handle has been moved. */
 	private boolean sLeftPtMoved, sRightPtMoved, wPt1Moved, wPt2Moved,
 			tTopPt1Moved, tTopPt2Moved, tBotPt1Moved, tBotPt2Moved;
-	
+
 	private MouseMoveListener mouseMoveListener;
 	private MouseListener mouseListener;
 	private Cursor cursor;
-	
+
 	/** true if hovering over a handle, false otherwise */
 	private boolean hovering = false;
-	
+
 	/** true if left mouse button is held down, false otherwise */
 	private boolean mouseDown = false;
 
-	
+
 public CurvesSWTTab(GraphicsExample example) {
 	super(example);
 	sRect1 = new Rectangle(-75, 50, 5, 5);
@@ -100,17 +100,17 @@ public boolean getDoubleBuffered() {
 public void dispose() {
 	if (mouseListener != null)
 		example.canvas.removeMouseListener(mouseListener);
-	
+
 	if (mouseMoveListener != null)
 		example.canvas.removeMouseMoveListener(mouseMoveListener);
-	
+
 	cursor = null;
 }
 
 	/**
 	 * This helper method determines whether or not the cursor is positioned
 	 * over a handle.
-	 * 
+	 *
 	 * @param e
 	 *            A MouseEvent
 	 * @return true if cursor is positioned over a handle; false otherwise
@@ -124,80 +124,76 @@ private boolean isHovering(MouseEvent e) {
 	Rectangle tTop2 = new Rectangle(tTopRect2.x + (int)topTXPos - 1, tTopRect2.y + (int)topTYPos - 1, tTopRect2.width+2, tTopRect2.height+2);
 	Rectangle tBot1 = new Rectangle(tBottomRect1.x + (int)botTXPos - 1, tBottomRect1.y + (int)botTYPos - 1, tBottomRect1.width+2, tBottomRect1.height+2);
 	Rectangle tBot2 = new Rectangle(tBottomRect2.x + (int)botTXPos - 1, tBottomRect2.y + (int)botTYPos - 1, tBottomRect2.width+2, tBottomRect2.height+2);
-	
-	return ( r1.contains(e.x, e.y) || r2.contains(e.x, e.y) 
-		 || w1.contains(e.x, e.y) || w2.contains(e.x, e.y) 
-		 || tTop1.contains(e.x, e.y) || tTop2.contains(e.x, e.y) 
+
+	return ( r1.contains(e.x, e.y) || r2.contains(e.x, e.y)
+		 || w1.contains(e.x, e.y) || w2.contains(e.x, e.y)
+		 || tTop1.contains(e.x, e.y) || tTop2.contains(e.x, e.y)
 		 || tBot1.contains(e.x, e.y) || tBot2.contains(e.x, e.y) );
 }
-/** 
+/**
  * Creates the widgets used to control the drawing.
  */
 @Override
 public void createControlPanel(Composite parent) {
-	if (cursor == null) { 
+	if (cursor == null) {
 		cursor = parent.getDisplay().getSystemCursor(SWT.CURSOR_HAND);
 	}
 
-	mouseMoveListener = new MouseMoveListener() {
-		
-		@Override
-		public void mouseMove(MouseEvent e) {
-			if (hovering && mouseDown) {
-				example.canvas.setCursor(cursor);
-			} else if (isHovering(e)) {
-				example.canvas.setCursor(cursor);
-				hovering = true;
-			} else {
-				example.canvas.setCursor(null);
-				hovering = false;
-			}
+	mouseMoveListener = e -> {
+		if (hovering && mouseDown) {
+			example.canvas.setCursor(cursor);
+		} else if (isHovering(e)) {
+			example.canvas.setCursor(cursor);
+			hovering = true;
+		} else {
+			example.canvas.setCursor(null);
+			hovering = false;
+		}
 
-			if (sLeftPtMoved) {
-				sDiffX1 = sDiffX1 + e.x - (int)sXPos - sRect1.x;
-				sDiffY1 = sDiffY1 + e.y - (int)sYPos - sRect1.y;
-				sRect1.x = e.x - (int)sXPos;
-				sRect1.y = e.y - (int)sYPos;
-			} else if (sRightPtMoved) {
-				sDiffX2 = sDiffX2 + e.x - (int)sXPos - sRect2.x;
-				sDiffY2 = sDiffY2 + e.y - (int)sYPos - sRect2.y;
-				sRect2.x = e.x - (int)sXPos;
-				sRect2.y = e.y - (int)sYPos;
-			} else if (wPt1Moved) {
-				wDiffX1 = wDiffX1 + e.x - (int)wXPos - wRect1.x;
-				wDiffY1 = wDiffY1 + e.y - (int)wYPos - wRect1.y;
-				wRect1.x = e.x - (int)wXPos;
-				wRect1.y = e.y - (int)wYPos;				
-			} else if (wPt2Moved) {
-				wDiffX2 = wDiffX2 + e.x - (int)wXPos - wRect2.x;
-				wDiffY2 = wDiffY2 + e.y - (int)wYPos - wRect2.y;
-				wRect2.x = e.x - (int)wXPos;
-				wRect2.y = e.y - (int)wYPos;	
-			} else if (tTopPt1Moved) {
-				tTopDiffX1 = tTopDiffX1 + e.x - (int)topTXPos - tTopRect1.x;
-				tTopDiffY1 = tTopDiffY1 + e.y - (int)topTYPos - tTopRect1.y;
-				tTopRect1.x = e.x - (int)topTXPos;
-				tTopRect1.y = e.y - (int)topTYPos;	
-			} else if (tTopPt2Moved) {
-				tTopDiffX2 = tTopDiffX2 + e.x - (int)topTXPos - tTopRect2.x;
-				tTopDiffY2 = tTopDiffY2 + e.y - (int)topTYPos - tTopRect2.y;
-				tTopRect2.x = e.x - (int)topTXPos;
-				tTopRect2.y = e.y - (int)topTYPos;
-			} else if (tBotPt1Moved) {
-				tBotDiffX1 = tBotDiffX1 + e.x - (int)botTXPos - tBottomRect1.x;
-				tBotDiffY1 = tBotDiffY1 + e.y - (int)botTYPos - tBottomRect1.y;
-				tBottomRect1.x = e.x - (int)botTXPos;
-				tBottomRect1.y = e.y - (int)botTYPos;	
-			} else if (tBotPt2Moved) {
-				tBotDiffX2 = tBotDiffX2 + e.x - (int)botTXPos - tBottomRect2.x;
-				tBotDiffY2 = tBotDiffY2 + e.y - (int)botTYPos - tBottomRect2.y;
-				tBottomRect2.x = e.x - (int)botTXPos;
-				tBottomRect2.y = e.y - (int)botTYPos;
-			}
-			example.redraw();			
+		if (sLeftPtMoved) {
+			sDiffX1 = sDiffX1 + e.x - (int)sXPos - sRect1.x;
+			sDiffY1 = sDiffY1 + e.y - (int)sYPos - sRect1.y;
+			sRect1.x = e.x - (int)sXPos;
+			sRect1.y = e.y - (int)sYPos;
+		} else if (sRightPtMoved) {
+			sDiffX2 = sDiffX2 + e.x - (int)sXPos - sRect2.x;
+			sDiffY2 = sDiffY2 + e.y - (int)sYPos - sRect2.y;
+			sRect2.x = e.x - (int)sXPos;
+			sRect2.y = e.y - (int)sYPos;
+		} else if (wPt1Moved) {
+			wDiffX1 = wDiffX1 + e.x - (int)wXPos - wRect1.x;
+			wDiffY1 = wDiffY1 + e.y - (int)wYPos - wRect1.y;
+			wRect1.x = e.x - (int)wXPos;
+			wRect1.y = e.y - (int)wYPos;
+		} else if (wPt2Moved) {
+			wDiffX2 = wDiffX2 + e.x - (int)wXPos - wRect2.x;
+			wDiffY2 = wDiffY2 + e.y - (int)wYPos - wRect2.y;
+			wRect2.x = e.x - (int)wXPos;
+			wRect2.y = e.y - (int)wYPos;
+		} else if (tTopPt1Moved) {
+			tTopDiffX1 = tTopDiffX1 + e.x - (int)topTXPos - tTopRect1.x;
+			tTopDiffY1 = tTopDiffY1 + e.y - (int)topTYPos - tTopRect1.y;
+			tTopRect1.x = e.x - (int)topTXPos;
+			tTopRect1.y = e.y - (int)topTYPos;
+		} else if (tTopPt2Moved) {
+			tTopDiffX2 = tTopDiffX2 + e.x - (int)topTXPos - tTopRect2.x;
+			tTopDiffY2 = tTopDiffY2 + e.y - (int)topTYPos - tTopRect2.y;
+			tTopRect2.x = e.x - (int)topTXPos;
+			tTopRect2.y = e.y - (int)topTYPos;
+		} else if (tBotPt1Moved) {
+			tBotDiffX1 = tBotDiffX1 + e.x - (int)botTXPos - tBottomRect1.x;
+			tBotDiffY1 = tBotDiffY1 + e.y - (int)botTYPos - tBottomRect1.y;
+			tBottomRect1.x = e.x - (int)botTXPos;
+			tBottomRect1.y = e.y - (int)botTYPos;
+		} else if (tBotPt2Moved) {
+			tBotDiffX2 = tBotDiffX2 + e.x - (int)botTXPos - tBottomRect2.x;
+			tBotDiffY2 = tBotDiffY2 + e.y - (int)botTYPos - tBottomRect2.y;
+			tBottomRect2.x = e.x - (int)botTXPos;
+			tBottomRect2.y = e.y - (int)botTYPos;
 		}
+		example.redraw();
 	};
-	
+
 	mouseListener = new MouseListener() {
 
 		@Override
@@ -209,7 +205,7 @@ public void createControlPanel(Composite parent) {
 		 * @param e an event containing information about the mouse button press
 		 */
 		@Override
-		public void mouseDown(MouseEvent e) {  
+		public void mouseDown(MouseEvent e) {
 			Rectangle r1 = new Rectangle(sRect1.x + (int)sXPos - 1, sRect1.y + (int)sYPos - 1, sRect1.width+2, sRect1.height+2);
 			Rectangle r2 = new Rectangle(sRect2.x + (int)sXPos - 1, sRect2.y + (int)sYPos - 1, sRect2.width+2, sRect2.height+2);
 			Rectangle w1 = new Rectangle(wRect1.x + (int)wXPos - 1, wRect1.y + (int)wYPos - 1, wRect1.width+2, wRect1.height+2);
@@ -268,14 +264,14 @@ public void createControlPanel(Composite parent) {
 			if (wPt2Moved)
 				wPt2Moved = false;
 			if (tTopPt1Moved)
-				tTopPt1Moved = false;	
+				tTopPt1Moved = false;
 			if (tTopPt2Moved)
-				tTopPt2Moved = false;	
+				tTopPt2Moved = false;
 			if (tBotPt1Moved)
-				tBotPt1Moved = false;	
+				tBotPt1Moved = false;
 			if (tBotPt2Moved)
 				tBotPt2Moved = false;
-			
+
 			example.redraw();
 		}
 	};
@@ -287,17 +283,17 @@ public void createControlPanel(Composite parent) {
 public void paint(GC gc, int width, int height) {
 	if (!example.checkAdvancedGraphics()) return;
 	Device device = gc.getDevice();
-	
+
 	Font font = new Font(device, getPlatformFont(), 16, SWT.ITALIC);
 	gc.setFont(font);
 	gc.setLineWidth(2);
-	
+
 	Transform transform;
-	
-	// ----- letter s -----	
+
+	// ----- letter s -----
 	sXPos = 4*width/16;
 	sYPos = (height-150)/2;
-	
+
 	transform = new Transform(device);
 	transform.translate(sXPos, sYPos);
 	gc.setTransform(transform);
@@ -305,53 +301,53 @@ public void paint(GC gc, int width, int height) {
 
 	gc.setForeground(device.getSystemColor(SWT.COLOR_DARK_BLUE));
 	gc.drawString(GraphicsExample.getResourceString("Cubic"), 0, 175, true);
-	
+
 	Path path = new Path(device);
 	path.cubicTo(-200 + sDiffX1, 50 + sDiffY1, 200 + sDiffX2, 100 + sDiffY2, 0, 150);
 	gc.drawPath(path);
 	path.dispose();
-	
+
 	// draw the spline points
 	gc.setTransform(null);
 	gc.drawRectangle(sRect1.x + (int)sXPos, sRect1.y + (int)sYPos, sRect1.width, sRect1.height);
 	gc.drawRectangle(sRect2.x + (int)sXPos, sRect2.y + (int)sYPos, sRect2.width, sRect2.height);
-	
+
 	// ----- letter w -----
 	wXPos = 6*width/16;
 	wYPos = (height-150)/2;
-	
+
 	transform = new Transform(device);
 	transform.translate(wXPos, wYPos);
 	gc.setTransform(transform);
 	transform.dispose();
-	
+
 	gc.setForeground(device.getSystemColor(SWT.COLOR_GRAY));
 	gc.drawString(GraphicsExample.getResourceString("Quadratic"), 0, -50, true);
 	gc.drawString(GraphicsExample.getResourceString("Quadratic"), 110, -50, true);
-	
+
 	path = new Path(device);
 	path.quadTo(100 + wDiffX1, 300 + wDiffY1, 100, 0);
 	path.quadTo(100+wDiffX2, 300+wDiffY2, 200, 0);
 	gc.drawPath(path);
 	path.dispose();
-	
-	gc.setTransform(null);	
+
+	gc.setTransform(null);
 	gc.drawRectangle(wRect1.x + (int)wXPos, wRect1.y + (int)wYPos, wRect1.width, wRect1.height);
 	gc.drawRectangle(wRect2.x + (int)wXPos, wRect2.y + (int)wYPos, wRect2.width, wRect2.height);
-	
-	
+
+
 	// ----- top of letter t -----
 	topTXPos = 11*width/16;
 	topTYPos = (height-150)/2;
-	
+
 	transform = new Transform(device);
 	transform.translate(topTXPos, topTYPos);
 	gc.setTransform(transform);
 	transform.dispose();
-	
+
 	gc.setForeground(device.getSystemColor(SWT.COLOR_YELLOW));
 	gc.drawString(GraphicsExample.getResourceString("Cubic"), 25, -50, true);
-	
+
 	path = new Path(device);
 	path.cubicTo(33 + tTopDiffX1, -20 + tTopDiffY1, 66 + tTopDiffX2, 20 + tTopDiffY2, 100, 0);
 	gc.drawPath(path);
@@ -360,7 +356,7 @@ public void paint(GC gc, int width, int height) {
 	gc.setTransform(null);
 	gc.drawRectangle(tTopRect1.x + (int)topTXPos, tTopRect1.y + (int)topTYPos, tTopRect1.width, tTopRect1.height);
 	gc.drawRectangle(tTopRect2.x + (int)topTXPos, tTopRect2.y + (int)topTYPos, tTopRect2.width, tTopRect2.height);
-	
+
 
 	// ----- vertical bar of letter t -----
 	botTXPos = 12*width/16;
@@ -370,15 +366,15 @@ public void paint(GC gc, int width, int height) {
 	transform.translate(botTXPos, botTYPos);
 	gc.setTransform(transform);
 	transform.dispose();
-	
+
 	gc.setForeground(device.getSystemColor(SWT.COLOR_RED));
 	gc.drawString(GraphicsExample.getResourceString("Cubic"), 0, 175, true);
-	
+
 	path = new Path(device);
 	path.cubicTo(-33 + tBotDiffX1, 50 + tBotDiffY1, 33 + tBotDiffX2, 100 + tBotDiffY2, 0, 150);
 	gc.drawPath(path);
 	path.dispose();
-	
+
 	gc.setTransform(null);
 	gc.drawRectangle(tBottomRect1.x + (int)botTXPos, tBottomRect1.y + (int)botTYPos, tBottomRect1.width, tBottomRect1.height);
 	gc.drawRectangle(tBottomRect2.x + (int)botTXPos, tBottomRect2.y + (int)botTYPos, tBottomRect2.width, tBottomRect2.height);
@@ -391,9 +387,9 @@ public void paint(GC gc, int width, int height) {
  */
 static String getPlatformFont() {
 	if(SWT.getPlatform() == "win32") {
-		return "Arial";	
+		return "Arial";
 	} else if (SWT.getPlatform() == "gtk") {
-		return "Baekmuk Batang";		
+		return "Baekmuk Batang";
 	} else {
 		return "Verdana";
 	}
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/CurvesTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/CurvesTab.java
index 6b2352c..700f0f9 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/CurvesTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/CurvesTab.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2006 IBM Corporation and others.
+ * Copyright (c) 2006, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -26,19 +26,19 @@ import org.eclipse.swt.widgets.Composite;
 
 /**
  * This tab presents cubic and quadratic curves that can be drawn.
- * The user may reposition the cubic and quadratic handles. 
+ * The user may reposition the cubic and quadratic handles.
  */
 public class CurvesTab extends GraphicsTab {
 	/** These rectangles represent the handles on the curves. */
 	private Rectangle quadHndl, quadEndHndl, cubHndl1, cubHndl2, cubEndHndl;
-	
+
 	/** These values represent the positions of the curves. */
 	private float quadXPos, quadYPos, cubXPos, cubYPos;
-	
+
 	/** These values represent the x and y displacement of each handle. */
 	private float quadDiffX, quadDiffY, quadEndDiffX, quadEndDiffY;
 	private float cubDiffX1, cubDiffY1, cubDiffX2, cubDiffY2, cubEndDiffX, cubEndDiffY;
-	
+
 	/** These are flags that indicate whether or not a handle has been moved. */
 	private boolean quadPtMoved, quadEndPtMoved, cubPt1Moved, cubPt2Moved, cubEndPtMoved;
 
@@ -48,11 +48,11 @@ public class CurvesTab extends GraphicsTab {
 
 	/** true if hovering over a handle, false otherwise */
 	private boolean hovering = false;
-	
+
 	/** true if left mouse button is held down, false otherwise */
 	private boolean mouseDown = false;
 
-	
+
 public CurvesTab(GraphicsExample example) {
 	super(example);
 	quadHndl = new Rectangle(200, 150, 5, 5);
@@ -89,17 +89,17 @@ public boolean getDoubleBuffered() {
 public void dispose() {
 	if (mouseListener != null)
 		example.canvas.removeMouseListener(mouseListener);
-	
+
 	if (mouseMoveListener != null)
 		example.canvas.removeMouseMoveListener(mouseMoveListener);
-	
+
 	cursor = null;
 }
 
 /**
  * This helper method determines whether or not the cursor is positioned
  * over a handle.
- * 
+ *
  * @param e
  *            A MouseEvent
  * @return true if cursor is positioned over a handle; false otherwise
@@ -111,63 +111,59 @@ private boolean isHovering(MouseEvent e) {
 	Rectangle cub2 = new Rectangle(cubHndl2.x + (int)cubXPos - 1, cubHndl2.y + (int)cubYPos - 1, cubHndl2.width+2, cubHndl2.height+2);
 	Rectangle cubEnd = new Rectangle(cubEndHndl.x + (int)cubXPos - 1, cubEndHndl.y + (int)cubYPos - 1, cubEndHndl.width+2, cubEndHndl.height+2);
 
-	return ( quad.contains(e.x, e.y) || quadEnd.contains(e.x, e.y) 
-		 || cub1.contains(e.x, e.y) || cub2.contains(e.x, e.y) 
+	return ( quad.contains(e.x, e.y) || quadEnd.contains(e.x, e.y)
+		 || cub1.contains(e.x, e.y) || cub2.contains(e.x, e.y)
 		 || cubEnd.contains(e.x, e.y));
 }
-/** 
+/**
  * Creates the widgets used to control the drawing.
  */
 @Override
 public void createControlPanel(Composite parent) {
-	if (cursor == null) { 
+	if (cursor == null) {
 		cursor = parent.getDisplay().getSystemCursor(SWT.CURSOR_HAND);
 	}
 
-	mouseMoveListener = new MouseMoveListener() {
-		
-		@Override
-		public void mouseMove(MouseEvent e) {
-			if (hovering && mouseDown) {
-				example.canvas.setCursor(cursor);
-			} else if (isHovering(e)) {
-				example.canvas.setCursor(cursor);
-				hovering = true;
-			} else {
-				example.canvas.setCursor(null);
-				hovering = false;
-			}
+	mouseMoveListener = e -> {
+		if (hovering && mouseDown) {
+			example.canvas.setCursor(cursor);
+		} else if (isHovering(e)) {
+			example.canvas.setCursor(cursor);
+			hovering = true;
+		} else {
+			example.canvas.setCursor(null);
+			hovering = false;
+		}
 
-			if (quadPtMoved) {
-				quadDiffX = quadDiffX + e.x - (int)quadXPos - quadHndl.x;
-				quadDiffY = quadDiffY + e.y - (int)quadYPos - quadHndl.y;
-				quadHndl.x = e.x - (int)quadXPos;
-				quadHndl.y = e.y - (int)quadYPos;				
-			} else if (quadEndPtMoved) {
-				quadEndDiffX = quadEndDiffX + e.x - (int)quadXPos - quadEndHndl.x;
-				quadEndDiffY = quadEndDiffY + e.y - (int)quadYPos - quadEndHndl.y;
-				quadEndHndl.x = e.x - (int)quadXPos;
-				quadEndHndl.y = e.y - (int)quadYPos;	
-			} else if (cubPt1Moved) {
-				cubDiffX1 = cubDiffX1 + e.x - (int)cubXPos - cubHndl1.x;
-				cubDiffY1 = cubDiffY1 + e.y - (int)cubYPos - cubHndl1.y;
-				cubHndl1.x = e.x - (int)cubXPos;
-				cubHndl1.y = e.y - (int)cubYPos;	
-			} else if (cubPt2Moved) {
-				cubDiffX2 = cubDiffX2 + e.x - (int)cubXPos - cubHndl2.x;
-				cubDiffY2 = cubDiffY2 + e.y - (int)cubYPos - cubHndl2.y;
-				cubHndl2.x = e.x - (int)cubXPos;
-				cubHndl2.y = e.y - (int)cubYPos;
-			} else if (cubEndPtMoved) {
-				cubEndDiffX = cubEndDiffX + e.x - (int)cubXPos - cubEndHndl.x;
-				cubEndDiffY = cubEndDiffY + e.y - (int)cubYPos - cubEndHndl.y;
-				cubEndHndl.x = e.x - (int)cubXPos;
-				cubEndHndl.y = e.y - (int)cubYPos;
-			}
-			example.redraw();			
+		if (quadPtMoved) {
+			quadDiffX = quadDiffX + e.x - (int)quadXPos - quadHndl.x;
+			quadDiffY = quadDiffY + e.y - (int)quadYPos - quadHndl.y;
+			quadHndl.x = e.x - (int)quadXPos;
+			quadHndl.y = e.y - (int)quadYPos;
+		} else if (quadEndPtMoved) {
+			quadEndDiffX = quadEndDiffX + e.x - (int)quadXPos - quadEndHndl.x;
+			quadEndDiffY = quadEndDiffY + e.y - (int)quadYPos - quadEndHndl.y;
+			quadEndHndl.x = e.x - (int)quadXPos;
+			quadEndHndl.y = e.y - (int)quadYPos;
+		} else if (cubPt1Moved) {
+			cubDiffX1 = cubDiffX1 + e.x - (int)cubXPos - cubHndl1.x;
+			cubDiffY1 = cubDiffY1 + e.y - (int)cubYPos - cubHndl1.y;
+			cubHndl1.x = e.x - (int)cubXPos;
+			cubHndl1.y = e.y - (int)cubYPos;
+		} else if (cubPt2Moved) {
+			cubDiffX2 = cubDiffX2 + e.x - (int)cubXPos - cubHndl2.x;
+			cubDiffY2 = cubDiffY2 + e.y - (int)cubYPos - cubHndl2.y;
+			cubHndl2.x = e.x - (int)cubXPos;
+			cubHndl2.y = e.y - (int)cubYPos;
+		} else if (cubEndPtMoved) {
+			cubEndDiffX = cubEndDiffX + e.x - (int)cubXPos - cubEndHndl.x;
+			cubEndDiffY = cubEndDiffY + e.y - (int)cubYPos - cubEndHndl.y;
+			cubEndHndl.x = e.x - (int)cubXPos;
+			cubEndHndl.y = e.y - (int)cubYPos;
 		}
+		example.redraw();
 	};
-	
+
 	mouseListener = new MouseListener() {
 
 		@Override
@@ -179,13 +175,13 @@ public void createControlPanel(Composite parent) {
 		 * @param e an event containing information about the mouse button press
 		 */
 		@Override
-		public void mouseDown(MouseEvent e) {  
+		public void mouseDown(MouseEvent e) {
 			Rectangle quad = new Rectangle(quadHndl.x + (int)quadXPos - 1, quadHndl.y + (int)quadYPos - 1, quadHndl.width+2, quadHndl.height+2);
 			Rectangle quadEnd = new Rectangle(quadEndHndl.x + (int)quadXPos - 1, quadEndHndl.y + (int)quadYPos - 1, quadEndHndl.width+2, quadEndHndl.height+2);
 			Rectangle cub1 = new Rectangle(cubHndl1.x + (int)cubXPos - 1, cubHndl1.y + (int)cubYPos - 1, cubHndl1.width+2, cubHndl1.height+2);
 			Rectangle cub2 = new Rectangle(cubHndl2.x + (int)cubXPos - 1, cubHndl2.y + (int)cubYPos - 1, cubHndl2.width+2, cubHndl2.height+2);
 			Rectangle cubEnd = new Rectangle(cubEndHndl.x + (int)cubXPos - 1, cubEndHndl.y + (int)cubYPos - 1, cubEndHndl.width+2, cubEndHndl.height+2);
-			
+
 			if (quad.contains(e.x, e.y)) {
 				quadPtMoved = true;
 				mouseDown = true;
@@ -223,12 +219,12 @@ public void createControlPanel(Composite parent) {
 			if (quadEndPtMoved)
 				quadEndPtMoved = false;
 			if (cubPt1Moved)
-				cubPt1Moved = false;	
+				cubPt1Moved = false;
 			if (cubPt2Moved)
 				cubPt2Moved = false;
 			if (cubEndPtMoved)
 				cubEndPtMoved = false;
-			
+
 			example.redraw();
 		}
 	};
@@ -240,25 +236,25 @@ public void createControlPanel(Composite parent) {
 public void paint(GC gc, int width, int height) {
 	if (!example.checkAdvancedGraphics()) return;
 	Device device = gc.getDevice();
-	
+
 	Font font = new Font(device, getPlatformFont(), 16, SWT.ITALIC);
 	gc.setFont(font);
 	gc.setLineWidth(5);
-	
+
 	Transform transform;
 
 	// ----- cubic curve -----
 	cubXPos = width/5;
 	cubYPos = height/3;
-	
+
 	transform = new Transform(device);
 	transform.translate(cubXPos, cubYPos);
 	gc.setTransform(transform);
 	transform.dispose();
-	
+
 	gc.setForeground(device.getSystemColor(SWT.COLOR_RED));
 	gc.drawString(GraphicsExample.getResourceString("Cubic"), 25, -70, true);
-	
+
 	Path path = new Path(device);
 	path.cubicTo(133 + cubDiffX1, -60 + cubDiffY1, 266 + cubDiffX2, 60 + cubDiffY2, 400 + cubEndDiffX, 0 + cubEndDiffY);
 	gc.drawPath(path);
@@ -269,24 +265,24 @@ public void paint(GC gc, int width, int height) {
 	gc.drawRectangle(cubHndl1.x + (int)cubXPos, cubHndl1.y + (int)cubYPos, cubHndl1.width, cubHndl1.height);
 	gc.drawRectangle(cubHndl2.x + (int)cubXPos, cubHndl2.y + (int)cubYPos, cubHndl2.width, cubHndl2.height);
 	gc.drawRectangle(cubEndHndl.x + (int)cubXPos, cubEndHndl.y + (int)cubYPos, cubEndHndl.width, cubEndHndl.height);
-	
+
 	// ----- quadratic curve -----
 	quadXPos = width/5;
 	quadYPos = 2*height/3;
-	
+
 	transform = new Transform(device);
 	transform.translate(quadXPos, quadYPos);
 	gc.setTransform(transform);
 	transform.dispose();
-	
+
 	gc.setForeground(device.getSystemColor(SWT.COLOR_GREEN));
 	gc.drawString(GraphicsExample.getResourceString("Quadratic"), 0, -50, true);
-	
+
 	path = new Path(device);
 	path.quadTo(200 + quadDiffX, 150 + quadDiffY, 400 + quadEndDiffX, 0 + quadEndDiffY);
 	gc.drawPath(path);
 	path.dispose();
-	
+
 	gc.setTransform(null);
 	gc.setForeground(device.getSystemColor(SWT.COLOR_GRAY));
 	gc.drawRectangle(quadHndl.x + (int)quadXPos, quadHndl.y + (int)quadYPos, quadHndl.width, quadHndl.height);
@@ -300,9 +296,9 @@ public void paint(GC gc, int width, int height) {
  */
 static String getPlatformFont() {
 	if(SWT.getPlatform() == "win32") {
-		return "Arial";	
+		return "Arial";
 	} else if (SWT.getPlatform() == "gtk") {
-		return "Baekmuk Batang";		
+		return "Baekmuk Batang";
 	} else {
 		return "Verdana";
 	}
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/CustomAlphaTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/CustomAlphaTab.java
index c93f50e..aa4c56e 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/CustomAlphaTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/CustomAlphaTab.java
@@ -31,7 +31,7 @@ import org.eclipse.swt.widgets.Spinner;
  * a custom alpha value.
  */
 public class CustomAlphaTab extends AnimatedGraphicsTab {
-	
+
 	private Spinner alphaSpinner;
 	private Button colorButton;
 	private GraphicsBackground background;
@@ -65,16 +65,16 @@ public void dispose() {
 	}
 }
 
-/** 
+/**
  * Creates the widgets used to control the drawing.
  */
 @Override
 public void createControlPanel(Composite parent) {
 	super.createControlPanel(parent);
-	
+
 	// create drop down combo for choosing clipping
 	Composite comp;
-	
+
 	// create spinner for line width
 	comp = new Composite(parent, SWT.NONE);
 	comp.setLayout(new GridLayout(2, false));
@@ -85,33 +85,30 @@ public void createControlPanel(Composite parent) {
 	alphaSpinner.setMaximum(255);
 	alphaSpinner.setSelection(127);
 	alphaSpinner.addListener(SWT.Selection, event -> example.redraw());
-	
+
 	// color menu
 	ColorMenu cm = new ColorMenu();
 	cm.setPatternItems(example.checkAdvancedGraphics());
-	menu = cm.createMenu(parent.getParent(), new ColorListener() {
-		@Override
-		public void setColor(GraphicsBackground gb) {
-			background = gb;		
-			colorButton.setImage(gb.getThumbNail());
-			example.redraw();
-		}
+	menu = cm.createMenu(parent.getParent(), gb -> {
+		background = gb;
+		colorButton.setImage(gb.getThumbNail());
+		example.redraw();
 	});
 
 	// initialize the background to the 5th item in the menu (blue)
 	background = (GraphicsBackground)menu.getItem(4).getData();
-	
+
 	// color button
 	comp = new Composite(parent, SWT.NONE);
 	comp.setLayout(new GridLayout(2, false));
-	
+
 	colorButton = new Button(comp, SWT.PUSH);
 	colorButton.setText(GraphicsExample
 			.getResourceString("Color")); //$NON-NLS-1$
 	colorButton.setImage(background.getThumbNail());
 	colorButton.addListener(SWT.Selection, event -> {
 		final Button button = (Button) event.widget;
-		final Composite parent1 = button.getParent(); 
+		final Composite parent1 = button.getParent();
 		Rectangle bounds = button.getBounds();
 		Point point = parent1.toDisplay(new Point(bounds.x, bounds.y));
 		menu.setLocation(point.x, point.y + bounds.height);
@@ -121,7 +118,7 @@ public void createControlPanel(Composite parent) {
 
 @Override
 public void next(int width, int height) {
-	
+
 	angle = (angle+1)%360;
 }
 
@@ -137,10 +134,10 @@ public void paint(GC gc, int width, int height) {
 		pattern = new Pattern(device, background.getBgImage());
 		gc.setBackgroundPattern(pattern);
 	}
-	
+
 	gc.setAntialias(SWT.ON);
 	gc.setAlpha(alphaSpinner.getSelection());
-	
+
 	// rotate on center
 	Transform transform = new Transform(device);
 	transform.translate(width/2, height/2);
@@ -148,24 +145,24 @@ public void paint(GC gc, int width, int height) {
 	transform.translate(-width/2, -height/2);
 	gc.setTransform(transform);
 	transform.dispose();
-	
+
 	// choose the smallest between height and width
 	int diameter = (height < width) ? height : width;
-	
+
 	Path path = new Path(device);
 	path.addArc((width-diameter/5)/2, (height-diameter/5)/2, diameter/5, diameter/5, 0, 360);
 	path.addArc(5*(width-diameter/8)/12, 4*(height-diameter/8)/12, diameter/8, diameter/8, 0, 360);
 	path.addArc(7*(width-diameter/8)/12, 8*(height-diameter/8)/12, diameter/8, diameter/8, 0, 360);
 	path.addArc(6*(width-diameter/12)/12, 3*(height-diameter/12)/12, diameter/12, diameter/12, 0, 360);
 	path.addArc(6*(width-diameter/12)/12, 9*(height-diameter/12)/12, diameter/12, diameter/12, 0, 360);
-	path.addArc(11.5f*(width-diameter/18)/20, 5*(height-diameter/18)/18, diameter/18, diameter/18, 0, 360);	
+	path.addArc(11.5f*(width-diameter/18)/20, 5*(height-diameter/18)/18, diameter/18, diameter/18, 0, 360);
 	path.addArc(8.5f*(width-diameter/18)/20, 13*(height-diameter/18)/18, diameter/18, diameter/18, 0, 360);
 	path.addArc(62f*(width-diameter/25)/100, 32*(height-diameter/25)/100, diameter/25, diameter/25, 0, 360);
 	path.addArc(39f*(width-diameter/25)/100, 67*(height-diameter/25)/100, diameter/25, diameter/25, 0, 360);
-		
+
 	gc.fillPath(path);
 	path.dispose();
-			
+
     if (pattern != null) pattern.dispose();
 }
 }
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/CustomFontTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/CustomFontTab.java
index e1df179..506c4f1 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/CustomFontTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/CustomFontTab.java
@@ -28,9 +28,7 @@ import org.eclipse.swt.widgets.Button;
 import org.eclipse.swt.widgets.Combo;
 import org.eclipse.swt.widgets.Composite;
 import org.eclipse.swt.widgets.Display;
-import org.eclipse.swt.widgets.Event;
 import org.eclipse.swt.widgets.Label;
-import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.Menu;
 import org.eclipse.swt.widgets.Spinner;
 
@@ -49,10 +47,10 @@ public class CustomFontTab extends GraphicsTab {
 	int [] styleValues;
 	String [] fontStyles;
 	Menu menu;
-	
+
 public CustomFontTab(GraphicsExample example) {
 	super(example);
-	
+
 	// create list of fonts for this platform
 	FontData [] fontData = Display.getCurrent().getFontList(null, true);
 	fontNames = new ArrayList<>();
@@ -104,11 +102,11 @@ public void createControlPanel(Composite parent) {
 
 	Composite mainComp = new Composite(parent, SWT.NONE);
 	mainComp.setLayout(new RowLayout());
-	
+
 	// create combo for font face
 	Composite comp = new Composite(mainComp, SWT.NONE);
 	comp.setLayout(new GridLayout(2, false));
-	
+
 	new Label(comp, SWT.LEFT).setText(GraphicsExample.getResourceString("FontFace")); //$NON-NLS-1$
 	fontFaceCb = new Combo(comp, SWT.DROP_DOWN);
 	for (String name : fontNames) {
@@ -116,11 +114,11 @@ public void createControlPanel(Composite parent) {
 	}
 	fontFaceCb.select(0);
 	fontFaceCb.addListener(SWT.Selection, event -> example.redraw());
-	
+
 	// create combo for font style
 	comp = new Composite(mainComp, SWT.NONE);
 	comp.setLayout(new GridLayout(2, false));
-	
+
 	new Label(comp, SWT.LEFT).setText(GraphicsExample.getResourceString("FontStyle")); //$NON-NLS-1$
 	fontStyleCb = new Combo(comp, SWT.DROP_DOWN);
 	for (String fontStyle : fontStyles) {
@@ -128,11 +126,11 @@ public void createControlPanel(Composite parent) {
 	}
 	fontStyleCb.select(0);
 	fontStyleCb.addListener(SWT.Selection, event -> example.redraw());
-	
+
 	// create spinner for font size (points)
 	comp = new Composite(mainComp, SWT.NONE);
 	comp.setLayout(new GridLayout(2, false));
-	
+
 	new Label(comp, SWT.LEFT).setText(GraphicsExample.getResourceString("FontSize")); //$NON-NLS-1$
 	fontPointSpinner = new Spinner(comp, SWT.BORDER | SWT.WRAP);
 	fontPointSpinner.setMinimum(1);
@@ -143,35 +141,29 @@ public void createControlPanel(Composite parent) {
 	ColorMenu cm = new ColorMenu();
 	cm.setColorItems(true);
 	cm.setPatternItems(example.checkAdvancedGraphics());
-	menu = cm.createMenu(parent.getParent(), new ColorListener() {
-		@Override
-		public void setColor(GraphicsBackground gb) {
-			fontForeground = gb;
-			colorButton.setImage(gb.getThumbNail());
-			example.redraw();
-		}
+	menu = cm.createMenu(parent.getParent(), gb -> {
+		fontForeground = gb;
+		colorButton.setImage(gb.getThumbNail());
+		example.redraw();
 	});
-	
+
 	// initialize the background to the 2nd item in the menu (black)
 	fontForeground = (GraphicsBackground)menu.getItem(1).getData();
-	
+
 	// create color button
 	comp = new Composite(parent, SWT.NONE);
 	comp.setLayout(new GridLayout());
-		
+
 	colorButton = new Button(comp, SWT.PUSH);
 	colorButton.setText(GraphicsExample.getResourceString("Color")); //$NON-NLS-1$
 	colorButton.setImage(fontForeground.getThumbNail());
-	colorButton.addListener(SWT.Selection, new Listener() { 
-		@Override
-		public void handleEvent(Event event) {
-			final Button button = (Button) event.widget;
-			final Composite parent = button.getParent(); 
-			Rectangle bounds = button.getBounds();
-			Point point = parent.toDisplay(new Point(bounds.x, bounds.y));
-			menu.setLocation(point.x, point.y + bounds.height);
-			menu.setVisible(true);
-		}
+	colorButton.addListener(SWT.Selection, event -> {
+		final Button button = (Button) event.widget;
+		final Composite parent1 = button.getParent();
+		Rectangle bounds = button.getBounds();
+		Point point = parent1.toDisplay(new Point(bounds.x, bounds.y));
+		menu.setLocation(point.x, point.y + bounds.height);
+		menu.setVisible(true);
 	});
 }
 
@@ -182,11 +174,11 @@ public void createControlPanel(Composite parent) {
 public void paint(GC gc, int width, int height) {
 	if (!example.checkAdvancedGraphics()) return;
 	Device device = gc.getDevice();
-	
+
 	String fontFace = fontNames.get(fontFaceCb.getSelectionIndex());
 	int points = fontPointSpinner.getSelection();
 	int style = styleValues[fontStyleCb.getSelectionIndex()];
-	
+
 	Font font = new Font(device, fontFace, points, style);
 	gc.setFont(font);
 	gc.setTextAntialias(SWT.ON);
@@ -202,11 +194,11 @@ public void paint(GC gc, int width, int height) {
 		pattern = new Pattern(device, fontForeground.getBgImage());
 		gc.setForegroundPattern(pattern);
 	}
-	
+
 	gc.drawString(text, (width-textWidth)/2, (height-textHeight)/2, true);
 
 	font.dispose();
-	if (pattern != null) pattern.dispose();	
+	if (pattern != null) pattern.dispose();
 }
 
 }
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/GradientDialog.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/GradientDialog.java
index c339151..f522514 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/GradientDialog.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/GradientDialog.java
@@ -29,9 +29,7 @@ import org.eclipse.swt.widgets.Canvas;
 import org.eclipse.swt.widgets.Composite;
 import org.eclipse.swt.widgets.Dialog;
 import org.eclipse.swt.widgets.Display;
-import org.eclipse.swt.widgets.Event;
 import org.eclipse.swt.widgets.Label;
-import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.Menu;
 import org.eclipse.swt.widgets.Shell;
 
@@ -48,39 +46,39 @@ public class GradientDialog extends Dialog {
 	Button okButton, cancelButton;
 
 	Menu menu1, menu2;
-	
+
 	RGB rgb1, rgb2;			// first and second color used in gradient
-	int returnVal; 			// value to be returned by open(), set to SWT.OK 
-							// if the ok button has been pressed		
+	int returnVal; 			// value to be returned by open(), set to SWT.OK
+							// if the ok button has been pressed
 	List<Image> resources;
-			
-	public GradientDialog(Shell parent) {		
+
+	public GradientDialog(Shell parent) {
 		this (parent, SWT.PRIMARY_MODAL);
 	}
-	
+
 	public GradientDialog(Shell parent, int style) {
 		super(parent, style);
 		rgb1 = rgb2 = null;
 		returnVal = SWT.CANCEL;
 		resources = new ArrayList<>();
 	}
-	
+
 	/**
 	 * Sets up the dialog and opens it.
 	 * */
 	public int open() {
 		final Shell dialog = new Shell(getParent(), SWT.DIALOG_TRIM | SWT.RESIZE | getStyle());
 		dialog.setText(GraphicsExample.getResourceString("Gradient")); //$NON-NLS-1$
-				
+
 		GridLayout gridLayout = new GridLayout();
 	    gridLayout.numColumns = 2;
 	    gridLayout.marginHeight = 10;
 	    gridLayout.marginWidth = 10;
 	    dialog.setLayout(gridLayout);
-	    
+
 	    // create the controls in the dialog
 	    createDialogControls(dialog);
-		
+
 		dialog.addListener(SWT.Close, event -> {
 			for (int i = 0; i < resources.size(); i++) {
 				Object obj = resources.get(i);
@@ -89,7 +87,7 @@ public class GradientDialog extends Dialog {
 				}
 			}
 			dialog.dispose();
-		});	
+		});
 
 		dialog.setDefaultButton (okButton);
 		dialog.pack ();
@@ -97,19 +95,19 @@ public class GradientDialog extends Dialog {
 		Rectangle bounds = dialog.getBounds();
 		dialog.setLocation(rect.x + (rect.width - bounds.width) / 2, rect.y + (rect.height - bounds.height) / 2);
 		dialog.setMinimumSize(bounds.width, bounds.height);
-		
+
 		dialog.open ();
-		
+
 		Display display = getParent().getDisplay();
 		while (!dialog.isDisposed()) {
 			if (!display.readAndDispatch()) display.sleep();
 		}
-		
+
 		if (menu1 != null) {
 			menu1.dispose();
 			menu1 = null;
 		}
-		
+
 		if (menu2 != null) {
 			menu2.dispose();
 			menu2 = null;
@@ -117,25 +115,25 @@ public class GradientDialog extends Dialog {
 
 		return returnVal;
 	}
-	
+
 	/**
 	 * Creates the controls of the dialog.
 	 * */
 	public void createDialogControls(final Shell parent) {
 		final Display display = parent.getDisplay();
-		
+
 		// message
-		Label message = new Label(parent, SWT.NONE); 
+		Label message = new Label(parent, SWT.NONE);
 		message.setText(GraphicsExample.getResourceString("GradientDlgMsg"));
 		GridData gridData = new GridData(GridData.HORIZONTAL_ALIGN_FILL);
 		gridData.horizontalSpan = 2;
 		message.setLayoutData(gridData);
-		
+
 		// default colors are white and black
 		if (rgb1 == null || rgb2 == null) {
 			rgb1 = display.getSystemColor(SWT.COLOR_WHITE).getRGB();
 			rgb2 = display.getSystemColor(SWT.COLOR_BLACK).getRGB();
-		}			
+		}
 
 		// canvas
 		canvas = new Canvas(parent, SWT.NONE);
@@ -156,10 +154,10 @@ public class GradientDialog extends Dialog {
 			color1.dispose();
 			color2.dispose();
 		});
-		
+
 		// composite used for both color buttons
 		Composite colorButtonComp = new Composite(parent, SWT.NONE);
-		
+
 		// layout buttons
 		RowLayout layout = new RowLayout();
 		layout.type = SWT.VERTICAL;
@@ -169,9 +167,9 @@ public class GradientDialog extends Dialog {
 		// position composite
 		gridData = new GridData(GridData.VERTICAL_ALIGN_BEGINNING);
 	    colorButtonComp.setLayoutData(gridData);
-	    
+
 		ColorMenu colorMenu = new ColorMenu();
-		
+
 		// color controls: first color
 		colorButton1 = new Button(colorButtonComp, SWT.PUSH);
 		colorButton1.setText(GraphicsExample.getResourceString("GradientDlgButton1"));
@@ -180,27 +178,21 @@ public class GradientDialog extends Dialog {
 		color1.dispose();
 		colorButton1.setImage(img1);
 		resources.add(img1);
-		menu1 = colorMenu.createMenu(parent.getParent(), new ColorListener() {
-			@Override
-			public void setColor(GraphicsBackground gb) {
-				rgb1 = gb.getBgColor1().getRGB();
-				colorButton1.setImage(gb.getThumbNail());
-				if (canvas != null) canvas.redraw();
-			}
+		menu1 = colorMenu.createMenu(parent.getParent(), gb -> {
+			rgb1 = gb.getBgColor1().getRGB();
+			colorButton1.setImage(gb.getThumbNail());
+			if (canvas != null) canvas.redraw();
 		});
-		colorButton1.addListener(SWT.Selection, new Listener() { 
-			@Override
-			public void handleEvent(Event event) {
-				final Button button = (Button) event.widget;
-				final Composite parent = button.getParent(); 
-				Rectangle bounds = button.getBounds();
-				Point point = parent.toDisplay(new Point(bounds.x, bounds.y));
-				menu1.setLocation(point.x, point.y + bounds.height);
-				menu1.setVisible(true);
-			}
+		colorButton1.addListener(SWT.Selection, event -> {
+			final Button button = (Button) event.widget;
+			final Composite parent1 = button.getParent();
+			Rectangle bounds = button.getBounds();
+			Point point = parent1.toDisplay(new Point(bounds.x, bounds.y));
+			menu1.setLocation(point.x, point.y + bounds.height);
+			menu1.setVisible(true);
 		});
-		
-		// color controls: second color 
+
+		// color controls: second color
 		colorButton2 = new Button(colorButtonComp, SWT.PUSH);
 		colorButton2.setText(GraphicsExample.getResourceString("GradientDlgButton2"));
 		Color color2 = new Color(display, rgb2);
@@ -208,23 +200,20 @@ public class GradientDialog extends Dialog {
 		color2.dispose();
 		colorButton2.setImage(img2);
 		resources.add(img2);
-		menu2 = colorMenu.createMenu(parent.getParent(), new ColorListener() {
-			@Override
-			public void setColor(GraphicsBackground gb) {
-				rgb2 = gb.getBgColor1().getRGB();
-				colorButton2.setImage(gb.getThumbNail());
-				if (canvas != null) canvas.redraw();
-			}
+		menu2 = colorMenu.createMenu(parent.getParent(), gb -> {
+			rgb2 = gb.getBgColor1().getRGB();
+			colorButton2.setImage(gb.getThumbNail());
+			if (canvas != null) canvas.redraw();
 		});
 		colorButton2.addListener(SWT.Selection, event -> {
 			final Button button = (Button) event.widget;
-			final Composite parent1 = button.getParent(); 
+			final Composite parent1 = button.getParent();
 			Rectangle bounds = button.getBounds();
 			Point point = parent1.toDisplay(new Point(bounds.x, bounds.y));
 			menu2.setLocation(point.x, point.y + bounds.height);
 			menu2.setVisible(true);
 		});
-		
+
 		// composite used for ok and cancel buttons
 		Composite okCancelComp = new Composite(parent, SWT.NONE);
 
@@ -238,7 +227,7 @@ public class GradientDialog extends Dialog {
 		gridData = new GridData(GridData.HORIZONTAL_ALIGN_END);
 	    gridData.horizontalSpan = 2;
 	    okCancelComp.setLayoutData(gridData);
-		
+
 	    // OK button
 		okButton = new Button (okCancelComp, SWT.PUSH);
 		okButton.setText("&OK");
@@ -246,20 +235,20 @@ public class GradientDialog extends Dialog {
 			returnVal = SWT.OK;
 			parent.close();
 		});
-		
+
 		// cancel button
 		cancelButton = new Button (okCancelComp, SWT.PUSH);
 		cancelButton.setText("&Cancel");
 		cancelButton.addListener(SWT.Selection, event -> parent.close());
 	}
-	
+
 	/**
 	 * Returns the first RGB selected by the user.
 	 * */
 	public RGB getFirstRGB() {
-		return rgb1;		
+		return rgb1;
 	}
-	
+
 	/**
 	 * Sets the first RGB.
 	 * @param rgb
@@ -267,7 +256,7 @@ public class GradientDialog extends Dialog {
 	public void setFirstRGB(RGB rgb) {
 		this.rgb1 = rgb;
 	}
-	
+
 	/**
 	 * Returns the second RGB selected by the user.
 	 * */
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/GradientTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/GradientTab.java
index e97298d..530c6b7 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/GradientTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/GradientTab.java
@@ -30,12 +30,12 @@ import org.eclipse.swt.widgets.ToolItem;
  * This tab draws an image consisting of gradients of two colors.
  * */
 public class GradientTab extends GraphicsTab {
-	
+
 	ToolBar toolBar;
 	ToolItem colorItem1, colorItem2;
 	Menu menu1, menu2;
 	GraphicsBackground colorGB1, colorGB2;
-	
+
 
 public GradientTab(GraphicsExample example) {
 	super(example);
@@ -77,24 +77,21 @@ public String getDescription() {
 @Override
 public void createControlPanel(final Composite parent) {
 	final Display display = parent.getDisplay();
-	
+
 	toolBar = new ToolBar(parent, SWT.FLAT);
-	
+
 	ColorMenu colorMenu = new ColorMenu();
 
 	// menu for colorItem1
-	menu1 = colorMenu.createMenu(parent.getParent(), new ColorListener() {
-		@Override
-		public void setColor(GraphicsBackground gb) {
-			colorGB1 = gb;
-			colorItem1.setImage(gb.getThumbNail());
-			example.redraw();
-		}
+	menu1 = colorMenu.createMenu(parent.getParent(), gb -> {
+		colorGB1 = gb;
+		colorItem1.setImage(gb.getThumbNail());
+		example.redraw();
 	});
-	
+
 	// initialize the background to the 5th item in the menu (blue)
 	colorGB1 = (GraphicsBackground)menu1.getItem(4).getData();
-	
+
 	// toolbar item for color1
 	colorItem1 = new ToolItem(toolBar, SWT.PUSH);
 	colorItem1.setText(GraphicsExample.getResourceString("GradientTabItem1"));
@@ -107,20 +104,17 @@ public void createControlPanel(final Composite parent) {
 		menu1.setLocation(point.x, point.y + toolItemBounds.height);
 		menu1.setVisible(true);
 	});
-	
+
 	// menu for colorItem2
-	menu2 = colorMenu.createMenu(parent.getParent(), new ColorListener() {
-		@Override
-		public void setColor(GraphicsBackground gb) {
-			colorGB2 = gb;
-			colorItem2.setImage(gb.getThumbNail());
-			example.redraw();
-		}
+	menu2 = colorMenu.createMenu(parent.getParent(), gb -> {
+		colorGB2 = gb;
+		colorItem2.setImage(gb.getThumbNail());
+		example.redraw();
 	});
-	
+
 	// initialize the background to the 3rd item in the menu (red)
 	colorGB2 = (GraphicsBackground)menu2.getItem(2).getData();
-	
+
 	// toolbar item for color2
 	colorItem2 = new ToolItem(toolBar, SWT.PUSH);
 	colorItem2.setText(GraphicsExample.getResourceString("GradientTabItem2"));
@@ -133,7 +127,7 @@ public void createControlPanel(final Composite parent) {
 		menu2.setLocation(point.x, point.y + toolItemBounds.height);
 		menu2.setVisible(true);
 	});
-	
+
 	// toolbar item for swapping colors
 	ToolItem swapItem = new ToolItem(toolBar, SWT.PUSH);
 	swapItem.setText(GraphicsExample.getResourceString("SwapColors")); //$NON-NLS-1$
@@ -156,7 +150,7 @@ public void createControlPanel(final Composite parent) {
 public void paint(GC gc, int width, int height) {
 	if (!example.checkAdvancedGraphics()) return;
 	Device device = gc.getDevice();
-	
+
 	Image image = createImage(device, colorGB1.getBgColor1(), colorGB2.getBgColor1(), width, height);
 	Pattern p = new Pattern(device, image);
 	gc.setBackgroundPattern(p);
@@ -170,7 +164,7 @@ public void paint(GC gc, int width, int height) {
 /**
  * Creates and returns an image made up of gradient patterns. The image takes up
  * a quarter of the area of the total drawing surface.
- * 
+ *
  * @param device
  *            A Device
  * @param color1
@@ -186,22 +180,22 @@ Image createImage(Device device, Color color1, Color color2, int width, int heig
 	Image image = new Image(device, width/2, height/2);
 	GC gc = new GC(image);
 	Rectangle rect = image.getBounds();
-	
+
 	Pattern pattern1 = new Pattern(device, rect.x, rect.y, rect.width/2f, rect.height/2f, color1, color2);
-	gc.setBackgroundPattern(pattern1);	
+	gc.setBackgroundPattern(pattern1);
 	Path path = new Path(device);
 	path.addRectangle(0, 0, width/4f, height/4f);
 	path.addRectangle(width/4f, height/4f, width/4f, height/4f);
 	gc.fillPath(path);
 	path.dispose();
-	
+
 	Pattern pattern2 = new Pattern(device, rect.width, 0, rect.width/2f, rect.height/2f, color1, color2);
 	gc.setBackgroundPattern(pattern2);
 	path = new Path(device);
 	path.addRectangle(width/4f, 0, width/4f, height/4f);
 	path.addRectangle(0, height/4f, width/4f, height/4f);
 	gc.fillPath(path);
-	path.dispose();	
+	path.dispose();
 
 	gc.dispose();
 	pattern1.dispose();
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/GraphicAntialiasTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/GraphicAntialiasTab.java
index e592eb5..1cab9bb 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/GraphicAntialiasTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/GraphicAntialiasTab.java
@@ -33,12 +33,12 @@ public class GraphicAntialiasTab extends GraphicsTab {
 
 	Combo aliasCombo;
 	int[] aliasValues = { SWT.OFF, SWT.DEFAULT, SWT.ON };
-	
+
 	Button colorButton;
 	Menu menu;
 	GraphicsBackground ovalColorGB;
 
-	
+
 public GraphicAntialiasTab(GraphicsExample example) {
 	super(example);
 }
@@ -70,7 +70,7 @@ public void dispose() {
 public void createControlPanel(Composite parent) {
 
 	Composite comp;
-	
+
 	// create drop down combo for antialiasing
 	comp = new Composite(parent, SWT.NONE);
 	comp.setLayout(new GridLayout(2, false));
@@ -85,29 +85,26 @@ public void createControlPanel(Composite parent) {
 
 	ColorMenu cm = new ColorMenu();
 	cm.setColorItems(true);
-	menu = cm.createMenu(parent.getParent(), new ColorListener() {
-		@Override
-		public void setColor(GraphicsBackground gb) {
-			ovalColorGB = gb;
-			colorButton.setImage(gb.getThumbNail());
-			example.redraw();
-		}
+	menu = cm.createMenu(parent.getParent(), gb -> {
+		ovalColorGB = gb;
+		colorButton.setImage(gb.getThumbNail());
+		example.redraw();
 	});
-	
+
 	// create color button
 	comp = new Composite(parent, SWT.NONE);
 	comp.setLayout(new GridLayout());
-	
+
     // initialize the background to the 5th item in the menu (blue)
 	ovalColorGB = (GraphicsBackground)menu.getItem(4).getData();
-	
+
 	// color button
 	colorButton = new Button(comp, SWT.PUSH);
 	colorButton.setText(GraphicsExample.getResourceString("Color")); //$NON-NLS-1$
 	colorButton.setImage(ovalColorGB.getThumbNail());
 	colorButton.addListener(SWT.Selection, event -> {
 		final Button button = (Button) event.widget;
-		final Composite parent1 = button.getParent(); 
+		final Composite parent1 = button.getParent();
 		Rectangle bounds = button.getBounds();
 		Point point = parent1.toDisplay(new Point(bounds.x, bounds.y));
 		menu.setLocation(point.x, point.y + bounds.height);
@@ -122,10 +119,10 @@ public void createControlPanel(Composite parent) {
 public void paint(GC gc, int width, int height) {
 	if (!example.checkAdvancedGraphics()) return;
 	Device device = gc.getDevice();
-	
+
 	if (ovalColorGB != null && ovalColorGB.getBgColor1() != null)
 		gc.setBackground(ovalColorGB.getBgColor1());
-	
+
 	gc.setAntialias(aliasValues[aliasCombo.getSelectionIndex()]);
 
 	Path path = new Path(device);
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/GraphicsExample.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/GraphicsExample.java
index 088dc02..158a44f 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/GraphicsExample.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/GraphicsExample.java
@@ -38,9 +38,7 @@ import org.eclipse.swt.widgets.Canvas;
 import org.eclipse.swt.widgets.Composite;
 import org.eclipse.swt.widgets.Control;
 import org.eclipse.swt.widgets.Display;
-import org.eclipse.swt.widgets.Event;
 import org.eclipse.swt.widgets.Group;
-import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.Menu;
 import org.eclipse.swt.widgets.MessageBox;
 import org.eclipse.swt.widgets.Sash;
@@ -56,12 +54,12 @@ import org.eclipse.swt.widgets.TreeItem;
  * created and made visible by this class.
  */
 public class GraphicsExample {
-		
+
 	Composite parent;
 	GraphicsTab[] tabs;				// tabs to be found in the application
 	GraphicsTab tab;				// the current tab
 	GraphicsBackground background;	// used to store information about the background
-	
+
 	ToolBar toolBar;				// toolbar that contains backItem and dbItem
 	Tree tabList;					// tree structure of tabs
 	Text tabDesc;					// multi-line text widget that displays a tab description
@@ -70,20 +68,20 @@ public class GraphicsExample {
 	Composite tabControlPanel;
 	ToolItem backItem, dbItem;		// background, double buffer items
 	Menu backMenu;					// background menu item
-	
+
 	List<Image> resources;			// stores resources that will be disposed
 	List<GraphicsTab> tabs_in_order;		// stores GraphicsTabs in the order that they appear in the tree
 	boolean animate = true;			// whether animation should happen
 
 	static boolean advanceGraphics, advanceGraphicsInit;
-	
+
 	static final int MARGIN = 5;
 	static final int SASH_SPACING = 1;
 	static final int TIMER = 30;
 	static final ResourceBundle RESOURCE_BUNDLE = ResourceBundle.getBundle("examples_graphics"); //$NON-NLS-1$
 
 /*
- * Default constructor is needed so that example launcher can create an instance. 
+ * Default constructor is needed so that example launcher can create an instance.
  */
 public GraphicsExample() {
 	super();
@@ -122,15 +120,15 @@ void createControls(final Composite parent) {
 	createToolBar(parent);
 	createTabList(parent);
 	hSash = new Sash(parent, SWT.HORIZONTAL);
-	createTabDesc(parent);	
+	createTabDesc(parent);
 	vSash = new Sash(parent, SWT.VERTICAL);
 	createCanvas(parent);
 	createControlPanel(parent);
-	
+
 	FormData data;
 	FormLayout layout = new FormLayout();
 	parent.setLayout(layout);
-	
+
 	data = new FormData();
 	data.left = new FormAttachment(0, MARGIN);
 	data.top = new FormAttachment(0, MARGIN);
@@ -157,7 +155,7 @@ void createControls(final Composite parent) {
 	data.right = new FormAttachment(vSash, -SASH_SPACING);
 	data.bottom = new FormAttachment(100, -MARGIN);
 	tabDesc.setLayoutData(data);
-	
+
 	data = new FormData();
 	data.left = new FormAttachment(null, tabList.computeSize(SWT.DEFAULT, SWT.DEFAULT).x + 50);
 	data.top = new FormAttachment(toolBar, MARGIN);
@@ -176,7 +174,7 @@ void createControls(final Composite parent) {
 	data.right = new FormAttachment(100, -MARGIN);
 	data.bottom = new FormAttachment(100, -MARGIN);
 	tabControlPanel.setLayoutData(data);
-	
+
 	vSash.addListener(SWT.Selection, event -> {
 		Rectangle rect = hSash.getParent().getClientArea();
 		event.x = Math.min (Math.max (event.x, 60), rect.width - 60);
@@ -206,12 +204,12 @@ void createCanvas(Composite parent) {
 	canvas = new Canvas(parent, style);
 	canvas.addListener(SWT.Paint, event -> {
 		GC gc = event.gc;
-		Rectangle rect = canvas.getClientArea();			
+		Rectangle rect = canvas.getClientArea();
 		Device device = gc.getDevice();
 		Pattern pattern = null;
 		if (background.getBgColor1() != null) {
 			if (background.getBgColor2() != null) { // gradient
-				pattern = new Pattern(device, 0, 0, rect.width, 
+				pattern = new Pattern(device, 0, 0, rect.width,
 						rect.height,
 						background.getBgColor1(),
 						background.getBgColor2());
@@ -240,7 +238,7 @@ void recreateCanvas() {
 }
 
 /**
- * Creates the control panel 
+ * Creates the control panel
  * @param parent
  */
 void createControlPanel(Composite parent) {
@@ -252,20 +250,20 @@ void createControlPanel(Composite parent) {
 
 void createToolBar(final Composite parent) {
 	final Display display = parent.getDisplay();
-	
+
 	toolBar = new ToolBar(parent, SWT.FLAT);
-	
+
 	ToolItem  back = new ToolItem(toolBar, SWT.PUSH);
 	back.setText(getResourceString("Back")); //$NON-NLS-1$
 	back.setImage(loadImage(display, "back.gif")); //$NON-NLS-1$
-	
+
 	back.addListener(SWT.Selection, event -> {
 		int index = tabs_in_order.indexOf(tab) - 1;
 		if (index < 0)
 			index = tabs_in_order.size() - 1;
 		setTab(tabs_in_order.get(index));
 	});
-	
+
 	ToolItem  next = new ToolItem(toolBar, SWT.PUSH);
 	next.setText(getResourceString("Next")); //$NON-NLS-1$
 	next.setImage(loadImage(display, "next.gif")); //$NON-NLS-1$
@@ -273,60 +271,49 @@ void createToolBar(final Composite parent) {
 		int index = (tabs_in_order.indexOf(tab) + 1)%tabs_in_order.size();
 		setTab(tabs_in_order.get(index));
 	});
-	
+
 	ColorMenu colorMenu = new ColorMenu();
-	
+
 	// setup items to be contained in the background menu
 	colorMenu.setColorItems(true);
 	colorMenu.setPatternItems(checkAdvancedGraphics());
 	colorMenu.setGradientItems(checkAdvancedGraphics());
-	
+
 	// create the background menu
-	backMenu = colorMenu.createMenu(parent, new ColorListener() {
-		@Override
-		public void setColor(GraphicsBackground gb) {
-			background = gb;
-			backItem.setImage(gb.getThumbNail());
-			if (canvas != null) canvas.redraw();
-		}
+	backMenu = colorMenu.createMenu(parent, gb -> {
+		background = gb;
+		backItem.setImage(gb.getThumbNail());
+		if (canvas != null) canvas.redraw();
 	});
-	
+
 	// initialize the background to the first item in the menu
 	background = (GraphicsBackground)backMenu.getItem(0).getData();
-	
+
 	// background tool item
 	backItem = new ToolItem(toolBar, SWT.PUSH);
 	backItem.setText(getResourceString("Background")); //$NON-NLS-1$
 	backItem.setImage(background.getThumbNail());
-	backItem.addListener(SWT.Selection, new Listener() {
-		@Override
-		public void handleEvent(Event event) {
-			if (event.widget == backItem) {
-				final ToolItem toolItem = (ToolItem) event.widget;
-				final ToolBar  toolBar = toolItem.getParent();
-				Rectangle toolItemBounds = toolItem.getBounds();
-				Point point = toolBar.toDisplay(new Point(toolItemBounds.x, toolItemBounds.y));
-				backMenu.setLocation(point.x, point.y + toolItemBounds.height);
-				backMenu.setVisible(true);
-			}
+	backItem.addListener(SWT.Selection, event -> {
+		if (event.widget == backItem) {
+			final ToolItem toolItem = (ToolItem) event.widget;
+			final ToolBar  toolBar = toolItem.getParent();
+			Rectangle toolItemBounds = toolItem.getBounds();
+			Point point = toolBar.toDisplay(new Point(toolItemBounds.x, toolItemBounds.y));
+			backMenu.setLocation(point.x, point.y + toolItemBounds.height);
+			backMenu.setVisible(true);
 		}
 	});
-	
+
 	// double buffer tool item
 	dbItem = new ToolItem(toolBar, SWT.CHECK);
 	dbItem.setText(getResourceString("DoubleBuffer")); //$NON-NLS-1$
 	dbItem.setImage(loadImage(display, "db.gif")); //$NON-NLS-1$
-	dbItem.addListener(SWT.Selection, new Listener() {
-		@Override
-		public void handleEvent(Event event) {
-			setDoubleBuffered(dbItem.getSelection());
-		}
-	});
+	dbItem.addListener(SWT.Selection, event -> setDoubleBuffered(dbItem.getSelection()));
 }
 
 /**
  * Creates and returns a thumbnail image.
- * 
+ *
  * @param device
  * 			a device
  * @param name
@@ -341,7 +328,7 @@ static Image createThumbnail(Device device, String name) {
 		GC gc = new GC(result);
 		Rectangle dest = result.getBounds();
 		gc.drawImage(image, src.x, src.y, src.width, src.height, dest.x, dest.y, dest.width, dest.height);
-		gc.dispose();				
+		gc.dispose();
 	}
 	if (result != null) {
 		image.dispose();
@@ -352,11 +339,11 @@ static Image createThumbnail(Device device, String name) {
 
 /**
  * Creates an image based on a gradient pattern made up of two colors.
- * 
+ *
  * @param device - The Device
  * @param color1 - The first color used to create the image
  * @param color2 - The second color used to create the image
- * 
+ *
  * */
 static Image createImage(Device device, Color color1, Color color2, int width, int height) {
 	Image image = new Image(device, width, height);
@@ -374,10 +361,10 @@ static Image createImage(Device device, Color color1, Color color2, int width, i
 
 /**
  * Creates an image based on the color provided and returns it.
- * 
+ *
  * @param device - The Device
  * @param color - The color used to create the image
- * 
+ *
  * */
 static Image createImage(Device device, Color color) {
 	Image image = new Image(device, 16, 16);
@@ -435,7 +422,7 @@ void createTabList(Composite parent) {
 }
 
 /**
- * Creates the multi-line text widget that will contain the tab description. 
+ * Creates the multi-line text widget that will contain the tab description.
  * */
 void createTabDesc(Composite parent) {
 	tabDesc = new Text(parent, SWT.MULTI | SWT.V_SCROLL | SWT.H_SCROLL | SWT.WRAP | SWT.BORDER);
@@ -500,7 +487,7 @@ public void dispose() {
 		}
 	}
 	resources = null;
-	
+
 	if (backMenu != null) {
 		backMenu.dispose();
 		backMenu = null;
@@ -535,7 +522,7 @@ static String getResourceString(String key) {
 		return key;
 	} catch (NullPointerException e) {
 		return "!" + key + "!"; //$NON-NLS-1$ //$NON-NLS-2$
-	}			
+	}
 }
 
 static Image loadImage (Device device, Class<GraphicsExample> clazz, String string) {
@@ -563,7 +550,7 @@ public Shell open(final Display display) {
 	Shell shell = new Shell(display);
 	shell.setText(getResourceString("GraphicsExample")); //$NON-NLS-1$
 	final GraphicsExample example = new GraphicsExample(shell);
-	shell.addListener(SWT.Close, event -> example.dispose());	
+	shell.addListener(SWT.Close, event -> example.dispose());
 	shell.open();
 	return shell;
 }
@@ -637,7 +624,7 @@ void startAnimationTimer() {
 			int timeout = TIMER;
 			GraphicsTab tab = getTab();
 			if (tab instanceof AnimatedGraphicsTab) {
-				AnimatedGraphicsTab animTab = (AnimatedGraphicsTab) tab;	
+				AnimatedGraphicsTab animTab = (AnimatedGraphicsTab) tab;
 				if (animate && animTab.getAnimation()) {
 					Rectangle rect = canvas.getClientArea();
 					animTab.next(rect.width, rect.height);
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/LineCapTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/LineCapTab.java
index af45d23..c296c82 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/LineCapTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/LineCapTab.java
@@ -61,27 +61,24 @@ public void dispose() {
 
 @Override
 public void createControlPanel(Composite parent) {
-	
+
 	Composite comp;
-		
+
 	// create color button
 	comp = new Composite(parent, SWT.NONE);
 	comp.setLayout(new GridLayout());
-	
+
 	ColorMenu cm = new ColorMenu();
 	cm.setPatternItems(example.checkAdvancedGraphics());
-	menu = cm.createMenu(parent.getParent(), new ColorListener() {
-		@Override
-		public void setColor(GraphicsBackground gb) {
-			foreground = gb;		
-			colorButton.setImage(gb.getThumbNail());
-			example.redraw();
-		}
+	menu = cm.createMenu(parent.getParent(), gb -> {
+		foreground = gb;
+		colorButton.setImage(gb.getThumbNail());
+		example.redraw();
 	});
 
 	// initialize the foreground to the 3rd item in the menu (red)
 	foreground = (GraphicsBackground)menu.getItem(2).getData();
-	
+
 	// color button
 	colorButton = new Button(comp, SWT.PUSH);
 	colorButton.setText(GraphicsExample
@@ -89,7 +86,7 @@ public void createControlPanel(Composite parent) {
 	colorButton.setImage(foreground.getThumbNail());
 	colorButton.addListener(SWT.Selection, event -> {
 		final Button button = (Button) event.widget;
-		final Composite parent1 = button.getParent(); 
+		final Composite parent1 = button.getParent();
 		Rectangle bounds = button.getBounds();
 		Point point = parent1.toDisplay(new Point(bounds.x, bounds.y));
 		menu.setLocation(point.x, point.y + bounds.height);
@@ -100,7 +97,7 @@ public void createControlPanel(Composite parent) {
 @Override
 public void paint(GC gc, int width, int height) {
 	Device device = gc.getDevice();
-	
+
 	// draw side lines
 	gc.setLineWidth(1);
 	gc.setLineStyle(SWT.LINE_DOT);
@@ -108,7 +105,7 @@ public void paint(GC gc, int width, int height) {
 	gc.drawLine(3*width/16, height/6, 3*width/16, 5*height/6);
 	gc.drawLine(13*width/16, height/6, 13*width/16, 5*height/6);
 	gc.setLineStyle(SWT.LINE_SOLID);
-	
+
 	// draw labels
 	Font font = new Font(device, getPlatformFont(), 20, SWT.NORMAL);
 	gc.setFont(font);
@@ -117,7 +114,7 @@ public void paint(GC gc, int width, int height) {
 	Point size = gc.stringExtent(text);
 	gc.drawString(text, (width-size.x)/2, 3*height/12, true);
 	text = GraphicsExample.getResourceString("Square"); //$NON-NLS-1$
-	size = gc.stringExtent(text);	
+	size = gc.stringExtent(text);
 	gc.drawString(text, (width-size.x)/2, 5*height/12, true);
 	text = GraphicsExample.getResourceString("Round"); //$NON-NLS-1$
 	size = gc.stringExtent(text);
@@ -131,7 +128,7 @@ public void paint(GC gc, int width, int height) {
 		pattern = new Pattern(device, foreground.getBgImage());
 		gc.setForegroundPattern(pattern);
 	}
-	
+
 	// draw lines with caps
 	gc.setLineWidth(20);
 	gc.setLineCap(SWT.CAP_FLAT);
@@ -140,8 +137,8 @@ public void paint(GC gc, int width, int height) {
 	gc.drawLine(3*width/16, 3*height/6, 13*width/16, 3*height/6);
 	gc.setLineCap(SWT.CAP_ROUND);
 	gc.drawLine(3*width/16, 4*height/6, 13*width/16, 4*height/6);
-	
-	if (pattern != null) pattern.dispose();	
+
+	if (pattern != null) pattern.dispose();
 }
 
 /**
@@ -149,9 +146,9 @@ public void paint(GC gc, int width, int height) {
  */
 static String getPlatformFont() {
 	if(SWT.getPlatform() == "win32") {
-		return "Arial";	
+		return "Arial";
 	} else if (SWT.getPlatform() == "gtk") {
-		return "Baekmuk Batang";		
+		return "Baekmuk Batang";
 	} else {
 		return "Verdana";
 	}
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/LineJoinTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/LineJoinTab.java
index d1f8cd1..01886f0 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/LineJoinTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/LineJoinTab.java
@@ -30,7 +30,7 @@ import org.eclipse.swt.widgets.Menu;
  * bevel, miter and round.
  */
 public class LineJoinTab extends GraphicsTab {
-	
+
 	private Combo joinCb;
 	private Button colorButton;
 	private GraphicsBackground shapeColor;
@@ -66,11 +66,11 @@ public void dispose() {
 
 @Override
 public void createControlPanel(Composite parent) {
-	
+
 	// create drop down combo for choosing clipping
 	Composite comp = new Composite(parent, SWT.NONE);
 	comp.setLayout(new GridLayout(2, false));
-	
+
 	new Label(comp, SWT.CENTER).setText(GraphicsExample
 				.getResourceString("LineJoin")); //$NON-NLS-1$
 	joinCb = new Combo(comp, SWT.DROP_DOWN);
@@ -82,33 +82,30 @@ public void createControlPanel(Composite parent) {
 			.getResourceString("round")); //$NON-NLS-1$
 	joinCb.select(1);
 	joinCb.addListener(SWT.Selection, event -> example.redraw());
-	
+
 	// color menu
 	ColorMenu cm = new ColorMenu();
 	cm.setPatternItems(example.checkAdvancedGraphics());
-	menu = cm.createMenu(parent.getParent(), new ColorListener() {
-		@Override
-		public void setColor(GraphicsBackground gb) {
-			shapeColor = gb;		
-			colorButton.setImage(gb.getThumbNail());
-			example.redraw();
-		}
+	menu = cm.createMenu(parent.getParent(), gb -> {
+		shapeColor = gb;
+		colorButton.setImage(gb.getThumbNail());
+		example.redraw();
 	});
 
 	// initialize the shape color to the 4th item in the menu (green)
 	shapeColor =(GraphicsBackground)menu.getItem(3).getData();
-	
+
 	// color button
 	comp = new Composite(parent, SWT.NONE);
 	comp.setLayout(new GridLayout(2, false));
-	
+
 	colorButton = new Button(comp, SWT.PUSH);
 	colorButton.setText(GraphicsExample
 			.getResourceString("Color")); //$NON-NLS-1$
 	colorButton.setImage(shapeColor.getThumbNail());
 	colorButton.addListener(SWT.Selection, event -> {
 		final Button button = (Button) event.widget;
-		final Composite parent1 = button.getParent(); 
+		final Composite parent1 = button.getParent();
 		Rectangle bounds = button.getBounds();
 		Point point = parent1.toDisplay(new Point(bounds.x, bounds.y));
 		menu.setLocation(point.x, point.y + bounds.height);
@@ -124,7 +121,7 @@ public void paint(GC gc, int width, int height) {
 
 	gc.setLineWidth(20);
 	gc.setLineJoin(joinValues[joinCb.getSelectionIndex()]);
-	
+
 	// set the foreground color or pattern
 	Pattern pattern = null;
 	if (shapeColor.getBgColor1() != null) {
@@ -133,7 +130,7 @@ public void paint(GC gc, int width, int height) {
 		pattern = new Pattern(device, shapeColor.getBgImage());
 		gc.setForegroundPattern(pattern);
 	}
-	
+
 	// draw the shape
 	Path path = new Path(device);
 	path.moveTo(width/2, 25);
@@ -148,7 +145,7 @@ public void paint(GC gc, int width, int height) {
 	path.close();
 	gc.drawPath(path);
 	path.dispose();
-	
+
 	if (pattern != null) pattern.dispose();
 }
 
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/LineStyleTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/LineStyleTab.java
index 2314589..f5242f5 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/LineStyleTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/LineStyleTab.java
@@ -65,12 +65,12 @@ public void dispose() {
 
 @Override
 public void createControlPanel(Composite parent) {
-	
+
 	Composite comp;
-	
+
 	comp = new Composite(parent, SWT.NONE);
 	comp.setLayout(new GridLayout(2, false));
-	
+
 	new Label(comp, SWT.CENTER).setText(GraphicsExample
 			.getResourceString("LineWidth")); //$NON-NLS-1$
 	lineWidthSpinner = new Spinner(comp, SWT.BORDER | SWT.WRAP);
@@ -78,25 +78,22 @@ public void createControlPanel(Composite parent) {
 	lineWidthSpinner.setMinimum(1);
 	lineWidthSpinner.setMaximum(30);
 	lineWidthSpinner.addListener(SWT.Selection, event -> example.redraw());
-		
+
 	ColorMenu cm = new ColorMenu();
 	cm.setPatternItems(example.checkAdvancedGraphics());
-	menu = cm.createMenu(parent.getParent(), new ColorListener() {
-		@Override
-		public void setColor(GraphicsBackground gb) {
-			lineColor = gb;		
-			colorButton.setImage(gb.getThumbNail());
-			example.redraw();
-		}
+	menu = cm.createMenu(parent.getParent(), gb -> {
+		lineColor = gb;
+		colorButton.setImage(gb.getThumbNail());
+		example.redraw();
 	});
 
 	// create color button
 	comp = new Composite(parent, SWT.NONE);
 	comp.setLayout(new GridLayout());
-	
+
 	// initialize the foreground to the 5th item in the menu (blue)
 	lineColor = (GraphicsBackground)menu.getItem(4).getData();
-	
+
 	// color button
 	colorButton = new Button(comp, SWT.PUSH);
 	colorButton.setText(GraphicsExample
@@ -104,7 +101,7 @@ public void createControlPanel(Composite parent) {
 	colorButton.setImage(lineColor.getThumbNail());
 	colorButton.addListener(SWT.Selection, event -> {
 		final Button button = (Button) event.widget;
-		final Composite parent1 = button.getParent(); 
+		final Composite parent1 = button.getParent();
 		Rectangle bounds = button.getBounds();
 		Point point = parent1.toDisplay(new Point(bounds.x, bounds.y));
 		menu.setLocation(point.x, point.y + bounds.height);
@@ -123,10 +120,10 @@ public void paint(GC gc, int width, int height) {
 		pattern = new Pattern(device, lineColor.getBgImage());
 		gc.setForegroundPattern(pattern);
 	}
-	
+
 	// set line width
 	gc.setLineWidth(lineWidthSpinner.getSelection());
-	
+
 	// draw lines with caps
 	gc.drawLine(3*width/16, 1*height/6, 13*width/16, 1*height/6);
 	gc.setLineStyle(SWT.LINE_DASH);
@@ -137,18 +134,18 @@ public void paint(GC gc, int width, int height) {
 	gc.drawLine(3*width/16, 4*height/6, 13*width/16, 4*height/6);
 	gc.setLineStyle(SWT.LINE_DASHDOTDOT);
 	gc.drawLine(3*width/16, 5*height/6, 13*width/16, 5*height/6);
-	
+
 	// draw labels
 	Font font = new Font(device, getPlatformFont(), 20, SWT.NORMAL);
 	gc.setFont(font);
 
 	gc.setForeground(device.getSystemColor(SWT.COLOR_BLACK));
-	
+
 	String text = GraphicsExample.getResourceString("Solid"); //$NON-NLS-1$
 	Point size = gc.stringExtent(text);
 	gc.drawString(text, (width-size.x)/2, 1*height/12, true);
 	text = GraphicsExample.getResourceString("Dash"); //$NON-NLS-1$
-	size = gc.stringExtent(text);	
+	size = gc.stringExtent(text);
 	gc.drawString(text, (width-size.x)/2, 3*height/12, true);
 	text = GraphicsExample.getResourceString("Dot"); //$NON-NLS-1$
 	size = gc.stringExtent(text);
@@ -167,9 +164,9 @@ public void paint(GC gc, int width, int height) {
  */
 static String getPlatformFont() {
 	if(SWT.getPlatform() == "win32") {
-		return "Arial";	
+		return "Arial";
 	} else if (SWT.getPlatform() == "gtk") {
-		return "Baekmuk Batang";		
+		return "Baekmuk Batang";
 	} else {
 		return "Verdana";
 	}
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/PathClippingAnimTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/PathClippingAnimTab.java
index cb9670f..9193f69 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/PathClippingAnimTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/PathClippingAnimTab.java
@@ -51,7 +51,7 @@ public class PathClippingAnimTab extends AnimatedGraphicsTab {
 	public String getText() {
 		return GraphicsExample.getResourceString("AnimPathClipping"); //$NON-NLS-1$
 	}
-	
+
 	@Override
 	public String getDescription() {
 		return GraphicsExample.getResourceString("AnimPathClippingDesc"); //$NON-NLS-1$
@@ -75,13 +75,10 @@ public class PathClippingAnimTab extends AnimatedGraphicsTab {
 		// color menu
 		ColorMenu cm = new ColorMenu();
 		cm.setPatternItems(example.checkAdvancedGraphics());
-		menu = cm.createMenu(parent.getParent(), new ColorListener() {
-			@Override
-			public void setColor(GraphicsBackground gb) {
-				background = gb;
-				colorButton.setImage(gb.getThumbNail());
-				example.redraw();
-			}
+		menu = cm.createMenu(parent.getParent(), gb -> {
+			background = gb;
+			colorButton.setImage(gb.getThumbNail());
+			example.redraw();
 		});
 
 		// initialize the background to the 5th item in the menu (blue)
@@ -132,56 +129,56 @@ public class PathClippingAnimTab extends AnimatedGraphicsTab {
 	public void paint(GC gc, int width, int height) {
 		if (!example.checkAdvancedGraphics()) return;
 		Device device = gc.getDevice();
-		
+
 		// top triangle
 		Path path = new Path(device);
 		path.moveTo(width/2, 0);
 		path.lineTo(width/2+100, 173);
 		path.lineTo(width/2-100, 173);
 		path.lineTo(width/2, 0);
-		
+
 		// bottom triangle
 		Path path2 = new Path(device);
 		path2.moveTo(width/2, height);
 		path2.lineTo(width/2+100, height-173);
 		path2.lineTo(width/2-100, height-173);
 		path2.lineTo(width/2, height);
-		
+
 		// left triangle
 		Path path3 = new Path(device);
 		path3.moveTo(0, height/2);
 		path3.lineTo(173, height/2-100);
 		path3.lineTo(173, height/2+100);
 		path3.lineTo(0, height/2);
-		
+
 		// right triangle
 		Path path4 = new Path(device);
 		path4.moveTo(width, height/2);
 		path4.lineTo(width-173, height/2-100);
 		path4.lineTo(width-173, height/2+100);
 		path4.lineTo(width, height/2);
-		
+
 		// circle
 		Path path5 = new Path(device);
 		path5.moveTo((width-200)/2, (height-200)/2);
 		path5.addArc((width-200)/2, (height-200)/2, 200, 200, 0, 360);
-		
+
 		// top rectangle
 		Path path6 = new Path(device);
 		path6.addRectangle((width-40)/2, 175, 40, ((height-200)/2)-177);
-		
+
 		// bottom rectangle
 		Path path7 = new Path(device);
 		path7.addRectangle((width-40)/2, ((height-200)/2)+202, 40, (height-175)-(((height-200)/2)+202));
-		
+
 		// left rectangle
 		Path path8 = new Path(device);
 		path8.addRectangle(175, (height-40)/2, ((width-200)/2)-177, 40);
-		
+
 		// right rectangle
 		Path path9 = new Path(device);
 		path9.addRectangle((width-200)/2+202, (height-40)/2, (width-175)-((width-200)/2+202), 40);
-		
+
 		path.addPath(path2);
 		path.addPath(path3);
 		path.addPath(path4);
@@ -203,10 +200,10 @@ public class PathClippingAnimTab extends AnimatedGraphicsTab {
 		gc.setLineWidth(2);
 		gc.fillRectangle((width-rectWidth)/2, (height-rectHeight)/2, rectWidth, rectHeight);
 		gc.drawPath(path);
-		
+
 		if (pattern != null)
 			pattern.dispose();
-		
+
 		path9.dispose();
 		path8.dispose();
 		path7.dispose();
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/PathClippingTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/PathClippingTab.java
index 15c4458..3db44e2 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/PathClippingTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/PathClippingTab.java
@@ -31,7 +31,7 @@ import org.eclipse.swt.widgets.Menu;
  * applying one.
  */
 public class PathClippingTab extends GraphicsTab {
-	
+
 	private Combo clippingCb;
 	private Button colorButton;
 	private GraphicsBackground background;
@@ -64,16 +64,16 @@ public void dispose() {
 	}
 }
 
-/** 
+/**
  * Creates the widgets used to control the drawing.
  */
 @Override
-public void createControlPanel(Composite parent) {	
-	
+public void createControlPanel(Composite parent) {
+
 	// create drop down combo for choosing clipping
 	Composite comp = new Composite(parent, SWT.NONE);
 	comp.setLayout(new GridLayout(2, false));
-	
+
 	new Label(comp, SWT.CENTER).setText(GraphicsExample
 				.getResourceString("Clipping")); //$NON-NLS-1$
 	clippingCb = new Combo(comp, SWT.DROP_DOWN);
@@ -86,33 +86,30 @@ public void createControlPanel(Composite parent) {
 	clippingCb.add(GraphicsExample.getResourceString("Default")); //$NON-NLS-1$
 	clippingCb.select(0);
 	clippingCb.addListener(SWT.Selection, event -> example.redraw());
-	
+
 	// color menu
 	ColorMenu cm = new ColorMenu();
 	cm.setPatternItems(example.checkAdvancedGraphics());
-	menu = cm.createMenu(parent.getParent(), new ColorListener() {
-		@Override
-		public void setColor(GraphicsBackground gb) {
-			background = gb;		
-			colorButton.setImage(gb.getThumbNail());
-			example.redraw();
-		}
+	menu = cm.createMenu(parent.getParent(), gb -> {
+		background = gb;
+		colorButton.setImage(gb.getThumbNail());
+		example.redraw();
 	});
 
 	// initialize the background to the 5th item in the menu (blue)
 	background =(GraphicsBackground)menu.getItem(4).getData();
-	
+
 	// color button
 	comp = new Composite(parent, SWT.NONE);
 	comp.setLayout(new GridLayout(2, false));
-	
+
 	colorButton = new Button(comp, SWT.PUSH);
 	colorButton.setText(GraphicsExample
 			.getResourceString("Color")); //$NON-NLS-1$
 	colorButton.setImage(background.getThumbNail());
 	colorButton.addListener(SWT.Selection, event -> {
 		final Button button = (Button) event.widget;
-		final Composite parent1 = button.getParent(); 
+		final Composite parent1 = button.getParent();
 		Rectangle bounds = button.getBounds();
 		Point point = parent1.toDisplay(new Point(bounds.x, bounds.y));
 		menu.setLocation(point.x, point.y + bounds.height);
@@ -126,7 +123,7 @@ public void paint(GC gc, int width, int height) {
 
 	int clipping = clippingCb.getSelectionIndex();
 	switch (clipping) {
-	
+
 	case 0:		// circles
 		Path path = new Path(device);
 		path.addArc((width-width/5)/2, (height-height/5)/2, width/5, height/5, 0, 360);
@@ -184,10 +181,10 @@ public void paint(GC gc, int width, int height) {
 		path.lineTo(0, height/3);
 		path.lineTo(3*width/8, height/3);
 		path.lineTo(width/2, 0);
-		
+
 		Path ovalPath = new Path(device);
 		ovalPath.addArc(90, 90, width-180, height-180, 0, 360);
-		
+
 		path.addPath(ovalPath);
 		gc.setClipping(path);
 		ovalPath.dispose();
@@ -200,37 +197,37 @@ public void paint(GC gc, int width, int height) {
 		path.lineTo(width/4, height/2);
 		path.lineTo(0, height/2);
 		path.lineTo(width/4, 0);
-		
+
 		Path path2 = new Path(device);
 		path2.lineTo(width/2, 0);
 		path2.lineTo(width/4, height/2);
 		path2.lineTo(3*width/4, height/2);
 		path2.lineTo(width/2, 0);
-		
+
 		Path path3 = new Path(device);
 		path3.lineTo(3*width/4, 0);
 		path3.lineTo(3*width/4, height/2);
 		path3.lineTo(width, height/2);
 		path3.lineTo(3*width/4, 0);
-		
+
 		Path path4 = new Path(device);
 		path4.lineTo(0, height);
 		path4.lineTo(width/4, height/2);
 		path4.lineTo(width/2, height);
 		path4.lineTo(0, height);
-		
+
 		Path path5 = new Path(device);
 		path5.lineTo(width/2, height);
 		path5.lineTo(3*width/4, height/2);
 		path5.lineTo(width, height);
 		path5.lineTo(width/2, height);
-		
+
 		path.addPath(path2);
 		path.addPath(path3);
 		path.addPath(path4);
 		path.addPath(path5);
 		gc.setClipping(path);
-		
+
 		path5.dispose();
 		path4.dispose();
 		path3.dispose();
@@ -241,7 +238,7 @@ public void paint(GC gc, int width, int height) {
 		gc.setClipping(0, 0, width, height);
 		break;
 	}
-	
+
 	Pattern pattern = null;
 	if (background.getBgColor1() != null) {
 		gc.setBackground(background.getBgColor1());
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/PathTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/PathTab.java
index 3ce8f00..d2069b3 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/PathTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/PathTab.java
@@ -22,8 +22,6 @@ import org.eclipse.swt.graphics.Transform;
 import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.Button;
 import org.eclipse.swt.widgets.Composite;
-import org.eclipse.swt.widgets.Event;
-import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.Menu;
 
 /**
@@ -65,66 +63,60 @@ public void dispose() {
 
 @Override
 public void createControlPanel(Composite parent) {
-	
+
 	Composite comp;
 
 	// create draw button
 	comp = new Composite(parent, SWT.NONE);
 	comp.setLayout(new GridLayout());
-	
+
 	drawButton = new Button(comp, SWT.TOGGLE);
 	drawButton.setText(GraphicsExample.getResourceString("DrawPath")); //$NON-NLS-1$
 	drawButton.addListener(SWT.Selection, event -> example.redraw());
 	drawButton.setSelection(true);
-	
+
 	// create fill button
 	comp = new Composite(parent, SWT.NONE);
 	comp.setLayout(new GridLayout());
-	
+
 	fillButton = new Button(comp, SWT.TOGGLE);
 	fillButton.setText(GraphicsExample.getResourceString("FillPath")); //$NON-NLS-1$
 	fillButton.addListener(SWT.Selection, event -> example.redraw());
-	
+
 	// create close button
 	comp = new Composite(parent, SWT.NONE);
 	comp.setLayout(new GridLayout());
-	
+
 	closeButton = new Button(comp, SWT.TOGGLE);
 	closeButton.setText(GraphicsExample.getResourceString("ClosePath")); //$NON-NLS-1$
 	closeButton.addListener(SWT.Selection, event -> example.redraw());
-		
+
 	// create color button
 	comp = new Composite(parent, SWT.NONE);
 	comp.setLayout(new GridLayout());
-	
+
 	ColorMenu cm = new ColorMenu();
 	cm.setPatternItems(example.checkAdvancedGraphics());
-	menu = cm.createMenu(parent.getParent(), new ColorListener() {
-		@Override
-		public void setColor(GraphicsBackground gb) {
-			fillColor = gb;		
-			colorButton.setImage(gb.getThumbNail());
-			example.redraw();
-		}
+	menu = cm.createMenu(parent.getParent(), gb -> {
+		fillColor = gb;
+		colorButton.setImage(gb.getThumbNail());
+		example.redraw();
 	});
 
 	// initialize the foreground to the 5th item in the menu (green)
 	fillColor = (GraphicsBackground)menu.getItem(3).getData();
-	
+
 	// color button
 	colorButton = new Button(comp, SWT.PUSH);
 	colorButton.setText(GraphicsExample.getResourceString("FillColor")); //$NON-NLS-1$
 	colorButton.setImage(fillColor.getThumbNail());
-	colorButton.addListener(SWT.Selection, new Listener() { 
-		@Override
-		public void handleEvent(Event event) {
-			final Button button = (Button) event.widget;
-			final Composite parent = button.getParent(); 
-			Rectangle bounds = button.getBounds();
-			Point point = parent.toDisplay(new Point(bounds.x, bounds.y));
-			menu.setLocation(point.x, point.y + bounds.height);
-			menu.setVisible(true);
-		}
+	colorButton.addListener(SWT.Selection, event -> {
+		final Button button = (Button) event.widget;
+		final Composite parent1 = button.getParent();
+		Rectangle bounds = button.getBounds();
+		Point point = parent1.toDisplay(new Point(bounds.x, bounds.y));
+		menu.setLocation(point.x, point.y + bounds.height);
+		menu.setVisible(true);
 	});
 }
 
@@ -143,7 +135,7 @@ public void paint(GC gc, int width, int height) {
 
 	gc.setLineWidth(5);
 	gc.setForeground(device.getSystemColor(SWT.COLOR_BLACK));
-	
+
 	// arc
 	Path path = new Path(device);
 	path.addArc((width-250)/2, (height-400)/2, 500, 400, 90, 180);
@@ -151,7 +143,7 @@ public void paint(GC gc, int width, int height) {
 	if (fillButton.getSelection()) gc.fillPath(path);
 	if (drawButton.getSelection()) gc.drawPath(path);
 	path.dispose();
-	
+
 	// shape on left
 	Transform transform = new Transform(device);
 	transform.translate((width-250)/4, height/2-150);
@@ -164,7 +156,7 @@ public void paint(GC gc, int width, int height) {
 	if (drawButton.getSelection()) gc.drawPath(path);
 	path.dispose();
 	gc.setTransform(null);
-	
+
 	// shape on right
 	path = new Path(device);
 	path.moveTo(3*(width-250)/4 - 25 + 250, height/2);
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/RegionClippingTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/RegionClippingTab.java
index 1e8a3dd..df271f3 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/RegionClippingTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/RegionClippingTab.java
@@ -29,7 +29,7 @@ import org.eclipse.swt.widgets.Menu;
  * applying one.
  */
 public class RegionClippingTab extends GraphicsTab {
-	
+
 	private Combo clippingCb;
 	private Button colorButton1, colorButton2;
 	private Menu menu1, menu2;
@@ -66,7 +66,7 @@ public void dispose() {
 	}
 }
 
-/** 
+/**
  * Creates the widgets used to control the drawing.
  */
 @Override
@@ -74,7 +74,7 @@ public void createControlPanel(Composite parent) {
 	// create drop down combo for choosing clipping
 	Composite comp = new Composite(parent, SWT.NONE);
 	comp.setLayout(new GridLayout(2, false));
-	
+
 	new Label(comp, SWT.CENTER).setText(GraphicsExample
 			.getResourceString("Clipping")); //$NON-NLS-1$
 	clippingCb = new Combo(comp, SWT.DROP_DOWN);
@@ -88,39 +88,33 @@ public void createControlPanel(Composite parent) {
 
 	// color menu
 	ColorMenu cm = new ColorMenu();
-	menu1 = cm.createMenu(parent.getParent(), new ColorListener() {
-		@Override
-		public void setColor(GraphicsBackground gb) {
-			colorGB1 = gb;		
-			colorButton1.setImage(gb.getThumbNail());
-			example.redraw();
-		}
+	menu1 = cm.createMenu(parent.getParent(), gb -> {
+		colorGB1 = gb;
+		colorButton1.setImage(gb.getThumbNail());
+		example.redraw();
 	});
-	menu2 = cm.createMenu(parent.getParent(), new ColorListener() {
-		@Override
-		public void setColor(GraphicsBackground gb) {
-			colorGB2 = gb;		
-			colorButton2.setImage(gb.getThumbNail());
-			example.redraw();
-		}
+	menu2 = cm.createMenu(parent.getParent(), gb -> {
+		colorGB2 = gb;
+		colorButton2.setImage(gb.getThumbNail());
+		example.redraw();
 	});
-	
+
 	// initialize the color to blue
 	colorGB1 = (GraphicsBackground)menu1.getItem(4).getData();
 	// initialize the color to red
 	colorGB2 = (GraphicsBackground)menu2.getItem(2).getData();
-	
+
 	// color button 1
 	comp = new Composite(parent, SWT.NONE);
 	comp.setLayout(new GridLayout(2, false));
-	
+
 	colorButton1 = new Button(comp, SWT.PUSH);
 	colorButton1.setText(GraphicsExample
 			.getResourceString("Color1")); //$NON-NLS-1$
 	colorButton1.setImage(colorGB1.getThumbNail());
 	colorButton1.addListener(SWT.Selection, event -> {
 		final Button button = (Button) event.widget;
-		final Composite parent1 = button.getParent(); 
+		final Composite parent1 = button.getParent();
 		Rectangle bounds = button.getBounds();
 		Point point = parent1.toDisplay(new Point(bounds.x, bounds.y));
 		menu1.setLocation(point.x, point.y + bounds.height);
@@ -130,14 +124,14 @@ public void createControlPanel(Composite parent) {
 	// color button 2
 	comp = new Composite(parent, SWT.NONE);
 	comp.setLayout(new GridLayout(2, false));
-	
+
 	colorButton2 = new Button(comp, SWT.PUSH);
 	colorButton2.setText(GraphicsExample
 			.getResourceString("Color2")); //$NON-NLS-1$
 	colorButton2.setImage(colorGB2.getThumbNail());
 	colorButton2.addListener(SWT.Selection, event -> {
 		final Button button = (Button) event.widget;
-		final Composite parent1 = button.getParent(); 
+		final Composite parent1 = button.getParent();
 		Rectangle bounds = button.getBounds();
 		Point point = parent1.toDisplay(new Point(bounds.x, bounds.y));
 		menu2.setLocation(point.x, point.y + bounds.height);
@@ -149,7 +143,7 @@ public void createControlPanel(Composite parent) {
 public void paint(GC gc, int width, int height) {
 	if (!example.checkAdvancedGraphics()) return;
 	Device device = gc.getDevice();
-	
+
 	// array of coordinate points of polygon 1 (region 1)
 	int [] polygon1 = new int [] {10, height/2, 9*width/16, 10, 9*width/16, height-10};
 	Region region1 = new Region(device);
@@ -170,11 +164,11 @@ public void paint(GC gc, int width, int height) {
 	};
 	Region region2 = new Region(device);
 	region2.add(polygon2);
-	
+
 	gc.setAlpha(127);
-	
+
 	int clippingIndex = clippingCb.getSelectionIndex();
-	
+
 	switch (clippingIndex) {
 	case 0:
 		// region 1
@@ -189,7 +183,7 @@ public void paint(GC gc, int width, int height) {
 		gc.fillPolygon(polygon2);
 		break;
 	case 2:
-		// add		
+		// add
 		region1.add(region2);
 		break;
 	case 3:
@@ -199,19 +193,19 @@ public void paint(GC gc, int width, int height) {
 	case 4:
 		// intersect
 		region1.intersect(region2);
-		break;		
+		break;
 	}
-	
+
 	if (clippingIndex > 1) {
 		gc.setClipping(region1);
-		
+
 		gc.setBackground(colorGB1.getBgColor1());
 		gc.fillPolygon(polygon1);
-		
+
 		gc.setBackground(colorGB2.getBgColor1());
 	    gc.fillPolygon(polygon2);
 	}
-	
+
 	region1.dispose();
 	region2.dispose();
     }
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/SpiralTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/SpiralTab.java
index 484c2f1..5eabf85 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/SpiralTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/SpiralTab.java
@@ -21,9 +21,7 @@ import org.eclipse.swt.graphics.Transform;
 import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.Button;
 import org.eclipse.swt.widgets.Composite;
-import org.eclipse.swt.widgets.Event;
 import org.eclipse.swt.widgets.Label;
-import org.eclipse.swt.widgets.Listener;
 import org.eclipse.swt.widgets.Menu;
 import org.eclipse.swt.widgets.Spinner;
 
@@ -31,13 +29,13 @@ import org.eclipse.swt.widgets.Spinner;
  * This tab presents a spiral consisting of the number of petals specified.
  * */
 public class SpiralTab extends AnimatedGraphicsTab {
-	
+
 	int angle;					// angle by which to rotate the petals
 	Spinner petalSpinner;		// spinner to control number of petals
 	Button colorButton;
 	GraphicsBackground foreground;
 	Menu menu;
-	
+
 public SpiralTab(GraphicsExample example) {
 	super(example);
 	angle = -90;
@@ -54,17 +52,17 @@ public void dispose() {
  * This method creates a spinner for specifying the number of petals. The call to the
  * createControlPanel method in the super class create the controls that are
  * defined in the super class.
- * 
- * @param parent The parent composite 
+ *
+ * @param parent The parent composite
  */
 @Override
 public void createControlPanel(Composite parent) {
 	super.createControlPanel(parent);
-		
+
 	// create spinner number of petals
 	Composite comp = new Composite(parent, SWT.NONE);
 	comp.setLayout(new GridLayout(2, false));
-	
+
 	new Label(comp, SWT.CENTER).setText(GraphicsExample
 			.getResourceString("Petals")); //$NON-NLS-1$
 	petalSpinner = new Spinner(comp, SWT.BORDER | SWT.WRAP);
@@ -72,40 +70,34 @@ public void createControlPanel(Composite parent) {
 	petalSpinner.setMinimum(3);
 	petalSpinner.setMaximum(20);
 	petalSpinner.addListener(SWT.Selection, event -> example.redraw());
-	
+
 	// create color button
 	comp = new Composite(parent, SWT.NONE);
 	comp.setLayout(new GridLayout());
-	
+
 	ColorMenu cm = new ColorMenu();
 	cm.setPatternItems(example.checkAdvancedGraphics());
-	menu = cm.createMenu(parent.getParent(), new ColorListener() {
-		@Override
-		public void setColor(GraphicsBackground gb) {
-			foreground = gb;		
-			colorButton.setImage(gb.getThumbNail());
-			example.redraw();
-		}
+	menu = cm.createMenu(parent.getParent(), gb -> {
+		foreground = gb;
+		colorButton.setImage(gb.getThumbNail());
+		example.redraw();
 	});
 
 	// initialize the foreground to the 2nd item in the menu
 	foreground = (GraphicsBackground)menu.getItem(1).getData();
-	
+
 	// color button
 	colorButton = new Button(comp, SWT.PUSH);
 	colorButton.setText(GraphicsExample
 			.getResourceString("Color")); //$NON-NLS-1$
 	colorButton.setImage(foreground.getThumbNail());
-	colorButton.addListener(SWT.Selection, new Listener() { 
-		@Override
-		public void handleEvent(Event event) {
-			final Button button = (Button) event.widget;
-			final Composite parent = button.getParent(); 
-			Rectangle bounds = button.getBounds();
-			Point point = parent.toDisplay(new Point(bounds.x, bounds.y));
-			menu.setLocation(point.x, point.y + bounds.height);
-			menu.setVisible(true);
-		}
+	colorButton.addListener(SWT.Selection, event -> {
+		final Button button = (Button) event.widget;
+		final Composite parent1 = button.getParent();
+		Rectangle bounds = button.getBounds();
+		Point point = parent1.toDisplay(new Point(bounds.x, bounds.y));
+		menu.setLocation(point.x, point.y + bounds.height);
+		menu.setVisible(true);
 	});
 }
 
@@ -129,7 +121,7 @@ public String getDescription() {
  */
 @Override
 public int getInitialAnimationTime() {
-	return 150;	
+	return 150;
 }
 
 /* (non-Javadoc)
@@ -150,12 +142,12 @@ public void next(int width, int height) {
 public void paint(GC gc, int width, int height) {
 	if (!example.checkAdvancedGraphics()) return;
 	Device device = gc.getDevice();
-	
+
 	// set line attributes
 	gc.setLineWidth(20);
 	gc.setLineCap(SWT.CAP_ROUND);	// round line ends
 	gc.setAntialias(SWT.ON);	// smooth jagged edges
-	
+
 	Pattern pattern = null;
 	if (foreground.getBgColor1() != null) {
 		gc.setForeground(foreground.getBgColor1());
@@ -175,7 +167,7 @@ public void paint(GC gc, int width, int height) {
 		gc.drawArc(0, 0, width/3, height/6, 0, 180);
 		transform.dispose();
 	}
-	
+
 	if (pattern != null) pattern.dispose();
 }
 }
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/TextAntialiasTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/TextAntialiasTab.java
index 8eb9e7f..394ac0b 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/TextAntialiasTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/TextAntialiasTab.java
@@ -33,13 +33,13 @@ public class TextAntialiasTab extends GraphicsTab {
 
 	Combo aliasCombo;
 	static int[] aliasValues = { SWT.OFF, SWT.DEFAULT, SWT.ON };
-	
+
 	Button colorButton;
 	Menu menu;
 	GraphicsBackground textColor;
 	String text = GraphicsExample.getResourceString("SWT");
 
-	
+
 public TextAntialiasTab(GraphicsExample example) {
 	super(example);
 }
@@ -51,7 +51,7 @@ public String getCategory() {
 
 @Override
 public String getText() {
-	return GraphicsExample.getResourceString("Text"); //$NON-NLS-1$ 
+	return GraphicsExample.getResourceString("Text"); //$NON-NLS-1$
 }
 
 @Override
@@ -71,7 +71,7 @@ public void dispose() {
 public void createControlPanel(Composite parent) {
 
 	Composite comp;
-	
+
 	// create drop down combo for antialiasing
 	comp = new Composite(parent, SWT.NONE);
 	comp.setLayout(new GridLayout(2, false));
@@ -83,32 +83,29 @@ public void createControlPanel(Composite parent) {
 	aliasCombo.add("ON");
 	aliasCombo.select(0);
 	aliasCombo.addListener(SWT.Selection, event -> example.redraw());
-		
+
 	ColorMenu cm = new ColorMenu();
 	cm.setColorItems(true);
-	menu = cm.createMenu(parent.getParent(), new ColorListener() {
-		@Override
-		public void setColor(GraphicsBackground gb) {
-			textColor = gb;
-			colorButton.setImage(gb.getThumbNail());
-			example.redraw();
-		}
+	menu = cm.createMenu(parent.getParent(), gb -> {
+		textColor = gb;
+		colorButton.setImage(gb.getThumbNail());
+		example.redraw();
 	});
-	
+
 	// create color button
 	comp = new Composite(parent, SWT.NONE);
 	comp.setLayout(new GridLayout());
-	
+
 	// initialize the color to black
 	textColor = (GraphicsBackground)menu.getItem(1).getData();
-	
+
 	colorButton = new Button(comp, SWT.PUSH);
 	colorButton.setText(GraphicsExample.getResourceString("Color")); //$NON-NLS-1$
 	colorButton.setImage(textColor.getThumbNail());
-	
+
 	colorButton.addListener(SWT.Selection, event -> {
 		final Button button = (Button) event.widget;
-		final Composite parent1 = button.getParent(); 
+		final Composite parent1 = button.getParent();
 		Rectangle bounds = button.getBounds();
 		Point point = parent1.toDisplay(new Point(bounds.x, bounds.y));
 		menu.setLocation(point.x, point.y + bounds.height);
@@ -120,7 +117,7 @@ public void createControlPanel(Composite parent) {
 public void paint(GC gc, int width, int height) {
 	if (!example.checkAdvancedGraphics()) return;
 	Device device = gc.getDevice();
-	
+
 	if (textColor != null && textColor.getBgColor1() != null)
 		gc.setForeground(textColor.getBgColor1());
 
@@ -132,42 +129,42 @@ public void paint(GC gc, int width, int height) {
 	Point size = gc.stringExtent(text);
 	gc.drawString(text, width/4 - size.x/2, height/4 - size.y/2, true);
 	font.dispose();
-	
+
 	// column 1, row 2
 	font = new Font(device, getPlatformFontFace(1), 100, SWT.NORMAL);
 	gc.setFont(font);
 	size = gc.stringExtent(text);
 	gc.drawString(text, width/4 - size.x/2, 3*height/4 - size.y/2, true);
 	font.dispose();
-	
+
 	// column 2, row 1
 	font = new Font(device, getPlatformFontFace(2), 50, SWT.NORMAL);
 	gc.setFont(font);
 	size = gc.stringExtent(text);
 	gc.drawString(text, (width-size.x)/2, 0, true);
 	font.dispose();
-	
+
 	// column 2, row 2
 	font = new Font(device, getPlatformFontFace(3), 100, SWT.ITALIC);
 	gc.setFont(font);
 	size = gc.stringExtent(text);
 	gc.drawString(text, (width-size.x)/2, (height-size.y)/2, true);
 	font.dispose();
-	
+
 	// column 2, row 3
 	font = new Font(device, getPlatformFontFace(4), 50, SWT.NORMAL);
 	gc.setFont(font);
 	size = gc.stringExtent(text);
 	gc.drawString(text, (width-size.x)/2, height-size.y, true);
 	font.dispose();
-	
+
 	// column 3, row 1
 	font = new Font(device, getPlatformFontFace(5), 100, SWT.NORMAL);
 	gc.setFont(font);
 	size = gc.stringExtent(text);
 	gc.drawString(text, 3*width/4 - size.x/2, height/4 - size.y/2, true);
 	font.dispose();
-	
+
 	// column 3, row 2
 	font = new Font(device, getPlatformFontFace(6), 100, SWT.NORMAL);
 	gc.setFont(font);
@@ -178,13 +175,13 @@ public void paint(GC gc, int width, int height) {
 
 /**
  * Returns the name of a valid font for the host platform.
- * 
+ *
  * @param index
  *            index is used to determine the appropriate font face
  */
 static String getPlatformFontFace(int index) {
 	if(SWT.getPlatform() == "win32") {
-		return new String [] {"Bookman Old Style", "Century Gothic", "Comic Sans MS", "Impact", "Garamond", "Lucida Console", "Monotype Corsiva"} [index];	
+		return new String [] {"Bookman Old Style", "Century Gothic", "Comic Sans MS", "Impact", "Garamond", "Lucida Console", "Monotype Corsiva"} [index];
 	} else if (SWT.getPlatform() == "gtk") {
 		return new String [] {"Luxi Mono", "KacstTitleL", "Baekmuk Batang", "Baekmuk Headline", "KacstFarsi", "Baekmuk Gulim", "URW Chancery L"} [index];
 	} else {
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/helloworld/HelloWorld5.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/helloworld/HelloWorld5.java
index e879a6d..95ef221 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/helloworld/HelloWorld5.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/helloworld/HelloWorld5.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2003 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -14,10 +14,6 @@ package org.eclipse.swt.examples.helloworld;
 
 import java.util.ResourceBundle;
 
-import org.eclipse.swt.events.DisposeEvent;
-import org.eclipse.swt.events.DisposeListener;
-import org.eclipse.swt.events.PaintEvent;
-import org.eclipse.swt.events.PaintListener;
 import org.eclipse.swt.graphics.Color;
 import org.eclipse.swt.graphics.GC;
 import org.eclipse.swt.graphics.Rectangle;
@@ -43,22 +39,14 @@ public static void main (String [] args) {
 public Shell open (Display display) {
 	final Color red = new Color(display, 0xFF, 0, 0);
 	final Shell shell = new Shell (display);
-	shell.addPaintListener(new PaintListener () {
-		@Override
-		public void paintControl(PaintEvent event){
-			GC gc = event.gc;
-			gc.setForeground(red);
-			Rectangle rect = shell.getClientArea();
-			gc.drawRectangle(rect.x + 10, rect.y + 10, rect.width - 20, rect.height - 20);
-			gc.drawString(resHello.getString("Hello_world"), rect.x + 20, rect.y + 20);
-		}
-	});
-	shell.addDisposeListener (new DisposeListener () {
-		@Override
-		public void widgetDisposed (DisposeEvent e) {
-			red.dispose();
-		}
+	shell.addPaintListener(event -> {
+		GC gc = event.gc;
+		gc.setForeground(red);
+		Rectangle rect = shell.getClientArea();
+		gc.drawRectangle(rect.x + 10, rect.y + 10, rect.width - 20, rect.height - 20);
+		gc.drawString(resHello.getString("Hello_world"), rect.x + 20, rect.y + 20);
 	});
+	shell.addDisposeListener (e -> red.dispose());
 	shell.open ();
 	return shell;
 }
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/hoverhelp/HoverHelp.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/hoverhelp/HoverHelp.java
index 075a1f4..29ec357 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/hoverhelp/HoverHelp.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/hoverhelp/HoverHelp.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2005 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -18,10 +18,6 @@ import java.util.MissingResourceException;
 import java.util.ResourceBundle;
 
 import org.eclipse.swt.SWT;
-import org.eclipse.swt.events.DisposeEvent;
-import org.eclipse.swt.events.DisposeListener;
-import org.eclipse.swt.events.HelpEvent;
-import org.eclipse.swt.events.HelpListener;
 import org.eclipse.swt.events.MouseAdapter;
 import org.eclipse.swt.events.MouseEvent;
 import org.eclipse.swt.events.MouseTrackAdapter;
@@ -52,7 +48,7 @@ import org.eclipse.swt.widgets.Widget;
  */
 public class HoverHelp {
 	private static ResourceBundle resourceBundle = ResourceBundle.getBundle("examples_hoverhelp");
-	
+
 	static final int
 		hhiInformation = 0,
 		hhiWarning = 1;
@@ -76,17 +72,17 @@ public class HoverHelp {
 		display.dispose();
 
 	}
-	
+
 	/**
 	 * Opens the main program.
 	 */
-	public Shell open(Display display) {		
+	public Shell open(Display display) {
 		// Load the images
 		Class<HoverHelp> clazz = HoverHelp.class;
 		try {
 			if (images == null) {
 				images = new Image[imageLocations.length];
-				
+
 				for (int i = 0; i < imageLocations.length; ++i) {
 					InputStream stream = clazz.getResourceAsStream(imageLocations[i]);
 					ImageData source = new ImageData(stream);
@@ -98,7 +94,7 @@ public class HoverHelp {
 						e.printStackTrace();
 					}
 				}
-			}	
+			}
 		} catch (Exception ex) {
 			System.err.println(getResourceString("error.CouldNotLoadResources",
 				new Object[] { ex.getMessage() }));
@@ -108,17 +104,14 @@ public class HoverHelp {
 		// Create the window
 		Shell shell = new Shell();
 		createPartControl(shell);
-		shell.addDisposeListener(new DisposeListener() {
-			@Override
-			public void widgetDisposed(DisposeEvent e) {
-				/* Free resources */
-				if (images != null) {
-					for (int i = 0; i < images.length; i++) {
-						final Image image = images[i];
-						if (image != null) image.dispose();
-					}
-					images = null;
+		shell.addDisposeListener(e -> {
+			/* Free resources */
+			if (images != null) {
+				for (int i = 0; i < images.length; i++) {
+					final Image image = images[i];
+					if (image != null) image.dispose();
 				}
+				images = null;
 			}
 		});
 		shell.pack();
@@ -138,7 +131,7 @@ public class HoverHelp {
 			return key;
 		} catch (NullPointerException e) {
 			return "!" + key + "!";
-		}			
+		}
 	}
 
 	/**
@@ -161,11 +154,11 @@ public class HoverHelp {
 	 */
 	public void createPartControl(Composite frame) {
 		final ToolTipHandler tooltip = new ToolTipHandler(frame.getShell());
-		
+
 		GridLayout layout = new GridLayout();
 		layout.numColumns = 3;
 		frame.setLayout(layout);
-	
+
 		String platform = SWT.getPlatform();
 		String helpKey = "F1";
 		if (platform.equals("gtk")) helpKey = "Ctrl+F1";
@@ -208,7 +201,7 @@ public class HoverHelp {
 		}
 		table.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_FILL));
 		tooltip.activateHoverHelp(table);
-	
+
 		Tree tree = new Tree (frame, SWT.BORDER);
 		for (int i=0; i<4; i++) {
 			TreeItem item = new TreeItem (tree, SWT.PUSH);
@@ -227,7 +220,7 @@ public class HoverHelp {
 		}
 		tree.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_FILL));
 		tooltip.activateHoverHelp(tree);
-	
+
 		Button button = new Button (frame, SWT.PUSH);
 		button.setText (getResourceString("Hello.text"));
 		button.setData ("TIP_TEXT", getResourceString("Hello.tooltip"));
@@ -247,41 +240,41 @@ public class HoverHelp {
 		private Label  tipLabelImage, tipLabelText;
 		private Widget tipWidget; // widget this tooltip is hovering over
 		private Point  tipPosition; // the position being hovered over
-	
+
 		/**
 		 * Creates a new tooltip handler
 		 *
 		 * @param parent the parent Shell
-		 */	
+		 */
 		public ToolTipHandler(Shell parent) {
 			final Display display = parent.getDisplay();
 			this.parentShell = parent;
-	
+
 			tipShell = new Shell(parent, SWT.ON_TOP | SWT.TOOL);
 			GridLayout gridLayout = new GridLayout();
 			gridLayout.numColumns = 2;
 			gridLayout.marginWidth = 2;
 			gridLayout.marginHeight = 2;
 			tipShell.setLayout(gridLayout);
-	
+
 			tipShell.setBackground(display.getSystemColor(SWT.COLOR_INFO_BACKGROUND));
-			
+
 			tipLabelImage = new Label(tipShell, SWT.NONE);
 			tipLabelImage.setForeground(display.getSystemColor(SWT.COLOR_INFO_FOREGROUND));
 			tipLabelImage.setBackground(display.getSystemColor(SWT.COLOR_INFO_BACKGROUND));
 			tipLabelImage.setLayoutData(new GridData(GridData.FILL_HORIZONTAL |
 				GridData.VERTICAL_ALIGN_CENTER));
-	
+
 			tipLabelText = new Label(tipShell, SWT.NONE);
 			tipLabelText.setForeground(display.getSystemColor(SWT.COLOR_INFO_FOREGROUND));
 			tipLabelText.setBackground(display.getSystemColor(SWT.COLOR_INFO_BACKGROUND));
 			tipLabelText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL |
 				GridData.VERTICAL_ALIGN_CENTER));
 		}
-	
+
 		/**
 		 * Enables customized hover help for a specified control
-		 * 
+		 *
 		 * @control the control on which to enable hoverhelp
 		 */
 		public void activateHoverHelp(final Control control) {
@@ -292,9 +285,9 @@ public class HoverHelp {
 				@Override
 				public void mouseDown (MouseEvent e) {
 					if (tipShell.isVisible()) tipShell.setVisible(false);
-				}	
+				}
 			});
-	
+
 			/*
 			 * Trap hover events to pop-up tooltip
 			 */
@@ -337,34 +330,31 @@ public class HoverHelp {
 					tipShell.setVisible(true);
 				}
 			});
-	
+
 			/*
 			 * Trap F1 Help to pop up a custom help box
 			 */
-			control.addHelpListener(new HelpListener () {
-				@Override
-				public void helpRequested(HelpEvent event) {
-					if (tipWidget == null) return;
-					ToolTipHelpTextHandler handler = (ToolTipHelpTextHandler)
-						tipWidget.getData("TIP_HELPTEXTHANDLER");
-					if (handler == null) return;
-					String text = handler.getHelpText(tipWidget);
-					if (text == null) return;
-					
-					if (tipShell.isVisible()) {
-						tipShell.setVisible(false);
-						Shell helpShell = new Shell(parentShell, SWT.SHELL_TRIM);
-						helpShell.setLayout(new FillLayout());
-						Label label = new Label(helpShell, SWT.NONE);
-						label.setText(text);
-						helpShell.pack();
-						setHoverLocation(helpShell, tipPosition);
-						helpShell.open();
-					}
+			control.addHelpListener(event -> {
+				if (tipWidget == null) return;
+				ToolTipHelpTextHandler handler = (ToolTipHelpTextHandler)
+					tipWidget.getData("TIP_HELPTEXTHANDLER");
+				if (handler == null) return;
+				String text = handler.getHelpText(tipWidget);
+				if (text == null) return;
+
+				if (tipShell.isVisible()) {
+					tipShell.setVisible(false);
+					Shell helpShell = new Shell(parentShell, SWT.SHELL_TRIM);
+					helpShell.setLayout(new FillLayout());
+					Label label = new Label(helpShell, SWT.NONE);
+					label.setText(text);
+					helpShell.pack();
+					setHoverLocation(helpShell, tipPosition);
+					helpShell.open();
 				}
 			});
 		}
-		
+
 		/**
 		 * Sets the location for a hovering shell
 		 * @param shell the object that is to hover
@@ -379,7 +369,7 @@ public class HoverHelp {
 			shell.setBounds(shellBounds);
 		}
 	}
-	
+
 	/**
 	 * ToolTip help handler
 	 */
@@ -390,5 +380,5 @@ public class HoverHelp {
 		 * @return a help text string
 		 */
 		public String getHelpText(Widget widget);
-	}	
+	}
 }
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/imageanalyzer/ImageAnalyzer.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/imageanalyzer/ImageAnalyzer.java
index 19f1f4c..2822e62 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/imageanalyzer/ImageAnalyzer.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/imageanalyzer/ImageAnalyzer.java
@@ -25,15 +25,11 @@ import org.eclipse.swt.custom.StyleRange;
 import org.eclipse.swt.custom.StyledText;
 import org.eclipse.swt.events.ControlAdapter;
 import org.eclipse.swt.events.ControlEvent;
-import org.eclipse.swt.events.DisposeEvent;
-import org.eclipse.swt.events.DisposeListener;
 import org.eclipse.swt.events.KeyAdapter;
 import org.eclipse.swt.events.KeyEvent;
 import org.eclipse.swt.events.MouseAdapter;
 import org.eclipse.swt.events.MouseEvent;
-import org.eclipse.swt.events.MouseMoveListener;
 import org.eclipse.swt.events.PaintEvent;
-import org.eclipse.swt.events.PaintListener;
 import org.eclipse.swt.events.SelectionAdapter;
 import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.events.SelectionListener;
@@ -47,7 +43,6 @@ import org.eclipse.swt.graphics.Image;
 import org.eclipse.swt.graphics.ImageData;
 import org.eclipse.swt.graphics.ImageLoader;
 import org.eclipse.swt.graphics.ImageLoaderEvent;
-import org.eclipse.swt.graphics.ImageLoaderListener;
 import org.eclipse.swt.graphics.Point;
 import org.eclipse.swt.graphics.RGB;
 import org.eclipse.swt.graphics.Rectangle;
@@ -93,7 +88,7 @@ public class ImageAnalyzer {
 	Cursor crossCursor;
 	GC imageCanvasGC;
 	PrinterData printerData;
-	
+
 	int paletteWidth = 140; // recalculated and used as a width hint
 	int ix = 0, iy = 0, py = 0; // used to scroll the image and palette
 	int compression; // used to modify the compression ratio of the image
@@ -116,7 +111,7 @@ public class ImageAnalyzer {
 	Image image; // the currently-displayed image
 	List<ImageLoaderEvent> incrementalEvents; // incremental image events
 	long loadTime = 0; // the time it took to load the current image
-	
+
 	static final int INDEX_DIGITS = 4;
 	static final int ALPHA_CHARS = 5;
 	static final int ALPHA_CONSTANT = 0;
@@ -205,7 +200,7 @@ public class ImageAnalyzer {
 		Display display = new Display();
 		ImageAnalyzer imageAnalyzer = new ImageAnalyzer();
 		Shell shell = imageAnalyzer.open(display);
-		
+
 		while (!shell.isDisposed())
 			if (!display.readAndDispatch()) display.sleep();
 		display.dispose();
@@ -216,7 +211,7 @@ public class ImageAnalyzer {
 		this.display = dpy;
 		shell = new Shell(display);
 		shell.setText(bundle.getString("Image_analyzer"));
-		
+
 		// Hook resize and dispose listeners.
 		shell.addControlListener(new ControlAdapter() {
 			@Override
@@ -237,19 +232,16 @@ public class ImageAnalyzer {
 				e.doit = true;
 			}
 		});
-		shell.addDisposeListener(new DisposeListener() {
-			@Override
-			public void widgetDisposed(DisposeEvent e) {
-				// Clean up.
-				if (image != null)
-					image.dispose();
-				whiteColor.dispose();
-				blackColor.dispose();
-				redColor.dispose();
-				greenColor.dispose();
-				blueColor.dispose();
-				fixedWidthFont.dispose();
-			}
+		shell.addDisposeListener(e -> {
+			// Clean up.
+			if (image != null)
+				image.dispose();
+			whiteColor.dispose();
+			blackColor.dispose();
+			redColor.dispose();
+			greenColor.dispose();
+			blueColor.dispose();
+			fixedWidthFont.dispose();
 		});
 
 		// Create colors and fonts.
@@ -260,21 +252,16 @@ public class ImageAnalyzer {
 		blueColor = new Color(display, 0, 0, 255);
 		fixedWidthFont = new Font(display, "courier", 10, 0);
 		crossCursor = display.getSystemCursor(SWT.CURSOR_CROSS);
-		
+
 		// Add a menu bar and widgets.
 		createMenuBar();
 		createWidgets();
 		shell.pack();
-		
+
 		// Create a GC for drawing, and hook the listener to dispose it.
 		imageCanvasGC = new GC(imageCanvas);
-		imageCanvas.addDisposeListener(new DisposeListener() {
-			@Override
-			public void widgetDisposed(DisposeEvent e) {
-				imageCanvasGC.dispose();
-			}
-		});
-		
+		imageCanvas.addDisposeListener(e -> imageCanvasGC.dispose());
+
 		// Open the window
 		shell.open();
 		return shell;
@@ -297,7 +284,7 @@ public class ImageAnalyzer {
 		GridData gridData = new GridData();
 		gridData.horizontalSpan = 2;
 		controls.setLayoutData(gridData);
-		
+
 		// Combo to change the background.
 		Group group = new Group(controls, SWT.NONE);
 		group.setLayout(new RowLayout());
@@ -316,7 +303,7 @@ public class ImageAnalyzer {
 				changeBackground();
 			}
 		});
-		
+
 		// Combo to change the compression ratio.
 		group = new Group(controls, SWT.NONE);
 		group.setLayout(new GridLayout(3, true));
@@ -391,7 +378,7 @@ public class ImageAnalyzer {
 				scaleX();
 			}
 		});
-		
+
 		// Combo to change the y scale.
 		group = new Group(controls, SWT.NONE);
 		group.setLayout(new RowLayout());
@@ -407,7 +394,7 @@ public class ImageAnalyzer {
 				scaleY();
 			}
 		});
-		
+
 		// Combo to change the alpha value.
 		group = new Group(controls, SWT.NONE);
 		group.setLayout(new RowLayout());
@@ -423,7 +410,7 @@ public class ImageAnalyzer {
 				alpha();
 			}
 		});
-		
+
 		// Check box to request incremental display.
 		group = new Group(controls, SWT.NONE);
 		group.setLayout(new RowLayout());
@@ -531,23 +518,17 @@ public class ImageAnalyzer {
 		gridData.grabExcessHorizontalSpace = true;
 		gridData.grabExcessVerticalSpace = true;
 		imageCanvas.setLayoutData(gridData);
-		imageCanvas.addPaintListener(new PaintListener() {
-			@Override
-			public void paintControl(PaintEvent event) {
-				if (image == null) {
-					Rectangle bounds = imageCanvas.getBounds();
-					event.gc.fillRectangle(0, 0, bounds.width, bounds.height);
-				} else {
-					paintImage(event);
-				}
+		imageCanvas.addPaintListener(event -> {
+			if (image == null) {
+				Rectangle bounds = imageCanvas.getBounds();
+				event.gc.fillRectangle(0, 0, bounds.width, bounds.height);
+			} else {
+				paintImage(event);
 			}
 		});
-		imageCanvas.addMouseMoveListener(new MouseMoveListener() {
-			@Override
-			public void mouseMove(MouseEvent event) {
-				if (image != null) {
-					showColorAt(event.x, event.y);
-				}
+		imageCanvas.addMouseMoveListener(event -> {
+			if (image != null) {
+				showColorAt(event.x, event.y);
 			}
 		});
 
@@ -649,12 +630,9 @@ public class ImageAnalyzer {
 		gridData.widthHint = paletteWidth;
 		gridData.heightHint = 16 * 11; // show at least 16 colors
 		paletteCanvas.setLayoutData(gridData);
-		paletteCanvas.addPaintListener(new PaintListener() {
-			@Override
-			public void paintControl(PaintEvent event) {
-				if (image != null)
-					paintPalette(event);
-			}
+		paletteCanvas.addPaintListener(event -> {
+			if (image != null)
+				paintPalette(event);
 		});
 
 		// Set up the palette canvas scroll bar.
@@ -710,7 +688,7 @@ public class ImageAnalyzer {
 		gridData.horizontalSpan = 2;
 		gridData.horizontalAlignment = GridData.FILL;
 		dataLabel.setLayoutData(gridData);
-		
+
 		// Text to show a dump of the data.
 		dataText = new StyledText(shell, SWT.BORDER | SWT.MULTI | SWT.READ_ONLY | SWT.V_SCROLL | SWT.H_SCROLL);
 		dataText.setBackground(display.getSystemColor(SWT.COLOR_WIDGET_BACKGROUND));
@@ -738,7 +716,7 @@ public class ImageAnalyzer {
 				}
 			}
 		});
-		
+
 		// Label to show status and cursor location in image.
 		statusLabel = new Label(shell, SWT.NONE);
 		statusLabel.setText("");
@@ -747,7 +725,7 @@ public class ImageAnalyzer {
 		gridData.horizontalAlignment = GridData.FILL;
 		statusLabel.setLayoutData(gridData);
 	}
-	
+
 	Menu createMenuBar() {
 		// Menu bar.
 		Menu menuBar = new Menu(shell, SWT.BAR);
@@ -756,7 +734,7 @@ public class ImageAnalyzer {
 		createAlphaMenu(menuBar);
 		return menuBar;
 	}
-	
+
 	void createFileMenu(Menu menuBar) {
 		// File menu
 		MenuItem item = new MenuItem(menuBar, SWT.CASCADE);
@@ -774,7 +752,7 @@ public class ImageAnalyzer {
 				menuOpenFile();
 			}
 		});
-		
+
 		// File -> Open URL...
 		item = new MenuItem(fileMenu, SWT.PUSH);
 		item.setText(bundle.getString("OpenURL"));
@@ -785,7 +763,7 @@ public class ImageAnalyzer {
 				menuOpenURL();
 			}
 		});
-		
+
 		// File -> Reopen
 		item = new MenuItem(fileMenu, SWT.PUSH);
 		item.setText(bundle.getString("Reopen"));
@@ -795,7 +773,7 @@ public class ImageAnalyzer {
 				menuReopen();
 			}
 		});
-		
+
 		new MenuItem(fileMenu, SWT.SEPARATOR);
 
 		// File -> Load File... (natively)
@@ -808,9 +786,9 @@ public class ImageAnalyzer {
 				menuLoad();
 			}
 		});
-		
+
 		new MenuItem(fileMenu, SWT.SEPARATOR);
-		
+
 		// File -> Save
 		item = new MenuItem(fileMenu, SWT.PUSH);
 		item.setText(bundle.getString("Save"));
@@ -821,7 +799,7 @@ public class ImageAnalyzer {
 				menuSave();
 			}
 		});
-		
+
 		// File -> Save As...
 		item = new MenuItem(fileMenu, SWT.PUSH);
 		item.setText(bundle.getString("Save_as"));
@@ -831,7 +809,7 @@ public class ImageAnalyzer {
 				menuSaveAs();
 			}
 		});
-		
+
 		// File -> Save Mask As...
 		item = new MenuItem(fileMenu, SWT.PUSH);
 		item.setText(bundle.getString("Save_mask_as"));
@@ -841,9 +819,9 @@ public class ImageAnalyzer {
 				menuSaveMaskAs();
 			}
 		});
-		
+
 		new MenuItem(fileMenu, SWT.SEPARATOR);
-		
+
 		// File -> Print
 		item = new MenuItem(fileMenu, SWT.PUSH);
 		item.setText(bundle.getString("Print"));
@@ -854,7 +832,7 @@ public class ImageAnalyzer {
 				menuPrint();
 			}
 		});
-		
+
 		new MenuItem(fileMenu, SWT.SEPARATOR);
 
 		// File -> Exit
@@ -866,7 +844,7 @@ public class ImageAnalyzer {
 				shell.close();
 			}
 		});
-	
+
 	}
 
 	void createAlphaMenu(Menu menuBar) {
@@ -919,14 +897,14 @@ public class ImageAnalyzer {
 			} else {
 				imageData.alpha = -1;
 				switch (alpha_op) {
-					case ALPHA_X: 
+					case ALPHA_X:
 						for (int y = 0; y < imageData.height; y++) {
 						for (int x = 0; x < imageData.width; x++) {
 							imageData.setAlpha(x, y, (x + alpha) % 256);
 						}
 						}
 						break;
-					case ALPHA_Y: 
+					case ALPHA_Y:
 						for (int y = 0; y < imageData.height; y++) {
 						for (int x = 0; x < imageData.width; x++) {
 							imageData.setAlpha(x, y, (y + alpha) % 256);
@@ -934,8 +912,8 @@ public class ImageAnalyzer {
 						}
 						break;
 					default: break;
-				}					
-			}			
+				}
+			}
 			displayImage(imageData);
 		} finally {
 			shell.setCursor(null);
@@ -946,7 +924,7 @@ public class ImageAnalyzer {
 	/* Just use Image(device, filename) to load an image file. */
 	void menuLoad() {
 		animate = false; // stop any animation in progress
-		
+
 		// Get the user to choose an image file.
 		FileDialog fileChooser = new FileDialog(shell, SWT.OPEN);
 		if (lastPath != null)
@@ -971,12 +949,12 @@ public class ImageAnalyzer {
 			// Cache the filename.
 			currentName = filename;
 			fileName = filename;
-			
+
 			// Fill in array and loader data.
 			loader = new ImageLoader();
 			imageDataArray = new ImageData[] {imageData};
 			loader.data = imageDataArray;
-				
+
 			// Display the image.
 			imageDataIndex = 0;
 			displayImage(imageData);
@@ -991,10 +969,10 @@ public class ImageAnalyzer {
 			imageCanvas.setCursor(crossCursor);
 		}
 	}
-	
+
 	void menuOpenFile() {
 		animate = false; // stop any animation in progress
-		
+
 		// Get the user to choose an image file.
 		FileDialog fileChooser = new FileDialog(shell, SWT.OPEN);
 		if (lastPath != null)
@@ -1014,12 +992,7 @@ public class ImageAnalyzer {
 			loader = new ImageLoader();
 			if (incremental) {
 				// Prepare to handle incremental events.
-				loader.addImageLoaderListener(new ImageLoaderListener() {
-					@Override
-					public void imageDataLoaded(ImageLoaderEvent event) {
-						incrementalDataLoaded(event);
-					}
-				});
+				loader.addImageLoaderListener(event -> incrementalDataLoaded(event));
 				incrementalThreadStart();
 			}
 			// Read the new image(s) from the chosen file.
@@ -1030,13 +1003,13 @@ public class ImageAnalyzer {
 				// Cache the filename.
 				currentName = filename;
 				fileName = filename;
-				
+
 				// If there are multiple images in the file (typically GIF)
 				// then enable the Previous, Next and Animate buttons.
 				previousButton.setEnabled(imageDataArray.length > 1);
 				nextButton.setEnabled(imageDataArray.length > 1);
 				animateButton.setEnabled(imageDataArray.length > 1 && loader.logicalScreenWidth > 0 && loader.logicalScreenHeight > 0);
-	
+
 				// Display the first image in the file.
 				imageDataIndex = 0;
 				displayImage(imageDataArray[imageDataIndex]);
@@ -1055,10 +1028,10 @@ public class ImageAnalyzer {
 			imageCanvas.setCursor(crossCursor);
 		}
 	}
-	
+
 	void menuOpenURL() {
 		animate = false; // stop any animation in progress
-		
+
 		// Get the user to choose an image URL.
 		TextPrompter textPrompter = new TextPrompter(shell, SWT.APPLICATION_MODAL | SWT.DIALOG_TRIM);
 		textPrompter.setText(bundle.getString("OpenURLDialog"));
@@ -1076,12 +1049,7 @@ public class ImageAnalyzer {
 			loader = new ImageLoader();
 			if (incremental) {
 				// Prepare to handle incremental events.
-				loader.addImageLoaderListener(new ImageLoaderListener() {
-					@Override
-					public void imageDataLoaded(ImageLoaderEvent event) {
-						incrementalDataLoaded(event);
-					}
-				});
+				loader.addImageLoaderListener(event -> incrementalDataLoaded(event));
 				incrementalThreadStart();
 			}
 			// Read the new image(s) from the chosen URL.
@@ -1092,13 +1060,13 @@ public class ImageAnalyzer {
 			if (imageDataArray.length > 0) {
 				currentName = urlname;
 				fileName = null;
-				
+
 				// If there are multiple images (typically GIF)
 				// then enable the Previous, Next and Animate buttons.
 				previousButton.setEnabled(imageDataArray.length > 1);
 				nextButton.setEnabled(imageDataArray.length > 1);
 				animateButton.setEnabled(imageDataArray.length > 1 && loader.logicalScreenWidth > 0 && loader.logicalScreenHeight > 0);
-	
+
 				// Display the first image.
 				imageDataIndex = 0;
 				displayImage(imageDataArray[imageDataIndex]);
@@ -1156,7 +1124,7 @@ public class ImageAnalyzer {
 		incrementalThread.setDaemon(true);
 		incrementalThread.start();
 	}
-	
+
 	/*
 	 * Called when incremental image data has been loaded,
 	 * for example, for interlaced GIF/PNG or progressive JPEG.
@@ -1168,7 +1136,7 @@ public class ImageAnalyzer {
 			incrementalEvents.add(event);
 		}
 	}
-	
+
 	void menuSave() {
 		if (image == null) return;
 		animate = false; // stop any animation in progress
@@ -1245,25 +1213,25 @@ public class ImageAnalyzer {
 		int filetype = fileChooser.getFilterIndex();
 		if (filetype == -1) {
 			/* The platform file dialog does not support user-selectable file filters.
-			 * Determine the desired type by looking at the file extension. 
+			 * Determine the desired type by looking at the file extension.
 			 */
 			filetype = determineFileType(filename);
 			if (filetype == SWT.IMAGE_UNDEFINED) {
 				MessageBox box = new MessageBox(shell, SWT.ICON_ERROR);
-				box.setMessage(createMsg(bundle.getString("Unknown_extension"), 
+				box.setMessage(createMsg(bundle.getString("Unknown_extension"),
 					filename.substring(filename.lastIndexOf('.') + 1)));
 				box.open();
 				return;
 			}
 		}
-		
+
 		if (new java.io.File(filename).exists()) {
 			MessageBox box = new MessageBox(shell, SWT.ICON_QUESTION | SWT.OK | SWT.CANCEL);
 			box.setMessage(createMsg(bundle.getString("Overwrite"), filename));
 			if (box.open() == SWT.CANCEL)
 				return;
 		}
-		
+
 		Cursor waitCursor = display.getSystemCursor(SWT.CURSOR_WAIT);
 		shell.setCursor(waitCursor);
 		imageCanvas.setCursor(waitCursor);
@@ -1283,11 +1251,11 @@ public class ImageAnalyzer {
 			if (!multi && transparentPixel != -1 && !transparent) {
 				imageData.transparentPixel = -1;
 			}
-			
+
 			if (!multi) loader.data = new ImageData[] {imageData};
 			loader.compression = compressionCombo.indexOf(compressionCombo.getText());
 			loader.save(filename, filetype);
-			
+
 			/* Restore the previous transparency setting. */
 			if (!multi && transparentPixel != -1 && !transparent) {
 				imageData.transparentPixel = transparentPixel;
@@ -1329,25 +1297,25 @@ public class ImageAnalyzer {
 		int filetype = fileChooser.getFilterIndex();
 		if (filetype == -1) {
 			/* The platform file dialog does not support user-selectable file filters.
-			 * Determine the desired type by looking at the file extension. 
+			 * Determine the desired type by looking at the file extension.
 			 */
 			filetype = determineFileType(filename);
 			if (filetype == SWT.IMAGE_UNDEFINED) {
 				MessageBox box = new MessageBox(shell, SWT.ICON_ERROR);
-				box.setMessage(createMsg(bundle.getString("Unknown_extension"), 
+				box.setMessage(createMsg(bundle.getString("Unknown_extension"),
 					filename.substring(filename.lastIndexOf('.') + 1)));
 				box.open();
 				return;
 			}
 		}
-		
+
 		if (new java.io.File(filename).exists()) {
 			MessageBox box = new MessageBox(shell, SWT.ICON_QUESTION | SWT.OK | SWT.CANCEL);
 			box.setMessage(createMsg(bundle.getString("Overwrite"), filename));
 			if (box.open() == SWT.CANCEL)
 				return;
 		}
-		
+
 		Cursor waitCursor = display.getSystemCursor(SWT.CURSOR_WAIT);
 		shell.setCursor(waitCursor);
 		imageCanvas.setCursor(waitCursor);
@@ -1356,7 +1324,7 @@ public class ImageAnalyzer {
 			ImageData maskImageData = imageData.getTransparencyMask();
 			loader.data = new ImageData[] {maskImageData};
 			loader.save(filename, filetype);
-			
+
 		} catch (SWTException e) {
 			showErrorDialog(bundle.getString("Saving_lc"), filename, e);
 		} catch (SWTError e) {
@@ -1376,7 +1344,7 @@ public class ImageAnalyzer {
 			if (printerData != null) dialog.setPrinterData(printerData);
 			printerData = dialog.open();
 			if (printerData == null) return;
-			
+
 			Printer printer = new Printer(printerData);
 			Point screenDPI = display.getDPI();
 			Point printerDPI = printer.getDPI();
@@ -1445,12 +1413,12 @@ public class ImageAnalyzer {
 			showErrorDialog(bundle.getString("Reloading_lc"), currentName, e);
 		} catch (OutOfMemoryError e) {
 			showErrorDialog(bundle.getString("Reloading_lc"), currentName, e);
-		} finally {	
+		} finally {
 			shell.setCursor(null);
 			imageCanvas.setCursor(crossCursor);
 		}
 	}
-	
+
 	void changeBackground() {
 		String background = backgroundCombo.getText();
 		if (background.equals(bundle.getString("White"))) {
@@ -1466,7 +1434,7 @@ public class ImageAnalyzer {
 		} else {
 			imageCanvas.setBackground(null);
 		}
-	}	
+	}
 	/*
 	 * Called when the ScaleX combo selection changes.
 	 */
@@ -1482,7 +1450,7 @@ public class ImageAnalyzer {
 			imageCanvas.redraw();
 		}
 	}
-	
+
 	/*
 	 * Called when the ScaleY combo selection changes.
 	 */
@@ -1498,7 +1466,7 @@ public class ImageAnalyzer {
 			imageCanvas.redraw();
 		}
 	}
-	
+
 	/*
 	 * Called when the Alpha combo selection changes.
 	 */
@@ -1510,7 +1478,7 @@ public class ImageAnalyzer {
 			alpha = 255;
 		}
 	}
-	
+
 	/*
 	 * Called when the mouse moves in the image canvas.
 	 * Show the color of the image at the point under the mouse.
@@ -1520,7 +1488,7 @@ public class ImageAnalyzer {
 		int y = my - imageData.y - iy;
 		showColorForPixel(x, y);
 	}
-	
+
 	/*
 	 * Called when a mouse down or key press is detected
 	 * in the data text. Show the color of the pixel at
@@ -1574,7 +1542,7 @@ public class ImageAnalyzer {
 			statusLabel.setText("");
 		}
 	}
-	
+
 	/*
 	 * Set the status label to show color information
 	 * for the specified pixel in the image.
@@ -1615,7 +1583,7 @@ public class ImageAnalyzer {
 			statusLabel.setText("");
 		}
 	}
-	
+
 	/*
 	 * Called when the Animate button is pressed.
 	 */
@@ -1627,16 +1595,16 @@ public class ImageAnalyzer {
 				public void run() {
 					// Pre-animation widget setup.
 					preAnimation();
-					
+
 					// Animate.
 					try {
 						animateLoop();
 					} catch (final SWTException e) {
-						display.syncExec(() -> showErrorDialog(createMsg(bundle.getString("Creating_image"), 
+						display.syncExec(() -> showErrorDialog(createMsg(bundle.getString("Creating_image"),
 								    new Integer(imageDataIndex+1)),
 								    currentName, e));
 					}
-					
+
 					// Post animation widget reset.
 					postAnimation();
 				}
@@ -1645,7 +1613,7 @@ public class ImageAnalyzer {
 			animateThread.start();
 		}
 	}
-	
+
 	/*
 	 * Loop through all of the images in a multi-image file
 	 * and display them one after another.
@@ -1655,7 +1623,7 @@ public class ImageAnalyzer {
 		// Both are disposed after the animation.
 		Image offScreenImage = new Image(display, loader.logicalScreenWidth, loader.logicalScreenHeight);
 		GC offScreenImageGC = new GC(offScreenImage);
-		
+
 		try {
 			// Use syncExec to get the background color of the imageCanvas.
 			display.syncExec(() -> canvasBackground = imageCanvas.getBackground());
@@ -1667,7 +1635,7 @@ public class ImageAnalyzer {
 				0,
 				loader.logicalScreenWidth,
 				loader.logicalScreenHeight);
-					
+
 			// Draw the current image onto the off-screen image.
 			offScreenImageGC.drawImage(
 				image,
@@ -1714,13 +1682,13 @@ public class ImageAnalyzer {
 						imageData.width,
 						imageData.height);
 				}
-									
+
 				// Get the next image data.
 				imageDataIndex = (imageDataIndex + 1) % imageDataArray.length;
 				imageData = imageDataArray[imageDataIndex];
 				image.dispose();
 				image = new Image(display, imageData);
-				
+
 				// Draw the new image data.
 				offScreenImageGC.drawImage(
 					image,
@@ -1732,16 +1700,16 @@ public class ImageAnalyzer {
 					imageData.y,
 					imageData.width,
 					imageData.height);
-				
+
 				// Draw the off-screen image to the screen.
 				imageCanvasGC.drawImage(offScreenImage, 0, 0);
-				
+
 				// Sleep for the specified delay time before drawing again.
 				try {
 					Thread.sleep(visibleDelay(imageData.delayTime * 10));
 				} catch (InterruptedException e) {
 				}
-				
+
 				// If we have just drawn the last image in the set,
 				// then decrement the repeat count.
 				if (imageDataIndex == imageDataArray.length - 1) repeatCount--;
@@ -1759,7 +1727,7 @@ public class ImageAnalyzer {
 		display.syncExec(() -> {
 			// Change the label of the Animate button to 'Stop'.
 			animateButton.setText(bundle.getString("Stop"));
-			
+
 			// Disable anything we don't want the user
 			// to select during the animation.
 			previousButton.setEnabled(false);
@@ -1772,7 +1740,7 @@ public class ImageAnalyzer {
 			transparentCheck.setEnabled(false);
 			maskCheck.setEnabled(false);
 			// leave backgroundCheck enabled
-		
+
 			// Reset the scale combos and scrollbars.
 			resetScaleCombos();
 			resetScrollBars();
@@ -1794,10 +1762,10 @@ public class ImageAnalyzer {
 			incrementalCheck.setEnabled(true);
 			transparentCheck.setEnabled(true);
 			maskCheck.setEnabled(true);
-		
+
 			// Reset the label of the Animate button.
 			animateButton.setText(bundle.getString("Animate"));
-		
+
 			if (animate) {
 				// If animate is still true, we finished the
 				// full number of repeats. Leave the image as-is.
@@ -1820,7 +1788,7 @@ public class ImageAnalyzer {
 			}
 			imageDataIndex = imageDataIndex - 1;
 			displayImage(imageDataArray[imageDataIndex]);
-		}	
+		}
 	}
 
 	/*
@@ -1831,7 +1799,7 @@ public class ImageAnalyzer {
 		if (image != null && imageDataArray.length > 1) {
 			imageDataIndex = (imageDataIndex + 1) % imageDataArray.length;
 			displayImage(imageDataArray[imageDataIndex]);
-		}	
+		}
 	}
 
 	void displayImage(ImageData newImageData) {
@@ -1841,13 +1809,13 @@ public class ImageAnalyzer {
 			synchronized (this) {
 				incrementalEvents = null;
 			}
-			
+
 			// Wait until the incremental thread is done.
 			while (incrementalThread.isAlive()) {
 				if (!display.readAndDispatch()) display.sleep();
 			}
 		}
-					
+
 		// Dispose of the old image, if there was one.
 		if (image != null) image.dispose();
 
@@ -1867,7 +1835,7 @@ public class ImageAnalyzer {
 		shell.setText(string);
 
 		if (imageDataArray.length > 1) {
-			string = createMsg(bundle.getString("Type_index"), 
+			string = createMsg(bundle.getString("Type_index"),
 			                   new Object[] {fileTypeString(imageData.type),
 			                                 new Integer(imageDataIndex + 1),
 			                                 new Integer(imageDataArray.length)});
@@ -1876,7 +1844,7 @@ public class ImageAnalyzer {
 		}
 		typeLabel.setText(string);
 
-		string = createMsg(bundle.getString("Size_value"), 
+		string = createMsg(bundle.getString("Size_value"),
 					 new Object[] {new Integer(imageData.width),
 							   new Integer(imageData.height)});
 		sizeLabel.setText(string);
@@ -1891,7 +1859,7 @@ public class ImageAnalyzer {
 		string = createMsg(bundle.getString("Time_to_load_value"), new Long(loadTime));
 		timeToLoadLabel.setText(string);
 
-		string = createMsg(bundle.getString("Animation_size_value"), 
+		string = createMsg(bundle.getString("Animation_size_value"),
 		                      new Object[] {new Integer(loader.logicalScreenWidth),
 								new Integer(loader.logicalScreenHeight)});
 		screenSizeLabel.setText(string);
@@ -1899,7 +1867,7 @@ public class ImageAnalyzer {
 		string = createMsg(bundle.getString("Background_pixel_value"), pixelInfo(loader.backgroundPixel));
 		backgroundPixelLabel.setText(string);
 
-		string = createMsg(bundle.getString("Image_location_value"), 
+		string = createMsg(bundle.getString("Image_location_value"),
 		                      new Object[] {new Integer(imageData.x), new Integer(imageData.y)});
 		locationLabel.setText(string);
 
@@ -1911,7 +1879,7 @@ public class ImageAnalyzer {
 		int delay = imageData.delayTime * 10;
 		int delayUsed = visibleDelay(delay);
 		if (delay != delayUsed) {
-			string = createMsg(bundle.getString("Delay_value"), 
+			string = createMsg(bundle.getString("Delay_value"),
 			                   new Object[] {new Integer(delay), new Integer(delayUsed)});
 		} else {
 			string = createMsg(bundle.getString("Delay_used"), new Integer(delay));
@@ -1944,7 +1912,7 @@ public class ImageAnalyzer {
 
 		String data = dataHexDump(dataText.getLineDelimiter());
 		dataText.setText(data);
-		
+
 		// bold the first column all the way down
 		int index = 0;
 		while((index = data.indexOf(':', index+1)) != -1) {
@@ -1968,7 +1936,7 @@ public class ImageAnalyzer {
 	void paintImage(PaintEvent event) {
 		GC gc = event.gc;
 		Image paintImage = image;
-		
+
 		/* If the user wants to see the transparent pixel in its actual color,
 		 * then temporarily turn off transparency.
 		 */
@@ -1977,11 +1945,11 @@ public class ImageAnalyzer {
 			imageData.transparentPixel = -1;
 			paintImage = new Image(display, imageData);
 		}
-		
+
 		/* Scale the image when drawing, using the user's selected scaling factor. */
 		int w = Math.round(imageData.width * xscale);
 		int h = Math.round(imageData.height * yscale);
-		
+
 		/* If any of the background is visible, fill it with the background color. */
 		Rectangle bounds = imageCanvas.getBounds();
 		if (imageData.getTransparencyType() != SWT.TRANSPARENCY_NONE) {
@@ -1992,7 +1960,7 @@ public class ImageAnalyzer {
 			if (ix + w < bounds.width) gc.fillRectangle(ix + w, 0, bounds.width - (ix + w), bounds.height);
 			if (iy + h < bounds.height) gc.fillRectangle(0, iy + h, ix + w, bounds.height - (iy + h));
 		}
-		
+
 		/* Draw the image */
 		gc.drawImage(
 			paintImage,
@@ -2004,7 +1972,7 @@ public class ImageAnalyzer {
 			iy + imageData.y,
 			w,
 			h);
-		
+
 		/* If there is a mask and the user wants to see it, draw it. */
 		if (showMask && (imageData.getTransparencyType() != SWT.TRANSPARENCY_NONE)) {
 			ImageData maskImageData = imageData.getTransparencyMask();
@@ -2021,7 +1989,7 @@ public class ImageAnalyzer {
 				h);
 			maskImage.dispose();
 		}
-		
+
 		/* If transparency was temporarily disabled, restore it. */
 		if (transparentPixel != -1 && !transparent) {
 			imageData.transparentPixel = transparentPixel;
@@ -2065,7 +2033,7 @@ public class ImageAnalyzer {
 			}
 		}
 	}
-	
+
 	void resizeShell(ControlEvent event) {
 		if (image == null || shell.isDisposed())
 			return;
@@ -2078,7 +2046,7 @@ public class ImageAnalyzer {
 		scaleXCombo.select(scaleXCombo.indexOf("1"));
 		scaleYCombo.select(scaleYCombo.indexOf("1"));
 	}
-	
+
 	// Reset the scroll bars to 0.
 	void resetScrollBars() {
 		if (image == null) return;
@@ -2088,7 +2056,7 @@ public class ImageAnalyzer {
 		imageCanvas.getVerticalBar().setSelection(0);
 		paletteCanvas.getVerticalBar().setSelection(0);
 	}
-	
+
 	void resizeScrollBars() {
 		// Set the max and thumb for the image canvas scroll bars.
 		ScrollBar horizontal = imageCanvas.getHorizontalBar();
@@ -2160,7 +2128,7 @@ public class ImageAnalyzer {
 			ix = x;
 		}
 	}
-	
+
 	/*
 	 * Called when the image canvas' vertical scrollbar is selected.
 	 */
@@ -2290,7 +2258,7 @@ public class ImageAnalyzer {
 		if (truncated) result += "\n ...data dump truncated at " + MAX_DUMP + "bytes...";
 		return result;
 	}
-	
+
 	/*
 	 * Open an error dialog displaying the specified information.
 	 */
@@ -2318,7 +2286,7 @@ public class ImageAnalyzer {
 		box.setMessage(message + errorMessage);
 		box.open();
 	}
-	
+
 	/*
 	 * Open a dialog asking the user for more information on the type of BMP file to save.
 	 */
@@ -2337,10 +2305,10 @@ public class ImageAnalyzer {
 
 		dialog.setText(bundle.getString("Save_as_type"));
 		dialog.setLayout(new GridLayout());
-		
+
 		Label label = new Label(dialog, SWT.NONE);
 		label.setText(bundle.getString("Save_as_type_label"));
-		
+
 		Button radio = new Button(dialog, SWT.RADIO);
 		radio.setText(bundle.getString("Save_as_type_no_compress"));
 		radio.setSelection(true);
@@ -2351,7 +2319,7 @@ public class ImageAnalyzer {
 		radio.setText(bundle.getString("Save_as_type_rle_compress"));
 		radio.setData(new Integer(SWT.IMAGE_BMP_RLE));
 		radio.addSelectionListener(radioSelected);
-		
+
 		radio = new Button(dialog, SWT.RADIO);
 		radio.setText(bundle.getString("Save_as_type_os2"));
 		radio.setData(new Integer(SWT.IMAGE_OS2_BMP));
@@ -2359,7 +2327,7 @@ public class ImageAnalyzer {
 
 		label = new Label(dialog, SWT.SEPARATOR | SWT.HORIZONTAL);
 		label.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
-		
+
 		Button ok = new Button(dialog, SWT.PUSH);
 		ok.setText(bundle.getString("OK"));
 		GridData data = new GridData();
@@ -2372,15 +2340,15 @@ public class ImageAnalyzer {
 				dialog.close();
 			}
 		});
-		
+
 		dialog.pack();
 		dialog.open();
 		while (!dialog.isDisposed()) {
 			if (!display.readAndDispatch()) display.sleep();
 		}
 		return bmpType[0];
-	}	
-	
+	}
+
 	/*
 	 * Return a String describing how to analyze the bytes
 	 * in the hex dump.
@@ -2389,7 +2357,7 @@ public class ImageAnalyzer {
 		Object[] args = {new Integer(depth), ""};
 		switch (depth) {
 			case 1:
-				args[1] = createMsg(bundle.getString("Multi_pixels"), 
+				args[1] = createMsg(bundle.getString("Multi_pixels"),
 				                    new Object[] {new Integer(8), " [01234567]"});
 				break;
 			case 2:
@@ -2417,7 +2385,7 @@ public class ImageAnalyzer {
 		}
 		return createMsg(bundle.getString("Depth_info"), args);
 	}
-	
+
 	/*
 	 * Return the specified number of milliseconds.
 	 * If the specified number of milliseconds is too small
@@ -2462,7 +2430,7 @@ public class ImageAnalyzer {
 			return "0" + hex;
 		return hex;
 	}
-	
+
 	/*
 	 * Return a String describing the specified
 	 * transparent or background pixel.
@@ -2473,7 +2441,7 @@ public class ImageAnalyzer {
 		}
 		return pixel + " (0x" + Integer.toHexString(pixel) + ")";
 	}
-	
+
 	/*
 	 * Return a String describing the specified disposal method.
 	 */
@@ -2485,7 +2453,7 @@ public class ImageAnalyzer {
 		}
 		return bundle.getString("Unspecified_lc");
 	}
-	
+
 	/*
 	 * Return a String describing the specified image file type.
 	 */
@@ -2508,7 +2476,7 @@ public class ImageAnalyzer {
 			return "TIFF";
 		return bundle.getString("Unknown_ac");
 	}
-	
+
 	/*
 	 * Return the specified file's image type, based on its extension.
 	 * Note that this is not a very robust way to determine image type,
@@ -2531,7 +2499,7 @@ public class ImageAnalyzer {
 			return SWT.IMAGE_TIFF;
 		return SWT.IMAGE_UNDEFINED;
 	}
-	
+
 	void showFileType(String filename) {
 		String ext = filename.substring(filename.lastIndexOf('.') + 1);
 		if (ext.equalsIgnoreCase("jpg") || ext.equalsIgnoreCase("jpeg") || ext.equalsIgnoreCase("jfif")) {
@@ -2557,7 +2525,7 @@ public class ImageAnalyzer {
 			}
 			compressionCombo.select(0);
 			return;
-		} 
+		}
 		if (ext.equalsIgnoreCase("bmp")) {
 			imageTypeCombo.select(5);
 		}
@@ -2571,14 +2539,14 @@ public class ImageAnalyzer {
 			imageTypeCombo.select(4);
 		}
 		compressionCombo.setEnabled(false);
-		compressionRatioLabel.setEnabled(false);	
+		compressionRatioLabel.setEnabled(false);
 	}
-	
+
 	static String createMsg(String msg, Object[] args) {
 		MessageFormat formatter = new MessageFormat(msg);
 		return formatter.format(args);
 	}
-	
+
 	static String createMsg(String msg, Object arg) {
 		MessageFormat formatter = new MessageFormat(msg);
 		return formatter.format(new Object[]{arg});
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/layoutexample/GridLayoutTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/layoutexample/GridLayoutTab.java
index 1ec71c5..1e45a7d 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/layoutexample/GridLayoutTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/layoutexample/GridLayoutTab.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2005 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -16,7 +16,6 @@ import org.eclipse.swt.custom.CCombo;
 import org.eclipse.swt.custom.TableEditor;
 import org.eclipse.swt.events.MouseAdapter;
 import org.eclipse.swt.events.MouseEvent;
-import org.eclipse.swt.events.TraverseEvent;
 import org.eclipse.swt.events.TraverseListener;
 import org.eclipse.swt.graphics.Point;
 import org.eclipse.swt.graphics.Rectangle;
@@ -59,35 +58,32 @@ class GridLayoutTab extends Tab {
 	static final int MINWIDTH_COL = 12;
 	static final int MINHEIGHT_COL = 13;
 	static final int EXCLUDE_COL = 14;
-	
+
 	static final int TOTAL_COLS = 15;
-		
+
 	/**
 	 * Creates the Tab within a given instance of LayoutExample.
 	 */
 	GridLayoutTab(LayoutExample instance) {
 		super(instance);
 	}
-	
+
 	/**
 	 * Creates the widgets in the "child" group.
 	 */
 	@Override
 	void createChildWidgets () {
 		/* Create the TraverseListener */
-		final TraverseListener traverseListener = new TraverseListener () {
-			@Override
-			public void keyTraversed (TraverseEvent e) {
-				if (e.detail == SWT.TRAVERSE_RETURN || e.detail == SWT.TRAVERSE_TAB_NEXT)
-					resetEditors ();
-				if (e.detail == SWT.TRAVERSE_ESCAPE)
-					disposeEditors ();
-			}
+		final TraverseListener traverseListener = e -> {
+			if (e.detail == SWT.TRAVERSE_RETURN || e.detail == SWT.TRAVERSE_TAB_NEXT)
+				resetEditors ();
+			if (e.detail == SWT.TRAVERSE_ESCAPE)
+				disposeEditors ();
 		};
-		
+
 		/* Add common controls */
 		super.createChildWidgets ();
-			
+
 		/* Add hovers to the column headers whose field names have been shortened to save space */
 		table.getColumn (HALIGN_COL).setToolTipText ("horizontalAlignment");
 		table.getColumn (VALIGN_COL).setToolTipText ("verticalAlignment");
@@ -99,8 +95,8 @@ class GridLayoutTab extends Tab {
 		table.getColumn (VINDENT_COL).setToolTipText ("verticalIndent");
 		table.getColumn (MINWIDTH_COL).setToolTipText ("minimumWidth");
 		table.getColumn (MINHEIGHT_COL).setToolTipText ("minimumHeight");
-		
-		/* Add TableEditors */		
+
+		/* Add TableEditors */
 		nameEditor = new TableEditor (table);
 		comboEditor = new TableEditor (table);
 		widthEditor = new TableEditor (table);
@@ -130,22 +126,22 @@ class GridLayoutTab extends Tab {
 					return;
 				}
 				table.showSelection ();
-				
+
 				nameText = new Text (table, SWT.SINGLE);
 				nameText.setText (data.get (index) [NAME_COL]);
 				createTextEditor (nameText, nameEditor, NAME_COL);
-				
+
 				combo = new CCombo (table, SWT.READ_ONLY);
 				createComboEditor (combo, comboEditor);
-				
+
 				widthText = new Text (table, SWT.SINGLE);
 				widthText.setText (data.get (index) [WIDTH_COL]);
 				createTextEditor (widthText, widthEditor, WIDTH_COL);
-				
+
 				heightText = new Text (table, SWT.SINGLE);
 				heightText.setText (data.get (index) [HEIGHT_COL]);
 				createTextEditor (heightText, heightEditor, HEIGHT_COL);
-				
+
 				String [] alignValues = new String [] {"BEGINNING","CENTER","END","FILL"};
 				hAlign = new CCombo (table, SWT.NONE);
 				hAlign.setItems (alignValues);
@@ -155,7 +151,7 @@ class GridLayoutTab extends Tab {
 				hAlignEditor.minimumWidth = 50;
 				hAlignEditor.setEditor (hAlign, newItem, HALIGN_COL);
 				hAlign.addTraverseListener (traverseListener);
-				
+
 				vAlign = new CCombo (table, SWT.NONE);
 				vAlign.setItems (alignValues);
 				vAlign.setText (newItem.getText (VALIGN_COL));
@@ -164,7 +160,7 @@ class GridLayoutTab extends Tab {
 				vAlignEditor.minimumWidth = 50;
 				vAlignEditor.setEditor (vAlign, newItem, VALIGN_COL);
 				vAlign.addTraverseListener (traverseListener);
-				
+
 				String [] boolValues = new String [] {"false", "true"};
 				hGrab = new CCombo (table, SWT.NONE);
 				hGrab.setItems (boolValues);
@@ -174,7 +170,7 @@ class GridLayoutTab extends Tab {
 				hGrabEditor.minimumWidth = 50;
 				hGrabEditor.setEditor (hGrab, newItem, HGRAB_COL);
 				hGrab.addTraverseListener (traverseListener);
-				
+
 				vGrab = new CCombo (table, SWT.NONE);
 				vGrab.setItems (boolValues);
 				vGrab.setText (newItem.getText (VGRAB_COL));
@@ -183,27 +179,27 @@ class GridLayoutTab extends Tab {
 				vGrabEditor.minimumWidth = 50;
 				vGrabEditor.setEditor (vGrab, newItem, VGRAB_COL);
 				vGrab.addTraverseListener (traverseListener);
-                
+
 				hSpan = new Text (table, SWT.SINGLE);
 				hSpan.setText (data.get (index) [HSPAN_COL]);
 				createTextEditor (hSpan, hSpanEditor, HSPAN_COL);
-				
+
 				vSpan = new Text (table, SWT.SINGLE);
 				vSpan.setText (data.get (index) [VSPAN_COL]);
 				createTextEditor (vSpan, vSpanEditor, VSPAN_COL);
-				
+
 				hIndent = new Text (table, SWT.SINGLE);
 				hIndent.setText (data.get (index) [HINDENT_COL]);
 				createTextEditor (hIndent, hIndentEditor, HINDENT_COL);
-				
+
 				vIndent = new Text (table, SWT.SINGLE);
 				vIndent.setText (data.get (index) [VINDENT_COL]);
 				createTextEditor (vIndent, vIndentEditor, VINDENT_COL);
-				
+
 				minWidthText = new Text (table, SWT.SINGLE);
 				minWidthText.setText (data.get (index) [MINWIDTH_COL]);
 				createTextEditor (minWidthText, minWidthEditor, MINWIDTH_COL);
-				
+
 				minHeightText = new Text (table, SWT.SINGLE);
 				minHeightText.setText (data.get (index) [MINHEIGHT_COL]);
 				createTextEditor (minHeightText, minHeightEditor, MINHEIGHT_COL);
@@ -216,7 +212,7 @@ class GridLayoutTab extends Tab {
 				excludeEditor.minimumWidth = 50;
 				excludeEditor.setEditor (exclude, newItem, EXCLUDE_COL);
 				exclude.addTraverseListener (traverseListener);
-                
+
                 for (int i=0; i<table.getColumnCount (); i++) {
                 	Rectangle rect = newItem.getBounds (i);
                     if (rect.contains (pt)) {
@@ -225,9 +221,9 @@ class GridLayoutTab extends Tab {
                     			nameText.setFocus ();
                     			break;
 							case COMBO_COL :
-								combo.setFocus ();	
+								combo.setFocus ();
 								break;
-							case WIDTH_COL :	
+							case WIDTH_COL :
 								widthText.setFocus ();
 								break;
 							case HEIGHT_COL :
@@ -257,7 +253,7 @@ class GridLayoutTab extends Tab {
 							case VINDENT_COL :
 								vIndent.setFocus ();
 								break;
-							case MINWIDTH_COL :	
+							case MINWIDTH_COL :
 								minWidthText.setFocus ();
 								break;
 							case MINHEIGHT_COL :
@@ -271,7 +267,7 @@ class GridLayoutTab extends Tab {
 								break;
 						}
                     }
-                } 
+                }
 			}
 		});
 	}
@@ -333,12 +329,12 @@ class GridLayoutTab extends Tab {
 		verticalSpacing = new Spinner(marginGroup, SWT.BORDER);
 		verticalSpacing.setSelection(5);
 		verticalSpacing.addSelectionListener(selectionListener);
-        
+
 		/* Add common controls */
 		super.createControlWidgets ();
 		controlGroup.pack();
 	}
-	
+
 	/**
 	 * Creates the example layout.
 	 */
@@ -347,8 +343,8 @@ class GridLayoutTab extends Tab {
 		gridLayout = new GridLayout ();
 		layoutComposite.setLayout (gridLayout);
 	}
-	
-	/** 
+
+	/**
 	 * Disposes the editors without placing their contents
 	 * into the table.
 	 */
@@ -371,10 +367,10 @@ class GridLayoutTab extends Tab {
 		minHeightText.dispose ();
 		exclude.dispose ();
 	}
-	
+
 	/**
 	 * Generates code for the example layout.
-	 */	
+	 */
 	@Override
 	StringBuffer generateLayoutCode () {
 		StringBuffer code = new StringBuffer ();
@@ -408,7 +404,7 @@ class GridLayoutTab extends Tab {
 			code.append ("\t\tgridLayout.verticalSpacing = " + gridLayout.verticalSpacing + ";\n");
 		}
 		code.append ("\t\tshell.setLayout (gridLayout);\n");
-		
+
 		boolean first = true;
 		boolean bounds, align, grab, span;
 		for (int i = 0; i < children.length; i++) {
@@ -472,16 +468,16 @@ class GridLayoutTab extends Tab {
 				if (code.substring (code.length () - 33).equals ("GridData data = new GridData ();\n")) {
 					code.delete (code.length () - 33, code.length ());
 					first = true;
-				} else if (code.substring (code.length () - 24).equals ("data = new GridData ();\n")) { 
+				} else if (code.substring (code.length () - 24).equals ("data = new GridData ();\n")) {
 					code.delete (code.length () - 24, code.length ());
-				} else {	
+				} else {
 					code.append ("\t\t" + names [i] + ".setLayoutData (data);\n");
 				}
 			}
 		}
 		return code;
 	}
-	
+
 	String alignmentString(int alignment) {
 		if (alignment == SWT.BEGINNING) return "SWT.BEGINNING";
 		if (alignment == SWT.CENTER) return "SWT.CENTER";
@@ -507,23 +503,23 @@ class GridLayoutTab extends Tab {
 	String [] getLayoutDataFieldNames() {
 		return new String [] {
 			"Control Name",
-			"Control Type", 
-			"width", 
-			"height", 
-			"hAlignment", //"horizontalAlignment", 
-			"vAlignment", //"verticalAlignment", 
-			"grabH", //"grabExcessHorizontalSpace", 
-			"grabV", //"grabExcessVerticalSpace", 
+			"Control Type",
+			"width",
+			"height",
+			"hAlignment", //"horizontalAlignment",
+			"vAlignment", //"verticalAlignment",
+			"grabH", //"grabExcessHorizontalSpace",
+			"grabV", //"grabExcessVerticalSpace",
 			"hSpan", //"horizontalSpan",
-			"vSpan", //"verticalSpan", 
-			"hIndent", //"horizontalIndent", 
+			"vSpan", //"verticalSpan",
+			"hIndent", //"horizontalIndent",
 			"vIndent", //"verticalIndent",
 			"minWidth", //"minimumWidth",
-			"minHeight", //"minimumHeight", 
+			"minHeight", //"minimumHeight",
 			"exclude"
 		};
 	}
-	
+
 	/**
 	 * Gets the text for the tab folder item.
 	 */
@@ -531,7 +527,7 @@ class GridLayoutTab extends Tab {
 	String getTabText () {
 		return "GridLayout";
 	}
-	
+
 	/**
 	 * Takes information from TableEditors and stores it.
 	 */
@@ -541,7 +537,7 @@ class GridLayoutTab extends Tab {
 		if (oldItem != null) {
 			int row = table.indexOf (oldItem);
 			/** Make sure user enters a valid data*/
-			try {				
+			try {
 				new String (nameText.getText ());
 			} catch (NumberFormatException e) {
 				nameText.setText (oldItem.getText (NAME_COL));
@@ -588,8 +584,8 @@ class GridLayoutTab extends Tab {
 			}
 			String [] insert = new String [] {
 				nameText.getText (), combo.getText (), widthText.getText (), heightText.getText (),
-				hAlign.getText (), vAlign.getText (), hGrab.getText (), vGrab.getText (), 
-				hSpan.getText (), vSpan.getText (), hIndent.getText (), vIndent.getText (), 
+				hAlign.getText (), vAlign.getText (), hGrab.getText (), vGrab.getText (),
+				hSpan.getText (), vSpan.getText (), hIndent.getText (), vIndent.getText (),
 				minWidthText.getText (), minHeightText.getText (), exclude.getText ()
 			};
 			data.set (row, insert);
@@ -603,15 +599,15 @@ class GridLayoutTab extends Tab {
 		setLayoutData ();
 		layoutComposite.layout (true);
 		layoutGroup.layout (true);
-	}	
-	
+	}
+
 	/**
 	 * Return the initial weight of the layout and control groups within the SashForm.
 	 * @return the desired sash weights for the tab page
 	 */
 	@Override
 	int[] sashWeights () {
-		return new int[] {35, 65};		
+		return new int[] {35, 65};
 	}
 
 	/**
@@ -670,11 +666,11 @@ class GridLayoutTab extends Tab {
 			/* Set exclude boolean */
 			exclude = items [i].getText (EXCLUDE_COL);
 			data.exclude = exclude.equals ("true");
-			
+
 			children [i].setLayoutData (data);
 		}
 	}
-	
+
 	/**
 	 * Sets the state of the layout.
 	 */
@@ -684,7 +680,7 @@ class GridLayoutTab extends Tab {
 		gridLayout.numColumns = numColumns.getSelection ();
 		gridLayout.makeColumnsEqualWidth = makeColumnsEqualWidth.getSelection ();
 		makeColumnsEqualWidth.setEnabled (numColumns.getSelection () > 1);
-		
+
 		/* Set the margins and spacing */
 		gridLayout.marginWidth = marginWidth.getSelection ();
 		gridLayout.marginHeight = marginHeight.getSelection ();
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/layoutexample/Tab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/layoutexample/Tab.java
index 31e67cd..2783fde 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/layoutexample/Tab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/layoutexample/Tab.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2005 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -10,7 +10,7 @@
  *******************************************************************************/
 package org.eclipse.swt.examples.layoutexample;
 
- 
+
 import java.util.ArrayList;
 import java.util.List;
 
@@ -22,7 +22,6 @@ import org.eclipse.swt.custom.TableEditor;
 import org.eclipse.swt.events.SelectionAdapter;
 import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.events.SelectionListener;
-import org.eclipse.swt.events.TraverseEvent;
 import org.eclipse.swt.events.TraverseListener;
 import org.eclipse.swt.graphics.Font;
 import org.eclipse.swt.graphics.FontData;
@@ -74,7 +73,7 @@ import org.eclipse.swt.widgets.TreeItem;
  * containing code that will regenerate the layout. This code
  * (or parts of it) can be selected and copied to the clipboard.
  */
-abstract class Tab {	
+abstract class Tab {
 	Shell shell;
 	Display display;
 	/* Common groups and composites */
@@ -92,7 +91,7 @@ abstract class Tab {
 	Table table;
 	int index;
 	boolean comboReset = false;
-	final String[] OPTIONS = {"Button", "Canvas", "Combo", "Composite",	"CoolBar", 
+	final String[] OPTIONS = {"Button", "Canvas", "Combo", "Composite",	"CoolBar",
 			"Group", "Label", "Link", "List", "ProgressBar", "Scale", "Slider", "StyledText",
 			"Table", "Text", "ToolBar", "Tree"};
 	TableItem newItem, lastSelected;
@@ -107,14 +106,11 @@ abstract class Tab {
 			resetEditors ();
 		}
 	};
-		
-	TraverseListener traverseListener = new TraverseListener () {
-		@Override
-		public void keyTraversed (TraverseEvent e) {
-			if (e.detail == SWT.TRAVERSE_RETURN) {
-				e.doit = false;
-				resetEditors ();
-			}
+
+	TraverseListener traverseListener = e -> {
+		if (e.detail == SWT.TRAVERSE_RETURN) {
+			e.doit = false;
+			resetEditors ();
 		}
 	};
 
@@ -124,7 +120,7 @@ abstract class Tab {
 	Tab(LayoutExample instance) {
 		this.instance = instance;
 	}
-	
+
 	/**
 	 * Creates the "children" group. This is the group that allows
 	 * you to add children to the layout. It exists within the
@@ -134,12 +130,12 @@ abstract class Tab {
 		childGroup = new Group (controlGroup, SWT.NONE);
 		childGroup.setText (LayoutExample.getResourceString("Children"));
 		childGroup.setLayout(new GridLayout ());
-		childGroup.setLayoutData(new GridData (SWT.FILL, SWT.FILL, true, true, 2, 1)); 
+		childGroup.setLayoutData(new GridData (SWT.FILL, SWT.FILL, true, true, 2, 1));
 
-		ToolBar toolBar = new ToolBar(childGroup, SWT.FLAT);	
+		ToolBar toolBar = new ToolBar(childGroup, SWT.FLAT);
 		toolBar.setLayoutData(new GridData(SWT.CENTER, SWT.CENTER, false, false));
 		add = new ToolItem(toolBar, SWT.DROP_DOWN);
-		add.setText(LayoutExample.getResourceString("Add"));	
+		add.setText(LayoutExample.getResourceString("Add"));
 		add.addSelectionListener (new SelectionAdapter () {
 			@Override
 			public void widgetSelected(SelectionEvent event) {
@@ -149,7 +145,7 @@ abstract class Tab {
 					final Menu menu = new Menu (shell, SWT.POP_UP);
 					for (int i = 0; i < OPTIONS.length; i++) {
 						final MenuItem newItem = new MenuItem (menu, SWT.RADIO);
-						newItem.setText (OPTIONS [i]);						
+						newItem.setText (OPTIONS [i]);
 						newItem.addSelectionListener (new SelectionAdapter () {
 							@Override
 							public void widgetSelected (SelectionEvent event) {
@@ -168,13 +164,13 @@ abstract class Tab {
 									resetEditors ();
 								}
 							}
-						});							
+						});
 						newItem.setSelection (i == prevSelected);
 					}
 					Point pt = display.map (bar, null, event.x, event.y);
 					menu.setLocation (pt.x, pt.y);
 					menu.setVisible (true);
-					
+
 					while (menu != null && !menu.isDisposed () && menu.isVisible ()) {
 						if (!display.readAndDispatch ()) {
 							display.sleep ();
@@ -215,7 +211,7 @@ abstract class Tab {
 				layoutGroup.layout (true);
 			}
 		});
-		
+
 		new ToolItem(toolBar,SWT.SEPARATOR);
 		clear = new ToolItem(toolBar, SWT.PUSH);
 		clear.setText (LayoutExample.getResourceString ("Clear"));
@@ -234,21 +230,21 @@ abstract class Tab {
 			}
 		});
 		toolBar.pack();
-		
+
 		new ToolItem (toolBar,SWT.SEPARATOR);
 		code = new ToolItem (toolBar, SWT.PUSH);
 		code.setText (LayoutExample.getResourceString ("Generate_Code"));
 		code.addSelectionListener(new SelectionAdapter() {
 			@Override
 			public void widgetSelected(SelectionEvent e) {
-				final Shell shell = new Shell();	
+				final Shell shell = new Shell();
 				shell.setText(LayoutExample.getResourceString("Generated_Code"));
 				shell.setLayout(new FillLayout());
 				final Text text = new Text(shell, SWT.BORDER | SWT.MULTI | SWT.V_SCROLL | SWT.H_SCROLL);
 				String layoutCode = generateCode().toString ();
 				if (layoutCode.length() == 0) return;
 				text.setText(layoutCode);
-				
+
 				Menu bar = new Menu(shell, SWT.BAR);
 				shell.setMenuBar(bar);
 				MenuItem editItem = new MenuItem(bar, SWT.CASCADE);
@@ -281,7 +277,7 @@ abstract class Tab {
 					}
 				});
 				editItem.setMenu(menu);
-				
+
 				shell.pack();
 				shell.setSize(500, 600);
 				shell.open();
@@ -289,12 +285,12 @@ abstract class Tab {
 					if (!display.readAndDispatch()) display.sleep();
 			}
 		});
-	
+
 		createChildWidgets();
 	}
-	
+
 	/**
-	 * Creates the controls for modifying the "children" 
+	 * Creates the controls for modifying the "children"
 	 * table, and the table itself.
 	 * Subclasses override this method to augment the
 	 * standard table.
@@ -310,7 +306,7 @@ abstract class Tab {
 		gridData.heightHint = 150;
 		table.setLayoutData (gridData);
 		table.addTraverseListener (traverseListener);
-		
+
 		/* Add columns to the table */
 		String [] columnHeaders = getLayoutDataFieldNames ();
 		for (int i = 0; i < columnHeaders.length; i++) {
@@ -330,34 +326,31 @@ abstract class Tab {
 	void createComboEditor (CCombo combo, TableEditor comboEditor) {
 		combo.setItems (OPTIONS);
 		combo.setText (newItem.getText (1));
-		
+
 		/* Set up editor */
 		comboEditor.horizontalAlignment = SWT.LEFT;
 		comboEditor.grabHorizontal = true;
 		comboEditor.minimumWidth = 50;
 		comboEditor.setEditor (combo, newItem, 1);
-		
+
 		/* Add listener */
-		combo.addTraverseListener(new TraverseListener() {
-        	@Override
-			public void keyTraversed(TraverseEvent e) {
-            	if (e.detail == SWT.TRAVERSE_TAB_NEXT || e.detail == SWT.TRAVERSE_RETURN) {
-            		comboReset = true;
-                    resetEditors ();
-                }
-                if (e.detail == SWT.TRAVERSE_ESCAPE) {
-                	disposeEditors ();
-                }
-            }
-        });
+		combo.addTraverseListener(e -> {
+			if (e.detail == SWT.TRAVERSE_TAB_NEXT || e.detail == SWT.TRAVERSE_RETURN) {
+				comboReset = true;
+		        resetEditors ();
+		    }
+		    if (e.detail == SWT.TRAVERSE_ESCAPE) {
+		    	disposeEditors ();
+		    }
+		});
 	}
-	
+
 	/**
 	 * Creates the "control" group. This is the group on the
 	 * right half of each example tab. It contains controls
 	 * for adding new children to the layoutComposite, and
 	 * for modifying the children's layout data.
-	 */	
+	 */
 	void createControlGroup () {
 		controlGroup = new Group (sash, SWT.NONE);
 		controlGroup.setText (LayoutExample.getResourceString("Parameters"));
@@ -373,7 +366,7 @@ abstract class Tab {
 				resetEditors ();
 				GridData data = (GridData)layoutComposite.getLayoutData();
 				if (preferredButton.getSelection ()) {
-					data.heightHint = data.widthHint = SWT.DEFAULT;	
+					data.heightHint = data.widthHint = SWT.DEFAULT;
 					data.verticalAlignment = data.horizontalAlignment = 0;
 					data.grabExcessVerticalSpace = data.grabExcessHorizontalSpace = false;
 				} else {
@@ -384,10 +377,10 @@ abstract class Tab {
 				layoutGroup.layout (true);
 			}
 		});
-		preferredButton.setLayoutData (new GridData (SWT.FILL, SWT.CENTER, true, false, 2, 1));	
+		preferredButton.setLayoutData (new GridData (SWT.FILL, SWT.CENTER, true, false, 2, 1));
 		createControlWidgets ();
 	}
-		
+
 	/**
 	 * Creates the "control" widget children.
 	 * Subclasses override this method to augment
@@ -396,14 +389,14 @@ abstract class Tab {
 	void createControlWidgets () {
 		createChildGroup ();
 	}
-	
+
 	/**
 	 * Creates the example layout.
 	 * Subclasses override this method.
 	 */
 	void createLayout () {
 	}
-	
+
 	/**
 	 * Creates the composite that contains the example layout.
 	 */
@@ -412,7 +405,7 @@ abstract class Tab {
 		layoutComposite.setLayoutData (new GridData (SWT.FILL, SWT.FILL, true, true));
 		createLayout ();
 	}
-	
+
 	/**
 	 * Creates the layout group. This is the group on the
 	 * left half of each example tab.
@@ -423,7 +416,7 @@ abstract class Tab {
 		layoutGroup.setLayout (new GridLayout ());
 		createLayoutComposite ();
 	}
-	
+
 	/**
 	 * Creates the tab folder page.
 	 *
@@ -440,22 +433,22 @@ abstract class Tab {
 		tabFolderPage.setLayoutData (new GridData(SWT.FILL, SWT.FILL, true, true));
 		tabFolderPage.setLayout (new FillLayout ());
 		sash = new SashForm (tabFolderPage, SWT.HORIZONTAL);
-	
+
 		/* Create the "layout" and "control" columns */
 		createLayoutGroup ();
 		createControlGroup ();
-		
-		sash.setWeights(sashWeights ());		
+
+		sash.setWeights(sashWeights ());
 		return tabFolderPage;
 	}
-	
+
 	/**
 	 * Return the initial weight of the layout and control groups within the SashForm.
 	 * Subclasses may override to provide tab-specific weights.
 	 * @return the desired sash weights for the tab page
 	 */
 	int[] sashWeights () {
-		return new int[] {50, 50};		
+		return new int[] {50, 50};
 	}
 
 	/**
@@ -468,35 +461,32 @@ abstract class Tab {
 		textEditor.horizontalAlignment = SWT.LEFT;
 		textEditor.grabHorizontal = true;
 		textEditor.setEditor (text, newItem, column);
-		
-		text.addTraverseListener(new TraverseListener() {
-        	@Override
-			public void keyTraversed(TraverseEvent e) {
-            	if (e.detail == SWT.TRAVERSE_TAB_NEXT) {
-                    resetEditors (true);
-                }
-                if (e.detail == SWT.TRAVERSE_ESCAPE) {
-                	disposeEditors ();
-                }
-            }
-        });
+
+		text.addTraverseListener(e -> {
+			if (e.detail == SWT.TRAVERSE_TAB_NEXT) {
+		        resetEditors (true);
+		    }
+		    if (e.detail == SWT.TRAVERSE_ESCAPE) {
+		    	disposeEditors ();
+		    }
+		});
 	}
-	
-	/** 
+
+	/**
 	 * Disposes the editors without placing their contents
 	 * into the table.
 	 * Subclasses override this method.
 	 */
 	void disposeEditors () {
 	}
-	
+
 	/**
 	 * Generates the code needed to produce the example layout.
-	 */	
+	 */
 	StringBuffer generateCode () {
 		/* Make sure all information being entered is stored in the table */
 		resetEditors ();
-		
+
 		/* Get names for controls in the layout */
 		names = new String [children.length];
 		for (int i = 0; i < children.length; i++) {
@@ -509,9 +499,9 @@ abstract class Tab {
 				names [i] = controlType.toLowerCase () + i;
 			} else {
 				names [i] = myItem.getText(0);
-			}	
+			}
 		}
-	
+
 		/* Create StringBuffer containing the code */
 		StringBuffer code = new StringBuffer ();
 		code.append ("import org.eclipse.swt.*;\n");
@@ -524,18 +514,18 @@ abstract class Tab {
 		code.append ("\tpublic static void main (String [] args) {\n");
 		code.append ("\t\tDisplay display = new Display ();\n");
 		code.append ("\t\tShell shell = new Shell (display);\n");
-		
+
 		/* Get layout specific code */
 		code.append (generateLayoutCode ());
-		
+
 		code.append ("\n\t\tshell.pack ();\n\t\tshell.open ();\n\n");
 		code.append ("\t\twhile (!shell.isDisposed ()) {\n");
 		code.append ("\t\t\tif (!display.readAndDispatch ())\n");
 		code.append ("\t\t\t\tdisplay.sleep ();\n\t\t}\n\t\tdisplay.dispose ();\n\t}\n}");
-		
+
 		return code;
 	}
-	
+
 	boolean needsGraphics() {
 		return false;
 	}
@@ -551,9 +541,9 @@ abstract class Tab {
 	StringBuffer generateLayoutCode () {
 		return new StringBuffer ();
 	}
-	
+
 	/**
-	 * Returns the StringBuffer for the code which will 
+	 * Returns the StringBuffer for the code which will
 	 * create a child control.
 	 */
 	StringBuffer getChildCode (Control control, int i) {
@@ -567,14 +557,14 @@ abstract class Tab {
 			styleString = "SWT.PUSH";
 		} else if (controlType.equals ("StyledText")) {
 			styleString = "SWT.MULTI | SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL";
-		} else if (controlType.equals ("Canvas") || controlType.equals ("Composite") || 
+		} else if (controlType.equals ("Canvas") || controlType.equals ("Composite") ||
 					controlType.equals ("Table") || controlType.equals ("StyledText") ||
 					controlType.equals ("ToolBar") || controlType.equals ("Tree") ||
 					controlType.equals ("List") || controlType.equals ("Text")) {
 			styleString = "SWT.BORDER";
 		} else styleString = "SWT.NONE";
 		/* Write out the control being declared */
-		code.append ("\n\t\t" + controlType + " " + names [i] + 
+		code.append ("\n\t\t" + controlType + " " + names [i] +
 					 " = new " + controlType + " (shell, " + styleString + ");\n");
 		/* Add items to those controls that need items */
 		if (controlType.equals ("Combo") || controlType.equals ("List")) {
@@ -614,8 +604,8 @@ abstract class Tab {
 			code.append ("\t\t" + names [i] + ".setSize (" + names [i] + ".computeSize (SWT.DEFAULT, SWT.DEFAULT));\n");
 		} else if (controlType.equals ("ProgressBar")) {
 			code.append ("\t\t" + names [i] + ".setSelection (50);\n");
-		} 
-		/* Set text for those controls that support it */			 
+		}
+		/* Set text for those controls that support it */
 		if (controlType.equals ("Button") ||
 			controlType.equals ("Combo") ||
 			controlType.equals ("Group") ||
@@ -643,7 +633,7 @@ abstract class Tab {
 	String [] getLayoutDataFieldNames () {
 		return new String [] {};
 	}
-	
+
 	/**
 	 * Gets the text for the tab folder item.
 	 * Subclasses override this method.
@@ -651,7 +641,7 @@ abstract class Tab {
 	String getTabText () {
 		return "";
 	}
-	
+
 	/**
 	 * Refreshes the composite and draws all controls
 	 * in the layout example.
@@ -684,10 +674,10 @@ abstract class Tab {
 				combo.setItems (itemValues);
 				combo.setText (controlName);
 				children [i] = combo;
-			} else if (control.equals ("Composite")) { 
+			} else if (control.equals ("Composite")) {
 				Composite composite = new Composite (layoutComposite, SWT.BORDER);
 				children [i] = composite;
-		    } else if (control.equals ("CoolBar")) { 
+		    } else if (control.equals ("CoolBar")) {
 		    	CoolBar coolBar = new CoolBar (layoutComposite, SWT.NONE);
 		    	ToolBar toolBar = new ToolBar (coolBar, SWT.BORDER);
 				ToolItem item = new ToolItem (toolBar, 0);
@@ -737,7 +727,7 @@ abstract class Tab {
 			} else if (control.equals ("StyledText")) {
 				StyledText styledText = new StyledText (layoutComposite, SWT.MULTI | SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL);
 				styledText.setText (controlName);
-				children [i] = styledText;			
+				children [i] = styledText;
 			} else if (control.equals ("Table")) {
 				Table table = new Table (layoutComposite, SWT.BORDER);
 				table.setLinesVisible (true);
@@ -764,28 +754,28 @@ abstract class Tab {
 				TreeItem item2 = new TreeItem (tree, 0);
 				item2.setText (LayoutExample.getResourceString ("Item",new String [] {"2"}));
 				children [i] = tree;
-			} 
+			}
 		}
-	}	
-	
+	}
+
 	void resetEditors () {
 		resetEditors (false);
 	}
-	
+
 	/**
 	 * Takes information from TableEditors and stores it.
 	 * Subclasses override this method.
 	 */
 	void resetEditors (boolean tab) {
 	}
-	
+
 	/**
-	 * Sets the layout data for the children of the layout. 
+	 * Sets the layout data for the children of the layout.
 	 * Subclasses override this method.
 	 */
 	void setLayoutData () {
 	}
-	
+
 	/**
 	 * Sets the state of the layout.
 	 * Subclasses override this method.
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/paint/PaintSurface.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/paint/PaintSurface.java
index e67556e..3dfd5a6 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/paint/PaintSurface.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/paint/PaintSurface.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2005 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -12,13 +12,8 @@ package org.eclipse.swt.examples.paint;
 
 import org.eclipse.swt.events.ControlAdapter;
 import org.eclipse.swt.events.ControlEvent;
-import org.eclipse.swt.events.DisposeEvent;
-import org.eclipse.swt.events.DisposeListener;
 import org.eclipse.swt.events.MouseAdapter;
 import org.eclipse.swt.events.MouseEvent;
-import org.eclipse.swt.events.MouseMoveListener;
-import org.eclipse.swt.events.PaintEvent;
-import org.eclipse.swt.events.PaintListener;
 import org.eclipse.swt.events.SelectionAdapter;
 import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.graphics.Color;
@@ -90,12 +85,7 @@ public class PaintSurface {
 		setPaintSession(null);
 
 		/* Add our listeners */
-		paintCanvas.addDisposeListener(new DisposeListener() {
-			@Override
-			public void widgetDisposed(DisposeEvent e) {
-				displayFDC.gc.dispose();
-			}			
-		});
+		paintCanvas.addDisposeListener(e -> displayFDC.gc.dispose());
 		paintCanvas.addMouseListener(new MouseAdapter() {
 			@Override
 			public void mouseDown(MouseEvent event) {
@@ -111,73 +101,67 @@ public class PaintSurface {
 			public void mouseDoubleClick(MouseEvent event) {
 				processMouseEventCoordinates(event);
 				if (paintSession != null) paintSession.mouseDoubleClick(event);
-			}			
-		});
-		paintCanvas.addMouseMoveListener(new MouseMoveListener() {
-			@Override
-			public void mouseMove(MouseEvent event) {
-				processMouseEventCoordinates(event);
-				if (paintSession != null) paintSession.mouseMove(event);
 			}
 		});
-		paintCanvas.addPaintListener(new PaintListener() {
-			@Override
-			public void paintControl(PaintEvent event) {
-				if (rubberband.isEmpty()) {
-					// Nothing to merge, so we just refresh
-					event.gc.drawImage(image,
-						displayFDC.xOffset + event.x, displayFDC.yOffset + event.y, event.width, event.height,
-						event.x, event.y, event.width, event.height);
-				} else {
-					/*
-					 * Avoid flicker when merging overlayed objects by constructing the image on
-					 * a backbuffer first, then blitting it to the screen.
-					 */
-					// Check that the backbuffer is large enough
-					if (paintImage != null) {
-						Rectangle rect = paintImage.getBounds();
-						if ((event.width + event.x > rect.width) ||
-							(event.height + event.y > rect.height)) {
-							paintFDC.gc.dispose();
-							paintImage.dispose();
-							paintImage = null;
-						}
-					}
-					if (paintImage == null) {
-						Display display = getDisplay();
-						Rectangle rect = display.getClientArea();
-						paintImage = new Image(display,
-							Math.max(rect.width, event.width + event.x),
-							Math.max(rect.height, event.height + event.y));
-						paintFDC.gc = new GC(paintImage);
+		paintCanvas.addMouseMoveListener(event -> {
+			processMouseEventCoordinates(event);
+			if (paintSession != null) paintSession.mouseMove(event);
+		});
+		paintCanvas.addPaintListener(event -> {
+			if (rubberband.isEmpty()) {
+				// Nothing to merge, so we just refresh
+				event.gc.drawImage(image,
+					displayFDC.xOffset + event.x, displayFDC.yOffset + event.y, event.width, event.height,
+					event.x, event.y, event.width, event.height);
+			} else {
+				/*
+				 * Avoid flicker when merging overlayed objects by constructing the image on
+				 * a backbuffer first, then blitting it to the screen.
+				 */
+				// Check that the backbuffer is large enough
+				if (paintImage != null) {
+					Rectangle rect1 = paintImage.getBounds();
+					if ((event.width + event.x > rect1.width) ||
+						(event.height + event.y > rect1.height)) {
+						paintFDC.gc.dispose();
+						paintImage.dispose();
+						paintImage = null;
 					}
-					// Setup clipping and the FDC
-					Region clipRegion = new Region();
-					event.gc.getClipping(clipRegion);					
-					paintFDC.gc.setClipping(clipRegion);
-					clipRegion.dispose();
-
-					paintFDC.xOffset = displayFDC.xOffset;
-					paintFDC.yOffset = displayFDC.yOffset;
-					paintFDC.xScale = displayFDC.xScale;
-					paintFDC.yScale = displayFDC.yScale;
-					
-					// Merge the overlayed objects into the image, then blit
-					paintFDC.gc.drawImage(image,
-						displayFDC.xOffset + event.x, displayFDC.yOffset + event.y, event.width, event.height,
-						event.x, event.y, event.width, event.height);
-					rubberband.draw(paintFDC);
-					event.gc.drawImage(paintImage,
-						event.x, event.y, event.width, event.height,
-						event.x, event.y, event.width, event.height);
 				}
+				if (paintImage == null) {
+					Display display = getDisplay();
+					Rectangle rect2 = display.getClientArea();
+					paintImage = new Image(display,
+						Math.max(rect2.width, event.width + event.x),
+						Math.max(rect2.height, event.height + event.y));
+					paintFDC.gc = new GC(paintImage);
+				}
+				// Setup clipping and the FDC
+				Region clipRegion = new Region();
+				event.gc.getClipping(clipRegion);
+				paintFDC.gc.setClipping(clipRegion);
+				clipRegion.dispose();
+
+				paintFDC.xOffset = displayFDC.xOffset;
+				paintFDC.yOffset = displayFDC.yOffset;
+				paintFDC.xScale = displayFDC.xScale;
+				paintFDC.yScale = displayFDC.yScale;
+
+				// Merge the overlayed objects into the image, then blit
+				paintFDC.gc.drawImage(image,
+					displayFDC.xOffset + event.x, displayFDC.yOffset + event.y, event.width, event.height,
+					event.x, event.y, event.width, event.height);
+				rubberband.draw(paintFDC);
+				event.gc.drawImage(paintImage,
+					event.x, event.y, event.width, event.height,
+					event.x, event.y, event.width, event.height);
 			}
 		});
 		paintCanvas.addControlListener(new ControlAdapter() {
 			@Override
 			public void controlResized(ControlEvent event) {
 				handleResize();
-			}			
+			}
 		});
 
 		/* Set up the paint canvas scroll bars */
@@ -199,7 +183,7 @@ public class PaintSurface {
 		});
 		handleResize();
 	}
-	
+
 	/**
 	 * Disposes of the PaintSurface's resources.
 	 */
@@ -255,7 +239,7 @@ public class PaintSurface {
 	 * If oldPaintSession != paintSession calls oldPaintSession.end()
 	 * and paintSession.begin()
 	 * </p>
-	 * 
+	 *
 	 * @param paintSession the paint session to activate; null to disable all sessions
 	 */
 	public void setPaintSession(PaintSession paintSession) {
@@ -276,7 +260,7 @@ public class PaintSurface {
 
 	/**
 	 * Returns the current paint session.
-	 * 
+	 *
 	 * @return the current paint session, null if none is active
 	 */
 	public PaintSession getPaintSession() {
@@ -285,7 +269,7 @@ public class PaintSurface {
 
 	/**
 	 * Returns the current paint tool.
-	 * 
+	 *
 	 * @return the current paint tool, null if none is active (though some other session
 	 *         might be)
 	 */
@@ -305,7 +289,7 @@ public class PaintSurface {
 
 	/**
 	 * Draws a Figure object to the screen and to the backing store permanently.
-	 * 
+	 *
 	 * @param object the object to draw onscreen
 	 */
 	public void drawFigure(Figure object) {
@@ -319,7 +303,7 @@ public class PaintSurface {
 	 * This object will be drawn to the screen as a preview and refreshed appropriately
 	 * until the selection is either cleared or committed.
 	 * </p>
-	 * 
+	 *
 	 * @param object the object to add to the selection
 	 */
 	public void addRubberbandSelection(Figure object) {
@@ -356,7 +340,7 @@ public class PaintSurface {
 		if (isRubberbandHidden()) rubberband.draw(displayFDC);
 		rubberband.clear();
 	}
-	
+
 	/**
 	 * Hides the rubberband (but does not eliminate it).
 	 * <p>
@@ -372,7 +356,7 @@ public class PaintSurface {
 			paintCanvas.redraw(r.x, r.y, r.width, r.height, true);
 			region.dispose();
 		}
-	}		
+	}
 
 	/**
 	 * Shows (un-hides) the rubberband.
@@ -390,10 +374,10 @@ public class PaintSurface {
 			rubberband.draw(displayFDC);
 		}
 	}
-	
+
 	/**
 	 * Determines if the rubberband is hidden.
-	 * 
+	 *
 	 * @return true iff the rubber is hidden
 	 */
 	public boolean isRubberbandHidden() {
@@ -402,7 +386,7 @@ public class PaintSurface {
 
 	/**
 	 * Handles a horizontal scroll event
-	 * 
+	 *
 	 * @param scrollbar the horizontal scroll bar that posted this event
 	 */
 	public void scrollHorizontally(ScrollBar scrollBar) {
@@ -421,7 +405,7 @@ public class PaintSurface {
 
 	/**
 	 * Handles a vertical scroll event
-	 * 
+	 *
 	 * @param scrollbar the vertical scroll bar that posted this event
 	 */
 	public void scrollVertically(ScrollBar scrollBar) {
@@ -437,7 +421,7 @@ public class PaintSurface {
 			}
 		}
 	}
-	
+
 	/**
 	 * Handles resize events
 	 */
@@ -484,7 +468,7 @@ public class PaintSurface {
 		currentPosition.y = event.y =
 			Math.min(Math.max(event.y, 0), visibleHeight - 1) + displayFDC.yOffset;
 	}
-	
+
 	/**
 	 * Clears the status bar.
 	 */
@@ -504,10 +488,10 @@ public class PaintSurface {
 		statusActionInfo = (action != null) ? action : "";
 		updateStatus();
 	}
-	
+
 	/**
 	 * Sets the status bar message text.
-	 * 
+	 *
 	 * @param message the message to display, null to clear
 	 */
 	public void setStatusMessage(String message) {
@@ -517,7 +501,7 @@ public class PaintSurface {
 
 	/**
 	 * Sets the coordinates in the status bar.
-	 * 
+	 *
 	 * @param coord the coordinates to display, null to clear
 	 */
 	public void setStatusCoord(Point coord) {
@@ -528,7 +512,7 @@ public class PaintSurface {
 
 	/**
 	 * Sets the coordinate range in the status bar.
-	 * 
+	 *
 	 * @param a the "from" coordinate, must not be null
 	 * @param b the "to" coordinate, must not be null
 	 */
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/texteditor/TextEditor.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/texteditor/TextEditor.java
index c9c7d1c..c5334d4 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/texteditor/TextEditor.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/texteditor/TextEditor.java
@@ -23,10 +23,7 @@ import java.util.StringTokenizer;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.browser.Browser;
 import org.eclipse.swt.custom.Bullet;
-import org.eclipse.swt.custom.CaretEvent;
-import org.eclipse.swt.custom.CaretListener;
 import org.eclipse.swt.custom.PaintObjectEvent;
-import org.eclipse.swt.custom.PaintObjectListener;
 import org.eclipse.swt.custom.ST;
 import org.eclipse.swt.custom.StyleRange;
 import org.eclipse.swt.custom.StyledText;
@@ -35,11 +32,9 @@ import org.eclipse.swt.events.ControlEvent;
 import org.eclipse.swt.events.MenuAdapter;
 import org.eclipse.swt.events.MenuEvent;
 import org.eclipse.swt.events.ModifyEvent;
-import org.eclipse.swt.events.ModifyListener;
 import org.eclipse.swt.events.SelectionAdapter;
 import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.events.VerifyEvent;
-import org.eclipse.swt.events.VerifyListener;
 import org.eclipse.swt.graphics.Color;
 import org.eclipse.swt.graphics.Font;
 import org.eclipse.swt.graphics.FontData;
@@ -85,7 +80,7 @@ public class TextEditor {
 	ToolItem boldControl, italicControl, leftAlignmentItem, centerAlignmentItem, rightAlignmentItem, justifyAlignmentItem, blockSelectionItem;
 	Combo fontNameControl, fontSizeControl;
 	MenuItem underlineSingleItem, underlineDoubleItem, underlineErrorItem, underlineSquiggleItem, borderSolidItem, borderDashItem, borderDotItem;
-	
+
 	boolean insert = true;
 	StyleRange[] selectedRanges;
 	int newCharCount, start;
@@ -121,7 +116,7 @@ public class TextEditor {
 	static final int BORDER_DASH = 1 << 24;
 	static final int BORDER_DOT = 1 << 25;
 	static final int BORDER = BORDER_SOLID | BORDER_DASH | BORDER_DOT;
-	
+
 	static final boolean SAMPLE_TEXT = false;
 	static final boolean USE_BASELINE = false;
 
@@ -137,7 +132,7 @@ public class TextEditor {
 			"36",		//$NON-NLS-1$
 			"48" 		//$NON-NLS-1$
 	};
-	
+
 	static final ResourceBundle resources = ResourceBundle.getBundle("examples_texteditor");  //$NON-NLS-1$
 
 	static String getResourceString(String key) {
@@ -149,7 +144,7 @@ public class TextEditor {
 			return "!" + key + "!";  //$NON-NLS-1$ //$NON-NLS-2$
 		}
 	}
-	
+
 	public static void main(String[] args) {
 		Display display = new Display();
 		TextEditor editor = new TextEditor();
@@ -163,15 +158,15 @@ public class TextEditor {
 	}
 
 	/*
-	 * Default constructor is needed so that example launcher can create an instance. 
+	 * Default constructor is needed so that example launcher can create an instance.
 	 */
 	public TextEditor() {
 	}
-	
+
 	public TextEditor(Display display) {
 		open(display);
 	}
-	
+
 	public Shell open (Display display) {
 		this.display = display;
 		initResources();
@@ -189,7 +184,7 @@ public class TextEditor {
 		shell.open();
 		return shell;
 	}
-	
+
 	void addControl(Control control) {
 		int offset = styledText.getCaretOffset();
 		styledText.replaceTextRange(offset, 0, "\uFFFC"); //$NON-NLS-1$
@@ -216,7 +211,7 @@ public class TextEditor {
 		StyleRange[] styles = {style};
 		styledText.setStyleRanges(0,0, ranges, styles);
 	}
-	
+
 	void adjustFontSize (int increment) {
 		int newIndex = fontSizeControl.getSelectionIndex() + increment;
 		if (0 <= newIndex && newIndex < fontSizeControl.getItemCount()) {
@@ -236,8 +231,8 @@ public class TextEditor {
 		MenuItem fileItem = new MenuItem(menu, SWT.CASCADE);
 		Menu fileMenu = new Menu(shell, SWT.DROP_DOWN);
 		fileItem.setText(getResourceString("File_menuitem")); //$NON-NLS-1$
-		fileItem.setMenu(fileMenu);		
-		
+		fileItem.setMenu(fileMenu);
+
 		MenuItem openItem = new MenuItem(fileMenu, SWT.PUSH);
 		openItem.setText(getResourceString("Open_menuitem")); //$NON-NLS-1$
 		openItem.addSelectionListener(new SelectionAdapter () {
@@ -262,44 +257,44 @@ public class TextEditor {
 		        		showError(getResourceString("Error"), e.getMessage()); //$NON-NLS-1$
 		        	}
 		        }
-			}					
+			}
 		});
-		
+
 		final MenuItem saveItem = new MenuItem(fileMenu, SWT.PUSH);
 		saveItem.setText(getResourceString("Save_menuitem")); //$NON-NLS-1$
 		saveItem.addSelectionListener(new SelectionAdapter () {
 			@Override
 			public void widgetSelected(SelectionEvent event) {
 				saveFile();
-			}											
+			}
 		});
-		
+
 		fileMenu.addMenuListener(new MenuAdapter() {
 			@Override
 			public void menuShown(MenuEvent event){
 				saveItem.setEnabled(fileName != null);
-			}			 			
+			}
 		});
-		
+
 		MenuItem saveAsItem = new MenuItem(fileMenu, SWT.PUSH);
 		saveAsItem.setText(getResourceString("SaveAs_menuitem")); //$NON-NLS-1$
 		saveAsItem.addSelectionListener(new SelectionAdapter () {
 			@Override
 			public void widgetSelected(SelectionEvent event) {
 				FileDialog dialog = new FileDialog (shell, SWT.SAVE);
-				dialog.setFilterNames(new String [] {getResourceString("Text_Documents")}); //$NON-NLS-1$ 
+				dialog.setFilterNames(new String [] {getResourceString("Text_Documents")}); //$NON-NLS-1$
 				dialog.setFilterExtensions(new String [] {"*.txt"}); //$NON-NLS-1$
 				if (fileName != null) dialog.setFileName(fileName);
-				String name = dialog.open(); 
+				String name = dialog.open();
 				if (name != null) {
 					fileName = name;
 					saveFile();
 				}
 			}
 		});
-		
+
 		new MenuItem(fileMenu, SWT.SEPARATOR);
-		
+
 		MenuItem exitItem = new MenuItem(fileMenu, SWT.PUSH);
 		exitItem.setText(getResourceString("Exit_menuitem")); //$NON-NLS-1$
 		exitItem.addSelectionListener(new SelectionAdapter() {
@@ -307,7 +302,7 @@ public class TextEditor {
 			public void widgetSelected(SelectionEvent event) {
 				shell.dispose();
 			}
-		});	
+		});
 
 		MenuItem editItem = new MenuItem(menu, SWT.CASCADE);
 		final Menu editMenu = new Menu(shell, SWT.DROP_DOWN);
@@ -450,7 +445,7 @@ public class TextEditor {
 				updateToolBar();
 			}
 		});
-		
+
 		MenuItem editOrientationItem = new MenuItem(editMenu, SWT.CASCADE);
 		editOrientationItem.setText(getResourceString("Orientation_menuitem")); //$NON-NLS-1$
 		Menu editOrientationMenu = new Menu(shell, SWT.DROP_DOWN);
@@ -465,7 +460,7 @@ public class TextEditor {
 			}
 		});
 		leftToRightItem.setSelection(true);
-		
+
 		MenuItem rightToLeftItem = new MenuItem(editOrientationMenu, SWT.RADIO);
 		rightToLeftItem.setText(getResourceString("RightToLeft_menuitem")); //$NON-NLS-1$
 		rightToLeftItem.addSelectionListener(new SelectionAdapter() {
@@ -474,7 +469,7 @@ public class TextEditor {
 				styledText.setOrientation(SWT.RIGHT_TO_LEFT);
 			}
 		});
-		
+
 		new MenuItem(editMenu, SWT.SEPARATOR);
 		MenuItem insertObjectItem = new MenuItem(editMenu, SWT.CASCADE);
 		insertObjectItem.setText(getResourceString("InsertObject_menuitem")); //$NON-NLS-1$
@@ -541,7 +536,7 @@ public class TextEditor {
 					loadProfile(profile);
 				}
 			};
-	
+
 			MenuItem profileItem = new MenuItem(loadProfileMenu, SWT.PUSH);
 			profileItem.setText(getResourceString("Profile1_menuitem")); //$NON-NLS-1$
 			profileItem.setData("1"); //$NON-NLS-1$
@@ -672,7 +667,7 @@ public class TextEditor {
 				if (newRgb != null) {
 					if (!newRgb.equals(rgb)) {
 						disposeResource(underlineColor);
-						underlineColor = new Color(display, newRgb);					
+						underlineColor = new Color(display, newRgb);
 					}
 					if (underlineSingleItem.getSelection()) setStyle(UNDERLINE_SINGLE);
 					else if (underlineDoubleItem.getSelection()) setStyle(UNDERLINE_DOUBLE);
@@ -681,7 +676,7 @@ public class TextEditor {
 				}
 			}
 		});
-		
+
 		final ToolItem underlineControl = new ToolItem(styleToolBar, SWT.DROP_DOWN);
 		underlineControl.setImage(iUnderline);
 		underlineControl.setToolTipText(getResourceString("Underline")); //$NON-NLS-1$
@@ -735,7 +730,7 @@ public class TextEditor {
 			}
 		});
 		borderSolidItem.setSelection(true);
-		
+
 		borderDashItem = new MenuItem(borderMenu, SWT.RADIO);
 		borderDashItem.setText(getResourceString("Dash")); //$NON-NLS-1$
 		borderDashItem.addSelectionListener(new SelectionAdapter() {
@@ -746,7 +741,7 @@ public class TextEditor {
 				}
 			}
 		});
-		
+
 		borderDotItem = new MenuItem(borderMenu, SWT.RADIO);
 		borderDotItem.setText(getResourceString("Dot")); //$NON-NLS-1$
 		borderDotItem.addSelectionListener(new SelectionAdapter() {
@@ -757,7 +752,7 @@ public class TextEditor {
 				}
 			}
 		});
-		
+
 		MenuItem borderColorItem = new MenuItem(borderMenu, SWT.PUSH);
 		borderColorItem.setText(getResourceString("Color_menuitem")); //$NON-NLS-1$
 		borderColorItem.addSelectionListener(new SelectionAdapter() {
@@ -803,7 +798,7 @@ public class TextEditor {
 		foregroundItem.setToolTipText(getResourceString("TextForeground")); //$NON-NLS-1$
 		foregroundItem.addSelectionListener(new SelectionAdapter() {
 			@Override
-			public void widgetSelected(SelectionEvent event) {		
+			public void widgetSelected(SelectionEvent event) {
 				if (event.detail == SWT.ARROW || textForeground == null) {
 					ColorDialog dialog = new ColorDialog(shell);
 					RGB rgb = textForeground != null ? textForeground.getRGB() : null;
@@ -812,10 +807,10 @@ public class TextEditor {
 					if (newRgb == null) return;
 					if (!newRgb.equals(rgb)) {
 						disposeResource(textForeground);
-						textForeground = new Color(display, newRgb);					
+						textForeground = new Color(display, newRgb);
 					}
 				}
-				setStyle(FOREGROUND);				
+				setStyle(FOREGROUND);
 			}
 		});
 
@@ -824,7 +819,7 @@ public class TextEditor {
 		backgroundItem.setToolTipText(getResourceString("TextBackground")); //$NON-NLS-1$
 		backgroundItem.addSelectionListener(new SelectionAdapter() {
 			@Override
-			public void widgetSelected(SelectionEvent event) {			
+			public void widgetSelected(SelectionEvent event) {
 				if (event.detail == SWT.ARROW || textBackground == null) {
 					ColorDialog dialog = new ColorDialog(shell);
 					RGB rgb = textBackground != null ? textBackground.getRGB() : null;
@@ -880,10 +875,10 @@ public class TextEditor {
 				setLink();
 			}
 		});
-		
+
 		CoolItem coolItem = new CoolItem(coolBar, SWT.NONE);
 		coolItem.setControl(styleToolBar);
-		
+
 		Composite composite = new Composite(coolBar, SWT.NONE);
 		GridLayout layout = new GridLayout(2, false);
 		layout.marginHeight = 1;
@@ -919,7 +914,7 @@ public class TextEditor {
 				styledText.invokeAction(ST.TOGGLE_BLOCKSELECTION);
 			}
 		});
-		
+
 		leftAlignmentItem = new ToolItem(alignmentToolBar, SWT.RADIO);
 		leftAlignmentItem.setImage(iLeftAlignment);
 		leftAlignmentItem.setToolTipText(getResourceString("AlignLeft")); //$NON-NLS-1$
@@ -1064,7 +1059,7 @@ public class TextEditor {
 			if (disposeStrike && style.strikeoutColor != strikeoutColor && style.strikeoutColor != null) style.strikeoutColor.dispose();
 			if (disposeUnder && style.underlineColor != underlineColor && style.underlineColor != null) style.underlineColor.dispose();
 			if (disposeBorder && style.borderColor != borderColor && style.borderColor != null) style.borderColor.dispose();
-			
+
 			Object data = style.data;
 			if (data != null) {
 				if (data instanceof Image) ((Image)data).dispose();
@@ -1155,13 +1150,13 @@ public class TextEditor {
 		}
 		return null;
 	}
-	
+
 	void handleKeyDown (Event event) {
 		if (event.keyCode == SWT.INSERT) {
 			insert = !insert;
 		}
 	}
-	
+
 	void handleModify (ModifyEvent event) {
 		if (newCharCount > 0 && start >= 0) {
 			StyleRange style = new StyleRange();
@@ -1213,12 +1208,12 @@ public class TextEditor {
 				}
 			}
 			int[] ranges = {start, newCharCount};
-			StyleRange[] styles = {style}; 
+			StyleRange[] styles = {style};
 			styledText.setStyleRanges(start, newCharCount, ranges, styles);
 		}
 		disposeRanges(selectedRanges);
 	}
-	
+
 	void handleMouseUp (Event event) {
 		if (link != null) {
 			int offset = styledText.getCaretOffset();
@@ -1235,7 +1230,7 @@ public class TextEditor {
 			}
 		}
 	}
-	
+
 	void handlePaintObject(PaintObjectEvent event) {
 		GC gc = event.gc;
 		StyleRange style = event.style;
@@ -1298,33 +1293,15 @@ public class TextEditor {
 	}
 
 	void installListeners() {
-		styledText.addCaretListener(new CaretListener() {
-			@Override
-			public void caretMoved(CaretEvent event) {
-				updateStatusBar();
-				updateToolBar();
-			}
+		styledText.addCaretListener(event -> {
+			updateStatusBar();
+			updateToolBar();
 		});
 		styledText.addListener(SWT.MouseUp, event -> handleMouseUp(event));
 		styledText.addListener(SWT.KeyDown, event -> handleKeyDown(event));
-		styledText.addVerifyListener(new VerifyListener() {
-			@Override
-			public void verifyText(VerifyEvent event) {
-				handleVerifyText(event);
-			}
-		});
-		styledText.addModifyListener(new ModifyListener(){
-			@Override
-			public void modifyText(ModifyEvent event) {
-				handleModify(event);
-			}
-		});
-		styledText.addPaintObjectListener(new PaintObjectListener() {
-			@Override
-			public void paintObject(PaintObjectEvent event) {
-				handlePaintObject(event);
-			}
-		});
+		styledText.addVerifyListener(event -> handleVerifyText(event));
+		styledText.addModifyListener(event -> handleModify(event));
+		styledText.addPaintObjectListener(event -> handlePaintObject(event));
 		styledText.addListener(SWT.Dispose, event -> {
 			StyleRange[] styles = styledText.getStyleRanges(0, styledText.getCharCount(), false);
 			for (int i = 0; i < styles.length; i++) {
@@ -1344,7 +1321,7 @@ public class TextEditor {
 	}
 
 	Image loadImage(Display display, String fileName) {
-		Image image = null; 
+		Image image = null;
 		try {
 			InputStream sourceStream = getClass().getResourceAsStream(fileName + ".ico");  //$NON-NLS-1$ //$NON-NLS-2$
 			ImageData source = new ImageData(sourceStream);
@@ -1440,7 +1417,7 @@ public class TextEditor {
 		iNumberedList = null;
 		iLink.dispose();
 		iLink = null;
-		
+
 		if (textFont != null) textFont.dispose();
 		textFont = null;
 		if (textForeground != null) textForeground.dispose();
@@ -1476,7 +1453,7 @@ public class TextEditor {
 	        }
 		}
 	}
-	
+
 	void setBullet(int type) {
 		Point selection = styledText.getSelection();
 		int lineStart = styledText.getLineAtOffset(selection.x);
@@ -1490,7 +1467,7 @@ public class TextEditor {
 			styledText.setLineBullet(lineIndex, 1, oldBullet != null ? null : bullet);
 		}
 	}
-	
+
 	void setLink() {
 		final Shell dialog = new Shell(shell, SWT.APPLICATION_MODAL | SWT.SHELL_TRIM);
 		dialog.setLayout(new GridLayout(2, false));
@@ -1525,7 +1502,7 @@ public class TextEditor {
 			}
 		}
 	}
-	
+
 	void setStyle(int style) {
 		int[] ranges = styledText.getSelectionRanges();
 		int i = 0;
@@ -1540,7 +1517,7 @@ public class TextEditor {
 	}
 	void setStyle(int style, int start, int length) {
 		if (length == 0) return;
-		
+
 		/* Create new style range */
 		StyleRange newRange = new StyleRange();
 		if ((style & FONT) != 0) {
@@ -1602,14 +1579,14 @@ public class TextEditor {
 			}
 			newRange.borderColor = borderColor;
 		}
-		
+
 		int newRangeStart = start;
 		int newRangeLength = length;
 		int[] ranges = styledText.getRanges(start, length);
-		StyleRange[] styles = styledText.getStyleRanges(start, length, false);		
+		StyleRange[] styles = styledText.getStyleRanges(start, length, false);
 		int maxCount = ranges.length * 2 + 2;
 		int[] newRanges = new int[maxCount];
-		StyleRange[] newStyles = new StyleRange[maxCount / 2];		
+		StyleRange[] newStyles = new StyleRange[maxCount / 2];
 		int count = 0;
 		for (int i = 0; i < ranges.length; i+=2) {
 			int rangeStart = ranges[i];
@@ -1685,7 +1662,7 @@ public class TextEditor {
 					mergedRange.borderColor = null;
 				}
 			}
-			
+
 			newRanges[count] = rangeStart;
 			newRanges[count + 1] = rangeLength;
 			newStyles[count / 2] = mergedRange;
@@ -1697,7 +1674,7 @@ public class TextEditor {
 			newStyles[count / 2] = newRange;
 			count += 2;
 		}
-		if (0 < count && count < maxCount) {			
+		if (0 < count && count < maxCount) {
 			int[] tmpRanges = new int[count];
 			StyleRange[] tmpStyles = new StyleRange[count / 2];
 			System.arraycopy(newRanges, 0, tmpRanges, 0, count);
@@ -1708,7 +1685,7 @@ public class TextEditor {
 		styledText.setStyleRanges(start, length, newRanges, newStyles);
 		disposeRanges(styles);
 	}
-	
+
 	void showError (String title, String message) {
 		MessageBox messageBox = new MessageBox(shell, SWT.ICON_ERROR | SWT.CLOSE);
 		messageBox.setText(title);
@@ -1726,7 +1703,7 @@ public class TextEditor {
 				+ lineIndex + "\t"						//$NON-NLS-1$
 				+ insertLabel);
 	}
-	
+
 	void updateStyleState(int style, int changingStyle) {
 		if ((style & changingStyle) != 0) {
 			if ((style & changingStyle) == (styleState & changingStyle)) {
@@ -1779,7 +1756,7 @@ public class TextEditor {
 					case SWT.UNDERLINE_DOUBLE: 	styleState |= UNDERLINE_DOUBLE; break;
 					case SWT.UNDERLINE_SQUIGGLE:	styleState |= UNDERLINE_SQUIGGLE; break;
 					case SWT.UNDERLINE_ERROR: 	styleState |= UNDERLINE_ERROR; break;
-					case SWT.UNDERLINE_LINK: 	
+					case SWT.UNDERLINE_LINK:
 						styleState |= UNDERLINE_LINK;
 						link = (String)range.data;
 						break;
@@ -1811,7 +1788,7 @@ public class TextEditor {
 				borderColor = range.borderColor;
 			}
 		}
-		
+
 		boldControl.setSelection(bold);
 		italicControl.setSelection(italic);
 		FontData fontData = font != null ? font.getFontData()[0] : styledText.getFont().getFontData()[0];
@@ -1841,7 +1818,7 @@ public class TextEditor {
 			}
 			index++;
 		}
-		
+
 		disposeResource(textFont);
 		textFont = font;
 		int lineIndex = styledText.getLineAtOffset(offset);
commit 901da5da4c367dfcf7525c18e299ca0c850bed73
Author: Alexander Kurtakov <akurtako@redhat.com>
Date:   Fri Feb 12 02:08:04 2016 +0200

    Bug 485821 - Make examples/snippets use lambdas
    
    Convert *Listener in snippets. (take 2)
    
    Change-Id: I9483e5868c7a1f628f8c1ccfd121afbf5bc6a9ce
    Signed-off-by: Alexander Kurtakov <akurtako@redhat.com>

42	45	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet226.java
40	43	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet229.java
8	11	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet23.java
24	27	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet230.java
20	31	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet231.java
20	43	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet234.java
12	15	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet235.java
9	17	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet236.java
25	28	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet239.java
4	14	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet24.java
24	27	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet240.java
6	10	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet241.java
3	9	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet242.java
7	11	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet243.java
5	9	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet245.java
6	9	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet247.java
9	12	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet248.java
8	11	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet249.java
19	22	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet25.java
13	16	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet252.java
9	12	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet253.java
17	20	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet254.java
11	14	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet256.java
26	39	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet259.java
6	11	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet268.java
17	23	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet270.java
8	11	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet271.java
8	23	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet272.java
30	36	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet273.java
13	16	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet274.java
7	10	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet275.java
6	9	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet276.java
9	12	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet278.java
18	21	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet279.java
21	24	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet280.java
22	25	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet281.java
44	56	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet282.java
50	59	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet283.java
17	22	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet285.java
7	13	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet286.java
12	15	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet287.java
18	25	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet289.java
3	8	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet29.java
19	25	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet292.java
12	17	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet294.java
11	24	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet296.java
17	20	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet298.java
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet226.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet226.java
index 8569673..b51b0ea 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet226.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet226.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2006 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -10,24 +10,24 @@
  *******************************************************************************/
 package org.eclipse.swt.snippets;
 
-/* 
+/*
  * Tree example snippet: draw a custom gradient selection for tree
  *
- * For more info on custom-drawing TableItem and TreeItem content see 
+ * For more info on custom-drawing TableItem and TreeItem content see
  * http://www.eclipse.org/articles/article.php?file=Article-CustomDrawingTableAndTreeItems/index.html
  *
  * For a list of all SWT example snippets see
  * http://www.eclipse.org/swt/snippets/
- * 
+ *
  * @since 3.3
  */
-import org.eclipse.swt.SWT;
+import org.eclipse.swt.*;
 import org.eclipse.swt.graphics.*;
-import org.eclipse.swt.layout.FillLayout;
+import org.eclipse.swt.layout.*;
 import org.eclipse.swt.widgets.*;
 
 public class Snippet226 {
-	
+
 public static void main(String [] args) {
 	final Display display = new Display();
 	Shell shell = new Shell(display);
@@ -39,7 +39,7 @@ public static void main(String [] args) {
 	int columnCount = 4;
 	for (int i=0; i<columnCount; i++) {
 		TreeColumn column = new TreeColumn(tree, SWT.NONE);
-		column.setText("Column " + i);	
+		column.setText("Column " + i);
 	}
 	int itemCount = 3;
 	for (int i=0; i<itemCount; i++) {
@@ -69,52 +69,49 @@ public static void main(String [] args) {
 	 * Therefore, it is critical for performance that these methods be
 	 * as efficient as possible.
 	 */
-	tree.addListener(SWT.EraseItem, new Listener() {
-		@Override
-		public void handleEvent(Event event) {
-			event.detail &= ~SWT.HOT;
-			if ((event.detail & SWT.SELECTED) != 0) {
-				GC gc = event.gc;
-				Rectangle area = tree.getClientArea();
-				/*
-				 * If you wish to paint the selection beyond the end of
-				 * last column, you must change the clipping region.
-				 */
-				int columnCount = tree.getColumnCount();
-				if (event.index == columnCount - 1 || columnCount == 0) {
-					int width = area.x + area.width - event.x;
-					if (width > 0) {
-						Region region = new Region();
-						gc.getClipping(region);
-						region.add(event.x, event.y, width, event.height); 
-						gc.setClipping(region);
-						region.dispose();
-					}
+	tree.addListener(SWT.EraseItem, event -> {
+		event.detail &= ~SWT.HOT;
+		if ((event.detail & SWT.SELECTED) != 0) {
+			GC gc = event.gc;
+			Rectangle area = tree.getClientArea();
+			/*
+			 * If you wish to paint the selection beyond the end of
+			 * last column, you must change the clipping region.
+			 */
+			int columnCount1 = tree.getColumnCount();
+			if (event.index == columnCount1 - 1 || columnCount1 == 0) {
+				int width = area.x + area.width - event.x;
+				if (width > 0) {
+					Region region = new Region();
+					gc.getClipping(region);
+					region.add(event.x, event.y, width, event.height);
+					gc.setClipping(region);
+					region.dispose();
 				}
-				gc.setAdvanced(true);
-				if (gc.getAdvanced()) gc.setAlpha(127);								
-				Rectangle rect = event.getBounds();
-				Color foreground = gc.getForeground();
-				Color background = gc.getBackground();
-				gc.setForeground(display.getSystemColor(SWT.COLOR_RED));
-				gc.setBackground(display.getSystemColor(SWT.COLOR_LIST_BACKGROUND));
-				gc.fillGradientRectangle(0, rect.y, 500, rect.height, false);
-				// restore colors for subsequent drawing
-				gc.setForeground(foreground);
-				gc.setBackground(background);
-				event.detail &= ~SWT.SELECTED;					
-			}						
+			}
+			gc.setAdvanced(true);
+			if (gc.getAdvanced()) gc.setAlpha(127);
+			Rectangle rect = event.getBounds();
+			Color foreground = gc.getForeground();
+			Color background = gc.getBackground();
+			gc.setForeground(display.getSystemColor(SWT.COLOR_RED));
+			gc.setBackground(display.getSystemColor(SWT.COLOR_LIST_BACKGROUND));
+			gc.fillGradientRectangle(0, rect.y, 500, rect.height, false);
+			// restore colors for subsequent drawing
+			gc.setForeground(foreground);
+			gc.setBackground(background);
+			event.detail &= ~SWT.SELECTED;
 		}
-	});		
+	});
 	for (int i=0; i<columnCount; i++) {
 		tree.getColumn(i).pack();
-	}	
+	}
 	tree.setSelection(tree.getItem(0));
 	shell.setSize(500, 200);
 	shell.open();
 	while (!shell.isDisposed()) {
 		if (!display.readAndDispatch()) display.sleep();
 	}
-	display.dispose();	
+	display.dispose();
 }
 }
\ No newline at end of file
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet229.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet229.java
index 0e39e65..1c78e55 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet229.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet229.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2006 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -10,15 +10,15 @@
  *******************************************************************************/
 package org.eclipse.swt.snippets;
 
-/* 
+/*
  * Table example snippet: draw a custom gradient selection for table
  *
- * For more info on custom-drawing TableItem and TreeItem content see 
+ * For more info on custom-drawing TableItem and TreeItem content see
  * http://www.eclipse.org/articles/article.php?file=Article-CustomDrawingTableAndTreeItems/index.html
  *
  * For a list of all SWT example snippets see
  * http://www.eclipse.org/swt/snippets/
- * 
+ *
  * @since 3.3
  */
 
@@ -39,64 +39,61 @@ public static void main(String [] args) {
 	int columnCount = 3;
 	for (int i=0; i<columnCount; i++) {
 		TableColumn column = new TableColumn(table, SWT.NONE);
-		column.setText("Column " + i);	
+		column.setText("Column " + i);
 	}
 	int itemCount = 8;
 	for(int i = 0; i < itemCount; i++) {
 		TableItem item = new TableItem(table, SWT.NONE);
 		item.setText(new String[] {"item "+i+" a", "item "+i+" b", "item "+i+" c"});
-	}		
+	}
 	/*
 	 * NOTE: MeasureItem, PaintItem and EraseItem are called repeatedly.
 	 * Therefore, it is critical for performance that these methods be
 	 * as efficient as possible.
 	 */
-	table.addListener(SWT.EraseItem, new Listener() {
-		@Override
-		public void handleEvent(Event event) {
-			event.detail &= ~SWT.HOT;	
-			if((event.detail & SWT.SELECTED) != 0) {
-				GC gc = event.gc;
-				Rectangle area = table.getClientArea();
-				/*
-				 * If you wish to paint the selection beyond the end of
-				 * last column, you must change the clipping region.
-				 */
-				int columnCount = table.getColumnCount();
-				if (event.index == columnCount - 1 || columnCount == 0) {
-					int width = area.x + area.width - event.x;
-					if (width > 0) {
-						Region region = new Region();
-						gc.getClipping(region);
-						region.add(event.x, event.y, width, event.height); 
-						gc.setClipping(region);
-						region.dispose();
-					}
+	table.addListener(SWT.EraseItem, event -> {
+		event.detail &= ~SWT.HOT;
+		if((event.detail & SWT.SELECTED) != 0) {
+			GC gc = event.gc;
+			Rectangle area = table.getClientArea();
+			/*
+			 * If you wish to paint the selection beyond the end of
+			 * last column, you must change the clipping region.
+			 */
+			int columnCount1 = table.getColumnCount();
+			if (event.index == columnCount1 - 1 || columnCount1 == 0) {
+				int width = area.x + area.width - event.x;
+				if (width > 0) {
+					Region region = new Region();
+					gc.getClipping(region);
+					region.add(event.x, event.y, width, event.height);
+					gc.setClipping(region);
+					region.dispose();
 				}
-				gc.setAdvanced(true);
-				if (gc.getAdvanced()) gc.setAlpha(127);								
-				Rectangle rect = event.getBounds();
-				Color foreground = gc.getForeground();
-				Color background = gc.getBackground();
-				gc.setForeground(display.getSystemColor(SWT.COLOR_RED));
-				gc.setBackground(display.getSystemColor(SWT.COLOR_LIST_BACKGROUND));
-				gc.fillGradientRectangle(0, rect.y, 500, rect.height, false);
-				// restore colors for subsequent drawing
-				gc.setForeground(foreground);
-				gc.setBackground(background);
-				event.detail &= ~SWT.SELECTED;					
-			}						
+			}
+			gc.setAdvanced(true);
+			if (gc.getAdvanced()) gc.setAlpha(127);
+			Rectangle rect = event.getBounds();
+			Color foreground = gc.getForeground();
+			Color background = gc.getBackground();
+			gc.setForeground(display.getSystemColor(SWT.COLOR_RED));
+			gc.setBackground(display.getSystemColor(SWT.COLOR_LIST_BACKGROUND));
+			gc.fillGradientRectangle(0, rect.y, 500, rect.height, false);
+			// restore colors for subsequent drawing
+			gc.setForeground(foreground);
+			gc.setBackground(background);
+			event.detail &= ~SWT.SELECTED;
 		}
-	});		
+	});
 	for (int i=0; i<columnCount; i++) {
 		table.getColumn(i).pack();
-	}	
+	}
 	table.setSelection(table.getItem(0));
 	shell.setSize(500, 200);
 	shell.open();
 	while (!shell.isDisposed()) {
 		if (!display.readAndDispatch()) display.sleep();
 	}
-	display.dispose();	
+	display.dispose();
 }
 }
\ No newline at end of file
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet23.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet23.java
index 0c7a42c..7c0f8b4 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet23.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet23.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2004 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -26,19 +26,16 @@ public static void main (String [] args) {
 	Display display = new Display ();
 	final Shell shell = new Shell (display);
 	shell.open ();
-	shell.addListener (SWT.MouseDown, new Listener () {
-		@Override
-		public void handleEvent (Event e) {
-			Tracker tracker = new Tracker (shell, SWT.NONE);
-			tracker.setRectangles (new Rectangle [] {
-				new Rectangle (e.x, e.y, 100, 100),
-			});
-			tracker.open ();
-		}
+	shell.addListener (SWT.MouseDown, e -> {
+		Tracker tracker = new Tracker (shell, SWT.NONE);
+		tracker.setRectangles (new Rectangle [] {
+			new Rectangle (e.x, e.y, 100, 100),
+		});
+		tracker.open ();
 	});
 	while (!shell.isDisposed()) {
 		if (!display.readAndDispatch ()) display.sleep ();
 	}
 	display.dispose ();
 }
-} 
+}
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet230.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet230.java
index 38a4744..8e2b0c5 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet230.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet230.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2006 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -10,15 +10,15 @@
  *******************************************************************************/
 package org.eclipse.swt.snippets;
 
-/* 
+/*
  * Table example snippet: draw images on right side of table item
  *
- * For more info on custom-drawing TableItem and TreeItem content see 
+ * For more info on custom-drawing TableItem and TreeItem content see
  * http://www.eclipse.org/articles/article.php?file=Article-CustomDrawingTableAndTreeItems/index.html
  *
  * For a list of all SWT example snippets see
  * http://www.eclipse.org/swt/snippets/
- * 
+ *
  * @since 3.2
  */
 
@@ -28,7 +28,7 @@ import org.eclipse.swt.layout.*;
 import org.eclipse.swt.widgets.*;
 
 public class Snippet230 {
-	
+
 public static void main(String [] args) {
 	Display display = new Display();
 	final Image image = display.getSystemImage(SWT.ICON_INFORMATION);
@@ -37,11 +37,11 @@ public static void main(String [] args) {
 	shell.setLayout(new FillLayout ());
 	Table table = new Table(shell, SWT.MULTI | SWT.FULL_SELECTION);
 	table.setHeaderVisible(true);
-	table.setLinesVisible(true);			
+	table.setLinesVisible(true);
 	int columnCount = 3;
 	for (int i=0; i<columnCount; i++) {
 		TableColumn column = new TableColumn(table, SWT.NONE);
-		column.setText("Column " + i);	
+		column.setText("Column " + i);
 	}
 	int itemCount = 8;
 	for(int i = 0; i < itemCount; i++) {
@@ -53,32 +53,29 @@ public static void main(String [] args) {
 	 * Therefore, it is critical for performance that these methods be
 	 * as efficient as possible.
 	 */
-	Listener paintListener = new Listener() {
-		@Override
-		public void handleEvent(Event event) {		
-			switch(event.type) {
-				case SWT.MeasureItem: {
-					Rectangle rect = image.getBounds();
-					event.width += rect.width;
-					event.height = Math.max(event.height, rect.height + 2);
-					break;
-				}
-				case SWT.PaintItem: {
-					int x = event.x + event.width;
-					Rectangle rect = image.getBounds();
-					int offset = Math.max(0, (event.height - rect.height) / 2);
-					event.gc.drawImage(image, x, event.y + offset);
-					break;
-				}
+	Listener paintListener = event -> {
+		switch(event.type) {
+			case SWT.MeasureItem: {
+				Rectangle rect1 = image.getBounds();
+				event.width += rect1.width;
+				event.height = Math.max(event.height, rect1.height + 2);
+				break;
+			}
+			case SWT.PaintItem: {
+				int x = event.x + event.width;
+				Rectangle rect2 = image.getBounds();
+				int offset = Math.max(0, (event.height - rect2.height) / 2);
+				event.gc.drawImage(image, x, event.y + offset);
+				break;
 			}
 		}
-	};		
+	};
 	table.addListener(SWT.MeasureItem, paintListener);
-	table.addListener(SWT.PaintItem, paintListener);		
+	table.addListener(SWT.PaintItem, paintListener);
 
 	for(int i = 0; i < columnCount; i++) {
 		table.getColumn(i).pack();
-	}	
+	}
 	shell.setSize(500, 200);
 	shell.open();
 	while(!shell.isDisposed ()) {
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet231.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet231.java
index d5338cc..9f77d99 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet231.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet231.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -10,7 +10,7 @@
  *******************************************************************************/
 package org.eclipse.swt.snippets;
 
-/* 
+/*
  * Table example snippet: draw multiple lines of text in a table item
  *
  * For a detailed explanation of this snippet see
@@ -18,7 +18,7 @@ package org.eclipse.swt.snippets;
  *
  * For a list of all SWT example snippets see
  * http://www.eclipse.org/swt/snippets/
- * 
+ *
  * @since 3.2
  */
 
@@ -27,7 +27,7 @@ import org.eclipse.swt.graphics.*;
 import org.eclipse.swt.widgets.*;
 
 public class Snippet231 {
-	
+
 public static void main(String [] args) {
 	final int COLUMN_COUNT = 4;
 	final int ITEM_COUNT = 8;
@@ -59,35 +59,24 @@ public static void main(String [] args) {
 	 * Therefore, it is critical for performance that these methods be
 	 * as efficient as possible.
 	 */
-	table.addListener(SWT.MeasureItem, new Listener() {
-		@Override
-		public void handleEvent(Event event) {
-			TableItem item = (TableItem)event.item;
-			String text = item.getText(event.index);
-			Point size = event.gc.textExtent(text);
-			event.width = size.x + 2 * TEXT_MARGIN;
-			event.height = Math.max(event.height, size.y + TEXT_MARGIN);
-		}
+	table.addListener(SWT.MeasureItem, event -> {
+		TableItem item = (TableItem)event.item;
+		String text = item.getText(event.index);
+		Point size = event.gc.textExtent(text);
+		event.width = size.x + 2 * TEXT_MARGIN;
+		event.height = Math.max(event.height, size.y + TEXT_MARGIN);
 	});
-	table.addListener(SWT.EraseItem, new Listener() {
-		@Override
-		public void handleEvent(Event event) {
-			event.detail &= ~SWT.FOREGROUND;
-		}
-	});
-	table.addListener(SWT.PaintItem, new Listener() {
-		@Override
-		public void handleEvent(Event event) {
-			TableItem item = (TableItem)event.item;
-			String text = item.getText(event.index);
-			/* center column 1 vertically */
-			int yOffset = 0;
-			if (event.index == 1) {
-				Point size = event.gc.textExtent(text);
-				yOffset = Math.max(0, (event.height - size.y) / 2);
-			}
-			event.gc.drawText(text, event.x + TEXT_MARGIN, event.y + yOffset, true);
+	table.addListener(SWT.EraseItem, event -> event.detail &= ~SWT.FOREGROUND);
+	table.addListener(SWT.PaintItem, event -> {
+		TableItem item = (TableItem)event.item;
+		String text = item.getText(event.index);
+		/* center column 1 vertically */
+		int yOffset = 0;
+		if (event.index == 1) {
+			Point size = event.gc.textExtent(text);
+			yOffset = Math.max(0, (event.height - size.y) / 2);
 		}
+		event.gc.drawText(text, event.x + TEXT_MARGIN, event.y + yOffset, true);
 	});
 
 	for (int i = 0; i < COLUMN_COUNT; i++) {
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet234.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet234.java
index 78a3793..ef4b1cc 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet234.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet234.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2006 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -9,15 +9,15 @@
  *     IBM Corporation - initial API and implementation
  *******************************************************************************/
 package org.eclipse.swt.snippets;
-/* 
+/*
  * Table example snippet: Fixed first column and horizontal scroll remaining columns
  *
- * For more info on custom-drawing TableItem and TreeItem content see 
+ * For more info on custom-drawing TableItem and TreeItem content see
  * http://www.eclipse.org/articles/article.php?file=Article-CustomDrawingTableAndTreeItems/index.html
  *
  * For a list of all SWT example snippets see
  * http://www.eclipse.org/swt/snippets/
- * 
+ *
  * @since 3.3
  */
 
@@ -33,7 +33,7 @@ public static void main (String [] args) {
 	final Display display = new Display ();
 	Shell shell = new Shell (display);
 	shell.setLayout(new FillLayout());
-	
+
 	Composite parent = new Composite(shell, SWT.BORDER);
 	GridLayout layout = new GridLayout(2, false);
 	layout.marginWidth = layout.marginHeight = layout.horizontalSpacing = 0;
@@ -64,53 +64,30 @@ public static void main (String [] args) {
 		}
 	}
 	// Make selection the same in both tables
-	leftTable.addListener(SWT.Selection, new Listener() {
-		@Override
-		public void handleEvent(Event event) {
-			rightTable.setSelection(leftTable.getSelectionIndices());
-		}
-	});
-	rightTable.addListener(SWT.Selection, new Listener() {
-		@Override
-		public void handleEvent(Event event) {
-			leftTable.setSelection(rightTable.getSelectionIndices());
-		}
-	});
+	leftTable.addListener(SWT.Selection, event -> rightTable.setSelection(leftTable.getSelectionIndices()));
+	rightTable.addListener(SWT.Selection, event -> leftTable.setSelection(rightTable.getSelectionIndices()));
 	// On Windows, the selection is gray if the table does not have focus.
 	// To make both tables appear in focus, draw the selection background here.
 	// This part only works on version 3.2 or later.
-	Listener eraseListener = new Listener() {
-		@Override
-		public void handleEvent(Event event) {
-			event.detail &= ~SWT.HOT;
-			if((event.detail & SWT.SELECTED) != 0) {
-				GC gc = event.gc;
-				Rectangle rect = event.getBounds();
-				gc.setForeground(display.getSystemColor(SWT.COLOR_LIST_SELECTION_TEXT));
-				gc.setBackground(display.getSystemColor(SWT.COLOR_LIST_SELECTION));
-				gc.fillRectangle(rect);
-				event.detail &= ~SWT.SELECTED;					
-			}
+	Listener eraseListener = event -> {
+		event.detail &= ~SWT.HOT;
+		if((event.detail & SWT.SELECTED) != 0) {
+			GC gc = event.gc;
+			Rectangle rect = event.getBounds();
+			gc.setForeground(display.getSystemColor(SWT.COLOR_LIST_SELECTION_TEXT));
+			gc.setBackground(display.getSystemColor(SWT.COLOR_LIST_SELECTION));
+			gc.fillRectangle(rect);
+			event.detail &= ~SWT.SELECTED;
 		}
 	};
-	
+
 	leftTable.addListener(SWT.EraseItem, eraseListener);
 	rightTable.addListener(SWT.EraseItem, eraseListener);
 	// Make vertical scrollbars scroll together
 	ScrollBar vBarLeft = leftTable.getVerticalBar();
-	vBarLeft.addListener(SWT.Selection, new Listener() {
-		@Override
-		public void handleEvent(Event event) {
-			rightTable.setTopIndex(leftTable.getTopIndex());
-		}
-	});
+	vBarLeft.addListener(SWT.Selection, event -> rightTable.setTopIndex(leftTable.getTopIndex()));
 	ScrollBar vBarRight = rightTable.getVerticalBar();
-	vBarRight.addListener(SWT.Selection, new Listener() {
-		@Override
-		public void handleEvent(Event event) {
-			leftTable.setTopIndex(rightTable.getTopIndex());
-		}
-	});
+	vBarRight.addListener(SWT.Selection, event -> leftTable.setTopIndex(rightTable.getTopIndex()));
 	// Horizontal bar on second table takes up a little extra space.
 	// To keep vertical scroll bars in sink, force table1 to end above
 	// horizontal scrollbar
@@ -120,7 +97,7 @@ public static void main (String [] args) {
 	spacerData.heightHint = hBarRight.getSize().y;
 	spacer.setVisible(false);
 	parent.setBackground(leftTable.getBackground());
-	
+
 	shell.setSize(600, 400);
 	shell.open ();
 	while (!shell.isDisposed ()) {
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet235.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet235.java
index 3e24179..c1e7c1e 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet235.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet235.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2006 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -9,12 +9,12 @@
  *     IBM Corporation - initial API and implementation
  *******************************************************************************/
 package org.eclipse.swt.snippets;
-/* 
+/*
  * example snippet: detect a system settings change
  *
  * For a list of all SWT example snippets see
  * http://www.eclipse.org/swt/snippets/
- * 
+ *
  * @since 3.2
  */
 
@@ -50,18 +50,15 @@ public static void main(String [] args) {
 	TableColumn[] columns = table.getColumns();
 	columns[0].pack();
 	columns[2].pack();
-	display.addListener(SWT.Settings, new Listener() {
-		@Override
-		public void handleEvent(Event event) {
-			for (int i = 0; i < colorIds.length; i++) {
-				Color color = display.getSystemColor(colorIds[i]);
-				TableItem item = table.getItem(i);
-				item.setBackground(1, color);
-			}
-			TableColumn[] columns = table.getColumns();
-			columns[0].pack();
-			columns[2].pack();
+	display.addListener(SWT.Settings, event -> {
+		for (int i = 0; i < colorIds.length; i++) {
+			Color color = display.getSystemColor(colorIds[i]);
+			TableItem item = table.getItem(i);
+			item.setBackground(1, color);
 		}
+		TableColumn[] columns1 = table.getColumns();
+		columns1[0].pack();
+		columns1[2].pack();
 	});
 
 	shell.pack();
@@ -72,7 +69,7 @@ public static void main(String [] args) {
 	}
 	display.dispose();
 }
-static int[] colorIds = new int[] {SWT.COLOR_INFO_BACKGROUND, 
+static int[] colorIds = new int[] {SWT.COLOR_INFO_BACKGROUND,
 		SWT.COLOR_INFO_FOREGROUND,
 		SWT.COLOR_LINK_FOREGROUND,
 		SWT.COLOR_LIST_BACKGROUND,
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet236.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet236.java
index 4cd2ca9..6733caf 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet236.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet236.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2006 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -9,15 +9,15 @@
  *     IBM Corporation - initial API and implementation
  *******************************************************************************/
 package org.eclipse.swt.snippets;
-/* 
+/*
  * Table example snippet: draw different foreground colors for text in a TableItem.
  *
- * For more info on custom-drawing TableItem and TreeItem content see 
+ * For more info on custom-drawing TableItem and TreeItem content see
  * http://www.eclipse.org/articles/article.php?file=Article-CustomDrawingTableAndTreeItems/index.html
  *
  * For a list of all SWT example snippets see
  * http://www.eclipse.org/swt/snippets/
- * 
+ *
  * @since 3.2
  */
 
@@ -36,7 +36,7 @@ public static void main(String [] args) {
 	Table table = new Table(shell, SWT.MULTI | SWT.FULL_SELECTION);
 	table.setLinesVisible(true);
 	for(int i = 0; i < 10; i++) {
-		new TableItem(table, SWT.NONE);			
+		new TableItem(table, SWT.NONE);
 	}
 	final TextLayout textLayout = new TextLayout(display);
 	textLayout.setText("SWT: Standard Widget Toolkit");
@@ -55,19 +55,11 @@ public static void main(String [] args) {
 	 * Therefore, it is critical for performance that these methods be
 	 * as efficient as possible.
 	 */
-	table.addListener(SWT.PaintItem, new Listener() {
-		@Override
-		public void handleEvent(Event event) {
-			textLayout.draw(event.gc, event.x, event.y);
-		}
-	});
+	table.addListener(SWT.PaintItem, event -> textLayout.draw(event.gc, event.x, event.y));
 	final Rectangle textLayoutBounds = textLayout.getBounds();
-	table.addListener(SWT.MeasureItem, new Listener() {
-		@Override
-		public void handleEvent(Event e) {
-			e.width = textLayoutBounds.width + 2;
-			e.height = textLayoutBounds.height + 2;
-		}
+	table.addListener(SWT.MeasureItem, e -> {
+		e.width = textLayoutBounds.width + 2;
+		e.height = textLayoutBounds.height + 2;
 	});
 	shell.setSize(400, 200);
 	shell.open();
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet239.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet239.java
index ddd5a6a..46892f2 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet239.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet239.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2006 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -10,15 +10,15 @@
  *******************************************************************************/
 package org.eclipse.swt.snippets;
 
-/* 
+/*
  * Table snippet: make text span multiple columns
  *
- * For more info on custom-drawing TableItem and TreeItem content see 
+ * For more info on custom-drawing TableItem and TreeItem content see
  * http://www.eclipse.org/articles/article.php?file=Article-CustomDrawingTableAndTreeItems/index.html
  *
  * For a list of all SWT example snippets see
  * http://www.eclipse.org/swt/snippets/
- * 
+ *
  * @since 3.2
  */
 
@@ -28,7 +28,7 @@ import org.eclipse.swt.layout.*;
 import org.eclipse.swt.widgets.*;
 
 public class Snippet239 {
-	
+
 public static void main(String [] args) {
 	final Display display = new Display();
 	Shell shell = new Shell (display);
@@ -39,14 +39,14 @@ public static void main(String [] args) {
 	int columnCount = 4;
 	for (int i=0; i<columnCount; i++) {
 		TableColumn column = new TableColumn(table, SWT.NONE);
-		column.setText("Column " + i);	
+		column.setText("Column " + i);
 	}
 	int itemCount = 8;
 	for (int i = 0; i < itemCount; i++) {
 		TableItem item = new TableItem(table, SWT.NONE);
 		item.setText(0, "item "+i+" a");
 		item.setText(3, "item "+i+" d");
-	}	
+	}
 	/*
 	 * NOTE: MeasureItem, PaintItem and EraseItem are called repeatedly.
 	 * Therefore, it is critical for performance that these methods be
@@ -57,30 +57,27 @@ public static void main(String [] args) {
 	final Point extent = gc.stringExtent(string);
 	gc.dispose();
 	final Color red = display.getSystemColor(SWT.COLOR_RED);
-	Listener paintListener = new Listener() {
-		@Override
-		public void handleEvent(Event event) {
-			switch(event.type) {		
-				case SWT.MeasureItem: {
-					if (event.index == 1 || event.index == 2) {
-						event.width = extent.x/2;
-						event.height = Math.max(event.height, extent.y + 2);
-					}
-					break;
+	Listener paintListener = event -> {
+		switch(event.type) {
+			case SWT.MeasureItem: {
+				if (event.index == 1 || event.index == 2) {
+					event.width = extent.x/2;
+					event.height = Math.max(event.height, extent.y + 2);
 				}
-				case SWT.PaintItem: {
-					if (event.index == 1 || event.index == 2) {
-						int offset = 0;
-						if (event.index == 2) {
-							TableColumn column1 = table.getColumn(1);
-							offset = column1.getWidth();
-						}
-						event.gc.setForeground(red);
-						int y = event.y + (event.height - extent.y)/2;
-						event.gc.drawString(string, event.x - offset, y, true);
+				break;
+			}
+			case SWT.PaintItem: {
+				if (event.index == 1 || event.index == 2) {
+					int offset = 0;
+					if (event.index == 2) {
+						TableColumn column1 = table.getColumn(1);
+						offset = column1.getWidth();
 					}
-					break;
+					event.gc.setForeground(red);
+					int y = event.y + (event.height - extent.y)/2;
+					event.gc.drawString(string, event.x - offset, y, true);
 				}
+				break;
 			}
 		}
 	};
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet24.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet24.java
index 3a1e2d7..a3d0d70 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet24.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet24.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2004 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -30,18 +30,8 @@ public static void main (String [] args) {
 	combo.setItems ("A-1", "B-1", "C-1");
 	Text text = new Text (shell, SWT.SINGLE | SWT.BORDER);
 	text.setText ("some text");
-	combo.addListener (SWT.DefaultSelection, new Listener () {
-		@Override
-		public void handleEvent (Event e) {
-			System.out.println (e.widget + " - Default Selection");
-		}
-	});
-	text.addListener (SWT.DefaultSelection, new Listener () {
-		@Override
-		public void handleEvent (Event e) {
-			System.out.println (e.widget + " - Default Selection");
-		}
-	});
+	combo.addListener (SWT.DefaultSelection, e -> System.out.println (e.widget + " - Default Selection"));
+	text.addListener (SWT.DefaultSelection, e -> System.out.println (e.widget + " - Default Selection"));
 	shell.pack ();
 	shell.open ();
 	while (!shell.isDisposed()) {
@@ -49,4 +39,4 @@ public static void main (String [] args) {
 	}
 	display.dispose ();
 }
-} 
+}
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet240.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet240.java
index d714dd0..1f97393 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet240.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet240.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2006 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -10,15 +10,15 @@
  *******************************************************************************/
 package org.eclipse.swt.snippets;
 
-/* 
+/*
  * Tree snippet: Text that spans multiple columns
  *
- * For more info on custom-drawing TableItem and TreeItem content see 
+ * For more info on custom-drawing TableItem and TreeItem content see
  * http://www.eclipse.org/articles/article.php?file=Article-CustomDrawingTableAndTreeItems/index.html
  *
  * For a list of all SWT example snippets see
  * http://www.eclipse.org/swt/snippets/
- * 
+ *
  * @since 3.2
  */
 
@@ -39,7 +39,7 @@ public static void main(String [] args) {
 	int columnCount = 4;
 	for (int i=0; i<columnCount; i++) {
 		TreeColumn column = new TreeColumn(tree, SWT.NONE);
-		column.setText("Column " + i);	
+		column.setText("Column " + i);
 	}
 	int itemCount = 8;
 	for (int i = 0; i < itemCount; i++) {
@@ -51,7 +51,7 @@ public static void main(String [] args) {
 			subItem.setText(0, "subItem "+i+"-"+j+" a");
 			subItem.setText(3, "subItem "+i+"-"+j+" d");
 		}
-	}	
+	}
 	/*
 	 * NOTE: MeasureItem, PaintItem and EraseItem are called repeatedly.
 	 * Therefore, it is critical for performance that these methods be
@@ -62,30 +62,27 @@ public static void main(String [] args) {
 	final Point extent = gc.stringExtent(string);
 	gc.dispose();
 	final Color red = display.getSystemColor(SWT.COLOR_RED);
-	Listener paintListener = new Listener() {
-		@Override
-		public void handleEvent(Event event) {
-			switch(event.type) {		
-				case SWT.MeasureItem: {
-					if (event.index == 1 || event.index == 2) {
-						event.width = extent.x/2;
-						event.height = Math.max(event.height, extent.y + 2);
-					}
-					break;
+	Listener paintListener = event -> {
+		switch(event.type) {
+			case SWT.MeasureItem: {
+				if (event.index == 1 || event.index == 2) {
+					event.width = extent.x/2;
+					event.height = Math.max(event.height, extent.y + 2);
 				}
-				case SWT.PaintItem: {
-					if (event.index == 1 || event.index == 2) {
-						int offset = 0;
-						if (event.index == 2) {
-							TreeColumn column1 = tree.getColumn(1);
-							offset = column1.getWidth();
-						}
-						event.gc.setForeground(red);
-						int y = event.y + (event.height - extent.y)/2;
-						event.gc.drawString(string, event.x - offset, y, true);
+				break;
+			}
+			case SWT.PaintItem: {
+				if (event.index == 1 || event.index == 2) {
+					int offset = 0;
+					if (event.index == 2) {
+						TreeColumn column1 = tree.getColumn(1);
+						offset = column1.getWidth();
 					}
-					break;
+					event.gc.setForeground(red);
+					int y = event.y + (event.height - extent.y)/2;
+					event.gc.drawString(string, event.x - offset, y, true);
 				}
+				break;
 			}
 		}
 	};
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet241.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet241.java
index a58949c..4662c67 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet241.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet241.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2006 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -10,7 +10,7 @@
  *******************************************************************************/
 package org.eclipse.swt.snippets;
 
-/* 
+/*
  * Text snippet: override Tab behavior to traverse out of a text control
  *
  * For a list of all SWT example snippets see
@@ -18,8 +18,7 @@ package org.eclipse.swt.snippets;
  */
 
 import org.eclipse.swt.*;
-import org.eclipse.swt.events.*;
-import org.eclipse.swt.graphics.Rectangle;
+import org.eclipse.swt.graphics.*;
 import org.eclipse.swt.widgets.*;
 
 public class Snippet241 {
@@ -32,12 +31,9 @@ public static void main(String [] args) {
 	Rectangle clientArea = shell.getClientArea();
 	text1.setBounds(clientArea.x+10,clientArea.y+10,150,50);
 	text1.setText("Tab will traverse out from here.");
-	text1.addTraverseListener(new TraverseListener() {
-		@Override
-		public void keyTraversed(TraverseEvent e) {
-			if (e.detail == SWT.TRAVERSE_TAB_NEXT || e.detail == SWT.TRAVERSE_TAB_PREVIOUS) {
-				e.doit = true;
-			}
+	text1.addTraverseListener(e -> {
+		if (e.detail == SWT.TRAVERSE_TAB_NEXT || e.detail == SWT.TRAVERSE_TAB_PREVIOUS) {
+			e.doit = true;
 		}
 	});
 	Text text2 = new Text(shell, SWT.MULTI | SWT.WRAP);
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet242.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet242.java
index 12e09a1..9befa2b 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet242.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet242.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2006 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -10,14 +10,13 @@
  *******************************************************************************/
 package org.eclipse.swt.snippets;
 
-/* 
+/*
  * Cursor snippet: Hide the Cursor over a control.
  *
  * For a list of all SWT example snippets see
  * http://www.eclipse.org/swt/snippets/
  */
 import org.eclipse.swt.*;
-import org.eclipse.swt.events.*;
 import org.eclipse.swt.graphics.*;
 import org.eclipse.swt.widgets.*;
 
@@ -29,12 +28,7 @@ public static void main(String [] args) {
 	shell.setBounds(10, 10, 200, 200);
 	Canvas canvas = new Canvas(shell, SWT.BORDER);
 	canvas.setBounds(10,50,150,100);
-	canvas.addPaintListener(new PaintListener() {
-		@Override
-		public void paintControl(PaintEvent e) {
-			e.gc.drawString("hide Cursor here", 10, 10);
-		}
-	});
+	canvas.addPaintListener(e -> e.gc.drawString("hide Cursor here", 10, 10));
 
 	// create a cursor with a transparent image
 	Color white = display.getSystemColor (SWT.COLOR_WHITE);
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet243.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet243.java
index b5b3741..5f25f8e 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet243.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet243.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2006 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -10,7 +10,7 @@
  *******************************************************************************/
 package org.eclipse.swt.snippets;
 
-/* 
+/*
  * Text snippet: type in one text, output to another
  *
  * For a list of all SWT example snippets see
@@ -18,9 +18,8 @@ package org.eclipse.swt.snippets;
  */
 
 import org.eclipse.swt.*;
-import org.eclipse.swt.widgets.*;
-import org.eclipse.swt.events.*;
 import org.eclipse.swt.layout.*;
+import org.eclipse.swt.widgets.*;
 
 public class Snippet243 {
 
@@ -30,13 +29,10 @@ public static void main(String [] args) {
 	shell.setLayout(new FillLayout ());
 	final Text text0 = new Text (shell, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL);
 	final Text text1 = new Text (shell, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL);
-	text0.addVerifyListener (new VerifyListener () {
-		@Override
-		public void verifyText (VerifyEvent event) {
-			text1.setTopIndex (text0.getTopIndex ());
-			text1.setSelection (event.start, event.end);
-			text1.insert (event.text);
-		}
+	text0.addVerifyListener (event -> {
+		text1.setTopIndex (text0.getTopIndex ());
+		text1.setSelection (event.start, event.end);
+		text1.insert (event.text);
 	});
 	shell.setBounds(10, 10, 200, 200);
 	shell.open ();
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet245.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet245.java
index 82f50c1..6ca61cf 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet245.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet245.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2006 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -10,7 +10,7 @@
  *******************************************************************************/
 package org.eclipse.swt.snippets;
 
-/* 
+/*
  * Canvas snippet: paint a circle in a canvas
  *
  * For a list of all SWT example snippets see
@@ -19,19 +19,15 @@ package org.eclipse.swt.snippets;
 
 import org.eclipse.swt.graphics.*;
 import org.eclipse.swt.widgets.*;
-import org.eclipse.swt.events.*;
 
 public class Snippet245 {
 
 public static void main(String [] args) {
 	final Display display = new Display();
 	final Shell shell = new Shell(display);
-	shell.addPaintListener(new PaintListener() {
-		@Override
-		public void paintControl(PaintEvent event) {
-			Rectangle rect = shell.getClientArea();
-			event.gc.drawOval(0, 0, rect.width - 1, rect.height - 1);
-		}
+	shell.addPaintListener(event -> {
+		Rectangle rect = shell.getClientArea();
+		event.gc.drawOval(0, 0, rect.width - 1, rect.height - 1);
 	});
 	Rectangle clientArea = shell.getClientArea();
 	shell.setBounds(clientArea.x + 10, clientArea.y + 10, 200, 200);
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet247.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet247.java
index 19fda33..9f94fed 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet247.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet247.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2006 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -18,8 +18,8 @@ package org.eclipse.swt.snippets;
  */
 import org.eclipse.swt.*;
 import org.eclipse.swt.events.*;
-import org.eclipse.swt.widgets.*;
 import org.eclipse.swt.layout.*;
+import org.eclipse.swt.widgets.*;
 
 public class Snippet247 {
 public static void main (String [] args) {
@@ -29,13 +29,10 @@ public static void main (String [] args) {
 	Text text = new Text(shell, SWT.MULTI | SWT.BORDER);
 	String modifier = SWT.MOD1 == SWT.CTRL ? "Ctrl" : "Command";
 	text.setText("Hit " + modifier + "+Return\nto see\nthe default button\nrun");
-	text.addTraverseListener(new TraverseListener () {
-		@Override
-		public void keyTraversed(TraverseEvent e) {
-			switch (e.detail) {
-				case SWT.TRAVERSE_RETURN:
-					if ((e.stateMask & SWT.MOD1) != 0) e.doit = true;
-			}
+	text.addTraverseListener(e -> {
+		switch (e.detail) {
+			case SWT.TRAVERSE_RETURN:
+				if ((e.stateMask & SWT.MOD1) != 0) e.doit = true;
 		}
 	});
 	Button button = new Button (shell, SWT.PUSH);
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet248.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet248.java
index 5852982..129f7ba 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet248.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet248.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2006 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -17,24 +17,21 @@ package org.eclipse.swt.snippets;
  * http://www.eclipse.org/swt/snippets/
  */
 import org.eclipse.swt.*;
-import org.eclipse.swt.widgets.*;
 import org.eclipse.swt.layout.*;
+import org.eclipse.swt.widgets.*;
 
 public class Snippet248 {
 public static void main (String [] args) {
 	Display display = new Display ();
 	final Shell shell = new Shell (display);
 	shell.setLayout (new FillLayout ());
-	shell.addListener (SWT.Traverse, new Listener () {
-		@Override
-		public void handleEvent (Event event) {
-			switch (event.detail) {
-				case SWT.TRAVERSE_ESCAPE:
-					shell.close ();
-					event.detail = SWT.TRAVERSE_NONE;
-					event.doit = false;
-					break;
-			}
+	shell.addListener (SWT.Traverse, event -> {
+		switch (event.detail) {
+			case SWT.TRAVERSE_ESCAPE:
+				shell.close ();
+				event.detail = SWT.TRAVERSE_NONE;
+				event.doit = false;
+				break;
 		}
 	});
 	Button button = new Button (shell, SWT.PUSH);
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet249.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet249.java
index 8bc2d71..9ab215f 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet249.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet249.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2004 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -18,7 +18,7 @@ package org.eclipse.swt.snippets;
  */
 import org.eclipse.swt.*;
 import org.eclipse.swt.custom.*;
-import org.eclipse.swt.graphics.Rectangle;
+import org.eclipse.swt.graphics.*;
 import org.eclipse.swt.layout.*;
 import org.eclipse.swt.widgets.*;
 
@@ -44,7 +44,7 @@ public static void main (String [] args) {
 	label.setText ("Label on page 1");
 	label.pack ();
 
-	// create the second page's content	
+	// create the second page's content
 	final Composite page1 = new Composite (contentPanel, SWT.NONE);
 	page1.setLayout (new RowLayout ());
 	Button button = new Button (page1, SWT.NONE);
@@ -55,13 +55,10 @@ public static void main (String [] args) {
 	Button pageButton = new Button (shell, SWT.PUSH);
 	pageButton.setText ("Push");
 	pageButton.setBounds (clientArea.x + 10, clientArea.y + 10, 80, 25);
-	pageButton.addListener (SWT.Selection, new Listener () {
-		@Override
-		public void handleEvent (Event event) {
-			pageNum = ++pageNum % 2;
-			layout.topControl = pageNum == 0 ? page0 : page1;
-			contentPanel.layout ();
-		}
+	pageButton.addListener (SWT.Selection, event -> {
+		pageNum = ++pageNum % 2;
+		layout.topControl = pageNum == 0 ? page0 : page1;
+		contentPanel.layout ();
 	});
 
 	shell.open ();
@@ -70,4 +67,4 @@ public static void main (String [] args) {
 	}
 	display.dispose ();
 }
-} 
+}
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet25.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet25.java
index 1e3eb51..8349dbf 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet25.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet25.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2004 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -9,13 +9,13 @@
  *     IBM Corporation - initial API and implementation
  *******************************************************************************/
 package org.eclipse.swt.snippets;
- 
+
 /*
  * Control example snippet: print key state, code and character
  *
  * For a list of all SWT example snippets see
  * http://www.eclipse.org/swt/snippets/
- * 
+ *
  * @since 3.0
  */
 import org.eclipse.swt.*;
@@ -47,13 +47,13 @@ static String character (char character) {
 
 static String keyCode (int keyCode) {
 	switch (keyCode) {
-		
+
 		/* Keyboard and Mouse Masks */
 		case SWT.ALT: 		return "ALT";
 		case SWT.SHIFT: 	return "SHIFT";
 		case SWT.CONTROL:	return "CONTROL";
 		case SWT.COMMAND:	return "COMMAND";
-			
+
 		/* Non-Numeric Keypad Keys */
 		case SWT.ARROW_UP:		return "ARROW_UP";
 		case SWT.ARROW_DOWN:	return "ARROW_DOWN";
@@ -67,13 +67,13 @@ static String keyCode (int keyCode) {
 
 		/* Virtual and Ascii Keys */
 		case SWT.BS:	return "BS";
-		case SWT.CR:	return "CR";		
+		case SWT.CR:	return "CR";
 		case SWT.DEL:	return "DEL";
 		case SWT.ESC:	return "ESC";
 		case SWT.LF:	return "LF";
 		case SWT.TAB:	return "TAB";
 		case SWT.SPACE:	return "SPACE";
-	
+
 		/* Functions Keys */
 		case SWT.F1:	return "F1";
 		case SWT.F2:	return "F2";
@@ -90,7 +90,7 @@ static String keyCode (int keyCode) {
 		case SWT.F13:	return "F13";
 		case SWT.F14:	return "F14";
 		case SWT.F15:	return "F15";
-		
+
 		/* Numeric Keypad Keys */
 		case SWT.KEYPAD_ADD:		return "KEYPAD_ADD";
 		case SWT.KEYPAD_SUBTRACT:	return "KEYPAD_SUBTRACT";
@@ -125,21 +125,18 @@ static String keyCode (int keyCode) {
 public static void main (String [] args) {
 	Display display = new Display ();
 	Shell shell = new Shell (display);
-	Listener listener = new Listener () {
-		@Override
-		public void handleEvent (Event e) {
-			String string = e.type == SWT.KeyDown ? "DOWN:" : "UP  :";
-			string += " stateMask=0x" + Integer.toHexString (e.stateMask) + stateMask (e.stateMask) + ",";
-			string += " keyCode=0x" + Integer.toHexString (e.keyCode) + " " + keyCode (e.keyCode) + ",";
-			string += " character=0x" + Integer.toHexString (e.character) + " " + character (e.character);
-			if (e.keyLocation != 0) {
-				string +=  " location="; 
-				if (e.keyLocation == SWT.LEFT) string +=  "LEFT"; 
-				if (e.keyLocation == SWT.RIGHT) string +=  "RIGHT"; 
-				if (e.keyLocation == SWT.KEYPAD) string +=  "KEYPAD"; 
-			}
-			System.out.println (string);
+	Listener listener = e -> {
+		String string = e.type == SWT.KeyDown ? "DOWN:" : "UP  :";
+		string += " stateMask=0x" + Integer.toHexString (e.stateMask) + stateMask (e.stateMask) + ",";
+		string += " keyCode=0x" + Integer.toHexString (e.keyCode) + " " + keyCode (e.keyCode) + ",";
+		string += " character=0x" + Integer.toHexString (e.character) + " " + character (e.character);
+		if (e.keyLocation != 0) {
+			string +=  " location=";
+			if (e.keyLocation == SWT.LEFT) string +=  "LEFT";
+			if (e.keyLocation == SWT.RIGHT) string +=  "RIGHT";
+			if (e.keyLocation == SWT.KEYPAD) string +=  "KEYPAD";
 		}
+		System.out.println (string);
 	};
 	shell.addListener (SWT.KeyDown, listener);
 	shell.addListener (SWT.KeyUp, listener);
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet252.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet252.java
index 4fa2aad..cda2695 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet252.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet252.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2004 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -21,24 +21,21 @@ import org.eclipse.swt.graphics.*;
 import org.eclipse.swt.widgets.*;
 
 public class Snippet252 {
-	
+
 	public static void main(String[] args) {
 		final Display display = new Display();
 		final Shell shell = new Shell(display);
-		
-		shell.addListener(SWT.Paint, new Listener() {
-			@Override
-			public void handleEvent(Event event) {
-				GC gc = event.gc;
-				
-				gc.setLineAttributes(new LineAttributes(10, SWT.CAP_FLAT, SWT.JOIN_MITER, SWT.LINE_SOLID, null, 0, 10));
-				gc.drawPolyline(new int[]{50, 100, 50, 20, 60, 30, 50, 45});
-				
-				gc.setLineAttributes(new LineAttributes(1/2f, SWT.CAP_FLAT, SWT.JOIN_MITER, SWT.LINE_DOT, null, 0, 10));
-				gc.drawPolyline(new int[]{100, 100, 100, 20, 110, 30, 100, 45});
-			}
+
+		shell.addListener(SWT.Paint, event -> {
+			GC gc = event.gc;
+
+			gc.setLineAttributes(new LineAttributes(10, SWT.CAP_FLAT, SWT.JOIN_MITER, SWT.LINE_SOLID, null, 0, 10));
+			gc.drawPolyline(new int[]{50, 100, 50, 20, 60, 30, 50, 45});
+
+			gc.setLineAttributes(new LineAttributes(1/2f, SWT.CAP_FLAT, SWT.JOIN_MITER, SWT.LINE_DOT, null, 0, 10));
+			gc.drawPolyline(new int[]{100, 100, 100, 20, 110, 30, 100, 45});
 		});
-		
+
 		shell.setSize(150, 150);
 		shell.open();
 		while (!shell.isDisposed()) {
@@ -46,4 +43,4 @@ public class Snippet252 {
 		}
 		display.dispose();
 	}
-} 
+}
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet253.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet253.java
index 3047c96..b665220 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet253.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet253.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -18,8 +18,8 @@ package org.eclipse.swt.snippets;
  */
 import org.eclipse.swt.*;
 import org.eclipse.swt.graphics.*;
-import org.eclipse.swt.widgets.*;
 import org.eclipse.swt.layout.*;
+import org.eclipse.swt.widgets.*;
 
 public class Snippet253 {
 	public static void main(String[] args) {
@@ -34,15 +34,12 @@ public class Snippet253 {
 		}
 		final Button button = new Button (shell, SWT.PUSH);
 		button.setText ("Visible Items []");
-		button.addListener (SWT.Selection, new Listener () {
-			@Override
-			public void handleEvent (Event e) {
-				Rectangle rect = table.getClientArea ();
-				int itemHeight = table.getItemHeight ();
-				int headerHeight = table.getHeaderHeight ();
-				int visibleCount = (rect.height - headerHeight + itemHeight - 1) / itemHeight;
-				button.setText ("Visible Items [" + visibleCount + "]");
-			}
+		button.addListener (SWT.Selection, e -> {
+			Rectangle rect = table.getClientArea ();
+			int itemHeight = table.getItemHeight ();
+			int headerHeight = table.getHeaderHeight ();
+			int visibleCount = (rect.height - headerHeight + itemHeight - 1) / itemHeight;
+			button.setText ("Visible Items [" + visibleCount + "]");
 		});
 		shell.setSize(200, 250);
 		shell.open();
@@ -51,4 +48,4 @@ public class Snippet253 {
 		}
 		display.dispose();
 	}
-} 
+}
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet254.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet254.java
index 4d681e0..0581d71 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet254.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet254.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -18,8 +18,8 @@ package org.eclipse.swt.snippets;
  */
 import org.eclipse.swt.*;
 import org.eclipse.swt.graphics.*;
-import org.eclipse.swt.widgets.*;
 import org.eclipse.swt.layout.*;
+import org.eclipse.swt.widgets.*;
 
 public class Snippet254 {
 
@@ -39,7 +39,7 @@ public class Snippet254 {
 			count = parentItem == null ? tree.getItemCount() : parentItem.getItemCount();
 		}
 	}
-	
+
 	public static void main(String[] args) {
 		final Display display = new Display();
 		final Shell shell = new Shell(display);
@@ -56,7 +56,7 @@ public class Snippet254 {
 				item1.setText ("Item " + i + " " + j + " is quite long");
 				for (int k=0; k<3; k++) {
 					TreeItem item2 = new TreeItem (item1, SWT.NONE);
-					item2.setText ("Item " + i + " " + j + " " + k + " is quite long");	
+					item2.setText ("Item " + i + " " + j + " " + k + " is quite long");
 					for (int l=0; l<3; l++) {
 						TreeItem item3 = new TreeItem (item2, SWT.NONE);
 						item3.setText ("Item " + i + " " + j + " " + k + " " + l + " is quite long");
@@ -67,22 +67,19 @@ public class Snippet254 {
 		tree.setLayoutData(new RowData (200, 200));
 		final Button button = new Button (shell, SWT.PUSH);
 		button.setText ("Visible Items []");
-		button.addListener (SWT.Selection, new Listener () {
-			@Override
-			public void handleEvent (Event e) {
-				int visibleCount = 0;
-				Rectangle rect = tree.getClientArea ();
-				TreeItem item = tree.getTopItem ();
-				while (item != null) {
-					visibleCount++;
-					Rectangle itemRect = item.getBounds();
-					if (itemRect.y + itemRect.height > rect.y + rect.height) {
-						break;
-					}
-					item = nextItem (tree, item);
-				}				
-				button.setText ("Visible Items [" + visibleCount + "]");
+		button.addListener (SWT.Selection, e -> {
+			int visibleCount = 0;
+			Rectangle rect = tree.getClientArea ();
+			TreeItem item = tree.getTopItem ();
+			while (item != null) {
+				visibleCount++;
+				Rectangle itemRect = item.getBounds();
+				if (itemRect.y + itemRect.height > rect.y + rect.height) {
+					break;
+				}
+				item = nextItem (tree, item);
 			}
+			button.setText ("Visible Items [" + visibleCount + "]");
 		});
 		shell.pack();
 		shell.open();
@@ -91,4 +88,4 @@ public class Snippet254 {
 		}
 		display.dispose();
 	}
-} 
+}
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet256.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet256.java
index 0ba8f54..cf37303 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet256.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet256.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2005 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -12,10 +12,10 @@ package org.eclipse.swt.snippets;
 
 /*
  * TextLayout example snippet: text with underline and strike through
- * 
+ *
  * For a list of all SWT example snippets see
  * http://www.eclipse.org/swt/snippets/
- * 
+ *
  * @since 3.1
  */
 import org.eclipse.swt.*;
@@ -23,10 +23,10 @@ import org.eclipse.swt.graphics.*;
 import org.eclipse.swt.widgets.*;
 
 public class Snippet256 {
-	
+
 public static void main(String[] args) {
 	Display display = new Display();
-	final Shell shell = new Shell(display, SWT.SHELL_TRIM | SWT.DOUBLE_BUFFERED);	
+	final Shell shell = new Shell(display, SWT.SHELL_TRIM | SWT.DOUBLE_BUFFERED);
 	shell.setText("Underline, Strike Out");
 	Font font = shell.getFont();
 	String text = "Here is some text that is underlined or struck out or both.";
@@ -42,20 +42,17 @@ public static void main(String[] args) {
 	style3.underline = true;
 	style3.strikeout = true;
 	layout.setStyle(style3, 54, 57);
-	shell.addListener(SWT.Paint, new Listener() {
-		@Override
-		public void handleEvent(Event event) {
-			Point point = new Point(10, 10);
-			int width = shell.getClientArea().width - 2 * point.x;
-			layout.setWidth(width);
-			layout.draw(event.gc, point.x, point.y);		
-		}
+	shell.addListener(SWT.Paint, event -> {
+		Point point = new Point(10, 10);
+		int width = shell.getClientArea().width - 2 * point.x;
+		layout.setWidth(width);
+		layout.draw(event.gc, point.x, point.y);
 	});
 	shell.open();
 	while (!shell.isDisposed()) {
 		if (!display.readAndDispatch()) display.sleep();
 	}
-	layout.dispose();		
+	layout.dispose();
 	display.dispose();
 }
 }
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet259.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet259.java
index db4de8e..fb2a858 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet259.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet259.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others.
+ * Copyright (c) 2007, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -15,14 +15,14 @@ package org.eclipse.swt.snippets;
  *
  * For a list of all SWT example snippets see
  * http://www.eclipse.org/swt/snippets/
- * 
+ *
  * @since 3.3
- */ 
+ */
 import org.eclipse.swt.*;
-import org.eclipse.swt.graphics.*;
 import org.eclipse.swt.events.*;
-import org.eclipse.swt.widgets.*;
+import org.eclipse.swt.graphics.*;
 import org.eclipse.swt.layout.*;
+import org.eclipse.swt.widgets.*;
 
 public class Snippet259 {
 
@@ -31,7 +31,7 @@ static class MyList extends Canvas {
 	String [] items = new String [0];
 	static final int INSET_X = 2;
 	static final int INSET_Y = 2;
-	
+
 static int checkStyle (int style) {
 	style &= ~(SWT.H_SCROLL | SWT.V_SCROLL);
 	style |= SWT.NO_BACKGROUND | SWT.NO_REDRAW_RESIZE;
@@ -65,27 +65,24 @@ public MyList (Composite parent, int style) {
 			dragDetect (event);
 		}
 	});
-	addPaintListener (new PaintListener () {
-		@Override
-		public void paintControl (PaintEvent event) {
-			GC gc = event.gc;
-			Color foreground = event.display.getSystemColor (SWT.COLOR_LIST_FOREGROUND);
-			Color background = event.display.getSystemColor (SWT.COLOR_LIST_BACKGROUND);
-			Color selectForeground = event.display.getSystemColor (SWT.COLOR_LIST_SELECTION_TEXT);
-			Color selectBackground = event.display.getSystemColor (SWT.COLOR_LIST_SELECTION);
-			gc.setForeground (foreground);
-			gc.setBackground (background);
-			MyList.this.drawBackground (gc, event.x, event.y, event.width, event.height);
-			int x = INSET_X, y = INSET_Y;
-			for (int i=0; i<items.length; i++) {
-				Point pt = gc.stringExtent(items [i]);
-				gc.setForeground (i == selection ? selectForeground : foreground);
-				gc.setBackground (i == selection ? selectBackground : background);
-				gc.drawString (items [i], x, y);
-				y += pt.y;
-			}
-			
+	addPaintListener (event -> {
+		GC gc = event.gc;
+		Color foreground = event.display.getSystemColor (SWT.COLOR_LIST_FOREGROUND);
+		Color background = event.display.getSystemColor (SWT.COLOR_LIST_BACKGROUND);
+		Color selectForeground = event.display.getSystemColor (SWT.COLOR_LIST_SELECTION_TEXT);
+		Color selectBackground = event.display.getSystemColor (SWT.COLOR_LIST_SELECTION);
+		gc.setForeground (foreground);
+		gc.setBackground (background);
+		MyList.this.drawBackground (gc, event.x, event.y, event.width, event.height);
+		int x = INSET_X, y = INSET_Y;
+		for (int i=0; i<items.length; i++) {
+			Point pt = gc.stringExtent(items [i]);
+			gc.setForeground (i == selection ? selectForeground : foreground);
+			gc.setBackground (i == selection ? selectBackground : background);
+			gc.drawString (items [i], x, y);
+			y += pt.y;
 		}
+
 	});
 }
 
@@ -115,7 +112,7 @@ public void setItems (String [] items) {
 	checkWidget ();
 	if (items == null) SWT.error (SWT.ERROR_NULL_ARGUMENT);
 	this.items = items;
-	redraw ();	
+	redraw ();
 }
 }
 
@@ -125,20 +122,10 @@ public static void main (String [] args) {
 	shell.setLayout (new FillLayout ());
 	MyList t1 = new MyList (shell, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL);
 	t1.setItems (new String [] {"Some", "items", "in", "the", "list"});
-	t1.addDragDetectListener (new DragDetectListener () {
-		@Override
-		public void dragDetected (DragDetectEvent event) {
-			System.out.println ("Drag started ...");
-		}
-	});
+	t1.addDragDetectListener (event -> System.out.println ("Drag started ..."));
 	MyList t2 = new MyList (shell, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL);
 	t2.setItems (new String [] {"Some", "items", "in", "another", "list"});
-	t2.addDragDetectListener (new DragDetectListener () {
-		@Override
-		public void dragDetected (DragDetectEvent event) {
-			System.out.println ("Drag started ...");
-		}
-	});
+	t2.addDragDetectListener (event -> System.out.println ("Drag started ..."));
 	shell.pack ();
 	shell.open ();
 	while (!shell.isDisposed ()) {
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet268.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet268.java
index 78b55e5..ede5257 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet268.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet268.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2004 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -9,19 +9,19 @@
  *     IBM Corporation - initial API and implementation
  *******************************************************************************/
 package org.eclipse.swt.snippets;
-  
+
 /*
  * UI Automation (for testing tools) snippet: post mouse wheel events to a styled text
  *
  * For a list of all SWT example snippets see
  * http://www.eclipse.org/swt/snippets/
- * 
+ *
  * @since 3.0
  */
 import org.eclipse.swt.*;
-import org.eclipse.swt.widgets.*;
 import org.eclipse.swt.custom.*;
 import org.eclipse.swt.layout.*;
+import org.eclipse.swt.widgets.*;
 
 public class Snippet268 {
 
@@ -37,12 +37,7 @@ public static void main(String[] args) {
 	styledText.setText(multiLineString);
 	shell.setSize(styledText.computeSize(SWT.DEFAULT, 400));
 	shell.open();
-	styledText.addListener(SWT.MouseWheel, new Listener() {
-		@Override
-		public void handleEvent(Event e){
-			System.out.println("Mouse Wheel event " + e);
-		}
-	});
+	styledText.addListener(SWT.MouseWheel, e -> System.out.println("Mouse Wheel event " + e));
 	new Thread(){
 		Event event;
 		@Override
@@ -57,7 +52,7 @@ public static void main(String[] args) {
 					Thread.sleep(100);
 				} catch (InterruptedException e) {}
 			}
-		}	
+		}
 	}.start();
 	while (!shell.isDisposed()) {
 		if (!display.readAndDispatch()) display.sleep();
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet270.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet270.java
index 69a7d94..dbbc916 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet270.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet270.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2005 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -12,17 +12,17 @@ package org.eclipse.swt.snippets;
 
 /*
  * Browser snippet: bring up a browser with pop-up window support
- * 
+ *
  * For a list of all SWT example snippets see
  * http://www.eclipse.org/swt/snippets/
- * 
+ *
  * @since 3.1
  */
 import org.eclipse.swt.*;
-import org.eclipse.swt.widgets.*;
+import org.eclipse.swt.browser.*;
 import org.eclipse.swt.graphics.*;
 import org.eclipse.swt.layout.*;
-import org.eclipse.swt.browser.*;
+import org.eclipse.swt.widgets.*;
 
 public class Snippet270 {
 
@@ -53,17 +53,14 @@ public static void main(String[] args) {
 
 /* register WindowEvent listeners */
 static void initialize(final Display display, Browser browser) {
-	browser.addOpenWindowListener(new OpenWindowListener() {
-		@Override
-		public void open(WindowEvent event) {
-			if (!event.required) return;	/* only do it if necessary */
-			Shell shell = new Shell(display);
-			shell.setText("New Window");
-			shell.setLayout(new FillLayout());
-			Browser browser = new Browser(shell, BROWSER_STYLE);
-			initialize(display, browser);
-			event.browser = browser;
-		}
+	browser.addOpenWindowListener(event -> {
+		if (!event.required) return;	/* only do it if necessary */
+		Shell shell = new Shell(display);
+		shell.setText("New Window");
+		shell.setLayout(new FillLayout());
+		Browser browser1 = new Browser(shell, BROWSER_STYLE);
+		initialize(display, browser1);
+		event.browser = browser1;
 	});
 	browser.addVisibilityWindowListener(new VisibilityWindowListener() {
 		@Override
@@ -84,13 +81,10 @@ static void initialize(final Display display, Browser browser) {
 			shell.open();
 		}
 	});
-	browser.addCloseWindowListener(new CloseWindowListener() {
-		@Override
-		public void close(WindowEvent event) {
-			Browser browser = (Browser)event.widget;
-			Shell shell = browser.getShell();
-			shell.close();
-		}
+	browser.addCloseWindowListener(event -> {
+		Browser browser1 = (Browser)event.widget;
+		Shell shell = browser1.getShell();
+		shell.close();
 	});
 }
 }
\ No newline at end of file
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet271.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet271.java
index ff3f822..5038f5c 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet271.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet271.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -12,13 +12,13 @@ package org.eclipse.swt.snippets;
 
 /*
  * Table snippet: specify custom content dimensions in a table with no columns
- * 
+ *
  * For a detailed explanation of this snippet see
  * http://www.eclipse.org/articles/Article-CustomDrawingTableAndTreeItems/customDraw.htm#_example1
- *  
+ *
  * For a list of all SWT example snippets see
  * http://www.eclipse.org/swt/snippets/
- * 
+ *
  * @since 3.2
  */
 import org.eclipse.swt.*;
@@ -41,13 +41,10 @@ public static void main(String[] args) {
 	 * NOTE: MeasureItem is called repeatedly.  Therefore it is critical
 	 * for performance that this method be as efficient as possible.
 	 */
-	table.addListener(SWT.MeasureItem, new Listener() {
-		@Override
-		public void handleEvent(Event event) {
-			int clientWidth = table.getClientArea().width;
-			event.height = event.gc.getFontMetrics().getHeight() * 2;
-			event.width = clientWidth * 2;
-		}
+	table.addListener(SWT.MeasureItem, event -> {
+		int clientWidth = table.getClientArea().width;
+		event.height = event.gc.getFontMetrics().getHeight() * 2;
+		event.width = clientWidth * 2;
 	});
 
 	shell.open();
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet272.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet272.java
index 8162f46..66d92ea 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet272.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet272.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -12,13 +12,13 @@ package org.eclipse.swt.snippets;
 
 /*
  * Table snippet: specify custom column widths when a column is packed
- *  
+ *
  * For a detailed explanation of this snippet see
  * http://www.eclipse.org/articles/Article-CustomDrawingTableAndTreeItems/customDraw.htm#_example2
- * 
+ *
  * For a list of all SWT example snippets see
  * http://www.eclipse.org/swt/snippets/
- * 
+ *
  * @since 3.2
  */
 import org.eclipse.swt.*;
@@ -27,7 +27,7 @@ import org.eclipse.swt.widgets.*;
 public class Snippet272 {
 
 public static void main(String[] args) {
-	Display display = new Display(); 
+	Display display = new Display();
 	Shell shell = new Shell(display);
 	shell.setBounds(10,10,400,200);
 	Table table = new Table(shell, SWT.NONE);
@@ -38,18 +38,8 @@ public static void main(String[] args) {
 	column0.setWidth(100);
 	final TableColumn column1 = new TableColumn(table, SWT.NONE);
 	column1.setWidth(100);
-	column0.addListener(SWT.Selection, new Listener() {
-		@Override
-		public void handleEvent(Event event) {
-			column0.pack();
-		}
-	});
-	column1.addListener(SWT.Selection, new Listener() {
-		@Override
-		public void handleEvent(Event event) {
-			column1.pack();
-		}
-	});
+	column0.addListener(SWT.Selection, event -> column0.pack());
+	column1.addListener(SWT.Selection, event -> column1.pack());
 	for (int i = 0; i < 5; i++) {
 		TableItem item = new TableItem(table, SWT.NONE);
 		item.setText(0, "item " + i + " col 0");
@@ -60,12 +50,7 @@ public static void main(String[] args) {
 	 * NOTE: MeasureItem is called repeatedly.  Therefore it is critical
 	 * for performance that this method be as efficient as possible.
 	 */
-	table.addListener(SWT.MeasureItem, new Listener() {
-		@Override
-		public void handleEvent(Event event) {
-			event.width *= 2;
-		}
-	});
+	table.addListener(SWT.MeasureItem, event -> event.width *= 2);
 
 	shell.open();
 	while (!shell.isDisposed()) {
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet273.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet273.java
index df038d4..45e38cc 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet273.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet273.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -12,13 +12,13 @@ package org.eclipse.swt.snippets;
 
 /*
  * Table snippet: modify the clipping of custom background paints
- * 
+ *
  * For a detailed explanation of this snippet see
  * http://www.eclipse.org/articles/Article-CustomDrawingTableAndTreeItems/customDraw.htm#_example4
- * 
+ *
  * For a list of all SWT example snippets see
  * http://www.eclipse.org/swt/snippets/
- * 
+ *
  * @since 3.2
  */
 import org.eclipse.swt.*;
@@ -58,39 +58,33 @@ public static void main(String[] args) {
 	 * NOTE: MeasureItem and EraseItem are called repeatedly. Therefore it is
 	 * critical for performance that these methods be as efficient as possible.
 	 */
-	table.addListener(SWT.MeasureItem, new Listener() {
-		@Override
-		public void handleEvent(Event event) {
-			int itemIndex = table.indexOf((TableItem)event.item);
-			int rightX = (HIGHS[itemIndex] - SCALE_MIN) * clientWidth / SCALE_RANGE;
-			event.width = rightX;
-		}
+	table.addListener(SWT.MeasureItem, event -> {
+		int itemIndex = table.indexOf((TableItem)event.item);
+		int rightX = (HIGHS[itemIndex] - SCALE_MIN) * clientWidth / SCALE_RANGE;
+		event.width = rightX;
 	});
-	table.addListener(SWT.EraseItem, new Listener() {
-		@Override
-		public void handleEvent(Event event) {
-			int itemIndex = table.indexOf((TableItem)event.item);
-			int leftX = (LOWS[itemIndex] - SCALE_MIN) * clientWidth / SCALE_RANGE;
-			int rightX = (HIGHS[itemIndex] - SCALE_MIN) * clientWidth / SCALE_RANGE;
-			GC gc = event.gc;
-			Rectangle clipping = gc.getClipping();
-			clipping.x = leftX;
-			clipping.width = rightX - leftX;
-			gc.setClipping(clipping);
-			Color oldForeground = gc.getForeground();
-			Color oldBackground = gc.getBackground();
-			gc.setForeground(blue);
-			gc.setBackground(white);
-			gc.fillGradientRectangle(event.x, event.y, event.width / 2, event.height, false);
-			gc.setForeground(white);
-			gc.setBackground(red);
-			gc.fillGradientRectangle(
-				event.x + event.width / 2, event.y, event.width / 2, event.height, false);
-			gc.setForeground(oldForeground);
-			gc.setBackground(oldBackground);
-			event.detail &= ~SWT.BACKGROUND;
-			event.detail &= ~SWT.HOT;
-		}
+	table.addListener(SWT.EraseItem, event -> {
+		int itemIndex = table.indexOf((TableItem)event.item);
+		int leftX = (LOWS[itemIndex] - SCALE_MIN) * clientWidth / SCALE_RANGE;
+		int rightX = (HIGHS[itemIndex] - SCALE_MIN) * clientWidth / SCALE_RANGE;
+		GC gc = event.gc;
+		Rectangle clipping = gc.getClipping();
+		clipping.x = leftX;
+		clipping.width = rightX - leftX;
+		gc.setClipping(clipping);
+		Color oldForeground = gc.getForeground();
+		Color oldBackground = gc.getBackground();
+		gc.setForeground(blue);
+		gc.setBackground(white);
+		gc.fillGradientRectangle(event.x, event.y, event.width / 2, event.height, false);
+		gc.setForeground(white);
+		gc.setBackground(red);
+		gc.fillGradientRectangle(
+			event.x + event.width / 2, event.y, event.width / 2, event.height, false);
+		gc.setForeground(oldForeground);
+		gc.setBackground(oldBackground);
+		event.detail &= ~SWT.BACKGROUND;
+		event.detail &= ~SWT.HOT;
 	});
 
 	shell.open();
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet274.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet274.java
index c2942d3..bd05cb8 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet274.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet274.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -12,18 +12,18 @@ package org.eclipse.swt.snippets;
 
 /*
  * Tree snippet: implement standard tree check box behavior (SWT.CHECK)
- * 
+ *
  * For a list of all SWT example snippets see
  * http://www.eclipse.org/swt/snippets/
- * 
+ *
  * @since 3.3
  */
 import org.eclipse.swt.*;
-import org.eclipse.swt.graphics.Rectangle;
+import org.eclipse.swt.graphics.*;
 import org.eclipse.swt.widgets.*;
 
 public class Snippet274 {
-	
+
 	static void checkPath(TreeItem item, boolean checked, boolean grayed) {
 	    if (item == null) return;
 	    if (grayed) {
@@ -58,17 +58,14 @@ public class Snippet274 {
 	    Display display = new Display();
 	    Shell shell = new Shell(display);
 	    Tree tree = new Tree(shell, SWT.BORDER | SWT.CHECK);
-	    tree.addListener(SWT.Selection, new Listener() {
-	        @Override
-			public void handleEvent(Event event) {
-	            if (event.detail == SWT.CHECK) {
-	                TreeItem item = (TreeItem) event.item;
-	                boolean checked = item.getChecked();
-	                checkItems(item, checked);
-	                checkPath(item.getParentItem(), checked, false);
-	            }
-	        }
-	    });
+	    tree.addListener(SWT.Selection, event -> {
+		    if (event.detail == SWT.CHECK) {
+		        TreeItem item = (TreeItem) event.item;
+		        boolean checked = item.getChecked();
+		        checkItems(item, checked);
+		        checkPath(item.getParentItem(), checked, false);
+		    }
+		});
 	    for (int i = 0; i < 4; i++) {
 	        TreeItem itemI = new TreeItem(tree, SWT.NONE);
 	        itemI.setText("Item " + i);
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet275.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet275.java
index 9d27dd4..82a5602 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet275.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet275.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -12,11 +12,11 @@ package org.eclipse.swt.snippets;
 
 /*
  * Canvas snippet: update a portion of a Canvas frequently
- * 
+ *
  * For a list of all SWT example snippets see
  * http://www.eclipse.org/swt/snippets/
  */
-import org.eclipse.swt.SWT;
+import org.eclipse.swt.*;
 import org.eclipse.swt.graphics.*;
 import org.eclipse.swt.widgets.*;
 
@@ -36,13 +36,10 @@ public static void main (String[] args) {
 	shell.setBounds (10, 10, 790, 790);
 	final Canvas canvas = new Canvas (shell, SWT.NONE);
 	canvas.setBounds (10, 10, 750, 750);
-	canvas.addListener (SWT.Paint, new Listener () {
-		@Override
-		public void handleEvent (Event event) {
-			value = String.valueOf (System.currentTimeMillis ());
-			event.gc.drawImage (image, 0, 0);
-			event.gc.drawString (value, 10, 10, true);
-		}
+	canvas.addListener (SWT.Paint, event -> {
+		value = String.valueOf (System.currentTimeMillis ());
+		event.gc.drawImage (image, 0, 0);
+		event.gc.drawString (value, 10, 10, true);
 	});
 	display.timerExec (INTERVAL, new Runnable () {
 		@Override
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet276.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet276.java
index f9fe835..6fca4da 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet276.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet276.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -12,11 +12,11 @@ package org.eclipse.swt.snippets;
 
 /*
  * Display snippet: map from control-relative to display-relative coordinates
- * 
+ *
  * For a list of all SWT example snippets see
  * http://www.eclipse.org/swt/snippets/
  */
-import org.eclipse.swt.SWT;
+import org.eclipse.swt.*;
 import org.eclipse.swt.graphics.*;
 import org.eclipse.swt.widgets.*;
 
@@ -28,12 +28,9 @@ public static void main (String[] args) {
 	shell.setBounds (200, 200, 400, 400);
 	Label label = new Label (shell, SWT.NONE);
 	label.setText ("click in shell to print display-relative coordinate");
-	Listener listener = new Listener () {
-		@Override
-		public void handleEvent (Event event) {
-			Point point = new Point (event.x, event.y);
-			System.out.println (display.map ((Control)event.widget, null, point));
-		}
+	Listener listener = event -> {
+		Point point = new Point (event.x, event.y);
+		System.out.println (display.map ((Control)event.widget, null, point));
 	};
 	shell.addListener (SWT.MouseDown, listener);
 	label.addListener (SWT.MouseDown, listener);
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet278.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet278.java
index de946e7..8530209 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet278.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet278.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -12,11 +12,11 @@ package org.eclipse.swt.snippets;
 
 /*
  * Tool tip snippet: show a tool tip iff it's not fully visible
- * 
+ *
  * For a list of all SWT example snippets see
  * http://www.eclipse.org/swt/snippets/
  */
-import org.eclipse.swt.SWT;
+import org.eclipse.swt.*;
 import org.eclipse.swt.graphics.*;
 import org.eclipse.swt.layout.*;
 import org.eclipse.swt.widgets.*;
@@ -30,15 +30,12 @@ public static void main (String [] args) {
 	shell.setLayout (new FillLayout ());
 	final Label label = new Label (shell, SWT.NONE);
 	label.setText ("resize the Shell then hover over this Label");
-	label.addListener (SWT.MouseEnter, new Listener () {
-		@Override
-		public void handleEvent (Event event) {
-			Point requiredSize = label.computeSize (SWT.DEFAULT, SWT.DEFAULT);
-			Point labelSize = label.getSize ();
-			boolean fullyVisible = requiredSize.x <= labelSize.x && requiredSize.y <= labelSize.y;
-			System.out.println ("Label is fully visible: " + fullyVisible);
-			label.setToolTipText (fullyVisible ? null : label.getText ());
-		}
+	label.addListener (SWT.MouseEnter, event -> {
+		Point requiredSize = label.computeSize (SWT.DEFAULT, SWT.DEFAULT);
+		Point labelSize = label.getSize ();
+		boolean fullyVisible = requiredSize.x <= labelSize.x && requiredSize.y <= labelSize.y;
+		System.out.println ("Label is fully visible: " + fullyVisible);
+		label.setToolTipText (fullyVisible ? null : label.getText ());
 	});
 	shell.open ();
 	while (!shell.isDisposed ()) {
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet279.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet279.java
index adeb96b..8528058 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet279.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet279.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -27,25 +27,22 @@ public class Snippet279 {
 		Shell shell = new Shell (display, SWT.SHELL_TRIM | SWT.DOUBLE_BUFFERED);
 		shell.setLayout(new FillLayout ());
 		final Image image = display.getSystemImage (SWT.ICON_QUESTION);
-		shell.addListener (SWT.Paint, new Listener () {
-			@Override
-			public void handleEvent (Event e) {
-				Rectangle rect = image.getBounds ();
-				GC gc = e.gc;
-				int x = 10, y = 10;
-				gc.drawImage (image, x, y);
-				Transform tr = new Transform (e.display);
-				tr.setElements (1, 0, 0, -1, 1, 2*(y+rect.height));
-				gc.setTransform (tr);
-				gc.drawImage (image, x, y);
-				gc.setTransform (null);
-				Color background = gc.getBackground ();
-				Pattern p = new Pattern (e.display, x, y+rect.height, x, y+(2*rect.height), background, 0, background, 255);
-				gc.setBackgroundPattern (p);
-				gc.fillRectangle (x, y+rect.height, rect.width, rect.height);
-				p.dispose ();
-				tr.dispose ();
-			}
+		shell.addListener (SWT.Paint, e -> {
+			Rectangle rect = image.getBounds ();
+			GC gc = e.gc;
+			int x = 10, y = 10;
+			gc.drawImage (image, x, y);
+			Transform tr = new Transform (e.display);
+			tr.setElements (1, 0, 0, -1, 1, 2*(y+rect.height));
+			gc.setTransform (tr);
+			gc.drawImage (image, x, y);
+			gc.setTransform (null);
+			Color background = gc.getBackground ();
+			Pattern p = new Pattern (e.display, x, y+rect.height, x, y+(2*rect.height), background, 0, background, 255);
+			gc.setBackgroundPattern (p);
+			gc.fillRectangle (x, y+rect.height, rect.width, rect.height);
+			p.dispose ();
+			tr.dispose ();
 		});
 		shell.setSize (600, 400);
 		shell.open ();
@@ -55,6 +52,6 @@ public class Snippet279 {
 		}
 		display.dispose ();
 	}
-	
+
 }
 
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet280.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet280.java
index b4de7e2..57a04da 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet280.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet280.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -12,11 +12,11 @@ package org.eclipse.swt.snippets;
 
 /*
  * draw a multi-gradient (without advanced graphics)
- * 
+ *
  * For a list of all SWT example snippets see
  * http://www.eclipse.org/swt/snippets/
  */
-import org.eclipse.swt.SWT;
+import org.eclipse.swt.*;
 import org.eclipse.swt.graphics.*;
 import org.eclipse.swt.layout.*;
 import org.eclipse.swt.widgets.*;
@@ -27,27 +27,24 @@ public static void main (String [] args) {
 	final Display display = new Display ();
 	final Shell shell = new Shell (display, SWT.SHELL_TRIM | SWT.NO_BACKGROUND);
 	shell.setLayout(new FillLayout ());
-	shell.addListener (SWT.Paint, new Listener () {
-		@Override
-		public void handleEvent (Event e) {
-			GC gc = e.gc;
-			Rectangle rect = shell.getClientArea ();
-			Color color1 = new Color (display, 234, 246, 253);
-			Color color2 = new Color (display, 217, 240, 252);
-			gc.setForeground(color1);
-			gc.setBackground(color2);
-			gc.fillGradientRectangle (rect.x, rect.y, rect.width, rect.height / 2, true);
-			color1.dispose ();
-			color2.dispose ();
-			Color color3 = new Color (display, 190, 230, 253);
-			Color color4 = new Color (display, 167, 217, 245);
-			gc.setForeground(color3);
-			gc.setBackground(color4);
-			gc.fillGradientRectangle (rect.x, rect.y + (rect.height / 2), rect.width, rect.height / 2 + 1, true);
-			color3.dispose ();
-			color4.dispose ();
-			
-		}
+	shell.addListener (SWT.Paint, e -> {
+		GC gc = e.gc;
+		Rectangle rect = shell.getClientArea ();
+		Color color1 = new Color (display, 234, 246, 253);
+		Color color2 = new Color (display, 217, 240, 252);
+		gc.setForeground(color1);
+		gc.setBackground(color2);
+		gc.fillGradientRectangle (rect.x, rect.y, rect.width, rect.height / 2, true);
+		color1.dispose ();
+		color2.dispose ();
+		Color color3 = new Color (display, 190, 230, 253);
+		Color color4 = new Color (display, 167, 217, 245);
+		gc.setForeground(color3);
+		gc.setBackground(color4);
+		gc.fillGradientRectangle (rect.x, rect.y + (rect.height / 2), rect.width, rect.height / 2 + 1, true);
+		color3.dispose ();
+		color4.dispose ();
+
 	});
 	shell.setSize (200, 64);
 	shell.open ();
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet281.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet281.java
index 906fa09..e133309 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet281.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet281.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -12,11 +12,11 @@ package org.eclipse.swt.snippets;
 
 /*
  * draw a multi-gradient
- * 
+ *
  * For a list of all SWT example snippets see
  * http://www.eclipse.org/swt/snippets/
  */
-import org.eclipse.swt.SWT;
+import org.eclipse.swt.*;
 import org.eclipse.swt.graphics.*;
 import org.eclipse.swt.layout.*;
 import org.eclipse.swt.widgets.*;
@@ -27,28 +27,25 @@ public static void main (String [] args) {
 	final Display display = new Display ();
 	final Shell shell = new Shell (display, SWT.SHELL_TRIM | SWT.NO_BACKGROUND);
 	shell.setLayout(new FillLayout ());
-	shell.addListener (SWT.Paint, new Listener () {
-		@Override
-		public void handleEvent (Event e) {
-			GC gc = e.gc;
-			Rectangle rect = shell.getClientArea ();
-			Color color1 = new Color (display, 234, 246, 253);
-			Color color2 = new Color (display, 217, 240, 252);
-			Color color3 = new Color (display, 190, 230, 253);
-			Color color4 = new Color (display, 167, 217, 245);
-			Pattern p1 = new Pattern (display, 0, 0, 0, rect.height / 2, color1, color2);
-			gc.setBackgroundPattern (p1);
-			gc.fillRectangle (rect.x, rect.y, rect.width, rect.height / 2);
-			Pattern p2 = new Pattern (display, 0, rect.height / 2, 0, rect.height, color3, color4);
-			gc.setBackgroundPattern (p2);
-			gc.fillRectangle (rect.x, rect.y + (rect.height / 2), rect.width, rect.height / 2 + 1);
-			p1.dispose ();
-			p2.dispose ();
-			color1.dispose ();
-			color2.dispose ();
-			color3.dispose ();
-			color4.dispose ();
-		}
+	shell.addListener (SWT.Paint, e -> {
+		GC gc = e.gc;
+		Rectangle rect = shell.getClientArea ();
+		Color color1 = new Color (display, 234, 246, 253);
+		Color color2 = new Color (display, 217, 240, 252);
+		Color color3 = new Color (display, 190, 230, 253);
+		Color color4 = new Color (display, 167, 217, 245);
+		Pattern p1 = new Pattern (display, 0, 0, 0, rect.height / 2, color1, color2);
+		gc.setBackgroundPattern (p1);
+		gc.fillRectangle (rect.x, rect.y, rect.width, rect.height / 2);
+		Pattern p2 = new Pattern (display, 0, rect.height / 2, 0, rect.height, color3, color4);
+		gc.setBackgroundPattern (p2);
+		gc.fillRectangle (rect.x, rect.y + (rect.height / 2), rect.width, rect.height / 2 + 1);
+		p1.dispose ();
+		p2.dispose ();
+		color1.dispose ();
+		color2.dispose ();
+		color3.dispose ();
+		color4.dispose ();
 	});
 	shell.setSize (200, 64);
 	shell.open ();
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet282.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet282.java
index 7c42dd6..f96435b 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet282.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet282.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others.
+ * Copyright (c) 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -12,7 +12,7 @@ package org.eclipse.swt.snippets;
 
 /*
  * Copy/paste image to/from clipboard.
- * 
+ *
  * For a list of all SWT example snippets see
  * http://www.eclipse.org/swt/snippets/
  */
@@ -37,7 +37,7 @@ public class Snippet282 {
 	    gd.minimumHeight = 400;
 	    gd.minimumWidth = 600;
 	    imageButton.setLayoutData(gd);
-	    
+
 	    final Text imageText = new Text(shell, SWT.BORDER);
 	    imageText.setLayoutData(new GridData(SWT.FILL, SWT.BEGINNING, true, false));
 
@@ -45,76 +45,64 @@ public class Snippet282 {
 		buttons.setLayout(new GridLayout(4, true));
 		Button button = new Button(buttons, SWT.PUSH);
 		button.setText("Open");
-		button.addListener(SWT.Selection, new Listener() {
-			@Override
-			public void handleEvent(Event event) {
-				FileDialog dialog = new FileDialog (shell, SWT.OPEN);
-				dialog.setText("Open an image file or cancel");
-				String string = dialog.open ();
-				if (string != null) {
-					imageButton.setText("");
-					Image image = imageButton.getImage();
-					if (image != null) image.dispose();
-					image = new Image(display, string);
-					imageButton.setImage(image);
-					imageText.setText(string);
-				}
+		button.addListener(SWT.Selection, event -> {
+			FileDialog dialog = new FileDialog (shell, SWT.OPEN);
+			dialog.setText("Open an image file or cancel");
+			String string = dialog.open ();
+			if (string != null) {
+				imageButton.setText("");
+				Image image = imageButton.getImage();
+				if (image != null) image.dispose();
+				image = new Image(display, string);
+				imageButton.setImage(image);
+				imageText.setText(string);
 			}
 		});
 
 		button = new Button(buttons, SWT.PUSH);
 		button.setText("Copy");
-		button.addListener(SWT.Selection, new Listener() {
-			@Override
-			public void handleEvent(Event event) {
-				Image image = imageButton.getImage();
-				if (image != null) {
-					ImageTransfer imageTransfer = ImageTransfer.getInstance();
-					TextTransfer textTransfer = TextTransfer.getInstance();
-					clipboard.setContents(new Object[]{image.getImageData(), imageText.getText()}, 
-							new Transfer[]{imageTransfer, textTransfer});
-				}
+		button.addListener(SWT.Selection, event -> {
+			Image image = imageButton.getImage();
+			if (image != null) {
+				ImageTransfer imageTransfer = ImageTransfer.getInstance();
+				TextTransfer textTransfer = TextTransfer.getInstance();
+				clipboard.setContents(new Object[]{image.getImageData(), imageText.getText()},
+						new Transfer[]{imageTransfer, textTransfer});
 			}
 		});
 
 		button = new Button(buttons, SWT.PUSH);
 		button.setText("Paste");
-		button.addListener(SWT.Selection, new Listener() {
-			@Override
-			public void handleEvent(Event event) {
-				ImageData imageData = (ImageData)clipboard.getContents(ImageTransfer.getInstance());
-				if (imageData != null) {
-					imageButton.setText("");
-					Image image = imageButton.getImage();
-					if (image != null) image.dispose();
-					image = new Image(display, imageData);
-					imageButton.setImage(image);
-				} else {
-					imageButton.setText("No image");
-					imageButton.setImage(null);
-				}
-				String text = (String)clipboard.getContents(TextTransfer.getInstance());
-				if (text != null) {
-					imageText.setText(text);
-				} else {
-					imageText.setText("");
-				}
-			}
-		});
-		
-		button = new Button(buttons, SWT.PUSH);
-		button.setText("Clear");
-		button.addListener(SWT.Selection, new Listener() {
-			@Override
-			public void handleEvent(Event event) {
+		button.addListener(SWT.Selection, event -> {
+			ImageData imageData = (ImageData)clipboard.getContents(ImageTransfer.getInstance());
+			if (imageData != null) {
 				imageButton.setText("");
 				Image image = imageButton.getImage();
 				if (image != null) image.dispose();
+				image = new Image(display, imageData);
+				imageButton.setImage(image);
+			} else {
+				imageButton.setText("No image");
 				imageButton.setImage(null);
+			}
+			String text = (String)clipboard.getContents(TextTransfer.getInstance());
+			if (text != null) {
+				imageText.setText(text);
+			} else {
 				imageText.setText("");
 			}
 		});
-		
+
+		button = new Button(buttons, SWT.PUSH);
+		button.setText("Clear");
+		button.addListener(SWT.Selection, event -> {
+			imageButton.setText("");
+			Image image = imageButton.getImage();
+			if (image != null) image.dispose();
+			imageButton.setImage(null);
+			imageText.setText("");
+		});
+
 		shell.pack();
 		shell.open();
 		while (!shell.isDisposed()) {
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet283.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet283.java
index d03fdb9..5a2ec1c 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet283.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet283.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others.
+ * Copyright (c) 2007, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -12,8 +12,8 @@ package org.eclipse.swt.snippets;
 
 /*
  * Table example snippet: Draw left aligned icon, text and selection
- * 
- * For more info on custom-drawing TableItem and TreeItem content see 
+ *
+ * For more info on custom-drawing TableItem and TreeItem content see
  * http://www.eclipse.org/articles/article.php?file=Article-CustomDrawingTableAndTreeItems/index.html
  *
  * For a list of all SWT example snippets see
@@ -37,25 +37,22 @@ public class Snippet283 {
 			item.setText ("Item " + i + " with long text that scrolls.");
 			if (i % 2 == 1) item.setImage (image);
 		}
-		table.addListener(SWT.MouseDown, new Listener() {
-			@Override
-			public void handleEvent(Event event) {
-				Rectangle rect = table.getClientArea ();
-				Point point = new Point (event.x, event.y);
-				if (table.getItem(point) != null) return;
-				for (int i=table.getTopIndex (); i<table.getItemCount(); i++) {
-					TableItem item = table.getItem (i);
-					Rectangle itemRect = item.getBounds ();
-					if (!itemRect.intersects (rect)) return;
-					itemRect.x = rect.x;
-					itemRect.width = rect.width;
-					if (itemRect.contains (point)) {
-						table.setSelection (item);
-						Event selectionEvent = new Event ();
-						selectionEvent.item = item;
-						table.notifyListeners(SWT.Selection, selectionEvent);
-						return;
-					}
+		table.addListener(SWT.MouseDown, event -> {
+			Rectangle rect = table.getClientArea ();
+			Point point = new Point (event.x, event.y);
+			if (table.getItem(point) != null) return;
+			for (int i=table.getTopIndex (); i<table.getItemCount(); i++) {
+				TableItem item = table.getItem (i);
+				Rectangle itemRect = item.getBounds ();
+				if (!itemRect.intersects (rect)) return;
+				itemRect.x = rect.x;
+				itemRect.width = rect.width;
+				if (itemRect.contains (point)) {
+					table.setSelection (item);
+					Event selectionEvent = new Event ();
+					selectionEvent.item = item;
+					table.notifyListeners(SWT.Selection, selectionEvent);
+					return;
 				}
 			}
 		});
@@ -64,46 +61,40 @@ public class Snippet283 {
 		 * Therefore, it is critical for performance that these methods be
 		 * as efficient as possible.
 		 */
-		table.addListener(SWT.EraseItem, new Listener() {
-			@Override
-			public void handleEvent(Event event) {
-				event.detail &= ~SWT.FOREGROUND;
-				String osName = System.getProperty("os.name");
-				if (osName != null && osName.indexOf ("Windows") != -1) {
-					if (osName.indexOf ("Vista") != -1 || osName.indexOf ("unknown") != -1) {
-						return;
-					}
+		table.addListener(SWT.EraseItem, event -> {
+			event.detail &= ~SWT.FOREGROUND;
+			String osName = System.getProperty("os.name");
+			if (osName != null && osName.indexOf ("Windows") != -1) {
+				if (osName.indexOf ("Vista") != -1 || osName.indexOf ("unknown") != -1) {
+					return;
 				}
-				event.detail &= ~(SWT.FOREGROUND | SWT.SELECTED | SWT.HOT | SWT.FOCUSED);
-				GC gc = event.gc;
-				TableItem item = (TableItem)event.item;
-				Rectangle rect = table.getClientArea ();
-				Rectangle itemRect = item.getBounds ();
-				itemRect.x = rect.x;
-				itemRect.width = rect.width;
-				gc.setClipping ((Rectangle) null);
-				gc.fillRectangle (itemRect);
 			}
+			event.detail &= ~(SWT.FOREGROUND | SWT.SELECTED | SWT.HOT | SWT.FOCUSED);
+			GC gc = event.gc;
+			TableItem item = (TableItem)event.item;
+			Rectangle rect = table.getClientArea ();
+			Rectangle itemRect = item.getBounds ();
+			itemRect.x = rect.x;
+			itemRect.width = rect.width;
+			gc.setClipping ((Rectangle) null);
+			gc.fillRectangle (itemRect);
 		});
-		table.addListener(SWT.PaintItem, new Listener() {
-			@Override
-			public void handleEvent(Event event) {
-				TableItem item = (TableItem)event.item;
-				GC gc = event.gc;
-				Image image = item.getImage (0);
-				String text = item.getText (0);
-				Point textExtent = gc.stringExtent (text);
-				Rectangle imageRect = item.getImageBounds(0);
-				Rectangle textRect = item.getTextBounds (0);
-				int textY = textRect.y + Math.max (0, (textRect.height - textExtent.y) / 2);
-				if (image == null) {
-					gc.drawString(text, imageRect.x, textY, true);
-				} else {
-					Rectangle imageExtent = image.getBounds ();
-					int imageY = imageRect.y + Math.max (0, (imageRect.height - imageExtent.height) / 2);
-					gc.drawImage (image, imageRect.x, imageY);
-					gc.drawString (text, textRect.x, textY, true);
-				}
+		table.addListener(SWT.PaintItem, event -> {
+			TableItem item = (TableItem)event.item;
+			GC gc = event.gc;
+			Image image1 = item.getImage (0);
+			String text = item.getText (0);
+			Point textExtent = gc.stringExtent (text);
+			Rectangle imageRect = item.getImageBounds(0);
+			Rectangle textRect = item.getTextBounds (0);
+			int textY = textRect.y + Math.max (0, (textRect.height - textExtent.y) / 2);
+			if (image1 == null) {
+				gc.drawString(text, imageRect.x, textY, true);
+			} else {
+				Rectangle imageExtent = image1.getBounds ();
+				int imageY = imageRect.y + Math.max (0, (imageRect.height - imageExtent.height) / 2);
+				gc.drawImage (image1, imageRect.x, imageY);
+				gc.drawString (text, textRect.x, textY, true);
 			}
 		});
 		shell.pack();
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet285.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet285.java
index 4c67949..aad78b6 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet285.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet285.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007, 2014 IBM Corporation and others.
+ * Copyright (c) 2007, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -70,26 +70,21 @@ public class Snippet285 {
 		Region region = new Region(display);
 		loadPath(region, data.points, data.types);
 		shell.setRegion(region);
-		Listener listener = new Listener() {
-			@Override
-			public void handleEvent(Event event) {
-				switch (event.type) {
-					case SWT.MouseDown: {
-						shell.dispose();
-						break;
-					}
-					case SWT.Paint: {
-						GC gc = event.gc;
-						Rectangle rect = shell.getClientArea();
-						Pattern pattern = new Pattern(display, rect.x, rect.y
-								+ rect.height, rect.x + rect.width, rect.y, display
-								.getSystemColor(SWT.COLOR_BLUE), display
-								.getSystemColor(SWT.COLOR_WHITE));
-						gc.setBackgroundPattern(pattern);
-						gc.fillRectangle(rect);
-						pattern.dispose();
-						break;
-					}
+		Listener listener = event -> {
+			switch (event.type) {
+				case SWT.MouseDown: {
+					shell.dispose();
+					break;
+				}
+				case SWT.Paint: {
+					GC gc = event.gc;
+					Rectangle rect = shell.getClientArea();
+					Pattern pattern = new Pattern(display, rect.x, rect.y + rect.height, rect.x + rect.width, rect.y,
+							display.getSystemColor(SWT.COLOR_BLUE), display.getSystemColor(SWT.COLOR_WHITE));
+					gc.setBackgroundPattern(pattern);
+					gc.fillRectangle(rect);
+					pattern.dispose();
+					break;
 				}
 			}
 		};
@@ -103,5 +98,5 @@ public class Snippet285 {
 		region.dispose();
 		display.dispose();
 	}
-	
+
 }
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet286.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet286.java
index 33b0d13..c291407 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet286.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet286.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others.
+ * Copyright (c) 2007, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -17,7 +17,6 @@ package org.eclipse.swt.snippets;
  * http://www.eclipse.org/swt/snippets/
  */
 import org.eclipse.swt.*;
-import org.eclipse.swt.events.*;
 import org.eclipse.swt.layout.*;
 import org.eclipse.swt.widgets.*;
 
@@ -27,7 +26,7 @@ public class Snippet286 {
 		Display display = new Display();
 		Shell shell = new Shell(display);
 		shell.setLayout(new GridLayout());
-		
+
 		Canvas blankCanvas = new Canvas(shell, SWT.BORDER);
 		blankCanvas.setLayoutData(new GridData(200, 200));
 		final Label statusLine = new Label(shell, SWT.NONE);
@@ -35,26 +34,21 @@ public class Snippet286 {
 
 		Menu bar = new Menu (shell, SWT.BAR);
 		shell.setMenuBar (bar);
-		
+
 		MenuItem menuItem = new MenuItem (bar, SWT.CASCADE);
 		menuItem.setText ("Test");
 		Menu menu = new Menu(bar);
 		menuItem.setMenu (menu);
-		
+
 		for (int i = 0; i < 5; i++) {
 			MenuItem item = new MenuItem (menu, SWT.PUSH);
 			item.setText ("Item " + i);
-			item.addArmListener(new ArmListener() {
-				@Override
-				public void widgetArmed(ArmEvent e) {
-					statusLine.setText(((MenuItem)e.getSource()).getText());
-				}
-			});
+			item.addArmListener(e -> statusLine.setText(((MenuItem)e.getSource()).getText()));
 		}
-		
+
 		shell.pack();
 		shell.open();
-		
+
 		while(!shell.isDisposed()) {
 			if(!display.readAndDispatch()) display.sleep();
 		}
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet287.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet287.java
index 5ae49e8..ca3dda2 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet287.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet287.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2008 IBM Corporation and others.
+ * Copyright (c) 2008, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -16,7 +16,7 @@ package org.eclipse.swt.snippets;
  * For a list of all SWT example snippets see
  * http://www.eclipse.org/swt/snippets/
  */
-import org.eclipse.swt.SWT;
+import org.eclipse.swt.*;
 import org.eclipse.swt.layout.*;
 import org.eclipse.swt.widgets.*;
 
@@ -48,20 +48,17 @@ public static void main(String[] args) {
 
 	Button button = new Button (shell, SWT.PUSH);
 	button.setText ("Find '" + SEARCH_STRING + "'");
-	button.addListener (SWT.Selection, new Listener () {
-		@Override
-		public void handleEvent (Event event) {
-			int itemCount = tree.getItemCount ();
-			for (int i = 0; i < itemCount; i++) {
-				TreeItem item = tree.getItem (i);
-				boolean success = find (item, SEARCH_STRING);
-				if (success) {
-					System.out.println ("Found it");
-					return;
-				}
+	button.addListener (SWT.Selection, event -> {
+		int itemCount = tree.getItemCount ();
+		for (int i = 0; i < itemCount; i++) {
+			TreeItem item = tree.getItem (i);
+			boolean success = find (item, SEARCH_STRING);
+			if (success) {
+				System.out.println ("Found it");
+				return;
 			}
-			System.out.println ("Did not find it");
 		}
+		System.out.println ("Did not find it");
 	});
 	shell.open ();
 	while (!shell.isDisposed ()) {
@@ -78,7 +75,7 @@ static TreeItem createItem (TreeItem parent, int itemIndex) {
 	} else {
 		newItem = new TreeItem (parent, SWT.NONE);
 	}
-	String indexString = String.valueOf (itemIndex); 
+	String indexString = String.valueOf (itemIndex);
 	newItem.setText(new String[] {
 		indexString + 'a', indexString + 'b', indexString + 'c'});
 	return newItem;
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet289.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet289.java
index 27bcac3..025e9eb 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet289.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet289.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2004 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -17,7 +17,6 @@ package org.eclipse.swt.snippets;
  * http://www.eclipse.org/swt/snippets/
  */
 import org.eclipse.swt.*;
-import org.eclipse.swt.events.*;
 import org.eclipse.swt.graphics.*;
 import org.eclipse.swt.layout.*;
 import org.eclipse.swt.widgets.*;
@@ -30,31 +29,25 @@ public static void main(String[] args) {
 	final Combo combo = new Combo(shell, SWT.NONE);
 	combo.setItems("1111", "2222", "3333", "4444");
 	combo.setText(combo.getItem(0));
-	combo.addVerifyListener(new VerifyListener() {
-		@Override
-		public void verifyText(VerifyEvent e) {
-			String text = combo.getText();
-			String newText = text.substring(0, e.start) + e.text + text.substring(e.end);
-			try {
-				if (newText.length() != 0) Integer.parseInt(newText);
-			} catch (NumberFormatException ex) {
-				e.doit = false;
-			}
+	combo.addVerifyListener(e -> {
+		String text = combo.getText();
+		String newText = text.substring(0, e.start) + e.text + text.substring(e.end);
+		try {
+			if (newText.length() != 0) Integer.parseInt(newText);
+		} catch (NumberFormatException ex) {
+			e.doit = false;
 		}
 	});
-	combo.addTraverseListener(new TraverseListener() {
-		@Override
-		public void keyTraversed(TraverseEvent e) {
-			if (e.detail == SWT.TRAVERSE_RETURN) {
-				e.doit = false;
-				e.detail = SWT.TRAVERSE_NONE;
-				String newText = combo.getText();
-				try {
-					Integer.parseInt(newText);
-					combo.add(newText);
-					combo.setSelection(new Point(0, newText.length()));
-				} catch (NumberFormatException ex) {
-				}
+	combo.addTraverseListener(e -> {
+		if (e.detail == SWT.TRAVERSE_RETURN) {
+			e.doit = false;
+			e.detail = SWT.TRAVERSE_NONE;
+			String newText = combo.getText();
+			try {
+				Integer.parseInt(newText);
+				combo.add(newText);
+				combo.setSelection(new Point(0, newText.length()));
+			} catch (NumberFormatException ex) {
 			}
 		}
 	});
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet29.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet29.java
index d529c1b..4f7812c 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet29.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet29.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2004 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -31,12 +31,7 @@ public static void main (String [] args) {
 	Menu submenu = new Menu (shell, SWT.DROP_DOWN);
 	fileItem.setMenu (submenu);
 	MenuItem item = new MenuItem (submenu, SWT.PUSH);
-	item.addListener (SWT.Selection, new Listener () {
-		@Override
-		public void handleEvent (Event e) {
-			System.out.println ("Select All");
-		}
-	});
+	item.addListener (SWT.Selection, e -> System.out.println ("Select All"));
 	item.setText ("Select &All\tCtrl+A");
 	item.setAccelerator (SWT.MOD1 + 'A');
 	shell.setSize (200, 200);
@@ -47,4 +42,4 @@ public static void main (String [] args) {
 	display.dispose ();
 }
 
-} 
+}
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet292.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet292.java
index 6581888..46195d0 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet292.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet292.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2008 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -10,18 +10,18 @@
  *******************************************************************************/
 package org.eclipse.swt.snippets;
 
-/* 
+/*
  * Take a snapshot of a control
  *
  * For a list of all SWT example snippets see
  * http://www.eclipse.org/swt/snippets/
- * 
+ *
  * @since 3.4
  */
 import org.eclipse.swt.*;
 import org.eclipse.swt.graphics.*;
-import org.eclipse.swt.widgets.*;
 import org.eclipse.swt.layout.*;
+import org.eclipse.swt.widgets.*;
 
 public class Snippet292 {
 	public static void main(String[] args) {
@@ -42,30 +42,24 @@ public class Snippet292 {
 		}
 		new Button(group, SWT.PUSH).setText("Button");
 		final Label label = new Label (shell, SWT.NONE);
-		label.addListener (SWT.Dispose, new Listener () {
-			@Override
-			public void handleEvent (Event e) {
-				Image image = label.getImage ();
-				if (image != null) image.dispose ();
-			}
+		label.addListener (SWT.Dispose, e -> {
+			Image image = label.getImage ();
+			if (image != null) image.dispose ();
 		});
 		Button button = new Button (shell, SWT.PUSH);
 		button.setText ("Snapshot");
-		button.addListener (SWT.Selection, new Listener () {
-			@Override
-			public void handleEvent (Event e) {
-				Image image = label.getImage ();
-				if (image != null) image.dispose ();
-				image = new Image (display, group.getBounds ());
-				GC gc = new GC (image);
-				boolean success = group.print (gc);
-				gc.dispose ();
-				label.setImage (image);
-				if (!success) {
-					MessageBox messageBox = new MessageBox (shell, SWT.OK | SWT.PRIMARY_MODAL);
-					messageBox.setMessage ("Sorry, taking a snapshot is not supported on your platform");
-					messageBox.open ();
-				}
+		button.addListener (SWT.Selection, e -> {
+			Image image = label.getImage ();
+			if (image != null) image.dispose ();
+			image = new Image (display, group.getBounds ());
+			GC gc = new GC (image);
+			boolean success = group.print (gc);
+			gc.dispose ();
+			label.setImage (image);
+			if (!success) {
+				MessageBox messageBox = new MessageBox (shell, SWT.OK | SWT.PRIMARY_MODAL);
+				messageBox.setMessage ("Sorry, taking a snapshot is not supported on your platform");
+				messageBox.open ();
 			}
 		});
 		GridLayout layout = new GridLayout (2, true);
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet294.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet294.java
index a151ac0..4022f09 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet294.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet294.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2008 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -17,10 +17,10 @@ import org.eclipse.swt.widgets.*;
 
 /*
  * Region on a control: create a non-rectangular button
- * 
+ *
  * For a list of all SWT example snippets see
  * http://www.eclipse.org/swt/snippets/
- * 
+ *
  * @since 3.4
  */
 
@@ -42,35 +42,30 @@ public class Snippet294 {
 
 	public static void main(String[] args) {
 		final Display display = new Display();
-		
+
 		final Shell shell = new Shell(display);
 		shell.setText("Regions on a Control");
 		shell.setLayout(new FillLayout());
 		shell.setBackground(display.getSystemColor(SWT.COLOR_DARK_RED));
-		
+
 		Button b2 = new Button(shell, SWT.PUSH);
 		b2.setText("Button with Regions");
-		
+
 		// define a region that looks like a circle with two holes in ot
 		Region region = new Region();
 		region.add(circle(67, 87, 77));
 		region.subtract(circle(20, 87, 47));
 		region.subtract(circle(20, 87, 113));
-		
+
 		// define the shape of the button using setRegion
 		b2.setRegion(region);
 		b2.setLocation(100,50);
-		
-		b2.addListener(SWT.Selection, new Listener() {
-			@Override
-			public void handleEvent(Event e) {
-				shell.close();
-			}
-		});
-		
+
+		b2.addListener(SWT.Selection, e -> shell.close());
+
 		shell.setSize(200,200);
 		shell.open();
-		
+
 		while (!shell.isDisposed()) {
 			if (!display.readAndDispatch())
 				display.sleep();
@@ -78,5 +73,5 @@ public class Snippet294 {
 		region.dispose();
 		display.dispose();
 	}
-	
+
 }
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet296.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet296.java
index 1486b23..7db8ae4 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet296.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet296.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2008 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -23,7 +23,7 @@ import org.eclipse.swt.graphics.*;
 import org.eclipse.swt.widgets.*;
 
 public class Snippet296 {
-	
+
 public static void main (String[] args) {
 	final Display display = new Display ();
 	Shell shell = new Shell (display);
@@ -81,37 +81,24 @@ public static void main (String[] args) {
 	 * The following listener scrolls the Tree one item at a time
 	 * in response to MouseWheel events.
 	 */
-	tree.addListener(SWT.MouseWheel, new Listener() {
-		@Override
-		public void handleEvent(Event event) {
-			Point origin = sc.getOrigin();
-			if (event.count < 0) {
-				origin.y = Math.min(origin.y + tree.getItemHeight(), tree.getSize().y);
-			} else {
-				origin.y = Math.max(origin.y - tree.getItemHeight(), 0);
-			}
-			sc.setOrigin(origin);
+	tree.addListener(SWT.MouseWheel, event -> {
+		Point origin = sc.getOrigin();
+		if (event.count < 0) {
+			origin.y = Math.min(origin.y + tree.getItemHeight(), tree.getSize().y);
+		} else {
+			origin.y = Math.max(origin.y - tree.getItemHeight(), 0);
 		}
+		sc.setOrigin(origin);
 	});
 
 	Button downButton = new Button (shell, SWT.PUSH);
 	downButton.setBounds (10, 220, 120, 30);
 	downButton.setText ("Down 10px");
-	downButton.addListener (SWT.Selection, new Listener () {
-		@Override
-		public void handleEvent (Event event) {
-			sc.setOrigin (0, sc.getOrigin ().y + 10);
-		}
-	});
+	downButton.addListener (SWT.Selection, event -> sc.setOrigin (0, sc.getOrigin ().y + 10));
 	Button upButton = new Button (shell, SWT.PUSH);
 	upButton.setBounds (140, 220, 120, 30);
 	upButton.setText ("Up 10px");
-	upButton.addListener (SWT.Selection, new Listener () {
-		@Override
-		public void handleEvent (Event event) {
-			sc.setOrigin (0, sc.getOrigin ().y - 10);
-		}
-	});
+	upButton.addListener (SWT.Selection, event -> sc.setOrigin (0, sc.getOrigin ().y - 10));
 	shell.open ();
 	while (!shell.isDisposed ()) {
 		if (!display.readAndDispatch ()) display.sleep ();
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet298.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet298.java
index 389f438..eaaf98d 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet298.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet298.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2004 IBM Corporation and others.
+ * Copyright (c) 2000, 2016 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -25,31 +25,28 @@ public class Snippet298 {
 public static void main (String [] args) {
 	final Display display = new Display();
 	final Shell shell = new Shell(display);
-	shell.addListener(SWT.Paint, new Listener() {
-		@Override
-		public void handleEvent(Event event) {
-			int[] icons = new int[]{SWT.ICON_ERROR, SWT.ICON_WARNING, SWT.ICON_INFORMATION, SWT.ICON_QUESTION, SWT.ICON_WORKING};
-			int x = 10;
-			for (int i = 0; i < icons.length; i++) {
-				Image image = display.getSystemImage(icons[i]);
-				if (image != null) {
-					Transform t = new Transform(display);
-					t.translate(x, 10);
-					t.shear(1, 0);
-					GC gc = event.gc;
-					gc.setTransform(t);
-					t.dispose();
-					gc.drawImage(image, 0, 0);
-					x += image.getBounds().width + 10;
-				}
+	shell.addListener(SWT.Paint, event -> {
+		int[] icons = new int[]{SWT.ICON_ERROR, SWT.ICON_WARNING, SWT.ICON_INFORMATION, SWT.ICON_QUESTION, SWT.ICON_WORKING};
+		int x = 10;
+		for (int i = 0; i < icons.length; i++) {
+			Image image = display.getSystemImage(icons[i]);
+			if (image != null) {
+				Transform t = new Transform(display);
+				t.translate(x, 10);
+				t.shear(1, 0);
+				GC gc = event.gc;
+				gc.setTransform(t);
+				t.dispose();
+				gc.drawImage(image, 0, 0);
+				x += image.getBounds().width + 10;
 			}
 		}
 	});
 	shell.setSize(260, 100);
-	shell.open();	
+	shell.open();
 	while (!shell.isDisposed()) {
 		if (!display.readAndDispatch()) display.sleep();
 	}
 	display.dispose();
 }
-} 
+}
commit 2e6ef4fdca857fb73c82170e2faef28c82892786
Author: Alexander Kurtakov <akurtako@redhat.com>
Date:   Wed Mar 2 22:54:44 2016 +0200

    Bug 485821 - Make examples/snippets use lambdas
    
    Runnable conversion.
    
    Change-Id: Ia2df2f7d15a5042c4554a583bd7ed5b60ef05051
    Signed-off-by: Alexander Kurtakov <akurtako@redhat.com>

15	18	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/fileviewer/FileViewer.java
20	38	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/paint/PaintExample.java
15	18	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet130.java
30	36	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet337.java
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/fileviewer/FileViewer.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/fileviewer/FileViewer.java
index baf1670..a0ae19c 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/fileviewer/FileViewer.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/fileviewer/FileViewer.java
@@ -1552,27 +1552,24 @@ public class FileViewer {
 	/**
 	 * Manages the worker's thread
 	 */
-	private final Runnable workerRunnable = new Runnable() {
-		@Override
-		public void run() {
-			while (! workerStopped) {
-				synchronized(workerLock) {
-					workerCancelled = false;
-					workerStateDir = workerNextDir;
-				}
-				workerExecute();
-				synchronized(workerLock) {
-					try {
-						if ((!workerCancelled) && (workerStateDir == workerNextDir)) workerLock.wait();
-					} catch (InterruptedException e) {
-					}
+	private final Runnable workerRunnable = () -> {
+		while (! workerStopped) {
+			synchronized(workerLock) {
+				workerCancelled = false;
+				workerStateDir = workerNextDir;
+			}
+			workerExecute();
+			synchronized(workerLock) {
+				try {
+					if ((!workerCancelled) && (workerStateDir == workerNextDir)) workerLock.wait();
+				} catch (InterruptedException e) {
 				}
 			}
-			workerThread = null;
-			// wake up UI thread in case it is in a modal loop awaiting thread termination
-			// (see workerStop())
-			display.wake();
 		}
+		workerThread = null;
+		// wake up UI thread in case it is in a modal loop awaiting thread termination
+		// (see workerStop())
+		display.wake();
 	};
 	
 	/**
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/paint/PaintExample.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/paint/PaintExample.java
index 09bdcc3..012700c 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/paint/PaintExample.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/paint/PaintExample.java
@@ -449,47 +449,29 @@ public class PaintExample {
 			final Tool tool = tools[i];
 			String group = tool.group;
 			if (group.equals("tool")) {
-				tool.action = new Runnable() {
-					@Override
-					public void run() {
-						setPaintTool(tool.id);
-					}
-				};
+				tool.action = () -> setPaintTool(tool.id);
 			} else if (group.equals("fill")) {
-				tool.action = new Runnable() {
-					@Override
-					public void run() {
-						setFillType(tool.id);
-					}
-				};
+				tool.action = () -> setFillType(tool.id);
 			} else if (group.equals("linestyle")) {
-				tool.action = new Runnable() {
-					@Override
-					public void run() {
-						setLineStyle(tool.id);
-					}
-				};
+				tool.action = () -> setLineStyle(tool.id);
 			} else if (group.equals("options")) {
-				tool.action = new Runnable() {
-					@Override
-					public void run() {
-						FontDialog fontDialog = new FontDialog(paintSurface.getShell(), SWT.PRIMARY_MODAL);
-						FontData[] fontDatum = toolSettings.commonFont.getFontData();
-						if (fontDatum != null && fontDatum.length > 0) {
-							fontDialog.setFontList(fontDatum);
-						}
-						fontDialog.setText(getResourceString("options.Font.dialog.title"));
-
-						paintSurface.hideRubberband();
-						FontData fontData = fontDialog.open();
-						paintSurface.showRubberband();
-						if (fontData != null) {
-							try {
-								Font font = new Font(mainComposite.getDisplay(), fontData);
-								toolSettings.commonFont = font;
-								updateToolSettings();
-							} catch (SWTException ex) {
-							}
+				tool.action = () -> {
+					FontDialog fontDialog = new FontDialog(paintSurface.getShell(), SWT.PRIMARY_MODAL);
+					FontData[] fontDatum = toolSettings.commonFont.getFontData();
+					if (fontDatum != null && fontDatum.length > 0) {
+						fontDialog.setFontList(fontDatum);
+					}
+					fontDialog.setText(getResourceString("options.Font.dialog.title"));
+
+					paintSurface.hideRubberband();
+					FontData fontData = fontDialog.open();
+					paintSurface.showRubberband();
+					if (fontData != null) {
+						try {
+							Font font = new Font(mainComposite.getDisplay(), fontData);
+							toolSettings.commonFont = font;
+							updateToolSettings();
+						} catch (SWTException ex) {
 						}
 					}
 				};
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet130.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet130.java
index 6c550cc..c80b0fa 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet130.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet130.java
@@ -41,26 +41,23 @@ public class Snippet130 {
 					int id;
 					@Override
 					public void run() {
-						Thread thread = new Thread(new Runnable() {
-							@Override
-							public void run() {
-								id = nextId[0]++;
-								display.syncExec(() -> {
-									if (text.isDisposed()) return;
-									text.append("\nStart long running task "+id);
-								});
-								for (int i = 0; i < 100000; i++) {
-									if (display.isDisposed()) return;
-									System.out.println("do task that takes a long time in a separate thread "+id);
-								}
+						Thread thread = new Thread(() -> {
+							id = nextId[0]++;
+							display.syncExec(() -> {
+								if (text.isDisposed()) return;
+								text.append("\nStart long running task "+id);
+							});
+							for (int i = 0; i < 100000; i++) {
 								if (display.isDisposed()) return;
-								display.syncExec(() -> {
-									if (text.isDisposed()) return;
-									text.append("\nCompleted long running task "+id);
-								});
-								done = true;
-								display.wake();
+								System.out.println("do task that takes a long time in a separate thread "+id);
 							}
+							if (display.isDisposed()) return;
+							display.syncExec(() -> {
+								if (text.isDisposed()) return;
+								text.append("\nCompleted long running task "+id);
+							});
+							done = true;
+							display.wake();
 						});
 						thread.start();
 						while (!done && !shell.isDisposed()) {
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet337.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet337.java
index 99785a1..e3ef09e 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet337.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet337.java
@@ -22,45 +22,39 @@ public class Snippet337 {
 public static void main(String args[]) {
 	final Display display = new Display();
 
-	EventQueue.invokeLater(new Runnable() {
-		@Override
-		public void run() {
-			JFrame mainFrame = new JFrame("Main Window");
-			mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
-			JPanel mainPanel = new JPanel();
-			mainPanel.setLayout(new FlowLayout());
-			JButton launchBrowserButton = new JButton("Launch Browser");
-			launchBrowserButton.addActionListener(e -> {
-				JFrame childFrame = new JFrame();
-				final Canvas canvas = new Canvas();
-				childFrame.setSize(850, 650);
-				childFrame.getContentPane().add(canvas);
-				childFrame.setVisible(true);
-				display.asyncExec(() -> {
-					Shell shell = SWT_AWT.new_Shell(display, canvas);
-					shell.setSize(800, 600);
-					Browser browser = new Browser(shell, SWT.NONE);
-					browser.setLayoutData(new GridData(GridData.FILL_BOTH));
-					browser.setSize(800, 600);
-					browser.setUrl("http://www.eclipse.org");
-					shell.open();
-				});
+	EventQueue.invokeLater(() -> {
+		JFrame mainFrame = new JFrame("Main Window");
+		mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
+		JPanel mainPanel = new JPanel();
+		mainPanel.setLayout(new FlowLayout());
+		JButton launchBrowserButton = new JButton("Launch Browser");
+		launchBrowserButton.addActionListener(e -> {
+			JFrame childFrame = new JFrame();
+			final Canvas canvas = new Canvas();
+			childFrame.setSize(850, 650);
+			childFrame.getContentPane().add(canvas);
+			childFrame.setVisible(true);
+			display.asyncExec(() -> {
+				Shell shell = SWT_AWT.new_Shell(display, canvas);
+				shell.setSize(800, 600);
+				Browser browser = new Browser(shell, SWT.NONE);
+				browser.setLayoutData(new GridData(GridData.FILL_BOTH));
+				browser.setSize(800, 600);
+				browser.setUrl("http://www.eclipse.org");
+				shell.open();
 			});
+		});
 
-			mainPanel.add(new JTextField("a JTextField"));
-			mainPanel.add(launchBrowserButton);
-			mainFrame.getContentPane().add(mainPanel, BorderLayout.CENTER);
-			mainFrame.pack();
-			mainFrame.setVisible(true);
-		}
+		mainPanel.add(new JTextField("a JTextField"));
+		mainPanel.add(launchBrowserButton);
+		mainFrame.getContentPane().add(mainPanel, BorderLayout.CENTER);
+		mainFrame.pack();
+		mainFrame.setVisible(true);
 	});
-	display.addListener(SWT.Close, event -> EventQueue.invokeLater(new Runnable() {
-		@Override
-		public void run() {
-			Frame[] frames = Frame.getFrames();
-			for (int i = 0; i < frames.length; i++) {
-				frames[i].dispose();
-			}
+	display.addListener(SWT.Close, event -> EventQueue.invokeLater(() -> {
+		Frame[] frames = Frame.getFrames();
+		for (int i = 0; i < frames.length; i++) {
+			frames[i].dispose();
 		}
 	}));
 	while (!display.isDisposed()) {

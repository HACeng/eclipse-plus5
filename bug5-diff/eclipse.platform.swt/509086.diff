commit a51e9b60a4d6f1ce13e48f0c284d6c283baa073b
Author: David Weiser <david.weiser@vogella.com>
Date:   Mon Dec 12 16:33:23 2016 +0100

    Bug 509086 - Use SelectionListener lambda helper methods in
    org.eclipse.swt.examples
    
    * Changes SelectionListener to lambda method in
    org.eclipse.swt.examples.accessibility
    
    Change-Id: Ib516a5c7b7ef7f053469e830134dba4136f6b7d6
    Signed-off-by: David Weiser <david.weiser@vogella.com>

45	51	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/AccessibleTableExample.java
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/AccessibleTableExample.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/AccessibleTableExample.java
index 4d885ce..fa0c136 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/AccessibleTableExample.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/AccessibleTableExample.java
@@ -10,12 +10,21 @@
  *******************************************************************************/
 package org.eclipse.swt.examples.accessibility;
 
-import java.util.*;
+import static org.eclipse.swt.events.SelectionListener.widgetSelectedAdapter;
 
-import org.eclipse.swt.*;
-import org.eclipse.swt.events.*;
-import org.eclipse.swt.layout.*;
-import org.eclipse.swt.widgets.*;
+import java.util.MissingResourceException;
+import java.util.ResourceBundle;
+
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.layout.FillLayout;
+import org.eclipse.swt.layout.GridData;
+import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.widgets.Button;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Display;
+import org.eclipse.swt.widgets.Group;
+import org.eclipse.swt.widgets.Label;
+import org.eclipse.swt.widgets.Shell;
 
 /**
  * This example shows how to use AccessibleTableListener and
@@ -72,66 +81,51 @@ public class AccessibleTableExample {
 		btnGroup.setLayout(new FillLayout(SWT.VERTICAL));
 		Button btn = new Button(btnGroup, SWT.PUSH);
 		btn.setText("Add rows");
-		btn.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent e) {
-				int currSize = table1.getItemCount();
-				int colCount = table1.getColumnCount();
-				CTableItem item = new CTableItem(table1, SWT.NONE);
-				String[] cells = new String[colCount];
+		btn.addSelectionListener(widgetSelectedAdapter(e -> {
+			int currSize = table1.getItemCount();
+			int colCount = table1.getColumnCount();
+			CTableItem item = new CTableItem(table1, SWT.NONE);
+			String[] cells = new String[colCount];
 
-				for (int i = 0; i < colCount; i++) {
-					cells[i] = "C" + i + "R" + currSize;
-				}
-				item.setText(cells);
+			for (int i = 0; i < colCount; i++) {
+				cells[i] = "C" + i + "R" + currSize;
 			}
-		});
+			item.setText(cells);
+		}));
 		btn = new Button(btnGroup, SWT.PUSH);
 		btn.setText("Remove rows");
-		btn.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent e) {
-				int currSize = table1.getItemCount();
-				if (currSize > 0) {
-					table1.remove(currSize - 1);
-				}
+		btn.addSelectionListener(widgetSelectedAdapter(e -> {
+			int currSize = table1.getItemCount();
+			if (currSize > 0) {
+				table1.remove(currSize - 1);
 			}
-		});
+		}));
 		btn = new Button(btnGroup, SWT.PUSH);
 		btn.setText("Remove selected rows");
-		btn.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent e) {
-				CTableItem[] selectedItems = table1.getSelection();
-				for (CTableItem selectedItem : selectedItems) {
-					selectedItem.dispose();
-				}
+		btn.addSelectionListener(widgetSelectedAdapter(e -> {
+			CTableItem[] selectedItems = table1.getSelection();
+			for (CTableItem selectedItem : selectedItems) {
+				selectedItem.dispose();
 			}
-		});
+		}));
 		btn = new Button(btnGroup, SWT.PUSH);
 		btn.setText("Add column");
-		btn.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent e) {
-				int currSize = table1.getColumnCount();
-				CTableColumn item = new CTableColumn(table1, SWT.NONE);
-				item.setText("Col " + currSize);
-				item.setWidth(50);
-			}
-		});
+		btn.addSelectionListener(widgetSelectedAdapter(e -> {
+			int currSize = table1.getColumnCount();
+			CTableColumn item = new CTableColumn(table1, SWT.NONE);
+			item.setText("Col " + currSize);
+			item.setWidth(50);
+		}));
 		btn = new Button(btnGroup, SWT.PUSH);
 		btn.setText("Remove last column");
-		btn.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent e) {
-				int colCount = table1.getColumnCount();
 
-				if (colCount > 0) {
-					CTableColumn column = table1.getColumn(colCount - 1);
-					column.dispose();
-				}
+		btn.addSelectionListener(widgetSelectedAdapter(e -> {
+			int colCount = table1.getColumnCount();
+			if (colCount > 0) {
+				CTableColumn column = table1.getColumn(colCount - 1);
+				column.dispose();
 			}
-		});
+		}));
 
 		new Label(group, SWT.NONE).setText("CTable used as a list");
 
commit 96aed76abe47306a55db06715ad3ce34ee7ad71d
Author: David Weiser <david.weiser@vogella.com>
Date:   Tue Dec 13 11:42:40 2016 +0100

    Bug 509086 - Use SelectionListener lambda helper methods in
    org.eclipse.swt.examples
    
    * Changes SelectionListener to lambda method in
    org.eclipse.swt.examples.addressbook
    
    Change-Id: Ie5d21336f7eccdc7e40b5e49a6949cacbab7db6a
    Signed-off-by: David Weiser <david.weiser@vogella.com>

91	176	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/addressbook/AddressBook.java
7	15	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/addressbook/DataEntryDialog.java
10	19	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/addressbook/SearchDialog.java
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/addressbook/AddressBook.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/addressbook/AddressBook.java
index c3a8217..84d8b2e 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/addressbook/AddressBook.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/addressbook/AddressBook.java
@@ -11,6 +11,9 @@
 package org.eclipse.swt.examples.addressbook;
 
 
+import static org.eclipse.swt.events.SelectionListener.widgetDefaultSelectedAdapter;
+import static org.eclipse.swt.events.SelectionListener.widgetSelectedAdapter;
+
 /* Imports */
 import java.io.BufferedReader;
 import java.io.File;
@@ -25,8 +28,6 @@ import java.util.ResourceBundle;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.events.MenuAdapter;
 import org.eclipse.swt.events.MenuEvent;
-import org.eclipse.swt.events.SelectionAdapter;
-import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.events.ShellAdapter;
 import org.eclipse.swt.events.ShellEvent;
 import org.eclipse.swt.graphics.Cursor;
@@ -100,24 +101,16 @@ public Shell open(Display display) {
 	table = new Table(shell, SWT.SINGLE | SWT.BORDER | SWT.FULL_SELECTION);
 	table.setHeaderVisible(true);
 	table.setMenu(createPopUpMenu());
-	table.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetDefaultSelected(SelectionEvent e) {
-			TableItem[] items = table.getSelection();
-			if (items.length > 0) editEntry(items[0]);
-		}
-	});
+	table.addSelectionListener(widgetDefaultSelectedAdapter(e -> {
+		TableItem[] items = table.getSelection();
+		if (items.length > 0) editEntry(items[0]);
+	}));
 	for(int i = 0; i < columnNames.length; i++) {
 		TableColumn column = new TableColumn(table, SWT.NONE);
 		column.setText(columnNames[i]);
 		column.setWidth(150);
 		final int columnIndex = i;
-		column.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent e) {
-				sort(columnIndex);
-			}
-		});
+		column.addSelectionListener(widgetSelectedAdapter(e -> sort(columnIndex)));
 	}
 
 	newAddressBook();
@@ -493,23 +486,15 @@ private void createFileMenu(Menu menuBar) {
 	MenuItem subItem = new MenuItem(menu, SWT.NONE);
 	subItem.setText(resAddressBook.getString("New_contact"));
 	subItem.setAccelerator(SWT.MOD1 + 'N');
-	subItem.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			newEntry();
-		}
-	});
+	subItem.addSelectionListener(widgetSelectedAdapter( e -> newEntry()));
 	subItem = new MenuItem(menu, SWT.NONE);
 	subItem.setText(resAddressBook.getString("Edit_contact"));
 	subItem.setAccelerator(SWT.MOD1 + 'E');
-	subItem.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			TableItem[] items = table.getSelection();
-			if (items.length == 0) return;
-			editEntry(items[0]);
-		}
-	});
+	subItem.addSelectionListener(widgetSelectedAdapter( e -> {
+		TableItem[] items = table.getSelection();
+		if (items.length == 0) return;
+		editEntry(items[0]);
+	}));
 
 
 	new MenuItem(menu, SWT.SEPARATOR);
@@ -518,49 +503,33 @@ private void createFileMenu(Menu menuBar) {
 	subItem = new MenuItem(menu, SWT.NONE);
 	subItem.setText(resAddressBook.getString("New_address_book"));
 	subItem.setAccelerator(SWT.MOD1 + 'B');
-	subItem.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			if (closeAddressBook()) {
-				newAddressBook();
-			}
+	subItem.addSelectionListener(widgetSelectedAdapter( e -> {
+		if (closeAddressBook()) {
+			newAddressBook();
 		}
-	});
+	}));
 
 	//File -> Open
 	subItem = new MenuItem(menu, SWT.NONE);
 	subItem.setText(resAddressBook.getString("Open_address_book"));
 	subItem.setAccelerator(SWT.MOD1 + 'O');
-	subItem.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			if (closeAddressBook()) {
-				openAddressBook();
-			}
+	subItem.addSelectionListener(widgetSelectedAdapter( e -> {
+		if (closeAddressBook()) {
+			openAddressBook();
 		}
-	});
+	}));
 
 	//File -> Save.
 	subItem = new MenuItem(menu, SWT.NONE);
 	subItem.setText(resAddressBook.getString("Save_address_book"));
 	subItem.setAccelerator(SWT.MOD1 + 'S');
-	subItem.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			save();
-		}
-	});
+	subItem.addSelectionListener(widgetSelectedAdapter( e -> save()));
 
 	//File -> Save As.
 	subItem = new MenuItem(menu, SWT.NONE);
 	subItem.setText(resAddressBook.getString("Save_book_as"));
 	subItem.setAccelerator(SWT.MOD1 + 'A');
-	subItem.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			saveAs();
-		}
-	});
+	subItem.addSelectionListener(widgetSelectedAdapter( e -> saveAs()));
 
 
 	new MenuItem(menu, SWT.SEPARATOR);
@@ -568,12 +537,7 @@ private void createFileMenu(Menu menuBar) {
 	//File -> Exit.
 	subItem = new MenuItem(menu, SWT.NONE);
 	subItem.setText(resAddressBook.getString("Exit"));
-	subItem.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			shell.close();
-		}
-	});
+	subItem.addSelectionListener(widgetSelectedAdapter( e -> shell.close()));
 }
 
 /**
@@ -616,56 +580,45 @@ private MenuItem createEditMenu(Menu menuBar) {
 	MenuItem subItem = new MenuItem(menu, SWT.PUSH);
 	subItem.setText(resAddressBook.getString("Edit"));
 	subItem.setAccelerator(SWT.MOD1 + 'E');
-	subItem.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			TableItem[] items = table.getSelection();
-			if (items.length == 0) return;
-			editEntry(items[0]);
-		}
-	});
+	subItem.addSelectionListener(widgetSelectedAdapter( e -> {
+		TableItem[] items = table.getSelection();
+		if (items.length == 0) return;
+		editEntry(items[0]);
+	}));
 
 	//Edit -> Copy
 	subItem = new MenuItem(menu, SWT.NONE);
 	subItem.setText(resAddressBook.getString("Copy"));
 	subItem.setAccelerator(SWT.MOD1 + 'C');
-	subItem.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			TableItem[] items = table.getSelection();
-			if (items.length == 0) return;
-			copyBuffer = new String[table.getColumnCount()];
-			for (int i = 0; i < copyBuffer.length; i++) {
-				copyBuffer[i] = items[0].getText(i);
-			}
+	subItem.addSelectionListener(widgetSelectedAdapter( e -> {
+		TableItem[] items = table.getSelection();
+		if (items.length == 0) return;
+		copyBuffer = new String[table.getColumnCount()];
+		for (int i = 0; i < copyBuffer.length; i++) {
+			copyBuffer[i] = items[0].getText(i);
 		}
-	});
+	}));
 
 	//Edit -> Paste
 	subItem = new MenuItem(menu, SWT.NONE);
 	subItem.setText(resAddressBook.getString("Paste"));
 	subItem.setAccelerator(SWT.MOD1 + 'V');
-	subItem.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			if (copyBuffer == null) return;
-			TableItem item = new TableItem(table, SWT.NONE);
-			item.setText(copyBuffer);
-			isModified = true;
-		}
-	});
+	subItem.addSelectionListener(widgetSelectedAdapter( e -> {
+		if (copyBuffer == null) return;
+		TableItem tableItem = new TableItem(table, SWT.NONE);
+		tableItem.setText(copyBuffer);
+		isModified = true;
+	}));
 
 	//Edit -> Delete
 	subItem = new MenuItem(menu, SWT.NONE);
 	subItem.setText(resAddressBook.getString("Delete"));
-	subItem.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			TableItem[] items = table.getSelection();
-			if (items.length == 0) return;
-			items[0].dispose();
-			isModified = true;		}
-	});
+	subItem.addSelectionListener(widgetSelectedAdapter( e -> {
+		TableItem[] items = table.getSelection();
+		if (items.length == 0) return;
+		items[0].dispose();
+		isModified = true;
+	}));
 
 	new MenuItem(menu, SWT.SEPARATOR);
 
@@ -694,12 +647,7 @@ private Menu createSortMenu() {
 		subitem = new MenuItem (submenu, SWT.NONE);
 		subitem.setText(columnNames [i]);
 		final int column = i;
-		subitem.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent e) {
-				sort(column);
-			}
-		});
+		subitem.addSelectionListener(widgetSelectedAdapter( e -> sort(column)));
 
 	}
 
@@ -726,28 +674,20 @@ private void createSearchMenu(Menu menuBar) {
 	item = new MenuItem(searchMenu, SWT.NONE);
 	item.setText(resAddressBook.getString("Find"));
 	item.setAccelerator(SWT.MOD1 + 'F');
-	item.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			searchDialog.setMatchCase(false);
-			searchDialog.setMatchWord(false);
-			searchDialog.setSearchDown(true);
-			searchDialog.setSearchString("");
-			searchDialog.setSelectedSearchArea(0);
-			searchDialog.open();
-		}
-	});
+	item.addSelectionListener(widgetSelectedAdapter( e -> {
+		searchDialog.setMatchCase(false);
+		searchDialog.setMatchWord(false);
+		searchDialog.setSearchDown(true);
+		searchDialog.setSearchString("");
+		searchDialog.setSelectedSearchArea(0);
+		searchDialog.open();
+	}));
 
 	//Search -> Find Next
 	item = new MenuItem(searchMenu, SWT.NONE);
 	item.setText(resAddressBook.getString("Find_next"));
 	item.setAccelerator(SWT.F3);
-	item.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			searchDialog.open();
-		}
-	});
+	item.addSelectionListener(widgetSelectedAdapter( e -> searchDialog.open()));
 }
 
 /**
@@ -781,79 +721,57 @@ private Menu createPopUpMenu() {
 	//New
 	MenuItem item = new MenuItem(popUpMenu, SWT.PUSH);
 	item.setText(resAddressBook.getString("Pop_up_new"));
-	item.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			newEntry();
-		}
-	});
+	item.addSelectionListener(widgetSelectedAdapter( e -> newEntry()));
 
 	new MenuItem(popUpMenu, SWT.SEPARATOR);
 
 	//Edit
 	item = new MenuItem(popUpMenu, SWT.PUSH);
 	item.setText(resAddressBook.getString("Pop_up_edit"));
-	item.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			TableItem[] items = table.getSelection();
-			if (items.length == 0) return;
-			editEntry(items[0]);
-		}
-	});
+	item.addSelectionListener(widgetSelectedAdapter( e -> {
+		TableItem[] items = table.getSelection();
+		if (items.length == 0) return;
+		editEntry(items[0]);
+	}));
 
 	//Copy
 	item = new MenuItem(popUpMenu, SWT.PUSH);
 	item.setText(resAddressBook.getString("Pop_up_copy"));
-	item.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			TableItem[] items = table.getSelection();
-			if (items.length == 0) return;
-			copyBuffer = new String[table.getColumnCount()];
-			for (int i = 0; i < copyBuffer.length; i++) {
-				copyBuffer[i] = items[0].getText(i);
-			}
+	item.addSelectionListener(widgetSelectedAdapter( e -> {
+		TableItem[] items = table.getSelection();
+		if (items.length == 0) return;
+		copyBuffer = new String[table.getColumnCount()];
+		for (int i = 0; i < copyBuffer.length; i++) {
+			copyBuffer[i] = items[0].getText(i);
 		}
-	});
+	}));
 
 	//Paste
 	item = new MenuItem(popUpMenu, SWT.PUSH);
 	item.setText(resAddressBook.getString("Pop_up_paste"));
-	item.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			if (copyBuffer == null) return;
-			TableItem item = new TableItem(table, SWT.NONE);
-			item.setText(copyBuffer);
-			isModified = true;
-		}
-	});
+	item.addSelectionListener(widgetSelectedAdapter( e -> {
+		if (copyBuffer == null) return;
+		TableItem tableItem = new TableItem(table, SWT.NONE);
+		tableItem.setText(copyBuffer);
+		isModified = true;
+	}));
 
 	//Delete
 	item = new MenuItem(popUpMenu, SWT.PUSH);
 	item.setText(resAddressBook.getString("Pop_up_delete"));
-	item.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			TableItem[] items = table.getSelection();
-			if (items.length == 0) return;
-			items[0].dispose();
-			isModified = true;
-		}
-	});
+	item.addSelectionListener(widgetSelectedAdapter( e -> {
+		TableItem[] items = table.getSelection();
+		if (items.length == 0) return;
+		items[0].dispose();
+		isModified = true;
+	}));
 
 	new MenuItem(popUpMenu, SWT.SEPARATOR);
 
 	//Find...
 	item = new MenuItem(popUpMenu, SWT.PUSH);
 	item.setText(resAddressBook.getString("Pop_up_find"));
-	item.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			searchDialog.open();
-		}
-	});
+	item.addSelectionListener(widgetSelectedAdapter( e -> searchDialog.open()));
 
 	return popUpMenu;
 }
@@ -878,15 +796,12 @@ private void createHelpMenu(Menu menuBar) {
 	//Help -> About Text Editor
 	MenuItem subItem = new MenuItem(menu, SWT.NONE);
 	subItem.setText(resAddressBook.getString("About"));
-	subItem.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			MessageBox box = new MessageBox(shell, SWT.NONE);
-			box.setText(resAddressBook.getString("About_1") + shell.getText());
-			box.setMessage(shell.getText() + resAddressBook.getString("About_2"));
-			box.open();
-		}
-	});
+	subItem.addSelectionListener(widgetSelectedAdapter( e -> {
+		MessageBox box = new MessageBox(shell, SWT.NONE);
+		box.setText(resAddressBook.getString("About_1") + shell.getText());
+		box.setMessage(shell.getText() + resAddressBook.getString("About_2"));
+		box.open();
+	}));
 }
 
 /**
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/addressbook/DataEntryDialog.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/addressbook/DataEntryDialog.java
index e21a92e..d563fd8 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/addressbook/DataEntryDialog.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/addressbook/DataEntryDialog.java
@@ -11,12 +11,12 @@
 package org.eclipse.swt.examples.addressbook;
 
 
+import static org.eclipse.swt.events.SelectionListener.widgetSelectedAdapter;
+
 /* Imports */
 import java.util.ResourceBundle;
 
 import org.eclipse.swt.SWT;
-import org.eclipse.swt.events.SelectionAdapter;
-import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.Button;
@@ -60,22 +60,14 @@ private void createControlButtons() {
 
 	Button okButton = new Button(composite, SWT.PUSH);
 	okButton.setText(resAddressBook.getString("OK"));
-	okButton.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			shell.close();
-		}
-	});
+	okButton.addSelectionListener(widgetSelectedAdapter(e -> shell.close()));
 
 	Button cancelButton = new Button(composite, SWT.PUSH);
 	cancelButton.setText(resAddressBook.getString("Cancel"));
-	cancelButton.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			values = null;
-			shell.close();
-		}
-	});
+	cancelButton.addSelectionListener(widgetSelectedAdapter(e -> {
+		values = null;
+		shell.close();
+	}));
 
 	shell.setDefaultButton(okButton);
 }
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/addressbook/SearchDialog.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/addressbook/SearchDialog.java
index 0b934bb..d910c7c 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/addressbook/SearchDialog.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/addressbook/SearchDialog.java
@@ -11,12 +11,12 @@
 package org.eclipse.swt.examples.addressbook;
 
 
+import static org.eclipse.swt.events.SelectionListener.widgetSelectedAdapter;
+
 /* Imports */
 import java.util.ResourceBundle;
 
 import org.eclipse.swt.SWT;
-import org.eclipse.swt.events.SelectionAdapter;
-import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.events.ShellAdapter;
 import org.eclipse.swt.events.ShellEvent;
 import org.eclipse.swt.layout.FillLayout;
@@ -128,28 +128,19 @@ public SearchDialog(Shell parent) {
 	findButton.setText(resAddressBook.getString("Dialog_find"));
 	findButton.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_END));
 	findButton.setEnabled(false);
-	findButton.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			if (!findHandler.find()){
-				MessageBox box = new MessageBox(shell, SWT.ICON_INFORMATION | SWT.OK | SWT.PRIMARY_MODAL);
-				box.setText(shell.getText());
-				box.setMessage(resAddressBook.getString("Cannot_find") + "\"" + searchText.getText() + "\"");
-				box.open();
-			}
+	findButton.addSelectionListener(widgetSelectedAdapter(e -> {
+		if (!findHandler.find()) {
+			MessageBox box = new MessageBox(shell, SWT.ICON_INFORMATION | SWT.OK | SWT.PRIMARY_MODAL);
+			box.setText(shell.getText());
+			box.setMessage(resAddressBook.getString("Cannot_find") + "\"" + searchText.getText() + "\"");
+			box.open();
 		}
-	});
+	}));
 
 	Button cancelButton = new Button(composite, SWT.PUSH);
 	cancelButton.setText(resAddressBook.getString("Cancel"));
 	cancelButton.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING));
-	cancelButton.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			shell.setVisible(false);
-		}
-	});
-
+	cancelButton.addSelectionListener(widgetSelectedAdapter(e -> shell.setVisible(false)));
 	shell.pack();
 }
 public String getSearchAreaLabel(String label) {
commit a7bb0a86848de6345182bddf7a0fc9fd88126e14
Author: Lars Vogel <Lars.Vogel@vogella.com>
Date:   Wed Mar 29 11:24:42 2017 +0200

    Bug 509086 - Use lambda helper methods in org.eclipse.swt.examples -
    Part 1
    
    Change-Id: I7850d35cbc41a93fc0078d610ba8d77c848c6c34
    Signed-off-by: Lars Vogel <Lars.Vogel@vogella.com>

6	7	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/AlignableTab.java
8	10	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/BrowserTab.java
6	7	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ButtonTab.java
10	49	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CTabFolderTab.java
5	19	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CanvasTab.java
6	11	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ColorTab.java
4	12	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CoolBarTab.java
5	19	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/DialogTab.java
3	6	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/GroupTab.java
97	244	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/imageanalyzer/ImageAnalyzer.java
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/AlignableTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/AlignableTab.java
index 6a71305..f292f7a 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/AlignableTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/AlignableTab.java
@@ -11,6 +11,8 @@
 package org.eclipse.swt.examples.controlexample;
 
 
+import static org.eclipse.swt.events.SelectionListener.widgetSelectedAdapter;
+
 import org.eclipse.swt.*;
 import org.eclipse.swt.widgets.*;
 import org.eclipse.swt.layout.*;
@@ -59,13 +61,10 @@ abstract class AlignableTab extends Tab {
 		rightButton.setText (ControlExample.getResourceString("Right"));
 
 		/* Add the listeners */
-		SelectionListener selectionListener = new SelectionAdapter () {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				if (!((Button) event.widget).getSelection ()) return;
-				setExampleWidgetAlignment ();
-			}
-		};
+		SelectionListener selectionListener = widgetSelectedAdapter(event -> {
+			if (!((Button) event.widget).getSelection ()) return;
+			setExampleWidgetAlignment ();
+		});
 		leftButton.addSelectionListener (selectionListener);
 		centerButton.addSelectionListener (selectionListener);
 		rightButton.addSelectionListener (selectionListener);
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/BrowserTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/BrowserTab.java
index 68ee7ab..c2c7db3 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/BrowserTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/BrowserTab.java
@@ -11,6 +11,8 @@
 package org.eclipse.swt.examples.controlexample;
 
 
+import static org.eclipse.swt.events.SelectionListener.widgetSelectedAdapter;
+
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStream;
@@ -27,7 +29,6 @@ import org.eclipse.swt.browser.VisibilityWindowListener;
 import org.eclipse.swt.browser.WindowEvent;
 import org.eclipse.swt.events.ControlAdapter;
 import org.eclipse.swt.events.ControlEvent;
-import org.eclipse.swt.events.SelectionAdapter;
 import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
@@ -204,16 +205,13 @@ class BrowserTab extends Tab {
 		 * Add a selection listener to the tabFolder to bring up a
 		 * dialog if this platform does not support the Browser.
 		 */
-		tabFolder.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent e) {
-				if (errorMessage != null && tabFolder.getSelection()[0].getText().equals(getTabText())) {
-					MessageBox dialog = new MessageBox(shell, SWT.ICON_WARNING | SWT.OK);
-					dialog.setMessage(ControlExample.getResourceString("BrowserNotFound", errorMessage));
-					dialog.open();
-				}
+		tabFolder.addSelectionListener(widgetSelectedAdapter(e -> {
+			if (errorMessage != null && tabFolder.getSelection()[0].getText().equals(getTabText())) {
+				MessageBox dialog = new MessageBox(shell, SWT.ICON_WARNING | SWT.OK);
+				dialog.setMessage(ControlExample.getResourceString("BrowserNotFound", errorMessage));
+				dialog.open();
 			}
-		});
+		}));
 
 		return tabFolderPage;
 	}
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ButtonTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ButtonTab.java
index 38821cc..a17ac11 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ButtonTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ButtonTab.java
@@ -11,6 +11,8 @@
 package org.eclipse.swt.examples.controlexample;
 
 
+import static org.eclipse.swt.events.SelectionListener.widgetSelectedAdapter;
+
 import org.eclipse.swt.*;
 import org.eclipse.swt.widgets.*;
 import org.eclipse.swt.layout.*;
@@ -53,13 +55,10 @@ class ButtonTab extends AlignableTab {
 		downButton.setText (ControlExample.getResourceString("Down"));
 
 		/* Add the listeners */
-		SelectionListener selectionListener = new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				if (!((Button) event.widget).getSelection()) return;
-				setExampleWidgetAlignment ();
-			}
-		};
+		SelectionListener selectionListener = widgetSelectedAdapter(event -> {
+			if (!((Button) event.widget).getSelection()) return;
+			setExampleWidgetAlignment ();
+		});
 		upButton.addSelectionListener(selectionListener);
 		downButton.addSelectionListener(selectionListener);
 	}
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CTabFolderTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CTabFolderTab.java
index bfed02a..ad4c14d 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CTabFolderTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CTabFolderTab.java
@@ -11,12 +11,13 @@
 package org.eclipse.swt.examples.controlexample;
 
 
+import static org.eclipse.swt.events.SelectionListener.widgetSelectedAdapter;
+
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.custom.CTabFolder;
 import org.eclipse.swt.custom.CTabFolder2Listener;
 import org.eclipse.swt.custom.CTabFolderEvent;
 import org.eclipse.swt.custom.CTabItem;
-import org.eclipse.swt.events.SelectionAdapter;
 import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.graphics.Color;
 import org.eclipse.swt.graphics.Font;
@@ -149,80 +150,40 @@ class CTabFolderTab extends Tab {
 		simpleTabButton = new Button (otherGroup, SWT.CHECK);
 		simpleTabButton.setText (ControlExample.getResourceString("Set_Simple_Tabs"));
 		simpleTabButton.setSelection(true);
-		simpleTabButton.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				setSimpleTabs();
-			}
-		});
+		simpleTabButton.addSelectionListener (widgetSelectedAdapter(event -> setSimpleTabs()));
 
 		singleTabButton = new Button (otherGroup, SWT.CHECK);
 		singleTabButton.setText (ControlExample.getResourceString("Set_Single_Tabs"));
 		singleTabButton.setSelection(false);
-		singleTabButton.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				setSingleTabs();
-			}
-		});
+		singleTabButton.addSelectionListener (widgetSelectedAdapter(event -> setSingleTabs()));
 
 		showMinButton = new Button (otherGroup, SWT.CHECK);
 		showMinButton.setText (ControlExample.getResourceString("Set_Min_Visible"));
 		showMinButton.setSelection(false);
-		showMinButton.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				setMinimizeVisible();
-			}
-		});
+		showMinButton.addSelectionListener (widgetSelectedAdapter(event -> setMinimizeVisible()));
 
 		showMaxButton = new Button (otherGroup, SWT.CHECK);
 		showMaxButton.setText (ControlExample.getResourceString("Set_Max_Visible"));
 		showMaxButton.setSelection(false);
-		showMaxButton.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				setMaximizeVisible();
-			}
-		});
+		showMaxButton.addSelectionListener (widgetSelectedAdapter(event -> setMaximizeVisible()));
 
 		topRightButton = new Button (otherGroup, SWT.CHECK);
 		topRightButton.setText (ControlExample.getResourceString("Set_Top_Right"));
 		topRightButton.setSelection(false);
-		topRightButton.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				setTopRight();
-			}
-		});
+		topRightButton.addSelectionListener (widgetSelectedAdapter(event -> setTopRight()));
 
 		imageButton = new Button (otherGroup, SWT.CHECK);
 		imageButton.setText (ControlExample.getResourceString("Set_Image"));
-		imageButton.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				setImages();
-			}
-		});
+		imageButton.addSelectionListener (widgetSelectedAdapter(event -> setImages()));
 
 		unselectedImageButton = new Button (otherGroup, SWT.CHECK);
 		unselectedImageButton.setText (ControlExample.getResourceString("Set_Unselected_Image_Visible"));
 		unselectedImageButton.setSelection(true);
-		unselectedImageButton.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				setUnselectedImageVisible();
-			}
-		});
+		unselectedImageButton.addSelectionListener (widgetSelectedAdapter(event -> setUnselectedImageVisible()));
 		unselectedCloseButton = new Button (otherGroup, SWT.CHECK);
 		unselectedCloseButton.setText (ControlExample.getResourceString("Set_Unselected_Close_Visible"));
 		unselectedCloseButton.setSelection(true);
-		unselectedCloseButton.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				setUnselectedCloseVisible();
-			}
-		});
+		unselectedCloseButton.addSelectionListener (widgetSelectedAdapter(event -> setUnselectedCloseVisible()));
 	}
 
 	/**
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CanvasTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CanvasTab.java
index e916b65..c519917 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CanvasTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CanvasTab.java
@@ -11,10 +11,11 @@
 package org.eclipse.swt.examples.controlexample;
 
 
+import static org.eclipse.swt.events.SelectionListener.widgetSelectedAdapter;
+
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.events.ControlAdapter;
 import org.eclipse.swt.events.ControlEvent;
-import org.eclipse.swt.events.SelectionAdapter;
 import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.graphics.Color;
 import org.eclipse.swt.graphics.Font;
@@ -85,12 +86,7 @@ class CanvasTab extends Tab {
 		fillDamageButton.setText (ControlExample.getResourceString("FillDamage"));
 
 		/* Add the listeners */
-		caretButton.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				setCaret ();
-			}
-		});
+		caretButton.addSelectionListener (widgetSelectedAdapter(event -> setCaret ()));
 	}
 
 	/**
@@ -152,22 +148,12 @@ class CanvasTab extends Tab {
 		ScrollBar bar = canvas.getHorizontalBar();
 		if (bar != null) {
 			hookListeners (bar);
-			bar.addSelectionListener(new SelectionAdapter() {
-				@Override
-				public void widgetSelected(SelectionEvent event) {
-					scrollHorizontal ((ScrollBar)event.widget);
-				}
-			});
+			bar.addSelectionListener(widgetSelectedAdapter(event -> scrollHorizontal ((ScrollBar)event.widget)));
 		}
 		bar = canvas.getVerticalBar();
 		if (bar != null) {
 			hookListeners (bar);
-			bar.addSelectionListener(new SelectionAdapter() {
-				@Override
-				public void widgetSelected(SelectionEvent event) {
-					scrollVertical ((ScrollBar)event.widget);
-				}
-			});
+			bar.addSelectionListener(widgetSelectedAdapter(event -> scrollVertical ((ScrollBar)event.widget)));
 		}
 	}
 
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ColorTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ColorTab.java
index 4d5f8a0..da792cd 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ColorTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ColorTab.java
@@ -12,10 +12,11 @@
 package org.eclipse.swt.examples.controlexample;
 
 
+import static org.eclipse.swt.events.SelectionListener.widgetSelectedAdapter;
+
 import java.util.HashMap;
 
 import org.eclipse.swt.SWT;
-import org.eclipse.swt.events.SelectionAdapter;
 import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.events.SelectionListener;
 import org.eclipse.swt.graphics.Color;
@@ -169,13 +170,10 @@ class ColorTab extends Tab {
 
 		packColumnsButton = new Button (sizeGroup, SWT.PUSH);
 		packColumnsButton.setText (ControlExample.getResourceString("Pack_Columns"));
-		packColumnsButton.addSelectionListener(new SelectionAdapter () {
-		@Override
-		public void widgetSelected (SelectionEvent event) {
+		packColumnsButton.addSelectionListener(widgetSelectedAdapter(event -> {
 			packColumns ();
 			setExampleWidgetSize ();
-		}
-		});
+		}));
 	}
 
 	void packColumns () {
@@ -214,17 +212,14 @@ class ColorTab extends Tab {
 		createSizeGroup ();
 		createOrientationGroup ();
 
-		SelectionListener selectionListener = new SelectionAdapter () {
-		@Override
-		public void widgetSelected (SelectionEvent event) {
+		SelectionListener selectionListener = widgetSelectedAdapter(event -> {
 			if ((event.widget.getStyle () & SWT.RADIO) != 0) {
 				if (!((Button) event.widget).getSelection ()) return;
 			}
 			if (!handleTextDirection (event.widget)) {
 				recreateExampleWidgets ();
 			}
-		}
-		};
+		});
 		// attach listeners to the Orientation buttons
 		rtlButton.addSelectionListener (selectionListener);
 		ltrButton.addSelectionListener (selectionListener);
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CoolBarTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CoolBarTab.java
index 3a15a2e..0dd151b 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CoolBarTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CoolBarTab.java
@@ -11,6 +11,8 @@
 package org.eclipse.swt.examples.controlexample;
 
 
+import static org.eclipse.swt.events.SelectionListener.widgetSelectedAdapter;
+
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.events.MenuAdapter;
 import org.eclipse.swt.events.MenuEvent;
@@ -70,12 +72,7 @@ class CoolBarTab extends Tab {
 		lockedButton.setText (ControlExample.getResourceString("Locked"));
 
 		/* Add the listeners */
-		lockedButton.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				setWidgetLocked ();
-			}
-		});
+		lockedButton.addSelectionListener (widgetSelectedAdapter(event -> setWidgetLocked ()));
 	}
 
 	/**
@@ -364,12 +361,7 @@ class CoolBarTab extends Tab {
 						 * Add a menu selection listener so that the menu is hidden
 						 * when the user selects an item from the drop down menu.
 						 */
-						menuItem.addSelectionListener(new SelectionAdapter() {
-							@Override
-							public void widgetSelected(SelectionEvent e) {
-								setMenuVisible(false);
-							}
-						});
+						menuItem.addSelectionListener(widgetSelectedAdapter(e -> setMenuVisible(false)));
 					} else {
 						new MenuItem(menu, SWT.SEPARATOR);
 					}
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/DialogTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/DialogTab.java
index aa7cbd7..f4fd141 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/DialogTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/DialogTab.java
@@ -11,8 +11,9 @@
 package org.eclipse.swt.examples.controlexample;
 
 
+import static org.eclipse.swt.events.SelectionListener.widgetSelectedAdapter;
+
 import org.eclipse.swt.SWT;
-import org.eclipse.swt.events.SelectionAdapter;
 import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.events.SelectionListener;
 import org.eclipse.swt.graphics.FontData;
@@ -441,24 +442,9 @@ class DialogTab extends Tab {
 		effectsVisibleButton.setText("FontDialog.setEffectsVisible");
 
 		/* Add the listeners */
-		dialogCombo.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				dialogSelected (event);
-			}
-		});
-		createButton.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				createButtonSelected (event);
-			}
-		});
-		SelectionListener buttonStyleListener = new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				buttonStyleSelected (event);
-			}
-		};
+		dialogCombo.addSelectionListener (widgetSelectedAdapter(event -> dialogSelected (event)));
+		createButton.addSelectionListener (widgetSelectedAdapter(event -> createButtonSelected (event)));
+		SelectionListener buttonStyleListener = widgetSelectedAdapter(event -> buttonStyleSelected (event));
 		okButton.addSelectionListener (buttonStyleListener);
 		cancelButton.addSelectionListener (buttonStyleListener);
 		yesButton.addSelectionListener (buttonStyleListener);
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/GroupTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/GroupTab.java
index 7931cbb..291c66b 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/GroupTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/GroupTab.java
@@ -11,6 +11,8 @@
 package org.eclipse.swt.examples.controlexample;
 
 
+import static org.eclipse.swt.events.SelectionListener.widgetSelectedAdapter;
+
 import org.eclipse.swt.*;
 import org.eclipse.swt.events.*;
 import org.eclipse.swt.layout.*;
@@ -45,12 +47,7 @@ class GroupTab extends Tab {
 		titleButton.setText (ControlExample.getResourceString("Title_Text"));
 
 		/* Add the listeners */
-		titleButton.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				setTitleText ();
-			}
-		});
+		titleButton.addSelectionListener (widgetSelectedAdapter(event -> setTitleText ()));
 	}
 
 	/**
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/imageanalyzer/ImageAnalyzer.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/imageanalyzer/ImageAnalyzer.java
index fa695d2..b58ccd2 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/imageanalyzer/ImageAnalyzer.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/imageanalyzer/ImageAnalyzer.java
@@ -10,6 +10,8 @@
  *******************************************************************************/
 package org.eclipse.swt.examples.imageanalyzer;
 
+import static org.eclipse.swt.events.SelectionListener.widgetSelectedAdapter;
+
 import java.io.InputStream;
 import java.net.URL;
 import java.text.MessageFormat;
@@ -28,7 +30,6 @@ import org.eclipse.swt.events.KeyAdapter;
 import org.eclipse.swt.events.KeyEvent;
 import org.eclipse.swt.events.MouseListener;
 import org.eclipse.swt.events.PaintEvent;
-import org.eclipse.swt.events.SelectionAdapter;
 import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.events.SelectionListener;
 import org.eclipse.swt.events.ShellAdapter;
@@ -166,24 +167,16 @@ public class ImageAnalyzer {
 			data = new GridData();
 			data.widthHint = 75;
 			ok.setLayoutData(data);
-			ok.addSelectionListener(new SelectionAdapter() {
-				@Override
-				public void widgetSelected(SelectionEvent e) {
-					result = text.getText();
-					dialog.dispose();
-				}
-			});
+			ok.addSelectionListener(widgetSelectedAdapter(e -> {
+				result = text.getText();
+				dialog.dispose();
+			}));
 			Button cancel = new Button(buttons, SWT.PUSH);
 			cancel.setText(bundle.getString("Cancel"));
 			data = new GridData();
 			data.widthHint = 75;
 			cancel.setLayoutData(data);
-			cancel.addSelectionListener(new SelectionAdapter() {
-				@Override
-				public void widgetSelected(SelectionEvent e) {
-					dialog.dispose();
-				}
-			});
+			cancel.addSelectionListener(widgetSelectedAdapter(e -> dialog.dispose()));
 			dialog.setDefaultButton(ok);
 			dialog.pack();
 			dialog.open();
@@ -295,12 +288,7 @@ public class ImageAnalyzer {
 			bundle.getString("Green"),
 			bundle.getString("Blue"));
 		backgroundCombo.select(backgroundCombo.indexOf(bundle.getString("White")));
-		backgroundCombo.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				changeBackground();
-			}
-		});
+		backgroundCombo.addSelectionListener(widgetSelectedAdapter(event -> changeBackground()));
 
 		// Combo to change the compression ratio.
 		group = new Group(controls, SWT.NONE);
@@ -312,41 +300,38 @@ public class ImageAnalyzer {
 			imageTypeCombo.add(type);
 		}
 		imageTypeCombo.select(imageTypeCombo.indexOf("JPEG"));
-		imageTypeCombo.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				int index = imageTypeCombo.getSelectionIndex();
-				switch(index) {
-				case 0:
-					compressionCombo.setEnabled(true);
-					compressionRatioLabel.setEnabled(true);
-					if (compressionCombo.getItemCount() == 100) break;
-					compressionCombo.removeAll();
-					for (int i = 0; i < 100; i++) {
-						compressionCombo.add(String.valueOf(i + 1));
-					}
-					compressionCombo.select(compressionCombo.indexOf("75"));
-					break;
-				case 1:
-					compressionCombo.setEnabled(true);
-					compressionRatioLabel.setEnabled(true);
-					if (compressionCombo.getItemCount() == 10) break;
-					compressionCombo.removeAll();
-					for (int i = 0; i < 4; i++) {
-						compressionCombo.add(String.valueOf(i));
-					}
-					compressionCombo.select(0);
-					break;
-				case 2:
-				case 3:
-				case 4:
-				case 5:
-					compressionCombo.setEnabled(false);
-					compressionRatioLabel.setEnabled(false);
-					break;
+		imageTypeCombo.addSelectionListener(widgetSelectedAdapter(event -> {
+			int index = imageTypeCombo.getSelectionIndex();
+			switch(index) {
+			case 0:
+				compressionCombo.setEnabled(true);
+				compressionRatioLabel.setEnabled(true);
+				if (compressionCombo.getItemCount() == 100) break;
+				compressionCombo.removeAll();
+				for (int i = 0; i < 100; i++) {
+					compressionCombo.add(String.valueOf(i + 1));
 				}
+				compressionCombo.select(compressionCombo.indexOf("75"));
+				break;
+			case 1:
+				compressionCombo.setEnabled(true);
+				compressionRatioLabel.setEnabled(true);
+				if (compressionCombo.getItemCount() == 10) break;
+				compressionCombo.removeAll();
+				for (int i = 0; i < 4; i++) {
+					compressionCombo.add(String.valueOf(i));
+				}
+				compressionCombo.select(0);
+				break;
+			case 2:
+			case 3:
+			case 4:
+			case 5:
+				compressionCombo.setEnabled(false);
+				compressionRatioLabel.setEnabled(false);
+				break;
 			}
-		});
+		}));
 		imageTypeCombo.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
 		compressionRatioLabel = new Label(group, SWT.NONE);
 		compressionRatioLabel.setText(bundle.getString("Compression"));
@@ -370,12 +355,7 @@ public class ImageAnalyzer {
 			scaleXCombo.add(value);
 		}
 		scaleXCombo.select(scaleXCombo.indexOf("1"));
-		scaleXCombo.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				scaleX();
-			}
-		});
+		scaleXCombo.addSelectionListener(widgetSelectedAdapter(event -> scaleX()));
 
 		// Combo to change the y scale.
 		group = new Group(controls, SWT.NONE);
@@ -386,12 +366,7 @@ public class ImageAnalyzer {
 			scaleYCombo.add(value);
 		}
 		scaleYCombo.select(scaleYCombo.indexOf("1"));
-		scaleYCombo.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				scaleY();
-			}
-		});
+		scaleYCombo.addSelectionListener(widgetSelectedAdapter(event -> scaleY()));
 
 		// Combo to change the alpha value.
 		group = new Group(controls, SWT.NONE);
@@ -402,12 +377,7 @@ public class ImageAnalyzer {
 			alphaCombo.add(String.valueOf(i));
 		}
 		alphaCombo.select(alphaCombo.indexOf("255"));
-		alphaCombo.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				alpha();
-			}
-		});
+		alphaCombo.addSelectionListener(widgetSelectedAdapter(event -> alpha()));
 
 		// Check box to request incremental display.
 		group = new Group(controls, SWT.NONE);
@@ -416,51 +386,35 @@ public class ImageAnalyzer {
 		incrementalCheck = new Button(group, SWT.CHECK);
 		incrementalCheck.setText(bundle.getString("Incremental"));
 		incrementalCheck.setSelection(incremental);
-		incrementalCheck.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				incremental = ((Button)event.widget).getSelection();
-			}
-		});
+		incrementalCheck.addSelectionListener(widgetSelectedAdapter(event -> incremental = ((Button)event.widget).getSelection()));
 
 		// Check box to request transparent display.
 		transparentCheck = new Button(group, SWT.CHECK);
 		transparentCheck.setText(bundle.getString("Transparent"));
 		transparentCheck.setSelection(transparent);
-		transparentCheck.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				transparent = ((Button)event.widget).getSelection();
-				if (image != null) {
-					imageCanvas.redraw();
-				}
+		transparentCheck.addSelectionListener(widgetSelectedAdapter(event -> {
+			transparent = ((Button)event.widget).getSelection();
+			if (image != null) {
+				imageCanvas.redraw();
 			}
-		});
+		}));
 
 		// Check box to request mask display.
 		maskCheck = new Button(group, SWT.CHECK);
 		maskCheck.setText(bundle.getString("Mask"));
 		maskCheck.setSelection(showMask);
-		maskCheck.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				showMask = ((Button)event.widget).getSelection();
-				if (image != null) {
-					imageCanvas.redraw();
-				}
+		maskCheck.addSelectionListener(widgetSelectedAdapter(event -> {
+			showMask = ((Button)event.widget).getSelection();
+			if (image != null) {
+				imageCanvas.redraw();
 			}
-		});
+		}));
 
 		// Check box to request background display.
 		backgroundCheck = new Button(group, SWT.CHECK);
 		backgroundCheck.setText(bundle.getString("Background"));
 		backgroundCheck.setSelection(showBackground);
-		backgroundCheck.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				showBackground = ((Button)event.widget).getSelection();
-			}
-		});
+		backgroundCheck.addSelectionListener(widgetSelectedAdapter(event -> showBackground = ((Button)event.widget).getSelection()));
 
 		// Group the animation buttons.
 		group = new Group(controls, SWT.NONE);
@@ -471,34 +425,19 @@ public class ImageAnalyzer {
 		previousButton = new Button(group, SWT.PUSH);
 		previousButton.setText(bundle.getString("Previous"));
 		previousButton.setEnabled(false);
-		previousButton.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				previous();
-			}
-		});
+		previousButton.addSelectionListener(widgetSelectedAdapter(event -> previous()));
 
 		// Push button to display the next image in a multi-image file.
 		nextButton = new Button(group, SWT.PUSH);
 		nextButton.setText(bundle.getString("Next"));
 		nextButton.setEnabled(false);
-		nextButton.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				next();
-			}
-		});
+		nextButton.addSelectionListener(widgetSelectedAdapter(event -> next()));
 
 		// Push button to toggle animation of a multi-image file.
 		animateButton = new Button(group, SWT.PUSH);
 		animateButton.setText(bundle.getString("Animate"));
 		animateButton.setEnabled(false);
-		animateButton.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				animate();
-			}
-		});
+		animateButton.addSelectionListener(widgetSelectedAdapter(event -> animate()));
 
 		// Label to show the image file type.
 		typeLabel = new Label(shell, SWT.NONE);
@@ -535,22 +474,12 @@ public class ImageAnalyzer {
 		horizontal.setVisible(true);
 		horizontal.setMinimum(0);
 		horizontal.setEnabled(false);
-		horizontal.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				scrollHorizontally((ScrollBar)event.widget);
-			}
-		});
+		horizontal.addSelectionListener(widgetSelectedAdapter(event -> scrollHorizontally((ScrollBar)event.widget)));
 		ScrollBar vertical = imageCanvas.getVerticalBar();
 		vertical.setVisible(true);
 		vertical.setMinimum(0);
 		vertical.setEnabled(false);
-		vertical.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				scrollVertically((ScrollBar)event.widget);
-			}
-		});
+		vertical.addSelectionListener(widgetSelectedAdapter(event -> scrollVertically((ScrollBar)event.widget)));
 
 		// Label to show the image size.
 		sizeLabel = new Label(shell, SWT.NONE);
@@ -639,12 +568,7 @@ public class ImageAnalyzer {
 		vertical.setMinimum(0);
 		vertical.setIncrement(10);
 		vertical.setEnabled(false);
-		vertical.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				scrollPalette((ScrollBar)event.widget);
-			}
-		});
+		vertical.addSelectionListener(widgetSelectedAdapter(event -> scrollPalette((ScrollBar)event.widget)));
 
 		// Sash to see more of image or image data.
 		sash = new Sash(shell, SWT.HORIZONTAL);
@@ -652,32 +576,29 @@ public class ImageAnalyzer {
 		gridData.horizontalSpan = 2;
 		gridData.horizontalAlignment = GridData.FILL;
 		sash.setLayoutData(gridData);
-		sash.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				if (event.detail != SWT.DRAG) {
-					((GridData)paletteCanvas.getLayoutData()).heightHint = SWT.DEFAULT;
-					Rectangle paletteCanvasBounds = paletteCanvas.getBounds();
-					int minY = paletteCanvasBounds.y + 20;
-					Rectangle dataLabelBounds = dataLabel.getBounds();
-					int maxY = statusLabel.getBounds().y - dataLabelBounds.height - 20;
-					if (event.y > minY && event.y < maxY) {
-						Rectangle oldSash = sash.getBounds();
-						sash.setBounds(event.x, event.y, event.width, event.height);
-						int diff = event.y - oldSash.y;
-						Rectangle bounds = imageCanvas.getBounds();
-						imageCanvas.setBounds(bounds.x, bounds.y, bounds.width, bounds.height + diff);
-						bounds = paletteCanvasBounds;
-						paletteCanvas.setBounds(bounds.x, bounds.y, bounds.width, bounds.height + diff);
-						bounds = dataLabelBounds;
-						dataLabel.setBounds(bounds.x, bounds.y + diff, bounds.width, bounds.height);
-						bounds = dataText.getBounds();
-						dataText.setBounds(bounds.x, bounds.y + diff, bounds.width, bounds.height - diff);
-						//shell.layout(true);
-					}
+		sash.addSelectionListener (widgetSelectedAdapter(event -> {
+			if (event.detail != SWT.DRAG) {
+				((GridData)paletteCanvas.getLayoutData()).heightHint = SWT.DEFAULT;
+				Rectangle paletteCanvasBounds = paletteCanvas.getBounds();
+				int minY = paletteCanvasBounds.y + 20;
+				Rectangle dataLabelBounds = dataLabel.getBounds();
+				int maxY = statusLabel.getBounds().y - dataLabelBounds.height - 20;
+				if (event.y > minY && event.y < maxY) {
+					Rectangle oldSash = sash.getBounds();
+					sash.setBounds(event.x, event.y, event.width, event.height);
+					int diff = event.y - oldSash.y;
+					Rectangle bounds = imageCanvas.getBounds();
+					imageCanvas.setBounds(bounds.x, bounds.y, bounds.width, bounds.height + diff);
+					bounds = paletteCanvasBounds;
+					paletteCanvas.setBounds(bounds.x, bounds.y, bounds.width, bounds.height + diff);
+					bounds = dataLabelBounds;
+					dataLabel.setBounds(bounds.x, bounds.y + diff, bounds.width, bounds.height);
+					bounds = dataText.getBounds();
+					dataText.setBounds(bounds.x, bounds.y + diff, bounds.width, bounds.height - diff);
+					//shell.layout(true);
 				}
 			}
-		});
+		}));
 
 		// Label to show data-specific fields.
 		dataLabel = new Label(shell, SWT.NONE);
@@ -741,33 +662,18 @@ public class ImageAnalyzer {
 		item = new MenuItem(fileMenu, SWT.PUSH);
 		item.setText(bundle.getString("OpenFile"));
 		item.setAccelerator(SWT.MOD1 + 'O');
-		item.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				menuOpenFile();
-			}
-		});
+		item.addSelectionListener(widgetSelectedAdapter(event -> menuOpenFile()));
 
 		// File -> Open URL...
 		item = new MenuItem(fileMenu, SWT.PUSH);
 		item.setText(bundle.getString("OpenURL"));
 		item.setAccelerator(SWT.MOD1 + 'U');
-		item.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				menuOpenURL();
-			}
-		});
+		item.addSelectionListener(widgetSelectedAdapter(event -> menuOpenURL()));
 
 		// File -> Reopen
 		item = new MenuItem(fileMenu, SWT.PUSH);
 		item.setText(bundle.getString("Reopen"));
-		item.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				menuReopen();
-			}
-		});
+		item.addSelectionListener(widgetSelectedAdapter(event -> menuReopen()));
 
 		new MenuItem(fileMenu, SWT.SEPARATOR);
 
@@ -775,12 +681,7 @@ public class ImageAnalyzer {
 		item = new MenuItem(fileMenu, SWT.PUSH);
 		item.setText(bundle.getString("LoadFile"));
 		item.setAccelerator(SWT.MOD1 + 'L');
-		item.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				menuLoad();
-			}
-		});
+		item.addSelectionListener(widgetSelectedAdapter(event -> menuLoad()));
 
 		new MenuItem(fileMenu, SWT.SEPARATOR);
 
@@ -788,32 +689,17 @@ public class ImageAnalyzer {
 		item = new MenuItem(fileMenu, SWT.PUSH);
 		item.setText(bundle.getString("Save"));
 		item.setAccelerator(SWT.MOD1 + 'S');
-		item.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				menuSave();
-			}
-		});
+		item.addSelectionListener(widgetSelectedAdapter(event -> menuSave()));
 
 		// File -> Save As...
 		item = new MenuItem(fileMenu, SWT.PUSH);
 		item.setText(bundle.getString("Save_as"));
-		item.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				menuSaveAs();
-			}
-		});
+		item.addSelectionListener(widgetSelectedAdapter(event -> menuSaveAs()));
 
 		// File -> Save Mask As...
 		item = new MenuItem(fileMenu, SWT.PUSH);
 		item.setText(bundle.getString("Save_mask_as"));
-		item.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				menuSaveMaskAs();
-			}
-		});
+		item.addSelectionListener(widgetSelectedAdapter(event -> menuSaveMaskAs()));
 
 		new MenuItem(fileMenu, SWT.SEPARATOR);
 
@@ -821,24 +707,14 @@ public class ImageAnalyzer {
 		item = new MenuItem(fileMenu, SWT.PUSH);
 		item.setText(bundle.getString("Print"));
 		item.setAccelerator(SWT.MOD1 + 'P');
-		item.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				menuPrint();
-			}
-		});
+		item.addSelectionListener(widgetSelectedAdapter(event -> menuPrint()));
 
 		new MenuItem(fileMenu, SWT.SEPARATOR);
 
 		// File -> Exit
 		item = new MenuItem(fileMenu, SWT.PUSH);
 		item.setText(bundle.getString("Exit"));
-		item.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				shell.close();
-			}
-		});
+		item.addSelectionListener(widgetSelectedAdapter(event -> shell.close()));
 
 	}
 
@@ -852,32 +728,17 @@ public class ImageAnalyzer {
 		// Alpha -> K
 		item = new MenuItem(alphaMenu, SWT.PUSH);
 		item.setText("K");
-		item.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				menuComposeAlpha(ALPHA_CONSTANT);
-			}
-		});
+		item.addSelectionListener(widgetSelectedAdapter(event -> menuComposeAlpha(ALPHA_CONSTANT)));
 
 		// Alpha -> (K + x) % 256
 		item = new MenuItem(alphaMenu, SWT.PUSH);
 		item.setText("(K + x) % 256");
-		item.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				menuComposeAlpha(ALPHA_X);
-			}
-		});
+		item.addSelectionListener(widgetSelectedAdapter(event -> menuComposeAlpha(ALPHA_X)));
 
 		// Alpha -> (K + y) % 256
 		item = new MenuItem(alphaMenu, SWT.PUSH);
 		item.setText("(K + y) % 256");
-		item.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				menuComposeAlpha(ALPHA_Y);
-			}
-		});
+		item.addSelectionListener(widgetSelectedAdapter(event -> menuComposeAlpha(ALPHA_Y)));
 	}
 
 	void menuComposeAlpha(int alpha_op) {
@@ -2288,13 +2149,10 @@ public class ImageAnalyzer {
 	int showBMPDialog() {
 		final int [] bmpType = new int[1];
 		bmpType[0] = SWT.IMAGE_BMP;
-		SelectionListener radioSelected = new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				Button radio = (Button) event.widget;
-				if (radio.getSelection()) bmpType[0] = ((Integer)radio.getData()).intValue();
-			}
-		};
+		SelectionListener radioSelected = widgetSelectedAdapter(event -> {
+			Button radio = (Button) event.widget;
+			if (radio.getSelection()) bmpType[0] = ((Integer)radio.getData()).intValue();
+		});
 		// need to externalize strings
 		final Shell dialog = new Shell(shell, SWT.DIALOG_TRIM);
 
@@ -2329,12 +2187,7 @@ public class ImageAnalyzer {
 		data.horizontalAlignment = SWT.CENTER;
 		data.widthHint = 75;
 		ok.setLayoutData(data);
-		ok.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent e) {
-				dialog.close();
-			}
-		});
+		ok.addSelectionListener(widgetSelectedAdapter(e -> dialog.close()));
 
 		dialog.pack();
 		dialog.open();
commit 76fcf9cf9c7ce2aa5aafb1fbb6e678b9c5bb7dff
Author: Alexander Kurtakov <akurtako@redhat.com>
Date:   Wed Mar 29 13:01:07 2017 +0300

    Bug 509086 - Use lambda helper methods in org.eclipse.swt.examples
    
    Remove unused imports.
    
    Change-Id: I2a9f578a00a610a7d5d69e54c55876eefc24ee3f
    Signed-off-by: Alexander Kurtakov <akurtako@redhat.com>

0	1	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/BrowserTab.java
0	1	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CTabFolderTab.java
0	1	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CanvasTab.java
0	1	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ColorTab.java
6	4	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/GroupTab.java
0	1	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/imageanalyzer/ImageAnalyzer.java
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/BrowserTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/BrowserTab.java
index c2c7db3..19f8477 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/BrowserTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/BrowserTab.java
@@ -29,7 +29,6 @@ import org.eclipse.swt.browser.VisibilityWindowListener;
 import org.eclipse.swt.browser.WindowEvent;
 import org.eclipse.swt.events.ControlAdapter;
 import org.eclipse.swt.events.ControlEvent;
-import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.Button;
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CTabFolderTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CTabFolderTab.java
index ad4c14d..7ef4c8c 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CTabFolderTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CTabFolderTab.java
@@ -18,7 +18,6 @@ import org.eclipse.swt.custom.CTabFolder;
 import org.eclipse.swt.custom.CTabFolder2Listener;
 import org.eclipse.swt.custom.CTabFolderEvent;
 import org.eclipse.swt.custom.CTabItem;
-import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.graphics.Color;
 import org.eclipse.swt.graphics.Font;
 import org.eclipse.swt.graphics.FontData;
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CanvasTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CanvasTab.java
index c519917..e5efc99 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CanvasTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CanvasTab.java
@@ -16,7 +16,6 @@ import static org.eclipse.swt.events.SelectionListener.widgetSelectedAdapter;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.events.ControlAdapter;
 import org.eclipse.swt.events.ControlEvent;
-import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.graphics.Color;
 import org.eclipse.swt.graphics.Font;
 import org.eclipse.swt.graphics.GC;
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ColorTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ColorTab.java
index da792cd..c7afd94 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ColorTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ColorTab.java
@@ -17,7 +17,6 @@ import static org.eclipse.swt.events.SelectionListener.widgetSelectedAdapter;
 import java.util.HashMap;
 
 import org.eclipse.swt.SWT;
-import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.events.SelectionListener;
 import org.eclipse.swt.graphics.Color;
 import org.eclipse.swt.layout.GridData;
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/GroupTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/GroupTab.java
index 291c66b..3a7019b 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/GroupTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/GroupTab.java
@@ -13,10 +13,12 @@ package org.eclipse.swt.examples.controlexample;
 
 import static org.eclipse.swt.events.SelectionListener.widgetSelectedAdapter;
 
-import org.eclipse.swt.*;
-import org.eclipse.swt.events.*;
-import org.eclipse.swt.layout.*;
-import org.eclipse.swt.widgets.*;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.layout.GridData;
+import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.widgets.Button;
+import org.eclipse.swt.widgets.Group;
+import org.eclipse.swt.widgets.Widget;
 
 class GroupTab extends Tab {
 	Button titleButton;
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/imageanalyzer/ImageAnalyzer.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/imageanalyzer/ImageAnalyzer.java
index b58ccd2..3a595c8 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/imageanalyzer/ImageAnalyzer.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/imageanalyzer/ImageAnalyzer.java
@@ -30,7 +30,6 @@ import org.eclipse.swt.events.KeyAdapter;
 import org.eclipse.swt.events.KeyEvent;
 import org.eclipse.swt.events.MouseListener;
 import org.eclipse.swt.events.PaintEvent;
-import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.events.SelectionListener;
 import org.eclipse.swt.events.ShellAdapter;
 import org.eclipse.swt.events.ShellEvent;
commit d3e571387cb6d64bb88c657c416877844f9e40a1
Author: Lars Vogel <Lars.Vogel@vogella.com>
Date:   Wed Mar 29 11:26:27 2017 +0200

    Bug 509086 - Use lambda helper methods in org.eclipse.swt.examples -
    Part 2
    
    Removes unused imports also
    
    Change-Id: I9da1dfac524c54842fc7e1273e355311408328e7
    Signed-off-by: Lars Vogel <Lars.Vogel@vogella.com>

5	19	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/MenuTab.java
5	19	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/RangeTab.java
16	20	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/SashTab.java
4	13	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ScaleTab.java
6	25	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ShellTab.java
5	19	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/SliderTab.java
5	18	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/SpinnerTab.java
4	14	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/javaviewer/JavaViewer.java
11	22	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/paint/PaintExample.java
4	14	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/paint/PaintSurface.java
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/MenuTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/MenuTab.java
index 897d1cc..f1fe8aa 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/MenuTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/MenuTab.java
@@ -11,8 +11,9 @@
 package org.eclipse.swt.examples.controlexample;
 
 
+import static org.eclipse.swt.events.SelectionListener.widgetSelectedAdapter;
+
 import org.eclipse.swt.SWT;
-import org.eclipse.swt.events.SelectionAdapter;
 import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
@@ -214,24 +215,9 @@ class MenuTab extends Tab {
 		closeAllButton.setText (ControlExample.getResourceString("Close_All_Shells"));
 
 		/* Add the listeners */
-		createButton.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent e) {
-				createButtonSelected(e);
-			}
-		});
-		closeAllButton.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent e) {
-				closeAllShells ();
-			}
-		});
-		subMenuButton.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent e) {
-				subSubMenuButton.setEnabled (subMenuButton.getSelection ());
-			}
-		});
+		createButton.addSelectionListener(widgetSelectedAdapter(e -> createButtonSelected(e)));
+		closeAllButton.addSelectionListener(widgetSelectedAdapter(e -> closeAllShells ()));
+		subMenuButton.addSelectionListener(widgetSelectedAdapter(e -> subSubMenuButton.setEnabled (subMenuButton.getSelection ())));
 
 		/* Set the default state */
 		barButton.setSelection (true);
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/RangeTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/RangeTab.java
index 74b73f4..c101f29 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/RangeTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/RangeTab.java
@@ -11,10 +11,11 @@
 package org.eclipse.swt.examples.controlexample;
 
 
+import static org.eclipse.swt.events.SelectionListener.widgetSelectedAdapter;
+
 import org.eclipse.swt.*;
 import org.eclipse.swt.widgets.*;
 import org.eclipse.swt.layout.*;
-import org.eclipse.swt.events.*;
 
 abstract class RangeTab extends Tab {
 	/* Style widgets added to the "Style" group */
@@ -63,12 +64,7 @@ abstract class RangeTab extends Tab {
 		maximumSpinner.setLayoutData (new GridData (SWT.FILL, SWT.CENTER, true, false));
 
 		/* Add the listeners */
-		maximumSpinner.addSelectionListener(new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				setWidgetMaximum ();
-			}
-		});
+		maximumSpinner.addSelectionListener(widgetSelectedAdapter(event -> setWidgetMaximum ()));
 	}
 
 	/**
@@ -92,12 +88,7 @@ abstract class RangeTab extends Tab {
 		minimumSpinner.setLayoutData (new GridData (SWT.FILL, SWT.CENTER, true, false));
 
 		/* Add the listeners */
-		minimumSpinner.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				setWidgetMinimum ();
-			}
-		});
+		minimumSpinner.addSelectionListener (widgetSelectedAdapter(event -> setWidgetMinimum ()));
 
 	}
 
@@ -123,12 +114,7 @@ abstract class RangeTab extends Tab {
 		selectionSpinner.setLayoutData (new GridData (SWT.FILL, SWT.CENTER, true, false));
 
 		/* Add the listeners */
-		selectionSpinner.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				setWidgetSelection ();
-			}
-		});
+		selectionSpinner.addSelectionListener(widgetSelectedAdapter(event -> setWidgetSelection ()));
 
 	}
 
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/SashTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/SashTab.java
index 1dc6692..1ddaf30 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/SashTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/SashTab.java
@@ -11,6 +11,8 @@
 package org.eclipse.swt.examples.controlexample;
 
 
+import static org.eclipse.swt.events.SelectionListener.widgetSelectedAdapter;
+
 import org.eclipse.swt.*;
 import org.eclipse.swt.graphics.*;
 import org.eclipse.swt.layout.*;
@@ -99,28 +101,22 @@ class SashTab extends Tab {
 		hSash = new Sash (sashComp, SWT.HORIZONTAL | style);
 
 		/* Add the listeners */
-		hSash.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				Rectangle rect = vSash.getParent().getClientArea();
-				event.y = Math.min (Math.max (event.y, SASH_LIMIT), rect.height - SASH_LIMIT);
-				if (event.detail != SWT.DRAG) {
-					hSash.setBounds (event.x, event.y, event.width, event.height);
-					layout ();
-				}
+		hSash.addSelectionListener (widgetSelectedAdapter(event -> {
+			Rectangle rect = vSash.getParent().getClientArea();
+			event.y = Math.min (Math.max (event.y, SASH_LIMIT), rect.height - SASH_LIMIT);
+			if (event.detail != SWT.DRAG) {
+				hSash.setBounds (event.x, event.y, event.width, event.height);
+				layout ();
 			}
-		});
-		vSash.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				Rectangle rect = vSash.getParent().getClientArea();
-				event.x = Math.min (Math.max (event.x, SASH_LIMIT), rect.width - SASH_LIMIT);
-				if (event.detail != SWT.DRAG) {
-					vSash.setBounds (event.x, event.y, event.width, event.height);
-					layout ();
-				}
+		}));
+		vSash.addSelectionListener (widgetSelectedAdapter(event -> {
+			Rectangle rect = vSash.getParent().getClientArea();
+			event.x = Math.min (Math.max (event.x, SASH_LIMIT), rect.width - SASH_LIMIT);
+			if (event.detail != SWT.DRAG) {
+				vSash.setBounds (event.x, event.y, event.width, event.height);
+				layout ();
 			}
-		});
+		}));
 		sashComp.addControlListener (new ControlAdapter () {
 			@Override
 			public void controlResized (ControlEvent event) {
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ScaleTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ScaleTab.java
index 9198892..7bf0d2c 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ScaleTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ScaleTab.java
@@ -11,10 +11,11 @@
 package org.eclipse.swt.examples.controlexample;
 
 
+import static org.eclipse.swt.events.SelectionListener.widgetSelectedAdapter;
+
 import org.eclipse.swt.*;
 import org.eclipse.swt.widgets.*;
 import org.eclipse.swt.layout.*;
-import org.eclipse.swt.events.*;
 
 class ScaleTab extends RangeTab {
 	/* Example widgets and groups that contain them */
@@ -93,12 +94,7 @@ class ScaleTab extends RangeTab {
 		incrementSpinner.setLayoutData (new GridData (SWT.FILL, SWT.CENTER, true, false));
 
 		/* Add the listeners */
-		incrementSpinner.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent e) {
-				setWidgetIncrement ();
-			}
-		});
+		incrementSpinner.addSelectionListener (widgetSelectedAdapter(e -> setWidgetIncrement ()));
 	}
 
 	/**
@@ -122,12 +118,7 @@ class ScaleTab extends RangeTab {
 		pageIncrementSpinner.setLayoutData (new GridData (SWT.FILL, SWT.CENTER, true, false));
 
 		/* Add the listeners */
-		pageIncrementSpinner.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				setWidgetPageIncrement ();
-			}
-		});
+		pageIncrementSpinner.addSelectionListener (widgetSelectedAdapter(event -> setWidgetPageIncrement ()));
 	}
 
 	/**
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ShellTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ShellTab.java
index cb85a14..df4e27d 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ShellTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ShellTab.java
@@ -11,8 +11,9 @@
 package org.eclipse.swt.examples.controlexample;
 
 
+import static org.eclipse.swt.events.SelectionListener.widgetSelectedAdapter;
+
 import org.eclipse.swt.SWT;
-import org.eclipse.swt.events.SelectionAdapter;
 import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.events.SelectionListener;
 import org.eclipse.swt.layout.GridData;
@@ -102,12 +103,7 @@ class ShellTab extends Tab {
 		final Button button = new Button(currentShell, SWT.CHECK);
 		button.setBounds(20, 20, 120, 30);
 		button.setText(ControlExample.getResourceString("FullScreen"));
-		button.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent e) {
-				currentShell.setFullScreen(button.getSelection());
-			}
-		});
+		button.addSelectionListener(widgetSelectedAdapter(e -> currentShell.setFullScreen(button.getSelection())));
 		Button close = new Button(currentShell, SWT.PUSH);
 		close.setBounds(160, 20, 120, 30);
 		close.setText(ControlExample.getResourceString("Close"));
@@ -235,24 +231,9 @@ class ShellTab extends Tab {
 		closeAllButton.setLayoutData (gridData);
 
 		/* Add the listeners */
-		createButton.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent e) {
-				createButtonSelected(e);
-			}
-		});
-		closeAllButton.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent e) {
-				closeAllShells ();
-			}
-		});
-		SelectionListener decorationButtonListener = new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				decorationButtonSelected(event);
-			}
-		};
+		createButton.addSelectionListener(widgetSelectedAdapter(e -> createButtonSelected(e)));
+		closeAllButton.addSelectionListener(widgetSelectedAdapter(e -> closeAllShells ()));
+		SelectionListener decorationButtonListener = widgetSelectedAdapter(event -> decorationButtonSelected(event));
 		noTrimButton.addSelectionListener (decorationButtonListener);
 		noMoveButton.addSelectionListener(decorationButtonListener);
 		closeButton.addSelectionListener (decorationButtonListener);
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/SliderTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/SliderTab.java
index 3ffb032..7fb664d 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/SliderTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/SliderTab.java
@@ -11,10 +11,11 @@
 package org.eclipse.swt.examples.controlexample;
 
 
+import static org.eclipse.swt.events.SelectionListener.widgetSelectedAdapter;
+
 import org.eclipse.swt.*;
 import org.eclipse.swt.widgets.*;
 import org.eclipse.swt.layout.*;
-import org.eclipse.swt.events.*;
 
 class SliderTab extends RangeTab {
 	/* Example widgets and groups that contain them */
@@ -93,12 +94,7 @@ class SliderTab extends RangeTab {
 		incrementSpinner.setLayoutData (new GridData (SWT.FILL, SWT.CENTER, true, false));
 
 		/* Add the listeners */
-		incrementSpinner.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent e) {
-				setWidgetIncrement ();
-			}
-		});
+		incrementSpinner.addSelectionListener (widgetSelectedAdapter(e -> setWidgetIncrement ()));
 	}
 
 	/**
@@ -122,12 +118,7 @@ class SliderTab extends RangeTab {
 		pageIncrementSpinner.setLayoutData (new GridData (SWT.FILL, SWT.CENTER, true, false));
 
 		/* Add the listeners */
-		pageIncrementSpinner.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				setWidgetPageIncrement ();
-			}
-		});
+		pageIncrementSpinner.addSelectionListener (widgetSelectedAdapter(event -> setWidgetPageIncrement ()));
 	}
 
 	/**
@@ -151,12 +142,7 @@ class SliderTab extends RangeTab {
 		thumbSpinner.setLayoutData (new GridData (SWT.FILL, SWT.CENTER, true, false));
 
 		/* Add the listeners */
-		thumbSpinner.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				setWidgetThumb ();
-			}
-		});
+		thumbSpinner.addSelectionListener (widgetSelectedAdapter(event -> setWidgetThumb ()));
 	}
 
 	/**
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/SpinnerTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/SpinnerTab.java
index 9af6053..3d457bb 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/SpinnerTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/SpinnerTab.java
@@ -11,6 +11,8 @@
 package org.eclipse.swt.examples.controlexample;
 
 
+import static org.eclipse.swt.events.SelectionListener.widgetSelectedAdapter;
+
 import org.eclipse.swt.*;
 import org.eclipse.swt.widgets.*;
 import org.eclipse.swt.events.*;
@@ -97,12 +99,7 @@ class SpinnerTab extends RangeTab {
 		incrementSpinner.setLayoutData (new GridData (SWT.FILL, SWT.CENTER, true, false));
 
 		/* Add the listeners */
-		incrementSpinner.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent e) {
-				setWidgetIncrement ();
-			}
-		});
+		incrementSpinner.addSelectionListener (widgetSelectedAdapter(e -> setWidgetIncrement ()));
 	}
 
 	/**
@@ -126,12 +123,7 @@ class SpinnerTab extends RangeTab {
 		pageIncrementSpinner.setLayoutData (new GridData (SWT.FILL, SWT.CENTER, true, false));
 
 		/* Add the listeners */
-		pageIncrementSpinner.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				setWidgetPageIncrement ();
-			}
-		});
+		pageIncrementSpinner.addSelectionListener (widgetSelectedAdapter(event -> setWidgetPageIncrement ()));
 	}
 
 	/**
@@ -155,12 +147,7 @@ class SpinnerTab extends RangeTab {
 		digitsSpinner.setLayoutData (new GridData (SWT.FILL, SWT.CENTER, true, false));
 
 		/* Add the listeners */
-		digitsSpinner.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent e) {
-				setWidgetDigits ();
-			}
-		});
+		digitsSpinner.addSelectionListener (widgetSelectedAdapter(e -> setWidgetDigits ()));
 	}
 
 	/**
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/javaviewer/JavaViewer.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/javaviewer/JavaViewer.java
index 0af83e0..e43e5d0 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/javaviewer/JavaViewer.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/javaviewer/JavaViewer.java
@@ -11,6 +11,8 @@
 package org.eclipse.swt.examples.javaviewer;
 
 
+import static org.eclipse.swt.events.SelectionListener.widgetSelectedAdapter;
+
 import java.io.BufferedReader;
 import java.io.File;
 import java.io.FileInputStream;
@@ -23,8 +25,6 @@ import java.util.ResourceBundle;
 
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.custom.StyledText;
-import org.eclipse.swt.events.SelectionAdapter;
-import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.events.ShellAdapter;
 import org.eclipse.swt.events.ShellEvent;
 import org.eclipse.swt.graphics.Color;
@@ -55,22 +55,12 @@ Menu createFileMenu() {
 	item = new MenuItem (menu, SWT.PUSH);
 	item.setText (resources.getString("Open_menuitem"));
 	item.setAccelerator(SWT.MOD1 + 'O');
-	item.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent event) {
-			openFile();
-		}
-	});
+	item.addSelectionListener(widgetSelectedAdapter(event -> openFile()));
 
 	// Exit
 	item = new MenuItem (menu, SWT.PUSH);
 	item.setText (resources.getString("Exit_menuitem"));
-	item.addSelectionListener (new SelectionAdapter () {
-		@Override
-		public void widgetSelected (SelectionEvent e) {
-			menuFileExit ();
-		}
-	});
+	item.addSelectionListener (widgetSelectedAdapter(e -> menuFileExit ()));
 	return menu;
 }
 
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/paint/PaintExample.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/paint/PaintExample.java
index 1ee6b41..595af4b 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/paint/PaintExample.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/paint/PaintExample.java
@@ -11,6 +11,8 @@
 package org.eclipse.swt.examples.paint;
 
 
+import static org.eclipse.swt.events.SelectionListener.widgetSelectedAdapter;
+
 import java.io.IOException;
 import java.io.InputStream;
 import java.text.MessageFormat;
@@ -20,8 +22,6 @@ import java.util.ResourceBundle;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.SWTException;
 import org.eclipse.swt.accessibility.AccessibleAdapter;
-import org.eclipse.swt.events.SelectionAdapter;
-import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.graphics.Color;
 import org.eclipse.swt.graphics.Font;
 import org.eclipse.swt.graphics.FontData;
@@ -163,12 +163,7 @@ public class PaintExample {
 		item.setText (getResourceString(id + ".label"));
 		item.setToolTipText(getResourceString(id + ".tooltip"));
 		item.setImage(tool.image);
-		item.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent e) {
-				tool.action.run();
-			}
-		});
+		item.addSelectionListener(widgetSelectedAdapter(e -> tool.action.run()));
 		final int childID = toolbar.indexOf(item);
 		toolbar.getAccessible().addAccessibleListener(new AccessibleAdapter() {
 			@Override
@@ -322,13 +317,10 @@ public class PaintExample {
 		airbrushRadiusScale.setMaximum(50);
 		airbrushRadiusScale.setSelection(toolSettings.airbrushRadius);
 		airbrushRadiusScale.setLayoutData(new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_FILL));
-		airbrushRadiusScale.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent e) {
-				toolSettings.airbrushRadius = airbrushRadiusScale.getSelection();
-				updateToolSettings();
-			}
-		});
+		airbrushRadiusScale.addSelectionListener(widgetSelectedAdapter(e -> {
+			toolSettings.airbrushRadius = airbrushRadiusScale.getSelection();
+			updateToolSettings();
+		}));
 
 		label = new Label(toolSettingsFrame, SWT.NONE);
 		label.setText(getResourceString("settings.AirbrushIntensity.text"));
@@ -338,13 +330,10 @@ public class PaintExample {
 		airbrushIntensityScale.setMaximum(100);
 		airbrushIntensityScale.setSelection(toolSettings.airbrushIntensity);
 		airbrushIntensityScale.setLayoutData(new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_FILL));
-		airbrushIntensityScale.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent e) {
-				toolSettings.airbrushIntensity = airbrushIntensityScale.getSelection();
-				updateToolSettings();
-			}
-		});
+		airbrushIntensityScale.addSelectionListener(widgetSelectedAdapter(e -> {
+			toolSettings.airbrushIntensity = airbrushIntensityScale.getSelection();
+			updateToolSettings();
+		}));
 	}
 
 	/**
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/paint/PaintSurface.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/paint/PaintSurface.java
index 188dfab..3cdb40d 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/paint/PaintSurface.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/paint/PaintSurface.java
@@ -10,12 +10,12 @@
  *******************************************************************************/
 package org.eclipse.swt.examples.paint;
 
+import static org.eclipse.swt.events.SelectionListener.widgetSelectedAdapter;
+
 import org.eclipse.swt.events.ControlAdapter;
 import org.eclipse.swt.events.ControlEvent;
 import org.eclipse.swt.events.MouseAdapter;
 import org.eclipse.swt.events.MouseEvent;
-import org.eclipse.swt.events.SelectionAdapter;
-import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.graphics.Color;
 import org.eclipse.swt.graphics.GC;
 import org.eclipse.swt.graphics.Image;
@@ -167,20 +167,10 @@ public class PaintSurface {
 		/* Set up the paint canvas scroll bars */
 		ScrollBar horizontal = paintCanvas.getHorizontalBar();
 		horizontal.setVisible(true);
-		horizontal.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				scrollHorizontally((ScrollBar)event.widget);
-			}
-		});
+		horizontal.addSelectionListener(widgetSelectedAdapter(event -> scrollHorizontally((ScrollBar)event.widget)));
 		ScrollBar vertical = paintCanvas.getVerticalBar();
 		vertical.setVisible(true);
-		vertical.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				scrollVertically((ScrollBar)event.widget);
-			}
-		});
+		vertical.addSelectionListener(widgetSelectedAdapter(event -> scrollVertically((ScrollBar)event.widget)));
 		handleResize();
 	}
 
commit 421056971ab86c3fe5f5ba7b4494de4335069b2c
Author: Lars Vogel <Lars.Vogel@vogella.com>
Date:   Wed Mar 29 11:26:57 2017 +0200

    Bug 509086 - Use lambda helper methods in org.eclipse.swt.examples -
    Part 3
    
    Removes also unused imports
    
    Change-Id: Iccfd0e997249e4582661f37aecc539e14cfbebd9
    Signed-off-by: Lars Vogel <Lars.Vogel@vogella.com>

49	55	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/StyledTextTab.java
29	78	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/TableTab.java
3	6	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ToolBarTab.java
5	20	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ToolTipTab.java
30	79	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/TreeTab.java
7	15	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/paint/TextTool.java
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/StyledTextTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/StyledTextTab.java
index 7da872a..673f773 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/StyledTextTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/StyledTextTab.java
@@ -11,6 +11,8 @@
 package org.eclipse.swt.examples.controlexample;
 
 
+import static org.eclipse.swt.events.SelectionListener.widgetSelectedAdapter;
+
 import java.io.IOException;
 import java.io.InputStream;
 
@@ -24,8 +26,6 @@ import org.eclipse.swt.custom.TextChangedEvent;
 import org.eclipse.swt.custom.TextChangingEvent;
 import org.eclipse.swt.events.ControlAdapter;
 import org.eclipse.swt.events.ControlEvent;
-import org.eclipse.swt.events.SelectionAdapter;
-import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.events.SelectionListener;
 import org.eclipse.swt.graphics.Color;
 import org.eclipse.swt.graphics.Image;
@@ -212,63 +212,57 @@ class StyledTextTab extends ScrollableTab {
 		label.setLayoutData(new GridData(SWT.END, SWT.CENTER, true, false));
 		yellowButton = new Button (styledTextStyleGroup, SWT.PUSH);
 		yellowButton.setImage (yellowImage);
-		SelectionListener styleListener = new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent e) {
-				Point sel = styledText.getSelectionRange();
-				if ((sel == null) || (sel.y == 0)) return;
-				StyleRange style;
-				for (int i = sel.x; i<sel.x+sel.y; i++) {
-					StyleRange range = styledText.getStyleRangeAtOffset(i);
-					if (range != null && e.widget != resetButton) {
-						style = (StyleRange)range.clone();
-						style.start = i;
-						style.length = 1;
-					} else {
-						style = new StyleRange(i, 1, null, null, SWT.NORMAL);
-					}
-					if (e.widget == boldButton) {
-						style.fontStyle ^= SWT.BOLD;
-					} else if (e.widget == italicButton) {
-						style.fontStyle ^= SWT.ITALIC;
-					} else if (e.widget == underlineButton) {
-						style.underline = !style.underline;
-					} else if (e.widget == strikeoutButton) {
-						style.strikeout = !style.strikeout;
-					}
-					styledText.setStyleRange(style);
+		SelectionListener styleListener = widgetSelectedAdapter(e -> {
+			Point sel = styledText.getSelectionRange();
+			if ((sel == null) || (sel.y == 0)) return;
+			StyleRange style;
+			for (int i = sel.x; i<sel.x+sel.y; i++) {
+				StyleRange range = styledText.getStyleRangeAtOffset(i);
+				if (range != null && e.widget != resetButton) {
+					style = (StyleRange)range.clone();
+					style.start = i;
+					style.length = 1;
+				} else {
+					style = new StyleRange(i, 1, null, null, SWT.NORMAL);
 				}
-				styledText.setSelectionRange(sel.x + sel.y, 0);
-			}
-		};
-		SelectionListener colorListener = new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent e) {
-				Point sel = styledText.getSelectionRange();
-				if ((sel == null) || (sel.y == 0)) return;
-				Color fg = null, bg = null;
-				if (e.widget == redButton) {
-					fg = display.getSystemColor (SWT.COLOR_RED);
-				} else if (e.widget == yellowButton) {
-					bg = display.getSystemColor (SWT.COLOR_YELLOW);
+				if (e.widget == boldButton) {
+					style.fontStyle ^= SWT.BOLD;
+				} else if (e.widget == italicButton) {
+					style.fontStyle ^= SWT.ITALIC;
+				} else if (e.widget == underlineButton) {
+					style.underline = !style.underline;
+				} else if (e.widget == strikeoutButton) {
+					style.strikeout = !style.strikeout;
 				}
-				StyleRange style;
-				for (int i = sel.x; i<sel.x+sel.y; i++) {
-					StyleRange range = styledText.getStyleRangeAtOffset(i);
-					if (range != null) {
-						style = (StyleRange)range.clone();
-						style.start = i;
-						style.length = 1;
-						if (fg != null) style.foreground = style.foreground != null ? null : fg;
-						if (bg != null) style.background = style.background != null ? null : bg;
-					} else {
-						style = new StyleRange (i, 1, fg, bg, SWT.NORMAL);
-					}
-					styledText.setStyleRange(style);
+				styledText.setStyleRange(style);
+			}
+			styledText.setSelectionRange(sel.x + sel.y, 0);
+		});
+		SelectionListener colorListener = widgetSelectedAdapter(e -> {
+			Point sel = styledText.getSelectionRange();
+			if ((sel == null) || (sel.y == 0)) return;
+			Color fg = null, bg = null;
+			if (e.widget == redButton) {
+				fg = display.getSystemColor (SWT.COLOR_RED);
+			} else if (e.widget == yellowButton) {
+				bg = display.getSystemColor (SWT.COLOR_YELLOW);
+			}
+			StyleRange style;
+			for (int i = sel.x; i<sel.x+sel.y; i++) {
+				StyleRange range = styledText.getStyleRangeAtOffset(i);
+				if (range != null) {
+					style = (StyleRange)range.clone();
+					style.start = i;
+					style.length = 1;
+					if (fg != null) style.foreground = style.foreground != null ? null : fg;
+					if (bg != null) style.background = style.background != null ? null : bg;
+				} else {
+					style = new StyleRange (i, 1, fg, bg, SWT.NORMAL);
 				}
-				styledText.setSelectionRange(sel.x + sel.y, 0);
+				styledText.setStyleRange(style);
 			}
-		};
+			styledText.setSelectionRange(sel.x + sel.y, 0);
+		});
 		resetButton.addSelectionListener(styleListener);
 		boldButton.addSelectionListener(styleListener);
 		italicButton.addSelectionListener(styleListener);
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/TableTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/TableTab.java
index e962a13..61e4097 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/TableTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/TableTab.java
@@ -11,9 +11,9 @@
 package org.eclipse.swt.examples.controlexample;
 
 
+import static org.eclipse.swt.events.SelectionListener.widgetSelectedAdapter;
+
 import org.eclipse.swt.SWT;
-import org.eclipse.swt.events.SelectionAdapter;
-import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.events.SelectionListener;
 import org.eclipse.swt.graphics.Color;
 import org.eclipse.swt.graphics.Font;
@@ -265,54 +265,14 @@ class TableTab extends ScrollableTab {
 		subImagesButton.setText (ControlExample.getResourceString("Sub_Images"));
 
 		/* Add the listeners */
-		linesVisibleButton.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				setWidgetLinesVisible ();
-			}
-		});
-		multipleColumns.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				recreateExampleWidgets ();
-			}
-		});
-		headerVisibleButton.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				setWidgetHeaderVisible ();
-			}
-		});
-		sortIndicatorButton.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				setWidgetSortIndicator ();
-			}
-		});
-		moveableColumns.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				setColumnsMoveable ();
-			}
-		});
-		resizableColumns.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				setColumnsResizable ();
-			}
-		});
-		headerImagesButton.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				recreateExampleWidgets ();
-			}
-		});
-		subImagesButton.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				recreateExampleWidgets ();
-			}
-		});
+		linesVisibleButton.addSelectionListener (widgetSelectedAdapter(event -> setWidgetLinesVisible ()));
+		multipleColumns.addSelectionListener (widgetSelectedAdapter(event -> recreateExampleWidgets ()));
+		headerVisibleButton.addSelectionListener (widgetSelectedAdapter(event -> setWidgetHeaderVisible ()));
+		sortIndicatorButton.addSelectionListener (widgetSelectedAdapter(event -> setWidgetSortIndicator ()));
+		moveableColumns.addSelectionListener (widgetSelectedAdapter(event -> setColumnsMoveable ()));
+		resizableColumns.addSelectionListener (widgetSelectedAdapter(event -> setColumnsResizable ()));
+		headerImagesButton.addSelectionListener (widgetSelectedAdapter(event -> recreateExampleWidgets ()));
+		subImagesButton.addSelectionListener (widgetSelectedAdapter(event -> recreateExampleWidgets ()));
 	}
 
 	/**
@@ -395,13 +355,10 @@ class TableTab extends ScrollableTab {
 
 		packColumnsButton = new Button (sizeGroup, SWT.PUSH);
 		packColumnsButton.setText (ControlExample.getResourceString("Pack_Columns"));
-		packColumnsButton.addSelectionListener(new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				packColumns ();
-				setExampleWidgetSize ();
-			}
-		});
+		packColumnsButton.addSelectionListener(widgetSelectedAdapter(event -> {
+			packColumns ();
+			setExampleWidgetSize ();
+		}));
 	}
 
 	/**
@@ -745,22 +702,19 @@ class TableTab extends ScrollableTab {
 			for (int i = 0; i < columns.length; i++) {
 				TableColumn column = columns[i];
 				if (i == 0) table1.setSortColumn(column);
-				SelectionListener listener = new SelectionAdapter() {
-					@Override
-					public void widgetSelected(SelectionEvent e) {
-						int sortDirection = SWT.DOWN;
-						if (e.widget == table1.getSortColumn()) {
-							/* If the sort column hasn't changed, cycle down -> up -> none. */
-							switch (table1.getSortDirection ()) {
-							case SWT.DOWN: sortDirection = SWT.UP; break;
-							case SWT.UP: sortDirection = SWT.NONE; break;
-							}
-						} else {
-							table1.setSortColumn((TableColumn)e.widget);
+				SelectionListener listener = widgetSelectedAdapter(e -> {
+					int sortDirection = SWT.DOWN;
+					if (e.widget == table1.getSortColumn()) {
+						/* If the sort column hasn't changed, cycle down -> up -> none. */
+						switch (table1.getSortDirection ()) {
+						case SWT.DOWN: sortDirection = SWT.UP; break;
+						case SWT.UP: sortDirection = SWT.NONE; break;
 						}
-						table1.setSortDirection (sortDirection);
+					} else {
+						table1.setSortColumn((TableColumn)e.widget);
 					}
-				};
+					table1.setSortDirection (sortDirection);
+				});
 				column.addSelectionListener(listener);
 				column.setData("SortListener", listener);	//$NON-NLS-1$
 			}
@@ -785,12 +739,9 @@ class TableTab extends ScrollableTab {
     	MenuItem item = new MenuItem(menu, SWT.PUSH);
     	item.setText("getItem(Point) on mouse coordinates");
     	menuMouseCoords = table1.toControl(new Point(event.x, event.y));
-    	item.addSelectionListener(new SelectionAdapter() {
-    		@Override
-			public void widgetSelected(SelectionEvent e) {
-    			eventConsole.append ("getItem(Point(" + menuMouseCoords + ")) returned: " + table1.getItem(menuMouseCoords));
-    			eventConsole.append ("\n");
-    		}
-    	});
+    	item.addSelectionListener(widgetSelectedAdapter(e -> {
+			eventConsole.append ("getItem(Point(" + menuMouseCoords + ")) returned: " + table1.getItem(menuMouseCoords));
+			eventConsole.append ("\n");
+		}));
 	}
 }
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ToolBarTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ToolBarTab.java
index 3dac1c5..7f9be02 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ToolBarTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ToolBarTab.java
@@ -11,6 +11,8 @@
 package org.eclipse.swt.examples.controlexample;
 
 
+import static org.eclipse.swt.events.SelectionListener.widgetSelectedAdapter;
+
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.events.SelectionAdapter;
 import org.eclipse.swt.events.SelectionEvent;
@@ -236,12 +238,7 @@ class ToolBarTab extends Tab {
 		comboChildButton.setText (ControlExample.getResourceString("Combo_child"));
 
 		/* Add the listeners */
-		comboChildButton.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				recreateExampleWidgets ();
-			}
-		});
+		comboChildButton.addSelectionListener (widgetSelectedAdapter(event -> recreateExampleWidgets ()));
 	}
 
 	/**
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ToolTipTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ToolTipTab.java
index ab47da1..a252567 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ToolTipTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ToolTipTab.java
@@ -11,11 +11,11 @@
 package org.eclipse.swt.examples.controlexample;
 
 
+import static org.eclipse.swt.events.SelectionListener.widgetSelectedAdapter;
+
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.events.ControlAdapter;
 import org.eclipse.swt.events.ControlEvent;
-import org.eclipse.swt.events.SelectionAdapter;
-import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.Button;
@@ -63,12 +63,7 @@ class ToolTipTab extends Tab {
 		toolTipGroup.setText ("ToolTip");
 		visibleButton = new Button(toolTipGroup, SWT.CHECK);
 		visibleButton.setText(ControlExample.getResourceString("Visible"));
-		visibleButton.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				setExampleWidgetVisibility ();
-			}
-		});
+		visibleButton.addSelectionListener (widgetSelectedAdapter(event -> setExampleWidgetVisibility ()));
 	}
 
 	/**
@@ -158,18 +153,8 @@ class ToolTipTab extends Tab {
 		showInTrayButton.setEnabled(tray != null);
 
 		/* Add the listeners */
-		autoHideButton.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				setExampleWidgetAutoHide ();
-			}
-		});
-		showInTrayButton.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				showExampleWidgetInTray ();
-			}
-		});
+		autoHideButton.addSelectionListener (widgetSelectedAdapter(event -> setExampleWidgetAutoHide ()));
+		showInTrayButton.addSelectionListener (widgetSelectedAdapter(event -> showExampleWidgetInTray ()));
 		shell.addDisposeListener(event -> disposeTrayItem());
 
 		/* Set the default state */
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/TreeTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/TreeTab.java
index 6fd29a0..542ae8e 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/TreeTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/TreeTab.java
@@ -11,9 +11,9 @@
 package org.eclipse.swt.examples.controlexample;
 
 
+import static org.eclipse.swt.events.SelectionListener.widgetSelectedAdapter;
+
 import org.eclipse.swt.SWT;
-import org.eclipse.swt.events.SelectionAdapter;
-import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.events.SelectionListener;
 import org.eclipse.swt.graphics.Color;
 import org.eclipse.swt.graphics.Font;
@@ -232,54 +232,14 @@ class TreeTab extends ScrollableTab {
 		subImagesButton.setText (ControlExample.getResourceString("Sub_Images"));
 
 		/* Add the listeners */
-		linesVisibleButton.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				setWidgetLinesVisible ();
-			}
-		});
-		multipleColumns.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				recreateExampleWidgets ();
-			}
-		});
-		headerVisibleButton.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				setWidgetHeaderVisible ();
-			}
-		});
-		sortIndicatorButton.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				setWidgetSortIndicator ();
-			}
-		});
-		moveableColumns.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				setColumnsMoveable ();
-			}
-		});
-		resizableColumns.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				setColumnsResizable ();
-			}
-		});
-		headerImagesButton.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				recreateExampleWidgets ();
-			}
-		});
-		subImagesButton.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				recreateExampleWidgets ();
-			}
-		});
+		linesVisibleButton.addSelectionListener (widgetSelectedAdapter(event -> setWidgetLinesVisible ()));
+		multipleColumns.addSelectionListener (widgetSelectedAdapter(event -> recreateExampleWidgets ()));
+		headerVisibleButton.addSelectionListener (widgetSelectedAdapter(event -> setWidgetHeaderVisible ()));
+		sortIndicatorButton.addSelectionListener (widgetSelectedAdapter(event -> setWidgetSortIndicator ()));
+		moveableColumns.addSelectionListener (widgetSelectedAdapter(event -> setColumnsMoveable ()));
+		resizableColumns.addSelectionListener (widgetSelectedAdapter(event -> setColumnsResizable ()));
+		headerImagesButton.addSelectionListener (widgetSelectedAdapter(event -> recreateExampleWidgets ()));
+		subImagesButton.addSelectionListener (widgetSelectedAdapter(event -> recreateExampleWidgets ()));
 	}
 
 	/**
@@ -426,14 +386,11 @@ class TreeTab extends ScrollableTab {
 
 		packColumnsButton = new Button (sizeGroup, SWT.PUSH);
 		packColumnsButton.setText (ControlExample.getResourceString("Pack_Columns"));
-		packColumnsButton.addSelectionListener(new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				packColumns (tree1);
-				packColumns (tree2);
-				setExampleWidgetSize ();
-			}
-		});
+		packColumnsButton.addSelectionListener(widgetSelectedAdapter(event -> {
+			packColumns (tree1);
+			packColumns (tree2);
+			setExampleWidgetSize ();
+		}));
 	}
 
 	/**
@@ -769,22 +726,19 @@ class TreeTab extends ScrollableTab {
 		for (int i = 0; i < columns.length; i++) {
 			TreeColumn column = columns[i];
 			if (i == 0) tree.setSortColumn(column);
-			SelectionListener listener = new SelectionAdapter() {
-				@Override
-				public void widgetSelected(SelectionEvent e) {
-					int sortDirection = SWT.DOWN;
-					if (e.widget == tree.getSortColumn()) {
-						/* If the sort column hasn't changed, cycle down -> up -> none. */
-						switch (tree.getSortDirection ()) {
-						case SWT.DOWN: sortDirection = SWT.UP; break;
-						case SWT.UP: sortDirection = SWT.NONE; break;
-						}
-					} else {
-						tree.setSortColumn((TreeColumn)e.widget);
+			SelectionListener listener = widgetSelectedAdapter(e -> {
+				int sortDirection = SWT.DOWN;
+				if (e.widget == tree.getSortColumn()) {
+					/* If the sort column hasn't changed, cycle down -> up -> none. */
+					switch (tree.getSortDirection ()) {
+					case SWT.DOWN: sortDirection = SWT.UP; break;
+					case SWT.UP: sortDirection = SWT.NONE; break;
 					}
-					tree.setSortDirection (sortDirection);
+				} else {
+					tree.setSortColumn((TreeColumn)e.widget);
 				}
-			};
+				tree.setSortDirection (sortDirection);
+			});
 			column.addSelectionListener(listener);
 			column.setData("SortListener", listener);	//$NON-NLS-1$
 		}
@@ -813,12 +767,9 @@ class TreeTab extends ScrollableTab {
     	item.setText("getItem(Point) on mouse coordinates");
     	final Tree t = (Tree) event.widget;
     	menuMouseCoords = t.toControl(new Point(event.x, event.y));
-    	item.addSelectionListener(new SelectionAdapter() {
-    		@Override
-			public void widgetSelected(SelectionEvent e) {
-    			eventConsole.append ("getItem(Point(" + menuMouseCoords + ")) returned: " + t.getItem(menuMouseCoords));
-    			eventConsole.append ("\n");
-    		}
-    	});
+    	item.addSelectionListener(widgetSelectedAdapter(e -> {
+			eventConsole.append ("getItem(Point(" + menuMouseCoords + ")) returned: " + t.getItem(menuMouseCoords));
+			eventConsole.append ("\n");
+		}));
 	}
 }
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/paint/TextTool.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/paint/TextTool.java
index 2bf75e2..de1c7c1 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/paint/TextTool.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/paint/TextTool.java
@@ -11,10 +11,10 @@
 package org.eclipse.swt.examples.paint;
 
 
+import static org.eclipse.swt.events.SelectionListener.widgetSelectedAdapter;
+
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.events.MouseEvent;
-import org.eclipse.swt.events.SelectionAdapter;
-import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.Button;
@@ -119,21 +119,13 @@ public class TextTool extends BasicPaintSession implements PaintTool {
 			Button ok = new Button(buttons, SWT.PUSH);
 			ok.setText(PaintExample.getResourceString("OK"));
 			ok.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false));
-			ok.addSelectionListener(new SelectionAdapter() {
-				@Override
-				public void widgetSelected(SelectionEvent e) {
-					drawText = field.getText();
-					dialog.dispose();
-				}
-			});
+			ok.addSelectionListener(widgetSelectedAdapter(e -> {
+				drawText = field.getText();
+				dialog.dispose();
+			}));
 			Button cancel = new Button(buttons, SWT.PUSH);
 			cancel.setText(PaintExample.getResourceString("Cancel"));
-			cancel.addSelectionListener(new SelectionAdapter() {
-				@Override
-				public void widgetSelected(SelectionEvent e) {
-					dialog.dispose();
-				}
-			});
+			cancel.addSelectionListener(widgetSelectedAdapter(e -> dialog.dispose()));
 			dialog.setDefaultButton(ok);
 			dialog.pack();
 			dialog.open();
commit c24a966f051c3a7a52ef30ecd08769714d0b86ee
Author: Lars Vogel <Lars.Vogel@vogella.com>
Date:   Wed Mar 29 11:34:39 2017 +0200

    Bug 509086 - Use lambda helper methods in org.eclipse.swt.examples -
    Part 4
    
    This change contains also renaming of several internal variables to
    avoid syntax errors because of redefinition of variables.
    Also changes SelectionAdapter type in FileViewer, Tab and TextEditor
    classes to
    SelectionListener
    Also several variable renames in /layoutexample/Tab
    
    
    Change-Id: Ie90714bd17f990a2d9e8c7c2a2dc02d1078478ce
    Signed-off-by: Lars Vogel <Lars.Vogel@vogella.com>

179	266	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/clipboard/ClipboardExample.java
111	219	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/Tab.java
22	49	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/fileviewer/FileViewer.java
114	152	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/layoutexample/Tab.java
278	451	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/texteditor/TextEditor.java
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/clipboard/ClipboardExample.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/clipboard/ClipboardExample.java
index ea1ad23..a586739 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/clipboard/ClipboardExample.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/clipboard/ClipboardExample.java
@@ -10,6 +10,8 @@
  *******************************************************************************/
 package org.eclipse.swt.examples.clipboard;
 
+import static org.eclipse.swt.events.SelectionListener.widgetSelectedAdapter;
+
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.custom.ScrolledComposite;
 import org.eclipse.swt.custom.StyledText;
@@ -20,8 +22,6 @@ import org.eclipse.swt.dnd.ImageTransfer;
 import org.eclipse.swt.dnd.RTFTransfer;
 import org.eclipse.swt.dnd.TextTransfer;
 import org.eclipse.swt.dnd.Transfer;
-import org.eclipse.swt.events.SelectionAdapter;
-import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.graphics.GC;
 import org.eclipse.swt.graphics.Image;
 import org.eclipse.swt.graphics.ImageData;
@@ -172,18 +172,15 @@ void createTextTransfer(Composite copyParent, Composite pasteParent) {
 	copyText.setLayoutData(data);
 	Button b = new Button(copyParent, SWT.PUSH);
 	b.setText("Copy");
-	b.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			String data = copyText.getText();
-			if (data.length() > 0) {
-				status.setText("");
-				clipboard.setContents(new Object[] {data}, new Transfer[] {TextTransfer.getInstance()});
-			} else {
-				status.setText("No text to copy");
-			}
+	b.addSelectionListener(widgetSelectedAdapter(e -> {
+		String textData = copyText.getText();
+		if (textData.length() > 0) {
+			status.setText("");
+			clipboard.setContents(new Object[] {textData}, new Transfer[] {TextTransfer.getInstance()});
+		} else {
+			status.setText("No text to copy");
 		}
-	});
+	}));
 
 	l = new Label(pasteParent, SWT.NONE);
 	l.setText("TextTransfer:"); //$NON-NLS-1$
@@ -194,18 +191,15 @@ void createTextTransfer(Composite copyParent, Composite pasteParent) {
 	pasteText.setLayoutData(data);
 	b = new Button(pasteParent, SWT.PUSH);
 	b.setText("Paste");
-	b.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			String data = (String)clipboard.getContents(TextTransfer.getInstance());
-			if (data != null && data.length() > 0) {
-				status.setText("");
-				pasteText.setText("begin paste>"+data+"<end paste");
-			} else {
-				status.setText("No text to paste");
-			}
+	b.addSelectionListener(widgetSelectedAdapter(e -> {
+		String textData = (String)clipboard.getContents(TextTransfer.getInstance());
+		if (textData != null && textData.length() > 0) {
+			status.setText("");
+			pasteText.setText("begin paste>"+textData+"<end paste");
+		} else {
+			status.setText("No text to paste");
 		}
-	});
+	}));
 }
 void createRTFTransfer(Composite copyParent, Composite pasteParent){
 	//	RTF Transfer
@@ -219,38 +213,35 @@ void createRTFTransfer(Composite copyParent, Composite pasteParent){
 	copyRtfText.setLayoutData(data);
 	Button b = new Button(copyParent, SWT.PUSH);
 	b.setText("Copy");
-	b.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			String data = copyRtfText.getText();
-			if (data.length() > 0) {
-				status.setText("");
-				StringBuffer buffer = new StringBuffer();
-				buffer.append("{\\rtf1\\ansi\\uc1{\\colortbl;\\red255\\green0\\blue0;}\\uc1\\b\\i ");
-				for (int i = 0; i < data.length(); i++) {
-					char ch = data.charAt(i);
-					if (ch > 0xFF) {
-						buffer.append("\\u");
-						buffer.append(Integer.toString((short) ch));
-						buffer.append('?');
-					} else {
-						if (ch == '}' || ch == '{' || ch == '\\') {
-							buffer.append('\\');
-						}
-						buffer.append(ch);
-						if (ch == '\n') buffer.append("\\par ");
-						if (ch == '\r' && (i - 1 == data.length() || data.charAt(i + 1) != '\n')) {
-							buffer.append("\\par ");
-						}
+	b.addSelectionListener(widgetSelectedAdapter(e -> {
+		String textData = copyRtfText.getText();
+		if (textData.length() > 0) {
+			status.setText("");
+			StringBuffer buffer = new StringBuffer();
+			buffer.append("{\\rtf1\\ansi\\uc1{\\colortbl;\\red255\\green0\\blue0;}\\uc1\\b\\i ");
+			for (int i = 0; i < textData.length(); i++) {
+				char ch = textData.charAt(i);
+				if (ch > 0xFF) {
+					buffer.append("\\u");
+					buffer.append(Integer.toString((short) ch));
+					buffer.append('?');
+				} else {
+					if (ch == '}' || ch == '{' || ch == '\\') {
+						buffer.append('\\');
+					}
+					buffer.append(ch);
+					if (ch == '\n') buffer.append("\\par ");
+					if (ch == '\r' && (i - 1 == textData.length() || textData.charAt(i + 1) != '\n')) {
+						buffer.append("\\par ");
 					}
 				}
-				buffer.append("}");
-				clipboard.setContents(new Object[] {buffer.toString()}, new Transfer[] {RTFTransfer.getInstance()});
-			} else {
-				status.setText("No RTF to copy");
 			}
+			buffer.append("}");
+			clipboard.setContents(new Object[] {buffer.toString()}, new Transfer[] {RTFTransfer.getInstance()});
+		} else {
+			status.setText("No RTF to copy");
 		}
-	});
+	}));
 
 	l = new Label(pasteParent, SWT.NONE);
 	l.setText("RTFTransfer:"); //$NON-NLS-1$
@@ -261,18 +252,15 @@ void createRTFTransfer(Composite copyParent, Composite pasteParent){
 	pasteRtfText.setLayoutData(data);
 	b = new Button(pasteParent, SWT.PUSH);
 	b.setText("Paste");
-	b.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			String data = (String)clipboard.getContents(RTFTransfer.getInstance());
-			if (data != null && data.length() > 0) {
-				status.setText("");
-				pasteRtfText.setText("start paste>"+data+"<end paste");
-			} else {
-				status.setText("No RTF to paste");
-			}
+	b.addSelectionListener(widgetSelectedAdapter(e -> {
+		String textData = (String)clipboard.getContents(RTFTransfer.getInstance());
+		if (textData != null && textData.length() > 0) {
+			status.setText("");
+			pasteRtfText.setText("start paste>"+textData+"<end paste");
+		} else {
+			status.setText("No RTF to paste");
 		}
-	});
+	}));
 }
 void createHTMLTransfer(Composite copyParent, Composite pasteParent){
 	//	HTML Transfer
@@ -286,18 +274,15 @@ void createHTMLTransfer(Composite copyParent, Composite pasteParent){
 	copyHtmlText.setLayoutData(data);
 	Button b = new Button(copyParent, SWT.PUSH);
 	b.setText("Copy");
-	b.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			String data = copyHtmlText.getText();
-			if (data.length() > 0) {
-				status.setText("");
-				clipboard.setContents(new Object[] {data}, new Transfer[] {HTMLTransfer.getInstance()});
-			} else {
-				status.setText("No HTML to copy");
-			}
+	b.addSelectionListener(widgetSelectedAdapter(e -> {
+		String textData = copyHtmlText.getText();
+		if (textData.length() > 0) {
+			status.setText("");
+			clipboard.setContents(new Object[] {textData}, new Transfer[] {HTMLTransfer.getInstance()});
+		} else {
+			status.setText("No HTML to copy");
 		}
-	});
+	}));
 
 	l = new Label(pasteParent, SWT.NONE);
 	l.setText("HTMLTransfer:"); //$NON-NLS-1$
@@ -308,18 +293,15 @@ void createHTMLTransfer(Composite copyParent, Composite pasteParent){
 	pasteHtmlText.setLayoutData(data);
 	b = new Button(pasteParent, SWT.PUSH);
 	b.setText("Paste");
-	b.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			String data = (String)clipboard.getContents(HTMLTransfer.getInstance());
-			if (data != null && data.length() > 0) {
-				status.setText("");
-				pasteHtmlText.setText("start paste>"+data+"<end paste");
-			} else {
-				status.setText("No HTML to paste");
-			}
+	b.addSelectionListener(widgetSelectedAdapter(e -> {
+		String textData = (String)clipboard.getContents(HTMLTransfer.getInstance());
+		if (textData != null && textData.length() > 0) {
+			status.setText("");
+			pasteHtmlText.setText("start paste>"+textData+"<end paste");
+		} else {
+			status.setText("No HTML to paste");
 		}
-	});
+	}));
 }
 void createFileTransfer(Composite copyParent, Composite pasteParent){
 	//File Transfer
@@ -338,55 +320,46 @@ void createFileTransfer(Composite copyParent, Composite pasteParent){
 
 	Button b = new Button(copyParent, SWT.PUSH);
 	b.setText("Select file(s)");
-	b.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			FileDialog dialog = new FileDialog(shell, SWT.OPEN | SWT.MULTI);
-			String result = dialog.open();
-			if (result != null && result.length() > 0){
-				String separator = System.getProperty("file.separator");
-				String path = dialog.getFilterPath();
-				String[] names = dialog.getFileNames();
-				for (String name : names) {
-					TableItem item = new TableItem(copyFileTable, SWT.NONE);
-					item.setText(path+separator+name);
-				}
+	b.addSelectionListener(widgetSelectedAdapter(e -> {
+		FileDialog dialog = new FileDialog(shell, SWT.OPEN | SWT.MULTI);
+		String result = dialog.open();
+		if (result != null && result.length() > 0){
+			String separator = System.getProperty("file.separator");
+			String path = dialog.getFilterPath();
+			String[] names = dialog.getFileNames();
+			for (String name : names) {
+				TableItem item = new TableItem(copyFileTable, SWT.NONE);
+				item.setText(path+separator+name);
 			}
 		}
-	});
+	}));
 	b = new Button(copyParent, SWT.PUSH);
 	b.setText("Select directory");
-	b.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			DirectoryDialog dialog = new DirectoryDialog(shell, SWT.OPEN);
-			String result = dialog.open();
-			if (result != null && result.length() > 0){
-				//copyFileTable.removeAll();
-				TableItem item = new TableItem(copyFileTable, SWT.NONE);
-				item.setText(result);
-			}
+	b.addSelectionListener(widgetSelectedAdapter(e -> {
+		DirectoryDialog dialog = new DirectoryDialog(shell, SWT.OPEN);
+		String result = dialog.open();
+		if (result != null && result.length() > 0){
+			//copyFileTable.removeAll();
+			TableItem item = new TableItem(copyFileTable, SWT.NONE);
+			item.setText(result);
 		}
-	});
+	}));
 
 	b = new Button(copyParent, SWT.PUSH);
 	b.setText("Copy");
-	b.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			TableItem[] items = copyFileTable.getItems();
-			if (items.length > 0){
-				status.setText("");
-				String[] data = new String[items.length];
-				for (int i = 0; i < data.length; i++) {
-					data[i] = items[i].getText();
-				}
-				clipboard.setContents(new Object[] {data}, new Transfer[] {FileTransfer.getInstance()});
-			} else {
-				status.setText("No file to copy");
+	b.addSelectionListener(widgetSelectedAdapter(e -> {
+		TableItem[] items = copyFileTable.getItems();
+		if (items.length > 0){
+			status.setText("");
+			String[] itemsData = new String[items.length];
+			for (int i = 0; i < itemsData.length; i++) {
+				itemsData[i] = items[i].getText();
 			}
+			clipboard.setContents(new Object[] {itemsData}, new Transfer[] {FileTransfer.getInstance()});
+		} else {
+			status.setText("No file to copy");
 		}
-	});
+	}));
 
 	l = new Label(pasteParent, SWT.NONE);
 	l.setText("FileTransfer:"); //$NON-NLS-1$
@@ -397,22 +370,19 @@ void createFileTransfer(Composite copyParent, Composite pasteParent){
 	pasteFileTable.setLayoutData(data);
 	b = new Button(pasteParent, SWT.PUSH);
 	b.setText("Paste");
-	b.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			String[] data = (String[])clipboard.getContents(FileTransfer.getInstance());
-			if (data != null && data.length > 0) {
-				status.setText("");
-				pasteFileTable.removeAll();
-				for (String element : data) {
-					TableItem item = new TableItem(pasteFileTable, SWT.NONE);
-					item.setText(element);
-				}
-			} else {
-				status.setText("No file to paste");
+	b.addSelectionListener(widgetSelectedAdapter(e -> {
+		String[] textData = (String[])clipboard.getContents(FileTransfer.getInstance());
+		if (textData != null && textData.length > 0) {
+			status.setText("");
+			pasteFileTable.removeAll();
+			for (String element : textData) {
+				TableItem item = new TableItem(pasteFileTable, SWT.NONE);
+				item.setText(element);
 			}
+		} else {
+			status.setText("No file to paste");
 		}
-	});
+	}));
 }
 
 void createImageTransfer(Composite copyParent, Composite pasteParent){
@@ -472,48 +442,42 @@ void createImageTransfer(Composite copyParent, Composite pasteParent){
 	});
 	Button openButton = new Button(copyParent, SWT.PUSH);
 	openButton.setText("Open Image");
-	openButton.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			FileDialog dialog = new FileDialog (shell, SWT.OPEN);
-			dialog.setText("Open an image file or cancel");
-			String string = dialog.open ();
-			if (string != null) {
-				if (copyImage[0] != null) {
-					System.out.println("CopyImage");
-					copyImage[0].dispose();
-				}
-				copyImage[0] = new Image(e.display, string);
-				copyVBar.setEnabled(true);
-				copyHBar.setEnabled(true);
-				copyOrigin.x = 0; copyOrigin.y = 0;
-				Rectangle rect = copyImage[0].getBounds();
-				Rectangle client = copyImageCanvas.getClientArea();
-				copyHBar.setMaximum(rect.width);
-				copyVBar.setMaximum(rect.height);
-				copyHBar.setThumb(Math.min(rect.width, client.width));
-				copyVBar.setThumb(Math.min(rect.height, client.height));
-				copyImageCanvas.scroll(0, 0, 0, 0, rect.width, rect.height, true);
-				copyVBar.setSelection(0);
-				copyHBar.setSelection(0);
-				copyImageCanvas.redraw();
+	openButton.addSelectionListener(widgetSelectedAdapter(e -> {
+		FileDialog dialog = new FileDialog (shell, SWT.OPEN);
+		dialog.setText("Open an image file or cancel");
+		String string = dialog.open ();
+		if (string != null) {
+			if (copyImage[0] != null) {
+				System.out.println("CopyImage");
+				copyImage[0].dispose();
 			}
+			copyImage[0] = new Image(e.display, string);
+			copyVBar.setEnabled(true);
+			copyHBar.setEnabled(true);
+			copyOrigin.x = 0; copyOrigin.y = 0;
+			Rectangle rect = copyImage[0].getBounds();
+			Rectangle client = copyImageCanvas.getClientArea();
+			copyHBar.setMaximum(rect.width);
+			copyVBar.setMaximum(rect.height);
+			copyHBar.setThumb(Math.min(rect.width, client.width));
+			copyVBar.setThumb(Math.min(rect.height, client.height));
+			copyImageCanvas.scroll(0, 0, 0, 0, rect.width, rect.height, true);
+			copyVBar.setSelection(0);
+			copyHBar.setSelection(0);
+			copyImageCanvas.redraw();
 		}
-	});
+	}));
 	Button b = new Button(copyParent, SWT.PUSH);
 	b.setText("Copy");
-	b.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			if (copyImage[0] != null) {
-				status.setText("");
-				// Fetch ImageData at current zoom and save in the clip-board.
-				clipboard.setContents(new Object[] {copyImage[0].getImageDataAtCurrentZoom()}, new Transfer[] {ImageTransfer.getInstance()});
-			} else {
-				status.setText("No image to copy");
-			}
+	b.addSelectionListener(widgetSelectedAdapter(e -> {
+		if (copyImage[0] != null) {
+			status.setText("");
+			// Fetch ImageData at current zoom and save in the clip-board.
+			clipboard.setContents(new Object[] {copyImage[0].getImageDataAtCurrentZoom()}, new Transfer[] {ImageTransfer.getInstance()});
+		} else {
+			status.setText("No image to copy");
 		}
-	});
+	}));
 
 	final Image[] pasteImage = new Image[] {null};
 	l = new Label(pasteParent, SWT.NONE);
@@ -564,36 +528,33 @@ void createImageTransfer(Composite copyParent, Composite pasteParent){
 	});
 	b = new Button(pasteParent, SWT.PUSH);
 	b.setText("Paste");
-	b.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			ImageData data =(ImageData)clipboard.getContents(ImageTransfer.getInstance());
-			if (data != null) {
-				if (pasteImage[0] != null) {
-					System.out.println("PasteImage");
-					pasteImage[0].dispose();
-				}
-				status.setText("");
-				// Consume the ImageData at current zoom as-is.
-				pasteImage[0] = new Image(e.display, new AutoScaleImageDataProvider(data));
-				pasteVBar.setEnabled(true);
-				pasteHBar.setEnabled(true);
-				pasteOrigin.x = 0; pasteOrigin.y = 0;
-				Rectangle rect = pasteImage[0].getBounds();
-				Rectangle client = pasteImageCanvas.getClientArea();
-				pasteHBar.setMaximum(rect.width);
-				pasteVBar.setMaximum(rect.height);
-				pasteHBar.setThumb(Math.min(rect.width, client.width));
-				pasteVBar.setThumb(Math.min(rect.height, client.height));
-				pasteImageCanvas.scroll(0, 0, 0, 0, rect.width, rect.height, true);
-				pasteVBar.setSelection(0);
-				pasteHBar.setSelection(0);
-				pasteImageCanvas.redraw();
-			} else {
-				status.setText("No image to paste");
+	b.addSelectionListener(widgetSelectedAdapter(e -> {
+		ImageData imageData =(ImageData)clipboard.getContents(ImageTransfer.getInstance());
+		if (imageData != null) {
+			if (pasteImage[0] != null) {
+				System.out.println("PasteImage");
+				pasteImage[0].dispose();
 			}
+			status.setText("");
+			// Consume the ImageData at current zoom as-is.
+			pasteImage[0] = new Image(e.display, new AutoScaleImageDataProvider(imageData));
+			pasteVBar.setEnabled(true);
+			pasteHBar.setEnabled(true);
+			pasteOrigin.x = 0; pasteOrigin.y = 0;
+			Rectangle rect = pasteImage[0].getBounds();
+			Rectangle client = pasteImageCanvas.getClientArea();
+			pasteHBar.setMaximum(rect.width);
+			pasteVBar.setMaximum(rect.height);
+			pasteHBar.setThumb(Math.min(rect.width, client.width));
+			pasteVBar.setThumb(Math.min(rect.height, client.height));
+			pasteImageCanvas.scroll(0, 0, 0, 0, rect.width, rect.height, true);
+			pasteVBar.setSelection(0);
+			pasteHBar.setSelection(0);
+			pasteImageCanvas.redraw();
+		} else {
+			status.setText("No image to paste");
 		}
-	});
+	}));
 }
 void createMyTransfer(Composite copyParent, Composite pasteParent){
 	//	MyType Transfer
@@ -605,28 +566,13 @@ void createControlTransfer(Composite parent){
 	l.setText("Text:");
 	Button b = new Button(parent, SWT.PUSH);
 	b.setText("Cut");
-	b.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			text.cut();
-		}
-	});
+	b.addSelectionListener(widgetSelectedAdapter(e -> text.cut()));
 	b = new Button(parent, SWT.PUSH);
 	b.setText("Copy");
-	b.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			text.copy();
-		}
-	});
+	b.addSelectionListener(widgetSelectedAdapter(e -> text.copy()));
 	b = new Button(parent, SWT.PUSH);
 	b.setText("Paste");
-	b.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			text.paste();
-		}
-	});
+	b.addSelectionListener(widgetSelectedAdapter(e -> text.paste()));
 	text = new Text(parent, SWT.BORDER | SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL);
 	GridData data = new GridData(GridData.FILL_HORIZONTAL);
 	data.widthHint = HSIZE;
@@ -637,28 +583,13 @@ void createControlTransfer(Composite parent){
 	l.setText("Combo:");
 	b = new Button(parent, SWT.PUSH);
 	b.setText("Cut");
-	b.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			combo.cut();
-		}
-	});
+	b.addSelectionListener(widgetSelectedAdapter(e -> combo.cut()));
 	b = new Button(parent, SWT.PUSH);
 	b.setText("Copy");
-	b.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			combo.copy();
-		}
-	});
+	b.addSelectionListener(widgetSelectedAdapter(e -> combo.copy()));
 	b = new Button(parent, SWT.PUSH);
 	b.setText("Paste");
-	b.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			combo.paste();
-		}
-	});
+	b.addSelectionListener(widgetSelectedAdapter(e -> combo.paste()));
 	combo = new Combo(parent, SWT.NONE);
 	combo.setItems("Item 1", "Item 2", "Item 3", "A longer Item");
 	combo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
@@ -667,28 +598,13 @@ void createControlTransfer(Composite parent){
 	l.setText("StyledText:");
 	b = new Button(parent, SWT.PUSH);
 	b.setText("Cut");
-	b.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			styledText.cut();
-		}
-	});
+	b.addSelectionListener(widgetSelectedAdapter(e -> styledText.cut()));
 	b = new Button(parent, SWT.PUSH);
 	b.setText("Copy");
-	b.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			styledText.copy();
-		}
-	});
+	b.addSelectionListener(widgetSelectedAdapter(e -> styledText.copy()));
 	b = new Button(parent, SWT.PUSH);
 	b.setText("Paste");
-	b.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			styledText.paste();
-		}
-	});
+	b.addSelectionListener(widgetSelectedAdapter(e -> styledText.paste()));
 	styledText = new StyledText(parent, SWT.BORDER | SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL);
 	data = new GridData(GridData.FILL_HORIZONTAL);
 	data.widthHint = HSIZE;
@@ -702,15 +618,12 @@ void createAvailableTypes(Composite parent){
 	list.setLayoutData(data);
 	Button b = new Button(parent, SWT.PUSH);
 	b.setText("Get Available Types");
-	b.addSelectionListener(new SelectionAdapter() {
-		@Override
-		public void widgetSelected(SelectionEvent e) {
-			list.removeAll();
-			String[] names = clipboard.getAvailableTypeNames();
-			for (String name : names) {
-				list.add(name);
-			}
+	b.addSelectionListener(widgetSelectedAdapter(e -> {
+		list.removeAll();
+		String[] names = clipboard.getAvailableTypeNames();
+		for (String name : names) {
+			list.add(name);
 		}
-	});
+	}));
 }
 }
\ No newline at end of file
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/Tab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/Tab.java
index 910988e..3e89da6 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/Tab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/Tab.java
@@ -12,6 +12,9 @@
 package org.eclipse.swt.examples.controlexample;
 
 
+import static org.eclipse.swt.events.SelectionListener.widgetDefaultSelectedAdapter;
+import static org.eclipse.swt.events.SelectionListener.widgetSelectedAdapter;
+
 import java.lang.reflect.Method;
 
 import org.eclipse.swt.SWT;
@@ -313,24 +316,21 @@ abstract class Tab {
 		 * both these operations but typically only do work when a RADIO
 		 * button is selected.
 		 */
-		SelectionListener selectionListener = new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				if ((event.widget.getStyle () & SWT.RADIO) != 0) {
-					if (!((Button) event.widget).getSelection ()) return;
-				}
-				if (!handleTextDirection (event.widget)) {
-					recreateExampleWidgets ();
-					if (rtlSupport ()) {
-						/* Reflect the base direction falls back to the default (i.e. orientation). */
-						ltrDirectionButton.setSelection (false);
-						rtlDirectionButton.setSelection (false);
-						autoDirectionButton.setSelection (false);
-						defaultDirectionButton.setSelection (true);
-					}
+		SelectionListener selectionListener = widgetSelectedAdapter(event -> {
+			if ((event.widget.getStyle () & SWT.RADIO) != 0) {
+				if (!((Button) event.widget).getSelection ()) return;
+			}
+			if (!handleTextDirection (event.widget)) {
+				recreateExampleWidgets ();
+				if (rtlSupport ()) {
+					/* Reflect the base direction falls back to the default (i.e. orientation). */
+					ltrDirectionButton.setSelection (false);
+					rtlDirectionButton.setSelection (false);
+					autoDirectionButton.setSelection (false);
+					defaultDirectionButton.setSelection (true);
 				}
 			}
-		};
+		});
 		Control [] children = styleGroup.getChildren ();
 		for (Control child : children) {
 			if (child instanceof Button) {
@@ -373,20 +373,17 @@ abstract class Tab {
 			final Button setGetButton = new Button (otherGroup, SWT.PUSH);
 			setGetButton.setText (ControlExample.getResourceString ("Set_Get"));
 			setGetButton.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false));
-			setGetButton.addSelectionListener (new SelectionAdapter() {
-				@Override
-				public void widgetSelected (SelectionEvent e) {
-					if (getExampleWidgets().length >  0) {
-						if (setGetDialog == null) {
-							setGetDialog = createSetGetDialog(methodNames);
-						}
-						Point pt = setGetButton.getLocation();
-						pt = display.map(setGetButton.getParent(), null, pt);
-						setGetDialog.setLocation(pt.x, pt.y);
-						setGetDialog.open();
+			setGetButton.addSelectionListener (widgetSelectedAdapter(e -> {
+				if (getExampleWidgets().length >  0) {
+					if (setGetDialog == null) {
+						setGetDialog = createSetGetDialog(methodNames);
 					}
+					Point pt = setGetButton.getLocation();
+					pt = display.map(setGetButton.getParent(), null, pt);
+					setGetDialog.setLocation(pt.x, pt.y);
+					setGetDialog.open();
 				}
-			});
+			}));
 		}
 	}
 
@@ -429,24 +426,9 @@ abstract class Tab {
 		/* Add listeners to set/reset colors and fonts. */
 		colorDialog = new ColorDialog (shell);
 		fontDialog = new FontDialog (shell);
-		colorAndFontTable.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetDefaultSelected(SelectionEvent event) {
-				changeFontOrColor (colorAndFontTable.getSelectionIndex());
-			}
-		});
-		changeButton.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				changeFontOrColor (colorAndFontTable.getSelectionIndex());
-			}
-		});
-		defaultsButton.addSelectionListener(new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent e) {
-				resetColorsAndFonts ();
-			}
-		});
+		colorAndFontTable.addSelectionListener(widgetDefaultSelectedAdapter(event -> changeFontOrColor (colorAndFontTable.getSelectionIndex())));
+		changeButton.addSelectionListener(widgetSelectedAdapter(event -> changeFontOrColor (colorAndFontTable.getSelectionIndex())));
+		defaultsButton.addSelectionListener(widgetSelectedAdapter(e -> resetColorsAndFonts ()));
 		shell.addDisposeListener(event -> {
 			if (foregroundColor != null) foregroundColor.dispose();
 			if (backgroundColor != null) backgroundColor.dispose();
@@ -537,30 +519,10 @@ abstract class Tab {
 		popupMenuButton.setText(ControlExample.getResourceString("PopupMenu"));
 
 		/* Add the listeners */
-		enabledButton.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				setExampleWidgetEnabled ();
-			}
-		});
-		visibleButton.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				setExampleWidgetVisibility ();
-			}
-		});
-		backgroundImageButton.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				setExampleWidgetBackgroundImage ();
-			}
-		});
-		popupMenuButton.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				setExampleWidgetPopupMenu ();
-			}
-		});
+		enabledButton.addSelectionListener (widgetSelectedAdapter(event -> setExampleWidgetEnabled ()));
+		visibleButton.addSelectionListener (widgetSelectedAdapter(event -> setExampleWidgetVisibility ()));
+		backgroundImageButton.addSelectionListener (widgetSelectedAdapter(event -> setExampleWidgetBackgroundImage ()));
+		popupMenuButton.addSelectionListener (widgetSelectedAdapter(event -> setExampleWidgetPopupMenu ()));
 
 		/* Set the default state */
 		enabledButton.setSelection(true);
@@ -588,24 +550,9 @@ abstract class Tab {
 		backgroundModeColorButton.setText(ControlExample.getResourceString("BackgroundColor"));
 
 		/* Add the listeners */
-		backgroundModeCombo.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				setExampleGroupBackgroundMode ();
-			}
-		});
-		backgroundModeImageButton.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				setExampleGroupBackgroundImage ();
-			}
-		});
-		backgroundModeColorButton.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				setExampleGroupBackgroundColor ();
-			}
-		});
+		backgroundModeCombo.addSelectionListener (widgetSelectedAdapter(event -> setExampleGroupBackgroundMode ()));
+		backgroundModeImageButton.addSelectionListener (widgetSelectedAdapter(event -> setExampleGroupBackgroundImage ()));
+		backgroundModeColorButton.addSelectionListener (widgetSelectedAdapter(event -> setExampleGroupBackgroundColor ()));
 
 		/* Set the default state */
 		backgroundModeCombo.setText(backgroundModeCombo.getItem(0));
@@ -635,19 +582,16 @@ abstract class Tab {
 			doitCombo.setItems ("", "true", "false");
 			if ((setFieldsMask & DOIT) != 0) doitCombo.setText(Boolean.toString(setFieldsEvent.doit));
 			doitCombo.setLayoutData (new GridData (SWT.FILL, SWT.CENTER, true, false));
-			doitCombo.addSelectionListener(new SelectionAdapter () {
-				@Override
-				public void widgetSelected(SelectionEvent e) {
-					String newValue = doitCombo.getText();
-					if (newValue.length() == 0) {
-						setFieldsMask &= ~DOIT;
-					} else {
-						setFieldsEvent.type = eventType;
-						setFieldsEvent.doit = newValue.equals("true");
-						setFieldsMask |= DOIT;
-					}
+			doitCombo.addSelectionListener(widgetSelectedAdapter(e -> {
+				String newValue = doitCombo.getText();
+				if (newValue.length() == 0) {
+					setFieldsMask &= ~DOIT;
+				} else {
+					setFieldsEvent.type = eventType;
+					setFieldsEvent.doit = newValue.equals("true");
+					setFieldsMask |= DOIT;
 				}
-			});
+			}));
 		}
 
 		if ((fields & DETAIL) != 0) {
@@ -659,24 +603,21 @@ abstract class Tab {
 			detailCombo.setVisibleItemCount(detailCombo.getItemCount());
 			if ((setFieldsMask & DETAIL) != 0) detailCombo.setText (DETAIL_CONSTANTS[detailType][setFieldsEvent.detail]);
 			detailCombo.setLayoutData (new GridData (SWT.FILL, SWT.CENTER, true, false));
-			detailCombo.addSelectionListener(new SelectionAdapter () {
-				@Override
-				public void widgetSelected(SelectionEvent e) {
-					String newValue = detailCombo.getText();
-					if (newValue.length() == 0) {
-						setFieldsMask &= ~DETAIL;
-					} else {
-						setFieldsEvent.type = eventType;
-						for (int i = 0; i < DETAIL_VALUES.length; i += 2) {
-							if (newValue.equals (DETAIL_VALUES [i])) {
-								setFieldsEvent.detail = ((Integer) DETAIL_VALUES [i + 1]).intValue();
-								break;
-							}
+			detailCombo.addSelectionListener(widgetSelectedAdapter(e -> {
+				String newValue = detailCombo.getText();
+				if (newValue.length() == 0) {
+					setFieldsMask &= ~DETAIL;
+				} else {
+					setFieldsEvent.type = eventType;
+					for (int i = 0; i < DETAIL_VALUES.length; i += 2) {
+						if (newValue.equals (DETAIL_VALUES [i])) {
+							setFieldsEvent.detail = ((Integer) DETAIL_VALUES [i + 1]).intValue();
+							break;
 						}
-						setFieldsMask |= DETAIL;
 					}
+					setFieldsMask |= DETAIL;
 				}
-			});
+			}));
 		}
 
 		if ((fields & TEXT) != 0) {
@@ -773,14 +714,11 @@ abstract class Tab {
 		GridData data = new GridData (70, SWT.DEFAULT);
 		data.horizontalAlignment = SWT.RIGHT;
 		ok.setLayoutData (data);
-		ok.addSelectionListener (new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent e) {
-				EVENT_INFO[index].setFields = setFieldsMask;
-				EVENT_INFO[index].event = setFieldsEvent;
-				dialog.dispose();
-			}
-		});
+		ok.addSelectionListener (widgetSelectedAdapter(e -> {
+			EVENT_INFO[index].setFields = setFieldsMask;
+			EVENT_INFO[index].event = setFieldsEvent;
+			dialog.dispose();
+		}));
 
 		dialog.setDefaultButton(ok);
 		dialog.pack();
@@ -854,47 +792,38 @@ abstract class Tab {
 		Button selectAll = new Button (dialog, SWT.PUSH);
 		selectAll.setText(ControlExample.getResourceString ("Select_All"));
 		selectAll.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
-		selectAll.addSelectionListener (new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent e) {
-				TableItem [] items = table.getItems();
-				for (int i = 0; i < EVENT_INFO.length; i++) {
-					items[i].setChecked(true);
-				}
-				for (int i = 0; i < customNames.length; i++) {
-					items[EVENT_INFO.length + i].setChecked(true);
-				}
+		selectAll.addSelectionListener (widgetSelectedAdapter(e -> {
+			TableItem [] items = table.getItems();
+			for (int i = 0; i < EVENT_INFO.length; i++) {
+				items[i].setChecked(true);
 			}
-		});
+			for (int i = 0; i < customNames.length; i++) {
+				items[EVENT_INFO.length + i].setChecked(true);
+			}
+		}));
 		Button deselectAll = new Button (dialog, SWT.PUSH);
 		deselectAll.setText(ControlExample.getResourceString ("Deselect_All"));
 		deselectAll.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
-		deselectAll.addSelectionListener (new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent e) {
-				TableItem [] items = table.getItems();
-				for (int i = 0; i < EVENT_INFO.length; i++) {
-					items[i].setChecked(false);
-				}
-				for (int i = 0; i < customNames.length; i++) {
-					items[EVENT_INFO.length + i].setChecked(false);
-				}
+		deselectAll.addSelectionListener (widgetSelectedAdapter(e -> {
+			TableItem [] items = table.getItems();
+			for (int i = 0; i < EVENT_INFO.length; i++) {
+				items[i].setChecked(false);
 			}
-		});
+			for (int i = 0; i < customNames.length; i++) {
+				items[EVENT_INFO.length + i].setChecked(false);
+			}
+		}));
 		final Button editEvent = new Button (dialog, SWT.PUSH);
 		editEvent.setText (ControlExample.getResourceString ("Edit_Event"));
 		editEvent.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.VERTICAL_ALIGN_BEGINNING));
-		editEvent.addSelectionListener (new SelectionAdapter() {
-			@Override
-			public void widgetSelected (SelectionEvent e) {
-				Point pt = editEvent.getLocation();
-				pt = e.display.map(editEvent, null, pt);
-				int index = table.getSelectionIndex();
-				if (getExampleWidgets().length > 0 && index != -1) {
-					createEditEventDialog(dialog, pt.x, pt.y, index);
-				}
+		editEvent.addSelectionListener (widgetSelectedAdapter(e -> {
+			Point pt = editEvent.getLocation();
+			pt = e.display.map(editEvent, null, pt);
+			int index = table.getSelectionIndex();
+			if (getExampleWidgets().length > 0 && index != -1) {
+				createEditEventDialog(dialog, pt.x, pt.y, index);
 			}
-		});
+		}));
 		editEvent.setEnabled(false);
 		table.addSelectionListener(new SelectionAdapter() {
 			@Override
@@ -924,19 +853,16 @@ abstract class Tab {
 		ok.setText(ControlExample.getResourceString ("OK"));
 		dialog.setDefaultButton(ok);
 		ok.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));
-		ok.addSelectionListener (new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent e) {
-				TableItem [] items = table.getItems();
-				for (int i = 0; i < EVENT_INFO.length; i++) {
-					eventsFilter[i] = items[i].getChecked();
-				}
-				for (int i = 0; i < customNames.length; i++) {
-					eventsFilter[EVENT_INFO.length + i] = items[EVENT_INFO.length + i].getChecked();
-				}
-				dialog.dispose();
+		ok.addSelectionListener (widgetSelectedAdapter(e -> {
+			TableItem [] items = table.getItems();
+			for (int i = 0; i < EVENT_INFO.length; i++) {
+				eventsFilter[i] = items[i].getChecked();
 			}
-		});
+			for (int i = 0; i < customNames.length; i++) {
+				eventsFilter[EVENT_INFO.length + i] = items[EVENT_INFO.length + i].getChecked();
+			}
+			dialog.dispose();
+		}));
 		dialog.pack ();
 		/*
 		 * If the preferred size of the dialog is too tall for the display,
@@ -970,38 +896,27 @@ abstract class Tab {
 		 */
 		Button listenersButton = new Button (listenersGroup, SWT.PUSH);
 		listenersButton.setText (ControlExample.getResourceString ("Select_Listeners"));
-		listenersButton.addSelectionListener (new SelectionAdapter() {
-			@Override
-			public void widgetSelected (SelectionEvent e) {
-				createListenerSelectionDialog ();
-				recreateExampleWidgets ();
-			}
-		});
+		listenersButton.addSelectionListener (widgetSelectedAdapter(e -> {
+			createListenerSelectionDialog ();
+			recreateExampleWidgets ();
+		}));
 
 		/*
 		 * Create the checkbox to specify whether typed or untyped events are displayed in the log.
 		 */
 		final Button untypedEventsCheckbox = new Button (listenersGroup, SWT.CHECK);
 		untypedEventsCheckbox.setText (ControlExample.getResourceString ("UntypedEvents"));
-		untypedEventsCheckbox.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected(SelectionEvent e) {
-				untypedEvents = untypedEventsCheckbox.getSelection ();
-			}
-		});
+		untypedEventsCheckbox.addSelectionListener (widgetSelectedAdapter(e -> untypedEvents = untypedEventsCheckbox.getSelection ()));
 
 		/*
 		 * Create the checkbox to add/remove listeners to/from the example widgets.
 		 */
 		final Button listenCheckbox = new Button (listenersGroup, SWT.CHECK);
 		listenCheckbox.setText (ControlExample.getResourceString ("Listen"));
-		listenCheckbox.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected(SelectionEvent e) {
-				logging = listenCheckbox.getSelection ();
-				recreateExampleWidgets ();
-			}
-		});
+		listenCheckbox.addSelectionListener (widgetSelectedAdapter(e -> {
+			logging = listenCheckbox.getSelection ();
+			recreateExampleWidgets ();
+		}));
 
 		/*
 		 * Create the button to clear the text.
@@ -1009,12 +924,7 @@ abstract class Tab {
 		Button clearButton = new Button (listenersGroup, SWT.PUSH);
 		clearButton.setText (ControlExample.getResourceString ("Clear"));
 		clearButton.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_END));
-		clearButton.addSelectionListener (new SelectionAdapter() {
-			@Override
-			public void widgetSelected (SelectionEvent e) {
-				eventConsole.setText ("");
-			}
-		});
+		clearButton.addSelectionListener (widgetSelectedAdapter(e -> eventConsole.setText ("")));
 
 		/* Initialize the eventsFilter to log all events. */
 		int customEventCount = getCustomEventNames ().length;
@@ -1058,34 +968,21 @@ abstract class Tab {
 		nameCombo.setText(methodNames[0]);
 		nameCombo.setVisibleItemCount(methodNames.length);
 		nameCombo.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false));
-		nameCombo.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent e) {
-				resetLabels();
-			}
-		});
+		nameCombo.addSelectionListener(widgetSelectedAdapter(e -> resetLabels()));
 		returnTypeLabel = new Label(dialog, SWT.NONE);
 		returnTypeLabel.setLayoutData(new GridData(SWT.FILL, SWT.BEGINNING, false, false));
 		setButton = new Button(dialog, SWT.PUSH);
 		setButton.setLayoutData(new GridData(SWT.FILL, SWT.BEGINNING, false, false));
-		setButton.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent e) {
-				setValue();
-				setText.selectAll();
-				setText.setFocus();
-			}
-		});
+		setButton.addSelectionListener(widgetSelectedAdapter(e -> {
+			setValue();
+			setText.selectAll();
+			setText.setFocus();
+		}));
 		setText = new Text(dialog, SWT.SINGLE | SWT.BORDER);
 		setText.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false));
 		getButton = new Button(dialog, SWT.PUSH);
 		getButton.setLayoutData(new GridData(SWT.FILL, SWT.BEGINNING, false, false));
-		getButton.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent e) {
-				getValue();
-			}
-		});
+		getButton.addSelectionListener(widgetSelectedAdapter(e -> getValue()));
 		getText = new Text(dialog, SWT.MULTI | SWT.BORDER | SWT.READ_ONLY | SWT.H_SCROLL | SWT.V_SCROLL);
 		GridData data = new GridData(SWT.FILL, SWT.FILL, true, true);
 		data.widthHint = 240;
@@ -1312,12 +1209,7 @@ abstract class Tab {
 		fillVButton.setText (ControlExample.getResourceString("Fill_Y"));
 
 		/* Add the listeners */
-		SelectionAdapter selectionListener = new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent event) {
-				setExampleWidgetSize ();
-			}
-		};
+		SelectionListener selectionListener = widgetSelectedAdapter(event -> setExampleWidgetSize ());
 		preferredButton.addSelectionListener(selectionListener);
 		tooSmallButton.addSelectionListener(selectionListener);
 		smallButton.addSelectionListener(selectionListener);
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/fileviewer/FileViewer.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/fileviewer/FileViewer.java
index 2245f90..c830f4f 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/fileviewer/FileViewer.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/fileviewer/FileViewer.java
@@ -11,6 +11,8 @@
 package org.eclipse.swt.examples.fileviewer;
 
 
+import static org.eclipse.swt.events.SelectionListener.widgetSelectedAdapter;
+
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.FileReader;
@@ -279,21 +281,11 @@ public class FileViewer {
 		final MenuItem simulateItem = new MenuItem(menu, SWT.CHECK);
 		simulateItem.setText(getResourceString("menu.File.SimulateOnly.text"));
 		simulateItem.setSelection(simulateOnly);
-		simulateItem.addSelectionListener(new SelectionAdapter () {
-			@Override
-			public void widgetSelected(SelectionEvent e) {
-				simulateOnly = simulateItem.getSelection();
-			}
-		});
+		simulateItem.addSelectionListener(widgetSelectedAdapter(e -> simulateOnly = simulateItem.getSelection()));
 
 		MenuItem item = new MenuItem(menu, SWT.PUSH);
 		item.setText(getResourceString("menu.File.Close.text"));
-		item.addSelectionListener(new SelectionAdapter () {
-			@Override
-			public void widgetSelected(SelectionEvent e) {
-				shell.close();
-			}
-		});
+		item.addSelectionListener(widgetSelectedAdapter(e -> shell.close()));
 	}
 
 	/**
@@ -309,16 +301,13 @@ public class FileViewer {
 
 		MenuItem item = new MenuItem(menu, SWT.PUSH);
 		item.setText(getResourceString("menu.Help.About.text"));
-		item.addSelectionListener(new SelectionAdapter () {
-			@Override
-			public void widgetSelected(SelectionEvent e) {
-				MessageBox box = new MessageBox(shell, SWT.ICON_INFORMATION | SWT.OK);
-				box.setText(getResourceString("dialog.About.title"));
-				box.setMessage(getResourceString("dialog.About.description",
-					new Object[] { System.getProperty("os.name") }));
-				box.open();
-			}
-		});
+		item.addSelectionListener(widgetSelectedAdapter(e -> {
+			MessageBox box = new MessageBox(shell, SWT.ICON_INFORMATION | SWT.OK);
+			box.setText(getResourceString("dialog.About.title"));
+			box.setMessage(getResourceString("dialog.About.description",
+				new Object[] { System.getProperty("os.name") }));
+			box.open();
+		}));
 	}
 
 	/**
@@ -334,30 +323,17 @@ public class FileViewer {
 		item = new ToolItem(toolBar, SWT.PUSH);
 		item.setImage(iconCache.stockImages[iconCache.cmdParent]);
 		item.setToolTipText(getResourceString("tool.Parent.tiptext"));
-		item.addSelectionListener(new SelectionAdapter () {
-			@Override
-			public void widgetSelected(SelectionEvent e) {
-				doParent();
-			}
-		});
+		item.addSelectionListener(widgetSelectedAdapter(e -> doParent()));
 		item = new ToolItem(toolBar, SWT.PUSH);
 		item.setImage(iconCache.stockImages[iconCache.cmdRefresh]);
 		item.setToolTipText(getResourceString("tool.Refresh.tiptext"));
-		item.addSelectionListener(new SelectionAdapter () {
-			@Override
-			public void widgetSelected(SelectionEvent e) {
-				doRefresh();
-			}
+		item.addSelectionListener(widgetSelectedAdapter(e -> doRefresh()));
+		SelectionListener unimplementedListener = widgetSelectedAdapter(e -> {
+			MessageBox box = new MessageBox(shell, SWT.ICON_INFORMATION | SWT.OK);
+			box.setText(getResourceString("dialog.NotImplemented.title"));
+			box.setMessage(getResourceString("dialog.ActionNotImplemented.description"));
+			box.open();
 		});
-		SelectionAdapter unimplementedListener = new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent e) {
-				MessageBox box = new MessageBox(shell, SWT.ICON_INFORMATION | SWT.OK);
-				box.setText(getResourceString("dialog.NotImplemented.title"));
-				box.setMessage(getResourceString("dialog.ActionNotImplemented.description"));
-				box.open();
-			}
-		};
 
 		item = new ToolItem(toolBar, SWT.SEPARATOR);
 		item = new ToolItem(toolBar, SWT.PUSH);
@@ -1690,13 +1666,10 @@ public class FileViewer {
 			cancelButton = new Button(shell, SWT.PUSH);
 			cancelButton.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_END | GridData.VERTICAL_ALIGN_FILL));
 			cancelButton.setText(getResourceString("progressDialog.cancelButton.text"));
-			cancelButton.addSelectionListener(new SelectionAdapter() {
-				@Override
-				public void widgetSelected(SelectionEvent e) {
-					isCancelled = true;
-					cancelButton.setEnabled(false);
-				}
-			});
+			cancelButton.addSelectionListener(widgetSelectedAdapter(e -> {
+				isCancelled = true;
+				cancelButton.setEnabled(false);
+			}));
 		}
 		/**
 		 * Sets the detail text to show the filename along with a string
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/layoutexample/Tab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/layoutexample/Tab.java
index 1bae1e7..20facd3 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/layoutexample/Tab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/layoutexample/Tab.java
@@ -11,6 +11,8 @@
 package org.eclipse.swt.examples.layoutexample;
 
 
+import static org.eclipse.swt.events.SelectionListener.widgetSelectedAdapter;
+
 import java.util.ArrayList;
 import java.util.List;
 
@@ -19,8 +21,6 @@ import org.eclipse.swt.custom.CCombo;
 import org.eclipse.swt.custom.SashForm;
 import org.eclipse.swt.custom.StyledText;
 import org.eclipse.swt.custom.TableEditor;
-import org.eclipse.swt.events.SelectionAdapter;
-import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.events.SelectionListener;
 import org.eclipse.swt.events.TraverseListener;
 import org.eclipse.swt.graphics.Font;
@@ -100,12 +100,7 @@ abstract class Tab {
 	final LayoutExample instance;
 
 	/* Listeners */
-	SelectionListener selectionListener = new SelectionAdapter () {
-		@Override
-		public void widgetSelected (SelectionEvent e) {
-			resetEditors ();
-		}
-	};
+	SelectionListener selectionListener = widgetSelectedAdapter(e -> resetEditors ());
 
 	TraverseListener traverseListener = e -> {
 		if (e.detail == SWT.TRAVERSE_RETURN) {
@@ -136,155 +131,125 @@ abstract class Tab {
 		toolBar.setLayoutData(new GridData(SWT.CENTER, SWT.CENTER, false, false));
 		add = new ToolItem(toolBar, SWT.DROP_DOWN);
 		add.setText(LayoutExample.getResourceString("Add"));
-		add.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				if (event.detail == SWT.ARROW) {
-					ToolItem item = (ToolItem)event.widget;
-					ToolBar bar = item.getParent ();
-					final Menu menu = new Menu (shell, SWT.POP_UP);
-					for (int i = 0; i < OPTIONS.length; i++) {
-						final MenuItem newItem = new MenuItem (menu, SWT.RADIO);
-						newItem.setText (OPTIONS [i]);
-						newItem.addSelectionListener (new SelectionAdapter () {
-							@Override
-							public void widgetSelected (SelectionEvent event) {
-								MenuItem menuItem = (MenuItem)event.widget;
-								if (menuItem.getSelection ()) {
-									Menu menu  = menuItem.getParent ();
-									prevSelected = menu.indexOf (menuItem);
-									String controlType = menuItem.getText ();
-									String name = controlType.toLowerCase () + String.valueOf (table.getItemCount ());
-									String [] insert = getInsertString (name, controlType);
-									if (insert != null) {
-										TableItem item = new TableItem (table, SWT.NONE);
-										item.setText (insert);
-										data.add (insert);
-									}
-									resetEditors ();
-								}
+		add.addSelectionListener (widgetSelectedAdapter(event -> {
+			if (event.detail == SWT.ARROW) {
+				ToolItem item = (ToolItem)event.widget;
+				ToolBar bar = item.getParent ();
+				final Menu menu = new Menu (shell, SWT.POP_UP);
+				for (int i = 0; i < OPTIONS.length; i++) {
+					final MenuItem newItem = new MenuItem (menu, SWT.RADIO);
+					newItem.setText (OPTIONS [i]);
+					newItem.addSelectionListener (widgetSelectedAdapter(e -> {
+						MenuItem menuItem = (MenuItem)e.widget;
+						if (menuItem.getSelection ()) {
+							Menu menuParent  = menuItem.getParent ();
+							prevSelected = menuParent.indexOf (menuItem);
+							String controlType = menuItem.getText ();
+							String name = controlType.toLowerCase () + String.valueOf (table.getItemCount ());
+							String [] insert = getInsertString (name, controlType);
+							if (insert != null) {
+								TableItem tableItem = new TableItem (table, SWT.NONE);
+								tableItem.setText (insert);
+								data.add (insert);
 							}
-						});
-						newItem.setSelection (i == prevSelected);
-					}
-					Point pt = display.map (bar, null, event.x, event.y);
-					menu.setLocation (pt.x, pt.y);
-					menu.setVisible (true);
-
-					while (menu != null && !menu.isDisposed () && menu.isVisible ()) {
-						if (!display.readAndDispatch ()) {
-							display.sleep ();
+							resetEditors ();
 						}
+					}));
+					newItem.setSelection (i == prevSelected);
+				}
+				Point pt = display.map (bar, null, event.x, event.y);
+				menu.setLocation (pt.x, pt.y);
+				menu.setVisible (true);
+
+				while (menu != null && !menu.isDisposed () && menu.isVisible ()) {
+					if (!display.readAndDispatch ()) {
+						display.sleep ();
 					}
-					menu.dispose ();
-				} else {
-					String controlType = OPTIONS [prevSelected];
-					String name = controlType.toLowerCase () + String.valueOf (table.getItemCount ());
-					String [] insert = getInsertString (name, controlType);
-					if (insert != null) {
-						TableItem item = new TableItem (table, 0);
-						item.setText (insert);
-						data.add (insert);
-					}
-					resetEditors ();
 				}
+				menu.dispose ();
+			} else {
+				String controlType = OPTIONS [prevSelected];
+				String name = controlType.toLowerCase () + String.valueOf (table.getItemCount ());
+				String [] insert = getInsertString (name, controlType);
+				if (insert != null) {
+					TableItem item = new TableItem (table, 0);
+					item.setText (insert);
+					data.add (insert);
+				}
+				resetEditors ();
 			}
-		});
+		}));
 
 		new ToolItem(toolBar,SWT.SEPARATOR);
 
 		delete = new ToolItem(toolBar, SWT.PUSH);
 		delete.setText (LayoutExample.getResourceString ("Delete"));
-		delete.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent e) {
-				resetEditors ();
-				int [] selected = table.getSelectionIndices ();
-				table.remove (selected);
-				/* Refresh the control indices of the table */
-				for (int i = 0; i < table.getItemCount(); i++) {
-					TableItem item = table.getItem (i);
-					item.setText (0, item.getText (0));
-				}
-				refreshLayoutComposite ();
-				layoutComposite.layout (true);
-				layoutGroup.layout (true);
+		delete.addSelectionListener (widgetSelectedAdapter(e -> {
+			resetEditors ();
+			int [] selected = table.getSelectionIndices ();
+			table.remove (selected);
+			/* Refresh the control indices of the table */
+			for (int i = 0; i < table.getItemCount(); i++) {
+				TableItem item = table.getItem (i);
+				item.setText (0, item.getText (0));
 			}
-		});
+			refreshLayoutComposite ();
+			layoutComposite.layout (true);
+			layoutGroup.layout (true);
+		}));
 
 		new ToolItem(toolBar,SWT.SEPARATOR);
 		clear = new ToolItem(toolBar, SWT.PUSH);
 		clear.setText (LayoutExample.getResourceString ("Clear"));
-		clear.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent e) {
-				resetEditors ();
-				children = layoutComposite.getChildren ();
-				for (Control child : children) {
-					child.dispose ();
-				}
-				table.removeAll ();
-				data.clear ();
-				children = new Control [0];
-				layoutGroup.layout (true);
+		clear.addSelectionListener (widgetSelectedAdapter(e -> {
+			resetEditors ();
+			children = layoutComposite.getChildren ();
+			for (Control child : children) {
+				child.dispose ();
 			}
-		});
+			table.removeAll ();
+			data.clear ();
+			children = new Control [0];
+			layoutGroup.layout (true);
+		}));
 		toolBar.pack();
 
 		new ToolItem (toolBar,SWT.SEPARATOR);
 		code = new ToolItem (toolBar, SWT.PUSH);
 		code.setText (LayoutExample.getResourceString ("Generate_Code"));
-		code.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent e) {
-				final Shell shell = new Shell();
-				shell.setText(LayoutExample.getResourceString("Generated_Code"));
-				shell.setLayout(new FillLayout());
-				final Text text = new Text(shell, SWT.BORDER | SWT.MULTI | SWT.V_SCROLL | SWT.H_SCROLL);
-				String layoutCode = generateCode().toString ();
-				if (layoutCode.length() == 0) return;
-				text.setText(layoutCode);
-
-				Menu bar = new Menu(shell, SWT.BAR);
-				shell.setMenuBar(bar);
-				MenuItem editItem = new MenuItem(bar, SWT.CASCADE);
-				editItem.setText(LayoutExample.getResourceString("Edit"));
-				Menu menu = new Menu(bar);
-				MenuItem select = new MenuItem(menu, SWT.PUSH);
-				select.setText(LayoutExample.getResourceString("Select_All"));
-				select.setAccelerator(SWT.MOD1 + 'A');
-				select.addSelectionListener(new SelectionAdapter() {
-					@Override
-					public void widgetSelected(SelectionEvent e) {
-						text.selectAll();
-					}
-				});
-				MenuItem copy = new MenuItem(menu, SWT.PUSH);
-				copy.setText(LayoutExample.getResourceString("Copy"));
-				copy.setAccelerator(SWT.MOD1 + 'C');
-				copy.addSelectionListener(new SelectionAdapter() {
-					@Override
-					public void widgetSelected(SelectionEvent e) {
-						text.copy();
-					}
-				});
-				MenuItem exit = new MenuItem(menu, SWT.PUSH);
-				exit.setText(LayoutExample.getResourceString("Exit"));
-				exit.addSelectionListener(new SelectionAdapter() {
-					@Override
-					public void widgetSelected(SelectionEvent e) {
-						shell.close();
-					}
-				});
-				editItem.setMenu(menu);
-
-				shell.pack();
-				shell.setSize(500, 600);
-				shell.open();
-				while(!shell.isDisposed())
-					if (!display.readAndDispatch()) display.sleep();
-			}
-		});
+		code.addSelectionListener(widgetSelectedAdapter(e -> {
+			final Shell shell = new Shell();
+			shell.setText(LayoutExample.getResourceString("Generated_Code"));
+			shell.setLayout(new FillLayout());
+			final Text text = new Text(shell, SWT.BORDER | SWT.MULTI | SWT.V_SCROLL | SWT.H_SCROLL);
+			String layoutCode = generateCode().toString ();
+			if (layoutCode.length() == 0) return;
+			text.setText(layoutCode);
+
+			Menu bar = new Menu(shell, SWT.BAR);
+			shell.setMenuBar(bar);
+			MenuItem editItem = new MenuItem(bar, SWT.CASCADE);
+			editItem.setText(LayoutExample.getResourceString("Edit"));
+			Menu menu = new Menu(bar);
+			MenuItem select = new MenuItem(menu, SWT.PUSH);
+			select.setText(LayoutExample.getResourceString("Select_All"));
+			select.setAccelerator(SWT.MOD1 + 'A');
+			select.addSelectionListener(widgetSelectedAdapter(event -> text.selectAll()));
+			MenuItem copy = new MenuItem(menu, SWT.PUSH);
+			copy.setText(LayoutExample.getResourceString("Copy"));
+			copy.setAccelerator(SWT.MOD1 + 'C');
+			copy.addSelectionListener(widgetSelectedAdapter(event -> text.copy()));
+			MenuItem exit = new MenuItem(menu, SWT.PUSH);
+			exit.setText(LayoutExample.getResourceString("Exit"));
+			exit.addSelectionListener(widgetSelectedAdapter(event -> shell.close()));
+			editItem.setMenu(menu);
+
+			shell.pack();
+			shell.setSize(500, 600);
+			shell.open();
+			while(!shell.isDisposed())
+				if (!display.readAndDispatch()) display.sleep();
+		}));
 
 		createChildWidgets();
 	}
@@ -360,23 +325,20 @@ abstract class Tab {
 		final Button preferredButton = new Button (controlGroup, SWT.CHECK);
 		preferredButton.setText (LayoutExample.getResourceString ("Preferred_Size"));
 		preferredButton.setSelection (false);
-		preferredButton.addSelectionListener (new SelectionAdapter () {
-			@Override
-			public void widgetSelected (SelectionEvent e) {
-				resetEditors ();
-				GridData data = (GridData)layoutComposite.getLayoutData();
-				if (preferredButton.getSelection ()) {
-					data.heightHint = data.widthHint = SWT.DEFAULT;
-					data.verticalAlignment = data.horizontalAlignment = 0;
-					data.grabExcessVerticalSpace = data.grabExcessHorizontalSpace = false;
-				} else {
-					data.verticalAlignment = data.horizontalAlignment = SWT.FILL;
-					data.grabExcessVerticalSpace = data.grabExcessHorizontalSpace = true;
-				}
-				layoutComposite.setLayoutData (data);
-				layoutGroup.layout (true);
+		preferredButton.addSelectionListener (widgetSelectedAdapter(e -> {
+			resetEditors ();
+			GridData data = (GridData)layoutComposite.getLayoutData();
+			if (preferredButton.getSelection ()) {
+				data.heightHint = data.widthHint = SWT.DEFAULT;
+				data.verticalAlignment = data.horizontalAlignment = 0;
+				data.grabExcessVerticalSpace = data.grabExcessHorizontalSpace = false;
+			} else {
+				data.verticalAlignment = data.horizontalAlignment = SWT.FILL;
+				data.grabExcessVerticalSpace = data.grabExcessHorizontalSpace = true;
 			}
-		});
+			layoutComposite.setLayoutData (data);
+			layoutGroup.layout (true);
+		}));
 		preferredButton.setLayoutData (new GridData (SWT.FILL, SWT.CENTER, true, false, 2, 1));
 		createControlWidgets ();
 	}
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/texteditor/TextEditor.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/texteditor/TextEditor.java
index 6086d6a..e058431 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/texteditor/TextEditor.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/texteditor/TextEditor.java
@@ -10,6 +10,8 @@
  *******************************************************************************/
 package org.eclipse.swt.examples.texteditor;
 
+import static org.eclipse.swt.events.SelectionListener.widgetSelectedAdapter;
+
 import java.io.BufferedReader;
 import java.io.FileInputStream;
 import java.io.FileWriter;
@@ -32,8 +34,7 @@ import org.eclipse.swt.events.ControlEvent;
 import org.eclipse.swt.events.MenuAdapter;
 import org.eclipse.swt.events.MenuEvent;
 import org.eclipse.swt.events.ModifyEvent;
-import org.eclipse.swt.events.SelectionAdapter;
-import org.eclipse.swt.events.SelectionEvent;
+import org.eclipse.swt.events.SelectionListener;
 import org.eclipse.swt.events.VerifyEvent;
 import org.eclipse.swt.graphics.Color;
 import org.eclipse.swt.graphics.Font;
@@ -235,39 +236,31 @@ public class TextEditor {
 
 		MenuItem openItem = new MenuItem(fileMenu, SWT.PUSH);
 		openItem.setText(getResourceString("Open_menuitem")); //$NON-NLS-1$
-		openItem.addSelectionListener(new SelectionAdapter () {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				FileDialog dialog = new FileDialog(shell, SWT.OPEN);
-				dialog.setFilterNames(new String [] {getResourceString("Text_Documents")}); //$NON-NLS-1$
-				dialog.setFilterExtensions (new String [] {"*.txt"}); //$NON-NLS-1$
-		        String name = dialog.open();
-		        if (name == null)  return;
-		        fileName = name;
-		        FileInputStream file = null;
-		        try {
-		        	file = new FileInputStream(name);
-		        	styledText.setText(openFile(file));
-		        } catch (IOException e) {
-		        	showError(getResourceString("Error"), e.getMessage()); //$NON-NLS-1$
-		        } finally {
-		        	try {
-		        		if (file != null) file.close();
-		        	} catch (IOException e) {
-		        		showError(getResourceString("Error"), e.getMessage()); //$NON-NLS-1$
-		        	}
-		        }
-			}
-		});
+		openItem.addSelectionListener(widgetSelectedAdapter(event -> {
+			FileDialog dialog = new FileDialog(shell, SWT.OPEN);
+			dialog.setFilterNames(new String [] {getResourceString("Text_Documents")}); //$NON-NLS-1$
+			dialog.setFilterExtensions (new String [] {"*.txt"}); //$NON-NLS-1$
+		    String name = dialog.open();
+		    if (name == null)  return;
+		    fileName = name;
+		    FileInputStream file = null;
+		    try {
+		    	file = new FileInputStream(name);
+		    	styledText.setText(openFile(file));
+		    } catch (IOException e) {
+		    	showError(getResourceString("Error"), e.getMessage()); //$NON-NLS-1$
+		    } finally {
+		    	try {
+		    		if (file != null) file.close();
+		    	} catch (IOException e) {
+		    		showError(getResourceString("Error"), e.getMessage()); //$NON-NLS-1$
+		    	}
+		    }
+		}));
 
 		final MenuItem saveItem = new MenuItem(fileMenu, SWT.PUSH);
 		saveItem.setText(getResourceString("Save_menuitem")); //$NON-NLS-1$
-		saveItem.addSelectionListener(new SelectionAdapter () {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				saveFile();
-			}
-		});
+		saveItem.addSelectionListener(widgetSelectedAdapter(event -> saveFile()));
 
 		fileMenu.addMenuListener(new MenuAdapter() {
 			@Override
@@ -278,31 +271,23 @@ public class TextEditor {
 
 		MenuItem saveAsItem = new MenuItem(fileMenu, SWT.PUSH);
 		saveAsItem.setText(getResourceString("SaveAs_menuitem")); //$NON-NLS-1$
-		saveAsItem.addSelectionListener(new SelectionAdapter () {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				FileDialog dialog = new FileDialog (shell, SWT.SAVE);
-				dialog.setFilterNames(new String [] {getResourceString("Text_Documents")}); //$NON-NLS-1$
-				dialog.setFilterExtensions(new String [] {"*.txt"}); //$NON-NLS-1$
-				if (fileName != null) dialog.setFileName(fileName);
-				String name = dialog.open();
-				if (name != null) {
-					fileName = name;
-					saveFile();
-				}
+		saveAsItem.addSelectionListener(widgetSelectedAdapter(event -> {
+			FileDialog dialog = new FileDialog (shell, SWT.SAVE);
+			dialog.setFilterNames(new String [] {getResourceString("Text_Documents")}); //$NON-NLS-1$
+			dialog.setFilterExtensions(new String [] {"*.txt"}); //$NON-NLS-1$
+			if (fileName != null) dialog.setFileName(fileName);
+			String name = dialog.open();
+			if (name != null) {
+				fileName = name;
+				saveFile();
 			}
-		});
+		}));
 
 		new MenuItem(fileMenu, SWT.SEPARATOR);
 
 		MenuItem exitItem = new MenuItem(fileMenu, SWT.PUSH);
 		exitItem.setText(getResourceString("Exit_menuitem")); //$NON-NLS-1$
-		exitItem.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				shell.dispose();
-			}
-		});
+		exitItem.addSelectionListener(widgetSelectedAdapter(event -> shell.dispose()));
 
 		MenuItem editItem = new MenuItem(menu, SWT.CASCADE);
 		final Menu editMenu = new Menu(shell, SWT.DROP_DOWN);
@@ -312,45 +297,25 @@ public class TextEditor {
 		cutItem.setText(getResourceString("Cut_menuitem")); //$NON-NLS-1$
 		cutItem.setImage(iCut);
 		cutItem.setAccelerator(SWT.MOD1 | 'x');
-		cutItem.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				styledText.cut();
-			}
-		});
+		cutItem.addSelectionListener(widgetSelectedAdapter(event -> styledText.cut()));
 
 		final MenuItem copyItem = new MenuItem(editMenu, SWT.PUSH);
 		copyItem.setText(getResourceString("Copy_menuitem")); //$NON-NLS-1$
 		copyItem.setImage(iCopy);
 		copyItem.setAccelerator(SWT.MOD1 | 'c');
-		copyItem.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				styledText.copy();
-			}
-		});
+		copyItem.addSelectionListener(widgetSelectedAdapter(event -> styledText.copy()));
 
 		MenuItem pasteItem = new MenuItem(editMenu, SWT.PUSH);
 		pasteItem.setText(getResourceString("Paste_menuitem")); //$NON-NLS-1$
 		pasteItem.setImage(iPaste);
 		pasteItem.setAccelerator(SWT.MOD1 | 'v');
-		pasteItem.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				styledText.paste();
-			}
-		});
+		pasteItem.addSelectionListener(widgetSelectedAdapter(event -> styledText.paste()));
 
 		new MenuItem(editMenu, SWT.SEPARATOR);
 		final MenuItem selectAllItem = new MenuItem(editMenu, SWT.PUSH);
 		selectAllItem.setText(getResourceString("SelectAll_menuitem")); //$NON-NLS-1$
 		selectAllItem.setAccelerator(SWT.MOD1 | 'a');
-		selectAllItem.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				styledText.selectAll();
-			}
-		});
+		selectAllItem.addSelectionListener(widgetSelectedAdapter(event -> styledText.selectAll()));
 
 		editMenu.addMenuListener(new MenuAdapter() {
 			@Override
@@ -364,51 +329,42 @@ public class TextEditor {
 
 		MenuItem wrapItem = new MenuItem(editMenu, SWT.CHECK);
 		wrapItem.setText(getResourceString("Wrap_menuitem")); //$NON-NLS-1$
-		wrapItem.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				MenuItem item = (MenuItem) event.widget;
-				boolean enabled = item.getSelection();
-				styledText.setWordWrap(enabled);
-				editMenu.getItem(6).setEnabled(enabled);
-				editMenu.getItem(8).setEnabled(enabled);
-				leftAlignmentItem.setEnabled(enabled);
-				centerAlignmentItem.setEnabled(enabled);
-				rightAlignmentItem.setEnabled(enabled);
-				justifyAlignmentItem.setEnabled(enabled);
-				blockSelectionItem.setEnabled(!enabled);
-			}
-		});
+		wrapItem.addSelectionListener(widgetSelectedAdapter(event -> {
+			MenuItem item = (MenuItem) event.widget;
+			boolean enabled = item.getSelection();
+			styledText.setWordWrap(enabled);
+			editMenu.getItem(6).setEnabled(enabled);
+			editMenu.getItem(8).setEnabled(enabled);
+			leftAlignmentItem.setEnabled(enabled);
+			centerAlignmentItem.setEnabled(enabled);
+			rightAlignmentItem.setEnabled(enabled);
+			justifyAlignmentItem.setEnabled(enabled);
+			blockSelectionItem.setEnabled(!enabled);
+		}));
 
 		MenuItem justifyItem = new MenuItem(editMenu, SWT.CHECK);
 		justifyItem.setText(getResourceString("Justify_menuitem")); //$NON-NLS-1$
-		justifyItem.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				MenuItem item = (MenuItem) event.widget;
-				styledText.setJustify(item.getSelection());
-				updateToolBar();
-			}
-		});
+		justifyItem.addSelectionListener(widgetSelectedAdapter(event -> {
+			MenuItem item = (MenuItem) event.widget;
+			styledText.setJustify(item.getSelection());
+			updateToolBar();
+		}));
 		justifyItem.setEnabled(false);
 
 		MenuItem setFontItem = new MenuItem(editMenu, SWT.PUSH);
 		setFontItem.setText(getResourceString("SetFont_menuitem")); //$NON-NLS-1$
-		setFontItem.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				FontDialog fontDialog = new FontDialog(shell);
-				fontDialog.setFontList(styledText.getFont().getFontData());
-				FontData data = fontDialog.open();
-				if (data != null) {
-					Font newFont = new Font(display, data);
-					styledText.setFont(newFont);
-					if (font != null) font.dispose();
-					font = newFont;
-					updateToolBar();
-				}
+		setFontItem.addSelectionListener(widgetSelectedAdapter(event -> {
+			FontDialog fontDialog = new FontDialog(shell);
+			fontDialog.setFontList(styledText.getFont().getFontData());
+			FontData data = fontDialog.open();
+			if (data != null) {
+				Font newFont = new Font(display, data);
+				styledText.setFont(newFont);
+				if (font != null) font.dispose();
+				font = newFont;
+				updateToolBar();
 			}
-		});
+		}));
 
 		MenuItem alignmentItem = new MenuItem(editMenu, SWT.CASCADE);
 		alignmentItem.setText(getResourceString("Alignment_menuitem")); //$NON-NLS-1$
@@ -417,34 +373,25 @@ public class TextEditor {
 		final MenuItem leftAlignmentItem = new MenuItem(alignmentMenu, SWT.RADIO);
 		leftAlignmentItem.setText(getResourceString("Left_menuitem")); //$NON-NLS-1$
 		leftAlignmentItem.setSelection(true);
-		leftAlignmentItem.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				styledText.setAlignment(SWT.LEFT);
-				updateToolBar();
-			}
-		});
+		leftAlignmentItem.addSelectionListener(widgetSelectedAdapter(event -> {
+			styledText.setAlignment(SWT.LEFT);
+			updateToolBar();
+		}));
 		alignmentItem.setEnabled(false);
 
 		final MenuItem centerAlignmentItem = new MenuItem(alignmentMenu, SWT.RADIO);
 		centerAlignmentItem.setText(getResourceString("Center_menuitem")); //$NON-NLS-1$
-		centerAlignmentItem.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				styledText.setAlignment(SWT.CENTER);
-				updateToolBar();
-			}
-		});
+		centerAlignmentItem.addSelectionListener(widgetSelectedAdapter(event -> {
+			styledText.setAlignment(SWT.CENTER);
+			updateToolBar();
+		}));
 
 		MenuItem rightAlignmentItem = new MenuItem(alignmentMenu, SWT.RADIO);
 		rightAlignmentItem.setText(getResourceString("Right_menuitem")); //$NON-NLS-1$
-		rightAlignmentItem.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				styledText.setAlignment(SWT.RIGHT);
-				updateToolBar();
-			}
-		});
+		rightAlignmentItem.addSelectionListener(widgetSelectedAdapter(event -> {
+			styledText.setAlignment(SWT.RIGHT);
+			updateToolBar();
+		}));
 
 		MenuItem editOrientationItem = new MenuItem(editMenu, SWT.CASCADE);
 		editOrientationItem.setText(getResourceString("Orientation_menuitem")); //$NON-NLS-1$
@@ -453,22 +400,12 @@ public class TextEditor {
 
 		MenuItem leftToRightItem = new MenuItem(editOrientationMenu, SWT.RADIO);
 		leftToRightItem.setText(getResourceString("LeftToRight_menuitem")); //$NON-NLS-1$
-		leftToRightItem.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event){
-				styledText.setOrientation(SWT.LEFT_TO_RIGHT);
-			}
-		});
+		leftToRightItem.addSelectionListener(widgetSelectedAdapter(event -> styledText.setOrientation(SWT.LEFT_TO_RIGHT)));
 		leftToRightItem.setSelection(true);
 
 		MenuItem rightToLeftItem = new MenuItem(editOrientationMenu, SWT.RADIO);
 		rightToLeftItem.setText(getResourceString("RightToLeft_menuitem")); //$NON-NLS-1$
-		rightToLeftItem.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				styledText.setOrientation(SWT.RIGHT_TO_LEFT);
-			}
-		});
+		rightToLeftItem.addSelectionListener(widgetSelectedAdapter(event -> styledText.setOrientation(SWT.RIGHT_TO_LEFT)));
 
 		new MenuItem(editMenu, SWT.SEPARATOR);
 		MenuItem insertObjectItem = new MenuItem(editMenu, SWT.CASCADE);
@@ -486,42 +423,33 @@ public class TextEditor {
 		MenuItem comboItem = new MenuItem(controlChoice, SWT.PUSH);
 		comboItem.setText(getResourceString("Combo_menuitem")); //$NON-NLS-1$
 
-		buttonItem.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				Button button = new Button(styledText, SWT.PUSH);
-				button.setText(getResourceString("Button_menuitem")); //$NON-NLS-1$
-				addControl(button);
-			}
-		});
+		buttonItem.addSelectionListener(widgetSelectedAdapter(event -> {
+			Button button = new Button(styledText, SWT.PUSH);
+			button.setText(getResourceString("Button_menuitem")); //$NON-NLS-1$
+			addControl(button);
+		}));
 
-		comboItem.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				Combo combo = new Combo(styledText, SWT.NONE);
-				combo.setText(getResourceString("Combo_menuitem")); //$NON-NLS-1$
-				addControl(combo);
-			}
-		});
+		comboItem.addSelectionListener(widgetSelectedAdapter(event -> {
+			Combo combo = new Combo(styledText, SWT.NONE);
+			combo.setText(getResourceString("Combo_menuitem")); //$NON-NLS-1$
+			addControl(combo);
+		}));
 
 		MenuItem insertImageItem = new MenuItem(insertObjectMenu, SWT.PUSH);
 		insertImageItem.setText(getResourceString("Image_menuitem")); //$NON-NLS-1$
 
-		insertImageItem.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				FileDialog fileDialog = new FileDialog(shell, SWT.OPEN);
-				String fileName = fileDialog.open();
-				if (fileName != null) {
-					try {
-						Image image = new Image(display, fileName);
-						addImage(image);
-					} catch (Exception e) {
-						showError(getResourceString("Bad_image"), e.getMessage()); //$NON-NLS-1$
-					}
+		insertImageItem.addSelectionListener(widgetSelectedAdapter(event -> {
+			FileDialog fileDialog = new FileDialog(shell, SWT.OPEN);
+			String fileName = fileDialog.open();
+			if (fileName != null) {
+				try {
+					Image image = new Image(display, fileName);
+					addImage(image);
+				} catch (Exception e) {
+					showError(getResourceString("Bad_image"), e.getMessage()); //$NON-NLS-1$
 				}
 			}
-		});
+		}));
 
 		if (SAMPLE_TEXT) {
 			new MenuItem(editMenu, SWT.SEPARATOR);
@@ -529,13 +457,10 @@ public class TextEditor {
 			loadProfileItem.setText(getResourceString("LoadProfile_menuitem")); //$NON-NLS-1$
 			Menu loadProfileMenu = new Menu(shell, SWT.DROP_DOWN);
 			loadProfileItem.setMenu(loadProfileMenu);
-			SelectionAdapter adapter = new SelectionAdapter() {
-				@Override
-				public void widgetSelected(SelectionEvent event) {
-					int profile = Integer.parseInt((String) event.widget.getData());
-					loadProfile(profile);
-				}
-			};
+			SelectionListener adapter = widgetSelectedAdapter(event -> {
+				int profile = Integer.parseInt((String) event.widget.getData());
+				loadProfile(profile);
+			});
 
 			MenuItem profileItem = new MenuItem(loadProfileMenu, SWT.PUSH);
 			profileItem.setText(getResourceString("Profile1_menuitem")); //$NON-NLS-1$
@@ -592,289 +517,226 @@ public class TextEditor {
 		boldControl = new ToolItem(styleToolBar, SWT.CHECK);
 		boldControl.setImage(iBold);
 		boldControl.setToolTipText(getResourceString("Bold")); //$NON-NLS-1$
-		boldControl.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				setStyle(BOLD);
-			}
-		});
+		boldControl.addSelectionListener(widgetSelectedAdapter(event -> setStyle(BOLD)));
 
 		italicControl = new ToolItem(styleToolBar, SWT.CHECK);
 		italicControl.setImage(iItalic);
 		italicControl.setToolTipText(getResourceString("Italic")); //$NON-NLS-1$
-		italicControl.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				setStyle(ITALIC);
-			}
-		});
+		italicControl.addSelectionListener(widgetSelectedAdapter(event -> setStyle(ITALIC)));
 
 		final Menu underlineMenu = new Menu(shell, SWT.POP_UP);
 		underlineSingleItem = new MenuItem(underlineMenu, SWT.RADIO);
 		underlineSingleItem.setText(getResourceString("Single_menuitem")); //$NON-NLS-1$
-		underlineSingleItem.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				if (underlineSingleItem.getSelection()) {
-					setStyle(UNDERLINE_SINGLE);
-				}
+		underlineSingleItem.addSelectionListener(widgetSelectedAdapter(event -> {
+			if (underlineSingleItem.getSelection()) {
+				setStyle(UNDERLINE_SINGLE);
 			}
-		});
+		}));
 		underlineSingleItem.setSelection(true);
 
 		underlineDoubleItem = new MenuItem(underlineMenu, SWT.RADIO);
 		underlineDoubleItem.setText(getResourceString("Double_menuitem")); //$NON-NLS-1$
-		underlineDoubleItem.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				if (underlineDoubleItem.getSelection()) {
-					setStyle(UNDERLINE_DOUBLE);
-				}
+		underlineDoubleItem.addSelectionListener(widgetSelectedAdapter(event -> {
+			if (underlineDoubleItem.getSelection()) {
+				setStyle(UNDERLINE_DOUBLE);
 			}
-		});
+		}));
 
 		underlineSquiggleItem = new MenuItem(underlineMenu, SWT.RADIO);
 		underlineSquiggleItem.setText(getResourceString("Squiggle_menuitem")); //$NON-NLS-1$
-		underlineSquiggleItem.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				if (underlineSquiggleItem.getSelection()) {
-					setStyle(UNDERLINE_SQUIGGLE);
-				}
+		underlineSquiggleItem.addSelectionListener(widgetSelectedAdapter(event -> {
+			if (underlineSquiggleItem.getSelection()) {
+				setStyle(UNDERLINE_SQUIGGLE);
 			}
-		});
+		}));
 
 		underlineErrorItem = new MenuItem(underlineMenu, SWT.RADIO);
 		underlineErrorItem.setText(getResourceString("Error_menuitem")); //$NON-NLS-1$
-		underlineErrorItem.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				if (underlineErrorItem.getSelection()) {
-					setStyle(UNDERLINE_ERROR);
-				}
+		underlineErrorItem.addSelectionListener(widgetSelectedAdapter(event -> {
+			if (underlineErrorItem.getSelection()) {
+				setStyle(UNDERLINE_ERROR);
 			}
-		});
+		}));
 
 		MenuItem underlineColorItem = new MenuItem(underlineMenu, SWT.PUSH);
 		underlineColorItem.setText(getResourceString("Color_menuitem")); //$NON-NLS-1$
-		underlineColorItem.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				ColorDialog dialog = new ColorDialog(shell);
-				RGB rgb = underlineColor != null ? underlineColor.getRGB() : null;
-				dialog.setRGB(rgb);
-				RGB newRgb = dialog.open();
-				if (newRgb != null) {
-					if (!newRgb.equals(rgb)) {
-						disposeResource(underlineColor);
-						underlineColor = new Color(display, newRgb);
-					}
-					if (underlineSingleItem.getSelection()) setStyle(UNDERLINE_SINGLE);
-					else if (underlineDoubleItem.getSelection()) setStyle(UNDERLINE_DOUBLE);
-					else if (underlineErrorItem.getSelection()) setStyle(UNDERLINE_ERROR);
-					else if (underlineSquiggleItem.getSelection()) setStyle(UNDERLINE_SQUIGGLE);
+		underlineColorItem.addSelectionListener(widgetSelectedAdapter(event -> {
+			ColorDialog dialog = new ColorDialog(shell);
+			RGB rgb = underlineColor != null ? underlineColor.getRGB() : null;
+			dialog.setRGB(rgb);
+			RGB newRgb = dialog.open();
+			if (newRgb != null) {
+				if (!newRgb.equals(rgb)) {
+					disposeResource(underlineColor);
+					underlineColor = new Color(display, newRgb);
 				}
+				if (underlineSingleItem.getSelection()) setStyle(UNDERLINE_SINGLE);
+				else if (underlineDoubleItem.getSelection()) setStyle(UNDERLINE_DOUBLE);
+				else if (underlineErrorItem.getSelection()) setStyle(UNDERLINE_ERROR);
+				else if (underlineSquiggleItem.getSelection()) setStyle(UNDERLINE_SQUIGGLE);
 			}
-		});
+		}));
 
 		final ToolItem underlineControl = new ToolItem(styleToolBar, SWT.DROP_DOWN);
 		underlineControl.setImage(iUnderline);
 		underlineControl.setToolTipText(getResourceString("Underline")); //$NON-NLS-1$
-		underlineControl.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				if (event.detail == SWT.ARROW) {
-					Rectangle rect = underlineControl.getBounds();
-					Point pt = new Point(rect.x, rect.y + rect.height);
-					underlineMenu.setLocation(display.map(underlineControl.getParent(), null, pt));
-					underlineMenu.setVisible(true);
-				} else {
-					if (underlineSingleItem.getSelection()) setStyle(UNDERLINE_SINGLE);
-					else if (underlineDoubleItem.getSelection()) setStyle(UNDERLINE_DOUBLE);
-					else if (underlineErrorItem.getSelection()) setStyle(UNDERLINE_ERROR);
-					else if (underlineSquiggleItem.getSelection()) setStyle(UNDERLINE_SQUIGGLE);
-				}
+		underlineControl.addSelectionListener(widgetSelectedAdapter(event -> {
+			if (event.detail == SWT.ARROW) {
+				Rectangle rect = underlineControl.getBounds();
+				Point pt = new Point(rect.x, rect.y + rect.height);
+				underlineMenu.setLocation(display.map(underlineControl.getParent(), null, pt));
+				underlineMenu.setVisible(true);
+			} else {
+				if (underlineSingleItem.getSelection()) setStyle(UNDERLINE_SINGLE);
+				else if (underlineDoubleItem.getSelection()) setStyle(UNDERLINE_DOUBLE);
+				else if (underlineErrorItem.getSelection()) setStyle(UNDERLINE_ERROR);
+				else if (underlineSquiggleItem.getSelection()) setStyle(UNDERLINE_SQUIGGLE);
 			}
-		});
+		}));
 
 		ToolItem strikeoutControl = new ToolItem(styleToolBar, SWT.DROP_DOWN);
 		strikeoutControl.setImage(iStrikeout);
 		strikeoutControl.setToolTipText(getResourceString("Strikeout")); //$NON-NLS-1$
-		strikeoutControl.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				if (event.detail == SWT.ARROW) {
-					ColorDialog dialog = new ColorDialog(shell);
-					RGB rgb = strikeoutColor != null ? strikeoutColor.getRGB() : null;
-					dialog.setRGB(rgb);
-					RGB newRgb = dialog.open();
-					if (newRgb == null) return;
-					if (!newRgb.equals(rgb)) {
-						disposeResource(strikeoutColor);
-						strikeoutColor = new Color(display, newRgb);
-					}
+		strikeoutControl.addSelectionListener(widgetSelectedAdapter(event -> {
+			if (event.detail == SWT.ARROW) {
+				ColorDialog dialog = new ColorDialog(shell);
+				RGB rgb = strikeoutColor != null ? strikeoutColor.getRGB() : null;
+				dialog.setRGB(rgb);
+				RGB newRgb = dialog.open();
+				if (newRgb == null) return;
+				if (!newRgb.equals(rgb)) {
+					disposeResource(strikeoutColor);
+					strikeoutColor = new Color(display, newRgb);
 				}
-				setStyle(STRIKEOUT);
 			}
-		});
+			setStyle(STRIKEOUT);
+		}));
 
 		final Menu borderMenu = new Menu(shell, SWT.POP_UP);
 		borderSolidItem = new MenuItem(borderMenu, SWT.RADIO);
 		borderSolidItem.setText(getResourceString("Solid")); //$NON-NLS-1$
-		borderSolidItem.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event){
-				if (borderSolidItem.getSelection()) {
-					setStyle(BORDER_SOLID);
-				}
+		borderSolidItem.addSelectionListener(widgetSelectedAdapter(event -> {
+			if (borderSolidItem.getSelection()) {
+				setStyle(BORDER_SOLID);
 			}
-		});
+		}));
 		borderSolidItem.setSelection(true);
 
 		borderDashItem = new MenuItem(borderMenu, SWT.RADIO);
 		borderDashItem.setText(getResourceString("Dash")); //$NON-NLS-1$
-		borderDashItem.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event){
-				if (borderDashItem.getSelection()) {
-					setStyle(BORDER_DASH);
-				}
+		borderDashItem.addSelectionListener(widgetSelectedAdapter(event -> {
+			if (borderDashItem.getSelection()) {
+				setStyle(BORDER_DASH);
 			}
-		});
+		}));
 
 		borderDotItem = new MenuItem(borderMenu, SWT.RADIO);
 		borderDotItem.setText(getResourceString("Dot")); //$NON-NLS-1$
-		borderDotItem.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event){
-				if (borderDotItem.getSelection()) {
-					setStyle(BORDER_DOT);
-				}
+		borderDotItem.addSelectionListener(widgetSelectedAdapter(event -> {
+			if (borderDotItem.getSelection()) {
+				setStyle(BORDER_DOT);
 			}
-		});
+		}));
 
 		MenuItem borderColorItem = new MenuItem(borderMenu, SWT.PUSH);
 		borderColorItem.setText(getResourceString("Color_menuitem")); //$NON-NLS-1$
-		borderColorItem.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event){
-				ColorDialog dialog = new ColorDialog(shell);
-				RGB rgb = borderColor != null ? borderColor.getRGB() : null;
-				dialog.setRGB(rgb);
-				RGB newRgb = dialog.open();
-				if (newRgb != null) {
-					if (!newRgb.equals(rgb)) {
-						disposeResource(borderColor);
-						borderColor = new Color(display, newRgb);
-					}
-					if (borderDashItem.getSelection()) setStyle(BORDER_DASH);
-					else if (borderDotItem.getSelection()) setStyle(BORDER_DOT);
-					else if (borderSolidItem.getSelection()) setStyle(BORDER_SOLID);
+		borderColorItem.addSelectionListener(widgetSelectedAdapter(event -> {
+			ColorDialog dialog = new ColorDialog(shell);
+			RGB rgb = borderColor != null ? borderColor.getRGB() : null;
+			dialog.setRGB(rgb);
+			RGB newRgb = dialog.open();
+			if (newRgb != null) {
+				if (!newRgb.equals(rgb)) {
+					disposeResource(borderColor);
+					borderColor = new Color(display, newRgb);
 				}
+				if (borderDashItem.getSelection()) setStyle(BORDER_DASH);
+				else if (borderDotItem.getSelection()) setStyle(BORDER_DOT);
+				else if (borderSolidItem.getSelection()) setStyle(BORDER_SOLID);
 			}
-		});
+		}));
 
 		final ToolItem borderControl = new ToolItem(styleToolBar, SWT.DROP_DOWN);
 		borderControl.setImage(iBorderStyle);
 		borderControl.setToolTipText(getResourceString("Box")); //$NON-NLS-1$
-		borderControl.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				if (event.detail == SWT.ARROW) {
-					Rectangle rect = borderControl.getBounds();
-					Point pt = new Point(rect.x, rect.y + rect.height);
-					borderMenu.setLocation(display.map(borderControl.getParent(), null, pt));
-					borderMenu.setVisible(true);
-				} else {
-					if (borderDashItem.getSelection()) setStyle(BORDER_DASH);
-					else if (borderDotItem.getSelection()) setStyle(BORDER_DOT);
-					else if (borderSolidItem.getSelection()) setStyle(BORDER_SOLID);
-				}
+		borderControl.addSelectionListener(widgetSelectedAdapter(event -> {
+			if (event.detail == SWT.ARROW) {
+				Rectangle rect = borderControl.getBounds();
+				Point pt = new Point(rect.x, rect.y + rect.height);
+				borderMenu.setLocation(display.map(borderControl.getParent(), null, pt));
+				borderMenu.setVisible(true);
+			} else {
+				if (borderDashItem.getSelection()) setStyle(BORDER_DASH);
+				else if (borderDotItem.getSelection()) setStyle(BORDER_DOT);
+				else if (borderSolidItem.getSelection()) setStyle(BORDER_SOLID);
 			}
-		});
+		}));
 
 		ToolItem foregroundItem = new ToolItem(styleToolBar, SWT.DROP_DOWN);
 		foregroundItem.setImage(iTextForeground);
 		foregroundItem.setToolTipText(getResourceString("TextForeground")); //$NON-NLS-1$
-		foregroundItem.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				if (event.detail == SWT.ARROW || textForeground == null) {
-					ColorDialog dialog = new ColorDialog(shell);
-					RGB rgb = textForeground != null ? textForeground.getRGB() : null;
-					dialog.setRGB(rgb);
-					RGB newRgb = dialog.open();
-					if (newRgb == null) return;
-					if (!newRgb.equals(rgb)) {
-						disposeResource(textForeground);
-						textForeground = new Color(display, newRgb);
-					}
+		foregroundItem.addSelectionListener(widgetSelectedAdapter(event -> {
+			if (event.detail == SWT.ARROW || textForeground == null) {
+				ColorDialog dialog = new ColorDialog(shell);
+				RGB rgb = textForeground != null ? textForeground.getRGB() : null;
+				dialog.setRGB(rgb);
+				RGB newRgb = dialog.open();
+				if (newRgb == null) return;
+				if (!newRgb.equals(rgb)) {
+					disposeResource(textForeground);
+					textForeground = new Color(display, newRgb);
 				}
-				setStyle(FOREGROUND);
 			}
-		});
+			setStyle(FOREGROUND);
+		}));
 
 		ToolItem backgroundItem = new ToolItem(styleToolBar, SWT.DROP_DOWN);
 		backgroundItem.setImage(iTextBackground);
 		backgroundItem.setToolTipText(getResourceString("TextBackground")); //$NON-NLS-1$
-		backgroundItem.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				if (event.detail == SWT.ARROW || textBackground == null) {
-					ColorDialog dialog = new ColorDialog(shell);
-					RGB rgb = textBackground != null ? textBackground.getRGB() : null;
-					dialog.setRGB(rgb);
-					RGB newRgb = dialog.open();
-					if (newRgb == null) return;
-					if (!newRgb.equals(rgb)) {
-						disposeResource(textBackground);
-						textBackground = new Color(display, newRgb);
-					}
+		backgroundItem.addSelectionListener(widgetSelectedAdapter(event -> {
+			if (event.detail == SWT.ARROW || textBackground == null) {
+				ColorDialog dialog = new ColorDialog(shell);
+				RGB rgb = textBackground != null ? textBackground.getRGB() : null;
+				dialog.setRGB(rgb);
+				RGB newRgb = dialog.open();
+				if (newRgb == null) return;
+				if (!newRgb.equals(rgb)) {
+					disposeResource(textBackground);
+					textBackground = new Color(display, newRgb);
 				}
-				setStyle(BACKGROUND);
 			}
-		});
+			setStyle(BACKGROUND);
+		}));
 
 		ToolItem baselineUpItem = new ToolItem(styleToolBar, SWT.PUSH);
 		baselineUpItem.setImage(iBaselineUp);
 		String tooltip = "IncreaseFont"; //$NON-NLS-1$
 		if (USE_BASELINE) tooltip = "IncreaseBaseline"; //$NON-NLS-1$
 		baselineUpItem.setToolTipText(getResourceString(tooltip));
-		baselineUpItem.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				if (USE_BASELINE) {
-					setStyle(BASELINE_UP);
-				} else {
-					adjustFontSize(1);
-				}
+		baselineUpItem.addSelectionListener(widgetSelectedAdapter(event -> {
+			if (USE_BASELINE) {
+				setStyle(BASELINE_UP);
+			} else {
+				adjustFontSize(1);
 			}
-		});
+		}));
 
 		ToolItem baselineDownItem = new ToolItem(styleToolBar, SWT.PUSH);
 		baselineDownItem.setImage(iBaselineDown);
 		tooltip = "DecreaseFont"; //$NON-NLS-1$
 		if (USE_BASELINE) tooltip = "DecreaseBaseline"; //$NON-NLS-1$
 		baselineDownItem.setToolTipText(getResourceString(tooltip));
-		baselineDownItem.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				if (USE_BASELINE) {
-					setStyle(BASELINE_DOWN);
-				} else {
-					adjustFontSize(-1);
-				}
+		baselineDownItem.addSelectionListener(widgetSelectedAdapter(event -> {
+			if (USE_BASELINE) {
+				setStyle(BASELINE_DOWN);
+			} else {
+				adjustFontSize(-1);
 			}
-		});
+		}));
 		ToolItem linkItem = new ToolItem(styleToolBar, SWT.PUSH);
 		linkItem.setImage(iLink);
 		linkItem.setToolTipText(getResourceString("Link")); //$NON-NLS-1$
-		linkItem.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				setLink();
-			}
-		});
+		linkItem.addSelectionListener(widgetSelectedAdapter(event -> setLink()));
 
 		CoolItem coolItem = new CoolItem(coolBar, SWT.NONE);
 		coolItem.setControl(styleToolBar);
@@ -889,16 +751,13 @@ public class TextEditor {
 		fontSizeControl = new Combo(composite, SWT.DROP_DOWN | SWT.READ_ONLY);
 		fontSizeControl.setItems(FONT_SIZES);
 		fontSizeControl.setVisibleItemCount(8);
-		SelectionAdapter adapter = new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				String name = fontNameControl.getText();
-				int size = Integer.parseInt(fontSizeControl.getText());
-				disposeResource(textFont);
-				textFont = new Font(display, name, size, SWT.NORMAL);
-				setStyle(FONT);
-			}
-		};
+		SelectionListener adapter = widgetSelectedAdapter(event -> {
+			String name = fontNameControl.getText();
+			int size = Integer.parseInt(fontSizeControl.getText());
+			disposeResource(textFont);
+			textFont = new Font(display, name, size, SWT.NORMAL);
+			setStyle(FONT);
+		});
 		fontSizeControl.addSelectionListener(adapter);
 		fontNameControl.addSelectionListener(adapter);
 		coolItem = new CoolItem(coolBar, SWT.NONE);
@@ -908,88 +767,62 @@ public class TextEditor {
 		blockSelectionItem = new ToolItem(alignmentToolBar, SWT.CHECK);
 		blockSelectionItem.setImage(iBlockSelection);
 		blockSelectionItem.setToolTipText(getResourceString("BlockSelection")); //$NON-NLS-1$
-		blockSelectionItem.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				styledText.invokeAction(ST.TOGGLE_BLOCKSELECTION);
-			}
-		});
+		blockSelectionItem.addSelectionListener(widgetSelectedAdapter(event -> styledText.invokeAction(ST.TOGGLE_BLOCKSELECTION)));
 
 		leftAlignmentItem = new ToolItem(alignmentToolBar, SWT.RADIO);
 		leftAlignmentItem.setImage(iLeftAlignment);
 		leftAlignmentItem.setToolTipText(getResourceString("AlignLeft")); //$NON-NLS-1$
 		leftAlignmentItem.setSelection(true);
-		leftAlignmentItem.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				Point selection = styledText.getSelection();
-				int lineStart = styledText.getLineAtOffset(selection.x);
-				int lineEnd = styledText.getLineAtOffset(selection.y);
-				styledText.setLineAlignment(lineStart, lineEnd - lineStart + 1,	SWT.LEFT);
-			}
-		});
+		leftAlignmentItem.addSelectionListener(widgetSelectedAdapter(event -> {
+			Point selection = styledText.getSelection();
+			int lineStart = styledText.getLineAtOffset(selection.x);
+			int lineEnd = styledText.getLineAtOffset(selection.y);
+			styledText.setLineAlignment(lineStart, lineEnd - lineStart + 1,	SWT.LEFT);
+		}));
 		leftAlignmentItem.setEnabled(false);
 
 		centerAlignmentItem = new ToolItem(alignmentToolBar, SWT.RADIO);
 		centerAlignmentItem.setImage(iCenterAlignment);
 		centerAlignmentItem.setToolTipText(getResourceString("Center_menuitem")); //$NON-NLS-1$
-		centerAlignmentItem.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				Point selection = styledText.getSelection();
-				int lineStart = styledText.getLineAtOffset(selection.x);
-				int lineEnd = styledText.getLineAtOffset(selection.y);
-				styledText.setLineAlignment(lineStart, lineEnd - lineStart + 1, SWT.CENTER);
-			}
-		});
+		centerAlignmentItem.addSelectionListener(widgetSelectedAdapter(event -> {
+			Point selection = styledText.getSelection();
+			int lineStart = styledText.getLineAtOffset(selection.x);
+			int lineEnd = styledText.getLineAtOffset(selection.y);
+			styledText.setLineAlignment(lineStart, lineEnd - lineStart + 1, SWT.CENTER);
+		}));
 		centerAlignmentItem.setEnabled(false);
 
 		rightAlignmentItem = new ToolItem(alignmentToolBar, SWT.RADIO);
 		rightAlignmentItem.setImage(iRightAlignment);
 		rightAlignmentItem.setToolTipText(getResourceString("AlignRight")); //$NON-NLS-1$
-		rightAlignmentItem.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				Point selection = styledText.getSelection();
-				int lineStart = styledText.getLineAtOffset(selection.x);
-				int lineEnd = styledText.getLineAtOffset(selection.y);
-				styledText.setLineAlignment(lineStart, lineEnd - lineStart + 1,	SWT.RIGHT);
-			}
-		});
+		rightAlignmentItem.addSelectionListener(widgetSelectedAdapter(event -> {
+			Point selection = styledText.getSelection();
+			int lineStart = styledText.getLineAtOffset(selection.x);
+			int lineEnd = styledText.getLineAtOffset(selection.y);
+			styledText.setLineAlignment(lineStart, lineEnd - lineStart + 1,	SWT.RIGHT);
+		}));
 		rightAlignmentItem.setEnabled(false);
 
 		justifyAlignmentItem = new ToolItem(alignmentToolBar, SWT.CHECK);
 		justifyAlignmentItem.setImage(iJustifyAlignment);
 		justifyAlignmentItem.setToolTipText(getResourceString("Justify")); //$NON-NLS-1$
-		justifyAlignmentItem.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				Point selection = styledText.getSelection();
-				int lineStart = styledText.getLineAtOffset(selection.x);
-				int lineEnd = styledText.getLineAtOffset(selection.y);
-				styledText.setLineJustify(lineStart, lineEnd - lineStart + 1, justifyAlignmentItem.getSelection());
-			}
-		});
+		justifyAlignmentItem.addSelectionListener(widgetSelectedAdapter(event -> {
+			Point selection = styledText.getSelection();
+			int lineStart = styledText.getLineAtOffset(selection.x);
+			int lineEnd = styledText.getLineAtOffset(selection.y);
+			styledText.setLineJustify(lineStart, lineEnd - lineStart + 1, justifyAlignmentItem.getSelection());
+		}));
 		justifyAlignmentItem.setEnabled(false);
 
 		ToolItem bulletListItem = new ToolItem(alignmentToolBar, SWT.PUSH);
 		bulletListItem.setImage(iBulletList);
 		bulletListItem.setToolTipText(getResourceString("BulletList")); //$NON-NLS-1$
-		bulletListItem.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				setBullet(ST.BULLET_DOT);}
-		});
+		bulletListItem.addSelectionListener(widgetSelectedAdapter(event -> setBullet(ST.BULLET_DOT)));
 
 		ToolItem numberedListItem = new ToolItem(alignmentToolBar, SWT.PUSH);
 		numberedListItem.setImage(iNumberedList);
 		numberedListItem.setToolTipText(getResourceString("NumberedList")); //$NON-NLS-1$
-		numberedListItem.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				setBullet(ST.BULLET_NUMBER | ST.BULLET_TEXT);
-			}
-		});
+		numberedListItem.addSelectionListener(widgetSelectedAdapter(event -> setBullet(ST.BULLET_NUMBER | ST.BULLET_TEXT)));
 
 		coolItem = new CoolItem(coolBar, SWT.NONE);
 		coolItem.setControl(alignmentToolBar);
@@ -1000,23 +833,17 @@ public class TextEditor {
 		Label label = new Label(composite, SWT.NONE);
 		label.setText(getResourceString("Indent")); //$NON-NLS-1$
 		Spinner indent = new Spinner(composite, SWT.BORDER);
-		indent.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				Spinner spinner = (Spinner) event.widget;
-				styledText.setIndent(spinner.getSelection());
-			}
-		});
+		indent.addSelectionListener(widgetSelectedAdapter(event -> {
+			Spinner spinner = (Spinner) event.widget;
+			styledText.setIndent(spinner.getSelection());
+		}));
 		label = new Label(composite, SWT.NONE);
 		label.setText(getResourceString("Spacing")); //$NON-NLS-1$
 		Spinner spacing = new Spinner(composite, SWT.BORDER);
-		spacing.addSelectionListener(new SelectionAdapter() {
-			@Override
-			public void widgetSelected(SelectionEvent event) {
-				Spinner spinner = (Spinner) event.widget;
-				styledText.setLineSpacing(spinner.getSelection());
-			}
-		});
+		spacing.addSelectionListener(widgetSelectedAdapter(event -> {
+			Spinner spinner = (Spinner) event.widget;
+			styledText.setLineSpacing(spinner.getSelection());
+		}));
 
 		coolItem = new CoolItem(coolBar, SWT.NONE);
 		coolItem.setControl(composite);
@@ -1319,7 +1146,7 @@ public class TextEditor {
 	Image loadImage(Display display, String fileName) {
 		Image image = null;
 		try {
-			InputStream sourceStream = getClass().getResourceAsStream(fileName + ".ico");  //$NON-NLS-1$ //$NON-NLS-2$
+			InputStream sourceStream = getClass().getResourceAsStream(fileName + ".ico");  //$NON-NLS-1$
 			ImageData source = new ImageData(sourceStream);
 			ImageData mask = source.getTransparencyMask();
 			image = new Image(display, source, mask);

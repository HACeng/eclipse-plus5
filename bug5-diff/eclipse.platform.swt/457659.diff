commit 1c7342818fdf30c214feb852bb2d2bdc2c5f8845
Author: Alexander Kurtakov <akurtako@redhat.com>
Date:   Fri Jan 16 10:34:36 2015 +0200

    Bug 457659 - Move swt.tools to Java 1.6
    
    Bump BREE, fix new warnings, enable save actions for them.
    
    Change-Id: I8f7f59d6f2e2a3c10dd45465d09f2ac8f9c9a86a
    Signed-off-by: Alexander Kurtakov <akurtako@redhat.com>

1	1	bundles/org.eclipse.swt.tools/.classpath
4	4	bundles/org.eclipse.swt.tools/.settings/org.eclipse.jdt.core.prefs
59	0	bundles/org.eclipse.swt.tools/.settings/org.eclipse.jdt.ui.prefs
13	15	bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ASTClass.java
13	6	bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ASTField.java
15	6	bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ASTMethod.java
7	0	bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ASTParameter.java
12	2	bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ASTType.java
9	4	bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/AbstractItem.java
4	1	bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/JNIGenerator.java
34	1	bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/JNIGeneratorAppUI.java
10	6	bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ReflectClass.java
15	7	bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ReflectField.java
17	8	bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ReflectMethod.java
8	1	bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ReflectParameter.java
11	0	bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ReflectType.java
1	1	bundles/org.eclipse.swt.tools/META-INF/MANIFEST.MF
5	10	bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/DOMWriter.java
6	2	bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGenerator.java
14	9	bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGeneratorUI.java
1	0	bundles/org.eclipse.swt.tools/NativeStats/org/eclipse/swt/tools/internal/NativeStats.java
8	1	bundles/org.eclipse.swt.tools/Sleak/org/eclipse/swt/tools/internal/Sleak.java
6	4	bundles/org.eclipse.swt.tools/src/org/eclipse/swt/tools/builders/Check64EnableAction.java
5	12	bundles/org.eclipse.swt.tools/src/org/eclipse/swt/tools/builders/JNIBuilder.java
5	0	bundles/org.eclipse.swt.tools/src/org/eclipse/swt/tools/views/MacGeneratorView.java
2	0	bundles/org.eclipse.swt.tools/src/org/eclipse/swt/tools/views/SpyView.java
diff --git a/bundles/org.eclipse.swt.tools/.classpath b/bundles/org.eclipse.swt.tools/.classpath
index 9db6dc8..3f64a8f 100644
--- a/bundles/org.eclipse.swt.tools/.classpath
+++ b/bundles/org.eclipse.swt.tools/.classpath
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
-	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>
 	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
 	<classpathentry kind="src" path="src"/>
 	<classpathentry kind="src" path="JNI Generation"/>
diff --git a/bundles/org.eclipse.swt.tools/.settings/org.eclipse.jdt.core.prefs b/bundles/org.eclipse.swt.tools/.settings/org.eclipse.jdt.core.prefs
index 3b9f34e..ba28c6b 100644
--- a/bundles/org.eclipse.swt.tools/.settings/org.eclipse.jdt.core.prefs
+++ b/bundles/org.eclipse.swt.tools/.settings/org.eclipse.jdt.core.prefs
@@ -1,12 +1,12 @@
 eclipse.preferences.version=1
 org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
-org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.6
 org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
-org.eclipse.jdt.core.compiler.compliance=1.5
-org.eclipse.jdt.core.compiler.problem.unavoidableGenericTypeProblems=disabled
+org.eclipse.jdt.core.compiler.compliance=1.6
 org.eclipse.jdt.core.compiler.debug.lineNumber=generate
 org.eclipse.jdt.core.compiler.debug.localVariable=generate
 org.eclipse.jdt.core.compiler.debug.sourceFile=generate
 org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
 org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
-org.eclipse.jdt.core.compiler.source=1.5
+org.eclipse.jdt.core.compiler.problem.unavoidableGenericTypeProblems=disabled
+org.eclipse.jdt.core.compiler.source=1.6
diff --git a/bundles/org.eclipse.swt.tools/.settings/org.eclipse.jdt.ui.prefs b/bundles/org.eclipse.swt.tools/.settings/org.eclipse.jdt.ui.prefs
index 0cf8a2e..9d423fe 100644
--- a/bundles/org.eclipse.swt.tools/.settings/org.eclipse.jdt.ui.prefs
+++ b/bundles/org.eclipse.swt.tools/.settings/org.eclipse.jdt.ui.prefs
@@ -1,5 +1,64 @@
 eclipse.preferences.version=1
+editor_save_participant_org.eclipse.jdt.ui.postsavelistener.cleanup=true
 org.eclipse.jdt.ui.ignorelowercasenames=true
 org.eclipse.jdt.ui.importorder=java;javax;org;com;
 org.eclipse.jdt.ui.ondemandthreshold=1
 org.eclipse.jdt.ui.staticondemandthreshold=1
+sp_cleanup.add_default_serial_version_id=true
+sp_cleanup.add_generated_serial_version_id=false
+sp_cleanup.add_missing_annotations=true
+sp_cleanup.add_missing_deprecated_annotations=true
+sp_cleanup.add_missing_methods=false
+sp_cleanup.add_missing_nls_tags=false
+sp_cleanup.add_missing_override_annotations=true
+sp_cleanup.add_missing_override_annotations_interface_methods=true
+sp_cleanup.add_serial_version_id=false
+sp_cleanup.always_use_blocks=true
+sp_cleanup.always_use_parentheses_in_expressions=false
+sp_cleanup.always_use_this_for_non_static_field_access=false
+sp_cleanup.always_use_this_for_non_static_method_access=false
+sp_cleanup.convert_functional_interfaces=false
+sp_cleanup.convert_to_enhanced_for_loop=false
+sp_cleanup.correct_indentation=false
+sp_cleanup.format_source_code=false
+sp_cleanup.format_source_code_changes_only=false
+sp_cleanup.insert_inferred_type_arguments=false
+sp_cleanup.make_local_variable_final=true
+sp_cleanup.make_parameters_final=false
+sp_cleanup.make_private_fields_final=true
+sp_cleanup.make_type_abstract_if_missing_method=false
+sp_cleanup.make_variable_declarations_final=false
+sp_cleanup.never_use_blocks=false
+sp_cleanup.never_use_parentheses_in_expressions=true
+sp_cleanup.on_save_use_additional_actions=true
+sp_cleanup.organize_imports=true
+sp_cleanup.qualify_static_field_accesses_with_declaring_class=false
+sp_cleanup.qualify_static_member_accesses_through_instances_with_declaring_class=true
+sp_cleanup.qualify_static_member_accesses_through_subtypes_with_declaring_class=true
+sp_cleanup.qualify_static_member_accesses_with_declaring_class=false
+sp_cleanup.qualify_static_method_accesses_with_declaring_class=false
+sp_cleanup.remove_private_constructors=true
+sp_cleanup.remove_redundant_type_arguments=true
+sp_cleanup.remove_trailing_whitespaces=false
+sp_cleanup.remove_trailing_whitespaces_all=true
+sp_cleanup.remove_trailing_whitespaces_ignore_empty=false
+sp_cleanup.remove_unnecessary_casts=true
+sp_cleanup.remove_unnecessary_nls_tags=false
+sp_cleanup.remove_unused_imports=false
+sp_cleanup.remove_unused_local_variables=false
+sp_cleanup.remove_unused_private_fields=true
+sp_cleanup.remove_unused_private_members=false
+sp_cleanup.remove_unused_private_methods=true
+sp_cleanup.remove_unused_private_types=true
+sp_cleanup.sort_members=false
+sp_cleanup.sort_members_all=false
+sp_cleanup.use_anonymous_class_creation=false
+sp_cleanup.use_blocks=false
+sp_cleanup.use_blocks_only_for_return_and_throw=false
+sp_cleanup.use_lambda=true
+sp_cleanup.use_parentheses_in_expressions=false
+sp_cleanup.use_this_for_non_static_field_access=false
+sp_cleanup.use_this_for_non_static_field_access_only_if_necessary=true
+sp_cleanup.use_this_for_non_static_method_access=false
+sp_cleanup.use_this_for_non_static_method_access_only_if_necessary=true
+sp_cleanup.use_type_arguments=false
diff --git a/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ASTClass.java b/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ASTClass.java
index 8b6a035..f367471 100644
--- a/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ASTClass.java	
+++ b/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ASTClass.java	
@@ -10,21 +10,10 @@
  *******************************************************************************/
 package org.eclipse.swt.tools.internal;
 
-import java.io.File;
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-
-import org.eclipse.jdt.core.dom.AST;
-import org.eclipse.jdt.core.dom.ASTParser;
-import org.eclipse.jdt.core.dom.CompilationUnit;
-import org.eclipse.jdt.core.dom.FieldDeclaration;
-import org.eclipse.jdt.core.dom.ImportDeclaration;
-import org.eclipse.jdt.core.dom.Javadoc;
-import org.eclipse.jdt.core.dom.MethodDeclaration;
-import org.eclipse.jdt.core.dom.TagElement;
-import org.eclipse.jdt.core.dom.TypeDeclaration;
-import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
+import java.io.*;
+import java.util.*;
+
+import org.eclipse.jdt.core.dom.*;
 import org.eclipse.swt.tools.internal.ASTType.TypeResolver;
 
 public class ASTClass extends ASTItem implements JNIClass {
@@ -40,6 +29,7 @@ public class ASTClass extends ASTItem implements JNIClass {
 	int start;
 	
 	TypeResolver resolver = new TypeResolver() {
+		@Override
 		public String findPath(String simpleName) {
 			if (simpleName.equals(ASTClass.this.simpleName)) return sourcePath;
 			String basePath = sourcePath.substring(0, sourcePath.length() - name.length() - ".java".length());
@@ -55,6 +45,7 @@ public class ASTClass extends ASTItem implements JNIClass {
 			}
 			return "";
 		}
+		@Override
 		public String resolve(String simpleName) {
 			if (simpleName.equals(ASTClass.this.simpleName)) return packageName + "." + simpleName;
 			String basePath = sourcePath.substring(0, sourcePath.length() - name.length() - ".java".length());
@@ -140,22 +131,26 @@ public boolean equals(Object obj) {
 	return ((ASTClass)obj).getName().equals(getName());
 }
 
+@Override
 public JNIField[] getDeclaredFields() {
 	JNIField[] result = new JNIField[fields.length];
 	System.arraycopy(fields, 0, result, 0, result.length);
 	return result;
 }
 
+@Override
 public JNIMethod[] getDeclaredMethods() {
 	JNIMethod[] result = new JNIMethod[methods.length];
 	System.arraycopy(methods, 0, result, 0, result.length);
 	return result;
 }
 
+@Override
 public String getName() {
 	return name;
 }
 
+@Override
 public JNIClass getSuperclass() {
 	if (superclassName == null) return new ReflectClass(Object.class);
 	if (superclass != null) return superclass;
@@ -163,10 +158,12 @@ public JNIClass getSuperclass() {
 	return superclass = new ASTClass(sourcePath, metaData);
 }
 
+@Override
 public String getSimpleName() {
 	return simpleName;
 }
 
+@Override
 public String getExclude() {
 	return (String)getParam("exclude");
 }
@@ -178,6 +175,7 @@ public String getMetaData() {
 	return metaData.getMetaData(key, "");
 }
 
+@Override
 public void setExclude(String str) { 
 	setParam("exclude", str);
 }
diff --git a/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ASTField.java b/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ASTField.java
index dacbd54..070c862 100644
--- a/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ASTField.java	
+++ b/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ASTField.java	
@@ -10,13 +10,9 @@
  *******************************************************************************/
 package org.eclipse.swt.tools.internal;
 
-import java.util.Iterator;
-import java.util.List;
+import java.util.*;
 
-import org.eclipse.jdt.core.dom.FieldDeclaration;
-import org.eclipse.jdt.core.dom.Javadoc;
-import org.eclipse.jdt.core.dom.TagElement;
-import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
+import org.eclipse.jdt.core.dom.*;
 
 public class ASTField extends ASTItem implements JNIField {
 	ASTClass declaringClass;
@@ -72,30 +68,37 @@ public boolean equals(Object obj) {
 	return ((ASTField)obj).getName().equals(getName());
 }
 
+@Override
 public JNIClass getDeclaringClass() {
 	return declaringClass;
 }
 
+@Override
 public int getModifiers() {
 	return modifiers;
 }
 
+@Override
 public String getName() {
 	return name;
 }
 
+@Override
 public JNIType getType() {
 	return type;
 }
 
+@Override
 public JNIType getType64() {
 	return type64;
 }
 
+@Override
 public String getAccessor() {
 	return (String)getParam("accessor");
 }
 
+@Override
 public String getCast() {
 	String cast = ((String)getParam("cast")).trim();
 	if (cast.length() > 0) {
@@ -105,6 +108,7 @@ public String getCast() {
 	return cast;
 }
 
+@Override
 public String getExclude() {
 	return (String)getParam("exclude");
 }
@@ -117,14 +121,17 @@ public String getMetaData() {
 	return declaringClass.metaData.getMetaData(key, "");
 }
 
+@Override
 public void setAccessor(String str) { 
 	setParam("accessor", str);
 }
 
+@Override
 public void setCast(String str) {
 	setParam("cast", str);
 }
 
+@Override
 public void setExclude(String str) { 
 	setParam("exclude", str);
 }
diff --git a/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ASTMethod.java b/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ASTMethod.java
index 0faf631..c44606a 100644
--- a/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ASTMethod.java	
+++ b/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ASTMethod.java	
@@ -11,13 +11,9 @@
 package org.eclipse.swt.tools.internal;
 
 import java.lang.reflect.Modifier;
-import java.util.Iterator;
-import java.util.List;
+import java.util.*;
 
-import org.eclipse.jdt.core.dom.Javadoc;
-import org.eclipse.jdt.core.dom.MethodDeclaration;
-import org.eclipse.jdt.core.dom.SingleVariableDeclaration;
-import org.eclipse.jdt.core.dom.TagElement;
+import org.eclipse.jdt.core.dom.*;
 
 public class ASTMethod extends ASTItem implements JNIMethod {
 	String name, qualifiedName;
@@ -101,18 +97,22 @@ public ASTMethod(ASTClass declaringClass, String source, MethodDeclaration metho
 	}
 }
 
+@Override
 public JNIClass getDeclaringClass() {
 	return declaringClass;
 }
 
+@Override
 public int getModifiers() {
 	return modifiers;
 }
 
+@Override
 public String getName() {
 	return name;
 }
 
+@Override
 public boolean isNativeUnique() {
 	if (unique != null) return unique.booleanValue();
 	boolean result = true;
@@ -132,30 +132,37 @@ public boolean isNativeUnique() {
 	return result;
 }
 
+@Override
 public JNIType[] getParameterTypes() {
 	return paramTypes;
 }
 
+@Override
 public JNIType[] getParameterTypes64() {
 	return paramTypes64;
 }
 
+@Override
 public JNIParameter[] getParameters() {
 	return this.parameters;
 }
 
+@Override
 public JNIType getReturnType() {
 	return returnType;
 }
 
+@Override
 public JNIType getReturnType64() {
 	return returnType64;
 }
 
+@Override
 public String getAccessor() {
 	return (String)getParam("accessor");
 }
 
+@Override
 public String getExclude() {
 	return (String)getParam("exclude");
 }
@@ -186,10 +193,12 @@ public String getMetaData() {
 	return value;
 }
 
+@Override
 public void setAccessor(String str) { 
 	setParam("accessor", str);
 }
 
+@Override
 public void setExclude(String str) { 
 	setParam("exclude", str);
 }
diff --git a/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ASTParameter.java b/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ASTParameter.java
index 2039f71..17355c0 100644
--- a/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ASTParameter.java	
+++ b/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ASTParameter.java	
@@ -22,6 +22,7 @@ public ASTParameter(ASTMethod method, int parameter, String name) {
 	this.name = name;
 }
 
+@Override
 public String getCast() {
 	String cast = ((String)getParam("cast")).trim();
 	if (cast.length() > 0) {
@@ -57,6 +58,7 @@ public String getMetaData() {
 	return value;
 }
 
+@Override
 public JNIMethod getMethod() {
 	return method;
 }
@@ -65,6 +67,7 @@ public String getName() {
 	return name;
 }
 
+@Override
 public JNIClass getTypeClass() {
 	ASTType type = (ASTType)getType();
 	ASTClass declaringClass = method.declaringClass;
@@ -72,18 +75,22 @@ public JNIClass getTypeClass() {
 	return new ASTClass(sourcePath, declaringClass.metaData);
 }
 
+@Override
 public JNIType getType() {
 	return method.getParameterTypes()[parameter];
 }
 
+@Override
 public JNIType getType64() {
 	return method.getParameterTypes64()[parameter];
 }
 
+@Override
 public int getParameter() {
 	return parameter;
 }
 
+@Override
 public void setCast(String str) {
 	setParam("cast", str);
 }
diff --git a/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ASTType.java b/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ASTType.java
index fe464a0..dc4348d 100644
--- a/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ASTType.java	
+++ b/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ASTType.java	
@@ -10,8 +10,7 @@
  *******************************************************************************/
 package org.eclipse.swt.tools.internal;
 
-import org.eclipse.jdt.core.dom.ArrayType;
-import org.eclipse.jdt.core.dom.Type;
+import org.eclipse.jdt.core.dom.*;
 
 public class ASTType implements JNIType {
 	
@@ -71,11 +70,13 @@ public boolean equals(Object obj) {
 	return ((ASTType)obj).name.equals(name);
 }
 
+@Override
 public JNIType getComponentType() {
 	if (!name.startsWith("[")) throw new RuntimeException();
 	return new ASTType(name.substring(1));
 }
 
+@Override
 public String getName() {
 	if (isPrimitive()) {
 		if (name.equals("V")) return "void";
@@ -92,6 +93,7 @@ public String getName() {
 	return name.substring(1, name.length() - 1).replace('/', '.');
 }
 
+@Override
 public String getSimpleName() {
 	String name = getName();
 	if (isArray() || isPrimitive()) return name;
@@ -99,6 +101,7 @@ public String getSimpleName() {
 	return name.substring(index, name.length());
 }
 
+@Override
 public String getTypeSignature(boolean define) {
 	if (isPrimitive()) {
 		if (define) {
@@ -116,6 +119,7 @@ public String getTypeSignature(boolean define) {
 	return name;
 }
 
+@Override
 public String getTypeSignature1(boolean define) {
 	if (isPrimitive()) {
 		if (name.equals("V")) return "Void";
@@ -132,6 +136,7 @@ public String getTypeSignature1(boolean define) {
 	return "Object";
 }
 
+@Override
 public String getTypeSignature2(boolean define) {
 	if (isPrimitive()) {
 		if (name.equals("V")) return "void";
@@ -152,6 +157,7 @@ public String getTypeSignature2(boolean define) {
 	return "jobject";
 }
 
+@Override
 public String getTypeSignature3(boolean define) {
 	if (isPrimitive()) {
 		if (name.equals("V")) return "void";
@@ -171,6 +177,7 @@ public String getTypeSignature3(boolean define) {
 	return getName();
 }
 
+@Override
 public String getTypeSignature4(boolean define, boolean struct) {
 	if (isPrimitive()) {
 		if (name.equals("V")) return "void";
@@ -197,14 +204,17 @@ public int hashCode() {
 	return name.hashCode();
 }
 
+@Override
 public boolean isArray() {
 	return name.startsWith("[");
 }
 
+@Override
 public boolean isPrimitive() {
 	return !name.startsWith("L") && !name.startsWith("[");
 }
 
+@Override
 public boolean isType(String type) {
 	return getName().equals(type);
 }
diff --git a/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/AbstractItem.java b/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/AbstractItem.java
index ee88bd3..de4ad8b 100644
--- a/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/AbstractItem.java	
+++ b/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/AbstractItem.java	
@@ -10,10 +10,7 @@
  *******************************************************************************/
 package org.eclipse.swt.tools.internal;
 
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Set;
+import java.util.*;
 
 public abstract class AbstractItem implements JNIItem {
 
@@ -67,6 +64,7 @@ public String flatten() {
 	return buffer.toString();
 }
 
+@Override
 public String[] getFlags() {
 	Object flags = getParam("flags");
 	if (flags == null) return new String[0];
@@ -76,6 +74,7 @@ public String[] getFlags() {
 	return result;
 }
 
+@Override
 public boolean getFlag(String flag) {
 	String[] flags = getFlags();
 	for (int i = 0; i < flags.length; i++) {
@@ -86,16 +85,19 @@ public boolean getFlag(String flag) {
 
 public abstract String getMetaData();
 
+@Override
 public Object getParam(String key) {
 	checkParams();
 	Object value = params.get(key);
 	return value == null ? "" : value;
 }
 
+@Override
 public boolean getGenerate() {
 	return !getFlag(FLAG_NO_GEN);
 }
 
+@Override
 public void setFlags(String[] flags) { 
 	setParam("flags", flags);
 }
@@ -133,6 +135,7 @@ public void parse(String str) {
 	}
 }
 
+@Override
 public void setFlag(String flag, boolean value) {
 	String[] flags = getFlags();
 	HashSet<String> set = new HashSet<String>(Arrays.asList(flags));
@@ -144,12 +147,14 @@ public void setFlag(String flag, boolean value) {
 	setFlags(set.toArray(new String[set.size()]));
 }
 
+@Override
 public void setGenerate(boolean value) {
 	setFlag(FLAG_NO_GEN, !value);
 }
 
 public abstract void setMetaData(String value);
 
+@Override
 public void setParam(String key, Object value) {
 	checkParams();
 	params.put(key, value);
diff --git a/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/JNIGenerator.java b/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/JNIGenerator.java
index 1ac0fd9..14ecf35 100644
--- a/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/JNIGenerator.java	
+++ b/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/JNIGenerator.java	
@@ -11,7 +11,7 @@
 package org.eclipse.swt.tools.internal;
 
 import java.io.*;
-import java.lang.reflect.Modifier;
+import java.lang.reflect.*;
 import java.util.*;
 
 public abstract class JNIGenerator implements Flags {
@@ -171,6 +171,7 @@ static String loadFile (String file) {
 
 static void sort(JNIMethod[] methods) {
 	Arrays.sort(methods, new Comparator<JNIMethod>() {
+		@Override
 		public int compare(JNIMethod mth1, JNIMethod mth2) {
 			int result = mth1.getName().compareTo(mth2.getName());
 			return result != 0 ? result : getFunctionName(mth1).compareTo(getFunctionName(mth2));
@@ -180,6 +181,7 @@ static void sort(JNIMethod[] methods) {
 
 static void sort(JNIField[] fields) {
 	Arrays.sort(fields, new Comparator<JNIField>() {
+		@Override
 		public int compare(JNIField a, JNIField b) {
 			return a.getName().compareTo(b.getName());
 		}
@@ -188,6 +190,7 @@ static void sort(JNIField[] fields) {
 
 static void sort(JNIClass[] classes) {
 	Arrays.sort(classes, new Comparator<JNIClass>() {
+		@Override
 		public int compare(JNIClass a, JNIClass b) {
 			return a.getName().compareTo(b.getName());
 		}
diff --git a/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/JNIGeneratorAppUI.java b/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/JNIGeneratorAppUI.java
index 63ce8a4..afc20e6 100644
--- a/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/JNIGeneratorAppUI.java	
+++ b/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/JNIGeneratorAppUI.java	
@@ -14,10 +14,10 @@ import java.io.*;
 import java.lang.reflect.*;
 
 import org.eclipse.swt.*;
-import org.eclipse.swt.widgets.*;
 import org.eclipse.swt.custom.*;
 import org.eclipse.swt.graphics.*;
 import org.eclipse.swt.layout.*;
+import org.eclipse.swt.widgets.*;
 
 public class JNIGeneratorAppUI {
 
@@ -171,27 +171,33 @@ void generateAll() {
 			try {
 				app.generate(!finalShowProgress ? null : new ProgressMonitor() {
 					int total, step, maximum = 100;
+					@Override
 					public void setTotal(final int total) {
 						this.total = total;
 						display.syncExec(new Runnable() {
+							@Override
 							public void run() {
 								progressBar.setMaximum(maximum);
 							}
 						});
 					}
+					@Override
 					public void step() {
 						int oldValue = step * maximum / total;
 						step++;
 						final int newValue = step * maximum / total;
 						if (oldValue == newValue) return;
 						display.syncExec(new Runnable() {
+							@Override
 							public void run() {
 								progressBar.setSelection(newValue);
 							}
 						});					
 					}
+					@Override
 					public void setMessage(final String message) {
 						display.syncExec(new Runnable() {
+							@Override
 							public void run() {
 								progressLabel.setText(message);
 								progressLabel.update();
@@ -300,6 +306,7 @@ public void open () {
 	panel.setLayout(panelLayout);
 	
 	Listener updateMainClassListener =  new Listener() {
+		@Override
 		public void handleEvent(Event e) {
 			updateMainClass();
 			if (!updateOutputDir()) return;
@@ -372,6 +379,7 @@ void createClassesPanel(Composite panel) {
 	classesLt.setLayoutData(data);
 	classesLt.setHeaderVisible(true);
 	classesLt.addListener(SWT.Selection, new Listener() {
+		@Override
 		public void handleEvent(Event e) {
 			if (e.detail == SWT.CHECK) {
 				updateGenerate((TableItem)e.item);
@@ -396,6 +404,7 @@ void createClassesPanel(Composite panel) {
 	classEditorTx = new Text(classesLt, SWT.SINGLE);
 	classTextEditor.setEditor(classEditorTx);
 	Listener classTextListener = new Listener() {
+		@Override
 		public void handleEvent(Event e) {
 			if (e.type == SWT.Traverse) {
 				switch (e.detail) {
@@ -430,6 +439,7 @@ void createClassesPanel(Composite panel) {
 	classEditorLt.setItems(JNIClass.FLAGS);
 	floater.pack();
 	floater.addListener(SWT.Close, new Listener() {
+		@Override
 		public void handleEvent(Event e) {
 			classListEditor.setItem(null);
 			e.doit = false;
@@ -437,6 +447,7 @@ void createClassesPanel(Composite panel) {
 		}
 	});
 	Listener classesListListener = new Listener() {
+		@Override
 		public void handleEvent(Event e) {
 			if (e.type == SWT.Traverse) {
 				switch (e.detail) {
@@ -465,8 +476,10 @@ void createClassesPanel(Composite panel) {
 	classEditorLt.addListener(SWT.Traverse, classesListListener);
 
 	classesLt.addListener(SWT.MouseDown, new Listener() {
+		@Override
 		public void handleEvent(final Event e) {
 			e.display.asyncExec (new Runnable () {
+				@Override
 				public void run () {
 					if (classesLt.isDisposed ()) return;
 					if (e.button != 1) return;
@@ -529,6 +542,7 @@ void createMembersPanel(Composite panel) {
 			} catch (Exception ex) {}
 			return false;
 		}
+		@Override
 		public void handleEvent(Event e) {
 			String pattern = searchText.getText();
 			int selection = membersLt.getSelectionIndex();
@@ -548,6 +562,7 @@ void createMembersPanel(Composite panel) {
 	data.heightHint = membersLt.getItemHeight() * 6;
 	membersLt.setLayoutData(data);
 	membersLt.addListener(SWT.Selection, new Listener() {
+		@Override
 		public void handleEvent(Event e) {
 			if (e.detail == SWT.CHECK) {
 				updateGenerate((TableItem)e.item);
@@ -562,6 +577,7 @@ void createMembersPanel(Composite panel) {
 	memberEditorTx = new Text(membersLt, SWT.SINGLE);
 	memberTextEditor.setEditor(memberEditorTx);
 	Listener memberTextListener = new Listener() {
+		@Override
 		public void handleEvent(Event e) {
 			if (e.type == SWT.Traverse) {
 				switch (e.detail) {
@@ -625,6 +641,7 @@ void createMembersPanel(Composite panel) {
 	memberListEditor = new FlagsEditor(membersLt);
 	memberEditorLt = new List(floater, SWT.MULTI | SWT.BORDER);
 	floater.addListener(SWT.Close, new Listener() {
+		@Override
 		public void handleEvent(Event e) {
 			memberListEditor.setItem(null);
 			e.doit = false;
@@ -632,6 +649,7 @@ void createMembersPanel(Composite panel) {
 		}
 	});
 	Listener memberListListener = new Listener() {
+		@Override
 		public void handleEvent(Event e) {
 			if (e.type == SWT.Traverse) {
 				switch (e.detail) {
@@ -658,8 +676,10 @@ void createMembersPanel(Composite panel) {
 	memberEditorLt.addListener(SWT.Traverse, memberListListener);
 	
 	membersLt.addListener(SWT.MouseDown, new Listener() {
+		@Override
 		public void handleEvent(final Event e) {
 			e.display.asyncExec (new Runnable () {
+				@Override
 				public void run () {
 					if (membersLt.isDisposed ()) return;
 					if (e.button != 1) return;
@@ -758,6 +778,7 @@ void createParametersPanel(Composite panel) {
 	data.heightHint = itemHeight * 6;
 	paramsLt.setLayoutData(data);
 	paramsLt.addListener(SWT.Selection, new Listener() {
+		@Override
 		public void handleEvent(Event e) {
 			if (e.detail == SWT.CHECK) {
 				updateGenerate((TableItem)e.item);
@@ -779,6 +800,7 @@ void createParametersPanel(Composite panel) {
 	paramEditorTx = new Text(paramsLt, SWT.SINGLE);
 	paramTextEditor.setEditor(paramEditorTx);
 	Listener paramTextListener = new Listener() {
+		@Override
 		public void handleEvent(Event e) {
 			if (e.type == SWT.Traverse) {
 				switch (e.detail) {
@@ -813,6 +835,7 @@ void createParametersPanel(Composite panel) {
 	paramEditorLt.setItems(JNIParameter.FLAGS);
 	floater.pack();
 	floater.addListener(SWT.Close, new Listener() {
+		@Override
 		public void handleEvent(Event e) {
 			paramListEditor.setItem(null);
 			e.doit = false;
@@ -820,6 +843,7 @@ void createParametersPanel(Composite panel) {
 		}
 	});
 	Listener paramListListener = new Listener() {
+		@Override
 		public void handleEvent(Event e) {
 			if (e.type == SWT.Traverse) {
 				switch (e.detail) {
@@ -847,8 +871,10 @@ void createParametersPanel(Composite panel) {
 	paramEditorLt.addListener(SWT.Traverse, paramListListener);
 
 	paramsLt.addListener(SWT.MouseDown, new Listener() {
+		@Override
 		public void handleEvent(final Event e) {
 			e.display.asyncExec (new Runnable () {
+				@Override
 				public void run () {
 					if (paramsLt.isDisposed ()) return;
 					if (e.button != 1) return;
@@ -905,6 +931,7 @@ void createActionButtons(Composite parent) {
 	actionsPanel.setLayout(actionsLayout);
 	
 	createActionButton(actionsPanel, "Generate &All", new Listener() {
+		@Override
 		public void handleEvent(Event e) {
 			generateAll();
 		}
@@ -918,31 +945,37 @@ void createActionButtons(Composite parent) {
 	separator.setLayoutData(data);
 	
 	createActionButton(actionsPanel, "Generate Structs &Header", new Listener() {
+		@Override
 		public void handleEvent(Event e) {
 			generateStructsHeader();
 		}
 	});
 	createActionButton(actionsPanel, "Generate &Structs", new Listener() {
+		@Override
 		public void handleEvent(Event e) {
 			generateStructs();
 		}
 	});
 	createActionButton(actionsPanel, "Generate &Natives", new Listener() {
+		@Override
 		public void handleEvent(Event e) {
 			generateNatives();
 		}
 	});
 	createActionButton(actionsPanel, "Generate Meta &Data", new Listener() {
+		@Override
 		public void handleEvent(Event e) {
 			generateMetaData();
 		}
 	});
 	createActionButton(actionsPanel, "Generate Cons&tants", new Listener() {
+		@Override
 		public void handleEvent(Event e) {
 			generateConstants();
 		}
 	});	
 	createActionButton(actionsPanel, "Generate Si&zeof", new Listener() {
+		@Override
 		public void handleEvent(Event e) {
 			generateSizeof();
 		}
diff --git a/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ReflectClass.java b/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ReflectClass.java
index 175245f..8f09b3a 100644
--- a/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ReflectClass.java	
+++ b/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ReflectClass.java	
@@ -10,13 +10,10 @@
  *******************************************************************************/
 package org.eclipse.swt.tools.internal;
 
-import java.io.File;
-import java.lang.reflect.Field;
-import java.lang.reflect.Method;
+import java.io.*;
+import java.lang.reflect.*;
 
-import org.eclipse.jdt.core.dom.AST;
-import org.eclipse.jdt.core.dom.ASTParser;
-import org.eclipse.jdt.core.dom.CompilationUnit;
+import org.eclipse.jdt.core.dom.*;
 
 public class ReflectClass extends ReflectItem implements JNIClass {
 	Class<?> clazz;
@@ -68,6 +65,7 @@ public boolean equals(Object obj) {
 	return ((ReflectClass)obj).clazz.equals(clazz);
 }
 
+@Override
 public JNIField[] getDeclaredFields() {
 	checkMembers();
 	JNIField[] result = new JNIField[fields.length];
@@ -75,6 +73,7 @@ public JNIField[] getDeclaredFields() {
 	return result;
 }
 
+@Override
 public JNIMethod[] getDeclaredMethods() {
 	checkMembers();
 	JNIMethod[] result = new JNIMethod[methods.length];
@@ -82,10 +81,12 @@ public JNIMethod[] getDeclaredMethods() {
 	return result;
 }
 
+@Override
 public String getName() {
 	return clazz.getName();
 }
 
+@Override
 public JNIClass getSuperclass() {
 	Class<?> superclazz = clazz.getSuperclass();
 	String path = new File(sourcePath).getParent() + "/" + getSimpleName(superclazz) + ".java";
@@ -98,10 +99,12 @@ String getSimpleName(Class<?> type) {
 	return name.substring(index, name.length());
 }
 
+@Override
 public String getSimpleName() {
 	return getSimpleName(clazz);
 }
 
+@Override
 public String getExclude() {
 	return (String)getParam("exclude");
 }
@@ -112,6 +115,7 @@ public String getMetaData() {
 	return metaData.getMetaData(key, "");
 }
 
+@Override
 public void setExclude(String str) { 
 	setParam("exclude", str);
 }
diff --git a/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ReflectField.java b/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ReflectField.java
index aefdd21..e870b73 100644
--- a/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ReflectField.java	
+++ b/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ReflectField.java	
@@ -10,14 +10,11 @@
  *******************************************************************************/
 package org.eclipse.swt.tools.internal;
 
-import java.io.File;
-import java.lang.reflect.Field;
-import java.util.Iterator;
+import java.io.*;
+import java.lang.reflect.*;
+import java.util.*;
 
-import org.eclipse.jdt.core.dom.CompilationUnit;
-import org.eclipse.jdt.core.dom.FieldDeclaration;
-import org.eclipse.jdt.core.dom.TypeDeclaration;
-import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
+import org.eclipse.jdt.core.dom.*;
 
 public class ReflectField extends ReflectItem implements JNIField {
 	Field field;
@@ -67,30 +64,37 @@ public boolean equals(Object obj) {
 	return ((ReflectField)obj).field.equals(field);
 }
 
+@Override
 public JNIClass getDeclaringClass() {
 	return declaringClass;
 }
 
+@Override
 public int getModifiers() {
 	return field.getModifiers();
 }
 
+@Override
 public String getName() {
 	return field.getName();
 }
 
+@Override
 public JNIType getType() {
 	return type;
 }
 
+@Override
 public JNIType getType64() {
 	return type64;
 }
 
+@Override
 public String getAccessor() {
 	return (String)getParam("accessor");
 }
 
+@Override
 public String getCast() {
 	String cast = ((String)getParam("cast")).trim();
 	if (cast.length() > 0) {
@@ -100,6 +104,7 @@ public String getCast() {
 	return cast;
 }
 
+@Override
 public String getExclude() {
 	return (String)getParam("exclude");
 }
@@ -111,14 +116,17 @@ public String getMetaData() {
 	return declaringClass.metaData.getMetaData(key, "");
 }
 
+@Override
 public void setAccessor(String str) { 
 	setParam("accessor", str);
 }
 
+@Override
 public void setCast(String str) {
 	setParam("cast", str);
 }
 
+@Override
 public void setExclude(String str) { 
 	setParam("exclude", str);
 }
diff --git a/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ReflectMethod.java b/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ReflectMethod.java
index 2c519f4..67bcb0d 100644
--- a/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ReflectMethod.java	
+++ b/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ReflectMethod.java	
@@ -10,16 +10,12 @@
  *******************************************************************************/
 package org.eclipse.swt.tools.internal;
 
-import java.io.File;
-import java.lang.reflect.Method;
-import java.util.List;
+import java.io.*;
+import java.lang.reflect.*;
+import java.util.*;
 
-import org.eclipse.jdt.core.dom.ASTNode;
-import org.eclipse.jdt.core.dom.CompilationUnit;
-import org.eclipse.jdt.core.dom.MethodDeclaration;
+import org.eclipse.jdt.core.dom.*;
 import org.eclipse.jdt.core.dom.Modifier;
-import org.eclipse.jdt.core.dom.SingleVariableDeclaration;
-import org.eclipse.jdt.core.dom.TypeDeclaration;
 
 public class ReflectMethod extends ReflectItem implements JNIMethod {
 	Method method;
@@ -111,18 +107,22 @@ public boolean equals(Object obj) {
 	return ((ReflectMethod)obj).method.equals(method);
 }
 
+@Override
 public JNIClass getDeclaringClass() {
 	return declaringClass;
 }
 
+@Override
 public int getModifiers() {
 	return method.getModifiers();
 }
 
+@Override
 public String getName() {
 	return method.getName();
 }
 
+@Override
 public boolean isNativeUnique() {
 	if (unique != null) return unique.booleanValue();
 	boolean result = true;
@@ -142,14 +142,17 @@ public boolean isNativeUnique() {
 	return result;
 }
 
+@Override
 public JNIType[] getParameterTypes() {
 	return paramTypes;
 }
 
+@Override
 public JNIType[] getParameterTypes64() {
 	return paramTypes64;
 }
 
+@Override
 public JNIParameter[] getParameters() {
 	Class<?>[] paramTypes = method.getParameterTypes();
 	ReflectParameter[] result = new ReflectParameter[paramTypes.length];
@@ -159,18 +162,22 @@ public JNIParameter[] getParameters() {
 	return result;
 }
 
+@Override
 public JNIType getReturnType() {
 	return returnType;
 }
 
+@Override
 public JNIType getReturnType64() {
 	return returnType64;
 }
 
+@Override
 public String getAccessor() {
 	return (String)getParam("accessor");
 }
 
+@Override
 public String getExclude() {
 	return (String)getParam("exclude");
 }
@@ -217,10 +224,12 @@ public String getMetaData() {
 	return value;
 }
 
+@Override
 public void setAccessor(String str) { 
 	setParam("accessor", str);
 }
 
+@Override
 public void setExclude(String str) { 
 	setParam("exclude", str);
 }
diff --git a/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ReflectParameter.java b/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ReflectParameter.java
index 8857f54..9abe5dc 100644
--- a/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ReflectParameter.java	
+++ b/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ReflectParameter.java	
@@ -10,7 +10,7 @@
  *******************************************************************************/
 package org.eclipse.swt.tools.internal;
 
-import java.io.File;
+import java.io.*;
 
 public class ReflectParameter extends ReflectItem implements JNIParameter {
 	ReflectMethod method;
@@ -21,6 +21,7 @@ public ReflectParameter(ReflectMethod method, int parameter) {
 	this.parameter = parameter;
 }
 
+@Override
 public String getCast() {
 	String cast = ((String)getParam("cast")).trim();
 	if (cast.length() > 0) {
@@ -72,10 +73,12 @@ public String getMetaData() {
 	return value;
 }
 
+@Override
 public JNIMethod getMethod() {
 	return method;
 }
 
+@Override
 public JNIClass getTypeClass() {
 	ReflectType type = (ReflectType)getType();
 	ReflectClass declaringClass = method.declaringClass;
@@ -84,18 +87,22 @@ public JNIClass getTypeClass() {
 	return new ReflectClass(type.clazz, declaringClass.metaData, sourcePath);
 }
 
+@Override
 public JNIType getType() {
 	return method.getParameterTypes()[parameter];
 }
 
+@Override
 public JNIType getType64() {
 	return method.getParameterTypes64()[parameter];
 }
 
+@Override
 public int getParameter() {
 	return parameter;
 }
 
+@Override
 public void setCast(String str) {
 	setParam("cast", str);
 }
diff --git a/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ReflectType.java b/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ReflectType.java
index 8f0b9e4..e53f8fd 100644
--- a/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ReflectType.java	
+++ b/bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ReflectType.java	
@@ -24,20 +24,24 @@ public boolean equals(Object obj) {
 	return ((ReflectType)obj).clazz == clazz;
 }
 
+@Override
 public JNIType getComponentType() {
 	return new ReflectType(clazz.getComponentType());
 }
 
+@Override
 public String getName() {
 	return clazz.getName();
 }
 
+@Override
 public String getSimpleName() {
 	String name = clazz.getName();
 	int index = name.lastIndexOf('.') + 1;
 	return name.substring(index, name.length());
 }
 
+@Override
 public String getTypeSignature(boolean define) {
 	if (clazz == Void.TYPE) return "V";
 	if (clazz == Integer.TYPE) return define ? "I_J" : "I";
@@ -56,6 +60,7 @@ public String getTypeSignature(boolean define) {
 	return "L" + clazz.getName().replace('.', '/') + ";";
 }
 
+@Override
 public String getTypeSignature1(boolean define) {
 	if (clazz == Void.TYPE) return "Void";
 	if (clazz == Integer.TYPE) return define ? "IntLong" : "Int";
@@ -70,6 +75,7 @@ public String getTypeSignature1(boolean define) {
 	return "Object";
 }
 
+@Override
 public String getTypeSignature2(boolean define) {
 	if (clazz == Void.TYPE) return "void";
 	if (clazz == Integer.TYPE) return define ? "jintLong" : "jint";
@@ -88,6 +94,7 @@ public String getTypeSignature2(boolean define) {
 	return "jobject";
 }
 
+@Override
 public String getTypeSignature3(boolean define) {
 	if (clazz == Void.TYPE) return "void";
 	if (clazz == Integer.TYPE) return "int";
@@ -105,6 +112,7 @@ public String getTypeSignature3(boolean define) {
 	return clazz.getName();
 }
 
+@Override
 public String getTypeSignature4(boolean define, boolean struct) {
 	if (clazz == Void.TYPE) return "void";
 	if (clazz == Integer.TYPE) return define ? "jintLong" : "jint";
@@ -129,14 +137,17 @@ public int hashCode() {
 	return clazz.hashCode();
 }
 
+@Override
 public boolean isArray() {
 	return clazz.isArray();
 }
 
+@Override
 public boolean isPrimitive() {
 	return clazz.isPrimitive();
 }
 
+@Override
 public boolean isType(String type) {
 	return clazz.getName().equals(type);
 }
diff --git a/bundles/org.eclipse.swt.tools/META-INF/MANIFEST.MF b/bundles/org.eclipse.swt.tools/META-INF/MANIFEST.MF
index ebd20f3..e2fdca9 100644
--- a/bundles/org.eclipse.swt.tools/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.swt.tools/META-INF/MANIFEST.MF
@@ -9,7 +9,7 @@ Export-Package: org.eclipse.swt.tools,
  org.eclipse.swt.tools.internal; x-internal:=true
 Bundle-ActivationPolicy: lazy
 Bundle-Localization: plugin
-Bundle-RequiredExecutionEnvironment: J2SE-1.5
+Bundle-RequiredExecutionEnvironment: JavaSE-1.6
 Require-Bundle: org.eclipse.core.runtime;bundle-version="3.4.0",
  org.eclipse.core.resources;bundle-version="3.4.0",
  org.eclipse.jdt.core;bundle-version="3.4.0",
diff --git a/bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/DOMWriter.java b/bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/DOMWriter.java
index 526dca2..e422529 100644
--- a/bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/DOMWriter.java	
+++ b/bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/DOMWriter.java	
@@ -10,17 +10,10 @@
  *******************************************************************************/
 package org.eclipse.swt.tools.internal;
 
-import java.io.PrintStream;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.Comparator;
+import java.io.*;
+import java.util.*;
 
-import org.w3c.dom.Attr;
-import org.w3c.dom.Document;
-import org.w3c.dom.NamedNodeMap;
-import org.w3c.dom.Node;
-import org.w3c.dom.NodeList;
+import org.w3c.dom.*;
 
 public class DOMWriter {
 
@@ -117,6 +110,7 @@ public class DOMWriter {
 					}
 					int count = nodes.size();
 					Collections.sort(nodes, new Comparator<Node>() {
+						@Override
 						public int compare(Node a, Node b) {
 							String nameA = a.getNodeName();
 							String nameB = b.getNodeName();
@@ -160,6 +154,7 @@ public class DOMWriter {
 			result[i] = (Attr) attrs.item(i);
 		}
 		Arrays.sort(result, new Comparator<Node>() {
+			@Override
 			public int compare(Node arg0, Node arg1) {
 				return nodeName(arg0).compareTo(nodeName(arg1));
 			}
diff --git a/bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGenerator.java b/bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGenerator.java
index aea5cc6..43ec258 100644
--- a/bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGenerator.java	
+++ b/bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGenerator.java	
@@ -13,10 +13,10 @@ package org.eclipse.swt.tools.internal;
 import java.io.*;
 import java.util.*;
 
-import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.*;
 
 import org.w3c.dom.*;
-import org.xml.sax.InputSource;
+import org.xml.sax.*;
 @SuppressWarnings("unchecked")
 public class MacGenerator {
 	String[] xmls;
@@ -147,6 +147,7 @@ void merge(Document document, Document extraDocument) {
 	 */
 	ArrayList<Node> sortedNodes = Collections.list(Collections.enumeration(extras.values()));
 	Collections.sort(sortedNodes, new Comparator<Object>() {
+		@Override
 		public int compare(Object arg0, Object arg1) {
 			int compare = getLevel((Node)arg0) - getLevel((Node)arg1);
 			if (compare == 0) {
@@ -637,6 +638,7 @@ void copyClassMethodsDown(final Map<String, Object[]> classes) {
 			}
 			return level;			
 		}
+		@Override
 		public int compare(Object arg0, Object arg1) {
 			return getHierarchyLevel((Node)((Object[])arg0)[0]) - getHierarchyLevel((Node)((Object[])arg1)[0]);  
 		}
@@ -867,6 +869,7 @@ public String[] getXmls() {
 			String packageName = getPackageName(mainClassName);
 			File folder = new File(extrasDir != null ? extrasDir : outputDir + packageName.replace('.', '/'));
 			File[] files = folder.listFiles(new FilenameFilter() {
+				@Override
 				public boolean accept(File dir, String name) {
 					return name.endsWith("Full.bridgesupport");
 				}
@@ -876,6 +879,7 @@ public String[] getXmls() {
 			}
 		}
 		Collections.sort(array, new Comparator<Object>() {
+			@Override
 			public int compare(Object o1, Object o2) {
 				return new File((String)o1).getName().compareTo(new File((String)o2).getName());
 			}
diff --git a/bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGeneratorUI.java b/bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGeneratorUI.java
index a82bc8a..8e7b7ea 100644
--- a/bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGeneratorUI.java	
+++ b/bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGeneratorUI.java	
@@ -10,20 +10,15 @@
  *******************************************************************************/
 package org.eclipse.swt.tools.internal;
 
-import java.util.ArrayList;
-import java.util.Collections;
-
-import org.w3c.dom.Document;
-import org.w3c.dom.Element;
-import org.w3c.dom.NamedNodeMap;
-import org.w3c.dom.Node;
-import org.w3c.dom.NodeList;
+import java.util.*;
 
 import org.eclipse.swt.*;
 import org.eclipse.swt.custom.*;
 import org.eclipse.swt.graphics.*;
 import org.eclipse.swt.layout.*;
 import org.eclipse.swt.widgets.*;
+import org.eclipse.swt.widgets.Text;
+import org.w3c.dom.*;
 
 public class MacGeneratorUI {
 	MacGenerator gen;
@@ -191,11 +186,13 @@ public class MacGeneratorUI {
 		search.setLayoutData(data);
 		search.setText(".*");
 		search.addListener(SWT.DefaultSelection, new Listener() {
+			@Override
 			public void handleEvent(Event arg0) {
 				searchFor(search.getText());
 			}
 		});
 		search.addListener(SWT.KeyDown, new Listener() {
+			@Override
 			public void handleEvent(Event event) {
 				if (event.keyCode == SWT.F6) {
 					searchFor(search.getText());					
@@ -209,6 +206,7 @@ public class MacGeneratorUI {
 		nodesTree.setLayoutData(data);
 		
 		nodesTree.addListener(SWT.Selection, new Listener() {
+			@Override
 			public void handleEvent(Event event) {
 				TreeItem item = (TreeItem)event.item;
 				if (item == null) return;
@@ -224,6 +222,7 @@ public class MacGeneratorUI {
 			}
 		});
 		nodesTree.addListener(SWT.Expand, new Listener() {
+			@Override
 			public void handleEvent(Event event) {
 				checkChildren((TreeItem)event.item);				
 			}
@@ -259,6 +258,7 @@ public class MacGeneratorUI {
 		editor.grabHorizontal = true;
 		editor.setEditor(editorTx);
 		Listener textListener = new Listener() {
+			@Override
 			public void handleEvent(Event e) {
 				if (e.type == SWT.KeyDown) {
 					if (e.keyCode != SWT.F6) return;
@@ -295,8 +295,10 @@ public class MacGeneratorUI {
 		editorTx.addListener(SWT.KeyDown, textListener);
 		editorTx.addListener(SWT.Traverse, textListener);
 		attribTable.addListener(SWT.MouseDown, new Listener() {
+			@Override
 			public void handleEvent(final Event e) {
 				e.display.asyncExec (new Runnable () {
+					@Override
 					public void run () {
 						if (attribTable.isDisposed ()) return;
 						if (e.button != 1) return;
@@ -335,6 +337,7 @@ public class MacGeneratorUI {
 		Button generate = new Button(panel, SWT.PUSH);
 		generate.setText("Generate");
 		generate.addListener(SWT.Selection, new Listener() {
+			@Override
 			public void handleEvent(Event event) {
 				generate(null);
 			}
@@ -394,6 +397,7 @@ public class MacGeneratorUI {
 		}
 		
 		sash.addListener(SWT.Selection, new Listener() {
+			@Override
 			public void handleEvent(Event event) {
 				Composite parent = sash.getParent();
 				Rectangle rect = parent.getClientArea();
@@ -589,7 +593,8 @@ public class MacGeneratorUI {
 		gen.setXmls(null);
 		flatNodes = null;
 		nodesTree.getDisplay().asyncExec(new Runnable() {
-			 public void run() {
+			 @Override
+			public void run() {
 				 if (nodesTree == null || nodesTree.isDisposed()) return;
 				 nodesTree.removeAll();
 				 attribTable.removeAll();
diff --git a/bundles/org.eclipse.swt.tools/NativeStats/org/eclipse/swt/tools/internal/NativeStats.java b/bundles/org.eclipse.swt.tools/NativeStats/org/eclipse/swt/tools/internal/NativeStats.java
index 0563cf0..652b63e 100644
--- a/bundles/org.eclipse.swt.tools/NativeStats/org/eclipse/swt/tools/internal/NativeStats.java
+++ b/bundles/org.eclipse.swt.tools/NativeStats/org/eclipse/swt/tools/internal/NativeStats.java
@@ -59,6 +59,7 @@ public class NativeStats {
 	public String getName() {
 		return name;
 	}
+	@Override
 	public int compareTo(Object func) {
 		return ((NativeFunction)func).callCount - callCount;
 	}
diff --git a/bundles/org.eclipse.swt.tools/Sleak/org/eclipse/swt/tools/internal/Sleak.java b/bundles/org.eclipse.swt.tools/Sleak/org/eclipse/swt/tools/internal/Sleak.java
index ac1ee2d..4ce8354 100644
--- a/bundles/org.eclipse.swt.tools/Sleak/org/eclipse/swt/tools/internal/Sleak.java
+++ b/bundles/org.eclipse.swt.tools/Sleak/org/eclipse/swt/tools/internal/Sleak.java
@@ -10,10 +10,11 @@
  *******************************************************************************/
 package org.eclipse.swt.tools.internal;
 
+import java.io.*;
+
 import org.eclipse.swt.*;
 import org.eclipse.swt.graphics.*;
 import org.eclipse.swt.widgets.*;
-import java.io.*;
 
 /**
  * Instructions on how to use the Sleak tool with a standlaone SWT example:
@@ -67,6 +68,7 @@ public static void main (String [] args) {
 public void create (Composite parent) {
 	list = new List (parent, SWT.BORDER | SWT.V_SCROLL);
 	list.addListener (SWT.Selection, new Listener () {
+		@Override
 		public void handleEvent (Event event) {
 			refreshObject ();
 		}
@@ -74,6 +76,7 @@ public void create (Composite parent) {
 	text = new Text (parent, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL);
 	canvas = new Canvas (parent, SWT.BORDER);
 	canvas.addListener (SWT.Paint, new Listener () {
+		@Override
 		public void handleEvent (Event event) {
 			paintCanvas (event);
 		}
@@ -81,6 +84,7 @@ public void create (Composite parent) {
 	check = new Button (parent, SWT.CHECK);
 	check.setText ("Stack");
 	check.addListener (SWT.Selection, new Listener () {
+		@Override
 		public void handleEvent (Event e) {
 			toggleStackTrace ();
 		}
@@ -88,6 +92,7 @@ public void create (Composite parent) {
 	start = new Button (parent, SWT.PUSH);
 	start.setText ("Snap");
 	start.addListener (SWT.Selection, new Listener () {
+		@Override
 		public void handleEvent (Event event) {
 			refreshAll ();
 		}
@@ -95,6 +100,7 @@ public void create (Composite parent) {
 	stop = new Button (parent, SWT.PUSH);
 	stop.setText ("Diff");
 	stop.addListener (SWT.Selection, new Listener () {
+		@Override
 		public void handleEvent (Event event) {
 			refreshDifference ();
 		}
@@ -102,6 +108,7 @@ public void create (Composite parent) {
 	label = new Label (parent, SWT.BORDER);
 	label.setText ("0 object(s)");
 	parent.addListener (SWT.Resize, new Listener () {
+		@Override
 		public void handleEvent (Event e) {
 			layout ();
 		}
diff --git a/bundles/org.eclipse.swt.tools/src/org/eclipse/swt/tools/builders/Check64EnableAction.java b/bundles/org.eclipse.swt.tools/src/org/eclipse/swt/tools/builders/Check64EnableAction.java
index 02184d5..eac0def 100644
--- a/bundles/org.eclipse.swt.tools/src/org/eclipse/swt/tools/builders/Check64EnableAction.java
+++ b/bundles/org.eclipse.swt.tools/src/org/eclipse/swt/tools/builders/Check64EnableAction.java
@@ -10,10 +10,9 @@
  *******************************************************************************/
 package org.eclipse.swt.tools.builders;
 
-import org.eclipse.jface.action.IAction;
-import org.eclipse.jface.viewers.ISelection;
-import org.eclipse.ui.IObjectActionDelegate;
-import org.eclipse.ui.IWorkbenchPart;
+import org.eclipse.jface.action.*;
+import org.eclipse.jface.viewers.*;
+import org.eclipse.ui.*;
 
 public class Check64EnableAction implements IObjectActionDelegate {
 
@@ -21,14 +20,17 @@ public class Check64EnableAction implements IObjectActionDelegate {
 		super();
 	}
 
+	@Override
 	public void setActivePart(IAction action, IWorkbenchPart targetPart) {
 		action.setChecked(Check64CompilationParticipant.getEnabled());
 	}
 
+	@Override
 	public void run(IAction action) {
 		Check64CompilationParticipant.setEnabled(action.isChecked());
 	}
 
+	@Override
 	public void selectionChanged(IAction action, ISelection selection) {
 	}
 
diff --git a/bundles/org.eclipse.swt.tools/src/org/eclipse/swt/tools/builders/JNIBuilder.java b/bundles/org.eclipse.swt.tools/src/org/eclipse/swt/tools/builders/JNIBuilder.java
index 66a32ee..5fe44bf 100644
--- a/bundles/org.eclipse.swt.tools/src/org/eclipse/swt/tools/builders/JNIBuilder.java
+++ b/bundles/org.eclipse.swt.tools/src/org/eclipse/swt/tools/builders/JNIBuilder.java
@@ -10,19 +10,11 @@
  *******************************************************************************/
 package org.eclipse.swt.tools.builders;
 
-import java.util.Map;
+import java.util.*;
 
-import org.eclipse.core.resources.IProject;
-import org.eclipse.core.resources.IResource;
-import org.eclipse.core.resources.IResourceDelta;
-import org.eclipse.core.resources.IResourceDeltaVisitor;
-import org.eclipse.core.resources.IWorkspaceRoot;
-import org.eclipse.core.resources.IncrementalProjectBuilder;
-import org.eclipse.core.runtime.CoreException;
-import org.eclipse.core.runtime.IPath;
-import org.eclipse.core.runtime.IProgressMonitor;
-import org.eclipse.swt.tools.internal.JNIGeneratorApp;
-import org.eclipse.swt.tools.internal.MetaData;
+import org.eclipse.core.resources.*;
+import org.eclipse.core.runtime.*;
+import org.eclipse.swt.tools.internal.*;
 
 public class JNIBuilder extends IncrementalProjectBuilder {
 
@@ -62,6 +54,7 @@ public class JNIBuilder extends IncrementalProjectBuilder {
 		IResourceDelta delta = getDelta(getProject());
 		if (delta == null) return null;
 		delta.accept(new IResourceDeltaVisitor() {
+			@Override
 			public boolean visit(IResourceDelta delta) throws CoreException {
 				IPath ipath = delta.getFullPath();
 				if (!"java".equals(ipath.getFileExtension())) return true;
diff --git a/bundles/org.eclipse.swt.tools/src/org/eclipse/swt/tools/views/MacGeneratorView.java b/bundles/org.eclipse.swt.tools/src/org/eclipse/swt/tools/views/MacGeneratorView.java
index 5c5a9f5..09ea461 100644
--- a/bundles/org.eclipse.swt.tools/src/org/eclipse/swt/tools/views/MacGeneratorView.java
+++ b/bundles/org.eclipse.swt.tools/src/org/eclipse/swt/tools/views/MacGeneratorView.java
@@ -38,12 +38,15 @@ public class MacGeneratorView extends ViewPart {
 		protected IStatus run(final IProgressMonitor monitor) {
 			try {
 				ui.generate(new ProgressMonitor() {
+					@Override
 					public void setMessage(String message) {
 						monitor.subTask(message);
 					}
+					@Override
 					public void setTotal(int total) {
 						monitor.beginTask("Generating", total);
 					}
+					@Override
 					public void step() {
 						monitor.worked(1);
 					}
@@ -66,6 +69,7 @@ public class MacGeneratorView extends ViewPart {
 		IWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();
 		root = workspaceRoot.findMember(new Path("org.eclipse.swt/Eclipse SWT PI/cocoa"));		
 		listener = new IResourceChangeListener() {
+			@Override
 			public void resourceChanged(IResourceChangeEvent event) {
 				if (job != null) return;
 				if (event.getType() != IResourceChangeEvent.POST_CHANGE) return;
@@ -74,6 +78,7 @@ public class MacGeneratorView extends ViewPart {
 				if (piDelta == null) return;
 				final ArrayList<IResource> changed = new ArrayList<IResource>();
 				IResourceDeltaVisitor visitor = new IResourceDeltaVisitor() {
+					@Override
 					public boolean visit(IResourceDelta delta) {
 						if (delta.getKind() != IResourceDelta.CHANGED) return true;
 						if ((delta.getFlags() & IResourceDelta.CONTENT) == 0) return true;
diff --git a/bundles/org.eclipse.swt.tools/src/org/eclipse/swt/tools/views/SpyView.java b/bundles/org.eclipse.swt.tools/src/org/eclipse/swt/tools/views/SpyView.java
index 79c6836..8e2196c 100644
--- a/bundles/org.eclipse.swt.tools/src/org/eclipse/swt/tools/views/SpyView.java
+++ b/bundles/org.eclipse.swt.tools/src/org/eclipse/swt/tools/views/SpyView.java
@@ -40,6 +40,7 @@ public class SpyView extends ViewPart {
 		output = new StyledText(parent, SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL | SWT.READ_ONLY);
 		
 		keyFilter = new Listener() {
+			@Override
 			public void handleEvent(Event e) {
 				// If this accelerator changes, change the tooltip text
 				if (e.keyCode == '.' && e.stateMask == (SWT.ALT | SWT.SHIFT | SWT.CONTROL)) {
@@ -56,6 +57,7 @@ public class SpyView extends ViewPart {
 		parent.getDisplay().addFilter(SWT.KeyDown, keyFilter);
 		
 		timer = new Runnable() {
+			@Override
 			public void run() {
 				if (output == null || output.isDisposed() || !spyAction.isChecked()) return;
 				Display display = output.getDisplay();

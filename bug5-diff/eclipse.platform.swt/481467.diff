commit 13aff36cf5e487afc79574bb15ceacadeb15daaf
Author: Marc-Andre Laperle <marc-andre.laperle@ericsson.com>
Date:   Tue Nov 3 23:46:18 2015 -0500

    Bug 481467 - SWT Tools: Split Sleak and Spy into its own 'spies' plug-in
    
    Change-Id: I728fdcd8853842adc7d6e987926ca10f39046845
    Signed-off-by: Marc-Andre Laperle <marc-andre.laperle@ericsson.com>

22	0	bundles/org.eclipse.swt.tools.base/.project
10	0	bundles/org.eclipse.swt.tools.base/META-INF/MANIFEST.MF
28	0	bundles/org.eclipse.swt.tools.base/about.html
16	0	bundles/org.eclipse.swt.tools.base/build.properties
13	0	bundles/org.eclipse.swt.tools.base/plugin.properties
11	0	bundles/org.eclipse.swt.tools.base/plugin.xml
24	0	bundles/org.eclipse.swt.tools.base/pom.xml
7	0	bundles/org.eclipse.swt.tools.spies/.classpath
28	0	bundles/org.eclipse.swt.tools.spies/.project
101	0	bundles/org.eclipse.swt.tools.spies/.settings/org.eclipse.jdt.core.prefs
64	0	bundles/org.eclipse.swt.tools.spies/.settings/org.eclipse.jdt.ui.prefs
15	0	bundles/org.eclipse.swt.tools.spies/META-INF/MANIFEST.MF
28	0	bundles/org.eclipse.swt.tools.spies/about.html
19	0	bundles/org.eclipse.swt.tools.spies/build.properties
-	-	bundles/org.eclipse.swt.tools.spies/icons/sleak.gif
-	-	bundles/org.eclipse.swt.tools.spies/icons/spy.gif
14	0	bundles/org.eclipse.swt.tools.spies/plugin.properties
22	0	bundles/org.eclipse.swt.tools.spies/plugin.xml
24	0	bundles/org.eclipse.swt.tools.spies/pom.xml
297	0	bundles/org.eclipse.swt.tools.spies/src/org/eclipse/swt/tools/internal/Sleak.java
65	0	bundles/org.eclipse.swt.tools.spies/src/org/eclipse/swt/tools/spies/Activator.java
66	0	bundles/org.eclipse.swt.tools.spies/src/org/eclipse/swt/tools/views/SleakView.java
513	0	bundles/org.eclipse.swt.tools.spies/src/org/eclipse/swt/tools/views/SpyView.java
0	1	bundles/org.eclipse.swt.tools/.classpath
3	1	bundles/org.eclipse.swt.tools/META-INF/MANIFEST.MF
0	297	bundles/org.eclipse.swt.tools/Sleak/org/eclipse/swt/tools/internal/Sleak.java
0	1	bundles/org.eclipse.swt.tools/build.properties
-	-	bundles/org.eclipse.swt.tools/icons/sleak.gif
-	-	bundles/org.eclipse.swt.tools/icons/spy.gif
0	19	bundles/org.eclipse.swt.tools/plugin.xml
0	66	bundles/org.eclipse.swt.tools/src/org/eclipse/swt/tools/views/SleakView.java
0	513	bundles/org.eclipse.swt.tools/src/org/eclipse/swt/tools/views/SpyView.java
13	0	features/org.eclipse.swt.tools.feature/feature.xml
2	0	pom.xml
diff --git a/bundles/org.eclipse.swt.tools.base/.project b/bundles/org.eclipse.swt.tools.base/.project
new file mode 100644
index 0000000..e8f1538
--- /dev/null
+++ b/bundles/org.eclipse.swt.tools.base/.project
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>org.eclipse.swt.tools.base</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.pde.ManifestBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.pde.SchemaBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.pde.PluginNature</nature>
+	</natures>
+</projectDescription>
diff --git a/bundles/org.eclipse.swt.tools.base/META-INF/MANIFEST.MF b/bundles/org.eclipse.swt.tools.base/META-INF/MANIFEST.MF
new file mode 100644
index 0000000..7ff1234
--- /dev/null
+++ b/bundles/org.eclipse.swt.tools.base/META-INF/MANIFEST.MF
@@ -0,0 +1,10 @@
+Manifest-Version: 1.0
+Bundle-Name: %pluginName
+Bundle-Vendor: %providerName
+Bundle-SymbolicName: org.eclipse.swt.tools.base;singleton:=true
+Bundle-Version: 3.106.0.qualifier
+Bundle-ManifestVersion: 2
+Bundle-ActivationPolicy: lazy
+Bundle-Localization: plugin
+Bundle-RequiredExecutionEnvironment: JavaSE-1.8
+Require-Bundle: org.eclipse.ui;bundle-version="3.4.0"
diff --git a/bundles/org.eclipse.swt.tools.base/about.html b/bundles/org.eclipse.swt.tools.base/about.html
new file mode 100644
index 0000000..4602330
--- /dev/null
+++ b/bundles/org.eclipse.swt.tools.base/about.html
@@ -0,0 +1,28 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
+    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml">
+<head>
+<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"/>
+<title>About</title>
+</head>
+<body lang="EN-US">
+<h2>About This Content</h2>
+ 
+<p>June 2, 2006</p>	
+<h3>License</h3>
+
+<p>The Eclipse Foundation makes available all content in this plug-in (&quot;Content&quot;).  Unless otherwise 
+indicated below, the Content is provided to you under the terms and conditions of the
+Eclipse Public License Version 1.0 (&quot;EPL&quot;).  A copy of the EPL is available 
+at <a href="http://www.eclipse.org/legal/epl-v10.html">http://www.eclipse.org/legal/epl-v10.html</a>.
+For purposes of the EPL, &quot;Program&quot; will mean the Content.</p>
+
+<p>If you did not receive this Content directly from the Eclipse Foundation, the Content is 
+being redistributed by another party (&quot;Redistributor&quot;) and different terms and conditions may
+apply to your use of any object code in the Content.  Check the Redistributor's license that was 
+provided with the Content.  If no such license exists, contact the Redistributor.  Unless otherwise
+indicated below, the terms and conditions of the EPL still apply to any source code in the Content
+and such source code may be obtained at <a href="http://www.eclipse.org">http://www.eclipse.org</a>.</p>
+
+</body>
+</html>
\ No newline at end of file
diff --git a/bundles/org.eclipse.swt.tools.base/build.properties b/bundles/org.eclipse.swt.tools.base/build.properties
new file mode 100644
index 0000000..4f2ca32
--- /dev/null
+++ b/bundles/org.eclipse.swt.tools.base/build.properties
@@ -0,0 +1,16 @@
+###############################################################################
+# Copyright (c) 2003, 2015 IBM Corporation and others.
+# All rights reserved. This program and the accompanying materials
+# are made available under the terms of the Eclipse Public License v1.0
+# which accompanies this distribution, and is available at
+# http://www.eclipse.org/legal/epl-v10.html
+#
+# Contributors:
+#     IBM Corporation - initial API and implementation
+###############################################################################
+bin.includes = about.html,\
+               plugin.xml,\
+               plugin.properties,\
+               META-INF/,\
+               .
+src.includes = about.html
diff --git a/bundles/org.eclipse.swt.tools.base/plugin.properties b/bundles/org.eclipse.swt.tools.base/plugin.properties
new file mode 100644
index 0000000..e5da959
--- /dev/null
+++ b/bundles/org.eclipse.swt.tools.base/plugin.properties
@@ -0,0 +1,13 @@
+###############################################################################
+# Copyright (c) 2000, 2015 IBM Corporation and others.
+# All rights reserved. This program and the accompanying materials
+# are made available under the terms of the Eclipse Public License v1.0
+# which accompanies this distribution, and is available at
+# http://www.eclipse.org/legal/epl-v10.html
+#
+# Contributors:
+#     IBM Corporation - initial API and implementation
+###############################################################################
+pluginName = SWT Tools Base
+viewCategory = SWT Tools
+providerName = Eclipse.org
diff --git a/bundles/org.eclipse.swt.tools.base/plugin.xml b/bundles/org.eclipse.swt.tools.base/plugin.xml
new file mode 100644
index 0000000..530f3f0
--- /dev/null
+++ b/bundles/org.eclipse.swt.tools.base/plugin.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<?eclipse version="3.0"?>
+<plugin>
+   <extension
+         point="org.eclipse.ui.views">
+      <category
+            id="org.eclipse.swt.swt.tools"
+            name="%viewCategory">
+      </category>
+   </extension>
+</plugin>
diff --git a/bundles/org.eclipse.swt.tools.base/pom.xml b/bundles/org.eclipse.swt.tools.base/pom.xml
new file mode 100644
index 0000000..bcba773
--- /dev/null
+++ b/bundles/org.eclipse.swt.tools.base/pom.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+  Copyright (c) 2012, 2015 Eclipse Foundation and others.
+  All rights reserved. This program and the accompanying materials
+  are made available under the terms of the Eclipse Distribution License v1.0
+  which accompanies this distribution, and is available at
+  http://www.eclipse.org/org/documents/edl-v10.php
+ 
+  Contributors:
+     Igor Fedorenko - initial implementation
+-->
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+  <parent>
+    <artifactId>eclipse.platform.swt.localbuild</artifactId>
+    <groupId>eclipse.platform.swt</groupId>
+    <version>4.7.0-SNAPSHOT</version>
+    <relativePath>../../local-build/local-build-parent/</relativePath>
+  </parent>
+  <groupId>org.eclipse.swt</groupId>
+  <artifactId>org.eclipse.swt.tools.base</artifactId>
+  <version>3.106.0-SNAPSHOT</version>
+  <packaging>eclipse-plugin</packaging>
+</project>
diff --git a/bundles/org.eclipse.swt.tools.spies/.classpath b/bundles/org.eclipse.swt.tools.spies/.classpath
new file mode 100644
index 0000000..eca7bdb
--- /dev/null
+++ b/bundles/org.eclipse.swt.tools.spies/.classpath
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8"/>
+	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>
diff --git a/bundles/org.eclipse.swt.tools.spies/.project b/bundles/org.eclipse.swt.tools.spies/.project
new file mode 100644
index 0000000..e650174
--- /dev/null
+++ b/bundles/org.eclipse.swt.tools.spies/.project
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>org.eclipse.swt.tools.spies</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.pde.ManifestBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.pde.SchemaBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.pde.PluginNature</nature>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>
diff --git a/bundles/org.eclipse.swt.tools.spies/.settings/org.eclipse.jdt.core.prefs b/bundles/org.eclipse.swt.tools.spies/.settings/org.eclipse.jdt.core.prefs
new file mode 100644
index 0000000..8d2948f
--- /dev/null
+++ b/bundles/org.eclipse.swt.tools.spies/.settings/org.eclipse.jdt.core.prefs
@@ -0,0 +1,101 @@
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.annotation.inheritNullAnnotations=disabled
+org.eclipse.jdt.core.compiler.annotation.missingNonNullByDefaultAnnotation=ignore
+org.eclipse.jdt.core.compiler.annotation.nonnull=org.eclipse.jdt.annotation.NonNull
+org.eclipse.jdt.core.compiler.annotation.nonnullbydefault=org.eclipse.jdt.annotation.NonNullByDefault
+org.eclipse.jdt.core.compiler.annotation.nullable=org.eclipse.jdt.annotation.Nullable
+org.eclipse.jdt.core.compiler.annotation.nullanalysis=disabled
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.codegen.methodParameters=do not generate
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.8
+org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
+org.eclipse.jdt.core.compiler.compliance=1.8
+org.eclipse.jdt.core.compiler.debug.lineNumber=generate
+org.eclipse.jdt.core.compiler.debug.localVariable=generate
+org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+org.eclipse.jdt.core.compiler.problem.annotationSuperInterface=warning
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.compiler.problem.autoboxing=ignore
+org.eclipse.jdt.core.compiler.problem.comparingIdentical=warning
+org.eclipse.jdt.core.compiler.problem.deadCode=warning
+org.eclipse.jdt.core.compiler.problem.deprecation=warning
+org.eclipse.jdt.core.compiler.problem.deprecationInDeprecatedCode=disabled
+org.eclipse.jdt.core.compiler.problem.deprecationWhenOverridingDeprecatedMethod=disabled
+org.eclipse.jdt.core.compiler.problem.discouragedReference=warning
+org.eclipse.jdt.core.compiler.problem.emptyStatement=ignore
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.problem.explicitlyClosedAutoCloseable=warning
+org.eclipse.jdt.core.compiler.problem.fallthroughCase=ignore
+org.eclipse.jdt.core.compiler.problem.fatalOptionalError=disabled
+org.eclipse.jdt.core.compiler.problem.fieldHiding=ignore
+org.eclipse.jdt.core.compiler.problem.finalParameterBound=warning
+org.eclipse.jdt.core.compiler.problem.finallyBlockNotCompletingNormally=warning
+org.eclipse.jdt.core.compiler.problem.forbiddenReference=error
+org.eclipse.jdt.core.compiler.problem.hiddenCatchBlock=warning
+org.eclipse.jdt.core.compiler.problem.includeNullInfoFromAsserts=disabled
+org.eclipse.jdt.core.compiler.problem.incompatibleNonInheritedInterfaceMethod=warning
+org.eclipse.jdt.core.compiler.problem.incompleteEnumSwitch=warning
+org.eclipse.jdt.core.compiler.problem.indirectStaticAccess=ignore
+org.eclipse.jdt.core.compiler.problem.localVariableHiding=ignore
+org.eclipse.jdt.core.compiler.problem.methodWithConstructorName=warning
+org.eclipse.jdt.core.compiler.problem.missingDefaultCase=ignore
+org.eclipse.jdt.core.compiler.problem.missingDeprecatedAnnotation=ignore
+org.eclipse.jdt.core.compiler.problem.missingEnumCaseDespiteDefault=disabled
+org.eclipse.jdt.core.compiler.problem.missingHashCodeMethod=ignore
+org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotation=warning
+org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotationForInterfaceMethodImplementation=enabled
+org.eclipse.jdt.core.compiler.problem.missingSerialVersion=warning
+org.eclipse.jdt.core.compiler.problem.missingSynchronizedOnInheritedMethod=ignore
+org.eclipse.jdt.core.compiler.problem.noEffectAssignment=warning
+org.eclipse.jdt.core.compiler.problem.noImplicitStringConversion=warning
+org.eclipse.jdt.core.compiler.problem.nonExternalizedStringLiteral=ignore
+org.eclipse.jdt.core.compiler.problem.nonnullParameterAnnotationDropped=warning
+org.eclipse.jdt.core.compiler.problem.nullAnnotationInferenceConflict=error
+org.eclipse.jdt.core.compiler.problem.nullReference=warning
+org.eclipse.jdt.core.compiler.problem.nullSpecViolation=error
+org.eclipse.jdt.core.compiler.problem.nullUncheckedConversion=warning
+org.eclipse.jdt.core.compiler.problem.overridingPackageDefaultMethod=warning
+org.eclipse.jdt.core.compiler.problem.parameterAssignment=ignore
+org.eclipse.jdt.core.compiler.problem.possibleAccidentalBooleanAssignment=ignore
+org.eclipse.jdt.core.compiler.problem.potentialNullReference=ignore
+org.eclipse.jdt.core.compiler.problem.potentiallyUnclosedCloseable=ignore
+org.eclipse.jdt.core.compiler.problem.rawTypeReference=warning
+org.eclipse.jdt.core.compiler.problem.redundantNullAnnotation=warning
+org.eclipse.jdt.core.compiler.problem.redundantNullCheck=ignore
+org.eclipse.jdt.core.compiler.problem.redundantSpecificationOfTypeArguments=warning
+org.eclipse.jdt.core.compiler.problem.redundantSuperinterface=ignore
+org.eclipse.jdt.core.compiler.problem.reportMethodCanBePotentiallyStatic=ignore
+org.eclipse.jdt.core.compiler.problem.reportMethodCanBeStatic=ignore
+org.eclipse.jdt.core.compiler.problem.specialParameterHidingField=disabled
+org.eclipse.jdt.core.compiler.problem.staticAccessReceiver=warning
+org.eclipse.jdt.core.compiler.problem.suppressOptionalErrors=disabled
+org.eclipse.jdt.core.compiler.problem.suppressWarnings=enabled
+org.eclipse.jdt.core.compiler.problem.syntacticNullAnalysisForFields=disabled
+org.eclipse.jdt.core.compiler.problem.syntheticAccessEmulation=ignore
+org.eclipse.jdt.core.compiler.problem.typeParameterHiding=warning
+org.eclipse.jdt.core.compiler.problem.unavoidableGenericTypeProblems=disabled
+org.eclipse.jdt.core.compiler.problem.uncheckedTypeOperation=warning
+org.eclipse.jdt.core.compiler.problem.unclosedCloseable=warning
+org.eclipse.jdt.core.compiler.problem.undocumentedEmptyBlock=ignore
+org.eclipse.jdt.core.compiler.problem.unhandledWarningToken=warning
+org.eclipse.jdt.core.compiler.problem.unnecessaryElse=ignore
+org.eclipse.jdt.core.compiler.problem.unnecessaryTypeCheck=ignore
+org.eclipse.jdt.core.compiler.problem.unqualifiedFieldAccess=ignore
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownException=ignore
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionExemptExceptionAndThrowable=enabled
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionIncludeDocCommentReference=enabled
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionWhenOverriding=disabled
+org.eclipse.jdt.core.compiler.problem.unusedExceptionParameter=ignore
+org.eclipse.jdt.core.compiler.problem.unusedImport=warning
+org.eclipse.jdt.core.compiler.problem.unusedLabel=warning
+org.eclipse.jdt.core.compiler.problem.unusedLocal=warning
+org.eclipse.jdt.core.compiler.problem.unusedObjectAllocation=ignore
+org.eclipse.jdt.core.compiler.problem.unusedParameter=ignore
+org.eclipse.jdt.core.compiler.problem.unusedParameterIncludeDocCommentReference=enabled
+org.eclipse.jdt.core.compiler.problem.unusedParameterWhenImplementingAbstract=disabled
+org.eclipse.jdt.core.compiler.problem.unusedParameterWhenOverridingConcrete=disabled
+org.eclipse.jdt.core.compiler.problem.unusedPrivateMember=warning
+org.eclipse.jdt.core.compiler.problem.unusedTypeParameter=ignore
+org.eclipse.jdt.core.compiler.problem.unusedWarningToken=warning
+org.eclipse.jdt.core.compiler.problem.varargsArgumentNeedCast=warning
+org.eclipse.jdt.core.compiler.source=1.8
diff --git a/bundles/org.eclipse.swt.tools.spies/.settings/org.eclipse.jdt.ui.prefs b/bundles/org.eclipse.swt.tools.spies/.settings/org.eclipse.jdt.ui.prefs
new file mode 100644
index 0000000..9d423fe
--- /dev/null
+++ b/bundles/org.eclipse.swt.tools.spies/.settings/org.eclipse.jdt.ui.prefs
@@ -0,0 +1,64 @@
+eclipse.preferences.version=1
+editor_save_participant_org.eclipse.jdt.ui.postsavelistener.cleanup=true
+org.eclipse.jdt.ui.ignorelowercasenames=true
+org.eclipse.jdt.ui.importorder=java;javax;org;com;
+org.eclipse.jdt.ui.ondemandthreshold=1
+org.eclipse.jdt.ui.staticondemandthreshold=1
+sp_cleanup.add_default_serial_version_id=true
+sp_cleanup.add_generated_serial_version_id=false
+sp_cleanup.add_missing_annotations=true
+sp_cleanup.add_missing_deprecated_annotations=true
+sp_cleanup.add_missing_methods=false
+sp_cleanup.add_missing_nls_tags=false
+sp_cleanup.add_missing_override_annotations=true
+sp_cleanup.add_missing_override_annotations_interface_methods=true
+sp_cleanup.add_serial_version_id=false
+sp_cleanup.always_use_blocks=true
+sp_cleanup.always_use_parentheses_in_expressions=false
+sp_cleanup.always_use_this_for_non_static_field_access=false
+sp_cleanup.always_use_this_for_non_static_method_access=false
+sp_cleanup.convert_functional_interfaces=false
+sp_cleanup.convert_to_enhanced_for_loop=false
+sp_cleanup.correct_indentation=false
+sp_cleanup.format_source_code=false
+sp_cleanup.format_source_code_changes_only=false
+sp_cleanup.insert_inferred_type_arguments=false
+sp_cleanup.make_local_variable_final=true
+sp_cleanup.make_parameters_final=false
+sp_cleanup.make_private_fields_final=true
+sp_cleanup.make_type_abstract_if_missing_method=false
+sp_cleanup.make_variable_declarations_final=false
+sp_cleanup.never_use_blocks=false
+sp_cleanup.never_use_parentheses_in_expressions=true
+sp_cleanup.on_save_use_additional_actions=true
+sp_cleanup.organize_imports=true
+sp_cleanup.qualify_static_field_accesses_with_declaring_class=false
+sp_cleanup.qualify_static_member_accesses_through_instances_with_declaring_class=true
+sp_cleanup.qualify_static_member_accesses_through_subtypes_with_declaring_class=true
+sp_cleanup.qualify_static_member_accesses_with_declaring_class=false
+sp_cleanup.qualify_static_method_accesses_with_declaring_class=false
+sp_cleanup.remove_private_constructors=true
+sp_cleanup.remove_redundant_type_arguments=true
+sp_cleanup.remove_trailing_whitespaces=false
+sp_cleanup.remove_trailing_whitespaces_all=true
+sp_cleanup.remove_trailing_whitespaces_ignore_empty=false
+sp_cleanup.remove_unnecessary_casts=true
+sp_cleanup.remove_unnecessary_nls_tags=false
+sp_cleanup.remove_unused_imports=false
+sp_cleanup.remove_unused_local_variables=false
+sp_cleanup.remove_unused_private_fields=true
+sp_cleanup.remove_unused_private_members=false
+sp_cleanup.remove_unused_private_methods=true
+sp_cleanup.remove_unused_private_types=true
+sp_cleanup.sort_members=false
+sp_cleanup.sort_members_all=false
+sp_cleanup.use_anonymous_class_creation=false
+sp_cleanup.use_blocks=false
+sp_cleanup.use_blocks_only_for_return_and_throw=false
+sp_cleanup.use_lambda=true
+sp_cleanup.use_parentheses_in_expressions=false
+sp_cleanup.use_this_for_non_static_field_access=false
+sp_cleanup.use_this_for_non_static_field_access_only_if_necessary=true
+sp_cleanup.use_this_for_non_static_method_access=false
+sp_cleanup.use_this_for_non_static_method_access_only_if_necessary=true
+sp_cleanup.use_type_arguments=false
diff --git a/bundles/org.eclipse.swt.tools.spies/META-INF/MANIFEST.MF b/bundles/org.eclipse.swt.tools.spies/META-INF/MANIFEST.MF
new file mode 100644
index 0000000..996bdbb
--- /dev/null
+++ b/bundles/org.eclipse.swt.tools.spies/META-INF/MANIFEST.MF
@@ -0,0 +1,15 @@
+Manifest-Version: 1.0
+Bundle-Name: %pluginName
+Bundle-Vendor: %providerName
+Bundle-SymbolicName: org.eclipse.swt.tools.spies;singleton:=true
+Bundle-Version: 3.106.0.qualifier
+Bundle-Activator: org.eclipse.swt.tools.spies.Activator
+Bundle-ManifestVersion: 2
+Export-Package: org.eclipse.swt.tools.spies,
+ org.eclipse.swt.tools.views
+Bundle-ActivationPolicy: lazy
+Bundle-Localization: plugin
+Bundle-RequiredExecutionEnvironment: JavaSE-1.8
+Require-Bundle: org.eclipse.core.runtime;bundle-version="3.4.0",
+ org.eclipse.ui;bundle-version="3.4.0",
+ org.eclipse.swt.tools.base;bundle-version="3.106.0"
diff --git a/bundles/org.eclipse.swt.tools.spies/about.html b/bundles/org.eclipse.swt.tools.spies/about.html
new file mode 100644
index 0000000..4602330
--- /dev/null
+++ b/bundles/org.eclipse.swt.tools.spies/about.html
@@ -0,0 +1,28 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
+    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml">
+<head>
+<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"/>
+<title>About</title>
+</head>
+<body lang="EN-US">
+<h2>About This Content</h2>
+ 
+<p>June 2, 2006</p>	
+<h3>License</h3>
+
+<p>The Eclipse Foundation makes available all content in this plug-in (&quot;Content&quot;).  Unless otherwise 
+indicated below, the Content is provided to you under the terms and conditions of the
+Eclipse Public License Version 1.0 (&quot;EPL&quot;).  A copy of the EPL is available 
+at <a href="http://www.eclipse.org/legal/epl-v10.html">http://www.eclipse.org/legal/epl-v10.html</a>.
+For purposes of the EPL, &quot;Program&quot; will mean the Content.</p>
+
+<p>If you did not receive this Content directly from the Eclipse Foundation, the Content is 
+being redistributed by another party (&quot;Redistributor&quot;) and different terms and conditions may
+apply to your use of any object code in the Content.  Check the Redistributor's license that was 
+provided with the Content.  If no such license exists, contact the Redistributor.  Unless otherwise
+indicated below, the terms and conditions of the EPL still apply to any source code in the Content
+and such source code may be obtained at <a href="http://www.eclipse.org">http://www.eclipse.org</a>.</p>
+
+</body>
+</html>
\ No newline at end of file
diff --git a/bundles/org.eclipse.swt.tools.spies/build.properties b/bundles/org.eclipse.swt.tools.spies/build.properties
new file mode 100644
index 0000000..c3b647a
--- /dev/null
+++ b/bundles/org.eclipse.swt.tools.spies/build.properties
@@ -0,0 +1,19 @@
+###############################################################################
+# Copyright (c) 2003, 2015 IBM Corporation and others.
+# All rights reserved. This program and the accompanying materials
+# are made available under the terms of the Eclipse Public License v1.0
+# which accompanies this distribution, and is available at
+# http://www.eclipse.org/legal/epl-v10.html
+#
+# Contributors:
+#     IBM Corporation - initial API and implementation
+###############################################################################
+bin.includes = about.html,\
+               plugin.xml,\
+               plugin.properties,\
+               META-INF/,\
+               icons/,\
+               .
+output.. = bin/
+source.. = src/
+src.includes = about.html
diff --git a/bundles/org.eclipse.swt.tools.spies/icons/sleak.gif b/bundles/org.eclipse.swt.tools.spies/icons/sleak.gif
new file mode 100644
index 0000000..444bd35
Binary files /dev/null and b/bundles/org.eclipse.swt.tools.spies/icons/sleak.gif differ
diff --git a/bundles/org.eclipse.swt.tools.spies/icons/spy.gif b/bundles/org.eclipse.swt.tools.spies/icons/spy.gif
new file mode 100644
index 0000000..98d6e2e
Binary files /dev/null and b/bundles/org.eclipse.swt.tools.spies/icons/spy.gif differ
diff --git a/bundles/org.eclipse.swt.tools.spies/plugin.properties b/bundles/org.eclipse.swt.tools.spies/plugin.properties
new file mode 100644
index 0000000..3b47cf5
--- /dev/null
+++ b/bundles/org.eclipse.swt.tools.spies/plugin.properties
@@ -0,0 +1,14 @@
+###############################################################################
+# Copyright (c) 2000, 2015 IBM Corporation and others.
+# All rights reserved. This program and the accompanying materials
+# are made available under the terms of the Eclipse Public License v1.0
+# which accompanies this distribution, and is available at
+# http://www.eclipse.org/legal/epl-v10.html
+#
+# Contributors:
+#     IBM Corporation - initial API and implementation
+###############################################################################
+pluginName = SWT Tools Spy
+providerName = Eclipse.org
+spyViewName = SWT Spy
+sleakViewName = Sleak
diff --git a/bundles/org.eclipse.swt.tools.spies/plugin.xml b/bundles/org.eclipse.swt.tools.spies/plugin.xml
new file mode 100644
index 0000000..c6524f9
--- /dev/null
+++ b/bundles/org.eclipse.swt.tools.spies/plugin.xml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<?eclipse version="3.0"?>
+<plugin>
+   <extension
+         point="org.eclipse.ui.views">
+      <view
+            allowMultiple="false"
+            category="org.eclipse.swt.swt.tools"
+            class="org.eclipse.swt.tools.views.SpyView"
+            icon="icons/spy.gif"
+            id="org.eclipse.swt.tools.views.SpyView"
+            name="%spyViewName">
+      </view>
+      <view
+            category="org.eclipse.swt.swt.tools"
+            class="org.eclipse.swt.tools.views.SleakView"
+            icon="icons/sleak.gif"
+            id="org.eclipse.swt.tools.views.SleakView"
+            name="%sleakViewName">
+      </view>
+   </extension>
+</plugin>
diff --git a/bundles/org.eclipse.swt.tools.spies/pom.xml b/bundles/org.eclipse.swt.tools.spies/pom.xml
new file mode 100644
index 0000000..3f778db
--- /dev/null
+++ b/bundles/org.eclipse.swt.tools.spies/pom.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+  Copyright (c) 2012, 2015 Eclipse Foundation and others.
+  All rights reserved. This program and the accompanying materials
+  are made available under the terms of the Eclipse Distribution License v1.0
+  which accompanies this distribution, and is available at
+  http://www.eclipse.org/org/documents/edl-v10.php
+ 
+  Contributors:
+     Igor Fedorenko - initial implementation
+-->
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+  <parent>
+    <artifactId>eclipse.platform.swt.localbuild</artifactId>
+    <groupId>eclipse.platform.swt</groupId>
+    <version>4.7.0-SNAPSHOT</version>
+    <relativePath>../../local-build/local-build-parent/</relativePath>
+  </parent>
+  <groupId>org.eclipse.swt</groupId>
+  <artifactId>org.eclipse.swt.tools.spies</artifactId>
+  <version>3.106.0-SNAPSHOT</version>
+  <packaging>eclipse-plugin</packaging>
+</project>
diff --git a/bundles/org.eclipse.swt.tools.spies/src/org/eclipse/swt/tools/internal/Sleak.java b/bundles/org.eclipse.swt.tools.spies/src/org/eclipse/swt/tools/internal/Sleak.java
new file mode 100644
index 0000000..64e6a80
--- /dev/null
+++ b/bundles/org.eclipse.swt.tools.spies/src/org/eclipse/swt/tools/internal/Sleak.java
@@ -0,0 +1,297 @@
+/*******************************************************************************
+ * Copyright (c) 2007, 2016 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.swt.tools.internal;
+
+import java.io.*;
+
+import org.eclipse.swt.*;
+import org.eclipse.swt.graphics.*;
+import org.eclipse.swt.widgets.*;
+
+/**
+ * Instructions on how to use the Sleak tool with a standlaone SWT example:
+ * 
+ * Modify the main method below to launch your application.
+ * Run Sleak.
+ * 
+ */
+public class Sleak {
+	List list;
+	Canvas canvas;
+	Button start, stop, check;
+	Text text;
+	Label label;
+	
+	Object [] oldObjects = new Object [0];
+	Error [] oldErrors = new Error [0];
+	Object [] objects = new Object [0];
+	Error [] errors = new Error [0];
+
+public static void main (String [] args) {
+	DeviceData data = new DeviceData();
+	data.tracking = true;
+	Display display = new Display (data);
+	Sleak sleak = new Sleak ();
+	Shell shell = new Shell(display);
+	shell.setText ("S-Leak");
+	Point size = shell.getSize ();
+	shell.setSize (size.x / 2, size.y / 2);
+	sleak.create (shell);
+	shell.open();
+	
+	// Launch your application here
+	// e.g.		
+//	Shell shell = new Shell(display);
+//	Button button1 = new Button(shell, SWT.PUSH);
+//	button1.setBounds(10, 10, 100, 50);
+//	button1.setText("Hello World");
+//	Image image = new Image(display, 20, 20);
+//	Button button2 = new Button(shell, SWT.PUSH);
+//	button2.setBounds(10, 70, 100, 50);
+//	button2.setImage(image);
+//	shell.open();
+	
+	while (!shell.isDisposed ()) {
+		if (!display.readAndDispatch ()) display.sleep ();
+	}
+	display.dispose ();
+}
+
+public void create (Composite parent) {
+	list = new List (parent, SWT.BORDER | SWT.V_SCROLL);
+	list.addListener (SWT.Selection, event -> refreshObject ());
+	text = new Text (parent, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL);
+	canvas = new Canvas (parent, SWT.BORDER);
+	canvas.addListener (SWT.Paint, event -> paintCanvas (event));
+	check = new Button (parent, SWT.CHECK);
+	check.setText ("Stack");
+	check.addListener (SWT.Selection, e -> toggleStackTrace ());
+	start = new Button (parent, SWT.PUSH);
+	start.setText ("Snap");
+	start.addListener (SWT.Selection, event -> refreshAll ());
+	stop = new Button (parent, SWT.PUSH);
+	stop.setText ("Diff");
+	stop.addListener (SWT.Selection, event -> refreshDifference ());
+	label = new Label (parent, SWT.BORDER);
+	label.setText ("0 object(s)");
+	parent.addListener (SWT.Resize, e -> layout ());
+	check.setSelection (false);
+	text.setVisible (false);
+	layout();
+}
+
+void refreshLabel () {
+	int colors = 0, cursors = 0, fonts = 0, gcs = 0, images = 0;
+	int paths = 0, patterns = 0, regions = 0, textLayouts = 0, transforms= 0;
+	for (int i=0; i<objects.length; i++) {
+		Object object = objects [i];
+		if (object instanceof Color) colors++;
+		if (object instanceof Cursor) cursors++;
+		if (object instanceof Font) fonts++;
+		if (object instanceof GC) gcs++;
+		if (object instanceof Image) images++;
+		if (object instanceof Path) paths++;
+		if (object instanceof Pattern) patterns++;
+		if (object instanceof Region) regions++;
+		if (object instanceof TextLayout) textLayouts++;
+		if (object instanceof Transform) transforms++;
+	}
+	String string = "";
+	if (colors != 0) string += colors + " Color(s)\n";
+	if (cursors != 0) string += cursors + " Cursor(s)\n";
+	if (fonts != 0) string += fonts + " Font(s)\n";
+	if (gcs != 0) string += gcs + " GC(s)\n";
+	if (images != 0) string += images + " Image(s)\n";
+	if (paths != 0) string += paths + " Paths(s)\n";
+	if (patterns != 0) string += patterns + " Pattern(s)\n";
+	if (regions != 0) string += regions + " Region(s)\n";
+	if (textLayouts != 0) string += textLayouts + " TextLayout(s)\n";
+	if (transforms != 0) string += transforms + " Transform(s)\n";
+	if (string.length () != 0) {
+		string = string.substring (0, string.length () - 1);
+	}
+	label.setText (string);
+}
+
+void refreshDifference () {
+	Display display = canvas.getDisplay();
+	DeviceData info = display.getDeviceData ();
+	if (!info.tracking) {
+		Shell shell = canvas.getShell();
+		MessageBox dialog = new MessageBox (shell, SWT.ICON_WARNING | SWT.OK);
+		dialog.setText (shell.getText ());
+		dialog.setMessage ("Warning: Device is not tracking resource allocation");
+		dialog.open ();
+	}
+	Object [] newObjects = info.objects;
+	Error [] newErrors = info.errors;
+	Object [] diffObjects = new Object [newObjects.length];
+	Error [] diffErrors = new Error [newErrors.length];
+	int count = 0;
+	for (int i=0; i<newObjects.length; i++) {
+		int index = 0;
+		while (index < oldObjects.length) {
+			if (newObjects [i] == oldObjects [index]) break;
+			index++;
+		}
+		if (index == oldObjects.length) {
+			diffObjects [count] = newObjects [i];
+			diffErrors [count] = newErrors [i];
+			count++;
+		}
+	}
+	objects = new Object [count];
+	errors = new Error [count];
+	System.arraycopy (diffObjects, 0, objects, 0, count);
+	System.arraycopy (diffErrors, 0, errors, 0, count);
+	list.removeAll ();
+	text.setText ("");
+	canvas.redraw ();
+	for (int i=0; i<objects.length; i++) {
+		list.add (objects [i].toString());
+	}
+	refreshLabel ();
+	layout ();
+}
+
+void toggleStackTrace () {
+	refreshObject ();
+	layout ();
+}
+
+void paintCanvas (Event event) {
+	canvas.setCursor (null);
+	int index = list.getSelectionIndex ();
+	if (index == -1) return;
+	GC gc = event.gc;
+	Object object = objects [index];
+	if (object instanceof Color) {
+		if (((Color)object).isDisposed ()) return;
+		gc.setBackground ((Color) object);
+		gc.fillRectangle (canvas.getClientArea());
+		return;
+	}
+	if (object instanceof Cursor) {
+		if (((Cursor)object).isDisposed ()) return;
+		canvas.setCursor ((Cursor) object);
+		return;
+	}
+	if (object instanceof Font) {
+		if (((Font)object).isDisposed ()) return;
+		gc.setFont ((Font) object);
+		FontData [] array = gc.getFont ().getFontData ();
+		String string = "";
+		String lf = text.getLineDelimiter ();
+		for (int i=0; i<array.length; i++) {
+			FontData data = array [i];
+			String style = "NORMAL";
+			int bits = data.getStyle ();
+			if (bits != 0) {
+				if ((bits & SWT.BOLD) != 0) style = "BOLD ";
+				if ((bits & SWT.ITALIC) != 0) style += "ITALIC";
+			}
+			string += data.getName () + " " + data.getHeight () + " " + style + lf;
+		}
+		gc.drawString (string, 0, 0);
+		return;
+	}
+	//NOTHING TO DRAW FOR GC
+//	if (object instanceof GC) {
+//		return;
+//	}
+	if (object instanceof Image) {
+		if (((Image)object).isDisposed ()) return;
+		gc.drawImage ((Image) object, 0, 0);
+		return;
+	}
+	if (object instanceof Path) {
+		if (((Path)object).isDisposed ()) return;
+		gc.drawPath ((Path) object);
+		return;
+	}
+	if (object instanceof Pattern) {
+		if (((Pattern)object).isDisposed ()) return;
+		gc.setBackgroundPattern ((Pattern)object);
+		gc.fillRectangle (canvas.getClientArea ());
+		gc.setBackgroundPattern (null);
+		return;
+	}
+	if (object instanceof Region) {
+		if (((Region)object).isDisposed ()) return;
+		String string = ((Region)object).getBounds().toString();
+		gc.drawString (string, 0, 0);
+		return;
+	}
+	if (object instanceof TextLayout) {
+		if (((TextLayout)object).isDisposed ()) return;
+		((TextLayout)object).draw (gc, 0, 0);
+		return;
+	}
+	if (object instanceof Transform) {
+		if (((Transform)object).isDisposed ()) return;
+		String string = ((Transform)object).toString();
+		gc.drawString (string, 0, 0);
+		return;
+	}
+}
+
+void refreshObject () {
+	int index = list.getSelectionIndex ();
+	if (index == -1) return;
+	if (check.getSelection ()) {
+		ByteArrayOutputStream stream = new ByteArrayOutputStream ();
+		PrintStream s = new PrintStream (stream);
+		errors [index].printStackTrace (s);
+		text.setText (stream.toString ());
+		text.setVisible (true);
+		canvas.setVisible (false);
+	} else {
+		canvas.setVisible (true);
+		text.setVisible (false);
+		canvas.redraw ();
+	}
+}
+
+void refreshAll () {
+	oldObjects = new Object [0];
+	oldErrors = new Error [0];
+	refreshDifference ();
+	oldObjects = objects;
+	oldErrors = errors;
+}
+
+void layout () {
+	Composite parent = canvas.getParent();
+	Rectangle rect = parent.getClientArea ();
+	int width = 0;
+	String [] items = list.getItems ();
+	GC gc = new GC (list);
+	for (int i=0; i<objects.length; i++) {
+		width = Math.max (width, gc.stringExtent (items [i]).x);
+	}
+	gc.dispose ();
+	Point size1 = start.computeSize (SWT.DEFAULT, SWT.DEFAULT);
+	Point size2 = stop.computeSize (SWT.DEFAULT, SWT.DEFAULT);
+	Point size3 = check.computeSize (SWT.DEFAULT, SWT.DEFAULT);
+	Point size4 = label.computeSize (SWT.DEFAULT, SWT.DEFAULT);
+	width = Math.max (size1.x, Math.max (size2.x, Math.max (size3.x, width)));
+	width = Math.max (64, Math.max (size4.x, list.computeSize (width, SWT.DEFAULT).x));
+	start.setBounds (0, 0, width, size1.y);
+	stop.setBounds (0, size1.y, width, size2.y);
+	check.setBounds (0, size1.y + size2.y, width, size3.y);
+	label.setBounds (0, rect.height - size4.y, width, size4.y);
+	int height = size1.y + size2.y + size3.y;
+	list.setBounds (0, height, width, rect.height - height - size4.y);
+	text.setBounds (width, 0, rect.width - width, rect.height);
+	canvas.setBounds (width, 0, rect.width - width, rect.height);
+}
+		
+}
diff --git a/bundles/org.eclipse.swt.tools.spies/src/org/eclipse/swt/tools/spies/Activator.java b/bundles/org.eclipse.swt.tools.spies/src/org/eclipse/swt/tools/spies/Activator.java
new file mode 100644
index 0000000..0f43c9c
--- /dev/null
+++ b/bundles/org.eclipse.swt.tools.spies/src/org/eclipse/swt/tools/spies/Activator.java
@@ -0,0 +1,65 @@
+/*******************************************************************************
+ * Copyright (c) 2008, 2015 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.swt.tools.spies;
+
+import org.eclipse.jface.resource.*;
+import org.eclipse.ui.plugin.*;
+import org.osgi.framework.*;
+
+/**
+ * The activator class controls the plug-in life cycle
+ */
+public class Activator extends AbstractUIPlugin {
+
+	// The plug-in ID
+	public static final String PLUGIN_ID = "org.eclipse.swt.tools.spies";
+
+	// The shared instance
+	private static Activator plugin;
+	
+	/**
+	 * The constructor
+	 */
+	public Activator() {
+	}
+
+	@Override
+	public void start(BundleContext context) throws Exception {
+		super.start(context);
+		plugin = this;
+	}
+
+	@Override
+	public void stop(BundleContext context) throws Exception {
+		plugin = null;
+		super.stop(context);
+	}
+
+	/**
+	 * Returns the shared instance
+	 *
+	 * @return the shared instance
+	 */
+	public static Activator getDefault() {
+		return plugin;
+	}
+
+	/**
+	 * Returns an image descriptor for the image file at the given
+	 * plug-in relative path
+	 *
+	 * @param path the path
+	 * @return the image descriptor
+	 */
+	public static ImageDescriptor getImageDescriptor(String path) {
+		return imageDescriptorFromPlugin(PLUGIN_ID, path);
+	}
+}
diff --git a/bundles/org.eclipse.swt.tools.spies/src/org/eclipse/swt/tools/views/SleakView.java b/bundles/org.eclipse.swt.tools.spies/src/org/eclipse/swt/tools/views/SleakView.java
new file mode 100644
index 0000000..149e69a
--- /dev/null
+++ b/bundles/org.eclipse.swt.tools.spies/src/org/eclipse/swt/tools/views/SleakView.java
@@ -0,0 +1,66 @@
+/*******************************************************************************
+ * Copyright (c) 2004, 2013 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.swt.tools.views;
+
+import org.eclipse.swt.*;
+import org.eclipse.swt.tools.internal.*;
+import org.eclipse.swt.widgets.*;
+import org.eclipse.ui.part.*;
+
+/**
+ * This sample class demonstrates how to plug-in a new
+ * workbench view. The view shows data obtained from the
+ * model. The sample creates a dummy model on the fly,
+ * but a real implementation would connect to the model
+ * available either in this or another plug-in (e.g. the workspace).
+ * The view is connected to the model using a content provider.
+ * <p>
+ * The view uses a label provider to define how model
+ * objects should be presented in the view. Each
+ * view can present the same model objects using
+ * different labels and icons, if needed. Alternatively,
+ * a single label provider can be shared between views
+ * in order to ensure that objects of the same type are
+ * presented in the same way everywhere.
+ * <p>
+ */
+
+public class SleakView extends ViewPart {
+
+	Composite parent = null;
+	Sleak sleak = null;
+
+	/**
+	 * The constructor.
+	 */
+	public SleakView() {
+	}
+
+	/**
+	 * This is a callback that will allow us
+	 * to create the viewer and initialize it.
+	 */
+	@Override
+	public void createPartControl(Composite parent) {
+		this.parent = new Composite(parent, SWT.NONE);
+		sleak = new Sleak ();
+		sleak.create(this.parent);
+	}
+
+	/**
+	 * Passing the focus request to the viewer's control.
+	 */
+	@Override
+	public void setFocus() {
+		parent.setFocus();
+	}
+
+}
\ No newline at end of file
diff --git a/bundles/org.eclipse.swt.tools.spies/src/org/eclipse/swt/tools/views/SpyView.java b/bundles/org.eclipse.swt.tools.spies/src/org/eclipse/swt/tools/views/SpyView.java
new file mode 100644
index 0000000..d5e7f14
--- /dev/null
+++ b/bundles/org.eclipse.swt.tools.spies/src/org/eclipse/swt/tools/views/SpyView.java
@@ -0,0 +1,513 @@
+/*******************************************************************************
+ * Copyright (c) 2004, 2016 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.swt.tools.views;
+
+import java.io.*;
+import java.lang.reflect.*;
+
+import org.eclipse.jface.action.*;
+import org.eclipse.swt.*;
+import org.eclipse.swt.custom.*;
+import org.eclipse.swt.tools.spies.*;
+import org.eclipse.swt.widgets.*;
+import org.eclipse.ui.*;
+import org.eclipse.ui.part.*;
+
+public class SpyView extends ViewPart {
+	private StyledText output;
+	private Action spyAction, fullyQualifiedAction;
+	private Listener keyFilter;
+	private Runnable timer;
+	private Control lastControl;
+	private Field field;
+	
+	static final int TIMEOUT = 100;
+
+	/**
+	 * This is a callback that will allow us
+	 * to create the viewer and initialize it.
+	 */
+	@Override
+	public void createPartControl(Composite parent) {
+		output = new StyledText(parent, SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL | SWT.READ_ONLY);
+		
+		keyFilter = e -> {
+			// If this accelerator changes, change the tooltip text
+			if (e.keyCode == '.' && e.stateMask == (SWT.ALT | SWT.SHIFT | SWT.CONTROL)) {
+				if (spyAction.isChecked()) {
+					spyAction.setChecked(false);
+				} else {
+					spyAction.setChecked(true);
+					spyAction.run();
+				}
+				e.type = SWT.None;
+			}
+		};
+		parent.getDisplay().addFilter(SWT.KeyDown, keyFilter);
+		
+		timer = new Runnable() {
+			@Override
+			public void run() {
+				if (output == null || output.isDisposed() || !spyAction.isChecked()) return;
+				Display display = output.getDisplay();
+				Control control = display.getCursorControl();
+				if (control != lastControl) {
+					StringBuffer text = new StringBuffer();
+					if (control != null) {
+						text.append(getName(control)+"@"+getOSHandle(control)+"\n");
+						text.append("\tStyle: "+getStyle(control)+"\n");
+						text.append("\tLayout Data: "+getName(control.getLayoutData())+"\n");
+						text.append("\tBounds: "+control.getBounds()+"\n");
+						if (control instanceof Composite && ((Composite)control).getLayout() != null) {
+							text.append("\tLayout: "+getName(((Composite)control).getLayout())+"\n");
+						}
+						text.append("\n");
+						if (control instanceof Composite) {
+							text.append("\nChildren:\n");
+							Control[] children = ((Composite)control).getChildren();
+							for (int i = 0; i < children.length; i++) {
+								text.append("\t"+getName(children[i])+"\n");
+							}
+						}
+						Composite parent = control.getParent();
+						if (parent != null) {
+							text.append("\nPeers:\n");
+							Control[] peers = parent.getChildren();
+							for (int i = 0; i < peers.length; i++) {
+								text.append("\t");
+								if (peers[i] == control) text.append("*");
+								text.append(getName(peers[i])+"@"+getOSHandle(peers[i]));
+								text.append(" Layout Data: "+getName(peers[i].getLayoutData()));
+								text.append(" Bounds: "+peers[i].getBounds());
+								text.append("\n");
+							}
+							text.append("\nParent Tree:\n");
+							Composite[] parents = new Composite[0];
+							while (parent != null) {
+								Composite[] newParents = new Composite[parents.length + 1];
+								System.arraycopy(parents, 0, newParents, 0, parents.length);
+								newParents[parents.length] = parent;
+								parents = newParents;
+								parent = parent.getParent();
+							}
+							for (int i = parents.length - 1; i >= 0; i--) {
+								String prefix = "\t";
+								for (int j = 0; j < parents.length - i - 1; j++) {
+									prefix += "\t";
+								}
+								text.append(prefix + getName(parents[i])+"@"+getOSHandle(parents[i])+"\n");
+								text.append(prefix+"\t Style: "+getStyle(parents[i])+"\n");
+								text.append(prefix+"\t Bounds: "+parents[i].getBounds()+"\n");
+								text.append(prefix+"\t Layout: "+getName(parents[i].getLayout())+"\n");
+								text.append(prefix+"\t LayoutData: "+getName(parents[i].getLayoutData())+"\n");
+							}
+						}
+						Error error = (Error)control.getData("StackTrace");
+						if (error != null) {
+							text.append("\nCreation Stack Trace:\n");
+							ByteArrayOutputStream stream = new ByteArrayOutputStream();
+							PrintStream s = new PrintStream(stream);
+							error.printStackTrace(s);
+							text.append(stream.toString());
+						}
+					}
+					output.setText(text.toString());
+				}
+				lastControl = control;
+				display.timerExec(100, this);			
+			}
+		};
+		
+		makeActions();
+		contributeToActionBars();
+	}
+	
+	String getName(Object object) {
+		if (object == null) return "null";
+		String name = object.toString ();
+		if (fullyQualifiedAction.isChecked()) {
+			int index = name.indexOf(' ');
+			if (index >= 0 && name.length() >= 1) {
+				name = object.getClass ().getName () + name.substring(index);
+			}
+		}
+		return name;
+	}
+	
+	/**
+	 * Passing the focus request to the viewer's control.
+	 */
+	@Override
+	public void setFocus() {
+		if (output != null & !output.isDisposed()) output.setFocus();
+	}
+	
+	private String getOSHandle(Control control) {
+		if (field == null) {
+			String[] fieldNames = {"handle", "view"};
+			for (int i = 0; i < fieldNames.length; i++) {
+				try {
+					field = control.getClass().getField(fieldNames[i]);
+					if (field != null) break;
+				} catch (Throwable e) {}
+			}
+		}
+		try {
+			return field.get(control).toString();
+		} catch (Throwable e) {}
+		return "";
+	}
+	
+	private void contributeToActionBars() {
+		IActionBars bars = getViewSite().getActionBars();
+		fillLocalPullDown(bars.getMenuManager());
+		fillLocalToolBar(bars.getToolBarManager());
+	}
+	
+	@Override
+	public void dispose() {
+		if (keyFilter != null) {
+			Display.getCurrent().removeFilter(SWT.KeyDown, keyFilter);
+		}
+		super.dispose();
+	}
+
+	private void fillLocalPullDown(IMenuManager manager) {
+		manager.add(spyAction);
+		manager.add(fullyQualifiedAction);
+	}
+
+	private void fillLocalToolBar(IToolBarManager manager) {
+		manager.add(spyAction);
+	}
+	
+	private void makeActions() {
+		spyAction = new Action("Spy", IAction.AS_CHECK_BOX) {
+			@Override
+			public void run() {
+				Display.getCurrent().timerExec(TIMEOUT, timer);
+			}
+		};
+		spyAction.setToolTipText("Toggle Spy (CONTROL+ALT+SHIFT+.)");
+		spyAction.setImageDescriptor(Activator.getImageDescriptor("icons/spy.gif"));
+		
+		fullyQualifiedAction = new Action("Fully Qualify Names", IAction.AS_CHECK_BOX) {
+			@Override
+			public void run() {
+			}
+		};
+	}
+	
+	private String getStyle(Widget w) {
+		//MODELESS = 0;
+		//BAR = 1 << 1;
+		//SEPARATOR = 1 << 1;
+		//TOGGLE = 1 << 1;
+		//MULTI = 1 << 1;
+		//INDETERMINATE = 1 << 1;
+		//DBCS = 1 << 1;
+		//ALPHA = 1 << 2;
+		//TOOL = 1 << 2; 
+		//SINGLE = 1 << 2;
+		//ARROW = 1 << 2;
+		//DROP_DOWN = 1 << 2;
+		//SHADOW_IN = 1 << 2;
+		//POP_UP = 1 << 3;
+		//PUSH = 1 << 3;
+		//READ_ONLY = 1 << 3;
+		//SHADOW_OUT = 1 << 3;
+		//NO_TRIM = 1 << 3;
+		//NATIVE = 1 << 3;
+		//RESIZE = 1 << 4;
+		//SHADOW_ETCHED_IN = 1 << 4;
+		//RADIO = 1 << 4;
+		//PHONETIC = 1 << 4;
+		//ROMAN = 1 << 5;
+		//CHECK = 1 << 5;
+		//SHADOW_NONE = 1 << 5;
+		//TITLE = 1 << 5;
+		//DATE = 1 << 5;
+		//CLOSE = 1 << 6;
+		//MENU = CLOSE;
+		//CASCADE = 1 << 6;
+		//WRAP = 1 << 6;
+		//SIMPLE = 1 << 6;
+		//SHADOW_ETCHED_OUT = 1 << 6;
+		//MIN = 1 << 7;
+		//UP = 1 << 7;
+		//TOP = UP;
+		//TIME = 1 << 7;
+		//HORIZONTAL = 1 << 8;
+		//H_SCROLL = 1 << 8;
+		//V_SCROLL = 1 << 9;
+		//VERTICAL = 1 << 9;
+		//MAX = 1 << 10;
+		//DOWN               = 1 << 10;
+		//BOTTOM             = DOWN;
+		//CALENDAR = 1 << 10;
+		//BORDER = 1 << 11;
+		//CLIP_CHILDREN = 1 << 12; 
+		//BALLOON = 1 << 12;
+		//CLIP_SIBLINGS = 1 << 13;
+		//ON_TOP = 1 << 14;
+		//LEAD               = 1 << 14;
+		//LEFT               = LEAD;
+		//PRIMARY_MODAL = 1 << 15;
+		//HIDE_SELECTION = 1 << 15;
+		//SHORT = 1 << 15;
+		//MEDIUM = 1 << 16;
+		//FULL_SELECTION = 1 << 16;
+		//SMOOTH = 1 << 16;
+		//APPLICATION_MODAL = 1 << 16;
+		//SYSTEM_MODAL = 1 << 17;
+		//TRAIL              = 1 << 17;	
+		//RIGHT              = TRAIL;
+		//NO_BACKGROUND = 1 << 18;
+		//NO_FOCUS = 1 << 19;
+		//NO_REDRAW_RESIZE = 1 << 20;
+		//NO_MERGE_PAINTS = 1 << 21;
+		//NO_RADIO_GROUP = 1 << 22;
+		//PASSWORD = 1 << 22;
+		//FLAT = 1 << 23;
+		//EMBEDDED = 1 << 24;
+		//CENTER = 1 << 24;
+		//LEFT_TO_RIGHT = 1 << 25;
+		//RIGHT_TO_LEFT = 1 << 26;
+		//MIRRORED = 1 << 27;
+		//VIRTUAL = 1 << 28;
+		//LONG = 1 << 28;
+		//DOUBLE_BUFFERED = 1 << 29;
+		
+		int style = w.getStyle();
+		String result = "";
+		if (style == SWT.DEFAULT) {
+			return "DEFAULT - bad!";
+		}
+		if ((style & 1 << 1) != 0) {
+			if (w instanceof CTabFolder || w instanceof StyledText || w instanceof List || w instanceof Text || w instanceof Table || w instanceof Tree) {
+				result += "MULTI | ";
+			} else if (w instanceof Menu) {
+				result += "BAR | ";
+			} else if (w instanceof Label || w instanceof MenuItem || w instanceof ToolItem) {
+				result += "SEPARATOR | ";
+			} else if (w instanceof Button) {
+				result += "TOGGLE | ";
+			} else if (w instanceof ProgressBar) {
+				result += "INDETERMINATE | ";
+			} else {
+				result += "BAR or SEPARATOR or TOGGLE or MULTI or INDETERMINATE or DBCS | ";	
+			}
+		}
+		if ((style & 1 << 2) != 0) {
+			if (w instanceof Menu || w instanceof ToolItem || w instanceof CoolItem || w instanceof Combo) {
+				result += "DROP_DOWN | ";
+			} else if (w instanceof Button) {
+				result += "ARROW | ";
+			} else if (w instanceof CTabFolder || w instanceof StyledText || w instanceof List || w instanceof Text || w instanceof Table || w instanceof Tree) {
+				result += "SINGLE | ";
+			} else if (w instanceof Label || w instanceof Group) {
+				result += "SHADOW_IN | ";
+			} else if (w instanceof Decorations) {
+				result += "TOOL | ";
+			} else {
+				result += "ALPHA or TOOL or SINGLE or ARROW or DROP_DOWN or SHADOW_IN | ";
+			}
+		}
+		if ((style & 1 << 3) != 0) {
+			if (w instanceof Menu) {
+				result += "POP_UP | ";
+			} else if (w instanceof Button || w instanceof MenuItem || w instanceof ToolItem) {
+				result += "PUSH | ";
+			} else if (w instanceof Combo || w instanceof Text || w instanceof StyledText) {
+				result += "READ_ONLY | ";
+			} else if (w instanceof Label || w instanceof Group || w instanceof ToolBar) {
+				result += "SHADOW_OUT | ";
+			} else if (w instanceof Decorations) {
+				result += "NO_TRIM | ";	
+			} else {
+				result += "POP_UP or PUSH or READ_ONLY or SHADOW_OUT or NO_TRIM or NATIVE | ";
+			}
+		}
+		if ((style & 1 << 4) != 0) {
+			if (w instanceof Button || w instanceof MenuItem || w instanceof ToolItem) {
+				result += "RADIO | ";
+			} else if (w instanceof Group) {
+				result += "SHADOW_ETCHED_IN | ";
+			} else if (w instanceof Decorations || w instanceof Tracker) {
+				result += "RESIZE | ";
+			} else {
+				result += "RESIZE or SHADOW_ETCHED_IN or RADIO or PHONETIC | ";
+			}
+		}
+		if ((style & 1 << 5) != 0) {
+			if (w instanceof Button || w instanceof MenuItem || w instanceof ToolItem || w instanceof Table || w instanceof Tree) {
+				result += "CHECK | ";
+			} else if (w instanceof Label || w instanceof Group) {
+				result += "SHADOW_NONE | ";
+			} else if (w instanceof Decorations) {
+				result += "TITLE | ";
+			} else if (w instanceof DateTime) {
+				result += "DATE | ";
+			} else {
+				result += "ROMAN or CHECK  or SHADOW_NONE or TITLE | ";
+			}
+		}
+		if ((style & 1 << 6) != 0) {
+			if (w instanceof MenuItem) {
+				result += "CASCADE | ";
+			} else if (w instanceof StyledText || w instanceof Label || w instanceof Text || w instanceof ToolBar) {
+				result += "WRAP | ";
+			} else if (w instanceof Combo) {
+				result += "SIMPLE | ";
+			} else if (w instanceof Group) {
+				result += "SHADOW_ETCHED_OUT | ";
+			} else if (w instanceof Decorations || w instanceof CTabFolder || w instanceof CTabItem) {
+				result += "CLOSE | ";
+			} else {
+				result += "CLOSE or MENU or CASCADE or WRAP or SIMPLE or SHADOW_ETCHED_OUT | ";
+			}
+		}
+		if ((style & 1 << 7) != 0) {
+			if (w instanceof Decorations) {
+				result += "MIN | ";
+			} else if (w instanceof Button || w instanceof Tracker) {
+				result += "UP | ";
+			} else if (w instanceof CTabFolder) {
+				result += "TOP | ";
+			} else if (w instanceof DateTime) {
+				result += "TIME | ";
+			} else {
+				result += "MIN or UP or TOP | ";
+			}
+		}
+		if ((style & 1 << 8) != 0) {
+			result += "HORIZONTAL | ";
+		}
+		if ((style & 1 << 9) != 0) {
+			result += "VERTICAL | ";
+		}
+		if ((style & 1 << 10) != 0) {
+			if (w instanceof Decorations) {
+				result += "MAX | ";
+			} else if (w instanceof Button || w instanceof Tracker) {
+				result += "DOWN | ";
+			} else if (w instanceof CTabFolder) {
+				result += "BOTTOM | ";
+			} else if (w instanceof DateTime) {
+				result += "CALENDAR | ";
+			} else {
+				result += "MAX or DOWN or BOTTOM | ";
+			}
+		}
+		if ((style & 1 << 11) != 0) {
+			result += "BORDER | ";
+		}
+		if ((style & 1 << 12) != 0) {
+			if (w instanceof ToolTip) {
+				result += "BALLOON | ";
+			} else {
+				result += "CLIP_CHILDREN | ";
+			}
+		}
+		if ((style & 1 << 13) != 0) {
+			result += "CLIP_SIBLINGS | ";
+		}
+		if ((style & 1 << 14) != 0) {
+			result += "ON_TOP or LEAD or LEFT | ";
+		}
+		if ((style & 1 << 15) != 0) {
+			if (w instanceof Shell) {
+				result += "PRIMARY_MODAL | ";
+			} else if (w instanceof Table || w instanceof Tree) {
+				result += "HIDE_SELECTION | ";
+			} else if (w instanceof DateTime) {
+				result += "SHORT | ";
+			} else {
+				result += "PRIMARY_MODAL or HIDE_SELECTION | ";
+			}
+		}
+		if ((style & 1 << 16) != 0) {
+			if (w instanceof StyledText || w instanceof Table || w instanceof Tree) {
+				result += "FULL_SELECTION | ";
+			} else if (w instanceof Shell) {
+				result += "APPLICATION_MODAL | ";
+			} else if (w instanceof ProgressBar) {
+				result += "SMOOTH | ";
+			} else if (w instanceof DateTime) {
+				result += "MEDIUM | ";
+			} else {
+				result += "FULL_SELECTION or SMOOTH or APPLICATION_MODAL | ";
+			}
+		}
+		if ((style & 1 << 17) != 0) {
+			if (w instanceof Shell) {
+				result += "SYSTEM_MODAL | ";
+			} else if (w instanceof Button || w instanceof Label || w instanceof TableColumn || w instanceof Tracker || w instanceof ToolBar) {
+				result += "TRAIL | ";
+			} else {
+				result += "SYSTEM_MODAL or TRAIL or RIGHT | ";
+			}
+		}
+		if ((style & 1 << 18) != 0) {
+			result += "NO_BACKGROUND | ";
+		}
+		if ((style & 1 << 19) != 0) {
+			result += "NO_FOCUS | ";
+		}
+		if ((style & 1 << 20) != 0) {
+			result += "NO_REDRAW_RESIZE | ";
+		}
+		if ((style & 1 << 21) != 0) {
+			result += "NO_MERGE_PAINTS | ";
+		}
+		if ((style & 1 << 22) != 0) {
+			if (w instanceof Text) {
+				result += "PASSWORD | ";
+			} else if (w instanceof Composite) {
+				result += "NO_RADIO_GROUP | ";
+			} else {
+				result += "NO_RADIO_GROUP or PASSWORD | ";
+			}
+		}
+		if ((style & 1 << 23) != 0) {
+			result += "FLAT | ";
+		}
+		if ((style & 1 << 24) != 0) {
+			if (w instanceof Button || w instanceof Label || w instanceof TableColumn) {
+				result += "CENTER | ";
+			} else {
+				result += "EMBEDDED or CENTER | ";
+			}
+		}
+		if ((style & 1 << 25) != 0) {
+			result += "LEFT_TO_RIGHT | ";
+		}
+		if ((style & 1 << 26) != 0) {
+			result += "RIGHT_TO_LEFT | ";
+		}
+		if ((style & 1 << 27) != 0) {
+			result += "MIRRORED | ";
+		}
+		if ((style & 1 << 28) != 0) {
+			if (w instanceof DateTime) {
+				result += "LONG | ";
+			} else {
+				result += "VIRTUAL | ";
+			}
+		}
+		if ((style & 1 << 29) != 0) {
+			result += "DOUBLE_BUFFERED | ";
+		}
+		int lastOr = result.lastIndexOf("|");
+		if (lastOr == result.length() - 2 ) result = result.substring(0, result.length() - 2);
+		return result;
+	}
+}
diff --git a/bundles/org.eclipse.swt.tools/.classpath b/bundles/org.eclipse.swt.tools/.classpath
index fd2e064..69e85c4 100644
--- a/bundles/org.eclipse.swt.tools/.classpath
+++ b/bundles/org.eclipse.swt.tools/.classpath
@@ -5,7 +5,6 @@
 	<classpathentry kind="src" path="src"/>
 	<classpathentry kind="src" path="JNI Generation"/>
 	<classpathentry kind="src" path="Mac Generation"/>
-	<classpathentry kind="src" path="Sleak"/>
 	<classpathentry kind="src" path="Mozilla Generation"/>
 	<classpathentry kind="src" path="NativeStats"/>
 	<classpathentry kind="src" path="Icon Exe"/>
diff --git a/bundles/org.eclipse.swt.tools/META-INF/MANIFEST.MF b/bundles/org.eclipse.swt.tools/META-INF/MANIFEST.MF
index cccc9b2..9981b7c 100644
--- a/bundles/org.eclipse.swt.tools/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.swt.tools/META-INF/MANIFEST.MF
@@ -14,4 +14,6 @@ Require-Bundle: org.eclipse.core.runtime;bundle-version="3.4.0",
  org.eclipse.core.resources;bundle-version="3.4.0",
  org.eclipse.jdt.core;bundle-version="3.4.0",
  org.eclipse.ui;bundle-version="3.4.0",
- org.eclipse.jface.text;bundle-version="3.4.0"
+ org.eclipse.jface.text;bundle-version="3.4.0",
+ org.eclipse.swt.tools.base;bundle-version="3.106.0";visibility:=reexport,
+ org.eclipse.swt.tools.spies;bundle-version="3.106.0";visibility:=reexport
diff --git a/bundles/org.eclipse.swt.tools/Sleak/org/eclipse/swt/tools/internal/Sleak.java b/bundles/org.eclipse.swt.tools/Sleak/org/eclipse/swt/tools/internal/Sleak.java
deleted file mode 100644
index 64e6a80..0000000
--- a/bundles/org.eclipse.swt.tools/Sleak/org/eclipse/swt/tools/internal/Sleak.java
+++ /dev/null
@@ -1,297 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007, 2016 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.swt.tools.internal;
-
-import java.io.*;
-
-import org.eclipse.swt.*;
-import org.eclipse.swt.graphics.*;
-import org.eclipse.swt.widgets.*;
-
-/**
- * Instructions on how to use the Sleak tool with a standlaone SWT example:
- * 
- * Modify the main method below to launch your application.
- * Run Sleak.
- * 
- */
-public class Sleak {
-	List list;
-	Canvas canvas;
-	Button start, stop, check;
-	Text text;
-	Label label;
-	
-	Object [] oldObjects = new Object [0];
-	Error [] oldErrors = new Error [0];
-	Object [] objects = new Object [0];
-	Error [] errors = new Error [0];
-
-public static void main (String [] args) {
-	DeviceData data = new DeviceData();
-	data.tracking = true;
-	Display display = new Display (data);
-	Sleak sleak = new Sleak ();
-	Shell shell = new Shell(display);
-	shell.setText ("S-Leak");
-	Point size = shell.getSize ();
-	shell.setSize (size.x / 2, size.y / 2);
-	sleak.create (shell);
-	shell.open();
-	
-	// Launch your application here
-	// e.g.		
-//	Shell shell = new Shell(display);
-//	Button button1 = new Button(shell, SWT.PUSH);
-//	button1.setBounds(10, 10, 100, 50);
-//	button1.setText("Hello World");
-//	Image image = new Image(display, 20, 20);
-//	Button button2 = new Button(shell, SWT.PUSH);
-//	button2.setBounds(10, 70, 100, 50);
-//	button2.setImage(image);
-//	shell.open();
-	
-	while (!shell.isDisposed ()) {
-		if (!display.readAndDispatch ()) display.sleep ();
-	}
-	display.dispose ();
-}
-
-public void create (Composite parent) {
-	list = new List (parent, SWT.BORDER | SWT.V_SCROLL);
-	list.addListener (SWT.Selection, event -> refreshObject ());
-	text = new Text (parent, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL);
-	canvas = new Canvas (parent, SWT.BORDER);
-	canvas.addListener (SWT.Paint, event -> paintCanvas (event));
-	check = new Button (parent, SWT.CHECK);
-	check.setText ("Stack");
-	check.addListener (SWT.Selection, e -> toggleStackTrace ());
-	start = new Button (parent, SWT.PUSH);
-	start.setText ("Snap");
-	start.addListener (SWT.Selection, event -> refreshAll ());
-	stop = new Button (parent, SWT.PUSH);
-	stop.setText ("Diff");
-	stop.addListener (SWT.Selection, event -> refreshDifference ());
-	label = new Label (parent, SWT.BORDER);
-	label.setText ("0 object(s)");
-	parent.addListener (SWT.Resize, e -> layout ());
-	check.setSelection (false);
-	text.setVisible (false);
-	layout();
-}
-
-void refreshLabel () {
-	int colors = 0, cursors = 0, fonts = 0, gcs = 0, images = 0;
-	int paths = 0, patterns = 0, regions = 0, textLayouts = 0, transforms= 0;
-	for (int i=0; i<objects.length; i++) {
-		Object object = objects [i];
-		if (object instanceof Color) colors++;
-		if (object instanceof Cursor) cursors++;
-		if (object instanceof Font) fonts++;
-		if (object instanceof GC) gcs++;
-		if (object instanceof Image) images++;
-		if (object instanceof Path) paths++;
-		if (object instanceof Pattern) patterns++;
-		if (object instanceof Region) regions++;
-		if (object instanceof TextLayout) textLayouts++;
-		if (object instanceof Transform) transforms++;
-	}
-	String string = "";
-	if (colors != 0) string += colors + " Color(s)\n";
-	if (cursors != 0) string += cursors + " Cursor(s)\n";
-	if (fonts != 0) string += fonts + " Font(s)\n";
-	if (gcs != 0) string += gcs + " GC(s)\n";
-	if (images != 0) string += images + " Image(s)\n";
-	if (paths != 0) string += paths + " Paths(s)\n";
-	if (patterns != 0) string += patterns + " Pattern(s)\n";
-	if (regions != 0) string += regions + " Region(s)\n";
-	if (textLayouts != 0) string += textLayouts + " TextLayout(s)\n";
-	if (transforms != 0) string += transforms + " Transform(s)\n";
-	if (string.length () != 0) {
-		string = string.substring (0, string.length () - 1);
-	}
-	label.setText (string);
-}
-
-void refreshDifference () {
-	Display display = canvas.getDisplay();
-	DeviceData info = display.getDeviceData ();
-	if (!info.tracking) {
-		Shell shell = canvas.getShell();
-		MessageBox dialog = new MessageBox (shell, SWT.ICON_WARNING | SWT.OK);
-		dialog.setText (shell.getText ());
-		dialog.setMessage ("Warning: Device is not tracking resource allocation");
-		dialog.open ();
-	}
-	Object [] newObjects = info.objects;
-	Error [] newErrors = info.errors;
-	Object [] diffObjects = new Object [newObjects.length];
-	Error [] diffErrors = new Error [newErrors.length];
-	int count = 0;
-	for (int i=0; i<newObjects.length; i++) {
-		int index = 0;
-		while (index < oldObjects.length) {
-			if (newObjects [i] == oldObjects [index]) break;
-			index++;
-		}
-		if (index == oldObjects.length) {
-			diffObjects [count] = newObjects [i];
-			diffErrors [count] = newErrors [i];
-			count++;
-		}
-	}
-	objects = new Object [count];
-	errors = new Error [count];
-	System.arraycopy (diffObjects, 0, objects, 0, count);
-	System.arraycopy (diffErrors, 0, errors, 0, count);
-	list.removeAll ();
-	text.setText ("");
-	canvas.redraw ();
-	for (int i=0; i<objects.length; i++) {
-		list.add (objects [i].toString());
-	}
-	refreshLabel ();
-	layout ();
-}
-
-void toggleStackTrace () {
-	refreshObject ();
-	layout ();
-}
-
-void paintCanvas (Event event) {
-	canvas.setCursor (null);
-	int index = list.getSelectionIndex ();
-	if (index == -1) return;
-	GC gc = event.gc;
-	Object object = objects [index];
-	if (object instanceof Color) {
-		if (((Color)object).isDisposed ()) return;
-		gc.setBackground ((Color) object);
-		gc.fillRectangle (canvas.getClientArea());
-		return;
-	}
-	if (object instanceof Cursor) {
-		if (((Cursor)object).isDisposed ()) return;
-		canvas.setCursor ((Cursor) object);
-		return;
-	}
-	if (object instanceof Font) {
-		if (((Font)object).isDisposed ()) return;
-		gc.setFont ((Font) object);
-		FontData [] array = gc.getFont ().getFontData ();
-		String string = "";
-		String lf = text.getLineDelimiter ();
-		for (int i=0; i<array.length; i++) {
-			FontData data = array [i];
-			String style = "NORMAL";
-			int bits = data.getStyle ();
-			if (bits != 0) {
-				if ((bits & SWT.BOLD) != 0) style = "BOLD ";
-				if ((bits & SWT.ITALIC) != 0) style += "ITALIC";
-			}
-			string += data.getName () + " " + data.getHeight () + " " + style + lf;
-		}
-		gc.drawString (string, 0, 0);
-		return;
-	}
-	//NOTHING TO DRAW FOR GC
-//	if (object instanceof GC) {
-//		return;
-//	}
-	if (object instanceof Image) {
-		if (((Image)object).isDisposed ()) return;
-		gc.drawImage ((Image) object, 0, 0);
-		return;
-	}
-	if (object instanceof Path) {
-		if (((Path)object).isDisposed ()) return;
-		gc.drawPath ((Path) object);
-		return;
-	}
-	if (object instanceof Pattern) {
-		if (((Pattern)object).isDisposed ()) return;
-		gc.setBackgroundPattern ((Pattern)object);
-		gc.fillRectangle (canvas.getClientArea ());
-		gc.setBackgroundPattern (null);
-		return;
-	}
-	if (object instanceof Region) {
-		if (((Region)object).isDisposed ()) return;
-		String string = ((Region)object).getBounds().toString();
-		gc.drawString (string, 0, 0);
-		return;
-	}
-	if (object instanceof TextLayout) {
-		if (((TextLayout)object).isDisposed ()) return;
-		((TextLayout)object).draw (gc, 0, 0);
-		return;
-	}
-	if (object instanceof Transform) {
-		if (((Transform)object).isDisposed ()) return;
-		String string = ((Transform)object).toString();
-		gc.drawString (string, 0, 0);
-		return;
-	}
-}
-
-void refreshObject () {
-	int index = list.getSelectionIndex ();
-	if (index == -1) return;
-	if (check.getSelection ()) {
-		ByteArrayOutputStream stream = new ByteArrayOutputStream ();
-		PrintStream s = new PrintStream (stream);
-		errors [index].printStackTrace (s);
-		text.setText (stream.toString ());
-		text.setVisible (true);
-		canvas.setVisible (false);
-	} else {
-		canvas.setVisible (true);
-		text.setVisible (false);
-		canvas.redraw ();
-	}
-}
-
-void refreshAll () {
-	oldObjects = new Object [0];
-	oldErrors = new Error [0];
-	refreshDifference ();
-	oldObjects = objects;
-	oldErrors = errors;
-}
-
-void layout () {
-	Composite parent = canvas.getParent();
-	Rectangle rect = parent.getClientArea ();
-	int width = 0;
-	String [] items = list.getItems ();
-	GC gc = new GC (list);
-	for (int i=0; i<objects.length; i++) {
-		width = Math.max (width, gc.stringExtent (items [i]).x);
-	}
-	gc.dispose ();
-	Point size1 = start.computeSize (SWT.DEFAULT, SWT.DEFAULT);
-	Point size2 = stop.computeSize (SWT.DEFAULT, SWT.DEFAULT);
-	Point size3 = check.computeSize (SWT.DEFAULT, SWT.DEFAULT);
-	Point size4 = label.computeSize (SWT.DEFAULT, SWT.DEFAULT);
-	width = Math.max (size1.x, Math.max (size2.x, Math.max (size3.x, width)));
-	width = Math.max (64, Math.max (size4.x, list.computeSize (width, SWT.DEFAULT).x));
-	start.setBounds (0, 0, width, size1.y);
-	stop.setBounds (0, size1.y, width, size2.y);
-	check.setBounds (0, size1.y + size2.y, width, size3.y);
-	label.setBounds (0, rect.height - size4.y, width, size4.y);
-	int height = size1.y + size2.y + size3.y;
-	list.setBounds (0, height, width, rect.height - height - size4.y);
-	text.setBounds (width, 0, rect.width - width, rect.height);
-	canvas.setBounds (width, 0, rect.width - width, rect.height);
-}
-		
-}
diff --git a/bundles/org.eclipse.swt.tools/build.properties b/bundles/org.eclipse.swt.tools/build.properties
index a91ad9f..a9827c7 100644
--- a/bundles/org.eclipse.swt.tools/build.properties
+++ b/bundles/org.eclipse.swt.tools/build.properties
@@ -21,7 +21,6 @@ source.. = src/,\
            Mac Generation/,\
            Icon Exe/,\
            NativeStats/,\
-           Sleak/,\
            Mozilla Generation/,\
            JavadocBasher/
 bin.excludes = META-INF/p2.inf
diff --git a/bundles/org.eclipse.swt.tools/icons/sleak.gif b/bundles/org.eclipse.swt.tools/icons/sleak.gif
deleted file mode 100644
index 444bd35..0000000
Binary files a/bundles/org.eclipse.swt.tools/icons/sleak.gif and /dev/null differ
diff --git a/bundles/org.eclipse.swt.tools/icons/spy.gif b/bundles/org.eclipse.swt.tools/icons/spy.gif
deleted file mode 100644
index 98d6e2e..0000000
Binary files a/bundles/org.eclipse.swt.tools/icons/spy.gif and /dev/null differ
diff --git a/bundles/org.eclipse.swt.tools/plugin.xml b/bundles/org.eclipse.swt.tools/plugin.xml
index ef0072b..f339375 100644
--- a/bundles/org.eclipse.swt.tools/plugin.xml
+++ b/bundles/org.eclipse.swt.tools/plugin.xml
@@ -3,10 +3,6 @@
 <plugin>
    <extension
          point="org.eclipse.ui.views">
-      <category
-            name="%pluginName"
-            id="org.eclipse.swt.swt.tools">
-      </category>
       <view
             allowMultiple="false"
             category="org.eclipse.swt.swt.tools"
@@ -15,21 +11,6 @@
             id="org.eclipse.swt.tools.views.MacGeneratorView"
             name="%macViewName">
       </view>
-      <view
-            allowMultiple="false"
-            category="org.eclipse.swt.swt.tools"
-            class="org.eclipse.swt.tools.views.SpyView"
-            icon="icons/spy.gif"
-            id="org.eclipse.swt.tools.views.SpyView"
-            name="%spyViewName">
-      </view>
-      <view
-            category="org.eclipse.swt.swt.tools"
-            class="org.eclipse.swt.tools.views.SleakView"
-            icon="icons/sleak.gif"
-            id="org.eclipse.swt.tools.views.SleakView"
-            name="%sleakViewName">
-      </view>
    </extension>
 
    <extension point="org.eclipse.ui.editors.templates">
diff --git a/bundles/org.eclipse.swt.tools/src/org/eclipse/swt/tools/views/SleakView.java b/bundles/org.eclipse.swt.tools/src/org/eclipse/swt/tools/views/SleakView.java
deleted file mode 100644
index 149e69a..0000000
--- a/bundles/org.eclipse.swt.tools/src/org/eclipse/swt/tools/views/SleakView.java
+++ /dev/null
@@ -1,66 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2004, 2013 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.swt.tools.views;
-
-import org.eclipse.swt.*;
-import org.eclipse.swt.tools.internal.*;
-import org.eclipse.swt.widgets.*;
-import org.eclipse.ui.part.*;
-
-/**
- * This sample class demonstrates how to plug-in a new
- * workbench view. The view shows data obtained from the
- * model. The sample creates a dummy model on the fly,
- * but a real implementation would connect to the model
- * available either in this or another plug-in (e.g. the workspace).
- * The view is connected to the model using a content provider.
- * <p>
- * The view uses a label provider to define how model
- * objects should be presented in the view. Each
- * view can present the same model objects using
- * different labels and icons, if needed. Alternatively,
- * a single label provider can be shared between views
- * in order to ensure that objects of the same type are
- * presented in the same way everywhere.
- * <p>
- */
-
-public class SleakView extends ViewPart {
-
-	Composite parent = null;
-	Sleak sleak = null;
-
-	/**
-	 * The constructor.
-	 */
-	public SleakView() {
-	}
-
-	/**
-	 * This is a callback that will allow us
-	 * to create the viewer and initialize it.
-	 */
-	@Override
-	public void createPartControl(Composite parent) {
-		this.parent = new Composite(parent, SWT.NONE);
-		sleak = new Sleak ();
-		sleak.create(this.parent);
-	}
-
-	/**
-	 * Passing the focus request to the viewer's control.
-	 */
-	@Override
-	public void setFocus() {
-		parent.setFocus();
-	}
-
-}
\ No newline at end of file
diff --git a/bundles/org.eclipse.swt.tools/src/org/eclipse/swt/tools/views/SpyView.java b/bundles/org.eclipse.swt.tools/src/org/eclipse/swt/tools/views/SpyView.java
deleted file mode 100644
index c0161d2..0000000
--- a/bundles/org.eclipse.swt.tools/src/org/eclipse/swt/tools/views/SpyView.java
+++ /dev/null
@@ -1,513 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2004, 2016 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.swt.tools.views;
-
-import java.io.*;
-import java.lang.reflect.*;
-
-import org.eclipse.jface.action.*;
-import org.eclipse.swt.*;
-import org.eclipse.swt.custom.*;
-import org.eclipse.swt.tools.*;
-import org.eclipse.swt.widgets.*;
-import org.eclipse.ui.*;
-import org.eclipse.ui.part.*;
-
-public class SpyView extends ViewPart {
-	private StyledText output;
-	private Action spyAction, fullyQualifiedAction;
-	private Listener keyFilter;
-	private Runnable timer;
-	private Control lastControl;
-	private Field field;
-	
-	static final int TIMEOUT = 100;
-
-	/**
-	 * This is a callback that will allow us
-	 * to create the viewer and initialize it.
-	 */
-	@Override
-	public void createPartControl(Composite parent) {
-		output = new StyledText(parent, SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL | SWT.READ_ONLY);
-		
-		keyFilter = e -> {
-			// If this accelerator changes, change the tooltip text
-			if (e.keyCode == '.' && e.stateMask == (SWT.ALT | SWT.SHIFT | SWT.CONTROL)) {
-				if (spyAction.isChecked()) {
-					spyAction.setChecked(false);
-				} else {
-					spyAction.setChecked(true);
-					spyAction.run();
-				}
-				e.type = SWT.None;
-			}
-		};
-		parent.getDisplay().addFilter(SWT.KeyDown, keyFilter);
-		
-		timer = new Runnable() {
-			@Override
-			public void run() {
-				if (output == null || output.isDisposed() || !spyAction.isChecked()) return;
-				Display display = output.getDisplay();
-				Control control = display.getCursorControl();
-				if (control != lastControl) {
-					StringBuffer text = new StringBuffer();
-					if (control != null) {
-						text.append(getName(control)+"@"+getOSHandle(control)+"\n");
-						text.append("\tStyle: "+getStyle(control)+"\n");
-						text.append("\tLayout Data: "+getName(control.getLayoutData())+"\n");
-						text.append("\tBounds: "+control.getBounds()+"\n");
-						if (control instanceof Composite && ((Composite)control).getLayout() != null) {
-							text.append("\tLayout: "+getName(((Composite)control).getLayout())+"\n");
-						}
-						text.append("\n");
-						if (control instanceof Composite) {
-							text.append("\nChildren:\n");
-							Control[] children = ((Composite)control).getChildren();
-							for (int i = 0; i < children.length; i++) {
-								text.append("\t"+getName(children[i])+"\n");
-							}
-						}
-						Composite parent = control.getParent();
-						if (parent != null) {
-							text.append("\nPeers:\n");
-							Control[] peers = parent.getChildren();
-							for (int i = 0; i < peers.length; i++) {
-								text.append("\t");
-								if (peers[i] == control) text.append("*");
-								text.append(getName(peers[i])+"@"+getOSHandle(peers[i]));
-								text.append(" Layout Data: "+getName(peers[i].getLayoutData()));
-								text.append(" Bounds: "+peers[i].getBounds());
-								text.append("\n");
-							}
-							text.append("\nParent Tree:\n");
-							Composite[] parents = new Composite[0];
-							while (parent != null) {
-								Composite[] newParents = new Composite[parents.length + 1];
-								System.arraycopy(parents, 0, newParents, 0, parents.length);
-								newParents[parents.length] = parent;
-								parents = newParents;
-								parent = parent.getParent();
-							}
-							for (int i = parents.length - 1; i >= 0; i--) {
-								String prefix = "\t";
-								for (int j = 0; j < parents.length - i - 1; j++) {
-									prefix += "\t";
-								}
-								text.append(prefix + getName(parents[i])+"@"+getOSHandle(parents[i])+"\n");
-								text.append(prefix+"\t Style: "+getStyle(parents[i])+"\n");
-								text.append(prefix+"\t Bounds: "+parents[i].getBounds()+"\n");
-								text.append(prefix+"\t Layout: "+getName(parents[i].getLayout())+"\n");
-								text.append(prefix+"\t LayoutData: "+getName(parents[i].getLayoutData())+"\n");
-							}
-						}
-						Error error = (Error)control.getData("StackTrace");
-						if (error != null) {
-							text.append("\nCreation Stack Trace:\n");
-							ByteArrayOutputStream stream = new ByteArrayOutputStream();
-							PrintStream s = new PrintStream(stream);
-							error.printStackTrace(s);
-							text.append(stream.toString());
-						}
-					}
-					output.setText(text.toString());
-				}
-				lastControl = control;
-				display.timerExec(100, this);			
-			}
-		};
-		
-		makeActions();
-		contributeToActionBars();
-	}
-	
-	String getName(Object object) {
-		if (object == null) return "null";
-		String name = object.toString ();
-		if (fullyQualifiedAction.isChecked()) {
-			int index = name.indexOf(' ');
-			if (index >= 0 && name.length() >= 1) {
-				name = object.getClass ().getName () + name.substring(index);
-			}
-		}
-		return name;
-	}
-	
-	/**
-	 * Passing the focus request to the viewer's control.
-	 */
-	@Override
-	public void setFocus() {
-		if (output != null & !output.isDisposed()) output.setFocus();
-	}
-	
-	private String getOSHandle(Control control) {
-		if (field == null) {
-			String[] fieldNames = {"handle", "view"};
-			for (int i = 0; i < fieldNames.length; i++) {
-				try {
-					field = control.getClass().getField(fieldNames[i]);
-					if (field != null) break;
-				} catch (Throwable e) {}
-			}
-		}
-		try {
-			return field.get(control).toString();
-		} catch (Throwable e) {}
-		return "";
-	}
-	
-	private void contributeToActionBars() {
-		IActionBars bars = getViewSite().getActionBars();
-		fillLocalPullDown(bars.getMenuManager());
-		fillLocalToolBar(bars.getToolBarManager());
-	}
-	
-	@Override
-	public void dispose() {
-		if (keyFilter != null) {
-			Display.getCurrent().removeFilter(SWT.KeyDown, keyFilter);
-		}
-		super.dispose();
-	}
-
-	private void fillLocalPullDown(IMenuManager manager) {
-		manager.add(spyAction);
-		manager.add(fullyQualifiedAction);
-	}
-
-	private void fillLocalToolBar(IToolBarManager manager) {
-		manager.add(spyAction);
-	}
-	
-	private void makeActions() {
-		spyAction = new Action("Spy", IAction.AS_CHECK_BOX) {
-			@Override
-			public void run() {
-				Display.getCurrent().timerExec(TIMEOUT, timer);
-			}
-		};
-		spyAction.setToolTipText("Toggle Spy (CONTROL+ALT+SHIFT+.)");
-		spyAction.setImageDescriptor(Activator.getImageDescriptor("icons/spy.gif"));
-		
-		fullyQualifiedAction = new Action("Fully Qualify Names", IAction.AS_CHECK_BOX) {
-			@Override
-			public void run() {
-			}
-		};
-	}
-	
-	private String getStyle(Widget w) {
-		//MODELESS = 0;
-		//BAR = 1 << 1;
-		//SEPARATOR = 1 << 1;
-		//TOGGLE = 1 << 1;
-		//MULTI = 1 << 1;
-		//INDETERMINATE = 1 << 1;
-		//DBCS = 1 << 1;
-		//ALPHA = 1 << 2;
-		//TOOL = 1 << 2; 
-		//SINGLE = 1 << 2;
-		//ARROW = 1 << 2;
-		//DROP_DOWN = 1 << 2;
-		//SHADOW_IN = 1 << 2;
-		//POP_UP = 1 << 3;
-		//PUSH = 1 << 3;
-		//READ_ONLY = 1 << 3;
-		//SHADOW_OUT = 1 << 3;
-		//NO_TRIM = 1 << 3;
-		//NATIVE = 1 << 3;
-		//RESIZE = 1 << 4;
-		//SHADOW_ETCHED_IN = 1 << 4;
-		//RADIO = 1 << 4;
-		//PHONETIC = 1 << 4;
-		//ROMAN = 1 << 5;
-		//CHECK = 1 << 5;
-		//SHADOW_NONE = 1 << 5;
-		//TITLE = 1 << 5;
-		//DATE = 1 << 5;
-		//CLOSE = 1 << 6;
-		//MENU = CLOSE;
-		//CASCADE = 1 << 6;
-		//WRAP = 1 << 6;
-		//SIMPLE = 1 << 6;
-		//SHADOW_ETCHED_OUT = 1 << 6;
-		//MIN = 1 << 7;
-		//UP = 1 << 7;
-		//TOP = UP;
-		//TIME = 1 << 7;
-		//HORIZONTAL = 1 << 8;
-		//H_SCROLL = 1 << 8;
-		//V_SCROLL = 1 << 9;
-		//VERTICAL = 1 << 9;
-		//MAX = 1 << 10;
-		//DOWN               = 1 << 10;
-		//BOTTOM             = DOWN;
-		//CALENDAR = 1 << 10;
-		//BORDER = 1 << 11;
-		//CLIP_CHILDREN = 1 << 12; 
-		//BALLOON = 1 << 12;
-		//CLIP_SIBLINGS = 1 << 13;
-		//ON_TOP = 1 << 14;
-		//LEAD               = 1 << 14;
-		//LEFT               = LEAD;
-		//PRIMARY_MODAL = 1 << 15;
-		//HIDE_SELECTION = 1 << 15;
-		//SHORT = 1 << 15;
-		//MEDIUM = 1 << 16;
-		//FULL_SELECTION = 1 << 16;
-		//SMOOTH = 1 << 16;
-		//APPLICATION_MODAL = 1 << 16;
-		//SYSTEM_MODAL = 1 << 17;
-		//TRAIL              = 1 << 17;	
-		//RIGHT              = TRAIL;
-		//NO_BACKGROUND = 1 << 18;
-		//NO_FOCUS = 1 << 19;
-		//NO_REDRAW_RESIZE = 1 << 20;
-		//NO_MERGE_PAINTS = 1 << 21;
-		//NO_RADIO_GROUP = 1 << 22;
-		//PASSWORD = 1 << 22;
-		//FLAT = 1 << 23;
-		//EMBEDDED = 1 << 24;
-		//CENTER = 1 << 24;
-		//LEFT_TO_RIGHT = 1 << 25;
-		//RIGHT_TO_LEFT = 1 << 26;
-		//MIRRORED = 1 << 27;
-		//VIRTUAL = 1 << 28;
-		//LONG = 1 << 28;
-		//DOUBLE_BUFFERED = 1 << 29;
-		
-		int style = w.getStyle();
-		String result = "";
-		if (style == SWT.DEFAULT) {
-			return "DEFAULT - bad!";
-		}
-		if ((style & 1 << 1) != 0) {
-			if (w instanceof CTabFolder || w instanceof StyledText || w instanceof List || w instanceof Text || w instanceof Table || w instanceof Tree) {
-				result += "MULTI | ";
-			} else if (w instanceof Menu) {
-				result += "BAR | ";
-			} else if (w instanceof Label || w instanceof MenuItem || w instanceof ToolItem) {
-				result += "SEPARATOR | ";
-			} else if (w instanceof Button) {
-				result += "TOGGLE | ";
-			} else if (w instanceof ProgressBar) {
-				result += "INDETERMINATE | ";
-			} else {
-				result += "BAR or SEPARATOR or TOGGLE or MULTI or INDETERMINATE or DBCS | ";	
-			}
-		}
-		if ((style & 1 << 2) != 0) {
-			if (w instanceof Menu || w instanceof ToolItem || w instanceof CoolItem || w instanceof Combo) {
-				result += "DROP_DOWN | ";
-			} else if (w instanceof Button) {
-				result += "ARROW | ";
-			} else if (w instanceof CTabFolder || w instanceof StyledText || w instanceof List || w instanceof Text || w instanceof Table || w instanceof Tree) {
-				result += "SINGLE | ";
-			} else if (w instanceof Label || w instanceof Group) {
-				result += "SHADOW_IN | ";
-			} else if (w instanceof Decorations) {
-				result += "TOOL | ";
-			} else {
-				result += "ALPHA or TOOL or SINGLE or ARROW or DROP_DOWN or SHADOW_IN | ";
-			}
-		}
-		if ((style & 1 << 3) != 0) {
-			if (w instanceof Menu) {
-				result += "POP_UP | ";
-			} else if (w instanceof Button || w instanceof MenuItem || w instanceof ToolItem) {
-				result += "PUSH | ";
-			} else if (w instanceof Combo || w instanceof Text || w instanceof StyledText) {
-				result += "READ_ONLY | ";
-			} else if (w instanceof Label || w instanceof Group || w instanceof ToolBar) {
-				result += "SHADOW_OUT | ";
-			} else if (w instanceof Decorations) {
-				result += "NO_TRIM | ";	
-			} else {
-				result += "POP_UP or PUSH or READ_ONLY or SHADOW_OUT or NO_TRIM or NATIVE | ";
-			}
-		}
-		if ((style & 1 << 4) != 0) {
-			if (w instanceof Button || w instanceof MenuItem || w instanceof ToolItem) {
-				result += "RADIO | ";
-			} else if (w instanceof Group) {
-				result += "SHADOW_ETCHED_IN | ";
-			} else if (w instanceof Decorations || w instanceof Tracker) {
-				result += "RESIZE | ";
-			} else {
-				result += "RESIZE or SHADOW_ETCHED_IN or RADIO or PHONETIC | ";
-			}
-		}
-		if ((style & 1 << 5) != 0) {
-			if (w instanceof Button || w instanceof MenuItem || w instanceof ToolItem || w instanceof Table || w instanceof Tree) {
-				result += "CHECK | ";
-			} else if (w instanceof Label || w instanceof Group) {
-				result += "SHADOW_NONE | ";
-			} else if (w instanceof Decorations) {
-				result += "TITLE | ";
-			} else if (w instanceof DateTime) {
-				result += "DATE | ";
-			} else {
-				result += "ROMAN or CHECK  or SHADOW_NONE or TITLE | ";
-			}
-		}
-		if ((style & 1 << 6) != 0) {
-			if (w instanceof MenuItem) {
-				result += "CASCADE | ";
-			} else if (w instanceof StyledText || w instanceof Label || w instanceof Text || w instanceof ToolBar) {
-				result += "WRAP | ";
-			} else if (w instanceof Combo) {
-				result += "SIMPLE | ";
-			} else if (w instanceof Group) {
-				result += "SHADOW_ETCHED_OUT | ";
-			} else if (w instanceof Decorations || w instanceof CTabFolder || w instanceof CTabItem) {
-				result += "CLOSE | ";
-			} else {
-				result += "CLOSE or MENU or CASCADE or WRAP or SIMPLE or SHADOW_ETCHED_OUT | ";
-			}
-		}
-		if ((style & 1 << 7) != 0) {
-			if (w instanceof Decorations) {
-				result += "MIN | ";
-			} else if (w instanceof Button || w instanceof Tracker) {
-				result += "UP | ";
-			} else if (w instanceof CTabFolder) {
-				result += "TOP | ";
-			} else if (w instanceof DateTime) {
-				result += "TIME | ";
-			} else {
-				result += "MIN or UP or TOP | ";
-			}
-		}
-		if ((style & 1 << 8) != 0) {
-			result += "HORIZONTAL | ";
-		}
-		if ((style & 1 << 9) != 0) {
-			result += "VERTICAL | ";
-		}
-		if ((style & 1 << 10) != 0) {
-			if (w instanceof Decorations) {
-				result += "MAX | ";
-			} else if (w instanceof Button || w instanceof Tracker) {
-				result += "DOWN | ";
-			} else if (w instanceof CTabFolder) {
-				result += "BOTTOM | ";
-			} else if (w instanceof DateTime) {
-				result += "CALENDAR | ";
-			} else {
-				result += "MAX or DOWN or BOTTOM | ";
-			}
-		}
-		if ((style & 1 << 11) != 0) {
-			result += "BORDER | ";
-		}
-		if ((style & 1 << 12) != 0) {
-			if (w instanceof ToolTip) {
-				result += "BALLOON | ";
-			} else {
-				result += "CLIP_CHILDREN | ";
-			}
-		}
-		if ((style & 1 << 13) != 0) {
-			result += "CLIP_SIBLINGS | ";
-		}
-		if ((style & 1 << 14) != 0) {
-			result += "ON_TOP or LEAD or LEFT | ";
-		}
-		if ((style & 1 << 15) != 0) {
-			if (w instanceof Shell) {
-				result += "PRIMARY_MODAL | ";
-			} else if (w instanceof Table || w instanceof Tree) {
-				result += "HIDE_SELECTION | ";
-			} else if (w instanceof DateTime) {
-				result += "SHORT | ";
-			} else {
-				result += "PRIMARY_MODAL or HIDE_SELECTION | ";
-			}
-		}
-		if ((style & 1 << 16) != 0) {
-			if (w instanceof StyledText || w instanceof Table || w instanceof Tree) {
-				result += "FULL_SELECTION | ";
-			} else if (w instanceof Shell) {
-				result += "APPLICATION_MODAL | ";
-			} else if (w instanceof ProgressBar) {
-				result += "SMOOTH | ";
-			} else if (w instanceof DateTime) {
-				result += "MEDIUM | ";
-			} else {
-				result += "FULL_SELECTION or SMOOTH or APPLICATION_MODAL | ";
-			}
-		}
-		if ((style & 1 << 17) != 0) {
-			if (w instanceof Shell) {
-				result += "SYSTEM_MODAL | ";
-			} else if (w instanceof Button || w instanceof Label || w instanceof TableColumn || w instanceof Tracker || w instanceof ToolBar) {
-				result += "TRAIL | ";
-			} else {
-				result += "SYSTEM_MODAL or TRAIL or RIGHT | ";
-			}
-		}
-		if ((style & 1 << 18) != 0) {
-			result += "NO_BACKGROUND | ";
-		}
-		if ((style & 1 << 19) != 0) {
-			result += "NO_FOCUS | ";
-		}
-		if ((style & 1 << 20) != 0) {
-			result += "NO_REDRAW_RESIZE | ";
-		}
-		if ((style & 1 << 21) != 0) {
-			result += "NO_MERGE_PAINTS | ";
-		}
-		if ((style & 1 << 22) != 0) {
-			if (w instanceof Text) {
-				result += "PASSWORD | ";
-			} else if (w instanceof Composite) {
-				result += "NO_RADIO_GROUP | ";
-			} else {
-				result += "NO_RADIO_GROUP or PASSWORD | ";
-			}
-		}
-		if ((style & 1 << 23) != 0) {
-			result += "FLAT | ";
-		}
-		if ((style & 1 << 24) != 0) {
-			if (w instanceof Button || w instanceof Label || w instanceof TableColumn) {
-				result += "CENTER | ";
-			} else {
-				result += "EMBEDDED or CENTER | ";
-			}
-		}
-		if ((style & 1 << 25) != 0) {
-			result += "LEFT_TO_RIGHT | ";
-		}
-		if ((style & 1 << 26) != 0) {
-			result += "RIGHT_TO_LEFT | ";
-		}
-		if ((style & 1 << 27) != 0) {
-			result += "MIRRORED | ";
-		}
-		if ((style & 1 << 28) != 0) {
-			if (w instanceof DateTime) {
-				result += "LONG | ";
-			} else {
-				result += "VIRTUAL | ";
-			}
-		}
-		if ((style & 1 << 29) != 0) {
-			result += "DOUBLE_BUFFERED | ";
-		}
-		int lastOr = result.lastIndexOf("|");
-		if (lastOr == result.length() - 2 ) result = result.substring(0, result.length() - 2);
-		return result;
-	}
-}
diff --git a/features/org.eclipse.swt.tools.feature/feature.xml b/features/org.eclipse.swt.tools.feature/feature.xml
index 774c2e5..d44d774 100644
--- a/features/org.eclipse.swt.tools.feature/feature.xml
+++ b/features/org.eclipse.swt.tools.feature/feature.xml
@@ -26,4 +26,17 @@
          version="0.0.0"
          unpack="false"/>
 
+   <plugin
+         id="org.eclipse.swt.tools.spies"
+         download-size="0"
+         install-size="0"
+         version="0.0.0"
+         unpack="false"/>
+
+   <plugin
+         id="org.eclipse.swt.tools.base"
+         download-size="0"
+         install-size="0"
+         version="0.0.0"/>
+
 </feature>
diff --git a/pom.xml b/pom.xml
index 1f024d2..8678fa8 100644
--- a/pom.xml
+++ b/pom.xml
@@ -71,6 +71,8 @@
   <modules>
     <module>bundles/org.eclipse.swt</module>
     <module>local-build/org.eclipse.swt.fragments.localbuild</module>
+    <module>bundles/org.eclipse.swt.tools.base</module>
+    <module>bundles/org.eclipse.swt.tools.spies</module>
     <module>bundles/org.eclipse.swt.tools</module>
     <module>examples/org.eclipse.swt.examples</module>
     <module>examples/org.eclipse.swt.examples.browser.demos</module>

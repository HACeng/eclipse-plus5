commit 122ce28aad692005501429b7470da4d056e90df6
Author: Alexander Kurtakov <akurtako@redhat.com>
Date:   Thu Dec 17 10:14:08 2015 +0200

    Bug 484541 - Adapt to Combo.setItems and PaletteData varargs
    
    Update tests/snippets/examples to use the varargs methods to both test
    and make their existence more visible.
    
    Change-Id: Ic996678125f05880bdb93fd7e492c9c6911f845a
    Signed-off-by: Alexander Kurtakov <akurtako@redhat.com>

4	8	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/CTable.java
1	1	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/clipboard/ClipboardExample.java
2	2	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/Tab.java
18	8	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ToolBarTab.java
3	3	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/dnd/DNDExample.java
2	3	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/imageanalyzer/ImageAnalyzer.java
25	7	examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/layoutexample/FormLayoutTab.java
3	4	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet119.java
2	3	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet194.java
2	2	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet24.java
2	3	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet242.java
2	2	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet26.java
1	1	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet289.java
3	3	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet332.java
17	16	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet361.java
1	5	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet70.java
2	2	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet75.java
2	2	examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet92.java
2	2	tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_GC.java
15	15	tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_Image.java
31	31	tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_ImageData.java
1	1	tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_PaletteData.java
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/CTable.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/CTable.java
index aa40352..ce70a0a 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/CTable.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/CTable.java
@@ -2087,8 +2087,7 @@ void initAccessibility () {
 }
 
 static void initImages (final Display display) {
-	PaletteData arrowPalette = new PaletteData (new RGB[] {
-		new RGB (0, 0, 0), new RGB (255, 255, 255)});
+	PaletteData arrowPalette = new PaletteData (new RGB (0, 0, 0), new RGB (255, 255, 255));
 	if (display.getData (ID_ARROWDOWN) == null) {
 		ImageData arrowDown = new ImageData (
 			7, 4, 1,
@@ -2106,8 +2105,7 @@ static void initImages (final Display display) {
 		display.setData (ID_ARROWUP, new Image (display, arrowUp));
 	}
 
-	PaletteData checkMarkPalette = new PaletteData (	
-		new RGB[] {new RGB (0, 0, 0), new RGB (252, 3, 251)});
+	PaletteData checkMarkPalette = new PaletteData (new RGB (0, 0, 0), new RGB (252, 3, 251));
 	byte[] checkbox = new byte[] {0, 0, 127, -64, 127, -64, 127, -64, 127, -64, 127, -64, 127, -64, 127, -64, 127, -64, 127, -64, 0, 0};
 	ImageData checkmark = new ImageData (7, 7, 1, checkMarkPalette, 1, new byte[] {-4, -8, 112, 34, 6, -114, -34});
 	checkmark.transparentPixel = 1;
@@ -2116,15 +2114,13 @@ static void initImages (final Display display) {
 	}
 
 	if (display.getData (ID_UNCHECKED) == null) {
-		PaletteData uncheckedPalette = new PaletteData (	
-			new RGB[] {new RGB (128, 128, 128), new RGB (255, 255, 255)});
+		PaletteData uncheckedPalette = new PaletteData (new RGB (128, 128, 128), new RGB (255, 255, 255));
 		ImageData unchecked = new ImageData (11, 11, 1, uncheckedPalette, 2, checkbox);
 		display.setData (ID_UNCHECKED, new Image (display, unchecked));
 	}
 
 	if (display.getData (ID_GRAYUNCHECKED) == null) {
-		PaletteData grayUncheckedPalette = new PaletteData (	
-			new RGB[] {new RGB (128, 128, 128), new RGB (192, 192, 192)});
+		PaletteData grayUncheckedPalette = new PaletteData (new RGB (128, 128, 128), new RGB (192, 192, 192));
 		ImageData grayUnchecked = new ImageData (11, 11, 1, grayUncheckedPalette, 2, checkbox);
 		display.setData (ID_GRAYUNCHECKED, new Image (display, grayUnchecked));
 	}
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/clipboard/ClipboardExample.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/clipboard/ClipboardExample.java
index 695c4b7..37ce175 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/clipboard/ClipboardExample.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/clipboard/ClipboardExample.java
@@ -644,7 +644,7 @@ void createControlTransfer(Composite parent){
 		}
 	});
 	combo = new Combo(parent, SWT.NONE);
-	combo.setItems(new String[] {"Item 1", "Item 2", "Item 3", "A longer Item"});
+	combo.setItems("Item 1", "Item 2", "Item 3", "A longer Item");
 	combo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
 	
 	l = new Label(parent, SWT.NONE);
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/Tab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/Tab.java
index 8315d3b..93e91ce 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/Tab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/Tab.java
@@ -567,7 +567,7 @@ abstract class Tab {
 	
 		/* Create the controls */
 		backgroundModeCombo = new Combo(backgroundModeGroup, SWT.READ_ONLY);
-		backgroundModeCombo.setItems(new String[] {"SWT.INHERIT_NONE", "SWT.INHERIT_DEFAULT", "SWT.INHERIT_FORCE"});
+		backgroundModeCombo.setItems("SWT.INHERIT_NONE", "SWT.INHERIT_DEFAULT", "SWT.INHERIT_FORCE");
 		backgroundModeImageButton = new Button(backgroundModeGroup, SWT.CHECK);
 		backgroundModeImageButton.setText(ControlExample.getResourceString("BackgroundImage"));
 		backgroundModeColorButton = new Button(backgroundModeGroup, SWT.CHECK);
@@ -618,7 +618,7 @@ abstract class Tab {
 		if ((fields & DOIT) != 0) {
 			new Label (group, SWT.NONE).setText ("doit");
 			final Combo doitCombo = new Combo (group, SWT.READ_ONLY);
-			doitCombo.setItems (new String [] {"", "true", "false"});
+			doitCombo.setItems ("", "true", "false");
 			if ((setFieldsMask & DOIT) != 0) doitCombo.setText(Boolean.toString(setFieldsEvent.doit));
 			doitCombo.setLayoutData (new GridData (SWT.FILL, SWT.CENTER, true, false));
 			doitCombo.addSelectionListener(new SelectionAdapter () {
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ToolBarTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ToolBarTab.java
index e93e8ec..b1ae4d8 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ToolBarTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ToolBarTab.java
@@ -11,11 +11,21 @@
 package org.eclipse.swt.examples.controlexample;
 
 
-import org.eclipse.swt.*;
-import org.eclipse.swt.graphics.*;
-import org.eclipse.swt.widgets.*;
-import org.eclipse.swt.layout.*;
-import org.eclipse.swt.events.*;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.events.SelectionAdapter;
+import org.eclipse.swt.events.SelectionEvent;
+import org.eclipse.swt.graphics.Point;
+import org.eclipse.swt.layout.GridData;
+import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.widgets.Button;
+import org.eclipse.swt.widgets.Combo;
+import org.eclipse.swt.widgets.Group;
+import org.eclipse.swt.widgets.Item;
+import org.eclipse.swt.widgets.Menu;
+import org.eclipse.swt.widgets.MenuItem;
+import org.eclipse.swt.widgets.ToolBar;
+import org.eclipse.swt.widgets.ToolItem;
+import org.eclipse.swt.widgets.Widget;
 
 class ToolBarTab extends Tab {
 	/* Example widgets and groups that contain them */
@@ -111,7 +121,7 @@ class ToolBarTab extends Tab {
 		item.setToolTipText("SWT.SEPARATOR");
 		if (comboChildButton.getSelection ()) {
 			Combo combo = new Combo (imageToolBar, SWT.NONE);
-			combo.setItems (new String [] {"250", "500", "750"});
+			combo.setItems ("250", "500", "750");
 			combo.setText (combo.getItem (0));
 			combo.pack ();
 			item.setWidth (combo.getSize ().x);
@@ -149,7 +159,7 @@ class ToolBarTab extends Tab {
 		item.setToolTipText("SWT.SEPARATOR");
 		if (comboChildButton.getSelection ()) {
 			Combo combo = new Combo (textToolBar, SWT.NONE);
-			combo.setItems (new String [] {"250", "500", "750"});
+			combo.setItems ("250", "500", "750");
 			combo.setText (combo.getItem (0));
 			combo.pack ();
 			item.setWidth (combo.getSize ().x);
@@ -194,7 +204,7 @@ class ToolBarTab extends Tab {
 		item.setToolTipText("SWT.SEPARATOR");
 		if (comboChildButton.getSelection ()) {
 			Combo combo = new Combo (imageTextToolBar, SWT.NONE);
-			combo.setItems (new String [] {"250", "500", "750"});
+			combo.setItems ("250", "500", "750");
 			combo.setText (combo.getItem (0));
 			combo.pack ();
 			item.setWidth (combo.getSize ().x);
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/dnd/DNDExample.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/dnd/DNDExample.java
index ad25c4a..3ff7aed 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/dnd/DNDExample.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/dnd/DNDExample.java
@@ -563,7 +563,7 @@ private void createDragTypes(Composite parent) {
 private void createDragWidget(Composite parent) {
 	parent.setLayout(new FormLayout());
 	Combo combo = new Combo(parent, SWT.READ_ONLY);
-	combo.setItems(new String[] {"Toggle Button", "Radio Button", "Checkbox", "Canvas", "Label", "List", "Table", "Tree", "Text", "StyledText", "Combo"});
+	combo.setItems("Toggle Button", "Radio Button", "Checkbox", "Canvas", "Label", "List", "Table", "Tree", "Text", "StyledText", "Combo");
 	combo.select(LABEL);
 	dragControlType = combo.getSelectionIndex();
 	dragControl = createWidget(dragControlType, parent, "Drag Source");
@@ -1102,7 +1102,7 @@ private void createDropTypes(Composite parent) {
 private void createDropWidget(Composite parent) {
 	parent.setLayout(new FormLayout());
 	Combo combo = new Combo(parent, SWT.READ_ONLY);
-	combo.setItems(new String[] {"Toggle Button", "Radio Button", "Checkbox", "Canvas", "Label", "List", "Table", "Tree", "Text", "StyledText", "Combo"});
+	combo.setItems("Toggle Button", "Radio Button", "Checkbox", "Canvas", "Label", "List", "Table", "Tree", "Text", "StyledText", "Combo");
 	combo.select(LABEL);
 	dropControlType = combo.getSelectionIndex();
 	dropControl = createWidget(dropControlType, parent, "Drop Target");
@@ -1281,7 +1281,7 @@ private Control createWidget(int type, Composite parent, String prefix){
 		}
 		case COMBO:{
 			Combo combo = new Combo(parent, SWT.BORDER);
-			combo.setItems(new String[] {"Item a", "Item b", "Item c", "Item d"});
+			combo.setItems("Item a", "Item b", "Item c", "Item d");
 			return combo;
 		}
 		default:
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/imageanalyzer/ImageAnalyzer.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/imageanalyzer/ImageAnalyzer.java
index 376000b..f6f7e71 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/imageanalyzer/ImageAnalyzer.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/imageanalyzer/ImageAnalyzer.java
@@ -303,13 +303,12 @@ public class ImageAnalyzer {
 		group.setLayout(new RowLayout());
 		group.setText(bundle.getString("Background"));
 		backgroundCombo = new Combo(group, SWT.DROP_DOWN | SWT.READ_ONLY);
-		backgroundCombo.setItems(new String[] {
-			bundle.getString("None"),
+		backgroundCombo.setItems(bundle.getString("None"),
 			bundle.getString("White"),
 			bundle.getString("Black"),
 			bundle.getString("Red"),
 			bundle.getString("Green"),
-			bundle.getString("Blue")});
+			bundle.getString("Blue"));
 		backgroundCombo.select(backgroundCombo.indexOf(bundle.getString("White")));
 		backgroundCombo.addSelectionListener(new SelectionAdapter() {
 			@Override
diff --git a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/layoutexample/FormLayoutTab.java b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/layoutexample/FormLayoutTab.java
index 92ab40b..031dd0d 100644
--- a/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/layoutexample/FormLayoutTab.java
+++ b/examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/layoutexample/FormLayoutTab.java
@@ -11,12 +11,30 @@
 package org.eclipse.swt.examples.layoutexample;
 
 
-import org.eclipse.swt.*;
-import org.eclipse.swt.graphics.*;
-import org.eclipse.swt.widgets.*;
-import org.eclipse.swt.layout.*;
-import org.eclipse.swt.events.*;
-import org.eclipse.swt.custom.*;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.custom.CCombo;
+import org.eclipse.swt.custom.TableEditor;
+import org.eclipse.swt.events.MouseAdapter;
+import org.eclipse.swt.events.MouseEvent;
+import org.eclipse.swt.events.SelectionAdapter;
+import org.eclipse.swt.events.SelectionEvent;
+import org.eclipse.swt.graphics.Point;
+import org.eclipse.swt.graphics.Rectangle;
+import org.eclipse.swt.layout.FormAttachment;
+import org.eclipse.swt.layout.FormData;
+import org.eclipse.swt.layout.FormLayout;
+import org.eclipse.swt.layout.GridData;
+import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.widgets.Button;
+import org.eclipse.swt.widgets.Combo;
+import org.eclipse.swt.widgets.Control;
+import org.eclipse.swt.widgets.Dialog;
+import org.eclipse.swt.widgets.Group;
+import org.eclipse.swt.widgets.Label;
+import org.eclipse.swt.widgets.Shell;
+import org.eclipse.swt.widgets.Spinner;
+import org.eclipse.swt.widgets.TableItem;
+import org.eclipse.swt.widgets.Text;
 
 class FormLayoutTab extends Tab {
 	/* Controls for setting layout parameters */
@@ -664,7 +682,7 @@ class FormLayoutTab extends Tab {
 			posButton.setText (LayoutExample.getResourceString ("Position"));
 			posButton.setSelection (!isControl);			
 			final Combo position = new Combo (shell, SWT.NONE);
-			position.setItems (new String [] {"0","25","33","50","67","75","100"});
+			position.setItems ("0","25","33","50","67","75","100");
 			position.setVisibleItemCount (7);
 			position.setText (oldPos);
 			position.setEnabled (!isControl);			
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet119.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet119.java
index 397737e..e104ee8 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet119.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet119.java
@@ -73,13 +73,12 @@ public static void main (String [] args) {
 	Color blue = display.getSystemColor (SWT.COLOR_BLUE);
 	
 	//Create a source ImageData of depth 4
-	PaletteData palette = new PaletteData (new RGB[] {
-		black.getRGB(), white.getRGB(), yellow.getRGB(), 
-		red.getRGB(), blue.getRGB(), green.getRGB()});
+	PaletteData palette = new PaletteData (black.getRGB(), white.getRGB(), yellow.getRGB(), 
+		red.getRGB(), blue.getRGB(), green.getRGB());
 	ImageData sourceData = new ImageData (16, 16, 4, palette, 1, srcData);
 	
 	//Create a mask ImageData of depth 1 (monochrome)
-	palette = new PaletteData (new RGB [] {black.getRGB(), white.getRGB(),});
+	palette = new PaletteData (black.getRGB(), white.getRGB());
 	ImageData maskData = new ImageData (16, 16, 1, palette, 1, mskData);
 
 	//Set mask
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet194.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet194.java
index 9c97ed7..9f75c5a 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet194.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet194.java
@@ -36,11 +36,10 @@ public class Snippet194 {
 		RGB redRGB = new RGB(0xff, 0, 0);
 		RGB greenRGB = new RGB(0, 0xff, 0);
 		RGB blueRGB = new RGB(0, 0, 0xff);
-		palette = new PaletteData(new RGB[] {
-				whiteRGB,	// 0
+		palette = new PaletteData(whiteRGB,	// 0
 				redRGB,		// 1
 				greenRGB,	// 2
-				blueRGB });	// 3
+				blueRGB);	// 3
 		white = new Color(display, whiteRGB);
 		red = new Color(display, redRGB);
 		green = new Color(display, greenRGB);
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet24.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet24.java
index 1805d71..3a1e2d7 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet24.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet24.java
@@ -17,8 +17,8 @@ package org.eclipse.swt.snippets;
  * http://www.eclipse.org/swt/snippets/
  */
 import org.eclipse.swt.*;
-import org.eclipse.swt.widgets.*;
 import org.eclipse.swt.layout.*;
+import org.eclipse.swt.widgets.*;
 
 public class Snippet24 {
 
@@ -27,7 +27,7 @@ public static void main (String [] args) {
 	Shell shell = new Shell (display);
 	shell.setLayout (new RowLayout ());
 	Combo combo = new Combo (shell, SWT.NONE);
-	combo.setItems (new String [] {"A-1", "B-1", "C-1"});
+	combo.setItems ("A-1", "B-1", "C-1");
 	Text text = new Text (shell, SWT.SINGLE | SWT.BORDER);
 	text.setText ("some text");
 	combo.addListener (SWT.DefaultSelection, new Listener () {
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet242.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet242.java
index 501096e..12e09a1 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet242.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet242.java
@@ -16,8 +16,7 @@ package org.eclipse.swt.snippets;
  * For a list of all SWT example snippets see
  * http://www.eclipse.org/swt/snippets/
  */
-
-import org.eclipse.swt.SWT;
+import org.eclipse.swt.*;
 import org.eclipse.swt.events.*;
 import org.eclipse.swt.graphics.*;
 import org.eclipse.swt.widgets.*;
@@ -40,7 +39,7 @@ public static void main(String [] args) {
 	// create a cursor with a transparent image
 	Color white = display.getSystemColor (SWT.COLOR_WHITE);
 	Color black = display.getSystemColor (SWT.COLOR_BLACK);
-	PaletteData palette = new PaletteData (new RGB [] {white.getRGB(), black.getRGB()});
+	PaletteData palette = new PaletteData (white.getRGB(), black.getRGB());
 	ImageData sourceData = new ImageData (16, 16, 1, palette);
 	sourceData.transparentPixel = 0;
 	Cursor cursor = new Cursor(display, sourceData, 0, 0);
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet26.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet26.java
index dabc0be..caf2801 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet26.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet26.java
@@ -17,7 +17,7 @@ package org.eclipse.swt.snippets;
  * http://www.eclipse.org/swt/snippets/
  */
 import org.eclipse.swt.*;
-import org.eclipse.swt.graphics.Rectangle;
+import org.eclipse.swt.graphics.*;
 import org.eclipse.swt.widgets.*;
 
 public class Snippet26 {
@@ -26,7 +26,7 @@ public static void main (String [] args) {
 	Display display = new Display ();
 	Shell shell = new Shell (display);
 	Combo combo = new Combo (shell, SWT.READ_ONLY);
-	combo.setItems (new String [] {"Alpha", "Bravo", "Charlie"});
+	combo.setItems ("Alpha", "Bravo", "Charlie");
 	Rectangle clientArea = shell.getClientArea ();
 	combo.setBounds (clientArea.x, clientArea.y, 200, 200);
 	shell.pack ();
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet289.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet289.java
index 49962f1..27bcac3 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet289.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet289.java
@@ -28,7 +28,7 @@ public static void main(String[] args) {
 	Shell shell = new Shell(display);
 	shell.setLayout(new FillLayout());
 	final Combo combo = new Combo(shell, SWT.NONE);
-	combo.setItems(new String [] {"1111", "2222", "3333", "4444"});
+	combo.setItems("1111", "2222", "3333", "4444");
 	combo.setText(combo.getItem(0));
 	combo.addVerifyListener(new VerifyListener() {
 		@Override
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet332.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet332.java
index 2011ffd..86f0835 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet332.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet332.java
@@ -24,11 +24,11 @@ package org.eclipse.swt.snippets;
  * @since 3.6
  */
 import org.eclipse.swt.*;
-import org.eclipse.swt.layout.*;
-import org.eclipse.swt.widgets.*;
 import org.eclipse.swt.custom.*;
 import org.eclipse.swt.events.*;
 import org.eclipse.swt.graphics.*;
+import org.eclipse.swt.layout.*;
+import org.eclipse.swt.widgets.*;
 
 public class Snippet332 {
 	
@@ -59,7 +59,7 @@ public class Snippet332 {
 		Combo combo = new Combo(shell, SWT.SIMPLE);
 		combo.setFont(font);
 		combo.setBackground(display.getSystemColor(SWT.COLOR_YELLOW));
-		combo.setItems(new String[] { "Option 1...", "Option 2...", "Option 3...", "Option 4..." });
+		combo.setItems("Option 1...", "Option 2...", "Option 3...", "Option 4...");
 		combo.select(1);
 		combo.addSegmentListener(new SegmentListener() {
 			@Override
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet361.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet361.java
index 1c08e3a..0f99f59 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet361.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet361.java
@@ -10,6 +10,8 @@
  *******************************************************************************/
 package org.eclipse.swt.snippets;
 
+import java.awt.*;
+import java.awt.Canvas;
 /*
  * example snippet: use Java2D to modify an image being displayed in an SWT GUI.
  * Take a screen snapshot to print the image to a printer.
@@ -20,25 +22,24 @@ package org.eclipse.swt.snippets;
  * @since 3.8
  */
 import java.awt.Color;
-import java.awt.Frame;
-import java.awt.Canvas;
-import java.awt.Graphics;
-import java.awt.Graphics2D;
 import java.awt.Image;
-import java.awt.Toolkit;
-import java.awt.geom.AffineTransform;
+import java.awt.geom.*;
 
 import org.eclipse.swt.*;
-import org.eclipse.swt.widgets.*;
-import org.eclipse.swt.layout.*;
-import org.eclipse.swt.events.*;
-import org.eclipse.swt.printing.*;
 import org.eclipse.swt.accessibility.*;
-import org.eclipse.swt.awt.SWT_AWT;
-import org.eclipse.swt.graphics.GC;
-import org.eclipse.swt.graphics.ImageData;
+import org.eclipse.swt.awt.*;
+import org.eclipse.swt.events.*;
+import org.eclipse.swt.graphics.*;
 import org.eclipse.swt.graphics.Point;
 import org.eclipse.swt.graphics.Rectangle;
+import org.eclipse.swt.layout.*;
+import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.printing.*;
+import org.eclipse.swt.widgets.*;
+import org.eclipse.swt.widgets.Button;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.FileDialog;
+import org.eclipse.swt.widgets.Label;
 
 public class Snippet361 {
 	static Composite composite; // SWT
@@ -68,7 +69,7 @@ public class Snippet361 {
 		
 		new Label(shell, SWT.NONE).setText("Translate &X by:");
 		final Combo translateXCombo = new Combo(shell, SWT.NONE);
-		translateXCombo.setItems(new String[] {"0", "image width", "image height", "100", "200"});
+		translateXCombo.setItems("0", "image width", "image height", "100", "200");
 		translateXCombo.select(0);
 		translateXCombo.addModifyListener(new ModifyListener() {
 			@Override
@@ -80,7 +81,7 @@ public class Snippet361 {
 		
 		new Label(shell, SWT.NONE).setText("Translate &Y by:");
 		final Combo translateYCombo = new Combo(shell, SWT.NONE);
-		translateYCombo.setItems(new String[] {"0", "image width", "image height", "100", "200"});
+		translateYCombo.setItems("0", "image width", "image height", "100", "200");
 		translateYCombo.select(0);
 		translateYCombo.addModifyListener(new ModifyListener() {
 			@Override
@@ -92,7 +93,7 @@ public class Snippet361 {
 		
 		new Label(shell, SWT.NONE).setText("&Rotate by:");
 		final Combo rotateCombo = new Combo(shell, SWT.NONE);
-		rotateCombo.setItems(new String[] {"0", "Pi", "Pi/2", "Pi/4", "Pi/8"});
+		rotateCombo.setItems("0", "Pi", "Pi/2", "Pi/4", "Pi/8");
 		rotateCombo.select(0);
 		rotateCombo.addModifyListener(new ModifyListener() {
 			@Override
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet70.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet70.java
index aac2779..73a7690 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet70.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet70.java
@@ -35,11 +35,7 @@ public static void main (String [] args) {
 	gc.dispose ();
 	ImageData imageData = image.getImageData ();
 	
-	PaletteData palette = new PaletteData (
-		new RGB [] {
-			new RGB (0, 0, 0),
-			new RGB (0xFF, 0xFF, 0xFF),
-		});
+	PaletteData palette = new PaletteData (new RGB (0, 0, 0),new RGB (0xFF, 0xFF, 0xFF));
 	ImageData maskData = new ImageData (20, 20, 1, palette);
 	Image mask = new Image (display, maskData);
 	gc = new GC (mask);
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet75.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet75.java
index 0c279ce..50b87aa 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet75.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet75.java
@@ -19,8 +19,8 @@ package org.eclipse.swt.snippets;
  * http://www.eclipse.org/swt/snippets/
  */
 import org.eclipse.swt.*;
-import org.eclipse.swt.widgets.*;
 import org.eclipse.swt.layout.*;
+import org.eclipse.swt.widgets.*;
 
 public class Snippet75 {
 
@@ -64,7 +64,7 @@ public static void main (String [] args) {
 	ToolItem i2 = new ToolItem (tb1, SWT.RADIO);
 	i2.setText ("I2");
 	Combo combo1 = new Combo (tb1, SWT.READ_ONLY | SWT.BORDER);
-	combo1.setItems (new String [] {"C1"});
+	combo1.setItems ("C1");
 	combo1.setText ("C1");
 	combo1.pack ();
 	ToolItem i3 = new ToolItem (tb1, SWT.SEPARATOR);
diff --git a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet92.java b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet92.java
index 643f397..6e1c9b5 100644
--- a/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet92.java
+++ b/examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet92.java
@@ -29,7 +29,7 @@ public static void main (String [] args) {
 	Color black = display.getSystemColor (SWT.COLOR_BLACK);
 	
 	//Create a source ImageData of depth 1 (monochrome)
-	PaletteData palette = new PaletteData (new RGB [] {white.getRGB(), black.getRGB(),});
+	PaletteData palette = new PaletteData (white.getRGB(), black.getRGB());
 	ImageData sourceData = new ImageData (20, 20, 1, palette);
 	for (int i = 0; i < 10; i ++) {
 		for (int j = 0; j < 20; j++) {
@@ -38,7 +38,7 @@ public static void main (String [] args) {
 	}
 	
 	//Create a mask ImageData of depth 1 (monochrome)
-	palette = new PaletteData (new RGB [] {white.getRGB(), black.getRGB(),});
+	palette = new PaletteData (white.getRGB(), black.getRGB());
 	ImageData maskData = new ImageData (20, 20, 1, palette);
 	for (int i = 0; i < 20; i ++) {
 		for (int j = 0; j < 10; j++) {
diff --git a/tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_GC.java b/tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_GC.java
index 45ce877..6e69e0b 100644
--- a/tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_GC.java	
+++ b/tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_GC.java	
@@ -194,7 +194,7 @@ public void test_drawImageLorg_eclipse_swt_graphics_ImageII() {
 	Color c2 = new Color(display, 0, 0, 0);
 	Color c3 = new Color(display, 255, 255, 0);
 	
-	PaletteData paletteData = new PaletteData(new RGB[] {c1.getRGB(), c2.getRGB(), c3.getRGB()});
+	PaletteData paletteData = new PaletteData(c1.getRGB(), c2.getRGB(), c3.getRGB());
 	ImageData data = new ImageData(30,30, 8, paletteData);
 	for (int y = 0; y < data.height; y++) {
 		for (int x = 0; x < data.width; x++) {
@@ -238,7 +238,7 @@ public void test_drawImageLorg_eclipse_swt_graphics_ImageIIIIIIII() {
 	Color c2 = new Color(display, 0, 0, 0);
 	Color c3 = new Color(display, 255, 255, 0);
 	
-	PaletteData paletteData = new PaletteData(new RGB[] {c1.getRGB(), c2.getRGB(), c3.getRGB()});
+	PaletteData paletteData = new PaletteData(c1.getRGB(), c2.getRGB(), c3.getRGB());
 	ImageData data = new ImageData(30,30, 8, paletteData);
 	for (int y = 0; y < data.height; y++) {
 		for (int x = 0; x < data.width; x++) {
diff --git a/tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_Image.java b/tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_Image.java
index 1e2ff9c..05d048f 100644
--- a/tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_Image.java	
+++ b/tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_Image.java	
@@ -216,11 +216,11 @@ public void test_ConstructorLorg_eclipse_swt_graphics_DeviceLorg_eclipse_swt_gra
 //	} catch (SWTException e) {
 //	}
 
-	data = new ImageData(10, 10, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}));
+	data = new ImageData(10, 10, 1, new PaletteData(new RGB(0, 0, 0)));
 	image = new Image(null, data);
 	image.dispose();
 
-	data = new ImageData(10, 10, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}));
+	data = new ImageData(10, 10, 1, new PaletteData(new RGB(0, 0, 0)));
 	image = new Image(display, data);
 	image.dispose();
 	
@@ -242,7 +242,7 @@ public void test_ConstructorLorg_eclipse_swt_graphics_DeviceLorg_eclipse_swt_gra
 @Test
 public void test_ConstructorLorg_eclipse_swt_graphics_DeviceLorg_eclipse_swt_graphics_ImageDataLorg_eclipse_swt_graphics_ImageData() {
 	ImageData data = null;
-	ImageData data1 = new ImageData(10, 10, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}));
+	ImageData data1 = new ImageData(10, 10, 1, new PaletteData(new RGB(0, 0, 0)));
 	Image image = null;
 	
 	try {
@@ -253,7 +253,7 @@ public void test_ConstructorLorg_eclipse_swt_graphics_DeviceLorg_eclipse_swt_gra
 		assertSWTProblem("Incorrect exception thrown for ImageData source == null", SWT.ERROR_NULL_ARGUMENT, e);
 	}
 
-	data = new ImageData(10, 10, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}));
+	data = new ImageData(10, 10, 1, new PaletteData(new RGB(0, 0, 0)));
 	data1 = null;
 	try {
 		image = new Image(display, data, data1);
@@ -263,8 +263,8 @@ public void test_ConstructorLorg_eclipse_swt_graphics_DeviceLorg_eclipse_swt_gra
 		assertSWTProblem("Incorrect exception thrown for ImageData mask == null", SWT.ERROR_NULL_ARGUMENT, e);
 	}
 
-	data = new ImageData(10, 10, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}));
-	data1 = new ImageData(1, 10, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}));
+	data = new ImageData(10, 10, 1, new PaletteData(new RGB(0, 0, 0)));
+	data1 = new ImageData(1, 10, 1, new PaletteData(new RGB(0, 0, 0)));
 	try {
 		image = new Image(display, data, data1);
 		image.dispose();
@@ -273,8 +273,8 @@ public void test_ConstructorLorg_eclipse_swt_graphics_DeviceLorg_eclipse_swt_gra
 		assertSWTProblem("Incorrect exception thrown for ImageData source width != ImageData mask width", SWT.ERROR_INVALID_ARGUMENT, e);
 	}
 
-	data = new ImageData(10, 1, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}));
-	data1 = new ImageData(10, 10, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}));
+	data = new ImageData(10, 1, 1, new PaletteData(new RGB(0, 0, 0)));
+	data1 = new ImageData(10, 10, 1, new PaletteData(new RGB(0, 0, 0)));
 	try {
 		image = new Image(display, data, data1);
 		image.dispose();
@@ -283,15 +283,15 @@ public void test_ConstructorLorg_eclipse_swt_graphics_DeviceLorg_eclipse_swt_gra
 		assertSWTProblem("Incorrect exception thrown for ImageData source height != ImageData mask height", SWT.ERROR_INVALID_ARGUMENT, e);
 	}
 
-	data = new ImageData(10, 10, 8, new PaletteData(new RGB[] {new RGB(0, 0, 0)}));
-	data1 = new ImageData(10, 10, 8, new PaletteData(new RGB[] {new RGB(0, 0, 0)}));
+	data = new ImageData(10, 10, 8, new PaletteData(new RGB(0, 0, 0)));
+	data1 = new ImageData(10, 10, 8, new PaletteData(new RGB(0, 0, 0)));
 	image = new Image(display, data, data1); // Image now accepts masks where depth != 1
 	image.dispose();
 
 	data = new ImageData(10, 10, 8, new PaletteData(0x30, 0x0C, 0x03));
 	// set opaque red pixel at x=9, y=9
 	data.setPixel(9, 9, 0x30);
-	data1 = new ImageData(10, 10, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0), new RGB(255, 255, 255)}));
+	data1 = new ImageData(10, 10, 1, new PaletteData(new RGB(0, 0, 0), new RGB(255, 255, 255)));
 	data1.setPixel(9, 9, 1);
 	image = new Image(display, data, data1);
 	Image gcImage = new Image(display, 10, 10);
@@ -624,7 +624,7 @@ public void test_equalsLjava_lang_Object() {
 		
 		assertTrue(":b:", image.equals(image1));
 		
-		ImageData imageData = new ImageData(10, 10, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}));
+		ImageData imageData = new ImageData(10, 10, 1, new PaletteData(new RGB(0, 0, 0)));
 		image.dispose();
 		image = new Image(display, imageData);
 		image1 = new Image(display, imageData);
@@ -718,7 +718,7 @@ public void test_getBounds() {
 	assertEquals(":b:", bounds, bounds1);
 
 	// create icon image
-	ImageData imageData = new ImageData(bounds.width, bounds.height, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}));
+	ImageData imageData = new ImageData(bounds.width, bounds.height, 1, new PaletteData(new RGB(0, 0, 0)));
 	image = new Image(display, imageData);
 	bounds1 = image.getBounds();
 	image.dispose();
@@ -743,7 +743,7 @@ public void test_hashCode() {
 	
 		assertEquals(":a:", image1.hashCode(), image.hashCode());
 		
-		ImageData imageData = new ImageData(10, 10, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}));
+		ImageData imageData = new ImageData(10, 10, 1, new PaletteData(new RGB(0, 0, 0)));
 		image.dispose();
 		image = new Image(display, imageData);
 		image1 = new Image(display, imageData);
@@ -836,7 +836,7 @@ public void test_setBackgroundLorg_eclipse_swt_graphics_Color() {
 	image.dispose();
 	
 	// create an image with transparency and then set the background color
-	ImageData imageData = new ImageData(10, 10, 2, new PaletteData(new RGB[] {new RGB(0, 0, 0), new RGB(255, 255, 255), new RGB(50, 100, 150)}));
+	ImageData imageData = new ImageData(10, 10, 2, new PaletteData(new RGB(0, 0, 0), new RGB(255, 255, 255), new RGB(50, 100, 150)));
 	imageData.transparentPixel = 0; // transparent pixel is currently black
 	image = new Image(display, imageData);
 	image.setBackground(display.getSystemColor(SWT.COLOR_GREEN));
diff --git a/tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_ImageData.java b/tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_ImageData.java
index f3df852..63c7898 100644
--- a/tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_ImageData.java	
+++ b/tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_ImageData.java	
@@ -48,13 +48,13 @@ public void setUp() {
 @Test
 public void test_ConstructorIIILorg_eclipse_swt_graphics_PaletteData() {
 	try {
-		new ImageData(-1, 1, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}));
+		new ImageData(-1, 1, 1, new PaletteData(new RGB(0, 0, 0)));
 		fail("No exception thrown for width < 0");
 	} catch (IllegalArgumentException e) {
 	}
 
 	try {
-		new ImageData(1, -1, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}));
+		new ImageData(1, -1, 1, new PaletteData(new RGB(0, 0, 0)));
 		fail("No exception thrown for height < 0");
 	} catch (IllegalArgumentException e) {
 	}
@@ -66,14 +66,14 @@ public void test_ConstructorIIILorg_eclipse_swt_graphics_PaletteData() {
 	}
 
 	try {
-		new ImageData(1, 1, 3, new PaletteData(new RGB[] {new RGB(0, 0, 0)}));
+		new ImageData(1, 1, 3, new PaletteData(new RGB(0, 0, 0)));
 		fail("No exception thrown for unsupported depth");
 	} catch (IllegalArgumentException e) {
 	}
 	
 	int[] validDepths = {1, 2, 4, 8, 16, 24, 32};
 	for (int i = 0; i < validDepths.length; i++) {
-		new ImageData(1, 1, validDepths[i], new PaletteData(new RGB[] {new RGB(0, 0, 0)}));
+		new ImageData(1, 1, validDepths[i], new PaletteData(new RGB(0, 0, 0)));
 	}
 }
 
@@ -82,13 +82,13 @@ public void test_ConstructorIIILorg_eclipse_swt_graphics_PaletteDataI$B() {
 	byte[] validData = new byte[] {0, 0x4f, 0x4f, 0};
 	
 	try {
-		new ImageData(-1, 1, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, validData);
+		new ImageData(-1, 1, 1, new PaletteData(new RGB(0, 0, 0)), 1, validData);
 		fail("No exception thrown for width < 0");
 	} catch (IllegalArgumentException e) {
 	}
 
 	try {
-		new ImageData(1, -1, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, validData);
+		new ImageData(1, -1, 1, new PaletteData(new RGB(0, 0, 0)), 1, validData);
 		fail("No exception thrown for height < 0");
 	} catch (IllegalArgumentException e) {
 	}
@@ -100,37 +100,37 @@ public void test_ConstructorIIILorg_eclipse_swt_graphics_PaletteDataI$B() {
 	}
 
 	try {
-		new ImageData(1, 1, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, null);
+		new ImageData(1, 1, 1, new PaletteData(new RGB(0, 0, 0)), 1, null);
 		fail("No exception thrown for data == null");
 	} catch (IllegalArgumentException e) {
 	}
 
 	try {
-		new ImageData(1, 1, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, new byte[] {});
+		new ImageData(1, 1, 1, new PaletteData(new RGB(0, 0, 0)), 1, new byte[] {});
 		fail("No exception thrown for data array too small");
 	} catch (IllegalArgumentException e) {
 	}
 
 	try {
-		new ImageData(1, 1, 16, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, new byte[] {0x4f});
+		new ImageData(1, 1, 16, new PaletteData(new RGB(0, 0, 0)), 1, new byte[] {0x4f});
 		fail("No exception thrown for data array too small");
 	} catch (IllegalArgumentException e) {
 	}
 
 	try {
-		new ImageData(1, 1, 32, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, new byte[] {0x4f, 0x4f});
+		new ImageData(1, 1, 32, new PaletteData(new RGB(0, 0, 0)), 1, new byte[] {0x4f, 0x4f});
 		fail("No exception thrown for data array too small");
 	} catch (IllegalArgumentException e) {
 	}
 
 	try {
-		new ImageData(2, 2, 8, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, new byte[] {0x4f, 0x4f, 0x4f});
+		new ImageData(2, 2, 8, new PaletteData(new RGB(0, 0, 0)), 1, new byte[] {0x4f, 0x4f, 0x4f});
 		fail("No exception thrown for data array too small");
 	} catch (IllegalArgumentException e) {
 	}
 
 	try {
-		new ImageData(1, 1, 3, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, validData);
+		new ImageData(1, 1, 3, new PaletteData(new RGB(0, 0, 0)), 1, validData);
 		fail("No exception thrown for unsupported depth");
 	} catch (IllegalArgumentException e) {
 	}
@@ -138,12 +138,12 @@ public void test_ConstructorIIILorg_eclipse_swt_graphics_PaletteDataI$B() {
 	// verify all valid depths
 	int[] validDepths = {1, 2, 4, 8, 16, 24, 32};
 	for (int i = 0; i < validDepths.length; i++) {
-		new ImageData(1, 1, validDepths[i], new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, validData);
+		new ImageData(1, 1, validDepths[i], new PaletteData(new RGB(0, 0, 0)), 1, validData);
 	}
 	
 	// verify no divide by zero exception if scanlinePad == 0
 	try {
-		new ImageData(1, 1, 8, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 0, validData);
+		new ImageData(1, 1, 8, new PaletteData(new RGB(0, 0, 0)), 0, validData);
 		fail("No exception thrown for scanlinePad == 0");
 	} catch (IllegalArgumentException e) {
 	}
@@ -374,7 +374,7 @@ public void test_getPixelII() {
 	int depth = 4;
 	byte pixelValue = 1;
 	byte[] data = {(byte) ((pixelValue << 4) + pixelValue), (byte) (pixelValue << 4), (byte) ((pixelValue << 4) + pixelValue), (byte) (pixelValue << 4), (byte) ((pixelValue << 4) + pixelValue), (byte) (pixelValue << 4)}; 
-	imageData = new ImageData(width, height, depth, new PaletteData(new RGB[] {new RGB(0, 0, 255), new RGB(111, 111, 111)}), 1, data);
+	imageData = new ImageData(width, height, depth, new PaletteData(new RGB(0, 0, 255), new RGB(111, 111, 111)), 1, data);
 	for (int y = 0; y < height; y++) {
 		for (int x = 0; x < width; x++) {
 			int pixel = imageData.getPixel(x, y);
@@ -391,7 +391,7 @@ public void test_getPixelsIII$BI() {
 	byte[] pixelData = new byte[SIZE];
 
 	// test 1 bit
-	imageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 1, new PaletteData(new RGB[]{new RGB(0, 0, 0), new RGB(255, 255, 255)}));
+	imageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 1, new PaletteData(new RGB(0, 0, 0), new RGB(255, 255, 255)));
 	imageData.getPixels(0, 1, GET_WIDTH, pixelData, OFFSET);
 	for (int i = 0; i < pixelData.length; i ++) {
 		assertEquals(":a:", 0, pixelData[i]);
@@ -411,7 +411,7 @@ public void test_getPixelsIII$BI() {
 	}
 
 	// test 2 bit
-	imageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 2, new PaletteData(new RGB[]{new RGB(0, 0, 0), new RGB(255, 255, 255)}));
+	imageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 2, new PaletteData(new RGB(0, 0, 0), new RGB(255, 255, 255)));
 	imageData.getPixels(0, 1, GET_WIDTH, pixelData, OFFSET);
 	for (int i = 0; i < pixelData.length; i ++) {
 		assertEquals(":e:", 0, pixelData[i]);
@@ -431,7 +431,7 @@ public void test_getPixelsIII$BI() {
 	}
 
 	// test 4 bit
-	imageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 4, new PaletteData(new RGB[]{new RGB(0, 0, 0), new RGB(255, 255, 255)}));
+	imageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 4, new PaletteData(new RGB(0, 0, 0), new RGB(255, 255, 255)));
 	imageData.getPixels(0, 1, GET_WIDTH, pixelData, OFFSET);
 	for (int i = 0; i < pixelData.length; i ++) {
 		assertEquals(":i:", 0, pixelData[i]);
@@ -451,7 +451,7 @@ public void test_getPixelsIII$BI() {
 	}
 
 	// test 8 bit
-	imageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 8, new PaletteData(new RGB[]{new RGB(0, 0, 0), new RGB(255, 255, 255)}));
+	imageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 8, new PaletteData(new RGB(0, 0, 0), new RGB(255, 255, 255)));
 	imageData.getPixels(0, 1, GET_WIDTH, pixelData, OFFSET);
 	for (int i = 0; i < pixelData.length; i ++) {
 		assertEquals(":m:", 0, pixelData[i]);
@@ -529,7 +529,7 @@ public void test_getPixelsIII$II() {
 	int[] pixelData = new int[SIZE];
 
 	// test 1 bit
-	imageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 1, new PaletteData(new RGB[]{new RGB(0, 0, 0), new RGB(255, 255, 255)}));
+	imageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 1, new PaletteData(new RGB(0, 0, 0), new RGB(255, 255, 255)));
 	imageData.getPixels(0, 1, GET_WIDTH, pixelData, OFFSET);
 	for (int i = 0; i < pixelData.length; i ++) {
 		assertEquals(":a:", 0, pixelData[i]);
@@ -549,7 +549,7 @@ public void test_getPixelsIII$II() {
 	}
 
 	// test 2 bit
-	imageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 2, new PaletteData(new RGB[]{new RGB(0, 0, 0), new RGB(255, 255, 255)}));
+	imageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 2, new PaletteData(new RGB(0, 0, 0), new RGB(255, 255, 255)));
 	imageData.getPixels(0, 1, GET_WIDTH, pixelData, OFFSET);
 	for (int i = 0; i < pixelData.length; i ++) {
 		assertEquals(":e:", 0, pixelData[i]);
@@ -569,7 +569,7 @@ public void test_getPixelsIII$II() {
 	}
 
 	// test 4 bit
-	imageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 4, new PaletteData(new RGB[]{new RGB(0, 0, 0), new RGB(255, 255, 255)}));
+	imageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 4, new PaletteData(new RGB(0, 0, 0), new RGB(255, 255, 255)));
 	imageData.getPixels(0, 1, GET_WIDTH, pixelData, OFFSET);
 	for (int i = 0; i < pixelData.length; i ++) {
 		assertEquals(":i:", 0, pixelData[i]);
@@ -589,7 +589,7 @@ public void test_getPixelsIII$II() {
 	}
 
 	// test 8 bit
-	imageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 8, new PaletteData(new RGB[]{new RGB(0, 0, 0), new RGB(255, 255, 255)}));
+	imageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 8, new PaletteData(new RGB(0, 0, 0), new RGB(255, 255, 255)));
 	imageData.getPixels(0, 1, GET_WIDTH, pixelData, OFFSET);
 	for (int i = 0; i < pixelData.length; i ++) {
 		assertEquals(":m:", 0, pixelData[i]);
@@ -934,7 +934,7 @@ public void test_setPixelsIII$BI() {
 	byte[] pixelData = new byte[SIZE];
 
 	// test 1 bit
-	imageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 1, new PaletteData(new RGB[]{new RGB(0, 0, 0), new RGB(255, 255, 255)}));
+	imageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 1, new PaletteData(new RGB(0, 0, 0), new RGB(255, 255, 255)));
 	byte[] values = new byte[]{0x1, 0x1, 0x1, 0x1, 0x1};
 	imageData.setPixels(0, 1, values.length - OFFSET, values, OFFSET);
 	imageData.getPixels(0, 1, IMAGE_DIMENSION, pixelData, 0);
@@ -947,7 +947,7 @@ public void test_setPixelsIII$BI() {
 	}
 
 	// test 2 bit
-	imageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 2, new PaletteData(new RGB[]{new RGB(0, 0, 0), new RGB(255, 255, 255)}));
+	imageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 2, new PaletteData(new RGB(0, 0, 0), new RGB(255, 255, 255)));
 	values = new byte[]{0x1, 0x2, 0x3, 0x2, 0x1};
 	imageData.setPixels(0, 1, values.length - OFFSET, values, OFFSET);
 	imageData.getPixels(0, 1, IMAGE_DIMENSION, pixelData, 0);
@@ -960,7 +960,7 @@ public void test_setPixelsIII$BI() {
 	}
 
 	// test 4 bit
-	imageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 4, new PaletteData(new RGB[]{new RGB(0, 0, 0), new RGB(255, 255, 255)}));
+	imageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 4, new PaletteData(new RGB(0, 0, 0), new RGB(255, 255, 255)));
 	values = new byte[]{0x1, 0x2, 0x3, 0x4, 0xF};
 	imageData.setPixels(0, 1, values.length - OFFSET, values, OFFSET);
 	imageData.getPixels(0, 1, IMAGE_DIMENSION, pixelData, 0);
@@ -973,7 +973,7 @@ public void test_setPixelsIII$BI() {
 	}
 
 	// test 8 bit
-	imageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 8, new PaletteData(new RGB[]{new RGB(0, 0, 0), new RGB(255, 255, 255)}));
+	imageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 8, new PaletteData(new RGB(0, 0, 0), new RGB(255, 255, 255)));
 	values = new byte[]{0x1, 0x2, 0x3, 0xF, (byte)0xFF};
 	imageData.setPixels(0, 1, values.length - OFFSET, values, OFFSET);
 	imageData.getPixels(0, 1, IMAGE_DIMENSION, pixelData, 0);
@@ -1043,7 +1043,7 @@ public void test_setPixelsIII$II() {
 	int[] pixelData = new int[SIZE];
 
 	// test 1 bit
-	imageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 1, new PaletteData(new RGB[]{new RGB(0, 0, 0), new RGB(255, 255, 255)}));
+	imageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 1, new PaletteData(new RGB(0, 0, 0), new RGB(255, 255, 255)));
 	int[] values = new int[]{0x1, 0x1, 0x1, 0x1, 0x1};
 	imageData.setPixels(0, 1, values.length - OFFSET, values, OFFSET);
 	imageData.getPixels(0, 1, IMAGE_DIMENSION, pixelData, 0);
@@ -1056,7 +1056,7 @@ public void test_setPixelsIII$II() {
 	}
 
 	// test 2 bit
-	imageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 2, new PaletteData(new RGB[]{new RGB(0, 0, 0), new RGB(255, 255, 255)}));
+	imageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 2, new PaletteData(new RGB(0, 0, 0), new RGB(255, 255, 255)));
 	values = new int[]{0x1, 0x2, 0x3, 0x2, 0x1};
 	imageData.setPixels(0, 1, values.length - OFFSET, values, OFFSET);
 	imageData.getPixels(0, 1, IMAGE_DIMENSION, pixelData, 0);
@@ -1069,7 +1069,7 @@ public void test_setPixelsIII$II() {
 	}
 
 	// test 4 bit
-	imageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 4, new PaletteData(new RGB[]{new RGB(0, 0, 0), new RGB(255, 255, 255)}));
+	imageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 4, new PaletteData(new RGB(0, 0, 0), new RGB(255, 255, 255)));
 	values = new int[]{0x1, 0x2, 0x3, 0x4, 0xF};
 	imageData.setPixels(0, 1, values.length - OFFSET, values, OFFSET);
 	imageData.getPixels(0, 1, IMAGE_DIMENSION, pixelData, 0);
@@ -1082,7 +1082,7 @@ public void test_setPixelsIII$II() {
 	}
 
 	// test 8 bit
-	imageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 8, new PaletteData(new RGB[]{new RGB(0, 0, 0), new RGB(255, 255, 255)}));
+	imageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 8, new PaletteData(new RGB(0, 0, 0), new RGB(255, 255, 255)));
 	values = new int[]{0x1, 0x2, 0x3, 0xF, 0xFF};
 	imageData.setPixels(0, 1, values.length - OFFSET, values, OFFSET);
 	imageData.getPixels(0, 1, IMAGE_DIMENSION, pixelData, 0);
diff --git a/tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_PaletteData.java b/tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_PaletteData.java
index 59ba1a8..9ec9085 100644
--- a/tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_PaletteData.java	
+++ b/tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_PaletteData.java	
@@ -45,7 +45,7 @@ public void test_Constructor$Lorg_eclipse_swt_graphics_RGB() {
 	new PaletteData(new RGB[] {null, null});
 	assertFalse(":b:", data.isDirect);
 
-	new PaletteData(new RGB[] {new RGB(0, 0, 0), new RGB(255, 255, 255)});
+	new PaletteData(new RGB(0, 0, 0), new RGB(255, 255, 255));
 	assertFalse(":c:", data.isDirect);
 }
 

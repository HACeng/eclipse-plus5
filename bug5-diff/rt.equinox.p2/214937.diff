commit 47234ee1593dfceaa4b108503c5763eac683054b
Author: Susan Franklin <sfranklin>
Date:   Thu Jan 31 22:23:14 2008 +0000

    Bug 214937 - [prov] [ui] auto update popup workflow improvements

1	2	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AutomaticUpdateScheduler.java
8	0	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
3	3	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
98	8	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
120	132	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdatesPopup.java
2	1	bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/p2/updatechecker/UpdateChecker.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AutomaticUpdateScheduler.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AutomaticUpdateScheduler.java
index 6636647..ae4c248 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AutomaticUpdateScheduler.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AutomaticUpdateScheduler.java
@@ -14,7 +14,6 @@ import java.util.Calendar;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.ui.sdk.prefs.PreferenceConstants;
-import org.eclipse.equinox.internal.p2.ui.sdk.updates.AutomaticUpdater;
 import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.updatechecker.IUpdateListener;
 import org.eclipse.equinox.p2.updatechecker.UpdateChecker;
@@ -96,7 +95,7 @@ public class AutomaticUpdateScheduler implements IStartup {
 			delay = computeDelay(pref);
 			poll = computePoll(pref);
 		}
-		listener = new AutomaticUpdater();
+		listener = ProvSDKUIActivator.getDefault().getAutomaticUpdater();
 		checker.addUpdateCheck(profileId, delay, poll, listener);
 
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
index 081819a..a65eb8f 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
@@ -12,6 +12,7 @@ package org.eclipse.equinox.internal.p2.ui.sdk;
 
 import java.io.*;
 import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.internal.p2.ui.sdk.updates.AutomaticUpdater;
 import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.engine.IProfile;
 import org.eclipse.equinox.p2.engine.IProfileRegistry;
@@ -33,6 +34,7 @@ public class ProvSDKUIActivator extends AbstractUIPlugin {
 	private static ProvSDKUIActivator plugin;
 	private static BundleContext context;
 	private AutomaticUpdateScheduler scheduler;
+	private AutomaticUpdater updater;
 	private IQueryProvider queryProvider;
 	private SimpleLicenseManager licenseManager;
 
@@ -126,6 +128,12 @@ public class ProvSDKUIActivator extends AbstractUIPlugin {
 		return scheduler;
 	}
 
+	public AutomaticUpdater getAutomaticUpdater() {
+		if (updater == null)
+			updater = new AutomaticUpdater();
+		return updater;
+	}
+
 	/**
 	 * Get the id of the profile for the running system.  If not available, get
 	 * any available profile.  Getting any profile allows testing of the
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
index 679e9d9..75e1b42 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
@@ -59,7 +59,7 @@ SchedulerStartup_10PM=10:00 PM
 SchedulerStartup_11PM=11:00 PM
 SchedulerStartup_12AM=12:00 AM
 AutomaticUpdatesJob_AutomaticUpdateSearch=Automatic Update Search
-AutomaticUpdatesPopup_RemindAndPrefLink=<a href="{0}">Remind</a> me in {1}.\nSet reminder <a href="{2}">preferences</a>
+AutomaticUpdatesPopup_RemindAndPrefLink=You will be reminded in {0}.\nSet reminder <a href="{1}">preferences</a>
 AutomaticUpdatesPopup_ReminderJobTitle=Update reminder job
 AutomaticUpdatesPreferencePage_findUpdates=Automatically &find new updates and notify me
 AutomaticUpdateScheduler_15Minutes=15 minutes
@@ -77,8 +77,8 @@ AutomaticUpdatesPreferencePage_findOnSchedule=Look for updates on the following
 AutomaticUpdatesPreferencePage_downloadOptions=&Download options
 AutomaticUpdatesPreferencePage_searchAndNotify=Search for updates and &notify me when they are available
 AutomaticUpdatesPreferencePage_downloadAndNotify=Download new updates &automatically and notify me when ready to install them
-AutomaticUpdatesDialog_ClickToReviewDownloaded=Software updates have been downloaded.\nClick here to <a>Review and Install Updates</a>.
-AutomaticUpdatesDialog_ClickToReviewNotDownloaded=Updates are available for your software.\nClick here to <a>Review and Install Updates</a>.
+AutomaticUpdatesDialog_ClickToReviewDownloaded=Software updates have been downloaded.\nClick to review and install updates.
+AutomaticUpdatesDialog_ClickToReviewNotDownloaded=Updates are available for your software.\nClick to review and install updates.
 AutomaticUpdatesPreferencePage_at=at
 AutomaticUpdatesPreferencePage_RemindGroup=&When updates are found
 AutomaticUpdatesPreferencePage_RemindSchedule=&Remind me about updates every:
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
index 0a928ee..02d1d3e 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
@@ -12,22 +12,26 @@ package org.eclipse.equinox.internal.p2.ui.sdk.updates;
 
 import org.eclipse.core.runtime.*;
 import org.eclipse.core.runtime.jobs.*;
-import org.eclipse.equinox.internal.p2.ui.sdk.ProvSDKMessages;
-import org.eclipse.equinox.internal.p2.ui.sdk.ProvSDKUIActivator;
+import org.eclipse.equinox.internal.p2.ui.sdk.*;
 import org.eclipse.equinox.internal.p2.ui.sdk.prefs.PreferenceConstants;
 import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.director.*;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.query.*;
-import org.eclipse.equinox.p2.ui.ProvUI;
-import org.eclipse.equinox.p2.ui.ProvisioningOperationRunner;
+import org.eclipse.equinox.p2.ui.*;
+import org.eclipse.equinox.p2.ui.dialogs.UpdateWizard;
 import org.eclipse.equinox.p2.ui.model.ProfileElement;
 import org.eclipse.equinox.p2.ui.operations.*;
 import org.eclipse.equinox.p2.ui.query.ElementQueryDescriptor;
 import org.eclipse.equinox.p2.ui.query.IQueryProvider;
 import org.eclipse.equinox.p2.updatechecker.IUpdateListener;
 import org.eclipse.equinox.p2.updatechecker.UpdateEvent;
-import org.eclipse.ui.PlatformUI;
+import org.eclipse.jface.action.IStatusLineManager;
+import org.eclipse.jface.window.Window;
+import org.eclipse.jface.wizard.WizardDialog;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.widgets.*;
+import org.eclipse.ui.*;
 
 /**
  * @since 3.4
@@ -35,16 +39,30 @@ import org.eclipse.ui.PlatformUI;
 public class AutomaticUpdater implements IUpdateListener {
 
 	Preferences prefs;
+	StatusLineCLabelContribution updateAffordance;
+	IInstallableUnit[] toUpdate;
+	String profileId;
+	private static final String AUTO_UPDATE_STATUS_ITEM = "AutoUpdatesStatus"; //$NON-NLS-1$
 
 	public AutomaticUpdater() {
 		prefs = ProvSDKUIActivator.getDefault().getPluginPreferences();
 	}
 
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.equinox.p2.updatechecker.IUpdateListener#updatesAvailable(org.eclipse.equinox.p2.updatechecker.UpdateEvent)
+	 */
 	public void updatesAvailable(final UpdateEvent event) {
 		final boolean download = prefs.getBoolean(PreferenceConstants.PREF_DOWNLOAD_ONLY);
-		final IInstallableUnit[] toUpdate = getUpdatesToShow(event);
+		// Recompute the updates that we want to make available to the user.
+		toUpdate = getUpdatesToShow(event);
+
+		profileId = event.getProfileId();
 		if (toUpdate.length <= 0)
 			return;
+
+		// Download the items if the preference dictates before
+		// showing the user that updates are available.
 		try {
 			if (download) {
 				UpdateEvent eventWithOnlyRoots = new UpdateEvent(event.getProfileId(), toUpdate);
@@ -62,7 +80,7 @@ public class AutomaticUpdater implements IUpdateListener {
 							if (status.isOK()) {
 								PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable() {
 									public void run() {
-										new AutomaticUpdatesPopup(toUpdate, event.getProfileId(), true, prefs).open();
+										showUpdatesAvailable(true);
 									}
 								});
 							} else if (status.getSeverity() != IStatus.CANCEL) {
@@ -74,7 +92,7 @@ public class AutomaticUpdater implements IUpdateListener {
 			} else {
 				PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable() {
 					public void run() {
-						new AutomaticUpdatesPopup(toUpdate, event.getProfileId(), false, prefs).open();
+						showUpdatesAvailable(false);
 					}
 				});
 			}
@@ -85,6 +103,8 @@ public class AutomaticUpdater implements IUpdateListener {
 
 	}
 
+	// Figure out which updates we want to expose to the user.
+	// Updates of IU's below the user's visiblity will not be shown.
 	private IInstallableUnit[] getUpdatesToShow(final UpdateEvent event) {
 		// We could simply collect the install roots ourselves, but implementing
 		// this in terms of a normal "what's installed" query allows the policy to be defined only
@@ -106,4 +126,74 @@ public class AutomaticUpdater implements IUpdateListener {
 			result[i] = (IInstallableUnit) ProvUI.getAdapter(elements[i], IInstallableUnit.class);
 		return result;
 	}
+
+	Shell getWorkbenchWindowShell() {
+		IWorkbenchWindow activeWindow = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
+		return activeWindow != null ? activeWindow.getShell() : null;
+
+	}
+
+	IStatusLineManager getStatusLineManager() {
+		IWorkbenchWindow activeWindow = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
+		if (activeWindow == null)
+			return null;
+		// YUCK!  
+		IWorkbenchPartSite site = activeWindow.getActivePage().getActivePart().getSite();
+		if (site instanceof IViewSite) {
+			return ((IViewSite) site).getActionBars().getStatusLineManager();
+		} else if (site instanceof IEditorSite) {
+			return ((IEditorSite) site).getActionBars().getStatusLineManager();
+		}
+		return null;
+	}
+
+	void updateStatusLine() {
+		IStatusLineManager manager = getStatusLineManager();
+		if (manager != null)
+			manager.update(true);
+	}
+
+	private void createUpdateAffordance() {
+		updateAffordance = new StatusLineCLabelContribution(AUTO_UPDATE_STATUS_ITEM, 5);
+		updateAffordance.addListener(SWT.MouseDown, new Listener() {
+			public void handleEvent(Event event) {
+				launchUpdate();
+			}
+		});
+		updateAffordance.setTooltip(ProvSDKMessages.AutomaticUpdatesDialog_UpdatesAvailableTitle);
+		updateAffordance.setImage(ProvUIImages.getImage(ProvUIImages.IMG_TOOL_UPDATE));
+		IStatusLineManager manager = getStatusLineManager();
+		if (manager != null) {
+			manager.add(updateAffordance);
+		}
+		updateAffordance.setVisible(false);
+
+	}
+
+	void showUpdatesAvailable(boolean alreadyDownloaded) {
+		if (updateAffordance == null)
+			createUpdateAffordance();
+		updateAffordance.setVisible(true);
+
+		new AutomaticUpdatesPopup(getWorkbenchWindowShell(), alreadyDownloaded, prefs).open();
+	}
+
+	void clearUpdatesAvailable() {
+		IStatusLineManager manager = getStatusLineManager();
+		if (manager != null) {
+			manager.remove(updateAffordance);
+		}
+		manager.update(true);
+		updateAffordance.dispose();
+		updateAffordance = null;
+
+	}
+
+	public void launchUpdate() {
+		UpdateWizard wizard = new UpdateWizard(profileId, toUpdate, ProvSDKUIActivator.getDefault().getLicenseManager(), ProvSDKUIActivator.getDefault().getQueryProvider());
+		WizardDialog dialog = new WizardDialog(getWorkbenchWindowShell(), wizard);
+		if (dialog.open() == Window.OK)
+			clearUpdatesAvailable();
+	}
+
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdatesPopup.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdatesPopup.java
index fe852b4..a15238b 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdatesPopup.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdatesPopup.java
@@ -14,24 +14,22 @@ import org.eclipse.core.runtime.*;
 import org.eclipse.core.runtime.Preferences.IPropertyChangeListener;
 import org.eclipse.core.runtime.Preferences.PropertyChangeEvent;
 import org.eclipse.core.runtime.jobs.Job;
-import org.eclipse.equinox.internal.p2.ui.sdk.*;
+import org.eclipse.equinox.internal.p2.ui.sdk.ProvSDKMessages;
+import org.eclipse.equinox.internal.p2.ui.sdk.ProvSDKUIActivator;
 import org.eclipse.equinox.internal.p2.ui.sdk.prefs.PreferenceConstants;
-import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.ui.ProvUIImages;
-import org.eclipse.equinox.p2.ui.dialogs.UpdateWizard;
-import org.eclipse.jface.action.IStatusLineManager;
 import org.eclipse.jface.dialogs.IDialogSettings;
 import org.eclipse.jface.dialogs.PopupDialog;
+import org.eclipse.jface.layout.GridDataFactory;
 import org.eclipse.jface.preference.PreferenceDialog;
-import org.eclipse.jface.wizard.WizardDialog;
 import org.eclipse.osgi.util.NLS;
 import org.eclipse.swt.SWT;
-import org.eclipse.swt.events.SelectionAdapter;
-import org.eclipse.swt.events.SelectionEvent;
+import org.eclipse.swt.events.*;
+import org.eclipse.swt.graphics.Point;
+import org.eclipse.swt.graphics.Rectangle;
 import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.*;
-import org.eclipse.ui.*;
 import org.eclipse.ui.dialogs.PreferencesUtil;
 import org.eclipse.ui.progress.WorkbenchJob;
 
@@ -44,91 +42,70 @@ import org.eclipse.ui.progress.WorkbenchJob;
 public class AutomaticUpdatesPopup extends PopupDialog {
 	public static final String[] ELAPSED = {ProvSDKMessages.AutomaticUpdateScheduler_5Minutes, ProvSDKMessages.AutomaticUpdateScheduler_15Minutes, ProvSDKMessages.AutomaticUpdateScheduler_30Minutes, ProvSDKMessages.AutomaticUpdateScheduler_60Minutes};
 	private static final long MINUTE = 60 * 1000L;
-	private static final String REMIND_HREF = "RMD"; //$NON-NLS-1$
 	private static final String PREFS_HREF = "PREFS"; //$NON-NLS-1$
-	public static final String AUTO_UPDATE_STATUS_ITEM = "AutomaticUpdatesPopup"; //$NON-NLS-1$
 	private static final String DIALOG_SETTINGS_SECTION = "AutomaticUpdatesPopup"; //$NON-NLS-1$
 
 	Preferences prefs;
 	long remindDelay = -1L;
-	IPropertyChangeListener listener;
+	IPropertyChangeListener prefListener;
 	WorkbenchJob remindJob;
-	IInstallableUnit[] toUpdate;
-	String profileId;
 	boolean downloaded;
-	boolean hidden = false;
-	StatusLineCLabelContribution item;
+	Composite dialogArea;
+	Link remindLink;
+	MouseListener clickListener;
 
-	public AutomaticUpdatesPopup(IInstallableUnit[] toUpdate, String profileId, boolean alreadyDownloaded, Preferences prefs) {
-		super((Shell) null, PopupDialog.INFOPOPUPRESIZE_SHELLSTYLE | SWT.MODELESS, false, true, false, false, ProvSDKMessages.AutomaticUpdatesDialog_UpdatesAvailableTitle, null);
+	public AutomaticUpdatesPopup(Shell parentShell, boolean alreadyDownloaded, Preferences prefs) {
+		super(parentShell, PopupDialog.INFOPOPUPRESIZE_SHELLSTYLE | SWT.MODELESS, false, true, false, false, ProvSDKMessages.AutomaticUpdatesDialog_UpdatesAvailableTitle, null);
 		downloaded = alreadyDownloaded;
-		this.profileId = profileId;
-		this.toUpdate = toUpdate;
 		this.prefs = prefs;
 		remindDelay = computeRemindDelay();
-		listener = new IPropertyChangeListener() {
-
+		prefListener = new IPropertyChangeListener() {
 			public void propertyChange(PropertyChangeEvent event) {
-				if (PreferenceConstants.PREF_REMIND_SCHEDULE.equals(event.getProperty()) || PreferenceConstants.PREF_REMIND_ELAPSED.equals(event.getProperty())) {
-					computeRemindDelay();
-					scheduleRemindJob();
-				}
+				handlePreferenceChange(event);
+			}
+		};
+		prefs.addPropertyChangeListener(prefListener);
+		clickListener = new MouseAdapter() {
+			public void mouseDown(MouseEvent e) {
+				ProvSDKUIActivator.getDefault().getAutomaticUpdater().launchUpdate();
 			}
 		};
-		prefs.addPropertyChangeListener(listener);
-		createStatusLineItem();
-
 	}
 
 	protected Control createDialogArea(Composite parent) {
-		Composite composite = new Composite(parent, SWT.NONE);
-		composite.setLayoutData(new GridData(GridData.FILL_BOTH));
+		dialogArea = new Composite(parent, SWT.NONE);
+		dialogArea.setLayoutData(new GridData(GridData.FILL_BOTH));
 		GridLayout layout = new GridLayout();
 		layout.numColumns = 1;
-		composite.setLayout(layout);
-		Link infoLink = new Link(parent, SWT.MULTI | SWT.WRAP);
+		dialogArea.setLayout(layout);
+		dialogArea.addMouseListener(clickListener);
+
+		// The "click to update" label
+		Label infoLabel = new Label(dialogArea, SWT.NONE);
 		if (downloaded)
-			infoLink.setText(ProvSDKMessages.AutomaticUpdatesDialog_ClickToReviewDownloaded);
+			infoLabel.setText(ProvSDKMessages.AutomaticUpdatesDialog_ClickToReviewDownloaded);
 		else
-			infoLink.setText(ProvSDKMessages.AutomaticUpdatesDialog_ClickToReviewNotDownloaded);
-		infoLink.addSelectionListener(new SelectionAdapter() {
-			public void widgetSelected(SelectionEvent e) {
-				UpdateWizard wizard = new UpdateWizard(profileId, toUpdate, ProvSDKUIActivator.getDefault().getLicenseManager(), ProvSDKUIActivator.getDefault().getQueryProvider());
-				WizardDialog dialog = new WizardDialog(getShell(), wizard);
-				dialog.open();
-			}
-		});
-		infoLink.setLayoutData(new GridData(GridData.FILL_BOTH));
+			infoLabel.setText(ProvSDKMessages.AutomaticUpdatesDialog_ClickToReviewNotDownloaded);
+		infoLabel.setLayoutData(new GridData(GridData.FILL_BOTH));
+		infoLabel.addMouseListener(clickListener);
 
-		// spacer
-		new Label(parent, SWT.NONE);
+		createRemindSection(dialogArea);
 
-		Link remindLink = new Link(parent, SWT.MULTI | SWT.WRAP | SWT.RIGHT);
-		remindLink.setText(NLS.bind(ProvSDKMessages.AutomaticUpdatesPopup_RemindAndPrefLink, new String[] {REMIND_HREF, prefs.getString(PreferenceConstants.PREF_REMIND_ELAPSED), PREFS_HREF}));
+		return dialogArea;
+
+	}
+
+	private void createRemindSection(Composite parent) {
+		remindLink = new Link(parent, SWT.MULTI | SWT.WRAP | SWT.RIGHT);
+		remindLink.setText(NLS.bind(ProvSDKMessages.AutomaticUpdatesPopup_RemindAndPrefLink, new String[] {prefs.getString(PreferenceConstants.PREF_REMIND_ELAPSED), PREFS_HREF}));
 		remindLink.addSelectionListener(new SelectionAdapter() {
 			public void widgetSelected(SelectionEvent e) {
-				if (REMIND_HREF.equals(e.text)) {
-					if (prefs.getBoolean(PreferenceConstants.PREF_REMIND_SCHEDULE)) {
-						// We are already on a remind schedule, so just set up the reminder
-						hide();
-						scheduleRemindJob();
-					} else {
-						// We were not on a schedule.  Setting the pref value
-						// will activate our listener and start the remind job
-						hide();
-						prefs.setValue(PreferenceConstants.PREF_REMIND_SCHEDULE, true);
-					}
-				}
-				if (PREFS_HREF.equals(e.text)) {
-					PreferenceDialog dialog = PreferencesUtil.createPreferenceDialogOn(getShell(), PreferenceConstants.PREF_PAGE_AUTO_UPDATES, null, null);
-					dialog.open();
-				}
+				PreferenceDialog dialog = PreferencesUtil.createPreferenceDialogOn(getShell(), PreferenceConstants.PREF_PAGE_AUTO_UPDATES, null, null);
+				dialog.open();
+
 			}
 		});
-		infoLink.setLayoutData(new GridData(GridData.FILL_BOTH));
-
-		return composite;
-
+		remindLink.setLayoutData(new GridData(GridData.FILL_BOTH));
 	}
 
 	protected IDialogSettings getDialogBoundsSettings() {
@@ -141,19 +118,12 @@ public class AutomaticUpdatesPopup extends PopupDialog {
 	}
 
 	public boolean close() {
-		if (hidden)
-			return false;
-		prefs.removePropertyChangeListener(listener);
-		cancelRemindJob();
-		remindJob = null;
-		listener = null;
-		IStatusLineManager manager = getStatusLineManager();
-		if (manager != null) {
-			manager.remove(item);
+		if (prefs.getBoolean(PreferenceConstants.PREF_REMIND_SCHEDULE)) {
+			scheduleRemindJob();
 		}
-		manager.update(true);
-		item.dispose();
-		item = null;
+		prefs.removePropertyChangeListener(prefListener);
+		remindJob = null;
+		prefListener = null;
 		return super.close();
 	}
 
@@ -162,16 +132,11 @@ public class AutomaticUpdatesPopup extends PopupDialog {
 		if (remindJob != null)
 			remindJob.cancel();
 		// If no updates have been found, there is nothing to remind
-		if (toUpdate == null)
-			return;
 		if (remindDelay < 0)
 			return;
 		remindJob = new WorkbenchJob(ProvSDKMessages.AutomaticUpdatesPopup_ReminderJobTitle) {
 			public IStatus runInUIThread(IProgressMonitor monitor) {
-				Shell shell = getShell();
-				if (shell != null && !shell.isDisposed()) {
-					show();
-				}
+				open();
 				return Status.OK_STATUS;
 			}
 		};
@@ -208,7 +173,7 @@ public class AutomaticUpdatesPopup extends PopupDialog {
 		return -1L;
 	}
 
-	private void cancelRemindJob() {
+	void cancelRemindJob() {
 		if (remindJob != null) {
 			remindJob.cancel();
 		}
@@ -219,62 +184,85 @@ public class AutomaticUpdatesPopup extends PopupDialog {
 		newShell.setText(ProvSDKMessages.AutomaticUpdatesDialog_UpdatesAvailableTitle);
 	}
 
-	private void createStatusLineItem() {
-		item = new StatusLineCLabelContribution(AUTO_UPDATE_STATUS_ITEM, 5);
-		item.addListener(SWT.MouseDown, new Listener() {
-			public void handleEvent(Event event) {
-				show();
-			}
-		});
-		item.setTooltip(ProvSDKMessages.AutomaticUpdatesDialog_UpdatesAvailableTitle);
-		item.setImage(ProvUIImages.getImage(ProvUIImages.IMG_TOOL_UPDATE));
-		IStatusLineManager manager = getStatusLineManager();
-		if (manager != null) {
-			manager.add(item);
+	/**
+	 * (non-Javadoc)
+	 * 
+	 * @see org.eclipse.jface.window.Window#getInitialLocation(org.eclipse.swt.graphics.Point)
+	 */
+	protected Point getInitialLocation(Point initialSize) {
+		Shell parent = getParentShell();
+		Point parentSize;
+		if (parent != null)
+			parentSize = parent.getSize();
+		else {
+			Rectangle bounds = getShell().getDisplay().getBounds();
+			parentSize = new Point(bounds.width, bounds.height);
 		}
-		item.setVisible(false);
-
+		return new Point(parentSize.x - initialSize.x, parentSize.y - initialSize.y);
 	}
 
-	IStatusLineManager getStatusLineManager() {
-		// TODO  YUCK!  Am I missing an easier way to do this??
-		IWorkbenchPartSite site = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActivePart().getSite();
-		if (site instanceof IViewSite) {
-			return ((IViewSite) site).getActionBars().getStatusLineManager();
-		} else if (site instanceof IEditorSite) {
-			return ((IEditorSite) site).getActionBars().getStatusLineManager();
+	void handlePreferenceChange(PropertyChangeEvent event) {
+		if (PreferenceConstants.PREF_REMIND_SCHEDULE.equals(event.getProperty())) {
+			// Reminders turned on
+			if (prefs.getBoolean(PreferenceConstants.PREF_REMIND_SCHEDULE)) {
+				if (remindLink == null)
+					createRemindSection(dialogArea);
+				else
+					remindLink.setVisible(true);
+				computeRemindDelay();
+				scheduleRemindJob();
+			} else { // reminders turned off
+				if (remindLink != null)
+					remindLink.setVisible(false);
+				cancelRemindJob();
+			}
+		} else if (PreferenceConstants.PREF_REMIND_ELAPSED.equals(event.getProperty())) {
+			// Reminding schedule changed
+			computeRemindDelay();
+			scheduleRemindJob();
 		}
-		return null;
 	}
 
-	public void hide() {
-		hidden = true;
-		Shell shell = getShell();
-		if (shell != null && !shell.isDisposed())
-			shell.setVisible(false);
-		if (item != null) {
-			item.setVisible(true);
-			updateStatusLine();
-		}
-	}
+	/*
+	 * Overridden so that clicking in the title menu area closes the dialog.
+	 * Also creates a close box menu in the title area.
+	 */
+	protected Control createTitleMenuArea(Composite parent) {
+		Composite titleComposite = (Composite) super.createTitleMenuArea(parent);
+		titleComposite.addMouseListener(clickListener);
 
-	public void show() {
-		Shell shell = getShell();
-		if (shell != null && !shell.isDisposed()) {
-			shell.setVisible(true);
-			hidden = false;
-			if (item != null) {
-				item.setVisible(false);
-				updateStatusLine();
-			}
+		ToolBar toolBar = new ToolBar(titleComposite, SWT.FLAT);
+		ToolItem closeButton = new ToolItem(toolBar, SWT.PUSH, 0);
 
-		}
+		GridDataFactory.fillDefaults().align(SWT.END, SWT.CENTER).applyTo(toolBar);
+		closeButton.setImage(ProvUIImages.getImage(ProvUIImages.IMG_TOOL_CLOSE));
+		closeButton.setHotImage(ProvUIImages.getImage(ProvUIImages.IMG_TOOL_CLOSE_HOT));
+		closeButton.addSelectionListener(new SelectionAdapter() {
+			public void widgetSelected(SelectionEvent e) {
+				close();
+			}
+		});
+		// See https://bugs.eclipse.org/bugs/show_bug.cgi?id=177183
+		toolBar.addMouseListener(new MouseAdapter() {
+			public void mouseDown(MouseEvent e) {
+				close();
+			}
+		});
+		return titleComposite;
 	}
 
-	void updateStatusLine() {
-		IStatusLineManager manager = getStatusLineManager();
-		if (manager != null)
-			manager.update(true);
+	/*
+	 * Overridden to adjust the span of the title label.
+	 * Reachy, reachy....
+	 * (non-Javadoc)
+	 * @see org.eclipse.jface.dialogs.PopupDialog#createTitleControl(org.eclipse.swt.widgets.Composite)
+	 */
+	protected Control createTitleControl(Composite parent) {
+		Control control = super.createTitleControl(parent);
+		Object data = control.getLayoutData();
+		if (data instanceof GridData) {
+			((GridData) data).horizontalSpan = 1;
+		}
+		return control;
 	}
-
 }
diff --git a/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/p2/updatechecker/UpdateChecker.java b/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/p2/updatechecker/UpdateChecker.java
index 45196b7..00197da 100644
--- a/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/p2/updatechecker/UpdateChecker.java
+++ b/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/p2/updatechecker/UpdateChecker.java
@@ -15,6 +15,7 @@ import java.util.*;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.updatechecker.Activator;
 import org.eclipse.equinox.p2.director.IPlanner;
+import org.eclipse.equinox.p2.director.ProvisioningContext;
 import org.eclipse.equinox.p2.engine.IProfile;
 import org.eclipse.equinox.p2.engine.IProfileRegistry;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
@@ -117,7 +118,7 @@ public class UpdateChecker {
 		Iterator iter = profile.query(InstallableUnitQuery.ANY, new Collector(), null).iterator();
 		while (iter.hasNext()) {
 			IInstallableUnit iu = (IInstallableUnit) iter.next();
-			IInstallableUnit[] replacements = getPlanner().updatesFor(iu, null, null);
+			IInstallableUnit[] replacements = getPlanner().updatesFor(iu, new ProvisioningContext(), null);
 			if (replacements.length > 0)
 				iusWithUpdates.add(iu);
 		}
commit 92d0bf16dc153f82d838f834e10a553afd033aeb
Author: Susan Franklin <sfranklin>
Date:   Thu Jan 31 22:55:28 2008 +0000

    Bug 214937 - [prov] [ui] auto update popup workflow improvements
    
    Includes yucky reflection hack to find the workbench window's status line manager

21	6	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
index 02d1d3e..b3142e5 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
@@ -10,6 +10,8 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.sdk.updates;
 
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
 import org.eclipse.core.runtime.*;
 import org.eclipse.core.runtime.jobs.*;
 import org.eclipse.equinox.internal.p2.ui.sdk.*;
@@ -137,7 +139,23 @@ public class AutomaticUpdater implements IUpdateListener {
 		IWorkbenchWindow activeWindow = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
 		if (activeWindow == null)
 			return null;
-		// YUCK!  
+		// YUCK!  YUCK!  YUCK!
+		// IWorkbenchWindow does not define getStatusLineManager(), yet WorkbenchWindow does
+		try {
+			Method method = activeWindow.getClass().getDeclaredMethod("getStatusLineManager", new Class[0]); //$NON-NLS-1$
+			try {
+				Object statusLine = method.invoke(activeWindow, new Object[0]);
+				if (statusLine instanceof IStatusLineManager)
+					return (IStatusLineManager) statusLine;
+			} catch (InvocationTargetException e) {
+				// oh well
+			} catch (IllegalAccessException e) {
+				// I tried
+			}
+		} catch (NoSuchMethodException e) {
+			// can't blame us for trying.
+		}
+
 		IWorkbenchPartSite site = activeWindow.getActivePage().getActivePart().getSite();
 		if (site instanceof IViewSite) {
 			return ((IViewSite) site).getActionBars().getStatusLineManager();
@@ -165,16 +183,13 @@ public class AutomaticUpdater implements IUpdateListener {
 		IStatusLineManager manager = getStatusLineManager();
 		if (manager != null) {
 			manager.add(updateAffordance);
+			manager.update(true);
 		}
-		updateAffordance.setVisible(false);
-
 	}
 
 	void showUpdatesAvailable(boolean alreadyDownloaded) {
 		if (updateAffordance == null)
 			createUpdateAffordance();
-		updateAffordance.setVisible(true);
-
 		new AutomaticUpdatesPopup(getWorkbenchWindowShell(), alreadyDownloaded, prefs).open();
 	}
 
@@ -182,8 +197,8 @@ public class AutomaticUpdater implements IUpdateListener {
 		IStatusLineManager manager = getStatusLineManager();
 		if (manager != null) {
 			manager.remove(updateAffordance);
+			manager.update(true);
 		}
-		manager.update(true);
 		updateAffordance.dispose();
 		updateAffordance = null;
 

commit 97e143c9ee791821464189eeea99335dbc040dd0
Author: Susan Franklin <sfranklin>
Date:   Fri Mar 27 01:09:16 2009 +0000

    Bug 260625 - [ui] Deselect / Select all in Update  Manager for Available updates

2	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
48	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java
2	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
index 4f9ce30..4081a71 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
@@ -250,6 +250,8 @@ public class ProvUIMessages extends NLS {
 	public static String RevertDialog_Title;
 	public static String RevertProfileWizardPage_ErrorRetrievingHistory;
 	public static String RollbackProfileElement_InvalidSnapshot;
+	public static String SelectableIUsPage_Select_All;
+	public static String SelectableIUsPage_Deselect_All;
 
 	public static String TrustCertificateDialog_Details;
 	public static String TrustCertificateDialog_Title;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java
index e25d651..17dba86 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java
@@ -11,6 +11,7 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.dialogs;
 
+import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.model.ElementUtils;
 import org.eclipse.equinox.internal.p2.ui.model.IUElementListRoot;
 import org.eclipse.equinox.internal.p2.ui.viewers.IUDetailsLabelProvider;
@@ -20,6 +21,7 @@ import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
 import org.eclipse.equinox.internal.provisional.p2.ui.viewers.*;
 import org.eclipse.jface.dialogs.Dialog;
+import org.eclipse.jface.dialogs.IDialogConstants;
 import org.eclipse.jface.viewers.*;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.custom.SashForm;
@@ -105,7 +107,6 @@ public class SelectableIUsPage extends ProvisioningWizardPage implements ISelect
 			public void checkStateChanged(CheckStateChangedEvent event) {
 				setPageComplete(tableViewer.getCheckedElements().length > 0);
 			}
-
 		});
 
 		// Filters and sorters before establishing content, so we don't refresh unnecessarily.
@@ -121,8 +122,12 @@ public class SelectableIUsPage extends ProvisioningWizardPage implements ISelect
 		tableViewer.setLabelProvider(labelProvider);
 		setInitialCheckState();
 
+		// Select and Deselect All buttons
+		createSelectButtons(composite);
+
 		// The text area shows a description of the selected IU, or error detail if applicable.
 		iuDetailsGroup = new IUDetailsGroup(sashForm, tableViewer, convertWidthInCharsToPixels(ILayoutConstants.DEFAULT_TABLE_WIDTH), false);
+
 		detailsArea = iuDetailsGroup.getDetailsArea();
 
 		setControl(sashForm);
@@ -130,6 +135,48 @@ public class SelectableIUsPage extends ProvisioningWizardPage implements ISelect
 		Dialog.applyDialogFont(sashForm);
 	}
 
+	private void createSelectButtons(Composite parent) {
+		Composite buttonParent = new Composite(parent, SWT.NONE);
+		GridLayout gridLayout = new GridLayout();
+		gridLayout.numColumns = 3;
+		gridLayout.marginWidth = 0;
+		gridLayout.horizontalSpacing = convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_SPACING);
+		buttonParent.setLayout(gridLayout);
+		GridData data = new GridData(SWT.FILL, SWT.DEFAULT, true, false);
+		buttonParent.setLayoutData(data);
+
+		Button selectAll = new Button(buttonParent, SWT.PUSH);
+		selectAll.setText(ProvUIMessages.SelectableIUsPage_Select_All);
+		setButtonLayoutData(selectAll);
+		selectAll.addListener(SWT.Selection, new Listener() {
+			public void handleEvent(Event event) {
+				tableViewer.setAllChecked(true);
+				setPageComplete(tableViewer.getCheckedElements().length > 0);
+			}
+		});
+
+		Button deselectAll = new Button(buttonParent, SWT.PUSH);
+		deselectAll.setText(ProvUIMessages.SelectableIUsPage_Deselect_All);
+		setButtonLayoutData(deselectAll);
+		deselectAll.addListener(SWT.Selection, new Listener() {
+			public void handleEvent(Event event) {
+				tableViewer.setAllChecked(false);
+				setPageComplete(tableViewer.getCheckedElements().length > 0);
+			}
+		});
+
+		// dummy to take extra space
+		Label dummy = new Label(buttonParent, SWT.NONE);
+		data = new GridData(SWT.FILL, SWT.FILL, true, true);
+		dummy.setLayoutData(data);
+
+		// separator underneath
+		Label sep = new Label(buttonParent, SWT.HORIZONTAL | SWT.SEPARATOR);
+		data = new GridData(SWT.FILL, SWT.DEFAULT, true, false);
+		data.horizontalSpan = 3;
+		sep.setLayoutData(data);
+	}
+
 	protected CheckboxTableViewer createTableViewer(Composite parent) {
 		// The viewer allows selection of IU's for browsing the details,
 		// and checking to include in the provisioning operation.
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
index e69449b..dc74fff 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
@@ -239,6 +239,8 @@ QueryableMetadataRepositoryManager_MultipleRepositoriesNotFound=Some repositorie
 QueryableMetadataRepositoryManager_RepositoryQueryProgress=Retrieving information from {0}
 QueryableProfileRegistry_QueryProfileProgress=Getting profiles
 QueryableUpdates_UpdateListProgress=Assembling list of updates
+SelectableIUsPage_Select_All=Select &All
+SelectableIUsPage_Deselect_All=&Deselect All
 SizeComputingWizardPage_SizeJobTitle=Computing size
 SizingPhaseSet_PhaseSetName=Compute sizes
 
commit 57a4ad124145c045d8a1c237a20156c88a7d538e
Author: Susan Franklin <sfranklin>
Date:   Mon Apr 6 18:40:44 2009 +0000

    Bug 260625 - [ui] Deselect / Select all in Update  Manager for Available updates

3	1	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
6	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/UpdateAction.java
58	7	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UpdateWizard.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
index fde6f7f..ac8a56b 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
@@ -42,7 +42,8 @@ import org.eclipse.ui.statushandlers.StatusManager;
  * @since 3.4
  */
 public class ProfilesView extends ProvView {
-	private Action addProfileAction, removeProfileAction, uninstallAction, updateAction;
+	private Action addProfileAction, removeProfileAction, uninstallAction;
+	UpdateAction updateAction;
 	private PropertyDialogAction propertiesAction;
 	private StructuredViewerProvisioningListener listener;
 
@@ -139,6 +140,7 @@ public class ProfilesView extends ProvView {
 		uninstallAction = new UninstallAction(ProvAdminUIActivator.getDefault().getPolicy(), viewer, null);
 		propertiesAction = new PropertyDialogAction(this.getSite(), viewer);
 		updateAction = new UpdateAction(ProvAdminUIActivator.getDefault().getPolicy(), viewer, null, true);
+		updateAction.setSkipSelectionPage(true);
 
 		getViewSite().getActionBars().setGlobalActionHandler(ActionFactory.PROPERTIES.getId(), propertiesAction);
 		viewer.addSelectionChangedListener(new ISelectionChangedListener() {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/UpdateAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/UpdateAction.java
index a7c9cf8..9cbd4e2 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/UpdateAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/UpdateAction.java
@@ -34,6 +34,7 @@ public class UpdateAction extends ExistingIUInProfileAction {
 	HashMap latestReplacements;
 	boolean resolveIsVisible = true;
 	QueryableMetadataRepositoryManager manager;
+	boolean skipSelectionPage = false;
 
 	public UpdateAction(Policy policy, ISelectionProvider selectionProvider, String profileId, boolean resolveIsVisible) {
 		super(ProvUI.UPDATE_COMMAND_LABEL, policy, selectionProvider, profileId);
@@ -45,6 +46,10 @@ public class UpdateAction extends ExistingIUInProfileAction {
 		this.manager = manager;
 	}
 
+	public void setSkipSelectionPage(boolean skipSelectionPage) {
+		this.skipSelectionPage = skipSelectionPage;
+	}
+
 	protected int performAction(IInstallableUnit[] ius, String targetProfileId, PlannerResolutionOperation resolution) {
 		// Caches should have been created while formulating the plan
 		Assert.isNotNull(latestReplacements);
@@ -52,6 +57,7 @@ public class UpdateAction extends ExistingIUInProfileAction {
 		Assert.isNotNull(resolution);
 
 		UpdateWizard wizard = new UpdateWizard(getPolicy(), targetProfileId, root, latestReplacements.values().toArray(), resolution, manager);
+		wizard.setSkipSelectionsPage(skipSelectionPage);
 		WizardDialog dialog = new WizardDialog(getShell(), wizard);
 		dialog.create();
 		PlatformUI.getWorkbench().getHelpSystem().setHelp(dialog.getShell(), IProvHelpContextIds.UPDATE_WIZARD);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UpdateWizard.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UpdateWizard.java
index 2e12d8d..cf03925 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UpdateWizard.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UpdateWizard.java
@@ -11,16 +11,20 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.provisional.p2.ui.dialogs;
 
-import java.util.ArrayList;
+import java.util.*;
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.MultiStatus;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.dialogs.*;
 import org.eclipse.equinox.internal.p2.ui.model.AvailableUpdateElement;
 import org.eclipse.equinox.internal.p2.ui.model.IUElementListRoot;
+import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUIImages;
 import org.eclipse.equinox.internal.provisional.p2.ui.QueryableMetadataRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.PlannerResolutionOperation;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
+import org.eclipse.jface.wizard.IWizardPage;
 import org.eclipse.swt.widgets.Composite;
 
 /**
@@ -29,6 +33,28 @@ import org.eclipse.swt.widgets.Composite;
 public class UpdateWizard extends WizardWithLicenses {
 	IInstallableUnit[] iusToReplace;
 	QueryableMetadataRepositoryManager manager;
+	SelectableIUsPage mainPage;
+	boolean skipSelectionsPage = false;
+
+	public static IInstallableUnit[] getIUsToReplace(Object[] replacementElements) {
+		Set iusToReplace = new HashSet();
+		for (int i = 0; i < replacementElements.length; i++) {
+			if (replacementElements[i] instanceof AvailableUpdateElement) {
+				iusToReplace.add(((AvailableUpdateElement) replacementElements[i]).getIUToBeUpdated());
+			}
+		}
+		return (IInstallableUnit[]) iusToReplace.toArray(new IInstallableUnit[iusToReplace.size()]);
+	}
+
+	public static IInstallableUnit[] getReplacementIUs(Object[] replacementElements) {
+		Set replacements = new HashSet();
+		for (int i = 0; i < replacementElements.length; i++) {
+			if (replacementElements[i] instanceof AvailableUpdateElement) {
+				replacements.add(((AvailableUpdateElement) replacementElements[i]).getIU());
+			}
+		}
+		return (IInstallableUnit[]) replacements.toArray(new IInstallableUnit[replacements.size()]);
+	}
 
 	public UpdateWizard(Policy policy, String profileId, IUElementListRoot root, Object[] initialSelections, PlannerResolutionOperation initialResolution, QueryableMetadataRepositoryManager manager) {
 		super(policy, profileId, root, initialSelections, initialResolution);
@@ -38,14 +64,15 @@ public class UpdateWizard extends WizardWithLicenses {
 	}
 
 	protected ISelectableIUsPage createMainPage(IUElementListRoot input, Object[] selections) {
-		SelectableIUsPage page = new SelectableIUsPage(policy, input, selections, profileId);
-		page.setTitle(ProvUIMessages.UpdateAction_UpdatesAvailableTitle);
-		page.setDescription(ProvUIMessages.UpdateAction_UpdatesAvailableMessage);
-		return page;
+		mainPage = new SelectableIUsPage(policy, input, selections, profileId);
+		mainPage.setTitle(ProvUIMessages.UpdateAction_UpdatesAvailableTitle);
+		mainPage.setDescription(ProvUIMessages.UpdateAction_UpdatesAvailableMessage);
+		mainPage.updateStatus(input, resolutionOperation);
+		return mainPage;
 	}
 
-	protected ResolutionWizardPage createResolutionPage(IUElementListRoot root, PlannerResolutionOperation initialResolution) {
-		return new UpdateWizardPage(policy, root, profileId, initialResolution);
+	protected ResolutionResultsWizardPage createResolutionPage() {
+		return new UpdateWizardPage(policy, root, profileId, resolutionOperation);
 	}
 
 	protected IUElementListRoot makeResolutionElementRoot(Object[] selectedElements) {
@@ -72,4 +99,28 @@ public class UpdateWizard extends WizardWithLicenses {
 				}
 			});
 	}
+
+	protected ProfileChangeRequest computeProfileChangeRequest(Object[] selectedElements, MultiStatus additionalStatus, IProgressMonitor monitor) {
+		ProfileChangeRequest request = ProfileChangeRequest.createByProfileId(profileId);
+		request.removeInstallableUnits(getIUsToReplace(selectedElements));
+		request.addInstallableUnits(getReplacementIUs(selectedElements));
+		return request;
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.p2.ui.dialogs.ProvisioningOperationWizard#getErrorReportingPage()
+	 */
+	protected IResolutionErrorReportingPage getErrorReportingPage() {
+		return mainPage;
+	}
+
+	public void setSkipSelectionsPage(boolean skipSelectionsPage) {
+		this.skipSelectionsPage = skipSelectionsPage;
+	}
+
+	public IWizardPage getStartingPage() {
+		if (skipSelectionsPage)
+			return selectNextPage(mainPage, getCurrentStatus());
+		return mainPage;
+	}
 }

commit eb3a817b7fee75ddcd6436e14a5eebb601dd147e
Author: Simon Kaegi <skaegi>
Date:   Wed May 6 18:09:19 2009 +0000

    Bug 272483 [engine] add debug/trace statements for actions to help understand what's occurred

3	1	bundles/org.eclipse.equinox.p2.engine/.options
173	0	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/DebugHelper.java
3	3	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/InstructionParser.java
8	2	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ParameterizedProvisioningAction.java
19	32	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
13	4	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Engine.java
67	6	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/EngineSession.java
1	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/InstallableUnitPropertyOperand.java
1	0	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Messages.java
11	4	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Phase.java
4	0	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/PhaseSet.java
4	0	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/ProvisioningContext.java
1	0	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/messages.properties
12	12	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ParameterizedProvisioningActionTest.java
diff --git a/bundles/org.eclipse.equinox.p2.engine/.options b/bundles/org.eclipse.equinox.p2.engine/.options
index 66d1385..0792967 100644
--- a/bundles/org.eclipse.equinox.p2.engine/.options
+++ b/bundles/org.eclipse.equinox.p2.engine/.options
@@ -1 +1,3 @@
-org.eclipse.equinox.p2.engine/profileregistry/debug = false
\ No newline at end of file
+org.eclipse.equinox.p2.engine/profileregistry/debug = false
+org.eclipse.equinox.p2.engine/engine/debug = false
+org.eclipse.equinox.p2.engine/enginesession/debug = false
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/DebugHelper.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/DebugHelper.java
new file mode 100644
index 0000000..04df2df
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/DebugHelper.java
@@ -0,0 +1,173 @@
+/*******************************************************************************
+ * Copyright (c) 2009 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.engine;
+
+import java.io.File;
+import java.util.*;
+import java.util.Map.Entry;
+import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
+import org.eclipse.equinox.internal.provisional.p2.engine.*;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.osgi.service.debug.DebugOptions;
+
+public class DebugHelper {
+	public static final String LINE_SEPARATOR = System.getProperty("line.separator"); //$NON-NLS-1$
+
+	public static final boolean DEBUG_PROFILE_REGISTRY;
+	public static final boolean DEBUG_ENGINE;
+	public static final boolean DEBUG_ENGINE_SESSION;
+
+	static {
+		DebugOptions options = (DebugOptions) ServiceHelper.getService(EngineActivator.getContext(), DebugOptions.class.getName());
+		if (options != null) {
+			DEBUG_PROFILE_REGISTRY = options.getBooleanOption(EngineActivator.ID + "/profileregistry/debug", false); //$NON-NLS-1$
+			DEBUG_ENGINE = options.getBooleanOption(EngineActivator.ID + "/engine/debug", false); //$NON-NLS-1$
+			DEBUG_ENGINE_SESSION = options.getBooleanOption(EngineActivator.ID + "/enginesession/debug", false); //$NON-NLS-1$
+		} else {
+			DEBUG_PROFILE_REGISTRY = false;
+			DEBUG_ENGINE = false;
+			DEBUG_ENGINE_SESSION = false;
+		}
+	}
+
+	public static void debug(String name, String message) {
+		StringBuffer buffer = new StringBuffer();
+		buffer.append("["); //$NON-NLS-1$
+		buffer.append(EngineActivator.ID + "-" + name); //$NON-NLS-1$
+		buffer.append("] "); //$NON-NLS-1$
+		buffer.append(new Date(System.currentTimeMillis()));
+		buffer.append(" - ["); //$NON-NLS-1$
+		buffer.append(Thread.currentThread().getName());
+		buffer.append("] " + LINE_SEPARATOR); //$NON-NLS-1$
+		buffer.append(message);
+		System.out.println(buffer.toString());
+	}
+
+	public static String formatArray(Object[] array, boolean toString, boolean newLines) {
+		if (array == null || array.length == 0)
+			return "[]"; //$NON-NLS-1$
+
+		StringBuffer buffer = new StringBuffer();
+		buffer.append('[');
+		int i = 0;
+		for (;;) {
+			if (toString)
+				buffer.append(array[i].toString());
+			else
+				buffer.append(array[i].getClass().getName());
+			i++;
+			if (i == array.length)
+				break;
+			buffer.append(',');
+			if (newLines)
+				buffer.append(DebugHelper.LINE_SEPARATOR);
+			else
+				buffer.append(' ');
+		}
+		buffer.append(']');
+		return buffer.toString();
+	}
+
+	public static String formatOperation(PhaseSet phaseSet, Operand[] operands, ProvisioningContext context) {
+		StringBuffer buffer = new StringBuffer();
+		buffer.append("phaseSet=" + formatPhaseSet(phaseSet)); //$NON-NLS-1$
+		buffer.append(","); //$NON-NLS-1$
+		buffer.append(DebugHelper.LINE_SEPARATOR);
+		buffer.append("operands=" + formatOperands(operands)); //$NON-NLS-1$
+		buffer.append(","); //$NON-NLS-1$
+		buffer.append(DebugHelper.LINE_SEPARATOR);
+		buffer.append("context=" + formatContext(context)); //$NON-NLS-1$
+		return buffer.toString();
+	}
+
+	public static String formatOperands(Operand[] operands) {
+		String[] operandStrings = new String[operands.length];
+		for (int i = 0; i < operands.length; i++) {
+			if (operands[i] instanceof InstallableUnitOperand) {
+				InstallableUnitOperand iuOperand = (InstallableUnitOperand) operands[i];
+				operandStrings[i] = formatInstallableUnitOperand(iuOperand);
+			} else {
+				operandStrings[i] = operands[i].toString();
+			}
+		}
+		return DebugHelper.formatArray(operandStrings, true, true);
+	}
+
+	public static String formatInstallableUnitOperand(InstallableUnitOperand iuOperand) {
+		StringBuffer buffer = new StringBuffer();
+		buffer.append(iuOperand.first());
+		if (iuOperand.first() != null && iuOperand.first().getFragments() != null)
+			buffer.append(DebugHelper.formatArray(iuOperand.first().getFragments(), true, false));
+		buffer.append(" --> "); //$NON-NLS-1$
+		buffer.append(iuOperand.second());
+		if (iuOperand.second() != null && iuOperand.second().getFragments() != null)
+			buffer.append(DebugHelper.formatArray(iuOperand.second().getFragments(), true, false));
+		return buffer.toString();
+	}
+
+	public static String formatPhaseSet(PhaseSet phaseSet) {
+		StringBuffer buffer = new StringBuffer(phaseSet.getClass().getName());
+		buffer.append(DebugHelper.formatArray(phaseSet.getPhases(), false, false));
+		return buffer.toString();
+	}
+
+	public static String formatContext(ProvisioningContext context) {
+		StringBuffer buffer = new StringBuffer();
+		buffer.append("{artifactRepos=" + DebugHelper.formatArray(context.getArtifactRepositories(), true, false)); //$NON-NLS-1$
+		buffer.append(", metadataRepos=" + DebugHelper.formatArray(context.getMetadataRepositories(), true, false)); //$NON-NLS-1$
+		buffer.append(", properties=" + context.getProperties() + "}"); //$NON-NLS-1$ //$NON-NLS-2$
+		return buffer.toString();
+	}
+
+	public static String formatAction(ProvisioningAction action, Map parameters) {
+		StringBuffer buffer = new StringBuffer();
+		buffer.append(action.getClass().getName());
+		if (action instanceof ParameterizedProvisioningAction) {
+			ParameterizedProvisioningAction parameterizedAction = (ParameterizedProvisioningAction) action;
+			buffer.append("{action=" + parameterizedAction.getAction().getClass().getName()); //$NON-NLS-1$
+			buffer.append(", actionText=" + parameterizedAction.getActionText() + "}"); //$NON-NLS-1$ //$NON-NLS-2$
+		}
+		buffer.append(DebugHelper.LINE_SEPARATOR);
+		buffer.append("parameters=" + formatParameters(parameters)); //$NON-NLS-1$
+		return buffer.toString();
+	}
+
+	public static String formatParameters(Map parameters) {
+		Iterator it = parameters.entrySet().iterator();
+		if (!it.hasNext())
+			return "{}"; //$NON-NLS-1$
+
+		StringBuffer buffer = new StringBuffer();
+		buffer.append('{');
+		for (;;) {
+			Entry e = (Entry) it.next();
+			String key = (String) e.getKey();
+			buffer.append(key);
+			buffer.append('=');
+			Object value = e.getValue();
+			if (value instanceof String || value instanceof File || value instanceof Operand || value instanceof IArtifactKey || value instanceof IInstallableUnit)
+				buffer.append(value);
+			else if (value instanceof IProfile)
+				buffer.append(((IProfile) value).getProfileId());
+			else
+				buffer.append(value.getClass().getName());
+			if (!it.hasNext()) {
+				buffer.append('}');
+				break;
+			}
+			buffer.append(',');
+			buffer.append(DebugHelper.LINE_SEPARATOR);
+			buffer.append(' ');
+		}
+		return buffer.toString();
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/InstructionParser.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/InstructionParser.java
index 55b0b7d..d6cddef 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/InstructionParser.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/InstructionParser.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2005, 2008 IBM Corporation and others.
+ * Copyright (c) 2005, 2009 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -86,7 +86,7 @@ public class InstructionParser {
 
 		String nameValuePairs = statement.substring(openBracket + 1, closeBracket);
 		if (nameValuePairs.length() == 0)
-			return new ParameterizedProvisioningAction(action, Collections.EMPTY_MAP);
+			return new ParameterizedProvisioningAction(action, Collections.EMPTY_MAP, statement);
 
 		StringTokenizer tokenizer = new StringTokenizer(nameValuePairs, ","); //$NON-NLS-1$
 		Map parameters = new HashMap();
@@ -99,7 +99,7 @@ public class InstructionParser {
 			String value = nameValuePair.substring(colonIndex + 1).trim();
 			parameters.put(name, value);
 		}
-		return new ParameterizedProvisioningAction(action, parameters);
+		return new ParameterizedProvisioningAction(action, parameters, statement);
 	}
 
 	private ProvisioningAction lookupAction(String actionId, Map importMap, ITouchpointType touchpointType) {
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ParameterizedProvisioningAction.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ParameterizedProvisioningAction.java
index 269f69e..3005e22 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ParameterizedProvisioningAction.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ParameterizedProvisioningAction.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2005, 2008 IBM Corporation and others.
+ * Copyright (c) 2005, 2009 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -20,12 +20,14 @@ public class ParameterizedProvisioningAction extends ProvisioningAction {
 
 	private ProvisioningAction action;
 	private Map actionParameters;
+	private String actionText;
 
-	public ParameterizedProvisioningAction(ProvisioningAction action, Map actionParameters) {
+	public ParameterizedProvisioningAction(ProvisioningAction action, Map actionParameters, String actionText) {
 		if (action == null || actionParameters == null)
 			throw new IllegalArgumentException(Messages.ParameterizedProvisioningAction_action_or_parameters_null);
 		this.action = action;
 		this.actionParameters = actionParameters;
+		this.actionText = actionText;
 	}
 
 	public IStatus execute(Map parameters) {
@@ -87,6 +89,10 @@ public class ParameterizedProvisioningAction extends ProvisioningAction {
 		return actionParameters;
 	}
 
+	public String getActionText() {
+		return actionText;
+	}
+
 	public Touchpoint getTouchpoint() {
 		return action.getTouchpoint();
 	}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
index bef6ba8..f886454 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
@@ -27,19 +27,18 @@ import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.metadata.query.InstallableUnitQuery;
 import org.eclipse.equinox.internal.provisional.p2.query.Collector;
 import org.eclipse.osgi.service.datalocation.Location;
-import org.eclipse.osgi.service.debug.DebugOptions;
 import org.eclipse.osgi.util.NLS;
 import org.osgi.framework.BundleContext;
 import org.xml.sax.InputSource;
 import org.xml.sax.SAXException;
 
 public class SimpleProfileRegistry implements IProfileRegistry {
-
-	private static boolean DEBUG = isDebugging();
-	private static final String OPTION_DEBUG = EngineActivator.ID + "/profileregistry/debug"; //$NON-NLS-1$
+	private static final String PROFILE_REGISTRY = "profile registry"; //$NON-NLS-1$
+	
 	private static final String PROFILE_EXT = ".profile"; //$NON-NLS-1$
 	public static final String DEFAULT_STORAGE_DIR = "profileRegistry"; //$NON-NLS-1$
 	private static final String DATA_EXT = ".data"; //$NON-NLS-1$
+
 	/**
 	 * Reference to Map of String(Profile id)->Profile. 
 	 */
@@ -66,13 +65,6 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 		this.updateSelfProfile = updateSelfProfile;
 	}
 
-	private static boolean isDebugging() {
-		DebugOptions service = (DebugOptions) ServiceHelper.getService(EngineActivator.getContext(), DebugOptions.class.getName());
-		if (service == null)
-			return false;
-		return service.getBooleanOption(OPTION_DEBUG, false);
-	}
-
 	private static File getDefaultRegistryDirectory() {
 		File registryDirectory = null;
 		AgentLocation agent = (AgentLocation) ServiceHelper.getService(EngineActivator.getContext(), AgentLocation.class.getName());
@@ -100,7 +92,8 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 		if (selfProfile == null)
 			return;
 
-		debug("SimpleProfileRegistry.updateSelfProfile", false); //$NON-NLS-1$
+		if (DebugHelper.DEBUG_PROFILE_REGISTRY)
+			DebugHelper.debug(PROFILE_REGISTRY, "SimpleProfileRegistry.updateSelfProfile"); //$NON-NLS-1$
 		boolean changed = false;
 		//only update if self is a roaming profile
 		if (Boolean.valueOf(selfProfile.getProperty(IProfile.PROP_ROAMING)).booleanValue())
@@ -114,7 +107,8 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 	}
 
 	private boolean updateRoamingProfile(Profile selfProfile) {
-		debug("SimpleProfileRegistry.updateRoamingProfile", false); //$NON-NLS-1$
+		if (DebugHelper.DEBUG_PROFILE_REGISTRY)
+			DebugHelper.debug(PROFILE_REGISTRY, "SimpleProfileRegistry.updateRoamingProfile"); //$NON-NLS-1$
 		Location installLocation = (Location) ServiceHelper.getService(EngineActivator.getContext(), Location.class.getName(), Location.INSTALL_FILTER);
 		File location = new File(installLocation.getURL().getPath());
 		boolean changed = false;
@@ -127,7 +121,8 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 			selfProfile.setProperty(IProfile.PROP_CACHE, location.getAbsolutePath());
 			changed = true;
 		}
-		debug("SimpleProfileRegistry.updateRoamingProfile(changed=" + changed + ')', false); //$NON-NLS-1$
+		if (DebugHelper.DEBUG_PROFILE_REGISTRY)
+			DebugHelper.debug(PROFILE_REGISTRY, "SimpleProfileRegistry.updateRoamingProfile(changed=" + changed + ')'); //$NON-NLS-1$
 		return changed;
 	}
 
@@ -419,19 +414,6 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 		return latest;
 	}
 
-	private void debug(String message, boolean includeStack) {
-		if (!DEBUG)
-			return;
-		StringBuffer buffer = new StringBuffer();
-		buffer.append("[SimpleProfileRegistry] "); //$NON-NLS-1$
-		buffer.append(new Date(System.currentTimeMillis()));
-		buffer.append(" - ["); //$NON-NLS-1$
-		buffer.append(Thread.currentThread().getName());
-		buffer.append("] "); //$NON-NLS-1$
-		buffer.append(message);
-		LogHelper.log(new Status(IStatus.INFO, EngineActivator.ID, buffer.toString(), includeStack ? new RuntimeException("[SimpleProfileRegistry] This exception is expected.") : null)); //$NON-NLS-1$
-	}
-
 	private void saveProfile(Profile profile) {
 		File profileDirectory = new File(store, escape(profile.getProfileId()) + PROFILE_EXT);
 		profileDirectory.mkdir();
@@ -443,7 +425,8 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 		File profileFile = new File(profileDirectory, Long.toString(currentTimestamp) + PROFILE_EXT);
 
 		// Log a stack trace to see who is writing the profile.
-		debug("Saving profile to: " + profileFile.getAbsolutePath(), false); //$NON-NLS-1$
+		if (DebugHelper.DEBUG_PROFILE_REGISTRY)
+			DebugHelper.debug(PROFILE_REGISTRY, "Saving profile to: " + profileFile.getAbsolutePath()); //$NON-NLS-1$
 
 		profile.setTimestamp(currentTimestamp);
 		profile.setChanged(false);
@@ -669,11 +652,13 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 		boolean isCurrent = false;
 		try {
 			if (profile.isChanged()) {
-				debug("Profile is marked as changed.", false); //$NON-NLS-1$
+				if (DebugHelper.DEBUG_PROFILE_REGISTRY)
+					DebugHelper.debug(PROFILE_REGISTRY, "Profile is marked as changed."); //$NON-NLS-1$
 				throw new IllegalStateException(NLS.bind(Messages.profile_not_current, profile.getProfileId()));
 			}
 			if (!checkTimestamps(profile, internalProfile)) {
-				debug("Unexpected timestamp difference in profile.", false); //$NON-NLS-1$
+				if (DebugHelper.DEBUG_PROFILE_REGISTRY)
+					DebugHelper.debug(PROFILE_REGISTRY, "Unexpected timestamp difference in profile."); //$NON-NLS-1$
 				throw new IllegalStateException(NLS.bind(Messages.profile_not_current, profile.getProfileId()));
 			}
 			isCurrent = true;
@@ -710,14 +695,16 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 	private boolean checkTimestamps(IProfile profile, IProfile internalProfile) {
 		long[] timestamps = listProfileTimestamps(profile.getProfileId());
 		if (timestamps.length == 0) {
-			debug("check timestamp: expected " + profile.getTimestamp() + " but no profiles were found", false); //$NON-NLS-1$ //$NON-NLS-2$
+			if (DebugHelper.DEBUG_PROFILE_REGISTRY)
+				DebugHelper.debug(PROFILE_REGISTRY, "check timestamp: expected " + profile.getTimestamp() + " but no profiles were found"); //$NON-NLS-1$ //$NON-NLS-2$
 			resetProfiles();
 			return false;
 		}
 
 		long currentTimestamp = (timestamps.length == 0) ? -1 : timestamps[timestamps.length - 1];
 		if (profile.getTimestamp() != currentTimestamp) {
-			debug("check timestamp: expected " + profile.getTimestamp() + " but was " + currentTimestamp, false); //$NON-NLS-1$ //$NON-NLS-2$
+			if (DebugHelper.DEBUG_PROFILE_REGISTRY)
+				DebugHelper.debug(PROFILE_REGISTRY, "check timestamp: expected " + profile.getTimestamp() + " but was " + currentTimestamp); //$NON-NLS-1$ //$NON-NLS-2$
 			if (internalProfile.getTimestamp() != currentTimestamp)
 				resetProfiles();
 			return false;
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Engine.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Engine.java
index ef2e3cd..65f2eda 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Engine.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Engine.java
@@ -18,6 +18,7 @@ import org.eclipse.equinox.internal.p2.engine.*;
 import org.eclipse.equinox.internal.provisional.p2.core.eventbus.IProvisioningEventBus;
 
 public class Engine implements IEngine {
+	private static final String ENGINE = "engine"; //$NON-NLS-1$
 
 	private final IProvisioningEventBus eventBus;
 	private ActionManager actionManager;
@@ -43,27 +44,35 @@ public class Engine implements IEngine {
 		profileRegistry.lockProfile(profile);
 		try {
 			eventBus.publishEvent(new BeginOperationEvent(profile, phaseSet, operands, this));
+			if (DebugHelper.DEBUG_ENGINE)
+				DebugHelper.debug(ENGINE, "Beginning engine operation for profile=" + profile.getProfileId() + " [" + profile.getTimestamp() + "]:" + DebugHelper.LINE_SEPARATOR + DebugHelper.formatOperation(phaseSet, operands, context)); //$NON-NLS-1$//$NON-NLS-2$//$NON-NLS-3$
 
 			File profileDataDirectory = profileRegistry.getProfileDataDirectory(profile.getProfileId());
 
 			EngineSession session = new EngineSession(profile, profileDataDirectory, context);
 
 			MultiStatus result = phaseSet.perform(actionManager, session, profile, operands, context, monitor);
-			if (result.isOK() || result.matches(IStatus.INFO | IStatus.WARNING))
+			if (result.isOK() || result.matches(IStatus.INFO | IStatus.WARNING)) {
+				if (DebugHelper.DEBUG_ENGINE)
+					DebugHelper.debug(ENGINE, "Preparing to commit engine operation for profile=" + profile.getProfileId()); //$NON-NLS-1$
 				result.merge(session.prepare(monitor));
-
+			}
 			if (result.matches(IStatus.ERROR | IStatus.CANCEL)) {
-				eventBus.publishEvent(new RollbackOperationEvent(profile, phaseSet, operands, this, result));
+				if (DebugHelper.DEBUG_ENGINE)
+					DebugHelper.debug(ENGINE, "Rolling back engine operation for profile=" + profile.getProfileId() + ". Reason was: " + result.toString()); //$NON-NLS-1$ //$NON-NLS-2$
 				IStatus status = session.rollback(monitor, result.getSeverity());
 				if (status.matches(IStatus.ERROR))
 					LogHelper.log(status);
+				eventBus.publishEvent(new RollbackOperationEvent(profile, phaseSet, operands, this, result));
 			} else {
+				if (DebugHelper.DEBUG_ENGINE)
+					DebugHelper.debug(ENGINE, "Committing engine operation for profile=" + profile.getProfileId()); //$NON-NLS-1$
 				if (profile.isChanged())
 					profileRegistry.updateProfile(profile);
-				eventBus.publishEvent(new CommitOperationEvent(profile, phaseSet, operands, this));
 				IStatus status = session.commit(monitor);
 				if (status.matches(IStatus.ERROR))
 					LogHelper.log(status);
+				eventBus.publishEvent(new CommitOperationEvent(profile, phaseSet, operands, this));
 			}
 			//if there is only one child status, return that status instead because it will have more context
 			IStatus[] children = result.getChildren();
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/EngineSession.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/EngineSession.java
index 196ecc7..9dce9b3 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/EngineSession.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/EngineSession.java
@@ -13,11 +13,11 @@ package org.eclipse.equinox.internal.provisional.p2.engine;
 import java.io.File;
 import java.util.*;
 import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.internal.p2.engine.EngineActivator;
-import org.eclipse.equinox.internal.p2.engine.ParameterizedProvisioningAction;
+import org.eclipse.equinox.internal.p2.engine.*;
 import org.eclipse.osgi.util.NLS;
 
 public class EngineSession {
+	private static final String ENGINE_SESSION = "enginesession"; //$NON-NLS-1$
 
 	private static final String EMPTY_STRING = ""; //$NON-NLS-1$
 
@@ -124,7 +124,7 @@ public class EngineSession {
 				if (!result.isOK())
 					status.add(result);
 			} catch (RuntimeException e) {
-				// "phase.undo" calls user code and might throw an unchecked exception
+				// "phase.prePerform and phase.postPerform" calls user code and might throw an unchecked exception
 				// we catch the error here to gather information on where the problem occurred.
 				status.add(new Status(IStatus.ERROR, EngineActivator.ID, NLS.bind(Messages.phase_undo_error, currentPhase.getClass().getName()), e));
 			} catch (LinkageError e) {
@@ -146,7 +146,7 @@ public class EngineSession {
 				if (!result.isOK())
 					status.add(result);
 			} catch (RuntimeException e) {
-				// "phase.undo" calls user code and might throw an unchecked exception
+				// "phase.prePerform and phase.postPerform" calls user code and might throw an unchecked exception
 				// we catch the error here to gather information on where the problem occurred.
 				status.add(new Status(IStatus.ERROR, EngineActivator.ID, NLS.bind(Messages.phase_undo_error, phase.getClass().getName()), e));
 			} catch (LinkageError e) {
@@ -189,7 +189,16 @@ public class EngineSession {
 		for (ListIterator it = actionRecords.listIterator(actionRecords.size()); it.hasPrevious();) {
 			ActionsRecord record = (ActionsRecord) it.previous();
 			ProvisioningAction[] actions = (ProvisioningAction[]) record.actions.toArray(new ProvisioningAction[record.actions.size()]);
-			phase.undo(result, this, profile, record.operand, actions, context);
+			try {
+				phase.undo(result, this, profile, record.operand, actions, context);
+			} catch (RuntimeException e) {
+				// "phase.undo" calls user code and might throw an unchecked exception
+				// we catch the error here to gather information on where the problem occurred.
+				result.add(new Status(IStatus.ERROR, EngineActivator.ID, NLS.bind(Messages.phase_undo_operand_error, phase.getClass().getName(), record.operand), e));
+			} catch (LinkageError e) {
+				// Catch linkage errors as these are generally recoverable but let other Errors propagate (see bug 222001)
+				result.add(new Status(IStatus.ERROR, EngineActivator.ID, NLS.bind(Messages.phase_undo_operand_error, phase.getClass().getName(), record.operand), e));
+			}
 		}
 		phase.postPerform(result, profile, context, new NullProgressMonitor());
 		return result;
@@ -203,6 +212,9 @@ public class EngineSession {
 			throw new IllegalStateException(Messages.phase_started);
 
 		currentPhase = phase;
+
+		if (DebugHelper.DEBUG_ENGINE_SESSION)
+			debugPhaseEnter(phase);
 	}
 
 	void recordPhaseStart(Phase phase) {
@@ -236,6 +248,8 @@ public class EngineSession {
 			throw new IllegalArgumentException(Messages.not_current_phase);
 
 		currentPhase = null;
+		if (DebugHelper.DEBUG_ENGINE_SESSION)
+			debugPhaseExit(phase);
 	}
 
 	void recordOperandStart(Operand operand) {
@@ -247,6 +261,9 @@ public class EngineSession {
 
 		currentRecord = new ActionsRecord(operand);
 		currentActionRecords.add(currentRecord);
+
+		if (DebugHelper.DEBUG_ENGINE_SESSION)
+			debugOperandStart(operand);
 	}
 
 	void recordOperandEnd(Operand operand) {
@@ -257,9 +274,12 @@ public class EngineSession {
 			throw new IllegalArgumentException(Messages.not_current_operand);
 
 		currentRecord = null;
+
+		if (DebugHelper.DEBUG_ENGINE_SESSION)
+			debugOperandEnd(operand);
 	}
 
-	void recordAction(ProvisioningAction action) {
+	void recordActionExecute(ProvisioningAction action, Map parameters) {
 		if (action == null)
 			throw new IllegalArgumentException(Messages.null_action);
 
@@ -268,6 +288,23 @@ public class EngineSession {
 		Touchpoint touchpoint = action.getTouchpoint();
 		if (touchpoint != null)
 			touchpoints.add(touchpoint);
+
+		if (DebugHelper.DEBUG_ENGINE_SESSION)
+			debugActionExecute(action, parameters);
+	}
+
+	public void recordActionUndo(ProvisioningAction action, Map parameters) {
+		if (DebugHelper.DEBUG_ENGINE_SESSION)
+			debugActionUndo(action, parameters);
+	}
+
+	public String getContextString(Phase phase, Operand operand, ProvisioningAction action) {
+		if (action instanceof ParameterizedProvisioningAction) {
+			ParameterizedProvisioningAction parameterizedAction = (ParameterizedProvisioningAction) action;
+			action = parameterizedAction.getAction();
+		}
+		String message = NLS.bind(Messages.session_context, new Object[] {profile.getProfileId(), phase.getClass().getName(), operand.toString(), getCurrentActionId()});
+		return message;
 	}
 
 	public String getContextString() {
@@ -298,4 +335,28 @@ public class EngineSession {
 			return EMPTY_STRING;
 		return currentRecord.operand.toString();
 	}
+
+	private static void debugPhaseEnter(Phase phase) {
+		DebugHelper.debug(ENGINE_SESSION, "Entering phase: " + phase.getClass().getName()); //$NON-NLS-1$
+	}
+
+	private static void debugPhaseExit(Phase phase) {
+		DebugHelper.debug(ENGINE_SESSION, "Exiting phase: " + phase.getClass().getName()); //$NON-NLS-1$
+	}
+
+	private static void debugOperandStart(Operand operand) {
+		DebugHelper.debug(ENGINE_SESSION, "Starting processing of operand: " + operand.toString()); //$NON-NLS-1$
+	}
+
+	private static void debugOperandEnd(Operand operand) {
+		DebugHelper.debug(ENGINE_SESSION, "Ending processing of operand: " + operand.toString()); //$NON-NLS-1$
+	}
+
+	private static void debugActionExecute(ProvisioningAction action, Map parameters) {
+		DebugHelper.debug(ENGINE_SESSION, "Executing action: " + DebugHelper.formatAction(action, parameters)); //$NON-NLS-1$
+	}
+
+	private static void debugActionUndo(ProvisioningAction action, Map parameters) {
+		DebugHelper.debug(ENGINE_SESSION, "Undoing action: " + DebugHelper.formatAction(action, parameters)); //$NON-NLS-1$
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/InstallableUnitPropertyOperand.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/InstallableUnitPropertyOperand.java
index 613d641..ea224b1 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/InstallableUnitPropertyOperand.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/InstallableUnitPropertyOperand.java
@@ -38,6 +38,6 @@ public class InstallableUnitPropertyOperand extends PropertyOperand {
 	}
 
 	public String toString() {
-		return "IInstallableUnit property for " + iu.toString() + super.toString(); //$NON-NLS-1$
+		return "[IInstallableUnit property for " + iu.toString() + "] " + super.toString(); //$NON-NLS-1$ //$NON-NLS-2$
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Messages.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Messages.java
index 0c012e1..7b60cc4 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Messages.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Messages.java
@@ -37,6 +37,7 @@ public class Messages extends NLS {
 	public static String touchpoint_commit_error;
 	public static String touchpoint_rollback_error;
 	public static String phase_undo_error;
+	public static String phase_undo_operand_error;
 	public static String session_prepare_error;
 	public static String session_commit_error;
 	public static String null_operand;
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Phase.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Phase.java
index a31523d..3615cf7 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Phase.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Phase.java
@@ -114,7 +114,7 @@ public abstract class Phase {
 
 						parameters = (Map) touchpointToTouchpointOperandParameters.get(touchpoint);
 					}
-					session.recordAction(action);
+					session.recordActionExecute(action, parameters);
 					mergeStatus(status, action.execute(parameters));
 					if (status.matches(IStatus.ERROR | IStatus.CANCEL))
 						return;
@@ -184,15 +184,22 @@ public abstract class Phase {
 
 				parameters = (Map) touchpointToTouchpointOperandParameters.get(touchpoint);
 			}
+			IStatus actionStatus = null;
 			try {
-				mergeStatus(status, action.undo(parameters));
+				session.recordActionUndo(action, parameters);
+				actionStatus = action.undo(parameters);
 			} catch (RuntimeException e) {
 				// "action.undo" calls user code and might throw an unchecked exception
 				// we catch the error here to gather information on where the problem occurred.
-				status.add(new Status(IStatus.ERROR, EngineActivator.ID, NLS.bind(Messages.action_undo_error, action.getClass().getName()), e));
+				actionStatus = new Status(IStatus.ERROR, EngineActivator.ID, NLS.bind(Messages.action_undo_error, action.getClass().getName()), e);
 			} catch (LinkageError e) {
 				// Catch linkage errors as these are generally recoverable but let other Errors propagate (see bug 222001)
-				status.add(new Status(IStatus.ERROR, EngineActivator.ID, NLS.bind(Messages.action_undo_error, action.getClass().getName()), e));
+				actionStatus = new Status(IStatus.ERROR, EngineActivator.ID, NLS.bind(Messages.action_undo_error, action.getClass().getName()), e);
+			}
+			if (actionStatus != null && actionStatus.matches(IStatus.ERROR)) {
+				MultiStatus result = new MultiStatus(EngineActivator.ID, IStatus.ERROR, getProblemMessage(), null);
+				result.add(new Status(IStatus.ERROR, EngineActivator.ID, session.getContextString(this, operand, action), null));
+				result.merge(actionStatus);
 			}
 		}
 		mergeStatus(status, touchpointCompleteOperand(profile, operand, operandParameters, new NullProgressMonitor()));
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/PhaseSet.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/PhaseSet.java
index 3be95c5..444d82f 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/PhaseSet.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/PhaseSet.java
@@ -144,4 +144,8 @@ public abstract class PhaseSet {
 		}
 		return count;
 	}
+
+	public Phase[] getPhases() {
+		return phases;
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/ProvisioningContext.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/ProvisioningContext.java
index f5ca61d..f98d152 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/ProvisioningContext.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/ProvisioningContext.java
@@ -54,6 +54,10 @@ public class ProvisioningContext {
 		properties.setProperty(key, value);
 	}
 
+	public Properties getProperties() {
+		return properties;
+	}
+
 	public List getExtraIUs() {
 		return extraIUs;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/messages.properties b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/messages.properties
index 950a514..05d25e4 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/messages.properties
@@ -22,6 +22,7 @@ touchpoint_commit_error=An error occurred while committing the engine operation
 touchpoint_rollback_error=An error occurred while rolling back the engine operation for the {0} touchpoint.
 phase_error=An error occurred during the {0} phase.
 phase_undo_error=An error occurred while undoing the {0} phase.
+phase_undo_operand_error=An error occurred while undoing the {0} phase for operand {1}.
 phase_not_started=There is no phase to end.
 phase_started=A phase is already started.
 phaseid_not_positive=Phase weight must be positive.
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ParameterizedProvisioningActionTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ParameterizedProvisioningActionTest.java
index ad29378..5c5285d 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ParameterizedProvisioningActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ParameterizedProvisioningActionTest.java
@@ -44,7 +44,7 @@ public class ParameterizedProvisioningActionTest extends AbstractProvisioningTes
 		actionParameters.put("test", "testValue");
 
 		Map phaseParameters = new HashMap();
-		ParameterizedProvisioningAction pAction = new ParameterizedProvisioningAction(action, actionParameters);
+		ParameterizedProvisioningAction pAction = new ParameterizedProvisioningAction(action, actionParameters, null);
 		pAction.execute(phaseParameters);
 
 		assertEquals("testValue", value);
@@ -58,7 +58,7 @@ public class ParameterizedProvisioningActionTest extends AbstractProvisioningTes
 
 		Map phaseParameters = new HashMap();
 		phaseParameters.put("variable", "Value");
-		ParameterizedProvisioningAction pAction = new ParameterizedProvisioningAction(action, actionParameters);
+		ParameterizedProvisioningAction pAction = new ParameterizedProvisioningAction(action, actionParameters, null);
 		pAction.execute(phaseParameters);
 		assertEquals("testValue", value);
 	}
@@ -72,7 +72,7 @@ public class ParameterizedProvisioningActionTest extends AbstractProvisioningTes
 		Map phaseParameters = new HashMap();
 		phaseParameters.put("variable", "Value");
 
-		ParameterizedProvisioningAction pAction = new ParameterizedProvisioningAction(action, actionParameters);
+		ParameterizedProvisioningAction pAction = new ParameterizedProvisioningAction(action, actionParameters, null);
 		pAction.execute(phaseParameters);
 		assertEquals("testValue", value);
 	}
@@ -86,7 +86,7 @@ public class ParameterizedProvisioningActionTest extends AbstractProvisioningTes
 		Map phaseParameters = new HashMap();
 		phaseParameters.put("variable", "Value");
 
-		ParameterizedProvisioningAction pAction = new ParameterizedProvisioningAction(action, actionParameters);
+		ParameterizedProvisioningAction pAction = new ParameterizedProvisioningAction(action, actionParameters, null);
 		pAction.execute(phaseParameters);
 		assertEquals("", value);
 	}
@@ -100,7 +100,7 @@ public class ParameterizedProvisioningActionTest extends AbstractProvisioningTes
 		Map phaseParameters = new HashMap();
 		phaseParameters.put("variable", "Value");
 
-		ParameterizedProvisioningAction pAction = new ParameterizedProvisioningAction(action, actionParameters);
+		ParameterizedProvisioningAction pAction = new ParameterizedProvisioningAction(action, actionParameters, null);
 		pAction.execute(phaseParameters);
 		assertEquals("testVlue", value);
 	}
@@ -114,7 +114,7 @@ public class ParameterizedProvisioningActionTest extends AbstractProvisioningTes
 		Map phaseParameters = new HashMap();
 		phaseParameters.put("variable", "Value");
 
-		ParameterizedProvisioningAction pAction = new ParameterizedProvisioningAction(action, actionParameters);
+		ParameterizedProvisioningAction pAction = new ParameterizedProvisioningAction(action, actionParameters, null);
 		pAction.execute(phaseParameters);
 		assertEquals("testVlue", value);
 	}
@@ -128,7 +128,7 @@ public class ParameterizedProvisioningActionTest extends AbstractProvisioningTes
 		Map phaseParameters = new HashMap();
 		phaseParameters.put("variable", "Value");
 
-		ParameterizedProvisioningAction pAction = new ParameterizedProvisioningAction(action, actionParameters);
+		ParameterizedProvisioningAction pAction = new ParameterizedProvisioningAction(action, actionParameters, null);
 		pAction.execute(phaseParameters);
 		assertEquals("", value);
 	}
@@ -142,7 +142,7 @@ public class ParameterizedProvisioningActionTest extends AbstractProvisioningTes
 		Map phaseParameters = new HashMap();
 		phaseParameters.put("variable", "Value");
 
-		ParameterizedProvisioningAction pAction = new ParameterizedProvisioningAction(action, actionParameters);
+		ParameterizedProvisioningAction pAction = new ParameterizedProvisioningAction(action, actionParameters, null);
 		pAction.execute(phaseParameters);
 		assertEquals("$ , : ; { }", value);
 	}
@@ -156,7 +156,7 @@ public class ParameterizedProvisioningActionTest extends AbstractProvisioningTes
 		Map phaseParameters = new HashMap();
 		phaseParameters.put("variable", "Value");
 
-		ParameterizedProvisioningAction pAction = new ParameterizedProvisioningAction(action, actionParameters);
+		ParameterizedProvisioningAction pAction = new ParameterizedProvisioningAction(action, actionParameters, null);
 		pAction.execute(phaseParameters);
 		assertEquals("a\0b", value);
 	}
@@ -170,7 +170,7 @@ public class ParameterizedProvisioningActionTest extends AbstractProvisioningTes
 		Map phaseParameters = new HashMap();
 		phaseParameters.put("variable", "Value");
 
-		ParameterizedProvisioningAction pAction = new ParameterizedProvisioningAction(action, actionParameters);
+		ParameterizedProvisioningAction pAction = new ParameterizedProvisioningAction(action, actionParameters, null);
 		pAction.execute(phaseParameters);
 		assertEquals("a\uFFFFb", value);
 	}
@@ -184,7 +184,7 @@ public class ParameterizedProvisioningActionTest extends AbstractProvisioningTes
 		Map phaseParameters = new HashMap();
 		phaseParameters.put("variable", "Value");
 
-		ParameterizedProvisioningAction pAction = new ParameterizedProvisioningAction(action, actionParameters);
+		ParameterizedProvisioningAction pAction = new ParameterizedProvisioningAction(action, actionParameters, null);
 		pAction.execute(phaseParameters);
 		assertEquals("ab", value);
 	}
@@ -198,7 +198,7 @@ public class ParameterizedProvisioningActionTest extends AbstractProvisioningTes
 		Map phaseParameters = new HashMap();
 		phaseParameters.put("variable", "Value");
 
-		ParameterizedProvisioningAction pAction = new ParameterizedProvisioningAction(action, actionParameters);
+		ParameterizedProvisioningAction pAction = new ParameterizedProvisioningAction(action, actionParameters, null);
 		pAction.execute(phaseParameters);
 		assertEquals("ab", value);
 	}

commit 25156841dfa3f1998a5def4628ac6b1f33882f8d
Author: Susan Franklin <sfranklin>
Date:   Mon Apr 6 18:43:08 2009 +0000

    Bug 261928 - [ui] Ideas for error message/quick fix improvements once we have explanation support

2	2	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/InstallWizardTest.java
2	2	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/UninstallWizardTest.java
2	2	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/UpdateWizardTest.java
8	4	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUsPage.java
27	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/IResolutionErrorReportingPage.java
2	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ISelectableIUsPage.java
0	11	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/InstallWizardPage.java
152	57	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProvisioningOperationWizard.java
233	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionResultsWizardPage.java
156	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionStatusPage.java
0	390	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionWizardPage.java
85	27	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java
5	6	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SizeComputingWizardPage.java
1	11	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UninstallWizardPage.java
0	33	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
7	4	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/WizardWithLicenses.java
11	14	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
53	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstallWizard.java
8	7	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledSoftwarePage.java
19	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/PreselectedIUInstallWizard.java
42	6	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UninstallWizard.java
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/InstallWizardTest.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/InstallWizardTest.java
index cddb8a7..31b4a0d 100644
--- a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/InstallWizardTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/InstallWizardTest.java
@@ -13,7 +13,7 @@ package org.eclipse.equinox.p2.tests.ui.dialogs;
 import java.util.HashSet;
 import org.eclipse.core.runtime.jobs.Job;
 import org.eclipse.equinox.internal.p2.ui.dialogs.AvailableIUsPage;
-import org.eclipse.equinox.internal.p2.ui.dialogs.ResolutionWizardPage;
+import org.eclipse.equinox.internal.p2.ui.dialogs.ResolutionResultsWizardPage;
 import org.eclipse.equinox.internal.p2.ui.model.IIUElement;
 import org.eclipse.equinox.internal.p2.ui.viewers.DeferredQueryContentProvider;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
@@ -84,7 +84,7 @@ public class InstallWizardTest extends AbstractProvisioningUITest {
 			// must be done this way to force notification of listeners
 			group.setChecked(group.getCheckboxTreeViewer().getCheckedElements());
 
-			ResolutionWizardPage page2 = (ResolutionWizardPage) wizard.getNextPage(page1);
+			ResolutionResultsWizardPage page2 = (ResolutionResultsWizardPage) wizard.getNextPage(page1);
 			assertTrue(group.getCheckedLeafIUs().length > 0);
 			dialog.showPage(page2);
 			assertNotNull(page2.getCurrentPlan());
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/UninstallWizardTest.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/UninstallWizardTest.java
index eb414c4..6dc5f55 100644
--- a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/UninstallWizardTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/UninstallWizardTest.java
@@ -11,7 +11,7 @@
 package org.eclipse.equinox.p2.tests.ui.dialogs;
 
 import org.eclipse.core.runtime.jobs.Job;
-import org.eclipse.equinox.internal.p2.ui.dialogs.ResolutionWizardPage;
+import org.eclipse.equinox.internal.p2.ui.dialogs.ResolutionResultsWizardPage;
 import org.eclipse.equinox.internal.p2.ui.dialogs.SelectableIUsPage;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
@@ -44,7 +44,7 @@ public class UninstallWizardTest extends AbstractProvisioningUITest {
 			SelectableIUsPage page1 = (SelectableIUsPage) wizard.getPage(SELECTION_PAGE);
 			assertTrue(page1.isPageComplete());
 			assertTrue(page1.canFlipToNextPage());
-			ResolutionWizardPage page2 = (ResolutionWizardPage) wizard.getNextPage(page1);
+			ResolutionResultsWizardPage page2 = (ResolutionResultsWizardPage) wizard.getNextPage(page1);
 			dialog.showPage(page2);
 			assertTrue(page2.isPageComplete());
 
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/UpdateWizardTest.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/UpdateWizardTest.java
index 4c0b636..72eb024 100644
--- a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/UpdateWizardTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/UpdateWizardTest.java
@@ -11,7 +11,7 @@
 package org.eclipse.equinox.p2.tests.ui.dialogs;
 
 import org.eclipse.core.runtime.jobs.Job;
-import org.eclipse.equinox.internal.p2.ui.dialogs.ResolutionWizardPage;
+import org.eclipse.equinox.internal.p2.ui.dialogs.ResolutionResultsWizardPage;
 import org.eclipse.equinox.internal.p2.ui.dialogs.SelectableIUsPage;
 import org.eclipse.equinox.internal.p2.ui.model.AvailableUpdateElement;
 import org.eclipse.equinox.internal.p2.ui.model.IUElementListRoot;
@@ -47,7 +47,7 @@ public class UpdateWizardTest extends AbstractProvisioningUITest {
 			SelectableIUsPage page1 = (SelectableIUsPage) wizard.getPage(SELECTION_PAGE);
 			assertTrue(page1.isPageComplete());
 			assertTrue(page1.canFlipToNextPage());
-			ResolutionWizardPage page2 = (ResolutionWizardPage) wizard.getNextPage(page1);
+			ResolutionResultsWizardPage page2 = (ResolutionResultsWizardPage) wizard.getNextPage(page1);
 			dialog.showPage(page2);
 			assertTrue(page2.isPageComplete());
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUsPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUsPage.java
index fcd45f1..154a65e 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUsPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUsPage.java
@@ -592,13 +592,17 @@ public class AvailableIUsPage extends ProvisioningWizardPage implements ISelecta
 	}
 
 	/**
-	 * Set the initial selections to be used in this page.  This method has no effect
-	 * once the page has been created.
+	 * Set the selections to be used in this page.  This method only changes the 
+	 * selections of items that are already visible.  It does not expand items
+	 * or change the repository elements in order to make the selections valid.
 	 * 
 	 * @param elements
 	 */
-	public void setInitialSelections(Object[] elements) {
-		initialSelections = elements;
+	public void setCheckedElements(Object[] elements) {
+		if (availableIUGroup == null)
+			initialSelections = elements;
+		else
+			availableIUGroup.setChecked(elements);
 	}
 
 	/*
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/IResolutionErrorReportingPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/IResolutionErrorReportingPage.java
new file mode 100644
index 0000000..69d7c04
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/IResolutionErrorReportingPage.java
@@ -0,0 +1,27 @@
+/*******************************************************************************
+ * Copyright (c) 2009 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ ******************************************************************************/
+
+package org.eclipse.equinox.internal.p2.ui.dialogs;
+
+import org.eclipse.equinox.internal.p2.ui.model.IUElementListRoot;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.PlannerResolutionOperation;
+
+/**
+ * 
+ * IErrorReportingPage is used to report resolution
+ * errors on a wizard page.
+ *
+ * @since 3.5
+ *
+ */
+public interface IResolutionErrorReportingPage extends ISelectableIUsPage {
+	public void updateStatus(IUElementListRoot root, PlannerResolutionOperation resolvedOperation);
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ISelectableIUsPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ISelectableIUsPage.java
index fa8a1da..4207bdf 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ISelectableIUsPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ISelectableIUsPage.java
@@ -25,4 +25,6 @@ public interface ISelectableIUsPage extends IWizardPage {
 	public Object[] getCheckedIUElements();
 
 	public Object[] getSelectedIUElements();
+
+	public void setCheckedElements(Object[] elements);
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/InstallWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/InstallWizardPage.java
index 5ae5189..eb94f83 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/InstallWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/InstallWizardPage.java
@@ -10,14 +10,8 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.dialogs;
 
-import org.eclipse.core.runtime.IProgressMonitor;
-import org.eclipse.core.runtime.MultiStatus;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
-import org.eclipse.equinox.internal.p2.ui.model.ElementUtils;
 import org.eclipse.equinox.internal.p2.ui.model.IUElementListRoot;
-import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest;
-import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.internal.provisional.p2.ui.actions.InstallAction;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.PlannerResolutionOperation;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
 
@@ -32,9 +26,4 @@ public class InstallWizardPage extends SizeComputingWizardPage {
 	protected String getOperationLabel() {
 		return ProvUIMessages.InstallIUOperationLabel;
 	}
-
-	protected ProfileChangeRequest computeProfileChangeRequest(Object[] selectedElements, MultiStatus additionalStatus, IProgressMonitor monitor) {
-		IInstallableUnit[] selected = ElementUtils.elementsToIUs(selectedElements);
-		return InstallAction.computeProfileChangeRequest(selected, getProfileId(), additionalStatus, monitor);
-	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProvisioningOperationWizard.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProvisioningOperationWizard.java
index cc459fc..34410bd 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProvisioningOperationWizard.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProvisioningOperationWizard.java
@@ -10,17 +10,25 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.dialogs;
 
+import java.lang.reflect.InvocationTargetException;
 import java.util.Arrays;
 import java.util.HashSet;
-import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.internal.p2.ui.*;
 import org.eclipse.equinox.internal.p2.ui.model.ElementUtils;
 import org.eclipse.equinox.internal.p2.ui.model.IUElementListRoot;
+import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest;
 import org.eclipse.equinox.internal.provisional.p2.engine.ProvisioningContext;
-import org.eclipse.equinox.internal.provisional.p2.ui.ProvisioningOperationRunner;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.ui.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.PlannerResolutionOperation;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
+import org.eclipse.jface.operation.IRunnableContext;
+import org.eclipse.jface.operation.IRunnableWithProgress;
 import org.eclipse.jface.wizard.IWizardPage;
 import org.eclipse.jface.wizard.Wizard;
+import org.eclipse.ui.statushandlers.StatusManager;
 
 /**
  * Common superclass for a wizard that performs a provisioning
@@ -32,12 +40,15 @@ public abstract class ProvisioningOperationWizard extends Wizard {
 
 	protected Policy policy;
 	protected String profileId;
-	private IUElementListRoot root;
+	protected IUElementListRoot root, originalRoot;
+	protected PlannerResolutionOperation resolutionOperation;
 	private Object[] planSelections;
 	protected ISelectableIUsPage mainPage;
-	protected ResolutionWizardPage resolutionPage;
+	protected IResolutionErrorReportingPage errorPage;
+	protected ResolutionResultsWizardPage resolutionPage;
 	private ProvisioningContext provisioningContext;
-	private PlannerResolutionOperation resolutionOperation;
+	boolean couldNotResolve;
+
 	boolean waitingForOtherJobs = false;
 
 	public ProvisioningOperationWizard(Policy policy, String profileId, IUElementListRoot root, Object[] initialSelections, PlannerResolutionOperation initialResolution) {
@@ -45,6 +56,7 @@ public abstract class ProvisioningOperationWizard extends Wizard {
 		this.policy = policy;
 		this.profileId = profileId;
 		this.root = root;
+		this.originalRoot = root;
 		this.resolutionOperation = initialResolution;
 		if (initialSelections == null)
 			planSelections = new Object[0];
@@ -61,27 +73,13 @@ public abstract class ProvisioningOperationWizard extends Wizard {
 	public void addPages() {
 		mainPage = createMainPage(root, planSelections);
 		addPage(mainPage);
-		if (resolutionOperation != null && planSelections != null) {
-			resolutionPage = createResolutionPage(makeResolutionElementRoot(planSelections), resolutionOperation);
-			addPage(resolutionPage);
-		}
 	}
 
-	/*
-	 * (non-Javadoc)
-	 * @see org.eclipse.jface.wizard.Wizard#getStartingPage()
-	 */
-	public IWizardPage getStartingPage() {
-		// If we already had initial selections and a plan, then there is no reason to get
-		// additional information on the selection page.
-		if (resolutionPage != null)
-			return resolutionPage;
-		return super.getStartingPage();
-	}
+	protected abstract IResolutionErrorReportingPage getErrorReportingPage();
 
 	protected abstract ISelectableIUsPage createMainPage(IUElementListRoot input, Object[] selections);
 
-	protected abstract ResolutionWizardPage createResolutionPage(IUElementListRoot input, PlannerResolutionOperation initialResolution);
+	protected abstract ResolutionResultsWizardPage createResolutionPage();
 
 	public boolean performFinish() {
 		return resolutionPage.performFinish();
@@ -94,7 +92,16 @@ public abstract class ProvisioningOperationWizard extends Wizard {
 	public boolean canFinish() {
 		if (resolutionPage == null)
 			return false;
-		return super.canFinish();
+		if (!super.canFinish())
+			return false;
+		// Special case.  The error reporting page has to be complete in
+		// order to press next and perform a resolution.  But that doesn't
+		// mean the wizard can finish.
+		if (resolutionOperation != null) {
+			int severity = resolutionOperation.getResolutionResult().getSummaryStatus().getSeverity();
+			return severity != IStatus.ERROR && severity != IStatus.CANCEL;
+		}
+		return false;
 	}
 
 	/*
@@ -102,51 +109,63 @@ public abstract class ProvisioningOperationWizard extends Wizard {
 	 * @see org.eclipse.jface.wizard.Wizard#getNextPage(org.eclipse.jface.wizard.IWizardPage)
 	 */
 	public IWizardPage getNextPage(IWizardPage page) {
-		if (page == mainPage) {
-			if (resolutionPage != null) {
-				if (shouldRecomputePlan()) {
-					// any initial plan that was passed in is no longer valid, no need to hang on to it
-					resolutionOperation = null;
-					// record the provisioning context so we'll know if it's different next time
-					provisioningContext = getProvisioningContext();
-					planSelections = mainPage.getCheckedIUElements();
-					root = makeResolutionElementRoot(planSelections);
-					resolutionPage.recomputePlan(root, provisioningContext, getContainer());
-					planChanged();
-				}
-			} else {
-				if (resolutionOperation != null && shouldRecomputePlan())
-					resolutionOperation = null;
+		if (page == mainPage || page == errorPage) {
+			ISelectableIUsPage currentPage = (ISelectableIUsPage) page;
+			// Do we need to resolve?
+			if (resolutionOperation == null || (resolutionOperation != null && shouldRecomputePlan(currentPage))) {
+				resolutionOperation = null;
 				provisioningContext = getProvisioningContext();
-				root = makeResolutionElementRoot(mainPage.getCheckedIUElements());
-				resolutionPage = createResolutionPage(root, resolutionOperation);
-				if (resolutionOperation == null)
-					resolutionPage.recomputePlan(root, provisioningContext, getContainer());
+				planSelections = currentPage.getCheckedIUElements();
+				root = makeResolutionElementRoot(planSelections);
+				recomputePlan(getContainer());
 				planChanged();
+			}
+			return selectNextPage(page, getCurrentStatus());
+		}
+		return super.getNextPage(page);
+	}
+
+	protected IWizardPage selectNextPage(IWizardPage currentPage, IStatus status) {
+		if (status.getSeverity() == IStatus.CANCEL)
+			return currentPage;
+		else if (status.getSeverity() == IStatus.ERROR) {
+			if (errorPage == null)
+				errorPage = getErrorReportingPage();
+			showingErrorPage();
+			return errorPage;
+		} else {
+			if (resolutionPage == null) {
+				resolutionPage = createResolutionPage();
 				addPage(resolutionPage);
 			}
-			IStatus status = resolutionPage.getCurrentStatus();
-			// Normally, resolution errors are reported on the next page.
-			// But if the user canceled the resolution, we don't want to move
-			// to the next page.  In the future we may have other reasons not to
-			// move to the next page (providing selection quick fixes on the first
-			// page, etc.)
-			if (status.getSeverity() != IStatus.CANCEL)
-				return resolutionPage;
+			// need to clear any previous error status reported so that traversing
+			// back to the error page will not show the error
+			if (currentPage instanceof IResolutionErrorReportingPage)
+				updateErrorPageStatus((IResolutionErrorReportingPage) currentPage);
+			return resolutionPage;
 		}
-		return null;
 	}
 
-	private boolean shouldRecomputePlan() {
+	/**
+	 * The error page is being shown for the first time given the
+	 * current plan.  Update any information needed before showing
+	 * the page.
+	 */
+	protected void showingErrorPage() {
+		// default is to do nothing
+	}
+
+	private boolean shouldRecomputePlan(ISelectableIUsPage page) {
 		boolean previouslyWaiting = waitingForOtherJobs;
-		boolean previouslyCanceled = resolutionPage != null && resolutionPage.getCurrentStatus().getSeverity() == IStatus.CANCEL;
+		boolean previouslyCanceled = resolutionPage != null && getCurrentStatus().getSeverity() == IStatus.CANCEL;
 		waitingForOtherJobs = ProvisioningOperationRunner.hasScheduledOperationsFor(profileId);
-		return waitingForOtherJobs || previouslyWaiting || previouslyCanceled || mainPageSelectionsHaveChanged() || provisioningContextChanged();
+		return waitingForOtherJobs || previouslyWaiting || previouslyCanceled || pageSelectionsHaveChanged(page) || provisioningContextChanged();
 	}
 
-	private boolean mainPageSelectionsHaveChanged() {
+	private boolean pageSelectionsHaveChanged(ISelectableIUsPage page) {
 		HashSet selectedIUs = new HashSet();
-		selectedIUs.addAll(Arrays.asList(ElementUtils.elementsToIUs(mainPage.getCheckedIUElements())));
+		Object[] currentSelections = page.getCheckedIUElements();
+		selectedIUs.addAll(Arrays.asList(ElementUtils.elementsToIUs(currentSelections)));
 		HashSet lastIUSelections = new HashSet();
 		lastIUSelections.addAll(Arrays.asList(ElementUtils.elementsToIUs(planSelections)));
 		return !(selectedIUs.equals(lastIUSelections));
@@ -157,13 +176,23 @@ public abstract class ProvisioningOperationWizard extends Wizard {
 		if (currentProvisioningContext == null && provisioningContext == null)
 			return false;
 		if (currentProvisioningContext != null && provisioningContext != null)
-			return provisioningContext.getMetadataRepositories() != getProvisioningContext().getMetadataRepositories();
+			return !Arrays.equals(provisioningContext.getMetadataRepositories(), currentProvisioningContext.getMetadataRepositories());
 		// One is null and the other is not
 		return true;
 	}
 
 	protected void planChanged() {
-		// hook for subclasses.  Default is to do nothing
+		if (resolutionOperation != null) {
+			IStatus status = resolutionOperation.getResolutionResult().getSummaryStatus();
+			if (status.getSeverity() != IStatus.ERROR && status.getSeverity() != IStatus.CANCEL) {
+				if (resolutionPage != null)
+					resolutionPage.updateStatus(root, resolutionOperation);
+				else {
+					resolutionPage = createResolutionPage();
+					addPage(resolutionPage);
+				}
+			}
+		}
 	}
 
 	protected abstract IUElementListRoot makeResolutionElementRoot(Object[] selectedElements);
@@ -171,4 +200,70 @@ public abstract class ProvisioningOperationWizard extends Wizard {
 	protected ProvisioningContext getProvisioningContext() {
 		return null;
 	}
+
+	/**
+	 * Recompute the provisioning plan based on the items in the IUElementListRoot and the given provisioning context.
+	 * Report progress using the specified runnable context.  This method may be called before the page is created.
+	 * 
+	 * @param root
+	 * @param provisioningContext
+	 * @param runnableContext
+	 */
+	public void recomputePlan(IRunnableContext runnableContext) {
+		final Object[] elements = root.getChildren(root);
+		final IInstallableUnit[] ius = ElementUtils.elementsToIUs(elements);
+		couldNotResolve = false;
+		try {
+			if (elements.length == 0) {
+				couldNotResolve(ProvUIMessages.ResolutionWizardPage_NoSelections);
+			} else
+				runnableContext.run(true, true, new IRunnableWithProgress() {
+					public void run(IProgressMonitor monitor) {
+						resolutionOperation = null;
+						MultiStatus status = PlanAnalyzer.getProfileChangeAlteredStatus();
+						ProfileChangeRequest request = computeProfileChangeRequest(elements, status, monitor);
+						if (request != null) {
+							resolutionOperation = new PlannerResolutionOperation(ProvUIMessages.ProfileModificationWizardPage_ResolutionOperationLabel, ius, profileId, request, provisioningContext, status, false);
+							try {
+								resolutionOperation.execute(monitor);
+							} catch (ProvisionException e) {
+								ProvUI.handleException(e, null, StatusManager.SHOW | StatusManager.LOG);
+								couldNotResolve(null);
+							}
+						}
+					}
+				});
+		} catch (InterruptedException e) {
+			// Nothing to report if thread was interrupted
+		} catch (InvocationTargetException e) {
+			ProvUI.handleException(e.getCause(), null, StatusManager.SHOW | StatusManager.LOG);
+			couldNotResolve(null);
+		}
+		if (errorPage == null)
+			errorPage = getErrorReportingPage();
+		updateErrorPageStatus(errorPage);
+	}
+
+	void updateErrorPageStatus(IResolutionErrorReportingPage page) {
+		page.updateStatus(originalRoot, resolutionOperation);
+	}
+
+	void couldNotResolve(String message) {
+		resolutionOperation = null;
+		couldNotResolve = true;
+		if (message != null) {
+			IStatus status = new MultiStatus(ProvUIActivator.PLUGIN_ID, IStatusCodes.UNEXPECTED_NOTHING_TO_DO, message, null);
+			StatusManager.getManager().handle(status, StatusManager.LOG);
+		}
+	}
+
+	public IStatus getCurrentStatus() {
+		if (couldNotResolve || resolutionOperation == null) {
+			return PlanAnalyzer.getStatus(IStatusCodes.UNEXPECTED_NOTHING_TO_DO, null);
+		}
+		return resolutionOperation.getResolutionResult().getSummaryStatus();
+	}
+
+	protected abstract ProfileChangeRequest computeProfileChangeRequest(Object[] checkedElements, MultiStatus additionalStatus, IProgressMonitor monitor);
+
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionResultsWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionResultsWizardPage.java
new file mode 100644
index 0000000..c547112
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionResultsWizardPage.java
@@ -0,0 +1,233 @@
+/*******************************************************************************
+ * Copyright (c) 2007, 2009 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *     EclipseSource - ongoing development
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.ui.dialogs;
+
+import org.eclipse.core.runtime.Assert;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
+import org.eclipse.equinox.internal.p2.ui.model.*;
+import org.eclipse.equinox.internal.p2.ui.viewers.IUDetailsLabelProvider;
+import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
+import org.eclipse.equinox.internal.provisional.p2.engine.ProvisioningContext;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.query.IQueryable;
+import org.eclipse.equinox.internal.provisional.p2.ui.ProvisioningOperationRunner;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.PlannerResolutionOperation;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProfileModificationOperation;
+import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
+import org.eclipse.equinox.internal.provisional.p2.ui.viewers.*;
+import org.eclipse.jface.dialogs.Dialog;
+import org.eclipse.jface.viewers.*;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.custom.SashForm;
+import org.eclipse.swt.layout.*;
+import org.eclipse.swt.widgets.*;
+import org.eclipse.ui.statushandlers.StatusManager;
+
+/**
+ * A wizard page that shows detailed information about a resolved install
+ * operation.  It allows drill down into the elements that will be installed.
+ * 
+ * @since 3.4
+ *
+ */
+public abstract class ResolutionResultsWizardPage extends ResolutionStatusPage {
+	protected IUElementListRoot input;
+	PlannerResolutionOperation resolvedOperation;
+	protected Policy policy;
+	TreeViewer treeViewer;
+	Text detailsArea;
+	ProvElementContentProvider contentProvider;
+	IUDetailsLabelProvider labelProvider;
+	protected Display display;
+	private IUDetailsGroup iuDetailsGroup;
+
+	protected ResolutionResultsWizardPage(Policy policy, IUElementListRoot input, String profileID, PlannerResolutionOperation resolvedOperation) {
+		super("ResolutionPage", profileID); //$NON-NLS-1$
+		this.policy = policy;
+		Assert.isNotNull(resolvedOperation);
+		this.resolvedOperation = resolvedOperation;
+		if (input == null)
+			this.input = new IUElementListRoot();
+		else
+			this.input = input;
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.jface.dialogs.IDialogPage#createControl(org.eclipse.swt.widgets.Composite)
+	 */
+	public void createControl(Composite parent) {
+		display = parent.getDisplay();
+		SashForm sashForm = new SashForm(parent, SWT.VERTICAL);
+		FillLayout layout = new FillLayout();
+		sashForm.setLayout(layout);
+		GridData data = new GridData(GridData.FILL_BOTH);
+		sashForm.setLayoutData(data);
+		initializeDialogUnits(sashForm);
+
+		Composite composite = new Composite(sashForm, SWT.NONE);
+		GridLayout gridLayout = new GridLayout();
+		gridLayout.marginWidth = 0;
+		gridLayout.marginHeight = 0;
+		composite.setLayout(gridLayout);
+
+		treeViewer = createTreeViewer(composite);
+		data = new GridData(GridData.FILL_BOTH);
+		data.heightHint = convertHeightInCharsToPixels(ILayoutConstants.DEFAULT_TABLE_HEIGHT);
+		data.widthHint = convertWidthInCharsToPixels(ILayoutConstants.DEFAULT_TABLE_WIDTH);
+		Tree tree = treeViewer.getTree();
+		tree.setLayoutData(data);
+		tree.setHeaderVisible(true);
+		activateCopy(tree);
+		IUColumnConfig[] columns = getColumnConfig();
+		for (int i = 0; i < columns.length; i++) {
+			TreeColumn tc = new TreeColumn(tree, SWT.LEFT, i);
+			tc.setResizable(true);
+			tc.setText(columns[i].columnTitle);
+			tc.setWidth(convertWidthInCharsToPixels(columns[i].defaultColumnWidth));
+		}
+
+		treeViewer.addSelectionChangedListener(new ISelectionChangedListener() {
+			public void selectionChanged(SelectionChangedEvent event) {
+				setDetailText(resolvedOperation);
+			}
+		});
+
+		// Filters and sorters before establishing content, so we don't refresh unnecessarily.
+		IUComparator comparator = new IUComparator(IUComparator.IU_NAME);
+		comparator.useColumnConfig(getColumnConfig());
+		treeViewer.setComparator(comparator);
+		treeViewer.setComparer(new ProvElementComparer());
+
+		contentProvider = new ProvElementContentProvider();
+		treeViewer.setContentProvider(contentProvider);
+		labelProvider = new IUDetailsLabelProvider(null, getColumnConfig(), getShell());
+		treeViewer.setLabelProvider(labelProvider);
+
+		setDrilldownElements(input, resolvedOperation.getProvisioningPlan());
+		treeViewer.setInput(input);
+
+		// Optional area to show the size
+		createSizingInfo(composite);
+
+		// The text area shows a description of the selected IU, or error detail if applicable.
+		iuDetailsGroup = new IUDetailsGroup(sashForm, treeViewer, convertWidthInCharsToPixels(ILayoutConstants.DEFAULT_TABLE_WIDTH), true);
+		detailsArea = iuDetailsGroup.getDetailsArea();
+
+		updateStatus(input, resolvedOperation);
+		setControl(sashForm);
+		sashForm.setWeights(new int[] {80, 20});
+		Dialog.applyDialogFont(sashForm);
+	}
+
+	protected void createSizingInfo(Composite parent) {
+		// Default is to do nothing
+	}
+
+	public boolean performFinish() {
+		if (resolvedOperation.getResolutionResult().getSummaryStatus().getSeverity() != IStatus.ERROR) {
+			ProfileModificationOperation op = createProfileModificationOperation(resolvedOperation.getProvisioningPlan());
+			ProvisioningOperationRunner.schedule(op, StatusManager.SHOW | StatusManager.LOG);
+			return true;
+		}
+		return false;
+	}
+
+	protected TreeViewer getTreeViewer() {
+		return treeViewer;
+	}
+
+	public ProvisioningPlan getCurrentPlan() {
+		return resolvedOperation.getProvisioningPlan();
+	}
+
+	protected Object[] getSelectedElements() {
+		return ((IStructuredSelection) treeViewer.getSelection()).toArray();
+	}
+
+	protected IInstallableUnit getSelectedIU() {
+		IInstallableUnit[] units = ElementUtils.elementsToIUs(getSelectedElements());
+		if (units.length == 0)
+			return null;
+		return units[0];
+	}
+
+	protected String getProfileId() {
+		return profileId;
+	}
+
+	protected IInstallableUnit[] getIUs() {
+		return ElementUtils.elementsToIUs(input.getChildren(input));
+	}
+
+	protected IUColumnConfig[] getColumnConfig() {
+		// TODO we could consider making this settable via API, but for now we rely on
+		// a standard column config.  We intentionally use the IU's id as one of the columns, because
+		// resolution errors are reported by ID.
+		return new IUColumnConfig[] {new IUColumnConfig(ProvUIMessages.ProvUI_NameColumnTitle, IUColumnConfig.COLUMN_NAME, ILayoutConstants.DEFAULT_COLUMN_WIDTH), new IUColumnConfig(ProvUIMessages.ProvUI_VersionColumnTitle, IUColumnConfig.COLUMN_VERSION, ILayoutConstants.DEFAULT_SMALL_COLUMN_WIDTH), new IUColumnConfig(ProvUIMessages.ProvUI_IdColumnTitle, IUColumnConfig.COLUMN_ID, ILayoutConstants.DEFAULT_COLUMN_WIDTH)};
+
+	}
+
+	void setDrilldownElements(IUElementListRoot root, ProvisioningPlan plan) {
+		if (plan == null)
+			return;
+		Object[] elements = root.getChildren(root);
+		for (int i = 0; i < elements.length; i++) {
+			if (elements[i] instanceof QueriedElement) {
+				((QueriedElement) elements[i]).setQueryable(getQueryable(plan));
+			}
+		}
+	}
+
+	private ProfileModificationOperation createProfileModificationOperation(ProvisioningPlan plan) {
+		return new ProfileModificationOperation(getOperationLabel(), profileId, plan);
+	}
+
+	// We currently create an empty provisioning context, but
+	// in the future we could consider letting clients supply this.
+	protected ProvisioningContext getProvisioningContext() {
+		return new ProvisioningContext();
+	}
+
+	protected abstract String getOperationLabel();
+
+	protected TreeViewer createTreeViewer(Composite parent) {
+		return new TreeViewer(parent, SWT.BORDER | SWT.MULTI | SWT.FULL_SELECTION);
+	}
+
+	protected abstract IQueryable getQueryable(ProvisioningPlan plan);
+
+	protected String getClipboardText(Control control) {
+		return CopyUtils.getIndentedClipboardText(getSelectedElements(), labelProvider);
+	}
+
+	protected IUDetailsGroup getDetailsGroup() {
+		return iuDetailsGroup;
+	}
+
+	protected boolean isCreated() {
+		return treeViewer != null;
+	}
+
+	protected void updateCaches(IUElementListRoot newRoot, PlannerResolutionOperation op) {
+		resolvedOperation = op;
+		setDrilldownElements(newRoot, resolvedOperation.getProvisioningPlan());
+		if (treeViewer != null) {
+			if (input != newRoot)
+				treeViewer.setInput(newRoot);
+			else
+				treeViewer.refresh();
+		}
+		input = newRoot;
+	}
+}
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionStatusPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionStatusPage.java
new file mode 100644
index 0000000..d3005da
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionStatusPage.java
@@ -0,0 +1,156 @@
+/*******************************************************************************
+ * Copyright (c) 2009 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *     EclipseSource - ongoing development
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.ui.dialogs;
+
+import org.eclipse.core.runtime.Assert;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
+import org.eclipse.equinox.internal.p2.ui.model.IUElementListRoot;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.ui.IUPropertyUtils;
+import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.PlannerResolutionOperation;
+import org.eclipse.jface.dialogs.IMessageProvider;
+import org.eclipse.ui.statushandlers.StatusManager;
+
+/**
+ * A wizard page that presents a check box list of IUs and allows the user
+ * to select and deselect them.  Typically the first page in a provisioning
+ * operation wizard, and usually it is the page used to report resolution errors
+ * before advancing to resolution detail.
+ * 
+ * @since 3.5
+ *
+ */
+public abstract class ResolutionStatusPage extends ProvisioningWizardPage {
+
+	protected String profileId;
+
+	/**
+	 * @param pageName
+	 */
+	protected ResolutionStatusPage(String pageName, String profileId) {
+		super(pageName);
+		this.profileId = profileId;
+	}
+
+	protected abstract void updateCaches(IUElementListRoot root, PlannerResolutionOperation resolvedOperation);
+
+	protected abstract boolean isCreated();
+
+	protected abstract IUDetailsGroup getDetailsGroup();
+
+	protected abstract IInstallableUnit getSelectedIU();
+
+	/**
+	 * Update the status area of the wizard to report the results of the operation.
+	 * 
+	 * @param newRoot the root that describes the root IUs involved in creating the plan
+	 * @param op the PlannerResolutionOperation that describes the plan that was created.  
+	 * Should not be <code>null</code>, but subclasses can be more forgiving.
+	 */
+	public void updateStatus(IUElementListRoot newRoot, PlannerResolutionOperation op) {
+		Assert.isNotNull(op);
+		updateCaches(newRoot, op);
+
+		IStatus currentStatus;
+		int messageType = IMessageProvider.NONE;
+		boolean pageComplete = true;
+		currentStatus = op.getResolutionResult().getSummaryStatus();
+		if (currentStatus != null && !currentStatus.isOK()) {
+			messageType = IMessageProvider.INFORMATION;
+			int severity = currentStatus.getSeverity();
+			if (severity == IStatus.ERROR) {
+				messageType = IMessageProvider.ERROR;
+				pageComplete = false;
+				// Log errors for later support
+				ProvUI.reportStatus(currentStatus, StatusManager.LOG);
+			} else if (severity == IStatus.WARNING) {
+				messageType = IMessageProvider.WARNING;
+				// Log warnings for later support
+				ProvUI.reportStatus(currentStatus, StatusManager.LOG);
+			}
+		}
+		setPageComplete(pageComplete);
+		if (!isCreated())
+			return;
+
+		setMessage(getMessageText(currentStatus), messageType);
+		setDetailText(op);
+	}
+
+	protected String getIUDescription(IInstallableUnit iu) {
+		// Get the iu description in the default locale
+		String description = IUPropertyUtils.getIUProperty(iu, IInstallableUnit.PROP_DESCRIPTION);
+		if (description == null)
+			description = ""; //$NON-NLS-1$
+		return description;
+	}
+
+	String getMessageText(IStatus currentStatus) {
+		if (currentStatus == null || currentStatus.isOK())
+			return getDescription();
+		if (currentStatus.getSeverity() == IStatus.CANCEL)
+			return ProvUIMessages.ResolutionWizardPage_Canceled;
+		if (currentStatus.getSeverity() == IStatus.ERROR)
+			return ProvUIMessages.ResolutionWizardPage_ErrorStatus;
+		return ProvUIMessages.ResolutionWizardPage_WarningInfoStatus;
+	}
+
+	void setDetailText(PlannerResolutionOperation resolvedOperation) {
+		String detail = null;
+		IInstallableUnit selectedIU = getSelectedIU();
+		IUDetailsGroup detailsGroup = getDetailsGroup();
+		// We either haven't resolved, or we failed to resolve and reported some error
+		// while doing so.  Since the specific error was already reported, the description
+		// text can be used for the selected IU.
+		if (resolvedOperation == null) {
+			if (selectedIU != null) {
+				detail = getIUDescription(selectedIU);
+				detailsGroup.enablePropertyLink(true);
+			} else {
+				detail = ""; //$NON-NLS-1$
+				detailsGroup.enablePropertyLink(false);
+			}
+			detailsGroup.getDetailsArea().setText(detail);
+			return;
+		}
+
+		// An IU is selected and we have resolved.  Look for information about the specific IU.
+		if (selectedIU != null) {
+			detail = resolvedOperation.getResolutionResult().getDetailedReport(new IInstallableUnit[] {selectedIU});
+			if (detail != null) {
+				detailsGroup.enablePropertyLink(false);
+				detailsGroup.getDetailsArea().setText(detail);
+				return;
+			}
+			// No specific error about this IU.  Show the overall error if it is in error.
+			if (resolvedOperation.getResolutionResult().getSummaryStatus().getSeverity() == IStatus.ERROR) {
+				detail = resolvedOperation.getResolutionResult().getSummaryReport();
+				detailsGroup.enablePropertyLink(false);
+				detailsGroup.getDetailsArea().setText(detail);
+			}
+
+			// The overall status is not an error, so we may as well just show info about this iu rather than everything.
+			detailsGroup.enablePropertyLink(true);
+			detailsGroup.getDetailsArea().setText(getIUDescription(selectedIU));
+			return;
+		}
+
+		//No IU is selected, give the overall report
+		detail = resolvedOperation.getResolutionResult().getSummaryReport();
+		detailsGroup.enablePropertyLink(false);
+		if (detail == null)
+			detail = ""; //$NON-NLS-1$
+		detailsGroup.getDetailsArea().setText(detail);
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionWizardPage.java
deleted file mode 100644
index df5f04f..0000000
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionWizardPage.java
+++ /dev/null
@@ -1,390 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007, 2009 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *     EclipseSource - ongoing development
- *******************************************************************************/
-package org.eclipse.equinox.internal.p2.ui.dialogs;
-
-import java.lang.reflect.InvocationTargetException;
-import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.internal.p2.ui.*;
-import org.eclipse.equinox.internal.p2.ui.model.*;
-import org.eclipse.equinox.internal.p2.ui.viewers.IUDetailsLabelProvider;
-import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
-import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest;
-import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
-import org.eclipse.equinox.internal.provisional.p2.engine.ProvisioningContext;
-import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.internal.provisional.p2.query.IQueryable;
-import org.eclipse.equinox.internal.provisional.p2.ui.*;
-import org.eclipse.equinox.internal.provisional.p2.ui.operations.PlannerResolutionOperation;
-import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProfileModificationOperation;
-import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
-import org.eclipse.equinox.internal.provisional.p2.ui.viewers.*;
-import org.eclipse.jface.dialogs.Dialog;
-import org.eclipse.jface.dialogs.IMessageProvider;
-import org.eclipse.jface.operation.IRunnableContext;
-import org.eclipse.jface.operation.IRunnableWithProgress;
-import org.eclipse.jface.viewers.*;
-import org.eclipse.swt.SWT;
-import org.eclipse.swt.custom.SashForm;
-import org.eclipse.swt.layout.*;
-import org.eclipse.swt.widgets.*;
-import org.eclipse.ui.statushandlers.StatusManager;
-
-public abstract class ResolutionWizardPage extends ProvisioningWizardPage {
-	protected IUElementListRoot input;
-	PlannerResolutionOperation resolvedOperation;
-	ResolutionResult resolutionResult;
-	boolean couldNotResolve;
-	private String profileId;
-	protected Policy policy;
-	TreeViewer treeViewer;
-	Text detailsArea;
-	ProvElementContentProvider contentProvider;
-	IUDetailsLabelProvider labelProvider;
-	protected Display display;
-	private IUDetailsGroup iuDetailsGroup;
-
-	protected ResolutionWizardPage(Policy policy, IUElementListRoot input, String profileID, PlannerResolutionOperation initialResolution) {
-		super("ResolutionPage"); //$NON-NLS-1$
-		this.policy = policy;
-		this.resolvedOperation = initialResolution;
-		if (input == null)
-			this.input = new IUElementListRoot();
-		else
-			this.input = input;
-		this.profileId = profileID;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.eclipse.jface.dialogs.IDialogPage#createControl(org.eclipse.swt.widgets.Composite)
-	 */
-	public void createControl(Composite parent) {
-		display = parent.getDisplay();
-		SashForm sashForm = new SashForm(parent, SWT.VERTICAL);
-		FillLayout layout = new FillLayout();
-		sashForm.setLayout(layout);
-		GridData data = new GridData(GridData.FILL_BOTH);
-		sashForm.setLayoutData(data);
-		initializeDialogUnits(sashForm);
-
-		Composite composite = new Composite(sashForm, SWT.NONE);
-		GridLayout gridLayout = new GridLayout();
-		gridLayout.marginWidth = 0;
-		gridLayout.marginHeight = 0;
-		composite.setLayout(gridLayout);
-
-		treeViewer = createTreeViewer(composite);
-		data = new GridData(GridData.FILL_BOTH);
-		data.heightHint = convertHeightInCharsToPixels(ILayoutConstants.DEFAULT_TABLE_HEIGHT);
-		data.widthHint = convertWidthInCharsToPixels(ILayoutConstants.DEFAULT_TABLE_WIDTH);
-		Tree tree = treeViewer.getTree();
-		tree.setLayoutData(data);
-		tree.setHeaderVisible(true);
-		activateCopy(tree);
-		IUColumnConfig[] columns = getColumnConfig();
-		for (int i = 0; i < columns.length; i++) {
-			TreeColumn tc = new TreeColumn(tree, SWT.LEFT, i);
-			tc.setResizable(true);
-			tc.setText(columns[i].columnTitle);
-			tc.setWidth(convertWidthInCharsToPixels(columns[i].defaultColumnWidth));
-		}
-
-		treeViewer.addSelectionChangedListener(new ISelectionChangedListener() {
-			public void selectionChanged(SelectionChangedEvent event) {
-				updateStatus();
-			}
-		});
-
-		// Filters and sorters before establishing content, so we don't refresh unnecessarily.
-		IUComparator comparator = new IUComparator(IUComparator.IU_NAME);
-		comparator.useColumnConfig(getColumnConfig());
-		treeViewer.setComparator(comparator);
-		treeViewer.setComparer(new ProvElementComparer());
-
-		contentProvider = new ProvElementContentProvider();
-		treeViewer.setContentProvider(contentProvider);
-		labelProvider = new IUDetailsLabelProvider(null, getColumnConfig(), getShell());
-		treeViewer.setLabelProvider(labelProvider);
-
-		if (resolvedOperation != null) {
-			setDrilldownElements(input, resolvedOperation.getProvisioningPlan());
-			treeViewer.setInput(input);
-			resolutionResult = resolvedOperation.getResolutionResult();
-		} else {
-			// Just record the fact that we haven't resolved yet
-			couldNotResolve(null);
-		}
-
-		// Optional area to show the size
-		createSizingInfo(composite);
-
-		// The text area shows a description of the selected IU, or error detail if applicable.
-		iuDetailsGroup = new IUDetailsGroup(sashForm, treeViewer, convertWidthInCharsToPixels(ILayoutConstants.DEFAULT_TABLE_WIDTH), true);
-		detailsArea = iuDetailsGroup.getDetailsArea();
-
-		updateStatus();
-		setControl(sashForm);
-		sashForm.setWeights(new int[] {80, 20});
-		Dialog.applyDialogFont(sashForm);
-	}
-
-	protected void createSizingInfo(Composite parent) {
-		// Default is to do nothing
-	}
-
-	public boolean performFinish() {
-		if (resolutionResult != null && resolutionResult.getSummaryStatus().getSeverity() != IStatus.ERROR) {
-			ProfileModificationOperation op = createProfileModificationOperation(resolvedOperation.getProvisioningPlan());
-			ProvisioningOperationRunner.schedule(op, StatusManager.SHOW | StatusManager.LOG);
-			return true;
-		}
-		return false;
-	}
-
-	protected TreeViewer getTreeViewer() {
-		return treeViewer;
-	}
-
-	public ProvisioningPlan getCurrentPlan() {
-		if (resolvedOperation == null)
-			return null;
-		return resolvedOperation.getProvisioningPlan();
-	}
-
-	protected Object[] getSelectedElements() {
-		return ((IStructuredSelection) treeViewer.getSelection()).toArray();
-	}
-
-	protected IInstallableUnit getSelectedIU() {
-		IInstallableUnit[] units = ElementUtils.elementsToIUs(getSelectedElements());
-		if (units.length == 0)
-			return null;
-		return units[0];
-	}
-
-	protected String getProfileId() {
-		return profileId;
-	}
-
-	protected IInstallableUnit[] getIUs() {
-		return ElementUtils.elementsToIUs(input.getChildren(input));
-	}
-
-	protected IUColumnConfig[] getColumnConfig() {
-		// TODO we could consider making this settable via API, but for now we rely on
-		// a standard column config.  We intentionally use the IU's id as one of the columns, because
-		// resolution errors are reported by ID.
-		return new IUColumnConfig[] {new IUColumnConfig(ProvUIMessages.ProvUI_NameColumnTitle, IUColumnConfig.COLUMN_NAME, ILayoutConstants.DEFAULT_COLUMN_WIDTH), new IUColumnConfig(ProvUIMessages.ProvUI_VersionColumnTitle, IUColumnConfig.COLUMN_VERSION, ILayoutConstants.DEFAULT_SMALL_COLUMN_WIDTH), new IUColumnConfig(ProvUIMessages.ProvUI_IdColumnTitle, IUColumnConfig.COLUMN_ID, ILayoutConstants.DEFAULT_COLUMN_WIDTH)};
-
-	}
-
-	/**
-	 * Recompute the provisioning plan based on the items in the IUElementListRoot and the given provisioning context.
-	 * Report progress using the specified runnable context.  This method may be called before the page is created.
-	 * 
-	 * @param root
-	 * @param provisioningContext
-	 * @param runnableContext
-	 */
-	public void recomputePlan(final IUElementListRoot root, final ProvisioningContext provisioningContext, IRunnableContext runnableContext) {
-		this.input = root;
-		final Object[] elements = root.getChildren(root);
-		final IInstallableUnit[] ius = ElementUtils.elementsToIUs(elements);
-		couldNotResolve = false;
-		try {
-			if (elements.length == 0) {
-				couldNotResolve(ProvUIMessages.ResolutionWizardPage_NoSelections);
-			} else
-				runnableContext.run(true, true, new IRunnableWithProgress() {
-					public void run(IProgressMonitor monitor) {
-						resolvedOperation = null;
-						resolutionResult = null;
-						MultiStatus status = PlanAnalyzer.getProfileChangeAlteredStatus();
-						ProfileChangeRequest request = computeProfileChangeRequest(elements, status, monitor);
-						if (request != null) {
-							resolvedOperation = new PlannerResolutionOperation(ProvUIMessages.ProfileModificationWizardPage_ResolutionOperationLabel, ius, getProfileId(), request, provisioningContext, status, false);
-							try {
-								resolvedOperation.execute(monitor);
-							} catch (ProvisionException e) {
-								ProvUI.handleException(e, null, StatusManager.SHOW | StatusManager.LOG);
-								couldNotResolve(null);
-							}
-							if (resolvedOperation.getProvisioningPlan() != null) {
-								resolutionResult = resolvedOperation.getResolutionResult();
-								// set up the iu parents to be the plan so that drilldown query can work
-								setDrilldownElements(root, resolvedOperation.getProvisioningPlan());
-							}
-						}
-					}
-				});
-		} catch (InterruptedException e) {
-			// Nothing to report if thread was interrupted
-		} catch (InvocationTargetException e) {
-			ProvUI.handleException(e.getCause(), null, StatusManager.SHOW | StatusManager.LOG);
-			couldNotResolve(null);
-		}
-		// If we've already been created (and not disposed), update the widgets.  If not, nothing to do.
-		if (treeViewer != null && !treeViewer.getTree().isDisposed()) {
-			treeViewer.setInput(input);
-			updateStatus();
-		}
-	}
-
-	void couldNotResolve(String message) {
-		resolvedOperation = null;
-		resolutionResult = null;
-		couldNotResolve = true;
-		if (message != null) {
-			IStatus status = new MultiStatus(ProvUIActivator.PLUGIN_ID, IStatusCodes.UNEXPECTED_NOTHING_TO_DO, message, null);
-			StatusManager.getManager().handle(status, StatusManager.LOG);
-		}
-	}
-
-	void setDrilldownElements(IUElementListRoot root, ProvisioningPlan plan) {
-		if (plan == null)
-			return;
-		Object[] elements = root.getChildren(root);
-		for (int i = 0; i < elements.length; i++) {
-			if (elements[i] instanceof QueriedElement) {
-				((QueriedElement) elements[i]).setQueryable(getQueryable(plan));
-			}
-		}
-	}
-
-	private ProfileModificationOperation createProfileModificationOperation(ProvisioningPlan plan) {
-		return new ProfileModificationOperation(getOperationLabel(), profileId, plan);
-	}
-
-	protected abstract ProfileChangeRequest computeProfileChangeRequest(Object[] checkedElements, MultiStatus additionalStatus, IProgressMonitor monitor);
-
-	// We currently create an empty provisioning context, but
-	// in the future we could consider letting clients supply this.
-	protected ProvisioningContext getProvisioningContext() {
-		return new ProvisioningContext();
-	}
-
-	protected abstract String getOperationLabel();
-
-	void updateStatus() {
-		IStatus currentStatus;
-		if (detailsArea == null || detailsArea.isDisposed())
-			return;
-		int messageType = IMessageProvider.NONE;
-		boolean pageComplete = true;
-		if (ProvisioningOperationRunner.hasScheduledOperationsFor(profileId)) {
-			currentStatus = PlanAnalyzer.getStatus(IStatusCodes.OPERATION_ALREADY_IN_PROGRESS, null);
-		} else if (couldNotResolve) {
-			currentStatus = new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, 0, ProvUIMessages.ProfileModificationWizardPage_UnexpectedError, null);
-		} else {
-			currentStatus = resolvedOperation.getResolutionResult().getSummaryStatus();
-		}
-		if (currentStatus != null && !currentStatus.isOK()) {
-			messageType = IMessageProvider.INFORMATION;
-			int severity = currentStatus.getSeverity();
-			if (severity == IStatus.ERROR) {
-				messageType = IMessageProvider.ERROR;
-				pageComplete = false;
-				// Log errors for later support, but not if these are UI level errors
-				if (currentStatus.getCode() != IStatusCodes.EXPECTED_NOTHING_TO_DO && currentStatus.getCode() != IStatusCodes.OPERATION_ALREADY_IN_PROGRESS)
-					ProvUI.reportStatus(currentStatus, StatusManager.LOG);
-			} else if (severity == IStatus.WARNING) {
-				messageType = IMessageProvider.WARNING;
-				// Log warnings for later support
-				ProvUI.reportStatus(currentStatus, StatusManager.LOG);
-			}
-		}
-		setPageComplete(pageComplete);
-		setMessage(getMessageText(currentStatus), messageType);
-		// We usually want a generic top level message and resolution details in
-		// the details.  But when we have an operation in progress, there are no
-		// resolution details.
-		if (currentStatus.getCode() == IStatusCodes.OPERATION_ALREADY_IN_PROGRESS)
-			detailsArea.setText(currentStatus.getMessage());
-		else
-			detailsArea.setText(getDetailText());
-	}
-
-	public IStatus getCurrentStatus() {
-		if (couldNotResolve || resolutionResult == null) {
-			return PlanAnalyzer.getStatus(IStatusCodes.UNEXPECTED_NOTHING_TO_DO, null);
-		}
-		return resolutionResult.getSummaryStatus();
-	}
-
-	String getDetailText() {
-		String detail = null;
-		IInstallableUnit iu = getSelectedIU();
-
-		// We tried to resolve and it failed.  The specific error was already reported, so description
-		// text can be used for the selected IU.
-		if (couldNotResolve) {
-
-			if (iu != null) {
-				detail = getIUDescription(iu);
-				iuDetailsGroup.enablePropertyLink(true);
-			} else {
-				detail = ""; //$NON-NLS-1$
-				iuDetailsGroup.enablePropertyLink(false);
-			}
-			return detail;
-		}
-
-		// An IU is selected and we have resolved.  Look for information about the specific IU.
-		if (iu != null) {
-			detail = resolutionResult.getDetailedReport(new IInstallableUnit[] {iu});
-			if (detail != null)
-				return detail;
-			// No specific error about this IU.  Show the overall error if it is in error.
-			if (resolutionResult.getSummaryStatus().getSeverity() == IStatus.ERROR)
-				return resolutionResult.getSummaryReport();
-
-			// The overall status is not an error, so we may as well just return info about this iu rather than everything.
-			iuDetailsGroup.enablePropertyLink(true);
-			return getIUDescription(iu);
-		}
-
-		//No IU is selected, give the overall report
-		detail = resolutionResult.getSummaryReport();
-		iuDetailsGroup.enablePropertyLink(false);
-		if (detail == null)
-			detail = ""; //$NON-NLS-1$
-		return detail;
-	}
-
-	String getMessageText(IStatus currentStatus) {
-		if (currentStatus == null || currentStatus.isOK())
-			return getDescription();
-		if (currentStatus.getSeverity() == IStatus.CANCEL)
-			return ProvUIMessages.ResolutionWizardPage_Canceled;
-		if (currentStatus.getSeverity() == IStatus.ERROR)
-			return ProvUIMessages.ResolutionWizardPage_ErrorStatus;
-		return ProvUIMessages.ResolutionWizardPage_WarningInfoStatus;
-	}
-
-	protected String getIUDescription(IInstallableUnit iu) {
-		// Get the iu description in the default locale
-		String description = IUPropertyUtils.getIUProperty(iu, IInstallableUnit.PROP_DESCRIPTION);
-		if (description == null)
-			description = ""; //$NON-NLS-1$
-		return description;
-	}
-
-	protected TreeViewer createTreeViewer(Composite parent) {
-		return new TreeViewer(parent, SWT.BORDER | SWT.MULTI | SWT.FULL_SELECTION);
-	}
-
-	protected abstract IQueryable getQueryable(ProvisioningPlan plan);
-
-	protected String getClipboardText(Control control) {
-		return CopyUtils.getIndentedClipboardText(getSelectedElements(), labelProvider);
-	}
-}
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java
index 17dba86..00a3b6a 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java
@@ -11,18 +11,21 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.dialogs;
 
-import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Status;
+import org.eclipse.equinox.internal.p2.ui.*;
 import org.eclipse.equinox.internal.p2.ui.model.ElementUtils;
 import org.eclipse.equinox.internal.p2.ui.model.IUElementListRoot;
 import org.eclipse.equinox.internal.p2.ui.viewers.IUDetailsLabelProvider;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.internal.provisional.p2.ui.IUPropertyUtils;
-import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
+import org.eclipse.equinox.internal.provisional.p2.ui.*;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.PlannerResolutionOperation;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
 import org.eclipse.equinox.internal.provisional.p2.ui.viewers.*;
+import org.eclipse.jface.dialogs.*;
 import org.eclipse.jface.dialogs.Dialog;
-import org.eclipse.jface.dialogs.IDialogConstants;
 import org.eclipse.jface.viewers.*;
+import org.eclipse.jface.wizard.IWizardPage;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.custom.SashForm;
 import org.eclipse.swt.layout.*;
@@ -31,15 +34,17 @@ import org.eclipse.swt.widgets.*;
 /**
  * A wizard page that presents a check box list of IUs and allows the user
  * to select and deselect them.  Typically the first page in a provisioning
- * operation wizard.
+ * operation wizard, and usually it is the page used to report resolution errors
+ * before advancing to resolution detail.
  * 
  * @since 3.5
  *
  */
-public class SelectableIUsPage extends ProvisioningWizardPage implements ISelectableIUsPage {
+public class SelectableIUsPage extends ResolutionStatusPage implements IResolutionErrorReportingPage {
 
 	IUElementListRoot root;
 	Object[] initialSelections;
+	PlannerResolutionOperation resolvedOperation;
 	CheckboxTableViewer tableViewer;
 	Text detailsArea;
 	IUDetailsGroup iuDetailsGroup;
@@ -47,10 +52,9 @@ public class SelectableIUsPage extends ProvisioningWizardPage implements ISelect
 	IUDetailsLabelProvider labelProvider;
 	protected Display display;
 	protected Policy policy;
-	String profileId;
 
 	public SelectableIUsPage(Policy policy, IUElementListRoot root, Object[] initialSelections, String profileId) {
-		super("IUSelectionPage"); //$NON-NLS-1$
+		super("IUSelectionPage", profileId); //$NON-NLS-1$
 		this.root = root;
 		this.policy = policy;
 		this.initialSelections = initialSelections;
@@ -98,8 +102,7 @@ public class SelectableIUsPage extends ProvisioningWizardPage implements ISelect
 
 		tableViewer.addSelectionChangedListener(new ISelectionChangedListener() {
 			public void selectionChanged(SelectionChangedEvent event) {
-				updateDetails();
-				iuDetailsGroup.enablePropertyLink(!event.getSelection().isEmpty());
+				setDetailText(resolvedOperation);
 			}
 		});
 
@@ -129,7 +132,7 @@ public class SelectableIUsPage extends ProvisioningWizardPage implements ISelect
 		iuDetailsGroup = new IUDetailsGroup(sashForm, tableViewer, convertWidthInCharsToPixels(ILayoutConstants.DEFAULT_TABLE_WIDTH), false);
 
 		detailsArea = iuDetailsGroup.getDetailsArea();
-
+		updateStatus(root, resolvedOperation);
 		setControl(sashForm);
 		sashForm.setWeights(new int[] {80, 20});
 		Dialog.applyDialogFont(sashForm);
@@ -180,26 +183,13 @@ public class SelectableIUsPage extends ProvisioningWizardPage implements ISelect
 	protected CheckboxTableViewer createTableViewer(Composite parent) {
 		// The viewer allows selection of IU's for browsing the details,
 		// and checking to include in the provisioning operation.
-		CheckboxTableViewer v = CheckboxTableViewer.newCheckList(parent, SWT.BORDER | SWT.FULL_SELECTION);
+		CheckboxTableViewer v = CheckboxTableViewer.newCheckList(parent, SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI);
 		return v;
 	}
 
-	protected void updateDetails() {
-		detailsArea.setText(getDetailText());
-	}
-
-	String getDetailText() {
-		IInstallableUnit[] ius = ElementUtils.elementsToIUs(getSelectedIUElements());
-		String description = null;
-		if (ius.length > 0) {
-			description = IUPropertyUtils.getIUProperty(ius[0], IInstallableUnit.PROP_DESCRIPTION);
-		}
-		if (description == null)
-			description = ""; //$NON-NLS-1$
-		return description;
-	}
-
 	public Object[] getCheckedIUElements() {
+		if (tableViewer == null)
+			return initialSelections;
 		return tableViewer.getCheckedElements();
 	}
 
@@ -235,6 +225,18 @@ public class SelectableIUsPage extends ProvisioningWizardPage implements ISelect
 		return isPageComplete();
 	}
 
+	/*
+	 * Overridden to null out any cached page so that the wizard
+	 * is always consulted.  This allows wizards to do things like
+	 * synchronize previous page selections with this page.
+	 * (non-Javadoc)
+	 * @see org.eclipse.jface.wizard.WizardPage#getPreviousPage()
+	 */
+	public IWizardPage getPreviousPage() {
+		setPreviousPage(null);
+		return super.getPreviousPage();
+	}
+
 	protected String getClipboardText(Control control) {
 		StringBuffer buffer = new StringBuffer();
 		Object[] elements = getSelectedElements();
@@ -245,4 +247,60 @@ public class SelectableIUsPage extends ProvisioningWizardPage implements ISelect
 		}
 		return buffer.toString();
 	}
+
+	protected IInstallableUnit getSelectedIU() {
+		IInstallableUnit[] units = ElementUtils.elementsToIUs(getSelectedElements());
+		if (units.length == 0)
+			return null;
+		return units[0];
+	}
+
+	/*
+	 * Overridden to handle conditions where continuing with the operation should not be allowed.
+	 * (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.p2.ui.dialogs.ResolutionStatusPage#updateStatus(org.eclipse.equinox.internal.p2.ui.model.IUElementListRoot, org.eclipse.equinox.internal.provisional.p2.ui.operations.PlannerResolutionOperation)
+	 */
+	public void updateStatus(IUElementListRoot newRoot, PlannerResolutionOperation op) {
+		IStatus specialStatus = null;
+		if (ProvisioningOperationRunner.hasScheduledOperationsFor(profileId)) {
+			specialStatus = PlanAnalyzer.getStatus(IStatusCodes.OPERATION_ALREADY_IN_PROGRESS, null);
+		} else if (op == null) {
+			specialStatus = new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, 0, ProvUIMessages.ProfileModificationWizardPage_UnexpectedError, null);
+		}
+		if (specialStatus == null) {
+			super.updateStatus(newRoot, op);
+		} else {
+			updateCaches(newRoot, op);
+			setPageComplete(false);
+			getDetailsGroup().getDetailsArea().setText(specialStatus.getMessage());
+			setMessage(getMessageText(specialStatus), IMessageProvider.ERROR);
+
+		}
+	}
+
+	protected IUDetailsGroup getDetailsGroup() {
+		return iuDetailsGroup;
+	}
+
+	protected boolean isCreated() {
+		return tableViewer != null;
+	}
+
+	protected void updateCaches(IUElementListRoot newRoot, PlannerResolutionOperation op) {
+		resolvedOperation = op;
+		if (root != newRoot && tableViewer != null)
+			tableViewer.setInput(newRoot);
+		root = newRoot;
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.p2.ui.dialogs.ISelectableIUsPage#setCheckedElements(java.lang.Object[])
+	 */
+	public void setCheckedElements(Object[] elements) {
+		if (tableViewer == null)
+			initialSelections = elements;
+		else
+			tableViewer.setCheckedElements(elements);
+
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SizeComputingWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SizeComputingWizardPage.java
index 9fe9c70..f898258 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SizeComputingWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SizeComputingWizardPage.java
@@ -23,7 +23,6 @@ import org.eclipse.equinox.internal.provisional.p2.query.IQueryable;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.PlannerResolutionOperation;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
-import org.eclipse.jface.operation.IRunnableContext;
 import org.eclipse.osgi.util.NLS;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.layout.GridData;
@@ -34,7 +33,7 @@ import org.eclipse.swt.widgets.Label;
  * 
  * @since 3.5
  */
-public abstract class SizeComputingWizardPage extends ResolutionWizardPage {
+public abstract class SizeComputingWizardPage extends ResolutionResultsWizardPage {
 
 	protected SizeComputingWizardPage(Policy policy, IUElementListRoot root, String profileID, PlannerResolutionOperation initialResolution) {
 		super(policy, root, profileID, initialResolution);
@@ -120,10 +119,10 @@ public abstract class SizeComputingWizardPage extends ResolutionWizardPage {
 		}
 	}
 
-	public void recomputePlan(IUElementListRoot root, ProvisioningContext provisioningContext, IRunnableContext runnableContext) {
-		super.recomputePlan(root, provisioningContext, runnableContext);
-		if (getCurrentPlan() != null)
-			computeSizing(getCurrentPlan(), getProfileId(), provisioningContext);
+	public void updateStatus(IUElementListRoot root, PlannerResolutionOperation op) {
+		super.updateStatus(root, op);
+		if (op.getProvisioningPlan() != null)
+			computeSizing(op.getProvisioningPlan(), getProfileId(), op.getProvisioningContext());
 	}
 
 	protected IQueryable getQueryable(ProvisioningPlan plan) {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UninstallWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UninstallWizardPage.java
index 29dc1f2..7efc99a 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UninstallWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UninstallWizardPage.java
@@ -10,18 +10,14 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.dialogs;
 
-import org.eclipse.core.runtime.IProgressMonitor;
-import org.eclipse.core.runtime.MultiStatus;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
-import org.eclipse.equinox.internal.p2.ui.model.ElementUtils;
 import org.eclipse.equinox.internal.p2.ui.model.IUElementListRoot;
-import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest;
 import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.internal.provisional.p2.query.IQueryable;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.PlannerResolutionOperation;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
 
-public class UninstallWizardPage extends ResolutionWizardPage {
+public class UninstallWizardPage extends ResolutionResultsWizardPage {
 
 	public UninstallWizardPage(Policy policy, IUElementListRoot root, String profileId, PlannerResolutionOperation initialResolution) {
 		super(policy, root, profileId, initialResolution);
@@ -29,12 +25,6 @@ public class UninstallWizardPage extends ResolutionWizardPage {
 		setDescription(ProvUIMessages.UninstallWizardPage_Description);
 	}
 
-	protected ProfileChangeRequest computeProfileChangeRequest(Object[] selectedElements, MultiStatus additionalStatus, IProgressMonitor monitor) {
-		ProfileChangeRequest request = ProfileChangeRequest.createByProfileId(getProfileId());
-		request.removeInstallableUnits(ElementUtils.elementsToIUs(selectedElements));
-		return request;
-	}
-
 	protected String getOperationLabel() {
 		return ProvUIMessages.UninstallIUOperationLabel;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
index a0288ff..0ebe879 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
@@ -10,14 +10,8 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.dialogs;
 
-import java.util.HashSet;
-import java.util.Set;
-import org.eclipse.core.runtime.IProgressMonitor;
-import org.eclipse.core.runtime.MultiStatus;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
-import org.eclipse.equinox.internal.p2.ui.model.AvailableUpdateElement;
 import org.eclipse.equinox.internal.p2.ui.model.IUElementListRoot;
-import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IUpdateDescriptor;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.PlannerResolutionOperation;
@@ -25,39 +19,12 @@ import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
 
 public class UpdateWizardPage extends SizeComputingWizardPage {
 
-	public static IInstallableUnit[] getIUsToReplace(Object[] replacementElements) {
-		Set iusToReplace = new HashSet();
-		for (int i = 0; i < replacementElements.length; i++) {
-			if (replacementElements[i] instanceof AvailableUpdateElement) {
-				iusToReplace.add(((AvailableUpdateElement) replacementElements[i]).getIUToBeUpdated());
-			}
-		}
-		return (IInstallableUnit[]) iusToReplace.toArray(new IInstallableUnit[iusToReplace.size()]);
-	}
-
-	public static IInstallableUnit[] getReplacementIUs(Object[] replacementElements) {
-		Set replacements = new HashSet();
-		for (int i = 0; i < replacementElements.length; i++) {
-			if (replacementElements[i] instanceof AvailableUpdateElement) {
-				replacements.add(((AvailableUpdateElement) replacementElements[i]).getIU());
-			}
-		}
-		return (IInstallableUnit[]) replacements.toArray(new IInstallableUnit[replacements.size()]);
-	}
-
 	public UpdateWizardPage(Policy policy, IUElementListRoot root, String profileId, PlannerResolutionOperation initialResolution) {
 		super(policy, root, profileId, initialResolution);
 		setTitle(ProvUIMessages.UpdateWizardPage_Title);
 		setDescription(ProvUIMessages.UpdateWizardPage_Description);
 	}
 
-	protected ProfileChangeRequest computeProfileChangeRequest(Object[] selectedElements, MultiStatus additionalStatus, IProgressMonitor monitor) {
-		ProfileChangeRequest request = ProfileChangeRequest.createByProfileId(getProfileId());
-		request.removeInstallableUnits(getIUsToReplace(selectedElements));
-		request.addInstallableUnits(getReplacementIUs(selectedElements));
-		return request;
-	}
-
 	protected String getIUDescription(IInstallableUnit iu) {
 		if (iu != null) {
 			IUpdateDescriptor updateDescriptor = iu.getUpdateDescriptor();
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/WizardWithLicenses.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/WizardWithLicenses.java
index 07f736f..ca8f6b9 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/WizardWithLicenses.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/WizardWithLicenses.java
@@ -10,12 +10,11 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.dialogs;
 
-import org.eclipse.equinox.internal.provisional.p2.ui.dialogs.AcceptLicensesWizardPage;
-
 import org.eclipse.equinox.internal.p2.ui.model.ElementUtils;
 import org.eclipse.equinox.internal.p2.ui.model.IUElementListRoot;
 import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.ui.dialogs.AcceptLicensesWizardPage;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.PlannerResolutionOperation;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
 import org.eclipse.jface.wizard.IWizardPage;
@@ -49,16 +48,20 @@ public abstract class WizardWithLicenses extends ProvisioningOperationWizard {
 			if (licensePage.hasLicensesToAccept()) {
 				return licensePage;
 			}
+			return null;
 		}
 		return super.getNextPage(page);
 	}
 
 	protected void planChanged() {
+		super.planChanged();
+		if (resolutionOperation == null)
+			return;
 		if (licensePage == null) {
-			licensePage = createLicensesPage(ElementUtils.elementsToIUs(mainPage.getCheckedIUElements()), resolutionPage.getCurrentPlan());
+			licensePage = createLicensesPage(ElementUtils.elementsToIUs(mainPage.getCheckedIUElements()), resolutionOperation.getProvisioningPlan());
 			addPage(licensePage);
 		} else
-			licensePage.update(ElementUtils.elementsToIUs(mainPage.getCheckedIUElements()), resolutionPage.getCurrentPlan());
+			licensePage.update(ElementUtils.elementsToIUs(mainPage.getCheckedIUElements()), resolutionOperation.getProvisioningPlan());
 		// Status of license page could change status of wizard next button
 		// If no current page has been set yet (ie, we are still being created)
 		// then the updateButtons() method will NPE.  This check is needed in
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
index 4e79fe6..e00bec7 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
@@ -12,7 +12,6 @@ package org.eclipse.equinox.internal.provisional.p2.ui.dialogs;
 
 import java.net.URI;
 import java.util.ArrayList;
-import java.util.HashSet;
 import org.eclipse.core.runtime.*;
 import org.eclipse.core.runtime.jobs.*;
 import org.eclipse.equinox.internal.p2.ui.*;
@@ -299,12 +298,11 @@ public class AvailableIUGroup extends StructuredIUGroup {
 		Object[] selections = filteredTree.getCheckboxTreeViewer().getCheckedElements();
 		if (selections.length == 0)
 			return new IInstallableUnit[0];
-		// Use a set to eliminate any duplicate selections
-		HashSet leaves = new HashSet(selections.length);
+		ArrayList leaves = new ArrayList(selections.length);
 		for (int i = 0; i < selections.length; i++) {
 			if (!getCheckboxTreeViewer().getGrayed(selections[i])) {
 				IInstallableUnit iu = (IInstallableUnit) ProvUI.getAdapter(selections[i], IInstallableUnit.class);
-				if (iu != null && !ProvisioningUtil.isCategory(iu))
+				if (iu != null && !ProvisioningUtil.isCategory(iu) && !leaves.contains(iu))
 					leaves.add(iu);
 			}
 		}
@@ -429,18 +427,17 @@ public class AvailableIUGroup extends StructuredIUGroup {
 		return data;
 	}
 
-	// TODO this is potentially very expensive if used indiscriminately, need to doc the
-	// expected preconditions
+	/**
+	 * Set the checked elements to the specified selections.  This method
+	 * does not force visibility/expansion of the checked elements.  If they are not
+	 * visible, they will not be checked.
+	 * @param selections
+	 */
 	public void setChecked(Object[] selections) {
-		ContainerCheckedTreeViewer checkViewer = filteredTree.getCheckboxTreeViewer();
-		Object element = new Object();
-		for (int i = 0; i < selections.length; i++) {
-			element = selections[i];
-			checkViewer.expandToLevel(selections[i], AbstractTreeViewer.ALL_LEVELS);
-			checkViewer.setSubtreeChecked(selections[i], true);
-		}
+		filteredTree.getCheckboxTreeViewer().setCheckedElements(selections);
 		// Relying on knowledge that DelayedFilterCheckbox doesn't care which element is in the listener
-		checkViewer.fireCheckStateChanged(element, true);
+		Object element = selections.length > 0 ? selections[0] : new Object();
+		filteredTree.getCheckboxTreeViewer().fireCheckStateChanged(element, true);
 	}
 
 	public void setRepositoryFilter(int filterFlag, URI repoLocation) {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstallWizard.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstallWizard.java
index 2736c33..5882c6b 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstallWizard.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstallWizard.java
@@ -11,15 +11,20 @@
 package org.eclipse.equinox.internal.provisional.p2.ui.dialogs;
 
 import java.util.ArrayList;
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.MultiStatus;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.dialogs.*;
 import org.eclipse.equinox.internal.p2.ui.model.*;
+import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest;
 import org.eclipse.equinox.internal.provisional.p2.engine.ProvisioningContext;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUIImages;
 import org.eclipse.equinox.internal.provisional.p2.ui.QueryableMetadataRepositoryManager;
+import org.eclipse.equinox.internal.provisional.p2.ui.actions.InstallAction;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.PlannerResolutionOperation;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
+import org.eclipse.jface.wizard.IWizardPage;
 import org.eclipse.swt.widgets.Composite;
 
 /**
@@ -32,6 +37,7 @@ public class InstallWizard extends WizardWithLicenses {
 
 	QueryableMetadataRepositoryManager manager;
 	AvailableIUsPage mainPage;
+	SelectableIUsPage errorReportingPage;
 
 	public InstallWizard(Policy policy, String profileId, IInstallableUnit[] initialSelections, PlannerResolutionOperation initialResolution, QueryableMetadataRepositoryManager manager) {
 		super(policy, profileId, null, initialSelections, initialResolution);
@@ -44,14 +50,14 @@ public class InstallWizard extends WizardWithLicenses {
 		this(policy, profileId, null, null, new QueryableMetadataRepositoryManager(policy.getQueryContext(), false));
 	}
 
-	protected ResolutionWizardPage createResolutionPage(IUElementListRoot input, PlannerResolutionOperation initialResolution) {
-		return new InstallWizardPage(policy, profileId, input, initialResolution);
+	protected ResolutionResultsWizardPage createResolutionPage() {
+		return new InstallWizardPage(policy, profileId, root, resolutionOperation);
 	}
 
 	protected ISelectableIUsPage createMainPage(IUElementListRoot input, Object[] selections) {
 		mainPage = new AvailableIUsPage(policy, profileId, manager);
 		if (selections != null && selections.length > 0)
-			mainPage.setInitialSelections(selections);
+			mainPage.setCheckedElements(selections);
 		return mainPage;
 
 	}
@@ -87,4 +93,48 @@ public class InstallWizard extends WizardWithLicenses {
 	protected ProvisioningContext getProvisioningContext() {
 		return mainPage.getProvisioningContext();
 	}
+
+	protected ProfileChangeRequest computeProfileChangeRequest(Object[] selectedElements, MultiStatus additionalStatus, IProgressMonitor monitor) {
+		IInstallableUnit[] selected = ElementUtils.elementsToIUs(selectedElements);
+		return InstallAction.computeProfileChangeRequest(selected, profileId, additionalStatus, monitor);
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.p2.ui.dialogs.ProvisioningOperationWizard#getErrorReportingPage()
+	 */
+	protected IResolutionErrorReportingPage getErrorReportingPage() {
+		if (errorReportingPage == null) {
+			originalRoot = root;
+			errorReportingPage = new SelectableIUsPage(policy, root, root.getChildren(root), profileId);
+			errorReportingPage.setTitle(ProvUIMessages.InstallWizardPage_Title);
+			errorReportingPage.setDescription(ProvUIMessages.PreselectedIUInstallWizard_Description);
+			errorReportingPage.updateStatus(root, resolutionOperation);
+			errorReportingPage.setCheckedElements(root.getChildren(root));
+			addPage(errorReportingPage);
+		}
+		return errorReportingPage;
+	}
+
+	protected void showingErrorPage() {
+		// If we did a new resolution and are showing the error page,
+		// update the root.  We don't do this when the page is not the main
+		// page, or we might be updating the root of the showing page.
+		if (getContainer().getCurrentPage() == mainPage) {
+			originalRoot = root;
+			errorReportingPage.updateStatus(originalRoot, resolutionOperation);
+			errorReportingPage.setCheckedElements(root.getChildren(root));
+		}
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.jface.wizard.Wizard#getPreviousPage(org.eclipse.jface.wizard.IWizardPage)
+	 */
+	public IWizardPage getPreviousPage(IWizardPage page) {
+		if (page == errorReportingPage) {
+			mainPage.setCheckedElements(errorReportingPage.getCheckedIUElements());
+			return mainPage;
+		}
+		return super.getPreviousPage(page);
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledSoftwarePage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledSoftwarePage.java
index 57b65e6..9bbc421 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledSoftwarePage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledSoftwarePage.java
@@ -95,7 +95,7 @@ public class InstalledSoftwarePage extends InstallationPage implements ICopyable
 		// if we successfully try to resolve.  This is done to ensure that progress
 		// is shown properly.
 		// See https://bugs.eclipse.org/bugs/show_bug.cgi?id=236495
-		Action action = new UpdateAction(Policy.getDefault(), new ISelectionProvider() {
+		UpdateAction updateAction = new UpdateAction(Policy.getDefault(), new ISelectionProvider() {
 			public void addSelectionChangedListener(ISelectionChangedListener listener) {
 				installedIUGroup.getStructuredViewer().addSelectionChangedListener(listener);
 			}
@@ -124,21 +124,22 @@ public class InstalledSoftwarePage extends InstallationPage implements ICopyable
 					getPageContainer().closeModalContainers();
 			}
 		};
-		updateButton = createButton(parent, UPDATE_ID, action.getText());
-		updateButton.setData(BUTTON_ACTION, action);
+		updateAction.setSkipSelectionPage(true);
+		updateButton = createButton(parent, UPDATE_ID, updateAction.getText());
+		updateButton.setData(BUTTON_ACTION, updateAction);
 		// Uninstall action
-		action = new UninstallAction(Policy.getDefault(), installedIUGroup.getStructuredViewer(), profileId) {
+		Action uninstallAction = new UninstallAction(Policy.getDefault(), installedIUGroup.getStructuredViewer(), profileId) {
 			public void run() {
 				super.run();
 				if (getReturnCode() == Window.OK)
 					getPageContainer().closeModalContainers();
 			}
 		};
-		uninstallButton = createButton(parent, UNINSTALL_ID, action.getText());
-		uninstallButton.setData(BUTTON_ACTION, action);
+		uninstallButton = createButton(parent, UNINSTALL_ID, uninstallAction.getText());
+		uninstallButton.setData(BUTTON_ACTION, uninstallAction);
 
 		// Properties action
-		action = new PropertyDialogAction(new SameShellProvider(getShell()), installedIUGroup.getStructuredViewer());
+		PropertyDialogAction action = new PropertyDialogAction(new SameShellProvider(getShell()), installedIUGroup.getStructuredViewer());
 		propertiesButton = createButton(parent, PROPERTIES_ID, action.getText());
 		propertiesButton.setData(BUTTON_ACTION, action);
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/PreselectedIUInstallWizard.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/PreselectedIUInstallWizard.java
index 10b7cc3..11ed812 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/PreselectedIUInstallWizard.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/PreselectedIUInstallWizard.java
@@ -11,12 +11,16 @@
 package org.eclipse.equinox.internal.provisional.p2.ui.dialogs;
 
 import java.util.ArrayList;
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.MultiStatus;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.dialogs.*;
 import org.eclipse.equinox.internal.p2.ui.model.*;
+import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUIImages;
 import org.eclipse.equinox.internal.provisional.p2.ui.QueryableMetadataRepositoryManager;
+import org.eclipse.equinox.internal.provisional.p2.ui.actions.InstallAction;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.PlannerResolutionOperation;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
 
@@ -28,7 +32,7 @@ import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
  */
 public class PreselectedIUInstallWizard extends WizardWithLicenses {
 
-	ISelectableIUsPage mainPage;
+	SelectableIUsPage mainPage;
 	QueryableMetadataRepositoryManager manager;
 
 	static IUElementListRoot makeElementRoot(IInstallableUnit[] ius, String profileId) {
@@ -56,8 +60,8 @@ public class PreselectedIUInstallWizard extends WizardWithLicenses {
 		return mainPage;
 	}
 
-	protected ResolutionWizardPage createResolutionPage(IUElementListRoot input, PlannerResolutionOperation initialResolution) {
-		return new InstallWizardPage(policy, profileId, input, initialResolution);
+	protected ResolutionResultsWizardPage createResolutionPage() {
+		return new InstallWizardPage(policy, profileId, root, resolutionOperation);
 	}
 
 	protected IUElementListRoot makeResolutionElementRoot(Object[] selectedElements) {
@@ -71,4 +75,16 @@ public class PreselectedIUInstallWizard extends WizardWithLicenses {
 		elementRoot.setChildren(list.toArray());
 		return elementRoot;
 	}
+
+	protected ProfileChangeRequest computeProfileChangeRequest(Object[] selectedElements, MultiStatus additionalStatus, IProgressMonitor monitor) {
+		IInstallableUnit[] selected = ElementUtils.elementsToIUs(selectedElements);
+		return InstallAction.computeProfileChangeRequest(selected, profileId, additionalStatus, monitor);
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.p2.ui.dialogs.ProvisioningOperationWizard#getErrorReportingPage()
+	 */
+	protected IResolutionErrorReportingPage getErrorReportingPage() {
+		return mainPage;
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UninstallWizard.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UninstallWizard.java
index 34bad15..f562f92 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UninstallWizard.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UninstallWizard.java
@@ -11,21 +11,27 @@
 package org.eclipse.equinox.internal.provisional.p2.ui.dialogs;
 
 import java.util.ArrayList;
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.MultiStatus;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.dialogs.*;
 import org.eclipse.equinox.internal.p2.ui.model.ElementUtils;
 import org.eclipse.equinox.internal.p2.ui.model.IUElementListRoot;
+import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUIImages;
 import org.eclipse.equinox.internal.provisional.p2.ui.model.InstalledIUElement;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.PlannerResolutionOperation;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
+import org.eclipse.jface.wizard.IWizardPage;
 
 /**
  * @since 3.4
  */
 public class UninstallWizard extends ProvisioningOperationWizard {
 
+	SelectableIUsPage mainPage;
+
 	static IUElementListRoot makeElementRoot(Object[] selectedElements, String profileId) {
 		IUElementListRoot elementRoot = new IUElementListRoot();
 		ArrayList list = new ArrayList(selectedElements.length);
@@ -45,17 +51,47 @@ public class UninstallWizard extends ProvisioningOperationWizard {
 	}
 
 	protected ISelectableIUsPage createMainPage(IUElementListRoot input, Object[] selections) {
-		ISelectableIUsPage page = new SelectableIUsPage(policy, input, selections, profileId);
-		page.setTitle(ProvUIMessages.UninstallIUOperationLabel);
-		page.setDescription(ProvUIMessages.UninstallDialog_UninstallMessage);
-		return page;
+		mainPage = new SelectableIUsPage(policy, input, selections, profileId);
+		mainPage.setTitle(ProvUIMessages.UninstallIUOperationLabel);
+		mainPage.setDescription(ProvUIMessages.UninstallDialog_UninstallMessage);
+		mainPage.updateStatus(input, resolutionOperation);
+		return mainPage;
 	}
 
-	protected ResolutionWizardPage createResolutionPage(IUElementListRoot input, PlannerResolutionOperation initialResolution) {
-		return new UninstallWizardPage(policy, input, profileId, initialResolution);
+	protected ResolutionResultsWizardPage createResolutionPage() {
+		return new UninstallWizardPage(policy, root, profileId, resolutionOperation);
 	}
 
 	protected IUElementListRoot makeResolutionElementRoot(Object[] selectedElements) {
 		return makeElementRoot(selectedElements, profileId);
 	}
+
+	protected ProfileChangeRequest computeProfileChangeRequest(Object[] selectedElements, MultiStatus additionalStatus, IProgressMonitor monitor) {
+		ProfileChangeRequest request = ProfileChangeRequest.createByProfileId(profileId);
+		request.removeInstallableUnits(ElementUtils.elementsToIUs(selectedElements));
+		return request;
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.p2.ui.dialogs.ProvisioningOperationWizard#getErrorReportingPage()
+	 */
+	protected IResolutionErrorReportingPage getErrorReportingPage() {
+		return mainPage;
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.jface.wizard.Wizard#getStartingPage()
+	 */
+	public IWizardPage getStartingPage() {
+		if (getCurrentStatus().isOK()) {
+			if (resolutionPage == null) {
+				resolutionPage = createResolutionPage();
+				addPage(resolutionPage);
+			}
+			mainPage.setPageComplete(true);
+			return resolutionPage;
+		}
+		return super.getStartingPage();
+	}
 }
commit 60787e0502dcc0bb28da95ca2d989fe7892e765f
Author: irbull <irbull@eclipsesource.com>
Date:   Mon Oct 17 15:46:26 2011 -0700

    Bug 261928 : Adds a Relaxed Constraint Option
    
    This will relax the constraints when an update / install fails.  This
    allows a user to try again with a slighly different provisioning plan.
    This is just the start of this work, but it should give us a chance to
    test it out and make changes in future builds.

1	0	bundles/org.eclipse.equinox.p2.operations/META-INF/MANIFEST.MF
3	0	bundles/org.eclipse.equinox.p2.operations/src/org/eclipse/equinox/internal/p2/operations/Messages.java
3	0	bundles/org.eclipse.equinox.p2.operations/src/org/eclipse/equinox/internal/p2/operations/messages.properties
111	0	bundles/org.eclipse.equinox.p2.operations/src/org/eclipse/equinox/p2/operations/RelaxedUpdateInstallOperation.java
1	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
37	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProvisioningOperationWizard.java
31	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionResultsWizardPage.java
29	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java
2	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
7	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvisioningUI.java
diff --git a/bundles/org.eclipse.equinox.p2.operations/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.operations/META-INF/MANIFEST.MF
index 5d72f5d..0c930e7 100644
--- a/bundles/org.eclipse.equinox.p2.operations/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.operations/META-INF/MANIFEST.MF
@@ -16,6 +16,7 @@ Bundle-RequiredExecutionEnvironment: J2SE-1.5,
 Bundle-ActivationPolicy: lazy
 Import-Package: org.eclipse.equinox.internal.p2.core.helpers,
  org.eclipse.equinox.internal.p2.director,
+ org.eclipse.equinox.internal.p2.metadata.query,
  org.eclipse.equinox.internal.p2.repository.helpers,
  org.eclipse.equinox.internal.provisional.configurator,
  org.eclipse.equinox.internal.provisional.p2.core.eventbus,
diff --git a/bundles/org.eclipse.equinox.p2.operations/src/org/eclipse/equinox/internal/p2/operations/Messages.java b/bundles/org.eclipse.equinox.p2.operations/src/org/eclipse/equinox/internal/p2/operations/Messages.java
index b170e41..9180113 100644
--- a/bundles/org.eclipse.equinox.p2.operations/src/org/eclipse/equinox/internal/p2/operations/Messages.java
+++ b/bundles/org.eclipse.equinox.p2.operations/src/org/eclipse/equinox/internal/p2/operations/Messages.java
@@ -66,6 +66,9 @@ public class Messages extends NLS {
 	public static String UpdateOperation_ResolveJobName;
 	public static String UpdateOperation_UpdateJobName;
 
+	public static String RelaxedUpdateOperation_ResolveJobName;
+	public static String RelaxedUpdateOperation_UpdateJobName;
+
 	public static String OperationFactory_noAgent;
 	public static String OperationFactory_noIUFound;
 
diff --git a/bundles/org.eclipse.equinox.p2.operations/src/org/eclipse/equinox/internal/p2/operations/messages.properties b/bundles/org.eclipse.equinox.p2.operations/src/org/eclipse/equinox/internal/p2/operations/messages.properties
index 48fa2ae..2d2253e 100644
--- a/bundles/org.eclipse.equinox.p2.operations/src/org/eclipse/equinox/internal/p2/operations/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.operations/src/org/eclipse/equinox/internal/p2/operations/messages.properties
@@ -42,6 +42,9 @@ UninstallOperation_ResolveJobName=Calculating Uninstall Validity
 UpdateOperation_ProfileChangeRequestProgress=Computing update request
 UpdateOperation_ResolveJobName=Computing Update Requirements
 UpdateOperation_UpdateJobName=Updating Software
+RelaxedUpdateOperation_ResolveJobName=Computing Update Requirements
+RelaxedUpdateOperation_UpdateJobName=Updating Software
+
 
 OperationFactory_noAgent=This installation has not been configured properly. No provisioning agent can be found.
 OperationFactory_noIUFound=No IU could be found for {0}.
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.operations/src/org/eclipse/equinox/p2/operations/RelaxedUpdateInstallOperation.java b/bundles/org.eclipse.equinox.p2.operations/src/org/eclipse/equinox/p2/operations/RelaxedUpdateInstallOperation.java
new file mode 100644
index 0000000..a0e20dd
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.operations/src/org/eclipse/equinox/p2/operations/RelaxedUpdateInstallOperation.java
@@ -0,0 +1,111 @@
+package org.eclipse.equinox.p2.operations;
+
+import java.util.*;
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.MultiStatus;
+import org.eclipse.equinox.internal.p2.director.ProfileChangeRequest;
+import org.eclipse.equinox.internal.p2.metadata.query.UpdateQuery;
+import org.eclipse.equinox.internal.p2.operations.Messages;
+import org.eclipse.equinox.p2.engine.*;
+import org.eclipse.equinox.p2.engine.query.IUProfilePropertyQuery;
+import org.eclipse.equinox.p2.metadata.*;
+import org.eclipse.equinox.p2.planner.*;
+import org.eclipse.equinox.p2.query.*;
+
+/**
+ * An operation that updates IUs with relaxed p2 constraints
+ * 
+ * @noinstantiate This class is not intended to be instantiated by clients.
+ * @noreference
+ */
+public class RelaxedUpdateInstallOperation extends ProfileChangeOperation {
+
+	public RelaxedUpdateInstallOperation(ProvisioningSession session) {
+		super(session);
+	}
+
+	@Override
+	protected void computeProfileChangeRequest(MultiStatus status, IProgressMonitor monitor) {
+		IProfileRegistry profileRegistry = (IProfileRegistry) session.getProvisioningAgent().getService(IProfileRegistry.SERVICE_NAME);
+		IPlanner plan = (IPlanner) session.getProvisioningAgent().getService(IPlanner.SERVICE_NAME);
+		IProfile prof = profileRegistry.getProfile(getProfileId());
+
+		final String INCLUSION_RULES = "org.eclipse.equinox.p2.internal.inclusion.rules"; //$NON-NLS-1$
+		final String INCLUSION_OPTIONAL = "OPTIONAL"; //$NON-NLS-1$
+		final String INCLUSION_STRICT = "STRICT"; //$NON-NLS-1$
+
+		IQueryResult<IInstallableUnit> strictRoots = prof.query(new IUProfilePropertyQuery(INCLUSION_RULES, INCLUSION_STRICT), null);
+		IQueryResult<IInstallableUnit> optionalRoots = prof.query(new IUProfilePropertyQuery(INCLUSION_RULES, INCLUSION_OPTIONAL), null);
+		Set<IInstallableUnit> tmpRoots = new HashSet<IInstallableUnit>(strictRoots.toUnmodifiableSet());
+		tmpRoots.addAll(optionalRoots.toUnmodifiableSet());
+		CollectionResult<IInstallableUnit> allRoots = new CollectionResult<IInstallableUnit>(tmpRoots);
+
+		request = (ProfileChangeRequest) plan.createChangeRequest(prof);
+		Collection<IRequirement> limitingRequirements = new ArrayList<IRequirement>();
+
+		for (Iterator<IInstallableUnit> iterator = allRoots.query(QueryUtil.ALL_UNITS, null).iterator(); iterator.hasNext();) {
+			IInstallableUnit currentlyInstalled = iterator.next();
+
+			//find all the potential updates for the currentlyInstalled iu
+			IQueryResult<IInstallableUnit> updatesAvailable = plan.updatesFor(currentlyInstalled, context, null);
+			for (Iterator<IInstallableUnit> iterator2 = updatesAvailable.iterator(); iterator2.hasNext();) {
+				IInstallableUnit update = iterator2.next();
+				request.add(update);
+				request.setInstallableUnitInclusionRules(update, ProfileInclusionRules.createOptionalInclusionRule(update));
+			}
+			if (!updatesAvailable.isEmpty()) {
+				//force the original IU to optional, but make sure that the solution at least includes it
+				request.setInstallableUnitInclusionRules(currentlyInstalled, ProfileInclusionRules.createOptionalInclusionRule(currentlyInstalled));
+				limitingRequirements.add(MetadataFactory.createRequirement(IInstallableUnit.NAMESPACE_IU_ID, currentlyInstalled.getId(), new VersionRange(currentlyInstalled.getVersion(), true, Version.MAX_VERSION, true), null, false, false));
+			}
+		}
+
+		IProvisioningPlan updateFinderPlan = plan.getProvisioningPlan(request, context, null);
+		if (updateFinderPlan.getAdditions().query(QueryUtil.ALL_UNITS, null).isEmpty()) {
+			return;
+		}
+
+		//Take into account all the removals
+		IProfileChangeRequest finalChangeRequest = plan.createChangeRequest(prof);
+		IQueryResult<IInstallableUnit> removals = updateFinderPlan.getRemovals().query(QueryUtil.ALL_UNITS, null);
+		for (Iterator<IInstallableUnit> iterator = removals.iterator(); iterator.hasNext();) {
+			IInstallableUnit iu = iterator.next();
+			if (!allRoots.query(QueryUtil.createIUQuery(iu), null).isEmpty()) {
+				finalChangeRequest.remove(iu);
+			}
+		}
+
+		//Take into account the additions for stricts
+		for (Iterator<IInstallableUnit> iterator = strictRoots.iterator(); iterator.hasNext();) {
+			IInstallableUnit formerRoot = iterator.next();
+			IQueryResult<IInstallableUnit> update = updateFinderPlan.getAdditions().query(new UpdateQuery(formerRoot), null);
+			if (!update.isEmpty())
+				finalChangeRequest.addAll(update.toUnmodifiableSet());
+		}
+
+		//Take into account the additions for optionals
+		for (Iterator<IInstallableUnit> iterator = optionalRoots.iterator(); iterator.hasNext();) {
+			IInstallableUnit formerRoot = iterator.next();
+			IQueryResult<IInstallableUnit> update = updateFinderPlan.getAdditions().query(new UpdateQuery(formerRoot), null);
+			if (!update.isEmpty()) {
+				for (Iterator<IInstallableUnit> it = update.iterator(); it.hasNext();) {
+					IInstallableUnit updatedOptionalIU = it.next();
+					finalChangeRequest.add(updatedOptionalIU);
+					finalChangeRequest.setInstallableUnitInclusionRules(updatedOptionalIU, ProfileInclusionRules.createOptionalInclusionRule(updatedOptionalIU));
+				}
+			}
+		}
+		//return planner.getProvisioningPlan(finalChangeRequest, context, null);
+	}
+
+	@Override
+	protected String getResolveJobName() {
+		return Messages.RelaxedUpdateOperation_ResolveJobName;
+	}
+
+	@Override
+	protected String getProvisioningJobName() {
+		return Messages.RelaxedUpdateOperation_UpdateJobName;
+	}
+
+}
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
index bd31e0a..2324793 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
@@ -158,6 +158,7 @@ public class ProvUIMessages extends NLS {
 	public static String ResolutionWizardPage_ErrorStatus;
 	public static String ResolutionWizardPage_NoSelections;
 	public static String ResolutionWizardPage_WarningInfoStatus;
+	public static String ResolutionWizardPage_RelaxedConstraints;
 	public static String ResolutionStatusPage_ErrorIULocked;
 
 	// Dialogs
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProvisioningOperationWizard.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProvisioningOperationWizard.java
index e1d12f6..78e62e4 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProvisioningOperationWizard.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProvisioningOperationWizard.java
@@ -49,6 +49,7 @@ public abstract class ProvisioningOperationWizard extends Wizard {
 	private ProvisioningContext provisioningContext;
 	protected LoadMetadataRepositoryJob repoPreloadJob;
 	IStatus couldNotResolveStatus = Status.OK_STATUS; // we haven't tried and failed
+	boolean resolveWithRelaxedConstraints = false;
 
 	boolean waitingForOtherJobs = false;
 
@@ -191,6 +192,34 @@ public abstract class ProvisioningOperationWizard extends Wizard {
 		return new ProvisioningContext(ui.getSession().getProvisioningAgent());
 	}
 
+
+	public void recomputePlanWithRelaxedConstraints(IRunnableContext runnableContext) {
+		couldNotResolveStatus = Status.OK_STATUS;
+		provisioningContext = getProvisioningContext();
+		initializeResolutionModelElements(getOperationSelections());
+		if (planSelections.length == 0) {
+			operation = null;
+			couldNotResolve(ProvUIMessages.ResolutionWizardPage_NoSelections);
+		} else {
+			operation = ui.getLuckyOperation(provisioningContext);
+			operation.setProvisioningContext(provisioningContext);
+			try {
+				runnableContext.run(true, true, new IRunnableWithProgress() {
+					public void run(IProgressMonitor monitor) {
+						operation.resolveModal(monitor);
+					}
+				});
+
+			} catch (InterruptedException e) {
+				// Nothing to report if thread was interrupted
+			} catch (InvocationTargetException e) {
+				ProvUI.handleException(e.getCause(), null, StatusManager.SHOW | StatusManager.LOG);
+				couldNotResolve(null);
+			}
+		}
+		planChanged();
+	}
+
 	/**
 	 * Recompute the provisioning plan based on the items in the IUElementListRoot and the given provisioning context.
 	 * Report progress using the specified runnable context.  This method may be called before the page is created.
@@ -198,6 +227,10 @@ public abstract class ProvisioningOperationWizard extends Wizard {
 	 * @param runnableContext
 	 */
 	public void recomputePlan(IRunnableContext runnableContext) {
+		if (resolveWithRelaxedConstraints) {
+			recomputePlanWithRelaxedConstraints(runnableContext);
+			return;
+		}
 		couldNotResolveStatus = Status.OK_STATUS;
 		provisioningContext = getProvisioningContext();
 		initializeResolutionModelElements(getOperationSelections());
@@ -350,4 +383,8 @@ public abstract class ProvisioningOperationWizard extends Wizard {
 	public boolean statusOverridesOperation() {
 		return false;
 	}
+
+	public void setRelaxedResolution(boolean value) {
+		this.resolveWithRelaxedConstraints = value;
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionResultsWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionResultsWizardPage.java
index 556f299..a0033f1 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionResultsWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionResultsWizardPage.java
@@ -15,6 +15,7 @@ package org.eclipse.equinox.internal.p2.ui.dialogs;
 import java.util.Collection;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.ui.ProvUIActivator;
+import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.model.*;
 import org.eclipse.equinox.internal.p2.ui.viewers.*;
 import org.eclipse.equinox.p2.engine.IProvisioningPlan;
@@ -24,10 +25,13 @@ import org.eclipse.equinox.p2.operations.ProvisioningJob;
 import org.eclipse.equinox.p2.query.IQueryable;
 import org.eclipse.equinox.p2.ui.ProvisioningUI;
 import org.eclipse.jface.dialogs.Dialog;
+import org.eclipse.jface.dialogs.IDialogConstants;
 import org.eclipse.jface.operation.IRunnableWithProgress;
 import org.eclipse.jface.viewers.*;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.custom.SashForm;
+import org.eclipse.swt.events.SelectionAdapter;
+import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.layout.*;
 import org.eclipse.swt.widgets.*;
 import org.eclipse.ui.statushandlers.StatusManager;
@@ -51,6 +55,7 @@ public abstract class ResolutionResultsWizardPage extends ResolutionStatusPage {
 	protected Display display;
 	private IUDetailsGroup iuDetailsGroup;
 	SashForm sashForm;
+	Button relaxConstraints;
 
 	protected ResolutionResultsWizardPage(ProvisioningUI ui, ProvisioningOperationWizard wizard, IUElementListRoot input, ProfileChangeOperation operation) {
 		super("ResolutionPage", ui, wizard); //$NON-NLS-1$
@@ -117,6 +122,20 @@ public abstract class ResolutionResultsWizardPage extends ResolutionStatusPage {
 		sashForm.setWeights(getSashWeights());
 		Dialog.applyDialogFont(sashForm);
 
+		// Controls for filtering/presentation/site selection
+		Composite controlsComposite = new Composite(composite, SWT.NONE);
+		gridLayout = new GridLayout();
+		gridLayout.marginWidth = 0;
+		gridLayout.marginHeight = 0;
+		gridLayout.numColumns = 2;
+		gridLayout.makeColumnsEqualWidth = true;
+		gridLayout.verticalSpacing = convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_SPACING);
+		controlsComposite.setLayout(layout);
+		GridData gd = new GridData(SWT.FILL, SWT.FILL, true, false);
+		controlsComposite.setLayoutData(gd);
+
+		createViewControlsArea(controlsComposite);
+
 		final Runnable runnable = new Runnable() {
 			public void run() {
 				treeViewer.addSelectionChangedListener(new ISelectionChangedListener() {
@@ -124,7 +143,6 @@ public abstract class ResolutionResultsWizardPage extends ResolutionStatusPage {
 						setDetailText(resolvedOperation);
 					}
 				});
-				updateStatus(input, resolvedOperation);
 				setDrilldownElements(input, resolvedOperation);
 				treeViewer.setInput(input);
 			}
@@ -146,6 +164,18 @@ public abstract class ResolutionResultsWizardPage extends ResolutionStatusPage {
 		}
 	}
 
+	private void createViewControlsArea(Composite controlsComposite) {
+		relaxConstraints = new Button(controlsComposite, SWT.CHECK);
+		relaxConstraints.setText(ProvUIMessages.ResolutionWizardPage_RelaxedConstraints);
+		relaxConstraints.addSelectionListener(new SelectionAdapter() {
+			@Override
+			public void widgetSelected(SelectionEvent e) {
+				((ProvisioningOperationWizard) getWizard()).setRelaxedResolution(relaxConstraints.getSelection());
+				setPageComplete(true);
+			}
+		});
+	}
+
 	protected void createSizingInfo(Composite parent) {
 		// Default is to do nothing
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java
index 16dfec2..d6a85db 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java
@@ -27,6 +27,8 @@ import org.eclipse.jface.viewers.*;
 import org.eclipse.jface.wizard.IWizardPage;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.custom.SashForm;
+import org.eclipse.swt.events.SelectionAdapter;
+import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.layout.*;
 import org.eclipse.swt.widgets.*;
 
@@ -53,6 +55,7 @@ public class SelectableIUsPage extends ResolutionStatusPage implements IResoluti
 	protected Display display;
 	protected Policy policy;
 	SashForm sashForm;
+	Button relaxConstraints;
 
 	public SelectableIUsPage(ProvisioningUI ui, ProvisioningOperationWizard wizard, IUElementListRoot root, Object[] initialSelections) {
 		super("IUSelectionPage", ui, wizard); //$NON-NLS-1$
@@ -147,6 +150,20 @@ public class SelectableIUsPage extends ResolutionStatusPage implements IResoluti
 		// Select and Deselect All buttons
 		createSelectButtons(composite);
 
+		// Controls for filtering/presentation/site selection
+		Composite controlsComposite = new Composite(composite, SWT.NONE);
+		gridLayout = new GridLayout();
+		gridLayout.marginWidth = 0;
+		gridLayout.marginHeight = 0;
+		gridLayout.numColumns = 2;
+		gridLayout.makeColumnsEqualWidth = true;
+		gridLayout.verticalSpacing = convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_SPACING);
+		controlsComposite.setLayout(layout);
+		GridData gd = new GridData(SWT.FILL, SWT.FILL, true, false);
+		controlsComposite.setLayoutData(gd);
+
+		createViewControlsArea(controlsComposite);
+
 		// The text area shows a description of the selected IU, or error detail if applicable.
 		iuDetailsGroup = new IUDetailsGroup(sashForm, tableViewer, convertWidthInCharsToPixels(ILayoutConstants.DEFAULT_TABLE_WIDTH), true);
 
@@ -156,6 +173,18 @@ public class SelectableIUsPage extends ResolutionStatusPage implements IResoluti
 		Dialog.applyDialogFont(sashForm);
 	}
 
+	private void createViewControlsArea(Composite controlsComposite) {
+		relaxConstraints = new Button(controlsComposite, SWT.CHECK);
+		relaxConstraints.setText(ProvUIMessages.ResolutionWizardPage_RelaxedConstraints);
+		relaxConstraints.addSelectionListener(new SelectionAdapter() {
+			@Override
+			public void widgetSelected(SelectionEvent e) {
+				((ProvisioningOperationWizard) getWizard()).setRelaxedResolution(relaxConstraints.getSelection());
+				setPageComplete(true);
+			}
+		});
+	}
+
 	private void createSelectButtons(Composite parent) {
 		Composite buttonParent = new Composite(parent, SWT.NONE);
 		GridLayout gridLayout = new GridLayout();
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
index 03126b7..e1db8c2 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
@@ -106,8 +106,10 @@ ResolutionWizardPage_Canceled=The operation was cancelled.
 ResolutionWizardPage_ErrorStatus=The operation cannot be completed.  See the details.
 ResolutionWizardPage_NoSelections=There were no installable units selected when the plan was computed.
 ResolutionWizardPage_WarningInfoStatus=Your original request has been modified.  See the details.
+ResolutionWizardPage_RelaxedConstraints=Run with relaxed constraints.
 ResolutionStatusPage_ErrorIULocked=Insufficient access privileges to apply this update.\n\n{0}
 
+
 AcceptLicensesWizardPage_AcceptMultiple=I &accept the terms of the license agreements
 AcceptLicensesWizardPage_AcceptSingle=I &accept the terms of the license agreement
 AcceptLicensesWizardPage_ItemsLabel=&Licenses:
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvisioningUI.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvisioningUI.java
index 6b86256..6fce2d7 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvisioningUI.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvisioningUI.java
@@ -132,6 +132,13 @@ public class ProvisioningUI {
 		return profileId;
 	}
 
+	public RelaxedUpdateInstallOperation getLuckyOperation(ProvisioningContext context) {
+		RelaxedUpdateInstallOperation luckyOperation = new RelaxedUpdateInstallOperation(getSession());
+		luckyOperation.setProfileId(getProfileId());
+		luckyOperation.setProvisioningContext(context);
+		return luckyOperation;
+	}
+
 	/**
 	 * Return an install operation that describes installing the specified IInstallableUnits from the
 	 * provided list of repositories.
commit 2152b9f4142f961497c59111d58c1641901431d0
Author: irbull <irbull@eclipsesource.com>
Date:   Tue Oct 25 14:46:04 2011 -0700

    Bug 261928 : Adds a Relaxed Constraint Option
    
    Adds a tooltip to the relaxed constraint option.

1	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
1	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionResultsWizardPage.java
1	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java
2	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
index 2324793..eb62ed9 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
@@ -159,6 +159,7 @@ public class ProvUIMessages extends NLS {
 	public static String ResolutionWizardPage_NoSelections;
 	public static String ResolutionWizardPage_WarningInfoStatus;
 	public static String ResolutionWizardPage_RelaxedConstraints;
+	public static String ResolutionWizardPage_RelaxedConstraintsTip;
 	public static String ResolutionStatusPage_ErrorIULocked;
 
 	// Dialogs
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionResultsWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionResultsWizardPage.java
index a0033f1..cb51fa0 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionResultsWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionResultsWizardPage.java
@@ -167,6 +167,7 @@ public abstract class ResolutionResultsWizardPage extends ResolutionStatusPage {
 	private void createViewControlsArea(Composite controlsComposite) {
 		relaxConstraints = new Button(controlsComposite, SWT.CHECK);
 		relaxConstraints.setText(ProvUIMessages.ResolutionWizardPage_RelaxedConstraints);
+		relaxConstraints.setToolTipText(ProvUIMessages.ResolutionWizardPage_RelaxedConstraintsTip);
 		relaxConstraints.addSelectionListener(new SelectionAdapter() {
 			@Override
 			public void widgetSelected(SelectionEvent e) {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java
index d6a85db..f240f82 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java
@@ -176,6 +176,7 @@ public class SelectableIUsPage extends ResolutionStatusPage implements IResoluti
 	private void createViewControlsArea(Composite controlsComposite) {
 		relaxConstraints = new Button(controlsComposite, SWT.CHECK);
 		relaxConstraints.setText(ProvUIMessages.ResolutionWizardPage_RelaxedConstraints);
+		relaxConstraints.setToolTipText(ProvUIMessages.ResolutionWizardPage_RelaxedConstraintsTip);
 		relaxConstraints.addSelectionListener(new SelectionAdapter() {
 			@Override
 			public void widgetSelected(SelectionEvent e) {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
index e1db8c2..8abcaa4 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
@@ -106,7 +106,8 @@ ResolutionWizardPage_Canceled=The operation was cancelled.
 ResolutionWizardPage_ErrorStatus=The operation cannot be completed.  See the details.
 ResolutionWizardPage_NoSelections=There were no installable units selected when the plan was computed.
 ResolutionWizardPage_WarningInfoStatus=Your original request has been modified.  See the details.
-ResolutionWizardPage_RelaxedConstraints=Run with relaxed constraints.
+ResolutionWizardPage_RelaxedConstraints=Install software with with relaxed constraints.
+ResolutionWizardPage_RelaxedConstraintsTip=Instructs p2 to install the selected software with with relaxed constraints.
 ResolutionStatusPage_ErrorIULocked=Insufficient access privileges to apply this update.\n\n{0}
 
 
commit a928532f4fbcc4d7bef5b8587877d30e5cab0414
Author: irbull <irbull@eclipsesource.com>
Date:   Tue Oct 25 23:42:49 2011 -0700

    Bug 261928 : Adds a Relaxed Constraint Option
    
    Fixed the UI so that the option is only enabled if the
    original provisioning operation fails.

1	1	bundles/org.eclipse.equinox.p2.operations/src/org/eclipse/equinox/p2/operations/RelaxedUpdateInstallOperation.java
4	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProvisioningOperationWizard.java
16	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionResultsWizardPage.java
17	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java
diff --git a/bundles/org.eclipse.equinox.p2.operations/src/org/eclipse/equinox/p2/operations/RelaxedUpdateInstallOperation.java b/bundles/org.eclipse.equinox.p2.operations/src/org/eclipse/equinox/p2/operations/RelaxedUpdateInstallOperation.java
index bcf61ac..8605f0f 100644
--- a/bundles/org.eclipse.equinox.p2.operations/src/org/eclipse/equinox/p2/operations/RelaxedUpdateInstallOperation.java
+++ b/bundles/org.eclipse.equinox.p2.operations/src/org/eclipse/equinox/p2/operations/RelaxedUpdateInstallOperation.java
@@ -96,7 +96,7 @@ public class RelaxedUpdateInstallOperation extends ProfileChangeOperation {
 				}
 			}
 		}
-		//return planner.getProvisioningPlan(finalChangeRequest, context, null);
+		request = (ProfileChangeRequest) finalChangeRequest;
 	}
 
 	@Override
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProvisioningOperationWizard.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProvisioningOperationWizard.java
index 22dbb00..efe2f3f 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProvisioningOperationWizard.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProvisioningOperationWizard.java
@@ -386,4 +386,8 @@ public abstract class ProvisioningOperationWizard extends Wizard {
 	public void setRelaxedResolution(boolean value) {
 		this.resolveWithRelaxedConstraints = value;
 	}
+
+	public boolean getRelaxedResoltion() {
+		return this.resolveWithRelaxedConstraints;
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionResultsWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionResultsWizardPage.java
index cb51fa0..d0ffad9 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionResultsWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionResultsWizardPage.java
@@ -164,10 +164,19 @@ public abstract class ResolutionResultsWizardPage extends ResolutionStatusPage {
 		}
 	}
 
+	@Override
+	public void updateStatus(IUElementListRoot newRoot, ProfileChangeOperation op) {
+		super.updateStatus(newRoot, op);
+		IStatus currentStatus = getProvisioningWizard().getCurrentStatus();
+		if (relaxConstraints != null)
+			relaxConstraints.setEnabled(currentStatus != null && !currentStatus.isOK());
+	}
+
 	private void createViewControlsArea(Composite controlsComposite) {
 		relaxConstraints = new Button(controlsComposite, SWT.CHECK);
 		relaxConstraints.setText(ProvUIMessages.ResolutionWizardPage_RelaxedConstraints);
 		relaxConstraints.setToolTipText(ProvUIMessages.ResolutionWizardPage_RelaxedConstraintsTip);
+		relaxConstraints.setSelection(((ProvisioningOperationWizard) getWizard()).getRelaxedResoltion());
 		relaxConstraints.addSelectionListener(new SelectionAdapter() {
 			@Override
 			public void widgetSelected(SelectionEvent e) {
@@ -177,6 +186,13 @@ public abstract class ResolutionResultsWizardPage extends ResolutionStatusPage {
 		});
 	}
 
+	@Override
+	public void setVisible(boolean visible) {
+		super.setVisible(visible);
+		if (visible)
+			relaxConstraints.setSelection(((ProvisioningOperationWizard) getWizard()).getRelaxedResoltion());
+	}
+
 	protected void createSizingInfo(Composite parent) {
 		// Default is to do nothing
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java
index f240f82..122e6b7 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java
@@ -13,6 +13,7 @@
 package org.eclipse.equinox.internal.p2.ui.dialogs;
 
 import java.util.ArrayList;
+import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.p2.ui.ProvUI;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.model.*;
@@ -173,10 +174,19 @@ public class SelectableIUsPage extends ResolutionStatusPage implements IResoluti
 		Dialog.applyDialogFont(sashForm);
 	}
 
+	@Override
+	public void updateStatus(IUElementListRoot newRoot, ProfileChangeOperation op) {
+		super.updateStatus(newRoot, op);
+		IStatus currentStatus = getProvisioningWizard().getCurrentStatus();
+		if (relaxConstraints != null)
+			relaxConstraints.setEnabled(currentStatus != null && !currentStatus.isOK());
+	}
+
 	private void createViewControlsArea(Composite controlsComposite) {
 		relaxConstraints = new Button(controlsComposite, SWT.CHECK);
 		relaxConstraints.setText(ProvUIMessages.ResolutionWizardPage_RelaxedConstraints);
 		relaxConstraints.setToolTipText(ProvUIMessages.ResolutionWizardPage_RelaxedConstraintsTip);
+		relaxConstraints.setSelection(((ProvisioningOperationWizard) getWizard()).getRelaxedResoltion());
 		relaxConstraints.addSelectionListener(new SelectionAdapter() {
 			@Override
 			public void widgetSelected(SelectionEvent e) {
@@ -186,6 +196,13 @@ public class SelectableIUsPage extends ResolutionStatusPage implements IResoluti
 		});
 	}
 
+	@Override
+	public void setVisible(boolean visible) {
+		super.setVisible(visible);
+		if (visible)
+			relaxConstraints.setSelection(((ProvisioningOperationWizard) getWizard()).getRelaxedResoltion());
+	}
+
 	private void createSelectButtons(Composite parent) {
 		Composite buttonParent = new Composite(parent, SWT.NONE);
 		GridLayout gridLayout = new GridLayout();

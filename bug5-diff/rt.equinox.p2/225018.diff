commit 4b507030f7825e711d6322eb4597103f5da84007
Author: Susan Franklin <sfranklin>
Date:   Tue Apr 1 19:30:56 2008 +0000

    Bug 225018 - [ui] - Problem merging named categories from different sites

1	1	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java
1	1	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
30	5	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/CategoryElement.java
3	4	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/AnyRequiredCapabilityQuery.java
3	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/CategoryElementCollector.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java
index e41a706..29e01bf 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java
@@ -120,7 +120,7 @@ public class ProvAdminQueryProvider implements IQueryProvider {
 
 				}
 				if (element instanceof CategoryElement) {
-					Query membersOfCategoryQuery = new AnyRequiredCapabilityQuery(((CategoryElement) element).getIU());
+					Query membersOfCategoryQuery = new AnyRequiredCapabilityQuery(((CategoryElement) element).getRequirements());
 					if (showGroupsOnly)
 						// Query all groups and use the query result to optionally select the latest version only
 						return new ElementQueryDescriptor(((CategoryElement) element).getQueryable(), new CompoundQuery(new Query[] {new CompoundQuery(new Query[] {groupQuery, categoryQuery}, false), membersOfCategoryQuery}, true), showLatest ? new LatestIUVersionElementCollector(this, ((CategoryElement) element).getQueryable(), true) : new AvailableIUCollector(this, ((CategoryElement) element).getQueryable(), true));
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
index 08b95b0..67ee15c 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
@@ -86,7 +86,7 @@ public class ProvSDKQueryProvider implements IQueryProvider {
 
 				}
 				if (element instanceof CategoryElement) {
-					Query membersOfCategoryQuery = new AnyRequiredCapabilityQuery(((CategoryElement) element).getIU());
+					Query membersOfCategoryQuery = new AnyRequiredCapabilityQuery(((CategoryElement) element).getRequirements());
 					Collector collector;
 					if (showLatest)
 						collector = new LatestIUVersionElementCollector(this, ((CategoryElement) element).getQueryable(), true);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/CategoryElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/CategoryElement.java
index 85a9cd0..6670755 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/CategoryElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/CategoryElement.java
@@ -10,8 +10,10 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.provisional.p2.ui.model;
 
+import java.util.*;
 import org.eclipse.equinox.internal.p2.ui.model.RemoteQueriedElement;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.metadata.RequiredCapability;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUIImages;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.IQueryProvider;
 
@@ -23,10 +25,10 @@ import org.eclipse.equinox.internal.provisional.p2.ui.policy.IQueryProvider;
  */
 public class CategoryElement extends RemoteQueriedElement implements IUElement {
 
-	private IInstallableUnit iu;
+	private ArrayList ius = new ArrayList(1);
 
 	public CategoryElement(IInstallableUnit iu) {
-		this.iu = iu;
+		ius.add(iu);
 	}
 
 	/*
@@ -39,12 +41,15 @@ public class CategoryElement extends RemoteQueriedElement implements IUElement {
 	}
 
 	public String getLabel(Object o) {
-		return iu.getId();
+		IInstallableUnit iu = getIU();
+		if (iu != null)
+			return iu.getId();
+		return null;
 	}
 
 	public Object getAdapter(Class adapter) {
 		if (adapter == IInstallableUnit.class)
-			return iu;
+			return getIU();
 		return super.getAdapter(adapter);
 	}
 
@@ -53,7 +58,9 @@ public class CategoryElement extends RemoteQueriedElement implements IUElement {
 	}
 
 	public IInstallableUnit getIU() {
-		return iu;
+		if (ius == null || ius.isEmpty())
+			return null;
+		return (IInstallableUnit) ius.get(0);
 	}
 
 	public long getSize() {
@@ -72,4 +79,22 @@ public class CategoryElement extends RemoteQueriedElement implements IUElement {
 		return false;
 	}
 
+	public void mergeIU(IInstallableUnit iu) {
+		ius.add(iu);
+	}
+
+	public RequiredCapability[] getRequirements() {
+		if (ius == null || ius.isEmpty())
+			return new RequiredCapability[0];
+		if (ius.size() == 1)
+			return getIU().getRequiredCapabilities();
+		ArrayList capabilities = new ArrayList();
+		Iterator iter = ius.iterator();
+		while (iter.hasNext()) {
+			IInstallableUnit iu = (IInstallableUnit) iter.next();
+			capabilities.addAll(Arrays.asList(iu.getRequiredCapabilities()));
+		}
+		return (RequiredCapability[]) capabilities.toArray(new RequiredCapability[capabilities.size()]);
+	}
+
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/AnyRequiredCapabilityQuery.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/AnyRequiredCapabilityQuery.java
index 0e2ea2d..2deeabf 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/AnyRequiredCapabilityQuery.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/AnyRequiredCapabilityQuery.java
@@ -15,8 +15,7 @@ import org.eclipse.equinox.internal.provisional.p2.query.Query;
 
 /**
  * A query that searches a repository for all {@link IInstallableUnit} instances that 
- * meet any one of the given iu's capabilities.  This is used, for example, when
- * collecting all of the IU's mentioned by another IU, such as a category or group IU.
+ * meet any one of the given capabilities.  
  */
 public class AnyRequiredCapabilityQuery extends Query {
 	private RequiredCapability[] requirements;
@@ -24,8 +23,8 @@ public class AnyRequiredCapabilityQuery extends Query {
 	/**
 	 * Creates a new query for the capabilities of the given IU.
 	 */
-	public AnyRequiredCapabilityQuery(IInstallableUnit iu) {
-		this.requirements = iu.getRequiredCapabilities();
+	public AnyRequiredCapabilityQuery(RequiredCapability[] requirements) {
+		this.requirements = requirements;
 	}
 
 	/* (non-Javadoc)
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/CategoryElementCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/CategoryElementCollector.java
index f0471dd..21f8d5b 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/CategoryElementCollector.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/CategoryElementCollector.java
@@ -57,8 +57,10 @@ public class CategoryElementCollector extends QueriedElementCollector {
 		// Don't add the same category IU twice
 		while (iter.hasNext()) {
 			CategoryElement element = (CategoryElement) iter.next();
-			if (element.getIU().getId().equals(iu.getId()))
+			if (element.getIU().getId().equals(iu.getId())) {
+				element.mergeIU(iu);
 				return true;
+			}
 		}
 		return super.accept(new CategoryElement(iu));
 	}

commit 914b5e9ca1205942b5be96b61bae3a6e69bcbab3
Author: Pascal Rapicault <prapicau>
Date:   Tue Oct 21 00:20:30 2008 +0000

    Bug 222870 - Enabled MD5 processing step

6	0	bundles/org.eclipse.equinox.p2.artifact.repository/plugin.xml
83	0	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/processors/md5/MD5Verifier.java
17	0	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/processors/md5/Messages.java
5	2	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
44	1	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/MetadataGeneratorHelper.java
42	0	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/MD5Tests.java
1	0	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/AllTests.java
40	0	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/MD5GenerationTest.java
122	0	bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/simpleWithMD5/artifacts.xml
-	-	bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/simpleWithMD5/features/aaFeature_1.0.0.jar
-	-	bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/simpleWithMD5/plugins/aaPlugin_1.0.0.jar
-	-	bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/simpleWithMD5/plugins/bogusbbPlugin_1.0.0.jar
-	-	bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/simpleWithMD5/plugins/bogusccPlugin_1.0.0.jar
-	-	bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/simpleWithMD5/plugins/org.eclipse.core.filebuffers2_3.4.0.v20080603-2000.jar.pack.gz
-	-	bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/simpleWithMD5/plugins/org.eclipse.core.filebuffers3_3.4.0.v20080603-2000.jar.pack.gz
-	-	bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/simpleWithMD5/plugins/org.eclipse.core.filebuffers4_3.4.0.v20080603-2000.jar.pack.gz
-	-	bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/simpleWithMD5/plugins/org.eclipse.core.filebuffers_3.4.0.v20080603-2000.jar.pack.gz
2	0	bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/simpleWithMD5/readme.txt
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/plugin.xml b/bundles/org.eclipse.equinox.p2.artifact.repository/plugin.xml
index 01d9c87..f90876e 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/plugin.xml
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/plugin.xml
@@ -26,4 +26,10 @@
          <run class="org.eclipse.equinox.internal.p2.artifact.mirror.MirrorApplication"/>
       </application>
    </extension>
+   
+   	<extension
+			point="org.eclipse.equinox.p2.artifact.repository.processingSteps"
+			id="org.eclipse.equinox.p2.processing.MD5Verifier">
+		<step class="org.eclipse.equinox.internal.p2.artifact.processors.md5.MD5Verifier"/>
+	</extension>
 </plugin>
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/processors/md5/MD5Verifier.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/processors/md5/MD5Verifier.java
new file mode 100644
index 0000000..6ed842a
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/processors/md5/MD5Verifier.java
@@ -0,0 +1,83 @@
+/*******************************************************************************
+ * Copyright (c) 2007 compeople AG and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ * 	compeople AG (Stefan Liebig) - initial API and implementation
+ * 	IBM Corporation - ongoing development
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.artifact.processors.md5;
+
+import java.io.IOException;
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Status;
+import org.eclipse.equinox.internal.p2.artifact.repository.Activator;
+import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactDescriptor;
+import org.eclipse.equinox.internal.provisional.p2.artifact.repository.processing.ProcessingStep;
+import org.eclipse.equinox.internal.provisional.p2.artifact.repository.processing.ProcessingStepDescriptor;
+import org.eclipse.osgi.util.NLS;
+
+public class MD5Verifier extends ProcessingStep {
+
+	protected String expectedMD5;
+	private MessageDigest md5;
+
+	public MD5Verifier() {
+		super();
+	}
+
+	public MD5Verifier(String expected) {
+		super();
+		this.expectedMD5 = expected;
+		basicInitialize(null);
+	}
+
+	//This handle the case where the MD5 verification is initiated by a processing step
+	public void initialize(ProcessingStepDescriptor descriptor, IArtifactDescriptor context) {
+		super.initialize(descriptor, context);
+		String data = descriptor.getData();
+		if (IArtifactDescriptor.DOWNLOAD_MD5.equals(data))
+			expectedMD5 = context.getProperty(IArtifactDescriptor.DOWNLOAD_MD5);
+		else if (IArtifactDescriptor.ARTIFACT_MD5.equals(data))
+			expectedMD5 = context.getProperty(IArtifactDescriptor.ARTIFACT_MD5);
+		else
+			expectedMD5 = data;
+		basicInitialize(descriptor);
+	}
+
+	private void basicInitialize(ProcessingStepDescriptor descriptor) {
+		int code = (descriptor == null) ? IStatus.ERROR : descriptor.isRequired() ? IStatus.ERROR : IStatus.INFO;
+		if (expectedMD5 == null || expectedMD5.length() != 32)
+			setStatus(new Status(code, Activator.ID, NLS.bind(Messages.Error_invalid_hash, expectedMD5)));
+		try {
+			md5 = MessageDigest.getInstance("MD5"); //$NON-NLS-1$
+		} catch (NoSuchAlgorithmException e) {
+			setStatus(new Status(code, Activator.ID, Messages.Error_MD5_unavailable, e));
+		}
+	}
+
+	public void write(int b) throws IOException {
+		md5.update((byte) b);
+		getDestination().write(b);
+	}
+
+	public void close() throws IOException {
+		byte[] digest = md5.digest();
+		StringBuffer buf = new StringBuffer();
+		for (int i = 0; i < digest.length; i++) {
+			if ((digest[i] & 0xFF) < 0x10)
+				buf.append('0');
+			buf.append(Integer.toHexString(digest[i] & 0xFF));
+		}
+
+		// if the hashes don't line up set the status to error.
+		if (!buf.toString().equals(expectedMD5))
+			setStatus(new Status(IStatus.ERROR, Activator.ID, NLS.bind(Messages.Error_unexpected_hash, expectedMD5, buf)));
+		super.close();
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/processors/md5/Messages.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/processors/md5/Messages.java
new file mode 100644
index 0000000..87ce9d3
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/processors/md5/Messages.java
@@ -0,0 +1,17 @@
+package org.eclipse.equinox.internal.p2.artifact.processors.md5;
+
+import org.eclipse.osgi.util.NLS;
+
+public class Messages extends NLS {
+	private static final String BUNDLE_NAME = "org.eclipse.equinox.internal.p2.artifact.processors.md5.messages"; //$NON-NLS-1$
+	public static String Error_invalid_hash;
+	public static String Error_MD5_unavailable;
+	public static String Error_unexpected_hash;
+	static {
+		// initialize resource bundle
+		NLS.initializeMessages(BUNDLE_NAME, Messages.class);
+	}
+
+	private Messages() {
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
index 34a2a3c..6da8b54 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
@@ -17,6 +17,7 @@ import java.util.jar.JarEntry;
 import java.util.jar.JarOutputStream;
 import org.eclipse.core.runtime.*;
 import org.eclipse.core.runtime.jobs.Job;
+import org.eclipse.equinox.internal.p2.artifact.processors.md5.MD5Verifier;
 import org.eclipse.equinox.internal.p2.artifact.repository.*;
 import org.eclipse.equinox.internal.p2.artifact.repository.Messages;
 import org.eclipse.equinox.internal.p2.core.helpers.*;
@@ -34,6 +35,8 @@ public class SimpleArtifactRepository extends AbstractArtifactRepository impleme
 	 */
 	public static final boolean MIRRORS_ENABLED = !"false".equals(Activator.getContext().getProperty("eclipse.p2.mirrors")); //$NON-NLS-1$//$NON-NLS-2$
 
+	public static final boolean enableMD5 = !"false".equals(Activator.getContext().getProperty("eclipse.noMD5Check")); //$NON-NLS-1$//$NON-NLS-2$
+
 	/** 
 	 * The key for a integer property controls the maximum number
 	 * of threads that should be used when optimizing downloads from a remote
@@ -313,8 +316,6 @@ public class SimpleArtifactRepository extends AbstractArtifactRepository impleme
 	private synchronized OutputStream addPostSteps(ProcessingStepHandler handler, IArtifactDescriptor descriptor, OutputStream destination, IProgressMonitor monitor) {
 		ArrayList steps = new ArrayList();
 		steps.add(new SignatureVerifier());
-		//		if (md5Verification)
-		//			steps.add(new MD5Verifier(descriptor.getProperty(IArtifactDescriptor.ARTIFACT_MD5)));
 		if (steps.isEmpty())
 			return destination;
 		ProcessingStep[] stepArray = (ProcessingStep[]) steps.toArray(new ProcessingStep[steps.size()]);
@@ -326,6 +327,8 @@ public class SimpleArtifactRepository extends AbstractArtifactRepository impleme
 		ArrayList steps = new ArrayList();
 		if (IArtifactDescriptor.TYPE_ZIP.equals(descriptor.getProperty(IArtifactDescriptor.DOWNLOAD_CONTENTTYPE)))
 			steps.add(new ZipVerifierStep());
+		if (enableMD5 && descriptor.getProperty(IArtifactDescriptor.DOWNLOAD_MD5) != null)
+			steps.add(new MD5Verifier(descriptor.getProperty(IArtifactDescriptor.DOWNLOAD_MD5)));
 		// Add steps here if needed
 		if (steps.isEmpty())
 			return destination;
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/MetadataGeneratorHelper.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/MetadataGeneratorHelper.java
index 85f972e..2490f07 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/MetadataGeneratorHelper.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/MetadataGeneratorHelper.java
@@ -14,6 +14,8 @@ package org.eclipse.equinox.internal.provisional.p2.metadata.generator;
 import java.io.*;
 import java.net.URI;
 import java.net.URISyntaxException;
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
 import java.util.*;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipFile;
@@ -138,9 +140,50 @@ public class MetadataGeneratorHelper {
 			// TODO - this is wrong but I'm testing a work-around for bug 205842
 			result.setProperty(IArtifactDescriptor.DOWNLOAD_SIZE, Long.toString(pathOnDisk.length()));
 		}
+		String md5 = computeMD5(pathOnDisk);
+		if (md5 != null)
+			result.setProperty(IArtifactDescriptor.DOWNLOAD_MD5, md5);
 		return result;
 	}
 
+	private static String computeMD5(File file) {
+		if (file == null || file.isDirectory() || !file.exists())
+			return null;
+		MessageDigest md5Checker;
+		try {
+			md5Checker = MessageDigest.getInstance("MD5"); //$NON-NLS-1$
+		} catch (NoSuchAlgorithmException e) {
+			return null;
+		}
+		InputStream fis = null;
+		try {
+			fis = new BufferedInputStream(new FileInputStream(file));
+			int read = -1;
+			while ((read = fis.read()) != -1) {
+				md5Checker.update((byte) read);
+			}
+			byte[] digest = md5Checker.digest();
+			StringBuffer buf = new StringBuffer();
+			for (int i = 0; i < digest.length; i++) {
+				if ((digest[i] & 0xFF) < 0x10)
+					buf.append('0');
+				buf.append(Integer.toHexString(digest[i] & 0xFF));
+			}
+			return buf.toString();
+		} catch (FileNotFoundException e) {
+			return null;
+		} catch (IOException e) {
+			return null;
+		} finally {
+			if (fis != null)
+				try {
+					fis.close();
+				} catch (IOException e) {
+					// ignore
+				}
+		}
+	}
+
 	/**
 	 * @deprecated moved to AbstractPublishingAction
 	 */
@@ -1379,4 +1422,4 @@ public class MetadataGeneratorHelper {
 		return localizations;
 	}
 
-}
+};
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/MD5Tests.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/MD5Tests.java
new file mode 100644
index 0000000..5fbd2f4
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/MD5Tests.java
@@ -0,0 +1,42 @@
+package org.eclipse.equinox.p2.tests.artifact.repository;
+
+import java.io.ByteArrayOutputStream;
+import java.io.File;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.NullProgressMonitor;
+import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactDescriptor;
+import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepository;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
+import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
+
+public class MD5Tests extends AbstractProvisioningTest {
+	File testRepo = null;
+	IArtifactRepository repo = null;
+
+	protected void setUp() throws Exception {
+		super.setUp();
+		testRepo = getTestData("Repository with MD5", "testData/artifactRepo/simpleWithMD5");
+		repo = getArtifactRepositoryManager().loadRepository(testRepo.toURI(), new NullProgressMonitor());
+		assertNotNull("1.0", repo);
+	}
+
+	public void testCheckMD5() {
+		IArtifactKey[] keys = repo.getArtifactKeys();
+		for (int i = 0; i < keys.length; i++) {
+			IArtifactDescriptor[] desc = repo.getArtifactDescriptors(keys[i]);
+			for (int j = 0; j < desc.length; j++) {
+				IStatus status = repo.getArtifact(desc[j], new ByteArrayOutputStream(500), new NullProgressMonitor());
+				if (desc[j].getArtifactKey().getId().startsWith("bogus")) {
+					assertNotOK(status);
+					continue;
+				}
+				assertOK("2.1 " + desc[j], status);
+			}
+		}
+	}
+
+	protected void tearDown() throws Exception {
+		getArtifactRepositoryManager().removeRepository(testRepo.toURI());
+		super.tearDown();
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/AllTests.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/AllTests.java
index 64057f8..74efbc9 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/AllTests.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/AllTests.java
@@ -26,6 +26,7 @@ public class AllTests extends TestCase {
 		suite.addTestSuite(ConfigCUsActionTest.class);
 		suite.addTestSuite(EquinoxLauncherCUActionTest.class);
 		suite.addTestSuite(EquinoxExecutableActionTest.class);
+		suite.addTestSuite(MD5GenerationTest.class);
 		return suite;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/MD5GenerationTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/MD5GenerationTest.java
new file mode 100644
index 0000000..7f87375
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/MD5GenerationTest.java
@@ -0,0 +1,40 @@
+package org.eclipse.equinox.p2.tests.publisher.actions;
+
+import org.eclipse.equinox.internal.p2.metadata.ArtifactKey;
+import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactDescriptor;
+import org.eclipse.equinox.internal.provisional.p2.metadata.generator.MetadataGeneratorHelper;
+import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
+import org.eclipse.equinox.spi.p2.publisher.PublisherHelper;
+import org.osgi.framework.Version;
+
+public class MD5GenerationTest extends AbstractProvisioningTest {
+	public void testGenerationFile() {
+		IArtifactDescriptor ad = PublisherHelper.createArtifactDescriptor(new ArtifactKey("classifierTest", "idTest", new Version(1, 0, 0)), getTestData("Artifact to generate from", "testData/artifactRepo/simpleWithMD5/plugins/aaPlugin_1.0.0.jar"));
+		assertEquals("50d4ea58b02706ab373a908338877e02", ad.getProperty(IArtifactDescriptor.DOWNLOAD_MD5));
+	}
+
+	public void testGenerationFile2() {
+		IArtifactDescriptor ad = MetadataGeneratorHelper.createArtifactDescriptor(new ArtifactKey("classifierTest", "idTest", new Version(1, 0, 0)), getTestData("Artifact to generate from", "testData/artifactRepo/simpleWithMD5/plugins/aaPlugin_1.0.0.jar"), true, false);
+		assertEquals("50d4ea58b02706ab373a908338877e02", ad.getProperty(IArtifactDescriptor.DOWNLOAD_MD5));
+	}
+
+	public void testGenerationFolder() {
+		IArtifactDescriptor ad = PublisherHelper.createArtifactDescriptor(new ArtifactKey("classifierTest", "idTest", new Version(1, 0, 0)), getTestData("Artifact to generate from", "testData/artifactRepo/simpleWithMD5/plugins/"));
+		assertNull(ad.getProperty(IArtifactDescriptor.DOWNLOAD_MD5));
+	}
+
+	public void testGenerationFolder2() {
+		IArtifactDescriptor ad = MetadataGeneratorHelper.createArtifactDescriptor(new ArtifactKey("classifierTest", "idTest", new Version(1, 0, 0)), getTestData("Artifact to generate from", "testData/artifactRepo/simpleWithMD5/plugins/"), true, false);
+		assertNull(ad.getProperty(IArtifactDescriptor.DOWNLOAD_MD5));
+	}
+
+	public void testGenerationNoFolder() {
+		IArtifactDescriptor ad = PublisherHelper.createArtifactDescriptor(new ArtifactKey("classifierTest", "idTest", new Version(1, 0, 0)), null);
+		assertNull(ad.getProperty(IArtifactDescriptor.DOWNLOAD_MD5));
+	}
+
+	public void testGenerationNoFolder2() {
+		IArtifactDescriptor ad = MetadataGeneratorHelper.createArtifactDescriptor(new ArtifactKey("classifierTest", "idTest", new Version(1, 0, 0)), null, true, false);
+		assertNull(ad.getProperty(IArtifactDescriptor.DOWNLOAD_MD5));
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/simpleWithMD5/artifacts.xml b/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/simpleWithMD5/artifacts.xml
new file mode 100644
index 0000000..ddd4914
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/simpleWithMD5/artifacts.xml
@@ -0,0 +1,122 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<?artifactRepository class='org.eclipse.equinox.internal.p2.artifact.repository.simple.SimpleArtifactRepository' version='1.0.0'?>
+<repository name='file:/C:/1target/provmiddle/aaTestSite/ - artifacts' type='org.eclipse.equinox.p2.artifact.repository.simpleRepository' version='1'>
+  <properties size='2'>
+    <property name='p2.compressed' value='false'/>
+    <property name='p2.timestamp' value='1218734853468'/>
+    <property name='publishPackFilesAsSiblings' value='true'/>
+  </properties>
+  <mappings size='3'>
+    <rule filter='(&amp; (classifier=osgi.bundle) (format=packed))' output='${repoUrl}/plugins/${id}_${version}.jar.pack.gz'/>
+    <rule filter='(&amp; (classifier=osgi.bundle))' output='${repoUrl}/plugins/${id}_${version}.jar'/>
+    <rule filter='(&amp; (classifier=binary))' output='${repoUrl}/binary/${id}_${version}'/>
+    <rule filter='(&amp; (classifier=org.eclipse.update.feature))' output='${repoUrl}/features/${id}_${version}.jar'/>
+  </mappings>
+  <artifacts size='2'>
+    <artifact classifier='osgi.bundle' id='aaPlugin' version='1.0.0'>
+      <properties size='4'>
+        <property name='artifact.size' value='469'/>
+        <property name='download.size' value='469'/>
+        <property name='download.contentType' value='application/zip'/>
+        <property name='download.md5' value='50d4ea58b02706ab373a908338877e02'/>
+      </properties>
+    </artifact>
+    <artifact classifier='org.eclipse.update.feature' id='aaFeature' version='1.0.0'>
+      <properties size='2'>
+        <property name='artifact.size' value='670'/>
+        <property name='download.size' value='670'/>
+        <property name='download.md5' value='8eb801058775b83c00ca37082ce57b47'/>
+      </properties>
+    </artifact>
+    <artifact classifier='osgi.bundle' id='bogusbbPlugin' version='1.0.0'>
+      <properties size='3'>
+        <property name='artifact.size' value='469'/>
+        <property name='download.size' value='469'/>
+        <property name='download.contentType' value='application/zip'/>
+        <property name='download.md5' value='bogusMD5'/>
+      </properties>
+    </artifact>
+        <artifact classifier='osgi.bundle' id='bogusccPlugin' version='1.0.0'>
+      <properties size='3'>
+        <property name='artifact.size' value='469'/>
+        <property name='download.size' value='469'/>
+        <property name='download.contentType' value='application/zip'/>
+        <property name='download.md5' value='50d4ea58b02706ab373a908338877e01'/>
+      </properties>
+    </artifact>
+    
+    <artifact classifier='osgi.bundle' id='org.eclipse.core.filebuffers' version='3.4.0.v20080603-2000'>
+      <processing size='2'>
+        <step id='org.eclipse.equinox.p2.processing.MD5Verifier' required='true' data='download.md5'/>
+        <step id='org.eclipse.equinox.p2.processing.Pack200Unpacker' required='true'/>
+        <step id='org.eclipse.equinox.p2.processing.MD5Verifier' required='true' data='artifact.md5'/> 
+      </processing>
+      <properties size='3'>
+        <property name='artifact.size' value='83200'/>
+        <property name='download.size' value='47275'/>
+        <property name='format' value='packed'/>
+        <property name='download.md5' value='80eefca900b225ba9821f9b2362f9ead'/>
+        <property name='artifact.md5' value='48b39605d3e8325bdeb92c61d036ee61'/>
+      </properties>
+    </artifact>
+    
+    <artifact classifier='osgi.bundle' id='bogusorg.eclipse.core.filebuffers1' version='3.4.0.v20080603-2000'>
+      <processing size='2'>
+        <step id='org.eclipse.equinox.p2.processing.MD5Verifier' required='true' data='artifact.md5'/>
+        <step id='org.eclipse.equinox.p2.processing.Pack200Unpacker' required='true'/>
+        <step id='org.eclipse.equinox.p2.processing.MD5Verifier' required='true' data='download.md5'/> 
+      </processing>
+      <properties size='3'>
+        <property name='artifact.size' value='83200'/>
+        <property name='download.size' value='47275'/>
+        <property name='format' value='packed'/>
+        <property name='download.md5' value='80eefca900b225ba9821f9b2362f9ead'/>
+        <property name='artifact.md5' value='48b39605d3e8325bdeb92c61d036ee61'/>
+      </properties>
+    </artifact>
+    
+    <artifact classifier='osgi.bundle' id='bogusorg.eclipse.core.filebuffers2' version='3.4.0.v20080603-2000'>
+      <processing size='2'>
+        <step id='org.eclipse.equinox.p2.processing.MD5Verifier' required='true' data='download.md5'/>
+        <step id='org.eclipse.equinox.p2.processing.Pack200Unpacker' required='true'/>
+        <step id='org.eclipse.equinox.p2.processing.MD5Verifier' required='true' data='download.md5'/> 
+      </processing>
+      <properties size='3'>
+        <property name='artifact.size' value='83200'/>
+        <property name='download.size' value='47275'/>
+        <property name='format' value='packed'/>
+        <property name='download.md5' value='80eefca900b225ba9821f9b2362f9ead'/>
+        <property name='artifact.md5' value='48b39605d3e8325bdeb92c61d036ee61'/>
+      </properties>
+    </artifact>
+    
+    <artifact classifier='osgi.bundle' id='bogusorg.eclipse.core.filebuffers3' version='3.4.0.v20080603-2000'>
+      <processing size='2'>
+        <step id='org.eclipse.equinox.p2.processing.MD5Verifier' required='true' data='artifact.md5'/>
+        <step id='org.eclipse.equinox.p2.processing.Pack200Unpacker' required='true'/>
+        <step id='org.eclipse.equinox.p2.processing.MD5Verifier' required='true' data='artifact.md5'/> 
+      </processing>
+      <properties size='3'>
+        <property name='artifact.size' value='83200'/>
+        <property name='download.size' value='47275'/>
+        <property name='format' value='packed'/>
+        <property name='download.md5' value='80eefca900b225ba9821f9b2362f9ead'/>
+        <property name='artifact.md5' value='48b39605d3e8325bdeb92c61d036ee61'/>
+      </properties>
+    </artifact>
+    
+    <artifact classifier='osgi.bundle' id='org.eclipse.core.filebuffers4' version='3.4.0.v20080603-2000'>
+      <processing size='2'>
+        <step id='org.eclipse.equinox.p2.processing.MD5Verifier' required='true' data='80eefca900b225ba9821f9b2362f9ead'/>
+        <step id='org.eclipse.equinox.p2.processing.Pack200Unpacker' required='true'/>
+        <step id='org.eclipse.equinox.p2.processing.MD5Verifier' required='true' data='48b39605d3e8325bdeb92c61d036ee61'/> 
+      </processing>
+      <properties size='3'>
+        <property name='artifact.size' value='83200'/>
+        <property name='download.size' value='47275'/>
+        <property name='format' value='packed'/>
+      </properties>
+    </artifact>
+    
+  </artifacts>
+</repository>
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/simpleWithMD5/features/aaFeature_1.0.0.jar b/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/simpleWithMD5/features/aaFeature_1.0.0.jar
new file mode 100644
index 0000000..f800a9a
Binary files /dev/null and b/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/simpleWithMD5/features/aaFeature_1.0.0.jar differ
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/simpleWithMD5/plugins/aaPlugin_1.0.0.jar b/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/simpleWithMD5/plugins/aaPlugin_1.0.0.jar
new file mode 100644
index 0000000..65ff62b
Binary files /dev/null and b/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/simpleWithMD5/plugins/aaPlugin_1.0.0.jar differ
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/simpleWithMD5/plugins/bogusbbPlugin_1.0.0.jar b/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/simpleWithMD5/plugins/bogusbbPlugin_1.0.0.jar
new file mode 100644
index 0000000..65ff62b
Binary files /dev/null and b/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/simpleWithMD5/plugins/bogusbbPlugin_1.0.0.jar differ
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/simpleWithMD5/plugins/bogusccPlugin_1.0.0.jar b/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/simpleWithMD5/plugins/bogusccPlugin_1.0.0.jar
new file mode 100644
index 0000000..65ff62b
Binary files /dev/null and b/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/simpleWithMD5/plugins/bogusccPlugin_1.0.0.jar differ
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/simpleWithMD5/plugins/org.eclipse.core.filebuffers2_3.4.0.v20080603-2000.jar.pack.gz b/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/simpleWithMD5/plugins/org.eclipse.core.filebuffers2_3.4.0.v20080603-2000.jar.pack.gz
new file mode 100644
index 0000000..5b34405
Binary files /dev/null and b/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/simpleWithMD5/plugins/org.eclipse.core.filebuffers2_3.4.0.v20080603-2000.jar.pack.gz differ
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/simpleWithMD5/plugins/org.eclipse.core.filebuffers3_3.4.0.v20080603-2000.jar.pack.gz b/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/simpleWithMD5/plugins/org.eclipse.core.filebuffers3_3.4.0.v20080603-2000.jar.pack.gz
new file mode 100644
index 0000000..5b34405
Binary files /dev/null and b/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/simpleWithMD5/plugins/org.eclipse.core.filebuffers3_3.4.0.v20080603-2000.jar.pack.gz differ
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/simpleWithMD5/plugins/org.eclipse.core.filebuffers4_3.4.0.v20080603-2000.jar.pack.gz b/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/simpleWithMD5/plugins/org.eclipse.core.filebuffers4_3.4.0.v20080603-2000.jar.pack.gz
new file mode 100644
index 0000000..5b34405
Binary files /dev/null and b/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/simpleWithMD5/plugins/org.eclipse.core.filebuffers4_3.4.0.v20080603-2000.jar.pack.gz differ
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/simpleWithMD5/plugins/org.eclipse.core.filebuffers_3.4.0.v20080603-2000.jar.pack.gz b/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/simpleWithMD5/plugins/org.eclipse.core.filebuffers_3.4.0.v20080603-2000.jar.pack.gz
new file mode 100644
index 0000000..5b34405
Binary files /dev/null and b/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/simpleWithMD5/plugins/org.eclipse.core.filebuffers_3.4.0.v20080603-2000.jar.pack.gz differ
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/simpleWithMD5/readme.txt b/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/simpleWithMD5/readme.txt
new file mode 100644
index 0000000..6fcc19b
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/simpleWithMD5/readme.txt
@@ -0,0 +1,2 @@
+This is a very simple artifact repository containing a single group IU (a feature), and
+a single bundle IU. This repository is used by ArtifactRepositoryManagerTest
\ No newline at end of file
commit a10b993845dc1883ce91bad0b945db96acf75030
Author: Pascal Rapicault <prapicau>
Date:   Tue Oct 21 00:22:45 2008 +0000

    Bug 222870 - Enabled MD5 processing step

2	3	bundles/org.eclipse.equinox.p2.artifact.processors/META-INF/MANIFEST.MF
0	5	bundles/org.eclipse.equinox.p2.artifact.processors/plugin.xml
0	83	bundles/org.eclipse.equinox.p2.artifact.processors/src/org/eclipse/equinox/internal/p2/artifact/processors/verifier/MD5Verifier.java
3	0	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/processors/md5/messages.properties
2	2	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
43	0	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/spi/p2/publisher/PublisherHelper.java
1	2	bundles/org.eclipse.equinox.p2.tests.optimizers/META-INF/MANIFEST.MF
diff --git a/bundles/org.eclipse.equinox.p2.artifact.processors/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.artifact.processors/META-INF/MANIFEST.MF
index b07bc2d..d93837d 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.processors/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.artifact.processors/META-INF/MANIFEST.MF
@@ -2,7 +2,7 @@ Manifest-Version: 1.0
 Bundle-ManifestVersion: 2
 Bundle-Name: %pluginName
 Bundle-SymbolicName: org.eclipse.equinox.p2.artifact.processors;singleton:=true
-Bundle-Version: 1.0.0.qualifier
+Bundle-Version: 1.0.100.qualifier
 Bundle-Localization: plugin
 Bundle-RequiredExecutionEnvironment: CDC-1.1/Foundation-1.1,
  J2SE-1.4
@@ -25,7 +25,6 @@ Import-Package: ie.wombat.jbdiff,
 Bundle-Vendor: %providerName
 Export-Package: org.eclipse.equinox.internal.p2.artifact.processors;x-internal:=true,
  org.eclipse.equinox.internal.p2.artifact.processors.jardelta;x-internal:=true,
- org.eclipse.equinox.internal.p2.artifact.processors.jbdiff;x-internal:=true,
- org.eclipse.equinox.internal.p2.artifact.processors.verifier;x-internal:=true
+ org.eclipse.equinox.internal.p2.artifact.processors.jbdiff;x-internal:=true
 Bundle-Activator: org.eclipse.equinox.internal.p2.artifact.processors.Activator
 Eclipse-LazyStart: true
diff --git a/bundles/org.eclipse.equinox.p2.artifact.processors/plugin.xml b/bundles/org.eclipse.equinox.p2.artifact.processors/plugin.xml
index 94a7003..2b08361 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.processors/plugin.xml
+++ b/bundles/org.eclipse.equinox.p2.artifact.processors/plugin.xml
@@ -16,9 +16,4 @@
 			id="org.eclipse.equinox.p2.processing.JBPatchZipStep">
 		<step class="org.eclipse.equinox.internal.p2.artifact.processors.jbdiff.JBPatchZipStep"/>
 	</extension>
-	<extension
-			point="org.eclipse.equinox.p2.artifact.repository.processingSteps"
-			id="org.eclipse.equinox.p2.processing.MD5Verifier">
-		<step class="org.eclipse.equinox.internal.p2.artifact.processors.verifier.MD5Verifier"/>
-	</extension>
 </plugin>
diff --git a/bundles/org.eclipse.equinox.p2.artifact.processors/src/org/eclipse/equinox/internal/p2/artifact/processors/verifier/MD5Verifier.java b/bundles/org.eclipse.equinox.p2.artifact.processors/src/org/eclipse/equinox/internal/p2/artifact/processors/verifier/MD5Verifier.java
deleted file mode 100644
index 11161de..0000000
--- a/bundles/org.eclipse.equinox.p2.artifact.processors/src/org/eclipse/equinox/internal/p2/artifact/processors/verifier/MD5Verifier.java
+++ /dev/null
@@ -1,83 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007 compeople AG and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- * 	compeople AG (Stefan Liebig) - initial API and implementation
- * 	IBM Corporation - ongoing development
- *******************************************************************************/
-package org.eclipse.equinox.internal.p2.artifact.processors.verifier;
-
-import java.io.IOException;
-import java.security.MessageDigest;
-import java.security.NoSuchAlgorithmException;
-import org.eclipse.core.runtime.IStatus;
-import org.eclipse.core.runtime.Status;
-import org.eclipse.equinox.internal.p2.artifact.processors.Activator;
-import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactDescriptor;
-import org.eclipse.equinox.internal.provisional.p2.artifact.repository.processing.ProcessingStep;
-import org.eclipse.equinox.internal.provisional.p2.artifact.repository.processing.ProcessingStepDescriptor;
-
-public class MD5Verifier extends ProcessingStep {
-
-	protected String md5Test;
-	private MessageDigest md5;
-
-	public MD5Verifier() {
-		super();
-	}
-
-	public MD5Verifier(String md5Test) {
-		super();
-		this.md5Test = md5Test;
-		basicInitialize(null);
-	}
-
-	public void initialize(ProcessingStepDescriptor descriptor, IArtifactDescriptor context) {
-		super.initialize(descriptor, context);
-		String data = descriptor.getData();
-		if (data.equals("download"))
-			md5Test = context.getProperty(IArtifactDescriptor.DOWNLOAD_MD5);
-		else if (data.equals("artifact"))
-			md5Test = context.getProperty(IArtifactDescriptor.ARTIFACT_MD5);
-		else
-			md5Test = data;
-		basicInitialize(descriptor);
-	}
-
-	private void basicInitialize(ProcessingStepDescriptor descriptor) {
-		int code = (descriptor == null) ? IStatus.ERROR : descriptor.isRequired() ? IStatus.ERROR : IStatus.INFO;
-		if (md5Test == null || md5Test.length() != 32)
-			setStatus(new Status(code, Activator.ID, "MD5 value not available or incorrect size"));
-		try {
-			md5 = MessageDigest.getInstance("MD5");
-		} catch (NoSuchAlgorithmException e) {
-			setStatus(new Status(code, Activator.ID, "Could not create MD5 algorithm", e));
-		}
-	}
-
-	public void write(int b) throws IOException {
-		if (b != -1)
-			md5.update((byte) b);
-		getDestination().write(b);
-	}
-
-	public void close() throws IOException {
-		super.close();
-
-		byte[] digest = md5.digest();
-		StringBuffer buf = new StringBuffer();
-		for (int i = 0; i < digest.length; i++) {
-			if ((digest[i] & 0xFF) < 0x10)
-				buf.append('0');
-			buf.append(Integer.toHexString(digest[i] & 0xFF));
-		}
-
-		// if the hashes don't line up set the status to error.
-		if (!buf.toString().equals(md5Test))
-			setStatus(new Status(IStatus.ERROR, Activator.ID, "Error processing stream. MD5 hash is not as expected."));
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/processors/md5/messages.properties b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/processors/md5/messages.properties
new file mode 100644
index 0000000..426b8a0
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/processors/md5/messages.properties
@@ -0,0 +1,3 @@
+Error_invalid_hash=MD5 value not available or incorrect size, {0}.
+Error_MD5_unavailable=Could not create MD5 algorithm.
+Error_unexpected_hash=Error while processing stream. MD5 hash is not as expected. Expected: {0} and found {1}.
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
index 6da8b54..4a815e9 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
@@ -35,7 +35,7 @@ public class SimpleArtifactRepository extends AbstractArtifactRepository impleme
 	 */
 	public static final boolean MIRRORS_ENABLED = !"false".equals(Activator.getContext().getProperty("eclipse.p2.mirrors")); //$NON-NLS-1$//$NON-NLS-2$
 
-	public static final boolean enableMD5 = !"false".equals(Activator.getContext().getProperty("eclipse.noMD5Check")); //$NON-NLS-1$//$NON-NLS-2$
+	public static final boolean MD5_CHECK_ENABLED = !"false".equals(Activator.getContext().getProperty("eclipse.p2.MD5Check")); //$NON-NLS-1$//$NON-NLS-2$
 
 	/** 
 	 * The key for a integer property controls the maximum number
@@ -327,7 +327,7 @@ public class SimpleArtifactRepository extends AbstractArtifactRepository impleme
 		ArrayList steps = new ArrayList();
 		if (IArtifactDescriptor.TYPE_ZIP.equals(descriptor.getProperty(IArtifactDescriptor.DOWNLOAD_CONTENTTYPE)))
 			steps.add(new ZipVerifierStep());
-		if (enableMD5 && descriptor.getProperty(IArtifactDescriptor.DOWNLOAD_MD5) != null)
+		if (MD5_CHECK_ENABLED && descriptor.getProperty(IArtifactDescriptor.DOWNLOAD_MD5) != null)
 			steps.add(new MD5Verifier(descriptor.getProperty(IArtifactDescriptor.DOWNLOAD_MD5)));
 		// Add steps here if needed
 		if (steps.isEmpty())
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/spi/p2/publisher/PublisherHelper.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/spi/p2/publisher/PublisherHelper.java
index 3a0ba7f..d17fb31 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/spi/p2/publisher/PublisherHelper.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/spi/p2/publisher/PublisherHelper.java
@@ -15,6 +15,8 @@ package org.eclipse.equinox.spi.p2.publisher;
 import java.io.*;
 import java.net.URI;
 import java.net.URISyntaxException;
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
 import java.util.*;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipFile;
@@ -143,9 +145,50 @@ public class PublisherHelper {
 			// TODO - this is wrong but I'm testing a work-around for bug 205842
 			result.setProperty(IArtifactDescriptor.DOWNLOAD_SIZE, Long.toString(pathOnDisk.length()));
 		}
+		String md5 = computeMD5(pathOnDisk);
+		if (md5 != null)
+			result.setProperty(IArtifactDescriptor.DOWNLOAD_MD5, md5);
 		return result;
 	}
 
+	private static String computeMD5(File file) {
+		if (file == null || file.isDirectory() || !file.exists())
+			return null;
+		MessageDigest md5Checker;
+		try {
+			md5Checker = MessageDigest.getInstance("MD5"); //$NON-NLS-1$
+		} catch (NoSuchAlgorithmException e) {
+			return null;
+		}
+		InputStream fis = null;
+		try {
+			fis = new BufferedInputStream(new FileInputStream(file));
+			int read = -1;
+			while ((read = fis.read()) != -1) {
+				md5Checker.update((byte) read);
+			}
+			byte[] digest = md5Checker.digest();
+			StringBuffer buf = new StringBuffer();
+			for (int i = 0; i < digest.length; i++) {
+				if ((digest[i] & 0xFF) < 0x10)
+					buf.append('0');
+				buf.append(Integer.toHexString(digest[i] & 0xFF));
+			}
+			return buf.toString();
+		} catch (FileNotFoundException e) {
+			return null;
+		} catch (IOException e) {
+			return null;
+		} finally {
+			if (fis != null)
+				try {
+					fis.close();
+				} catch (IOException e) {
+					// ignore
+				}
+		}
+	}
+
 	/**
 	 * @deprecated moved to AbstractPublishingAction
 	 */
diff --git a/bundles/org.eclipse.equinox.p2.tests.optimizers/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.tests.optimizers/META-INF/MANIFEST.MF
index b960023..d5ebaec 100644
--- a/bundles/org.eclipse.equinox.p2.tests.optimizers/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.tests.optimizers/META-INF/MANIFEST.MF
@@ -2,7 +2,7 @@ Manifest-Version: 1.0
 Bundle-ManifestVersion: 2
 Bundle-Name: p2 Optimizers Test Plug-in
 Bundle-SymbolicName: org.eclipse.equinox.p2.tests.optimizers;singleton:=true
-Bundle-Version: 1.0.0.qualifier
+Bundle-Version: 1.0.100.qualifier
 Bundle-RequiredExecutionEnvironment: J2SE-1.4
 Require-Bundle: org.eclipse.equinox.common;bundle-version="3.4.0",
  org.junit;bundle-version="3.8.2"
@@ -17,7 +17,6 @@ Import-Package: ie.wombat.jbdiff,
  org.eclipse.equinox.internal.p2.artifact.processors.jardelta,
  org.eclipse.equinox.internal.p2.artifact.processors.jbdiff,
  org.eclipse.equinox.internal.p2.artifact.processors.pack200,
- org.eclipse.equinox.internal.p2.artifact.processors.verifier,
  org.eclipse.equinox.internal.p2.artifact.repository,
  org.eclipse.equinox.internal.p2.core.helpers,
  org.eclipse.equinox.internal.p2.metadata,

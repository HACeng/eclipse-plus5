commit 535306efaa07b556b58015b3f5a04e4099334536
Author: John Arthorne <johna>
Date:   Fri Oct 10 18:08:59 2008 +0000

    Bug 250457 Compatibility of URLs encoded in content.xml, artifacts.xml

1	0	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/XMLConstants.java
27	9	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataParser.java
1	0	bundles/org.eclipse.equinox.p2.tests/All p2 Tests.launch
35	2	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/MetadataRepositoryManagerTest.java
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/XMLConstants.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/XMLConstants.java
index 607b846..1db53d9 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/XMLConstants.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/XMLConstants.java
@@ -42,6 +42,7 @@ public interface XMLConstants {
 	public static final String DESCRIPTION_ATTRIBUTE = "description"; //$NON-NLS-1$
 	public static final String PROVIDER_ATTRIBUTE = "provider"; //$NON-NLS-1$
 	public static final String URL_ATTRIBUTE = "url"; //$NON-NLS-1$
+	public static final String URI_ATTRIBUTE = "uri"; //$NON-NLS-1$
 
 	// Constants for the license and copyright elements
 	public static final String LICENSES_ELEMENT = "licenses"; //$NON-NLS-1$
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataParser.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataParser.java
index 999093c..ced1cdb 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataParser.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataParser.java
@@ -11,10 +11,10 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.metadata.repository.io;
 
-import java.net.URI;
-import java.net.URISyntaxException;
+import java.net.*;
 import java.util.*;
 import org.eclipse.equinox.internal.p2.core.helpers.OrderedProperties;
+import org.eclipse.equinox.internal.p2.core.helpers.URIUtil;
 import org.eclipse.equinox.internal.p2.metadata.ArtifactKey;
 import org.eclipse.equinox.internal.p2.persistence.XMLParser;
 import org.eclipse.equinox.internal.provisional.p2.metadata.*;
@@ -56,18 +56,36 @@ public abstract class MetadataParser extends XMLParser implements XMLConstants {
 
 	protected class RepositoryReferenceHandler extends AbstractHandler {
 
-		private final String[] required = new String[] {URL_ATTRIBUTE, TYPE_ATTRIBUTE, OPTIONS_ATTRIBUTE};
+		private final String[] required = new String[] {TYPE_ATTRIBUTE, OPTIONS_ATTRIBUTE};
 
 		public RepositoryReferenceHandler(AbstractHandler parentHandler, Attributes attributes, Set references) {
 			super(parentHandler, REPOSITORY_REFERENCE_ELEMENT);
 			String[] values = parseRequiredAttributes(attributes, required);
+			int type = checkInteger(elementHandled, TYPE_ATTRIBUTE, values[0]);
+			int options = checkInteger(elementHandled, OPTIONS_ATTRIBUTE, values[1]);
+			URI location = getURIAttribute(attributes);
+			if (location != null)
+				references.add(new RepositoryReference(location, type, options));
+		}
+
+		/**
+		 * Parses a repository location, accounting for backwards compatibility.
+		 * In p2 1.0 we stored URLs, in 1.1 and later we store URIs.
+		 */
+		private URI getURIAttribute(Attributes attributes) {
+			String location = attributes.getValue(URI_ATTRIBUTE);
 			try {
-				int type = checkInteger(elementHandled, TYPE_ATTRIBUTE, values[1]);
-				int options = checkInteger(elementHandled, OPTIONS_ATTRIBUTE, values[2]);
-				references.add(new RepositoryReference(new URI(values[0]), type, options));
+				if (location != null)
+					return new URI(location);
+				//if there is no URI attribute, then the URL attribute is required
+				location = parseRequiredAttributes(attributes, new String[] {URL_ATTRIBUTE})[0];
+				return URIUtil.toURI(new URL(location));
+			} catch (MalformedURLException e) {
+				invalidAttributeValue(elementHandled, URL_ATTRIBUTE, location);
 			} catch (URISyntaxException e) {
-				invalidAttributeValue(elementHandled, URL_ATTRIBUTE, values[0]);
+				invalidAttributeValue(elementHandled, URL_ATTRIBUTE, location);
 			}
+			return null;
 		}
 
 		public void startElement(String name, Attributes attributes) {
@@ -355,10 +373,10 @@ public abstract class MetadataParser extends XMLParser implements XMLConstants {
 
 		protected void finished() {
 			if (children != null) {
-			scopes.add(children.getRequiredCapabilities());
+				scopes.add(children.getRequiredCapabilities());
+			}
 		}
 	}
-	}
 
 	protected class RequirementsChangeHandler extends AbstractHandler {
 		private List requirementChanges;
diff --git a/bundles/org.eclipse.equinox.p2.tests/All p2 Tests.launch b/bundles/org.eclipse.equinox.p2.tests/All p2 Tests.launch
index 2eda901..6ad2fe9 100644
--- a/bundles/org.eclipse.equinox.p2.tests/All p2 Tests.launch	
+++ b/bundles/org.eclipse.equinox.p2.tests/All p2 Tests.launch	
@@ -6,6 +6,7 @@
 <booleanAttribute key="automaticAdd" value="true"/>
 <booleanAttribute key="automaticValidate" value="false"/>
 <stringAttribute key="bootstrap" value=""/>
+<stringAttribute key="checked" value="[NONE]"/>
 <booleanAttribute key="clearConfig" value="true"/>
 <booleanAttribute key="clearws" value="true"/>
 <booleanAttribute key="clearwslog" value="false"/>
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/MetadataRepositoryManagerTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/MetadataRepositoryManagerTest.java
index f2a0b03..8c7d9f2 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/MetadataRepositoryManagerTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/MetadataRepositoryManagerTest.java
@@ -20,9 +20,10 @@ import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.core.helpers.URLUtil;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.equinox.internal.provisional.p2.core.eventbus.ProvisioningListener;
+import org.eclipse.equinox.internal.provisional.p2.core.eventbus.SynchronousProvisioningListener;
 import org.eclipse.equinox.internal.provisional.p2.core.location.AgentLocation;
-import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
-import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepositoryManager;
+import org.eclipse.equinox.internal.provisional.p2.core.repository.*;
 import org.eclipse.equinox.internal.provisional.p2.metadata.query.InstallableUnitQuery;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepositoryManager;
@@ -248,6 +249,38 @@ public class MetadataRepositoryManagerTest extends AbstractProvisioningTest {
 	}
 
 	/**
+	 * Repository references were originally encoded as URL, but we now encode
+	 * as URI. This test ensures we handle both old and new references.
+	 */
+	public void testRepositoryReferenceCompatibility() throws URISyntaxException {
+		File site = getTestData("Repository", "/testData/metadataRepo/unencodedreporeferences/");
+		URI location = site.toURI();
+		final List references = new ArrayList();
+		ProvisioningListener referenceCollector = new SynchronousProvisioningListener() {
+			public void notify(EventObject o) {
+				if (!(o instanceof RepositoryEvent))
+					return;
+				RepositoryEvent event = (RepositoryEvent) o;
+				if (event.getKind() == RepositoryEvent.DISCOVERED)
+					references.add(event.getRepositoryLocation());
+			}
+		};
+		getEventBus().addListener(referenceCollector);
+		try {
+			manager.loadRepository(location, getMonitor());
+		} catch (ProvisionException e) {
+			fail("=.99", e);
+		} finally {
+			getEventBus().removeListener(referenceCollector);
+		}
+		assertEquals("1.0", 4, references.size());
+		assertTrue("1.1", references.contains(new URI("http://download.eclipse.org/url/with/spaces/a%20b")));
+		assertTrue("1.2", references.contains(new URI("file:/c:/tmp/url%20with%20spaces/")));
+		assertTrue("1.3", references.contains(new URI("http://download.eclipse.org/uri/with/spaces/a%20b")));
+		assertTrue("1.4", references.contains(new URI("file:/c:/tmp/uri%20with%20spaces/")));
+	}
+
+	/**
 	 * Tests that trailing slashes do not affect repository identity.
 	 */
 	public void testTrailingSlashes() {
commit 3fee9a24eb60754cc740ef5ce4f3ab50e4381f28
Author: John Arthorne <johna>
Date:   Fri Oct 10 20:01:02 2008 +0000

    Bug 250457 Compatibility of URLs encoded in content.xml, artifacts.xml

28	2	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/XMLParser.java
23	6	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/MetadataGeneratorHelper.java
1	1	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java
8	29	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataParser.java
5	5	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataWriter.java
16	20	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/Copyright.java
14	18	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/License.java
0	9	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/MetadataFactory.java
23	9	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/FeaturesAction.java
23	6	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/spi/p2/publisher/PublisherHelper.java
1	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
3	7	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/IUPropertyUtils.java
9	5	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/IUCopyrightPropertyPage.java
8	5	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/IULicensePropertyPage.java
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/XMLParser.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/XMLParser.java
index 3be22a4..d009935 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/XMLParser.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/XMLParser.java
@@ -10,20 +10,21 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.persistence;
 
+import java.net.*;
 import java.util.List;
 import java.util.StringTokenizer;
 import javax.xml.parsers.*;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.Activator;
 import org.eclipse.equinox.internal.p2.core.StringPool;
-import org.eclipse.equinox.internal.p2.core.helpers.OrderedProperties;
-import org.eclipse.equinox.internal.p2.core.helpers.Tracing;
+import org.eclipse.equinox.internal.p2.core.helpers.*;
 import org.eclipse.osgi.service.resolver.VersionRange;
 import org.eclipse.osgi.util.NLS;
 import org.osgi.framework.BundleContext;
 import org.osgi.framework.Version;
 import org.osgi.util.tracker.ServiceTracker;
 import org.xml.sax.*;
+import org.xml.sax.ContentHandler;
 import org.xml.sax.helpers.DefaultHandler;
 
 public abstract class XMLParser extends DefaultHandler implements XMLConstants {
@@ -268,6 +269,31 @@ public abstract class XMLParser extends DefaultHandler implements XMLConstants {
 		}
 
 		/**
+		 * In p2 1.0 we stored URLs, in 1.1 and later we store URIs. This method will
+		 * first check for a URI, and then resort to looking for a URL attribute for
+		 * backwards compatibility.
+		 * @param attributes The attributes to parse
+		 * @param required If true, an exception is thrown if no URI or URL attribute is present
+		 */
+		protected URI parseURIAttribute(Attributes attributes, boolean required) {
+			String location = parseOptionalAttribute(attributes, URI_ATTRIBUTE);
+			try {
+				if (location != null)
+					return new URI(location);
+				if (required)
+					location = parseRequiredAttributes(attributes, new String[] {URL_ATTRIBUTE})[0];
+				else
+					location = parseOptionalAttribute(attributes, URL_ATTRIBUTE);
+				return URIUtil.toURI(new URL(location));
+			} catch (MalformedURLException e) {
+				invalidAttributeValue(elementHandled, URL_ATTRIBUTE, location);
+			} catch (URISyntaxException e) {
+				invalidAttributeValue(elementHandled, URL_ATTRIBUTE, location);
+			}
+			return null;
+		}
+
+		/**
 		 * Parse the attributes of an element with two required attributes.
 		 */
 		protected String[] parseRequiredAttributes(Attributes attributes, String name1, String name2) {
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/MetadataGeneratorHelper.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/MetadataGeneratorHelper.java
index dc0b816..85f972e 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/MetadataGeneratorHelper.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/MetadataGeneratorHelper.java
@@ -12,11 +12,14 @@
 package org.eclipse.equinox.internal.provisional.p2.metadata.generator;
 
 import java.io.*;
+import java.net.URI;
+import java.net.URISyntaxException;
 import java.util.*;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipFile;
 import org.eclipse.core.runtime.Path;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
+import org.eclipse.equinox.internal.p2.core.helpers.URIUtil;
 import org.eclipse.equinox.internal.p2.metadata.ArtifactKey;
 import org.eclipse.equinox.internal.p2.metadata.InstallableUnit;
 import org.eclipse.equinox.internal.p2.metadata.generator.Activator;
@@ -653,9 +656,9 @@ public class MetadataGeneratorHelper {
 		if (feature.getProviderName() != null)
 			iu.setProperty(IInstallableUnit.PROP_PROVIDER, feature.getProviderName());
 		if (feature.getLicense() != null)
-			iu.setLicense(new License(feature.getLicenseURL(), feature.getLicense()));
+			iu.setLicense(new License(toURIOrNull(feature.getLicenseURL()), feature.getLicense()));
 		if (feature.getCopyright() != null)
-			iu.setCopyright(new Copyright(feature.getCopyrightURL(), feature.getCopyright()));
+			iu.setCopyright(new Copyright(toURIOrNull(feature.getCopyrightURL()), feature.getCopyright()));
 		if (feature.getApplication() != null)
 			iu.setProperty(UPDATE_FEATURE_APPLICATION_PROP, feature.getApplication());
 		if (feature.getPlugin() != null)
@@ -758,9 +761,9 @@ public class MetadataGeneratorHelper {
 		if (feature.getProviderName() != null)
 			iu.setProperty(IInstallableUnit.PROP_PROVIDER, feature.getProviderName());
 		if (feature.getLicense() != null)
-			iu.setLicense(new License(feature.getLicenseURL(), feature.getLicense()));
+			iu.setLicense(new License(toURIOrNull(feature.getLicenseURL()), feature.getLicense()));
 		if (feature.getCopyright() != null)
-			iu.setCopyright(new Copyright(feature.getCopyrightURL(), feature.getCopyright()));
+			iu.setCopyright(new Copyright(toURIOrNull(feature.getCopyrightURL()), feature.getCopyright()));
 		iu.setUpdateDescriptor(MetadataFactory.createUpdateDescriptor(id, new VersionRange(new Version(0, 0, 0), true, new Version(feature.getVersion()), false), IUpdateDescriptor.NORMAL, null));
 
 		FeatureEntry entries[] = feature.getEntries();
@@ -828,9 +831,9 @@ public class MetadataGeneratorHelper {
 		if (feature.getProviderName() != null)
 			iu.setProperty(IInstallableUnit.PROP_PROVIDER, feature.getProviderName());
 		if (feature.getLicense() != null)
-			iu.setLicense(new License(feature.getLicenseURL(), feature.getLicense()));
+			iu.setLicense(new License(toURIOrNull(feature.getLicenseURL()), feature.getLicense()));
 		if (feature.getCopyright() != null)
-			iu.setCopyright(new Copyright(feature.getCopyrightURL(), feature.getCopyright()));
+			iu.setCopyright(new Copyright(toURIOrNull(feature.getCopyrightURL()), feature.getCopyright()));
 		iu.setUpdateDescriptor(MetadataFactory.createUpdateDescriptor(id, new VersionRange(new Version(0, 0, 0), true, new Version(feature.getVersion()), false), IUpdateDescriptor.NORMAL, null));
 
 		FeatureEntry entries[] = feature.getEntries();
@@ -1299,6 +1302,20 @@ public class MetadataGeneratorHelper {
 		return result.toString();
 	}
 
+	/**
+	 * Returns a URI corresponding to the given URL in string form, or null
+	 * if a well formed URI could not be created.
+	 */
+	private static URI toURIOrNull(String url) {
+		if (url == null)
+			return null;
+		try {
+			return URIUtil.fromString(url);
+		} catch (URISyntaxException e) {
+			return null;
+		}
+	}
+
 	// Return a map from locale to property set for the manifest localizations
 	// from the given bundle directory and given bundle localization path/name
 	// manifest property value.
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java
index 2c02939..c3e1509 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java
@@ -160,7 +160,7 @@ public class MetadataRepositoryIO {
 
 		private void writeRepositoryReference(RepositoryReference reference) {
 			start(REPOSITORY_REFERENCE_ELEMENT);
-			attribute(URL_ATTRIBUTE, reference.Location.toString());
+			attribute(URI_ATTRIBUTE, reference.Location.toString());
 			attribute(TYPE_ATTRIBUTE, Integer.toString(reference.Type));
 			attribute(OPTIONS_ATTRIBUTE, Integer.toString(reference.Options));
 			end(REPOSITORY_REFERENCE_ELEMENT);
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataParser.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataParser.java
index ced1cdb..8164d84 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataParser.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataParser.java
@@ -11,10 +11,9 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.metadata.repository.io;
 
-import java.net.*;
+import java.net.URI;
 import java.util.*;
 import org.eclipse.equinox.internal.p2.core.helpers.OrderedProperties;
-import org.eclipse.equinox.internal.p2.core.helpers.URIUtil;
 import org.eclipse.equinox.internal.p2.metadata.ArtifactKey;
 import org.eclipse.equinox.internal.p2.persistence.XMLParser;
 import org.eclipse.equinox.internal.provisional.p2.metadata.*;
@@ -63,31 +62,11 @@ public abstract class MetadataParser extends XMLParser implements XMLConstants {
 			String[] values = parseRequiredAttributes(attributes, required);
 			int type = checkInteger(elementHandled, TYPE_ATTRIBUTE, values[0]);
 			int options = checkInteger(elementHandled, OPTIONS_ATTRIBUTE, values[1]);
-			URI location = getURIAttribute(attributes);
+			URI location = parseURIAttribute(attributes, true);
 			if (location != null)
 				references.add(new RepositoryReference(location, type, options));
 		}
 
-		/**
-		 * Parses a repository location, accounting for backwards compatibility.
-		 * In p2 1.0 we stored URLs, in 1.1 and later we store URIs.
-		 */
-		private URI getURIAttribute(Attributes attributes) {
-			String location = attributes.getValue(URI_ATTRIBUTE);
-			try {
-				if (location != null)
-					return new URI(location);
-				//if there is no URI attribute, then the URL attribute is required
-				location = parseRequiredAttributes(attributes, new String[] {URL_ATTRIBUTE})[0];
-				return URIUtil.toURI(new URL(location));
-			} catch (MalformedURLException e) {
-				invalidAttributeValue(elementHandled, URL_ATTRIBUTE, location);
-			} catch (URISyntaxException e) {
-				invalidAttributeValue(elementHandled, URL_ATTRIBUTE, location);
-			}
-			return null;
-		}
-
 		public void startElement(String name, Attributes attributes) {
 			invalidElement(name, attributes);
 		}
@@ -808,19 +787,19 @@ public abstract class MetadataParser extends XMLParser implements XMLConstants {
 	 */
 	protected class LicenseHandler extends TextHandler {
 
-		String url = null;
+		URI location = null;
 
 		private final List licenses;
 
 		public LicenseHandler(AbstractHandler parentHandler, Attributes attributes, List licenses) {
 			super(parentHandler, LICENSE_ELEMENT);
-			url = parseOptionalAttribute(attributes, URL_ATTRIBUTE);
+			location = parseURIAttribute(attributes, false);
 			this.licenses = licenses;
 		}
 
 		protected void finished() {
 			if (isValidXML()) {
-				licenses.add(new License(url, getText()));
+				licenses.add(new License(location, getText()));
 			}
 		}
 	}
@@ -830,17 +809,17 @@ public abstract class MetadataParser extends XMLParser implements XMLConstants {
 	 */
 	protected class CopyrightHandler extends TextHandler {
 
-		String url = null;
+		URI location = null;
 		private Copyright copyright;
 
 		public CopyrightHandler(AbstractHandler parentHandler, Attributes attributes) {
 			super(parentHandler, COPYRIGHT_ELEMENT);
-			url = parseOptionalAttribute(attributes, URL_ATTRIBUTE);
+			location = parseURIAttribute(attributes, false);
 		}
 
 		protected void finished() {
 			if (isValidXML()) {
-				copyright = new Copyright(url, getText());
+				copyright = new Copyright(location, getText());
 			}
 		}
 
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataWriter.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataWriter.java
index 7aea452..75379a4 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataWriter.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataWriter.java
@@ -254,8 +254,8 @@ public abstract class MetadataWriter extends XMLWriter implements XMLConstants {
 			start(LICENSES_ELEMENT);
 			attribute(COLLECTION_SIZE_ATTRIBUTE, 1);
 			start(LICENSE_ELEMENT);
-			if (license.getURL() != null)
-				attribute(URL_ATTRIBUTE, license.getURL().toExternalForm());
+			if (license.getLocation() != null)
+				attribute(URI_ATTRIBUTE, license.getLocation().toString());
 			cdata(license.getBody(), true);
 			end(LICENSE_ELEMENT);
 			end(LICENSES_ELEMENT);
@@ -266,10 +266,10 @@ public abstract class MetadataWriter extends XMLWriter implements XMLConstants {
 		if (copyright != null) {
 			start(COPYRIGHT_ELEMENT);
 			try {
-				if (copyright.getURL() != null)
-					attribute(URL_ATTRIBUTE, copyright.getURL().toExternalForm());
+				if (copyright.getLocation() != null)
+					attribute(URI_ATTRIBUTE, copyright.getLocation().toString());
 			} catch (IllegalStateException ise) {
-				LogHelper.log(new Status(IStatus.INFO, Activator.ID, "Error writing the copyright URL: " + copyright.getURL())); //$NON-NLS-1$
+				LogHelper.log(new Status(IStatus.INFO, Activator.ID, "Error writing the copyright URL: " + copyright.getLocation())); //$NON-NLS-1$
 			}
 			cdata(copyright.getBody(), true);
 			end(COPYRIGHT_ELEMENT);
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/Copyright.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/Copyright.java
index f4d1548..f69e4f0 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/Copyright.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/Copyright.java
@@ -10,55 +10,51 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.provisional.p2.metadata;
 
-import java.net.MalformedURLException;
-import java.net.URL;
+import java.net.URI;
 
 /**
  * The <code>Copyright</code> class represents a software copyright.  A copyright has 
- * required body text which may be the full text or an annotation.  An optional URL field can be specified
+ * required body text which may be the full text or a summary.  An optional location field can be specified
  * which links to full text.  
  */
 public class Copyright {
 	/**
-	 * The <code>body</code> contains the descriptive text for the coypright. This may
+	 * The <code>body</code> contains the descriptive text for the copyright. This may
 	 * be a summary for a copyright specified in a URL.
 	 */
 	private final String body;
 
 	/**
-	 * The <code>url</code> is the URL of the copyright.
+	 * The <code>location</code> is the location of a document containing a copyright notice.
 	 */
-	private URL url;
+	private URI location;
 
 	/**
-	 * Creates a new copyright.
-	 * The body should contain the full text of the copyright.
-	 * @param urlString the string describing the URL of the full copyright text, may be <code>null</code>
+	 * Creates a new copyright. The body must contain the full text of the copyright.
+	 * 
+	 * @param location the location of a document containing the copyright notice, or <code>null</code>
 	 * @param body the copyright body, cannot be <code>null</code>
 	 * @throws IllegalArgumentException when the <code>body</code> is <code>null</code>
 	 */
-	public Copyright(String urlString, String body) {
+	public Copyright(URI location, String body) {
 		if (body == null)
 			throw new IllegalArgumentException("body cannot be null"); //$NON-NLS-1$
-		if (urlString != null)
-			try {
-				url = new URL(urlString);
-			} catch (MalformedURLException e) {
-				url = null;
-			}
+		this.location = location;
 		this.body = body;
 	}
 
 	/**
-	 * Returns the URL containing the full description of the license.
-	 * May be <code>null</code>.
+	 * Returns the location of a document containing the copyright notice.
+	 * 
+	 * @return The location of the copyright notice, or <code>null</code>
 	 */
-	public URL getURL() {
-		return url;
+	public URI getLocation() {
+		return location;
 	}
 
 	/**
 	 * Returns the license body.
+	 * 
 	 * @return the license body, never <code>null</code>
 	 */
 	public String getBody() {
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/License.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/License.java
index 33d9ec9..d464bff 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/License.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/License.java
@@ -12,8 +12,7 @@ package org.eclipse.equinox.internal.provisional.p2.metadata;
 
 import java.io.UnsupportedEncodingException;
 import java.math.BigInteger;
-import java.net.MalformedURLException;
-import java.net.URL;
+import java.net.URI;
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
 
@@ -30,9 +29,9 @@ public class License {
 	private final String body;
 
 	/**
-	 * The <code>url</code> is the URL of the license.
+	 * The <code>location</code> is the URL of the license.
 	 */
-	private URL url;
+	private URI location;
 
 	/**
 	 * The <code>digest</code> is the cached message digest of the normalized body
@@ -41,30 +40,27 @@ public class License {
 
 	/**
 	 * Creates a new license object which is identified by users using the <code>body</code> field.
-	 * The body should contain either the full text of the license or an annotation for a license
-	 * fully specified in the URL at urlString.
-	 * @param urlString the string describing the URL of the full license, may be <code>null</code>
+	 * The body should contain either the full text of the license or an summary for a license
+	 * fully specified in the given location.
+	 * 
+	 * @param location the location of a document containing the full license, or <code>null</code>
 	 * @param body the license body, cannot be <code>null</code>
 	 * @throws IllegalArgumentException when the <code>body</code> is <code>null</code>
 	 */
-	public License(String urlString, String body) {
+	public License(URI location, String body) {
 		if (body == null)
 			throw new IllegalArgumentException("body cannot be null"); //$NON-NLS-1$
-		if (urlString != null)
-			try {
-				url = new URL(urlString);
-			} catch (MalformedURLException e) {
-				url = null;
-			}
 		this.body = body;
+		this.location = location;
 	}
 
 	/**
-	 * Returns the URL containing the full description of the license.
-	 * May be <code>null</code>.
+	 * Returns the location of a document containing the full license.
+	 * 
+	 * @return the location of the license document, or <code>null</code>
 	 */
-	public URL getURL() {
-		return url;
+	public URI getLocation() {
+		return location;
 	}
 
 	/**
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/MetadataFactory.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/MetadataFactory.java
index 86ab1a5..bdbf67b 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/MetadataFactory.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/MetadataFactory.java
@@ -324,13 +324,4 @@ public class MetadataFactory {
 	public static IUpdateDescriptor createUpdateDescriptor(String id, VersionRange range, int severity, String description) {
 		return new UpdateDescriptor(id, range, severity, description);
 	}
-
-	public static License createLicense(String url, String licenseBody) {
-		return new License(url, licenseBody);
-	}
-
-	public static Copyright createCopyright(String url, String copyrightBody) {
-		return new Copyright(url, copyrightBody);
-	}
-
 }
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/FeaturesAction.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/FeaturesAction.java
index 5717944..6042234 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/FeaturesAction.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/FeaturesAction.java
@@ -15,8 +15,7 @@ import java.net.URI;
 import java.net.URISyntaxException;
 import java.util.*;
 import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.internal.p2.core.helpers.FileUtils;
-import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
+import org.eclipse.equinox.internal.p2.core.helpers.*;
 import org.eclipse.equinox.internal.p2.metadata.ArtifactKey;
 import org.eclipse.equinox.internal.p2.publisher.Activator;
 import org.eclipse.equinox.internal.p2.publisher.FileSetDescriptor;
@@ -381,9 +380,10 @@ public class FeaturesAction extends AbstractPublisherAction {
 		Version version = new Version(feature.getVersion());
 		iu.setVersion(version);
 		if (feature.getLicense() != null)
-			iu.setLicense(new License(feature.getLicenseURL(), feature.getLicense()));
-		if (feature.getCopyright() != null)
-			iu.setCopyright(new Copyright(feature.getCopyrightURL(), feature.getCopyright()));
+			iu.setLicense(new License(toURIOrNull(feature.getLicenseURL()), feature.getLicense()));
+		if (feature.getCopyright() != null) {
+			iu.setCopyright(new Copyright(toURIOrNull(feature.getCopyrightURL()), feature.getCopyright()));
+		}
 
 		// The required capabilities are not specified at this level because we don't want the feature jar to be attractive to install.
 
@@ -430,6 +430,20 @@ public class FeaturesAction extends AbstractPublisherAction {
 		return MetadataFactory.createInstallableUnit(iu);
 	}
 
+	/**
+	 * Returns a URI corresponding to the given URL in string form, or null
+	 * if a well formed URI could not be created.
+	 */
+	private URI toURIOrNull(String url) {
+		if (url == null)
+			return null;
+		try {
+			return URIUtil.fromString(url);
+		} catch (URISyntaxException e) {
+			return null;
+		}
+	}
+
 	private void addExtraProperties(InstallableUnitDescription iu, Properties extraProperties) {
 		if (extraProperties != null) {
 			Enumeration e = extraProperties.propertyNames();
@@ -456,9 +470,9 @@ public class FeaturesAction extends AbstractPublisherAction {
 		if (feature.getProviderName() != null)
 			iu.setProperty(IInstallableUnit.PROP_PROVIDER, feature.getProviderName());
 		if (feature.getLicense() != null)
-			iu.setLicense(new License(feature.getLicenseURL(), feature.getLicense()));
+			iu.setLicense(new License(toURIOrNull(feature.getLicenseURL()), feature.getLicense()));
 		if (feature.getCopyright() != null)
-			iu.setCopyright(new Copyright(feature.getCopyrightURL(), feature.getCopyright()));
+			iu.setCopyright(new Copyright(toURIOrNull(feature.getCopyrightURL()), feature.getCopyright()));
 		iu.setUpdateDescriptor(MetadataFactory.createUpdateDescriptor(id, new VersionRange(new Version(0, 0, 0), true, new Version(feature.getVersion()), false), IUpdateDescriptor.NORMAL, null));
 
 		FeatureEntry entries[] = feature.getEntries();
@@ -525,9 +539,9 @@ public class FeaturesAction extends AbstractPublisherAction {
 		if (feature.getProviderName() != null)
 			iu.setProperty(IInstallableUnit.PROP_PROVIDER, feature.getProviderName());
 		if (feature.getLicense() != null)
-			iu.setLicense(new License(feature.getLicenseURL(), feature.getLicense()));
+			iu.setLicense(new License(toURIOrNull(feature.getLicenseURL()), feature.getLicense()));
 		if (feature.getCopyright() != null)
-			iu.setCopyright(new Copyright(feature.getCopyrightURL(), feature.getCopyright()));
+			iu.setCopyright(new Copyright(toURIOrNull(feature.getCopyrightURL()), feature.getCopyright()));
 		iu.setUpdateDescriptor(MetadataFactory.createUpdateDescriptor(id, new VersionRange(new Version(0, 0, 0), true, new Version(feature.getVersion()), false), IUpdateDescriptor.NORMAL, null));
 
 		FeatureEntry entries[] = feature.getEntries();
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/spi/p2/publisher/PublisherHelper.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/spi/p2/publisher/PublisherHelper.java
index b19bef7..3a0ba7f 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/spi/p2/publisher/PublisherHelper.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/spi/p2/publisher/PublisherHelper.java
@@ -13,11 +13,14 @@
 package org.eclipse.equinox.spi.p2.publisher;
 
 import java.io.*;
+import java.net.URI;
+import java.net.URISyntaxException;
 import java.util.*;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipFile;
 import org.eclipse.core.runtime.Path;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
+import org.eclipse.equinox.internal.p2.core.helpers.URIUtil;
 import org.eclipse.equinox.internal.p2.metadata.ArtifactKey;
 import org.eclipse.equinox.internal.p2.metadata.InstallableUnit;
 import org.eclipse.equinox.internal.p2.publisher.Activator;
@@ -661,9 +664,9 @@ public class PublisherHelper {
 		if (feature.getProviderName() != null)
 			iu.setProperty(IInstallableUnit.PROP_PROVIDER, feature.getProviderName());
 		if (feature.getLicense() != null)
-			iu.setLicense(new License(feature.getLicenseURL(), feature.getLicense()));
+			iu.setLicense(new License(toURIOrNull(feature.getLicenseURL()), feature.getLicense()));
 		if (feature.getCopyright() != null)
-			iu.setCopyright(new Copyright(feature.getCopyrightURL(), feature.getCopyright()));
+			iu.setCopyright(new Copyright(toURIOrNull(feature.getCopyrightURL()), feature.getCopyright()));
 		if (feature.getApplication() != null)
 			iu.setProperty(UPDATE_FEATURE_APPLICATION_PROP, feature.getApplication());
 		if (feature.getPlugin() != null)
@@ -769,9 +772,9 @@ public class PublisherHelper {
 		if (feature.getProviderName() != null)
 			iu.setProperty(IInstallableUnit.PROP_PROVIDER, feature.getProviderName());
 		if (feature.getLicense() != null)
-			iu.setLicense(new License(feature.getLicenseURL(), feature.getLicense()));
+			iu.setLicense(new License(toURIOrNull(feature.getLicenseURL()), feature.getLicense()));
 		if (feature.getCopyright() != null)
-			iu.setCopyright(new Copyright(feature.getCopyrightURL(), feature.getCopyright()));
+			iu.setCopyright(new Copyright(toURIOrNull(feature.getCopyrightURL()), feature.getCopyright()));
 		iu.setUpdateDescriptor(MetadataFactory.createUpdateDescriptor(id, new VersionRange(new Version(0, 0, 0), true, new Version(feature.getVersion()), false), IUpdateDescriptor.NORMAL, null));
 
 		FeatureEntry entries[] = feature.getEntries();
@@ -839,9 +842,9 @@ public class PublisherHelper {
 		if (feature.getProviderName() != null)
 			iu.setProperty(IInstallableUnit.PROP_PROVIDER, feature.getProviderName());
 		if (feature.getLicense() != null)
-			iu.setLicense(new License(feature.getLicenseURL(), feature.getLicense()));
+			iu.setLicense(new License(toURIOrNull(feature.getLicenseURL()), feature.getLicense()));
 		if (feature.getCopyright() != null)
-			iu.setCopyright(new Copyright(feature.getCopyrightURL(), feature.getCopyright()));
+			iu.setCopyright(new Copyright(toURIOrNull(feature.getCopyrightURL()), feature.getCopyright()));
 		iu.setUpdateDescriptor(MetadataFactory.createUpdateDescriptor(id, new VersionRange(new Version(0, 0, 0), true, new Version(feature.getVersion()), false), IUpdateDescriptor.NORMAL, null));
 
 		FeatureEntry entries[] = feature.getEntries();
@@ -1310,6 +1313,20 @@ public class PublisherHelper {
 		return result.toString();
 	}
 
+	/**
+	 * Returns a URI corresponding to the given URL in string form, or null
+	 * if a well formed URI could not be created.
+	 */
+	private static URI toURIOrNull(String url) {
+		if (url == null)
+			return null;
+		try {
+			return URIUtil.fromString(url);
+		} catch (URISyntaxException e) {
+			return null;
+		}
+	}
+
 	// Return a map from locale to property set for the manifest localizations
 	// from the given bundle directory and given bundle localization path/name
 	// manifest property value.
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
index ea7c975..3573fa4 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
@@ -990,7 +990,7 @@ public abstract class AbstractProvisioningTest extends TestCase {
 			fail(message);
 		}
 		assertEquals(message, cpyrt1.getBody(), cpyrt2.getBody());
-		assertEquals(message, cpyrt1.getURL().toExternalForm(), cpyrt2.getURL().toExternalForm());
+		assertEquals(message, cpyrt1.getLocation().toString(), cpyrt2.getLocation().toString());
 	}
 
 	/**
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/IUPropertyUtils.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/IUPropertyUtils.java
index 00c4693..efc2c15 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/IUPropertyUtils.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/IUPropertyUtils.java
@@ -10,16 +10,14 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.provisional.p2.ui;
 
-import org.eclipse.equinox.internal.p2.ui.ProvUIActivator;
-
 import java.lang.ref.SoftReference;
-import java.net.URL;
 import java.util.*;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.Status;
 import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.metadata.InstallableUnit;
+import org.eclipse.equinox.internal.p2.ui.ProvUIActivator;
 import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
 import org.eclipse.equinox.internal.provisional.p2.engine.IProfileRegistry;
 import org.eclipse.equinox.internal.provisional.p2.metadata.*;
@@ -58,8 +56,7 @@ public class IUPropertyUtils {
 			return license;
 		final String actualKey = body.substring(1); // Strip off the %
 		body = getLocalizedIUProperty(iu, actualKey, locale);
-		URL url = license.getURL();
-		return new License((url != null ? url.toExternalForm() : null), body);
+		return new License(license.getLocation(), body);
 	}
 
 	public static Copyright getCopyright(IInstallableUnit iu, Locale locale) {
@@ -69,8 +66,7 @@ public class IUPropertyUtils {
 			return copyright;
 		final String actualKey = body.substring(1); // Strip off the %
 		body = getLocalizedIUProperty(iu, actualKey, locale);
-		URL url = copyright.getURL();
-		return new Copyright((url != null ? url.toExternalForm() : null), body);
+		return new Copyright(copyright.getLocation(), body);
 	}
 
 	public static String getIUProperty(IInstallableUnit iu, String propertyKey, Locale locale) {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/IUCopyrightPropertyPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/IUCopyrightPropertyPage.java
index 4734b78..ed72124 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/IUCopyrightPropertyPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/IUCopyrightPropertyPage.java
@@ -10,12 +10,12 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.provisional.p2.ui.dialogs;
 
-import org.eclipse.equinox.internal.provisional.p2.ui.IUPropertyUtils;
-
+import java.net.MalformedURLException;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.dialogs.IUPropertyPage;
 import org.eclipse.equinox.internal.provisional.p2.metadata.Copyright;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.ui.IUPropertyUtils;
 import org.eclipse.osgi.util.NLS;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.events.SelectionAdapter;
@@ -50,19 +50,23 @@ public class IUCopyrightPropertyPage extends IUPropertyPage {
 			text.setEditable(false);
 
 			// If an URL was specified, provide a link to it
-			String filename = (copyright.getURL() != null) ? copyright.getURL().getFile() : null;
+			String filename = (copyright.getLocation() != null) ? copyright.getLocation().getPath() : null;
 			if (filename != null && (filename.endsWith(".htm") || filename.endsWith(".html"))) { //$NON-NLS-1$ //$NON-NLS-2$
 				Label label = new Label(composite, SWT.NONE);
 				label.setText(ProvUIMessages.IUCopyrightPropertyPage_ViewLinkLabel);
 				// Create a link to the copyright URL
 				Link link = new Link(composite, SWT.LEFT | SWT.WRAP);
-				link.setText(NLS.bind("<a>{0}</a>", copyright.getURL().toExternalForm())); //$NON-NLS-1$
+				link.setText(NLS.bind("<a>{0}</a>", copyright.getLocation().toString())); //$NON-NLS-1$
 				gd = new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_BEGINNING);
 				gd.widthHint = computeWidthLimit(link, 80);
 				link.setLayoutData(gd);
 				link.addSelectionListener(new SelectionAdapter() {
 					public void widgetSelected(SelectionEvent e) {
-						showURL(copyright.getURL());
+						try {
+							showURL(copyright.getLocation().toURL());
+						} catch (MalformedURLException e1) {
+							//cannot show this URL
+						}
 					}
 				});
 			}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/IULicensePropertyPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/IULicensePropertyPage.java
index b2b9b35..b19d26e 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/IULicensePropertyPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/IULicensePropertyPage.java
@@ -10,12 +10,11 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.provisional.p2.ui.dialogs;
 
-import org.eclipse.equinox.internal.provisional.p2.ui.IUPropertyUtils;
-
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.dialogs.IUPropertyPage;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.metadata.License;
+import org.eclipse.equinox.internal.provisional.p2.ui.IUPropertyUtils;
 import org.eclipse.osgi.util.NLS;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.events.SelectionAdapter;
@@ -50,19 +49,23 @@ public class IULicensePropertyPage extends IUPropertyPage {
 			text.setEditable(false);
 
 			// If an URL was specified, provide a link to it
-			String filename = (license.getURL() != null) ? license.getURL().getFile() : null;
+			String filename = (license.getLocation() != null) ? license.getLocation().getPath() : null;
 			if (filename != null && (filename.endsWith(".htm") || filename.endsWith(".html"))) { //$NON-NLS-1$ //$NON-NLS-2$
 				Label label = new Label(composite, SWT.NONE);
 				label.setText(ProvUIMessages.IULicensePropertyPage_ViewLicenseLabel);
 				// Create a link to the license URL
 				Link link = new Link(composite, SWT.LEFT | SWT.WRAP);
-				link.setText(NLS.bind("<a>{0}</a>", license.getURL().toExternalForm())); //$NON-NLS-1$
+				link.setText(NLS.bind("<a>{0}</a>", license.getLocation().toString())); //$NON-NLS-1$
 				gd = new GridData(GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_BEGINNING);
 				gd.widthHint = computeWidthLimit(link, 80);
 				link.setLayoutData(gd);
 				link.addSelectionListener(new SelectionAdapter() {
 					public void widgetSelected(SelectionEvent e) {
-						showURL(license.getURL());
+						try {
+							showURL(license.getLocation().toURL());
+						} catch (Exception e1) {
+							//can't browse invalid location
+						}
 					}
 				});
 			}

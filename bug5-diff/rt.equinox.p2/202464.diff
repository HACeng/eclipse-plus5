commit 442cf99de4373a749c6341f382d11c743c379c07
Author: Pascal Rapicault <prapicau>
Date:   Wed Jan 23 14:22:59 2008 +0000

    Bug 202464 [prov] handle source as individual bundles

15	3	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java
index 7a7621a..b0e7af9 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java
@@ -33,6 +33,7 @@ public class MetadataGeneratorHelper {
 
 	private static final String CAPABILITY_TYPE_OSGI_PACKAGES = "osgi.packages"; //$NON-NLS-1$
 	private static final String CAPABILITY_TYPE_OSGI_BUNDLES = "osgi.bundles"; //$NON-NLS-1$
+	private static final String CAPABILITY_TYPE_OSGI_SOURCE_BUNDLES = "osgi.source.bundles"; //$NON-NLS-1$
 	private static final String CAPABILITY_TYPE_OSGI_FRAGMENTS = "osgi.fragments"; //$NON-NLS-1$
 
 	private static final Version DEFAULT_JRE_VERSION = new Version("1.5"); //$NON-NLS-1$
@@ -60,6 +61,7 @@ public class MetadataGeneratorHelper {
 	public static final ProvidedCapability BUNDLE_CAPABILITY = MetadataFactory.createProvidedCapability(IInstallableUnit.CAPABILITY_ECLIPSE_TYPES, IInstallableUnit.CAPABILITY_ECLIPSE_BUNDLE, new Version(1, 0, 0));
 	public static final ProvidedCapability FEATURE_CAPABILITY = MetadataFactory.createProvidedCapability(IInstallableUnit.CAPABILITY_ECLIPSE_TYPES, IInstallableUnit.CAPABILITY_ECLIPSE_FEATURE, new Version(1, 0, 0));
 	public static final ProvidedCapability FRAGMENT_CAPABILITY = IInstallableUnitFragment.FRAGMENT_CAPABILITY;
+	public static final ProvidedCapability SOURCE_BUNDLE_CAPABILITY = MetadataFactory.createProvidedCapability(IInstallableUnit.CAPABILITY_ECLIPSE_TYPES, IInstallableUnit.CAPABILITY_ECLIPSE_SOURCE, new Version(1, 0, 0));
 
 	public static IArtifactDescriptor createArtifactDescriptor(IArtifactKey key, File pathOnDisk, boolean asIs, boolean recur) {
 		//TODO this size calculation is bogus
@@ -102,6 +104,10 @@ public class MetadataGeneratorHelper {
 	}
 
 	public static IInstallableUnit createBundleIU(BundleDescription bd, Map manifest, boolean isFolderPlugin, IArtifactKey key) {
+		boolean isBinaryBundle = true;
+		if (manifest.containsKey("Eclipse-SourceBundle")) {
+			isBinaryBundle = false;
+		}
 		InstallableUnitDescription iu = new MetadataFactory.InstallableUnitDescription();
 		iu.setSingleton(bd.isSingleton());
 		iu.setId(bd.getSymbolicName());
@@ -141,9 +147,11 @@ public class MetadataGeneratorHelper {
 
 		// Create Set of provided capabilities
 		ArrayList providedCapabilities = new ArrayList();
-
 		providedCapabilities.add(createSelfCapability(bd.getSymbolicName(), bd.getVersion()));
-		providedCapabilities.add(MetadataFactory.createProvidedCapability(CAPABILITY_TYPE_OSGI_BUNDLES, bd.getSymbolicName(), bd.getVersion()));
+		if (isBinaryBundle)
+			providedCapabilities.add(MetadataFactory.createProvidedCapability(CAPABILITY_TYPE_OSGI_BUNDLES, bd.getSymbolicName(), bd.getVersion()));
+		else
+			providedCapabilities.add(MetadataFactory.createProvidedCapability(CAPABILITY_TYPE_OSGI_SOURCE_BUNDLES, bd.getSymbolicName(), bd.getVersion()));
 
 		//Process the export package
 		ExportPackageDescription exports[] = bd.getExportPackages();
@@ -152,7 +160,11 @@ public class MetadataGeneratorHelper {
 			providedCapabilities.add(MetadataFactory.createProvidedCapability(CAPABILITY_TYPE_OSGI_PACKAGES, exports[i].getName(), exports[i].getVersion() == Version.emptyVersion ? null : exports[i].getVersion()));
 		}
 		// Here we add a bundle capability to identify bundles
-		providedCapabilities.add(BUNDLE_CAPABILITY);
+		if (isBinaryBundle)
+			providedCapabilities.add(BUNDLE_CAPABILITY);
+		else
+			providedCapabilities.add(SOURCE_BUNDLE_CAPABILITY);
+
 		if (isFragment)
 			providedCapabilities.add(MetadataFactory.createProvidedCapability(CAPABILITY_TYPE_OSGI_FRAGMENTS, bd.getHost().getName(), bd.getVersion()));
 		iu.setCapabilities((ProvidedCapability[]) providedCapabilities.toArray(new ProvidedCapability[providedCapabilities.size()]));
commit ba87ee156e6abf0e718659fe2a02c82967b07ec9
Author: Pascal Rapicault <prapicau>
Date:   Wed Jan 23 14:54:44 2008 +0000

    Bug 202464 [prov] handle source as individual bundles

1	0	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnit.java
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnit.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnit.java
index a0d3dbf..49ac31d 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnit.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnit.java
@@ -16,6 +16,7 @@ public interface IInstallableUnit extends Comparable {
 	// TODO: These two constants need to be moved somewhere more appropriate...
 	public static final String CAPABILITY_ECLIPSE_BUNDLE = "bundle"; //$NON-NLS-1$
 	public static final String CAPABILITY_ECLIPSE_FEATURE = "feature"; //$NON-NLS-1$
+	public static final String CAPABILITY_ECLIPSE_SOURCE = "source"; //$NON-NLS-1$
 	public static final String CAPABILITY_ECLIPSE_TYPES = "org.eclipse.equinox.p2.eclipsetouchpoint.types"; //$NON-NLS-1$
 	/**
 	 * A capability namespace representing a particular profile flavor.
commit fbca750fbe5c2be9fd9d0659c1f9b4fc5fefd162
Author: Pascal Rapicault <prapicau>
Date:   Tue Jan 29 22:42:25 2008 +0000

    Bug 202464 - handle source as individual bundles

1	0	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
21	0	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java
1	0	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/META-INF/MANIFEST.MF
105	2	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
61	0	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/SourceManipulator.java
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
index aeecaf1..be79d4e 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
@@ -296,6 +296,7 @@ public class Generator {
 		EclipseInstallGeneratorInfoProvider provider = (EclipseInstallGeneratorInfoProvider) info;
 		ius.add(MetadataGeneratorHelper.createDefaultBundleConfigurationUnit(provider.createDefaultConfigurationBundleInfo(), provider.createDefaultUnconfigurationBundleInfo(), info.getFlavor()));
 		ius.add(MetadataGeneratorHelper.createDefaultFeatureConfigurationUnit(info.getFlavor()));
+		ius.add(MetadataGeneratorHelper.createDefaultConfigurationUnitForSourceBundles(info.getFlavor()));
 	}
 
 	/**
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java
index bc5adf4..b03ff24 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java
@@ -327,6 +327,27 @@ public class MetadataGeneratorHelper {
 		return MetadataFactory.createInstallableUnit(cu);
 	}
 
+	public static IInstallableUnit createDefaultConfigurationUnitForSourceBundles(String configurationFlavor) {
+		InstallableUnitFragmentDescription cu = new InstallableUnitFragmentDescription();
+		String configUnitId = createDefaultConfigUnitId("source", configurationFlavor);
+		cu.setId(configUnitId);
+		Version configUnitVersion = new Version(1, 0, 0);
+		cu.setVersion(configUnitVersion);
+
+		// Add capabilities for fragment, self, and describing the flavor supported
+		cu.setCapabilities(new ProvidedCapability[] {FRAGMENT_CAPABILITY, createSelfCapability(configUnitId, configUnitVersion), MetadataFactory.createProvidedCapability(IInstallableUnit.NAMESPACE_FLAVOR, configurationFlavor, Version.emptyVersion)});
+
+		// Create a required capability on source providers
+		RequiredCapability[] reqs = new RequiredCapability[] {MetadataFactory.createRequiredCapability(IInstallableUnit.CAPABILITY_ECLIPSE_TYPES, IInstallableUnit.CAPABILITY_ECLIPSE_SOURCE, VersionRange.emptyRange, null, false, true)};
+		cu.setRequiredCapabilities(reqs);
+		Map touchpointData = new HashMap();
+
+		touchpointData.put("install", "addSourceBundle(bundle:${artifact})"); //$NON-NLS-1$ //$NON-NLS-2$
+		touchpointData.put("uninstall", "removeSourceBundle(bundle:${artifact})"); //$NON-NLS-1$ //$NON-NLS-2$
+		cu.addTouchpointData(MetadataFactory.createTouchpointData(touchpointData));
+		return MetadataFactory.createInstallableUnit(cu);
+	}
+
 	// TODO: TEMPORARY - We should figure out if we want to expose something like InstallableUnitDescription
 	public static IInstallableUnit createEclipseIU(BundleDescription bd, Map manifest, boolean isFolderPlugin, IArtifactKey key, Properties extraProperties) {
 		InstallableUnit iu = (InstallableUnit) createBundleIU(bd, manifest, isFolderPlugin, key);
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/META-INF/MANIFEST.MF
index e6d1742..b92e680 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/META-INF/MANIFEST.MF
@@ -18,6 +18,7 @@ Import-Package: org.eclipse.core.runtime;common=split,
  org.eclipse.equinox.p2.metadata.generator;resolution:=optional,
  org.eclipse.equinox.p2.metadata.query,
  org.eclipse.equinox.p2.query,
+ org.eclipse.equinox.simpleconfigurator.manipulator.internal,
  org.eclipse.equinox.spi.p2.artifact.repository,
  org.eclipse.osgi.service.datalocation;version="1.0.0",
  org.eclipse.osgi.service.environment;version="1.0.0",
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
index 1dc74be..0f383b3 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
@@ -32,6 +32,7 @@ public class EclipseTouchpoint extends Touchpoint {
 	private static final String ACTION_COLLECT = "collect"; //$NON-NLS-1$
 	private static final String ACTION_INSTALL_BUNDLE = "installBundle"; //$NON-NLS-1$
 	private static final String ACTION_INSTALL_FEATURE = "installFeature"; //$NON-NLS-1$
+	private static final String ACTION_ADD_SOURCEBUNDLE = "addSourceBundle"; //$NON-NLS-1$
 	private static final String ACTION_MARK_STARTED = "markStarted"; //$NON-NLS-1$
 	private static final String ACTION_REMOVE_JVM_ARG = "removeJvmArg"; //$NON-NLS-1$
 	private static final String ACTION_REMOVE_PROGRAM_ARG = "removeProgramArg"; //$NON-NLS-1$
@@ -39,6 +40,7 @@ public class EclipseTouchpoint extends Touchpoint {
 	private static final String ACTION_SET_FW_INDEPENDENT_PROP = "setFwIndependentProp"; //$NON-NLS-1$
 	private static final String ACTION_UNINSTALL_BUNDLE = "uninstallBundle"; //$NON-NLS-1$
 	private static final String ACTION_UNINSTALL_FEATURE = "uninstallFeature"; //$NON-NLS-1$
+	private static final String ACTION_REMOVE_SOURCEBUNDLE = "removeSourceBundle"; //$NON-NLS-1$
 	private static final String PARM_ARTIFACT = "@artifact"; //$NON-NLS-1$
 	private static final String PARM_ARTIFACT_REQUESTS = "artifactRequests"; //$NON-NLS-1$
 	private static final String PARM_BUNDLE = "bundle"; //$NON-NLS-1$
@@ -50,6 +52,7 @@ public class EclipseTouchpoint extends Touchpoint {
 	private static final String PARM_JVM_ARG = "jvmArg"; //$NON-NLS-1$
 	private static final String PARM_MANIPULATOR = "manipulator"; //$NON-NLS-1$
 	private static final String PARM_PLATFORM_CONFIGURATION = "platformConfiguration"; //$NON-NLS-1$
+	private static final String PARM_SOURCE_BUNDLES = "sourceBundles"; //$NON-NLS-1$
 	private static final String PARM_OPERAND = "operand"; //$NON-NLS-1$
 	private static final String PARM_PREVIOUS_START_LEVEL = "previousStartLevel"; //$NON-NLS-1$
 	private static final String PARM_PREVIOUS_STARTED = "previousStarted"; //$NON-NLS-1$
@@ -139,7 +142,15 @@ public class EclipseTouchpoint extends Touchpoint {
 				return createError("Error saving platform configuration.", pe);
 			}
 		}
-		return null;
+
+		SourceManipulator m = (SourceManipulator) touchpointParameters.get(PARM_SOURCE_BUNDLES);
+		try {
+			m.save();
+		} catch (IOException e) {
+			return createError("Error saving source bundles list", e);
+		}
+
+		return Status.OK_STATUS;
 	}
 
 	private URL getConfigurationURL(Profile profile) throws CoreException {
@@ -199,6 +210,30 @@ public class EclipseTouchpoint extends Touchpoint {
 			};
 		}
 
+		if (actionId.equals(ACTION_ADD_SOURCEBUNDLE)) {
+			return new ProvisioningAction() {
+				public IStatus execute(Map parameters) {
+					return addSourceBundle(parameters);
+				}
+
+				public IStatus undo(Map parameters) {
+					return removeSourceBundle(parameters);
+				}
+			};
+		}
+
+		if (actionId.equals(ACTION_REMOVE_SOURCEBUNDLE)) {
+			return new ProvisioningAction() {
+				public IStatus execute(Map parameters) {
+					return removeSourceBundle(parameters);
+				}
+
+				public IStatus undo(Map parameters) {
+					return addSourceBundle(parameters);
+				}
+			};
+		}
+
 		if (actionId.equals(ACTION_INSTALL_FEATURE)) {
 			return new ProvisioningAction() {
 				public IStatus execute(Map parameters) {
@@ -589,6 +624,7 @@ public class EclipseTouchpoint extends Touchpoint {
 	public IStatus initializePhase(IProgressMonitor monitor, Profile profile, String phaseId, Map touchpointParameters) {
 		touchpointParameters.put(PARM_INSTALL_FOLDER, Util.getInstallFolder(profile));
 		touchpointParameters.put(PARM_MANIPULATOR, new LazyManipulator(profile));
+		touchpointParameters.put(PARM_SOURCE_BUNDLES, new SourceManipulator(profile));
 		try {
 			URL configURL = getConfigurationURL(profile);
 			URL poolURL = Util.getBundlePoolLocation(profile);
@@ -601,7 +637,6 @@ public class EclipseTouchpoint extends Touchpoint {
 	}
 
 	IStatus installBundle(Map parameters) {
-
 		Profile profile = (Profile) parameters.get(PARM_PROFILE);
 		IInstallableUnit iu = (IInstallableUnit) parameters.get(PARM_IU);
 		Manipulator manipulator = (Manipulator) parameters.get(PARM_MANIPULATOR);
@@ -782,4 +817,72 @@ public class EclipseTouchpoint extends Touchpoint {
 		// should not occur
 		throw new IllegalStateException("Unexpected");
 	}
+
+	IStatus addSourceBundle(Map parameters) {
+		Profile profile = (Profile) parameters.get(PARM_PROFILE);
+		IInstallableUnit iu = (IInstallableUnit) parameters.get(PARM_IU);
+		SourceManipulator manipulator = (SourceManipulator) parameters.get(PARM_SOURCE_BUNDLES);
+		String bundleId = (String) parameters.get(PARM_BUNDLE);
+		if (bundleId == null)
+			return createError("The \"bundleId\" parameter is missing from the \"add source bundle\" action");
+
+		IArtifactKey[] artifacts = iu.getArtifacts();
+		if (artifacts == null || artifacts.length == 0)
+			return createError("Installable unit contains no artifacts");
+
+		IArtifactKey artifactKey = null;
+		for (int i = 0; i < artifacts.length; i++) {
+			if (artifacts[i].toString().equals(bundleId)) {
+				artifactKey = artifacts[i];
+				break;
+			}
+		}
+		if (artifactKey == null)
+			throw new IllegalArgumentException("No artifact found that matches: " + bundleId);
+
+		File bundleFile = Util.getBundleFile(artifactKey, profile);
+		if (bundleFile == null || !bundleFile.exists())
+			return createError("The artifact " + artifactKey.toString() + " to install was not found.");
+
+		try {
+			manipulator.addBundle(bundleFile);
+		} catch (IOException e) {
+			createError("Can't configure " + artifactKey.toString() + " as a source bundle.", e);
+		}
+		return Status.OK_STATUS;
+	}
+
+	IStatus removeSourceBundle(Map parameters) {
+		Profile profile = (Profile) parameters.get(PARM_PROFILE);
+		IInstallableUnit iu = (IInstallableUnit) parameters.get(PARM_IU);
+		SourceManipulator manipulator = (SourceManipulator) parameters.get(PARM_SOURCE_BUNDLES);
+		String bundleId = (String) parameters.get(PARM_BUNDLE);
+		if (bundleId == null)
+			return createError("The \"bundleId\" parameter is missing from the \"remove source bundle\" action");
+
+		IArtifactKey[] artifacts = iu.getArtifacts();
+		if (artifacts == null || artifacts.length == 0)
+			return createError("Installable unit contains no artifacts");
+
+		IArtifactKey artifactKey = null;
+		for (int i = 0; i < artifacts.length; i++) {
+			if (artifacts[i].toString().equals(bundleId)) {
+				artifactKey = artifacts[i];
+				break;
+			}
+		}
+		if (artifactKey == null)
+			throw new IllegalArgumentException("No artifact found that matches: " + bundleId);
+
+		File bundleFile = Util.getBundleFile(artifactKey, profile);
+		if (bundleFile == null || !bundleFile.exists())
+			return createError("The artifact " + artifactKey.toString() + " to install was not found.");
+
+		try {
+			manipulator.removeBundle(bundleFile);
+		} catch (IOException e) {
+			createError("Can't configure " + artifactKey.toString() + " as a source bundle.", e);
+		}
+		return Status.OK_STATUS;
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/SourceManipulator.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/SourceManipulator.java
new file mode 100644
index 0000000..7d4955f
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/SourceManipulator.java
@@ -0,0 +1,61 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others. All rights reserved. This
+ * program and the accompanying materials are made available under the terms of
+ * the Eclipse Public License v1.0 which accompanies this distribution, and is
+ * available at http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors: IBM Corporation - initial API and implementation
+ ******************************************************************************/
+package org.eclipse.equinox.internal.p2.touchpoint.eclipse;
+
+import java.io.File;
+import java.io.IOException;
+import java.net.MalformedURLException;
+import java.util.ArrayList;
+import java.util.List;
+import org.eclipse.equinox.frameworkadmin.BundleInfo;
+import org.eclipse.equinox.p2.engine.Profile;
+import org.eclipse.equinox.simpleconfigurator.manipulator.internal.SimpleConfiguratorManipulatorImpl;
+
+//This class deals with source bundles and how their addition to the source.bundles.txt
+public class SourceManipulator {
+	private List sourceBundles;
+	private Profile profile;
+	boolean changed = false;
+
+	public SourceManipulator(Profile profile) {
+		this.profile = profile;
+	}
+
+	public void addBundle(File bundleFile) throws IOException {
+		if (sourceBundles == null)
+			load();
+		sourceBundles.add(new BundleInfo(bundleFile.toURL().toString()));
+	}
+
+	public void removeBundle(File bundleFile) throws MalformedURLException, IOException {
+		if (sourceBundles == null)
+			load();
+		sourceBundles.remove(new BundleInfo(bundleFile.toURL().toString()));
+	}
+
+	public void save() throws IOException {
+		if (sourceBundles != null)
+			SimpleConfiguratorManipulatorImpl.saveConfiguration(sourceBundles, getFileLocation(), getLauncherLocation(), false);
+	}
+
+	private void load() throws MalformedURLException, IOException {
+		if (getFileLocation().exists())
+			sourceBundles = SimpleConfiguratorManipulatorImpl.readConfiguration(getFileLocation().toURL(), getLauncherLocation());
+		else
+			sourceBundles = new ArrayList();
+	}
+
+	private File getFileLocation() {
+		return new File(Util.getConfigurationFolder(profile), "org.eclipse.source.bundles/source.bundles.txt"); //$NON-NLS-1$
+	}
+
+	private File getLauncherLocation() {
+		return Util.getInstallFolder(profile);
+	}
+}

commit 37381d51f8dc329facb78216ccc2acda873e69c8
Author: John Arthorne <johna>
Date:   Fri Mar 7 22:07:47 2008 +0000

    Bug 199806 [prov] [repo] Event for repository addition and removal

2	1	bundles/org.eclipse.equinox.p2.artifact.repository/META-INF/MANIFEST.MF
26	0	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/AbstractRepositoryManager.java
5	1	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java
4	1	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/p2/artifact/repository/IArtifactRepositoryManager.java
13	3	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/repository/IRepository.java
75	0	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/repository/RepositoryEvent.java
13	2	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java
4	1	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/provisional/p2/metadata/repository/IMetadataRepositoryManager.java
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.artifact.repository/META-INF/MANIFEST.MF
index 3515c58..1b2c32f 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/META-INF/MANIFEST.MF
@@ -20,13 +20,14 @@ Import-Package: javax.xml.parsers,
  org.eclipse.equinox.internal.p2.metadata,
  org.eclipse.equinox.internal.p2.persistence,
  org.eclipse.equinox.internal.provisional.p2.core,
+ org.eclipse.equinox.internal.provisional.p2.core.eventbus,
  org.eclipse.equinox.internal.provisional.p2.core.location,
  org.eclipse.equinox.internal.provisional.p2.core.repository,
  org.eclipse.equinox.internal.provisional.p2.metadata,
  org.eclipse.equinox.internal.provisional.spi.p2.core.repository,
  org.eclipse.internal.provisional.equinox.p2.jarprocessor;resolution:=optional,
- org.eclipse.osgi.signedcontent;version="1.0.0",
  org.eclipse.osgi.service.resolver;version="1.1.0",
+ org.eclipse.osgi.signedcontent;version="1.0.0",
  org.eclipse.osgi.util;version="1.1.0",
  org.osgi.framework;version="1.3.0",
  org.osgi.service.prefs;version="1.1.0",
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/AbstractRepositoryManager.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/AbstractRepositoryManager.java
new file mode 100644
index 0000000..5e78a46
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/AbstractRepositoryManager.java
@@ -0,0 +1,26 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.artifact.repository;
+
+import java.net.URL;
+import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
+import org.eclipse.equinox.internal.provisional.p2.core.eventbus.IProvisioningEventBus;
+import org.eclipse.equinox.internal.provisional.p2.core.repository.RepositoryEvent;
+
+/**
+ * Common code shared between artifact and metadata repository managers.
+ */
+public class AbstractRepositoryManager {
+	protected void broadcastChangeEvent(URL location, int repositoryType, int kind) {
+		((IProvisioningEventBus) ServiceHelper.getService(Activator.getContext(), IProvisioningEventBus.class.getName())).publishEvent(new RepositoryEvent(location, repositoryType, kind));
+	}
+
+}
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java
index e3a6ae4..1ad6808 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java
@@ -21,6 +21,7 @@ import org.eclipse.equinox.internal.provisional.p2.artifact.repository.*;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.core.location.AgentLocation;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
+import org.eclipse.equinox.internal.provisional.p2.core.repository.RepositoryEvent;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository.IArtifactRepositoryFactory;
 import org.eclipse.osgi.util.NLS;
@@ -32,7 +33,7 @@ import org.osgi.service.prefs.Preferences;
  * TODO the current assumption that the "location" is the dir/root limits us to 
  * having just one repository in a given URL..  
  */
-public class ArtifactRepositoryManager implements IArtifactRepositoryManager {
+public class ArtifactRepositoryManager extends AbstractRepositoryManager implements IArtifactRepositoryManager {
 	static class RepositoryInfo {
 		String description;
 		boolean isSystem = false;
@@ -88,6 +89,7 @@ public class ArtifactRepositoryManager implements IArtifactRepositoryManager {
 		}
 		// save the given repository in the preferences.
 		remember(repository);
+		broadcastChangeEvent(repository.getLocation(), IRepository.TYPE_ARTIFACT, RepositoryEvent.ADDED);
 	}
 
 	public void addRepository(URL location) {
@@ -101,6 +103,7 @@ public class ArtifactRepositoryManager implements IArtifactRepositoryManager {
 		}
 		// save the given repository in the preferences.
 		remember(info);
+		broadcastChangeEvent(location, IRepository.TYPE_ARTIFACT, RepositoryEvent.ADDED);
 	}
 
 	/**
@@ -457,6 +460,7 @@ public class ArtifactRepositoryManager implements IArtifactRepositoryManager {
 		} catch (BackingStoreException e) {
 			log("Error saving preferences", e); //$NON-NLS-1$
 		}
+		broadcastChangeEvent(toRemove, IRepository.TYPE_ARTIFACT, RepositoryEvent.REMOVED);
 		return true;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/p2/artifact/repository/IArtifactRepositoryManager.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/p2/artifact/repository/IArtifactRepositoryManager.java
index e6148d7..ffb7813 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/p2/artifact/repository/IArtifactRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/p2/artifact/repository/IArtifactRepositoryManager.java
@@ -16,13 +16,16 @@ import org.eclipse.core.runtime.IPath;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
+import org.eclipse.equinox.internal.provisional.p2.core.repository.RepositoryEvent;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
 
 /**
  * The metadata repository manager is used to create, access, and manipulate
  * {@link IArtifactRepository} instances. The manager keeps track of a 
  * set of known repositories, and provides caching of these known repositories
- * to avoid unnecessary loading of repositories from the disk or network.
+ * to avoid unnecessary loading of repositories from the disk or network.  The
+ * manager fires {@link RepositoryEvent}s when the set of known repositories
+ * changes.
  * 
  * @noimplement This interface is not intended to be implemented by clients.
  */
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/repository/IRepository.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/repository/IRepository.java
index 39e1a11..8b3f417 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/repository/IRepository.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/repository/IRepository.java
@@ -17,8 +17,8 @@ import org.eclipse.core.runtime.IAdaptable;
 /**
  * Base interface that defines common properties that may be provided by 
  * various kinds of repositories.
- * <p>
- * This interface is not intended to be implemented by clients.
+ * 
+ * @noimplement This interface is not intended to be implemented by clients.
  */
 public interface IRepository extends IAdaptable {
 	/** 
@@ -26,7 +26,7 @@ public interface IRepository extends IAdaptable {
 	 * is a system repository.  System repositories are implementation details
 	 * that are not subject to general access, hidden from the typical user, etc.
 	 */
-	static public String PROP_SYSTEM = "p2.system"; //$NON-NLS-1$
+	public static final String PROP_SYSTEM = "p2.system"; //$NON-NLS-1$
 
 	/**
 	 * The key for a boolean property indicating that repository metadata is
@@ -53,6 +53,16 @@ public interface IRepository extends IAdaptable {
 	public static final String PROP_MIRRORS_URL = "p2.mirrorsURL"; //$NON-NLS-1$
 
 	/**
+	 * A repository type constant (value 0) representing a metadata repository.
+	 */
+	public static final int TYPE_METADATA = 0;
+
+	/**
+	 * A repository type constant (value 1) representing an artifact repository.
+	 */
+	public static final int TYPE_ARTIFACT = 1;
+
+	/**
 	 * Returns the URL of the repository.
 	 * TODO: Should we use URL or URI? URL requires a protocol handler
 	 * to be installed in Java.  Can the URL have any protocol?
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/repository/RepositoryEvent.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/repository/RepositoryEvent.java
new file mode 100644
index 0000000..a9b2845
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/repository/RepositoryEvent.java
@@ -0,0 +1,75 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.provisional.p2.core.repository;
+
+import java.net.URL;
+import java.util.EventObject;
+
+/**
+ * An event indicating a repository was added, removed, or changed.
+ * 
+ * @noextend This class is not intended to be subclassed by clients.
+ */
+public class RepositoryEvent extends EventObject {
+	private static final long serialVersionUID = 3082402920617281765L;
+
+	public static final int ADDED = 0;
+	public static final int REMOVED = 1;
+	public static final int CHANGED = 2;
+
+	private final int kind, type;
+
+	/**
+	 * Creates a new repository event.
+	 * 
+	 * @param location the location of the repository that changed.
+	 * @param repositoryType the type of repository that was changed
+	 * @param kind the kind of change that occurred.
+	 */
+	public RepositoryEvent(URL location, int repositoryType, int kind) {
+		super(location);
+		this.kind = kind;
+		this.type = repositoryType;
+
+	}
+
+	/**
+	 * Returns the kind of change that occurred.
+	 *
+	 * @return the kind of change that occurred.
+	 * @see #ADDED
+	 * @see #REMOVED
+	 * @see #CHANGED
+	 */
+	public int getKind() {
+		return kind;
+	}
+
+	/**
+	 * Returns the location of the repository that changed.
+	 * 
+	 * @return the location of the repository that changed.
+	 */
+	public URL getRepositoryLocation() {
+		return (URL) getSource();
+	}
+
+	/**
+	 * Returns the type of repository that was changed.
+	 * 
+	 * @return the type of repository that was changed
+	 *  ({@link IRepository#TYPE_METADATA} or {@link IRepository#TYPE_ARTIFACT}).
+	 */
+	public int getRepositoryType() {
+		return type;
+	}
+
+}
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java
index 502e5f4..8090510 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java
@@ -16,10 +16,11 @@ import java.net.URL;
 import java.util.*;
 import org.eclipse.core.runtime.*;
 import org.eclipse.core.runtime.preferences.ConfigurationScope;
-import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
-import org.eclipse.equinox.internal.p2.core.helpers.URLUtil;
+import org.eclipse.equinox.internal.p2.core.helpers.*;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.equinox.internal.provisional.p2.core.eventbus.IProvisioningEventBus;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
+import org.eclipse.equinox.internal.provisional.p2.core.repository.RepositoryEvent;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.query.Collector;
@@ -90,6 +91,7 @@ public class MetadataRepositoryManager implements IMetadataRepositoryManager {
 		}
 		// save the given repository in the preferences.
 		remember(repository);
+		broadcastChangeEvent(repository.getLocation(), IRepository.TYPE_METADATA, RepositoryEvent.ADDED);
 	}
 
 	public void addRepository(URL location) {
@@ -103,6 +105,14 @@ public class MetadataRepositoryManager implements IMetadataRepositoryManager {
 		}
 		// save the given repository in the preferences.
 		remember(info);
+		broadcastChangeEvent(location, IRepository.TYPE_METADATA, RepositoryEvent.ADDED);
+	}
+
+	/**
+	 * TODO Eliminate duplication with ArtifactRepositoryManager.
+	 */
+	protected void broadcastChangeEvent(URL location, int repositoryType, int kind) {
+		((IProvisioningEventBus) ServiceHelper.getService(Activator.getContext(), IProvisioningEventBus.class.getName())).publishEvent(new RepositoryEvent(location, repositoryType, kind));
 	}
 
 	/**
@@ -509,6 +519,7 @@ public class MetadataRepositoryManager implements IMetadataRepositoryManager {
 		} catch (BackingStoreException e) {
 			log("Error saving preferences", e); //$NON-NLS-1$
 		}
+		broadcastChangeEvent(toRemove, IRepository.TYPE_METADATA, RepositoryEvent.REMOVED);
 		return true;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/provisional/p2/metadata/repository/IMetadataRepositoryManager.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/provisional/p2/metadata/repository/IMetadataRepositoryManager.java
index e6966a5..b6c8480 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/provisional/p2/metadata/repository/IMetadataRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/provisional/p2/metadata/repository/IMetadataRepositoryManager.java
@@ -15,13 +15,16 @@ import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
+import org.eclipse.equinox.internal.provisional.p2.core.repository.RepositoryEvent;
 import org.eclipse.equinox.internal.provisional.p2.query.IQueryable;
 
 /**
  * The metadata repository manager is used to create, access, and manipulate
  * {@link IMetadataRepository} instances. The manager keeps track of a 
  * set of known repositories, and provides caching of these known repositories
- * to avoid unnecessary loading of repositories from the disk or network.
+ * to avoid unnecessary loading of repositories from the disk or network.  The
+ * manager fires {@link RepositoryEvent}s when the set of known repositories
+ * changes.
  * 
  * @noimplement This interface is not intended to be implemented by clients.
  */

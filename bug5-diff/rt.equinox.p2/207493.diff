commit 119882d809c5bd059ad8642d328afe8d3f2e6070
Author: Susan Franklin <sfranklin>
Date:   Thu Nov 29 23:59:55 2007 +0000

    Bug 207493 - [prov] [ui] - "Remind me Later" for auto updates

2	1	bundles/org.eclipse.equinox.p2.ui.admin.rcp/ProvAdminUI.launch
9	0	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
13	4	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
62	6	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/AutomaticUpdatesPreferencePage.java
2	0	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/PreferenceConstants.java
3	0	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/PreferenceInitializer.java
10	5	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
127	20	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdatesPopup.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin.rcp/ProvAdminUI.launch b/bundles/org.eclipse.equinox.p2.ui.admin.rcp/ProvAdminUI.launch
index 5d31e78..a4e97ec 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin.rcp/ProvAdminUI.launch
+++ b/bundles/org.eclipse.equinox.p2.ui.admin.rcp/ProvAdminUI.launch
@@ -12,6 +12,7 @@
 <stringAttribute key="execEnvironment" value="CDC-1.0/Foundation-1.0"/>
 <booleanAttribute key="includeOptional" value="false"/>
 <booleanAttribute key="org.eclipse.debug.core.appendEnvironmentVariables" value="true"/>
+<stringAttribute key="org.eclipse.jdt.launching.JRE_CONTAINER" value="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/j2sdk1.4.2_08"/>
 <stringAttribute key="org.eclipse.jdt.launching.PROGRAM_ARGUMENTS" value="-os ${target.os} -ws ${target.ws} -arch ${target.arch} -nl ${target.nl} -console -consolelog -product org.eclipse.equinox.p2.ui.admin.rcp.product"/>
 <stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.pde.ui.workbenchClasspathProvider"/>
 <stringAttribute key="org.eclipse.jdt.launching.VM_ARGUMENTS" value="-Declipse.p2.data.area=c:/equinox.p2/agentData/"/>
@@ -21,5 +22,5 @@
 <booleanAttribute key="tracing" value="false"/>
 <booleanAttribute key="useDefaultConfigArea" value="false"/>
 <booleanAttribute key="useNamedJRE" value="false"/>
-<stringAttribute key="workspace_bundles" value="org.eclipse.ecf@default:default,org.eclipse.ecf.filetransfer@default:default,org.eclipse.ecf.identity@default:default,org.eclipse.ecf.provider.filetransfer@default:default,org.eclipse.equinox.frameworkadmin@default:default,org.eclipse.equinox.frameworkadmin.equinox@default:true,org.eclipse.equinox.p2.artifact.repository@default:default,org.eclipse.equinox.p2.console@default:true,org.eclipse.equinox.p2.core@default:default,org.eclipse.equinox.p2.director@default:default,org.eclipse.equinox.p2.download@default:default,org.eclipse.equinox.p2.engine@default:default,org.eclipse.equinox.p2.exemplarysetup@default:true,org.eclipse.equinox.p2.garbagecollector@default:default,org.eclipse.equinox.p2.jarprocessor@default:default,org.eclipse.equinox.p2.metadata@default:default,org.eclipse.equinox.p2.metadata.repository@default:default,org.eclipse.equinox.p2.touchpoint.eclipse@default:default,org.eclipse.equinox.p2.touchpoint.natives@default:default,org.eclipse.equinox.p2.ui@default:default,org.eclipse.equinox.p2.ui.admin@default:default,org.eclipse.equinox.p2.ui.admin.rcp@default:default,org.eclipse.equinox.p2.ui.sdk@default:default,org.eclipse.equinox.p2.updatechecker@default:default,org.eclipse.equinox.simpleconfigurator@default:true,org.eclipse.equinox.simpleconfigurator.manipulator@default:default"/>
+<stringAttribute key="workspace_bundles" value="org.eclipse.ecf@default:default,org.eclipse.ecf.filetransfer@default:default,org.eclipse.ecf.identity@default:default,org.eclipse.ecf.provider.filetransfer@default:default,org.eclipse.equinox.frameworkadmin@default:default,org.eclipse.equinox.frameworkadmin.equinox@default:true,org.eclipse.equinox.p2.artifact.processors@default:default,org.eclipse.equinox.p2.artifact.repository@default:default,org.eclipse.equinox.p2.console@default:true,org.eclipse.equinox.p2.core@default:default,org.eclipse.equinox.p2.director@default:default,org.eclipse.equinox.p2.download@default:default,org.eclipse.equinox.p2.engine@default:default,org.eclipse.equinox.p2.exemplarysetup@default:true,org.eclipse.equinox.p2.garbagecollector@default:default,org.eclipse.equinox.p2.jarprocessor@default:default,org.eclipse.equinox.p2.metadata@default:default,org.eclipse.equinox.p2.metadata.repository@default:default,org.eclipse.equinox.p2.touchpoint.eclipse@default:default,org.eclipse.equinox.p2.touchpoint.natives@default:default,org.eclipse.equinox.p2.ui@default:default,org.eclipse.equinox.p2.ui.admin@default:default,org.eclipse.equinox.p2.ui.admin.rcp@default:default,org.eclipse.equinox.p2.ui.sdk@default:default,org.eclipse.equinox.p2.updatechecker@default:default,org.eclipse.equinox.simpleconfigurator@default:true,org.eclipse.equinox.simpleconfigurator.manipulator@default:default"/>
 </launchConfiguration>
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
index 2c8f10d..4162a3d 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
@@ -74,7 +74,13 @@ public class ProvSDKMessages extends NLS {
 	public static String SchedulerStartup_11PM;
 	public static String SchedulerStartup_12AM;
 	public static String AutomaticUpdatesJob_AutomaticUpdateSearch;
+	public static String AutomaticUpdatesPopup_RemindAndPrefLink;
+	public static String AutomaticUpdatesPopup_ReminderJobTitle;
 	public static String AutomaticUpdatesPreferencePage_findUpdates;
+	public static String AutomaticUpdateScheduler_15Minutes;
+	public static String AutomaticUpdateScheduler_30Minutes;
+	public static String AutomaticUpdateScheduler_5Minutes;
+	public static String AutomaticUpdateScheduler_60Minutes;
 	public static String AutomaticUpdateScheduler_UpdateNotInitialized;
 	public static String AutomaticUpdatesDialog_DownloadedNotification;
 	public static String AutomaticUpdatesDialog_UpdatesAvailableTitle;
@@ -87,6 +93,9 @@ public class ProvSDKMessages extends NLS {
 	public static String AutomaticUpdatesPreferencePage_searchAndNotify;
 	public static String AutomaticUpdatesPreferencePage_downloadAndNotify;
 	public static String AutomaticUpdatesPreferencePage_at;
+	public static String AutomaticUpdatesPreferencePage_RemindGroup;
+	public static String AutomaticUpdatesPreferencePage_RemindSchedule;
+	public static String AutomaticUpdatesPreferencePage_RemindOnce;
 	public static String AutomaticUpdatesJob_Updates;
 	public static String AutomaticUpdatesDialog_ClickToReviewDownloaded;
 	public static String AutomaticUpdatesDialog_ClickToReviewNotDownloaded;
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
index 0567977..b332f68 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
@@ -58,21 +58,30 @@ SchedulerStartup_10PM=10:00 PM
 SchedulerStartup_11PM=11:00 PM
 SchedulerStartup_12AM=12:00 AM
 AutomaticUpdatesJob_AutomaticUpdateSearch=Automatic Update Search
+AutomaticUpdatesPopup_RemindAndPrefLink=<a href="{0}">Remind</a> me in {1}.\nSet reminder <a href="{2}">preferences</a>
+AutomaticUpdatesPopup_ReminderJobTitle=Update reminder job
 AutomaticUpdatesPreferencePage_findUpdates=Automatically &find new updates and notify me
+AutomaticUpdateScheduler_15Minutes=15 minutes
+AutomaticUpdateScheduler_30Minutes=30 minutes
+AutomaticUpdateScheduler_5Minutes=5 minutes
+AutomaticUpdateScheduler_60Minutes=Hour
 AutomaticUpdateScheduler_UpdateNotInitialized=The update checker service is not initialized
 AutomaticUpdatesDialog_DownloadedNotification=Updates have been downloaded.  You may review and install them when you are ready.
 AutomaticUpdatesDialog_UpdatesAvailableTitle=Updates Available
 AutomaticUpdater_AutomaticDownloadOperationName=Automatic updates download
 AutomaticUpdatesDialog_UpdatesFoundNotification=There are updates available for your software.  You may review and install them when you are ready.
-AutomaticUpdatesPreferencePage_UpdateSchedule=Update &Schedule
+AutomaticUpdatesPreferencePage_UpdateSchedule=&Update schedule
 AutomaticUpdatesPreferencePage_findOnStart=Look for updates each time &platform is started
-AutomaticUpdatesPreferencePage_findOnSchedule=&Look for updates on the following schedule:
-AutomaticUpdatesPreferencePage_downloadOptions=Download &Options
+AutomaticUpdatesPreferencePage_findOnSchedule=Look for updates on the following &schedule:
+AutomaticUpdatesPreferencePage_downloadOptions=&Download options
 AutomaticUpdatesPreferencePage_searchAndNotify=Search for updates and &notify me when they are available
-AutomaticUpdatesPreferencePage_downloadAndNotify=Download new &updates automatically and notify me when ready to install them
+AutomaticUpdatesPreferencePage_downloadAndNotify=Download new updates &automatically and notify me when ready to install them
 AutomaticUpdatesDialog_ClickToReviewDownloaded=Software updates have been downloaded.\nClick here to <a>Review and Install Updates</a>.
 AutomaticUpdatesDialog_ClickToReviewNotDownloaded=Updates are available for your software.\nClick here to <a>Review and Install Updates</a>.
 AutomaticUpdatesPreferencePage_at=at
+AutomaticUpdatesPreferencePage_RemindGroup=&When updates are found
+AutomaticUpdatesPreferencePage_RemindSchedule=&Remind me about updates every:
+AutomaticUpdatesPreferencePage_RemindOnce=Notify me &once about updates
 AutomaticUpdatesJob_Updates=Updates
 ProvSDKUIActivator_NoSelfProfile=Could not locate the running profile instance
 ProvisioningPreferencePage_BrowsingPrefsGroup=Browsing for updates
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/AutomaticUpdatesPreferencePage.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/AutomaticUpdatesPreferencePage.java
index 24042fc..c80e4ee 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/AutomaticUpdatesPreferencePage.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/AutomaticUpdatesPreferencePage.java
@@ -12,6 +12,7 @@ package org.eclipse.equinox.internal.p2.ui.sdk.prefs;
 
 import org.eclipse.core.runtime.Preferences;
 import org.eclipse.equinox.internal.p2.ui.sdk.*;
+import org.eclipse.equinox.internal.p2.ui.sdk.updates.AutomaticUpdatesPopup;
 import org.eclipse.jface.dialogs.Dialog;
 import org.eclipse.jface.preference.PreferencePage;
 import org.eclipse.swt.SWT;
@@ -26,15 +27,14 @@ import org.eclipse.ui.IWorkbenchPreferencePage;
 public class AutomaticUpdatesPreferencePage extends PreferencePage implements IWorkbenchPreferencePage {
 
 	private Button enabledCheck;
-	private Button onStartupRadio;
-	private Button onScheduleRadio;
+	private Button onStartupRadio, onScheduleRadio;
 	private Combo dayCombo;
 	private Label atLabel;
 	private Combo hourCombo;
-	private Button searchOnlyRadio;
-	private Button searchAndDownloadRadio;
-	private Group updateScheduleGroup;
-	private Group downloadGroup;
+	private Button searchOnlyRadio, searchAndDownloadRadio;
+	private Button remindOnceRadio, remindScheduleRadio;
+	private Combo remindElapseCombo;
+	private Group updateScheduleGroup, downloadGroup, remindGroup;
 
 	public void init(IWorkbench workbench) {
 		// nothing to init
@@ -129,6 +129,46 @@ public class AutomaticUpdatesPreferencePage extends PreferencePage implements IW
 			}
 		});
 
+		createSpacer(container, 1);
+
+		remindGroup = new Group(container, SWT.NONE);
+		remindGroup.setText(ProvSDKMessages.AutomaticUpdatesPreferencePage_RemindGroup);
+		layout = new GridLayout();
+		layout.numColumns = 3;
+		remindGroup.setLayout(layout);
+		gd = new GridData(GridData.FILL_HORIZONTAL);
+		remindGroup.setLayoutData(gd);
+
+		remindOnceRadio = new Button(remindGroup, SWT.RADIO);
+		remindOnceRadio.setText(ProvSDKMessages.AutomaticUpdatesPreferencePage_RemindOnce);
+		gd = new GridData();
+		gd.horizontalSpan = 3;
+		remindOnceRadio.setLayoutData(gd);
+		remindOnceRadio.addSelectionListener(new SelectionAdapter() {
+			public void widgetSelected(SelectionEvent e) {
+				pageChanged();
+			}
+		});
+
+		remindScheduleRadio = new Button(remindGroup, SWT.RADIO);
+		remindScheduleRadio.setText(ProvSDKMessages.AutomaticUpdatesPreferencePage_RemindSchedule);
+		gd = new GridData();
+		gd.horizontalSpan = 3;
+		remindScheduleRadio.setLayoutData(gd);
+		remindScheduleRadio.addSelectionListener(new SelectionAdapter() {
+			public void widgetSelected(SelectionEvent e) {
+				pageChanged();
+			}
+		});
+
+		remindElapseCombo = new Combo(remindGroup, SWT.READ_ONLY);
+		remindElapseCombo.setItems(AutomaticUpdatesPopup.ELAPSED);
+
+		gd = new GridData();
+		gd.widthHint = 200;
+		gd.horizontalIndent = 30;
+		remindElapseCombo.setLayoutData(gd);
+
 		initialize();
 
 		enabledCheck.addSelectionListener(new SelectionAdapter() {
@@ -156,6 +196,9 @@ public class AutomaticUpdatesPreferencePage extends PreferencePage implements IW
 		dayCombo.setText(AutomaticUpdateScheduler.DAYS[getDay(pref, false)]);
 		hourCombo.setText(AutomaticUpdateScheduler.HOURS[getHour(pref, false)]);
 
+		remindScheduleRadio.setSelection(pref.getBoolean(PreferenceConstants.PREF_REMIND_SCHEDULE));
+		remindOnceRadio.setSelection(!pref.getBoolean(PreferenceConstants.PREF_REMIND_SCHEDULE));
+		remindElapseCombo.setText(pref.getString(PreferenceConstants.PREF_REMIND_ELAPSED));
 		searchOnlyRadio.setSelection(!pref.getBoolean(PreferenceConstants.PREF_DOWNLOAD_ONLY));
 		searchAndDownloadRadio.setSelection(pref.getBoolean(PreferenceConstants.PREF_DOWNLOAD_ONLY));
 
@@ -180,6 +223,10 @@ public class AutomaticUpdatesPreferencePage extends PreferencePage implements IW
 		downloadGroup.setEnabled(master);
 		searchOnlyRadio.setEnabled(master);
 		searchAndDownloadRadio.setEnabled(master);
+		remindGroup.setEnabled(master);
+		remindScheduleRadio.setEnabled(master);
+		remindOnceRadio.setEnabled(master);
+		remindElapseCombo.setEnabled(master && remindScheduleRadio.getSelection());
 	}
 
 	protected void performDefaults() {
@@ -193,6 +240,10 @@ public class AutomaticUpdatesPreferencePage extends PreferencePage implements IW
 		dayCombo.setText(AutomaticUpdateScheduler.DAYS[getDay(pref, true)]);
 		hourCombo.setText(AutomaticUpdateScheduler.HOURS[getHour(pref, true)]);
 
+		remindOnceRadio.setSelection(!pref.getDefaultBoolean(PreferenceConstants.PREF_REMIND_SCHEDULE));
+		remindScheduleRadio.setSelection(pref.getDefaultBoolean(PreferenceConstants.PREF_REMIND_SCHEDULE));
+		remindElapseCombo.setText(pref.getDefaultString(PreferenceConstants.PREF_REMIND_ELAPSED));
+
 		searchOnlyRadio.setSelection(!pref.getDefaultBoolean(PreferenceConstants.PREF_DOWNLOAD_ONLY));
 		searchAndDownloadRadio.setSelection(pref.getDefaultBoolean(PreferenceConstants.PREF_DOWNLOAD_ONLY));
 		pageChanged();
@@ -210,6 +261,11 @@ public class AutomaticUpdatesPreferencePage extends PreferencePage implements IW
 		else
 			pref.setValue(PreferenceConstants.PREF_AUTO_UPDATE_SCHEDULE, PreferenceConstants.PREF_UPDATE_ON_SCHEDULE);
 
+		if (remindScheduleRadio.getSelection()) {
+			pref.setValue(PreferenceConstants.PREF_REMIND_SCHEDULE, true);
+			pref.setValue(PreferenceConstants.PREF_REMIND_ELAPSED, remindElapseCombo.getText());
+		}
+
 		pref.setValue(AutomaticUpdateScheduler.P_DAY, dayCombo.getText());
 		pref.setValue(AutomaticUpdateScheduler.P_HOUR, hourCombo.getText());
 
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/PreferenceConstants.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/PreferenceConstants.java
index 2036901..fb5ff8d 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/PreferenceConstants.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/PreferenceConstants.java
@@ -21,6 +21,8 @@ public class PreferenceConstants {
 	public static final String PREF_UPDATE_ON_STARTUP = "on-startup"; //$NON-NLS-1$
 	public static final String PREF_UPDATE_ON_SCHEDULE = "on-schedule"; //$NON-NLS-1$
 	public static final String PREF_DOWNLOAD_ONLY = "download"; // value is true or false, default is false //$NON-NLS-1$
+	public static final String PREF_REMIND_SCHEDULE = "remindOnSchedule"; // value is true or false //$NON-NLS-1$
+	public static final String PREF_REMIND_ELAPSED = "remindElapsedTime"; // string value defined in AutomaticUpdateScheduler //$NON-NLS-1$
 	public static final String PREF_SHOW_LATEST_VERSION = "showLatestVersion"; //$NON-NLS-1$
 	public static final String PREF_ENABLE_GC = "enableArtifactGC"; //$NON-NLS-1$
 	public static final String PREF_GC_IMMEDIATELY = "gcUnusedFilesImmediately"; //$NON-NLS-1$
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/PreferenceInitializer.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/PreferenceInitializer.java
index 1a5db1f..85f9629 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/PreferenceInitializer.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/PreferenceInitializer.java
@@ -12,6 +12,7 @@ package org.eclipse.equinox.internal.p2.ui.sdk.prefs;
 
 import org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer;
 import org.eclipse.core.runtime.preferences.DefaultScope;
+import org.eclipse.equinox.internal.p2.ui.sdk.ProvSDKMessages;
 import org.osgi.service.prefs.Preferences;
 
 /**
@@ -27,9 +28,11 @@ public class PreferenceInitializer extends AbstractPreferenceInitializer {
 		node.putBoolean(PreferenceConstants.PREF_AUTO_UPDATE_ENABLED, false);
 		node.put(PreferenceConstants.PREF_AUTO_UPDATE_SCHEDULE, PreferenceConstants.PREF_UPDATE_ON_STARTUP);
 		node.putBoolean(PreferenceConstants.PREF_DOWNLOAD_ONLY, false);
+		node.putBoolean(PreferenceConstants.PREF_REMIND_SCHEDULE, false);
 		node.putBoolean(PreferenceConstants.PREF_SHOW_LATEST_VERSION, true);
 		node.putBoolean(PreferenceConstants.PREF_ENABLE_GC, false);
 		node.putBoolean(PreferenceConstants.PREF_GC_IMMEDIATELY, true);
+		node.put(PreferenceConstants.PREF_REMIND_ELAPSED, ProvSDKMessages.AutomaticUpdateScheduler_5Minutes);
 	}
 
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
index c7ced2f..4034bba 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
@@ -21,6 +21,7 @@ import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.query.*;
 import org.eclipse.equinox.p2.ui.ProvUI;
 import org.eclipse.equinox.p2.ui.ProvisioningOperationRunner;
+import org.eclipse.equinox.p2.ui.model.ProfileElement;
 import org.eclipse.equinox.p2.ui.operations.*;
 import org.eclipse.equinox.p2.ui.query.ElementQueryDescriptor;
 import org.eclipse.equinox.p2.ui.query.IProvElementQueryProvider;
@@ -37,7 +38,6 @@ public class AutomaticUpdater implements IUpdateListener {
 
 	public AutomaticUpdater() {
 		prefs = ProvSDKUIActivator.getDefault().getPluginPreferences();
-
 	}
 
 	public void updatesAvailable(final UpdateEvent event) {
@@ -57,7 +57,7 @@ public class AutomaticUpdater implements IUpdateListener {
 							if (status.isOK()) {
 								PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable() {
 									public void run() {
-										new AutomaticUpdatesPopup(toUpdate, event.getProfile(), true).open();
+										new AutomaticUpdatesPopup(toUpdate, event.getProfile(), true, prefs).open();
 									}
 								});
 							} else if (status.getSeverity() != IStatus.CANCEL) {
@@ -69,7 +69,7 @@ public class AutomaticUpdater implements IUpdateListener {
 			} else {
 				PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable() {
 					public void run() {
-						new AutomaticUpdatesPopup(toUpdate, event.getProfile(), false).open();
+						new AutomaticUpdatesPopup(toUpdate, event.getProfile(), false, prefs).open();
 					}
 				});
 			}
@@ -93,7 +93,12 @@ public class AutomaticUpdater implements IUpdateListener {
 				return result;
 			}
 		};
-		ElementQueryDescriptor descriptor = ProvSDKUIActivator.getDefault().getQueryProvider().getQueryDescriptor(null, IProvElementQueryProvider.AVAILABLE_UPDATES);
-		return (IInstallableUnit[]) rootQueryable.query(descriptor.query, descriptor.result, null).toArray(IInstallableUnit.class);
+		ProfileElement element = new ProfileElement(event.getProfile());
+		ElementQueryDescriptor descriptor = ProvSDKUIActivator.getDefault().getQueryProvider().getQueryDescriptor(element, IProvElementQueryProvider.AVAILABLE_UPDATES);
+		Object[] elements = rootQueryable.query(descriptor.query, descriptor.result, null).toArray(Object.class);
+		IInstallableUnit[] result = new IInstallableUnit[elements.length];
+		for (int i = 0; i < result.length; i++)
+			result[i] = (IInstallableUnit) ProvUI.getAdapter(elements[i], IInstallableUnit.class);
+		return result;
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdatesPopup.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdatesPopup.java
index 6b3e3c5..7c97b51 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdatesPopup.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdatesPopup.java
@@ -10,21 +10,27 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.sdk.updates;
 
+import org.eclipse.core.runtime.*;
+import org.eclipse.core.runtime.Preferences.IPropertyChangeListener;
+import org.eclipse.core.runtime.Preferences.PropertyChangeEvent;
 import org.eclipse.equinox.internal.p2.ui.sdk.ProvSDKMessages;
 import org.eclipse.equinox.internal.p2.ui.sdk.ProvSDKUIActivator;
+import org.eclipse.equinox.internal.p2.ui.sdk.prefs.PreferenceConstants;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.ui.dialogs.UpdateDialog;
 import org.eclipse.jface.dialogs.IDialogSettings;
 import org.eclipse.jface.dialogs.PopupDialog;
-import org.eclipse.jface.resource.JFaceResources;
+import org.eclipse.jface.preference.PreferenceDialog;
+import org.eclipse.osgi.util.NLS;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.events.SelectionAdapter;
 import org.eclipse.swt.events.SelectionEvent;
-import org.eclipse.swt.graphics.*;
 import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.*;
+import org.eclipse.ui.dialogs.PreferencesUtil;
+import org.eclipse.ui.progress.WorkbenchJob;
 
 /**
  * AutomaticUpdatesPopup is an async popup dialog for notifying
@@ -33,18 +39,38 @@ import org.eclipse.swt.widgets.*;
  * @since 3.4
  */
 public class AutomaticUpdatesPopup extends PopupDialog {
-	private static final int CHAR_HEIGHT = 5;
-	private static final int CHAR_WIDTH = 40;
+	public static final String[] ELAPSED = {ProvSDKMessages.AutomaticUpdateScheduler_5Minutes, ProvSDKMessages.AutomaticUpdateScheduler_15Minutes, ProvSDKMessages.AutomaticUpdateScheduler_30Minutes, ProvSDKMessages.AutomaticUpdateScheduler_60Minutes};
+	private static final long MINUTE = 60 * 1000L;
+	Preferences prefs;
+	long remindDelay = -1L;
+	IPropertyChangeListener listener;
+	WorkbenchJob remindJob;
+
+	private static final String REMIND_HREF = "RMD"; //$NON-NLS-1$
+	private static final String PREFS_HREF = "PREFS"; //$NON-NLS-1$
 	private static final String DIALOG_SETTINGS_SECTION = "AutomaticUpdatesPopup"; //$NON-NLS-1$
 	IInstallableUnit[] toUpdate;
 	Profile profile;
 	boolean downloaded;
 
-	public AutomaticUpdatesPopup(IInstallableUnit[] toUpdate, Profile profile, boolean alreadyDownloaded) {
+	public AutomaticUpdatesPopup(IInstallableUnit[] toUpdate, Profile profile, boolean alreadyDownloaded, Preferences prefs) {
 		super((Shell) null, PopupDialog.INFOPOPUPRESIZE_SHELLSTYLE | SWT.MODELESS, true, true, false, false, ProvSDKMessages.AutomaticUpdatesDialog_UpdatesAvailableTitle, null);
 		downloaded = alreadyDownloaded;
 		this.profile = profile;
 		this.toUpdate = toUpdate;
+		this.prefs = prefs;
+		remindDelay = computeRemindDelay();
+		listener = new IPropertyChangeListener() {
+
+			public void propertyChange(PropertyChangeEvent event) {
+				if (PreferenceConstants.PREF_REMIND_SCHEDULE.equals(event.getProperty()) || PreferenceConstants.PREF_REMIND_ELAPSED.equals(event.getProperty())) {
+					computeRemindDelay();
+					scheduleRemindJob();
+				}
+			}
+		};
+		prefs.addPropertyChangeListener(listener);
+
 	}
 
 	protected Control createDialogArea(Composite parent) {
@@ -64,24 +90,36 @@ public class AutomaticUpdatesPopup extends PopupDialog {
 			}
 		});
 		infoLink.setLayoutData(new GridData(GridData.FILL_BOTH));
-		return composite;
 
-	}
+		// spacer
+		new Label(parent, SWT.NONE);
 
-	protected Point getInitialSize() {
-		return charToPixels(new Point(CHAR_WIDTH, CHAR_HEIGHT));
-	}
+		Link remindLink = new Link(parent, SWT.MULTI | SWT.WRAP);
+		remindLink.setText(NLS.bind(ProvSDKMessages.AutomaticUpdatesPopup_RemindAndPrefLink, new String[] {REMIND_HREF, prefs.getString(PreferenceConstants.PREF_REMIND_ELAPSED), PREFS_HREF}));
+		remindLink.addSelectionListener(new SelectionAdapter() {
+			public void widgetSelected(SelectionEvent e) {
+				if (REMIND_HREF.equals(e.text)) {
+					if (prefs.getBoolean(PreferenceConstants.PREF_REMIND_SCHEDULE)) {
+						// We are already on a remind schedule, so just set up the reminder
+						getShell().setVisible(false);
+						scheduleRemindJob();
+					} else {
+						// We were not on a schedule.  Setting the pref value
+						// will activate our listener and start the remind job
+						getShell().setVisible(false);
+						prefs.setValue(PreferenceConstants.PREF_REMIND_SCHEDULE, true);
+					}
+				}
+				if (PREFS_HREF.equals(e.text)) {
+					PreferenceDialog dialog = PreferencesUtil.createPreferenceDialogOn(getShell(), PreferenceConstants.PREF_PAGE_AUTO_UPDATES, null, null);
+					dialog.open();
+				}
+			}
+		});
+		infoLink.setLayoutData(new GridData(GridData.FILL_BOTH));
+
+		return composite;
 
-	private Point charToPixels(Point charBounds) {
-		int x = charBounds.x;
-		int y = charBounds.y;
-		GC gc = new GC(getContents());
-		gc.setFont(JFaceResources.getDialogFont());
-		FontMetrics fontMetrics = gc.getFontMetrics();
-		x = x * fontMetrics.getAverageCharWidth();
-		y = y * fontMetrics.getHeight();
-		gc.dispose();
-		return new Point(x, y);
 	}
 
 	protected IDialogSettings getDialogBoundsSettings() {
@@ -92,4 +130,73 @@ public class AutomaticUpdatesPopup extends PopupDialog {
 		}
 		return section;
 	}
+
+	public boolean close() {
+		prefs.removePropertyChangeListener(listener);
+		cancelRemindJob();
+		remindJob = null;
+		listener = null;
+		return super.close();
+	}
+
+	void scheduleRemindJob() {
+		// Cancel any pending remind job if there is one
+		if (remindJob != null)
+			remindJob.cancel();
+		// If no updates have been found, there is nothing to remind
+		if (toUpdate == null)
+			return;
+		if (remindDelay < 0)
+			return;
+		remindJob = new WorkbenchJob(ProvSDKMessages.AutomaticUpdatesPopup_ReminderJobTitle) {
+			public IStatus runInUIThread(IProgressMonitor monitor) {
+				Shell shell = getShell();
+				if (shell != null && !shell.isDisposed())
+					shell.setVisible(true);
+				return Status.OK_STATUS;
+			}
+		};
+		remindJob.setSystem(true);
+		remindJob.schedule(remindDelay);
+
+	}
+
+	/*
+	 * Computes the number of milliseconds for the delay
+	 * in reminding the user of updates
+	 */
+	long computeRemindDelay() {
+		if (prefs.getBoolean(PreferenceConstants.PREF_REMIND_SCHEDULE)) {
+			String elapsed = prefs.getString(PreferenceConstants.PREF_REMIND_ELAPSED);
+			for (int d = 0; d < ELAPSED.length; d++)
+				if (ELAPSED[d].equals(elapsed))
+					switch (d) {
+						case 0 :
+							// 5 minutes
+							//return 5 * MINUTE;
+							return 2000L;
+						case 1 :
+							// 15 minutes
+							return 15 * MINUTE;
+						case 2 :
+							// 30 minutes
+							return 30 * MINUTE;
+						case 3 :
+							// 1 hour
+							return 60 * MINUTE;
+					}
+		}
+		return -1L;
+	}
+
+	private void cancelRemindJob() {
+		if (remindJob != null) {
+			remindJob.cancel();
+		}
+	}
+
+	protected void configureShell(Shell newShell) {
+		super.configureShell(newShell);
+		newShell.setText(ProvSDKMessages.AutomaticUpdatesDialog_UpdatesAvailableTitle);
+	}
 }
commit bfb2f1266655ca6338eda2f5bd61554deffe9676
Author: Susan Franklin <sfranklin>
Date:   Fri Nov 30 16:31:18 2007 +0000

    Bug 207493 - [prov] [ui] - "Remind me Later" for auto updates <handle deactivate during hide>

11	2	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdatesPopup.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdatesPopup.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdatesPopup.java
index b13f4bd..2bf53cc 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdatesPopup.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdatesPopup.java
@@ -13,6 +13,7 @@ package org.eclipse.equinox.internal.p2.ui.sdk.updates;
 import org.eclipse.core.runtime.*;
 import org.eclipse.core.runtime.Preferences.IPropertyChangeListener;
 import org.eclipse.core.runtime.Preferences.PropertyChangeEvent;
+import org.eclipse.core.runtime.jobs.Job;
 import org.eclipse.equinox.internal.p2.ui.sdk.ProvSDKMessages;
 import org.eclipse.equinox.internal.p2.ui.sdk.ProvSDKUIActivator;
 import org.eclipse.equinox.internal.p2.ui.sdk.prefs.PreferenceConstants;
@@ -52,6 +53,7 @@ public class AutomaticUpdatesPopup extends PopupDialog {
 	IInstallableUnit[] toUpdate;
 	Profile profile;
 	boolean downloaded;
+	boolean hidden = false;
 
 	public AutomaticUpdatesPopup(IInstallableUnit[] toUpdate, Profile profile, boolean alreadyDownloaded, Preferences prefs) {
 		super((Shell) null, PopupDialog.INFOPOPUPRESIZE_SHELLSTYLE | SWT.MODELESS, true, true, false, false, ProvSDKMessages.AutomaticUpdatesDialog_UpdatesAvailableTitle, null);
@@ -94,18 +96,20 @@ public class AutomaticUpdatesPopup extends PopupDialog {
 		// spacer
 		new Label(parent, SWT.NONE);
 
-		Link remindLink = new Link(parent, SWT.MULTI | SWT.WRAP);
+		Link remindLink = new Link(parent, SWT.MULTI | SWT.WRAP | SWT.RIGHT);
 		remindLink.setText(NLS.bind(ProvSDKMessages.AutomaticUpdatesPopup_RemindAndPrefLink, new String[] {REMIND_HREF, prefs.getString(PreferenceConstants.PREF_REMIND_ELAPSED), PREFS_HREF}));
 		remindLink.addSelectionListener(new SelectionAdapter() {
 			public void widgetSelected(SelectionEvent e) {
 				if (REMIND_HREF.equals(e.text)) {
 					if (prefs.getBoolean(PreferenceConstants.PREF_REMIND_SCHEDULE)) {
 						// We are already on a remind schedule, so just set up the reminder
+						hidden = true;
 						getShell().setVisible(false);
 						scheduleRemindJob();
 					} else {
 						// We were not on a schedule.  Setting the pref value
 						// will activate our listener and start the remind job
+						hidden = true;
 						getShell().setVisible(false);
 						prefs.setValue(PreferenceConstants.PREF_REMIND_SCHEDULE, true);
 					}
@@ -132,6 +136,8 @@ public class AutomaticUpdatesPopup extends PopupDialog {
 	}
 
 	public boolean close() {
+		if (hidden)
+			return false;
 		prefs.removePropertyChangeListener(listener);
 		cancelRemindJob();
 		remindJob = null;
@@ -151,12 +157,15 @@ public class AutomaticUpdatesPopup extends PopupDialog {
 		remindJob = new WorkbenchJob(ProvSDKMessages.AutomaticUpdatesPopup_ReminderJobTitle) {
 			public IStatus runInUIThread(IProgressMonitor monitor) {
 				Shell shell = getShell();
-				if (shell != null && !shell.isDisposed())
+				if (shell != null && !shell.isDisposed()) {
 					shell.setVisible(true);
+					hidden = false;
+				}
 				return Status.OK_STATUS;
 			}
 		};
 		remindJob.setSystem(true);
+		remindJob.setPriority(Job.INTERACTIVE);
 		remindJob.schedule(remindDelay);
 
 	}
commit d866d6e4bff89ca043db10bfbd5db7a9ac633b5e
Author: Susan Franklin <sfranklin>
Date:   Wed Dec 5 01:00:08 2007 +0000

    Bug 207493 - [prov] [ui] - "Remind me Later" for auto updates <handle deactivate during hide>

1	1	bundles/org.eclipse.equinox.p2.ui.admin.rcp/src/org/eclipse/equinox/p2/ui/admin/rcp/ApplicationWorkbenchWindowAdvisor.java
133	0	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/StatusLineCLabelContribution.java
80	12	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdatesPopup.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin.rcp/src/org/eclipse/equinox/p2/ui/admin/rcp/ApplicationWorkbenchWindowAdvisor.java b/bundles/org.eclipse.equinox.p2.ui.admin.rcp/src/org/eclipse/equinox/p2/ui/admin/rcp/ApplicationWorkbenchWindowAdvisor.java
index ff81fb7..3c6a84a 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin.rcp/src/org/eclipse/equinox/p2/ui/admin/rcp/ApplicationWorkbenchWindowAdvisor.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin.rcp/src/org/eclipse/equinox/p2/ui/admin/rcp/ApplicationWorkbenchWindowAdvisor.java
@@ -32,7 +32,7 @@ public class ApplicationWorkbenchWindowAdvisor extends WorkbenchWindowAdvisor {
 		PlatformUI.getWorkbench().getProgressService();
 		configurer.setInitialSize(new Point(800, 600));
 		configurer.setShowCoolBar(false);
-		configurer.setShowStatusLine(false);
+		configurer.setShowStatusLine(true);
 		configurer.setShowProgressIndicator(true);
 		configurer.setTitle(ProvAdminUIMessages.ApplicationWindowTitle);
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/StatusLineCLabelContribution.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/StatusLineCLabelContribution.java
new file mode 100644
index 0000000..7d222a0
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/StatusLineCLabelContribution.java
@@ -0,0 +1,133 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.ui.sdk;
+
+import org.eclipse.jface.action.*;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.custom.CLabel;
+import org.eclipse.swt.graphics.*;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Listener;
+
+/**
+ * @since 3.4
+ */
+public class StatusLineCLabelContribution extends ContributionItem {
+
+	public final static int DEFAULT_CHAR_WIDTH = 40;
+
+	private int charWidth;
+	private CLabel label;
+	private Image image;
+	private String text = ""; //$NON-NLS-1$
+	private int widthHint = -1;
+	private int heightHint = -1;
+
+	private Listener listener;
+	private int eventType;
+	private String tooltip;
+
+	public StatusLineCLabelContribution(String id, int charWidth) {
+		super(id);
+		this.charWidth = charWidth;
+		setVisible(false); // no text to start with
+	}
+
+	public void fill(Composite parent) {
+		label = new CLabel(parent, SWT.DEFAULT);
+		StatusLineLayoutData statusLineLayoutData = new StatusLineLayoutData();
+
+		if (widthHint < 0) {
+			GC gc = new GC(parent);
+			gc.setFont(parent.getFont());
+			FontMetrics fm = gc.getFontMetrics();
+			widthHint = fm.getAverageCharWidth() * charWidth;
+			heightHint = fm.getHeight();
+			gc.dispose();
+		}
+
+		statusLineLayoutData.widthHint = widthHint;
+		label.setLayoutData(statusLineLayoutData);
+		label.setText(text);
+		label.setImage(image);
+		if (listener != null) {
+			label.addListener(eventType, listener);
+		}
+		if (tooltip != null) {
+			label.setToolTipText(tooltip);
+		}
+
+		statusLineLayoutData = new StatusLineLayoutData();
+		statusLineLayoutData.heightHint = heightHint;
+	}
+
+	public void addListener(int type, Listener labelListener) {
+		this.eventType = type;
+		this.listener = labelListener;
+	}
+
+	public void setText(String text) {
+		if (text == null)
+			throw new NullPointerException();
+
+		this.text = text;
+
+		if (label != null && !label.isDisposed())
+			label.setText(this.text);
+
+		if (this.text.length() == 0) {
+			if (isVisible()) {
+				setVisible(false);
+				IContributionManager contributionManager = getParent();
+
+				if (contributionManager != null)
+					contributionManager.update(true);
+			}
+		} else {
+			if (!isVisible()) {
+				setVisible(true);
+				IContributionManager contributionManager = getParent();
+
+				if (contributionManager != null)
+					contributionManager.update(true);
+			}
+		}
+	}
+
+	public void setTooltip(String tooltip) {
+		if (tooltip == null)
+			throw new NullPointerException();
+
+		this.tooltip = tooltip;
+
+		if (label != null && !label.isDisposed()) {
+			label.setToolTipText(this.tooltip);
+		}
+	}
+
+	public void setImage(Image image) {
+		if (image == null)
+			throw new NullPointerException();
+
+		this.image = image;
+
+		if (label != null && !label.isDisposed())
+			label.setImage(this.image);
+
+		if (!isVisible()) {
+			setVisible(true);
+			IContributionManager contributionManager = getParent();
+
+			if (contributionManager != null)
+				contributionManager.update(true);
+		}
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdatesPopup.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdatesPopup.java
index 2bf53cc..6acb56d 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdatesPopup.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdatesPopup.java
@@ -14,12 +14,13 @@ import org.eclipse.core.runtime.*;
 import org.eclipse.core.runtime.Preferences.IPropertyChangeListener;
 import org.eclipse.core.runtime.Preferences.PropertyChangeEvent;
 import org.eclipse.core.runtime.jobs.Job;
-import org.eclipse.equinox.internal.p2.ui.sdk.ProvSDKMessages;
-import org.eclipse.equinox.internal.p2.ui.sdk.ProvSDKUIActivator;
+import org.eclipse.equinox.internal.p2.ui.sdk.*;
 import org.eclipse.equinox.internal.p2.ui.sdk.prefs.PreferenceConstants;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.ui.ProvUIImages;
 import org.eclipse.equinox.p2.ui.dialogs.UpdateDialog;
+import org.eclipse.jface.action.IStatusLineManager;
 import org.eclipse.jface.dialogs.IDialogSettings;
 import org.eclipse.jface.dialogs.PopupDialog;
 import org.eclipse.jface.preference.PreferenceDialog;
@@ -30,6 +31,7 @@ import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.*;
+import org.eclipse.ui.*;
 import org.eclipse.ui.dialogs.PreferencesUtil;
 import org.eclipse.ui.progress.WorkbenchJob;
 
@@ -42,18 +44,20 @@ import org.eclipse.ui.progress.WorkbenchJob;
 public class AutomaticUpdatesPopup extends PopupDialog {
 	public static final String[] ELAPSED = {ProvSDKMessages.AutomaticUpdateScheduler_5Minutes, ProvSDKMessages.AutomaticUpdateScheduler_15Minutes, ProvSDKMessages.AutomaticUpdateScheduler_30Minutes, ProvSDKMessages.AutomaticUpdateScheduler_60Minutes};
 	private static final long MINUTE = 60 * 1000L;
+	private static final String REMIND_HREF = "RMD"; //$NON-NLS-1$
+	private static final String PREFS_HREF = "PREFS"; //$NON-NLS-1$
+	public static final String AUTO_UPDATE_STATUS_ITEM = "AutomaticUpdatesPopup"; //$NON-NLS-1$
+	private static final String DIALOG_SETTINGS_SECTION = "AutomaticUpdatesPopup"; //$NON-NLS-1$
+
 	Preferences prefs;
 	long remindDelay = -1L;
 	IPropertyChangeListener listener;
 	WorkbenchJob remindJob;
-
-	private static final String REMIND_HREF = "RMD"; //$NON-NLS-1$
-	private static final String PREFS_HREF = "PREFS"; //$NON-NLS-1$
-	private static final String DIALOG_SETTINGS_SECTION = "AutomaticUpdatesPopup"; //$NON-NLS-1$
 	IInstallableUnit[] toUpdate;
 	Profile profile;
 	boolean downloaded;
 	boolean hidden = false;
+	StatusLineCLabelContribution item;
 
 	public AutomaticUpdatesPopup(IInstallableUnit[] toUpdate, Profile profile, boolean alreadyDownloaded, Preferences prefs) {
 		super((Shell) null, PopupDialog.INFOPOPUPRESIZE_SHELLSTYLE | SWT.MODELESS, true, true, false, false, ProvSDKMessages.AutomaticUpdatesDialog_UpdatesAvailableTitle, null);
@@ -72,6 +76,7 @@ public class AutomaticUpdatesPopup extends PopupDialog {
 			}
 		};
 		prefs.addPropertyChangeListener(listener);
+		createStatusLineItem();
 
 	}
 
@@ -103,14 +108,12 @@ public class AutomaticUpdatesPopup extends PopupDialog {
 				if (REMIND_HREF.equals(e.text)) {
 					if (prefs.getBoolean(PreferenceConstants.PREF_REMIND_SCHEDULE)) {
 						// We are already on a remind schedule, so just set up the reminder
-						hidden = true;
-						getShell().setVisible(false);
+						hide();
 						scheduleRemindJob();
 					} else {
 						// We were not on a schedule.  Setting the pref value
 						// will activate our listener and start the remind job
-						hidden = true;
-						getShell().setVisible(false);
+						hide();
 						prefs.setValue(PreferenceConstants.PREF_REMIND_SCHEDULE, true);
 					}
 				}
@@ -142,6 +145,13 @@ public class AutomaticUpdatesPopup extends PopupDialog {
 		cancelRemindJob();
 		remindJob = null;
 		listener = null;
+		IStatusLineManager manager = getStatusLineManager();
+		if (manager != null) {
+			manager.remove(item);
+		}
+		manager.update(true);
+		item.dispose();
+		item = null;
 		return super.close();
 	}
 
@@ -158,8 +168,7 @@ public class AutomaticUpdatesPopup extends PopupDialog {
 			public IStatus runInUIThread(IProgressMonitor monitor) {
 				Shell shell = getShell();
 				if (shell != null && !shell.isDisposed()) {
-					shell.setVisible(true);
-					hidden = false;
+					show();
 				}
 				return Status.OK_STATUS;
 			}
@@ -207,4 +216,63 @@ public class AutomaticUpdatesPopup extends PopupDialog {
 		super.configureShell(newShell);
 		newShell.setText(ProvSDKMessages.AutomaticUpdatesDialog_UpdatesAvailableTitle);
 	}
+
+	private void createStatusLineItem() {
+		item = new StatusLineCLabelContribution(AUTO_UPDATE_STATUS_ITEM, 5);
+		item.addListener(SWT.MouseDown, new Listener() {
+			public void handleEvent(Event event) {
+				show();
+			}
+		});
+		item.setTooltip(ProvSDKMessages.AutomaticUpdatesDialog_UpdatesAvailableTitle);
+		item.setImage(ProvUIImages.getImage(ProvUIImages.IMG_TOOL_UPDATE));
+		IStatusLineManager manager = getStatusLineManager();
+		if (manager != null) {
+			manager.add(item);
+		}
+		item.setVisible(false);
+
+	}
+
+	IStatusLineManager getStatusLineManager() {
+		// TODO  YUCK!  Am I missing an easier way to do this??
+		IWorkbenchPartSite site = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActivePart().getSite();
+		if (site instanceof IViewSite) {
+			return ((IViewSite) site).getActionBars().getStatusLineManager();
+		} else if (site instanceof IEditorSite) {
+			return ((IViewSite) site).getActionBars().getStatusLineManager();
+		}
+		return null;
+	}
+
+	public void hide() {
+		hidden = true;
+		Shell shell = getShell();
+		if (shell != null && !shell.isDisposed())
+			shell.setVisible(false);
+		if (item != null) {
+			item.setVisible(true);
+			updateStatusLine();
+		}
+	}
+
+	public void show() {
+		Shell shell = getShell();
+		if (shell != null && !shell.isDisposed()) {
+			shell.setVisible(true);
+			hidden = false;
+			if (item != null) {
+				item.setVisible(false);
+				updateStatusLine();
+			}
+
+		}
+	}
+
+	void updateStatusLine() {
+		IStatusLineManager manager = getStatusLineManager();
+		if (manager != null)
+			manager.update(true);
+	}
+
 }

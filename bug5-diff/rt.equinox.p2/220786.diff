commit 3e227ecff8d9feb2cc445402b00558677027521c
Author: Susan Franklin <sfranklin>
Date:   Fri Feb 29 00:12:54 2008 +0000

    Bug 220786 - [ui] UpdateChecker should let callers supply a query for what updates to check

1	0	bundles/org.eclipse.equinox.p2.tools/META-INF/MANIFEST.MF
2	1	bundles/org.eclipse.equinox.p2.tools/src/org/eclipse/equinox/internal/p2/tools/UpdateCheckerApplication.java
5	1	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AutomaticUpdateScheduler.java
11	8	bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/p2/updatechecker/UpdateChecker.java
3	1	bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/provisional/p2/updatechecker/IUpdateChecker.java
diff --git a/bundles/org.eclipse.equinox.p2.tools/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.tools/META-INF/MANIFEST.MF
index e817b87..f6b6e5a 100644
--- a/bundles/org.eclipse.equinox.p2.tools/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.tools/META-INF/MANIFEST.MF
@@ -11,6 +11,7 @@ Import-Package: javax.servlet;version="2.4.0",
  org.eclipse.equinox.internal.p2.core.helpers,
  org.eclipse.equinox.internal.p2.updatechecker,
  org.eclipse.equinox.internal.provisional.p2.metadata,
+ org.eclipse.equinox.internal.provisional.p2.metadata.query,
  org.eclipse.equinox.internal.provisional.p2.updatechecker,
  org.osgi.framework;version="1.4.0",
  org.osgi.service.http;version="1.2.0"
diff --git a/bundles/org.eclipse.equinox.p2.tools/src/org/eclipse/equinox/internal/p2/tools/UpdateCheckerApplication.java b/bundles/org.eclipse.equinox.p2.tools/src/org/eclipse/equinox/internal/p2/tools/UpdateCheckerApplication.java
index 6b268d6..17fa88c 100644
--- a/bundles/org.eclipse.equinox.p2.tools/src/org/eclipse/equinox/internal/p2/tools/UpdateCheckerApplication.java
+++ b/bundles/org.eclipse.equinox.p2.tools/src/org/eclipse/equinox/internal/p2/tools/UpdateCheckerApplication.java
@@ -16,6 +16,7 @@ import org.eclipse.equinox.app.IApplicationContext;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.updatechecker.UpdateChecker;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.metadata.query.InstallableUnitQuery;
 import org.eclipse.equinox.internal.provisional.p2.updatechecker.*;
 
 /**
@@ -67,7 +68,7 @@ public class UpdateCheckerApplication implements IApplication {
 		if (profileId == null) {
 			System.out.println("Must specify a profile id using -profile arg"); //$NON-NLS-1$
 		} else {
-			checker.addUpdateCheck(profileId, delay, poll, listener);
+			checker.addUpdateCheck(profileId, InstallableUnitQuery.ANY, delay, poll, listener);
 		}
 
 		return null;
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AutomaticUpdateScheduler.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AutomaticUpdateScheduler.java
index 9451239..ca122bb 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AutomaticUpdateScheduler.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AutomaticUpdateScheduler.java
@@ -16,6 +16,9 @@ import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.ui.sdk.prefs.PreferenceConstants;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
+import org.eclipse.equinox.internal.provisional.p2.ui.model.ProfileElement;
+import org.eclipse.equinox.internal.provisional.p2.ui.policy.IQueryProvider;
+import org.eclipse.equinox.internal.provisional.p2.ui.query.ElementQueryDescriptor;
 import org.eclipse.equinox.internal.provisional.p2.updatechecker.IUpdateChecker;
 import org.eclipse.equinox.internal.provisional.p2.updatechecker.IUpdateListener;
 import org.eclipse.ui.IStartup;
@@ -97,7 +100,8 @@ public class AutomaticUpdateScheduler implements IStartup {
 			poll = computePoll(pref);
 		}
 		listener = ProvSDKUIActivator.getDefault().getAutomaticUpdater();
-		checker.addUpdateCheck(profileId, delay, poll, listener);
+		ElementQueryDescriptor descriptor = ProvSDKUIActivator.getDefault().getQueryProvider().getQueryDescriptor(new ProfileElement(profileId), IQueryProvider.INSTALLED_IUS);
+		checker.addUpdateCheck(profileId, descriptor.query, delay, poll, listener);
 
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/p2/updatechecker/UpdateChecker.java b/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/p2/updatechecker/UpdateChecker.java
index 205fe1a..7611262 100644
--- a/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/p2/updatechecker/UpdateChecker.java
+++ b/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/p2/updatechecker/UpdateChecker.java
@@ -21,6 +21,7 @@ import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.metadata.query.InstallableUnitQuery;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.query.Collector;
+import org.eclipse.equinox.internal.provisional.p2.query.Query;
 import org.eclipse.equinox.internal.provisional.p2.updatechecker.*;
 
 /**
@@ -42,11 +43,13 @@ public class UpdateChecker implements IUpdateChecker {
 		long poll, delay;
 		IUpdateListener listener;
 		String profileId;
+		Query query;
 
-		UpdateCheckThread(String profileId, long delay, long poll, IUpdateListener listener) {
+		UpdateCheckThread(String profileId, Query query, long delay, long poll, IUpdateListener listener) {
 			this.poll = poll;
 			this.delay = delay;
 			this.profileId = profileId;
+			this.query = query;
 			this.listener = listener;
 		}
 
@@ -58,7 +61,7 @@ public class UpdateChecker implements IUpdateChecker {
 				while (!done) {
 
 					log("Checking for updates for " + profileId + " at " + getTimeStamp()); //$NON-NLS-1$ //$NON-NLS-2$
-					IInstallableUnit[] iusWithUpdates = checkForUpdates(profileId);
+					IInstallableUnit[] iusWithUpdates = checkForUpdates(profileId, query);
 					if (iusWithUpdates.length > 0) {
 						log("Notifying listener of available updates"); //$NON-NLS-1$
 						UpdateEvent event = new UpdateEvent(profileId, iusWithUpdates);
@@ -84,9 +87,9 @@ public class UpdateChecker implements IUpdateChecker {
 	/* (non-Javadoc)
 	 * @see org.eclipse.equinox.internal.provisional.p2.updatechecker.IUpdateChecker#addUpdateCheck(java.lang.String, long, long, org.eclipse.equinox.internal.provisional.p2.updatechecker.IUpdateListener)
 	 */
-	public void addUpdateCheck(String profileId, long delay, long poll, IUpdateListener listener) {
+	public void addUpdateCheck(String profileId, Query query, long delay, long poll, IUpdateListener listener) {
 		log("Adding update checker for " + profileId + " at " + getTimeStamp()); //$NON-NLS-1$ //$NON-NLS-2$
-		UpdateCheckThread thread = new UpdateCheckThread(profileId, delay, poll, listener);
+		UpdateCheckThread thread = new UpdateCheckThread(profileId, query, delay, poll, listener);
 		checkers.add(thread);
 		thread.start();
 	}
@@ -110,15 +113,15 @@ public class UpdateChecker implements IUpdateChecker {
 	 * Return the array of ius in the profile that have updates
 	 * available.
 	 */
-	IInstallableUnit[] checkForUpdates(String profileId) {
-		// TODO this is naive.  We get all the ius every time whereas we
-		// could monitor changes in the profile.
+	IInstallableUnit[] checkForUpdates(String profileId, Query query) {
 		IProfile profile = getProfileRegistry().getProfile(profileId);
 		ArrayList iusWithUpdates = new ArrayList();
 		if (profile == null)
 			return new IInstallableUnit[0];
 		ProvisioningContext context = new ProvisioningContext(getAvailableRepositories());
-		Iterator iter = profile.query(InstallableUnitQuery.ANY, new Collector(), null).iterator();
+		if (query == null)
+			query = InstallableUnitQuery.ANY;
+		Iterator iter = profile.query(query, new Collector(), null).iterator();
 		while (iter.hasNext()) {
 			IInstallableUnit iu = (IInstallableUnit) iter.next();
 			IInstallableUnit[] replacements = getPlanner().updatesFor(iu, context, null);
diff --git a/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/provisional/p2/updatechecker/IUpdateChecker.java b/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/provisional/p2/updatechecker/IUpdateChecker.java
index 335a82b..a343d78 100644
--- a/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/provisional/p2/updatechecker/IUpdateChecker.java
+++ b/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/provisional/p2/updatechecker/IUpdateChecker.java
@@ -10,6 +10,8 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.provisional.p2.updatechecker;
 
+import org.eclipse.equinox.internal.provisional.p2.query.Query;
+
 /**
  * An UpdateChecker periodically polls for updates to specified profiles and
  * informs listeners if updates are available.  Listeners may then determine
@@ -19,7 +21,7 @@ public interface IUpdateChecker {
 	public static final String SERVICE_NAME = IUpdateChecker.class.getName();
 	public static long ONE_TIME_CHECK = -1L;
 
-	public abstract void addUpdateCheck(String profileId, long delay, long poll, IUpdateListener listener);
+	public abstract void addUpdateCheck(String profileId, Query iusToCheckQuery, long delay, long poll, IUpdateListener listener);
 
 	public abstract void removeUpdateCheck(IUpdateListener listener);
 
commit 5a556dd3b81b2bec55e7812c38368d09846f6272
Author: Susan Franklin <sfranklin>
Date:   Fri Feb 29 00:33:48 2008 +0000

    Bug 220786 - [ui] UpdateChecker should let callers supply a query for what updates to check

30	49	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
index 87a4533..218e3f4 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
@@ -12,6 +12,7 @@ package org.eclipse.equinox.internal.p2.ui.sdk.updates;
 
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
+import java.util.ArrayList;
 import java.util.EventObject;
 import org.eclipse.core.runtime.*;
 import org.eclipse.core.runtime.jobs.*;
@@ -25,10 +26,8 @@ import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.internal.provisional.p2.engine.ProfileEvent;
 import org.eclipse.equinox.internal.provisional.p2.engine.ProvisioningContext;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.internal.provisional.p2.query.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.actions.UpdateAction;
-import org.eclipse.equinox.internal.provisional.p2.ui.model.ProfileElement;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.query.ElementQueryDescriptor;
@@ -61,7 +60,7 @@ public class AutomaticUpdater implements IUpdateListener {
 
 		public void initializePlan() {
 			try {
-				plan = getProvisioningPlan(toUpdate, profileId, new NullProgressMonitor());
+				plan = getProvisioningPlan(iusWithUpdates, profileId, new NullProgressMonitor());
 			} catch (ProvisionException e) {
 				// ignore
 			}
@@ -78,8 +77,7 @@ public class AutomaticUpdater implements IUpdateListener {
 	StatusLineCLabelContribution updateAffordance;
 	AutomaticUpdateAction updateAction;
 	IStatusLineManager statusLineManager;
-	IInstallableUnit[] updatesFound;
-	IInstallableUnit[] toUpdate;
+	IInstallableUnit[] iusWithUpdates;
 	String profileId;
 	AutomaticUpdatesPopup popup;
 	ProvisioningListener profileChangeListener;
@@ -98,12 +96,10 @@ public class AutomaticUpdater implements IUpdateListener {
 	public void updatesAvailable(final UpdateEvent event) {
 		final boolean download = prefs.getBoolean(PreferenceConstants.PREF_DOWNLOAD_ONLY);
 		profileId = event.getProfileId();
-		updatesFound = event.getIUs();
+		iusWithUpdates = event.getIUs();
 		alreadyDownloaded = false;
-		// Recompute the updates that we want to make available to the user.
-		toUpdate = getUpdatesToShow(updatesFound, new NullProgressMonitor());
 
-		if (toUpdate.length <= 0) {
+		if (iusWithUpdates.length <= 0) {
 			clearUpdatesAvailable();
 			return;
 		}
@@ -113,12 +109,11 @@ public class AutomaticUpdater implements IUpdateListener {
 		// showing the user that updates are available.
 		try {
 			if (download) {
-				UpdateEvent eventWithOnlyRoots = new UpdateEvent(event.getProfileId(), toUpdate);
-				ElementQueryDescriptor descriptor = ProvSDKUIActivator.getDefault().getQueryProvider().getQueryDescriptor(eventWithOnlyRoots, IQueryProvider.AVAILABLE_UPDATES);
+				ElementQueryDescriptor descriptor = ProvSDKUIActivator.getDefault().getQueryProvider().getQueryDescriptor(event, IQueryProvider.AVAILABLE_UPDATES);
 				IInstallableUnit[] replacements = (IInstallableUnit[]) descriptor.queryable.query(descriptor.query, descriptor.collector, null).toArray(IInstallableUnit.class);
 				if (replacements.length > 0) {
 					ProfileChangeRequest request = ProfileChangeRequest.createByProfileId(event.getProfileId());
-					request.removeInstallableUnits(toUpdate);
+					request.removeInstallableUnits(iusWithUpdates);
 					request.addInstallableUnits(replacements);
 					final ProvisioningPlan plan = ProvisioningUtil.getPlanner().getProvisioningPlan(request, new ProvisioningContext(), null);
 					Job job = ProvisioningOperationRunner.schedule(new ProfileModificationOperation(ProvSDKMessages.AutomaticUpdater_AutomaticDownloadOperationName, event.getProfileId(), plan, new DownloadPhaseSet(), false), null);
@@ -156,41 +151,27 @@ public class AutomaticUpdater implements IUpdateListener {
 
 	}
 
-	// Figure out which updates we want to expose to the user.
-	// Updates of IU's below the user's visiblity will not be shown.
-	IInstallableUnit[] getUpdatesToShow(final IInstallableUnit[] iusWithUpdates, IProgressMonitor monitor) {
-		// We could simply collect the install roots ourselves, but implementing
-		// this in terms of a normal "what's installed" query allows the policy to be defined only
-		// in one place.
-		IQueryable rootQueryable = new IQueryable() {
-			public Collector query(Query query, Collector result, IProgressMonitor pm) {
-				for (int i = 0; i < iusWithUpdates.length; i++)
-					if (query.isMatch(iusWithUpdates[i])) {
-						IInstallableUnit iu = (IInstallableUnit) ProvUI.getAdapter(iusWithUpdates[i], IInstallableUnit.class);
-						if (iu != null) {
-							// It's possible that the update list is stale, so for install roots that had updates available,
-							// we do one more check here to ensure that an update is still available for it.  Otherwise
-							// we risk notifying the user of updates and then not finding them (which can still happen, but
-							// we are trying to reduce the window in which it can happen.
-							try {
-								if (ProvisioningUtil.getPlanner().updatesFor(iu, new ProvisioningContext(), pm).length > 0)
-									result.accept(iusWithUpdates[i]);
-							} catch (ProvisionException e) {
-								ProvUI.handleException(e, ProvSDKMessages.AutomaticUpdater_ErrorCheckingUpdates, StatusManager.LOG);
-								continue;
-							}
-						}
-					}
-				return result;
+	/*
+	 * Recheck that iusToBeUpdated is still valid, and reset the cache.  
+	 * Reminding the user of updates may happen long after the update 
+	 * was discovered,  so it's possible that the update list is stale.
+	 * This reduces the risk of notifying the user of updates and then 
+	 * not finding them (which can still happen, but
+	 * we are trying to reduce the window in which it can happen.)
+	 */
+
+	private void recheckUpdates(IProgressMonitor monitor) {
+		ArrayList list = new ArrayList();
+		for (int i = 0; i < iusWithUpdates.length; i++) {
+			try {
+				if (ProvisioningUtil.getPlanner().updatesFor(iusWithUpdates[i], new ProvisioningContext(), monitor).length > 0)
+					list.add(iusWithUpdates[i]);
+			} catch (ProvisionException e) {
+				ProvUI.handleException(e, ProvSDKMessages.AutomaticUpdater_ErrorCheckingUpdates, StatusManager.LOG);
+				continue;
 			}
-		};
-		ProfileElement element = new ProfileElement(profileId);
-		ElementQueryDescriptor descriptor = ProvSDKUIActivator.getDefault().getQueryProvider().getQueryDescriptor(element, IQueryProvider.INSTALLED_IUS);
-		Object[] elements = rootQueryable.query(descriptor.query, descriptor.collector, null).toArray(Object.class);
-		IInstallableUnit[] result = new IInstallableUnit[elements.length];
-		for (int i = 0; i < result.length; i++)
-			result[i] = (IInstallableUnit) ProvUI.getAdapter(elements[i], IInstallableUnit.class);
-		return result;
+		}
+		iusWithUpdates = (IInstallableUnit[]) list.toArray(new IInstallableUnit[list.size()]);
 	}
 
 	Shell getWorkbenchWindowShell() {
@@ -339,7 +320,7 @@ public class AutomaticUpdater implements IUpdateListener {
 			 * @see org.eclipse.jface.viewers.ISelectionProvider#getSelection()
 			 */
 			public ISelection getSelection() {
-				return new StructuredSelection(toUpdate);
+				return new StructuredSelection(iusWithUpdates);
 			}
 
 			/* (non-Javadoc)
@@ -391,8 +372,8 @@ public class AutomaticUpdater implements IUpdateListener {
 			public IStatus runInUIThread(IProgressMonitor monitor) {
 				if (monitor.isCanceled())
 					return Status.CANCEL_STATUS;
-				toUpdate = getUpdatesToShow(updatesFound, monitor);
-				if (toUpdate.length == 0)
+				recheckUpdates(monitor);
+				if (iusWithUpdates.length == 0)
 					clearUpdatesAvailable();
 				else {
 					createUpdateAction();

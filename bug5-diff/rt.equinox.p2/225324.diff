commit 811213ddbbdb799c992e0d19ad52cabdb2701766
Author: Pascal Rapicault <prapicau>
Date:   Fri Oct 3 19:49:41 2008 +0000

    Bug 225324 - [updateSite] Need to add progress monitoring.

2	3	bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/provisional/p2/directorywatcher/RepositoryListener.java
1	0	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/internal/p2/publisher/Messages.java
3	1	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/internal/p2/publisher/messages.properties
3	3	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/AbstractPublisherAction.java
2	1	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/AbstractPublisherApplication.java
3	2	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/IPublisherAction.java
20	10	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/Publisher.java
4	1	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/JREAction.java
9	4	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/MergeResultsAction.java
10	5	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/RootFilesAction.java
9	6	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/RootIUAction.java
3	3	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AccumulateConfigDataAction.java
11	6	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/ApplicationLauncherAction.java
19	8	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/BundlesAction.java
5	3	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/ConfigCUsAction.java
3	3	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/DefaultCUsAction.java
11	5	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/EclipseInstallAction.java
3	3	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/EquinoxExecutableAction.java
3	3	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/EquinoxLauncherCUAction.java
3	4	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/FeaturesAction.java
2	1	bundles/org.eclipse.equinox.p2.publisher/src_ant/org/eclipse/equinox/internal/p2/publisher/ant/PublisherTask.java
3	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/AccumulateConfigDataActionTest.java
3	3	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/BundlesActionTest.java
3	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/ConfigCUsActionTest.java
3	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/DefaultCUsActionTest.java
3	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/EquinoxExecutableActionTest.java
3	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/EquinoxLauncherCUActionTest.java
3	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/FeaturesActionTest.java
5	3	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/JREActionTest.java
3	3	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/RootFilesActionTest.java
7	5	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/RootIUActionTest.java
16	16	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/updatesite/UpdateSiteTest.java
2	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositoryElement.java
13	7	bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/LocalUpdateSiteAction.java
1	0	bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/Messages.java
23	0	bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/RemoteFeaturesAction.java
16	16	bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/RemoteUpdateSiteAction.java
21	12	bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/SiteXMLAction.java
38	20	bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/UpdateSite.java
5	5	bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepositoryFactory.java
1	0	bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/messages.properties
10	5	bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepositoryFactory.java
diff --git a/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/provisional/p2/directorywatcher/RepositoryListener.java b/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/provisional/p2/directorywatcher/RepositoryListener.java
index e594b17..cc9d31f 100644
--- a/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/provisional/p2/directorywatcher/RepositoryListener.java
+++ b/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/provisional/p2/directorywatcher/RepositoryListener.java
@@ -14,8 +14,7 @@ import java.io.File;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.*;
-import org.eclipse.core.runtime.IStatus;
-import org.eclipse.core.runtime.Status;
+import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.*;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
@@ -177,7 +176,7 @@ public class RepositoryListener extends DirectoryChangeListener {
 
 	private boolean publish(IPublisherAction action, boolean isAddition) {
 		IPublisherResult result = isAddition ? iusToAdd : iusToChange;
-		return action.perform(info, result).isOK();
+		return action.perform(info, result, new NullProgressMonitor()).isOK();
 	}
 
 	public boolean isInterested(File file) {
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/internal/p2/publisher/Messages.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/internal/p2/publisher/Messages.java
index a98d28a..eb0e79d 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/internal/p2/publisher/Messages.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/internal/p2/publisher/Messages.java
@@ -27,6 +27,7 @@ public class Messages extends NLS {
 	public static String message_generatingMetadata;
 	public static String message_generationCompleted;
 
+	public static String error_rootIU_generation;
 	static {
 		// load message values from bundle file
 		NLS.initializeMessages(BUNDLE_NAME, Messages.class);
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/internal/p2/publisher/messages.properties b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/internal/p2/publisher/messages.properties
index 08affcb..86cd565 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/internal/p2/publisher/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/internal/p2/publisher/messages.properties
@@ -20,4 +20,6 @@ exception_metadataRepoNotWritable = Metadata repository not writable: {0}.
 exception_baseLocationNotSpecified = Eclipse base location not specified.
 
 message_generatingMetadata = Generating metadata for {0}.
-message_generationCompleted = Generation completed with success [{0} seconds].
\ No newline at end of file
+message_generationCompleted = Generation completed with success [{0} seconds].
+
+error_rootIU_generation = Could not generate root IU {0}, {1}, {2}..
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/AbstractPublisherAction.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/AbstractPublisherAction.java
index ce0ec07..9f90154 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/AbstractPublisherAction.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/AbstractPublisherAction.java
@@ -6,13 +6,13 @@
  * 
  * Contributors: 
  *   Code 9 - initial API and implementation
+ *   IBM - ongoing development
  ******************************************************************************/
 package org.eclipse.equinox.p2.publisher;
 
 import java.io.*;
 import java.util.*;
-import org.eclipse.core.runtime.IStatus;
-import org.eclipse.core.runtime.Status;
+import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.FileUtils;
 import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
 import org.eclipse.equinox.internal.p2.core.helpers.FileUtils.IPathComputer;
@@ -249,7 +249,7 @@ public abstract class AbstractPublisherAction implements IPublisherAction {
 		}
 	}
 
-	public abstract IStatus perform(IPublisherInfo info, IPublisherResult results);
+	public abstract IStatus perform(IPublisherInfo info, IPublisherResult results, IProgressMonitor monitor);
 
 	/**
 	 * Add all of the advised provided and required capabilities for the given installable unit.
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/AbstractPublisherApplication.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/AbstractPublisherApplication.java
index 841f7b2..53353cf 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/AbstractPublisherApplication.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/AbstractPublisherApplication.java
@@ -13,6 +13,7 @@ package org.eclipse.equinox.p2.publisher;
 import java.io.File;
 import java.net.MalformedURLException;
 import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.equinox.app.IApplication;
 import org.eclipse.equinox.app.IApplicationContext;
 import org.eclipse.equinox.internal.p2.artifact.repository.ArtifactRepositoryManager;
@@ -186,7 +187,7 @@ public abstract class AbstractPublisherApplication implements IApplication {
 		long before = System.currentTimeMillis();
 		IPublisherAction[] actions = createActions();
 		Publisher publisher = createPublisher(info);
-		IStatus result = publisher.publish(actions);
+		IStatus result = publisher.publish(actions, new NullProgressMonitor());
 		long after = System.currentTimeMillis();
 
 		if (result.isOK()) {
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/IPublisherAction.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/IPublisherAction.java
index de7dc22..c53215a 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/IPublisherAction.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/IPublisherAction.java
@@ -6,14 +6,15 @@
  * 
  * Contributors: 
  *   Code 9 - initial API and implementation
+ *   IBM - ongoing development
  ******************************************************************************/
 package org.eclipse.equinox.p2.publisher;
 
-
+import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.IStatus;
 
 public interface IPublisherAction {
 
-	IStatus perform(IPublisherInfo info, IPublisherResult results);
+	IStatus perform(IPublisherInfo info, IPublisherResult results, IProgressMonitor monitor);
 
 }
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/Publisher.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/Publisher.java
index 058dc1b..84599ad 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/Publisher.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/Publisher.java
@@ -6,10 +6,10 @@
  * 
  * Contributors: 
  *   Code 9 - initial API and implementation
+ *   IBM - ongoing development
  ******************************************************************************/
 package org.eclipse.equinox.p2.publisher;
 
-
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.Collection;
@@ -133,16 +133,26 @@ public class Publisher {
 		this.results = results;
 	}
 
-	public IStatus publish(IPublisherAction[] actions) {
-		// run all the actions
-		MultiStatus finalStatus = new MultiStatus("this", 0, "publishing result", null);
-		for (int i = 0; i < actions.length; i++) {
-			IStatus status = actions[i].perform(info, results);
-			finalStatus.merge(status);
-		}
-		if (!finalStatus.isOK())
-			return finalStatus;
+	public IStatus publish(IPublisherAction[] actions, IProgressMonitor monitor) {
+		if (monitor == null)
+			monitor = new NullProgressMonitor();
 
+		SubMonitor sub = SubMonitor.convert(monitor, actions.length);
+		try {
+			// run all the actions
+			MultiStatus finalStatus = new MultiStatus("this", 0, "publishing result", null); //$NON-NLS-1$//$NON-NLS-2$
+			for (int i = 0; i < actions.length; i++) {
+				if (sub.isCanceled())
+					return Status.CANCEL_STATUS;
+				IStatus status = actions[i].perform(info, results, monitor);
+				finalStatus.merge(status);
+				sub.worked(1);
+			}
+			if (!finalStatus.isOK())
+				return finalStatus;
+		} finally {
+			sub.done();
+		}
 		// if there were no errors, publish all the ius.
 		IMetadataRepository metadataRepository = info.getMetadataRepository();
 		if (metadataRepository != null) {
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/JREAction.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/JREAction.java
index eb7bca7..3cdd93c 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/JREAction.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/JREAction.java
@@ -6,9 +6,12 @@
  * 
  * Contributors: 
  *   Code 9 - initial API and implementation
+ *   IBM - ongoing development
  ******************************************************************************/
 package org.eclipse.equinox.p2.publisher.actions;
 
+import org.eclipse.core.runtime.IProgressMonitor;
+
 import java.io.*;
 import java.util.*;
 import org.eclipse.core.runtime.*;
@@ -156,7 +159,7 @@ public class JREAction extends AbstractPublisherAction {
 		this.location = location;
 	}
 
-	public IStatus perform(IPublisherInfo info, IPublisherResult results) {
+	public IStatus perform(IPublisherInfo info, IPublisherResult results, IProgressMonitor monitor) {
 		IArtifactDescriptor artifact = createJREData(location, results);
 		if (artifact != null)
 			publishArtifact(artifact, new File[] {location}, null, info, createRootPrefixComputer(location));
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/MergeResultsAction.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/MergeResultsAction.java
index da4ca1f..d49b4f7 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/MergeResultsAction.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/MergeResultsAction.java
@@ -6,11 +6,11 @@
  * 
  * Contributors: 
  *   Code 9 - initial API and implementation
+ *   IBM - ongoing development
  ******************************************************************************/
 package org.eclipse.equinox.p2.publisher.actions;
 
-import org.eclipse.core.runtime.IStatus;
-import org.eclipse.core.runtime.Status;
+import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.p2.publisher.*;
 
 public class MergeResultsAction extends AbstractPublisherAction {
@@ -23,13 +23,18 @@ public class MergeResultsAction extends AbstractPublisherAction {
 		this.mode = mode;
 	}
 
-	public IStatus perform(IPublisherInfo info, IPublisherResult results) {
+	public IStatus perform(IPublisherInfo info, IPublisherResult results, IProgressMonitor monitor) {
+		MultiStatus finalStatus = new MultiStatus(MergeResultsAction.class.getName(), 0, "publishing result", null); //$NON-NLS-1$
 		for (int i = 0; i < actions.length; i++) {
+			if (monitor.isCanceled())
+				return Status.CANCEL_STATUS;
 			IPublisherAction action = actions[i];
 			IPublisherResult result = new PublisherResult();
-			action.perform(info, result);
+			finalStatus.merge(action.perform(info, result, monitor));
 			results.merge(result, mode);
 		}
+		if (!finalStatus.isOK())
+			return finalStatus;
 		return Status.OK_STATUS;
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/RootFilesAction.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/RootFilesAction.java
index 851a532..f9ed1cc 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/RootFilesAction.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/RootFilesAction.java
@@ -6,13 +6,13 @@
  * 
  * Contributors: 
  *   Code 9 - initial API and implementation
+ *   IBM - ongoing development
  ******************************************************************************/
 package org.eclipse.equinox.p2.publisher.actions;
 
 import java.io.File;
 import java.util.*;
-import org.eclipse.core.runtime.IStatus;
-import org.eclipse.core.runtime.Status;
+import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.FileUtils.IPathComputer;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactDescriptor;
 import org.eclipse.equinox.internal.provisional.p2.metadata.*;
@@ -45,16 +45,21 @@ public class RootFilesAction extends AbstractPublisherAction {
 		this.flavor = flavor;
 	}
 
-	public IStatus perform(IPublisherInfo info, IPublisherResult results) {
+	public IStatus perform(IPublisherInfo info, IPublisherResult results, IProgressMonitor monitor) {
 		IPublisherResult innerResult = new PublisherResult();
 		// we have N platforms, generate a CU for each
 		// TODO try and find common properties across platforms
 		String[] configSpecs = info.getConfigurations();
-		for (int i = 0; i < configSpecs.length; i++)
+		for (int i = 0; i < configSpecs.length; i++) {
+			if (monitor.isCanceled())
+				return Status.CANCEL_STATUS;
 			generateRootFileIUs(configSpecs[i], info, innerResult);
+		}
 		// merge the IUs  into the final result as non-roots and create a parent IU that captures them all
 		results.merge(innerResult, IPublisherResult.MERGE_ALL_NON_ROOT);
 		publishTopLevelRootFilesIU(innerResult.getIUs(null, IPublisherResult.ROOT), results);
+		if (monitor.isCanceled())
+			return Status.CANCEL_STATUS;
 		return Status.OK_STATUS;
 	}
 
@@ -71,7 +76,7 @@ public class RootFilesAction extends AbstractPublisherAction {
 	 * Generates IUs and CUs for the files that make up the root files for a given
 	 * ws/os/arch combination.
 	 */
-	protected void generateRootFileIUs(String configSpec, IPublisherInfo info, IPublisherResult result) {
+	private void generateRootFileIUs(String configSpec, IPublisherInfo info, IPublisherResult result) {
 		// Create the IU for the executable
 		InstallableUnitDescription iu = new MetadataFactory.InstallableUnitDescription();
 		iu.setSingleton(true);
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/RootIUAction.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/RootIUAction.java
index 9805356..3c4b520 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/RootIUAction.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/RootIUAction.java
@@ -6,11 +6,14 @@
  * 
  * Contributors: 
  *   Code 9 - initial API and implementation
+ *   IBM - Progress monitor handling and error handling
  ******************************************************************************/
 package org.eclipse.equinox.p2.publisher.actions;
 
 import java.util.*;
 import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.internal.p2.publisher.Activator;
+import org.eclipse.equinox.internal.p2.publisher.Messages;
 import org.eclipse.equinox.internal.provisional.p2.metadata.*;
 import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory.InstallableUnitDescription;
 import org.eclipse.equinox.internal.provisional.p2.metadata.query.InstallableUnitQuery;
@@ -18,6 +21,7 @@ import org.eclipse.equinox.internal.provisional.p2.query.Collector;
 import org.eclipse.equinox.p2.publisher.*;
 import org.eclipse.equinox.spi.p2.publisher.PublisherHelper;
 import org.eclipse.osgi.service.resolver.VersionRange;
+import org.eclipse.osgi.util.NLS;
 import org.osgi.framework.Version;
 
 /**
@@ -38,21 +42,20 @@ public class RootIUAction extends AbstractPublisherAction {
 		this.name = name;
 	}
 
-	public IStatus perform(IPublisherInfo info, IPublisherResult results) {
+	public IStatus perform(IPublisherInfo info, IPublisherResult results, IProgressMonitor monitor) {
 		this.info = info;
-		generateRootIU(results);
-		return Status.OK_STATUS;
+		return generateRootIU(results);
 	}
 
-	protected void generateRootIU(IPublisherResult result) {
+	protected IStatus generateRootIU(IPublisherResult result) {
 		Collection children = getChildren(result);
 		InstallableUnitDescription descriptor = createTopLevelIUDescription(children, id, version, name, null, false);
 		processCapabilityAdvice(descriptor, info);
 		IInstallableUnit rootIU = MetadataFactory.createInstallableUnit(descriptor);
 		if (rootIU == null)
-			return;
+			return new Status(IStatus.ERROR, Activator.ID, NLS.bind(Messages.error_rootIU_generation, new Object[] {name, id, version}));
 		result.addIU(rootIU, IPublisherResult.NON_ROOT);
-
+		return Status.OK_STATUS;
 		// TODO why do we create a category here?
 		//		result.addIU(generateDefaultCategory(rootIU, rootCategory), IPublisherResult.NON_ROOT);
 	}
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AccumulateConfigDataAction.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AccumulateConfigDataAction.java
index 07782e5..6803662 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AccumulateConfigDataAction.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AccumulateConfigDataAction.java
@@ -6,12 +6,12 @@
  * 
  * Contributors: 
  *   Code 9 - initial API and implementation
+ *   IBM - ongoing development
  ******************************************************************************/
 package org.eclipse.equinox.p2.publisher.eclipse;
 
 import java.io.File;
-import org.eclipse.core.runtime.IStatus;
-import org.eclipse.core.runtime.Status;
+import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.publisher.eclipse.DataLoader;
 import org.eclipse.equinox.internal.provisional.frameworkadmin.ConfigData;
 import org.eclipse.equinox.internal.provisional.frameworkadmin.LauncherData;
@@ -27,7 +27,7 @@ public class AccumulateConfigDataAction extends AbstractPublisherAction {
 		loader = new DataLoader(configurationLocation, executableLocation);
 	}
 
-	public IStatus perform(IPublisherInfo info, IPublisherResult results) {
+	public IStatus perform(IPublisherInfo info, IPublisherResult results, IProgressMonitor monitor) {
 		storeConfigData(info, configSpec, results);
 		return Status.OK_STATUS;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/ApplicationLauncherAction.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/ApplicationLauncherAction.java
index 915c629..c0b81ed 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/ApplicationLauncherAction.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/ApplicationLauncherAction.java
@@ -6,13 +6,13 @@
  * 
  * Contributors: 
  *   Code 9 - initial API and implementation
+ *   IBM - ongoing development
  ******************************************************************************/
 package org.eclipse.equinox.p2.publisher.eclipse;
 
 import java.io.File;
 import java.util.*;
-import org.eclipse.core.runtime.IStatus;
-import org.eclipse.core.runtime.Status;
+import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.publisher.eclipse.ExecutablesDescriptor;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory;
@@ -54,14 +54,19 @@ public class ApplicationLauncherAction extends AbstractPublisherAction {
 		this.location = location;
 	}
 
-	public IStatus perform(IPublisherInfo info, IPublisherResult results) {
+	public IStatus perform(IPublisherInfo info, IPublisherResult results, IProgressMonitor monitor) {
 		// Create the basic actions and run them putting the IUs in a temporary result
 		Collection actions = createActions(info);
 		createAdvice(info, results);
 		IPublisherResult innerResult = new PublisherResult();
-		for (Iterator i = actions.iterator(); i.hasNext();)
-			((IPublisherAction) i.next()).perform(info, innerResult);
-
+		MultiStatus finalStatus = new MultiStatus(ApplicationLauncherAction.class.getName(), 0, "publishing result", null); //$NON-NLS-1$//$NON-NLS-2$
+		for (Iterator i = actions.iterator(); i.hasNext();) {
+			if (monitor.isCanceled())
+				return Status.CANCEL_STATUS;
+			finalStatus.merge(((IPublisherAction) i.next()).perform(info, innerResult, monitor));
+		}
+		if (!finalStatus.isOK())
+			return finalStatus;
 		// merge the IUs  into the final result as non-roots and create a parent IU that captures them all
 		results.merge(innerResult, IPublisherResult.MERGE_ALL_NON_ROOT);
 		publishApplicationLauncherIU(innerResult.getIUs(null, IPublisherResult.ROOT), results);
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/BundlesAction.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/BundlesAction.java
index c5b10fe..3e46e6f 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/BundlesAction.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/BundlesAction.java
@@ -6,6 +6,7 @@
  * 
  * Contributors: 
  *   Code 9 - initial API and implementation
+ *   IBM - ongoing development
  ******************************************************************************/
 package org.eclipse.equinox.p2.publisher.eclipse;
 
@@ -635,13 +636,17 @@ public class BundlesAction extends AbstractPublisherAction {
 		this.bundles = bundles;
 	}
 
-	public IStatus perform(IPublisherInfo info, IPublisherResult results) {
+	public IStatus perform(IPublisherInfo info, IPublisherResult results, IProgressMonitor monitor) {
 		if (bundles == null && locations == null)
 			throw new IllegalStateException("No bundles or locations provided");
-		if (bundles == null)
-			bundles = getBundleDescriptions(expandLocations(locations));
-		generateBundleIUs(bundles, results, info);
-		bundles = null;
+		try {
+			if (bundles == null)
+				bundles = getBundleDescriptions(expandLocations(locations), monitor);
+			generateBundleIUs(bundles, results, info, monitor);
+			bundles = null;
+		} catch (OperationCanceledException e) {
+			return Status.CANCEL_STATUS;
+		}
 		return Status.OK_STATUS;
 	}
 
@@ -688,7 +693,7 @@ public class BundlesAction extends AbstractPublisherAction {
 		}
 	}
 
-	protected void generateBundleIUs(BundleDescription[] bundles, IPublisherResult result, IPublisherInfo info) {
+	protected void generateBundleIUs(BundleDescription[] bundles, IPublisherResult result, IPublisherInfo info, IProgressMonitor monitor) {
 		// Computing the path for localized property files in a NL fragment bundle
 		// requires the BUNDLE_LOCALIZATION property from the manifest of the host bundle,
 		// so a first pass is done over all the bundles to cache this value as well as the tags
@@ -699,6 +704,9 @@ public class BundlesAction extends AbstractPublisherAction {
 		Set localizationIUs = new HashSet(32);
 		for (int phase = CACHE_PHASE; phase <= GENERATE_PHASE; phase++) {
 			for (int i = 0; i < bundles.length; i++) {
+				if (monitor.isCanceled())
+					throw new OperationCanceledException();
+
 				BundleDescription bd = bundles[i];
 				// A bundle may be null if the associated plug-in does not have a manifest file -
 				// for example, org.eclipse.jdt.launching.j9
@@ -801,7 +809,7 @@ public class BundlesAction extends AbstractPublisherAction {
 	}
 
 	// TODO reconsider the special cases here for the configurators.  Perhaps these should be in their own actions.
-	protected BundleDescription[] getBundleDescriptions(File[] bundleLocations) {
+	protected BundleDescription[] getBundleDescriptions(File[] bundleLocations, IProgressMonitor monitor) {
 		if (bundleLocations == null)
 			return new BundleDescription[0];
 		boolean addSimpleConfigurator = false;
@@ -818,8 +826,11 @@ public class BundlesAction extends AbstractPublisherAction {
 		if (scIn)
 			addSimpleConfigurator = false;
 		BundleDescription[] result = new BundleDescription[bundleLocations.length + (addSimpleConfigurator ? 1 : 0)];
-		for (int i = 0; i < bundleLocations.length; i++)
+		for (int i = 0; i < bundleLocations.length; i++) {
+			if (monitor.isCanceled())
+				throw new OperationCanceledException();
 			result[i] = createBundleDescription(bundleLocations[i]);
+		}
 		if (addSimpleConfigurator) {
 			// Add simple configurator to the list of bundles
 			try {
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/ConfigCUsAction.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/ConfigCUsAction.java
index 026b0ae..93eb17b 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/ConfigCUsAction.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/ConfigCUsAction.java
@@ -6,6 +6,7 @@
  * 
  * Contributors: 
  *   Code 9 - initial API and implementation
+ *   IBM - ongoing development
  ******************************************************************************/
 package org.eclipse.equinox.p2.publisher.eclipse;
 
@@ -14,8 +15,7 @@ import java.io.IOException;
 import java.net.URL;
 import java.util.*;
 import java.util.Map.Entry;
-import org.eclipse.core.runtime.IStatus;
-import org.eclipse.core.runtime.Status;
+import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.publisher.eclipse.GeneratorBundleInfo;
 import org.eclipse.equinox.internal.provisional.frameworkadmin.BundleInfo;
 import org.eclipse.equinox.internal.provisional.p2.metadata.*;
@@ -90,12 +90,14 @@ public class ConfigCUsAction extends AbstractPublisherAction {
 		this.version = version;
 	}
 
-	public IStatus perform(IPublisherInfo info, IPublisherResult results) {
+	public IStatus perform(IPublisherInfo info, IPublisherResult results, IProgressMonitor monitor) {
 		IPublisherResult innerResult = new PublisherResult();
 		// we have N platforms, generate a CU for each
 		// TODO try and find common properties across platforms
 		String[] configSpecs = info.getConfigurations();
 		for (int i = 0; i < configSpecs.length; i++) {
+			if (monitor.isCanceled())
+				return Status.CANCEL_STATUS;
 			String configSpec = configSpecs[i];
 			Collection configAdvice = info.getAdvice(configSpec, false, null, null, IConfigAdvice.class);
 			BundleInfo[] bundles = fillInBundles(configAdvice, results);
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/DefaultCUsAction.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/DefaultCUsAction.java
index 892334b..8f96357 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/DefaultCUsAction.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/DefaultCUsAction.java
@@ -6,11 +6,11 @@
  * 
  * Contributors: 
  *   Code 9 - initial API and implementation
+ *   IBM - ongoing development
  ******************************************************************************/
 package org.eclipse.equinox.p2.publisher.eclipse;
 
-import org.eclipse.core.runtime.IStatus;
-import org.eclipse.core.runtime.Status;
+import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.publisher.eclipse.GeneratorBundleInfo;
 import org.eclipse.equinox.p2.publisher.*;
 import org.eclipse.equinox.spi.p2.publisher.PublisherHelper;
@@ -30,7 +30,7 @@ public class DefaultCUsAction extends AbstractPublisherAction {
 		this.start = start;
 	}
 
-	public IStatus perform(IPublisherInfo info, IPublisherResult results) {
+	public IStatus perform(IPublisherInfo info, IPublisherResult results, IProgressMonitor monitor) {
 		generateDefaultConfigIU(results);
 		return Status.OK_STATUS;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/EclipseInstallAction.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/EclipseInstallAction.java
index 9b9c9e6..3d7680f 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/EclipseInstallAction.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/EclipseInstallAction.java
@@ -6,13 +6,13 @@
  * 
  * Contributors: 
  *   Code 9 - initial API and implementation
+ *   IBM - ongoing development
  ******************************************************************************/
 package org.eclipse.equinox.p2.publisher.eclipse;
 
 import java.io.File;
 import java.util.*;
-import org.eclipse.core.runtime.IStatus;
-import org.eclipse.core.runtime.Status;
+import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.publisher.eclipse.ExecutablesDescriptor;
 import org.eclipse.equinox.p2.publisher.*;
 import org.eclipse.equinox.p2.publisher.actions.*;
@@ -48,11 +48,17 @@ public class EclipseInstallAction implements IPublisherAction {
 		this.start = start;
 	}
 
-	public IStatus perform(IPublisherInfo info, IPublisherResult results) {
+	public IStatus perform(IPublisherInfo info, IPublisherResult results, IProgressMonitor monitor) {
 		this.info = info;
 		IPublisherAction[] actions = createActions();
-		for (int i = 0; i < actions.length; i++)
-			actions[i].perform(info, results);
+		MultiStatus finalStatus = new MultiStatus(EclipseInstallAction.class.getName(), 0, "publishing result", null); //$NON-NLS-1$//$NON-NLS-2$
+		for (int i = 0; i < actions.length; i++) {
+			if (monitor.isCanceled())
+				return Status.CANCEL_STATUS;
+			finalStatus.merge(actions[i].perform(info, results, monitor));
+		}
+		if (!finalStatus.isOK())
+			return finalStatus;
 		return Status.OK_STATUS;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/EquinoxExecutableAction.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/EquinoxExecutableAction.java
index e9b1ab6..4bca433 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/EquinoxExecutableAction.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/EquinoxExecutableAction.java
@@ -6,14 +6,14 @@
  * 
  * Contributors: 
  *   Code 9 - initial API and implementation
+ *   IBM - ongoing development
  ******************************************************************************/
 package org.eclipse.equinox.p2.publisher.eclipse;
 
 import java.io.File;
 import java.util.HashMap;
 import java.util.Map;
-import org.eclipse.core.runtime.IStatus;
-import org.eclipse.core.runtime.Status;
+import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.FileUtils;
 import org.eclipse.equinox.internal.p2.publisher.eclipse.ExecutablesDescriptor;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactDescriptor;
@@ -46,7 +46,7 @@ public class EquinoxExecutableAction extends AbstractPublisherAction {
 		this.flavor = flavor;
 	}
 
-	public IStatus perform(IPublisherInfo info, IPublisherResult result) {
+	public IStatus perform(IPublisherInfo info, IPublisherResult result, IProgressMonitor monitor) {
 		// TODO temporary measure for handling the Eclipse launcher feature files.
 		ExecutablesDescriptor brandedExecutables = brandExecutables(executables);
 		publishExecutableIU(info, brandedExecutables, result);
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/EquinoxLauncherCUAction.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/EquinoxLauncherCUAction.java
index 7d0322c..1b56662 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/EquinoxLauncherCUAction.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/EquinoxLauncherCUAction.java
@@ -6,13 +6,13 @@
  * 
  * Contributors: 
  *   Code 9 - initial API and implementation
+ *   IBM - ongoing development
  ******************************************************************************/
 package org.eclipse.equinox.p2.publisher.eclipse;
 
 import java.util.Collection;
 import java.util.Iterator;
-import org.eclipse.core.runtime.IStatus;
-import org.eclipse.core.runtime.Status;
+import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.publisher.eclipse.GeneratorBundleInfo;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.publisher.*;
@@ -40,7 +40,7 @@ public class EquinoxLauncherCUAction extends AbstractPublisherAction {
 		this.configSpecs = configSpecs;
 	}
 
-	public IStatus perform(IPublisherInfo info, IPublisherResult results) {
+	public IStatus perform(IPublisherInfo info, IPublisherResult results, IProgressMonitor monitor) {
 		publishCU(ORG_ECLIPSE_EQUINOX_LAUNCHER, null, info, results);
 		publishLauncherFragmentCUs(info, results);
 		return Status.OK_STATUS;
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/FeaturesAction.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/FeaturesAction.java
index 1bfccb8..1cba1c0 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/FeaturesAction.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/FeaturesAction.java
@@ -14,8 +14,7 @@ import java.io.*;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.*;
-import org.eclipse.core.runtime.IStatus;
-import org.eclipse.core.runtime.Status;
+import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.FileUtils;
 import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
 import org.eclipse.equinox.internal.p2.metadata.ArtifactKey;
@@ -125,7 +124,7 @@ public class FeaturesAction extends AbstractPublisherAction {
 		this.features = features;
 	}
 
-	public IStatus perform(IPublisherInfo info, IPublisherResult results) {
+	public IStatus perform(IPublisherInfo info, IPublisherResult results, IProgressMonitor monitor) {
 		if (features == null && locations == null)
 			throw new IllegalStateException("No features or locations provided");
 		if (features == null)
@@ -260,7 +259,7 @@ public class FeaturesAction extends AbstractPublisherAction {
 
 	protected ArrayList generateRootFileIUs(Feature feature, IPublisherResult result, IPublisherInfo info) {
 		File location = new File(feature.getLocation());
-		Properties props = loadProperties(location, "build.properties");
+		Properties props = loadProperties(location, "build.properties"); //$NON-NLS-1$
 		return generateRootFileIUs(feature.getId(), feature.getVersion(), props, location, result, info);
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src_ant/org/eclipse/equinox/internal/p2/publisher/ant/PublisherTask.java b/bundles/org.eclipse.equinox.p2.publisher/src_ant/org/eclipse/equinox/internal/p2/publisher/ant/PublisherTask.java
index 307ef0a..a78a15c 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src_ant/org/eclipse/equinox/internal/p2/publisher/ant/PublisherTask.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src_ant/org/eclipse/equinox/internal/p2/publisher/ant/PublisherTask.java
@@ -15,6 +15,7 @@ import java.net.MalformedURLException;
 import org.apache.tools.ant.BuildException;
 import org.apache.tools.ant.Task;
 import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.publisher.*;
 import org.eclipse.equinox.p2.publisher.eclipse.EclipseInstallAction;
@@ -67,7 +68,7 @@ public class PublisherTask extends Task {
 		}
 		createVersionAdvice();
 		IPublisherAction[] actions = createActions();
-		IStatus result = new Publisher(getInfo()).publish(actions);
+		IStatus result = new Publisher(getInfo()).publish(actions, new NullProgressMonitor());
 
 		// TODO hack assignments to keep the compiler from whining about the unreferenced privates.
 		Object o = bundles;
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/AccumulateConfigDataActionTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/AccumulateConfigDataActionTest.java
index 20366e5..11e1337 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/AccumulateConfigDataActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/AccumulateConfigDataActionTest.java
@@ -6,6 +6,7 @@
  * 
  * Contributors: 
  *   Code 9 - initial API and implementation
+ *   IBM - ongoing development
  ******************************************************************************/
 package org.eclipse.equinox.p2.tests.publisher.actions;
 
@@ -14,6 +15,7 @@ import java.util.ArrayList;
 import java.util.Properties;
 import org.easymock.Capture;
 import org.easymock.EasyMock;
+import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.core.runtime.Path;
 import org.eclipse.equinox.internal.provisional.frameworkadmin.BundleInfo;
 import org.eclipse.equinox.internal.provisional.frameworkadmin.ConfigData;
@@ -45,7 +47,7 @@ public class AccumulateConfigDataActionTest extends ActionTest {
 	}
 
 	public void testAccumulateConfigDataAction() throws Exception {
-		testAction.perform(publisherInfo, publisherResult);
+		testAction.perform(publisherInfo, publisherResult, new NullProgressMonitor());
 		verifyConfigAdvice();
 		verifyLaunchAdvice();
 		debug("Completed AccumulateConfigDataActionTest."); //$NON-NLS-1$
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/BundlesActionTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/BundlesActionTest.java
index 5504e1a..a3dfc76 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/BundlesActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/BundlesActionTest.java
@@ -6,6 +6,7 @@
  * 
  * Contributors: 
  *   Code 9 - initial API and implementation
+ *   IBM - ongoing development
  ******************************************************************************/
 package org.eclipse.equinox.p2.tests.publisher.actions;
 
@@ -16,8 +17,7 @@ import java.io.FileInputStream;
 import java.util.*;
 import java.util.zip.ZipInputStream;
 import org.easymock.EasyMock;
-import org.eclipse.core.runtime.Path;
-import org.eclipse.core.runtime.Status;
+import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.metadata.ArtifactKey;
 import org.eclipse.equinox.internal.provisional.p2.metadata.*;
 import org.eclipse.equinox.p2.publisher.IPublisherInfo;
@@ -80,7 +80,7 @@ public class BundlesActionTest extends ActionTest {
 		setupPublisherResult();
 		setupPublisherInfo();
 
-		assertEquals(Status.OK_STATUS, testAction.perform(publisherInfo, publisherResult));
+		assertEquals(Status.OK_STATUS, testAction.perform(publisherInfo, publisherResult, new NullProgressMonitor()));
 		verifyBundlesAction();
 		cleanup();
 		debug("Completed BundlesActionTest.");//$NON-NLS-1$
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/ConfigCUsActionTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/ConfigCUsActionTest.java
index 938c3e4..74131a6 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/ConfigCUsActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/ConfigCUsActionTest.java
@@ -6,6 +6,7 @@
  * 
  * Contributors: 
  *   Code 9 - initial API and implementation
+ *   IBM - ongoing development
  ******************************************************************************/
 package org.eclipse.equinox.p2.tests.publisher.actions;
 
@@ -13,6 +14,7 @@ import static org.easymock.EasyMock.expect;
 
 import java.io.File;
 import java.util.ArrayList;
+import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.equinox.internal.p2.metadata.InstallableUnit;
 import org.eclipse.equinox.internal.p2.publisher.eclipse.DataLoader;
 import org.eclipse.equinox.internal.provisional.frameworkadmin.ConfigData;
@@ -43,7 +45,7 @@ public class ConfigCUsActionTest extends ActionTest {
 	}
 
 	public void testAction() throws Exception {
-		testAction.perform(publisherInfo, publisherResult);
+		testAction.perform(publisherInfo, publisherResult, new NullProgressMonitor());
 		verifyAction();
 		debug("Completed ConfigCUsAction test."); //$NON-NLS-1$
 	}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/DefaultCUsActionTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/DefaultCUsActionTest.java
index f42336c..27149c8 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/DefaultCUsActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/DefaultCUsActionTest.java
@@ -6,10 +6,12 @@
  * 
  * Contributors: 
  *   Code 9 - initial API and implementation
+ *   IBM - ongoing development
  ******************************************************************************/
 package org.eclipse.equinox.p2.tests.publisher.actions;
 
 import java.util.ArrayList;
+import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.core.runtime.Status;
 import org.eclipse.equinox.internal.p2.metadata.InstallableUnitFragment;
 import org.eclipse.equinox.p2.publisher.eclipse.DefaultCUsAction;
@@ -25,7 +27,7 @@ public class DefaultCUsActionTest extends ActionTest {
 
 		setupPublisherResult();
 		setupPublisherInfo();
-		assertEquals(Status.OK_STATUS, testAction.perform(publisherInfo, publisherResult));
+		assertEquals(Status.OK_STATUS, testAction.perform(publisherInfo, publisherResult, new NullProgressMonitor()));
 		verifyDefaultCUs();
 		debug("Completed DefaultCUsActionTest."); //$NON-NLS-1$
 	}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/EquinoxExecutableActionTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/EquinoxExecutableActionTest.java
index aa6931b..4272867 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/EquinoxExecutableActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/EquinoxExecutableActionTest.java
@@ -6,6 +6,7 @@
  * 
  * Contributors: 
  *   Code 9 - initial API and implementation
+ *   IBM - ongoing development
  ******************************************************************************/
 package org.eclipse.equinox.p2.tests.publisher.actions;
 
@@ -13,6 +14,7 @@ import static org.easymock.EasyMock.expect;
 
 import java.io.File;
 import java.util.ArrayList;
+import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.equinox.internal.p2.publisher.eclipse.ExecutablesDescriptor;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.internal.provisional.p2.metadata.*;
@@ -66,7 +68,7 @@ public class EquinoxExecutableActionTest extends ActionTest {
 	private void testExecutableAction(String idBase, String osArg, String config, File exec) {
 		executablesDescriptor = ExecutablesDescriptor.createDescriptor(osArg, EXECUTABLE_NAME, exec);
 		testAction = new EquinoxExecutableAction(executablesDescriptor, config, idBase, version, flavorArg);
-		testAction.perform(publisherInfo, publisherResult);
+		testAction.perform(publisherInfo, publisherResult, new NullProgressMonitor());
 		verifyResults(idBase, config);
 		debug("Completed EquinoxExecutableActionTest " + idBase + " test."); //$NON-NLS-1$ //$NON-NLS-2$		
 	}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/EquinoxLauncherCUActionTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/EquinoxLauncherCUActionTest.java
index c8895fb..1efc097 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/EquinoxLauncherCUActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/EquinoxLauncherCUActionTest.java
@@ -6,6 +6,7 @@
  * 
  * Contributors: 
  *   Code 9 - initial API and implementation
+ *   IBM - ongoing development
  ******************************************************************************/
 package org.eclipse.equinox.p2.tests.publisher.actions;
 
@@ -13,6 +14,7 @@ import static org.easymock.EasyMock.*;
 
 import java.util.ArrayList;
 import java.util.Map;
+import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.equinox.internal.p2.metadata.InstallableUnitFragment;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.metadata.ProvidedCapability;
@@ -40,7 +42,7 @@ public class EquinoxLauncherCUActionTest extends ActionTest {
 	}
 
 	public void testEquinoxLauncherCUAction() throws Exception {
-		testAction.perform(publisherInfo, publisherResult);
+		testAction.perform(publisherInfo, publisherResult, new NullProgressMonitor());
 		verifyResults();
 		debug("Completed EquinoxLauncherCUAction test.");//$NON-NLS-1$
 	}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/FeaturesActionTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/FeaturesActionTest.java
index 2cd60e8..d474f80 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/FeaturesActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/FeaturesActionTest.java
@@ -6,6 +6,7 @@
  * 
  * Contributors: 
  *   Code 9 - initial API and implementation
+ *   IBM - ongoing development
  ******************************************************************************/
 package org.eclipse.equinox.p2.tests.publisher.actions;
 
@@ -16,6 +17,7 @@ import java.io.IOException;
 import java.util.*;
 import java.util.zip.ZipInputStream;
 import org.easymock.EasyMock;
+import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.core.runtime.Path;
 import org.eclipse.equinox.internal.p2.metadata.ArtifactKey;
 import org.eclipse.equinox.internal.provisional.p2.metadata.*;
@@ -49,7 +51,7 @@ public class FeaturesActionTest extends ActionTest {
 	}
 
 	public void testStuff() throws Exception {
-		testAction.perform(publisherInfo, publisherResult);
+		testAction.perform(publisherInfo, publisherResult, new NullProgressMonitor());
 		verifyRepositoryContents();
 		debug("Completed FeaturesAction."); //$NON-NLS-1$
 	}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/JREActionTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/JREActionTest.java
index a30c7bc..2f59e55 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/JREActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/JREActionTest.java
@@ -6,6 +6,7 @@
  * 
  * Contributors: 
  *   Code 9 - initial API and implementation
+ *   IBM - ongoing development
  ******************************************************************************/
 package org.eclipse.equinox.p2.tests.publisher.actions;
 
@@ -14,6 +15,7 @@ import static org.easymock.EasyMock.expect;
 import java.io.*;
 import java.util.*;
 import java.util.zip.ZipInputStream;
+import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.equinox.internal.p2.core.helpers.FileUtils;
 import org.eclipse.equinox.internal.p2.metadata.ArtifactKey;
 import org.eclipse.equinox.internal.provisional.p2.metadata.*;
@@ -45,7 +47,7 @@ public class JREActionTest extends ActionTest {
 		if (true)
 			return;
 		testAction = new JREAction(publisherInfo, J14);
-		testAction.perform(publisherInfo, publisherResult);
+		testAction.perform(publisherInfo, publisherResult, new NullProgressMonitor());
 		verifyResults(92, new Version("1.4.0")); //$NON-NLS-1$
 		verifyArtifactRepository(ArtifactKey.parse("binary,a.jre,1.4.0"), J14, "J2SE-1.4.profile"); //$NON-NLS-1$ //$NON-NLS-2$
 	}
@@ -55,14 +57,14 @@ public class JREActionTest extends ActionTest {
 		if (true)
 			return;
 		testAction = new JREAction(publisherInfo, J15);
-		testAction.perform(publisherInfo, publisherResult);
+		testAction.perform(publisherInfo, publisherResult, new NullProgressMonitor());
 		verifyResults(119, new Version("1.5.0")); //$NON-NLS-1$
 		verifyArtifactRepository(ArtifactKey.parse("binary,a.jre,1.5.0"), J15, "J2SE-1.5.profile"); //$NON-NLS-1$ //$NON-NLS-2$
 	}
 
 	public void test16() throws Exception {
 		testAction = new JREAction(publisherInfo, J16);
-		testAction.perform(publisherInfo, publisherResult);
+		testAction.perform(publisherInfo, publisherResult, new NullProgressMonitor());
 		verifyResults(117, new Version("1.6.0")); //$NON-NLS-1$
 		verifyArtifactRepository(ArtifactKey.parse("binary,a.jre,1.6.0"), J16, "JavaSE-1.6.profile"); //$NON-NLS-1$//$NON-NLS-2$
 	}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/RootFilesActionTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/RootFilesActionTest.java
index e85d6b3..da7ffc9 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/RootFilesActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/RootFilesActionTest.java
@@ -6,6 +6,7 @@
  * 
  * Contributors: 
  *   Code 9 - initial API and implementation
+ *   IBM - ongoing development
  ******************************************************************************/
 package org.eclipse.equinox.p2.tests.publisher.actions;
 
@@ -14,8 +15,7 @@ import static org.easymock.EasyMock.expect;
 import java.io.*;
 import java.util.*;
 import java.util.zip.ZipInputStream;
-import org.eclipse.core.runtime.Path;
-import org.eclipse.core.runtime.Status;
+import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.FileUtils;
 import org.eclipse.equinox.internal.p2.metadata.ArtifactKey;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepository;
@@ -56,7 +56,7 @@ public class RootFilesActionTest extends ActionTest {
 			setupPublisherInfo();
 			setupPublisherResult();
 			testAction = new RootFilesAction(publisherInfo, idArg, versionArg, flavorArg);
-			assertEquals(Status.OK_STATUS, testAction.perform(publisherInfo, publisherResult));
+			assertEquals(Status.OK_STATUS, testAction.perform(publisherInfo, publisherResult, new NullProgressMonitor()));
 			verifyRepositoryContents(i);
 			cleanup();
 		}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/RootIUActionTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/RootIUActionTest.java
index 22a3d75..38b851f 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/RootIUActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/RootIUActionTest.java
@@ -6,6 +6,7 @@
  * 
  * Contributors: 
  *   Code 9 - initial API and implementation
+ *   IBM - ongoing development
  ******************************************************************************/
 package org.eclipse.equinox.p2.tests.publisher.actions;
 
@@ -13,6 +14,7 @@ import static org.easymock.EasyMock.expect;
 
 import java.util.ArrayList;
 import java.util.Collection;
+import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.core.runtime.Status;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.metadata.RequiredCapability;
@@ -48,7 +50,7 @@ public class RootIUActionTest extends ActionTest {
 		setupPublisherInfo();
 		testAction = new RootIUAction(rootIU, versionArg, rootIU);
 
-		assertEquals(Status.OK_STATUS, testAction.perform(publisherInfo, publisherResult));
+		assertEquals(Status.OK_STATUS, testAction.perform(publisherInfo, publisherResult, new NullProgressMonitor()));
 		confirmResultRequired(EMPTY);
 		cleanup();
 	}
@@ -61,7 +63,7 @@ public class RootIUActionTest extends ActionTest {
 		setupPublisherInfo();
 		testAction = new RootIUAction(rootIU, versionArg, rootIU);
 
-		assertEquals(Status.OK_STATUS, testAction.perform(publisherInfo, publisherResult));
+		assertEquals(Status.OK_STATUS, testAction.perform(publisherInfo, publisherResult, new NullProgressMonitor()));
 		confirmResultRequired(EMPTY);
 		cleanup();
 	}
@@ -78,7 +80,7 @@ public class RootIUActionTest extends ActionTest {
 		setupPublisherInfo();
 		testAction = new RootIUAction(rootIU, versionArg, rootIU);
 
-		assertEquals(Status.OK_STATUS, testAction.perform(publisherInfo, publisherResult));
+		assertEquals(Status.OK_STATUS, testAction.perform(publisherInfo, publisherResult, new NullProgressMonitor()));
 		confirmResultRequired(CONTAINS_A);
 		cleanup();
 	}
@@ -201,7 +203,7 @@ public class RootIUActionTest extends ActionTest {
 		debug(toResultString(PUBLISHER_RESULT, publisherResult));
 		testAction = new RootIUAction(rootIU, versionArg, rootIU);
 
-		assertEquals(Status.OK_STATUS, testAction.perform(publisherInfo, this.publisherResult));
+		assertEquals(Status.OK_STATUS, testAction.perform(publisherInfo, this.publisherResult, new NullProgressMonitor()));
 		confirmResultRequired(advice & metadataRepository | advice & publisherResult);
 		cleanup();
 	}
@@ -219,7 +221,7 @@ public class RootIUActionTest extends ActionTest {
 		debug(toResultString(PUBLISHER_RESULT, publisherResult));
 		testAction = new RootIUAction(rootIU, versionArg, rootIU);
 
-		assertEquals(Status.OK_STATUS, testAction.perform(publisherInfo, this.publisherResult));
+		assertEquals(Status.OK_STATUS, testAction.perform(publisherInfo, this.publisherResult, new NullProgressMonitor()));
 		confirmResultRequired(advice & publisherResult);
 		cleanup();
 	}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/updatesite/UpdateSiteTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/updatesite/UpdateSiteTest.java
index 36afec5..72d0f6a 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/updatesite/UpdateSiteTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/updatesite/UpdateSiteTest.java
@@ -64,7 +64,7 @@ public class UpdateSiteTest extends AbstractProvisioningTest {
 		}
 
 		try {
-			int featureCount = updatesite.loadFeatures().length;
+			int featureCount = updatesite.loadFeatures(new NullProgressMonitor()).length;
 			assertEquals(1, featureCount);
 		} catch (ProvisionException e) {
 			fail("0.4", e);
@@ -85,7 +85,7 @@ public class UpdateSiteTest extends AbstractProvisioningTest {
 		}
 
 		try {
-			int featureCount = updatesite.loadFeatures().length;
+			int featureCount = updatesite.loadFeatures(new NullProgressMonitor()).length;
 			assertEquals(1, featureCount);
 		} catch (ProvisionException e) {
 			fail("0.4", e);
@@ -104,7 +104,7 @@ public class UpdateSiteTest extends AbstractProvisioningTest {
 		}
 
 		try {
-			int featureCount = updatesite.loadFeatures().length;
+			int featureCount = updatesite.loadFeatures(new NullProgressMonitor()).length;
 			assertEquals(1, featureCount);
 		} catch (ProvisionException e) {
 			fail("0.4", e);
@@ -123,7 +123,7 @@ public class UpdateSiteTest extends AbstractProvisioningTest {
 		}
 
 		try {
-			int featureCount = updatesite.loadFeatures().length;
+			int featureCount = updatesite.loadFeatures(new NullProgressMonitor()).length;
 			assertEquals(1, featureCount);
 		} catch (ProvisionException e) {
 			fail("0.4", e);
@@ -144,7 +144,7 @@ public class UpdateSiteTest extends AbstractProvisioningTest {
 		}
 
 		try {
-			int featureCount = updatesite.loadFeatures().length;
+			int featureCount = updatesite.loadFeatures(new NullProgressMonitor()).length;
 			assertEquals(1, featureCount);
 		} catch (ProvisionException e) {
 			fail("0.4", e);
@@ -166,7 +166,7 @@ public class UpdateSiteTest extends AbstractProvisioningTest {
 			fail("0.3", e);
 		}
 		try {
-			int featureCount = updatesite.loadFeatures().length;
+			int featureCount = updatesite.loadFeatures(new NullProgressMonitor()).length;
 			assertEquals(1, featureCount);
 		} catch (ProvisionException e) {
 			fail("0.4", e);
@@ -185,7 +185,7 @@ public class UpdateSiteTest extends AbstractProvisioningTest {
 			fail("0.3", e);
 		}
 		try {
-			int featureCount = updatesite.loadFeatures().length;
+			int featureCount = updatesite.loadFeatures(new NullProgressMonitor()).length;
 			assertEquals(1, featureCount);
 		} catch (ProvisionException e) {
 			fail("0.4", e);
@@ -203,7 +203,7 @@ public class UpdateSiteTest extends AbstractProvisioningTest {
 			fail("0.3", e);
 		}
 		try {
-			int featureCount = updatesite.loadFeatures().length;
+			int featureCount = updatesite.loadFeatures(new NullProgressMonitor()).length;
 			assertEquals(1, featureCount);
 		} catch (ProvisionException e) {
 			fail("0.4", e);
@@ -221,7 +221,7 @@ public class UpdateSiteTest extends AbstractProvisioningTest {
 			fail("0.3", e);
 		}
 		try {
-			int featureCount = updatesite.loadFeatures().length;
+			int featureCount = updatesite.loadFeatures(new NullProgressMonitor()).length;
 			assertEquals(1, featureCount);
 		} catch (ProvisionException e) {
 			fail("0.4", e);
@@ -252,7 +252,7 @@ public class UpdateSiteTest extends AbstractProvisioningTest {
 			fail("0.3", e);
 		}
 		try {
-			updatesite.loadFeatures();
+			updatesite.loadFeatures(new NullProgressMonitor());
 		} catch (ProvisionException e) {
 			fail("0.4", e);
 		}
@@ -319,7 +319,7 @@ public class UpdateSiteTest extends AbstractProvisioningTest {
 			fail("0.3", e);
 		}
 		try {
-			int featureCount = updatesite.loadFeatures().length;
+			int featureCount = updatesite.loadFeatures(new NullProgressMonitor()).length;
 			assertEquals(0, featureCount);
 		} catch (ProvisionException e) {
 			fail("0.5");
@@ -337,7 +337,7 @@ public class UpdateSiteTest extends AbstractProvisioningTest {
 			fail("0.3", e);
 		}
 		try {
-			int featureCount = updatesite.loadFeatures().length;
+			int featureCount = updatesite.loadFeatures(new NullProgressMonitor()).length;
 			assertEquals(1, featureCount);
 		} catch (ProvisionException e) {
 			fail("0.5");
@@ -355,7 +355,7 @@ public class UpdateSiteTest extends AbstractProvisioningTest {
 			fail("0.3", e);
 		}
 		try {
-			int featureCount = updatesite.loadFeatures().length;
+			int featureCount = updatesite.loadFeatures(new NullProgressMonitor()).length;
 			assertEquals(2, featureCount);
 		} catch (ProvisionException e) {
 			fail("0.5");
@@ -373,7 +373,7 @@ public class UpdateSiteTest extends AbstractProvisioningTest {
 			fail("0.3", e);
 		}
 		try {
-			int featureCount = updatesite.loadFeatures().length;
+			int featureCount = updatesite.loadFeatures(new NullProgressMonitor()).length;
 			assertEquals(2, featureCount);
 		} catch (ProvisionException e) {
 			fail("0.5");
@@ -391,7 +391,7 @@ public class UpdateSiteTest extends AbstractProvisioningTest {
 			fail("0.3", e);
 		}
 		try {
-			int featureCount = updatesite.loadFeatures().length;
+			int featureCount = updatesite.loadFeatures(new NullProgressMonitor()).length;
 			assertEquals(1, featureCount);
 		} catch (ProvisionException e) {
 			fail("0.5");
@@ -409,7 +409,7 @@ public class UpdateSiteTest extends AbstractProvisioningTest {
 			fail("0.3", e);
 		}
 		try {
-			int featureCount = updatesite.loadFeatures().length;
+			int featureCount = updatesite.loadFeatures(new NullProgressMonitor()).length;
 			assertEquals(2, featureCount);
 		} catch (ProvisionException e) {
 			fail("0.5");
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositoryElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositoryElement.java
index b5dc20b..f42a7c1 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositoryElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositoryElement.java
@@ -12,6 +12,7 @@ package org.eclipse.equinox.internal.provisional.p2.ui.model;
 
 import java.net.URL;
 import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.metadata.repository.MetadataRepositoryManager;
 import org.eclipse.equinox.internal.p2.ui.ProvUIActivator;
@@ -81,7 +82,7 @@ public class MetadataRepositoryElement extends RemoteQueriedElement implements I
 	 */
 	public IQueryable getQueryable() {
 		if (queryable == null)
-			return getMetadataRepository(null);
+			return getMetadataRepository(new NullProgressMonitor());
 		return queryable;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/LocalUpdateSiteAction.java b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/LocalUpdateSiteAction.java
index dc1ae33..11e90f0 100644
--- a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/LocalUpdateSiteAction.java
+++ b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/LocalUpdateSiteAction.java
@@ -6,19 +6,19 @@
  * 
  * Contributors: 
  *   Code 9 - initial API and implementation
+ *   IBM - ongoing development
  ******************************************************************************/
 package org.eclipse.equinox.internal.p2.updatesite;
 
-import org.eclipse.equinox.p2.publisher.actions.MergeResultsAction;
-
 import java.io.File;
 import java.net.MalformedURLException;
 import java.util.ArrayList;
-import org.eclipse.core.runtime.IStatus;
-import org.eclipse.core.runtime.Status;
+import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.p2.publisher.*;
+import org.eclipse.equinox.p2.publisher.actions.MergeResultsAction;
 import org.eclipse.equinox.p2.publisher.eclipse.BundlesAction;
 import org.eclipse.equinox.p2.publisher.eclipse.FeaturesAction;
+import org.eclipse.osgi.util.NLS;
 
 /**
  * A publishing action that processes a local (File-based) update site and generates
@@ -39,10 +39,16 @@ public class LocalUpdateSiteAction implements IPublisherAction {
 		this.updateSite = updateSite;
 	}
 
-	public IStatus perform(IPublisherInfo info, IPublisherResult results) {
+	public IStatus perform(IPublisherInfo info, IPublisherResult results, IProgressMonitor monitor) {
 		IPublisherAction[] actions = createActions();
-		for (int i = 0; i < actions.length; i++)
-			actions[i].perform(info, results);
+		MultiStatus finalStatus = new MultiStatus(LocalUpdateSiteAction.class.getName(), 0, NLS.bind(Messages.Error_Generation, source != null ? source : (updateSite != null ? updateSite.getLocation().toExternalForm() : "Unknown")), null); //$NON-NLS-1$
+		for (int i = 0; i < actions.length; i++) {
+			if (monitor.isCanceled())
+				return Status.CANCEL_STATUS;
+			finalStatus.merge(actions[i].perform(info, results, monitor));
+		}
+		if (!finalStatus.isOK())
+			return finalStatus;
 		return Status.OK_STATUS;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/Messages.java b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/Messages.java
index 2ba0c6a..20be74c 100644
--- a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/Messages.java
+++ b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/Messages.java
@@ -26,6 +26,7 @@ public class Messages extends NLS {
 	public static String InvalidRepositoryLocation;
 	public static String MalformedArchiveURL;
 	public static String PlatformAdminNotRegistered;
+	public static String Error_Generation;
 
 	public static String io_failedRead;
 	public static String repo_loading;
diff --git a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/RemoteFeaturesAction.java b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/RemoteFeaturesAction.java
index 3d1fc52..b745e29 100644
--- a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/RemoteFeaturesAction.java
+++ b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/RemoteFeaturesAction.java
@@ -6,11 +6,14 @@
  * 
  * Contributors: 
  *   Code 9 - initial API and implementation
+ *   IBM - ongoing development
  ******************************************************************************/
 package org.eclipse.equinox.internal.p2.updatesite;
 
 import java.util.Dictionary;
 import java.util.Properties;
+import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.publisher.IPublisherInfo;
@@ -18,11 +21,31 @@ import org.eclipse.equinox.p2.publisher.IPublisherResult;
 import org.eclipse.equinox.p2.publisher.eclipse.*;
 import org.eclipse.equinox.spi.p2.publisher.PublisherHelper;
 import org.eclipse.osgi.service.resolver.BundleDescription;
+import org.eclipse.osgi.util.NLS;
 
 public class RemoteFeaturesAction extends FeaturesAction {
+	private UpdateSite updateSite;
+
+	public RemoteFeaturesAction(UpdateSite updateSite) {
+		super((Feature[]) null);
+		this.updateSite = updateSite;
+	}
 
 	public RemoteFeaturesAction(Feature[] features) {
 		super(features);
+		throw new IllegalArgumentException();
+	}
+
+	public IStatus perform(IPublisherInfo info, IPublisherResult results, IProgressMonitor monitor) {
+		try {
+			features = updateSite.loadFeatures(monitor);
+			return super.perform(info, results, monitor);
+		} catch (ProvisionException e) {
+			return new Status(IStatus.ERROR, Activator.ID, NLS.bind(Messages.Error_Generation, updateSite), e);
+		} catch (OperationCanceledException e) {
+			return Status.CANCEL_STATUS;
+		}
+
 	}
 
 	protected void generateFeatureIUs(Feature[] features, IPublisherResult result, IPublisherInfo info) {
diff --git a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/RemoteUpdateSiteAction.java b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/RemoteUpdateSiteAction.java
index d53c747..d0dd3a1 100644
--- a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/RemoteUpdateSiteAction.java
+++ b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/RemoteUpdateSiteAction.java
@@ -6,16 +6,16 @@
  * 
  * Contributors: 
  *   Code 9 - initial API and implementation
+ *   IBM - ongoing development
  ******************************************************************************/
 package org.eclipse.equinox.internal.p2.updatesite;
 
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.ArrayList;
-import org.eclipse.core.runtime.IStatus;
-import org.eclipse.core.runtime.Status;
-import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.p2.publisher.*;
+import org.eclipse.osgi.util.NLS;
 
 /**
  * A publishing action that processes a remote (URL-based) update site and generates
@@ -34,24 +34,24 @@ public class RemoteUpdateSiteAction implements IPublisherAction {
 		this.source = source;
 	}
 
-	public IStatus perform(IPublisherInfo info, IPublisherResult results) {
+	public IStatus perform(IPublisherInfo info, IPublisherResult results, IProgressMonitor monitor) {
 		IPublisherAction[] actions = createActions();
-		for (int i = 0; i < actions.length; i++)
-			actions[i].perform(info, results);
+		MultiStatus finalStatus = new MultiStatus(this.getClass().getName(), 0, NLS.bind(Messages.Error_Generation, source != null ? source : (updateSite != null ? updateSite.getLocation().toExternalForm() : "Unknown")), null); //$NON-NLS-1$
+		for (int i = 0; i < actions.length; i++) {
+			if (monitor.isCanceled())
+				return Status.CANCEL_STATUS;
+			finalStatus.merge(actions[i].perform(info, results, monitor));
+		}
+		if (!finalStatus.isOK())
+			return finalStatus;
 		return Status.OK_STATUS;
 	}
 
 	protected IPublisherAction[] createActions() {
-		try {
-			ArrayList result = new ArrayList();
-			result.add(new RemoteFeaturesAction(updateSite.loadFeatures()));
-			result.add(createSiteXMLAction());
-			return (IPublisherAction[]) result.toArray(new IPublisherAction[result.size()]);
-		} catch (ProvisionException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		}
-		return new IPublisherAction[0];
+		ArrayList result = new ArrayList();
+		result.add(new RemoteFeaturesAction(updateSite));
+		result.add(createSiteXMLAction());
+		return (IPublisherAction[]) result.toArray(new IPublisherAction[result.size()]);
 	}
 
 	private IPublisherAction createSiteXMLAction() {
diff --git a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/SiteXMLAction.java b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/SiteXMLAction.java
index 8c49984..aaeb893 100644
--- a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/SiteXMLAction.java
+++ b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/SiteXMLAction.java
@@ -6,6 +6,7 @@
  * 
  * Contributors: 
  *   Code 9 - initial API and implementation
+ *   IBM - ongoing development
  ******************************************************************************/
 package org.eclipse.equinox.internal.p2.updatesite;
 
@@ -38,23 +39,19 @@ public class SiteXMLAction extends AbstractPublisherAction {
 	private UpdateSite updateSite;
 	private SiteCategory defaultCategory;
 	private HashSet defaultCategorySet;
+	private URL location;
 
 	public SiteXMLAction(URL location) {
-		try {
-			updateSite = UpdateSite.load(location, new NullProgressMonitor());
-		} catch (ProvisionException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		}
-		initialize();
+		this.location = location;
 	}
 
 	public SiteXMLAction(UpdateSite updateSite) {
 		this.updateSite = updateSite;
-		initialize();
 	}
 
 	private void initialize() {
+		if (defaultCategory != null)
+			return;
 		defaultCategory = new SiteCategory();
 		defaultCategory.setDescription("Default category for otherwise uncategorized features"); //$NON-NLS-1$
 		defaultCategory.setLabel("Uncategorized"); //$NON-NLS-1$
@@ -63,15 +60,26 @@ public class SiteXMLAction extends AbstractPublisherAction {
 		defaultCategorySet.add(defaultCategory);
 	}
 
-	public IStatus perform(IPublisherInfo info, IPublisherResult results) {
-		generateCategories(info, results);
-		return Status.OK_STATUS;
+	public IStatus perform(IPublisherInfo info, IPublisherResult results, IProgressMonitor monitor) {
+		if (updateSite == null) {
+			try {
+				updateSite = UpdateSite.load(location, monitor);
+			} catch (ProvisionException e) {
+				return new Status(IStatus.ERROR, Activator.ID, "Error generating site xml action.", e);
+			} catch (OperationCanceledException e) {
+				return Status.CANCEL_STATUS;
+			}
+		}
+		initialize();
+		return generateCategories(info, results, monitor);
 	}
 
-	private void generateCategories(IPublisherInfo info, IPublisherResult results) {
+	private IStatus generateCategories(IPublisherInfo info, IPublisherResult results, IProgressMonitor monitor) {
 		Map categoriesToFeatureIUs = new HashMap();
 		Map featuresToCategories = getFeatureToCategoryMappings(info);
 		for (Iterator i = featuresToCategories.keySet().iterator(); i.hasNext();) {
+			if (monitor.isCanceled())
+				return Status.CANCEL_STATUS;
 			SiteFeature feature = (SiteFeature) i.next();
 			IInstallableUnit iu = getFeatureIU(feature, results);
 			Set categories = (Set) featuresToCategories.get(feature);
@@ -89,6 +97,7 @@ public class SiteXMLAction extends AbstractPublisherAction {
 			}
 		}
 		generateCategoryIUs(categoriesToFeatureIUs, results);
+		return Status.OK_STATUS;
 	}
 
 	private IInstallableUnit getFeatureIU(SiteFeature feature, IPublisherResult results) {
diff --git a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/UpdateSite.java b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/UpdateSite.java
index 0eda749..e8ce3a9 100644
--- a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/UpdateSite.java
+++ b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/UpdateSite.java
@@ -155,6 +155,8 @@ public class UpdateSite {
 				OutputStream destination = new BufferedOutputStream(new FileOutputStream(siteFile));
 				transferResult = getTransport().download(actualLocation.toExternalForm(), destination, monitor);
 			}
+			if (monitor.isCanceled())
+				throw new OperationCanceledException();
 			if (transferResult.isOK()) {
 				// successful. If the siteFile is the download of a remote site.xml it will get cleaned up later
 				deleteSiteFile = false;
@@ -176,7 +178,7 @@ public class UpdateSite {
 	 * Parse the feature.xml specified by the given input stream and return the feature object.
 	 * In case of failure, the failure is logged and null is returned
 	 */
-	private static Feature parseFeature(FeatureParser featureParser, URL featureURL) {
+	private static Feature parseFeature(FeatureParser featureParser, URL featureURL, IProgressMonitor monitor) {
 		File featureFile = null;
 		if (PROTOCOL_FILE.equals(featureURL.getProtocol())) {
 			featureFile = new File(featureURL.getPath());
@@ -187,11 +189,15 @@ public class UpdateSite {
 			IStatus transferResult = null;
 			//try the download twice in case of transient network problems
 			for (int i = 0; i < RETRY_COUNT; i++) {
+				if (monitor.isCanceled())
+					throw new OperationCanceledException();
 				OutputStream destination = new BufferedOutputStream(new FileOutputStream(featureFile));
-				transferResult = getTransport().download(featureURL.toExternalForm(), destination, null);
+				transferResult = getTransport().download(featureURL.toExternalForm(), destination, monitor);
 				if (transferResult.isOK())
 					break;
 			}
+			if (monitor.isCanceled())
+				throw new OperationCanceledException();
 			if (!transferResult.isOK()) {
 				LogHelper.log(new ProvisionException(transferResult));
 				return null;
@@ -371,20 +377,20 @@ public class UpdateSite {
 	/*
 	 * Load and return the features references in this update site.
 	 */
-	public synchronized Feature[] loadFeatures() throws ProvisionException {
-		Feature[] result = loadFeaturesFromDigest();
-		return result == null ? loadFeaturesFromSite() : result;
+	public synchronized Feature[] loadFeatures(IProgressMonitor monitor) throws ProvisionException {
+		if (!featureCache.isEmpty())
+			return (Feature[]) featureCache.values().toArray(new Feature[featureCache.size()]);
+		Feature[] result = loadFeaturesFromDigest(monitor);
+		return result == null ? loadFeaturesFromSite(monitor) : result;
 	}
 
 	/*
 	 * Try and load the feature information from the update site's
 	 * digest file, if it exists.
 	 */
-	private Feature[] loadFeaturesFromDigest() {
+	private Feature[] loadFeaturesFromDigest(IProgressMonitor monitor) {
 		File digestFile = null;
 		boolean local = false;
-		if (!featureCache.isEmpty())
-			return (Feature[]) featureCache.values().toArray(new Feature[featureCache.size()]);
 		try {
 			URL digestURL = getDigestURL();
 			if (PROTOCOL_FILE.equals(digestURL.getProtocol())) {
@@ -395,17 +401,21 @@ public class UpdateSite {
 			} else {
 				digestFile = File.createTempFile("digest", ".zip"); //$NON-NLS-1$ //$NON-NLS-2$
 				BufferedOutputStream destination = new BufferedOutputStream(new FileOutputStream(digestFile));
-				IStatus result = getTransport().download(digestURL.toExternalForm(), destination, null);
+				IStatus result = getTransport().download(digestURL.toExternalForm(), destination, monitor);
+				if (result.getSeverity() == IStatus.CANCEL || monitor.isCanceled())
+					throw new OperationCanceledException();
 				if (!result.isOK())
 					return null;
 			}
 			Feature[] features = new DigestParser().parse(digestFile);
 			if (features == null)
 				return null;
+			Map tmpFeatureCache = new HashMap(features.length);
 			for (int i = 0; i < features.length; i++) {
 				String key = features[i].getId() + VERSION_SEPARATOR + features[i].getVersion();
-				featureCache.put(key, features[i]);
+				tmpFeatureCache.put(key, features[i]);
 			}
+			featureCache = tmpFeatureCache;
 			return features;
 		} catch (FileNotFoundException fnfe) {
 			// we do not track FNF exceptions as we will fall back to the 
@@ -438,19 +448,24 @@ public class UpdateSite {
 	 * Load and return the features that are referenced by this update site. Note this
 	 * requires downloading and parsing the feature manifest locally.
 	 */
-	private Feature[] loadFeaturesFromSite() throws ProvisionException {
+	private Feature[] loadFeaturesFromSite(IProgressMonitor monitor) throws ProvisionException {
 		SiteFeature[] siteFeatures = site.getFeatures();
 		FeatureParser featureParser = new FeatureParser();
+		Map tmpFeatureCache = new HashMap(siteFeatures.length);
+
 		for (int i = 0; i < siteFeatures.length; i++) {
+			if (monitor.isCanceled()) {
+				throw new OperationCanceledException();
+			}
 			SiteFeature siteFeature = siteFeatures[i];
 			String key = null;
 			if (siteFeature.getFeatureIdentifier() != null && siteFeature.getFeatureVersion() != null) {
 				key = siteFeature.getFeatureIdentifier() + VERSION_SEPARATOR + siteFeature.getFeatureVersion();
-				if (featureCache.containsKey(key))
+				if (tmpFeatureCache.containsKey(key))
 					continue;
 			}
 			URL featureURL = getSiteFeatureURL(siteFeature);
-			Feature feature = parseFeature(featureParser, featureURL);
+			Feature feature = parseFeature(featureParser, featureURL, monitor);
 			if (feature == null) {
 				LogHelper.log(new Status(IStatus.ERROR, Activator.ID, NLS.bind(Messages.ErrorReadingFeature, featureURL)));
 			} else {
@@ -459,33 +474,36 @@ public class UpdateSite {
 					siteFeature.setFeatureVersion(feature.getVersion());
 					key = siteFeature.getFeatureIdentifier() + VERSION_SEPARATOR + siteFeature.getFeatureVersion();
 				}
-				featureCache.put(key, feature);
-				loadIncludedFeatures(feature, featureParser);
+				tmpFeatureCache.put(key, feature);
+				loadIncludedFeatures(feature, featureParser, tmpFeatureCache, monitor);
 			}
 		}
+		featureCache = tmpFeatureCache;
 		return (Feature[]) featureCache.values().toArray(new Feature[featureCache.size()]);
 	}
 
 	/*
 	 * Load the features that are included by the given feature.
 	 */
-	private void loadIncludedFeatures(Feature feature, FeatureParser featureParser) throws ProvisionException {
+	private void loadIncludedFeatures(Feature feature, FeatureParser featureParser, Map features, IProgressMonitor monitor) throws ProvisionException {
 		FeatureEntry[] featureEntries = feature.getEntries();
 		for (int i = 0; i < featureEntries.length; i++) {
+			if (monitor.isCanceled())
+				throw new OperationCanceledException();
 			FeatureEntry entry = featureEntries[i];
 			if (entry.isRequires() || entry.isPlugin())
 				continue;
 			String key = entry.getId() + VERSION_SEPARATOR + entry.getVersion();
-			if (featureCache.containsKey(key))
+			if (features.containsKey(key))
 				continue;
 
 			URL includedFeatureURL = getFeatureURL(entry.getId(), entry.getVersion());
-			Feature includedFeature = parseFeature(featureParser, includedFeatureURL);
+			Feature includedFeature = parseFeature(featureParser, includedFeatureURL, monitor);
 			if (includedFeature == null) {
 				LogHelper.log(new Status(IStatus.ERROR, Activator.ID, NLS.bind(Messages.ErrorReadingFeature, includedFeatureURL)));
 			} else {
-				featureCache.put(key, includedFeature);
-				loadIncludedFeatures(includedFeature, featureParser);
+				features.put(key, includedFeature);
+				loadIncludedFeatures(includedFeature, featureParser, features, monitor);
 			}
 		}
 	}
diff --git a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepositoryFactory.java
index 392d0ee..0f6dab9 100644
--- a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepositoryFactory.java
+++ b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepositoryFactory.java
@@ -52,7 +52,7 @@ public class UpdateSiteArtifactRepositoryFactory implements IArtifactRepositoryF
 		URL localRepositoryURL = UpdateSiteMetadataRepositoryFactory.getLocalRepositoryLocation(location);
 		SimpleArtifactRepositoryFactory factory = new SimpleArtifactRepositoryFactory();
 		try {
-			IArtifactRepository repository = factory.load(localRepositoryURL, null);
+			IArtifactRepository repository = factory.load(localRepositoryURL, monitor);
 			if (!repository.getProperties().get(IRepository.PROP_SYSTEM).equals(Boolean.TRUE.toString()))
 				repository.setProperty(IRepository.PROP_SYSTEM, Boolean.TRUE.toString());
 			return repository;
@@ -66,7 +66,7 @@ public class UpdateSiteArtifactRepositoryFactory implements IArtifactRepositoryF
 	}
 
 	public void initializeRepository(IArtifactRepository repository, URL location, IProgressMonitor monitor) throws ProvisionException {
-		UpdateSite updateSite = UpdateSite.load(location, null);
+		UpdateSite updateSite = UpdateSite.load(location, monitor);
 		String savedChecksum = (String) repository.getProperties().get(PROP_SITE_CHECKSUM);
 		if (savedChecksum != null && savedChecksum.equals(updateSite.getChecksum()))
 			return;
@@ -75,11 +75,11 @@ public class UpdateSiteArtifactRepositoryFactory implements IArtifactRepositoryF
 			repository.setProperty(PROP_FORCE_THREADING, "true"); //$NON-NLS-1$
 		repository.setProperty(PROP_SITE_CHECKSUM, updateSite.getChecksum());
 		repository.removeAll();
-		generateArtifactDescriptors(updateSite, repository);
+		generateArtifactDescriptors(updateSite, repository, monitor);
 	}
 
-	private void generateArtifactDescriptors(UpdateSite updateSite, IArtifactRepository repository) throws ProvisionException {
-		Feature[] features = updateSite.loadFeatures();
+	private void generateArtifactDescriptors(UpdateSite updateSite, IArtifactRepository repository, IProgressMonitor monitor) throws ProvisionException {
+		Feature[] features = updateSite.loadFeatures(monitor);
 		Set allSiteArtifacts = new HashSet();
 		for (int i = 0; i < features.length; i++) {
 			Feature feature = features[i];
diff --git a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/messages.properties b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/messages.properties
index c6def23..65cc8cb 100644
--- a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/messages.properties
@@ -18,6 +18,7 @@ MalformedArchiveURL=Malformed URL {0} for path {1} in site at {2}.
 io_failedRead=Unable to read repository at {0}.
 repoMan_internalError=Internal error.
 repo_loading = Loading the repository {0}
+Error_Generation=Problems generating update site metadata {0}.
 
 DefaultFeatureParser_IdOrVersionInvalid= Error parsing feature stream. The unique identifier or the version is null or empty for the State: \"{2}\": unique identifier=\"{0}\" version=\"{1}\".
 DefaultSiteParser_NoSiteTag= Error parsing site stream. Unable to find root element \"site\" in the stream.
diff --git a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepositoryFactory.java
index a18a2fc..fa26a43 100644
--- a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepositoryFactory.java
+++ b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepositoryFactory.java
@@ -68,7 +68,7 @@ public class UpdateSiteMetadataRepositoryFactory implements IMetadataRepositoryF
 		URL localRepositoryURL = getLocalRepositoryLocation(location);
 		SimpleMetadataRepositoryFactory factory = new SimpleMetadataRepositoryFactory();
 		try {
-			IMetadataRepository repository = factory.load(localRepositoryURL, null);
+			IMetadataRepository repository = factory.load(localRepositoryURL, monitor);
 			if (!repository.getProperties().get(IRepository.PROP_SYSTEM).equals(Boolean.TRUE.toString()))
 				repository.setProperty(IRepository.PROP_SYSTEM, Boolean.TRUE.toString());
 			return repository;
@@ -82,21 +82,26 @@ public class UpdateSiteMetadataRepositoryFactory implements IMetadataRepositoryF
 	}
 
 	public void initializeRepository(IMetadataRepository repository, URL location, IProgressMonitor monitor) throws ProvisionException {
-		UpdateSite updateSite = UpdateSite.load(location, null);
+		UpdateSite updateSite = UpdateSite.load(location, monitor);
 		String savedChecksum = (String) repository.getProperties().get(PROP_SITE_CHECKSUM);
 		if (savedChecksum != null && savedChecksum.equals(updateSite.getChecksum()))
 			return;
 		repository.setProperty(PROP_SITE_CHECKSUM, updateSite.getChecksum());
 		repository.removeAll();
-		generateMetadata(updateSite, repository);
+		IStatus status = generateMetadata(updateSite, repository, monitor);
+		if (monitor.isCanceled())
+			throw new OperationCanceledException();
+		if (!status.isOK())
+			throw new ProvisionException(status);
+
 	}
 
-	private void generateMetadata(UpdateSite updateSite, IMetadataRepository repository) {
+	private IStatus generateMetadata(UpdateSite updateSite, IMetadataRepository repository, IProgressMonitor monitor) {
 		PublisherInfo info = new PublisherInfo();
 		info.setMetadataRepository(repository);
 		IPublisherAction[] actions = new IPublisherAction[] {new RemoteUpdateSiteAction(updateSite)};
 		Publisher publisher = new Publisher(info);
-		publisher.publish(actions);
+		return publisher.publish(actions, monitor);
 	}
 
 }

commit 13fac28a49d07a554060d2c82fc24b1448a1b391
Author: Andrew Niefer <aniefer>
Date:   Wed Feb 20 23:25:08 2008 +0000

    bug 218623 - product IU from .product file

6	0	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/features/ProductFile.java
30	11	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
1	1	bundles/org.eclipse.equinox.p2.metadata.generator/src_ant/org/eclipse/equinox/internal/p2/metadata/generator/ant/GeneratorTask.java
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/features/ProductFile.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/features/ProductFile.java
index 8db4c0f..f31c483 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/features/ProductFile.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/features/ProductFile.java
@@ -98,6 +98,7 @@ public class ProductFile extends DefaultHandler {
 	private String splashLocation = null;
 	private String productName = null;
 	private String application = null;
+	private String version = null;
 
 	private Properties launcherArgs = new Properties();
 
@@ -213,6 +214,10 @@ public class ProductFile extends DefaultHandler {
 		return useFeatures;
 	}
 
+	public String getVersion() {
+		return (version == null) ? "0.0.0" : version; //$NON-NLS-1$
+	}
+
 	public String getVMArguments(String os) {
 		String key = null;
 		if (os.equals(OS_WIN32)) {
@@ -446,6 +451,7 @@ public class ProductFile extends DefaultHandler {
 		String use = attributes.getValue("useFeatures"); //$NON-NLS-1$
 		if (use != null)
 			useFeatures = Boolean.valueOf(use).booleanValue();
+		version = attributes.getValue("version"); //$NON-NLS-1$
 	}
 
 	private void processConfigIni(Attributes attributes) {
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
index adf6311..ba0b2fc 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
@@ -155,12 +155,20 @@ public class Generator {
 			productContents.rootIUs.add(iterator.next());
 		}
 
-		//TODO get a real version
-		String version = info.getRootVersion() != null ? info.getRootVersion() : "0.0.0"; //$NON-NLS-1$
+		String version = productFile.getVersion();
+		if (version.equals("0.0.0") && info.getRootVersion() != null) //$NON-NLS-1$
+			version = info.getRootVersion();
 		ArrayList requires = new ArrayList(1);
 		requires.add(MetadataFactory.createRequiredCapability(info.getFlavor() + productFile.getId(), productFile.getId() + ".launcher", VersionRange.emptyRange, null, false, true)); //$NON-NLS-1$
-		requires.add(MetadataFactory.createRequiredCapability(info.getFlavor() + productFile.getId(), productFile.getId() + ".ini", VersionRange.emptyRange, null, true, false)); //$NON-NLS-1$
+		requires.add(MetadataFactory.createRequiredCapability(info.getFlavor() + productFile.getId(), productFile.getId() + ".ini", VersionRange.emptyRange, null, false, false)); //$NON-NLS-1$
 		requires.add(MetadataFactory.createRequiredCapability(info.getFlavor() + productFile.getId(), productFile.getId() + ".config", VersionRange.emptyRange, null, false, false)); //$NON-NLS-1$
+		
+		//default CUs		
+		requires.add(MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, info.getFlavor() + ".plugin.default", VersionRange.emptyRange, null, false, false)); //$NON-NLS-1$
+		requires.add(MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, info.getFlavor() + ".source.default", VersionRange.emptyRange, null, true, false)); //$NON-NLS-1$
+		if(productFile.useFeatures())
+			requires.add(MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, info.getFlavor() + ".feature.default", VersionRange.emptyRange, null, true, false)); //$NON-NLS-1$
+		
 		InstallableUnitDescription root = createTopLevelIUDescription(productContents, productFile.getId(), version, productFile.getProductName(), requires, false);
 		return MetadataFactory.createInstallableUnit(root);
 	}
@@ -415,14 +423,21 @@ public class Generator {
 						"addJvmArg(jvmArg:-Dorg.eclipse.p2.update.compatibility=false);"); //$NON-NLS-1$
 				bundle.setSpecialUnconfigCommands("removeJvmArg(jvmArg:-Dorg.eclipse.update.reconcile=false);" + //$NON-NLS-1$
 						"removeJvmArg(jvmArg:-Dorg.eclipse.p2.update.compatibility=false);"); //$NON-NLS-1$
-			}
-			if (bundle.getSymbolicName().equals(ORG_ECLIPSE_EQUINOX_SIMPLECONFIGURATOR)) {
+			} else if (bundle.getSymbolicName().equals(ORG_ECLIPSE_EQUINOX_SIMPLECONFIGURATOR)) {
 				bundle.setSpecialConfigCommands("addJvmArg(jvmArg:-Dorg.eclipse.equinox.simpleconfigurator.useReference=true);"); //$NON-NLS-1$
 				bundle.setSpecialUnconfigCommands("removeJvmArg(jvmArg:-Dorg.eclipse.equinox.simpleconfigurator.useReference=true);"); //$NON-NLS-1$
+			} else if (bundle.getStartLevel() == BundleInfo.NO_LEVEL && !bundle.isMarkedAsStarted()) {
+				// this bundle does not require any particular configuration, the plug-in default IU will handle installing it
+				continue;
 			}
 
-			IInstallableUnit cu = MetadataGeneratorHelper.createBundleConfigurationUnit(cuIdPrefix + bundle.getSymbolicName(), new Version(bundle.getVersion()), false, bundle, info.getFlavor(), filter);
+			IInstallableUnit cu = MetadataGeneratorHelper.createBundleConfigurationUnit(bundle.getSymbolicName(), new Version(bundle.getVersion()), false, bundle, info.getFlavor() + cuIdPrefix, filter);
 			if (cu != null) {
+				// Product Query will run against the repo, make sure these CUs are in before then
+				IMetadataRepository metadataRepository = info.getMetadataRepository();
+				if (metadataRepository != null) {
+					metadataRepository.addInstallableUnits(new IInstallableUnit[] {cu});
+				}
 				result.rootIUs.add(cu);
 				if (result.configurationIUs.containsKey(bundle.getSymbolicName())) {
 					((Set) result.configurationIUs.get(bundle.getSymbolicName())).add(cu);
@@ -459,8 +474,9 @@ public class Generator {
 			for (Iterator iterator = info.getDefaultIUs(result.rootIUs).iterator(); iterator.hasNext();) {
 				GeneratorBundleInfo bundle = (GeneratorBundleInfo) iterator.next();
 				IInstallableUnit configuredIU = result.getInstallableUnit(bundle.getSymbolicName());
-				if (configuredIU != null)
-					bundle.setVersion(configuredIU.getVersion().toString());
+				if (configuredIU == null)
+					continue;
+				bundle.setVersion(configuredIU.getVersion().toString());
 				String filter = configuredIU == null ? null : configuredIU.getFilter();
 				IInstallableUnit cu = MetadataGeneratorHelper.createBundleConfigurationUnit(bundle.getSymbolicName(), new Version(bundle.getVersion()), false, bundle, info.getFlavor(), filter);
 				//the configuration unit should share the same platform filter as the IU being configured.
@@ -666,7 +682,7 @@ public class Generator {
 
 			InstallableUnitDescription cu = new MetadataFactory.InstallableUnitDescription();
 			String configUnitId = info.getFlavor() + productFile.getId() + ".config." + ws + '.' + os + '.' + arch; //$NON-NLS-1$
-			Version cuVersion = new Version("0.0.0"); //$NON-NLS-1$
+			Version cuVersion = new Version(productFile.getVersion());
 			cu.setId(configUnitId);
 			cu.setVersion(cuVersion);
 			cu.setFilter("(& (osgi.ws=" + ws + ") (osgi.os=" + os + ") (osgi.arch=" + arch + "))"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
@@ -778,8 +794,11 @@ public class Generator {
 
 		if (info.getLauncherConfig() != null) {
 			String[] config = getArrayFromString(info.getLauncherConfig(), "_"); //$NON-NLS-1$
-			generateExecutableIUs(config[1], config[0], config[2], "1.0.0", executableLocation.getParentFile(), result, destination); //$NON-NLS-1$
-			generateProductIniCU(config[1], config[0], config[2], "1.0.0", result); //$NON-NLS-1$
+			String version = "1.0.0"; //$NON-NLS-1$
+			if (productFile != null && !productFile.getVersion().equals("0.0.0")) //$NON-NLS-1$
+				version = productFile.getVersion();
+			generateExecutableIUs(config[1], config[0], config[2], version, executableLocation.getParentFile(), result, destination);
+			generateProductIniCU(config[1], config[0], config[2], version, result);
 			return;
 		}
 
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src_ant/org/eclipse/equinox/internal/p2/metadata/generator/ant/GeneratorTask.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src_ant/org/eclipse/equinox/internal/p2/metadata/generator/ant/GeneratorTask.java
index 5db0260..c4a9e04 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src_ant/org/eclipse/equinox/internal/p2/metadata/generator/ant/GeneratorTask.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src_ant/org/eclipse/equinox/internal/p2/metadata/generator/ant/GeneratorTask.java
@@ -137,7 +137,7 @@ public class GeneratorTask extends Task {
 	public void setNoDefaultIUs(String value) {
 		if (provider == null)
 			provider = new EclipseInstallGeneratorInfoProvider();
-		provider.setAddDefaultIUs(Boolean.valueOf(value).booleanValue());
+		provider.setAddDefaultIUs(!Boolean.valueOf(value).booleanValue());
 	}
 
 	public void setP2OS(String value) {
commit ac034c613f2b94cd9998984fba6773a3b7d54a62
Author: Andrew Niefer <aniefer>
Date:   Mon Feb 25 21:46:27 2008 +0000

    bug 218623 - feature based product IUs

14	1	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/ProductQuery.java
6	3	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/ProductQuery.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/ProductQuery.java
index 7286b20..90c6be3 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/ProductQuery.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/ProductQuery.java
@@ -13,6 +13,7 @@ package org.eclipse.equinox.internal.p2.metadata.generator;
 import java.util.*;
 import org.eclipse.equinox.internal.p2.metadata.generator.features.ProductFile;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.metadata.generator.Generator.GeneratorResult;
 import org.eclipse.equinox.internal.provisional.p2.query.Query;
 import org.eclipse.osgi.service.resolver.VersionRange;
 
@@ -30,9 +31,13 @@ public class ProductQuery extends Query {
 	}
 
 	private void initialize(Map configIUs) {
-		List contents = product.useFeatures() ? product.getFeatures() : product.getPlugins();
+		boolean features = product.useFeatures();
+		List contents = features ? product.getFeatures() : product.getPlugins();
 		for (Iterator iterator = contents.iterator(); iterator.hasNext();) {
 			String item = (String) iterator.next();
+			if (features) // for features we want the group
+				item += ".featureGroup"; //$NON-NLS-1$
+
 			children.put(item, VersionRange.emptyRange);
 			if (configIUs.containsKey(item)) {
 				for (Iterator ius = ((Set) configIUs.get(item)).iterator(); ius.hasNext();) {
@@ -64,6 +69,14 @@ public class ProductQuery extends Query {
 				children.put(object.getId(), new VersionRange(object.getVersion(), true, object.getVersion(), true));
 			}
 		}
+
+		// feature based product, individual bundle config CUs are under CONFIGURATION_CUS for convenience
+		if (features && configIUs.containsKey(GeneratorResult.CONFIGURATION_CUS)) {
+			for (Iterator ius = ((Set) configIUs.get(GeneratorResult.CONFIGURATION_CUS)).iterator(); ius.hasNext();) {
+				IInstallableUnit object = (IInstallableUnit) ius.next();
+				children.put(object.getId(), new VersionRange(object.getVersion(), true, object.getVersion(), true));
+			}
+		}
 	}
 
 	/* (non-Javadoc)
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
index e8382a9..dfd45a9 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
@@ -38,6 +38,8 @@ public class Generator {
 	 * Captures the output of an execution of the generator.
 	 */
 	public static class GeneratorResult {
+		public static final String CONFIGURATION_CUS = "CONFIGURATION_CUS"; //$NON-NLS-1$
+
 		/**
 		 * The set of generated IUs that will be children of the root IU
 		 */
@@ -435,12 +437,13 @@ public class Generator {
 					metadataRepository.addInstallableUnits(new IInstallableUnit[] {cu});
 				}
 				result.rootIUs.add(cu);
-				if (result.configurationIUs.containsKey(bundle.getSymbolicName())) {
-					((Set) result.configurationIUs.get(bundle.getSymbolicName())).add(cu);
+				String key = (productFile != null && productFile.useFeatures()) ? GeneratorResult.CONFIGURATION_CUS : bundle.getSymbolicName();
+				if (result.configurationIUs.containsKey(key)) {
+					((Set) result.configurationIUs.get(key)).add(cu);
 				} else {
 					Set set = new HashSet();
 					set.add(cu);
-					result.configurationIUs.put(bundle.getSymbolicName(), set);
+					result.configurationIUs.put(key, set);
 				}
 			}
 		}
commit 2a5bf38628bc85b991bf0f94edce0b888a6bbcec
Author: Pascal Rapicault <prapicau>
Date:   Tue Mar 4 15:27:05 2008 +0000

    Bug 218623 - [prov] Generation of product IU from product file

63	2	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/ProductQuery.java
9	0	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java
2	2	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
4	0	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/IGeneratorInfo.java
6	0	bundles/org.eclipse.equinox.p2.metadata.generator/src_ant/org/eclipse/equinox/internal/p2/metadata/generator/ant/GeneratorTask.java
9	0	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/generator/TestGeneratorInfo.java
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/ProductQuery.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/ProductQuery.java
index 049a097..8486d52 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/ProductQuery.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/ProductQuery.java
@@ -10,13 +10,16 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.metadata.generator;
 
+import java.io.*;
 import java.util.*;
 import org.eclipse.equinox.internal.p2.metadata.generator.features.ProductFile;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.metadata.generator.MetadataGeneratorHelper;
 import org.eclipse.equinox.internal.provisional.p2.metadata.generator.Generator.GeneratorResult;
+import org.eclipse.equinox.internal.provisional.p2.query.Collector;
 import org.eclipse.equinox.internal.provisional.p2.query.Query;
 import org.eclipse.osgi.service.resolver.VersionRange;
+import org.osgi.framework.Version;
 
 public class ProductQuery extends Query {
 	private static final String EQUINOX_LAUNCHER = "org.eclipse.equinox.launcher"; //$NON-NLS-1$
@@ -24,22 +27,80 @@ public class ProductQuery extends Query {
 	private final ProductFile product;
 	private final String flavor;
 	private final Map children = new HashMap();
+	private final String versionAdvice;
 
-	public ProductQuery(ProductFile product, String flavor, Map configIUs) {
+	// Collector collects the largest version of each IU
+	private final Collector collector = new Collector() {
+		private final HashMap elements = new HashMap();
+
+		public boolean accept(Object object) {
+			if (!(object instanceof IInstallableUnit))
+				return true;
+			IInstallableUnit iu = (IInstallableUnit) object;
+			if (elements.containsKey(iu.getId())) {
+				IInstallableUnit existing = (IInstallableUnit) elements.get(iu.getId());
+				if (existing.getVersion().compareTo(iu.getVersion()) >= 0)
+					return true;
+				getList().remove(existing);
+			}
+			elements.put(iu.getId(), iu);
+			return super.accept(object);
+		}
+	};
+
+	public ProductQuery(ProductFile product, String flavor, Map configIUs, String versionAdvice) {
 		this.product = product;
 		this.flavor = flavor;
+		this.versionAdvice = versionAdvice;
 		initialize(configIUs);
 	}
 
+	public Collector getCollector() {
+		return this.collector;
+	}
+
+	private Properties loadVersions(String location) {
+		Properties properties = new Properties();
+		if (location == null)
+			return properties;
+		File file = new File(location);
+		if (file.exists()) {
+			InputStream stream = null;
+			try {
+				stream = new BufferedInputStream(new FileInputStream(file));
+				properties.load(stream);
+			} catch (IOException e) {
+				// nothing
+			} finally {
+				if (stream != null)
+					try {
+						stream.close();
+					} catch (IOException e) {
+						//nothing
+					}
+			}
+		}
+		return properties;
+	}
+
 	private void initialize(Map configIUs) {
 		boolean features = product.useFeatures();
+		Properties versions = loadVersions(versionAdvice);
+
 		List contents = features ? product.getFeatures() : product.getPlugins();
 		for (Iterator iterator = contents.iterator(); iterator.hasNext();) {
 			String item = (String) iterator.next();
+
+			VersionRange range = VersionRange.emptyRange;
+			if (versions.containsKey(item)) {
+				Version value = new Version(versions.getProperty(item));
+				range = new VersionRange(value, true, value, true);
+			}
+
 			if (features) // for features we want the group
 				item = MetadataGeneratorHelper.getTransformedId(item, false, true);
 
-			children.put(item, VersionRange.emptyRange);
+			children.put(item, range);
 			if (configIUs.containsKey(item)) {
 				for (Iterator ius = ((Set) configIUs.get(item)).iterator(); ius.hasNext();) {
 					IInstallableUnit object = (IInstallableUnit) ius.next();
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java
index 4c6f25f..8429a14 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java
@@ -90,6 +90,7 @@ public class EclipseInstallGeneratorInfoProvider implements IGeneratorInfo {
 	private String rootVersion;
 	private String productFile = null;
 	private String launcherConfig;
+	private String versionAdvice;
 
 	private URL siteLocation;
 
@@ -502,4 +503,12 @@ public class EclipseInstallGeneratorInfoProvider implements IGeneratorInfo {
 		}
 		return false;
 	}
+
+	public String getVersionAdvice() {
+		return versionAdvice;
+	}
+
+	public void setVersionAdvice(String advice) {
+		this.versionAdvice = advice;
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
index baabc85..5ba052e 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
@@ -143,8 +143,8 @@ public class Generator {
 
 		GeneratorResult productContents = new GeneratorResult();
 
-		ProductQuery query = new ProductQuery(productFile, info.getFlavor(), result.configurationIUs);
-		Collector collector = info.getMetadataRepository().query(query, new Collector(), null);
+		ProductQuery query = new ProductQuery(productFile, info.getFlavor(), result.configurationIUs, info.getVersionAdvice());
+		Collector collector = info.getMetadataRepository().query(query, query.getCollector(), null);
 		for (Iterator iterator = collector.iterator(); iterator.hasNext();) {
 			productContents.rootIUs.add(iterator.next());
 		}
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/IGeneratorInfo.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/IGeneratorInfo.java
index a013391..0a4f2ac 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/IGeneratorInfo.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/IGeneratorInfo.java
@@ -88,6 +88,8 @@ public interface IGeneratorInfo {
 
 	public String getProductFile();
 
+	public String getVersionAdvice();
+
 	/**
 	 * Returns the location of the site.xml file, or <code>null</code> if not
 	 * generating for an update site.
@@ -115,6 +117,8 @@ public interface IGeneratorInfo {
 
 	public void setRootId(String value);
 
+	public void setVersionAdvice(String advice);
+
 	// TODO: This is kind of ugly. It's purpose is to allow us to craft CUs that we know about and need for our build
 	// We should try to replace this with something more generic prior to release
 	public Collection getOtherIUs();
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src_ant/org/eclipse/equinox/internal/p2/metadata/generator/ant/GeneratorTask.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src_ant/org/eclipse/equinox/internal/p2/metadata/generator/ant/GeneratorTask.java
index c4a9e04..663735c 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src_ant/org/eclipse/equinox/internal/p2/metadata/generator/ant/GeneratorTask.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src_ant/org/eclipse/equinox/internal/p2/metadata/generator/ant/GeneratorTask.java
@@ -179,4 +179,10 @@ public class GeneratorTask extends Task {
 	public void setMode(String mode) {
 		this.mode = mode;
 	}
+
+	public void setVersionAdvice(String advice) {
+		if (provider == null)
+			provider = new EclipseInstallGeneratorInfoProvider();
+		provider.setVersionAdvice(advice);
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/generator/TestGeneratorInfo.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/generator/TestGeneratorInfo.java
index 376280f..def32fb 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/generator/TestGeneratorInfo.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/generator/TestGeneratorInfo.java
@@ -178,4 +178,13 @@ public class TestGeneratorInfo implements IGeneratorInfo {
 		return Collections.EMPTY_LIST;
 	}
 
+	public String getVersionAdvice() {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+	public void setVersionAdvice(String advice) {
+		// TODO Auto-generated method stub
+	}
+
 }

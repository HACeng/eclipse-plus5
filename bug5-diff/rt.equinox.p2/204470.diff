commit ca6ae3c36109dcc4c60a66f9d9e201dffc84caa9
Author: Susan Franklin <sfranklin>
Date:   Sat Jan 31 18:18:02 2009 +0000

    Bug 204470 - [prov] [ui] Test cases

9	5	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/AbstractProvisioningUITest.java
4	0	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/AllTests.java
75	0	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/IUPropertyPagesTest.java
56	0	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/InstallationHistoryPageTest.java
59	0	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/InvokeByHandlerTests.java
58	0	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/PreferencePagesTest.java
70	0	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/RepositoryManipulationPageTest.java
1	0	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/operations/AllTests.java
60	0	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/operations/ProvisioningUtilTest.java
39	0	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/AddArtifactRepositoryOperation.java
39	0	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/AddMetadataRepositoryOperation.java
50	0	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RefreshArtifactRepositoriesOperation.java
52	0	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RefreshMetadataRepositoriesOperation.java
39	0	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RemoveArtifactRepositoryOperation.java
39	0	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RemoveMetadataRepositoryOperation.java
2	0	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddArtifactRepositoryDialog.java
2	1	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddMetadataRepositoryDialog.java
0	36	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/AddArtifactRepositoryOperation.java
0	36	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/AddMetadataRepositoryOperation.java
0	47	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RefreshArtifactRepositoriesOperation.java
0	49	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RefreshMetadataRepositoriesOperation.java
0	36	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RemoveArtifactRepositoryOperation.java
0	36	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RemoveMetadataRepositoryOperation.java
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/AbstractProvisioningUITest.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/AbstractProvisioningUITest.java
index a833379..cc81e9c 100644
--- a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/AbstractProvisioningUITest.java
+++ b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/AbstractProvisioningUITest.java
@@ -15,16 +15,18 @@ import java.net.URI;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepositoryManager;
+import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.core.Version;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest;
 import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
-import org.eclipse.equinox.internal.provisional.p2.engine.DefaultPhaseSet;
-import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
+import org.eclipse.equinox.internal.provisional.p2.engine.*;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepositoryManager;
+import org.eclipse.equinox.internal.provisional.p2.ui.ProvisioningOperationRunner;
 import org.eclipse.equinox.internal.provisional.p2.ui.model.ProfileElement;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProfileModificationOperation;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 import org.eclipse.equinox.p2.tests.TestActivator;
@@ -55,6 +57,7 @@ public abstract class AbstractProvisioningUITest extends AbstractProvisioningTes
 
 	protected void setUp() throws Exception {
 		super.setUp();
+		ProvisioningOperationRunner.suppressRestart(true);
 		profile = createProfile(TESTPROFILE);
 		profileElement = new ProfileElement(null, TESTPROFILE);
 		install((top1 = createIU(TOPLEVELIU, new Version("1.0.0"))), true, false);
@@ -87,7 +90,7 @@ public abstract class AbstractProvisioningUITest extends AbstractProvisioningTes
 		return false;
 	}
 
-	protected IStatus install(IInstallableUnit iu, boolean root, boolean lock) {
+	protected IStatus install(IInstallableUnit iu, boolean root, boolean lock) throws ProvisionException {
 		ProfileChangeRequest req = new ProfileChangeRequest(profile);
 		req.addInstallableUnits(new IInstallableUnit[] {iu});
 		if (root) {
@@ -98,10 +101,11 @@ public abstract class AbstractProvisioningUITest extends AbstractProvisioningTes
 		if (lock) {
 			req.setInstallableUnitProfileProperty(iu, IInstallableUnit.PROP_PROFILE_LOCKED_IU, new Integer(IInstallableUnit.LOCK_UNINSTALL | IInstallableUnit.LOCK_UPDATE).toString());
 		}
-		ProvisioningPlan plan = createPlanner().getProvisioningPlan(req, null, null);
+		// Use an empty provisioning context to prevent repo access
+		ProvisioningPlan plan = ProvisioningUtil.getProvisioningPlan(req, new ProvisioningContext(new URI[] {}), getMonitor());
 		if (plan.getStatus().getSeverity() == IStatus.ERROR || plan.getStatus().getSeverity() == IStatus.CANCEL)
 			return plan.getStatus();
-		return createEngine().perform(profile, new DefaultPhaseSet(), plan.getOperands(), null, null);
+		return ProvisioningUtil.performProvisioningPlan(plan, new DefaultPhaseSet(), profile, getMonitor());
 	}
 
 	protected ProfileModificationOperation getLongTestOperation() {
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/AllTests.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/AllTests.java
index db66289..a4a3d4d 100644
--- a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/AllTests.java
+++ b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/AllTests.java
@@ -21,8 +21,12 @@ public class AllTests extends TestCase {
 		TestSuite suite = new TestSuite(AllTests.class.getName());
 		suite.addTestSuite(InstallWizardTest.class);
 		suite.addTestSuite(InstalledSoftwarePageTest.class);
+		suite.addTestSuite(InstallationHistoryPageTest.class);
 		suite.addTestSuite(UpdateWizardTest.class);
 		suite.addTestSuite(UninstallWizardTest.class);
+		suite.addTestSuite(RepositoryManipulationPageTest.class);
+		suite.addTestSuite(IUPropertyPagesTest.class);
+		suite.addTestSuite(PreferencePagesTest.class);
 		return suite;
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/IUPropertyPagesTest.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/IUPropertyPagesTest.java
new file mode 100644
index 0000000..784b9ce
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/IUPropertyPagesTest.java
@@ -0,0 +1,75 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.p2.tests.ui.dialogs;
+
+import java.net.URI;
+import java.net.URISyntaxException;
+import org.eclipse.equinox.internal.provisional.p2.core.Version;
+import org.eclipse.equinox.internal.provisional.p2.metadata.*;
+import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory.InstallableUnitDescription;
+import org.eclipse.equinox.p2.tests.ui.AbstractProvisioningUITest;
+import org.eclipse.ui.PlatformUI;
+import org.eclipse.ui.internal.dialogs.PropertyDialog;
+
+/**
+ * Tests for the install wizard
+ */
+public class IUPropertyPagesTest extends AbstractProvisioningUITest {
+
+	private static final String GENERAL = "org.eclipse.equinox.p2.ui.sdk.IUGeneralInfoPropertyPage";
+	private static final String COPYRIGHT = "org.eclipse.equinox.p2.ui.sdk.IUCopyrightPropertyPage";
+	private static final String LICENSE = "org.eclipse.equinox.p2.ui.sdk.IULicensePropertyPage";
+
+	public void testGeneralPage() throws URISyntaxException {
+		PropertyDialog dialog = PropertyDialog.createDialogOn(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(), GENERAL, getIU());
+		dialog.setBlockOnOpen(false);
+		dialog.open();
+		try {
+			// nothing yet
+		} finally {
+			dialog.close();
+		}
+	}
+
+	public void testCopyrightPage() throws URISyntaxException {
+		PropertyDialog dialog = PropertyDialog.createDialogOn(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(), COPYRIGHT, getIU());
+		dialog.setBlockOnOpen(false);
+		dialog.open();
+		try {
+			// nothing yet
+		} finally {
+			dialog.close();
+		}
+	}
+
+	public void testLicensePage() throws URISyntaxException {
+		PropertyDialog dialog = PropertyDialog.createDialogOn(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(), LICENSE, getIU());
+		dialog.setBlockOnOpen(false);
+		dialog.open();
+		try {
+			// nothing yet
+		} finally {
+			dialog.close();
+		}
+	}
+
+	private IInstallableUnit getIU() throws URISyntaxException {
+		InstallableUnitDescription iuDescription = new InstallableUnitDescription();
+		iuDescription.setId("TestIU");
+		iuDescription.setVersion(new Version(1, 0, 0));
+		iuDescription.setProperty(IInstallableUnit.PROP_PROVIDER, "Test Cases");
+		iuDescription.setProperty(IInstallableUnit.PROP_DESCRIPTION, "A description");
+		iuDescription.setProperty(IInstallableUnit.PROP_NAME, "The Biggest Baddest Test IU");
+		iuDescription.setLicense(new License(new URI("http://example.com"), "This is an example license"));
+		iuDescription.setCopyright(new Copyright(new URI("http://example.com"), "This is an example copyright"));
+		return MetadataFactory.createInstallableUnit(iuDescription);
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/InstallationHistoryPageTest.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/InstallationHistoryPageTest.java
new file mode 100644
index 0000000..d84d371
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/InstallationHistoryPageTest.java
@@ -0,0 +1,56 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.p2.tests.ui.dialogs;
+
+import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
+import org.eclipse.equinox.internal.provisional.p2.ui.dialogs.RevertProfilePage;
+import org.eclipse.equinox.p2.tests.ui.AbstractProvisioningUITest;
+import org.eclipse.jface.dialogs.Dialog;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Control;
+
+/**
+ * Tests for the Installation History page.
+ * If nothing else, this test ensures that installation history can be hosted
+ * somewhere besides the about dialog
+ */
+public class InstallationHistoryPageTest extends AbstractProvisioningUITest {
+
+	class TestDialog extends Dialog {
+		RevertProfilePage page;
+
+		TestDialog() {
+			super(ProvUI.getDefaultParentShell());
+		}
+
+		protected Control createDialogArea(Composite parent) {
+			Composite composite = new Composite(parent, SWT.NONE);
+			page = new RevertProfilePage();
+			page.createControl(composite);
+			return composite;
+		}
+	}
+
+	/**
+	 * Tests the dialog
+	 */
+	public void testDialog() {
+		TestDialog dialog = new TestDialog();
+		dialog.setBlockOnOpen(false);
+		dialog.open();
+		try {
+
+		} finally {
+			dialog.close();
+		}
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/InvokeByHandlerTests.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/InvokeByHandlerTests.java
new file mode 100644
index 0000000..d481271
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/InvokeByHandlerTests.java
@@ -0,0 +1,59 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.p2.tests.ui.dialogs;
+
+import org.eclipse.core.commands.*;
+import org.eclipse.core.commands.common.NotDefinedException;
+import org.eclipse.equinox.p2.tests.ui.AbstractProvisioningUITest;
+import org.eclipse.swt.widgets.Display;
+import org.eclipse.ui.PlatformUI;
+import org.eclipse.ui.commands.ICommandService;
+import org.eclipse.ui.handlers.IHandlerService;
+
+/**
+ * Tests for the install wizard
+ */
+public class InvokeByHandlerTests extends AbstractProvisioningUITest {
+
+	private static final String INSTALL = "org.eclipse.equinox.p2.ui.sdk.install";
+	private static final String UPDATE = "org.eclipse.equinox.p2.ui.sdk.update";
+
+	public void testInstallHandler() throws ExecutionException, NotDefinedException, NotEnabledException, NotHandledException {
+		Display.getDefault().asyncExec(new Runnable() {
+			public void run() {
+				Display.getDefault().getActiveShell().close();
+			}
+
+		});
+		runCommand(INSTALL);
+
+	}
+
+	public void testUpdateHandler() throws ExecutionException, NotDefinedException, NotEnabledException, NotHandledException {
+		Display.getDefault().asyncExec(new Runnable() {
+			public void run() {
+				Display.getDefault().getActiveShell().close();
+			}
+
+		});
+		runCommand(UPDATE);
+	}
+
+	private void runCommand(String commandId) throws ExecutionException, NotDefinedException, NotEnabledException, NotHandledException {
+		ICommandService commandService = (ICommandService) PlatformUI.getWorkbench().getService(ICommandService.class);
+		Command command = commandService.getCommand(commandId);
+		if (!command.isDefined()) {
+			return;
+		}
+		IHandlerService handlerService = (IHandlerService) PlatformUI.getWorkbench().getService(IHandlerService.class);
+		handlerService.executeCommand(commandId, null);
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/PreferencePagesTest.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/PreferencePagesTest.java
new file mode 100644
index 0000000..600fdaa
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/PreferencePagesTest.java
@@ -0,0 +1,58 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.p2.tests.ui.dialogs;
+
+import org.eclipse.equinox.p2.tests.ui.AbstractProvisioningUITest;
+import org.eclipse.jface.preference.PreferenceDialog;
+import org.eclipse.ui.dialogs.PreferencesUtil;
+
+/**
+ * Tests for the install wizard
+ */
+public class PreferencePagesTest extends AbstractProvisioningUITest {
+
+	private static final String GENERAL = "org.eclipse.equinox.internal.p2.ui.sdk.ProvisioningPreferencePage";
+	private static final String SITES = "org.eclipse.equinox.internal.p2.ui.sdk.SitesPreferencePage";
+	private static final String AUTOUPDATES = "org.eclipse.equinox.internal.p2.ui.sdk.scheduler.AutomaticUpdatesPreferencePage";
+
+	public void testGeneralPage() {
+		PreferenceDialog dialog = PreferencesUtil.createPreferenceDialogOn(null, GENERAL, null, null);
+		dialog.setBlockOnOpen(false);
+		dialog.open();
+		try {
+			// nothing yet
+		} finally {
+			dialog.close();
+		}
+	}
+
+	public void testCopyrightPage() {
+		PreferenceDialog dialog = PreferencesUtil.createPreferenceDialogOn(null, SITES, null, null);
+		dialog.setBlockOnOpen(false);
+		dialog.open();
+		try {
+			// nothing yet
+		} finally {
+			dialog.close();
+		}
+	}
+
+	public void testLicensePage() {
+		PreferenceDialog dialog = PreferencesUtil.createPreferenceDialogOn(null, AUTOUPDATES, null, null);
+		dialog.setBlockOnOpen(false);
+		dialog.open();
+		try {
+			// nothing yet
+		} finally {
+			dialog.close();
+		}
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/RepositoryManipulationPageTest.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/RepositoryManipulationPageTest.java
new file mode 100644
index 0000000..8ce545d
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/dialogs/RepositoryManipulationPageTest.java
@@ -0,0 +1,70 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.p2.tests.ui.dialogs;
+
+import org.eclipse.equinox.internal.provisional.p2.ui.dialogs.RepositoryManipulationPage;
+import org.eclipse.equinox.p2.tests.ui.AbstractProvisioningUITest;
+import org.eclipse.jface.dialogs.TitleAreaDialog;
+import org.eclipse.swt.widgets.Composite;
+import org.eclipse.swt.widgets.Control;
+import org.eclipse.ui.PlatformUI;
+
+/**
+ * Tests for the Repository Manipulation page.
+ * If nothing else, this test ensures that repository page can be hosted
+ * somewhere besides preferences
+ */
+public class RepositoryManipulationPageTest extends AbstractProvisioningUITest {
+
+	class TestDialog extends TitleAreaDialog {
+		/**
+		 * @param parentShell
+		 */
+		public TestDialog() {
+			super(null);
+		}
+
+		RepositoryManipulationPage page;
+
+		protected Control createDialogArea(Composite parent) {
+			page = new RepositoryManipulationPage();
+			page.init(PlatformUI.getWorkbench());
+			page.createControl(parent);
+			this.setTitle("Software Sites");
+			this.setMessage("The enabled sites will be searched for software.  Disabled sites are ignored.");
+			return page.getControl();
+		}
+
+		protected void okPressed() {
+			if (page.performOk())
+				super.okPressed();
+		}
+
+		protected void cancelPressed() {
+			if (page.performCancel())
+				super.cancelPressed();
+		}
+	}
+
+	/**
+	 * Tests the dialog
+	 */
+	public void testDialog() {
+		TestDialog dialog = new TestDialog();
+		dialog.setBlockOnOpen(false);
+		dialog.open();
+		try {
+			// reach in
+		} finally {
+			dialog.close();
+		}
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/operations/AllTests.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/operations/AllTests.java
index 0d66ffd..f0e9167 100644
--- a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/operations/AllTests.java
+++ b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/operations/AllTests.java
@@ -23,6 +23,7 @@ public class AllTests extends TestCase {
 		suite.addTestSuite(AddProfileOperationTest.class);
 		suite.addTestSuite(RemoveProfilesOperationTest.class);
 		suite.addTestSuite(SizingTest.class);
+		suite.addTestSuite(ProvisioningUtilTest.class);
 		return suite;
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/operations/ProvisioningUtilTest.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/operations/ProvisioningUtilTest.java
new file mode 100644
index 0000000..d4be564
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/operations/ProvisioningUtilTest.java
@@ -0,0 +1,60 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.p2.tests.ui.operations;
+
+import java.net.URI;
+import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
+import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepositoryManager;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
+import org.eclipse.equinox.p2.tests.ui.AbstractProvisioningUITest;
+
+/**
+ * 
+ */
+public class ProvisioningUtilTest extends AbstractProvisioningUITest {
+	public void testArtifactRepos() throws ProvisionException {
+		URI[] artifactRepos = ProvisioningUtil.getArtifactRepositories(IRepositoryManager.REPOSITORIES_ALL);
+		for (int i = 0; i < artifactRepos.length; i++)
+			assertTrue(artifactRepos[i].toString() + " should be enabled", ProvisioningUtil.getArtifactRepositoryEnablement(artifactRepos[i]));
+
+		artifactRepos = ProvisioningUtil.getArtifactRepositories(IRepositoryManager.REPOSITORIES_DISABLED);
+		for (int i = 0; i < artifactRepos.length; i++)
+			assertFalse(artifactRepos[i].toString() + " should be disabled", ProvisioningUtil.getArtifactRepositoryEnablement(artifactRepos[i]));
+
+		artifactRepos = ProvisioningUtil.getArtifactRepositories(IRepositoryManager.REPOSITORIES_NON_SYSTEM);
+		for (int i = 0; i < artifactRepos.length; i++)
+			assertEquals("Expected non system repo " + artifactRepos[i].toString(), ProvisioningUtil.getArtifactRepositoryProperty(artifactRepos[i], IRepository.PROP_SYSTEM), Boolean.toString(false));
+
+		artifactRepos = ProvisioningUtil.getArtifactRepositories(IRepositoryManager.REPOSITORIES_LOCAL);
+		// TODO need to understand why this is failing
+		// ProvisioningUtil.refreshArtifactRepositories(artifactRepos, getMonitor());
+
+	}
+
+	public void testMetadataRepos() throws ProvisionException {
+		URI[] metadataRepos = ProvisioningUtil.getMetadataRepositories(IRepositoryManager.REPOSITORIES_ALL);
+		for (int i = 0; i < metadataRepos.length; i++)
+			assertTrue(metadataRepos[i].toString() + " should be enabled", ProvisioningUtil.getMetadataRepositoryEnablement(metadataRepos[i]));
+
+		metadataRepos = ProvisioningUtil.getMetadataRepositories(IRepositoryManager.REPOSITORIES_DISABLED);
+		for (int i = 0; i < metadataRepos.length; i++)
+			assertFalse(metadataRepos[i].toString() + " should be disabled", ProvisioningUtil.getMetadataRepositoryEnablement(metadataRepos[i]));
+
+		metadataRepos = ProvisioningUtil.getMetadataRepositories(IRepositoryManager.REPOSITORIES_NON_SYSTEM);
+		for (int i = 0; i < metadataRepos.length; i++)
+			assertEquals("Expected non system repo " + metadataRepos[i].toString(), ProvisioningUtil.getMetadataRepositoryProperty(metadataRepos[i], IRepository.PROP_SYSTEM), Boolean.toString(false));
+
+		metadataRepos = ProvisioningUtil.getMetadataRepositories(IRepositoryManager.REPOSITORIES_LOCAL);
+		ProvisioningUtil.refreshMetadataRepositories(metadataRepos, getMonitor());
+
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/AddArtifactRepositoryOperation.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/AddArtifactRepositoryOperation.java
new file mode 100644
index 0000000..cc0b4a4
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/AddArtifactRepositoryOperation.java
@@ -0,0 +1,39 @@
+/*******************************************************************************
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.ui.admin;
+
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.RepositoryOperation;
+
+import java.net.URI;
+import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+
+/**
+ * Operation which adds an artifact repository given its URL.
+ * 
+ * @since 3.4
+ */
+public class AddArtifactRepositoryOperation extends RepositoryOperation {
+
+	public AddArtifactRepositoryOperation(String label, URI location) {
+		super(label, new URI[] {location});
+	}
+
+	protected IStatus doBatchedExecute(IProgressMonitor monitor) throws ProvisionException {
+		SubMonitor mon = SubMonitor.convert(monitor, locations.length);
+		for (int i = 0; i < locations.length; i++) {
+			ProvisioningUtil.addArtifactRepository(locations[i], notify);
+			mon.worked(1);
+		}
+		return okStatus();
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/AddMetadataRepositoryOperation.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/AddMetadataRepositoryOperation.java
new file mode 100644
index 0000000..5e1f340
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/AddMetadataRepositoryOperation.java
@@ -0,0 +1,39 @@
+/*******************************************************************************
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.ui.admin;
+
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.RepositoryOperation;
+
+import java.net.URI;
+import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+
+/**
+ * Operation that adds a metadata repository given its URL.
+ * 
+ * @since 3.4
+ */
+public class AddMetadataRepositoryOperation extends RepositoryOperation {
+
+	public AddMetadataRepositoryOperation(String label, URI location) {
+		super(label, new URI[] {location});
+	}
+
+	protected IStatus doBatchedExecute(IProgressMonitor monitor) throws ProvisionException {
+		SubMonitor mon = SubMonitor.convert(monitor, locations.length);
+		for (int i = 0; i < locations.length; i++) {
+			ProvisioningUtil.addMetadataRepository(locations[i], notify);
+			mon.worked(1);
+		}
+		return okStatus();
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RefreshArtifactRepositoriesOperation.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RefreshArtifactRepositoriesOperation.java
new file mode 100644
index 0000000..cb0f86a
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RefreshArtifactRepositoriesOperation.java
@@ -0,0 +1,50 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ ******************************************************************************/
+
+package org.eclipse.equinox.internal.p2.ui.admin;
+
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.RepositoryOperation;
+
+import java.net.URI;
+import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
+import org.eclipse.ui.statushandlers.StatusManager;
+
+/**
+ * @since 3.4
+ *
+ */
+public class RefreshArtifactRepositoriesOperation extends RepositoryOperation {
+
+	/**
+	 * @param label
+	 * @param locations
+	 */
+	public RefreshArtifactRepositoriesOperation(String label, URI[] locations) {
+		super(label, locations);
+	}
+
+	public RefreshArtifactRepositoriesOperation(String label, int flags) {
+		super(label, new URI[0]);
+		try {
+			this.locations = ProvisioningUtil.getArtifactRepositories(flags);
+		} catch (ProvisionException e) {
+			ProvUI.handleException(e, null, StatusManager.LOG);
+		}
+	}
+
+	protected IStatus doBatchedExecute(IProgressMonitor monitor) throws ProvisionException {
+		ProvisioningUtil.refreshArtifactRepositories(locations, monitor);
+		return Status.OK_STATUS;
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RefreshMetadataRepositoriesOperation.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RefreshMetadataRepositoriesOperation.java
new file mode 100644
index 0000000..d338d2c
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RefreshMetadataRepositoriesOperation.java
@@ -0,0 +1,52 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ ******************************************************************************/
+
+package org.eclipse.equinox.internal.p2.ui.admin;
+
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.RepositoryOperation;
+
+import java.net.URI;
+import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
+import org.eclipse.ui.statushandlers.StatusManager;
+
+/**
+ * @since 3.4
+ *
+ */
+public class RefreshMetadataRepositoriesOperation extends RepositoryOperation {
+
+	/**
+	 * @param label
+	 * @param locations
+	 */
+	public RefreshMetadataRepositoriesOperation(String label, URI[] locations) {
+		super(label, locations);
+	}
+
+	public RefreshMetadataRepositoriesOperation(String label, int flags) {
+		super(label, new URI[0]);
+		try {
+			this.locations = ProvisioningUtil.getMetadataRepositories(flags);
+		} catch (ProvisionException e) {
+			ProvUI.handleException(e, null, StatusManager.LOG);
+		}
+	}
+
+	protected IStatus doBatchedExecute(IProgressMonitor monitor) throws ProvisionException {
+		// Clear the not found cache so that repos not found are reported again.
+		ProvUI.clearRepositoriesNotFound();
+		ProvisioningUtil.refreshMetadataRepositories(locations, monitor);
+		return Status.OK_STATUS;
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RemoveArtifactRepositoryOperation.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RemoveArtifactRepositoryOperation.java
new file mode 100644
index 0000000..991876b
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RemoveArtifactRepositoryOperation.java
@@ -0,0 +1,39 @@
+/*******************************************************************************
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.ui.admin;
+
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.RepositoryOperation;
+
+import java.net.URI;
+import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+
+/**
+ * Operation which removes the artifact repository with the given URL.
+ * 
+ * @since 3.4
+ */
+public class RemoveArtifactRepositoryOperation extends RepositoryOperation {
+
+	public RemoveArtifactRepositoryOperation(String label, URI[] repoLocations) {
+		super(label, repoLocations);
+	}
+
+	protected IStatus doBatchedExecute(IProgressMonitor monitor) throws ProvisionException {
+		SubMonitor mon = SubMonitor.convert(monitor, locations.length);
+		for (int i = 0; i < locations.length; i++) {
+			ProvisioningUtil.removeArtifactRepository(locations[i]);
+			mon.worked(1);
+		}
+		return okStatus();
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RemoveMetadataRepositoryOperation.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RemoveMetadataRepositoryOperation.java
new file mode 100644
index 0000000..2bf5322
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RemoveMetadataRepositoryOperation.java
@@ -0,0 +1,39 @@
+/*******************************************************************************
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.ui.admin;
+
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.RepositoryOperation;
+
+import java.net.URI;
+import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+
+/**
+ * Operation that removes the metadata repository with the given URL. *
+ * 
+ * @since 3.4
+ */
+public class RemoveMetadataRepositoryOperation extends RepositoryOperation {
+
+	public RemoveMetadataRepositoryOperation(String label, URI[] repoLocations) {
+		super(label, repoLocations);
+	}
+
+	protected IStatus doBatchedExecute(IProgressMonitor monitor) throws ProvisionException {
+		SubMonitor mon = SubMonitor.convert(monitor, locations.length);
+		for (int i = 0; i < locations.length; i++) {
+			ProvisioningUtil.removeMetadataRepository(locations[i]);
+			mon.worked(1);
+		}
+		return okStatus();
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddArtifactRepositoryDialog.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddArtifactRepositoryDialog.java
index 58637e7..7d19e13 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddArtifactRepositoryDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddArtifactRepositoryDialog.java
@@ -10,6 +10,8 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.admin.dialogs;
 
+import org.eclipse.equinox.internal.p2.ui.admin.AddArtifactRepositoryOperation;
+
 import java.net.URI;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.ui.admin.ProvAdminUIActivator;
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddMetadataRepositoryDialog.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddMetadataRepositoryDialog.java
index 7dc22d6..ad3352b 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddMetadataRepositoryDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddMetadataRepositoryDialog.java
@@ -10,10 +10,11 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.admin.dialogs;
 
+import org.eclipse.equinox.internal.p2.ui.admin.AddMetadataRepositoryOperation;
+
 import java.net.URI;
 import org.eclipse.equinox.internal.p2.ui.admin.ProvAdminUIMessages;
 import org.eclipse.equinox.internal.provisional.p2.ui.dialogs.AddRepositoryDialog;
-import org.eclipse.equinox.internal.provisional.p2.ui.operations.AddMetadataRepositoryOperation;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningOperation;
 import org.eclipse.swt.widgets.Shell;
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/AddArtifactRepositoryOperation.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/AddArtifactRepositoryOperation.java
deleted file mode 100644
index 819f39e..0000000
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/AddArtifactRepositoryOperation.java
+++ /dev/null
@@ -1,36 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.provisional.p2.ui.operations;
-
-import java.net.URI;
-import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
-
-/**
- * Operation which adds an artifact repository given its URL.
- * 
- * @since 3.4
- */
-public class AddArtifactRepositoryOperation extends RepositoryOperation {
-
-	public AddArtifactRepositoryOperation(String label, URI location) {
-		super(label, new URI[] {location});
-	}
-
-	protected IStatus doBatchedExecute(IProgressMonitor monitor) throws ProvisionException {
-		SubMonitor mon = SubMonitor.convert(monitor, locations.length);
-		for (int i = 0; i < locations.length; i++) {
-			ProvisioningUtil.addArtifactRepository(locations[i], notify);
-			mon.worked(1);
-		}
-		return okStatus();
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/AddMetadataRepositoryOperation.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/AddMetadataRepositoryOperation.java
deleted file mode 100644
index 8eb1808..0000000
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/AddMetadataRepositoryOperation.java
+++ /dev/null
@@ -1,36 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.provisional.p2.ui.operations;
-
-import java.net.URI;
-import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
-
-/**
- * Operation that adds a metadata repository given its URL.
- * 
- * @since 3.4
- */
-public class AddMetadataRepositoryOperation extends RepositoryOperation {
-
-	public AddMetadataRepositoryOperation(String label, URI location) {
-		super(label, new URI[] {location});
-	}
-
-	protected IStatus doBatchedExecute(IProgressMonitor monitor) throws ProvisionException {
-		SubMonitor mon = SubMonitor.convert(monitor, locations.length);
-		for (int i = 0; i < locations.length; i++) {
-			ProvisioningUtil.addMetadataRepository(locations[i], notify);
-			mon.worked(1);
-		}
-		return okStatus();
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RefreshArtifactRepositoriesOperation.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RefreshArtifactRepositoriesOperation.java
deleted file mode 100644
index 6b3f006..0000000
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RefreshArtifactRepositoriesOperation.java
+++ /dev/null
@@ -1,47 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- ******************************************************************************/
-
-package org.eclipse.equinox.internal.provisional.p2.ui.operations;
-
-import java.net.URI;
-import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
-import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
-import org.eclipse.ui.statushandlers.StatusManager;
-
-/**
- * @since 3.4
- *
- */
-public class RefreshArtifactRepositoriesOperation extends RepositoryOperation {
-
-	/**
-	 * @param label
-	 * @param locations
-	 */
-	public RefreshArtifactRepositoriesOperation(String label, URI[] locations) {
-		super(label, locations);
-	}
-
-	public RefreshArtifactRepositoriesOperation(String label, int flags) {
-		super(label, new URI[0]);
-		try {
-			this.locations = ProvisioningUtil.getArtifactRepositories(flags);
-		} catch (ProvisionException e) {
-			ProvUI.handleException(e, null, StatusManager.LOG);
-		}
-	}
-
-	protected IStatus doBatchedExecute(IProgressMonitor monitor) throws ProvisionException {
-		ProvisioningUtil.refreshArtifactRepositories(locations, monitor);
-		return Status.OK_STATUS;
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RefreshMetadataRepositoriesOperation.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RefreshMetadataRepositoriesOperation.java
deleted file mode 100644
index 2cb3b8a..0000000
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RefreshMetadataRepositoriesOperation.java
+++ /dev/null
@@ -1,49 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- ******************************************************************************/
-
-package org.eclipse.equinox.internal.provisional.p2.ui.operations;
-
-import java.net.URI;
-import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
-import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
-import org.eclipse.ui.statushandlers.StatusManager;
-
-/**
- * @since 3.4
- *
- */
-public class RefreshMetadataRepositoriesOperation extends RepositoryOperation {
-
-	/**
-	 * @param label
-	 * @param locations
-	 */
-	public RefreshMetadataRepositoriesOperation(String label, URI[] locations) {
-		super(label, locations);
-	}
-
-	public RefreshMetadataRepositoriesOperation(String label, int flags) {
-		super(label, new URI[0]);
-		try {
-			this.locations = ProvisioningUtil.getMetadataRepositories(flags);
-		} catch (ProvisionException e) {
-			ProvUI.handleException(e, null, StatusManager.LOG);
-		}
-	}
-
-	protected IStatus doBatchedExecute(IProgressMonitor monitor) throws ProvisionException {
-		// Clear the not found cache so that repos not found are reported again.
-		ProvUI.clearRepositoriesNotFound();
-		ProvisioningUtil.refreshMetadataRepositories(locations, monitor);
-		return Status.OK_STATUS;
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RemoveArtifactRepositoryOperation.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RemoveArtifactRepositoryOperation.java
deleted file mode 100644
index f239de8..0000000
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RemoveArtifactRepositoryOperation.java
+++ /dev/null
@@ -1,36 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.provisional.p2.ui.operations;
-
-import java.net.URI;
-import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
-
-/**
- * Operation which removes the artifact repository with the given URL.
- * 
- * @since 3.4
- */
-public class RemoveArtifactRepositoryOperation extends RepositoryOperation {
-
-	public RemoveArtifactRepositoryOperation(String label, URI[] repoLocations) {
-		super(label, repoLocations);
-	}
-
-	protected IStatus doBatchedExecute(IProgressMonitor monitor) throws ProvisionException {
-		SubMonitor mon = SubMonitor.convert(monitor, locations.length);
-		for (int i = 0; i < locations.length; i++) {
-			ProvisioningUtil.removeArtifactRepository(locations[i]);
-			mon.worked(1);
-		}
-		return okStatus();
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RemoveMetadataRepositoryOperation.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RemoveMetadataRepositoryOperation.java
deleted file mode 100644
index 1948264..0000000
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/RemoveMetadataRepositoryOperation.java
+++ /dev/null
@@ -1,36 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.provisional.p2.ui.operations;
-
-import java.net.URI;
-import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
-
-/**
- * Operation that removes the metadata repository with the given URL. *
- * 
- * @since 3.4
- */
-public class RemoveMetadataRepositoryOperation extends RepositoryOperation {
-
-	public RemoveMetadataRepositoryOperation(String label, URI[] repoLocations) {
-		super(label, repoLocations);
-	}
-
-	protected IStatus doBatchedExecute(IProgressMonitor monitor) throws ProvisionException {
-		SubMonitor mon = SubMonitor.convert(monitor, locations.length);
-		for (int i = 0; i < locations.length; i++) {
-			ProvisioningUtil.removeMetadataRepository(locations[i]);
-			mon.worked(1);
-		}
-		return okStatus();
-	}
-}

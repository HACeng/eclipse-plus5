commit 35eb351061e3084424b080948982916f5a755f6e
Author: John Arthorne <johna>
Date:   Mon Feb 11 15:25:05 2008 +0000

    Bug 215930 [prov] Support for mirror

8	5	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/features/DefaultSiteParser.java
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/features/DefaultSiteParser.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/features/DefaultSiteParser.java
index 8ba68ae..8bda05c 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/features/DefaultSiteParser.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/features/DefaultSiteParser.java
@@ -738,11 +738,14 @@ public class DefaultSiteParser extends DefaultHandler {
 		// get mirrors, if any
 		String mirrorsURL = attributes.getValue("mirrorsURL"); //$NON-NLS-1$
 		if (mirrorsURL != null && mirrorsURL.trim().length() > 0) {
-			URLEntry[] mirrors = getMirrors(mirrorsURL);
-			if (mirrors != null)
-				site.setMirrors(mirrors);
-			else
-				site.setMirrorsURLString(mirrorsURL);
+			//			URLEntry[] mirrors = getMirrors(mirrorsURL);
+			//			if (mirrors != null)
+			//				site.setMirrors(mirrors);
+			//			else
+
+			//Since we are parsing the site at p2 generation time and the 
+			//mirrors may change, there is no point doing the mirror expansion now
+			site.setMirrorsURLString(mirrorsURL);
 		}
 
 		String pack200 = attributes.getValue("pack200"); //$NON-NLS-1$
commit f10b0259a0f13565e33f735e5ef72668b0f1a23e
Author: John Arthorne <johna>
Date:   Mon Feb 11 22:09:57 2008 +0000

    Bug 215930 [prov] Support for mirror

141	0	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/Mirrors.java
6	0	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/repository/IRepository.java
9	0	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/features/SiteModel.java
13	0	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/Mirrors.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/Mirrors.java
new file mode 100644
index 0000000..0dfac5b
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/Mirrors.java
@@ -0,0 +1,141 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.artifact.repository.simple;
+
+import java.net.*;
+import java.util.*;
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Status;
+import org.eclipse.equinox.internal.p2.artifact.repository.Activator;
+import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
+import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepository;
+import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
+import org.w3c.dom.*;
+
+/**
+ * Mirror support class for {@link SimpleArtifactRepository}. This class implements
+ * mirror support equivalent to update manager. A mirror URL returns an XML document
+ * containing a list of mirrors, sorted geographically with closer mirrors first.
+ */
+public class Mirrors {
+	URI baseURI;
+	URL[] locations;
+	private final IArtifactRepository repository;
+
+	/**
+	 * Parses the given mirror URL to obtain the list of mirrors. Returns the mirrors,
+	 * or null if mirrors could not be computed.
+	 * 
+	 * Originally copied from DefaultSiteParser.getMirrors in org.eclipse.update.core
+	 */
+	static URL[] computeMirrors(String mirrorsURL) {
+		try {
+			String countryCode = Locale.getDefault().getCountry().toLowerCase();
+			int timeZone = (new GregorianCalendar()).get(Calendar.ZONE_OFFSET) / (60 * 60 * 1000);
+
+			if (mirrorsURL.indexOf('?') != -1) {
+				mirrorsURL = mirrorsURL + '&';
+			} else {
+				mirrorsURL = mirrorsURL + '?';
+			}
+			mirrorsURL = mirrorsURL + "countryCode=" + countryCode + "&timeZone=" + timeZone + "&responseType=xml"; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
+
+			DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();
+			DocumentBuilder builder = domFactory.newDocumentBuilder();
+			Document document = builder.parse(mirrorsURL);
+			if (document == null)
+				return null;
+			NodeList mirrorNodes = document.getElementsByTagName("mirror"); //$NON-NLS-1$
+			URL[] mirrors = new URL[mirrorNodes.getLength()];
+			for (int i = 0; i < mirrorNodes.getLength(); i++) {
+				Element mirrorNode = (Element) mirrorNodes.item(i);
+				String infoURL = mirrorNode.getAttribute("url"); //$NON-NLS-1$
+				mirrors[i] = new URL(infoURL);
+			}
+			return mirrors;
+		} catch (Exception e) {
+			// log if absolute url
+			if (mirrorsURL != null && (mirrorsURL.startsWith("http://") //$NON-NLS-1$
+					|| mirrorsURL.startsWith("https://") //$NON-NLS-1$
+					|| mirrorsURL.startsWith("file://") //$NON-NLS-1$
+					|| mirrorsURL.startsWith("ftp://") //$NON-NLS-1$
+			|| mirrorsURL.startsWith("jar://"))) //$NON-NLS-1$
+				log("Error processing mirrors URL: " + mirrorsURL, e); //$NON-NLS-1$
+			return null;
+		}
+	}
+
+	private static void log(String message, Throwable exception) {
+		LogHelper.log(new Status(IStatus.ERROR, Activator.ID, message, exception));
+	}
+
+	public Mirrors(IArtifactRepository repository) {
+		this.repository = repository;
+		try {
+			this.baseURI = repository.getLocation().toURI();
+		} catch (URISyntaxException e) {
+			log("Error initializing mirrors for: " + repository.getLocation(), e); //$NON-NLS-1$
+		}
+	}
+
+	/**
+	 * Returns an equivalent location for the given artifact location in the base 
+	 * repository.  Always falls back to the given input location in case of failure
+	 * to compute mirrors.
+	 */
+	public String getMirrorLocation(String inputLocation) {
+		URI relativeLocation = null;
+		try {
+			relativeLocation = baseURI.relativize(new URI(inputLocation));
+		} catch (URISyntaxException e) {
+			log("Unable to make location relative: " + inputLocation, e); //$NON-NLS-1$
+		}
+		//if we failed to relativize the location, we can't select a mirror
+		if (relativeLocation == null || relativeLocation.isAbsolute())
+			return inputLocation;
+		URL[] mirrorLocations = getMirrorLocations();
+		if (mirrorLocations == null)
+			return inputLocation;
+		URL selectedMirror = selectMirror(mirrorLocations);
+		if (selectedMirror == null)
+			return inputLocation;
+		try {
+			return new URL(selectedMirror, relativeLocation.getPath()).toExternalForm();
+		} catch (MalformedURLException e) {
+			log("Unable to make location " + inputLocation + " relative to mirror " + selectedMirror.toExternalForm(), e); //$NON-NLS-1$ //$NON-NLS-2$
+		}
+		return inputLocation;
+	}
+
+	/**
+	 * Returns the mirror locations for this repository, or <code>null</code> if
+	 * they could not be computed.
+	 */
+	private URL[] getMirrorLocations() {
+		if (locations != null)
+			return locations;
+		String mirrorsURL = (String) repository.getProperties().get(IRepository.PROP_MIRRORS_URL);
+		if (mirrorsURL != null && baseURI != null)
+			locations = computeMirrors(mirrorsURL);
+		return locations;
+	}
+
+	/**
+	 * Selects a mirror from the given list of mirrors
+	 */
+	private URL selectMirror(URL[] mirrorLocations) {
+		//TODO mirror weighting and dynamic selection
+		return mirrorLocations[0];
+	}
+
+}
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/repository/IRepository.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/repository/IRepository.java
index 877acc3..39e1a11 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/repository/IRepository.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/repository/IRepository.java
@@ -47,6 +47,12 @@ public interface IRepository extends IAdaptable {
 	public static final String PROP_DESCRIPTION = "description"; //$NON-NLS-1$
 
 	/**
+	 * The key for a string property providing a URL that can return mirrors of this
+	 * repository.
+	 */
+	public static final String PROP_MIRRORS_URL = "p2.mirrorsURL"; //$NON-NLS-1$
+
+	/**
 	 * Returns the URL of the repository.
 	 * TODO: Should we use URL or URI? URL requires a protocol handler
 	 * to be installed in Java.  Can the URL have any protocol?
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/features/SiteModel.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/features/SiteModel.java
index 83bd309..6209724 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/features/SiteModel.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/features/SiteModel.java
@@ -196,6 +196,15 @@ public class SiteModel {
 		return (URLEntry[]) mirrors.toArray(new URLEntry[0]);
 	}
 
+	/**
+	 * Returns the URL from which the list of mirrors of this site can be retrieved.
+	 * 
+	 * @since org.eclipse.equinox.p2.metadata.generator 1.0
+	 */
+	public String getMirrorsURL() {
+		return mirrorsURLString;
+	}
+
 	/** 
 	 * Returns the site type.
 	 * 
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
index fb461cd..ac31984 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
@@ -20,6 +20,7 @@ import org.eclipse.equinox.internal.p2.metadata.generator.features.*;
 import org.eclipse.equinox.internal.provisional.frameworkadmin.*;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactDescriptor;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepository;
+import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
 import org.eclipse.equinox.internal.provisional.p2.metadata.*;
 import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory.InstallableUnitDescription;
 import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory.InstallableUnitFragmentDescription;
@@ -644,6 +645,18 @@ public class Generator {
 		}
 		if (site == null)
 			return mappings;
+
+		//copy mirror information from update site to p2 repositories
+		String mirrors = site.getMirrorsURL();
+		if (mirrors != null) {
+			//remove site.xml file reference
+			int index = mirrors.indexOf("site.xml"); //$NON-NLS-1$
+			if (index != -1)
+				mirrors = mirrors.substring(0, index) + mirrors.substring(index + 9);
+			info.getMetadataRepository().setProperty(IRepository.PROP_MIRRORS_URL, mirrors);
+			info.getArtifactRepository().setProperty(IRepository.PROP_MIRRORS_URL, mirrors);
+		}
+
 		SiteFeature[] features = site.getFeatures();
 		for (int i = 0; i < features.length; i++) {
 			//add a mapping for each category this feature belongs to

commit 48a2c7e826d8d8a204c2d7657feccb5a224d1bc6
Author: Pascal Rapicault <prapicau>
Date:   Sat Apr 10 00:48:32 2010 +0000

    Bug 303990 - MetaRequirement seems broken...

4	1	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/ProvisioningAgent.java
3	0	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/p2/core/IProvisioningAgent.java
23	21	bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/DirectorApplication.java
1	0	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/Messages.java
42	14	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
1	0	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/messages.properties
1	3	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/provisional/p2/director/PlanExecutionHelper.java
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/ProvisioningAgent.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/ProvisioningAgent.java
index f340760..938e11f 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/ProvisioningAgent.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/ProvisioningAgent.java
@@ -36,6 +36,8 @@ public class ProvisioningAgent implements IProvisioningAgent, ServiceTrackerCust
 	 */
 	public ProvisioningAgent() {
 		super();
+		registerService(IProvisioningAgent.INSTALLER_AGENT, this);
+		registerService(IProvisioningAgent.INSTALLER_PROFILEID, "_SELF_"); //$NON-NLS-1$
 	}
 
 	/* (non-Javadoc)
@@ -122,7 +124,8 @@ public class ProvisioningAgent implements IProvisioningAgent, ServiceTrackerCust
 		//give services a chance to do their own shutdown
 		for (Object service : agentServices.values()) {
 			if (service instanceof IAgentService)
-				((IAgentService) service).stop();
+				if (service != this)
+					((IAgentService) service).stop();
 		}
 		synchronized (this) {
 			stopped = true;
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/p2/core/IProvisioningAgent.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/p2/core/IProvisioningAgent.java
index 0086e0d..b6c20e1 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/p2/core/IProvisioningAgent.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/p2/core/IProvisioningAgent.java
@@ -36,6 +36,9 @@ public interface IProvisioningAgent {
 	 */
 	public static final String SERVICE_NAME = IProvisioningAgent.class.getName();
 
+	public static final String INSTALLER_AGENT = "org.eclipse.equinox.p2.installer.agent"; //$NON-NLS-1$
+	public static final String INSTALLER_PROFILEID = "org.eclipse.equinox.p2.installer.profile.id"; //$NON-NLS-1$
+
 	/**
 	 * Service property identifying whether an agent is the default agent.
 	 * 
diff --git a/bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/DirectorApplication.java b/bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/DirectorApplication.java
index 931b629..8f400a5 100644
--- a/bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/DirectorApplication.java
+++ b/bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/DirectorApplication.java
@@ -228,7 +228,7 @@ public class DirectorApplication implements IApplication {
 	private IPlanner planner;
 	private ILog log = null;
 
-	private IProvisioningAgent agent;
+	private IProvisioningAgent targetAgent;
 	private boolean noArtifactRepositorySpecified = false;
 
 	private ProfileChangeRequest buildProvisioningRequest(IProfile profile, Collection<IInstallableUnit> installs, Collection<IInstallableUnit> uninstalls) {
@@ -320,7 +320,7 @@ public class DirectorApplication implements IApplication {
 	}
 
 	private IProfile getProfile() {
-		IProfileRegistry profileRegistry = (IProfileRegistry) agent.getService(IProfileRegistry.SERVICE_NAME);
+		IProfileRegistry profileRegistry = (IProfileRegistry) targetAgent.getService(IProfileRegistry.SERVICE_NAME);
 		if (profileId == null) {
 			profileId = IProfileRegistry.SELF;
 			noProfileId = true;
@@ -350,7 +350,7 @@ public class DirectorApplication implements IApplication {
 				props.put(IProfile.PROP_ENVIRONMENTS, env);
 			if (profileProperties != null)
 				putProperties(profileProperties, props);
-			profile = ((IProfileRegistry) agent.getService(IProfileRegistry.SERVICE_NAME)).addProfile(profileId, props);
+			profile = ((IProfileRegistry) targetAgent.getService(IProfileRegistry.SERVICE_NAME)).addProfile(profileId, props);
 		}
 		return profile;
 	}
@@ -362,7 +362,7 @@ public class DirectorApplication implements IApplication {
 		if (artifactRepositoryLocations == null)
 			missingArgument("-artifactRepository"); //$NON-NLS-1$
 
-		artifactManager = (IArtifactRepositoryManager) agent.getService(IArtifactRepositoryManager.SERVICE_NAME);
+		artifactManager = (IArtifactRepositoryManager) targetAgent.getService(IArtifactRepositoryManager.SERVICE_NAME);
 		if (artifactManager == null)
 			throw new ProvisionException(Messages.Application_NoManager);
 
@@ -388,7 +388,7 @@ public class DirectorApplication implements IApplication {
 		if (metadataRepositoryLocations == null)
 			missingArgument("metadataRepository"); //$NON-NLS-1$
 
-		metadataManager = (IMetadataRepositoryManager) agent.getService(IMetadataRepositoryManager.SERVICE_NAME);
+		metadataManager = (IMetadataRepositoryManager) targetAgent.getService(IMetadataRepositoryManager.SERVICE_NAME);
 		if (metadataManager == null)
 			throw new ProvisionException(Messages.Application_NoManager);
 
@@ -427,7 +427,9 @@ public class DirectorApplication implements IApplication {
 		} else {
 			p2DataArea = null;
 		}
-		agent = provider.createAgent(p2DataArea);
+		targetAgent = provider.createAgent(p2DataArea);
+		targetAgent.registerService(IProvisioningAgent.INSTALLER_AGENT, provider.createAgent(null));
+
 		context.ungetService(agentProviderRef);
 		if (profileId == null) {
 			if (destination != null) {
@@ -453,23 +455,23 @@ public class DirectorApplication implements IApplication {
 			}
 		}
 		if (profileId != null)
-			agent.registerService(PROP_P2_PROFILE, profileId);
+			targetAgent.registerService(PROP_P2_PROFILE, profileId);
 		else
-			agent.unregisterService(PROP_P2_PROFILE, null);
+			targetAgent.unregisterService(PROP_P2_PROFILE, null);
 
-		IDirector director = (IDirector) agent.getService(IDirector.SERVICE_NAME);
+		IDirector director = (IDirector) targetAgent.getService(IDirector.SERVICE_NAME);
 		if (director == null)
 			throw new ProvisionException(Messages.Missing_director);
 
-		planner = (IPlanner) agent.getService(IPlanner.SERVICE_NAME);
+		planner = (IPlanner) targetAgent.getService(IPlanner.SERVICE_NAME);
 		if (planner == null)
 			throw new ProvisionException(Messages.Missing_planner);
 
-		engine = (IEngine) agent.getService(IEngine.SERVICE_NAME);
+		engine = (IEngine) targetAgent.getService(IEngine.SERVICE_NAME);
 		if (engine == null)
 			throw new ProvisionException(Messages.Missing_Engine);
 
-		agent.registerService(UIServices.SERVICE_NAME, new AvoidTrustPromptService());
+		targetAgent.registerService(UIServices.SERVICE_NAME, new AvoidTrustPromptService());
 	}
 
 	private void logStatus(IStatus status) {
@@ -540,7 +542,7 @@ public class DirectorApplication implements IApplication {
 		boolean wasRoaming = Boolean.valueOf(profile.getProperty(IProfile.PROP_ROAMING)).booleanValue();
 		try {
 			updateRoamingProperties(profile);
-			ProvisioningContext context = new ProvisioningContext(agent);
+			ProvisioningContext context = new ProvisioningContext(targetAgent);
 			context.setMetadataRepositories(metadataRepositoryLocations.toArray(new URI[metadataRepositoryLocations.size()]));
 			context.setArtifactRepositories(artifactRepositoryLocations.toArray(new URI[artifactRepositoryLocations.size()]));
 			ProfileChangeRequest request = buildProvisioningRequest(profile, installs, uninstalls);
@@ -763,9 +765,9 @@ public class DirectorApplication implements IApplication {
 	private void cleanupServices() {
 		BundleContext context = Activator.getContext();
 		//dispose agent
-		if (agent != null) {
-			agent.stop();
-			agent = null;
+		if (targetAgent != null) {
+			targetAgent.stop();
+			targetAgent = null;
 		}
 		if (packageAdminRef != null)
 			context.ungetService(packageAdminRef);
@@ -810,7 +812,7 @@ public class DirectorApplication implements IApplication {
 	private void purgeRegistry() throws ProvisionException {
 		if (getProfile() == null)
 			return;
-		IProfileRegistry registry = (IProfileRegistry) agent.getService(IProfileRegistry.SERVICE_NAME);
+		IProfileRegistry registry = (IProfileRegistry) targetAgent.getService(IProfileRegistry.SERVICE_NAME);
 		long[] allProfiles = registry.listProfileTimestamps(profileId);
 		for (int i = 0; i < allProfiles.length - 1; i++) {
 			registry.removeProfile(profileId, allProfiles[i]);
@@ -819,7 +821,7 @@ public class DirectorApplication implements IApplication {
 
 	private void revertToPreviousState() throws CoreException {
 		IProfile profile = initializeProfile();
-		IProfileRegistry profileRegistry = (IProfileRegistry) agent.getService(IProfileRegistry.SERVICE_NAME);
+		IProfileRegistry profileRegistry = (IProfileRegistry) targetAgent.getService(IProfileRegistry.SERVICE_NAME);
 		IProfile targetProfile = null;
 		if (revertToPreviousState == 0) {
 			long[] profiles = profileRegistry.listProfileTimestamps(profile.getProfileId());
@@ -833,7 +835,7 @@ public class DirectorApplication implements IApplication {
 			throw new CoreException(new Status(IStatus.ERROR, Activator.ID, Messages.Missing_profile));
 		IProvisioningPlan plan = planner.getDiffPlan(profile, targetProfile, new NullProgressMonitor());
 
-		ProvisioningContext context = new ProvisioningContext(agent);
+		ProvisioningContext context = new ProvisioningContext(targetAgent);
 		context.setMetadataRepositories(metadataRepositoryLocations.toArray(new URI[metadataRepositoryLocations.size()]));
 		context.setArtifactRepositories(artifactRepositoryLocations.toArray(new URI[artifactRepositoryLocations.size()]));
 		executePlan(context, plan);
@@ -928,7 +930,7 @@ public class DirectorApplication implements IApplication {
 	private IStatus setRoaming(IProfile profile) {
 		ProfileChangeRequest request = new ProfileChangeRequest(profile);
 		request.setProfileProperty(IProfile.PROP_ROAMING, "true"); //$NON-NLS-1$
-		ProvisioningContext context = new ProvisioningContext(agent);
+		ProvisioningContext context = new ProvisioningContext(targetAgent);
 		context.setMetadataRepositories(new URI[0]);
 		context.setArtifactRepositories(new URI[0]);
 		IProvisioningPlan result = planner.getProvisioningPlan(request, context, new NullProgressMonitor());
@@ -980,7 +982,7 @@ public class DirectorApplication implements IApplication {
 		// will set it back later (see bug 269468)
 		request.setProfileProperty(IProfile.PROP_ROAMING, "false"); //$NON-NLS-1$
 
-		ProvisioningContext context = new ProvisioningContext(agent);
+		ProvisioningContext context = new ProvisioningContext(targetAgent);
 		context.setMetadataRepositories(new URI[0]);
 		context.setArtifactRepositories(new URI[0]);
 		IProvisioningPlan result = planner.getProvisioningPlan(request, context, new NullProgressMonitor());
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/Messages.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/Messages.java
index cccc419..c561d4a 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/Messages.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/Messages.java
@@ -57,5 +57,6 @@ public class Messages extends NLS {
 	public static String Planner_no_profile_registry;
 	public static String Planner_profile_out_of_sync;
 	public static String RequestStatus_message;
+	public static String Planner_no_installer_agent;
 
 }
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
index 52dd356..a931c9d 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
@@ -20,6 +20,7 @@ import org.eclipse.equinox.internal.p2.core.helpers.Tracing;
 import org.eclipse.equinox.internal.p2.metadata.query.UpdateQuery;
 import org.eclipse.equinox.internal.p2.rollback.FormerState;
 import org.eclipse.equinox.internal.provisional.p2.director.*;
+import org.eclipse.equinox.p2.core.IAgentLocation;
 import org.eclipse.equinox.p2.core.IProvisioningAgent;
 import org.eclipse.equinox.p2.engine.*;
 import org.eclipse.equinox.p2.engine.query.IUProfilePropertyQuery;
@@ -436,28 +437,52 @@ public class SimplePlanner implements IPlanner {
 				return plan;
 			}
 
-			IProfile agentProfile = profileRegistry.getProfile(IProfileRegistry.SELF);
-			if (agentProfile == null)
+			//No installer agent set
+			if (agent.getService(IProvisioningAgent.INSTALLER_AGENT) == null) {
 				return initialPlan;
+			}
 
-			if (profile.getProfileId().equals(agentProfile.getProfileId())) {
-				if (profile.getTimestamp() != agentProfile.getTimestamp()) {
-					IProvisioningPlan plan = engine.createPlan(initialRequest.getProfile(), initialContext);
-					plan.setStatus(new Status(IStatus.ERROR, DirectorActivator.PI_DIRECTOR, NLS.bind(Messages.Planner_profile_out_of_sync, profile.getProfileId())));
-					return plan;
+			IProfile installerProfile = ((IProfileRegistry) ((IProvisioningAgent) agent.getService(IProvisioningAgent.INSTALLER_AGENT)).getService(IProfileRegistry.SERVICE_NAME)).getProfile((String) agent.getService(IProvisioningAgent.INSTALLER_PROFILEID));
+			if (installerProfile == null)
+				return initialPlan;
+
+			//The target and the installer are in the same agent / profile registry
+			if (haveSameLocation(agent, (IProvisioningAgent) agent.getService(IProvisioningAgent.INSTALLER_AGENT))) {
+				//The target and the installer are the same profile (e.g. the eclipse SDK)
+				if (profile.getProfileId().equals(installerProfile.getProfileId())) {
+					if (profile.getTimestamp() != installerProfile.getTimestamp()) {
+						IProvisioningPlan plan = engine.createPlan(initialRequest.getProfile(), initialContext);
+						plan.setStatus(new Status(IStatus.ERROR, DirectorActivator.PI_DIRECTOR, NLS.bind(Messages.Planner_profile_out_of_sync, profile.getProfileId())));
+						return plan;
+					}
+					return createInstallerPlanForCohostedCase(profile, initialRequest, initialPlan, unattachedState, expectedState, initialContext, sub);
 				}
-				return createInstallerPlanForCohostedCase(profile, initialRequest, initialPlan, unattachedState, expectedState, initialContext, sub);
+
 			}
 
-			if (satisfyMetaRequirements(profile) && !profile.getProfileId().equals(agentProfile.getProfileId())) {
-				return createInstallerPlanForCohostedCaseFromExternalInstaller(profile, initialRequest, initialPlan, expectedState, initialContext, agentProfile, sub);
+			if (satisfyMetaRequirements(profile) && !profile.getProfileId().equals(installerProfile.getProfileId())) {
+				return createInstallerPlanForCohostedCaseFromExternalInstaller(profile, initialRequest, initialPlan, expectedState, initialContext, installerProfile, sub);
 			}
-			return createInstallerPlanForExternalInstaller(profile, initialRequest, initialPlan, expectedState, initialContext, agentProfile, sub);
+
+			return createInstallerPlanForExternalInstaller(profile, initialRequest, initialPlan, expectedState, initialContext, installerProfile, sub);
+
 		} finally {
 			sub.done();
 		}
 	}
 
+	private boolean haveSameLocation(IProvisioningAgent agent1, IProvisioningAgent agent2) {
+		if (agent1 == null || agent2 == null)
+			return false;
+		if (agent1 == agent2)
+			return true;
+		IAgentLocation thisLocation = (IAgentLocation) agent1.getService(IAgentLocation.SERVICE_NAME);
+		IAgentLocation otherLocation = (IAgentLocation) agent2.getService(IAgentLocation.SERVICE_NAME);
+		if (thisLocation == null || otherLocation == null || (thisLocation == null && otherLocation == null))
+			return false;
+		return thisLocation.getRootLocation().equals(otherLocation.getRootLocation());
+	}
+
 	private IProvisioningPlan createInstallerPlanForCohostedCaseFromExternalInstaller(IProfile profile, ProfileChangeRequest initialRequest, IProvisioningPlan initialPlan, Collection<IInstallableUnit> newState, ProvisioningContext initialContext, IProfile agentProfile, SubMonitor sub) {
 		IProvisioningPlan planForProfile = generatePlan(null, newState, initialRequest, initialContext);
 		return createInstallerPlanForExternalInstaller(profile, initialRequest, planForProfile, newState, initialContext, agentProfile, sub);
@@ -465,14 +490,17 @@ public class SimplePlanner implements IPlanner {
 
 	//Deal with the case where the agent profile is different than the one being provisioned
 	private IProvisioningPlan createInstallerPlanForExternalInstaller(IProfile targetedProfile, ProfileChangeRequest initialRequest, IProvisioningPlan initialPlan, Collection<IInstallableUnit> expectedState, ProvisioningContext initialContext, IProfile agentProfile, SubMonitor sub) {
-		Collection<IRequirement> metaRequirements = areMetaRequirementsSatisfied(agentProfile, expectedState, initialPlan);
+		IProfileRegistry installerRegistry = (IProfileRegistry) ((IProvisioningAgent) agent.getService(IProvisioningAgent.INSTALLER_AGENT)).getService(IProfileRegistry.SERVICE_NAME);
+		IProfile installerProfile = installerRegistry.getProfile((String) agent.getService(IProvisioningAgent.INSTALLER_PROFILEID));
+
+		Collection<IRequirement> metaRequirements = areMetaRequirementsSatisfied(installerProfile, expectedState, initialPlan);
 		if (metaRequirements == null)
 			return initialPlan;
 
 		IInstallableUnit actionsIU = createIUForMetaRequirements(targetedProfile, metaRequirements);
-		IInstallableUnit previousActionsIU = getPreviousIUForMetaRequirements(agentProfile, getActionGatheringIUId(targetedProfile), sub);
+		IInstallableUnit previousActionsIU = getPreviousIUForMetaRequirements(installerProfile, getActionGatheringIUId(targetedProfile), sub);
 
-		ProfileChangeRequest agentRequest = new ProfileChangeRequest(agentProfile);
+		ProfileChangeRequest agentRequest = new ProfileChangeRequest(installerProfile);
 		agentRequest.add(actionsIU);
 		if (previousActionsIU != null)
 			agentRequest.remove(previousActionsIU);
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/messages.properties b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/messages.properties
index d6b5b7e..e89ea24 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/messages.properties
@@ -42,4 +42,5 @@ Planner_actions_and_software_incompatible=The actions required to successfully i
 Planner_can_not_install_preq=The actions required to successfully install the requested software can not be installed. 
 Planner_no_profile_registry=Profile Registry is not registered.
 Planner_profile_out_of_sync=The copies of profile {0} are not in sync.
+Planner_no_installer_agent=Problems resolving meta requirements while installing in profile {0}. 
 RequestStatus_message=Plan status for {0}
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/provisional/p2/director/PlanExecutionHelper.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/provisional/p2/director/PlanExecutionHelper.java
index daab98c..ed2d8e3 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/provisional/p2/director/PlanExecutionHelper.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/provisional/p2/director/PlanExecutionHelper.java
@@ -10,8 +10,6 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.provisional.p2.director;
 
-import org.eclipse.equinox.p2.engine.PhaseSetFactory;
-
 import java.io.IOException;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
@@ -30,7 +28,7 @@ public class PlanExecutionHelper {
 			return result.getStatus();
 
 		if (result.getInstallerPlan() != null) {
-			IStatus installerPlanStatus = engine.perform(result.getInstallerPlan(), phaseSet, progress);
+			IStatus installerPlanStatus = ((IEngine) result.getInstallerPlan().getProfile().getProvisioningAgent().getService(IEngine.SERVICE_NAME)).perform(result.getInstallerPlan(), phaseSet, progress);
 			if (!installerPlanStatus.isOK())
 				return installerPlanStatus;
 			Configurator configChanger = (Configurator) ServiceHelper.getService(DirectorActivator.context, Configurator.class.getName());

commit bb007f7d8f4c0354727c0b4c7006585c663255f3
Author: DJ Houghton <dj>
Date:   Thu Mar 19 21:00:40 2009 +0000

    Bug 256364 - [repo] [ui] load composite repos eagerly

176	212	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepository.java
2	3	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepositoryFactory.java
2	1	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/Messages.java
4	5	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/messages.properties
73	71	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/CompositeMetadataRepository.java
2	3	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/CompositeMetadataRepositoryFactory.java
2	1	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/Messages.java
5	6	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/messages.properties
51	16	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/CompositeArtifactRepositoryTest.java
63	21	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/CompositeMetadataRepositoryTest.java
4	7	bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/Bad/missingRequiredAttribute/compositeArtifacts.xml
0	12	bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/Good/compositeArtifacts.xml
12	0	bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/good.local/compositeArtifacts.xml
29	0	bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/good.local/one/artifacts.xml
-	-	bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/good.local/one/features/aaFeature_1.0.0.jar
-	-	bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/good.local/one/plugins/aaPlugin_1.0.0.jar
2	0	bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/good.local/one/readme.txt
28	0	bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/good.local/two/artifacts.xml
-	-	bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/good.local/two/features/aaFeature_1.0.0.jar
-	-	bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/good.local/two/plugins/aaPlugin_1.0.0.jar
2	0	bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/good.local/two/readme.txt
12	0	bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/good.remote/compositeArtifacts.xml
0	12	bundles/org.eclipse.equinox.p2.tests/testData/metadataRepo/composite/Good/compositeContent.xml
12	0	bundles/org.eclipse.equinox.p2.tests/testData/metadataRepo/composite/good.local/compositeContent.xml
128	0	bundles/org.eclipse.equinox.p2.tests/testData/metadataRepo/composite/good.local/one/content.xml
128	0	bundles/org.eclipse.equinox.p2.tests/testData/metadataRepo/composite/good.local/two/content.xml
12	0	bundles/org.eclipse.equinox.p2.tests/testData/metadataRepo/composite/good.remote/compositeContent.xml
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepository.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepository.java
index 8990266..104dad3 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepository.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepository.java
@@ -27,6 +27,7 @@ import org.eclipse.equinox.internal.provisional.p2.core.repository.ICompositeRep
 import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository.AbstractArtifactRepository;
+import org.eclipse.osgi.util.NLS;
 
 public class CompositeArtifactRepository extends AbstractArtifactRepository implements IArtifactRepository, ICompositeRepository {
 
@@ -37,8 +38,11 @@ public class CompositeArtifactRepository extends AbstractArtifactRepository impl
 	static final public String CONTENT_FILENAME = "compositeArtifacts"; //$NON-NLS-1$
 	public static final String PI_REPOSITORY_TYPE = "compositeArtifactRepository"; //$NON-NLS-1$
 
-	// locations of the children repositories... can be absolute or relative.
+	// keep a list of the child URIs. they can be absolute or relative. they may or may not point
+	// to a valid reachable repo
 	private List childrenURIs = new ArrayList();
+	// keep a list of the repositories that we have successfully loaded
+	private List loadedRepos = new ArrayList();
 
 	/**
 	 * Create a Composite repository in memory.
@@ -46,22 +50,23 @@ public class CompositeArtifactRepository extends AbstractArtifactRepository impl
 	 */
 	public static CompositeArtifactRepository createMemoryComposite() {
 		IArtifactRepositoryManager manager = getManager();
-		if (manager != null) {
-			try {
-				//create a unique URI
-				long time = System.currentTimeMillis();
-				URI repositoryURI = new URI("memory:" + String.valueOf(time)); //$NON-NLS-1$
-				while (manager.contains(repositoryURI))
-					repositoryURI = new URI("memory:" + String.valueOf(++time)); //$NON-NLS-1$
-
-				CompositeArtifactRepository result = (CompositeArtifactRepository) manager.createRepository(repositoryURI, repositoryURI.toString(), IArtifactRepositoryManager.TYPE_COMPOSITE_REPOSITORY, null);
-				manager.removeRepository(repositoryURI);
-				return result;
-			} catch (ProvisionException e) {
-				// just return null
-			} catch (URISyntaxException e) {
-				// just return null
-			}
+		if (manager == null)
+			return null;
+		try {
+			//create a unique URI
+			long time = System.currentTimeMillis();
+			URI repositoryURI = new URI("memory:" + String.valueOf(time)); //$NON-NLS-1$
+			while (manager.contains(repositoryURI))
+				repositoryURI = new URI("memory:" + String.valueOf(++time)); //$NON-NLS-1$
+
+			CompositeArtifactRepository result = (CompositeArtifactRepository) manager.createRepository(repositoryURI, repositoryURI.toString(), IArtifactRepositoryManager.TYPE_COMPOSITE_REPOSITORY, null);
+			manager.removeRepository(repositoryURI);
+			return result;
+		} catch (ProvisionException e) {
+			LogHelper.log(e);
+			// just return null
+		} catch (URISyntaxException e) {
+			// just return null
 		}
 		return null;
 	}
@@ -74,14 +79,13 @@ public class CompositeArtifactRepository extends AbstractArtifactRepository impl
 	 * This is only called by the parser when loading a repository.
 	 */
 	public CompositeArtifactRepository(CompositeRepositoryState state) {
-		super(state.getName(), state.getType(), state.getVersion(), null, state.getDescription(), state.getProvider(), state.getProperties());
+		super(state.getName(), state.getType(), state.getVersion(), state.getLocation(), state.getDescription(), state.getProvider(), state.getProperties());
 		for (int i = 0; i < state.getChildren().length; i++)
-			add(childrenURIs, state.getChildren()[i]);
+			addChild(state.getChildren()[i], false);
 	}
 
 	public CompositeArtifactRepository(URI location, String repositoryName, Map properties) {
 		super(repositoryName, REPOSITORY_TYPE, REPOSITORY_VERSION.toString(), location, null, null, properties);
-		initializeAfterLoad(location);
 		save();
 	}
 
@@ -140,21 +144,35 @@ public class CompositeArtifactRepository extends AbstractArtifactRepository impl
 		return isLocal();
 	}
 
-	// use this method to setup any transient fields etc after the object has been restored from a stream
-	public synchronized void initializeAfterLoad(URI repoLocation) {
-		this.location = repoLocation;
+	public void addChild(URI childURI) {
+		addChild(childURI, true);
 	}
 
-	public void addChild(URI childURI) {
-		if (add(childrenURIs, childURI))
+	private void addChild(URI childURI, boolean save) {
+		URI absolute = URIUtil.makeAbsolute(childURI, location);
+		if (childrenURIs.contains(childURI) || childrenURIs.contains(absolute))
+			return;
+		childrenURIs.add(childURI);
+		if (save)
 			save();
+		try {
+			IArtifactRepository repo = load(childURI);
+			loadedRepos.add(repo);
+		} catch (ProvisionException e) {
+			LogHelper.log(e);
+		}
 	}
 
 	public boolean addChild(URI childURI, String comparatorID) {
-		if (isSane(childURI, comparatorID)) {
-			addChild(childURI);
-			//Add was successful
-			return true;
+		try {
+			IArtifactRepository repo = load(childURI);
+			if (isSane(repo, comparatorID)) {
+				addChild(childURI);
+				//Add was successful
+				return true;
+			}
+		} catch (ProvisionException e) {
+			LogHelper.log(e);
 		}
 
 		//Add was not successful
@@ -165,18 +183,30 @@ public class CompositeArtifactRepository extends AbstractArtifactRepository impl
 		boolean removed = childrenURIs.remove(childURI);
 		// if the child wasn't there make sure and try the other permutation
 		// (absolute/relative) to see if it really is in the list.
-		if (!removed) {
-			if (childURI.isAbsolute())
-				removed = childrenURIs.remove(URIUtil.makeRelative(childURI, location));
-			else
-				removed = childrenURIs.remove(URIUtil.makeAbsolute(childURI, location));
-		}
-		if (removed)
+		URI other = childURI.isAbsolute() ? URIUtil.makeRelative(childURI, location) : URIUtil.makeAbsolute(childURI, location);
+		if (!removed)
+			childrenURIs.remove(other);
+
+		if (removed) {
+			// we removed the child from the list so remove the associated repo object as well
+			IArtifactRepository found = null;
+			for (Iterator iter = loadedRepos.iterator(); found == null && iter.hasNext();) {
+				IArtifactRepository current = (IArtifactRepository) iter.next();
+				URI repoLocation = current.getLocation();
+				if (URIUtil.sameURI(childURI, repoLocation))
+					found = current;
+				else if (URIUtil.sameURI(other, repoLocation))
+					found = current;
+			}
+			if (found != null)
+				loadedRepos.remove(found);
 			save();
+		}
 	}
 
 	public void removeAllChildren() {
 		childrenURIs.clear();
+		loadedRepos.clear();
 		save();
 	}
 
@@ -232,65 +262,41 @@ public class CompositeArtifactRepository extends AbstractArtifactRepository impl
 	}
 
 	public boolean contains(IArtifactKey key) {
-		for (Iterator repositoryIterator = childrenURIs.iterator(); repositoryIterator.hasNext();) {
-			try {
-				URI currentURI = (URI) repositoryIterator.next();
-				IArtifactRepository current = load(currentURI);
-				if (current.contains(key))
-					return true;
-			} catch (ProvisionException e) {
-				//repository failed to load. fall through
-				LogHelper.log(e);
-			}
+		for (Iterator repositoryIterator = loadedRepos.iterator(); repositoryIterator.hasNext();) {
+			IArtifactRepository current = (IArtifactRepository) repositoryIterator.next();
+			if (current.contains(key))
+				return true;
 		}
 		return false;
 	}
 
 	public boolean contains(IArtifactDescriptor descriptor) {
-		for (Iterator repositoryIterator = childrenURIs.iterator(); repositoryIterator.hasNext();) {
-			try {
-				URI currentURI = (URI) repositoryIterator.next();
-				IArtifactRepository current = load(currentURI);
-				if (current.contains(descriptor))
-					return true;
-			} catch (ProvisionException e) {
-				//repository failed to load. fall through
-				LogHelper.log(e);
-			}
+		for (Iterator repositoryIterator = loadedRepos.iterator(); repositoryIterator.hasNext();) {
+			IArtifactRepository current = (IArtifactRepository) repositoryIterator.next();
+			if (current.contains(descriptor))
+				return true;
 		}
 		return false;
 	}
 
 	public IArtifactDescriptor[] getArtifactDescriptors(IArtifactKey key) {
 		ArrayList result = new ArrayList();
-		for (Iterator repositoryIterator = childrenURIs.iterator(); repositoryIterator.hasNext();) {
-			try {
-				URI currentURI = (URI) repositoryIterator.next();
-				IArtifactRepository current = load(currentURI);
-				IArtifactDescriptor[] tempResult = current.getArtifactDescriptors(key);
-				for (int i = 0; i < tempResult.length; i++)
-					add(result, tempResult[i]);
-			} catch (ProvisionException e) {
-				//repository failed to load. fall through
-				LogHelper.log(e);
-			}
+		for (Iterator repositoryIterator = loadedRepos.iterator(); repositoryIterator.hasNext();) {
+			IArtifactRepository current = (IArtifactRepository) repositoryIterator.next();
+			IArtifactDescriptor[] tempResult = current.getArtifactDescriptors(key);
+			for (int i = 0; i < tempResult.length; i++)
+				add(result, tempResult[i]);
 		}
 		return (IArtifactDescriptor[]) result.toArray(new IArtifactDescriptor[result.size()]);
 	}
 
 	public IArtifactKey[] getArtifactKeys() {
 		ArrayList result = new ArrayList();
-		for (Iterator repositoryIterator = childrenURIs.iterator(); repositoryIterator.hasNext();) {
-			try {
-				URI currentURI = (URI) repositoryIterator.next();
-				IArtifactRepository current = load(currentURI);
-				IArtifactKey[] tempResult = current.getArtifactKeys();
-				for (int i = 0; i < tempResult.length; i++)
-					add(result, tempResult[i]);
-			} catch (ProvisionException e) {
-				//repository failed to load. fall through
-				LogHelper.log(e);
-			}
+		for (Iterator repositoryIterator = loadedRepos.iterator(); repositoryIterator.hasNext();) {
+			IArtifactRepository current = (IArtifactRepository) repositoryIterator.next();
+			IArtifactKey[] tempResult = current.getArtifactKeys();
+			for (int i = 0; i < tempResult.length; i++)
+				add(result, tempResult[i]);
 		}
 		return (IArtifactKey[]) result.toArray(new IArtifactKey[result.size()]);
 	}
@@ -298,63 +304,43 @@ public class CompositeArtifactRepository extends AbstractArtifactRepository impl
 	public IStatus getArtifacts(IArtifactRequest[] requests, IProgressMonitor monitor) {
 		SubMonitor subMonitor = SubMonitor.convert(monitor, requests.length);
 		MultiStatus multiStatus = new MultiStatus(Activator.ID, IStatus.OK, Messages.message_childrenRepos, null);
-		for (Iterator repositoryIterator = childrenURIs.iterator(); repositoryIterator.hasNext() && requests.length > 0;) {
-			try {
-				URI currentURI = (URI) repositoryIterator.next();
-				IArtifactRepository current = load(currentURI);
-				IArtifactRequest[] applicable = getRequestsForRepository(current, requests);
-				IStatus dlStatus = current.getArtifacts(applicable, subMonitor.newChild(requests.length));
-				multiStatus.add(dlStatus);
-				if (dlStatus.getSeverity() == IStatus.CANCEL)
-					return multiStatus;
-				requests = filterUnfetched(requests);
-				subMonitor.setWorkRemaining(requests.length);
-			} catch (ProvisionException e) {
-				//repository failed the load. Fall through.
-				LogHelper.log(e);
-			}
+		for (Iterator repositoryIterator = loadedRepos.iterator(); repositoryIterator.hasNext() && requests.length > 0;) {
+			IArtifactRepository current = (IArtifactRepository) repositoryIterator.next();
+			IArtifactRequest[] applicable = getRequestsForRepository(current, requests);
+			IStatus dlStatus = current.getArtifacts(applicable, subMonitor.newChild(requests.length));
+			multiStatus.add(dlStatus);
+			if (dlStatus.getSeverity() == IStatus.CANCEL)
+				return multiStatus;
+			requests = filterUnfetched(requests);
+			subMonitor.setWorkRemaining(requests.length);
 		}
 		return multiStatus;
 	}
 
 	public IStatus getArtifact(IArtifactDescriptor descriptor, OutputStream destination, IProgressMonitor monitor) {
-		SubMonitor subMonitor = SubMonitor.convert(monitor, childrenURIs.size());
-		Iterator repositoryIterator = childrenURIs.iterator();
+		SubMonitor subMonitor = SubMonitor.convert(monitor, loadedRepos.size());
 		MultiStatus multiStatus = new MultiStatus(Activator.ID, IStatus.OK, Messages.message_childrenRepos, null);
-		while (repositoryIterator.hasNext()) {
-			try {
-				URI currentURI = (URI) repositoryIterator.next();
-				IArtifactRepository current = load(currentURI);
-				IStatus status = current.getArtifact(descriptor, destination, subMonitor.newChild(1));
-				if (status.isOK())
-					return status;
-				//getArtifact failed
-				multiStatus.add(status);
-			} catch (ProvisionException e) {
-				//repository failed the load. Fall through.
-				LogHelper.log(e);
-			}
+		for (Iterator repositoryIterator = loadedRepos.iterator(); repositoryIterator.hasNext();) {
+			IArtifactRepository current = (IArtifactRepository) repositoryIterator.next();
+			IStatus status = current.getArtifact(descriptor, destination, subMonitor.newChild(1));
+			if (status.isOK())
+				return status;
+			//getArtifact failed
+			multiStatus.add(status);
 		}
 		return multiStatus;
 	}
 
 	public IStatus getRawArtifact(IArtifactDescriptor descriptor, OutputStream destination, IProgressMonitor monitor) {
-		SubMonitor subMonitor = SubMonitor.convert(monitor, childrenURIs.size());
-		Iterator repositoryIterator = childrenURIs.iterator();
+		SubMonitor subMonitor = SubMonitor.convert(monitor, loadedRepos.size());
 		MultiStatus multiStatus = new MultiStatus(Activator.ID, IStatus.OK, Messages.message_childrenRepos, null);
-		while (repositoryIterator.hasNext()) {
-			try {
-				URI currentURI = (URI) repositoryIterator.next();
-				IArtifactRepository current = load(currentURI);
-				IStatus status = current.getRawArtifact(descriptor, destination, subMonitor.newChild(1));
-				if (status.isOK())
-					return status;
-				//getRawArtifact failed
-				multiStatus.add(status);
-			} catch (ProvisionException e) {
-				//repository failed the load. Fall through.
-				LogHelper.log(e);
-			}
+		for (Iterator repositoryIterator = loadedRepos.iterator(); repositoryIterator.hasNext();) {
+			IArtifactRepository current = (IArtifactRepository) repositoryIterator.next();
+			IStatus status = current.getRawArtifact(descriptor, destination, subMonitor.newChild(1));
+			if (status.isOK())
+				return status;
+			//getRawArtifact failed
+			multiStatus.add(status);
 		}
 		return multiStatus;
 	}
@@ -387,43 +373,35 @@ public class CompositeArtifactRepository extends AbstractArtifactRepository impl
 		boolean compress = "true".equalsIgnoreCase((String) properties.get(PROP_COMPRESSED)); //$NON-NLS-1$
 		OutputStream os = null;
 		try {
-			try {
-				URI actualLocation = getActualLocation(location, false);
-				File artifactsFile = URIUtil.toFile(actualLocation);
-				File jarFile = URIUtil.toFile(getActualLocation(location, true));
-				if (!compress) {
-					if (jarFile.exists()) {
-						jarFile.delete();
-					}
-					if (!artifactsFile.exists()) {
-						// create parent folders
-						artifactsFile.getParentFile().mkdirs();
-					}
-					os = new FileOutputStream(artifactsFile);
-				} else {
-					if (artifactsFile.exists()) {
-						artifactsFile.delete();
-					}
-					if (!jarFile.exists()) {
-						if (!jarFile.getParentFile().exists())
-							jarFile.getParentFile().mkdirs();
-						jarFile.createNewFile();
-					}
-					JarOutputStream jOs = new JarOutputStream(new FileOutputStream(jarFile));
-					jOs.putNextEntry(new JarEntry(new Path(artifactsFile.getAbsolutePath()).lastSegment()));
-					os = jOs;
+			URI actualLocation = getActualLocation(location, false);
+			File artifactsFile = URIUtil.toFile(actualLocation);
+			File jarFile = URIUtil.toFile(getActualLocation(location, true));
+			if (!compress) {
+				if (jarFile.exists()) {
+					jarFile.delete();
+				}
+				if (!artifactsFile.exists()) {
+					// create parent folders
+					artifactsFile.getParentFile().mkdirs();
+				}
+				os = new FileOutputStream(artifactsFile);
+			} else {
+				if (artifactsFile.exists()) {
+					artifactsFile.delete();
 				}
-				super.setProperty(IRepository.PROP_TIMESTAMP, Long.toString(System.currentTimeMillis()));
-				new CompositeRepositoryIO().write(toState(), os, PI_REPOSITORY_TYPE);
-			} catch (IOException e) {
-				// TODO proper exception handling
-				e.printStackTrace();
-			} finally {
-				if (os != null)
-					os.close();
+				if (!jarFile.exists()) {
+					if (!jarFile.getParentFile().exists())
+						jarFile.getParentFile().mkdirs();
+					jarFile.createNewFile();
+				}
+				JarOutputStream jOs = new JarOutputStream(new FileOutputStream(jarFile));
+				jOs.putNextEntry(new JarEntry(new Path(artifactsFile.getAbsolutePath()).lastSegment()));
+				os = jOs;
 			}
+			super.setProperty(IRepository.PROP_TIMESTAMP, Long.toString(System.currentTimeMillis()));
+			new CompositeRepositoryIO().write(toState(), os, PI_REPOSITORY_TYPE);
 		} catch (IOException e) {
-			e.printStackTrace();
+			LogHelper.log(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_FAILED_WRITE, NLS.bind(Messages.io_failedWrite, location), e));
 		}
 	}
 
@@ -442,67 +420,49 @@ public class CompositeArtifactRepository extends AbstractArtifactRepository impl
 	}
 
 	/**
-	 * A wrapper method that ensures a specified repository is compared against all children.
-	 * @param toCheckURI
-	 * @param comparatorID
-	 * @return true if toCheckRepo is consistent, false if toCheckRepo contains an equal descriptor to that of s child and they refer to different artifacts on disk.
-	 */
-	private boolean isSane(URI toCheckURI, String comparatorID) {
-		return isSane(toCheckURI, comparatorID, 0);
-	}
-
-	/**
 	 * A method to check if the content of a repository is consistent with the other children by
 	 * comparing content using the artifactComparator specified by the comparatorID
-	 * startingIndex is used for optimization purposes (ensuring no redundant or self checks are made)
-	 * @param toCheckURI
+	 * @param toCheckRepo the repository to check
 	 * @param comparatorID
-	 * @param startingIndex
-	 * @return true if toCheckRepo is consistent, false if toCheckRepo contains an equal descriptor to that of s child and they refer to different artifacts on disk.
+	 * @return <code>true</code> if toCheckRepo is consistent, <code>false</code> if toCheckRepo 
+	 * contains an equal descriptor to that of a child and they refer to different artifacts on disk.
 	 */
-	private boolean isSane(URI toCheckURI, String comparatorID, int startingIndex) {
-		IArtifactRepository toCheckRepo = null;
-		try {
-			toCheckRepo = load(toCheckURI);
-		} catch (ProvisionException e) {
-			//repository failed the load.
-			LogHelper.log(e);
-			return false;
+	private boolean isSane(IArtifactRepository toCheckRepo, String comparatorID) {
+		IArtifactComparator comparator = ArtifactComparatorFactory.getArtifactComparator(comparatorID);
+		for (Iterator repositoryIterator = loadedRepos.iterator(); repositoryIterator.hasNext();) {
+			IArtifactRepository current = (IArtifactRepository) repositoryIterator.next();
+			if (!current.equals(toCheckRepo)) {
+				if (!isSane(toCheckRepo, current, comparator))
+					return false;
+			}
 		}
+		return true;
+	}
 
-		IArtifactComparator comparator = ArtifactComparatorFactory.getArtifactComparator(comparatorID);
-		for (int m = startingIndex; m < childrenURIs.size(); m++) {
-			try {
-				URI currentURI = (URI) childrenURIs.get(m);
-				IArtifactRepository current = load(currentURI);
-				if (!current.equals(toCheckRepo)) {
-					IArtifactKey[] toCheckKeys = toCheckRepo.getArtifactKeys();
-					for (int i = 0; i < toCheckKeys.length; i++) {
-						IArtifactKey key = toCheckKeys[i];
-						if (!current.contains(key))
-							continue;
-
-						IArtifactDescriptor[] toCheckDescriptors = toCheckRepo.getArtifactDescriptors(key);
-						IArtifactDescriptor[] currentDescriptors = current.getArtifactDescriptors(key);
-						for (int j = 0; j < toCheckDescriptors.length; j++) {
-							if (!current.contains(toCheckDescriptors[j]))
-								continue;
-							for (int k = 0; k < currentDescriptors.length; k++) {
-								if (currentDescriptors[k].equals(toCheckDescriptors[j])) {
-									IStatus compareResult = comparator.compare(current, currentDescriptors[k], toCheckRepo, toCheckDescriptors[j]);
-									if (!compareResult.isOK()) {
-										LogHelper.log(compareResult);
-										return false;
-									}
-									break;
-								}
-							}
+	/*
+	 * Check the two given repositories against each other using the given comparator.
+	 */
+	private boolean isSane(IArtifactRepository one, IArtifactRepository two, IArtifactComparator comparator) {
+		IArtifactKey[] toCheckKeys = one.getArtifactKeys();
+		for (int i = 0; i < toCheckKeys.length; i++) {
+			IArtifactKey key = toCheckKeys[i];
+			if (!two.contains(key))
+				continue;
+			IArtifactDescriptor[] toCheckDescriptors = one.getArtifactDescriptors(key);
+			IArtifactDescriptor[] currentDescriptors = two.getArtifactDescriptors(key);
+			for (int j = 0; j < toCheckDescriptors.length; j++) {
+				if (!two.contains(toCheckDescriptors[j]))
+					continue;
+				for (int k = 0; k < currentDescriptors.length; k++) {
+					if (currentDescriptors[k].equals(toCheckDescriptors[j])) {
+						IStatus compareResult = comparator.compare(two, currentDescriptors[k], two, toCheckDescriptors[j]);
+						if (!compareResult.isOK()) {
+							LogHelper.log(compareResult);
+							return false;
 						}
+						break;
 					}
 				}
-			} catch (ProvisionException e) {
-				//repository failed the load.
-				LogHelper.log(e);
 			}
 		}
 		return true;
@@ -516,9 +476,13 @@ public class CompositeArtifactRepository extends AbstractArtifactRepository impl
 	 * @returns true if the repository is consistent, false if two equal descriptors refer to different artifacts on disk.
 	 */
 	public boolean validate(String comparatorID) {
-		for (int i = 0; i < childrenURIs.size(); i++) {
-			if (!isSane((URI) childrenURIs.get(i), comparatorID, i + 1))
-				return false;
+		IArtifactComparator comparator = ArtifactComparatorFactory.getArtifactComparator(comparatorID);
+		IArtifactRepository[] repos = (IArtifactRepository[]) loadedRepos.toArray(new IArtifactRepository[loadedRepos.size()]);
+		for (int outer = 0; outer < repos.length; outer++) {
+			for (int inner = outer + 1; inner < repos.length; inner++) {
+				if (!isSane(repos[outer], repos[inner], comparator))
+					return false;
+			}
 		}
 		return true;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepositoryFactory.java
index f82fa21..cc76cbd 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepositoryFactory.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepositoryFactory.java
@@ -90,10 +90,9 @@ public class CompositeArtifactRepositoryFactory extends ArtifactRepositoryFactor
 				}
 				CompositeRepositoryIO io = new CompositeRepositoryIO();
 				CompositeRepositoryState resultState = io.read(localFile.toURL(), descriptorStream, CompositeArtifactRepository.PI_REPOSITORY_TYPE, sub.newChild(100));
-
+				if (resultState.getLocation() == null)
+					resultState.setLocation(location);
 				CompositeArtifactRepository result = new CompositeArtifactRepository(resultState);
-
-				result.initializeAfterLoad(location);
 				if (Tracing.DEBUG_METADATA_PARSING) {
 					time += System.currentTimeMillis();
 					Tracing.debug(debugMsg + "time (ms): " + time); //$NON-NLS-1$ 
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/Messages.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/Messages.java
index f4eb227..df35324 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/Messages.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/Messages.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
+ * Copyright (c) 2007, 2009 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -20,6 +20,7 @@ public class Messages extends NLS {
 	public static String downloading;
 	public static String error_closing_stream;
 	public static String io_failedRead;
+	public static String io_failedWrite;
 	public static String ecf_configuration_error;
 	public static String io_incompatibleVersion;
 	public static String io_invalidLocation;
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/messages.properties b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/messages.properties
index 30333f5..6bfbbb5 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/messages.properties
@@ -1,5 +1,5 @@
 ###############################################################################
-# Copyright (c) 2007, 2008 IBM Corporation and others.
+# Copyright (c) 2007, 2009 IBM Corporation and others.
 # All rights reserved. This program and the accompanying materials
 # are made available under the terms of the Eclipse Public License v1.0
 # which accompanies this distribution, and is available at
@@ -14,13 +14,12 @@ downloading=Downloading {0}
 error_closing_stream=Error closing the output stream for {0} on repository {1}.
 
 io_failedRead=Unable to read repository at {0}.
-io_parseError=\
-	Error parsing simple artifact repository.
+io_parseError=Error parsing simple artifact repository.
 ecf_configuration_error=Transport initialization error.
-io_incompatibleVersion=\
-	Simple artifact repository has incompatible version {0}; expected {1}.
+io_incompatibleVersion=Simple artifact repository has incompatible version {0}; expected {1}.
 io_invalidLocation=Invalid repository location: {0}
 mirroring=Mirroring:
+io_failedWrite=Error occurred while writing repository at {0}.
 
 repoFailedWrite=Unable to write to repository: {0}.
 repoReadOnly=Cannot write because repository is read only: {0}
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/CompositeMetadataRepository.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/CompositeMetadataRepository.java
index a1c4738..1740f30 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/CompositeMetadataRepository.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/CompositeMetadataRepository.java
@@ -30,6 +30,7 @@ import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadata
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.query.*;
 import org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.AbstractMetadataRepository;
+import org.eclipse.osgi.util.NLS;
 
 public class CompositeMetadataRepository extends AbstractMetadataRepository implements IMetadataRepository, ICompositeRepository {
 
@@ -39,7 +40,11 @@ public class CompositeMetadataRepository extends AbstractMetadataRepository impl
 	static final public String XML_EXTENSION = ".xml"; //$NON-NLS-1$
 	static final private String JAR_EXTENSION = ".jar"; //$NON-NLS-1$
 
+	// keep a list of the child URIs. they can be absolute or relative. they may or may not point
+	// to a valid reachable repo
 	private List childrenURIs = new ArrayList();
+	// keep a list of the repositories that we have successfully loaded
+	private List loadedRepos = new ArrayList();
 
 	/**
 	 * Create a Composite repository in memory.
@@ -47,35 +52,27 @@ public class CompositeMetadataRepository extends AbstractMetadataRepository impl
 	 */
 	public static CompositeMetadataRepository createMemoryComposite() {
 		IMetadataRepositoryManager manager = getManager();
-		if (manager != null) {
-			try {
-				//create a unique opaque URI 
-				long time = System.currentTimeMillis();
-				URI repositoryURI = new URI("memory:" + String.valueOf(time)); //$NON-NLS-1$
-				while (manager.contains(repositoryURI))
-					repositoryURI = new URI("memory:" + String.valueOf(++time)); //$NON-NLS-1$
+		if (manager == null)
+			return null;
+		try {
+			//create a unique opaque URI 
+			long time = System.currentTimeMillis();
+			URI repositoryURI = new URI("memory:" + String.valueOf(time)); //$NON-NLS-1$
+			while (manager.contains(repositoryURI))
+				repositoryURI = new URI("memory:" + String.valueOf(++time)); //$NON-NLS-1$
 
-				CompositeMetadataRepository result = (CompositeMetadataRepository) manager.createRepository(repositoryURI, repositoryURI.toString(), IMetadataRepositoryManager.TYPE_COMPOSITE_REPOSITORY, null);
-				manager.removeRepository(repositoryURI);
-				return result;
-			} catch (ProvisionException e) {
-				// just return null
-			} catch (URISyntaxException e) {
-				// just return null
-			}
+			CompositeMetadataRepository result = (CompositeMetadataRepository) manager.createRepository(repositoryURI, repositoryURI.toString(), IMetadataRepositoryManager.TYPE_COMPOSITE_REPOSITORY, null);
+			manager.removeRepository(repositoryURI);
+			return result;
+		} catch (ProvisionException e) {
+			// just return null
+			LogHelper.log(e);
+		} catch (URISyntaxException e) {
+			// just return null
 		}
 		return null;
 	}
 
-	/*
-	 * Add the given object to the specified list if it doesn't already exist
-	 * in it. Return a boolean value indicating whether or not the object was 
-	 * actually added.
-	 */
-	private static boolean add(List list, Object obj) {
-		return list.contains(obj) ? false : list.add(obj);
-	}
-
 	static private IMetadataRepositoryManager getManager() {
 		return (IMetadataRepositoryManager) ServiceHelper.getService(Activator.getContext(), IMetadataRepositoryManager.class.getName());
 	}
@@ -98,9 +95,9 @@ public class CompositeMetadataRepository extends AbstractMetadataRepository impl
 	 * This is only called by the parser when loading a repository.
 	 */
 	public CompositeMetadataRepository(CompositeRepositoryState state) {
-		super(state.getName(), state.getType(), state.getVersion(), null, state.getDescription(), state.getProvider(), state.getProperties());
+		super(state.getName(), state.getType(), state.getVersion(), state.getLocation(), state.getDescription(), state.getProvider(), state.getProperties());
 		for (int i = 0; i < state.getChildren().length; i++)
-			add(childrenURIs, state.getChildren()[i]);
+			addChild(state.getChildren()[i], false);
 	}
 
 	/*
@@ -121,44 +118,13 @@ public class CompositeMetadataRepository extends AbstractMetadataRepository impl
 		return result;
 	}
 
-	// use this method to setup any transient fields etc after the object has been restored from a stream
-	public synchronized void initializeAfterLoad(URI aLocation) {
-		this.location = aLocation;
-	}
-
 	public Collector query(Query query, Collector collector, IProgressMonitor monitor) {
-		// call #getChildren here so the URIs are made absolute and can be handed off to the manager for loading
-		List children = getChildren();
-		SubMonitor sub = SubMonitor.convert(monitor, Messages.repo_loading, 20 * children.size());
+		if (monitor == null)
+			monitor = new NullProgressMonitor();
 		try {
-			List repositories = new ArrayList(children.size());
-			SubMonitor loopMonitor = sub.newChild(10 * children.size());
-			for (Iterator repositoryIterator = children.iterator(); repositoryIterator.hasNext();) {
-				try {
-					//Try to load the repositories one by one
-					URI currentURI = (URI) repositoryIterator.next();
-					boolean currentLoaded = getManager().contains(currentURI);
-					IMetadataRepository currentRepo = getManager().loadRepository(currentURI, null);
-					if (!currentLoaded) {
-						//set enabled to false so repositories do not polled twice
-						getManager().setEnabled(currentURI, false);
-						//set repository to system to hide from users
-						getManager().setRepositoryProperty(currentURI, IRepository.PROP_SYSTEM, String.valueOf(true));
-					}
-					loopMonitor.worked(10);
-					repositories.add(currentRepo);
-				} catch (ProvisionException e) {
-					//repository failed to load. fall through
-					LogHelper.log(e);
-				}
-			}
-			loopMonitor.done();
-
 			// Query all the all the repositories this composite repo contains
-			SubMonitor queryMonitor = sub.newChild(10 * children.size());
-			CompoundQueryable queryable = new CompoundQueryable((IQueryable[]) repositories.toArray(new IQueryable[repositories.size()]));
-			collector = queryable.query(query, collector, queryMonitor);
-			queryMonitor.done();
+			CompoundQueryable queryable = new CompoundQueryable((IQueryable[]) loadedRepos.toArray(new IQueryable[loadedRepos.size()]));
+			collector = queryable.query(query, collector, monitor);
 		} finally {
 			if (monitor != null)
 				monitor.done();
@@ -166,27 +132,63 @@ public class CompositeMetadataRepository extends AbstractMetadataRepository impl
 		return collector;
 	}
 
-	public void addChild(URI childURI) {
-		if (add(childrenURIs, childURI))
+	private void addChild(URI childURI, boolean save) {
+		URI absolute = URIUtil.makeAbsolute(childURI, location);
+		if (childrenURIs.contains(childURI) || childrenURIs.contains(absolute))
+			return;
+		// always add the URI to the list of child URIs (even if we can't load it later)
+		childrenURIs.add(childURI);
+		if (save)
 			save();
+		try {
+			boolean currentLoaded = getManager().contains(absolute);
+			IMetadataRepository currentRepo = getManager().loadRepository(absolute, null);
+			if (!currentLoaded) {
+				//set enabled to false so repositories do not polled twice
+				getManager().setEnabled(absolute, false);
+				//set repository to system to hide from users
+				getManager().setRepositoryProperty(absolute, IRepository.PROP_SYSTEM, String.valueOf(true));
+			}
+			// we successfully loaded the repo so remember it
+			loadedRepos.add(currentRepo);
+		} catch (ProvisionException e) {
+			//repository failed to load. fall through
+			LogHelper.log(e);
+		}
+	}
+
+	public void addChild(URI childURI) {
+		addChild(childURI, true);
 	}
 
 	public void removeChild(URI childURI) {
 		boolean removed = childrenURIs.remove(childURI);
 		// if the child wasn't there make sure and try the other permutation
 		// (absolute/relative) to see if it really is in the list.
-		if (!removed) {
-			if (childURI.isAbsolute())
-				removed = childrenURIs.remove(URIUtil.makeRelative(childURI, location));
-			else
-				removed = childrenURIs.remove(URIUtil.makeAbsolute(childURI, location));
-		}
-		if (removed)
+		URI other = childURI.isAbsolute() ? URIUtil.makeRelative(childURI, location) : URIUtil.makeAbsolute(childURI, location);
+		if (!removed)
+			removed = childrenURIs.remove(other);
+
+		if (removed) {
+			// we removed the child from the list so remove the associated repo object as well
+			IMetadataRepository found = null;
+			for (Iterator iter = loadedRepos.iterator(); found == null && iter.hasNext();) {
+				IMetadataRepository current = (IMetadataRepository) iter.next();
+				URI repoLocation = current.getLocation();
+				if (URIUtil.sameURI(childURI, repoLocation))
+					found = current;
+				else if (URIUtil.sameURI(other, repoLocation))
+					found = current;
+			}
+			if (found != null)
+				loadedRepos.remove(found);
 			save();
+		}
 	}
 
 	public void removeAllChildren() {
 		childrenURIs.clear();
+		loadedRepos.clear();
 		save();
 	}
 
@@ -261,7 +263,7 @@ public class CompositeMetadataRepository extends AbstractMetadataRepository impl
 			super.setProperty(IRepository.PROP_TIMESTAMP, Long.toString(System.currentTimeMillis()));
 			new CompositeRepositoryIO().write(toState(), output, PI_REPOSITORY_TYPE);
 		} catch (IOException e) {
-			LogHelper.log(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_FAILED_WRITE, "Error saving metadata repository: " + location, e)); //$NON-NLS-1$
+			LogHelper.log(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_FAILED_WRITE, NLS.bind(Messages.io_failedWrite, location), e));
 		}
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/CompositeMetadataRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/CompositeMetadataRepositoryFactory.java
index d66c193..ec6afc1 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/CompositeMetadataRepositoryFactory.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/CompositeMetadataRepositoryFactory.java
@@ -121,10 +121,9 @@ public class CompositeMetadataRepositoryFactory extends MetadataRepositoryFactor
 					InputStream descriptorStream = jarStream != null ? jarStream : inStream;
 					CompositeRepositoryIO io = new CompositeRepositoryIO();
 					CompositeRepositoryState resultState = io.read(localFile.toURL(), descriptorStream, CompositeMetadataRepository.PI_REPOSITORY_TYPE, sub.newChild(100));
-
+					if (resultState.getLocation() == null)
+						resultState.setLocation(location);
 					CompositeMetadataRepository result = new CompositeMetadataRepository(resultState);
-
-					result.initializeAfterLoad(location);
 					if (Tracing.DEBUG_METADATA_PARSING) {
 						time += System.currentTimeMillis();
 						Tracing.debug(debugMsg + "time (ms): " + time); //$NON-NLS-1$ 
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/Messages.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/Messages.java
index 438acef..e86d9f7 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/Messages.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/Messages.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others. All rights reserved. This
+ * Copyright (c) 2007, 2009 IBM Corporation and others. All rights reserved. This
  * program and the accompanying materials are made available under the terms of
  * the Eclipse Public License v1.0 which accompanies this distribution, and is
  * available at http://www.eclipse.org/legal/epl-v10.html
@@ -23,6 +23,7 @@ public class Messages extends NLS {
 	}
 
 	public static String io_failedRead;
+	public static String io_failedWrite;
 	public static String ecf_configuration_error;
 
 	public static String io_IncompatibleVersion;
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/messages.properties b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/messages.properties
index 69271d3..358e7fe 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/messages.properties
@@ -1,5 +1,5 @@
 ###############################################################################
-# Copyright (c) 2007, 2008 IBM Corporation and others.
+# Copyright (c) 2007, 2009 IBM Corporation and others.
 # All rights reserved. This program and the accompanying materials
 # are made available under the terms of the Eclipse Public License v1.0
 # which accompanies this distribution, and is available at
@@ -9,11 +9,10 @@
 #     IBM Corporation - initial API and implementation
 ###############################################################################
 
-io_failedRead=Unable to read repository at {0}
-io_IncompatibleVersion=\
-Metadata repository has incompatible version {0}; expected {1}
-io_parseError=\
-Error parsing metadata repository
+io_failedRead=Unable to read repository at {0}.
+io_failedWrite=Error occurred while writing repository at {0}.
+io_IncompatibleVersion=Metadata repository has incompatible version {0}; expected {1}
+io_parseError=Error parsing metadata repository
 ecf_configuration_error=Transport initialization error.
 repo_loading = Loading the repository {0}
 
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/CompositeArtifactRepositoryTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/CompositeArtifactRepositoryTest.java
index 1a62b8a..4ce6b59 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/CompositeArtifactRepositoryTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/CompositeArtifactRepositoryTest.java
@@ -564,14 +564,14 @@ public class CompositeArtifactRepositoryTest extends AbstractProvisioningTest {
 		assertTrue(repo2File.length() == destFile2.length());
 	}
 
-	public void testLoadingRepository() {
-		File knownGoodRepoLocation = getTestData("1", "/testData/artifactRepo/composite/Good");
+	public void testLoadingRepositoryRemote() {
+		File knownGoodRepoLocation = getTestData("0.1", "/testData/artifactRepo/composite/good.remote");
 
 		CompositeArtifactRepository compRepo = null;
 		try {
 			compRepo = (CompositeArtifactRepository) getArtifactRepositoryManager().loadRepository(knownGoodRepoLocation.toURI(), null);
 		} catch (ProvisionException e) {
-			fail("Error Loading repository", e);
+			fail("0.99", e);
 		}
 
 		List children = compRepo.getChildren();
@@ -579,24 +579,53 @@ public class CompositeArtifactRepositoryTest extends AbstractProvisioningTest {
 		try {
 			//ensure children are correct
 			URI child1 = URIUtil.fromString("http://www.eclipse.org/foo");
-			assertTrue("Ensure child 'http://www.eclipse.org/foo' exists", children.contains(child1));
+			assertTrue("1.0", children.contains(child1));
 			URI child2 = URIUtil.fromString("http://www.eclipse.org/bar");
-			assertTrue("Ensure child 'http://www.eclipse.org/foo' exists", children.contains(child2));
-			assertEquals("Ensure correct number of children", 2, children.size());
+			assertTrue("1.1", children.contains(child2));
+			assertEquals("1.2", 2, children.size());
 		} catch (URISyntaxException e) {
-			fail("Error creating URIs for verifiaction", e);
+			fail("1.99", e);
+		}
+
+		//ensure correct properties
+		assertEquals("2.0", "artifact name", compRepo.getName());
+		Map properties = compRepo.getProperties();
+		assertEquals("2.1", 2, properties.size());
+		String timestamp = (String) properties.get(IRepository.PROP_TIMESTAMP);
+		assertNotNull("2.2", timestamp);
+		assertEquals("2.3", "1234", timestamp);
+		String compressed = (String) properties.get(IRepository.PROP_COMPRESSED);
+		assertNotNull("2.4", compressed);
+		assertFalse("2.4", Boolean.parseBoolean(compressed));
+	}
+
+	public void testLoadingRepositoryLocal() {
+		File knownGoodRepoLocation = getTestData("0.1", "/testData/artifactRepo/composite/good.local");
+
+		CompositeArtifactRepository compRepo = null;
+		try {
+			compRepo = (CompositeArtifactRepository) getArtifactRepositoryManager().loadRepository(knownGoodRepoLocation.toURI(), null);
+		} catch (ProvisionException e) {
+			fail("0.99", e);
 		}
 
+		List children = compRepo.getChildren();
+
+		//ensure children are correct
+		assertTrue("1.0", children.contains(URIUtil.append(compRepo.getLocation(), "one")));
+		assertTrue("1.1", children.contains(URIUtil.append(compRepo.getLocation(), "two")));
+		assertEquals("1.2", 2, children.size());
+
 		//ensure correct properties
-		assertEquals("Ensure correct name", "artifact name", compRepo.getName());
+		assertEquals("2.0", "artifact name", compRepo.getName());
 		Map properties = compRepo.getProperties();
-		assertEquals("Ensure correct number of properties", 2, properties.size());
+		assertEquals("2.1", 2, properties.size());
 		String timestamp = (String) properties.get(IRepository.PROP_TIMESTAMP);
-		assertTrue("Ensure timestamp value is not null", timestamp != null);
-		assertEquals("Ensure correct timestamp value", "1226685461796", timestamp);
+		assertNotNull("2.2", timestamp);
+		assertEquals("2.3", "1234", timestamp);
 		String compressed = (String) properties.get(IRepository.PROP_COMPRESSED);
-		assertTrue("Ensure timestamp value is not null", compressed != null);
-		assertEquals("Ensure correct timestamp value", "false", compressed);
+		assertNotNull("2.4", compressed);
+		assertFalse("2.5", Boolean.parseBoolean(compressed));
 	}
 
 	public void testCompressedPersistence() {
@@ -808,9 +837,9 @@ public class CompositeArtifactRepositoryTest extends AbstractProvisioningTest {
 	public void testNonLocalRepo() {
 		try {
 			URI location = new URI("memory:/in/memory");
-			URI childOne = new URI("memory:/one/child");
-			URI childTwo = new URI("memory:/two/child");
-			URI childThree = new URI("memory:/three/child");
+			URI childOne = new URI("memory:/in/memory/one");
+			URI childTwo = new URI("memory:/in/memory/two");
+			URI childThree = new URI("memory:/in/memory/three");
 			CompositeArtifactRepository repository = new CompositeArtifactRepository(location, "in memory test", null);
 			repository.addChild(childOne);
 			repository.addChild(childTwo);
@@ -818,6 +847,12 @@ public class CompositeArtifactRepositoryTest extends AbstractProvisioningTest {
 			assertEquals("1.0", 3, repository.getChildren().size());
 			repository.removeChild(childTwo);
 			assertEquals("1.1", 2, repository.getChildren().size());
+			// add a child which already exists... should do nothing
+			repository.addChild(childOne);
+			assertEquals("1.2", 2, repository.getChildren().size());
+			// add the same child but with a relative URI. again it should do nothing
+			repository.addChild(new URI("one"));
+			assertEquals("1.3", 2, repository.getChildren().size());
 		} catch (URISyntaxException e) {
 			fail("99.0", e);
 		}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/CompositeMetadataRepositoryTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/CompositeMetadataRepositoryTest.java
index 4638539..f2e6d3a 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/CompositeMetadataRepositoryTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/CompositeMetadataRepositoryTest.java
@@ -161,7 +161,7 @@ public class CompositeMetadataRepositoryTest extends AbstractProvisioningTest {
 		try {
 			repo = manager.createRepository(repoLocation.toURI(), "TestRepo", IMetadataRepositoryManager.TYPE_COMPOSITE_REPOSITORY, null);
 		} catch (ProvisionException e) {
-			fail("Cannot create repository: ", e);;
+			fail("Cannot create repository: ", e);
 		}
 		Map properties = repo.getProperties();
 		assertTrue("1.0", !properties.containsKey(TEST_KEY));
@@ -310,14 +310,14 @@ public class CompositeMetadataRepositoryTest extends AbstractProvisioningTest {
 		assertEquals("Verifying repository's status is OK", Status.OK_STATUS, (new CompositeMetadataRepositoryFactory()).validate(repoLocation.toURI(), null));
 	}
 
-	public void testLoadingRepository() {
-		File knownGoodRepoLocation = getTestData("1", "/testData/metadataRepo/composite/Good");
+	public void testLoadingRepositoryRemote() {
+		File knownGoodRepoLocation = getTestData("0.1", "/testData/metadataRepo/composite/good.remote");
 
 		CompositeMetadataRepository compRepo = null;
 		try {
 			compRepo = (CompositeMetadataRepository) getMetadataRepositoryManager().loadRepository(knownGoodRepoLocation.toURI(), null);
 		} catch (ProvisionException e) {
-			fail("Error Loading repository", e);
+			fail("0.99", e);
 		}
 
 		List children = compRepo.getChildren();
@@ -325,24 +325,56 @@ public class CompositeMetadataRepositoryTest extends AbstractProvisioningTest {
 		try {
 			//ensure children are correct
 			URI child1 = URIUtil.fromString("http://www.eclipse.org/foo");
-			assertTrue("Ensure child 'http://www.eclipse.org/foo' exists", children.contains(child1));
+			assertTrue("1.0", children.contains(child1));
 			URI child2 = URIUtil.fromString("http://www.eclipse.org/bar");
-			assertTrue("Ensure child 'http://www.eclipse.org/foo' exists", children.contains(child2));
-			assertEquals("Ensure correct number of children", 2, children.size());
+			assertTrue("1.1", children.contains(child2));
+			assertEquals("1.2", 2, children.size());
 		} catch (URISyntaxException e) {
-			fail("Error creating URIs for verifiaction", e);
+			fail("1.99", e);
 		}
 
 		//ensure correct properties
-		assertEquals("Ensure correct name", "metadata name", compRepo.getName());
+		assertEquals("2.0", "metadata name", compRepo.getName());
 		Map properties = compRepo.getProperties();
-		assertEquals("Ensure correct number of properties", 2, properties.size());
+		assertEquals("2.1", 2, properties.size());
 		String timestamp = (String) properties.get(IRepository.PROP_TIMESTAMP);
-		assertTrue("Ensure timestamp value is not null", timestamp != null);
-		assertEquals("Ensure correct timestamp value", "1226685461796", timestamp);
+		assertNotNull("2.2", timestamp);
+		assertEquals("2.3", "1234", timestamp);
 		String compressed = (String) properties.get(IRepository.PROP_COMPRESSED);
-		assertTrue("Ensure timestamp value is not null", compressed != null);
-		assertEquals("Ensure correct timestamp value", "false", compressed);
+		assertNotNull("2.4", compressed);
+		assertFalse("2.5", Boolean.parseBoolean(compressed));
+	}
+
+	public void testLoadingRepositoryLocal() {
+		File testData = getTestData("0.5", "/testData/metadataRepo/composite/good.local");
+		copy("0.6", testData, repoLocation);
+
+		CompositeMetadataRepository compRepo = null;
+		try {
+			compRepo = (CompositeMetadataRepository) getMetadataRepositoryManager().loadRepository(repoLocation.toURI(), null);
+		} catch (ProvisionException e) {
+			fail("0.9", e);
+		}
+
+		List children = compRepo.getChildren();
+
+		//ensure children are correct
+		URI child1 = URIUtil.append(compRepo.getLocation(), "one");
+		assertTrue("1.0", children.contains(child1));
+		URI child2 = URIUtil.append(compRepo.getLocation(), "two");
+		assertTrue("1.1", children.contains(child2));
+		assertEquals("1.2", 2, children.size());
+
+		//ensure correct properties
+		assertEquals("2.0", "metadata name", compRepo.getName());
+		Map properties = compRepo.getProperties();
+		assertEquals("2.1", 2, properties.size());
+		String timestamp = (String) properties.get(IRepository.PROP_TIMESTAMP);
+		assertNotNull("2.2", timestamp);
+		assertEquals("2.3", "1234", timestamp);
+		String compressed = (String) properties.get(IRepository.PROP_COMPRESSED);
+		assertNotNull("2.4", compressed);
+		assertFalse("2.5", Boolean.parseBoolean(compressed));
 	}
 
 	public void testCompressedPersistence() {
@@ -367,14 +399,16 @@ public class CompositeMetadataRepositoryTest extends AbstractProvisioningTest {
 	}
 
 	public void testMissingRequireattributeWhileParsing() {
-		File badCompositeContent = getTestData("1", "/testData/metadataRepo/composite/Bad/missingRequiredAttribute");
+		File badCompositeContent = getTestData("0.1", "/testData/metadataRepo/composite/Bad/missingRequiredAttribute");
+		copy("0.2", badCompositeContent, repoLocation);
+
 		CompositeMetadataRepository compRepo = null;
 		try {
-			compRepo = (CompositeMetadataRepository) getMetadataRepositoryManager().loadRepository(badCompositeContent.toURI(), null);
+			compRepo = (CompositeMetadataRepository) getMetadataRepositoryManager().loadRepository(repoLocation.toURI(), null);
 		} catch (ProvisionException e) {
-			fail("Error loading repository", e);
+			fail("1.99", e);
 		}
-		assertEquals("Repository should only have 1 child", 1, compRepo.getChildren().size());
+		assertEquals("2.0", 1, compRepo.getChildren().size());
 	}
 
 	public void testEnabledAndSystemValues() {
@@ -546,13 +580,15 @@ public class CompositeMetadataRepositoryTest extends AbstractProvisioningTest {
 
 	/*
 	 * Ensure that we can create a non-local composite repository.
+	 * Note that we had to change this test method when we changed the 
+	 * behaviour of the composite repos to aggressively load the children.
 	 */
 	public void testNonLocalRepo() {
 		try {
 			URI location = new URI("memory:/in/memory");
-			URI childOne = new URI("memory:/one/child");
-			URI childTwo = new URI("memory:/two/child");
-			URI childThree = new URI("memory:/three/child");
+			URI childOne = new URI("memory:/in/memory/one");
+			URI childTwo = new URI("memory:/in/memory/two");
+			URI childThree = new URI("memory:/in/memory/three");
 			CompositeMetadataRepository repository = new CompositeMetadataRepository(location, "in memory test", null);
 			repository.addChild(childOne);
 			repository.addChild(childTwo);
@@ -560,6 +596,12 @@ public class CompositeMetadataRepositoryTest extends AbstractProvisioningTest {
 			assertEquals("1.0", 3, repository.getChildren().size());
 			repository.removeChild(childTwo);
 			assertEquals("1.1", 2, repository.getChildren().size());
+			// add a child which already exists... should do nothing
+			repository.addChild(childOne);
+			assertEquals("1.2", 2, repository.getChildren().size());
+			// add the same child but with a relative URI. again it should do nothing
+			repository.addChild(new URI("one"));
+			assertEquals("1.3", 2, repository.getChildren().size());
 		} catch (URISyntaxException e) {
 			fail("99.0", e);
 		}
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/Bad/missingRequiredAttribute/compositeArtifacts.xml b/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/Bad/missingRequiredAttribute/compositeArtifacts.xml
index a128d6e..af008b2 100644
--- a/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/Bad/missingRequiredAttribute/compositeArtifacts.xml
+++ b/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/Bad/missingRequiredAttribute/compositeArtifacts.xml
@@ -1,14 +1,11 @@
 <?xml version='1.0' encoding='UTF-8'?>
-<?artifactRepository class='org.eclipse.equinox.internal.provisional.p2.core.repository.ICompositeRepository' version='1.0.0'?>
-<repository name='artifact name' type='org.eclipse.equinox.internal.p2.artifact.repository.CompositeArtifactRepository' version='1'>
+<?compositeArtifactRepository version='1.0.0'?>
+<repository name='artifact name' type='org.eclipse.equinox.internal.p2.artifact.repository.CompositeArtifactRepository' version='1.0.0'>
   <properties size='2'>
     <property name='p2.compressed' value='false'/>
-    <property name='p2.timestamp' value='1226685461796'/>
+    <property name='p2.timestamp' value='1237472710130'/>
   </properties>
-  <UNRECOGNIZEDTAG>
-  </UNRECOGNIZEDTAG>
-  <children size='2'>
-    <child loaction='http://www.eclipse.org/foo'/>
+  <children size='1'>
     <child location='http://www.eclipse.org/bar'/>
   </children>
 </repository>
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/Good/compositeArtifacts.xml b/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/Good/compositeArtifacts.xml
deleted file mode 100644
index 6bddb75..0000000
--- a/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/Good/compositeArtifacts.xml
+++ /dev/null
@@ -1,12 +0,0 @@
-<?xml version='1.0' encoding='UTF-8'?>
-<?artifactRepository class='org.eclipse.equinox.internal.provisional.p2.core.repository.ICompositeRepository' version='1.0.0'?>
-<repository name='artifact name' type='org.eclipse.equinox.internal.p2.artifact.repository.CompositeArtifactRepository' version='1'>
-  <properties size='2'>
-    <property name='p2.compressed' value='false'/>
-    <property name='p2.timestamp' value='1226685461796'/>
-  </properties>
-  <children size='2'>
-    <child location='http://www.eclipse.org/foo'/>
-    <child location='http://www.eclipse.org/bar'/>
-  </children>
-</repository>
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/good.local/compositeArtifacts.xml b/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/good.local/compositeArtifacts.xml
new file mode 100644
index 0000000..26105ad
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/good.local/compositeArtifacts.xml
@@ -0,0 +1,12 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<?compositeArtifactRepository version='1.0.0'?>
+<repository name='artifact name' type='org.eclipse.equinox.internal.p2.artifact.repository.CompositeArtifactRepository' version='1.0.0'>
+  <properties size='2'>
+    <property name='p2.compressed' value='false'/>
+    <property name='p2.timestamp' value='1234'/>
+  </properties>
+  <children size='2'>
+    <child location='one'/>
+    <child location='two'/>
+  </children>
+</repository>
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/good.local/one/artifacts.xml b/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/good.local/one/artifacts.xml
new file mode 100644
index 0000000..19e55d7
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/good.local/one/artifacts.xml
@@ -0,0 +1,29 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<?artifactRepository class='org.eclipse.equinox.internal.p2.artifact.repository.simple.SimpleArtifactRepository' version='1.0.0'?>
+<repository name='Good Test Repository' type='org.eclipse.equinox.p2.artifact.repository.simpleRepository' version='1' description='Good test repository description'>
+  <properties size='3'>
+    <property name='p2.compressed' value='false'/>
+    <property name='p2.timestamp' value='1218734853468'/>
+    <property name='p2.system' value='false'/>
+  </properties>
+  <mappings size='3'>
+    <rule filter='(&amp; (classifier=osgi.bundle))' output='${repoUrl}/plugins/${id}_${version}.jar'/>
+    <rule filter='(&amp; (classifier=binary))' output='${repoUrl}/binary/${id}_${version}'/>
+    <rule filter='(&amp; (classifier=org.eclipse.update.feature))' output='${repoUrl}/features/${id}_${version}.jar'/>
+  </mappings>
+  <artifacts size='2'>
+    <artifact classifier='osgi.bundle' id='aaPlugin' version='1.0.0'>
+      <properties size='3'>
+        <property name='artifact.size' value='469'/>
+        <property name='download.size' value='469'/>
+        <property name='download.contentType' value='application/zip'/>
+      </properties>
+    </artifact>
+    <artifact classifier='org.eclipse.update.feature' id='aaFeature' version='1.0.0'>
+      <properties size='2'>
+        <property name='artifact.size' value='670'/>
+        <property name='download.size' value='670'/>
+      </properties>
+    </artifact>
+  </artifacts>
+</repository>
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/good.local/one/features/aaFeature_1.0.0.jar b/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/good.local/one/features/aaFeature_1.0.0.jar
new file mode 100644
index 0000000..f800a9a
Binary files /dev/null and b/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/good.local/one/features/aaFeature_1.0.0.jar differ
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/good.local/one/plugins/aaPlugin_1.0.0.jar b/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/good.local/one/plugins/aaPlugin_1.0.0.jar
new file mode 100644
index 0000000..65ff62b
Binary files /dev/null and b/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/good.local/one/plugins/aaPlugin_1.0.0.jar differ
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/good.local/one/readme.txt b/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/good.local/one/readme.txt
new file mode 100644
index 0000000..6fcc19b
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/good.local/one/readme.txt
@@ -0,0 +1,2 @@
+This is a very simple artifact repository containing a single group IU (a feature), and
+a single bundle IU. This repository is used by ArtifactRepositoryManagerTest
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/good.local/two/artifacts.xml b/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/good.local/two/artifacts.xml
new file mode 100644
index 0000000..6c73323
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/good.local/two/artifacts.xml
@@ -0,0 +1,28 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<?artifactRepository class='org.eclipse.equinox.internal.p2.artifact.repository.simple.SimpleArtifactRepository' version='1.0.0'?>
+<repository name='file:/C:/1target/provmiddle/aaTestSite/ - artifacts' type='org.eclipse.equinox.p2.artifact.repository.simpleRepository' version='1'>
+  <properties size='2'>
+    <property name='p2.compressed' value='false'/>
+    <property name='p2.timestamp' value='1218734853468'/>
+  </properties>
+  <mappings size='3'>
+    <rule filter='(&amp; (classifier=osgi.bundle))' output='${repoUrl}/plugins/${id}_${version}.jar'/>
+    <rule filter='(&amp; (classifier=binary))' output='${repoUrl}/binary/${id}_${version}'/>
+    <rule filter='(&amp; (classifier=org.eclipse.update.feature))' output='${repoUrl}/features/${id}_${version}.jar'/>
+  </mappings>
+  <artifacts size='2'>
+    <artifact classifier='osgi.bundle' id='aaPlugin' version='1.0.0'>
+      <properties size='3'>
+        <property name='artifact.size' value='469'/>
+        <property name='download.size' value='469'/>
+        <property name='download.contentType' value='application/zip'/>
+      </properties>
+    </artifact>
+    <artifact classifier='org.eclipse.update.feature' id='aaFeature' version='1.0.0'>
+      <properties size='2'>
+        <property name='artifact.size' value='670'/>
+        <property name='download.size' value='670'/>
+      </properties>
+    </artifact>
+  </artifacts>
+</repository>
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/good.local/two/features/aaFeature_1.0.0.jar b/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/good.local/two/features/aaFeature_1.0.0.jar
new file mode 100644
index 0000000..f800a9a
Binary files /dev/null and b/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/good.local/two/features/aaFeature_1.0.0.jar differ
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/good.local/two/plugins/aaPlugin_1.0.0.jar b/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/good.local/two/plugins/aaPlugin_1.0.0.jar
new file mode 100644
index 0000000..65ff62b
Binary files /dev/null and b/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/good.local/two/plugins/aaPlugin_1.0.0.jar differ
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/good.local/two/readme.txt b/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/good.local/two/readme.txt
new file mode 100644
index 0000000..6fcc19b
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/good.local/two/readme.txt
@@ -0,0 +1,2 @@
+This is a very simple artifact repository containing a single group IU (a feature), and
+a single bundle IU. This repository is used by ArtifactRepositoryManagerTest
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/good.remote/compositeArtifacts.xml b/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/good.remote/compositeArtifacts.xml
new file mode 100644
index 0000000..aabbcfe
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests/testData/artifactRepo/composite/good.remote/compositeArtifacts.xml
@@ -0,0 +1,12 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<?compositeArtifactRepository version='1.0.0'?>
+<repository name='artifact name' type='org.eclipse.equinox.internal.p2.artifact.repository.CompositeArtifactRepository' version='1.0.0'>
+  <properties size='2'>
+    <property name='p2.compressed' value='false'/>
+    <property name='p2.timestamp' value='1234'/>
+  </properties>
+  <children size='2'>
+    <child location='http://www.eclipse.org/foo'/>
+    <child location='http://www.eclipse.org/bar'/>
+  </children>
+</repository>
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/metadataRepo/composite/Good/compositeContent.xml b/bundles/org.eclipse.equinox.p2.tests/testData/metadataRepo/composite/Good/compositeContent.xml
deleted file mode 100644
index 2766c69..0000000
--- a/bundles/org.eclipse.equinox.p2.tests/testData/metadataRepo/composite/Good/compositeContent.xml
+++ /dev/null
@@ -1,12 +0,0 @@
-<?xml version='1.0' encoding='UTF-8'?>
-<?artifactRepository class='org.eclipse.equinox.internal.provisional.p2.core.repository.ICompositeRepository' version='1.0.0'?>
-<repository name='metadata name' type='org.eclipse.equinox.internal.p2.metadata.repository.CompositeMetadataRepository' version='1'>
-  <properties size='2'>
-    <property name='p2.compressed' value='false'/>
-    <property name='p2.timestamp' value='1226685461796'/>
-  </properties>
-  <children size='2'>
-    <child location='http://www.eclipse.org/foo'/>
-    <child location='http://www.eclipse.org/bar'/>
-  </children>
-</repository>
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/metadataRepo/composite/good.local/compositeContent.xml b/bundles/org.eclipse.equinox.p2.tests/testData/metadataRepo/composite/good.local/compositeContent.xml
new file mode 100644
index 0000000..af4be35
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests/testData/metadataRepo/composite/good.local/compositeContent.xml
@@ -0,0 +1,12 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<?compositeMetadataRepository version='1.0.0'?>
+<repository name='metadata name' type='org.eclipse.equinox.internal.p2.metadata.repository.CompositeMetadataRepository' version='1.0.0'>
+  <properties size='2'>
+    <property name='p2.compressed' value='false'/>
+    <property name='p2.timestamp' value='1234'/>
+  </properties>
+  <children size='2'>
+    <child location='one'/>
+    <child location='two'/>
+  </children>
+</repository>
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/metadataRepo/composite/good.local/one/content.xml b/bundles/org.eclipse.equinox.p2.tests/testData/metadataRepo/composite/good.local/one/content.xml
new file mode 100644
index 0000000..41f172f
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests/testData/metadataRepo/composite/good.local/one/content.xml
@@ -0,0 +1,128 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<?metadataRepository class='org.eclipse.equinox.internal.p2.metadata.repository.LocalMetadataRepository' version='1.0.0'?>
+<repository name='Good Test Repository' type='org.eclipse.equinox.internal.p2.metadata.repository.LocalMetadataRepository' version='1' description='Good test repository description'>
+  <properties size='3'>
+    <property name='p2.system' value='true'/>
+    <property name='p2.timestamp' value='1221680367875'/>
+    <property name='site.checksum' value='2404093275'/>
+  </properties>
+  <units size='5'>
+    <unit id='test.feature.feature.jar' version='1.0.0'>
+      <provides size='3'>
+        <provided namespace='org.eclipse.equinox.p2.iu' name='test.feature.feature.jar' version='1.0.0'/>
+        <provided namespace='org.eclipse.equinox.p2.eclipse.type' name='feature' version='1.0.0'/>
+        <provided namespace='org.eclipse.update.feature' name='test.feature' version='1.0.0'/>
+      </provides>
+      <filter>
+        (org.eclipse.update.install.features=true)
+      </filter>
+      <artifacts size='1'>
+        <artifact classifier='org.eclipse.update.feature' id='test.feature' version='1.0.0'/>
+      </artifacts>
+      <touchpoint id='org.eclipse.equinox.p2.osgi' version='1.0.0'/>
+      <touchpointData size='1'>
+        <instructions size='1'>
+          <instruction key='zipped'>
+            true
+          </instruction>
+        </instructions>
+      </touchpointData>
+      <licenses size='1'>
+        <license url='http://www.example.com/license'>
+          [Enter License Description here.]
+        </license>
+      </licenses>
+      <copyright url='http://www.example.com/copyright'>
+        [Enter Copyright Description here.]
+      </copyright>
+    </unit>
+    <unit id='test.bundle' version='1.0.0' singleton='false'>
+      <update id='test.bundle' range='[0.0.0,1.0.0)' severity='0'/>
+      <properties size='1'>
+        <property name='org.eclipse.equinox.p2.partial.iu' value='true'/>
+      </properties>
+      <provides size='3'>
+        <provided namespace='org.eclipse.equinox.p2.iu' name='test.bundle' version='1.0.0'/>
+        <provided namespace='osgi.bundle' name='test.bundle' version='1.0.0'/>
+        <provided namespace='org.eclipse.equinox.p2.eclipse.type' name='bundle' version='1.0.0'/>
+      </provides>
+      <artifacts size='1'>
+        <artifact classifier='osgi.bundle' id='test.bundle' version='1.0.0'/>
+      </artifacts>
+      <touchpoint id='org.eclipse.equinox.p2.osgi' version='1.0.0'/>
+      <touchpointData size='1'>
+        <instructions size='1'>
+          <instruction key='manifest'>
+          </instruction>
+        </instructions>
+      </touchpointData>
+    </unit>
+    <unit id='test.fragment' version='1.0.0' singleton='false'>
+      <update id='test.fragment' range='[0.0.0,1.0.0)' severity='0'/>
+      <properties size='1'>
+        <property name='org.eclipse.equinox.p2.partial.iu' value='true'/>
+      </properties>
+      <provides size='3'>
+        <provided namespace='org.eclipse.equinox.p2.iu' name='test.fragment' version='1.0.0'/>
+        <provided namespace='osgi.bundle' name='test.fragment' version='1.0.0'/>
+        <provided namespace='org.eclipse.equinox.p2.eclipse.type' name='bundle' version='1.0.0'/>
+      </provides>
+      <artifacts size='1'>
+        <artifact classifier='osgi.bundle' id='test.fragment' version='1.0.0'/>
+      </artifacts>
+      <touchpoint id='org.eclipse.equinox.p2.osgi' version='1.0.0'/>
+      <touchpointData size='1'>
+        <instructions size='1'>
+          <instruction key='manifest'>
+          </instruction>
+        </instructions>
+      </touchpointData>
+    </unit>
+    <unit id='test.feature.feature.group' version='1.0.0' singleton='false'>
+      <update id='test.feature.feature.group' range='[0.0.0,1.0.0)' severity='0'/>
+      <properties size='5'>
+        <property name='org.eclipse.equinox.p2.name' value='%featurename'/>
+        <property name='org.eclipse.equinox.p2.description' value='[Enter Feature Description here.]'/>
+        <property name='org.eclipse.equinox.p2.description.url' value='http://www.example.com/description'/>
+        <property name='org.eclipse.equinox.p2.type.group' value='true'/>
+        <property name='df_LT.featurename' value='j the feature'/>
+      </properties>
+      <provides size='2'>
+        <provided namespace='org.eclipse.equinox.p2.iu' name='test.feature.feature.group' version='1.0.0'/>
+        <provided namespace='org.eclipse.equinox.p2.localization' name='df_LT' version='1.0.0'/>
+      </provides>
+      <requires size='3'>
+        <required namespace='org.eclipse.equinox.p2.iu' name='test.bundle' range='[1.0.0,1.0.0]'/>
+        <required namespace='org.eclipse.equinox.p2.iu' name='test.fragment' range='[1.0.0,1.0.0]'/>
+        <required namespace='org.eclipse.equinox.p2.iu' name='test.feature.feature.jar' range='[1.0.0,1.0.0]'>
+          <filter>
+            (org.eclipse.update.install.features=true)
+          </filter>
+        </required>
+      </requires>
+      <touchpoint id='null' version='0.0.0'/>
+      <licenses size='1'>
+        <license url='http://www.example.com/license'>
+          [Enter License Description here.]
+        </license>
+      </licenses>
+      <copyright url='http://www.example.com/copyright'>
+        [Enter Copyright Description here.]
+      </copyright>
+    </unit>
+    <unit id='Default' version='0.0.0'>
+      <properties size='3'>
+        <property name='org.eclipse.equinox.p2.name' value='Uncategorized'/>
+        <property name='org.eclipse.equinox.p2.description' value='Default category for otherwise uncategorized features'/>
+        <property name='org.eclipse.equinox.p2.type.category' value='true'/>
+      </properties>
+      <provides size='1'>
+        <provided namespace='org.eclipse.equinox.p2.iu' name='Default' version='0.0.0'/>
+      </provides>
+      <requires size='1'>
+        <required namespace='org.eclipse.equinox.p2.iu' name='test.feature.feature.group' range='[1.0.0,1.0.0]'/>
+      </requires>
+      <touchpoint id='null' version='0.0.0'/>
+    </unit>
+  </units>
+</repository>
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/metadataRepo/composite/good.local/two/content.xml b/bundles/org.eclipse.equinox.p2.tests/testData/metadataRepo/composite/good.local/two/content.xml
new file mode 100644
index 0000000..fd315db
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests/testData/metadataRepo/composite/good.local/two/content.xml
@@ -0,0 +1,128 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<?metadataRepository class='org.eclipse.equinox.internal.p2.metadata.repository.LocalMetadataRepository' version='1.0.0'?>
+<repository name='update site: file:/C:/1target/provmiddle/org.eclipse.equinox.p2.tests/testData/updatesite/site' type='org.eclipse.equinox.internal.p2.metadata.repository.LocalMetadataRepository' version='1'>
+  <properties size='3'>
+    <property name='p2.system' value='true'/>
+    <property name='p2.timestamp' value='1221680367875'/>
+    <property name='site.checksum' value='2404093275'/>
+  </properties>
+  <units size='5'>
+    <unit id='test.feature.feature.jar' version='1.0.0'>
+      <provides size='3'>
+        <provided namespace='org.eclipse.equinox.p2.iu' name='test.feature.feature.jar' version='1.0.0'/>
+        <provided namespace='org.eclipse.equinox.p2.eclipse.type' name='feature' version='1.0.0'/>
+        <provided namespace='org.eclipse.update.feature' name='test.feature' version='1.0.0'/>
+      </provides>
+      <filter>
+        (org.eclipse.update.install.features=true)
+      </filter>
+      <artifacts size='1'>
+        <artifact classifier='org.eclipse.update.feature' id='test.feature' version='1.0.0'/>
+      </artifacts>
+      <touchpoint id='org.eclipse.equinox.p2.osgi' version='1.0.0'/>
+      <touchpointData size='1'>
+        <instructions size='1'>
+          <instruction key='zipped'>
+            true
+          </instruction>
+        </instructions>
+      </touchpointData>
+      <licenses size='1'>
+        <license url='http://www.example.com/license'>
+          [Enter License Description here.]
+        </license>
+      </licenses>
+      <copyright url='http://www.example.com/copyright'>
+        [Enter Copyright Description here.]
+      </copyright>
+    </unit>
+    <unit id='test.bundle' version='1.0.0' singleton='false'>
+      <update id='test.bundle' range='[0.0.0,1.0.0)' severity='0'/>
+      <properties size='1'>
+        <property name='org.eclipse.equinox.p2.partial.iu' value='true'/>
+      </properties>
+      <provides size='3'>
+        <provided namespace='org.eclipse.equinox.p2.iu' name='test.bundle' version='1.0.0'/>
+        <provided namespace='osgi.bundle' name='test.bundle' version='1.0.0'/>
+        <provided namespace='org.eclipse.equinox.p2.eclipse.type' name='bundle' version='1.0.0'/>
+      </provides>
+      <artifacts size='1'>
+        <artifact classifier='osgi.bundle' id='test.bundle' version='1.0.0'/>
+      </artifacts>
+      <touchpoint id='org.eclipse.equinox.p2.osgi' version='1.0.0'/>
+      <touchpointData size='1'>
+        <instructions size='1'>
+          <instruction key='manifest'>
+          </instruction>
+        </instructions>
+      </touchpointData>
+    </unit>
+    <unit id='test.fragment' version='1.0.0' singleton='false'>
+      <update id='test.fragment' range='[0.0.0,1.0.0)' severity='0'/>
+      <properties size='1'>
+        <property name='org.eclipse.equinox.p2.partial.iu' value='true'/>
+      </properties>
+      <provides size='3'>
+        <provided namespace='org.eclipse.equinox.p2.iu' name='test.fragment' version='1.0.0'/>
+        <provided namespace='osgi.bundle' name='test.fragment' version='1.0.0'/>
+        <provided namespace='org.eclipse.equinox.p2.eclipse.type' name='bundle' version='1.0.0'/>
+      </provides>
+      <artifacts size='1'>
+        <artifact classifier='osgi.bundle' id='test.fragment' version='1.0.0'/>
+      </artifacts>
+      <touchpoint id='org.eclipse.equinox.p2.osgi' version='1.0.0'/>
+      <touchpointData size='1'>
+        <instructions size='1'>
+          <instruction key='manifest'>
+          </instruction>
+        </instructions>
+      </touchpointData>
+    </unit>
+    <unit id='test.feature.feature.group' version='1.0.0' singleton='false'>
+      <update id='test.feature.feature.group' range='[0.0.0,1.0.0)' severity='0'/>
+      <properties size='5'>
+        <property name='org.eclipse.equinox.p2.name' value='%featurename'/>
+        <property name='org.eclipse.equinox.p2.description' value='[Enter Feature Description here.]'/>
+        <property name='org.eclipse.equinox.p2.description.url' value='http://www.example.com/description'/>
+        <property name='org.eclipse.equinox.p2.type.group' value='true'/>
+        <property name='df_LT.featurename' value='j the feature'/>
+      </properties>
+      <provides size='2'>
+        <provided namespace='org.eclipse.equinox.p2.iu' name='test.feature.feature.group' version='1.0.0'/>
+        <provided namespace='org.eclipse.equinox.p2.localization' name='df_LT' version='1.0.0'/>
+      </provides>
+      <requires size='3'>
+        <required namespace='org.eclipse.equinox.p2.iu' name='test.bundle' range='[1.0.0,1.0.0]'/>
+        <required namespace='org.eclipse.equinox.p2.iu' name='test.fragment' range='[1.0.0,1.0.0]'/>
+        <required namespace='org.eclipse.equinox.p2.iu' name='test.feature.feature.jar' range='[1.0.0,1.0.0]'>
+          <filter>
+            (org.eclipse.update.install.features=true)
+          </filter>
+        </required>
+      </requires>
+      <touchpoint id='null' version='0.0.0'/>
+      <licenses size='1'>
+        <license url='http://www.example.com/license'>
+          [Enter License Description here.]
+        </license>
+      </licenses>
+      <copyright url='http://www.example.com/copyright'>
+        [Enter Copyright Description here.]
+      </copyright>
+    </unit>
+    <unit id='Default' version='0.0.0'>
+      <properties size='3'>
+        <property name='org.eclipse.equinox.p2.name' value='Uncategorized'/>
+        <property name='org.eclipse.equinox.p2.description' value='Default category for otherwise uncategorized features'/>
+        <property name='org.eclipse.equinox.p2.type.category' value='true'/>
+      </properties>
+      <provides size='1'>
+        <provided namespace='org.eclipse.equinox.p2.iu' name='Default' version='0.0.0'/>
+      </provides>
+      <requires size='1'>
+        <required namespace='org.eclipse.equinox.p2.iu' name='test.feature.feature.group' range='[1.0.0,1.0.0]'/>
+      </requires>
+      <touchpoint id='null' version='0.0.0'/>
+    </unit>
+  </units>
+</repository>
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/metadataRepo/composite/good.remote/compositeContent.xml b/bundles/org.eclipse.equinox.p2.tests/testData/metadataRepo/composite/good.remote/compositeContent.xml
new file mode 100644
index 0000000..a88ee35
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests/testData/metadataRepo/composite/good.remote/compositeContent.xml
@@ -0,0 +1,12 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<?compositeMetadataRepository version='1.0.0'?>
+<repository name='metadata name' type='org.eclipse.equinox.internal.p2.metadata.repository.CompositeMetadataRepository' version='1.0.0'>
+  <properties size='2'>
+    <property name='p2.compressed' value='false'/>
+    <property name='p2.timestamp' value='1234'/>
+  </properties>
+  <children size='2'>
+    <child location='http://www.eclipse.org/foo'/>
+    <child location='http://www.eclipse.org/bar'/>
+  </children>
+</repository>

commit 69061f14906bedb02efab08f73b988f087b3f344
Author: Andrew Niefer <aniefer>
Date:   Mon Dec 3 21:32:19 2007 +0000

    bug 211650 - integrate p2 with pde.build

3	0	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java
47	2	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java
25	1	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
2	0	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/IGeneratorInfo.java
9	1	bundles/org.eclipse.equinox.p2.metadata.generator/src_ant/org/eclipse/equinox/p2/metadata/generator/ant/GeneratorTask.java
9	0	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/generator/TestGeneratorInfo.java
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java
index 3f951a5..d8bc22e 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java
@@ -198,6 +198,9 @@ public class EclipseGeneratorApplication implements IApplication {
 			if (args[i - 1].equalsIgnoreCase("-exe"))
 				provider.setExecutableLocation(arg);
 
+			if (args[i - 1].equalsIgnoreCase("-launcherConfig"))
+				provider.setLauncherConfig(arg);
+
 			if (args[i - 1].equalsIgnoreCase("-metadataRepository") || args[i - 1].equalsIgnoreCase("-mr"))
 				metadataLocation = arg;
 
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java
index fd15155..1732526 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java
@@ -22,6 +22,7 @@ import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.osgi.service.environment.EnvironmentInfo;
 import org.osgi.framework.*;
+import org.osgi.service.packageadmin.PackageAdmin;
 import org.osgi.util.tracker.ServiceTracker;
 
 public class EclipseInstallGeneratorInfoProvider implements IGeneratorInfo {
@@ -32,7 +33,9 @@ public class EclipseInstallGeneratorInfoProvider implements IGeneratorInfo {
 	private final static String filterLauncherName = "(" + FrameworkAdmin.SERVICE_PROP_KEY_LAUNCHER_NAME + "=Eclipse.exe)";
 	//String filterLauncherVersion = "(" + FrameworkAdmin.SERVICE_PROP_KEY_LAUNCHER_VERSION + "=" + props.getProperty("equinox.launcher.version") + ")";
 	private final static String frameworkAdminFillter = "(&" + FILTER_OBJECTCLASS + filterFwName + filterLauncherName + ")";
-	private static final String ORG_ECLIPSE_EQUINOX_SIMPLECONFIGURATOR = "org.eclipse.equinox.simpleconfigurator";
+	private static final String ORG_ECLIPSE_EQUINOX_SIMPLECONFIGURATOR = "org.eclipse.equinox.simpleconfigurator"; //$NON-NLS-1$
+	private static final String ORG_ECLIPSE_EQUINOX_SIMPLECONFIGURATOR_MANIPULATOR = "org.eclipse.equinox.simpleconfigurator.manipulator"; //$NON-NLS-1$
+	private static final String ORG_ECLIPSE_EQUINOX_FRAMEWORKADMIN_EQUINOX = "org.eclipse.equinox.frameworkadmin.equinox"; //$NON-NLS-1$
 
 	private static String os;
 	private boolean addDefaultIUs = true;
@@ -54,6 +57,8 @@ public class EclipseInstallGeneratorInfoProvider implements IGeneratorInfo {
 	private boolean publishArtifacts = false;
 	private String rootId;
 	private String rootVersion;
+	private String launcherConfig;
+
 	private URL siteLocation;
 
 	/**
@@ -152,6 +157,10 @@ public class EclipseInstallGeneratorInfoProvider implements IGeneratorInfo {
 	}
 
 	private void expandBundleLocations() {
+		if (bundleLocations == null) {
+			bundleLocations = new File[] {};
+			return;
+		}
 		ArrayList result = new ArrayList();
 		for (int i = 0; i < bundleLocations.length; i++) {
 			File location = bundleLocations[i];
@@ -228,7 +237,14 @@ public class EclipseInstallGeneratorInfoProvider implements IGeneratorInfo {
 		//		} catch (InterruptedException e) {
 		//			// ignore
 		//		}
-		return (FrameworkAdmin) frameworkAdminTracker.getService();
+
+		FrameworkAdmin admin = (FrameworkAdmin) frameworkAdminTracker.getService();
+		if (admin == null) {
+			startBundle(ORG_ECLIPSE_EQUINOX_FRAMEWORKADMIN_EQUINOX);
+			startBundle(ORG_ECLIPSE_EQUINOX_SIMPLECONFIGURATOR_MANIPULATOR);
+			admin = (FrameworkAdmin) frameworkAdminTracker.getService();
+		}
+		return admin;
 	}
 
 	private Collection getIUs(Set ius, String prefix) {
@@ -248,6 +264,10 @@ public class EclipseInstallGeneratorInfoProvider implements IGeneratorInfo {
 		return new File(executableLocation.getParentFile(), "jre"); //$NON-NLS-1$
 	}
 
+	public String getLauncherConfig() {
+		return launcherConfig;
+	}
+
 	public LauncherData getLauncherData() {
 		return manipulator == null ? null : manipulator.getLauncherData();
 	}
@@ -345,6 +365,10 @@ public class EclipseInstallGeneratorInfoProvider implements IGeneratorInfo {
 		flavor = value;
 	}
 
+	public void setLauncherConfig(String value) {
+		launcherConfig = value;
+	}
+
 	public void setMappingRules(String[][] value) {
 		mappingRules = value;
 	}
@@ -379,4 +403,25 @@ public class EclipseInstallGeneratorInfoProvider implements IGeneratorInfo {
 	public void setSiteLocation(URL location) {
 		this.siteLocation = location;
 	}
+
+	private boolean startBundle(String bundleId) {
+		PackageAdmin packageAdmin = (PackageAdmin) ServiceHelper.getService(Activator.getContext(), PackageAdmin.class.getName());
+		if (packageAdmin == null)
+			return false;
+
+		Bundle[] bundles = packageAdmin.getBundles(bundleId, null);
+		if (bundles != null && bundles.length > 0) {
+			for (int i = 0; i < bundles.length; i++) {
+				try {
+					if ((bundles[0].getState() & Bundle.INSTALLED) > 0) {
+						bundles[0].start();
+						return true;
+					}
+				} catch (BundleException e) {
+					// failed, try next bundle
+				}
+			}
+		}
+		return false;
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
index a35b659..ea167ee 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
@@ -29,9 +29,27 @@ public class Generator {
 
 	private static final String ORG_ECLIPSE_EQUINOX_SIMPLECONFIGURATOR = "org.eclipse.equinox.simpleconfigurator";
 	private static final String ORG_ECLIPSE_UPDATE_CONFIGURATOR = "org.eclipse.update.configurator";
+
 	//	private static String[][] defaultMappingRules = new String[][] { {"(& (namespace=eclipse) (classifier=feature))", "${repoUrl}/feature/${id}_${version}"}, {"(& (namespace=eclipse) (classifier=plugin))", "${repoUrl}/plugin/${id}_${version}"}, {"(& (namespace=eclipse) (classifier=native))", "${repoUrl}/native/${id}_${version}"}};
 
+	/**
+	 * Convert a list of tokens into an array. The list separator has to be
+	 * specified.
+	 */
+	public static String[] getArrayFromString(String list, String separator) {
+		if (list == null || list.trim().equals("")) //$NON-NLS-1$
+			return new String[0];
+		List result = new ArrayList();
+		for (StringTokenizer tokens = new StringTokenizer(list, separator); tokens.hasMoreTokens();) {
+			String token = tokens.nextToken().trim();
+			if (!token.equals("")) //$NON-NLS-1$
+				result.add(token);
+		}
+		return (String[]) result.toArray(new String[result.size()]);
+	}
+
 	private final IGeneratorInfo info;
+
 	private StateObjectFactory stateObjectFactory;
 
 	public Generator(IGeneratorInfo infoProvider) {
@@ -226,7 +244,7 @@ public class Generator {
 	 */
 	private boolean generateExecutableFeatureIUs(Set resultantIUs, IArtifactRepository destination) {
 		File parentDir = info.getFeaturesLocation();
-		if (!parentDir.exists())
+		if (parentDir == null || !parentDir.exists())
 			return false;
 		File[] featureDirs = parentDir.listFiles();
 		if (featureDirs == null)
@@ -348,6 +366,12 @@ public class Generator {
 		IArtifactDescriptor artifact = MetadataGeneratorHelper.createJREData(jreLocation, resultantIUs);
 		publishArtifact(artifact, new File[] {jreLocation}, destination, false);
 
+		if (info.getLauncherConfig() != null) {
+			String[] config = getArrayFromString(info.getLauncherConfig(), "_"); //$NON-NLS-1$
+			generateExecutableIUs(config[1], config[0], config[2], "1.0.0", executableLocation.getParentFile(), resultantIUs, destination); //$NON-NLS-1$
+			return;
+		}
+
 		//If the executable feature is present, use it to generate IUs for launchers
 		if (generateExecutableFeatureIUs(resultantIUs, destination) || executableLocation == null)
 			return;
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/IGeneratorInfo.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/IGeneratorInfo.java
index da1868f..142d5fb 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/IGeneratorInfo.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/IGeneratorInfo.java
@@ -42,6 +42,8 @@ public interface IGeneratorInfo {
 
 	public File getJRELocation();
 
+	public String getLauncherConfig();
+
 	public LauncherData getLauncherData();
 
 	public String[][] getMappingRules();
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src_ant/org/eclipse/equinox/p2/metadata/generator/ant/GeneratorTask.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src_ant/org/eclipse/equinox/p2/metadata/generator/ant/GeneratorTask.java
index 334de51..2e1739b 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src_ant/org/eclipse/equinox/p2/metadata/generator/ant/GeneratorTask.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src_ant/org/eclipse/equinox/p2/metadata/generator/ant/GeneratorTask.java
@@ -27,7 +27,7 @@ public class GeneratorTask extends Task {
 
 	URL metadataRepository, artifactRepository;
 	File source, inplace, updateSite, config;
-	String rootVersion, root, flavor, p2OS;
+	String rootVersion, root, flavor, p2OS, launcherConfig;
 	boolean publishArtifacts, publishArtifactRepository, append, noDefaultIUs;
 	File exe, base, features, bundles;
 
@@ -85,6 +85,10 @@ public class GeneratorTask extends Task {
 			result.add("-exe");
 			result.add(exe.getAbsolutePath());
 		}
+		if (launcherConfig != null) {
+			result.add("-launcherConfig"); //$NON-NLS-1$
+			result.add(launcherConfig);
+		}
 		if (features != null) {
 			result.add("-features");
 			result.add(features.getAbsolutePath());
@@ -152,6 +156,10 @@ public class GeneratorTask extends Task {
 		this.inplace = new File(value);
 	}
 
+	public void setLauncherConfig(String launcherConfig) {
+		this.launcherConfig = launcherConfig;
+	}
+
 	public void setMetadataRepository(String location) {
 		try {
 			metadataRepository = new URL(location);
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/generator/TestGeneratorInfo.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/generator/TestGeneratorInfo.java
index 6b91f46..57445bf 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/generator/TestGeneratorInfo.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/generator/TestGeneratorInfo.java
@@ -34,6 +34,7 @@ public class TestGeneratorInfo implements IGeneratorInfo {
 	private IMetadataRepository metadataRepo;
 	private String rootId;
 	private String rootVersion;
+	private String launcherConfig;
 	private URL siteLocation;
 
 	public TestGeneratorInfo(File baseLocation) {
@@ -113,6 +114,10 @@ public class TestGeneratorInfo implements IGeneratorInfo {
 		return siteLocation;
 	}
 
+	public String getLauncherConfig() {
+		return launcherConfig;
+	}
+
 	public boolean publishArtifactRepository() {
 		return false;
 	}
@@ -144,4 +149,8 @@ public class TestGeneratorInfo implements IGeneratorInfo {
 		this.siteLocation = location;
 	}
 
+	public void setLauncherConfig(String launcherConfig) {
+		this.launcherConfig = launcherConfig;
+	}
+
 }
commit 350e7a530fd663c2f1ca479640e21ae36341de32
Author: Andrew Niefer <aniefer>
Date:   Tue Feb 5 23:14:14 2008 +0000

    protect against NPEs - Bug 211650

12	6	bundles/org.eclipse.equinox.frameworkadmin/src/org/eclipse/equinox/frameworkadmin/BundleInfo.java
2	0	bundles/org.eclipse.equinox.frameworkadmin/src/org/eclipse/equinox/internal/frameworkadmin/utils/Utils.java
diff --git a/bundles/org.eclipse.equinox.frameworkadmin/src/org/eclipse/equinox/frameworkadmin/BundleInfo.java b/bundles/org.eclipse.equinox.frameworkadmin/src/org/eclipse/equinox/frameworkadmin/BundleInfo.java
index 493fabe..73d6d84 100644
--- a/bundles/org.eclipse.equinox.frameworkadmin/src/org/eclipse/equinox/frameworkadmin/BundleInfo.java
+++ b/bundles/org.eclipse.equinox.frameworkadmin/src/org/eclipse/equinox/frameworkadmin/BundleInfo.java
@@ -35,27 +35,32 @@ public class BundleInfo {
 	}
 
 	public BundleInfo(String location) {
-		this.location = location.trim();
+		if (location != null)
+			this.location = location.trim();
 	}
 
 	public BundleInfo(String location, boolean started) {
-		this.location = location.trim();
+		if (location != null)
+			this.location = location.trim();
 		this.markedAsStarted = started;
 	}
 
 	public BundleInfo(String location, int startLevel) {
-		this.location = location.trim();
+		if (location != null)
+			this.location = location.trim();
 		this.startLevel = startLevel;
 	}
 
 	public BundleInfo(String location, int startLevel, boolean started) {
-		this.location = location.trim();
+		if (location != null)
+			this.location = location.trim();
 		this.startLevel = startLevel;
 		this.markedAsStarted = started;
 	}
 
 	public BundleInfo(String location, int startLevel, boolean started, long bundleId) {
-		this.location = location.trim();
+		if (location != null)
+			this.location = location.trim();
 		this.startLevel = startLevel;
 		this.markedAsStarted = started;
 		this.bundleId = bundleId;
@@ -64,7 +69,8 @@ public class BundleInfo {
 	public BundleInfo(String symbolic, String version, String location, int startLevel, boolean started) {
 		this.symbolicName = symbolic;
 		this.version = version;
-		this.location = location.trim();
+		if (location != null)
+			this.location = location.trim();
 		this.markedAsStarted = started;
 		this.startLevel = startLevel;
 	}
diff --git a/bundles/org.eclipse.equinox.frameworkadmin/src/org/eclipse/equinox/internal/frameworkadmin/utils/Utils.java b/bundles/org.eclipse.equinox.frameworkadmin/src/org/eclipse/equinox/internal/frameworkadmin/utils/Utils.java
index 0f376e3..89edbfb 100644
--- a/bundles/org.eclipse.equinox.frameworkadmin/src/org/eclipse/equinox/internal/frameworkadmin/utils/Utils.java
+++ b/bundles/org.eclipse.equinox.frameworkadmin/src/org/eclipse/equinox/internal/frameworkadmin/utils/Utils.java
@@ -233,6 +233,8 @@ public class Utils {
 	}
 
 	public static Dictionary getOSGiManifest(String location) {
+		if (location == null)
+			return null;
 		if (location.startsWith(FILE_PROTOCOL) && !location.endsWith(".jar"))
 			return basicLoadManifest(new File(location.substring(FILE_PROTOCOL.length())));
 
commit fd209169f89f43c696e2e38bea3b85b4de2dc055
Author: Andrew Niefer <aniefer>
Date:   Tue Feb 5 23:15:11 2008 +0000

     Bug 211650 - integrate with pde.build - Generating Product IUs

2	1	bundles/org.eclipse.equinox.p2.metadata.generator/META-INF/MANIFEST.MF
53	7	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java
513	0	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/features/ProductFile.java
10	2	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java
56	7	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
2	0	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/IGeneratorInfo.java
98	121	bundles/org.eclipse.equinox.p2.metadata.generator/src_ant/org/eclipse/equinox/p2/metadata/generator/ant/GeneratorTask.java
6	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/generator/TestGeneratorInfo.java
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.metadata.generator/META-INF/MANIFEST.MF
index a6de19b..79bf92a 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/META-INF/MANIFEST.MF
@@ -7,7 +7,8 @@ Bundle-Localization: plugin
 Bundle-Version: 0.1.0.qualifier
 Require-Bundle: org.eclipse.equinox.p2.core,
  org.eclipse.osgi,
- org.eclipse.equinox.common
+ org.eclipse.equinox.common,
+ org.eclipse.equinox.p2.metadata
 Import-Package: javax.xml.parsers,
  org.eclipse.equinox.app;version="1.0.0",
  org.eclipse.equinox.frameworkadmin,
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java
index ec65bef..35ddc22 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java
@@ -49,6 +49,7 @@ public class EclipseGeneratorApplication implements IApplication {
 	private ServiceRegistration registrationDefaultMetadataManager;
 	private ProvisioningEventBus bus;
 	private ServiceRegistration registrationBus;
+	private Generator.GeneratorResult incrementalResult = null;
 	private String metadataLocation;
 	private String artifactLocation;
 	private String operation;
@@ -236,6 +237,9 @@ public class EclipseGeneratorApplication implements IApplication {
 			if (args[i - 1].equalsIgnoreCase("-flavor")) //$NON-NLS-1$
 				provider.setFlavor(arg);
 
+			if (args[i - 1].equalsIgnoreCase("-productFile")) //$NON-NLS-1$
+				provider.setProductFile(arg);
+
 			if (args[i - 1].equalsIgnoreCase("-features")) //$NON-NLS-1$
 				features = arg;
 
@@ -281,23 +285,37 @@ public class EclipseGeneratorApplication implements IApplication {
 	}
 
 	public Object run(String args[]) throws Exception {
+		EclipseInstallGeneratorInfoProvider provider = new EclipseInstallGeneratorInfoProvider();
+		processCommandLineArguments(args, provider);
+		Object result = run(provider);
+		if (result != IApplication.EXIT_OK)
+			for (int i = 0; i < args.length; i++)
+				System.out.println(args[i]);
+		return result;
+	}
+
+	public Object run(EclipseInstallGeneratorInfoProvider provider) throws Exception {
 		registerEventBus();
 		registerDefaultMetadataRepoManager();
 		registerDefaultArtifactRepoManager();
-		EclipseInstallGeneratorInfoProvider provider = new EclipseInstallGeneratorInfoProvider();
-		processCommandLineArguments(args, provider);
 		initialize(provider);
 
-		if (provider.getBaseLocation() == null) {
+		if (provider.getBaseLocation() == null && provider.getProductFile() == null) {
 			System.out.println(Messages.exception_baseLocationNotSpecified);
-			for (int i = 0; i < args.length; i++)
-				System.out.println(args[i]);
-			return IApplication.EXIT_OK;
+			return new Integer(-1);
 		}
 		System.out.println(NLS.bind(Messages.message_generatingMetadata, provider.getBaseLocation()));
 
 		long before = System.currentTimeMillis();
-		IStatus result = new Generator(provider).generate();
+
+		Generator generator = new Generator(provider);
+
+		if (incrementalResult != null)
+			generator.setIncrementalResult(incrementalResult);
+
+		IStatus result = generator.generate();
+
+		incrementalResult = null;
 		long after = System.currentTimeMillis();
 		if (result.isOK()) {
 			System.out.println(NLS.bind(Messages.message_generationCompleted, String.valueOf((after - before) / 1000)));
@@ -326,4 +344,32 @@ public class EclipseGeneratorApplication implements IApplication {
 		}
 	}
 
+	public void setBase(String base) {
+		this.base = base;
+	}
+
+	public void setArtifactLocation(String location) {
+		this.artifactLocation = location;
+	}
+
+	public void setBundles(String bundles) {
+		this.bundles = bundles;
+	}
+
+	public void setOperation(String operation, String argument) {
+		this.operation = operation;
+		this.argument = argument;
+	}
+
+	public void setFeatures(String features) {
+		this.features = features;
+	}
+
+	public void setMetadataLocation(String location) {
+		this.metadataLocation = location;
+	}
+
+	public void setIncrementalResult(Generator.GeneratorResult ius) {
+		this.incrementalResult = ius;
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/features/ProductFile.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/features/ProductFile.java
new file mode 100644
index 0000000..8db4c0f
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/features/ProductFile.java
@@ -0,0 +1,513 @@
+/*******************************************************************************
+ * Copyright (c) 2005, 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+
+package org.eclipse.equinox.internal.p2.metadata.generator.features;
+
+import java.io.*;
+import java.util.*;
+import javax.xml.parsers.SAXParser;
+import javax.xml.parsers.SAXParserFactory;
+import org.xml.sax.Attributes;
+import org.xml.sax.InputSource;
+import org.xml.sax.helpers.DefaultHandler;
+
+/**
+ * 
+ * @since 3.1
+ */
+public class ProductFile extends DefaultHandler {
+	private final static SAXParserFactory parserFactory = SAXParserFactory.newInstance();
+
+	private static final String PROGRAM_ARGS = "programArgs"; //$NON-NLS-1$
+	private static final String PROGRAM_ARGS_LINUX = "programArgsLin"; //$NON-NLS-1$
+	private static final String PROGRAM_ARGS_MAC = "programArgsMac"; //$NON-NLS-1$
+	private static final String PROGRAM_ARGS_SOLARIS = "programArgsSol"; //$NON-NLS-1$
+	private static final String PROGRAM_ARGS_WIN = "programArgsWin"; //$NON-NLS-1$
+	private static final String VM_ARGS = "vmArgs"; //$NON-NLS-1$
+	private static final String VM_ARGS_LINUX = "vmArgsLin"; //$NON-NLS-1$
+	private static final String VM_ARGS_MAC = "vmArgsMac"; //$NON-NLS-1$
+	private static final String VM_ARGS_SOLARIS = "vmArgsSol"; //$NON-NLS-1$
+	private static final String VM_ARGS_WIN = "vmArgsWin"; //$NON-NLS-1$
+
+	private static final String SOLARIS_LARGE = "solarisLarge"; //$NON-NLS-1$
+	private static final String SOLARIS_MEDIUM = "solarisMedium"; //$NON-NLS-1$
+	private static final String SOLARIS_SMALL = "solarisSmall"; //$NON-NLS-1$
+	private static final String SOLARIS_TINY = "solarisTiny"; //$NON-NLS-1$
+	private static final String WIN32_16_LOW = "winSmallLow"; //$NON-NLS-1$
+	private static final String WIN32_16_HIGH = "winSmallHigh"; //$NON-NLS-1$
+	private static final String WIN32_24_LOW = "win24Low"; //$NON-NLS-1$
+	private static final String WIN32_32_LOW = "winMediumLow"; //$NON-NLS-1$
+	private static final String WIN32_32_HIGH = "winMediumHigh"; //$NON-NLS-1$
+	private static final String WIN32_48_LOW = "winLargeLow"; //$NON-NLS-1$
+	private static final String WIN32_48_HIGH = "winLargeHigh"; //$NON-NLS-1$
+
+	private static final String OS_WIN32 = "win32";//$NON-NLS-1$
+	private static final String OS_LINUX = "linux";//$NON-NLS-1$
+	private static final String OS_SOLARIS = "solaris";//$NON-NLS-1$
+	private static final String OS_MACOSX = "macosx";//$NON-NLS-1$
+
+	private static final String PRODUCT = "product"; //$NON-NLS-1$
+	private static final String CONFIG_INI = "configIni"; //$NON-NLS-1$
+	private static final String LAUNCHER = "launcher"; //$NON-NLS-1$
+	private static final String LAUNCHER_ARGS = "launcherArgs"; //$NON-NLS-1$
+	private static final String PLUGINS = "plugins"; //$NON-NLS-1$
+	private static final String FEATURES = "features"; //$NON-NLS-1$
+	private static final String SPLASH = "splash"; //$NON-NLS-1$
+	private static final String P_USE_ICO = "useIco"; //$NON-NLS-1$
+
+	//These constants form a small state machine to parse the .product file
+	private static final int STATE_START = 0;
+	private static final int STATE_PRODUCT = 1;
+	private static final int STATE_LAUNCHER = 2;
+	private static final int STATE_LAUNCHER_ARGS = 3;
+	private static final int STATE_PLUGINS = 4;
+	private static final int STATE_FEATURES = 5;
+	private static final int STATE_PROGRAM_ARGS = 6;
+	private static final int STATE_PROGRAM_ARGS_LINUX = 7;
+	private static final int STATE_PROGRAM_ARGS_MAC = 8;
+	private static final int STATE_PROGRAM_ARGS_SOLARIS = 9;
+	private static final int STATE_PROGRAM_ARGS_WIN = 10;
+	private static final int STATE_VM_ARGS = 11;
+	private static final int STATE_VM_ARGS_LINUX = 12;
+	private static final int STATE_VM_ARGS_MAC = 13;
+	private static final int STATE_VM_ARGS_SOLARIS = 14;
+	private static final int STATE_VM_ARGS_WIN = 15;
+
+	private int state = STATE_START;
+
+	private final SAXParser parser;
+	private String currentOS = null;
+	private boolean useIco = false;
+	private final ArrayList result = new ArrayList(6);
+	private String launcherName = null;
+	private String icons[] = null;
+	private String configPath = null;
+	private String id = null;
+	private boolean useFeatures = false;
+	private List plugins = null;
+	private List fragments = null;
+	private List features = null;
+	private String splashLocation = null;
+	private String productName = null;
+	private String application = null;
+
+	private Properties launcherArgs = new Properties();
+
+	private static String normalize(String text) {
+		if (text == null || text.trim().length() == 0)
+			return ""; //$NON-NLS-1$
+
+		text = text.replaceAll("\\r|\\n|\\f|\\t", " "); //$NON-NLS-1$ //$NON-NLS-2$
+		return text.replaceAll("\\s+", " "); //$NON-NLS-1$ //$NON-NLS-2$
+	}
+
+	/**
+	 * Constructs a feature parser.
+	 */
+	public ProductFile(String location, String os) throws Exception {
+		super();
+		this.currentOS = os;
+		//		try {
+		parserFactory.setNamespaceAware(true);
+		parser = parserFactory.newSAXParser();
+		InputStream in = new BufferedInputStream(new FileInputStream(location));
+		parser.parse(new InputSource(in), this);
+		//		} catch (ParserConfigurationException e) {
+		//			throw new CoreException(new Status(IStatus.ERROR, PI_PDEBUILD, EXCEPTION_PRODUCT_FORMAT, NLS.bind(Messages.exception_productParse, location), e));
+		//		} catch (SAXException e) {
+		//			throw new CoreException(new Status(IStatus.ERROR, PI_PDEBUILD, EXCEPTION_PRODUCT_FORMAT, NLS.bind(Messages.exception_productParse, location), e));
+		//		} catch (FileNotFoundException e) {
+		//			throw new CoreException(new Status(IStatus.ERROR, PI_PDEBUILD, EXCEPTION_PRODUCT_FILE, NLS.bind(Messages.exception_missingElement, location), null));
+		//		} catch (IOException e) {
+		//			throw new CoreException(new Status(IStatus.ERROR, PI_PDEBUILD, EXCEPTION_PRODUCT_FORMAT, NLS.bind(Messages.exception_productParse, location), e));
+		//		}
+	}
+
+	public String getLauncherName() {
+		return launcherName;
+	}
+
+	public List getPlugins() {
+		return getPlugins(true);
+	}
+
+	public List getPlugins(boolean includeFragments) {
+		List p = plugins != null ? plugins : Collections.EMPTY_LIST;
+		if (!includeFragments)
+			return p;
+
+		List f = fragments != null ? fragments : Collections.EMPTY_LIST;
+		int size = p.size() + f.size();
+		if (size == 0)
+			return Collections.EMPTY_LIST;
+
+		List both = new ArrayList(size);
+		both.addAll(p);
+		both.addAll(f);
+		return both;
+	}
+
+	public List getFragments() {
+		if (fragments == null)
+			return Collections.EMPTY_LIST;
+		return fragments;
+	}
+
+	public List getFeatures() {
+		if (features == null)
+			return Collections.EMPTY_LIST;
+		return features;
+	}
+
+	public boolean containsPlugin(String plugin) {
+		return (plugins != null && plugins.contains(plugin)) || (fragments != null && fragments.contains(plugin));
+	}
+
+	/**
+	 * Parses the specified url and constructs a feature
+	 */
+	public String[] getIcons() {
+		if (icons != null)
+			return icons;
+		String[] temp = new String[result.size()];
+		int i = 0;
+		for (Iterator iter = result.iterator(); iter.hasNext();) {
+			String element = (String) iter.next();
+			if (element != null)
+				temp[i++] = element;
+		}
+		icons = new String[i];
+		System.arraycopy(temp, 0, icons, 0, i);
+		return icons;
+	}
+
+	public String getConfigIniPath() {
+		return configPath;
+	}
+
+	public String getId() {
+		return id;
+	}
+
+	public String getSplashLocation() {
+		return splashLocation;
+	}
+
+	public String getProductName() {
+		return productName;
+	}
+
+	public String getApplication() {
+		return application;
+	}
+
+	public boolean useFeatures() {
+		return useFeatures;
+	}
+
+	public String getVMArguments(String os) {
+		String key = null;
+		if (os.equals(OS_WIN32)) {
+			key = VM_ARGS_WIN;
+		} else if (os.equals(OS_LINUX)) {
+			key = VM_ARGS_LINUX;
+		} else if (os.equals(OS_MACOSX)) {
+			key = VM_ARGS_MAC;
+		} else if (os.equals(OS_SOLARIS)) {
+			key = VM_ARGS_SOLARIS;
+		}
+
+		String prefix = launcherArgs.getProperty(VM_ARGS);
+		String platform = null, args = null;
+		if (key != null)
+			platform = launcherArgs.getProperty(key);
+		if (prefix != null)
+			args = platform != null ? prefix + " " + platform : prefix; //$NON-NLS-1$
+		else
+			args = platform != null ? platform : ""; //$NON-NLS-1$
+		return normalize(args);
+	}
+
+	public String getProgramArguments(String os) {
+		String key = null;
+		if (os.equals(OS_WIN32)) {
+			key = PROGRAM_ARGS_WIN;
+		} else if (os.equals(OS_LINUX)) {
+			key = PROGRAM_ARGS_LINUX;
+		} else if (os.equals(OS_MACOSX)) {
+			key = PROGRAM_ARGS_MAC;
+		} else if (os.equals(OS_SOLARIS)) {
+			key = PROGRAM_ARGS_SOLARIS;
+		}
+
+		String prefix = launcherArgs.getProperty(PROGRAM_ARGS);
+		String platform = null, args = null;
+		if (key != null)
+			platform = launcherArgs.getProperty(key);
+		if (prefix != null)
+			args = platform != null ? prefix + " " + platform : prefix; //$NON-NLS-1$
+		else
+			args = platform != null ? platform : ""; //$NON-NLS-1$
+		return normalize(args);
+	}
+
+	public void startElement(String uri, String localName, String qName, Attributes attributes) {
+		switch (state) {
+			case STATE_START :
+				if (PRODUCT.equals(localName)) {
+					processProduct(attributes);
+					state = STATE_PRODUCT;
+				}
+				break;
+
+			case STATE_PRODUCT :
+				if (CONFIG_INI.equals(localName)) {
+					processConfigIni(attributes);
+				} else if (LAUNCHER.equals(localName)) {
+					processLauncher(attributes);
+					state = STATE_LAUNCHER;
+				} else if (PLUGINS.equals(localName)) {
+					state = STATE_PLUGINS;
+				} else if (FEATURES.equals(localName)) {
+					state = STATE_FEATURES;
+				} else if (LAUNCHER_ARGS.equals(localName)) {
+					state = STATE_LAUNCHER_ARGS;
+				} else if (SPLASH.equals(localName)) {
+					splashLocation = attributes.getValue("location"); //$NON-NLS-1$
+				}
+				break;
+
+			case STATE_LAUNCHER :
+				if (OS_SOLARIS.equals(localName)) {
+					processSolaris(attributes);
+				} else if ("win".equals(localName)) { //$NON-NLS-1$
+					processWin(attributes);
+				} else if (OS_LINUX.equals(localName)) {
+					processLinux(attributes);
+				} else if (OS_MACOSX.equals(localName)) {
+					processMac(attributes);
+				}
+				if ("ico".equals(localName)) { //$NON-NLS-1$
+					processIco(attributes);
+				} else if ("bmp".equals(localName)) { //$NON-NLS-1$
+					processBmp(attributes);
+				}
+				break;
+
+			case STATE_LAUNCHER_ARGS :
+				if (PROGRAM_ARGS.equals(localName)) {
+					state = STATE_PROGRAM_ARGS;
+				} else if (PROGRAM_ARGS_LINUX.equals(localName)) {
+					state = STATE_PROGRAM_ARGS_LINUX;
+				} else if (PROGRAM_ARGS_MAC.equals(localName)) {
+					state = STATE_PROGRAM_ARGS_MAC;
+				} else if (PROGRAM_ARGS_SOLARIS.equals(localName)) {
+					state = STATE_PROGRAM_ARGS_SOLARIS;
+				} else if (PROGRAM_ARGS_WIN.equals(localName)) {
+					state = STATE_PROGRAM_ARGS_WIN;
+				} else if (VM_ARGS.equals(localName)) {
+					state = STATE_VM_ARGS;
+				} else if (VM_ARGS_LINUX.equals(localName)) {
+					state = STATE_VM_ARGS_LINUX;
+				} else if (VM_ARGS_MAC.equals(localName)) {
+					state = STATE_VM_ARGS_MAC;
+				} else if (VM_ARGS_SOLARIS.equals(localName)) {
+					state = STATE_VM_ARGS_SOLARIS;
+				} else if (VM_ARGS_WIN.equals(localName)) {
+					state = STATE_VM_ARGS_WIN;
+				}
+				break;
+
+			case STATE_PLUGINS :
+				if ("plugin".equals(localName)) { //$NON-NLS-1$
+					processPlugin(attributes);
+				}
+				break;
+
+			case STATE_FEATURES :
+				if ("feature".equals(localName)) { //$NON-NLS-1$
+					processFeature(attributes);
+				}
+				break;
+		}
+	}
+
+	public void endElement(String uri, String localName, String qName) {
+		switch (state) {
+			case STATE_PLUGINS :
+				if (PLUGINS.equals(localName))
+					state = STATE_PRODUCT;
+				break;
+			case STATE_FEATURES :
+				if (FEATURES.equals(localName))
+					state = STATE_PRODUCT;
+				break;
+			case STATE_LAUNCHER_ARGS :
+				if (LAUNCHER_ARGS.equals(localName))
+					state = STATE_PRODUCT;
+				break;
+			case STATE_LAUNCHER :
+				if (LAUNCHER.equals(localName))
+					state = STATE_PRODUCT;
+				break;
+
+			case STATE_PROGRAM_ARGS :
+			case STATE_PROGRAM_ARGS_LINUX :
+			case STATE_PROGRAM_ARGS_MAC :
+			case STATE_PROGRAM_ARGS_SOLARIS :
+			case STATE_PROGRAM_ARGS_WIN :
+			case STATE_VM_ARGS :
+			case STATE_VM_ARGS_LINUX :
+			case STATE_VM_ARGS_MAC :
+			case STATE_VM_ARGS_SOLARIS :
+			case STATE_VM_ARGS_WIN :
+				state = STATE_LAUNCHER_ARGS;
+				break;
+		}
+	}
+
+	public void characters(char[] ch, int start, int length) {
+		switch (state) {
+			case STATE_PROGRAM_ARGS :
+				addLaunchArgumentToMap(PROGRAM_ARGS, String.valueOf(ch, start, length));
+				break;
+			case STATE_PROGRAM_ARGS_LINUX :
+				addLaunchArgumentToMap(PROGRAM_ARGS_LINUX, String.valueOf(ch, start, length));
+				break;
+			case STATE_PROGRAM_ARGS_MAC :
+				addLaunchArgumentToMap(PROGRAM_ARGS_MAC, String.valueOf(ch, start, length));
+				break;
+			case STATE_PROGRAM_ARGS_SOLARIS :
+				addLaunchArgumentToMap(PROGRAM_ARGS_SOLARIS, String.valueOf(ch, start, length));
+				break;
+			case STATE_PROGRAM_ARGS_WIN :
+				addLaunchArgumentToMap(PROGRAM_ARGS_WIN, String.valueOf(ch, start, length));
+				break;
+			case STATE_VM_ARGS :
+				addLaunchArgumentToMap(VM_ARGS, String.valueOf(ch, start, length));
+				break;
+			case STATE_VM_ARGS_LINUX :
+				addLaunchArgumentToMap(VM_ARGS_LINUX, String.valueOf(ch, start, length));
+				break;
+			case STATE_VM_ARGS_MAC :
+				addLaunchArgumentToMap(VM_ARGS_MAC, String.valueOf(ch, start, length));
+				break;
+			case STATE_VM_ARGS_SOLARIS :
+				addLaunchArgumentToMap(VM_ARGS_SOLARIS, String.valueOf(ch, start, length));
+				break;
+			case STATE_VM_ARGS_WIN :
+				addLaunchArgumentToMap(VM_ARGS_WIN, String.valueOf(ch, start, length));
+				break;
+		}
+	}
+
+	private void addLaunchArgumentToMap(String key, String value) {
+		if (launcherArgs == null)
+			launcherArgs = new Properties();
+
+		String oldValue = launcherArgs.getProperty(key);
+		if (oldValue != null)
+			launcherArgs.setProperty(key, oldValue + value);
+		else
+			launcherArgs.setProperty(key, value);
+	}
+
+	private void processPlugin(Attributes attributes) {
+		String fragment = attributes.getValue("fragment"); //$NON-NLS-1$
+		if (fragment != null && new Boolean(fragment).booleanValue()) {
+			if (fragments == null)
+				fragments = new ArrayList();
+			fragments.add(attributes.getValue("id")); //$NON-NLS-1$
+		} else {
+			if (plugins == null)
+				plugins = new ArrayList();
+			plugins.add(attributes.getValue("id")); //$NON-NLS-1$
+		}
+	}
+
+	private void processFeature(Attributes attributes) {
+		if (features == null)
+			features = new ArrayList();
+		features.add(attributes.getValue("id")); //$NON-NLS-1$
+	}
+
+	private void processProduct(Attributes attributes) {
+		id = attributes.getValue("id"); //$NON-NLS-1$
+		productName = attributes.getValue("name"); //$NON-NLS-1$
+		application = attributes.getValue("application"); //$NON-NLS-1$
+		String use = attributes.getValue("useFeatures"); //$NON-NLS-1$
+		if (use != null)
+			useFeatures = Boolean.valueOf(use).booleanValue();
+	}
+
+	private void processConfigIni(Attributes attributes) {
+		if (attributes.getValue("use").equals("custom")) { //$NON-NLS-1$//$NON-NLS-2$
+			configPath = attributes.getValue("path"); //$NON-NLS-1$
+		}
+	}
+
+	private void processLauncher(Attributes attributes) {
+		launcherName = attributes.getValue("name"); //$NON-NLS-1$
+	}
+
+	private boolean osMatch(String os) {
+		if (os == currentOS)
+			return true;
+		if (os == null)
+			return false;
+		return os.equals(currentOS);
+	}
+
+	private void processSolaris(Attributes attributes) {
+		if (!osMatch(OS_SOLARIS))
+			return;
+		result.add(attributes.getValue(SOLARIS_LARGE));
+		result.add(attributes.getValue(SOLARIS_MEDIUM));
+		result.add(attributes.getValue(SOLARIS_SMALL));
+		result.add(attributes.getValue(SOLARIS_TINY));
+	}
+
+	private void processWin(Attributes attributes) {
+		if (!osMatch(OS_WIN32))
+			return;
+		useIco = Boolean.valueOf(attributes.getValue(P_USE_ICO)).booleanValue();
+	}
+
+	private void processIco(Attributes attributes) {
+		if (!osMatch(OS_WIN32) || !useIco)
+			return;
+		result.add(attributes.getValue("path")); //$NON-NLS-1$
+	}
+
+	private void processBmp(Attributes attributes) {
+		if (!osMatch(OS_WIN32) || useIco)
+			return;
+		result.add(attributes.getValue(WIN32_16_HIGH));
+		result.add(attributes.getValue(WIN32_16_LOW));
+		result.add(attributes.getValue(WIN32_24_LOW));
+		result.add(attributes.getValue(WIN32_32_HIGH));
+		result.add(attributes.getValue(WIN32_32_LOW));
+		result.add(attributes.getValue(WIN32_48_HIGH));
+		result.add(attributes.getValue(WIN32_48_LOW));
+	}
+
+	private void processLinux(Attributes attributes) {
+		if (!osMatch(OS_LINUX))
+			return;
+		result.add(attributes.getValue("icon")); //$NON-NLS-1$
+	}
+
+	private void processMac(Attributes attributes) {
+		if (!osMatch(OS_MACOSX))
+			return;
+		result.add(attributes.getValue("icon")); //$NON-NLS-1$
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java
index 91c2727..ab9aa93 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java
@@ -82,7 +82,7 @@ public class EclipseInstallGeneratorInfoProvider implements IGeneratorInfo {
 	private boolean updateCompatibility = Boolean.valueOf(System.getProperty(UPDATE_COMPATIBILITY, "false")).booleanValue(); //$NON-NLS-1$
 	private String rootId;
 	private String rootVersion;
-
+	private String productFile = null;
 	private String launcherConfig;
 
 	private URL siteLocation;
@@ -309,6 +309,10 @@ public class EclipseInstallGeneratorInfoProvider implements IGeneratorInfo {
 		return rootVersion;
 	}
 
+	public String getProductFile() {
+		return productFile;
+	}
+
 	public URL getSiteLocation() {
 		return siteLocation;
 	}
@@ -428,6 +432,10 @@ public class EclipseInstallGeneratorInfoProvider implements IGeneratorInfo {
 		rootVersion = value;
 	}
 
+	public void setProductFile(String file) {
+		productFile = file;
+	}
+
 	/**
 	 * Sets the location of site.xml if applicable.
 	 */
@@ -444,7 +452,7 @@ public class EclipseInstallGeneratorInfoProvider implements IGeneratorInfo {
 		if (bundles != null && bundles.length > 0) {
 			for (int i = 0; i < bundles.length; i++) {
 				try {
-					if ((bundles[0].getState() & Bundle.INSTALLED) > 0) {
+					if ((bundles[0].getState() & Bundle.RESOLVED) > 0) {
 						bundles[0].start();
 						return true;
 					}
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
index 8487056..68b70c0 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
@@ -22,7 +22,10 @@ import org.eclipse.equinox.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.p2.metadata.*;
 import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitDescription;
 import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitFragmentDescription;
+import org.eclipse.equinox.p2.metadata.query.InstallableUnitQuery;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
+import org.eclipse.equinox.p2.query.Collector;
+import org.eclipse.equinox.p2.query.Query;
 import org.eclipse.osgi.service.resolver.*;
 import org.eclipse.osgi.util.NLS;
 import org.osgi.framework.Version;
@@ -31,7 +34,7 @@ public class Generator {
 	/**
 	 * Captures the output of an execution of the generator.
 	 */
-	static class GeneratorResult {
+	public static class GeneratorResult {
 		/**
 		 * The set of generated IUs that will be children of the root IU
 		 */
@@ -78,6 +81,8 @@ public class Generator {
 
 	private final IGeneratorInfo info;
 
+	private GeneratorResult incrementalResult = null;
+
 	/**
 	 * Short term fix to ensure IUs that have no corresponding category are not lost.
 	 * See https://bugs.eclipse.org/bugs/show_bug.cgi?id=211521.
@@ -111,6 +116,10 @@ public class Generator {
 		}
 	}
 
+	public void setIncrementalResult(GeneratorResult result) {
+		this.incrementalResult = result;
+	}
+
 	private boolean checkOptionalRootDependency(IInstallableUnit iu) {
 		// TODO: This is a kludge to make the default configuration unit
 		//		 for features be optional in the root. Since there is a global
@@ -119,13 +128,44 @@ public class Generator {
 		return (iu.getId().indexOf(".feature.default") > 0 ? true : false); //$NON-NLS-1$
 	}
 
+	protected IInstallableUnit createProductIU(String productFile) {
+		ProductFile product = null;
+		try {
+			product = new ProductFile(productFile, null);
+		} catch (Exception e) {
+			e.printStackTrace();
+			return null;
+		}
+
+		GeneratorResult result = new GeneratorResult();
+		List children = product.useFeatures() ? product.getFeatures() : product.getPlugins();
+		for (Iterator iterator = children.iterator(); iterator.hasNext();) {
+			Query query = new InstallableUnitQuery((String) iterator.next());
+			Collector collector = info.getMetadataRepository().query(query, new Collector(), null);
+			// product file doesn't say anything about versions, don't know how to choose if there is more than one
+			if (collector.size() > 0) {
+				result.nonRootIUs.add(collector.iterator().next());
+			}
+		}
+
+		//TODO get a real version
+		String version = info.getRootVersion() != null ? info.getRootVersion() : "0.0.0"; //$NON-NLS-1$
+		InstallableUnitDescription root = createTopLevelIUDescription(result, product.getId(), version, product.getProductName());
+		return MetadataFactory.createInstallableUnit(root);
+	}
+
 	protected IInstallableUnit createTopLevelIU(GeneratorResult result, String configurationIdentification, String configurationVersion) {
+		// TODO, bit of a hack but for now set the name of the IU to the ID.
+		InstallableUnitDescription root = createTopLevelIUDescription(result, configurationIdentification, configurationVersion, configurationIdentification);
+		return MetadataFactory.createInstallableUnit(root);
+	}
+
+	protected InstallableUnitDescription createTopLevelIUDescription(GeneratorResult result, String configurationIdentification, String configurationVersion, String configurationName) {
 		InstallableUnitDescription root = new MetadataFactory.InstallableUnitDescription();
 		root.setSingleton(true);
 		root.setId(configurationIdentification);
 		root.setVersion(new Version(configurationVersion));
-		// TODO, bit of a hack but for now set the name of the IU to the ID.
-		root.setProperty(IInstallableUnit.PROP_NAME, configurationIdentification);
+		root.setProperty(IInstallableUnit.PROP_NAME, configurationName);
 
 		ArrayList reqsConfigurationUnits = new ArrayList(result.rootIUs.size());
 		for (Iterator iterator = result.rootIUs.iterator(); iterator.hasNext();) {
@@ -188,11 +228,11 @@ public class Generator {
 		touchpointData.put("configure", configurationData); //$NON-NLS-1$
 		touchpointData.put("unconfigure", unconfigurationData); //$NON-NLS-1$
 		root.addTouchpointData(MetadataFactory.createTouchpointData(touchpointData));
-		return MetadataFactory.createInstallableUnit(root);
+		return root;
 	}
 
 	public IStatus generate() {
-		GeneratorResult result = new GeneratorResult();
+		GeneratorResult result = incrementalResult != null ? incrementalResult : new GeneratorResult();
 
 		Feature[] features = getFeatures(info.getFeaturesLocation());
 		generateFeatureIUs(features, result, info.getArtifactRepository());
@@ -506,14 +546,23 @@ public class Generator {
 	}
 
 	protected void generateRootIU(GeneratorResult result, String rootIUId, String rootIUVersion) {
-		if (rootIUId == null)
+		IInstallableUnit rootIU = null;
+
+		if (info.getProductFile() != null)
+			rootIU = createProductIU(info.getProductFile());
+		else if (rootIUId != null)
+			rootIU = createTopLevelIU(result, rootIUId, rootIUVersion);
+
+		if (rootIU == null)
 			return;
-		IInstallableUnit rootIU = createTopLevelIU(result, rootIUId, rootIUVersion);
+
 		result.nonRootIUs.add(rootIU);
 		result.nonRootIUs.add(generateDefaultCategory(rootIU));
 	}
 
 	protected BundleDescription[] getBundleDescriptions(File[] bundleLocations) {
+		if (bundleLocations == null)
+			return new BundleDescription[0];
 		boolean addSimpleConfigurator = false;
 		for (int i = 0; i < bundleLocations.length; i++) {
 			addSimpleConfigurator = bundleLocations[i].toString().indexOf(ORG_ECLIPSE_UPDATE_CONFIGURATOR) > 0;
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/IGeneratorInfo.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/IGeneratorInfo.java
index 400342e..b0223c7 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/IGeneratorInfo.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/IGeneratorInfo.java
@@ -56,6 +56,8 @@ public interface IGeneratorInfo {
 
 	public String getRootVersion();
 
+	public String getProductFile();
+
 	/**
 	 * Returns the location of the site.xml file, or <code>null</code> if not
 	 * generating for an update site.
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src_ant/org/eclipse/equinox/p2/metadata/generator/ant/GeneratorTask.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src_ant/org/eclipse/equinox/p2/metadata/generator/ant/GeneratorTask.java
index 3e34474..1ef5e60 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src_ant/org/eclipse/equinox/p2/metadata/generator/ant/GeneratorTask.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src_ant/org/eclipse/equinox/p2/metadata/generator/ant/GeneratorTask.java
@@ -10,14 +10,11 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.metadata.generator.ant;
 
-import java.io.File;
-import java.net.MalformedURLException;
-import java.net.URL;
-import java.util.ArrayList;
-import java.util.List;
-import org.apache.tools.ant.*;
+import org.apache.tools.ant.BuildException;
+import org.apache.tools.ant.Task;
 import org.eclipse.equinox.internal.p2.metadata.generator.EclipseGeneratorApplication;
-import org.eclipse.osgi.util.NLS;
+import org.eclipse.equinox.p2.metadata.generator.EclipseInstallGeneratorInfoProvider;
+import org.eclipse.equinox.p2.metadata.generator.Generator.GeneratorResult;
 
 /**
  * An Ant task to call the p2 Metadata Generator application.
@@ -26,178 +23,158 @@ import org.eclipse.osgi.util.NLS;
  */
 public class GeneratorTask extends Task {
 
-	URL metadataRepository, artifactRepository;
-	File source, inplace, updateSite, config;
-	String rootVersion, root, flavor, p2OS, launcherConfig;
-	boolean publishArtifacts, publishArtifactRepository, append, noDefaultIUs;
-	File exe, base, features, bundles;
+	protected EclipseInstallGeneratorInfoProvider provider = null;
+	protected EclipseGeneratorApplication generator = null;
+
+	static private GeneratorResult result;
+	private String mode;
 
 	/* (non-Javadoc)
 	 * @see org.apache.tools.ant.Task#execute()
 	 */
 	public void execute() throws BuildException {
 		try {
-			// collect the arguments and call the application
-			new EclipseGeneratorApplication().run(getArguments());
+			if ("incremental".equals(mode)) { //$NON-NLS-1$
+				if (result == null)
+					result = new GeneratorResult();
+				generator.setIncrementalResult(result);
+			} else if ("final".equals(mode) && result != null) { //$NON-NLS-1$
+				generator.setIncrementalResult(result);
+			}
+
+			generator.run(provider);
+
+			if (!"incremental".equals(mode)) { //$NON-NLS-1$
+				provider = null;
+				generator = null;
+				result = null;
+			}
 		} catch (Exception e) {
 			throw new BuildException(TaskMessages.exception_errorOccurredCallingGenerator, e);
 		}
 	}
 
-	private String[] getArguments() {
-		List result = new ArrayList();
-		if (metadataRepository != null) {
-			result.add("-metadataRepository"); //$NON-NLS-1$
-			result.add(metadataRepository.toExternalForm());
-		}
-		if (artifactRepository != null) {
-			result.add("-artifactRepository"); //$NON-NLS-1$
-			result.add(artifactRepository.toExternalForm());
-		}
-		if (source != null) {
-			result.add("-source"); //$NON-NLS-1$
-			result.add(source.getAbsolutePath());
-		}
-		if (config != null) {
-			result.add("-config"); //$NON-NLS-1$
-			result.add(config.getAbsolutePath());
-		}
-		if (updateSite != null) {
-			result.add("-updateSite"); //$NON-NLS-1$
-			result.add(updateSite.getAbsolutePath());
-		}
-		if (inplace != null) {
-			result.add("-inplace"); //$NON-NLS-1$
-			result.add(inplace.getAbsolutePath());
-		}
-		if (rootVersion != null) {
-			result.add("-rootVersion"); //$NON-NLS-1$
-			result.add(rootVersion);
-		}
-		if (root != null) {
-			result.add("-root"); //$NON-NLS-1$
-			result.add(root);
-		}
-		if (flavor != null) {
-			result.add("-flavor"); //$NON-NLS-1$
-			result.add(flavor);
-		}
-		if (exe != null) {
-			result.add("-exe"); //$NON-NLS-1$
-			result.add(exe.getAbsolutePath());
-		}
-		if (launcherConfig != null) {
-			result.add("-launcherConfig"); //$NON-NLS-1$
-			result.add(launcherConfig);
-		}
-		if (features != null) {
-			result.add("-features"); //$NON-NLS-1$
-			result.add(features.getAbsolutePath());
-		}
-		if (bundles != null) {
-			result.add("-bundles"); //$NON-NLS-1$
-			result.add(bundles.getAbsolutePath());
-		}
-		if (base != null) {
-			result.add("-base"); //$NON-NLS-1$
-			result.add(base.getAbsolutePath());
-		}
-		if (p2OS != null) {
-			result.add("-p2.os"); //$NON-NLS-1$
-			result.add(p2OS);
-		}
-		if (publishArtifacts)
-			result.add("-publishArtifacts"); //$NON-NLS-1$
-		if (publishArtifactRepository)
-			result.add("-publishArtifactRepository"); //$NON-NLS-1$
-		if (append)
-			result.add("-append"); //$NON-NLS-1$
-		if (noDefaultIUs)
-			result.add("-noDefaultIUs"); //$NON-NLS-1$
-		return (String[]) result.toArray(new String[result.size()]);
-	}
-
 	public void setAppend(String value) {
-		this.append = Boolean.valueOf(value).booleanValue();
+		if (provider == null)
+			provider = new EclipseInstallGeneratorInfoProvider();
+		provider.setAppend(Boolean.valueOf(value).booleanValue());
 	}
 
 	public void setArtifactRepository(String location) {
-		try {
-			artifactRepository = new URL(location);
-		} catch (MalformedURLException e) {
-			log(NLS.bind(TaskMessages.exception_errorArtifactRepo, location), e, Project.MSG_WARN);
-		}
+		if (generator == null)
+			generator = new EclipseGeneratorApplication();
+		generator.setArtifactLocation(location);
 	}
 
 	public void setBase(String value) {
-		base = new File(value);
+		if (generator == null)
+			generator = new EclipseGeneratorApplication();
+		generator.setBase(value);
 	}
 
 	public void setBundles(String value) {
-		bundles = new File(value);
+		if (generator == null)
+			generator = new EclipseGeneratorApplication();
+		generator.setBundles(value);
 	}
 
 	public void setConfig(String value) {
-		this.config = new File(value);
+		if (generator == null)
+			generator = new EclipseGeneratorApplication();
+		generator.setOperation("-config", value); //$NON-NLS-1$
+	}
+
+	public void setInplace(String value) {
+		if (generator == null)
+			generator = new EclipseGeneratorApplication();
+		generator.setOperation("-inplace", value); //$NON-NLS-1$
+	}
+
+	public void setSource(String location) {
+		if (generator == null)
+			generator = new EclipseGeneratorApplication();
+		generator.setOperation("-source", location); //$NON-NLS-1$
+	}
+
+	public void setUpdateSite(String value) {
+		if (generator == null)
+			generator = new EclipseGeneratorApplication();
+		generator.setOperation("-update", value); //$NON-NLS-1$
 	}
 
 	public void setExe(String value) {
-		exe = new File(value);
+		if (provider == null)
+			provider = new EclipseInstallGeneratorInfoProvider();
+		provider.setExecutableLocation(value);
 	}
 
 	public void setFeatures(String value) {
-		features = new File(value);
+		if (generator == null)
+			generator = new EclipseGeneratorApplication();
+		generator.setFeatures(value);
 	}
 
 	public void setFlavor(String flavor) {
-		this.flavor = flavor;
-	}
-
-	public void setInplace(String value) {
-		this.inplace = new File(value);
+		if (provider == null)
+			provider = new EclipseInstallGeneratorInfoProvider();
+		provider.setFlavor(flavor);
 	}
 
 	public void setLauncherConfig(String launcherConfig) {
-		this.launcherConfig = launcherConfig;
+		if (provider == null)
+			provider = new EclipseInstallGeneratorInfoProvider();
+		provider.setLauncherConfig(launcherConfig);
 	}
 
 	public void setMetadataRepository(String location) {
-		try {
-			metadataRepository = new URL(location);
-		} catch (MalformedURLException e) {
-			log(NLS.bind(TaskMessages.exception_errorMetadataRepo, location), e, Project.MSG_WARN);
-		}
+		if (generator == null)
+			generator = new EclipseGeneratorApplication();
+		generator.setMetadataLocation(location);
 	}
 
 	public void setNoDefaultIUs(String value) {
-		noDefaultIUs = Boolean.valueOf(value).booleanValue();
+		if (provider == null)
+			provider = new EclipseInstallGeneratorInfoProvider();
+		provider.setAddDefaultIUs(Boolean.valueOf(value).booleanValue());
 	}
 
 	public void setP2OS(String value) {
-		p2OS = value;
+		if (provider == null)
+			provider = new EclipseInstallGeneratorInfoProvider();
+		provider.setOS(value);
+	}
+
+	public void setProductFile(String file) {
+		if (provider == null)
+			provider = new EclipseInstallGeneratorInfoProvider();
+		provider.setProductFile(file);
 	}
 
 	public void setPublishArtifactRepository(String value) {
-		publishArtifactRepository = Boolean.valueOf(value).booleanValue();
+		if (provider == null)
+			provider = new EclipseInstallGeneratorInfoProvider();
+		provider.setPublishArtifactRepository(Boolean.valueOf(value).booleanValue());
 	}
 
 	public void setPublishArtifacts(String value) {
-		this.publishArtifacts = Boolean.valueOf(value).booleanValue();
+		if (provider == null)
+			provider = new EclipseInstallGeneratorInfoProvider();
+		provider.setPublishArtifacts(Boolean.valueOf(value).booleanValue());
 	}
 
 	public void setRoot(String root) {
-		this.root = root;
+		if (provider == null)
+			provider = new EclipseInstallGeneratorInfoProvider();
+		provider.setRootId(root);
 	}
 
 	public void setRootVersion(String rootVersion) {
-		this.rootVersion = rootVersion;
+		if (provider == null)
+			provider = new EclipseInstallGeneratorInfoProvider();
+		provider.setRootVersion(rootVersion);
 	}
 
-	public void setSource(String location) {
-		source = new File(location);
-	}
-
-	public void setUpdateSite(String value) {
-		this.updateSite = new File(value);
+	public void setMode(String mode) {
+		this.mode = mode;
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/generator/TestGeneratorInfo.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/generator/TestGeneratorInfo.java
index d262bc5..16a25cb 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/generator/TestGeneratorInfo.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/generator/TestGeneratorInfo.java
@@ -161,7 +161,7 @@ public class TestGeneratorInfo implements IGeneratorInfo {
 	public void setIsUpdateCompatible(boolean isCompatible) {
 		this.updateCompatibilty = isCompatible;
 	}
-	
+
 	public boolean reuseExistingPack200Files() {
 		return false;
 	}
@@ -170,4 +170,9 @@ public class TestGeneratorInfo implements IGeneratorInfo {
 		//
 	}
 
+	public String getProductFile() {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
 }

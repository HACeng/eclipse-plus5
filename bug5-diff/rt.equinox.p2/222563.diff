commit 18dbdf16cfc514c95f58e13f2451c1cf2591eb8a
Author: John Arthorne <johna>
Date:   Fri Mar 28 17:53:31 2008 +0000

    Bug 222563 [ui] Opening up the software update dialog unbearably slow

8	4	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java
8	4	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java
12	1	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ArtifactRepositoriesView.java
13	1	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java
1	7	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
3	1	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvView.java
3	7	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RepositoriesView.java
12	2	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RepositoryManipulationDialog.java
1	1	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java
2	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
2	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
22	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/RemoteQueriedElement.java
8	11	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
7	13	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledIUGroup.java
23	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/ArtifactRepositories.java
23	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositories.java
10	9	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/Profiles.java
4	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/QueryableMetadataRepositoryManager.java
3	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/DeferredQueryContentProvider.java
19	14	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/StructuredViewerProvisioningListener.java
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java
index 1ad6808..3c73a04 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java
@@ -82,28 +82,32 @@ public class ArtifactRepositoryManager extends AbstractRepositoryManager impleme
 		info.location = repository.getLocation();
 		String value = (String) repository.getProperties().get(IRepository.PROP_SYSTEM);
 		info.isSystem = value == null ? false : Boolean.valueOf(value).booleanValue();
+		boolean added = true;
 		synchronized (repositoryLock) {
 			if (repositories == null)
 				restoreRepositories();
-			repositories.put(getKey(repository), info);
+			added = repositories.put(getKey(repository), info) == null;
 		}
 		// save the given repository in the preferences.
 		remember(repository);
-		broadcastChangeEvent(repository.getLocation(), IRepository.TYPE_ARTIFACT, RepositoryEvent.ADDED);
+		if (added)
+			broadcastChangeEvent(repository.getLocation(), IRepository.TYPE_ARTIFACT, RepositoryEvent.ADDED);
 	}
 
 	public void addRepository(URL location) {
 		Assert.isNotNull(location);
 		RepositoryInfo info = new RepositoryInfo();
 		info.location = location;
+		boolean added = true;
 		synchronized (repositoryLock) {
 			if (repositories == null)
 				restoreRepositories();
-			repositories.put(getKey(location), info);
+			added = repositories.put(getKey(location), info) == null;
 		}
 		// save the given repository in the preferences.
 		remember(info);
-		broadcastChangeEvent(location, IRepository.TYPE_ARTIFACT, RepositoryEvent.ADDED);
+		if (added)
+			broadcastChangeEvent(location, IRepository.TYPE_ARTIFACT, RepositoryEvent.ADDED);
 	}
 
 	/**
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java
index 0c19fa7..a07e981 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java
@@ -84,13 +84,15 @@ public class MetadataRepositoryManager implements IMetadataRepositoryManager {
 		info.location = repository.getLocation();
 		String value = (String) repository.getProperties().get(IRepository.PROP_SYSTEM);
 		info.isSystem = value == null ? false : Boolean.valueOf(value).booleanValue();
+		boolean added = true;
 		synchronized (repositoryLock) {
 			if (repositories == null)
 				restoreRepositories();
-			repositories.put(getKey(repository), info);
+			added = repositories.put(getKey(repository), info) == null;
 		}
 		// save the given repository in the preferences.
-		if (remember(repository))
+		remember(repository);
+		if (added)
 			broadcastChangeEvent(repository.getLocation(), IRepository.TYPE_METADATA, RepositoryEvent.ADDED);
 	}
 
@@ -98,13 +100,15 @@ public class MetadataRepositoryManager implements IMetadataRepositoryManager {
 		Assert.isNotNull(location);
 		RepositoryInfo info = new RepositoryInfo();
 		info.location = location;
+		boolean added = true;
 		synchronized (repositoryLock) {
 			if (repositories == null)
 				restoreRepositories();
-			repositories.put(getKey(location), info);
+			added = repositories.put(getKey(location), info) == null;
 		}
 		// save the given repository in the preferences.
-		if (remember(info))
+		remember(info);
+		if (added)
 			broadcastChangeEvent(location, IRepository.TYPE_METADATA, RepositoryEvent.ADDED);
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ArtifactRepositoriesView.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ArtifactRepositoriesView.java
index 7c7f800..41c35bd 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ArtifactRepositoriesView.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ArtifactRepositoriesView.java
@@ -18,6 +18,7 @@ import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifact
 import org.eclipse.equinox.internal.provisional.p2.ui.model.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningOperation;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.RemoveArtifactRepositoryOperation;
+import org.eclipse.equinox.internal.provisional.p2.ui.viewers.StructuredViewerProvisioningListener;
 import org.eclipse.swt.widgets.Shell;
 
 /**
@@ -35,7 +36,9 @@ public class ArtifactRepositoriesView extends RepositoriesView {
 	}
 
 	protected Object getInput() {
-		return new ArtifactRepositories();
+		ArtifactRepositories input = new ArtifactRepositories();
+		input.setQueryProvider(ProvAdminUIActivator.getDefault().getQueryProvider());
+		return input;
 	}
 
 	protected String getAddCommandLabel() {
@@ -73,4 +76,12 @@ public class ArtifactRepositoriesView extends RepositoriesView {
 		return IArtifactRepositoryManager.REPOSITORIES_ALL;
 	}
 
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.p2.ui.admin.RepositoriesView#getListenerEventTypes()
+	 */
+	protected int getListenerEventTypes() {
+		return StructuredViewerProvisioningListener.PROV_EVENT_ARTIFACT_REPOSITORY;
+	}
+
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java
index 1a1d28e..ecee68b 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java
@@ -25,6 +25,7 @@ import org.eclipse.equinox.internal.provisional.p2.ui.actions.RevertAction;
 import org.eclipse.equinox.internal.provisional.p2.ui.model.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningOperation;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.RemoveMetadataRepositoryOperation;
+import org.eclipse.equinox.internal.provisional.p2.ui.policy.IQueryProvider;
 import org.eclipse.equinox.internal.provisional.p2.ui.viewers.*;
 import org.eclipse.jface.action.IMenuManager;
 import org.eclipse.jface.action.Separator;
@@ -53,7 +54,10 @@ public class MetadataRepositoriesView extends RepositoriesView {
 	}
 
 	protected Object getInput() {
-		return new MetadataRepositories();
+		MetadataRepositories input = new MetadataRepositories();
+		input.setQueryProvider(ProvAdminUIActivator.getDefault().getQueryProvider());
+		input.setQueryType(IQueryProvider.METADATA_REPOS);
+		return input;
 	}
 
 	protected String getAddCommandLabel() {
@@ -149,4 +153,12 @@ public class MetadataRepositoriesView extends RepositoriesView {
 		return IMetadataRepositoryManager.REPOSITORIES_ALL;
 	}
 
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.p2.ui.admin.RepositoriesView#getListenerEventTypes()
+	 */
+	protected int getListenerEventTypes() {
+		return StructuredViewerProvisioningListener.PROV_EVENT_METADATA_REPOSITORY;
+	}
+
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
index a5876dd..27dc104 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
@@ -102,13 +102,7 @@ public class ProfilesView extends ProvView {
 
 	protected void addListeners() {
 		super.addListeners();
-		listener = new StructuredViewerProvisioningListener(viewer, StructuredViewerProvisioningListener.PROV_EVENT_IU | StructuredViewerProvisioningListener.PROV_EVENT_PROFILE, ProvAdminUIActivator.getDefault().getQueryProvider()) {
-			protected void refreshAll() {
-				// The content provider maintains the same deferred content manager
-				// unless input changes, so a viewer.refresh() is not enough.
-				ProfilesView.this.refreshAll();
-			}
-		};
+		listener = new StructuredViewerProvisioningListener(viewer, StructuredViewerProvisioningListener.PROV_EVENT_IU | StructuredViewerProvisioningListener.PROV_EVENT_PROFILE, ProvAdminUIActivator.getDefault().getQueryProvider());
 		ProvUI.addProvisioningListener(listener);
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvView.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvView.java
index 8cb78d5..320356c 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvView.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvView.java
@@ -59,12 +59,14 @@ abstract class ProvView extends ViewPart {
 		// Do this after setting up sorters, filters, etc.
 		// Otherwise it will retrieve content on each change.
 		viewer.setContentProvider(getContentProvider());
-		viewer.setInput(getInput());
 
 		// Now set up the visuals, columns before labels.
 		setTreeColumns(viewer.getTree());
 		viewer.setLabelProvider(getLabelProvider());
 
+		// Input is last
+		viewer.setInput(getInput());
+
 		addListeners();
 		makeActions();
 		hookContextMenu();
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RepositoriesView.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RepositoriesView.java
index 6e381f3..59858b9 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RepositoriesView.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RepositoriesView.java
@@ -81,13 +81,7 @@ abstract class RepositoriesView extends ProvView {
 
 	protected void addListeners() {
 		super.addListeners();
-		listener = new StructuredViewerProvisioningListener(viewer, StructuredViewerProvisioningListener.PROV_EVENT_REPOSITORY, ProvAdminUIActivator.getDefault().getQueryProvider()) {
-			protected void refreshAll() {
-				// The content provider maintains the same deferred content manager
-				// unless input changes, so a viewer.refresh() is not enough.
-				RepositoriesView.this.refreshAll();
-			}
-		};
+		listener = new StructuredViewerProvisioningListener(viewer, getListenerEventTypes(), ProvAdminUIActivator.getDefault().getQueryProvider());
 		ProvUI.addProvisioningListener(listener);
 	}
 
@@ -181,6 +175,8 @@ abstract class RepositoriesView extends ProvView {
 
 	protected abstract boolean isRepository(Object element);
 
+	protected abstract int getListenerEventTypes();
+
 	protected List getVisualProperties() {
 		List list = super.getVisualProperties();
 		list.add(PreferenceConstants.PREF_HIDE_SYSTEM_REPOS);
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RepositoryManipulationDialog.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RepositoryManipulationDialog.java
index 4a68027..5309fb1 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RepositoryManipulationDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RepositoryManipulationDialog.java
@@ -19,6 +19,7 @@ import org.eclipse.equinox.internal.provisional.p2.ui.dialogs.RepositoryManipula
 import org.eclipse.equinox.internal.provisional.p2.ui.model.MetadataRepositories;
 import org.eclipse.equinox.internal.provisional.p2.ui.model.MetadataRepositoryElement;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.RemoveColocatedRepositoryOperation;
+import org.eclipse.equinox.internal.provisional.p2.ui.policy.IQueryProvider;
 import org.eclipse.equinox.internal.provisional.p2.ui.viewers.*;
 import org.eclipse.jface.action.Action;
 import org.eclipse.jface.action.IAction;
@@ -81,9 +82,11 @@ public class RepositoryManipulationDialog extends TrayDialog {
 		repositoryViewer = new TableViewer(composite, SWT.MULTI | SWT.FULL_SELECTION | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
 		setTableColumns(repositoryViewer.getTable());
 		repositoryViewer.setContentProvider(new RepositoryContentProvider(ProvSDKUIActivator.getDefault().getQueryProvider()));
-		repositoryViewer.setInput(new MetadataRepositories());
 		repositoryViewer.setLabelProvider(new ProvElementLabelProvider());
 
+		// Input last
+		repositoryViewer.setInput(getInput());
+
 		DropTarget target = new DropTarget(repositoryViewer.getControl(), DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK);
 		target.setTransfer(new Transfer[] {URLTransfer.getInstance(), FileTransfer.getInstance()});
 		target.addDropListener(new RepositoryManipulatorDropTarget(manipulator, repositoryViewer.getControl()));
@@ -99,7 +102,7 @@ public class RepositoryManipulationDialog extends TrayDialog {
 		Composite verticalButtonBar = (Composite) createVerticalButtonBar(composite);
 		data = new GridData(GridData.FILL_VERTICAL);
 		verticalButtonBar.setLayoutData(data);
-		listener = new StructuredViewerProvisioningListener(repositoryViewer, StructuredViewerProvisioningListener.PROV_EVENT_REPOSITORY, ProvSDKUIActivator.getDefault().getQueryProvider());
+		listener = new StructuredViewerProvisioningListener(repositoryViewer, StructuredViewerProvisioningListener.PROV_EVENT_METADATA_REPOSITORY, ProvSDKUIActivator.getDefault().getQueryProvider());
 		ProvUI.addProvisioningListener(listener);
 		composite.addDisposeListener(new DisposeListener() {
 			public void widgetDisposed(DisposeEvent event) {
@@ -210,4 +213,11 @@ public class RepositoryManipulationDialog extends TrayDialog {
 		});
 		return composite;
 	}
+
+	private Object getInput() {
+		MetadataRepositories input = new MetadataRepositories();
+		input.setQueryProvider(ProvSDKUIActivator.getDefault().getQueryProvider());
+		input.setQueryType(IQueryProvider.METADATA_REPOS);
+		return input;
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java
index be50b37..5f09417 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java
@@ -92,7 +92,7 @@ public class UpdateAndInstallDialog extends TrayDialog {
 				if (event.getProperty().equals(PreferenceConstants.PREF_AUTO_UPDATE_ENABLED))
 					checkBox.setSelection(store.getBoolean(PreferenceConstants.PREF_AUTO_UPDATE_ENABLED));
 				if (event.getProperty().equals(PreferenceConstants.PREF_SHOW_LATEST_VERSION))
-					group.getAvailableIUGroup().refreshAll();
+					group.getAvailableIUGroup().getStructuredViewer().refresh();
 			}
 		};
 		store.addPropertyChangeListener(preferenceListener);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
index 6631e87..888ad19 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
@@ -138,6 +138,8 @@ public class ProvUIMessages extends NLS {
 	public static String AvailableIUContentProvider_JobName;
 	public static String AvailableIUContentProvider_PlaceholderLabel;
 	public static String AvailableIUElement_ProfileNotFound;
+	public static String Label_Profiles;
+	public static String Label_Repositories;
 	public static String MetadataRepositoryElement_RepositoryLoadError;
 	public static String UpdateAction_ExceptionDuringUpdateCheck;
 	public static String UpdateAction_UpdateInformationTitle;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
index 77ac11d..fca183f 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
@@ -146,6 +146,8 @@ AvailableIUContentProvider_FailureRetrievingContents={0} is not available.
 AvailableIUContentProvider_JobName=Fetching contents for {0}
 AvailableIUContentProvider_PlaceholderLabel=Retrieving contents of {0}...
 AvailableIUElement_ProfileNotFound=Could not find profile to use for size computation.
+Label_Profiles=All Software Profiles
+Label_Repositories=Known Repositories
 MetadataRepositoryElement_RepositoryLoadError=Error loading repository {0}
 QueryableArtifactRepositoryManager_RepositoryQueryProgress=Getting artifact repositories
 QueryableMetadataRepositoryManager_RepositoryQueryProgress=Getting repositories
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/RemoteQueriedElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/RemoteQueriedElement.java
index f594a0d..bd086dc 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/RemoteQueriedElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/RemoteQueriedElement.java
@@ -11,6 +11,7 @@
 package org.eclipse.equinox.internal.p2.ui.model;
 
 import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.OperationCanceledException;
 import org.eclipse.core.runtime.jobs.ISchedulingRule;
 import org.eclipse.equinox.internal.provisional.p2.ui.query.ElementQueryDescriptor;
 import org.eclipse.equinox.internal.provisional.p2.ui.query.QueriedElement;
@@ -30,7 +31,15 @@ public abstract class RemoteQueriedElement extends QueriedElement implements IDe
 	}
 
 	public void fetchDeferredChildren(Object o, IElementCollector collector, IProgressMonitor monitor) {
-		collector.add(fetchChildren(o, monitor), monitor);
+		try {
+			Object[] children = fetchChildren(o, monitor);
+			if (!monitor.isCanceled()) {
+				collector.add(children, monitor);
+			}
+		} catch (OperationCanceledException e) {
+			// Nothing to do
+		}
+		collector.done();
 
 	}
 
@@ -42,7 +51,7 @@ public abstract class RemoteQueriedElement extends QueriedElement implements IDe
 		if (getQueryProvider() == null)
 			return new Object[0];
 		ElementQueryDescriptor queryDescriptor = getQueryProvider().getQueryDescriptor(this, getQueryType());
-		if (queryDescriptor == null || !queryDescriptor.isComplete())
+		if (queryDescriptor == null || !isSufficientForQuery(queryDescriptor))
 			return new Object[0];
 		queryDescriptor.queryable.query(queryDescriptor.query, queryDescriptor.collector, monitor);
 		return queryDescriptor.collector.toArray(Object.class);
@@ -55,4 +64,15 @@ public abstract class RemoteQueriedElement extends QueriedElement implements IDe
 	public boolean isContainer() {
 		return true;
 	}
+
+	/**
+	 * Return whether the query descriptor is sufficient for this element to complete the query.
+	 * The default implementation requires the descriptor to be complete.  Subclasses may override.
+	 * 
+	 * @param queryDescriptor the query descriptor in question
+	 * @return <code>true</code> if the descriptor is sufficient, <code>false</code> if it is not.
+	 */
+	protected boolean isSufficientForQuery(ElementQueryDescriptor queryDescriptor) {
+		return queryDescriptor.isComplete();
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
index 4357b0a..b3c7cd4 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
@@ -62,19 +62,17 @@ public class AvailableIUGroup extends StructuredIUGroup {
 		availableIUViewer.setComparator(new IUComparator(IUComparator.IU_NAME));
 		availableIUViewer.setComparer(new ProvElementComparer());
 
-		// Now the content.
+		// Now the content provider.
 		availableIUViewer.setContentProvider(new DeferredQueryContentProvider(getQueryProvider()));
-		availableIUViewer.setInput(getInput());
 
 		// Now the presentation, columns before label provider.
 		setTreeColumns(availableIUViewer.getTree());
 		availableIUViewer.setLabelProvider(labelProvider);
 
-		final StructuredViewerProvisioningListener listener = new StructuredViewerProvisioningListener(availableIUViewer, StructuredViewerProvisioningListener.PROV_EVENT_REPOSITORY, getQueryProvider()) {
-			protected void refreshAll() {
-				AvailableIUGroup.this.refreshAll();
-			}
-		};
+		// Input last.
+		availableIUViewer.setInput(getInput());
+
+		final StructuredViewerProvisioningListener listener = new StructuredViewerProvisioningListener(availableIUViewer, StructuredViewerProvisioningListener.PROV_EVENT_METADATA_REPOSITORY, getQueryProvider());
 		ProvUIActivator.getDefault().addProvisioningListener(listener);
 
 		availableIUViewer.getControl().addDisposeListener(new DisposeListener() {
@@ -100,12 +98,11 @@ public class AvailableIUGroup extends StructuredIUGroup {
 	Object getInput() {
 		MetadataRepositories input = new MetadataRepositories(getProvisioningContext().getMetadataRepositories());
 		input.setQueryType(IQueryProvider.AVAILABLE_IUS);
+		input.setQueryProvider(getQueryProvider());
 		return input;
 	}
 
-	public void refreshAll() {
-		// The content provider caches the children unless input changes,
-		// so a viewer.refresh() is not enough.
-		getStructuredViewer().setInput(getInput());
+	public StructuredViewer getStructuredViewer() {
+		return super.getStructuredViewer();
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledIUGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledIUGroup.java
index e8d9a56..6c7e974 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledIUGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstalledIUGroup.java
@@ -66,17 +66,15 @@ public class InstalledIUGroup extends StructuredIUGroup {
 
 		// Now the content.
 		installedIUViewer.setContentProvider(new DeferredQueryContentProvider(getQueryProvider()));
-		installedIUViewer.setInput(getInput());
 
 		// Now the visuals, columns before labels.
 		setTableColumns(installedIUViewer.getTable());
 		installedIUViewer.setLabelProvider(new IUDetailsLabelProvider());
 
-		final StructuredViewerProvisioningListener listener = new StructuredViewerProvisioningListener(installedIUViewer, StructuredViewerProvisioningListener.PROV_EVENT_IU | StructuredViewerProvisioningListener.PROV_EVENT_PROFILE, getQueryProvider()) {
-			protected void refreshAll() {
-				InstalledIUGroup.this.refreshAll();
-			}
-		};
+		// Input last.
+		installedIUViewer.setInput(getInput());
+
+		final StructuredViewerProvisioningListener listener = new StructuredViewerProvisioningListener(installedIUViewer, StructuredViewerProvisioningListener.PROV_EVENT_IU | StructuredViewerProvisioningListener.PROV_EVENT_PROFILE, getQueryProvider());
 		ProvUIActivator.getDefault().addProvisioningListener(listener);
 		installedIUViewer.getControl().addDisposeListener(new DisposeListener() {
 			public void widgetDisposed(DisposeEvent e) {
@@ -99,12 +97,8 @@ public class InstalledIUGroup extends StructuredIUGroup {
 	}
 
 	Object getInput() {
-		return new ProfileElement(profileId);
-	}
-
-	public void refreshAll() {
-		// The content provider caches the children unless input changes,
-		// so a viewer.refresh() is not enough.
-		getStructuredViewer().setInput(getInput());
+		ProfileElement element = new ProfileElement(profileId);
+		element.setQueryProvider(getQueryProvider());
+		return element;
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/ArtifactRepositories.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/ArtifactRepositories.java
index 2da485c..3d71310 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/ArtifactRepositories.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/ArtifactRepositories.java
@@ -10,8 +10,10 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.provisional.p2.ui.model;
 
+import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
+import org.eclipse.equinox.internal.p2.ui.model.RemoteQueriedElement;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.IQueryProvider;
-import org.eclipse.equinox.internal.provisional.p2.ui.query.QueriedElement;
+import org.eclipse.equinox.internal.provisional.p2.ui.query.ElementQueryDescriptor;
 
 /**
  * Element class that represents the root of an artifact
@@ -21,10 +23,29 @@ import org.eclipse.equinox.internal.provisional.p2.ui.query.QueriedElement;
  * @since 3.4
  *
  */
-public class ArtifactRepositories extends QueriedElement {
+public class ArtifactRepositories extends RemoteQueriedElement {
 
 	protected int getQueryType() {
 		return IQueryProvider.ARTIFACT_REPOS;
 	}
 
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.ui.model.IWorkbenchAdapter#getLabel(java.lang.Object)
+	 */
+	public String getLabel(Object o) {
+		return ProvUIMessages.Label_Repositories;
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * Overridden because we know that the queryable artifact repo manager can handle a null query
+	 * @see org.eclipse.equinox.internal.p2.ui.model.RemoteQueriedElement#isSufficientForQuery(org.eclipse.equinox.internal.provisional.p2.ui.query.ElementQueryDescriptor)
+	 */
+	// TODO this is not ideal
+	// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=224504
+	protected boolean isSufficientForQuery(ElementQueryDescriptor queryDescriptor) {
+		return queryDescriptor.collector != null && queryDescriptor.queryable != null;
+	}
+
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositories.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositories.java
index 9c16cbd..320ebd1 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositories.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/MetadataRepositories.java
@@ -11,8 +11,10 @@
 package org.eclipse.equinox.internal.provisional.p2.ui.model;
 
 import java.net.URL;
+import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
+import org.eclipse.equinox.internal.p2.ui.model.RemoteQueriedElement;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.IQueryProvider;
-import org.eclipse.equinox.internal.provisional.p2.ui.query.QueriedElement;
+import org.eclipse.equinox.internal.provisional.p2.ui.query.ElementQueryDescriptor;
 
 /**
  * Element class that represents some collection of metadata repositories.
@@ -24,7 +26,7 @@ import org.eclipse.equinox.internal.provisional.p2.ui.query.QueriedElement;
  * @since 3.4
  *
  */
-public class MetadataRepositories extends QueriedElement {
+public class MetadataRepositories extends RemoteQueriedElement {
 
 	private URL[] metadataRepositories = null;
 	private int queryType = IQueryProvider.METADATA_REPOS;
@@ -60,4 +62,23 @@ public class MetadataRepositories extends QueriedElement {
 		return metadataRepositories;
 	}
 
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.ui.model.IWorkbenchAdapter#getLabel(java.lang.Object)
+	 */
+	public String getLabel(Object o) {
+		return ProvUIMessages.Label_Repositories;
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * Overridden because we know that the queryable metadata repo manager can handle a null query
+	 * @see org.eclipse.equinox.internal.p2.ui.model.RemoteQueriedElement#isSufficientForQuery(org.eclipse.equinox.internal.provisional.p2.ui.query.ElementQueryDescriptor)
+	 */
+	// TODO this is not ideal
+	// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=224504
+	protected boolean isSufficientForQuery(ElementQueryDescriptor queryDescriptor) {
+		return queryDescriptor.collector != null && queryDescriptor.queryable != null;
+	}
+
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/Profiles.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/Profiles.java
index b47a4a5..90bc7fa 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/Profiles.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/Profiles.java
@@ -10,6 +10,7 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.provisional.p2.ui.model;
 
+import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.IQueryProvider;
 import org.eclipse.equinox.internal.provisional.p2.ui.query.QueriedElement;
 
@@ -26,15 +27,6 @@ public class Profiles extends QueriedElement {
 	/*
 	 * (non-Javadoc)
 	 * 
-	 * @see org.eclipse.ui.model.IWorkbenchAdapter#getLabel(java.lang.Object)
-	 */
-	public String getLabel(Object o) {
-		return null;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * 
 	 * @see org.eclipse.equinox.internal.provisional.p2.ui.model.RepositoryElement#getParent(java.lang.Object)
 	 */
 	public Object getParent(Object o) {
@@ -44,4 +36,13 @@ public class Profiles extends QueriedElement {
 	protected int getQueryType() {
 		return IQueryProvider.PROFILES;
 	}
+
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.ui.model.IWorkbenchAdapter#getLabel(java.lang.Object)
+	 */
+	public String getLabel(Object o) {
+		return ProvUIMessages.Label_Profiles;
+	}
+
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/QueryableMetadataRepositoryManager.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/QueryableMetadataRepositoryManager.java
index 5950a45..4896e15 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/QueryableMetadataRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/QueryableMetadataRepositoryManager.java
@@ -76,7 +76,11 @@ public class QueryableMetadataRepositoryManager implements IQueryable {
 			repoURLs = manager.getKnownRepositories(flags);
 		}
 		SubMonitor sub = SubMonitor.convert(monitor, ProvUIMessages.QueryableMetadataRepositoryManager_RepositoryQueryProgress, repoURLs.length * 2);
+		if (sub.isCanceled())
+			return result;
 		for (int i = 0; i < repoURLs.length; i++) {
+			if (sub.isCanceled())
+				return result;
 			if (query == null) {
 				result.accept(repoURLs[i]);
 				sub.worked(2);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/DeferredQueryContentProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/DeferredQueryContentProvider.java
index 7c3be29..70020a4 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/DeferredQueryContentProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/DeferredQueryContentProvider.java
@@ -35,6 +35,8 @@ public class DeferredQueryContentProvider implements ITreeContentProvider {
 	}
 
 	public void inputChanged(Viewer v, Object oldInput, Object newInput) {
+		if (manager != null)
+			manager.cancel(oldInput);
 		if (v instanceof AbstractTreeViewer) {
 			manager = new DeferredTreeContentManager((AbstractTreeViewer) v);
 		}
@@ -44,7 +46,7 @@ public class DeferredQueryContentProvider implements ITreeContentProvider {
 		if (input instanceof QueriedElement) {
 			QueriedElement element = (QueriedElement) input;
 			element.setQueryProvider(queryProvider);
-			return element.getChildren(null);
+			return getChildren(element);
 		}
 		return null;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/StructuredViewerProvisioningListener.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/StructuredViewerProvisioningListener.java
index 738cd35..511ac72 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/StructuredViewerProvisioningListener.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/StructuredViewerProvisioningListener.java
@@ -13,6 +13,7 @@ package org.eclipse.equinox.internal.provisional.p2.ui.viewers;
 
 import java.util.EventObject;
 import org.eclipse.equinox.internal.provisional.p2.core.eventbus.SynchronousProvisioningListener;
+import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.RepositoryEvent;
 import org.eclipse.equinox.internal.provisional.p2.engine.ProfileEvent;
 import org.eclipse.equinox.internal.provisional.p2.ui.model.ProfileElement;
@@ -31,9 +32,10 @@ import org.eclipse.ui.PlatformUI;
  */
 public class StructuredViewerProvisioningListener implements SynchronousProvisioningListener {
 
-	public static final int PROV_EVENT_REPOSITORY = 0x0001;
+	public static final int PROV_EVENT_METADATA_REPOSITORY = 0x0001;
 	public static final int PROV_EVENT_IU = 0x0002;
 	public static final int PROV_EVENT_PROFILE = 0x0004;
+	public static final int PROV_EVENT_ARTIFACT_REPOSITORY = 0x0008;
 
 	int eventTypes = 0;
 	StructuredViewer viewer;
@@ -72,19 +74,22 @@ public class StructuredViewerProvisioningListener implements SynchronousProvisio
 					}
 				});
 			}
-		} else if (o instanceof RepositoryEvent && (eventTypes & PROV_EVENT_REPOSITORY) == PROV_EVENT_REPOSITORY) {
+		} else if (o instanceof RepositoryEvent) {
 			RepositoryEvent event = (RepositoryEvent) o;
-			if (event.getKind() == RepositoryEvent.ADDED || event.getKind() == RepositoryEvent.REMOVED) {
-				display.asyncExec(new Runnable() {
-					public void run() {
-						IWorkbench workbench = PlatformUI.getWorkbench();
-						if (workbench.isClosing())
-							return;
-						Control control = viewer.getControl();
-						if (control != null && !control.isDisposed())
-							refreshAll();
-					}
-				});
+			// Do not refresh unless this is the type of repo that we are interested in
+			if ((event.getRepositoryType() == IRepository.TYPE_METADATA && (eventTypes & PROV_EVENT_METADATA_REPOSITORY) == PROV_EVENT_METADATA_REPOSITORY) || (event.getRepositoryType() == IRepository.TYPE_ARTIFACT && (eventTypes & PROV_EVENT_ARTIFACT_REPOSITORY) == PROV_EVENT_ARTIFACT_REPOSITORY)) {
+				if (event.getKind() == RepositoryEvent.ADDED || event.getKind() == RepositoryEvent.REMOVED) {
+					display.asyncExec(new Runnable() {
+						public void run() {
+							IWorkbench workbench = PlatformUI.getWorkbench();
+							if (workbench.isClosing())
+								return;
+							Control control = viewer.getControl();
+							if (control != null && !control.isDisposed())
+								refreshAll();
+						}
+					});
+				}
 			}
 		}
 
@@ -92,7 +97,7 @@ public class StructuredViewerProvisioningListener implements SynchronousProvisio
 
 	/**
 	 * Refresh the entire structure of the viewer.  Subclasses may
-	 * override to ensure that any caching of content providers or
+	 * override to ensure that any caching done in content providers or
 	 * model elements is refreshed before the viewer is refreshed.
 	 */
 	protected void refreshAll() {

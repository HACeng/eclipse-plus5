commit 3bf7421ae30ed2142ff3e542b61bc0d7a1de9d6e
Author: Susan Franklin <sfranklin>
Date:   Wed Oct 10 17:09:56 2007 +0000

    Bug 204290 - [prov] [ui] clean up and centralize customization of label providers

27	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/StaticContentProvider.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AllArtifactRepositories.java
72	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AvailableIUElement.java
42	8	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUDetailsLabelProvider.java
14	7	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUPropertyFilter.java
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/StaticContentProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/StaticContentProvider.java
new file mode 100644
index 0000000..038d3d6
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/StaticContentProvider.java
@@ -0,0 +1,27 @@
+/**
+ * 
+ */
+package org.eclipse.equinox.internal.p2.ui;
+
+import org.eclipse.jface.viewers.IStructuredContentProvider;
+import org.eclipse.jface.viewers.Viewer;
+
+public final class StaticContentProvider implements IStructuredContentProvider {
+	private final Object[] elements;
+
+	StaticContentProvider(Object[] elements) {
+		this.elements = elements;
+	}
+
+	public Object[] getElements(Object inputElement) {
+		return elements;
+	}
+
+	public void dispose() {
+		// nothing to dispose
+	}
+
+	public void inputChanged(Viewer viewer, Object oldInput, Object newInput) {
+		// input is static
+	}
+}
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AllArtifactRepositories.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AllArtifactRepositories.java
index ea5666b..a28059c 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AllArtifactRepositories.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AllArtifactRepositories.java
@@ -49,7 +49,7 @@ public class AllArtifactRepositories extends ProvElement {
 
 	/*
 	 * (non-Javadoc)
-	 * @see org.eclipse.equinox.p2.ui.model.RepositoryElement#getParent(java.lang.Object)
+	 * @see org.eclipse.equinox.p2.ui.model.ProvElement#getParent(java.lang.Object)
 	 */
 	public Object getParent(Object o) {
 		return null;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AvailableIUElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AvailableIUElement.java
new file mode 100644
index 0000000..de033e1
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AvailableIUElement.java
@@ -0,0 +1,72 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.p2.ui.model;
+
+import org.eclipse.core.runtime.IAdaptable;
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.metadata.InstallableUnit;
+import org.eclipse.equinox.p2.ui.ProvUIImages;
+
+/**
+ * Element wrapper class for IU's that are available for installation.
+ * Used instead of the plain IU when additional information such as sizing
+ * info is necessary.
+ * 
+ * @since 3.4
+ */
+public class AvailableIUElement extends ProvElement {
+
+	int size;
+	IInstallableUnit iu;
+
+	public AvailableIUElement(IInstallableUnit iu, int size) {
+		this.size = size;
+		this.iu = iu;
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * 
+	 * @see org.eclipse.equinox.p2.ui.model.ProvElement#getImageID(java.lang.Object)
+	 */
+	protected String getImageID(Object obj) {
+		return ProvUIImages.IMG_IU;
+	}
+
+	public String getLabel(Object o) {
+		return iu.getId();
+	}
+
+	protected Object[] fetchChildren(Object o, IProgressMonitor monitor, IAdaptable uiInfo) {
+		return null;
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.equinox.p2.ui.model.ProvElement#getParent(java.lang.Object)
+	 */
+	public Object getParent(Object o) {
+		return null;
+	}
+
+	public Object getAdapter(Class adapter) {
+		if (adapter == IInstallableUnit.class)
+			return iu;
+		if (adapter == InstallableUnit.class && iu instanceof InstallableUnit)
+			return iu;
+		return super.getAdapter(adapter);
+	}
+
+	public int getSize() {
+		return size;
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUDetailsLabelProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUDetailsLabelProvider.java
index 2aff75f..ab51adc 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUDetailsLabelProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUDetailsLabelProvider.java
@@ -11,51 +11,79 @@
 
 package org.eclipse.equinox.p2.ui.viewers;
 
+import org.eclipse.core.runtime.Assert;
 import org.eclipse.core.runtime.IAdaptable;
+import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.metadata.IInstallableUnitConstants;
 import org.eclipse.equinox.p2.ui.ProvUIImages;
+import org.eclipse.equinox.p2.ui.model.AvailableIUElement;
 import org.eclipse.jface.viewers.ITableLabelProvider;
 import org.eclipse.jface.viewers.LabelProvider;
 import org.eclipse.swt.graphics.Image;
 
 /**
- * Label provider for showing IU's in a table.
+ * Label provider for showing IU's in a table.  Clients can configure
+ * what is shown in each column.
  * 
  * @since 3.4
  */
 public class IUDetailsLabelProvider extends LabelProvider implements ITableLabelProvider {
-	final static int COLUMN_NAME = 0;
-	final static int COLUMN_VERSION = 1;
+	public final static int COLUMN_ID = 0;
+	public final static int COLUMN_NAME = 1;
+	public final static int COLUMN_VERSION = 2;
+	public final static int COLUMN_SIZE = 3;
+
+	final static int PRIMARY_COLUMN = 0;
 	final static String BLANK = ""; //$NON-NLS-1$
 
+	private int[] columnConfig = {COLUMN_ID, COLUMN_VERSION};
+
+	public IUDetailsLabelProvider() {
+		// use default column config
+	}
+
+	public IUDetailsLabelProvider(int[] columnConfig) {
+		Assert.isLegal(columnConfig.length > 0);
+		this.columnConfig = columnConfig;
+	}
+
 	public String getText(Object obj) {
-		return getColumnText(obj, COLUMN_NAME);
+		return getColumnText(obj, columnConfig[0]);
 	}
 
 	public Image getImage(Object obj) {
-		return getColumnImage(obj, COLUMN_NAME);
+		return getColumnImage(obj, columnConfig[0]);
 	}
 
 	public String getColumnText(Object element, int columnIndex) {
+		int columnContent = COLUMN_ID;
+		if (columnIndex <= columnConfig.length) {
+			columnContent = columnConfig[columnIndex];
+		}
+
 		IInstallableUnit iu = getIU(element);
 		if (iu == null)
 			return BLANK;
 
-		switch (columnIndex) {
+		switch (columnContent) {
+			case COLUMN_ID :
+				return iu.getId();
 			case COLUMN_NAME :
 				String name = iu.getProperty(IInstallableUnitConstants.NAME);
 				if (name != null)
 					return name;
-				return iu.getId();
+				return BLANK;
 			case COLUMN_VERSION :
 				return iu.getVersion().toString();
+			case COLUMN_SIZE :
+				return getIUSize(element);
 		}
 		return BLANK;
 	}
 
 	public Image getColumnImage(Object element, int index) {
-		if (index == COLUMN_NAME && getIU(element) != null) {
+		if (index == PRIMARY_COLUMN && getIU(element) != null) {
 			return ProvUIImages.getImage(ProvUIImages.IMG_IU);
 		}
 		return null;
@@ -68,4 +96,10 @@ public class IUDetailsLabelProvider extends LabelProvider implements ITableLabel
 			return (IInstallableUnit) ((IAdaptable) element).getAdapter(IInstallableUnit.class);
 		return null;
 	}
+
+	private String getIUSize(Object element) {
+		if (element instanceof AvailableIUElement)
+			return Integer.toString(((AvailableIUElement) element).getSize());
+		return ProvUIMessages.IUDetailsLabelProvider_Unknown;
+	}
 }
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUPropertyFilter.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUPropertyFilter.java
index 932059c..d579b81 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUPropertyFilter.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUPropertyFilter.java
@@ -33,17 +33,24 @@ public class IUPropertyFilter extends ViewerFilter {
 	}
 
 	public boolean select(Viewer viewer, Object parentElement, Object element) {
-		IInstallableUnit iu = null;
-		if (element instanceof IInstallableUnit) {
-			iu = (IInstallableUnit) element;
-		} else if (element instanceof IAdaptable) {
-			iu = (IInstallableUnit) ((IAdaptable) element).getAdapter(IInstallableUnit.class);
-		}
+		IInstallableUnit iu = getIU(element);
 		if (iu == null)
 			return false;
-		String prop = iu.getProperty(propertyName);
+		String prop = getProperty(iu, parentElement, propertyName);
 		if (prop == null)
 			return false;
 		return prop.equals(propertyValue);
 	}
+
+	protected IInstallableUnit getIU(Object element) {
+		if (element instanceof IInstallableUnit)
+			return (IInstallableUnit) element;
+		if (element instanceof IAdaptable)
+			return (IInstallableUnit) ((IAdaptable) element).getAdapter(IInstallableUnit.class);
+		return null;
+	}
+
+	protected String getProperty(IInstallableUnit iu, Object parentElement, String key) {
+		return iu.getProperty(key);
+	}
 }
commit 4a42b827b23acdc3e9e4f83ee53939da9b143674
Author: Susan Franklin <sfranklin>
Date:   Wed Oct 10 17:16:18 2007 +0000

    Bug 204290 - [prov] [ui] clean up and centralize customization of label providers

16	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvUI.java
2	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUDetailsLabelProvider.java
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvUI.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvUI.java
index a09162d..b3bcb8c 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvUI.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvUI.java
@@ -12,6 +12,7 @@
 package org.eclipse.equinox.p2.ui;
 
 import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.p2.ui.viewers.IUDetailsLabelProvider;
 import org.eclipse.swt.widgets.Display;
 import org.eclipse.swt.widgets.Shell;
 import org.eclipse.ui.IWorkbenchWindow;
@@ -19,12 +20,14 @@ import org.eclipse.ui.PlatformUI;
 import org.eclipse.ui.statushandlers.StatusManager;
 
 /**
- * Generic provisioning UI utility methods
+ * Generic provisioning UI utility and policy methods.
  * 
  * @since 3.4
  */
 public class ProvUI {
 
+	private static int[] iuColumnConfig = new int[] {IUDetailsLabelProvider.COLUMN_ID, IUDetailsLabelProvider.COLUMN_VERSION};
+
 	/**
 	 * Make an <code>IAdaptable</code> that adapts to the specified shell,
 	 * suitable for passing for passing to any
@@ -78,4 +81,16 @@ public class ProvUI {
 		IStatus status = new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, 0, message, t);
 		StatusManager.getManager().handle(status, StatusManager.SHOW | StatusManager.LOG);
 	}
+
+	public static void reportStatus(IStatus status) {
+		StatusManager.getManager().handle(status, StatusManager.SHOW | StatusManager.LOG);
+	}
+
+	public static int[] getIUDetailsColumns() {
+		return iuColumnConfig;
+	}
+
+	public static void setIUDetailsColumns(int[] columnConfig) {
+		iuColumnConfig = columnConfig;
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUDetailsLabelProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUDetailsLabelProvider.java
index ab51adc..41dc031 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUDetailsLabelProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUDetailsLabelProvider.java
@@ -16,6 +16,7 @@ import org.eclipse.core.runtime.IAdaptable;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.metadata.IInstallableUnitConstants;
+import org.eclipse.equinox.p2.ui.ProvUI;
 import org.eclipse.equinox.p2.ui.ProvUIImages;
 import org.eclipse.equinox.p2.ui.model.AvailableIUElement;
 import org.eclipse.jface.viewers.ITableLabelProvider;
@@ -37,7 +38,7 @@ public class IUDetailsLabelProvider extends LabelProvider implements ITableLabel
 	final static int PRIMARY_COLUMN = 0;
 	final static String BLANK = ""; //$NON-NLS-1$
 
-	private int[] columnConfig = {COLUMN_ID, COLUMN_VERSION};
+	private int[] columnConfig = ProvUI.getIUDetailsColumns();
 
 	public IUDetailsLabelProvider() {
 		// use default column config

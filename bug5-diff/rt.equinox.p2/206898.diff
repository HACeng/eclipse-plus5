commit 3bf652af7e78eb764bdd029d6b863bc85564bc2e
Author: DJ Houghton <dj>
Date:   Tue Jan 22 21:53:11 2008 +0000

    Bug 206898 - [prov] directory watcher and links folders

80	0	bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/update/Configuration.java
34	0	bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/update/ConfigurationConstants.java
57	38	bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/update/ConfigurationParser.java
133	0	bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/update/ConfigurationWriter.java
173	0	bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/update/LinksManager.java
5	4	bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/update/PlatformXmlListener.java
8	4	bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/update/SiteDelta.java
33	0	bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/update/SiteWatcher.java
66	0	bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/update/Utils.java
122	0	bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/update/XMLWriter.java
80	0	bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/update/Configuration.java
34	0	bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/update/ConfigurationConstants.java
57	38	bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/update/ConfigurationParser.java
133	0	bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/update/ConfigurationWriter.java
173	0	bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/update/LinksManager.java
5	4	bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/update/PlatformXmlListener.java
8	4	bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/update/SiteDelta.java
33	0	bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/update/SiteWatcher.java
66	0	bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/update/Utils.java
122	0	bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/update/XMLWriter.java
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/update/Configuration.java b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/update/Configuration.java
new file mode 100644
index 0000000..702b54e
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/update/Configuration.java
@@ -0,0 +1,80 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.update;
+
+import java.io.File;
+import java.util.ArrayList;
+import java.util.List;
+import org.eclipse.equinox.p2.core.ProvisionException;
+
+/**
+ * @since 1.0
+ */
+public class Configuration {
+
+	private List sites = new ArrayList();
+	String date;
+	boolean transientProperty;
+	String version;
+	String shared_ur;
+
+	public static Configuration load(File location) throws ProvisionException {
+		return ConfigurationParser.parse(location);
+	}
+
+	public Configuration() {
+		super();
+	}
+
+	public void save(File location) throws ProvisionException {
+		ConfigurationWriter.save(this, location);
+	}
+
+	public String getSharedUR() {
+		return shared_ur;
+	}
+
+	public void setSharedUR(String value) {
+		shared_ur = value;
+	}
+
+	public List getSites() {
+		return sites;
+	}
+
+	public void add(Site site) {
+		sites.add(site);
+	}
+
+	public String getDate() {
+		return date;
+	}
+
+	public void setDate(String date) {
+		this.date = date;
+	}
+
+	public void setVersion(String value) {
+		version = value;
+	}
+
+	public String getVersion() {
+		return version;
+	}
+
+	public void setTransient(boolean value) {
+		transientProperty = value;
+	}
+
+	public boolean isTransient() {
+		return transientProperty;
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/update/ConfigurationConstants.java b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/update/ConfigurationConstants.java
new file mode 100644
index 0000000..10c096a
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/update/ConfigurationConstants.java
@@ -0,0 +1,34 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.update;
+
+/**
+ * @since 1.0
+ */
+public interface ConfigurationConstants {
+
+	final String ELEMENT_CONFIG = "config"; //$NON-NLS-1$
+	final String ELEMENT_FEATURE = "feature"; //$NON-NLS-1$
+	final String ELEMENT_SITE = "site"; //$NON-NLS-1$
+
+	final String ATTRIBUTE_DATE = "date"; //$NON-NLS-1$
+	final String ATTRIBUTE_ENABLED = "enabled"; //$NON-NLS-1$
+	final String ATTRIBUTE_ID = "id"; //$NON-NLS-1$
+	final String ATTRIBUTE_LINKFILE = "linkfile"; //$NON-NLS-1$
+	final String ATTRIBUTE_LIST = "list"; //$NON-NLS-1$
+	final String ATTRIBUTE_POLICY = "policy"; //$NON-NLS-1$
+	final String ATTRIBUTE_SHARED_UR = "shared_ur"; //$NON-NLS-1$
+	final String ATTRIBUTE_TRANSIENT = "transient"; //$NON-NLS-1$
+	final String ATTRIBUTE_UPDATEABLE = "updateable"; //$NON-NLS-1$
+	final String ATTRIBUTE_URL = "url"; //$NON-NLS-1$
+	final String ATTRIBUTE_VERSION = "version"; //$NON-NLS-1$
+
+}
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/update/ConfigurationParser.java b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/update/ConfigurationParser.java
index 94fbdec..3c519c5 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/update/ConfigurationParser.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/update/ConfigurationParser.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others.
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials 
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -11,30 +11,26 @@
 package org.eclipse.equinox.internal.p2.update;
 
 import java.io.*;
-import java.util.*;
+import java.util.StringTokenizer;
 import javax.xml.parsers.*;
 import org.eclipse.equinox.p2.core.ProvisionException;
 import org.w3c.dom.*;
 import org.xml.sax.SAXException;
 
 /**
- * Parser for platform.xml files. Returns Site objects.
+ * Parser for platform.xml files. 
+ * 
  * @since 1.0
  */
-public class ConfigurationParser {
-
-	private static final String ELEMENT_FEATURE = "feature"; //$NON-NLS-1$
-	private static final String ELEMENT_SITE = "site"; //$NON-NLS-1$
-	private static final String ATTRIBUTE_POLICY = "policy"; //$NON-NLS-1$
-	private static final String ATTRIBUTE_ENABLED = "enabled"; //$NON-NLS-1$
-	private static final String ATTRIBUTE_UPDATEABLE = "updateable"; //$NON-NLS-1$
-	private static final String ATTRIBUTE_URL = "url"; //$NON-NLS-1$
-	private static final String ATTRIBUTE_LINKFILE = "linkfile"; //$NON-NLS-1$
-	private static final String ATTRIBUTE_LIST = "list"; //$NON-NLS-1$
-	private static final String ATTRIBUTE_ID = "id"; //$NON-NLS-1$
-	private static final String ATTRIBUTE_VERSION = "version"; //$NON-NLS-1$
+public class ConfigurationParser implements ConfigurationConstants {
 
-	private List sites = new ArrayList();
+	/*
+	 * Parse the given file handle which points to a platform.xml file and a configuration object.
+	 * Returns null if the file doesn't exist.
+	 */
+	public static Configuration parse(File file) throws ProvisionException {
+		return new ConfigurationParser().internalParse(file);
+	}
 
 	/*
 	 * Create a feature object based on the given DOM node. 
@@ -131,43 +127,35 @@ public class ConfigurationParser {
 	}
 
 	/*
-	 * Parse the given file handle which points to a platform.xml file and return
-	 * a list of site objects. Returns an empty array if the file doesn't exist.
+	 * Parse the given file handle which points to a platform.xml file and a configuration object.
+	 * Returns null if the file doesn't exist.
 	 */
-	public Site[] parse(File file) throws ProvisionException {
+	private Configuration internalParse(File file) throws ProvisionException {
 		if (!file.exists())
-			return new Site[0];
-		try {
-			return parse(new BufferedInputStream(new FileInputStream(file)));
-		} catch (IOException e) {
-			throw new ProvisionException("An error occurred reading the platform configuration file: " + file, e);
-		}
-	}
-
-	/*
-	 * Parse the given input stream which points to a platform.xml file and
-	 * return a list of site objects.
-	 */
-	public Site[] parse(InputStream input) throws ProvisionException {
+			return null;
 		try {
+			InputStream input = new BufferedInputStream(new FileInputStream(file));
 			Document document = load(input);
-			process(document);
+			return process(document);
 		} catch (IOException e) {
-			throw new ProvisionException("An error occurred reading the platform configuration", e);
+			throw new ProvisionException("An error occurred reading the platform configuration file: " + file, e);
 		} catch (ParserConfigurationException e) {
 			throw new ProvisionException("An error occurred reading the platform configuration", e);
 		} catch (SAXException e) {
 			throw new ProvisionException("An error occurred reading the platform configuration", e);
 		}
-		return (Site[]) sites.toArray(new Site[sites.size()]);
 	}
 
 	/*
 	 * Process the given DOM document and create the appropriate
 	 * site objects.
 	 */
-	private void process(Document document) {
-		NodeList children = document.getFirstChild().getChildNodes();
+	private Configuration process(Document document) {
+		Node node = getConfigElement(document);
+		if (node == null)
+			return null;
+		Configuration configuration = createConfiguration(node);
+		NodeList children = node.getChildNodes();
 		int size = children.getLength();
 		for (int i = 0; i < size; i++) {
 			Node child = children.item(i);
@@ -177,7 +165,38 @@ public class ConfigurationParser {
 				continue;
 			Site site = createSite(child);
 			if (site != null)
-				sites.add(site);
+				configuration.add(site);
+		}
+		return configuration;
+	}
+
+	private Configuration createConfiguration(Node node) {
+		Configuration result = new Configuration();
+		String value = getAttribute(node, ATTRIBUTE_DATE);
+		if (value != null)
+			result.setDate(value);
+		value = getAttribute(node, ATTRIBUTE_TRANSIENT);
+		if (value != null)
+			result.setTransient(Boolean.valueOf(value).booleanValue());
+		value = getAttribute(node, ATTRIBUTE_SHARED_UR);
+		if (value != null)
+			result.setSharedUR(value);
+		value = getAttribute(node, ATTRIBUTE_VERSION);
+		if (value != null)
+			result.setVersion(value);
+		return result;
+	}
+
+	private Node getConfigElement(Document doc) {
+		NodeList children = doc.getChildNodes();
+		int size = children.getLength();
+		for (int i = 0; i < size; i++) {
+			Node child = children.item(i);
+			if (child.getNodeType() != Node.ELEMENT_NODE)
+				continue;
+			if (ELEMENT_CONFIG.equalsIgnoreCase(child.getNodeName()))
+				return child;
 		}
+		return null;
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/update/ConfigurationWriter.java b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/update/ConfigurationWriter.java
new file mode 100644
index 0000000..38bd84a
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/update/ConfigurationWriter.java
@@ -0,0 +1,133 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.update;
+
+import java.io.*;
+import java.util.*;
+import org.eclipse.equinox.p2.core.ProvisionException;
+
+/**
+ * @since 1.0
+ */
+public class ConfigurationWriter implements ConfigurationConstants {
+
+	/*
+	 * Save the given configuration to the specified location.
+	 */
+	public static void save(Configuration configuration, File location) throws ProvisionException {
+		XMLWriter writer = null;
+		try {
+			OutputStream output = new BufferedOutputStream(new FileOutputStream(location));
+			writer = new XMLWriter(output);
+			Map args = new HashMap();
+
+			String value = configuration.getDate();
+			if (value != null)
+				args.put(ATTRIBUTE_DATE, value);
+
+			value = configuration.getSharedUR();
+			if (value != null)
+				args.put(ATTRIBUTE_SHARED_UR, value);
+
+			value = configuration.getVersion();
+			if (value != null)
+				args.put(ATTRIBUTE_VERSION, value);
+
+			args.put(ATTRIBUTE_TRANSIENT, Boolean.toString(configuration.isTransient()));
+
+			writer.startTag(ELEMENT_CONFIG, args);
+
+			for (Iterator iter = configuration.getSites().iterator(); iter.hasNext();) {
+				Site site = (Site) iter.next();
+				write(writer, site);
+			}
+
+			writer.endTag(ELEMENT_CONFIG);
+		} catch (UnsupportedEncodingException e) {
+			throw new ProvisionException("Exception when saving configuration to: " + location, e);
+		} catch (FileNotFoundException e) {
+			throw new ProvisionException("Exception when saving configuration to: " + location, e);
+		} finally {
+			if (writer != null) {
+				writer.flush();
+				writer.close();
+			}
+		}
+	}
+
+	/*
+	 * Write out the given site.
+	 */
+	private static void write(XMLWriter writer, Site site) {
+		Map args = new HashMap();
+
+		String value = site.getLinkFile();
+		if (value != null)
+			args.put(ATTRIBUTE_LINKFILE, value);
+
+		value = site.getPolicy();
+		if (value != null)
+			args.put(ATTRIBUTE_POLICY, value);
+
+		value = site.getUrl();
+		if (value != null)
+			args.put(ATTRIBUTE_URL, value);
+
+		value = toString(site.getList());
+		if (value != null)
+			args.put(ATTRIBUTE_LIST, value);
+
+		args.put(ATTRIBUTE_UPDATEABLE, Boolean.toString(site.isUpdateable()));
+		args.put(ATTRIBUTE_ENABLED, Boolean.toString(site.isEnabled()));
+
+		writer.startTag(ELEMENT_SITE, args);
+		write(writer, site.getFeatures());
+		writer.endTag(ELEMENT_SITE);
+	}
+
+	/*
+	 * Convert the given list to a comma-separated string.
+	 */
+	private static String toString(String[] list) {
+		if (list == null || list.length == 0)
+			return null;
+		StringBuffer buffer = new StringBuffer();
+		for (int i = 0; i < list.length; i++) {
+			buffer.append(list[i]);
+			if (i + 1 < list.length)
+				buffer.append(',');
+		}
+		return buffer.toString();
+	}
+
+	/*
+	 * Write out the given list of features.
+	 */
+	private static void write(XMLWriter writer, Feature[] features) {
+		if (features == null || features.length == 0)
+			return;
+		for (int i = 0; i < features.length; i++) {
+			Feature feature = features[i];
+			Map args = new HashMap();
+			String value = feature.getId();
+			if (value != null)
+				args.put(ATTRIBUTE_ID, value);
+			value = feature.getUrl();
+			if (value != null)
+				args.put(ATTRIBUTE_URL, value);
+			value = feature.getVersion();
+			if (value != null)
+				args.put(ATTRIBUTE_VERSION, value);
+			writer.startTag(ELEMENT_FEATURE, args);
+			writer.endTag(ELEMENT_FEATURE);
+		}
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/update/LinksManager.java b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/update/LinksManager.java
new file mode 100644
index 0000000..7e817e0
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/update/LinksManager.java
@@ -0,0 +1,173 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.update;
+
+import java.io.*;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.util.Iterator;
+import java.util.Properties;
+import org.eclipse.equinox.p2.core.ProvisionException;
+
+/**
+ * @since 1.0
+ */
+public class LinksManager {
+
+	private static final String EXTENSION_LINK = ".link"; //$NON-NLS-1$
+	private static final String PATH_PROPERTY = "path"; //$NON-NLS-1$
+	private static final String PLATFORM_PROTOCOL = "platform:"; //$NON-NLS-1$
+	private static final String ECLIPSE_FOLDER = "eclipse"; //$NON-NLS-1$
+	private String defaultPolicy;
+	private Configuration configuration;
+	private boolean dirty = false;
+
+	/*
+	 * If one site has a MANAGED_ONLY policy, then newly discovered sites must also have
+	 * the same thing. Otherwise, they will have a policy of USER_EXCLUDE.
+	 */
+	private String getDefaultPolicy() {
+		if (defaultPolicy == null) {
+			for (Iterator iter = configuration.getSites().iterator(); defaultPolicy == null && iter.hasNext();) {
+				if (Site.POLICY_MANAGED_ONLY.equals(((Site) iter.next()).getPolicy()))
+					defaultPolicy = Site.POLICY_MANAGED_ONLY;
+			}
+			defaultPolicy = Site.POLICY_USER_EXCLUDE;
+		}
+		return defaultPolicy;
+	}
+
+	/*
+	 * Synchronize the given configuration file with the files that are in the specified links folder.
+	 * If any extension locations from the links folder are missing from the file, then update
+	 * the configuration.
+	 */
+	public void synchronize(File configurationFile, File linksFolder) throws ProvisionException {
+		// read the existing configuration from disk
+		configuration = ConfigurationParser.parse(configurationFile);
+		if (configuration == null)
+			return;
+
+		// get the list of extension locations from the links folder
+		linksFolder.listFiles(new FileFilter() {
+			public boolean accept(File file) {
+				if (file.isFile() && file.getName().endsWith(EXTENSION_LINK))
+					configure(file);
+				return false;
+			}
+		});
+
+		// write out a new file if there were any changes.
+		if (dirty)
+			ConfigurationWriter.save(configuration, configurationFile);
+		dirty = false;
+	}
+
+	/*
+	 * Roughly copied from PlatformConfiguration#configureExternalLinkSite in 
+	 * Update Configurator.
+	 */
+	void configure(File location) {
+		String path = readExtension(location);
+		boolean updateable = true;
+
+		// parse out link information
+		if (path.startsWith("r ")) { //$NON-NLS-1$
+			updateable = false;
+			path = path.substring(2).trim();
+		} else if (path.startsWith("rw ")) { //$NON-NLS-1$
+			path = path.substring(3).trim();
+		} else {
+			path = path.trim();
+		}
+
+		URL url;
+		// 	make sure we have a valid link specification
+		try {
+			File siteFile = new File(path);
+			siteFile = new File(siteFile, ECLIPSE_FOLDER);
+			url = siteFile.toURL();
+			if (findConfiguredSite(url) != null)
+				// linked site is already known
+				return;
+		} catch (MalformedURLException e) {
+			// ignore bad links ...
+			e.printStackTrace();
+			return;
+		}
+
+		Site site = new Site();
+		site.setLinkFile(location.getAbsolutePath());
+		site.setEnabled(true);
+		site.setPolicy(getDefaultPolicy());
+		site.setUpdateable(updateable);
+		site.setUrl(url.toExternalForm());
+		configuration.add(site);
+		dirty = true;
+	}
+
+	/*
+	 * Look through the list of sites already known to this configuration
+	 * and determine if there is one with the given URL.
+	 */
+	private Site findConfiguredSite(URL url) {
+		String urlString = url.toExternalForm();
+		Site result = internalFindConfiguredSite(urlString);
+		if (result != null)
+			return result;
+		// try again with fixed URLs since they can be tricky
+		try {
+			urlString = Utils.decode(urlString, "UTF-8"); //$NON-NLS-1$
+		} catch (UnsupportedEncodingException e) {
+			// ignore
+		}
+		urlString = Utils.canonicalizeURL(urlString);
+		return internalFindConfiguredSite(urlString);
+	}
+
+	private Site internalFindConfiguredSite(String url) {
+		for (Iterator iter = configuration.getSites().iterator(); iter.hasNext();) {
+			Site site = (Site) iter.next();
+			String urlString = site.getUrl();
+			urlString = Utils.canonicalizeURL(urlString);
+			if (urlString.startsWith(PLATFORM_PROTOCOL))
+				continue;
+			if (urlString.equals(url))
+				return site;
+		}
+		return null;
+	}
+
+	/*
+	 * Read the contents of a link file and return the path. May or may not include
+	 * a prefix indicating read-only or read-write status.
+	 */
+	private String readExtension(File file) {
+		Properties props = new Properties();
+		InputStream input = null;
+		try {
+			input = new BufferedInputStream(new FileInputStream(file));
+			props.load(input);
+		} catch (IOException e) {
+			// TODO
+			e.printStackTrace();
+			return null;
+		} finally {
+			if (input != null)
+				try {
+					input.close();
+				} catch (IOException e) {
+					// ignore
+				}
+		}
+		return props.getProperty(PATH_PROPERTY);
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/update/PlatformXmlListener.java b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/update/PlatformXmlListener.java
index 0671970..9d8cac8 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/update/PlatformXmlListener.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/update/PlatformXmlListener.java
@@ -68,8 +68,9 @@ public class PlatformXmlListener extends DirectoryChangeListener {
 	/*
 	 * Parse the platform.xml file and return the list of sites.
 	 */
-	private Site[] parseConfiguration() throws ProvisionException {
-		return new ConfigurationParser().parse(root);
+	private List parseConfiguration() throws ProvisionException {
+		Configuration cfg = ConfigurationParser.parse(root);
+		return cfg == null ? new ArrayList(0) : cfg.getSites();
 	}
 
 	/* (non-Javadoc)
@@ -79,13 +80,13 @@ public class PlatformXmlListener extends DirectoryChangeListener {
 		return file.getName().equals(PLATFORM_XML);
 	}
 
-	private Site[] getSites() {
+	private List getSites() {
 		List result = new ArrayList();
 		for (Iterator iter = sites.values().iterator(); iter.hasNext();) {
 			SiteInfo info = (SiteInfo) iter.next();
 			result.add(info.getSite());
 		}
-		return (Site[]) result.toArray(new Site[result.size()]);
+		return result;
 	}
 
 	/*
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/update/SiteDelta.java b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/update/SiteDelta.java
index 3681c0c..c3aad89 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/update/SiteDelta.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/update/SiteDelta.java
@@ -18,6 +18,8 @@ import java.util.List;
  */
 public class SiteDelta {
 
+	private static final String PLATFORM_BASE = "platform:/base/"; //$NON-NLS-1$
+
 	static class Change {
 		Site oldSite;
 		Site newSite;
@@ -36,7 +38,9 @@ public class SiteDelta {
 	 * Create and return a new delta object based on the two given lists of
 	 * site objects.
 	 */
-	public static SiteDelta create(Site[] one, Site[] two) {
+	public static SiteDelta create(List oneList, List twoList) {
+		Site[] one = (Site[]) oneList.toArray(new Site[oneList.size()]);
+		Site[] two = (Site[]) twoList.toArray(new Site[twoList.size()]);
 		SiteDelta result = new SiteDelta();
 		for (int i = 0; one == null || i < one.length; i++) {
 			boolean found = false;
@@ -44,19 +48,19 @@ public class SiteDelta {
 				if (two[j] != null && one[i].getUrl().equals(two[j].getUrl())) {
 					found = true;
 					// TODO
-					if (!one[i].getUrl().equals("platform:/base/") && !one[i].equals(two[j]))
+					if (!one[i].getUrl().equals(PLATFORM_BASE) && !one[i].equals(two[j]))
 						result.changed.add(new Change(one[i], two[j]));
 					one[i] = null;
 					two[j] = null;
 				}
 			}
 			// TODO
-			if (!found && !"platform:/base/".equals(one[i].getUrl()))
+			if (!found && !PLATFORM_BASE.equals(one[i].getUrl()))
 				result.removed.add(one[i]);
 		}
 		for (int j = 0; j < two.length; j++) {
 			// TODO
-			if (two[j] != null && !"platform:/base/".equals(two[j].getUrl()))
+			if (two[j] != null && !PLATFORM_BASE.equals(two[j].getUrl()))
 				result.added.add(two[j]);
 		}
 		return result;
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/update/SiteWatcher.java b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/update/SiteWatcher.java
new file mode 100644
index 0000000..e218885
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/update/SiteWatcher.java
@@ -0,0 +1,33 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.update;
+
+import java.io.File;
+import org.eclipse.equinox.p2.directorywatcher.DirectoryWatcher;
+
+/**
+ * @since 1.0
+ */
+public class SiteWatcher extends DirectoryWatcher {
+
+	static File PLUGINS_DIR;
+	static File FEATURES_DIR;
+
+	/**
+	 * @param directory
+	 */
+	public SiteWatcher(File directory) {
+		super(directory);
+		PLUGINS_DIR = new File(directory, "plugins");
+		FEATURES_DIR = new File(directory, "features");
+	}
+
+}
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/update/Utils.java b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/update/Utils.java
new file mode 100644
index 0000000..73fe999
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/update/Utils.java
@@ -0,0 +1,66 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.update;
+
+import java.io.File;
+import java.io.UnsupportedEncodingException;
+import java.net.*;
+
+/**
+ * 
+ * @since 1.0
+ */
+public class Utils {
+	public static boolean isWindows = System.getProperty("os.name").startsWith("Win"); //$NON-NLS-1$ //$NON-NLS-2$	
+	private static boolean init = false;
+	private static boolean useEnc = true;
+
+	/*
+	 * Copied from UpdateURLDecoder v1.4 in org.eclipse.update.configurator.
+	 */
+	public static String decode(String s, String enc) throws UnsupportedEncodingException {
+		if (!init) {
+			init = true;
+			try {
+				return URLDecoder.decode(s, enc);
+			} catch (NoSuchMethodError e) {
+				useEnc = false;
+			}
+		}
+		return useEnc ? URLDecoder.decode(s, enc) : URLDecoder.decode(s);
+	}
+
+	/*
+	 * Copied from Utils v1.32 in org.eclipse.update.configurator.
+	 * 
+	 * Ensures file: URLs on Windows have the right form (i.e. '/' as segment separator, drive letter in lower case, etc)
+	 */
+	public static String canonicalizeURL(String url) {
+		if (!(isWindows && url.startsWith("file:"))) //$NON-NLS-1$
+			return url;
+		try {
+			String path = new URL(url).getPath();
+			// normalize to not have leading / so we can check the form
+			File file = new File(path);
+			path = file.toString().replace('\\', '/');
+			if (Character.isUpperCase(path.charAt(0))) {
+				char[] chars = path.toCharArray();
+				chars[0] = Character.toLowerCase(chars[0]);
+				path = new String(chars);
+				return new File(path).toURL().toExternalForm();
+			}
+		} catch (MalformedURLException e) {
+			// default to original url
+		}
+		return url;
+	}
+
+}
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/update/XMLWriter.java b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/update/XMLWriter.java
new file mode 100644
index 0000000..9b86646
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/update/XMLWriter.java
@@ -0,0 +1,122 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.update;
+
+import java.io.*;
+import java.util.Iterator;
+import java.util.Map;
+
+/**
+ * A simple XML writer.
+ * 
+ * Copied from the org.eclipse.core.resources bundle.
+ */
+public class XMLWriter extends PrintWriter {
+	protected int tab;
+
+	/* constants */
+	protected static final String XML_VERSION = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>"; //$NON-NLS-1$
+
+	public XMLWriter(OutputStream output) throws UnsupportedEncodingException {
+		super(new OutputStreamWriter(output, "UTF8")); //$NON-NLS-1$
+		tab = 0;
+		println(XML_VERSION);
+	}
+
+	public void endTag(String name) {
+		tab--;
+		printTag('/' + name, null);
+	}
+
+	public void printSimpleTag(String name, Object value) {
+		if (value != null) {
+			printTag(name, null, true, false);
+			print(getEscaped(String.valueOf(value)));
+			printTag('/' + name, null, false, true);
+		}
+	}
+
+	public void printTabulation() {
+		for (int i = 0; i < tab; i++)
+			super.print('\t');
+	}
+
+	public void printTag(String name, Map parameters) {
+		printTag(name, parameters, true, true);
+	}
+
+	public void printTag(String name, Map parameters, boolean shouldTab, boolean newLine) {
+		StringBuffer sb = new StringBuffer();
+		sb.append("<"); //$NON-NLS-1$
+		sb.append(name);
+		if (parameters != null)
+			for (Iterator it = parameters.keySet().iterator(); it.hasNext();) {
+				sb.append(" "); //$NON-NLS-1$
+				String key = (String) it.next();
+				sb.append(key);
+				sb.append("=\""); //$NON-NLS-1$
+				sb.append(getEscaped(String.valueOf(parameters.get(key))));
+				sb.append("\""); //$NON-NLS-1$
+			}
+		sb.append(">"); //$NON-NLS-1$
+		if (shouldTab)
+			printTabulation();
+		if (newLine)
+			println(sb.toString());
+		else
+			print(sb.toString());
+	}
+
+	public void startTag(String name, Map parameters) {
+		startTag(name, parameters, true);
+	}
+
+	public void startTag(String name, Map parameters, boolean newLine) {
+		printTag(name, parameters, true, newLine);
+		tab++;
+	}
+
+	private static void appendEscapedChar(StringBuffer buffer, char c) {
+		String replacement = getReplacement(c);
+		if (replacement != null) {
+			buffer.append('&');
+			buffer.append(replacement);
+			buffer.append(';');
+		} else {
+			buffer.append(c);
+		}
+	}
+
+	public static String getEscaped(String s) {
+		StringBuffer result = new StringBuffer(s.length() + 10);
+		for (int i = 0; i < s.length(); ++i)
+			appendEscapedChar(result, s.charAt(i));
+		return result.toString();
+	}
+
+	private static String getReplacement(char c) {
+		// Encode special XML characters into the equivalent character references.
+		// These five are defined by default for all XML documents.
+		switch (c) {
+			case '<' :
+				return "lt"; //$NON-NLS-1$
+			case '>' :
+				return "gt"; //$NON-NLS-1$
+			case '"' :
+				return "quot"; //$NON-NLS-1$
+			case '\'' :
+				return "apos"; //$NON-NLS-1$
+			case '&' :
+				return "amp"; //$NON-NLS-1$
+		}
+		return null;
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/update/Configuration.java b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/update/Configuration.java
new file mode 100644
index 0000000..702b54e
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/update/Configuration.java
@@ -0,0 +1,80 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.update;
+
+import java.io.File;
+import java.util.ArrayList;
+import java.util.List;
+import org.eclipse.equinox.p2.core.ProvisionException;
+
+/**
+ * @since 1.0
+ */
+public class Configuration {
+
+	private List sites = new ArrayList();
+	String date;
+	boolean transientProperty;
+	String version;
+	String shared_ur;
+
+	public static Configuration load(File location) throws ProvisionException {
+		return ConfigurationParser.parse(location);
+	}
+
+	public Configuration() {
+		super();
+	}
+
+	public void save(File location) throws ProvisionException {
+		ConfigurationWriter.save(this, location);
+	}
+
+	public String getSharedUR() {
+		return shared_ur;
+	}
+
+	public void setSharedUR(String value) {
+		shared_ur = value;
+	}
+
+	public List getSites() {
+		return sites;
+	}
+
+	public void add(Site site) {
+		sites.add(site);
+	}
+
+	public String getDate() {
+		return date;
+	}
+
+	public void setDate(String date) {
+		this.date = date;
+	}
+
+	public void setVersion(String value) {
+		version = value;
+	}
+
+	public String getVersion() {
+		return version;
+	}
+
+	public void setTransient(boolean value) {
+		transientProperty = value;
+	}
+
+	public boolean isTransient() {
+		return transientProperty;
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/update/ConfigurationConstants.java b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/update/ConfigurationConstants.java
new file mode 100644
index 0000000..10c096a
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/update/ConfigurationConstants.java
@@ -0,0 +1,34 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.update;
+
+/**
+ * @since 1.0
+ */
+public interface ConfigurationConstants {
+
+	final String ELEMENT_CONFIG = "config"; //$NON-NLS-1$
+	final String ELEMENT_FEATURE = "feature"; //$NON-NLS-1$
+	final String ELEMENT_SITE = "site"; //$NON-NLS-1$
+
+	final String ATTRIBUTE_DATE = "date"; //$NON-NLS-1$
+	final String ATTRIBUTE_ENABLED = "enabled"; //$NON-NLS-1$
+	final String ATTRIBUTE_ID = "id"; //$NON-NLS-1$
+	final String ATTRIBUTE_LINKFILE = "linkfile"; //$NON-NLS-1$
+	final String ATTRIBUTE_LIST = "list"; //$NON-NLS-1$
+	final String ATTRIBUTE_POLICY = "policy"; //$NON-NLS-1$
+	final String ATTRIBUTE_SHARED_UR = "shared_ur"; //$NON-NLS-1$
+	final String ATTRIBUTE_TRANSIENT = "transient"; //$NON-NLS-1$
+	final String ATTRIBUTE_UPDATEABLE = "updateable"; //$NON-NLS-1$
+	final String ATTRIBUTE_URL = "url"; //$NON-NLS-1$
+	final String ATTRIBUTE_VERSION = "version"; //$NON-NLS-1$
+
+}
diff --git a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/update/ConfigurationParser.java b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/update/ConfigurationParser.java
index 94fbdec..3c519c5 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/update/ConfigurationParser.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/update/ConfigurationParser.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others.
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials 
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -11,30 +11,26 @@
 package org.eclipse.equinox.internal.p2.update;
 
 import java.io.*;
-import java.util.*;
+import java.util.StringTokenizer;
 import javax.xml.parsers.*;
 import org.eclipse.equinox.p2.core.ProvisionException;
 import org.w3c.dom.*;
 import org.xml.sax.SAXException;
 
 /**
- * Parser for platform.xml files. Returns Site objects.
+ * Parser for platform.xml files. 
+ * 
  * @since 1.0
  */
-public class ConfigurationParser {
-
-	private static final String ELEMENT_FEATURE = "feature"; //$NON-NLS-1$
-	private static final String ELEMENT_SITE = "site"; //$NON-NLS-1$
-	private static final String ATTRIBUTE_POLICY = "policy"; //$NON-NLS-1$
-	private static final String ATTRIBUTE_ENABLED = "enabled"; //$NON-NLS-1$
-	private static final String ATTRIBUTE_UPDATEABLE = "updateable"; //$NON-NLS-1$
-	private static final String ATTRIBUTE_URL = "url"; //$NON-NLS-1$
-	private static final String ATTRIBUTE_LINKFILE = "linkfile"; //$NON-NLS-1$
-	private static final String ATTRIBUTE_LIST = "list"; //$NON-NLS-1$
-	private static final String ATTRIBUTE_ID = "id"; //$NON-NLS-1$
-	private static final String ATTRIBUTE_VERSION = "version"; //$NON-NLS-1$
+public class ConfigurationParser implements ConfigurationConstants {
 
-	private List sites = new ArrayList();
+	/*
+	 * Parse the given file handle which points to a platform.xml file and a configuration object.
+	 * Returns null if the file doesn't exist.
+	 */
+	public static Configuration parse(File file) throws ProvisionException {
+		return new ConfigurationParser().internalParse(file);
+	}
 
 	/*
 	 * Create a feature object based on the given DOM node. 
@@ -131,43 +127,35 @@ public class ConfigurationParser {
 	}
 
 	/*
-	 * Parse the given file handle which points to a platform.xml file and return
-	 * a list of site objects. Returns an empty array if the file doesn't exist.
+	 * Parse the given file handle which points to a platform.xml file and a configuration object.
+	 * Returns null if the file doesn't exist.
 	 */
-	public Site[] parse(File file) throws ProvisionException {
+	private Configuration internalParse(File file) throws ProvisionException {
 		if (!file.exists())
-			return new Site[0];
-		try {
-			return parse(new BufferedInputStream(new FileInputStream(file)));
-		} catch (IOException e) {
-			throw new ProvisionException("An error occurred reading the platform configuration file: " + file, e);
-		}
-	}
-
-	/*
-	 * Parse the given input stream which points to a platform.xml file and
-	 * return a list of site objects.
-	 */
-	public Site[] parse(InputStream input) throws ProvisionException {
+			return null;
 		try {
+			InputStream input = new BufferedInputStream(new FileInputStream(file));
 			Document document = load(input);
-			process(document);
+			return process(document);
 		} catch (IOException e) {
-			throw new ProvisionException("An error occurred reading the platform configuration", e);
+			throw new ProvisionException("An error occurred reading the platform configuration file: " + file, e);
 		} catch (ParserConfigurationException e) {
 			throw new ProvisionException("An error occurred reading the platform configuration", e);
 		} catch (SAXException e) {
 			throw new ProvisionException("An error occurred reading the platform configuration", e);
 		}
-		return (Site[]) sites.toArray(new Site[sites.size()]);
 	}
 
 	/*
 	 * Process the given DOM document and create the appropriate
 	 * site objects.
 	 */
-	private void process(Document document) {
-		NodeList children = document.getFirstChild().getChildNodes();
+	private Configuration process(Document document) {
+		Node node = getConfigElement(document);
+		if (node == null)
+			return null;
+		Configuration configuration = createConfiguration(node);
+		NodeList children = node.getChildNodes();
 		int size = children.getLength();
 		for (int i = 0; i < size; i++) {
 			Node child = children.item(i);
@@ -177,7 +165,38 @@ public class ConfigurationParser {
 				continue;
 			Site site = createSite(child);
 			if (site != null)
-				sites.add(site);
+				configuration.add(site);
+		}
+		return configuration;
+	}
+
+	private Configuration createConfiguration(Node node) {
+		Configuration result = new Configuration();
+		String value = getAttribute(node, ATTRIBUTE_DATE);
+		if (value != null)
+			result.setDate(value);
+		value = getAttribute(node, ATTRIBUTE_TRANSIENT);
+		if (value != null)
+			result.setTransient(Boolean.valueOf(value).booleanValue());
+		value = getAttribute(node, ATTRIBUTE_SHARED_UR);
+		if (value != null)
+			result.setSharedUR(value);
+		value = getAttribute(node, ATTRIBUTE_VERSION);
+		if (value != null)
+			result.setVersion(value);
+		return result;
+	}
+
+	private Node getConfigElement(Document doc) {
+		NodeList children = doc.getChildNodes();
+		int size = children.getLength();
+		for (int i = 0; i < size; i++) {
+			Node child = children.item(i);
+			if (child.getNodeType() != Node.ELEMENT_NODE)
+				continue;
+			if (ELEMENT_CONFIG.equalsIgnoreCase(child.getNodeName()))
+				return child;
 		}
+		return null;
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/update/ConfigurationWriter.java b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/update/ConfigurationWriter.java
new file mode 100644
index 0000000..38bd84a
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/update/ConfigurationWriter.java
@@ -0,0 +1,133 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.update;
+
+import java.io.*;
+import java.util.*;
+import org.eclipse.equinox.p2.core.ProvisionException;
+
+/**
+ * @since 1.0
+ */
+public class ConfigurationWriter implements ConfigurationConstants {
+
+	/*
+	 * Save the given configuration to the specified location.
+	 */
+	public static void save(Configuration configuration, File location) throws ProvisionException {
+		XMLWriter writer = null;
+		try {
+			OutputStream output = new BufferedOutputStream(new FileOutputStream(location));
+			writer = new XMLWriter(output);
+			Map args = new HashMap();
+
+			String value = configuration.getDate();
+			if (value != null)
+				args.put(ATTRIBUTE_DATE, value);
+
+			value = configuration.getSharedUR();
+			if (value != null)
+				args.put(ATTRIBUTE_SHARED_UR, value);
+
+			value = configuration.getVersion();
+			if (value != null)
+				args.put(ATTRIBUTE_VERSION, value);
+
+			args.put(ATTRIBUTE_TRANSIENT, Boolean.toString(configuration.isTransient()));
+
+			writer.startTag(ELEMENT_CONFIG, args);
+
+			for (Iterator iter = configuration.getSites().iterator(); iter.hasNext();) {
+				Site site = (Site) iter.next();
+				write(writer, site);
+			}
+
+			writer.endTag(ELEMENT_CONFIG);
+		} catch (UnsupportedEncodingException e) {
+			throw new ProvisionException("Exception when saving configuration to: " + location, e);
+		} catch (FileNotFoundException e) {
+			throw new ProvisionException("Exception when saving configuration to: " + location, e);
+		} finally {
+			if (writer != null) {
+				writer.flush();
+				writer.close();
+			}
+		}
+	}
+
+	/*
+	 * Write out the given site.
+	 */
+	private static void write(XMLWriter writer, Site site) {
+		Map args = new HashMap();
+
+		String value = site.getLinkFile();
+		if (value != null)
+			args.put(ATTRIBUTE_LINKFILE, value);
+
+		value = site.getPolicy();
+		if (value != null)
+			args.put(ATTRIBUTE_POLICY, value);
+
+		value = site.getUrl();
+		if (value != null)
+			args.put(ATTRIBUTE_URL, value);
+
+		value = toString(site.getList());
+		if (value != null)
+			args.put(ATTRIBUTE_LIST, value);
+
+		args.put(ATTRIBUTE_UPDATEABLE, Boolean.toString(site.isUpdateable()));
+		args.put(ATTRIBUTE_ENABLED, Boolean.toString(site.isEnabled()));
+
+		writer.startTag(ELEMENT_SITE, args);
+		write(writer, site.getFeatures());
+		writer.endTag(ELEMENT_SITE);
+	}
+
+	/*
+	 * Convert the given list to a comma-separated string.
+	 */
+	private static String toString(String[] list) {
+		if (list == null || list.length == 0)
+			return null;
+		StringBuffer buffer = new StringBuffer();
+		for (int i = 0; i < list.length; i++) {
+			buffer.append(list[i]);
+			if (i + 1 < list.length)
+				buffer.append(',');
+		}
+		return buffer.toString();
+	}
+
+	/*
+	 * Write out the given list of features.
+	 */
+	private static void write(XMLWriter writer, Feature[] features) {
+		if (features == null || features.length == 0)
+			return;
+		for (int i = 0; i < features.length; i++) {
+			Feature feature = features[i];
+			Map args = new HashMap();
+			String value = feature.getId();
+			if (value != null)
+				args.put(ATTRIBUTE_ID, value);
+			value = feature.getUrl();
+			if (value != null)
+				args.put(ATTRIBUTE_URL, value);
+			value = feature.getVersion();
+			if (value != null)
+				args.put(ATTRIBUTE_VERSION, value);
+			writer.startTag(ELEMENT_FEATURE, args);
+			writer.endTag(ELEMENT_FEATURE);
+		}
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/update/LinksManager.java b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/update/LinksManager.java
new file mode 100644
index 0000000..7e817e0
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/update/LinksManager.java
@@ -0,0 +1,173 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.update;
+
+import java.io.*;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.util.Iterator;
+import java.util.Properties;
+import org.eclipse.equinox.p2.core.ProvisionException;
+
+/**
+ * @since 1.0
+ */
+public class LinksManager {
+
+	private static final String EXTENSION_LINK = ".link"; //$NON-NLS-1$
+	private static final String PATH_PROPERTY = "path"; //$NON-NLS-1$
+	private static final String PLATFORM_PROTOCOL = "platform:"; //$NON-NLS-1$
+	private static final String ECLIPSE_FOLDER = "eclipse"; //$NON-NLS-1$
+	private String defaultPolicy;
+	private Configuration configuration;
+	private boolean dirty = false;
+
+	/*
+	 * If one site has a MANAGED_ONLY policy, then newly discovered sites must also have
+	 * the same thing. Otherwise, they will have a policy of USER_EXCLUDE.
+	 */
+	private String getDefaultPolicy() {
+		if (defaultPolicy == null) {
+			for (Iterator iter = configuration.getSites().iterator(); defaultPolicy == null && iter.hasNext();) {
+				if (Site.POLICY_MANAGED_ONLY.equals(((Site) iter.next()).getPolicy()))
+					defaultPolicy = Site.POLICY_MANAGED_ONLY;
+			}
+			defaultPolicy = Site.POLICY_USER_EXCLUDE;
+		}
+		return defaultPolicy;
+	}
+
+	/*
+	 * Synchronize the given configuration file with the files that are in the specified links folder.
+	 * If any extension locations from the links folder are missing from the file, then update
+	 * the configuration.
+	 */
+	public void synchronize(File configurationFile, File linksFolder) throws ProvisionException {
+		// read the existing configuration from disk
+		configuration = ConfigurationParser.parse(configurationFile);
+		if (configuration == null)
+			return;
+
+		// get the list of extension locations from the links folder
+		linksFolder.listFiles(new FileFilter() {
+			public boolean accept(File file) {
+				if (file.isFile() && file.getName().endsWith(EXTENSION_LINK))
+					configure(file);
+				return false;
+			}
+		});
+
+		// write out a new file if there were any changes.
+		if (dirty)
+			ConfigurationWriter.save(configuration, configurationFile);
+		dirty = false;
+	}
+
+	/*
+	 * Roughly copied from PlatformConfiguration#configureExternalLinkSite in 
+	 * Update Configurator.
+	 */
+	void configure(File location) {
+		String path = readExtension(location);
+		boolean updateable = true;
+
+		// parse out link information
+		if (path.startsWith("r ")) { //$NON-NLS-1$
+			updateable = false;
+			path = path.substring(2).trim();
+		} else if (path.startsWith("rw ")) { //$NON-NLS-1$
+			path = path.substring(3).trim();
+		} else {
+			path = path.trim();
+		}
+
+		URL url;
+		// 	make sure we have a valid link specification
+		try {
+			File siteFile = new File(path);
+			siteFile = new File(siteFile, ECLIPSE_FOLDER);
+			url = siteFile.toURL();
+			if (findConfiguredSite(url) != null)
+				// linked site is already known
+				return;
+		} catch (MalformedURLException e) {
+			// ignore bad links ...
+			e.printStackTrace();
+			return;
+		}
+
+		Site site = new Site();
+		site.setLinkFile(location.getAbsolutePath());
+		site.setEnabled(true);
+		site.setPolicy(getDefaultPolicy());
+		site.setUpdateable(updateable);
+		site.setUrl(url.toExternalForm());
+		configuration.add(site);
+		dirty = true;
+	}
+
+	/*
+	 * Look through the list of sites already known to this configuration
+	 * and determine if there is one with the given URL.
+	 */
+	private Site findConfiguredSite(URL url) {
+		String urlString = url.toExternalForm();
+		Site result = internalFindConfiguredSite(urlString);
+		if (result != null)
+			return result;
+		// try again with fixed URLs since they can be tricky
+		try {
+			urlString = Utils.decode(urlString, "UTF-8"); //$NON-NLS-1$
+		} catch (UnsupportedEncodingException e) {
+			// ignore
+		}
+		urlString = Utils.canonicalizeURL(urlString);
+		return internalFindConfiguredSite(urlString);
+	}
+
+	private Site internalFindConfiguredSite(String url) {
+		for (Iterator iter = configuration.getSites().iterator(); iter.hasNext();) {
+			Site site = (Site) iter.next();
+			String urlString = site.getUrl();
+			urlString = Utils.canonicalizeURL(urlString);
+			if (urlString.startsWith(PLATFORM_PROTOCOL))
+				continue;
+			if (urlString.equals(url))
+				return site;
+		}
+		return null;
+	}
+
+	/*
+	 * Read the contents of a link file and return the path. May or may not include
+	 * a prefix indicating read-only or read-write status.
+	 */
+	private String readExtension(File file) {
+		Properties props = new Properties();
+		InputStream input = null;
+		try {
+			input = new BufferedInputStream(new FileInputStream(file));
+			props.load(input);
+		} catch (IOException e) {
+			// TODO
+			e.printStackTrace();
+			return null;
+		} finally {
+			if (input != null)
+				try {
+					input.close();
+				} catch (IOException e) {
+					// ignore
+				}
+		}
+		return props.getProperty(PATH_PROPERTY);
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/update/PlatformXmlListener.java b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/update/PlatformXmlListener.java
index 0671970..9d8cac8 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/update/PlatformXmlListener.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/update/PlatformXmlListener.java
@@ -68,8 +68,9 @@ public class PlatformXmlListener extends DirectoryChangeListener {
 	/*
 	 * Parse the platform.xml file and return the list of sites.
 	 */
-	private Site[] parseConfiguration() throws ProvisionException {
-		return new ConfigurationParser().parse(root);
+	private List parseConfiguration() throws ProvisionException {
+		Configuration cfg = ConfigurationParser.parse(root);
+		return cfg == null ? new ArrayList(0) : cfg.getSites();
 	}
 
 	/* (non-Javadoc)
@@ -79,13 +80,13 @@ public class PlatformXmlListener extends DirectoryChangeListener {
 		return file.getName().equals(PLATFORM_XML);
 	}
 
-	private Site[] getSites() {
+	private List getSites() {
 		List result = new ArrayList();
 		for (Iterator iter = sites.values().iterator(); iter.hasNext();) {
 			SiteInfo info = (SiteInfo) iter.next();
 			result.add(info.getSite());
 		}
-		return (Site[]) result.toArray(new Site[result.size()]);
+		return result;
 	}
 
 	/*
diff --git a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/update/SiteDelta.java b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/update/SiteDelta.java
index 3681c0c..c3aad89 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/update/SiteDelta.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/update/SiteDelta.java
@@ -18,6 +18,8 @@ import java.util.List;
  */
 public class SiteDelta {
 
+	private static final String PLATFORM_BASE = "platform:/base/"; //$NON-NLS-1$
+
 	static class Change {
 		Site oldSite;
 		Site newSite;
@@ -36,7 +38,9 @@ public class SiteDelta {
 	 * Create and return a new delta object based on the two given lists of
 	 * site objects.
 	 */
-	public static SiteDelta create(Site[] one, Site[] two) {
+	public static SiteDelta create(List oneList, List twoList) {
+		Site[] one = (Site[]) oneList.toArray(new Site[oneList.size()]);
+		Site[] two = (Site[]) twoList.toArray(new Site[twoList.size()]);
 		SiteDelta result = new SiteDelta();
 		for (int i = 0; one == null || i < one.length; i++) {
 			boolean found = false;
@@ -44,19 +48,19 @@ public class SiteDelta {
 				if (two[j] != null && one[i].getUrl().equals(two[j].getUrl())) {
 					found = true;
 					// TODO
-					if (!one[i].getUrl().equals("platform:/base/") && !one[i].equals(two[j]))
+					if (!one[i].getUrl().equals(PLATFORM_BASE) && !one[i].equals(two[j]))
 						result.changed.add(new Change(one[i], two[j]));
 					one[i] = null;
 					two[j] = null;
 				}
 			}
 			// TODO
-			if (!found && !"platform:/base/".equals(one[i].getUrl()))
+			if (!found && !PLATFORM_BASE.equals(one[i].getUrl()))
 				result.removed.add(one[i]);
 		}
 		for (int j = 0; j < two.length; j++) {
 			// TODO
-			if (two[j] != null && !"platform:/base/".equals(two[j].getUrl()))
+			if (two[j] != null && !PLATFORM_BASE.equals(two[j].getUrl()))
 				result.added.add(two[j]);
 		}
 		return result;
diff --git a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/update/SiteWatcher.java b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/update/SiteWatcher.java
new file mode 100644
index 0000000..e218885
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/update/SiteWatcher.java
@@ -0,0 +1,33 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.update;
+
+import java.io.File;
+import org.eclipse.equinox.p2.directorywatcher.DirectoryWatcher;
+
+/**
+ * @since 1.0
+ */
+public class SiteWatcher extends DirectoryWatcher {
+
+	static File PLUGINS_DIR;
+	static File FEATURES_DIR;
+
+	/**
+	 * @param directory
+	 */
+	public SiteWatcher(File directory) {
+		super(directory);
+		PLUGINS_DIR = new File(directory, "plugins");
+		FEATURES_DIR = new File(directory, "features");
+	}
+
+}
diff --git a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/update/Utils.java b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/update/Utils.java
new file mode 100644
index 0000000..73fe999
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/update/Utils.java
@@ -0,0 +1,66 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.update;
+
+import java.io.File;
+import java.io.UnsupportedEncodingException;
+import java.net.*;
+
+/**
+ * 
+ * @since 1.0
+ */
+public class Utils {
+	public static boolean isWindows = System.getProperty("os.name").startsWith("Win"); //$NON-NLS-1$ //$NON-NLS-2$	
+	private static boolean init = false;
+	private static boolean useEnc = true;
+
+	/*
+	 * Copied from UpdateURLDecoder v1.4 in org.eclipse.update.configurator.
+	 */
+	public static String decode(String s, String enc) throws UnsupportedEncodingException {
+		if (!init) {
+			init = true;
+			try {
+				return URLDecoder.decode(s, enc);
+			} catch (NoSuchMethodError e) {
+				useEnc = false;
+			}
+		}
+		return useEnc ? URLDecoder.decode(s, enc) : URLDecoder.decode(s);
+	}
+
+	/*
+	 * Copied from Utils v1.32 in org.eclipse.update.configurator.
+	 * 
+	 * Ensures file: URLs on Windows have the right form (i.e. '/' as segment separator, drive letter in lower case, etc)
+	 */
+	public static String canonicalizeURL(String url) {
+		if (!(isWindows && url.startsWith("file:"))) //$NON-NLS-1$
+			return url;
+		try {
+			String path = new URL(url).getPath();
+			// normalize to not have leading / so we can check the form
+			File file = new File(path);
+			path = file.toString().replace('\\', '/');
+			if (Character.isUpperCase(path.charAt(0))) {
+				char[] chars = path.toCharArray();
+				chars[0] = Character.toLowerCase(chars[0]);
+				path = new String(chars);
+				return new File(path).toURL().toExternalForm();
+			}
+		} catch (MalformedURLException e) {
+			// default to original url
+		}
+		return url;
+	}
+
+}
diff --git a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/update/XMLWriter.java b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/update/XMLWriter.java
new file mode 100644
index 0000000..9b86646
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/update/XMLWriter.java
@@ -0,0 +1,122 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.update;
+
+import java.io.*;
+import java.util.Iterator;
+import java.util.Map;
+
+/**
+ * A simple XML writer.
+ * 
+ * Copied from the org.eclipse.core.resources bundle.
+ */
+public class XMLWriter extends PrintWriter {
+	protected int tab;
+
+	/* constants */
+	protected static final String XML_VERSION = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>"; //$NON-NLS-1$
+
+	public XMLWriter(OutputStream output) throws UnsupportedEncodingException {
+		super(new OutputStreamWriter(output, "UTF8")); //$NON-NLS-1$
+		tab = 0;
+		println(XML_VERSION);
+	}
+
+	public void endTag(String name) {
+		tab--;
+		printTag('/' + name, null);
+	}
+
+	public void printSimpleTag(String name, Object value) {
+		if (value != null) {
+			printTag(name, null, true, false);
+			print(getEscaped(String.valueOf(value)));
+			printTag('/' + name, null, false, true);
+		}
+	}
+
+	public void printTabulation() {
+		for (int i = 0; i < tab; i++)
+			super.print('\t');
+	}
+
+	public void printTag(String name, Map parameters) {
+		printTag(name, parameters, true, true);
+	}
+
+	public void printTag(String name, Map parameters, boolean shouldTab, boolean newLine) {
+		StringBuffer sb = new StringBuffer();
+		sb.append("<"); //$NON-NLS-1$
+		sb.append(name);
+		if (parameters != null)
+			for (Iterator it = parameters.keySet().iterator(); it.hasNext();) {
+				sb.append(" "); //$NON-NLS-1$
+				String key = (String) it.next();
+				sb.append(key);
+				sb.append("=\""); //$NON-NLS-1$
+				sb.append(getEscaped(String.valueOf(parameters.get(key))));
+				sb.append("\""); //$NON-NLS-1$
+			}
+		sb.append(">"); //$NON-NLS-1$
+		if (shouldTab)
+			printTabulation();
+		if (newLine)
+			println(sb.toString());
+		else
+			print(sb.toString());
+	}
+
+	public void startTag(String name, Map parameters) {
+		startTag(name, parameters, true);
+	}
+
+	public void startTag(String name, Map parameters, boolean newLine) {
+		printTag(name, parameters, true, newLine);
+		tab++;
+	}
+
+	private static void appendEscapedChar(StringBuffer buffer, char c) {
+		String replacement = getReplacement(c);
+		if (replacement != null) {
+			buffer.append('&');
+			buffer.append(replacement);
+			buffer.append(';');
+		} else {
+			buffer.append(c);
+		}
+	}
+
+	public static String getEscaped(String s) {
+		StringBuffer result = new StringBuffer(s.length() + 10);
+		for (int i = 0; i < s.length(); ++i)
+			appendEscapedChar(result, s.charAt(i));
+		return result.toString();
+	}
+
+	private static String getReplacement(char c) {
+		// Encode special XML characters into the equivalent character references.
+		// These five are defined by default for all XML documents.
+		switch (c) {
+			case '<' :
+				return "lt"; //$NON-NLS-1$
+			case '>' :
+				return "gt"; //$NON-NLS-1$
+			case '"' :
+				return "quot"; //$NON-NLS-1$
+			case '\'' :
+				return "apos"; //$NON-NLS-1$
+			case '&' :
+				return "amp"; //$NON-NLS-1$
+		}
+		return null;
+	}
+}
commit 3df16eacdd10d128f3ba5f5af2f50af64f7e9640
Author: Simon Kaegi <skaegi>
Date:   Mon Feb 25 21:20:26 2008 +0000

    Bug 206898 [prov] directory watcher and links folders

12	2	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java
4	3	bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java
4	3	bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java
index bc4f6aa..eb9a6d3 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java
@@ -39,6 +39,7 @@ public class EclipseInstallGeneratorInfoProvider implements IGeneratorInfo {
 	private static final String ORG_ECLIPSE_EQUINOX_SIMPLECONFIGURATOR = "org.eclipse.equinox.simpleconfigurator"; //$NON-NLS-1$
 	private static final String ORG_ECLIPSE_EQUINOX_SIMPLECONFIGURATOR_MANIPULATOR = "org.eclipse.equinox.simpleconfigurator.manipulator"; //$NON-NLS-1$
 	private static final String ORG_ECLIPSE_EQUINOX_FRAMEWORKADMIN_EQUINOX = "org.eclipse.equinox.frameworkadmin.equinox"; //$NON-NLS-1$
+	private static final String ORG_ECLIPSE_EQUINOX_P2_RECONCILER_DROPINS = "org.eclipse.equinox.p2.reconciler.dropins"; //$NON-NLS-1$
 
 	/*
 	 * 	TODO: Temporary for determining whether eclipse installs
@@ -164,7 +165,7 @@ public class EclipseInstallGeneratorInfoProvider implements IGeneratorInfo {
 		return result;
 	}
 
-	private GeneratorBundleInfo createSimpleConfigurator() {
+	private GeneratorBundleInfo createSimpleConfiguratorBundleInfo() {
 		GeneratorBundleInfo result = new GeneratorBundleInfo();
 		result.setSymbolicName(ORG_ECLIPSE_EQUINOX_SIMPLECONFIGURATOR);
 		result.setVersion("0.0.0"); //$NON-NLS-1$
@@ -173,6 +174,14 @@ public class EclipseInstallGeneratorInfoProvider implements IGeneratorInfo {
 		return result;
 	}
 
+	private GeneratorBundleInfo createDropinsReconcilerBundleInfo() {
+		GeneratorBundleInfo result = new GeneratorBundleInfo();
+		result.setSymbolicName(ORG_ECLIPSE_EQUINOX_P2_RECONCILER_DROPINS);
+		result.setVersion("0.0.0"); //$NON-NLS-1$
+		result.setMarkedAsStarted(true);
+		return result;
+	}
+
 	private void expandBundleLocations() {
 		if (bundleLocations == null) {
 			bundleLocations = new File[] {};
@@ -233,7 +242,8 @@ public class EclipseInstallGeneratorInfoProvider implements IGeneratorInfo {
 		if (addDefaultIUs) {
 			defaultIUs.addAll(createLauncherBundleInfo(ius));
 			defaultIUs.add(createLauncher());
-			defaultIUs.add(createSimpleConfigurator());
+			defaultIUs.add(createSimpleConfiguratorBundleInfo());
+			defaultIUs.add(createDropinsReconcilerBundleInfo());
 			//			defaultIUs.add(createDefaultConfigurationBundleInfo());
 			//			defaultIUs.add(createDefaultUnconfigurationBundleInfo());
 		}
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java
index adcc5a7..178bed6 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java
@@ -26,7 +26,7 @@ import org.osgi.service.packageadmin.PackageAdmin;
 public class Activator implements BundleActivator {
 
 	private static final String DROPINS_DIRECTORY = "org.eclipse.equinox.p2.reconciler.dropins.directory"; //$NON-NLS-1$
-	private static final String OSGI_INSTALL_AREA = "osgi.install.area"; //$NON-NLS-1$
+	private static final String OSGI_CONFIGURATION_AREA = "osgi.configuration.area"; //$NON-NLS-1$
 	private static final String DROPINS = "dropins"; //$NON-NLS-1$
 	private static final String PROFILE_EXTENSION = "profile.extension"; //$NON-NLS-1$
 	private static PackageAdmin packageAdmin;
@@ -146,8 +146,9 @@ public class Activator implements BundleActivator {
 			return folder;
 		}
 		try {
-			URL baseURL = new URL(context.getProperty(OSGI_INSTALL_AREA));
-			URL folderURL = new URL(baseURL, DROPINS);
+			//TODO: a proper install area would be better. osgi.install.area is relative to the framework jar
+			URL baseURL = new URL(context.getProperty(OSGI_CONFIGURATION_AREA));
+			URL folderURL = new URL(baseURL, "../" + DROPINS); //$NON-NLS-1$
 			File folder = new File(folderURL.getPath());
 			return folder;
 		} catch (MalformedURLException e) {
diff --git a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java
index adcc5a7..178bed6 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java
@@ -26,7 +26,7 @@ import org.osgi.service.packageadmin.PackageAdmin;
 public class Activator implements BundleActivator {
 
 	private static final String DROPINS_DIRECTORY = "org.eclipse.equinox.p2.reconciler.dropins.directory"; //$NON-NLS-1$
-	private static final String OSGI_INSTALL_AREA = "osgi.install.area"; //$NON-NLS-1$
+	private static final String OSGI_CONFIGURATION_AREA = "osgi.configuration.area"; //$NON-NLS-1$
 	private static final String DROPINS = "dropins"; //$NON-NLS-1$
 	private static final String PROFILE_EXTENSION = "profile.extension"; //$NON-NLS-1$
 	private static PackageAdmin packageAdmin;
@@ -146,8 +146,9 @@ public class Activator implements BundleActivator {
 			return folder;
 		}
 		try {
-			URL baseURL = new URL(context.getProperty(OSGI_INSTALL_AREA));
-			URL folderURL = new URL(baseURL, DROPINS);
+			//TODO: a proper install area would be better. osgi.install.area is relative to the framework jar
+			URL baseURL = new URL(context.getProperty(OSGI_CONFIGURATION_AREA));
+			URL folderURL = new URL(baseURL, "../" + DROPINS); //$NON-NLS-1$
 			File folder = new File(folderURL.getPath());
 			return folder;
 		} catch (MalformedURLException e) {
commit 355676b6e67a522e84b5c614f325f3059440a5d6
Author: Simon Kaegi <skaegi>
Date:   Wed Feb 27 21:38:59 2008 +0000

    Bug 206898 [prov] directory watcher and links folders

11	0	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java
24	20	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
4	2	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/IGeneratorInfo.java
5	2	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/generator/TestGeneratorInfo.java
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java
index 49d5587..4c6f25f 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java
@@ -75,6 +75,7 @@ public class EclipseInstallGeneratorInfoProvider implements IGeneratorInfo {
 	private File[] bundleLocations;
 	private File configLocation;
 	private ArrayList defaultIUs;
+	private List otherIUs;
 	private File executableLocation;
 	private File featuresLocation;
 	private String flavor;
@@ -252,6 +253,16 @@ public class EclipseInstallGeneratorInfoProvider implements IGeneratorInfo {
 		return defaultIUs;
 	}
 
+	// TODO: This is kind of ugly. It's purpose is to allow us to craft CUs that we know about and need for our build
+	// We should try to replace this with something more generic prior to release
+	public Collection getOtherIUs() {
+		if (otherIUs != null)
+			return otherIUs;
+		otherIUs = new ArrayList();
+		otherIUs.add(createDropinsReconcilerBundleInfo());
+		return otherIUs;
+	}
+
 	public File getExecutableLocation() {
 		return executableLocation;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
index 7d2fa71..5b047f9 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
@@ -467,26 +467,30 @@ public class Generator {
 			}
 		}
 
-		if (info.addDefaultIUs()) {
-			for (Iterator iterator = info.getDefaultIUs(result.rootIUs).iterator(); iterator.hasNext();) {
-				GeneratorBundleInfo bundle = (GeneratorBundleInfo) iterator.next();
-				IInstallableUnit configuredIU = result.getInstallableUnit(bundle.getSymbolicName());
-				if (configuredIU == null)
-					continue;
-				bundle.setVersion(configuredIU.getVersion().toString());
-				String filter = configuredIU == null ? null : configuredIU.getFilter();
-				IInstallableUnit cu = MetadataGeneratorHelper.createBundleConfigurationUnit(bundle.getSymbolicName(), new Version(bundle.getVersion()), false, bundle, info.getFlavor(), filter);
-				//the configuration unit should share the same platform filter as the IU being configured.
-				if (cu != null)
-					result.rootIUs.add(cu);
-				if (bundle.getSymbolicName().startsWith(ORG_ECLIPSE_EQUINOX_LAUNCHER + '.')) {
-					if (result.configurationIUs.containsKey(ORG_ECLIPSE_EQUINOX_LAUNCHER)) {
-						((Set) result.configurationIUs.get(ORG_ECLIPSE_EQUINOX_LAUNCHER)).add(cu);
-					} else {
-						Set set = new HashSet();
-						set.add(cu);
-						result.configurationIUs.put(ORG_ECLIPSE_EQUINOX_LAUNCHER, set);
-					}
+		List bundleInfoList = new ArrayList();
+		if (info.addDefaultIUs())
+			bundleInfoList.addAll(info.getDefaultIUs(result.rootIUs));
+
+		bundleInfoList.addAll(info.getOtherIUs());
+
+		for (Iterator iterator = bundleInfoList.iterator(); iterator.hasNext();) {
+			GeneratorBundleInfo bundle = (GeneratorBundleInfo) iterator.next();
+			IInstallableUnit configuredIU = result.getInstallableUnit(bundle.getSymbolicName());
+			if (configuredIU == null)
+				continue;
+			bundle.setVersion(configuredIU.getVersion().toString());
+			String filter = configuredIU == null ? null : configuredIU.getFilter();
+			IInstallableUnit cu = MetadataGeneratorHelper.createBundleConfigurationUnit(bundle.getSymbolicName(), new Version(bundle.getVersion()), false, bundle, info.getFlavor(), filter);
+			//the configuration unit should share the same platform filter as the IU being configured.
+			if (cu != null)
+				result.rootIUs.add(cu);
+			if (bundle.getSymbolicName().startsWith(ORG_ECLIPSE_EQUINOX_LAUNCHER + '.')) {
+				if (result.configurationIUs.containsKey(ORG_ECLIPSE_EQUINOX_LAUNCHER)) {
+					((Set) result.configurationIUs.get(ORG_ECLIPSE_EQUINOX_LAUNCHER)).add(cu);
+				} else {
+					Set set = new HashSet();
+					set.add(cu);
+					result.configurationIUs.put(ORG_ECLIPSE_EQUINOX_LAUNCHER, set);
 				}
 			}
 		}
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/IGeneratorInfo.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/IGeneratorInfo.java
index aa6f46d..a013391 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/IGeneratorInfo.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/IGeneratorInfo.java
@@ -12,8 +12,7 @@ package org.eclipse.equinox.internal.provisional.p2.metadata.generator;
 
 import java.io.File;
 import java.net.URL;
-import java.util.ArrayList;
-import java.util.Set;
+import java.util.*;
 import org.eclipse.equinox.internal.provisional.frameworkadmin.ConfigData;
 import org.eclipse.equinox.internal.provisional.frameworkadmin.LauncherData;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepository;
@@ -116,4 +115,7 @@ public interface IGeneratorInfo {
 
 	public void setRootId(String value);
 
+	// TODO: This is kind of ugly. It's purpose is to allow us to craft CUs that we know about and need for our build
+	// We should try to replace this with something more generic prior to release
+	public Collection getOtherIUs();
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/generator/TestGeneratorInfo.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/generator/TestGeneratorInfo.java
index 50a1d30..376280f 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/generator/TestGeneratorInfo.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/generator/TestGeneratorInfo.java
@@ -12,8 +12,7 @@ package org.eclipse.equinox.p2.tests.generator;
 
 import java.io.File;
 import java.net.URL;
-import java.util.ArrayList;
-import java.util.Set;
+import java.util.*;
 import org.eclipse.equinox.internal.provisional.frameworkadmin.ConfigData;
 import org.eclipse.equinox.internal.provisional.frameworkadmin.LauncherData;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepository;
@@ -175,4 +174,8 @@ public class TestGeneratorInfo implements IGeneratorInfo {
 		return null;
 	}
 
+	public Collection getOtherIUs() {
+		return Collections.EMPTY_LIST;
+	}
+
 }

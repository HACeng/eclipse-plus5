commit 0087c35f0623f92d5f7cc72f11783351100a03a2
Author: Andrew Niefer <aniefer>
Date:   Mon May 12 18:05:43 2008 +0000

    bug 230314 - open generator to subclassing

21	10	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java
1	1	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/features/FeatureParser.java
12	6	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java
5	1	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/FeatureEntry.java
9	9	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
20	11	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/MetadataGeneratorHelper.java
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java
index b88552a..0703985 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java
@@ -89,13 +89,21 @@ public class EclipseGeneratorApplication implements IApplication {
 			provider.initialize(new File(argument), null, null, new File[] {new File(argument, "plugins")}, new File(argument, "features")); //$NON-NLS-1$ //$NON-NLS-2$
 			initializeForInplace(provider);
 		} else {
-			if (base != null && bundles != null && features != null)
-				provider.initialize(new File(base), null, null, new File[] {new File(bundles)}, new File(features));
+			// base is set but we expect everything else to have been set using 
+			// explicit args.  Note that if we are coming in via an Ant task, we have
+			// to ensure all the values are passed in
+			if (base != null) {
+				File[] bundlesLocation = bundles == null ? null : new File[] {new File(bundles)};
+				File featuresLocation = features == null ? null : new File(features);
+				provider.initialize(new File(base), null, null, bundlesLocation, featuresLocation);
+			}
 		}
 		initializeRepositories(provider);
 	}
 
 	private void initializeArtifactRepository(EclipseInstallGeneratorInfoProvider provider) throws ProvisionException {
+		if (artifactLocation == null)
+			return;
 		IArtifactRepositoryManager manager = (IArtifactRepositoryManager) ServiceHelper.getService(Activator.context, IArtifactRepositoryManager.class.getName());
 		URL location;
 		try {
@@ -344,15 +352,8 @@ public class EclipseGeneratorApplication implements IApplication {
 		System.out.println(NLS.bind(Messages.message_generatingMetadata, provider.getBaseLocation()));
 
 		long before = System.currentTimeMillis();
+		IStatus result = generate(provider);
 
-		Generator generator = new Generator(provider);
-
-		if (incrementalResult != null)
-			generator.setIncrementalResult(incrementalResult);
-		generator.setGenerateRootIU(generateRootIU);
-		IStatus result = generator.generate();
-
-		incrementalResult = null;
 		long after = System.currentTimeMillis();
 		if (result.isOK()) {
 			System.out.println(NLS.bind(Messages.message_generationCompleted, String.valueOf((after - before) / 1000)));
@@ -362,6 +363,16 @@ public class EclipseGeneratorApplication implements IApplication {
 		return new Integer(1);
 	}
 
+	protected IStatus generate(EclipseInstallGeneratorInfoProvider provider) {
+		Generator generator = new Generator(provider);
+		if (incrementalResult != null)
+			generator.setIncrementalResult(incrementalResult);
+		generator.setGenerateRootIU(generateRootIU);
+		IStatus result = generator.generate();
+		incrementalResult = null;
+		return result;
+	}
+
 	public Object start(IApplicationContext context) throws Exception {
 		return run((String[]) context.getArguments().get("application.args")); //$NON-NLS-1$
 	}
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/features/FeatureParser.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/features/FeatureParser.java
index 0ee9a23..e8475ef 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/features/FeatureParser.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/features/FeatureParser.java
@@ -37,7 +37,7 @@ public class FeatureParser extends DefaultHandler {
 
 	private final static SAXParserFactory parserFactory = SAXParserFactory.newInstance();
 	private SAXParser parser;
-	private Feature result;
+	protected Feature result;
 	private URL url;
 	private StringBuffer characters = null;
 
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java
index b4ec0c2..292ba36 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/EclipseInstallGeneratorInfoProvider.java
@@ -361,11 +361,16 @@ public class EclipseInstallGeneratorInfoProvider implements IGeneratorInfo {
 	}
 
 	public void initialize(File base) {
-		initialize(base, new File(base, "configuration"), new File(base, getDefaultExecutableName(os)), new File[] {new File(base, "plugins")}, new File(base, "features")); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
+		// if the various locations are set in self, use them.  Otherwise compute defaults
+		File[] bundles = bundleLocations == null ? new File[] {new File(base, "plugins")} : bundleLocations; //$NON-NLS-1$
+		File features = featuresLocation == null ? new File(base, "features") : featuresLocation; //$NON-NLS-1$
+		File executable = executableLocation == null ? new File(base, getDefaultExecutableName(os)) : executableLocation;
+		File configuration = configLocation == null ? new File(base, "configuration") : configLocation; //$NON-NLS-1$
+
+		initialize(base, configuration, executable, bundles, features);
 	}
 
-	public void initialize(File base, File config, File executable, File[] bundleLocations, File features) {
-		// TODO
+	public void initialize(File base, File config, File executable, File[] bundles, File features) {
 		if (base == null || !base.exists())
 			throw new RuntimeException(NLS.bind(Messages.exception_sourceDirectoryInvalid, base == null ? "null" : base.getAbsolutePath())); //$NON-NLS-1$
 		this.baseLocation = base;
@@ -373,9 +378,10 @@ public class EclipseInstallGeneratorInfoProvider implements IGeneratorInfo {
 			this.configLocation = config;
 		if (executable == null || executable.exists())
 			this.executableLocation = executable;
-		this.bundleLocations = bundleLocations;
-		this.featuresLocation = features;
-
+		if (bundles != null)
+			bundleLocations = bundles;
+		if (features != null)
+			featuresLocation = features;
 		expandBundleLocations();
 
 		// if the config or exe are not set then we cannot be generating any data related to the config so 
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/FeatureEntry.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/FeatureEntry.java
index 6ab0a22..0b0f9ea 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/FeatureEntry.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/FeatureEntry.java
@@ -14,7 +14,7 @@ package org.eclipse.equinox.internal.provisional.p2.metadata.generator;
  */
 public class FeatureEntry {
 	private final String id;
-	private final String version;
+	private String version;
 	private String url;
 	private String os;
 	private String ws;
@@ -167,6 +167,10 @@ public class FeatureEntry {
 		url = value;
 	}
 
+	public void setVersion(String value) {
+		version = value;
+	}
+
 	public String toString() {
 		StringBuffer result = new StringBuffer();
 
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
index 80669ff..68ca5d1 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
@@ -43,31 +43,31 @@ public class Generator {
 	public static class GeneratorResult {
 		public static final String CONFIGURATION_CUS = "CONFIGURATION_CUS"; //$NON-NLS-1$
 
-		final Map pluginShape = new HashMap();
+		final public Map pluginShape = new HashMap();
 
 		/**
 		 * The set of generated IUs that will be children of the root IU
 		 */
-		final Set rootIUs = new HashSet();
+		final public Set rootIUs = new HashSet();
 		/**
 		 * The set of generated IUs that will not be children of the root IU
 		 */
-		final Set nonRootIUs = new HashSet();
+		final public Set nonRootIUs = new HashSet();
 
 		/**
 		 * Map of symbolic name to a set of generated CUs for that IU
 		 */
-		final Map configurationIUs = new HashMap();
+		final public Map configurationIUs = new HashMap();
 
 		/**
 		 * Map launcherConfig to config.ini ConfigData
 		 */
-		final Map configData = new HashMap();
+		final public Map configData = new HashMap();
 
 		/**
 		 * Returns all IUs generated during this execution of the generator.
 		 */
-		Set allGeneratedIUs() {
+		public Set allGeneratedIUs() {
 			HashSet all = new HashSet();
 			all.addAll(rootIUs);
 			all.addAll(nonRootIUs);
@@ -77,7 +77,7 @@ public class Generator {
 		/**
 		 * Returns the IU in this result with the given id.
 		 */
-		IInstallableUnit getInstallableUnit(String id) {
+		public IInstallableUnit getInstallableUnit(String id) {
 			for (Iterator iterator = rootIUs.iterator(); iterator.hasNext();) {
 				IInstallableUnit tmp = (IInstallableUnit) iterator.next();
 				if (tmp.getId().equals(id))
@@ -107,7 +107,7 @@ public class Generator {
 
 	static final String DEFAULT_BUNDLE_LOCALIZATION = "plugin"; //$NON-NLS-1$	
 
-	private final IGeneratorInfo info;
+	protected final IGeneratorInfo info;
 
 	private GeneratorResult incrementalResult = null;
 	private ProductFile productFile = null;
@@ -1059,7 +1059,7 @@ public class Generator {
 		return null;
 	}
 
-	private Feature[] getFeatures(File folder) {
+	protected Feature[] getFeatures(File folder) {
 		if (folder == null || !folder.exists())
 			return new Feature[0];
 		File[] locations = folder.listFiles();
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/MetadataGeneratorHelper.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/MetadataGeneratorHelper.java
index 01762c6..a5bf0fe 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/MetadataGeneratorHelper.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/MetadataGeneratorHelper.java
@@ -638,10 +638,16 @@ public class MetadataGeneratorHelper {
 	}
 
 	public static IInstallableUnit createGroupIU(Feature feature, IInstallableUnit featureIU, Properties extraProperties) {
+		return createGroupIU(feature, featureIU, extraProperties, true);
+	}
+
+	public static IInstallableUnit createGroupIU(Feature feature, IInstallableUnit featureIU, Properties extraProperties, boolean transformIds) {
 		if (isPatch(feature))
 			return createPatchIU(feature, featureIU, extraProperties);
 		InstallableUnitDescription iu = new MetadataFactory.InstallableUnitDescription();
-		String id = getTransformedId(feature.getId(), /*isPlugin*/false, /*isGroup*/true);
+		String id = feature.getId();
+		if (transformIds)
+			id = getTransformedId(id, /*isPlugin*/false, /*isGroup*/true);
 		iu.setId(id);
 		Version version = new Version(feature.getVersion());
 		iu.setVersion(version);
@@ -659,12 +665,18 @@ public class MetadataGeneratorHelper {
 		iu.setUpdateDescriptor(MetadataFactory.createUpdateDescriptor(id, new VersionRange(new Version(0, 0, 0), true, new Version(feature.getVersion()), false), IUpdateDescriptor.NORMAL, null));
 
 		FeatureEntry entries[] = feature.getEntries();
-		RequiredCapability[] required = new RequiredCapability[entries.length + 1];
+		RequiredCapability[] required = new RequiredCapability[entries.length + (featureIU == null ? 0 : 1)];
 		for (int i = 0; i < entries.length; i++) {
 			VersionRange range = getVersionRange(entries[i]);
-			required[i] = MetadataFactory.createRequiredCapability(IU_NAMESPACE, getTransformedId(entries[i].getId(), entries[i].isPlugin(), /*isGroup*/true), range, getFilter(entries[i]), entries[i].isOptional(), false);
+			String requiredId = entries[i].getId();
+			if (transformIds)
+				requiredId = getTransformedId(entries[i].getId(), entries[i].isPlugin(), /*isGroup*/true);
+			required[i] = MetadataFactory.createRequiredCapability(IU_NAMESPACE, requiredId, range, getFilter(entries[i]), entries[i].isOptional(), false);
 		}
-		required[entries.length] = MetadataFactory.createRequiredCapability(IU_NAMESPACE, featureIU.getId(), new VersionRange(featureIU.getVersion(), true, featureIU.getVersion(), true), INSTALL_FEATURES_FILTER, false, false);
+		// the feature IU could be null if we are just generating a feature structure rather than 
+		// actual features.
+		if (featureIU != null)
+			required[entries.length] = MetadataFactory.createRequiredCapability(IU_NAMESPACE, featureIU.getId(), new VersionRange(featureIU.getVersion(), true, featureIU.getVersion(), true), INSTALL_FEATURES_FILTER, false, false);
 		iu.setRequiredCapabilities(required);
 		iu.setTouchpointType(TouchpointType.NONE);
 		iu.setProperty(IInstallableUnit.PROP_TYPE_GROUP, Boolean.TRUE.toString());
@@ -1054,19 +1066,16 @@ public class MetadataGeneratorHelper {
 			return new VersionRange(version, true, version, true);
 		}
 		String match = entry.getMatch();
-		if (match == null)
-			// TODO should really be returning VersionRange.emptyRange here...
-			return null;
+		if (match == null || match.equals("compatible")) { //$NON-NLS-1$
+			Version upper = new Version(version.getMajor() + 1, 0, 0);
+			return new VersionRange(version, true, upper, false);
+		}
 		if (match.equals("perfect")) //$NON-NLS-1$
 			return new VersionRange(version, true, version, true);
 		if (match.equals("equivalent")) { //$NON-NLS-1$
 			Version upper = new Version(version.getMajor(), version.getMinor() + 1, 0);
 			return new VersionRange(version, true, upper, false);
 		}
-		if (match.equals("compatible")) { //$NON-NLS-1$
-			Version upper = new Version(version.getMajor() + 1, 0, 0);
-			return new VersionRange(version, true, upper, false);
-		}
 		if (match.equals("greaterOrEqual")) //$NON-NLS-1$
 			return new VersionRange(version, true, new VersionRange(null).getMaximum(), true);
 		return null;

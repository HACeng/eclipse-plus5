commit 4d563669c60bfb8711fba2c6584a1e6c10d9d918
Author: Simon Kaegi <skaegi>
Date:   Fri Jan 25 16:41:26 2008 +0000

    Bug 206077
     [prov] Should we have a ProfileDelta in a provisioning plan and an associated engine phase for applying it?

12	10	bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvisioningHelper.java
6	3	bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/Application.java
8	8	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/NewDependencyExpander.java
1	1	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/OperationGenerator.java
23	20	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java
166	116	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
23	3	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java
4	6	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/IDirector.java
3	27	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/IPlanner.java
147	0	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/ProfileChangeRequest.java
28	0	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/ProvisioningContext.java
17	1	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/ProvisioningPlan.java
1	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileParser.java
2	2	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
48	12	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Engine.java
43	0	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/InstallableUnitPropertyOperand.java
5	2	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/PhaseSet.java
20	20	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Profile.java
52	0	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/PropertyOperand.java
2	2	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Install.java
20	20	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Uninstall.java
3	2	bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/p2/reconciler/dropins/ProfileSynchronizer.java
3	2	bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/p2/reconciler/dropins/ProfileSynchronizer.java
6	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
10	4	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/AutomatedDirectorTest.java
9	5	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/ReplacePlanTest.java
2	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/RollbackTest.java
3	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/UpdateTest.java
23	18	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
4	4	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/InstallRegistryTest.java
3	3	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/PhaseTest.java
0	2	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ProfileRegistryTest.java
6	6	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ProfileTest.java
2	2	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/TouchpointTest.java
15	22	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/full/DirectorTest.java
17	25	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/full/End2EndTest.java
1	1	bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/NativeTouchpoint.java
33	29	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/ProfileGroup.java
5	2	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
11	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/InstallWizardPage.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/RevertProfileWizardPage.java
4	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UninstallWizardPage.java
5	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
4	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
5	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableUpdateElement.java
8	5	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProfileFactory.java
4	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/InstallAction.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/RevertAction.java
4	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UninstallAction.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/InstallOperation.java
6	47	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
diff --git a/bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvisioningHelper.java b/bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvisioningHelper.java
index 3c6a084..5d33e00 100644
--- a/bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvisioningHelper.java
+++ b/bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvisioningHelper.java
@@ -12,8 +12,7 @@ package org.eclipse.equinox.internal.p2.console;
 
 import java.io.IOException;
 import java.net.URL;
-import java.util.Iterator;
-import java.util.Properties;
+import java.util.*;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.configurator.Configurator;
@@ -83,7 +82,7 @@ public class ProvisioningHelper {
 		// could not load a repo at that location so create one as a convenience
 		String repositoryName = location + " - artifacts"; //$NON-NLS-1$
 		try {
-			return manager.createRepository(location, repositoryName, IArtifactRepositoryManager.TYPE_SIMPLE_REPOSITORY); 
+			return manager.createRepository(location, repositoryName, IArtifactRepositoryManager.TYPE_SIMPLE_REPOSITORY);
 		} catch (ProvisionException e) {
 			return null;
 		}
@@ -105,21 +104,21 @@ public class ProvisioningHelper {
 		if (profile != null)
 			return profile;
 
-		profile = new Profile(profileId);
+		Map profileProperties = new HashMap();
 
 		for (Iterator it = properties.keySet().iterator(); it.hasNext();) {
 			String key = (String) it.next();
-			profile.setValue(key, properties.getProperty(key));
+			profileProperties.put(key, properties.getProperty(key));
 		}
 
 		if (profile.getValue(Profile.PROP_ENVIRONMENTS) == null) {
 			EnvironmentInfo info = (EnvironmentInfo) ServiceHelper.getService(Activator.getContext(), EnvironmentInfo.class.getName());
 			if (info != null)
-				profile.setValue(Profile.PROP_ENVIRONMENTS, "osgi.os=" + info.getOS() + ",osgi.ws=" + info.getWS() + ",osgi.arch=" + info.getOSArch());
+				profileProperties.put(Profile.PROP_ENVIRONMENTS, "osgi.os=" + info.getOS() + ",osgi.ws=" + info.getWS() + ",osgi.arch=" + info.getOSArch());
 			else
-				profile.setValue(Profile.PROP_ENVIRONMENTS, "");
+				profileProperties.put(Profile.PROP_ENVIRONMENTS, "");
 		}
-
+		profile = new Profile(profileId, null, profileProperties);
 		profileRegistry.addProfile(profile);
 		return profile;
 	}
@@ -203,11 +202,14 @@ public class ProvisioningHelper {
 		if (engine == null)
 			throw new ProvisionException("No director service found.");
 		IInstallableUnit[] toInstall = (IInstallableUnit[]) units.toArray(IInstallableUnit.class);
-		ProvisioningPlan result = planner.getInstallPlan(toInstall, profile, null, progress);
+		ProvisioningContext context = new ProvisioningContext();
+		ProfileChangeRequest request = new ProfileChangeRequest(profile.getProfileId());
+		request.addInstallableUnits(toInstall);
+		ProvisioningPlan result = planner.getProvisioningPlan(request, context, progress);
 		if (!result.getStatus().isOK())
 			return result.getStatus();
 
-		return engine.perform(profile, new DefaultPhaseSet(), result.getOperands(), progress);
+		return engine.perform(profile, new DefaultPhaseSet(), result.getOperands(), result.getPropertyOperands(), progress);
 	}
 
 	/**
diff --git a/bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/Application.java b/bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/Application.java
index e52251f..a59a037 100644
--- a/bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/Application.java
+++ b/bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/Application.java
@@ -171,18 +171,21 @@ public class Application implements IApplication {
 		IInstallableUnit[] roots = (IInstallableUnit[]) metadataRepository.query(new InstallableUnitQuery(root, range), new Collector(), null).toArray(IInstallableUnit.class);
 		ProvisioningPlan result = null;
 		IStatus operationStatus = null;
+		ProvisioningContext context = new ProvisioningContext();
+		ProfileChangeRequest request = new ProfileChangeRequest(profile.getProfileId());
 		if (roots.length > 0) {
 			if (install) {
-				result = planner.getInstallPlan(roots, profile, null, new NullProgressMonitor());
+				request.addInstallableUnits(roots);
 			} else {
-				result = planner.getUninstallPlan(roots, profile, null, new NullProgressMonitor());
+				request.removeInstallableUnits(roots);
 			}
+			result = planner.getProvisioningPlan(request, context, new NullProgressMonitor());
 			if (!result.getStatus().isOK())
 				operationStatus = result.getStatus();
 			else {
 				Sizing sizeComputer = new Sizing(100, "Compute sizes"); //$NON-NLS-1$
 				PhaseSet set = new PhaseSet(new Phase[] {sizeComputer}) {/*empty */};
-				operationStatus = engine.perform(profile, set, result.getOperands(), new NullProgressMonitor());
+				operationStatus = engine.perform(profile, set, result.getOperands(), result.getPropertyOperands(), new NullProgressMonitor());
 				System.out.println(Messages.Disk_size + sizeComputer.getDiskSize());
 				System.out.println(Messages.Download_size + sizeComputer.getDlSize());
 				operationStatus = (install ? director.install(roots, profile, null, new NullProgressMonitor()) //
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/NewDependencyExpander.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/NewDependencyExpander.java
index 9a5f334..03db089 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/NewDependencyExpander.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/NewDependencyExpander.java
@@ -229,7 +229,7 @@ public class NewDependencyExpander {
 	private Map must = new HashMap();
 	private Picker picker;
 
-	private Profile profile;
+	private Dictionary selectionContext;
 
 	private RecommendationDescriptor recommendations;
 
@@ -239,12 +239,12 @@ public class NewDependencyExpander {
 
 	private Collection solution;
 
-	public NewDependencyExpander(IInstallableUnit[] r, IInstallableUnit[] alreadyInstalled, IInstallableUnit[] availableIUs, Profile profile, boolean includeOptional) {
-		this.profile = profile;
+	public NewDependencyExpander(IInstallableUnit[] r, IInstallableUnit[] alreadyInstalled, IInstallableUnit[] availableIUs, Dictionary selectionContext, boolean includeOptional) {
 		this.roots = (r == null) ? new IInstallableUnit[0] : r;
 		this.includeOptional = includeOptional;
 		alreadyInstalled = alreadyInstalled == null ? new IInstallableUnit[0] : alreadyInstalled;
 		this.alreadyInstalled.addAll(Arrays.asList(alreadyInstalled));
+		this.selectionContext = selectionContext;
 
 		IInstallableUnit[] result = new IInstallableUnit[roots.length + alreadyInstalled.length + availableIUs.length];
 		System.arraycopy(roots, 0, result, 0, roots.length);
@@ -317,7 +317,7 @@ public class NewDependencyExpander {
 	}
 
 	private Collection collectFlavorProviders(Collection toSearchFor) {
-		String flavor = profile.getValue(Profile.PROP_FLAVOR);
+		String flavor = (String) selectionContext.get(Profile.PROP_ENVIRONMENTS);
 		if (flavor == null)
 			return new HashSet();
 		IInstallableUnit[][] picked = picker.findInstallableUnit(null, null, new RequiredCapability[] {MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_FLAVOR, flavor, VersionRange.emptyRange, null, false, false)}, true /* fragmentsOnly */);
@@ -477,7 +477,7 @@ public class NewDependencyExpander {
 					List match = (List) must.get(key);
 					if (match == null) {
 						//We've never seen a requirement like this. Make a new match
-						must.put(key, createList(new Match(current, profile.getSelectionContext())));
+						must.put(key, createList(new Match(current, selectionContext)));
 					} else {
 						//look for an existing match whose version range is overlapping the new one
 						for (Iterator matches = match.iterator(); matches.hasNext();) {
@@ -491,7 +491,7 @@ public class NewDependencyExpander {
 							}
 						}
 						//the new match is disjoint from existing ones, so add a new match to the list
-						match.add(new Match(current, profile.getSelectionContext()));
+						match.add(new Match(current, selectionContext));
 					}
 				}
 			}
@@ -559,7 +559,7 @@ public class NewDependencyExpander {
 	}
 
 	private void invokeResolver(MultiStatus problems) {
-		resolver = new ResolutionHelper(profile.getSelectionContext(), recommendations);
+		resolver = new ResolutionHelper(selectionContext, recommendations);
 		Set toInstall = new HashSet(must.size());
 		for (Iterator iterator = must.values().iterator(); iterator.hasNext();) {
 			List allMatches = (List) iterator.next();
@@ -581,7 +581,7 @@ public class NewDependencyExpander {
 		if (filter == null)
 			return true;
 		try {
-			return DirectorActivator.context.createFilter(filter).match(profile.getSelectionContext());
+			return DirectorActivator.context.createFilter(filter).match(selectionContext);
 		} catch (InvalidSyntaxException e) {
 			return false;
 		}
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/OperationGenerator.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/OperationGenerator.java
index f79878e..494a9c9 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/OperationGenerator.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/OperationGenerator.java
@@ -75,7 +75,7 @@ public class OperationGenerator {
 			}
 			if (iuTo.getUpdateDescriptor() == null)
 				continue;
-						//when the ui we update from is in the new state, skip (for example FROM is A, C, B & TO is C (update of 
+			//when the ui we update from is in the new state, skip (for example FROM is A, C, B & TO is C (update of 
 			InstallableUnitQuery updateQuery = new InstallableUnitQuery(iuTo.getUpdateDescriptor().getId(), iuTo.getUpdateDescriptor().getRange());
 			Iterator updates = updateQuery.perform(from.iterator(), new Collector()).iterator();
 
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java
index 1f8ee1f..79aa000 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java
@@ -50,62 +50,65 @@ public class SimpleDirector implements IDirector {
 		}
 	}
 
-	public IStatus install(IInstallableUnit[] installRoots, Profile profile, URL[] metadataRepositories, IProgressMonitor monitor) {
+	public IStatus install(IInstallableUnit[] installRoots, Profile profile, ProvisioningContext context, IProgressMonitor monitor) {
 		String taskName = NLS.bind(Messages.Director_Task_Installing, profile.getValue(Profile.PROP_INSTALL_FOLDER));
 		SubMonitor sub = SubMonitor.convert(monitor, taskName, PlanWork + EngineWork);
 		try {
-			ProvisioningPlan plan = planner.getInstallPlan(installRoots, profile, metadataRepositories, sub.newChild(PlanWork));
-			if (!plan.getStatus().isOK())
-				return plan.getStatus();
+			ProfileChangeRequest request = new ProfileChangeRequest(profile.getProfileId());
+			request.addInstallableUnits(installRoots);
 			// mark the roots as such
 			for (int i = 0; i < installRoots.length; i++) {
-				profile.setInstallableUnitProfileProperty(installRoots[i], IInstallableUnit.PROP_PROFILE_ROOT_IU, Boolean.toString(true));
+				request.setInstallableUnitProfileProperty(installRoots[i], IInstallableUnit.PROP_PROFILE_ROOT_IU, Boolean.toString(true));
 			}
-			IStatus engineResult = engine.perform(profile, new DefaultPhaseSet(), plan.getOperands(), sub.newChild(EngineWork));
+			ProvisioningPlan plan = planner.getProvisioningPlan(request, context, sub.newChild(PlanWork));
+			if (!plan.getStatus().isOK())
+				return plan.getStatus();
+
+			IStatus engineResult = engine.perform(profile, new DefaultPhaseSet(), plan.getOperands(), plan.getPropertyOperands(), sub.newChild(EngineWork));
 			return engineResult;
 		} finally {
 			sub.done();
 		}
 	}
 
-	public IStatus become(IInstallableUnit target, Profile profile, URL[] metadataRepositories, IProgressMonitor monitor) {
+	public IStatus revert(IInstallableUnit target, Profile profile, ProvisioningContext context, IProgressMonitor monitor) {
 		SubMonitor sub = SubMonitor.convert(monitor, Messages.Director_Task_Updating, PlanWork + EngineWork);
 		try {
-			ProvisioningPlan plan = planner.getBecomePlan(target, profile, metadataRepositories, sub.newChild(PlanWork));
+			ProvisioningPlan plan = planner.getRevertPlan(target, context, sub.newChild(PlanWork));
 			if (!plan.getStatus().isOK())
 				return plan.getStatus();
-			return engine.perform(profile, new DefaultPhaseSet(), plan.getOperands(), sub.newChild(EngineWork));
+			return engine.perform(profile, new DefaultPhaseSet(), plan.getOperands(), plan.getPropertyOperands(), sub.newChild(EngineWork));
 		} finally {
 			sub.done();
 		}
 	}
 
-	public IStatus uninstall(IInstallableUnit[] uninstallRoots, Profile profile, URL[] metadataRepositories, IProgressMonitor monitor) {
+	public IStatus uninstall(IInstallableUnit[] uninstallRoots, Profile profile, ProvisioningContext context, IProgressMonitor monitor) {
 		SubMonitor sub = SubMonitor.convert(monitor, Messages.Director_Task_Uninstalling, PlanWork + EngineWork);
 		try {
-			ProvisioningPlan plan = planner.getUninstallPlan(uninstallRoots, profile, metadataRepositories, sub.newChild(PlanWork));
+			ProfileChangeRequest request = new ProfileChangeRequest(profile.getProfileId());
+			request.removeInstallableUnits(uninstallRoots);
+			ProvisioningPlan plan = planner.getProvisioningPlan(request, context, sub.newChild(PlanWork));
 			if (!plan.getStatus().isOK())
 				return plan.getStatus();
-			return engine.perform(profile, new DefaultPhaseSet(), plan.getOperands(), sub.newChild(EngineWork));
+			return engine.perform(profile, new DefaultPhaseSet(), plan.getOperands(), plan.getPropertyOperands(), sub.newChild(EngineWork));
 		} finally {
 			sub.done();
 		}
 	}
 
-	public IStatus replace(IInstallableUnit[] toUninstall, IInstallableUnit[] toInstall, Profile profile, URL[] metadataRepositories, IProgressMonitor monitor) {
+	public IStatus replace(IInstallableUnit[] toUninstall, IInstallableUnit[] toInstall, Profile profile, ProvisioningContext context, IProgressMonitor monitor) {
 		SubMonitor sub = SubMonitor.convert(monitor, Messages.Director_Task_Updating, PlanWork + EngineWork);
+		ProfileChangeRequest request = new ProfileChangeRequest(profile.getProfileId());
+		request.addInstallableUnits(toInstall);
+		request.removeInstallableUnits(toUninstall);
 		try {
-			ProvisioningPlan plan = planner.getReplacePlan(toUninstall, toInstall, profile, metadataRepositories, sub.newChild(PlanWork));
+			ProvisioningPlan plan = planner.getProvisioningPlan(request, context, sub.newChild(PlanWork));
 			if (!plan.getStatus().isOK())
 				return plan.getStatus();
-			return engine.perform(profile, new DefaultPhaseSet(), plan.getOperands(), sub.newChild(EngineWork));
+			return engine.perform(profile, new DefaultPhaseSet(), plan.getOperands(), plan.getPropertyOperands(), sub.newChild(EngineWork));
 		} finally {
 			sub.done();
 		}
 	}
-
-	public IStatus revert(IInstallableUnit previous, Profile profile, URL[] metadataRepositories, IProgressMonitor monitor) {
-		return become(previous, profile, metadataRepositories, monitor);
-	}
-
 }
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
index 66e07f2..5ffa904 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
@@ -10,69 +10,87 @@ package org.eclipse.equinox.internal.p2.director;
 
 import java.net.URL;
 import java.util.*;
+import java.util.Map.Entry;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.resolution.ResolutionHelper;
+import org.eclipse.equinox.internal.p2.rollback.FormerState;
 import org.eclipse.equinox.p2.core.ProvisionException;
-import org.eclipse.equinox.p2.director.IPlanner;
-import org.eclipse.equinox.p2.director.ProvisioningPlan;
-import org.eclipse.equinox.p2.engine.Operand;
-import org.eclipse.equinox.p2.engine.Profile;
+import org.eclipse.equinox.p2.director.*;
+import org.eclipse.equinox.p2.engine.*;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.metadata.query.InstallableUnitQuery;
 import org.eclipse.equinox.p2.metadata.query.UpdateQuery;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepositoryManager;
 import org.eclipse.equinox.p2.query.Collector;
-import org.eclipse.equinox.p2.query.Query;
 import org.eclipse.osgi.service.resolver.VersionRange;
 import org.eclipse.osgi.util.NLS;
 
 public class SimplePlanner implements IPlanner {
 	static final int ExpandWork = 12;
 
-	public ProvisioningPlan getInstallPlan(IInstallableUnit[] installRoots, Profile profile, URL[] metadataRepositories, IProgressMonitor monitor) {
-		SubMonitor sub = SubMonitor.convert(monitor, ExpandWork);
-		sub.setTaskName(Messages.Director_Task_Resolving_Dependencies);
-		try {
-			MultiStatus result = new MultiStatus(DirectorActivator.PI_DIRECTOR, 1, Messages.Director_Install_Problems, null);
-			// Get the list of ius installed in the profile we are installing into
-			IInstallableUnit[] alreadyInstalled = getInstallableUnits(profile);
+	private IInstallableUnit[] getInstallableUnits(Profile profile) {
+		return (IInstallableUnit[]) profile.query(InstallableUnitQuery.ANY, new Collector(), null).toArray(IInstallableUnit.class);
+	}
 
-			// If any of these are already installed, return a warning status
-			// specifying that they are already installed.
-			for (int i = 0; i < installRoots.length; i++)
-				for (int j = 0; j < alreadyInstalled.length; j++)
-					if (installRoots[i].equals(alreadyInstalled[j]))
-						result.merge(new Status(IStatus.WARNING, DirectorActivator.PI_DIRECTOR, NLS.bind(Messages.Director_Already_Installed, installRoots[i].getId())));
+	private Profile getProfile(String profileId) {
+		IProfileRegistry profileRegistry = (IProfileRegistry) ServiceHelper.getService(DirectorActivator.context, IProfileRegistry.class.getName());
+		if (profileRegistry == null)
+			return null;
+		return profileRegistry.getProfile(profileId);
+	}
 
-			if (!result.isOK()) {
-				return new ProvisioningPlan(result);
+	private ProvisioningPlan generateProvisioningPlan(Collection fromState, Collection toState, List fromStateOrder, List newStateOrder, ProfileChangeRequest changeRequest) {
+		return new ProvisioningPlan(Status.OK_STATUS, generateOperations(fromState, toState, fromStateOrder, newStateOrder), generatePropertyOperations(changeRequest));
+	}
+
+	private PropertyOperand[] generatePropertyOperations(ProfileChangeRequest profileChangeRequest) {
+		Profile profile = profileChangeRequest.getProfile();
+		List operands = new ArrayList();
+		// First deal with profile properties to remove.  Only generate an operand if the property was there in the first place
+		String[] toRemove = profileChangeRequest.getPropertiesToRemove();
+		Map existingProperties = profile.getProperties();
+		for (int i = 0; i < toRemove.length; i++) {
+			if (existingProperties.containsKey(toRemove[i]))
+				operands.add(new PropertyOperand(toRemove[i], existingProperties.get(toRemove[i]), null));
+		}
+		// Now deal with profile property changes/additions
+		Map propertyChanges = profileChangeRequest.getPropertiesToAdd();
+		Iterator iter = propertyChanges.keySet().iterator();
+		while (iter.hasNext()) {
+			String key = (String) iter.next();
+			operands.add(new PropertyOperand(key, existingProperties.get(key), propertyChanges.get(key)));
+		}
+		// Now deal with iu property changes/additions.  
+		// TODO we aren't yet checking that the IU will exist in the final profile, will the engine do this?
+		Map allIUPropertyChanges = profileChangeRequest.getInstallableUnitProfilePropertiesToAdd();
+		iter = allIUPropertyChanges.keySet().iterator();
+		while (iter.hasNext()) {
+			IInstallableUnit iu = (IInstallableUnit) iter.next();
+			Map iuPropertyChanges = (Map) allIUPropertyChanges.get(iu);
+			Iterator iuPropIter = iuPropertyChanges.keySet().iterator();
+			while (iuPropIter.hasNext()) {
+				String key = (String) iuPropIter.next();
+				Object oldValue = profile.getInstallableUnitProfileProperty(iu, key);
+				operands.add(new InstallableUnitPropertyOperand(iu, key, oldValue, iuPropertyChanges.get(key)));
 			}
-			//Compute the complete closure of things to install to successfully install the installRoots.
-			IInstallableUnit[] allUnits = gatherAvailableInstallableUnits(installRoots, metadataRepositories, sub.newChild(ExpandWork / 2));
-			NewDependencyExpander expander = new NewDependencyExpander(installRoots, alreadyInstalled, allUnits, profile, true);
-			IStatus expanderResult = expander.expand(sub.newChild(ExpandWork / 2));
-			if (!expanderResult.isOK()) {
-				result.merge(expanderResult);
-				return new ProvisioningPlan(result);
+		}
+		// Now deal with iu property removals.
+		// TODO we could optimize by not generating property removals for IU's that aren't there or won't be there.  
+		Map allIUPropertyDeletions = profileChangeRequest.getInstallableUnitProfilePropertiesToRemove();
+		iter = allIUPropertyDeletions.keySet().iterator();
+		while (iter.hasNext()) {
+			IInstallableUnit iu = (IInstallableUnit) iter.next();
+			toRemove = (String[]) allIUPropertyDeletions.get(iu);
+			Map existingIUProperties = profile.getInstallableUnitProfileProperties(iu);
+			for (int i = 0; i < toRemove.length; i++) {
+				if (existingIUProperties.containsKey(toRemove[i]))
+					operands.add(new InstallableUnitPropertyOperand(iu, toRemove[i], existingIUProperties.get(toRemove[i]), null));
 			}
 
-			ResolutionHelper oldStateHelper = new ResolutionHelper(profile.getSelectionContext(), null);
-			Collection oldState = oldStateHelper.attachCUs(Arrays.asList(alreadyInstalled));
-			List oldStateOrder = oldStateHelper.getSorted();
-
-			ResolutionHelper newStateHelper = new ResolutionHelper(profile.getSelectionContext(), expander.getRecommendations());
-			Collection newState = newStateHelper.attachCUs(expander.getAllInstallableUnits());
-			List newStateOrder = newStateHelper.getSorted();
-			return new ProvisioningPlan(Status.OK_STATUS, generateOperations(oldState, newState, oldStateOrder, newStateOrder));
-		} finally {
-			sub.done();
 		}
-	}
-
-	private IInstallableUnit[] getInstallableUnits(Profile profile) {
-		return (IInstallableUnit[]) profile.query(InstallableUnitQuery.ANY, new Collector(), null).toArray(IInstallableUnit.class);
+		return (PropertyOperand[]) operands.toArray(new PropertyOperand[operands.size()]);
 	}
 
 	private Operand[] generateOperations(Collection fromState, Collection toState, List fromStateOrder, List newStateOrder) {
@@ -118,96 +136,114 @@ public class SimplePlanner implements IPlanner {
 		return toSort;
 	}
 
-	public ProvisioningPlan getBecomePlan(IInstallableUnit target, Profile profile, URL[] metadataRepositories, IProgressMonitor monitor) {
+	public ProvisioningPlan getRevertPlan(IInstallableUnit profileSnapshot, ProvisioningContext context, IProgressMonitor monitor) {
 		SubMonitor sub = SubMonitor.convert(monitor, ExpandWork);
 		sub.setTaskName(Messages.Director_Task_Resolving_Dependencies);
 		try {
 			MultiStatus result = new MultiStatus(DirectorActivator.PI_DIRECTOR, 1, Messages.Director_Become_Problems, null);
 
-			if (!Boolean.valueOf(target.getProperty(IInstallableUnit.PROP_PROFILE_IU_KEY)).booleanValue()) {
-				result.add(new Status(IStatus.ERROR, DirectorActivator.PI_DIRECTOR, NLS.bind(Messages.Director_Unexpected_IU, target.getId())));
+			if (!Boolean.valueOf(profileSnapshot.getProperty(IInstallableUnit.PROP_PROFILE_IU_KEY)).booleanValue()) {
+				result.add(new Status(IStatus.ERROR, DirectorActivator.PI_DIRECTOR, NLS.bind(Messages.Director_Unexpected_IU, profileSnapshot.getId())));
+				return new ProvisioningPlan(result);
+			}
+			Profile profile = getProfile(profileSnapshot.getId());
+			if (profile == null) {
+				result.add(new Status(IStatus.ERROR, DirectorActivator.PI_DIRECTOR, NLS.bind(Messages.Director_Unexpected_IU, profileSnapshot.getId())));
 				return new ProvisioningPlan(result);
 			}
 
-			//TODO Here we need to deal with the change of properties between the two profiles
-			//Also if the profile changes (locations are being modified, etc), should not we do a full uninstall then an install?
+			//TODO if the profile changes (locations are being modified, etc), should not we do a full uninstall then an install?
 			//Maybe it depends on the kind of changes in a profile
 			//We need to get all the ius that were part of the profile and give that to be what to become
-			NewDependencyExpander toExpander = new NewDependencyExpander(new IInstallableUnit[] {target}, null, gatherAvailableInstallableUnits(new IInstallableUnit[] {target}, metadataRepositories, sub.newChild(ExpandWork / 2)), profile, true);
+
+			Dictionary snapshotSelectionContext = createSelectionContext(getSnapshotProperties(profileSnapshot));
+			IInstallableUnit[] availableIUs = gatherAvailableInstallableUnits(new IInstallableUnit[] {profileSnapshot}, context.getMetadataRepositories(), sub.newChild(ExpandWork / 2));
+			NewDependencyExpander toExpander = new NewDependencyExpander(new IInstallableUnit[] {profileSnapshot}, null, availableIUs, snapshotSelectionContext, true);
 			toExpander.expand(sub.newChild(ExpandWork / 2));
-			ResolutionHelper newStateHelper = new ResolutionHelper(profile.getSelectionContext(), toExpander.getRecommendations());
+			ResolutionHelper newStateHelper = new ResolutionHelper(snapshotSelectionContext, toExpander.getRecommendations());
 			Collection newState = newStateHelper.attachCUs(toExpander.getAllInstallableUnits());
-			newState.remove(target);
+			newState.remove(profileSnapshot);
 
-			Iterator it = profile.query(InstallableUnitQuery.ANY, new Collector(), null).iterator();
 			Collection oldIUs = new HashSet();
-			for (; it.hasNext();) {
+			for (Iterator it = profile.query(InstallableUnitQuery.ANY, new Collector(), null).iterator(); it.hasNext();) {
 				oldIUs.add(it.next());
 			}
 
-			ResolutionHelper oldStateHelper = new ResolutionHelper(profile.getSelectionContext(), null);
+			Dictionary oldSelectionContext = createSelectionContext(profile.getProperties());
+			ResolutionHelper oldStateHelper = new ResolutionHelper(oldSelectionContext, null);
 			Collection oldState = oldStateHelper.attachCUs(oldIUs);
-			return new ProvisioningPlan(Status.OK_STATUS, generateOperations(oldState, newState, oldStateHelper.getSorted(), newStateHelper.getSorted()));
+			ProfileChangeRequest profileChangeRequest = generateChangeRequest(profile, profileSnapshot, newState);
+			return generateProvisioningPlan(oldState, newState, oldStateHelper.getSorted(), newStateHelper.getSorted(), profileChangeRequest);
 		} finally {
 			sub.done();
 		}
 	}
 
-	private IInstallableUnit[] inProfile(IInstallableUnit[] toFind, Profile profile, boolean found, IProgressMonitor monitor) {
-		ArrayList result = new ArrayList(toFind.length);
-		for (int i = 0; i < toFind.length; i++) {
-			Query query = new InstallableUnitQuery(toFind[i].getId(), new VersionRange(toFind[i].getVersion(), true, toFind[i].getVersion(), true));
-			if (!profile.query(query, new HasMatchCollector(), monitor).isEmpty()) {
-				if (found)
-					result.add(toFind[i]);
-			} else {
-				if (!found)
-					result.add(toFind[i]);
-			}
+	private Dictionary createSelectionContext(Map properties) {
+		Hashtable result = new Hashtable(properties);
+		String environments = (String) properties.get(Profile.PROP_ENVIRONMENTS);
+		if (environments == null)
+			return result;
+		for (StringTokenizer tokenizer = new StringTokenizer(environments, ","); tokenizer.hasMoreElements();) { //$NON-NLS-1$
+			String entry = tokenizer.nextToken();
+			int i = entry.indexOf('=');
+			String key = entry.substring(0, i).trim();
+			String value = entry.substring(i + 1).trim();
+			result.put(key, value);
 		}
-		return (IInstallableUnit[]) result.toArray(new IInstallableUnit[result.size()]);
+		return result;
 	}
 
-	public ProvisioningPlan getUninstallPlan(IInstallableUnit[] uninstallRoots, Profile profile, URL[] metadataRepositories, IProgressMonitor monitor) {
-		SubMonitor sub = SubMonitor.convert(monitor, ExpandWork);
-		sub.setTaskName(Messages.Director_Task_Resolving_Dependencies);
-		try {
-			IInstallableUnit[] toReallyUninstall = inProfile(uninstallRoots, profile, true, sub.newChild(0));
-			if (toReallyUninstall.length == 0) {
-				return new ProvisioningPlan(new Status(IStatus.OK, DirectorActivator.PI_DIRECTOR, Messages.Director_Nothing_To_Uninstall));
-			} else if (toReallyUninstall.length != uninstallRoots.length) {
-				uninstallRoots = toReallyUninstall;
-			}
-
-			MultiStatus result = new MultiStatus(DirectorActivator.PI_DIRECTOR, 1, Messages.Director_Uninstall_Problems, null);
+	private Map getSnapshotProperties(IInstallableUnit profileSnapshot) {
+		Map result = new HashMap();
+		for (Iterator it = profileSnapshot.getProperties().entrySet().iterator(); it.hasNext();) {
+			Entry entry = (Entry) it.next();
+			String key = (String) entry.getKey();
+			if (IInstallableUnit.PROP_PROFILE_IU_KEY.equals(key) || key.startsWith(FormerState.IUPROP_PREFIX))
+				continue;
 
-			IInstallableUnit[] alreadyInstalled = getInstallableUnits(profile);
-			ResolutionHelper oldStateHelper = new ResolutionHelper(profile.getSelectionContext(), null);
-			Collection oldState = oldStateHelper.attachCUs(Arrays.asList(alreadyInstalled));
+			result.put(key, entry.getValue());
+		}
+		return result;
+	}
 
-			NewDependencyExpander expander = new NewDependencyExpander(uninstallRoots, new IInstallableUnit[0], alreadyInstalled, profile, true);
-			expander.expand(sub.newChild(ExpandWork / 3));
-			Collection toUninstallClosure = new ResolutionHelper(profile.getSelectionContext(), null).attachCUs(expander.getAllInstallableUnits());
+	// TODO note that this only describes property changes, not the IU changes.
+	private ProfileChangeRequest generateChangeRequest(Profile currentProfile, IInstallableUnit iuDescribingNewState, Collection newIUs) {
+		ProfileChangeRequest request = new ProfileChangeRequest(currentProfile.getProfileId());
 
-			Collection remainingIUs = new HashSet(oldState);
-			remainingIUs.removeAll(toUninstallClosure);
-			IInstallableUnit[] allUnits = gatherAvailableInstallableUnits(uninstallRoots, metadataRepositories, sub.newChild(ExpandWork / 3));
-			NewDependencyExpander finalExpander = new NewDependencyExpander(null, (IInstallableUnit[]) remainingIUs.toArray(new IInstallableUnit[remainingIUs.size()]), allUnits, profile, true);
-			finalExpander.expand(sub.newChild(ExpandWork / 3));
-			ResolutionHelper newStateHelper = new ResolutionHelper(profile.getSelectionContext(), null);
-			Collection newState = newStateHelper.attachCUs(finalExpander.getAllInstallableUnits());
-
-			for (int i = 0; i < uninstallRoots.length; i++) {
-				if (newState.contains(uninstallRoots[i]))
-					result.add(new Status(IStatus.ERROR, DirectorActivator.PI_DIRECTOR, NLS.bind(Messages.Director_Cannot_Uninstall, uninstallRoots[i])));
+		for (Iterator iter = currentProfile.getProperties().keySet().iterator(); iter.hasNext();) {
+			String key = (String) iter.next();
+			request.removeProfileProperty(key);
+		}
+		IInstallableUnit[] ius = getInstallableUnits(currentProfile);
+		for (int i = 0; i < ius.length; i++) {
+			for (Iterator iter = currentProfile.getInstallableUnitProfileProperties(ius[i]).keySet().iterator(); iter.hasNext();) {
+				String key = (String) iter.next();
+				request.removeInstallableUnitProfileProperty(ius[i], key);
 			}
-			if (!result.isOK())
-				return new ProvisioningPlan(result);
-
-			return new ProvisioningPlan(Status.OK_STATUS, generateOperations(oldState, newState, oldStateHelper.getSorted(), newStateHelper.getSorted()));
-		} finally {
-			sub.done();
 		}
+		Map profileProperties = iuDescribingNewState.getProperties();
+		for (Iterator iter = profileProperties.keySet().iterator(); iter.hasNext();) {
+			String key = (String) iter.next();
+			// ignore the property that confirms this IU is a profile snapshot
+			if (IInstallableUnit.PROP_PROFILE_IU_KEY.equals(key))
+				continue;
+			if (key.startsWith(FormerState.IUPROP_PREFIX)) {
+				int postID = key.indexOf(FormerState.IUPROP_POSTFIX, FormerState.IUPROP_PREFIX.length());
+				String id = key.substring(FormerState.IUPROP_PREFIX.length(), postID);
+				for (Iterator iuIter = newIUs.iterator(); iuIter.hasNext();) {
+					IInstallableUnit iu = (IInstallableUnit) iuIter.next();
+					if (id.equals(iu.getId())) {
+						String iuPropKey = key.substring(postID + FormerState.IUPROP_POSTFIX.length());
+						request.setInstallableUnitProfileProperty(iu, iuPropKey, profileProperties.get(key));
+						continue;
+					}
+				}
+			} else {
+				request.setProfileProperty(key, profileProperties.get(key));
+			}
+		}
+		return request;
 	}
 
 	protected IInstallableUnit[] gatherAvailableInstallableUnits(IInstallableUnit[] additionalSource, URL[] repositories, IProgressMonitor monitor) {
@@ -245,27 +281,35 @@ public class SimplePlanner implements IPlanner {
 	}
 
 	private boolean hasHigherFidelity(IInstallableUnit iu, IInstallableUnit currentIU) {
-		if (new Boolean(currentIU.getProperty("iu.mock")).booleanValue() && !new Boolean(iu.getProperty("iu.mock")).booleanValue())
+		if (new Boolean(currentIU.getProperty("iu.mock")).booleanValue() && !new Boolean(iu.getProperty("iu.mock")).booleanValue()) //$NON-NLS-1$ //$NON-NLS-2$
 			return true;
 
 		return false;
 	}
 
-	public ProvisioningPlan getReplacePlan(IInstallableUnit[] toUninstall, IInstallableUnit[] toInstall, Profile profile, URL[] metadataRepositories, IProgressMonitor monitor) {
+	public ProvisioningPlan getProvisioningPlan(ProfileChangeRequest profileChangeRequest, ProvisioningContext context, IProgressMonitor monitor) {
 		SubMonitor sub = SubMonitor.convert(monitor, ExpandWork);
 		sub.setTaskName(Messages.Director_Task_Resolving_Dependencies);
 		try {
+			MultiStatus result = new MultiStatus(DirectorActivator.PI_DIRECTOR, 1, Messages.Director_Install_Problems, null);
 			//find the things being updated in the profile
+			Profile profile = profileChangeRequest.getProfile();
+
 			IInstallableUnit[] alreadyInstalled = getInstallableUnits(profile);
-			IInstallableUnit[] uninstallRoots = toUninstall;
+			IInstallableUnit[] uninstallRoots = profileChangeRequest.getRemovedInstallableUnits();
 
+			Dictionary currentSelectionContext = createSelectionContext(profile.getProperties());
 			//compute the transitive closure and remove them.
-			ResolutionHelper oldStateHelper = new ResolutionHelper(profile.getSelectionContext(), null);
+			ResolutionHelper oldStateHelper = new ResolutionHelper(currentSelectionContext, null);
 			Collection oldState = oldStateHelper.attachCUs(Arrays.asList(alreadyInstalled));
 
-			NewDependencyExpander expander = new NewDependencyExpander(uninstallRoots, new IInstallableUnit[0], alreadyInstalled, profile, true);
-			expander.expand(sub.newChild(ExpandWork / 3));
-			Collection toUninstallClosure = new ResolutionHelper(profile.getSelectionContext(), null).attachCUs(expander.getAllInstallableUnits());
+			NewDependencyExpander expander = new NewDependencyExpander(uninstallRoots, new IInstallableUnit[0], alreadyInstalled, currentSelectionContext, true);
+			IStatus expanderResult = expander.expand(sub.newChild(ExpandWork / 3));
+			if (!expanderResult.isOK()) {
+				result.merge(expanderResult);
+				return new ProvisioningPlan(result);
+			}
+			Collection toUninstallClosure = new ResolutionHelper(currentSelectionContext, null).attachCUs(expander.getAllInstallableUnits());
 
 			//add the new set.
 			Collection remainingIUs = new HashSet(oldState);
@@ -273,22 +317,32 @@ public class SimplePlanner implements IPlanner {
 			//		for (int i = 0; i < updateRoots.length; i++) {
 			//			remainingIUs.add(updateRoots[i]);
 			//		}
+			URL[] metadataRepositories = (context != null) ? context.getMetadataRepositories() : null;
 			IInstallableUnit[] allUnits = gatherAvailableInstallableUnits(null, metadataRepositories, sub.newChild(ExpandWork / 3));
-			NewDependencyExpander finalExpander = new NewDependencyExpander(toInstall, (IInstallableUnit[]) remainingIUs.toArray(new IInstallableUnit[remainingIUs.size()]), allUnits, profile, true);
-			finalExpander.expand(sub.newChild(ExpandWork / 3));
-			ResolutionHelper newStateHelper = new ResolutionHelper(profile.getSelectionContext(), null);
+			Dictionary newSelectionContext = createSelectionContext(profileChangeRequest.getProfileProperties());
+			String newFlavor = profileChangeRequest.getProfileProperty(Profile.PROP_FLAVOR);
+
+			NewDependencyExpander finalExpander = new NewDependencyExpander(profileChangeRequest.getAddedInstallableUnits(), (IInstallableUnit[]) remainingIUs.toArray(new IInstallableUnit[remainingIUs.size()]), allUnits, newSelectionContext, true);
+			IStatus finalExpanderResult = finalExpander.expand(sub.newChild(ExpandWork / 3));
+			if (!finalExpanderResult.isOK()) {
+				result.merge(finalExpanderResult);
+				return new ProvisioningPlan(result);
+			}
+
+			ResolutionHelper newStateHelper = new ResolutionHelper(newSelectionContext, null);
 			Collection newState = newStateHelper.attachCUs(finalExpander.getAllInstallableUnits());
 
-			return new ProvisioningPlan(Status.OK_STATUS, generateOperations(oldState, newState, oldStateHelper.getSorted(), newStateHelper.getSorted()));
+			return generateProvisioningPlan(oldState, newState, oldStateHelper.getSorted(), newStateHelper.getSorted(), profileChangeRequest);
 		} finally {
 			sub.done();
 		}
 	}
 
-	public IInstallableUnit[] updatesFor(IInstallableUnit toUpdate, URL[] repositories, IProgressMonitor monitor) {
+	public IInstallableUnit[] updatesFor(IInstallableUnit toUpdate, ProvisioningContext context, IProgressMonitor monitor) {
 		Map resultsMap = new HashMap();
 
 		IMetadataRepositoryManager repoMgr = (IMetadataRepositoryManager) ServiceHelper.getService(DirectorActivator.context, IMetadataRepositoryManager.class.getName());
+		URL[] repositories = context.getMetadataRepositories();
 		if (repositories == null)
 			repositories = repoMgr.getKnownRepositories(IMetadataRepositoryManager.REPOSITORIES_ALL);
 
@@ -312,8 +366,4 @@ public class SimplePlanner implements IPlanner {
 		Collection results = resultsMap.values();
 		return (IInstallableUnit[]) results.toArray(new IInstallableUnit[results.size()]);
 	}
-
-	public ProvisioningPlan getRevertPlan(IInstallableUnit previous, Profile profile, URL[] metadataRepositories, IProgressMonitor monitor) {
-		return getBecomePlan(previous, profile, metadataRepositories, monitor);
-	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java
index 874560c..7c23c34 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java
@@ -9,8 +9,7 @@
 package org.eclipse.equinox.internal.p2.rollback;
 
 import java.net.URL;
-import java.util.EventObject;
-import java.util.Hashtable;
+import java.util.*;
 import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.director.DirectorActivator;
@@ -30,6 +29,8 @@ import org.eclipse.equinox.p2.query.Collector;
 import org.osgi.framework.Version;
 
 public class FormerState {
+	public static final String IUPROP_PREFIX = "---IUPROPERTY---"; //$NON-NLS-1$
+	public static final String IUPROP_POSTFIX = "---IUPROPERTYKEY---"; //$NON-NLS-1$
 	URL location = null;
 
 	Hashtable generatedIUs = new Hashtable(); //key profile id, value the iu representing this profile
@@ -93,7 +94,26 @@ public class FormerState {
 		result.setId(toConvert.getProfileId());
 		result.setVersion(new Version(0, 0, 0, Long.toString(System.currentTimeMillis())));
 		result.setRequiredCapabilities(IUTransformationHelper.toRequirements(toConvert.query(InstallableUnitQuery.ANY, new Collector(), null).iterator(), false));
-		//TODO Need to do the properties in the profile
+		// Save the profile properties
+		// TODO we aren't marking these properties in any special way to indicate they came from profile properties.  Should we?
+		Map properties = toConvert.getProperties();
+		Iterator iter = properties.keySet().iterator();
+		while (iter.hasNext()) {
+			String key = (String) iter.next();
+			result.setProperty(key, (String) properties.get(key));
+		}
+		// Save the IU profile properties
+		Iterator allIUs = toConvert.query(InstallableUnitQuery.ANY, new Collector(), null).iterator();
+		while (allIUs.hasNext()) {
+			IInstallableUnit iu = (IInstallableUnit) allIUs.next();
+			properties = toConvert.getInstallableUnitProfileProperties(iu);
+			iter = properties.keySet().iterator();
+			while (iter.hasNext()) {
+				String key = (String) iter.next();
+				result.setProperty(IUPROP_PREFIX + iu.getId() + IUPROP_POSTFIX + key, (String) properties.get(key));
+			}
+		}
+
 		//TODO Do we need to mark profile with a special marker
 		return MetadataFactory.createInstallableUnit(result);
 	}
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/IDirector.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/IDirector.java
index 187d3dc..8c99323 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/IDirector.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/IDirector.java
@@ -35,7 +35,7 @@ public interface IDirector {
 	 * @param monitor a progress monitor, or <code>null</code> if progress
 	 *    reporting is not desired
 	 */
-	public IStatus install(IInstallableUnit[] toInstall, Profile profile, URL[] metadataRepositories, IProgressMonitor monitor);
+	public IStatus install(IInstallableUnit[] toInstall, Profile profile, ProvisioningContext context, IProgressMonitor monitor);
 
 	/**
 	 * Uninstalls the given units from the given profile.
@@ -45,13 +45,11 @@ public interface IDirector {
 	 * @param monitor a progress monitor, or <code>null</code> if progress
 	 *    reporting is not desired
 	 */
-	public IStatus uninstall(IInstallableUnit[] toUninstall, Profile profile, URL[] metadataRepositories, IProgressMonitor monitor);
+	public IStatus uninstall(IInstallableUnit[] toUninstall, Profile profile, ProvisioningContext context, IProgressMonitor monitor);
 
-	public IStatus become(IInstallableUnit target, Profile profile, URL[] metadataRepositories, IProgressMonitor monitor);
+	public IStatus replace(IInstallableUnit[] toUninstall, IInstallableUnit[] toInstall, Profile profile, ProvisioningContext context, IProgressMonitor monitor);
 
-	public IStatus replace(IInstallableUnit[] toUninstall, IInstallableUnit[] toInstall, Profile profile, URL[] metadataRepositories, IProgressMonitor monitor);
-
-	public IStatus revert(IInstallableUnit previous, Profile profile, URL[] metadataRepositories, IProgressMonitor monitor);
+	public IStatus revert(IInstallableUnit previous, Profile profile, ProvisioningContext context, IProgressMonitor monitor);
 
 	/**
 	 * Returns the location of the director's rollback repository, where information about
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/IPlanner.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/IPlanner.java
index 8e9733d..d2bc5e1 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/IPlanner.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/IPlanner.java
@@ -8,9 +8,7 @@
  ******************************************************************************/
 package org.eclipse.equinox.p2.director;
 
-import java.net.URL;
 import org.eclipse.core.runtime.IProgressMonitor;
-import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 
 /**
@@ -21,32 +19,10 @@ import org.eclipse.equinox.p2.metadata.IInstallableUnit;
  * provisioning operands that the engine should perform.  
  */
 public interface IPlanner {
-	/**
-	 * Provides a plan for installing the given units into the given profile.
-	 * 
-	 * @param toInstall The units to install
-	 * @param profile The profile to install into
-	 * @param monitor a progress monitor, or <code>null</code> if progress
-	 *    reporting is not desired
-	 */
-	public ProvisioningPlan getInstallPlan(IInstallableUnit[] toInstall, Profile profile, URL[] metadataRepositories, IProgressMonitor monitor);
+	public ProvisioningPlan getProvisioningPlan(ProfileChangeRequest profileChangeRequest, ProvisioningContext context, IProgressMonitor monitor);
 
-	/**
-	 * Provides a plan for uninstalling the given units from the given profile.
-	 * 
-	 * @param toUninstall The units to uninstall
-	 * @param profile The profile from which to uninstall
-	 * @param monitor a progress monitor, or <code>null</code> if progress
-	 *    reporting is not desired
-	 */
-	public ProvisioningPlan getUninstallPlan(IInstallableUnit[] toUninstall, Profile profile, URL[] metadataRepositories, IProgressMonitor monitor);
+	public ProvisioningPlan getRevertPlan(IInstallableUnit profileSnapshot, ProvisioningContext context, IProgressMonitor monitor);
 
-	public ProvisioningPlan getBecomePlan(IInstallableUnit target, Profile profile, URL[] metadataRepositories, IProgressMonitor monitor);
-
-	public ProvisioningPlan getReplacePlan(IInstallableUnit[] toUninstall, IInstallableUnit[] toInstall, Profile profile, URL[] metadataRepositories, IProgressMonitor monitor);
-
-	public ProvisioningPlan getRevertPlan(IInstallableUnit previous, Profile profile, URL[] metadataRepositories, IProgressMonitor monitor);
-
-	public IInstallableUnit[] updatesFor(IInstallableUnit toUpdate, URL[] metadataRepositories, IProgressMonitor monitor);
+	public IInstallableUnit[] updatesFor(IInstallableUnit toUpdate, ProvisioningContext context, IProgressMonitor monitor);
 
 }
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/ProfileChangeRequest.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/ProfileChangeRequest.java
new file mode 100644
index 0000000..a0c7445
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/ProfileChangeRequest.java
@@ -0,0 +1,147 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others. All rights reserved. This
+ * program and the accompanying materials are made available under the terms of
+ * the Eclipse Public License v1.0 which accompanies this distribution, and is
+ * available at http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors: IBM Corporation - initial API and implementation
+ ******************************************************************************/
+package org.eclipse.equinox.p2.director;
+
+import java.util.*;
+import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
+import org.eclipse.equinox.internal.p2.director.DirectorActivator;
+import org.eclipse.equinox.p2.engine.IProfileRegistry;
+import org.eclipse.equinox.p2.engine.Profile;
+import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+
+public class ProfileChangeRequest {
+
+	private final Profile profile;
+	private ArrayList iusToRemove = null; // list of ius to remove
+	private ArrayList iusToAdd = null; // list of ius to add
+	private ArrayList propertiesToRemove = null; // list of keys for properties to be removed
+	private HashMap propertiesToAdd = null; // map of key->value for properties to be added
+	private Map iuPropertiesToAdd = null; // map iu->map of key->value pairs for properties to be added for an iu
+	private Map iuPropertiesToRemove = null; // map of iu->list of property keys to be removed for an iu
+
+	public ProfileChangeRequest(String profileId) {
+		IProfileRegistry profileRegistry = (IProfileRegistry) ServiceHelper.getService(DirectorActivator.context, IProfileRegistry.class.getName());
+		if (profileRegistry == null)
+			throw new IllegalStateException("ProfileRegistry unavailable");
+		profile = profileRegistry.getProfile(profileId);
+		if (profile == null)
+			throw new IllegalArgumentException("Profile id " + profileId + " is not registered.");
+	}
+
+	public Profile getProfile() {
+		return profile;
+	}
+
+	public Map getProfileProperties() {
+		Map result = new HashMap(profile.getProperties());
+		if (propertiesToRemove != null) {
+			for (Iterator it = propertiesToRemove.iterator(); it.hasNext();) {
+				result.remove(it.next());
+			}
+		}
+		if (propertiesToAdd != null)
+			result.putAll(propertiesToAdd);
+
+		return result;
+	}
+
+	public String getProfileProperty(String key) {
+		return (String) getProfileProperties().get(key);
+	}
+
+	public void addInstallableUnits(IInstallableUnit[] toInstall) {
+		if (iusToAdd == null)
+			iusToAdd = new ArrayList(toInstall.length);
+		for (int i = 0; i < toInstall.length; i++)
+			iusToAdd.add(toInstall[i]);
+	}
+
+	public void removeInstallableUnits(IInstallableUnit[] toUninstall) {
+		if (iusToRemove == null)
+			iusToRemove = new ArrayList(toUninstall.length);
+		for (int i = 0; i < toUninstall.length; i++)
+			iusToRemove.add(toUninstall[i]);
+	}
+
+	public void setProfileProperty(String key, Object value) {
+		if (propertiesToAdd == null)
+			propertiesToAdd = new HashMap();
+		propertiesToAdd.put(key, value);
+	}
+
+	public void removeProfileProperty(String key) {
+		if (propertiesToRemove == null)
+			propertiesToRemove = new ArrayList(1);
+		propertiesToRemove.add(key);
+	}
+
+	public void setInstallableUnitProfileProperty(IInstallableUnit iu, String key, Object value) {
+		if (iuPropertiesToAdd == null)
+			iuPropertiesToAdd = new HashMap();
+		Map properties = (Map) iuPropertiesToAdd.get(iu);
+		if (properties == null) {
+			properties = new HashMap();
+			iuPropertiesToAdd.put(iu, properties);
+		}
+		properties.put(key, value);
+	}
+
+	public void removeInstallableUnitProfileProperty(IInstallableUnit iu, String key) {
+		if (iuPropertiesToRemove == null)
+			iuPropertiesToRemove = new HashMap();
+		List keys = (List) iuPropertiesToRemove.get(iu);
+		if (keys == null) {
+			keys = new ArrayList();
+			iuPropertiesToRemove.put(iu, keys);
+		}
+		keys.add(key);
+	}
+
+	public IInstallableUnit[] getRemovedInstallableUnits() {
+		if (iusToRemove == null)
+			return new IInstallableUnit[0];
+		return (IInstallableUnit[]) iusToRemove.toArray(new IInstallableUnit[iusToRemove.size()]);
+	}
+
+	public IInstallableUnit[] getAddedInstallableUnits() {
+		if (iusToAdd == null)
+			return new IInstallableUnit[0];
+		return (IInstallableUnit[]) iusToAdd.toArray(new IInstallableUnit[iusToAdd.size()]);
+	}
+
+	// String [key, key, key] names of properties to remove
+	public String[] getPropertiesToRemove() {
+		if (propertiesToRemove == null)
+			return new String[0];
+		return (String[]) propertiesToRemove.toArray(new String[propertiesToRemove.size()]);
+	}
+
+	// map of key value pairs
+	public Map getPropertiesToAdd() {
+		if (propertiesToAdd == null)
+			return new HashMap();
+		return propertiesToAdd;
+	}
+
+	// map of iu->list of property keys to be removed for an iu	
+	public Map getInstallableUnitProfilePropertiesToRemove() {
+		if (iuPropertiesToRemove == null)
+			return new HashMap();
+		return iuPropertiesToRemove;
+	}
+
+	// TODO This can be represented and returned in whatever way makes most sense for planner/engine
+	// map iu->map of key->value pairs for properties to be added for an iu
+	public Map getInstallableUnitProfilePropertiesToAdd() {
+		if (iuPropertiesToAdd == null)
+			return new HashMap();
+		return iuPropertiesToAdd;
+	}
+
+}
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/ProvisioningContext.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/ProvisioningContext.java
new file mode 100644
index 0000000..88e62a3
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/ProvisioningContext.java
@@ -0,0 +1,28 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others. All rights reserved. This
+ * program and the accompanying materials are made available under the terms of
+ * the Eclipse Public License v1.0 which accompanies this distribution, and is
+ * available at http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors: IBM Corporation - initial API and implementation
+ ******************************************************************************/
+package org.eclipse.equinox.p2.director;
+
+import java.net.URL;
+
+public class ProvisioningContext {
+	private URL[] metadataRepositories;
+
+	public ProvisioningContext() {
+		// null repos means look at them all
+		metadataRepositories = null;
+	}
+
+	public ProvisioningContext(URL[] metadataRepositories) {
+		this.metadataRepositories = metadataRepositories;
+	}
+
+	public URL[] getMetadataRepositories() {
+		return metadataRepositories;
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/ProvisioningPlan.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/ProvisioningPlan.java
index 7819b4b..6e9e25e 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/ProvisioningPlan.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/ProvisioningPlan.java
@@ -10,18 +10,25 @@ package org.eclipse.equinox.p2.director;
 
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.p2.engine.Operand;
+import org.eclipse.equinox.p2.engine.PropertyOperand;
 
 public class ProvisioningPlan {
 	private IStatus status;
 	private Operand[] operands;
+	private PropertyOperand[] propertyOperands;
 
 	public ProvisioningPlan(IStatus status) {
-		this(status, new Operand[0]);
+		this(status, new Operand[0], new PropertyOperand[0]);
 	}
 
 	public ProvisioningPlan(IStatus status, Operand[] operands) {
+		this(status, operands, new PropertyOperand[0]);
+	}
+
+	public ProvisioningPlan(IStatus status, Operand[] operands, PropertyOperand[] propertyOperands) {
 		this.status = status;
 		this.operands = operands;
+		this.propertyOperands = propertyOperands;
 	}
 
 	public IStatus getStatus() {
@@ -36,4 +43,13 @@ public class ProvisioningPlan {
 	public Operand[] getOperands() {
 		return operands;
 	}
+
+	/** 
+	 * The property operands to pass to the engine.
+	 * @return the property operands to be executed. This may be an empty array if the
+	 * plan has errors or if there is nothing to do.
+	 */
+	public PropertyOperand[] getPropertyOperands() {
+		return propertyOperands;
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileParser.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileParser.java
index a57e2d5..5e63fe4 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileParser.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileParser.java
@@ -67,7 +67,7 @@ public abstract class ProfileParser extends XMLParser implements ProfileXMLConst
 		protected void finished() {
 			if (isValidXML() && currentProfile != null) {
 				if (propertiesHandler != null) {
-					currentProfile.addProperties(propertiesHandler.getProperties());
+					currentProfile.internalAddProperties(propertiesHandler.getProperties());
 				}
 			}
 		}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
index 3759515..476953d 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
@@ -69,11 +69,11 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 		File location = new File(installLocation.getURL().getPath());
 		boolean changed = false;
 		if (!location.equals(new File(selfProfile.getValue(Profile.PROP_INSTALL_FOLDER)))) {
-			selfProfile.setValue(Profile.PROP_INSTALL_FOLDER, location.getAbsolutePath());
+			selfProfile.internalSetValue(Profile.PROP_INSTALL_FOLDER, location.getAbsolutePath());
 			changed = true;
 		}
 		if (!location.equals(new File(selfProfile.getValue(Profile.PROP_CACHE)))) {
-			selfProfile.setValue(Profile.PROP_CACHE, location.getAbsolutePath());
+			selfProfile.internalSetValue(Profile.PROP_CACHE, location.getAbsolutePath());
 			changed = true;
 		}
 		if (changed)
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Engine.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Engine.java
index 7c14d88..d1ced9d 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Engine.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Engine.java
@@ -26,7 +26,7 @@ public class Engine {
 		this.eventBus = eventBus;
 	}
 
-	public IStatus perform(Profile profile, PhaseSet phaseSet, Operand[] operands, IProgressMonitor monitor) {
+	public IStatus perform(Profile profile, PhaseSet phaseSet, Operand[] iuOperands, PropertyOperand[] propertyOperands, IProgressMonitor monitor) {
 
 		// TODO -- Messages
 		if (profile == null)
@@ -35,36 +35,36 @@ public class Engine {
 		if (phaseSet == null)
 			throw new IllegalArgumentException("PhaseSet must not be null."); //$NON-NLS-1$
 
-		if (operands == null)
+		if (iuOperands == null)
 			throw new IllegalArgumentException("Operands must not be null."); //$NON-NLS-1$
 
 		if (monitor == null)
 			monitor = new NullProgressMonitor();
 
-		if (operands.length == 0)
-			return Status.OK_STATUS;
-
 		lockProfile(profile);
 		try {
-			eventBus.publishEvent(new BeginOperationEvent(profile, phaseSet, operands, this));
+			eventBus.publishEvent(new BeginOperationEvent(profile, phaseSet, iuOperands, this));
 
 			EngineSession session = new EngineSession(profile);
-			snapshotIUProperties(profile, operands);
-			MultiStatus result = phaseSet.perform(session, profile, operands, monitor);
+
+			synchronizeProfileProperties(profile, propertyOperands);
+
+			snapshotIUProperties(profile, iuOperands);
+			MultiStatus result = phaseSet.perform(session, profile, iuOperands, monitor);
 			if (result.isOK()) {
 				if (profile.isChanged()) {
 					IProfileRegistry profileRegistry = (IProfileRegistry) ServiceHelper.getService(EngineActivator.getContext(), IProfileRegistry.class.getName());
 					if (profileRegistry.getProfile(profile.getProfileId()) == null)
 						profileRegistry.addProfile(profile);
 					else {
-						moveIUProperties(profile, operands);
+						moveIUProperties(profile, iuOperands);
 						profileRegistry.updateProfile(profile);
 					}
 				}
-				eventBus.publishEvent(new CommitOperationEvent(profile, phaseSet, operands, this));
+				eventBus.publishEvent(new CommitOperationEvent(profile, phaseSet, iuOperands, this));
 				session.commit();
 			} else if (result.matches(IStatus.ERROR | IStatus.CANCEL)) {
-				eventBus.publishEvent(new RollbackOperationEvent(profile, phaseSet, operands, this, result));
+				eventBus.publishEvent(new RollbackOperationEvent(profile, phaseSet, iuOperands, this, result));
 				session.rollback();
 			}
 			//if there is only one child status, return that status instead because it will have more context
@@ -75,6 +75,42 @@ public class Engine {
 		}
 	}
 
+	private void synchronizeProfileProperties(Profile profile, PropertyOperand[] propertyOperands) {
+		if (propertyOperands == null)
+			return;
+
+		for (int i = 0; i < propertyOperands.length; i++) {
+			PropertyOperand propertyOperand = propertyOperands[i];
+			if (propertyOperand.first() != null) {
+				removeProfileProperty(profile, propertyOperand);
+			}
+
+			if (propertyOperand.second() != null) {
+				addProfileProperty(profile, propertyOperand);
+			}
+		}
+	}
+
+	private void addProfileProperty(Profile profile, PropertyOperand propertyOperand) {
+
+		if (propertyOperand instanceof InstallableUnitPropertyOperand) {
+			InstallableUnitPropertyOperand iuPropertyOperand = (InstallableUnitPropertyOperand) propertyOperand;
+			profile.internalSetInstallableUnitProfileProperty(iuPropertyOperand.getInstallableUnit(), iuPropertyOperand.getKey(), (String) iuPropertyOperand.second());
+		} else {
+			profile.internalSetValue(propertyOperand.getKey(), (String) propertyOperand.second());
+		}
+
+	}
+
+	private void removeProfileProperty(Profile profile, PropertyOperand propertyOperand) {
+		if (propertyOperand instanceof InstallableUnitPropertyOperand) {
+			InstallableUnitPropertyOperand iuPropertyOperand = (InstallableUnitPropertyOperand) propertyOperand;
+			profile.internalSetInstallableUnitProfileProperty(iuPropertyOperand.getInstallableUnit(), iuPropertyOperand.getKey(), null);
+		} else {
+			profile.internalSetValue(propertyOperand.getKey(), null);
+		}
+	}
+
 	//Support to move the IU properties as part of the engine. This is not really clean. We will have to review this.
 	//This has to be done in two calls because when we return from the phaseSet.perform the iu properties are already lost
 	Map snapshot = new HashMap();
@@ -96,7 +132,7 @@ public class Engine {
 				Enumeration enumProps = prop.keys();
 				while (enumProps.hasMoreElements()) {
 					String key = (String) enumProps.nextElement();
-					profile.setInstallableUnitProfileProperty(operands[i].second(), key, (String) prop.get(key));
+					profile.internalSetInstallableUnitProfileProperty(operands[i].second(), key, (String) prop.get(key));
 					prop.remove(key);
 				}
 			}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/InstallableUnitPropertyOperand.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/InstallableUnitPropertyOperand.java
new file mode 100644
index 0000000..21c3ee9
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/InstallableUnitPropertyOperand.java
@@ -0,0 +1,43 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.p2.engine;
+
+import org.eclipse.core.runtime.Assert;
+import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+
+public class InstallableUnitPropertyOperand extends PropertyOperand {
+	private final IInstallableUnit iu;
+
+	/**
+	 * Creates a new operand that represents replacing a property value associated
+	 * with an IU with another.  At least one of the provided property values must be
+	 * non-null.
+	 * 
+	 * @param iu The IInstallableUnit with which the property is associated
+	 * @param key The key of the property being modified
+	 * @param first The property value being removed, or <code>null</code>
+	 * @param second The property value being added, or <code>null</code>
+	 */
+	public InstallableUnitPropertyOperand(IInstallableUnit iu, String key, Object first, Object second) {
+		super(key, first, second);
+		//the iu must be specified.
+		Assert.isTrue(iu != null);
+		this.iu = iu;
+	}
+
+	public IInstallableUnit getInstallableUnit() {
+		return iu;
+	}
+
+	public String toString() {
+		return "IInstallableUnit property for " + iu.toString() + super.toString(); //$NON-NLS-1$
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/PhaseSet.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/PhaseSet.java
index 5e70e14..57c367a 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/PhaseSet.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/PhaseSet.java
@@ -57,8 +57,11 @@ public abstract class PhaseSet {
 	private int[] getProgressWeights(Operand[] operands) {
 		int[] weights = new int[phases.length];
 		for (int i = 0; i < phases.length; i += 1) {
-			//alter weights according to the number of operands applicable to that phase
-			weights[i] = phases[i].weight * (countApplicable(phases[i], operands) / operands.length);
+			if (operands.length > 0)
+				//alter weights according to the number of operands applicable to that phase
+				weights[i] = phases[i].weight * (countApplicable(phases[i], operands) / operands.length);
+			else
+				weights[i] = phases[i].weight;
 		}
 		return weights;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Profile.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Profile.java
index da78cad..80a7966 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Profile.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Profile.java
@@ -150,7 +150,7 @@ public class Profile implements IQueryable {
 	private void checkUpdateCompatibility() {
 		if (getValue(PROP_INSTALL_FEATURES) == null) {
 			String updateCompatible = System.getProperty(UPDATE_COMPATIBILITY, "false"); //$NON-NLS-1$
-			this.setValue(PROP_INSTALL_FEATURES, updateCompatible);
+			internalSetValue(PROP_INSTALL_FEATURES, updateCompatible);
 		}
 	}
 
@@ -223,25 +223,25 @@ public class Profile implements IQueryable {
 	 * 	Associate the given value with the given key
 	 * 	in the local storage of this profile.
 	 */
-	public void setValue(String key, String value) {
+	public void internalSetValue(String key, String value) {
 		storage.setProperty(key, value);
 		changed = true;
 	}
 
-	public Dictionary getSelectionContext() {
-		Hashtable result = new Hashtable(storage);
-		String environments = getValue(PROP_ENVIRONMENTS);
-		if (environments == null)
-			return result;
-		for (StringTokenizer tokenizer = new StringTokenizer(environments, ","); tokenizer.hasMoreElements();) { //$NON-NLS-1$
-			String entry = tokenizer.nextToken();
-			int i = entry.indexOf('=');
-			String key = entry.substring(0, i).trim();
-			String value = entry.substring(i + 1).trim();
-			result.put(key, value);
-		}
-		return result;
-	}
+	//	public Dictionary getSelectionContext() {
+	//		Hashtable result = new Hashtable(storage);
+	//		String environments = getValue(PROP_ENVIRONMENTS);
+	//		if (environments == null)
+	//			return result;
+	//		for (StringTokenizer tokenizer = new StringTokenizer(environments, ","); tokenizer.hasMoreElements();) { //$NON-NLS-1$
+	//			String entry = tokenizer.nextToken();
+	//			int i = entry.indexOf('=');
+	//			String key = entry.substring(0, i).trim();
+	//			String value = entry.substring(i + 1).trim();
+	//			result.put(key, value);
+	//		}
+	//		return result;
+	//	}
 
 	public Collector query(Query query, Collector collector, IProgressMonitor monitor) {
 		return query.perform(iuProperties.keySet().iterator(), collector);
@@ -255,7 +255,7 @@ public class Profile implements IQueryable {
 		return properties.getProperty(key);
 	}
 
-	public String setInstallableUnitProfileProperty(IInstallableUnit iu, String key, String value) {
+	public String internalSetInstallableUnitProfileProperty(IInstallableUnit iu, String key, String value) {
 		OrderedProperties properties = (OrderedProperties) iuProperties.get(iu);
 		if (properties == null) {
 			properties = new OrderedProperties();
@@ -286,12 +286,12 @@ public class Profile implements IQueryable {
 	 * 	Add all the properties in the map to the local properties
 	 * 	of the profile.
 	 */
-	public void addProperties(Map properties) {
+	public void internalAddProperties(Map properties) {
 		storage.putAll(properties);
 		changed = true;
 	}
 
-	public void addInstallableUnit(IInstallableUnit iu) {
+	public void internalAddInstallableUnit(IInstallableUnit iu) {
 		if (iuProperties.containsKey(iu))
 			return;
 
@@ -299,7 +299,7 @@ public class Profile implements IQueryable {
 		changed = true;
 	}
 
-	public void removeInstallableUnit(IInstallableUnit iu) {
+	public void internalRemoveInstallableUnit(IInstallableUnit iu) {
 		if (iuProperties.remove(iu) != null)
 			changed = true;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/PropertyOperand.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/PropertyOperand.java
new file mode 100644
index 0000000..5f990eb
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/PropertyOperand.java
@@ -0,0 +1,52 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.p2.engine;
+
+import org.eclipse.core.runtime.Assert;
+
+public class PropertyOperand {
+	private final Object first;
+	private final Object second;
+	private final String key;
+
+	/**
+	 * Creates a new operand that represents replacing a property value
+	 * with another.  At least one of the provided property values must be
+	 * non-null.
+	 * 
+	 * @param key The key of the property being modified
+	 * @param first The property value being removed, or <code>null</code>
+	 * @param second The property value being added, or <code>null</code>
+	 */
+	public PropertyOperand(String key, Object first, Object second) {
+		//the operand must specify have a key and have at least one non-null value
+		Assert.isTrue(key != null && (first != null || second != null));
+		this.first = first;
+		this.second = second;
+		this.key = key;
+	}
+
+	public Object first() {
+		return first;
+	}
+
+	public Object second() {
+		return second;
+	}
+
+	public String getKey() {
+		return key;
+	}
+
+	public String toString() {
+		return key + " = " + first + " --> " + second; //$NON-NLS-1$ //$NON-NLS-2$
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Install.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Install.java
index 31e7b67..72a17e6 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Install.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Install.java
@@ -40,7 +40,7 @@ public class Install extends Phase {
 			Touchpoint touchpoint = (Touchpoint) parameters.get(PARM_TOUCHPOINT);
 			Operand operand = (Operand) parameters.get(PARM_OPERAND);
 			IInstallableUnit iu = (IInstallableUnit) parameters.get(PARM_IU);
-			profile.removeInstallableUnit(iu);
+			profile.internalRemoveInstallableUnit(iu);
 			((ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName())).publishEvent(new InstallableUnitEvent(phaseId, false, profile, operand, InstallableUnitEvent.UNINSTALL, touchpoint));
 			return null;
 		}
@@ -55,7 +55,7 @@ public class Install extends Phase {
 			Operand operand = (Operand) parameters.get(PARM_OPERAND);
 			IInstallableUnit iu = (IInstallableUnit) parameters.get(PARM_IU);
 			IInstallableUnit preparedIU = touchpoint.prepareIU(iu, profile);
-			profile.addInstallableUnit(preparedIU);
+			profile.internalAddInstallableUnit(preparedIU);
 			((ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName())).publishEvent(new InstallableUnitEvent(phaseId, false, profile, operand, InstallableUnitEvent.INSTALL, touchpoint));
 			return null;
 		}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Uninstall.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Uninstall.java
index bacd5bd..73b55ca 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Uninstall.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Uninstall.java
@@ -24,21 +24,21 @@ public class Uninstall extends Phase {
 
 	final static class BeforeUninstallEventAction extends ProvisioningAction {
 		public IStatus execute(Map parameters) {
-			Profile profile = (Profile) parameters.get(PARM_PROFILE); 
-			String phaseId = (String) parameters.get(PARM_PHASE_ID); 
-			Touchpoint touchpoint = (Touchpoint) parameters.get(PARM_TOUCHPOINT); 
-			Operand operand = (Operand) parameters.get(PARM_OPERAND); 
+			Profile profile = (Profile) parameters.get(PARM_PROFILE);
+			String phaseId = (String) parameters.get(PARM_PHASE_ID);
+			Touchpoint touchpoint = (Touchpoint) parameters.get(PARM_TOUCHPOINT);
+			Operand operand = (Operand) parameters.get(PARM_OPERAND);
 			((ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName())).publishEvent(new InstallableUnitEvent(phaseId, true, profile, operand, InstallableUnitEvent.UNINSTALL, touchpoint));
 			return null;
 		}
 
 		public IStatus undo(Map parameters) {
-			Profile profile = (Profile) parameters.get(PARM_PROFILE); 
-			String phaseId = (String) parameters.get(PARM_PHASE_ID); 
-			Touchpoint touchpoint = (Touchpoint) parameters.get(PARM_TOUCHPOINT); 
-			Operand operand = (Operand) parameters.get(PARM_OPERAND); 
-			IInstallableUnit iu = (IInstallableUnit) parameters.get(PARM_IU); 
-			profile.addInstallableUnit(iu);
+			Profile profile = (Profile) parameters.get(PARM_PROFILE);
+			String phaseId = (String) parameters.get(PARM_PHASE_ID);
+			Touchpoint touchpoint = (Touchpoint) parameters.get(PARM_TOUCHPOINT);
+			Operand operand = (Operand) parameters.get(PARM_OPERAND);
+			IInstallableUnit iu = (IInstallableUnit) parameters.get(PARM_IU);
+			profile.internalAddInstallableUnit(iu);
 			((ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName())).publishEvent(new InstallableUnitEvent(phaseId, false, profile, operand, InstallableUnitEvent.INSTALL, touchpoint));
 			return null;
 		}
@@ -46,21 +46,21 @@ public class Uninstall extends Phase {
 
 	final static class AfterUninstallEventAction extends ProvisioningAction {
 		public IStatus execute(Map parameters) {
-			Profile profile = (Profile) parameters.get(PARM_PROFILE); 
-			String phaseId = (String) parameters.get(PARM_PHASE_ID); 
-			Touchpoint touchpoint = (Touchpoint) parameters.get(PARM_TOUCHPOINT); 
-			Operand operand = (Operand) parameters.get(PARM_OPERAND); 
-			IInstallableUnit iu = (IInstallableUnit) parameters.get(PARM_IU); 
-			profile.removeInstallableUnit(iu);
+			Profile profile = (Profile) parameters.get(PARM_PROFILE);
+			String phaseId = (String) parameters.get(PARM_PHASE_ID);
+			Touchpoint touchpoint = (Touchpoint) parameters.get(PARM_TOUCHPOINT);
+			Operand operand = (Operand) parameters.get(PARM_OPERAND);
+			IInstallableUnit iu = (IInstallableUnit) parameters.get(PARM_IU);
+			profile.internalRemoveInstallableUnit(iu);
 			((ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName())).publishEvent(new InstallableUnitEvent(phaseId, false, profile, operand, InstallableUnitEvent.UNINSTALL, touchpoint));
 			return null;
 		}
 
 		public IStatus undo(Map parameters) {
-			Profile profile = (Profile) parameters.get(PARM_PROFILE); 
-			String phaseId = (String) parameters.get(PARM_PHASE_ID); 
-			Touchpoint touchpoint = (Touchpoint) parameters.get(PARM_TOUCHPOINT); 
-			Operand operand = (Operand) parameters.get(PARM_OPERAND); 
+			Profile profile = (Profile) parameters.get(PARM_PROFILE);
+			String phaseId = (String) parameters.get(PARM_PHASE_ID);
+			Touchpoint touchpoint = (Touchpoint) parameters.get(PARM_TOUCHPOINT);
+			Operand operand = (Operand) parameters.get(PARM_OPERAND);
 			((ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName())).publishEvent(new InstallableUnitEvent(phaseId, true, profile, operand, InstallableUnitEvent.INSTALL, touchpoint));
 			return null;
 		}
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/p2/reconciler/dropins/ProfileSynchronizer.java b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/p2/reconciler/dropins/ProfileSynchronizer.java
index dd6b028..8ae2fce 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/p2/reconciler/dropins/ProfileSynchronizer.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/p2/reconciler/dropins/ProfileSynchronizer.java
@@ -16,6 +16,7 @@ import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.equinox.configurator.Configurator;
 import org.eclipse.equinox.internal.p2.reconciler.dropins.Activator;
 import org.eclipse.equinox.p2.director.IDirector;
+import org.eclipse.equinox.p2.director.ProvisioningContext;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.metadata.query.InstallableUnitQuery;
@@ -141,7 +142,7 @@ public class ProfileSynchronizer {
 		ServiceReference reference = context.getServiceReference(IDirector.class.getName());
 		IDirector director = (IDirector) context.getService(reference);
 		try {
-			director.install(toAdd, profile, new URL[0], monitor);
+			director.install(toAdd, profile, new ProvisioningContext(new URL[0]), monitor);
 		} finally {
 			context.ungetService(reference);
 		}
@@ -155,7 +156,7 @@ public class ProfileSynchronizer {
 		ServiceReference reference = context.getServiceReference(IDirector.class.getName());
 		IDirector director = (IDirector) context.getService(reference);
 		try {
-			director.uninstall(toRemove, profile, new URL[0], monitor);
+			director.uninstall(toRemove, profile, new ProvisioningContext(new URL[0]), monitor);
 		} finally {
 			context.ungetService(reference);
 		}
diff --git a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/p2/reconciler/dropins/ProfileSynchronizer.java b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/p2/reconciler/dropins/ProfileSynchronizer.java
index dd6b028..8ae2fce 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/p2/reconciler/dropins/ProfileSynchronizer.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/p2/reconciler/dropins/ProfileSynchronizer.java
@@ -16,6 +16,7 @@ import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.equinox.configurator.Configurator;
 import org.eclipse.equinox.internal.p2.reconciler.dropins.Activator;
 import org.eclipse.equinox.p2.director.IDirector;
+import org.eclipse.equinox.p2.director.ProvisioningContext;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.metadata.query.InstallableUnitQuery;
@@ -141,7 +142,7 @@ public class ProfileSynchronizer {
 		ServiceReference reference = context.getServiceReference(IDirector.class.getName());
 		IDirector director = (IDirector) context.getService(reference);
 		try {
-			director.install(toAdd, profile, new URL[0], monitor);
+			director.install(toAdd, profile, new ProvisioningContext(new URL[0]), monitor);
 		} finally {
 			context.ungetService(reference);
 		}
@@ -155,7 +156,7 @@ public class ProfileSynchronizer {
 		ServiceReference reference = context.getServiceReference(IDirector.class.getName());
 		IDirector director = (IDirector) context.getService(reference);
 		try {
-			director.uninstall(toRemove, profile, new URL[0], monitor);
+			director.uninstall(toRemove, profile, new ProvisioningContext(new URL[0]), monitor);
 		} finally {
 			context.ungetService(reference);
 		}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
index 6fc859c..4d936c5 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
@@ -574,13 +574,18 @@ public class AbstractProvisioningTest extends TestCase {
 	 * in the tearDown method.
 	 */
 	protected Profile createProfile(String name, Profile parent) {
+		return createProfile(name, parent, null);
+	}
+
+	protected Profile createProfile(String name, Profile parent, Map properties) {
 		//remove any existing profile with the same name
 		IProfileRegistry profileRegistry = (IProfileRegistry) ServiceHelper.getService(TestActivator.getContext(), IProfileRegistry.class.getName());
 		Profile profile = profileRegistry.getProfile(name);
 		if (profile != null)
 			profileRegistry.removeProfile(profile);
 		//create and return a new profile
-		profile = new Profile(name, parent);
+		profile = new Profile(name, parent, properties);
+		profileRegistry.addProfile(profile);
 		profilesToRemove.add(profile);
 		return profile;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/AutomatedDirectorTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/AutomatedDirectorTest.java
index fbea606..23c3fd7 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/AutomatedDirectorTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/AutomatedDirectorTest.java
@@ -8,6 +8,8 @@
  ******************************************************************************/
 package org.eclipse.equinox.p2.tests.director;
 
+import java.util.HashMap;
+import java.util.Map;
 import junit.framework.Test;
 import junit.framework.TestSuite;
 import org.eclipse.core.runtime.IStatus;
@@ -56,8 +58,10 @@ public class AutomatedDirectorTest extends AbstractProvisioningTest {
 		IDirector director = createDirector();
 
 		//Install into a profile in which the filter is satisfied
-		Profile satisfied = createProfile("Satisfied." + getName());
-		satisfied.setValue(Profile.PROP_ENVIRONMENTS, "FilterKey=true");
+		Map properties = new HashMap();
+		properties.put(Profile.PROP_ENVIRONMENTS, "FilterKey=true");
+		Profile satisfied = createProfile("Satisfied." + getName(), null, properties);
+
 		IStatus result = director.install(toInstallArray, satisfied, null, null);
 		assertTrue("1.0", result.isOK());
 		assertProfileContains("1.1", satisfied, allUnits);
@@ -131,8 +135,10 @@ public class AutomatedDirectorTest extends AbstractProvisioningTest {
 		assertTrue("1.0", !result.isOK());
 
 		//try again with the filter satisfied
-		profile.setValue(Profile.PROP_ENVIRONMENTS, "osgi.os=blort");
-		result = director.install(toInstallArray, profile, null, null);
+		Map properties = new HashMap();
+		properties.put(Profile.PROP_ENVIRONMENTS, "osgi.os=blort");
+		Profile profile2 = createProfile("TestProfile2." + getName(), null, properties);
+		result = director.install(toInstallArray, profile2, null, null);
 		assertTrue("2.0", result.isOK());
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/ReplacePlanTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/ReplacePlanTest.java
index fef9807..08cca93 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/ReplacePlanTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/ReplacePlanTest.java
@@ -67,19 +67,23 @@ public class ReplacePlanTest extends AbstractProvisioningTest {
 	public void testSimpleReplace() {
 		IInstallableUnit[] oldUnits = new IInstallableUnit[] {fa};
 		IInstallableUnit[] newUnits = new IInstallableUnit[] {fap};
-		ProvisioningPlan plan = planner.getReplacePlan(oldUnits, newUnits, profile, null, null);
+		ProfileChangeRequest request = new ProfileChangeRequest(profile.getProfileId());
+		request.removeInstallableUnits(oldUnits);
+		request.addInstallableUnits(newUnits);
+		ProvisioningPlan plan = planner.getProvisioningPlan(request, new ProvisioningContext(), null);
 		assertTrue("1.0", plan.getStatus().isOK());
 		assertProfileContainsAll("1.1", profile, oldUnits);
-		IStatus result = createEngine().perform(profile, new DefaultPhaseSet(), plan.getOperands(), null);
+		IStatus result = createEngine().perform(profile, new DefaultPhaseSet(), plan.getOperands(), plan.getPropertyOperands(), null);
 		assertTrue("1.2", result.isOK());
 		assertProfileContainsAll("1.3", profile, newUnits);
 	}
 
 	public void testReplaceFragment() {
 		//TODO it is strange that this succeeds, since frag1_4 and fa cannot co-exist
-		IInstallableUnit[] oldUnits = new IInstallableUnit[] {frag1};
-		IInstallableUnit[] newUnits = new IInstallableUnit[] {frag1_4};
-		ProvisioningPlan plan = planner.getReplacePlan(oldUnits, newUnits, profile, null, null);
+		ProfileChangeRequest request = new ProfileChangeRequest(profile.getProfileId());
+		request.removeInstallableUnits(new IInstallableUnit[] {frag1});
+		request.addInstallableUnits(new IInstallableUnit[] {frag1_4});
+		ProvisioningPlan plan = planner.getProvisioningPlan(request, new ProvisioningContext(), null);
 		assertTrue("1.0", plan.getStatus().isOK());
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/RollbackTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/RollbackTest.java
index d8e05d4..63f2c38 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/RollbackTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/RollbackTest.java
@@ -16,6 +16,7 @@ import org.eclipse.equinox.internal.p2.director.DirectorActivator;
 import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.core.location.AgentLocation;
 import org.eclipse.equinox.p2.director.IDirector;
+import org.eclipse.equinox.p2.director.ProvisioningContext;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.metadata.query.InstallableUnitQuery;
@@ -46,7 +47,7 @@ public class RollbackTest extends AbstractProvisioningTest {
 		IInstallableUnit[] ius = (IInstallableUnit[]) repo.query(InstallableUnitQuery.ANY, new Collector(), null).toArray(IInstallableUnit.class);
 		for (int i = 0; i < ius.length; i++)
 			System.out.println(ius[i]);
-		director.become(ius[0], profile, null, new NullProgressMonitor());
+		director.revert(ius[0], profile, new ProvisioningContext(), new NullProgressMonitor());
 		printProfile(profile);
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/UpdateTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/UpdateTest.java
index be58d87..d337d9f 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/UpdateTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/UpdateTest.java
@@ -54,7 +54,9 @@ public class UpdateTest extends AbstractProvisioningTest {
 	}
 
 	public void testInstall() {
-		ProvisioningPlan plan = planner.getInstallPlan(new IInstallableUnit[] {f1_1}, profile, null, new NullProgressMonitor());
+		ProfileChangeRequest request = new ProfileChangeRequest(profile.getProfileId());
+		request.addInstallableUnits(new IInstallableUnit[] {f1_1});
+		ProvisioningPlan plan = planner.getProvisioningPlan(request, new ProvisioningContext(), new NullProgressMonitor());
 		assertOK(plan.getStatus());
 		assertOK(director.install(new IInstallableUnit[] {f1_1}, profile, null, new NullProgressMonitor()));
 		for (Iterator iterator = getInstallableUnits(profile); iterator.hasNext();) {
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
index 1100e7f..2db0356 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
@@ -76,7 +76,7 @@ public class EngineTest extends AbstractProvisioningTest {
 		PhaseSet phaseSet = new DefaultPhaseSet();
 		Operand[] operands = new Operand[] {};
 		try {
-			engine.perform(profile, phaseSet, operands, new NullProgressMonitor());
+			engine.perform(profile, phaseSet, operands, null, new NullProgressMonitor());
 		} catch (IllegalArgumentException expected) {
 			return;
 		}
@@ -89,7 +89,7 @@ public class EngineTest extends AbstractProvisioningTest {
 		PhaseSet phaseSet = null;
 		Operand[] operands = new Operand[] {};
 		try {
-			engine.perform(profile, phaseSet, operands, new NullProgressMonitor());
+			engine.perform(profile, phaseSet, operands, null, new NullProgressMonitor());
 		} catch (IllegalArgumentException expected) {
 			return;
 		}
@@ -102,7 +102,7 @@ public class EngineTest extends AbstractProvisioningTest {
 		PhaseSet phaseSet = new DefaultPhaseSet();
 		Operand[] operands = null;
 		try {
-			engine.perform(profile, phaseSet, operands, new NullProgressMonitor());
+			engine.perform(profile, phaseSet, operands, null, new NullProgressMonitor());
 			fail();
 		} catch (IllegalArgumentException expected) {
 			//expected
@@ -114,7 +114,7 @@ public class EngineTest extends AbstractProvisioningTest {
 		Profile profile = createProfile("test");
 		PhaseSet phaseSet = new DefaultPhaseSet();
 		Operand[] operands = new Operand[] {};
-		IStatus result = engine.perform(profile, phaseSet, operands, new NullProgressMonitor());
+		IStatus result = engine.perform(profile, phaseSet, operands, null, new NullProgressMonitor());
 		assertTrue(result.isOK());
 	}
 
@@ -126,7 +126,7 @@ public class EngineTest extends AbstractProvisioningTest {
 		};
 		Operand op = new Operand(createResolvedIU(createIU("name")), null);
 		Operand[] operands = new Operand[] {op};
-		IStatus result = engine.perform(profile, phaseSet, operands, new NullProgressMonitor());
+		IStatus result = engine.perform(profile, phaseSet, operands, null, new NullProgressMonitor());
 		assertTrue(result.isOK());
 	}
 
@@ -140,19 +140,20 @@ public class EngineTest extends AbstractProvisioningTest {
 	}
 
 	public void testPerformInstallOSGiFramework() {
+		Map properties = new HashMap();
+		properties.put(Profile.PROP_INSTALL_FOLDER, testProvisioning.getAbsolutePath());
 
-		Profile profile = createProfile("testPerformInstallOSGiFramework");
-		profile.setValue(Profile.PROP_INSTALL_FOLDER, testProvisioning.getAbsolutePath());
+		Profile profile = createProfile("testPerformInstallOSGiFramework", null, properties);
 		for (Iterator it = getInstallableUnits(profile); it.hasNext();) {
 			PhaseSet phaseSet = new DefaultPhaseSet();
 			IInstallableUnit doomed = (IInstallableUnit) it.next();
 			Operand[] operands = new Operand[] {new Operand(createResolvedIU(doomed), null)};
-			engine.perform(profile, phaseSet, operands, new NullProgressMonitor());
+			engine.perform(profile, phaseSet, operands, null, new NullProgressMonitor());
 		}
 		PhaseSet phaseSet = new DefaultPhaseSet();
 
 		Operand[] operands = new Operand[] {new Operand(null, createOSGiIU())};
-		IStatus result = engine.perform(profile, phaseSet, operands, new NullProgressMonitor());
+		IStatus result = engine.perform(profile, phaseSet, operands, null, new NullProgressMonitor());
 		assertTrue(result.isOK());
 		Iterator ius = getInstallableUnits(profile);
 		assertTrue(ius.hasNext());
@@ -160,11 +161,12 @@ public class EngineTest extends AbstractProvisioningTest {
 
 	public void testPerformUpdateOSGiFramework() {
 
-		Profile profile = createProfile("testPerformUpdateOSGiFramework");
-		profile.setValue(Profile.PROP_INSTALL_FOLDER, testProvisioning.getAbsolutePath());
+		Map properties = new HashMap();
+		properties.put(Profile.PROP_INSTALL_FOLDER, testProvisioning.getAbsolutePath());
+		Profile profile = createProfile("testPerformUpdateOSGiFramework", null, properties);
 		PhaseSet phaseSet = new DefaultPhaseSet();
 		Operand[] operands = new Operand[] {new Operand(createOSGiIU(), createOSGiIU())};
-		IStatus result = engine.perform(profile, phaseSet, operands, new NullProgressMonitor());
+		IStatus result = engine.perform(profile, phaseSet, operands, null, new NullProgressMonitor());
 		assertTrue(result.isOK());
 		Iterator ius = getInstallableUnits(profile);
 		assertTrue(ius.hasNext());
@@ -172,26 +174,29 @@ public class EngineTest extends AbstractProvisioningTest {
 
 	public void testPerformUninstallOSGiFramework() {
 
-		Profile profile = createProfile("testPerformUninstallOSGiFramework");
-		profile.setValue(Profile.PROP_INSTALL_FOLDER, testProvisioning.getAbsolutePath());
+		Map properties = new HashMap();
+		properties.put(Profile.PROP_INSTALL_FOLDER, testProvisioning.getAbsolutePath());
+
+		Profile profile = createProfile("testPerformUninstallOSGiFramework", null, properties);
 		PhaseSet phaseSet = new DefaultPhaseSet();
 		Operand[] operands = new Operand[] {new Operand(createOSGiIU(), null)};
-		IStatus result = engine.perform(profile, phaseSet, operands, new NullProgressMonitor());
+		IStatus result = engine.perform(profile, phaseSet, operands, null, new NullProgressMonitor());
 		assertTrue(result.isOK());
 		assertEmptyProfile(profile);
 	}
 
 	public void testPerformRollback() {
 
-		Profile profile = createProfile("testPerformRollback");
-		profile.setValue(Profile.PROP_INSTALL_FOLDER, testProvisioning.getAbsolutePath());
+		Map properties = new HashMap();
+		properties.put(Profile.PROP_INSTALL_FOLDER, testProvisioning.getAbsolutePath());
+		Profile profile = createProfile("testPerformRollback", null, properties);
 		PhaseSet phaseSet = new DefaultPhaseSet();
 
 		Iterator ius = getInstallableUnits(profile);
 		assertFalse(ius.hasNext());
 
 		Operand[] operands = new Operand[] {new Operand(null, createOSGiIU()), new Operand(null, createBadIU())};
-		IStatus result = engine.perform(profile, phaseSet, operands, new NullProgressMonitor());
+		IStatus result = engine.perform(profile, phaseSet, operands, null, new NullProgressMonitor());
 		assertFalse(result.isOK());
 		ius = getInstallableUnits(profile);
 		//TODO Currently this test is failing. See bug 212058
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/InstallRegistryTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/InstallRegistryTest.java
index 3d7bcbc..047144c 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/InstallRegistryTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/InstallRegistryTest.java
@@ -58,9 +58,9 @@ public class InstallRegistryTest extends AbstractProvisioningTest {
 		Profile profile = createProfile("testProfile");
 		String profileId = profile.getProfileId();
 		assertEquals(0, getRegistrySize(profileId));
-		engine.perform(profile, phaseSet, new Operand[] {new Operand(null, createTestIU())}, new NullProgressMonitor());
+		engine.perform(profile, phaseSet, new Operand[] {new Operand(null, createTestIU())}, null, new NullProgressMonitor());
 		assertEquals(1, getRegistrySize(profileId));
-		engine.perform(profile, phaseSet, new Operand[] {new Operand(createTestIU(), null)}, new NullProgressMonitor());
+		engine.perform(profile, phaseSet, new Operand[] {new Operand(createTestIU(), null)}, null, new NullProgressMonitor());
 		assertEquals(0, getRegistrySize(profileId));
 		registry.getProfileInstallRegistries().remove(profile);
 	}
@@ -75,13 +75,13 @@ public class InstallRegistryTest extends AbstractProvisioningTest {
 		Profile profile = createProfile("testProfile");
 		String profileId = profile.getProfileId();
 		assertEquals(0, getRegistrySize(profileId));
-		engine.perform(profile, phaseSet, new Operand[] {new Operand(null, createTestIU())}, new NullProgressMonitor());
+		engine.perform(profile, phaseSet, new Operand[] {new Operand(null, createTestIU())}, null, new NullProgressMonitor());
 		assertEquals(1, getRegistrySize(profileId));
 
 		restart();
 
 		assertEquals(1, getRegistrySize(profileId));
-		engine.perform(profile, phaseSet, new Operand[] {new Operand(createTestIU(), null)}, new NullProgressMonitor());
+		engine.perform(profile, phaseSet, new Operand[] {new Operand(createTestIU(), null)}, null, new NullProgressMonitor());
 		assertEquals(0, getRegistrySize(profileId));
 		restart();
 		assertEquals(0, getRegistrySize(profileId));
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/PhaseTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/PhaseTest.java
index a2cdd6f..b3c660a 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/PhaseTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/PhaseTest.java
@@ -149,7 +149,7 @@ public class PhaseTest extends AbstractProvisioningTest {
 		PhaseSet phaseSet = new TestPhaseSet();
 		Profile profile = createProfile("PhaseTest");
 
-		engine.perform(profile, phaseSet, new Operand[0], new NullProgressMonitor());
+		engine.perform(profile, phaseSet, new Operand[0], null, new NullProgressMonitor());
 	}
 
 	public void testInitCompletePhase() {
@@ -175,7 +175,7 @@ public class PhaseTest extends AbstractProvisioningTest {
 		PhaseSet phaseSet = new TestPhaseSet(phase);
 		Profile profile = createProfile("PhaseTest");
 		IInstallableUnit unit = createIU("unit");
-		engine.perform(profile, phaseSet, new Operand[] {new Operand(null, unit)}, new NullProgressMonitor());
+		engine.perform(profile, phaseSet, new Operand[] {new Operand(null, unit)}, null, new NullProgressMonitor());
 		assertTrue(phase.initializePhase);
 		assertTrue(phase.completePhase);
 	}
@@ -204,7 +204,7 @@ public class PhaseTest extends AbstractProvisioningTest {
 		Profile profile = createProfile("PhaseTest");
 		IInstallableUnit unit = createIU("testInitCompleteOperand");
 
-		engine.perform(profile, phaseSet, new Operand[] {new Operand(null, unit)}, new NullProgressMonitor());
+		engine.perform(profile, phaseSet, new Operand[] {new Operand(null, unit)}, null, new NullProgressMonitor());
 		assertTrue(phase.initializeOperand);
 		assertTrue(phase.completeOperand);
 	}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ProfileRegistryTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ProfileRegistryTest.java
index 95e949f..c0d11e0 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ProfileRegistryTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ProfileRegistryTest.java
@@ -65,7 +65,6 @@ public class ProfileRegistryTest extends AbstractProvisioningTest {
 	public void testAddRemoveProfile() {
 		assertNull(registry.getProfile(PROFILE_NAME));
 		Profile test = createProfile(PROFILE_NAME);
-		registry.addProfile(test);
 		assertEquals(test.getProfileId(), registry.getProfile(PROFILE_NAME).getProfileId());
 		registry.removeProfile(test);
 		assertNull(registry.getProfile(PROFILE_NAME));
@@ -74,7 +73,6 @@ public class ProfileRegistryTest extends AbstractProvisioningTest {
 	public void testPeristence() {
 		assertNull(registry.getProfile(PROFILE_NAME));
 		Profile test = createProfile(PROFILE_NAME);
-		registry.addProfile(test);
 		assertEquals(test.getProfileId(), registry.getProfile(PROFILE_NAME).getProfileId());
 
 		restart();
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ProfileTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ProfileTest.java
index b0cf5a1..17b9647 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ProfileTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ProfileTest.java
@@ -118,31 +118,31 @@ public class ProfileTest extends AbstractProvisioningTest {
 	// for associated properties.
 	private Profile createTestProfile() {
 		Profile parent = createProfile(parentId);
-		parent.setValue(key, parentValue);
+		parent.internalSetValue(key, parentValue);
 		assertTrue(parentValue.equals(parent.getValue(key)));
-		parent.setValue(otherKey, otherValue);
+		parent.internalSetValue(otherKey, otherValue);
 		assertTrue(otherValue.equals(parent.getValue(otherKey)));
 
 		Profile child0 = createProfile(child0Id, parent);
-		child0.setValue(key, child0Value);
+		child0.internalSetValue(key, child0Value);
 		assertTrue(child0Value.equals(child0.getValue(key)));
 
 		Profile child1 = createProfile(child1Id, parent);
 		// no value in child1
 
 		Profile grandchild00 = createProfile(grandchild00Id, child0);
-		grandchild00.setValue(key, grandchild00Value);
+		grandchild00.internalSetValue(key, grandchild00Value);
 		assertTrue(grandchild00Value.equals(grandchild00.getValue(key)));
 
 		Profile grandchild01 = createProfile(grandchild01Id, child0);
 		// no value in grandchild01
 
 		Profile grandchild02 = createProfile(grandchild02Id, child0);
-		grandchild02.setValue(otherKey, grandchild02Value);
+		grandchild02.internalSetValue(otherKey, grandchild02Value);
 		assertTrue(grandchild02Value.equals(grandchild02.getValue(otherKey)));
 
 		Profile grandchild10 = createProfile(grandchild10Id, child1);
-		grandchild10.setValue(key, grandchild10Value);
+		grandchild10.internalSetValue(key, grandchild10Value);
 		assertTrue(grandchild10Value.equals(grandchild10.getValue(key)));
 
 		Profile grandchild11 = createProfile(grandchild11Id, child1);
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/TouchpointTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/TouchpointTest.java
index 73e1b52..874d2f6 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/TouchpointTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/TouchpointTest.java
@@ -131,7 +131,7 @@ public class TouchpointTest extends AbstractProvisioningTest {
 	public void testInitCompleteOperand() {
 		PhaseSet phaseSet = new TestPhaseSet();
 		Profile profile = createProfile("testProfile");
-		engine.perform(profile, phaseSet, new Operand[] {new Operand(null, createTestIU("operandTest"))}, new NullProgressMonitor());
+		engine.perform(profile, phaseSet, new Operand[] {new Operand(null, createTestIU("operandTest"))}, null, new NullProgressMonitor());
 		assertEquals(1, testTouchpoint.initializeOperand);
 		assertEquals(1, testTouchpoint.completeOperand);
 	}
@@ -139,7 +139,7 @@ public class TouchpointTest extends AbstractProvisioningTest {
 	public void testInitCompletePhase() {
 		PhaseSet phaseSet = new TestPhaseSet();
 		Profile profile = createProfile("testProfile");
-		engine.perform(profile, phaseSet, new Operand[] {new Operand(null, createTestIU("phaseTest"))}, new NullProgressMonitor());
+		engine.perform(profile, phaseSet, new Operand[] {new Operand(null, createTestIU("phaseTest"))}, null, new NullProgressMonitor());
 		assertEquals(1, testTouchpoint.initializeOperand);
 		assertEquals(1, testTouchpoint.completeOperand);
 	}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/full/DirectorTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/full/DirectorTest.java
index a82699c..a72ad44 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/full/DirectorTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/full/DirectorTest.java
@@ -10,8 +10,7 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.tests.full;
 
-import java.util.Iterator;
-import junit.framework.TestCase;
+import java.util.*;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
@@ -25,6 +24,7 @@ import org.eclipse.equinox.p2.metadata.query.InstallableUnitQuery;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepositoryManager;
 import org.eclipse.equinox.p2.query.Collector;
+import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 import org.eclipse.equinox.p2.tests.TestActivator;
 import org.eclipse.osgi.service.environment.EnvironmentInfo;
 import org.eclipse.osgi.service.resolver.VersionRange;
@@ -34,7 +34,7 @@ import org.osgi.framework.ServiceReference;
  * This test installs or uninstalls the IU defined by the property "eclipse.p2.autoInstall".
  * Metadata for the IUs to install must be generated separately before running this test.
  */
-public class DirectorTest extends TestCase {
+public class DirectorTest extends AbstractProvisioningTest {
 
 	public void testInstallIU() throws ProvisionException {
 		ServiceReference sr = TestActivator.context.getServiceReference(IDirector.class.getName());
@@ -62,31 +62,24 @@ public class DirectorTest extends TestCase {
 			throw new RuntimeException("Profile registry service not available");
 		}
 
-		String profileId = installFolder;
 		String newFlavor = System.getProperty("eclipse.p2.configurationFlavor");
 		boolean doUninstall = (Boolean.TRUE.equals(Boolean.valueOf(System.getProperty("eclipse.p2.doUninstall"))));
 
-		Profile p = profileRegistry.getProfile(profileId);
-		if (p == null) {
-			if (doUninstall) {
+		Profile p = null;
+		if (doUninstall) {
+			p = profileRegistry.getProfile(installFolder);
+			if (p == null)
 				throw new RuntimeException("Uninstalling from a nonexistent profile");
-			}
-			p = new Profile(installFolder); //Typically a profile would receive a name.
-			p.setValue(Profile.PROP_INSTALL_FOLDER, installFolder);
-			p.setValue(Profile.PROP_FLAVOR, newFlavor);
-			// TODO: should we add the profile to the registry here? instead of after test?
 		} else {
-			String currentFlavor = p.getValue(Profile.PROP_FLAVOR);
-			if (currentFlavor != null && !currentFlavor.endsWith(newFlavor)) {
-				throw new RuntimeException("Install flavor not consistent with profile flavor");
-			} else if (currentFlavor == null) {
-				p.setValue(Profile.PROP_FLAVOR, newFlavor);
-			}
-		}
+			Map properties = new HashMap();
+			properties.put(Profile.PROP_INSTALL_FOLDER, installFolder);
+			properties.put(Profile.PROP_FLAVOR, newFlavor);
+			EnvironmentInfo info = (EnvironmentInfo) ServiceHelper.getService(TestActivator.getContext(), EnvironmentInfo.class.getName());
+			if (info != null)
+				properties.put(Profile.PROP_ENVIRONMENTS, "osgi.os=" + info.getOS() + ",osgi.ws=" + info.getWS() + ",osgi.arch=" + info.getOSArch());
 
-		EnvironmentInfo info = (EnvironmentInfo) ServiceHelper.getService(TestActivator.getContext(), EnvironmentInfo.class.getName());
-		if (info != null)
-			p.setValue(Profile.PROP_ENVIRONMENTS, "osgi.os=" + info.getOS() + ",osgi.ws=" + info.getWS() + ",osgi.arch=" + info.getOSArch());
+			p = createProfile(installFolder, null, properties);
+		}
 
 		IInstallableUnit[] allRoots = new IInstallableUnit[1];
 		IStatus operationStatus = null;
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/full/End2EndTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/full/End2EndTest.java
index 8701088..24da16e 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/full/End2EndTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/full/End2EndTest.java
@@ -8,12 +8,11 @@
  ******************************************************************************/
 package org.eclipse.equinox.p2.tests.full;
 
-import java.util.Iterator;
+import java.util.*;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
-import org.eclipse.equinox.p2.director.IDirector;
-import org.eclipse.equinox.p2.director.IPlanner;
+import org.eclipse.equinox.p2.director.*;
 import org.eclipse.equinox.p2.engine.IProfileRegistry;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
@@ -56,29 +55,22 @@ public class End2EndTest extends AbstractProvisioningTest {
 		String newFlavor = System.getProperty("eclipse.p2.configurationFlavor");
 		boolean doUninstall = (Boolean.TRUE.equals(Boolean.valueOf(System.getProperty("eclipse.p2.doUninstall"))));
 
-		Profile profile1 = profileRegistry.getProfile(profileId);
-		if (profile1 == null) {
-			if (doUninstall) {
+		Profile p = null;
+		if (doUninstall) {
+			p = profileRegistry.getProfile(profileId);
+			if (p == null)
 				throw new RuntimeException("Uninstalling from a nonexistent profile");
-			}
-			profile1 = new Profile(profileId); //Typically a profile would receive a name.
-			profile1.setValue(Profile.PROP_INSTALL_FOLDER, installFolder + '/' + profileId);
-			profile1.setValue(Profile.PROP_FLAVOR, newFlavor);
-			// TODO: should we add the profile to the registry here? instead of after test?
 		} else {
-			String currentFlavor = profile1.getValue(Profile.PROP_FLAVOR);
-			if (currentFlavor != null && !currentFlavor.endsWith(newFlavor)) {
-				throw new RuntimeException("Install flavor not consistent with profile flavor");
-			} else if (currentFlavor == null) {
-				profile1.setValue(Profile.PROP_FLAVOR, newFlavor);
-			}
+			Map properties = new HashMap();
+			properties.put(Profile.PROP_INSTALL_FOLDER, installFolder + '/' + profileId);
+			properties.put(Profile.PROP_FLAVOR, newFlavor);
+			EnvironmentInfo info = (EnvironmentInfo) ServiceHelper.getService(TestActivator.getContext(), EnvironmentInfo.class.getName());
+			if (info != null)
+				properties.put(Profile.PROP_ENVIRONMENTS, "osgi.os=" + info.getOS() + ",osgi.ws=" + info.getWS() + ",osgi.arch=" + info.getOSArch());
+
+			p = createProfile(profileId, null, properties);
 		}
-
-		EnvironmentInfo info = (EnvironmentInfo) ServiceHelper.getService(TestActivator.getContext(), EnvironmentInfo.class.getName());
-		if (info != null)
-			profile1.setValue(Profile.PROP_ENVIRONMENTS, "osgi.os=" + info.getOS() + ",osgi.ws=" + info.getWS() + ",osgi.arch=" + info.getOSArch());
-
-		return profile1;
+		return p;
 	}
 
 	public void testInstallSDK() {
@@ -102,7 +94,7 @@ public class End2EndTest extends AbstractProvisioningTest {
 		assertTrue(profile2.query(new InstallableUnitQuery("sdk", VersionRange.emptyRange), new Collector(), null).isEmpty());
 
 		// Now test the rollback to a previous state, in this case we reinstall the SDK
-		s = director.become(snapshots[0].equals(firstSnapshot) ? snapshots[1] : snapshots[0], profile2, null, new NullProgressMonitor());
+		s = director.revert(snapshots[0].equals(firstSnapshot) ? snapshots[1] : snapshots[0], profile2, new ProvisioningContext(), new NullProgressMonitor());
 		if (!s.isOK())
 			fail("The become operation failed");
 
@@ -115,7 +107,7 @@ public class End2EndTest extends AbstractProvisioningTest {
 		assertNotIUs(new IInstallableUnit[] {getIU("sdk", new Version("3.3.0"))}, getInstallableUnits(profile2));
 
 		//Remove everything from the profile by becoming an empty profile
-		s = director.become(firstSnapshot, profile2, null, new NullProgressMonitor());
+		s = director.revert(firstSnapshot, profile2, new ProvisioningContext(), new NullProgressMonitor());
 		assertOK(s);
 		//		assertEmptyProfile(profile2);
 	}
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/NativeTouchpoint.java b/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/NativeTouchpoint.java
index ca987cc..faa987b 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/NativeTouchpoint.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/NativeTouchpoint.java
@@ -208,7 +208,7 @@ public class NativeTouchpoint extends Touchpoint {
 		for (int i = 0; i < unzippedFiles.length; i++)
 			unzippedFileNameBuffer.append(unzippedFiles[i].getAbsolutePath()).append("|");
 
-		String unzipped = profile.setInstallableUnitProfileProperty(iu, "unzipped" + "|" + originalSource + "|" + target, unzippedFileNameBuffer.toString());
+		String unzipped = profile.internalSetInstallableUnitProfileProperty(iu, "unzipped" + "|" + originalSource + "|" + target, unzippedFileNameBuffer.toString());
 
 		return Status.OK_STATUS;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/ProfileGroup.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/ProfileGroup.java
index 8c74378..de41ad0 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/ProfileGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/ProfileGroup.java
@@ -12,6 +12,8 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.admin.dialogs;
 
+import java.util.HashMap;
+import java.util.Map;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.Status;
 import org.eclipse.equinox.internal.p2.ui.admin.ProvAdminUIMessages;
@@ -193,37 +195,39 @@ public class ProfileGroup {
 		// We forced the id field to have content so don't 
 		// check its length
 		if (profile == null) {
-			profile = new Profile(id.getText().trim());
-		}
-		String value = location.getText().trim();
-		if (value.length() > 0) {
-			profile.setValue(Profile.PROP_INSTALL_FOLDER, value);
-		}
+			Map profileProperties = new HashMap();
 
-		value = cache.getText().trim();
-		if (value.length() > 0) {
-			profile.setValue(Profile.PROP_CACHE, value);
-		}
+			String value = location.getText().trim();
+			if (value.length() > 0) {
+				profileProperties.put(Profile.PROP_INSTALL_FOLDER, value);
+			}
 
-		value = name.getText().trim();
-		if (value.length() > 0) {
-			profile.setValue(Profile.PROP_NAME, value);
-		}
-		value = description.getText().trim();
-		if (value.length() > 0) {
-			profile.setValue(Profile.PROP_DESCRIPTION, value);
-		}
-		value = flavor.getText().trim();
-		if (value.length() > 0) {
-			profile.setValue(Profile.PROP_FLAVOR, value);
-		}
-		value = environments.getText().trim();
-		if (value.length() > 0) {
-			profile.setValue(Profile.PROP_ENVIRONMENTS, value);
-		}
-		value = nl.getText().trim();
-		if (value.length() > 0) {
-			profile.setValue(Profile.PROP_NL, value);
+			value = cache.getText().trim();
+			if (value.length() > 0) {
+				profileProperties.put(Profile.PROP_CACHE, value);
+			}
+
+			value = name.getText().trim();
+			if (value.length() > 0) {
+				profileProperties.put(Profile.PROP_NAME, value);
+			}
+			value = description.getText().trim();
+			if (value.length() > 0) {
+				profileProperties.put(Profile.PROP_DESCRIPTION, value);
+			}
+			value = flavor.getText().trim();
+			if (value.length() > 0) {
+				profileProperties.put(Profile.PROP_FLAVOR, value);
+			}
+			value = environments.getText().trim();
+			if (value.length() > 0) {
+				profileProperties.put(Profile.PROP_ENVIRONMENTS, value);
+			}
+			value = nl.getText().trim();
+			if (value.length() > 0) {
+				profileProperties.put(Profile.PROP_NL, value);
+			}
+			profile = new Profile(id.getText().trim(), null, profileProperties);
 		}
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
index 9f566a3..68085fc 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
@@ -16,7 +16,7 @@ import org.eclipse.equinox.internal.p2.ui.sdk.ProvSDKMessages;
 import org.eclipse.equinox.internal.p2.ui.sdk.ProvSDKUIActivator;
 import org.eclipse.equinox.internal.p2.ui.sdk.prefs.PreferenceConstants;
 import org.eclipse.equinox.p2.core.ProvisionException;
-import org.eclipse.equinox.p2.director.ProvisioningPlan;
+import org.eclipse.equinox.p2.director.*;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.query.*;
 import org.eclipse.equinox.p2.ui.ProvUI;
@@ -51,7 +51,10 @@ public class AutomaticUpdater implements IUpdateListener {
 				ElementQueryDescriptor descriptor = ProvSDKUIActivator.getDefault().getQueryProvider().getQueryDescriptor(eventWithOnlyRoots, IQueryProvider.AVAILABLE_UPDATES);
 				IInstallableUnit[] replacements = (IInstallableUnit[]) descriptor.queryable.query(descriptor.query, descriptor.collector, null).toArray(IInstallableUnit.class);
 				if (replacements.length > 0) {
-					final ProvisioningPlan plan = ProvisioningUtil.getPlanner().getReplacePlan(toUpdate, replacements, ProvisioningUtil.getProfile(event.getProfileId()), null, null);
+					ProfileChangeRequest request = new ProfileChangeRequest(event.getProfileId());
+					request.removeInstallableUnits(toUpdate);
+					request.addInstallableUnits(replacements);
+					final ProvisioningPlan plan = ProvisioningUtil.getPlanner().getProvisioningPlan(request, new ProvisioningContext(), null);
 					Job job = ProvisioningOperationRunner.schedule(new ProfileModificationOperation(ProvSDKMessages.AutomaticUpdater_AutomaticDownloadOperationName, event.getProfileId(), plan, new DownloadPhaseSet(), false), null);
 					job.addJobChangeListener(new JobChangeAdapter() {
 						public void done(IJobChangeEvent jobEvent) {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/InstallWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/InstallWizardPage.java
index 827fc2f..cb05ae6 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/InstallWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/InstallWizardPage.java
@@ -13,6 +13,7 @@ package org.eclipse.equinox.internal.p2.ui.dialogs;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.p2.core.ProvisionException;
+import org.eclipse.equinox.p2.director.ProfileChangeRequest;
 import org.eclipse.equinox.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.p2.engine.phases.Sizing;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
@@ -33,7 +34,9 @@ public class InstallWizardPage extends UpdateOrInstallWizardPage {
 		SubMonitor sub = SubMonitor.convert(monitor);
 		sub.setWorkRemaining(100);
 		try {
-			ProvisioningPlan plan = ProvisioningUtil.getInstallPlan(new IInstallableUnit[] {iu}, getProfileId(), sub.newChild(50));
+			ProfileChangeRequest changeRequest = new ProfileChangeRequest(getProfileId());
+			changeRequest.addInstallableUnits(new IInstallableUnit[] {iu});
+			ProvisioningPlan plan = ProvisioningUtil.getProvisioningPlan(changeRequest, sub.newChild(50));
 			Sizing info = ProvisioningUtil.getSizeInfo(plan, getProfileId(), sub.newChild(50));
 			if (info == null)
 				size = IUElement.SIZE_UNKNOWN;
@@ -52,7 +55,13 @@ public class InstallWizardPage extends UpdateOrInstallWizardPage {
 	protected ProfileModificationOperation createProfileModificationOperation(Object[] selectedElements, IProgressMonitor monitor) {
 		try {
 			IInstallableUnit[] selected = elementsToIUs(selectedElements);
-			ProvisioningPlan plan = ProvisioningUtil.getInstallPlan(selected, getProfileId(), monitor);
+			ProfileChangeRequest changeRequest = new ProfileChangeRequest(getProfileId());
+			changeRequest.addInstallableUnits(selected);
+			for (int i = 0; i < selected.length; i++) {
+				changeRequest.setInstallableUnitProfileProperty(selected[i], IInstallableUnit.PROP_PROFILE_ROOT_IU, Boolean.toString(true));
+			}
+
+			ProvisioningPlan plan = ProvisioningUtil.getProvisioningPlan(changeRequest, monitor);
 			IStatus status = plan.getStatus();
 			if (status.isOK())
 				return new InstallOperation(getOperationLabel(), getProfile().getProfileId(), plan, selected);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/RevertProfileWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/RevertProfileWizardPage.java
index d5babe3..645cc28 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/RevertProfileWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/RevertProfileWizardPage.java
@@ -185,7 +185,7 @@ public class RevertProfileWizardPage extends WizardPage {
 		IRunnableWithProgress runnable = new IRunnableWithProgress() {
 			public void run(IProgressMonitor monitor) {
 				try {
-					plan[0] = ProvisioningUtil.getRevertPlan(iu, profileId, monitor);
+					plan[0] = ProvisioningUtil.getRevertPlan(iu, monitor);
 				} catch (ProvisionException e) {
 					ProvUI.handleException(e, ProvUIMessages.RevertDialog_RevertError);
 				}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UninstallWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UninstallWizardPage.java
index 9d7e0c7..c592e12 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UninstallWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UninstallWizardPage.java
@@ -14,6 +14,7 @@ import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.p2.core.ProvisionException;
+import org.eclipse.equinox.p2.director.ProfileChangeRequest;
 import org.eclipse.equinox.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.ui.ProvUI;
@@ -30,7 +31,9 @@ public class UninstallWizardPage extends ProfileModificationWizardPage {
 
 	protected ProfileModificationOperation createProfileModificationOperation(Object[] selectedElements, IProgressMonitor monitor) {
 		try {
-			ProvisioningPlan plan = ProvisioningUtil.getUninstallPlan(elementsToIUs(selectedElements), getProfileId(), monitor);
+			ProfileChangeRequest request = new ProfileChangeRequest(getProfileId());
+			request.removeInstallableUnits(elementsToIUs(selectedElements));
+			ProvisioningPlan plan = ProvisioningUtil.getProvisioningPlan(request, monitor);
 			IStatus status = plan.getStatus();
 			if (status.isOK())
 				return new ProfileModificationOperation(ProvUIMessages.UninstallIUOperationLabel, getProfileId(), plan);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
index 748b717..a47562a 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
@@ -16,6 +16,7 @@ import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.model.AvailableUpdateElement;
 import org.eclipse.equinox.p2.core.ProvisionException;
+import org.eclipse.equinox.p2.director.ProfileChangeRequest;
 import org.eclipse.equinox.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.ui.ProvUI;
@@ -78,7 +79,10 @@ public class UpdateWizardPage extends UpdateOrInstallWizardPage {
 
 	protected ProfileModificationOperation createProfileModificationOperation(Object[] selectedElements, IProgressMonitor monitor) {
 		try {
-			ProvisioningPlan plan = ProvisioningUtil.getReplacePlan(getIUsToReplace(selectedElements), elementsToIUs(selectedElements), getProfileId(), monitor);
+			ProfileChangeRequest request = new ProfileChangeRequest(getProfileId());
+			request.removeInstallableUnits(getIUsToReplace(selectedElements));
+			request.addInstallableUnits(elementsToIUs(selectedElements));
+			ProvisioningPlan plan = ProvisioningUtil.getProvisioningPlan(request, monitor);
 			IStatus status = plan.getStatus();
 			if (status.isOK())
 				return new ProfileModificationOperation(getOperationLabel(), getProfile().getProfileId(), plan);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
index 7b9d893..a2de885 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
@@ -12,6 +12,7 @@ package org.eclipse.equinox.internal.p2.ui.model;
 
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.p2.core.ProvisionException;
+import org.eclipse.equinox.p2.director.ProfileChangeRequest;
 import org.eclipse.equinox.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.engine.phases.Sizing;
@@ -90,7 +91,9 @@ public class AvailableIUElement extends ProvElement implements IUElement {
 	}
 
 	protected ProvisioningPlan getSizingPlan() throws ProvisionException {
-		return ProvisioningUtil.getInstallPlan(new IInstallableUnit[] {getIU()}, profileID, null);
+		ProfileChangeRequest request = new ProfileChangeRequest(profileID);
+		request.addInstallableUnits(new IInstallableUnit[] {getIU()});
+		return ProvisioningUtil.getProvisioningPlan(request, null);
 	}
 
 	public IInstallableUnit getIU() {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableUpdateElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableUpdateElement.java
index b494f18..25ee9a0 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableUpdateElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableUpdateElement.java
@@ -11,6 +11,7 @@
 package org.eclipse.equinox.internal.p2.ui.model;
 
 import org.eclipse.equinox.p2.core.ProvisionException;
+import org.eclipse.equinox.p2.director.ProfileChangeRequest;
 import org.eclipse.equinox.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.ui.operations.ProvisioningUtil;
@@ -36,6 +37,9 @@ public class AvailableUpdateElement extends AvailableIUElement {
 	}
 
 	protected ProvisioningPlan getSizingPlan() throws ProvisionException {
-		return ProvisioningUtil.getReplacePlan(new IInstallableUnit[] {iuToBeUpdated}, new IInstallableUnit[] {getIU()}, profileID, null);
+		ProfileChangeRequest request = new ProfileChangeRequest(profileID);
+		request.removeInstallableUnits(new IInstallableUnit[] {iuToBeUpdated});
+		request.addInstallableUnits(new IInstallableUnit[] {getIU()});
+		return ProvisioningUtil.getProvisioningPlan(request, null);
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProfileFactory.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProfileFactory.java
index 797345a..f467a81 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProfileFactory.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProfileFactory.java
@@ -10,6 +10,8 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.ui;
 
+import java.util.HashMap;
+import java.util.Map;
 import org.eclipse.core.runtime.Platform;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.ui.ProvUIActivator;
@@ -32,11 +34,12 @@ public class ProfileFactory {
 	static private EnvironmentInfo info;
 
 	public static Profile makeProfile(String profileID) {
-		Profile profile = new Profile(profileID);
-		profile.setValue(Profile.PROP_INSTALL_FOLDER, getDefaultLocation());
-		profile.setValue(Profile.PROP_FLAVOR, getDefaultFlavor());
-		profile.setValue(Profile.PROP_ENVIRONMENTS, getDefaultEnvironments());
-		profile.setValue(Profile.PROP_NL, getDefaultNL());
+		Map profileProperties = new HashMap();
+		profileProperties.put(Profile.PROP_INSTALL_FOLDER, getDefaultLocation());
+		profileProperties.put(Profile.PROP_FLAVOR, getDefaultFlavor());
+		profileProperties.put(Profile.PROP_ENVIRONMENTS, getDefaultEnvironments());
+		profileProperties.put(Profile.PROP_NL, getDefaultNL());
+		Profile profile = new Profile(profileID, null, profileProperties);
 		try {
 			ProvisioningUtil.addProfile(profile, null);
 		} catch (ProvisionException e) {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/InstallAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/InstallAction.java
index 9d41a61..1e44fdf 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/InstallAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/InstallAction.java
@@ -16,6 +16,7 @@ import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.actions.ProfileModificationAction;
 import org.eclipse.equinox.p2.core.ProvisionException;
+import org.eclipse.equinox.p2.director.ProfileChangeRequest;
 import org.eclipse.equinox.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.ui.*;
@@ -68,7 +69,9 @@ public class InstallAction extends ProfileModificationAction {
 
 	protected IStatus validateOperation(IInstallableUnit[] ius, String targetProfileId, IProgressMonitor monitor) {
 		try {
-			ProvisioningPlan plan = ProvisioningUtil.getInstallPlan(ius, targetProfileId, monitor);
+			ProfileChangeRequest request = new ProfileChangeRequest(targetProfileId);
+			request.addInstallableUnits(ius);
+			ProvisioningPlan plan = ProvisioningUtil.getProvisioningPlan(request, monitor);
 			return plan.getStatus();
 		} catch (ProvisionException e) {
 			return ProvUI.handleException(e, null);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/RevertAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/RevertAction.java
index f63cd14..0f71b16 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/RevertAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/RevertAction.java
@@ -33,7 +33,7 @@ public class RevertAction extends ProfileModificationAction {
 	protected IStatus validateOperation(IInstallableUnit[] toRevert, String targetProfileId, IProgressMonitor monitor) {
 		if (toRevert.length == 1) {
 			try {
-				ProvisioningPlan plan = ProvisioningUtil.getRevertPlan(toRevert[0], targetProfileId, monitor);
+				ProvisioningPlan plan = ProvisioningUtil.getRevertPlan(toRevert[0], monitor);
 				return plan.getStatus();
 			} catch (ProvisionException e) {
 				return ProvUI.handleException(e, null);
@@ -46,7 +46,7 @@ public class RevertAction extends ProfileModificationAction {
 	protected void performOperation(IInstallableUnit[] toBecome, String targetProfileId) {
 		// TODO bogus because we do this twice...
 		try {
-			ProvisioningPlan plan = ProvisioningUtil.getRevertPlan(toBecome[0], targetProfileId, null);
+			ProvisioningPlan plan = ProvisioningUtil.getRevertPlan(toBecome[0], null);
 			ProvisioningOperation op = new ProfileModificationOperation(ProvUIMessages.RevertIUOperationLabel, targetProfileId, plan);
 			ProvisioningOperationRunner.schedule(op, getShell());
 		} catch (ProvisionException e) {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UninstallAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UninstallAction.java
index 0443f7e..3dbf3ec 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UninstallAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UninstallAction.java
@@ -16,6 +16,7 @@ import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.actions.ProfileModificationAction;
 import org.eclipse.equinox.p2.core.ProvisionException;
+import org.eclipse.equinox.p2.director.ProfileChangeRequest;
 import org.eclipse.equinox.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.ui.IProfileChooser;
@@ -77,7 +78,9 @@ public class UninstallAction extends ProfileModificationAction {
 
 	protected IStatus validateOperation(IInstallableUnit[] ius, String targetProfileId, IProgressMonitor monitor) {
 		try {
-			ProvisioningPlan plan = ProvisioningUtil.getUninstallPlan(ius, targetProfileId, monitor);
+			ProfileChangeRequest request = new ProfileChangeRequest(targetProfileId);
+			request.removeInstallableUnits(ius);
+			ProvisioningPlan plan = ProvisioningUtil.getProvisioningPlan(request, monitor);
 			return plan.getStatus();
 		} catch (ProvisionException e) {
 			return ProvUI.handleException(e, null);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/InstallOperation.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/InstallOperation.java
index 8c7cf9b..74897cc 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/InstallOperation.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/InstallOperation.java
@@ -30,6 +30,6 @@ public class InstallOperation extends ProfileModificationOperation {
 	}
 
 	protected IStatus doExecute(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
-		return ProvisioningUtil.performInstall(plan, getProfile(), installRoots, monitor);
+		return ProvisioningUtil.performProvisioningPlan(plan, null, getProfile(), monitor);
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
index c37fcb0..1188eea 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
@@ -163,20 +163,8 @@ public class ProvisioningUtil {
 	/*
 	 * Get the plan for the specified install operation
 	 */
-	public static ProvisioningPlan getInstallPlan(IInstallableUnit[] toInstall, String profileId, IProgressMonitor monitor) throws ProvisionException {
-		Assert.isNotNull(profileId);
-		Assert.isNotNull(toInstall);
-		return getPlanner().getInstallPlan(toInstall, getProfile(profileId), null, monitor);
-	}
-
-	/*
-	 * Get the plan for the specified update operation
-	 */
-	public static ProvisioningPlan getReplacePlan(IInstallableUnit[] toUninstall, IInstallableUnit[] replacements, String profileId, IProgressMonitor monitor) throws ProvisionException {
-		Assert.isNotNull(profileId);
-		Assert.isNotNull(toUninstall);
-		Assert.isNotNull(replacements);
-		return getPlanner().getReplacePlan(toUninstall, replacements, getProfile(profileId), null, monitor);
+	public static ProvisioningPlan getProvisioningPlan(ProfileChangeRequest request, IProgressMonitor monitor) throws ProvisionException {
+		return getPlanner().getProvisioningPlan(request, new ProvisioningContext(), monitor);
 	}
 
 	/*
@@ -209,19 +197,9 @@ public class ProvisioningUtil {
 	/*
 	 * Get a plan for becoming
 	 */
-	public static ProvisioningPlan getRevertPlan(IInstallableUnit profileIU, String profileId, IProgressMonitor monitor) throws ProvisionException {
-		Assert.isNotNull(profileId);
+	public static ProvisioningPlan getRevertPlan(IInstallableUnit profileIU, IProgressMonitor monitor) throws ProvisionException {
 		Assert.isNotNull(profileIU);
-		return getPlanner().getRevertPlan(profileIU, getProfile(profileId), null, monitor);
-	}
-
-	/*
-	 * Get the plan to uninstall the specified IU's
-	 */
-	public static ProvisioningPlan getUninstallPlan(IInstallableUnit[] toUninstall, String profileId, IProgressMonitor monitor) throws ProvisionException {
-		Assert.isNotNull(profileId);
-		Assert.isNotNull(toUninstall);
-		return getPlanner().getUninstallPlan(toUninstall, getProfile(profileId), null, monitor);
+		return getPlanner().getRevertPlan(profileIU, new ProvisioningContext(), monitor);
 	}
 
 	/*
@@ -229,38 +207,19 @@ public class ProvisioningUtil {
 	 */
 	public static Sizing getSizeInfo(ProvisioningPlan plan, String profileId, IProgressMonitor monitor) throws ProvisionException {
 		SizingPhaseSet set = new SizingPhaseSet();
-		IStatus status = getEngine().perform(getProfile(profileId), set, plan.getOperands(), monitor);
+		IStatus status = getEngine().perform(getProfile(profileId), set, plan.getOperands(), plan.getPropertyOperands(), monitor);
 		if (status.isOK())
 			return set.getSizing();
 		return null;
 	}
 
-	public static IStatus performInstall(ProvisioningPlan plan, Profile profile, IInstallableUnit[] installRoots, IProgressMonitor monitor) throws ProvisionException {
-		String taskMessage;
-		if (installRoots.length == 1)
-			taskMessage = NLS.bind(ProvUIMessages.ProvisioningUtil_InstallOneTask, installRoots[0].getId(), profile.getProfileId());
-		else
-			taskMessage = NLS.bind(ProvUIMessages.ProvisioningUtil_InstallManyTask, Integer.toString(installRoots.length), profile.getProfileId());
-		try {
-			SubMonitor sub = SubMonitor.convert(monitor, 100);
-			sub.setTaskName(taskMessage);
-			for (int i = 0; i < installRoots.length; i++) {
-				profile.setInstallableUnitProfileProperty(installRoots[i], IInstallableUnit.PROP_PROFILE_ROOT_IU, Boolean.toString(true));
-			}
-			IStatus engineResult = performProvisioningPlan(plan, new DefaultPhaseSet(), profile, sub.newChild(100));
-			return engineResult;
-		} finally {
-			monitor.done();
-		}
-	}
-
 	public static IStatus performProvisioningPlan(ProvisioningPlan plan, PhaseSet phaseSet, Profile profile, IProgressMonitor monitor) throws ProvisionException {
 		PhaseSet set;
 		if (phaseSet == null)
 			set = new DefaultPhaseSet();
 		else
 			set = phaseSet;
-		return getEngine().perform(profile, set, plan.getOperands(), monitor);
+		return getEngine().perform(profile, set, plan.getOperands(), plan.getPropertyOperands(), monitor);
 	}
 
 	private static Engine getEngine() throws ProvisionException {
commit cd2cf99eb55d5b27899357735ebf9db8e41f6075
Author: Simon Kaegi <skaegi>
Date:   Tue Jan 29 04:51:07 2008 +0000

    Bug 206077  [prov] Should we have a ProfileDelta in a provisioning plan and an associated engine phase for applying it?
    
    Updating the Director API to use PorfileChangeRequest

1	1	bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvisioningHelper.java
7	3	bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/Application.java
10	40	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java
1	1	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
6	6	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/IDirector.java
9	2	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/ProfileChangeRequest.java
7	4	bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/p2/reconciler/dropins/ProfileSynchronizer.java
7	4	bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/p2/reconciler/dropins/ProfileSynchronizer.java
25	9	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/AutomatedDirectorTest.java
5	2	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/Bug203637.java
7	2	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OracleTest.java
4	2	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OracleTest2.java
6	3	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/ReplacePlanTest.java
4	3	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/RollbackTest.java
10	3	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/SingletonTest.java
8	3	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/UninstallTest.java
8	6	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/UpdateTest.java
9	6	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/full/DirectorTest.java
10	4	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/full/End2EndTest.java
1	1	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/InstallWizardPage.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UninstallWizardPage.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableUpdateElement.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/InstallAction.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UninstallAction.java
diff --git a/bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvisioningHelper.java b/bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvisioningHelper.java
index d4ebc14..7705026 100644
--- a/bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvisioningHelper.java
+++ b/bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvisioningHelper.java
@@ -203,7 +203,7 @@ public class ProvisioningHelper {
 			throw new ProvisionException("No director service found.");
 		IInstallableUnit[] toInstall = (IInstallableUnit[]) units.toArray(IInstallableUnit.class);
 		ProvisioningContext context = new ProvisioningContext();
-		ProfileChangeRequest request = new ProfileChangeRequest(profile.getProfileId());
+		ProfileChangeRequest request = new ProfileChangeRequest(profile);
 		request.addInstallableUnits(toInstall);
 		ProvisioningPlan result = planner.getProvisioningPlan(request, context, progress);
 		if (!result.getStatus().isOK())
diff --git a/bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/Application.java b/bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/Application.java
index a59a037..9377d86 100644
--- a/bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/Application.java
+++ b/bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/Application.java
@@ -172,7 +172,7 @@ public class Application implements IApplication {
 		ProvisioningPlan result = null;
 		IStatus operationStatus = null;
 		ProvisioningContext context = new ProvisioningContext();
-		ProfileChangeRequest request = new ProfileChangeRequest(profile.getProfileId());
+		ProfileChangeRequest request = new ProfileChangeRequest(profile);
 		if (roots.length > 0) {
 			if (install) {
 				request.addInstallableUnits(roots);
@@ -188,8 +188,12 @@ public class Application implements IApplication {
 				operationStatus = engine.perform(profile, set, result.getOperands(), result.getPropertyOperands(), new NullProgressMonitor());
 				System.out.println(Messages.Disk_size + sizeComputer.getDiskSize());
 				System.out.println(Messages.Download_size + sizeComputer.getDlSize());
-				operationStatus = (install ? director.install(roots, profile, null, new NullProgressMonitor()) //
-						: director.uninstall(roots, profile, null, new NullProgressMonitor()));
+				request = new ProfileChangeRequest(profile);
+				if (install)
+					request.addInstallableUnits(roots);
+				else
+					request.removeInstallableUnits(roots);
+				operationStatus = director.provision(request, null, new NullProgressMonitor());
 			}
 		} else {
 			operationStatus = new Status(IStatus.INFO, Activator.ID, NLS.bind(Messages.Missing_IU, root));
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java
index 79aa000..8c6561a 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java
@@ -50,27 +50,6 @@ public class SimpleDirector implements IDirector {
 		}
 	}
 
-	public IStatus install(IInstallableUnit[] installRoots, Profile profile, ProvisioningContext context, IProgressMonitor monitor) {
-		String taskName = NLS.bind(Messages.Director_Task_Installing, profile.getValue(Profile.PROP_INSTALL_FOLDER));
-		SubMonitor sub = SubMonitor.convert(monitor, taskName, PlanWork + EngineWork);
-		try {
-			ProfileChangeRequest request = new ProfileChangeRequest(profile.getProfileId());
-			request.addInstallableUnits(installRoots);
-			// mark the roots as such
-			for (int i = 0; i < installRoots.length; i++) {
-				request.setInstallableUnitProfileProperty(installRoots[i], IInstallableUnit.PROP_PROFILE_ROOT_IU, Boolean.toString(true));
-			}
-			ProvisioningPlan plan = planner.getProvisioningPlan(request, context, sub.newChild(PlanWork));
-			if (!plan.getStatus().isOK())
-				return plan.getStatus();
-
-			IStatus engineResult = engine.perform(profile, new DefaultPhaseSet(), plan.getOperands(), plan.getPropertyOperands(), sub.newChild(EngineWork));
-			return engineResult;
-		} finally {
-			sub.done();
-		}
-	}
-
 	public IStatus revert(IInstallableUnit target, Profile profile, ProvisioningContext context, IProgressMonitor monitor) {
 		SubMonitor sub = SubMonitor.convert(monitor, Messages.Director_Task_Updating, PlanWork + EngineWork);
 		try {
@@ -83,30 +62,21 @@ public class SimpleDirector implements IDirector {
 		}
 	}
 
-	public IStatus uninstall(IInstallableUnit[] uninstallRoots, Profile profile, ProvisioningContext context, IProgressMonitor monitor) {
-		SubMonitor sub = SubMonitor.convert(monitor, Messages.Director_Task_Uninstalling, PlanWork + EngineWork);
+	public IStatus provision(ProfileChangeRequest request, ProvisioningContext context, IProgressMonitor monitor) {
+		String taskName = NLS.bind(Messages.Director_Task_Installing, request.getProfile().getValue(Profile.PROP_INSTALL_FOLDER));
+		SubMonitor sub = SubMonitor.convert(monitor, taskName, PlanWork + EngineWork);
 		try {
-			ProfileChangeRequest request = new ProfileChangeRequest(profile.getProfileId());
-			request.removeInstallableUnits(uninstallRoots);
+			IInstallableUnit[] installRoots = request.getAddedInstallableUnits();
+			// mark the roots as such
+			for (int i = 0; i < installRoots.length; i++) {
+				request.setInstallableUnitProfileProperty(installRoots[i], IInstallableUnit.PROP_PROFILE_ROOT_IU, Boolean.toString(true));
+			}
 			ProvisioningPlan plan = planner.getProvisioningPlan(request, context, sub.newChild(PlanWork));
 			if (!plan.getStatus().isOK())
 				return plan.getStatus();
-			return engine.perform(profile, new DefaultPhaseSet(), plan.getOperands(), plan.getPropertyOperands(), sub.newChild(EngineWork));
-		} finally {
-			sub.done();
-		}
-	}
 
-	public IStatus replace(IInstallableUnit[] toUninstall, IInstallableUnit[] toInstall, Profile profile, ProvisioningContext context, IProgressMonitor monitor) {
-		SubMonitor sub = SubMonitor.convert(monitor, Messages.Director_Task_Updating, PlanWork + EngineWork);
-		ProfileChangeRequest request = new ProfileChangeRequest(profile.getProfileId());
-		request.addInstallableUnits(toInstall);
-		request.removeInstallableUnits(toUninstall);
-		try {
-			ProvisioningPlan plan = planner.getProvisioningPlan(request, context, sub.newChild(PlanWork));
-			if (!plan.getStatus().isOK())
-				return plan.getStatus();
-			return engine.perform(profile, new DefaultPhaseSet(), plan.getOperands(), plan.getPropertyOperands(), sub.newChild(EngineWork));
+			IStatus engineResult = engine.perform(request.getProfile(), new DefaultPhaseSet(), plan.getOperands(), plan.getPropertyOperands(), sub.newChild(EngineWork));
+			return engineResult;
 		} finally {
 			sub.done();
 		}
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
index 5ffa904..e4c5de3 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
@@ -209,7 +209,7 @@ public class SimplePlanner implements IPlanner {
 
 	// TODO note that this only describes property changes, not the IU changes.
 	private ProfileChangeRequest generateChangeRequest(Profile currentProfile, IInstallableUnit iuDescribingNewState, Collection newIUs) {
-		ProfileChangeRequest request = new ProfileChangeRequest(currentProfile.getProfileId());
+		ProfileChangeRequest request = new ProfileChangeRequest(currentProfile);
 
 		for (Iterator iter = currentProfile.getProperties().keySet().iterator(); iter.hasNext();) {
 			String key = (String) iter.next();
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/IDirector.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/IDirector.java
index 8c99323..ea99f5b 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/IDirector.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/IDirector.java
@@ -27,6 +27,9 @@ import org.eclipse.equinox.p2.metadata.IInstallableUnit;
  * very simple (e.g., reading a list of bundles from a static file) to very complex. 
  */
 public interface IDirector {
+
+	public IStatus provision(ProfileChangeRequest profileChangeRequest, ProvisioningContext context, IProgressMonitor monitor);
+
 	/**
 	 * Installs the given units into the given profile.
 	 * 
@@ -35,8 +38,7 @@ public interface IDirector {
 	 * @param monitor a progress monitor, or <code>null</code> if progress
 	 *    reporting is not desired
 	 */
-	public IStatus install(IInstallableUnit[] toInstall, Profile profile, ProvisioningContext context, IProgressMonitor monitor);
-
+	//	public IStatus install(IInstallableUnit[] toInstall, Profile profile, ProvisioningContext context, IProgressMonitor monitor);
 	/**
 	 * Uninstalls the given units from the given profile.
 	 * 
@@ -45,10 +47,8 @@ public interface IDirector {
 	 * @param monitor a progress monitor, or <code>null</code> if progress
 	 *    reporting is not desired
 	 */
-	public IStatus uninstall(IInstallableUnit[] toUninstall, Profile profile, ProvisioningContext context, IProgressMonitor monitor);
-
-	public IStatus replace(IInstallableUnit[] toUninstall, IInstallableUnit[] toInstall, Profile profile, ProvisioningContext context, IProgressMonitor monitor);
-
+	//	public IStatus uninstall(IInstallableUnit[] toUninstall, Profile profile, ProvisioningContext context, IProgressMonitor monitor);
+	//public IStatus replace(IInstallableUnit[] toUninstall, IInstallableUnit[] toInstall, Profile profile, ProvisioningContext context, IProgressMonitor monitor);
 	public IStatus revert(IInstallableUnit previous, Profile profile, ProvisioningContext context, IProgressMonitor monitor);
 
 	/**
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/ProfileChangeRequest.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/ProfileChangeRequest.java
index a0c7445..651508e 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/ProfileChangeRequest.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/ProfileChangeRequest.java
@@ -25,13 +25,20 @@ public class ProfileChangeRequest {
 	private Map iuPropertiesToAdd = null; // map iu->map of key->value pairs for properties to be added for an iu
 	private Map iuPropertiesToRemove = null; // map of iu->list of property keys to be removed for an iu
 
-	public ProfileChangeRequest(String profileId) {
+	public static ProfileChangeRequest createByProfileId(String profileId) {
 		IProfileRegistry profileRegistry = (IProfileRegistry) ServiceHelper.getService(DirectorActivator.context, IProfileRegistry.class.getName());
 		if (profileRegistry == null)
 			throw new IllegalStateException("ProfileRegistry unavailable");
-		profile = profileRegistry.getProfile(profileId);
+		Profile profile = profileRegistry.getProfile(profileId);
 		if (profile == null)
 			throw new IllegalArgumentException("Profile id " + profileId + " is not registered.");
+		return new ProfileChangeRequest(profile);
+	}
+
+	public ProfileChangeRequest(Profile profile) {
+		if (profile == null)
+			throw new IllegalArgumentException("Profile cannot be null.");
+		this.profile = profile;
 	}
 
 	public Profile getProfile() {
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/p2/reconciler/dropins/ProfileSynchronizer.java b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/p2/reconciler/dropins/ProfileSynchronizer.java
index 458ccc9..6b026b3 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/p2/reconciler/dropins/ProfileSynchronizer.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/p2/reconciler/dropins/ProfileSynchronizer.java
@@ -15,8 +15,7 @@ import java.util.*;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.configurator.Configurator;
 import org.eclipse.equinox.internal.p2.reconciler.dropins.Activator;
-import org.eclipse.equinox.p2.director.IDirector;
-import org.eclipse.equinox.p2.director.ProvisioningContext;
+import org.eclipse.equinox.p2.director.*;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.metadata.query.InstallableUnitQuery;
@@ -156,7 +155,9 @@ public class ProfileSynchronizer {
 		ServiceReference reference = context.getServiceReference(IDirector.class.getName());
 		IDirector director = (IDirector) context.getService(reference);
 		try {
-			return director.install(toAdd, profile, new ProvisioningContext(new URL[0]), monitor);
+			ProfileChangeRequest request = new ProfileChangeRequest(profile);
+			request.addInstallableUnits(toAdd);
+			return director.provision(request, new ProvisioningContext(new URL[0]), monitor);
 		} finally {
 			context.ungetService(reference);
 		}
@@ -170,7 +171,9 @@ public class ProfileSynchronizer {
 		ServiceReference reference = context.getServiceReference(IDirector.class.getName());
 		IDirector director = (IDirector) context.getService(reference);
 		try {
-			return director.uninstall(toRemove, profile, new ProvisioningContext(new URL[0]), monitor);
+			ProfileChangeRequest request = new ProfileChangeRequest(profile);
+			request.removeInstallableUnits(toRemove);
+			return director.provision(request, new ProvisioningContext(new URL[0]), monitor);
 		} finally {
 			context.ungetService(reference);
 		}
diff --git a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/p2/reconciler/dropins/ProfileSynchronizer.java b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/p2/reconciler/dropins/ProfileSynchronizer.java
index 458ccc9..6b026b3 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/p2/reconciler/dropins/ProfileSynchronizer.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/p2/reconciler/dropins/ProfileSynchronizer.java
@@ -15,8 +15,7 @@ import java.util.*;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.configurator.Configurator;
 import org.eclipse.equinox.internal.p2.reconciler.dropins.Activator;
-import org.eclipse.equinox.p2.director.IDirector;
-import org.eclipse.equinox.p2.director.ProvisioningContext;
+import org.eclipse.equinox.p2.director.*;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.metadata.query.InstallableUnitQuery;
@@ -156,7 +155,9 @@ public class ProfileSynchronizer {
 		ServiceReference reference = context.getServiceReference(IDirector.class.getName());
 		IDirector director = (IDirector) context.getService(reference);
 		try {
-			return director.install(toAdd, profile, new ProvisioningContext(new URL[0]), monitor);
+			ProfileChangeRequest request = new ProfileChangeRequest(profile);
+			request.addInstallableUnits(toAdd);
+			return director.provision(request, new ProvisioningContext(new URL[0]), monitor);
 		} finally {
 			context.ungetService(reference);
 		}
@@ -170,7 +171,9 @@ public class ProfileSynchronizer {
 		ServiceReference reference = context.getServiceReference(IDirector.class.getName());
 		IDirector director = (IDirector) context.getService(reference);
 		try {
-			return director.uninstall(toRemove, profile, new ProvisioningContext(new URL[0]), monitor);
+			ProfileChangeRequest request = new ProfileChangeRequest(profile);
+			request.removeInstallableUnits(toRemove);
+			return director.provision(request, new ProvisioningContext(new URL[0]), monitor);
 		} finally {
 			context.ungetService(reference);
 		}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/AutomatedDirectorTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/AutomatedDirectorTest.java
index 23c3fd7..3b9643d 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/AutomatedDirectorTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/AutomatedDirectorTest.java
@@ -15,6 +15,7 @@ import junit.framework.TestSuite;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
 import org.eclipse.equinox.p2.director.IDirector;
+import org.eclipse.equinox.p2.director.ProfileChangeRequest;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.*;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
@@ -61,8 +62,9 @@ public class AutomatedDirectorTest extends AbstractProvisioningTest {
 		Map properties = new HashMap();
 		properties.put(Profile.PROP_ENVIRONMENTS, "FilterKey=true");
 		Profile satisfied = createProfile("Satisfied." + getName(), null, properties);
-
-		IStatus result = director.install(toInstallArray, satisfied, null, null);
+		ProfileChangeRequest request = new ProfileChangeRequest(satisfied);
+		request.addInstallableUnits(toInstallArray);
+		IStatus result = director.provision(request, null, null);
 		assertTrue("1.0", result.isOK());
 		assertProfileContains("1.1", satisfied, allUnits);
 	}
@@ -85,7 +87,9 @@ public class AutomatedDirectorTest extends AbstractProvisioningTest {
 
 		Profile profile = createProfile("TestProfile." + getName());
 		IDirector director = createDirector();
-		IStatus result = director.install(toInstallArray, profile, null, null);
+		ProfileChangeRequest request = new ProfileChangeRequest(profile);
+		request.addInstallableUnits(toInstallArray);
+		IStatus result = director.provision(request, null, null);
 		if (!result.isOK())
 			LogHelper.log(result);
 		assertTrue("1.0", result.isOK());
@@ -106,7 +110,9 @@ public class AutomatedDirectorTest extends AbstractProvisioningTest {
 
 		Profile profile = createProfile("TestProfile." + getName());
 		IDirector director = createDirector();
-		IStatus result = director.install(allUnits, profile, null, null);
+		ProfileChangeRequest request = new ProfileChangeRequest(profile);
+		request.addInstallableUnits(allUnits);
+		IStatus result = director.provision(request, null, null);
 		if (!result.isOK())
 			LogHelper.log(result);
 		assertTrue("1.0", result.isOK());
@@ -131,14 +137,18 @@ public class AutomatedDirectorTest extends AbstractProvisioningTest {
 
 		Profile profile = createProfile("TestProfile." + getName());
 		IDirector director = createDirector();
-		IStatus result = director.install(toInstallArray, profile, null, null);
+		ProfileChangeRequest request = new ProfileChangeRequest(profile);
+		request.addInstallableUnits(toInstallArray);
+		IStatus result = director.provision(request, null, null);
 		assertTrue("1.0", !result.isOK());
 
 		//try again with the filter satisfied
 		Map properties = new HashMap();
 		properties.put(Profile.PROP_ENVIRONMENTS, "osgi.os=blort");
 		Profile profile2 = createProfile("TestProfile2." + getName(), null, properties);
-		result = director.install(toInstallArray, profile2, null, null);
+		request = new ProfileChangeRequest(profile2);
+		request.addInstallableUnits(toInstallArray);
+		result = director.provision(request, null, null);
 		assertTrue("2.0", result.isOK());
 	}
 
@@ -160,7 +170,9 @@ public class AutomatedDirectorTest extends AbstractProvisioningTest {
 		Profile profile = createProfile("TestProfile." + getName());
 
 		IDirector director = createDirector();
-		IStatus result = director.install(toInstallArray, profile, null, null);
+		ProfileChangeRequest request = new ProfileChangeRequest(profile);
+		request.addInstallableUnits(toInstallArray);
+		IStatus result = director.provision(request, null, null);
 		if (!result.isOK())
 			LogHelper.log(result);
 		assertTrue("1.0", result.isOK());
@@ -185,7 +197,9 @@ public class AutomatedDirectorTest extends AbstractProvisioningTest {
 		Profile profile = createProfile("TestProfile." + getName());
 
 		IDirector director = createDirector();
-		IStatus result = director.install(toInstallArray, profile, null, null);
+		ProfileChangeRequest request = new ProfileChangeRequest(profile);
+		request.addInstallableUnits(toInstallArray);
+		IStatus result = director.provision(request, null, null);
 		if (!result.isOK())
 			LogHelper.log(result);
 		assertTrue("1.0", result.isOK());
@@ -211,7 +225,9 @@ public class AutomatedDirectorTest extends AbstractProvisioningTest {
 		Profile profile = createProfile("TestProfile." + getName());
 
 		IDirector director = createDirector();
-		IStatus result = director.install(toInstallArray, profile, null, null);
+		ProfileChangeRequest request = new ProfileChangeRequest(profile);
+		request.addInstallableUnits(toInstallArray);
+		IStatus result = director.provision(request, null, null);
 		if (!result.isOK())
 			LogHelper.log(result);
 		assertTrue("1.0", result.isOK());
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/Bug203637.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/Bug203637.java
index f354156..438c709 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/Bug203637.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/Bug203637.java
@@ -9,6 +9,7 @@
 package org.eclipse.equinox.p2.tests.director;
 
 import org.eclipse.equinox.p2.director.IDirector;
+import org.eclipse.equinox.p2.director.ProfileChangeRequest;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
@@ -19,7 +20,9 @@ public class Bug203637 extends AbstractProvisioningTest {
 		IDirector d = createDirector();
 		Profile profile = createProfile("TestProfile." + getName());
 		IInstallableUnit a1 = createIU("A", new Version(1, 0, 0), true);
-		assertOK(d.replace(new IInstallableUnit[0], new IInstallableUnit[] {a1}, profile, null, null));
-
+		ProfileChangeRequest request = new ProfileChangeRequest(profile);
+		request.addInstallableUnits(new IInstallableUnit[] {a1});
+		request.removeInstallableUnits(new IInstallableUnit[0]);
+		assertOK(d.provision(request, null, null));
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OracleTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OracleTest.java
index 2531da7..e057412 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OracleTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OracleTest.java
@@ -10,6 +10,7 @@ package org.eclipse.equinox.p2.tests.director;
 
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.p2.director.IDirector;
+import org.eclipse.equinox.p2.director.ProfileChangeRequest;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.metadata.RequiredCapability;
@@ -50,10 +51,14 @@ public class OracleTest extends AbstractProvisioningTest {
 	}
 
 	public void testInstallA1() {
-		assertEquals(IStatus.OK, director.install(new IInstallableUnit[] {a1}, profile, null, null).getSeverity());
+		ProfileChangeRequest request = new ProfileChangeRequest(profile);
+		request.addInstallableUnits(new IInstallableUnit[] {a1});
+		assertEquals(IStatus.OK, director.provision(request, null, null).getSeverity());
 
 		createTestMetdataRepository(new IInstallableUnit[] {d2});
 		//		assertEquals(new Oracle().canInstall(new IInstallableUnit[] {b1}, profile, null), true);
-		assertEquals(IStatus.OK, director.install(new IInstallableUnit[] {b1}, profile, null, null).getSeverity());
+		request = new ProfileChangeRequest(profile);
+		request.addInstallableUnits(new IInstallableUnit[] {b1});
+		assertEquals(IStatus.OK, director.provision(request, null, null).getSeverity());
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OracleTest2.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OracleTest2.java
index 6ebf195..c10959e 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OracleTest2.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OracleTest2.java
@@ -10,6 +10,7 @@ package org.eclipse.equinox.p2.tests.director;
 
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.p2.director.IDirector;
+import org.eclipse.equinox.p2.director.ProfileChangeRequest;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.*;
 import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitDescription;
@@ -78,7 +79,8 @@ public class OracleTest2 extends AbstractProvisioningTest {
 		profile = createProfile("testInstallA1bis." + getName());
 		director = createDirector();
 		createTestMetdataRepository(new IInstallableUnit[] {a1, a2, c1, c2, b1});
-
-		assertEquals(director.install(new IInstallableUnit[] {a1}, profile, null, null).getSeverity(), IStatus.OK);
+		ProfileChangeRequest request = new ProfileChangeRequest(profile);
+		request.addInstallableUnits(new IInstallableUnit[] {a1});
+		assertEquals(IStatus.OK, director.provision(request, null, null).getSeverity());
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/ReplacePlanTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/ReplacePlanTest.java
index 25a11b1..7674390 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/ReplacePlanTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/ReplacePlanTest.java
@@ -59,7 +59,10 @@ public class ReplacePlanTest extends AbstractProvisioningTest {
 		profile = createProfile("TestProfile." + getName());
 		director = createDirector();
 		planner = createPlanner();
-		director.install(new IInstallableUnit[] {fa, frag1}, profile, null, null);
+
+		ProfileChangeRequest request = new ProfileChangeRequest(profile);
+		request.addInstallableUnits(new IInstallableUnit[] {fa, frag1});
+		director.provision(request, null, null);
 
 		createTestMetdataRepository(new IInstallableUnit[] {f1_1, f1_4, frag1_1, frag1_4});
 	}
@@ -67,7 +70,7 @@ public class ReplacePlanTest extends AbstractProvisioningTest {
 	public void testSimpleReplace() {
 		IInstallableUnit[] oldUnits = new IInstallableUnit[] {fa};
 		IInstallableUnit[] newUnits = new IInstallableUnit[] {fap};
-		ProfileChangeRequest request = new ProfileChangeRequest(profile.getProfileId());
+		ProfileChangeRequest request = new ProfileChangeRequest(profile);
 		request.removeInstallableUnits(oldUnits);
 		request.addInstallableUnits(newUnits);
 		ProvisioningPlan plan = planner.getProvisioningPlan(request, new ProvisioningContext(), null);
@@ -80,7 +83,7 @@ public class ReplacePlanTest extends AbstractProvisioningTest {
 
 	public void testReplaceFragment() {
 		//TODO it is strange that this succeeds, since frag1_4 and fa cannot co-exist
-		ProfileChangeRequest request = new ProfileChangeRequest(profile.getProfileId());
+		ProfileChangeRequest request = new ProfileChangeRequest(profile);
 		request.removeInstallableUnits(new IInstallableUnit[] {frag1});
 		request.addInstallableUnits(new IInstallableUnit[] {frag1_4});
 		ProvisioningPlan plan = planner.getProvisioningPlan(request, new ProvisioningContext(), null);
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/RollbackTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/RollbackTest.java
index 63f2c38..95f985c 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/RollbackTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/RollbackTest.java
@@ -15,8 +15,7 @@ import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.director.DirectorActivator;
 import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.core.location.AgentLocation;
-import org.eclipse.equinox.p2.director.IDirector;
-import org.eclipse.equinox.p2.director.ProvisioningContext;
+import org.eclipse.equinox.p2.director.*;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.metadata.query.InstallableUnitQuery;
@@ -39,7 +38,9 @@ public class RollbackTest extends AbstractProvisioningTest {
 	}
 
 	public void test() throws ProvisionException {
-		System.out.println(director.install(new IInstallableUnit[] {a1}, profile, null, new NullProgressMonitor()));
+		ProfileChangeRequest request = new ProfileChangeRequest(profile);
+		request.addInstallableUnits(new IInstallableUnit[] {a1});
+		System.out.println(director.provision(request, null, new NullProgressMonitor()));
 		printProfile(profile);
 		IMetadataRepositoryManager repoMan = (IMetadataRepositoryManager) ServiceHelper.getService(TestActivator.getContext(), IMetadataRepositoryManager.class.getName());
 		IMetadataRepository repo = null;
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/SingletonTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/SingletonTest.java
index a48cfc7..57d0ba8 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/SingletonTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/SingletonTest.java
@@ -11,6 +11,7 @@ package org.eclipse.equinox.p2.tests.director;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.equinox.p2.director.IDirector;
+import org.eclipse.equinox.p2.director.ProfileChangeRequest;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
@@ -50,16 +51,22 @@ public class SingletonTest extends AbstractProvisioningTest {
 
 	public void testMultipleVersionNonSingleton() {
 		// The installation of junit38 and junit 40 together should succeed
-		assertEquals(IStatus.OK, director.install(new IInstallableUnit[] {junit38, junit40}, profile, null, new NullProgressMonitor()).getSeverity());
+		ProfileChangeRequest request = new ProfileChangeRequest(profile);
+		request.addInstallableUnits(new IInstallableUnit[] {junit38, junit40});
+		assertEquals(IStatus.OK, director.provision(request, null, new NullProgressMonitor()).getSeverity());
 	}
 
 	public void testMultipleVersionSingleton() {
 		// The installation of junit38 and junit 40 together should not succeed
-		assertEquals(IStatus.ERROR, director.install(new IInstallableUnit[] {f1, f1_1}, profile, null, new NullProgressMonitor()).getSeverity());
+		ProfileChangeRequest request = new ProfileChangeRequest(profile);
+		request.addInstallableUnits(new IInstallableUnit[] {f1, f1_1});
+		assertEquals(IStatus.ERROR, director.provision(request, null, new NullProgressMonitor()).getSeverity());
 	}
 
 	public void testMultipleVersionSingleton2() {
 		// The installation of junit38 and junit 40 together should not succeed
-		assertEquals(IStatus.ERROR, director.install(new IInstallableUnit[] {f2, f2_1}, profile, null, new NullProgressMonitor()).getSeverity());
+		ProfileChangeRequest request = new ProfileChangeRequest(profile);
+		request.addInstallableUnits(new IInstallableUnit[] {f2, f2_1});
+		assertEquals(IStatus.ERROR, director.provision(request, null, new NullProgressMonitor()).getSeverity());
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/UninstallTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/UninstallTest.java
index f45cb32..79802f6 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/UninstallTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/UninstallTest.java
@@ -9,6 +9,7 @@
 package org.eclipse.equinox.p2.tests.director;
 
 import org.eclipse.equinox.p2.director.IDirector;
+import org.eclipse.equinox.p2.director.ProfileChangeRequest;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
@@ -27,12 +28,16 @@ public class UninstallTest extends AbstractProvisioningTest {
 
 	public void testUninstall() {
 		IInstallableUnit[] units = new IInstallableUnit[] {a1};
-		System.out.println(director.install(units, profile, null, null));
+		ProfileChangeRequest request = new ProfileChangeRequest(profile);
+		request.addInstallableUnits(units);
+		System.out.println(director.provision(request, null, null));
 		assertProfileContains("1.0", profile, units);
-		director.uninstall(units, profile, null, null);
+		request = new ProfileChangeRequest(profile);
+		request.removeInstallableUnits(units);
+		director.provision(request, null, null);
 		assertEmptyProfile(profile);
 		//uninstalling on empty profile should be a no-op
-		director.uninstall(units, profile, null, null);
+		director.provision(request, null, null);
 		assertEmptyProfile(profile);
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/UpdateTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/UpdateTest.java
index d337d9f..876dd5f 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/UpdateTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/UpdateTest.java
@@ -48,22 +48,24 @@ public class UpdateTest extends AbstractProvisioningTest {
 		profile = createProfile("TestProfile." + getName());
 		director = createDirector();
 		planner = createPlanner();
-		assertOK(director.install(new IInstallableUnit[] {fa}, profile, null, null));
+		ProfileChangeRequest request = new ProfileChangeRequest(profile);
+		request.addInstallableUnits(new IInstallableUnit[] {fa});
+		assertOK(director.provision(request, null, null));
 		assertProfileContains("Profile setup", profile, new IInstallableUnit[] {f1, fa});
 		createTestMetdataRepository(new IInstallableUnit[] {f1_1, f1_4});
 	}
 
 	public void testInstall() {
-		ProfileChangeRequest request = new ProfileChangeRequest(profile.getProfileId());
+		ProfileChangeRequest request = new ProfileChangeRequest(profile);
 		request.addInstallableUnits(new IInstallableUnit[] {f1_1});
 		ProvisioningPlan plan = planner.getProvisioningPlan(request, new ProvisioningContext(), new NullProgressMonitor());
 		assertOK(plan.getStatus());
-		assertOK(director.install(new IInstallableUnit[] {f1_1}, profile, null, new NullProgressMonitor()));
+		assertOK(director.provision(request, null, null));
 		for (Iterator iterator = getInstallableUnits(profile); iterator.hasNext();) {
 			System.out.println(iterator.next());
 		}
-		assertEquals(IStatus.ERROR, director.install(new IInstallableUnit[] {f1_4}, profile, null, new NullProgressMonitor()).getSeverity());
-
-		//		director.replace(new IInstallableUnit[] {fap}, profile, new NullProgressMonitor());
+		request = new ProfileChangeRequest(profile);
+		request.addInstallableUnits(new IInstallableUnit[] {f1_4});
+		assertEquals(IStatus.ERROR, director.provision(request, null, new NullProgressMonitor()).getSeverity());
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/full/DirectorTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/full/DirectorTest.java
index a72ad44..1b35ac0 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/full/DirectorTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/full/DirectorTest.java
@@ -11,12 +11,14 @@
 package org.eclipse.equinox.p2.tests.full;
 
 import java.util.*;
-import org.eclipse.core.runtime.*;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Status;
 import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.core.location.AgentLocation;
 import org.eclipse.equinox.p2.director.IDirector;
+import org.eclipse.equinox.p2.director.ProfileChangeRequest;
 import org.eclipse.equinox.p2.engine.IProfileRegistry;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
@@ -85,11 +87,12 @@ public class DirectorTest extends AbstractProvisioningTest {
 		IStatus operationStatus = null;
 		if (!allJobs.isEmpty()) {
 			allRoots[0] = (IInstallableUnit) allJobs.iterator().next();
-			if (!doUninstall) {
-				operationStatus = director.install(allRoots, p, null, new NullProgressMonitor());
-			} else {
-				operationStatus = director.uninstall(allRoots, p, null, new NullProgressMonitor());
-			}
+			ProfileChangeRequest request = new ProfileChangeRequest(p);
+			if (!doUninstall)
+				request.addInstallableUnits(allRoots);
+			else
+				request.removeInstallableUnits(allRoots);
+			operationStatus = director.provision(request, null, null);
 		} else {
 			operationStatus = new Status(IStatus.INFO, "org.eclipse.equinox.p2.director.test", "The installable unit '" + System.getProperty("eclipse.p2.autoInstall") + "' has not been found");
 		}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/full/End2EndTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/full/End2EndTest.java
index 24da16e..5c25a42 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/full/End2EndTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/full/End2EndTest.java
@@ -76,7 +76,9 @@ public class End2EndTest extends AbstractProvisioningTest {
 	public void testInstallSDK() {
 		Profile profile2 = createProfile("profile2");
 		//First we install the sdk
-		IStatus s = director.install(new IInstallableUnit[] {getIU("sdk", new Version("3.3.0"))}, profile2, null, new NullProgressMonitor());
+		ProfileChangeRequest request = new ProfileChangeRequest(profile2);
+		request.addInstallableUnits(new IInstallableUnit[] {getIU("sdk", new Version("3.3.0"))});
+		IStatus s = director.provision(request, null, new NullProgressMonitor());
 		if (!s.isOK())
 			fail("Installation failed");
 		IInstallableUnit firstSnapshot = getIU("profile2"); //This should represent the empty profile
@@ -84,7 +86,9 @@ public class End2EndTest extends AbstractProvisioningTest {
 		assertNotNull(firstSnapshot.getProperty("profileIU"));
 
 		//Uninstall the SDK
-		s = director.uninstall(new IInstallableUnit[] {getIU("sdk", new Version("3.3.0"))}, profile2, null, new NullProgressMonitor());
+		request = new ProfileChangeRequest(profile2);
+		request.removeInstallableUnits(new IInstallableUnit[] {getIU("sdk", new Version("3.3.0"))});
+		s = director.provision(request, null, new NullProgressMonitor());
 		if (!s.isOK())
 			fail("The uninstallation has failed and it was not expected");
 
@@ -101,8 +105,10 @@ public class End2EndTest extends AbstractProvisioningTest {
 		assertNotNull(getIU("sdk"));
 
 		//Test replace
-		s = director.replace(new IInstallableUnit[] {getIU("sdk", new Version("3.3.0"))}, planner.updatesFor(getIU("sdk", new Version("3.3.0")), null, null), profile2, null, new NullProgressMonitor());
-		assertOK(s);
+		request = new ProfileChangeRequest(profile2);
+		request.addInstallableUnits(planner.updatesFor(getIU("sdk", new Version("3.3.0")), null, null));
+		request.removeInstallableUnits(new IInstallableUnit[] {getIU("sdk", new Version("3.3.0"))});
+		assertOK(director.provision(request, null, null));
 		assertProfileContainsAll("", profile2, new IInstallableUnit[] {getIU("sdk", new Version("3.4.0"))});
 		assertNotIUs(new IInstallableUnit[] {getIU("sdk", new Version("3.3.0"))}, getInstallableUnits(profile2));
 
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
index 68085fc..0a928ee 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
@@ -51,7 +51,7 @@ public class AutomaticUpdater implements IUpdateListener {
 				ElementQueryDescriptor descriptor = ProvSDKUIActivator.getDefault().getQueryProvider().getQueryDescriptor(eventWithOnlyRoots, IQueryProvider.AVAILABLE_UPDATES);
 				IInstallableUnit[] replacements = (IInstallableUnit[]) descriptor.queryable.query(descriptor.query, descriptor.collector, null).toArray(IInstallableUnit.class);
 				if (replacements.length > 0) {
-					ProfileChangeRequest request = new ProfileChangeRequest(event.getProfileId());
+					ProfileChangeRequest request = ProfileChangeRequest.createByProfileId(event.getProfileId());
 					request.removeInstallableUnits(toUpdate);
 					request.addInstallableUnits(replacements);
 					final ProvisioningPlan plan = ProvisioningUtil.getPlanner().getProvisioningPlan(request, new ProvisioningContext(), null);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/InstallWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/InstallWizardPage.java
index cb05ae6..43f4d9c 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/InstallWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/InstallWizardPage.java
@@ -34,7 +34,7 @@ public class InstallWizardPage extends UpdateOrInstallWizardPage {
 		SubMonitor sub = SubMonitor.convert(monitor);
 		sub.setWorkRemaining(100);
 		try {
-			ProfileChangeRequest changeRequest = new ProfileChangeRequest(getProfileId());
+			ProfileChangeRequest changeRequest = ProfileChangeRequest.createByProfileId(getProfileId());
 			changeRequest.addInstallableUnits(new IInstallableUnit[] {iu});
 			ProvisioningPlan plan = ProvisioningUtil.getProvisioningPlan(changeRequest, sub.newChild(50));
 			Sizing info = ProvisioningUtil.getSizeInfo(plan, getProfileId(), sub.newChild(50));
@@ -55,7 +55,7 @@ public class InstallWizardPage extends UpdateOrInstallWizardPage {
 	protected ProfileModificationOperation createProfileModificationOperation(Object[] selectedElements, IProgressMonitor monitor) {
 		try {
 			IInstallableUnit[] selected = elementsToIUs(selectedElements);
-			ProfileChangeRequest changeRequest = new ProfileChangeRequest(getProfileId());
+			ProfileChangeRequest changeRequest = ProfileChangeRequest.createByProfileId(getProfileId());
 			changeRequest.addInstallableUnits(selected);
 			for (int i = 0; i < selected.length; i++) {
 				changeRequest.setInstallableUnitProfileProperty(selected[i], IInstallableUnit.PROP_PROFILE_ROOT_IU, Boolean.toString(true));
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UninstallWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UninstallWizardPage.java
index c592e12..acbac64 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UninstallWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UninstallWizardPage.java
@@ -31,7 +31,7 @@ public class UninstallWizardPage extends ProfileModificationWizardPage {
 
 	protected ProfileModificationOperation createProfileModificationOperation(Object[] selectedElements, IProgressMonitor monitor) {
 		try {
-			ProfileChangeRequest request = new ProfileChangeRequest(getProfileId());
+			ProfileChangeRequest request = ProfileChangeRequest.createByProfileId(getProfileId());
 			request.removeInstallableUnits(elementsToIUs(selectedElements));
 			ProvisioningPlan plan = ProvisioningUtil.getProvisioningPlan(request, monitor);
 			IStatus status = plan.getStatus();
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
index a47562a..4716564 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
@@ -79,7 +79,7 @@ public class UpdateWizardPage extends UpdateOrInstallWizardPage {
 
 	protected ProfileModificationOperation createProfileModificationOperation(Object[] selectedElements, IProgressMonitor monitor) {
 		try {
-			ProfileChangeRequest request = new ProfileChangeRequest(getProfileId());
+			ProfileChangeRequest request = ProfileChangeRequest.createByProfileId(getProfileId());
 			request.removeInstallableUnits(getIUsToReplace(selectedElements));
 			request.addInstallableUnits(elementsToIUs(selectedElements));
 			ProvisioningPlan plan = ProvisioningUtil.getProvisioningPlan(request, monitor);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
index a2de885..db8fe9b 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
@@ -91,7 +91,7 @@ public class AvailableIUElement extends ProvElement implements IUElement {
 	}
 
 	protected ProvisioningPlan getSizingPlan() throws ProvisionException {
-		ProfileChangeRequest request = new ProfileChangeRequest(profileID);
+		ProfileChangeRequest request = ProfileChangeRequest.createByProfileId(profileID);
 		request.addInstallableUnits(new IInstallableUnit[] {getIU()});
 		return ProvisioningUtil.getProvisioningPlan(request, null);
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableUpdateElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableUpdateElement.java
index 25ee9a0..1c39078 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableUpdateElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableUpdateElement.java
@@ -37,7 +37,7 @@ public class AvailableUpdateElement extends AvailableIUElement {
 	}
 
 	protected ProvisioningPlan getSizingPlan() throws ProvisionException {
-		ProfileChangeRequest request = new ProfileChangeRequest(profileID);
+		ProfileChangeRequest request = ProfileChangeRequest.createByProfileId(profileID);
 		request.removeInstallableUnits(new IInstallableUnit[] {iuToBeUpdated});
 		request.addInstallableUnits(new IInstallableUnit[] {getIU()});
 		return ProvisioningUtil.getProvisioningPlan(request, null);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/InstallAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/InstallAction.java
index 1e44fdf..9f045e6 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/InstallAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/InstallAction.java
@@ -69,7 +69,7 @@ public class InstallAction extends ProfileModificationAction {
 
 	protected IStatus validateOperation(IInstallableUnit[] ius, String targetProfileId, IProgressMonitor monitor) {
 		try {
-			ProfileChangeRequest request = new ProfileChangeRequest(targetProfileId);
+			ProfileChangeRequest request = ProfileChangeRequest.createByProfileId(targetProfileId);
 			request.addInstallableUnits(ius);
 			ProvisioningPlan plan = ProvisioningUtil.getProvisioningPlan(request, monitor);
 			return plan.getStatus();
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UninstallAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UninstallAction.java
index 3dbf3ec..f238c8b 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UninstallAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UninstallAction.java
@@ -78,7 +78,7 @@ public class UninstallAction extends ProfileModificationAction {
 
 	protected IStatus validateOperation(IInstallableUnit[] ius, String targetProfileId, IProgressMonitor monitor) {
 		try {
-			ProfileChangeRequest request = new ProfileChangeRequest(targetProfileId);
+			ProfileChangeRequest request = ProfileChangeRequest.createByProfileId(targetProfileId);
 			request.removeInstallableUnits(ius);
 			ProvisioningPlan plan = ProvisioningUtil.getProvisioningPlan(request, monitor);
 			return plan.getStatus();
commit 96cb8739b7c4b16ee84e6b41d97440d57c2c1809
Author: Simon Kaegi <skaegi>
Date:   Tue Jan 29 17:07:53 2008 +0000

    Bug 206077  [prov] Should we have a ProfileDelta in a provisioning plan and an associated engine phase for applying it?
    
    Updating the Engine APIs use of Operands

1	1	bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvisioningHelper.java
1	1	bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/Application.java
9	9	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/OperationGenerator.java
2	2	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java
17	10	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
9	11	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/IDirector.java
1	16	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/ProvisioningPlan.java
1	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/BeginOperationEvent.java
1	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/CommitOperationEvent.java
23	3	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Engine.java
4	4	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/EngineSession.java
4	4	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/InstallableUnitEvent.java
46	0	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/InstallableUnitOperand.java
0	41	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Operand.java
11	11	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Phase.java
3	3	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/PhaseSet.java
1	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/PropertyOperand.java
1	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/RollbackOperationEvent.java
2	2	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Touchpoint.java
2	2	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/TransactionEvent.java
2	2	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Collect.java
3	3	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Configure.java
7	7	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Install.java
2	2	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Sizing.java
3	3	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Unconfigure.java
7	7	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Uninstall.java
1	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/ReplacePlanTest.java
22	22	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
4	4	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/InstallRegistryTest.java
2	2	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/PhaseSetTest.java
9	9	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/PhaseTest.java
7	7	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/TouchpointTest.java
1	1	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
1	1	bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/NativeTouchpoint.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
diff --git a/bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvisioningHelper.java b/bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvisioningHelper.java
index 7705026..3ca04ac 100644
--- a/bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvisioningHelper.java
+++ b/bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvisioningHelper.java
@@ -209,7 +209,7 @@ public class ProvisioningHelper {
 		if (!result.getStatus().isOK())
 			return result.getStatus();
 
-		return engine.perform(profile, new DefaultPhaseSet(), result.getOperands(), result.getPropertyOperands(), progress);
+		return engine.perform(profile, new DefaultPhaseSet(), result.getOperands(), progress);
 	}
 
 	/**
diff --git a/bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/Application.java b/bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/Application.java
index 9377d86..dd691ca 100644
--- a/bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/Application.java
+++ b/bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/Application.java
@@ -185,7 +185,7 @@ public class Application implements IApplication {
 			else {
 				Sizing sizeComputer = new Sizing(100, "Compute sizes"); //$NON-NLS-1$
 				PhaseSet set = new PhaseSet(new Phase[] {sizeComputer}) {/*empty */};
-				operationStatus = engine.perform(profile, set, result.getOperands(), result.getPropertyOperands(), new NullProgressMonitor());
+				operationStatus = engine.perform(profile, set, result.getOperands(), new NullProgressMonitor());
 				System.out.println(Messages.Disk_size + sizeComputer.getDiskSize());
 				System.out.println(Messages.Download_size + sizeComputer.getDlSize());
 				request = new ProfileChangeRequest(profile);
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/OperationGenerator.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/OperationGenerator.java
index 494a9c9..cd8fbab 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/OperationGenerator.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/OperationGenerator.java
@@ -9,7 +9,7 @@
 package org.eclipse.equinox.internal.p2.director;
 
 import java.util.*;
-import org.eclipse.equinox.p2.engine.Operand;
+import org.eclipse.equinox.p2.engine.InstallableUnitOperand;
 import org.eclipse.equinox.p2.metadata.*;
 import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitDescription;
 import org.eclipse.equinox.p2.metadata.query.InstallableUnitQuery;
@@ -18,7 +18,7 @@ import org.eclipse.equinox.p2.query.Collector;
 public class OperationGenerator {
 	private static final IInstallableUnit NULL_IU = MetadataFactory.createResolvedInstallableUnit(MetadataFactory.createInstallableUnit(new InstallableUnitDescription()), new IInstallableUnitFragment[0]);
 
-	public Operand[] generateOperation(Collection from_, Collection to_) {
+	public InstallableUnitOperand[] generateOperation(Collection from_, Collection to_) {
 		List from = new ArrayList(from_);
 		Collections.sort(from);
 
@@ -28,7 +28,7 @@ public class OperationGenerator {
 		ArrayList operations = new ArrayList();
 		generateUpdates(from, to, operations);
 		generateInstallUninstall(from, to, operations);
-		Operand[] ops = (Operand[]) operations.toArray(new Operand[operations.size()]);
+		InstallableUnitOperand[] ops = (InstallableUnitOperand[]) operations.toArray(new InstallableUnitOperand[operations.size()]);
 		return ops;
 	}
 
@@ -101,16 +101,16 @@ public class OperationGenerator {
 		to.removeAll(removedFromTo);
 	}
 
-	private Operand createUninstallOperation(IInstallableUnit iu) {
-		return new Operand(iu, null);
+	private InstallableUnitOperand createUninstallOperation(IInstallableUnit iu) {
+		return new InstallableUnitOperand(iu, null);
 	}
 
-	private Operand createInstallOperation(IInstallableUnit iu) {
-		return new Operand(null, iu);
+	private InstallableUnitOperand createInstallOperation(IInstallableUnit iu) {
+		return new InstallableUnitOperand(null, iu);
 	}
 
-	private Operand createUpdateOperation(IInstallableUnit from, IInstallableUnit to) {
-		return new Operand(from, to);
+	private InstallableUnitOperand createUpdateOperation(IInstallableUnit from, IInstallableUnit to) {
+		return new InstallableUnitOperand(from, to);
 	}
 
 	private IInstallableUnit next(List l, int i) {
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java
index 8c6561a..2a53c24 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java
@@ -56,7 +56,7 @@ public class SimpleDirector implements IDirector {
 			ProvisioningPlan plan = planner.getRevertPlan(target, context, sub.newChild(PlanWork));
 			if (!plan.getStatus().isOK())
 				return plan.getStatus();
-			return engine.perform(profile, new DefaultPhaseSet(), plan.getOperands(), plan.getPropertyOperands(), sub.newChild(EngineWork));
+			return engine.perform(profile, new DefaultPhaseSet(), plan.getOperands(), sub.newChild(EngineWork));
 		} finally {
 			sub.done();
 		}
@@ -75,7 +75,7 @@ public class SimpleDirector implements IDirector {
 			if (!plan.getStatus().isOK())
 				return plan.getStatus();
 
-			IStatus engineResult = engine.perform(request.getProfile(), new DefaultPhaseSet(), plan.getOperands(), plan.getPropertyOperands(), sub.newChild(EngineWork));
+			IStatus engineResult = engine.perform(request.getProfile(), new DefaultPhaseSet(), plan.getOperands(), sub.newChild(EngineWork));
 			return engineResult;
 		} finally {
 			sub.done();
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
index e4c5de3..6088381 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
@@ -42,7 +42,14 @@ public class SimplePlanner implements IPlanner {
 	}
 
 	private ProvisioningPlan generateProvisioningPlan(Collection fromState, Collection toState, List fromStateOrder, List newStateOrder, ProfileChangeRequest changeRequest) {
-		return new ProvisioningPlan(Status.OK_STATUS, generateOperations(fromState, toState, fromStateOrder, newStateOrder), generatePropertyOperations(changeRequest));
+		InstallableUnitOperand[] iuOperands = generateOperations(fromState, toState, fromStateOrder, newStateOrder);
+		PropertyOperand[] propertyOperands = generatePropertyOperations(changeRequest);
+
+		Operand[] operands = new Operand[iuOperands.length + propertyOperands.length];
+		System.arraycopy(iuOperands, 0, operands, 0, iuOperands.length);
+		System.arraycopy(propertyOperands, 0, operands, iuOperands.length, propertyOperands.length);
+
+		return new ProvisioningPlan(Status.OK_STATUS, operands);
 	}
 
 	private PropertyOperand[] generatePropertyOperations(ProfileChangeRequest profileChangeRequest) {
@@ -93,14 +100,14 @@ public class SimplePlanner implements IPlanner {
 		return (PropertyOperand[]) operands.toArray(new PropertyOperand[operands.size()]);
 	}
 
-	private Operand[] generateOperations(Collection fromState, Collection toState, List fromStateOrder, List newStateOrder) {
+	private InstallableUnitOperand[] generateOperations(Collection fromState, Collection toState, List fromStateOrder, List newStateOrder) {
 		return sortOperations(new OperationGenerator().generateOperation(fromState, toState), newStateOrder, fromStateOrder);
 	}
 
-	private Operand[] sortOperations(Operand[] toSort, List installOrder, List uninstallOrder) {
+	private InstallableUnitOperand[] sortOperations(InstallableUnitOperand[] toSort, List installOrder, List uninstallOrder) {
 		List updateOp = new ArrayList();
 		for (int i = 0; i < toSort.length; i++) {
-			Operand op = toSort[i];
+			InstallableUnitOperand op = toSort[i];
 			if (op.first() == null && op.second() != null) {
 				installOrder.set(installOrder.indexOf(op.second()), op);
 				continue;
@@ -117,20 +124,20 @@ public class SimplePlanner implements IPlanner {
 		int i = 0;
 		for (Iterator iterator = installOrder.iterator(); iterator.hasNext();) {
 			Object elt = iterator.next();
-			if (elt instanceof Operand) {
-				toSort[i++] = (Operand) elt;
+			if (elt instanceof InstallableUnitOperand) {
+				toSort[i++] = (InstallableUnitOperand) elt;
 			}
 		}
 		for (Iterator iterator = uninstallOrder.iterator(); iterator.hasNext();) {
 			Object elt = iterator.next();
-			if (elt instanceof Operand) {
-				toSort[i++] = (Operand) elt;
+			if (elt instanceof InstallableUnitOperand) {
+				toSort[i++] = (InstallableUnitOperand) elt;
 			}
 		}
 		for (Iterator iterator = updateOp.iterator(); iterator.hasNext();) {
 			Object elt = iterator.next();
-			if (elt instanceof Operand) {
-				toSort[i++] = (Operand) elt;
+			if (elt instanceof InstallableUnitOperand) {
+				toSort[i++] = (InstallableUnitOperand) elt;
 			}
 		}
 		return toSort;
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/IDirector.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/IDirector.java
index be54e12..25fdf72 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/IDirector.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/IDirector.java
@@ -28,27 +28,25 @@ import org.eclipse.equinox.p2.metadata.IInstallableUnit;
  */
 public interface IDirector {
 
-	public IStatus provision(ProfileChangeRequest profileChangeRequest, ProvisioningContext context, IProgressMonitor monitor);
-
 	/**
-	 * Installs the given units into the given profile.
+	 * performs the change request with the given context.
 	 * 
-	 * @param toInstall The units to install
-	 * @param profile The profile to install into
+	 * @param profileChangeRequest The change request
+	 * @param context The provisioning context used for finding resources
 	 * @param monitor a progress monitor, or <code>null</code> if progress
 	 *    reporting is not desired
 	 */
-	//	public IStatus install(IInstallableUnit[] toInstall, Profile profile, ProvisioningContext context, IProgressMonitor monitor);
+	public IStatus provision(ProfileChangeRequest profileChangeRequest, ProvisioningContext context, IProgressMonitor monitor);
+
 	/**
-	 * Uninstalls the given units from the given profile.
+	 * Reverts the profile to a previous state described in the give InstallableUnit.
 	 * 
-	 * @param previous The units to uninstall
-	 * @param profile The profile from which to uninstall
+	 * @param previous The installable unit that describes the previous state of the profile
+	 * @param profile The profile to revert
+	 * @param context The provisioning context used for finding resources
 	 * @param monitor a progress monitor, or <code>null</code> if progress
 	 *    reporting is not desired
 	 */
-	//	public IStatus uninstall(IInstallableUnit[] toUninstall, Profile profile, ProvisioningContext context, IProgressMonitor monitor);
-	//public IStatus replace(IInstallableUnit[] toUninstall, IInstallableUnit[] toInstall, Profile profile, ProvisioningContext context, IProgressMonitor monitor);
 	public IStatus revert(IInstallableUnit previous, Profile profile, ProvisioningContext context, IProgressMonitor monitor);
 
 	/**
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/ProvisioningPlan.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/ProvisioningPlan.java
index 6e9e25e..d0b5462 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/ProvisioningPlan.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/ProvisioningPlan.java
@@ -10,25 +10,18 @@ package org.eclipse.equinox.p2.director;
 
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.p2.engine.Operand;
-import org.eclipse.equinox.p2.engine.PropertyOperand;
 
 public class ProvisioningPlan {
 	private IStatus status;
 	private Operand[] operands;
-	private PropertyOperand[] propertyOperands;
 
 	public ProvisioningPlan(IStatus status) {
-		this(status, new Operand[0], new PropertyOperand[0]);
+		this(status, new Operand[0]);
 	}
 
 	public ProvisioningPlan(IStatus status, Operand[] operands) {
-		this(status, operands, new PropertyOperand[0]);
-	}
-
-	public ProvisioningPlan(IStatus status, Operand[] operands, PropertyOperand[] propertyOperands) {
 		this.status = status;
 		this.operands = operands;
-		this.propertyOperands = propertyOperands;
 	}
 
 	public IStatus getStatus() {
@@ -44,12 +37,4 @@ public class ProvisioningPlan {
 		return operands;
 	}
 
-	/** 
-	 * The property operands to pass to the engine.
-	 * @return the property operands to be executed. This may be an empty array if the
-	 * plan has errors or if there is nothing to do.
-	 */
-	public PropertyOperand[] getPropertyOperands() {
-		return propertyOperands;
-	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/BeginOperationEvent.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/BeginOperationEvent.java
index d19ba5b..af15b30 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/BeginOperationEvent.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/BeginOperationEvent.java
@@ -14,7 +14,7 @@ public class BeginOperationEvent extends TransactionEvent {
 
 	private static final long serialVersionUID = 6389318375739324865L;
 
-	public BeginOperationEvent(Profile profile, PhaseSet phaseSet, Operand[] deltas, Engine engine) {
+	public BeginOperationEvent(Profile profile, PhaseSet phaseSet, InstallableUnitOperand[] deltas, Engine engine) {
 		super(profile, phaseSet, deltas, engine);
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/CommitOperationEvent.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/CommitOperationEvent.java
index 72303ca..3d64d4e 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/CommitOperationEvent.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/CommitOperationEvent.java
@@ -13,7 +13,7 @@ package org.eclipse.equinox.p2.engine;
 public class CommitOperationEvent extends TransactionEvent {
 	private static final long serialVersionUID = -523967775426133720L;
 
-	public CommitOperationEvent(Profile profile, PhaseSet phaseSet, Operand[] deltas, Engine engine) {
+	public CommitOperationEvent(Profile profile, PhaseSet phaseSet, InstallableUnitOperand[] deltas, Engine engine) {
 		super(profile, phaseSet, deltas, engine);
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Engine.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Engine.java
index d1ced9d..9c882ae 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Engine.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Engine.java
@@ -26,7 +26,27 @@ public class Engine {
 		this.eventBus = eventBus;
 	}
 
-	public IStatus perform(Profile profile, PhaseSet phaseSet, Operand[] iuOperands, PropertyOperand[] propertyOperands, IProgressMonitor monitor) {
+	public IStatus perform(Profile profile, PhaseSet phaseSet, Operand[] operands, IProgressMonitor monitor) {
+		if (operands == null)
+			throw new IllegalArgumentException("Operands must not be null."); //$NON-NLS-1$
+
+		List iuOperands = new ArrayList();
+		List propertyOperands = new ArrayList();
+		for (int i = 0; i < operands.length; i++) {
+			Operand operand = operands[i];
+			if (operand instanceof InstallableUnitOperand) {
+				iuOperands.add(operand);
+			} else if (operand instanceof PropertyOperand) {
+				propertyOperands.add(operand);
+			}
+		}
+
+		InstallableUnitOperand[] iuOperandArray = (InstallableUnitOperand[]) iuOperands.toArray(new InstallableUnitOperand[0]);
+		PropertyOperand[] propertyOperandArray = (PropertyOperand[]) propertyOperands.toArray(new PropertyOperand[0]);
+		return perform(profile, phaseSet, iuOperandArray, propertyOperandArray, monitor);
+	}
+
+	private IStatus perform(Profile profile, PhaseSet phaseSet, InstallableUnitOperand[] iuOperands, PropertyOperand[] propertyOperands, IProgressMonitor monitor) {
 
 		// TODO -- Messages
 		if (profile == null)
@@ -115,7 +135,7 @@ public class Engine {
 	//This has to be done in two calls because when we return from the phaseSet.perform the iu properties are already lost
 	Map snapshot = new HashMap();
 
-	private void snapshotIUProperties(Profile profile, Operand[] operands) {
+	private void snapshotIUProperties(Profile profile, InstallableUnitOperand[] operands) {
 		for (int i = 0; i < operands.length; i++) {
 			if (operands[i].first() != null && operands[i].second() != null) {
 				snapshot.put(operands[i].first(), profile.getInstallableUnitProfileProperties(operands[i].first()));
@@ -123,7 +143,7 @@ public class Engine {
 		}
 	}
 
-	private void moveIUProperties(Profile profile, Operand[] operands) {
+	private void moveIUProperties(Profile profile, InstallableUnitOperand[] operands) {
 		for (int i = 0; i < operands.length; i++) {
 			if (operands[i].first() != null && operands[i].second() != null) {
 				OrderedProperties prop = (OrderedProperties) snapshot.get(operands[i].first());
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/EngineSession.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/EngineSession.java
index 78b750e..3dfb20e 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/EngineSession.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/EngineSession.java
@@ -17,10 +17,10 @@ import org.eclipse.equinox.internal.p2.engine.EngineActivator;
 public class EngineSession {
 
 	private static class ActionsRecord {
-		Operand operand;
+		InstallableUnitOperand operand;
 		List actions = new ArrayList();
 
-		ActionsRecord(Operand operand) {
+		ActionsRecord(InstallableUnitOperand operand) {
 			this.operand = operand;
 		}
 	}
@@ -99,9 +99,9 @@ public class EngineSession {
 		currentRecord = null;
 	}
 
-	void recordAction(ProvisioningAction action, Operand operand) {
+	void recordAction(ProvisioningAction action, InstallableUnitOperand operand) {
 		if (action == null || operand == null)
-			throw new IllegalArgumentException("Action and Operand must not be null."); //$NON-NLS-1$
+			throw new IllegalArgumentException("Action and InstallableUnitOperand must not be null."); //$NON-NLS-1$
 
 		if (currentRecord == null || operand != currentRecord.operand) {
 			currentRecord = new ActionsRecord(operand);
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/InstallableUnitEvent.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/InstallableUnitEvent.java
index e464f9e..6c33a81 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/InstallableUnitEvent.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/InstallableUnitEvent.java
@@ -23,16 +23,16 @@ public class InstallableUnitEvent extends EventObject {
 	private boolean prePhase;
 
 	private Profile profile;
-	private Operand operand;
+	private InstallableUnitOperand operand;
 	private Touchpoint touchpoint;
 	private IStatus result;
 	private int type;
 
-	public InstallableUnitEvent(String phaseId, boolean prePhase, Profile profile, Operand operand, int type, Touchpoint touchpoint) {
+	public InstallableUnitEvent(String phaseId, boolean prePhase, Profile profile, InstallableUnitOperand operand, int type, Touchpoint touchpoint) {
 		this(phaseId, prePhase, profile, operand, type, touchpoint, null);
 	}
 
-	public InstallableUnitEvent(String phaseId, boolean prePhase, Profile profile, Operand operand, int type, Touchpoint touchpoint, IStatus result) {
+	public InstallableUnitEvent(String phaseId, boolean prePhase, Profile profile, InstallableUnitOperand operand, int type, Touchpoint touchpoint, IStatus result) {
 		super(touchpoint); //TODO not sure if the touchpoint should be the source
 		this.phaseId = phaseId;
 		this.prePhase = prePhase;
@@ -53,7 +53,7 @@ public class InstallableUnitEvent extends EventObject {
 		return profile;
 	}
 
-	public Operand getOperand() {
+	public InstallableUnitOperand getOperand() {
 		return operand;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/InstallableUnitOperand.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/InstallableUnitOperand.java
new file mode 100644
index 0000000..efab3ee
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/InstallableUnitOperand.java
@@ -0,0 +1,46 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.p2.engine;
+
+import org.eclipse.core.runtime.Assert;
+import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+
+public class InstallableUnitOperand extends Operand {
+	private final IInstallableUnit first;
+	private final IInstallableUnit second;
+
+	/**
+	 * Creates a new operand that represents replacing an installable unit
+	 * with another. At least one of the provided installable units must be
+	 * non-null.
+	 * 
+	 * @param first The installable unit being removed, or <code>null</code>
+	 * @param second The installable unit being added, or <code>null</code>
+	 */
+	public InstallableUnitOperand(IInstallableUnit first, IInstallableUnit second) {
+		//the operand must have at least one non-null units
+		Assert.isTrue(first != null || second != null);
+		this.first = first;
+		this.second = second;
+	}
+
+	public IInstallableUnit first() {
+		return first;
+	}
+
+	public IInstallableUnit second() {
+		return second;
+	}
+
+	public String toString() {
+		return first + " --> " + second; //$NON-NLS-1$
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Operand.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Operand.java
index ce2545e..f162cbd 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Operand.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Operand.java
@@ -1,46 +1,5 @@
-/*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
 package org.eclipse.equinox.p2.engine;
 
-import org.eclipse.core.runtime.Assert;
-import org.eclipse.equinox.p2.metadata.IInstallableUnit;
-
 public class Operand {
-	private final IInstallableUnit first;
-	private final IInstallableUnit second;
-
-	/**
-	 * Creates a new operand that represents replacing an installable unit
-	 * with another. At least one of the provided installable units must be
-	 * non-null.
-	 * 
-	 * @param first The installable unit being removed, or <code>null</code>
-	 * @param second The installable unit being added, or <code>null</code>
-	 */
-	public Operand(IInstallableUnit first, IInstallableUnit second) {
-		//the operand must have at least one non-null units
-		Assert.isTrue(first != null || second != null);
-		this.first = first;
-		this.second = second;
-	}
-
-	public IInstallableUnit first() {
-		return first;
-	}
-
-	public IInstallableUnit second() {
-		return second;
-	}
 
-	public String toString() {
-		return first + " --> " + second; //$NON-NLS-1$
-	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Phase.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Phase.java
index 0ba9ea2..fff199c 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Phase.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Phase.java
@@ -47,7 +47,7 @@ public abstract class Phase {
 		return getClass().getName() + " - " + this.weight; //$NON-NLS-1$
 	}
 
-	public final MultiStatus perform(EngineSession session, Profile profile, Operand[] operands, IProgressMonitor monitor) {
+	public final MultiStatus perform(EngineSession session, Profile profile, InstallableUnitOperand[] operands, IProgressMonitor monitor) {
 		MultiStatus status = new MultiStatus(EngineActivator.ID, IStatus.OK, null, null);
 		perform(status, session, profile, operands, monitor);
 		if (status.matches(IStatus.CANCEL)) {
@@ -62,7 +62,7 @@ public abstract class Phase {
 		return status;
 	}
 
-	void perform(MultiStatus status, EngineSession session, Profile profile, Operand[] operands, IProgressMonitor monitor) {
+	void perform(MultiStatus status, EngineSession session, Profile profile, InstallableUnitOperand[] operands, IProgressMonitor monitor) {
 		touchpointToTouchpointParameters = new HashMap();
 		for (int i = 0; i < operands.length; i++) {
 			TouchpointType type = getTouchpointType(operands[i]);
@@ -113,13 +113,13 @@ public abstract class Phase {
 		}
 	}
 
-	private void mainPerform(MultiStatus status, EngineSession session, Profile profile, Operand[] operands, SubMonitor subMonitor) {
+	private void mainPerform(MultiStatus status, EngineSession session, Profile profile, InstallableUnitOperand[] operands, SubMonitor subMonitor) {
 		subMonitor.beginTask("", operands.length); //$NON-NLS-1$
 		for (int i = 0; i < operands.length; i++) {
 			subMonitor.setWorkRemaining(operands.length - i);
 			if (subMonitor.isCanceled())
 				throw new OperationCanceledException();
-			Operand operand = operands[i];
+			InstallableUnitOperand operand = operands[i];
 			if (!isApplicable(operand))
 				continue;
 
@@ -175,7 +175,7 @@ public abstract class Phase {
 		phaseParameters = null;
 	}
 
-	void undo(MultiStatus status, EngineSession session, Profile profile, Operand operand, ProvisioningAction[] actions) {
+	void undo(MultiStatus status, EngineSession session, Profile profile, InstallableUnitOperand operand, ProvisioningAction[] actions) {
 		Touchpoint touchpoint = getTouchpoint(operand);
 		Map touchpointParameters = (Map) touchpointToTouchpointParameters.get(touchpoint);
 		Map parameters = new HashMap(touchpointParameters);
@@ -204,7 +204,7 @@ public abstract class Phase {
 		return parser.parseActions(instructions[0]);
 	}
 
-	protected boolean isApplicable(Operand op) {
+	protected boolean isApplicable(InstallableUnitOperand op) {
 		return true;
 	}
 
@@ -216,11 +216,11 @@ public abstract class Phase {
 		return Status.OK_STATUS;
 	}
 
-	protected IStatus completeOperand(Operand operand, Map parameters) {
+	protected IStatus completeOperand(InstallableUnitOperand operand, Map parameters) {
 		return Status.OK_STATUS;
 	}
 
-	protected IStatus initializeOperand(Profile profile, Operand operand, Map parameters, IProgressMonitor monitor) {
+	protected IStatus initializeOperand(Profile profile, InstallableUnitOperand operand, Map parameters, IProgressMonitor monitor) {
 		return Status.OK_STATUS;
 	}
 
@@ -228,7 +228,7 @@ public abstract class Phase {
 		return null;
 	}
 
-	protected abstract ProvisioningAction[] getActions(Operand currentOperand);
+	protected abstract ProvisioningAction[] getActions(InstallableUnitOperand currentOperand);
 
 	/**
 	 * Returns a human-readable message to be displayed in case of an error performing
@@ -242,14 +242,14 @@ public abstract class Phase {
 	 * Returns the touchpoint corresponding to the operand, or null if no corresponding
 	 * touchpoint is available.
 	 */
-	protected static Touchpoint getTouchpoint(Operand operand) {
+	protected static Touchpoint getTouchpoint(InstallableUnitOperand operand) {
 		return TouchpointManager.getInstance().getTouchpoint(getTouchpointType(operand));
 	}
 
 	/**
 	 * Returns the touchpoint type corresponding to the operand. Never returns null.
 	 */
-	protected static TouchpointType getTouchpointType(Operand operand) {
+	protected static TouchpointType getTouchpointType(InstallableUnitOperand operand) {
 		IInstallableUnit unit = operand.second();
 		if (unit == null)
 			unit = operand.first();
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/PhaseSet.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/PhaseSet.java
index 57c367a..0cd1854 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/PhaseSet.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/PhaseSet.java
@@ -23,7 +23,7 @@ public abstract class PhaseSet {
 		this.phases = phases;
 	}
 
-	public final MultiStatus perform(EngineSession session, Profile profile, Operand[] deltas, IProgressMonitor monitor) {
+	public final MultiStatus perform(EngineSession session, Profile profile, InstallableUnitOperand[] deltas, IProgressMonitor monitor) {
 		MultiStatus result = new MultiStatus(EngineActivator.ID, IStatus.OK, null, null);
 		int[] weights = getProgressWeights(deltas);
 		int totalWork = getTotalWork(weights);
@@ -54,7 +54,7 @@ public abstract class PhaseSet {
 		return sum;
 	}
 
-	private int[] getProgressWeights(Operand[] operands) {
+	private int[] getProgressWeights(InstallableUnitOperand[] operands) {
 		int[] weights = new int[phases.length];
 		for (int i = 0; i < phases.length; i += 1) {
 			if (operands.length > 0)
@@ -66,7 +66,7 @@ public abstract class PhaseSet {
 		return weights;
 	}
 
-	private int countApplicable(Phase phase, Operand[] operands) {
+	private int countApplicable(Phase phase, InstallableUnitOperand[] operands) {
 		int count = 0;
 		for (int i = 0; i < operands.length; i++) {
 			if (phase.isApplicable(operands[i]))
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/PropertyOperand.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/PropertyOperand.java
index 5f990eb..37c2421 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/PropertyOperand.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/PropertyOperand.java
@@ -12,7 +12,7 @@ package org.eclipse.equinox.p2.engine;
 
 import org.eclipse.core.runtime.Assert;
 
-public class PropertyOperand {
+public class PropertyOperand extends Operand {
 	private final Object first;
 	private final Object second;
 	private final String key;
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/RollbackOperationEvent.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/RollbackOperationEvent.java
index 7d994e6..8e9fd96 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/RollbackOperationEvent.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/RollbackOperationEvent.java
@@ -17,7 +17,7 @@ public class RollbackOperationEvent extends TransactionEvent {
 	private static final long serialVersionUID = -2076492953949691215L;
 	private IStatus cause;
 
-	public RollbackOperationEvent(Profile profile, PhaseSet phaseSet, Operand[] deltas, Engine engine, IStatus cause) {
+	public RollbackOperationEvent(Profile profile, PhaseSet phaseSet, InstallableUnitOperand[] deltas, Engine engine, IStatus cause) {
 		super(profile, phaseSet, deltas, engine);
 		this.cause = cause;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Touchpoint.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Touchpoint.java
index 1f7d7f1..2e825a8 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Touchpoint.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Touchpoint.java
@@ -33,11 +33,11 @@ public abstract class Touchpoint {
 		return Status.OK_STATUS;
 	}
 
-	public IStatus initializeOperand(Profile profile, String phaseId, Operand operand, Map parameters) {
+	public IStatus initializeOperand(Profile profile, String phaseId, InstallableUnitOperand operand, Map parameters) {
 		return Status.OK_STATUS;
 	}
 
-	public IStatus completeOperand(Profile profile, String phaseId, Operand operand, Map parameters) {
+	public IStatus completeOperand(Profile profile, String phaseId, InstallableUnitOperand operand, Map parameters) {
 		return Status.OK_STATUS;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/TransactionEvent.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/TransactionEvent.java
index 66fdded..ddc9597 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/TransactionEvent.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/TransactionEvent.java
@@ -16,9 +16,9 @@ public abstract class TransactionEvent extends EventObject {
 	private static final long serialVersionUID = 6278706971855493984L;
 	protected Profile profile;
 	protected PhaseSet phaseSet;
-	protected Operand[] deltas;
+	protected InstallableUnitOperand[] deltas;
 
-	public TransactionEvent(Profile profile, PhaseSet phaseSet, Operand[] deltas, Engine engine) {
+	public TransactionEvent(Profile profile, PhaseSet phaseSet, InstallableUnitOperand[] deltas, Engine engine) {
 		super(engine);
 		this.profile = profile;
 		this.phaseSet = phaseSet;
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Collect.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Collect.java
index 666b294..284b446 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Collect.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Collect.java
@@ -32,11 +32,11 @@ public class Collect extends Phase {
 		postPerformWork = 1000;
 	}
 
-	protected boolean isApplicable(Operand op) {
+	protected boolean isApplicable(InstallableUnitOperand op) {
 		return (op.second() != null);
 	}
 
-	protected ProvisioningAction[] getActions(Operand currentOperand) {
+	protected ProvisioningAction[] getActions(InstallableUnitOperand currentOperand) {
 		ProvisioningAction action = getTouchpoint(currentOperand).getAction(phaseId);
 		return new ProvisioningAction[] {action};
 	}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Configure.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Configure.java
index 7026571..079787c 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Configure.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Configure.java
@@ -24,11 +24,11 @@ public class Configure extends Phase {
 		super("configure", weight); //$NON-NLS-1$
 	}
 
-	protected boolean isApplicable(Operand op) {
+	protected boolean isApplicable(InstallableUnitOperand op) {
 		return (op.second() != null);
 	}
 
-	protected ProvisioningAction[] getActions(Operand currentOperand) {
+	protected ProvisioningAction[] getActions(InstallableUnitOperand currentOperand) {
 		IInstallableUnit unit = currentOperand.second();
 		if (unit.isFragment())
 			return null;
@@ -39,7 +39,7 @@ public class Configure extends Phase {
 		return Messages.Phase_Configure_Error;
 	}
 
-	protected IStatus initializeOperand(Profile profile, Operand operand, Map parameters, IProgressMonitor monitor) {
+	protected IStatus initializeOperand(Profile profile, InstallableUnitOperand operand, Map parameters, IProgressMonitor monitor) {
 		IInstallableUnit iu = operand.second();
 		monitor.subTask(NLS.bind(Messages.Phase_Configure_Task, iu.getId()));
 		parameters.put(PARM_IU, iu);
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Install.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Install.java
index 72a17e6..c44fcf4 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Install.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Install.java
@@ -29,7 +29,7 @@ public class Install extends Phase {
 			Profile profile = (Profile) parameters.get(PARM_PROFILE);
 			String phaseId = (String) parameters.get(PARM_PHASE_ID);
 			Touchpoint touchpoint = (Touchpoint) parameters.get(PARM_TOUCHPOINT);
-			Operand operand = (Operand) parameters.get(PARM_OPERAND);
+			InstallableUnitOperand operand = (InstallableUnitOperand) parameters.get(PARM_OPERAND);
 			((ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName())).publishEvent(new InstallableUnitEvent(phaseId, true, profile, operand, InstallableUnitEvent.INSTALL, touchpoint));
 			return null;
 		}
@@ -38,7 +38,7 @@ public class Install extends Phase {
 			Profile profile = (Profile) parameters.get(PARM_PROFILE);
 			String phaseId = (String) parameters.get(PARM_PHASE_ID);
 			Touchpoint touchpoint = (Touchpoint) parameters.get(PARM_TOUCHPOINT);
-			Operand operand = (Operand) parameters.get(PARM_OPERAND);
+			InstallableUnitOperand operand = (InstallableUnitOperand) parameters.get(PARM_OPERAND);
 			IInstallableUnit iu = (IInstallableUnit) parameters.get(PARM_IU);
 			profile.internalRemoveInstallableUnit(iu);
 			((ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName())).publishEvent(new InstallableUnitEvent(phaseId, false, profile, operand, InstallableUnitEvent.UNINSTALL, touchpoint));
@@ -52,7 +52,7 @@ public class Install extends Phase {
 			Profile profile = (Profile) parameters.get(PARM_PROFILE);
 			String phaseId = (String) parameters.get(PARM_PHASE_ID);
 			Touchpoint touchpoint = (Touchpoint) parameters.get(PARM_TOUCHPOINT);
-			Operand operand = (Operand) parameters.get(PARM_OPERAND);
+			InstallableUnitOperand operand = (InstallableUnitOperand) parameters.get(PARM_OPERAND);
 			IInstallableUnit iu = (IInstallableUnit) parameters.get(PARM_IU);
 			IInstallableUnit preparedIU = touchpoint.prepareIU(iu, profile);
 			profile.internalAddInstallableUnit(preparedIU);
@@ -64,7 +64,7 @@ public class Install extends Phase {
 			Profile profile = (Profile) parameters.get(PARM_PROFILE);
 			String phaseId = (String) parameters.get(PARM_PHASE_ID);
 			Touchpoint touchpoint = (Touchpoint) parameters.get(PARM_TOUCHPOINT);
-			Operand operand = (Operand) parameters.get(PARM_OPERAND);
+			InstallableUnitOperand operand = (InstallableUnitOperand) parameters.get(PARM_OPERAND);
 			((ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName())).publishEvent(new InstallableUnitEvent(phaseId, true, profile, operand, InstallableUnitEvent.UNINSTALL, touchpoint));
 			return null;
 		}
@@ -76,11 +76,11 @@ public class Install extends Phase {
 		super(PHASE_ID, weight);
 	}
 
-	protected boolean isApplicable(Operand op) {
+	protected boolean isApplicable(InstallableUnitOperand op) {
 		return (op.second() != null);
 	}
 
-	protected ProvisioningAction[] getActions(Operand currentOperand) {
+	protected ProvisioningAction[] getActions(InstallableUnitOperand currentOperand) {
 		//TODO: monitor.subTask(NLS.bind(Messages.Engine_Installing_IU, unit.getId()));
 
 		ProvisioningAction beforeAction = new BeforeInstallEventAction();
@@ -105,7 +105,7 @@ public class Install extends Phase {
 		return Messages.Phase_Install_Error;
 	}
 
-	protected IStatus initializeOperand(Profile profile, Operand operand, Map parameters, IProgressMonitor monitor) {
+	protected IStatus initializeOperand(Profile profile, InstallableUnitOperand operand, Map parameters, IProgressMonitor monitor) {
 		IInstallableUnit iu = operand.second();
 		monitor.subTask(NLS.bind(Messages.Phase_Install_Task, iu.getId()));
 		parameters.put(PARM_IU, iu);
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Sizing.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Sizing.java
index 3c87df4..fa4f8e2 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Sizing.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Sizing.java
@@ -31,7 +31,7 @@ public class Sizing extends Phase {
 		super(PHASE_ID, weight);
 	}
 
-	protected boolean isApplicable(Operand op) {
+	protected boolean isApplicable(InstallableUnitOperand op) {
 		return (op.second() != null);
 	}
 
@@ -43,7 +43,7 @@ public class Sizing extends Phase {
 		return dlSize;
 	}
 
-	protected ProvisioningAction[] getActions(Operand currentOperand) {
+	protected ProvisioningAction[] getActions(InstallableUnitOperand currentOperand) {
 		ProvisioningAction action = getTouchpoint(currentOperand).getAction("collect"); //$NON-NLS-1$
 		return new ProvisioningAction[] {action};
 	}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Unconfigure.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Unconfigure.java
index ee7169c..bfefa2a 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Unconfigure.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Unconfigure.java
@@ -23,11 +23,11 @@ public class Unconfigure extends Phase {
 		super("unconfigure", weight); //$NON-NLS-1$
 	}
 
-	protected boolean isApplicable(Operand op) {
+	protected boolean isApplicable(InstallableUnitOperand op) {
 		return (op.first() != null);
 	}
 
-	protected ProvisioningAction[] getActions(Operand currentOperand) {
+	protected ProvisioningAction[] getActions(InstallableUnitOperand currentOperand) {
 		//TODO: monitor.subTask(NLS.bind(Messages.Engine_Unconfiguring_IU, unit.getId()));
 
 		IInstallableUnit unit = currentOperand.first();
@@ -41,7 +41,7 @@ public class Unconfigure extends Phase {
 		return Messages.Phase_Unconfigure_Error;
 	}
 
-	protected IStatus initializeOperand(Profile profile, Operand operand, Map parameters, IProgressMonitor monitor) {
+	protected IStatus initializeOperand(Profile profile, InstallableUnitOperand operand, Map parameters, IProgressMonitor monitor) {
 		IInstallableUnit iu = operand.first();
 		parameters.put(PARM_IU, iu); 
 
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Uninstall.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Uninstall.java
index 73b55ca..8dade39 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Uninstall.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Uninstall.java
@@ -27,7 +27,7 @@ public class Uninstall extends Phase {
 			Profile profile = (Profile) parameters.get(PARM_PROFILE);
 			String phaseId = (String) parameters.get(PARM_PHASE_ID);
 			Touchpoint touchpoint = (Touchpoint) parameters.get(PARM_TOUCHPOINT);
-			Operand operand = (Operand) parameters.get(PARM_OPERAND);
+			InstallableUnitOperand operand = (InstallableUnitOperand) parameters.get(PARM_OPERAND);
 			((ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName())).publishEvent(new InstallableUnitEvent(phaseId, true, profile, operand, InstallableUnitEvent.UNINSTALL, touchpoint));
 			return null;
 		}
@@ -36,7 +36,7 @@ public class Uninstall extends Phase {
 			Profile profile = (Profile) parameters.get(PARM_PROFILE);
 			String phaseId = (String) parameters.get(PARM_PHASE_ID);
 			Touchpoint touchpoint = (Touchpoint) parameters.get(PARM_TOUCHPOINT);
-			Operand operand = (Operand) parameters.get(PARM_OPERAND);
+			InstallableUnitOperand operand = (InstallableUnitOperand) parameters.get(PARM_OPERAND);
 			IInstallableUnit iu = (IInstallableUnit) parameters.get(PARM_IU);
 			profile.internalAddInstallableUnit(iu);
 			((ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName())).publishEvent(new InstallableUnitEvent(phaseId, false, profile, operand, InstallableUnitEvent.INSTALL, touchpoint));
@@ -49,7 +49,7 @@ public class Uninstall extends Phase {
 			Profile profile = (Profile) parameters.get(PARM_PROFILE);
 			String phaseId = (String) parameters.get(PARM_PHASE_ID);
 			Touchpoint touchpoint = (Touchpoint) parameters.get(PARM_TOUCHPOINT);
-			Operand operand = (Operand) parameters.get(PARM_OPERAND);
+			InstallableUnitOperand operand = (InstallableUnitOperand) parameters.get(PARM_OPERAND);
 			IInstallableUnit iu = (IInstallableUnit) parameters.get(PARM_IU);
 			profile.internalRemoveInstallableUnit(iu);
 			((ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName())).publishEvent(new InstallableUnitEvent(phaseId, false, profile, operand, InstallableUnitEvent.UNINSTALL, touchpoint));
@@ -60,7 +60,7 @@ public class Uninstall extends Phase {
 			Profile profile = (Profile) parameters.get(PARM_PROFILE);
 			String phaseId = (String) parameters.get(PARM_PHASE_ID);
 			Touchpoint touchpoint = (Touchpoint) parameters.get(PARM_TOUCHPOINT);
-			Operand operand = (Operand) parameters.get(PARM_OPERAND);
+			InstallableUnitOperand operand = (InstallableUnitOperand) parameters.get(PARM_OPERAND);
 			((ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName())).publishEvent(new InstallableUnitEvent(phaseId, true, profile, operand, InstallableUnitEvent.INSTALL, touchpoint));
 			return null;
 		}
@@ -72,11 +72,11 @@ public class Uninstall extends Phase {
 		super(PHASE_ID, weight);
 	}
 
-	protected boolean isApplicable(Operand op) {
+	protected boolean isApplicable(InstallableUnitOperand op) {
 		return (op.first() != null);
 	}
 
-	protected ProvisioningAction[] getActions(Operand currentOperand) {
+	protected ProvisioningAction[] getActions(InstallableUnitOperand currentOperand) {
 		//TODO: monitor.subTask(NLS.bind(Messages.Engine_Uninstalling_IU, unit.getId()));
 
 		ProvisioningAction beforeAction = new BeforeUninstallEventAction();
@@ -100,7 +100,7 @@ public class Uninstall extends Phase {
 		return Messages.Phase_Uninstall_Error;
 	}
 
-	protected IStatus initializeOperand(Profile profile, Operand operand, Map parameters, IProgressMonitor monitor) {
+	protected IStatus initializeOperand(Profile profile, InstallableUnitOperand operand, Map parameters, IProgressMonitor monitor) {
 		IInstallableUnit iu = operand.first();
 		parameters.put("iu", iu); //$NON-NLS-1$
 
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/ReplacePlanTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/ReplacePlanTest.java
index 7674390..b4d016b 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/ReplacePlanTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/ReplacePlanTest.java
@@ -76,7 +76,7 @@ public class ReplacePlanTest extends AbstractProvisioningTest {
 		ProvisioningPlan plan = planner.getProvisioningPlan(request, new ProvisioningContext(), null);
 		assertTrue("1.0", plan.getStatus().isOK());
 		assertProfileContainsAll("1.1", profile, oldUnits);
-		IStatus result = createEngine().perform(profile, new DefaultPhaseSet(), plan.getOperands(), plan.getPropertyOperands(), null);
+		IStatus result = createEngine().perform(profile, new DefaultPhaseSet(), plan.getOperands(), null);
 		assertTrue("1.2", result.isOK());
 		assertProfileContainsAll("1.3", profile, newUnits);
 	}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
index 2db0356..578e9e4 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
@@ -74,9 +74,9 @@ public class EngineTest extends AbstractProvisioningTest {
 
 		Profile profile = null;
 		PhaseSet phaseSet = new DefaultPhaseSet();
-		Operand[] operands = new Operand[] {};
+		InstallableUnitOperand[] operands = new InstallableUnitOperand[] {};
 		try {
-			engine.perform(profile, phaseSet, operands, null, new NullProgressMonitor());
+			engine.perform(profile, phaseSet, operands, new NullProgressMonitor());
 		} catch (IllegalArgumentException expected) {
 			return;
 		}
@@ -87,9 +87,9 @@ public class EngineTest extends AbstractProvisioningTest {
 
 		Profile profile = createProfile("test");
 		PhaseSet phaseSet = null;
-		Operand[] operands = new Operand[] {};
+		InstallableUnitOperand[] operands = new InstallableUnitOperand[] {};
 		try {
-			engine.perform(profile, phaseSet, operands, null, new NullProgressMonitor());
+			engine.perform(profile, phaseSet, operands, new NullProgressMonitor());
 		} catch (IllegalArgumentException expected) {
 			return;
 		}
@@ -100,9 +100,9 @@ public class EngineTest extends AbstractProvisioningTest {
 
 		Profile profile = createProfile("test");
 		PhaseSet phaseSet = new DefaultPhaseSet();
-		Operand[] operands = null;
+		InstallableUnitOperand[] operands = null;
 		try {
-			engine.perform(profile, phaseSet, operands, null, new NullProgressMonitor());
+			engine.perform(profile, phaseSet, operands, new NullProgressMonitor());
 			fail();
 		} catch (IllegalArgumentException expected) {
 			//expected
@@ -113,8 +113,8 @@ public class EngineTest extends AbstractProvisioningTest {
 
 		Profile profile = createProfile("test");
 		PhaseSet phaseSet = new DefaultPhaseSet();
-		Operand[] operands = new Operand[] {};
-		IStatus result = engine.perform(profile, phaseSet, operands, null, new NullProgressMonitor());
+		InstallableUnitOperand[] operands = new InstallableUnitOperand[] {};
+		IStatus result = engine.perform(profile, phaseSet, operands, new NullProgressMonitor());
 		assertTrue(result.isOK());
 	}
 
@@ -124,15 +124,15 @@ public class EngineTest extends AbstractProvisioningTest {
 		PhaseSet phaseSet = new PhaseSet(new Phase[] {}) {
 			// empty PhaseSet
 		};
-		Operand op = new Operand(createResolvedIU(createIU("name")), null);
-		Operand[] operands = new Operand[] {op};
-		IStatus result = engine.perform(profile, phaseSet, operands, null, new NullProgressMonitor());
+		InstallableUnitOperand op = new InstallableUnitOperand(createResolvedIU(createIU("name")), null);
+		InstallableUnitOperand[] operands = new InstallableUnitOperand[] {op};
+		IStatus result = engine.perform(profile, phaseSet, operands, new NullProgressMonitor());
 		assertTrue(result.isOK());
 	}
 
 	public void testPerformSingleNullOperand() {
 		try {
-			new Operand(null, null);
+			new InstallableUnitOperand(null, null);
 			fail("Should not allow null operand");
 		} catch (RuntimeException e) {
 			//expected
@@ -147,13 +147,13 @@ public class EngineTest extends AbstractProvisioningTest {
 		for (Iterator it = getInstallableUnits(profile); it.hasNext();) {
 			PhaseSet phaseSet = new DefaultPhaseSet();
 			IInstallableUnit doomed = (IInstallableUnit) it.next();
-			Operand[] operands = new Operand[] {new Operand(createResolvedIU(doomed), null)};
-			engine.perform(profile, phaseSet, operands, null, new NullProgressMonitor());
+			InstallableUnitOperand[] operands = new InstallableUnitOperand[] {new InstallableUnitOperand(createResolvedIU(doomed), null)};
+			engine.perform(profile, phaseSet, operands, new NullProgressMonitor());
 		}
 		PhaseSet phaseSet = new DefaultPhaseSet();
 
-		Operand[] operands = new Operand[] {new Operand(null, createOSGiIU())};
-		IStatus result = engine.perform(profile, phaseSet, operands, null, new NullProgressMonitor());
+		InstallableUnitOperand[] operands = new InstallableUnitOperand[] {new InstallableUnitOperand(null, createOSGiIU())};
+		IStatus result = engine.perform(profile, phaseSet, operands, new NullProgressMonitor());
 		assertTrue(result.isOK());
 		Iterator ius = getInstallableUnits(profile);
 		assertTrue(ius.hasNext());
@@ -165,8 +165,8 @@ public class EngineTest extends AbstractProvisioningTest {
 		properties.put(Profile.PROP_INSTALL_FOLDER, testProvisioning.getAbsolutePath());
 		Profile profile = createProfile("testPerformUpdateOSGiFramework", null, properties);
 		PhaseSet phaseSet = new DefaultPhaseSet();
-		Operand[] operands = new Operand[] {new Operand(createOSGiIU(), createOSGiIU())};
-		IStatus result = engine.perform(profile, phaseSet, operands, null, new NullProgressMonitor());
+		InstallableUnitOperand[] operands = new InstallableUnitOperand[] {new InstallableUnitOperand(createOSGiIU(), createOSGiIU())};
+		IStatus result = engine.perform(profile, phaseSet, operands, new NullProgressMonitor());
 		assertTrue(result.isOK());
 		Iterator ius = getInstallableUnits(profile);
 		assertTrue(ius.hasNext());
@@ -179,8 +179,8 @@ public class EngineTest extends AbstractProvisioningTest {
 
 		Profile profile = createProfile("testPerformUninstallOSGiFramework", null, properties);
 		PhaseSet phaseSet = new DefaultPhaseSet();
-		Operand[] operands = new Operand[] {new Operand(createOSGiIU(), null)};
-		IStatus result = engine.perform(profile, phaseSet, operands, null, new NullProgressMonitor());
+		InstallableUnitOperand[] operands = new InstallableUnitOperand[] {new InstallableUnitOperand(createOSGiIU(), null)};
+		IStatus result = engine.perform(profile, phaseSet, operands, new NullProgressMonitor());
 		assertTrue(result.isOK());
 		assertEmptyProfile(profile);
 	}
@@ -195,8 +195,8 @@ public class EngineTest extends AbstractProvisioningTest {
 		Iterator ius = getInstallableUnits(profile);
 		assertFalse(ius.hasNext());
 
-		Operand[] operands = new Operand[] {new Operand(null, createOSGiIU()), new Operand(null, createBadIU())};
-		IStatus result = engine.perform(profile, phaseSet, operands, null, new NullProgressMonitor());
+		InstallableUnitOperand[] operands = new InstallableUnitOperand[] {new InstallableUnitOperand(null, createOSGiIU()), new InstallableUnitOperand(null, createBadIU())};
+		IStatus result = engine.perform(profile, phaseSet, operands, new NullProgressMonitor());
 		assertFalse(result.isOK());
 		ius = getInstallableUnits(profile);
 		//TODO Currently this test is failing. See bug 212058
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/InstallRegistryTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/InstallRegistryTest.java
index 047144c..3e0cf5a 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/InstallRegistryTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/InstallRegistryTest.java
@@ -58,9 +58,9 @@ public class InstallRegistryTest extends AbstractProvisioningTest {
 		Profile profile = createProfile("testProfile");
 		String profileId = profile.getProfileId();
 		assertEquals(0, getRegistrySize(profileId));
-		engine.perform(profile, phaseSet, new Operand[] {new Operand(null, createTestIU())}, null, new NullProgressMonitor());
+		engine.perform(profile, phaseSet, new InstallableUnitOperand[] {new InstallableUnitOperand(null, createTestIU())}, new NullProgressMonitor());
 		assertEquals(1, getRegistrySize(profileId));
-		engine.perform(profile, phaseSet, new Operand[] {new Operand(createTestIU(), null)}, null, new NullProgressMonitor());
+		engine.perform(profile, phaseSet, new InstallableUnitOperand[] {new InstallableUnitOperand(createTestIU(), null)}, new NullProgressMonitor());
 		assertEquals(0, getRegistrySize(profileId));
 		registry.getProfileInstallRegistries().remove(profile);
 	}
@@ -75,13 +75,13 @@ public class InstallRegistryTest extends AbstractProvisioningTest {
 		Profile profile = createProfile("testProfile");
 		String profileId = profile.getProfileId();
 		assertEquals(0, getRegistrySize(profileId));
-		engine.perform(profile, phaseSet, new Operand[] {new Operand(null, createTestIU())}, null, new NullProgressMonitor());
+		engine.perform(profile, phaseSet, new InstallableUnitOperand[] {new InstallableUnitOperand(null, createTestIU())}, new NullProgressMonitor());
 		assertEquals(1, getRegistrySize(profileId));
 
 		restart();
 
 		assertEquals(1, getRegistrySize(profileId));
-		engine.perform(profile, phaseSet, new Operand[] {new Operand(createTestIU(), null)}, null, new NullProgressMonitor());
+		engine.perform(profile, phaseSet, new InstallableUnitOperand[] {new InstallableUnitOperand(createTestIU(), null)}, new NullProgressMonitor());
 		assertEquals(0, getRegistrySize(profileId));
 		restart();
 		assertEquals(0, getRegistrySize(profileId));
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/PhaseSetTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/PhaseSetTest.java
index 42125f4..3c96bc8 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/PhaseSetTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/PhaseSetTest.java
@@ -43,8 +43,8 @@ public class PhaseSetTest extends AbstractProvisioningTest {
 		PhaseSet phaseSet = new PhaseSet(new Phase[] {}) {
 			// empty PhaseSet
 		};
-		Operand op = new Operand(createResolvedIU(createIU("iu")), null);
-		Operand[] operands = new Operand[] {op};
+		InstallableUnitOperand op = new InstallableUnitOperand(createResolvedIU(createIU("iu")), null);
+		InstallableUnitOperand[] operands = new InstallableUnitOperand[] {op};
 
 		IStatus result = phaseSet.perform(new EngineSession(profile), profile, operands, new NullProgressMonitor());
 		assertTrue(result.isOK());
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/PhaseTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/PhaseTest.java
index b3c660a..86ba581 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/PhaseTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/PhaseTest.java
@@ -53,15 +53,15 @@ public class PhaseTest extends AbstractProvisioningTest {
 			super(phaseId, weight);
 		}
 
-		protected ProvisioningAction[] getActions(Operand currentOperand) {
+		protected ProvisioningAction[] getActions(InstallableUnitOperand currentOperand) {
 			return null;
 		}
 
-		protected boolean isApplicable(Operand op) {
+		protected boolean isApplicable(InstallableUnitOperand op) {
 			return true;
 		}
 
-		protected IStatus completeOperand(Operand operand, Map parameters) {
+		protected IStatus completeOperand(InstallableUnitOperand operand, Map parameters) {
 			completeOperand = true;
 			return super.completeOperand(operand, parameters);
 		}
@@ -71,7 +71,7 @@ public class PhaseTest extends AbstractProvisioningTest {
 			return super.getAction(actionId);
 		}
 
-		protected IStatus initializeOperand(Profile profile, Operand operand, Map parameters, IProgressMonitor monitor) {
+		protected IStatus initializeOperand(Profile profile, InstallableUnitOperand operand, Map parameters, IProgressMonitor monitor) {
 			initializeOperand = true;
 			return super.initializeOperand(profile, operand, parameters, monitor);
 		}
@@ -149,7 +149,7 @@ public class PhaseTest extends AbstractProvisioningTest {
 		PhaseSet phaseSet = new TestPhaseSet();
 		Profile profile = createProfile("PhaseTest");
 
-		engine.perform(profile, phaseSet, new Operand[0], null, new NullProgressMonitor());
+		engine.perform(profile, phaseSet, new InstallableUnitOperand[0], new NullProgressMonitor());
 	}
 
 	public void testInitCompletePhase() {
@@ -175,14 +175,14 @@ public class PhaseTest extends AbstractProvisioningTest {
 		PhaseSet phaseSet = new TestPhaseSet(phase);
 		Profile profile = createProfile("PhaseTest");
 		IInstallableUnit unit = createIU("unit");
-		engine.perform(profile, phaseSet, new Operand[] {new Operand(null, unit)}, null, new NullProgressMonitor());
+		engine.perform(profile, phaseSet, new InstallableUnitOperand[] {new InstallableUnitOperand(null, unit)}, new NullProgressMonitor());
 		assertTrue(phase.initializePhase);
 		assertTrue(phase.completePhase);
 	}
 
 	public void testInitCompleteOperand() {
 		TestPhase phase = new TestPhase() {
-			protected IStatus completeOperand(Operand operand, Map parameters) {
+			protected IStatus completeOperand(InstallableUnitOperand operand, Map parameters) {
 				assertTrue(initializeOperand);
 				assertFalse(completeOperand);
 				super.completeOperand(operand, parameters);
@@ -191,7 +191,7 @@ public class PhaseTest extends AbstractProvisioningTest {
 				return null;
 			}
 
-			protected IStatus initializeOperand(Profile profile, Operand operand, Map parameters, IProgressMonitor monitor) {
+			protected IStatus initializeOperand(Profile profile, InstallableUnitOperand operand, Map parameters, IProgressMonitor monitor) {
 				assertFalse(initializeOperand);
 				assertFalse(completeOperand);
 				super.initializeOperand(profile, operand, parameters, monitor);
@@ -204,7 +204,7 @@ public class PhaseTest extends AbstractProvisioningTest {
 		Profile profile = createProfile("PhaseTest");
 		IInstallableUnit unit = createIU("testInitCompleteOperand");
 
-		engine.perform(profile, phaseSet, new Operand[] {new Operand(null, unit)}, null, new NullProgressMonitor());
+		engine.perform(profile, phaseSet, new InstallableUnitOperand[] {new InstallableUnitOperand(null, unit)}, new NullProgressMonitor());
 		assertTrue(phase.initializeOperand);
 		assertTrue(phase.completeOperand);
 	}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/TouchpointTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/TouchpointTest.java
index 874d2f6..552e6ff 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/TouchpointTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/TouchpointTest.java
@@ -38,7 +38,7 @@ public class TouchpointTest extends AbstractProvisioningTest {
 			testTouchpoint = this;
 		}
 
-		public IStatus completeOperand(Profile profile, String phaseId, Operand operand, Map parameters) {
+		public IStatus completeOperand(Profile profile, String phaseId, InstallableUnitOperand operand, Map parameters) {
 			completeOperand++;
 			return super.completeOperand(profile, phaseId, operand, parameters);
 		}
@@ -48,7 +48,7 @@ public class TouchpointTest extends AbstractProvisioningTest {
 			return super.completePhase(monitor, profile, phaseId, touchpointParameters);
 		}
 
-		public IStatus initializeOperand(Profile profile, String phaseId, Operand operand, Map parameters) {
+		public IStatus initializeOperand(Profile profile, String phaseId, InstallableUnitOperand operand, Map parameters) {
 			initializeOperand++;
 			return super.initializeOperand(profile, phaseId, operand, parameters);
 		}
@@ -68,7 +68,7 @@ public class TouchpointTest extends AbstractProvisioningTest {
 	}
 
 	public static class OperandTestTouchpoint extends TestTouchpoint {
-		public IStatus completeOperand(Profile profile, String phaseId, Operand operand, Map parameters) {
+		public IStatus completeOperand(Profile profile, String phaseId, InstallableUnitOperand operand, Map parameters) {
 			assertEquals(1, initializeOperand);
 			assertEquals(0, completeOperand);
 			super.completeOperand(profile, phaseId, operand, parameters);
@@ -77,7 +77,7 @@ public class TouchpointTest extends AbstractProvisioningTest {
 			return null;
 		}
 
-		public IStatus initializeOperand(Profile profile, String phaseId, Operand operand, Map parameters) {
+		public IStatus initializeOperand(Profile profile, String phaseId, InstallableUnitOperand operand, Map parameters) {
 			assertEquals(0, initializeOperand);
 			assertEquals(0, completeOperand);
 			super.initializeOperand(profile, phaseId, operand, parameters);
@@ -97,7 +97,7 @@ public class TouchpointTest extends AbstractProvisioningTest {
 			return null;
 		}
 
-		public IStatus initializePhase(IProgressMonitor monitor, Profile profile, String phaseId, Operand operand, Map parameters) {
+		public IStatus initializePhase(IProgressMonitor monitor, Profile profile, String phaseId, InstallableUnitOperand operand, Map parameters) {
 			assertEquals(0, initializePhase);
 			assertEquals(0, completePhase);
 			super.initializePhase(monitor, profile, phaseId, parameters);
@@ -131,7 +131,7 @@ public class TouchpointTest extends AbstractProvisioningTest {
 	public void testInitCompleteOperand() {
 		PhaseSet phaseSet = new TestPhaseSet();
 		Profile profile = createProfile("testProfile");
-		engine.perform(profile, phaseSet, new Operand[] {new Operand(null, createTestIU("operandTest"))}, null, new NullProgressMonitor());
+		engine.perform(profile, phaseSet, new InstallableUnitOperand[] {new InstallableUnitOperand(null, createTestIU("operandTest"))}, new NullProgressMonitor());
 		assertEquals(1, testTouchpoint.initializeOperand);
 		assertEquals(1, testTouchpoint.completeOperand);
 	}
@@ -139,7 +139,7 @@ public class TouchpointTest extends AbstractProvisioningTest {
 	public void testInitCompletePhase() {
 		PhaseSet phaseSet = new TestPhaseSet();
 		Profile profile = createProfile("testProfile");
-		engine.perform(profile, phaseSet, new Operand[] {new Operand(null, createTestIU("phaseTest"))}, null, new NullProgressMonitor());
+		engine.perform(profile, phaseSet, new InstallableUnitOperand[] {new InstallableUnitOperand(null, createTestIU("phaseTest"))}, new NullProgressMonitor());
 		assertEquals(1, testTouchpoint.initializeOperand);
 		assertEquals(1, testTouchpoint.completeOperand);
 	}
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
index fed1a00..1dc74be 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
@@ -160,7 +160,7 @@ public class EclipseTouchpoint extends Touchpoint {
 			return new ProvisioningAction() {
 				public IStatus execute(Map parameters) {
 					Profile profile = (Profile) parameters.get(PARM_PROFILE);
-					Operand operand = (Operand) parameters.get(PARM_OPERAND);
+					InstallableUnitOperand operand = (InstallableUnitOperand) parameters.get(PARM_OPERAND);
 					IArtifactRequest[] requests = collect(operand.second(), profile);
 
 					Collection artifactRequests = (Collection) parameters.get(PARM_ARTIFACT_REQUESTS);
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/NativeTouchpoint.java b/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/NativeTouchpoint.java
index faa987b..92ce4d3 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/NativeTouchpoint.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/NativeTouchpoint.java
@@ -35,7 +35,7 @@ public class NativeTouchpoint extends Touchpoint {
 			return new ProvisioningAction() {
 				public IStatus execute(Map parameters) {
 					Profile profile = (Profile) parameters.get("profile");
-					Operand operand = (Operand) parameters.get("operand");
+					InstallableUnitOperand operand = (InstallableUnitOperand) parameters.get("operand");
 					try {
 						IArtifactRequest[] requests = collect(operand.second(), profile);
 						Collection artifactRequests = (Collection) parameters.get("artifactRequests");
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
index 1188eea..99fccc5 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
@@ -207,7 +207,7 @@ public class ProvisioningUtil {
 	 */
 	public static Sizing getSizeInfo(ProvisioningPlan plan, String profileId, IProgressMonitor monitor) throws ProvisionException {
 		SizingPhaseSet set = new SizingPhaseSet();
-		IStatus status = getEngine().perform(getProfile(profileId), set, plan.getOperands(), plan.getPropertyOperands(), monitor);
+		IStatus status = getEngine().perform(getProfile(profileId), set, plan.getOperands(), monitor);
 		if (status.isOK())
 			return set.getSizing();
 		return null;
@@ -219,7 +219,7 @@ public class ProvisioningUtil {
 			set = new DefaultPhaseSet();
 		else
 			set = phaseSet;
-		return getEngine().perform(profile, set, plan.getOperands(), plan.getPropertyOperands(), monitor);
+		return getEngine().perform(profile, set, plan.getOperands(), monitor);
 	}
 
 	private static Engine getEngine() throws ProvisionException {

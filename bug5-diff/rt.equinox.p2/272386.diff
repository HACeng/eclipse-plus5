commit bfb8bded3741a2c31425aa4714f1df86c10ebc03
Author: John Arthorne <johna>
Date:   Thu Apr 16 18:13:52 2009 +0000

    Bug 272386 Memory use of Version objects

3	1	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/Version.java
3	1	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/Version.java
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/Version.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/Version.java
index 1b44e7c..fe21903 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/Version.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/Version.java
@@ -369,7 +369,9 @@ public class Version extends VersionVector {
 	void init(Comparable[] vec, Comparable pad, VersionFormat fmt, String orig) {
 		init(vec, pad);
 		format = fmt;
-		original = orig;
+		//don't need to retain original for OSGi version
+		if (fmt != VersionFormat.OSGI_FORMAT)
+			original = orig;
 	}
 
 	private int getIntElement(int i) {
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/Version.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/Version.java
index 1b44e7c..fe21903 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/Version.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/Version.java
@@ -369,7 +369,9 @@ public class Version extends VersionVector {
 	void init(Comparable[] vec, Comparable pad, VersionFormat fmt, String orig) {
 		init(vec, pad);
 		format = fmt;
-		original = orig;
+		//don't need to retain original for OSGi version
+		if (fmt != VersionFormat.OSGI_FORMAT)
+			original = orig;
 	}
 
 	private int getIntElement(int i) {
commit 5c633128990d30eef6ee73df6b87404ff3a25199
Author: John Arthorne <johna>
Date:   Wed Apr 22 21:27:24 2009 +0000

    Bug 272386 Memory use of Version objects

2	0	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/Messages.java
64	9	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/Version.java
1	0	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/messages.properties
2	0	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/Messages.java
64	9	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/Version.java
1	0	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/messages.properties
1	2	bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/internal/p2/persistence/XMLParser.java
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/Messages.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/Messages.java
index f0d1fa8..74224a5 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/Messages.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/Messages.java
@@ -19,6 +19,8 @@ public class Messages extends NLS {
 
 	public static String _0_is_not_a_valid_qualifier_in_osgi_1;
 
+	public static String _0_is_not_an_osgi_version;
+
 	public static String array_can_not_be_empty;
 
 	public static String array_can_not_have_character_group;
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/Version.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/Version.java
index fe21903..9a94911 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/Version.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/Version.java
@@ -75,6 +75,39 @@ public class Version extends VersionVector {
 	private static final long serialVersionUID = 8202715438560849928L;
 
 	/**
+	 * Creates an OSGi version identifier from the specified numerical components.
+	 * 
+	 * <p>
+	 * The qualifier is set to the empty string.
+	 * 
+	 * @param major Major component of the version identifier.
+	 * @param minor Minor component of the version identifier.
+	 * @param micro Micro component of the version identifier.
+	 * @throws IllegalArgumentException If the numerical components are
+	 *         negative.
+	 */
+	public static Version createOSGi(int major, int minor, int micro) {
+		return createOSGi(major, minor, micro, null);
+	}
+
+	/**
+	 * Creates an OSGi version identifier from the specified components.
+	 * 
+	 * @param major Major component of the version identifier.
+	 * @param minor Minor component of the version identifier.
+	 * @param micro Micro component of the version identifier.
+	 * @param qualifier Qualifier component of the version identifier. If
+	 *        <code>null</code> is specified, then the qualifier will be set to
+	 *        the empty string.
+	 * @throws IllegalArgumentException If the numerical components are negative
+	 *         or the qualifier string is invalid.
+	 */
+	public static Version createOSGi(int major, int minor, int micro, String qualifier) {
+		// TODO: Eliminate duplicates
+		return new Version(major, minor, micro, qualifier);
+	}
+
+	/**
 	 * Create an omni version from an OSGi <code>version</code>.
 	 * @param version The OSGi version. Can be <code>null</code>.
 	 * @return The created omni version
@@ -90,25 +123,44 @@ public class Version extends VersionVector {
 	/**
 	 * Parses a version identifier from the specified string.
 	 * 
-	 * <p>
-	 * See {@link #Version(String)} for the format of the version string.
-	 * 
 	 * @param version String representation of the version identifier. Leading
 	 *        and trailing whitespace will be ignored.
-	 * @return A <code>Version</code> object representing the version
-	 *         identifier. If <code>version</code> is <code>null</code> or
-	 *         the empty string then <code>emptyVersion</code> will be
-	 *         returned.
+	 * @return A <code>Version</code> object representing the version identifier
+	 *         or <code>null</code> if <code>version</code> is <code>null</code> or
+	 *         an empty string.
 	 * @throws IllegalArgumentException If <code>version</code> is improperly
 	 *         formatted.
 	 */
-	public static Version parseVersion(String version) {
+	public static Version create(String version) {
+		// TODO: Eliminate duplicates
 		if (version != null) {
 			Version v = new Version();
 			if (VersionParser.parseInto(version, 0, version.length(), v))
 				return v;
 		}
-		return Version.emptyVersion;
+		return null;
+	}
+
+	/**
+	 * Parses a version identifier from the specified string. This method is for backward
+	 * compatibility with OSGi and will return the OSGi {@link #emptyVersion} when
+	 * the provided string is empty or <code>null</code>.
+	 * 
+	 * @param version String representation of the version identifier. Leading
+	 *        and trailing whitespace will be ignored.
+	 * @return A <code>Version</code> object representing the version
+	 *         identifier. If <code>version</code> is <code>null</code> or
+	 *         the empty string then the OSGi <code>emptyVersion</code> will be
+	 *         returned.
+	 * @throws IllegalArgumentException If <code>version</code> is improperly
+	 *         formatted.
+	 * @see #create(String)
+	 */
+	public static Version parseVersion(String version) {
+		if (version == null || version.length() == 0 || "0.0.0".equals(version)) //$NON-NLS-1$
+			return emptyVersion;
+		Version v = create(version);
+		return v == null ? emptyVersion : v;
 	}
 
 	/**
@@ -170,6 +222,7 @@ public class Version extends VersionVector {
 	 * @param micro Micro component of the version identifier.
 	 * @throws IllegalArgumentException If the numerical components are
 	 *         negative.
+	 * @deprecated Use {@link #createOSGi(int, int, int)}. This constructor will not remain public
 	 */
 	public Version(int major, int minor, int micro) {
 		this(major, minor, micro, null);
@@ -186,6 +239,7 @@ public class Version extends VersionVector {
 	 *        the empty string.
 	 * @throws IllegalArgumentException If the numerical components are negative
 	 *         or the qualifier string is invalid.
+	 * @deprecated Use {@link #createOSGi(int, int, int, String)}. This constructor will not remain public
 	 */
 	public Version(int major, int minor, int micro, String qualifier) {
 		if (qualifier != null && qualifier.length() == 0)
@@ -206,6 +260,7 @@ public class Version extends VersionVector {
 	 * @param version String representation of the version identifier.
 	 * @throws IllegalArgumentException If <code>version</code> is improperly
 	 *         formatted.
+	 * @deprecated Use {@link #parseVersion(String)}. This constructor will not remain public
 	 */
 	public Version(String version) {
 		if (!VersionParser.parseInto(version, 0, version.length(), this)) {
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/messages.properties b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/messages.properties
index 9f46d1e..dd2f51b 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/messages.properties
@@ -11,6 +11,7 @@
 _0_is_not_a_positive_integer_in_osgi_1=The {0} value is not a positive in OSGi version: "{1}"
 _0_is_not_a_string_in_osgi_1=The {0} value is not a string in OSGi version: "{1}"
 _0_is_not_a_valid_qualifier_in_osgi_1=The {0} value is invalid in OSGi version: "{1}"array_can_not_be_empty=Array format can not be empty
+_0_is_not_an_osgi_version=The string "{0}" does not represent an OSGi version
 array_can_not_be_empty=Array format can not be empty
 array_can_not_have_character_group=Array format can not have a character group
 auto_can_not_have_pad_value=Auto format can not have a pad value
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/Messages.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/Messages.java
index f0d1fa8..74224a5 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/Messages.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/Messages.java
@@ -19,6 +19,8 @@ public class Messages extends NLS {
 
 	public static String _0_is_not_a_valid_qualifier_in_osgi_1;
 
+	public static String _0_is_not_an_osgi_version;
+
 	public static String array_can_not_be_empty;
 
 	public static String array_can_not_have_character_group;
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/Version.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/Version.java
index fe21903..9a94911 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/Version.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/Version.java
@@ -75,6 +75,39 @@ public class Version extends VersionVector {
 	private static final long serialVersionUID = 8202715438560849928L;
 
 	/**
+	 * Creates an OSGi version identifier from the specified numerical components.
+	 * 
+	 * <p>
+	 * The qualifier is set to the empty string.
+	 * 
+	 * @param major Major component of the version identifier.
+	 * @param minor Minor component of the version identifier.
+	 * @param micro Micro component of the version identifier.
+	 * @throws IllegalArgumentException If the numerical components are
+	 *         negative.
+	 */
+	public static Version createOSGi(int major, int minor, int micro) {
+		return createOSGi(major, minor, micro, null);
+	}
+
+	/**
+	 * Creates an OSGi version identifier from the specified components.
+	 * 
+	 * @param major Major component of the version identifier.
+	 * @param minor Minor component of the version identifier.
+	 * @param micro Micro component of the version identifier.
+	 * @param qualifier Qualifier component of the version identifier. If
+	 *        <code>null</code> is specified, then the qualifier will be set to
+	 *        the empty string.
+	 * @throws IllegalArgumentException If the numerical components are negative
+	 *         or the qualifier string is invalid.
+	 */
+	public static Version createOSGi(int major, int minor, int micro, String qualifier) {
+		// TODO: Eliminate duplicates
+		return new Version(major, minor, micro, qualifier);
+	}
+
+	/**
 	 * Create an omni version from an OSGi <code>version</code>.
 	 * @param version The OSGi version. Can be <code>null</code>.
 	 * @return The created omni version
@@ -90,25 +123,44 @@ public class Version extends VersionVector {
 	/**
 	 * Parses a version identifier from the specified string.
 	 * 
-	 * <p>
-	 * See {@link #Version(String)} for the format of the version string.
-	 * 
 	 * @param version String representation of the version identifier. Leading
 	 *        and trailing whitespace will be ignored.
-	 * @return A <code>Version</code> object representing the version
-	 *         identifier. If <code>version</code> is <code>null</code> or
-	 *         the empty string then <code>emptyVersion</code> will be
-	 *         returned.
+	 * @return A <code>Version</code> object representing the version identifier
+	 *         or <code>null</code> if <code>version</code> is <code>null</code> or
+	 *         an empty string.
 	 * @throws IllegalArgumentException If <code>version</code> is improperly
 	 *         formatted.
 	 */
-	public static Version parseVersion(String version) {
+	public static Version create(String version) {
+		// TODO: Eliminate duplicates
 		if (version != null) {
 			Version v = new Version();
 			if (VersionParser.parseInto(version, 0, version.length(), v))
 				return v;
 		}
-		return Version.emptyVersion;
+		return null;
+	}
+
+	/**
+	 * Parses a version identifier from the specified string. This method is for backward
+	 * compatibility with OSGi and will return the OSGi {@link #emptyVersion} when
+	 * the provided string is empty or <code>null</code>.
+	 * 
+	 * @param version String representation of the version identifier. Leading
+	 *        and trailing whitespace will be ignored.
+	 * @return A <code>Version</code> object representing the version
+	 *         identifier. If <code>version</code> is <code>null</code> or
+	 *         the empty string then the OSGi <code>emptyVersion</code> will be
+	 *         returned.
+	 * @throws IllegalArgumentException If <code>version</code> is improperly
+	 *         formatted.
+	 * @see #create(String)
+	 */
+	public static Version parseVersion(String version) {
+		if (version == null || version.length() == 0 || "0.0.0".equals(version)) //$NON-NLS-1$
+			return emptyVersion;
+		Version v = create(version);
+		return v == null ? emptyVersion : v;
 	}
 
 	/**
@@ -170,6 +222,7 @@ public class Version extends VersionVector {
 	 * @param micro Micro component of the version identifier.
 	 * @throws IllegalArgumentException If the numerical components are
 	 *         negative.
+	 * @deprecated Use {@link #createOSGi(int, int, int)}. This constructor will not remain public
 	 */
 	public Version(int major, int minor, int micro) {
 		this(major, minor, micro, null);
@@ -186,6 +239,7 @@ public class Version extends VersionVector {
 	 *        the empty string.
 	 * @throws IllegalArgumentException If the numerical components are negative
 	 *         or the qualifier string is invalid.
+	 * @deprecated Use {@link #createOSGi(int, int, int, String)}. This constructor will not remain public
 	 */
 	public Version(int major, int minor, int micro, String qualifier) {
 		if (qualifier != null && qualifier.length() == 0)
@@ -206,6 +260,7 @@ public class Version extends VersionVector {
 	 * @param version String representation of the version identifier.
 	 * @throws IllegalArgumentException If <code>version</code> is improperly
 	 *         formatted.
+	 * @deprecated Use {@link #parseVersion(String)}. This constructor will not remain public
 	 */
 	public Version(String version) {
 		if (!VersionParser.parseInto(version, 0, version.length(), this)) {
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/messages.properties b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/messages.properties
index 9f46d1e..dd2f51b 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/messages.properties
@@ -11,6 +11,7 @@
 _0_is_not_a_positive_integer_in_osgi_1=The {0} value is not a positive in OSGi version: "{1}"
 _0_is_not_a_string_in_osgi_1=The {0} value is not a string in OSGi version: "{1}"
 _0_is_not_a_valid_qualifier_in_osgi_1=The {0} value is invalid in OSGi version: "{1}"array_can_not_be_empty=Array format can not be empty
+_0_is_not_an_osgi_version=The string "{0}" does not represent an OSGi version
 array_can_not_be_empty=Array format can not be empty
 array_can_not_have_character_group=Array format can not have a character group
 auto_can_not_have_pad_value=Auto format can not have a pad value
diff --git a/bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/internal/p2/persistence/XMLParser.java b/bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/internal/p2/persistence/XMLParser.java
index 141dc31..daf67a1 100644
--- a/bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/internal/p2/persistence/XMLParser.java
+++ b/bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/internal/p2/persistence/XMLParser.java
@@ -670,8 +670,7 @@ public abstract class XMLParser extends DefaultHandler implements XMLConstants {
 	 */
 	public Version checkVersion(String element, String attribute, String value) {
 		try {
-			if (value != null && !value.equals("0.0.0")) //$NON-NLS-1$
-				return new Version(value);
+			return Version.parseVersion(value);
 		} catch (IllegalArgumentException iae) {
 			invalidAttributeValue(element, attribute, value);
 		} catch (NullPointerException npe) {

commit e900a2f7de2be5612ba338b70ad8c22574e1b07c
Author: John Arthorne <johna>
Date:   Thu Jan 3 18:13:41 2008 +0000

    Bug 212644 [prov] Unfriendly error message on install failure

38	26	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/Messages.java
3	3	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ParameterizedProvisioningAction.java
1	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
6	6	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/TouchpointManager.java
11	0	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/messages.properties
7	5	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Engine.java
13	15	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Phase.java
8	3	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Collect.java
9	4	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Configure.java
27	22	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Install.java
0	35	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Messages.java
9	4	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Sizing.java
10	4	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Unconfigure.java
26	21	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Uninstall.java
0	19	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/messages.properties
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/Messages.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/Messages.java
index fc251d8..284bc72 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/Messages.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/Messages.java
@@ -15,41 +15,53 @@ import org.eclipse.osgi.util.NLS;
 public class Messages extends NLS {
 	private static final String BUNDLE_NAME = "org.eclipse.equinox.internal.p2.engine.messages"; //$NON-NLS-1$
 
-	static {
-		// initialize resource bundles
-		NLS.initializeMessages(BUNDLE_NAME, Messages.class);
-	}
-
-	private Messages() {
-		// Do not instantiate
-	}
-
 	public static String Engine_Error_During_Phase;
 	public static String Engine_Operation_Canceled_By_User;
-	public static String TouchpointManager_Null_Touchpoint_Type_Argument;
-	public static String TouchpointManager_Required_Touchpoint_Not_Found;
-	public static String TouchpointManager_No_Extension_Point;
-	public static String TouchpointManager_Incorrectly_Named_Extension;
-	public static String TouchpointManager_Attribute_Not_Specified;
-	public static String TouchpointManager_Conflicting_Touchpoint_Types;
-	public static String TouchpointManager_Touchpoint_Type_Mismatch;
-	public static String TouchpointManager_Exception_Creating_Touchpoint_Extension;
-	public static String TouchpointManager_Null_Creating_Touchpoint_Extension;
+
 	public static String Install_Operand_Description;
-	public static String Update_Operand_Description;
-	public static String Uninstall_Operand_Description;
+	public static String InstallRegistry_Parser_Error_Parsing_Registry;
+	public static String InstallRegistry_Parser_Has_Incompatible_Version;
 
+	public static String Phase_Collect_Error;
+	public static String Phase_Configure_Error;
+	public static String Phase_Configure_Task;
+	public static String Phase_Error;
+	public static String Phase_Install_Error;
+	public static String Phase_Install_Task;
+	public static String Phase_Sizing_Error;
+	public static String Phase_Unconfigure_Error;
+	public static String Phase_Uninstall_Error;
+
+	public static String Profile_Duplicate_Child_Profile_Id;
+	public static String Profile_Duplicate_Root_Profile_Id;
 	public static String Profile_Not_Named_Self;
 	public static String Profile_Null_Profile_Id;
-	public static String Profile_Duplicate_Root_Profile_Id;
-	public static String Profile_Duplicate_Child_Profile_Id;
 
-	public static String SimpleProfileRegistry_Parser_Has_Incompatible_Version;
+	public static String SimpleProfileRegistry_Cannot_Create_File_Error;
 	public static String SimpleProfileRegistry_Parser_Error_Parsing_Registry;
+	public static String SimpleProfileRegistry_Parser_Has_Incompatible_Version;
 	public static String SimpleProfileRegistry_Persist_To_Non_File_URL_Error;
-	public static String SimpleProfileRegistry_Cannot_Create_File_Error;
 
-	public static String InstallRegistry_Parser_Error_Parsing_Registry;
-	public static String InstallRegistry_Parser_Has_Incompatible_Version;
+	public static String TouchpointManager_Attribute_Not_Specified;
+	public static String TouchpointManager_Conflicting_Touchpoint_Types;
+	public static String TouchpointManager_Exception_Creating_Touchpoint_Extension;
+	public static String TouchpointManager_Incorrectly_Named_Extension;
+	public static String TouchpointManager_No_Extension_Point;
+	public static String TouchpointManager_Null_Creating_Touchpoint_Extension;
+	public static String TouchpointManager_Null_Touchpoint_Type_Argument;
+	public static String TouchpointManager_Required_Touchpoint_Not_Found;
+	public static String TouchpointManager_Touchpoint_Type_Mismatch;
+
+	public static String Uninstall_Operand_Description;
+	public static String Update_Operand_Description;
+
+	static {
+		// initialize resource bundles
+		NLS.initializeMessages(BUNDLE_NAME, Messages.class);
+	}
+
+	private Messages() {
+		// Do not instantiate
+	}
 
 }
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ParameterizedProvisioningAction.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ParameterizedProvisioningAction.java
index 7053190..cf0e573 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ParameterizedProvisioningAction.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ParameterizedProvisioningAction.java
@@ -12,7 +12,7 @@ public class ParameterizedProvisioningAction extends ProvisioningAction {
 
 	public ParameterizedProvisioningAction(ProvisioningAction action, Map actionParameters) {
 		if (action == null || actionParameters == null)
-			throw new IllegalArgumentException("Both action and action pararameters must not be null.");
+			throw new IllegalArgumentException("Both action and action pararameters must not be null."); //$NON-NLS-1$
 		this.action = action;
 		this.actionParameters = actionParameters;
 	}
@@ -40,11 +40,11 @@ public class ParameterizedProvisioningAction extends ProvisioningAction {
 
 	private String processVariables(String parameterValue, Map parameters) {
 
-		int variableBeginIndex = parameterValue.indexOf("${");
+		int variableBeginIndex = parameterValue.indexOf("${"); //$NON-NLS-1$
 		if (variableBeginIndex == -1)
 			return parameterValue;
 
-		int variableEndIndex = parameterValue.indexOf("}", variableBeginIndex + 2);
+		int variableEndIndex = parameterValue.indexOf('}', variableBeginIndex + 2);
 		if (variableEndIndex == -1)
 			return parameterValue;
 
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
index e60d5dd..8877aa2 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
@@ -104,7 +104,7 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 		if (SELF.equals(id))
 			id = self;
 		if (profiles.get(id) == null)
-			throw new IllegalArgumentException("Profile to be updated does not exist:" + id);
+			throw new IllegalArgumentException("Profile to be updated does not exist:" + id); //$NON-NLS-1$
 		doUpdateProfile(toUpdate);
 		broadcastChangeEvent(toUpdate, ProfileEvent.CHANGED);
 	}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/TouchpointManager.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/TouchpointManager.java
index 34f81b7..60052f1 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/TouchpointManager.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/TouchpointManager.java
@@ -63,12 +63,12 @@ public class TouchpointManager implements IRegistryChangeListener {
 			if (!createdExtension) {
 				String id = element.getAttribute(ATTRIBUTE_TYPE);
 				try {
-					Touchpoint touchpoint = (Touchpoint) element.createExecutableExtension(ATTRIBUTE_CLASS);
-					if (touchpoint != null) {
-						if (!id.equals(touchpoint.getTouchpointType().getId())) {
-							reportError(NLS.bind(Messages.TouchpointManager_Touchpoint_Type_Mismatch, id, touchpoint.getTouchpointType().getId()), null);
+					Touchpoint touchpointInstance = (Touchpoint) element.createExecutableExtension(ATTRIBUTE_CLASS);
+					if (touchpointInstance != null) {
+						if (!id.equals(touchpointInstance.getTouchpointType().getId())) {
+							reportError(NLS.bind(Messages.TouchpointManager_Touchpoint_Type_Mismatch, id, touchpointInstance.getTouchpointType().getId()), null);
 						}
-						this.touchpoint = touchpoint;
+						this.touchpoint = touchpointInstance;
 					} else {
 						String errorMsg = NLS.bind(Messages.TouchpointManager_Null_Creating_Touchpoint_Extension, id);
 						throw new CoreException(new Status(IStatus.ERROR, EngineActivator.ID, 1, errorMsg, null));
@@ -204,7 +204,7 @@ public class TouchpointManager implements IRegistryChangeListener {
 		return status;
 	}
 
-	private static void reportError(String errorMsg, MultiStatus status) {
+	static void reportError(String errorMsg, MultiStatus status) {
 		Status errorStatus = new Status(IStatus.ERROR, EngineActivator.ID, 1, errorMsg, null);
 		if (status != null && !status.isOK())
 			status.add(errorStatus);
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/messages.properties b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/messages.properties
index a2c2f1e..b4a6673 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/messages.properties
@@ -26,6 +26,17 @@ Install_Operand_Description=Installing unit {0}.
 Update_Operand_Description=Updating unit {0} with unit {1}.
 Uninstall_Operand_Description=Removing unit {0}.
 
+Phase_Collect_Error=An error occurred while collecting items to be installed
+Phase_Configure_Error=An error occurred while configuring the installed items
+Phase_Configure_Task=Configuring {0}
+Phase_Error=An error occurred during provisioning
+Phase_Install_Error=An error occurred while installing the items
+Phase_Install_Task=Installing {0}
+Phase_Sizing_Error=An error occurred while computing the size of the items to be installed
+Phase_Unconfigure_Error=An error occurred while unconfiguring the items to uninstall
+Phase_Uninstall_Error=An error occurred while uninstalling
+
+
 Profile_Not_Named_Self=Can't have a profile named: {0}.
 Profile_Null_Profile_Id=A profile must have an non-empty id.
 Profile_Duplicate_Root_Profile_Id=Adding a profile with duplicate id: {0}.
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Engine.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Engine.java
index 5f2979c..dcb848d 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Engine.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Engine.java
@@ -26,7 +26,7 @@ public class Engine {
 		this.eventBus = eventBus;
 	}
 
-	public MultiStatus perform(Profile profile, PhaseSet phaseSet, Operand[] operands, IProgressMonitor monitor) {
+	public IStatus perform(Profile profile, PhaseSet phaseSet, Operand[] operands, IProgressMonitor monitor) {
 
 		// TODO -- Messages
 		if (profile == null)
@@ -42,7 +42,7 @@ public class Engine {
 			monitor = new NullProgressMonitor();
 
 		if (operands.length == 0)
-			return new MultiStatus(EngineActivator.ID, IStatus.OK, null, null);
+			return Status.OK_STATUS;
 
 		lockProfile(profile);
 		try {
@@ -67,14 +67,16 @@ public class Engine {
 				eventBus.publishEvent(new RollbackOperationEvent(profile, phaseSet, operands, this, result));
 				session.rollback();
 			}
-			return result;
+			//if there is only one child status, return that status instead because it will have more context
+			IStatus[] children = result.getChildren();
+			return children.length == 1 ? children[0] : result;
 		} finally {
 			unlockProfile(profile);
 		}
 	}
 
-   //Support to move the IU properties as part of the engine. This is not really clean. We will have to review this.
-   //This has to be done in two calls because when we return from the phaseSet.perform the iu properties are already lost
+	//Support to move the IU properties as part of the engine. This is not really clean. We will have to review this.
+	//This has to be done in two calls because when we return from the phaseSet.perform the iu properties are already lost
 	Map snapshot = new HashMap();
 
 	private void snapshotIUProperties(Profile profile, Operand[] operands) {
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Phase.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Phase.java
index 0f93049..00ed19b 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Phase.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Phase.java
@@ -24,33 +24,23 @@ public abstract class Phase {
 	private static final String PROFILE = "profile"; //$NON-NLS-1$
 	protected final String phaseId;
 	protected final int weight;
-	protected final String phaseName;
 	protected int prePerformWork = 1000;
 	protected int mainPerformWork = 10000;
 	protected int postPerformWork = 1000;
 	private Map phaseParameters;
 	private Map touchpointToTouchpointParameters;
 
-	protected Phase(String phaseId, int weight, String phaseName) {
-		if (phaseId == null || phaseId.length() == 0) {
+	protected Phase(String phaseId, int weight) {
+		if (phaseId == null || phaseId.length() == 0)
 			throw new IllegalArgumentException("Phase id must be set."); //$NON-NLS-1$
-		}
-
-		if (weight <= 0) {
+		if (weight <= 0)
 			throw new IllegalArgumentException("Phase weight must be positive."); //$NON-NLS-1$
-		}
-
-		if (phaseName == null || phaseName.length() == 0) {
-			throw new IllegalArgumentException("Phase name must be set."); //$NON-NLS-1$
-		}
-
 		this.weight = weight;
-		this.phaseName = phaseName;
 		this.phaseId = phaseId;
 	}
 
 	public String toString() {
-		return "Phase: " + this.phaseName + " - " + this.weight; //$NON-NLS-1$ //$NON-NLS-2$
+		return getClass().getName() + " - " + this.weight; //$NON-NLS-1$
 	}
 
 	public final MultiStatus perform(EngineSession session, Profile profile, Operand[] operands, IProgressMonitor monitor) {
@@ -61,7 +51,7 @@ public abstract class Phase {
 			result.merge(status);
 			return result;
 		} else if (status.matches(IStatus.ERROR)) {
-			MultiStatus result = new MultiStatus(EngineActivator.ID, IStatus.CANCEL, NLS.bind(Messages.Engine_Error_During_Phase, this.phaseName), null);
+			MultiStatus result = new MultiStatus(EngineActivator.ID, IStatus.CANCEL, getProblemMessage(), null);
 			result.merge(status);
 			return result;
 		}
@@ -237,6 +227,14 @@ public abstract class Phase {
 	protected abstract ProvisioningAction[] getActions(Operand currentOperand);
 
 	/**
+	 * Returns a human-readable message to be displayed in case of an error performing
+	 * this phase. Subclasses should override.
+	 */
+	protected String getProblemMessage() {
+		return Messages.Phase_Error;
+	}
+
+	/**
 	 * Returns the touchpoint corresponding to the operand, or null if no corresponding
 	 * touchpoint is available.
 	 */
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Collect.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Collect.java
index c4212b0..b55a77f 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Collect.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Collect.java
@@ -11,6 +11,7 @@ package org.eclipse.equinox.p2.engine.phases;
 import java.util.*;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.IStatus;
+import org.eclipse.equinox.internal.p2.engine.Messages;
 import org.eclipse.equinox.p2.artifact.repository.IArtifactRequest;
 import org.eclipse.equinox.p2.download.DownloadManager;
 import org.eclipse.equinox.p2.engine.*;
@@ -22,7 +23,7 @@ public class Collect extends Phase {
 	private static final String PHASE_ID = "collect"; //$NON-NLS-1$
 
 	public Collect(int weight) {
-		super(PHASE_ID, weight, Messages.Engine_Collect_Phase);
+		super(PHASE_ID, weight);
 		//re-balance work since postPerform will do almost all the time-consuming work
 		prePerformWork = 0;
 		mainPerformWork = 100;
@@ -38,8 +39,12 @@ public class Collect extends Phase {
 		return new ProvisioningAction[] {action};
 	}
 
+	protected String getProblemMessage() {
+		return Messages.Phase_Collect_Error;
+	}
+
 	protected IStatus completePhase(IProgressMonitor monitor, Profile profile, Map parameters) {
-		List artifactRequests = (List) parameters.get("artifactRequests");
+		List artifactRequests = (List) parameters.get("artifactRequests"); //$NON-NLS-1$
 
 		DownloadManager dm = new DownloadManager();
 		for (Iterator it = artifactRequests.iterator(); it.hasNext();) {
@@ -50,7 +55,7 @@ public class Collect extends Phase {
 	}
 
 	protected IStatus initializePhase(IProgressMonitor monitor, Profile profile, Map parameters) {
-		parameters.put("artifactRequests", new ArrayList());
+		parameters.put("artifactRequests", new ArrayList()); //$NON-NLS-1$
 		return null;
 	}
 }
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Configure.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Configure.java
index 6af1fe9..afa1072 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Configure.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Configure.java
@@ -10,6 +10,7 @@ package org.eclipse.equinox.p2.engine.phases;
 
 import java.util.Map;
 import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.internal.p2.engine.Messages;
 import org.eclipse.equinox.p2.engine.*;
 import org.eclipse.equinox.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
@@ -18,7 +19,7 @@ import org.eclipse.osgi.util.NLS;
 public class Configure extends Phase {
 
 	public Configure(int weight) {
-		super("configure", weight, Messages.Engine_Configure_Phase);
+		super("configure", weight); //$NON-NLS-1$
 	}
 
 	protected boolean isApplicable(Operand op) {
@@ -32,14 +33,18 @@ public class Configure extends Phase {
 		return getActions(unit, phaseId);
 	}
 
+	protected String getProblemMessage() {
+		return Messages.Phase_Configure_Error;
+	}
+
 	protected IStatus initializeOperand(Profile profile, Operand operand, Map parameters, IProgressMonitor monitor) {
 		IInstallableUnit iu = operand.second();
-		monitor.subTask(NLS.bind("Configuring {0}", iu.getId()));
-		parameters.put("iu", iu);
+		monitor.subTask(NLS.bind(Messages.Phase_Configure_Task, iu.getId()));
+		parameters.put("iu", iu); //$NON-NLS-1$
 
 		IArtifactKey[] artifacts = iu.getArtifacts();
 		if (artifacts != null && artifacts.length > 0)
-			parameters.put("artifact", artifacts[0]);
+			parameters.put("artifact", artifacts[0]); //$NON-NLS-1$
 
 		return Status.OK_STATUS;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Install.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Install.java
index d77a22f..a21b594 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Install.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Install.java
@@ -14,6 +14,7 @@ import java.util.Map;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.engine.EngineActivator;
+import org.eclipse.equinox.internal.p2.engine.Messages;
 import org.eclipse.equinox.p2.core.eventbus.ProvisioningEventBus;
 import org.eclipse.equinox.p2.engine.*;
 import org.eclipse.equinox.p2.metadata.IArtifactKey;
@@ -24,20 +25,20 @@ public class Install extends Phase {
 
 	final static class BeforeInstallEventAction extends ProvisioningAction {
 		public IStatus execute(Map parameters) {
-			Profile profile = (Profile) parameters.get("profile");
-			String phaseId = (String) parameters.get("phaseId");
-			Touchpoint touchpoint = (Touchpoint) parameters.get("touchpoint");
-			Operand operand = (Operand) parameters.get("operand");
+			Profile profile = (Profile) parameters.get("profile"); //$NON-NLS-1$
+			String phaseId = (String) parameters.get("phaseId"); //$NON-NLS-1$
+			Touchpoint touchpoint = (Touchpoint) parameters.get("touchpoint"); //$NON-NLS-1$
+			Operand operand = (Operand) parameters.get("operand"); //$NON-NLS-1$
 			((ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName())).publishEvent(new InstallableUnitEvent(phaseId, true, profile, operand, InstallableUnitEvent.INSTALL, touchpoint));
 			return null;
 		}
 
 		public IStatus undo(Map parameters) {
-			Profile profile = (Profile) parameters.get("profile");
-			String phaseId = (String) parameters.get("phaseId");
-			Touchpoint touchpoint = (Touchpoint) parameters.get("touchpoint");
-			Operand operand = (Operand) parameters.get("operand");
-			IInstallableUnit iu = (IInstallableUnit) parameters.get("iu");
+			Profile profile = (Profile) parameters.get("profile"); //$NON-NLS-1$
+			String phaseId = (String) parameters.get("phaseId"); //$NON-NLS-1$
+			Touchpoint touchpoint = (Touchpoint) parameters.get("touchpoint"); //$NON-NLS-1$
+			Operand operand = (Operand) parameters.get("operand"); //$NON-NLS-1$
+			IInstallableUnit iu = (IInstallableUnit) parameters.get("iu"); //$NON-NLS-1$
 			profile.removeInstallableUnit(iu);
 			((ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName())).publishEvent(new InstallableUnitEvent(phaseId, false, profile, operand, InstallableUnitEvent.UNINSTALL, touchpoint));
 			return null;
@@ -46,21 +47,21 @@ public class Install extends Phase {
 
 	final static class AfterInstallEventAction extends ProvisioningAction {
 		public IStatus execute(Map parameters) {
-			Profile profile = (Profile) parameters.get("profile");
-			String phaseId = (String) parameters.get("phaseId");
-			Touchpoint touchpoint = (Touchpoint) parameters.get("touchpoint");
-			Operand operand = (Operand) parameters.get("operand");
-			IInstallableUnit iu = (IInstallableUnit) parameters.get("iu");
+			Profile profile = (Profile) parameters.get("profile"); //$NON-NLS-1$
+			String phaseId = (String) parameters.get("phaseId"); //$NON-NLS-1$
+			Touchpoint touchpoint = (Touchpoint) parameters.get("touchpoint"); //$NON-NLS-1$
+			Operand operand = (Operand) parameters.get("operand"); //$NON-NLS-1$
+			IInstallableUnit iu = (IInstallableUnit) parameters.get("iu"); //$NON-NLS-1$
 			profile.addInstallableUnit(iu);
 			((ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName())).publishEvent(new InstallableUnitEvent(phaseId, false, profile, operand, InstallableUnitEvent.INSTALL, touchpoint));
 			return null;
 		}
 
 		public IStatus undo(Map parameters) {
-			Profile profile = (Profile) parameters.get("profile");
-			String phaseId = (String) parameters.get("phaseId");
-			Touchpoint touchpoint = (Touchpoint) parameters.get("touchpoint");
-			Operand operand = (Operand) parameters.get("operand");
+			Profile profile = (Profile) parameters.get("profile"); //$NON-NLS-1$
+			String phaseId = (String) parameters.get("phaseId"); //$NON-NLS-1$
+			Touchpoint touchpoint = (Touchpoint) parameters.get("touchpoint"); //$NON-NLS-1$
+			Operand operand = (Operand) parameters.get("operand"); //$NON-NLS-1$
 			((ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName())).publishEvent(new InstallableUnitEvent(phaseId, true, profile, operand, InstallableUnitEvent.UNINSTALL, touchpoint));
 			return null;
 		}
@@ -69,7 +70,7 @@ public class Install extends Phase {
 	private static final String PHASE_ID = "install"; //$NON-NLS-1$
 
 	public Install(int weight) {
-		super(PHASE_ID, weight, Messages.Engine_Install_Phase);
+		super(PHASE_ID, weight);
 	}
 
 	protected boolean isApplicable(Operand op) {
@@ -97,14 +98,18 @@ public class Install extends Phase {
 		return actions;
 	}
 
+	protected String getProblemMessage() {
+		return Messages.Phase_Install_Error;
+	}
+
 	protected IStatus initializeOperand(Profile profile, Operand operand, Map parameters, IProgressMonitor monitor) {
 		IInstallableUnit iu = operand.second();
-		monitor.subTask(NLS.bind("Installing {0}", iu.getId()));
-		parameters.put("iu", iu);
+		monitor.subTask(NLS.bind(Messages.Phase_Install_Task, iu.getId()));
+		parameters.put("iu", iu); //$NON-NLS-1$
 
 		IArtifactKey[] artifacts = iu.getArtifacts();
 		if (artifacts != null && artifacts.length > 0)
-			parameters.put("artifact", artifacts[0]);
+			parameters.put("artifact", artifacts[0]); //$NON-NLS-1$
 
 		return Status.OK_STATUS;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Messages.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Messages.java
deleted file mode 100644
index 5d1f05a..0000000
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Messages.java
+++ /dev/null
@@ -1,35 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.p2.engine.phases;
-
-import org.eclipse.osgi.util.NLS;
-
-public class Messages extends NLS {
-	private static final String BUNDLE_NAME = "org.eclipse.equinox.p2.engine.phases.messages"; //$NON-NLS-1$
-
-	static {
-		// initialize resource bundles
-		NLS.initializeMessages(BUNDLE_NAME, Messages.class);
-	}
-
-	private Messages() {
-		// Do not instantiate
-	}
-
-	public static String Engine_Collect_Phase;
-	public static String Engine_Collecting_For_IU;
-	public static String Engine_Install_Phase;
-	public static String Engine_Installing_IU;
-	public static String Engine_Uninstall_Phase;
-	public static String Engine_Uninstalling_IU;
-	public static String Engine_Configure_Phase;
-	public static String Engine_Unconfigure_Phase;
-}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Sizing.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Sizing.java
index 36c3af5..045568a 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Sizing.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Sizing.java
@@ -13,6 +13,7 @@ import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.engine.EngineActivator;
+import org.eclipse.equinox.internal.p2.engine.Messages;
 import org.eclipse.equinox.p2.artifact.repository.*;
 import org.eclipse.equinox.p2.engine.*;
 
@@ -23,7 +24,7 @@ public class Sizing extends Phase {
 	private long dlSize;
 
 	public Sizing(int weight, String phaseName) {
-		super(TP_DATA, weight, phaseName);
+		super(TP_DATA, weight);
 	}
 
 	protected boolean isApplicable(Operand op) {
@@ -39,12 +40,16 @@ public class Sizing extends Phase {
 	}
 
 	protected ProvisioningAction[] getActions(Operand currentOperand) {
-		ProvisioningAction action = getTouchpoint(currentOperand).getAction("collect");
+		ProvisioningAction action = getTouchpoint(currentOperand).getAction("collect"); //$NON-NLS-1$
 		return new ProvisioningAction[] {action};
 	}
 
+	protected String getProblemMessage() {
+		return Messages.Phase_Sizing_Error;
+	}
+
 	protected IStatus completePhase(IProgressMonitor monitor, Profile profile, Map parameters) {
-		List artifactRequests = (List) parameters.get("artifactRequests");
+		List artifactRequests = (List) parameters.get("artifactRequests"); //$NON-NLS-1$
 		Set artifactsToObtain = new HashSet(artifactRequests.size());
 
 		for (Iterator it = artifactRequests.iterator(); it.hasNext();) {
@@ -78,7 +83,7 @@ public class Sizing extends Phase {
 	}
 
 	protected IStatus initializePhase(IProgressMonitor monitor, Profile profile, Map parameters) {
-		parameters.put("artifactRequests", new ArrayList());
+		parameters.put("artifactRequests", new ArrayList()); //$NON-NLS-1$
 		return null;
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Unconfigure.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Unconfigure.java
index 05eb344..64d939c 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Unconfigure.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Unconfigure.java
@@ -10,13 +10,15 @@ package org.eclipse.equinox.p2.engine.phases;
 
 import java.util.Map;
 import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.internal.p2.engine.Messages;
 import org.eclipse.equinox.p2.engine.*;
-import org.eclipse.equinox.p2.metadata.*;
+import org.eclipse.equinox.p2.metadata.IArtifactKey;
+import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 
 public class Unconfigure extends Phase {
 
 	public Unconfigure(int weight) {
-		super("unconfigure", weight, Messages.Engine_Unconfigure_Phase);
+		super("unconfigure", weight); //$NON-NLS-1$
 	}
 
 	protected boolean isApplicable(Operand op) {
@@ -33,13 +35,17 @@ public class Unconfigure extends Phase {
 		return getActions(unit, phaseId);
 	}
 
+	protected String getProblemMessage() {
+		return Messages.Phase_Unconfigure_Error;
+	}
+
 	protected IStatus initializeOperand(Profile profile, Operand operand, Map parameters, IProgressMonitor monitor) {
 		IInstallableUnit iu = operand.first();
-		parameters.put("iu", iu);
+		parameters.put("iu", iu); //$NON-NLS-1$
 
 		IArtifactKey[] artifacts = iu.getArtifacts();
 		if (artifacts != null && artifacts.length > 0)
-			parameters.put("artifact", artifacts[0]);
+			parameters.put("artifact", artifacts[0]); //$NON-NLS-1$
 
 		return Status.OK_STATUS;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Uninstall.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Uninstall.java
index b925ef3..a807784 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Uninstall.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/Uninstall.java
@@ -14,6 +14,7 @@ import java.util.Map;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.engine.EngineActivator;
+import org.eclipse.equinox.internal.p2.engine.Messages;
 import org.eclipse.equinox.p2.core.eventbus.ProvisioningEventBus;
 import org.eclipse.equinox.p2.engine.*;
 import org.eclipse.equinox.p2.metadata.IArtifactKey;
@@ -23,20 +24,20 @@ public class Uninstall extends Phase {
 
 	final static class BeforeUninstallEventAction extends ProvisioningAction {
 		public IStatus execute(Map parameters) {
-			Profile profile = (Profile) parameters.get("profile");
-			String phaseId = (String) parameters.get("phaseId");
-			Touchpoint touchpoint = (Touchpoint) parameters.get("touchpoint");
-			Operand operand = (Operand) parameters.get("operand");
+			Profile profile = (Profile) parameters.get("profile"); //$NON-NLS-1$
+			String phaseId = (String) parameters.get("phaseId"); //$NON-NLS-1$
+			Touchpoint touchpoint = (Touchpoint) parameters.get("touchpoint"); //$NON-NLS-1$
+			Operand operand = (Operand) parameters.get("operand"); //$NON-NLS-1$
 			((ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName())).publishEvent(new InstallableUnitEvent(phaseId, true, profile, operand, InstallableUnitEvent.UNINSTALL, touchpoint));
 			return null;
 		}
 
 		public IStatus undo(Map parameters) {
-			Profile profile = (Profile) parameters.get("profile");
-			String phaseId = (String) parameters.get("phaseId");
-			Touchpoint touchpoint = (Touchpoint) parameters.get("touchpoint");
-			Operand operand = (Operand) parameters.get("operand");
-			IInstallableUnit iu = (IInstallableUnit) parameters.get("iu");
+			Profile profile = (Profile) parameters.get("profile"); //$NON-NLS-1$
+			String phaseId = (String) parameters.get("phaseId"); //$NON-NLS-1$
+			Touchpoint touchpoint = (Touchpoint) parameters.get("touchpoint"); //$NON-NLS-1$
+			Operand operand = (Operand) parameters.get("operand"); //$NON-NLS-1$
+			IInstallableUnit iu = (IInstallableUnit) parameters.get("iu"); //$NON-NLS-1$
 			profile.addInstallableUnit(iu);
 			((ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName())).publishEvent(new InstallableUnitEvent(phaseId, false, profile, operand, InstallableUnitEvent.INSTALL, touchpoint));
 			return null;
@@ -45,21 +46,21 @@ public class Uninstall extends Phase {
 
 	final static class AfterUninstallEventAction extends ProvisioningAction {
 		public IStatus execute(Map parameters) {
-			Profile profile = (Profile) parameters.get("profile");
-			String phaseId = (String) parameters.get("phaseId");
-			Touchpoint touchpoint = (Touchpoint) parameters.get("touchpoint");
-			Operand operand = (Operand) parameters.get("operand");
-			IInstallableUnit iu = (IInstallableUnit) parameters.get("iu");
+			Profile profile = (Profile) parameters.get("profile"); //$NON-NLS-1$
+			String phaseId = (String) parameters.get("phaseId"); //$NON-NLS-1$
+			Touchpoint touchpoint = (Touchpoint) parameters.get("touchpoint"); //$NON-NLS-1$
+			Operand operand = (Operand) parameters.get("operand"); //$NON-NLS-1$
+			IInstallableUnit iu = (IInstallableUnit) parameters.get("iu"); //$NON-NLS-1$
 			profile.removeInstallableUnit(iu);
 			((ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName())).publishEvent(new InstallableUnitEvent(phaseId, false, profile, operand, InstallableUnitEvent.UNINSTALL, touchpoint));
 			return null;
 		}
 
 		public IStatus undo(Map parameters) {
-			Profile profile = (Profile) parameters.get("profile");
-			String phaseId = (String) parameters.get("phaseId");
-			Touchpoint touchpoint = (Touchpoint) parameters.get("touchpoint");
-			Operand operand = (Operand) parameters.get("operand");
+			Profile profile = (Profile) parameters.get("profile"); //$NON-NLS-1$
+			String phaseId = (String) parameters.get("phaseId");//$NON-NLS-1$
+			Touchpoint touchpoint = (Touchpoint) parameters.get("touchpoint");//$NON-NLS-1$
+			Operand operand = (Operand) parameters.get("operand");//$NON-NLS-1$
 			((ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName())).publishEvent(new InstallableUnitEvent(phaseId, true, profile, operand, InstallableUnitEvent.INSTALL, touchpoint));
 			return null;
 		}
@@ -68,7 +69,7 @@ public class Uninstall extends Phase {
 	private static final String PHASE_ID = "uninstall"; //$NON-NLS-1$
 
 	public Uninstall(int weight) {
-		super(PHASE_ID, weight, Messages.Engine_Uninstall_Phase);
+		super(PHASE_ID, weight);
 	}
 
 	protected boolean isApplicable(Operand op) {
@@ -95,13 +96,17 @@ public class Uninstall extends Phase {
 		return actions;
 	}
 
+	protected String getProblemMessage() {
+		return Messages.Phase_Uninstall_Error;
+	}
+
 	protected IStatus initializeOperand(Profile profile, Operand operand, Map parameters, IProgressMonitor monitor) {
 		IInstallableUnit iu = operand.first();
-		parameters.put("iu", iu);
+		parameters.put("iu", iu); //$NON-NLS-1$
 
 		IArtifactKey[] artifacts = iu.getArtifacts();
 		if (artifacts != null && artifacts.length > 0)
-			parameters.put("artifact", artifacts[0]);
+			parameters.put("artifact", artifacts[0]); //$NON-NLS-1$
 
 		return Status.OK_STATUS;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/messages.properties b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/messages.properties
deleted file mode 100644
index bf33f4f..0000000
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/phases/messages.properties
+++ /dev/null
@@ -1,19 +0,0 @@
-###############################################################################
-# Copyright (c) 2007 IBM Corporation and others.
-# All rights reserved. This program and the accompanying materials
-# are made available under the terms of the Eclipse Public License v1.0
-# which accompanies this distribution, and is available at
-# http://www.eclipse.org/legal/epl-v10.html
-#
-# Contributors:
-#     IBM Corporation - initial API and implementation
-###############################################################################
-
-Engine_Collect_Phase=collect
-Engine_Install_Phase=install
-Engine_Uninstall_Phase=uninstall
-Engine_Configure_Phase=configure
-Engine_Unconfigure_Phase=unconfigure
-Engine_Collecting_For_IU=Collecting for {0}
-Engine_Installing_IU=Installing {0}
-Engine_Uninstalling_IU=Uninstalling {0}
\ No newline at end of file

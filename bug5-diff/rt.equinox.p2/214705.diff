commit c5f5588f1edc1ac866882a33c5ba0e7c56541569
Author: John Arthorne <johna>
Date:   Wed Jan 9 03:49:51 2008 +0000

    Bug 214705 - [prov] Change "implementation only" to "system"

11	11	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java
0	5	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
3	3	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/p2/core/repository/IRepository.java
0	9	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java
1	1	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java
2	2	bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/p2/directorywatcher/RepositoryListener.java
1	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/MetadataCache.java
12	12	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java
8	6	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/p2/metadata/repository/IMetadataRepositoryManager.java
1	1	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Util.java
1	1	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java
1	1	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
1	1	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RepositoryManipulationDialog.java
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java
index ad6cd3c..8b66402 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java
@@ -33,7 +33,7 @@ public class ArtifactRepositoryManager implements IArtifactRepositoryManager {
 		String description;
 		URL location;
 		String name;
-		boolean implementationOnly = false;
+		boolean isSystem = false;
 		SoftReference repository;
 	}
 
@@ -47,7 +47,7 @@ public class ArtifactRepositoryManager implements IArtifactRepositoryManager {
 	private static final String KEY_TYPE = "type"; //$NON-NLS-1$
 	private static final String KEY_URL = "url"; //$NON-NLS-1$
 	private static final String KEY_VERSION = "version"; //$NON-NLS-1$
-	private static final String KEY_IMPLEMENTATION_ONLY = "implementationOnly"; //$NON-NLS-1$
+	private static final String KEY_SYSTEM = "isSystem"; //$NON-NLS-1$
 	private static final String NODE_REPOSITORIES = "repositories"; //$NON-NLS-1$
 
 	/**
@@ -68,8 +68,8 @@ public class ArtifactRepositoryManager implements IArtifactRepositoryManager {
 		info.name = repository.getName();
 		info.description = repository.getDescription();
 		info.location = repository.getLocation();
-		String value = (String) repository.getProperties().get(IRepository.IMPLEMENTATION_ONLY_KEY);
-		info.implementationOnly = value == null ? false : Boolean.valueOf(value).booleanValue();
+		String value = (String) repository.getProperties().get(IRepository.PROP_SYSTEM);
+		info.isSystem = value == null ? false : Boolean.valueOf(value).booleanValue();
 		synchronized (repositoryLock) {
 			if (repositories == null)
 				restoreRepositories();
@@ -198,10 +198,10 @@ public class ArtifactRepositoryManager implements IArtifactRepositoryManager {
 
 	private boolean matchesFlags(RepositoryInfo info, int flags) {
 		if ((flags & REPOSITORIES_IMPLEMENTATION_ONLY) == REPOSITORIES_IMPLEMENTATION_ONLY)
-			if (!info.implementationOnly)
+			if (!info.isSystem)
 				return false;
 		if ((flags & REPOSITORIES_PUBLIC_ONLY) == REPOSITORIES_PUBLIC_ONLY)
-			if (info.implementationOnly)
+			if (info.isSystem)
 				return false;
 		if ((flags & REPOSITORIES_LOCAL_ONLY) == REPOSITORIES_LOCAL_ONLY)
 			return "file".equals(info.location.getProtocol()); //$NON-NLS-1$
@@ -285,9 +285,9 @@ public class ArtifactRepositoryManager implements IArtifactRepositoryManager {
 		value = repository.getVersion();
 		if (value != null)
 			node.put(KEY_VERSION, value);
-		value = (String) repository.getProperties().get(IRepository.IMPLEMENTATION_ONLY_KEY);
+		value = (String) repository.getProperties().get(IRepository.PROP_SYSTEM);
 		if (value != null)
-			node.put(KEY_IMPLEMENTATION_ONLY, value);
+			node.put(KEY_SYSTEM, value);
 		value = repository.getLocation().toExternalForm();
 		node.put(KEY_URL, value);
 		saveToPreferences();
@@ -299,7 +299,7 @@ public class ArtifactRepositoryManager implements IArtifactRepositoryManager {
 	private void remember(RepositoryInfo info) {
 		Preferences node = getPreferences().node(getKey(info.location));
 		node.put(KEY_URL, info.location.toExternalForm());
-		node.put(KEY_IMPLEMENTATION_ONLY, Boolean.toString(info.implementationOnly));
+		node.put(KEY_SYSTEM, Boolean.toString(info.isSystem));
 		if (info.description != null)
 			node.put(KEY_DESCRIPTION, info.description);
 		if (info.name != null)
@@ -333,7 +333,7 @@ public class ArtifactRepositoryManager implements IArtifactRepositoryManager {
 			// TODO should do something here since we are failing to restore.
 			return;
 		SimpleArtifactRepository cache = (SimpleArtifactRepository) createRepository(location.getArtifactRepositoryURL(), "download cache", "org.eclipse.equinox.p2.artifact.repository.simpleRepository"); //$NON-NLS-1$ //$NON-NLS-2$
-		cache.tagAsImplementation();
+		cache.setProperty(IRepository.PROP_SYSTEM, Boolean.TRUE.toString());
 	}
 
 	/*
@@ -360,7 +360,7 @@ public class ArtifactRepositoryManager implements IArtifactRepositoryManager {
 				info.location = new URL(locationString);
 				info.name = child.get(KEY_NAME, null);
 				info.description = child.get(KEY_DESCRIPTION, null);
-				info.implementationOnly = child.getBoolean(KEY_IMPLEMENTATION_ONLY, false);
+				info.isSystem = child.getBoolean(KEY_SYSTEM, false);
 				repositories.put(getKey(info.location), info);
 			} catch (MalformedURLException e) {
 				log("Error while restoring repository: " + locationString, e); //$NON-NLS-1$
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
index 7887a75..103ba3f 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
@@ -19,7 +19,6 @@ import org.eclipse.equinox.internal.p2.core.helpers.FileUtils;
 import org.eclipse.equinox.p2.artifact.repository.*;
 import org.eclipse.equinox.p2.artifact.repository.processing.ProcessingStep;
 import org.eclipse.equinox.p2.artifact.repository.processing.ProcessingStepHandler;
-import org.eclipse.equinox.p2.core.repository.IRepository;
 import org.eclipse.equinox.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.spi.p2.artifact.repository.AbstractArtifactRepository;
 
@@ -546,10 +545,6 @@ public class SimpleArtifactRepository extends AbstractArtifactRepository impleme
 		mappingRules = rules;
 	}
 
-	public void tagAsImplementation() {
-		setProperty(IRepository.IMPLEMENTATION_ONLY_KEY, Boolean.TRUE.toString());
-	}
-
 	/**
 	 * Removes the given descriptor, and the physical artifact corresponding
 	 * to that descriptor. Returns <code>true</code> if and only if the
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/p2/core/repository/IRepository.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/p2/core/repository/IRepository.java
index 878d91d..10206e1 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/p2/core/repository/IRepository.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/p2/core/repository/IRepository.java
@@ -23,10 +23,10 @@ import org.eclipse.core.runtime.IAdaptable;
 public interface IRepository extends IAdaptable {
 	/** 
 	 * The property key for a boolean property indicating that the repository
-	 * is an implementation detail, not subject to general access, hidden
-	 * from the typical user, etc.
+	 * is a system repository.  System repositories are implementation details
+	 * that are not subject to general access, hidden from the typical user, etc.
 	 */
-	static public String IMPLEMENTATION_ONLY_KEY = "implementationOnly"; //$NON-NLS-1$
+	static public String PROP_SYSTEM = "p2.system"; //$NON-NLS-1$
 
 	/**
 	 * The key for a boolean property indicating that repository metadata is
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java
index 1746cf0..1f8ee1f 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java
@@ -14,11 +14,9 @@ import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.rollback.FormerState;
 import org.eclipse.equinox.p2.core.location.AgentLocation;
-import org.eclipse.equinox.p2.core.repository.IRepository;
 import org.eclipse.equinox.p2.director.*;
 import org.eclipse.equinox.p2.engine.*;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.osgi.util.NLS;
 
 public class SimpleDirector implements IDirector {
@@ -28,13 +26,6 @@ public class SimpleDirector implements IDirector {
 	private Engine engine;
 	private IPlanner planner;
 
-	public static void tagAsImplementation(IMetadataRepository repository) {
-		if (repository != null && repository.getProperties().get(IRepository.IMPLEMENTATION_ONLY_KEY) == null) {
-			if (repository.isModifiable())
-				repository.setProperty(IRepository.IMPLEMENTATION_ONLY_KEY, Boolean.valueOf(true).toString());
-		}
-	}
-
 	public SimpleDirector() {
 		initializeRollbackRepository();
 		engine = (Engine) ServiceHelper.getService(DirectorActivator.context, Engine.class.getName());
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java
index 8da6b75..c7e2299 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java
@@ -76,7 +76,7 @@ public class FormerState {
 		repository = (AbstractMetadataRepository) manager.createRepository(location, "Agent rollback repository", IMetadataRepositoryManager.TYPE_SIMPLE_REPOSITORY); //$NON-NLS-1$
 		if (repository == null)
 			throw new IllegalStateException("Unable to open or create Agent's rollback repository"); //$NON-NLS-1$
-		((IRepository) repository).setProperty(IRepository.IMPLEMENTATION_ONLY_KEY, Boolean.valueOf(true).toString());
+		((IRepository) repository).setProperty(IRepository.PROP_SYSTEM, Boolean.valueOf(true).toString());
 		return repository;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/p2/directorywatcher/RepositoryListener.java b/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/p2/directorywatcher/RepositoryListener.java
index aede173..f4885fc 100644
--- a/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/p2/directorywatcher/RepositoryListener.java
+++ b/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/p2/directorywatcher/RepositoryListener.java
@@ -87,7 +87,7 @@ public class RepositoryListener extends DirectoryChangeListener {
 			repository = manager.loadRepository(stateDirURL, null);
 			if (repository == null) {
 				repository = manager.createRepository(stateDirURL, "artifact listener " + repositoryName, "org.eclipse.equinox.p2.artifact.repository.simpleRepository");
-				repository.setProperty(IRepository.IMPLEMENTATION_ONLY_KEY, Boolean.TRUE.toString());
+				repository.setProperty(IRepository.PROP_SYSTEM, Boolean.TRUE.toString());
 			}
 		} finally {
 			context.ungetService(reference);
@@ -113,7 +113,7 @@ public class RepositoryListener extends DirectoryChangeListener {
 			repository = manager.loadRepository(stateDirURL, null);
 			if (repository == null) {
 				repository = manager.createRepository(stateDirURL, "metadata listener " + repositoryName, IMetadataRepositoryManager.TYPE_SIMPLE_REPOSITORY);
-				repository.setProperty(IRepository.IMPLEMENTATION_ONLY_KEY, Boolean.TRUE.toString());
+				repository.setProperty(IRepository.PROP_SYSTEM, Boolean.TRUE.toString());
 			}
 		} finally {
 			context.ungetService(reference);
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/MetadataCache.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/MetadataCache.java
index c029072..08e9fd3 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/MetadataCache.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/MetadataCache.java
@@ -47,7 +47,7 @@ public class MetadataCache {
 			return repository;
 		//instruct the repository manager to construct a new metadata cache 
 		repository = (AbstractMetadataRepository) manager.createRepository(location, REPOSITORY_NAME, IMetadataRepositoryManager.TYPE_SIMPLE_REPOSITORY);
-		repository.setProperty(IRepository.IMPLEMENTATION_ONLY_KEY, Boolean.valueOf(true).toString());
+		repository.setProperty(IRepository.PROP_SYSTEM, Boolean.valueOf(true).toString());
 		return repository;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java
index ea281de..ea3b946 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java
@@ -33,7 +33,7 @@ public class MetadataRepositoryManager implements IMetadataRepositoryManager {
 		String description;
 		URL location;
 		String name;
-		boolean implementationOnly = false;
+		boolean isSystem = false;
 		SoftReference repository;
 	}
 
@@ -45,7 +45,7 @@ public class MetadataRepositoryManager implements IMetadataRepositoryManager {
 	private static final String KEY_TYPE = "type"; //$NON-NLS-1$
 	private static final String KEY_URL = "url"; //$NON-NLS-1$
 	private static final String KEY_VERSION = "version"; //$NON-NLS-1$
-	private static final String KEY_IMPLEMENTATION_ONLY = "implementationOnly"; //$NON-NLS-1$
+	private static final String KEY_SYSTEM = "isSystem"; //$NON-NLS-1$
 	private static final String NODE_REPOSITORIES = "repositories"; //$NON-NLS-1$
 
 	/**
@@ -66,8 +66,8 @@ public class MetadataRepositoryManager implements IMetadataRepositoryManager {
 		info.name = repository.getName();
 		info.description = repository.getDescription();
 		info.location = repository.getLocation();
-		String value = (String) repository.getProperties().get(IRepository.IMPLEMENTATION_ONLY_KEY);
-		info.implementationOnly = value == null ? false : Boolean.valueOf(value).booleanValue();
+		String value = (String) repository.getProperties().get(IRepository.PROP_SYSTEM);
+		info.isSystem = value == null ? false : Boolean.valueOf(value).booleanValue();
 		synchronized (repositoryLock) {
 			if (repositories == null)
 				restoreRepositories();
@@ -196,11 +196,11 @@ public class MetadataRepositoryManager implements IMetadataRepositoryManager {
 	}
 
 	private boolean matchesFlags(RepositoryInfo info, int flags) {
-		if ((flags & REPOSITORIES_IMPLEMENTATION_ONLY) == REPOSITORIES_IMPLEMENTATION_ONLY)
-			if (!info.implementationOnly)
+		if ((flags & REPOSITORIES_SYSTEM) == REPOSITORIES_SYSTEM)
+			if (!info.isSystem)
 				return false;
-		if ((flags & REPOSITORIES_PUBLIC_ONLY) == REPOSITORIES_PUBLIC_ONLY)
-			if (info.implementationOnly)
+		if ((flags & REPOSITORIES_NON_SYSTEM) == REPOSITORIES_NON_SYSTEM)
+			if (info.isSystem)
 				return false;
 		if ((flags & REPOSITORIES_LOCAL_ONLY) == REPOSITORIES_LOCAL_ONLY)
 			return "file".equals(info.location.getProtocol()); //$NON-NLS-1$
@@ -325,9 +325,9 @@ public class MetadataRepositoryManager implements IMetadataRepositoryManager {
 		value = repository.getVersion();
 		if (value != null)
 			node.put(KEY_VERSION, value);
-		value = (String) repository.getProperties().get(IRepository.IMPLEMENTATION_ONLY_KEY);
+		value = (String) repository.getProperties().get(IRepository.PROP_SYSTEM);
 		if (value != null)
-			node.put(KEY_IMPLEMENTATION_ONLY, value);
+			node.put(KEY_SYSTEM, value);
 
 		saveToPreferences();
 	}
@@ -338,7 +338,7 @@ public class MetadataRepositoryManager implements IMetadataRepositoryManager {
 	private void remember(RepositoryInfo info) {
 		Preferences node = getPreferences().node(getKey(info.location));
 		node.put(KEY_URL, info.location.toExternalForm());
-		node.put(KEY_IMPLEMENTATION_ONLY, Boolean.toString(info.implementationOnly));
+		node.put(KEY_SYSTEM, Boolean.toString(info.isSystem));
 		if (info.description != null)
 			node.put(KEY_DESCRIPTION, info.description);
 		if (info.name != null)
@@ -388,7 +388,7 @@ public class MetadataRepositoryManager implements IMetadataRepositoryManager {
 				info.location = new URL(locationString);
 				info.name = child.get(KEY_NAME, null);
 				info.description = child.get(KEY_DESCRIPTION, null);
-				info.implementationOnly = child.getBoolean(KEY_IMPLEMENTATION_ONLY, false);
+				info.isSystem = child.getBoolean(KEY_SYSTEM, false);
 				repositories.put(getKey(info.location), info);
 			} catch (MalformedURLException e) {
 				log("Error while restoring repository: " + locationString, e); //$NON-NLS-1$
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/p2/metadata/repository/IMetadataRepositoryManager.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/p2/metadata/repository/IMetadataRepositoryManager.java
index e1c70b8..93a26d6 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/p2/metadata/repository/IMetadataRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/p2/metadata/repository/IMetadataRepositoryManager.java
@@ -22,13 +22,15 @@ public interface IMetadataRepositoryManager extends IQueryable {
 	 */
 	public static final int REPOSITORIES_ALL = 0;
 	/**
-	 * Constant used to indicate that implementation-only repositories are of interest.
+	 * Constant used to indicate that system repositories are of interest.
+	 * @see IRepository#PROP_SYSTEM
 	 */
-	public static final int REPOSITORIES_IMPLEMENTATION_ONLY = 1 << 1;
+	public static final int REPOSITORIES_SYSTEM = 1 << 1;
 	/**
-	 * Constant used to indicate that public (non-implementation-only) repositories are of interest.
+	 * Constant used to indicate that non-system repositories are of interest
+	 * @see IRepository#PROP_SYSTEM
 	 */
-	public static final int REPOSITORIES_PUBLIC_ONLY = 1 << 2;
+	public static final int REPOSITORIES_NON_SYSTEM = 1 << 2;
 	/**
 	 * Constant used to indicate that local repositories are of interest.
 	 */
@@ -81,9 +83,9 @@ public interface IMetadataRepositoryManager extends IQueryable {
 	 * @return the locations of the repositories managed by this repository manager.
 	 * 
 	 * @see #REPOSITORIES_ALL
-	 * @see #REPOSITORIES_IMPLEMENTATION_ONLY
+	 * @see #REPOSITORIES_SYSTEM
 	 * @see #REPOSITORIES_LOCAL_ONLY
-	 * @see #REPOSITORIES_PUBLIC_ONLY
+	 * @see #REPOSITORIES_NON_SYSTEM
 	 */
 	public URL[] getKnownRepositories(int flags);
 
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Util.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Util.java
index d33b7a7..7179239 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Util.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Util.java
@@ -78,7 +78,7 @@ public class Util {
 			bundlePool = manager.createRepository(location, repositoryName, REPOSITORY_TYPE);
 			if (bundlePool == null)
 				throw new IllegalArgumentException("Bundle pool repository not writeable: " + location); //$NON-NLS-1$
-			((IRepository) bundlePool).setProperty(IRepository.IMPLEMENTATION_ONLY_KEY, Boolean.valueOf(true).toString());
+			((IRepository) bundlePool).setProperty(IRepository.PROP_SYSTEM, Boolean.valueOf(true).toString());
 		}
 
 		return (IFileArtifactRepository) bundlePool;
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java
index 81b9690..9b8b20f 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java
@@ -115,7 +115,7 @@ public class ProvAdminQueryProvider implements IProvElementQueryProvider {
 				return new ElementQueryDescriptor(profile, query, new InstalledIUCollector(this, profile));
 			case IProvElementQueryProvider.METADATA_REPOS :
 				queryable = new QueryableMetadataRepositoryManager();
-				query = hideImpl ? new FilteredRepositoryQuery(IMetadataRepositoryManager.REPOSITORIES_PUBLIC_ONLY) : allQuery;
+				query = hideImpl ? new FilteredRepositoryQuery(IMetadataRepositoryManager.REPOSITORIES_NON_SYSTEM) : allQuery;
 				return new ElementQueryDescriptor(queryable, query, new RepositoryCollector(this, queryable));
 			case IProvElementQueryProvider.PROFILES :
 				queryable = new QueryableProfileRegistry();
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
index 64d7e20..2cdfc49 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
@@ -80,7 +80,7 @@ public class ProvSDKQueryProvider implements IProvElementQueryProvider {
 				return new ElementQueryDescriptor(profile, new IUProfilePropertyQuery(profile, IInstallableUnit.PROP_PROFILE_ROOT_IU, Boolean.toString(true)), new InstalledIUCollector(this, profile));
 			case IProvElementQueryProvider.METADATA_REPOS :
 				queryable = new QueryableMetadataRepositoryManager();
-				return new ElementQueryDescriptor(queryable, new FilteredRepositoryQuery(IMetadataRepositoryManager.REPOSITORIES_PUBLIC_ONLY), new RepositoryCollector(this, queryable));
+				return new ElementQueryDescriptor(queryable, new FilteredRepositoryQuery(IMetadataRepositoryManager.REPOSITORIES_NON_SYSTEM), new RepositoryCollector(this, queryable));
 			case IProvElementQueryProvider.PROFILES :
 				queryable = new QueryableProfileRegistry();
 				return new ElementQueryDescriptor(queryable, new Query() {
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RepositoryManipulationDialog.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RepositoryManipulationDialog.java
index f7699e0..895b9d0 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RepositoryManipulationDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RepositoryManipulationDialog.java
@@ -185,7 +185,7 @@ public class RepositoryManipulationDialog extends TrayDialog {
 		button.setData(BUTTONACTION, new Action() {
 			public void runWithEvent(Event event) {
 				try {
-					new AddColocatedRepositoryDialog(getShell(), ProvisioningUtil.getMetadataRepositories(IMetadataRepositoryManager.REPOSITORIES_PUBLIC_ONLY)).open();
+					new AddColocatedRepositoryDialog(getShell(), ProvisioningUtil.getMetadataRepositories(IMetadataRepositoryManager.REPOSITORIES_NON_SYSTEM)).open();
 				} catch (ProvisionException e) {
 					ProvUI.handleException(e, null);
 				}

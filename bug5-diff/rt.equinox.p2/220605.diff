commit ad72d19e3281843cdf9812591bcd33f2910c187f
Author: Simon Kaegi <skaegi>
Date:   Tue Mar 4 03:52:09 2008 +0000

    Bug 220605 IMetadataRepositoryManager will only load an old style update site if "site.xml" is part of the URL

11	5	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java
12	3	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java
7	2	bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/Messages.java
75	13	bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepository.java
2	3	bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepositoryFactory.java
6	2	bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/messages.properties
86	13	bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepository.java
3	48	bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepositoryFactory.java
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java
index 22cf4ac..afd6a9e 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java
@@ -39,7 +39,7 @@ public class ArtifactRepositoryManager implements IArtifactRepositoryManager {
 		SoftReference repository;
 	}
 
-	private static final String ATTR_FILTER = "filter"; //$NON-NLS-1$
+	private static final String EL_FILTER = "filter"; //$NON-NLS-1$
 	private static final String ATTR_SUFFIX = "suffix"; //$NON-NLS-1$
 	private static final String EL_FACTORY = "factory"; //$NON-NLS-1$
 
@@ -51,6 +51,7 @@ public class ArtifactRepositoryManager implements IArtifactRepositoryManager {
 	private static final String KEY_URL = "url"; //$NON-NLS-1$
 	private static final String KEY_VERSION = "version"; //$NON-NLS-1$
 	private static final String NODE_REPOSITORIES = "repositories"; //$NON-NLS-1$
+	private static final String DEFAULT_SUFFIX = "artifacts.xml"; //$NON-NLS-1$
 
 	/**
 	 * Map of String->RepositoryInfo, where String is the repository key
@@ -173,7 +174,7 @@ public class ArtifactRepositoryManager implements IArtifactRepositoryManager {
 		IConfigurationElement[] elt = RegistryFactory.getRegistry().getConfigurationElementsFor(Activator.REPO_PROVIDER_XPT);
 		int count = 0;
 		for (int i = 0; i < elt.length; i++) {
-			if (ATTR_FILTER.equals(elt[i].getName())) {
+			if (EL_FILTER.equals(elt[i].getName())) {
 				if (!suffix.equals(elt[i].getAttribute(ATTR_SUFFIX))) {
 					elt[i] = null;
 				} else {
@@ -194,9 +195,14 @@ public class ArtifactRepositoryManager implements IArtifactRepositoryManager {
 	private String[] getAllSuffixes() {
 		IConfigurationElement[] elements = RegistryFactory.getRegistry().getConfigurationElementsFor(Activator.REPO_PROVIDER_XPT);
 		ArrayList result = new ArrayList(elements.length);
-		for (int i = 0; i < elements.length; i++)
-			if (elements[i].getName().equals(ATTR_FILTER))
-				result.add(elements[i].getAttribute(ATTR_SUFFIX));
+		result.add(DEFAULT_SUFFIX);
+		for (int i = 0; i < elements.length; i++) {
+			if (elements[i].getName().equals(EL_FILTER)) {
+				String suffix = elements[i].getAttribute(ATTR_SUFFIX); //$NON-NLS-1$
+				if (!result.contains(suffix))
+					result.add(suffix);
+			}
+		}
 		return (String[]) result.toArray(new String[result.size()]);
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java
index fb48d95..aea4818 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java
@@ -38,6 +38,8 @@ public class MetadataRepositoryManager implements IMetadataRepositoryManager {
 		SoftReference repository;
 	}
 
+	private static final String EL_FILTER = "filter"; //$NON-NLS-1$
+	private static final String ATTR_SUFFIX = "suffix"; //$NON-NLS-1$
 	private static final String FACTORY = "factory"; //$NON-NLS-1$
 
 	private static final String KEY_DESCRIPTION = "description"; //$NON-NLS-1$
@@ -49,6 +51,8 @@ public class MetadataRepositoryManager implements IMetadataRepositoryManager {
 	private static final String KEY_VERSION = "version"; //$NON-NLS-1$
 	private static final String NODE_REPOSITORIES = "repositories"; //$NON-NLS-1$
 
+	private static final String DEFAULT_SUFFIX = "content.xml"; //$NON-NLS-1$
+
 	/**
 	 * Map of String->RepositoryInfo, where String is the repository key
 	 * obtained vai getKey(URL).
@@ -199,9 +203,14 @@ public class MetadataRepositoryManager implements IMetadataRepositoryManager {
 	private String[] getAllSuffixes() {
 		IConfigurationElement[] elements = RegistryFactory.getRegistry().getConfigurationElementsFor(Activator.REPO_PROVIDER_XPT);
 		ArrayList result = new ArrayList(elements.length);
-		for (int i = 0; i < elements.length; i++)
-			if (elements[i].getName().equals("filter")) //$NON-NLS-1$
-				result.add(elements[i].getAttribute("suffix")); //$NON-NLS-1$
+		result.add(DEFAULT_SUFFIX);
+		for (int i = 0; i < elements.length; i++) {
+			if (elements[i].getName().equals(EL_FILTER)) {
+				String suffix = elements[i].getAttribute(ATTR_SUFFIX);
+				if (!result.contains(suffix))
+					result.add(suffix);
+			}
+		}
 		return (String[]) result.toArray(new String[result.size()]);
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/Messages.java b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/Messages.java
index dc94592..6e5ab30 100644
--- a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/Messages.java
+++ b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/Messages.java
@@ -19,11 +19,16 @@ import org.eclipse.osgi.util.NLS;
  */
 public class Messages extends NLS {
 	private static final String BUNDLE_NAME = "org.eclipse.equinox.internal.p2.updatesite.messages"; //$NON-NLS-1$
+
 	public static String UpdateSiteMetadataRepository_ErrorParsingUpdateSite;
 	public static String UpdateSiteMetadataRepository_ErrorReadingUpdateSite;
 	public static String UpdateSiteMetadataRepository_PlatformAdminNotRegistered;
-	public static String UpdateSiteMetadataRepositoryFactory_ErrorReadingSite;
-	public static String UpdateSiteMetadataRepositoryFactory_InvalidRepositoryLocation;
+	public static String UpdateSiteMetadataRepository_ErrorReadingSite;
+	public static String UpdateSiteMetadataRepository_InvalidRepositoryLocation;
+	public static String UpdateSiteArtifactRepository_InvalidRepositoryLocation;
+	public static String UpdateSiteArtifactRepository_ErrorReadingSite;
+	public static String UpdateSiteArtifactRepository_ErrorParsingUpdateSite;
+	public static String UpdateSiteArtifactRepository_ErrorReadingUpdateSite;
 	static {
 		// initialize resource bundle
 		NLS.initializeMessages(BUNDLE_NAME, Messages.class);
diff --git a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepository.java b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepository.java
index 67d990b..3a6a020 100644
--- a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepository.java
+++ b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepository.java
@@ -15,11 +15,11 @@ import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.*;
 import java.util.zip.*;
-import org.eclipse.core.runtime.IProgressMonitor;
-import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.FileUtils;
 import org.eclipse.equinox.internal.p2.metadata.generator.features.*;
 import org.eclipse.equinox.internal.p2.updatesite.Activator;
+import org.eclipse.equinox.internal.p2.updatesite.Messages;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.*;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
@@ -27,14 +27,18 @@ import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.internal.provisional.p2.metadata.generator.*;
 import org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository.SimpleArtifactRepositoryFactory;
 import org.eclipse.equinox.internal.provisional.spi.p2.core.repository.AbstractRepository;
+import org.eclipse.osgi.util.NLS;
 import org.osgi.framework.BundleContext;
 import org.xml.sax.SAXException;
 
 public class UpdateSiteArtifactRepository extends AbstractRepository implements IArtifactRepository {
 
+	private static final String SITE_FILE = "site.xml"; //$NON-NLS-1$
+	private static final String DIR_SEPARATOR = "/"; //$NON-NLS-1$
+
 	private final IArtifactRepository artifactRepository;
 
-	public UpdateSiteArtifactRepository(URL location, IProgressMonitor monitor) {
+	public UpdateSiteArtifactRepository(URL location, IProgressMonitor monitor) throws ProvisionException {
 		super("update site: " + location.toExternalForm(), null, null, location, null, null);
 		BundleContext context = Activator.getBundleContext();
 
@@ -49,11 +53,12 @@ public class UpdateSiteArtifactRepository extends AbstractRepository implements
 			e.printStackTrace();
 		}
 		artifactRepository = initializeArtifactRepository(context, localRepositoryURL, "update site implementation - " + location.toExternalForm());
+		InputStream is = getSiteInputStream(location);
 		try {
 
 			DefaultSiteParser siteParser = new DefaultSiteParser();
 			Checksum checksum = new CRC32();
-			InputStream is = new CheckedInputStream(new BufferedInputStream(location.openStream()), checksum);
+			is = new CheckedInputStream(new BufferedInputStream(is), checksum);
 			SiteModel siteModel = siteParser.parse(is);
 
 			String savedChecksum = (String) artifactRepository.getProperties().get("site.checksum");
@@ -95,18 +100,75 @@ public class UpdateSiteArtifactRepository extends AbstractRepository implements
 
 			IArtifactDescriptor[] descriptors = (IArtifactDescriptor[]) allSiteArtifacts.toArray(new IArtifactDescriptor[allSiteArtifacts.size()]);
 			artifactRepository.addDescriptors(descriptors);
-		} catch (IOException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
 		} catch (SAXException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
+			String msg = NLS.bind(Messages.UpdateSiteArtifactRepository_ErrorParsingUpdateSite, location);
+			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_FAILED_READ, msg, e));
+		} catch (IOException e) {
+			String msg = NLS.bind(Messages.UpdateSiteArtifactRepository_ErrorReadingUpdateSite, location);
+			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_FAILED_READ, msg, e));
+		} finally {
+			safeClose(is);
 		}
 	}
 
-	private Feature[] loadFeaturesFromDigest(URL location, SiteModel siteModel) {
+	public static void validate(URL url, IProgressMonitor monitor) throws ProvisionException {
+		InputStream is = null;
+		try {
+			is = getSiteInputStream(url);
+		} finally {
+			safeClose(is);
+		}
+	}
+
+	private static InputStream getSiteInputStream(URL url) throws ProvisionException {
+		try {
+			URL siteURL = getSiteURL(url);
+			return siteURL.openStream();
+		} catch (MalformedURLException e) {
+			String msg = NLS.bind(Messages.UpdateSiteArtifactRepository_InvalidRepositoryLocation, url);
+			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_INVALID_LOCATION, msg, e));
+		} catch (IOException e) {
+			String msg = NLS.bind(Messages.UpdateSiteArtifactRepository_ErrorReadingSite, url);
+			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, msg, e));
+		}
+	}
+
+	private static void safeClose(InputStream stream) {
+		if (stream == null)
+			return;
+		try {
+			stream.close();
+		} catch (IOException e) {
+			//ignore
+		}
+	}
+
+	public static URL getSiteURL(URL url) throws MalformedURLException {
+		if (url.getPath().endsWith(SITE_FILE))
+			return url;
+
+		if (url.getPath().endsWith(DIR_SEPARATOR))
+			return new URL(url.toExternalForm() + SITE_FILE);
+
+		return new URL(url.toExternalForm() + DIR_SEPARATOR + SITE_FILE);
+	}
+
+	public static URL getFileURL(URL url, String fileName) throws MalformedURLException {
+		if (url.getPath().endsWith(fileName))
+			return url;
+
+		if (url.getPath().endsWith(SITE_FILE))
+			return new URL(url, fileName);
+
+		if (url.getPath().endsWith(DIR_SEPARATOR))
+			return new URL(url.toExternalForm() + fileName);
+
+		return new URL(url.toExternalForm() + DIR_SEPARATOR + fileName);
+	}
+
+	private Feature[] loadFeaturesFromDigest(URL url, SiteModel siteModel) {
 		try {
-			URL digestURL = new URL(location, "digest.zip");
+			URL digestURL = getFileURL(url, "digest.zip");
 			File digestFile = File.createTempFile("digest", ".zip");
 			try {
 				FileUtils.copyStream(digestURL.openStream(), false, new BufferedOutputStream(new FileOutputStream(digestFile)), true);
@@ -133,7 +195,7 @@ public class UpdateSiteArtifactRepository extends AbstractRepository implements
 				continue;
 
 			try {
-				URL featureURL = new URL(location, siteFeature.getURLString());
+				URL featureURL = getFileURL(location, siteFeature.getURLString());
 				Feature feature = parseFeature(featureParser, featureURL);
 				featuresMap.put(key, feature);
 				loadIncludedFeatures(feature, featureParser, featuresMap);
@@ -160,7 +222,7 @@ public class UpdateSiteArtifactRepository extends AbstractRepository implements
 				continue;
 
 			try {
-				URL featureURL = new URL(location, "features/" + entry.getId() + "_" + entry.getVersion() + ".jar");
+				URL featureURL = getFileURL(location, "features/" + entry.getId() + "_" + entry.getVersion() + ".jar");
 				Feature includedFeature = parseFeature(featureParser, featureURL);
 				featuresMap.put(key, includedFeature);
 				loadIncludedFeatures(includedFeature, featureParser, featuresMap);
diff --git a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepositoryFactory.java
index 77ad0b3..2ffe8e7 100644
--- a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepositoryFactory.java
+++ b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepositoryFactory.java
@@ -13,6 +13,7 @@ package org.eclipse.equinox.internal.p2.updatesite.artifact;
 import java.net.URL;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepository;
+import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository.IArtifactRepositoryFactory;
 
 public class UpdateSiteArtifactRepositoryFactory implements IArtifactRepositoryFactory {
@@ -21,9 +22,7 @@ public class UpdateSiteArtifactRepositoryFactory implements IArtifactRepositoryF
 		return null;
 	}
 
-	public IArtifactRepository load(URL location, IProgressMonitor monitor) {
-		if (!location.getPath().endsWith("site.xml"))
-			return null;
+	public IArtifactRepository load(URL location, IProgressMonitor monitor) throws ProvisionException {
 		return new UpdateSiteArtifactRepository(location, monitor);
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/messages.properties b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/messages.properties
index a72f5d0..6de7d9b 100644
--- a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/messages.properties
@@ -1,5 +1,9 @@
 UpdateSiteMetadataRepository_ErrorParsingUpdateSite=Error parsing update site at {0}
 UpdateSiteMetadataRepository_ErrorReadingUpdateSite=Error reading update site at {0}
 UpdateSiteMetadataRepository_PlatformAdminNotRegistered=PlatformAdmin not registered.
-UpdateSiteMetadataRepositoryFactory_ErrorReadingSite=Error reading update site at {0}
-UpdateSiteMetadataRepositoryFactory_InvalidRepositoryLocation=Invalid repository location {0}
+UpdateSiteMetadataRepository_ErrorReadingSite=Error reading update site at {0}
+UpdateSiteMetadataRepository_InvalidRepositoryLocation=Invalid repository location {0}
+UpdateSiteArtifactRepository_ErrorReadingSite=Error reading update site at {0}
+UpdateSiteArtifactRepository_InvalidRepositoryLocation=Invalid repository location {0}
+UpdateSiteArtifactRepository_ErrorParsingUpdateSite=Error parsing update site at {0}
+UpdateSiteArtifactRepository_ErrorReadingUpdateSite=Error reading update site at {0}
diff --git a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepository.java b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepository.java
index 1452139..0873e6e 100644
--- a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepository.java
+++ b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepository.java
@@ -14,7 +14,7 @@ import java.io.*;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.*;
-import java.util.zip.Checksum;
+import java.util.zip.*;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.FileUtils;
 import org.eclipse.equinox.internal.p2.metadata.generator.features.*;
@@ -44,14 +44,30 @@ public class UpdateSiteMetadataRepository extends AbstractRepository implements
 	private static final String FEATURE_DIR = "features/"; //$NON-NLS-1$
 	private static final String FEATURE_TEMP_FILE = "feature"; //$NON-NLS-1$
 	private static final String PROP_SITE_CHECKSUM = "site.checksum"; //$NON-NLS-1$
+	private static final String SITE_FILE = "site.xml"; //$NON-NLS-1$
+	private static final String DIR_SEPARATOR = "/"; //$NON-NLS-1$
 
-	public UpdateSiteMetadataRepository(URL location, URL localRepositoryURL, InputStream is, Checksum checksum) throws ProvisionException {
-		super("update site: " + location.toExternalForm(), null, null, location, null, null);
+	public UpdateSiteMetadataRepository(URL location, IProgressMonitor monitor) throws ProvisionException {
+		super("update site: " + location.toExternalForm(), null, null, location, null, null); //$NON-NLS-1$
 		BundleContext context = Activator.getBundleContext();
+		String stateDirName = Integer.toString(location.toExternalForm().hashCode());
+		File bundleData = context.getDataFile(null);
+		File stateDir = new File(bundleData, stateDirName);
+		URL localRepositoryURL;
+		try {
+			localRepositoryURL = stateDir.toURL();
+		} catch (MalformedURLException e) {
+			// unexpected
+			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, "Failed to create local repository", e)); //$NON-NLS-1$
+		}
 
-		metadataRepository = initializeMetadataRepository(context, localRepositoryURL, "update site implementation - " + location.toExternalForm());
+		metadataRepository = initializeMetadataRepository(context, localRepositoryURL, "update site implementation - " + location.toExternalForm()); //$NON-NLS-1$
 
+		InputStream is = getSiteInputStream(location);
 		try {
+			Checksum checksum = new CRC32();
+			is = new CheckedInputStream(new BufferedInputStream(is), checksum);
+
 			DefaultSiteParser siteParser = new DefaultSiteParser();
 			SiteModel siteModel = siteParser.parse(is);
 
@@ -93,10 +109,10 @@ public class UpdateSiteMetadataRepository extends AbstractRepository implements
 					FeatureEntry entry = featureEntries[j];
 					if (entry.isPlugin() && !entry.isRequires()) {
 						Dictionary mockManifest = new Properties();
-						mockManifest.put("Manifest-Version", "1.0");
-						mockManifest.put("Bundle-ManifestVersion", "2");
-						mockManifest.put("Bundle-SymbolicName", entry.getId());
-						mockManifest.put("Bundle-Version", entry.getVersion());
+						mockManifest.put("Manifest-Version", "1.0"); //$NON-NLS-1$ //$NON-NLS-2$
+						mockManifest.put("Bundle-ManifestVersion", "2"); //$NON-NLS-1$ //$NON-NLS-2$
+						mockManifest.put("Bundle-SymbolicName", entry.getId()); //$NON-NLS-1$
+						mockManifest.put("Bundle-Version", entry.getVersion()); //$NON-NLS-1$
 						BundleDescription bundleDescription = bundleDesciptionFactory.getBundleDescription(mockManifest, null);
 						IArtifactKey key = MetadataGeneratorHelper.createBundleArtifactKey(entry.getId(), entry.getVersion());
 						IInstallableUnit[] bundleIUs = MetadataGeneratorHelper.createEclipseIU(bundleDescription, null, entry.isUnpack(), key, extraProperties);
@@ -139,13 +155,70 @@ public class UpdateSiteMetadataRepository extends AbstractRepository implements
 		} catch (IOException e) {
 			String msg = NLS.bind(Messages.UpdateSiteMetadataRepository_ErrorReadingUpdateSite, location);
 			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_FAILED_READ, msg, e));
+		} finally {
+			safeClose(is);
+		}
+	}
+
+	public static void validate(URL url, IProgressMonitor monitor) throws ProvisionException {
+		InputStream is = null;
+		try {
+			is = getSiteInputStream(url);
+		} finally {
+			safeClose(is);
+		}
+	}
+
+	private static InputStream getSiteInputStream(URL url) throws ProvisionException {
+		try {
+			URL siteURL = getSiteURL(url);
+			return siteURL.openStream();
+		} catch (MalformedURLException e) {
+			String msg = NLS.bind(Messages.UpdateSiteMetadataRepository_InvalidRepositoryLocation, url);
+			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_INVALID_LOCATION, msg, e));
+		} catch (IOException e) {
+			String msg = NLS.bind(Messages.UpdateSiteMetadataRepository_ErrorReadingSite, url);
+			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, msg, e));
+		}
+	}
+
+	private static void safeClose(InputStream stream) {
+		if (stream == null)
+			return;
+		try {
+			stream.close();
+		} catch (IOException e) {
+			//ignore
 		}
 	}
 
-	private Feature[] loadFeaturesFromDigest(URL location, SiteModel siteModel) {
+	private static URL getSiteURL(URL url) throws MalformedURLException {
+		if (url.getPath().endsWith(SITE_FILE))
+			return url;
+
+		if (url.getPath().endsWith(DIR_SEPARATOR))
+			return new URL(url.toExternalForm() + SITE_FILE);
+
+		return new URL(url.toExternalForm() + DIR_SEPARATOR + SITE_FILE);
+	}
+
+	private static URL getFileURL(URL url, String fileName) throws MalformedURLException {
+		if (url.getPath().endsWith(fileName))
+			return url;
+
+		if (url.getPath().endsWith(SITE_FILE))
+			return new URL(url, fileName);
+
+		if (url.getPath().endsWith(DIR_SEPARATOR))
+			return new URL(url.toExternalForm() + fileName);
+
+		return new URL(url.toExternalForm() + DIR_SEPARATOR + fileName);
+	}
+
+	private Feature[] loadFeaturesFromDigest(URL url, SiteModel siteModel) {
 		try {
-			URL digestURL = new URL(location, "digest.zip");
-			File digestFile = File.createTempFile("digest", ".zip");
+			URL digestURL = getFileURL(url, "digest.zip"); //$NON-NLS-1$
+			File digestFile = File.createTempFile("digest", ".zip"); //$NON-NLS-1$ //$NON-NLS-2$
 			try {
 				FileUtils.copyStream(digestURL.openStream(), false, new BufferedOutputStream(new FileOutputStream(digestFile)), true);
 				Feature[] features = new DigestParser().parse(digestFile);
@@ -161,7 +234,7 @@ public class UpdateSiteMetadataRepository extends AbstractRepository implements
 		return null;
 	}
 
-	private Feature[] loadFeaturesFromSiteFeatures(URL location, SiteFeature[] siteFeatures) {
+	private Feature[] loadFeaturesFromSiteFeatures(URL url, SiteFeature[] siteFeatures) {
 		FeatureParser featureParser = new FeatureParser();
 		Map featuresMap = new HashMap();
 		for (int i = 0; i < siteFeatures.length; i++) {
@@ -171,7 +244,7 @@ public class UpdateSiteMetadataRepository extends AbstractRepository implements
 				continue;
 
 			try {
-				URL featureURL = new URL(location, siteFeature.getURLString());
+				URL featureURL = getFileURL(url, siteFeature.getURLString());
 				Feature feature = parseFeature(featureParser, featureURL);
 				featuresMap.put(key, feature);
 				loadIncludedFeatures(feature, featureParser, featuresMap);
diff --git a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepositoryFactory.java
index 5fc204c..7eda55e 100644
--- a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepositoryFactory.java
+++ b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepositoryFactory.java
@@ -10,17 +10,11 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.updatesite.metadata;
 
-import java.io.*;
-import java.net.MalformedURLException;
 import java.net.URL;
-import java.util.zip.*;
 import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.internal.p2.updatesite.Activator;
-import org.eclipse.equinox.internal.p2.updatesite.Messages;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.IMetadataRepositoryFactory;
-import org.eclipse.osgi.util.NLS;
 
 public class UpdateSiteMetadataRepositoryFactory implements IMetadataRepositoryFactory {
 
@@ -28,43 +22,14 @@ public class UpdateSiteMetadataRepositoryFactory implements IMetadataRepositoryF
 		return null;
 	}
 
-	private IMetadataRepository validateAndLoad(URL location, IProgressMonitor monitor, boolean doLoad) throws ProvisionException {
-		if (!location.getPath().endsWith("site.xml")) { //$NON-NLS-1$
-			String msg = NLS.bind(Messages.UpdateSiteMetadataRepositoryFactory_InvalidRepositoryLocation, location);
-			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_INVALID_LOCATION, msg, null));
-		}
-		URL localRepositoryURL = null;
-		InputStream is = null;
-		Checksum checksum = new CRC32();
-
-		try {
-			String stateDirName = Integer.toString(location.toExternalForm().hashCode());
-			File bundleData = Activator.getBundleContext().getDataFile(null);
-			File stateDir = new File(bundleData, stateDirName);
-			localRepositoryURL = stateDir.toURL();
-			is = new CheckedInputStream(new BufferedInputStream(location.openStream()), checksum);
-
-			if (doLoad)
-				return new UpdateSiteMetadataRepository(location, localRepositoryURL, is, checksum);
-		} catch (MalformedURLException e) {
-			String msg = NLS.bind(Messages.UpdateSiteMetadataRepositoryFactory_InvalidRepositoryLocation, location);
-			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_INVALID_LOCATION, msg, e));
-		} catch (IOException e) {
-			String msg = NLS.bind(Messages.UpdateSiteMetadataRepositoryFactory_ErrorReadingSite, location);
-			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_FAILED_READ, msg, e));
-		} finally {
-			safeClose(is);
-		}
-		return null;
-	}
-
 	/*
 	 * (non-Javadoc)
 	 * @see org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.IMetadataRepositoryFactory#validate(java.net.URL, org.eclipse.core.runtime.IProgressMonitor)
 	 */
+
 	public IStatus validate(URL location, IProgressMonitor monitor) {
 		try {
-			validateAndLoad(location, monitor, false);
+			UpdateSiteMetadataRepository.validate(location, monitor);
 		} catch (ProvisionException e) {
 			return e.getStatus();
 		}
@@ -75,16 +40,6 @@ public class UpdateSiteMetadataRepositoryFactory implements IMetadataRepositoryF
 	 * @see org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.IMetadataRepositoryFactory#load(java.net.URL, org.eclipse.core.runtime.IProgressMonitor)
 	 */
 	public IMetadataRepository load(URL location, IProgressMonitor monitor) throws ProvisionException {
-		return validateAndLoad(location, monitor, true);
-	}
-
-	private void safeClose(InputStream stream) {
-		if (stream == null)
-			return;
-		try {
-			stream.close();
-		} catch (IOException e) {
-			//ignore
-		}
+		return new UpdateSiteMetadataRepository(location, monitor);
 	}
 }
commit 78e213fca9d033a3309a27389d835e67828505b3
Author: John Arthorne <johna>
Date:   Thu May 15 18:12:38 2008 +0000

    Copyright attribution for bug 220605

1	0	bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepository.java
1	0	bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepositoryFactory.java
diff --git a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepository.java b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepository.java
index 04675bd..54b3f57 100644
--- a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepository.java
+++ b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepository.java
@@ -7,6 +7,7 @@
  *
  * Contributors:
  *     IBM Corporation - initial API and implementation
+ *     Ray Braithwood (ray@genuitec.com) - fix for bug 220605
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.updatesite.metadata;
 
diff --git a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepositoryFactory.java
index 98dd32a..2be0d50 100644
--- a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepositoryFactory.java
+++ b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepositoryFactory.java
@@ -7,6 +7,7 @@
  *
  * Contributors:
  *     IBM Corporation - initial API and implementation
+ *     Ray Braithwood (ray@genuitec.com) - fix for bug 220605
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.updatesite.metadata;
 

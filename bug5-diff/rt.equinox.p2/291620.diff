commit 9bf43b0f0f8627cebae0878f4399bcf136ecedb0
Author: Pascal Rapicault <prapicau>
Date:   Wed Oct 14 02:52:05 2009 +0000

    Bug 291620 - Make VersionedName API

5	3	bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/DirectorApplication.java
6	4	bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallDescriptionParser.java
5	3	bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallUpdateProductOperation.java
5	4	bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/provisional/p2/installer/InstallDescription.java
1	5	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/IInstallableUnit.java
30	0	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/IVersionedId.java
101	0	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/VersionedId.java
0	118	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/VersionedName.java
5	3	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/internal/p2/publisher/eclipse/ProductFile.java
5	3	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/AbstractPublisherAction.java
2	3	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/RootIUAction.java
4	3	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/EclipseInstallAction.java
8	6	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/InstallPublisherApplication.java
7	5	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/ProductAction.java
8	7	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/ProductFileAdvice.java
3	2	bundles/org.eclipse.equinox.p2.publisher/src_ant/org/eclipse/equinox/internal/p2/publisher/ant/PublisherTask.java
4	3	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/installer/InstallDescriptionParserTest.java
7	6	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/ProductFileTest.java
diff --git a/bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/DirectorApplication.java b/bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/DirectorApplication.java
index 1fe81a0..f2c0a15 100644
--- a/bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/DirectorApplication.java
+++ b/bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/DirectorApplication.java
@@ -12,6 +12,8 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.director.app;
 
+import org.eclipse.equinox.internal.provisional.p2.metadata.IVersionedId;
+
 import java.io.*;
 import java.net.URI;
 import java.net.URISyntaxException;
@@ -159,7 +161,7 @@ public class DirectorApplication implements IApplication {
 	private static void parseIUsArgument(List vnames, String arg) {
 		String[] roots = StringHelper.getArrayFromString(arg, ',');
 		for (int i = 0; i < roots.length; ++i)
-			vnames.add(VersionedName.parse(roots[i]));
+			vnames.add(VersionedId.parse(roots[i]));
 	}
 
 	private static String processFileArgument(String arg) {
@@ -251,7 +253,7 @@ public class DirectorApplication implements IApplication {
 		ArrayList allRoots = new ArrayList();
 		int top = rootNames.size();
 		for (int i = 0; i < top; ++i) {
-			VersionedName rootName = (VersionedName) rootNames.get(i);
+			IVersionedId rootName = (IVersionedId) rootNames.get(i);
 			Version v = rootName.getVersion();
 			Query query = new InstallableUnitQuery(rootName.getId(), Version.emptyVersion.equals(v) ? VersionRange.emptyRange : new VersionRange(v, true, v, true));
 			Collector roots;
@@ -486,7 +488,7 @@ public class DirectorApplication implements IApplication {
 		} else {
 			Iterator r = rootsToList.iterator();
 			while (r.hasNext()) {
-				VersionedName rootName = (VersionedName) r.next();
+				IVersionedId rootName = (IVersionedId) r.next();
 				Version v = rootName.getVersion();
 				Query query = new InstallableUnitQuery(rootName.getId(), Version.emptyVersion.equals(v) ? VersionRange.emptyRange : new VersionRange(v, true, v, true));
 				Collector roots = collectRootIUs(query, null);
diff --git a/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallDescriptionParser.java b/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallDescriptionParser.java
index ae52676..008567e 100644
--- a/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallDescriptionParser.java
+++ b/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallDescriptionParser.java
@@ -11,6 +11,8 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.installer;
 
+import org.eclipse.equinox.internal.provisional.p2.metadata.IVersionedId;
+
 import java.io.*;
 import java.net.URI;
 import java.net.URISyntaxException;
@@ -18,7 +20,7 @@ import java.util.*;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
 import org.eclipse.equinox.internal.provisional.p2.installer.InstallDescription;
-import org.eclipse.equinox.internal.provisional.p2.metadata.VersionedName;
+import org.eclipse.equinox.internal.provisional.p2.metadata.VersionedId;
 
 /**
  * This class is responsible for loading install descriptions from a stream.
@@ -129,7 +131,7 @@ public class InstallDescriptionParser {
 		if (id != null) {
 			String version = properties.getProperty(PROP_ROOT_VERSION);
 			try {
-				description.setRoots(new VersionedName[] {new VersionedName(id, version)});
+				description.setRoots(new IVersionedId[] {new VersionedId(id, version)});
 			} catch (IllegalArgumentException e) {
 				LogHelper.log(new Status(IStatus.ERROR, InstallerActivator.PI_INSTALLER, "Invalid version in install description: " + version, e)); //$NON-NLS-1$
 			}
@@ -141,13 +143,13 @@ public class InstallDescriptionParser {
 			ArrayList roots = new ArrayList(rootList.length);
 			for (int i = 0; i < rootList.length; i++) {
 				try {
-					roots.add(VersionedName.parse(rootList[i]));
+					roots.add(VersionedId.parse(rootList[i]));
 				} catch (IllegalArgumentException e) {
 					LogHelper.log(new Status(IStatus.ERROR, InstallerActivator.PI_INSTALLER, "Invalid version in install description: " + rootList[i], e)); //$NON-NLS-1$
 				}
 			}
 			if (!roots.isEmpty())
-				description.setRoots((VersionedName[]) roots.toArray(new VersionedName[roots.size()]));
+				description.setRoots((IVersionedId[]) roots.toArray(new IVersionedId[roots.size()]));
 		}
 		return description;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallUpdateProductOperation.java b/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallUpdateProductOperation.java
index e445ec0..3a0ee1d 100644
--- a/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallUpdateProductOperation.java
+++ b/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallUpdateProductOperation.java
@@ -11,6 +11,8 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.installer;
 
+import org.eclipse.equinox.internal.provisional.p2.metadata.IVersionedId;
+
 import java.net.URI;
 import java.util.*;
 import org.eclipse.core.runtime.*;
@@ -57,9 +59,9 @@ public class InstallUpdateProductOperation implements IInstallOperation {
 	 */
 	private IInstallableUnit[] computeUnitsToInstall() throws CoreException {
 		ArrayList result = new ArrayList();
-		VersionedName roots[] = installDescription.getRoots();
+		IVersionedId roots[] = installDescription.getRoots();
 		for (int i = 0; i < roots.length; i++) {
-			VersionedName root = roots[i];
+			IVersionedId root = roots[i];
 			IInstallableUnit iu = findUnit(root);
 			if (iu != null)
 				result.add(iu);
@@ -140,7 +142,7 @@ public class InstallUpdateProductOperation implements IInstallOperation {
 	 * Finds and returns the installable unit with the given id, and optionally the
 	 * given version.
 	 */
-	private IInstallableUnit findUnit(VersionedName spec) throws CoreException {
+	private IInstallableUnit findUnit(IVersionedId spec) throws CoreException {
 		String id = spec.getId();
 		if (id == null)
 			throw fail(Messages.Op_NoId);
diff --git a/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/provisional/p2/installer/InstallDescription.java b/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/provisional/p2/installer/InstallDescription.java
index 479c0a7..dc925e9 100644
--- a/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/provisional/p2/installer/InstallDescription.java
+++ b/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/provisional/p2/installer/InstallDescription.java
@@ -11,11 +11,12 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.provisional.p2.installer;
 
+import org.eclipse.equinox.internal.provisional.p2.metadata.IVersionedId;
+
 import java.net.URI;
 import java.util.HashMap;
 import java.util.Map;
 import org.eclipse.core.runtime.IPath;
-import org.eclipse.equinox.internal.provisional.p2.metadata.VersionedName;
 
 /**
  * An install information captures all the data needed to perform a product install.
@@ -31,7 +32,7 @@ public class InstallDescription {
 	private String launcherName;
 	private URI[] metadataRepos;
 	private String productName;
-	private VersionedName[] roots;
+	private IVersionedId[] roots;
 	private final Map profileProperties = new HashMap();
 
 	/**
@@ -147,7 +148,7 @@ public class InstallDescription {
 	 * Returns the set of roots to be installed for this installation
 	 * @return the roots to install
 	 */
-	public VersionedName[] getRoots() {
+	public IVersionedId[] getRoots() {
 		return roots;
 	}
 
@@ -155,7 +156,7 @@ public class InstallDescription {
 	 * Set the list of roots to install
 	 * @param value the set of roots to install
 	 */
-	public void setRoots(VersionedName[] value) {
+	public void setRoots(IVersionedId[] value) {
 		roots = value;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/IInstallableUnit.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/IInstallableUnit.java
index ddfd9b5..b06c733 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/IInstallableUnit.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/IInstallableUnit.java
@@ -17,7 +17,7 @@ import java.util.Map;
  * @noimplement This interface is not intended to be implemented by clients.
  * @noextend This interface is not intended to be extended by clients.
  */
-public interface IInstallableUnit extends Comparable {
+public interface IInstallableUnit extends IVersionedId, Comparable {
 
 	/**
 	 * A capability namespace representing a particular profile flavor.
@@ -190,8 +190,6 @@ public interface IInstallableUnit extends Comparable {
 	 */
 	public IInstallableUnitFragment[] getFragments();
 
-	public String getId();
-
 	/**
 	 * Get an <i>unmodifiable copy</i> of the properties
 	 * associated with the installable unit.
@@ -212,8 +210,6 @@ public interface IInstallableUnit extends Comparable {
 
 	public ITouchpointType getTouchpointType();
 
-	public Version getVersion();
-
 	public boolean isFragment();
 
 	/**
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/IVersionedId.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/IVersionedId.java
new file mode 100644
index 0000000..77184d3
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/IVersionedId.java
@@ -0,0 +1,30 @@
+/*******************************************************************************
+ * Copyright (c) 2009 Cloudsmith Inc. and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     Cloudsmith Inc. - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.provisional.p2.metadata;
+
+/**
+ * An interface representing a (id,version) pair. 
+ */
+public interface IVersionedId {
+	/**
+	 * Returns the id portion of this versioned id.
+	 * 
+	 * @return The id portion of this versioned id.
+	 */
+	String getId();
+
+	/**
+	 * Returns the version portion of this versioned id.
+	 * 
+	 * @return the version portion of this versioned id.
+	 */
+	Version getVersion();
+}
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/VersionedId.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/VersionedId.java
new file mode 100644
index 0000000..3b97f48
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/VersionedId.java
@@ -0,0 +1,101 @@
+/*******************************************************************************
+ * Copyright (c) 2008, 2009 Code 9 and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     Code 9 - initial API and implementation
+ *     EclipseSource - ongoing development
+ *     Thomas Hallgren - Fix for bug 268659
+ *     IBM - ongoing development
+ *******************************************************************************/
+package org.eclipse.equinox.internal.provisional.p2.metadata;
+
+import org.eclipse.equinox.internal.p2.core.helpers.StringHelper;
+
+/**
+ * An object representing a (id,version) pair. 
+ * 
+ * @noextend This class is not intended to be subclassed by clients.
+ */
+public class VersionedId implements IVersionedId {
+	private final String id;
+	private final Version version;
+
+	/**
+	 * Creates and returns a new {@link VersionedId} from the given string specification.  
+	 * The specification must be of the form "id/version", or just "id" if the version is absent
+	 * <p>
+	 * This factory method can be used to reconstruct a {@link VersionedId}
+	 * instance from the string representation produced by a previous invocation of 
+	 * {@link #toString()}.
+	 * 
+	 * @param spec the specification for the versioned id to create
+	 * @return the parsed versioned id
+	 * @throws IllegalArgumentException If <code>spec</code> is improperly
+	 *         formatted.
+	 */
+	public static IVersionedId parse(String spec) {
+		String[] segments = StringHelper.getArrayFromString(spec, '/');
+		return new VersionedId(segments[0], segments.length == 1 ? null : segments[1]);
+	}
+
+	/**
+	 * Creates a new versioned id with the given id and version.
+	 * 
+	 * @param id The identifier
+	 * @param version The version
+	 * @throws IllegalArgumentException If <code>version</code> is improperly
+	 *         formatted.
+	 */
+	public VersionedId(String id, String version) {
+		this.id = id;
+		this.version = Version.parseVersion(version);
+	}
+
+	/**
+	 * Creates a new versioned id with the given id and version.
+	 * 
+	 * @param id The identifier
+	 * @param version The version
+	 */
+	public VersionedId(String id, Version version) {
+		this.id = id;
+		this.version = (version == null) ? Version.emptyVersion : version;
+	}
+
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+
+		if (!(obj instanceof VersionedId))
+			return false;
+
+		VersionedId vname = (VersionedId) obj;
+		return id.equals(vname.id) && version.equals(vname.version);
+	}
+
+	public int hashCode() {
+		return id.hashCode() * 31 + version.hashCode();
+	}
+
+	public String getId() {
+		return id;
+	}
+
+	public Version getVersion() {
+		return version;
+	}
+
+	/**
+	 * Returns a string representation of this versioned id.
+	 * The result can be used to later construct an equal {@link VersionedId}
+	 * instance using {{@link #parse(String)}.
+	 * @return A string representation of this versioned id
+	 */
+	public String toString() {
+		return Version.emptyVersion.equals(version) ? id : id + '/' + version.toString();
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/VersionedName.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/VersionedName.java
deleted file mode 100644
index e6c4a20..0000000
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/VersionedName.java
+++ /dev/null
@@ -1,118 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2008, 2009 Code 9 and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     Code 9 - initial API and implementation
- *     EclipseSource - ongoing development
- *     Thomas Hallgreen - Fix for bug 268659
- *     IBM - ongoing development
- *******************************************************************************/
-package org.eclipse.equinox.internal.provisional.p2.metadata;
-
-import org.eclipse.equinox.internal.p2.core.helpers.StringHelper;
-
-/**
- * An object representing a (name,version) pair. 
- * @TODO Should be consistent in calling the first part either "name" or "id", but not both.
- * 
- * @noextend This class is not intended to be subclassed by clients.
- */
-public class VersionedName {
-	private final String id;
-	private final Version version;
-
-	/**
-	 * Creates and returns a new {@link VersionedName} from the given string specification.  
-	 * The specification must be of the form "name/version", or just "name" if the version is absent
-	 * <p>
-	 * This factory method can be used to reconstruct a {@link VersionedName}
-	 * instance from the string representation produced by a previous invocation of 
-	 * {@link #toString()}.
-	 * 
-	 * @param spec the specification for the versioned name to create
-	 * @return the parsed versioned named
-	 * @throws IllegalArgumentException If <code>spec</code> is improperly
-	 *         formatted.
-	 */
-	public static VersionedName parse(String spec) {
-		String[] segments = StringHelper.getArrayFromString(spec, '/');
-		return new VersionedName(segments[0], segments.length == 1 ? null : segments[1]);
-	}
-
-	/**
-	 * Creates a new versioned name with the given id and version.
-	 * 
-	 * @param id The identifier
-	 * @param version The version
-	 * @throws IllegalArgumentException If <code>version</code> is improperly
-	 *         formatted.
-	 */
-	public VersionedName(String id, String version) {
-		this.id = id;
-		this.version = Version.parseVersion(version);
-	}
-
-	/**
-	 * Creates a new versioned name with the given id and version.
-	 * 
-	 * @param id The identifier
-	 * @param version The version
-	 */
-	public VersionedName(String id, Version version) {
-		this.id = id;
-		this.version = (version == null) ? Version.emptyVersion : version;
-	}
-
-	/* (non-Javadoc)
-	 * @see java.lang.Object#equals(java.lang.Object)
-	 */
-	public boolean equals(Object obj) {
-		if (this == obj)
-			return true;
-
-		if (!(obj instanceof VersionedName))
-			return false;
-
-		VersionedName vname = (VersionedName) obj;
-		return id.equals(vname.id) && version.equals(vname.version);
-	}
-
-	/* (non-Javadoc)
-	 * @see java.lang.Object#hashCode()
-	 */
-	public int hashCode() {
-		return id.hashCode() * 31 + version.hashCode();
-	}
-
-	/**
-	 * Returns the name portion of this versioned name.
-	 * @TODO Should be getName() for consistency?
-	 * 
-	 * @return The name portion of this versioned name.
-	 */
-	public String getId() {
-		return id;
-	}
-
-	/**
-	 * Returns the version portion of this versioned name.
-	 * @return the version portion of this versioned name.
-	 */
-	public Version getVersion() {
-		return version;
-	}
-
-	/**
-	 * Returns a string representation of this versioned name.
-	 * The result can be used to later construct an equal {@link VersionedName}
-	 * instance using {{@link #parse(String)}.
-	 * @return A string representation of this name
-	 */
-	public String toString() {
-		return Version.emptyVersion.equals(version) ? id : id + '/' + version.toString();
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/internal/p2/publisher/eclipse/ProductFile.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/internal/p2/publisher/eclipse/ProductFile.java
index 0281951..e44e9dc 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/internal/p2/publisher/eclipse/ProductFile.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/internal/p2/publisher/eclipse/ProductFile.java
@@ -13,12 +13,14 @@
 
 package org.eclipse.equinox.internal.p2.publisher.eclipse;
 
+import org.eclipse.equinox.internal.provisional.p2.metadata.IVersionedId;
+
 import java.io.*;
 import java.util.*;
 import javax.xml.parsers.SAXParser;
 import javax.xml.parsers.SAXParserFactory;
 import org.eclipse.equinox.internal.provisional.frameworkadmin.BundleInfo;
-import org.eclipse.equinox.internal.provisional.p2.metadata.VersionedName;
+import org.eclipse.equinox.internal.provisional.p2.metadata.VersionedId;
 import org.xml.sax.Attributes;
 import org.xml.sax.InputSource;
 import org.xml.sax.helpers.DefaultHandler;
@@ -640,7 +642,7 @@ public class ProductFile extends DefaultHandler implements IProductDescriptor {
 
 	private void processPlugin(Attributes attributes) {
 		String fragment = attributes.getValue(ATTRIBUTE_FRAGMENT);
-		VersionedName name = new VersionedName(attributes.getValue(ATTRIBUTE_ID), attributes.getValue(ATTRIBUTE_VERSION));
+		IVersionedId name = new VersionedId(attributes.getValue(ATTRIBUTE_ID), attributes.getValue(ATTRIBUTE_VERSION));
 		if (fragment != null && new Boolean(fragment).booleanValue()) {
 			if (fragments == null)
 				fragments = new ArrayList();
@@ -653,7 +655,7 @@ public class ProductFile extends DefaultHandler implements IProductDescriptor {
 	}
 
 	private void processFeature(Attributes attributes) {
-		VersionedName name = new VersionedName(attributes.getValue(ATTRIBUTE_ID), attributes.getValue(ATTRIBUTE_VERSION));
+		IVersionedId name = new VersionedId(attributes.getValue(ATTRIBUTE_ID), attributes.getValue(ATTRIBUTE_VERSION));
 		if (features == null)
 			features = new ArrayList();
 		features.add(name);
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/AbstractPublisherAction.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/AbstractPublisherAction.java
index 03ec34b..ca70250 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/AbstractPublisherAction.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/AbstractPublisherAction.java
@@ -10,6 +10,8 @@
  ******************************************************************************/
 package org.eclipse.equinox.p2.publisher;
 
+import org.eclipse.equinox.internal.provisional.p2.metadata.IVersionedId;
+
 import org.eclipse.equinox.internal.provisional.p2.metadata.Version;
 import org.eclipse.equinox.internal.provisional.p2.metadata.VersionRange;
 
@@ -163,8 +165,8 @@ public abstract class AbstractPublisherAction implements IPublisherAction {
 				IInstallableUnit iu = (IInstallableUnit) next;
 				VersionRange range = new VersionRange(iu.getVersion(), true, iu.getVersion(), true);
 				result.add(MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, iu.getId(), range, iu.getFilter(), false, false));
-			} else if (next instanceof VersionedName) {
-				VersionedName name = (VersionedName) next;
+			} else if (next instanceof IVersionedId) {
+				IVersionedId name = (IVersionedId) next;
 				Version version = name.getVersion();
 				VersionRange range = (version == null || Version.emptyVersion.equals(version)) ? VersionRange.emptyRange : new VersionRange(version, true, version, true);
 				String filter = getFilterAdvice(name);
@@ -174,7 +176,7 @@ public abstract class AbstractPublisherAction implements IPublisherAction {
 		return result;
 	}
 
-	private String getFilterAdvice(VersionedName name) {
+	private String getFilterAdvice(IVersionedId name) {
 		if (info == null)
 			return null;
 		Collection filterAdvice = info.getAdvice(CONFIG_ANY, true, name.getId(), name.getVersion(), IFilterAdvice.class);
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/RootIUAction.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/RootIUAction.java
index 2786120..d1bce4e 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/RootIUAction.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/RootIUAction.java
@@ -136,10 +136,9 @@ public class RootIUAction extends AbstractPublisherAction {
 						IInstallableUnit iu = queryForIU(result, childId, getVersionAdvice(childId));
 						if (iu != null)
 							children.add(iu);
-					} else if (object instanceof VersionedName) {
-						children.add(object);
-					} else if (object instanceof IInstallableUnit)
+					} else if (object instanceof IVersionedId) {
 						children.add(object);
+					}
 				}
 		}
 		return children;
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/EclipseInstallAction.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/EclipseInstallAction.java
index 28a6c0f..2fefc2a 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/EclipseInstallAction.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/EclipseInstallAction.java
@@ -10,13 +10,14 @@
  ******************************************************************************/
 package org.eclipse.equinox.p2.publisher.eclipse;
 
+import org.eclipse.equinox.internal.provisional.p2.metadata.IVersionedId;
+
 import org.eclipse.equinox.internal.provisional.p2.metadata.Version;
 
 import java.io.File;
 import java.util.*;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.publisher.eclipse.ExecutablesDescriptor;
-import org.eclipse.equinox.internal.provisional.p2.metadata.VersionedName;
 import org.eclipse.equinox.p2.publisher.*;
 import org.eclipse.equinox.p2.publisher.actions.*;
 
@@ -27,14 +28,14 @@ public class EclipseInstallAction extends AbstractPublisherAction {
 	protected String name;
 	protected String executableName;
 	protected String flavor;
-	protected VersionedName[] topLevel;
+	protected IVersionedId[] topLevel;
 	protected String[] nonRootFiles;
 	protected boolean start = false;
 
 	protected EclipseInstallAction() {
 	}
 
-	public EclipseInstallAction(String source, String id, Version version, String name, String executableName, String flavor, VersionedName[] topLevel, String[] nonRootFiles, boolean start) {
+	public EclipseInstallAction(String source, String id, Version version, String name, String executableName, String flavor, IVersionedId[] topLevel, String[] nonRootFiles, boolean start) {
 		this.source = source;
 		this.id = id;
 		this.version = version;
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/InstallPublisherApplication.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/InstallPublisherApplication.java
index c3831e8..98c5e02 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/InstallPublisherApplication.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/InstallPublisherApplication.java
@@ -10,11 +10,13 @@
  ******************************************************************************/
 package org.eclipse.equinox.p2.publisher.eclipse;
 
+import org.eclipse.equinox.internal.provisional.p2.metadata.IVersionedId;
+
 import org.eclipse.equinox.internal.provisional.p2.metadata.Version;
 
 import java.net.URISyntaxException;
 import java.util.ArrayList;
-import org.eclipse.equinox.internal.provisional.p2.metadata.VersionedName;
+import org.eclipse.equinox.internal.provisional.p2.metadata.VersionedId;
 import org.eclipse.equinox.p2.publisher.*;
 
 public class InstallPublisherApplication extends AbstractPublisherApplication {
@@ -24,7 +26,7 @@ public class InstallPublisherApplication extends AbstractPublisherApplication {
 	protected String name;
 	protected String executableName;
 	protected String flavor;
-	protected VersionedName[] topLevel;
+	protected IVersionedId[] topLevel;
 	protected boolean start;
 	protected String[] rootExclusions;
 
@@ -57,17 +59,17 @@ public class InstallPublisherApplication extends AbstractPublisherApplication {
 			flavor = parameter;
 
 		if (arg.equalsIgnoreCase("-top")) //$NON-NLS-1$
-			topLevel = createVersionedNameList(parameter);
+			topLevel = createVersionedIdList(parameter);
 
 		if (arg.equalsIgnoreCase("-rootExclusions")) //$NON-NLS-1$
 			rootExclusions = AbstractPublisherAction.getArrayFromString(parameter, ",");
 	}
 
-	private VersionedName[] createVersionedNameList(String parameter) {
+	private IVersionedId[] createVersionedIdList(String parameter) {
 		String[] list = AbstractPublisherAction.getArrayFromString(parameter, ","); //$NON-NLS-1$
-		VersionedName[] result = new VersionedName[list.length];
+		IVersionedId[] result = new IVersionedId[list.length];
 		for (int i = 0; i < result.length; i++)
-			result[i] = VersionedName.parse(list[i]);
+			result[i] = VersionedId.parse(list[i]);
 		return result;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/ProductAction.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/ProductAction.java
index 697be1d..a82b326 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/ProductAction.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/ProductAction.java
@@ -10,13 +10,15 @@
  ******************************************************************************/
 package org.eclipse.equinox.p2.publisher.eclipse;
 
+import org.eclipse.equinox.internal.provisional.p2.metadata.IVersionedId;
+
 import org.eclipse.equinox.internal.provisional.p2.metadata.Version;
 
 import java.io.File;
 import java.util.*;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.publisher.eclipse.IProductDescriptor;
-import org.eclipse.equinox.internal.provisional.p2.metadata.VersionedName;
+import org.eclipse.equinox.internal.provisional.p2.metadata.VersionedId;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.publisher.*;
 import org.eclipse.equinox.p2.publisher.actions.*;
@@ -146,7 +148,7 @@ public class ProductAction extends AbstractPublisherAction {
 		Collection versionAdvice = info.getAdvice(null, true, null, null, IVersionAdvice.class);
 		List result = new ArrayList();
 		for (Iterator i = elements.iterator(); i.hasNext();) {
-			VersionedName element = (VersionedName) i.next();
+			IVersionedId element = (IVersionedId) i.next();
 			Version elementVersion = element.getVersion();
 			if (elementVersion == null || Version.emptyVersion.equals(elementVersion)) {
 				Iterator advice = versionAdvice.iterator();
@@ -162,7 +164,7 @@ public class ProductAction extends AbstractPublisherAction {
 				result.add(unit);
 			} else if (elementVersion != null) {
 				//best effort
-				result.add(new VersionedName(element.getId(), elementVersion));
+				result.add(new VersionedId(element.getId(), elementVersion));
 			}
 			//TODO we could still add a requirement on version 0.0.0 to get any version, but if the
 			//bundle is platform specific we will have broken metadata due to a missing filter
@@ -175,8 +177,8 @@ public class ProductAction extends AbstractPublisherAction {
 			return elements;
 		ArrayList result = new ArrayList(elements.size());
 		for (Iterator i = elements.iterator(); i.hasNext();) {
-			VersionedName elementName = (VersionedName) i.next();
-			result.add(new VersionedName(elementName.getId() + suffix, elementName.getVersion()));
+			IVersionedId elementName = (IVersionedId) i.next();
+			result.add(new VersionedId(elementName.getId() + suffix, elementName.getVersion()));
 		}
 		return result;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/ProductFileAdvice.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/ProductFileAdvice.java
index d707673..31cfa07 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/ProductFileAdvice.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/ProductFileAdvice.java
@@ -11,6 +11,8 @@
  ******************************************************************************/
 package org.eclipse.equinox.p2.publisher.eclipse;
 
+import org.eclipse.equinox.internal.provisional.p2.metadata.IVersionedId;
+
 import org.eclipse.equinox.internal.provisional.p2.metadata.Version;
 
 import java.io.File;
@@ -19,7 +21,6 @@ import org.eclipse.equinox.internal.p2.publisher.eclipse.DataLoader;
 import org.eclipse.equinox.internal.p2.publisher.eclipse.IProductDescriptor;
 import org.eclipse.equinox.internal.provisional.frameworkadmin.BundleInfo;
 import org.eclipse.equinox.internal.provisional.frameworkadmin.ConfigData;
-import org.eclipse.equinox.internal.provisional.p2.metadata.VersionedName;
 import org.eclipse.equinox.p2.publisher.AbstractAdvice;
 import org.eclipse.equinox.p2.publisher.AbstractPublisherAction;
 import org.eclipse.equinox.p2.publisher.actions.ILicenseAdvice;
@@ -247,10 +248,10 @@ public class ProductFileAdvice extends AbstractAdvice implements ILicenseAdvice,
 		set.addAll(Arrays.asList(data.getBundles()));
 
 		for (Iterator i = bundles.iterator(); i.hasNext();) {
-			VersionedName name = (VersionedName) i.next();
+			IVersionedId vid = (IVersionedId) i.next();
 			BundleInfo bundleInfo = new BundleInfo();
-			bundleInfo.setSymbolicName(name.getId());
-			bundleInfo.setVersion(name.getVersion().toString());
+			bundleInfo.setSymbolicName(vid.getId());
+			bundleInfo.setVersion(vid.getVersion().toString());
 			if (!set.contains(bundleInfo))
 				data.addBundle(bundleInfo);
 		}
@@ -265,10 +266,10 @@ public class ProductFileAdvice extends AbstractAdvice implements ILicenseAdvice,
 		// if we find configuration information
 		List bundles = product.getBundles(true);
 		for (Iterator i = bundles.iterator(); i.hasNext();) {
-			VersionedName name = (VersionedName) i.next();
+			IVersionedId vid = (IVersionedId) i.next();
 			BundleInfo bundleInfo = new BundleInfo();
-			bundleInfo.setSymbolicName(name.getId());
-			bundleInfo.setVersion(name.getVersion().toString());
+			bundleInfo.setSymbolicName(vid.getId());
+			bundleInfo.setVersion(vid.getVersion().toString());
 			result.addBundle(bundleInfo);
 		}
 		return result;
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src_ant/org/eclipse/equinox/internal/p2/publisher/ant/PublisherTask.java b/bundles/org.eclipse.equinox.p2.publisher/src_ant/org/eclipse/equinox/internal/p2/publisher/ant/PublisherTask.java
index 4301878..db124d7 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src_ant/org/eclipse/equinox/internal/p2/publisher/ant/PublisherTask.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src_ant/org/eclipse/equinox/internal/p2/publisher/ant/PublisherTask.java
@@ -10,12 +10,13 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.publisher.ant;
 
+import org.eclipse.equinox.internal.provisional.p2.metadata.IVersionedId;
+
 import java.io.File;
 import org.apache.tools.ant.BuildException;
 import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.metadata.Version;
-import org.eclipse.equinox.internal.provisional.p2.metadata.VersionedName;
 import org.eclipse.equinox.p2.publisher.*;
 import org.eclipse.equinox.p2.publisher.eclipse.EclipseInstallAction;
 
@@ -38,7 +39,7 @@ public class PublisherTask extends AbstractPublishTask {
 	private String versionAdvice;
 	private String rootName;
 	private String executableName;
-	private VersionedName[] topLevel;
+	private IVersionedId[] topLevel;
 	private boolean start;
 	private String[] nonRootFiles;
 
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/installer/InstallDescriptionParserTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/installer/InstallDescriptionParserTest.java
index f76c1ba..ceb2ec9 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/installer/InstallDescriptionParserTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/installer/InstallDescriptionParserTest.java
@@ -10,6 +10,8 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.tests.installer;
 
+import org.eclipse.equinox.internal.provisional.p2.metadata.IVersionedId;
+
 import org.eclipse.equinox.internal.provisional.p2.metadata.Version;
 
 import java.io.File;
@@ -17,7 +19,6 @@ import java.io.IOException;
 import java.net.*;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.installer.InstallDescriptionParser;
-import org.eclipse.equinox.internal.provisional.p2.metadata.VersionedName;
 import org.eclipse.equinox.internal.provisional.p2.installer.InstallDescription;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 import org.eclipse.equinox.p2.tests.TestData;
@@ -113,7 +114,7 @@ public class InstallDescriptionParserTest extends AbstractProvisioningTest {
 		assertEquals("1.4", "testFlavor", description.getProfileProperties().get("eclipse.p2.flavor"));
 		assertEquals("1.5", "Test Profile Name", description.getProductName());
 		assertEquals("1.5", "testLauncherName", description.getLauncherName());
-		VersionedName[] roots = description.getRoots();
+		IVersionedId[] roots = description.getRoots();
 		assertEquals("1.7", 2, roots.length);
 		assertEquals("1.8", "testRoot", roots[0].getId());
 		assertEquals("1.9", new Version("2.0"), roots[0].getVersion());
@@ -177,7 +178,7 @@ public class InstallDescriptionParserTest extends AbstractProvisioningTest {
 		assertEquals("1.4", "tooling", description.getProfileProperties().get("eclipse.p2.flavor"));
 		assertEquals("1.5", "Eclipse SDK", description.getProductName());
 		assertEquals("1.5", "eclipse", description.getLauncherName());
-		VersionedName[] roots = description.getRoots();
+		IVersionedId[] roots = description.getRoots();
 		assertEquals("1.7", 1, roots.length);
 		assertEquals("1.8", "sdk", roots[0].getId());
 		assertTrue("1.9", description.isAutoStart());
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/ProductFileTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/ProductFileTest.java
index b4d4ae0..1903624 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/ProductFileTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/ProductFileTest.java
@@ -9,6 +9,8 @@
 ******************************************************************************/
 package org.eclipse.equinox.p2.tests.publisher.actions;
 
+import org.eclipse.equinox.internal.provisional.p2.metadata.IVersionedId;
+
 import org.eclipse.equinox.internal.provisional.p2.metadata.Version;
 
 import java.util.List;
@@ -16,7 +18,6 @@ import java.util.Properties;
 import junit.framework.TestCase;
 import org.eclipse.equinox.internal.p2.publisher.eclipse.ProductFile;
 import org.eclipse.equinox.internal.provisional.frameworkadmin.BundleInfo;
-import org.eclipse.equinox.internal.provisional.p2.metadata.VersionedName;
 import org.eclipse.equinox.p2.tests.TestData;
 
 /**
@@ -70,8 +71,8 @@ public class ProductFileTest extends TestCase {
 	public void testGetBundles() {
 		List bundles = productFile.getBundles(false);
 		assertEquals("1.0", 1, bundles.size());
-		assertEquals("1.1", "org.eclipse.core.runtime", ((VersionedName) bundles.get(0)).getId());
-		assertEquals("1.2", new Version(1, 0, 4), ((VersionedName) bundles.get(0)).getVersion());
+		assertEquals("1.1", "org.eclipse.core.runtime", ((IVersionedId) bundles.get(0)).getId());
+		assertEquals("1.2", new Version(1, 0, 4), ((IVersionedId) bundles.get(0)).getVersion());
 		bundles = productFile.getBundles(true);
 		assertEquals("1.3", 2, bundles.size());
 	}
@@ -94,7 +95,7 @@ public class ProductFileTest extends TestCase {
 	public void testGetFragments() {
 		List fragments = productFile.getFragments();
 		assertEquals("1.0", 1, fragments.size());
-		assertEquals("1.1", "org.eclipse.swt.win32.win32.x86", ((VersionedName) fragments.get(0)).getId());
+		assertEquals("1.1", "org.eclipse.swt.win32.win32.x86", ((IVersionedId) fragments.get(0)).getId());
 	}
 
 	/**
@@ -103,8 +104,8 @@ public class ProductFileTest extends TestCase {
 	public void testGetFeatures() {
 		List features = productFile.getFeatures();
 		assertEquals("1.0", 1, features.size());
-		assertEquals("1.1", "org.eclipse.rcp", ((VersionedName) features.get(0)).getId());
-		assertEquals("1.2", new Version("3.5.0.v20081110-9C9tEvNEla71LZ2jFz-RFB-t"), ((VersionedName) features.get(0)).getVersion());
+		assertEquals("1.1", "org.eclipse.rcp", ((IVersionedId) features.get(0)).getId());
+		assertEquals("1.2", new Version("3.5.0.v20081110-9C9tEvNEla71LZ2jFz-RFB-t"), ((IVersionedId) features.get(0)).getVersion());
 	}
 
 	/**
commit 8a8d47bfb09a2456e8e8addeaa3a2e6febdc64a1
Author: Pascal Rapicault <prapicau>
Date:   Wed Oct 14 14:36:46 2009 +0000

    Bug 291620 - Make VersionedName API

12	2	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/query/InstallableUnitQuery.java
2	3	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/QueryableMetadataRepositoryManagerTest.java
1	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractAntProvisioningTest.java
1	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
2	4	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
6	9	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/LocalMetadataRepositoryTest.java
18	18	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/LocalizationTests.java
2	3	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/actions/CheckTrustAction.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UpdateWizard.java
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/query/InstallableUnitQuery.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/query/InstallableUnitQuery.java
index 625201c..a0152a1 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/query/InstallableUnitQuery.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/query/InstallableUnitQuery.java
@@ -20,7 +20,7 @@ public class InstallableUnitQuery extends MatchQuery {
 	 * A convenience query that will match any {@link IInstallableUnit}
 	 * it encounters.
 	 */
-	public static final InstallableUnitQuery ANY = new InstallableUnitQuery(null);
+	public static final InstallableUnitQuery ANY = new InstallableUnitQuery((String) null);
 
 	private String id;
 	private final VersionRange range;
@@ -57,7 +57,17 @@ public class InstallableUnitQuery extends MatchQuery {
 	 */
 	public InstallableUnitQuery(String id, Version version) {
 		this.id = id;
-		this.range = new VersionRange(version, true, version, true);
+		this.range = (version == null || Version.emptyVersion.equals(version)) ? null : new VersionRange(version, true, version, true);
+	}
+
+	/**
+	 * Creates a query that will match any {@link IInstallableUnit} with the given
+	 * id and version.
+	 * 
+	 * @param versionedId The precise id/version combination that a matching unit must have
+	 */
+	public InstallableUnitQuery(IVersionedId versionedId) {
+		this(versionedId.getId(), versionedId.getVersion());
 	}
 
 	/**
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/QueryableMetadataRepositoryManagerTest.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/QueryableMetadataRepositoryManagerTest.java
index 7485726..71e545d 100644
--- a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/QueryableMetadataRepositoryManagerTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/QueryableMetadataRepositoryManagerTest.java
@@ -10,8 +10,6 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.tests.ui.query;
 
-import org.eclipse.equinox.internal.provisional.p2.metadata.Version;
-
 import java.io.File;
 import java.net.URI;
 import java.util.Collection;
@@ -19,6 +17,7 @@ import org.eclipse.core.tests.harness.CancelingProgressMonitor;
 import org.eclipse.equinox.internal.p2.ui.DefaultQueryProvider;
 import org.eclipse.equinox.internal.p2.ui.model.AvailableIUElement;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.metadata.Version;
 import org.eclipse.equinox.internal.provisional.p2.metadata.query.*;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.repository.IRepository;
@@ -176,7 +175,7 @@ public class QueryableMetadataRepositoryManagerTest extends AbstractQueryTest {
 		assertTrue("2.1", resultCollection.contains(broken));
 
 		// null IUPropertyQuery collects all IUs
-		result = manager.query(new InstallableUnitQuery(null), new Collector(), getMonitor());
+		result = manager.query(new InstallableUnitQuery((String) null), new Collector(), getMonitor());
 		int iuCount = result.size();
 		result = manager.query(new IUPropertyQuery(null, null), new Collector(), getMonitor());
 		assertEquals("2.2", iuCount, result.size());
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractAntProvisioningTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractAntProvisioningTest.java
index caba797..e72c223 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractAntProvisioningTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractAntProvisioningTest.java
@@ -265,7 +265,7 @@ public class AbstractAntProvisioningTest extends AbstractProvisioningTest {
 
 		while (it.hasNext()) {
 			IInstallableUnit sourceIU = (IInstallableUnit) it.next();
-			Collector destinationCollector = destination.query(new InstallableUnitQuery(sourceIU.getId(), sourceIU.getVersion()), new Collector(), null);
+			Collector destinationCollector = destination.query(new InstallableUnitQuery(sourceIU), new Collector(), null);
 			assertEquals(message, 1, destinationCollector.size());
 			assertTrue(message, sourceIU.equals(destinationCollector.iterator().next()));
 		}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
index 31cc897..76f090a 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
@@ -1169,7 +1169,7 @@ public abstract class AbstractProvisioningTest extends TestCase {
 
 		while (it.hasNext()) {
 			IInstallableUnit sourceIU = (IInstallableUnit) it.next();
-			Collector destinationCollector = destinationRepo.query(new InstallableUnitQuery(sourceIU.getId(), sourceIU.getVersion()), new Collector(), null);
+			Collector destinationCollector = destinationRepo.query(new InstallableUnitQuery(sourceIU), new Collector(), null);
 			assertEquals(message, 1, destinationCollector.size());
 			assertEquals(message, sourceIU, (IInstallableUnit) destinationCollector.iterator().next());
 		}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
index 130fb9d..b82177b 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
@@ -10,8 +10,6 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.tests.engine;
 
-import org.eclipse.equinox.internal.provisional.p2.metadata.Version;
-
 import java.io.File;
 import java.util.*;
 import org.eclipse.core.runtime.*;
@@ -331,13 +329,13 @@ public class EngineTest extends AbstractProvisioningTest {
 		InstallableUnitOperand[] installOperands = new InstallableUnitOperand[] {new InstallableUnitOperand(null, iu33)};
 		IStatus result = engine.perform(profile, phaseSet, installOperands, null, new NullProgressMonitor());
 		assertTrue(result.isOK());
-		Iterator ius = profile.query(new InstallableUnitQuery(iu33.getId(), iu33.getVersion()), new Collector(), null).iterator();
+		Iterator ius = profile.query(new InstallableUnitQuery(iu33), new Collector(), null).iterator();
 		assertTrue(ius.hasNext());
 
 		InstallableUnitOperand[] updateOperands = new InstallableUnitOperand[] {new InstallableUnitOperand(iu33, iu34)};
 		result = engine.perform(profile, phaseSet, updateOperands, null, new NullProgressMonitor());
 		assertTrue(result.isOK());
-		ius = profile.query(new InstallableUnitQuery(iu34.getId(), iu34.getVersion()), new Collector(), null).iterator();
+		ius = profile.query(new InstallableUnitQuery(iu34), new Collector(), null).iterator();
 		assertTrue(ius.hasNext());
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/LocalMetadataRepositoryTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/LocalMetadataRepositoryTest.java
index 899e16b..c00214d 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/LocalMetadataRepositoryTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/LocalMetadataRepositoryTest.java
@@ -11,16 +11,13 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.tests.metadata.repository;
 
-import org.eclipse.equinox.internal.provisional.p2.metadata.Version;
-
 import java.io.File;
 import java.net.URI;
 import java.util.*;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.core.eventbus.ProvisioningListener;
 import org.eclipse.equinox.internal.provisional.p2.core.eventbus.SynchronousProvisioningListener;
-import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory;
+import org.eclipse.equinox.internal.provisional.p2.metadata.*;
 import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory.InstallableUnitDescription;
 import org.eclipse.equinox.internal.provisional.p2.metadata.query.Collector;
 import org.eclipse.equinox.internal.provisional.p2.metadata.query.InstallableUnitQuery;
@@ -125,10 +122,10 @@ public class LocalMetadataRepositoryTest extends AbstractProvisioningTest {
 		IMetadataRepository repo = manager.createRepository(repoLocation.toURI(), "TestRepo", IMetadataRepositoryManager.TYPE_SIMPLE_REPOSITORY, null);
 		IInstallableUnit iu = createIU("foo");
 		repo.addInstallableUnits(new IInstallableUnit[] {iu});
-		Collector result = repo.query(new InstallableUnitQuery(null), new Collector(), getMonitor());
+		Collector result = repo.query(new InstallableUnitQuery((String) null), new Collector(), getMonitor());
 		assertTrue("1.0", result.size() == 1);
 		repo.removeAll();
-		result = repo.query(new InstallableUnitQuery(null), new Collector(), getMonitor());
+		result = repo.query(new InstallableUnitQuery((String) null), new Collector(), getMonitor());
 		assertTrue("1.1", result.isEmpty());
 	}
 
@@ -138,13 +135,13 @@ public class LocalMetadataRepositoryTest extends AbstractProvisioningTest {
 		IInstallableUnit iu = createIU("foo");
 		IInstallableUnit iu2 = createIU("bar");
 		repo.addInstallableUnits(new IInstallableUnit[] {iu, iu2});
-		Collector result = repo.query(new InstallableUnitQuery(null), new Collector(), getMonitor());
+		Collector result = repo.query(new InstallableUnitQuery((String) null), new Collector(), getMonitor());
 		assertTrue("1.0", result.size() == 2);
 		repo.removeInstallableUnits(new InstallableUnitQuery("foo"), getMonitor());
-		result = repo.query(new InstallableUnitQuery(null), new Collector(), getMonitor());
+		result = repo.query(new InstallableUnitQuery((String) null), new Collector(), getMonitor());
 		assertTrue("1.1", result.size() == 1);
 		repo.removeInstallableUnits(new InstallableUnitQuery("bar"), getMonitor());
-		result = repo.query(new InstallableUnitQuery(null), new Collector(), getMonitor());
+		result = repo.query(new InstallableUnitQuery((String) null), new Collector(), getMonitor());
 		assertTrue("1.2", result.isEmpty());
 
 	}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/LocalizationTests.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/LocalizationTests.java
index de2fe6d..cc86e85 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/LocalizationTests.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/LocalizationTests.java
@@ -50,7 +50,7 @@ public class LocalizationTests extends TestCase {
 		File file = TestData.getFile("localizationtests/foofeature", "");
 		FeaturesAction featuresAction = new FeaturesAction(new File[] {file});
 		featuresAction.perform(info, results, monitor);
-		IUPropertyUtils utils = new IUPropertyUtils(results.query(new InstallableUnitQuery(null), new Collector(), monitor));
+		IUPropertyUtils utils = new IUPropertyUtils(results.query(new InstallableUnitQuery((String) null), new Collector(), monitor));
 		Collector collector = results.query(new InstallableUnitQuery("fooFeature.feature.group"), new Collector(), monitor);
 		IInstallableUnit iu = (IInstallableUnit) collector.iterator().next();
 		assertEquals("1.0", "Foo English Feature", utils.getIUProperty(iu, IInstallableUnit.PROP_NAME));
@@ -64,7 +64,7 @@ public class LocalizationTests extends TestCase {
 		File file = TestData.getFile("localizationtests/foofeature", "");
 		FeaturesAction featuresAction = new FeaturesAction(new File[] {file});
 		featuresAction.perform(info, results, monitor);
-		IUPropertyUtils utils = new IUPropertyUtils(results.query(new InstallableUnitQuery(null), new Collector(), monitor));
+		IUPropertyUtils utils = new IUPropertyUtils(results.query(new InstallableUnitQuery((String) null), new Collector(), monitor));
 		Collector collector = results.query(new InstallableUnitQuery("fooFeature.feature.group"), new Collector(), monitor);
 		IInstallableUnit iu = (IInstallableUnit) collector.iterator().next();
 		assertEquals("1.0", "Foo English Feature", utils.getIUProperty(iu, IInstallableUnit.PROP_NAME, Locale.ENGLISH));
@@ -78,7 +78,7 @@ public class LocalizationTests extends TestCase {
 		File file = TestData.getFile("localizationtests/foofeature", "");
 		FeaturesAction featuresAction = new FeaturesAction(new File[] {file});
 		featuresAction.perform(info, results, monitor);
-		IUPropertyUtils utils = new IUPropertyUtils(results.query(new InstallableUnitQuery(null), new Collector(), monitor));
+		IUPropertyUtils utils = new IUPropertyUtils(results.query(new InstallableUnitQuery((String) null), new Collector(), monitor));
 		Collector collector = results.query(new InstallableUnitQuery("fooFeature.feature.group"), new Collector(), monitor);
 		IInstallableUnit iu = (IInstallableUnit) collector.iterator().next();
 		assertEquals("1.0", "Foo German Feature", utils.getIUProperty(iu, IInstallableUnit.PROP_NAME, Locale.GERMAN));
@@ -92,7 +92,7 @@ public class LocalizationTests extends TestCase {
 		File file = TestData.getFile("localizationtests/foofeature", "");
 		FeaturesAction featuresAction = new FeaturesAction(new File[] {file});
 		featuresAction.perform(info, results, monitor);
-		IUPropertyUtils utils = new IUPropertyUtils(results.query(new InstallableUnitQuery(null), new Collector(), monitor));
+		IUPropertyUtils utils = new IUPropertyUtils(results.query(new InstallableUnitQuery((String) null), new Collector(), monitor));
 		Collector collector = results.query(new InstallableUnitQuery("fooFeature.feature.jar"), new Collector(), monitor);
 		IInstallableUnit iu = (IInstallableUnit) collector.iterator().next();
 		assertEquals("1.0", "Foo English Feature", utils.getIUProperty(iu, IInstallableUnit.PROP_NAME));
@@ -106,7 +106,7 @@ public class LocalizationTests extends TestCase {
 		File file = TestData.getFile("localizationtests/foofeature", "");
 		FeaturesAction featuresAction = new FeaturesAction(new File[] {file});
 		featuresAction.perform(info, results, monitor);
-		IUPropertyUtils utils = new IUPropertyUtils(results.query(new InstallableUnitQuery(null), new Collector(), monitor));
+		IUPropertyUtils utils = new IUPropertyUtils(results.query(new InstallableUnitQuery((String) null), new Collector(), monitor));
 		Collector collector = results.query(new InstallableUnitQuery("fooFeature.feature.jar"), new Collector(), monitor);
 		IInstallableUnit iu = (IInstallableUnit) collector.iterator().next();
 		assertEquals("1.0", "Foo English Feature", utils.getIUProperty(iu, IInstallableUnit.PROP_NAME, Locale.ENGLISH));
@@ -120,7 +120,7 @@ public class LocalizationTests extends TestCase {
 		File file = TestData.getFile("localizationtests/foofeature", "");
 		FeaturesAction featuresAction = new FeaturesAction(new File[] {file});
 		featuresAction.perform(info, results, monitor);
-		IUPropertyUtils utils = new IUPropertyUtils(results.query(new InstallableUnitQuery(null), new Collector(), monitor));
+		IUPropertyUtils utils = new IUPropertyUtils(results.query(new InstallableUnitQuery((String) null), new Collector(), monitor));
 		Collector collector = results.query(new InstallableUnitQuery("fooFeature.feature.jar"), new Collector(), monitor);
 		IInstallableUnit iu = (IInstallableUnit) collector.iterator().next();
 		assertEquals("1.0", "Foo German Feature", utils.getIUProperty(iu, IInstallableUnit.PROP_NAME, Locale.GERMAN));
@@ -134,7 +134,7 @@ public class LocalizationTests extends TestCase {
 		File file = TestData.getFile("localizationtests/foobundle", "");
 		BundlesAction action = new BundlesAction(new File[] {file});
 		action.perform(info, results, monitor);
-		IUPropertyUtils utils = new IUPropertyUtils(results.query(new InstallableUnitQuery(null), new Collector(), monitor));
+		IUPropertyUtils utils = new IUPropertyUtils(results.query(new InstallableUnitQuery((String) null), new Collector(), monitor));
 		Collector collector = results.query(new InstallableUnitQuery("foobundle"), new Collector(), monitor);
 		IInstallableUnit iu = (IInstallableUnit) collector.iterator().next();
 		assertEquals("1.0", "Foo English Bundle", utils.getIUProperty(iu, IInstallableUnit.PROP_NAME, Locale.ENGLISH));
@@ -145,7 +145,7 @@ public class LocalizationTests extends TestCase {
 		File file = TestData.getFile("localizationtests/foobundle", "");
 		BundlesAction action = new BundlesAction(new File[] {file});
 		action.perform(info, results, monitor);
-		IUPropertyUtils utils = new IUPropertyUtils(results.query(new InstallableUnitQuery(null), new Collector(), monitor));
+		IUPropertyUtils utils = new IUPropertyUtils(results.query(new InstallableUnitQuery((String) null), new Collector(), monitor));
 		Collector collector = results.query(new InstallableUnitQuery("foobundle"), new Collector(), monitor);
 		IInstallableUnit iu = (IInstallableUnit) collector.iterator().next();
 		assertEquals("1.0", "Foo German Bundle", utils.getIUProperty(iu, IInstallableUnit.PROP_NAME, Locale.GERMAN));
@@ -156,7 +156,7 @@ public class LocalizationTests extends TestCase {
 		File file = TestData.getFile("localizationtests/barbundle", "");
 		BundlesAction action = new BundlesAction(new File[] {file});
 		action.perform(info, results, monitor);
-		IUPropertyUtils utils = new IUPropertyUtils(results.query(new InstallableUnitQuery(null), new Collector(), monitor));
+		IUPropertyUtils utils = new IUPropertyUtils(results.query(new InstallableUnitQuery((String) null), new Collector(), monitor));
 		Collector collector = results.query(new InstallableUnitQuery("barbundle"), new Collector(), monitor);
 		IInstallableUnit iu = (IInstallableUnit) collector.iterator().next();
 		assertEquals("1.0", "Bar English Bundle", utils.getIUProperty(iu, IInstallableUnit.PROP_NAME, Locale.ENGLISH));
@@ -167,7 +167,7 @@ public class LocalizationTests extends TestCase {
 		File file = TestData.getFile("localizationtests/barbundle", "");
 		BundlesAction action = new BundlesAction(new File[] {file});
 		action.perform(info, results, monitor);
-		IUPropertyUtils utils = new IUPropertyUtils(results.query(new InstallableUnitQuery(null), new Collector(), monitor));
+		IUPropertyUtils utils = new IUPropertyUtils(results.query(new InstallableUnitQuery((String) null), new Collector(), monitor));
 		Collector collector = results.query(new InstallableUnitQuery("barbundle"), new Collector(), monitor);
 		IInstallableUnit iu = (IInstallableUnit) collector.iterator().next();
 		assertEquals("1.0", "Bar German Bundle", utils.getIUProperty(iu, IInstallableUnit.PROP_NAME, Locale.GERMAN));
@@ -180,7 +180,7 @@ public class LocalizationTests extends TestCase {
 		BundlesAction action = new BundlesAction(new File[] {bundle, fragment});
 		action.perform(info, results, monitor);
 
-		IUPropertyUtils utils = new IUPropertyUtils(results.query(new InstallableUnitQuery(null), new Collector(), monitor));
+		IUPropertyUtils utils = new IUPropertyUtils(results.query(new InstallableUnitQuery((String) null), new Collector(), monitor));
 		Collector collector = results.query(new InstallableUnitQuery("foobundle2"), new Collector(), monitor);
 		IInstallableUnit iu = (IInstallableUnit) collector.iterator().next();
 		assertEquals("1.0", "Foo English Bundle - Translated in the Fragment", utils.getIUProperty(iu, IInstallableUnit.PROP_NAME, Locale.ENGLISH));
@@ -193,7 +193,7 @@ public class LocalizationTests extends TestCase {
 		BundlesAction action = new BundlesAction(new File[] {bundle, fragment});
 		action.perform(info, results, monitor);
 
-		IUPropertyUtils utils = new IUPropertyUtils(results.query(new InstallableUnitQuery(null), new Collector(), monitor));
+		IUPropertyUtils utils = new IUPropertyUtils(results.query(new InstallableUnitQuery((String) null), new Collector(), monitor));
 		Collector collector = results.query(new InstallableUnitQuery("foobundle2"), new Collector(), monitor);
 		IInstallableUnit iu = (IInstallableUnit) collector.iterator().next();
 		assertEquals("1.0", "Foo German Bundle - Translated in the Fragment", utils.getIUProperty(iu, IInstallableUnit.PROP_NAME, Locale.GERMAN));
@@ -206,7 +206,7 @@ public class LocalizationTests extends TestCase {
 		BundlesAction action = new BundlesAction(new File[] {bundle, fragment});
 		action.perform(info, results, monitor);
 
-		IUPropertyUtils utils = new IUPropertyUtils(results.query(new InstallableUnitQuery(null), new Collector(), monitor));
+		IUPropertyUtils utils = new IUPropertyUtils(results.query(new InstallableUnitQuery((String) null), new Collector(), monitor));
 		Collector collector = results.query(new InstallableUnitQuery("barbundle2"), new Collector(), monitor);
 		IInstallableUnit iu = (IInstallableUnit) collector.iterator().next();
 		assertEquals("1.0", "Bar English Bundle - Translated in the Fragment", utils.getIUProperty(iu, IInstallableUnit.PROP_NAME, Locale.ENGLISH));
@@ -219,7 +219,7 @@ public class LocalizationTests extends TestCase {
 		BundlesAction action = new BundlesAction(new File[] {bundle, fragment});
 		action.perform(info, results, monitor);
 
-		IUPropertyUtils utils = new IUPropertyUtils(results.query(new InstallableUnitQuery(null), new Collector(), monitor));
+		IUPropertyUtils utils = new IUPropertyUtils(results.query(new InstallableUnitQuery((String) null), new Collector(), monitor));
 		Collector collector = results.query(new InstallableUnitQuery("barbundle2"), new Collector(), monitor);
 		IInstallableUnit iu = (IInstallableUnit) collector.iterator().next();
 		assertEquals("1.0", "Bar German Bundle - Translated in the Fragment", utils.getIUProperty(iu, IInstallableUnit.PROP_NAME, Locale.GERMAN));
@@ -232,7 +232,7 @@ public class LocalizationTests extends TestCase {
 		BundlesAction action = new BundlesAction(new File[] {bundle, fragment});
 		action.perform(info, results, monitor);
 
-		IUPropertyUtils utils = new IUPropertyUtils(results.query(new InstallableUnitQuery(null), new Collector(), monitor));
+		IUPropertyUtils utils = new IUPropertyUtils(results.query(new InstallableUnitQuery((String) null), new Collector(), monitor));
 		Collector collector = results.query(new InstallableUnitQuery("barfragment2"), new Collector(), monitor);
 		IInstallableUnit iu = (IInstallableUnit) collector.iterator().next();
 		assertEquals("1.0", "English Fragment Name", utils.getIUProperty(iu, IInstallableUnit.PROP_NAME, Locale.ENGLISH));
@@ -245,7 +245,7 @@ public class LocalizationTests extends TestCase {
 		BundlesAction action = new BundlesAction(new File[] {bundle, fragment});
 		action.perform(info, results, monitor);
 
-		IUPropertyUtils utils = new IUPropertyUtils(results.query(new InstallableUnitQuery(null), new Collector(), monitor));
+		IUPropertyUtils utils = new IUPropertyUtils(results.query(new InstallableUnitQuery((String) null), new Collector(), monitor));
 		Collector collector = results.query(new InstallableUnitQuery("barfragment2"), new Collector(), monitor);
 		IInstallableUnit iu = (IInstallableUnit) collector.iterator().next();
 		assertEquals("1.0", "German Fragment Name", utils.getIUProperty(iu, IInstallableUnit.PROP_NAME, Locale.GERMAN));
@@ -261,7 +261,7 @@ public class LocalizationTests extends TestCase {
 		action.perform(info, results, monitor);
 		siteAction.perform(info, results, monitor);
 
-		IUPropertyUtils utils = new IUPropertyUtils(results.query(new InstallableUnitQuery(null), new Collector(), monitor));
+		IUPropertyUtils utils = new IUPropertyUtils(results.query(new InstallableUnitQuery((String) null), new Collector(), monitor));
 		Collector collector = results.query(new InstallableUnitQuery("foo.new_category_1"), new Collector(), monitor);
 		IInstallableUnit iu = (IInstallableUnit) collector.iterator().next();
 		assertEquals("1.0", "English Category Name", utils.getIUProperty(iu, IInstallableUnit.PROP_NAME, Locale.ENGLISH));
@@ -278,7 +278,7 @@ public class LocalizationTests extends TestCase {
 		action.perform(info, results, monitor);
 		siteAction.perform(info, results, monitor);
 
-		IUPropertyUtils utils = new IUPropertyUtils(results.query(new InstallableUnitQuery(null), new Collector(), monitor));
+		IUPropertyUtils utils = new IUPropertyUtils(results.query(new InstallableUnitQuery((String) null), new Collector(), monitor));
 		Collector collector = results.query(new InstallableUnitQuery("foo.new_category_1"), new Collector(), monitor);
 		IInstallableUnit iu = (IInstallableUnit) collector.iterator().next();
 		assertEquals("1.0", "German Category Name", utils.getIUProperty(iu, IInstallableUnit.PROP_NAME, Locale.GERMAN));
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/actions/CheckTrustAction.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/actions/CheckTrustAction.java
index 9e5fffa..027ef3d 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/actions/CheckTrustAction.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/actions/CheckTrustAction.java
@@ -10,8 +10,6 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.touchpoint.eclipse.actions;
 
-import org.eclipse.equinox.internal.provisional.p2.metadata.query.Collector;
-
 import java.io.File;
 import java.util.Collection;
 import java.util.Map;
@@ -23,6 +21,7 @@ import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
 import org.eclipse.equinox.internal.provisional.p2.engine.ProvisioningAction;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.metadata.query.Collector;
 import org.eclipse.equinox.internal.provisional.p2.metadata.query.InstallableUnitQuery;
 
 /**
@@ -42,7 +41,7 @@ public class CheckTrustAction extends ProvisioningAction {
 			return null;
 		IProfile profile = (IProfile) parameters.get(ActionConstants.PARM_PROFILE);
 		//if the IU is already in the profile there is nothing to do
-		if (!profile.available(new InstallableUnitQuery(iu.getId(), iu.getVersion()), new Collector(), null).isEmpty())
+		if (!profile.available(new InstallableUnitQuery(iu), new Collector(), null).isEmpty())
 			return null;
 		Collection bundleFiles = (Collection) parameters.get(ActionConstants.PARM_ARTIFACT_FILES);
 		IArtifactKey[] artifacts = iu.getArtifacts();
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UpdateWizard.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UpdateWizard.java
index 3539adb..9b0da56 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UpdateWizard.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/UpdateWizard.java
@@ -104,7 +104,7 @@ public class UpdateWizard extends WizardWithLicenses {
 					// In the case of patches, it's possible that a patch is returned as an available update
 					// even though it is already installed, because we are querying each IU for updates individually.
 					// For now, we ignore any proposed update that is already installed.
-					Collector alreadyInstalled = profile.query(new InstallableUnitQuery(iu.getId(), iu.getVersion()), new Collector(), null);
+					Collector alreadyInstalled = profile.query(new InstallableUnitQuery(iu), new Collector(), null);
 					if (alreadyInstalled.isEmpty()) {
 						toBeUpdated.add(iusToUpdate[i]);
 						AvailableUpdateElement element = new AvailableUpdateElement(root, iu, iusToUpdate[i], profileId, true);

commit c3b6c4d563e45f0048a0f0c69336009bc0add6af
Author: John Arthorne <johna>
Date:   Wed Nov 7 21:31:56 2007 +0000

    Bug 181297 [prov] Review why we have a copy of MultiStatus

3	2	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
0	264	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/helpers/MultiStatus.java
5	6	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/XMLParser.java
3	5	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/TouchpointManager.java
3	3	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Engine.java
4	4	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/EngineSession.java
33	24	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Phase.java
8	7	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/PhaseSet.java
1	2	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/TestArtifactRepository.java
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
index 9326887..b159d99 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
@@ -14,7 +14,6 @@ import java.net.URL;
 import java.util.*;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.artifact.repository.*;
-import org.eclipse.equinox.internal.p2.core.helpers.MultiStatus;
 import org.eclipse.equinox.p2.artifact.repository.*;
 import org.eclipse.equinox.p2.artifact.repository.processing.ProcessingStep;
 import org.eclipse.equinox.p2.artifact.repository.processing.ProcessingStepHandler;
@@ -93,7 +92,9 @@ public class SimpleArtifactRepository extends AbstractArtifactRepository impleme
 			for (int i = 0; i < requests.length; i++) {
 				if (monitor.isCanceled())
 					return Status.CANCEL_STATUS;
-				overallStatus.add(getArtifact((ArtifactRequest) requests[i], subMonitor.newChild(1)));
+				IStatus result = getArtifact((ArtifactRequest) requests[i], subMonitor.newChild(1));
+				if (!result.isOK())
+					overallStatus.add(result);
 			}
 			return (monitor.isCanceled() ? Status.CANCEL_STATUS : overallStatus);
 		} finally {
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/helpers/MultiStatus.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/helpers/MultiStatus.java
deleted file mode 100644
index 813cc6e..0000000
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/helpers/MultiStatus.java
+++ /dev/null
@@ -1,264 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.p2.core.helpers;
-
-import java.util.*;
-import org.eclipse.core.runtime.*;
-
-/**
- * An variation of the MultiStatus. Note that this does not
- * extend runtime.MultiStatus, instead it extends Status, because
- * the purpose of this class is to avoid a few shortcomings of
- * runtime.MultiStatus. This is different as follows:
- *      - Add only non-OK status as child (this prevents bloat).
- *      - Children is a list instead of an array; helps when add()
- *        is called more often than getChildren()
- */
-public class MultiStatus extends Status {
-
-	public final static String bundleId = "org.eclipse.equinox.p2"; //$NON-NLS-1$
-	public static final int STATUS_CODE_SUCCESS = 0;
-
-	// Use ArrayList rather than List so ensureCapacity() is available.
-	private ArrayList children = null;
-
-	/**
-	 * Uses the default code, STATUS_CODE_SUCCESS and an empty message.
-	 * Either set the message later, or add this to another MultiStatus.
-	 */
-	public MultiStatus() {
-		this(STATUS_CODE_SUCCESS, ""); //$NON-NLS-1$
-	}
-
-	/**
-	 * Uses the default code, STATUS_CODE_SUCCESS.
-	 * @param msg The status message.
-	 */
-	public MultiStatus(String msg) {
-		this(STATUS_CODE_SUCCESS, msg);
-	}
-
-	/**
-	 * A MultiStatus with one child.
-	 */
-	public MultiStatus(String msg, IStatus child) {
-		this(msg);
-		add(child);
-	}
-
-	/**
-	 * This provides a way to use a specific code to
-	 * indicate whether this status has been 'touched'
-	 * or not. This will differentiate "operation done
-	 * and successful" from "operation was not done and
-	 * successful" if code < STATUS_CODE_SUCCESS.
-	 * @param code The status code.
-	 * @param msg The status message.
-	 */
-	public MultiStatus(int code, String msg) {
-		this(code, msg, null);
-	}
-
-	/**
-	 * A MultiStatus with an exception.
-	 */
-	public MultiStatus(int code, String msg, Throwable exception) {
-		this(code, msg, null, exception);
-	}
-
-	/**
-	 * A MultiStatus with children.
-	 */
-	public MultiStatus(int code, String msg, IStatus[] nested, Throwable exception) {
-		this(OK, bundleId, code, msg, nested, exception);
-	}
-
-	/**
-	 * For creation from outside of the default plug-in.
-	 */
-	public MultiStatus(String pluginId, int code, String msg, Throwable exception) {
-		this(OK, pluginId, code, msg, null, exception);
-	}
-
-	/**
-	 * For creation from outside of the default plugin and with children.
-	 */
-	public MultiStatus(String pluginId, int code, IStatus[] nested, String msg, Throwable exception) {
-		this(OK, pluginId, code, msg, nested, exception);
-	}
-
-	/**
-	 * A MultiStatus with everything.
-	 */
-	public MultiStatus(int severity, String pluginId, int code, String msg, IStatus[] nested, Throwable exception) {
-		super(severity, pluginId, code, msg, exception);
-		if (nested != null && nested.length > 0) {
-			addAll(Arrays.asList(nested));
-		}
-	}
-
-	/**
-	 * A new MultiStatus with no children, based on a Status.
-	 */
-	public MultiStatus(Status status) {
-		super(status.getSeverity(), status.getPlugin(), status.getCode(), status.getMessage(), status.getException());
-	}
-
-	/**
-	 * Does this status indicate an error or cancellation.
-	 */
-	public boolean isErrorOrCancel() {
-		return matches(ERROR | CANCEL);
-	}
-
-	public void setCanceled() {
-		setSeverity(getSeverity() | CANCEL);
-	}
-
-	public void setMessage(String message) {
-		super.setMessage(message);
-	}
-
-	/**
-	 * Adds the given status as a child. Even if child is a
-	 * multi-status it is attached as a single child. This
-	 * helps in creating a tree instead of a flat list.
-	 * This guards against a null child. It will add the child
-	 * to the children only if the child has a non-ok severity.
-	 * @param child An IStatus object to be added as a child.
-	 */
-	public void add(IStatus child) {
-		if (child == null)
-			return;
-		setCumulativeCode(child);
-		// Add only non-OK children
-		if (!child.isOK()) {
-			if (child.isMultiStatus() && child.getMessage().length() == 0) {
-				addAll(child); // no message at root so just add children
-			} else {
-				ensureExtraCapacity(1);
-				children.add(child);
-			}
-			setCumulativeSeverity(child);
-		}
-	}
-
-	/**
-	 * Add a collection as children of this MultiStatus, using add().
-	 */
-	public void addAll(Collection nested) {
-		ensureExtraCapacity(nested.size());
-		for (Iterator i = nested.iterator(); i.hasNext();) {
-			IStatus child = (IStatus) i.next();
-			add(child);
-		}
-	}
-
-	/**
-	 * Adds the children of the given status as its own
-	 * children. This internally uses add(IStatus). This
-	 * guards against a null status.
-	 * @param status A MultiStatus IStatus object whose children
-	 * are to be added to this children.
-	 */
-	public void addAll(IStatus status) {
-		if (status == null || !status.isMultiStatus()) {
-			add(status);
-			return;
-		}
-		IStatus[] nested = status.getChildren();
-		ensureExtraCapacity(nested.length);
-		for (int i = 0; i < nested.length; i++) {
-			add(nested[i]);
-		}
-	}
-
-	/**
-	 * Merges the given status into this MultiStatus.
-	 * Equivalent to <code>add(status)</code> if the
-	 * given status is not a mMultiStatus. 
-	 * Equivalent to <code>addAll(status)</code> if the
-	 * given status is a MultiStatus. 
-	 *
-	 * @param status the status to merge into this one
-	 * @see #add(IStatus)
-	 * @see #addAll(IStatus)
-	 */
-	public void merge(IStatus status) {
-		Assert.isLegal(status != null);
-		if (!status.isMultiStatus()) {
-			add(status);
-		} else {
-			addAll(status);
-		}
-	}
-
-	/*
-	 * @see IStatus#getChildren()
-	 */
-	public IStatus[] getChildren() {
-		IStatus[] result = new IStatus[children == null ? 0 : children.size()];
-		if (result.length > 0) {
-			children.toArray(result);
-		}
-		return result;
-	}
-
-	/*
-	 * @see IStatus#isMultiStatus()
-	 */
-	public boolean isMultiStatus() {
-		return true;
-	}
-
-	// Ensure we have space for count more children,
-	// allocate or extends as needed.
-	private void ensureExtraCapacity(int count) {
-		if (this.children == null) {
-			this.children = new ArrayList(count < 4 ? 4 : count);
-		} else {
-			this.children.ensureCapacity(this.children.size() + count);
-		}
-	}
-
-	private void setCumulativeSeverity(IStatus child) {
-		int childSeverity = child.getSeverity();
-		if (childSeverity > this.getSeverity()) {
-			this.setSeverity(childSeverity);
-		}
-	}
-
-	private void setCumulativeCode(IStatus child) {
-		int childCode = child.getCode();
-		if (childCode > this.getCode()) {
-			this.setCode(childCode);
-		}
-	}
-
-	// This implementation of getMessage causes problems: in add(IStatus) we test
-	// child.getMessage().length() == 0.  This change prevents that from ever being the case.
-	// We want adding a MultiStatus with no message to be equivalent to adding its children.
-	//    /**
-	//     *  If the message is empty, iterates through the children at the time of
-	//     *  invocation of this message and returns the first non-blank message
-	//     *  @return Message string
-	//     */
-	//    public String getMessage() {
-	//        String msg = super.getMessage();
-	//        if (this.children != null) {
-	//            for (Iterator i = this.children.iterator(); msg.trim().length() == 0 && i.hasNext(); ) {
-	//                IStatus status = (IStatus) i.next();
-	//                msg = status.getMessage();
-	//            }
-	//        }
-	//        return msg;
-	//    }
-}
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/XMLParser.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/XMLParser.java
index d4cf8e4..7d204b4 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/XMLParser.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/XMLParser.java
@@ -13,9 +13,8 @@ package org.eclipse.equinox.internal.p2.persistence;
 import java.util.List;
 import java.util.StringTokenizer;
 import javax.xml.parsers.*;
-import org.eclipse.core.runtime.IStatus;
-import org.eclipse.core.runtime.Status;
-import org.eclipse.equinox.internal.p2.core.helpers.MultiStatus;
+import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.internal.p2.core.Activator;
 import org.eclipse.equinox.internal.p2.core.helpers.OrderedProperties;
 import org.eclipse.osgi.service.resolver.VersionRange;
 import org.eclipse.osgi.util.NLS;
@@ -62,7 +61,7 @@ public abstract class XMLParser extends DefaultHandler implements XMLConstants {
 	}
 
 	public boolean isValidXML() {
-		return (status == null || !status.isErrorOrCancel());
+		return (status == null || !status.matches(IStatus.ERROR | IStatus.CANCEL));
 	}
 
 	private static SAXParserFactory acquireXMLParsing(BundleContext context) {
@@ -503,11 +502,11 @@ public abstract class XMLParser extends DefaultHandler implements XMLConstants {
 		int columnNumber = 0;
 
 		public ParserStatus(int severity, int code, String message) {
-			super(severity, MultiStatus.bundleId, code, message, null);
+			super(severity, Activator.ID, code, message, null);
 		}
 
 		public ParserStatus(int severity, int code, String message, int lineNumber, int columnNumber) {
-			super(severity, MultiStatus.bundleId, code, message, null);
+			super(severity, Activator.ID, code, message, null);
 			setLineNumber(lineNumber);
 			setColumnNumber(columnNumber);
 		}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/TouchpointManager.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/TouchpointManager.java
index e466dca..6e718f9 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/TouchpointManager.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/TouchpointManager.java
@@ -13,7 +13,6 @@ package org.eclipse.equinox.internal.p2.engine;
 import java.util.*;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
-import org.eclipse.equinox.internal.p2.core.helpers.MultiStatus;
 import org.eclipse.equinox.p2.engine.Touchpoint;
 import org.eclipse.equinox.p2.metadata.TouchpointType;
 import org.eclipse.osgi.util.NLS;
@@ -155,7 +154,7 @@ public class TouchpointManager implements IRegistryChangeListener {
 	}
 
 	public IStatus validateTouchpoints(String[] requiredTypes) {
-		MultiStatus status = (touchpointEntries == null ? initializeTouchpoints() : new MultiStatus());
+		MultiStatus status = touchpointEntries == null ? initializeTouchpoints() : new MultiStatus(EngineActivator.ID, IStatus.OK, null, null);
 
 		for (int i = 0; i < requiredTypes.length; i++) {
 			TouchpointEntry entry = (TouchpointEntry) touchpointEntries.get(requiredTypes[i]);
@@ -170,7 +169,7 @@ public class TouchpointManager implements IRegistryChangeListener {
 	 * Construct a map of the extensions that implement the touchpoints extension point.
 	 */
 	private MultiStatus initializeTouchpoints() {
-		MultiStatus status = new MultiStatus();
+		MultiStatus status = new MultiStatus(EngineActivator.ID, IStatus.OK, null, null);
 		IExtensionPoint point = RegistryFactory.getRegistry().getExtensionPoint(EngineActivator.ID, PT_TOUCHPOINTS);
 		if (point == null) {
 			reportError(NLS.bind(Messages.TouchpointManager_No_Extension_Point, EngineActivator.ID, PT_TOUCHPOINTS), status);
@@ -207,9 +206,8 @@ public class TouchpointManager implements IRegistryChangeListener {
 
 	private static void reportError(String errorMsg, MultiStatus status) {
 		Status errorStatus = new Status(IStatus.ERROR, EngineActivator.ID, 1, errorMsg, null);
-		if (status != null) {
+		if (status != null && !status.isOK())
 			status.add(errorStatus);
-		}
 		LogHelper.log(errorStatus);
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Engine.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Engine.java
index 66423cb..d936384 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Engine.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Engine.java
@@ -13,7 +13,7 @@ package org.eclipse.equinox.p2.engine;
 import java.util.ArrayList;
 import java.util.List;
 import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.internal.p2.core.helpers.MultiStatus;
+import org.eclipse.equinox.internal.p2.engine.EngineActivator;
 import org.eclipse.equinox.p2.core.eventbus.ProvisioningEventBus;
 
 public class Engine {
@@ -41,7 +41,7 @@ public class Engine {
 			monitor = new NullProgressMonitor();
 
 		if (operands.length == 0)
-			return new MultiStatus(IStatus.OK, null);
+			return new MultiStatus(EngineActivator.ID, IStatus.OK, null, null);
 
 		lockProfile(profile);
 		try {
@@ -52,7 +52,7 @@ public class Engine {
 			if (result.isOK()) {
 				eventBus.publishEvent(new CommitOperationEvent(profile, phaseSet, operands, this));
 				session.commit();
-			} else if (result.isErrorOrCancel()) {
+			} else if (result.matches(IStatus.ERROR | IStatus.CANCEL)) {
 				eventBus.publishEvent(new RollbackOperationEvent(profile, phaseSet, operands, this, result));
 				session.rollback();
 			}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/EngineSession.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/EngineSession.java
index b9fba01..a6ee3e8 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/EngineSession.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/EngineSession.java
@@ -11,8 +11,8 @@
 package org.eclipse.equinox.p2.engine;
 
 import java.util.*;
-import org.eclipse.core.runtime.NullProgressMonitor;
-import org.eclipse.equinox.internal.p2.core.helpers.MultiStatus;
+import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.internal.p2.engine.EngineActivator;
 
 public class EngineSession {
 
@@ -42,7 +42,7 @@ public class EngineSession {
 	}
 
 	public MultiStatus rollback() {
-		MultiStatus result = new MultiStatus();
+		MultiStatus result = new MultiStatus(EngineActivator.ID, IStatus.OK, null, null);
 		if (currentPhase != null) {
 			rollBackPhase(currentPhase, currentActionRecords);
 			currentPhase = null;
@@ -61,7 +61,7 @@ public class EngineSession {
 	}
 
 	private MultiStatus rollBackPhase(Phase phase, List actionRecords) {
-		MultiStatus result = new MultiStatus();
+		MultiStatus result = new MultiStatus(EngineActivator.ID, IStatus.OK, null, null);
 
 		if (phase != currentPhase)
 			phase.prePerform(result, profile, new NullProgressMonitor());
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Phase.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Phase.java
index daff137..239d83a 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Phase.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Phase.java
@@ -13,9 +13,7 @@ package org.eclipse.equinox.p2.engine;
 import java.util.*;
 import java.util.Map.Entry;
 import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.internal.p2.core.helpers.MultiStatus;
-import org.eclipse.equinox.internal.p2.engine.Messages;
-import org.eclipse.equinox.internal.p2.engine.TouchpointManager;
+import org.eclipse.equinox.internal.p2.engine.*;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.metadata.TouchpointData;
 import org.eclipse.osgi.util.NLS;
@@ -57,12 +55,16 @@ public abstract class Phase {
 	}
 
 	public final MultiStatus perform(EngineSession session, Profile profile, Operand[] operands, IProgressMonitor monitor) {
-		MultiStatus status = new MultiStatus();
+		MultiStatus status = new MultiStatus(EngineActivator.ID, IStatus.OK, null, null);
 		perform(status, session, profile, operands, monitor);
 		if (status.matches(IStatus.CANCEL)) {
-			status.setMessage(Messages.Engine_Operation_Canceled_By_User);
+			MultiStatus result = new MultiStatus(EngineActivator.ID, IStatus.CANCEL, Messages.Engine_Operation_Canceled_By_User, null);
+			result.merge(status);
+			return result;
 		} else if (status.matches(IStatus.ERROR)) {
-			status.setMessage(NLS.bind(Messages.Engine_Error_During_Phase, this.phaseName));
+			MultiStatus result = new MultiStatus(EngineActivator.ID, IStatus.CANCEL, NLS.bind(Messages.Engine_Error_During_Phase, this.phaseName), null);
+			result.merge(status);
+			return result;
 		}
 		return status;
 	}
@@ -81,19 +83,19 @@ public abstract class Phase {
 
 		SubMonitor subMonitor = SubMonitor.convert(monitor, prePerformWork + mainPerformWork + postPerformWork);
 		prePerform(status, profile, subMonitor.newChild(prePerformWork));
-		if (status.isErrorOrCancel())
+		if (status.matches(IStatus.ERROR | IStatus.CANCEL))
 			return;
 		session.recordPhaseStart(this);
 
 		subMonitor.setWorkRemaining(mainPerformWork + postPerformWork);
 		mainPerform(status, session, profile, operands, subMonitor.newChild(mainPerformWork));
-		if (status.isErrorOrCancel())
+		if (status.matches(IStatus.ERROR | IStatus.CANCEL))
 			return;
 
 		session.recordPhaseEnd(this);
 		subMonitor.setWorkRemaining(postPerformWork);
 		postPerform(status, profile, subMonitor.newChild(postPerformWork));
-		if (status.isErrorOrCancel())
+		if (status.matches(IStatus.ERROR | IStatus.CANCEL))
 			return;
 
 		subMonitor.done();
@@ -103,14 +105,14 @@ public abstract class Phase {
 		phaseParameters = new HashMap();
 		phaseParameters.put(PROFILE, profile);
 		phaseParameters.put(PHASE_ID, phaseId);
-		status.add(initializePhase(monitor, profile, phaseParameters));
+		mergeStatus(status, initializePhase(monitor, profile, phaseParameters));
 
 		for (Iterator it = touchpointToTouchpointParameters.entrySet().iterator(); it.hasNext();) {
 			Entry entry = (Entry) it.next();
 			Touchpoint touchpoint = (Touchpoint) entry.getKey();
 			Map touchpointParameters = new HashMap(phaseParameters);
 			touchpointParameters.put(TOUCHPOINT, touchpoint);
-			status.add(touchpoint.initializePhase(monitor, profile, phaseId, touchpointParameters));
+			mergeStatus(status, touchpoint.initializePhase(monitor, profile, phaseId, touchpointParameters));
 			entry.setValue(touchpointParameters);
 		}
 	}
@@ -136,35 +138,43 @@ public abstract class Phase {
 			Touchpoint touchpoint = getTouchpoint(operand);
 			Map parameters = (touchpoint != null) ? new HashMap((Map) touchpointToTouchpointParameters.get(touchpoint)) : new HashMap(phaseParameters);
 			parameters.put(OPERAND, operand);
-			status.add(initializeOperand(profile, operand, parameters, subMonitor));
+			mergeStatus(status, initializeOperand(profile, operand, parameters, subMonitor));
 			if (touchpoint != null)
-				status.add(touchpoint.initializeOperand(profile, phaseId, operand, parameters));
+				mergeStatus(status, touchpoint.initializeOperand(profile, phaseId, operand, parameters));
 			parameters = Collections.unmodifiableMap(parameters);
 			if (actions != null) {
 				for (int j = 0; j < actions.length; j++) {
 					ProvisioningAction action = actions[j];
 					session.recordAction(action, operand);
-					status.add(action.execute(parameters));
+					mergeStatus(status, action.execute(parameters));
 					if (!status.isOK())
 						return;
 				}
 			}
 			if (touchpoint != null)
-				status.add(touchpoint.completeOperand(profile, phaseId, operand, parameters));
-			status.add(completeOperand(operand, parameters));
+				mergeStatus(status, touchpoint.completeOperand(profile, phaseId, operand, parameters));
+			mergeStatus(status, completeOperand(operand, parameters));
 			subMonitor.worked(1);
 		}
 	}
 
+	/**
+	 * Merges a given IStatus into a MultiStatus
+	 */
+	private void mergeStatus(MultiStatus multi, IStatus status) {
+		if (status != null && !status.isOK())
+			multi.add(status);
+	}
+
 	void postPerform(MultiStatus status, Profile profile, IProgressMonitor monitor) {
 		for (Iterator it = touchpointToTouchpointParameters.entrySet().iterator(); it.hasNext();) {
 			Entry entry = (Entry) it.next();
 			Touchpoint touchpoint = (Touchpoint) entry.getKey();
 			Map touchpointParameters = (Map) entry.getValue();
-			status.add(touchpoint.completePhase(monitor, profile, phaseId, touchpointParameters));
+			mergeStatus(status, touchpoint.completePhase(monitor, profile, phaseId, touchpointParameters));
 			entry.setValue(null);
 		}
-		status.add(completePhase(monitor, profile, phaseParameters));
+		mergeStatus(status, completePhase(monitor, profile, phaseParameters));
 		phaseParameters = null;
 	}
 
@@ -173,17 +183,16 @@ public abstract class Phase {
 		Map touchpointParameters = (Map) touchpointToTouchpointParameters.get(touchpoint);
 		Map parameters = new HashMap(touchpointParameters);
 		parameters.put(OPERAND, operand);
-		status.add(initializeOperand(profile, operand, parameters, new NullProgressMonitor()));
-		status.add(touchpoint.initializeOperand(profile, phaseId, operand, parameters));
+		mergeStatus(status, initializeOperand(profile, operand, parameters, new NullProgressMonitor()));
+		mergeStatus(status, touchpoint.initializeOperand(profile, phaseId, operand, parameters));
 		parameters = Collections.unmodifiableMap(parameters);
 		for (int j = 0; j < actions.length; j++) {
 			ProvisioningAction action = actions[j];
-			IStatus actionStatus = action.undo(parameters);
-			status.add(actionStatus);
+			mergeStatus(status, action.undo(parameters));
 			// TODO: session.removeAction(...)
 		}
-		status.add(touchpoint.completeOperand(profile, phaseId, operand, parameters));
-		status.add(completeOperand(operand, parameters));
+		mergeStatus(status, touchpoint.completeOperand(profile, phaseId, operand, parameters));
+		mergeStatus(status, completeOperand(operand, parameters));
 	}
 
 	protected final ProvisioningAction[] getActions(IInstallableUnit unit, String key) {
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/PhaseSet.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/PhaseSet.java
index bf16b9b..5e70e14 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/PhaseSet.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/PhaseSet.java
@@ -10,9 +10,8 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.engine;
 
-import org.eclipse.core.runtime.IProgressMonitor;
-import org.eclipse.core.runtime.SubMonitor;
-import org.eclipse.equinox.internal.p2.core.helpers.MultiStatus;
+import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.internal.p2.engine.EngineActivator;
 
 public abstract class PhaseSet {
 	private final Phase[] phases;
@@ -25,19 +24,21 @@ public abstract class PhaseSet {
 	}
 
 	public final MultiStatus perform(EngineSession session, Profile profile, Operand[] deltas, IProgressMonitor monitor) {
-		MultiStatus result = new MultiStatus();
+		MultiStatus result = new MultiStatus(EngineActivator.ID, IStatus.OK, null, null);
 		int[] weights = getProgressWeights(deltas);
 		int totalWork = getTotalWork(weights);
 		SubMonitor pm = SubMonitor.convert(monitor, totalWork);
 		try {
 			for (int i = 0; i < phases.length; i++) {
 				if (pm.isCanceled()) {
-					result.setCanceled();
+					result.add(Status.CANCEL_STATUS);
 					return result;
 				}
 				Phase phase = phases[i];
-				result.add(phase.perform(session, profile, deltas, pm.newChild(weights[i])));
-				if (result.isErrorOrCancel())
+				MultiStatus performResult = phase.perform(session, profile, deltas, pm.newChild(weights[i]));
+				if (!performResult.isOK())
+					result.add(performResult);
+				if (result.matches(IStatus.ERROR | IStatus.CANCEL))
 					return result;
 			}
 		} finally {
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/TestArtifactRepository.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/TestArtifactRepository.java
index e187a19..35160e4 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/TestArtifactRepository.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/TestArtifactRepository.java
@@ -16,7 +16,6 @@ import junit.framework.Assert;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.artifact.repository.ArtifactRequest;
 import org.eclipse.equinox.internal.p2.artifact.repository.Transport;
-import org.eclipse.equinox.internal.p2.core.helpers.MultiStatus;
 import org.eclipse.equinox.p2.artifact.repository.*;
 import org.eclipse.equinox.p2.artifact.repository.processing.ProcessingStepHandler;
 import org.eclipse.equinox.p2.core.repository.RepositoryCreationException;
@@ -94,7 +93,7 @@ public class TestArtifactRepository extends AbstractArtifactRepository {
 	public IStatus getArtifacts(IArtifactRequest[] requests, IProgressMonitor monitor) {
 		SubMonitor subMonitor = SubMonitor.convert(monitor, requests.length);
 		try {
-			MultiStatus overallStatus = new MultiStatus();
+			MultiStatus overallStatus = new MultiStatus(TestActivator.PI_PROV_TESTS, IStatus.OK, null, null);
 			for (int i = 0; i < requests.length; i++) {
 				overallStatus.add(getArtifact((ArtifactRequest) requests[i], subMonitor.newChild(1)));
 			}

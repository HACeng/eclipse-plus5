commit a71437cdbf4728d41dfe4f922bfe423d9f419143
Author: John Arthorne <johna>
Date:   Wed Jan 2 21:17:57 2008 +0000

    Bug 192467 [prov] [repo] IMetadataRepository to return Iteration of InstallableUnits

8	1	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/p2/query/Collector.java
1	0	bundles/org.eclipse.equinox.p2.directorywatcher/META-INF/MANIFEST.MF
23	19	bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/p2/directorywatcher/RepositoryListener.java
2	2	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/InstallRegistry.java
1	0	bundles/org.eclipse.equinox.p2.metadata.repository/META-INF/MANIFEST.MF
0	17	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/LocalMetadataRepository.java
5	17	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java
1	19	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/URLMetadataRepository.java
14	10	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataWriter.java
1	9	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/p2/metadata/repository/IMetadataRepository.java
2	0	bundles/org.eclipse.equinox.p2.reconciler.dropins/META-INF/MANIFEST.MF
39	42	bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/p2/reconciler/dropins/ProfileSynchronizer.java
2	0	bundles/org.eclipse.equinox.p2.reconciler/META-INF/MANIFEST.MF
39	42	bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/p2/reconciler/dropins/ProfileSynchronizer.java
3	6	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/TestMetadataRepository.java
4	2	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/RollbackTest.java
13	6	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/directorywatcher/RepositoryListenerTest.java
3	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/JarURLRepositoryTest.java
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/p2/query/Collector.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/p2/query/Collector.java
index 66ae25b..3363460 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/p2/query/Collector.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/p2/query/Collector.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others.
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -78,6 +78,13 @@ public class Collector {
 	}
 
 	/**
+	 * Returns the number of collected objects.
+	 */
+	public int size() {
+		return collected == null ? 0 : collected.size();
+	}
+
+	/**
 	 * Returns the collected objects as an array
 	 * 
 	 * @param clazz The type of array to return
diff --git a/bundles/org.eclipse.equinox.p2.directorywatcher/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.directorywatcher/META-INF/MANIFEST.MF
index de90f57..3e7014c 100644
--- a/bundles/org.eclipse.equinox.p2.directorywatcher/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.directorywatcher/META-INF/MANIFEST.MF
@@ -10,6 +10,7 @@ Import-Package: org.eclipse.equinox.internal.p2.core.helpers,
  org.eclipse.equinox.p2.core.repository,
  org.eclipse.equinox.p2.metadata,
  org.eclipse.equinox.p2.metadata.generator,
+ org.eclipse.equinox.p2.metadata.query,
  org.eclipse.equinox.p2.metadata.repository,
  org.eclipse.equinox.p2.query,
  org.eclipse.osgi.service.resolver;version="1.1.0",
diff --git a/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/p2/directorywatcher/RepositoryListener.java b/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/p2/directorywatcher/RepositoryListener.java
index ba7e1cc..6735850 100644
--- a/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/p2/directorywatcher/RepositoryListener.java
+++ b/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/p2/directorywatcher/RepositoryListener.java
@@ -19,8 +19,10 @@ import org.eclipse.equinox.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.metadata.generator.BundleDescriptionFactory;
 import org.eclipse.equinox.p2.metadata.generator.MetadataGeneratorHelper;
+import org.eclipse.equinox.p2.metadata.query.InstallableUnitQuery;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepositoryManager;
+import org.eclipse.equinox.p2.query.Collector;
 import org.eclipse.equinox.p2.query.Query;
 import org.eclipse.osgi.service.resolver.*;
 import org.osgi.framework.BundleContext;
@@ -218,33 +220,35 @@ public class RepositoryListener extends DirectoryChangeListener {
 	}
 
 	private void synchronizeArtifactRepository() {
-		boolean modified = false;
-		List snapshot = new ArrayList(Arrays.asList(artifactRepository.getArtifactKeys()));
-
-		IInstallableUnit[] ius = metadataRepository.getInstallableUnits(null);
-		for (int i = 0; i < ius.length; i++) {
-			IInstallableUnit iu = ius[i];
-			IArtifactKey[] artifacts = iu.getArtifacts();
-			if (artifacts == null || artifacts.length == 0)
-				continue;
-			IArtifactKey artifact = artifacts[0];
-			if (!snapshot.remove(artifact)) {
-				File iuFile = new File(iu.getProperty("file.name"));
-				IArtifactDescriptor descriptor = generateArtifactDescriptor(iuFile);
-				if (descriptor != null) {
-					artifactRepository.addDescriptor(descriptor);
-					modified = true;
+		final boolean[] modified = {false};
+		final List snapshot = new ArrayList(Arrays.asList(artifactRepository.getArtifactKeys()));
+		Collector collector = new Collector() {
+			public boolean accept(Object object) {
+				IInstallableUnit iu = (IInstallableUnit) object;
+				IArtifactKey[] artifacts = iu.getArtifacts();
+				if (artifacts == null || artifacts.length == 0)
+					return true;
+				IArtifactKey artifact = artifacts[0];
+				if (!snapshot.remove(artifact)) {
+					File iuFile = new File(iu.getProperty("file.name"));
+					IArtifactDescriptor descriptor = generateArtifactDescriptor(iuFile);
+					if (descriptor != null) {
+						artifactRepository.addDescriptor(descriptor);
+						modified[0] = true;
+					}
 				}
+				return true;
 			}
-		}
+		};
+		metadataRepository.query(new InstallableUnitQuery(null), collector, null);
 
 		for (Iterator it = snapshot.iterator(); it.hasNext();) {
 			IArtifactKey key = (IArtifactKey) it.next();
 			artifactRepository.removeDescriptor(key);
-			modified = true;
+			modified[0] = true;
 		}
 
-		if (modified)
+		if (modified[0])
 			lastModifed = System.currentTimeMillis();
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/InstallRegistry.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/InstallRegistry.java
index 1e5b804..4ee47ef 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/InstallRegistry.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/InstallRegistry.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others.
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -442,7 +442,7 @@ public class InstallRegistry implements IInstallRegistry {
 			start(PROFILE_INSTALL_REGISTRY_ELEMENT);
 			attribute(PROFILE_ID_ATTRIBUTE, profileId);
 			Set ius = profileRegistry.installableUnits;
-			writeInstallableUnits((IInstallableUnit[]) ius.toArray(new IInstallableUnit[ius.size()]));
+			writeInstallableUnits(ius.iterator(), ius.size());
 			writeIUPropertyMap(profileRegistry.getIUIdentityToPropertiesMap());
 			end(PROFILE_INSTALL_REGISTRY_ELEMENT);
 		}
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.metadata.repository/META-INF/MANIFEST.MF
index a181ccf..54cdda6 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/META-INF/MANIFEST.MF
@@ -18,6 +18,7 @@ Import-Package: org.eclipse.core.runtime.preferences,
  org.eclipse.equinox.p2.core.location,
  org.eclipse.equinox.p2.core.repository,
  org.eclipse.equinox.p2.metadata,
+ org.eclipse.equinox.p2.metadata.query,
  org.eclipse.equinox.p2.query,
  org.eclipse.equinox.spi.p2.core.repository,
  org.eclipse.osgi.service.datalocation;version="1.0.0",
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/LocalMetadataRepository.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/LocalMetadataRepository.java
index 491971f..b7fab53 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/LocalMetadataRepository.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/LocalMetadataRepository.java
@@ -15,12 +15,10 @@ import java.io.*;
 import java.net.URL;
 import java.util.*;
 import org.eclipse.core.runtime.IProgressMonitor;
-import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.query.Collector;
 import org.eclipse.equinox.p2.query.Query;
 import org.eclipse.equinox.spi.p2.metadata.repository.AbstractMetadataRepository;
-import org.eclipse.osgi.util.NLS;
 
 /**
  * A metadata repository that resides in the local file system.  If the repository
@@ -70,21 +68,6 @@ public class LocalMetadataRepository extends AbstractMetadataRepository {
 		save();
 	}
 
-	// Get a non-modifiable collection of the installable units
-	// from the repository.
-	public Set getInstallableUnits() {
-		return Collections.unmodifiableSet(units);
-	}
-
-	public IInstallableUnit[] getInstallableUnits(IProgressMonitor monitor) {
-		if (monitor == null)
-			monitor = new NullProgressMonitor();
-		monitor.beginTask(NLS.bind(Messages.REPO_LOADING, location.toExternalForm()), 5);
-		IInstallableUnit[] result = (IInstallableUnit[]) units.toArray(new IInstallableUnit[0]);
-		monitor.done();
-		return result;
-	}
-
 	public void initialize(RepositoryState state) {
 		this.name = state.Name;
 		this.type = state.Type;
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java
index 7f7e760..ff18bcd 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others.
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -12,7 +12,6 @@
 package org.eclipse.equinox.internal.p2.metadata.repository;
 
 import java.io.*;
-import java.util.Set;
 import javax.xml.parsers.ParserConfigurationException;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
@@ -22,7 +21,9 @@ import org.eclipse.equinox.internal.p2.metadata.repository.io.MetadataWriter;
 import org.eclipse.equinox.internal.p2.persistence.XMLWriter;
 import org.eclipse.equinox.p2.core.repository.RepositoryCreationException;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.metadata.query.InstallableUnitQuery;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
+import org.eclipse.equinox.p2.query.Collector;
 import org.eclipse.equinox.spi.p2.metadata.repository.AbstractMetadataRepository;
 import org.eclipse.equinox.spi.p2.metadata.repository.AbstractMetadataRepository.RepositoryState;
 import org.eclipse.osgi.service.resolver.VersionRange;
@@ -131,25 +132,12 @@ public class MetadataRepositoryIO {
 			attributeOptional(DESCRIPTION_ATTRIBUTE, repository.getDescription()); // TODO: could be cdata?
 
 			writeProperties(repository.getProperties());
-			writeInstallableUnits(getInstallableUnits(repository));
+			Collector units = repository.query(new InstallableUnitQuery(null), new Collector(), null);
+			writeInstallableUnits(units.iterator(), units.size());
 
 			end(REPOSITORY_ELEMENT);
 			flush();
 		}
-
-		private IInstallableUnit[] getInstallableUnits(IMetadataRepository repository) {
-			// TODO: there must be a better solution to the problem.
-			Set units = null;
-			if (repository instanceof LocalMetadataRepository) {
-				units = ((LocalMetadataRepository) repository).getInstallableUnits();
-			} else if (repository instanceof URLMetadataRepository) {
-				units = ((URLMetadataRepository) repository).getInstallableUnits();
-			} else {
-				return repository.getInstallableUnits(new NullProgressMonitor());
-			}
-			return (units == null ? new IInstallableUnit[0] //
-					: (IInstallableUnit[]) units.toArray(new IInstallableUnit[units.size()]));
-		}
 	}
 
 	/*
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/URLMetadataRepository.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/URLMetadataRepository.java
index 111cc63..63fbb09 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/URLMetadataRepository.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/URLMetadataRepository.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others.
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -15,13 +15,10 @@ import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.*;
 import org.eclipse.core.runtime.IProgressMonitor;
-import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.equinox.p2.core.repository.RepositoryCreationException;
-import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.query.Collector;
 import org.eclipse.equinox.p2.query.Query;
 import org.eclipse.equinox.spi.p2.metadata.repository.AbstractMetadataRepository;
-import org.eclipse.osgi.util.NLS;
 
 /**
  * A metadata repository backed by an arbitrary URL.
@@ -63,21 +60,6 @@ public class URLMetadataRepository extends AbstractMetadataRepository {
 		return content;
 	}
 
-	// Get a non-modifiable collection of the installable units
-	// from the repository.
-	public Set getInstallableUnits() {
-		return Collections.unmodifiableSet(units);
-	}
-
-	public IInstallableUnit[] getInstallableUnits(IProgressMonitor monitor) {
-		if (monitor == null)
-			monitor = new NullProgressMonitor();
-		monitor.beginTask(NLS.bind(Messages.REPO_LOADING, location.toExternalForm()), 5);
-		IInstallableUnit[] result = (IInstallableUnit[]) units.toArray(new IInstallableUnit[units.size()]);
-		monitor.done();
-		return result;
-	}
-
 	public void initialize(RepositoryState state) {
 		this.name = state.Name;
 		this.type = state.Type;
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataWriter.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataWriter.java
index 5cb3030..293d12a 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataWriter.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataWriter.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others.
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -24,15 +24,19 @@ public abstract class MetadataWriter extends XMLWriter implements XMLConstants {
 		// TODO: add a processing instruction for the metadata version
 	}
 
-	protected void writeInstallableUnits(IInstallableUnit[] installableUnits) {
-		if (installableUnits.length > 0) {
-			start(INSTALLABLE_UNITS_ELEMENT);
-			attribute(COLLECTION_SIZE_ATTRIBUTE, installableUnits.length);
-			for (int i = 0; i < installableUnits.length; i++) {
-				writeInstallableUnit(installableUnits[i]);
-			}
-			end(INSTALLABLE_UNITS_ELEMENT);
-		}
+	/**
+	 * Writes a list of {@link IInstallableUnit}.
+	 * @param units An Iterator of {@link IInstallableUnit}.
+	 * @param size The number of units to write
+	 */
+	protected void writeInstallableUnits(Iterator units, int size) {
+		if (size == 0)
+			return;
+		start(INSTALLABLE_UNITS_ELEMENT);
+		attribute(COLLECTION_SIZE_ATTRIBUTE, size);
+		while (units.hasNext())
+			writeInstallableUnit((IInstallableUnit) units.next());
+		end(INSTALLABLE_UNITS_ELEMENT);
 	}
 
 	protected void writeInstallableUnit(IInstallableUnit resolvedIU) {
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/p2/metadata/repository/IMetadataRepository.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/p2/metadata/repository/IMetadataRepository.java
index 08721a2..d876ead 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/p2/metadata/repository/IMetadataRepository.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/p2/metadata/repository/IMetadataRepository.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others.
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -34,14 +34,6 @@ public interface IMetadataRepository extends IRepository, IQueryable {
 	public void addInstallableUnits(IInstallableUnit[] installableUnits);
 
 	/**
-	 * Returns all installable units known to this repository.
-	 * @param monitor a progress monitor, or <code>null</code> if progress
-	 *    reporting is not desired
-	 * @return the installable units known to this repository
-	 */
-	public IInstallableUnit[] getInstallableUnits(IProgressMonitor monitor);
-
-	/**
 	 * Removes all installable units that match the given query from this repository.
 	 * 
 	 * @param query the installable units to remove
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.reconciler.dropins/META-INF/MANIFEST.MF
index 59bc389..d54ea1b 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler.dropins/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/META-INF/MANIFEST.MF
@@ -17,7 +17,9 @@ Import-Package: org.eclipse.equinox.configurator,
  org.eclipse.equinox.p2.directorywatcher,
  org.eclipse.equinox.p2.engine,
  org.eclipse.equinox.p2.metadata,
+ org.eclipse.equinox.p2.metadata.query,
  org.eclipse.equinox.p2.metadata.repository,
+ org.eclipse.equinox.p2.query,
  org.eclipse.osgi.service.datalocation;version="1.0.0",
  org.osgi.framework;version="1.3.0",
  org.osgi.service.packageadmin;version="1.2.0",
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/p2/reconciler/dropins/ProfileSynchronizer.java b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/p2/reconciler/dropins/ProfileSynchronizer.java
index 42da16f..6c79ddc 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/p2/reconciler/dropins/ProfileSynchronizer.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/p2/reconciler/dropins/ProfileSynchronizer.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others. All rights reserved.
+ * Copyright (c) 2007, 2008 IBM Corporation and others. All rights reserved.
  * This program and the accompanying materials are made available under the
  * terms of the Eclipse Public License v1.0 which accompanies this distribution,
  * and is available at http://www.eclipse.org/legal/epl-v10.html
@@ -18,7 +18,10 @@ import org.eclipse.equinox.internal.p2.reconciler.dropins.Activator;
 import org.eclipse.equinox.p2.director.IDirector;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.metadata.query.InstallableUnitQuery;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
+import org.eclipse.equinox.p2.query.Collector;
+import org.eclipse.equinox.p2.query.Query;
 import org.osgi.framework.BundleContext;
 import org.osgi.framework.ServiceReference;
 
@@ -47,7 +50,7 @@ public class ProfileSynchronizer {
 	 */
 	private void initialize() {
 		// snapshot is a table of all the IUs from this repository which are installed in the profile 
-		Map snapshot = new HashMap();
+		final Map snapshot = new HashMap();
 		for (Iterator iter = repositories.iterator(); iter.hasNext();) {
 			IMetadataRepository metadataRepository = (IMetadataRepository) iter.next();
 			String repositoryId = metadataRepository.getLocation().toExternalForm();
@@ -61,35 +64,44 @@ public class ProfileSynchronizer {
 			}
 		}
 
-		List toAdd = new ArrayList();
-		IInstallableUnit[] ius = getInstallableUnits(null);
-		for (int i = 0; i < ius.length; i++) {
-			IInstallableUnit iu = ius[i];
-			String iuFileName = iu.getProperty(FILE_NAME);
-			if (iuFileName == null) {
+		final List toAdd = new ArrayList();
+		//create the collector that will visit all the IUs in the repositories being synchronized
+		Collector syncCollector = new Collector() {
+			public boolean accept(Object object) {
+				IInstallableUnit iu = (IInstallableUnit) object;
+				String iuFileName = iu.getProperty(FILE_NAME);
 				// TODO is this right?
-				continue;
-			}
-
-			// if the repository contains an IU that the profile doesn't, then add it to the list to install
-			IInstallableUnit profileIU = (IInstallableUnit) snapshot.get(iuFileName);
-			if (profileIU == null) {
-				toAdd.add(iu);
-				continue;
-			}
+				if (iuFileName == null)
+					return true;
+
+				// if the repository contains an IU that the profile doesn't, then add it to the list to install
+				IInstallableUnit profileIU = (IInstallableUnit) snapshot.get(iuFileName);
+				if (profileIU == null) {
+					toAdd.add(iu);
+					return true;
+				}
 
-			Long iuLastModified = new Long(iu.getProperty(FILE_LAST_MODIFIED));
-			Long profileIULastModified = new Long(profileIU.getProperty(FILE_LAST_MODIFIED));
-			if (iuLastModified == null || profileIULastModified == null) {
+				Long iuLastModified = new Long(iu.getProperty(FILE_LAST_MODIFIED));
+				Long profileIULastModified = new Long(profileIU.getProperty(FILE_LAST_MODIFIED));
 				// TODO is this right?
-				continue;
+				if (iuLastModified == null || profileIULastModified == null)
+					return true;
+
+				// if the timestamp hasn't changed, then there is nothing to do so remove
+				// the IU from the snapshot so we don't accidentally remove it later
+				if (iuLastModified.equals(profileIULastModified))
+					snapshot.remove(iuFileName);
+				else
+					toAdd.add(iu);
+				return true;
 			}
-			// if the timestamp hasn't changed, then there is nothing to do so remove
-			// the IU from the snapshot so we don't accidentally remove it later
-			if (iuLastModified.equals(profileIULastModified))
-				snapshot.remove(iuFileName);
-			else
-				toAdd.add(iu);
+		};
+
+		Query query = new InstallableUnitQuery(null);
+		for (Iterator it = repositories.iterator(); it.hasNext();) {
+			IMetadataRepository repo = (IMetadataRepository) it.next();
+			// TODO report progress
+			repo.query(query, syncCollector, null);
 		}
 
 		// the IUs to remove is everything left that hasn't been removed from the snapshot
@@ -104,21 +116,6 @@ public class ProfileSynchronizer {
 	}
 
 	/*
-	 * Helper method to collect the list of IUs from all the repositories.
-	 */
-	private IInstallableUnit[] getInstallableUnits(IProgressMonitor monitor) {
-		List result = new ArrayList();
-		for (Iterator iter = repositories.iterator(); iter.hasNext();) {
-			IMetadataRepository repo = (IMetadataRepository) iter.next();
-			// TODO report progress
-			IInstallableUnit[] units = repo.getInstallableUnits(null);
-			for (int i = 0; units != null && i < units.length; i++)
-				result.add(units[i]);
-		}
-		return (IInstallableUnit[]) result.toArray(new IInstallableUnit[result.size()]);
-	}
-
-	/*
 	 * Synchronize the profile with the list of metadata repositories.
 	 */
 	public void synchronize(IProgressMonitor monitor) {
diff --git a/bundles/org.eclipse.equinox.p2.reconciler/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.reconciler/META-INF/MANIFEST.MF
index 59bc389..d54ea1b 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.reconciler/META-INF/MANIFEST.MF
@@ -17,7 +17,9 @@ Import-Package: org.eclipse.equinox.configurator,
  org.eclipse.equinox.p2.directorywatcher,
  org.eclipse.equinox.p2.engine,
  org.eclipse.equinox.p2.metadata,
+ org.eclipse.equinox.p2.metadata.query,
  org.eclipse.equinox.p2.metadata.repository,
+ org.eclipse.equinox.p2.query,
  org.eclipse.osgi.service.datalocation;version="1.0.0",
  org.osgi.framework;version="1.3.0",
  org.osgi.service.packageadmin;version="1.2.0",
diff --git a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/p2/reconciler/dropins/ProfileSynchronizer.java b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/p2/reconciler/dropins/ProfileSynchronizer.java
index 42da16f..6c79ddc 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/p2/reconciler/dropins/ProfileSynchronizer.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/p2/reconciler/dropins/ProfileSynchronizer.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others. All rights reserved.
+ * Copyright (c) 2007, 2008 IBM Corporation and others. All rights reserved.
  * This program and the accompanying materials are made available under the
  * terms of the Eclipse Public License v1.0 which accompanies this distribution,
  * and is available at http://www.eclipse.org/legal/epl-v10.html
@@ -18,7 +18,10 @@ import org.eclipse.equinox.internal.p2.reconciler.dropins.Activator;
 import org.eclipse.equinox.p2.director.IDirector;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.metadata.query.InstallableUnitQuery;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
+import org.eclipse.equinox.p2.query.Collector;
+import org.eclipse.equinox.p2.query.Query;
 import org.osgi.framework.BundleContext;
 import org.osgi.framework.ServiceReference;
 
@@ -47,7 +50,7 @@ public class ProfileSynchronizer {
 	 */
 	private void initialize() {
 		// snapshot is a table of all the IUs from this repository which are installed in the profile 
-		Map snapshot = new HashMap();
+		final Map snapshot = new HashMap();
 		for (Iterator iter = repositories.iterator(); iter.hasNext();) {
 			IMetadataRepository metadataRepository = (IMetadataRepository) iter.next();
 			String repositoryId = metadataRepository.getLocation().toExternalForm();
@@ -61,35 +64,44 @@ public class ProfileSynchronizer {
 			}
 		}
 
-		List toAdd = new ArrayList();
-		IInstallableUnit[] ius = getInstallableUnits(null);
-		for (int i = 0; i < ius.length; i++) {
-			IInstallableUnit iu = ius[i];
-			String iuFileName = iu.getProperty(FILE_NAME);
-			if (iuFileName == null) {
+		final List toAdd = new ArrayList();
+		//create the collector that will visit all the IUs in the repositories being synchronized
+		Collector syncCollector = new Collector() {
+			public boolean accept(Object object) {
+				IInstallableUnit iu = (IInstallableUnit) object;
+				String iuFileName = iu.getProperty(FILE_NAME);
 				// TODO is this right?
-				continue;
-			}
-
-			// if the repository contains an IU that the profile doesn't, then add it to the list to install
-			IInstallableUnit profileIU = (IInstallableUnit) snapshot.get(iuFileName);
-			if (profileIU == null) {
-				toAdd.add(iu);
-				continue;
-			}
+				if (iuFileName == null)
+					return true;
+
+				// if the repository contains an IU that the profile doesn't, then add it to the list to install
+				IInstallableUnit profileIU = (IInstallableUnit) snapshot.get(iuFileName);
+				if (profileIU == null) {
+					toAdd.add(iu);
+					return true;
+				}
 
-			Long iuLastModified = new Long(iu.getProperty(FILE_LAST_MODIFIED));
-			Long profileIULastModified = new Long(profileIU.getProperty(FILE_LAST_MODIFIED));
-			if (iuLastModified == null || profileIULastModified == null) {
+				Long iuLastModified = new Long(iu.getProperty(FILE_LAST_MODIFIED));
+				Long profileIULastModified = new Long(profileIU.getProperty(FILE_LAST_MODIFIED));
 				// TODO is this right?
-				continue;
+				if (iuLastModified == null || profileIULastModified == null)
+					return true;
+
+				// if the timestamp hasn't changed, then there is nothing to do so remove
+				// the IU from the snapshot so we don't accidentally remove it later
+				if (iuLastModified.equals(profileIULastModified))
+					snapshot.remove(iuFileName);
+				else
+					toAdd.add(iu);
+				return true;
 			}
-			// if the timestamp hasn't changed, then there is nothing to do so remove
-			// the IU from the snapshot so we don't accidentally remove it later
-			if (iuLastModified.equals(profileIULastModified))
-				snapshot.remove(iuFileName);
-			else
-				toAdd.add(iu);
+		};
+
+		Query query = new InstallableUnitQuery(null);
+		for (Iterator it = repositories.iterator(); it.hasNext();) {
+			IMetadataRepository repo = (IMetadataRepository) it.next();
+			// TODO report progress
+			repo.query(query, syncCollector, null);
 		}
 
 		// the IUs to remove is everything left that hasn't been removed from the snapshot
@@ -104,21 +116,6 @@ public class ProfileSynchronizer {
 	}
 
 	/*
-	 * Helper method to collect the list of IUs from all the repositories.
-	 */
-	private IInstallableUnit[] getInstallableUnits(IProgressMonitor monitor) {
-		List result = new ArrayList();
-		for (Iterator iter = repositories.iterator(); iter.hasNext();) {
-			IMetadataRepository repo = (IMetadataRepository) iter.next();
-			// TODO report progress
-			IInstallableUnit[] units = repo.getInstallableUnits(null);
-			for (int i = 0; units != null && i < units.length; i++)
-				result.add(units[i]);
-		}
-		return (IInstallableUnit[]) result.toArray(new IInstallableUnit[result.size()]);
-	}
-
-	/*
 	 * Synchronize the profile with the list of metadata repositories.
 	 */
 	public void synchronize(IProgressMonitor monitor) {
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/TestMetadataRepository.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/TestMetadataRepository.java
index 007f82b..a3164ca 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/TestMetadataRepository.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/TestMetadataRepository.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others. All rights reserved. This
+ * Copyright (c) 2007, 2008 IBM Corporation and others. All rights reserved. This
  * program and the accompanying materials are made available under the terms of
  * the Eclipse Public License v1.0 which accompanies this distribution, and is
  * available at http://www.eclipse.org/legal/epl-v10.html
@@ -17,7 +17,8 @@ import org.eclipse.equinox.p2.core.repository.IRepository;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.metadata.query.InstallableUnitQuery;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
-import org.eclipse.equinox.p2.query.*;
+import org.eclipse.equinox.p2.query.Collector;
+import org.eclipse.equinox.p2.query.Query;
 import org.eclipse.equinox.spi.p2.metadata.repository.AbstractMetadataRepository;
 import org.osgi.framework.Version;
 
@@ -65,10 +66,6 @@ public class TestMetadataRepository extends AbstractMetadataRepository {
 		return null;
 	}
 
-	public IInstallableUnit[] getInstallableUnits(IProgressMonitor monitor) {
-		return (IInstallableUnit[]) units.toArray(new IInstallableUnit[0]);
-	}
-
 	public Collector query(Query query, Collector collector, IProgressMonitor monitor) {
 		return query.perform(units.iterator(), collector);
 	}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/RollbackTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/RollbackTest.java
index 367f9b9..658828f 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/RollbackTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/RollbackTest.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others. All rights reserved. This
+ * Copyright (c) 2007, 2008 IBM Corporation and others. All rights reserved. This
  * program and the accompanying materials are made available under the terms of
  * the Eclipse Public License v1.0 which accompanies this distribution, and is
  * available at http://www.eclipse.org/legal/epl-v10.html
@@ -17,8 +17,10 @@ import org.eclipse.equinox.p2.core.location.AgentLocation;
 import org.eclipse.equinox.p2.director.IDirector;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.metadata.query.InstallableUnitQuery;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepositoryManager;
+import org.eclipse.equinox.p2.query.Collector;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 import org.eclipse.equinox.p2.tests.TestActivator;
 
@@ -40,7 +42,7 @@ public class RollbackTest extends AbstractProvisioningTest {
 		IMetadataRepositoryManager repoMan = (IMetadataRepositoryManager) ServiceHelper.getService(TestActivator.getContext(), IMetadataRepositoryManager.class.getName());
 		IMetadataRepository repo = null;
 		repo = repoMan.loadRepository(getRollbackRepository(), null);
-		IInstallableUnit[] ius = repo.getInstallableUnits(null);
+		IInstallableUnit[] ius = (IInstallableUnit[]) repo.query(new InstallableUnitQuery(null), new Collector(), null).toArray(IInstallableUnit.class);
 		for (int i = 0; i < ius.length; i++)
 			System.out.println(ius[i]);
 		director.become(ius[0], profile, null, new NullProgressMonitor());
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/directorywatcher/RepositoryListenerTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/directorywatcher/RepositoryListenerTest.java
index df17acb..5d04baf 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/directorywatcher/RepositoryListenerTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/directorywatcher/RepositoryListenerTest.java
@@ -9,6 +9,9 @@ import org.eclipse.equinox.p2.artifact.repository.IFileArtifactRepository;
 import org.eclipse.equinox.p2.directorywatcher.DirectoryWatcher;
 import org.eclipse.equinox.p2.directorywatcher.RepositoryListener;
 import org.eclipse.equinox.p2.metadata.IArtifactKey;
+import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.metadata.query.InstallableUnitQuery;
+import org.eclipse.equinox.p2.query.Collector;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 import org.eclipse.equinox.p2.tests.TestActivator;
 
@@ -26,6 +29,10 @@ public class RepositoryListenerTest extends AbstractProvisioningTest {
 		}
 	}
 
+	private IInstallableUnit[] getInstallableUnits(RepositoryListener listener) {
+		return (IInstallableUnit[]) listener.getMetadataRepository().query(new InstallableUnitQuery(null), new Collector(), null).toArray(IInstallableUnit.class);
+	}
+
 	public void testDirectoryWatcherListener() {
 		URL base = TestActivator.getContext().getBundle().getEntry("/testData/directorywatcher1");
 		File baseFolder = null;
@@ -54,14 +61,14 @@ public class RepositoryListenerTest extends AbstractProvisioningTest {
 
 		RepositoryListener listener = new RepositoryListener(TestActivator.getContext(), "test" + folder.getAbsolutePath().hashCode());
 
-		assertEquals("1.0", 0, listener.getMetadataRepository().getInstallableUnits(null).length);
+		assertEquals("1.0", 0, getInstallableUnits(listener).length);
 		assertEquals("1.1", 0, listener.getArtifactRepository().getArtifactKeys().length);
 
 		DirectoryWatcher watcher = new DirectoryWatcher(props, TestActivator.getContext());
 		watcher.addListener(listener);
 		watcher.start();
 
-		assertEquals("2.0", 0, listener.getMetadataRepository().getInstallableUnits(null).length);
+		assertEquals("2.0", 0, getInstallableUnits(listener).length);
 		assertEquals("2.1", 0, listener.getArtifactRepository().getArtifactKeys().length);
 
 		try {
@@ -78,14 +85,14 @@ public class RepositoryListenerTest extends AbstractProvisioningTest {
 			assertTrue("2.3", repo.getArtifactFile(keys[i]).toString().startsWith(folder.getAbsolutePath().toString()));
 		}
 
-		assertEquals("3.0", 2, listener.getMetadataRepository().getInstallableUnits(null).length);
+		assertEquals("3.0", 2, getInstallableUnits(listener).length);
 		assertEquals("3.1", 2, listener.getArtifactRepository().getArtifactKeys().length);
 
 		watcher = new DirectoryWatcher(props, TestActivator.getContext());
 		watcher.addListener(listener);
 		watcher.start();
 
-		assertEquals("4.0", 2, listener.getMetadataRepository().getInstallableUnits(null).length);
+		assertEquals("4.0", 2, getInstallableUnits(listener).length);
 		assertEquals("4.1", 2, listener.getArtifactRepository().getArtifactKeys().length);
 
 		try {
@@ -95,7 +102,7 @@ public class RepositoryListenerTest extends AbstractProvisioningTest {
 		}
 		watcher.poll();
 
-		assertEquals("5.0", 3, listener.getMetadataRepository().getInstallableUnits(null).length);
+		assertEquals("5.0", 3, getInstallableUnits(listener).length);
 		assertEquals("5.1", 3, listener.getArtifactRepository().getArtifactKeys().length);
 
 		watcher.stop();
@@ -111,7 +118,7 @@ public class RepositoryListenerTest extends AbstractProvisioningTest {
 		}
 		watcher.poll();
 
-		assertEquals("6.0", 1, listener.getMetadataRepository().getInstallableUnits(null).length);
+		assertEquals("6.0", 1, getInstallableUnits(listener).length);
 		assertEquals("6.1", 1, listener.getArtifactRepository().getArtifactKeys().length);
 
 		watcher.stop();
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/JarURLRepositoryTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/JarURLRepositoryTest.java
index afc6a01..2fd3c00 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/JarURLRepositoryTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/JarURLRepositoryTest.java
@@ -9,8 +9,10 @@ import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.p2.core.helpers.FileUtils;
 import org.eclipse.equinox.p2.metadata.generator.EclipseInstallGeneratorInfoProvider;
 import org.eclipse.equinox.p2.metadata.generator.Generator;
+import org.eclipse.equinox.p2.metadata.query.InstallableUnitQuery;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepositoryManager;
+import org.eclipse.equinox.p2.query.Collector;
 import org.eclipse.equinox.p2.tests.TestActivator;
 import org.osgi.framework.ServiceReference;
 
@@ -76,7 +78,7 @@ public class JarURLRepositoryTest extends TestCase {
 			fail(e.getMessage());
 		}
 		IMetadataRepository repo = manager.loadRepository(jarRepoURL, null);
-		assertTrue(repo.getInstallableUnits(null).length > 0);
+		assertTrue(!repo.query(new InstallableUnitQuery(null), new Collector(), null).isEmpty());
 		manager.removeRepository(jarRepoURL);
 	}
 }
commit 9ad63ae2a1bb8f4b7a0d4818f03ca46ff6ac4977
Author: John Arthorne <johna>
Date:   Wed Jan 2 22:25:10 2008 +0000

    Bug 192467 [prov] [repo] IMetadataRepository to return Iteration of InstallableUnits

9	14	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
3	2	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java
1	1	bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/p2/directorywatcher/RepositoryListener.java
1	0	bundles/org.eclipse.equinox.p2.engine/META-INF/MANIFEST.MF
16	35	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
2	11	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Profile.java
2	5	bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallUpdateProductOperation.java
1	1	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java
7	1	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/query/InstallableUnitQuery.java
2	1	bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/p2/reconciler/dropins/ProfileSynchronizer.java
2	1	bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/p2/reconciler/dropins/ProfileSynchronizer.java
10	9	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
1	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/RollbackTest.java
2	2	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/UpdateTest.java
1	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/directorywatcher/RepositoryListenerTest.java
6	7	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
3	3	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/full/End2EndTest.java
1	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/JarURLRepositoryTest.java
2	0	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/META-INF/MANIFEST.MF
3	1	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/MarkSetProvider.java
1	0	bundles/org.eclipse.equinox.p2.updatechecker/META-INF/MANIFEST.MF
4	2	bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/p2/updatechecker/UpdateChecker.java
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
index 60b3eaf..3c15233 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others. All rights reserved. This
+ * Copyright (c) 2007, 2008 IBM Corporation and others. All rights reserved. This
  * program and the accompanying materials are made available under the terms of
  * the Eclipse Public License v1.0 which accompanies this distribution, and is
  * available at http://www.eclipse.org/legal/epl-v10.html
@@ -35,7 +35,7 @@ public class SimplePlanner implements IPlanner {
 		try {
 			MultiStatus result = new MultiStatus(DirectorActivator.PI_DIRECTOR, 1, Messages.Director_Install_Problems, null);
 			// Get the list of ius installed in the profile we are installing into
-			IInstallableUnit[] alreadyInstalled = toArray(profile.getInstallableUnits());
+			IInstallableUnit[] alreadyInstalled = getInstallableUnits(profile);
 
 			// If any of these are already installed, return a warning status
 			// specifying that they are already installed.
@@ -69,6 +69,10 @@ public class SimplePlanner implements IPlanner {
 		}
 	}
 
+	private IInstallableUnit[] getInstallableUnits(Profile profile) {
+		return (IInstallableUnit[]) profile.query(InstallableUnitQuery.ANY, new Collector(), null).toArray(IInstallableUnit.class);
+	}
+
 	private Operand[] generateOperations(Collection fromState, Collection toState, List fromStateOrder, List newStateOrder) {
 		return sortOperations(new OperationGenerator().generateOperation(fromState, toState), newStateOrder, fromStateOrder);
 	}
@@ -133,7 +137,7 @@ public class SimplePlanner implements IPlanner {
 			Collection newState = newStateHelper.attachCUs(toExpander.getAllInstallableUnits());
 			newState.remove(target);
 
-			Iterator it = profile.getInstallableUnits();
+			Iterator it = profile.query(InstallableUnitQuery.ANY, new Collector(), null).iterator();
 			Collection oldIUs = new HashSet();
 			for (; it.hasNext();) {
 				oldIUs.add(it.next());
@@ -175,7 +179,7 @@ public class SimplePlanner implements IPlanner {
 
 			MultiStatus result = new MultiStatus(DirectorActivator.PI_DIRECTOR, 1, Messages.Director_Uninstall_Problems, null);
 
-			IInstallableUnit[] alreadyInstalled = toArray(profile.getInstallableUnits());
+			IInstallableUnit[] alreadyInstalled = getInstallableUnits(profile);
 			ResolutionHelper oldStateHelper = new ResolutionHelper(profile.getSelectionContext(), null);
 			Collection oldState = oldStateHelper.attachCUs(Arrays.asList(alreadyInstalled));
 
@@ -229,7 +233,7 @@ public class SimplePlanner implements IPlanner {
 		sub.setTaskName(Messages.Director_Task_Resolving_Dependencies);
 		try {
 			//find the things being updated in the profile
-			IInstallableUnit[] alreadyInstalled = toArray(profile.getInstallableUnits());
+			IInstallableUnit[] alreadyInstalled = getInstallableUnits(profile);
 			IInstallableUnit[] uninstallRoots = toUninstall;
 
 			//compute the transitive closure and remove them.
@@ -269,15 +273,6 @@ public class SimplePlanner implements IPlanner {
 		return (IInstallableUnit[]) updates.toArray(new IInstallableUnit[updates.size()]);
 	}
 
-	//TODO This is really gross!!!!! We need to make things uniform
-	private IInstallableUnit[] toArray(Iterator it) {
-		ArrayList result = new ArrayList();
-		while (it.hasNext()) {
-			result.add(it.next());
-		}
-		return (IInstallableUnit[]) result.toArray(new IInstallableUnit[result.size()]);
-	}
-
 	public ProvisioningPlan getRevertPlan(IInstallableUnit previous, Profile profile, URL[] metadataRepositories, IProgressMonitor monitor) {
 		return getBecomePlan(previous, profile, metadataRepositories, monitor);
 	}
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java
index 35862b4..8da6b75 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java
@@ -21,7 +21,9 @@ import org.eclipse.equinox.p2.engine.*;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.metadata.MetadataFactory;
 import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitDescription;
+import org.eclipse.equinox.p2.metadata.query.InstallableUnitQuery;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepositoryManager;
+import org.eclipse.equinox.p2.query.Collector;
 import org.eclipse.equinox.spi.p2.metadata.repository.AbstractMetadataRepository;
 import org.osgi.framework.Version;
 
@@ -83,12 +85,11 @@ public class FormerState {
 		result.setProperty(IInstallableUnit.PROP_PROFILE_IU_KEY, Boolean.TRUE.toString());
 		result.setId(toConvert.getProfileId());
 		result.setVersion(new Version(0, 0, 0, Long.toString(System.currentTimeMillis())));
-		result.setRequiredCapabilities(IUTransformationHelper.toRequirements(toConvert.getInstallableUnits(), false));
+		result.setRequiredCapabilities(IUTransformationHelper.toRequirements(toConvert.query(InstallableUnitQuery.ANY, new Collector(), null).iterator(), false));
 		//TODO Need to do the properties in the profile
 		//TODO Do we need to mark profile with a special marker
 		return MetadataFactory.createInstallableUnit(result);
 	}
-
 	//	private copyProperty(Profile p) {
 	//		Map profileProperties = p.getValues();
 	//	}
diff --git a/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/p2/directorywatcher/RepositoryListener.java b/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/p2/directorywatcher/RepositoryListener.java
index 6735850..635082c 100644
--- a/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/p2/directorywatcher/RepositoryListener.java
+++ b/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/p2/directorywatcher/RepositoryListener.java
@@ -240,7 +240,7 @@ public class RepositoryListener extends DirectoryChangeListener {
 				return true;
 			}
 		};
-		metadataRepository.query(new InstallableUnitQuery(null), collector, null);
+		metadataRepository.query(InstallableUnitQuery.ANY, collector, null);
 
 		for (Iterator it = snapshot.iterator(); it.hasNext();) {
 			IArtifactKey key = (IArtifactKey) it.next();
diff --git a/bundles/org.eclipse.equinox.p2.engine/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.engine/META-INF/MANIFEST.MF
index 4ce21b1..0289e98 100644
--- a/bundles/org.eclipse.equinox.p2.engine/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.engine/META-INF/MANIFEST.MF
@@ -22,6 +22,7 @@ Import-Package: javax.xml.parsers,
  org.eclipse.equinox.p2.core.repository,
  org.eclipse.equinox.p2.download,
  org.eclipse.equinox.p2.metadata,
+ org.eclipse.equinox.p2.metadata.query,
  org.eclipse.equinox.p2.metadata.repository,
  org.eclipse.equinox.p2.query,
  org.eclipse.equinox.spi.p2.core.repository,
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
index cfe17ac..e60d5dd 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others. All rights reserved. This
+ * Copyright (c) 2007, 2008 IBM Corporation and others. All rights reserved. This
  * program and the accompanying materials are made available under the terms of
  * the Eclipse Public License v1.0 which accompanies this distribution, and is
  * available at http://www.eclipse.org/legal/epl-v10.html
@@ -23,6 +23,8 @@ import org.eclipse.equinox.p2.core.eventbus.ProvisioningEventBus;
 import org.eclipse.equinox.p2.core.location.AgentLocation;
 import org.eclipse.equinox.p2.engine.*;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.metadata.query.InstallableUnitQuery;
+import org.eclipse.equinox.p2.query.Collector;
 import org.eclipse.osgi.service.datalocation.Location;
 import org.eclipse.osgi.service.resolver.VersionRange;
 import org.eclipse.osgi.util.NLS;
@@ -101,34 +103,9 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 		String id = toUpdate.getProfileId();
 		if (SELF.equals(id))
 			id = self;
-		if (profiles.get(id) == null) {
+		if (profiles.get(id) == null)
 			throw new IllegalArgumentException("Profile to be updated does not exist:" + id);
-		}
-
-		InstallRegistry installRegistry = (InstallRegistry) ServiceHelper.getService(EngineActivator.getContext(), IInstallRegistry.class.getName());
-		if (installRegistry == null)
-			return;
-
-		installRegistry.removeProfileInstallRegistry(toUpdate);
-		//TODO: Should be using profile id not Profile object
-		IProfileInstallRegistry profileInstallRegistry = installRegistry.getProfileInstallRegistry(toUpdate);
-		for (Iterator it = toUpdate.getInstallableUnits(); it.hasNext();) {
-			IInstallableUnit iu = (IInstallableUnit) it.next();
-			profileInstallRegistry.addInstallableUnits(iu);
-			OrderedProperties iuProperties = toUpdate.getInstallableUnitProfileProperties(iu);
-			for (Iterator propIt = iuProperties.entrySet().iterator(); propIt.hasNext();) {
-				Entry propertyEntry = (Entry) propIt.next();
-				String key = (String) propertyEntry.getKey();
-				String value = (String) propertyEntry.getValue();
-				profileInstallRegistry.setInstallableUnitProfileProperty(iu, key, value);
-			}
-		}
-
-		profiles.put(id, copyProfile(toUpdate));
-
-		// TODO: persists should be grouped some way to ensure they are consistent
-		installRegistry.persist();
-		persist();
+		doUpdateProfile(toUpdate);
 		broadcastChangeEvent(toUpdate, ProfileEvent.CHANGED);
 	}
 
@@ -140,19 +117,24 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 			id = self;
 		if (profiles.get(id) != null)
 			throw new IllegalArgumentException(NLS.bind(Messages.Profile_Duplicate_Root_Profile_Id, id));
+		doUpdateProfile(toAdd);
+		broadcastChangeEvent(toAdd, ProfileEvent.ADDED);
+	}
 
+	private void doUpdateProfile(Profile toUpdate) {
 		InstallRegistry installRegistry = (InstallRegistry) ServiceHelper.getService(EngineActivator.getContext(), IInstallRegistry.class.getName());
 		if (installRegistry == null)
 			return;
 
-		installRegistry.removeProfileInstallRegistry(toAdd);
+		installRegistry.removeProfileInstallRegistry(toUpdate);
 		//TODO: Should be using profile id not Profile object
-		IProfileInstallRegistry profileInstallRegistry = installRegistry.getProfileInstallRegistry(toAdd);
-		for (Iterator it = toAdd.getInstallableUnits(); it.hasNext();) {
+		IProfileInstallRegistry profileInstallRegistry = installRegistry.getProfileInstallRegistry(toUpdate);
+		Iterator it = toUpdate.query(InstallableUnitQuery.ANY, new Collector(), null).iterator();
+		while (it.hasNext()) {
 			IInstallableUnit iu = (IInstallableUnit) it.next();
 			profileInstallRegistry.addInstallableUnits(iu);
-			OrderedProperties properties = toAdd.getInstallableUnitProfileProperties(iu);
-			for (Iterator propIt = properties.entrySet().iterator(); propIt.hasNext();) {
+			OrderedProperties iuProperties = toUpdate.getInstallableUnitProfileProperties(iu);
+			for (Iterator propIt = iuProperties.entrySet().iterator(); propIt.hasNext();) {
 				Entry propertyEntry = (Entry) propIt.next();
 				String key = (String) propertyEntry.getKey();
 				String value = (String) propertyEntry.getValue();
@@ -160,11 +142,10 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 			}
 		}
 
-		profiles.put(id, copyProfile(toAdd));
+		profiles.put(toUpdate.getProfileId(), copyProfile(toUpdate));
 		// TODO: persists should be grouped some way to ensure they are consistent
 		installRegistry.persist();
 		persist();
-		broadcastChangeEvent(toAdd, ProfileEvent.ADDED);
 	}
 
 	public synchronized void removeProfile(Profile toRemove) {
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Profile.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Profile.java
index 8d12cec..021712e 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Profile.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Profile.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others. All rights reserved. This
+ * Copyright (c) 2007, 2008 IBM Corporation and others. All rights reserved. This
  * program and the accompanying materials are made available under the terms of
  * the Eclipse Public License v1.0 which accompanies this distribution, and is
  * available at http://www.eclipse.org/legal/epl-v10.html
@@ -244,17 +244,8 @@ public class Profile implements IQueryable {
 		return result;
 	}
 
-	private IInstallableUnit[] getAllInstallableUnits() {
-		return (IInstallableUnit[]) iuProperties.keySet().toArray(new IInstallableUnit[iuProperties.size()]);
-	}
-
 	public Collector query(Query query, Collector collector, IProgressMonitor monitor) {
-		return query.perform(Arrays.asList(getAllInstallableUnits()).iterator(), collector);
-	}
-
-	public Iterator getInstallableUnits() {
-		// NOTE: this is a copy
-		return Arrays.asList(getAllInstallableUnits()).iterator();
+		return query.perform(iuProperties.keySet().iterator(), collector);
 	}
 
 	public String getInstallableUnitProfileProperty(IInstallableUnit iu, String key) {
diff --git a/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallUpdateProductOperation.java b/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallUpdateProductOperation.java
index 2d6a96e..9e28f72 100644
--- a/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallUpdateProductOperation.java
+++ b/bundles/org.eclipse.equinox.p2.installer/src/org/eclipse/equinox/internal/p2/installer/InstallUpdateProductOperation.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others.
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -69,10 +69,7 @@ public class InstallUpdateProductOperation implements IInstallOperation {
 	 * This profile is being updated; return the units to uninstall from the profile.
 	 */
 	private IInstallableUnit[] computeUnitsToUninstall(Profile profile) {
-		ArrayList units = new ArrayList();
-		for (Iterator it = profile.getInstallableUnits(); it.hasNext();)
-			units.add(it.next());
-		return (IInstallableUnit[]) units.toArray(new IInstallableUnit[units.size()]);
+		return (IInstallableUnit[]) profile.query(InstallableUnitQuery.ANY, new Collector(), null).toArray(IInstallableUnit.class);
 	}
 
 	/**
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java
index ff18bcd..99cd493 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java
@@ -132,7 +132,7 @@ public class MetadataRepositoryIO {
 			attributeOptional(DESCRIPTION_ATTRIBUTE, repository.getDescription()); // TODO: could be cdata?
 
 			writeProperties(repository.getProperties());
-			Collector units = repository.query(new InstallableUnitQuery(null), new Collector(), null);
+			Collector units = repository.query(InstallableUnitQuery.ANY, new Collector(), null);
 			writeInstallableUnits(units.iterator(), units.size());
 
 			end(REPOSITORY_ELEMENT);
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/query/InstallableUnitQuery.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/query/InstallableUnitQuery.java
index 44436af..f2a1c06 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/query/InstallableUnitQuery.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/query/InstallableUnitQuery.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others.
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -19,6 +19,12 @@ import org.osgi.framework.Version;
  * A query that matches on the id and version of an {@link IInstallableUnit}.
  */
 public class InstallableUnitQuery extends Query {
+	/**
+	 * A convenience query that will match any {@link IInstallableUnit}
+	 * it encounters.
+	 */
+	public static final InstallableUnitQuery ANY = new InstallableUnitQuery(null);
+
 	private String id;
 	private final VersionRange range;
 
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/p2/reconciler/dropins/ProfileSynchronizer.java b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/p2/reconciler/dropins/ProfileSynchronizer.java
index 6c79ddc..dd6b028 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/p2/reconciler/dropins/ProfileSynchronizer.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/p2/reconciler/dropins/ProfileSynchronizer.java
@@ -54,7 +54,8 @@ public class ProfileSynchronizer {
 		for (Iterator iter = repositories.iterator(); iter.hasNext();) {
 			IMetadataRepository metadataRepository = (IMetadataRepository) iter.next();
 			String repositoryId = metadataRepository.getLocation().toExternalForm();
-			for (Iterator it = profile.getInstallableUnits(); it.hasNext();) {
+			Iterator it = profile.query(InstallableUnitQuery.ANY, new Collector(), null).iterator();
+			while (it.hasNext()) {
 				IInstallableUnit iu = (IInstallableUnit) it.next();
 				if (repositoryId.equals(iu.getProperty(REPOSITORY_ID))) {
 					String fileName = iu.getProperty(FILE_NAME);
diff --git a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/p2/reconciler/dropins/ProfileSynchronizer.java b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/p2/reconciler/dropins/ProfileSynchronizer.java
index 6c79ddc..dd6b028 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/p2/reconciler/dropins/ProfileSynchronizer.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/p2/reconciler/dropins/ProfileSynchronizer.java
@@ -54,7 +54,8 @@ public class ProfileSynchronizer {
 		for (Iterator iter = repositories.iterator(); iter.hasNext();) {
 			IMetadataRepository metadataRepository = (IMetadataRepository) iter.next();
 			String repositoryId = metadataRepository.getLocation().toExternalForm();
-			for (Iterator it = profile.getInstallableUnits(); it.hasNext();) {
+			Iterator it = profile.query(InstallableUnitQuery.ANY, new Collector(), null).iterator();
+			while (it.hasNext()) {
 				IInstallableUnit iu = (IInstallableUnit) it.next();
 				if (repositoryId.equals(iu.getProperty(REPOSITORY_ID))) {
 					String fileName = iu.getProperty(FILE_NAME);
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
index 6bfb32c..7357d7f 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
@@ -22,8 +22,10 @@ import org.eclipse.equinox.p2.engine.*;
 import org.eclipse.equinox.p2.metadata.*;
 import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitDescription;
 import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitFragmentDescription;
+import org.eclipse.equinox.p2.metadata.query.InstallableUnitQuery;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepositoryManager;
+import org.eclipse.equinox.p2.query.Collector;
 import org.eclipse.osgi.service.resolver.VersionRange;
 import org.osgi.framework.Version;
 
@@ -59,12 +61,7 @@ public class AbstractProvisioningTest extends TestCase {
 
 	public static void assertEmptyProfile(Profile p) {
 		assertNotNull("The profile should not be null", p);
-		boolean containsIU = false;
-		for (Iterator iterator = p.getInstallableUnits(); iterator.hasNext();) {
-			containsIU = true;
-			break;
-		}
-		if (containsIU)
+		if (getInstallableUnits(p).hasNext())
 			fail("The profile should be empty,profileId=" + p);
 	}
 
@@ -108,7 +105,7 @@ public class AbstractProvisioningTest extends TestCase {
 	 */
 	protected static void assertProfileContains(String message, Profile profile, IInstallableUnit[] expectedUnits) {
 		HashSet expected = new HashSet(Arrays.asList(expectedUnits));
-		for (Iterator it = profile.getInstallableUnits(); it.hasNext();) {
+		for (Iterator it = getInstallableUnits(profile); it.hasNext();) {
 			IInstallableUnit actual = (IInstallableUnit) it.next();
 			if (!expected.remove(actual))
 				fail(message + " profile " + profile.getProfileId() + " contained an unexpected unit: " + actual);
@@ -122,7 +119,7 @@ public class AbstractProvisioningTest extends TestCase {
 	 */
 	protected static void assertProfileContainsAll(String message, Profile profile, IInstallableUnit[] expectedUnits) {
 		HashSet expected = new HashSet(Arrays.asList(expectedUnits));
-		for (Iterator it = profile.getInstallableUnits(); it.hasNext();) {
+		for (Iterator it = getInstallableUnits(profile); it.hasNext();) {
 			IInstallableUnit actual = (IInstallableUnit) it.next();
 			expected.remove(actual);
 		}
@@ -461,6 +458,10 @@ public class AbstractProvisioningTest extends TestCase {
 		fail(message + ": " + e);
 	}
 
+	public static Iterator getInstallableUnits(Profile p) {
+		return p.query(InstallableUnitQuery.ANY, new Collector(), null).iterator();
+	}
+
 	/**
 	 * 	Get the 'self' capability for the given installable unit.
 	 */
@@ -486,7 +487,7 @@ public class AbstractProvisioningTest extends TestCase {
 
 	public static void printProfile(Profile toPrint) {
 		boolean containsIU = false;
-		for (Iterator iterator = toPrint.getInstallableUnits(); iterator.hasNext();) {
+		for (Iterator iterator = getInstallableUnits(toPrint); iterator.hasNext();) {
 			System.out.println(iterator.next());
 			containsIU = true;
 		}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/RollbackTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/RollbackTest.java
index 658828f..3ff7cef 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/RollbackTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/RollbackTest.java
@@ -42,7 +42,7 @@ public class RollbackTest extends AbstractProvisioningTest {
 		IMetadataRepositoryManager repoMan = (IMetadataRepositoryManager) ServiceHelper.getService(TestActivator.getContext(), IMetadataRepositoryManager.class.getName());
 		IMetadataRepository repo = null;
 		repo = repoMan.loadRepository(getRollbackRepository(), null);
-		IInstallableUnit[] ius = (IInstallableUnit[]) repo.query(new InstallableUnitQuery(null), new Collector(), null).toArray(IInstallableUnit.class);
+		IInstallableUnit[] ius = (IInstallableUnit[]) repo.query(InstallableUnitQuery.ANY, new Collector(), null).toArray(IInstallableUnit.class);
 		for (int i = 0; i < ius.length; i++)
 			System.out.println(ius[i]);
 		director.become(ius[0], profile, null, new NullProgressMonitor());
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/UpdateTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/UpdateTest.java
index 33d03ea..8c7bb31 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/UpdateTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/UpdateTest.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others. All rights reserved. This
+ * Copyright (c) 2007, 2008 IBM Corporation and others. All rights reserved. This
  * program and the accompanying materials are made available under the terms of
  * the Eclipse Public License v1.0 which accompanies this distribution, and is
  * available at http://www.eclipse.org/legal/epl-v10.html
@@ -57,7 +57,7 @@ public class UpdateTest extends AbstractProvisioningTest {
 		ProvisioningPlan plan = planner.getInstallPlan(new IInstallableUnit[] {f1_1}, profile, null, new NullProgressMonitor());
 		assertOK(plan.getStatus());
 		assertOK(director.install(new IInstallableUnit[] {f1_1}, profile, null, new NullProgressMonitor()));
-		for (Iterator iterator = profile.getInstallableUnits(); iterator.hasNext();) {
+		for (Iterator iterator = getInstallableUnits(profile); iterator.hasNext();) {
 			System.out.println(iterator.next());
 		}
 		assertEquals(IStatus.ERROR, director.install(new IInstallableUnit[] {f1_4}, profile, null, new NullProgressMonitor()).getSeverity());
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/directorywatcher/RepositoryListenerTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/directorywatcher/RepositoryListenerTest.java
index 5d04baf..3e48c92 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/directorywatcher/RepositoryListenerTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/directorywatcher/RepositoryListenerTest.java
@@ -30,7 +30,7 @@ public class RepositoryListenerTest extends AbstractProvisioningTest {
 	}
 
 	private IInstallableUnit[] getInstallableUnits(RepositoryListener listener) {
-		return (IInstallableUnit[]) listener.getMetadataRepository().query(new InstallableUnitQuery(null), new Collector(), null).toArray(IInstallableUnit.class);
+		return (IInstallableUnit[]) listener.getMetadataRepository().query(InstallableUnitQuery.ANY, new Collector(), null).toArray(IInstallableUnit.class);
 	}
 
 	public void testDirectoryWatcherListener() {
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
index 254df74..1100e7f 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
@@ -143,7 +143,7 @@ public class EngineTest extends AbstractProvisioningTest {
 
 		Profile profile = createProfile("testPerformInstallOSGiFramework");
 		profile.setValue(Profile.PROP_INSTALL_FOLDER, testProvisioning.getAbsolutePath());
-		for (Iterator it = profile.getInstallableUnits(); it.hasNext();) {
+		for (Iterator it = getInstallableUnits(profile); it.hasNext();) {
 			PhaseSet phaseSet = new DefaultPhaseSet();
 			IInstallableUnit doomed = (IInstallableUnit) it.next();
 			Operand[] operands = new Operand[] {new Operand(createResolvedIU(doomed), null)};
@@ -154,7 +154,7 @@ public class EngineTest extends AbstractProvisioningTest {
 		Operand[] operands = new Operand[] {new Operand(null, createOSGiIU())};
 		IStatus result = engine.perform(profile, phaseSet, operands, new NullProgressMonitor());
 		assertTrue(result.isOK());
-		Iterator ius = profile.getInstallableUnits();
+		Iterator ius = getInstallableUnits(profile);
 		assertTrue(ius.hasNext());
 	}
 
@@ -166,7 +166,7 @@ public class EngineTest extends AbstractProvisioningTest {
 		Operand[] operands = new Operand[] {new Operand(createOSGiIU(), createOSGiIU())};
 		IStatus result = engine.perform(profile, phaseSet, operands, new NullProgressMonitor());
 		assertTrue(result.isOK());
-		Iterator ius = profile.getInstallableUnits();
+		Iterator ius = getInstallableUnits(profile);
 		assertTrue(ius.hasNext());
 	}
 
@@ -178,8 +178,7 @@ public class EngineTest extends AbstractProvisioningTest {
 		Operand[] operands = new Operand[] {new Operand(createOSGiIU(), null)};
 		IStatus result = engine.perform(profile, phaseSet, operands, new NullProgressMonitor());
 		assertTrue(result.isOK());
-		Iterator ius = profile.getInstallableUnits();
-		assertFalse(ius.hasNext());
+		assertEmptyProfile(profile);
 	}
 
 	public void testPerformRollback() {
@@ -188,13 +187,13 @@ public class EngineTest extends AbstractProvisioningTest {
 		profile.setValue(Profile.PROP_INSTALL_FOLDER, testProvisioning.getAbsolutePath());
 		PhaseSet phaseSet = new DefaultPhaseSet();
 
-		Iterator ius = profile.getInstallableUnits();
+		Iterator ius = getInstallableUnits(profile);
 		assertFalse(ius.hasNext());
 
 		Operand[] operands = new Operand[] {new Operand(null, createOSGiIU()), new Operand(null, createBadIU())};
 		IStatus result = engine.perform(profile, phaseSet, operands, new NullProgressMonitor());
 		assertFalse(result.isOK());
-		ius = profile.getInstallableUnits();
+		ius = getInstallableUnits(profile);
 		//TODO Currently this test is failing. See bug 212058
 		//		assertFalse(ius.hasNext());
 	}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/full/End2EndTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/full/End2EndTest.java
index 3650d4f..95e081b 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/full/End2EndTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/full/End2EndTest.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others. All rights reserved. This
+ * Copyright (c) 2007, 2008 IBM Corporation and others. All rights reserved. This
  * program and the accompanying materials are made available under the terms of
  * the Eclipse Public License v1.0 which accompanies this distribution, and is
  * available at http://www.eclipse.org/legal/epl-v10.html
@@ -96,7 +96,7 @@ public class End2EndTest extends AbstractProvisioningTest {
 		if (!s.isOK())
 			fail("The uninstallation has failed and it was not expected");
 
-		assertEquals(false, profile2.getInstallableUnits().hasNext()); //the profile should be empty since we uninstalled everything
+		assertEquals(false, getInstallableUnits(profile2).hasNext()); //the profile should be empty since we uninstalled everything
 		IInstallableUnit[] snapshots = getIUs("profile2");
 		assertTrue("snap" + snapshots.length, snapshots.length >= 2);//TODO Normally here it should be 2!!!
 		assertTrue(profile2.query(new InstallableUnitQuery("sdk", VersionRange.emptyRange), new Collector(), null).isEmpty());
@@ -112,7 +112,7 @@ public class End2EndTest extends AbstractProvisioningTest {
 		s = director.replace(new IInstallableUnit[] {getIU("sdk", new Version("3.3.0"))}, planner.updatesFor(getIU("sdk", new Version("3.3.0")), null), profile2, null, new NullProgressMonitor());
 		assertOK(s);
 		assertProfileContainsAll("", profile2, new IInstallableUnit[] {getIU("sdk", new Version("3.4.0"))});
-		assertNotIUs(new IInstallableUnit[] {getIU("sdk", new Version("3.3.0"))}, profile2.getInstallableUnits());
+		assertNotIUs(new IInstallableUnit[] {getIU("sdk", new Version("3.3.0"))}, getInstallableUnits(profile2));
 
 		//Remove everything from the profile by becoming an empty profile
 		s = director.become(firstSnapshot, profile2, null, new NullProgressMonitor());
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/JarURLRepositoryTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/JarURLRepositoryTest.java
index 2fd3c00..e917373 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/JarURLRepositoryTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/JarURLRepositoryTest.java
@@ -78,7 +78,7 @@ public class JarURLRepositoryTest extends TestCase {
 			fail(e.getMessage());
 		}
 		IMetadataRepository repo = manager.loadRepository(jarRepoURL, null);
-		assertTrue(!repo.query(new InstallableUnitQuery(null), new Collector(), null).isEmpty());
+		assertTrue(!repo.query(InstallableUnitQuery.ANY, new Collector(), null).isEmpty());
 		manager.removeRepository(jarRepoURL);
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/META-INF/MANIFEST.MF
index 7dac1cc..255bf2c 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/META-INF/MANIFEST.MF
@@ -19,6 +19,8 @@ Import-Package: org.eclipse.core.runtime;common=split,
  org.eclipse.equinox.p2.engine,
  org.eclipse.equinox.p2.garbagecollector,
  org.eclipse.equinox.p2.metadata,
+ org.eclipse.equinox.p2.metadata.query,
+ org.eclipse.equinox.p2.query,
  org.eclipse.equinox.spi.p2.artifact.repository,
  org.eclipse.equinox.spi.p2.core.repository,
  org.eclipse.osgi.framework.util,
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/MarkSetProvider.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/MarkSetProvider.java
index bfbb2f6..da9ace4 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/MarkSetProvider.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/MarkSetProvider.java
@@ -7,6 +7,8 @@ import org.eclipse.equinox.p2.garbagecollector.IMarkSetProvider;
 import org.eclipse.equinox.p2.garbagecollector.MarkSet;
 import org.eclipse.equinox.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.metadata.query.InstallableUnitQuery;
+import org.eclipse.equinox.p2.query.Collector;
 
 /**
  * IMarkSetProvider implementation for the EclipseTouchPoint.
@@ -23,7 +25,7 @@ public class MarkSetProvider implements IMarkSetProvider {
 	}
 
 	private void addArtifactKeys(Profile aProfile) {
-		Iterator installableUnits = aProfile.getInstallableUnits();
+		Iterator installableUnits = aProfile.query(InstallableUnitQuery.ANY, new Collector(), null).iterator();
 		while (installableUnits.hasNext()) {
 			IArtifactKey[] keys = ((IInstallableUnit) installableUnits.next()).getArtifacts();
 			if (keys == null)
diff --git a/bundles/org.eclipse.equinox.p2.updatechecker/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.updatechecker/META-INF/MANIFEST.MF
index cefcb4f..d7b5e40 100644
--- a/bundles/org.eclipse.equinox.p2.updatechecker/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.updatechecker/META-INF/MANIFEST.MF
@@ -12,6 +12,7 @@ Import-Package: org.eclipse.equinox.internal.p2.core.helpers,
  org.eclipse.equinox.p2.director,
  org.eclipse.equinox.p2.engine,
  org.eclipse.equinox.p2.metadata,
+ org.eclipse.equinox.p2.metadata.query,
  org.eclipse.equinox.p2.metadata.repository,
  org.eclipse.equinox.p2.query,
  org.osgi.framework;version="1.4.0"
diff --git a/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/p2/updatechecker/UpdateChecker.java b/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/p2/updatechecker/UpdateChecker.java
index 5c7866b..c6e3429 100644
--- a/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/p2/updatechecker/UpdateChecker.java
+++ b/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/p2/updatechecker/UpdateChecker.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others.
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -18,6 +18,8 @@ import org.eclipse.equinox.p2.director.IPlanner;
 import org.eclipse.equinox.p2.engine.IProfileRegistry;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.metadata.query.InstallableUnitQuery;
+import org.eclipse.equinox.p2.query.Collector;
 
 /**
  * An UpdateChecker periodically polls for updates to specified profiles and
@@ -109,7 +111,7 @@ public class UpdateChecker {
 		// TODO this is naive.  We get all the ius every time whereas we
 		// could monitor changes in the profile. 
 		ArrayList iusWithUpdates = new ArrayList();
-		Iterator iter = profile.getInstallableUnits();
+		Iterator iter = profile.query(InstallableUnitQuery.ANY, new Collector(), null).iterator();
 		while (iter.hasNext()) {
 			IInstallableUnit iu = (IInstallableUnit) iter.next();
 			IInstallableUnit[] replacements = getPlanner().updatesFor(iu, null);

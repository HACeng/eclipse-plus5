commit 8ca470eb11288ab0a67809aff4d42fba887f2752
Author: Pascal Rapicault <prapicau>
Date:   Thu Jan 24 03:47:35 2008 +0000

    Bug 209541 - New metadata to describe updates

4	0	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/NewDependencyExpander.java
3	4	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/OperationGenerator.java
25	8	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
2	3	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
4	4	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java
42	0	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataParser.java
14	0	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataWriter.java
3	0	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/XMLConstants.java
10	0	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/InstallableUnit.java
4	0	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/ResolvedInstallableUnit.java
51	0	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/UpdateDescriptor.java
6	16	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnit.java
47	0	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IUpdateDescriptor.java
8	0	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/MetadataFactory.java
29	0	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/query/UpdateQuery.java
5	8	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OperationGenerationTest.java
16	12	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OracleTest2.java
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/NewDependencyExpander.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/NewDependencyExpander.java
index 322d3c8..9a5f334 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/NewDependencyExpander.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/NewDependencyExpander.java
@@ -210,6 +210,10 @@ public class NewDependencyExpander {
 		public IInstallableUnit unresolved() {
 			return this;
 		}
+
+		public IUpdateDescriptor getUpdateDescriptor() {
+			return wrapped.getUpdateDescriptor();
+		}
 	}
 
 	static final int OperationWork = 100;
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/OperationGenerator.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/OperationGenerator.java
index 9d18649..f79878e 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/OperationGenerator.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/OperationGenerator.java
@@ -14,7 +14,6 @@ import org.eclipse.equinox.p2.metadata.*;
 import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitDescription;
 import org.eclipse.equinox.p2.metadata.query.InstallableUnitQuery;
 import org.eclipse.equinox.p2.query.Collector;
-import org.eclipse.osgi.service.resolver.VersionRange;
 
 public class OperationGenerator {
 	private static final IInstallableUnit NULL_IU = MetadataFactory.createResolvedInstallableUnit(MetadataFactory.createInstallableUnit(new InstallableUnitDescription()), new IInstallableUnitFragment[0]);
@@ -74,10 +73,10 @@ public class OperationGenerator {
 				//System.out.println("Can't update " + iuTo + " because another iu with same id is in the target state");
 				continue;
 			}
-			if (iuTo.getProperty(IInstallableUnit.PROP_UPDATE_FROM) == null)
+			if (iuTo.getUpdateDescriptor() == null)
 				continue;
-			//when the ui we update from is in the new state, skip (for example FROM is A, C, B & TO is C (update of 
-			InstallableUnitQuery updateQuery = new InstallableUnitQuery(iuTo.getProperty(IInstallableUnit.PROP_UPDATE_FROM), new VersionRange(iuTo.getProperty(IInstallableUnit.PROP_UPDATE_RANGE)));
+						//when the ui we update from is in the new state, skip (for example FROM is A, C, B & TO is C (update of 
+			InstallableUnitQuery updateQuery = new InstallableUnitQuery(iuTo.getUpdateDescriptor().getId(), iuTo.getUpdateDescriptor().getRange());
 			Iterator updates = updateQuery.perform(from.iterator(), new Collector()).iterator();
 
 			IInstallableUnit iuFrom;
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
index 8ea5689..66e07f2 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
@@ -20,6 +20,7 @@ import org.eclipse.equinox.p2.engine.Operand;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.metadata.query.InstallableUnitQuery;
+import org.eclipse.equinox.p2.metadata.query.UpdateQuery;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepositoryManager;
 import org.eclipse.equinox.p2.query.Collector;
@@ -284,16 +285,32 @@ public class SimplePlanner implements IPlanner {
 		}
 	}
 
-	public IInstallableUnit[] updatesFor(IInstallableUnit toUpdate, URL[] metadataRepositories, IProgressMonitor monitor) {
-		IInstallableUnit[] allius = gatherAvailableInstallableUnits(null, metadataRepositories, monitor);
-		Set updates = new HashSet();
-		for (int i = 0; i < allius.length; i++) {
-			if (toUpdate.getId().equals(allius[i].getProperty(IInstallableUnit.PROP_UPDATE_FROM))) {
-				if (toUpdate.getVersion().compareTo(allius[i].getVersion()) < 0 && new VersionRange(allius[i].getProperty(IInstallableUnit.PROP_UPDATE_RANGE)).isIncluded(toUpdate.getVersion()))
-					updates.add(allius[i]);
+	public IInstallableUnit[] updatesFor(IInstallableUnit toUpdate, URL[] repositories, IProgressMonitor monitor) {
+		Map resultsMap = new HashMap();
+
+		IMetadataRepositoryManager repoMgr = (IMetadataRepositoryManager) ServiceHelper.getService(DirectorActivator.context, IMetadataRepositoryManager.class.getName());
+		if (repositories == null)
+			repositories = repoMgr.getKnownRepositories(IMetadataRepositoryManager.REPOSITORIES_ALL);
+
+		SubMonitor sub = SubMonitor.convert(monitor, repositories.length * 200);
+		for (int i = 0; i < repositories.length; i++) {
+			try {
+				IMetadataRepository repository = repoMgr.loadRepository(repositories[i], sub.newChild(100));
+				Collector matches = repository.query(new UpdateQuery(toUpdate), new Collector(), sub.newChild(100));
+				for (Iterator it = matches.iterator(); it.hasNext();) {
+					IInstallableUnit iu = (IInstallableUnit) it.next();
+					String key = iu.getId() + "_" + iu.getVersion().toString(); //$NON-NLS-1$
+					IInstallableUnit currentIU = (IInstallableUnit) resultsMap.get(key);
+					if (currentIU == null || hasHigherFidelity(iu, currentIU))
+						resultsMap.put(key, iu);
+				}
+			} catch (ProvisionException e) {
+				//skip unreadable repositories
 			}
 		}
-		return (IInstallableUnit[]) updates.toArray(new IInstallableUnit[updates.size()]);
+		sub.done();
+		Collection results = resultsMap.values();
+		return (IInstallableUnit[]) results.toArray(new IInstallableUnit[results.size()]);
 	}
 
 	public ProvisioningPlan getRevertPlan(IInstallableUnit previous, Profile profile, URL[] metadataRepositories, IProgressMonitor monitor) {
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
index 54283e0..0d00f11 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
@@ -97,9 +97,8 @@ public class Generator {
 		root.setArtifacts(new IArtifactKey[0]);
 
 		root.setProperty("lineUp", "true"); //$NON-NLS-1$ //$NON-NLS-2$
-		root.setProperty(IInstallableUnit.PROP_UPDATE_FROM, configurationIdentification);
-		root.setProperty(IInstallableUnit.PROP_UPDATE_RANGE, VersionRange.emptyRange.toString());
-		ProvidedCapability groupCapability = MetadataFactory.createProvidedCapability(IInstallableUnit.NAMESPACE_IU_KIND, "group", new Version("1.0.0")); //$NON-NLS-1$ //$NON-NLS-2$
+		root.setUpdateDescriptor(MetadataFactory.createUpdateDescriptor(configurationIdentification, VersionRange.emptyRange, IUpdateDescriptor.NORMAL, null));
+		ProvidedCapability groupCapability = MetadataFactory.createProvidedCapability(IInstallableUnit.NAMESPACE_IU_KIND, "group", new Version("1.0.0"));
 		root.setCapabilities(new ProvidedCapability[] {MetadataGeneratorHelper.createSelfCapability(configurationIdentification, new Version(configurationVersion)), groupCapability});
 		root.setTouchpointType(MetadataGeneratorHelper.TOUCHPOINT_ECLIPSE);
 		Map touchpointData = new HashMap();
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java
index 7473a7c..7927c3a 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java
@@ -113,8 +113,8 @@ public class MetadataGeneratorHelper {
 		iu.setId(bd.getSymbolicName());
 		iu.setVersion(bd.getVersion());
 		iu.setFilter(bd.getPlatformFilter());
-		iu.setProperty(IInstallableUnit.PROP_UPDATE_FROM, bd.getSymbolicName());
-		iu.setProperty(IInstallableUnit.PROP_UPDATE_RANGE, VersionRange.emptyRange.toString());
+
+		iu.setUpdateDescriptor(MetadataFactory.createUpdateDescriptor(bd.getSymbolicName(), VersionRange.emptyRange, IUpdateDescriptor.NORMAL, "A description"));
 
 		boolean isFragment = bd.getHost() != null;
 		boolean requiresAFragment = isFragment ? false : requireAFragment(bd, manifest);
@@ -362,8 +362,8 @@ public class MetadataGeneratorHelper {
 		Version version = new Version(feature.getVersion());
 		iu.setVersion(version);
 		iu.setProperty(IInstallableUnit.PROP_NAME, feature.getLabel());
-		iu.setProperty(IInstallableUnit.PROP_UPDATE_FROM, id);
-		iu.setProperty(IInstallableUnit.PROP_UPDATE_RANGE, VersionRange.emptyRange.toString());
+
+		iu.setUpdateDescriptor(MetadataFactory.createUpdateDescriptor(id, VersionRange.emptyRange, IUpdateDescriptor.NORMAL, null));
 
 		FeatureEntry entries[] = feature.getEntries();
 		RequiredCapability[] required = new RequiredCapability[entries.length + 1];
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataParser.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataParser.java
index 5bce5db..244ab11 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataParser.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataParser.java
@@ -73,6 +73,7 @@ public abstract class MetadataParser extends XMLParser implements XMLConstants {
 		private ArtifactsHandler artifactsHandler = null;
 		private TouchpointTypeHandler touchpointTypeHandler = null;
 		private TouchpointDataHandler touchpointDataHandler = null;
+		private UpdateDescriptorHandler updateDescriptorHandler = null;
 
 		public InstallableUnitHandler(AbstractHandler parentHandler, Attributes attributes, List units) {
 			super(parentHandler, INSTALLABLE_UNIT_ELEMENT);
@@ -163,6 +164,9 @@ public abstract class MetadataParser extends XMLParser implements XMLConstants {
 				} else {
 					duplicateElement(this, name, attributes);
 				}
+			} else if (UPDATE_DESCRIPTOR_ELEMENT.equals(name)) {
+				if (updateDescriptorHandler == null)
+					updateDescriptorHandler = new UpdateDescriptorHandler(this, attributes);
 			} else {
 				invalidElement(name, attributes);
 			}
@@ -171,11 +175,28 @@ public abstract class MetadataParser extends XMLParser implements XMLConstants {
 		protected void finished() {
 			if (isValidXML() && currentUnit != null) {
 				OrderedProperties properties = (propertiesHandler == null ? new OrderedProperties(0) : propertiesHandler.getProperties());
+				String updateFrom = null;
+				VersionRange updateRange = null;
 				for (Enumeration e = properties.keys(); e.hasMoreElements();) {
 					String key = (String) e.nextElement();
 					String value = properties.getProperty(key);
+					//Backward compatibility
+					if (key.equals("equinox.p2.update.from")) {
+						updateFrom = value;
+						continue;
+					}
+					if (key.equals("equinox.p2.update.range")) {
+						updateRange = new VersionRange(value);
+						continue;
+					}
+					//End of backward compatibility
 					currentUnit.setProperty(key, value);
 				}
+				//Backward compatibility
+				if (updateFrom != null && updateRange != null)
+					currentUnit.setUpdateDescriptor(MetadataFactory.createUpdateDescriptor(updateFrom, updateRange, IUpdateDescriptor.NORMAL, null));
+				//End of backward compatibility
+
 				ProvidedCapability[] providedCapabilities = (providedCapabilitiesHandler == null ? new ProvidedCapability[0] : providedCapabilitiesHandler.getProvidedCapabilities());
 				currentUnit.setCapabilities(providedCapabilities);
 				RequiredCapability[] requiredCapabilities = (requiredCapabilitiesHandler == null ? new RequiredCapability[0] : requiredCapabilitiesHandler.getRequiredCapabilities());
@@ -196,6 +217,8 @@ public abstract class MetadataParser extends XMLParser implements XMLConstants {
 				TouchpointData[] touchpointData = (touchpointDataHandler == null ? new TouchpointData[0] : touchpointDataHandler.getTouchpointData());
 				for (int i = 0; i < touchpointData.length; i++)
 					currentUnit.addTouchpointData(touchpointData[i]);
+				if (updateDescriptorHandler != null)
+					currentUnit.setUpdateDescriptor(updateDescriptorHandler.getUpdateDescriptor());
 			}
 		}
 	}
@@ -462,4 +485,23 @@ public abstract class MetadataParser extends XMLParser implements XMLConstants {
 			}
 		}
 	}
+
+	protected class UpdateDescriptorHandler extends TextHandler {
+		private final String[] required = new String[] {ID_ATTRIBUTE, VERSION_RANGE_ATTRIBUTE};
+		private final String[] optional = new String[] {UPDATE_DESCRIPTOR_SEVERITY, DESCRIPTION_ATTRIBUTE};
+
+		private IUpdateDescriptor descriptor;
+
+		public UpdateDescriptorHandler(AbstractHandler parentHandler, Attributes attributes) {
+			super(parentHandler, INSTALLABLE_UNIT_ELEMENT);
+			String[] values = parseAttributes(attributes, required, optional);
+			VersionRange range = checkVersionRange(REQUIRED_CAPABILITY_ELEMENT, VERSION_RANGE_ATTRIBUTE, values[1]);
+			int severity = new Integer(values[2]).intValue();
+			descriptor = MetadataFactory.createUpdateDescriptor(values[0], range, severity, values[3]);
+		}
+
+		public IUpdateDescriptor getUpdateDescriptor() {
+			return descriptor;
+		}
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataWriter.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataWriter.java
index 293d12a..d0309ba 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataWriter.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataWriter.java
@@ -53,6 +53,7 @@ public abstract class MetadataWriter extends XMLWriter implements XMLConstants {
 			attribute(FRAGMENT_HOST_RANGE_ATTRIBUTE, fragment.getHostVersionRange());
 		}
 
+		writeUpdateDescriptor(resolvedIU, resolvedIU.getUpdateDescriptor());
 		writeProperties(iu.getProperties());
 		writeProvidedCapabilities(iu.getProvidedCapabilities());
 		writeRequiredCapabilities(iu.getRequiredCapabilities());
@@ -92,6 +93,19 @@ public abstract class MetadataWriter extends XMLWriter implements XMLConstants {
 		}
 	}
 
+	protected void writeUpdateDescriptor(IInstallableUnit iu, IUpdateDescriptor descriptor) {
+		if (descriptor == null)
+			return;
+
+		start(UPDATE_DESCRIPTOR_ELEMENT);
+		attribute(ID_ATTRIBUTE, descriptor.getId());
+		attribute(VERSION_RANGE_ATTRIBUTE, descriptor.getRange());
+		attribute(UPDATE_DESCRIPTOR_SEVERITY, descriptor.getSeverity());
+		attribute(DESCRIPTION_ATTRIBUTE, descriptor.getDescription());
+		end(UPDATE_DESCRIPTOR_ELEMENT);
+
+	}
+
 	protected void writeRequiredCapability(RequiredCapability capability) {
 		start(REQUIRED_CAPABILITY_ELEMENT);
 		attribute(NAMESPACE_ATTRIBUTE, capability.getNamespace());
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/XMLConstants.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/XMLConstants.java
index 9709e0e..3a79376 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/XMLConstants.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/XMLConstants.java
@@ -39,6 +39,7 @@ public interface XMLConstants extends org.eclipse.equinox.internal.p2.persistenc
 	public static final String TOUCHPOINT_DATA_ELEMENT = "touchpointData"; //$NON-NLS-1$
 	public static final String IU_FILTER_ELEMENT = "filter"; //$NON-NLS-1$
 	public static final String APPLICABILITY_FILTER_ELEMENT = "applicability"; //$NON-NLS-1$
+	public static final String UPDATE_DESCRIPTOR_ELEMENT = "update"; //$NON-NLS-1$
 
 	// Constants for attributes of an installable unit element
 	public static final String SINGLETON_ATTRIBUTE = "singleton"; //$NON-NLS-1$
@@ -68,4 +69,6 @@ public interface XMLConstants extends org.eclipse.equinox.internal.p2.persistenc
 	// Constants for attributes of an a touchpoint data instruction element
 	public static final String TOUCHPOINT_DATA_INSTRUCTION_KEY_ATTRIBUTE = "key"; //$NON-NLS-1$
 
+	// Constants for attributes of an update descriptor
+	public static final String UPDATE_DESCRIPTOR_SEVERITY = "severity"; //$NON-NLS-1$
 }
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/InstallableUnit.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/InstallableUnit.java
index cee57be..14e440c 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/InstallableUnit.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/InstallableUnit.java
@@ -41,6 +41,8 @@ public class InstallableUnit implements IInstallableUnit {
 
 	private Version version;
 
+	private IUpdateDescriptor updateInfo;
+
 	public InstallableUnit() {
 		super();
 	}
@@ -249,4 +251,12 @@ public class InstallableUnit implements IInstallableUnit {
 	public IInstallableUnit unresolved() {
 		return this;
 	}
+
+	public IUpdateDescriptor getUpdateDescriptor() {
+		return updateInfo;
+	}
+
+	public void setUpdateDescriptor(IUpdateDescriptor updateInfo) {
+		this.updateInfo = updateInfo;
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/ResolvedInstallableUnit.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/ResolvedInstallableUnit.java
index 6fa8ade..c8a2ed2 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/ResolvedInstallableUnit.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/ResolvedInstallableUnit.java
@@ -151,4 +151,8 @@ public class ResolvedInstallableUnit implements IInstallableUnit {
 		return original.unresolved();
 	}
 
+	public IUpdateDescriptor getUpdateDescriptor() {
+		return original.getUpdateDescriptor();
+	}
+
 }
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/UpdateDescriptor.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/UpdateDescriptor.java
new file mode 100644
index 0000000..eb87dea
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/UpdateDescriptor.java
@@ -0,0 +1,51 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others. All rights reserved. This
+ * program and the accompanying materials are made available under the terms of
+ * the Eclipse Public License v1.0 which accompanies this distribution, and is
+ * available at http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors: IBM Corporation - initial API and implementation
+ ******************************************************************************/
+package org.eclipse.equinox.internal.p2.metadata;
+
+import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.metadata.IUpdateDescriptor;
+import org.eclipse.osgi.service.resolver.VersionRange;
+
+public class UpdateDescriptor implements IUpdateDescriptor {
+	private String description;
+	private String id;
+	private VersionRange range;
+	private int severity;
+
+	public UpdateDescriptor(String id, VersionRange range, int severity, String description) {
+		this.id = id;
+		this.range = range;
+		this.severity = severity;
+		this.description = description;
+	}
+
+	public String getDescription() {
+		return description;
+	}
+
+	public String getId() {
+		return id;
+	}
+
+	public VersionRange getRange() {
+		return range;
+	}
+
+	public int getSeverity() {
+		return severity;
+	}
+
+	public boolean isUpdateOf(IInstallableUnit iu) {
+		if (!id.equals(iu.getId()))
+			return false;
+		if (range.isIncluded(iu.getVersion()))
+			return true;
+		return false;
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnit.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnit.java
index 49ac31d..163c77f 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnit.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnit.java
@@ -107,22 +107,6 @@ public interface IInstallableUnit extends Comparable {
 	 */
 	public static final String PROP_PROVIDER = "equinox.p2.provider"; //$NON-NLS-1$
 	/**
-	 * A property key (value <code>"equinox.p2.update.from"</code>) representing a 
-	 * String property containing the id of an installable unit that this installable unit
-	 * is an update for.
-	 * 
-	 * @see #getProperty(String)
-	 */
-	public static final String PROP_UPDATE_FROM = "equinox.p2.update.from"; //$NON-NLS-1$
-	/**
-	 * A property key (value <code>"equinox.p2.update.range"</code>) representing a 
-	 * String property containing the version range of an installable unit that this installable unit
-	 * is an update for.
-	 * 
-	 * @see #getProperty(String)
-	 */
-	public static final String PROP_UPDATE_RANGE = "equinox.p2.update.range"; //$NON-NLS-1$
-	/**
 	 * A property key (value <code>"equinox.p2.update.site"</code>) representing a 
 	 * String property containing the URL of the Web site or repository where updates for this 
 	 * installable unit can be obtained.
@@ -202,4 +186,10 @@ public interface IInstallableUnit extends Comparable {
 	 * @return The unresolved equivalent of this unit
 	 */
 	public IInstallableUnit unresolved();
+
+	/**
+	 * Returns information about what this installable unit is an update of.
+	 * @return The lineage information about the installable unit
+	 */
+	public IUpdateDescriptor getUpdateDescriptor();
 }
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IUpdateDescriptor.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IUpdateDescriptor.java
new file mode 100644
index 0000000..acee56e
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IUpdateDescriptor.java
@@ -0,0 +1,47 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others. All rights reserved. This
+ * program and the accompanying materials are made available under the terms of
+ * the Eclipse Public License v1.0 which accompanies this distribution, and is
+ * available at http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors: IBM Corporation - initial API and implementation
+ ******************************************************************************/
+package org.eclipse.equinox.p2.metadata;
+
+import org.eclipse.osgi.service.resolver.VersionRange;
+
+public interface IUpdateDescriptor {
+	public final int NORMAL = 0;
+	public final int HIGH = 1;
+
+	/**
+	 * The identifier of an installable unit that the installable unit containing this object is an update for.
+	 * @return An installable unit id
+	 */
+	public String getId();
+
+	/**
+	 * The range of the installable unit that the installable unit containing this object is an update for.
+	 * @return A version range
+	 */
+	public VersionRange getRange();
+
+	/**
+	 * The description of the update. This allows to explain what the update is about.
+	 * @return A description
+	 */
+	public String getDescription();
+
+	/**
+	 * The importance of the update descriptor represented as a int.
+	 * @return The severity.
+	 */
+	public int getSeverity();
+
+	/**
+	 * Helper method indicating whether or not an installable unit is an update for the installable unit passed 
+	 * @param iu, the installable unit checked
+	 * @return A boolean indicating whether or not an installable unit is an update.
+	 */
+	public boolean isUpdateOf(IInstallableUnit iu);
+}
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/MetadataFactory.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/MetadataFactory.java
index cd0c5d8..4f7832c 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/MetadataFactory.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/MetadataFactory.java
@@ -72,6 +72,10 @@ public class MetadataFactory {
 			unit().setVersion(newVersion);
 		}
 
+		public void setUpdateDescriptor(IUpdateDescriptor updateInfo) {
+			unit().setUpdateDescriptor(updateInfo);
+		}
+
 		InstallableUnit unit() {
 			if (unit == null)
 				unit = new InstallableUnit();
@@ -223,4 +227,8 @@ public class MetadataFactory {
 		typeCache[typeCacheOffset] = result;
 		typeCacheOffset = (typeCacheOffset + 1) % typeCache.length;
 	}
+
+	public static IUpdateDescriptor createUpdateDescriptor(String id, VersionRange range, int severity, String description) {
+		return new UpdateDescriptor(id, range, severity, description);
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/query/UpdateQuery.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/query/UpdateQuery.java
new file mode 100644
index 0000000..2600311
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/query/UpdateQuery.java
@@ -0,0 +1,29 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others. All rights reserved. This
+ * program and the accompanying materials are made available under the terms of
+ * the Eclipse Public License v1.0 which accompanies this distribution, and is
+ * available at http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors: IBM Corporation - initial API and implementation
+ ******************************************************************************/
+package org.eclipse.equinox.p2.metadata.query;
+
+import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.query.Query;
+
+public class UpdateQuery extends Query {
+	private IInstallableUnit updateFrom;
+
+	public UpdateQuery(IInstallableUnit updateFrom) {
+		this.updateFrom = updateFrom;
+	}
+
+	public boolean isMatch(Object obj) {
+		if (!(obj instanceof IInstallableUnit))
+			return false;
+		IInstallableUnit candidate = (IInstallableUnit) obj;
+		if (candidate.getUpdateDescriptor().isUpdateOf(updateFrom) && updateFrom.getVersion().compareTo(candidate.getVersion()) < 0 )
+			return true;
+		return false;
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OperationGenerationTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OperationGenerationTest.java
index be40c49..3431443 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OperationGenerationTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OperationGenerationTest.java
@@ -15,6 +15,7 @@ import org.eclipse.equinox.internal.p2.resolution.ResolutionHelper;
 import org.eclipse.equinox.p2.metadata.*;
 import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitDescription;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
+import org.eclipse.osgi.service.resolver.VersionRange;
 import org.osgi.framework.Version;
 
 public class OperationGenerationTest extends AbstractProvisioningTest {
@@ -87,14 +88,12 @@ public class OperationGenerationTest extends AbstractProvisioningTest {
 		InstallableUnitDescription b = new MetadataFactory.InstallableUnitDescription();
 		b.setId("b");
 		b.setVersion(new Version(1, 0, 0));
-		b.setProperty(IInstallableUnit.PROP_UPDATE_FROM, "a");
-		b.setProperty(IInstallableUnit.PROP_UPDATE_RANGE, "[1.0.0, 2.0.0)");
+		b.setUpdateDescriptor(MetadataFactory.createUpdateDescriptor("a", new VersionRange("[1.0.0, 2.0.0)"), IUpdateDescriptor.NORMAL, null));
 
 		InstallableUnitDescription c = new MetadataFactory.InstallableUnitDescription();
 		c.setId("c");
 		c.setVersion(new Version(1, 0, 0));
-		c.setProperty(IInstallableUnit.PROP_UPDATE_FROM, "a");
-		c.setProperty(IInstallableUnit.PROP_UPDATE_RANGE, "[2.0.0, 2.3.0)");
+		c.setUpdateDescriptor(MetadataFactory.createUpdateDescriptor("a", new VersionRange("[2.0.0, 2.3.0)"), IUpdateDescriptor.NORMAL, null));
 
 		Collection from;
 		from = new ArrayList();
@@ -118,8 +117,7 @@ public class OperationGenerationTest extends AbstractProvisioningTest {
 		InstallableUnitDescription b = new MetadataFactory.InstallableUnitDescription();
 		b.setId("b");
 		b.setVersion(new Version(1, 0, 0));
-		b.setProperty(IInstallableUnit.PROP_UPDATE_FROM, "a");
-		b.setProperty(IInstallableUnit.PROP_UPDATE_RANGE, "[1.0.0, 3.0.0)");
+		b.setUpdateDescriptor(MetadataFactory.createUpdateDescriptor("a", new VersionRange("[1.0.0, 3.0.0)"), IUpdateDescriptor.NORMAL, null));
 
 		Collection from;
 		from = new ArrayList();
@@ -141,8 +139,7 @@ public class OperationGenerationTest extends AbstractProvisioningTest {
 		InstallableUnitDescription b = new MetadataFactory.InstallableUnitDescription();
 		b.setId("b");
 		b.setVersion(new Version(1, 0, 0));
-		b.setProperty(IInstallableUnit.PROP_UPDATE_FROM, "a");
-		b.setProperty(IInstallableUnit.PROP_UPDATE_RANGE, "[1.0.0, 2.0.0)");
+		b.setUpdateDescriptor(MetadataFactory.createUpdateDescriptor("a", new VersionRange("[1.0.0, 2.0.0)"), IUpdateDescriptor.NORMAL, null));
 
 		Collection from;
 		from = new ArrayList();
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OracleTest2.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OracleTest2.java
index 4dff693..6ebf195 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OracleTest2.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OracleTest2.java
@@ -8,13 +8,11 @@
  ******************************************************************************/
 package org.eclipse.equinox.p2.tests.director;
 
-import java.util.HashMap;
-import java.util.Map;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.p2.director.IDirector;
 import org.eclipse.equinox.p2.engine.Profile;
-import org.eclipse.equinox.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.metadata.RequiredCapability;
+import org.eclipse.equinox.p2.metadata.*;
+import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitDescription;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 import org.eclipse.osgi.service.resolver.VersionRange;
 import org.osgi.framework.Version;
@@ -36,17 +34,23 @@ public class OracleTest2 extends AbstractProvisioningTest {
 		c1 = createIU("C", DEFAULT_VERSION, true);
 
 		requires = createRequiredCapabilities(IInstallableUnit.NAMESPACE_IU_ID, "C", new VersionRange("[2.0.0, 3.0.0)"), null);
-		Map properties = new HashMap();
-		properties.put(IInstallableUnit.PROP_UPDATE_FROM, "A");
-		properties.put(IInstallableUnit.PROP_UPDATE_RANGE, "[1.0.0, 2.3.0)");
-		a2 = createIU("A", new Version(2, 0, 0), requires, properties, true);
+		InstallableUnitDescription desc = new MetadataFactory.InstallableUnitDescription();
+		desc.setRequiredCapabilities(requires);
+		desc.setId("A");
+		desc.setVersion(new Version(2, 0, 0));
+		desc.setSingleton(true);
+		desc.setUpdateDescriptor(MetadataFactory.createUpdateDescriptor("A", new VersionRange("[1.0.0, 2.3.0)"), IUpdateDescriptor.NORMAL, null));
+
+		a2 = MetadataFactory.createInstallableUnit(desc);
 
 		b1 = createIU("B", DEFAULT_VERSION, requires, NO_PROPERTIES, true);
 
-		properties.clear();
-		properties.put(IInstallableUnit.PROP_UPDATE_FROM, "C");
-		properties.put(IInstallableUnit.PROP_UPDATE_RANGE, "[1.0.0, 2.3.0)");
-		c2 = createIU("C", new Version(2, 0, 0), NO_REQUIRES, properties, true);
+		InstallableUnitDescription desc2 = new MetadataFactory.InstallableUnitDescription();
+		desc2.setId("C");
+		desc2.setVersion(new Version(2, 0, 0));
+		desc2.setSingleton(true);
+		desc2.setUpdateDescriptor(MetadataFactory.createUpdateDescriptor("C", new VersionRange("[1.0.0, 2.3.0)"), IUpdateDescriptor.NORMAL, null));
+		c2 = MetadataFactory.createInstallableUnit(desc2);
 
 		createTestMetdataRepository(new IInstallableUnit[] {a1, c1});
 

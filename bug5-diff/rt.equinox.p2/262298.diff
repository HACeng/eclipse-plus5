commit c7a34215806f330d4954b44d6fe0942a0f533cd5
Author: Susan Franklin <sfranklin>
Date:   Thu Feb 26 22:28:13 2009 +0000

    Bug 262298 - [ui] review relationship between RepositoryManipulator, RepositoryLocationValidator, and AddRepo dialog

4	12	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ArtifactRepositoriesView.java
3	3	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java
1	0	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminUIMessages.java
3	4	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RemoveArtifactRepositoryOperation.java
4	5	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RemoveMetadataRepositoryOperation.java
2	2	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RepositoriesView.java
79	28	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddArtifactRepositoryDialog.java
6	6	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddMetadataRepositoryDialog.java
1	0	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/messages.properties
4	4	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUsPage.java
86	44	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AddRepositoryDialog.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ArtifactRepositoriesView.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ArtifactRepositoriesView.java
index 4adff24..a96e47a 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ArtifactRepositoriesView.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ArtifactRepositoriesView.java
@@ -13,12 +13,10 @@ package org.eclipse.equinox.internal.p2.ui.admin;
 import java.net.URI;
 import java.util.ArrayList;
 import org.eclipse.equinox.internal.p2.ui.admin.dialogs.AddArtifactRepositoryDialog;
-import org.eclipse.equinox.internal.p2.ui.admin.preferences.PreferenceConstants;
-import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvisioningOperationRunner;
 import org.eclipse.equinox.internal.provisional.p2.ui.model.ArtifactRepositories;
 import org.eclipse.equinox.internal.provisional.p2.ui.model.IRepositoryElement;
-import org.eclipse.equinox.internal.provisional.p2.ui.operations.*;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.RemoveRepositoryOperation;
 import org.eclipse.equinox.internal.provisional.p2.ui.viewers.StructuredViewerProvisioningListener;
 import org.eclipse.swt.widgets.Shell;
 import org.eclipse.ui.statushandlers.StatusManager;
@@ -54,10 +52,10 @@ public class ArtifactRepositoriesView extends RepositoriesView {
 	}
 
 	protected int openAddRepositoryDialog(Shell shell) {
-		return new AddArtifactRepositoryDialog(shell, getRepoFlags()).open();
+		return new AddArtifactRepositoryDialog(shell, ProvAdminUIActivator.getDefault().getPolicy()).open();
 	}
 
-	protected ProvisioningOperation getRemoveOperation(Object[] elements) {
+	protected RemoveRepositoryOperation getRemoveOperation(Object[] elements) {
 		ArrayList locations = new ArrayList();
 		for (int i = 0; i < elements.length; i++) {
 			if (elements[i] instanceof IRepositoryElement)
@@ -66,12 +64,6 @@ public class ArtifactRepositoriesView extends RepositoriesView {
 		return new RemoveArtifactRepositoryOperation(ProvAdminUIMessages.ArtifactRepositoriesView_RemoveRepositoryOperationLabel, (URI[]) locations.toArray(new URI[locations.size()]));
 	}
 
-	protected int getRepoFlags() {
-		if (ProvAdminUIActivator.getDefault().getPreferenceStore().getBoolean(PreferenceConstants.PREF_HIDE_SYSTEM_REPOS))
-			return IRepositoryManager.REPOSITORIES_NON_SYSTEM;
-		return IRepositoryManager.REPOSITORIES_ALL;
-	}
-
 	/*
 	 * (non-Javadoc)
 	 * @see org.eclipse.equinox.internal.p2.ui.admin.RepositoriesView#getListenerEventTypes()
@@ -85,7 +77,7 @@ public class ArtifactRepositoriesView extends RepositoriesView {
 	 * @see org.eclipse.equinox.internal.p2.ui.admin.ProvView#refreshUnderlyingModel()
 	 */
 	protected void refreshUnderlyingModel() {
-		ProvisioningOperationRunner.schedule(new RefreshArtifactRepositoriesOperation(ProvAdminUIMessages.ProvView_RefreshCommandLabel, getRepoFlags()), StatusManager.SHOW | StatusManager.LOG);
+		ProvisioningOperationRunner.schedule(new RefreshArtifactRepositoriesOperation(ProvAdminUIMessages.ProvView_RefreshCommandLabel, ProvAdminUIActivator.getDefault().getPolicy().getQueryContext().getArtifactRepositoryFlags()), StatusManager.SHOW | StatusManager.LOG);
 	}
 
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java
index 1935c04..d1b1e6e 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java
@@ -21,7 +21,7 @@ import org.eclipse.equinox.internal.provisional.p2.ui.ProvisioningOperationRunne
 import org.eclipse.equinox.internal.provisional.p2.ui.actions.InstallAction;
 import org.eclipse.equinox.internal.provisional.p2.ui.model.IRepositoryElement;
 import org.eclipse.equinox.internal.provisional.p2.ui.model.MetadataRepositories;
-import org.eclipse.equinox.internal.provisional.p2.ui.operations.*;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.RemoveRepositoryOperation;
 import org.eclipse.equinox.internal.provisional.p2.ui.viewers.IUDragAdapter;
 import org.eclipse.equinox.internal.provisional.p2.ui.viewers.StructuredViewerProvisioningListener;
 import org.eclipse.jface.action.IMenuManager;
@@ -65,10 +65,10 @@ public class MetadataRepositoriesView extends RepositoriesView {
 	}
 
 	protected int openAddRepositoryDialog(Shell shell) {
-		return new AddMetadataRepositoryDialog(shell, getRepoFlags()).open();
+		return new AddMetadataRepositoryDialog(shell, ProvAdminUIActivator.getDefault().getPolicy()).open();
 	}
 
-	protected ProvisioningOperation getRemoveOperation(Object[] elements) {
+	protected RemoveRepositoryOperation getRemoveOperation(Object[] elements) {
 		ArrayList locations = new ArrayList();
 		for (int i = 0; i < elements.length; i++) {
 			if (elements[i] instanceof IRepositoryElement)
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminUIMessages.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminUIMessages.java
index 8539eed..1f35ea5 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminUIMessages.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminUIMessages.java
@@ -63,6 +63,7 @@ public class ProvAdminUIMessages extends NLS {
 	public static String RepositoryImplementationPropertyPage_LocationLabel;
 	public static String RepositoryImplementationPropertyPage_NameColumnLabel;
 	public static String RepositoryImplementationPropertyPage_NameLabel;
+	public static String RepositoryImplementationPropertyPage_NicknameLabel;
 	public static String RepositoryImplementationPropertyPage_NoRepositorySelected;
 	public static String RepositoryImplementationPropertyPage_PropertiesLabel;
 	public static String RepositoryImplementationPropertyPage_ValueColumnLabel;
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RemoveArtifactRepositoryOperation.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RemoveArtifactRepositoryOperation.java
index 991876b..3f9ecfc 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RemoveArtifactRepositoryOperation.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RemoveArtifactRepositoryOperation.java
@@ -10,19 +10,18 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.admin;
 
-import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
-import org.eclipse.equinox.internal.provisional.p2.ui.operations.RepositoryOperation;
-
 import java.net.URI;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.RemoveRepositoryOperation;
 
 /**
  * Operation which removes the artifact repository with the given URL.
  * 
  * @since 3.4
  */
-public class RemoveArtifactRepositoryOperation extends RepositoryOperation {
+public class RemoveArtifactRepositoryOperation extends RemoveRepositoryOperation {
 
 	public RemoveArtifactRepositoryOperation(String label, URI[] repoLocations) {
 		super(label, repoLocations);
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RemoveMetadataRepositoryOperation.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RemoveMetadataRepositoryOperation.java
index 2bf5322..9060847 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RemoveMetadataRepositoryOperation.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RemoveMetadataRepositoryOperation.java
@@ -10,19 +10,18 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.admin;
 
-import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
-import org.eclipse.equinox.internal.provisional.p2.ui.operations.RepositoryOperation;
-
 import java.net.URI;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.RemoveRepositoryOperation;
 
 /**
- * Operation that removes the metadata repository with the given URL. *
+ * Operation that removes the metadata repository with the given location.
  * 
  * @since 3.4
  */
-public class RemoveMetadataRepositoryOperation extends RepositoryOperation {
+public class RemoveMetadataRepositoryOperation extends RemoveRepositoryOperation {
 
 	public RemoveMetadataRepositoryOperation(String label, URI[] repoLocations) {
 		super(label, repoLocations);
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RepositoriesView.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RepositoriesView.java
index e630742..bac3364 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RepositoriesView.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RepositoriesView.java
@@ -16,7 +16,7 @@ import org.eclipse.equinox.internal.p2.ui.admin.preferences.PreferenceConstants;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.ui.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.model.IRepositoryElement;
-import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningOperation;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.RemoveRepositoryOperation;
 import org.eclipse.equinox.internal.provisional.p2.ui.viewers.RepositoryContentProvider;
 import org.eclipse.equinox.internal.provisional.p2.ui.viewers.StructuredViewerProvisioningListener;
 import org.eclipse.jface.action.*;
@@ -166,7 +166,7 @@ abstract class RepositoriesView extends ProvView {
 
 	protected abstract int openAddRepositoryDialog(Shell shell);
 
-	protected abstract ProvisioningOperation getRemoveOperation(Object[] elements);
+	protected abstract RemoveRepositoryOperation getRemoveOperation(Object[] elements);
 
 	protected abstract String getAddCommandLabel();
 
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddArtifactRepositoryDialog.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddArtifactRepositoryDialog.java
index 7d19e13..be1d9b7 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddArtifactRepositoryDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddArtifactRepositoryDialog.java
@@ -10,16 +10,13 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.admin.dialogs;
 
-import org.eclipse.equinox.internal.p2.ui.admin.AddArtifactRepositoryOperation;
-
 import java.net.URI;
 import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.internal.p2.ui.admin.ProvAdminUIActivator;
-import org.eclipse.equinox.internal.p2.ui.admin.ProvAdminUIMessages;
+import org.eclipse.equinox.internal.p2.ui.admin.*;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.ui.dialogs.AddRepositoryDialog;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.*;
-import org.eclipse.equinox.internal.provisional.p2.ui.policy.RepositoryLocationValidator;
+import org.eclipse.equinox.internal.provisional.p2.ui.policy.*;
 import org.eclipse.swt.widgets.Shell;
 
 /**
@@ -30,32 +27,86 @@ import org.eclipse.swt.widgets.Shell;
  */
 public class AddArtifactRepositoryDialog extends AddRepositoryDialog {
 
-	public AddArtifactRepositoryDialog(Shell parentShell, int repoFlags) {
-		super(parentShell, repoFlags);
-	}
+	class ArtifactRepositoryManipulator extends RepositoryManipulator {
+		RepositoryLocationValidator validator;
 
-	protected ProvisioningOperation getOperation(URI location) {
-		return new AddArtifactRepositoryOperation(ProvAdminUIMessages.AddArtifactRepositoryDialog_OperationLabel, location);
-	}
+		public AddRepositoryOperation getAddOperation(URI location) {
+			return new AddArtifactRepositoryOperation(ProvAdminUIMessages.AddArtifactRepositoryDialog_OperationLabel, location);
+		}
+
+		/* (non-Javadoc)
+		 * @see org.eclipse.equinox.internal.provisional.p2.ui.policy.RepositoryManipulator#getAddOperationLabel()
+		 */
+		public String getAddOperationLabel() {
+			return ProvAdminUIMessages.AddArtifactRepositoryDialog_OperationLabel;
+		}
+
+		public String getManipulatorButtonLabel() {
+			// Not used in this dialog
+			return null;
+		}
 
-	protected RepositoryLocationValidator createRepositoryLocationValidator() {
-		return new RepositoryLocationValidator() {
-			public IStatus validateRepositoryLocation(URI location, boolean contactRepositories, IProgressMonitor monitor) {
-				IStatus duplicateStatus = Status.OK_STATUS;
-				URI[] knownRepositories;
-				try {
-					knownRepositories = ProvisioningUtil.getArtifactRepositories(repoFlag);
-				} catch (ProvisionException e) {
-					knownRepositories = new URI[0];
-				}
-				for (int i = 0; i < knownRepositories.length; i++) {
-					if (knownRepositories[i].equals(location)) {
-						duplicateStatus = new Status(IStatus.ERROR, ProvAdminUIActivator.PLUGIN_ID, LOCAL_VALIDATION_ERROR, ProvAdminUIMessages.AddArtifactRepositoryDialog_DuplicateURL, null);
-						break;
+		public String getManipulatorLinkLabel() {
+			// Not used in this dialog
+			return null;
+		}
+
+		public RemoveRepositoryOperation getRemoveOperation(URI[] repoLocations) {
+			return new RemoveArtifactRepositoryOperation(ProvAdminUIMessages.ArtifactRepositoriesView_RemoveRepositoryOperationLabel, repoLocations);
+		}
+
+		public String getRemoveOperationLabel() {
+			return ProvAdminUIMessages.ArtifactRepositoriesView_RemoveRepositoryOperationLabel;
+		}
+
+		public RepositoryLocationValidator getRepositoryLocationValidator(Shell shell) {
+			if (validator == null) {
+				validator = new RepositoryLocationValidator() {
+					public IStatus validateRepositoryLocation(URI location, boolean contactRepositories, IProgressMonitor monitor) {
+						IStatus duplicateStatus = Status.OK_STATUS;
+						URI[] knownRepositories = getKnownRepositories();
+						for (int i = 0; i < knownRepositories.length; i++) {
+							if (knownRepositories[i].equals(location)) {
+								duplicateStatus = new Status(IStatus.ERROR, ProvAdminUIActivator.PLUGIN_ID, LOCAL_VALIDATION_ERROR, ProvAdminUIMessages.AddArtifactRepositoryDialog_DuplicateURL, null);
+								break;
+							}
+						}
+						return duplicateStatus;
 					}
-				}
-				return duplicateStatus;
+				};
+			}
+			return validator;
+		}
+
+		public boolean manipulateRepositories(Shell shell) {
+			// Not used in this dialog
+			return false;
+		}
+
+		/* (non-Javadoc)
+		 * @see org.eclipse.equinox.internal.provisional.p2.ui.policy.RepositoryManipulator#getKnownRepositories()
+		 */
+		public URI[] getKnownRepositories() {
+			try {
+				return ProvisioningUtil.getArtifactRepositories(ProvAdminUIActivator.getDefault().getPolicy().getQueryContext().getArtifactRepositoryFlags());
+			} catch (ProvisionException e) {
+				return new URI[0];
 			}
-		};
+		}
+
 	}
+
+	RepositoryManipulator manipulator;
+
+	public AddArtifactRepositoryDialog(Shell parentShell, Policy policy) {
+		super(parentShell, policy);
+	}
+
+	protected RepositoryManipulator getRepositoryManipulator() {
+		if (manipulator == null) {
+			manipulator = new ArtifactRepositoryManipulator();
+		}
+		return manipulator;
+	}
+
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddMetadataRepositoryDialog.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddMetadataRepositoryDialog.java
index ad3352b..747f387 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddMetadataRepositoryDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddMetadataRepositoryDialog.java
@@ -10,12 +10,12 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.admin.dialogs;
 
-import org.eclipse.equinox.internal.p2.ui.admin.AddMetadataRepositoryOperation;
-
 import java.net.URI;
+import org.eclipse.equinox.internal.p2.ui.admin.AddMetadataRepositoryOperation;
 import org.eclipse.equinox.internal.p2.ui.admin.ProvAdminUIMessages;
 import org.eclipse.equinox.internal.provisional.p2.ui.dialogs.AddRepositoryDialog;
-import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningOperation;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.AddRepositoryOperation;
+import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
 import org.eclipse.swt.widgets.Shell;
 
 /**
@@ -26,11 +26,11 @@ import org.eclipse.swt.widgets.Shell;
  */
 public class AddMetadataRepositoryDialog extends AddRepositoryDialog {
 
-	public AddMetadataRepositoryDialog(Shell parentShell, int repoFlags) {
-		super(parentShell, repoFlags);
+	public AddMetadataRepositoryDialog(Shell parentShell, Policy policy) {
+		super(parentShell, policy);
 	}
 
-	protected ProvisioningOperation getOperation(URI location) {
+	protected AddRepositoryOperation getOperation(URI location) {
 		return new AddMetadataRepositoryOperation(ProvAdminUIMessages.AddMetadataRepositoryDialog_OperationLabel, location);
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/messages.properties b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/messages.properties
index 8174bc0..6d2546e 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/messages.properties
@@ -46,6 +46,7 @@ RepositoryImplementationPropertyPage_LocationLabel=Location:
 RepositoryImplementationPropertyPage_PropertiesLabel=Repository properties:
 RepositoryImplementationPropertyPage_NameColumnLabel=Name
 RepositoryImplementationPropertyPage_NameLabel=Name:
+RepositoryImplementationPropertyPage_NicknameLabel=User nickname:
 RepositoryImplementationPropertyPage_NoRepositorySelected=There was no repository selected
 RepositoryImplementationPropertyPage_ValueColumnLabel=Value
 IUGroup_ID=IU &id:
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUsPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUsPage.java
index 9a83cd1..068b3474 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUsPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUsPage.java
@@ -27,7 +27,7 @@ import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.ui.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.dialogs.AddRepositoryDialog;
 import org.eclipse.equinox.internal.provisional.p2.ui.dialogs.AvailableIUGroup;
-import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningOperation;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.AddRepositoryOperation;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.RepositoryOperation;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.viewers.StructuredViewerProvisioningListener;
@@ -545,9 +545,9 @@ public class AvailableIUsPage extends ProvisioningWizardPage implements ISelecta
 		if (!alwaysPrompt && !isNewText && selectionIndex != repoCombo.getSelectionIndex()) {
 			repoCombo.select(selectionIndex);
 		} else if (alwaysPrompt) {
-			AddRepositoryDialog dialog = new AddRepositoryDialog(getShell(), policy.getQueryContext().getMetadataRepositoryFlags()) {
-				protected ProvisioningOperation getOperation(URI repositoryLocation) {
-					RepositoryOperation op = repoMan.getAddOperation(repositoryLocation);
+			AddRepositoryDialog dialog = new AddRepositoryDialog(getShell(), policy) {
+				protected AddRepositoryOperation getOperation(URI repositoryLocation) {
+					AddRepositoryOperation op = repoMan.getAddOperation(repositoryLocation);
 					op.setNotify(false);
 					return op;
 				}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AddRepositoryDialog.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AddRepositoryDialog.java
index d3e8743..86aef1c 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AddRepositoryDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AddRepositoryDialog.java
@@ -13,12 +13,13 @@ package org.eclipse.equinox.internal.provisional.p2.ui.dialogs;
 import java.net.URI;
 import java.net.URISyntaxException;
 import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.internal.p2.ui.*;
+import org.eclipse.equinox.internal.p2.ui.ProvUIActivator;
+import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.dialogs.TextURLDropAdapter;
 import org.eclipse.equinox.internal.provisional.p2.ui.IProvHelpContextIds;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvisioningOperationRunner;
-import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningOperation;
-import org.eclipse.equinox.internal.provisional.p2.ui.policy.RepositoryLocationValidator;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.AddRepositoryOperation;
+import org.eclipse.equinox.internal.provisional.p2.ui.policy.*;
 import org.eclipse.jface.dialogs.*;
 import org.eclipse.jface.dialogs.Dialog;
 import org.eclipse.swt.SWT;
@@ -33,9 +34,8 @@ import org.eclipse.ui.statushandlers.StatusManager;
 
 /**
  * Abstract dialog class for adding repositories of different types. This class
- * assumes the user view of a repository is a name and URL (and possibly other
- * info as this class develops). Individual subclasses will dictate what kind of
- * repository and how it's created.
+ * assumes the user view of a repository is a name and URI. Individual subclasses 
+ * will dictate what kind of repository and how it's created.
  * 
  * @since 3.4
  * 
@@ -43,18 +43,15 @@ import org.eclipse.ui.statushandlers.StatusManager;
 public abstract class AddRepositoryDialog extends StatusDialog {
 
 	Button okButton;
-	Text url;
-	RepositoryLocationValidator urlValidator;
+	Text url, nickname;
 	static final String[] ARCHIVE_EXTENSIONS = new String[] {"*.jar;*.zip"}; //$NON-NLS-1$ 
 	static String lastLocalLocation = null;
 	static String lastArchiveLocation = null;
-	protected int repoFlag;
-
-	public AddRepositoryDialog(Shell parentShell, int repoFlag) {
+	Policy policy;
 
+	public AddRepositoryDialog(Shell parentShell, Policy policy) {
 		super(parentShell);
-		this.repoFlag = repoFlag;
-		urlValidator = createRepositoryLocationValidator();
+		this.policy = policy;
 		setTitle(ProvUIMessages.AddRepositoryDialog_Title);
 		PlatformUI.getWorkbench().getHelpSystem().setHelp(parentShell, IProvHelpContextIds.ADD_REPOSITORY_DIALOG);
 	}
@@ -69,28 +66,22 @@ public abstract class AddRepositoryDialog extends StatusDialog {
 		initializeDialogUnits(comp);
 		GridLayout layout = new GridLayout();
 		layout.numColumns = 3;
+		layout.marginTop = convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_SPACING);
+
 		comp.setLayout(layout);
 		GridData data = new GridData();
 		comp.setLayoutData(data);
 
-		Label urlLabel = new Label(comp, SWT.NONE);
-		urlLabel.setText(ProvUIMessages.AddRepositoryDialog_LocationLabel);
-		url = new Text(comp, SWT.BORDER);
+		// Name: []
+		Label nameLabel = new Label(comp, SWT.NONE);
+		nameLabel.setText(ProvUIMessages.AddRepositoryDialog_NameLabel);
+		nickname = new Text(comp, SWT.BORDER);
 		data = new GridData(GridData.FILL_HORIZONTAL);
 		data.widthHint = convertHorizontalDLUsToPixels(IDialogConstants.ENTRY_FIELD_WIDTH);
-		url.setLayoutData(data);
-		DropTarget target = new DropTarget(url, DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK);
-		target.setTransfer(new Transfer[] {URLTransfer.getInstance(), FileTransfer.getInstance()});
-		target.addDropListener(new TextURLDropAdapter(url, true));
-		url.addModifyListener(new ModifyListener() {
-			public void modifyText(ModifyEvent e) {
-				validateRepositoryURL(false);
-			}
-		});
-		url.setText(getInitialLocationText());
-		url.setSelection(0, url.getText().length());
 
-		// add vertical buttons for setting archive or local repos
+		nickname.setLayoutData(data);
+
+		// Third column is the vertical button group, spanning 2 lines
 		Composite buttonParent = new Composite(comp, SWT.NONE);
 		layout = new GridLayout();
 		layout.numColumns = 1;
@@ -99,9 +90,13 @@ public abstract class AddRepositoryDialog extends StatusDialog {
 		layout.horizontalSpacing = convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_SPACING);
 		layout.verticalSpacing = convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_SPACING);
 		buttonParent.setLayout(layout);
-		Button locationButton = new Button(buttonParent, SWT.PUSH);
-		locationButton.setText(ProvUIMessages.RepositoryGroup_LocalRepoBrowseButton);
-		locationButton.addSelectionListener(new SelectionAdapter() {
+		data = new GridData(SWT.FILL, SWT.FILL, true, true);
+		data.verticalSpan = 2;
+		buttonParent.setLayoutData(data);
+
+		Button localButton = new Button(buttonParent, SWT.PUSH);
+		localButton.setText(ProvUIMessages.RepositoryGroup_LocalRepoBrowseButton);
+		localButton.addSelectionListener(new SelectionAdapter() {
 			public void widgetSelected(SelectionEvent event) {
 				DirectoryDialog dialog = new DirectoryDialog(getShell(), SWT.APPLICATION_MODAL);
 				dialog.setMessage(ProvUIMessages.RepositoryGroup_SelectRepositoryDirectory);
@@ -114,10 +109,11 @@ public abstract class AddRepositoryDialog extends StatusDialog {
 				}
 			}
 		});
-		setButtonLayoutData(locationButton);
-		locationButton = new Button(buttonParent, SWT.PUSH);
-		locationButton.setText(ProvUIMessages.RepositoryGroup_ArchivedRepoBrowseButton);
-		locationButton.addSelectionListener(new SelectionAdapter() {
+		setButtonLayoutData(localButton);
+
+		Button archiveButton = new Button(buttonParent, SWT.PUSH);
+		archiveButton.setText(ProvUIMessages.RepositoryGroup_ArchivedRepoBrowseButton);
+		archiveButton.addSelectionListener(new SelectionAdapter() {
 			public void widgetSelected(SelectionEvent event) {
 				FileDialog dialog = new FileDialog(getShell(), SWT.APPLICATION_MODAL);
 				dialog.setText(ProvUIMessages.RepositoryGroup_RepositoryFile);
@@ -131,19 +127,52 @@ public abstract class AddRepositoryDialog extends StatusDialog {
 				}
 			}
 		});
-		setButtonLayoutData(locationButton);
+		setButtonLayoutData(archiveButton);
+
+		// Location: []
+		Label urlLabel = new Label(comp, SWT.NONE);
+		urlLabel.setText(ProvUIMessages.AddRepositoryDialog_LocationLabel);
+		url = new Text(comp, SWT.BORDER);
+		data = new GridData(GridData.FILL_HORIZONTAL);
+		data.widthHint = convertHorizontalDLUsToPixels(IDialogConstants.ENTRY_FIELD_WIDTH);
+		url.setLayoutData(data);
+		DropTarget target = new DropTarget(url, DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK);
+		target.setTransfer(new Transfer[] {URLTransfer.getInstance(), FileTransfer.getInstance()});
+		target.addDropListener(new TextURLDropAdapter(url, true));
+		url.addModifyListener(new ModifyListener() {
+			public void modifyText(ModifyEvent e) {
+				validateRepositoryURL(false);
+			}
+		});
+		url.setText(getInitialLocationText());
+		url.setSelection(0, url.getText().length());
+
+		comp.setTabList(new Control[] {nickname, url, buttonParent});
+
 		Dialog.applyDialogFont(comp);
 		return comp;
 	}
 
-	protected RepositoryLocationValidator createRepositoryLocationValidator() {
-		DefaultMetadataURLValidator validator = new DefaultMetadataURLValidator();
-		validator.setKnownRepositoriesFlag(repoFlag);
-		return validator;
+	/**
+	 * Return a location validator appropriate for this dialog.  The
+	 * default is to retrieve it from the repository manipulator.
+	 * Subclasses may override.
+	 * 
+	 * @return the validator
+	 */
+	protected RepositoryLocationValidator getRepositoryLocationValidator() {
+		return getRepositoryManipulator().getRepositoryLocationValidator(getShell());
 	}
 
-	protected RepositoryLocationValidator getRepositoryLocationValidator() {
-		return urlValidator;
+	/**
+	 * Return a RepositoryManipulator appropriate for validating and adding the
+	 * repository.
+	 * 
+	 * The default manipulator is described by the policy.  Subclasses may override.
+	 * @return the repository manipulator
+	 */
+	protected RepositoryManipulator getRepositoryManipulator() {
+		return policy.getRepositoryManipulator();
 	}
 
 	protected void okPressed() {
@@ -172,12 +201,25 @@ public abstract class AddRepositoryDialog extends StatusDialog {
 	protected IStatus addRepository() {
 		IStatus status = validateRepositoryURL(false);
 		if (status.isOK()) {
-			ProvisioningOperationRunner.schedule(getOperation(getUserLocation()), StatusManager.SHOW | StatusManager.LOG);
+			AddRepositoryOperation op = getOperation(getUserLocation());
+			String nick = nickname.getText().trim();
+			if (nick.length() > 0)
+				op.setNicknames(new String[] {nick});
+			ProvisioningOperationRunner.schedule(op, StatusManager.SHOW | StatusManager.LOG);
 		}
 		return status;
 	}
 
-	protected abstract ProvisioningOperation getOperation(URI repositoryLocation);
+	/**
+	 * Get an add operation appropriate for this dialog.  The default behavior
+	 * is to retrieve it from the policy, but subclasses may override.
+	 * 
+	 * @param repositoryLocation to be added
+	 * @return the add operation
+	 */
+	protected AddRepositoryOperation getOperation(URI repositoryLocation) {
+		return getRepositoryManipulator().getAddOperation(repositoryLocation);
+	}
 
 	/**
 	 * Validate the repository URL, returning a status that is appropriate

commit 6e6e13c8a5733745ffc96aacf2da6807122010ec
Author: Pascal Rapicault <prapicau>
Date:   Wed May 14 22:44:39 2008 +0000

    Bug 231138 - Pack200 processing step not shipped with the SDK

2	1	bundles/org.eclipse.equinox.p2.artifact.optimizers/META-INF/MANIFEST.MF
0	101	bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/AbstractBufferingStep.java
1	0	bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/AbstractDeltaStep.java
0	27	bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/Messages.java
0	3	bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/messages.properties
1	1	bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/pack200/Pack200OptimizerStep.java
2	2	bundles/org.eclipse.equinox.p2.artifact.processors/META-INF/MANIFEST.MF
0	5	bundles/org.eclipse.equinox.p2.artifact.processors/plugin.xml
0	79	bundles/org.eclipse.equinox.p2.artifact.processors/src/org/eclipse/equinox/internal/p2/artifact/processors/pack200/Pack200ProcessorStep.java
3	1	bundles/org.eclipse.equinox.p2.artifact.repository/META-INF/MANIFEST.MF
6	0	bundles/org.eclipse.equinox.p2.artifact.repository/plugin.xml
102	0	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/processing/AbstractBufferingStep.java
27	0	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/processing/Messages.java
3	0	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/processing/messages.properties
79	0	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/processors/pack200/Pack200ProcessorStep.java
2	2	bundles/org.eclipse.equinox.p2.jarprocessor/META-INF/MANIFEST.MF
diff --git a/bundles/org.eclipse.equinox.p2.artifact.optimizers/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.artifact.optimizers/META-INF/MANIFEST.MF
index 5ccaee2..1a12990 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.optimizers/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.artifact.optimizers/META-INF/MANIFEST.MF
@@ -21,7 +21,8 @@ Import-Package: ie.wombat.jbdiff,
  org.eclipse.osgi.util;version="1.1.0",
  org.osgi.framework;version="1.3.0"
 Eclipse-LazyStart: true
-Require-Bundle: org.eclipse.equinox.common
+Require-Bundle: org.eclipse.equinox.common,
+ org.eclipse.equinox.p2.artifact.repository
 Bundle-RequiredExecutionEnvironment: CDC-1.1/Foundation-1.1,
  J2SE-1.4
 Export-Package: org.eclipse.equinox.internal.p2.artifact.optimizers;x-friends:="org.eclipse.equinox.p2.artifact.processors",
diff --git a/bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/AbstractBufferingStep.java b/bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/AbstractBufferingStep.java
deleted file mode 100644
index a090f52..0000000
--- a/bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/AbstractBufferingStep.java
+++ /dev/null
@@ -1,101 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007 compeople AG and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- * 	compeople AG (Stefan Liebig) - initial API and implementation
- * 	IBM Corporation - ongoing development
- *******************************************************************************/
-package org.eclipse.equinox.internal.p2.artifact.optimizers;
-
-import java.io.*;
-import org.eclipse.core.runtime.IStatus;
-import org.eclipse.core.runtime.Status;
-import org.eclipse.equinox.internal.p2.core.helpers.FileUtils;
-import org.eclipse.equinox.internal.provisional.p2.artifact.repository.processing.ProcessingStep;
-import org.eclipse.osgi.util.NLS;
-
-public abstract class AbstractBufferingStep extends ProcessingStep {
-	private static final String WORK_DIR_PREFIX = "work"; //$NON-NLS-1$
-	private static final String WORK_DIR_SUFFIX = ""; //$NON-NLS-1$
-	protected static final String JAR_SUFFIX = ".jar"; //$NON-NLS-1$
-	protected static final String INCOMING_ROOT = "p2.optimizers.incoming"; //$NON-NLS-1$
-	protected static final String RESULT_ROOT = "p2.optimizers.result"; //$NON-NLS-1$
-	protected static final String PREDECESSOR_ROOT = "p2.optimizers.predecessor"; //$NON-NLS-1$
-
-	protected OutputStream incomingStream;
-	private File workDir;
-
-	protected AbstractBufferingStep() {
-		super();
-	}
-
-	public void write(int b) throws IOException {
-		OutputStream stream = getOutputStream();
-		stream.write(b);
-	}
-
-	protected OutputStream getOutputStream() throws IOException {
-		if (incomingStream != null)
-			return incomingStream;
-		// if buffering, store input stream in temporary file
-		incomingStream = createIncomingStream();
-		return incomingStream;
-	}
-
-	protected abstract OutputStream createIncomingStream() throws IOException;
-
-	public void close() throws IOException {
-		// When we go to close we must have seen all the content we are going to see.
-		// If no one wrote to the temp stream then we return an error. If there is 
-		// content then close the temporary stream and perform the processing.
-		// Performing the step should result in the new content being written to 
-		// the destination.  Make sure we delete the temporary file if any.
-		try {
-			if (incomingStream != null) {
-				incomingStream.close();
-				performProcessing();
-			} else {
-				setStatus(new Status(IStatus.ERROR, Activator.ID, Messages.Empty_stream));
-			}
-		} finally {
-			incomingStream = null;
-			cleanupTempFiles();
-			cleanupWorkDir();
-		}
-
-		super.close();
-		// TODO need to get real status here.  sometimes the optimizers do not give 
-		// any reasonable return status
-		// COMMENT status is initially set to OK!
-	}
-
-	protected abstract void performProcessing() throws IOException;
-
-	protected void cleanupTempFiles() {
-	}
-
-	private void cleanupWorkDir() throws IOException {
-		if (workDir != null) {
-			FileUtils.deleteAll(workDir);
-			// TODO try twice since there seems to be some cases where the dir is not 
-			// deleted the first time.  At least on Windows...
-			FileUtils.deleteAll(workDir);
-		}
-	}
-
-	protected File getWorkDir() throws IOException {
-		if (workDir != null)
-			return workDir;
-		workDir = File.createTempFile(WORK_DIR_PREFIX, WORK_DIR_SUFFIX);
-		if (!workDir.delete())
-			throw new IOException(NLS.bind(Messages.Can_not_delete_temp_dir, workDir));
-		if (!workDir.mkdirs())
-			throw new IOException(NLS.bind(Messages.Can_not_create_temp_dir, workDir));
-		return workDir;
-	}
-
-}
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/AbstractDeltaStep.java b/bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/AbstractDeltaStep.java
index 4c321d3..a150685 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/AbstractDeltaStep.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/AbstractDeltaStep.java
@@ -13,6 +13,7 @@ package org.eclipse.equinox.internal.p2.artifact.optimizers;
 import java.io.*;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.Status;
+import org.eclipse.equinox.internal.p2.artifact.processing.AbstractBufferingStep;
 import org.eclipse.equinox.internal.p2.metadata.ArtifactKey;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.*;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.processing.ProcessingStepDescriptor;
diff --git a/bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/Messages.java b/bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/Messages.java
deleted file mode 100644
index c1a95d1..0000000
--- a/bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/Messages.java
+++ /dev/null
@@ -1,27 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2008 IBM Corporation and others. All rights reserved. This
- * program and the accompanying materials are made available under the terms of
- * the Eclipse Public License v1.0 which accompanies this distribution, and is
- * available at http://www.eclipse.org/legal/epl-v10.html
- * 
- * Contributors: IBM Corporation - initial API and implementation
- ******************************************************************************/
-package org.eclipse.equinox.internal.p2.artifact.optimizers;
-
-import org.eclipse.osgi.util.NLS;
-
-public class Messages extends NLS {
-	private static final String BUNDLE_NAME = "org.eclipse.equinox.internal.p2.artifact.optimizers.messages"; //$NON-NLS-1$
-
-	public static String Can_not_create_temp_dir;
-	public static String Can_not_delete_temp_dir;
-	public static String Empty_stream;
-
-	static {
-		// initialize resource bundle
-		NLS.initializeMessages(BUNDLE_NAME, Messages.class);
-	}
-
-	private Messages() {
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/messages.properties b/bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/messages.properties
deleted file mode 100644
index 11266c2..0000000
--- a/bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/messages.properties
+++ /dev/null
@@ -1,3 +0,0 @@
-Can_not_create_temp_dir=Cannot create temporary working directory {0}.
-Can_not_delete_temp_dir=Canno create temporary working directory {1}.
-Empty_stream=Empty intermediate incoming stream. Probably zero length input.
diff --git a/bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/pack200/Pack200OptimizerStep.java b/bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/pack200/Pack200OptimizerStep.java
index d181a78..f7cf0cf 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/pack200/Pack200OptimizerStep.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/pack200/Pack200OptimizerStep.java
@@ -14,8 +14,8 @@ package org.eclipse.equinox.internal.p2.artifact.optimizers.pack200;
 import java.io.*;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.Status;
-import org.eclipse.equinox.internal.p2.artifact.optimizers.AbstractBufferingStep;
 import org.eclipse.equinox.internal.p2.artifact.optimizers.Activator;
+import org.eclipse.equinox.internal.p2.artifact.processing.AbstractBufferingStep;
 import org.eclipse.equinox.internal.p2.core.helpers.FileUtils;
 import org.eclipse.internal.provisional.equinox.p2.jarprocessor.JarProcessor;
 import org.eclipse.internal.provisional.equinox.p2.jarprocessor.JarProcessorExecutor;
diff --git a/bundles/org.eclipse.equinox.p2.artifact.processors/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.artifact.processors/META-INF/MANIFEST.MF
index 6c08b53..b07bc2d 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.processors/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.artifact.processors/META-INF/MANIFEST.MF
@@ -8,7 +8,8 @@ Bundle-RequiredExecutionEnvironment: CDC-1.1/Foundation-1.1,
  J2SE-1.4
 Require-Bundle: org.eclipse.equinox.common,
  org.eclipse.equinox.registry,
- org.eclipse.osgi
+ org.eclipse.osgi,
+ org.eclipse.equinox.p2.artifact.repository
 Import-Package: ie.wombat.jbdiff,
  org.eclipse.equinox.internal.p2.artifact.optimizers,
  org.eclipse.equinox.internal.p2.core.helpers,
@@ -25,7 +26,6 @@ Bundle-Vendor: %providerName
 Export-Package: org.eclipse.equinox.internal.p2.artifact.processors;x-internal:=true,
  org.eclipse.equinox.internal.p2.artifact.processors.jardelta;x-internal:=true,
  org.eclipse.equinox.internal.p2.artifact.processors.jbdiff;x-internal:=true,
- org.eclipse.equinox.internal.p2.artifact.processors.pack200;x-internal:=true,
  org.eclipse.equinox.internal.p2.artifact.processors.verifier;x-internal:=true
 Bundle-Activator: org.eclipse.equinox.internal.p2.artifact.processors.Activator
 Eclipse-LazyStart: true
diff --git a/bundles/org.eclipse.equinox.p2.artifact.processors/plugin.xml b/bundles/org.eclipse.equinox.p2.artifact.processors/plugin.xml
index d80e2d3..94a7003 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.processors/plugin.xml
+++ b/bundles/org.eclipse.equinox.p2.artifact.processors/plugin.xml
@@ -3,11 +3,6 @@
 <plugin>
 	<extension
 			point="org.eclipse.equinox.p2.artifact.repository.processingSteps"
-			id="org.eclipse.equinox.p2.processing.Pack200Unpacker">
-		<step class="org.eclipse.equinox.internal.p2.artifact.processors.pack200.Pack200ProcessorStep"/>
-	</extension>
-	<extension
-			point="org.eclipse.equinox.p2.artifact.repository.processingSteps"
 			id="org.eclipse.equinox.p2.processing.JarDeltaPatchStep">
 		<step class="org.eclipse.equinox.internal.p2.artifact.processors.jardelta.JarDeltaProcessorStep"/>
 	</extension>
diff --git a/bundles/org.eclipse.equinox.p2.artifact.processors/src/org/eclipse/equinox/internal/p2/artifact/processors/pack200/Pack200ProcessorStep.java b/bundles/org.eclipse.equinox.p2.artifact.processors/src/org/eclipse/equinox/internal/p2/artifact/processors/pack200/Pack200ProcessorStep.java
deleted file mode 100644
index 78c099c..0000000
--- a/bundles/org.eclipse.equinox.p2.artifact.processors/src/org/eclipse/equinox/internal/p2/artifact/processors/pack200/Pack200ProcessorStep.java
+++ /dev/null
@@ -1,79 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007 compeople AG and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- * 	compeople AG (Stefan Liebig) - initial API and implementation
- *  IBM Corporation - ongoing development
- *******************************************************************************/
-package org.eclipse.equinox.internal.p2.artifact.processors.pack200;
-
-import java.io.*;
-import org.eclipse.core.runtime.IStatus;
-import org.eclipse.core.runtime.Status;
-import org.eclipse.equinox.internal.p2.artifact.optimizers.AbstractBufferingStep;
-import org.eclipse.equinox.internal.p2.artifact.processors.Activator;
-import org.eclipse.equinox.internal.p2.core.helpers.FileUtils;
-import org.eclipse.equinox.internal.p2.jarprocessor.UnpackStep;
-import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactDescriptor;
-import org.eclipse.equinox.internal.provisional.p2.artifact.repository.processing.ProcessingStepDescriptor;
-import org.eclipse.internal.provisional.equinox.p2.jarprocessor.JarProcessorExecutor;
-import org.eclipse.internal.provisional.equinox.p2.jarprocessor.JarProcessorExecutor.Options;
-
-/**
- * The Pack200Unpacker expects an input containing ".jar.pack.gz" data.   
- */
-public class Pack200ProcessorStep extends AbstractBufferingStep {
-	public static final String PACKED_SUFFIX = ".pack.gz"; //$NON-NLS-1$
-
-	private File incoming;
-
-	protected OutputStream createIncomingStream() throws IOException {
-		incoming = File.createTempFile(INCOMING_ROOT, JAR_SUFFIX + PACKED_SUFFIX);
-		return new BufferedOutputStream(new FileOutputStream(incoming));
-	}
-
-	public void initialize(ProcessingStepDescriptor descriptor, IArtifactDescriptor context) {
-		super.initialize(descriptor, context);
-		if (!UnpackStep.canUnpack())
-			setStatus(new Status(IStatus.ERROR, Activator.ID, "Unpack facility not configured")); //$NON-NLS-1$
-	}
-
-	protected void cleanupTempFiles() {
-		super.cleanupTempFiles();
-		if (incoming != null)
-			incoming.delete();
-	}
-
-	protected void performProcessing() throws IOException {
-		File resultFile = null;
-		try {
-			resultFile = process();
-			// now write the processed content to the destination
-			if (resultFile.length() > 0) {
-				InputStream resultStream = new BufferedInputStream(new FileInputStream(resultFile));
-				FileUtils.copyStream(resultStream, true, getDestination(), false);
-			} else {
-				setStatus(new Status(IStatus.ERROR, Activator.ID, "Empty intermediate file: " + resultFile)); //$NON-NLS-1$
-			}
-		} finally {
-			if (resultFile != null)
-				resultFile.delete();
-		}
-	}
-
-	protected File process() throws IOException {
-		Options options = new Options();
-		options.unpack = true;
-		// TODO use false here assuming that all content is conditioned.  Need to revise this
-		options.processAll = false;
-		options.input = incoming;
-		options.outputDir = getWorkDir().getPath();
-		options.verbose = false;
-		new JarProcessorExecutor().runJarProcessor(options);
-		return new File(getWorkDir(), incoming.getName().substring(0, incoming.getName().length() - PACKED_SUFFIX.length()));
-	}
-}
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.artifact.repository/META-INF/MANIFEST.MF
index 0ebea81..8e065bd 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/META-INF/MANIFEST.MF
@@ -6,6 +6,8 @@ Bundle-Vendor: %providerName
 Bundle-Localization: plugin
 Bundle-Version: 1.0.0.qualifier
 Export-Package: org.eclipse.equinox.internal.p2.artifact.mirror;x-internal:=true,
+ org.eclipse.equinox.internal.p2.artifact.processing,
+ org.eclipse.equinox.internal.p2.artifact.processors.pack200,
  org.eclipse.equinox.internal.p2.artifact.repository;x-friends:="org.eclipse.equinox.p2.metadata.generator,org.eclipse.equinox.p2.reconciler.dropins",
  org.eclipse.equinox.internal.p2.artifact.repository.simple;x-friends:="org.eclipse.equinox.p2.selfhosting,org.eclipse.equinox.p2.touchpoint.eclipse,org.eclipse.equinox.p2.tests",
  org.eclipse.equinox.internal.provisional.p2.artifact.repository;
@@ -41,7 +43,7 @@ Import-Package: javax.xml.parsers,
  org.eclipse.core.runtime.preferences;resolution:=optional,
  org.eclipse.equinox.app;version="1.0.0";resolution:=optional,
  org.eclipse.equinox.internal.p2.core.helpers,
- org.eclipse.equinox.internal.p2.jarprocessor;resolution:=optional,
+ org.eclipse.equinox.internal.p2.jarprocessor,
  org.eclipse.equinox.internal.p2.metadata,
  org.eclipse.equinox.internal.p2.persistence,
  org.eclipse.equinox.internal.provisional.p2.core,
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/plugin.xml b/bundles/org.eclipse.equinox.p2.artifact.repository/plugin.xml
index e588fda..01d9c87 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/plugin.xml
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/plugin.xml
@@ -4,6 +4,12 @@
    <extension-point id="artifactRepositories" name="Artifact Repositories" schema="schema/artifactRepositories.exsd"/>
    <extension-point id="processingSteps" name="Processing Steps" schema="schema/processingSteps.exsd"/>
 
+	<extension
+			point="org.eclipse.equinox.p2.artifact.repository.processingSteps"
+			id="org.eclipse.equinox.p2.processing.Pack200Unpacker">
+		<step class="org.eclipse.equinox.internal.p2.artifact.processors.pack200.Pack200ProcessorStep"/>
+	</extension>
+
    <extension id="simpleRepository"  point="org.eclipse.equinox.p2.artifact.repository.artifactRepositories">
 		<filter suffix="artifacts.xml"/>
 		<factory class="org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository.SimpleArtifactRepositoryFactory"/>
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/processing/AbstractBufferingStep.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/processing/AbstractBufferingStep.java
new file mode 100644
index 0000000..1713755
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/processing/AbstractBufferingStep.java
@@ -0,0 +1,102 @@
+/*******************************************************************************
+ * Copyright (c) 2007 compeople AG and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ * 	compeople AG (Stefan Liebig) - initial API and implementation
+ * 	IBM Corporation - ongoing development
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.artifact.processing;
+
+import java.io.*;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Status;
+import org.eclipse.equinox.internal.p2.artifact.repository.Activator;
+import org.eclipse.equinox.internal.p2.core.helpers.FileUtils;
+import org.eclipse.equinox.internal.provisional.p2.artifact.repository.processing.ProcessingStep;
+import org.eclipse.osgi.util.NLS;
+
+public abstract class AbstractBufferingStep extends ProcessingStep {
+	private static final String WORK_DIR_PREFIX = "work"; //$NON-NLS-1$
+	private static final String WORK_DIR_SUFFIX = ""; //$NON-NLS-1$
+	protected static final String JAR_SUFFIX = ".jar"; //$NON-NLS-1$
+	protected static final String INCOMING_ROOT = "p2.optimizers.incoming"; //$NON-NLS-1$
+	protected static final String RESULT_ROOT = "p2.optimizers.result"; //$NON-NLS-1$
+	protected static final String PREDECESSOR_ROOT = "p2.optimizers.predecessor"; //$NON-NLS-1$
+
+	protected OutputStream incomingStream;
+	private File workDir;
+
+	protected AbstractBufferingStep() {
+		super();
+	}
+
+	public void write(int b) throws IOException {
+		OutputStream stream = getOutputStream();
+		stream.write(b);
+	}
+
+	protected OutputStream getOutputStream() throws IOException {
+		if (incomingStream != null)
+			return incomingStream;
+		// if buffering, store input stream in temporary file
+		incomingStream = createIncomingStream();
+		return incomingStream;
+	}
+
+	protected abstract OutputStream createIncomingStream() throws IOException;
+
+	public void close() throws IOException {
+		// When we go to close we must have seen all the content we are going to see.
+		// If no one wrote to the temp stream then we return an error. If there is 
+		// content then close the temporary stream and perform the processing.
+		// Performing the step should result in the new content being written to 
+		// the destination.  Make sure we delete the temporary file if any.
+		try {
+			if (incomingStream != null) {
+				incomingStream.close();
+				performProcessing();
+			} else {
+				setStatus(new Status(IStatus.ERROR, Activator.ID, Messages.Empty_stream));
+			}
+		} finally {
+			incomingStream = null;
+			cleanupTempFiles();
+			cleanupWorkDir();
+		}
+
+		super.close();
+		// TODO need to get real status here.  sometimes the optimizers do not give 
+		// any reasonable return status
+		// COMMENT status is initially set to OK!
+	}
+
+	protected abstract void performProcessing() throws IOException;
+
+	protected void cleanupTempFiles() {
+	}
+
+	private void cleanupWorkDir() throws IOException {
+		if (workDir != null) {
+			FileUtils.deleteAll(workDir);
+			// TODO try twice since there seems to be some cases where the dir is not 
+			// deleted the first time.  At least on Windows...
+			FileUtils.deleteAll(workDir);
+		}
+	}
+
+	protected File getWorkDir() throws IOException {
+		if (workDir != null)
+			return workDir;
+		workDir = File.createTempFile(WORK_DIR_PREFIX, WORK_DIR_SUFFIX);
+		if (!workDir.delete())
+			throw new IOException(NLS.bind(Messages.Can_not_delete_temp_dir, workDir));
+		if (!workDir.mkdirs())
+			throw new IOException(NLS.bind(Messages.Can_not_create_temp_dir, workDir));
+		return workDir;
+	}
+
+}
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/processing/Messages.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/processing/Messages.java
new file mode 100644
index 0000000..9daf0ad
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/processing/Messages.java
@@ -0,0 +1,27 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others. All rights reserved. This
+ * program and the accompanying materials are made available under the terms of
+ * the Eclipse Public License v1.0 which accompanies this distribution, and is
+ * available at http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors: IBM Corporation - initial API and implementation
+ ******************************************************************************/
+package org.eclipse.equinox.internal.p2.artifact.processing;
+
+import org.eclipse.osgi.util.NLS;
+
+public class Messages extends NLS {
+	private static final String BUNDLE_NAME = "org.eclipse.equinox.internal.p2.artifact.optimizers.messages"; //$NON-NLS-1$
+
+	public static String Can_not_create_temp_dir;
+	public static String Can_not_delete_temp_dir;
+	public static String Empty_stream;
+
+	static {
+		// initialize resource bundle
+		NLS.initializeMessages(BUNDLE_NAME, Messages.class);
+	}
+
+	private Messages() {
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/processing/messages.properties b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/processing/messages.properties
new file mode 100644
index 0000000..11266c2
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/processing/messages.properties
@@ -0,0 +1,3 @@
+Can_not_create_temp_dir=Cannot create temporary working directory {0}.
+Can_not_delete_temp_dir=Canno create temporary working directory {1}.
+Empty_stream=Empty intermediate incoming stream. Probably zero length input.
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/processors/pack200/Pack200ProcessorStep.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/processors/pack200/Pack200ProcessorStep.java
new file mode 100644
index 0000000..48bd1eb
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/processors/pack200/Pack200ProcessorStep.java
@@ -0,0 +1,79 @@
+/*******************************************************************************
+ * Copyright (c) 2007 compeople AG and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ * 	compeople AG (Stefan Liebig) - initial API and implementation
+ *  IBM Corporation - ongoing development
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.artifact.processors.pack200;
+
+import java.io.*;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Status;
+import org.eclipse.equinox.internal.p2.artifact.processing.AbstractBufferingStep;
+import org.eclipse.equinox.internal.p2.artifact.repository.Activator;
+import org.eclipse.equinox.internal.p2.core.helpers.FileUtils;
+import org.eclipse.equinox.internal.p2.jarprocessor.UnpackStep;
+import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactDescriptor;
+import org.eclipse.equinox.internal.provisional.p2.artifact.repository.processing.ProcessingStepDescriptor;
+import org.eclipse.internal.provisional.equinox.p2.jarprocessor.JarProcessorExecutor;
+import org.eclipse.internal.provisional.equinox.p2.jarprocessor.JarProcessorExecutor.Options;
+
+/**
+ * The Pack200Unpacker expects an input containing ".jar.pack.gz" data.   
+ */
+public class Pack200ProcessorStep extends AbstractBufferingStep {
+	public static final String PACKED_SUFFIX = ".pack.gz"; //$NON-NLS-1$
+
+	private File incoming;
+
+	protected OutputStream createIncomingStream() throws IOException {
+		incoming = File.createTempFile(INCOMING_ROOT, JAR_SUFFIX + PACKED_SUFFIX);
+		return new BufferedOutputStream(new FileOutputStream(incoming));
+	}
+
+	public void initialize(ProcessingStepDescriptor descriptor, IArtifactDescriptor context) {
+		super.initialize(descriptor, context);
+		if (!UnpackStep.canUnpack())
+			setStatus(new Status(IStatus.ERROR, Activator.ID, "Unpack facility not configured")); //$NON-NLS-1$
+	}
+
+	protected void cleanupTempFiles() {
+		super.cleanupTempFiles();
+		if (incoming != null)
+			incoming.delete();
+	}
+
+	protected void performProcessing() throws IOException {
+		File resultFile = null;
+		try {
+			resultFile = process();
+			// now write the processed content to the destination
+			if (resultFile.length() > 0) {
+				InputStream resultStream = new BufferedInputStream(new FileInputStream(resultFile));
+				FileUtils.copyStream(resultStream, true, getDestination(), false);
+			} else {
+				setStatus(new Status(IStatus.ERROR, Activator.ID, "Empty intermediate file: " + resultFile)); //$NON-NLS-1$
+			}
+		} finally {
+			if (resultFile != null)
+				resultFile.delete();
+		}
+	}
+
+	protected File process() throws IOException {
+		Options options = new Options();
+		options.unpack = true;
+		// TODO use false here assuming that all content is conditioned.  Need to revise this
+		options.processAll = false;
+		options.input = incoming;
+		options.outputDir = getWorkDir().getPath();
+		options.verbose = false;
+		new JarProcessorExecutor().runJarProcessor(options);
+		return new File(getWorkDir(), incoming.getName().substring(0, incoming.getName().length() - PACKED_SUFFIX.length()));
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.jarprocessor/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.jarprocessor/META-INF/MANIFEST.MF
index 1c7646b..c3c63c3 100644
--- a/bundles/org.eclipse.equinox.p2.jarprocessor/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.jarprocessor/META-INF/MANIFEST.MF
@@ -7,6 +7,6 @@ Bundle-Localization: plugin
 Bundle-Version: 1.0.0.qualifier
 Bundle-RequiredExecutionEnvironment: CDC-1.1/Foundation-1.1,
  J2SE-1.4
-Export-Package: org.eclipse.equinox.internal.p2.jarprocessor;x-friends:="org.eclipse.equinox.p2.artifact.processors",
+Export-Package: org.eclipse.equinox.internal.p2.jarprocessor;x-friends:="org.eclipse.equinox.p2.artifact.repository",
  org.eclipse.equinox.internal.p2.jarprocessor.verifier;x-internal:=true,
- org.eclipse.internal.provisional.equinox.p2.jarprocessor;x-friends:="org.eclipse.equinox.p2.artifact.optimizers,org.eclipse.equinox.p2.artifact.processors"
+ org.eclipse.internal.provisional.equinox.p2.jarprocessor;x-friends:="org.eclipse.equinox.p2.artifact.optimizers,org.eclipse.equinox.p2.artifact.repository"

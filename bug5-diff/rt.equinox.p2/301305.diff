commit 1d3249ec1e35262ad92a8081c59d4d3e5b6d3cf9
Author: Andrew Niefer <aniefer>
Date:   Fri Feb 26 16:05:05 2010 +0000

    bug 301305 - missing methods on IArtifactRequest

4	3	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRequest.java
2	1	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/MirrorRequest.java
2	1	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/RawMirrorRequest.java
1	2	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/DownloadJob.java
4	6	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
1	3	bundles/org.eclipse.equinox.p2.repository.tools/src/org/eclipse/equinox/p2/internal/repository/mirroring/Mirroring.java
9	0	bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/p2/repository/artifact/IArtifactRequest.java
1	2	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/TestArtifactRepository.java
13	2	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/Bug252308.java
2	4	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/CompositeArtifactRepositoryTest.java
11	18	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/MirrorRequestTest.java
6	2	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/DownloadManagerTest.java
1	2	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/TestArtifactRepository.java
1	2	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/updatesite/UpdateSiteTest.java
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRequest.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRequest.java
index 6fe6fc2..8f596e5 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRequest.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRequest.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007, 2009 IBM Corporation and others.
+ * Copyright (c) 2007, 2010 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -54,10 +54,11 @@ public abstract class ArtifactRequest implements IArtifactRequest {
 	/**
 	 * Performs the artifact request, and sets the result status.
 	 * 
+	 * @param sourceRepository the repository to download the artifact from 
 	 * @param monitor a progress monitor, or <code>null</code> if progress
 	 *    reporting is not desired
 	 */
-	abstract public void perform(IProgressMonitor monitor);
+	abstract public void perform(IArtifactRepository sourceRepository, IProgressMonitor monitor);
 
 	/**
 	 * Sets the result of an invocation of {@link #perform(IProgressMonitor)}.
@@ -70,7 +71,7 @@ public abstract class ArtifactRequest implements IArtifactRequest {
 		result = value;
 	}
 
-	public void setSourceRepository(IArtifactRepository value) {
+	protected void setSourceRepository(IArtifactRepository value) {
 		source = value;
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/MirrorRequest.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/MirrorRequest.java
index 439fb4a..6f022e6 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/MirrorRequest.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/MirrorRequest.java
@@ -58,8 +58,9 @@ public class MirrorRequest extends ArtifactRequest {
 		}
 	}
 
-	public void perform(IProgressMonitor monitor) {
+	public void perform(IArtifactRepository sourceRepository, IProgressMonitor monitor) {
 		monitor.subTask(NLS.bind(Messages.downloading, getArtifactKey().getId()));
+		setSourceRepository(sourceRepository);
 		// Do we already have the artifact in the target?
 		if (target.contains(getArtifactKey())) {
 			setResult(new Status(IStatus.OK, Activator.ID, NLS.bind(Messages.available_already_in, getArtifactKey())));
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/RawMirrorRequest.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/RawMirrorRequest.java
index 3c24325..740775e 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/RawMirrorRequest.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/RawMirrorRequest.java
@@ -29,8 +29,9 @@ public class RawMirrorRequest extends MirrorRequest {
 		this.targetDescriptor = targetDescriptor;
 	}
 
-	public void perform(IProgressMonitor monitor) {
+	public void perform(IArtifactRepository sourceRepository, IProgressMonitor monitor) {
 		monitor.subTask(NLS.bind(Messages.downloading, getArtifactKey().getId()));
+		setSourceRepository(sourceRepository);
 		// Do we already have the descriptor in the target?
 		if (target.contains(targetDescriptor)) {
 			setResult(new Status(IStatus.INFO, Activator.ID, NLS.bind(Messages.mirror_alreadyExists, targetDescriptor, target)));
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/DownloadJob.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/DownloadJob.java
index 69aee86..20373a7 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/DownloadJob.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/DownloadJob.java
@@ -12,7 +12,6 @@ package org.eclipse.equinox.internal.p2.artifact.repository.simple;
 import java.util.LinkedList;
 import org.eclipse.core.runtime.*;
 import org.eclipse.core.runtime.jobs.Job;
-import org.eclipse.equinox.internal.p2.artifact.repository.ArtifactRequest;
 import org.eclipse.equinox.p2.repository.artifact.IArtifactRequest;
 
 public class DownloadJob extends Job {
@@ -61,7 +60,7 @@ public class DownloadJob extends Job {
 			SubProgressMonitor subMonitor = new SubProgressMonitor(masterMonitor, 1);
 			subMonitor.beginTask("", 1); //$NON-NLS-1$
 			try {
-				IStatus status = repository.getArtifact((ArtifactRequest) request, subMonitor);
+				IStatus status = repository.getArtifact(request, subMonitor);
 				if (!status.isOK()) {
 					synchronized (overallStatus) {
 						overallStatus.add(status);
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
index 6088c38..d21d87c 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
@@ -16,7 +16,6 @@ import java.io.*;
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.util.*;
-import java.util.Map.Entry;
 import java.util.jar.JarEntry;
 import java.util.jar.JarOutputStream;
 import org.eclipse.core.runtime.*;
@@ -337,7 +336,7 @@ public class SimpleArtifactRepository extends AbstractArtifactRepository impleme
 			internal.setRepositoryProperty(ARTIFACT_FOLDER, Boolean.TRUE.toString());
 		if (descriptor instanceof SimpleArtifactDescriptor) {
 			Map<String, String> repoProperties = ((SimpleArtifactDescriptor) descriptor).getRepositoryProperties();
-			for (Entry<String, String> entry : repoProperties.entrySet()) {
+			for (Map.Entry<String, String> entry : repoProperties.entrySet()) {
 				internal.setRepositoryProperty(entry.getKey(), entry.getValue());
 			}
 		}
@@ -548,9 +547,8 @@ public class SimpleArtifactRepository extends AbstractArtifactRepository impleme
 		return super.getAdapter(adapter);
 	}
 
-	IStatus getArtifact(ArtifactRequest request, IProgressMonitor monitor) {
-		request.setSourceRepository(this);
-		request.perform(monitor);
+	IStatus getArtifact(IArtifactRequest request, IProgressMonitor monitor) {
+		request.perform(this, monitor);
 		return request.getResult();
 	}
 
@@ -601,7 +599,7 @@ public class SimpleArtifactRepository extends AbstractArtifactRepository impleme
 				for (int i = 0; i < requests.length; i++) {
 					if (monitor.isCanceled())
 						return Status.CANCEL_STATUS;
-					IStatus result = getArtifact((ArtifactRequest) requests[i], subMonitor.newChild(1));
+					IStatus result = getArtifact(requests[i], subMonitor.newChild(1));
 					if (!result.isOK())
 						overallStatus.add(result);
 				}
diff --git a/bundles/org.eclipse.equinox.p2.repository.tools/src/org/eclipse/equinox/p2/internal/repository/mirroring/Mirroring.java b/bundles/org.eclipse.equinox.p2.repository.tools/src/org/eclipse/equinox/p2/internal/repository/mirroring/Mirroring.java
index c14a951..3e20a1b 100644
--- a/bundles/org.eclipse.equinox.p2.repository.tools/src/org/eclipse/equinox/p2/internal/repository/mirroring/Mirroring.java
+++ b/bundles/org.eclipse.equinox.p2.repository.tools/src/org/eclipse/equinox/p2/internal/repository/mirroring/Mirroring.java
@@ -193,9 +193,7 @@ public class Mirroring {
 	 */
 	private IStatus downloadArtifact(IArtifactRepository sourceRepo, IArtifactDescriptor destDescriptor, IArtifactDescriptor srcDescriptor) {
 		RawMirrorRequest request = new RawMirrorRequest(srcDescriptor, destDescriptor, destination);
-		request.setSourceRepository(sourceRepo);
-
-		request.perform(new NullProgressMonitor());
+		request.perform(sourceRepo, new NullProgressMonitor());
 
 		return request.getResult();
 	}
diff --git a/bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/p2/repository/artifact/IArtifactRequest.java b/bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/p2/repository/artifact/IArtifactRequest.java
index bced246..c1518cf 100644
--- a/bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/p2/repository/artifact/IArtifactRequest.java
+++ b/bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/p2/repository/artifact/IArtifactRequest.java
@@ -34,6 +34,15 @@ public interface IArtifactRequest {
 	public IArtifactKey getArtifactKey();
 
 	/**
+	 * Performs the artifact request, and sets the result status.
+	 * 
+	 * @param sourceRepository the repository to download the artifact from 
+	 * @param monitor a progress monitor, or <code>null</code> if progress
+	 *    reporting is not desired
+	 */
+	public void perform(IArtifactRepository sourceRepository, IProgressMonitor monitor);
+
+	/**
 	 * Returns the result of the executed artifact request, or <code>null</code> if
 	 * the request has never been executed. Artifact requests are executed by invoking
 	 * {@link IArtifactRepository#getArtifacts(IArtifactRequest[], IProgressMonitor)}.
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/TestArtifactRepository.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/TestArtifactRepository.java
index 8ff42b8..d7fcb5b 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/TestArtifactRepository.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/TestArtifactRepository.java
@@ -111,8 +111,7 @@ public class TestArtifactRepository extends AbstractArtifactRepository {
 	}
 
 	private IStatus getArtifact(ArtifactRequest request, IProgressMonitor monitor) {
-		request.setSourceRepository(this);
-		request.perform(monitor);
+		request.perform(this, monitor);
 		return request.getResult();
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/Bug252308.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/Bug252308.java
index 987ab16..dbafd27 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/Bug252308.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/Bug252308.java
@@ -12,11 +12,13 @@ package org.eclipse.equinox.p2.tests.artifact.repository;
 
 import java.io.*;
 import java.lang.reflect.Method;
+import java.util.Map;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.artifact.repository.MirrorRequest;
 import org.eclipse.equinox.internal.p2.artifact.repository.simple.SimpleArtifactDescriptor;
 import org.eclipse.equinox.internal.p2.metadata.ArtifactKey;
 import org.eclipse.equinox.p2.core.ProvisionException;
+import org.eclipse.equinox.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.p2.metadata.Version;
 import org.eclipse.equinox.p2.repository.artifact.IArtifactDescriptor;
 import org.eclipse.equinox.p2.repository.artifact.IArtifactRepository;
@@ -123,8 +125,17 @@ public class Bug252308 extends AbstractProvisioningTest {
 		IArtifactDescriptor sourceDescriptor = getArtifactKeyFor(source, "osgi.bundle", "missingFromFileSystem", Version.createOSGi(1, 0, 0))[0];
 		SimpleArtifactDescriptor targetDescriptor = new SimpleArtifactDescriptor(sourceDescriptor);
 		targetDescriptor.setRepositoryProperty("artifact.folder", "true");
-		MirrorRequest request = new MirrorRequest(new ArtifactKey("osgi.bundle", "missingFromFileSystem", Version.createOSGi(1, 0, 0)), target, null, null);
-		request.setSourceRepository(source);
+		class TestRequest extends MirrorRequest {
+			public TestRequest(IArtifactKey key, IArtifactRepository targetRepository, Map<String, String> targetDescriptorProperties, Map<String, String> targetRepositoryProperties) {
+				super(key, targetRepository, targetDescriptorProperties, targetRepositoryProperties);
+			}
+
+			public void setSource(IArtifactRepository source) {
+				super.setSourceRepository(source);
+			}
+		}
+		TestRequest request = new TestRequest(new ArtifactKey("osgi.bundle", "missingFromFileSystem", Version.createOSGi(1, 0, 0)), target, null, null);
+		request.setSource(source);
 		IStatus s = transferSingle(request, targetDescriptor, sourceDescriptor, new NullProgressMonitor());
 		assertTrue(s.toString(), s.getException().getClass() == FileNotFoundException.class);
 	}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/CompositeArtifactRepositoryTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/CompositeArtifactRepositoryTest.java
index 1d11d8c..d87106c 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/CompositeArtifactRepositoryTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/CompositeArtifactRepositoryTest.java
@@ -1010,8 +1010,7 @@ public class CompositeArtifactRepositoryTest extends AbstractProvisioningTest {
 
 			// Create mirror request
 			MirrorRequest request = new MirrorRequest(descriptor.getArtifactKey(), destination, null, null);
-			request.setSourceRepository(source);
-			request.perform(new NullProgressMonitor());
+			request.perform(source, new NullProgressMonitor());
 			IStatus status = request.getResult();
 			// The download should have completed 'successfully'
 			assertTrue(status.isOK());
@@ -1098,8 +1097,7 @@ public class CompositeArtifactRepositoryTest extends AbstractProvisioningTest {
 
 			// Create mirror request
 			MirrorRequest request = new MirrorRequest(descriptor.getArtifactKey(), dest, null, null);
-			request.setSourceRepository(source);
-			request.perform(new NullProgressMonitor());
+			request.perform(source, new NullProgressMonitor());
 			IStatus status = request.getResult();
 
 			// We should have OK status
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/MirrorRequestTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/MirrorRequestTest.java
index b6140a8..2f45216 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/MirrorRequestTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/MirrorRequestTest.java
@@ -69,9 +69,7 @@ public class MirrorRequestTest extends AbstractProvisioningTest {
 		Map<String, String> targetProperties = new HashMap<String, String>();
 		targetProperties.put("artifact.folder", "true");
 		MirrorRequest request = new MirrorRequest(key, targetRepository, null, targetProperties);
-		request.setSourceRepository(sourceRepository);
-
-		request.perform(new NullProgressMonitor());
+		request.perform(sourceRepository, new NullProgressMonitor());
 
 		assertTrue(request.getResult().matches(IStatus.ERROR));
 		assertTrue(request.getResult().getException() instanceof IOException);
@@ -82,9 +80,7 @@ public class MirrorRequestTest extends AbstractProvisioningTest {
 		Map<String, String> targetProperties = new HashMap<String, String>();
 		targetProperties.put("artifact.folder", "true");
 		MirrorRequest request = new MirrorRequest(key, targetRepository, null, targetProperties);
-		request.setSourceRepository(sourceRepository);
-
-		request.perform(new NullProgressMonitor());
+		request.perform(sourceRepository, new NullProgressMonitor());
 
 		assertTrue(request.getResult().matches(IStatus.ERROR));
 	}
@@ -95,8 +91,7 @@ public class MirrorRequestTest extends AbstractProvisioningTest {
 
 		IArtifactKey key = new ArtifactKey("test.txt", "fail_to_canonical", Version.parseVersion("1.0.0"));
 		MirrorRequest request = new MirrorRequest(key, targetRepository, null, null);
-		request.setSourceRepository(src);
-		request.perform(new NullProgressMonitor());
+		request.perform(src, new NullProgressMonitor());
 
 		assertTrue(request.getResult().toString(), request.getResult().isOK());
 		assertTrue("Target does not contain artifact.", targetRepository.contains(key));
@@ -110,8 +105,7 @@ public class MirrorRequestTest extends AbstractProvisioningTest {
 		// call test
 		IArtifactKey key = new ArtifactKey("test.txt", "HelloWorldText", Version.parseVersion("1.0.0"));
 		MirrorRequest request = new MirrorRequest(key, targetRepository, null, null);
-		request.setSourceRepository(sourceRepository);
-		request.perform(new NullProgressMonitor());
+		request.perform(sourceRepository, new NullProgressMonitor());
 
 		// The download succeeded
 		assertTrue(request.getResult().toString(), request.getResult().isOK());
@@ -139,11 +133,11 @@ public class MirrorRequestTest extends AbstractProvisioningTest {
 
 		IArtifactKey key = (IArtifactKey) keys.iterator().next();
 		MirrorRequest req = new MirrorRequest(key, targetRepository, null, null);
-		req.setSourceRepository(source);
+
 		// Set Status sequence 
 		seq.add(new Status(IStatus.ERROR, "Activator", "Message"));
 		seq.add(new Status(IStatus.WARNING, "Activator", "Message"));
-		req.perform(new NullProgressMonitor());
+		req.perform(source, new NullProgressMonitor());
 
 		assertEquals("Expected WARNING status", IStatus.WARNING, req.getResult().getSeverity());
 
@@ -151,10 +145,10 @@ public class MirrorRequestTest extends AbstractProvisioningTest {
 		targetRepository.removeDescriptor(key);
 		// Set Status sequence 
 		req = new MirrorRequest(key, targetRepository, null, null);
-		req.setSourceRepository(source);
+
 		seq.add(new Status(IStatus.WARNING, "Activator", "Message"));
 		seq.add(new Status(IStatus.INFO, "Activator", "Message"));
-		req.perform(new NullProgressMonitor());
+		req.perform(source, new NullProgressMonitor());
 
 		assertEquals("Expected INFO status", IStatus.INFO, req.getResult().getSeverity());
 
@@ -162,9 +156,9 @@ public class MirrorRequestTest extends AbstractProvisioningTest {
 		targetRepository.removeDescriptor(key);
 		// Set Status sequence 
 		req = new MirrorRequest(key, targetRepository, null, null);
-		req.setSourceRepository(source);
+
 		seq.add(new Status(IStatus.INFO, "Activator", "Message"));
-		req.perform(new NullProgressMonitor());
+		req.perform(source, new NullProgressMonitor());
 
 		assertEquals("Expected OK status", IStatus.OK, req.getResult().getSeverity());
 	}
@@ -189,9 +183,8 @@ public class MirrorRequestTest extends AbstractProvisioningTest {
 
 			IArtifactKey key = new ArtifactKey("osgi.bundle", "org.eclipse.ve.jfc", Version.parseVersion("1.4.0.HEAD"));
 			MirrorRequest req = new MirrorRequest(key, target, null, null);
-			req.setSourceRepository(source);
 
-			req.perform(new NullProgressMonitor());
+			req.perform(source, new NullProgressMonitor());
 			IStatus result = req.getResult();
 			assertTrue("MirrorRequest should have failed", result.matches(IStatus.ERROR));
 			assertEquals("Result should contain two failures", 2, result.getChildren().length);
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/DownloadManagerTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/DownloadManagerTest.java
index cc89dbf..a36606e 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/DownloadManagerTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/DownloadManagerTest.java
@@ -14,11 +14,11 @@ import java.net.URI;
 import java.net.URISyntaxException;
 import junit.framework.Test;
 import junit.framework.TestSuite;
-import org.eclipse.core.runtime.IStatus;
-import org.eclipse.core.runtime.Status;
+import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.engine.DownloadManager;
 import org.eclipse.equinox.p2.engine.ProvisioningContext;
 import org.eclipse.equinox.p2.metadata.IArtifactKey;
+import org.eclipse.equinox.p2.repository.artifact.IArtifactRepository;
 import org.eclipse.equinox.p2.repository.artifact.IArtifactRequest;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 
@@ -134,6 +134,10 @@ public class DownloadManagerTest extends AbstractProvisioningTest {
 				return null;
 			}
 
+			public void perform(IArtifactRepository sourceRepository, IProgressMonitor monitor) {
+				//do nothing
+			}
+
 			public IStatus getResult() {
 				return Status.OK_STATUS;
 			}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/TestArtifactRepository.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/TestArtifactRepository.java
index d0d4966..042ae4d 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/TestArtifactRepository.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/TestArtifactRepository.java
@@ -186,8 +186,7 @@ public class TestArtifactRepository implements IArtifactRepository {
 	}
 
 	private IStatus getArtifact(ArtifactRequest artifactRequest, IProgressMonitor monitor) {
-		artifactRequest.setSourceRepository(this);
-		artifactRequest.perform(monitor);
+		artifactRequest.perform(this, monitor);
 		return artifactRequest.getResult();
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/updatesite/UpdateSiteTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/updatesite/UpdateSiteTest.java
index 95996f4..2bb3c0c 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/updatesite/UpdateSiteTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/updatesite/UpdateSiteTest.java
@@ -802,8 +802,7 @@ public class UpdateSiteTest extends AbstractProvisioningTest {
 				fail("0.3");
 
 			RawMirrorRequest mirror = new RawMirrorRequest(descriptor, new ArtifactDescriptor(descriptor), targetRepository);
-			mirror.setSourceRepository(sourceRepo);
-			mirror.perform(getMonitor());
+			mirror.perform(sourceRepo, getMonitor());
 
 			assertTrue(mirror.getResult().isOK());
 			assertTrue(targetRepository.contains(key));

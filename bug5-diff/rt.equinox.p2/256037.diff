commit 652b935f5a422ee537b0e22b9f5c5a9d2c475988
Author: John Arthorne <johna>
Date:   Tue Nov 25 16:01:17 2008 +0000

    Bug 256037 Generalize NestedBundleAdvice

118	0	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileAdvice.java
0	81	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/BundleNestedAdvice.java
26	53	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/BundlesAction.java
392	373	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/FeaturesAction.java
0	9	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/IBundleAdvice.java
30	0	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/ITouchpointAdvice.java
7	3	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/spi/p2/publisher/PublisherHelper.java
10	0	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
33	7	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/BundlesActionTest.java
37	0	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/CaptureList.java
33	7	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/FeaturesActionTest.java
1	3	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/AddSourceBundleActionTest.java
1	3	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/CheckTrustActionTest.java
1	3	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/CollectActionTest.java
1	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/EclipseTouchpointTest.java
1	3	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/InstallBundleActionTest.java
2	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/InstallFeatureActionTest.java
1	3	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/MarkStartedActionTest.java
1	3	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/RemoveSourceBundleActionTest.java
1	3	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/SetStartLevelActionTest.java
1	3	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/UninstallBundleActionTest.java
2	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/UninstallFeatureActionTest.java
3	0	bundles/org.eclipse.equinox.p2.tests/testData/BundlesActionTest/test1/META-INF/p2.inf
3	0	bundles/org.eclipse.equinox.p2.tests/testData/FeaturesActionTest/foo/p2.inf
4	3	bundles/org.eclipse.equinox.p2.tests/testData/mirror/mirrorSourceRepo1 with space/artifacts.xml
203	202	bundles/org.eclipse.equinox.p2.tests/testData/mirror/mirrorSourceRepo1 with space/content.xml
4	3	bundles/org.eclipse.equinox.p2.tests/testData/mirror/mirrorSourceRepo2/artifacts.xml
180	179	bundles/org.eclipse.equinox.p2.tests/testData/mirror/mirrorSourceRepo2/content.xml
5	4	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
4	5	bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/RemoteFeaturesAction.java
1	2	bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/SiteXMLAction.java
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileAdvice.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileAdvice.java
new file mode 100644
index 0000000..ee7779e
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileAdvice.java
@@ -0,0 +1,118 @@
+package org.eclipse.equinox.p2.publisher.eclipse;
+
+import java.io.*;
+import java.util.*;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipFile;
+import org.eclipse.core.runtime.IPath;
+import org.eclipse.core.runtime.Path;
+import org.eclipse.equinox.internal.provisional.p2.metadata.*;
+import org.osgi.framework.Version;
+
+/**
+ * Publishing advice from a p2 advice file. An advice file (p2.inf) can be embedded
+ * in the source of a bundle, feature, or product to specify additional advice to be
+ * added to the {@link IInstallableUnit} corresponding to the bundle, feature, or product.
+ */
+public class AdviceFileAdvice implements ITouchpointAdvice {
+	/**
+	 * The location of the bundle advice file, relative to the bundle root location.
+	 */
+	public static final IPath BUNDLE_ADVICE_FILE = new Path("META-INF/p2.inf"); //$NON-NLS-1$
+
+	private static final String ADVICE_INSTRUCTIONS_PREFIX = "instructions."; //$NON-NLS-1$
+	private IPath basePath;
+	private final IPath adviceFilePath;
+
+	/**
+	 * Creates advice for an advice file at the given location. If <tt>basePath</tt>
+	 * is a directory, then <tt>adviceFilePath</tt> is appended to this location to
+	 * obtain the location of the advice file. If <tt>basePath</tt> is a file, then
+	 * <tt>adviceFilePath</tt> is used to 
+	 * @param basePath
+	 * @param adviceFilePath
+	 */
+	public AdviceFileAdvice(IPath basePath, IPath adviceFilePath) {
+		this.basePath = basePath;
+		this.adviceFilePath = adviceFilePath;
+	}
+
+	/**
+	 * Loads the advice file and returns it in map form.
+	 */
+	private Map getInstructions() {
+		File location = basePath.toFile();
+		if (location == null || !location.exists())
+			return Collections.EMPTY_MAP;
+
+		ZipFile jar = null;
+		InputStream stream = null;
+		try {
+			if (location.isDirectory()) {
+				File adviceFile = new File(location, adviceFilePath.toString());
+				try {
+					stream = new BufferedInputStream(new FileInputStream(adviceFile));
+				} catch (IOException e) {
+					return Collections.EMPTY_MAP;
+				}
+			} else if (location.isFile()) {
+				try {
+					jar = new ZipFile(location);
+					ZipEntry entry = jar.getEntry(adviceFilePath.toString());
+					if (entry == null)
+						return Collections.EMPTY_MAP;
+					stream = new BufferedInputStream(jar.getInputStream(entry));
+				} catch (IOException e) {
+					return Collections.EMPTY_MAP;
+				}
+			}
+
+			Properties advice = null;
+			try {
+				advice = new Properties();
+				advice.load(stream);
+			} catch (IOException e) {
+				return Collections.EMPTY_MAP;
+			}
+			return advice != null ? advice : Collections.EMPTY_MAP;
+		} finally {
+			if (stream != null)
+				try {
+					stream.close();
+				} catch (IOException e) {
+					// boo
+				}
+			if (jar != null)
+				try {
+					jar.close();
+				} catch (IOException e) {
+					// boo
+				}
+		}
+	}
+
+	public boolean isApplicable(String configSpec, boolean includeDefault, String id, Version version) {
+		return false;
+	}
+
+	/*(non-Javadoc)
+	 * @see org.eclipse.equinox.p2.publisher.eclipse.ITouchpointAdvice#getTouchpointData()
+	 */
+	public TouchpointData getTouchpointData(TouchpointData existing) {
+		Map touchpointData = new HashMap(existing.getInstructions());
+		Map bundleAdvice = getInstructions();
+		for (Iterator iterator = bundleAdvice.keySet().iterator(); iterator.hasNext();) {
+			String key = (String) iterator.next();
+			if (key.startsWith(ADVICE_INSTRUCTIONS_PREFIX)) {
+				String phase = key.substring(ADVICE_INSTRUCTIONS_PREFIX.length());
+				String instruction = touchpointData.containsKey(phase) ? (String) touchpointData.get(phase) : ""; //$NON-NLS-1$
+				if (instruction.length() > 0)
+					instruction += ";"; //$NON-NLS-1$
+				instruction += ((String) bundleAdvice.get(key)).trim();
+				touchpointData.put(phase, instruction);
+			}
+		}
+		return MetadataFactory.createTouchpointData(touchpointData);
+	}
+
+}
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/BundleNestedAdvice.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/BundleNestedAdvice.java
deleted file mode 100644
index 0350b7b..0000000
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/BundleNestedAdvice.java
+++ /dev/null
@@ -1,81 +0,0 @@
-package org.eclipse.equinox.p2.publisher.eclipse;
-
-import java.io.*;
-import java.util.*;
-import java.util.zip.ZipEntry;
-import java.util.zip.ZipFile;
-import org.osgi.framework.Version;
-
-/**
- * Publishing advice for bundles.  The advice is read from a file embedded or nested
- * in the bundle itself in a file called META-INF/p2.inf.
- */
-public class BundleNestedAdvice implements IBundleAdvice {
-	private static final String BUNDLE_ADVICE_FILE = "META-INF/p2.inf"; //$NON-NLS-1$
-
-	public Properties getArtifactProperties(File location) {
-		return null;
-	}
-
-	public Properties getIUProperties(File location) {
-		return null;
-	}
-
-	// FIXME 1.0 merge.   not really sure what to do with this method.  Got it from the Generator.  There is
-	// an advice file that needs to be read.  This should likely go in another advice object.
-	// also, what kinds of advice can be in the file?
-	public Map getInstructions(File location) {
-		if (location == null || !location.exists())
-			return Collections.EMPTY_MAP;
-
-		ZipFile jar = null;
-		InputStream stream = null;
-		try {
-			if (location.isDirectory()) {
-				File adviceFile = new File(location, BUNDLE_ADVICE_FILE);
-				try {
-					stream = new BufferedInputStream(new FileInputStream(adviceFile));
-				} catch (IOException e) {
-					return Collections.EMPTY_MAP;
-				}
-			} else if (location.isFile()) {
-				try {
-					jar = new ZipFile(location);
-					ZipEntry entry = jar.getEntry(BUNDLE_ADVICE_FILE);
-					if (entry == null)
-						return Collections.EMPTY_MAP;
-					stream = new BufferedInputStream(jar.getInputStream(entry));
-				} catch (IOException e) {
-					return Collections.EMPTY_MAP;
-				}
-			}
-
-			Properties advice = null;
-			try {
-				advice = new Properties();
-				advice.load(stream);
-			} catch (IOException e) {
-				return Collections.EMPTY_MAP;
-			}
-			return advice != null ? advice : Collections.EMPTY_MAP;
-		} finally {
-			if (stream != null)
-				try {
-					stream.close();
-				} catch (IOException e) {
-					// boo
-				}
-			if (jar != null)
-				try {
-					jar.close();
-				} catch (IOException e) {
-					// boo
-				}
-		}
-	}
-
-	public boolean isApplicable(String configSpec, boolean includeDefault, String id, Version version) {
-		return false;
-	}
-
-}
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/BundlesAction.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/BundlesAction.java
index 026279b..625a283 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/BundlesAction.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/BundlesAction.java
@@ -78,9 +78,7 @@ public class BundlesAction extends AbstractPublisherAction {
 	public static final ProvidedCapability SOURCE_BUNDLE_CAPABILITY = MetadataFactory.createProvidedCapability(PublisherHelper.NAMESPACE_ECLIPSE_TYPE, TYPE_ECLIPSE_SOURCE, new Version(1, 0, 0));
 
 	static final String DEFAULT_BUNDLE_LOCALIZATION = "plugin"; //$NON-NLS-1$	
-	static final String PROPERTIES_FILE_EXTENSION = ".properties"; //$NON-NLS-1$
 
-	static final String ADVICE_INSTRUCTIONS_PREFIX = "instructions."; //$NON-NLS-1$
 	private static final String[] BUNDLE_IU_PROPERTY_MAP = {Constants.BUNDLE_NAME, IInstallableUnit.PROP_NAME, Constants.BUNDLE_DESCRIPTION, IInstallableUnit.PROP_DESCRIPTION, Constants.BUNDLE_VENDOR, IInstallableUnit.PROP_PROVIDER, Constants.BUNDLE_CONTACTADDRESS, IInstallableUnit.PROP_CONTACT, Constants.BUNDLE_DOCURL, IInstallableUnit.PROP_DOC_URL};
 	public static final String[] BUNDLE_LOCALIZED_PROPERTIES = {Constants.BUNDLE_NAME, Constants.BUNDLE_DESCRIPTION, Constants.BUNDLE_VENDOR, Constants.BUNDLE_CONTACTADDRESS, Constants.BUNDLE_DOCURL, Constants.BUNDLE_UPDATELOCATION};
 	public static final int BUNDLE_LOCALIZATION_INDEX = BUNDLE_LOCALIZED_PROPERTIES.length;
@@ -126,14 +124,11 @@ public class BundlesAction extends AbstractPublisherAction {
 		return MetadataFactory.createInstallableUnit(cu);
 	}
 
-	public static IInstallableUnit createBundleIU(BundleDescription bd, Map manifest, boolean isFolderPlugin, IArtifactKey key, IPublisherInfo info) {
+	public static IInstallableUnit createBundleIU(BundleDescription bd, IArtifactKey key, IPublisherInfo info) {
+		Map manifest = (Map) bd.getUserObject();
 		Map manifestLocalizations = null;
 		if (manifest != null && bd.getLocation() != null)
 			manifestLocalizations = getManifestLocalizations(manifest, new File(bd.getLocation()));
-		return createBundleIU(bd, manifest, isFolderPlugin, key, manifestLocalizations, info);
-	}
-
-	public static IInstallableUnit createBundleIU(BundleDescription bd, Map manifest, boolean isFolderPlugin, IArtifactKey key, Map manifestLocalizations, IPublisherInfo info) {
 		InstallableUnitDescription iu = new MetadataFactory.InstallableUnitDescription();
 		iu.setSingleton(bd.isSingleton());
 		iu.setId(bd.getSymbolicName());
@@ -224,11 +219,10 @@ public class BundlesAction extends AbstractPublisherAction {
 		// Define the immutable metadata for this IU. In this case immutable means
 		// that this is something that will not impact the configuration.
 		Map touchpointData = new HashMap();
-		if (isFolderPlugin)
-			touchpointData.put("zipped", "true"); //$NON-NLS-1$ //$NON-NLS-2$
 		touchpointData.put("manifest", toManifestString(manifest)); //$NON-NLS-1$
-		processInstructionsAdvice(touchpointData, bd.getLocation(), info);
-		iu.addTouchpointData(MetadataFactory.createTouchpointData(touchpointData));
+		if (isDir(bd, info))
+			touchpointData.put("zipped", "true"); //$NON-NLS-1$ //$NON-NLS-2$
+		iu.addTouchpointData(processTouchpointAdvice(touchpointData, info));
 
 		processPropertiesAdvice(iu, bd.getLocation(), info);
 		return MetadataFactory.createInstallableUnit(iu);
@@ -285,29 +279,17 @@ public class BundlesAction extends AbstractPublisherAction {
 		}
 	}
 
-	// TODO need to figure out a mapping of this onto real advice and make this generic
-	private static void processInstructionsAdvice(Map touchpointData, String location, IPublisherInfo info) {
-		if (location == null)
-			return;
-		Collection advice = info.getAdvice(null, false, null, null, IBundleAdvice.class);
-		File bundleFile = new File(location);
+	/**
+	 * Merges all touchpoint advice into the current set of touchpoint data.
+	 */
+	private static TouchpointData processTouchpointAdvice(Map currentInstructions, IPublisherInfo info) {
+		Collection advice = info.getAdvice(null, false, null, null, ITouchpointAdvice.class);
+		TouchpointData result = MetadataFactory.createTouchpointData(currentInstructions);
 		for (Iterator i = advice.iterator(); i.hasNext();) {
-			IBundleAdvice entry = (IBundleAdvice) i.next();
-			Map bundleAdvice = entry.getInstructions(bundleFile);
-			if (bundleAdvice == null)
-				continue;
-			for (Iterator iterator = bundleAdvice.keySet().iterator(); iterator.hasNext();) {
-				String key = (String) iterator.next();
-				if (key.startsWith(ADVICE_INSTRUCTIONS_PREFIX)) {
-					String phase = key.substring(ADVICE_INSTRUCTIONS_PREFIX.length());
-					String instructions = touchpointData.containsKey(phase) ? (String) touchpointData.get(phase) : ""; //$NON-NLS-1$
-					if (instructions.length() > 0)
-						instructions += ";"; //$NON-NLS-1$
-					instructions += ((String) bundleAdvice.get(key)).trim();
-					touchpointData.put(phase, instructions);
-				}
-			}
+			ITouchpointAdvice entry = (ITouchpointAdvice) i.next();
+			result = entry.getTouchpointData(result);
 		}
+		return result;
 	}
 
 	public static void createHostLocalizationFragment(IInstallableUnit bundleIU, BundleDescription bd, String hostId, String[] hostBundleManifestValues, Set localizationIUs) {
@@ -556,23 +538,6 @@ public class BundlesAction extends AbstractPublisherAction {
 		return createBundleDescription(manifest, bundleLocation);
 	}
 
-	public static BundleDescription createBundleDescription(InputStream manifestStream, File bundleLocation) {
-		Hashtable entries = new Hashtable();
-		try {
-			ManifestElement.parseBundleManifest(manifestStream, entries);
-			return createBundleDescription(entries, bundleLocation);
-		} catch (IOException e) {
-			String message = NLS.bind(Messages.exception_errorParsingManifest, (bundleLocation == null ? "" : bundleLocation.getAbsolutePath()), e.getMessage()); //$NON-NLS-1$
-			IStatus status = new Status(IStatus.ERROR, Activator.ID, message, e);
-			LogHelper.log(status);
-		} catch (BundleException e) {
-			String message = NLS.bind(Messages.exception_errorParsingManifest, (bundleLocation == null ? "" : bundleLocation.getAbsolutePath()), e.getMessage()); //$NON-NLS-1$
-			IStatus status = new Status(IStatus.ERROR, Activator.ID, message, e);
-			LogHelper.log(status);
-		}
-		return null;
-	}
-
 	public static Dictionary loadManifest(File bundleLocation) {
 		Dictionary manifest = basicLoadManifest(bundleLocation);
 		if (manifest == null)
@@ -731,6 +696,7 @@ public class BundlesAction extends AbstractPublisherAction {
 							bundleLocalizationMap.put(makeSimpleKey(bd), cachedValues);
 						}
 					} else {
+						createAdviceFileAdvice(bundles[i], info);
 						IArtifactKey key = createBundleArtifactKey(bd.getSymbolicName(), bd.getVersion().toString());
 						File location = new File(bd.getLocation());
 						IArtifactDescriptor ad = PublisherHelper.createArtifactDescriptor(key, location);
@@ -744,9 +710,7 @@ public class BundlesAction extends AbstractPublisherAction {
 							publishArtifact(ad, new File(bd.getLocation()), info);
 
 						// Create the bundle IU according to any shape advice we have
-						boolean isDir = isDir(bd, info);
-						// FIXME 1.0 merge - need to consider phase instruction advice here.  See Generator#mergeInstructionsAdvice 
-						IInstallableUnit bundleIU = createBundleIU(bd, bundleManifest, isDir, key, info);
+						IInstallableUnit bundleIU = createBundleIU(bd, key, info);
 
 						if (isFragment(bd)) {
 							// TODO: Can NL fragments be multi-host?  What special handling
@@ -770,6 +734,15 @@ public class BundlesAction extends AbstractPublisherAction {
 	}
 
 	/**
+	 * Adds advice for any p2.inf file found in this bundle.
+	 */
+	private void createAdviceFileAdvice(BundleDescription bundleDescription, IPublisherInfo info) {
+		String location = bundleDescription.getLocation();
+		if (location != null)
+			info.addAdvice(new AdviceFileAdvice(new Path(location), AdviceFileAdvice.BUNDLE_ADVICE_FILE));
+	}
+
+	/**
 	 * Add all of the advice for the bundle at the given location to the given descriptor.
 	 * @param descriptor the descriptor to decorate
 	 * @param location the location of the bundle
@@ -789,7 +762,7 @@ public class BundlesAction extends AbstractPublisherAction {
 		}
 	}
 
-	private boolean isDir(BundleDescription bundle, IPublisherInfo info) {
+	private static boolean isDir(BundleDescription bundle, IPublisherInfo info) {
 		Collection advice = info.getAdvice(null, true, bundle.getSymbolicName(), bundle.getVersion(), IBundleShapeAdvice.class);
 		// if the advice has a shape, use it
 		if (advice != null && !advice.isEmpty()) {
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/FeaturesAction.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/FeaturesAction.java
index 6b31ff4..a45bf2d 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/FeaturesAction.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/FeaturesAction.java
@@ -15,7 +15,8 @@ import java.net.URI;
 import java.net.URISyntaxException;
 import java.util.*;
 import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.internal.p2.core.helpers.*;
+import org.eclipse.equinox.internal.p2.core.helpers.FileUtils;
+import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
 import org.eclipse.equinox.internal.p2.metadata.ArtifactKey;
 import org.eclipse.equinox.internal.p2.publisher.Activator;
 import org.eclipse.equinox.internal.p2.publisher.FileSetDescriptor;
@@ -39,189 +40,115 @@ import org.osgi.framework.Version;
 public class FeaturesAction extends AbstractPublisherAction {
 	public static final String INSTALL_FEATURES_FILTER = "(org.eclipse.update.install.features=true)"; //$NON-NLS-1$
 
-	private File[] locations;
 	protected Feature[] features;
-
-	public static String getTransformedId(String original, boolean isPlugin, boolean isGroup) {
-		return (isPlugin ? original : original + (isGroup ? ".feature.group" : ".feature.jar")); //$NON-NLS-1$//$NON-NLS-2$
-	}
+	private File[] locations;
 
 	public static IArtifactKey createFeatureArtifactKey(String id, String version) {
 		return new ArtifactKey(PublisherHelper.ECLIPSE_FEATURE_CLASSIFIER, id, new Version(version));
 	}
 
-	public static Object[] createFeatureRootFileIU(String featureId, String featureVersion, File location, FileSetDescriptor descriptor) {
+	public static IInstallableUnit createFeatureJarIU(Feature feature, ArrayList childIUs, IPublisherInfo info) {
 		InstallableUnitDescription iu = new MetadataFactory.InstallableUnitDescription();
-		iu.setSingleton(true);
-		String id = featureId + '_' + descriptor.getKey();
+		String id = getTransformedId(feature.getId(), /*isPlugin*/false, /*isGroup*/false);
 		iu.setId(id);
-		Version version = new Version(featureVersion);
+		Version version = new Version(feature.getVersion());
 		iu.setVersion(version);
-		iu.setCapabilities(new ProvidedCapability[] {PublisherHelper.createSelfCapability(id, version)});
-		iu.setTouchpointType(PublisherHelper.TOUCHPOINT_NATIVE);
-		String configSpec = descriptor.getConfigSpec();
-		if (configSpec != null)
-			iu.setFilter(AbstractPublisherAction.createFilterSpec(configSpec));
-		File[] fileResult = attachFiles(iu, descriptor, location);
-		setupLinks(iu, descriptor);
-		setupPermissions(iu, descriptor);
+		if (feature.getLicense() != null)
+			iu.setLicense(new License(toURIOrNull(feature.getLicenseURL()), feature.getLicense()));
+		if (feature.getCopyright() != null)
+			iu.setCopyright(new Copyright(toURIOrNull(feature.getCopyrightURL()), feature.getCopyright()));
 
-		IInstallableUnit iuResult = MetadataFactory.createInstallableUnit(iu);
-		// need to return both the iu and any files.
-		return new Object[] {iuResult, fileResult};
-	}
+		// The required capabilities are not specified at this level because we don't want the feature jar to be attractive to install.
+		iu.setTouchpointType(PublisherHelper.TOUCHPOINT_OSGI);
+		iu.setFilter(INSTALL_FEATURES_FILTER);
+		iu.setSingleton(true);
 
-	// attach the described files from the given location to the given iu description.  Return
-	// the list of files identified.
-	private static File[] attachFiles(InstallableUnitDescription iu, FileSetDescriptor descriptor, File location) {
-		String fileList = descriptor.getFiles();
-		String[] fileSpecs = getArrayFromString(fileList, ","); //$NON-NLS-1$
-		File[] files = new File[fileSpecs.length];
-		if (fileSpecs.length > 0) {
-			for (int i = 0; i < fileSpecs.length; i++) {
-				String spec = fileSpecs[i];
-				if (spec.startsWith("file:"))
-					spec = spec.substring(5);
-				files[i] = new File(location, spec);
-			}
-		}
-		// add touchpoint actions to unzip and cleanup as needed
-		// TODO need to support fancy root file location specs
-		Map touchpointData = new HashMap(2);
-		String configurationData = "unzip(source:@artifact, target:${installFolder});"; //$NON-NLS-1$
-		touchpointData.put("install", configurationData); //$NON-NLS-1$
-		String unConfigurationData = "cleanupzip(source:@artifact, target:${installFolder});"; //$NON-NLS-1$
-		touchpointData.put("uninstall", unConfigurationData); //$NON-NLS-1$
-		iu.addTouchpointData(MetadataFactory.createTouchpointData(touchpointData));
+		if (feature.getInstallHandler() != null && feature.getInstallHandler().trim().length() > 0) {
+			String installHandlerProperty = "handler=" + feature.getInstallHandler(); //$NON-NLS-1$
 
-		// prime the IU with an artifact key that will correspond to the zipped up root files.
-		IArtifactKey key = new ArtifactKey(PublisherHelper.BINARY_ARTIFACT_CLASSIFIER, iu.getId(), iu.getVersion());
-		iu.setArtifacts(new IArtifactKey[] {key});
-		return files;
-	}
+			if (feature.getInstallHandlerLibrary() != null)
+				installHandlerProperty += ", library=" + feature.getInstallHandlerLibrary(); //$NON-NLS-1$
 
-	private static void setupPermissions(InstallableUnitDescription iu, FileSetDescriptor descriptor) {
-		Map touchpointData = new HashMap();
-		String[][] permsList = descriptor.getPermissions();
-		for (int i = 0; i < permsList.length; i++) {
-			String[] permSpec = permsList[i];
-			String configurationData = " chmod(targetDir:${installFolder}, targetFile:" + permSpec[1] + ", permissions:" + permSpec[0] + ");"; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
-			touchpointData.put("install", configurationData); //$NON-NLS-1$
-			iu.addTouchpointData(MetadataFactory.createTouchpointData(touchpointData));
+			if (feature.getInstallHandlerURL() != null)
+				installHandlerProperty += ", url=" + feature.getInstallHandlerURL(); //$NON-NLS-1$
+
+			iu.setProperty(PublisherHelper.ECLIPSE_INSTALL_HANDLER_PROP, installHandlerProperty);
 		}
-	}
 
-	private static void setupLinks(InstallableUnitDescription iu, FileSetDescriptor descriptor) {
-		// TODO setup the link support.
-	}
+		iu.setCapabilities(new ProvidedCapability[] {PublisherHelper.createSelfCapability(id, version), PublisherHelper.FEATURE_CAPABILITY, MetadataFactory.createProvidedCapability(PublisherHelper.CAPABILITY_NS_UPDATE_FEATURE, feature.getId(), version)});
+		iu.setArtifacts(new IArtifactKey[] {createFeatureArtifactKey(feature.getId(), version.toString())});
 
-	public FeaturesAction(File[] locations) {
-		this.locations = locations;
-	}
+		// link in all the children (if any) as requirements.
+		// TODO consider if these should be linked as exact version numbers.  Should be ok but may be brittle.
+		if (childIUs != null) {
+			RequiredCapability[] required = new RequiredCapability[childIUs.size()];
+			for (int i = 0; i < childIUs.size(); i++) {
+				IInstallableUnit child = (IInstallableUnit) childIUs.get(i);
+				required[i] = MetadataFactory.createRequiredCapability(PublisherHelper.IU_NAMESPACE, child.getId(), new VersionRange(child.getVersion(), true, child.getVersion(), true), INSTALL_FEATURES_FILTER, false, false);
+			}
+			iu.setRequiredCapabilities(required);
+		}
 
-	public FeaturesAction(Feature[] features) {
-		this.features = features;
+		// if the feature has a location and it is not a JAR then setup the touchpoint data
+		// TODO its not clear when this would ever be false reasonably.  Features are always 
+		// supposed to be installed unzipped.  It is also not clear what it means to set this prop.
+		// Anyway, in the future it seems reasonable that features be installed as JARs...
+		if (feature.getLocation() == null || !feature.getLocation().endsWith(".jar")) {
+			Map touchpointData = new HashMap();
+			touchpointData.put("zipped", "true"); //$NON-NLS-1$ //$NON-NLS-2$
+			iu.addTouchpointData(MetadataFactory.createTouchpointData(touchpointData));
+		}
+		processFeatureAdvice(feature, iu, info);
+		return MetadataFactory.createInstallableUnit(iu);
 	}
 
-	public IStatus perform(IPublisherInfo info, IPublisherResult results, IProgressMonitor monitor) {
-		if (features == null && locations == null)
-			throw new IllegalStateException("No features or locations provided");
-		if (features == null)
-			features = getFeatures(expandLocations(locations));
-		generateFeatureIUs(features, results, info);
-		return Status.OK_STATUS;
+	private static Properties getFeatureAdvice(Feature feature, IPublisherInfo info) {
+		Properties result = new Properties();
+		Collection advice = info.getAdvice(null, false, null, null, IFeatureAdvice.class);
+		for (Iterator i = advice.iterator(); i.hasNext();) {
+			IFeatureAdvice entry = (IFeatureAdvice) i.next();
+			Properties props = entry.getIUProperties(feature);
+			if (props != null)
+				result.putAll(props);
+		}
+		return result;
 	}
 
-	private File[] expandLocations(File[] list) {
-		ArrayList result = new ArrayList();
-		expandLocations(list, result);
-		return (File[]) result.toArray(new File[result.size()]);
+	private static String getTransformedId(String original, boolean isPlugin, boolean isGroup) {
+		return (isPlugin ? original : original + (isGroup ? ".feature.group" : ".feature.jar")); //$NON-NLS-1$//$NON-NLS-2$
 	}
 
-	private void expandLocations(File[] list, ArrayList result) {
-		if (list == null)
-			return;
-		for (int i = 0; i < list.length; i++) {
-			File location = list[i];
-			if (location.isDirectory()) {
-				// if the location is itself a feature, just add it.  Otherwise r down
-				if (new File(location, "feature.xml").exists())
-					result.add(location);
-				else
-					expandLocations(location.listFiles(), result);
-			} else {
-				result.add(location);
+	private static void processFeatureAdvice(Feature feature, InstallableUnitDescription iu, IPublisherInfo info) {
+		Properties extraProperties = getFeatureAdvice(feature, info);
+		if (extraProperties != null) {
+			Enumeration e = extraProperties.propertyNames();
+			while (e.hasMoreElements()) {
+				String name = (String) e.nextElement();
+				iu.setProperty(name, extraProperties.getProperty(name));
 			}
 		}
 	}
 
-	protected void generateFeatureIUs(Feature[] features, IPublisherResult result, IPublisherInfo info) {
-		// Build Feature IUs, and add them to any corresponding categories
-		for (int i = 0; i < features.length; i++) {
-			Feature feature = features[i];
-			ArrayList childIUs = generateRootFileIUs(feature, result, info);
-
-			Properties props = getFeatureAdvice(feature, info);
-			IInstallableUnit featureIU = createFeatureJarIU(feature, childIUs, props);
-			publishFeatureArtifacts(feature, featureIU, info);
-			result.addIU(featureIU, IPublisherResult.ROOT);
-			generateSiteReferences(feature, result, info);
-
-			gatherBundleShapeAdvice(feature, info);
-
-			IInstallableUnit groupIU = createGroupIU(feature, featureIU, props);
-			result.addIU(groupIU, IPublisherResult.ROOT);
-		}
-	}
-
-	private void generateSiteReferences(Feature feature, IPublisherResult result, IPublisherInfo info) {
-		//publish feature site references
-		String updateURL = feature.getUpdateSiteURL();
-		//don't enable feature update sites by default since this results in too many
-		//extra sites being loaded and searched (Bug 234177)
-		if (updateURL != null)
-			generateSiteReference(updateURL, feature.getId(), info.getMetadataRepository());
-		URLEntry[] discoverySites = feature.getDiscoverySites();
-		for (int j = 0; j < discoverySites.length; j++)
-			generateSiteReference(discoverySites[j].getURL(), feature.getId(), info.getMetadataRepository());
-	}
-
 	/**
-	 * Generates and publishes a reference to an update site location
-	 * @param location The update site location
-	 * @param featureId the identifier of the feature where the error occurred, or null
-	 * @param metadataRepo The repo into which the references are added
+	 * Returns a URI corresponding to the given URL in string form, or null
+	 * if a well formed URI could not be created.
 	 */
-	private void generateSiteReference(String location, String featureId, IMetadataRepository metadataRepo) {
+	private static URI toURIOrNull(String url) {
+		if (url == null)
+			return null;
 		try {
-			URI associateLocation = new URI(location);
-			metadataRepo.addReference(associateLocation, IRepository.TYPE_METADATA, IRepository.NONE);
-			metadataRepo.addReference(associateLocation, IRepository.TYPE_ARTIFACT, IRepository.NONE);
+			return URIUtil.fromString(url);
 		} catch (URISyntaxException e) {
-			String message = "Invalid site reference: " + location; //$NON-NLS-1$
-			if (featureId != null)
-				message = message + " in feature: " + featureId; //$NON-NLS-1$
-			LogHelper.log(new Status(IStatus.ERROR, Activator.ID, message));
+			return null;
 		}
 	}
 
-	protected void publishFeatureArtifacts(Feature feature, IInstallableUnit featureIU, IPublisherInfo info) {
-		// add all the artifacts associated with the feature
-		// TODO this is a little strange.  If there are several artifacts, how do we know which files go with
-		// which artifacts when we publish them?  For now it would be surprising to have more than one
-		// artifact per feature IU.
-		IArtifactKey[] artifacts = featureIU.getArtifacts();
-		for (int j = 0; j < artifacts.length; j++) {
-			File file = new File(feature.getLocation());
-			IArtifactDescriptor ad = PublisherHelper.createArtifactDescriptor(artifacts[j], file);
-			addProperties((ArtifactDescriptor) ad, feature, info);
-			((ArtifactDescriptor) ad).setProperty(IArtifactDescriptor.DOWNLOAD_CONTENTTYPE, IArtifactDescriptor.TYPE_ZIP);
-			// if the artifact is a dir then zip it up.
-			if (file.isDirectory())
-				publishArtifact(ad, new File[] {file}, null, info, createRootPrefixComputer(file));
-			else
-				publishArtifact(ad, file, info);
-		}
+	public FeaturesAction(Feature[] features) {
+		this.features = features;
+	}
+
+	public FeaturesAction(File[] locations) {
+		this.locations = locations;
 	}
 
 	/**
@@ -244,117 +171,43 @@ public class FeaturesAction extends AbstractPublisherAction {
 		}
 	}
 
-	private Properties getFeatureAdvice(Feature feature, IPublisherInfo info) {
-		Properties result = new Properties();
-		Collection advice = info.getAdvice(null, false, null, null, IFeatureAdvice.class);
-		for (Iterator i = advice.iterator(); i.hasNext();) {
-			IFeatureAdvice entry = (IFeatureAdvice) i.next();
-			Properties props = entry.getIUProperties(feature);
-			if (props != null)
-				result.putAll(props);
+	// attach the described files from the given location to the given iu description.  Return
+	// the list of files identified.
+	private File[] attachFiles(InstallableUnitDescription iu, FileSetDescriptor descriptor, File location) {
+		String fileList = descriptor.getFiles();
+		String[] fileSpecs = getArrayFromString(fileList, ","); //$NON-NLS-1$
+		File[] files = new File[fileSpecs.length];
+		if (fileSpecs.length > 0) {
+			for (int i = 0; i < fileSpecs.length; i++) {
+				String spec = fileSpecs[i];
+				if (spec.startsWith("file:"))
+					spec = spec.substring(5);
+				files[i] = new File(location, spec);
+			}
 		}
-		return result;
-	}
+		// add touchpoint actions to unzip and cleanup as needed
+		// TODO need to support fancy root file location specs
+		Map touchpointData = new HashMap(2);
+		String configurationData = "unzip(source:@artifact, target:${installFolder});"; //$NON-NLS-1$
+		touchpointData.put("install", configurationData); //$NON-NLS-1$
+		String unConfigurationData = "cleanupzip(source:@artifact, target:${installFolder});"; //$NON-NLS-1$
+		touchpointData.put("uninstall", unConfigurationData); //$NON-NLS-1$
+		iu.addTouchpointData(MetadataFactory.createTouchpointData(touchpointData));
 
-	protected ArrayList generateRootFileIUs(Feature feature, IPublisherResult result, IPublisherInfo info) {
-		File location = new File(feature.getLocation());
-		Properties props = loadProperties(location, "build.properties"); //$NON-NLS-1$
-		return generateRootFileIUs(feature.getId(), feature.getVersion(), props, location, result, info);
+		// prime the IU with an artifact key that will correspond to the zipped up root files.
+		IArtifactKey key = new ArtifactKey(PublisherHelper.BINARY_ARTIFACT_CLASSIFIER, iu.getId(), iu.getVersion());
+		iu.setArtifacts(new IArtifactKey[] {key});
+		return files;
 	}
 
-	private ArrayList generateRootFileIUs(String featureId, String featureVersion, Properties props, File location, IPublisherResult result, IPublisherInfo info) {
-		ArrayList ius = new ArrayList();
-		FileSetDescriptor[] rootFileDescriptors = getRootFileDescriptors(props);
-		for (int i = 0; i < rootFileDescriptors.length; i++) {
-			IInstallableUnit iu = generateRootFileIU(featureId, featureVersion, location, rootFileDescriptors[i], result, info);
-			ius.add(iu);
-		}
-		return ius;
-	}
-
-	private Properties loadProperties(File location, String file) {
-		Properties props = new Properties();
-		File tempFile = null;
-		try {
-			// if the feature is a dir then just return the location
-			if (!location.isDirectory()) {
-				// otherwise extract the JAR into a temp location and return that location
-				tempFile = File.createTempFile("p2.generator", ""); //$NON-NLS-1$ //$NON-NLS-2$
-				FileUtils.unzipFile(location, tempFile);
-				location = tempFile;
-			}
-			try {
-				InputStream in = null;
-				try {
-					in = new BufferedInputStream(new FileInputStream(new File(location, file)));
-					props.load(in);
-				} finally {
-					if (in != null)
-						in.close();
-				}
-			} catch (FileNotFoundException e) {
-				// ignore if it is just a file not found.
-			} catch (IOException e) {
-				LogHelper.log(new Status(IStatus.ERROR, Activator.ID, "Error parsing " + file, e)); //$NON-NLS-1$
-			}
-		} catch (IOException e) {
-			LogHelper.log(new Status(IStatus.ERROR, Activator.ID, "Error publishing artifacts", e)); //$NON-NLS-1$
-		} finally {
-			if (tempFile != null)
-				tempFile.delete();
-		}
-		return props;
-	}
-
-	private IInstallableUnit generateRootFileIU(String featureId, String featureVersion, File location, FileSetDescriptor rootFile, IPublisherResult result, IPublisherInfo info) {
-		Object[] iuAndFiles = createFeatureRootFileIU(featureId, featureVersion, location, rootFile);
-		IInstallableUnit iuResult = (IInstallableUnit) iuAndFiles[0];
-		File[] fileResult = (File[]) iuAndFiles[1];
-		if (fileResult != null && fileResult.length > 0) {
-			IArtifactKey artifact = iuResult.getArtifacts()[0];
-			ArtifactDescriptor descriptor = new ArtifactDescriptor(artifact);
-			publishArtifact(descriptor, fileResult, null, info, FileUtils.createDynamicPathComputer(1));
-		}
-		result.addIU(iuResult, IPublisherResult.NON_ROOT);
-		return iuResult;
-	}
-
-	protected FileSetDescriptor[] getRootFileDescriptors(Properties props) {
-		HashMap result = new HashMap();
-		for (Iterator i = props.keySet().iterator(); i.hasNext();) {
-			String property = (String) i.next();
-			// we only care about root properties
-			if (!property.startsWith("root.")) //$NON-NLS-1$
-				continue;
-			String[] spec = getArrayFromString(property, "."); //$NON-NLS-1$
-			String descriptorKey = spec[0];
-			String configSpec = null;
-			// if the spec is 4 or more then there must be a config involved to get it
-			if (spec.length > 3) {
-				configSpec = createConfigSpec(spec[2], spec[1], spec[3]);
-				descriptorKey += "." + createIdString(configSpec); //$NON-NLS-1$
-			}
-
-			FileSetDescriptor descriptor = (FileSetDescriptor) result.get(descriptorKey);
-			if (descriptor == null) {
-				descriptor = new FileSetDescriptor(descriptorKey, configSpec);
-				result.put(descriptorKey, descriptor);
-			}
-			// if the last segment in the spec is "link" 
-			if (spec[spec.length - 1] == "link") //$NON-NLS-1$
-				descriptor.setLinks(props.getProperty(property));
-			else {
-				// if the second last segment is "permissions" 
-				if (spec[spec.length - 2].equals("permissions")) //$NON-NLS-1$
-					descriptor.addPermissions(new String[] {spec[spec.length - 1], props.getProperty(property)});
-				else {
-					// so it is not a link or a permissions, it must be a straight file copy (with or without a config)
-					descriptor.setFiles(props.getProperty(property));
-				}
-			}
-		}
-		Collection values = result.values();
-		return (FileSetDescriptor[]) values.toArray(new FileSetDescriptor[values.size()]);
+	/**
+	 * Looks for advice in a p2.inf file inside the feature location.
+	 */
+	private void createAdviceFileAdvice(Feature feature, IPublisherInfo info) {
+		//assume p2.inf is co-located with feature.xml
+		String location = feature.getLocation();
+		if (location != null)
+			info.addAdvice(new AdviceFileAdvice(new Path(location), new Path("p2.inf"))); //$NON-NLS-1$
 	}
 
 	/**
@@ -364,7 +217,7 @@ public class FeaturesAction extends AbstractPublisherAction {
 	 * @param feature the feature to process
 	 * @param info the publishing info to update
 	 */
-	public static void gatherBundleShapeAdvice(Feature feature, IPublisherInfo info) {
+	private void createBundleShapeAdvice(Feature feature, IPublisherInfo info) {
 		FeatureEntry entries[] = feature.getEntries();
 		for (int i = 0; i < entries.length; i++) {
 			FeatureEntry entry = entries[i];
@@ -373,90 +226,30 @@ public class FeaturesAction extends AbstractPublisherAction {
 		}
 	}
 
-	public static IInstallableUnit createFeatureJarIU(Feature feature, ArrayList childIUs, Properties extraProperties) {
+	private Object[] createFeatureRootFileIU(String featureId, String featureVersion, File location, FileSetDescriptor descriptor) {
 		InstallableUnitDescription iu = new MetadataFactory.InstallableUnitDescription();
-		String id = getTransformedId(feature.getId(), /*isPlugin*/false, /*isGroup*/false);
+		iu.setSingleton(true);
+		String id = featureId + '_' + descriptor.getKey();
 		iu.setId(id);
-		Version version = new Version(feature.getVersion());
+		Version version = new Version(featureVersion);
 		iu.setVersion(version);
-		if (feature.getLicense() != null)
-			iu.setLicense(new License(toURIOrNull(feature.getLicenseURL()), feature.getLicense()));
-		if (feature.getCopyright() != null) {
-			iu.setCopyright(new Copyright(toURIOrNull(feature.getCopyrightURL()), feature.getCopyright()));
-		}
-
-		// The required capabilities are not specified at this level because we don't want the feature jar to be attractive to install.
-
-		iu.setTouchpointType(PublisherHelper.TOUCHPOINT_OSGI);
-		iu.setFilter(INSTALL_FEATURES_FILTER);
-		iu.setSingleton(true);
-
-		if (feature.getInstallHandler() != null && feature.getInstallHandler().trim().length() > 0) {
-			String installHandlerProperty = "handler=" + feature.getInstallHandler(); //$NON-NLS-1$
-
-			if (feature.getInstallHandlerLibrary() != null)
-				installHandlerProperty += ", library=" + feature.getInstallHandlerLibrary(); //$NON-NLS-1$
-
-			if (feature.getInstallHandlerURL() != null)
-				installHandlerProperty += ", url=" + feature.getInstallHandlerURL(); //$NON-NLS-1$
-
-			iu.setProperty(PublisherHelper.ECLIPSE_INSTALL_HANDLER_PROP, installHandlerProperty);
-		}
-
-		iu.setCapabilities(new ProvidedCapability[] {PublisherHelper.createSelfCapability(id, version), PublisherHelper.FEATURE_CAPABILITY, MetadataFactory.createProvidedCapability(PublisherHelper.CAPABILITY_NS_UPDATE_FEATURE, feature.getId(), version)});
-		iu.setArtifacts(new IArtifactKey[] {createFeatureArtifactKey(feature.getId(), version.toString())});
-
-		// link in all the children (if any) as requirements.
-		// TODO consider if these should be linked as exact version numbers.  Should be ok but may be brittle.
-		if (childIUs != null) {
-			RequiredCapability[] required = new RequiredCapability[childIUs.size()];
-			for (int i = 0; i < childIUs.size(); i++) {
-				IInstallableUnit child = (IInstallableUnit) childIUs.get(i);
-				required[i] = MetadataFactory.createRequiredCapability(PublisherHelper.IU_NAMESPACE, child.getId(), new VersionRange(child.getVersion(), true, child.getVersion(), true), INSTALL_FEATURES_FILTER, false, false);
-			}
-			iu.setRequiredCapabilities(required);
-		}
-
-		// if the feature has a location and it is not a JAR then setup the touchpoint data
-		// TODO its not clear when this would ever be false reasonably.  Features are always 
-		// supposed to be installed unzipped.  It is also not clear what it means to set this prop.
-		// Anyway, in the future it seems reasonable that features be installed as JARs...
-		if (feature.getLocation() == null || !feature.getLocation().endsWith(".jar")) {
-			Map touchpointData = new HashMap();
-			touchpointData.put("zipped", "true"); //$NON-NLS-1$ //$NON-NLS-2$
-			iu.addTouchpointData(MetadataFactory.createTouchpointData(touchpointData));
-		}
-		addExtraProperties(iu, extraProperties);
-		return MetadataFactory.createInstallableUnit(iu);
-	}
-
-	/**
-	 * Returns a URI corresponding to the given URL in string form, or null
-	 * if a well formed URI could not be created.
-	 */
-	private static URI toURIOrNull(String url) {
-		if (url == null)
-			return null;
-		try {
-			return URIUtil.fromString(url);
-		} catch (URISyntaxException e) {
-			return null;
-		}
-	}
+		iu.setCapabilities(new ProvidedCapability[] {PublisherHelper.createSelfCapability(id, version)});
+		iu.setTouchpointType(PublisherHelper.TOUCHPOINT_NATIVE);
+		String configSpec = descriptor.getConfigSpec();
+		if (configSpec != null)
+			iu.setFilter(AbstractPublisherAction.createFilterSpec(configSpec));
+		File[] fileResult = attachFiles(iu, descriptor, location);
+		setupLinks(iu, descriptor);
+		setupPermissions(iu, descriptor);
 
-	private static void addExtraProperties(InstallableUnitDescription iu, Properties extraProperties) {
-		if (extraProperties != null) {
-			Enumeration e = extraProperties.propertyNames();
-			while (e.hasMoreElements()) {
-				String name = (String) e.nextElement();
-				iu.setProperty(name, extraProperties.getProperty(name));
-			}
-		}
+		IInstallableUnit iuResult = MetadataFactory.createInstallableUnit(iu);
+		// need to return both the iu and any files.
+		return new Object[] {iuResult, fileResult};
 	}
 
-	public static IInstallableUnit createGroupIU(Feature feature, IInstallableUnit featureIU, Properties extraProperties) {
+	protected IInstallableUnit createGroupIU(Feature feature, IInstallableUnit featureIU, IPublisherInfo info) {
 		if (isPatch(feature))
-			return createPatchIU(feature, featureIU, extraProperties);
+			return createPatchIU(feature, featureIU, info);
 		InstallableUnitDescription iu = new MetadataFactory.InstallableUnitDescription();
 		String id = getTransformedId(feature.getId(), /*isPlugin*/false, /*isGroup*/true);
 		iu.setId(id);
@@ -488,6 +281,8 @@ public class FeaturesAction extends AbstractPublisherAction {
 			required[entries.length] = MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, featureIU.getId(), new VersionRange(featureIU.getVersion(), true, featureIU.getVersion(), true), INSTALL_FEATURES_FILTER, false, false);
 		iu.setRequiredCapabilities(required);
 		iu.setTouchpointType(TouchpointType.NONE);
+		processTouchpointAdvice(iu, info);
+		processFeatureAdvice(feature, iu, info);
 		iu.setProperty(IInstallableUnit.PROP_TYPE_GROUP, Boolean.TRUE.toString());
 		// TODO: shouldn't the filter for the group be constructed from os, ws, arch, nl
 		// 		 of the feature?
@@ -512,20 +307,10 @@ public class FeaturesAction extends AbstractPublisherAction {
 		}
 
 		iu.setCapabilities((ProvidedCapability[]) providedCapabilities.toArray(new ProvidedCapability[providedCapabilities.size()]));
-		addExtraProperties(iu, extraProperties);
 		return MetadataFactory.createInstallableUnit(iu);
 	}
 
-	private static boolean isPatch(Feature feature) {
-		FeatureEntry[] entries = feature.getEntries();
-		for (int i = 0; i < entries.length; i++) {
-			if (entries[i].isPatch())
-				return true;
-		}
-		return false;
-	}
-
-	public static IInstallableUnit createPatchIU(Feature feature, IInstallableUnit featureIU, Properties extraProperties) {
+	private IInstallableUnit createPatchIU(Feature feature, IInstallableUnit featureIU, IPublisherInfo info) {
 		InstallableUnitPatchDescription iu = new MetadataFactory.InstallableUnitPatchDescription();
 		String id = getTransformedId(feature.getId(), /*isPlugin*/false, /*isGroup*/true);
 		iu.setId(id);
@@ -577,6 +362,8 @@ public class FeaturesAction extends AbstractPublisherAction {
 		}
 
 		iu.setTouchpointType(TouchpointType.NONE);
+		processTouchpointAdvice(iu, info);
+		processFeatureAdvice(feature, iu, info);
 		iu.setProperty(IInstallableUnit.PROP_TYPE_GROUP, Boolean.TRUE.toString());
 		iu.setProperty(IInstallableUnit.PROP_TYPE_PATCH, Boolean.TRUE.toString());
 		// TODO: shouldn't the filter for the group be constructed from os, ws, arch, nl
@@ -602,11 +389,178 @@ public class FeaturesAction extends AbstractPublisherAction {
 		}
 
 		iu.setCapabilities((ProvidedCapability[]) providedCapabilities.toArray(new ProvidedCapability[providedCapabilities.size()]));
-		addExtraProperties(iu, extraProperties);
 		return MetadataFactory.createInstallableUnitPatch(iu);
 	}
 
-	public static VersionRange getVersionRange(FeatureEntry entry) {
+	private File[] expandLocations(File[] list) {
+		ArrayList result = new ArrayList();
+		expandLocations(list, result);
+		return (File[]) result.toArray(new File[result.size()]);
+	}
+
+	private void expandLocations(File[] list, ArrayList result) {
+		if (list == null)
+			return;
+		for (int i = 0; i < list.length; i++) {
+			File location = list[i];
+			if (location.isDirectory()) {
+				// if the location is itself a feature, just add it.  Otherwise r down
+				if (new File(location, "feature.xml").exists())
+					result.add(location);
+				else
+					expandLocations(location.listFiles(), result);
+			} else {
+				result.add(location);
+			}
+		}
+	}
+
+	protected void generateFeatureIUs(Feature[] features, IPublisherResult result, IPublisherInfo info) {
+		// Build Feature IUs, and add them to any corresponding categories
+		for (int i = 0; i < features.length; i++) {
+			Feature feature = features[i];
+			//first gather any advice that might help us
+			createBundleShapeAdvice(feature, info);
+			createAdviceFileAdvice(feature, info);
+
+			ArrayList childIUs = generateRootFileIUs(feature, result, info);
+			Properties props = getFeatureAdvice(feature, info);
+			IInstallableUnit featureIU = createFeatureJarIU(feature, childIUs, info);
+			publishFeatureArtifacts(feature, featureIU, info);
+			result.addIU(featureIU, IPublisherResult.ROOT);
+			generateSiteReferences(feature, result, info);
+
+			IInstallableUnit groupIU = createGroupIU(feature, featureIU, info);
+			result.addIU(groupIU, IPublisherResult.ROOT);
+		}
+	}
+
+	private IInstallableUnit generateRootFileIU(String featureId, String featureVersion, File location, FileSetDescriptor rootFile, IPublisherResult result, IPublisherInfo info) {
+		Object[] iuAndFiles = createFeatureRootFileIU(featureId, featureVersion, location, rootFile);
+		IInstallableUnit iuResult = (IInstallableUnit) iuAndFiles[0];
+		File[] fileResult = (File[]) iuAndFiles[1];
+		if (fileResult != null && fileResult.length > 0) {
+			IArtifactKey artifact = iuResult.getArtifacts()[0];
+			ArtifactDescriptor descriptor = new ArtifactDescriptor(artifact);
+			publishArtifact(descriptor, fileResult, null, info, FileUtils.createDynamicPathComputer(1));
+		}
+		result.addIU(iuResult, IPublisherResult.NON_ROOT);
+		return iuResult;
+	}
+
+	protected ArrayList generateRootFileIUs(Feature feature, IPublisherResult result, IPublisherInfo info) {
+		File location = new File(feature.getLocation());
+		Properties props = loadProperties(location, "build.properties"); //$NON-NLS-1$
+		ArrayList ius = new ArrayList();
+		FileSetDescriptor[] rootFileDescriptors = getRootFileDescriptors(props);
+		for (int i = 0; i < rootFileDescriptors.length; i++) {
+			IInstallableUnit iu = generateRootFileIU(feature.getId(), feature.getVersion(), location, rootFileDescriptors[i], result, info);
+			ius.add(iu);
+		}
+		return ius;
+	}
+
+	/**
+	 * Generates and publishes a reference to an update site location
+	 * @param location The update site location
+	 * @param featureId the identifier of the feature where the error occurred, or null
+	 * @param metadataRepo The repo into which the references are added
+	 */
+	private void generateSiteReference(String location, String featureId, IMetadataRepository metadataRepo) {
+		try {
+			URI associateLocation = new URI(location);
+			metadataRepo.addReference(associateLocation, IRepository.TYPE_METADATA, IRepository.NONE);
+			metadataRepo.addReference(associateLocation, IRepository.TYPE_ARTIFACT, IRepository.NONE);
+		} catch (URISyntaxException e) {
+			String message = "Invalid site reference: " + location; //$NON-NLS-1$
+			if (featureId != null)
+				message = message + " in feature: " + featureId; //$NON-NLS-1$
+			LogHelper.log(new Status(IStatus.ERROR, Activator.ID, message));
+		}
+	}
+
+	private void generateSiteReferences(Feature feature, IPublisherResult result, IPublisherInfo info) {
+		//publish feature site references
+		String updateURL = feature.getUpdateSiteURL();
+		//don't enable feature update sites by default since this results in too many
+		//extra sites being loaded and searched (Bug 234177)
+		if (updateURL != null)
+			generateSiteReference(updateURL, feature.getId(), info.getMetadataRepository());
+		URLEntry[] discoverySites = feature.getDiscoverySites();
+		for (int j = 0; j < discoverySites.length; j++)
+			generateSiteReference(discoverySites[j].getURL(), feature.getId(), info.getMetadataRepository());
+	}
+
+	protected Feature[] getFeatures(File[] locations) {
+		ArrayList result = new ArrayList(locations.length);
+		for (int i = 0; i < locations.length; i++) {
+			Feature feature = new FeatureParser().parse(locations[i]);
+			if (feature != null) {
+				feature.setLocation(locations[i].getAbsolutePath());
+				result.add(feature);
+			}
+		}
+		return (Feature[]) result.toArray(new Feature[result.size()]);
+	}
+
+	private String getFilter(FeatureEntry entry) {
+		StringBuffer result = new StringBuffer();
+		result.append("(&"); //$NON-NLS-1$
+		if (entry.getFilter() != null)
+			result.append(entry.getFilter());
+		if (entry.getOS() != null)
+			result.append("(osgi.os=" + entry.getOS() + ')');//$NON-NLS-1$
+		if (entry.getWS() != null)
+			result.append("(osgi.ws=" + entry.getWS() + ')');//$NON-NLS-1$
+		if (entry.getArch() != null)
+			result.append("(osgi.arch=" + entry.getArch() + ')');//$NON-NLS-1$
+		if (entry.getNL() != null)
+			result.append("(osgi.nl=" + entry.getNL() + ')');//$NON-NLS-1$
+		if (result.length() == 2)
+			return null;
+		result.append(')');
+		return result.toString();
+	}
+
+	protected FileSetDescriptor[] getRootFileDescriptors(Properties props) {
+		HashMap result = new HashMap();
+		for (Iterator i = props.keySet().iterator(); i.hasNext();) {
+			String property = (String) i.next();
+			// we only care about root properties
+			if (!property.startsWith("root.")) //$NON-NLS-1$
+				continue;
+			String[] spec = getArrayFromString(property, "."); //$NON-NLS-1$
+			String descriptorKey = spec[0];
+			String configSpec = null;
+			// if the spec is 4 or more then there must be a config involved to get it
+			if (spec.length > 3) {
+				configSpec = createConfigSpec(spec[2], spec[1], spec[3]);
+				descriptorKey += "." + createIdString(configSpec); //$NON-NLS-1$
+			}
+
+			FileSetDescriptor descriptor = (FileSetDescriptor) result.get(descriptorKey);
+			if (descriptor == null) {
+				descriptor = new FileSetDescriptor(descriptorKey, configSpec);
+				result.put(descriptorKey, descriptor);
+			}
+			// if the last segment in the spec is "link" 
+			if (spec[spec.length - 1] == "link") //$NON-NLS-1$
+				descriptor.setLinks(props.getProperty(property));
+			else {
+				// if the second last segment is "permissions" 
+				if (spec[spec.length - 2].equals("permissions")) //$NON-NLS-1$
+					descriptor.addPermissions(new String[] {spec[spec.length - 1], props.getProperty(property)});
+				else {
+					// so it is not a link or a permissions, it must be a straight file copy (with or without a config)
+					descriptor.setFiles(props.getProperty(property));
+				}
+			}
+		}
+		Collection values = result.values();
+		return (FileSetDescriptor[]) values.toArray(new FileSetDescriptor[values.size()]);
+	}
+
+	private VersionRange getVersionRange(FeatureEntry entry) {
 		String versionSpec = entry.getVersion();
 		if (versionSpec == null)
 			return VersionRange.emptyRange;
@@ -634,34 +588,99 @@ public class FeaturesAction extends AbstractPublisherAction {
 		return null;
 	}
 
-	public static String getFilter(FeatureEntry entry) {
-		StringBuffer result = new StringBuffer();
-		result.append("(&"); //$NON-NLS-1$
-		if (entry.getFilter() != null)
-			result.append(entry.getFilter());
-		if (entry.getOS() != null)
-			result.append("(osgi.os=" + entry.getOS() + ')');//$NON-NLS-1$
-		if (entry.getWS() != null)
-			result.append("(osgi.ws=" + entry.getWS() + ')');//$NON-NLS-1$
-		if (entry.getArch() != null)
-			result.append("(osgi.arch=" + entry.getArch() + ')');//$NON-NLS-1$
-		if (entry.getNL() != null)
-			result.append("(osgi.nl=" + entry.getNL() + ')');//$NON-NLS-1$
-		if (result.length() == 2)
-			return null;
-		result.append(')');
-		return result.toString();
+	private boolean isPatch(Feature feature) {
+		FeatureEntry[] entries = feature.getEntries();
+		for (int i = 0; i < entries.length; i++) {
+			if (entries[i].isPatch())
+				return true;
+		}
+		return false;
 	}
 
-	protected Feature[] getFeatures(File[] locations) {
-		ArrayList result = new ArrayList(locations.length);
-		for (int i = 0; i < locations.length; i++) {
-			Feature feature = new FeatureParser().parse(locations[i]);
-			if (feature != null) {
-				feature.setLocation(locations[i].getAbsolutePath());
-				result.add(feature);
+	private Properties loadProperties(File location, String file) {
+		Properties props = new Properties();
+		File tempFile = null;
+		try {
+			// if the feature is a dir then just return the location
+			if (!location.isDirectory()) {
+				// otherwise extract the JAR into a temp location and return that location
+				tempFile = File.createTempFile("p2.generator", ""); //$NON-NLS-1$ //$NON-NLS-2$
+				FileUtils.unzipFile(location, tempFile);
+				location = tempFile;
+			}
+			try {
+				InputStream in = null;
+				try {
+					in = new BufferedInputStream(new FileInputStream(new File(location, file)));
+					props.load(in);
+				} finally {
+					if (in != null)
+						in.close();
+				}
+			} catch (FileNotFoundException e) {
+				// ignore if it is just a file not found.
+			} catch (IOException e) {
+				LogHelper.log(new Status(IStatus.ERROR, Activator.ID, "Error parsing " + file, e)); //$NON-NLS-1$
 			}
+		} catch (IOException e) {
+			LogHelper.log(new Status(IStatus.ERROR, Activator.ID, "Error publishing artifacts", e)); //$NON-NLS-1$
+		} finally {
+			if (tempFile != null)
+				tempFile.delete();
+		}
+		return props;
+	}
+
+	public IStatus perform(IPublisherInfo info, IPublisherResult results, IProgressMonitor monitor) {
+		if (features == null && locations == null)
+			throw new IllegalStateException("No features or locations provided");
+		if (features == null)
+			features = getFeatures(expandLocations(locations));
+		generateFeatureIUs(features, results, info);
+		return Status.OK_STATUS;
+	}
+
+	private void processTouchpointAdvice(InstallableUnitDescription iu, IPublisherInfo info) {
+		Collection advice = info.getAdvice(null, false, null, null, ITouchpointAdvice.class);
+		TouchpointData result = MetadataFactory.createTouchpointData(new HashMap());
+		for (Iterator i = advice.iterator(); i.hasNext();) {
+			ITouchpointAdvice entry = (ITouchpointAdvice) i.next();
+			result = entry.getTouchpointData(result);
+		}
+		iu.addTouchpointData(result);
+	}
+
+	protected void publishFeatureArtifacts(Feature feature, IInstallableUnit featureIU, IPublisherInfo info) {
+		// add all the artifacts associated with the feature
+		// TODO this is a little strange.  If there are several artifacts, how do we know which files go with
+		// which artifacts when we publish them?  For now it would be surprising to have more than one
+		// artifact per feature IU.
+		IArtifactKey[] artifacts = featureIU.getArtifacts();
+		for (int j = 0; j < artifacts.length; j++) {
+			File file = new File(feature.getLocation());
+			IArtifactDescriptor ad = PublisherHelper.createArtifactDescriptor(artifacts[j], file);
+			addProperties((ArtifactDescriptor) ad, feature, info);
+			((ArtifactDescriptor) ad).setProperty(IArtifactDescriptor.DOWNLOAD_CONTENTTYPE, IArtifactDescriptor.TYPE_ZIP);
+			// if the artifact is a dir then zip it up.
+			if (file.isDirectory())
+				publishArtifact(ad, new File[] {file}, null, info, createRootPrefixComputer(file));
+			else
+				publishArtifact(ad, file, info);
+		}
+	}
+
+	private void setupLinks(InstallableUnitDescription iu, FileSetDescriptor descriptor) {
+		// TODO setup the link support.
+	}
+
+	private void setupPermissions(InstallableUnitDescription iu, FileSetDescriptor descriptor) {
+		Map touchpointData = new HashMap();
+		String[][] permsList = descriptor.getPermissions();
+		for (int i = 0; i < permsList.length; i++) {
+			String[] permSpec = permsList[i];
+			String configurationData = " chmod(targetDir:${installFolder}, targetFile:" + permSpec[1] + ", permissions:" + permSpec[0] + ");"; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
+			touchpointData.put("install", configurationData); //$NON-NLS-1$
+			iu.addTouchpointData(MetadataFactory.createTouchpointData(touchpointData));
 		}
-		return (Feature[]) result.toArray(new Feature[result.size()]);
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/IBundleAdvice.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/IBundleAdvice.java
index 1fc566b..525e03c 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/IBundleAdvice.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/IBundleAdvice.java
@@ -10,7 +10,6 @@
 package org.eclipse.equinox.p2.publisher.eclipse;
 
 import java.io.File;
-import java.util.Map;
 import java.util.Properties;
 import org.eclipse.equinox.p2.publisher.IPublisherAdvice;
 
@@ -31,12 +30,4 @@ public interface IBundleAdvice extends IPublisherAdvice {
 	 * @return extra properties for the given feature
 	 */
 	public Properties getArtifactProperties(File location);
-
-	/**
-	 * Returns a list of additional touchpoint instructions to add to the IU published
-	 * for the bundle at the given location.
-	 * @param location
-	 * @return additonal touchpoint instructions
-	 */
-	public Map getInstructions(File location);
 }
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/ITouchpointAdvice.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/ITouchpointAdvice.java
new file mode 100644
index 0000000..09e6b13
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/ITouchpointAdvice.java
@@ -0,0 +1,30 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.p2.publisher.eclipse;
+
+import org.eclipse.equinox.internal.provisional.p2.metadata.TouchpointData;
+import org.eclipse.equinox.p2.publisher.IPublisherAdvice;
+
+/**
+ * Touchpoint advice provides information related to the touch points associated
+ * with an installable unit being published.
+ */
+public interface ITouchpointAdvice extends IPublisherAdvice {
+	/**
+	 * Returns a touchpoint data that merges the given touchpoint data
+	 * with any new touchpoint data contributed by this advice.
+	 * 
+	 * @param existingData The current set of touchpoint data.
+	 * @return the merged touchpoint data
+	 */
+	public TouchpointData getTouchpointData(TouchpointData existingData);
+
+}
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/spi/p2/publisher/PublisherHelper.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/spi/p2/publisher/PublisherHelper.java
index e844730c..3727c0c 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/spi/p2/publisher/PublisherHelper.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/spi/p2/publisher/PublisherHelper.java
@@ -22,8 +22,9 @@ import org.eclipse.equinox.internal.provisional.p2.artifact.repository.ArtifactD
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactDescriptor;
 import org.eclipse.equinox.internal.provisional.p2.metadata.*;
 import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory.InstallableUnitFragmentDescription;
+import org.eclipse.equinox.p2.publisher.IPublisherInfo;
 import org.eclipse.equinox.p2.publisher.PublisherInfo;
-import org.eclipse.equinox.p2.publisher.eclipse.BundlesAction;
+import org.eclipse.equinox.p2.publisher.eclipse.*;
 import org.eclipse.osgi.service.resolver.BundleDescription;
 import org.eclipse.osgi.service.resolver.VersionRange;
 import org.osgi.framework.Constants;
@@ -206,9 +207,12 @@ public class PublisherHelper {
 		}
 	}
 
-	public static IInstallableUnit[] createEclipseIU(BundleDescription bd, Map manifest, boolean isFolderPlugin, IArtifactKey key, Properties extraProperties) {
+	public static IInstallableUnit[] createEclipseIU(BundleDescription bd, boolean isFolderPlugin, IArtifactKey key, Properties extraProperties) {
 		ArrayList iusCreated = new ArrayList(1);
-		IInstallableUnit iu = BundlesAction.createBundleIU(bd, manifest, isFolderPlugin, key, new PublisherInfo());
+		IPublisherInfo info = new PublisherInfo();
+		String shape = isFolderPlugin ? IBundleShapeAdvice.DIR : IBundleShapeAdvice.JAR;
+		info.addAdvice(new BundleShapeAdvice(bd.getSymbolicName(), bd.getVersion(), shape));
+		IInstallableUnit iu = BundlesAction.createBundleIU(bd, key, info);
 		addExtraProperties(iu, extraProperties);
 		iusCreated.add(iu);
 		return (IInstallableUnit[]) (iusCreated.toArray(new IInstallableUnit[iusCreated.size()]));
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
index 328afb3..2198894 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
@@ -30,7 +30,10 @@ import org.eclipse.equinox.internal.provisional.p2.metadata.query.InstallableUni
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.query.Collector;
+import org.eclipse.equinox.p2.publisher.PublisherInfo;
+import org.eclipse.equinox.p2.publisher.eclipse.*;
 import org.eclipse.osgi.service.datalocation.Location;
+import org.eclipse.osgi.service.resolver.BundleDescription;
 import org.eclipse.osgi.service.resolver.VersionRange;
 import org.osgi.framework.Version;
 
@@ -207,6 +210,13 @@ public abstract class AbstractProvisioningTest extends TestCase {
 		return createIUFragment(null, name, version, BUNDLE_REQUIREMENT, TOUCHPOINT_OSGI, tpData);
 	}
 
+	public IInstallableUnit createBundleIU(BundleDescription bd, boolean isFolder, IArtifactKey key) {
+		PublisherInfo info = new PublisherInfo();
+		String shape = isFolder ? IBundleShapeAdvice.DIR : IBundleShapeAdvice.JAR;
+		info.addAdvice(new BundleShapeAdvice(bd.getSymbolicName(), bd.getVersion(), shape));
+		return BundlesAction.createBundleIU(bd, key, info);
+	}
+
 	public static IDirector createDirector() {
 		return (IDirector) ServiceHelper.getService(TestActivator.getContext(), IDirector.class.getName());
 	}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/BundlesActionTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/BundlesActionTest.java
index a3dfc76..10a93ef 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/BundlesActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/BundlesActionTest.java
@@ -10,12 +10,13 @@
  ******************************************************************************/
 package org.eclipse.equinox.p2.tests.publisher.actions;
 
-import static org.easymock.EasyMock.expect;
+import static org.easymock.EasyMock.*;
 
 import java.io.File;
 import java.io.FileInputStream;
 import java.util.*;
 import java.util.zip.ZipInputStream;
+import org.easymock.Capture;
 import org.easymock.EasyMock;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.metadata.ArtifactKey;
@@ -74,6 +75,14 @@ public class BundlesActionTest extends ActionTest {
 
 	protected TestArtifactRepository artifactRepository = new TestArtifactRepository();
 
+	private Capture<ITouchpointAdvice> tpAdvice;
+
+	@Override
+	public void setupPublisherInfo() {
+		tpAdvice = new Capture<ITouchpointAdvice>();
+		super.setupPublisherInfo();
+	}
+
 	public void testAll() throws Exception {
 		File[] files = TEST_BASE.listFiles();
 		testAction = new BundlesAction(files);
@@ -111,13 +120,13 @@ public class BundlesActionTest extends ActionTest {
 		assertTrue(ius.size() == 1);
 		IInstallableUnit bundle1IU = (IInstallableUnit) ius.get(0);
 
-		assertNotNull(bundle1IU);
-		assertEquals(bundle1IU.getVersion(), TEST1_BUNDLE_VERSION);
+		assertNotNull("1.0", bundle1IU);
+		assertEquals("1.1", bundle1IU.getVersion(), TEST1_BUNDLE_VERSION);
 
 		// check required capabilities
 		RequiredCapability[] requiredCapability = bundle1IU.getRequiredCapabilities();
 		verifyRequiredCapability(requiredCapability, TEST1_IUD_NAMESPACE, TEST1_IUD_NAME, TEST1_IUD_VERSION_RANGE);
-		assertTrue(requiredCapability.length == 1 /*num of tested elements*/);
+		assertEquals("2.0", 1, requiredCapability.length);
 
 		// check provided capabilities
 		ProvidedCapability[] providedCapabilities = bundle1IU.getProvidedCapabilities();
@@ -125,7 +134,20 @@ public class BundlesActionTest extends ActionTest {
 		verifyProvidedCapability(providedCapabilities, OSGI, TEST1_PROVBUNDLE_NAME, TEST1_BUNDLE_VERSION);
 		verifyProvidedCapability(providedCapabilities, TEST1_PROVZ_NAMESPACE, TEST1_PROVZ_NAME, TEST2_PROVZ_VERSION);
 		verifyProvidedCapability(providedCapabilities, PublisherHelper.NAMESPACE_ECLIPSE_TYPE, "source", new Version("1.0.0"));//$NON-NLS-1$//$NON-NLS-2$
-		assertTrue(providedCapabilities.length == 4 /*num of tested elements*/);
+		assertEquals("2.1", 4, providedCapabilities.length);
+
+		TouchpointData[] data = bundle1IU.getTouchpointData();
+		boolean found = false;
+		for (int i = 0; i < data.length; i++) {
+			TouchpointInstruction configure = data[i].getInstruction("configure");
+			if (configure == null)
+				continue;
+			String body = configure.getBody();
+			if (body != null && body.indexOf("download.eclipse.org/releases/ganymede") > 0) {
+				found = true;
+			}
+		}
+		assertTrue("3.0", found);
 	}
 
 	private void verifyBundle2() {
@@ -179,8 +201,7 @@ public class BundlesActionTest extends ActionTest {
 		IBundleAdvice bundleAdvice = EasyMock.createMock(IBundleAdvice.class);
 		expect(bundleAdvice.getArtifactProperties(TEST_FILE1)).andReturn(sarProperties).anyTimes();
 		expect(bundleAdvice.getArtifactProperties(TEST_FILE2)).andReturn(sdkProperties).anyTimes();
-		expect(bundleAdvice.getInstructions((File) EasyMock.anyObject())).andReturn(new HashMap()).anyTimes();
-		expect(bundleAdvice.getIUProperties((File) EasyMock.anyObject())).andReturn(new Properties()).anyTimes();
+		expect(bundleAdvice.getIUProperties((File) anyObject())).andReturn(new Properties()).anyTimes();
 
 		EasyMock.replay(bundleAdvice);
 		ArrayList adviceCollection = new ArrayList();
@@ -191,5 +212,10 @@ public class BundlesActionTest extends ActionTest {
 		expect(publisherInfo.getAdvice(null, true, TEST2_PROVBUNDLE_NAME, new Version("1.0.0.qualifier"), IBundleShapeAdvice.class)).andReturn(null);//$NON-NLS-1$
 		expect(publisherInfo.getArtifactOptions()).andReturn(IPublisherInfo.A_INDEX | IPublisherInfo.A_OVERWRITE | IPublisherInfo.A_PUBLISH).anyTimes();
 		expect(publisherInfo.getAdvice(null, false, null, null, ICapabilityAdvice.class)).andReturn(new ArrayList()).anyTimes();
+
+		//capture any touchpoint advice, and return the captured advice when the action asks for it
+		publisherInfo.addAdvice(and(isA(ITouchpointAdvice.class), capture(tpAdvice)));
+		EasyMock.expectLastCall().anyTimes();
+		expect(publisherInfo.getAdvice(null, false, null, null, ITouchpointAdvice.class)).andReturn(new CaptureList(tpAdvice)).anyTimes();
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/CaptureList.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/CaptureList.java
new file mode 100644
index 0000000..95f2424
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/CaptureList.java
@@ -0,0 +1,37 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.p2.tests.publisher.actions;
+
+import java.util.AbstractList;
+import java.util.List;
+import org.easymock.Capture;
+
+/**
+ * An object that adapts an EasyMock Capture to a List.
+ */
+public class CaptureList<E> extends AbstractList<E> implements List<E> {
+	private Capture<E> capture;
+
+	public CaptureList(Capture<E> capture) {
+		this.capture = capture;
+	}
+
+	@Override
+	public E get(int arg0) {
+		return capture.getValue();
+	}
+
+	@Override
+	public int size() {
+		return capture.hasCaptured() ? 1 : 0;
+	}
+
+}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/FeaturesActionTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/FeaturesActionTest.java
index e3a3520..4ab8dcb 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/FeaturesActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/FeaturesActionTest.java
@@ -10,12 +10,13 @@
  ******************************************************************************/
 package org.eclipse.equinox.p2.tests.publisher.actions;
 
-import static org.easymock.EasyMock.expect;
+import static org.easymock.EasyMock.*;
 
 import java.io.File;
 import java.io.IOException;
 import java.util.*;
 import java.util.zip.ZipInputStream;
+import org.easymock.Capture;
 import org.easymock.EasyMock;
 import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.core.runtime.Path;
@@ -43,25 +44,34 @@ public class FeaturesActionTest extends ActionTest {
 	private Version barVersion = new Version("1.1.1"); //$NON-NLS-1$
 	private String BAR = "bar"; //$NON-NLS-1$
 	private String FOO = "foo"; //$NON-NLS-1$
+	private Capture<ITouchpointAdvice> tpAdvice;
 
 	public void setUp() throws Exception {
 		testAction = new FeaturesAction(new File[] {root});
+		tpAdvice = new Capture<ITouchpointAdvice>();
 		setupPublisherInfo();
 		setupPublisherResult();
 	}
 
-	public void testStuff() throws Exception {
+	/**
+	 * Tests publishing two simple features.
+	 */
+	public void testSimple() throws Exception {
 		testAction.perform(publisherInfo, publisherResult, new NullProgressMonitor());
 		verifyRepositoryContents();
 		debug("Completed FeaturesAction."); //$NON-NLS-1$
 	}
 
+	public void testFeaturePatch() {
+		//TODO add a test for generating a feature patch
+	}
+
 	private void verifyRepositoryContents() throws Exception {
-		verifyArtifactRepository();
-		verifyResults();
+		verifyArtifacts();
+		verifyMetadata();
 	}
 
-	private void verifyResults() {
+	private void verifyMetadata() {
 		//{foo.feature.jar=[foo.feature.jar 1.0.0], bar.feature.jar=[bar.feature.jar 1.1.1], foo.feature.group=[foo.feature.group 1.0.0], bar.feature.group=[bar.feature.group 1.1.1]}
 		ArrayList fooIUs = new ArrayList(publisherResult.getIUs("foo.feature.jar", IPublisherResult.ROOT)); //$NON-NLS-1$
 		assertTrue(fooIUs.size() == 1);
@@ -78,7 +88,8 @@ public class FeaturesActionTest extends ActionTest {
 		assertTrue(foo.getTouchpointType().getVersion().equals(fooVersion));
 
 		//zipped=true
-		String fooValue = ((TouchpointInstruction) foo.getTouchpointData()[0].getInstructions().get("zipped")).getBody(); //$NON-NLS-1$
+		TouchpointData[] tpData = foo.getTouchpointData();
+		String fooValue = ((TouchpointInstruction) tpData[0].getInstructions().get("zipped")).getBody(); //$NON-NLS-1$
 		assertTrue(fooValue.equalsIgnoreCase("true")); //$NON-NLS-1$
 
 		RequiredCapability[] fooRequiredCapabilities = foo.getRequiredCapabilities();
@@ -90,6 +101,16 @@ public class FeaturesActionTest extends ActionTest {
 		contains(fooProvidedCapabilities, "org.eclipse.update.feature", FOO, fooVersion); //$NON-NLS-1$
 		assertTrue(fooProvidedCapabilities.length == 3);
 
+		//feature group IU for foo
+		fooIUs = new ArrayList(publisherResult.getIUs("foo.feature.group", IPublisherResult.ROOT)); //$NON-NLS-1$
+		assertTrue(fooIUs.size() == 1);
+		IInstallableUnit fooGroup = (IInstallableUnit) fooIUs.get(0);
+		tpData = fooGroup.getTouchpointData();
+		assertEquals(1, tpData.length);
+		TouchpointInstruction instruction = tpData[0].getInstruction("install");
+		assertNotNull(instruction);
+		assertEquals("ln(targetDir:@artifact,linkTarget:foo/lib.1.so,linkName:lib.so);chmod(targetDir:@artifact,targetFile:lib/lib.so,permissions:755);", instruction.getBody());
+
 		/*verify bar*/
 		ArrayList barIUs = new ArrayList(publisherResult.getIUs("bar.feature.jar", IPublisherResult.ROOT)); //$NON-NLS-1$
 		assertTrue(barIUs.size() == 1);
@@ -123,7 +144,7 @@ public class FeaturesActionTest extends ActionTest {
 		assertTrue(barProvidedCapabilities.length == 3);
 	}
 
-	private void verifyArtifactRepository() throws IOException {
+	private void verifyArtifacts() throws IOException {
 		ZipInputStream actualStream = artifactRepository.getZipInputStream(FOO_KEY);
 		Map expected = getFileMap(new HashMap(), new File[] {new File(root, FOO)}, new Path(new File(root, FOO).getAbsolutePath()));
 		TestData.assertContains(expected, actualStream, true);
@@ -142,6 +163,11 @@ public class FeaturesActionTest extends ActionTest {
 		expect(publisherInfo.getArtifactOptions()).andReturn(IPublisherInfo.A_INDEX | IPublisherInfo.A_OVERWRITE | IPublisherInfo.A_PUBLISH).anyTimes();
 		expect(publisherInfo.getArtifactRepository()).andReturn(artifactRepository).anyTimes();
 		expect(publisherInfo.getMetadataRepository()).andReturn(metadataRepository).anyTimes();
+
+		//capture any touchpoint advice, and return the captured advice when the action asks for it
+		publisherInfo.addAdvice(and(isA(ITouchpointAdvice.class), capture(tpAdvice)));
+		EasyMock.expectLastCall().anyTimes();
+		expect(publisherInfo.getAdvice(null, false, null, null, ITouchpointAdvice.class)).andReturn(new CaptureList(tpAdvice)).anyTimes();
 	}
 
 	private ArrayList fillAdvice(ArrayList adviceCollection) {
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/AddSourceBundleActionTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/AddSourceBundleActionTest.java
index 52e58cb..8c2a82b 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/AddSourceBundleActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/AddSourceBundleActionTest.java
@@ -20,7 +20,6 @@ import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IFileArti
 import org.eclipse.equinox.internal.provisional.p2.engine.*;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.publisher.PublisherInfo;
 import org.eclipse.equinox.p2.publisher.eclipse.BundlesAction;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 import org.eclipse.equinox.spi.p2.publisher.PublisherHelper;
@@ -53,8 +52,7 @@ public class AddSourceBundleActionTest extends AbstractProvisioningTest {
 		BundleDescription bundleDescription = BundlesAction.createBundleDescription(osgiTarget);
 		IArtifactKey key = BundlesAction.createBundleArtifactKey(bundleDescription.getSymbolicName(), bundleDescription.getVersion().toString());
 		IArtifactDescriptor descriptor = PublisherHelper.createArtifactDescriptor(key, osgiTarget);
-		Map manifest = (Map) bundleDescription.getUserObject();
-		IInstallableUnit iu = BundlesAction.createBundleIU(bundleDescription, manifest, osgiTarget.isDirectory(), key, new PublisherInfo());
+		IInstallableUnit iu = createBundleIU(bundleDescription, osgiTarget.isDirectory(), key);
 		bundlePool.addDescriptor(descriptor);
 
 		Map parameters = new HashMap();
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/CheckTrustActionTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/CheckTrustActionTest.java
index 100bf43..ad36549 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/CheckTrustActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/CheckTrustActionTest.java
@@ -21,7 +21,6 @@ import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IFileArti
 import org.eclipse.equinox.internal.provisional.p2.engine.*;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.publisher.PublisherInfo;
 import org.eclipse.equinox.p2.publisher.eclipse.BundlesAction;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 import org.eclipse.equinox.spi.p2.publisher.PublisherHelper;
@@ -54,8 +53,7 @@ public class CheckTrustActionTest extends AbstractProvisioningTest {
 		BundleDescription bundleDescription = BundlesAction.createBundleDescription(osgiTarget);
 		IArtifactKey key = BundlesAction.createBundleArtifactKey(bundleDescription.getSymbolicName(), bundleDescription.getVersion().toString());
 		IArtifactDescriptor descriptor = PublisherHelper.createArtifactDescriptor(key, osgiTarget);
-		Map manifest = (Map) bundleDescription.getUserObject();
-		IInstallableUnit iu = BundlesAction.createBundleIU(bundleDescription, manifest, osgiTarget.isDirectory(), key, new PublisherInfo());
+		IInstallableUnit iu = createBundleIU(bundleDescription, osgiTarget.isDirectory(), key);
 		bundlePool.addDescriptor(descriptor);
 
 		Map parameters = new HashMap();
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/CollectActionTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/CollectActionTest.java
index c155327..4b3f098 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/CollectActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/CollectActionTest.java
@@ -18,7 +18,6 @@ import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifact
 import org.eclipse.equinox.internal.provisional.p2.engine.*;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.publisher.PublisherInfo;
 import org.eclipse.equinox.p2.publisher.eclipse.BundlesAction;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 import org.eclipse.osgi.service.resolver.BundleDescription;
@@ -54,8 +53,7 @@ public class CollectActionTest extends AbstractProvisioningTest {
 		//IArtifactDescriptor descriptor = PublisherHelper.createArtifactDescriptor(key, osgiTarget);
 		//bundlePool.addDescriptor(descriptor);
 
-		Map manifest = (Map) bundleDescription.getUserObject();
-		IInstallableUnit iu = BundlesAction.createBundleIU(bundleDescription, manifest, osgiTarget.isDirectory(), key, new PublisherInfo());
+		IInstallableUnit iu = createBundleIU(bundleDescription, osgiTarget.isDirectory(), key);
 
 		Map parameters = new HashMap();
 		parameters.put(ActionConstants.PARM_PROFILE, profile);
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/EclipseTouchpointTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/EclipseTouchpointTest.java
index 0e2943c..0d7c808 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/EclipseTouchpointTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/EclipseTouchpointTest.java
@@ -106,7 +106,7 @@ public class EclipseTouchpointTest extends AbstractProvisioningTest {
 		mockManifest.put("Bundle-Version", key.getVersion().toString()); //$NON-NLS-1$
 
 		BundleDescription partialIUbundleDescription = BundlesAction.createBundleDescription(mockManifest, null);
-		IInstallableUnit[] bundleIUs = PublisherHelper.createEclipseIU(partialIUbundleDescription, null, false, key, extraProperties);
+		IInstallableUnit[] bundleIUs = PublisherHelper.createEclipseIU(partialIUbundleDescription, false, key, extraProperties);
 		assertTrue(bundleIUs != null && bundleIUs.length != 0);
 		IInstallableUnit iu = bundleIUs[0];
 		assertTrue(Boolean.valueOf(iu.getProperty(IInstallableUnit.PROP_PARTIAL_IU)).booleanValue());
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/InstallBundleActionTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/InstallBundleActionTest.java
index df86e9c..f134c25 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/InstallBundleActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/InstallBundleActionTest.java
@@ -22,7 +22,6 @@ import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IFileArti
 import org.eclipse.equinox.internal.provisional.p2.engine.*;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.publisher.PublisherInfo;
 import org.eclipse.equinox.p2.publisher.eclipse.BundlesAction;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 import org.eclipse.equinox.spi.p2.publisher.PublisherHelper;
@@ -55,8 +54,7 @@ public class InstallBundleActionTest extends AbstractProvisioningTest {
 		BundleDescription bundleDescription = BundlesAction.createBundleDescription(osgiTarget);
 		IArtifactKey key = BundlesAction.createBundleArtifactKey(bundleDescription.getSymbolicName(), bundleDescription.getVersion().toString());
 		IArtifactDescriptor descriptor = PublisherHelper.createArtifactDescriptor(key, osgiTarget);
-		Map manifest = (Map) bundleDescription.getUserObject();
-		IInstallableUnit iu = BundlesAction.createBundleIU(bundleDescription, manifest, osgiTarget.isDirectory(), key, new PublisherInfo());
+		IInstallableUnit iu = createBundleIU(bundleDescription, osgiTarget.isDirectory(), key);
 		bundlePool.addDescriptor(descriptor);
 
 		Map parameters = new HashMap();
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/InstallFeatureActionTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/InstallFeatureActionTest.java
index eed70d9..5d08508 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/InstallFeatureActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/InstallFeatureActionTest.java
@@ -20,6 +20,7 @@ import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
 import org.eclipse.equinox.internal.provisional.p2.engine.InstallableUnitOperand;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.publisher.PublisherInfo;
 import org.eclipse.equinox.p2.publisher.eclipse.Feature;
 import org.eclipse.equinox.p2.publisher.eclipse.FeaturesAction;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
@@ -55,7 +56,7 @@ public class InstallFeatureActionTest extends AbstractProvisioningTest {
 		IArtifactKey key = FeaturesAction.createFeatureArtifactKey(feature.getId(), feature.getVersion());
 		IArtifactDescriptor descriptor = PublisherHelper.createArtifactDescriptor(key, featureTarget);
 		((ArtifactDescriptor) descriptor).setRepositoryProperty("artifact.folder", Boolean.TRUE.toString());
-		IInstallableUnit iu = FeaturesAction.createFeatureJarIU(feature, null, null);
+		IInstallableUnit iu = FeaturesAction.createFeatureJarIU(feature, null, new PublisherInfo());
 
 		bundlePool.addDescriptor(descriptor);
 
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/MarkStartedActionTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/MarkStartedActionTest.java
index 7a75439..91cf3ba 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/MarkStartedActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/MarkStartedActionTest.java
@@ -22,7 +22,6 @@ import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IFileArti
 import org.eclipse.equinox.internal.provisional.p2.engine.*;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.publisher.PublisherInfo;
 import org.eclipse.equinox.p2.publisher.eclipse.BundlesAction;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 import org.eclipse.equinox.spi.p2.publisher.PublisherHelper;
@@ -55,8 +54,7 @@ public class MarkStartedActionTest extends AbstractProvisioningTest {
 		BundleDescription bundleDescription = BundlesAction.createBundleDescription(osgiTarget);
 		IArtifactKey key = BundlesAction.createBundleArtifactKey(bundleDescription.getSymbolicName(), bundleDescription.getVersion().toString());
 		IArtifactDescriptor descriptor = PublisherHelper.createArtifactDescriptor(key, osgiTarget);
-		Map manifest = (Map) bundleDescription.getUserObject();
-		IInstallableUnit iu = BundlesAction.createBundleIU(bundleDescription, manifest, osgiTarget.isDirectory(), key, new PublisherInfo());
+		IInstallableUnit iu = createBundleIU(bundleDescription, osgiTarget.isDirectory(), key);
 		bundlePool.addDescriptor(descriptor);
 
 		Map parameters = new HashMap();
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/RemoveSourceBundleActionTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/RemoveSourceBundleActionTest.java
index 5bf3556..8fb4f1b 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/RemoveSourceBundleActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/RemoveSourceBundleActionTest.java
@@ -20,7 +20,6 @@ import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IFileArti
 import org.eclipse.equinox.internal.provisional.p2.engine.*;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.publisher.PublisherInfo;
 import org.eclipse.equinox.p2.publisher.eclipse.BundlesAction;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 import org.eclipse.equinox.spi.p2.publisher.PublisherHelper;
@@ -53,8 +52,7 @@ public class RemoveSourceBundleActionTest extends AbstractProvisioningTest {
 		BundleDescription bundleDescription = BundlesAction.createBundleDescription(osgiTarget);
 		IArtifactKey key = BundlesAction.createBundleArtifactKey(bundleDescription.getSymbolicName(), bundleDescription.getVersion().toString());
 		IArtifactDescriptor descriptor = PublisherHelper.createArtifactDescriptor(key, osgiTarget);
-		Map manifest = (Map) bundleDescription.getUserObject();
-		IInstallableUnit iu = BundlesAction.createBundleIU(bundleDescription, manifest, osgiTarget.isDirectory(), key, new PublisherInfo());
+		IInstallableUnit iu = createBundleIU(bundleDescription, osgiTarget.isDirectory(), key);
 		bundlePool.addDescriptor(descriptor);
 
 		Map parameters = new HashMap();
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/SetStartLevelActionTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/SetStartLevelActionTest.java
index 98a7bbf..e34957d 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/SetStartLevelActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/SetStartLevelActionTest.java
@@ -22,7 +22,6 @@ import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IFileArti
 import org.eclipse.equinox.internal.provisional.p2.engine.*;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.publisher.PublisherInfo;
 import org.eclipse.equinox.p2.publisher.eclipse.BundlesAction;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 import org.eclipse.equinox.spi.p2.publisher.PublisherHelper;
@@ -55,8 +54,7 @@ public class SetStartLevelActionTest extends AbstractProvisioningTest {
 		BundleDescription bundleDescription = BundlesAction.createBundleDescription(osgiTarget);
 		IArtifactKey key = BundlesAction.createBundleArtifactKey(bundleDescription.getSymbolicName(), bundleDescription.getVersion().toString());
 		IArtifactDescriptor descriptor = PublisherHelper.createArtifactDescriptor(key, osgiTarget);
-		Map manifest = (Map) bundleDescription.getUserObject();
-		IInstallableUnit iu = BundlesAction.createBundleIU(bundleDescription, manifest, osgiTarget.isDirectory(), key, new PublisherInfo());
+		IInstallableUnit iu = createBundleIU(bundleDescription, osgiTarget.isDirectory(), key);
 		bundlePool.addDescriptor(descriptor);
 
 		Map parameters = new HashMap();
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/UninstallBundleActionTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/UninstallBundleActionTest.java
index d8030c2..13cff53 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/UninstallBundleActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/UninstallBundleActionTest.java
@@ -22,7 +22,6 @@ import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IFileArti
 import org.eclipse.equinox.internal.provisional.p2.engine.*;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.publisher.PublisherInfo;
 import org.eclipse.equinox.p2.publisher.eclipse.BundlesAction;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 import org.eclipse.equinox.spi.p2.publisher.PublisherHelper;
@@ -55,8 +54,7 @@ public class UninstallBundleActionTest extends AbstractProvisioningTest {
 		BundleDescription bundleDescription = BundlesAction.createBundleDescription(osgiTarget);
 		IArtifactKey key = BundlesAction.createBundleArtifactKey(bundleDescription.getSymbolicName(), bundleDescription.getVersion().toString());
 		IArtifactDescriptor descriptor = PublisherHelper.createArtifactDescriptor(key, osgiTarget);
-		Map manifest = (Map) bundleDescription.getUserObject();
-		IInstallableUnit iu = BundlesAction.createBundleIU(bundleDescription, manifest, osgiTarget.isDirectory(), key, new PublisherInfo());
+		IInstallableUnit iu = createBundleIU(bundleDescription, osgiTarget.isDirectory(), key);
 		bundlePool.addDescriptor(descriptor);
 
 		Map parameters = new HashMap();
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/UninstallFeatureActionTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/UninstallFeatureActionTest.java
index b4c810a..c752497 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/UninstallFeatureActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/UninstallFeatureActionTest.java
@@ -21,6 +21,7 @@ import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
 import org.eclipse.equinox.internal.provisional.p2.engine.InstallableUnitOperand;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.publisher.PublisherInfo;
 import org.eclipse.equinox.p2.publisher.eclipse.Feature;
 import org.eclipse.equinox.p2.publisher.eclipse.FeaturesAction;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
@@ -60,7 +61,7 @@ public class UninstallFeatureActionTest extends AbstractProvisioningTest {
 		IArtifactKey key = FeaturesAction.createFeatureArtifactKey(feature.getId(), feature.getVersion());
 		IArtifactDescriptor descriptor = PublisherHelper.createArtifactDescriptor(key, featureTarget);
 		((ArtifactDescriptor) descriptor).setRepositoryProperty("artifact.folder", Boolean.TRUE.toString());
-		IInstallableUnit iu = FeaturesAction.createFeatureJarIU(feature, null, null);
+		IInstallableUnit iu = FeaturesAction.createFeatureJarIU(feature, null, new PublisherInfo());
 
 		bundlePool.addDescriptor(descriptor);
 
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/BundlesActionTest/test1/META-INF/p2.inf b/bundles/org.eclipse.equinox.p2.tests/testData/BundlesActionTest/test1/META-INF/p2.inf
new file mode 100644
index 0000000..df6d10e
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests/testData/BundlesActionTest/test1/META-INF/p2.inf
@@ -0,0 +1,3 @@
+instructions.configure=\
+  addRepository(type:0,location:http${#58}//download.eclipse.org/releases/ganymede);\
+  addRepository(type:1,location:http${#58}//download.eclipse.org/releases/ganymede);
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/FeaturesActionTest/foo/p2.inf b/bundles/org.eclipse.equinox.p2.tests/testData/FeaturesActionTest/foo/p2.inf
new file mode 100644
index 0000000..740fb63
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests/testData/FeaturesActionTest/foo/p2.inf
@@ -0,0 +1,3 @@
+instructions.install = \
+    ln(targetDir:@artifact,linkTarget:foo/lib.1.so,linkName:lib.so);\
+    chmod(targetDir:@artifact,targetFile:lib/lib.so,permissions:755);
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/mirror/mirrorSourceRepo1 with space/artifacts.xml b/bundles/org.eclipse.equinox.p2.tests/testData/mirror/mirrorSourceRepo1 with space/artifacts.xml
index d5112bd..6130fe4 100644
--- a/bundles/org.eclipse.equinox.p2.tests/testData/mirror/mirrorSourceRepo1 with space/artifacts.xml	
+++ b/bundles/org.eclipse.equinox.p2.tests/testData/mirror/mirrorSourceRepo1 with space/artifacts.xml	
@@ -1,9 +1,10 @@
 <?xml version='1.0' encoding='UTF-8'?>
 <?artifactRepository class='org.eclipse.equinox.internal.p2.artifact.repository.simple.SimpleArtifactRepository' version='1.0.0'?>
-<repository name='file:/C:/Program Files/eclipse/workspace/site/ - artifacts' type='org.eclipse.equinox.p2.artifact.repository.simpleRepository' version='1'>
-  <properties size='2'>
+<repository name='file:/C:/Program Files/eclipse/workspace/site/ - artifacts' type='org.eclipse.equinox.p2.artifact.repository.simpleRepository' version='1.0.0'>
+  <properties size='3'>
     <property name='p2.compressed' value='false'/>
-    <property name='p2.timestamp' value='1221488783484'/>
+    <property name='p2.timestamp' value='1227546187421'/>
+    <property name='p2.system' value='true'/>
   </properties>
   <mappings size='3'>
     <rule filter='(&amp; (classifier=osgi.bundle))' output='${repoUrl}/plugins/${id}_${version}.jar'/>
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/mirror/mirrorSourceRepo1 with space/content.xml b/bundles/org.eclipse.equinox.p2.tests/testData/mirror/mirrorSourceRepo1 with space/content.xml
index 303f31b..008a01f 100644
--- a/bundles/org.eclipse.equinox.p2.tests/testData/mirror/mirrorSourceRepo1 with space/content.xml	
+++ b/bundles/org.eclipse.equinox.p2.tests/testData/mirror/mirrorSourceRepo1 with space/content.xml	
@@ -1,11 +1,211 @@
 <?xml version='1.0' encoding='UTF-8'?>
 <?metadataRepository class='org.eclipse.equinox.internal.p2.metadata.repository.LocalMetadataRepository' version='1.0.0'?>
-<repository name='file:/C:/Program Files/eclipse/workspace/site/ - metadata' type='org.eclipse.equinox.internal.p2.metadata.repository.LocalMetadataRepository' version='1'>
-  <properties size='2'>
+<repository name='file:/C:/Program Files/eclipse/workspace/site/ - metadata' type='org.eclipse.equinox.internal.p2.metadata.repository.LocalMetadataRepository' version='1.0.0'>
+  <properties size='3'>
     <property name='p2.compressed' value='false'/>
-    <property name='p2.timestamp' value='1221488783484'/>
+    <property name='p2.timestamp' value='1227546205671'/>
+    <property name='p2.system' value='true'/>
   </properties>
   <units size='8'>
+    <unit id='tooling.source.default' version='1.0.0' singleton='false'>
+      <hostRequirements size='1'>
+        <required namespace='org.eclipse.equinox.p2.eclipse.type' name='source' range='0.0.0' optional='true' multiple='true' greedy='false'/>
+      </hostRequirements>
+      <properties size='1'>
+        <property name='org.eclipse.equinox.p2.type.fragment' value='true'/>
+      </properties>
+      <provides size='2'>
+        <provided namespace='org.eclipse.equinox.p2.iu' name='tooling.source.default' version='1.0.0'/>
+        <provided namespace='org.eclipse.equinox.p2.flavor' name='tooling' version='1.0.0'/>
+      </provides>
+      <requires size='1'>
+        <required namespace='org.eclipse.equinox.p2.eclipse.type' name='source' range='0.0.0' optional='true' multiple='true' greedy='false'/>
+      </requires>
+      <touchpoint id='null' version='0.0.0'/>
+      <touchpointData size='1'>
+        <instructions size='2'>
+          <instruction key='uninstall'>
+            removeSourceBundle(bundle:${artifact})
+          </instruction>
+          <instruction key='install'>
+            addSourceBundle(bundle:${artifact})
+          </instruction>
+        </instructions>
+      </touchpointData>
+    </unit>
+    <unit id='config.a.jre' version='1.6.0' singleton='false'>
+      <hostRequirements size='1'>
+        <required namespace='org.eclipse.equinox.p2.iu' name='a.jre' range='1.6.0'/>
+      </hostRequirements>
+      <properties size='1'>
+        <property name='org.eclipse.equinox.p2.type.fragment' value='true'/>
+      </properties>
+      <provides size='1'>
+        <provided namespace='org.eclipse.equinox.p2.iu' name='config.a.jre' version='1.6.0'/>
+      </provides>
+      <requires size='1'>
+        <required namespace='org.eclipse.equinox.p2.iu' name='a.jre' range='1.6.0'/>
+      </requires>
+      <touchpoint id='org.eclipse.equinox.p2.native' version='1.0.0'/>
+      <touchpointData size='1'>
+        <instructions size='1'>
+          <instruction key='install'>
+
+          </instruction>
+        </instructions>
+      </touchpointData>
+    </unit>
+    <unit id='tooling.osgi.bundle.default' version='1.0.0' singleton='false'>
+      <hostRequirements size='1'>
+        <required namespace='org.eclipse.equinox.p2.eclipse.type' name='bundle' range='0.0.0' multiple='true' greedy='false'/>
+      </hostRequirements>
+      <properties size='1'>
+        <property name='org.eclipse.equinox.p2.type.fragment' value='true'/>
+      </properties>
+      <provides size='2'>
+        <provided namespace='org.eclipse.equinox.p2.iu' name='tooling.osgi.bundle.default' version='1.0.0'/>
+        <provided namespace='org.eclipse.equinox.p2.flavor' name='tooling' version='1.0.0'/>
+      </provides>
+      <requires size='1'>
+        <required namespace='org.eclipse.equinox.p2.eclipse.type' name='bundle' range='0.0.0' multiple='true' greedy='false'/>
+      </requires>
+      <touchpoint id='null' version='0.0.0'/>
+      <touchpointData size='1'>
+        <instructions size='4'>
+          <instruction key='configure'>
+            setStartLevel(startLevel:4);
+          </instruction>
+          <instruction key='unconfigure'>
+
+          </instruction>
+          <instruction key='uninstall'>
+            uninstallBundle(bundle:${artifact})
+          </instruction>
+          <instruction key='install'>
+            installBundle(bundle:${artifact})
+          </instruction>
+        </instructions>
+      </touchpointData>
+    </unit>
+    <unit id='tooling.org.eclipse.update.feature.default' version='1.0.0' singleton='false'>
+      <hostRequirements size='1'>
+        <required namespace='org.eclipse.equinox.p2.eclipse.type' name='feature' range='0.0.0' optional='true' multiple='true' greedy='false'/>
+      </hostRequirements>
+      <properties size='1'>
+        <property name='org.eclipse.equinox.p2.type.fragment' value='true'/>
+      </properties>
+      <provides size='2'>
+        <provided namespace='org.eclipse.equinox.p2.iu' name='tooling.org.eclipse.update.feature.default' version='1.0.0'/>
+        <provided namespace='org.eclipse.equinox.p2.flavor' name='tooling' version='1.0.0'/>
+      </provides>
+      <requires size='1'>
+        <required namespace='org.eclipse.equinox.p2.eclipse.type' name='feature' range='0.0.0' optional='true' multiple='true' greedy='false'/>
+      </requires>
+      <filter>
+        (org.eclipse.update.install.features=true)
+      </filter>
+      <touchpoint id='null' version='0.0.0'/>
+      <touchpointData size='1'>
+        <instructions size='2'>
+          <instruction key='uninstall'>
+            uninstallFeature(feature:${artifact},featureId:default,featureVersion:default)
+          </instruction>
+          <instruction key='install'>
+            installFeature(feature:${artifact},featureId:default,featureVersion:default)
+          </instruction>
+        </instructions>
+      </touchpointData>
+    </unit>
+    <unit id='helloworldfeature.feature.jar' version='1.0.0'>
+      <update id='helloworldfeature.feature.jar' range='[0.0.0,1.0.0)' severity='0'/>
+      <properties size='3'>
+        <property name='org.eclipse.equinox.p2.name' value='Helloworldfeature Feature'/>
+        <property name='org.eclipse.equinox.p2.description' value='[Enter Feature Description here.]'/>
+        <property name='org.eclipse.equinox.p2.description.url' value='http://www.example.com/description'/>
+      </properties>
+      <provides size='3'>
+        <provided namespace='org.eclipse.equinox.p2.iu' name='helloworldfeature.feature.jar' version='1.0.0'/>
+        <provided namespace='org.eclipse.equinox.p2.eclipse.type' name='feature' version='1.0.0'/>
+        <provided namespace='org.eclipse.update.feature' name='helloworldfeature' version='1.0.0'/>
+      </provides>
+      <filter>
+        (org.eclipse.update.install.features=true)
+      </filter>
+      <artifacts size='1'>
+        <artifact classifier='org.eclipse.update.feature' id='helloworldfeature' version='1.0.0'/>
+      </artifacts>
+      <touchpoint id='org.eclipse.equinox.p2.osgi' version='1.0.0'/>
+      <touchpointData size='1'>
+        <instructions size='1'>
+          <instruction key='zipped'>
+            true
+          </instruction>
+        </instructions>
+      </touchpointData>
+      <licenses size='1'>
+        <license uri='http://www.example.com/license'>
+          [Enter License Description here.]
+        </license>
+      </licenses>
+      <copyright uri='http://www.example.com/copyright'>
+        [Enter Copyright Description here.]
+      </copyright>
+    </unit>
+    <unit id='helloworldfeature.feature.group' version='1.0.0' singleton='false'>
+      <update id='helloworldfeature.feature.group' range='[0.0.0,1.0.0)' severity='0'/>
+      <properties size='4'>
+        <property name='org.eclipse.equinox.p2.name' value='Helloworldfeature Feature'/>
+        <property name='org.eclipse.equinox.p2.description' value='[Enter Feature Description here.]'/>
+        <property name='org.eclipse.equinox.p2.description.url' value='http://www.example.com/description'/>
+        <property name='org.eclipse.equinox.p2.type.group' value='true'/>
+      </properties>
+      <provides size='1'>
+        <provided namespace='org.eclipse.equinox.p2.iu' name='helloworldfeature.feature.group' version='1.0.0'/>
+      </provides>
+      <requires size='2'>
+        <required namespace='org.eclipse.equinox.p2.iu' name='helloworld' range='[1.0.0,1.0.0]'/>
+        <required namespace='org.eclipse.equinox.p2.iu' name='helloworldfeature.feature.jar' range='[1.0.0,1.0.0]'>
+          <filter>
+            (org.eclipse.update.install.features=true)
+          </filter>
+        </required>
+      </requires>
+      <touchpoint id='null' version='0.0.0'/>
+      <licenses size='1'>
+        <license uri='http://www.example.com/license'>
+          [Enter License Description here.]
+        </license>
+      </licenses>
+      <copyright uri='http://www.example.com/copyright'>
+        [Enter Copyright Description here.]
+      </copyright>
+    </unit>
+    <unit id='helloworld' version='1.0.0'>
+      <update id='helloworld' range='[0.0.0,1.0.0)' severity='0'/>
+      <properties size='1'>
+        <property name='org.eclipse.equinox.p2.name' value='Helloworld Plug-in'/>
+      </properties>
+      <provides size='3'>
+        <provided namespace='org.eclipse.equinox.p2.iu' name='helloworld' version='1.0.0'/>
+        <provided namespace='osgi.bundle' name='helloworld' version='1.0.0'/>
+        <provided namespace='org.eclipse.equinox.p2.eclipse.type' name='bundle' version='1.0.0'/>
+      </provides>
+      <requires size='2'>
+        <required namespace='osgi.bundle' name='org.eclipse.ui' range='0.0.0'/>
+        <required namespace='osgi.bundle' name='org.eclipse.core.runtime' range='0.0.0'/>
+      </requires>
+      <artifacts size='1'>
+        <artifact classifier='osgi.bundle' id='helloworld' version='1.0.0'/>
+      </artifacts>
+      <touchpoint id='org.eclipse.equinox.p2.osgi' version='1.0.0'/>
+      <touchpointData size='1'>
+        <instructions size='1'>
+          <instruction key='manifest'>
+            Bundle-Activator: helloworld.Activator&#xA;Require-Bundle: org.eclipse.ui,org.eclipse.core.runtime&#xA;Manifest-Version: 1.0&#xA;Bundle-RequiredExecutionEnvironment: J2SE-1.5&#xA;Bundle-Name: Helloworld Plug-in&#xA;Bundle-Version: 1.0.0&#xA;Bundle-ManifestVersion: 2&#xA;Bundle-ActivationPolicy: lazy&#xA;Bundle-SymbolicName: helloworld; singleton:=true
+          </instruction>
+        </instructions>
+      </touchpointData>
+    </unit>
     <unit id='a.jre' version='1.6.0' singleton='false'>
       <provides size='117'>
         <provided namespace='org.eclipse.equinox.p2.iu' name='a.jre' version='1.6.0'/>
@@ -128,204 +328,5 @@
       </provides>
       <touchpoint id='org.eclipse.equinox.p2.native' version='1.0.0'/>
     </unit>
-    <unit id='config.a.jre' version='1.6.0' singleton='false'>
-      <hostRequirements size='1'>
-        <required namespace='org.eclipse.equinox.p2.iu' name='a.jre' range='1.6.0'/>
-      </hostRequirements>
-      <properties size='1'>
-        <property name='org.eclipse.equinox.p2.type.fragment' value='true'/>
-      </properties>
-      <provides size='1'>
-        <provided namespace='org.eclipse.equinox.p2.iu' name='config.a.jre' version='1.6.0'/>
-      </provides>
-      <requires size='1'>
-        <required namespace='org.eclipse.equinox.p2.iu' name='a.jre' range='1.6.0'/>
-      </requires>
-      <touchpoint id='org.eclipse.equinox.p2.native' version='1.0.0'/>
-      <touchpointData size='1'>
-        <instructions size='1'>
-          <instruction key='install'>
-
-          </instruction>
-        </instructions>
-      </touchpointData>
-    </unit>
-    <unit id='helloworldfeature.feature.jar' version='1.0.0'>
-      <update id='helloworldfeature.feature.jar' range='[0.0.0,1.0.0)' severity='0'/>
-      <properties size='3'>
-        <property name='org.eclipse.equinox.p2.name' value='Helloworldfeature Feature'/>
-        <property name='org.eclipse.equinox.p2.description' value='[Enter Feature Description here.]'/>
-        <property name='org.eclipse.equinox.p2.description.url' value='http://www.example.com/description'/>
-      </properties>
-      <provides size='3'>
-        <provided namespace='org.eclipse.equinox.p2.iu' name='helloworldfeature.feature.jar' version='1.0.0'/>
-        <provided namespace='org.eclipse.equinox.p2.eclipse.type' name='feature' version='1.0.0'/>
-        <provided namespace='org.eclipse.update.feature' name='helloworldfeature' version='1.0.0'/>
-      </provides>
-      <filter>
-        (org.eclipse.update.install.features=true)
-      </filter>
-      <artifacts size='1'>
-        <artifact classifier='org.eclipse.update.feature' id='helloworldfeature' version='1.0.0'/>
-      </artifacts>
-      <touchpoint id='org.eclipse.equinox.p2.osgi' version='1.0.0'/>
-      <touchpointData size='1'>
-        <instructions size='1'>
-          <instruction key='zipped'>
-            true
-          </instruction>
-        </instructions>
-      </touchpointData>
-      <licenses size='1'>
-        <license url='http://www.example.com/license'>
-          [Enter License Description here.]
-        </license>
-      </licenses>
-      <copyright url='http://www.example.com/copyright'>
-        [Enter Copyright Description here.]
-      </copyright>
-    </unit>
-    <unit id='tooling.org.eclipse.update.feature.default' version='1.0.0' singleton='false'>
-      <hostRequirements size='1'>
-        <required namespace='org.eclipse.equinox.p2.eclipse.type' name='feature' range='0.0.0' optional='true' multiple='true' greedy='false'/>
-      </hostRequirements>
-      <properties size='1'>
-        <property name='org.eclipse.equinox.p2.type.fragment' value='true'/>
-      </properties>
-      <provides size='2'>
-        <provided namespace='org.eclipse.equinox.p2.iu' name='tooling.org.eclipse.update.feature.default' version='1.0.0'/>
-        <provided namespace='org.eclipse.equinox.p2.flavor' name='tooling' version='1.0.0'/>
-      </provides>
-      <requires size='1'>
-        <required namespace='org.eclipse.equinox.p2.eclipse.type' name='feature' range='0.0.0' optional='true' multiple='true' greedy='false'/>
-      </requires>
-      <filter>
-        (org.eclipse.update.install.features=true)
-      </filter>
-      <touchpoint id='null' version='0.0.0'/>
-      <touchpointData size='1'>
-        <instructions size='2'>
-          <instruction key='uninstall'>
-            uninstallFeature(feature:${artifact},featureId:default,featureVersion:default)
-          </instruction>
-          <instruction key='install'>
-            installFeature(feature:${artifact},featureId:default,featureVersion:default)
-          </instruction>
-        </instructions>
-      </touchpointData>
-    </unit>
-    <unit id='helloworldfeature.feature.group' version='1.0.0' singleton='false'>
-      <update id='helloworldfeature.feature.group' range='[0.0.0,1.0.0)' severity='0'/>
-      <properties size='4'>
-        <property name='org.eclipse.equinox.p2.name' value='Helloworldfeature Feature'/>
-        <property name='org.eclipse.equinox.p2.description' value='[Enter Feature Description here.]'/>
-        <property name='org.eclipse.equinox.p2.description.url' value='http://www.example.com/description'/>
-        <property name='org.eclipse.equinox.p2.type.group' value='true'/>
-      </properties>
-      <provides size='1'>
-        <provided namespace='org.eclipse.equinox.p2.iu' name='helloworldfeature.feature.group' version='1.0.0'/>
-      </provides>
-      <requires size='2'>
-        <required namespace='org.eclipse.equinox.p2.iu' name='helloworld' range='[1.0.0,1.0.0]'/>
-        <required namespace='org.eclipse.equinox.p2.iu' name='helloworldfeature.feature.jar' range='[1.0.0,1.0.0]'>
-          <filter>
-            (org.eclipse.update.install.features=true)
-          </filter>
-        </required>
-      </requires>
-      <touchpoint id='null' version='0.0.0'/>
-      <licenses size='1'>
-        <license url='http://www.example.com/license'>
-          [Enter License Description here.]
-        </license>
-      </licenses>
-      <copyright url='http://www.example.com/copyright'>
-        [Enter Copyright Description here.]
-      </copyright>
-    </unit>
-    <unit id='tooling.osgi.bundle.default' version='1.0.0' singleton='false'>
-      <hostRequirements size='1'>
-        <required namespace='org.eclipse.equinox.p2.eclipse.type' name='bundle' range='0.0.0' multiple='true' greedy='false'/>
-      </hostRequirements>
-      <properties size='1'>
-        <property name='org.eclipse.equinox.p2.type.fragment' value='true'/>
-      </properties>
-      <provides size='2'>
-        <provided namespace='org.eclipse.equinox.p2.iu' name='tooling.osgi.bundle.default' version='1.0.0'/>
-        <provided namespace='org.eclipse.equinox.p2.flavor' name='tooling' version='1.0.0'/>
-      </provides>
-      <requires size='1'>
-        <required namespace='org.eclipse.equinox.p2.eclipse.type' name='bundle' range='0.0.0' multiple='true' greedy='false'/>
-      </requires>
-      <touchpoint id='null' version='0.0.0'/>
-      <touchpointData size='1'>
-        <instructions size='4'>
-          <instruction key='configure'>
-            setStartLevel(startLevel:4);
-          </instruction>
-          <instruction key='unconfigure'>
-
-          </instruction>
-          <instruction key='uninstall'>
-            uninstallBundle(bundle:${artifact})
-          </instruction>
-          <instruction key='install'>
-            installBundle(bundle:${artifact})
-          </instruction>
-        </instructions>
-      </touchpointData>
-    </unit>
-    <unit id='tooling.source.default' version='1.0.0' singleton='false'>
-      <hostRequirements size='1'>
-        <required namespace='org.eclipse.equinox.p2.eclipse.type' name='source' range='0.0.0' optional='true' multiple='true' greedy='false'/>
-      </hostRequirements>
-      <properties size='1'>
-        <property name='org.eclipse.equinox.p2.type.fragment' value='true'/>
-      </properties>
-      <provides size='2'>
-        <provided namespace='org.eclipse.equinox.p2.iu' name='tooling.source.default' version='1.0.0'/>
-        <provided namespace='org.eclipse.equinox.p2.flavor' name='tooling' version='1.0.0'/>
-      </provides>
-      <requires size='1'>
-        <required namespace='org.eclipse.equinox.p2.eclipse.type' name='source' range='0.0.0' optional='true' multiple='true' greedy='false'/>
-      </requires>
-      <touchpoint id='null' version='0.0.0'/>
-      <touchpointData size='1'>
-        <instructions size='2'>
-          <instruction key='uninstall'>
-            removeSourceBundle(bundle:${artifact})
-          </instruction>
-          <instruction key='install'>
-            addSourceBundle(bundle:${artifact})
-          </instruction>
-        </instructions>
-      </touchpointData>
-    </unit>
-    <unit id='helloworld' version='1.0.0'>
-      <update id='helloworld' range='[0.0.0,1.0.0)' severity='0'/>
-      <properties size='1'>
-        <property name='org.eclipse.equinox.p2.name' value='Helloworld Plug-in'/>
-      </properties>
-      <provides size='3'>
-        <provided namespace='org.eclipse.equinox.p2.iu' name='helloworld' version='1.0.0'/>
-        <provided namespace='osgi.bundle' name='helloworld' version='1.0.0'/>
-        <provided namespace='org.eclipse.equinox.p2.eclipse.type' name='bundle' version='1.0.0'/>
-      </provides>
-      <requires size='2'>
-        <required namespace='osgi.bundle' name='org.eclipse.ui' range='0.0.0'/>
-        <required namespace='osgi.bundle' name='org.eclipse.core.runtime' range='0.0.0'/>
-      </requires>
-      <artifacts size='1'>
-        <artifact classifier='osgi.bundle' id='helloworld' version='1.0.0'/>
-      </artifacts>
-      <touchpoint id='org.eclipse.equinox.p2.osgi' version='1.0.0'/>
-      <touchpointData size='1'>
-        <instructions size='1'>
-          <instruction key='manifest'>
-            Bundle-Activator: helloworld.Activator&#xA;Require-Bundle: org.eclipse.ui,org.eclipse.core.runtime&#xA;Manifest-Version: 1.0&#xA;Bundle-RequiredExecutionEnvironment: J2SE-1.5&#xA;Bundle-Name: Helloworld Plug-in&#xA;Bundle-Version: 1.0.0&#xA;Bundle-ManifestVersion: 2&#xA;Bundle-ActivationPolicy: lazy&#xA;Bundle-SymbolicName: helloworld; singleton:=true&#xA;
-          </instruction>
-        </instructions>
-      </touchpointData>
-    </unit>
   </units>
 </repository>
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/mirror/mirrorSourceRepo2/artifacts.xml b/bundles/org.eclipse.equinox.p2.tests/testData/mirror/mirrorSourceRepo2/artifacts.xml
index 7b25e8d..4aefd93 100644
--- a/bundles/org.eclipse.equinox.p2.tests/testData/mirror/mirrorSourceRepo2/artifacts.xml
+++ b/bundles/org.eclipse.equinox.p2.tests/testData/mirror/mirrorSourceRepo2/artifacts.xml
@@ -1,9 +1,10 @@
 <?xml version='1.0' encoding='UTF-8'?>
 <?artifactRepository class='org.eclipse.equinox.internal.p2.artifact.repository.simple.SimpleArtifactRepository' version='1.0.0'?>
-<repository name='file:/C:/Program Files/eclipse/workspace/mirrorSourceRep2/ - artifacts' type='org.eclipse.equinox.p2.artifact.repository.simpleRepository' version='1'>
-  <properties size='2'>
+<repository name='file:/C:/Program Files/eclipse/workspace/mirrorSourceRep2/ - artifacts' type='org.eclipse.equinox.p2.artifact.repository.simpleRepository' version='1.0.0'>
+  <properties size='3'>
     <property name='p2.compressed' value='false'/>
-    <property name='p2.timestamp' value='1221682759468'/>
+    <property name='p2.timestamp' value='1227546187656'/>
+    <property name='p2.system' value='true'/>
   </properties>
   <mappings size='3'>
     <rule filter='(&amp; (classifier=osgi.bundle))' output='${repoUrl}/plugins/${id}_${version}.jar'/>
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/mirror/mirrorSourceRepo2/content.xml b/bundles/org.eclipse.equinox.p2.tests/testData/mirror/mirrorSourceRepo2/content.xml
index 79b0de3..72e5419 100644
--- a/bundles/org.eclipse.equinox.p2.tests/testData/mirror/mirrorSourceRepo2/content.xml
+++ b/bundles/org.eclipse.equinox.p2.tests/testData/mirror/mirrorSourceRepo2/content.xml
@@ -1,11 +1,186 @@
 <?xml version='1.0' encoding='UTF-8'?>
 <?metadataRepository class='org.eclipse.equinox.internal.p2.metadata.repository.LocalMetadataRepository' version='1.0.0'?>
-<repository name='file:/C:/Program Files/eclipse/workspace/mirrorSourceRep2/ - metadata' type='org.eclipse.equinox.internal.p2.metadata.repository.LocalMetadataRepository' version='1'>
-  <properties size='2'>
+<repository name='file:/C:/Program Files/eclipse/workspace/mirrorSourceRep2/ - metadata' type='org.eclipse.equinox.internal.p2.metadata.repository.LocalMetadataRepository' version='1.0.0'>
+  <properties size='3'>
     <property name='p2.compressed' value='false'/>
-    <property name='p2.timestamp' value='1221682759468'/>
+    <property name='p2.timestamp' value='1227546205828'/>
+    <property name='p2.system' value='true'/>
   </properties>
   <units size='8'>
+    <unit id='tooling.source.default' version='1.0.0' singleton='false'>
+      <hostRequirements size='1'>
+        <required namespace='org.eclipse.equinox.p2.eclipse.type' name='source' range='0.0.0' optional='true' multiple='true' greedy='false'/>
+      </hostRequirements>
+      <properties size='1'>
+        <property name='org.eclipse.equinox.p2.type.fragment' value='true'/>
+      </properties>
+      <provides size='2'>
+        <provided namespace='org.eclipse.equinox.p2.iu' name='tooling.source.default' version='1.0.0'/>
+        <provided namespace='org.eclipse.equinox.p2.flavor' name='tooling' version='1.0.0'/>
+      </provides>
+      <requires size='1'>
+        <required namespace='org.eclipse.equinox.p2.eclipse.type' name='source' range='0.0.0' optional='true' multiple='true' greedy='false'/>
+      </requires>
+      <touchpoint id='null' version='0.0.0'/>
+      <touchpointData size='1'>
+        <instructions size='2'>
+          <instruction key='uninstall'>
+            removeSourceBundle(bundle:${artifact})
+          </instruction>
+          <instruction key='install'>
+            addSourceBundle(bundle:${artifact})
+          </instruction>
+        </instructions>
+      </touchpointData>
+    </unit>
+    <unit id='config.a.jre' version='1.6.0' singleton='false'>
+      <hostRequirements size='1'>
+        <required namespace='org.eclipse.equinox.p2.iu' name='a.jre' range='1.6.0'/>
+      </hostRequirements>
+      <properties size='1'>
+        <property name='org.eclipse.equinox.p2.type.fragment' value='true'/>
+      </properties>
+      <provides size='1'>
+        <provided namespace='org.eclipse.equinox.p2.iu' name='config.a.jre' version='1.6.0'/>
+      </provides>
+      <requires size='1'>
+        <required namespace='org.eclipse.equinox.p2.iu' name='a.jre' range='1.6.0'/>
+      </requires>
+      <touchpoint id='org.eclipse.equinox.p2.native' version='1.0.0'/>
+      <touchpointData size='1'>
+        <instructions size='1'>
+          <instruction key='install'>
+
+          </instruction>
+        </instructions>
+      </touchpointData>
+    </unit>
+    <unit id='anotherplugin' version='1.0.0'>
+      <update id='anotherplugin' range='[0.0.0,1.0.0)' severity='0'/>
+      <properties size='1'>
+        <property name='org.eclipse.equinox.p2.name' value='Anotherplugin Plug-in'/>
+      </properties>
+      <provides size='3'>
+        <provided namespace='org.eclipse.equinox.p2.iu' name='anotherplugin' version='1.0.0'/>
+        <provided namespace='osgi.bundle' name='anotherplugin' version='1.0.0'/>
+        <provided namespace='org.eclipse.equinox.p2.eclipse.type' name='bundle' version='1.0.0'/>
+      </provides>
+      <requires size='6'>
+        <required namespace='osgi.bundle' name='org.eclipse.ui' range='0.0.0'/>
+        <required namespace='osgi.bundle' name='org.eclipse.core.runtime' range='0.0.0'/>
+        <required namespace='osgi.bundle' name='org.eclipse.jface.text' range='0.0.0'/>
+        <required namespace='osgi.bundle' name='org.eclipse.core.resources' range='0.0.0'/>
+        <required namespace='osgi.bundle' name='org.eclipse.ui.editors' range='0.0.0'/>
+        <required namespace='osgi.bundle' name='org.eclipse.ui.ide' range='0.0.0'/>
+      </requires>
+      <artifacts size='1'>
+        <artifact classifier='osgi.bundle' id='anotherplugin' version='1.0.0'/>
+      </artifacts>
+      <touchpoint id='org.eclipse.equinox.p2.osgi' version='1.0.0'/>
+      <touchpointData size='1'>
+        <instructions size='1'>
+          <instruction key='manifest'>
+            Bundle-Activator: anotherplugin.Activator&#xA;Require-Bundle: org.eclipse.ui,org.eclipse.core.runtime,org.eclipse.jface.text,org.eclipse.core.resources,org.eclipse.ui.editors,org.eclipse.ui.ide&#xA;Manifest-Version: 1.0&#xA;Bundle-RequiredExecutionEnvironment: J2SE-1.5&#xA;Bundle-Name: Anotherplugin Plug-in&#xA;Bundle-Version: 1.0.0&#xA;Bundle-ManifestVersion: 2&#xA;Bundle-ActivationPolicy: lazy&#xA;Bundle-SymbolicName: anotherplugin; singleton:=true
+          </instruction>
+        </instructions>
+      </touchpointData>
+    </unit>
+    <unit id='anotherfeature.feature.jar' version='1.0.0'>
+      <update id='anotherfeature.feature.jar' range='[0.0.0,1.0.0)' severity='0'/>
+      <properties size='3'>
+        <property name='org.eclipse.equinox.p2.name' value='Anotherfeature Feature'/>
+        <property name='org.eclipse.equinox.p2.description' value='[Enter Feature Description here.]'/>
+        <property name='org.eclipse.equinox.p2.description.url' value='http://www.example.com/description'/>
+      </properties>
+      <provides size='3'>
+        <provided namespace='org.eclipse.equinox.p2.iu' name='anotherfeature.feature.jar' version='1.0.0'/>
+        <provided namespace='org.eclipse.equinox.p2.eclipse.type' name='feature' version='1.0.0'/>
+        <provided namespace='org.eclipse.update.feature' name='anotherfeature' version='1.0.0'/>
+      </provides>
+      <filter>
+        (org.eclipse.update.install.features=true)
+      </filter>
+      <artifacts size='1'>
+        <artifact classifier='org.eclipse.update.feature' id='anotherfeature' version='1.0.0'/>
+      </artifacts>
+      <touchpoint id='org.eclipse.equinox.p2.osgi' version='1.0.0'/>
+      <touchpointData size='1'>
+        <instructions size='1'>
+          <instruction key='zipped'>
+            true
+          </instruction>
+        </instructions>
+      </touchpointData>
+      <licenses size='1'>
+        <license uri='http://www.example.com/license'>
+          [Enter License Description here.]
+        </license>
+      </licenses>
+      <copyright uri='http://www.example.com/copyright'>
+        [Enter Copyright Description here.]
+      </copyright>
+    </unit>
+    <unit id='tooling.osgi.bundle.default' version='1.0.0' singleton='false'>
+      <hostRequirements size='1'>
+        <required namespace='org.eclipse.equinox.p2.eclipse.type' name='bundle' range='0.0.0' multiple='true' greedy='false'/>
+      </hostRequirements>
+      <properties size='1'>
+        <property name='org.eclipse.equinox.p2.type.fragment' value='true'/>
+      </properties>
+      <provides size='2'>
+        <provided namespace='org.eclipse.equinox.p2.iu' name='tooling.osgi.bundle.default' version='1.0.0'/>
+        <provided namespace='org.eclipse.equinox.p2.flavor' name='tooling' version='1.0.0'/>
+      </provides>
+      <requires size='1'>
+        <required namespace='org.eclipse.equinox.p2.eclipse.type' name='bundle' range='0.0.0' multiple='true' greedy='false'/>
+      </requires>
+      <touchpoint id='null' version='0.0.0'/>
+      <touchpointData size='1'>
+        <instructions size='4'>
+          <instruction key='configure'>
+            setStartLevel(startLevel:4);
+          </instruction>
+          <instruction key='unconfigure'>
+
+          </instruction>
+          <instruction key='uninstall'>
+            uninstallBundle(bundle:${artifact})
+          </instruction>
+          <instruction key='install'>
+            installBundle(bundle:${artifact})
+          </instruction>
+        </instructions>
+      </touchpointData>
+    </unit>
+    <unit id='tooling.org.eclipse.update.feature.default' version='1.0.0' singleton='false'>
+      <hostRequirements size='1'>
+        <required namespace='org.eclipse.equinox.p2.eclipse.type' name='feature' range='0.0.0' optional='true' multiple='true' greedy='false'/>
+      </hostRequirements>
+      <properties size='1'>
+        <property name='org.eclipse.equinox.p2.type.fragment' value='true'/>
+      </properties>
+      <provides size='2'>
+        <provided namespace='org.eclipse.equinox.p2.iu' name='tooling.org.eclipse.update.feature.default' version='1.0.0'/>
+        <provided namespace='org.eclipse.equinox.p2.flavor' name='tooling' version='1.0.0'/>
+      </provides>
+      <requires size='1'>
+        <required namespace='org.eclipse.equinox.p2.eclipse.type' name='feature' range='0.0.0' optional='true' multiple='true' greedy='false'/>
+      </requires>
+      <filter>
+        (org.eclipse.update.install.features=true)
+      </filter>
+      <touchpoint id='null' version='0.0.0'/>
+      <touchpointData size='1'>
+        <instructions size='2'>
+          <instruction key='uninstall'>
+            uninstallFeature(feature:${artifact},featureId:default,featureVersion:default)
+          </instruction>
+          <instruction key='install'>
+            installFeature(feature:${artifact},featureId:default,featureVersion:default)
+          </instruction>
+        </instructions>
+      </touchpointData>
+    </unit>
     <unit id='anotherfeature.feature.group' version='1.0.0' singleton='false'>
       <update id='anotherfeature.feature.group' range='[0.0.0,1.0.0)' severity='0'/>
       <properties size='4'>
@@ -27,11 +202,11 @@
       </requires>
       <touchpoint id='null' version='0.0.0'/>
       <licenses size='1'>
-        <license url='http://www.example.com/license'>
+        <license uri='http://www.example.com/license'>
           [Enter License Description here.]
         </license>
       </licenses>
-      <copyright url='http://www.example.com/copyright'>
+      <copyright uri='http://www.example.com/copyright'>
         [Enter Copyright Description here.]
       </copyright>
     </unit>
@@ -157,179 +332,5 @@
       </provides>
       <touchpoint id='org.eclipse.equinox.p2.native' version='1.0.0'/>
     </unit>
-    <unit id='config.a.jre' version='1.6.0' singleton='false'>
-      <hostRequirements size='1'>
-        <required namespace='org.eclipse.equinox.p2.iu' name='a.jre' range='1.6.0'/>
-      </hostRequirements>
-      <properties size='1'>
-        <property name='org.eclipse.equinox.p2.type.fragment' value='true'/>
-      </properties>
-      <provides size='1'>
-        <provided namespace='org.eclipse.equinox.p2.iu' name='config.a.jre' version='1.6.0'/>
-      </provides>
-      <requires size='1'>
-        <required namespace='org.eclipse.equinox.p2.iu' name='a.jre' range='1.6.0'/>
-      </requires>
-      <touchpoint id='org.eclipse.equinox.p2.native' version='1.0.0'/>
-      <touchpointData size='1'>
-        <instructions size='1'>
-          <instruction key='install'>
-
-          </instruction>
-        </instructions>
-      </touchpointData>
-    </unit>
-    <unit id='anotherplugin' version='1.0.0'>
-      <update id='anotherplugin' range='[0.0.0,1.0.0)' severity='0'/>
-      <properties size='1'>
-        <property name='org.eclipse.equinox.p2.name' value='Anotherplugin Plug-in'/>
-      </properties>
-      <provides size='3'>
-        <provided namespace='org.eclipse.equinox.p2.iu' name='anotherplugin' version='1.0.0'/>
-        <provided namespace='osgi.bundle' name='anotherplugin' version='1.0.0'/>
-        <provided namespace='org.eclipse.equinox.p2.eclipse.type' name='bundle' version='1.0.0'/>
-      </provides>
-      <requires size='6'>
-        <required namespace='osgi.bundle' name='org.eclipse.ui' range='0.0.0'/>
-        <required namespace='osgi.bundle' name='org.eclipse.core.runtime' range='0.0.0'/>
-        <required namespace='osgi.bundle' name='org.eclipse.jface.text' range='0.0.0'/>
-        <required namespace='osgi.bundle' name='org.eclipse.core.resources' range='0.0.0'/>
-        <required namespace='osgi.bundle' name='org.eclipse.ui.editors' range='0.0.0'/>
-        <required namespace='osgi.bundle' name='org.eclipse.ui.ide' range='0.0.0'/>
-      </requires>
-      <artifacts size='1'>
-        <artifact classifier='osgi.bundle' id='anotherplugin' version='1.0.0'/>
-      </artifacts>
-      <touchpoint id='org.eclipse.equinox.p2.osgi' version='1.0.0'/>
-      <touchpointData size='1'>
-        <instructions size='1'>
-          <instruction key='manifest'>
-            Bundle-Activator: anotherplugin.Activator&#xA;Require-Bundle: org.eclipse.ui,org.eclipse.core.runtime,org.eclipse.jface.text,org.eclipse.core.resources,org.eclipse.ui.editors,org.eclipse.ui.ide&#xA;Manifest-Version: 1.0&#xA;Bundle-RequiredExecutionEnvironment: J2SE-1.5&#xA;Bundle-Name: Anotherplugin Plug-in&#xA;Bundle-Version: 1.0.0&#xA;Bundle-ManifestVersion: 2&#xA;Bundle-ActivationPolicy: lazy&#xA;Bundle-SymbolicName: anotherplugin; singleton:=true&#xA;
-          </instruction>
-        </instructions>
-      </touchpointData>
-    </unit>
-    <unit id='tooling.org.eclipse.update.feature.default' version='1.0.0' singleton='false'>
-      <hostRequirements size='1'>
-        <required namespace='org.eclipse.equinox.p2.eclipse.type' name='feature' range='0.0.0' optional='true' multiple='true' greedy='false'/>
-      </hostRequirements>
-      <properties size='1'>
-        <property name='org.eclipse.equinox.p2.type.fragment' value='true'/>
-      </properties>
-      <provides size='2'>
-        <provided namespace='org.eclipse.equinox.p2.iu' name='tooling.org.eclipse.update.feature.default' version='1.0.0'/>
-        <provided namespace='org.eclipse.equinox.p2.flavor' name='tooling' version='1.0.0'/>
-      </provides>
-      <requires size='1'>
-        <required namespace='org.eclipse.equinox.p2.eclipse.type' name='feature' range='0.0.0' optional='true' multiple='true' greedy='false'/>
-      </requires>
-      <filter>
-        (org.eclipse.update.install.features=true)
-      </filter>
-      <touchpoint id='null' version='0.0.0'/>
-      <touchpointData size='1'>
-        <instructions size='2'>
-          <instruction key='uninstall'>
-            uninstallFeature(feature:${artifact},featureId:default,featureVersion:default)
-          </instruction>
-          <instruction key='install'>
-            installFeature(feature:${artifact},featureId:default,featureVersion:default)
-          </instruction>
-        </instructions>
-      </touchpointData>
-    </unit>
-    <unit id='tooling.osgi.bundle.default' version='1.0.0' singleton='false'>
-      <hostRequirements size='1'>
-        <required namespace='org.eclipse.equinox.p2.eclipse.type' name='bundle' range='0.0.0' multiple='true' greedy='false'/>
-      </hostRequirements>
-      <properties size='1'>
-        <property name='org.eclipse.equinox.p2.type.fragment' value='true'/>
-      </properties>
-      <provides size='2'>
-        <provided namespace='org.eclipse.equinox.p2.iu' name='tooling.osgi.bundle.default' version='1.0.0'/>
-        <provided namespace='org.eclipse.equinox.p2.flavor' name='tooling' version='1.0.0'/>
-      </provides>
-      <requires size='1'>
-        <required namespace='org.eclipse.equinox.p2.eclipse.type' name='bundle' range='0.0.0' multiple='true' greedy='false'/>
-      </requires>
-      <touchpoint id='null' version='0.0.0'/>
-      <touchpointData size='1'>
-        <instructions size='4'>
-          <instruction key='configure'>
-            setStartLevel(startLevel:4);
-          </instruction>
-          <instruction key='unconfigure'>
-
-          </instruction>
-          <instruction key='uninstall'>
-            uninstallBundle(bundle:${artifact})
-          </instruction>
-          <instruction key='install'>
-            installBundle(bundle:${artifact})
-          </instruction>
-        </instructions>
-      </touchpointData>
-    </unit>
-    <unit id='tooling.source.default' version='1.0.0' singleton='false'>
-      <hostRequirements size='1'>
-        <required namespace='org.eclipse.equinox.p2.eclipse.type' name='source' range='0.0.0' optional='true' multiple='true' greedy='false'/>
-      </hostRequirements>
-      <properties size='1'>
-        <property name='org.eclipse.equinox.p2.type.fragment' value='true'/>
-      </properties>
-      <provides size='2'>
-        <provided namespace='org.eclipse.equinox.p2.iu' name='tooling.source.default' version='1.0.0'/>
-        <provided namespace='org.eclipse.equinox.p2.flavor' name='tooling' version='1.0.0'/>
-      </provides>
-      <requires size='1'>
-        <required namespace='org.eclipse.equinox.p2.eclipse.type' name='source' range='0.0.0' optional='true' multiple='true' greedy='false'/>
-      </requires>
-      <touchpoint id='null' version='0.0.0'/>
-      <touchpointData size='1'>
-        <instructions size='2'>
-          <instruction key='uninstall'>
-            removeSourceBundle(bundle:${artifact})
-          </instruction>
-          <instruction key='install'>
-            addSourceBundle(bundle:${artifact})
-          </instruction>
-        </instructions>
-      </touchpointData>
-    </unit>
-    <unit id='anotherfeature.feature.jar' version='1.0.0'>
-      <update id='anotherfeature.feature.jar' range='[0.0.0,1.0.0)' severity='0'/>
-      <properties size='3'>
-        <property name='org.eclipse.equinox.p2.name' value='Anotherfeature Feature'/>
-        <property name='org.eclipse.equinox.p2.description' value='[Enter Feature Description here.]'/>
-        <property name='org.eclipse.equinox.p2.description.url' value='http://www.example.com/description'/>
-      </properties>
-      <provides size='3'>
-        <provided namespace='org.eclipse.equinox.p2.iu' name='anotherfeature.feature.jar' version='1.0.0'/>
-        <provided namespace='org.eclipse.equinox.p2.eclipse.type' name='feature' version='1.0.0'/>
-        <provided namespace='org.eclipse.update.feature' name='anotherfeature' version='1.0.0'/>
-      </provides>
-      <filter>
-        (org.eclipse.update.install.features=true)
-      </filter>
-      <artifacts size='1'>
-        <artifact classifier='org.eclipse.update.feature' id='anotherfeature' version='1.0.0'/>
-      </artifacts>
-      <touchpoint id='org.eclipse.equinox.p2.osgi' version='1.0.0'/>
-      <touchpointData size='1'>
-        <instructions size='1'>
-          <instruction key='zipped'>
-            true
-          </instruction>
-        </instructions>
-      </touchpointData>
-      <licenses size='1'>
-        <license url='http://www.example.com/license'>
-          [Enter License Description here.]
-        </license>
-      </licenses>
-      <copyright url='http://www.example.com/copyright'>
-        [Enter Copyright Description here.]
-      </copyright>
-    </unit>
   </units>
 </repository>
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
index 289d482..77f0041 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
@@ -22,8 +22,7 @@ import org.eclipse.equinox.internal.provisional.p2.engine.*;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.publisher.PublisherInfo;
-import org.eclipse.equinox.p2.publisher.eclipse.BundleNestedAdvice;
-import org.eclipse.equinox.p2.publisher.eclipse.BundlesAction;
+import org.eclipse.equinox.p2.publisher.eclipse.*;
 import org.eclipse.osgi.service.resolver.BundleDescription;
 import org.eclipse.osgi.util.NLS;
 
@@ -194,7 +193,9 @@ public class EclipseTouchpoint extends Touchpoint {
 	private IInstallableUnit createBundleIU(IArtifactKey artifactKey, File bundleFile) {
 		BundleDescription bundleDescription = BundlesAction.createBundleDescription(bundleFile);
 		PublisherInfo info = new PublisherInfo();
-		info.addAdvice(new BundleNestedAdvice());
-		return BundlesAction.createBundleIU(bundleDescription, (Map) bundleDescription.getUserObject(), bundleFile.isDirectory(), artifactKey, info);
+		info.addAdvice(new AdviceFileAdvice(new Path(bundleFile.getAbsolutePath()), AdviceFileAdvice.BUNDLE_ADVICE_FILE));
+		String shape = bundleFile.isDirectory() ? IBundleShapeAdvice.DIR : IBundleShapeAdvice.JAR;
+		info.addAdvice(new BundleShapeAdvice(bundleDescription.getSymbolicName(), bundleDescription.getVersion(), shape));
+		return BundlesAction.createBundleIU(bundleDescription, artifactKey, info);
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/RemoteFeaturesAction.java b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/RemoteFeaturesAction.java
index b745e29..a623db6 100644
--- a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/RemoteFeaturesAction.java
+++ b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/RemoteFeaturesAction.java
@@ -16,8 +16,7 @@ import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.publisher.IPublisherInfo;
-import org.eclipse.equinox.p2.publisher.IPublisherResult;
+import org.eclipse.equinox.p2.publisher.*;
 import org.eclipse.equinox.p2.publisher.eclipse.*;
 import org.eclipse.equinox.spi.p2.publisher.PublisherHelper;
 import org.eclipse.osgi.service.resolver.BundleDescription;
@@ -64,13 +63,13 @@ public class RemoteFeaturesAction extends FeaturesAction {
 					mockManifest.put("Bundle-Version", entry.getVersion()); //$NON-NLS-1$
 					BundleDescription bundleDescription = BundlesAction.createBundleDescription(mockManifest, null);
 					IArtifactKey key = BundlesAction.createBundleArtifactKey(entry.getId(), entry.getVersion());
-					IInstallableUnit[] bundleIUs = PublisherHelper.createEclipseIU(bundleDescription, null, entry.isUnpack(), key, extraProperties);
+					IInstallableUnit[] bundleIUs = PublisherHelper.createEclipseIU(bundleDescription, entry.isUnpack(), key, extraProperties);
 					for (int n = 0; n < bundleIUs.length; n++)
 						result.addIU(bundleIUs[n], IPublisherResult.ROOT);
 				}
 			}
-			IInstallableUnit featureIU = createFeatureJarIU(feature, null, null);
-			IInstallableUnit groupIU = createGroupIU(feature, featureIU, null);
+			IInstallableUnit featureIU = createFeatureJarIU(feature, null, new PublisherInfo());
+			IInstallableUnit groupIU = createGroupIU(feature, featureIU, new PublisherInfo());
 			result.addIU(featureIU, IPublisherResult.ROOT);
 			result.addIU(groupIU, IPublisherResult.ROOT);
 		}
diff --git a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/SiteXMLAction.java b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/SiteXMLAction.java
index 5b45cd2..781298c 100644
--- a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/SiteXMLAction.java
+++ b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/SiteXMLAction.java
@@ -22,7 +22,6 @@ import org.eclipse.equinox.internal.provisional.p2.metadata.*;
 import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory.InstallableUnitDescription;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.p2.publisher.*;
-import org.eclipse.equinox.p2.publisher.eclipse.FeaturesAction;
 import org.eclipse.equinox.p2.publisher.eclipse.URLEntry;
 import org.eclipse.equinox.spi.p2.publisher.LocalizationHelper;
 import org.eclipse.equinox.spi.p2.publisher.PublisherHelper;
@@ -102,7 +101,7 @@ public class SiteXMLAction extends AbstractPublisherAction {
 	}
 
 	private IInstallableUnit getFeatureIU(SiteFeature feature, IPublisherResult results) {
-		String id = FeaturesAction.getTransformedId(feature.getFeatureIdentifier(), false, true);
+		String id = feature.getFeatureIdentifier() + ".feature.group"; //$NON-NLS-1$
 		Version version = new Version(feature.getFeatureVersion());
 		// TODO look elsewhere as well.  Perhaps in the metadata repos and some advice.
 		Collection ius = results.getIUs(id, null);
commit 2029fe61c3dc9daf85491ad922ce261757822693
Author: Andrew Niefer <aniefer>
Date:   Tue Nov 25 22:31:35 2008 +0000

    bug 256037 nested bundle advice

9	3	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileAdvice.java
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileAdvice.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileAdvice.java
index ee7779e..6ba19e2 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileAdvice.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileAdvice.java
@@ -92,7 +92,13 @@ public class AdviceFileAdvice implements ITouchpointAdvice {
 	}
 
 	public boolean isApplicable(String configSpec, boolean includeDefault, String id, Version version) {
-		return false;
+		// when to turn this on?  for now only when the p2.inf exists on disk.  It may be too expensive to grab 
+		// it out of jars when looking at an old update site.
+		File location = basePath.toFile();
+		if (location == null || !location.isDirectory())
+			return false;
+
+		return new File(location, adviceFilePath.toString()).exists();
 	}
 
 	/*(non-Javadoc)
@@ -105,8 +111,8 @@ public class AdviceFileAdvice implements ITouchpointAdvice {
 			String key = (String) iterator.next();
 			if (key.startsWith(ADVICE_INSTRUCTIONS_PREFIX)) {
 				String phase = key.substring(ADVICE_INSTRUCTIONS_PREFIX.length());
-				String instruction = touchpointData.containsKey(phase) ? (String) touchpointData.get(phase) : ""; //$NON-NLS-1$
-				if (instruction.length() > 0)
+				String instruction = touchpointData.containsKey(phase) ? ((TouchpointInstruction) touchpointData.get(phase)).getBody() : ""; //$NON-NLS-1$
+				if (instruction.length() > 0 && !instruction.endsWith(";")) //$NON-NLS-1$
 					instruction += ";"; //$NON-NLS-1$
 				instruction += ((String) bundleAdvice.get(key)).trim();
 				touchpointData.put(phase, instruction);
commit 4c365fba9c31062a73d2705347012accb7c016bd
Author: Andrew Niefer <aniefer>
Date:   Tue Nov 25 22:43:46 2008 +0000

    bug 256037 - class cast exception with multiple advices

7	3	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileAdvice.java
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileAdvice.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileAdvice.java
index 6ba19e2..2e6638a 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileAdvice.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileAdvice.java
@@ -111,9 +111,13 @@ public class AdviceFileAdvice implements ITouchpointAdvice {
 			String key = (String) iterator.next();
 			if (key.startsWith(ADVICE_INSTRUCTIONS_PREFIX)) {
 				String phase = key.substring(ADVICE_INSTRUCTIONS_PREFIX.length());
-				String instruction = touchpointData.containsKey(phase) ? ((TouchpointInstruction) touchpointData.get(phase)).getBody() : ""; //$NON-NLS-1$
-				if (instruction.length() > 0 && !instruction.endsWith(";")) //$NON-NLS-1$
-					instruction += ";"; //$NON-NLS-1$
+				String instruction = ""; //$NON-NLS-1$
+				if (touchpointData.containsKey(phase)) {
+					Object previous = touchpointData.get(phase);
+					instruction = previous instanceof TouchpointInstruction ? ((TouchpointInstruction) previous).getBody() : (String) previous;
+					if (instruction.length() > 0 && !instruction.endsWith(";")) //$NON-NLS-1$
+						instruction += ";"; //$NON-NLS-1$
+				}
 				instruction += ((String) bundleAdvice.get(key)).trim();
 				touchpointData.put(phase, instruction);
 			}
commit b5521c9e28a67598f118297b24742e0b358ca39e
Author: John Arthorne <johna>
Date:   Thu Nov 27 18:41:48 2008 +0000

    Bug 256037 [publisher] Generalize NestedBundleAdvice

3	5	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileAdvice.java
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileAdvice.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileAdvice.java
index 2e6638a..0aa1fb9 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileAdvice.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileAdvice.java
@@ -92,12 +92,10 @@ public class AdviceFileAdvice implements ITouchpointAdvice {
 	}
 
 	public boolean isApplicable(String configSpec, boolean includeDefault, String id, Version version) {
-		// when to turn this on?  for now only when the p2.inf exists on disk.  It may be too expensive to grab 
-		// it out of jars when looking at an old update site.
+		// only process this advice if there is an advice file present
 		File location = basePath.toFile();
-		if (location == null || !location.isDirectory())
-			return false;
-
+		if (!location.isDirectory())
+			return location.exists();
 		return new File(location, adviceFilePath.toString()).exists();
 	}
 
commit 04a3eb48042823590d2a70630a463eae6293af22
Author: John Arthorne <johna>
Date:   Wed Dec 3 22:58:34 2008 +0000

    Bug 256037 [publisher] Generalize NestedBundleAdvice

13	1	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/RootIUAction.java
5	2	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileAdvice.java
1	1	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/BundlesAction.java
3	3	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/FeaturesAction.java
12	0	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/ProductAction.java
1	0	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/AllTests.java
54	0	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/ProductActionWithAdviceFileTest.java
2	0	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/RootIUActionTest.java
3	0	bundles/org.eclipse.equinox.p2.tests/testData/ProductActionTest/productWithAdvice/p2.inf
12	0	bundles/org.eclipse.equinox.p2.tests/testData/ProductActionTest/productWithAdvice/productWithAdvice.product
1	1	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/RootIUAction.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/RootIUAction.java
index 3c4b520..6b90463 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/RootIUAction.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/RootIUAction.java
@@ -19,6 +19,7 @@ import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory.Inst
 import org.eclipse.equinox.internal.provisional.p2.metadata.query.InstallableUnitQuery;
 import org.eclipse.equinox.internal.provisional.p2.query.Collector;
 import org.eclipse.equinox.p2.publisher.*;
+import org.eclipse.equinox.p2.publisher.eclipse.ITouchpointAdvice;
 import org.eclipse.equinox.spi.p2.publisher.PublisherHelper;
 import org.eclipse.osgi.service.resolver.VersionRange;
 import org.eclipse.osgi.util.NLS;
@@ -51,6 +52,7 @@ public class RootIUAction extends AbstractPublisherAction {
 		Collection children = getChildren(result);
 		InstallableUnitDescription descriptor = createTopLevelIUDescription(children, id, version, name, null, false);
 		processCapabilityAdvice(descriptor, info);
+		processTouchpointAdvice(descriptor);
 		IInstallableUnit rootIU = MetadataFactory.createInstallableUnit(descriptor);
 		if (rootIU == null)
 			return new Status(IStatus.ERROR, Activator.ID, NLS.bind(Messages.error_rootIU_generation, new Object[] {name, id, version}));
@@ -60,6 +62,16 @@ public class RootIUAction extends AbstractPublisherAction {
 		//		result.addIU(generateDefaultCategory(rootIU, rootCategory), IPublisherResult.NON_ROOT);
 	}
 
+	private void processTouchpointAdvice(InstallableUnitDescription descriptor) {
+		Collection allAdvice = info.getAdvice(null, true, id, version, ITouchpointAdvice.class);
+		if (allAdvice == null || allAdvice.isEmpty())
+			return;
+		TouchpointData touchpointData = MetadataFactory.createTouchpointData(Collections.EMPTY_MAP);
+		for (Iterator it = allAdvice.iterator(); it.hasNext();)
+			touchpointData = ((ITouchpointAdvice) it.next()).getTouchpointData(touchpointData);
+		descriptor.addTouchpointData(touchpointData);
+	}
+
 	/**
 	 * This was copied over from Generator to match up with the call from generateRootIU (above).
 	 * It is entirely unclear why it was needed.  Should review.
@@ -133,7 +145,7 @@ public class RootIUAction extends AbstractPublisherAction {
 		return null;
 	}
 
-	public static InstallableUnitDescription createTopLevelIUDescription(Collection children, String id, Version version, String name, Collection requires, boolean configureLauncherData) {
+	private InstallableUnitDescription createTopLevelIUDescription(Collection children, String id, Version version, String name, Collection requires, boolean configureLauncherData) {
 		InstallableUnitDescription root = new MetadataFactory.InstallableUnitDescription();
 		root.setSingleton(true);
 		root.setId(id);
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileAdvice.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileAdvice.java
index 0aa1fb9..ebf8ca3 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileAdvice.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileAdvice.java
@@ -7,6 +7,7 @@ import java.util.zip.ZipFile;
 import org.eclipse.core.runtime.IPath;
 import org.eclipse.core.runtime.Path;
 import org.eclipse.equinox.internal.provisional.p2.metadata.*;
+import org.eclipse.equinox.p2.publisher.AbstractAdvice;
 import org.osgi.framework.Version;
 
 /**
@@ -14,7 +15,7 @@ import org.osgi.framework.Version;
  * in the source of a bundle, feature, or product to specify additional advice to be
  * added to the {@link IInstallableUnit} corresponding to the bundle, feature, or product.
  */
-public class AdviceFileAdvice implements ITouchpointAdvice {
+public class AdviceFileAdvice extends AbstractAdvice implements ITouchpointAdvice {
 	/**
 	 * The location of the bundle advice file, relative to the bundle root location.
 	 */
@@ -29,10 +30,12 @@ public class AdviceFileAdvice implements ITouchpointAdvice {
 	 * is a directory, then <tt>adviceFilePath</tt> is appended to this location to
 	 * obtain the location of the advice file. If <tt>basePath</tt> is a file, then
 	 * <tt>adviceFilePath</tt> is used to 
+	 * @param id The symbolic id of the installable unit this advice applies to
+	 * @param version The version of the installable unit this advice applies to
 	 * @param basePath
 	 * @param adviceFilePath
 	 */
-	public AdviceFileAdvice(IPath basePath, IPath adviceFilePath) {
+	public AdviceFileAdvice(String id, Version version, IPath basePath, IPath adviceFilePath) {
 		this.basePath = basePath;
 		this.adviceFilePath = adviceFilePath;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/BundlesAction.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/BundlesAction.java
index 625a283..9fef836 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/BundlesAction.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/BundlesAction.java
@@ -739,7 +739,7 @@ public class BundlesAction extends AbstractPublisherAction {
 	private void createAdviceFileAdvice(BundleDescription bundleDescription, IPublisherInfo info) {
 		String location = bundleDescription.getLocation();
 		if (location != null)
-			info.addAdvice(new AdviceFileAdvice(new Path(location), AdviceFileAdvice.BUNDLE_ADVICE_FILE));
+			info.addAdvice(new AdviceFileAdvice(bundleDescription.getSymbolicName(), bundleDescription.getVersion(), new Path(location), AdviceFileAdvice.BUNDLE_ADVICE_FILE));
 	}
 
 	/**
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/FeaturesAction.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/FeaturesAction.java
index d0bc04e..77c0367 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/FeaturesAction.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/FeaturesAction.java
@@ -207,7 +207,7 @@ public class FeaturesAction extends AbstractPublisherAction {
 		//assume p2.inf is co-located with feature.xml
 		String location = feature.getLocation();
 		if (location != null)
-			info.addAdvice(new AdviceFileAdvice(new Path(location), new Path("p2.inf"))); //$NON-NLS-1$
+			info.addAdvice(new AdviceFileAdvice(feature.getId(), new Version(feature.getVersion()), new Path(location), new Path("p2.inf"))); //$NON-NLS-1$
 	}
 
 	/**
@@ -426,8 +426,8 @@ public class FeaturesAction extends AbstractPublisherAction {
 			ArrayList childIUs = generateRootFileIUs(feature, result, info);
 			IInstallableUnit featureIU = generateFeatureJarIU(feature, childIUs, info);
 			if (featureIU != null) {
-				publishFeatureArtifacts(feature, featureIU, info);
-				result.addIU(featureIU, IPublisherResult.ROOT);
+			publishFeatureArtifacts(feature, featureIU, info);
+			result.addIU(featureIU, IPublisherResult.ROOT);
 			}
 			generateSiteReferences(feature, result, info);
 
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/ProductAction.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/ProductAction.java
index 7229039..190b491 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/ProductAction.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/ProductAction.java
@@ -11,6 +11,7 @@ package org.eclipse.equinox.p2.publisher.eclipse;
 
 import java.io.File;
 import java.util.*;
+import org.eclipse.core.runtime.Path;
 import org.eclipse.equinox.internal.p2.publisher.eclipse.ProductFile;
 import org.eclipse.equinox.p2.publisher.IPublisherAction;
 import org.eclipse.equinox.p2.publisher.IPublisherResult;
@@ -67,9 +68,20 @@ public class ProductAction extends EclipseInstallAction {
 		ProductFile product = loadProduct();
 		executableName = product.getLauncherName();
 		createProductAdvice(product);
+		createAdviceFileAdvice(product);
 		createRootAdvice(product);
 	}
 
+	/**
+	 * Create advice for a p2.inf file co-located with the product file, if any.
+	 */
+	private void createAdviceFileAdvice(ProductFile product) {
+		File productFileLocation = product.getLocation();
+		if (productFileLocation == null)
+			return;
+		info.addAdvice(new AdviceFileAdvice(product.getId(), new Version(product.getVersion()), new Path(productFileLocation.getParent()), new Path("p2.inf"))); //$NON-NLS-1$
+	}
+
 	protected void createRootAdvice(ProductFile product) {
 		Collection list;
 		if (product.useFeatures())
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/AllTests.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/AllTests.java
index ec89876..64412b9 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/AllTests.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/AllTests.java
@@ -28,6 +28,7 @@ public class AllTests extends TestCase {
 		suite.addTestSuite(MD5GenerationTest.class);
 		suite.addTestSuite(ProductActionTest.class);
 		suite.addTestSuite(ProductActionTestMac.class);
+		suite.addTestSuite(ProductActionWithAdviceFileTest.class);
 		suite.addTestSuite(RootFilesActionTest.class);
 		suite.addTestSuite(RootIUActionTest.class);
 		suite.addTestSuite(GeneralPublisherTests.class);
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/ProductActionWithAdviceFileTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/ProductActionWithAdviceFileTest.java
new file mode 100644
index 0000000..8cd838f
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/ProductActionWithAdviceFileTest.java
@@ -0,0 +1,54 @@
+/*******************************************************************************
+ * Copyright (c) 2008 Code 9 and others. All rights reserved. This
+ * program and the accompanying materials are made available under the terms of
+ * the Eclipse Public License v1.0 which accompanies this distribution, and is
+ * available at http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors: 
+ *   Code 9 - initial API and implementation
+ *   IBM - ongoing development
+ ******************************************************************************/
+package org.eclipse.equinox.p2.tests.publisher.actions;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.Collection;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.metadata.TouchpointData;
+import org.eclipse.equinox.p2.publisher.IPublisherResult;
+import org.eclipse.equinox.p2.publisher.PublisherInfo;
+import org.eclipse.equinox.p2.publisher.eclipse.ProductAction;
+import org.eclipse.equinox.p2.tests.TestData;
+
+@SuppressWarnings( {"unchecked"})
+/**
+ * Tests the product action when run on a product file that has a corresponding
+ * advice file (p2.inf).
+ */
+public class ProductActionWithAdviceFileTest extends ActionTest {
+
+	File executablesFeatureLocation = null;
+	String productLocation = "";
+	String source = "";
+
+	public void setUp() throws Exception {
+		setupPublisherResult();
+	}
+
+	/**
+	 * Tests publishing a product that contains an advice file (p2.inf)
+	 */
+	public void testProductWithAdviceFile() throws IOException {
+		testAction = new ProductAction(source, TestData.getFile("ProductActionTest/productWithAdvice", "productWithAdvice.product").toString(), flavorArg, executablesFeatureLocation);
+		testAction.perform(new PublisherInfo(), publisherResult, null);
+
+		Collection productIUs = publisherResult.getIUs("productWithAdvice.product", IPublisherResult.NON_ROOT);
+		assertEquals("1.0", 1, productIUs.size());
+		IInstallableUnit product = (IInstallableUnit) productIUs.iterator().next();
+		TouchpointData[] data = product.getTouchpointData();
+		assertEquals("1.1", 1, data.length);
+		String configure = data[0].getInstruction("configure").getBody();
+		assertEquals("1.2", "addRepository(type:0,location:http${#58}//download.eclipse.org/releases/fred);addRepository(type:1,location:http${#58}//download.eclipse.org/releases/fred);", configure);
+	}
+
+}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/RootIUActionTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/RootIUActionTest.java
index 38b851f..a41ebfe 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/RootIUActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/RootIUActionTest.java
@@ -22,6 +22,7 @@ import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadata
 import org.eclipse.equinox.internal.provisional.p2.query.Query;
 import org.eclipse.equinox.p2.publisher.IPublisherResult;
 import org.eclipse.equinox.p2.publisher.actions.*;
+import org.eclipse.equinox.p2.publisher.eclipse.ITouchpointAdvice;
 import org.eclipse.equinox.p2.tests.TestMetadataRepository;
 import org.osgi.framework.Version;
 
@@ -341,6 +342,7 @@ public class RootIUActionTest extends ActionTest {
 		expect(publisherInfo.getAdvice(null, false, rootIU, versionArg, ICapabilityAdvice.class)).andReturn(new ArrayList()).anyTimes();
 		expect(publisherInfo.getAdvice(null, true, null, null, IRootIUAdvice.class)).andReturn(rootIUAdviceCollection).anyTimes();
 		expect(publisherInfo.getAdvice(null, true, null, null, IVersionAdvice.class)).andReturn(null).anyTimes();
+		expect(publisherInfo.getAdvice(null, true, rootIU, versionArg, ITouchpointAdvice.class)).andReturn(new ArrayList()).anyTimes();
 		expect(publisherInfo.getMetadataRepository()).andReturn(metadataRepository).anyTimes();
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/ProductActionTest/productWithAdvice/p2.inf b/bundles/org.eclipse.equinox.p2.tests/testData/ProductActionTest/productWithAdvice/p2.inf
new file mode 100644
index 0000000..2eec7c9
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests/testData/ProductActionTest/productWithAdvice/p2.inf
@@ -0,0 +1,3 @@
+instructions.configure=\
+  addRepository(type:0,location:http${#58}//download.eclipse.org/releases/fred);\
+  addRepository(type:1,location:http${#58}//download.eclipse.org/releases/fred);
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/ProductActionTest/productWithAdvice/productWithAdvice.product b/bundles/org.eclipse.equinox.p2.tests/testData/ProductActionTest/productWithAdvice/productWithAdvice.product
new file mode 100644
index 0000000..6513692
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests/testData/ProductActionTest/productWithAdvice/productWithAdvice.product
@@ -0,0 +1,12 @@
+<product name="aaTestProduct" id="productWithAdvice.product" application="test.app" version="1" useFeatures="true">
+
+   <configIni use="default">
+   </configIni>
+
+   <plugins>
+   </plugins>
+
+   <features>
+      <feature id="org.eclipse.rcp" version="3.5.0.v20081110-9C9tEvNEla71LZ2jFz-RFB-t"/>
+   </features>
+</product>
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
index 54104ba..def92ae 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
@@ -193,7 +193,7 @@ public class EclipseTouchpoint extends Touchpoint {
 	private IInstallableUnit createBundleIU(IArtifactKey artifactKey, File bundleFile) {
 		BundleDescription bundleDescription = BundlesAction.createBundleDescription(bundleFile);
 		PublisherInfo info = new PublisherInfo();
-		info.addAdvice(new AdviceFileAdvice(new Path(bundleFile.getAbsolutePath()), AdviceFileAdvice.BUNDLE_ADVICE_FILE));
+		info.addAdvice(new AdviceFileAdvice(bundleDescription.getSymbolicName(), bundleDescription.getVersion(), new Path(bundleFile.getAbsolutePath()), AdviceFileAdvice.BUNDLE_ADVICE_FILE));
 		String shape = bundleFile.isDirectory() ? IBundleShapeAdvice.DIR : IBundleShapeAdvice.JAR;
 		info.addAdvice(new BundleShapeAdvice(bundleDescription.getSymbolicName(), bundleDescription.getVersion(), shape));
 		return BundlesAction.createBundleIU(bundleDescription, artifactKey, info);
commit fde0521d6b2b09fb24cf2e9bca4103c421592a2b
Author: John Arthorne <johna>
Date:   Fri Dec 5 19:06:20 2008 +0000

    Bug 256037 [publisher] Generalize NestedBundleAdvice

3	1	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
index bcc6fb2..f5759a8 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
@@ -262,9 +262,11 @@ public class Generator {
 				unconfigurationData += dataStrings[1];
 			}
 		}
-
 		touchpointData.put("configure", configurationData); //$NON-NLS-1$
 		touchpointData.put("unconfigure", unconfigurationData); //$NON-NLS-1$
+		//look for additional touchpoint instructions in a p2.inf file
+		MetadataGeneratorHelper.mergeInstructionsAdvice(touchpointData, MetadataGeneratorHelper.getBundleAdvice(info.getProductFile(), "p2.inf")); //$NON-NLS-1$
+
 		root.addTouchpointData(MetadataFactory.createTouchpointData(touchpointData));
 		return root;
 	}
commit e6752ad19cd53702ca0f8d98e816c125efb27d31
Author: John Arthorne <johna>
Date:   Fri Dec 5 19:09:56 2008 +0000

    Bug 256037 [publisher] Generalize NestedBundleAdvice

9	1	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
7	7	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/MetadataGeneratorHelper.java
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
index f5759a8..73fb1ec 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
@@ -265,7 +265,15 @@ public class Generator {
 		touchpointData.put("configure", configurationData); //$NON-NLS-1$
 		touchpointData.put("unconfigure", unconfigurationData); //$NON-NLS-1$
 		//look for additional touchpoint instructions in a p2.inf file
-		MetadataGeneratorHelper.mergeInstructionsAdvice(touchpointData, MetadataGeneratorHelper.getBundleAdvice(info.getProductFile(), "p2.inf")); //$NON-NLS-1$
+		final String productFileLocation = info.getProductFile();
+		if (productFileLocation != null) {
+			File productFilePath = new File(productFileLocation);
+			if (productFilePath.exists()) {
+				Map advice = MetadataGeneratorHelper.getBundleAdvice(productFilePath.getParent(), "p2.inf");//$NON-NLS-1$
+				if (advice != null)
+					MetadataGeneratorHelper.mergeInstructionsAdvice(touchpointData, advice);
+			}
+		}
 
 		root.addTouchpointData(MetadataFactory.createTouchpointData(touchpointData));
 		return root;
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/MetadataGeneratorHelper.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/MetadataGeneratorHelper.java
index 742f5d1..d2ee53b 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/MetadataGeneratorHelper.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/MetadataGeneratorHelper.java
@@ -349,7 +349,7 @@ public class MetadataGeneratorHelper {
 		touchpointData.put("manifest", toManifestString(manifest)); //$NON-NLS-1$
 
 		if (useNestedAdvice)
-			mergeInstructionsAdvice(touchpointData, getBundleAdvice(bd.getLocation()));
+			mergeInstructionsAdvice(touchpointData, getBundleAdvice(bd.getLocation(), BUNDLE_ADVICE_FILE));
 
 		iu.addTouchpointData(MetadataFactory.createTouchpointData(touchpointData));
 
@@ -357,9 +357,9 @@ public class MetadataGeneratorHelper {
 	}
 
 	/**
-	 * @deprecated moved to BundlesAction
+	 * @deprecated moved to AdviceFileAdvice
 	 */
-	private static void mergeInstructionsAdvice(Map touchpointData, Map bundleAdvice) {
+	public static void mergeInstructionsAdvice(Map touchpointData, Map bundleAdvice) {
 		if (touchpointData == null || bundleAdvice == null)
 			return;
 
@@ -1200,9 +1200,9 @@ public class MetadataGeneratorHelper {
 	}
 
 	/**
-	 * @deprecated moved to BundlesAction
+	 * @deprecated moved to AdviceFileAdvice
 	 */
-	public static Map getBundleAdvice(String bundleLocation) {
+	public static Map getBundleAdvice(String bundleLocation, String suffixLocation) {
 		if (bundleLocation == null)
 			return Collections.EMPTY_MAP;
 
@@ -1213,7 +1213,7 @@ public class MetadataGeneratorHelper {
 		ZipFile jar = null;
 		InputStream stream = null;
 		if (bundle.isDirectory()) {
-			File adviceFile = new File(bundle, BUNDLE_ADVICE_FILE);
+			File adviceFile = new File(bundle, suffixLocation);
 			if (adviceFile.exists()) {
 				try {
 					stream = new BufferedInputStream(new FileInputStream(adviceFile));
@@ -1224,7 +1224,7 @@ public class MetadataGeneratorHelper {
 		} else if (bundle.isFile()) {
 			try {
 				jar = new ZipFile(bundle);
-				ZipEntry entry = jar.getEntry(BUNDLE_ADVICE_FILE);
+				ZipEntry entry = jar.getEntry(suffixLocation);
 				if (entry != null)
 					stream = new BufferedInputStream(jar.getInputStream(entry));
 			} catch (IOException e) {

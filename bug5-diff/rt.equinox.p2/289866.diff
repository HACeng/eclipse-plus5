commit f50dcb02bd8e1ed07ffae3311d3003e6611fe4fd
Author: Andrew Niefer <aniefer>
Date:   Wed Sep 23 20:23:13 2009 +0000

    bug 289866 - don't create pack.gz descriptor is file is size 0

1	1	bundles/org.eclipse.equinox.p2.repository.tools/src/org/eclipse/equinox/p2/internal/repository/tools/RecreateRepositoryApplication.java
diff --git a/bundles/org.eclipse.equinox.p2.repository.tools/src/org/eclipse/equinox/p2/internal/repository/tools/RecreateRepositoryApplication.java b/bundles/org.eclipse.equinox.p2.repository.tools/src/org/eclipse/equinox/p2/internal/repository/tools/RecreateRepositoryApplication.java
index 852f96c..cfa96c4 100644
--- a/bundles/org.eclipse.equinox.p2.repository.tools/src/org/eclipse/equinox/p2/internal/repository/tools/RecreateRepositoryApplication.java
+++ b/bundles/org.eclipse.equinox.p2.repository.tools/src/org/eclipse/equinox/p2/internal/repository/tools/RecreateRepositoryApplication.java
@@ -128,7 +128,7 @@ public class RecreateRepositoryApplication {
 
 				repository.addDescriptor(newDescriptor);
 			}
-			if (packFile != null && !files.contains(packFile)) {
+			if (packFile != null && !files.contains(packFile) && packFile.length() > 0) {
 				ArtifactDescriptor packDescriptor = createPack200ArtifactDescriptor(key, packFile, unpackedSize);
 				repository.addDescriptor(packDescriptor);
 			}
commit d301ee053bc81eef3a1b67f1b6e8cf228e3baabd
Author: Andrew Niefer <aniefer>
Date:   Thu Sep 24 21:31:36 2009 +0000

    bug 289866 - support excluding bundles when running p2.process.artifacts
    bug 168579 - unnecessary work

35	22	bundles/org.eclipse.equinox.p2.jarprocessor/src/org/eclipse/equinox/internal/p2/jarprocessor/verifier/Verifier.java
5	1	bundles/org.eclipse.equinox.p2.jarprocessor/src/org/eclipse/internal/provisional/equinox/p2/jarprocessor/JarProcessor.java
95	40	bundles/org.eclipse.equinox.p2.jarprocessor/src/org/eclipse/internal/provisional/equinox/p2/jarprocessor/JarProcessorExecutor.java
7	12	bundles/org.eclipse.equinox.p2.jarprocessor/src_ant/org/eclipse/equinox/internal/p2/jarprocessor/ant/AntBasedProcessorExecutor.java
6	3	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/jarprocessor/JarProcessorTests.java
diff --git a/bundles/org.eclipse.equinox.p2.jarprocessor/src/org/eclipse/equinox/internal/p2/jarprocessor/verifier/Verifier.java b/bundles/org.eclipse.equinox.p2.jarprocessor/src/org/eclipse/equinox/internal/p2/jarprocessor/verifier/Verifier.java
index 075d88b..8aea9d1 100644
--- a/bundles/org.eclipse.equinox.p2.jarprocessor/src/org/eclipse/equinox/internal/p2/jarprocessor/verifier/Verifier.java
+++ b/bundles/org.eclipse.equinox.p2.jarprocessor/src/org/eclipse/equinox/internal/p2/jarprocessor/verifier/Verifier.java
@@ -11,10 +11,9 @@
 
 package org.eclipse.equinox.internal.p2.jarprocessor.verifier;
 
-import java.io.File;
-import java.io.FileNotFoundException;
+import java.io.*;
+import java.util.Iterator;
 import java.util.Properties;
-
 import org.eclipse.equinox.internal.p2.jarprocessor.UnpackStep;
 import org.eclipse.equinox.internal.p2.jarprocessor.Utils;
 import org.eclipse.internal.provisional.equinox.p2.jarprocessor.JarProcessor;
@@ -39,14 +38,14 @@ public class Verifier extends JarProcessorExecutor {
 		}
 
 		String workingDirectory = null;
-		String [] input;
-		
-		if(args.length == 0) {
+		String[] input;
+
+		if (args.length == 0) {
 			workingDirectory = "."; //$NON-NLS-1$
 			input = new String[] {"."}; //$NON-NLS-1$
-		}else {
+		} else {
 			int idx = 0;
-			if(args[0] == "-help"){ //$NON-NLS-1$
+			if (args[0] == "-help") { //$NON-NLS-1$
 				printUsage();
 				return;
 			}
@@ -60,35 +59,41 @@ public class Verifier extends JarProcessorExecutor {
 			input = new String[args.length - idx];
 			System.arraycopy(args, idx, input, 0, args.length - idx);
 		}
-		
+
 		File workingDir = new File(workingDirectory);
 		boolean clear = false;
-		if( workingDir.exists()) {
-			workingDir = new File( workingDir, "jarprocessor.verifier.temp"); //$NON-NLS-1$
+		if (workingDir.exists()) {
+			workingDir = new File(workingDir, "jarprocessor.verifier.temp"); //$NON-NLS-1$
 			clear = true;
 		}
-		
+
 		Verifier verifier = new Verifier();
 		verifier.verify(workingDir, input);
-		
-		if(clear)
+
+		if (clear)
 			workingDir.deleteOnExit();
 	}
 
 	public void verify(final File workingDirectory, String[] input) {
-		Properties options = new Properties();
+		options = new Options();
+		options.verbose = false;
+		options.repack = true; // We first unpack first during repack/sign phase
+		options.pack = true; // then we are verifying during the pack phase.
+		options.outputDir = workingDirectory.toString();
 
-		JarProcessor unpacker = new JarProcessor();
-		unpacker.addProcessStep(new UnpackStep(options, false));
-		unpacker.setWorkingDirectory(workingDirectory.getAbsolutePath());
+		Properties properties = new Properties();
 
 		/* There is no need to use a full processor to do the verification unless we want to verify nested jars as well.
 		 * So for now, use a custom processor to just call the verify step directly.
 		 */
-		final VerifyStep verifyStep = new VerifyStep(options, false);
+		final VerifyStep verifyStep = new VerifyStep(properties, false);
 		JarProcessor verifier = new JarProcessor() {
-			public File processJar(File inputFile) {
-				return verifyStep.postProcess(inputFile, workingDirectory, null);
+			public File processJar(File inputFile) throws IOException {
+				Iterator iterator = getStepIterator();
+				if (iterator.hasNext() && iterator.next() instanceof VerifyStep)
+					return verifyStep.postProcess(inputFile, workingDirectory, null);
+				//else we are unpacking, call super
+				return super.processJar(inputFile);
 			}
 		};
 
@@ -96,7 +101,7 @@ public class Verifier extends JarProcessorExecutor {
 			File inputFile = new File(input[i]);
 			if (inputFile.exists()) {
 				try {
-					process(inputFile, Utils.PACK_GZ_FILTER, true, unpacker, verifier);
+					process(inputFile, Utils.PACK_GZ_FILTER, true, verifier, properties);
 				} catch (FileNotFoundException e) {
 					e.printStackTrace();
 				}
@@ -104,4 +109,12 @@ public class Verifier extends JarProcessorExecutor {
 		}
 		Utils.clear(workingDirectory);
 	}
+
+	public void addPackStep(JarProcessor processor, Properties properties, JarProcessorExecutor.Options processOptions) {
+		processor.addProcessStep(new VerifyStep(properties, processOptions.verbose));
+	}
+
+	public void addPackUnpackStep(JarProcessor processor, Properties properties, Options processOptions) {
+		processor.addProcessStep(new UnpackStep(properties, processOptions.verbose));
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.jarprocessor/src/org/eclipse/internal/provisional/equinox/p2/jarprocessor/JarProcessor.java b/bundles/org.eclipse.equinox.p2.jarprocessor/src/org/eclipse/internal/provisional/equinox/p2/jarprocessor/JarProcessor.java
index d64a86b..15811e2 100644
--- a/bundles/org.eclipse.equinox.p2.jarprocessor/src/org/eclipse/internal/provisional/equinox/p2/jarprocessor/JarProcessor.java
+++ b/bundles/org.eclipse.equinox.p2.jarprocessor/src/org/eclipse/internal/provisional/equinox/p2/jarprocessor/JarProcessor.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2006, 2008 IBM Corporation and others.
+ * Copyright (c) 2006, 2009 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -74,6 +74,10 @@ public class JarProcessor {
 		steps.clear();
 	}
 
+	public Iterator getStepIterator() {
+		return steps.iterator();
+	}
+
 	/**
 	 * Recreate a jar file.  The replacements map specifies entry names to be replaced, the replacements are
 	 * expected to be found in directory.
diff --git a/bundles/org.eclipse.equinox.p2.jarprocessor/src/org/eclipse/internal/provisional/equinox/p2/jarprocessor/JarProcessorExecutor.java b/bundles/org.eclipse.equinox.p2.jarprocessor/src/org/eclipse/internal/provisional/equinox/p2/jarprocessor/JarProcessorExecutor.java
index 09c5779..332333f 100644
--- a/bundles/org.eclipse.equinox.p2.jarprocessor/src/org/eclipse/internal/provisional/equinox/p2/jarprocessor/JarProcessorExecutor.java
+++ b/bundles/org.eclipse.equinox.p2.jarprocessor/src/org/eclipse/internal/provisional/equinox/p2/jarprocessor/JarProcessorExecutor.java
@@ -13,6 +13,7 @@ package org.eclipse.internal.provisional.equinox.p2.jarprocessor;
 
 import java.io.*;
 import java.util.Properties;
+import java.util.Set;
 import java.util.zip.ZipException;
 import org.eclipse.equinox.internal.p2.jarprocessor.*;
 
@@ -28,7 +29,12 @@ public class JarProcessorExecutor {
 		public File input = null;
 	}
 
-	public void runJarProcessor(Options options) {
+	protected Options options = null;
+	private Set packExclusions = null;
+	private Set signExclusions = null;
+
+	public void runJarProcessor(Options processOptions) {
+		this.options = processOptions;
 		if (options.input.isFile() && options.input.getName().endsWith(".zip")) { //$NON-NLS-1$
 			ZipProcessor processor = new ZipProcessor();
 			processor.setWorkingDirectory(options.outputDir);
@@ -45,7 +51,6 @@ public class JarProcessorExecutor {
 			}
 		} else {
 			JarProcessor processor = new JarProcessor();
-			JarProcessor packProcessor = null;
 
 			processor.setWorkingDirectory(options.outputDir);
 			processor.setProcessAll(options.processAll);
@@ -67,28 +72,14 @@ public class JarProcessorExecutor {
 						Utils.close(in);
 					}
 				}
-			}
-
-			if (options.unpack)
-				addUnpackStep(processor, properties, options);
-
-			if (options.repack || (options.pack && options.signCommand != null))
-				addPackUnpackStep(processor, properties, options);
-
-			if (options.signCommand != null)
-				addSignStep(processor, properties, options);
 
-			if (options.pack) {
-				packProcessor = new JarProcessor();
-				packProcessor.setWorkingDirectory(options.outputDir);
-				packProcessor.setProcessAll(options.processAll);
-				packProcessor.setVerbose(options.verbose);
-				addPackStep(packProcessor, properties, options);
+				packExclusions = Utils.getPackExclusions(properties);
+				signExclusions = Utils.getSignExclusions(properties);
 			}
 
 			try {
 				FileFilter filter = createFileFilter(options);
-				process(options.input, filter, options.verbose, processor, packProcessor);
+				process(options.input, filter, options.verbose, processor, properties);
 			} catch (FileNotFoundException e) {
 				if (options.verbose)
 					e.printStackTrace();
@@ -96,11 +87,59 @@ public class JarProcessorExecutor {
 		}
 	}
 
-	protected FileFilter createFileFilter(Options options) {
-		return options.unpack ? Utils.PACK_GZ_FILTER : Utils.JAR_FILTER;
+	protected FileFilter createFileFilter(Options processOptions) {
+		return processOptions.unpack ? Utils.PACK_GZ_FILTER : Utils.JAR_FILTER;
+	}
+
+	protected String getRelativeName(File file) {
+		if (options.input == null)
+			return file.toString();
+		try {
+			File input = options.input.getCanonicalFile();
+			File subFile = file.getCanonicalFile();
+
+			if (input.isFile())
+				return subFile.getName();
+
+			if (!subFile.toString().startsWith(input.toString())) {
+				// the file is not under the base folder.
+				return file.toString();
+			}
+
+			File parent = subFile.getParentFile();
+			String result = subFile.getName();
+			while (!parent.equals(input)) {
+				result = parent.getName() + '/' + result;
+				parent = parent.getParentFile();
+			}
+			return result;
+
+		} catch (IOException e) {
+			return file.getName();
+		}
+	}
+
+	private boolean shouldPack(String name) {
+		if (!options.pack)
+			return false;
+		return packExclusions == null ? true : !packExclusions.contains(name);
+	}
+
+	private boolean shouldSign(String name) {
+		if (options.signCommand == null)
+			return false;
+		return signExclusions == null ? true : !signExclusions.contains(name);
+	}
+
+	private boolean shouldRepack(String name) {
+		if (shouldSign(name) && shouldPack(name))
+			return true;
+		if (!options.repack)
+			return false;
+		return packExclusions == null ? true : !packExclusions.contains(name);
 	}
 
-	protected void process(File input, FileFilter filter, boolean verbose, JarProcessor processor, JarProcessor packProcessor) throws FileNotFoundException {
+	protected void process(File input, FileFilter filter, boolean verbose, JarProcessor processor, Properties packProperties) throws FileNotFoundException {
 		if (!input.exists())
 			throw new FileNotFoundException();
 
@@ -113,12 +152,32 @@ public class JarProcessorExecutor {
 			return;
 		for (int i = 0; i < files.length; i++) {
 			if (files[i].isDirectory()) {
-				processDirectory(files[i], filter, verbose, processor, packProcessor);
+				processDirectory(files[i], filter, verbose, processor, packProperties);
 			} else if (filter.accept(files[i])) {
 				try {
-					File result = processor.processJar(files[i]);
-					if (packProcessor != null && result != null && result.exists()) {
-						packProcessor.processJar(result);
+					processor.clearProcessSteps();
+					if (options.unpack) {
+						addUnpackStep(processor, packProperties, options);
+						processor.processJar(files[i]);
+					} else {
+						String name = getRelativeName(files[i]);
+						boolean sign = shouldSign(name);
+						boolean repack = shouldRepack(name);
+
+						if (repack || sign) {
+							processor.clearProcessSteps();
+							if (repack)
+								addPackUnpackStep(processor, packProperties, options);
+							if (sign)
+								addSignStep(processor, packProperties, options);
+							files[i] = processor.processJar(files[i]);
+						}
+
+						if (shouldPack(name)) {
+							processor.clearProcessSteps();
+							addPackStep(processor, packProperties, options);
+							processor.processJar(files[i]);
+						}
 					}
 				} catch (IOException e) {
 					if (verbose)
@@ -128,32 +187,28 @@ public class JarProcessorExecutor {
 		}
 	}
 
-	protected void processDirectory(File input, FileFilter filter, boolean verbose, JarProcessor processor, JarProcessor packProcessor) throws FileNotFoundException {
+	protected void processDirectory(File input, FileFilter filter, boolean verbose, JarProcessor processor, Properties packProperties) throws FileNotFoundException {
 		if (!input.isDirectory())
 			return;
 		String dir = processor.getWorkingDirectory();
 		processor.setWorkingDirectory(dir + "/" + input.getName()); //$NON-NLS-1$
-		if (packProcessor != null)
-			packProcessor.setWorkingDirectory(dir + "/" + input.getName()); //$NON-NLS-1$
-		process(input, filter, verbose, processor, packProcessor);
+		process(input, filter, verbose, processor, packProperties);
 		processor.setWorkingDirectory(dir);
-		if (packProcessor != null)
-			packProcessor.setWorkingDirectory(dir);
 	}
 
-	public void addPackUnpackStep(JarProcessor processor, Properties properties, JarProcessorExecutor.Options options) {
-		processor.addProcessStep(new PackUnpackStep(properties, options.verbose));
+	public void addPackUnpackStep(JarProcessor processor, Properties properties, JarProcessorExecutor.Options processOptions) {
+		processor.addProcessStep(new PackUnpackStep(properties, processOptions.verbose));
 	}
 
-	public void addSignStep(JarProcessor processor, Properties properties, JarProcessorExecutor.Options options) {
-		processor.addProcessStep(new SignCommandStep(properties, options.signCommand, options.verbose));
+	public void addSignStep(JarProcessor processor, Properties properties, JarProcessorExecutor.Options processOptions) {
+		processor.addProcessStep(new SignCommandStep(properties, processOptions.signCommand, processOptions.verbose));
 	}
 
-	public void addPackStep(JarProcessor processor, Properties properties, JarProcessorExecutor.Options options) {
-		processor.addProcessStep(new PackStep(properties, options.verbose));
+	public void addPackStep(JarProcessor processor, Properties properties, JarProcessorExecutor.Options processOptions) {
+		processor.addProcessStep(new PackStep(properties, processOptions.verbose));
 	}
 
-	public void addUnpackStep(JarProcessor processor, Properties properties, JarProcessorExecutor.Options options) {
-		processor.addProcessStep(new UnpackStep(properties, options.verbose));
+	public void addUnpackStep(JarProcessor processor, Properties properties, JarProcessorExecutor.Options processOptions) {
+		processor.addProcessStep(new UnpackStep(properties, processOptions.verbose));
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.jarprocessor/src_ant/org/eclipse/equinox/internal/p2/jarprocessor/ant/AntBasedProcessorExecutor.java b/bundles/org.eclipse.equinox.p2.jarprocessor/src_ant/org/eclipse/equinox/internal/p2/jarprocessor/ant/AntBasedProcessorExecutor.java
index bb1fbf9..7639262 100644
--- a/bundles/org.eclipse.equinox.p2.jarprocessor/src_ant/org/eclipse/equinox/internal/p2/jarprocessor/ant/AntBasedProcessorExecutor.java
+++ b/bundles/org.eclipse.equinox.p2.jarprocessor/src_ant/org/eclipse/equinox/internal/p2/jarprocessor/ant/AntBasedProcessorExecutor.java
@@ -10,13 +10,8 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.jarprocessor.ant;
 
-import java.io.File;
-import java.io.FileFilter;
-import java.io.FileNotFoundException;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Properties;
-
+import java.io.*;
+import java.util.*;
 import org.apache.tools.ant.Project;
 import org.eclipse.equinox.internal.p2.jarprocessor.unsigner.UnsignCommand;
 import org.eclipse.internal.provisional.equinox.p2.jarprocessor.JarProcessor;
@@ -29,7 +24,7 @@ public class AntBasedProcessorExecutor extends JarProcessorExecutor {
 	private List inputFiles;
 	private HashSet filterSet = null;
 	private FileFilter baseFilter = null;
-	
+
 	public AntBasedProcessorExecutor(Properties signArguments, Project project, String antTaskName) {
 		this.signArguments = signArguments;
 		this.project = project;
@@ -54,15 +49,15 @@ public class AntBasedProcessorExecutor extends JarProcessorExecutor {
 		return filterSet;
 	}
 
-	protected void processDirectory(File input, FileFilter filter, boolean verbose, JarProcessor processor, JarProcessor packProcessor) throws FileNotFoundException{
-		if (filterSet != null && filterSet.contains(input)){
-			File [] files = input.listFiles();
+	protected void processDirectory(File input, FileFilter filter, boolean verbose, JarProcessor processor, Properties packProperties) throws FileNotFoundException {
+		if (filterSet != null && filterSet.contains(input)) {
+			File[] files = input.listFiles();
 			for (int i = 0; i < files.length; i++) {
 				if (files[i].isDirectory() || baseFilter.accept(files[i]))
 					filterSet.add(files[i]);
 			}
 		}
-		super.processDirectory(input, filter, verbose, processor, packProcessor);
+		super.processDirectory(input, filter, verbose, processor, packProperties);
 	}
 
 	public void addSignStep(JarProcessor processor, Properties properties, Options options) {
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/jarprocessor/JarProcessorTests.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/jarprocessor/JarProcessorTests.java
index 0d07272..7c0e274 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/jarprocessor/JarProcessorTests.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/jarprocessor/JarProcessorTests.java
@@ -11,7 +11,6 @@
 package org.eclipse.equinox.p2.tests.jarprocessor;
 
 import java.io.*;
-import java.util.Properties;
 import org.eclipse.core.runtime.Platform;
 import org.eclipse.equinox.internal.p2.jarprocessor.PackStep;
 import org.eclipse.equinox.internal.p2.jarprocessor.verifier.Verifier;
@@ -33,10 +32,14 @@ public class JarProcessorTests extends AbstractProvisioningTest {
 		Verifier verifier = new Verifier() {
 			@Override
 			public void verify(File workingDirectory, String[] input) {
-				Properties options = new Properties();
+				options = new Options();
+				options.verbose = false;
+				options.pack = true; // we are verifying during the pack phase.
+				options.outputDir = workingDirectory.toString();
+				options.input = workingDirectory;
+
 				JarProcessor processor = new JarProcessor();
 				processor.setWorkingDirectory(workingDirectory.getAbsolutePath());
-				processor.addProcessStep(new VerifyStep(options, false));
 
 				FileFilter filter = new FileFilter() {
 					public boolean accept(File pathname) {

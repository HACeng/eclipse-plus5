commit 73a3b71a481d7a41cabf10f2fa4434928bc9105b
Author: John Arthorne <johna>
Date:   Fri Jan 11 22:31:58 2008 +0000

    Bug 214694 [prov] API - Any API that calls loadRepository should include a progress monitor in its signature

21	17	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
1	1	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/IPlanner.java
1	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/full/End2EndTest.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
6	5	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/QueryableUpdates.java
1	1	bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/p2/updatechecker/UpdateChecker.java
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
index 198735d..794f881 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
@@ -28,7 +28,7 @@ import org.eclipse.osgi.service.resolver.VersionRange;
 import org.eclipse.osgi.util.NLS;
 
 public class SimplePlanner implements IPlanner {
-	static final int ExpandWork = 10;
+	static final int ExpandWork = 12;
 
 	public ProvisioningPlan getInstallPlan(IInstallableUnit[] installRoots, Profile profile, URL[] metadataRepositories, IProgressMonitor monitor) {
 		SubMonitor sub = SubMonitor.convert(monitor, ExpandWork);
@@ -49,9 +49,9 @@ public class SimplePlanner implements IPlanner {
 				return new ProvisioningPlan(result);
 			}
 			//Compute the complete closure of things to install to successfully install the installRoots.
-			NewDependencyExpander expander = new NewDependencyExpander(installRoots, alreadyInstalled, gatherAvailableInstallableUnits(installRoots, metadataRepositories), profile, true);
-			//			NewDependencyExpander expander = new NewDependencyExpander(installRoots, alreadyInstalled, gatherAvailableInstallableUnits(), profile, true);
-			IStatus expanderResult = expander.expand(sub.newChild(ExpandWork));
+			IInstallableUnit[] allUnits = gatherAvailableInstallableUnits(installRoots, metadataRepositories, sub.newChild(ExpandWork / 2));
+			NewDependencyExpander expander = new NewDependencyExpander(installRoots, alreadyInstalled, allUnits, profile, true);
+			IStatus expanderResult = expander.expand(sub.newChild(ExpandWork / 2));
 			if (!expanderResult.isOK()) {
 				result.merge(expanderResult);
 				return new ProvisioningPlan(result);
@@ -132,8 +132,8 @@ public class SimplePlanner implements IPlanner {
 			//Also if the profile changes (locations are being modified, etc), should not we do a full uninstall then an install?
 			//Maybe it depends on the kind of changes in a profile
 			//We need to get all the ius that were part of the profile and give that to be what to become
-			NewDependencyExpander toExpander = new NewDependencyExpander(new IInstallableUnit[] {target}, null, gatherAvailableInstallableUnits(new IInstallableUnit[] {target}, metadataRepositories), profile, true);
-			toExpander.expand(sub.newChild(ExpandWork));
+			NewDependencyExpander toExpander = new NewDependencyExpander(new IInstallableUnit[] {target}, null, gatherAvailableInstallableUnits(new IInstallableUnit[] {target}, metadataRepositories, sub.newChild(ExpandWork / 2)), profile, true);
+			toExpander.expand(sub.newChild(ExpandWork / 2));
 			ResolutionHelper newStateHelper = new ResolutionHelper(profile.getSelectionContext(), toExpander.getRecommendations());
 			Collection newState = newStateHelper.attachCUs(toExpander.getAllInstallableUnits());
 			newState.remove(target);
@@ -185,13 +185,14 @@ public class SimplePlanner implements IPlanner {
 			Collection oldState = oldStateHelper.attachCUs(Arrays.asList(alreadyInstalled));
 
 			NewDependencyExpander expander = new NewDependencyExpander(uninstallRoots, new IInstallableUnit[0], alreadyInstalled, profile, true);
-			expander.expand(sub.newChild(ExpandWork / 2));
+			expander.expand(sub.newChild(ExpandWork / 3));
 			Collection toUninstallClosure = new ResolutionHelper(profile.getSelectionContext(), null).attachCUs(expander.getAllInstallableUnits());
 
 			Collection remainingIUs = new HashSet(oldState);
 			remainingIUs.removeAll(toUninstallClosure);
-			NewDependencyExpander finalExpander = new NewDependencyExpander(null, (IInstallableUnit[]) remainingIUs.toArray(new IInstallableUnit[remainingIUs.size()]), gatherAvailableInstallableUnits(uninstallRoots, metadataRepositories), profile, true);
-			finalExpander.expand(sub.newChild(ExpandWork / 2));
+			IInstallableUnit[] allUnits = gatherAvailableInstallableUnits(uninstallRoots, metadataRepositories, sub.newChild(ExpandWork / 3));
+			NewDependencyExpander finalExpander = new NewDependencyExpander(null, (IInstallableUnit[]) remainingIUs.toArray(new IInstallableUnit[remainingIUs.size()]), allUnits, profile, true);
+			finalExpander.expand(sub.newChild(ExpandWork / 3));
 			ResolutionHelper newStateHelper = new ResolutionHelper(profile.getSelectionContext(), null);
 			Collection newState = newStateHelper.attachCUs(finalExpander.getAllInstallableUnits());
 
@@ -208,7 +209,7 @@ public class SimplePlanner implements IPlanner {
 		}
 	}
 
-	protected IInstallableUnit[] gatherAvailableInstallableUnits(IInstallableUnit[] additionalSource, URL[] repositories) {
+	protected IInstallableUnit[] gatherAvailableInstallableUnits(IInstallableUnit[] additionalSource, URL[] repositories, IProgressMonitor monitor) {
 		List results = new ArrayList();
 		if (additionalSource != null) {
 			for (int i = 0; i < additionalSource.length; i++) {
@@ -220,16 +221,18 @@ public class SimplePlanner implements IPlanner {
 		if (repositories == null)
 			repositories = repoMgr.getKnownRepositories(IMetadataRepositoryManager.REPOSITORIES_ALL);
 
+		SubMonitor sub = SubMonitor.convert(monitor, repositories.length * 200);
 		for (int i = 0; i < repositories.length; i++) {
 			try {
-				IMetadataRepository repository = repoMgr.loadRepository(repositories[i], null);
-				Collector matches = repository.query(new InstallableUnitQuery(null, VersionRange.emptyRange), new Collector(), null);
+				IMetadataRepository repository = repoMgr.loadRepository(repositories[i], sub.newChild(100));
+				Collector matches = repository.query(new InstallableUnitQuery(null, VersionRange.emptyRange), new Collector(), sub.newChild(100));
 				for (Iterator it = matches.iterator(); it.hasNext();)
 					results.add(it.next());
 			} catch (ProvisionException e) {
 				//skip unreadable repositories
 			}
 		}
+		sub.done();
 		return (IInstallableUnit[]) results.toArray(new IInstallableUnit[results.size()]);
 	}
 
@@ -246,7 +249,7 @@ public class SimplePlanner implements IPlanner {
 			Collection oldState = oldStateHelper.attachCUs(Arrays.asList(alreadyInstalled));
 
 			NewDependencyExpander expander = new NewDependencyExpander(uninstallRoots, new IInstallableUnit[0], alreadyInstalled, profile, true);
-			expander.expand(sub.newChild(ExpandWork / 2));
+			expander.expand(sub.newChild(ExpandWork / 3));
 			Collection toUninstallClosure = new ResolutionHelper(profile.getSelectionContext(), null).attachCUs(expander.getAllInstallableUnits());
 
 			//add the new set.
@@ -255,8 +258,9 @@ public class SimplePlanner implements IPlanner {
 			//		for (int i = 0; i < updateRoots.length; i++) {
 			//			remainingIUs.add(updateRoots[i]);
 			//		}
-			NewDependencyExpander finalExpander = new NewDependencyExpander(toInstall, (IInstallableUnit[]) remainingIUs.toArray(new IInstallableUnit[remainingIUs.size()]), gatherAvailableInstallableUnits(null, metadataRepositories), profile, true);
-			finalExpander.expand(sub.newChild(ExpandWork / 2));
+			IInstallableUnit[] allUnits = gatherAvailableInstallableUnits(null, metadataRepositories, sub.newChild(ExpandWork / 3));
+			NewDependencyExpander finalExpander = new NewDependencyExpander(toInstall, (IInstallableUnit[]) remainingIUs.toArray(new IInstallableUnit[remainingIUs.size()]), allUnits, profile, true);
+			finalExpander.expand(sub.newChild(ExpandWork / 3));
 			ResolutionHelper newStateHelper = new ResolutionHelper(profile.getSelectionContext(), null);
 			Collection newState = newStateHelper.attachCUs(finalExpander.getAllInstallableUnits());
 
@@ -266,8 +270,8 @@ public class SimplePlanner implements IPlanner {
 		}
 	}
 
-	public IInstallableUnit[] updatesFor(IInstallableUnit toUpdate, URL[] metadataRepositories) {
-		IInstallableUnit[] allius = gatherAvailableInstallableUnits(null, metadataRepositories);
+	public IInstallableUnit[] updatesFor(IInstallableUnit toUpdate, URL[] metadataRepositories, IProgressMonitor monitor) {
+		IInstallableUnit[] allius = gatherAvailableInstallableUnits(null, metadataRepositories, monitor);
 		Set updates = new HashSet();
 		for (int i = 0; i < allius.length; i++) {
 			if (toUpdate.getId().equals(allius[i].getProperty(IInstallableUnit.PROP_UPDATE_FROM))) {
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/IPlanner.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/IPlanner.java
index 41df8e7..8e9733d 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/IPlanner.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/IPlanner.java
@@ -47,6 +47,6 @@ public interface IPlanner {
 
 	public ProvisioningPlan getRevertPlan(IInstallableUnit previous, Profile profile, URL[] metadataRepositories, IProgressMonitor monitor);
 
-	public IInstallableUnit[] updatesFor(IInstallableUnit toUpdate, URL[] metadataRepositories);
+	public IInstallableUnit[] updatesFor(IInstallableUnit toUpdate, URL[] metadataRepositories, IProgressMonitor monitor);
 
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/full/End2EndTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/full/End2EndTest.java
index 95e081b..8701088 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/full/End2EndTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/full/End2EndTest.java
@@ -109,7 +109,7 @@ public class End2EndTest extends AbstractProvisioningTest {
 		assertNotNull(getIU("sdk"));
 
 		//Test replace
-		s = director.replace(new IInstallableUnit[] {getIU("sdk", new Version("3.3.0"))}, planner.updatesFor(getIU("sdk", new Version("3.3.0")), null), profile2, null, new NullProgressMonitor());
+		s = director.replace(new IInstallableUnit[] {getIU("sdk", new Version("3.3.0"))}, planner.updatesFor(getIU("sdk", new Version("3.3.0")), null, null), profile2, null, new NullProgressMonitor());
 		assertOK(s);
 		assertProfileContainsAll("", profile2, new IInstallableUnit[] {getIU("sdk", new Version("3.4.0"))});
 		assertNotIUs(new IInstallableUnit[] {getIU("sdk", new Version("3.3.0"))}, getInstallableUnits(profile2));
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
index 0e726dc..d42aa37 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
@@ -188,7 +188,7 @@ public class ProvisioningUtil {
 	 */
 	public static IInstallableUnit[] updatesFor(IInstallableUnit toUpdate, IProgressMonitor monitor) throws ProvisionException {
 		Assert.isNotNull(toUpdate);
-		return getPlanner().updatesFor(toUpdate, null);
+		return getPlanner().updatesFor(toUpdate, null, monitor);
 	}
 
 	/*
@@ -201,7 +201,7 @@ public class ProvisioningUtil {
 		IPlanner planner = getPlanner();
 		ArrayList allUpdates = new ArrayList();
 		for (int i = 0; i < toUpdate.length; i++) {
-			IInstallableUnit[] updates = planner.updatesFor(toUpdate[i], null);
+			IInstallableUnit[] updates = planner.updatesFor(toUpdate[i], null, monitor);
 			for (int j = 0; j < updates.length; j++)
 				allUpdates.add(updates[j]);
 		}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/QueryableUpdates.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/QueryableUpdates.java
index 47834eb..ed96187 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/QueryableUpdates.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/QueryableUpdates.java
@@ -32,6 +32,10 @@ public class QueryableUpdates implements IQueryable {
 	}
 
 	public Collector query(Query query, Collector result, IProgressMonitor monitor) {
+		if (monitor == null)
+			monitor = new NullProgressMonitor();
+		int totalWork = 2000;
+		monitor.beginTask(ProvUIMessages.QueryableUpdates_UpdateListProgress, totalWork);
 		IPlanner planner = (IPlanner) ServiceHelper.getService(ProvUIActivator.getContext(), IPlanner.class.getName());
 		if (planner == null) {
 			ProvUI.reportStatus(new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, ProvUIMessages.ProvisioningUtil_NoPlannerFound));
@@ -39,17 +43,14 @@ public class QueryableUpdates implements IQueryable {
 		}
 		ArrayList allUpdates = new ArrayList();
 		for (int i = 0; i < iusToUpdate.length; i++) {
-			IInstallableUnit[] updates = planner.updatesFor(iusToUpdate[i], null);
+			IInstallableUnit[] updates = planner.updatesFor(iusToUpdate[i], null, new SubProgressMonitor(monitor, totalWork / 2 / iusToUpdate.length));
 			for (int j = 0; j < updates.length; j++)
 				allUpdates.add(updates[j]);
 		}
-		if (monitor == null)
-			monitor = new NullProgressMonitor();
-		monitor.beginTask(ProvUIMessages.QueryableUpdates_UpdateListProgress, allUpdates.size());
 		for (int i = 0; i < allUpdates.size(); i++) {
 			if (query.isMatch(allUpdates.get(i)))
 				result.accept(allUpdates.get(i));
-			monitor.worked(1);
+			monitor.worked(totalWork / 2 / allUpdates.size());
 		}
 		monitor.done();
 		return result;
diff --git a/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/p2/updatechecker/UpdateChecker.java b/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/p2/updatechecker/UpdateChecker.java
index 94a16ba..d5d0628 100644
--- a/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/p2/updatechecker/UpdateChecker.java
+++ b/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/p2/updatechecker/UpdateChecker.java
@@ -117,7 +117,7 @@ public class UpdateChecker {
 		Iterator iter = profile.query(InstallableUnitQuery.ANY, new Collector(), null).iterator();
 		while (iter.hasNext()) {
 			IInstallableUnit iu = (IInstallableUnit) iter.next();
-			IInstallableUnit[] replacements = getPlanner().updatesFor(iu, null);
+			IInstallableUnit[] replacements = getPlanner().updatesFor(iu, null, null);
 			if (replacements.length > 0)
 				iusWithUpdates.add(iu);
 		}

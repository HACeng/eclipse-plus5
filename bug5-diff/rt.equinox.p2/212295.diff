commit 3b6b95efe521ee47401c62fc314ac0a6c5f3cf63
Author: Susan Franklin <sfranklin>
Date:   Wed Dec 12 17:16:47 2007 +0000

    Bug 212295 - temp fix for M4

8	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java
7	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java
index 1e00b4b..a5f3362 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java
@@ -101,7 +101,7 @@ public abstract class ProfileModificationWizardPage extends WizardPage {
 		listViewer.setContentProvider(contentProvider);
 		listViewer.setInput(new Object());
 		listViewer.setLabelProvider(new IUDetailsLabelProvider(getColumnConfig()));
-		listViewer.setAllChecked(true);
+		setInitialSelections();
 		selectedIUsChanged();
 		setControl(composite);
 		Dialog.applyDialogFont(composite);
@@ -172,4 +172,11 @@ public abstract class ProfileModificationWizardPage extends WizardPage {
 	protected void selectedIUsChanged() {
 		setPageComplete(getSelectedIUs().length > 0);
 	}
+
+	protected void setInitialSelections() {
+		// The default is to select everything because 
+		// in most cases, the user has selected exactly
+		// what they want before this page opens.
+		listViewer.setAllChecked(true);
+	}
 }
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
index 90418c2..2eeb08f 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
@@ -93,4 +93,11 @@ public class UpdateWizardPage extends UpdateOrInstallWizardPage {
 		}
 		return null;
 	}
+
+	protected void setInitialSelections() {
+		// Don't select anything to work around issues such as
+		// https://bugs.eclipse.org/bugs/show_bug.cgi?id=208470
+		// TODO when not showing the latest version we eventually
+		// want to select only the latest version.
+	}
 }
\ No newline at end of file
commit 360c05b145a952a1d305e1ea2d8ef30fae2cc040
Author: Susan Franklin <sfranklin>
Date:   Thu Jan 10 18:27:38 2008 +0000

    Bug 212295 - [prov] [ui] available updates still showing multiple versions of same IU
    
    (Also includes rename of IProvElementQueryProvider to IQueryProvider)

1	0	bundles/org.eclipse.equinox.p2.ui.admin/META-INF/MANIFEST.MF
1	1	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
41	19	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java
3	3	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/p2/ui/admin/ProvAdminUIActivator.java
40	16	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
3	3	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
6	4	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
1	1	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdatesPopup.java
1	0	bundles/org.eclipse.equinox.p2.ui/META-INF/MANIFEST.MF
1	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
3	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/RevertProfileWizardPage.java
28	12	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
1	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
6	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UpdateAction.java
3	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/RevertWizard.java
7	7	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateAndInstallGroup.java
6	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateWizard.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ArtifactRepositories.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/CategoryElement.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/IUVersionsElement.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/MetadataRepositories.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/MetadataRepositoryElement.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ProfileElement.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/Profiles.java
3	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/QueriedElementCollector.java
3	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/AvailableIUCollector.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/CategoryElementCollector.java
0	28	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/IProvElementQueryProvider.java
28	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/IQueryProvider.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/InstalledIUCollector.java
17	11	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/LatestIUVersionCollector.java
38	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/LatestIUVersionElementCollector.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/OtherIUVersionsCollector.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/ProfileElementCollector.java
3	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/QueriedElement.java
57	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/QueryableUpdates.java
2	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/RollbackIUCollector.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/AvailableIUContentProvider.java
3	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/DeferredQueryContentProvider.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/RepositoryContentProvider.java
3	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/StructuredViewerProvisioningListener.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.ui.admin/META-INF/MANIFEST.MF
index d1af3b8..3823e0d 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/META-INF/MANIFEST.MF
@@ -26,6 +26,7 @@ Import-Package: org.eclipse.equinox.internal.p2.core.helpers,
  org.eclipse.equinox.p2.ui.operations,
  org.eclipse.equinox.p2.ui.query,
  org.eclipse.equinox.p2.ui.viewers,
+ org.eclipse.equinox.p2.updatechecker,
  org.eclipse.osgi.service.environment;version="1.0.0",
  org.eclipse.osgi.util;version="1.1.0",
  org.osgi.framework;version="1.3.0"
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
index 4cbf484..bfd149a 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
@@ -158,7 +158,7 @@ public class ProfilesView extends ProvView {
 		addProfileAction = new AddProfileAction();
 		removeProfileAction = new RemoveProfileAction();
 		uninstallAction = new UninstallAction(viewer, null, getProfileChooser(), getShell());
-		updateAction = new UpdateAction(viewer, null, getProfileChooser(), null, getShell());
+		updateAction = new UpdateAction(viewer, null, getProfileChooser(), null, ProvAdminUIActivator.getDefault().getQueryProvider(), getShell());
 		propertiesAction = new PropertyDialogAction(this.getSite(), viewer);
 		installAction = new InstallIntoProfileAction();
 
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java
index 919dfcc..52ab4a9 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java
@@ -12,6 +12,7 @@ package org.eclipse.equinox.internal.p2.ui.admin;
 
 import org.eclipse.equinox.internal.p2.ui.admin.preferences.PreferenceConstants;
 import org.eclipse.equinox.p2.artifact.repository.IArtifactRepositoryManager;
+import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.metadata.MetadataFactory;
@@ -22,7 +23,9 @@ import org.eclipse.equinox.p2.query.*;
 import org.eclipse.equinox.p2.ui.ProvUI;
 import org.eclipse.equinox.p2.ui.admin.ProvAdminUIActivator;
 import org.eclipse.equinox.p2.ui.model.*;
+import org.eclipse.equinox.p2.ui.operations.ProvisioningUtil;
 import org.eclipse.equinox.p2.ui.query.*;
+import org.eclipse.equinox.p2.updatechecker.UpdateEvent;
 import org.eclipse.jface.preference.IPreferenceStore;
 
 /**
@@ -31,7 +34,7 @@ import org.eclipse.jface.preference.IPreferenceStore;
  * @since 3.4
  */
 
-public class ProvAdminQueryProvider implements IProvElementQueryProvider {
+public class ProvAdminQueryProvider implements IQueryProvider {
 
 	private Query allQuery = new Query() {
 		public boolean isMatch(Object candidate) {
@@ -40,7 +43,7 @@ public class ProvAdminQueryProvider implements IProvElementQueryProvider {
 
 	};
 
-	public ElementQueryDescriptor getQueryDescriptor(QueriedElement element, int queryType) {
+	public ElementQueryDescriptor getQueryDescriptor(Object element, int queryType) {
 		IQueryable queryable;
 		IPreferenceStore store = ProvAdminUIActivator.getDefault().getPreferenceStore();
 		boolean showGroupsOnly = store.getBoolean(PreferenceConstants.PREF_SHOW_GROUPS_ONLY);
@@ -53,30 +56,30 @@ public class ProvAdminQueryProvider implements IProvElementQueryProvider {
 		Query query;
 		Profile profile;
 		switch (queryType) {
-			case IProvElementQueryProvider.ARTIFACT_REPOS :
+			case IQueryProvider.ARTIFACT_REPOS :
 				queryable = new QueryableArtifactRepositoryManager();
 				query = hideSystem ? new FilteredRepositoryQuery(IArtifactRepositoryManager.REPOSITORIES_PUBLIC_ONLY) : allQuery;
 				return new ElementQueryDescriptor(queryable, query, new QueriedElementCollector(this, queryable));
-			case IProvElementQueryProvider.AVAILABLE_IUS :
+			case IQueryProvider.AVAILABLE_IUS :
 				// Is it a rollback repository?
 				if (element instanceof RollbackRepositoryElement) {
 					Query profileQuery = new InstallableUnitQuery(((RollbackRepositoryElement) element).getProfileId());
-					return new ElementQueryDescriptor(element.getQueryable(), profileQuery, new AvailableIUCollector(this, element.getQueryable(), false));
+					return new ElementQueryDescriptor(((RollbackRepositoryElement) element).getQueryable(), profileQuery, new AvailableIUCollector(this, ((RollbackRepositoryElement) element).getQueryable(), false));
 				}
 				// It is a regular repository.
 				// What should we show as a child of a repository?
 				if (element instanceof MetadataRepositoryElement) {
 					if (useCategories)
 						// We are using categories, group into categories first.
-						return new ElementQueryDescriptor(element.getQueryable(), categoryQuery, new CategoryElementCollector(this, element.getQueryable(), false));
+						return new ElementQueryDescriptor(((MetadataRepositoryElement) element).getQueryable(), categoryQuery, new CategoryElementCollector(this, ((MetadataRepositoryElement) element).getQueryable(), false));
 					if (showGroupsOnly)
 						// Query all groups and use the query result to optionally select the latest version only
-						return new ElementQueryDescriptor(element.getQueryable(), groupQuery, showLatest ? new LatestIUVersionCollector(this, element.getQueryable(), false) : new AvailableIUCollector(this, element.getQueryable(), false));
+						return new ElementQueryDescriptor(((MetadataRepositoryElement) element).getQueryable(), groupQuery, showLatest ? new LatestIUVersionElementCollector(this, ((MetadataRepositoryElement) element).getQueryable(), false) : new AvailableIUCollector(this, ((MetadataRepositoryElement) element).getQueryable(), false));
 					if (showLatest)
 						// We are not querying groups, but we are showing the latest version only
-						return new ElementQueryDescriptor(element.getQueryable(), allQuery, new LatestIUVersionCollector(this, element.getQueryable(), false));
+						return new ElementQueryDescriptor(((MetadataRepositoryElement) element).getQueryable(), allQuery, new LatestIUVersionElementCollector(this, ((MetadataRepositoryElement) element).getQueryable(), false));
 					// Show 'em all!
-					return new ElementQueryDescriptor(element.getQueryable(), allQuery, new AvailableIUCollector(this, element.getQueryable(), false));
+					return new ElementQueryDescriptor(((MetadataRepositoryElement) element).getQueryable(), allQuery, new AvailableIUCollector(this, ((MetadataRepositoryElement) element).getQueryable(), false));
 				}
 				// Things have been grouped by category, now what?
 				if (element instanceof CategoryElement) {
@@ -88,23 +91,42 @@ public class ProvAdminQueryProvider implements IProvElementQueryProvider {
 
 					if (showGroupsOnly)
 						// Query all groups and use the query result to optionally select the latest version only
-						return new ElementQueryDescriptor(element.getQueryable(), new CompoundQuery(new Query[] {new CompoundQuery(new Query[] {groupQuery, categoryQuery}, false), membersOfCategoryQuery}, true), showLatest ? new LatestIUVersionCollector(this, element.getQueryable(), true) : new AvailableIUCollector(this, element.getQueryable(), true));
+						return new ElementQueryDescriptor(((CategoryElement) element).getQueryable(), new CompoundQuery(new Query[] {new CompoundQuery(new Query[] {groupQuery, categoryQuery}, false), membersOfCategoryQuery}, true), showLatest ? new LatestIUVersionElementCollector(this, ((CategoryElement) element).getQueryable(), true) : new AvailableIUCollector(this, ((CategoryElement) element).getQueryable(), true));
 					if (showLatest)
 						// We are not querying groups, but we are showing the latest version only
-						return new ElementQueryDescriptor(element.getQueryable(), membersOfCategoryQuery, new LatestIUVersionCollector(this, element.getQueryable(), true));
+						return new ElementQueryDescriptor(((CategoryElement) element).getQueryable(), membersOfCategoryQuery, new LatestIUVersionElementCollector(this, ((CategoryElement) element).getQueryable(), true));
 					// Show 'em all!
-					return new ElementQueryDescriptor(element.getQueryable(), membersOfCategoryQuery, new AvailableIUCollector(this, element.getQueryable(), true));
+					return new ElementQueryDescriptor(((CategoryElement) element).getQueryable(), membersOfCategoryQuery, new AvailableIUCollector(this, ((CategoryElement) element).getQueryable(), true));
 				}
 				// We've already collapsed all versions, show the rest
 				if (element instanceof IUVersionsElement) {
 					IInstallableUnit iu = ((IUVersionsElement) element).getIU();
-					return new ElementQueryDescriptor(element.getQueryable(), new InstallableUnitQuery(iu.getId()), new OtherIUVersionsCollector(iu, this, element.getQueryable()));
+					return new ElementQueryDescriptor(((IUVersionsElement) element).getQueryable(), new InstallableUnitQuery(iu.getId()), new OtherIUVersionsCollector(iu, this, ((IUVersionsElement) element).getQueryable()));
 				}
-			case IProvElementQueryProvider.AVAILABLE_UPDATES :
+			case IQueryProvider.AVAILABLE_UPDATES :
 				profile = (Profile) ProvUI.getAdapter(element, Profile.class);
-				return new ElementQueryDescriptor(profile, new IUProfilePropertyQuery(profile, IInstallableUnit.PROP_PROFILE_ROOT_IU, Boolean.toString(true)), new InstalledIUCollector(this, profile));
-
-			case IProvElementQueryProvider.INSTALLED_IUS :
+				IInstallableUnit[] toUpdate;
+				Collector collector;
+				if (profile != null) {
+					collector = profile.query(new IUProfilePropertyQuery(profile, IInstallableUnit.PROP_PROFILE_ROOT_IU, Boolean.toString(true)), new Collector(), null);
+					toUpdate = (IInstallableUnit[]) collector.toArray(IInstallableUnit.class);
+				} else if (element instanceof UpdateEvent) {
+					try {
+						profile = ProvisioningUtil.getProfile(((UpdateEvent) element).getProfileId());
+					} catch (ProvisionException e) {
+						ProvUI.handleException(e, null);
+						return null;
+					}
+					toUpdate = ((UpdateEvent) element).getIUs();
+				} else
+					return null;
+				QueryableUpdates updateQueryable = new QueryableUpdates(toUpdate);
+				if (showLatest)
+					collector = new LatestIUVersionCollector(this, updateQueryable, useCategories);
+				else
+					collector = new Collector();
+				return new ElementQueryDescriptor(updateQueryable, allQuery, collector);
+			case IQueryProvider.INSTALLED_IUS :
 				profile = (Profile) ProvUI.getAdapter(element, Profile.class);
 				if (showRootsOnly)
 					query = new IUProfilePropertyQuery(profile, IInstallableUnit.PROP_PROFILE_ROOT_IU, Boolean.toString(true));
@@ -113,11 +135,11 @@ public class ProvAdminQueryProvider implements IProvElementQueryProvider {
 				if (showGroupsOnly)
 					return new ElementQueryDescriptor(profile, new CompoundQuery(new Query[] {groupQuery, query}, true), new InstalledIUCollector(this, profile));
 				return new ElementQueryDescriptor(profile, query, new InstalledIUCollector(this, profile));
-			case IProvElementQueryProvider.METADATA_REPOS :
+			case IQueryProvider.METADATA_REPOS :
 				queryable = new QueryableMetadataRepositoryManager();
 				query = hideSystem ? new FilteredRepositoryQuery(IMetadataRepositoryManager.REPOSITORIES_NON_SYSTEM) : allQuery;
 				return new ElementQueryDescriptor(queryable, query, new QueriedElementCollector(this, queryable));
-			case IProvElementQueryProvider.PROFILES :
+			case IQueryProvider.PROFILES :
 				queryable = new QueryableProfileRegistry();
 				return new ElementQueryDescriptor(queryable, new Query() {
 					public boolean isMatch(Object candidate) {
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/p2/ui/admin/ProvAdminUIActivator.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/p2/ui/admin/ProvAdminUIActivator.java
index 245dfd0..5868a50 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/p2/ui/admin/ProvAdminUIActivator.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/p2/ui/admin/ProvAdminUIActivator.java
@@ -11,7 +11,7 @@
 package org.eclipse.equinox.p2.ui.admin;
 
 import org.eclipse.equinox.internal.p2.ui.admin.ProvAdminQueryProvider;
-import org.eclipse.equinox.p2.ui.query.IProvElementQueryProvider;
+import org.eclipse.equinox.p2.ui.query.IQueryProvider;
 import org.eclipse.jface.resource.ImageDescriptor;
 import org.eclipse.ui.plugin.AbstractUIPlugin;
 import org.osgi.framework.BundleContext;
@@ -27,7 +27,7 @@ public class ProvAdminUIActivator extends AbstractUIPlugin {
 	public static final String PLUGIN_ID = "org.eclipse.equinox.p2.ui.admin"; //$NON-NLS-1$
 	public static final String PERSPECTIVE_ID = "org.eclipse.equinox.p2.ui.admin.ProvisioningPerspective"; //$NON-NLS-1$
 
-	private IProvElementQueryProvider queryProvider;
+	private IQueryProvider queryProvider;
 
 	public static BundleContext getContext() {
 		return context;
@@ -74,7 +74,7 @@ public class ProvAdminUIActivator extends AbstractUIPlugin {
 		super.stop(bundleContext);
 	}
 
-	public IProvElementQueryProvider getQueryProvider() {
+	public IQueryProvider getQueryProvider() {
 		if (queryProvider == null)
 			queryProvider = new ProvAdminQueryProvider();
 		return queryProvider;
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
index 3b250de..70645f3 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
@@ -12,6 +12,7 @@ package org.eclipse.equinox.internal.p2.ui.sdk;
 
 import org.eclipse.equinox.internal.p2.ui.sdk.prefs.PreferenceConstants;
 import org.eclipse.equinox.p2.artifact.repository.IArtifactRepositoryManager;
+import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.metadata.MetadataFactory;
@@ -21,8 +22,9 @@ import org.eclipse.equinox.p2.metadata.repository.IMetadataRepositoryManager;
 import org.eclipse.equinox.p2.query.*;
 import org.eclipse.equinox.p2.ui.ProvUI;
 import org.eclipse.equinox.p2.ui.model.*;
+import org.eclipse.equinox.p2.ui.operations.ProvisioningUtil;
 import org.eclipse.equinox.p2.ui.query.*;
-import org.eclipse.jface.preference.IPreferenceStore;
+import org.eclipse.equinox.p2.updatechecker.UpdateEvent;
 
 /**
  * Provides the queries appropriate for the SDK UI.
@@ -30,7 +32,7 @@ import org.eclipse.jface.preference.IPreferenceStore;
  * @since 3.4
  */
 
-public class ProvSDKQueryProvider implements IProvElementQueryProvider {
+public class ProvSDKQueryProvider implements IQueryProvider {
 
 	private Query allQuery = new Query() {
 		public boolean isMatch(Object candidate) {
@@ -39,22 +41,23 @@ public class ProvSDKQueryProvider implements IProvElementQueryProvider {
 
 	};
 
-	public ElementQueryDescriptor getQueryDescriptor(QueriedElement element, int queryType) {
+	public ElementQueryDescriptor getQueryDescriptor(Object element, int queryType) {
 		IQueryable queryable;
+		boolean showLatest = ProvSDKUIActivator.getDefault().getPreferenceStore().getBoolean(PreferenceConstants.PREF_SHOW_LATEST_VERSION);
 		switch (queryType) {
-			case IProvElementQueryProvider.ARTIFACT_REPOS :
+			case IQueryProvider.ARTIFACT_REPOS :
 				queryable = new QueryableArtifactRepositoryManager();
 				return new ElementQueryDescriptor(queryable, new FilteredRepositoryQuery(IArtifactRepositoryManager.REPOSITORIES_PUBLIC_ONLY), new QueriedElementCollector(this, queryable));
-			case IProvElementQueryProvider.AVAILABLE_IUS :
+			case IQueryProvider.AVAILABLE_IUS :
 				if (element instanceof RollbackRepositoryElement) {
 					Query profileIdQuery = new InstallableUnitQuery(((RollbackRepositoryElement) element).getProfileId());
 					Query rollbackIUQuery = new IUPropertyQuery(IInstallableUnit.PROP_PROFILE_IU_KEY, Boolean.toString(true));
-					return new ElementQueryDescriptor(element.getQueryable(), new CompoundQuery(new Query[] {profileIdQuery, rollbackIUQuery}, true), new RollbackIUCollector(this, element.getQueryable()));
+					return new ElementQueryDescriptor(((RollbackRepositoryElement) element).getQueryable(), new CompoundQuery(new Query[] {profileIdQuery, rollbackIUQuery}, true), new RollbackIUCollector(this, ((RollbackRepositoryElement) element).getQueryable()));
 				}
 				CapabilityQuery groupQuery = new CapabilityQuery(MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_KIND, "group", null, null, false, false)); //$NON-NLS-1$
 				Query categoryQuery = new IUPropertyQuery(IInstallableUnit.PROP_CATEGORY_IU, Boolean.toString(true));
 				if (element instanceof MetadataRepositoryElement) {
-					return new ElementQueryDescriptor(element.getQueryable(), categoryQuery, new CategoryElementCollector(this, element.getQueryable(), false));
+					return new ElementQueryDescriptor(((MetadataRepositoryElement) element).getQueryable(), categoryQuery, new CategoryElementCollector(this, ((MetadataRepositoryElement) element).getQueryable(), false));
 				}
 				if (element instanceof CategoryElement) {
 					Query membersOfCategoryQuery;
@@ -62,26 +65,47 @@ public class ProvSDKQueryProvider implements IProvElementQueryProvider {
 						membersOfCategoryQuery = allQuery;
 					else
 						membersOfCategoryQuery = new AnyRequiredCapabilityQuery(((CategoryElement) element).getIU());
-					IPreferenceStore store = ProvSDKUIActivator.getDefault().getPreferenceStore();
 					Collector collector;
-					if (store.getBoolean(PreferenceConstants.PREF_SHOW_LATEST_VERSION))
-						collector = new LatestIUVersionCollector(this, element.getQueryable(), true);
+					if (showLatest)
+						collector = new LatestIUVersionElementCollector(this, ((CategoryElement) element).getQueryable(), true);
 					else
-						collector = new AvailableIUCollector(this, element.getQueryable(), true);
-					return new ElementQueryDescriptor(element.getQueryable(), new CompoundQuery(new Query[] {new CompoundQuery(new Query[] {groupQuery, categoryQuery}, false), membersOfCategoryQuery}, true), collector);
+						collector = new AvailableIUCollector(this, ((CategoryElement) element).getQueryable(), true);
+					return new ElementQueryDescriptor(((CategoryElement) element).getQueryable(), new CompoundQuery(new Query[] {new CompoundQuery(new Query[] {groupQuery, categoryQuery}, false), membersOfCategoryQuery}, true), collector);
 				}
 				// If we are showing only the latest version, we never represent other versions as children.
 				if (element instanceof IUVersionsElement) {
 					return null;
 				}
-			case IProvElementQueryProvider.AVAILABLE_UPDATES :
-			case IProvElementQueryProvider.INSTALLED_IUS :
+			case IQueryProvider.AVAILABLE_UPDATES :
 				Profile profile = (Profile) ProvUI.getAdapter(element, Profile.class);
+				IInstallableUnit[] toUpdate;
+				Collector collector;
+				if (profile != null) {
+					collector = profile.query(new IUProfilePropertyQuery(profile, IInstallableUnit.PROP_PROFILE_ROOT_IU, Boolean.toString(true)), new Collector(), null);
+					toUpdate = (IInstallableUnit[]) collector.toArray(IInstallableUnit.class);
+				} else if (element instanceof UpdateEvent) {
+					try {
+						profile = ProvisioningUtil.getProfile(((UpdateEvent) element).getProfileId());
+					} catch (ProvisionException e) {
+						ProvUI.handleException(e, null);
+						return null;
+					}
+					toUpdate = ((UpdateEvent) element).getIUs();
+				} else
+					return null;
+				QueryableUpdates updateQueryable = new QueryableUpdates(toUpdate);
+				if (showLatest)
+					collector = new LatestIUVersionCollector(this, updateQueryable, true);
+				else
+					collector = new Collector();
+				return new ElementQueryDescriptor(updateQueryable, allQuery, collector);
+			case IQueryProvider.INSTALLED_IUS :
+				profile = (Profile) ProvUI.getAdapter(element, Profile.class);
 				return new ElementQueryDescriptor(profile, new IUProfilePropertyQuery(profile, IInstallableUnit.PROP_PROFILE_ROOT_IU, Boolean.toString(true)), new InstalledIUCollector(this, profile));
-			case IProvElementQueryProvider.METADATA_REPOS :
+			case IQueryProvider.METADATA_REPOS :
 				queryable = new QueryableMetadataRepositoryManager();
 				return new ElementQueryDescriptor(queryable, new FilteredRepositoryQuery(IMetadataRepositoryManager.REPOSITORIES_NON_SYSTEM), new QueriedElementCollector(this, queryable));
-			case IProvElementQueryProvider.PROFILES :
+			case IQueryProvider.PROFILES :
 				queryable = new QueryableProfileRegistry();
 				return new ElementQueryDescriptor(queryable, new Query() {
 					public boolean isMatch(Object candidate) {
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
index 44ac8126..d52ee82 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
@@ -17,7 +17,7 @@ import org.eclipse.equinox.p2.engine.IProfileRegistry;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.ui.*;
 import org.eclipse.equinox.p2.ui.operations.ProvisioningUtil;
-import org.eclipse.equinox.p2.ui.query.IProvElementQueryProvider;
+import org.eclipse.equinox.p2.ui.query.IQueryProvider;
 import org.eclipse.jface.resource.ImageDescriptor;
 import org.eclipse.ui.plugin.AbstractUIPlugin;
 import org.eclipse.ui.statushandlers.StatusManager;
@@ -33,7 +33,7 @@ public class ProvSDKUIActivator extends AbstractUIPlugin {
 	private static ProvSDKUIActivator plugin;
 	private static BundleContext context;
 	private AutomaticUpdateScheduler scheduler;
-	private IProvElementQueryProvider queryProvider;
+	private IQueryProvider queryProvider;
 	private SimpleLicenseManager licenseManager;
 
 	public static final String PLUGIN_ID = "org.eclipse.equinox.p2.ui.sdk"; //$NON-NLS-1$
@@ -155,7 +155,7 @@ public class ProvSDKUIActivator extends AbstractUIPlugin {
 		return new Status(IStatus.WARNING, PLUGIN_ID, ProvSDKMessages.ProvSDKUIActivator_NoSelfProfile);
 	}
 
-	public IProvElementQueryProvider getQueryProvider() {
+	public IQueryProvider getQueryProvider() {
 		if (queryProvider == null)
 			queryProvider = new ProvSDKQueryProvider();
 		return queryProvider;
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
index c8dd85f..9f566a3 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
@@ -24,7 +24,7 @@ import org.eclipse.equinox.p2.ui.ProvisioningOperationRunner;
 import org.eclipse.equinox.p2.ui.model.ProfileElement;
 import org.eclipse.equinox.p2.ui.operations.*;
 import org.eclipse.equinox.p2.ui.query.ElementQueryDescriptor;
-import org.eclipse.equinox.p2.ui.query.IProvElementQueryProvider;
+import org.eclipse.equinox.p2.ui.query.IQueryProvider;
 import org.eclipse.equinox.p2.updatechecker.IUpdateListener;
 import org.eclipse.equinox.p2.updatechecker.UpdateEvent;
 import org.eclipse.ui.PlatformUI;
@@ -47,7 +47,9 @@ public class AutomaticUpdater implements IUpdateListener {
 			return;
 		try {
 			if (download) {
-				IInstallableUnit[] replacements = ProvisioningUtil.updatesFor(toUpdate, null);
+				UpdateEvent eventWithOnlyRoots = new UpdateEvent(event.getProfileId(), toUpdate);
+				ElementQueryDescriptor descriptor = ProvSDKUIActivator.getDefault().getQueryProvider().getQueryDescriptor(eventWithOnlyRoots, IQueryProvider.AVAILABLE_UPDATES);
+				IInstallableUnit[] replacements = (IInstallableUnit[]) descriptor.queryable.query(descriptor.query, descriptor.collector, null).toArray(IInstallableUnit.class);
 				if (replacements.length > 0) {
 					final ProvisioningPlan plan = ProvisioningUtil.getPlanner().getReplacePlan(toUpdate, replacements, ProvisioningUtil.getProfile(event.getProfileId()), null, null);
 					Job job = ProvisioningOperationRunner.schedule(new ProfileModificationOperation(ProvSDKMessages.AutomaticUpdater_AutomaticDownloadOperationName, event.getProfileId(), plan, new DownloadPhaseSet(), false), null);
@@ -82,7 +84,7 @@ public class AutomaticUpdater implements IUpdateListener {
 
 	private IInstallableUnit[] getUpdatesToShow(final UpdateEvent event) {
 		// We could simply collect the install roots ourselves, but implementing
-		// this in terms of the normal query allows the policy to be defined only
+		// this in terms of a normal "what's installed" query allows the policy to be defined only
 		// in one place.
 		IQueryable rootQueryable = new IQueryable() {
 			public Collector query(Query query, Collector result, IProgressMonitor monitor) {
@@ -94,7 +96,7 @@ public class AutomaticUpdater implements IUpdateListener {
 			}
 		};
 		ProfileElement element = new ProfileElement(event.getProfileId());
-		ElementQueryDescriptor descriptor = ProvSDKUIActivator.getDefault().getQueryProvider().getQueryDescriptor(element, IProvElementQueryProvider.AVAILABLE_UPDATES);
+		ElementQueryDescriptor descriptor = ProvSDKUIActivator.getDefault().getQueryProvider().getQueryDescriptor(element, IQueryProvider.INSTALLED_IUS);
 		Object[] elements = rootQueryable.query(descriptor.query, descriptor.collector, null).toArray(Object.class);
 		IInstallableUnit[] result = new IInstallableUnit[elements.length];
 		for (int i = 0; i < result.length; i++)
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdatesPopup.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdatesPopup.java
index 4824858..fe852b4 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdatesPopup.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdatesPopup.java
@@ -93,7 +93,7 @@ public class AutomaticUpdatesPopup extends PopupDialog {
 			infoLink.setText(ProvSDKMessages.AutomaticUpdatesDialog_ClickToReviewNotDownloaded);
 		infoLink.addSelectionListener(new SelectionAdapter() {
 			public void widgetSelected(SelectionEvent e) {
-				UpdateWizard wizard = new UpdateWizard(profileId, toUpdate, ProvSDKUIActivator.getDefault().getLicenseManager());
+				UpdateWizard wizard = new UpdateWizard(profileId, toUpdate, ProvSDKUIActivator.getDefault().getLicenseManager(), ProvSDKUIActivator.getDefault().getQueryProvider());
 				WizardDialog dialog = new WizardDialog(getShell(), wizard);
 				dialog.open();
 			}
diff --git a/bundles/org.eclipse.equinox.p2.ui/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.ui/META-INF/MANIFEST.MF
index fa0192d..f876796 100644
--- a/bundles/org.eclipse.equinox.p2.ui/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.ui/META-INF/MANIFEST.MF
@@ -19,6 +19,7 @@ Import-Package: org.eclipse.equinox.configurator,
  org.eclipse.equinox.p2.metadata,
  org.eclipse.equinox.p2.metadata.repository,
  org.eclipse.equinox.p2.query,
+ org.eclipse.equinox.p2.updatechecker,
  org.eclipse.equinox.spi.p2.core.repository,
  org.eclipse.osgi.service.resolver;version="1.1.0",
  org.eclipse.osgi.util;version="1.1.0",
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
index e77a935..a7477bc 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
@@ -137,6 +137,7 @@ public class ProvUIMessages extends NLS {
 	public static String QueryableArtifactRepositoryManager_RepositoryQueryProgress;
 	public static String QueryableMetadataRepositoryManager_RepositoryQueryProgress;
 	public static String QueryableProfileRegistry_QueryProfileProgress;
+	public static String QueryableUpdates_UpdateListProgress;
 	public static String SizingPhaseSet_PhaseSetName;
 	public static String RevertDialog_ConfigContentsLabel;
 	public static String RevertDialog_ConfigsLabel;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/RevertProfileWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/RevertProfileWizardPage.java
index 4c6133e..c097890 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/RevertProfileWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/RevertProfileWizardPage.java
@@ -23,7 +23,7 @@ import org.eclipse.equinox.p2.ui.ProvisioningOperationRunner;
 import org.eclipse.equinox.p2.ui.model.RollbackProfileElement;
 import org.eclipse.equinox.p2.ui.model.RollbackRepositoryElement;
 import org.eclipse.equinox.p2.ui.operations.*;
-import org.eclipse.equinox.p2.ui.query.IProvElementQueryProvider;
+import org.eclipse.equinox.p2.ui.query.IQueryProvider;
 import org.eclipse.equinox.p2.ui.viewers.*;
 import org.eclipse.jface.dialogs.Dialog;
 import org.eclipse.jface.dialogs.MessageDialog;
@@ -45,10 +45,10 @@ public class RevertProfileWizardPage extends WizardPage {
 	private TableViewer configsViewer;
 	private TableViewer configContentsViewer;
 	String profileId;
-	IProvElementQueryProvider queryProvider;
+	IQueryProvider queryProvider;
 	private static final int DEFAULT_COLUMN_WIDTH = 150;
 
-	public RevertProfileWizardPage(String profileId, IProvElementQueryProvider queryProvider) {
+	public RevertProfileWizardPage(String profileId, IQueryProvider queryProvider) {
 		super("RevertConfiguration"); //$NON-NLS-1$
 		setTitle(ProvUIMessages.RevertDialog_PageTitle);
 		setDescription(ProvUIMessages.RevertDialog_Description);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
index 1a76910..748b717 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
@@ -21,26 +21,45 @@ import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.ui.ProvUI;
 import org.eclipse.equinox.p2.ui.operations.ProfileModificationOperation;
 import org.eclipse.equinox.p2.ui.operations.ProvisioningUtil;
+import org.eclipse.equinox.p2.ui.query.ElementQueryDescriptor;
+import org.eclipse.equinox.p2.ui.query.IQueryProvider;
+import org.eclipse.equinox.p2.updatechecker.UpdateEvent;
 
 public class UpdateWizardPage extends UpdateOrInstallWizardPage {
 
-	public UpdateWizardPage(IInstallableUnit[] ius, String profileId, UpdateOrInstallWizard wizard) {
+	IQueryProvider queryProvider;
+	Object[] initialSelections = new Object[0];
+
+	public UpdateWizardPage(IInstallableUnit[] ius, String profileId, IQueryProvider queryProvider, UpdateOrInstallWizard wizard) {
 		super("UpdateWizardPage", ius, profileId, wizard); //$NON-NLS-1$
+		this.queryProvider = queryProvider;
 		setTitle(ProvUIMessages.UpdateAction_UpdatesAvailableTitle);
 		setDescription(ProvUIMessages.UpdateAction_UpdatesAvailableMessage);
 	}
 
 	protected void makeElements(IInstallableUnit[] ius, List elements) {
+		HashMap uniqueIds = new HashMap();
 		for (int i = 0; i < ius.length; i++) {
-			try {
-				IInstallableUnit[] replacementIUs = ProvisioningUtil.updatesFor(new IInstallableUnit[] {ius[i]}, null);
-				for (int j = 0; j < replacementIUs.length; j++) {
-					elements.add(new AvailableUpdateElement(replacementIUs[j], ius[i], getProfile().getProfileId()));
-				}
-			} catch (ProvisionException e) {
-				break;
+			UpdateEvent event = new UpdateEvent(getProfileId(), ius);
+			ElementQueryDescriptor descriptor = queryProvider.getQueryDescriptor(event, IQueryProvider.AVAILABLE_UPDATES);
+			Iterator iter = descriptor.queryable.query(descriptor.query, descriptor.collector, null).iterator();
+			ArrayList queryIUs = new ArrayList();
+			while (iter.hasNext()) {
+				IInstallableUnit iu = (IInstallableUnit) ProvUI.getAdapter(iter.next(), IInstallableUnit.class);
+				if (iu != null)
+					queryIUs.add(iu);
+			}
+			IInstallableUnit[] replacements = (IInstallableUnit[]) queryIUs.toArray(new IInstallableUnit[queryIUs.size()]);
+			for (int j = 0; j < replacements.length; j++) {
+				AvailableUpdateElement element = new AvailableUpdateElement(replacements[j], ius[i], getProfileId());
+				elements.add(element);
+				AvailableUpdateElement latestElement = (AvailableUpdateElement) uniqueIds.get(replacements[j].getId());
+				if (latestElement == null || replacements[j].getVersion().compareTo(latestElement.getIU().getVersion()) > 0)
+					uniqueIds.put(replacements[j].getId(), element);
+
 			}
 		}
+		initialSelections = uniqueIds.values().toArray();
 	}
 
 	private IInstallableUnit[] getIUsToReplace(Object[] replacementElements) {
@@ -71,9 +90,6 @@ public class UpdateWizardPage extends UpdateOrInstallWizardPage {
 	}
 
 	protected void setInitialSelections() {
-		// Don't select anything to work around issues such as
-		// https://bugs.eclipse.org/bugs/show_bug.cgi?id=208470
-		// TODO when not showing the latest version we eventually
-		// want to select only the latest version.
+		listViewer.setCheckedElements(initialSelections);
 	}
 }
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
index 1b1c4ee..58e9654 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
@@ -125,6 +125,7 @@ MetadataRepositoryElement_RepositoryLoadError=Error loading repository {0}
 QueryableArtifactRepositoryManager_RepositoryQueryProgress=Getting artifact repositories
 QueryableMetadataRepositoryManager_RepositoryQueryProgress=Getting repositories
 QueryableProfileRegistry_QueryProfileProgress=Getting profiles
+QueryableUpdates_UpdateListProgress=Assembling list of updates
 SizingPhaseSet_PhaseSetName=Compute sizes
 
 RevertDialog_ConfigContentsLabel=&Configuration contents:
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UpdateAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UpdateAction.java
index 5e54922..a4af11c 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UpdateAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UpdateAction.java
@@ -21,6 +21,7 @@ import org.eclipse.equinox.p2.ui.*;
 import org.eclipse.equinox.p2.ui.dialogs.UpdateWizard;
 import org.eclipse.equinox.p2.ui.model.InstalledIUElement;
 import org.eclipse.equinox.p2.ui.operations.ProvisioningUtil;
+import org.eclipse.equinox.p2.ui.query.IQueryProvider;
 import org.eclipse.jface.viewers.ISelectionProvider;
 import org.eclipse.jface.viewers.IStructuredSelection;
 import org.eclipse.jface.wizard.WizardDialog;
@@ -28,8 +29,11 @@ import org.eclipse.swt.widgets.Shell;
 
 public class UpdateAction extends ProfileModificationAction {
 
-	public UpdateAction(ISelectionProvider selectionProvider, String profileId, IProfileChooser chooser, LicenseManager licenseManager, Shell shell) {
+	IQueryProvider queryProvider;
+
+	public UpdateAction(ISelectionProvider selectionProvider, String profileId, IProfileChooser chooser, LicenseManager licenseManager, IQueryProvider queryProvider, Shell shell) {
 		super(ProvUI.UPDATE_COMMAND_LABEL, selectionProvider, profileId, chooser, licenseManager, shell);
+		this.queryProvider = queryProvider;
 		setToolTipText(ProvUI.UPDATE_COMMAND_TOOLTIP);
 	}
 
@@ -45,7 +49,7 @@ public class UpdateAction extends ProfileModificationAction {
 			}
 			if (iusWithUpdates.size() > 0) {
 
-				UpdateWizard wizard = new UpdateWizard(targetProfileId, (IInstallableUnit[]) iusWithUpdates.toArray(new IInstallableUnit[iusWithUpdates.size()]), getLicenseManager());
+				UpdateWizard wizard = new UpdateWizard(targetProfileId, (IInstallableUnit[]) iusWithUpdates.toArray(new IInstallableUnit[iusWithUpdates.size()]), getLicenseManager(), queryProvider);
 				WizardDialog dialog = new WizardDialog(getShell(), wizard);
 				dialog.open();
 			}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/RevertWizard.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/RevertWizard.java
index 66e4f49..2226e07 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/RevertWizard.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/RevertWizard.java
@@ -13,7 +13,7 @@ package org.eclipse.equinox.p2.ui.dialogs;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.dialogs.RevertProfileWizardPage;
 import org.eclipse.equinox.p2.ui.ProvUIImages;
-import org.eclipse.equinox.p2.ui.query.IProvElementQueryProvider;
+import org.eclipse.equinox.p2.ui.query.IQueryProvider;
 import org.eclipse.jface.wizard.Wizard;
 
 /**
@@ -23,9 +23,9 @@ public class RevertWizard extends Wizard {
 
 	RevertProfileWizardPage page;
 	String profileId;
-	IProvElementQueryProvider queryProvider;
+	IQueryProvider queryProvider;
 
-	public RevertWizard(String profileId, IProvElementQueryProvider queryProvider) {
+	public RevertWizard(String profileId, IQueryProvider queryProvider) {
 		super();
 		setWindowTitle(ProvUIMessages.RevertDialog_Title);
 		setDefaultPageImageDescriptor(ProvUIImages.getImageDescriptor(ProvUIImages.WIZARD_BANNER_REVERT));
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateAndInstallGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateAndInstallGroup.java
index af2d3b0..de83126 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateAndInstallGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateAndInstallGroup.java
@@ -18,7 +18,7 @@ import org.eclipse.equinox.p2.ui.*;
 import org.eclipse.equinox.p2.ui.actions.*;
 import org.eclipse.equinox.p2.ui.model.MetadataRepositories;
 import org.eclipse.equinox.p2.ui.model.ProfileElement;
-import org.eclipse.equinox.p2.ui.query.IProvElementQueryProvider;
+import org.eclipse.equinox.p2.ui.query.IQueryProvider;
 import org.eclipse.equinox.p2.ui.viewers.*;
 import org.eclipse.jface.action.Action;
 import org.eclipse.jface.action.IAction;
@@ -61,7 +61,7 @@ public class UpdateAndInstallGroup {
 	 * Create an instance of this group.
 	 * 
 	 */
-	public UpdateAndInstallGroup(Composite parent, String profileId, String installedString, String availableString, IRepositoryManipulator repositoryManipulator, IProfileChooser profileChooser, IProvElementQueryProvider queryProvider, LicenseManager licenseManager, FontMetrics fm) {
+	public UpdateAndInstallGroup(Composite parent, String profileId, String installedString, String availableString, IRepositoryManipulator repositoryManipulator, IProfileChooser profileChooser, IQueryProvider queryProvider, LicenseManager licenseManager, FontMetrics fm) {
 
 		this.profileId = profileId;
 		this.repositoryManipulator = repositoryManipulator;
@@ -94,7 +94,7 @@ public class UpdateAndInstallGroup {
 		return tabFolder;
 	}
 
-	private Control createAvailableIUsPage(Composite parent, IProvElementQueryProvider queryProvider) {
+	private Control createAvailableIUsPage(Composite parent, IQueryProvider queryProvider) {
 		Composite composite = new Composite(parent, SWT.NONE);
 		GridData gd = new GridData(SWT.FILL, SWT.FILL, true, true);
 		gd.widthHint = convertHorizontalDLUsToPixels(DEFAULT_WIDTH);
@@ -194,7 +194,7 @@ public class UpdateAndInstallGroup {
 		updateEnablement(installButton);
 	}
 
-	private Control createInstalledIUsPage(Composite parent, IProvElementQueryProvider queryProvider) {
+	private Control createInstalledIUsPage(Composite parent, IQueryProvider queryProvider) {
 
 		Composite composite = new Composite(parent, SWT.NONE);
 		GridData gd = new GridData(SWT.FILL, SWT.FILL, true, true);
@@ -227,7 +227,7 @@ public class UpdateAndInstallGroup {
 		installedIUViewer.getControl().setLayoutData(data);
 
 		// Vertical buttons
-		Composite buttonBar = (Composite) createInstalledIUsVerticalButtonBar(composite);
+		Composite buttonBar = (Composite) createInstalledIUsVerticalButtonBar(composite, queryProvider);
 		data = new GridData(GridData.FILL_VERTICAL);
 		buttonBar.setLayoutData(data);
 
@@ -250,7 +250,7 @@ public class UpdateAndInstallGroup {
 		return composite;
 	}
 
-	private Control createInstalledIUsVerticalButtonBar(Composite parent) {
+	private Control createInstalledIUsVerticalButtonBar(Composite parent, IQueryProvider queryProvider) {
 		// Create composite.
 		Composite composite = new Composite(parent, SWT.NULL);
 
@@ -270,7 +270,7 @@ public class UpdateAndInstallGroup {
 		uninstallButton = createVerticalButton(composite, ProvUIMessages.UninstallIUCommandLabel, false);
 		uninstallButton.setData(BUTTONACTION, new UninstallAction(installedIUViewer, profileId, null, parent.getShell()));
 		updateButton = createVerticalButton(composite, ProvUIMessages.UpdateIUCommandLabel, false);
-		updateButton.setData(BUTTONACTION, new UpdateAction(installedIUViewer, profileId, null, licenseManager, parent.getShell()));
+		updateButton.setData(BUTTONACTION, new UpdateAction(installedIUViewer, profileId, null, licenseManager, queryProvider, parent.getShell()));
 		if (profileChooser != null) {
 			Button profileButton = createVerticalButton(composite, profileChooser.getLabel(), false);
 			profileButton.setData(BUTTONACTION, new Action() {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateWizard.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateWizard.java
index 1e85538..8598d0c 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateWizard.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateWizard.java
@@ -15,19 +15,23 @@ import org.eclipse.equinox.internal.p2.ui.dialogs.*;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.ui.LicenseManager;
 import org.eclipse.equinox.p2.ui.ProvUIImages;
+import org.eclipse.equinox.p2.ui.query.IQueryProvider;
 
 /**
  * @since 3.4
  */
 public class UpdateWizard extends UpdateOrInstallWizard {
 
-	public UpdateWizard(String profileId, IInstallableUnit[] ius, LicenseManager licenseManager) {
+	IQueryProvider queryProvider;
+
+	public UpdateWizard(String profileId, IInstallableUnit[] ius, LicenseManager licenseManager, IQueryProvider queryProvider) {
 		super(profileId, ius, licenseManager);
+		this.queryProvider = queryProvider;
 		setWindowTitle(ProvUIMessages.UpdateAction_UpdatesAvailableTitle);
 		setDefaultPageImageDescriptor(ProvUIImages.getImageDescriptor(ProvUIImages.WIZARD_BANNER_UPDATE));
 	}
 
 	protected UpdateOrInstallWizardPage createMainPage(String profileId, IInstallableUnit[] ius) {
-		return new UpdateWizardPage(ius, profileId, this);
+		return new UpdateWizardPage(ius, profileId, queryProvider, this);
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ArtifactRepositories.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ArtifactRepositories.java
index 6989a4f..ac2e5d5 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ArtifactRepositories.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ArtifactRepositories.java
@@ -10,7 +10,7 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.ui.model;
 
-import org.eclipse.equinox.p2.ui.query.IProvElementQueryProvider;
+import org.eclipse.equinox.p2.ui.query.IQueryProvider;
 import org.eclipse.equinox.p2.ui.query.QueriedElement;
 
 /**
@@ -24,7 +24,7 @@ import org.eclipse.equinox.p2.ui.query.QueriedElement;
 public class ArtifactRepositories extends QueriedElement {
 
 	protected int getQueryType() {
-		return IProvElementQueryProvider.ARTIFACT_REPOS;
+		return IQueryProvider.ARTIFACT_REPOS;
 	}
 
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/CategoryElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/CategoryElement.java
index a93a0a5..7c4fe6a 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/CategoryElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/CategoryElement.java
@@ -13,7 +13,7 @@ package org.eclipse.equinox.p2.ui.model;
 import org.eclipse.equinox.internal.p2.ui.model.RemoteQueriedElement;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.ui.ProvUIImages;
-import org.eclipse.equinox.p2.ui.query.IProvElementQueryProvider;
+import org.eclipse.equinox.p2.ui.query.IQueryProvider;
 
 /**
  * Element wrapper class for IU's that represent categories of
@@ -49,7 +49,7 @@ public class CategoryElement extends RemoteQueriedElement implements IUElement {
 	}
 
 	protected int getQueryType() {
-		return IProvElementQueryProvider.AVAILABLE_IUS;
+		return IQueryProvider.AVAILABLE_IUS;
 	}
 
 	public IInstallableUnit getIU() {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/IUVersionsElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/IUVersionsElement.java
index 2ac1855..f504aee 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/IUVersionsElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/IUVersionsElement.java
@@ -13,7 +13,7 @@ package org.eclipse.equinox.p2.ui.model;
 import org.eclipse.equinox.internal.p2.ui.model.CachedQueryElement;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.ui.ProvUIImages;
-import org.eclipse.equinox.p2.ui.query.IProvElementQueryProvider;
+import org.eclipse.equinox.p2.ui.query.IQueryProvider;
 
 /**
  * Element wrapper class for a particular IU version, whose
@@ -52,7 +52,7 @@ public class IUVersionsElement extends CachedQueryElement implements IUElement {
 	}
 
 	protected int getQueryType() {
-		return IProvElementQueryProvider.AVAILABLE_IUS;
+		return IQueryProvider.AVAILABLE_IUS;
 	}
 
 	public long getSize() {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/MetadataRepositories.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/MetadataRepositories.java
index b7c4ab3..67ee71f 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/MetadataRepositories.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/MetadataRepositories.java
@@ -10,7 +10,7 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.ui.model;
 
-import org.eclipse.equinox.p2.ui.query.IProvElementQueryProvider;
+import org.eclipse.equinox.p2.ui.query.IQueryProvider;
 import org.eclipse.equinox.p2.ui.query.QueriedElement;
 
 /**
@@ -25,7 +25,7 @@ import org.eclipse.equinox.p2.ui.query.QueriedElement;
 public class MetadataRepositories extends QueriedElement {
 
 	protected int getQueryType() {
-		return IProvElementQueryProvider.METADATA_REPOS;
+		return IQueryProvider.METADATA_REPOS;
 	}
 
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/MetadataRepositoryElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/MetadataRepositoryElement.java
index 4cb33be..4496a14 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/MetadataRepositoryElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/MetadataRepositoryElement.java
@@ -19,7 +19,7 @@ import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.p2.query.IQueryable;
 import org.eclipse.equinox.p2.ui.ProvUIImages;
 import org.eclipse.equinox.p2.ui.operations.ProvisioningUtil;
-import org.eclipse.equinox.p2.ui.query.IProvElementQueryProvider;
+import org.eclipse.equinox.p2.ui.query.IQueryProvider;
 import org.eclipse.osgi.util.NLS;
 
 /**
@@ -49,7 +49,7 @@ public class MetadataRepositoryElement extends RemoteQueriedElement implements R
 	}
 
 	protected int getQueryType() {
-		return IProvElementQueryProvider.AVAILABLE_IUS;
+		return IQueryProvider.AVAILABLE_IUS;
 	}
 
 	public String getLabel(Object o) {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ProfileElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ProfileElement.java
index e1d6f09..c7c8c21 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ProfileElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ProfileElement.java
@@ -17,7 +17,7 @@ import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.query.IQueryable;
 import org.eclipse.equinox.p2.ui.ProvUIImages;
 import org.eclipse.equinox.p2.ui.operations.ProvisioningUtil;
-import org.eclipse.equinox.p2.ui.query.IProvElementQueryProvider;
+import org.eclipse.equinox.p2.ui.query.IQueryProvider;
 import org.eclipse.osgi.util.NLS;
 
 /**
@@ -48,7 +48,7 @@ public class ProfileElement extends RemoteQueriedElement {
 	}
 
 	protected int getQueryType() {
-		return IProvElementQueryProvider.INSTALLED_IUS;
+		return IQueryProvider.INSTALLED_IUS;
 	}
 
 	public IQueryable getQueryable() {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/Profiles.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/Profiles.java
index 68ee738..7216893 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/Profiles.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/Profiles.java
@@ -10,7 +10,7 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.ui.model;
 
-import org.eclipse.equinox.p2.ui.query.IProvElementQueryProvider;
+import org.eclipse.equinox.p2.ui.query.IQueryProvider;
 import org.eclipse.equinox.p2.ui.query.QueriedElement;
 
 /**
@@ -42,6 +42,6 @@ public class Profiles extends QueriedElement {
 	}
 
 	protected int getQueryType() {
-		return IProvElementQueryProvider.PROFILES;
+		return IQueryProvider.PROFILES;
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/QueriedElementCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/QueriedElementCollector.java
index f73e9b0..3340e26 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/QueriedElementCollector.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/QueriedElementCollector.java
@@ -12,7 +12,7 @@ package org.eclipse.equinox.p2.ui.model;
 
 import org.eclipse.equinox.p2.query.Collector;
 import org.eclipse.equinox.p2.query.IQueryable;
-import org.eclipse.equinox.p2.ui.query.IProvElementQueryProvider;
+import org.eclipse.equinox.p2.ui.query.IQueryProvider;
 import org.eclipse.equinox.p2.ui.query.QueriedElement;
 
 /**
@@ -24,10 +24,10 @@ import org.eclipse.equinox.p2.ui.query.QueriedElement;
  */
 public class QueriedElementCollector extends Collector {
 
-	protected IProvElementQueryProvider queryProvider;
+	protected IQueryProvider queryProvider;
 	protected IQueryable queryable;
 
-	public QueriedElementCollector(IProvElementQueryProvider queryProvider, IQueryable queryable) {
+	public QueriedElementCollector(IQueryProvider queryProvider, IQueryable queryable) {
 		this.queryProvider = queryProvider;
 		this.queryable = queryable;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/AvailableIUCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/AvailableIUCollector.java
index f3e24d7..42e9005 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/AvailableIUCollector.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/AvailableIUCollector.java
@@ -10,7 +10,7 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.ui.query;
 
-import org.eclipse.equinox.internal.p2.ui.model.*;
+import org.eclipse.equinox.internal.p2.ui.model.AvailableIUElement;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.query.IQueryable;
 import org.eclipse.equinox.p2.ui.model.CategoryElement;
@@ -27,7 +27,7 @@ public class AvailableIUCollector extends QueriedElementCollector {
 
 	private boolean makeCategories;
 
-	public AvailableIUCollector(IProvElementQueryProvider queryProvider, IQueryable queryable, boolean makeCategories) {
+	public AvailableIUCollector(IQueryProvider queryProvider, IQueryable queryable, boolean makeCategories) {
 		super(queryProvider, queryable);
 		this.makeCategories = makeCategories;
 	}
@@ -48,7 +48,7 @@ public class AvailableIUCollector extends QueriedElementCollector {
 		return super.accept(makeDefaultElement(iu));
 	}
 
-	protected ProvElement makeDefaultElement(IInstallableUnit iu) {
+	protected Object makeDefaultElement(IInstallableUnit iu) {
 		return new AvailableIUElement(iu, null);
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/CategoryElementCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/CategoryElementCollector.java
index 001b291..439caab 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/CategoryElementCollector.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/CategoryElementCollector.java
@@ -30,7 +30,7 @@ public class CategoryElementCollector extends QueriedElementCollector {
 	private boolean allowEmpty;
 	private Set referredIUs = new HashSet();
 
-	public CategoryElementCollector(IProvElementQueryProvider queryProvider, IQueryable queryable, boolean allowEmpty) {
+	public CategoryElementCollector(IQueryProvider queryProvider, IQueryable queryable, boolean allowEmpty) {
 		super(queryProvider, queryable);
 		this.allowEmpty = allowEmpty;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/IProvElementQueryProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/IProvElementQueryProvider.java
deleted file mode 100644
index db368fb..0000000
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/IProvElementQueryProvider.java
+++ /dev/null
@@ -1,28 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.p2.ui.query;
-
-/**
- * An interface for an object that provides element queries
- * 
- * @since 3.4
- */
-public interface IProvElementQueryProvider {
-
-	public static final int METADATA_REPOS = 1;
-	public static final int ARTIFACT_REPOS = 2;
-	public static final int PROFILES = 3;
-	public static final int AVAILABLE_IUS = 4;
-	public static final int AVAILABLE_UPDATES = 5;
-	public static final int INSTALLED_IUS = 6;
-
-	public ElementQueryDescriptor getQueryDescriptor(QueriedElement element, int queryType);
-}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/IQueryProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/IQueryProvider.java
new file mode 100644
index 0000000..603fbd0
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/IQueryProvider.java
@@ -0,0 +1,28 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.p2.ui.query;
+
+/**
+ * An interface for an object that provides element queries
+ * 
+ * @since 3.4
+ */
+public interface IQueryProvider {
+
+	public static final int METADATA_REPOS = 1;
+	public static final int ARTIFACT_REPOS = 2;
+	public static final int PROFILES = 3;
+	public static final int AVAILABLE_IUS = 4;
+	public static final int AVAILABLE_UPDATES = 5;
+	public static final int INSTALLED_IUS = 6;
+
+	public ElementQueryDescriptor getQueryDescriptor(Object element, int queryType);
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/InstalledIUCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/InstalledIUCollector.java
index 4999aae..5efba91 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/InstalledIUCollector.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/InstalledIUCollector.java
@@ -23,7 +23,7 @@ import org.eclipse.equinox.p2.ui.model.QueriedElementCollector;
  */
 public class InstalledIUCollector extends QueriedElementCollector {
 
-	public InstalledIUCollector(IProvElementQueryProvider queryProvider, Profile profile) {
+	public InstalledIUCollector(IQueryProvider queryProvider, Profile profile) {
 		super(queryProvider, profile);
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/LatestIUVersionCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/LatestIUVersionCollector.java
index df2947c..9de7753 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/LatestIUVersionCollector.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/LatestIUVersionCollector.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others.
+ * Copyright (c) 2008 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -13,11 +13,10 @@ package org.eclipse.equinox.p2.ui.query;
 import java.util.HashMap;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.query.IQueryable;
-import org.eclipse.equinox.p2.ui.model.IUVersionsElement;
 
 /**
  * Collector that only accepts categories or the latest version of each
- * IU, and wraps that version in an IUVersionsElement.
+ * IU.
  * 
  * @since 3.4
  */
@@ -25,7 +24,7 @@ public class LatestIUVersionCollector extends AvailableIUCollector {
 
 	private HashMap uniqueIds = new HashMap();
 
-	public LatestIUVersionCollector(IProvElementQueryProvider queryProvider, IQueryable queryable, boolean makeCategories) {
+	public LatestIUVersionCollector(IQueryProvider queryProvider, IQueryable queryable, boolean makeCategories) {
 		super(queryProvider, queryable, makeCategories);
 	}
 
@@ -44,17 +43,24 @@ public class LatestIUVersionCollector extends AvailableIUCollector {
 		if (makeCategory() && isCategory(iu))
 			return super.accept(match);
 		// Look for the latest element
-		IUVersionsElement matchElement = (IUVersionsElement) uniqueIds.get(iu.getId());
-		if (matchElement == null) {
-			matchElement = new IUVersionsElement(iu);
+		Object matchElement = uniqueIds.get(iu.getId());
+		if (matchElement == null || iu.getVersion().compareTo(getIU(matchElement).getVersion()) > 0) {
+			if (matchElement != null)
+				getList().remove(matchElement);
+			matchElement = makeDefaultElement(iu);
 			uniqueIds.put(iu.getId(), matchElement);
 			return super.accept(matchElement);
 		}
-		// There is already an element
-		if (iu.getVersion().compareTo(matchElement.getIU().getVersion()) > 0) {
-			matchElement.setIU(iu);
-		}
 		return true;
 	}
 
+	protected Object makeDefaultElement(IInstallableUnit iu) {
+		return iu;
+	}
+
+	protected IInstallableUnit getIU(Object matchElement) {
+		if (matchElement instanceof IInstallableUnit)
+			return (IInstallableUnit) matchElement;
+		return null;
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/LatestIUVersionElementCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/LatestIUVersionElementCollector.java
new file mode 100644
index 0000000..610a968
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/LatestIUVersionElementCollector.java
@@ -0,0 +1,38 @@
+/*******************************************************************************
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.p2.ui.query;
+
+import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.query.IQueryable;
+import org.eclipse.equinox.p2.ui.model.IUVersionsElement;
+
+/**
+ * Collector that only accepts categories or the latest version of each
+ * IU, and wraps that version in an IUVersionsElement.
+ * 
+ * @since 3.4
+ */
+public class LatestIUVersionElementCollector extends LatestIUVersionCollector {
+	public LatestIUVersionElementCollector(IQueryProvider queryProvider, IQueryable queryable, boolean makeCategories) {
+		super(queryProvider, queryable, makeCategories);
+	}
+
+	protected Object makeDefaultElement(IInstallableUnit iu) {
+		return new IUVersionsElement(iu);
+	}
+
+	protected IInstallableUnit getIU(Object matchElement) {
+		if (matchElement instanceof IUVersionsElement)
+			return ((IUVersionsElement) matchElement).getIU();
+		return super.getIU(matchElement);
+	}
+
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/OtherIUVersionsCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/OtherIUVersionsCollector.java
index d6a6fd0..20fd670 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/OtherIUVersionsCollector.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/OtherIUVersionsCollector.java
@@ -24,7 +24,7 @@ public class OtherIUVersionsCollector extends QueriedElementCollector {
 
 	private IInstallableUnit iu;
 
-	public OtherIUVersionsCollector(IInstallableUnit iu, IProvElementQueryProvider queryProvider, IQueryable queryable) {
+	public OtherIUVersionsCollector(IInstallableUnit iu, IQueryProvider queryProvider, IQueryable queryable) {
 		super(queryProvider, queryable);
 		this.iu = iu;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/ProfileElementCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/ProfileElementCollector.java
index 81db734..2cbc911 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/ProfileElementCollector.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/ProfileElementCollector.java
@@ -22,7 +22,7 @@ import org.eclipse.equinox.p2.ui.model.QueriedElementCollector;
  */
 public class ProfileElementCollector extends QueriedElementCollector {
 
-	public ProfileElementCollector(IProvElementQueryProvider queryProvider, Profile profile) {
+	public ProfileElementCollector(IQueryProvider queryProvider, Profile profile) {
 		super(queryProvider, profile);
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/QueriedElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/QueriedElement.java
index 2d504e3..1080e53 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/QueriedElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/QueriedElement.java
@@ -22,7 +22,7 @@ import org.eclipse.equinox.p2.query.IQueryable;
  */
 public abstract class QueriedElement extends ProvElement {
 
-	IProvElementQueryProvider queryProvider;
+	IQueryProvider queryProvider;
 	protected IQueryable queryable;
 
 	public Object[] getChildren(Object o) {
@@ -53,11 +53,11 @@ public abstract class QueriedElement extends ProvElement {
 
 	protected abstract int getQueryType();
 
-	public void setQueryProvider(IProvElementQueryProvider queryProvider) {
+	public void setQueryProvider(IQueryProvider queryProvider) {
 		this.queryProvider = queryProvider;
 	}
 
-	public IProvElementQueryProvider getQueryProvider() {
+	public IQueryProvider getQueryProvider() {
 		return queryProvider;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/QueryableUpdates.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/QueryableUpdates.java
new file mode 100644
index 0000000..47834eb
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/QueryableUpdates.java
@@ -0,0 +1,57 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.p2.ui.query;
+
+import java.util.ArrayList;
+import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
+import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
+import org.eclipse.equinox.p2.director.IPlanner;
+import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.query.*;
+import org.eclipse.equinox.p2.ui.ProvUI;
+import org.eclipse.equinox.p2.ui.ProvUIActivator;
+
+/**
+ * An object that adds queryable support to the profile registry.
+ */
+public class QueryableUpdates implements IQueryable {
+
+	private IInstallableUnit[] iusToUpdate;
+
+	public QueryableUpdates(IInstallableUnit[] iusToUpdate) {
+		this.iusToUpdate = iusToUpdate;
+	}
+
+	public Collector query(Query query, Collector result, IProgressMonitor monitor) {
+		IPlanner planner = (IPlanner) ServiceHelper.getService(ProvUIActivator.getContext(), IPlanner.class.getName());
+		if (planner == null) {
+			ProvUI.reportStatus(new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, ProvUIMessages.ProvisioningUtil_NoPlannerFound));
+			return result;
+		}
+		ArrayList allUpdates = new ArrayList();
+		for (int i = 0; i < iusToUpdate.length; i++) {
+			IInstallableUnit[] updates = planner.updatesFor(iusToUpdate[i], null);
+			for (int j = 0; j < updates.length; j++)
+				allUpdates.add(updates[j]);
+		}
+		if (monitor == null)
+			monitor = new NullProgressMonitor();
+		monitor.beginTask(ProvUIMessages.QueryableUpdates_UpdateListProgress, allUpdates.size());
+		for (int i = 0; i < allUpdates.size(); i++) {
+			if (query.isMatch(allUpdates.get(i)))
+				result.accept(allUpdates.get(i));
+			monitor.worked(1);
+		}
+		monitor.done();
+		return result;
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/RollbackIUCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/RollbackIUCollector.java
index 2cccff5..15a6669 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/RollbackIUCollector.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/RollbackIUCollector.java
@@ -10,7 +10,6 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.ui.query;
 
-import org.eclipse.equinox.internal.p2.ui.model.ProvElement;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.query.IQueryable;
 import org.eclipse.equinox.p2.ui.model.RollbackProfileElement;
@@ -23,11 +22,11 @@ import org.eclipse.equinox.p2.ui.model.RollbackProfileElement;
  */
 public class RollbackIUCollector extends AvailableIUCollector {
 
-	public RollbackIUCollector(IProvElementQueryProvider queryProvider, IQueryable queryable) {
+	public RollbackIUCollector(IQueryProvider queryProvider, IQueryable queryable) {
 		super(queryProvider, queryable, false);
 	}
 
-	protected ProvElement makeDefaultElement(IInstallableUnit iu) {
+	protected Object makeDefaultElement(IInstallableUnit iu) {
 		return new RollbackProfileElement(iu);
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/AvailableIUContentProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/AvailableIUContentProvider.java
index 95aa7c0..7b1c7b7 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/AvailableIUContentProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/AvailableIUContentProvider.java
@@ -19,7 +19,7 @@ import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.model.ProvElement;
 import org.eclipse.equinox.internal.p2.ui.model.RemoteQueriedElement;
 import org.eclipse.equinox.p2.ui.ProvUIImages;
-import org.eclipse.equinox.p2.ui.query.IProvElementQueryProvider;
+import org.eclipse.equinox.p2.ui.query.IQueryProvider;
 import org.eclipse.jface.viewers.AbstractTreeViewer;
 import org.eclipse.jface.viewers.Viewer;
 import org.eclipse.osgi.util.NLS;
@@ -89,7 +89,7 @@ public class AvailableIUContentProvider extends RepositoryContentProvider {
 	HashSet allChildren = new HashSet();
 	ArrayList runningJobs = new ArrayList();
 
-	public AvailableIUContentProvider(IProvElementQueryProvider queryProvider) {
+	public AvailableIUContentProvider(IQueryProvider queryProvider) {
 		super(queryProvider);
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/DeferredQueryContentProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/DeferredQueryContentProvider.java
index c8a8466..562421b 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/DeferredQueryContentProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/DeferredQueryContentProvider.java
@@ -12,7 +12,7 @@
 package org.eclipse.equinox.p2.ui.viewers;
 
 import org.eclipse.equinox.internal.p2.ui.model.ProvElement;
-import org.eclipse.equinox.p2.ui.query.IProvElementQueryProvider;
+import org.eclipse.equinox.p2.ui.query.IQueryProvider;
 import org.eclipse.equinox.p2.ui.query.QueriedElement;
 import org.eclipse.jface.viewers.*;
 import org.eclipse.ui.progress.DeferredTreeContentManager;
@@ -28,9 +28,9 @@ import org.eclipse.ui.progress.DeferredTreeContentManager;
 public class DeferredQueryContentProvider implements ITreeContentProvider {
 
 	DeferredTreeContentManager manager;
-	IProvElementQueryProvider queryProvider;
+	IQueryProvider queryProvider;
 
-	public DeferredQueryContentProvider(IProvElementQueryProvider queryProvider) {
+	public DeferredQueryContentProvider(IQueryProvider queryProvider) {
 		this.queryProvider = queryProvider;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/RepositoryContentProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/RepositoryContentProvider.java
index e0b960d..77eefac 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/RepositoryContentProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/RepositoryContentProvider.java
@@ -12,7 +12,7 @@
 package org.eclipse.equinox.p2.ui.viewers;
 
 import org.eclipse.equinox.p2.artifact.repository.IArtifactDescriptor;
-import org.eclipse.equinox.p2.ui.query.IProvElementQueryProvider;
+import org.eclipse.equinox.p2.ui.query.IQueryProvider;
 
 /**
  * Content provider for provisioning repositories. The repositories are the
@@ -24,7 +24,7 @@ import org.eclipse.equinox.p2.ui.query.IProvElementQueryProvider;
  */
 public class RepositoryContentProvider extends DeferredQueryContentProvider {
 
-	public RepositoryContentProvider(IProvElementQueryProvider queryProvider) {
+	public RepositoryContentProvider(IQueryProvider queryProvider) {
 		super(queryProvider);
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/StructuredViewerProvisioningListener.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/StructuredViewerProvisioningListener.java
index a7242bb..cee1515 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/StructuredViewerProvisioningListener.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/StructuredViewerProvisioningListener.java
@@ -17,7 +17,7 @@ import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.engine.ProfileEvent;
 import org.eclipse.equinox.p2.ui.IProvisioningListener;
 import org.eclipse.equinox.p2.ui.model.ProfileElement;
-import org.eclipse.equinox.p2.ui.query.IProvElementQueryProvider;
+import org.eclipse.equinox.p2.ui.query.IQueryProvider;
 import org.eclipse.jface.viewers.StructuredViewer;
 import org.eclipse.swt.widgets.Display;
 
@@ -37,9 +37,9 @@ public class StructuredViewerProvisioningListener implements SynchronousProvisio
 	int eventTypes = 0;
 	StructuredViewer viewer;
 	Display display;
-	IProvElementQueryProvider queryProvider;
+	IQueryProvider queryProvider;
 
-	public StructuredViewerProvisioningListener(StructuredViewer viewer, int eventTypes, IProvElementQueryProvider queryProvider) {
+	public StructuredViewerProvisioningListener(StructuredViewer viewer, int eventTypes, IQueryProvider queryProvider) {
 		this.viewer = viewer;
 		this.eventTypes = eventTypes;
 		this.display = viewer.getControl().getDisplay();

commit 9e4052921527d87152269437ec5e186198a83587
Author: John Arthorne <johna>
Date:   Sun Apr 6 15:45:36 2008 +0000

    Bug 220554 Support associateSitesURL in UM repository

18	1	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java
10	0	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/eventbus/ProvisioningListener.java
33	5	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/repository/RepositoryEvent.java
17	1	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java
index 3c73a04..48d7923 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java
@@ -19,6 +19,8 @@ import org.eclipse.equinox.internal.p2.artifact.repository.simple.SimpleArtifact
 import org.eclipse.equinox.internal.p2.core.helpers.*;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.*;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.equinox.internal.provisional.p2.core.eventbus.IProvisioningEventBus;
+import org.eclipse.equinox.internal.provisional.p2.core.eventbus.ProvisioningListener;
 import org.eclipse.equinox.internal.provisional.p2.core.location.AgentLocation;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.RepositoryEvent;
@@ -30,10 +32,11 @@ import org.osgi.service.prefs.Preferences;
 
 /**
  * Default implementation of {@link IArtifactRepositoryManager}.
+ * 
  * TODO the current assumption that the "location" is the dir/root limits us to 
  * having just one repository in a given URL..  
  */
-public class ArtifactRepositoryManager extends AbstractRepositoryManager implements IArtifactRepositoryManager {
+public class ArtifactRepositoryManager extends AbstractRepositoryManager implements IArtifactRepositoryManager, ProvisioningListener {
 	static class RepositoryInfo {
 		String description;
 		boolean isSystem = false;
@@ -71,6 +74,9 @@ public class ArtifactRepositoryManager extends AbstractRepositoryManager impleme
 	private SoftReference unavailableRepositories;
 
 	public ArtifactRepositoryManager() {
+		IProvisioningEventBus bus = (IProvisioningEventBus) ServiceHelper.getService(Activator.getContext(), IProvisioningEventBus.class.getName());
+		if (bus != null)
+			bus.addListener(this);
 		//initialize repositories lazily
 	}
 
@@ -378,6 +384,17 @@ public class ArtifactRepositoryManager extends AbstractRepositoryManager impleme
 		return true;
 	}
 
+	/*(non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.p2.core.eventbus.ProvisioningListener#notify(java.util.EventObject)
+	 */
+	public void notify(EventObject o) {
+		if (o instanceof RepositoryEvent) {
+			RepositoryEvent event = (RepositoryEvent) o;
+			if (event.getKind() == RepositoryEvent.DISCOVERED && event.getRepositoryType() == IRepository.TYPE_ARTIFACT)
+				addRepository(event.getRepositoryLocation());
+		}
+	}
+
 	/**
 	 * Sets a preference and returns <code>true</code> if the preference
 	 * was actually changed.
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/eventbus/ProvisioningListener.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/eventbus/ProvisioningListener.java
index aea3743..de76415 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/eventbus/ProvisioningListener.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/eventbus/ProvisioningListener.java
@@ -12,7 +12,17 @@ package org.eclipse.equinox.internal.provisional.p2.core.eventbus;
 
 import java.util.EventListener;
 import java.util.EventObject;
+import org.eclipse.equinox.internal.p2.core.ProvisioningEventBus;
 
+/**
+ * A listener that is notified about events related to provisioning.
+ * @see ProvisioningEventBus
+ */
 public interface ProvisioningListener extends EventListener {
+	//TODO: rename this interface to match eclipse conventions (IProvisioningListener)
+
+	/**
+	 * Notifies the listener about a provisioning event.
+	 */
 	public void notify(EventObject o);
 }
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/repository/RepositoryEvent.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/repository/RepositoryEvent.java
index a9b2845..0a6964b 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/repository/RepositoryEvent.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/repository/RepositoryEvent.java
@@ -14,17 +14,42 @@ import java.net.URL;
 import java.util.EventObject;
 
 /**
- * An event indicating a repository was added, removed, or changed.
+ * An event indicating a repository was added, removed, changed,
+ * or discovered.
  * 
  * @noextend This class is not intended to be subclassed by clients.
  */
 public class RepositoryEvent extends EventObject {
 	private static final long serialVersionUID = 3082402920617281765L;
 
+	/**
+	 * A change kind constant (value 0), indicating a repository was added to the 
+	 * list of repositories known to a repository manager.
+	 */
 	public static final int ADDED = 0;
+
+	/**
+	 * A change kind constant (value 1), indicating a repository was removed from 
+	 * the list of repositories known to a repository manager.
+	 */
 	public static final int REMOVED = 1;
+
+	/**
+	 * A change kind constant (value 2), indicating a repository known to a 
+	 * repository manager was modified.
+	 */
 	public static final int CHANGED = 2;
 
+	/**
+	 * A change kind constant (value 4), indicating a new repository was discovered.
+	 * This event is a way to notify repository managers in a generic way about
+	 * a newly discovered repository. The repository manager will typically receive
+	 * this event, add the repository to its list of known repositories, and issue
+	 * a subsequent {@link #ADDED} event. Other clients should not typically
+	 * listen for this kind of event.
+	 */
+	public static final int DISCOVERED = 4;
+
 	private final int kind, type;
 
 	/**
@@ -48,24 +73,27 @@ public class RepositoryEvent extends EventObject {
 	 * @see #ADDED
 	 * @see #REMOVED
 	 * @see #CHANGED
+	 * @see #DISCOVERED
 	 */
 	public int getKind() {
 		return kind;
 	}
 
 	/**
-	 * Returns the location of the repository that changed.
+	 * Returns the location of the repository associated with this event.
 	 * 
-	 * @return the location of the repository that changed.
+	 * @return the location of the repository associated with this event.
 	 */
 	public URL getRepositoryLocation() {
 		return (URL) getSource();
 	}
 
 	/**
-	 * Returns the type of repository that was changed.
+	 * Returns the type of repository associated with this event. Clients
+	 * should not assume that the set of possible repository types is closed;
+	 * clients should ignore events from repository types they don't know about.
 	 * 
-	 * @return the type of repository that was changed
+	 * @return the type of repository associated with this event.
 	 *  ({@link IRepository#TYPE_METADATA} or {@link IRepository#TYPE_ARTIFACT}).
 	 */
 	public int getRepositoryType() {
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java
index a07e981..888ebdf 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java
@@ -19,6 +19,7 @@ import org.eclipse.core.runtime.preferences.ConfigurationScope;
 import org.eclipse.equinox.internal.p2.core.helpers.*;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.core.eventbus.IProvisioningEventBus;
+import org.eclipse.equinox.internal.provisional.p2.core.eventbus.ProvisioningListener;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.RepositoryEvent;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepository;
@@ -33,7 +34,7 @@ import org.osgi.service.prefs.Preferences;
 /**
  * Default implementation of {@link IMetadataRepositoryManager}.
  */
-public class MetadataRepositoryManager implements IMetadataRepositoryManager {
+public class MetadataRepositoryManager implements IMetadataRepositoryManager, ProvisioningListener {
 	static class RepositoryInfo {
 		String description;
 		boolean isSystem = false;
@@ -73,6 +74,9 @@ public class MetadataRepositoryManager implements IMetadataRepositoryManager {
 	private SoftReference unavailableRepositories;
 
 	public MetadataRepositoryManager() {
+		IProvisioningEventBus bus = (IProvisioningEventBus) ServiceHelper.getService(Activator.getContext(), IProvisioningEventBus.class.getName());
+		if (bus != null)
+			bus.addListener(this);
 		//initialize repositories lazily
 	}
 
@@ -405,6 +409,17 @@ public class MetadataRepositoryManager implements IMetadataRepositoryManager {
 		return true;
 	}
 
+	/*(non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.p2.core.eventbus.ProvisioningListener#notify(java.util.EventObject)
+	 */
+	public void notify(EventObject o) {
+		if (o instanceof RepositoryEvent) {
+			RepositoryEvent event = (RepositoryEvent) o;
+			if (event.getKind() == RepositoryEvent.DISCOVERED && event.getRepositoryType() == IRepository.TYPE_METADATA)
+				addRepository(event.getRepositoryLocation());
+		}
+	}
+
 	/**
 	 * Sets a preference and returns <code>true</code> if the preference
 	 * was actually changed.
@@ -632,4 +647,5 @@ public class MetadataRepositoryManager implements IMetadataRepositoryManager {
 		sub.done();
 		return status;
 	}
+
 }
commit a2bfcdfe3b2ec6cc1303b270e17b84ac7076c9f7
Author: John Arthorne <johna>
Date:   Thu Apr 10 18:21:17 2008 +0000

    Bug 220554 Support associateSitesURL in UM repository

37	42	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/features/DefaultSiteParser.java
14	0	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/features/SiteModel.java
1	0	bundles/org.eclipse.equinox.p2.updatesite/META-INF/MANIFEST.MF
31	0	bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepository.java
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/features/DefaultSiteParser.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/features/DefaultSiteParser.java
index 8bda05c..75a037a 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/features/DefaultSiteParser.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/features/DefaultSiteParser.java
@@ -33,8 +33,8 @@ public class DefaultSiteParser extends DefaultHandler {
 	private static final String CATEGORY = "category"; //$NON-NLS-1$
 	private static final String CATEGORY_DEF = "category-def"; //$NON-NLS-1$
 
-	//private static final String ASSOCIATE_SITES = "associateSites"; //$NON-NLS-1$
-	//	private static final String ASSOCIATE_SITE = "associateSite"; //$NON-NLS-1$
+	private static final String ASSOCIATE_SITES_URL = "associateSitesURL"; //$NON-NLS-1$
+	private static final String ASSOCIATE_SITE = "associateSite"; //$NON-NLS-1$
 	private static final String DEFAULT_INFO_URL = "index.html"; //$NON-NLS-1$
 	private static final String DESCRIPTION = "description"; //$NON-NLS-1$
 	private static final String FEATURE = "feature"; //$NON-NLS-1$
@@ -75,39 +75,39 @@ public class DefaultSiteParser extends DefaultHandler {
 		Tracing.debug("DefaultSiteParser: " + s); //$NON-NLS-1$
 	}
 
-	//	private static URLEntry[] getAssociateSites(String associateSitesURL) {
-	//
-	//		try {
-	//			DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();
-	//			DocumentBuilder builder = domFactory.newDocumentBuilder();
-	//			Document document = builder.parse(associateSitesURL);
-	//			if (document == null)
-	//				return null;
-	//			NodeList mirrorNodes = document.getElementsByTagName(ASSOCIATE_SITE);
-	//			URLEntry[] mirrors = new URLEntry[mirrorNodes.getLength()];
-	//			for (int i = 0; i < mirrorNodes.getLength(); i++) {
-	//				Element mirrorNode = (Element) mirrorNodes.item(i);
-	//				mirrors[i] = new URLEntry();
-	//				String infoURL = mirrorNode.getAttribute("url"); //$NON-NLS-1$
-	//				String label = mirrorNode.getAttribute("label"); //$NON-NLS-1$
-	//				mirrors[i].setURL(infoURL);
-	//				mirrors[i].setAnnotation(label);
-	//
-	//				if (Tracing.DEBUG_GENERATOR_PARSING)
-	//					debug("Processed mirror: url:" + infoURL + " label:" + label); //$NON-NLS-1$ //$NON-NLS-2$
-	//			}
-	//			return mirrors;
-	//		} catch (Exception e) {
-	//			// log if absolute url
-	//			if (associateSitesURL != null && (associateSitesURL.startsWith("http://") //$NON-NLS-1$
-	//					|| associateSitesURL.startsWith("https://") //$NON-NLS-1$
-	//					|| associateSitesURL.startsWith("file://") //$NON-NLS-1$
-	//					|| associateSitesURL.startsWith("ftp://") //$NON-NLS-1$
-	//			|| associateSitesURL.startsWith("jar://"))) //$NON-NLS-1$
-	//				log(Messages.DefaultSiteParser_mirrors, e);
-	//			return null;
-	//		}
-	//	}
+	private static URLEntry[] getAssociateSites(String associateSitesURL) {
+
+		try {
+			DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();
+			DocumentBuilder builder = domFactory.newDocumentBuilder();
+			Document document = builder.parse(associateSitesURL);
+			if (document == null)
+				return null;
+			NodeList mirrorNodes = document.getElementsByTagName(ASSOCIATE_SITE);
+			URLEntry[] mirrors = new URLEntry[mirrorNodes.getLength()];
+			for (int i = 0; i < mirrorNodes.getLength(); i++) {
+				Element mirrorNode = (Element) mirrorNodes.item(i);
+				mirrors[i] = new URLEntry();
+				String infoURL = mirrorNode.getAttribute("url"); //$NON-NLS-1$
+				String label = mirrorNode.getAttribute("label"); //$NON-NLS-1$
+				mirrors[i].setURL(infoURL);
+				mirrors[i].setAnnotation(label);
+
+				if (Tracing.DEBUG_GENERATOR_PARSING)
+					debug("Processed mirror: url:" + infoURL + " label:" + label); //$NON-NLS-1$ //$NON-NLS-2$
+			}
+			return mirrors;
+		} catch (Exception e) {
+			// log if absolute url
+			if (associateSitesURL != null && (associateSitesURL.startsWith("http://") //$NON-NLS-1$
+					|| associateSitesURL.startsWith("https://") //$NON-NLS-1$
+					|| associateSitesURL.startsWith("file://") //$NON-NLS-1$
+					|| associateSitesURL.startsWith("ftp://") //$NON-NLS-1$
+			|| associateSitesURL.startsWith("jar://"))) //$NON-NLS-1$
+				log(Messages.DefaultSiteParser_mirrors, e);
+			return null;
+		}
+	}
 
 	static URLEntry[] getMirrors(String mirrorsURL) {
 
@@ -768,13 +768,8 @@ public class DefaultSiteParser extends DefaultHandler {
 		//			}
 		//		}
 		//
-		//		if ((site instanceof ExtendedSite) && (attributes.getValue("associateSitesURL") != null)) { //$NON-NLS-1$
-		//			IURLEntry[] associateSites = getAssociateSites(attributes.getValue("associateSitesURL"), factory); //$NON-NLS-1$
-		//			if (associateSites != null)
-		//				((ExtendedSite) site).setAssociateSites(associateSites);
-		//			else
-		//				site.setMirrorsURLString(mirrorsURL);
-		//		}
+		if (attributes.getValue(ASSOCIATE_SITES_URL) != null)
+			site.setAssociateSites(getAssociateSites(attributes.getValue(ASSOCIATE_SITES_URL)));
 
 		objectStack.push(site);
 
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/features/SiteModel.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/features/SiteModel.java
index 6209724..f13149d 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/features/SiteModel.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/features/SiteModel.java
@@ -38,6 +38,7 @@ public class SiteModel {
 	private String mirrorsURLString;
 	private boolean supportsPack200;
 	private String type;
+	private URLEntry[] associateSites;
 
 	/**
 	 * Creates an uninitialized site model object.
@@ -120,6 +121,10 @@ public class SiteModel {
 		return (URLEntry[]) archiveReferences.toArray(new URLEntry[0]);
 	}
 
+	public URLEntry[] getAssociatedSites() {
+		return associateSites;
+	}
+
 	/**
 	 * Returns an array of category models for this site.
 	 * 
@@ -310,4 +315,13 @@ public class SiteModel {
 	public void setType(String type) {
 		this.type = type;
 	}
+
+	/**
+	 * Sets the associated sites for this update site.
+	 * 
+	 * @param associateSites the associated sites
+	 */
+	public void setAssociateSites(URLEntry[] associateSites) {
+		this.associateSites = associateSites;
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.updatesite/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.updatesite/META-INF/MANIFEST.MF
index 471bbe4..f35258d 100644
--- a/bundles/org.eclipse.equinox.p2.updatesite/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.updatesite/META-INF/MANIFEST.MF
@@ -11,6 +11,7 @@ Import-Package: org.eclipse.equinox.internal.p2.core.helpers,
  org.eclipse.equinox.internal.p2.metadata.generator.features,
  org.eclipse.equinox.internal.provisional.p2.artifact.repository,
  org.eclipse.equinox.internal.provisional.p2.core,
+ org.eclipse.equinox.internal.provisional.p2.core.eventbus,
  org.eclipse.equinox.internal.provisional.p2.core.repository,
  org.eclipse.equinox.internal.provisional.p2.metadata,
  org.eclipse.equinox.internal.provisional.p2.metadata.generator,
diff --git a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepository.java b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepository.java
index a9d0899..dc32468 100644
--- a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepository.java
+++ b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/metadata/UpdateSiteMetadataRepository.java
@@ -15,11 +15,15 @@ import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.*;
 import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
+import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.metadata.generator.features.*;
 import org.eclipse.equinox.internal.p2.updatesite.*;
 import org.eclipse.equinox.internal.p2.updatesite.Messages;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.equinox.internal.provisional.p2.core.eventbus.IProvisioningEventBus;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
+import org.eclipse.equinox.internal.provisional.p2.core.repository.RepositoryEvent;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.metadata.generator.*;
@@ -43,6 +47,7 @@ public class UpdateSiteMetadataRepository extends AbstractRepository implements
 		// todo progress monitoring
 		// loading validates before we create repositories
 		UpdateSite updateSite = UpdateSite.load(location, null);
+		broadcastAssociateSites(updateSite);
 
 		BundleContext context = Activator.getBundleContext();
 		String stateDirName = Integer.toString(location.toExternalForm().hashCode());
@@ -66,6 +71,32 @@ public class UpdateSiteMetadataRepository extends AbstractRepository implements
 		metadataRepository.setProperty(PROP_SITE_CHECKSUM, updateSite.getChecksum());
 	}
 
+	/**
+	 * Broadcast events for any associated sites for this repository so repository
+	 * managers are aware of them.
+	 */
+	private void broadcastAssociateSites(UpdateSite baseSite) {
+		if (baseSite == null)
+			return;
+		URLEntry[] sites = baseSite.getSite().getAssociatedSites();
+		if (sites == null || sites.length == 0)
+			return;
+
+		IProvisioningEventBus bus = (IProvisioningEventBus) ServiceHelper.getService(Activator.getBundleContext(), IProvisioningEventBus.SERVICE_NAME);
+		if (bus == null)
+			return;
+		for (int i = 0; i < sites.length; i++) {
+			try {
+				URL siteLocation = new URL(sites[i].getURL());
+				bus.publishEvent(new RepositoryEvent(siteLocation, IRepository.TYPE_METADATA, RepositoryEvent.DISCOVERED));
+				bus.publishEvent(new RepositoryEvent(siteLocation, IRepository.TYPE_ARTIFACT, RepositoryEvent.DISCOVERED));
+			} catch (MalformedURLException e) {
+				LogHelper.log(new Status(IStatus.WARNING, Activator.ID, "Site has invalid associate site: " + baseSite.getLocation(), e)); //$NON-NLS-1$
+			}
+		}
+
+	}
+
 	private void generateMetadata(UpdateSite updateSite) throws ProvisionException {
 		SiteModel siteModel = updateSite.getSite();
 		SiteCategory[] siteCategories = siteModel.getCategories();

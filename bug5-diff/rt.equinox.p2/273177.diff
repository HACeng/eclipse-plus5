commit 2fa927f35a50a8acecaa3e53c553348958d4a4f9
Author: Pascal Rapicault <prapicau>
Date:   Mon Apr 27 13:52:35 2009 +0000

    Bug 273177 - [publisher] No metadata generated for a product license

10	0	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/internal/p2/publisher/eclipse/IProductDescriptor.java
44	0	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/internal/p2/publisher/eclipse/ProductFile.java
21	0	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/ILicenseAdvice.java
25	0	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/RootIUAction.java
29	3	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/ProductFileAdvice.java
53	2	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/ProductActionTest.java
12	0	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/ProductFileTest.java
1	0	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/RootIUActionTest.java
33	0	bundles/org.eclipse.equinox.p2.tests/testData/ProductActionTest/licenseNoText.product
37	0	bundles/org.eclipse.equinox.p2.tests/testData/ProductActionTest/licenseNoURL.product
34	0	bundles/org.eclipse.equinox.p2.tests/testData/ProductActionTest/productWithLicense.product
27	0	bundles/org.eclipse.equinox.p2.tests/testData/ProductActionTest/productWithNoLicense.product
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/internal/p2/publisher/eclipse/IProductDescriptor.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/internal/p2/publisher/eclipse/IProductDescriptor.java
index e4a742a..cdb7a70 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/internal/p2/publisher/eclipse/IProductDescriptor.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/internal/p2/publisher/eclipse/IProductDescriptor.java
@@ -116,4 +116,14 @@ public interface IProductDescriptor {
 	 */
 	public File getLocation();
 
+	/**
+	 * Returns the license URL for this product
+	 */
+	public String getLicenseURL();
+
+	/**
+	 * Returns the license text for this product
+	 */
+	public String getLicenseText();
+
 }
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/internal/p2/publisher/eclipse/ProductFile.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/internal/p2/publisher/eclipse/ProductFile.java
index cf2f67d..eded654 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/internal/p2/publisher/eclipse/ProductFile.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/internal/p2/publisher/eclipse/ProductFile.java
@@ -85,6 +85,9 @@ public class ProductFile extends DefaultHandler implements IProductDescriptor {
 	private static final String EL_LAUNCHER_ARGS = "launcherArgs"; //$NON-NLS-1$
 	private static final String EL_SPLASH = "splash"; //$NON-NLS-1$
 	private static final String EL_CONFIGURATIONS = "configurations"; //$NON-NLS-1$
+	private static final String EL_LICENSE = "license"; //$NON-NLS-1$
+	private static final String EL_URL = "url"; //$NON-NLS-1$
+	private static final String EL_TEXT = "text"; //$NON-NLS-1$
 
 	//These constants form a small state machine to parse the .product file
 	private static final int STATE_START = 0;
@@ -105,6 +108,9 @@ public class ProductFile extends DefaultHandler implements IProductDescriptor {
 	private static final int STATE_VM_ARGS_WIN = 15;
 	private static final int STATE_CONFIG_INI = 16;
 	private static final int STATE_CONFIGURATIONS = 17;
+	private static final int STATE_LICENSE = 18;
+	private static final int STATE_LICENSE_URL = 19;
+	private static final int STATE_LICENSE_TEXT = 20;
 
 	private int state = STATE_START;
 
@@ -130,6 +136,8 @@ public class ProductFile extends DefaultHandler implements IProductDescriptor {
 	private File location;
 	private List bundleInfos;
 	private Properties properties;
+	private String licenseURL;
+	private String licenseText = null;
 
 	private static String normalize(String text) {
 		if (text == null || text.trim().length() == 0)
@@ -370,6 +378,14 @@ public class ProductFile extends DefaultHandler implements IProductDescriptor {
 		return normalize(args);
 	}
 
+	public String getLicenseText() {
+		return licenseText;
+	}
+
+	public String getLicenseURL() {
+		return licenseURL;
+	}
+
 	public void startElement(String uri, String localName, String qName, Attributes attributes) {
 		switch (state) {
 			case STATE_START :
@@ -396,6 +412,8 @@ public class ProductFile extends DefaultHandler implements IProductDescriptor {
 					splashLocation = attributes.getValue(ATTRIBUTE_LOCATION);
 				} else if (EL_CONFIGURATIONS.equals(localName)) {
 					state = STATE_CONFIGURATIONS;
+				} else if (EL_LICENSE.equals(localName)) {
+					state = STATE_LICENSE;
 				}
 				break;
 
@@ -450,6 +468,15 @@ public class ProductFile extends DefaultHandler implements IProductDescriptor {
 				}
 				break;
 
+			case STATE_LICENSE :
+				if (EL_URL.equals(localName)) {
+					state = STATE_LICENSE_URL;
+				} else if (EL_TEXT.equals(localName)) {
+					licenseText = ""; //$NON-NLS-1$
+					state = STATE_LICENSE_TEXT;
+				}
+				break;
+
 			case STATE_FEATURES :
 				if (EL_FEATURE.equals(localName)) {
 					processFeature(attributes);
@@ -519,6 +546,10 @@ public class ProductFile extends DefaultHandler implements IProductDescriptor {
 				if (EL_CONFIGURATIONS.equals(localName))
 					state = STATE_PRODUCT;
 				break;
+			case STATE_LICENSE :
+				if (EL_LICENSE.equals(localName))
+					state = STATE_PRODUCT;
+				break;
 
 			case STATE_PROGRAM_ARGS :
 			case STATE_PROGRAM_ARGS_LINUX :
@@ -532,6 +563,10 @@ public class ProductFile extends DefaultHandler implements IProductDescriptor {
 			case STATE_VM_ARGS_WIN :
 				state = STATE_LAUNCHER_ARGS;
 				break;
+			case STATE_LICENSE_URL :
+			case STATE_LICENSE_TEXT :
+				state = STATE_LICENSE;
+				break;
 
 			case STATE_CONFIG_INI :
 				if (EL_CONFIG_INI.equals(localName))
@@ -578,6 +613,14 @@ public class ProductFile extends DefaultHandler implements IProductDescriptor {
 				if (platformConfigPath != null)
 					platformConfigPath += String.valueOf(ch, start, length);
 				break;
+			case STATE_LICENSE_URL :
+				licenseURL = String.valueOf(ch, start, length);
+				break;
+			case STATE_LICENSE_TEXT :
+				if (licenseText != null)
+					licenseText += String.valueOf(ch, start, length);
+				break;
+
 		}
 	}
 
@@ -698,4 +741,5 @@ public class ProductFile extends DefaultHandler implements IProductDescriptor {
 	private void processMac(Attributes attributes) {
 		addIcon(OS_MACOSX, attributes.getValue(ATTRIBUTE_ICON));
 	}
+
 }
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/ILicenseAdvice.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/ILicenseAdvice.java
new file mode 100644
index 0000000..03868e0
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/ILicenseAdvice.java
@@ -0,0 +1,21 @@
+/******************************************************************************* 
+* Copyright (c) 2009 EclipseSource and others. All rights reserved. This
+* program and the accompanying materials are made available under the terms of
+* the Eclipse Public License v1.0 which accompanies this distribution, and is
+* available at http://www.eclipse.org/legal/epl-v10.html
+*
+* Contributors:
+*   EclipseSource - initial API and implementation
+******************************************************************************/
+package org.eclipse.equinox.p2.publisher.actions;
+
+/**
+ * Provides advice about a license.
+ */
+public interface ILicenseAdvice {
+
+	public String getLicenseURL();
+
+	public String getLicenseText();
+
+}
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/RootIUAction.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/RootIUAction.java
index 77fcb84..156a682 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/RootIUAction.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/RootIUAction.java
@@ -10,6 +10,8 @@
  ******************************************************************************/
 package org.eclipse.equinox.p2.publisher.actions;
 
+import java.net.URI;
+import java.net.URISyntaxException;
 import java.util.*;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.publisher.*;
@@ -49,6 +51,7 @@ public class RootIUAction extends AbstractPublisherAction {
 		processCapabilityAdvice(descriptor, info);
 		processTouchpointAdvice(descriptor, null, info);
 		processInstallableUnitPropertiesAdvice(descriptor, info);
+		processLicense(descriptor, info);
 		IInstallableUnit rootIU = MetadataFactory.createInstallableUnit(descriptor);
 		if (rootIU == null)
 			return new Status(IStatus.ERROR, Activator.ID, NLS.bind(Messages.error_rootIU_generation, new Object[] {name, id, version}));
@@ -64,6 +67,28 @@ public class RootIUAction extends AbstractPublisherAction {
 		//		result.addIU(generateDefaultCategory(rootIU, rootCategory), IPublisherResult.NON_ROOT);
 	}
 
+	protected static void processLicense(InstallableUnitDescription iu, IPublisherInfo info) {
+		Collection advice = info.getAdvice(null, true, iu.getId(), iu.getVersion(), ILicenseAdvice.class);
+		if (advice.size() > 0) {
+			// Only process the first license we find for this IU.
+			ILicenseAdvice entry = (ILicenseAdvice) advice.iterator().next();
+			String licenseText = entry.getLicenseText() == null ? "" : entry.getLicenseText(); //$NON-NLS-1$
+			String licenseUrl = entry.getLicenseURL() == null ? "" : entry.getLicenseURL(); //$NON-NLS-1$
+			if (licenseText.length() > 0 || licenseUrl.length() > 0)
+				iu.setLicense(MetadataFactory.createLicense(toURIOrNull(licenseUrl), licenseText));
+		}
+	}
+
+	private static URI toURIOrNull(String url) {
+		if (url == null)
+			return null;
+		try {
+			return URIUtil.fromString(url);
+		} catch (URISyntaxException e) {
+			return null;
+		}
+	}
+
 	/**
 	 * This was copied over from Generator to match up with the call from generateRootIU (above).
 	 * It is entirely unclear why it was needed.  Should review.
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/ProductFileAdvice.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/ProductFileAdvice.java
index 8ebb9af..586cb66 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/ProductFileAdvice.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/ProductFileAdvice.java
@@ -20,12 +20,13 @@ import org.eclipse.equinox.internal.provisional.frameworkadmin.ConfigData;
 import org.eclipse.equinox.internal.provisional.p2.core.Version;
 import org.eclipse.equinox.p2.publisher.AbstractAdvice;
 import org.eclipse.equinox.p2.publisher.AbstractPublisherAction;
+import org.eclipse.equinox.p2.publisher.actions.ILicenseAdvice;
 
 /**
  * Provide advice derived from the .product file.  The product can give some info on 
  * launching as well as the configuration (bundles, properties, ...)
  */
-public class ProductFileAdvice extends AbstractAdvice implements IExecutableAdvice, IConfigAdvice, IBrandingAdvice {
+public class ProductFileAdvice extends AbstractAdvice implements ILicenseAdvice, IExecutableAdvice, IConfigAdvice, IBrandingAdvice {
 
 	private final static String OSGI_SPLASH_PATH = "osgi.splashPath"; //$NON-NLS-1$
 	private final static String SPLASH_PREFIX = "platform:/base/plugins/"; //$NON-NLS-1$
@@ -49,6 +50,14 @@ public class ProductFileAdvice extends AbstractAdvice implements IExecutableAdvi
 		}
 	};
 
+	protected String getId() {
+		return product.getId();
+	}
+
+	protected Version getVersion() {
+		return Version.parseVersion(product.getVersion());
+	}
+
 	/**
 	 * Constructs a new ProductFileAdvice for a given product file and a
 	 * particular configuration. Configurations are 
@@ -132,6 +141,20 @@ public class ProductFileAdvice extends AbstractAdvice implements IExecutableAdvi
 		return this.os;
 	}
 
+	/**
+	 * Returns the license text for this product
+	 */
+	public String getLicenseURL() {
+		return product.getLicenseURL();
+	}
+
+	/**
+	 * Returns the license URL for this product
+	 */
+	public String getLicenseText() {
+		return product.getLicenseText();
+	}
+
 	private ConfigData getConfigData() {
 		DataLoader loader = createDataLoader();
 		ConfigData result;
@@ -206,8 +229,11 @@ public class ProductFileAdvice extends AbstractAdvice implements IExecutableAdvi
 	}
 
 	protected boolean matchConfig(String spec, boolean includeDefault) {
-		String targetOS = AbstractPublisherAction.parseConfigSpec(spec)[1];
-		return os.equals(targetOS);
+		if (spec != null) {
+			String targetOS = AbstractPublisherAction.parseConfigSpec(spec)[1];
+			return os.equals(targetOS);
+		}
+		return true;
 	}
 
 	private DataLoader createDataLoader() {
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/ProductActionTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/ProductActionTest.java
index 346fcb4..cb3faf8 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/ProductActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/ProductActionTest.java
@@ -20,8 +20,8 @@ import org.easymock.EasyMock;
 import org.eclipse.equinox.internal.p2.publisher.eclipse.ProductFile;
 import org.eclipse.equinox.internal.provisional.frameworkadmin.BundleInfo;
 import org.eclipse.equinox.internal.provisional.p2.core.Version;
-import org.eclipse.equinox.p2.publisher.IPublisherInfo;
-import org.eclipse.equinox.p2.publisher.IPublisherResult;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.publisher.*;
 import org.eclipse.equinox.p2.publisher.actions.RootIUAdvice;
 import org.eclipse.equinox.p2.publisher.eclipse.*;
 import org.eclipse.equinox.p2.tests.TestData;
@@ -74,6 +74,57 @@ public class ProductActionTest extends ActionTest {
 		//TODO assert branding was done correctly
 	}
 
+	public void testLicense() throws Exception {
+		ProductFile productFile = new ProductFile(TestData.getFile("ProductActionTest", "productWithLicense.product").toString());
+		PublisherInfo info = new PublisherInfo();
+		info.setConfigurations(new String[] {"win32.win32.x86"});
+		testAction = new ProductAction(source, productFile, flavorArg, executablesFeatureLocation);
+		testAction.perform(info, publisherResult, null);
+		Collection ius = publisherResult.getIUs("licenseIU.product", IPublisherResult.NON_ROOT);
+		assertEquals("1.0", 1, ius.size());
+		IInstallableUnit iu = (IInstallableUnit) ius.iterator().next();
+		assertEquals("1.1", "http://www.example.com", iu.getLicense().getLocation().toString());
+		assertEquals("1.2", "This is the liCenSE.", iu.getLicense().getBody().trim());
+	}
+
+	public void testLicenseNoURL() throws Exception {
+		ProductFile productFile = new ProductFile(TestData.getFile("ProductActionTest", "licenseNoURL.product").toString());
+		PublisherInfo info = new PublisherInfo();
+		info.setConfigurations(new String[] {"win32.win32.x86"});
+		testAction = new ProductAction(source, productFile, flavorArg, executablesFeatureLocation);
+		testAction.perform(info, publisherResult, null);
+		Collection ius = publisherResult.getIUs("licenseIU.product", IPublisherResult.NON_ROOT);
+		assertEquals("1.0", 1, ius.size());
+		IInstallableUnit iu = (IInstallableUnit) ius.iterator().next();
+		assertEquals("1.1", "", iu.getLicense().getLocation().toString());
+		assertEquals("1.2", "This is the liCenSE.", iu.getLicense().getBody().trim());
+	}
+
+	public void testLicenseNoText() throws Exception {
+		ProductFile productFile = new ProductFile(TestData.getFile("ProductActionTest", "licenseNoText.product").toString());
+		PublisherInfo info = new PublisherInfo();
+		info.setConfigurations(new String[] {"win32.win32.x86"});
+		testAction = new ProductAction(source, productFile, flavorArg, executablesFeatureLocation);
+		testAction.perform(info, publisherResult, null);
+		Collection ius = publisherResult.getIUs("licenseIU.product", IPublisherResult.NON_ROOT);
+		assertEquals("1.0", 1, ius.size());
+		IInstallableUnit iu = (IInstallableUnit) ius.iterator().next();
+		assertEquals("1.1", "http://www.example.com", iu.getLicense().getLocation().toString());
+		assertEquals("1.2", "", iu.getLicense().getBody().trim());
+	}
+
+	public void testMissingLicense() throws Exception {
+		ProductFile productFile = new ProductFile(TestData.getFile("ProductActionTest", "productWithNoLicense.product").toString());
+		PublisherInfo info = new PublisherInfo();
+		info.setConfigurations(new String[] {"win32.win32.x86"});
+		testAction = new ProductAction(source, productFile, flavorArg, executablesFeatureLocation);
+		testAction.perform(info, publisherResult, null);
+		Collection ius = publisherResult.getIUs("licenseIU.product", IPublisherResult.NON_ROOT);
+		assertEquals("1.0", 1, ius.size());
+		IInstallableUnit iu = (IInstallableUnit) ius.iterator().next();
+		assertNull("1.1", iu.getLicense());
+	}
+
 	/**
 	 * Tests that a product file containing bundle configuration data produces appropriate 
 	 * IConfigAdvice (start levels, auto-start).
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/ProductFileTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/ProductFileTest.java
index 68c7061..aba3cd8 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/ProductFileTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/ProductFileTest.java
@@ -196,4 +196,16 @@ public class ProductFileTest extends TestCase {
 		assertEquals("1.1", "programArg", programArguments);
 	}
 
+	public void testGetLicenseURL() throws Exception {
+		String productWithLicense = TestData.getFile("ProductActionTest", "productWithLicense.product").toString();
+		ProductFile product = new ProductFile(productWithLicense);
+		assertEquals("1.0", "http://www.example.com", product.getLicenseURL());
+	}
+
+	public void testGetLicenseText() throws Exception {
+		String productWithLicense = TestData.getFile("ProductActionTest", "productWithLicense.product").toString();
+		ProductFile product = new ProductFile(productWithLicense);
+		assertEquals("1.0", "This is the liCenSE.", product.getLicenseText().trim());
+	}
+
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/RootIUActionTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/RootIUActionTest.java
index 09e9cd0..3ee0dec 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/RootIUActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/RootIUActionTest.java
@@ -345,6 +345,7 @@ public class RootIUActionTest extends ActionTest {
 		expect(publisherInfo.getAdvice(null, false, rootIU, versionArg, ITouchpointAdvice.class)).andReturn(new ArrayList()).anyTimes();
 		expect(publisherInfo.getAdvice(null, false, rootIU, versionArg, IPropertyAdvice.class)).andReturn(new ArrayList()).anyTimes();
 		expect(publisherInfo.getAdvice(null, false, rootIU, versionArg, IAdditionalInstallableUnitAdvice.class)).andReturn(new ArrayList()).anyTimes();
+		expect(publisherInfo.getAdvice(null, true, rootIU, versionArg, ILicenseAdvice.class)).andReturn(new ArrayList()).anyTimes();
 		expect(publisherInfo.getMetadataRepository()).andReturn(metadataRepository).anyTimes();
 		expect(publisherInfo.getContextMetadataRepository()).andReturn(null).anyTimes();
 	}
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/ProductActionTest/licenseNoText.product b/bundles/org.eclipse.equinox.p2.tests/testData/ProductActionTest/licenseNoText.product
new file mode 100644
index 0000000..5ba1e3d
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests/testData/ProductActionTest/licenseNoText.product
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<?pde version="3.5"?>
+
+<product name="Product With License" uid="licenseIU.product" useFeatures="false" includeLaunchers="true">
+
+   <configIni use="default">
+   </configIni>
+
+   <launcherArgs>
+      <vmArgsMac>-XstartOnFirstThread -Dorg.eclipse.swt.internal.carbon.smallFonts</vmArgsMac>
+   </launcherArgs>
+
+   <windowImages/>
+
+   <launcher>
+      <solaris/>
+      <win useIco="false">
+         <bmp/>
+      </win>
+   </launcher>
+
+   <vm>
+   </vm>
+
+   <license>
+        <url>http://www.example.com</url>
+   </license>
+
+   <plugins>
+   </plugins>
+
+
+</product>
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/ProductActionTest/licenseNoURL.product b/bundles/org.eclipse.equinox.p2.tests/testData/ProductActionTest/licenseNoURL.product
new file mode 100644
index 0000000..6589ed1
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests/testData/ProductActionTest/licenseNoURL.product
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<?pde version="3.5"?>
+
+<product name="Product With License" uid="licenseIU.product" useFeatures="false" includeLaunchers="true">
+
+
+   <configIni use="default">
+   </configIni>
+
+   <launcherArgs>
+      <vmArgsMac>-XstartOnFirstThread -Dorg.eclipse.swt.internal.carbon.smallFonts</vmArgsMac>
+   </launcherArgs>
+
+   <windowImages/>
+
+   <launcher>
+      <solaris/>
+      <win useIco="false">
+         <bmp/>
+      </win>
+   </launcher>
+
+
+   <vm>
+   </vm>
+
+   <license>
+        <text>
+   This is the liCenSE.
+         </text>
+   </license>
+
+   <plugins>
+   </plugins>
+
+
+</product>
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/ProductActionTest/productWithLicense.product b/bundles/org.eclipse.equinox.p2.tests/testData/ProductActionTest/productWithLicense.product
new file mode 100644
index 0000000..f853001
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests/testData/ProductActionTest/productWithLicense.product
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<?pde version="3.5"?>
+
+<product name="Product With License" uid="licenseIU.product" useFeatures="false" includeLaunchers="true">
+
+   <configIni use="default">
+   </configIni>
+
+   <launcherArgs>
+      <vmArgsMac>-XstartOnFirstThread -Dorg.eclipse.swt.internal.carbon.smallFonts</vmArgsMac>
+   </launcherArgs>
+
+   <launcher>
+      <solaris/>
+      <win useIco="false">
+         <bmp/>
+      </win>
+   </launcher>
+
+   <vm>
+   </vm>
+
+   <license>
+        <url>http://www.example.com</url>
+        <text>
+   This is the liCenSE.
+         </text>
+   </license>
+
+   <plugins>
+   </plugins>
+
+
+</product>
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/ProductActionTest/productWithNoLicense.product b/bundles/org.eclipse.equinox.p2.tests/testData/ProductActionTest/productWithNoLicense.product
new file mode 100644
index 0000000..48a5dd7
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests/testData/ProductActionTest/productWithNoLicense.product
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<?pde version="3.5"?>
+
+<product name="Product With License" uid="licenseIU.product" useFeatures="false" includeLaunchers="true">
+
+   <configIni use="default">
+   </configIni>
+
+   <launcherArgs>
+      <vmArgsMac>-XstartOnFirstThread -Dorg.eclipse.swt.internal.carbon.smallFonts</vmArgsMac>
+   </launcherArgs>
+
+   <launcher>
+      <solaris/>
+      <win useIco="false">
+         <bmp/>
+      </win>
+   </launcher>
+
+   <vm>
+   </vm>
+
+    <plugins>
+   </plugins>
+
+
+</product>

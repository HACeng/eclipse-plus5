commit f2c26d223b2c255dff311b437deee924719279b9
Author: DJ Houghton <dj>
Date:   Thu May 1 15:25:49 2008 +0000

    Bug 229641 - Added Extension location repos in UI contain no features

9	2	bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java
24	2	bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepositoryFactory.java
9	1	bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java
24	2	bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepositoryFactory.java
2	0	bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/Messages.java
2	0	bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/messages.properties
46	29	bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java
21	6	bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/DropinsRepositoryListener.java
17	3	bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/PlatformXmlListener.java
1	1	bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/ProfileSynchronizer.java
19	34	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/extensionlocation/ExtensionLocationArtifactRepositoryFactoryTest.java
13	30	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/extensionlocation/ExtensionLocationMetadataRepositoryFactoryTest.java
diff --git a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java
index 05e10ac..4547fd5 100644
--- a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java
+++ b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java
@@ -27,7 +27,8 @@ public class ExtensionLocationArtifactRepository extends AbstractRepository impl
 
 	public static final String TYPE = "org.eclipse.equinox.p2.extensionlocation.artifactRepository"; //$NON-NLS-1$
 	private static final String POOLED = ".pooled"; //$NON-NLS-1$
-	//private static final String PROFILE_EXTENSION = "profile.extension"; //$NON-NLS-1$
+	private static final String EXTENSION_LOCATION = ".eclipseextension"; //$NON-NLS-1$
+	private static final String SITE_XML = "site.xml"; //$NON-NLS-1$
 	private static final String ECLIPSE = "eclipse"; //$NON-NLS-1$
 	private static final String FEATURES = "features"; //$NON-NLS-1$
 	private static final String PLUGINS = "plugins"; //$NON-NLS-1$
@@ -73,7 +74,13 @@ public class ExtensionLocationArtifactRepository extends AbstractRepository impl
 	}
 
 	public static void validate(URL location, IProgressMonitor monitor) throws ProvisionException {
-		getBaseDirectory(location);
+		File base = getBaseDirectory(location);
+		if (new File(base, EXTENSION_LOCATION).exists())
+			return;
+		if (new File(base, SITE_XML).exists()) {
+			String message = NLS.bind(Messages.error_update_site, location.toExternalForm());
+			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, message, null));
+		}
 	}
 
 	public static File getBaseDirectory(URL url) throws ProvisionException {
diff --git a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepositoryFactory.java
index 55bf2e4..1bf4155 100644
--- a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepositoryFactory.java
+++ b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepositoryFactory.java
@@ -18,6 +18,7 @@ import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IFileArti
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository.IArtifactRepositoryFactory;
 import org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository.SimpleArtifactRepositoryFactory;
+import org.eclipse.osgi.util.NLS;
 
 public class ExtensionLocationArtifactRepositoryFactory implements IArtifactRepositoryFactory {
 
@@ -25,10 +26,23 @@ public class ExtensionLocationArtifactRepositoryFactory implements IArtifactRepo
 	 * @see org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository.IArtifactRepositoryFactory#create(java.net.URL, java.lang.String, java.lang.String, java.util.Map)
 	 */
 	public IArtifactRepository create(URL location, String name, String type, Map properties) throws ProvisionException {
+		// TODO proper progress monitoring
+		IStatus status = validate(location, null);
+		if (!status.isOK())
+			throw new ProvisionException(status);
 		URL repoLocation = ExtensionLocationArtifactRepository.getLocalRepositoryLocation(location);
 		// unexpected
 		if (repoLocation == null)
 			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, Messages.failed_create_local_artifact_repository));
+		// make sure that we aren't trying to create a repo at a location
+		// where one already exists
+		try {
+			new SimpleArtifactRepositoryFactory().load(repoLocation, null);
+			String msg = NLS.bind(Messages.repo_already_exists, location.toExternalForm());
+			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_EXISTS, msg, null));
+		} catch (ProvisionException e) {
+			// expected
+		}
 		IFileArtifactRepository repo = (IFileArtifactRepository) new SimpleArtifactRepositoryFactory().create(repoLocation, name, type, properties);
 		return new ExtensionLocationArtifactRepository(location, repo, null);
 	}
@@ -37,13 +51,21 @@ public class ExtensionLocationArtifactRepositoryFactory implements IArtifactRepo
 	 * @see org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository.IArtifactRepositoryFactory#load(java.net.URL, org.eclipse.core.runtime.IProgressMonitor)
 	 */
 	public IArtifactRepository load(URL location, IProgressMonitor monitor) throws ProvisionException {
+		// TODO proper progress monitoring
+		IStatus status = validate(location, null);
+		if (!status.isOK())
+			throw new ProvisionException(status);
 		URL repoLocation = ExtensionLocationArtifactRepository.getLocalRepositoryLocation(location);
 		// unexpected
 		if (repoLocation == null)
 			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, Messages.failed_create_local_artifact_repository));
 		// TODO proper progress monitoring
-		IFileArtifactRepository repo = (IFileArtifactRepository) new SimpleArtifactRepositoryFactory().load(repoLocation, null);
-		return new ExtensionLocationArtifactRepository(location, repo, monitor);
+		try {
+			IFileArtifactRepository repo = (IFileArtifactRepository) new SimpleArtifactRepositoryFactory().load(repoLocation, null);
+			return new ExtensionLocationArtifactRepository(location, repo, monitor);
+		} catch (ProvisionException e) {
+			return create(location, "Extension location repository: " + location.toExternalForm(), ExtensionLocationArtifactRepository.TYPE, null);
+		}
 	}
 
 	public IStatus validate(URL location, IProgressMonitor monitor) {
diff --git a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java
index 43146fa..52f3f9f 100644
--- a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java
+++ b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java
@@ -28,6 +28,8 @@ import org.osgi.framework.BundleContext;
 public class ExtensionLocationMetadataRepository extends AbstractMetadataRepository {
 
 	public static final String TYPE = "org.eclipse.equinox.p2.extensionlocation.metadataRepository"; //$NON-NLS-1$
+	private static final String EXTENSION_LOCATION = ".eclipseextension"; //$NON-NLS-1$
+	private static final String SITE_XML = "site.xml"; //$NON-NLS-1$
 	private static final String ECLIPSE = "eclipse"; //$NON-NLS-1$
 	private static final String FEATURES = "features"; //$NON-NLS-1$
 	private static final String PLUGINS = "plugins"; //$NON-NLS-1$
@@ -100,7 +102,13 @@ public class ExtensionLocationMetadataRepository extends AbstractMetadataReposit
 	}
 
 	public static void validate(URL location, IProgressMonitor monitor) throws ProvisionException {
-		getBaseDirectory(location);
+		File base = getBaseDirectory(location);
+		if (new File(base, EXTENSION_LOCATION).exists())
+			return;
+		if (new File(base, SITE_XML).exists()) {
+			String message = NLS.bind(Messages.error_update_site, location.toExternalForm());
+			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, message, null));
+		}
 	}
 
 	public static File getBaseDirectory(URL url) throws ProvisionException {
diff --git a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepositoryFactory.java
index 65393fc..06d75ac 100644
--- a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepositoryFactory.java
+++ b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepositoryFactory.java
@@ -17,6 +17,7 @@ import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.IMetadataRepositoryFactory;
 import org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.SimpleMetadataRepositoryFactory;
+import org.eclipse.osgi.util.NLS;
 
 public class ExtensionLocationMetadataRepositoryFactory implements IMetadataRepositoryFactory {
 
@@ -24,10 +25,23 @@ public class ExtensionLocationMetadataRepositoryFactory implements IMetadataRepo
 	 * @see org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.IMetadataRepositoryFactory#create(java.net.URL, java.lang.String, java.lang.String, java.util.Map)
 	 */
 	public IMetadataRepository create(URL location, String name, String type, Map properties) throws ProvisionException {
+		// TODO proper progress monitoring
+		IStatus status = validate(location, null);
+		if (!status.isOK())
+			throw new ProvisionException(status);
 		URL repoLocation = ExtensionLocationMetadataRepository.getLocalRepositoryLocation(location);
 		// unexpected
 		if (repoLocation == null)
 			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, Messages.failed_create_local_artifact_repository));
+		// ensure that we aren't trying to create a repository at a location
+		// where one already exists
+		try {
+			new SimpleMetadataRepositoryFactory().load(repoLocation, null);
+			String msg = NLS.bind(Messages.repo_already_exists, location.toExternalForm());
+			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_EXISTS, msg, null));
+		} catch (ProvisionException e) {
+			// expected
+		}
 		IMetadataRepository repository = new SimpleMetadataRepositoryFactory().create(repoLocation, name, null, properties);
 		return new ExtensionLocationMetadataRepository(location, repository, null);
 	}
@@ -36,13 +50,21 @@ public class ExtensionLocationMetadataRepositoryFactory implements IMetadataRepo
 	 * @see org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.IMetadataRepositoryFactory#load(java.net.URL, org.eclipse.core.runtime.IProgressMonitor)
 	 */
 	public IMetadataRepository load(URL location, IProgressMonitor monitor) throws ProvisionException {
+		// TODO proper progress monitoring
+		IStatus status = validate(location, null);
+		if (!status.isOK())
+			throw new ProvisionException(status);
 		URL repoLocation = ExtensionLocationMetadataRepository.getLocalRepositoryLocation(location);
 		// unexpected
 		if (repoLocation == null)
 			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, Messages.failed_create_local_artifact_repository));
 		// TODO proper progress monitoring
-		IMetadataRepository repository = new SimpleMetadataRepositoryFactory().load(repoLocation, null);
-		return new ExtensionLocationMetadataRepository(location, repository, monitor);
+		try {
+			IMetadataRepository repository = new SimpleMetadataRepositoryFactory().load(repoLocation, null);
+			return new ExtensionLocationMetadataRepository(location, repository, monitor);
+		} catch (ProvisionException e) {
+			return create(location, "Extension location repository: " + location.toExternalForm(), ExtensionLocationMetadataRepository.TYPE, null);
+		}
 	}
 
 	/* (non-Javadoc)
diff --git a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/Messages.java b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/Messages.java
index 7a19441..ee7430d 100644
--- a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/Messages.java
+++ b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/Messages.java
@@ -14,11 +14,13 @@ import org.eclipse.osgi.util.NLS;
 
 public class Messages extends NLS {
 	private static final String BUNDLE_NAME = "org.eclipse.equinox.internal.p2.extensionlocation.messages"; //$NON-NLS-1$
+	public static String error_update_site;
 	public static String failed_create_local_artifact_repository;
 	public static String failed_create_local_repo;
 	public static String not_directory;
 	public static String not_eclipse_extension;
 	public static String not_file_protocol;
+	public static String repo_already_exists;
 
 	static {
 		// initialize resource bundle
diff --git a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/messages.properties b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/messages.properties
index 2bb1fbe..d4d8b29 100644
--- a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/messages.properties
@@ -8,8 +8,10 @@
 # Contributors:
 #     IBM Corporation - initial API and implementation
 ###############################################################################
+error_update_site=Error: {0} is not a valid extension location because it contains a site.xml file.
 failed_create_local_artifact_repository=Failed to create local repository.
 failed_create_local_repo=Failed to create local repository.
 not_directory=Location: {0} not a directory.
 not_eclipse_extension=Location: {0} is not an extension.
 not_file_protocol=Location must use file protocol.
+repo_already_exists=Repository: {0} already exists.
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java
index cb2c7e5..cac1b94 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java
@@ -15,6 +15,7 @@ import java.net.URL;
 import java.util.*;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.*;
+import org.eclipse.equinox.internal.p2.extensionlocation.*;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
@@ -33,7 +34,6 @@ public class Activator implements BundleActivator {
 	private static final String DROPINS_DIRECTORY = "org.eclipse.equinox.p2.reconciler.dropins.directory"; //$NON-NLS-1$
 	private static final String DROPINS = "dropins"; //$NON-NLS-1$
 	private static final String LINKS = "links"; //$NON-NLS-1$
-	//	private static final String PROFILE_EXTENSION = "profile.extension"; //$NON-NLS-1$
 	private static PackageAdmin packageAdmin;
 	private static BundleContext bundleContext;
 	private ServiceReference packageAdminRef;
@@ -44,54 +44,71 @@ public class Activator implements BundleActivator {
 	private static IMetadataRepository eclipseProductRepository;
 
 	/**
-	 * Helper method to load a metadata repository from the specified URL. If none
-	 * exists then create one if requested. This method never returns <code>null</code>.
+	 * Helper method to create an extension location metadata repository at the given URL. 
+	 * If one already exists at that location then an exception will be thrown.
+	 * 
+	 * This method never returns <code>null</code>.
 	 * 
 	 * @throws IllegalStateException
 	 * @throws ProvisionException 
 	 */
-	public static IMetadataRepository getMetadataRepository(URL location, String name, String type, Map properties, boolean create) throws ProvisionException {
+	public static IMetadataRepository createExtensionLocationMetadataRepository(URL location, String name, Map properties) throws ProvisionException {
 		BundleContext context = getContext();
 		IMetadataRepositoryManager manager = (IMetadataRepositoryManager) ServiceHelper.getService(context, IMetadataRepositoryManager.class.getName());
 		if (manager == null)
 			throw new IllegalStateException("MetadataRepositoryManager not registered."); //$NON-NLS-1$
-		try {
-			return manager.loadRepository(location, null);
-		} catch (ProvisionException e) {
-			if (create) {
-				IMetadataRepository repository = manager.createRepository(location, name, type, properties);
-				manager.addRepository(location);
-				return repository;
-			}
-			// if we didn't want to create in the failure case then return the reason for the failure
-			throw e;
-		}
+		ExtensionLocationMetadataRepositoryFactory factory = new ExtensionLocationMetadataRepositoryFactory();
+		IMetadataRepository repository = factory.create(location, name, ExtensionLocationMetadataRepository.TYPE, properties);
+		manager.addRepository(location);
+		return repository;
+	}
+
+	/**
+	 * Helper method to load an extension location metadata repository from the given URL.
+	 * 
+	 * @throws IllegalStateException
+	 * @throws ProvisionException
+	 */
+	public static IMetadataRepository loadMetadataRepository(URL location, IProgressMonitor monitor) throws ProvisionException {
+		BundleContext context = getContext();
+		IMetadataRepositoryManager manager = (IMetadataRepositoryManager) ServiceHelper.getService(context, IMetadataRepositoryManager.class.getName());
+		if (manager == null)
+			throw new IllegalStateException("MetadataRepositoryManager not registered."); //$NON-NLS-1$
+		return manager.loadRepository(location, monitor);
 	}
 
 	/**
-	 * Helper method to load an artifact repository from the given URL. If none
-	 * exists then we will create one at the given location, if specified to do so.
+	 * Helper method to create an extension location artifact repository at the given URL. 
+	 * If one already exists at that location then an exception will be thrown.
+	 * 
 	 * This method never returns <code>null</code>.
 	 * 
 	 * @throws IllegalStateException
 	 * @throws ProvisionException 
 	 */
-	public static IArtifactRepository getArtifactRepository(URL location, String name, String type, Map properties, boolean create) throws ProvisionException {
+	public static IArtifactRepository createExtensionLocationArtifactRepository(URL location, String name, Map properties) throws ProvisionException {
 		BundleContext context = getContext();
 		IArtifactRepositoryManager manager = (IArtifactRepositoryManager) ServiceHelper.getService(context, IArtifactRepositoryManager.class.getName());
 		if (manager == null)
 			throw new IllegalStateException("ArtifactRepositoryManager not registered."); //$NON-NLS-1$
-		try {
-			return manager.loadRepository(location, null);
-		} catch (ProvisionException e) {
-			if (create) {
-				IArtifactRepository repository = manager.createRepository(location, name, type, properties);
-				manager.addRepository(location);
-				return repository;
-			}
-			// if we didn't want to create in the failure case then return the reason for the failure
-			throw e;
-		}
+		ExtensionLocationArtifactRepositoryFactory factory = new ExtensionLocationArtifactRepositoryFactory();
+		IArtifactRepository repository = factory.create(location, name, ExtensionLocationArtifactRepository.TYPE, properties);
+		manager.addRepository(location);
+		return repository;
+	}
+
+	/**
+	 * Helper method to load an extension location metadata repository from the given URL.
+	 * 
+	 * @throws IllegalStateException
+	 * @throws ProvisionException
+	 */
+	public static IArtifactRepository loadArtifactRepository(URL location, IProgressMonitor monitor) throws ProvisionException {
+		BundleContext context = getContext();
+		IArtifactRepositoryManager manager = (IArtifactRepositoryManager) ServiceHelper.getService(context, IArtifactRepositoryManager.class.getName());
+		if (manager == null)
+			throw new IllegalStateException("ArtifactRepositoryManager not registered."); //$NON-NLS-1$
+		return manager.loadRepository(location, monitor);
 	}
 
 	/* (non-Javadoc)
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/DropinsRepositoryListener.java b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/DropinsRepositoryListener.java
index d48e930..c34b53d 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/DropinsRepositoryListener.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/DropinsRepositoryListener.java
@@ -140,9 +140,16 @@ public class DropinsRepositoryListener extends RepositoryListener {
 
 	public void getMetadataRepository(URL repoURL) {
 		try {
-			Map properties = new HashMap();
-			properties.put(IRepository.PROP_SYSTEM, Boolean.TRUE.toString());
-			metadataRepositories.add(Activator.getMetadataRepository(repoURL, "dropins metadata repo: " + repoURL.toExternalForm(), ExtensionLocationMetadataRepository.TYPE, properties, true)); //$NON-NLS-1$
+			IMetadataRepository repository = null;
+			try {
+				ExtensionLocationMetadataRepository.validate(repoURL, null);
+				Map properties = new HashMap();
+				properties.put(IRepository.PROP_SYSTEM, Boolean.TRUE.toString());
+				repository = Activator.createExtensionLocationMetadataRepository(repoURL, "dropins metadata repo: " + repoURL.toExternalForm(), properties); //$NON-NLS-1$
+			} catch (ProvisionException e) {
+				repository = Activator.loadMetadataRepository(repoURL, null);
+			}
+			metadataRepositories.add(repository);
 		} catch (ProvisionException ex) {
 			LogHelper.log(ex);
 		}
@@ -150,9 +157,17 @@ public class DropinsRepositoryListener extends RepositoryListener {
 
 	public void getArtifactRepository(URL repoURL) {
 		try {
-			Map properties = new HashMap();
-			properties.put(IRepository.PROP_SYSTEM, Boolean.TRUE.toString());
-			artifactRepositories.add(Activator.getArtifactRepository(repoURL, "dropins artifact repo: " + repoURL.toExternalForm(), ExtensionLocationArtifactRepository.TYPE, properties, true)); //$NON-NLS-1$
+			IArtifactRepository repository = null;
+			try {
+				ExtensionLocationArtifactRepository.validate(repoURL, null);
+				Map properties = new HashMap();
+				properties.put(IRepository.PROP_SYSTEM, Boolean.TRUE.toString());
+				repository = Activator.createExtensionLocationArtifactRepository(repoURL, "dropins artifact repo: " + repoURL.toExternalForm(), properties); //$NON-NLS-1$
+				// fall through here and call the load which then adds the repo to the manager's list
+			} catch (ProvisionException ex) {
+				repository = Activator.loadArtifactRepository(repoURL, null);
+			}
+			artifactRepositories.add(repository);
 		} catch (ProvisionException ex) {
 			LogHelper.log(ex);
 		}
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/PlatformXmlListener.java b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/PlatformXmlListener.java
index 0f2ed99..8b74e25 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/PlatformXmlListener.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/PlatformXmlListener.java
@@ -16,7 +16,7 @@ import java.net.URL;
 import java.util.*;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
-import org.eclipse.equinox.internal.p2.extensionlocation.*;
+import org.eclipse.equinox.internal.p2.extensionlocation.SiteListener;
 import org.eclipse.equinox.internal.p2.update.*;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
@@ -164,8 +164,22 @@ public class PlatformXmlListener extends DirectoryChangeListener {
 					properties.put(SiteListener.SITE_POLICY, site.getPolicy());
 					properties.put(SiteListener.SITE_LIST, toString(site.getList()));
 					properties.put(IRepository.PROP_SYSTEM, Boolean.TRUE.toString());
-					newRepos.add(Activator.getMetadataRepository(location, "extension location metadata repository: " + location.toExternalForm(), ExtensionLocationMetadataRepository.TYPE, properties, true)); //$NON-NLS-1$
-					Activator.getArtifactRepository(location, "extension location artifact repository:  " + location.toExternalForm(), ExtensionLocationArtifactRepository.TYPE, properties, true); //$NON-NLS-1$
+
+					// deal with the metadata repository
+					IMetadataRepository metadataRepository = null;
+					try {
+						metadataRepository = Activator.createExtensionLocationMetadataRepository(location, "extension location metadata repository: " + location.toExternalForm(), properties); //$NON-NLS-1$
+					} catch (ProvisionException ex) {
+						metadataRepository = Activator.loadMetadataRepository(location, null);
+					}
+					newRepos.add(metadataRepository);
+
+					// now the artifact repository
+					try {
+						Activator.createExtensionLocationArtifactRepository(location, "extension location artifact repository: " + location.toExternalForm(), properties); //$NON-NLS-1$
+					} catch (ProvisionException ex) {
+						Activator.loadArtifactRepository(location, null);
+					}
 				} catch (MalformedURLException e) {
 					LogHelper.log(new Status(IStatus.ERROR, Activator.ID, NLS.bind(Messages.errorLoadingRepository, siteURL), e));
 				} catch (ProvisionException e) {
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/ProfileSynchronizer.java b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/ProfileSynchronizer.java
index a423b60..5572846 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/ProfileSynchronizer.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/ProfileSynchronizer.java
@@ -215,7 +215,7 @@ public class ProfileSynchronizer {
 		for (Iterator it = repositoryMap.keySet().iterator(); it.hasNext();) {
 			String repositoryId = (String) it.next();
 			try {
-				IArtifactRepository repository = Activator.getArtifactRepository(new URL(repositoryId), null, null, null, false);
+				IArtifactRepository repository = Activator.loadArtifactRepository(new URL(repositoryId), null);
 
 				if (repository instanceof IFileArtifactRepository) {
 					currentExtensions.add(repositoryId);
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/extensionlocation/ExtensionLocationArtifactRepositoryFactoryTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/extensionlocation/ExtensionLocationArtifactRepositoryFactoryTest.java
index bce748d..f78f48d 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/extensionlocation/ExtensionLocationArtifactRepositoryFactoryTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/extensionlocation/ExtensionLocationArtifactRepositoryFactoryTest.java
@@ -15,7 +15,6 @@ import java.io.IOException;
 import java.net.MalformedURLException;
 import java.net.URL;
 import org.eclipse.core.runtime.FileLocator;
-import org.eclipse.equinox.internal.p2.extensionlocation.ExtensionLocationArtifactRepository;
 import org.eclipse.equinox.internal.p2.extensionlocation.ExtensionLocationArtifactRepositoryFactory;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
@@ -96,12 +95,13 @@ public class ExtensionLocationArtifactRepositoryFactoryTest extends AbstractProv
 		directory.mkdirs();
 		try {
 			factory.load(directory.toURL(), getMonitor());
-			fail("0.1");
 		} catch (ProvisionException e) {
-			assertEquals("0.5", ProvisionException.REPOSITORY_NOT_FOUND, e.getStatus().getCode());
+			if (e.getStatus().getCode() == ProvisionException.REPOSITORY_NOT_FOUND)
+				return;
 		} catch (MalformedURLException e) {
 			fail("0.99", e);
 		}
+		fail("1.0");
 	}
 
 	public void testEmptyFeatureAndPluginsDirectory() {
@@ -111,9 +111,8 @@ public class ExtensionLocationArtifactRepositoryFactoryTest extends AbstractProv
 		new File(directory, "features").mkdir();
 		try {
 			factory.load(directory.toURL(), getMonitor());
-			fail("0.1");
 		} catch (ProvisionException e) {
-			assertEquals("0.5", ProvisionException.REPOSITORY_NOT_FOUND, e.getStatus().getCode());
+			fail("0.1", e);
 		} catch (MalformedURLException e) {
 			fail("0.99", e);
 		}
@@ -125,9 +124,8 @@ public class ExtensionLocationArtifactRepositoryFactoryTest extends AbstractProv
 		new File(directory, "features").mkdir();
 		try {
 			factory.load(directory.toURL(), getMonitor());
-			fail("0.1");
 		} catch (ProvisionException e) {
-			assertEquals("0.5", ProvisionException.REPOSITORY_NOT_FOUND, e.getStatus().getCode());
+			fail("0.1", e);
 		} catch (MalformedURLException e) {
 			fail("0.99", e);
 		}
@@ -139,9 +137,8 @@ public class ExtensionLocationArtifactRepositoryFactoryTest extends AbstractProv
 		new File(directory, "plugins").mkdir();
 		try {
 			factory.load(directory.toURL(), getMonitor());
-			fail("0.1");
 		} catch (ProvisionException e) {
-			assertEquals("0.5", ProvisionException.REPOSITORY_NOT_FOUND, e.getStatus().getCode());
+			fail("0.1", e);
 		} catch (MalformedURLException e) {
 			fail("0.99", e);
 		}
@@ -156,9 +153,8 @@ public class ExtensionLocationArtifactRepositoryFactoryTest extends AbstractProv
 		new File(eclipseDirectory, "features").mkdir();
 		try {
 			factory.load(directory.toURL(), getMonitor());
-			fail("0.1");
 		} catch (ProvisionException e) {
-			assertEquals("0.5", ProvisionException.REPOSITORY_NOT_FOUND, e.getStatus().getCode());
+			fail("0.1", e);
 		} catch (MalformedURLException e) {
 			fail("0.99", e);
 		}
@@ -173,12 +169,13 @@ public class ExtensionLocationArtifactRepositoryFactoryTest extends AbstractProv
 		new File(eclipseDirectory, "features").mkdir();
 		try {
 			factory.load(directory.toURL(), getMonitor());
-			fail("0.1");
 		} catch (ProvisionException e) {
-			assertEquals("0.5", ProvisionException.REPOSITORY_NOT_FOUND, e.getStatus().getCode());
+			if (e.getStatus().getCode() == ProvisionException.REPOSITORY_NOT_FOUND)
+				return;
 		} catch (MalformedURLException e) {
 			fail("0.99", e);
 		}
+		fail("1.0");
 	}
 
 	public void testNormalFeaturesandPluginsDirectory() {
@@ -187,17 +184,13 @@ public class ExtensionLocationArtifactRepositoryFactoryTest extends AbstractProv
 		copy("1.0", getTestData("1.1", "/testData/extensionlocation"), directory);
 		try {
 			URL location = directory.toURL();
-			IArtifactRepository repo = null;
 			try {
-				repo = factory.load(location, getMonitor());
-				fail("2.0");
-			} catch (ProvisionException ex) {
-				repo = factory.create(location, "testNormalFeaturesandPluginsDirectory", ExtensionLocationArtifactRepository.TYPE, null);
+				IArtifactRepository repo = factory.load(location, getMonitor());
 				if (repo.getArtifactKeys().length != 2)
 					fail("2.1");
+			} catch (ProvisionException ex) {
+				fail("2.0");
 			}
-		} catch (ProvisionException e) {
-			fail("3.5");
 		} catch (MalformedURLException e) {
 			fail("3.99", e);
 		}
@@ -211,17 +204,13 @@ public class ExtensionLocationArtifactRepositoryFactoryTest extends AbstractProv
 		copy("1.0", getTestData("1.1", "/testData/extensionlocation/features"), features);
 		try {
 			URL location = directory.toURL();
-			IArtifactRepository repo = null;
 			try {
-				repo = factory.load(location, getMonitor());
-				fail("2.0");
-			} catch (ProvisionException ex) {
-				repo = factory.create(location, "testNormalFeaturesDirectory", ExtensionLocationArtifactRepository.TYPE, null);
+				IArtifactRepository repo = factory.load(location, getMonitor());
 				if (repo.getArtifactKeys().length != 1)
 					fail("2.1");
+			} catch (ProvisionException ex) {
+				fail("2.0");
 			}
-		} catch (ProvisionException e) {
-			fail("3.5", e);
 		} catch (MalformedURLException e) {
 			fail("3.99", e);
 		}
@@ -235,17 +224,13 @@ public class ExtensionLocationArtifactRepositoryFactoryTest extends AbstractProv
 		copy("1.0", getTestData("1.1", "/testData/extensionlocation/plugins"), plugins);
 		try {
 			URL location = directory.toURL();
-			IArtifactRepository repo = null;
 			try {
-				repo = factory.load(location, getMonitor());
-				fail("2.0");
-			} catch (ProvisionException ex) {
-				repo = factory.create(location, "testNormalFeaturesDirectory", ExtensionLocationArtifactRepository.TYPE, null);
+				IArtifactRepository repo = factory.load(location, getMonitor());
 				if (repo.getArtifactKeys().length != 1)
 					fail("2.1");
+			} catch (ProvisionException ex) {
+				fail("2.0");
 			}
-		} catch (ProvisionException e) {
-			fail("3.5", e);
 		} catch (MalformedURLException e) {
 			fail("3.99", e);
 		}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/extensionlocation/ExtensionLocationMetadataRepositoryFactoryTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/extensionlocation/ExtensionLocationMetadataRepositoryFactoryTest.java
index 01d496b..2892ef5 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/extensionlocation/ExtensionLocationMetadataRepositoryFactoryTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/extensionlocation/ExtensionLocationMetadataRepositoryFactoryTest.java
@@ -14,7 +14,6 @@ import java.io.File;
 import java.io.IOException;
 import java.net.MalformedURLException;
 import java.net.URL;
-import org.eclipse.equinox.internal.p2.extensionlocation.ExtensionLocationMetadataRepository;
 import org.eclipse.equinox.internal.p2.extensionlocation.ExtensionLocationMetadataRepositoryFactory;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.metadata.query.InstallableUnitQuery;
@@ -105,9 +104,8 @@ public class ExtensionLocationMetadataRepositoryFactoryTest extends AbstractProv
 		new File(directory, "features").mkdir();
 		try {
 			factory.load(directory.toURL(), getMonitor());
-			fail("0.1");
 		} catch (ProvisionException e) {
-			// expected
+			fail("0.1");
 		} catch (MalformedURLException e) {
 			fail("0.99", e);
 		}
@@ -119,9 +117,8 @@ public class ExtensionLocationMetadataRepositoryFactoryTest extends AbstractProv
 		new File(directory, "features").mkdir();
 		try {
 			factory.load(directory.toURL(), getMonitor());
-			fail("0.1");
 		} catch (ProvisionException e) {
-			// expected
+			fail("0.1");
 		} catch (MalformedURLException e) {
 			fail("0.99", e);
 		}
@@ -133,9 +130,8 @@ public class ExtensionLocationMetadataRepositoryFactoryTest extends AbstractProv
 		new File(directory, "plugins").mkdir();
 		try {
 			factory.load(directory.toURL(), getMonitor());
-			fail("0.1");
 		} catch (ProvisionException e) {
-			// expected
+			fail("0.1");
 		} catch (MalformedURLException e) {
 			fail("0.99", e);
 		}
@@ -150,9 +146,8 @@ public class ExtensionLocationMetadataRepositoryFactoryTest extends AbstractProv
 		new File(eclipseDirectory, "features").mkdir();
 		try {
 			factory.load(directory.toURL(), getMonitor());
-			fail("0.1");
 		} catch (ProvisionException e) {
-			// expected
+			fail("0.1");
 		} catch (MalformedURLException e) {
 			fail("0.99", e);
 		}
@@ -181,17 +176,13 @@ public class ExtensionLocationMetadataRepositoryFactoryTest extends AbstractProv
 		copy("1.0", getTestData("1.1", "/testData/extensionlocation"), directory);
 		try {
 			URL location = directory.toURL();
-			IMetadataRepository repo = null;
 			try {
-				repo = factory.load(location, getMonitor());
-				fail("2.0");
-			} catch (ProvisionException ex) {
-				repo = factory.create(location, "testNormalFeaturesandPluginsDirectory", ExtensionLocationMetadataRepository.TYPE, null);
+				IMetadataRepository repo = factory.load(location, getMonitor());
 				if (repo.query(InstallableUnitQuery.ANY, new Collector(), null).toCollection().size() != 3)
 					fail("2.99");
+			} catch (ProvisionException ex) {
+				fail("2.0");
 			}
-		} catch (ProvisionException e) {
-			fail("3.99");
 		} catch (MalformedURLException e) {
 			fail("4.99", e);
 		}
@@ -205,17 +196,13 @@ public class ExtensionLocationMetadataRepositoryFactoryTest extends AbstractProv
 		copy("1.0", getTestData("1.1", "/testData/extensionlocation/features"), features);
 		try {
 			URL location = directory.toURL();
-			IMetadataRepository repo = null;
 			try {
-				repo = factory.load(location, getMonitor());
-				fail("2.0");
-			} catch (ProvisionException ex) {
-				repo = factory.create(location, "testNormalFeaturesDirectory", ExtensionLocationMetadataRepository.TYPE, null);
+				IMetadataRepository repo = factory.load(location, getMonitor());
 				if (repo.query(InstallableUnitQuery.ANY, new Collector(), null).toCollection().size() != 2)
 					fail("3.0");
+			} catch (ProvisionException ex) {
+				fail("2.0");
 			}
-		} catch (ProvisionException e) {
-			fail("4.0");
 		} catch (MalformedURLException e) {
 			fail("4.99", e);
 		}
@@ -229,17 +216,13 @@ public class ExtensionLocationMetadataRepositoryFactoryTest extends AbstractProv
 		copy("1.0", getTestData("1.1", "/testData/extensionlocation/plugins"), plugins);
 		try {
 			URL location = directory.toURL();
-			IMetadataRepository repo = null;
 			try {
-				repo = factory.load(location, getMonitor());
-				fail("2.0");
-			} catch (ProvisionException ex) {
-				repo = factory.create(location, "testNormalPluginsDirectory", ExtensionLocationMetadataRepository.TYPE, null);
+				IMetadataRepository repo = factory.load(location, getMonitor());
 				if (repo.query(InstallableUnitQuery.ANY, new Collector(), null).toCollection().size() != 1)
 					fail("3.0");
+			} catch (ProvisionException ex) {
+				fail("2.0");
 			}
-		} catch (ProvisionException e) {
-			fail("4.0");
 		} catch (MalformedURLException e) {
 			fail("4.99", e);
 		}

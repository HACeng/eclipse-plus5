commit 395ef2f369288e53f3b2616de8a15e851bf1b439
Author: Susan Franklin <sfranklin>
Date:   Tue Nov 25 23:54:48 2008 +0000

    Bug 232632 - [ui] when showing latest versions only, shouldn't show features older than those you have installed

5	7	bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/AvailableIUCollectorTest.java
9	10	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/DefaultQueryProvider.java
21	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
1	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableUpdateElement.java
45	20	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/AvailableIUCollector.java
2	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/RollbackIUCollector.java
diff --git a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/AvailableIUCollectorTest.java b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/AvailableIUCollectorTest.java
index 23e845d..59ada7a 100644
--- a/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/AvailableIUCollectorTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests.ui/src/org/eclipse/equinox/p2/tests/ui/query/AvailableIUCollectorTest.java
@@ -14,12 +14,10 @@ import java.util.*;
 import org.eclipse.equinox.internal.p2.ui.model.CategoryElement;
 import org.eclipse.equinox.internal.p2.ui.model.IIUElement;
 import org.eclipse.equinox.internal.p2.ui.query.AvailableIUCollector;
+import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.metadata.query.IUPropertyQuery;
-import org.eclipse.equinox.internal.provisional.p2.metadata.query.InstallableUnitQuery;
-import org.eclipse.equinox.internal.provisional.p2.query.Collector;
 import org.eclipse.equinox.internal.provisional.p2.query.Query;
-import org.eclipse.equinox.internal.provisional.p2.ui.ElementQueryDescriptor;
 import org.eclipse.equinox.p2.tests.MockQueryable;
 import org.osgi.framework.Version;
 
@@ -121,13 +119,13 @@ public class AvailableIUCollectorTest extends QueryTest {
 	 * Tests hiding installed IUs.
 	 */
 	public void testHideInstalled() {
+		IProfile profile = createProfile("TestProfile");
+
 		AvailableIUCollector collector = createCollector(true);
 		IInstallableUnit installed = createIU("installed");
 		IInstallableUnit notInstalled = createIU("notInstalled");
-		Query installedQuery = new InstallableUnitQuery("installed");
-		ElementQueryDescriptor installedDescriptor = new ElementQueryDescriptor(new MockQueryable(installed), installedQuery, new Collector());
-		assertTrue("1.0", installedDescriptor.isComplete());
-		collector.hideInstalledIUs(installedDescriptor);
+		install(profile, new IInstallableUnit[] {installed}, true, createPlanner(), createEngine());
+		collector.markInstalledIUs(profile, true);
 
 		//now feed in the installed and non-installed units, and the installed unit should be ignored.
 		collector.accept(installed);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/DefaultQueryProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/DefaultQueryProvider.java
index eec6208..4bd0402 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/DefaultQueryProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/DefaultQueryProvider.java
@@ -76,14 +76,13 @@ public class DefaultQueryProvider extends QueryProvider {
 				ElementQueryDescriptor installedQueryDescriptor = null;
 				boolean showLatest = context.getShowLatestVersionsOnly();
 				boolean hideInstalled = context.getHideAlreadyInstalled();
+				IProfile targetProfile = null;
 				String profileId = context.getInstalledProfileId();
-				if (hideInstalled && profileId != null) {
+				if (profileId != null) {
 					try {
-						IProfile profile = ProvisioningUtil.getProfile(profileId);
-						installedQueryDescriptor = new ElementQueryDescriptor(profile, new IUProfilePropertyQuery(profile, context.getVisibleInstalledIUProperty(), Boolean.toString(true)), new Collector());
+						targetProfile = ProvisioningUtil.getProfile(profileId);
 					} catch (ProvisionException e) {
 						// just bail out, we won't try to query the installed
-						installedQueryDescriptor = null;
 					}
 				}
 
@@ -106,8 +105,8 @@ public class DefaultQueryProvider extends QueryProvider {
 							collector = new LatestIUVersionElementCollector(queryable, element, false, context.getShowAvailableChildren());
 						else
 							collector = new AvailableIUCollector(queryable, element, false, context.getShowAvailableChildren());
-						if (hideInstalled && installedQueryDescriptor != null)
-							collector.hideInstalledIUs(installedQueryDescriptor);
+						if (targetProfile != null)
+							collector.markInstalledIUs(targetProfile, hideInstalled);
 						return new ElementQueryDescriptor(queryable, topLevelQuery, collector);
 					}
 					// Installed content not a concern for collecting categories
@@ -120,8 +119,8 @@ public class DefaultQueryProvider extends QueryProvider {
 					// Will have to look at all categories and groups and from there, figure out what's left
 					Query firstPassQuery = new CompoundQuery(new Query[] {topLevelQuery, categoryQuery}, false);
 					availableIUCollector = showLatest ? new LatestIUVersionElementCollector(queryable, element, false, context.getShowAvailableChildren()) : new AvailableIUCollector(queryable, element, false, context.getShowAvailableChildren());
-					if (hideInstalled && installedQueryDescriptor != null)
-						availableIUCollector.hideInstalledIUs(installedQueryDescriptor);
+					if (targetProfile != null)
+						availableIUCollector.markInstalledIUs(targetProfile, hideInstalled);
 					return new ElementQueryDescriptor(queryable, firstPassQuery, new UncategorizedElementCollector(queryable, element, availableIUCollector));
 
 				}
@@ -136,8 +135,8 @@ public class DefaultQueryProvider extends QueryProvider {
 						availableIUCollector = new LatestIUVersionElementCollector(queryable, element, true, drillDown);
 					else
 						availableIUCollector = new AvailableIUCollector(queryable, element, true, drillDown);
-					if (hideInstalled && installedQueryDescriptor != null)
-						availableIUCollector.hideInstalledIUs(installedQueryDescriptor);
+					if (targetProfile != null)
+						availableIUCollector.markInstalledIUs(targetProfile, hideInstalled);
 					return new ElementQueryDescriptor(queryable, new CompoundQuery(new Query[] {new CompoundQuery(new Query[] {topLevelQuery, categoryQuery}, false), meetsAnyRequirementQuery}, true), availableIUCollector);
 				}
 				return null;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
index 3520639..474a1d9 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
@@ -36,6 +36,8 @@ public class AvailableIUElement extends QueriedElement implements IIUElement {
 
 	IInstallableUnit iu;
 	boolean shouldShowChildren = Policy.getDefault().getQueryContext().getShowAvailableChildren();
+	boolean isInstalled = false;
+	boolean isUpdate = false;
 
 	// Currently this variable is not settable due to the
 	// poor performance of sizing, but it is kept here for future improvement.
@@ -59,7 +61,9 @@ public class AvailableIUElement extends QueriedElement implements IIUElement {
 	 * @see org.eclipse.equinox.internal.provisional.p2.ui.model.ProvElement#getImageID(java.lang.Object)
 	 */
 	protected String getImageId(Object obj) {
-		return ProvUIImages.IMG_UNINSTALLED_IU;
+		if (isInstalled)
+			return ProvUIImages.IMG_DISABLED_IU;
+		return ProvUIImages.IMG_IU;
 	}
 
 	public String getLabel(Object o) {
@@ -155,4 +159,20 @@ public class AvailableIUElement extends QueriedElement implements IIUElement {
 			return "NULL"; //$NON-NLS-1$
 		return iu.toString();
 	}
+
+	public void setIsInstalled(boolean isInstalled) {
+		this.isInstalled = isInstalled;
+	}
+
+	public boolean isInstalled() {
+		return isInstalled;
+	}
+
+	public void setIsUpdate(boolean isUpdate) {
+		this.isUpdate = isUpdate;
+	}
+
+	public boolean isUpdate() {
+		return isUpdate;
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableUpdateElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableUpdateElement.java
index 1a8cb3a..74a5f55 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableUpdateElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableUpdateElement.java
@@ -31,6 +31,7 @@ public class AvailableUpdateElement extends AvailableIUElement {
 
 	public AvailableUpdateElement(Object parent, IInstallableUnit iu, IInstallableUnit iuToBeUpdated, String profileID, boolean shouldShowChildren) {
 		super(parent, iu, profileID, shouldShowChildren);
+		setIsInstalled(false);
 		this.iuToBeUpdated = iuToBeUpdated;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/AvailableIUCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/AvailableIUCollector.java
index 645108c..65335fa 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/AvailableIUCollector.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/AvailableIUCollector.java
@@ -10,11 +10,13 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.query;
 
-import java.util.Collection;
+import java.util.Iterator;
 import org.eclipse.equinox.internal.p2.ui.model.*;
+import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.metadata.query.InstallableUnitQuery;
+import org.eclipse.equinox.internal.provisional.p2.query.Collector;
 import org.eclipse.equinox.internal.provisional.p2.query.IQueryable;
-import org.eclipse.equinox.internal.provisional.p2.ui.ElementQueryDescriptor;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
 
 /**
@@ -26,9 +28,8 @@ import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
 public class AvailableIUCollector extends QueriedElementCollector {
 
 	private boolean makeCategories;
-	private ElementQueryDescriptor installedQueryDescriptor;
+	private IProfile profile;
 	private boolean hideInstalledIUs = false;
-	Collection installedElements = null;
 	private boolean drillDownChild = false;
 
 	public AvailableIUCollector(IQueryable queryable, Object parent, boolean makeCategories, boolean makeDrillDownChild) {
@@ -37,9 +38,9 @@ public class AvailableIUCollector extends QueriedElementCollector {
 		this.drillDownChild = makeDrillDownChild;
 	}
 
-	public void hideInstalledIUs(ElementQueryDescriptor installedQuery) {
-		installedQueryDescriptor = installedQuery;
-		hideInstalledIUs = true;
+	public void markInstalledIUs(IProfile targetProfile, boolean hideInstalled) {
+		this.profile = targetProfile;
+		hideInstalledIUs = hideInstalled;
 	}
 
 	/**
@@ -50,29 +51,53 @@ public class AvailableIUCollector extends QueriedElementCollector {
 	 * or <code>false</code> to indicate the query should stop.
 	 */
 	public boolean accept(Object match) {
-		if (hideInstalledIUs && installedElements == null)
-			initializeInstalledElements();
-		if (hideInstalledIUs) {
-			IInstallableUnit iu = (IInstallableUnit) ProvUI.getAdapter(match, IInstallableUnit.class);
-			if (installedElements.contains(iu))
-				return true;
+		IInstallableUnit iu = (IInstallableUnit) ProvUI.getAdapter(match, IInstallableUnit.class);
+		boolean isUpdate = false;
+		boolean isInstalled = false;
+		if (profile != null && iu != null) {
+			Collector collector = profile.query(new InstallableUnitQuery(iu.getId()), new Collector(), null);
+			Iterator iter = collector.iterator();
+			// We are typically iterating over only one IU unless it's a non-singleton.
+			while (iter.hasNext()) {
+				IInstallableUnit installed = (IInstallableUnit) iter.next();
+				if (installed.getVersion().compareTo(iu.getVersion()) < 0)
+					isUpdate = true;
+				else {
+					isUpdate = false;
+					isInstalled = true;
+				}
+			}
 		}
-		// If it's not an IU, it's an element and work is done
+		// if we are hiding, hide anything that is the same iu or older
+		if (hideInstalledIUs && isInstalled && !isUpdate) {
+			return true;
+		}
+
+		// subclass already made this an element, just set the install flag
+		if (match instanceof AvailableIUElement) {
+			AvailableIUElement element = (AvailableIUElement) match;
+			element.setIsInstalled(isInstalled);
+			element.setIsUpdate(isUpdate);
+			return super.accept(match);
+		}
+		// If it's not an IU or element, we have nothing to do here
 		if (!(match instanceof IInstallableUnit))
 			return super.accept(match);
 
 		// We need to make an element
-		IInstallableUnit iu = (IInstallableUnit) match;
 		if (makeCategories && isCategory(iu))
 			return super.accept(new CategoryElement(parent, iu));
-		return super.accept(makeDefaultElement(iu));
-	}
 
-	private void initializeInstalledElements() {
-		installedElements = installedQueryDescriptor.queryable.query(installedQueryDescriptor.query, installedQueryDescriptor.collector, null).toCollection();
+		IIUElement element = makeDefaultElement(iu);
+		if (element instanceof AvailableIUElement) {
+			AvailableIUElement availableElement = (AvailableIUElement) element;
+			availableElement.setIsInstalled(isInstalled);
+			availableElement.setIsUpdate(isUpdate);
+		}
+		return super.accept(element);
 	}
 
-	protected Object makeDefaultElement(IInstallableUnit iu) {
+	protected IIUElement makeDefaultElement(IInstallableUnit iu) {
 		if (parent instanceof AvailableIUElement)
 			drillDownChild = ((AvailableIUElement) parent).shouldShowChildren();
 		return new AvailableIUElement(parent, iu, null, drillDownChild);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/RollbackIUCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/RollbackIUCollector.java
index ac07390..38fd773 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/RollbackIUCollector.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/RollbackIUCollector.java
@@ -10,6 +10,7 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.query;
 
+import org.eclipse.equinox.internal.p2.ui.model.IIUElement;
 import org.eclipse.equinox.internal.p2.ui.model.RollbackProfileElement;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.query.IQueryable;
@@ -26,7 +27,7 @@ public class RollbackIUCollector extends AvailableIUCollector {
 		super(queryable, parent, false, true);
 	}
 
-	protected Object makeDefaultElement(IInstallableUnit iu) {
+	protected IIUElement makeDefaultElement(IInstallableUnit iu) {
 		return new RollbackProfileElement(parent, iu);
 	}
 }

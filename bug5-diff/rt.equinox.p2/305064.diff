commit 6811abcca7f2fd085936197acaa74b64c4132956
Author: ibull <>
Date:   Tue Mar 9 04:22:05 2010 +0000

    bug 305064: [api] Add a progress monitor to the execute batch method
    https://bugs.eclipse.org/bugs/show_bug.cgi?id=305064

3	4	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepository.java
3	2	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
3	2	bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/provisional/p2/directorywatcher/CachingArtifactRepository.java
3	2	bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java
1	0	bundles/org.eclipse.equinox.p2.garbagecollector/META-INF/MANIFEST.MF
7	7	bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/internal/p2/garbagecollector/CoreGarbageCollector.java
7	10	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/Publisher.java
32	0	bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/p2/repository/IRunnableWithProgress.java
2	1	bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/p2/repository/artifact/IArtifactRepository.java
4	3	bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/p2/repository/artifact/spi/AbstractArtifactRepository.java
3	2	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractWrappedArtifactRepository.java
57	56	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/BatchExecuteArtifactRepositoryTest.java
3	2	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/TestArtifactRepository.java
3	2	bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepository.java
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepository.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepository.java
index a1de069..e0e4b0d 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepository.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepository.java
@@ -24,8 +24,7 @@ import org.eclipse.equinox.p2.core.IProvisioningAgent;
 import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.p2.query.*;
-import org.eclipse.equinox.p2.repository.ICompositeRepository;
-import org.eclipse.equinox.p2.repository.IRepository;
+import org.eclipse.equinox.p2.repository.*;
 import org.eclipse.equinox.p2.repository.artifact.*;
 import org.eclipse.equinox.p2.repository.artifact.spi.AbstractArtifactRepository;
 import org.eclipse.osgi.util.NLS;
@@ -563,12 +562,12 @@ public class CompositeArtifactRepository extends AbstractArtifactRepository impl
 		return QueryUtil.compoundQueryable(repos);
 	}
 
-	public IStatus executeBatch(Runnable runnable) {
+	public IStatus executeBatch(IRunnableWithProgress runnable, IProgressMonitor monitor) {
 		IStatus result = null;
 		synchronized (this) {
 			try {
 				disableSave = true;
-				runnable.run();
+				runnable.run(monitor);
 			} catch (Throwable e) {
 				result = new Status(IStatus.ERROR, Activator.ID, e.getMessage(), e);
 			} finally {
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
index 929c9c4..90ce128 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
@@ -38,6 +38,7 @@ import org.eclipse.equinox.p2.metadata.index.IIndex;
 import org.eclipse.equinox.p2.metadata.index.IIndexProvider;
 import org.eclipse.equinox.p2.query.*;
 import org.eclipse.equinox.p2.repository.IRepository;
+import org.eclipse.equinox.p2.repository.IRunnableWithProgress;
 import org.eclipse.equinox.p2.repository.artifact.*;
 import org.eclipse.equinox.p2.repository.artifact.spi.AbstractArtifactRepository;
 import org.eclipse.equinox.p2.repository.artifact.spi.ArtifactDescriptor;
@@ -1010,12 +1011,12 @@ public class SimpleArtifactRepository extends AbstractArtifactRepository impleme
 		return artifactMap.keySet().iterator();
 	}
 
-	public IStatus executeBatch(Runnable runnable) {
+	public IStatus executeBatch(IRunnableWithProgress runnable, IProgressMonitor monitor) {
 		IStatus result = null;
 		synchronized (this) {
 			try {
 				disableSave = true;
-				runnable.run();
+				runnable.run(monitor);
 			} catch (Throwable e) {
 				result = new Status(IStatus.ERROR, Activator.ID, e.getMessage(), e);
 			} finally {
diff --git a/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/provisional/p2/directorywatcher/CachingArtifactRepository.java b/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/provisional/p2/directorywatcher/CachingArtifactRepository.java
index 49d0dd4..8d3e88a 100644
--- a/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/provisional/p2/directorywatcher/CachingArtifactRepository.java
+++ b/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/provisional/p2/directorywatcher/CachingArtifactRepository.java
@@ -19,6 +19,7 @@ import org.eclipse.equinox.p2.core.IProvisioningAgent;
 import org.eclipse.equinox.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.p2.metadata.Version;
 import org.eclipse.equinox.p2.query.*;
+import org.eclipse.equinox.p2.repository.IRunnableWithProgress;
 import org.eclipse.equinox.p2.repository.artifact.*;
 import org.eclipse.equinox.p2.repository.artifact.spi.ArtifactDescriptor;
 
@@ -260,9 +261,9 @@ public class CachingArtifactRepository implements IArtifactRepository, IFileArti
 		return compound.query(query, monitor);
 	}
 
-	public IStatus executeBatch(Runnable runnable) {
+	public IStatus executeBatch(IRunnableWithProgress runnable, IProgressMonitor monitor) {
 		try {
-			runnable.run();
+			runnable.run(monitor);
 		} catch (Exception e) {
 			return new Status(IStatus.ERROR, Activator.ID, e.getMessage(), e);
 		}
diff --git a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java
index f3cf700..8bf8a02 100644
--- a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java
+++ b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java
@@ -20,6 +20,7 @@ import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.p2.metadata.Version;
 import org.eclipse.equinox.p2.query.*;
+import org.eclipse.equinox.p2.repository.IRunnableWithProgress;
 import org.eclipse.equinox.p2.repository.artifact.*;
 import org.eclipse.equinox.p2.repository.spi.AbstractRepository;
 import org.eclipse.osgi.util.NLS;
@@ -248,9 +249,9 @@ public class ExtensionLocationArtifactRepository extends AbstractRepository<IArt
 		return artifactRepository.query(query, monitor);
 	}
 
-	public IStatus executeBatch(Runnable runnable) {
+	public IStatus executeBatch(IRunnableWithProgress runnable, IProgressMonitor monitor) {
 		try {
-			runnable.run();
+			runnable.run(monitor);
 		} catch (Exception e) {
 			return new Status(IStatus.ERROR, Activator.ID, e.getMessage(), e);
 		}
diff --git a/bundles/org.eclipse.equinox.p2.garbagecollector/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.garbagecollector/META-INF/MANIFEST.MF
index ae98a28..e6b4be8 100644
--- a/bundles/org.eclipse.equinox.p2.garbagecollector/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.garbagecollector/META-INF/MANIFEST.MF
@@ -19,6 +19,7 @@ Import-Package: org.eclipse.core.runtime.preferences,
  org.eclipse.equinox.p2.core.spi;version="[2.0.0,3.0.0)",
  org.eclipse.equinox.p2.metadata;version="[2.0.0,3.0.0)",
  org.eclipse.equinox.p2.query;version="[2.0.0,3.0.0)",
+ org.eclipse.equinox.p2.repository;version="[2.0.0,3.0.0)",
  org.eclipse.equinox.p2.repository.artifact;version="[2.0.0,3.0.0)",
  org.eclipse.osgi.util;version="1.1.0",
  org.osgi.framework;version="1.4.0",
diff --git a/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/internal/p2/garbagecollector/CoreGarbageCollector.java b/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/internal/p2/garbagecollector/CoreGarbageCollector.java
index 81b942d..4cf97c9 100644
--- a/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/internal/p2/garbagecollector/CoreGarbageCollector.java
+++ b/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/internal/p2/garbagecollector/CoreGarbageCollector.java
@@ -10,13 +10,13 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.garbagecollector;
 
-import org.eclipse.equinox.p2.query.QueryUtil;
-
 import java.util.*;
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.equinox.internal.p2.core.helpers.Tracing;
 import org.eclipse.equinox.p2.metadata.IArtifactKey;
-import org.eclipse.equinox.p2.query.IQuery;
-import org.eclipse.equinox.p2.query.IQueryResult;
+import org.eclipse.equinox.p2.query.*;
+import org.eclipse.equinox.p2.repository.IRunnableWithProgress;
 import org.eclipse.equinox.p2.repository.artifact.IArtifactRepository;
 
 /**
@@ -39,8 +39,8 @@ public class CoreGarbageCollector {
 		//this query will match all artifact keys that are not in the given set
 		IQuery<IArtifactKey> query = QueryUtil.createQuery(IArtifactKey.class, "unique($0)", set); //$NON-NLS-1$
 		final IQueryResult<IArtifactKey> inactive = aRepository.query(query, null);
-		aRepository.executeBatch(new Runnable() {
-			public void run() {
+		aRepository.executeBatch(new IRunnableWithProgress() {
+			public void run(IProgressMonitor monitor) {
 				for (Iterator<IArtifactKey> iterator = inactive.iterator(); iterator.hasNext();) {
 					IArtifactKey key = iterator.next();
 					aRepository.removeDescriptor(key);
@@ -49,7 +49,7 @@ public class CoreGarbageCollector {
 					}
 				}
 			}
-		});
+		}, new NullProgressMonitor());
 	}
 
 	/*
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/Publisher.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/Publisher.java
index a2b23b0..49eeb0c 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/Publisher.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/Publisher.java
@@ -18,8 +18,7 @@ import org.eclipse.equinox.internal.p2.publisher.Activator;
 import org.eclipse.equinox.p2.core.IProvisioningAgent;
 import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.repository.IRepository;
-import org.eclipse.equinox.p2.repository.IRepositoryManager;
+import org.eclipse.equinox.p2.repository.*;
 import org.eclipse.equinox.p2.repository.artifact.IArtifactRepository;
 import org.eclipse.equinox.p2.repository.artifact.IArtifactRepositoryManager;
 import org.eclipse.equinox.p2.repository.metadata.IMetadataRepository;
@@ -187,20 +186,18 @@ public class Publisher {
 		this.results = results;
 	}
 
-	class ArtifactProcess implements Runnable {
+	class ArtifactProcess implements IRunnableWithProgress {
 
 		private final IPublisherAction[] actions;
 		private final IPublisherInfo info;
-		private final IProgressMonitor monitor;
 		private IStatus result = null;
 
-		public ArtifactProcess(IPublisherAction[] actions, IPublisherInfo info, IProgressMonitor monitor) {
-			this.monitor = monitor;
+		public ArtifactProcess(IPublisherAction[] actions, IPublisherInfo info) {
 			this.info = info;
 			this.actions = actions;
 		}
 
-		public void run() {
+		public void run(IProgressMonitor monitor) {
 			MultiStatus finalStatus = new MultiStatus("this", 0, "publishing result", null); //$NON-NLS-1$//$NON-NLS-2$
 			for (int i = 0; i < actions.length; i++) {
 				if (monitor.isCanceled()) {
@@ -227,17 +224,17 @@ public class Publisher {
 		if (Tracing.DEBUG_PUBLISHING)
 			Tracing.debug("Invoking publisher"); //$NON-NLS-1$
 		try {
-			ArtifactProcess artifactProcess = new ArtifactProcess(actions, info, sub);
+			ArtifactProcess artifactProcess = new ArtifactProcess(actions, info);
 
 			IStatus finalStatus = null;
 			if (info.getArtifactRepository() != null) {
-				finalStatus = info.getArtifactRepository().executeBatch(artifactProcess);
+				finalStatus = info.getArtifactRepository().executeBatch(artifactProcess, sub);
 				if (finalStatus.isOK())
 					// If the batch process didn't report any errors, then 
 					// Use the status from our actions
 					finalStatus = artifactProcess.getStatus();
 			} else {
-				artifactProcess.run();
+				artifactProcess.run(sub);
 				finalStatus = artifactProcess.getStatus();
 			}
 
diff --git a/bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/p2/repository/IRunnableWithProgress.java b/bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/p2/repository/IRunnableWithProgress.java
new file mode 100644
index 0000000..b4b7344
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/p2/repository/IRunnableWithProgress.java
@@ -0,0 +1,32 @@
+package org.eclipse.equinox.p2.repository;
+
+import java.lang.reflect.InvocationTargetException;
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.OperationCanceledException;
+
+/**
+ * The <code>IRunnableWithProgress</code> interface should be implemented by any
+ * class whose instances are intended to be executed as a long-running operation.
+ * Long-running operations are typically presented at the UI via a modal dialog
+ * showing a progress indicator and a Cancel button.
+ * The class must define a <code>run</code> method that takes a progress monitor.
+ * 
+ * @since 2.0
+ */
+public interface IRunnableWithProgress {
+
+	/**
+	 * Runs this operation.  Progress should be reported to the given progress monitor.
+	 * This method is usually invoked by an <code>IRunnableContext</code>'s <code>run</code> method,
+	 * which supplies the progress monitor.
+	 * A request to cancel the operation should be honored and acknowledged 
+	 * by throwing <code>InterruptedException</code>.
+	 *
+	 * @param monitor the progress monitor to use to display progress and receive
+	 *   requests for cancelation
+	 * @exception OperationCanceledException if the operation detects a request to cancel, 
+	 *  using <code>IProgressMonitor.isCanceled()</code>, it should exit by throwing 
+	 *  <code>OperationCanceledException</code>
+	 */
+	public void run(IProgressMonitor monitor) throws InvocationTargetException, OperationCanceledException;
+}
diff --git a/bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/p2/repository/artifact/IArtifactRepository.java b/bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/p2/repository/artifact/IArtifactRepository.java
index ce2b41a..e5d7825 100644
--- a/bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/p2/repository/artifact/IArtifactRepository.java
+++ b/bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/p2/repository/artifact/IArtifactRepository.java
@@ -18,6 +18,7 @@ import org.eclipse.equinox.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.p2.metadata.Version;
 import org.eclipse.equinox.p2.query.IQueryable;
 import org.eclipse.equinox.p2.repository.IRepository;
+import org.eclipse.equinox.p2.repository.IRunnableWithProgress;
 import org.eclipse.equinox.p2.repository.artifact.spi.AbstractArtifactRepository;
 
 /**
@@ -175,6 +176,6 @@ public interface IArtifactRepository extends IRepository<IArtifactKey> {
 	 * @return The result of running the runnable. Any exceptions thrown during
 	 * the execution will be returned in the status.
 	 */
-	public IStatus executeBatch(Runnable runnable);
+	public IStatus executeBatch(IRunnableWithProgress runnable, IProgressMonitor monitor);
 
 }
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/p2/repository/artifact/spi/AbstractArtifactRepository.java b/bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/p2/repository/artifact/spi/AbstractArtifactRepository.java
index 93f4173..2ae04bd 100644
--- a/bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/p2/repository/artifact/spi/AbstractArtifactRepository.java
+++ b/bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/p2/repository/artifact/spi/AbstractArtifactRepository.java
@@ -20,6 +20,7 @@ import org.eclipse.equinox.p2.core.IProvisioningAgent;
 import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.p2.metadata.Version;
+import org.eclipse.equinox.p2.repository.IRunnableWithProgress;
 import org.eclipse.equinox.p2.repository.artifact.*;
 import org.eclipse.equinox.p2.repository.spi.AbstractRepository;
 
@@ -89,14 +90,14 @@ public abstract class AbstractArtifactRepository extends AbstractRepository<IArt
 	public IArtifactDescriptor createArtifactDescriptor(IArtifactKey key) {
 		return new ArtifactDescriptor(key);
 	}
-
+	
 	public IArtifactKey createArtifactKey(String classifier, String id, Version version) {
 		return new ArtifactKey(classifier, id, version);
 	}
 
-	public IStatus executeBatch(Runnable runnable) {
+	public IStatus executeBatch(IRunnableWithProgress runnable, IProgressMonitor monitor) {
 		try {
-			runnable.run();
+			runnable.run(monitor);
 		} catch (Exception e) {
 			return new Status(IStatus.ERROR, Activator.ID, e.getMessage(), e);
 		}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractWrappedArtifactRepository.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractWrappedArtifactRepository.java
index 82836a5..e66b2f6 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractWrappedArtifactRepository.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractWrappedArtifactRepository.java
@@ -20,6 +20,7 @@ import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.p2.metadata.Version;
 import org.eclipse.equinox.p2.query.*;
+import org.eclipse.equinox.p2.repository.IRunnableWithProgress;
 import org.eclipse.equinox.p2.repository.artifact.*;
 
 public class AbstractWrappedArtifactRepository implements IArtifactRepository {
@@ -142,7 +143,7 @@ public class AbstractWrappedArtifactRepository implements IArtifactRepository {
 		return delegate.query(query, monitor);
 	}
 
-	public IStatus executeBatch(Runnable runnable) {
-		return delegate.executeBatch(runnable);
+	public IStatus executeBatch(IRunnableWithProgress runnable, IProgressMonitor monitor) {
+		return delegate.executeBatch(runnable, monitor);
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/BatchExecuteArtifactRepositoryTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/BatchExecuteArtifactRepositoryTest.java
index bfd1d85..ba65a7b 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/BatchExecuteArtifactRepositoryTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/BatchExecuteArtifactRepositoryTest.java
@@ -14,13 +14,13 @@ import java.lang.reflect.Field;
 import java.net.URI;
 import java.util.HashMap;
 import java.util.Map;
-import org.eclipse.core.runtime.IStatus;
-import org.eclipse.core.runtime.NullProgressMonitor;
+import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.artifact.repository.CompositeArtifactRepository;
 import org.eclipse.equinox.internal.p2.artifact.repository.simple.SimpleArtifactDescriptor;
 import org.eclipse.equinox.internal.p2.artifact.repository.simple.SimpleArtifactRepository;
 import org.eclipse.equinox.internal.p2.metadata.ArtifactKey;
 import org.eclipse.equinox.p2.metadata.Version;
+import org.eclipse.equinox.p2.repository.IRunnableWithProgress;
 import org.eclipse.equinox.p2.repository.artifact.*;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 
@@ -47,8 +47,8 @@ public class BatchExecuteArtifactRepositoryTest extends AbstractProvisioningTest
 			Map properties = new HashMap();
 			final SimpleArtifactRepository repo = (SimpleArtifactRepository) getArtifactRepositoryManager().createRepository(repositoryURI, "My Repo", IArtifactRepositoryManager.TYPE_SIMPLE_REPOSITORY, properties);
 			final URI artifactXML = new URI(repositoryFile.toURI().toString() + "/artifacts.xml");
-			IStatus status = repo.executeBatch(new Runnable() {
-				public void run() {
+			IStatus status = repo.executeBatch(new IRunnableWithProgress() {
+				public void run(IProgressMonitor monitor) {
 					repo.addDescriptor(createDescriptor("foo", "foo", Version.emptyVersion));
 					try {
 						assertFalse("1.0", fileContainsString(artifactXML, "foo"));
@@ -56,7 +56,7 @@ public class BatchExecuteArtifactRepositoryTest extends AbstractProvisioningTest
 						fail("0.99");
 					}
 				}
-			});
+			}, new NullProgressMonitor());
 			assertTrue(status.isOK());
 			assertTrue("1.0", fileContainsString(artifactXML, "foo"));
 			assertEquals("2.0", 1, repo.query(new ArtifactKeyQuery("foo", "foo", null), new NullProgressMonitor()).toSet().size());
@@ -75,8 +75,8 @@ public class BatchExecuteArtifactRepositoryTest extends AbstractProvisioningTest
 			Map properties = new HashMap();
 			final SimpleArtifactRepository repo = (SimpleArtifactRepository) getArtifactRepositoryManager().createRepository(repositoryURI, "My Repo", IArtifactRepositoryManager.TYPE_SIMPLE_REPOSITORY, properties);
 			final URI artifactXML = new URI(repositoryFile.toURI().toString() + "/artifacts.xml");
-			IStatus status = repo.executeBatch(new Runnable() {
-				public void run() {
+			IStatus status = repo.executeBatch(new IRunnableWithProgress() {
+				public void run(IProgressMonitor monitor) {
 					repo.addDescriptor(createDescriptor("foo", "foo", Version.emptyVersion));
 					repo.addDescriptor(createDescriptor("bar", "bar", Version.emptyVersion));
 					repo.addDescriptor(createDescriptor("baz", "baz", Version.emptyVersion));
@@ -88,7 +88,7 @@ public class BatchExecuteArtifactRepositoryTest extends AbstractProvisioningTest
 						fail("0.99");
 					}
 				}
-			});
+			}, new NullProgressMonitor());
 			assertTrue(status.isOK());
 			assertEquals("1.0", 1, repo.query(new ArtifactKeyQuery("foo", "foo", null), new NullProgressMonitor()).toSet().size());
 			assertEquals("1.1", 1, repo.query(new ArtifactKeyQuery("bar", "bar", null), new NullProgressMonitor()).toSet().size());
@@ -111,13 +111,13 @@ public class BatchExecuteArtifactRepositoryTest extends AbstractProvisioningTest
 			Map properties = new HashMap();
 			final SimpleArtifactRepository repo = (SimpleArtifactRepository) getArtifactRepositoryManager().createRepository(repositoryURI, "My Repo", IArtifactRepositoryManager.TYPE_SIMPLE_REPOSITORY, properties);
 			final URI artifactXML = new URI(repositoryFile.toURI().toString() + "/artifacts.xml");
-			IStatus status = repo.executeBatch(new Runnable() {
-				public void run() {
+			IStatus status = repo.executeBatch(new IRunnableWithProgress() {
+				public void run(IProgressMonitor monitor) {
 					repo.addDescriptor(createDescriptor("foo", "foo", Version.emptyVersion));
 					repo.addDescriptor(createDescriptor("bar", "bar", Version.emptyVersion));
 					throw new RuntimeException();
 				}
-			});
+			}, new NullProgressMonitor());
 			assertFalse(status.isOK());
 			assertEquals("1.0", 1, repo.query(new ArtifactKeyQuery("foo", "foo", null), new NullProgressMonitor()).toSet().size());
 			assertEquals("1.1", 1, repo.query(new ArtifactKeyQuery("bar", "bar", null), new NullProgressMonitor()).toSet().size());
@@ -138,14 +138,14 @@ public class BatchExecuteArtifactRepositoryTest extends AbstractProvisioningTest
 			Map properties = new HashMap();
 			final SimpleArtifactRepository repo = (SimpleArtifactRepository) getArtifactRepositoryManager().createRepository(repositoryURI, "My Repo", IArtifactRepositoryManager.TYPE_SIMPLE_REPOSITORY, properties);
 			final URI artifactXML = new URI(repositoryFile.toURI().toString() + "/artifacts.xml");
-			IStatus status = repo.executeBatch(new Runnable() {
-				public void run() {
+			IStatus status = repo.executeBatch(new IRunnableWithProgress() {
+				public void run(IProgressMonitor monitor) {
 					IArtifactDescriptor foo = createDescriptor("foo", "foo", Version.emptyVersion);
 					repo.addDescriptor(foo);
 					repo.addDescriptor(createDescriptor("bar", "bar", Version.emptyVersion));
 					repo.removeDescriptor(foo);
 				}
-			});
+			}, new NullProgressMonitor());
 			assertTrue(status.isOK());
 			assertEquals("1.0", 1, repo.query(new ArtifactKeyQuery("bar", "bar", null), new NullProgressMonitor()).toSet().size());
 			assertEquals("1.1", 0, repo.query(new ArtifactKeyQuery("foo", "foo", null), new NullProgressMonitor()).toSet().size());
@@ -166,8 +166,8 @@ public class BatchExecuteArtifactRepositoryTest extends AbstractProvisioningTest
 			Map properties = new HashMap();
 			final SimpleArtifactRepository repo = (SimpleArtifactRepository) getArtifactRepositoryManager().createRepository(repositoryURI, "My Repo", IArtifactRepositoryManager.TYPE_SIMPLE_REPOSITORY, properties);
 			final URI artifactXML = new URI(repositoryFile.toURI().toString() + "/artifacts.xml");
-			IStatus status = repo.executeBatch(new Runnable() {
-				public void run() {
+			IStatus status = repo.executeBatch(new IRunnableWithProgress() {
+				public void run(IProgressMonitor monitor) {
 					repo.addDescriptor(createDescriptor("1", "1", Version.emptyVersion));
 					repo.addDescriptor(createDescriptor("2", "2", Version.emptyVersion));
 					repo.addDescriptor(createDescriptor("3", "3", Version.emptyVersion));
@@ -176,7 +176,7 @@ public class BatchExecuteArtifactRepositoryTest extends AbstractProvisioningTest
 					repo.addDescriptor(createDescriptor("bar", "bar", Version.emptyVersion));
 					repo.removeDescriptor(foo);
 				}
-			});
+			}, new NullProgressMonitor());
 			assertTrue(status.isOK());
 			assertEquals("1.0", 4, repo.query(new ArtifactKeyQuery(null, null, null), new NullProgressMonitor()).toSet().size());
 			assertFalse("2.0", fileContainsString(artifactXML, "foo"));
@@ -202,11 +202,11 @@ public class BatchExecuteArtifactRepositoryTest extends AbstractProvisioningTest
 			repositoryURI = repositoryFile.toURI();
 			Map properties = new HashMap();
 			SimpleArtifactRepository repo = (SimpleArtifactRepository) getArtifactRepositoryManager().createRepository(repositoryURI, "My Repo", IArtifactRepositoryManager.TYPE_SIMPLE_REPOSITORY, properties);
-			IStatus status = repo.executeBatch(new Runnable() {
-				public void run() {
+			IStatus status = repo.executeBatch(new IRunnableWithProgress() {
+				public void run(IProgressMonitor monitor) {
 					// empty
 				}
-			});
+			}, new NullProgressMonitor());
 			assertTrue(status.isOK());
 		} catch (Exception e) {
 			fail("Test failed", e);
@@ -225,9 +225,9 @@ public class BatchExecuteArtifactRepositoryTest extends AbstractProvisioningTest
 			super(getAgent(), repositoryName, location, properties);
 		}
 
-		public IStatus executeBatch(Runnable runnable) {
+		public IStatus executeBatch(IRunnableWithProgress runnable, IProgressMonitor monitor) {
 			executeBatch = true;
-			return super.executeBatch(runnable);
+			return super.executeBatch(runnable, monitor);
 		}
 
 		public void save() {
@@ -248,9 +248,9 @@ public class BatchExecuteArtifactRepositoryTest extends AbstractProvisioningTest
 			super(manager, location, repositoryName, properties);
 		}
 
-		public IStatus executeBatch(Runnable runnable) {
+		public IStatus executeBatch(IRunnableWithProgress runnable, IProgressMonitor monitor) {
 			executeBatch = true;
-			return super.executeBatch(runnable);
+			return super.executeBatch(runnable, monitor);
 		}
 
 		public void save() {
@@ -266,11 +266,11 @@ public class BatchExecuteArtifactRepositoryTest extends AbstractProvisioningTest
 		try {
 			SimpleArtifactRepository simpleArtifactRepository = new FailingSimpleArtifactRepository("foo", new URI("http://foo.bar"), null);
 
-			IStatus status = simpleArtifactRepository.executeBatch(new Runnable() {
-				public void run() {
+			IStatus status = simpleArtifactRepository.executeBatch(new IRunnableWithProgress() {
+				public void run(IProgressMonitor monitor) {
 					throw new RuntimeException("bar");
 				}
-			});
+			}, new NullProgressMonitor());
 			assertFalse(status.isOK());
 			assertEquals("foo", status.getException().getMessage());
 			assertEquals(1, status.getChildren().length);
@@ -287,11 +287,11 @@ public class BatchExecuteArtifactRepositoryTest extends AbstractProvisioningTest
 		try {
 			SimpleArtifactRepository simpleArtifactRepository = new FailingSimpleArtifactRepository("foo", new URI("http://foo.bar"), null);
 
-			IStatus status = simpleArtifactRepository.executeBatch(new Runnable() {
-				public void run() {
+			IStatus status = simpleArtifactRepository.executeBatch(new IRunnableWithProgress() {
+				public void run(IProgressMonitor monitor) {
 					// empty
 				}
-			});
+			}, new NullProgressMonitor());
 			assertFalse(status.isOK());
 			assertEquals("foo", status.getException().getMessage());
 		} catch (Exception e) {
@@ -306,11 +306,12 @@ public class BatchExecuteArtifactRepositoryTest extends AbstractProvisioningTest
 		try {
 			FailingCompositeArtifactRepository compositeArtifactRepository = new FailingCompositeArtifactRepository(getArtifactRepositoryManager(), "foo", new URI("http://foo.bar"), null);
 
-			IStatus status = compositeArtifactRepository.executeBatch(new Runnable() {
-				public void run() {
+			IStatus status = compositeArtifactRepository.executeBatch(new IRunnableWithProgress() {
+
+				public void run(IProgressMonitor monitor) {
 					throw new RuntimeException("bar");
 				}
-			});
+			}, new NullProgressMonitor());
 			assertFalse(status.isOK());
 			assertEquals("foo", status.getException().getMessage());
 			assertEquals(1, status.getChildren().length);
@@ -327,11 +328,11 @@ public class BatchExecuteArtifactRepositoryTest extends AbstractProvisioningTest
 		try {
 			FailingCompositeArtifactRepository compositeArtifactRepository = new FailingCompositeArtifactRepository(getArtifactRepositoryManager(), "foo", new URI("http://foo.bar"), null);
 
-			IStatus status = compositeArtifactRepository.executeBatch(new Runnable() {
-				public void run() {
+			IStatus status = compositeArtifactRepository.executeBatch(new IRunnableWithProgress() {
+				public void run(IProgressMonitor monitor) {
 					// empty
 				}
-			});
+			}, new NullProgressMonitor());
 			assertFalse(status.isOK());
 			assertEquals("foo", status.getException().getMessage());
 		} catch (Exception e) {
@@ -352,9 +353,9 @@ public class BatchExecuteArtifactRepositoryTest extends AbstractProvisioningTest
 			super(getAgent(), repositoryName, location, properties);
 		}
 
-		public IStatus executeBatch(Runnable runnable) {
+		public IStatus executeBatch(IRunnableWithProgress runnable, IProgressMonitor monitor) {
 			executeBatch = true;
-			return super.executeBatch(runnable);
+			return super.executeBatch(runnable, monitor);
 		}
 
 		public void save() {
@@ -370,11 +371,11 @@ public class BatchExecuteArtifactRepositoryTest extends AbstractProvisioningTest
 	public void testBatchProcessingTrackSaving() {
 		try {
 			TrackSavignSimpleArtifactRepository simpleArtifactRepository = new TrackSavignSimpleArtifactRepository("foo", new URI("http://foo.bar"), null);
-			simpleArtifactRepository.executeBatch(new Runnable() {
-				public void run() {
+			simpleArtifactRepository.executeBatch(new IRunnableWithProgress() {
+				public void run(IProgressMonitor monitor) {
 					//do nothing;
 				}
-			});
+			}, new NullProgressMonitor());
 			assertTrue(simpleArtifactRepository.didSave);
 		} catch (Exception e) {
 			fail("Test failed", e);
@@ -388,11 +389,11 @@ public class BatchExecuteArtifactRepositoryTest extends AbstractProvisioningTest
 	public void testBatchProcessingTrackSavingException() {
 		try {
 			TrackSavignSimpleArtifactRepository simpleArtifactRepository = new TrackSavignSimpleArtifactRepository("foo", new URI("http://foo.bar"), null);
-			simpleArtifactRepository.executeBatch(new Runnable() {
-				public void run() {
+			simpleArtifactRepository.executeBatch(new IRunnableWithProgress() {
+				public void run(IProgressMonitor monitor) {
 					throw new RuntimeException();
 				}
-			});
+			}, new NullProgressMonitor());
 			assertTrue(simpleArtifactRepository.didSave);
 		} catch (Exception e) {
 			fail("Test failed", e);
@@ -409,11 +410,11 @@ public class BatchExecuteArtifactRepositoryTest extends AbstractProvisioningTest
 			repositoryURI = repositoryFile.toURI();
 			Map properties = new HashMap();
 			SimpleArtifactRepository repo = (SimpleArtifactRepository) getArtifactRepositoryManager().createRepository(repositoryURI, "My Repo", IArtifactRepositoryManager.TYPE_SIMPLE_REPOSITORY, properties);
-			repo.executeBatch(new Runnable() {
-				public void run() {
+			repo.executeBatch(new IRunnableWithProgress() {
+				public void run(IProgressMonitor monitor) {
 					throw new RuntimeException();
 				}
-			});
+			}, new NullProgressMonitor());
 			Field field = SimpleArtifactRepository.class.getDeclaredField("disableSave");
 			field.setAccessible(true);
 			boolean disableSave = field.getBoolean(repo);
@@ -434,8 +435,8 @@ public class BatchExecuteArtifactRepositoryTest extends AbstractProvisioningTest
 			repositoryURI = repositoryFile.toURI();
 			Map properties = new HashMap();
 			final SimpleArtifactRepository repo = (SimpleArtifactRepository) getArtifactRepositoryManager().createRepository(repositoryURI, "My Repo", IArtifactRepositoryManager.TYPE_SIMPLE_REPOSITORY, properties);
-			repo.executeBatch(new Runnable() {
-				public void run() {
+			repo.executeBatch(new IRunnableWithProgress() {
+				public void run(IProgressMonitor monitor) {
 					Field field;
 					try {
 						field = SimpleArtifactRepository.class.getDeclaredField("disableSave");
@@ -453,7 +454,7 @@ public class BatchExecuteArtifactRepositoryTest extends AbstractProvisioningTest
 						fail("1.2" + e.getMessage());
 					}
 				}
-			});
+			}, new NullProgressMonitor());
 
 		} catch (Exception e) {
 			fail("Test failed", e);
@@ -470,11 +471,11 @@ public class BatchExecuteArtifactRepositoryTest extends AbstractProvisioningTest
 			repositoryURI = repositoryFile.toURI();
 			Map properties = new HashMap();
 			CompositeArtifactRepository repo = (CompositeArtifactRepository) getArtifactRepositoryManager().createRepository(repositoryURI, "My Repo", IArtifactRepositoryManager.TYPE_COMPOSITE_REPOSITORY, properties);
-			repo.executeBatch(new Runnable() {
-				public void run() {
+			repo.executeBatch(new IRunnableWithProgress() {
+				public void run(IProgressMonitor monitor) {
 					throw new RuntimeException();
 				}
-			});
+			}, new NullProgressMonitor());
 			Field field = CompositeArtifactRepository.class.getDeclaredField("disableSave");
 			field.setAccessible(true);
 			boolean disableSave = field.getBoolean(repo);
@@ -494,8 +495,8 @@ public class BatchExecuteArtifactRepositoryTest extends AbstractProvisioningTest
 			repositoryURI = repositoryFile.toURI();
 			Map properties = new HashMap();
 			final CompositeArtifactRepository repo = (CompositeArtifactRepository) getArtifactRepositoryManager().createRepository(repositoryURI, "My Repo", IArtifactRepositoryManager.TYPE_COMPOSITE_REPOSITORY, properties);
-			repo.executeBatch(new Runnable() {
-				public void run() {
+			repo.executeBatch(new IRunnableWithProgress() {
+				public void run(IProgressMonitor monitor) {
 					Field field;
 					try {
 						field = CompositeArtifactRepository.class.getDeclaredField("disableSave");
@@ -513,7 +514,7 @@ public class BatchExecuteArtifactRepositoryTest extends AbstractProvisioningTest
 						fail("1.2" + e.getMessage());
 					}
 				}
-			});
+			}, new NullProgressMonitor());
 
 		} catch (Exception e) {
 			fail("Test failed", e);
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/TestArtifactRepository.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/TestArtifactRepository.java
index d8012a6..8550992 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/TestArtifactRepository.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/TestArtifactRepository.java
@@ -25,6 +25,7 @@ import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.p2.metadata.Version;
 import org.eclipse.equinox.p2.query.*;
+import org.eclipse.equinox.p2.repository.IRunnableWithProgress;
 import org.eclipse.equinox.p2.repository.artifact.*;
 import org.eclipse.equinox.p2.repository.artifact.spi.ArtifactDescriptor;
 import org.eclipse.equinox.p2.tests.TestActivator;
@@ -325,9 +326,9 @@ public class TestArtifactRepository implements IArtifactRepository {
 		};
 	}
 
-	public IStatus executeBatch(Runnable runnable) {
+	public IStatus executeBatch(IRunnableWithProgress runnable, IProgressMonitor monitor) {
 		try {
-			runnable.run();
+			runnable.run(monitor);
 		} catch (Exception e) {
 			return new Status(IStatus.ERROR, "org.eclipse.equinox.p2.tests.publisher", e.getMessage(), e);
 		}
diff --git a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepository.java b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepository.java
index f296c54..414c284 100644
--- a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepository.java
+++ b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepository.java
@@ -20,6 +20,7 @@ import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.p2.metadata.Version;
 import org.eclipse.equinox.p2.query.*;
+import org.eclipse.equinox.p2.repository.IRunnableWithProgress;
 import org.eclipse.equinox.p2.repository.artifact.*;
 
 public class UpdateSiteArtifactRepository implements IArtifactRepository {
@@ -161,7 +162,7 @@ public class UpdateSiteArtifactRepository implements IArtifactRepository {
 		return delegate.query(query, monitor);
 	}
 
-	public IStatus executeBatch(Runnable runnable) {
-		return delegate.executeBatch(runnable);
+	public IStatus executeBatch(IRunnableWithProgress runnable, IProgressMonitor monitor) {
+		return delegate.executeBatch(runnable, monitor);
 	}
 }
commit 9736f5fb0f69fa6725a1fcee004dffa8e2fdf09a
Author: ibull <>
Date:   Tue Mar 9 04:55:36 2010 +0000

    bug 305064: [api] Add a progress monitor to the execute batch method
    https://bugs.eclipse.org/bugs/show_bug.cgi?id=305064

1	0	bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/p2/repository/artifact/IArtifactRepository.java
diff --git a/bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/p2/repository/artifact/IArtifactRepository.java b/bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/p2/repository/artifact/IArtifactRepository.java
index e5d7825..03cbafb 100644
--- a/bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/p2/repository/artifact/IArtifactRepository.java
+++ b/bundles/org.eclipse.equinox.p2.repository/src/org/eclipse/equinox/p2/repository/artifact/IArtifactRepository.java
@@ -173,6 +173,7 @@ public interface IArtifactRepository extends IRepository<IArtifactKey> {
 	 * The runnable should not execute anything in a separate thread.
 	 *  
 	 * @param runnable The runnable to execute
+	 * @param monitor A progress monitor that will be passed to the runnable
 	 * @return The result of running the runnable. Any exceptions thrown during
 	 * the execution will be returned in the status.
 	 */

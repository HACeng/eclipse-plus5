commit 518ab43e6d064575c0a0dadd5a0a991af156593e
Author: John Arthorne <johna>
Date:   Fri Feb 15 16:49:33 2008 +0000

    Bug 219109 [prov] IArtifactRepository#getOutputStream should declare a thrown exception

10	12	bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/jardelta/Optimizer.java
9	11	bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/jbdiff/Optimizer.java
5	0	bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/pack200/Optimizer.java
15	15	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/Messages.java
6	3	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/MirrorRequest.java
7	3	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/messages.properties
15	17	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
7	1	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/p2/artifact/repository/IArtifactRepository.java
7	4	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/artifact/repository/AbstractArtifactRepository.java
18	2	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/ProvisionException.java
11	13	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
1	1	bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepository.java
diff --git a/bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/jardelta/Optimizer.java b/bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/jardelta/Optimizer.java
index 81fa275..baa8a28 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/jardelta/Optimizer.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/jardelta/Optimizer.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007 compeople AG and others.
+ * Copyright (c) 2007, 2008 compeople AG and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -13,19 +13,13 @@ package org.eclipse.equinox.internal.p2.artifact.optimizers.jardelta;
 
 import java.io.IOException;
 import java.io.OutputStream;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Comparator;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-
+import java.util.*;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.equinox.internal.p2.metadata.ArtifactKey;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.*;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.processing.*;
+import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
 import org.osgi.framework.Version;
 
@@ -189,20 +183,24 @@ public class Optimizer {
 				// Do the actual work by asking the repo to get the artifact and put it in the destination.
 				IStatus status = repository.getArtifact(canonical, destination, new NullProgressMonitor());
 				if (!status.isOK()) {
-					System.out.println("Getting the artifact is not ok.");
+					System.out.println("Getting the artifact is not ok."); //$NON-NLS-1$
 					System.out.println(status);
 				}
+			} catch (ProvisionException e) {
+				System.out.println("Skipping optimization of: " + descriptors[i].getArtifactKey()); //$NON-NLS-1$
+				System.out.println(e.getMessage());
+				e.printStackTrace();
 			} finally {
 				if (repositoryStream != null)
 					try {
 						repositoryStream.close();
 						IStatus status = ProcessingStepHandler.checkStatus(repositoryStream);
 						if (!status.isOK()) {
-							System.out.println("Skipping optimization of: " + descriptors[i].getArtifactKey());
+							System.out.println("Skipping optimization of: " + descriptors[i].getArtifactKey()); //$NON-NLS-1$
 							System.out.println(status.toString());
 						}
 					} catch (IOException e) {
-						System.out.println("Skipping optimization of: " + descriptors[i].getArtifactKey());
+						System.out.println("Skipping optimization of: " + descriptors[i].getArtifactKey()); //$NON-NLS-1$
 						System.out.println(e.getMessage());
 						e.printStackTrace();
 					}
diff --git a/bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/jbdiff/Optimizer.java b/bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/jbdiff/Optimizer.java
index c705736..6592b57 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/jbdiff/Optimizer.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/jbdiff/Optimizer.java
@@ -13,19 +13,13 @@ package org.eclipse.equinox.internal.p2.artifact.optimizers.jbdiff;
 
 import java.io.IOException;
 import java.io.OutputStream;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Comparator;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-
+import java.util.*;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.equinox.internal.p2.artifact.optimizers.VersionlessArtifactKey;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.*;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.processing.*;
+import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
 
 public class Optimizer {
@@ -202,20 +196,24 @@ public class Optimizer {
 				// Do the actual work by asking the repo to get the artifact and put it in the destination.
 				IStatus status = repository.getArtifact(complete, destination, new NullProgressMonitor());
 				if (!status.isOK()) {
-					System.out.println("Getting the artifact is not ok.");
+					System.out.println("Getting the artifact is not ok."); //$NON-NLS-1$
 					System.out.println(status);
 				}
+			} catch (ProvisionException e) {
+				System.out.println("Skipping optimization of: " + descriptors[i].getArtifactKey()); //$NON-NLS-1$
+				System.out.println(e.getMessage());
+				e.printStackTrace();
 			} finally {
 				if (repositoryStream != null)
 					try {
 						repositoryStream.close();
 						IStatus status = ProcessingStepHandler.checkStatus(repositoryStream);
 						if (!status.isOK()) {
-							System.out.println("Skipping optimization of: " + descriptors[i].getArtifactKey());
+							System.out.println("Skipping optimization of: " + descriptors[i].getArtifactKey()); //$NON-NLS-1$
 							System.out.println(status.toString());
 						}
 					} catch (IOException e) {
-						System.out.println("Skipping optimization of: " + descriptors[i].getArtifactKey());
+						System.out.println("Skipping optimization of: " + descriptors[i].getArtifactKey()); //$NON-NLS-1$
 						System.out.println(e.getMessage());
 						e.printStackTrace();
 					}
diff --git a/bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/pack200/Optimizer.java b/bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/pack200/Optimizer.java
index bde2560..e2fa5ac 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/pack200/Optimizer.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.optimizers/src/org/eclipse/equinox/internal/p2/artifact/optimizers/pack200/Optimizer.java
@@ -16,6 +16,7 @@ import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.*;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.processing.*;
+import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
 import org.eclipse.osgi.util.NLS;
 
@@ -74,6 +75,10 @@ public class Optimizer {
 				System.out.println(NLS.bind(Messages.failed_getting_artifact, descriptor.getArtifactKey()));
 				System.out.println(status);
 			}
+		} catch (ProvisionException e) {
+			System.out.println(NLS.bind(Messages.skip_optimization, descriptor.getArtifactKey()));
+			System.out.println(e.getMessage());
+			e.printStackTrace();
 		} finally {
 			if (repositoryStream != null)
 				try {
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/Messages.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/Messages.java
index ef7ec7f..14dbc8b 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/Messages.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/Messages.java
@@ -13,33 +13,33 @@ package org.eclipse.equinox.internal.p2.artifact.repository;
 import org.eclipse.osgi.util.NLS;
 
 public class Messages extends NLS {
-
 	private static final String BUNDLE_NAME = "org.eclipse.equinox.internal.p2.artifact.repository.messages"; //$NON-NLS-1$
 
-	static {
-		// initialize resource bundles
-		NLS.initializeMessages(BUNDLE_NAME, Messages.class);
-	}
-
-	private Messages() {
-		// Do not instantiate
-	}
-
 	public static String artifact_not_found;
 	public static String available_already_in;
 	public static String cant_get_outputstream;
 	public static String downloading;
 	public static String error_closing_stream;
+	public static String FileDownloadError;
+	public static String io_failedRead;
+	public static String io_incompatibleVersion;
+	public static String io_parseError;
+	public static String mirroring;
 	public static String repoMan_exists;
 	public static String repoMan_failedRead;
 	public static String repoMan_internalError;
 	public static String repoMan_notExists;
 	public static String repoMan_unknownType;
+	public static String repoFailedWrite;
+	public static String repoReadOnly;
 
-	public static String FileDownloadError;
-	public static String io_failedRead;
-	public static String io_parseError;
-	public static String io_incompatibleVersion;
-	public static String mirroring;
+	static {
+		// initialize resource bundles
+		NLS.initializeMessages(BUNDLE_NAME, Messages.class);
+	}
+
+	private Messages() {
+		// Do not instantiate
+	}
 
 }
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/MirrorRequest.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/MirrorRequest.java
index 68c6caf..82c9515 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/MirrorRequest.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/MirrorRequest.java
@@ -18,6 +18,7 @@ import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.*;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.processing.ProcessingStepDescriptor;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.processing.ProcessingStepHandler;
+import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
 import org.eclipse.osgi.util.NLS;
 
@@ -105,9 +106,11 @@ public class MirrorRequest extends ArtifactRequest {
 		if (targetRepositoryProperties != null)
 			destinationDescriptor.addRepositoryProperties(targetRepositoryProperties);
 
-		OutputStream destination = target.getOutputStream(destinationDescriptor);
-		if (destination == null) {
-			setResult(new Status(IStatus.ERROR, Activator.ID, NLS.bind(Messages.cant_get_outputstream, target, getArtifactKey())));
+		OutputStream destination;
+		try {
+			destination = target.getOutputStream(destinationDescriptor);
+		} catch (ProvisionException e) {
+			setResult(e.getStatus());
 			return;
 		}
 
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/messages.properties b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/messages.properties
index b66d5f7..91fed5e 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/messages.properties
@@ -8,12 +8,12 @@
 # Contributors:
 #     IBM Corporation - initial API and implementation
 ###############################################################################
-available_already_in=The artifact is already available in the repo {0}.
+artifact_not_found=Artifact requested can't be found {0}.
+available_already_in=The artifact is already available in the repository {0}.
 cant_get_outputstream=Can't get an output stream to {0} store {1}. 
 downloading=Downloading {0}.
-error_closing_stream=Error closing the output stream for {0} on repo {1}. 
+error_closing_stream=Error closing the output stream for {0} on repository {1}. 
 
-artifact_not_found=Artifact requested can't be found {0}.
 FileDownloadError=Error downloading {0} to {1}. 
 io_failedRead=Unable to read repository at {0}.
 io_parseError=\
@@ -21,6 +21,10 @@ io_parseError=\
 io_incompatibleVersion=\
 	Simple artifact repository has incompatible version {0}; expected {1}.
 mirroring=Mirroring: 
+
+repoFailedWrite=Unable to write to repository: {0}.
+repoReadOnly=Cannot write because repository is read only: {0}
+
 repoMan_exists=Repository already exists at {0}.
 repoMan_failedRead=The repository could not be read: {0}.
 repoMan_internalError=Internal error.
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
index c1a6b30..396275f 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
@@ -589,13 +589,13 @@ public class SimpleArtifactRepository extends AbstractArtifactRepository impleme
 		return DEFAULT_MAX_THREADS;
 	}
 
-	public OutputStream getOutputStream(IArtifactDescriptor descriptor) {
+	public OutputStream getOutputStream(IArtifactDescriptor descriptor) throws ProvisionException {
 		assertModifiable();
-		// TODO we need a better way of distinguishing between errors and cases where 
-		// the stuff just already exists
 		// Check if the artifact is already in this repository
-		if (contains(descriptor))
-			return null;
+		if (contains(descriptor)) {
+			String msg = NLS.bind(Messages.available_already_in, getLocation().toExternalForm());
+			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.ARTIFACT_EXISTS, msg, null));
+		}
 
 		// create a copy of the original descriptor that we can manipulate
 		ArtifactDescriptor newDescriptor = new ArtifactDescriptor(descriptor);
@@ -604,9 +604,6 @@ public class SimpleArtifactRepository extends AbstractArtifactRepository impleme
 
 		// Determine writing location
 		String newLocation = createLocation(newDescriptor);
-		if (newLocation == null)
-			// TODO: Log an error, or throw an exception?
-			return null;
 		String file = null;
 		try {
 			file = new URL(newLocation).getFile();
@@ -615,12 +612,12 @@ public class SimpleArtifactRepository extends AbstractArtifactRepository impleme
 			Assert.isTrue(false, "Unexpected failure: " + e1); //$NON-NLS-1$
 		}
 
-		// TODO at this point we have to assume that the repo is file-based.  Eventually 
+		// TODO at this point we have to assume that the repository is file-based.  Eventually 
 		// we should end up with writeable URLs...
 		// Make sure that the file does not exist and that the parents do
 		File outputFile = new File(file);
 		if (outputFile.exists()) {
-			System.err.println("Artifact repository out of synch. Overwriting " + outputFile.getAbsoluteFile()); //$NON-NLS-1$
+			System.err.println("Artifact repository out of sync. Overwriting " + outputFile.getAbsoluteFile()); //$NON-NLS-1$
 			delete(outputFile);
 		}
 
@@ -629,26 +626,27 @@ public class SimpleArtifactRepository extends AbstractArtifactRepository impleme
 			if (isFolderBased(newDescriptor)) {
 				outputFile.mkdirs();
 				if (!outputFile.exists())
-					// TODO: Log an error, or throw an exception?
-					return null;
+					throw failedWrite(null);
 
 				target = new ZippedFolderOutputStream(outputFile);
 			} else {
 				// file based
 				if (!outputFile.getParentFile().exists() && !outputFile.getParentFile().mkdirs())
-					// TODO: Log an error, or throw an exception?
-					return null;
+					throw failedWrite(null);
 				target = new FileOutputStream(file);
 			}
 
 			// finally create and return an output stream suitably wrapped so that when it is 
 			// closed the repository is updated with the descriptor
-
 			return new ArtifactOutputStream(new BufferedOutputStream(target), newDescriptor, outputFile);
 		} catch (IOException e) {
-			e.printStackTrace();
+			throw failedWrite(e);
 		}
-		return null;
+	}
+
+	private ProvisionException failedWrite(Exception e) throws ProvisionException {
+		String msg = NLS.bind(Messages.repoFailedWrite, getLocation().toExternalForm());
+		throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_FAILED_WRITE, msg, e));
 	}
 
 	public synchronized String[][] getRules() {
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/p2/artifact/repository/IArtifactRepository.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/p2/artifact/repository/IArtifactRepository.java
index f3560cd..623d177 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/p2/artifact/repository/IArtifactRepository.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/p2/artifact/repository/IArtifactRepository.java
@@ -13,6 +13,7 @@ package org.eclipse.equinox.internal.provisional.p2.artifact.repository;
 import java.io.OutputStream;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.IStatus;
+import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository.AbstractArtifactRepository;
@@ -91,8 +92,13 @@ public interface IArtifactRepository extends IRepository {
 	 * resultant stream
 	 * @return the stream to which the artifact content can be written. The returned output
 	 *  stream may implement <code>IStateful</code>.
+	 * @throws ProvisionException if the output stream could not be created.  Reasons include:
+	 * <ul>
+	 * <li>An I/O exception occurred (@link {@link ProvisionException#REPOSITORY_FAILED_WRITE}) .</li>
+	 * <li>An artifact already exists at that location ({@link ProvisionException#ARTIFACT_EXISTS}).</li>
+	 * </ul>
 	 */
-	public OutputStream getOutputStream(IArtifactDescriptor descriptor);
+	public OutputStream getOutputStream(IArtifactDescriptor descriptor) throws ProvisionException;
 
 	/**
 	 * Remove the all keys, descriptors, and contents from this repository.
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/artifact/repository/AbstractArtifactRepository.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/artifact/repository/AbstractArtifactRepository.java
index 832c0a3..4770918 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/artifact/repository/AbstractArtifactRepository.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/spi/p2/artifact/repository/AbstractArtifactRepository.java
@@ -12,12 +12,15 @@ package org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository;
 
 import java.io.OutputStream;
 import java.net.URL;
-import org.eclipse.core.runtime.IProgressMonitor;
-import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.internal.p2.artifact.repository.Activator;
+import org.eclipse.equinox.internal.p2.artifact.repository.Messages;
 import org.eclipse.equinox.internal.p2.core.helpers.URLUtil;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.*;
+import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.internal.provisional.spi.p2.core.repository.AbstractRepository;
+import org.eclipse.osgi.util.NLS;
 
 public abstract class AbstractArtifactRepository extends AbstractRepository implements IArtifactRepository {
 
@@ -37,9 +40,9 @@ public abstract class AbstractArtifactRepository extends AbstractRepository impl
 
 	public abstract IStatus getArtifacts(IArtifactRequest[] requests, IProgressMonitor monitor);
 
-	public OutputStream getOutputStream(IArtifactDescriptor descriptor) {
+	public OutputStream getOutputStream(IArtifactDescriptor descriptor) throws ProvisionException {
 		if (!isModifiable())
-			throw new UnsupportedOperationException("Repository not modifiable");
+			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, NLS.bind(Messages.repoReadOnly, getLocation().toExternalForm())));
 		return null;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/ProvisionException.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/ProvisionException.java
index be59b0d..fcdd274 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/ProvisionException.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/ProvisionException.java
@@ -23,14 +23,14 @@ import org.eclipse.equinox.internal.p2.core.Activator;
 public class ProvisionException extends CoreException {
 	private static final long serialVersionUID = 1L;
 
-	//Core status codes [0-100]
+	//General and core status codes [0-1000]
 	/**
 	 * Status code constant (value 1) for an uncategorized error.
 	 */
 	public static final int INTERNAL_ERROR = 1;
 
 	//Repository status codes [1000-1999]
-
+	//General repository codes [1000-1099]
 	/** 
 	 * Status code constant (value 1000) indicating a repository
 	 * unexpectedly does not exist.
@@ -67,6 +67,22 @@ public class ProvisionException extends CoreException {
 	 */
 	public static final int REPOSITORY_UNKNOWN_TYPE = 1005;
 
+	//Metadata repository codes [1100-1199]
+
+	//Artifact repository codes [1200-1299]
+
+	/** 
+	 * Status code constant (value 1200) indicating an artifact unexpectedly
+	 * does not exist.
+	 */
+	public static final int ARTIFACT_NOT_FOUND = 1200;
+
+	/** 
+	 * Status code constant (value 1201) indicating an artifact unexpectedly
+	 * already exists.
+	 */
+	public static final int ARTIFACT_EXISTS = 1201;
+
 	/**
 	 * Creates a new exception with the given status object.  The message
 	 * of the given status is used as the exception message.
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
index 5327505..5029e61 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
@@ -20,6 +20,7 @@ import org.eclipse.equinox.internal.p2.metadata.generator.features.*;
 import org.eclipse.equinox.internal.provisional.frameworkadmin.*;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactDescriptor;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepository;
+import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
 import org.eclipse.equinox.internal.provisional.p2.metadata.*;
 import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory.InstallableUnitDescription;
@@ -794,15 +795,13 @@ public class Generator {
 		if (asIs && files.length == 1) {
 			try {
 				if (!destination.contains(descriptor)) {
-					OutputStream output = destination.getOutputStream(descriptor);
-					if (output == null)
-						throw new IOException(NLS.bind(Messages.exception_outputStream, descriptor));
-					FileUtils.copyStream(new BufferedInputStream(new FileInputStream(files[0])), true, new BufferedOutputStream(output), true);
+					OutputStream output = new BufferedOutputStream(destination.getOutputStream(descriptor));
+					FileUtils.copyStream(new BufferedInputStream(new FileInputStream(files[0])), true, output, true);
 				}
-			} catch (FileNotFoundException e) {
-				e.printStackTrace();
+			} catch (ProvisionException e) {
+				LogHelper.log(e.getStatus());
 			} catch (IOException e) {
-				e.printStackTrace();
+				LogHelper.log(new Status(IStatus.ERROR, Activator.ID, "Error publishing artifacts", e)); //$NON-NLS-1$
 			}
 		} else {
 			File tempFile = null;
@@ -810,14 +809,13 @@ public class Generator {
 				tempFile = File.createTempFile("p2.generator", ""); //$NON-NLS-1$ //$NON-NLS-2$
 				FileUtils.zip(files, tempFile);
 				if (!destination.contains(descriptor)) {
-					OutputStream output = destination.getOutputStream(descriptor);
-					if (output == null)
-						throw new IOException(NLS.bind(Messages.exception_outputStream, descriptor));
-					FileUtils.copyStream(new BufferedInputStream(new FileInputStream(tempFile)), true, new BufferedOutputStream(output), true);
+					OutputStream output = new BufferedOutputStream(destination.getOutputStream(descriptor));
+					FileUtils.copyStream(new BufferedInputStream(new FileInputStream(tempFile)), true, output, true);
 				}
+			} catch (ProvisionException e) {
+				LogHelper.log(e.getStatus());
 			} catch (IOException e) {
-				// TODO Auto-generated catch block
-				e.printStackTrace();
+				LogHelper.log(new Status(IStatus.ERROR, Activator.ID, "Error publishing artifacts", e)); //$NON-NLS-1$
 			} finally {
 				if (tempFile != null)
 					tempFile.delete();
diff --git a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepository.java b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepository.java
index 3f1a974..4cf3a55 100644
--- a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepository.java
+++ b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/artifact/UpdateSiteArtifactRepository.java
@@ -240,7 +240,7 @@ public class UpdateSiteArtifactRepository extends AbstractRepository implements
 		return artifactRepository.getArtifacts(requests, monitor);
 	}
 
-	public OutputStream getOutputStream(IArtifactDescriptor descriptor) {
+	public OutputStream getOutputStream(IArtifactDescriptor descriptor) throws ProvisionException {
 		return artifactRepository.getOutputStream(descriptor);
 	}
 

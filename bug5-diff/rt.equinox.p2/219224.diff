commit 0bd943e913f14878005da37d18c1ee2d38f4ffb5
Author: Simon Kaegi <skaegi>
Date:   Tue Feb 19 22:30:43 2008 +0000

    Bug 219224 [prov] Sizing phase commits the profile
    First step

23	20	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/Profile.java
2	2	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileWriter.java
3	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Engine.java
1	2	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/IProfile.java
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/Profile.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/Profile.java
index 89cb90e..f20cdc3 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/Profile.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/Profile.java
@@ -29,15 +29,13 @@ public class Profile implements IQueryable, IProfile {
 	 */
 	private List subProfileIds; // child profile ids
 
-	private static String[] noSubProfiles = new String[0];
+	private static final String[] noSubProfiles = new String[0];
 	/**
 	 * This storage is to be used by the touchpoints to store data.
 	 */
 	private OrderedProperties storage = new OrderedProperties();
 
-	/**
-	 * iuProperties are stored by the install registry
-	 */
+	private Set ius = new HashSet();
 	private Map iuProperties = new HashMap();
 	private boolean changed = false;
 
@@ -152,14 +150,14 @@ public class Profile implements IQueryable, IProfile {
 	 * @see org.eclipse.equinox.internal.provisional.p2.engine.IProfile#query(org.eclipse.equinox.internal.provisional.p2.query.Query, org.eclipse.equinox.internal.provisional.p2.query.Collector, org.eclipse.core.runtime.IProgressMonitor)
 	 */
 	public Collector query(Query query, Collector collector, IProgressMonitor monitor) {
-		return query.perform(iuProperties.keySet().iterator(), collector);
+		return query.perform(ius.iterator(), collector);
 	}
 
 	/* (non-Javadoc)
 	 * @see org.eclipse.equinox.internal.provisional.p2.engine.IProfile#getInstallableUnitProperty(org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit, java.lang.String)
 	 */
 	public String getInstallableUnitProperty(IInstallableUnit iu, String key) {
-		OrderedProperties properties = (OrderedProperties) iuProperties.get(iu);
+		OrderedProperties properties = (OrderedProperties) iuProperties.get(createIUKey(iu));
 		if (properties == null)
 			return null;
 
@@ -167,20 +165,19 @@ public class Profile implements IQueryable, IProfile {
 	}
 
 	public String setInstallableUnitProperty(IInstallableUnit iu, String key, String value) {
-		OrderedProperties properties = (OrderedProperties) iuProperties.get(iu);
+		String iuKey = createIUKey(iu);
+		OrderedProperties properties = (OrderedProperties) iuProperties.get(iuKey);
 		if (properties == null) {
 			properties = new OrderedProperties();
-			iuProperties.put(iu, properties);
+			iuProperties.put(iuKey, properties);
 		}
 
 		changed = true;
 		return (String) properties.setProperty(key, value);
-		// TODO this is not the ideal place for this.
-		// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=206077
-		// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=197701
-		//		ProvisioningEventBus bus = (ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), IProvisioningEventBus.SERVICE_NAME);
-		//		if (bus != null)
-		//			bus.publishEvent(new ProfileEvent(this, ProfileEvent.CHANGED));
+	}
+
+	private static String createIUKey(IInstallableUnit iu) {
+		return iu.getId() + "_" + iu.getVersion().toString(); //$NON-NLS-1$
 	}
 
 	/* (non-Javadoc)
@@ -212,23 +209,29 @@ public class Profile implements IQueryable, IProfile {
 	}
 
 	public void addInstallableUnit(IInstallableUnit iu) {
-		if (iuProperties.containsKey(iu))
+		if (ius.contains(iu))
 			return;
 
-		iuProperties.put(iu, new OrderedProperties());
+		ius.add(iu);
 		changed = true;
 	}
 
 	public void removeInstallableUnit(IInstallableUnit iu) {
-		if (iuProperties.remove(iu) != null)
+		if (ius.remove(iu) == true) {
+			iuProperties.remove(createIUKey(iu));
 			changed = true;
+		}
 	}
 
 	/* (non-Javadoc)
 	 * @see org.eclipse.equinox.internal.provisional.p2.engine.IProfile#getInstallableUnitProperties(org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit)
 	 */
-	public OrderedProperties getInstallableUnitProperties(IInstallableUnit iu) {
-		return (OrderedProperties) iuProperties.get(iu);
+	public Map getInstallableUnitProperties(IInstallableUnit iu) {
+		OrderedProperties properties = (OrderedProperties) iuProperties.get(createIUKey(iu));
+		if (properties == null)
+			properties = new OrderedProperties();
+
+		return OrderedProperties.unmodifiableProperties(properties);
 	}
 
 	public void clearLocalProperties() {
@@ -241,6 +244,7 @@ public class Profile implements IQueryable, IProfile {
 	}
 
 	public void clearInstallableUnits() {
+		ius.clear();
 		iuProperties.clear();
 		changed = true;
 	}
@@ -259,7 +263,6 @@ public class Profile implements IQueryable, IProfile {
 			}
 		}
 
-		Set ius = iuProperties.keySet();
 		for (Iterator it = ius.iterator(); it.hasNext();) {
 			IInstallableUnit iu = (IInstallableUnit) it.next();
 			snapshot.addInstallableUnit(iu);
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileWriter.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileWriter.java
index cd43042..c96f7bf 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileWriter.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileWriter.java
@@ -13,7 +13,7 @@ package org.eclipse.equinox.internal.p2.engine;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.util.Iterator;
-import org.eclipse.equinox.internal.p2.core.helpers.OrderedProperties;
+import java.util.Map;
 import org.eclipse.equinox.internal.p2.metadata.repository.io.MetadataWriter;
 import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
@@ -46,7 +46,7 @@ public class ProfileWriter extends MetadataWriter implements ProfileXMLConstants
 		attribute(COLLECTION_SIZE_ATTRIBUTE, size);
 		while (it.hasNext()) {
 			IInstallableUnit iu = (IInstallableUnit) it.next();
-			OrderedProperties properties = profile.getInstallableUnitProperties(iu);
+			Map properties = profile.getInstallableUnitProperties(iu);
 			if (properties.isEmpty())
 				continue;
 
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Engine.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Engine.java
index b090055..b560fc3 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Engine.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Engine.java
@@ -141,7 +141,9 @@ public class Engine implements IEngine {
 	private void snapshotIUProperties(IProfile profile, InstallableUnitOperand[] operands) {
 		for (int i = 0; i < operands.length; i++) {
 			if (operands[i].first() != null && operands[i].second() != null) {
-				snapshot.put(operands[i].first(), profile.getInstallableUnitProperties(operands[i].first()));
+				OrderedProperties properties = new OrderedProperties();
+				properties.putAll(profile.getInstallableUnitProperties(operands[i].first()));
+				snapshot.put(operands[i].first(), properties);
 			}
 		}
 	}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/IProfile.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/IProfile.java
index 784e555..e643a27 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/IProfile.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/IProfile.java
@@ -11,7 +11,6 @@
 package org.eclipse.equinox.internal.provisional.p2.engine;
 
 import java.util.Map;
-import org.eclipse.equinox.internal.p2.core.helpers.OrderedProperties;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.query.IQueryable;
 
@@ -108,6 +107,6 @@ public interface IProfile extends IQueryable {
 
 	public Map getProperties();
 
-	public OrderedProperties getInstallableUnitProperties(IInstallableUnit iu);
+	public Map getInstallableUnitProperties(IInstallableUnit iu);
 
 }
\ No newline at end of file
commit 8418804c60f740ee92271325cadb24d5087a9da1
Author: Simon Kaegi <skaegi>
Date:   Wed Feb 20 21:42:41 2008 +0000

    Bug 219224 [prov] Sizing phase commits the profile

2	2	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/InstructionParser.java
26	4	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/Profile.java
2	2	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/BeginOperationEvent.java
2	2	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/CommitOperationEvent.java
1	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/DefaultPhaseSet.java
15	105	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Engine.java
3	3	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/EngineSession.java
199	0	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/InstallableUnitPhase.java
16	122	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Phase.java
6	6	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/PhaseSet.java
2	2	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/RollbackOperationEvent.java
3	9	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/TransactionEvent.java
3	3	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Collect.java
2	2	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Configure.java
1	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Install.java
115	0	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Property.java
3	3	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Sizing.java
3	3	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Unconfigure.java
1	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Uninstall.java
14	23	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/PhaseTest.java
1	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/TouchpointTest.java
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/InstructionParser.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/InstructionParser.java
index 3eff62f..1b51d42 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/InstructionParser.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/InstructionParser.java
@@ -16,10 +16,10 @@ import org.eclipse.equinox.internal.provisional.p2.engine.*;
 
 public class InstructionParser {
 
-	Phase phase;
+	InstallableUnitPhase phase;
 	Touchpoint touchpoint;
 
-	public InstructionParser(Phase phase, Touchpoint touchpoint) {
+	public InstructionParser(InstallableUnitPhase phase, Touchpoint touchpoint) {
 		Assert.isNotNull(phase);
 		Assert.isNotNull(touchpoint);
 		this.phase = phase;
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/Profile.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/Profile.java
index f20cdc3..25ca9b9 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/Profile.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/Profile.java
@@ -146,6 +146,11 @@ public class Profile implements IQueryable, IProfile {
 		changed = true;
 	}
 
+	public void removeProperty(String key) {
+		storage.remove(key);
+		changed = true;
+	}
+
 	/* (non-Javadoc)
 	 * @see org.eclipse.equinox.internal.provisional.p2.engine.IProfile#query(org.eclipse.equinox.internal.provisional.p2.query.Query, org.eclipse.equinox.internal.provisional.p2.query.Collector, org.eclipse.core.runtime.IProgressMonitor)
 	 */
@@ -176,6 +181,20 @@ public class Profile implements IQueryable, IProfile {
 		return (String) properties.setProperty(key, value);
 	}
 
+	public String removeInstallableUnitProperty(IInstallableUnit iu, String key) {
+		String iuKey = createIUKey(iu);
+		OrderedProperties properties = (OrderedProperties) iuProperties.get(iuKey);
+		if (properties == null)
+			return null;
+
+		String oldValue = (String) properties.remove(key);
+		if (properties.isEmpty())
+			iuProperties.remove(iuKey);
+
+		changed = true;
+		return oldValue;
+	}
+
 	private static String createIUKey(IInstallableUnit iu) {
 		return iu.getId() + "_" + iu.getVersion().toString(); //$NON-NLS-1$
 	}
@@ -217,10 +236,8 @@ public class Profile implements IQueryable, IProfile {
 	}
 
 	public void removeInstallableUnit(IInstallableUnit iu) {
-		if (ius.remove(iu) == true) {
-			iuProperties.remove(createIUKey(iu));
-			changed = true;
-		}
+		ius.remove(iu);
+		changed = true;
 	}
 
 	/* (non-Javadoc)
@@ -282,4 +299,9 @@ public class Profile implements IQueryable, IProfile {
 		}
 	}
 
+	public void clearInstallableUnitProperties(IInstallableUnit iu) {
+		iuProperties.remove(createIUKey(iu));
+		changed = true;
+	}
+
 }
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/BeginOperationEvent.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/BeginOperationEvent.java
index e92aefb..d9de82c 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/BeginOperationEvent.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/BeginOperationEvent.java
@@ -14,7 +14,7 @@ public class BeginOperationEvent extends TransactionEvent {
 
 	private static final long serialVersionUID = 6389318375739324865L;
 
-	public BeginOperationEvent(IProfile profile, PhaseSet phaseSet, InstallableUnitOperand[] deltas, IEngine engine) {
-		super(profile, phaseSet, deltas, engine);
+	public BeginOperationEvent(IProfile profile, PhaseSet phaseSet, Operand[] operands, IEngine engine) {
+		super(profile, phaseSet, operands, engine);
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/CommitOperationEvent.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/CommitOperationEvent.java
index 2726f9c..00f89a1 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/CommitOperationEvent.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/CommitOperationEvent.java
@@ -13,8 +13,8 @@ package org.eclipse.equinox.internal.provisional.p2.engine;
 public class CommitOperationEvent extends TransactionEvent {
 	private static final long serialVersionUID = -523967775426133720L;
 
-	public CommitOperationEvent(IProfile profile, PhaseSet phaseSet, InstallableUnitOperand[] deltas, IEngine engine) {
-		super(profile, phaseSet, deltas, engine);
+	public CommitOperationEvent(IProfile profile, PhaseSet phaseSet, Operand[] operands, IEngine engine) {
+		super(profile, phaseSet, operands, engine);
 	}
 
 }
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/DefaultPhaseSet.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/DefaultPhaseSet.java
index 5331377..18bb62d 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/DefaultPhaseSet.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/DefaultPhaseSet.java
@@ -15,7 +15,7 @@ import org.eclipse.equinox.internal.provisional.p2.engine.phases.*;
 public class DefaultPhaseSet extends PhaseSet {
 
 	public DefaultPhaseSet() {
-		super(new Phase[] {new Collect(100), new Unconfigure(10), new Uninstall(50), new Install(50), new Configure(10)});
+		super(new Phase[] {new Collect(100), new Unconfigure(10), new Uninstall(50), new Property(1), new Install(50), new Configure(10)});
 	}
 
 }
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Engine.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Engine.java
index b560fc3..adde93d 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Engine.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Engine.java
@@ -10,9 +10,9 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.provisional.p2.engine;
 
-import java.util.*;
+import java.util.ArrayList;
+import java.util.List;
 import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.internal.p2.core.helpers.OrderedProperties;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.engine.*;
 import org.eclipse.equinox.internal.provisional.p2.core.eventbus.IProvisioningEventBus;
@@ -26,29 +26,7 @@ public class Engine implements IEngine {
 		this.eventBus = eventBus;
 	}
 
-	public IStatus perform(IProfile profile, PhaseSet phaseSet, Operand[] operands, ProvisioningContext context, IProgressMonitor monitor) {
-		if (operands == null)
-			throw new IllegalArgumentException("Operands must not be null."); //$NON-NLS-1$
-
-		List iuOperands = new ArrayList();
-		List propertyOperands = new ArrayList();
-		for (int i = 0; i < operands.length; i++) {
-			Operand operand = operands[i];
-			if (operand instanceof InstallableUnitOperand) {
-				iuOperands.add(operand);
-			} else if (operand instanceof PropertyOperand) {
-				propertyOperands.add(operand);
-			}
-		}
-
-		InstallableUnitOperand[] iuOperandArray = (InstallableUnitOperand[]) iuOperands.toArray(new InstallableUnitOperand[0]);
-		PropertyOperand[] propertyOperandArray = (PropertyOperand[]) propertyOperands.toArray(new PropertyOperand[0]);
-		if (context == null)
-			context = new ProvisioningContext();
-		return perform(profile, phaseSet, iuOperandArray, propertyOperandArray, context, monitor);
-	}
-
-	private IStatus perform(IProfile iprofile, PhaseSet phaseSet, InstallableUnitOperand[] iuOperands, PropertyOperand[] propertyOperands, ProvisioningContext context, IProgressMonitor monitor) {
+	public IStatus perform(IProfile iprofile, PhaseSet phaseSet, Operand[] operands, ProvisioningContext context, IProgressMonitor monitor) {
 
 		// TODO -- Messages
 		if (iprofile == null)
@@ -57,37 +35,35 @@ public class Engine implements IEngine {
 		if (phaseSet == null)
 			throw new IllegalArgumentException("PhaseSet must not be null."); //$NON-NLS-1$
 
-		if (iuOperands == null)
+		if (operands == null)
 			throw new IllegalArgumentException("Operands must not be null."); //$NON-NLS-1$
 
+		if (context == null)
+			context = new ProvisioningContext();
+
 		if (monitor == null)
 			monitor = new NullProgressMonitor();
 
 		Profile profile = (Profile) iprofile;
 		lockProfile(profile);
+		// TODO we should check that the profile that the profile is up to date
+		SimpleProfileRegistry profileRegistry = (SimpleProfileRegistry) ServiceHelper.getService(EngineActivator.getContext(), IProfileRegistry.class.getName());
+		if (profileRegistry.getProfile(profile.getProfileId()) == null)
+			throw new IllegalArgumentException("Profile is not registered."); //$NON-NLS-1$
 		try {
-			// TODO we should check that the profile that the profile is up to date
-			SimpleProfileRegistry profileRegistry = (SimpleProfileRegistry) ServiceHelper.getService(EngineActivator.getContext(), IProfileRegistry.class.getName());
-			if (profileRegistry.getProfile(profile.getProfileId()) == null)
-				throw new IllegalArgumentException("Profile is not registered."); //$NON-NLS-1$
-
-			eventBus.publishEvent(new BeginOperationEvent(profile, phaseSet, iuOperands, this));
+			eventBus.publishEvent(new BeginOperationEvent(profile, phaseSet, operands, this));
 
 			EngineSession session = new EngineSession(profile, context);
 
-			synchronizeProfileProperties(profile, propertyOperands);
-
-			snapshotIUProperties(profile, iuOperands);
-			MultiStatus result = phaseSet.perform(session, profile, iuOperands, context, monitor);
+			MultiStatus result = phaseSet.perform(session, profile, operands, context, monitor);
 			if (result.isOK()) {
 				if (profile.isChanged()) {
-					moveIUProperties(profile, iuOperands);
 					profileRegistry.updateProfile(profile);
 				}
-				eventBus.publishEvent(new CommitOperationEvent(profile, phaseSet, iuOperands, this));
+				eventBus.publishEvent(new CommitOperationEvent(profile, phaseSet, operands, this));
 				session.commit();
 			} else if (result.matches(IStatus.ERROR | IStatus.CANCEL)) {
-				eventBus.publishEvent(new RollbackOperationEvent(profile, phaseSet, iuOperands, this, result));
+				eventBus.publishEvent(new RollbackOperationEvent(profile, phaseSet, operands, this, result));
 				session.rollback();
 			}
 			//if there is only one child status, return that status instead because it will have more context
@@ -98,72 +74,6 @@ public class Engine implements IEngine {
 		}
 	}
 
-	private void synchronizeProfileProperties(Profile profile, PropertyOperand[] propertyOperands) {
-		if (propertyOperands == null)
-			return;
-
-		for (int i = 0; i < propertyOperands.length; i++) {
-			PropertyOperand propertyOperand = propertyOperands[i];
-			if (propertyOperand.first() != null) {
-				removeProfileProperty(profile, propertyOperand);
-			}
-
-			if (propertyOperand.second() != null) {
-				addProfileProperty(profile, propertyOperand);
-			}
-		}
-	}
-
-	private void addProfileProperty(Profile profile, PropertyOperand propertyOperand) {
-
-		if (propertyOperand instanceof InstallableUnitPropertyOperand) {
-			InstallableUnitPropertyOperand iuPropertyOperand = (InstallableUnitPropertyOperand) propertyOperand;
-			profile.setInstallableUnitProperty(iuPropertyOperand.getInstallableUnit(), iuPropertyOperand.getKey(), (String) iuPropertyOperand.second());
-		} else {
-			profile.setProperty(propertyOperand.getKey(), (String) propertyOperand.second());
-		}
-
-	}
-
-	private void removeProfileProperty(Profile profile, PropertyOperand propertyOperand) {
-		if (propertyOperand instanceof InstallableUnitPropertyOperand) {
-			InstallableUnitPropertyOperand iuPropertyOperand = (InstallableUnitPropertyOperand) propertyOperand;
-			profile.setInstallableUnitProperty(iuPropertyOperand.getInstallableUnit(), iuPropertyOperand.getKey(), null);
-		} else {
-			profile.setProperty(propertyOperand.getKey(), null);
-		}
-	}
-
-	//Support to move the IU properties as part of the engine. This is not really clean. We will have to review this.
-	//This has to be done in two calls because when we return from the phaseSet.perform the iu properties are already lost
-	Map snapshot = new HashMap();
-
-	private void snapshotIUProperties(IProfile profile, InstallableUnitOperand[] operands) {
-		for (int i = 0; i < operands.length; i++) {
-			if (operands[i].first() != null && operands[i].second() != null) {
-				OrderedProperties properties = new OrderedProperties();
-				properties.putAll(profile.getInstallableUnitProperties(operands[i].first()));
-				snapshot.put(operands[i].first(), properties);
-			}
-		}
-	}
-
-	private void moveIUProperties(Profile profile, InstallableUnitOperand[] operands) {
-		for (int i = 0; i < operands.length; i++) {
-			if (operands[i].first() != null && operands[i].second() != null) {
-				OrderedProperties prop = (OrderedProperties) snapshot.get(operands[i].first());
-				if (prop == null)
-					continue;
-				Enumeration enumProps = prop.keys();
-				while (enumProps.hasMoreElements()) {
-					String key = (String) enumProps.nextElement();
-					profile.setInstallableUnitProperty(operands[i].second(), key, (String) prop.get(key));
-					prop.remove(key);
-				}
-			}
-		}
-	}
-
 	private synchronized void unlockProfile(IProfile profile) {
 		lockedProfiles.remove(profile.getProfileId());
 		notify();
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/EngineSession.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/EngineSession.java
index 31951aa..24a667c 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/EngineSession.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/EngineSession.java
@@ -17,10 +17,10 @@ import org.eclipse.equinox.internal.p2.engine.EngineActivator;
 public class EngineSession {
 
 	private static class ActionsRecord {
-		InstallableUnitOperand operand;
+		Operand operand;
 		List actions = new ArrayList();
 
-		ActionsRecord(InstallableUnitOperand operand) {
+		ActionsRecord(Operand operand) {
 			this.operand = operand;
 		}
 	}
@@ -102,7 +102,7 @@ public class EngineSession {
 		currentRecord = null;
 	}
 
-	void recordAction(ProvisioningAction action, InstallableUnitOperand operand) {
+	void recordAction(ProvisioningAction action, Operand operand) {
 		if (action == null || operand == null)
 			throw new IllegalArgumentException("Action and InstallableUnitOperand must not be null."); //$NON-NLS-1$
 
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/InstallableUnitPhase.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/InstallableUnitPhase.java
new file mode 100644
index 0000000..f43e5fe
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/InstallableUnitPhase.java
@@ -0,0 +1,199 @@
+package org.eclipse.equinox.internal.provisional.p2.engine;
+
+import java.util.*;
+import java.util.Map.Entry;
+import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.internal.p2.engine.*;
+import org.eclipse.equinox.internal.provisional.p2.metadata.*;
+import org.eclipse.osgi.util.NLS;
+
+public abstract class InstallableUnitPhase extends Phase {
+
+	protected static final String PARM_ARTIFACT_REQUESTS = "artifactRequests"; //$NON-NLS-1$
+	protected static final String PARM_ARTIFACT = "artifact"; //$NON-NLS-1$
+	protected static final String PARM_IU = "iu"; //$NON-NLS-1$
+	protected static final String PARM_TOUCHPOINT = "touchpoint"; //$NON-NLS-1$
+
+	private Map touchpointToTouchpointParameters;
+
+	protected InstallableUnitPhase(String phaseId, int weight) {
+		super(phaseId, weight);
+	}
+
+	void perform(MultiStatus status, EngineSession session, IProfile profile, Operand[] operands, ProvisioningContext context, IProgressMonitor monitor) {
+		touchpointToTouchpointParameters = new HashMap();
+		for (int i = 0; i < operands.length; i++) {
+			if (!(operands[i] instanceof InstallableUnitOperand))
+				continue;
+
+			InstallableUnitOperand iuOperand = (InstallableUnitOperand) operands[i];
+			TouchpointType type = getTouchpointType(iuOperand);
+			Touchpoint touchpoint = TouchpointManager.getInstance().getTouchpoint(type);
+			//abort the entire phase if any required touchpoint is missing
+			if (touchpoint == null) {
+				status.add(new Status(IStatus.ERROR, EngineActivator.ID, NLS.bind(Messages.TouchpointManager_Required_Touchpoint_Not_Found, type), null));
+				return;
+			}
+			if (!touchpointToTouchpointParameters.containsKey(touchpoint)) {
+				touchpointToTouchpointParameters.put(touchpoint, null);
+			}
+		}
+		super.perform(status, session, profile, operands, context, monitor);
+	}
+
+	protected IStatus initializePhase(IProgressMonitor monitor, IProfile profile, Map parameters) {
+		MultiStatus status = new MultiStatus(EngineActivator.ID, IStatus.OK, null, null);
+		mergeStatus(status, initializeInstallableUnitPhase(monitor, profile, parameters));
+		for (Iterator it = touchpointToTouchpointParameters.entrySet().iterator(); it.hasNext();) {
+			Entry entry = (Entry) it.next();
+			Touchpoint touchpoint = (Touchpoint) entry.getKey();
+			Map touchpointParameters = new HashMap(parameters);
+			touchpointParameters.put(PARM_TOUCHPOINT, touchpoint);
+			mergeStatus(status, touchpoint.initializePhase(monitor, profile, phaseId, touchpointParameters));
+			entry.setValue(touchpointParameters);
+		}
+		return status;
+	}
+
+	protected IStatus completePhase(IProgressMonitor monitor, IProfile profile, Map parameters) {
+		MultiStatus status = new MultiStatus(EngineActivator.ID, IStatus.OK, null, null);
+		for (Iterator it = touchpointToTouchpointParameters.entrySet().iterator(); it.hasNext();) {
+			Entry entry = (Entry) it.next();
+			Touchpoint touchpoint = (Touchpoint) entry.getKey();
+			Map touchpointParameters = (Map) entry.getValue();
+			mergeStatus(status, touchpoint.completePhase(monitor, profile, phaseId, touchpointParameters));
+			entry.setValue(null);
+		}
+		mergeStatus(status, completeInstallableUnitPhase(monitor, profile, parameters));
+		return status;
+	}
+
+	protected IStatus initializeOperand(IProfile profile, Operand operand, Map parameters, IProgressMonitor monitor) {
+		if (!(operand instanceof InstallableUnitOperand))
+			return null;
+
+		InstallableUnitOperand iuOperand = (InstallableUnitOperand) operand;
+
+		MultiStatus status = new MultiStatus(EngineActivator.ID, IStatus.OK, null, null);
+		mergeStatus(status, initializeOperand(profile, iuOperand, parameters, monitor));
+		Touchpoint touchpoint = getTouchpoint(iuOperand);
+		Map touchpointParameters = (Map) touchpointToTouchpointParameters.get(touchpoint);
+		if (touchpointParameters != null)
+			parameters.putAll(touchpointParameters);
+		mergeStatus(status, touchpoint.initializeOperand(profile, phaseId, iuOperand, parameters));
+		return status;
+	}
+
+	protected IStatus completeOperand(IProfile profile, Operand operand, Map parameters, IProgressMonitor monitor) {
+		if (!(operand instanceof InstallableUnitOperand))
+			return null;
+
+		InstallableUnitOperand iuOperand = (InstallableUnitOperand) operand;
+
+		MultiStatus status = new MultiStatus(EngineActivator.ID, IStatus.OK, null, null);
+		Touchpoint touchpoint = getTouchpoint(iuOperand);
+		mergeStatus(status, touchpoint.completeOperand(profile, phaseId, iuOperand, parameters));
+		mergeStatus(status, completeOperand(profile, iuOperand, parameters, monitor));
+		return status;
+	}
+
+	protected ProvisioningAction[] getActions(Operand operand) {
+		if (!(operand instanceof InstallableUnitOperand))
+			return null;
+
+		InstallableUnitOperand iuOperand = (InstallableUnitOperand) operand;
+		return getActions(iuOperand);
+	}
+
+	protected boolean isApplicable(Operand operand) {
+		if (!(operand instanceof InstallableUnitOperand))
+			return false;
+
+		InstallableUnitOperand iuOperand = (InstallableUnitOperand) operand;
+		return isApplicable(iuOperand);
+	}
+
+	/**
+	 * Returns the touchpoint corresponding to the operand, or null if no corresponding
+	 * touchpoint is available.
+	 */
+	protected final static Touchpoint getTouchpoint(InstallableUnitOperand operand) {
+		return TouchpointManager.getInstance().getTouchpoint(getTouchpointType(operand));
+	}
+
+	private static Touchpoint getTouchpoint(IInstallableUnit unit) {
+		return TouchpointManager.getInstance().getTouchpoint(unit.getTouchpointType());
+	}
+
+	/**
+	 * Returns the touchpoint type corresponding to the operand. Never returns null.
+	 */
+	protected final static TouchpointType getTouchpointType(InstallableUnitOperand operand) {
+		IInstallableUnit unit = operand.second();
+		if (unit == null)
+			unit = operand.first();
+		return unit.getTouchpointType();
+	}
+
+	protected final ProvisioningAction[] getActions(IInstallableUnit unit, String key) {
+		String[] instructions = getInstructions(unit, key);
+		if (instructions == null || instructions.length == 0)
+			return null;
+		Touchpoint touchpoint = getTouchpoint(unit);
+		//TODO Likely need to propagate an exception if the touchpoint is not present
+		if (touchpoint == null)
+			return null;
+		InstructionParser parser = new InstructionParser(this, touchpoint);
+		List actions = new ArrayList();
+		for (int i = 0; i < instructions.length; i++) {
+			actions.addAll(Arrays.asList(parser.parseActions(instructions[i])));
+		}
+		return (ProvisioningAction[]) actions.toArray(new ProvisioningAction[actions.size()]);
+	}
+
+	private final static String[] getInstructions(IInstallableUnit unit, String key) {
+		TouchpointData[] data = unit.getTouchpointData();
+		if (data == null)
+			return null;
+
+		String[] matches = new String[data.length];
+		int count = 0;
+		for (int i = 0; i < data.length; i++) {
+			matches[count] = data[i].getInstructions(key);
+			if (matches[count] != null)
+				count++;
+		}
+		if (count == data.length)
+			return matches;
+		String[] result = new String[count];
+		System.arraycopy(matches, 0, result, 0, count);
+		return result;
+	}
+
+	public ProvisioningAction getAction(String actionId) {
+		return null;
+	}
+
+	protected abstract ProvisioningAction[] getActions(InstallableUnitOperand operand);
+
+	protected boolean isApplicable(InstallableUnitOperand operand) {
+		return true;
+	}
+
+	protected IStatus initializeInstallableUnitPhase(IProgressMonitor monitor, IProfile profile, Map parameters) {
+		return Status.OK_STATUS;
+	}
+
+	protected IStatus completeInstallableUnitPhase(IProgressMonitor monitor, IProfile profile, Map parameters) {
+		return Status.OK_STATUS;
+	}
+
+	protected IStatus initializeOperand(IProfile profile, InstallableUnitOperand operand, Map parameters, IProgressMonitor monitor) {
+		return Status.OK_STATUS;
+	}
+
+	protected IStatus completeOperand(IProfile profile, InstallableUnitOperand operand, Map parameters, IProgressMonitor monitor) {
+		return Status.OK_STATUS;
+	}
+
+}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Phase.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Phase.java
index a6c80d7..88cb245 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Phase.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Phase.java
@@ -11,20 +11,14 @@
 package org.eclipse.equinox.internal.provisional.p2.engine;
 
 import java.util.*;
-import java.util.Map.Entry;
 import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.internal.p2.engine.*;
-import org.eclipse.equinox.internal.provisional.p2.metadata.*;
-import org.eclipse.osgi.util.NLS;
+import org.eclipse.equinox.internal.p2.engine.EngineActivator;
+import org.eclipse.equinox.internal.p2.engine.Messages;
 
 public abstract class Phase {
 	protected static final String PARM_OPERAND = "operand"; //$NON-NLS-1$
-	protected static final String PARM_TOUCHPOINT = "touchpoint"; //$NON-NLS-1$
 	protected static final String PARM_PHASE_ID = "phaseId"; //$NON-NLS-1$
 	protected static final String PARM_PROFILE = "profile"; //$NON-NLS-1$
-	protected static final String PARM_ARTIFACT_REQUESTS = "artifactRequests"; //$NON-NLS-1$
-	protected static final String PARM_ARTIFACT = "artifact"; //$NON-NLS-1$
-	protected static final String PARM_IU = "iu"; //$NON-NLS-1$
 	protected static final String PARM_CONTEXT = "context"; //$NON-NLS-1$
 
 	protected final String phaseId;
@@ -33,7 +27,6 @@ public abstract class Phase {
 	protected int mainPerformWork = 10000;
 	protected int postPerformWork = 1000;
 	private Map phaseParameters;
-	private Map touchpointToTouchpointParameters;
 
 	protected Phase(String phaseId, int weight) {
 		if (phaseId == null || phaseId.length() == 0)
@@ -48,7 +41,7 @@ public abstract class Phase {
 		return getClass().getName() + " - " + this.weight; //$NON-NLS-1$
 	}
 
-	public final MultiStatus perform(EngineSession session, IProfile profile, InstallableUnitOperand[] operands, ProvisioningContext context, IProgressMonitor monitor) {
+	public final MultiStatus perform(EngineSession session, IProfile profile, Operand[] operands, ProvisioningContext context, IProgressMonitor monitor) {
 		MultiStatus status = new MultiStatus(EngineActivator.ID, IStatus.OK, null, null);
 		perform(status, session, profile, operands, context, monitor);
 		if (status.matches(IStatus.CANCEL)) {
@@ -63,21 +56,7 @@ public abstract class Phase {
 		return status;
 	}
 
-	void perform(MultiStatus status, EngineSession session, IProfile profile, InstallableUnitOperand[] operands, ProvisioningContext context, IProgressMonitor monitor) {
-		touchpointToTouchpointParameters = new HashMap();
-		for (int i = 0; i < operands.length; i++) {
-			TouchpointType type = getTouchpointType(operands[i]);
-			Touchpoint touchpoint = TouchpointManager.getInstance().getTouchpoint(type);
-			//abort the entire phase if any required touchpoint is missing
-			if (touchpoint == null) {
-				status.add(new Status(IStatus.ERROR, EngineActivator.ID, NLS.bind(Messages.TouchpointManager_Required_Touchpoint_Not_Found, type), null));
-				return;
-			}
-			if (!touchpointToTouchpointParameters.containsKey(touchpoint)) {
-				touchpointToTouchpointParameters.put(touchpoint, null);
-			}
-		}
-
+	void perform(MultiStatus status, EngineSession session, IProfile profile, Operand[] operands, ProvisioningContext context, IProgressMonitor monitor) {
 		SubMonitor subMonitor = SubMonitor.convert(monitor, prePerformWork + mainPerformWork + postPerformWork);
 		prePerform(status, profile, context, subMonitor.newChild(prePerformWork));
 		if (status.matches(IStatus.ERROR | IStatus.CANCEL))
@@ -105,24 +84,15 @@ public abstract class Phase {
 		phaseParameters.put(PARM_PHASE_ID, phaseId);
 
 		mergeStatus(status, initializePhase(monitor, profile, phaseParameters));
-
-		for (Iterator it = touchpointToTouchpointParameters.entrySet().iterator(); it.hasNext();) {
-			Entry entry = (Entry) it.next();
-			Touchpoint touchpoint = (Touchpoint) entry.getKey();
-			Map touchpointParameters = new HashMap(phaseParameters);
-			touchpointParameters.put(PARM_TOUCHPOINT, touchpoint);
-			mergeStatus(status, touchpoint.initializePhase(monitor, profile, phaseId, touchpointParameters));
-			entry.setValue(touchpointParameters);
-		}
 	}
 
-	private void mainPerform(MultiStatus status, EngineSession session, IProfile profile, InstallableUnitOperand[] operands, ProvisioningContext context, SubMonitor subMonitor) {
+	private void mainPerform(MultiStatus status, EngineSession session, IProfile profile, Operand[] operands, ProvisioningContext context, SubMonitor subMonitor) {
 		subMonitor.beginTask("", operands.length); //$NON-NLS-1$
 		for (int i = 0; i < operands.length; i++) {
 			subMonitor.setWorkRemaining(operands.length - i);
 			if (subMonitor.isCanceled())
 				throw new OperationCanceledException();
-			InstallableUnitOperand operand = operands[i];
+			Operand operand = operands[i];
 			if (!isApplicable(operand))
 				continue;
 
@@ -135,12 +105,9 @@ public abstract class Phase {
 				return;
 			}
 
-			Touchpoint touchpoint = getTouchpoint(operand);
-			Map parameters = (touchpoint != null) ? new HashMap((Map) touchpointToTouchpointParameters.get(touchpoint)) : new HashMap(phaseParameters);
+			Map parameters = new HashMap(phaseParameters);
 			parameters.put(PARM_OPERAND, operand);
 			mergeStatus(status, initializeOperand(profile, operand, parameters, subMonitor));
-			if (touchpoint != null)
-				mergeStatus(status, touchpoint.initializeOperand(profile, phaseId, operand, parameters));
 			parameters = Collections.unmodifiableMap(parameters);
 			if (actions != null) {
 				for (int j = 0; j < actions.length; j++) {
@@ -151,9 +118,7 @@ public abstract class Phase {
 						return;
 				}
 			}
-			if (touchpoint != null)
-				mergeStatus(status, touchpoint.completeOperand(profile, phaseId, operand, parameters));
-			mergeStatus(status, completeOperand(operand, parameters));
+			mergeStatus(status, completeOperand(profile, operand, parameters, subMonitor));
 			subMonitor.worked(1);
 		}
 	}
@@ -161,57 +126,30 @@ public abstract class Phase {
 	/**
 	 * Merges a given IStatus into a MultiStatus
 	 */
-	private void mergeStatus(MultiStatus multi, IStatus status) {
+	protected static void mergeStatus(MultiStatus multi, IStatus status) {
 		if (status != null && !status.isOK())
 			multi.add(status);
 	}
 
 	void postPerform(MultiStatus status, IProfile profile, ProvisioningContext context, IProgressMonitor monitor) {
-		for (Iterator it = touchpointToTouchpointParameters.entrySet().iterator(); it.hasNext();) {
-			Entry entry = (Entry) it.next();
-			Touchpoint touchpoint = (Touchpoint) entry.getKey();
-			Map touchpointParameters = (Map) entry.getValue();
-			mergeStatus(status, touchpoint.completePhase(monitor, profile, phaseId, touchpointParameters));
-			entry.setValue(null);
-		}
 		mergeStatus(status, completePhase(monitor, profile, phaseParameters));
 		phaseParameters = null;
 	}
 
-	void undo(MultiStatus status, EngineSession session, IProfile profile, InstallableUnitOperand operand, ProvisioningAction[] actions, ProvisioningContext context) {
-		Touchpoint touchpoint = getTouchpoint(operand);
-		Map touchpointParameters = (Map) touchpointToTouchpointParameters.get(touchpoint);
-		Map parameters = new HashMap(touchpointParameters);
+	void undo(MultiStatus status, EngineSession session, IProfile profile, Operand operand, ProvisioningAction[] actions, ProvisioningContext context) {
+		Map parameters = new HashMap(phaseParameters);
 		parameters.put(PARM_OPERAND, operand);
 		mergeStatus(status, initializeOperand(profile, operand, parameters, new NullProgressMonitor()));
-		mergeStatus(status, touchpoint.initializeOperand(profile, phaseId, operand, parameters));
 		parameters = Collections.unmodifiableMap(parameters);
 		for (int j = 0; j < actions.length; j++) {
 			ProvisioningAction action = actions[j];
 			mergeStatus(status, action.undo(parameters));
 			// TODO: session.removeAction(...)
 		}
-		mergeStatus(status, touchpoint.completeOperand(profile, phaseId, operand, parameters));
-		mergeStatus(status, completeOperand(operand, parameters));
+		mergeStatus(status, completeOperand(profile, operand, parameters, new NullProgressMonitor()));
 	}
 
-	protected final ProvisioningAction[] getActions(IInstallableUnit unit, String key) {
-		String[] instructions = getInstructionsFor(unit, key);
-		if (instructions == null || instructions.length == 0)
-			return null;
-		Touchpoint touchpoint = getTouchpoint(unit);
-		//TODO Likely need to propagate an exception if the touchpoint is not present
-		if (touchpoint == null)
-			return null;
-		InstructionParser parser = new InstructionParser(this, touchpoint);
-		List actions = new ArrayList();
-		for (int i = 0; i < instructions.length; i++) {
-			actions.addAll(Arrays.asList(parser.parseActions(instructions[i])));
-		}
-		return (ProvisioningAction[]) actions.toArray(new ProvisioningAction[actions.size()]);
-	}
-
-	protected boolean isApplicable(InstallableUnitOperand op) {
+	protected boolean isApplicable(Operand operand) {
 		return true;
 	}
 
@@ -223,19 +161,15 @@ public abstract class Phase {
 		return Status.OK_STATUS;
 	}
 
-	protected IStatus completeOperand(InstallableUnitOperand operand, Map parameters) {
+	protected IStatus completeOperand(IProfile profile, Operand operand, Map parameters, IProgressMonitor monitor) {
 		return Status.OK_STATUS;
 	}
 
-	protected IStatus initializeOperand(IProfile profile, InstallableUnitOperand operand, Map parameters, IProgressMonitor monitor) {
+	protected IStatus initializeOperand(IProfile profile, Operand operand, Map parameters, IProgressMonitor monitor) {
 		return Status.OK_STATUS;
 	}
 
-	public ProvisioningAction getAction(String actionId) {
-		return null;
-	}
-
-	protected abstract ProvisioningAction[] getActions(InstallableUnitOperand currentOperand);
+	protected abstract ProvisioningAction[] getActions(Operand operand);
 
 	/**
 	 * Returns a human-readable message to be displayed in case of an error performing
@@ -245,44 +179,4 @@ public abstract class Phase {
 		return Messages.Phase_Error;
 	}
 
-	/**
-	 * Returns the touchpoint corresponding to the operand, or null if no corresponding
-	 * touchpoint is available.
-	 */
-	protected static Touchpoint getTouchpoint(InstallableUnitOperand operand) {
-		return TouchpointManager.getInstance().getTouchpoint(getTouchpointType(operand));
-	}
-
-	/**
-	 * Returns the touchpoint type corresponding to the operand. Never returns null.
-	 */
-	protected static TouchpointType getTouchpointType(InstallableUnitOperand operand) {
-		IInstallableUnit unit = operand.second();
-		if (unit == null)
-			unit = operand.first();
-		return unit.getTouchpointType();
-	}
-
-	private static Touchpoint getTouchpoint(IInstallableUnit unit) {
-		return TouchpointManager.getInstance().getTouchpoint(unit.getTouchpointType());
-	}
-
-	private static String[] getInstructionsFor(IInstallableUnit unit, String key) {
-		TouchpointData[] data = unit.getTouchpointData();
-		if (data == null)
-			return null;
-
-		String[] matches = new String[data.length];
-		int count = 0;
-		for (int i = 0; i < data.length; i++) {
-			matches[count] = data[i].getInstructions(key);
-			if (matches[count] != null)
-				count++;
-		}
-		if (count == data.length)
-			return matches;
-		String[] result = new String[count];
-		System.arraycopy(matches, 0, result, 0, count);
-		return result;
-	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/PhaseSet.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/PhaseSet.java
index a37b601..ec81e35 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/PhaseSet.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/PhaseSet.java
@@ -23,9 +23,9 @@ public abstract class PhaseSet {
 		this.phases = phases;
 	}
 
-	public final MultiStatus perform(EngineSession session, IProfile profile, InstallableUnitOperand[] deltas, ProvisioningContext context, IProgressMonitor monitor) {
+	public final MultiStatus perform(EngineSession session, IProfile profile, Operand[] operands, ProvisioningContext context, IProgressMonitor monitor) {
 		MultiStatus result = new MultiStatus(EngineActivator.ID, IStatus.OK, null, null);
-		int[] weights = getProgressWeights(deltas);
+		int[] weights = getProgressWeights(operands);
 		int totalWork = getTotalWork(weights);
 		SubMonitor pm = SubMonitor.convert(monitor, totalWork);
 		try {
@@ -35,7 +35,7 @@ public abstract class PhaseSet {
 					return result;
 				}
 				Phase phase = phases[i];
-				MultiStatus performResult = phase.perform(session, profile, deltas, context, pm.newChild(weights[i]));
+				MultiStatus performResult = phase.perform(session, profile, operands, context, pm.newChild(weights[i]));
 				if (!performResult.isOK())
 					result.add(performResult);
 				if (result.matches(IStatus.ERROR | IStatus.CANCEL))
@@ -54,19 +54,19 @@ public abstract class PhaseSet {
 		return sum;
 	}
 
-	private int[] getProgressWeights(InstallableUnitOperand[] operands) {
+	private int[] getProgressWeights(Operand[] operands) {
 		int[] weights = new int[phases.length];
 		for (int i = 0; i < phases.length; i += 1) {
 			if (operands.length > 0)
 				//alter weights according to the number of operands applicable to that phase
-				weights[i] = phases[i].weight * (countApplicable(phases[i], operands) / operands.length);
+				weights[i] = (phases[i].weight * countApplicable(phases[i], operands) / operands.length);
 			else
 				weights[i] = phases[i].weight;
 		}
 		return weights;
 	}
 
-	private int countApplicable(Phase phase, InstallableUnitOperand[] operands) {
+	private int countApplicable(Phase phase, Operand[] operands) {
 		int count = 0;
 		for (int i = 0; i < operands.length; i++) {
 			if (phase.isApplicable(operands[i]))
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/RollbackOperationEvent.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/RollbackOperationEvent.java
index 3bb8586..4d0032c 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/RollbackOperationEvent.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/RollbackOperationEvent.java
@@ -17,8 +17,8 @@ public class RollbackOperationEvent extends TransactionEvent {
 	private static final long serialVersionUID = -2076492953949691215L;
 	private IStatus cause;
 
-	public RollbackOperationEvent(IProfile profile, PhaseSet phaseSet, InstallableUnitOperand[] deltas, IEngine engine, IStatus cause) {
-		super(profile, phaseSet, deltas, engine);
+	public RollbackOperationEvent(IProfile profile, PhaseSet phaseSet, Operand[] operands, IEngine engine, IStatus cause) {
+		super(profile, phaseSet, operands, engine);
 		this.cause = cause;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/TransactionEvent.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/TransactionEvent.java
index 7bc2ce1..efb574f 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/TransactionEvent.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/TransactionEvent.java
@@ -16,22 +16,16 @@ public abstract class TransactionEvent extends EventObject {
 	private static final long serialVersionUID = 6278706971855493984L;
 	protected IProfile profile;
 	protected PhaseSet phaseSet;
-	protected InstallableUnitOperand[] deltas;
+	protected Operand[] operands;
 
-	public TransactionEvent(IProfile profile, PhaseSet phaseSet, InstallableUnitOperand[] deltas, IEngine engine) {
+	public TransactionEvent(IProfile profile, PhaseSet phaseSet, Operand[] operands, IEngine engine) {
 		super(engine);
 		this.profile = profile;
 		this.phaseSet = phaseSet;
-		this.deltas = deltas;
+		this.operands = operands;
 	}
 
 	public IProfile getProfile() {
 		return profile;
 	}
-
-	// TODO this was added as a workaround 
-	// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=208251
-	public PhaseSet getPhaseSet() {
-		return phaseSet;
-	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Collect.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Collect.java
index 38827ff..1ee60e7 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Collect.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Collect.java
@@ -21,7 +21,7 @@ import org.eclipse.equinox.internal.provisional.p2.engine.*;
 /**
  * The goal of the collect phase is to ask the touchpoints if the artifacts associated with an IU need to be downloaded.
  */
-public class Collect extends Phase {
+public class Collect extends InstallableUnitPhase {
 	private static final String PHASE_ID = "collect"; //$NON-NLS-1$
 
 	public Collect(int weight) {
@@ -45,7 +45,7 @@ public class Collect extends Phase {
 		return Messages.Phase_Collect_Error;
 	}
 
-	protected IStatus completePhase(IProgressMonitor monitor, IProfile profile, Map parameters) {
+	protected IStatus completeInstallableUnitPhase(IProgressMonitor monitor, IProfile profile, Map parameters) {
 		List artifactRequests = (List) parameters.get(PARM_ARTIFACT_REQUESTS);
 
 		DownloadManager dm = new DownloadManager();
@@ -56,7 +56,7 @@ public class Collect extends Phase {
 		return dm.start(monitor);
 	}
 
-	protected IStatus initializePhase(IProgressMonitor monitor, IProfile profile, Map parameters) {
+	protected IStatus initializeInstallableUnitPhase(IProgressMonitor monitor, IProfile profile, Map parameters) {
 		parameters.put(PARM_ARTIFACT_REQUESTS, new ArrayList());
 		return null;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Configure.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Configure.java
index 3d266d2..8a666f6 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Configure.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Configure.java
@@ -18,7 +18,7 @@ import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.osgi.util.NLS;
 
-public class Configure extends Phase {
+public class Configure extends InstallableUnitPhase {
 
 	public Configure(int weight) {
 		super("configure", weight); //$NON-NLS-1$
@@ -46,7 +46,7 @@ public class Configure extends Phase {
 
 		IArtifactKey[] artifacts = iu.getArtifacts();
 		if (artifacts != null && artifacts.length > 0)
-			parameters.put(PARM_ARTIFACT, artifacts[0]); 
+			parameters.put(PARM_ARTIFACT, artifacts[0]);
 
 		return Status.OK_STATUS;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Install.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Install.java
index 75b04d3..cf470a3 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Install.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Install.java
@@ -20,7 +20,7 @@ import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.osgi.util.NLS;
 
-public class Install extends Phase {
+public class Install extends InstallableUnitPhase {
 
 	final static class BeforeInstallEventAction extends ProvisioningAction {
 
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Property.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Property.java
new file mode 100644
index 0000000..3e2397e
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Property.java
@@ -0,0 +1,115 @@
+package org.eclipse.equinox.internal.provisional.p2.engine.phases;
+
+import java.util.Map;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.equinox.internal.p2.engine.Profile;
+import org.eclipse.equinox.internal.provisional.p2.engine.*;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+
+public class Property extends Phase {
+
+	public class ProfilePropertyAction extends ProvisioningAction {
+
+		public IStatus execute(Map parameters) {
+			Profile profile = (Profile) parameters.get(PARM_PROFILE);
+			PropertyOperand propertyOperand = (PropertyOperand) parameters.get(PARM_OPERAND);
+
+			if (propertyOperand.second() == null)
+				removeProfileProperty(profile, propertyOperand);
+			else
+				setProfileProperty(profile, propertyOperand, false);
+
+			return null;
+		}
+
+		public IStatus undo(Map parameters) {
+			Profile profile = (Profile) parameters.get(PARM_PROFILE);
+			PropertyOperand propertyOperand = (PropertyOperand) parameters.get(PARM_OPERAND);
+
+			if (propertyOperand.first() == null)
+				removeProfileProperty(profile, propertyOperand);
+			else
+				setProfileProperty(profile, propertyOperand, true);
+
+			return null;
+		}
+
+		private void setProfileProperty(Profile profile, PropertyOperand propertyOperand, boolean undo) {
+
+			String value = (String) (undo ? propertyOperand.first() : propertyOperand.second());
+
+			if (propertyOperand instanceof InstallableUnitPropertyOperand) {
+				InstallableUnitPropertyOperand iuPropertyOperand = (InstallableUnitPropertyOperand) propertyOperand;
+				profile.setInstallableUnitProperty(iuPropertyOperand.getInstallableUnit(), iuPropertyOperand.getKey(), value);
+			} else {
+				profile.setProperty(propertyOperand.getKey(), value);
+			}
+		}
+
+		private void removeProfileProperty(Profile profile, PropertyOperand propertyOperand) {
+			if (propertyOperand instanceof InstallableUnitPropertyOperand) {
+				InstallableUnitPropertyOperand iuPropertyOperand = (InstallableUnitPropertyOperand) propertyOperand;
+				profile.removeInstallableUnitProperty(iuPropertyOperand.getInstallableUnit(), iuPropertyOperand.getKey());
+			} else {
+				profile.removeProperty(propertyOperand.getKey());
+			}
+		}
+	}
+
+	public class UpdateInstallableUnitProfilePropertiesAction extends ProvisioningAction {
+
+		// we do not need to use a memento here since the profile is not persisted unless the operation is successful
+		Map originalSourceProperties;
+		Map originalTargetProperties;
+
+		public IStatus execute(Map parameters) {
+			Profile profile = (Profile) parameters.get(PARM_PROFILE);
+			InstallableUnitOperand iuOperand = (InstallableUnitOperand) parameters.get(PARM_OPERAND);
+
+			IInstallableUnit source = iuOperand.first();
+			originalSourceProperties = profile.getInstallableUnitProperties(source);
+
+			IInstallableUnit target = iuOperand.second();
+			originalTargetProperties = profile.getInstallableUnitProperties(target);
+
+			profile.addInstallableUnitProperties(target, originalSourceProperties);
+			profile.clearInstallableUnitProperties(source);
+
+			return null;
+		}
+
+		public IStatus undo(Map parameters) {
+			Profile profile = (Profile) parameters.get(PARM_PROFILE);
+			InstallableUnitOperand iuOperand = (InstallableUnitOperand) parameters.get(PARM_OPERAND);
+
+			IInstallableUnit source = iuOperand.first();
+			profile.clearInstallableUnitProperties(source);
+			profile.addInstallableUnitProperties(source, originalSourceProperties);
+
+			IInstallableUnit target = iuOperand.second();
+			profile.clearInstallableUnitProperties(target);
+			profile.addInstallableUnitProperties(target, originalTargetProperties);
+
+			return null;
+		}
+	}
+
+	private static final String PHASE_ID = "property"; //$NON-NLS-1$
+
+	public Property(int weight) {
+		super(PHASE_ID, weight);
+	}
+
+	protected ProvisioningAction[] getActions(Operand operand) {
+		if (operand instanceof PropertyOperand)
+			return new ProvisioningAction[] {new ProfilePropertyAction()};
+
+		if (operand instanceof InstallableUnitOperand) {
+			InstallableUnitOperand iuOperand = (InstallableUnitOperand) operand;
+			if (iuOperand.first() != null && iuOperand.second() != null) {
+				return new ProvisioningAction[] {new UpdateInstallableUnitProfilePropertiesAction()};
+			}
+		}
+		return null;
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Sizing.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Sizing.java
index c3ae920..301a6eb 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Sizing.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Sizing.java
@@ -21,7 +21,7 @@ import org.eclipse.equinox.internal.provisional.p2.artifact.repository.*;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.engine.*;
 
-public class Sizing extends Phase {
+public class Sizing extends InstallableUnitPhase {
 	private static final String PHASE_ID = "collect"; //$NON-NLS-1$
 
 	private long sizeOnDisk;
@@ -52,7 +52,7 @@ public class Sizing extends Phase {
 		return Messages.Phase_Sizing_Error;
 	}
 
-	protected IStatus completePhase(IProgressMonitor monitor, IProfile profile, Map parameters) {
+	protected IStatus completeInstallableUnitPhase(IProgressMonitor monitor, IProfile profile, Map parameters) {
 		List artifactRequests = (List) parameters.get("artifactRequests"); //$NON-NLS-1$
 		Set artifactsToObtain = new HashSet(artifactRequests.size());
 
@@ -90,7 +90,7 @@ public class Sizing extends Phase {
 		return null;
 	}
 
-	protected IStatus initializePhase(IProgressMonitor monitor, IProfile profile, Map parameters) {
+	protected IStatus initializeInstallableUnitPhase(IProgressMonitor monitor, IProfile profile, Map parameters) {
 		parameters.put(PARM_ARTIFACT_REQUESTS, new ArrayList());
 		return null;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Unconfigure.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Unconfigure.java
index 15c8dd4..a6f4af1 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Unconfigure.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Unconfigure.java
@@ -17,7 +17,7 @@ import org.eclipse.equinox.internal.provisional.p2.engine.*;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 
-public class Unconfigure extends Phase {
+public class Unconfigure extends InstallableUnitPhase {
 
 	public Unconfigure(int weight) {
 		super("unconfigure", weight); //$NON-NLS-1$
@@ -43,11 +43,11 @@ public class Unconfigure extends Phase {
 
 	protected IStatus initializeOperand(IProfile profile, InstallableUnitOperand operand, Map parameters, IProgressMonitor monitor) {
 		IInstallableUnit iu = operand.first();
-		parameters.put(PARM_IU, iu); 
+		parameters.put(PARM_IU, iu);
 
 		IArtifactKey[] artifacts = iu.getArtifacts();
 		if (artifacts != null && artifacts.length > 0)
-			parameters.put(PARM_ARTIFACT, artifacts[0]); 
+			parameters.put(PARM_ARTIFACT, artifacts[0]);
 
 		return Status.OK_STATUS;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Uninstall.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Uninstall.java
index efff0a0..8d66baf 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Uninstall.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Uninstall.java
@@ -19,7 +19,7 @@ import org.eclipse.equinox.internal.provisional.p2.engine.*;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 
-public class Uninstall extends Phase {
+public class Uninstall extends InstallableUnitPhase {
 
 	final static class BeforeUninstallEventAction extends ProvisioningAction {
 		public IStatus execute(Map parameters) {
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/PhaseTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/PhaseTest.java
index 004bd02..cabd2f4 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/PhaseTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/PhaseTest.java
@@ -37,7 +37,7 @@ public class PhaseTest extends AbstractProvisioningTest {
 		}
 	}
 
-	public static class TestPhase extends Phase {
+	public static class TestPhase extends InstallableUnitPhase {
 
 		boolean completeOperand;
 		boolean getAction;
@@ -53,22 +53,9 @@ public class PhaseTest extends AbstractProvisioningTest {
 			super(phaseId, weight);
 		}
 
-		protected ProvisioningAction[] getActions(InstallableUnitOperand currentOperand) {
-			return null;
-		}
-
-		protected boolean isApplicable(InstallableUnitOperand op) {
-			return true;
-		}
-
-		protected IStatus completeOperand(InstallableUnitOperand operand, Map parameters) {
+		protected IStatus completeOperand(IProfile profile, InstallableUnitOperand operand, Map parameters, IProgressMonitor monitor) {
 			completeOperand = true;
-			return super.completeOperand(operand, parameters);
-		}
-
-		public ProvisioningAction getAction(String actionId) {
-			getAction = true;
-			return super.getAction(actionId);
+			return super.completeOperand(profile, operand, parameters, monitor);
 		}
 
 		protected IStatus initializeOperand(IProfile profile, InstallableUnitOperand operand, Map parameters, IProgressMonitor monitor) {
@@ -76,14 +63,18 @@ public class PhaseTest extends AbstractProvisioningTest {
 			return super.initializeOperand(profile, operand, parameters, monitor);
 		}
 
-		protected IStatus completePhase(IProgressMonitor monitor, IProfile profile, Map parameters) {
+		protected IStatus completeInstallableUnitPhase(IProgressMonitor monitor, IProfile profile, Map parameters) {
 			completePhase = true;
-			return super.completePhase(monitor, profile, parameters);
+			return super.completeInstallableUnitPhase(monitor, profile, parameters);
 		}
 
-		protected IStatus initializePhase(IProgressMonitor monitor, IProfile profile, Map parameters) {
+		protected IStatus initializeInstallableUnitPhase(IProgressMonitor monitor, IProfile profile, Map parameters) {
 			initializePhase = true;
-			return super.initializePhase(monitor, profile, parameters);
+			return super.initializeInstallableUnitPhase(monitor, profile, parameters);
+		}
+
+		protected ProvisioningAction[] getActions(InstallableUnitOperand operand) {
+			return null;
 		}
 	}
 
@@ -182,16 +173,16 @@ public class PhaseTest extends AbstractProvisioningTest {
 
 	public void testInitCompleteOperand() {
 		TestPhase phase = new TestPhase() {
-			protected IStatus completeOperand(InstallableUnitOperand operand, Map parameters) {
+			protected IStatus completeOperand(IProfile profile, Operand operand, Map parameters, IProgressMonitor monitor) {
 				assertTrue(initializeOperand);
 				assertFalse(completeOperand);
-				super.completeOperand(operand, parameters);
+				super.completeOperand(profile, operand, parameters, monitor);
 				assertTrue(initializeOperand);
 				assertTrue(completeOperand);
 				return null;
 			}
 
-			protected IStatus initializeOperand(IProfile profile, InstallableUnitOperand operand, Map parameters, IProgressMonitor monitor) {
+			protected IStatus initializeOperand(IProfile profile, Operand operand, Map parameters, IProgressMonitor monitor) {
 				assertFalse(initializeOperand);
 				assertFalse(completeOperand);
 				super.initializeOperand(profile, operand, parameters, monitor);
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/TouchpointTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/TouchpointTest.java
index 303d1af..34bed86 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/TouchpointTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/TouchpointTest.java
@@ -97,7 +97,7 @@ public class TouchpointTest extends AbstractProvisioningTest {
 			return null;
 		}
 
-		public IStatus initializePhase(IProgressMonitor monitor, IProfile profile, String phaseId, InstallableUnitOperand operand, Map parameters) {
+		public IStatus initializePhase(IProgressMonitor monitor, IProfile profile, String phaseId, Map parameters) {
 			assertEquals(0, initializePhase);
 			assertEquals(0, completePhase);
 			super.initializePhase(monitor, profile, phaseId, parameters);

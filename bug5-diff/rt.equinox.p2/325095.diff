commit 6f4296d6566771280d3c03e02999363df95ed7e0
Author: Pascal Rapicault <prapicau>
Date:   Sat Feb 5 02:07:07 2011 +0000

    Bug 325095 - Make posible to tag/label a profile timestamp

68	8	bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/DirectorApplication.java
2	0	bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/Messages.java
2	0	bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/messages.properties
9	3	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/IProfile.java
1	1	bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/ProfileSynchronizer.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/ProfileSnapshots.java
diff --git a/bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/DirectorApplication.java b/bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/DirectorApplication.java
index 2b2de0d..097231c 100644
--- a/bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/DirectorApplication.java
+++ b/bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/DirectorApplication.java
@@ -18,6 +18,7 @@ import java.net.URI;
 import java.net.URISyntaxException;
 import java.security.cert.Certificate;
 import java.util.*;
+import java.util.Map.Entry;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.app.IApplication;
 import org.eclipse.equinox.app.IApplicationContext;
@@ -136,6 +137,8 @@ public class DirectorApplication implements IApplication {
 	private static final CommandLineOption OPTION_P2_NL = new CommandLineOption(new String[] {"-p2.nl"}, null, Messages.Help_The_NL_when_profile_is_created); //$NON-NLS-1$
 	private static final CommandLineOption OPTION_PURGEHISTORY = new CommandLineOption(new String[] {"-purgeHistory"}, null, Messages.Help_Purge_the_install_registry); //$NON-NLS-1$
 	private static final CommandLineOption OPTION_FOLLOW_REFERENCES = new CommandLineOption(new String[] {"-followReferences"}, null, Messages.Help_Follow_references); //$NON-NLS-1$
+	private static final CommandLineOption OPTION_TAG = new CommandLineOption(new String[] {"-tag"}, Messages.Help_lt_name_gt, Messages.Help_Defines_a_tag_for_provisioning_session); //$NON-NLS-1$
+	private static final CommandLineOption OPTION_LIST_TAGS = new CommandLineOption(new String[] {"-tags"}, null, Messages.Help_List_Tags); //$NON-NLS-1$
 
 	private static final Integer EXIT_ERROR = new Integer(13);
 	static private final String FLAVOR_DEFAULT = "tooling"; //$NON-NLS-1$
@@ -217,7 +220,11 @@ public class DirectorApplication implements IApplication {
 	private boolean printHelpInfo = false;
 	private boolean printIUList = false;
 	private boolean printRootIUList = false;
-	private long revertToPreviousState = -1;
+	private boolean printTags = false;
+
+	private String revertToPreviousState = NOTHING_TO_REVERT_TO;
+	private static String NOTHING_TO_REVERT_TO = "-1";  //$NON-NLS-1$
+	private static String REVERT_TO_PREVIOUS = "0"; //$NON-NLS-2$
 	private boolean verifyOnly = false;
 	private boolean roamingProfile = false;
 	private boolean purgeRegistry = false;
@@ -229,6 +236,7 @@ public class DirectorApplication implements IApplication {
 	private String os;
 	private String arch;
 	private String nl;
+	private String tag;
 
 	private IEngine engine;
 	private boolean noProfileId = false;
@@ -365,7 +373,7 @@ public class DirectorApplication implements IApplication {
 	}
 
 	private void initializeRepositories() throws CoreException {
-		if (rootsToInstall.isEmpty() && revertToPreviousState == -1 && !printIUList)
+		if (rootsToInstall.isEmpty() && revertToPreviousState == NOTHING_TO_REVERT_TO && !printIUList)
 			// Not much point initializing repositories if we have nothing to install
 			return;
 		if (artifactRepositoryLocations == null)
@@ -583,6 +591,12 @@ public class DirectorApplication implements IApplication {
 					throw new ProvisionException(Messages.Application_NoRepositories);
 				throw new CoreException(operationStatus);
 			}
+			if (tag != null) {
+				long newState = result.getProfile().getTimestamp();
+				IProfileRegistry registry = (IProfileRegistry) targetAgent.getService(IProfileRegistry.SERVICE_NAME);
+				registry.setProfileStateProperty(result.getProfile().getProfileId(), newState, IProfile.STATE_PROP_TAG, tag);
+			}
+
 		}
 	}
 
@@ -640,6 +654,11 @@ public class DirectorApplication implements IApplication {
 				continue;
 			}
 
+			if (OPTION_LIST_TAGS.isOption(opt)) {
+				printTags = true;
+				continue;
+			}
+
 			if (OPTION_HELP.isOption(opt)) {
 				printHelpInfo = true;
 				continue;
@@ -658,10 +677,10 @@ public class DirectorApplication implements IApplication {
 			if (OPTION_REVERT.isOption(opt)) {
 				String targettedState = getOptionalArgument(args, i);
 				if (targettedState == null) {
-					revertToPreviousState = 0;
+					revertToPreviousState = REVERT_TO_PREVIOUS;
 				} else {
 					i++;
-					revertToPreviousState = Long.valueOf(targettedState).longValue();
+					revertToPreviousState = targettedState;
 				}
 				continue;
 
@@ -761,10 +780,16 @@ public class DirectorApplication implements IApplication {
 				arch = getRequiredArgument(args, ++i);
 				continue;
 			}
+
+			if (OPTION_TAG.isOption(opt)) {
+				tag = getRequiredArgument(args, ++i);
+				continue;
+			}
+
 			throw new ProvisionException(NLS.bind(Messages.unknown_option_0, opt));
 		}
 
-		if (!printHelpInfo && !printIUList && !printRootIUList && !purgeRegistry && rootsToInstall.isEmpty() && rootsToUninstall.isEmpty() && revertToPreviousState == -1) {
+		if (!printHelpInfo && !printIUList && !printRootIUList && !printTags && !purgeRegistry && rootsToInstall.isEmpty() && rootsToUninstall.isEmpty() && revertToPreviousState == NOTHING_TO_REVERT_TO) {
 			printMessage(Messages.Help_Missing_argument);
 			printHelpInfo = true;
 		}
@@ -811,7 +836,7 @@ public class DirectorApplication implements IApplication {
 			else {
 				initializeServices();
 				initializeRepositories();
-				if (revertToPreviousState >= 0) {
+				if (revertToPreviousState != NOTHING_TO_REVERT_TO) {
 					revertToPreviousState();
 				} else if (!(rootsToInstall.isEmpty() && rootsToUninstall.isEmpty()))
 					performProvisioningActions();
@@ -819,6 +844,8 @@ public class DirectorApplication implements IApplication {
 					performList();
 				if (printRootIUList)
 					performListInstalledRoots();
+				if (printTags)
+					performPrintTags();
 				if (purgeRegistry)
 					purgeRegistry();
 				printMessage(NLS.bind(Messages.Operation_complete, new Long(System.currentTimeMillis() - time)));
@@ -853,14 +880,15 @@ public class DirectorApplication implements IApplication {
 		IProfile profile = initializeProfile();
 		IProfileRegistry profileRegistry = (IProfileRegistry) targetAgent.getService(IProfileRegistry.SERVICE_NAME);
 		IProfile targetProfile = null;
-		if (revertToPreviousState == 0) {
+		if (revertToPreviousState == REVERT_TO_PREVIOUS) {
 			long[] profiles = profileRegistry.listProfileTimestamps(profile.getProfileId());
 			if (profiles.length == 0)
 				return;
 			targetProfile = profileRegistry.getProfile(profile.getProfileId(), profiles[profiles.length - 1]);
 		} else {
-			targetProfile = profileRegistry.getProfile(profile.getProfileId(), revertToPreviousState);
+			targetProfile = profileRegistry.getProfile(profile.getProfileId(), getTimestampToRevertTo(profileRegistry, profile.getProfileId()));
 		}
+
 		if (targetProfile == null)
 			throw new CoreException(new Status(IStatus.ERROR, Activator.ID, Messages.Missing_profile));
 		IProvisioningPlan plan = planner.getDiffPlan(profile, targetProfile, new NullProgressMonitor());
@@ -873,6 +901,27 @@ public class DirectorApplication implements IApplication {
 		executePlan(context, plan);
 	}
 
+	private long getTimestampToRevertTo(IProfileRegistry profileRegistry, String profId) {
+		long timestampToRevertTo = -1;
+		try {
+			//Deal with the case where the revert points to a timestamp
+			timestampToRevertTo = Long.valueOf(revertToPreviousState).longValue();
+		} catch (NumberFormatException e) {
+			//Deal with the case where the revert points to tag
+			Map<String, String> tags = profileRegistry.getProfileStateProperties(profId, IProfile.STATE_PROP_TAG);
+			Set<Entry<String, String>> entries = tags.entrySet();
+			for (Entry<String, String> entry : entries) {
+				if (entry.getValue().equals(revertToPreviousState))
+					try {
+						timestampToRevertTo = Long.valueOf(entry.getKey()).longValue();
+					} catch (NumberFormatException e2) {
+						//Not expected since the value is supposed to be a timestamp as per API
+					}
+			}
+		}
+		return timestampToRevertTo;
+	}
+
 	/**
 	 * Sets a system property, using the EnvironmentInfo service if possible.
 	 */
@@ -1040,4 +1089,15 @@ public class DirectorApplication implements IApplication {
 			System.out.println(iu.getId() + '/' + iu.getVersion());
 	}
 
+	private void performPrintTags() throws CoreException {
+		IProfile profile = initializeProfile();
+		IProfileRegistry registry = (IProfileRegistry) targetAgent.getService(IProfileRegistry.SERVICE_NAME);
+		Map<String, String> tags = registry.getProfileStateProperties(profile.getProfileId(), IProfile.STATE_PROP_TAG);
+		//Sort the tags from the most recent to the oldest
+		List<String> timeStamps = new ArrayList<String>(tags.keySet());
+		Collections.sort(timeStamps, Collections.reverseOrder());
+		for (String timestamp : timeStamps) {
+			System.out.println(tags.get(timestamp));
+		}
+	}
 }
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/Messages.java b/bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/Messages.java
index 744780f..9d617ac 100644
--- a/bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/Messages.java
+++ b/bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/Messages.java
@@ -54,6 +54,8 @@ public class Messages extends NLS {
 	public static String Help_Use_a_shared_location_for_the_install;
 	public static String Help_Purge_the_install_registry;
 	public static String Help_Follow_references;
+	public static String Help_Defines_a_tag_for_provisioning_session;
+	public static String Help_List_Tags;
 
 	public static String Ignored_repo;
 	public static String Installing;
diff --git a/bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/messages.properties b/bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/messages.properties
index 176bee5..da0fd1f 100644
--- a/bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.director.app/src/org/eclipse/equinox/internal/p2/director/app/messages.properties
@@ -56,6 +56,8 @@ Help_The_OS_when_profile_is_created=The OS to use when the profile is created.
 Help_The_WS_when_profile_is_created=The windowing system to use when the profile is created.
 Help_Purge_the_install_registry=Remove the history of the profile registry.
 Help_Follow_references=Follow repository references.
+Help_Defines_a_tag_for_provisioning_session=Tag the provisioning operation for easy referencing when reverting.
+Help_List_Tags=List the tags available
 unable_to_parse_0_to_uri_1=Unable to parse {0} into an URI: {1}.
 unknown_option_0=Unknown option {0}. Use -help for a list of known options.
 Help_Missing_argument=The argument specifying what to install or uninstall is missing.
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/IProfile.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/IProfile.java
index 275e65e..a60c0c2 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/IProfile.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/IProfile.java
@@ -101,7 +101,7 @@ public interface IProfile extends IQueryable<IInstallableUnit> {
 	 * May be empty or <code>null</code>, and generally will be for non-top level
 	 * install contexts.
 	 */
-	public static final String PROP_NAME = "org.eclipse.equinox.p2.name"; //$NON-NLS-1$
+	public static final String PROP_NAME = "org.eclipse.equinox.p2.name"; //$NON-NLS-1$	
 	/**
 	 * Profile property constant indicating the list of environments
 	 * (e.g., OS, WS, ...) in which a profile can operate. The value of the property
@@ -131,13 +131,19 @@ public interface IProfile extends IQueryable<IInstallableUnit> {
 	public static final String PROP_INSTALL_FEATURES = "org.eclipse.update.install.features"; //$NON-NLS-1$
 
 	/**
-	  * Profile state meta property key.  Can be used to mark a profile state that the UI should hide.
+	  * Profile state meta property key.  Can be used to mark a profile state that should be hidden.
 	  * The value of the property is not relevant as the property's existence is enough.  Although <code>true</code>
 	  * would be a typical value.
 	  * 
 	  * @since 2.1
 	  */
-	public static final String PROP_HIDDEN = "org.eclipse.equinox.p2.state.hidden"; //$NON-NLS-1$
+	public static final String STATE_PROP_HIDDEN = "org.eclipse.equinox.p2.state.hidden"; //$NON-NLS-1$
+
+	/**
+	 * Profile state metadata property key used to associate with a profile state a user readable name.
+	 * @since 2.1
+	 */
+	public static final String STATE_PROP_TAG = "org.eclipse.equinox.p2.state.tag"; //$NON-NLS-1$
 
 	/**
 	 * Returns the provisioning agent that manages this profile
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/ProfileSynchronizer.java b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/ProfileSynchronizer.java
index da500f4..e09138b 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/ProfileSynchronizer.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/ProfileSynchronizer.java
@@ -138,7 +138,7 @@ public class ProfileSynchronizer {
 		// See https://bugs.eclipse.org/334670
 		IProfileRegistry profileRegistry = (IProfileRegistry) agent.getService(IProfileRegistry.SERVICE_NAME);
 		if (profileRegistry != null) {
-			IStatus result = profileRegistry.setProfileStateProperty(profile.getProfileId(), profile.getTimestamp(), IProfile.PROP_HIDDEN, Boolean.TRUE.toString());
+			IStatus result = profileRegistry.setProfileStateProperty(profile.getProfileId(), profile.getTimestamp(), IProfile.STATE_PROP_HIDDEN, Boolean.TRUE.toString());
 			if (!result.isOK()) {
 				// we don't get here but if we do, we will ignore the problem and continue. We
 				// still want the install operation to succeed. The consequence of this failure is the
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/ProfileSnapshots.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/ProfileSnapshots.java
index effaf6b..9876987 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/ProfileSnapshots.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/ProfileSnapshots.java
@@ -49,7 +49,7 @@ public class ProfileSnapshots extends ProvElement implements IDeferredWorkbenchA
 		long[] timestamps = registry.listProfileTimestamps(profileId);
 
 		// find out which profile states we should hide
-		Map<String, String> hidden = registry.getProfileStateProperties(profileId, IProfile.PROP_HIDDEN);
+		Map<String, String> hidden = registry.getProfileStateProperties(profileId, IProfile.STATE_PROP_HIDDEN);
 		List<RollbackProfileElement> elements = new ArrayList<RollbackProfileElement>();
 
 		for (int i = 0; i < timestamps.length; i++) {
commit 85acf68849bfb0cdd01771a9afae401bc9126fb3
Author: DJ Houghton <dj>
Date:   Thu Feb 17 18:56:40 2011 +0000

    Bug 325095 - Make posible to tag/label a profile timestamp

29	2	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
8	2	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/IProfileRegistry.java
86	0	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ProfileRegistryTest.java
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
index 4e19cc4..55509a1 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
@@ -948,9 +948,11 @@ public class SimpleProfileRegistry implements IProfileRegistry, IAgentService {
 		File profileDirectory = getProfileFolder(id);
 		File file = new File(profileDirectory, PROFILE_PROPERTIES_FILE);
 		OutputStream output = null;
+		Properties prunedProperties = properties;
 		try {
 			output = new BufferedOutputStream(new FileOutputStream(file));
-			properties.store(output, null);
+			prunedProperties = pruneStateProperties(id, properties);
+			prunedProperties.store(output, null);
 			output.flush();
 		} catch (IOException e) {
 			return new Status(IStatus.ERROR, EngineActivator.ID, Messages.SimpleProfileRegistry_States_Error_Writing_File, e);
@@ -963,10 +965,35 @@ public class SimpleProfileRegistry implements IProfileRegistry, IAgentService {
 			}
 		}
 		// cache the value
-		lastAccessedProperties = new ProfileStateProperties(id, file, properties);
+		lastAccessedProperties = new ProfileStateProperties(id, file, prunedProperties);
 		return Status.OK_STATUS;
 	}
 
+	// Only write state properties for state timestamps that still exist
+	// TODO: Do we want to expose this method as API?
+	// TODO: Do we want to run this method on every write or just after specific elapsed times since the last Prune?
+	private Properties pruneStateProperties(String id, Properties properties) {
+		Properties result = new Properties();
+		long[] timestamps = listProfileTimestamps(id);
+		HashSet<String> timestampsSet = new HashSet<String>(timestamps.length);
+		for (int i = 0; i < timestamps.length; i++) {
+			timestampsSet.add(String.valueOf(timestamps[i]));
+		}
+
+		Enumeration<Object> keys = properties.keys();
+		while (keys.hasMoreElements()) {
+			String key = (String) keys.nextElement();
+			int index = key.indexOf('.');
+			if (index > -1) {
+				String timestamp = key.substring(0, index);
+				if (timestampsSet.contains(timestamp)) {
+					result.put(key, properties.get(key));
+				}
+			}
+		}
+		return result;
+	}
+
 	/*
 	 * Ensure a profile with the given identifier has a state with the specified timestamp. Return
 	 * a status object indicating success or failure.
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/IProfileRegistry.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/IProfileRegistry.java
index a46164c..a6f9b9a 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/IProfileRegistry.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/IProfileRegistry.java
@@ -163,7 +163,10 @@ public interface IProfileRegistry {
 	/**
 	 * Return all properties for a particular profile state. Both the key and the values are <code>String</code>.
 	 * Return an empty map if there was a problem accessing the properties.
-	 * 
+	 * <p>
+	 * There is no guarantee that all state timestamps returned will still exist in the registry 
+	 * since the user could delete profile states from the file system.
+	 * </p>
 	 * @param id the profile identifier
 	 * @param timestamp the profile timestamp
 	 * @return a property map of key value pairs.  An empty map if the profile state has no properties or does not exist
@@ -176,7 +179,10 @@ public interface IProfileRegistry {
 	 * Return a map of profile timestamps to values for all profile states that contain the given property key.
 	 * Both the key and value are of type <code>String</code>.
 	 * Return an empty map if there was a problem accessing the properties.
-	 * 
+	 * <p>
+	 * There is no guarantee that all state timestamps returned will still exist in the registry 
+	 * since the user could delete profile states from the file system.
+	 * </p>
 	 * @param id the profile identifier
 	 * @param key the property key
 	 * @return A map of timestamp and values for the given key.  An empty map if no states define the given key.
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ProfileRegistryTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ProfileRegistryTest.java
index 82a4f9b..a87f302 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ProfileRegistryTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ProfileRegistryTest.java
@@ -782,6 +782,92 @@ public class ProfileRegistryTest extends AbstractProvisioningTest {
 		assertEquals("three", result.get("two"));
 	}
 
+	public void testPruneProfileStateProperties() throws ProvisionException {
+		assertNull(registry.getProfile(PROFILE_NAME));
+		Profile profile = (Profile) registry.addProfile(PROFILE_NAME);
+
+		Map<String, String> profileProperties = new HashMap<String, String>();
+		profileProperties.put("profileFoo", "profileBar");
+
+		profile.addProperties(profileProperties);
+
+		saveProfile(registry, profile);
+
+		long[] states = registry.listProfileTimestamps(profile.getProfileId());
+		assertEquals(2, registry.listProfileTimestamps(profile.getProfileId()).length);
+
+		Map<String, String> stateProperties1 = new HashMap<String, String>();
+		Map<String, String> stateProperties2 = new HashMap<String, String>();
+
+		stateProperties1.put("one", "two");
+		stateProperties1.put("a", "b");
+		stateProperties1.put("z", "y");
+
+		stateProperties2.put("one", "three");
+		stateProperties2.put("a", "c");
+		stateProperties2.put("zz", "yy");
+
+		// Check regular states are what we expect.
+		assertOK(registry.setProfileStateProperties(profile.getProfileId(), states[0], stateProperties1));
+		assertOK(registry.setProfileStateProperties(profile.getProfileId(), states[1], stateProperties2));
+
+		Map<String, String> result = registry.getProfileStateProperties(profile.getProfileId(), states[0]);
+		assertEquals(3, result.size());
+		assertEquals("two", result.get("one"));
+		assertEquals("b", result.get("a"));
+		assertEquals("y", result.get("z"));
+
+		result = registry.getProfileStateProperties(profile.getProfileId(), states[1]);
+		assertEquals(3, result.size());
+		assertEquals("three", result.get("one"));
+		assertEquals("c", result.get("a"));
+		assertEquals("yy", result.get("zz"));
+
+		result = registry.getProfileStateProperties(profile.getProfileId(), states[1] + 1);
+		assertEquals(0, result.size());
+
+		// Remove a profile
+		registry.removeProfile(PROFILE_NAME, states[0]);
+		assertEquals(1, registry.listProfileTimestamps(profile.getProfileId()).length);
+
+		// Since state properties are still present, re-run first tests.
+
+		result = registry.getProfileStateProperties(profile.getProfileId(), states[0]);
+		assertEquals(3, result.size());
+		assertEquals("two", result.get("one"));
+		assertEquals("b", result.get("a"));
+		assertEquals("y", result.get("z"));
+
+		result = registry.getProfileStateProperties(profile.getProfileId(), states[1]);
+		assertEquals(3, result.size());
+		assertEquals("three", result.get("one"));
+		assertEquals("c", result.get("a"));
+		assertEquals("yy", result.get("zz"));
+
+		result = registry.getProfileStateProperties(profile.getProfileId(), states[1] + 1);
+		assertEquals(0, result.size());
+
+		// Force the states to be pruned by causing a new state to be written.
+		Map<String, String> stateProperties3 = new HashMap<String, String>();
+		stateProperties3.put("AmIPruned", "yes");
+		registry.setProfileStateProperties(profile.getProfileId(), states[1], stateProperties3);
+
+		// Check results.  We expect that state properties for the first state are now gone.
+		result = registry.getProfileStateProperties(profile.getProfileId(), states[0]);
+		assertEquals(0, result.size());
+
+		result = registry.getProfileStateProperties(profile.getProfileId(), states[1]);
+		assertEquals(4, result.size());
+		assertEquals("three", result.get("one"));
+		assertEquals("c", result.get("a"));
+		assertEquals("yy", result.get("zz"));
+		assertEquals("yes", result.get("AmIPruned"));
+
+		result = registry.getProfileStateProperties(profile.getProfileId(), states[1] + 1);
+		assertEquals(0, result.size());
+
+	}
+
 	public void testGetProfileStateProperties() throws ProvisionException {
 		assertNull(registry.getProfile(PROFILE_NAME));
 		Profile profile = (Profile) registry.addProfile(PROFILE_NAME);
commit 2acf0e29719307ac5afceea1e78e3a48a6b88eb2
Author: DJ Houghton <dj>
Date:   Thu Feb 17 20:24:13 2011 +0000

    Bug 325095 - Make posible to tag/label a profile timestamp

6	0	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
5	2	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/IProfileRegistry.java
3	7	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ProfileRegistryTest.java
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
index 55509a1..816e864 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
@@ -372,6 +372,8 @@ public class SimpleProfileRegistry implements IProfileRegistry, IAgentService {
 		}
 		profileMap.remove(profileId);
 		profileLocks.remove(profileId);
+		// deleting the profile removes the folder and subsequently all
+		// the profile state properties as well since they are stored in a file in the folder.
 		deleteProfile(profileId);
 		broadcastChangeEvent(profileId, IProfileEvent.REMOVED);
 	}
@@ -397,6 +399,10 @@ public class SimpleProfileRegistry implements IProfileRegistry, IAgentService {
 				return;
 		}
 		FileUtils.deleteAll(profileFile);
+		// Ignore the return value here. If there was a problem removing the profile state
+		// properties we don't want to fail the whole operation since the profile state itself 
+		// was removed successfully
+		removeProfileStateProperties(id, timestamp, null);
 	}
 
 	private void broadcastChangeEvent(String profileId, int reason) {
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/IProfileRegistry.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/IProfileRegistry.java
index a6f9b9a..381a61e 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/IProfileRegistry.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/IProfileRegistry.java
@@ -106,7 +106,9 @@ public interface IProfileRegistry {
 	/**
 	 * Remove the given profile snapshot from this profile registry. This method has no effect
 	 * if this registry does not contain a profile with the given id and timestamp.
-	 * The current profile cannot be removed using this method.
+	 * The current profile cannot be removed using this method. When a particular profile state
+	 * is removed from the registry, the corresponding profile state properties for that
+	 * particular state are also removed.
 	 * 
 	 * @param id the profile to remove
 	 * @param timestamp the timestamp of the profile to remove 
@@ -116,7 +118,8 @@ public interface IProfileRegistry {
 
 	/**
 	 * Remove the given profile from this profile registry.  This method has no effect
-	 * if this registry does not contain a profile with the given id.
+	 * if this registry does not contain a profile with the given id. When a profile is removed
+	 * from the registry, all of its associated profile state properties are removed as well.
 	 * 
 	 * @param id the profile to remove
 	 */
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ProfileRegistryTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ProfileRegistryTest.java
index a87f302..838358e 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ProfileRegistryTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/ProfileRegistryTest.java
@@ -830,14 +830,10 @@ public class ProfileRegistryTest extends AbstractProvisioningTest {
 		registry.removeProfile(PROFILE_NAME, states[0]);
 		assertEquals(1, registry.listProfileTimestamps(profile.getProfileId()).length);
 
-		// Since state properties are still present, re-run first tests.
-
-		result = registry.getProfileStateProperties(profile.getProfileId(), states[0]);
-		assertEquals(3, result.size());
-		assertEquals("two", result.get("one"));
-		assertEquals("b", result.get("a"));
-		assertEquals("y", result.get("z"));
+		// Ensure all properties for the first state were removed when we removed the state
+		assertTrue(registry.getProfileStateProperties(profile.getProfileId(), states[0]).isEmpty());
 
+		// Ensure we still have properties for the other state.
 		result = registry.getProfileStateProperties(profile.getProfileId(), states[1]);
 		assertEquals(3, result.size());
 		assertEquals("three", result.get("one"));

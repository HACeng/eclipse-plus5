commit a8a6046fafb4a3c1127c203767d78cd0c11d5cde
Author: DJ Houghton <dj>
Date:   Fri Feb 13 23:14:20 2009 +0000

    Bug 264570 - [composite] Allow relative child URIs in XML

63	32	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepository.java
1	1	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepositoryFactory.java
9	10	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/CompositeParser.java
5	19	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/CompositeRepositoryIO.java
93	0	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/CompositeRepositoryState.java
6	8	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/CompositeWriter.java
3	3	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/repository/ICompositeRepository.java
57	21	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/CompositeMetadataRepository.java
1	1	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/CompositeMetadataRepositoryFactory.java
60	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/CompositeArtifactRepositoryTest.java
60	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/CompositeMetadataRepositoryTest.java
23	0	bundles/org.eclipse.equinox.p2.tests/testData/testRepos/simple.1/artifacts.xml
32	0	bundles/org.eclipse.equinox.p2.tests/testData/testRepos/simple.1/content.xml
-	-	bundles/org.eclipse.equinox.p2.tests/testData/testRepos/simple.1/plugins/aBundle_1.0.0.jar
23	0	bundles/org.eclipse.equinox.p2.tests/testData/testRepos/simple.2/artifacts.xml
32	0	bundles/org.eclipse.equinox.p2.tests/testData/testRepos/simple.2/content.xml
-	-	bundles/org.eclipse.equinox.p2.tests/testData/testRepos/simple.2/plugins/aBundle_1.0.1.jar
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepository.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepository.java
index 72a4362..179ccb5 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepository.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepository.java
@@ -20,7 +20,7 @@ import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.persistence.CompositeRepositoryIO;
-import org.eclipse.equinox.internal.p2.persistence.CompositeRepositoryIO.CompositeRepositoryState;
+import org.eclipse.equinox.internal.p2.persistence.CompositeRepositoryState;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.*;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.ICompositeRepository;
@@ -37,7 +37,8 @@ public class CompositeArtifactRepository extends AbstractArtifactRepository impl
 	static final public String CONTENT_FILENAME = "compositeArtifacts"; //$NON-NLS-1$
 	public static final String XML_REPO_TYPE = "artifactRepository"; //$NON-NLS-1$
 
-	private ArrayList childrenURIs = new ArrayList();
+	// locations of the children repositories... can be absolute or relative.
+	private List childrenURIs = new ArrayList();
 
 	/**
 	 * Create a Composite repository in memory.
@@ -73,12 +74,9 @@ public class CompositeArtifactRepository extends AbstractArtifactRepository impl
 	 * This is only called by the parser when loading a repository.
 	 */
 	public CompositeArtifactRepository(CompositeRepositoryState state) {
-		super(state.Name, state.Type, state.Version, null, state.Description, state.Provider, state.Properties);
-		for (int i = 0; i < state.Children.length; i++) {
-			//duplicate checking
-			if (!childrenURIs.contains(state.Children[i]))
-				childrenURIs.add(state.Children[i]);
-		}
+		super(state.getName(), state.getType(), state.getVersion(), null, state.getDescription(), state.getProvider(), state.getProperties());
+		for (int i = 0; i < state.getChildren().length; i++)
+			add(childrenURIs, state.getChildren()[i]);
 	}
 
 	public CompositeArtifactRepository(URI location, String repositoryName, Map properties) {
@@ -87,6 +85,33 @@ public class CompositeArtifactRepository extends AbstractArtifactRepository impl
 		save();
 	}
 
+	/*
+	 * Create and return a new repository state object which represents this repository.
+	 * It will be used while persisting the repository to disk.
+	 */
+	public CompositeRepositoryState toState() {
+		CompositeRepositoryState result = new CompositeRepositoryState();
+		result.setName(getName());
+		result.setType(getType());
+		result.setVersion(getVersion());
+		result.setLocation(getLocation());
+		result.setDescription(getDescription());
+		result.setProvider(getProvider());
+		result.setProperties(getProperties());
+		// it is important to directly access the field so we have the relative URIs
+		result.setChildren((URI[]) childrenURIs.toArray(new URI[childrenURIs.size()]));
+		return result;
+	}
+
+	/*
+	 * Add the given object to the specified list if it doesn't already exist
+	 * in it. Return a boolean value indicating whether or not the object was 
+	 * actually added.
+	 */
+	private static boolean add(List list, Object obj) {
+		return list.contains(obj) ? false : list.add(obj);
+	}
+
 	public static URI getActualLocation(URI base, boolean compress) {
 		return getActualLocation(base, compress ? JAR_EXTENSION : XML_EXTENSION);
 	}
@@ -121,10 +146,8 @@ public class CompositeArtifactRepository extends AbstractArtifactRepository impl
 	}
 
 	public void addChild(URI childURI) {
-		if (!childrenURIs.contains(childURI)) {
-			childrenURIs.add(childURI);
+		if (add(childrenURIs, childURI))
 			save();
-		}
 	}
 
 	public boolean addChild(URI childURI, String comparatorID) {
@@ -139,8 +162,17 @@ public class CompositeArtifactRepository extends AbstractArtifactRepository impl
 	}
 
 	public void removeChild(URI childURI) {
-		childrenURIs.remove(childURI);
-		save();
+		boolean removed = childrenURIs.remove(childURI);
+		// if the child wasn't there make sure and try the other permutation
+		// (absolute/relative) to see if it really is in the list.
+		if (!removed) {
+			if (childURI.isAbsolute())
+				removed = childrenURIs.remove(URIUtil.makeRelative(childURI, location));
+			else
+				removed = childrenURIs.remove(URIUtil.makeAbsolute(childURI, location));
+		}
+		if (removed)
+			save();
 	}
 
 	public void removeAllChildren() {
@@ -148,8 +180,11 @@ public class CompositeArtifactRepository extends AbstractArtifactRepository impl
 		save();
 	}
 
-	public ArrayList getChildren() {
-		return childrenURIs;
+	public List getChildren() {
+		List result = new ArrayList();
+		for (Iterator iter = childrenURIs.iterator(); iter.hasNext();)
+			result.add(URIUtil.makeAbsolute((URI) iter.next(), location));
+		return result;
 	}
 
 	/**
@@ -197,33 +232,33 @@ public class CompositeArtifactRepository extends AbstractArtifactRepository impl
 	}
 
 	public boolean contains(IArtifactKey key) {
-		boolean contains = false;
-		for (Iterator repositoryIterator = childrenURIs.iterator(); repositoryIterator.hasNext() && !contains;) {
+		for (Iterator repositoryIterator = childrenURIs.iterator(); repositoryIterator.hasNext();) {
 			try {
 				URI currentURI = (URI) repositoryIterator.next();
 				IArtifactRepository current = load(currentURI);
-				contains = current.contains(key);
+				if (current.contains(key))
+					return true;
 			} catch (ProvisionException e) {
 				//repository failed to load. fall through
 				LogHelper.log(e);
 			}
 		}
-		return contains;
+		return false;
 	}
 
 	public boolean contains(IArtifactDescriptor descriptor) {
-		boolean contains = false;
-		for (Iterator repositoryIterator = childrenURIs.iterator(); repositoryIterator.hasNext() && !contains;) {
+		for (Iterator repositoryIterator = childrenURIs.iterator(); repositoryIterator.hasNext();) {
 			try {
 				URI currentURI = (URI) repositoryIterator.next();
 				IArtifactRepository current = load(currentURI);
-				contains = current.contains(descriptor);
+				if (current.contains(descriptor))
+					return true;
 			} catch (ProvisionException e) {
 				//repository failed to load. fall through
 				LogHelper.log(e);
 			}
 		}
-		return contains;
+		return false;
 	}
 
 	public IArtifactDescriptor[] getArtifactDescriptors(IArtifactKey key) {
@@ -234,9 +269,7 @@ public class CompositeArtifactRepository extends AbstractArtifactRepository impl
 				IArtifactRepository current = load(currentURI);
 				IArtifactDescriptor[] tempResult = current.getArtifactDescriptors(key);
 				for (int i = 0; i < tempResult.length; i++)
-					//duplicate checking
-					if (!result.contains(tempResult[i]))
-						result.add(tempResult[i]);
+					add(result, tempResult[i]);
 			} catch (ProvisionException e) {
 				//repository failed to load. fall through
 				LogHelper.log(e);
@@ -253,9 +286,7 @@ public class CompositeArtifactRepository extends AbstractArtifactRepository impl
 				IArtifactRepository current = load(currentURI);
 				IArtifactKey[] tempResult = current.getArtifactKeys();
 				for (int i = 0; i < tempResult.length; i++)
-					//duplicate checking
-					if (!result.contains(tempResult[i]))
-						result.add(tempResult[i]);
+					add(result, tempResult[i]);
 			} catch (ProvisionException e) {
 				//repository failed to load. fall through
 				LogHelper.log(e);
@@ -383,7 +414,7 @@ public class CompositeArtifactRepository extends AbstractArtifactRepository impl
 					os = jOs;
 				}
 				super.setProperty(IRepository.PROP_TIMESTAMP, Long.toString(System.currentTimeMillis()));
-				new CompositeRepositoryIO().write(this, os, XML_REPO_TYPE);
+				new CompositeRepositoryIO().write(toState(), os, XML_REPO_TYPE);
 			} catch (IOException e) {
 				// TODO proper exception handling
 				e.printStackTrace();
@@ -397,6 +428,8 @@ public class CompositeArtifactRepository extends AbstractArtifactRepository impl
 	}
 
 	private IArtifactRepository load(URI repoURI) throws ProvisionException {
+		// make sure we are dealing with an absolute location
+		repoURI = URIUtil.makeAbsolute(repoURI, location);
 		boolean loaded = getManager().contains(repoURI);
 		IArtifactRepository repo = getManager().loadRepository(repoURI, null);
 		if (!loaded) {
@@ -405,7 +438,6 @@ public class CompositeArtifactRepository extends AbstractArtifactRepository impl
 			//set repository to system to hide from users
 			getManager().setRepositoryProperty(repoURI, IRepository.PROP_SYSTEM, String.valueOf(true));
 		}
-
 		return repo;
 	}
 
@@ -488,7 +520,6 @@ public class CompositeArtifactRepository extends AbstractArtifactRepository impl
 			if (!isSane((URI) childrenURIs.get(i), comparatorID, i + 1))
 				return false;
 		}
-
 		return true;
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepositoryFactory.java
index 32d4841..f521fa4 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepositoryFactory.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepositoryFactory.java
@@ -18,7 +18,7 @@ import java.util.jar.JarInputStream;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.Tracing;
 import org.eclipse.equinox.internal.p2.persistence.CompositeRepositoryIO;
-import org.eclipse.equinox.internal.p2.persistence.CompositeRepositoryIO.CompositeRepositoryState;
+import org.eclipse.equinox.internal.p2.persistence.CompositeRepositoryState;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository.ArtifactRepositoryFactory;
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/CompositeParser.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/CompositeParser.java
index 43767eb..0626a93 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/CompositeParser.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/CompositeParser.java
@@ -15,7 +15,6 @@ import java.net.URI;
 import java.util.*;
 import javax.xml.parsers.ParserConfigurationException;
 import org.eclipse.equinox.internal.p2.core.helpers.OrderedProperties;
-import org.eclipse.equinox.internal.p2.persistence.CompositeRepositoryIO.CompositeRepositoryState;
 import org.eclipse.equinox.internal.provisional.p2.core.Version;
 import org.eclipse.equinox.internal.provisional.p2.core.VersionRange;
 import org.eclipse.osgi.util.NLS;
@@ -160,15 +159,15 @@ public class CompositeParser extends XMLParser implements XMLConstants {
 		protected void finished() {
 			if (isValidXML()) {
 				state = new CompositeRepositoryState();
-				state.Name = attrValues[0];
-				state.Type = attrValues[1];
-				state.Version = attrValues[2];
-				state.Description = attrValues[3];
-				state.Provider = attrValues[4];
-				state.Properties = (propertiesHandler == null ? new OrderedProperties(0) //
-						: propertiesHandler.getProperties());
-				state.Children = (childrenHandler == null ? new URI[0] //
-						: childrenHandler.getChildren());
+				state.setName(attrValues[0]);
+				state.setType(attrValues[1]);
+				state.setVersion(attrValues[2]);
+				state.setDescription(attrValues[3]);
+				state.setProvider(attrValues[4]);
+				state.setProperties((propertiesHandler == null ? new OrderedProperties(0) //
+						: propertiesHandler.getProperties()));
+				state.setChildren((childrenHandler == null ? new URI[0] //
+						: childrenHandler.getChildren()));
 			}
 		}
 	}
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/CompositeRepositoryIO.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/CompositeRepositoryIO.java
index 98849e5..02319fb 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/CompositeRepositoryIO.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/CompositeRepositoryIO.java
@@ -11,40 +11,26 @@
 package org.eclipse.equinox.internal.p2.persistence;
 
 import java.io.*;
-import java.net.URI;
 import java.net.URL;
-import java.util.Map;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.Activator;
 import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
-import org.eclipse.equinox.internal.provisional.p2.core.repository.ICompositeRepository;
 import org.eclipse.osgi.util.NLS;
 
 /**
- * This class reads and writes composite repository metadata
- * (e.g. table of contents files);
- * 
- * This class is not used for reading or writing the actual composite repositories.
+ * This class reads and writes repository metadata (e.g. table of contents files) 
+ * for composite artifact and metadata repositories.
+ * <p>
+ * Note: This class is not used for reading or writing the actual composite repositories.
  */
 public class CompositeRepositoryIO {
 
-	public static class CompositeRepositoryState {
-		public String Name;
-		public String Type;
-		public String Version;
-		public String Provider;
-		public String Description;
-		public URI Location;
-		public Map Properties;
-		public URI[] Children;
-	}
-
 	/**
 	 * Writes the given repository to the stream.
 	 * This method performs buffering, and closes the stream when finished.
 	 */
-	public void write(ICompositeRepository repository, OutputStream output, String type) {
+	public void write(CompositeRepositoryState repository, OutputStream output, String type) {
 		OutputStream bufferedOutput = null;
 		try {
 			try {
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/CompositeRepositoryState.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/CompositeRepositoryState.java
new file mode 100644
index 0000000..83f7795
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/CompositeRepositoryState.java
@@ -0,0 +1,93 @@
+/*******************************************************************************
+ * Copyright (c) 2009 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.persistence;
+
+import java.net.URI;
+import java.util.Map;
+
+/*
+ * Instances of this class represent a composite repository (either metadata
+ * or artifact) and are used in persisting or retrieving the repository to/from disk.
+ */
+public class CompositeRepositoryState {
+	private String name;
+	private String type;
+	private String version;
+	private String provider;
+	private String description;
+	private URI location;
+	private Map properties;
+	private URI[] children;
+
+	public void setName(String value) {
+		name = value;
+	}
+
+	public String getName() {
+		return name;
+	}
+
+	public void setType(String value) {
+		type = value;
+	}
+
+	public String getType() {
+		return type;
+	}
+
+	public void setVersion(String value) {
+		version = value;
+	}
+
+	public String getVersion() {
+		return version;
+	}
+
+	public void setProvider(String value) {
+		provider = value;
+	}
+
+	public String getProvider() {
+		return provider;
+	}
+
+	public void setDescription(String value) {
+		description = value;
+	}
+
+	public String getDescription() {
+		return description;
+	}
+
+	public void setLocation(URI value) {
+		location = value;
+	}
+
+	public URI getLocation() {
+		return location;
+	}
+
+	public void setProperties(Map value) {
+		properties = value;
+	}
+
+	public Map getProperties() {
+		return properties;
+	}
+
+	public void setChildren(URI[] value) {
+		children = value;
+	}
+
+	public URI[] getChildren() {
+		return children;
+	}
+}
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/CompositeWriter.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/CompositeWriter.java
index 2e4488c..0295a6f 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/CompositeWriter.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/CompositeWriter.java
@@ -13,8 +13,6 @@ package org.eclipse.equinox.internal.p2.persistence;
 import java.io.OutputStream;
 import java.io.UnsupportedEncodingException;
 import java.net.URI;
-import java.util.Iterator;
-import java.util.List;
 import org.eclipse.core.runtime.URIUtil;
 import org.eclipse.equinox.internal.provisional.p2.core.Version;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.ICompositeRepository;
@@ -35,13 +33,13 @@ public class CompositeWriter extends XMLWriter implements XMLConstants {
 	/**
 	 * Writes a list of URIs referring to sub repositories
 	 */
-	protected void writeChildren(List children) {
-		if (children.size() == 0)
+	protected void writeChildren(URI[] children) {
+		if (children == null || children.length == 0)
 			return;
 		start(CHILDREN_ELEMENT);
-		attribute(COLLECTION_SIZE_ATTRIBUTE, children.size());
-		for (Iterator iter = children.iterator(); iter.hasNext();)
-			writeChild((URI) iter.next());
+		attribute(COLLECTION_SIZE_ATTRIBUTE, children.length);
+		for (int i = 0; i < children.length; i++)
+			writeChild(children[i]);
 		end(CHILDREN_ELEMENT);
 	}
 
@@ -55,7 +53,7 @@ public class CompositeWriter extends XMLWriter implements XMLConstants {
 	/**
 	 * Write the given composite repository to the output stream.
 	 */
-	public void write(ICompositeRepository repository) {
+	public void write(CompositeRepositoryState repository) {
 		start(REPOSITORY_ELEMENT);
 		attribute(NAME_ATTRIBUTE, repository.getName());
 		attribute(TYPE_ATTRIBUTE, repository.getType());
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/repository/ICompositeRepository.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/repository/ICompositeRepository.java
index 881e157..b6f6a1b 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/repository/ICompositeRepository.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/repository/ICompositeRepository.java
@@ -11,14 +11,14 @@
 package org.eclipse.equinox.internal.provisional.p2.core.repository;
 
 import java.net.URI;
-import java.util.ArrayList;
+import java.util.List;
 
 public interface ICompositeRepository extends IRepository {
 	/**
 	 * 
-	 * @return an ArrayList of URIs containing the locations of the children repositories
+	 * @return a list of URIs containing the locations of the children repositories
 	 */
-	public abstract ArrayList getChildren();
+	public abstract List getChildren();
 
 	/**
 	 * Removes all child repositories
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/CompositeMetadataRepository.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/CompositeMetadataRepository.java
index 4b8829f..b7607d4 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/CompositeMetadataRepository.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/CompositeMetadataRepository.java
@@ -21,7 +21,7 @@ import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.persistence.CompositeRepositoryIO;
-import org.eclipse.equinox.internal.p2.persistence.CompositeRepositoryIO.CompositeRepositoryState;
+import org.eclipse.equinox.internal.p2.persistence.CompositeRepositoryState;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.ICompositeRepository;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
@@ -39,7 +39,7 @@ public class CompositeMetadataRepository extends AbstractMetadataRepository impl
 	static final public String XML_EXTENSION = ".xml"; //$NON-NLS-1$
 	static final private String JAR_EXTENSION = ".jar"; //$NON-NLS-1$
 
-	private ArrayList childrenURIs = new ArrayList();
+	private List childrenURIs = new ArrayList();
 
 	/**
 	 * Create a Composite repository in memory.
@@ -67,6 +67,15 @@ public class CompositeMetadataRepository extends AbstractMetadataRepository impl
 		return null;
 	}
 
+	/*
+	 * Add the given object to the specified list if it doesn't already exist
+	 * in it. Return a boolean value indicating whether or not the object was 
+	 * actually added.
+	 */
+	private static boolean add(List list, Object obj) {
+		return list.contains(obj) ? false : list.add(obj);
+	}
+
 	static private IMetadataRepositoryManager getManager() {
 		return (IMetadataRepositoryManager) ServiceHelper.getService(Activator.getContext(), IMetadataRepositoryManager.class.getName());
 	}
@@ -89,11 +98,27 @@ public class CompositeMetadataRepository extends AbstractMetadataRepository impl
 	 * This is only called by the parser when loading a repository.
 	 */
 	public CompositeMetadataRepository(CompositeRepositoryState state) {
-		super(state.Name, state.Type, state.Version, null, state.Description, state.Provider, state.Properties);
-		for (int i = 0; i < state.Children.length; i++) {
-			if (!childrenURIs.contains(state.Children[i]))
-				childrenURIs.add(state.Children[i]);
-		}
+		super(state.getName(), state.getType(), state.getVersion(), null, state.getDescription(), state.getProvider(), state.getProperties());
+		for (int i = 0; i < state.getChildren().length; i++)
+			add(childrenURIs, state.getChildren()[i]);
+	}
+
+	/*
+	 * Create and return a new repository state object which represents this repository.
+	 * It will be used while persisting the repository to disk.
+	 */
+	public CompositeRepositoryState toState() {
+		CompositeRepositoryState result = new CompositeRepositoryState();
+		result.setName(getName());
+		result.setType(getType());
+		result.setVersion(getVersion());
+		result.setLocation(getLocation());
+		result.setDescription(getDescription());
+		result.setProvider(getProvider());
+		result.setProperties(getProperties());
+		// it is important to directly access the field so we have the relative URIs
+		result.setChildren((URI[]) childrenURIs.toArray(new URI[childrenURIs.size()]));
+		return result;
 	}
 
 	// use this method to setup any transient fields etc after the object has been restored from a stream
@@ -102,12 +127,13 @@ public class CompositeMetadataRepository extends AbstractMetadataRepository impl
 	}
 
 	public Collector query(Query query, Collector collector, IProgressMonitor monitor) {
-		Iterator repositoryIterator = childrenURIs.iterator();
-		SubMonitor sub = SubMonitor.convert(monitor, Messages.repo_loading, 20 * childrenURIs.size());
+		// call #getChildren here so the URIs are made absolute and can be handed off to the manager for loading
+		List children = getChildren();
+		SubMonitor sub = SubMonitor.convert(monitor, Messages.repo_loading, 20 * children.size());
 		try {
-			List repositories = new ArrayList(childrenURIs.size());
-			SubMonitor loopMonitor = sub.newChild(10 * childrenURIs.size());
-			while (repositoryIterator.hasNext()) {
+			List repositories = new ArrayList(children.size());
+			SubMonitor loopMonitor = sub.newChild(10 * children.size());
+			for (Iterator repositoryIterator = children.iterator(); repositoryIterator.hasNext();) {
 				try {
 					//Try to load the repositories one by one
 					URI currentURI = (URI) repositoryIterator.next();
@@ -129,7 +155,7 @@ public class CompositeMetadataRepository extends AbstractMetadataRepository impl
 			loopMonitor.done();
 
 			// Query all the all the repositories this composite repo contains
-			SubMonitor queryMonitor = sub.newChild(10 * childrenURIs.size());
+			SubMonitor queryMonitor = sub.newChild(10 * children.size());
 			CompoundQueryable queryable = new CompoundQueryable((IQueryable[]) repositories.toArray(new IQueryable[repositories.size()]));
 			collector = queryable.query(query, collector, queryMonitor);
 			queryMonitor.done();
@@ -141,15 +167,22 @@ public class CompositeMetadataRepository extends AbstractMetadataRepository impl
 	}
 
 	public void addChild(URI childURI) {
-		if (!childrenURIs.contains(childURI)) {
-			childrenURIs.add(childURI);
+		if (add(childrenURIs, childURI))
 			save();
-		}
 	}
 
 	public void removeChild(URI childURI) {
-		childrenURIs.remove(childURI);
-		save();
+		boolean removed = childrenURIs.remove(childURI);
+		// if the child wasn't there make sure and try the other permutation
+		// (absolute/relative) to see if it really is in the list.
+		if (!removed) {
+			if (childURI.isAbsolute())
+				removed = childrenURIs.remove(URIUtil.makeRelative(childURI, location));
+			else
+				removed = childrenURIs.remove(URIUtil.makeAbsolute(childURI, location));
+		}
+		if (removed)
+			save();
 	}
 
 	public void removeAllChildren() {
@@ -226,14 +259,17 @@ public class CompositeMetadataRepository extends AbstractMetadataRepository impl
 				output = jOutput;
 			}
 			super.setProperty(IRepository.PROP_TIMESTAMP, Long.toString(System.currentTimeMillis()));
-			new CompositeRepositoryIO().write(this, output, XML_REPO_TYPE);
+			new CompositeRepositoryIO().write(toState(), output, XML_REPO_TYPE);
 		} catch (IOException e) {
 			LogHelper.log(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_FAILED_WRITE, "Error saving metadata repository: " + location, e)); //$NON-NLS-1$
 		}
 	}
 
-	public ArrayList getChildren() {
-		return childrenURIs;
+	public List getChildren() {
+		List result = new ArrayList();
+		for (Iterator iter = childrenURIs.iterator(); iter.hasNext();)
+			result.add(URIUtil.makeAbsolute((URI) iter.next(), location));
+		return result;
 	}
 
 	public static URI getActualLocationURI(URI base, String extension) {
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/CompositeMetadataRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/CompositeMetadataRepositoryFactory.java
index 3ddef1b..a066ba7 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/CompositeMetadataRepositoryFactory.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/CompositeMetadataRepositoryFactory.java
@@ -18,7 +18,7 @@ import java.util.jar.JarInputStream;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.Tracing;
 import org.eclipse.equinox.internal.p2.persistence.CompositeRepositoryIO;
-import org.eclipse.equinox.internal.p2.persistence.CompositeRepositoryIO.CompositeRepositoryState;
+import org.eclipse.equinox.internal.p2.persistence.CompositeRepositoryState;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.internal.provisional.spi.p2.metadata.repository.MetadataRepositoryFactory;
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/CompositeArtifactRepositoryTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/CompositeArtifactRepositoryTest.java
index b39b3e0..1a62b8a 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/CompositeArtifactRepositoryTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/artifact/repository/CompositeArtifactRepositoryTest.java
@@ -21,6 +21,7 @@ import org.eclipse.equinox.internal.p2.artifact.repository.ArtifactRepositoryMan
 import org.eclipse.equinox.internal.p2.artifact.repository.CompositeArtifactRepository;
 import org.eclipse.equinox.internal.p2.artifact.repository.simple.SimpleArtifactRepository;
 import org.eclipse.equinox.internal.p2.core.helpers.OrderedProperties;
+import org.eclipse.equinox.internal.p2.persistence.CompositeRepositoryState;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.*;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.core.Version;
@@ -573,7 +574,7 @@ public class CompositeArtifactRepositoryTest extends AbstractProvisioningTest {
 			fail("Error Loading repository", e);
 		}
 
-		ArrayList children = compRepo.getChildren();
+		List children = compRepo.getChildren();
 
 		try {
 			//ensure children are correct
@@ -821,4 +822,62 @@ public class CompositeArtifactRepositoryTest extends AbstractProvisioningTest {
 			fail("99.0", e);
 		}
 	}
+
+	public void testRelativeChildren() {
+		// setup
+		File one = getTestData("0.0", "testData/testRepos/simple.1");
+		File two = getTestData("0.1", "testData/testRepos/simple.2");
+		File temp = getTempFolder();
+		copy("0.2", one, new File(temp, "one"));
+		copy("0.3", two, new File(temp, "two"));
+
+		// create the composite repository and add the children
+		URI location = new File(temp, "comp").toURI();
+		CompositeArtifactRepository repository = new CompositeArtifactRepository(location, "test", null);
+		try {
+			repository.addChild(new URI("../one"));
+			repository.addChild(new URI("../two"));
+		} catch (URISyntaxException e) {
+			fail("1.99", e);
+		}
+
+		// query the number of artifacts
+		List children = repository.getChildren();
+		assertEquals("2.0", 2, children.size());
+		IArtifactKey[] keys = repository.getArtifactKeys();
+		assertEquals("2.1", 2, keys.length);
+
+		// ensure the child URIs are stored as relative
+		CompositeRepositoryState state = repository.toState();
+		URI[] childURIs = state.getChildren();
+		assertNotNull("3.0", childURIs);
+		assertEquals("3.1", 2, childURIs.length);
+		assertFalse("3.2", childURIs[0].isAbsolute());
+		assertFalse("3.3", childURIs[1].isAbsolute());
+
+		// cleanup
+		delete(temp);
+	}
+
+	public void testRelativeRemoveChild() {
+		try {
+			URI location = new URI("memory:/in/memory");
+			URI one = new URI("one");
+			URI two = new URI("two");
+			CompositeArtifactRepository repository = new CompositeArtifactRepository(location, "in memory test", null);
+			repository.addChild(one);
+			repository.addChild(two);
+			List children = repository.getChildren();
+			assertEquals("1.0", 2, children.size());
+			// remove an absolute URI (child one should be first since order is important)
+			repository.removeChild((URI) children.iterator().next());
+			assertEquals("1.1", 1, repository.getChildren().size());
+			// remove a relative URI (child two)
+			repository.removeChild(two);
+			assertEquals("1.2", 0, repository.getChildren().size());
+		} catch (URISyntaxException e) {
+			fail("99.0", e);
+		}
+	}
+
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/CompositeMetadataRepositoryTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/CompositeMetadataRepositoryTest.java
index bb71053..4638539 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/CompositeMetadataRepositoryTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/CompositeMetadataRepositoryTest.java
@@ -19,6 +19,7 @@ import java.util.*;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.metadata.repository.CompositeMetadataRepository;
 import org.eclipse.equinox.internal.p2.metadata.repository.CompositeMetadataRepositoryFactory;
+import org.eclipse.equinox.internal.p2.persistence.CompositeRepositoryState;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.core.Version;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
@@ -319,7 +320,7 @@ public class CompositeMetadataRepositoryTest extends AbstractProvisioningTest {
 			fail("Error Loading repository", e);
 		}
 
-		ArrayList children = compRepo.getChildren();
+		List children = compRepo.getChildren();
 
 		try {
 			//ensure children are correct
@@ -563,4 +564,62 @@ public class CompositeMetadataRepositoryTest extends AbstractProvisioningTest {
 			fail("99.0", e);
 		}
 	}
+
+	public void testRelativeChildren() {
+		// setup
+		File one = getTestData("0.0", "testData/testRepos/simple.1");
+		File two = getTestData("0.1", "testData/testRepos/simple.2");
+		File temp = getTempFolder();
+		copy("0.2", one, new File(temp, "one"));
+		copy("0.3", two, new File(temp, "two"));
+
+		// create the composite repository and add the children
+		URI location = new File(temp, "comp").toURI();
+		CompositeMetadataRepository repository = new CompositeMetadataRepository(location, "test", null);
+		try {
+			repository.addChild(new URI("../one"));
+			repository.addChild(new URI("../two"));
+		} catch (URISyntaxException e) {
+			fail("1.99", e);
+		}
+
+		// query the number of IUs
+		List children = repository.getChildren();
+		assertEquals("2.0", 2, children.size());
+		Collector collector = repository.query(InstallableUnitQuery.ANY, new Collector(), getMonitor());
+		assertEquals("2.1", 2, collector.size());
+
+		// ensure the child URIs are stored as relative
+		CompositeRepositoryState state = repository.toState();
+		URI[] childURIs = state.getChildren();
+		assertNotNull("3.0", childURIs);
+		assertEquals("3.1", 2, childURIs.length);
+		assertFalse("3.2", childURIs[0].isAbsolute());
+		assertFalse("3.3", childURIs[1].isAbsolute());
+
+		// cleanup
+		delete(temp);
+	}
+
+	public void testRelativeRemoveChild() {
+		try {
+			URI location = new URI("memory:/in/memory");
+			URI one = new URI("one");
+			URI two = new URI("two");
+			CompositeMetadataRepository repository = new CompositeMetadataRepository(location, "in memory test", null);
+			repository.addChild(one);
+			repository.addChild(two);
+			List children = repository.getChildren();
+			assertEquals("1.0", 2, children.size());
+			// remove an absolute URI (child one should be first since order is important)
+			repository.removeChild((URI) children.iterator().next());
+			assertEquals("1.1", 1, repository.getChildren().size());
+			// remove a relative URI (child two)
+			repository.removeChild(two);
+			assertEquals("1.2", 0, repository.getChildren().size());
+		} catch (URISyntaxException e) {
+			fail("99.0", e);
+		}
+	}
+
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/testRepos/simple.1/artifacts.xml b/bundles/org.eclipse.equinox.p2.tests/testData/testRepos/simple.1/artifacts.xml
new file mode 100644
index 0000000..15ee487
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests/testData/testRepos/simple.1/artifacts.xml
@@ -0,0 +1,23 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<?artifactRepository class='org.eclipse.equinox.internal.p2.artifact.repository.simple.SimpleArtifactRepository' version='1.0.0'?>
+<repository name='Test Artifact Repository' type='org.eclipse.equinox.p2.artifact.repository.simpleRepository' version='1'>
+  <properties size='2'>
+    <property name='p2.compressed' value='false'/>
+    <property name='p2.timestamp' value='1232060468755'/>
+  </properties>
+  <mappings size='3'>
+    <rule filter='(&amp; (classifier=osgi.bundle))' output='${repoUrl}/plugins/${id}_${version}.jar'/>
+    <rule filter='(&amp; (classifier=binary))' output='${repoUrl}/binary/${id}_${version}'/>
+    <rule filter='(&amp; (classifier=org.eclipse.update.feature))' output='${repoUrl}/features/${id}_${version}.jar'/>
+  </mappings>
+  <artifacts size='1'>
+    <artifact classifier='osgi.bundle' id='aBundle' version='1.0.0'>
+      <properties size='4'>
+        <property name='artifact.size' value='319'/>
+        <property name='download.size' value='319'/>
+        <property name='download.md5' value='1977e840df1f69b5392120a653ebbcd1'/>
+        <property name='download.contentType' value='application/zip'/>
+      </properties>
+    </artifact>
+  </artifacts>
+</repository>
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/testRepos/simple.1/content.xml b/bundles/org.eclipse.equinox.p2.tests/testData/testRepos/simple.1/content.xml
new file mode 100644
index 0000000..a6241b0
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests/testData/testRepos/simple.1/content.xml
@@ -0,0 +1,32 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<?metadataRepository class='org.eclipse.equinox.internal.p2.metadata.repository.LocalMetadataRepository' version='1.0.0'?>
+<repository name='Test Metadata Repository' type='org.eclipse.equinox.internal.p2.metadata.repository.LocalMetadataRepository' version='1'>
+  <properties size='2'>
+    <property name='p2.compressed' value='false'/>
+    <property name='p2.timestamp' value='1232060468765'/>
+  </properties>
+  <units size='1'>
+    <unit id='aBundle' version='1.0.0' singleton='false'>
+      <update id='aBundle' range='[0.0.0,1.0.0)' severity='0'/>
+      <properties size='1'>
+        <property name='org.eclipse.equinox.p2.name' value='ABundle Plug-in'/>
+      </properties>
+      <provides size='3'>
+        <provided namespace='org.eclipse.equinox.p2.iu' name='aBundle' version='1.0.0'/>
+        <provided namespace='osgi.bundle' name='aBundle' version='1.0.0'/>
+        <provided namespace='org.eclipse.equinox.p2.eclipse.type' name='bundle' version='1.0.0'/>
+      </provides>
+      <artifacts size='1'>
+        <artifact classifier='osgi.bundle' id='aBundle' version='1.0.0'/>
+      </artifacts>
+      <touchpoint id='org.eclipse.equinox.p2.osgi' version='1.0.0'/>
+      <touchpointData size='1'>
+        <instructions size='1'>
+          <instruction key='manifest'>
+            Bundle-SymbolicName: aBundle&#xA;Bundle-ManifestVersion: 2&#xA;Bundle-Version: 1.0.0&#xA;Bundle-Name: ABundle Plug-in&#xA;Manifest-Version: 1.0&#xA;
+          </instruction>
+        </instructions>
+      </touchpointData>
+    </unit>
+  </units>
+</repository>
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/testRepos/simple.1/plugins/aBundle_1.0.0.jar b/bundles/org.eclipse.equinox.p2.tests/testData/testRepos/simple.1/plugins/aBundle_1.0.0.jar
new file mode 100644
index 0000000..6050d4e
Binary files /dev/null and b/bundles/org.eclipse.equinox.p2.tests/testData/testRepos/simple.1/plugins/aBundle_1.0.0.jar differ
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/testRepos/simple.2/artifacts.xml b/bundles/org.eclipse.equinox.p2.tests/testData/testRepos/simple.2/artifacts.xml
new file mode 100644
index 0000000..06ae218
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests/testData/testRepos/simple.2/artifacts.xml
@@ -0,0 +1,23 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<?artifactRepository class='org.eclipse.equinox.internal.p2.artifact.repository.simple.SimpleArtifactRepository' version='1.0.0'?>
+<repository name='Test Artifact Repository' type='org.eclipse.equinox.p2.artifact.repository.simpleRepository' version='1'>
+  <properties size='2'>
+    <property name='p2.compressed' value='false'/>
+    <property name='p2.timestamp' value='1232060468755'/>
+  </properties>
+  <mappings size='3'>
+    <rule filter='(&amp; (classifier=osgi.bundle))' output='${repoUrl}/plugins/${id}_${version}.jar'/>
+    <rule filter='(&amp; (classifier=binary))' output='${repoUrl}/binary/${id}_${version}'/>
+    <rule filter='(&amp; (classifier=org.eclipse.update.feature))' output='${repoUrl}/features/${id}_${version}.jar'/>
+  </mappings>
+  <artifacts size='1'>
+    <artifact classifier='osgi.bundle' id='aBundle' version='1.0.1'>
+      <properties size='4'>
+        <property name='artifact.size' value='319'/>
+        <property name='download.size' value='319'/>
+        <property name='download.md5' value='1977e840df1f69b5392120a653ebbcd1'/>
+        <property name='download.contentType' value='application/zip'/>
+      </properties>
+    </artifact>
+  </artifacts>
+</repository>
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/testRepos/simple.2/content.xml b/bundles/org.eclipse.equinox.p2.tests/testData/testRepos/simple.2/content.xml
new file mode 100644
index 0000000..07a8fba
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests/testData/testRepos/simple.2/content.xml
@@ -0,0 +1,32 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<?metadataRepository class='org.eclipse.equinox.internal.p2.metadata.repository.LocalMetadataRepository' version='1.0.0'?>
+<repository name='Test Metadata Repository' type='org.eclipse.equinox.internal.p2.metadata.repository.LocalMetadataRepository' version='1'>
+  <properties size='2'>
+    <property name='p2.compressed' value='false'/>
+    <property name='p2.timestamp' value='1232060468765'/>
+  </properties>
+  <units size='1'>
+    <unit id='aBundle' version='1.0.1' singleton='false'>
+      <update id='aBundle' range='[0.0.0,1.0.1)' severity='0'/>
+      <properties size='1'>
+        <property name='org.eclipse.equinox.p2.name' value='ABundle Plug-in'/>
+      </properties>
+      <provides size='3'>
+        <provided namespace='org.eclipse.equinox.p2.iu' name='aBundle' version='1.0.0'/>
+        <provided namespace='osgi.bundle' name='aBundle' version='1.0.0'/>
+        <provided namespace='org.eclipse.equinox.p2.eclipse.type' name='bundle' version='1.0.0'/>
+      </provides>
+      <artifacts size='1'>
+        <artifact classifier='osgi.bundle' id='aBundle' version='1.0.1'/>
+      </artifacts>
+      <touchpoint id='org.eclipse.equinox.p2.osgi' version='1.0.0'/>
+      <touchpointData size='1'>
+        <instructions size='1'>
+          <instruction key='manifest'>
+            Bundle-SymbolicName: aBundle&#xA;Bundle-ManifestVersion: 2&#xA;Bundle-Version: 1.0.1&#xA;Bundle-Name: ABundle Plug-in&#xA;Manifest-Version: 1.0&#xA;
+          </instruction>
+        </instructions>
+      </touchpointData>
+    </unit>
+  </units>
+</repository>
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/testRepos/simple.2/plugins/aBundle_1.0.1.jar b/bundles/org.eclipse.equinox.p2.tests/testData/testRepos/simple.2/plugins/aBundle_1.0.1.jar
new file mode 100644
index 0000000..9e1c615
Binary files /dev/null and b/bundles/org.eclipse.equinox.p2.tests/testData/testRepos/simple.2/plugins/aBundle_1.0.1.jar differ

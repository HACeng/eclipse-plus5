commit 1e88ef442bef32d3b52361b93276054cdbe9f057
Author: John Arthorne <johna>
Date:   Thu Oct 11 20:19:11 2007 +0000

    Bug 203340 [prov] Shorter agent data paths

2	2	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/BasicLocation.java
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/BasicLocation.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/BasicLocation.java
index 55e70b3..00f5826 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/BasicLocation.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/BasicLocation.java
@@ -183,7 +183,7 @@ public class BasicLocation implements AgentLocation {
 
 	public URL getArtifactRepositoryURL() {
 		try {
-			return new URL(getURL(), "artifactRepository/");
+			return new URL(getURL(), "artifacts/");
 		} catch (MalformedURLException e) {
 			// TODO Auto-generated catch block
 			return null;
@@ -192,7 +192,7 @@ public class BasicLocation implements AgentLocation {
 
 	public URL getMetadataRepositoryURL() {
 		try {
-			return new URL(getURL(), "metadataRepository/");
+			return new URL(getURL(), "metadata/");
 		} catch (MalformedURLException e) {
 			// TODO Auto-generated catch block
 			return null;
commit 1e1c270c3837a4815872857fa00adb374bc38dcd
Author: John Arthorne <johna>
Date:   Mon Oct 29 14:24:31 2007 +0000

    Bug 203340 [prov] Shorter agent data paths

16	13	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/Activator.java
5	9	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/BasicLocation.java
7	1	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/p2/core/location/AgentLocation.java
13	3	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/SimpleDirector.java
18	9	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/SimpleProfileRegistry.java
16	9	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/installregistry/InstallRegistry.java
12	2	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/RollbackTest.java
1	1	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Activator.java
8	10	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
7	11	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Util.java
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/Activator.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/Activator.java
index 7f462ca..2665db5 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/Activator.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/Activator.java
@@ -20,27 +20,30 @@ import org.osgi.framework.*;
 import org.osgi.util.tracker.ServiceTracker;
 
 public class Activator implements BundleActivator {
+	public static final String ID = "org.eclipse.equinox.p2.core"; //$NON-NLS-1$
 
-	public static final String AGENT_DATA_AREA = "eclipse.p2.data.area"; //$NON-NLS-1$
 	public static Location agentDataLocation = null;
-
 	public static BundleContext context;
+	private static final String DEFAULT_AGENT_LOCATION = "p2"; //$NON-NLS-1$
+
 	public static Location downloadLocation = null;
 	private static Activator instance;
 	// Data mode constants for user, configuration and data locations.
 	private static final String NO_DEFAULT = "@noDefault"; //$NON-NLS-1$
 	private static final String NONE = "@none"; //$NON-NLS-1$
+	private static final String OSGI_INSTALL_AREA = "osgi.install.area"; //$NON-NLS-1$
 
+	private static final String PROP_AGENT_DATA_AREA = "eclipse.p2.data.area"; //$NON-NLS-1$
 	private static final String PROP_CONFIG_DIR = "osgi.configuration.area"; //$NON-NLS-1$
-	public static final String PROP_TMPDIR = "java.io.tmpdir"; //$NON-NLS-1$
-	public static final String PROP_USER_DIR = "user.dir"; //$NON-NLS-1$
-	public static final String PROP_USER_HOME = "user.home"; //$NON-NLS-1$
+	private static final String PROP_USER_DIR = "user.dir"; //$NON-NLS-1$
+	private static final String PROP_USER_HOME = "user.home"; //$NON-NLS-1$
 
 	public static final String READ_ONLY_AREA_SUFFIX = ".readOnly"; //$NON-NLS-1$
 
 	private static final String VAR_CONFIG_DIR = "@config.dir"; //$NON-NLS-1$
 	private static final String VAR_USER_DIR = "@user.dir"; //$NON-NLS-1$
 	private static final String VAR_USER_HOME = "@user.home"; //$NON-NLS-1$
+
 	private ServiceRegistration agentLocationRegistration = null;
 	ServiceTracker logTracker;
 
@@ -103,7 +106,7 @@ public class Activator implements BundleActivator {
 	private static String substituteVar(String source, String var, String prop) {
 		String value = Activator.context.getProperty(prop);
 		if (value == null)
-			value = "";
+			value = ""; //$NON-NLS-1$
 		return value + source.substring(var.length());
 	}
 
@@ -151,19 +154,19 @@ public class Activator implements BundleActivator {
 		return logTracker;
 	}
 
-	public void start(BundleContext context) throws Exception {
+	public void start(BundleContext aContext) throws Exception {
 		instance = this;
-		Activator.context = context;
-		URL defaultLocation = new URL(context.getProperty("osgi.configuration.area") + "org.eclipse.equinox.p2.core/agentdata/");
-		agentDataLocation = buildLocation(AGENT_DATA_AREA, defaultLocation, false, true);
+		Activator.context = aContext;
+		URL defaultLocation = new URL(aContext.getProperty(OSGI_INSTALL_AREA) + DEFAULT_AGENT_LOCATION + '/');
+		agentDataLocation = buildLocation(PROP_AGENT_DATA_AREA, defaultLocation, false, true);
 		Dictionary locationProperties = new Hashtable();
 		if (defaultLocation != null) {
-			locationProperties.put("type", AGENT_DATA_AREA); //$NON-NLS-1$
-			agentLocationRegistration = context.registerService(new String[] {Location.class.getName(), AgentLocation.class.getName()}, agentDataLocation, locationProperties);
+			locationProperties.put("type", PROP_AGENT_DATA_AREA); //$NON-NLS-1$
+			agentLocationRegistration = aContext.registerService(new String[] {Location.class.getName(), AgentLocation.class.getName()}, agentDataLocation, locationProperties);
 		}
 	}
 
-	public void stop(BundleContext context) throws Exception {
+	public void stop(BundleContext aContext) throws Exception {
 		instance = null;
 		if (agentLocationRegistration != null)
 			agentLocationRegistration.unregister();
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/BasicLocation.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/BasicLocation.java
index 00f5826..54fb9fc 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/BasicLocation.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/BasicLocation.java
@@ -182,26 +182,22 @@ public class BasicLocation implements AgentLocation {
 	}
 
 	public URL getArtifactRepositoryURL() {
-		try {
-			return new URL(getURL(), "artifacts/");
-		} catch (MalformedURLException e) {
-			// TODO Auto-generated catch block
-			return null;
-		}
+		//the cache is a co-located repository
+		return getMetadataRepositoryURL();
 	}
 
 	public URL getMetadataRepositoryURL() {
 		try {
-			return new URL(getURL(), "metadata/");
+			return new URL(getDataArea(Activator.ID), "cache/"); //$NON-NLS-1$
 		} catch (MalformedURLException e) {
 			// TODO Auto-generated catch block
 			return null;
 		}
 	}
 
-	public URL getTouchpointDataArea(String touchpointId) {
+	public URL getDataArea(String touchpointId) {
 		try {
-			return new URL(getURL(), "touchpoints/" + touchpointId);
+			return new URL(getURL(), touchpointId + '/');
 		} catch (MalformedURLException e) {
 			// TODO Auto-generated catch block
 			return null;
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/p2/core/location/AgentLocation.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/p2/core/location/AgentLocation.java
index 53d0c3c..6f0988e 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/p2/core/location/AgentLocation.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/p2/core/location/AgentLocation.java
@@ -23,5 +23,11 @@ public interface AgentLocation extends Location {
 
 	public URL getMetadataRepositoryURL();
 
-	public URL getTouchpointDataArea(String touchpointId);
+	/**
+	 * Returns the location where the bundle with the given namespace
+	 * may write its agent-related data.
+	 * @param namespace The namespace of the bundle storing the data
+	 * @return The data location
+	 */
+	public URL getDataArea(String namespace);
 }
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/SimpleDirector.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/SimpleDirector.java
index 28581dd..eb4e372 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/SimpleDirector.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/SimpleDirector.java
@@ -8,6 +8,7 @@
  ******************************************************************************/
 package org.eclipse.equinox.p2.director;
 
+import java.net.MalformedURLException;
 import java.net.URL;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.director.DirectorActivator;
@@ -25,6 +26,7 @@ import org.eclipse.equinox.p2.metadata.repository.IMetadataRepositoryManager;
 import org.eclipse.osgi.util.NLS;
 
 public class SimpleDirector implements IDirector {
+	private static final String ROLLBACK_LOCATION = "rollback"; //$NON-NLS-1$
 	static final int PlanWork = 10;
 	static final int EngineWork = 100;
 	private Engine engine;
@@ -38,9 +40,7 @@ public class SimpleDirector implements IDirector {
 	}
 
 	public SimpleDirector() {
-		URL rollbackLocation = null;
-		AgentLocation agentLocation = (AgentLocation) ServiceHelper.getService(DirectorActivator.context, AgentLocation.class.getName());
-		rollbackLocation = agentLocation.getTouchpointDataArea("director");
+		URL rollbackLocation = getRollbackLocation();
 		ProvisioningEventBus eventBus = (ProvisioningEventBus) ServiceHelper.getService(DirectorActivator.context, ProvisioningEventBus.class.getName());
 		IMetadataRepositoryManager manager = (IMetadataRepositoryManager) ServiceHelper.getService(DirectorActivator.context, IMetadataRepositoryManager.class.getName());
 		IMetadataRepository rollbackRepo = manager.loadRepository(rollbackLocation, null);
@@ -58,6 +58,16 @@ public class SimpleDirector implements IDirector {
 			throw new IllegalStateException("Unable to find provisioning planner");
 	}
 
+	private URL getRollbackLocation() {
+		AgentLocation agentLocation = (AgentLocation) ServiceHelper.getService(DirectorActivator.context, AgentLocation.class.getName());
+		try {
+			return new URL(agentLocation.getDataArea(DirectorActivator.PI_DIRECTOR), ROLLBACK_LOCATION);
+		} catch (MalformedURLException e) {
+			//we know this can't happen because the above URL is well-formed
+			return null;
+		}
+	}
+
 	public IStatus install(IInstallableUnit[] installRoots, Profile profile, IProgressMonitor monitor) {
 		String taskName = NLS.bind(Messages.Director_Task_Installing, profile.getValue(Profile.PROP_INSTALL_FOLDER));
 		SubMonitor sub = SubMonitor.convert(monitor, taskName, PlanWork + EngineWork);
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/SimpleProfileRegistry.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/SimpleProfileRegistry.java
index 338dd44..61c9b3c 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/SimpleProfileRegistry.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/SimpleProfileRegistry.java
@@ -9,6 +9,7 @@
 package org.eclipse.equinox.p2.engine;
 
 import java.io.*;
+import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.*;
 import javax.xml.parsers.ParserConfigurationException;
@@ -98,15 +99,21 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 		((ProvisioningEventBus) ServiceHelper.getService(EngineActivator.getContext(), ProvisioningEventBus.class.getName())).publishEvent(new ProfileEvent(profile, reason));
 	}
 
+	private URL getRegistryLocation() {
+		AgentLocation agent = (AgentLocation) ServiceHelper.getService(EngineActivator.getContext(), AgentLocation.class.getName());
+		try {
+			return new URL(agent.getDataArea(EngineActivator.ID), STORAGE);
+		} catch (MalformedURLException e) {
+			//this is not possible because we know the above URL is valid
+		}
+		return null;
+	}
+
 	private void restore() {
 		try {
 			BufferedInputStream bif = null;
 			try {
-				Location agent = (Location) ServiceHelper.getService(EngineActivator.getContext(), AgentLocation.class.getName());
-				if (agent == null)
-					// TODO should likely do something here since we failed to restore.
-					return;
-				bif = new BufferedInputStream(new URL(agent.getURL(), STORAGE).openStream());
+				bif = new BufferedInputStream(getRegistryLocation().openStream());
 				//				XStream xml = new XStream();
 				//				Object[] read = (Object[]) xml.fromXML(bif);
 				//				properties = (OrderedProperties) read[0];
@@ -133,12 +140,14 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 			if (agent == null)
 				// TODO should likely do something here since we failed to persist.
 				return;
-			if (!agent.getURL().getProtocol().equals("file"))
-				throw new IOException("can't write at the given location");
 
-			File outputFile = new File(agent.getURL().getFile(), STORAGE);
+			URL registryLocation = getRegistryLocation();
+			if (!registryLocation.getProtocol().equals("file")) //$NON-NLS-1$
+				throw new IOException("Can't write profile registry at: " + registryLocation);
+
+			File outputFile = new File(registryLocation.toExternalForm().substring(5));
 			if (!outputFile.getParentFile().exists() && !outputFile.getParentFile().mkdirs())
-				throw new RuntimeException("can't persist profile registry at: " + outputFile);
+				throw new RuntimeException("Can't persist profile registry at: " + outputFile);
 			os = new BufferedOutputStream(new FileOutputStream(outputFile));
 			try {
 				//				XStream xstream = new XStream();
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/installregistry/InstallRegistry.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/installregistry/InstallRegistry.java
index 6981bb1..0f52503 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/installregistry/InstallRegistry.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/installregistry/InstallRegistry.java
@@ -11,6 +11,7 @@
 package org.eclipse.equinox.p2.installregistry;
 
 import java.io.*;
+import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.*;
 import javax.xml.parsers.ParserConfigurationException;
@@ -98,16 +99,12 @@ public class InstallRegistry implements IInstallRegistry {
 		try {
 			BufferedOutputStream bof = null;
 			try {
-				Location agent = (Location) ServiceHelper.getService(EngineActivator.getContext(), AgentLocation.class.getName());
-				if (agent == null)
-					// TODO should likely do something here since we failed to persist.
-					return;
-				if (!agent.getURL().getProtocol().equals("file"))
-					throw new IOException("can't write at the given location");
-
-				File outputFile = new File(agent.getURL().getFile(), STORAGE);
+				URL registryLocation = getRegistryLocation();
+				if (!registryLocation.getProtocol().equals("file")) //$NON-NLS-1$
+					throw new IOException("Can't write install registry at: " + registryLocation);
+				File outputFile = new File(registryLocation.toExternalForm().substring(5));
 				if (!outputFile.getParentFile().exists() && !outputFile.getParentFile().mkdirs())
-					throw new RuntimeException("can't persist profile registry");
+					throw new RuntimeException("Can't persist profile registry");
 				bof = new BufferedOutputStream(new FileOutputStream(outputFile, false));
 				//new XStream().toXML(profileRegistries, bof);
 				Writer writer = new Writer(bof);
@@ -168,6 +165,16 @@ public class InstallRegistry implements IInstallRegistry {
 		return this;
 	}
 
+	private URL getRegistryLocation() {
+		AgentLocation agent = (AgentLocation) ServiceHelper.getService(EngineActivator.getContext(), AgentLocation.class.getName());
+		try {
+			return new URL(agent.getDataArea(EngineActivator.ID), STORAGE);
+		} catch (MalformedURLException e) {
+			//this is not possible because we know the above URL is valid
+		}
+		return null;
+	}
+
 	protected class IUIdentity {
 
 		private String id;
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/RollbackTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/RollbackTest.java
index 27efb8a..f526009 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/RollbackTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/RollbackTest.java
@@ -8,6 +8,7 @@
  ******************************************************************************/
 package org.eclipse.equinox.p2.tests.director;
 
+import java.net.MalformedURLException;
 import java.net.URL;
 import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.equinox.internal.p2.director.DirectorActivator;
@@ -44,12 +45,21 @@ public class RollbackTest extends AbstractProvisioningTest {
 		printProfile(profile);
 		IMetadataRepositoryManager repoMan = (IMetadataRepositoryManager) ServiceHelper.getService(TestActivator.getContext(), IMetadataRepositoryManager.class.getName());
 		IMetadataRepository repo = null;
-		URL location = ((AgentLocation) ServiceHelper.getService(DirectorActivator.context, AgentLocation.class.getName())).getTouchpointDataArea("director");
-		repo = repoMan.getRepository(location);
+		repo = repoMan.getRepository(getRollbackRepository());
 		IInstallableUnit[] ius = repo.getInstallableUnits(null);
 		for (int i = 0; i < ius.length; i++)
 			System.out.println(ius[i]);
 		director.become(ius[0], profile, new NullProgressMonitor());
 		printProfile(profile);
 	}
+
+	private URL getRollbackRepository() {
+		try {
+			URL location = ((AgentLocation) ServiceHelper.getService(DirectorActivator.context, AgentLocation.class.getName())).getDataArea(DirectorActivator.PI_DIRECTOR);
+			return new URL(location, "rollback");
+		} catch (MalformedURLException e) {
+			fail("4.99", e);
+			return null;
+		}
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Activator.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Activator.java
index 42df613..77f5529 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Activator.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Activator.java
@@ -14,7 +14,7 @@ import org.osgi.framework.BundleActivator;
 import org.osgi.framework.BundleContext;
 
 public class Activator implements BundleActivator {
-	public static final String ID = "org.eclipse.p2.touchpoint.eclipse"; //$NON-NLS-1$
+	public static final String ID = "org.eclipse.equinox.p2.touchpoint.eclipse"; //$NON-NLS-1$
 	private static BundleContext context = null;
 
 	public void start(BundleContext ctx) throws Exception {
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
index 3869a95..4b94a87 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
@@ -32,8 +32,6 @@ public class EclipseTouchpoint extends Touchpoint {
 	private static final String ACTION_SET_FW_DEPENDENT_PROP = "setFwDependentProp"; //$NON-NLS-1$
 	private static final String ACTION_SET_FW_INDEPENDENT_PROP = "setFwIndependentProp"; //$NON-NLS-1$
 	private static final String ACTION_UNINSTALL_BUNDLE = "uninstallBundle"; //$NON-NLS-1$
-	final static String ID = "org.eclipse.equinox.p2.touchpoint.eclipse"; //$NON-NLS-1$
-
 	private static final String PARM_ARTIFACT = "@artifact"; //$NON-NLS-1$
 	private static final String PARM_ARTIFACT_REQUESTS = "artifactRequests"; //$NON-NLS-1$
 	private static final String PARM_BUNDLE = "bundle"; //$NON-NLS-1$
@@ -162,7 +160,7 @@ public class EclipseTouchpoint extends Touchpoint {
 							e.printStackTrace();
 						}
 						if (!fileLocation.exists())
-							return new Status(IStatus.ERROR, ID, "The file is not available" + fileLocation.getAbsolutePath());
+							return new Status(IStatus.ERROR, Activator.ID, "The file is not available" + fileLocation.getAbsolutePath());
 						programArg = fileLocation.getAbsolutePath();
 					}
 
@@ -187,7 +185,7 @@ public class EclipseTouchpoint extends Touchpoint {
 							e.printStackTrace();
 						}
 						if (!fileLocation.exists())
-							return new Status(IStatus.ERROR, ID, "The file is not available" + fileLocation.getAbsolutePath());
+							return new Status(IStatus.ERROR, Activator.ID, "The file is not available" + fileLocation.getAbsolutePath());
 						programArg = fileLocation.getAbsolutePath();
 					}
 
@@ -216,7 +214,7 @@ public class EclipseTouchpoint extends Touchpoint {
 							e.printStackTrace();
 						}
 						if (!fileLocation.exists())
-							return new Status(IStatus.ERROR, ID, "The file is not available" + fileLocation.getAbsolutePath());
+							return new Status(IStatus.ERROR, Activator.ID, "The file is not available" + fileLocation.getAbsolutePath());
 						programArg = fileLocation.getAbsolutePath();
 					}
 
@@ -241,7 +239,7 @@ public class EclipseTouchpoint extends Touchpoint {
 							e.printStackTrace();
 						}
 						if (!fileLocation.exists())
-							return new Status(IStatus.ERROR, ID, "The file is not available" + fileLocation.getAbsolutePath());
+							return new Status(IStatus.ERROR, Activator.ID, "The file is not available" + fileLocation.getAbsolutePath());
 						programArg = fileLocation.getAbsolutePath();
 					}
 
@@ -452,10 +450,10 @@ public class EclipseTouchpoint extends Touchpoint {
 		try {
 			bundleFile = Util.getBundleFile(artifactKey, isZipped, profile);
 			if (bundleFile == null)
-				return new Status(IStatus.ERROR, ID, "The artifact " + artifactKey.toString() + " to install was not found.");
+				return new Status(IStatus.ERROR, Activator.ID, "The artifact " + artifactKey.toString() + " to install was not found.");
 
 		} catch (IOException e) {
-			return new Status(IStatus.ERROR, ID, e.getMessage());
+			return new Status(IStatus.ERROR, Activator.ID, e.getMessage());
 		}
 
 		// TODO: do we really need the manifest here or just the bsn and version?
@@ -526,10 +524,10 @@ public class EclipseTouchpoint extends Touchpoint {
 		try {
 			bundleFile = Util.getBundleFile(artifactKey, isZipped, profile);
 			if (bundleFile == null)
-				return new Status(IStatus.ERROR, ID, "The artifact " + artifactKey.toString() + " to uninstall was not found.");
+				return new Status(IStatus.ERROR, Activator.ID, "The artifact " + artifactKey.toString() + " to uninstall was not found.");
 
 		} catch (IOException e) {
-			return new Status(IStatus.ERROR, ID, e.getMessage());
+			return new Status(IStatus.ERROR, Activator.ID, e.getMessage());
 		}
 
 		// TODO: do we really need the manifest here or just the bsn and version?
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Util.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Util.java
index ee3b498..8dd1205 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Util.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Util.java
@@ -20,8 +20,11 @@ import org.osgi.framework.Constants;
 
 public class Util {
 
-	private final static String CACHE_PATH = "eclipse.p2.cache";
-	private final static String CONFIG_FOLDER = "eclipse.configurationFolder";
+	/**
+	 * TODO "cache" is probably not the right term for this location
+	 */
+	private final static String CACHE_PATH = "eclipse.p2.cache"; //$NON-NLS-1$
+	private final static String CONFIG_FOLDER = "eclipse.configurationFolder"; //$NON-NLS-1$
 
 	static AgentLocation getAgentLocation() {
 		return (AgentLocation) ServiceHelper.getService(Activator.getContext(), AgentLocation.class.getName());
@@ -45,14 +48,7 @@ public class Util {
 		AgentLocation location = getAgentLocation();
 		if (location == null)
 			return null;
-		//TODO This should match the touchpoint id
-		URL result = location.getTouchpointDataArea("org.eclipse.equinox.p2.touchpoint.eclipse/"); //$NON-NLS-1$
-		try {
-			return new URL(result, "bundlepool"); //$NON-NLS-1$
-		} catch (MalformedURLException e) {
-			// TODO Auto-generated catch block
-			return null;
-		}
+		return location.getDataArea(Activator.ID);
 	}
 
 	static IFileArtifactRepository getBundlePoolRepo(Profile profile) {
@@ -145,7 +141,7 @@ public class Util {
 		if (bundleJar == null)
 			return null;
 
-		File bundleFolder = new File(getBundlePoolLocation(profile).getFile(), "/plugins/" + artifactKey.getId() + '_' + artifactKey.getVersion()); //$NON-NLS-1$
+		File bundleFolder = new File(getBundlePoolLocation(profile).getFile(), "plugins/" + artifactKey.getId() + '_' + artifactKey.getVersion()); //$NON-NLS-1$
 		if (bundleFolder.exists())
 			return bundleFolder;
 
commit 0db02c2b195be93f720a18d44e9eabc7f61abfc3
Author: John Arthorne <johna>
Date:   Mon Oct 29 14:59:36 2007 +0000

    Bug 203340 [prov] Shorter agent data paths

1	6	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/installregistry/InstallRegistry.java
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/installregistry/InstallRegistry.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/installregistry/InstallRegistry.java
index 0f52503..4db1418 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/installregistry/InstallRegistry.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/installregistry/InstallRegistry.java
@@ -24,7 +24,6 @@ import org.eclipse.equinox.p2.core.helpers.*;
 import org.eclipse.equinox.p2.core.location.AgentLocation;
 import org.eclipse.equinox.p2.engine.*;
 import org.eclipse.equinox.p2.metadata.*;
-import org.eclipse.osgi.service.datalocation.Location;
 import org.eclipse.osgi.service.resolver.VersionRange;
 import org.eclipse.osgi.util.NLS;
 import org.osgi.framework.*;
@@ -126,11 +125,7 @@ public class InstallRegistry implements IInstallRegistry {
 		try {
 			BufferedInputStream bif = null;
 			try {
-				Location agent = (Location) ServiceHelper.getService(EngineActivator.getContext(), AgentLocation.class.getName());
-				if (agent == null)
-					// TODO should likely do something here since we failed to restore.
-					return;
-				bif = new BufferedInputStream(new URL(agent.getURL(), STORAGE).openStream());
+				bif = new BufferedInputStream(getRegistryLocation().openStream());
 				// profileRegistries = (HashMap) new XStream().fromXML(bif);
 				Parser parser = new Parser(EngineActivator.getContext(), EngineActivator.ID);
 				parser.parse(bif);

commit ebe559a278f912ca4374044eb5dd4ea4ffc67edd
Author: Simon Kaegi <skaegi>
Date:   Thu Dec 20 02:46:48 2007 +0000

    Bug 210685  [prov] ArtifactDescriptors and public/private details

3	3	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java
14	2	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/MirrorRequest.java
20	3	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
9	0	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepositoryIO.java
24	0	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/p2/artifact/repository/ArtifactDescriptor.java
2	1	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/p2/artifact/repository/IArtifactRepositoryManager.java
2	2	bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/p2/directorywatcher/RepositoryListener.java
2	2	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java
index 02c29b3..72c1751 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/ArtifactRepositoryManager.java
@@ -65,11 +65,11 @@ public class ArtifactRepositoryManager implements IArtifactRepositoryManager {
 	}
 
 	public IArtifactRequest createMirrorRequest(IArtifactKey key, IArtifactRepository destination) {
-		return createMirrorRequest(key, destination, null);
+		return createMirrorRequest(key, destination, null, null);
 	}
 
-	public IArtifactRequest createMirrorRequest(IArtifactKey key, IArtifactRepository destination, Properties destinationDescriptorProperties) {
-		return new MirrorRequest(key, destination, destinationDescriptorProperties);
+	public IArtifactRequest createMirrorRequest(IArtifactKey key, IArtifactRepository destination, Properties destinationDescriptorProperties, Properties destinationRepositoryProperties) {
+		return new MirrorRequest(key, destination, destinationDescriptorProperties, destinationRepositoryProperties);
 	}
 
 	public IArtifactRepository createRepository(URL location, String name, String type) {
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/MirrorRequest.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/MirrorRequest.java
index 03c2ad5..74c444c 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/MirrorRequest.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/MirrorRequest.java
@@ -26,7 +26,9 @@ public class MirrorRequest extends ArtifactRequest {
 
 	private final Properties targetDescriptorProperties;
 
-	public MirrorRequest(IArtifactKey key, IArtifactRepository targetRepository, Properties targetDescriptorProperties) {
+	private final Properties targetRepositoryProperties;
+
+	public MirrorRequest(IArtifactKey key, IArtifactRepository targetRepository, Properties targetDescriptorProperties, Properties targetRepositoryProperties) {
 		super(key);
 		target = targetRepository;
 		if (targetDescriptorProperties == null || targetDescriptorProperties.isEmpty()) {
@@ -35,6 +37,13 @@ public class MirrorRequest extends ArtifactRequest {
 			this.targetDescriptorProperties = new Properties();
 			this.targetDescriptorProperties.putAll(targetDescriptorProperties);
 		}
+
+		if (targetRepositoryProperties == null || targetRepositoryProperties.isEmpty()) {
+			this.targetRepositoryProperties = null;
+		} else {
+			this.targetRepositoryProperties = new Properties();
+			this.targetRepositoryProperties.putAll(targetRepositoryProperties);
+		}
 	}
 
 	public void perform(IProgressMonitor monitor) {
@@ -78,7 +87,7 @@ public class MirrorRequest extends ArtifactRequest {
 		// Get the output stream to store the artifact
 		// Since we are mirroring, ensure we clear out data from the original descriptor that may
 		// not apply in the new repo location.
-		// TODO this is brittle.  perhaps the repo itself should do this?  there are cases wehre
+		// TODO this is brittle.  perhaps the repo itself should do this?  there are cases where
 		// we really do need to give the repo the actual descriptor to use however...
 		ArtifactDescriptor destinationDescriptor = new ArtifactDescriptor(getArtifactDescriptor());
 		destinationDescriptor.setProcessingSteps(EMPTY_STEPS);
@@ -88,6 +97,9 @@ public class MirrorRequest extends ArtifactRequest {
 		if (targetDescriptorProperties != null)
 			destinationDescriptor.addProperties(targetDescriptorProperties);
 
+		if (targetRepositoryProperties != null)
+			destinationDescriptor.addRepositoryProperties(targetRepositoryProperties);
+
 		OutputStream destination = target.getOutputStream(destinationDescriptor);
 		if (destination == null) {
 			setResult(new Status(IStatus.ERROR, Activator.ID, "Can't get an output stream to " + target + " to store " + getArtifactKey()));
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
index ee4162f..cbf5ca0 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
@@ -130,6 +130,14 @@ public class SimpleArtifactRepository extends AbstractArtifactRepository impleme
 			return blobStore.fileFor(bytesFromHexString(uuid));
 
 		// if the artifact is just a reference then return the reference location
+		if (descriptor instanceof ArtifactDescriptor) {
+			String artifactReference = ((ArtifactDescriptor) descriptor).getRepositoryProperty(ARTIFACT_REFERENCE);
+			if (artifactReference != null)
+				return artifactReference;
+		}
+
+		// TODO: remove this when we are consistently using repository properties
+		// if the artifact is just a reference then return the reference location
 		String artifactReference = descriptor.getProperty(ARTIFACT_REFERENCE);
 		if (artifactReference != null)
 			return artifactReference;
@@ -172,6 +180,13 @@ public class SimpleArtifactRepository extends AbstractArtifactRepository impleme
 	}
 
 	private boolean isFolderBased(IArtifactDescriptor descriptor) {
+		// if the artifact is just a reference then return the reference location
+		if (descriptor instanceof ArtifactDescriptor) {
+			String useArtifactFolder = ((ArtifactDescriptor) descriptor).getRepositoryProperty(ARTIFACT_FOLDER);
+			if (useArtifactFolder != null)
+				return Boolean.valueOf(useArtifactFolder).booleanValue();
+		}
+		//TODO: refactor this when the artifact folder property is consistently set in repository properties
 		return Boolean.valueOf(descriptor.getProperty(ARTIFACT_FOLDER)).booleanValue();
 	}
 
@@ -409,7 +424,7 @@ public class SimpleArtifactRepository extends AbstractArtifactRepository impleme
 	}
 
 	public void save() {
-		save(true);
+		save(false);
 	}
 
 	public void save(boolean gzip) {
@@ -429,7 +444,6 @@ public class SimpleArtifactRepository extends AbstractArtifactRepository impleme
 					os.close();
 			}
 		} catch (IOException e) {
-			// TODO proper exception handling
 			e.printStackTrace();
 		}
 	}
@@ -443,6 +457,9 @@ public class SimpleArtifactRepository extends AbstractArtifactRepository impleme
 
 		// create a copy of the original descriptor that we can manipulate
 		ArtifactDescriptor newDescriptor = new ArtifactDescriptor(descriptor);
+		if (isFolderBased(descriptor))
+			newDescriptor.setRepositoryProperty(ARTIFACT_FOLDER, Boolean.TRUE.toString());
+
 		// Determine writing location
 		String newLocation = createLocation(newDescriptor);
 		if (newLocation == null)
@@ -467,7 +484,7 @@ public class SimpleArtifactRepository extends AbstractArtifactRepository impleme
 
 		OutputStream target = null;
 		try {
-			if (isFolderBased(descriptor)) {
+			if (isFolderBased(newDescriptor)) {
 				outputFile.mkdirs();
 				if (!outputFile.exists())
 					// TODO: Log an error, or throw an exception?
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepositoryIO.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepositoryIO.java
index 48dae43..cad65e3 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepositoryIO.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepositoryIO.java
@@ -112,6 +112,7 @@ class SimpleArtifactRepositoryIO {
 
 		// Constants for artifact repository elements
 		public static final String REPOSITORY_ELEMENT = "repository"; //$NON-NLS-1$
+		public static final String REPOSITORY_PROPERTIES_ELEMENT = "repositoryProperties"; //$NON-NLS-1$
 		public static final String MAPPING_RULES_ELEMENT = "mappings"; //$NON-NLS-1$
 		public static final String MAPPING_RULE_ELEMENT = "rule"; //$NON-NLS-1$
 		public static final String ARTIFACTS_ELEMENT = "artifacts"; //$NON-NLS-1$
@@ -186,6 +187,7 @@ class SimpleArtifactRepositoryIO {
 				attribute(VERSION_ATTRIBUTE, key.getVersion());
 				writeProcessingSteps(descriptor.getProcessingSteps());
 				writeProperties(descriptor.getProperties());
+				writeProperties(REPOSITORY_PROPERTIES_ELEMENT, descriptor.getRepositoryProperties());
 				end(ARTIFACT_ELEMENT);
 			}
 			end(ARTIFACTS_ELEMENT);
@@ -419,6 +421,7 @@ class SimpleArtifactRepositoryIO {
 			ArtifactDescriptor currentArtifact = null;
 
 			private PropertiesHandler propertiesHandler = null;
+			private PropertiesHandler repositoryPropertiesHandler = null;
 			private ProcessingStepsHandler processingStepsHandler = null;
 
 			public ArtifactHandler(AbstractHandler parentHandler, Attributes attributes, Set artifacts) {
@@ -447,6 +450,12 @@ class SimpleArtifactRepositoryIO {
 					} else {
 						duplicateElement(this, name, attributes);
 					}
+				} else if (REPOSITORY_PROPERTIES_ELEMENT.equals(name)) {
+					if (repositoryPropertiesHandler == null) {
+						repositoryPropertiesHandler = new PropertiesHandler(this, attributes);
+					} else {
+						duplicateElement(this, name, attributes);
+					}
 				} else {
 					invalidElement(name, attributes);
 				}
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/p2/artifact/repository/ArtifactDescriptor.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/p2/artifact/repository/ArtifactDescriptor.java
index e74c7f6..4bc3b66 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/p2/artifact/repository/ArtifactDescriptor.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/p2/artifact/repository/ArtifactDescriptor.java
@@ -30,6 +30,7 @@ public class ArtifactDescriptor implements IArtifactDescriptor {
 	protected ProcessingStepDescriptor[] processingSteps = EMPTY_STEPS;
 
 	protected Map properties = new OrderedProperties();
+	protected Map repositoryProperties = new OrderedProperties();
 
 	protected transient IArtifactRepository repository;
 
@@ -85,6 +86,29 @@ public class ArtifactDescriptor implements IArtifactDescriptor {
 		return OrderedProperties.unmodifiableProperties(properties);
 	}
 
+	public String getRepositoryProperty(String propertyKey) {
+		return (String) repositoryProperties.get(propertyKey);
+	}
+
+	public void setRepositoryProperty(String key, String value) {
+		if (value == null)
+			repositoryProperties.remove(key);
+		else
+			repositoryProperties.put(key, value);
+	}
+
+	public void addRepositoryProperties(Map additionalProperties) {
+		repositoryProperties.putAll(additionalProperties);
+	}
+
+	/**
+	 * Returns a read-only collection of the repository properties of the artifact descriptor.
+	 * @return the repository properties of this artifact descriptor.
+	 */
+	public Map getRepositoryProperties() {
+		return OrderedProperties.unmodifiableProperties(repositoryProperties);
+	}
+
 	public ProcessingStepDescriptor[] getProcessingSteps() {
 		return processingSteps;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/p2/artifact/repository/IArtifactRepositoryManager.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/p2/artifact/repository/IArtifactRepositoryManager.java
index 7f6de19..29bf80d 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/p2/artifact/repository/IArtifactRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/p2/artifact/repository/IArtifactRepositoryManager.java
@@ -88,8 +88,9 @@ public interface IArtifactRepositoryManager {
 	 * @param key the artifact to mirror
 	 * @param destination the destination where the artifact will be mirrored
 	 * @param destinationDescriptorProperties additional properties for use in creating the repositor's ArtifactDescriptor
+	 * @param destinationRepositoryProperties additional repository specific properties for use in creating the repositor's ArtifactDescriptor
 	 * @return the newly created request object
 	 */
-	public IArtifactRequest createMirrorRequest(IArtifactKey key, IArtifactRepository destination, Properties destinationDescriptorProperties);
+	public IArtifactRequest createMirrorRequest(IArtifactKey key, IArtifactRepository destination, Properties destinationDescriptorProperties, Properties destinationRepositoryProperties);
 
 }
diff --git a/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/p2/directorywatcher/RepositoryListener.java b/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/p2/directorywatcher/RepositoryListener.java
index b0ada9a..8c704e0 100644
--- a/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/p2/directorywatcher/RepositoryListener.java
+++ b/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/p2/directorywatcher/RepositoryListener.java
@@ -255,14 +255,14 @@ public class RepositoryListener extends DirectoryChangeListener {
 
 		ArtifactDescriptor pathDescriptor = new ArtifactDescriptor(basicDescriptor);
 		try {
-			pathDescriptor.setProperty("artifact.reference", bundle.toURL().toExternalForm());
+			pathDescriptor.setRepositoryProperty("artifact.reference", bundle.toURL().toExternalForm());
 		} catch (MalformedURLException e) {
 			// unexpected
 			e.printStackTrace();
 			return null;
 		}
 		if (bundle.isDirectory())
-			pathDescriptor.setProperty("artifact.folder", "true");
+			pathDescriptor.setRepositoryProperty("artifact.folder", "true");
 
 		return pathDescriptor;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
index c8792f3..8f5cf3b 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
@@ -89,8 +89,8 @@ public class EclipseTouchpoint extends Touchpoint {
 		for (int i = 0; i < toDownload.length; i++) {
 			IArtifactKey key = toDownload[i];
 			if (!aggregatedRepositoryView.contains(key)) {
-				Properties descriptorProperties = createArtifactDescriptorProperties(installableUnit);
-				requests.add(Util.getArtifactRepositoryManager().createMirrorRequest(key, bundlePool, descriptorProperties));
+				Properties repositoryProperties = createArtifactDescriptorProperties(installableUnit);
+				requests.add(Util.getArtifactRepositoryManager().createMirrorRequest(key, bundlePool, null, repositoryProperties));
 			}
 		}
 
commit 82432d2c0373dbdc3bad11fc7fe2ecdfb234cecf
Author: Simon Kaegi <skaegi>
Date:   Thu Jan 10 03:11:03 2008 +0000

    Bug 210685  [prov] ArtifactDescriptors and public/private details

5	2	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepositoryIO.java
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepositoryIO.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepositoryIO.java
index cad65e3..75bde53 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepositoryIO.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepositoryIO.java
@@ -463,9 +463,12 @@ class SimpleArtifactRepositoryIO {
 
 			protected void finished() {
 				if (isValidXML() && currentArtifact != null) {
-					Map properties = (propertiesHandler == null ? new OrderedProperties(0) //
-							: propertiesHandler.getProperties());
+					Map properties = (propertiesHandler == null ? new OrderedProperties(0) : propertiesHandler.getProperties());
 					currentArtifact.addProperties(properties);
+
+					properties = (repositoryPropertiesHandler == null ? new OrderedProperties(0) : repositoryPropertiesHandler.getProperties());
+					currentArtifact.addRepositoryProperties(properties);
+
 					ProcessingStepDescriptor[] processingSteps = (processingStepsHandler == null ? new ProcessingStepDescriptor[0] //
 							: processingStepsHandler.getProcessingSteps());
 					currentArtifact.setProcessingSteps(processingSteps);

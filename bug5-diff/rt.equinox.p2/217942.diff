commit dcc0695b86920bc955b90c5b64be1088f64964b6
Author: Susan Franklin <sfranklin>
Date:   Tue Apr 15 17:44:15 2008 +0000

    Bug 217942 - [prov] [ui] Revert view should only show root IU's

2	2	bundles/org.eclipse.equinox.p2.director/META-INF/MANIFEST.MF
1	1	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java
1	1	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
0	359	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java
360	0	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/provisional/p2/rollback/FormerState.java
1	0	bundles/org.eclipse.equinox.p2.ui/META-INF/MANIFEST.MF
11	7	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/RevertProfileWizardPage.java
58	19	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/RollbackProfileElement.java
diff --git a/bundles/org.eclipse.equinox.p2.director/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.director/META-INF/MANIFEST.MF
index 413dd1d..6044027 100644
--- a/bundles/org.eclipse.equinox.p2.director/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.director/META-INF/MANIFEST.MF
@@ -21,8 +21,8 @@ Import-Package: org.eclipse.equinox.internal.p2.core.helpers,
  org.osgi.framework;version="1.3.0"
 Export-Package: org.eclipse.equinox.internal.p2.director;x-friends:="org.eclipse.equinox.p2.exemplarysetup",
  org.eclipse.equinox.internal.p2.resolution;x-internal:=true,
- org.eclipse.equinox.internal.p2.rollback;x-internal:=true,
- org.eclipse.equinox.internal.provisional.p2.director
+ org.eclipse.equinox.internal.provisional.p2.director,
+ org.eclipse.equinox.internal.provisional.p2.rollback
 Bundle-Activator: org.eclipse.equinox.internal.p2.director.DirectorActivator
 Eclipse-LazyStart: true
 Bundle-RequiredExecutionEnvironment: CDC-1.1/Foundation-1.1,
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java
index 7a34892..e68a4ad 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java
@@ -12,11 +12,11 @@ import java.net.MalformedURLException;
 import java.net.URL;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
-import org.eclipse.equinox.internal.p2.rollback.FormerState;
 import org.eclipse.equinox.internal.provisional.p2.core.location.AgentLocation;
 import org.eclipse.equinox.internal.provisional.p2.director.*;
 import org.eclipse.equinox.internal.provisional.p2.engine.*;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.rollback.FormerState;
 import org.eclipse.osgi.util.NLS;
 
 public class SimpleDirector implements IDirector {
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
index 7582e06..924158c 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
@@ -16,7 +16,6 @@ import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.resolution.ResolutionHelper;
-import org.eclipse.equinox.internal.p2.rollback.FormerState;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.director.*;
 import org.eclipse.equinox.internal.provisional.p2.engine.*;
@@ -27,6 +26,7 @@ import org.eclipse.equinox.internal.provisional.p2.metadata.query.UpdateQuery;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.query.*;
+import org.eclipse.equinox.internal.provisional.p2.rollback.FormerState;
 import org.eclipse.osgi.service.resolver.VersionRange;
 import org.eclipse.osgi.util.NLS;
 import org.osgi.framework.Version;
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java
deleted file mode 100644
index faf7d39..0000000
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java
+++ /dev/null
@@ -1,359 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others. All rights reserved. This
- * program and the accompanying materials are made available under the terms of
- * the Eclipse Public License v1.0 which accompanies this distribution, and is
- * available at http://www.eclipse.org/legal/epl-v10.html
- * 
- * Contributors: IBM Corporation - initial API and implementation
- ******************************************************************************/
-package org.eclipse.equinox.internal.p2.rollback;
-
-import java.net.URL;
-import java.util.*;
-import java.util.Map.Entry;
-import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
-import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
-import org.eclipse.equinox.internal.p2.director.*;
-import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
-import org.eclipse.equinox.internal.provisional.p2.core.eventbus.IProvisioningEventBus;
-import org.eclipse.equinox.internal.provisional.p2.core.eventbus.SynchronousProvisioningListener;
-import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
-import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest;
-import org.eclipse.equinox.internal.provisional.p2.engine.*;
-import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory;
-import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory.InstallableUnitDescription;
-import org.eclipse.equinox.internal.provisional.p2.metadata.query.InstallableUnitQuery;
-import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepository;
-import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepositoryManager;
-import org.eclipse.equinox.internal.provisional.p2.query.*;
-import org.osgi.framework.Version;
-
-public class FormerState {
-
-	public static final String IUPROP_PREFIX = "---IUPROPERTY---"; //$NON-NLS-1$
-	public static final String IUPROP_POSTFIX = "---IUPROPERTYKEY---"; //$NON-NLS-1$
-	private static long lastTimestamp;
-	URL location = null;
-
-	Hashtable generatedIUs = new Hashtable(); //key profile id, value the iu representing this profile
-
-	private synchronized static long uniqueTimestamp() {
-		long timewaited = 0;
-		long timestamp = System.currentTimeMillis();
-		while (timestamp == lastTimestamp) {
-			if (timewaited > 1000)
-				throw new IllegalStateException("uniquetimestamp failed"); //$NON-NLS-1$
-			try {
-				Thread.sleep(10);
-			} catch (InterruptedException e) {
-				// reset interrupted status
-				Thread.currentThread().interrupt();
-			}
-			timewaited += 10;
-			timestamp = System.currentTimeMillis();
-		}
-		lastTimestamp = timestamp;
-		return timestamp;
-	}
-
-	public FormerState(URL repoLocation) {
-		if (repoLocation == null)
-			throw new IllegalArgumentException("Repository location can't be null"); //$NON-NLS-1$
-		IProvisioningEventBus eventBus = (IProvisioningEventBus) ServiceHelper.getService(DirectorActivator.context, IProvisioningEventBus.SERVICE_NAME);
-		location = repoLocation;
-
-		//listen for pre-event. to snapshot the profile
-		eventBus.addListener(new SynchronousProvisioningListener() {
-			public void notify(EventObject o) {
-				if (o instanceof BeginOperationEvent) {
-					BeginOperationEvent event = (BeginOperationEvent) o;
-					IInstallableUnit iuForProfile = profileToIU(event.getProfile());
-					generatedIUs.put(event.getProfile().getProfileId(), iuForProfile);
-				} else if (o instanceof ProfileEvent) {
-					ProfileEvent event = (ProfileEvent) o;
-					if (event.getReason() == ProfileEvent.CHANGED)
-						getRepository().addInstallableUnits(new IInstallableUnit[] {(IInstallableUnit) generatedIUs.get(event.getProfileId())});
-					return;
-				} else if (o instanceof RollbackOperationEvent) {
-					RollbackOperationEvent event = (RollbackOperationEvent) o;
-					generatedIUs.remove(event.getProfile().getProfileId());
-					return;
-				}
-				//TODO We need to decide what to do on profile removal				
-				//				else if (o instanceof ProfileEvent) {
-				//					ProfileEvent pe = (ProfileEvent) o;
-				//					if (pe.getReason() == ProfileEvent.REMOVED) {
-				//						profileRegistries.remove(pe.getProfile().getProfileId());
-				//						persist();
-				//					}
-				//				}
-			}
-
-		});
-	}
-
-	IMetadataRepository getRepository() {
-		IMetadataRepositoryManager manager = (IMetadataRepositoryManager) ServiceHelper.getService(DirectorActivator.context, IMetadataRepositoryManager.class.getName());
-		try {
-			return manager.loadRepository(location, null);
-		} catch (ProvisionException e) {
-			//fall through and create a new repository
-		}
-		try {
-			IMetadataRepository repository = manager.createRepository(location, "Agent rollback repository", IMetadataRepositoryManager.TYPE_SIMPLE_REPOSITORY); //$NON-NLS-1$
-			manager.addRepository(repository.getLocation());
-			repository.setProperty(IRepository.PROP_SYSTEM, Boolean.TRUE.toString());
-			return repository;
-		} catch (ProvisionException e) {
-			LogHelper.log(e);
-		}
-		throw new IllegalStateException("Unable to open or create Agent's rollback repository"); //$NON-NLS-1$
-	}
-
-	public static IInstallableUnit profileToIU(IProfile profile) {
-		InstallableUnitDescription result = new MetadataFactory.InstallableUnitDescription();
-		result.setProperty(IInstallableUnit.PROP_TYPE_PROFILE, Boolean.TRUE.toString());
-		result.setId(profile.getProfileId());
-		result.setVersion(new Version(0, 0, 0, Long.toString(uniqueTimestamp())));
-		result.setRequiredCapabilities(IUTransformationHelper.toRequirements(profile.query(InstallableUnitQuery.ANY, new Collector(), null).iterator(), false));
-		// Save the profile properties
-		// TODO we aren't marking these properties in any special way to indicate they came from profile properties.  Should we?
-		Map properties = profile.getProperties();
-		Iterator iter = properties.keySet().iterator();
-		while (iter.hasNext()) {
-			String key = (String) iter.next();
-			result.setProperty(key, (String) properties.get(key));
-		}
-		// Save the IU profile properties
-		Iterator allIUs = profile.query(InstallableUnitQuery.ANY, new Collector(), null).iterator();
-		while (allIUs.hasNext()) {
-			IInstallableUnit iu = (IInstallableUnit) allIUs.next();
-			properties = profile.getInstallableUnitProperties(iu);
-			iter = properties.keySet().iterator();
-			while (iter.hasNext()) {
-				String key = (String) iter.next();
-				result.setProperty(IUPROP_PREFIX + iu.getId() + IUPROP_POSTFIX + key, (String) properties.get(key));
-			}
-		}
-		return MetadataFactory.createInstallableUnit(result);
-	}
-
-	public static IProfile IUToProfile(IInstallableUnit profileIU, IProfile profile, ProvisioningContext context, IProgressMonitor monitor) throws CoreException {
-		try {
-			return new FormerStateProfile(profileIU, profile, context);
-		} finally {
-			monitor.done();
-		}
-	}
-
-	public static ProfileChangeRequest generateProfileDeltaChangeRequest(IProfile current, IProfile target) {
-		ProfileChangeRequest request = new ProfileChangeRequest(current);
-
-		synchronizeProfileProperties(request, current, target);
-		synchronizeMarkedIUs(request, current, target);
-		synchronizeAllIUProperties(request, current, target);
-
-		return request;
-	}
-
-	private static void synchronizeAllIUProperties(ProfileChangeRequest request, IProfile current, IProfile target) {
-		Collection currentIUs = current.query(InstallableUnitQuery.ANY, new Collector(), null).toCollection();
-		Collection targetIUs = target.query(InstallableUnitQuery.ANY, new Collector(), null).toCollection();
-		List iusToAdd = new ArrayList(targetIUs);
-		iusToAdd.remove(currentIUs);
-
-		//additions
-		for (Iterator iterator = iusToAdd.iterator(); iterator.hasNext();) {
-			IInstallableUnit iu = (IInstallableUnit) iterator.next();
-			for (Iterator it = target.getInstallableUnitProperties(iu).entrySet().iterator(); it.hasNext();) {
-				Entry entry = (Entry) it.next();
-				String key = (String) entry.getKey();
-				String value = (String) entry.getValue();
-				request.setInstallableUnitProfileProperty(iu, key, value);
-			}
-		}
-
-		// updates
-		List iusToUpdate = new ArrayList(targetIUs);
-		iusToUpdate.remove(iusToAdd);
-		for (Iterator iterator = iusToUpdate.iterator(); iterator.hasNext();) {
-			IInstallableUnit iu = (IInstallableUnit) iterator.next();
-			Map propertiesToSet = new HashMap(target.getInstallableUnitProperties(iu));
-			for (Iterator it = current.getInstallableUnitProperties(iu).entrySet().iterator(); it.hasNext();) {
-				Entry entry = (Entry) it.next();
-				String key = (String) entry.getKey();
-				String newValue = (String) propertiesToSet.get(key);
-				if (newValue == null) {
-					request.removeInstallableUnitProfileProperty(iu, key);
-				} else if (newValue.equals(entry.getValue()))
-					propertiesToSet.remove(key);
-			}
-
-			for (Iterator it = propertiesToSet.entrySet().iterator(); it.hasNext();) {
-				Entry entry = (Entry) it.next();
-				String key = (String) entry.getKey();
-				String value = (String) entry.getValue();
-				request.setInstallableUnitProfileProperty(iu, key, value);
-			}
-		}
-	}
-
-	private static void synchronizeMarkedIUs(ProfileChangeRequest request, IProfile current, IProfile target) {
-		IInstallableUnit[] currentPlannerMarkedIUs = SimplePlanner.findPlannerMarkedIUs(current);
-		IInstallableUnit[] targetPlannerMarkedIUs = SimplePlanner.findPlannerMarkedIUs(target);
-
-		//additions
-		List markedIUsToAdd = new ArrayList(Arrays.asList(targetPlannerMarkedIUs));
-		markedIUsToAdd.removeAll(Arrays.asList(currentPlannerMarkedIUs));
-		request.addInstallableUnits((IInstallableUnit[]) markedIUsToAdd.toArray(new IInstallableUnit[markedIUsToAdd.size()]));
-
-		// removes
-		List markedIUsToRemove = new ArrayList(Arrays.asList(currentPlannerMarkedIUs));
-		markedIUsToRemove.removeAll(Arrays.asList(targetPlannerMarkedIUs));
-		request.removeInstallableUnits((IInstallableUnit[]) markedIUsToRemove.toArray(new IInstallableUnit[markedIUsToRemove.size()]));
-	}
-
-	private static void synchronizeProfileProperties(ProfileChangeRequest request, IProfile current, IProfile target) {
-		Map profilePropertiesToSet = new HashMap(target.getProperties());
-		for (Iterator it = current.getProperties().entrySet().iterator(); it.hasNext();) {
-			Entry entry = (Entry) it.next();
-			String key = (String) entry.getKey();
-
-			String newValue = (String) profilePropertiesToSet.get(key);
-			if (newValue == null) {
-				request.removeProfileProperty(key);
-			} else if (newValue.equals(entry.getValue()))
-				profilePropertiesToSet.remove(key);
-		}
-
-		for (Iterator it = profilePropertiesToSet.entrySet().iterator(); it.hasNext();) {
-			Entry entry = (Entry) it.next();
-			String key = (String) entry.getKey();
-			String value = (String) entry.getValue();
-			request.setProfileProperty(key, value);
-		}
-	}
-
-	public static class FormerStateProfile implements IProfile {
-
-		private String profileId;
-		private HashMap profileProperties = new HashMap();
-		private HashMap iuProfileProperties = new HashMap();
-		private Set ius = new HashSet();
-
-		public FormerStateProfile(IInstallableUnit profileIU, IProfile profile, ProvisioningContext context) throws CoreException {
-
-			String profileTypeProperty = profileIU.getProperty(IInstallableUnit.PROP_TYPE_PROFILE);
-			if (profileTypeProperty == null || !Boolean.valueOf(profileTypeProperty).booleanValue())
-				throw new CoreException(new Status(IStatus.ERROR, DirectorActivator.PI_DIRECTOR, "Not a profile type IU"));
-
-			profileId = profileIU.getId();
-			for (Iterator it = profileIU.getProperties().entrySet().iterator(); it.hasNext();) {
-				Entry entry = (Entry) it.next();
-				String key = (String) entry.getKey();
-				if (key.startsWith(IUPROP_PREFIX)) {
-					int postIndex = key.indexOf(FormerState.IUPROP_POSTFIX, FormerState.IUPROP_PREFIX.length());
-					String iuId = key.substring(FormerState.IUPROP_PREFIX.length(), postIndex);
-					Map iuProperties = (Map) iuProfileProperties.get(iuId);
-					if (iuProperties == null) {
-						iuProperties = new HashMap();
-						iuProfileProperties.put(iuId, iuProperties);
-					}
-					String iuPropertyKey = key.substring(postIndex + FormerState.IUPROP_POSTFIX.length());
-					iuProperties.put(iuPropertyKey, entry.getValue());
-				} else {
-					profileProperties.put(key, entry.getValue());
-				}
-			}
-			profileProperties.remove(IInstallableUnit.PROP_TYPE_PROFILE);
-
-			List extraIUs = new ArrayList(profile.query(InstallableUnitQuery.ANY, new Collector(), null).toCollection());
-			extraIUs.add(profileIU);
-
-			IInstallableUnit[] availableIUs = SimplePlanner.gatherAvailableInstallableUnits((IInstallableUnit[]) extraIUs.toArray(new IInstallableUnit[extraIUs.size()]), context.getMetadataRepositories(), context, new NullProgressMonitor());
-
-			Dictionary snapshotSelectionContext = SimplePlanner.createSelectionContext(profileProperties);
-			IInstallableUnit[] allIUs = new IInstallableUnit[] {profileIU};
-			Slicer slicer = new Slicer(allIUs, availableIUs, snapshotSelectionContext);
-			IQueryable slice = slicer.slice(allIUs, new NullProgressMonitor());
-			if (slice == null)
-				throw new CoreException(slicer.getStatus());
-
-			Projector projector = new Projector(slice, snapshotSelectionContext);
-			projector.encode(allIUs, new NullProgressMonitor());
-			IStatus s = projector.invokeSolver(new NullProgressMonitor());
-
-			if (s.getSeverity() == IStatus.ERROR) {
-				//log the error from the new solver so it is not lost
-				LogHelper.log(s);
-				if (!"true".equalsIgnoreCase(context == null ? null : context.getProperty("org.eclipse.equinox.p2.disable.error.reporting"))) {
-					//We invoke the old resolver to get explanations for now
-					IStatus oldResolverStatus = new NewDependencyExpander(allIUs, null, availableIUs, snapshotSelectionContext, false).expand(new NullProgressMonitor());
-					if (!oldResolverStatus.isOK())
-						s = oldResolverStatus;
-				}
-				throw new CoreException(s);
-			}
-			ius.addAll(projector.extractSolution());
-			ius.remove(profileIU);
-		}
-
-		public Map getInstallableUnitProperties(IInstallableUnit iu) {
-			Map iuProperties = (Map) iuProfileProperties.get(iu.getId());
-			if (iuProperties == null) {
-				return Collections.EMPTY_MAP;
-			}
-			return Collections.unmodifiableMap(iuProperties);
-		}
-
-		public String getInstallableUnitProperty(IInstallableUnit iu, String key) {
-			return (String) getInstallableUnitProperties(iu).get(key);
-		}
-
-		public Map getLocalProperties() {
-			return Collections.unmodifiableMap(profileProperties);
-		}
-
-		public String getLocalProperty(String key) {
-			return (String) profileProperties.get(key);
-		}
-
-		public IProfile getParentProfile() {
-			return null;
-		}
-
-		public String getProfileId() {
-			return profileId;
-		}
-
-		public Map getProperties() {
-			return Collections.unmodifiableMap(profileProperties);
-		}
-
-		public String getProperty(String key) {
-			return (String) profileProperties.get(key);
-		}
-
-		public String[] getSubProfileIds() {
-			return null;
-		}
-
-		public long getTimestamp() {
-			return 0;
-		}
-
-		public boolean hasSubProfiles() {
-			return false;
-		}
-
-		public boolean isRootProfile() {
-			return true;
-		}
-
-		public Collector query(Query query, Collector collector, IProgressMonitor monitor) {
-			return query.perform(ius.iterator(), collector);
-		}
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/provisional/p2/rollback/FormerState.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/provisional/p2/rollback/FormerState.java
new file mode 100644
index 0000000..17c429d
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/provisional/p2/rollback/FormerState.java
@@ -0,0 +1,360 @@
+/*******************************************************************************
+ * Copyright (c) 2007, 2008 IBM Corporation and others. All rights reserved. This
+ * program and the accompanying materials are made available under the terms of
+ * the Eclipse Public License v1.0 which accompanies this distribution, and is
+ * available at http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors: IBM Corporation - initial API and implementation
+ ******************************************************************************/
+package org.eclipse.equinox.internal.provisional.p2.rollback;
+
+import java.net.URL;
+import java.util.*;
+import java.util.Map.Entry;
+import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
+import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
+import org.eclipse.equinox.internal.p2.director.*;
+import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.equinox.internal.provisional.p2.core.eventbus.IProvisioningEventBus;
+import org.eclipse.equinox.internal.provisional.p2.core.eventbus.SynchronousProvisioningListener;
+import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
+import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest;
+import org.eclipse.equinox.internal.provisional.p2.engine.*;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory;
+import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory.InstallableUnitDescription;
+import org.eclipse.equinox.internal.provisional.p2.metadata.query.InstallableUnitQuery;
+import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepository;
+import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepositoryManager;
+import org.eclipse.equinox.internal.provisional.p2.query.*;
+import org.osgi.framework.Version;
+
+public class FormerState {
+
+	public static final String IUPROP_PREFIX = "---IUPROPERTY---"; //$NON-NLS-1$
+	public static final String IUPROP_POSTFIX = "---IUPROPERTYKEY---"; //$NON-NLS-1$
+	private static long lastTimestamp;
+	URL location = null;
+
+	Hashtable generatedIUs = new Hashtable(); //key profile id, value the iu representing this profile
+
+	private synchronized static long uniqueTimestamp() {
+		long timewaited = 0;
+		long timestamp = System.currentTimeMillis();
+		while (timestamp == lastTimestamp) {
+			if (timewaited > 1000)
+				throw new IllegalStateException("uniquetimestamp failed"); //$NON-NLS-1$
+			try {
+				Thread.sleep(10);
+			} catch (InterruptedException e) {
+				// reset interrupted status
+				Thread.currentThread().interrupt();
+			}
+			timewaited += 10;
+			timestamp = System.currentTimeMillis();
+		}
+		lastTimestamp = timestamp;
+		return timestamp;
+	}
+
+	public FormerState(URL repoLocation) {
+		if (repoLocation == null)
+			throw new IllegalArgumentException("Repository location can't be null"); //$NON-NLS-1$
+		IProvisioningEventBus eventBus = (IProvisioningEventBus) ServiceHelper.getService(DirectorActivator.context, IProvisioningEventBus.SERVICE_NAME);
+		location = repoLocation;
+
+		//listen for pre-event. to snapshot the profile
+		eventBus.addListener(new SynchronousProvisioningListener() {
+			public void notify(EventObject o) {
+				if (o instanceof BeginOperationEvent) {
+					BeginOperationEvent event = (BeginOperationEvent) o;
+					IInstallableUnit iuForProfile = profileToIU(event.getProfile());
+					generatedIUs.put(event.getProfile().getProfileId(), iuForProfile);
+				} else if (o instanceof ProfileEvent) {
+					ProfileEvent event = (ProfileEvent) o;
+					if (event.getReason() == ProfileEvent.CHANGED)
+						getRepository().addInstallableUnits(new IInstallableUnit[] {(IInstallableUnit) generatedIUs.get(event.getProfileId())});
+					return;
+				} else if (o instanceof RollbackOperationEvent) {
+					RollbackOperationEvent event = (RollbackOperationEvent) o;
+					generatedIUs.remove(event.getProfile().getProfileId());
+					return;
+				}
+				//TODO We need to decide what to do on profile removal				
+				//				else if (o instanceof ProfileEvent) {
+				//					ProfileEvent pe = (ProfileEvent) o;
+				//					if (pe.getReason() == ProfileEvent.REMOVED) {
+				//						profileRegistries.remove(pe.getProfile().getProfileId());
+				//						persist();
+				//					}
+				//				}
+			}
+
+		});
+	}
+
+	IMetadataRepository getRepository() {
+		IMetadataRepositoryManager manager = (IMetadataRepositoryManager) ServiceHelper.getService(DirectorActivator.context, IMetadataRepositoryManager.class.getName());
+		try {
+			return manager.loadRepository(location, null);
+		} catch (ProvisionException e) {
+			//fall through and create a new repository
+		}
+		try {
+			IMetadataRepository repository = manager.createRepository(location, "Agent rollback repository", IMetadataRepositoryManager.TYPE_SIMPLE_REPOSITORY); //$NON-NLS-1$
+			manager.addRepository(repository.getLocation());
+			repository.setProperty(IRepository.PROP_SYSTEM, Boolean.TRUE.toString());
+			return repository;
+		} catch (ProvisionException e) {
+			LogHelper.log(e);
+		}
+		throw new IllegalStateException("Unable to open or create Agent's rollback repository"); //$NON-NLS-1$
+	}
+
+	public static IInstallableUnit profileToIU(IProfile profile) {
+		InstallableUnitDescription result = new MetadataFactory.InstallableUnitDescription();
+		result.setProperty(IInstallableUnit.PROP_TYPE_PROFILE, Boolean.TRUE.toString());
+		result.setId(profile.getProfileId());
+		result.setVersion(new Version(0, 0, 0, Long.toString(uniqueTimestamp())));
+		result.setRequiredCapabilities(IUTransformationHelper.toRequirements(profile.query(InstallableUnitQuery.ANY, new Collector(), null).iterator(), false));
+		// Save the profile properties
+		// TODO we aren't marking these properties in any special way to indicate they came from profile properties.  Should we?
+		Map properties = profile.getProperties();
+		Iterator iter = properties.keySet().iterator();
+		while (iter.hasNext()) {
+			String key = (String) iter.next();
+			result.setProperty(key, (String) properties.get(key));
+		}
+		// Save the IU profile properties
+		Iterator allIUs = profile.query(InstallableUnitQuery.ANY, new Collector(), null).iterator();
+		while (allIUs.hasNext()) {
+			IInstallableUnit iu = (IInstallableUnit) allIUs.next();
+			properties = profile.getInstallableUnitProperties(iu);
+			iter = properties.keySet().iterator();
+			while (iter.hasNext()) {
+				String key = (String) iter.next();
+				result.setProperty(IUPROP_PREFIX + iu.getId() + IUPROP_POSTFIX + key, (String) properties.get(key));
+			}
+		}
+		return MetadataFactory.createInstallableUnit(result);
+	}
+
+	public static IProfile IUToProfile(IInstallableUnit profileIU, IProfile profile, ProvisioningContext context, IProgressMonitor monitor) throws ProvisionException {
+		try {
+			return new FormerStateProfile(profileIU, profile, context);
+		} finally {
+			if (monitor != null)
+				monitor.done();
+		}
+	}
+
+	public static ProfileChangeRequest generateProfileDeltaChangeRequest(IProfile current, IProfile target) {
+		ProfileChangeRequest request = new ProfileChangeRequest(current);
+
+		synchronizeProfileProperties(request, current, target);
+		synchronizeMarkedIUs(request, current, target);
+		synchronizeAllIUProperties(request, current, target);
+
+		return request;
+	}
+
+	private static void synchronizeAllIUProperties(ProfileChangeRequest request, IProfile current, IProfile target) {
+		Collection currentIUs = current.query(InstallableUnitQuery.ANY, new Collector(), null).toCollection();
+		Collection targetIUs = target.query(InstallableUnitQuery.ANY, new Collector(), null).toCollection();
+		List iusToAdd = new ArrayList(targetIUs);
+		iusToAdd.remove(currentIUs);
+
+		//additions
+		for (Iterator iterator = iusToAdd.iterator(); iterator.hasNext();) {
+			IInstallableUnit iu = (IInstallableUnit) iterator.next();
+			for (Iterator it = target.getInstallableUnitProperties(iu).entrySet().iterator(); it.hasNext();) {
+				Entry entry = (Entry) it.next();
+				String key = (String) entry.getKey();
+				String value = (String) entry.getValue();
+				request.setInstallableUnitProfileProperty(iu, key, value);
+			}
+		}
+
+		// updates
+		List iusToUpdate = new ArrayList(targetIUs);
+		iusToUpdate.remove(iusToAdd);
+		for (Iterator iterator = iusToUpdate.iterator(); iterator.hasNext();) {
+			IInstallableUnit iu = (IInstallableUnit) iterator.next();
+			Map propertiesToSet = new HashMap(target.getInstallableUnitProperties(iu));
+			for (Iterator it = current.getInstallableUnitProperties(iu).entrySet().iterator(); it.hasNext();) {
+				Entry entry = (Entry) it.next();
+				String key = (String) entry.getKey();
+				String newValue = (String) propertiesToSet.get(key);
+				if (newValue == null) {
+					request.removeInstallableUnitProfileProperty(iu, key);
+				} else if (newValue.equals(entry.getValue()))
+					propertiesToSet.remove(key);
+			}
+
+			for (Iterator it = propertiesToSet.entrySet().iterator(); it.hasNext();) {
+				Entry entry = (Entry) it.next();
+				String key = (String) entry.getKey();
+				String value = (String) entry.getValue();
+				request.setInstallableUnitProfileProperty(iu, key, value);
+			}
+		}
+	}
+
+	private static void synchronizeMarkedIUs(ProfileChangeRequest request, IProfile current, IProfile target) {
+		IInstallableUnit[] currentPlannerMarkedIUs = SimplePlanner.findPlannerMarkedIUs(current);
+		IInstallableUnit[] targetPlannerMarkedIUs = SimplePlanner.findPlannerMarkedIUs(target);
+
+		//additions
+		List markedIUsToAdd = new ArrayList(Arrays.asList(targetPlannerMarkedIUs));
+		markedIUsToAdd.removeAll(Arrays.asList(currentPlannerMarkedIUs));
+		request.addInstallableUnits((IInstallableUnit[]) markedIUsToAdd.toArray(new IInstallableUnit[markedIUsToAdd.size()]));
+
+		// removes
+		List markedIUsToRemove = new ArrayList(Arrays.asList(currentPlannerMarkedIUs));
+		markedIUsToRemove.removeAll(Arrays.asList(targetPlannerMarkedIUs));
+		request.removeInstallableUnits((IInstallableUnit[]) markedIUsToRemove.toArray(new IInstallableUnit[markedIUsToRemove.size()]));
+	}
+
+	private static void synchronizeProfileProperties(ProfileChangeRequest request, IProfile current, IProfile target) {
+		Map profilePropertiesToSet = new HashMap(target.getProperties());
+		for (Iterator it = current.getProperties().entrySet().iterator(); it.hasNext();) {
+			Entry entry = (Entry) it.next();
+			String key = (String) entry.getKey();
+
+			String newValue = (String) profilePropertiesToSet.get(key);
+			if (newValue == null) {
+				request.removeProfileProperty(key);
+			} else if (newValue.equals(entry.getValue()))
+				profilePropertiesToSet.remove(key);
+		}
+
+		for (Iterator it = profilePropertiesToSet.entrySet().iterator(); it.hasNext();) {
+			Entry entry = (Entry) it.next();
+			String key = (String) entry.getKey();
+			String value = (String) entry.getValue();
+			request.setProfileProperty(key, value);
+		}
+	}
+
+	public static class FormerStateProfile implements IProfile {
+
+		private String profileId;
+		private HashMap profileProperties = new HashMap();
+		private HashMap iuProfileProperties = new HashMap();
+		private Set ius = new HashSet();
+
+		public FormerStateProfile(IInstallableUnit profileIU, IProfile profile, ProvisioningContext context) throws ProvisionException {
+
+			String profileTypeProperty = profileIU.getProperty(IInstallableUnit.PROP_TYPE_PROFILE);
+			if (profileTypeProperty == null || !Boolean.valueOf(profileTypeProperty).booleanValue())
+				throw new ProvisionException(new Status(IStatus.ERROR, DirectorActivator.PI_DIRECTOR, "Not a profile type IU"));
+
+			profileId = profileIU.getId();
+			for (Iterator it = profileIU.getProperties().entrySet().iterator(); it.hasNext();) {
+				Entry entry = (Entry) it.next();
+				String key = (String) entry.getKey();
+				if (key.startsWith(IUPROP_PREFIX)) {
+					int postIndex = key.indexOf(FormerState.IUPROP_POSTFIX, FormerState.IUPROP_PREFIX.length());
+					String iuId = key.substring(FormerState.IUPROP_PREFIX.length(), postIndex);
+					Map iuProperties = (Map) iuProfileProperties.get(iuId);
+					if (iuProperties == null) {
+						iuProperties = new HashMap();
+						iuProfileProperties.put(iuId, iuProperties);
+					}
+					String iuPropertyKey = key.substring(postIndex + FormerState.IUPROP_POSTFIX.length());
+					iuProperties.put(iuPropertyKey, entry.getValue());
+				} else {
+					profileProperties.put(key, entry.getValue());
+				}
+			}
+			profileProperties.remove(IInstallableUnit.PROP_TYPE_PROFILE);
+
+			List extraIUs = new ArrayList(profile.query(InstallableUnitQuery.ANY, new Collector(), null).toCollection());
+			extraIUs.add(profileIU);
+
+			IInstallableUnit[] availableIUs = SimplePlanner.gatherAvailableInstallableUnits((IInstallableUnit[]) extraIUs.toArray(new IInstallableUnit[extraIUs.size()]), context.getMetadataRepositories(), context, new NullProgressMonitor());
+
+			Dictionary snapshotSelectionContext = SimplePlanner.createSelectionContext(profileProperties);
+			IInstallableUnit[] allIUs = new IInstallableUnit[] {profileIU};
+			Slicer slicer = new Slicer(allIUs, availableIUs, snapshotSelectionContext);
+			IQueryable slice = slicer.slice(allIUs, new NullProgressMonitor());
+			if (slice == null)
+				throw new ProvisionException(slicer.getStatus());
+
+			Projector projector = new Projector(slice, snapshotSelectionContext);
+			projector.encode(allIUs, new NullProgressMonitor());
+			IStatus s = projector.invokeSolver(new NullProgressMonitor());
+
+			if (s.getSeverity() == IStatus.ERROR) {
+				//log the error from the new solver so it is not lost
+				LogHelper.log(s);
+				if (!"true".equalsIgnoreCase(context == null ? null : context.getProperty("org.eclipse.equinox.p2.disable.error.reporting"))) {
+					//We invoke the old resolver to get explanations for now
+					IStatus oldResolverStatus = new NewDependencyExpander(allIUs, null, availableIUs, snapshotSelectionContext, false).expand(new NullProgressMonitor());
+					if (!oldResolverStatus.isOK())
+						s = oldResolverStatus;
+				}
+				throw new ProvisionException(s);
+			}
+			ius.addAll(projector.extractSolution());
+			ius.remove(profileIU);
+		}
+
+		public Map getInstallableUnitProperties(IInstallableUnit iu) {
+			Map iuProperties = (Map) iuProfileProperties.get(iu.getId());
+			if (iuProperties == null) {
+				return Collections.EMPTY_MAP;
+			}
+			return Collections.unmodifiableMap(iuProperties);
+		}
+
+		public String getInstallableUnitProperty(IInstallableUnit iu, String key) {
+			return (String) getInstallableUnitProperties(iu).get(key);
+		}
+
+		public Map getLocalProperties() {
+			return Collections.unmodifiableMap(profileProperties);
+		}
+
+		public String getLocalProperty(String key) {
+			return (String) profileProperties.get(key);
+		}
+
+		public IProfile getParentProfile() {
+			return null;
+		}
+
+		public String getProfileId() {
+			return profileId;
+		}
+
+		public Map getProperties() {
+			return Collections.unmodifiableMap(profileProperties);
+		}
+
+		public String getProperty(String key) {
+			return (String) profileProperties.get(key);
+		}
+
+		public String[] getSubProfileIds() {
+			return null;
+		}
+
+		public long getTimestamp() {
+			return 0;
+		}
+
+		public boolean hasSubProfiles() {
+			return false;
+		}
+
+		public boolean isRootProfile() {
+			return true;
+		}
+
+		public Collector query(Query query, Collector collector, IProgressMonitor monitor) {
+			return query.perform(ius.iterator(), collector);
+		}
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.ui/META-INF/MANIFEST.MF
index 2cdf1ca..6ba4d9a 100644
--- a/bundles/org.eclipse.equinox.p2.ui/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.ui/META-INF/MANIFEST.MF
@@ -20,6 +20,7 @@ Import-Package: org.eclipse.equinox.internal.p2.core.helpers,
  org.eclipse.equinox.internal.provisional.p2.metadata.query,
  org.eclipse.equinox.internal.provisional.p2.metadata.repository,
  org.eclipse.equinox.internal.provisional.p2.query,
+ org.eclipse.equinox.internal.provisional.p2.rollback,
  org.eclipse.equinox.internal.provisional.p2.updatechecker,
  org.eclipse.equinox.internal.provisional.spi.p2.core.repository,
  org.eclipse.osgi.service.resolver;version="1.1.0",
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/RevertProfileWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/RevertProfileWizardPage.java
index e87ecd4..55181c7 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/RevertProfileWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/RevertProfileWizardPage.java
@@ -13,7 +13,7 @@ package org.eclipse.equinox.internal.p2.ui.dialogs;
 import java.lang.reflect.InvocationTargetException;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
-import org.eclipse.equinox.internal.p2.ui.viewers.StaticContentProvider;
+import org.eclipse.equinox.internal.p2.ui.viewers.IUDetailsLabelProvider;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
@@ -67,6 +67,7 @@ public class RevertProfileWizardPage extends WizardPage {
 		createContentsSection(sashForm);
 		setControl(sashForm);
 
+		// prime the selection
 		Object element = configsViewer.getElementAt(0);
 		if (element != null)
 			configsViewer.setSelection(new StructuredSelection(element));
@@ -123,12 +124,15 @@ public class RevertProfileWizardPage extends WizardPage {
 
 		Label label = new Label(composite, SWT.NONE);
 		label.setText(ProvUIMessages.RevertDialog_ConfigContentsLabel);
-		configContentsViewer = new TableViewer(composite, SWT.MULTI | SWT.FULL_SELECTION | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
-		configContentsViewer.setContentProvider(new StaticContentProvider(new Object[0]));
-		configContentsViewer.setInput(new Object[0]);
-		configContentsViewer.setLabelProvider(new ProvElementLabelProvider());
-		configContentsViewer.setComparator(new ViewerComparator());
+		configContentsViewer = new TableViewer(composite, SWT.SINGLE | SWT.FULL_SELECTION | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
+		configContentsViewer.setComparator(new IUComparator(IUComparator.IU_NAME));
+		configContentsViewer.setComparer(new ProvElementComparer());
+		configContentsViewer.setContentProvider(new DeferredQueryContentProvider(queryProvider));
+
+		// columns before labels or you get a blank table
 		setTableColumns(configContentsViewer.getTable());
+		configContentsViewer.setLabelProvider(new IUDetailsLabelProvider());
+
 		gd = new GridData(GridData.FILL_BOTH);
 		configContentsViewer.getControl().setLayoutData(gd);
 
@@ -149,7 +153,7 @@ public class RevertProfileWizardPage extends WizardPage {
 		if (!selection.isEmpty()) {
 			Object selected = selection.getFirstElement();
 			if (selected instanceof RollbackProfileElement)
-				configContentsViewer.setInput(((RollbackProfileElement) selected).getChildren(null));
+				configContentsViewer.setInput(selected);
 		}
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/RollbackProfileElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/RollbackProfileElement.java
index 5fc04b1..86ad87e 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/RollbackProfileElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/RollbackProfileElement.java
@@ -11,22 +11,34 @@
 package org.eclipse.equinox.internal.provisional.p2.ui.model;
 
 import java.text.DateFormat;
-import java.util.*;
+import java.util.Date;
 import org.eclipse.core.runtime.IProgressMonitor;
-import org.eclipse.equinox.internal.p2.ui.model.ProvElement;
+import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
+import org.eclipse.equinox.internal.p2.ui.model.RemoteQueriedElement;
+import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
+import org.eclipse.equinox.internal.provisional.p2.engine.ProvisioningContext;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.internal.provisional.p2.metadata.RequiredCapability;
+import org.eclipse.equinox.internal.provisional.p2.query.IQueryable;
+import org.eclipse.equinox.internal.provisional.p2.rollback.FormerState;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUIImages;
+import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
+import org.eclipse.equinox.internal.provisional.p2.ui.policy.IQueryProvider;
+import org.eclipse.osgi.util.NLS;
 
 /**
- * Element wrapper class for IU's that represent categories of
- * available IU's
+ * Element wrapper class for an IU that represents a profile snapshot
+ * from a rollback repository.  It has characteristics of an IU element,
+ * in that it is stored as an IU and can be adapted to its IU.  But 
+ * conceptually, it is more like a profile, in that its children are the
+ * IU's that represent the content of the profile when it was snapshotted.
  * 
  * @since 3.4
  */
-public class RollbackProfileElement extends ProvElement implements IUElement {
+public class RollbackProfileElement extends RemoteQueriedElement implements IUElement {
 
 	private IInstallableUnit iu;
+	private IProfile snapshot;
 
 	public RollbackProfileElement(IInstallableUnit iu) {
 		this.iu = iu;
@@ -48,6 +60,8 @@ public class RollbackProfileElement extends ProvElement implements IUElement {
 	public Object getAdapter(Class adapter) {
 		if (adapter == IInstallableUnit.class)
 			return iu;
+		if (adapter == IProfile.class)
+			return getProfileSnapshot(null);
 		return super.getAdapter(adapter);
 	}
 
@@ -67,23 +81,48 @@ public class RollbackProfileElement extends ProvElement implements IUElement {
 		return false;
 	}
 
-	public Object[] getChildren(Object o) {
-		RequiredCapability[] reqs = iu.getRequiredCapabilities();
-		List roots = new ArrayList(reqs.length);
-		// TODO we really want to filter out install roots
-		// See https://bugs.eclipse.org/bugs/show_bug.cgi?id=197701
-		for (int i = 0; i < reqs.length; i++)
-			if (IInstallableUnit.NAMESPACE_IU_ID.equals(reqs[i].getNamespace()))
-				roots.add(reqs[i]);
-		return roots.toArray();
+	public void computeSize(IProgressMonitor monitor) {
+		// Should never be called, since shouldShowSize() returns false
 	}
 
-	public Object getParent(Object o) {
-		return null;
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.p2.ui.query.QueriedElement#getDefaultQueryType()
+	 */
+	protected int getDefaultQueryType() {
+		return IQueryProvider.INSTALLED_IUS;
 	}
 
-	public void computeSize(IProgressMonitor monitor) {
-		// Should never be called, since shouldShowSize() returns false
+	/*
+	 * overridden to lazily fetch profile
+	 * (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.p2.ui.query.QueriedElement#getQueryable()
+	 */
+	public IQueryable getQueryable() {
+		if (queryable == null)
+			return getProfileSnapshot(null);
+		return queryable;
+	}
+
+	private IProfile getProfileSnapshot(IProgressMonitor monitor) {
+		if (snapshot == null)
+			try {
+				IProfile profile = ProvisioningUtil.getProfile(iu.getId());
+				snapshot = FormerState.IUToProfile(iu, profile, new ProvisioningContext(), monitor);
+				setQueryable(snapshot);
+			} catch (ProvisionException e) {
+				handleException(e, NLS.bind(ProvUIMessages.ProfileElement_InvalidProfile, iu.getId()));
+			}
+		return snapshot;
 	}
 
+	/*
+	 * overridden to check whether snapshot IU is specified rather
+	 * than loading the profile via getQueryable()
+	 * (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.p2.ui.query.QueriedElement#knowsQueryable()
+	 */
+	public boolean knowsQueryable() {
+		return iu != null;
+	}
 }
commit a761310ca00405f1a10fbe29a826ab97a8250de7
Author: Susan Franklin <sfranklin>
Date:   Tue Apr 15 18:04:54 2008 +0000

    Bug 217942 - [prov] [ui] Revert view should only show root IU's
    Keep rollback package internal and friend the UI

2	2	bundles/org.eclipse.equinox.p2.director/META-INF/MANIFEST.MF
1	1	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java
1	1	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
360	0	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java
0	360	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/provisional/p2/rollback/FormerState.java
1	1	bundles/org.eclipse.equinox.p2.ui/META-INF/MANIFEST.MF
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/RollbackProfileElement.java
diff --git a/bundles/org.eclipse.equinox.p2.director/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.director/META-INF/MANIFEST.MF
index 6044027..9385c51 100644
--- a/bundles/org.eclipse.equinox.p2.director/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.director/META-INF/MANIFEST.MF
@@ -21,8 +21,8 @@ Import-Package: org.eclipse.equinox.internal.p2.core.helpers,
  org.osgi.framework;version="1.3.0"
 Export-Package: org.eclipse.equinox.internal.p2.director;x-friends:="org.eclipse.equinox.p2.exemplarysetup",
  org.eclipse.equinox.internal.p2.resolution;x-internal:=true,
- org.eclipse.equinox.internal.provisional.p2.director,
- org.eclipse.equinox.internal.provisional.p2.rollback
+ org.eclipse.equinox.internal.p2.rollback;x-friends:="org.eclipse.equinox.p2.ui",
+ org.eclipse.equinox.internal.provisional.p2.director
 Bundle-Activator: org.eclipse.equinox.internal.p2.director.DirectorActivator
 Eclipse-LazyStart: true
 Bundle-RequiredExecutionEnvironment: CDC-1.1/Foundation-1.1,
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java
index e68a4ad..7a34892 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java
@@ -12,11 +12,11 @@ import java.net.MalformedURLException;
 import java.net.URL;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
+import org.eclipse.equinox.internal.p2.rollback.FormerState;
 import org.eclipse.equinox.internal.provisional.p2.core.location.AgentLocation;
 import org.eclipse.equinox.internal.provisional.p2.director.*;
 import org.eclipse.equinox.internal.provisional.p2.engine.*;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.internal.provisional.p2.rollback.FormerState;
 import org.eclipse.osgi.util.NLS;
 
 public class SimpleDirector implements IDirector {
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
index 924158c..7582e06 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
@@ -16,6 +16,7 @@ import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.resolution.ResolutionHelper;
+import org.eclipse.equinox.internal.p2.rollback.FormerState;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.director.*;
 import org.eclipse.equinox.internal.provisional.p2.engine.*;
@@ -26,7 +27,6 @@ import org.eclipse.equinox.internal.provisional.p2.metadata.query.UpdateQuery;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.query.*;
-import org.eclipse.equinox.internal.provisional.p2.rollback.FormerState;
 import org.eclipse.osgi.service.resolver.VersionRange;
 import org.eclipse.osgi.util.NLS;
 import org.osgi.framework.Version;
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java
new file mode 100644
index 0000000..f9aa2be
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java
@@ -0,0 +1,360 @@
+/*******************************************************************************
+ * Copyright (c) 2007, 2008 IBM Corporation and others. All rights reserved. This
+ * program and the accompanying materials are made available under the terms of
+ * the Eclipse Public License v1.0 which accompanies this distribution, and is
+ * available at http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors: IBM Corporation - initial API and implementation
+ ******************************************************************************/
+package org.eclipse.equinox.internal.p2.rollback;
+
+import java.net.URL;
+import java.util.*;
+import java.util.Map.Entry;
+import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
+import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
+import org.eclipse.equinox.internal.p2.director.*;
+import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.equinox.internal.provisional.p2.core.eventbus.IProvisioningEventBus;
+import org.eclipse.equinox.internal.provisional.p2.core.eventbus.SynchronousProvisioningListener;
+import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
+import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest;
+import org.eclipse.equinox.internal.provisional.p2.engine.*;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory;
+import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory.InstallableUnitDescription;
+import org.eclipse.equinox.internal.provisional.p2.metadata.query.InstallableUnitQuery;
+import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepository;
+import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepositoryManager;
+import org.eclipse.equinox.internal.provisional.p2.query.*;
+import org.osgi.framework.Version;
+
+public class FormerState {
+
+	public static final String IUPROP_PREFIX = "---IUPROPERTY---"; //$NON-NLS-1$
+	public static final String IUPROP_POSTFIX = "---IUPROPERTYKEY---"; //$NON-NLS-1$
+	private static long lastTimestamp;
+	URL location = null;
+
+	Hashtable generatedIUs = new Hashtable(); //key profile id, value the iu representing this profile
+
+	private synchronized static long uniqueTimestamp() {
+		long timewaited = 0;
+		long timestamp = System.currentTimeMillis();
+		while (timestamp == lastTimestamp) {
+			if (timewaited > 1000)
+				throw new IllegalStateException("uniquetimestamp failed"); //$NON-NLS-1$
+			try {
+				Thread.sleep(10);
+			} catch (InterruptedException e) {
+				// reset interrupted status
+				Thread.currentThread().interrupt();
+			}
+			timewaited += 10;
+			timestamp = System.currentTimeMillis();
+		}
+		lastTimestamp = timestamp;
+		return timestamp;
+	}
+
+	public FormerState(URL repoLocation) {
+		if (repoLocation == null)
+			throw new IllegalArgumentException("Repository location can't be null"); //$NON-NLS-1$
+		IProvisioningEventBus eventBus = (IProvisioningEventBus) ServiceHelper.getService(DirectorActivator.context, IProvisioningEventBus.SERVICE_NAME);
+		location = repoLocation;
+
+		//listen for pre-event. to snapshot the profile
+		eventBus.addListener(new SynchronousProvisioningListener() {
+			public void notify(EventObject o) {
+				if (o instanceof BeginOperationEvent) {
+					BeginOperationEvent event = (BeginOperationEvent) o;
+					IInstallableUnit iuForProfile = profileToIU(event.getProfile());
+					generatedIUs.put(event.getProfile().getProfileId(), iuForProfile);
+				} else if (o instanceof ProfileEvent) {
+					ProfileEvent event = (ProfileEvent) o;
+					if (event.getReason() == ProfileEvent.CHANGED)
+						getRepository().addInstallableUnits(new IInstallableUnit[] {(IInstallableUnit) generatedIUs.get(event.getProfileId())});
+					return;
+				} else if (o instanceof RollbackOperationEvent) {
+					RollbackOperationEvent event = (RollbackOperationEvent) o;
+					generatedIUs.remove(event.getProfile().getProfileId());
+					return;
+				}
+				//TODO We need to decide what to do on profile removal				
+				//				else if (o instanceof ProfileEvent) {
+				//					ProfileEvent pe = (ProfileEvent) o;
+				//					if (pe.getReason() == ProfileEvent.REMOVED) {
+				//						profileRegistries.remove(pe.getProfile().getProfileId());
+				//						persist();
+				//					}
+				//				}
+			}
+
+		});
+	}
+
+	IMetadataRepository getRepository() {
+		IMetadataRepositoryManager manager = (IMetadataRepositoryManager) ServiceHelper.getService(DirectorActivator.context, IMetadataRepositoryManager.class.getName());
+		try {
+			return manager.loadRepository(location, null);
+		} catch (ProvisionException e) {
+			//fall through and create a new repository
+		}
+		try {
+			IMetadataRepository repository = manager.createRepository(location, "Agent rollback repository", IMetadataRepositoryManager.TYPE_SIMPLE_REPOSITORY); //$NON-NLS-1$
+			manager.addRepository(repository.getLocation());
+			repository.setProperty(IRepository.PROP_SYSTEM, Boolean.TRUE.toString());
+			return repository;
+		} catch (ProvisionException e) {
+			LogHelper.log(e);
+		}
+		throw new IllegalStateException("Unable to open or create Agent's rollback repository"); //$NON-NLS-1$
+	}
+
+	public static IInstallableUnit profileToIU(IProfile profile) {
+		InstallableUnitDescription result = new MetadataFactory.InstallableUnitDescription();
+		result.setProperty(IInstallableUnit.PROP_TYPE_PROFILE, Boolean.TRUE.toString());
+		result.setId(profile.getProfileId());
+		result.setVersion(new Version(0, 0, 0, Long.toString(uniqueTimestamp())));
+		result.setRequiredCapabilities(IUTransformationHelper.toRequirements(profile.query(InstallableUnitQuery.ANY, new Collector(), null).iterator(), false));
+		// Save the profile properties
+		// TODO we aren't marking these properties in any special way to indicate they came from profile properties.  Should we?
+		Map properties = profile.getProperties();
+		Iterator iter = properties.keySet().iterator();
+		while (iter.hasNext()) {
+			String key = (String) iter.next();
+			result.setProperty(key, (String) properties.get(key));
+		}
+		// Save the IU profile properties
+		Iterator allIUs = profile.query(InstallableUnitQuery.ANY, new Collector(), null).iterator();
+		while (allIUs.hasNext()) {
+			IInstallableUnit iu = (IInstallableUnit) allIUs.next();
+			properties = profile.getInstallableUnitProperties(iu);
+			iter = properties.keySet().iterator();
+			while (iter.hasNext()) {
+				String key = (String) iter.next();
+				result.setProperty(IUPROP_PREFIX + iu.getId() + IUPROP_POSTFIX + key, (String) properties.get(key));
+			}
+		}
+		return MetadataFactory.createInstallableUnit(result);
+	}
+
+	public static IProfile IUToProfile(IInstallableUnit profileIU, IProfile profile, ProvisioningContext context, IProgressMonitor monitor) throws ProvisionException {
+		try {
+			return new FormerStateProfile(profileIU, profile, context);
+		} finally {
+			if (monitor != null)
+				monitor.done();
+		}
+	}
+
+	public static ProfileChangeRequest generateProfileDeltaChangeRequest(IProfile current, IProfile target) {
+		ProfileChangeRequest request = new ProfileChangeRequest(current);
+
+		synchronizeProfileProperties(request, current, target);
+		synchronizeMarkedIUs(request, current, target);
+		synchronizeAllIUProperties(request, current, target);
+
+		return request;
+	}
+
+	private static void synchronizeAllIUProperties(ProfileChangeRequest request, IProfile current, IProfile target) {
+		Collection currentIUs = current.query(InstallableUnitQuery.ANY, new Collector(), null).toCollection();
+		Collection targetIUs = target.query(InstallableUnitQuery.ANY, new Collector(), null).toCollection();
+		List iusToAdd = new ArrayList(targetIUs);
+		iusToAdd.remove(currentIUs);
+
+		//additions
+		for (Iterator iterator = iusToAdd.iterator(); iterator.hasNext();) {
+			IInstallableUnit iu = (IInstallableUnit) iterator.next();
+			for (Iterator it = target.getInstallableUnitProperties(iu).entrySet().iterator(); it.hasNext();) {
+				Entry entry = (Entry) it.next();
+				String key = (String) entry.getKey();
+				String value = (String) entry.getValue();
+				request.setInstallableUnitProfileProperty(iu, key, value);
+			}
+		}
+
+		// updates
+		List iusToUpdate = new ArrayList(targetIUs);
+		iusToUpdate.remove(iusToAdd);
+		for (Iterator iterator = iusToUpdate.iterator(); iterator.hasNext();) {
+			IInstallableUnit iu = (IInstallableUnit) iterator.next();
+			Map propertiesToSet = new HashMap(target.getInstallableUnitProperties(iu));
+			for (Iterator it = current.getInstallableUnitProperties(iu).entrySet().iterator(); it.hasNext();) {
+				Entry entry = (Entry) it.next();
+				String key = (String) entry.getKey();
+				String newValue = (String) propertiesToSet.get(key);
+				if (newValue == null) {
+					request.removeInstallableUnitProfileProperty(iu, key);
+				} else if (newValue.equals(entry.getValue()))
+					propertiesToSet.remove(key);
+			}
+
+			for (Iterator it = propertiesToSet.entrySet().iterator(); it.hasNext();) {
+				Entry entry = (Entry) it.next();
+				String key = (String) entry.getKey();
+				String value = (String) entry.getValue();
+				request.setInstallableUnitProfileProperty(iu, key, value);
+			}
+		}
+	}
+
+	private static void synchronizeMarkedIUs(ProfileChangeRequest request, IProfile current, IProfile target) {
+		IInstallableUnit[] currentPlannerMarkedIUs = SimplePlanner.findPlannerMarkedIUs(current);
+		IInstallableUnit[] targetPlannerMarkedIUs = SimplePlanner.findPlannerMarkedIUs(target);
+
+		//additions
+		List markedIUsToAdd = new ArrayList(Arrays.asList(targetPlannerMarkedIUs));
+		markedIUsToAdd.removeAll(Arrays.asList(currentPlannerMarkedIUs));
+		request.addInstallableUnits((IInstallableUnit[]) markedIUsToAdd.toArray(new IInstallableUnit[markedIUsToAdd.size()]));
+
+		// removes
+		List markedIUsToRemove = new ArrayList(Arrays.asList(currentPlannerMarkedIUs));
+		markedIUsToRemove.removeAll(Arrays.asList(targetPlannerMarkedIUs));
+		request.removeInstallableUnits((IInstallableUnit[]) markedIUsToRemove.toArray(new IInstallableUnit[markedIUsToRemove.size()]));
+	}
+
+	private static void synchronizeProfileProperties(ProfileChangeRequest request, IProfile current, IProfile target) {
+		Map profilePropertiesToSet = new HashMap(target.getProperties());
+		for (Iterator it = current.getProperties().entrySet().iterator(); it.hasNext();) {
+			Entry entry = (Entry) it.next();
+			String key = (String) entry.getKey();
+
+			String newValue = (String) profilePropertiesToSet.get(key);
+			if (newValue == null) {
+				request.removeProfileProperty(key);
+			} else if (newValue.equals(entry.getValue()))
+				profilePropertiesToSet.remove(key);
+		}
+
+		for (Iterator it = profilePropertiesToSet.entrySet().iterator(); it.hasNext();) {
+			Entry entry = (Entry) it.next();
+			String key = (String) entry.getKey();
+			String value = (String) entry.getValue();
+			request.setProfileProperty(key, value);
+		}
+	}
+
+	public static class FormerStateProfile implements IProfile {
+
+		private String profileId;
+		private HashMap profileProperties = new HashMap();
+		private HashMap iuProfileProperties = new HashMap();
+		private Set ius = new HashSet();
+
+		public FormerStateProfile(IInstallableUnit profileIU, IProfile profile, ProvisioningContext context) throws ProvisionException {
+
+			String profileTypeProperty = profileIU.getProperty(IInstallableUnit.PROP_TYPE_PROFILE);
+			if (profileTypeProperty == null || !Boolean.valueOf(profileTypeProperty).booleanValue())
+				throw new ProvisionException(new Status(IStatus.ERROR, DirectorActivator.PI_DIRECTOR, "Not a profile type IU"));
+
+			profileId = profileIU.getId();
+			for (Iterator it = profileIU.getProperties().entrySet().iterator(); it.hasNext();) {
+				Entry entry = (Entry) it.next();
+				String key = (String) entry.getKey();
+				if (key.startsWith(IUPROP_PREFIX)) {
+					int postIndex = key.indexOf(FormerState.IUPROP_POSTFIX, FormerState.IUPROP_PREFIX.length());
+					String iuId = key.substring(FormerState.IUPROP_PREFIX.length(), postIndex);
+					Map iuProperties = (Map) iuProfileProperties.get(iuId);
+					if (iuProperties == null) {
+						iuProperties = new HashMap();
+						iuProfileProperties.put(iuId, iuProperties);
+					}
+					String iuPropertyKey = key.substring(postIndex + FormerState.IUPROP_POSTFIX.length());
+					iuProperties.put(iuPropertyKey, entry.getValue());
+				} else {
+					profileProperties.put(key, entry.getValue());
+				}
+			}
+			profileProperties.remove(IInstallableUnit.PROP_TYPE_PROFILE);
+
+			List extraIUs = new ArrayList(profile.query(InstallableUnitQuery.ANY, new Collector(), null).toCollection());
+			extraIUs.add(profileIU);
+
+			IInstallableUnit[] availableIUs = SimplePlanner.gatherAvailableInstallableUnits((IInstallableUnit[]) extraIUs.toArray(new IInstallableUnit[extraIUs.size()]), context.getMetadataRepositories(), context, new NullProgressMonitor());
+
+			Dictionary snapshotSelectionContext = SimplePlanner.createSelectionContext(profileProperties);
+			IInstallableUnit[] allIUs = new IInstallableUnit[] {profileIU};
+			Slicer slicer = new Slicer(allIUs, availableIUs, snapshotSelectionContext);
+			IQueryable slice = slicer.slice(allIUs, new NullProgressMonitor());
+			if (slice == null)
+				throw new ProvisionException(slicer.getStatus());
+
+			Projector projector = new Projector(slice, snapshotSelectionContext);
+			projector.encode(allIUs, new NullProgressMonitor());
+			IStatus s = projector.invokeSolver(new NullProgressMonitor());
+
+			if (s.getSeverity() == IStatus.ERROR) {
+				//log the error from the new solver so it is not lost
+				LogHelper.log(s);
+				if (!"true".equalsIgnoreCase(context == null ? null : context.getProperty("org.eclipse.equinox.p2.disable.error.reporting"))) {
+					//We invoke the old resolver to get explanations for now
+					IStatus oldResolverStatus = new NewDependencyExpander(allIUs, null, availableIUs, snapshotSelectionContext, false).expand(new NullProgressMonitor());
+					if (!oldResolverStatus.isOK())
+						s = oldResolverStatus;
+				}
+				throw new ProvisionException(s);
+			}
+			ius.addAll(projector.extractSolution());
+			ius.remove(profileIU);
+		}
+
+		public Map getInstallableUnitProperties(IInstallableUnit iu) {
+			Map iuProperties = (Map) iuProfileProperties.get(iu.getId());
+			if (iuProperties == null) {
+				return Collections.EMPTY_MAP;
+			}
+			return Collections.unmodifiableMap(iuProperties);
+		}
+
+		public String getInstallableUnitProperty(IInstallableUnit iu, String key) {
+			return (String) getInstallableUnitProperties(iu).get(key);
+		}
+
+		public Map getLocalProperties() {
+			return Collections.unmodifiableMap(profileProperties);
+		}
+
+		public String getLocalProperty(String key) {
+			return (String) profileProperties.get(key);
+		}
+
+		public IProfile getParentProfile() {
+			return null;
+		}
+
+		public String getProfileId() {
+			return profileId;
+		}
+
+		public Map getProperties() {
+			return Collections.unmodifiableMap(profileProperties);
+		}
+
+		public String getProperty(String key) {
+			return (String) profileProperties.get(key);
+		}
+
+		public String[] getSubProfileIds() {
+			return null;
+		}
+
+		public long getTimestamp() {
+			return 0;
+		}
+
+		public boolean hasSubProfiles() {
+			return false;
+		}
+
+		public boolean isRootProfile() {
+			return true;
+		}
+
+		public Collector query(Query query, Collector collector, IProgressMonitor monitor) {
+			return query.perform(ius.iterator(), collector);
+		}
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/provisional/p2/rollback/FormerState.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/provisional/p2/rollback/FormerState.java
deleted file mode 100644
index 17c429d..0000000
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/provisional/p2/rollback/FormerState.java
+++ /dev/null
@@ -1,360 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others. All rights reserved. This
- * program and the accompanying materials are made available under the terms of
- * the Eclipse Public License v1.0 which accompanies this distribution, and is
- * available at http://www.eclipse.org/legal/epl-v10.html
- * 
- * Contributors: IBM Corporation - initial API and implementation
- ******************************************************************************/
-package org.eclipse.equinox.internal.provisional.p2.rollback;
-
-import java.net.URL;
-import java.util.*;
-import java.util.Map.Entry;
-import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
-import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
-import org.eclipse.equinox.internal.p2.director.*;
-import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
-import org.eclipse.equinox.internal.provisional.p2.core.eventbus.IProvisioningEventBus;
-import org.eclipse.equinox.internal.provisional.p2.core.eventbus.SynchronousProvisioningListener;
-import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
-import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest;
-import org.eclipse.equinox.internal.provisional.p2.engine.*;
-import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory;
-import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory.InstallableUnitDescription;
-import org.eclipse.equinox.internal.provisional.p2.metadata.query.InstallableUnitQuery;
-import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepository;
-import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepositoryManager;
-import org.eclipse.equinox.internal.provisional.p2.query.*;
-import org.osgi.framework.Version;
-
-public class FormerState {
-
-	public static final String IUPROP_PREFIX = "---IUPROPERTY---"; //$NON-NLS-1$
-	public static final String IUPROP_POSTFIX = "---IUPROPERTYKEY---"; //$NON-NLS-1$
-	private static long lastTimestamp;
-	URL location = null;
-
-	Hashtable generatedIUs = new Hashtable(); //key profile id, value the iu representing this profile
-
-	private synchronized static long uniqueTimestamp() {
-		long timewaited = 0;
-		long timestamp = System.currentTimeMillis();
-		while (timestamp == lastTimestamp) {
-			if (timewaited > 1000)
-				throw new IllegalStateException("uniquetimestamp failed"); //$NON-NLS-1$
-			try {
-				Thread.sleep(10);
-			} catch (InterruptedException e) {
-				// reset interrupted status
-				Thread.currentThread().interrupt();
-			}
-			timewaited += 10;
-			timestamp = System.currentTimeMillis();
-		}
-		lastTimestamp = timestamp;
-		return timestamp;
-	}
-
-	public FormerState(URL repoLocation) {
-		if (repoLocation == null)
-			throw new IllegalArgumentException("Repository location can't be null"); //$NON-NLS-1$
-		IProvisioningEventBus eventBus = (IProvisioningEventBus) ServiceHelper.getService(DirectorActivator.context, IProvisioningEventBus.SERVICE_NAME);
-		location = repoLocation;
-
-		//listen for pre-event. to snapshot the profile
-		eventBus.addListener(new SynchronousProvisioningListener() {
-			public void notify(EventObject o) {
-				if (o instanceof BeginOperationEvent) {
-					BeginOperationEvent event = (BeginOperationEvent) o;
-					IInstallableUnit iuForProfile = profileToIU(event.getProfile());
-					generatedIUs.put(event.getProfile().getProfileId(), iuForProfile);
-				} else if (o instanceof ProfileEvent) {
-					ProfileEvent event = (ProfileEvent) o;
-					if (event.getReason() == ProfileEvent.CHANGED)
-						getRepository().addInstallableUnits(new IInstallableUnit[] {(IInstallableUnit) generatedIUs.get(event.getProfileId())});
-					return;
-				} else if (o instanceof RollbackOperationEvent) {
-					RollbackOperationEvent event = (RollbackOperationEvent) o;
-					generatedIUs.remove(event.getProfile().getProfileId());
-					return;
-				}
-				//TODO We need to decide what to do on profile removal				
-				//				else if (o instanceof ProfileEvent) {
-				//					ProfileEvent pe = (ProfileEvent) o;
-				//					if (pe.getReason() == ProfileEvent.REMOVED) {
-				//						profileRegistries.remove(pe.getProfile().getProfileId());
-				//						persist();
-				//					}
-				//				}
-			}
-
-		});
-	}
-
-	IMetadataRepository getRepository() {
-		IMetadataRepositoryManager manager = (IMetadataRepositoryManager) ServiceHelper.getService(DirectorActivator.context, IMetadataRepositoryManager.class.getName());
-		try {
-			return manager.loadRepository(location, null);
-		} catch (ProvisionException e) {
-			//fall through and create a new repository
-		}
-		try {
-			IMetadataRepository repository = manager.createRepository(location, "Agent rollback repository", IMetadataRepositoryManager.TYPE_SIMPLE_REPOSITORY); //$NON-NLS-1$
-			manager.addRepository(repository.getLocation());
-			repository.setProperty(IRepository.PROP_SYSTEM, Boolean.TRUE.toString());
-			return repository;
-		} catch (ProvisionException e) {
-			LogHelper.log(e);
-		}
-		throw new IllegalStateException("Unable to open or create Agent's rollback repository"); //$NON-NLS-1$
-	}
-
-	public static IInstallableUnit profileToIU(IProfile profile) {
-		InstallableUnitDescription result = new MetadataFactory.InstallableUnitDescription();
-		result.setProperty(IInstallableUnit.PROP_TYPE_PROFILE, Boolean.TRUE.toString());
-		result.setId(profile.getProfileId());
-		result.setVersion(new Version(0, 0, 0, Long.toString(uniqueTimestamp())));
-		result.setRequiredCapabilities(IUTransformationHelper.toRequirements(profile.query(InstallableUnitQuery.ANY, new Collector(), null).iterator(), false));
-		// Save the profile properties
-		// TODO we aren't marking these properties in any special way to indicate they came from profile properties.  Should we?
-		Map properties = profile.getProperties();
-		Iterator iter = properties.keySet().iterator();
-		while (iter.hasNext()) {
-			String key = (String) iter.next();
-			result.setProperty(key, (String) properties.get(key));
-		}
-		// Save the IU profile properties
-		Iterator allIUs = profile.query(InstallableUnitQuery.ANY, new Collector(), null).iterator();
-		while (allIUs.hasNext()) {
-			IInstallableUnit iu = (IInstallableUnit) allIUs.next();
-			properties = profile.getInstallableUnitProperties(iu);
-			iter = properties.keySet().iterator();
-			while (iter.hasNext()) {
-				String key = (String) iter.next();
-				result.setProperty(IUPROP_PREFIX + iu.getId() + IUPROP_POSTFIX + key, (String) properties.get(key));
-			}
-		}
-		return MetadataFactory.createInstallableUnit(result);
-	}
-
-	public static IProfile IUToProfile(IInstallableUnit profileIU, IProfile profile, ProvisioningContext context, IProgressMonitor monitor) throws ProvisionException {
-		try {
-			return new FormerStateProfile(profileIU, profile, context);
-		} finally {
-			if (monitor != null)
-				monitor.done();
-		}
-	}
-
-	public static ProfileChangeRequest generateProfileDeltaChangeRequest(IProfile current, IProfile target) {
-		ProfileChangeRequest request = new ProfileChangeRequest(current);
-
-		synchronizeProfileProperties(request, current, target);
-		synchronizeMarkedIUs(request, current, target);
-		synchronizeAllIUProperties(request, current, target);
-
-		return request;
-	}
-
-	private static void synchronizeAllIUProperties(ProfileChangeRequest request, IProfile current, IProfile target) {
-		Collection currentIUs = current.query(InstallableUnitQuery.ANY, new Collector(), null).toCollection();
-		Collection targetIUs = target.query(InstallableUnitQuery.ANY, new Collector(), null).toCollection();
-		List iusToAdd = new ArrayList(targetIUs);
-		iusToAdd.remove(currentIUs);
-
-		//additions
-		for (Iterator iterator = iusToAdd.iterator(); iterator.hasNext();) {
-			IInstallableUnit iu = (IInstallableUnit) iterator.next();
-			for (Iterator it = target.getInstallableUnitProperties(iu).entrySet().iterator(); it.hasNext();) {
-				Entry entry = (Entry) it.next();
-				String key = (String) entry.getKey();
-				String value = (String) entry.getValue();
-				request.setInstallableUnitProfileProperty(iu, key, value);
-			}
-		}
-
-		// updates
-		List iusToUpdate = new ArrayList(targetIUs);
-		iusToUpdate.remove(iusToAdd);
-		for (Iterator iterator = iusToUpdate.iterator(); iterator.hasNext();) {
-			IInstallableUnit iu = (IInstallableUnit) iterator.next();
-			Map propertiesToSet = new HashMap(target.getInstallableUnitProperties(iu));
-			for (Iterator it = current.getInstallableUnitProperties(iu).entrySet().iterator(); it.hasNext();) {
-				Entry entry = (Entry) it.next();
-				String key = (String) entry.getKey();
-				String newValue = (String) propertiesToSet.get(key);
-				if (newValue == null) {
-					request.removeInstallableUnitProfileProperty(iu, key);
-				} else if (newValue.equals(entry.getValue()))
-					propertiesToSet.remove(key);
-			}
-
-			for (Iterator it = propertiesToSet.entrySet().iterator(); it.hasNext();) {
-				Entry entry = (Entry) it.next();
-				String key = (String) entry.getKey();
-				String value = (String) entry.getValue();
-				request.setInstallableUnitProfileProperty(iu, key, value);
-			}
-		}
-	}
-
-	private static void synchronizeMarkedIUs(ProfileChangeRequest request, IProfile current, IProfile target) {
-		IInstallableUnit[] currentPlannerMarkedIUs = SimplePlanner.findPlannerMarkedIUs(current);
-		IInstallableUnit[] targetPlannerMarkedIUs = SimplePlanner.findPlannerMarkedIUs(target);
-
-		//additions
-		List markedIUsToAdd = new ArrayList(Arrays.asList(targetPlannerMarkedIUs));
-		markedIUsToAdd.removeAll(Arrays.asList(currentPlannerMarkedIUs));
-		request.addInstallableUnits((IInstallableUnit[]) markedIUsToAdd.toArray(new IInstallableUnit[markedIUsToAdd.size()]));
-
-		// removes
-		List markedIUsToRemove = new ArrayList(Arrays.asList(currentPlannerMarkedIUs));
-		markedIUsToRemove.removeAll(Arrays.asList(targetPlannerMarkedIUs));
-		request.removeInstallableUnits((IInstallableUnit[]) markedIUsToRemove.toArray(new IInstallableUnit[markedIUsToRemove.size()]));
-	}
-
-	private static void synchronizeProfileProperties(ProfileChangeRequest request, IProfile current, IProfile target) {
-		Map profilePropertiesToSet = new HashMap(target.getProperties());
-		for (Iterator it = current.getProperties().entrySet().iterator(); it.hasNext();) {
-			Entry entry = (Entry) it.next();
-			String key = (String) entry.getKey();
-
-			String newValue = (String) profilePropertiesToSet.get(key);
-			if (newValue == null) {
-				request.removeProfileProperty(key);
-			} else if (newValue.equals(entry.getValue()))
-				profilePropertiesToSet.remove(key);
-		}
-
-		for (Iterator it = profilePropertiesToSet.entrySet().iterator(); it.hasNext();) {
-			Entry entry = (Entry) it.next();
-			String key = (String) entry.getKey();
-			String value = (String) entry.getValue();
-			request.setProfileProperty(key, value);
-		}
-	}
-
-	public static class FormerStateProfile implements IProfile {
-
-		private String profileId;
-		private HashMap profileProperties = new HashMap();
-		private HashMap iuProfileProperties = new HashMap();
-		private Set ius = new HashSet();
-
-		public FormerStateProfile(IInstallableUnit profileIU, IProfile profile, ProvisioningContext context) throws ProvisionException {
-
-			String profileTypeProperty = profileIU.getProperty(IInstallableUnit.PROP_TYPE_PROFILE);
-			if (profileTypeProperty == null || !Boolean.valueOf(profileTypeProperty).booleanValue())
-				throw new ProvisionException(new Status(IStatus.ERROR, DirectorActivator.PI_DIRECTOR, "Not a profile type IU"));
-
-			profileId = profileIU.getId();
-			for (Iterator it = profileIU.getProperties().entrySet().iterator(); it.hasNext();) {
-				Entry entry = (Entry) it.next();
-				String key = (String) entry.getKey();
-				if (key.startsWith(IUPROP_PREFIX)) {
-					int postIndex = key.indexOf(FormerState.IUPROP_POSTFIX, FormerState.IUPROP_PREFIX.length());
-					String iuId = key.substring(FormerState.IUPROP_PREFIX.length(), postIndex);
-					Map iuProperties = (Map) iuProfileProperties.get(iuId);
-					if (iuProperties == null) {
-						iuProperties = new HashMap();
-						iuProfileProperties.put(iuId, iuProperties);
-					}
-					String iuPropertyKey = key.substring(postIndex + FormerState.IUPROP_POSTFIX.length());
-					iuProperties.put(iuPropertyKey, entry.getValue());
-				} else {
-					profileProperties.put(key, entry.getValue());
-				}
-			}
-			profileProperties.remove(IInstallableUnit.PROP_TYPE_PROFILE);
-
-			List extraIUs = new ArrayList(profile.query(InstallableUnitQuery.ANY, new Collector(), null).toCollection());
-			extraIUs.add(profileIU);
-
-			IInstallableUnit[] availableIUs = SimplePlanner.gatherAvailableInstallableUnits((IInstallableUnit[]) extraIUs.toArray(new IInstallableUnit[extraIUs.size()]), context.getMetadataRepositories(), context, new NullProgressMonitor());
-
-			Dictionary snapshotSelectionContext = SimplePlanner.createSelectionContext(profileProperties);
-			IInstallableUnit[] allIUs = new IInstallableUnit[] {profileIU};
-			Slicer slicer = new Slicer(allIUs, availableIUs, snapshotSelectionContext);
-			IQueryable slice = slicer.slice(allIUs, new NullProgressMonitor());
-			if (slice == null)
-				throw new ProvisionException(slicer.getStatus());
-
-			Projector projector = new Projector(slice, snapshotSelectionContext);
-			projector.encode(allIUs, new NullProgressMonitor());
-			IStatus s = projector.invokeSolver(new NullProgressMonitor());
-
-			if (s.getSeverity() == IStatus.ERROR) {
-				//log the error from the new solver so it is not lost
-				LogHelper.log(s);
-				if (!"true".equalsIgnoreCase(context == null ? null : context.getProperty("org.eclipse.equinox.p2.disable.error.reporting"))) {
-					//We invoke the old resolver to get explanations for now
-					IStatus oldResolverStatus = new NewDependencyExpander(allIUs, null, availableIUs, snapshotSelectionContext, false).expand(new NullProgressMonitor());
-					if (!oldResolverStatus.isOK())
-						s = oldResolverStatus;
-				}
-				throw new ProvisionException(s);
-			}
-			ius.addAll(projector.extractSolution());
-			ius.remove(profileIU);
-		}
-
-		public Map getInstallableUnitProperties(IInstallableUnit iu) {
-			Map iuProperties = (Map) iuProfileProperties.get(iu.getId());
-			if (iuProperties == null) {
-				return Collections.EMPTY_MAP;
-			}
-			return Collections.unmodifiableMap(iuProperties);
-		}
-
-		public String getInstallableUnitProperty(IInstallableUnit iu, String key) {
-			return (String) getInstallableUnitProperties(iu).get(key);
-		}
-
-		public Map getLocalProperties() {
-			return Collections.unmodifiableMap(profileProperties);
-		}
-
-		public String getLocalProperty(String key) {
-			return (String) profileProperties.get(key);
-		}
-
-		public IProfile getParentProfile() {
-			return null;
-		}
-
-		public String getProfileId() {
-			return profileId;
-		}
-
-		public Map getProperties() {
-			return Collections.unmodifiableMap(profileProperties);
-		}
-
-		public String getProperty(String key) {
-			return (String) profileProperties.get(key);
-		}
-
-		public String[] getSubProfileIds() {
-			return null;
-		}
-
-		public long getTimestamp() {
-			return 0;
-		}
-
-		public boolean hasSubProfiles() {
-			return false;
-		}
-
-		public boolean isRootProfile() {
-			return true;
-		}
-
-		public Collector query(Query query, Collector collector, IProgressMonitor monitor) {
-			return query.perform(ius.iterator(), collector);
-		}
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.ui/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.ui/META-INF/MANIFEST.MF
index 6ba4d9a..bd00e00 100644
--- a/bundles/org.eclipse.equinox.p2.ui/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.ui/META-INF/MANIFEST.MF
@@ -7,6 +7,7 @@ Bundle-SymbolicName: org.eclipse.equinox.p2.ui;singleton:=true
 Bundle-Version: 0.1.0.qualifier
 Bundle-Activator: org.eclipse.equinox.internal.p2.ui.ProvUIActivator
 Import-Package: org.eclipse.equinox.internal.p2.core.helpers,
+ org.eclipse.equinox.internal.p2.rollback,
  org.eclipse.equinox.internal.provisional.configurator,
  org.eclipse.equinox.internal.provisional.p2.artifact.repository,
  org.eclipse.equinox.internal.provisional.p2.artifact.repository.processing,
@@ -20,7 +21,6 @@ Import-Package: org.eclipse.equinox.internal.p2.core.helpers,
  org.eclipse.equinox.internal.provisional.p2.metadata.query,
  org.eclipse.equinox.internal.provisional.p2.metadata.repository,
  org.eclipse.equinox.internal.provisional.p2.query,
- org.eclipse.equinox.internal.provisional.p2.rollback,
  org.eclipse.equinox.internal.provisional.p2.updatechecker,
  org.eclipse.equinox.internal.provisional.spi.p2.core.repository,
  org.eclipse.osgi.service.resolver;version="1.1.0",
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/RollbackProfileElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/RollbackProfileElement.java
index 86ad87e..4e0793e 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/RollbackProfileElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/model/RollbackProfileElement.java
@@ -13,6 +13,7 @@ package org.eclipse.equinox.internal.provisional.p2.ui.model;
 import java.text.DateFormat;
 import java.util.Date;
 import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.equinox.internal.p2.rollback.FormerState;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.model.RemoteQueriedElement;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
@@ -20,7 +21,6 @@ import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
 import org.eclipse.equinox.internal.provisional.p2.engine.ProvisioningContext;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.query.IQueryable;
-import org.eclipse.equinox.internal.provisional.p2.rollback.FormerState;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUIImages;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.IQueryProvider;

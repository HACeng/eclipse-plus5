commit e81b4d066910e8b050261bd7dd06f652b5357b52
Author: Jeff McAffer <jeff>
Date:   Thu Feb 19 04:01:20 2009 +0000

    Bug 256412 [metadata] Create a finite set of non opaque Query implementations

51	0	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/helpers/QueryHelpers.java
16	0	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/CompositeQuery.java
16	0	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/CompoundQuery.java
16	0	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/ContextQuery.java
16	0	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/MatchQuery.java
11	0	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/Query.java
27	0	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/PropertyLookupQuery1.java
25	0	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/PropertyLookupQuery2.java
31	0	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/QueryTest.java
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/helpers/QueryHelpers.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/helpers/QueryHelpers.java
new file mode 100644
index 0000000..3a6cf3e
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/helpers/QueryHelpers.java
@@ -0,0 +1,51 @@
+/******************************************************************************* 
+* Copyright (c) 2009 EclipseSource and others. All rights reserved. This
+* program and the accompanying materials are made available under the terms of
+* the Eclipse Public License v1.0 which accompanies this distribution, and is
+* available at http://www.eclipse.org/legal/epl-v10.html
+*
+* Contributors:
+*   EclipseSource - initial API and implementation
+******************************************************************************/
+package org.eclipse.equinox.internal.p2.core.helpers;
+
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import org.eclipse.equinox.internal.provisional.p2.query.Query;
+
+/**
+ * Static helper methods for the Query API.
+ */
+public class QueryHelpers {
+	/**
+	 * Gets the ID for a Query. 
+	 */
+	public static String getId(Query query) {
+		return query.getClass().getName();
+	}
+
+	/**
+	 * Gets a particular property of a query.
+	 * @param query The query to retrieve the property from
+	 * @param property The property to retrieve 
+	 */
+	public static Object getProperty(Query query, String property) {
+		Class clazz = query.getClass();
+		Object result = null;
+		try {
+			Method method = clazz.getMethod("get" + property, new Class[0]); //$NON-NLS-1$
+			result = method.invoke(query, new Object[0]);
+		} catch (SecurityException e) {
+			return null;
+		} catch (NoSuchMethodException e) {
+			return null;
+		} catch (IllegalArgumentException e) {
+			return null;
+		} catch (IllegalAccessException e) {
+			return null;
+		} catch (InvocationTargetException e) {
+			return null;
+		}
+		return result;
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/CompositeQuery.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/CompositeQuery.java
index b304595..cf1de98 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/CompositeQuery.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/CompositeQuery.java
@@ -10,6 +10,7 @@
 package org.eclipse.equinox.internal.provisional.p2.query;
 
 import java.util.Iterator;
+import org.eclipse.equinox.internal.p2.core.helpers.QueryHelpers;
 
 /**
  * A Composite Query is an aggregate query in which each sub-query
@@ -24,6 +25,21 @@ public class CompositeQuery implements Query {
 	}
 
 	/**
+	 * Gets the ID for this Query. 
+	 */
+	public String getId() {
+		return QueryHelpers.getId(this);
+	}
+
+	/**
+	 * Gets a particular property of the query.
+	 * @param property The property to retrieve 
+	 */
+	public Object getProperty(String property) {
+		return QueryHelpers.getProperty(this, property);
+	}
+
+	/**
 	 * Set the queries of this composite.  This is needed to allow subclasses of 
 	 * CompsiteQuery to set the queries in a constructor
 	 */
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/CompoundQuery.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/CompoundQuery.java
index d4e4fa7..6fab917 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/CompoundQuery.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/CompoundQuery.java
@@ -12,6 +12,7 @@
 package org.eclipse.equinox.internal.provisional.p2.query;
 
 import java.util.*;
+import org.eclipse.equinox.internal.p2.core.helpers.QueryHelpers;
 
 /**
  * A query that combines a group of sub-queries.<P>
@@ -86,6 +87,21 @@ public abstract class CompoundQuery implements Query {
 	}
 
 	/**
+	 * Gets the ID for this Query. 
+	 */
+	public String getId() {
+		return QueryHelpers.getId(this);
+	}
+
+	/**
+	 * Gets a particular property of the query.
+	 * @param property The property to retrieve 
+	 */
+	public Object getProperty(String property) {
+		return QueryHelpers.getProperty(this, property);
+	}
+
+	/**
 	 * The compound query instantiated when all queries are Match Queries.
 	 */
 	private static class MatchCompoundQuery extends CompoundQuery implements IMatchQuery {
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/ContextQuery.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/ContextQuery.java
index fd6f50d..4b768d6 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/ContextQuery.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/ContextQuery.java
@@ -10,6 +10,7 @@
 package org.eclipse.equinox.internal.provisional.p2.query;
 
 import java.util.Iterator;
+import org.eclipse.equinox.internal.p2.core.helpers.QueryHelpers;
 
 /**
  * ContextQuery is the abstract superclass for Queries that require the entire
@@ -42,4 +43,19 @@ public abstract class ContextQuery implements Query {
 	 * the collector passed in.
 	 */
 	public abstract Collector perform(Iterator iterator, Collector result);
+
+	/**
+	 * Gets the ID for this Query. 
+	 */
+	public String getId() {
+		return QueryHelpers.getId(this);
+	}
+
+	/**
+	 * Gets a particular property of the query.
+	 * @param property The property to retrieve 
+	 */
+	public Object getProperty(String property) {
+		return QueryHelpers.getProperty(this, property);
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/MatchQuery.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/MatchQuery.java
index a771303..52db5cb 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/MatchQuery.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/MatchQuery.java
@@ -11,6 +11,7 @@
 package org.eclipse.equinox.internal.provisional.p2.query;
 
 import java.util.Iterator;
+import org.eclipse.equinox.internal.p2.core.helpers.QueryHelpers;
 
 /**
  * This class represents the superclass of most of p2's queries.  Every element
@@ -39,6 +40,21 @@ public abstract class MatchQuery implements IMatchQuery {
 	public abstract boolean isMatch(Object candidate);
 
 	/**
+	 * Gets the ID for this Query. 
+	 */
+	public String getId() {
+		return QueryHelpers.getId(this);
+	}
+
+	/**
+	 * Gets a particular property of the query.
+	 * @param property The property to retrieve 
+	 */
+	public Object getProperty(String property) {
+		return QueryHelpers.getProperty(this, property);
+	}
+
+	/**
 	 * Performs this query on the given iterator, passing all objects in the iterator 
 	 * that match the criteria of this query to the given result.
 	 */
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/Query.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/Query.java
index 9c9845f..955c892 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/Query.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/Query.java
@@ -35,4 +35,15 @@ public interface Query {
 	 * the collector passed in.
 	 */
 	public abstract Collector perform(Iterator iterator, Collector result);
+
+	/**
+	 * Gets the ID for this Query. 
+	 */
+	public String getId();
+
+	/**
+	 * Gets a particular property of the query.
+	 * @param property The property to retrieve 
+	 */
+	public Object getProperty(String property);
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/PropertyLookupQuery1.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/PropertyLookupQuery1.java
new file mode 100644
index 0000000..bdd1fbe
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/PropertyLookupQuery1.java
@@ -0,0 +1,27 @@
+/******************************************************************************* 
+* Copyright (c) 2009 EclipseSource and others. All rights reserved. This
+* program and the accompanying materials are made available under the terms of
+* the Eclipse Public License v1.0 which accompanies this distribution, and is
+* available at http://www.eclipse.org/legal/epl-v10.html
+*
+* Contributors:
+*   EclipseSource - initial API and implementation
+******************************************************************************/
+package org.eclipse.equinox.p2.tests.core;
+
+import org.eclipse.equinox.internal.provisional.p2.query.MatchQuery;
+
+public class PropertyLookupQuery1 extends MatchQuery {
+
+	public String getSomeProperty() {
+		return "foo";
+	}
+
+	public String getThatProperty(Object param) {
+		return "bar";
+	}
+
+	public boolean isMatch(Object candidate) {
+		return false;
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/PropertyLookupQuery2.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/PropertyLookupQuery2.java
new file mode 100644
index 0000000..b05afb9
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/PropertyLookupQuery2.java
@@ -0,0 +1,25 @@
+/******************************************************************************* 
+* Copyright (c) 2009 EclipseSource and others. All rights reserved. This
+* program and the accompanying materials are made available under the terms of
+* the Eclipse Public License v1.0 which accompanies this distribution, and is
+* available at http://www.eclipse.org/legal/epl-v10.html
+*
+* Contributors:
+*   EclipseSource - initial API and implementation
+******************************************************************************/
+package org.eclipse.equinox.p2.tests.core;
+
+import java.util.Iterator;
+import org.eclipse.equinox.internal.provisional.p2.query.Collector;
+import org.eclipse.equinox.internal.provisional.p2.query.ContextQuery;
+
+public class PropertyLookupQuery2 extends ContextQuery {
+
+	public String getSomeOtherProperty() {
+		return "bar";
+	}
+
+	public Collector perform(Iterator iterator, Collector result) {
+		return null;
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/QueryTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/QueryTest.java
index 870c17c..918a900 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/QueryTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/QueryTest.java
@@ -113,6 +113,37 @@ public class QueryTest extends TestCase {
 		assertTrue("1.4", query.areHooksExecutedProperly());
 	}
 
+	public void testPropertyLookupMatchQuery() {
+		Query query1 = new PropertyLookupQuery1();
+		Object property = query1.getProperty("SomeProperty");
+		assertEquals("1.0", "foo", property);
+	}
+
+	public void testPropertyLookupContextQuery() {
+		Query query1 = new PropertyLookupQuery2();
+		Object property = query1.getProperty("SomeOtherProperty");
+		assertEquals("1.0", "bar", property);
+	}
+
+	public void testPropertyLookupInvalidProperty1() {
+		Query query1 = new PropertyLookupQuery1();
+		Object property = query1.getProperty("ThisProperty");
+		assertEquals("1.0", null, property);
+	}
+
+	public void testPropertyLookupInvalidProperty2() {
+		Query query1 = new PropertyLookupQuery1();
+		Object property = query1.getProperty("SomeOtherProperty");
+		assertEquals("1.0", null, property);
+	}
+
+	public void testIDLookup() {
+		Query query1 = new PropertyLookupQuery1();
+		Query query2 = new PropertyLookupQuery2();
+		assertEquals("1.0", "org.eclipse.equinox.p2.tests.core.PropertyLookupQuery1", query1.getId());
+		assertEquals("1.0", "org.eclipse.equinox.p2.tests.core.PropertyLookupQuery2", query2.getId());
+	}
+
 	public void testPerformHooksOnQueryFail() {
 		List items = Arrays.asList("red", new Object());
 		PerformHookQuery query = new PerformHookQuery();

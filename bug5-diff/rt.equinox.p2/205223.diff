commit 224a6c1183e814db88dcf01cb4c282bf0234d13a
Author: Susan Franklin <sfranklin>
Date:   Thu Oct 11 22:43:40 2007 +0000

    Bug 205223 - [prov] [ui] User view of "rollback" and undo support

2	2	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ArtifactRepositoriesView.java
3	3	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java
2	3	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
4	4	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RepositoriesView.java
2	2	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddArtifactRepositoryDialog.java
2	2	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddMetadataRepositoryDialog.java
2	1	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddProfileDialog.java
4	4	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/InstallDialog.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProfileModificationDialog.java
4	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/UninstallDialog.java
5	5	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/UpdateDialog.java
0	26	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvUI.java
48	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvisioningUndoSupport.java
22	22	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvisioningUtil.java
4	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/InstallAction.java
15	5	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/ProfileModificationAction.java
3	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/RollbackAction.java
4	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UninstallAction.java
1	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UpdateAction.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AddColocatedRepositoryDialog.java
5	7	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AddRepositoryDialog.java
2	4	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/ColocatedRepositoryManipulatorGroup.java
3	4	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AllArtifactRepositories.java
3	4	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AllMetadataRepositories.java
3	7	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AllProfiles.java
1	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AvailableIUElement.java
1	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/InstalledIUElement.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ProfileFactory.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ProvElement.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/AddArtifactRepositoryOperation.java
5	5	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/AddColocatedRepositoryOperation.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/AddMetadataRepositoryOperation.java
27	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/AddProfileOperation.java
7	13	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProfileModificationOperation.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProfileOperation.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/RemoveArtifactRepositoryOperation.java
5	5	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/RemoveColocatedRepositoryOperation.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/RemoveMetadataRepositoryOperation.java
30	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/RemoveProfilesOperation.java
1	142	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/RepositoryOperation.java
242	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/UndoableProvisioningOperation.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ArtifactRepositoriesView.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ArtifactRepositoriesView.java
index f389a93..a8268b0 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ArtifactRepositoriesView.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ArtifactRepositoriesView.java
@@ -11,11 +11,11 @@
 package org.eclipse.equinox.internal.p2.ui.admin;
 
 import java.util.ArrayList;
-import org.eclipse.core.commands.operations.IUndoableOperation;
 import org.eclipse.equinox.internal.p2.ui.admin.dialogs.AddArtifactRepositoryDialog;
 import org.eclipse.equinox.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.p2.ui.model.AllArtifactRepositories;
 import org.eclipse.equinox.p2.ui.model.ArtifactRepositoryContentProvider;
+import org.eclipse.equinox.p2.ui.operations.ProvisioningOperation;
 import org.eclipse.equinox.p2.ui.operations.RemoveArtifactRepositoryOperation;
 import org.eclipse.jface.viewers.IContentProvider;
 import org.eclipse.swt.widgets.Shell;
@@ -62,7 +62,7 @@ public class ArtifactRepositoriesView extends RepositoriesView {
 		return new AddArtifactRepositoryDialog(shell, (IArtifactRepository[]) elements).open();
 	}
 
-	protected IUndoableOperation getRemoveOperation(Object[] elements) {
+	protected ProvisioningOperation getRemoveOperation(Object[] elements) {
 		ArrayList repos = new ArrayList();
 		for (int i = 0; i < elements.length; i++) {
 			if (elements[i] instanceof IArtifactRepository) {
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java
index 401cb46..eb1ee50 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java
@@ -11,15 +11,15 @@
 package org.eclipse.equinox.internal.p2.ui.admin;
 
 import java.util.ArrayList;
-import org.eclipse.core.commands.operations.IUndoableOperation;
 import org.eclipse.equinox.internal.p2.ui.admin.dialogs.AddMetadataRepositoryDialog;
 import org.eclipse.equinox.internal.p2.ui.admin.dialogs.AddProfileDialog;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.p2.ui.IProfileChooser;
-import org.eclipse.equinox.p2.ui.actions.RollbackAction;
 import org.eclipse.equinox.p2.ui.actions.InstallAction;
+import org.eclipse.equinox.p2.ui.actions.RollbackAction;
 import org.eclipse.equinox.p2.ui.model.*;
+import org.eclipse.equinox.p2.ui.operations.ProvisioningOperation;
 import org.eclipse.equinox.p2.ui.operations.RemoveMetadataRepositoryOperation;
 import org.eclipse.equinox.p2.ui.viewers.IUDragAdapter;
 import org.eclipse.equinox.p2.ui.viewers.ProvElementLabelProvider;
@@ -78,7 +78,7 @@ public class MetadataRepositoriesView extends RepositoriesView {
 		return new AddMetadataRepositoryDialog(shell, (IMetadataRepository[]) elements).open();
 	}
 
-	protected IUndoableOperation getRemoveOperation(Object[] elements) {
+	protected ProvisioningOperation getRemoveOperation(Object[] elements) {
 		ArrayList repos = new ArrayList();
 		for (int i = 0; i < elements.length; i++) {
 			if (elements[i] instanceof IMetadataRepository) {
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
index 0a0a6aa..70ebcf3 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
@@ -21,8 +21,7 @@ import org.eclipse.equinox.p2.ui.*;
 import org.eclipse.equinox.p2.ui.actions.UninstallAction;
 import org.eclipse.equinox.p2.ui.actions.UpdateAction;
 import org.eclipse.equinox.p2.ui.model.*;
-import org.eclipse.equinox.p2.ui.operations.ProfileOperation;
-import org.eclipse.equinox.p2.ui.operations.RemoveProfilesOperation;
+import org.eclipse.equinox.p2.ui.operations.*;
 import org.eclipse.equinox.p2.ui.viewers.InstallIUDropAdapter;
 import org.eclipse.equinox.p2.ui.viewers.StructuredViewerProvisioningListener;
 import org.eclipse.jface.action.*;
@@ -64,7 +63,7 @@ public class ProfilesView extends ProvView {
 			}
 			ProfileOperation op = new RemoveProfilesOperation(ProvAdminUIMessages.Ops_RemoveProfileOperationLabel, (Profile[]) profilesOnly.toArray(new Profile[profilesOnly.size()]));
 			try {
-				IStatus status = op.execute(null, ProvUI.getUIInfoAdapter(ProfilesView.this.getShell()));
+				IStatus status = ProvisioningUndoSupport.execute(op, null, ProfilesView.this.getShell());
 				if (status.isOK()) {
 					viewer.refresh();
 				}
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RepositoriesView.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RepositoriesView.java
index 0404254..9898385 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RepositoriesView.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RepositoriesView.java
@@ -11,9 +11,9 @@
 package org.eclipse.equinox.internal.p2.ui.admin;
 
 import org.eclipse.core.commands.ExecutionException;
-import org.eclipse.core.commands.operations.IUndoableOperation;
 import org.eclipse.equinox.p2.metadata.InstallableUnit;
 import org.eclipse.equinox.p2.ui.*;
+import org.eclipse.equinox.p2.ui.operations.ProvisioningOperation;
 import org.eclipse.equinox.p2.ui.viewers.StructuredViewerProvisioningListener;
 import org.eclipse.jface.action.*;
 import org.eclipse.jface.viewers.*;
@@ -41,10 +41,10 @@ abstract class RepositoriesView extends ProvView {
 		}
 
 		public void run() {
-			IUndoableOperation op = getRemoveOperation(getSelection().toArray());
+			ProvisioningOperation op = getRemoveOperation(getSelection().toArray());
 			try {
 				// TODO hook into platform progress service
-				PlatformUI.getWorkbench().getOperationSupport().getOperationHistory().execute(op, null, ProvUI.getUIInfoAdapter(getShell()));
+				ProvisioningUndoSupport.execute(op, null, getShell());
 			} catch (ExecutionException e) {
 				ProvUI.handleException(e.getCause(), null);
 			}
@@ -153,7 +153,7 @@ abstract class RepositoriesView extends ProvView {
 
 	protected abstract int openAddRepositoryDialog(Shell shell, Object[] elements);
 
-	protected abstract IUndoableOperation getRemoveOperation(Object[] elements);
+	protected abstract ProvisioningOperation getRemoveOperation(Object[] elements);
 
 	protected abstract String getAddCommandLabel();
 
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddArtifactRepositoryDialog.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddArtifactRepositoryDialog.java
index 7693692..a9a5866 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddArtifactRepositoryDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddArtifactRepositoryDialog.java
@@ -12,12 +12,12 @@ package org.eclipse.equinox.internal.p2.ui.admin.dialogs;
 
 import java.net.MalformedURLException;
 import java.net.URL;
-import org.eclipse.core.commands.operations.IUndoableOperation;
 import org.eclipse.equinox.internal.p2.ui.admin.ProvAdminUIMessages;
 import org.eclipse.equinox.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.p2.ui.ProvUI;
 import org.eclipse.equinox.p2.ui.dialogs.AddRepositoryDialog;
 import org.eclipse.equinox.p2.ui.operations.AddArtifactRepositoryOperation;
+import org.eclipse.equinox.p2.ui.operations.ProvisioningOperation;
 import org.eclipse.swt.widgets.Shell;
 
 /**
@@ -32,7 +32,7 @@ public class AddArtifactRepositoryDialog extends AddRepositoryDialog {
 		super(parentShell, knownRepositories);
 	}
 
-	protected IUndoableOperation getOperation(URL url, String name) {
+	protected ProvisioningOperation getOperation(URL url, String name) {
 		return new AddArtifactRepositoryOperation(ProvAdminUIMessages.AddArtifactRepositoryDialog_OperationLabel, url, name);
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddMetadataRepositoryDialog.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddMetadataRepositoryDialog.java
index 8207551..afef239 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddMetadataRepositoryDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddMetadataRepositoryDialog.java
@@ -12,12 +12,12 @@ package org.eclipse.equinox.internal.p2.ui.admin.dialogs;
 
 import java.net.MalformedURLException;
 import java.net.URL;
-import org.eclipse.core.commands.operations.IUndoableOperation;
 import org.eclipse.equinox.internal.p2.ui.admin.ProvAdminUIMessages;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.p2.ui.ProvUI;
 import org.eclipse.equinox.p2.ui.dialogs.AddRepositoryDialog;
 import org.eclipse.equinox.p2.ui.operations.AddMetadataRepositoryOperation;
+import org.eclipse.equinox.p2.ui.operations.ProvisioningOperation;
 import org.eclipse.swt.widgets.Shell;
 
 /**
@@ -32,7 +32,7 @@ public class AddMetadataRepositoryDialog extends AddRepositoryDialog {
 		super(parentShell, knownRepositories);
 	}
 
-	protected IUndoableOperation getOperation(URL url, String name) {
+	protected ProvisioningOperation getOperation(URL url, String name) {
 		return new AddMetadataRepositoryOperation(ProvAdminUIMessages.AddMetadataRepositoryDialog_OperationLabel, url, name);
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddProfileDialog.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddProfileDialog.java
index 83447c3..e190d81 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddProfileDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddProfileDialog.java
@@ -16,6 +16,7 @@ import org.eclipse.core.runtime.Status;
 import org.eclipse.equinox.internal.p2.ui.admin.ProvAdminUIMessages;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.ui.ProvUI;
+import org.eclipse.equinox.p2.ui.ProvisioningUndoSupport;
 import org.eclipse.equinox.p2.ui.admin.ProvAdminUIActivator;
 import org.eclipse.equinox.p2.ui.dialogs.ProfileGroup;
 import org.eclipse.equinox.p2.ui.operations.AddProfileOperation;
@@ -78,7 +79,7 @@ public class AddProfileDialog extends StatusDialog {
 		}
 		ProfileOperation op = new AddProfileOperation(ProvAdminUIMessages.AddProfileDialog_OperationLabel, addedProfile);
 		try {
-			op.execute(null, ProvUI.getUIInfoAdapter(getShell()));
+			ProvisioningUndoSupport.execute(op, null, getShell());
 		} catch (ExecutionException e) {
 			ProvUI.handleException(e.getCause(), null);
 			return false;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/InstallDialog.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/InstallDialog.java
index 065ac47..30d4738 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/InstallDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/InstallDialog.java
@@ -30,10 +30,10 @@ public class InstallDialog extends ProfileModificationDialog {
 		super(parentShell, ius, profile, ProvUIMessages.InstallIUOperationLabel, ProvUIMessages.InstallDialog_InstallSelectionMessage);
 	}
 
-	protected ProfileModificationOperation createProfileModificationOperation(Object[] selectedElements, IProgressMonitor monitor, IAdaptable uiInfo) {
+	protected ProfileModificationOperation createProfileModificationOperation(Object[] selectedElements, IProgressMonitor monitor) {
 		try {
 			IInstallableUnit[] selectedIUs = elementsToIUs(selectedElements);
-			ProvisioningPlan plan = ProvisioningUtil.getInstallPlan(selectedIUs, profile, monitor, uiInfo);
+			ProvisioningPlan plan = ProvisioningUtil.getInstallPlan(selectedIUs, profile, monitor);
 			IStatus status = plan.getStatus();
 			if (status.isOK())
 				return new InstallOperation(ProvUIMessages.InstallIUOperationLabel, profile.getProfileId(), plan, selectedIUs);
@@ -55,8 +55,8 @@ public class InstallDialog extends ProfileModificationDialog {
 	protected long getSize(IInstallableUnit iu) {
 		long size;
 		try {
-			ProvisioningPlan plan = ProvisioningUtil.getInstallPlan(new IInstallableUnit[] {iu}, profile, new NullProgressMonitor(), ProvUI.getUIInfoAdapter(getShell()));
-			SizingPhase info = ProvisioningUtil.getSizeInfo(plan, profile, new NullProgressMonitor(), ProvUI.getUIInfoAdapter(getShell()));
+			ProvisioningPlan plan = ProvisioningUtil.getInstallPlan(new IInstallableUnit[] {iu}, profile, new NullProgressMonitor());
+			SizingPhase info = ProvisioningUtil.getSizeInfo(plan, profile, new NullProgressMonitor());
 			size = info.getDlSize();
 		} catch (ProvisionException e) {
 			size = AvailableIUElement.SIZE_UNKNOWN;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProfileModificationDialog.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProfileModificationDialog.java
index 2b9147d..c7f2dac 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProfileModificationDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProfileModificationDialog.java
@@ -144,7 +144,7 @@ abstract class ProfileModificationDialog extends TrayDialog {
 		resultOperation = null;
 		// TODO may need progress monitor
 		IProgressMonitor monitor = new NullProgressMonitor();
-		resultOperation = createProfileModificationOperation(getSelectedElements(), monitor, ProvUI.getUIInfoAdapter(getShell()));
+		resultOperation = createProfileModificationOperation(getSelectedElements(), monitor);
 		super.okPressed();
 	}
 
@@ -164,7 +164,7 @@ abstract class ProfileModificationDialog extends TrayDialog {
 		return theIUs;
 	}
 
-	protected abstract ProfileModificationOperation createProfileModificationOperation(Object[] selectedElements, IProgressMonitor monitor, IAdaptable uiInfo);
+	protected abstract ProfileModificationOperation createProfileModificationOperation(Object[] selectedElements, IProgressMonitor monitor);
 
 	protected abstract String getOkButtonString();
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/UninstallDialog.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/UninstallDialog.java
index 393d951..b642cbd 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/UninstallDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/UninstallDialog.java
@@ -10,7 +10,8 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui;
 
-import org.eclipse.core.runtime.*;
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.p2.engine.Profile;
@@ -26,9 +27,9 @@ public class UninstallDialog extends ProfileModificationDialog {
 		super(parentShell, ius, profile, ProvUIMessages.UninstallIUOperationLabel, ProvUIMessages.UninstallDialog_UninstallMessage);
 	}
 
-	protected ProfileModificationOperation createProfileModificationOperation(Object[] selectedElements, IProgressMonitor monitor, IAdaptable uiInfo) {
+	protected ProfileModificationOperation createProfileModificationOperation(Object[] selectedElements, IProgressMonitor monitor) {
 		try {
-			ProvisioningPlan plan = ProvisioningUtil.getUninstallPlan(elementsToIUs(selectedElements), profile, monitor, uiInfo);
+			ProvisioningPlan plan = ProvisioningUtil.getUninstallPlan(elementsToIUs(selectedElements), profile, monitor);
 			IStatus status = plan.getStatus();
 			if (status.isOK())
 				return new ProfileModificationOperation(ProvUIMessages.UninstallIUOperationLabel, profile.getProfileId(), plan);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/UpdateDialog.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/UpdateDialog.java
index 01d21a6..506d44b 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/UpdateDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/UpdateDialog.java
@@ -31,9 +31,9 @@ public class UpdateDialog extends ProfileModificationDialog {
 		super(parentShell, ius, profile, ProvUIMessages.UpdateAction_UpdatesAvailableTitle, ProvUIMessages.UpdateAction_UpdatesAvailableMessage);
 	}
 
-	protected ProfileModificationOperation createProfileModificationOperation(Object[] selectedElements, IProgressMonitor monitor, IAdaptable uiInfo) {
+	protected ProfileModificationOperation createProfileModificationOperation(Object[] selectedElements, IProgressMonitor monitor) {
 		try {
-			ProvisioningPlan plan = ProvisioningUtil.getReplacePlan(getIUsToReplace(selectedElements), elementsToIUs(selectedElements), profile, monitor, uiInfo);
+			ProvisioningPlan plan = ProvisioningUtil.getReplacePlan(getIUsToReplace(selectedElements), elementsToIUs(selectedElements), profile, monitor);
 			IStatus status = plan.getStatus();
 			if (status.isOK())
 				return new ProfileModificationOperation(ProvUIMessages.UpdateIUOperationLabel, profile.getProfileId(), plan);
@@ -56,7 +56,7 @@ public class UpdateDialog extends ProfileModificationDialog {
 		List elements = new ArrayList();
 		for (int i = 0; i < ius.length; i++) {
 			try {
-				IInstallableUnit[] replacementIUs = ProvisioningUtil.updatesFor(new IInstallableUnit[] {ius[i]}, profile, null, ProvUI.getUIInfoAdapter(getShell()));
+				IInstallableUnit[] replacementIUs = ProvisioningUtil.updatesFor(new IInstallableUnit[] {ius[i]}, profile, null);
 				for (int j = 0; j < replacementIUs.length; j++) {
 					elements.add(new AvailableUpdateElement(replacementIUs[j], getSize(ius[i], replacementIUs[j]), ius[i]));
 				}
@@ -80,8 +80,8 @@ public class UpdateDialog extends ProfileModificationDialog {
 	protected long getSize(IInstallableUnit iuToRemove, IInstallableUnit iuToAdd) {
 		long size;
 		try {
-			ProvisioningPlan plan = ProvisioningUtil.getReplacePlan(new IInstallableUnit[] {iuToRemove}, new IInstallableUnit[] {iuToAdd}, profile, new NullProgressMonitor(), ProvUI.getUIInfoAdapter(getShell()));
-			SizingPhase info = ProvisioningUtil.getSizeInfo(plan, profile, new NullProgressMonitor(), ProvUI.getUIInfoAdapter(getShell()));
+			ProvisioningPlan plan = ProvisioningUtil.getReplacePlan(new IInstallableUnit[] {iuToRemove}, new IInstallableUnit[] {iuToAdd}, profile, new NullProgressMonitor());
+			SizingPhase info = ProvisioningUtil.getSizeInfo(plan, profile, new NullProgressMonitor());
 			size = info.getDlSize();
 		} catch (ProvisionException e) {
 			size = AvailableIUElement.SIZE_UNKNOWN;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvUI.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvUI.java
index 5865384..f6f2dbf 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvUI.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvUI.java
@@ -39,32 +39,6 @@ public class ProvUI {
 
 	private static IUColumnConfig[] iuColumnConfig = new IUColumnConfig[] {new IUColumnConfig(ProvUIMessages.ProvUI_NameColumnTitle, IUColumnConfig.COLUMN_ID), new IUColumnConfig(ProvUIMessages.ProvUI_VersionColumnTitle, IUColumnConfig.COLUMN_VERSION)};
 
-	/**
-	 * Make an <code>IAdaptable</code> that adapts to the specified shell,
-	 * suitable for passing for passing to any
-	 * {@link org.eclipse.core.commands.operations.IUndoableOperation} or
-	 * {@link org.eclipse.core.commands.operations.IOperationHistory} method
-	 * that requires an {@link org.eclipse.core.runtime.IAdaptable}
-	 * <code>uiInfo</code> parameter.
-	 * 
-	 * @param shell
-	 *            the shell that should be returned by the IAdaptable when asked
-	 *            to adapt a shell. If this parameter is <code>null</code>,
-	 *            the returned shell will also be <code>null</code>.
-	 * 
-	 * @return an IAdaptable that will return the specified shell.
-	 */
-	public static IAdaptable getUIInfoAdapter(final Shell shell) {
-		return new IAdaptable() {
-			public Object getAdapter(Class clazz) {
-				if (clazz == Shell.class) {
-					return shell;
-				}
-				return null;
-			}
-		};
-	}
-
 	public static Shell getShell(IAdaptable uiInfo) {
 		Shell shell;
 		if (uiInfo != null) {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvisioningUndoSupport.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvisioningUndoSupport.java
index 0cd0d58..835223e 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvisioningUndoSupport.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvisioningUndoSupport.java
@@ -15,8 +15,10 @@ import java.lang.reflect.InvocationTargetException;
 import org.eclipse.core.commands.ExecutionException;
 import org.eclipse.core.commands.operations.*;
 import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.p2.ui.operations.ProvisioningOperation;
 import org.eclipse.jface.dialogs.ProgressMonitorDialog;
 import org.eclipse.jface.operation.IRunnableWithProgress;
+import org.eclipse.swt.widgets.Shell;
 import org.eclipse.ui.PlatformUI;
 import org.eclipse.ui.statushandlers.StatusManager;
 
@@ -43,6 +45,26 @@ public class ProvisioningUndoSupport {
 		return provisioningUndoContext;
 	}
 
+	/**
+	 * Execute the supplied ProvisioningOperation, and add it to the
+	 * undo history if it supports undo.
+	 * 
+	 * @param monitor
+	 *            the progress monitor to use for the operation
+	 * @param uiInfo
+	 *            the IAdaptable (or <code>null</code>) provided by the
+	 *            caller in order to supply UI information for prompting the
+	 *            user if necessary. When this parameter is not
+	 *            <code>null</code>, it contains an adapter for the
+	 *            org.eclipse.swt.widgets.Shell.class
+	*/
+	public static IStatus execute(ProvisioningOperation op, IProgressMonitor monitor, Shell shell) throws ExecutionException {
+		if (op instanceof IUndoableOperation) {
+			return PlatformUI.getWorkbench().getOperationSupport().getOperationHistory().execute((IUndoableOperation) op, monitor, getUIInfoAdapter(shell));
+		}
+		return op.execute(monitor, getUIInfoAdapter(shell));
+	}
+
 	static IOperationApprover getOperationApprover() {
 		return new IOperationApprover() {
 			public IStatus proceedUndoing(final IUndoableOperation operation, IOperationHistory history, IAdaptable info) {
@@ -116,4 +138,30 @@ public class ProvisioningUndoSupport {
 		};
 
 	}
+
+	/**
+	 * Make an <code>IAdaptable</code> that adapts to the specified shell,
+	 * suitable for passing for passing to any
+	 * {@link org.eclipse.core.commands.operations.IUndoableOperation} or
+	 * {@link org.eclipse.core.commands.operations.IOperationHistory} method
+	 * that requires an {@link org.eclipse.core.runtime.IAdaptable}
+	 * <code>uiInfo</code> parameter.
+	 * 
+	 * @param shell
+	 *            the shell that should be returned by the IAdaptable when asked
+	 *            to adapt a shell. If this parameter is <code>null</code>,
+	 *            the returned shell will also be <code>null</code>.
+	 * 
+	 * @return an IAdaptable that will return the specified shell.
+	 */
+	private static IAdaptable getUIInfoAdapter(final Shell shell) {
+		return new IAdaptable() {
+			public Object getAdapter(Class clazz) {
+				if (clazz == Shell.class) {
+					return shell;
+				}
+				return null;
+			}
+		};
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvisioningUtil.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvisioningUtil.java
index b5c7f2c..38838b2 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvisioningUtil.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvisioningUtil.java
@@ -58,7 +58,7 @@ public class ProvisioningUtil {
 		}
 	}
 
-	public static IMetadataRepository addMetadataRepository(URL location, IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
+	public static IMetadataRepository addMetadataRepository(URL location, IProgressMonitor monitor) throws ProvisionException {
 		IMetadataRepositoryManager manager = (IMetadataRepositoryManager) ServiceHelper.getService(ProvUIActivator.getContext(), IMetadataRepositoryManager.class.getName());
 		if (manager == null)
 			throw new ProvisionException(ProvUIMessages.ProvisioningUtil_NoRepositoryManager);
@@ -72,7 +72,7 @@ public class ProvisioningUtil {
 		return repo;
 	}
 
-	public static IMetadataRepository getMetadataRepository(URL location, IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
+	public static IMetadataRepository getMetadataRepository(URL location, IProgressMonitor monitor) throws ProvisionException {
 		IMetadataRepositoryManager manager = (IMetadataRepositoryManager) ServiceHelper.getService(ProvUIActivator.getContext(), IMetadataRepositoryManager.class.getName());
 		if (manager == null) {
 			throw new ProvisionException(ProvUIMessages.ProvisioningUtil_NoRepositoryManager);
@@ -80,7 +80,7 @@ public class ProvisioningUtil {
 		return manager.getRepository(location);
 	}
 
-	public static void removeMetadataRepository(URL location, IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
+	public static void removeMetadataRepository(URL location, IProgressMonitor monitor) throws ProvisionException {
 		IMetadataRepositoryManager manager = (IMetadataRepositoryManager) ServiceHelper.getService(ProvUIActivator.getContext(), IMetadataRepositoryManager.class.getName());
 		if (manager == null) {
 			throw new ProvisionException(ProvUIMessages.ProvisioningUtil_NoRepositoryManager);
@@ -93,7 +93,7 @@ public class ProvisioningUtil {
 
 	}
 
-	public static IArtifactRepository addArtifactRepository(URL location, IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
+	public static IArtifactRepository addArtifactRepository(URL location, IProgressMonitor monitor) throws ProvisionException {
 		IArtifactRepositoryManager manager = (IArtifactRepositoryManager) ServiceHelper.getService(ProvUIActivator.getContext(), IArtifactRepositoryManager.class.getName());
 		if (manager == null) {
 			throw new ProvisionException(ProvUIMessages.ProvisioningUtil_NoRepositoryManager);
@@ -110,7 +110,7 @@ public class ProvisioningUtil {
 		return repository;
 	}
 
-	public static void removeArtifactRepository(URL location, IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
+	public static void removeArtifactRepository(URL location, IProgressMonitor monitor) throws ProvisionException {
 		IArtifactRepositoryManager manager = (IArtifactRepositoryManager) ServiceHelper.getService(ProvUIActivator.getContext(), IArtifactRepositoryManager.class.getName());
 		if (manager == null) {
 			throw new ProvisionException(ProvUIMessages.ProvisioningUtil_NoRepositoryManager);
@@ -128,7 +128,7 @@ public class ProvisioningUtil {
 		}
 	}
 
-	public static IArtifactRepository[] getArtifactRepositories(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
+	public static IArtifactRepository[] getArtifactRepositories(IProgressMonitor monitor) throws ProvisionException {
 		IArtifactRepositoryManager manager = (IArtifactRepositoryManager) ServiceHelper.getService(ProvUIActivator.getContext(), IArtifactRepositoryManager.class.getName());
 		if (manager == null)
 			throw new ProvisionException(ProvUIMessages.ProvisioningUtil_NoRepositoryManager);
@@ -139,8 +139,8 @@ public class ProvisioningUtil {
 		return new IArtifactRepository[0];
 	}
 
-	public static IArtifactRepository getArtifactRepository(URL repoURL, IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
-		IArtifactRepository[] repositories = getArtifactRepositories(monitor, uiInfo);
+	public static IArtifactRepository getArtifactRepository(URL repoURL, IProgressMonitor monitor) throws ProvisionException {
+		IArtifactRepository[] repositories = getArtifactRepositories(monitor);
 		if (repositories == null)
 			return null;
 		for (int i = 0; i < repositories.length; i++) {
@@ -150,7 +150,7 @@ public class ProvisioningUtil {
 		return null;
 	}
 
-	public static void addProfile(Profile profile, IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
+	public static void addProfile(Profile profile, IProgressMonitor monitor) throws ProvisionException {
 		IProfileRegistry profileRegistry = (IProfileRegistry) ServiceHelper.getService(ProvUIActivator.getContext(), IProfileRegistry.class.getName());
 		if (profileRegistry == null) {
 			throw new ProvisionException(ProvUIMessages.ProvisioningUtil_NoProfileRegistryFound);
@@ -158,7 +158,7 @@ public class ProvisioningUtil {
 		profileRegistry.addProfile(profile);
 	}
 
-	public static void removeProfile(String profileId, IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
+	public static void removeProfile(String profileId, IProgressMonitor monitor) throws ProvisionException {
 		IProfileRegistry profileRegistry = (IProfileRegistry) ServiceHelper.getService(ProvUIActivator.getContext(), IProfileRegistry.class.getName());
 		if (profileRegistry == null) {
 			throw new ProvisionException(ProvUIMessages.ProvisioningUtil_NoProfileRegistryFound);
@@ -168,7 +168,7 @@ public class ProvisioningUtil {
 			profileRegistry.removeProfile(profile);
 	}
 
-	public static Profile[] getProfiles(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
+	public static Profile[] getProfiles(IProgressMonitor monitor) throws ProvisionException {
 		IProfileRegistry profileRegistry = (IProfileRegistry) ServiceHelper.getService(ProvUIActivator.getContext(), IProfileRegistry.class.getName());
 		if (profileRegistry == null) {
 			throw new ProvisionException(ProvUIMessages.ProvisioningUtil_NoProfileRegistryFound);
@@ -195,12 +195,12 @@ public class ProvisioningUtil {
 	 * the IUs to find. <code>null</code> indicates wildcard. @return The IUs
 	 * that match the query
 	 */
-	public static IInstallableUnit[] getInstallableUnits(URL location, String id, VersionRange range, IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
+	public static IInstallableUnit[] getInstallableUnits(URL location, String id, VersionRange range, IProgressMonitor monitor) throws ProvisionException {
 		IMetadataRepository[] repositories = null;
 		if (location == null) {
-			repositories = getMetadataRepositories(monitor, uiInfo);
+			repositories = getMetadataRepositories(monitor);
 		} else {
-			repositories = new IMetadataRepository[] {getMetadataRepository(location, monitor, uiInfo)};
+			repositories = new IMetadataRepository[] {getMetadataRepository(location, monitor)};
 		}
 		Iterator i = Query.getIterator(repositories, id, range, null, false);
 		return CompoundIterator.asArray(i, monitor);
@@ -215,10 +215,10 @@ public class ProvisioningUtil {
 	 * of the IUs to find. <code>null</code> indicates wildcard. @return The
 	 * IUs that match the query
 	 */
-	public static IInstallableUnit[] getInstallableUnits(String profileId, String id, VersionRange range, IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
+	public static IInstallableUnit[] getInstallableUnits(String profileId, String id, VersionRange range, IProgressMonitor monitor) throws ProvisionException {
 		Profile[] profiles = null;
 		if (profileId == null) {
-			profiles = getProfiles(monitor, uiInfo);
+			profiles = getProfiles(monitor);
 		} else {
 			profiles = new Profile[] {getProfile(profileId)};
 		}
@@ -226,7 +226,7 @@ public class ProvisioningUtil {
 		return CompoundIterator.asArray(i, monitor);
 	}
 
-	public static IMetadataRepository[] getMetadataRepositories(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
+	public static IMetadataRepository[] getMetadataRepositories(IProgressMonitor monitor) throws ProvisionException {
 		IMetadataRepositoryManager manager = (IMetadataRepositoryManager) ServiceHelper.getService(ProvUIActivator.getContext(), IMetadataRepositoryManager.class.getName());
 		if (manager == null) {
 			throw new ProvisionException(ProvUIMessages.ProvisioningUtil_NoRepositoryManager);
@@ -237,7 +237,7 @@ public class ProvisioningUtil {
 	/*
 	 * Get the plan for the specified install operation
 	 */
-	public static ProvisioningPlan getInstallPlan(IInstallableUnit[] toInstall, Profile profile, IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
+	public static ProvisioningPlan getInstallPlan(IInstallableUnit[] toInstall, Profile profile, IProgressMonitor monitor) throws ProvisionException {
 		Assert.isNotNull(profile);
 		Assert.isNotNull(toInstall);
 		return getPlanner().getInstallPlan(toInstall, profile, monitor);
@@ -246,7 +246,7 @@ public class ProvisioningUtil {
 	/*
 	 * Get the plan for the specified update operation
 	 */
-	public static ProvisioningPlan getReplacePlan(IInstallableUnit[] toUninstall, IInstallableUnit[] replacements, Profile profile, IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
+	public static ProvisioningPlan getReplacePlan(IInstallableUnit[] toUninstall, IInstallableUnit[] replacements, Profile profile, IProgressMonitor monitor) throws ProvisionException {
 		Assert.isNotNull(profile);
 		Assert.isNotNull(toUninstall);
 		Assert.isNotNull(replacements);
@@ -267,7 +267,7 @@ public class ProvisioningUtil {
 	 * See what updates might be available for the specified IU's.
 	 * Useful for bulk update that can be directly passed to the engine.
 	 */
-	public static IInstallableUnit[] updatesFor(IInstallableUnit[] toUpdate, Profile profile, IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
+	public static IInstallableUnit[] updatesFor(IInstallableUnit[] toUpdate, Profile profile, IProgressMonitor monitor) throws ProvisionException {
 		Assert.isNotNull(profile);
 		Assert.isNotNull(toUpdate);
 
@@ -293,7 +293,7 @@ public class ProvisioningUtil {
 	/*
 	 * Get the plan to uninstall the specified IU's
 	 */
-	public static ProvisioningPlan getUninstallPlan(IInstallableUnit[] toUninstall, Profile profile, IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
+	public static ProvisioningPlan getUninstallPlan(IInstallableUnit[] toUninstall, Profile profile, IProgressMonitor monitor) throws ProvisionException {
 		Assert.isNotNull(profile);
 		Assert.isNotNull(toUninstall);
 		return getPlanner().getUninstallPlan(toUninstall, profile, monitor);
@@ -302,7 +302,7 @@ public class ProvisioningUtil {
 	/*
 	 * Get sizing info for the specified IU's
 	 */
-	public static SizingPhase getSizeInfo(ProvisioningPlan plan, Profile profile, IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
+	public static SizingPhase getSizeInfo(ProvisioningPlan plan, Profile profile, IProgressMonitor monitor) throws ProvisionException {
 		SizingPhaseSet set = new SizingPhaseSet();
 		IStatus status = getEngine().perform(profile, set, plan.getOperands(), monitor);
 		if (status.isOK())
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/InstallAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/InstallAction.java
index 3e3eaf5..55857b9 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/InstallAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/InstallAction.java
@@ -11,7 +11,8 @@
 
 package org.eclipse.equinox.p2.ui.actions;
 
-import org.eclipse.core.runtime.*;
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.p2.ui.InstallDialog;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.p2.core.ProvisionException;
@@ -31,10 +32,10 @@ public class InstallAction extends ProfileModificationAction {
 		setToolTipText(ProvUI.INSTALL_COMMAND_TOOLTIP);
 	}
 
-	protected ProfileModificationOperation validateAndGetOperation(IInstallableUnit[] ius, Profile targetProfile, IProgressMonitor monitor, IAdaptable uiInfo) {
+	protected ProfileModificationOperation validateAndGetOperation(IInstallableUnit[] ius, Profile targetProfile, IProgressMonitor monitor) {
 		// First validate whether the install can happen
 		try {
-			ProvisioningPlan plan = ProvisioningUtil.getInstallPlan(ius, targetProfile, monitor, uiInfo);
+			ProvisioningPlan plan = ProvisioningUtil.getInstallPlan(ius, targetProfile, monitor);
 			IStatus status = plan.getStatus();
 			if (status.isOK()) {
 				InstallDialog dialog = new InstallDialog(getShell(), ius, targetProfile);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/ProfileModificationAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/ProfileModificationAction.java
index 30f308b..31afb37 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/ProfileModificationAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/ProfileModificationAction.java
@@ -69,7 +69,7 @@ abstract class ProfileModificationAction extends ProvisioningAction {
 		final Profile prof = targetProfile;
 		IRunnableWithProgress runnable = new IRunnableWithProgress() {
 			public void run(IProgressMonitor monitor) {
-				ops[0] = validateAndGetOperation(ius, prof, monitor, ProvUI.getUIInfoAdapter(getShell()));
+				ops[0] = validateAndGetOperation(ius, prof, monitor);
 			}
 		};
 		try {
@@ -84,12 +84,11 @@ abstract class ProfileModificationAction extends ProvisioningAction {
 			return;
 
 		final IStatus[] status = new IStatus[1];
-		final IAdaptable adapter = ProvUI.getUIInfoAdapter(getShell());
 		runnable = new IRunnableWithProgress() {
 			public void run(IProgressMonitor monitor) {
 				try {
 					monitor.beginTask(getTaskName(), OPERATION_WORK);
-					status[0] = ops[0].execute(monitor, adapter);
+					status[0] = ProvisioningUndoSupport.execute(ops[0], monitor, getShell());
 					if (!status[0].isOK()) {
 						StatusManager.getManager().handle(status[0], StatusManager.SHOW | StatusManager.LOG);
 					}
@@ -108,7 +107,7 @@ abstract class ProfileModificationAction extends ProvisioningAction {
 				try {
 					Profile selfProfile = ProvisioningUtil.getProfile(IProfileRegistry.SELF);
 					if (selfProfile != null && (selfProfile.getProfileId().equals(targetProfile.getProfileId()))) {
-						ProvisioningUtil.requestRestart(false, ProvUI.getUIInfoAdapter(getShell()));
+						ProvisioningUtil.requestRestart(false, getUIInfoAdapter());
 					}
 				} catch (ProvisionException e) {
 					ProvUI.handleException(e, null);
@@ -126,7 +125,18 @@ abstract class ProfileModificationAction extends ProvisioningAction {
 	 * If so, return an operation representing it.  If not, return null.
 	 * We assume the user has been notified if something couldn't happen.
 	 */
-	protected abstract ProfileModificationOperation validateAndGetOperation(IInstallableUnit[] ius, Profile targetProfile, IProgressMonitor monitor, IAdaptable uiInfo);
+	protected abstract ProfileModificationOperation validateAndGetOperation(IInstallableUnit[] ius, Profile targetProfile, IProgressMonitor monitor);
 
 	protected abstract String getTaskName();
+
+	private IAdaptable getUIInfoAdapter() {
+		return new IAdaptable() {
+			public Object getAdapter(Class clazz) {
+				if (clazz == Shell.class) {
+					return getShell();
+				}
+				return null;
+			}
+		};
+	}
 }
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/RollbackAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/RollbackAction.java
index 0048aad..a47c316 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/RollbackAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/RollbackAction.java
@@ -11,7 +11,8 @@
 
 package org.eclipse.equinox.p2.ui.actions;
 
-import org.eclipse.core.runtime.*;
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.director.ProvisioningPlan;
@@ -31,7 +32,7 @@ public class RollbackAction extends ProfileModificationAction {
 		setToolTipText(ProvUI.ROLLBACK_COMMAND_TOOLTIP);
 	}
 
-	protected ProfileModificationOperation validateAndGetOperation(IInstallableUnit[] toBecome, Profile targetProfile, IProgressMonitor monitor, IAdaptable uiInfo) {
+	protected ProfileModificationOperation validateAndGetOperation(IInstallableUnit[] toBecome, Profile targetProfile, IProgressMonitor monitor) {
 		if (toBecome.length == 1) {
 			try {
 				ProvisioningPlan plan = ProvisioningUtil.getBecomePlan(toBecome[0], targetProfile, monitor);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UninstallAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UninstallAction.java
index dc8cc4d..6b607b4 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UninstallAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UninstallAction.java
@@ -11,7 +11,8 @@
 
 package org.eclipse.equinox.p2.ui.actions;
 
-import org.eclipse.core.runtime.*;
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.UninstallDialog;
 import org.eclipse.equinox.p2.core.ProvisionException;
@@ -32,10 +33,10 @@ public class UninstallAction extends ProfileModificationAction {
 		setToolTipText(ProvUI.UNINSTALL_COMMAND_TOOLTIP);
 	}
 
-	protected ProfileModificationOperation validateAndGetOperation(IInstallableUnit[] ius, Profile targetProfile, IProgressMonitor monitor, IAdaptable uiInfo) {
+	protected ProfileModificationOperation validateAndGetOperation(IInstallableUnit[] ius, Profile targetProfile, IProgressMonitor monitor) {
 		// First validate whether the uninstall can happen
 		try {
-			ProvisioningPlan plan = ProvisioningUtil.getUninstallPlan(ius, targetProfile, monitor, uiInfo);
+			ProvisioningPlan plan = ProvisioningUtil.getUninstallPlan(ius, targetProfile, monitor);
 			IStatus status = plan.getStatus();
 			if (status.isOK()) {
 				UninstallDialog dialog = new UninstallDialog(getShell(), ius, targetProfile);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UpdateAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UpdateAction.java
index 7de1913..20ccc6f 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UpdateAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UpdateAction.java
@@ -12,7 +12,6 @@
 package org.eclipse.equinox.p2.ui.actions;
 
 import java.util.ArrayList;
-import org.eclipse.core.runtime.IAdaptable;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.UpdateDialog;
@@ -34,7 +33,7 @@ public class UpdateAction extends ProfileModificationAction {
 		setToolTipText(ProvUI.UPDATE_COMMAND_TOOLTIP);
 	}
 
-	protected ProfileModificationOperation validateAndGetOperation(IInstallableUnit[] ius, Profile targetProfile, IProgressMonitor monitor, IAdaptable uiInfo) {
+	protected ProfileModificationOperation validateAndGetOperation(IInstallableUnit[] ius, Profile targetProfile, IProgressMonitor monitor) {
 		// Collect the replacements for each IU individually so that 
 		// the user can decide what to update
 		try {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AddColocatedRepositoryDialog.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AddColocatedRepositoryDialog.java
index cec0525..b631ed4 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AddColocatedRepositoryDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AddColocatedRepositoryDialog.java
@@ -12,11 +12,11 @@ package org.eclipse.equinox.p2.ui.dialogs;
 
 import java.net.MalformedURLException;
 import java.net.URL;
-import org.eclipse.core.commands.operations.IUndoableOperation;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.p2.core.repository.IRepository;
 import org.eclipse.equinox.p2.ui.ProvUI;
 import org.eclipse.equinox.p2.ui.operations.AddColocatedRepositoryOperation;
+import org.eclipse.equinox.p2.ui.operations.ProvisioningOperation;
 import org.eclipse.swt.widgets.Shell;
 
 /**
@@ -33,7 +33,7 @@ public class AddColocatedRepositoryDialog extends AddRepositoryDialog {
 
 	}
 
-	protected IUndoableOperation getOperation(URL url, String name) {
+	protected ProvisioningOperation getOperation(URL url, String name) {
 		return new AddColocatedRepositoryOperation(getShell().getText(), url, name);
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AddRepositoryDialog.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AddRepositoryDialog.java
index 0a6f177..8d4452f 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AddRepositoryDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AddRepositoryDialog.java
@@ -13,12 +13,11 @@ package org.eclipse.equinox.p2.ui.dialogs;
 import java.lang.reflect.InvocationTargetException;
 import java.net.URL;
 import org.eclipse.core.commands.ExecutionException;
-import org.eclipse.core.commands.operations.IUndoableOperation;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.p2.core.repository.IRepository;
-import org.eclipse.equinox.p2.ui.ProvUI;
-import org.eclipse.equinox.p2.ui.ProvUIActivator;
+import org.eclipse.equinox.p2.ui.*;
+import org.eclipse.equinox.p2.ui.operations.ProvisioningOperation;
 import org.eclipse.jface.dialogs.*;
 import org.eclipse.jface.dialogs.Dialog;
 import org.eclipse.jface.operation.IRunnableWithProgress;
@@ -26,7 +25,6 @@ import org.eclipse.jface.window.Window;
 import org.eclipse.swt.events.ModifyEvent;
 import org.eclipse.swt.events.ModifyListener;
 import org.eclipse.swt.widgets.*;
-import org.eclipse.ui.PlatformUI;
 import org.eclipse.ui.statushandlers.StatusManager;
 
 /**
@@ -82,12 +80,12 @@ public abstract class AddRepositoryDialog extends StatusDialog {
 			return false;
 		}
 
-		final IUndoableOperation op = getOperation(newURL, repoGroup.getRepositoryName());
+		final ProvisioningOperation op = getOperation(newURL, repoGroup.getRepositoryName());
 		final IStatus[] status = new IStatus[1];
 		IRunnableWithProgress runnable = new IRunnableWithProgress() {
 			public void run(IProgressMonitor monitor) {
 				try {
-					status[0] = PlatformUI.getWorkbench().getOperationSupport().getOperationHistory().execute(op, monitor, ProvUI.getUIInfoAdapter(getShell()));
+					status[0] = ProvisioningUndoSupport.execute(op, monitor, getShell());
 					if (!status[0].isOK()) {
 						StatusManager.getManager().handle(status[0], StatusManager.SHOW | StatusManager.LOG);
 					}
@@ -109,7 +107,7 @@ public abstract class AddRepositoryDialog extends StatusDialog {
 
 	}
 
-	protected abstract IUndoableOperation getOperation(URL url, String name);
+	protected abstract ProvisioningOperation getOperation(URL url, String name);
 
 	protected abstract URL makeRepositoryURL(String urlString);
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/ColocatedRepositoryManipulatorGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/ColocatedRepositoryManipulatorGroup.java
index 777afd7..90f6444 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/ColocatedRepositoryManipulatorGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/ColocatedRepositoryManipulatorGroup.java
@@ -15,8 +15,7 @@ import org.eclipse.core.commands.ExecutionException;
 import org.eclipse.core.runtime.Assert;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
-import org.eclipse.equinox.p2.ui.ProvUI;
-import org.eclipse.equinox.p2.ui.ProvUIActivator;
+import org.eclipse.equinox.p2.ui.*;
 import org.eclipse.equinox.p2.ui.model.AllMetadataRepositories;
 import org.eclipse.equinox.p2.ui.model.MetadataRepositoryContentProvider;
 import org.eclipse.equinox.p2.ui.operations.RemoveColocatedRepositoryOperation;
@@ -36,7 +35,6 @@ import org.eclipse.swt.graphics.Point;
 import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.*;
-import org.eclipse.ui.PlatformUI;
 import org.eclipse.ui.dialogs.PropertyDialogAction;
 
 /**
@@ -139,7 +137,7 @@ public class ColocatedRepositoryManipulatorGroup {
 				}
 				RemoveColocatedRepositoryOperation op = new RemoveColocatedRepositoryOperation(ProvUIMessages.ColocatedRepositoryManipulatorGroup_Remove, repos);
 				try {
-					PlatformUI.getWorkbench().getOperationSupport().getOperationHistory().execute(op, null, ProvUI.getUIInfoAdapter(getControl().getShell()));
+					ProvisioningUndoSupport.execute(op, null, getControl().getShell());
 				} catch (ExecutionException e) {
 					ProvUI.handleException(e.getCause(), null);
 				}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AllArtifactRepositories.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AllArtifactRepositories.java
index a28059c..ccfa0ed 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AllArtifactRepositories.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AllArtifactRepositories.java
@@ -10,7 +10,6 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.ui.model;
 
-import org.eclipse.core.runtime.IAdaptable;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.equinox.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.p2.core.ProvisionException;
@@ -28,11 +27,11 @@ public class AllArtifactRepositories extends ProvElement {
 
 	/*
 	 * (non-Javadoc)
-	 * @see org.eclipse.equinox.p2.ui.model.ProvElement#fetchChildren(java.lang.Object, org.eclipse.core.runtime.IProgressMonitor, org.eclipse.core.runtime.IAdaptable)
+	 * @see org.eclipse.equinox.p2.ui.model.ProvElement#fetchChildren(java.lang.Object, org.eclipse.core.runtime.IProgressMonitor)
 	 */
-	protected Object[] fetchChildren(Object o, IProgressMonitor monitor, IAdaptable uiInfo) {
+	protected Object[] fetchChildren(Object o, IProgressMonitor monitor) {
 		try {
-			return ProvisioningUtil.getArtifactRepositories(monitor, uiInfo);
+			return ProvisioningUtil.getArtifactRepositories(monitor);
 		} catch (ProvisionException e) {
 			handleException(e, null);
 		}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AllMetadataRepositories.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AllMetadataRepositories.java
index a9915c5..f697e62 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AllMetadataRepositories.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AllMetadataRepositories.java
@@ -10,7 +10,6 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.ui.model;
 
-import org.eclipse.core.runtime.IAdaptable;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
@@ -28,11 +27,11 @@ public class AllMetadataRepositories extends ProvElement {
 
 	/*
 	 * (non-Javadoc)
-	 * @see org.eclipse.equinox.p2.ui.model.ProvElement#fetchChildren(java.lang.Object, org.eclipse.core.runtime.IProgressMonitor, org.eclipse.core.runtime.IAdaptable)
+	 * @see org.eclipse.equinox.p2.ui.model.ProvElement#fetchChildren(java.lang.Object, org.eclipse.core.runtime.IProgressMonitor)
 	 */
-	protected Object[] fetchChildren(Object o, IProgressMonitor monitor, IAdaptable uiInfo) {
+	protected Object[] fetchChildren(Object o, IProgressMonitor monitor) {
 		try {
-			return ProvisioningUtil.getMetadataRepositories(monitor, uiInfo);
+			return ProvisioningUtil.getMetadataRepositories(monitor);
 		} catch (ProvisionException e) {
 			handleException(e, null);
 		}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AllProfiles.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AllProfiles.java
index 8fba8cb..ab28cf4 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AllProfiles.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AllProfiles.java
@@ -10,7 +10,6 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.ui.model;
 
-import org.eclipse.core.runtime.IAdaptable;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.ui.ProvisioningUtil;
@@ -26,14 +25,11 @@ public class AllProfiles extends ProvElement {
 
 	/*
 	 * (non-Javadoc)
-	 * 
-	 * @see org.eclipse.equinox.p2.ui.model.ProvElement#fetchChildren(java.lang.Object,
-	 *      org.eclipse.core.runtime.IProgressMonitor,
-	 *      org.eclipse.core.runtime.IAdaptable)
+	 * @see org.eclipse.equinox.p2.ui.model.ProvElement#fetchChildren(java.lang.Object, org.eclipse.core.runtime.IProgressMonitor)
 	 */
-	protected Object[] fetchChildren(Object o, IProgressMonitor monitor, IAdaptable uiInfo) {
+	protected Object[] fetchChildren(Object o, IProgressMonitor monitor) {
 		try {
-			return ProvisioningUtil.getProfiles(monitor, uiInfo);
+			return ProvisioningUtil.getProfiles(monitor);
 		} catch (ProvisionException e) {
 			handleException(e, null);
 		}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AvailableIUElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AvailableIUElement.java
index 6ce5c4f..7cfc99b 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AvailableIUElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AvailableIUElement.java
@@ -10,7 +10,6 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.ui.model;
 
-import org.eclipse.core.runtime.IAdaptable;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.metadata.InstallableUnit;
@@ -47,7 +46,7 @@ public class AvailableIUElement extends ProvElement {
 		return iu.getId();
 	}
 
-	protected Object[] fetchChildren(Object o, IProgressMonitor monitor, IAdaptable uiInfo) {
+	protected Object[] fetchChildren(Object o, IProgressMonitor monitor) {
 		return null;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/InstalledIUElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/InstalledIUElement.java
index 9bc61ed..4b1f3a2 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/InstalledIUElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/InstalledIUElement.java
@@ -10,7 +10,6 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.ui.model;
 
-import org.eclipse.core.runtime.IAdaptable;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
@@ -55,7 +54,7 @@ public class InstalledIUElement extends ProvElement {
 		return iu.getId();
 	}
 
-	protected Object[] fetchChildren(Object o, IProgressMonitor monitor, IAdaptable uiInfo) {
+	protected Object[] fetchChildren(Object o, IProgressMonitor monitor) {
 		return null;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ProfileFactory.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ProfileFactory.java
index 57106c0..621d560 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ProfileFactory.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ProfileFactory.java
@@ -38,7 +38,7 @@ public class ProfileFactory {
 		profile.setValue(Profile.PROP_ENVIRONMENTS, getDefaultEnvironments());
 		profile.setValue(Profile.PROP_NL, getDefaultNL());
 		try {
-			ProvisioningUtil.addProfile(profile, null, null);
+			ProvisioningUtil.addProfile(profile, null);
 		} catch (ProvisionException e) {
 			return null;
 		}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ProvElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ProvElement.java
index c006b29..aadd5fa 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ProvElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/ProvElement.java
@@ -37,7 +37,7 @@ public abstract class ProvElement implements IWorkbenchAdapter, IAdaptable {
 	}
 
 	public Object[] getChildren(Object o) {
-		return fetchChildren(o, null, null);
+		return fetchChildren(o, null);
 	}
 
 	// TODO if there is no optimization for subclasses, get rid of this
@@ -49,7 +49,7 @@ public abstract class ProvElement implements IWorkbenchAdapter, IAdaptable {
 		return children.length > 0;
 	}
 
-	abstract protected Object[] fetchChildren(Object o, IProgressMonitor monitor, IAdaptable uiInfo);
+	abstract protected Object[] fetchChildren(Object o, IProgressMonitor monitor);
 
 	/**
 	 * Return a string id of the image that should be used to show the specified
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/AddArtifactRepositoryOperation.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/AddArtifactRepositoryOperation.java
index ca2bec4..b71d06b 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/AddArtifactRepositoryOperation.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/AddArtifactRepositoryOperation.java
@@ -31,7 +31,7 @@ public class AddArtifactRepositoryOperation extends RepositoryOperation {
 
 	protected IStatus doExecute(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
 		for (int i = 0; i < urls.length; i++) {
-			IArtifactRepository repo = ProvisioningUtil.addArtifactRepository(urls[i], monitor, uiInfo);
+			IArtifactRepository repo = ProvisioningUtil.addArtifactRepository(urls[i], monitor);
 			if (repo == null) {
 				return failureStatus();
 			}
@@ -45,7 +45,7 @@ public class AddArtifactRepositoryOperation extends RepositoryOperation {
 
 	protected IStatus doUndo(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
 		for (int i = 0; i < urls.length; i++) {
-			ProvisioningUtil.removeArtifactRepository(urls[i], monitor, uiInfo);
+			ProvisioningUtil.removeArtifactRepository(urls[i], monitor);
 		}
 		// assume the best if no exception is thrown;
 		added = false;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/AddColocatedRepositoryOperation.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/AddColocatedRepositoryOperation.java
index cb2b649..6114b49 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/AddColocatedRepositoryOperation.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/AddColocatedRepositoryOperation.java
@@ -34,17 +34,17 @@ public class AddColocatedRepositoryOperation extends RepositoryOperation {
 	protected IStatus doExecute(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
 		for (int i = 0; i < urls.length; i++) {
 			URL metadataRepoURL = ColocatedRepositoryUtil.makeMetadataRepositoryURL(urls[i]);
-			IRepository repo = ProvisioningUtil.addMetadataRepository(metadataRepoURL, monitor, uiInfo);
+			IRepository repo = ProvisioningUtil.addMetadataRepository(metadataRepoURL, monitor);
 			if (repo == null) {
 				return failureStatus();
 			}
 			if (names[i] != null) {
 				ProvisioningUtil.setRepositoryName(repo, names[i]);
 			}
-			repo = ProvisioningUtil.addArtifactRepository(ColocatedRepositoryUtil.makeArtifactRepositoryURL(urls[i]), monitor, uiInfo);
+			repo = ProvisioningUtil.addArtifactRepository(ColocatedRepositoryUtil.makeArtifactRepositoryURL(urls[i]), monitor);
 			if (repo == null) {
 				// remove the metadata repo we just added
-				ProvisioningUtil.removeMetadataRepository(metadataRepoURL, monitor, uiInfo);
+				ProvisioningUtil.removeMetadataRepository(metadataRepoURL, monitor);
 				return failureStatus();
 			}
 		}
@@ -54,8 +54,8 @@ public class AddColocatedRepositoryOperation extends RepositoryOperation {
 
 	protected IStatus doUndo(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
 		for (int i = 0; i < urls.length; i++) {
-			ProvisioningUtil.removeMetadataRepository(ColocatedRepositoryUtil.makeMetadataRepositoryURL(urls[i]), monitor, uiInfo);
-			ProvisioningUtil.removeArtifactRepository(ColocatedRepositoryUtil.makeArtifactRepositoryURL(urls[i]), monitor, uiInfo);
+			ProvisioningUtil.removeMetadataRepository(ColocatedRepositoryUtil.makeMetadataRepositoryURL(urls[i]), monitor);
+			ProvisioningUtil.removeArtifactRepository(ColocatedRepositoryUtil.makeArtifactRepositoryURL(urls[i]), monitor);
 		}
 		added = false;
 		return okStatus();
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/AddMetadataRepositoryOperation.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/AddMetadataRepositoryOperation.java
index 78051f4..7d41123 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/AddMetadataRepositoryOperation.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/AddMetadataRepositoryOperation.java
@@ -31,7 +31,7 @@ public class AddMetadataRepositoryOperation extends RepositoryOperation {
 
 	protected IStatus doExecute(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
 		for (int i = 0; i < urls.length; i++) {
-			IMetadataRepository repo = ProvisioningUtil.addMetadataRepository(urls[i], monitor, uiInfo);
+			IMetadataRepository repo = ProvisioningUtil.addMetadataRepository(urls[i], monitor);
 			if (repo == null) {
 				return failureStatus();
 			}
@@ -45,7 +45,7 @@ public class AddMetadataRepositoryOperation extends RepositoryOperation {
 
 	protected IStatus doUndo(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
 		for (int i = 0; i < urls.length; i++) {
-			ProvisioningUtil.removeMetadataRepository(urls[i], monitor, uiInfo);
+			ProvisioningUtil.removeMetadataRepository(urls[i], monitor);
 		}
 		added = false;
 		return okStatus();
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/AddProfileOperation.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/AddProfileOperation.java
index dbe54bd..0dd8504 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/AddProfileOperation.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/AddProfileOperation.java
@@ -21,13 +21,39 @@ import org.eclipse.equinox.p2.ui.ProvisioningUtil;
  * @since 3.4
  */
 public class AddProfileOperation extends ProfileOperation {
+	private boolean added = false;
 
 	public AddProfileOperation(String label, Profile profile) {
 		super(label, new Profile[] {profile});
 	}
 
 	protected IStatus doExecute(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
-		ProvisioningUtil.addProfile(getProfiles()[0], monitor, uiInfo);
+		ProvisioningUtil.addProfile(getProfiles()[0], monitor);
+		added = true;
 		return okStatus();
 	}
+
+	protected IStatus doUndo(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
+		ProvisioningUtil.removeProfile(profileIds[0], monitor);
+		added = false;
+		return okStatus();
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * 
+	 * @see org.eclipse.core.commands.operations.AbstractOperation#canExecute()
+	 */
+	public boolean canExecute() {
+		return super.canExecute() && !added;
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * 
+	 * @see org.eclipse.core.commands.operations.AbstractOperation#canUndo()
+	 */
+	public boolean canUndo() {
+		return super.canUndo() && added;
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProfileModificationOperation.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProfileModificationOperation.java
index 61a7e63..29f4723 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProfileModificationOperation.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProfileModificationOperation.java
@@ -17,34 +17,28 @@ import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.ui.ProvisioningUtil;
 
 /**
- * Abstract class representing provisioning profile operations
+ * Class representing a provisioning profile plan
  * 
  * @since 3.4
  */
-public class ProfileModificationOperation extends ProfileOperation {
+public class ProfileModificationOperation extends ProvisioningOperation {
 
 	ProvisioningPlan plan;
+	String profileId;
 
 	public ProfileModificationOperation(String label, String id, ProvisioningPlan plan) {
-		super(label, new String[] {id});
+		super(label);
 		this.plan = plan;
-	}
-
-	boolean isValid() {
-		return super.isValid() && plan != null && plan.getStatus().isOK();
+		this.profileId = id;
 	}
 
 	public String getProfileId() {
-		try {
-			return super.getProfiles()[0].getProfileId();
-		} catch (ProvisionException e) {
-			return null;
-		}
+		return profileId;
 	}
 
 	public Profile getProfile() {
 		try {
-			return super.getProfiles()[0];
+			return ProvisioningUtil.getProfile(profileId);
 		} catch (ProvisionException e) {
 			return null;
 		}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProfileOperation.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProfileOperation.java
index 448e05d..02a6fd9 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProfileOperation.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProfileOperation.java
@@ -20,7 +20,7 @@ import org.eclipse.equinox.p2.ui.ProvisioningUtil;
  * 
  * @since 3.4
  */
-public abstract class ProfileOperation extends ProvisioningOperation {
+public abstract class ProfileOperation extends UndoableProvisioningOperation {
 
 	String[] profileIds;
 	Profile[] cachedProfiles;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/RemoveArtifactRepositoryOperation.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/RemoveArtifactRepositoryOperation.java
index 116aaf7..e504776 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/RemoveArtifactRepositoryOperation.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/RemoveArtifactRepositoryOperation.java
@@ -35,7 +35,7 @@ public class RemoveArtifactRepositoryOperation extends RepositoryOperation {
 
 	protected IStatus doExecute(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
 		for (int i = 0; i < urls.length; i++) {
-			ProvisioningUtil.removeArtifactRepository(urls[i], monitor, uiInfo);
+			ProvisioningUtil.removeArtifactRepository(urls[i], monitor);
 		}
 		removed = true;
 		return okStatus();
@@ -61,7 +61,7 @@ public class RemoveArtifactRepositoryOperation extends RepositoryOperation {
 
 	protected IStatus doUndo(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
 		for (int i = 0; i < urls.length; i++) {
-			IArtifactRepository repo = ProvisioningUtil.addArtifactRepository(urls[i], monitor, uiInfo);
+			IArtifactRepository repo = ProvisioningUtil.addArtifactRepository(urls[i], monitor);
 			if (repo == null) {
 				return failureStatus();
 			}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/RemoveColocatedRepositoryOperation.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/RemoveColocatedRepositoryOperation.java
index cb1ba82..f55c9ca 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/RemoveColocatedRepositoryOperation.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/RemoveColocatedRepositoryOperation.java
@@ -37,8 +37,8 @@ public class RemoveColocatedRepositoryOperation extends RepositoryOperation {
 
 	protected IStatus doExecute(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
 		for (int i = 0; i < urls.length; i++) {
-			ProvisioningUtil.removeMetadataRepository(ColocatedRepositoryUtil.makeMetadataRepositoryURL(urls[i]), monitor, uiInfo);
-			ProvisioningUtil.removeArtifactRepository(ColocatedRepositoryUtil.makeArtifactRepositoryURL(urls[i]), monitor, uiInfo);
+			ProvisioningUtil.removeMetadataRepository(ColocatedRepositoryUtil.makeMetadataRepositoryURL(urls[i]), monitor);
+			ProvisioningUtil.removeArtifactRepository(ColocatedRepositoryUtil.makeArtifactRepositoryURL(urls[i]), monitor);
 		}
 		removed = true;
 		return okStatus();
@@ -65,7 +65,7 @@ public class RemoveColocatedRepositoryOperation extends RepositoryOperation {
 	protected IStatus doUndo(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
 		for (int i = 0; i < urls.length; i++) {
 			URL metadataURL = ColocatedRepositoryUtil.makeMetadataRepositoryURL(urls[i]);
-			IRepository repo = ProvisioningUtil.addMetadataRepository(metadataURL, monitor, uiInfo);
+			IRepository repo = ProvisioningUtil.addMetadataRepository(metadataURL, monitor);
 			if (repo == null) {
 				return failureStatus();
 			}
@@ -73,10 +73,10 @@ public class RemoveColocatedRepositoryOperation extends RepositoryOperation {
 				ProvisioningUtil.setRepositoryName(repo, names[i]);
 			}
 
-			repo = ProvisioningUtil.addArtifactRepository(ColocatedRepositoryUtil.makeArtifactRepositoryURL(urls[i]), monitor, uiInfo);
+			repo = ProvisioningUtil.addArtifactRepository(ColocatedRepositoryUtil.makeArtifactRepositoryURL(urls[i]), monitor);
 			if (repo == null) {
 				// remove the metadata repo we just added
-				ProvisioningUtil.removeMetadataRepository(metadataURL, monitor, uiInfo);
+				ProvisioningUtil.removeMetadataRepository(metadataURL, monitor);
 				return failureStatus();
 			}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/RemoveMetadataRepositoryOperation.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/RemoveMetadataRepositoryOperation.java
index a30c904..435b9c0 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/RemoveMetadataRepositoryOperation.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/RemoveMetadataRepositoryOperation.java
@@ -35,7 +35,7 @@ public class RemoveMetadataRepositoryOperation extends RepositoryOperation {
 
 	protected IStatus doExecute(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
 		for (int i = 0; i < urls.length; i++) {
-			ProvisioningUtil.removeMetadataRepository(urls[i], monitor, uiInfo);
+			ProvisioningUtil.removeMetadataRepository(urls[i], monitor);
 		}
 		removed = true;
 		return okStatus();
@@ -61,7 +61,7 @@ public class RemoveMetadataRepositoryOperation extends RepositoryOperation {
 
 	protected IStatus doUndo(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
 		for (int i = 0; i < urls.length; i++) {
-			IMetadataRepository repo = ProvisioningUtil.addMetadataRepository(urls[i], monitor, uiInfo);
+			IMetadataRepository repo = ProvisioningUtil.addMetadataRepository(urls[i], monitor);
 			if (repo == null) {
 				return failureStatus();
 			}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/RemoveProfilesOperation.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/RemoveProfilesOperation.java
index ae0fe9b..ea1f419 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/RemoveProfilesOperation.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/RemoveProfilesOperation.java
@@ -21,15 +21,44 @@ import org.eclipse.equinox.p2.ui.ProvisioningUtil;
  * @since 3.4
  */
 public class RemoveProfilesOperation extends ProfileOperation {
+	private boolean removed = false;
+
 	public RemoveProfilesOperation(String label, Profile[] profiles) {
 		super(label, profiles);
 	}
 
 	protected IStatus doExecute(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
 		for (int i = 0; i < profileIds.length; i++) {
-			ProvisioningUtil.removeProfile(profileIds[i], monitor, uiInfo);
+			ProvisioningUtil.removeProfile(profileIds[i], monitor);
 		}
 		// assume the best if no exception
+		removed = true;
+		return okStatus();
+	}
+
+	protected IStatus doUndo(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
+		for (int i = 0; i < cachedProfiles.length; i++) {
+			ProvisioningUtil.addProfile(cachedProfiles[i], monitor);
+		}
+		removed = false;
 		return okStatus();
 	}
+
+	/*
+	 * (non-Javadoc)
+	 * 
+	 * @see org.eclipse.core.commands.operations.AbstractOperation#canExecute()
+	 */
+	public boolean canExecute() {
+		return profileIds != null && !removed;
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * 
+	 * @see org.eclipse.core.commands.operations.AbstractOperation#canUndo()
+	 */
+	public boolean canUndo() {
+		return cachedProfiles != null && removed;
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/RepositoryOperation.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/RepositoryOperation.java
index 73da481..109a80c 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/RepositoryOperation.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/RepositoryOperation.java
@@ -11,20 +11,13 @@
 package org.eclipse.equinox.p2.ui.operations;
 
 import java.net.URL;
-import org.eclipse.core.commands.ExecutionException;
-import org.eclipse.core.commands.operations.*;
-import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
-import org.eclipse.equinox.p2.core.ProvisionException;
-import org.eclipse.equinox.p2.ui.ProvUIActivator;
-import org.eclipse.osgi.util.NLS;
 
 /**
  * Abstract class representing provisioning repository operations
  * 
  * @since 3.4
  */
-public abstract class RepositoryOperation extends AbstractOperation implements IAdvancedUndoableOperation2 {
+abstract class RepositoryOperation extends UndoableProvisioningOperation {
 
 	URL[] urls;
 	String[] names;
@@ -35,84 +28,6 @@ public abstract class RepositoryOperation extends AbstractOperation implements I
 		this.names = names;
 	}
 
-	/**
-	 * Perform the specific work involved in undoing this operation.
-	 * 
-	 * @param monitor
-	 *            the progress monitor to use for the operation
-	 * @param uiInfo
-	 *            the IAdaptable (or <code>null</code>) provided by the
-	 *            caller in order to supply UI information for prompting the
-	 *            user if necessary. When this parameter is not
-	 *            <code>null</code>, it contains an adapter for the
-	 *            org.eclipse.swt.widgets.Shell.class
-	 * @throws ProvisionException
-	 *             propagates any ProvisionException thrown
-	 */
-	protected abstract IStatus doUndo(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException;
-
-	/**
-	 * Perform the specific work involved in executing this operation.
-	 * 
-	 * @param monitor
-	 *            the progress monitor to use for the operation
-	 * @param uiInfo
-	 *            the IAdaptable (or <code>null</code>) provided by the
-	 *            caller in order to supply UI information for prompting the
-	 *            user if necessary. When this parameter is not
-	 *            <code>null</code>, it contains an adapter for the
-	 *            org.eclipse.swt.widgets.Shell.class
-	 * @throws ProvisionException
-	 *             propagates any ProvisionException thrown
-	 * 
-	 */
-	protected abstract IStatus doExecute(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException;
-
-	/**
-	 * 
-	 */
-	public IStatus execute(IProgressMonitor monitor, final IAdaptable uiInfo) throws ExecutionException {
-		IStatus status;
-		try {
-			status = doExecute(monitor, uiInfo);
-		} catch (final ProvisionException e) {
-			throw new ExecutionException(NLS.bind(ProvUIMessages.ProvisioningOperation_ExecuteErrorTitle, getLabel()), e);
-		} catch (OperationCanceledException e) {
-			return Status.CANCEL_STATUS;
-		}
-		return status;
-	}
-
-	/**
-	 * 
-	 */
-	public IStatus redo(IProgressMonitor monitor, final IAdaptable uiInfo) throws ExecutionException {
-		IStatus status;
-		try {
-			status = doExecute(monitor, uiInfo);
-		} catch (final ProvisionException e) {
-			throw new ExecutionException(NLS.bind(ProvUIMessages.ProvisioningOperation_RedoErrorTitle, getLabel()), e);
-		} catch (OperationCanceledException e) {
-			return Status.CANCEL_STATUS;
-		}
-		return status;
-	}
-
-	/**
-	 * 
-	 */
-	public IStatus undo(IProgressMonitor monitor, final IAdaptable uiInfo) throws ExecutionException {
-		IStatus status;
-		try {
-			status = doUndo(monitor, uiInfo);
-		} catch (final ProvisionException e) {
-			throw new ExecutionException(NLS.bind(ProvUIMessages.ProvisioningOperation_UndoErrorTitle, getLabel()), e);
-		} catch (OperationCanceledException e) {
-			return Status.CANCEL_STATUS;
-		}
-		return status;
-	}
-
 	public boolean canExecute() {
 		return urls != null;
 	}
@@ -129,60 +44,4 @@ public abstract class RepositoryOperation extends AbstractOperation implements I
 	public Object[] getAffectedObjects() {
 		return urls;
 	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.eclipse.core.commands.operations.IAdvancedUndoableOperation#computeRedoableStatus(org.eclipse.core.runtime.IProgressMonitor)
-	 */
-	public IStatus computeRedoableStatus(IProgressMonitor monitor) throws ExecutionException {
-		return computeExecutionStatus(monitor);
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.eclipse.core.commands.operations.IAdvancedUndoableOperation#computeUndoableStatus(org.eclipse.core.runtime.IProgressMonitor)
-	 */
-	public IStatus computeUndoableStatus(IProgressMonitor monitor) throws ExecutionException {
-		return okStatus();
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.eclipse.core.commands.operations.IAdvancedUndoableOperation2#computeExecutionStatus(org.eclipse.core.runtime.IProgressMonitor)
-	 */
-	public IStatus computeExecutionStatus(IProgressMonitor monitor) throws ExecutionException {
-		return okStatus();
-	} /*
-	 * (non-Javadoc)
-	 * @see org.eclipse.core.commands.operations.IAdvancedUndoableOperation2#runInBackground()
-	 */
-
-	public boolean runInBackground() {
-		return true;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * @see org.eclipse.core.commands.operations.IAdvancedUndoableOperation2#setQuietCompute(boolean)
-	 */
-	public void setQuietCompute(boolean quiet) {
-		// do nothing for now
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * 
-	 * @see org.eclipse.core.commands.operations.IAdvancedUndoableOperation#aboutToNotify(org.eclipse.core.commands.operations.OperationHistoryEvent)
-	 */
-	public void aboutToNotify(OperationHistoryEvent event) {
-		// do nothing
-	}
-
-	protected IStatus okStatus() {
-		return Status.OK_STATUS;
-	}
-
-	protected IStatus failureStatus() {
-		return new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, getLabel());
-	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/UndoableProvisioningOperation.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/UndoableProvisioningOperation.java
new file mode 100644
index 0000000..e84c242
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/UndoableProvisioningOperation.java
@@ -0,0 +1,242 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.p2.ui.operations;
+
+import java.util.ArrayList;
+import java.util.List;
+import org.eclipse.core.commands.ExecutionException;
+import org.eclipse.core.commands.operations.*;
+import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
+import org.eclipse.equinox.p2.core.ProvisionException;
+import org.eclipse.equinox.p2.ui.ProvUIActivator;
+import org.eclipse.equinox.p2.ui.ProvisioningUndoSupport;
+import org.eclipse.osgi.util.NLS;
+
+/**
+ * Abstract class representing an undoable provisioning operations
+ * 
+ * @since 3.4
+ */
+abstract class UndoableProvisioningOperation extends ProvisioningOperation implements IUndoableOperation, IAdvancedUndoableOperation2 {
+
+	boolean quietCompute = false;
+	List contexts = new ArrayList();
+
+	UndoableProvisioningOperation(String label) {
+		super(label);
+		addContext(ProvisioningUndoSupport.getProvisioningUndoContext());
+	}
+
+	/**
+	 * Perform the specific work involved in undoing this operation.
+	 * 
+	 * @param monitor
+	 *            the progress monitor to use for the operation
+	 * @param uiInfo
+	 *            the IAdaptable (or <code>null</code>) provided by the
+	 *            caller in order to supply UI information for prompting the
+	 *            user if necessary. When this parameter is not
+	 *            <code>null</code>, it contains an adapter for the
+	 *            org.eclipse.swt.widgets.Shell.class
+	 * @throws ProvisionException
+	 *             propagates any ProvisionException thrown
+	 */
+	protected abstract IStatus doUndo(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException;
+
+	/**
+	 * Perform the specific work involved in executing this operation.
+	 * 
+	 * @param monitor
+	 *            the progress monitor to use for the operation
+	 * @param uiInfo
+	 *            the IAdaptable (or <code>null</code>) provided by the
+	 *            caller in order to supply UI information for prompting the
+	 *            user if necessary. When this parameter is not
+	 *            <code>null</code>, it contains an adapter for the
+	 *            org.eclipse.swt.widgets.Shell.class
+	 * @throws ProvisionException
+	 *             propagates any ProvisionException thrown
+	 * 
+	 */
+	protected abstract IStatus doExecute(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException;
+
+	/**
+	 * 
+	 */
+	public IStatus execute(IProgressMonitor monitor, final IAdaptable uiInfo) throws ExecutionException {
+		IStatus status;
+		try {
+			status = doExecute(monitor, uiInfo);
+		} catch (final ProvisionException e) {
+			throw new ExecutionException(NLS.bind(ProvUIMessages.ProvisioningOperation_ExecuteErrorTitle, getLabel()), e);
+		} catch (OperationCanceledException e) {
+			return Status.CANCEL_STATUS;
+		}
+		return status;
+	}
+
+	/**
+	 * 
+	 */
+	public IStatus redo(IProgressMonitor monitor, final IAdaptable uiInfo) throws ExecutionException {
+		IStatus status;
+		try {
+			status = doExecute(monitor, uiInfo);
+		} catch (final ProvisionException e) {
+			throw new ExecutionException(NLS.bind(ProvUIMessages.ProvisioningOperation_RedoErrorTitle, getLabel()), e);
+		} catch (OperationCanceledException e) {
+			return Status.CANCEL_STATUS;
+		}
+		return status;
+	}
+
+	/**
+	 * 
+	 */
+	public IStatus undo(IProgressMonitor monitor, final IAdaptable uiInfo) throws ExecutionException {
+		IStatus status;
+		try {
+			status = doUndo(monitor, uiInfo);
+		} catch (final ProvisionException e) {
+			throw new ExecutionException(NLS.bind(ProvUIMessages.ProvisioningOperation_UndoErrorTitle, getLabel()), e);
+		} catch (OperationCanceledException e) {
+			return Status.CANCEL_STATUS;
+		}
+		return status;
+	}
+
+	public boolean canExecute() {
+		return true;
+	}
+
+	public boolean canRedo() {
+		return canExecute();
+	}
+
+	public boolean canUndo() {
+		return true;
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.core.commands.operations.IAdvancedUndoableOperation#computeRedoableStatus(org.eclipse.core.runtime.IProgressMonitor)
+	 */
+	public IStatus computeRedoableStatus(IProgressMonitor monitor) throws ExecutionException {
+		return computeExecutionStatus(monitor);
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.core.commands.operations.IAdvancedUndoableOperation#computeUndoableStatus(org.eclipse.core.runtime.IProgressMonitor)
+	 */
+	public IStatus computeUndoableStatus(IProgressMonitor monitor) throws ExecutionException {
+		return okStatus();
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.core.commands.operations.IAdvancedUndoableOperation2#computeExecutionStatus(org.eclipse.core.runtime.IProgressMonitor)
+	 */
+	public IStatus computeExecutionStatus(IProgressMonitor monitor) throws ExecutionException {
+		return okStatus();
+	} /*
+	 * (non-Javadoc)
+	 * @see org.eclipse.core.commands.operations.IAdvancedUndoableOperation2#runInBackground()
+	 */
+
+	public boolean runInBackground() {
+		return true;
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.core.commands.operations.IAdvancedUndoableOperation2#setQuietCompute(boolean)
+	 */
+	public void setQuietCompute(boolean quiet) {
+		quietCompute = quiet;
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * 
+	 * @see org.eclipse.core.commands.operations.IAdvancedUndoableOperation#aboutToNotify(org.eclipse.core.commands.operations.OperationHistoryEvent)
+	 */
+	public void aboutToNotify(OperationHistoryEvent event) {
+		// do nothing
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * 
+	 * @see org.eclipse.core.commands.operations.IUndoableOperation#addContext(org.eclipse.core.commands.operations.IUndoContext)
+	 * 
+	 * <p> Subclasses may override this method. </p>
+	 */
+	public void addContext(IUndoContext context) {
+		if (!contexts.contains(context)) {
+			contexts.add(context);
+		}
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * 
+	 * @see org.eclipse.core.commands.operations.IUndoableOperation#removeContext(org.eclipse.core.commands.operations.IUndoContext)
+	 *      <p> Default implementation. Subclasses may override this method.
+	 *      </p>
+	 */
+
+	public void removeContext(IUndoContext context) {
+		contexts.remove(context);
+	}
+
+	public final IUndoContext[] getContexts() {
+		return (IUndoContext[]) contexts.toArray(new IUndoContext[contexts.size()]);
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * 
+	 * @see org.eclipse.core.commands.operations.IUndoableOperation#hasContext(org.eclipse.core.commands.operations.IUndoContext)
+	 */
+	public final boolean hasContext(IUndoContext context) {
+		Assert.isNotNull(context);
+		for (int i = 0; i < contexts.size(); i++) {
+			IUndoContext otherContext = (IUndoContext) contexts.get(i);
+			// have to check both ways because one context may be more general
+			// in its matching rules than another.
+			if (context.matches(otherContext) || otherContext.matches(context)) {
+				return true;
+			}
+		}
+		return false;
+	}
+
+	protected IStatus okStatus() {
+		return Status.OK_STATUS;
+	}
+
+	protected IStatus failureStatus() {
+		return new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, getLabel());
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * 
+	 * @see org.eclipse.core.commands.operations.IUndoableOperation#dispose()
+	 *      <p> Default implementation. Subclasses may override this method.
+	 *      </p>
+	 */
+	public void dispose() {
+		// nothing to dispose.
+	}
+}
commit a12acd26d1e66d3446064e546ce041d08ff1efd7
Author: Susan Franklin <sfranklin>
Date:   Mon Dec 3 20:27:38 2007 +0000

    Bug 205223 -[prov] [ui]  Revert UI

1	1	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java
5	0	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/IDirector.java
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java
index 9d5e685..53c3608 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java
@@ -56,7 +56,7 @@ public class SimpleDirector implements IDirector {
 			throw new IllegalStateException("Unable to find provisioning planner");
 	}
 
-	private URL getRollbackLocation() {
+	public URL getRollbackLocation() {
 		AgentLocation agentLocation = (AgentLocation) ServiceHelper.getService(DirectorActivator.context, AgentLocation.class.getName());
 		try {
 			return new URL(agentLocation.getDataArea(DirectorActivator.PI_DIRECTOR), ROLLBACK_LOCATION);
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/IDirector.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/IDirector.java
index 465efc3..7966631 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/IDirector.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/IDirector.java
@@ -8,6 +8,7 @@
  ******************************************************************************/
 package org.eclipse.equinox.p2.director;
 
+import java.net.URL;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.p2.engine.Profile;
@@ -49,6 +50,10 @@ public interface IDirector {
 	public IStatus replace(IInstallableUnit[] toUninstall, IInstallableUnit[] toInstall, Profile profile, IProgressMonitor monitor);
 
 	public IStatus revert(IInstallableUnit previous, Profile profile, IProgressMonitor monitor);
+
 	//TODO And many more operations for uninstallation and the rest ! See bug 179819
 
+	//TODO we might want to register a service for this instead?
+	// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=211810
+	public URL getRollbackLocation();
 }
commit a914c00bf7f05d9af16cefde23a0f4e2435f43d8
Author: Susan Franklin <sfranklin>
Date:   Mon Dec 3 21:10:18 2007 +0000

    Bug 205223 -[prov] [ui]  Revert UI

1	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
1	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
11	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
index 34dd305..9c527ea 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
@@ -43,6 +43,7 @@ public class ProvUIMessages extends NLS {
 	public static String ProvisioningUtil_CreateRepositoryFailure;
 	public static String ProvisioningUtil_InstallManyTask;
 	public static String ProvisioningUtil_InstallOneTask;
+	public static String ProvisioningUtil_LoadRepositoryFailure;
 	public static String ProvisioningUtil_RepoNotWritable;
 	public static String ProvisioningUtil_RepositoryNotFound;
 	public static String ProvisioningUtil_NoProfileRegistryFound;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
index a158304..1a9d19e 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
@@ -14,6 +14,7 @@ ProvisioningUtil_AddRepositoryFailure=Unable to add repository {0}
 ProvisioningUtil_CreateRepositoryFailure=Unable to create repository {0}
 ProvisioningUtil_InstallManyTask=Installing {0} features into {1}
 ProvisioningUtil_InstallOneTask=Installing {0} into {1}
+ProvisioningUtil_LoadRepositoryFailure=Unable to load the repository {0}
 ProvisioningUtil_RepositoryNotFound=Could not find repository {0}
 ProvisioningUtil_RepoNotWritable=Repository is not writable
 ProvisioningUtil_NoProfileRegistryFound=No profile registry was found
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
index d992d47..17d79d7 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
@@ -64,6 +64,17 @@ public class ProvisioningUtil {
 		return repo;
 	}
 
+	public static IMetadataRepository loadMetadataRepository(URL location, IProgressMonitor monitor) throws ProvisionException {
+		IMetadataRepositoryManager manager = (IMetadataRepositoryManager) ServiceHelper.getService(ProvUIActivator.getContext(), IMetadataRepositoryManager.class.getName());
+		if (manager == null)
+			throw new ProvisionException(ProvUIMessages.ProvisioningUtil_NoRepositoryManager);
+		IMetadataRepository repo = manager.loadRepository(location, monitor);
+		if (repo == null) {
+			throw new ProvisionException(NLS.bind(ProvUIMessages.ProvisioningUtil_LoadRepositoryFailure, location.toExternalForm()));
+		}
+		return repo;
+	}
+
 	public static void removeMetadataRepository(URL location, IProgressMonitor monitor) throws ProvisionException {
 		IMetadataRepositoryManager manager = (IMetadataRepositoryManager) ServiceHelper.getService(ProvUIActivator.getContext(), IMetadataRepositoryManager.class.getName());
 		if (manager == null) {
commit b574f47167c243907591998f518092ea1ddb0f65
Author: Susan Franklin <sfranklin>
Date:   Tue Dec 4 19:41:32 2007 +0000

    Bug 205223 - [prov] [ui] UI for revert

2	2	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java
3	2	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
6	0	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java
5	0	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
6	0	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
211	0	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RevertDialog.java
19	2	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java
7	3	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateHandler.java
5	0	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
0	35	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/StaticContentProvider.java
2	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/IProfileChooser.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/ProfileModificationAction.java
1	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/ProfileModificationDialog.java
4	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateAndInstallGroup.java
84	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/RollbackProfileElement.java
33	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/RollbackRepositoryElement.java
2	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/AvailableIUCollector.java
33	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/RollbackIUCollector.java
11	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/ProvElementLabelProvider.java
36	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/StaticContentProvider.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java
index fb3a223..bb0cd26 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/MetadataRepositoriesView.java
@@ -90,12 +90,12 @@ public class MetadataRepositoriesView extends RepositoriesView {
 	private IProfileChooser getProfileChooser() {
 		return new IProfileChooser() {
 
-			public Profile getProfile() {
+			public Profile getProfile(Shell shell) {
 				// TODO would be nice if the profile chooser dialog let you
 				// create a new profile
 				DeferredQueryContentProvider provider = new DeferredQueryContentProvider(ProvAdminUIActivator.getDefault().getQueryProvider());
 				if (provider.getElements(new Profiles()).length == 0) {
-					AddProfileDialog dialog = new AddProfileDialog(getShell(), new Profile[0]);
+					AddProfileDialog dialog = new AddProfileDialog(shell, new Profile[0]);
 					if (dialog.open() == Window.OK) {
 						return dialog.getAddedProfile();
 					}
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
index 050488a..965d572 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
@@ -29,6 +29,7 @@ import org.eclipse.jface.action.*;
 import org.eclipse.jface.viewers.*;
 import org.eclipse.swt.dnd.DND;
 import org.eclipse.swt.dnd.Transfer;
+import org.eclipse.swt.widgets.Shell;
 import org.eclipse.ui.ISharedImages;
 import org.eclipse.ui.PlatformUI;
 import org.eclipse.ui.actions.ActionFactory;
@@ -86,7 +87,7 @@ public class ProfilesView extends ProvView {
 		}
 
 		public void run() {
-			Profile profile = getProfileChooser().getProfile();
+			Profile profile = getProfileChooser().getProfile(getShell());
 			if (profile != null) {
 				UpdateAndInstallDialog dialog = new UpdateAndInstallDialog(getShell(), profile);
 				dialog.open();
@@ -211,7 +212,7 @@ public class ProfilesView extends ProvView {
 
 	IProfileChooser getProfileChooser() {
 		return new IProfileChooser() {
-			public Profile getProfile() {
+			public Profile getProfile(Shell shell) {
 				Object firstElement = getSelection().getFirstElement();
 				if (firstElement instanceof InstalledIUElement) {
 					return ((InstalledIUElement) firstElement).getProfile();
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java
index 0d340ba..2baff89 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java
@@ -57,6 +57,12 @@ public class ProvAdminQueryProvider implements IProvElementQueryProvider {
 				query = hideImpl ? new RepositoryPropertyQuery(IRepository.IMPLEMENTATION_ONLY_KEY, Boolean.toString(true), false) : allQuery;
 				return new ElementQueryDescriptor(queryable, query, new QueriedElementCollector(this, queryable));
 			case IProvElementQueryProvider.AVAILABLE_IUS :
+				// Is it a rollback repository?
+				if (element instanceof RollbackRepositoryElement) {
+					Query profileQuery = new InstallableUnitQuery(((RollbackRepositoryElement) element).getProfile().getProfileId());
+					return new ElementQueryDescriptor(element.getQueryable(), profileQuery, new AvailableIUCollector(this, element.getQueryable(), false));
+				}
+				// It is a regular repository.
 				// What should we show as a child of a repository?
 				if (element instanceof MetadataRepositoryElement) {
 					if (useCategories)
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
index 4162a3d..8fc5f29 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
@@ -32,11 +32,16 @@ public class ProvSDKMessages extends NLS {
 	public static String RepositoryManipulationDialog_RemoveButton;
 	public static String RepositoryManipulationDialog_RemoveOperationLabel;
 	public static String RepositoryManipulationDialog_UpdateSitesDialogTitle;
+	public static String RevertDialog_RevertError;
+	public static String RevertDialog_RevertOperationLabel;
+	public static String RevertDialog_SelectMessage;
+	public static String RevertDialog_Title;
 	public static String UpdateAndInstallDialog_AvailableFeatures;
 	public static String UpdateAndInstallDialog_InstalledFeatures;
 	public static String UpdateAndInstallDialog_ManageSites;
 	public static String UpdateAndInstallDialog_AlertCheckbox;
 	public static String UpdateAndInstallDialog_PrefLink;
+	public static String UpdateAndInstallDialog_RevertActionLabel;
 	public static String UpdateAndInstallDialog_Title;
 	public static String UpdateHandler_NoProfilesDefined;
 	public static String UpdateHandler_NoProfileInstanceDefined;
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
index 70bd192..b07bb5b 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
@@ -16,6 +16,7 @@ import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.metadata.RequiredCapability;
 import org.eclipse.equinox.p2.metadata.query.CapabilityQuery;
+import org.eclipse.equinox.p2.metadata.query.InstallableUnitQuery;
 import org.eclipse.equinox.p2.query.*;
 import org.eclipse.equinox.p2.ui.ProvUI;
 import org.eclipse.equinox.p2.ui.model.*;
@@ -37,6 +38,11 @@ public class ProvSDKQueryProvider implements IProvElementQueryProvider {
 				queryable = new QueryableArtifactRepositoryManager();
 				return new ElementQueryDescriptor(queryable, new RepositoryPropertyQuery(IRepository.IMPLEMENTATION_ONLY_KEY, Boolean.toString(true), false), new QueriedElementCollector(this, queryable));
 			case IProvElementQueryProvider.AVAILABLE_IUS :
+				if (element instanceof RollbackRepositoryElement) {
+					Query profileIdQuery = new InstallableUnitQuery(((RollbackRepositoryElement) element).getProfile().getProfileId());
+					Query rollbackIUQuery = new IUPropertyQuery(IInstallableUnit.PROP_PROFILE_IU_KEY, Boolean.toString(true));
+					return new ElementQueryDescriptor(element.getQueryable(), new CompoundQuery(new Query[] {profileIdQuery, rollbackIUQuery}, true), new RollbackIUCollector(this, element.getQueryable()));
+				}
 				CapabilityQuery groupQuery = new CapabilityQuery(new RequiredCapability(IInstallableUnit.NAMESPACE_IU_KIND, "group", null, null, false, false)); //$NON-NLS-1$
 				Query categoryQuery = new IUPropertyQuery(IInstallableUnit.PROP_CATEGORY_IU, Boolean.toString(true));
 				if (element instanceof MetadataRepositoryElement) {
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RevertDialog.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RevertDialog.java
new file mode 100644
index 0000000..7e1f96e
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RevertDialog.java
@@ -0,0 +1,211 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.ui.sdk;
+
+import java.lang.reflect.InvocationTargetException;
+import java.util.Comparator;
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.jobs.Job;
+import org.eclipse.equinox.p2.core.ProvisionException;
+import org.eclipse.equinox.p2.director.ProvisioningPlan;
+import org.eclipse.equinox.p2.engine.Profile;
+import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.ui.ProvUI;
+import org.eclipse.equinox.p2.ui.ProvisioningOperationRunner;
+import org.eclipse.equinox.p2.ui.model.RollbackProfileElement;
+import org.eclipse.equinox.p2.ui.model.RollbackRepositoryElement;
+import org.eclipse.equinox.p2.ui.operations.*;
+import org.eclipse.equinox.p2.ui.viewers.*;
+import org.eclipse.jface.dialogs.*;
+import org.eclipse.jface.dialogs.Dialog;
+import org.eclipse.jface.operation.IRunnableWithProgress;
+import org.eclipse.jface.viewers.*;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.layout.GridData;
+import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.widgets.*;
+import org.eclipse.ui.PlatformUI;
+
+/**
+ * Dialog that allows users to update their installed IU's or find new ones.
+ * 
+ * @since 3.4
+ */
+public class RevertDialog extends TrayDialog {
+
+	private static final String DIALOG_SETTINGS_SECTION = "RevertDialog"; //$NON-NLS-1$
+	private static final int DEFAULT_COLUMN_WIDTH = 150;
+
+	Profile profile;
+	TableViewer configsViewer;
+	TableViewer configContentsViewer;
+
+	/**
+	 * Create an instance of this Dialog.
+	 * 
+	 */
+	public RevertDialog(Shell shell, Profile profile) {
+		super(shell);
+		this.profile = profile;
+		setShellStyle(SWT.DIALOG_TRIM | SWT.MODELESS | SWT.MAX | SWT.RESIZE | getDefaultOrientation());
+		setBlockOnOpen(false);
+	}
+
+	protected void configureShell(Shell shell) {
+		shell.setText(ProvSDKMessages.RevertDialog_Title);
+		super.configureShell(shell);
+	}
+
+	protected Control createDialogArea(Composite parent) {
+		Composite comp = new Composite(parent, SWT.NONE);
+		GridLayout layout = new GridLayout();
+		layout.numColumns = 2;
+		comp.setLayout(layout);
+		GridData gd = new GridData(SWT.FILL, SWT.FILL, true, true);
+		comp.setLayoutData(gd);
+		Label label = new Label(comp, SWT.WRAP);
+		label.setText(ProvSDKMessages.RevertDialog_SelectMessage);
+		gd = new GridData();
+		gd.horizontalSpan = 2;
+		label.setLayoutData(gd);
+
+		configsViewer = new TableViewer(comp, SWT.FULL_SELECTION | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
+		configsViewer.setContentProvider(new RepositoryContentProvider(ProvSDKUIActivator.getDefault().getQueryProvider()));
+		configsViewer.setInput(getInput());
+		configsViewer.setLabelProvider(new ProvElementLabelProvider());
+		configsViewer.setComparator(new ViewerComparator(new Comparator() {
+			// This comparator sorts in reverse order so that we see the newest configs first
+			public int compare(Object o1, Object o2) {
+				return ((String) o2).compareTo((String) o1);
+			}
+		}));
+		configsViewer.addSelectionChangedListener(new ISelectionChangedListener() {
+			public void selectionChanged(SelectionChangedEvent event) {
+				RevertDialog.this.selectionChanged((IStructuredSelection) event.getSelection());
+			}
+
+		});
+		gd = new GridData(GridData.FILL_BOTH);
+		configsViewer.getControl().setLayoutData(gd);
+
+		configContentsViewer = new TableViewer(comp, SWT.MULTI | SWT.FULL_SELECTION | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
+		configContentsViewer.setContentProvider(new StaticContentProvider(new Object[0]));
+		configContentsViewer.setInput(new Object[0]);
+		configContentsViewer.setLabelProvider(new ProvElementLabelProvider());
+		configContentsViewer.setComparator(new ViewerComparator());
+		setTableColumns(configContentsViewer.getTable());
+		gd = new GridData(GridData.FILL_BOTH);
+		gd.grabExcessHorizontalSpace = true;
+		gd.grabExcessVerticalSpace = true;
+		configContentsViewer.getControl().setLayoutData(gd);
+
+		selectionChanged((IStructuredSelection) configsViewer.getSelection());
+		Dialog.applyDialogFont(comp);
+		return comp;
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * 
+	 * @see org.eclipse.jface.dialogs.Dialog#isResizable()
+	 */
+	protected boolean isResizable() {
+		return true;
+	}
+
+	protected void okPressed() {
+		revert();
+		super.okPressed();
+	}
+
+	protected IDialogSettings getDialogBoundsSettings() {
+		IDialogSettings settings = ProvSDKUIActivator.getDefault().getDialogSettings();
+		IDialogSettings section = settings.getSection(DIALOG_SETTINGS_SECTION);
+		if (section == null) {
+			section = settings.addNewSection(DIALOG_SETTINGS_SECTION);
+		}
+		return section;
+	}
+
+	private void revert() {
+		final IInstallableUnit iu = getSelectedIU();
+		if (iu == null)
+			return;
+		final ProvisioningPlan[] plan = new ProvisioningPlan[1];
+		IRunnableWithProgress runnable = new IRunnableWithProgress() {
+			public void run(IProgressMonitor monitor) {
+				try {
+					plan[0] = ProvisioningUtil.getBecomePlan(iu, profile, monitor);
+				} catch (ProvisionException e) {
+					ProvUI.handleException(e, ProvSDKMessages.RevertDialog_RevertError);
+				}
+			}
+		};
+		try {
+			PlatformUI.getWorkbench().getProgressService().busyCursorWhile(runnable);
+			ProvisioningOperation op = new ProfileModificationOperation(ProvSDKMessages.RevertDialog_RevertOperationLabel, profile.getProfileId(), plan[0]);
+			Job job = ProvisioningOperationRunner.schedule(op, getShell());
+			job.join();
+		} catch (InterruptedException e) {
+			// don't report thread interruption
+		} catch (InvocationTargetException e) {
+			ProvUI.handleException(e.getCause(), ProvSDKMessages.RevertDialog_RevertError);
+		}
+
+	}
+
+	private Object getInput() {
+		try {
+			RollbackRepositoryElement element = new RollbackRepositoryElement(ProvisioningUtil.getRollbackRepository(null), profile);
+			element.setQueryProvider(ProvSDKUIActivator.getDefault().getQueryProvider());
+			return element;
+		} catch (ProvisionException e) {
+			ProvUI.handleException(e, null);
+			return null;
+		}
+	}
+
+	void selectionChanged(IStructuredSelection selection) {
+		if (selection.isEmpty()) {
+			setEnabled(false);
+		} else {
+			setEnabled(true);
+			Object selected = selection.getFirstElement();
+			if (selected instanceof RollbackProfileElement)
+				configContentsViewer.setInput(((RollbackProfileElement) selected).getChildren(null));
+		}
+	}
+
+	private void setTableColumns(Table table) {
+		IUColumnConfig[] columns = ProvUI.getIUColumnConfig();
+
+		for (int i = 0; i < columns.length; i++) {
+			TableColumn tc = new TableColumn(table, SWT.NONE, i);
+			tc.setResizable(true);
+			tc.setText(columns[i].columnTitle);
+			tc.setWidth(convertHorizontalDLUsToPixels(DEFAULT_COLUMN_WIDTH));
+		}
+	}
+
+	private IInstallableUnit getSelectedIU() {
+		Object selected = ((IStructuredSelection) configsViewer.getSelection()).getFirstElement();
+		if (selected != null && selected instanceof RollbackProfileElement)
+			return ((RollbackProfileElement) selected).getIU();
+		return null;
+	}
+
+	private void setEnabled(boolean enabled) {
+		Button okButton = getButton(IDialogConstants.OK_ID);
+		if (okButton != null && !okButton.isDisposed()) {
+			okButton.setEnabled(enabled);
+		}
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java
index 1afaa1c..05039c9 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java
@@ -12,6 +12,7 @@ package org.eclipse.equinox.internal.p2.ui.sdk;
 
 import org.eclipse.equinox.internal.p2.ui.sdk.prefs.PreferenceConstants;
 import org.eclipse.equinox.p2.engine.Profile;
+import org.eclipse.equinox.p2.ui.IProfileChooser;
 import org.eclipse.equinox.p2.ui.IRepositoryManipulator;
 import org.eclipse.equinox.p2.ui.dialogs.UpdateAndInstallGroup;
 import org.eclipse.jface.dialogs.*;
@@ -21,6 +22,7 @@ import org.eclipse.jface.preference.PreferenceDialog;
 import org.eclipse.jface.resource.JFaceResources;
 import org.eclipse.jface.util.IPropertyChangeListener;
 import org.eclipse.jface.util.PropertyChangeEvent;
+import org.eclipse.jface.window.Window;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.events.*;
 import org.eclipse.swt.graphics.FontMetrics;
@@ -39,7 +41,7 @@ public class UpdateAndInstallDialog extends TrayDialog {
 
 	private static final String DIALOG_SETTINGS_SECTION = "UpdateAndInstallDialog"; //$NON-NLS-1$
 	private static final String SELECTED_TAB_SETTING = "SelectedTab"; //$NON-NLS-1$
-	private Profile profile;
+	Profile profile;
 	UpdateAndInstallGroup group;
 
 	/**
@@ -69,7 +71,7 @@ public class UpdateAndInstallDialog extends TrayDialog {
 		FontMetrics fontMetrics = gc.getFontMetrics();
 		gc.dispose();
 
-		group = new UpdateAndInstallGroup(comp, profile, ProvSDKMessages.UpdateAndInstallDialog_InstalledFeatures, ProvSDKMessages.UpdateAndInstallDialog_AvailableFeatures, getRepositoryManipulator(), null, ProvSDKUIActivator.getDefault().getQueryProvider(), fontMetrics);
+		group = new UpdateAndInstallGroup(comp, profile, ProvSDKMessages.UpdateAndInstallDialog_InstalledFeatures, ProvSDKMessages.UpdateAndInstallDialog_AvailableFeatures, getRepositoryManipulator(), getProfileChooser(), ProvSDKUIActivator.getDefault().getQueryProvider(), fontMetrics);
 		final Button checkBox = new Button(comp, SWT.CHECK);
 		final IPreferenceStore store = ProvSDKUIActivator.getDefault().getPreferenceStore();
 		checkBox.setText(ProvSDKMessages.UpdateAndInstallDialog_AlertCheckbox);
@@ -136,6 +138,21 @@ public class UpdateAndInstallDialog extends TrayDialog {
 		};
 	}
 
+	private IProfileChooser getProfileChooser() {
+		return new IProfileChooser() {
+			public String getLabel() {
+				return ProvSDKMessages.UpdateAndInstallDialog_RevertActionLabel;
+
+			}
+
+			public Profile getProfile(Shell shell) {
+				if (new RevertDialog(shell, profile).open() == Window.OK)
+					return profile;
+				return null;
+			}
+		};
+	}
+
 	protected void okPressed() {
 		saveDialogSettings();
 		super.okPressed();
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateHandler.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateHandler.java
index 0c8b670..0ed03b6 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateHandler.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateHandler.java
@@ -18,7 +18,7 @@ import org.eclipse.swt.widgets.Shell;
 import org.eclipse.ui.handlers.HandlerUtil;
 
 /**
- * AutomaticUpdatesPopup invokes the new provisioning update UI.
+ * UpdateHandler invokes the main update/install UI.
  * 
  * @since 3.4
  */
@@ -45,8 +45,7 @@ public class UpdateHandler extends AbstractHandler {
 			message = ProvSDKMessages.UpdateHandler_NoProfilesDefined;
 		}
 		if (profile != null) {
-			UpdateAndInstallDialog dialog = new UpdateAndInstallDialog(shell, profile);
-			dialog.open();
+			openDialog(shell, profile);
 		} else {
 			if (message == null)
 				message = ProvSDKMessages.UpdateHandler_NoProfileInstanceDefined;
@@ -54,4 +53,9 @@ public class UpdateHandler extends AbstractHandler {
 		}
 		return null;
 	}
+
+	protected void openDialog(Shell shell, Profile profile) {
+		UpdateAndInstallDialog dialog = new UpdateAndInstallDialog(shell, profile);
+		dialog.open();
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
index b332f68..302ba10 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
@@ -15,6 +15,7 @@ UpdateAndInstallDialog_AlertCheckbox=Automatically check for updates and alert m
 UpdateAndInstallDialog_PrefLink=Specify the update schedule and other <a>Update Preferences</a>
 UpdateAndInstallDialog_Title=Software Updates and Add-ons
 UpdateAndInstallDialog_ManageSites=&Manage sites...
+UpdateAndInstallDialog_RevertActionLabel=&Revert configuration...
 UpdateHandler_SDKUpdateUIMessageTitle=Software Updates
 UpdateHandler_NoProfilesDefined=There are no profiles defined.  Cannot invoke the update UI.
 UpdateHandler_NoProfileInstanceDefined=The software configuration could not be found.  Cannot invoke the update UI.
@@ -25,6 +26,10 @@ RepositoryManipulationDialog_PropertiesButton=Properties...
 RepositoryManipulationDialog_RemoveButton=&Remove
 RepositoryManipulationDialog_RemoveOperationLabel=Remove
 RepositoryManipulationDialog_UpdateSitesDialogTitle=Update Sites
+RevertDialog_RevertError=Error while reverting configuration
+RevertDialog_RevertOperationLabel=Revert configuration
+RevertDialog_SelectMessage=Select a configuration from the list on the left.  The contents of that configuration will be shown on the right.
+RevertDialog_Title=Revert Software Configuration
 SchedulerStartup_day=Every day
 SchedulerStartup_Monday=Every Monday
 SchedulerStartup_Tuesday=Every Tuesday
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/StaticContentProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/StaticContentProvider.java
deleted file mode 100644
index 5cc2908..0000000
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/StaticContentProvider.java
+++ /dev/null
@@ -1,35 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-
-package org.eclipse.equinox.internal.p2.ui.model;
-
-import org.eclipse.jface.viewers.IStructuredContentProvider;
-import org.eclipse.jface.viewers.Viewer;
-
-public final class StaticContentProvider implements IStructuredContentProvider {
-	private final Object[] elements;
-
-	public StaticContentProvider(Object[] elements) {
-		this.elements = elements;
-	}
-
-	public Object[] getElements(Object inputElement) {
-		return elements;
-	}
-
-	public void dispose() {
-		// nothing to dispose
-	}
-
-	public void inputChanged(Viewer viewer, Object oldInput, Object newInput) {
-		// input is static
-	}
-}
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/IProfileChooser.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/IProfileChooser.java
index b814439..7b4f4c3 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/IProfileChooser.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/IProfileChooser.java
@@ -11,6 +11,7 @@
 package org.eclipse.equinox.p2.ui;
 
 import org.eclipse.equinox.p2.engine.Profile;
+import org.eclipse.swt.widgets.Shell;
 
 /**
  * Interface for a mechanism that chooses a profile from the profile registry.
@@ -25,7 +26,7 @@ public interface IProfileChooser {
 	 * Return a chosen profile, or <code>null</code> if there is no profile
 	 * chosen.
 	 */
-	public Profile getProfile();
+	public Profile getProfile(Shell shell);
 
 	/**
 	 * Return a String that could be used to label this chooser.
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/ProfileModificationAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/ProfileModificationAction.java
index b0cf790..806c35e 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/ProfileModificationAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/ProfileModificationAction.java
@@ -41,7 +41,7 @@ abstract class ProfileModificationAction extends ProvisioningAction {
 		// viewer element that can tell us.
 		Profile targetProfile = profile;
 		if (targetProfile == null && profileChooser != null) {
-			targetProfile = profileChooser.getProfile();
+			targetProfile = profileChooser.getProfile(getShell());
 		}
 		// We could not figure out a profile to operate on, so return
 		if (targetProfile == null) {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/ProfileModificationDialog.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/ProfileModificationDialog.java
index 66d2821..19b20b9 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/ProfileModificationDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/ProfileModificationDialog.java
@@ -17,15 +17,13 @@ import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.SubMonitor;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.model.AvailableIUElement;
-import org.eclipse.equinox.internal.p2.ui.model.StaticContentProvider;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.ui.ProvUI;
 import org.eclipse.equinox.p2.ui.ProvisioningOperationRunner;
 import org.eclipse.equinox.p2.ui.model.IUElement;
 import org.eclipse.equinox.p2.ui.operations.ProfileModificationOperation;
-import org.eclipse.equinox.p2.ui.viewers.IUColumnConfig;
-import org.eclipse.equinox.p2.ui.viewers.IUDetailsLabelProvider;
+import org.eclipse.equinox.p2.ui.viewers.*;
 import org.eclipse.jface.dialogs.*;
 import org.eclipse.jface.dialogs.Dialog;
 import org.eclipse.jface.operation.IRunnableWithProgress;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateAndInstallGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateAndInstallGroup.java
index c4bb60a..60a29dd 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateAndInstallGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateAndInstallGroup.java
@@ -74,6 +74,8 @@ public class UpdateAndInstallGroup {
 		this.fm = fm;
 		GridData gd = new GridData(SWT.FILL, SWT.FILL, true, true);
 		gd.heightHint = convertVerticalDLUsToPixels(DEFAULT_HEIGHT);
+		gd.grabExcessHorizontalSpace = true;
+		gd.grabExcessVerticalSpace = true;
 		tabFolder.setLayoutData(gd);
 
 		// Installed IU's
@@ -288,15 +290,14 @@ public class UpdateAndInstallGroup {
 			Button profileButton = createVerticalButton(composite, profileChooser.getLabel(), false);
 			profileButton.setData(BUTTONACTION, new Action() {
 				public void runWithEvent(Event event) {
-					Profile chosenProfile = profileChooser.getProfile();
+					Profile chosenProfile = profileChooser.getProfile(tabFolder.getShell());
 					if (chosenProfile != null) {
 						profile = chosenProfile;
-						installedIUViewer.setInput(profile);
+						installedIUViewer.setInput(new ProfileElement(profile));
 					}
 				}
 			});
 		}
-
 		return composite;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/RollbackProfileElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/RollbackProfileElement.java
new file mode 100644
index 0000000..c8011d1
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/RollbackProfileElement.java
@@ -0,0 +1,84 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.p2.ui.model;
+
+import java.text.DateFormat;
+import java.util.*;
+import org.eclipse.equinox.internal.p2.ui.model.ProvElement;
+import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.metadata.RequiredCapability;
+import org.eclipse.equinox.p2.ui.ProvUIImages;
+
+/**
+ * Element wrapper class for IU's that represent categories of
+ * available IU's
+ * 
+ * @since 3.4
+ */
+public class RollbackProfileElement extends ProvElement implements IUElement {
+
+	private IInstallableUnit iu;
+
+	public RollbackProfileElement(IInstallableUnit iu) {
+		this.iu = iu;
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * 
+	 * @see org.eclipse.equinox.p2.ui.model.ProvElement#getImageID(java.lang.Object)
+	 */
+	protected String getImageID(Object obj) {
+		return ProvUIImages.IMG_PROFILE;
+	}
+
+	public String getLabel(Object o) {
+		return DateFormat.getInstance().format(new Date(Long.decode(iu.getVersion().getQualifier()).longValue()));
+	}
+
+	public Object getAdapter(Class adapter) {
+		if (adapter == IInstallableUnit.class)
+			return iu;
+		return super.getAdapter(adapter);
+	}
+
+	public IInstallableUnit getIU() {
+		return iu;
+	}
+
+	public long getSize() {
+		return SIZE_UNKNOWN;
+	}
+
+	public boolean shouldShowSize() {
+		return false;
+	}
+
+	public boolean shouldShowVersion() {
+		return false;
+	}
+
+	public Object[] getChildren(Object o) {
+		RequiredCapability[] reqs = iu.getRequiredCapabilities();
+		List roots = new ArrayList(reqs.length);
+		// TODO we really want to filter out install roots
+		// See https://bugs.eclipse.org/bugs/show_bug.cgi?id=197701
+		for (int i = 0; i < reqs.length; i++)
+			if (IInstallableUnit.NAMESPACE_IU.equals(reqs[i].getNamespace()))
+				roots.add(reqs[i]);
+		return roots.toArray();
+	}
+
+	public Object getParent(Object o) {
+		return null;
+	}
+
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/RollbackRepositoryElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/RollbackRepositoryElement.java
new file mode 100644
index 0000000..07418b7
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/RollbackRepositoryElement.java
@@ -0,0 +1,33 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.p2.ui.model;
+
+import org.eclipse.equinox.p2.engine.Profile;
+import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
+
+/**
+ * Element wrapper class for a rollback repository.
+ * 
+ * @since 3.4
+ */
+public class RollbackRepositoryElement extends MetadataRepositoryElement {
+
+	Profile profile;
+
+	public RollbackRepositoryElement(IMetadataRepository repo, Profile profile) {
+		super(repo);
+		this.profile = profile;
+	}
+
+	public Profile getProfile() {
+		return profile;
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/AvailableIUCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/AvailableIUCollector.java
index 08f9933..ccf27c6 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/AvailableIUCollector.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/AvailableIUCollector.java
@@ -15,6 +15,7 @@ import org.eclipse.equinox.internal.p2.ui.model.ProvElement;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.query.IQueryable;
 import org.eclipse.equinox.p2.ui.model.CategoryElement;
+import org.eclipse.equinox.p2.ui.model.IUElement;
 
 /**
  * Collector that examines available IU's and wraps them in an
@@ -48,7 +49,7 @@ public class AvailableIUCollector extends QueriedElementCollector {
 	}
 
 	protected ProvElement makeDefaultElement(IInstallableUnit iu) {
-		return new AvailableIUElement(iu, AvailableIUElement.SIZE_UNKNOWN);
+		return new AvailableIUElement(iu, IUElement.SIZE_UNKNOWN);
 	}
 
 	protected boolean isCategory(IInstallableUnit iu) {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/RollbackIUCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/RollbackIUCollector.java
new file mode 100644
index 0000000..2cccff5
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/RollbackIUCollector.java
@@ -0,0 +1,33 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.p2.ui.query;
+
+import org.eclipse.equinox.internal.p2.ui.model.ProvElement;
+import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.query.IQueryable;
+import org.eclipse.equinox.p2.ui.model.RollbackProfileElement;
+
+/**
+ * Collector that examines available IU's and wraps them in an
+ * element representing either a category an IU.
+ *  
+ * @since 3.4
+ */
+public class RollbackIUCollector extends AvailableIUCollector {
+
+	public RollbackIUCollector(IProvElementQueryProvider queryProvider, IQueryable queryable) {
+		super(queryProvider, queryable, false);
+	}
+
+	protected ProvElement makeDefaultElement(IInstallableUnit iu) {
+		return new RollbackProfileElement(iu);
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/ProvElementLabelProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/ProvElementLabelProvider.java
index 031c66f..bfc0010 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/ProvElementLabelProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/ProvElementLabelProvider.java
@@ -16,8 +16,7 @@ import org.eclipse.equinox.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.p2.artifact.repository.processing.ProcessingStepDescriptor;
 import org.eclipse.equinox.p2.core.repository.IRepository;
 import org.eclipse.equinox.p2.engine.Profile;
-import org.eclipse.equinox.p2.metadata.IArtifactKey;
-import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.metadata.*;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.p2.ui.ProvUI;
 import org.eclipse.equinox.p2.ui.ProvUIImages;
@@ -64,6 +63,9 @@ public class ProvElementLabelProvider extends LabelProvider implements ITableLab
 			ProcessingStepDescriptor descriptor = (ProcessingStepDescriptor) obj;
 			return descriptor.getProcessorId();
 		}
+		if (obj instanceof RequiredCapability) {
+			return ((RequiredCapability) obj).getName();
+		}
 		return obj.toString();
 	}
 
@@ -86,6 +88,9 @@ public class ProvElementLabelProvider extends LabelProvider implements ITableLab
 		if (obj instanceof IArtifactKey) {
 			return PlatformUI.getWorkbench().getSharedImages().getImage(ISharedImages.IMG_OBJ_FILE);
 		}
+		if (obj instanceof RequiredCapability) {
+			return ProvUIImages.getImage(ProvUIImages.IMG_UNINSTALLED_IU);
+		}
 		return null;
 	}
 
@@ -125,6 +130,10 @@ public class ProvElementLabelProvider extends LabelProvider implements ITableLab
 					IArtifactKey key = (IArtifactKey) element;
 					return key.getVersion().toString();
 				}
+				if (element instanceof RequiredCapability) {
+					return ((RequiredCapability) element).getRange().getMaximum().toString();
+				}
+
 		}
 		return null;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/StaticContentProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/StaticContentProvider.java
new file mode 100644
index 0000000..d0688f3
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/StaticContentProvider.java
@@ -0,0 +1,36 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+
+package org.eclipse.equinox.p2.ui.viewers;
+
+import org.eclipse.jface.viewers.IStructuredContentProvider;
+import org.eclipse.jface.viewers.Viewer;
+
+public final class StaticContentProvider implements IStructuredContentProvider {
+	private Object[] elements;
+
+	public StaticContentProvider(Object[] elements) {
+		this.elements = elements;
+	}
+
+	public Object[] getElements(Object inputElement) {
+		return elements;
+	}
+
+	public void dispose() {
+		// nothing to dispose
+	}
+
+	public void inputChanged(Viewer viewer, Object oldInput, Object newInput) {
+		if (newInput instanceof Object[])
+			this.elements = (Object[]) newInput;
+	}
+}
\ No newline at end of file
commit 8f04859092162812fedd75acc37135dac6b91009
Author: Susan Franklin <sfranklin>
Date:   Wed Dec 5 18:03:47 2007 +0000

    Bug 205223 - [prov] [ui] UI for revert - move to wizard style

1	0	bundles/org.eclipse.equinox.p2.ui.admin.rcp/ProvAdminUI.launch
5	0	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
0	211	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RevertDialog.java
41	0	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RevertProfileWizard.java
226	0	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RevertProfileWizardPage.java
10	2	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java
5	0	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
1	1	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdatesPopup.java
-	-	bundles/org.eclipse.equinox.p2.ui/icons/wizban/config_wiz.gif
-	-	bundles/org.eclipse.equinox.p2.ui/icons/wizban/revert_wiz.gif
4	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvUIActivator.java
6	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvUIImages.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin.rcp/ProvAdminUI.launch b/bundles/org.eclipse.equinox.p2.ui.admin.rcp/ProvAdminUI.launch
index a4e97ec..a85dc83 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin.rcp/ProvAdminUI.launch
+++ b/bundles/org.eclipse.equinox.p2.ui.admin.rcp/ProvAdminUI.launch
@@ -17,6 +17,7 @@
 <stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.pde.ui.workbenchClasspathProvider"/>
 <stringAttribute key="org.eclipse.jdt.launching.VM_ARGUMENTS" value="-Declipse.p2.data.area=c:/equinox.p2/agentData/"/>
 <stringAttribute key="pde.version" value="3.3"/>
+<booleanAttribute key="restart" value="false"/>
 <booleanAttribute key="show_selected_only" value="false"/>
 <stringAttribute key="target_bundles" value="com.ibm.icu@default:default,org.eclipse.core.commands@default:default,org.eclipse.core.contenttype@default:default,org.eclipse.core.databinding@default:default,org.eclipse.core.expressions@default:default,org.eclipse.core.jobs@default:default,org.eclipse.core.runtime@default:default,org.eclipse.equinox.app@default:true,org.eclipse.equinox.common@default:default,org.eclipse.equinox.launcher@default:default,org.eclipse.equinox.launcher.win32.win32.x86@default:default,org.eclipse.equinox.preferences@default:default,org.eclipse.equinox.registry@default:default,org.eclipse.help@default:default,org.eclipse.jface@default:default,org.eclipse.jface.databinding@default:default,org.eclipse.osgi.services@default:default,org.eclipse.swt@default:default,org.eclipse.swt.win32.win32.x86@default:default,org.eclipse.ui@default:default,org.eclipse.ui.workbench@default:default"/>
 <booleanAttribute key="tracing" value="false"/>
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
index 8fc5f29..bee47f8 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
@@ -32,6 +32,11 @@ public class ProvSDKMessages extends NLS {
 	public static String RepositoryManipulationDialog_RemoveButton;
 	public static String RepositoryManipulationDialog_RemoveOperationLabel;
 	public static String RepositoryManipulationDialog_UpdateSitesDialogTitle;
+	public static String RevertDialog_ConfigContentsLabel;
+	public static String RevertDialog_ConfigsLabel;
+	public static String RevertDialog_ConfirmRestartMessage;
+	public static String RevertDialog_Description;
+	public static String RevertDialog_PageTitle;
 	public static String RevertDialog_RevertError;
 	public static String RevertDialog_RevertOperationLabel;
 	public static String RevertDialog_SelectMessage;
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RevertDialog.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RevertDialog.java
deleted file mode 100644
index 7e1f96e..0000000
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RevertDialog.java
+++ /dev/null
@@ -1,211 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.p2.ui.sdk;
-
-import java.lang.reflect.InvocationTargetException;
-import java.util.Comparator;
-import org.eclipse.core.runtime.IProgressMonitor;
-import org.eclipse.core.runtime.jobs.Job;
-import org.eclipse.equinox.p2.core.ProvisionException;
-import org.eclipse.equinox.p2.director.ProvisioningPlan;
-import org.eclipse.equinox.p2.engine.Profile;
-import org.eclipse.equinox.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.ui.ProvUI;
-import org.eclipse.equinox.p2.ui.ProvisioningOperationRunner;
-import org.eclipse.equinox.p2.ui.model.RollbackProfileElement;
-import org.eclipse.equinox.p2.ui.model.RollbackRepositoryElement;
-import org.eclipse.equinox.p2.ui.operations.*;
-import org.eclipse.equinox.p2.ui.viewers.*;
-import org.eclipse.jface.dialogs.*;
-import org.eclipse.jface.dialogs.Dialog;
-import org.eclipse.jface.operation.IRunnableWithProgress;
-import org.eclipse.jface.viewers.*;
-import org.eclipse.swt.SWT;
-import org.eclipse.swt.layout.GridData;
-import org.eclipse.swt.layout.GridLayout;
-import org.eclipse.swt.widgets.*;
-import org.eclipse.ui.PlatformUI;
-
-/**
- * Dialog that allows users to update their installed IU's or find new ones.
- * 
- * @since 3.4
- */
-public class RevertDialog extends TrayDialog {
-
-	private static final String DIALOG_SETTINGS_SECTION = "RevertDialog"; //$NON-NLS-1$
-	private static final int DEFAULT_COLUMN_WIDTH = 150;
-
-	Profile profile;
-	TableViewer configsViewer;
-	TableViewer configContentsViewer;
-
-	/**
-	 * Create an instance of this Dialog.
-	 * 
-	 */
-	public RevertDialog(Shell shell, Profile profile) {
-		super(shell);
-		this.profile = profile;
-		setShellStyle(SWT.DIALOG_TRIM | SWT.MODELESS | SWT.MAX | SWT.RESIZE | getDefaultOrientation());
-		setBlockOnOpen(false);
-	}
-
-	protected void configureShell(Shell shell) {
-		shell.setText(ProvSDKMessages.RevertDialog_Title);
-		super.configureShell(shell);
-	}
-
-	protected Control createDialogArea(Composite parent) {
-		Composite comp = new Composite(parent, SWT.NONE);
-		GridLayout layout = new GridLayout();
-		layout.numColumns = 2;
-		comp.setLayout(layout);
-		GridData gd = new GridData(SWT.FILL, SWT.FILL, true, true);
-		comp.setLayoutData(gd);
-		Label label = new Label(comp, SWT.WRAP);
-		label.setText(ProvSDKMessages.RevertDialog_SelectMessage);
-		gd = new GridData();
-		gd.horizontalSpan = 2;
-		label.setLayoutData(gd);
-
-		configsViewer = new TableViewer(comp, SWT.FULL_SELECTION | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
-		configsViewer.setContentProvider(new RepositoryContentProvider(ProvSDKUIActivator.getDefault().getQueryProvider()));
-		configsViewer.setInput(getInput());
-		configsViewer.setLabelProvider(new ProvElementLabelProvider());
-		configsViewer.setComparator(new ViewerComparator(new Comparator() {
-			// This comparator sorts in reverse order so that we see the newest configs first
-			public int compare(Object o1, Object o2) {
-				return ((String) o2).compareTo((String) o1);
-			}
-		}));
-		configsViewer.addSelectionChangedListener(new ISelectionChangedListener() {
-			public void selectionChanged(SelectionChangedEvent event) {
-				RevertDialog.this.selectionChanged((IStructuredSelection) event.getSelection());
-			}
-
-		});
-		gd = new GridData(GridData.FILL_BOTH);
-		configsViewer.getControl().setLayoutData(gd);
-
-		configContentsViewer = new TableViewer(comp, SWT.MULTI | SWT.FULL_SELECTION | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
-		configContentsViewer.setContentProvider(new StaticContentProvider(new Object[0]));
-		configContentsViewer.setInput(new Object[0]);
-		configContentsViewer.setLabelProvider(new ProvElementLabelProvider());
-		configContentsViewer.setComparator(new ViewerComparator());
-		setTableColumns(configContentsViewer.getTable());
-		gd = new GridData(GridData.FILL_BOTH);
-		gd.grabExcessHorizontalSpace = true;
-		gd.grabExcessVerticalSpace = true;
-		configContentsViewer.getControl().setLayoutData(gd);
-
-		selectionChanged((IStructuredSelection) configsViewer.getSelection());
-		Dialog.applyDialogFont(comp);
-		return comp;
-	}
-
-	/*
-	 * (non-Javadoc)
-	 * 
-	 * @see org.eclipse.jface.dialogs.Dialog#isResizable()
-	 */
-	protected boolean isResizable() {
-		return true;
-	}
-
-	protected void okPressed() {
-		revert();
-		super.okPressed();
-	}
-
-	protected IDialogSettings getDialogBoundsSettings() {
-		IDialogSettings settings = ProvSDKUIActivator.getDefault().getDialogSettings();
-		IDialogSettings section = settings.getSection(DIALOG_SETTINGS_SECTION);
-		if (section == null) {
-			section = settings.addNewSection(DIALOG_SETTINGS_SECTION);
-		}
-		return section;
-	}
-
-	private void revert() {
-		final IInstallableUnit iu = getSelectedIU();
-		if (iu == null)
-			return;
-		final ProvisioningPlan[] plan = new ProvisioningPlan[1];
-		IRunnableWithProgress runnable = new IRunnableWithProgress() {
-			public void run(IProgressMonitor monitor) {
-				try {
-					plan[0] = ProvisioningUtil.getBecomePlan(iu, profile, monitor);
-				} catch (ProvisionException e) {
-					ProvUI.handleException(e, ProvSDKMessages.RevertDialog_RevertError);
-				}
-			}
-		};
-		try {
-			PlatformUI.getWorkbench().getProgressService().busyCursorWhile(runnable);
-			ProvisioningOperation op = new ProfileModificationOperation(ProvSDKMessages.RevertDialog_RevertOperationLabel, profile.getProfileId(), plan[0]);
-			Job job = ProvisioningOperationRunner.schedule(op, getShell());
-			job.join();
-		} catch (InterruptedException e) {
-			// don't report thread interruption
-		} catch (InvocationTargetException e) {
-			ProvUI.handleException(e.getCause(), ProvSDKMessages.RevertDialog_RevertError);
-		}
-
-	}
-
-	private Object getInput() {
-		try {
-			RollbackRepositoryElement element = new RollbackRepositoryElement(ProvisioningUtil.getRollbackRepository(null), profile);
-			element.setQueryProvider(ProvSDKUIActivator.getDefault().getQueryProvider());
-			return element;
-		} catch (ProvisionException e) {
-			ProvUI.handleException(e, null);
-			return null;
-		}
-	}
-
-	void selectionChanged(IStructuredSelection selection) {
-		if (selection.isEmpty()) {
-			setEnabled(false);
-		} else {
-			setEnabled(true);
-			Object selected = selection.getFirstElement();
-			if (selected instanceof RollbackProfileElement)
-				configContentsViewer.setInput(((RollbackProfileElement) selected).getChildren(null));
-		}
-	}
-
-	private void setTableColumns(Table table) {
-		IUColumnConfig[] columns = ProvUI.getIUColumnConfig();
-
-		for (int i = 0; i < columns.length; i++) {
-			TableColumn tc = new TableColumn(table, SWT.NONE, i);
-			tc.setResizable(true);
-			tc.setText(columns[i].columnTitle);
-			tc.setWidth(convertHorizontalDLUsToPixels(DEFAULT_COLUMN_WIDTH));
-		}
-	}
-
-	private IInstallableUnit getSelectedIU() {
-		Object selected = ((IStructuredSelection) configsViewer.getSelection()).getFirstElement();
-		if (selected != null && selected instanceof RollbackProfileElement)
-			return ((RollbackProfileElement) selected).getIU();
-		return null;
-	}
-
-	private void setEnabled(boolean enabled) {
-		Button okButton = getButton(IDialogConstants.OK_ID);
-		if (okButton != null && !okButton.isDisposed()) {
-			okButton.setEnabled(enabled);
-		}
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RevertProfileWizard.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RevertProfileWizard.java
new file mode 100644
index 0000000..1712fdd
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RevertProfileWizard.java
@@ -0,0 +1,41 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.ui.sdk;
+
+import org.eclipse.equinox.p2.engine.Profile;
+import org.eclipse.equinox.p2.ui.ProvUIImages;
+import org.eclipse.jface.wizard.Wizard;
+
+/**
+ * @since 3.4
+ */
+public class RevertProfileWizard extends Wizard {
+
+	RevertProfileWizardPage page;
+	Profile profile;
+
+	public RevertProfileWizard(Profile profile) {
+		super();
+		setWindowTitle(ProvSDKMessages.RevertDialog_Title);
+		setDefaultPageImageDescriptor(ProvUIImages.getImageDescriptor(ProvUIImages.WIZARD_BANNER_REVERT));
+		this.profile = profile;
+	}
+
+	public void addPages() {
+		page = new RevertProfileWizardPage(profile);
+		addPage(page);
+	}
+
+	public boolean performFinish() {
+		return page.performFinish();
+	}
+
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RevertProfileWizardPage.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RevertProfileWizardPage.java
new file mode 100644
index 0000000..abaf2d5
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/RevertProfileWizardPage.java
@@ -0,0 +1,226 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.ui.sdk;
+
+import java.lang.reflect.InvocationTargetException;
+import java.util.Comparator;
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.jobs.Job;
+import org.eclipse.equinox.p2.core.ProvisionException;
+import org.eclipse.equinox.p2.director.ProvisioningPlan;
+import org.eclipse.equinox.p2.engine.Profile;
+import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.ui.ProvUI;
+import org.eclipse.equinox.p2.ui.ProvisioningOperationRunner;
+import org.eclipse.equinox.p2.ui.model.RollbackProfileElement;
+import org.eclipse.equinox.p2.ui.model.RollbackRepositoryElement;
+import org.eclipse.equinox.p2.ui.operations.*;
+import org.eclipse.equinox.p2.ui.viewers.*;
+import org.eclipse.jface.dialogs.*;
+import org.eclipse.jface.dialogs.Dialog;
+import org.eclipse.jface.operation.IRunnableWithProgress;
+import org.eclipse.jface.viewers.*;
+import org.eclipse.jface.wizard.WizardPage;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.custom.SashForm;
+import org.eclipse.swt.layout.GridData;
+import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.widgets.*;
+import org.eclipse.ui.PlatformUI;
+
+/**
+ * @since 3.4
+ */
+public class RevertProfileWizardPage extends WizardPage {
+
+	Profile profile;
+	private TableViewer configsViewer;
+	private TableViewer configContentsViewer;
+	private SashForm sashForm;
+	private static final String DIALOG_SETTINGS_SECTION = "RevertDialog"; //$NON-NLS-1$
+	private static final int DEFAULT_COLUMN_WIDTH = 150;
+
+	public RevertProfileWizardPage(Profile profile) {
+		super("RevertConfiguration"); //$NON-NLS-1$
+		setTitle(ProvSDKMessages.RevertDialog_PageTitle);
+		setDescription(ProvSDKMessages.RevertDialog_Description);
+		this.profile = profile;
+
+	}
+
+	public void createControl(Composite parent) {
+		sashForm = new SashForm(parent, SWT.HORIZONTAL);
+		sashForm.setLayout(new GridLayout());
+		sashForm.setLayoutData(new GridData(GridData.FILL_BOTH));
+		initializeDialogUnits(sashForm);
+
+		createConfigurationsSection(sashForm);
+		createContentsSection(sashForm);
+		setControl(sashForm);
+
+		Object element = configsViewer.getElementAt(0);
+		if (element != null)
+			configsViewer.setSelection(new StructuredSelection(element));
+		Dialog.applyDialogFont(sashForm);
+	}
+
+	private void createConfigurationsSection(Composite parent) {
+		Composite composite = new Composite(parent, SWT.NONE);
+		GridLayout layout = new GridLayout();
+		layout.marginWidth = 0;
+		layout.marginHeight = 0;
+		composite.setLayout(layout);
+		GridData gd = new GridData(GridData.FILL_BOTH);
+		composite.setLayoutData(gd);
+
+		Label label = new Label(composite, SWT.NONE);
+		label.setText(ProvSDKMessages.RevertDialog_ConfigsLabel);
+		configsViewer = new TableViewer(composite, SWT.FULL_SELECTION | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
+		configsViewer.setContentProvider(new RepositoryContentProvider(ProvSDKUIActivator.getDefault().getQueryProvider()));
+		configsViewer.setInput(getInput());
+		configsViewer.setLabelProvider(new ProvElementLabelProvider());
+		configsViewer.setComparator(new ViewerComparator(new Comparator() {
+			// This comparator sorts in reverse order so that we see the newest configs first
+			public int compare(Object o1, Object o2) {
+				return ((String) o2).compareTo((String) o1);
+			}
+		}));
+		configsViewer.addSelectionChangedListener(new ISelectionChangedListener() {
+			public void selectionChanged(SelectionChangedEvent event) {
+				handleSelectionChanged((IStructuredSelection) event.getSelection());
+			}
+
+		});
+		gd = new GridData(GridData.FILL_BOTH);
+		configsViewer.getControl().setLayoutData(gd);
+	}
+
+	private void createContentsSection(Composite parent) {
+		Composite composite = new Composite(parent, SWT.NONE);
+		GridLayout layout = new GridLayout();
+		layout.marginWidth = 0;
+		layout.marginHeight = 0;
+		composite.setLayout(layout);
+		GridData gd = new GridData(GridData.FILL_BOTH);
+		composite.setLayoutData(gd);
+
+		Label label = new Label(composite, SWT.NONE);
+		label.setText(ProvSDKMessages.RevertDialog_ConfigContentsLabel);
+		configContentsViewer = new TableViewer(composite, SWT.MULTI | SWT.FULL_SELECTION | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
+		configContentsViewer.setContentProvider(new StaticContentProvider(new Object[0]));
+		configContentsViewer.setInput(new Object[0]);
+		configContentsViewer.setLabelProvider(new ProvElementLabelProvider());
+		configContentsViewer.setComparator(new ViewerComparator());
+		setTableColumns(configContentsViewer.getTable());
+		gd = new GridData(GridData.FILL_BOTH);
+		configContentsViewer.getControl().setLayoutData(gd);
+
+	}
+
+	private Object getInput() {
+		try {
+			RollbackRepositoryElement element = new RollbackRepositoryElement(ProvisioningUtil.getRollbackRepository(null), profile);
+			element.setQueryProvider(ProvSDKUIActivator.getDefault().getQueryProvider());
+			return element;
+		} catch (ProvisionException e) {
+			ProvUI.handleException(e, null);
+			return null;
+		}
+	}
+
+	void handleSelectionChanged(IStructuredSelection selection) {
+		if (!selection.isEmpty()) {
+			Object selected = selection.getFirstElement();
+			if (selected instanceof RollbackProfileElement)
+				configContentsViewer.setInput(((RollbackProfileElement) selected).getChildren(null));
+		}
+	}
+
+	private void setTableColumns(Table table) {
+		IUColumnConfig[] columns = ProvUI.getIUColumnConfig();
+
+		for (int i = 0; i < columns.length; i++) {
+			TableColumn tc = new TableColumn(table, SWT.NONE, i);
+			tc.setResizable(true);
+			tc.setText(columns[i].columnTitle);
+			tc.setWidth(convertHorizontalDLUsToPixels(DEFAULT_COLUMN_WIDTH));
+		}
+	}
+
+	private IInstallableUnit getSelectedIU() {
+		Object selected = ((IStructuredSelection) configsViewer.getSelection()).getFirstElement();
+		if (selected != null && selected instanceof RollbackProfileElement)
+			return ((RollbackProfileElement) selected).getIU();
+		return null;
+	}
+
+	public boolean performFinish() {
+		Shell shell = getContainer().getShell();
+		boolean result = MessageDialog.openQuestion(shell, shell.getText(), ProvSDKMessages.RevertDialog_ConfirmRestartMessage);
+		if (!result)
+			return false;
+
+		boolean finish = revert();
+		if (finish) {
+			PlatformUI.getWorkbench().restart();
+		}
+		return finish;
+	}
+
+	private boolean revert() {
+		final IInstallableUnit iu = getSelectedIU();
+		if (iu == null)
+			return false;
+		final ProvisioningPlan[] plan = new ProvisioningPlan[1];
+		IRunnableWithProgress runnable = new IRunnableWithProgress() {
+			public void run(IProgressMonitor monitor) {
+				try {
+					plan[0] = ProvisioningUtil.getBecomePlan(iu, profile, monitor);
+				} catch (ProvisionException e) {
+					ProvUI.handleException(e, ProvSDKMessages.RevertDialog_RevertError);
+				}
+			}
+		};
+		try {
+			getContainer().run(true, true, runnable);
+			ProvisioningOperation op = new ProfileModificationOperation(ProvSDKMessages.RevertDialog_RevertOperationLabel, profile.getProfileId(), plan[0]);
+			Job job = ProvisioningOperationRunner.schedule(op, getShell());
+			job.join();
+		} catch (InterruptedException e) {
+			// don't report thread interruption
+		} catch (InvocationTargetException e) {
+			ProvUI.handleException(e.getCause(), ProvSDKMessages.RevertDialog_RevertError);
+		}
+		return true;
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * 
+	 * @see org.eclipse.jface.dialogs.Dialog#isResizable()
+	 */
+	protected boolean isResizable() {
+		return true;
+	}
+
+	protected IDialogSettings getDialogBoundsSettings() {
+		IDialogSettings settings = ProvSDKUIActivator.getDefault().getDialogSettings();
+		IDialogSettings section = settings.getSection(DIALOG_SETTINGS_SECTION);
+		if (section == null) {
+			section = settings.addNewSection(DIALOG_SETTINGS_SECTION);
+		}
+		return section;
+	}
+
+	public boolean isPageComplete() {
+		return getSelectedIU() != null;
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java
index 05039c9..8de0a70 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java
@@ -23,6 +23,7 @@ import org.eclipse.jface.resource.JFaceResources;
 import org.eclipse.jface.util.IPropertyChangeListener;
 import org.eclipse.jface.util.PropertyChangeEvent;
 import org.eclipse.jface.window.Window;
+import org.eclipse.jface.wizard.WizardDialog;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.events.*;
 import org.eclipse.swt.graphics.FontMetrics;
@@ -67,6 +68,9 @@ public class UpdateAndInstallDialog extends TrayDialog {
 		layout.numColumns = 1;
 		comp.setLayout(layout);
 
+		GridData gd = new GridData(SWT.FILL, SWT.FILL, true, true);
+		comp.setLayoutData(gd);
+
 		gc.setFont(JFaceResources.getDialogFont());
 		FontMetrics fontMetrics = gc.getFontMetrics();
 		gc.dispose();
@@ -98,7 +102,7 @@ public class UpdateAndInstallDialog extends TrayDialog {
 		});
 
 		Link updatePrefsLink = new Link(comp, SWT.LEFT | SWT.WRAP);
-		GridData gd = new GridData();
+		gd = new GridData();
 		gd.horizontalIndent = convertHorizontalDLUsToPixels(IDialogConstants.SMALL_INDENT);
 		updatePrefsLink.setLayoutData(gd);
 		updatePrefsLink.addSelectionListener(new SelectionAdapter() {
@@ -146,7 +150,11 @@ public class UpdateAndInstallDialog extends TrayDialog {
 			}
 
 			public Profile getProfile(Shell shell) {
-				if (new RevertDialog(shell, profile).open() == Window.OK)
+				RevertProfileWizard wizard = new RevertProfileWizard(profile);
+				WizardDialog dialog = new WizardDialog(shell, wizard);
+				dialog.create();
+				dialog.getShell().setSize(600, 500);
+				if (dialog.open() == Window.OK)
 					return profile;
 				return null;
 			}
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
index 302ba10..c4d5310 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
@@ -26,6 +26,11 @@ RepositoryManipulationDialog_PropertiesButton=Properties...
 RepositoryManipulationDialog_RemoveButton=&Remove
 RepositoryManipulationDialog_RemoveOperationLabel=Remove
 RepositoryManipulationDialog_UpdateSitesDialogTitle=Update Sites
+RevertDialog_ConfigContentsLabel=&Configuration contents:
+RevertDialog_ConfigsLabel=&Previous configurations:
+RevertDialog_ConfirmRestartMessage=This operation requires restarting the workbench.  Would you like to proceed?
+RevertDialog_Description=Choose a previously installed configuration to which you would like to revert.
+RevertDialog_PageTitle=Revert to a Previous Configuration
 RevertDialog_RevertError=Error while reverting configuration
 RevertDialog_RevertOperationLabel=Revert configuration
 RevertDialog_SelectMessage=Select a configuration from the list on the left.  The contents of that configuration will be shown on the right.
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdatesPopup.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdatesPopup.java
index 6acb56d..4bcaec7 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdatesPopup.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdatesPopup.java
@@ -60,7 +60,7 @@ public class AutomaticUpdatesPopup extends PopupDialog {
 	StatusLineCLabelContribution item;
 
 	public AutomaticUpdatesPopup(IInstallableUnit[] toUpdate, Profile profile, boolean alreadyDownloaded, Preferences prefs) {
-		super((Shell) null, PopupDialog.INFOPOPUPRESIZE_SHELLSTYLE | SWT.MODELESS, true, true, false, false, ProvSDKMessages.AutomaticUpdatesDialog_UpdatesAvailableTitle, null);
+		super((Shell) null, PopupDialog.INFOPOPUPRESIZE_SHELLSTYLE | SWT.MODELESS, false, true, false, false, ProvSDKMessages.AutomaticUpdatesDialog_UpdatesAvailableTitle, null);
 		downloaded = alreadyDownloaded;
 		this.profile = profile;
 		this.toUpdate = toUpdate;
diff --git a/bundles/org.eclipse.equinox.p2.ui/icons/wizban/config_wiz.gif b/bundles/org.eclipse.equinox.p2.ui/icons/wizban/config_wiz.gif
deleted file mode 100644
index 6a19fbf..0000000
Binary files a/bundles/org.eclipse.equinox.p2.ui/icons/wizban/config_wiz.gif and /dev/null differ
diff --git a/bundles/org.eclipse.equinox.p2.ui/icons/wizban/revert_wiz.gif b/bundles/org.eclipse.equinox.p2.ui/icons/wizban/revert_wiz.gif
new file mode 100644
index 0000000..6a19fbf
Binary files /dev/null and b/bundles/org.eclipse.equinox.p2.ui/icons/wizban/revert_wiz.gif differ
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvUIActivator.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvUIActivator.java
index dda5adf..b872024 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvUIActivator.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvUIActivator.java
@@ -186,6 +186,10 @@ public class ProvUIActivator extends AbstractUIPlugin {
 		createImageDescriptor(ProvUIImages.IMG_CATEGORY);
 		createImageDescriptor(ProvUIImages.IMG_PROFILE);
 		createImageDescriptor(ProvUIImages.IMG_TOOL_UPDATE);
+		createImageDescriptor(ProvUIImages.WIZARD_BANNER_INSTALL);
+		createImageDescriptor(ProvUIImages.WIZARD_BANNER_REVERT);
+		createImageDescriptor(ProvUIImages.WIZARD_BANNER_UNINSTALL);
+		createImageDescriptor(ProvUIImages.WIZARD_BANNER_UPDATE);
 	}
 
 	/**
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvUIImages.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvUIImages.java
index c6fc1f4..4ff7de8 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvUIImages.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvUIImages.java
@@ -41,6 +41,12 @@ public class ProvUIImages {
 	// tools
 	public final static String IMG_TOOL_UPDATE = "tool/update.gif"; //$NON-NLS-1$
 
+	// wizard graphics
+	public final static String WIZARD_BANNER_INSTALL = "wizban/install_wiz.gif"; //$NON-NLS-1$
+	public final static String WIZARD_BANNER_UNINSTALL = "wizban/uninstall_wiz.gif"; //$NON-NLS-1$
+	public final static String WIZARD_BANNER_UPDATE = "wizban/update_wiz.gif"; //$NON-NLS-1$
+	public final static String WIZARD_BANNER_REVERT = "wizban/revert_wiz.gif"; //$NON-NLS-1$
+
 	/**
 	 * Returns the image descriptor for the given image ID. Returns
 	 * <code>null</code> if there is no such image.

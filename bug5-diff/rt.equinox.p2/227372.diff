commit e42a7deb37511bb4c80904915bbee2800f1c7125
Author: Pascal Rapicault <prapicau>
Date:   Tue Apr 29 01:42:01 2008 +0000

    Bug 227372 - Make Collect phase context aware

13	2	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/DownloadManager.java
13	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/InstallableUnitPhase.java
18	2	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/ProvisioningContext.java
2	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Collect.java
5	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Sizing.java
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/DownloadManager.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/DownloadManager.java
index ecc9a38..2aae80c 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/DownloadManager.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/DownloadManager.java
@@ -7,6 +7,7 @@
  *
  * Contributors:
  *     IBM Corporation - initial API and implementation
+ *     WindRiver - https://bugs.eclipse.org/bugs/show_bug.cgi?id=227372
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.engine;
 
@@ -16,9 +17,10 @@ import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.*;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.equinox.internal.provisional.p2.engine.ProvisioningContext;
 
 public class DownloadManager {
-
+	private ProvisioningContext provContext = null;
 	ArrayList requestsToProcess = new ArrayList();
 
 	private static final String FILE_PROTOCOL = "file"; //$NON-NLS-1$
@@ -43,6 +45,10 @@ public class DownloadManager {
 		}
 	};
 
+	public DownloadManager(ProvisioningContext context) {
+		provContext = context;
+	}
+
 	/*
 	 * Add the given artifact to the download queue. When it 
 	 * is downloaded, put it in the specified location.
@@ -74,8 +80,13 @@ public class DownloadManager {
 		try {
 			if (requestsToProcess.isEmpty())
 				return Status.OK_STATUS;
+
 			IArtifactRepositoryManager repoMgr = (IArtifactRepositoryManager) ServiceHelper.getService(EngineActivator.getContext(), IArtifactRepositoryManager.class.getName());
-			URL[] repositories = repoMgr.getKnownRepositories(IArtifactRepositoryManager.REPOSITORIES_ALL);
+			URL[] repositories = null;
+			if (provContext == null || provContext.getArtifactRepositories() == null)
+				repositories = repoMgr.getKnownRepositories(IArtifactRepositoryManager.REPOSITORIES_ALL);
+			else
+				repositories = provContext.getArtifactRepositories();
 			if (repositories.length == 0)
 				return new Status(IStatus.ERROR, EngineActivator.ID, Messages.download_no_repository);
 			Arrays.sort(repositories, LOCAL_FIRST_COMPARATOR);
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/InstallableUnitPhase.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/InstallableUnitPhase.java
index ff62252..ec9add3 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/InstallableUnitPhase.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/InstallableUnitPhase.java
@@ -1,3 +1,14 @@
+/*******************************************************************************
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *     WindRiver - https://bugs.eclipse.org/bugs/show_bug.cgi?id=227372
+ *******************************************************************************/
 package org.eclipse.equinox.internal.provisional.p2.engine;
 
 import java.util.*;
@@ -8,12 +19,12 @@ import org.eclipse.equinox.internal.provisional.p2.metadata.*;
 import org.eclipse.osgi.util.NLS;
 
 public abstract class InstallableUnitPhase extends Phase {
-
 	protected static final String PARM_ARTIFACT_REQUESTS = "artifactRequests"; //$NON-NLS-1$
 	protected static final String PARM_ARTIFACT = "artifact"; //$NON-NLS-1$
 	protected static final String PARM_IU = "iu"; //$NON-NLS-1$
 	protected static final String PARM_TOUCHPOINT = "touchpoint"; //$NON-NLS-1$
 
+	protected ProvisioningContext provContext = null;
 	private Map touchpointToTouchpointParameters;
 
 	protected InstallableUnitPhase(String phaseId, int weight) {
@@ -21,6 +32,7 @@ public abstract class InstallableUnitPhase extends Phase {
 	}
 
 	void perform(MultiStatus status, EngineSession session, IProfile profile, Operand[] operands, ProvisioningContext context, IProgressMonitor monitor) {
+		provContext = context;
 		touchpointToTouchpointParameters = new HashMap();
 		for (int i = 0; i < operands.length; i++) {
 			if (!(operands[i] instanceof InstallableUnitOperand))
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/ProvisioningContext.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/ProvisioningContext.java
index 6b8bf5d..deefdf1 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/ProvisioningContext.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/ProvisioningContext.java
@@ -4,7 +4,9 @@
  * the Eclipse Public License v1.0 which accompanies this distribution, and is
  * available at http://www.eclipse.org/legal/epl-v10.html
  * 
- * Contributors: IBM Corporation - initial API and implementation
+ * Contributors: 
+ * 	IBM Corporation - initial API and implementation
+ *     WindRiver - https://bugs.eclipse.org/bugs/show_bug.cgi?id=227372
  ******************************************************************************/
 package org.eclipse.equinox.internal.provisional.p2.engine;
 
@@ -12,23 +14,37 @@ import java.net.URL;
 import java.util.*;
 
 public class ProvisioningContext {
-	private URL[] metadataRepositories;
+	private URL[] metadataRepositories; //metadata repositories to consult
+	private URL[] artifactRepositories; //artifact repositories to consult
 	private Properties properties = new Properties();
 	private List extraIUs = new ArrayList();
 
 	public ProvisioningContext() {
 		// null repos means look at them all
 		metadataRepositories = null;
+		artifactRepositories = null;
 	}
 
 	public ProvisioningContext(URL[] metadataRepositories) {
 		this.metadataRepositories = metadataRepositories;
 	}
 
+	/**
+	 * Artifact repositories to consult when performing an operation.
+	 * @param artifactRepositories array of URLs
+	*/
+	public void setArtifactRepositories(URL[] artifactRepositories) {
+		this.artifactRepositories = artifactRepositories;
+	}
+
 	public URL[] getMetadataRepositories() {
 		return metadataRepositories;
 	}
 
+	public URL[] getArtifactRepositories() {
+		return artifactRepositories;
+	}
+
 	public String getProperty(String key) {
 		return properties.getProperty(key);
 	}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Collect.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Collect.java
index f7a1d19..680ba68 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Collect.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Collect.java
@@ -7,6 +7,7 @@
  *
  * Contributors:
  *     IBM Corporation - initial API and implementation
+ *     WindRiver - https://bugs.eclipse.org/bugs/show_bug.cgi?id=227372
  *******************************************************************************/
 package org.eclipse.equinox.internal.provisional.p2.engine.phases;
 
@@ -47,7 +48,7 @@ public class Collect extends InstallableUnitPhase {
 	protected IStatus completeInstallableUnitPhase(IProgressMonitor monitor, IProfile profile, Map parameters) {
 		List artifactRequests = (List) parameters.get(PARM_ARTIFACT_REQUESTS);
 
-		DownloadManager dm = new DownloadManager();
+		DownloadManager dm = new DownloadManager(provContext);
 		for (Iterator it = artifactRequests.iterator(); it.hasNext();) {
 			IArtifactRequest[] requests = (IArtifactRequest[]) it.next();
 			dm.add(requests);
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Sizing.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Sizing.java
index 14befe2..47ddc96 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Sizing.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Sizing.java
@@ -65,7 +65,11 @@ public class Sizing extends InstallableUnitPhase {
 		}
 
 		IArtifactRepositoryManager repoMgr = (IArtifactRepositoryManager) ServiceHelper.getService(EngineActivator.getContext(), IArtifactRepositoryManager.class.getName());
-		URL[] repositories = repoMgr.getKnownRepositories(IArtifactRepositoryManager.REPOSITORIES_ALL);
+		URL[] repositories = null;
+		if (provContext == null || provContext.getArtifactRepositories() == null)
+			repositories = repoMgr.getKnownRepositories(IArtifactRepositoryManager.REPOSITORIES_ALL);
+		else
+			repositories = provContext.getArtifactRepositories();
 
 		for (Iterator iterator = artifactsToObtain.iterator(); iterator.hasNext();) {
 			IArtifactRequest artifactRequest = (IArtifactRequest) iterator.next();

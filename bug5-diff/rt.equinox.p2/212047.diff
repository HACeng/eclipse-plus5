commit 87a8b86b815560e74aea7b753ed2b73743ef6770
Author: Susan Franklin <sfranklin>
Date:   Sat Apr 25 22:07:38 2009 +0000

    Bug 212047 - [ui] - Wizards should persist column widths

60	12	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUsPage.java
4	4	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ILayoutConstants.java
8	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProvisioningOperationWizard.java
8	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProvisioningWizardPage.java
68	6	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionResultsWizardPage.java
72	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionStatusPage.java
42	13	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java
1	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/InstallAction.java
1	14	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
3	8	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstallWizard.java
14	4	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/ProvisioningWizardDialog.java
8	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/IUColumnConfig.java
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUsPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUsPage.java
index ad8b4d9..c306cb7 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUsPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AvailableIUsPage.java
@@ -22,6 +22,7 @@ import org.eclipse.equinox.internal.provisional.p2.ui.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.dialogs.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.IUViewQueryContext;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
+import org.eclipse.equinox.internal.provisional.p2.ui.viewers.IUColumnConfig;
 import org.eclipse.equinox.internal.provisional.p2.ui.viewers.StructuredViewerProvisioningListener;
 import org.eclipse.jface.action.Action;
 import org.eclipse.jface.action.IAction;
@@ -43,8 +44,11 @@ public class AvailableIUsPage extends ProvisioningWizardPage implements ISelecta
 	private static final String SHOW_LATEST_VERSIONS_ONLY = "ShowLatestVersionsOnly"; //$NON-NLS-1$
 	private static final String HIDE_INSTALLED_IUS = "HideInstalledContent"; //$NON-NLS-1$
 	private static final String RESOLVE_ALL = "ResolveInstallWithAllSites"; //$NON-NLS-1$
+	private static final String NAME_COLUMN_WIDTH = "AvailableNameColumnWidth"; //$NON-NLS-1$
+	private static final String VERSION_COLUMN_WIDTH = "AvailableVersionColumnWidth"; //$NON-NLS-1$
+	private static final String LIST_WEIGHT = "AvailableListSashWeight"; //$NON-NLS-1$
+	private static final String DETAILS_WEIGHT = "AvailableDetailsSashWeight"; //$NON-NLS-1$
 	private static final String LINKACTION = "linkAction"; //$NON-NLS-1$
-	private static final int DEFAULT_WIDTH = 300;
 
 	String profileId;
 	Policy policy;
@@ -56,6 +60,8 @@ public class AvailableIUsPage extends ProvisioningWizardPage implements ISelecta
 	Link installLink;
 	Button useCategoriesCheckbox, hideInstalledCheckbox, showLatestVersionsCheckbox, resolveAllCheckbox;
 	Text detailsArea;
+	SashForm sashForm;
+	IUColumnConfig nameColumn, versionColumn;
 	StructuredViewerProvisioningListener profileListener;
 	Display display;
 	int batchCount = 0;
@@ -81,7 +87,6 @@ public class AvailableIUsPage extends ProvisioningWizardPage implements ISelecta
 
 		Composite composite = new Composite(parent, SWT.NONE);
 		GridData gd = new GridData(SWT.FILL, SWT.FILL, true, true);
-		gd.widthHint = convertHorizontalDLUsToPixels(DEFAULT_WIDTH);
 		composite.setLayoutData(gd);
 		setDropTarget(composite);
 
@@ -92,7 +97,7 @@ public class AvailableIUsPage extends ProvisioningWizardPage implements ISelecta
 		// Repo manipulation 
 		createRepoArea(composite);
 
-		SashForm sashForm = new SashForm(composite, SWT.VERTICAL);
+		sashForm = new SashForm(composite, SWT.VERTICAL);
 		FillLayout fill = new FillLayout();
 		sashForm.setLayout(fill);
 		GridData data = new GridData(GridData.FILL_BOTH);
@@ -103,7 +108,11 @@ public class AvailableIUsPage extends ProvisioningWizardPage implements ISelecta
 		int filterConstant = AvailableIUGroup.AVAILABLE_NONE;
 		if (policy.getRepositoryManipulator() == null)
 			filterConstant = AvailableIUGroup.AVAILABLE_ALL;
-		availableIUGroup = new AvailableIUGroup(policy, sashForm, JFaceResources.getDialogFont(), manager, queryContext, ProvUI.getIUColumnConfig(), filterConstant);
+		nameColumn = new IUColumnConfig(ProvUIMessages.ProvUI_NameColumnTitle, IUColumnConfig.COLUMN_NAME, convertWidthInCharsToPixels(ILayoutConstants.DEFAULT_COLUMN_WIDTH));
+		versionColumn = new IUColumnConfig(ProvUIMessages.ProvUI_VersionColumnTitle, IUColumnConfig.COLUMN_VERSION, convertWidthInCharsToPixels(ILayoutConstants.DEFAULT_COLUMN_WIDTH));
+
+		getColumnWidthsFromSettings();
+		availableIUGroup = new AvailableIUGroup(policy, sashForm, JFaceResources.getDialogFont(), manager, queryContext, new IUColumnConfig[] {nameColumn, versionColumn}, filterConstant);
 
 		// Selection listeners must be registered on both the normal selection
 		// events and the check mark events.  Must be done after buttons 
@@ -128,10 +137,10 @@ public class AvailableIUsPage extends ProvisioningWizardPage implements ISelecta
 		activateCopy(availableIUGroup.getStructuredViewer().getControl());
 
 		// Details area
-		iuDetailsGroup = new IUDetailsGroup(sashForm, availableIUGroup.getStructuredViewer(), convertHorizontalDLUsToPixels(DEFAULT_WIDTH), true);
+		iuDetailsGroup = new IUDetailsGroup(sashForm, availableIUGroup.getStructuredViewer(), SWT.DEFAULT, true);
 		detailsArea = iuDetailsGroup.getDetailsArea();
 
-		sashForm.setWeights(ILayoutConstants.IUS_TO_DETAILS_WEIGHTS);
+		sashForm.setWeights(getSashWeights());
 
 		// Controls for filtering/presentation/site selection
 		Composite controlsComposite = new Composite(composite, SWT.NONE);
@@ -333,11 +342,6 @@ public class AvailableIUsPage extends ProvisioningWizardPage implements ISelecta
 		}
 	}
 
-	public boolean performFinish() {
-		savePageSettings();
-		return true;
-	}
-
 	private void makeQueryContext() {
 		// Make a local query context that is based on the default.
 		IUViewQueryContext defaultQueryContext = policy.getQueryContext();
@@ -383,7 +387,42 @@ public class AvailableIUsPage extends ProvisioningWizardPage implements ISelecta
 		}
 	}
 
-	private void savePageSettings() {
+	private void getColumnWidthsFromSettings() {
+		IDialogSettings settings = ProvUIActivator.getDefault().getDialogSettings();
+		IDialogSettings section = settings.getSection(DIALOG_SETTINGS_SECTION);
+		if (section != null) {
+			try {
+				if (section.get(NAME_COLUMN_WIDTH) != null)
+					nameColumn.columnWidth = section.getInt(NAME_COLUMN_WIDTH);
+				if (section.get(VERSION_COLUMN_WIDTH) != null)
+					versionColumn.columnWidth = section.getInt(VERSION_COLUMN_WIDTH);
+			} catch (NumberFormatException e) {
+				// Ignore if there actually was a value that didn't parse.  
+			}
+		}
+	}
+
+	private int[] getSashWeights() {
+		IDialogSettings settings = ProvUIActivator.getDefault().getDialogSettings();
+		IDialogSettings section = settings.getSection(DIALOG_SETTINGS_SECTION);
+		if (section != null) {
+			try {
+				int[] weights = new int[2];
+				if (section.get(LIST_WEIGHT) != null) {
+					weights[0] = section.getInt(LIST_WEIGHT);
+					if (section.get(DETAILS_WEIGHT) != null) {
+						weights[1] = section.getInt(DETAILS_WEIGHT);
+						return weights;
+					}
+				}
+			} catch (NumberFormatException e) {
+				// Ignore if there actually was a value that didn't parse.  
+			}
+		}
+		return ILayoutConstants.IUS_TO_DETAILS_WEIGHTS;
+	}
+
+	public void saveBoundsRelatedSettings() {
 		if (getShell().isDisposed())
 			return;
 		IDialogSettings settings = ProvUIActivator.getDefault().getDialogSettings();
@@ -396,6 +435,15 @@ public class AvailableIUsPage extends ProvisioningWizardPage implements ISelecta
 		section.put(HIDE_INSTALLED_IUS, hideInstalledCheckbox.getSelection());
 		if (resolveAllCheckbox != null)
 			section.put(RESOLVE_ALL, resolveAllCheckbox.getSelection());
+
+		TreeColumn col = availableIUGroup.getCheckboxTreeViewer().getTree().getColumn(0);
+		section.put(NAME_COLUMN_WIDTH, col.getWidth());
+		col = availableIUGroup.getCheckboxTreeViewer().getTree().getColumn(1);
+		section.put(VERSION_COLUMN_WIDTH, col.getWidth());
+
+		int[] weights = sashForm.getWeights();
+		section.put(LIST_WEIGHT, weights[0]);
+		section.put(DETAILS_WEIGHT, weights[1]);
 	}
 
 	void updateDetails() {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ILayoutConstants.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ILayoutConstants.java
index de7a2b5..d6f2cd7 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ILayoutConstants.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ILayoutConstants.java
@@ -22,9 +22,9 @@ package org.eclipse.equinox.internal.p2.ui.dialogs;
 public interface ILayoutConstants {
 	public static final int DEFAULT_DESCRIPTION_HEIGHT = 4;
 	public static final int DEFAULT_SITEDETAILS_HEIGHT = 2;
-	public static final int DEFAULT_COLUMN_WIDTH = 60;
-	public static final int DEFAULT_SMALL_COLUMN_WIDTH = 20;
-	public static final int DEFAULT_TABLE_HEIGHT = 15;
-	public static final int DEFAULT_TABLE_WIDTH = 120;
+	public static final int DEFAULT_COLUMN_WIDTH = 40;
+	public static final int DEFAULT_SMALL_COLUMN_WIDTH = 10;
+	public static final int DEFAULT_TABLE_HEIGHT = 10;
+	public static final int DEFAULT_TABLE_WIDTH = 80;
 	public static final int[] IUS_TO_DETAILS_WEIGHTS = new int[] {80, 20};
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProvisioningOperationWizard.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProvisioningOperationWizard.java
index 87a95d8..7f9ad7d 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProvisioningOperationWizard.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProvisioningOperationWizard.java
@@ -263,6 +263,14 @@ public abstract class ProvisioningOperationWizard extends Wizard {
 		return resolutionOperation.getResolutionResult().getSummaryStatus();
 	}
 
+	public void saveBoundsRelatedSettings() {
+		IWizardPage[] pages = getPages();
+		for (int i = 0; i < pages.length; i++) {
+			if (pages[i] instanceof ProvisioningWizardPage)
+				((ProvisioningWizardPage) pages[i]).saveBoundsRelatedSettings();
+		}
+	}
+
 	protected abstract ProfileChangeRequest computeProfileChangeRequest(Object[] checkedElements, MultiStatus additionalStatus, IProgressMonitor monitor);
 
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProvisioningWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProvisioningWizardPage.java
index 14a6790..085056b 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProvisioningWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProvisioningWizardPage.java
@@ -36,4 +36,12 @@ abstract class ProvisioningWizardPage extends WizardPage implements ICopyable {
 	}
 
 	protected abstract String getClipboardText(Control control);
+
+	/**
+	 * Save any settings that are related to the bounds of the wizard.
+	 * This method is called when the wizard is about to close.
+	 */
+	public void saveBoundsRelatedSettings() {
+		// Default is to do nothing
+	}
 }
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionResultsWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionResultsWizardPage.java
index d9a64bd..02559e6 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionResultsWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionResultsWizardPage.java
@@ -13,6 +13,7 @@ package org.eclipse.equinox.internal.p2.ui.dialogs;
 
 import org.eclipse.core.runtime.Assert;
 import org.eclipse.core.runtime.IStatus;
+import org.eclipse.equinox.internal.p2.ui.ProvUIActivator;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.model.ElementUtils;
 import org.eclipse.equinox.internal.p2.ui.model.QueriedElement;
@@ -27,6 +28,7 @@ import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProfileModifica
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
 import org.eclipse.equinox.internal.provisional.p2.ui.viewers.*;
 import org.eclipse.jface.dialogs.Dialog;
+import org.eclipse.jface.dialogs.IDialogSettings;
 import org.eclipse.jface.viewers.*;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.custom.SashForm;
@@ -42,6 +44,10 @@ import org.eclipse.ui.statushandlers.StatusManager;
  *
  */
 public abstract class ResolutionResultsWizardPage extends ResolutionStatusPage {
+
+	private static final String DIALOG_SETTINGS_SECTION = "ResolutionResultsPage"; //$NON-NLS-1$
+	private static final String ID_COLUMN_WIDTH = "IDColumnWidth"; //$NON-NLS-1$
+
 	protected IUElementListRoot input;
 	PlannerResolutionOperation resolvedOperation;
 	protected Policy policy;
@@ -51,6 +57,8 @@ public abstract class ResolutionResultsWizardPage extends ResolutionStatusPage {
 	IUDetailsLabelProvider labelProvider;
 	protected Display display;
 	private IUDetailsGroup iuDetailsGroup;
+	IUColumnConfig nameColumn, idColumn, versionColumn;
+	SashForm sashForm;
 
 	protected ResolutionResultsWizardPage(Policy policy, IUElementListRoot input, String profileID, PlannerResolutionOperation resolvedOperation) {
 		super("ResolutionPage", profileID); //$NON-NLS-1$
@@ -69,7 +77,7 @@ public abstract class ResolutionResultsWizardPage extends ResolutionStatusPage {
 	 */
 	public void createControl(Composite parent) {
 		display = parent.getDisplay();
-		SashForm sashForm = new SashForm(parent, SWT.VERTICAL);
+		sashForm = new SashForm(parent, SWT.VERTICAL);
 		FillLayout layout = new FillLayout();
 		sashForm.setLayout(layout);
 		GridData data = new GridData(GridData.FILL_BOTH);
@@ -127,7 +135,7 @@ public abstract class ResolutionResultsWizardPage extends ResolutionStatusPage {
 
 		updateStatus(input, resolvedOperation);
 		setControl(sashForm);
-		sashForm.setWeights(ILayoutConstants.IUS_TO_DETAILS_WEIGHTS);
+		sashForm.setWeights(getSashWeights());
 		Dialog.applyDialogFont(sashForm);
 	}
 
@@ -172,11 +180,13 @@ public abstract class ResolutionResultsWizardPage extends ResolutionStatusPage {
 	}
 
 	protected IUColumnConfig[] getColumnConfig() {
-		// TODO we could consider making this settable via API, but for now we rely on
-		// a standard column config.  We intentionally use the IU's id as one of the columns, because
+		// We intentionally use the IU's id as one of the columns, because
 		// resolution errors are reported by ID.
-		return new IUColumnConfig[] {new IUColumnConfig(ProvUIMessages.ProvUI_NameColumnTitle, IUColumnConfig.COLUMN_NAME, ILayoutConstants.DEFAULT_COLUMN_WIDTH), new IUColumnConfig(ProvUIMessages.ProvUI_VersionColumnTitle, IUColumnConfig.COLUMN_VERSION, ILayoutConstants.DEFAULT_SMALL_COLUMN_WIDTH), new IUColumnConfig(ProvUIMessages.ProvUI_IdColumnTitle, IUColumnConfig.COLUMN_ID, ILayoutConstants.DEFAULT_COLUMN_WIDTH)};
-
+		nameColumn = new IUColumnConfig(ProvUIMessages.ProvUI_NameColumnTitle, IUColumnConfig.COLUMN_NAME, ILayoutConstants.DEFAULT_COLUMN_WIDTH);
+		versionColumn = new IUColumnConfig(ProvUIMessages.ProvUI_VersionColumnTitle, IUColumnConfig.COLUMN_VERSION, ILayoutConstants.DEFAULT_SMALL_COLUMN_WIDTH);
+		idColumn = new IUColumnConfig(ProvUIMessages.ProvUI_IdColumnTitle, IUColumnConfig.COLUMN_ID, ILayoutConstants.DEFAULT_COLUMN_WIDTH);
+		getColumnWidthsFromSettings();
+		return new IUColumnConfig[] {nameColumn, versionColumn, idColumn};
 	}
 
 	void setDrilldownElements(IUElementListRoot root, ProvisioningPlan plan) {
@@ -225,4 +235,56 @@ public abstract class ResolutionResultsWizardPage extends ResolutionStatusPage {
 		}
 		input = newRoot;
 	}
+
+	protected String getDialogSettingsName() {
+		return getWizard().getClass().getName() + "." + DIALOG_SETTINGS_SECTION; //$NON-NLS-1$
+	}
+
+	protected IUColumnConfig getNameColumn() {
+		return nameColumn;
+	}
+
+	protected int getNameColumnWidth() {
+		return treeViewer.getTree().getColumn(0).getWidth();
+	}
+
+	protected SashForm getSashForm() {
+		return sashForm;
+	}
+
+	protected IUColumnConfig getVersionColumn() {
+		return versionColumn;
+	}
+
+	protected int getVersionColumnWidth() {
+		return treeViewer.getTree().getColumn(1).getWidth();
+	}
+
+	// TODO generalize the superclass iucolumn config handling so we don't need to override this
+	protected void getColumnWidthsFromSettings() {
+		super.getColumnWidthsFromSettings();
+		IDialogSettings settings = ProvUIActivator.getDefault().getDialogSettings();
+		IDialogSettings section = settings.getSection(getDialogSettingsName());
+		if (section != null) {
+			try {
+				if (section.get(ID_COLUMN_WIDTH) != null)
+					idColumn.columnWidth = section.getInt(ID_COLUMN_WIDTH);
+			} catch (NumberFormatException e) {
+				// Ignore if there actually was a value that didn't parse.  
+			}
+		}
+	}
+
+	// TODO generalize the superclass iucolumn config handling so we don't need to override this
+	public void saveBoundsRelatedSettings() {
+		super.saveBoundsRelatedSettings();
+		if (getShell().isDisposed())
+			return;
+		IDialogSettings settings = ProvUIActivator.getDefault().getDialogSettings();
+		IDialogSettings section = settings.getSection(getDialogSettingsName());
+		if (section == null) {
+			section = settings.addNewSection(getDialogSettingsName());
+		}
+		section.put(ID_COLUMN_WIDTH, treeViewer.getTree().getColumn(2).getWidth());
+	}
 }
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionStatusPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionStatusPage.java
index 04f45bd..9d11962 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionStatusPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionStatusPage.java
@@ -11,16 +11,19 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.dialogs;
 
-import org.eclipse.equinox.internal.provisional.p2.ui.model.IUElementListRoot;
-
 import org.eclipse.core.runtime.Assert;
 import org.eclipse.core.runtime.IStatus;
+import org.eclipse.equinox.internal.p2.ui.ProvUIActivator;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.ui.IUPropertyUtils;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
+import org.eclipse.equinox.internal.provisional.p2.ui.model.IUElementListRoot;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.PlannerResolutionOperation;
+import org.eclipse.equinox.internal.provisional.p2.ui.viewers.IUColumnConfig;
+import org.eclipse.jface.dialogs.IDialogSettings;
 import org.eclipse.jface.dialogs.IMessageProvider;
+import org.eclipse.swt.custom.SashForm;
 import org.eclipse.ui.statushandlers.StatusManager;
 
 /**
@@ -33,6 +36,10 @@ import org.eclipse.ui.statushandlers.StatusManager;
  *
  */
 public abstract class ResolutionStatusPage extends ProvisioningWizardPage {
+	private static final String LIST_WEIGHT = "ListSashWeight"; //$NON-NLS-1$
+	private static final String DETAILS_WEIGHT = "DetailsSashWeight"; //$NON-NLS-1$
+	private static final String NAME_COLUMN_WIDTH = "NameColumnWidth"; //$NON-NLS-1$
+	private static final String VERSION_COLUMN_WIDTH = "VersionColumnWidth"; //$NON-NLS-1$
 
 	protected String profileId;
 
@@ -154,4 +161,67 @@ public abstract class ResolutionStatusPage extends ProvisioningWizardPage {
 			detail = ""; //$NON-NLS-1$
 		detailsGroup.getDetailsArea().setText(detail);
 	}
+
+	protected abstract String getDialogSettingsName();
+
+	protected abstract SashForm getSashForm();
+
+	protected abstract IUColumnConfig getNameColumn();
+
+	protected abstract IUColumnConfig getVersionColumn();
+
+	protected abstract int getNameColumnWidth();
+
+	protected abstract int getVersionColumnWidth();
+
+	protected int[] getSashWeights() {
+		IDialogSettings settings = ProvUIActivator.getDefault().getDialogSettings();
+		IDialogSettings section = settings.getSection(getDialogSettingsName());
+		if (section != null) {
+			try {
+				int[] weights = new int[2];
+				if (section.get(LIST_WEIGHT) != null) {
+					weights[0] = section.getInt(LIST_WEIGHT);
+					if (section.get(DETAILS_WEIGHT) != null) {
+						weights[1] = section.getInt(DETAILS_WEIGHT);
+						return weights;
+					}
+				}
+			} catch (NumberFormatException e) {
+				// Ignore if there actually was a value that didn't parse.  
+			}
+		}
+		return ILayoutConstants.IUS_TO_DETAILS_WEIGHTS;
+	}
+
+	protected void getColumnWidthsFromSettings() {
+		IDialogSettings settings = ProvUIActivator.getDefault().getDialogSettings();
+		IDialogSettings section = settings.getSection(getDialogSettingsName());
+		if (section != null) {
+			try {
+				if (section.get(NAME_COLUMN_WIDTH) != null)
+					getNameColumn().columnWidth = section.getInt(NAME_COLUMN_WIDTH);
+				if (section.get(VERSION_COLUMN_WIDTH) != null)
+					getVersionColumn().columnWidth = section.getInt(VERSION_COLUMN_WIDTH);
+			} catch (NumberFormatException e) {
+				// Ignore if there actually was a value that didn't parse.  
+			}
+		}
+	}
+
+	public void saveBoundsRelatedSettings() {
+		if (getShell().isDisposed())
+			return;
+		IDialogSettings settings = ProvUIActivator.getDefault().getDialogSettings();
+		IDialogSettings section = settings.getSection(getDialogSettingsName());
+		if (section == null) {
+			section = settings.addNewSection(getDialogSettingsName());
+		}
+		section.put(NAME_COLUMN_WIDTH, getNameColumnWidth());
+		section.put(VERSION_COLUMN_WIDTH, getVersionColumnWidth());
+
+		int[] weights = getSashForm().getWeights();
+		section.put(LIST_WEIGHT, weights[0]);
+		section.put(DETAILS_WEIGHT, weights[1]);
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java
index d27a1a2..880580e 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java
@@ -42,6 +42,8 @@ import org.eclipse.swt.widgets.*;
  */
 public class SelectableIUsPage extends ResolutionStatusPage implements IResolutionErrorReportingPage {
 
+	private static final String DIALOG_SETTINGS_SECTION = "SelectableIUsPage"; //$NON-NLS-1$
+
 	IUElementListRoot root;
 	Object[] initialSelections;
 	PlannerResolutionOperation resolvedOperation;
@@ -52,6 +54,8 @@ public class SelectableIUsPage extends ResolutionStatusPage implements IResoluti
 	IUDetailsLabelProvider labelProvider;
 	protected Display display;
 	protected Policy policy;
+	SashForm sashForm;
+	IUColumnConfig nameColumn, versionColumn;
 
 	public SelectableIUsPage(Policy policy, IUElementListRoot root, Object[] initialSelections, String profileId) {
 		super("IUSelectionPage", profileId); //$NON-NLS-1$
@@ -67,7 +71,7 @@ public class SelectableIUsPage extends ResolutionStatusPage implements IResoluti
 	 */
 	public void createControl(Composite parent) {
 		display = parent.getDisplay();
-		SashForm sashForm = new SashForm(parent, SWT.VERTICAL);
+		sashForm = new SashForm(parent, SWT.VERTICAL);
 		FillLayout layout = new FillLayout();
 		sashForm.setLayout(layout);
 		GridData data = new GridData(GridData.FILL_BOTH);
@@ -88,17 +92,19 @@ public class SelectableIUsPage extends ResolutionStatusPage implements IResoluti
 		table.setLayoutData(data);
 		table.setHeaderVisible(true);
 		activateCopy(table);
-		IUColumnConfig[] columns = ProvUI.getIUColumnConfig();
-		for (int i = 0; i < columns.length; i++) {
-			TableColumn tc = new TableColumn(table, SWT.LEFT, i);
-			tc.setResizable(true);
-			tc.setText(columns[i].columnTitle);
-			if (columns[i].columnField == IUColumnConfig.COLUMN_SIZE) {
-				tc.setAlignment(SWT.RIGHT);
-				tc.setWidth(convertWidthInCharsToPixels(ILayoutConstants.DEFAULT_SMALL_COLUMN_WIDTH));
-			} else
-				tc.setWidth(convertWidthInCharsToPixels(ILayoutConstants.DEFAULT_COLUMN_WIDTH));
-		}
+		nameColumn = new IUColumnConfig(ProvUIMessages.ProvUI_NameColumnTitle, IUColumnConfig.COLUMN_NAME, convertWidthInCharsToPixels(ILayoutConstants.DEFAULT_COLUMN_WIDTH));
+		versionColumn = new IUColumnConfig(ProvUIMessages.ProvUI_VersionColumnTitle, IUColumnConfig.COLUMN_VERSION, convertWidthInCharsToPixels(ILayoutConstants.DEFAULT_COLUMN_WIDTH));
+		getColumnWidthsFromSettings();
+
+		TableColumn tc = new TableColumn(table, SWT.LEFT, 0);
+		tc.setResizable(true);
+		tc.setText(nameColumn.columnTitle);
+		tc.setWidth(convertWidthInCharsToPixels(nameColumn.getWidth()));
+
+		tc = new TableColumn(table, SWT.LEFT, 1);
+		tc.setResizable(true);
+		tc.setText(versionColumn.columnTitle);
+		tc.setWidth(convertWidthInCharsToPixels(versionColumn.getWidth()));
 
 		tableViewer.addSelectionChangedListener(new ISelectionChangedListener() {
 			public void selectionChanged(SelectionChangedEvent event) {
@@ -134,7 +140,7 @@ public class SelectableIUsPage extends ResolutionStatusPage implements IResoluti
 		detailsArea = iuDetailsGroup.getDetailsArea();
 		updateStatus(root, resolvedOperation);
 		setControl(sashForm);
-		sashForm.setWeights(ILayoutConstants.IUS_TO_DETAILS_WEIGHTS);
+		sashForm.setWeights(getSashWeights());
 		Dialog.applyDialogFont(sashForm);
 	}
 
@@ -303,6 +309,29 @@ public class SelectableIUsPage extends ResolutionStatusPage implements IResoluti
 			initialSelections = elements;
 		else
 			tableViewer.setCheckedElements(elements);
+	}
+
+	protected String getDialogSettingsName() {
+		return getWizard().getClass().getName() + "." + DIALOG_SETTINGS_SECTION; //$NON-NLS-1$
+	}
+
+	protected IUColumnConfig getNameColumn() {
+		return nameColumn;
+	}
+
+	protected int getNameColumnWidth() {
+		return tableViewer.getTable().getColumn(0).getWidth();
+	}
+
+	protected SashForm getSashForm() {
+		return sashForm;
+	}
+
+	protected IUColumnConfig getVersionColumn() {
+		return versionColumn;
+	}
 
+	protected int getVersionColumnWidth() {
+		return tableViewer.getTable().getColumn(1).getWidth();
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/InstallAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/InstallAction.java
index d9e7093..a71da55 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/InstallAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/actions/InstallAction.java
@@ -30,7 +30,6 @@ import org.eclipse.equinox.internal.provisional.p2.ui.operations.PlannerResoluti
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
 import org.eclipse.jface.viewers.ISelectionProvider;
-import org.eclipse.jface.wizard.IWizard;
 import org.eclipse.jface.wizard.WizardDialog;
 import org.eclipse.ui.PlatformUI;
 
@@ -145,7 +144,7 @@ public class InstallAction extends ProfileModificationAction {
 	}
 
 	protected int performAction(IInstallableUnit[] ius, String targetProfileId, PlannerResolutionOperation resolution) {
-		IWizard wizard = new PreselectedIUInstallWizard(getPolicy(), targetProfileId, ius, resolution, new QueryableMetadataRepositoryManager(getPolicy().getQueryContext(), false));
+		PreselectedIUInstallWizard wizard = new PreselectedIUInstallWizard(getPolicy(), targetProfileId, ius, resolution, new QueryableMetadataRepositoryManager(getPolicy().getQueryContext(), false));
 		WizardDialog dialog = new ProvisioningWizardDialog(getShell(), wizard);
 		dialog.create();
 		PlatformUI.getWorkbench().getHelpSystem().setHelp(dialog.getShell(), IProvHelpContextIds.INSTALL_WIZARD);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
index 3b78ec9..deeefec 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
@@ -51,9 +51,6 @@ import org.eclipse.ui.PlatformUI;
  */
 public class AvailableIUGroup extends StructuredIUGroup {
 
-	private static final int SITE_COLUMN_WIDTH_IN_DLUS = 300;
-	private static final int OTHER_COLUMN_WIDTH_IN_DLUS = 350;
-
 	/**
 	 * Show contents from all repositories
 	 */
@@ -217,7 +214,7 @@ public class AvailableIUGroup extends StructuredIUGroup {
 			TreeColumn tc = new TreeColumn(tree, SWT.NONE, i);
 			tc.setResizable(true);
 			tc.setText(cols[i].columnTitle);
-			tc.setWidth(convertHorizontalDLUsToPixels(cols[i].defaultColumnWidth));
+			tc.setWidth(cols[i].getWidth());
 		}
 	}
 
@@ -413,7 +410,6 @@ public class AvailableIUGroup extends StructuredIUGroup {
 		BusyIndicator.showWhile(display, new Runnable() {
 			public void run() {
 				parent.setRedraw(false);
-				updateTreeColumns();
 				getCheckboxTreeViewer().setInput(getNewInput());
 				parent.layout(true);
 				parent.setRedraw(true);
@@ -421,15 +417,6 @@ public class AvailableIUGroup extends StructuredIUGroup {
 		});
 	}
 
-	void updateTreeColumns() {
-		if (getTree() == null || getTree().isDisposed())
-			return;
-		TreeColumn[] columns = getTree().getColumns();
-		if (columns.length > 0)
-			columns[0].setWidth(convertHorizontalDLUsToPixels(queryContext.getViewType() == IUViewQueryContext.AVAILABLE_VIEW_BY_REPO ? SITE_COLUMN_WIDTH_IN_DLUS : OTHER_COLUMN_WIDTH_IN_DLUS));
-
-	}
-
 	public Control getDefaultFocusControl() {
 		if (filteredTree != null)
 			return filteredTree.getFilterControl();
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstallWizard.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstallWizard.java
index 0778678..2f22280 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstallWizard.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/InstallWizard.java
@@ -10,20 +10,20 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.provisional.p2.ui.dialogs;
 
-import org.eclipse.equinox.internal.provisional.p2.ui.model.IUElementListRoot;
-
 import java.util.ArrayList;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.MultiStatus;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.dialogs.*;
-import org.eclipse.equinox.internal.p2.ui.model.*;
+import org.eclipse.equinox.internal.p2.ui.model.AvailableIUElement;
+import org.eclipse.equinox.internal.p2.ui.model.ElementUtils;
 import org.eclipse.equinox.internal.provisional.p2.director.ProfileChangeRequest;
 import org.eclipse.equinox.internal.provisional.p2.engine.ProvisioningContext;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUIImages;
 import org.eclipse.equinox.internal.provisional.p2.ui.QueryableMetadataRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.ui.actions.InstallAction;
+import org.eclipse.equinox.internal.provisional.p2.ui.model.IUElementListRoot;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.PlannerResolutionOperation;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
 import org.eclipse.jface.wizard.IWizardPage;
@@ -87,11 +87,6 @@ public class InstallWizard extends WizardWithLicenses {
 			});
 	}
 
-	public boolean performFinish() {
-		mainPage.performFinish();
-		return super.performFinish();
-	}
-
 	protected ProvisioningContext getProvisioningContext() {
 		return mainPage.getProvisioningContext();
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/ProvisioningWizardDialog.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/ProvisioningWizardDialog.java
index 46b81b0..92f79aa 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/ProvisioningWizardDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/ProvisioningWizardDialog.java
@@ -12,8 +12,8 @@
 package org.eclipse.equinox.internal.provisional.p2.ui.dialogs;
 
 import org.eclipse.equinox.internal.p2.ui.ProvUIActivator;
+import org.eclipse.equinox.internal.p2.ui.dialogs.ProvisioningOperationWizard;
 import org.eclipse.jface.dialogs.IDialogSettings;
-import org.eclipse.jface.wizard.IWizard;
 import org.eclipse.jface.wizard.WizardDialog;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.widgets.Shell;
@@ -25,12 +25,12 @@ import org.eclipse.swt.widgets.Shell;
  */
 public class ProvisioningWizardDialog extends WizardDialog {
 	private static final String WIZARD_SETTINGS_SECTION = "P2Wizard"; //$NON-NLS-1$
+	private ProvisioningOperationWizard wizard;
 
-	public ProvisioningWizardDialog(Shell parent, IWizard wizard) {
+	public ProvisioningWizardDialog(Shell parent, ProvisioningOperationWizard wizard) {
 		super(parent, wizard);
-
+		this.wizard = wizard;
 		setShellStyle(getShellStyle() | SWT.RESIZE);
-		setMinimumPageSize(700, 500);
 	}
 
 	protected IDialogSettings getDialogBoundsSettings() {
@@ -41,4 +41,14 @@ public class ProvisioningWizardDialog extends WizardDialog {
 		}
 		return section;
 	}
+
+	/**
+	 * @see org.eclipse.jface.window.Window#close()
+	 */
+	public boolean close() {
+		if (getShell() != null && !getShell().isDisposed()) {
+			wizard.saveBoundsRelatedSettings();
+		}
+		return super.close();
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/IUColumnConfig.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/IUColumnConfig.java
index 44b6c13..be30257 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/IUColumnConfig.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/IUColumnConfig.java
@@ -25,10 +25,18 @@ public class IUColumnConfig {
 	public String columnTitle;
 	public int columnField;
 	public int defaultColumnWidth;
+	public int columnWidth;
 
 	public IUColumnConfig(String title, int columnField, int defaultColumnWidth) {
 		this.columnTitle = title;
 		this.columnField = columnField;
 		this.defaultColumnWidth = defaultColumnWidth;
+		this.columnWidth = -1;
+	}
+
+	public int getWidth() {
+		if (columnWidth >= 0)
+			return columnWidth;
+		return defaultColumnWidth;
 	}
 }
commit 5a37f814b9689f868db752c4507457650cd32ebc
Author: Susan Franklin <sfranklin>
Date:   Sat Apr 25 23:08:52 2009 +0000

    Bug 212047 - [ui] - Wizards should persist column widths

88	18	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AcceptLicensesWizardPage.java
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AcceptLicensesWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AcceptLicensesWizardPage.java
index 85c3200..c269d11 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AcceptLicensesWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AcceptLicensesWizardPage.java
@@ -12,6 +12,7 @@ package org.eclipse.equinox.internal.provisional.p2.ui.dialogs;
 
 import java.util.*;
 import java.util.List;
+import org.eclipse.equinox.internal.p2.ui.ProvUIActivator;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.dialogs.ILayoutConstants;
 import org.eclipse.equinox.internal.p2.ui.viewers.IUDetailsLabelProvider;
@@ -21,12 +22,12 @@ import org.eclipse.equinox.internal.provisional.p2.engine.Operand;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.metadata.ILicense;
 import org.eclipse.equinox.internal.provisional.p2.ui.IUPropertyUtils;
-import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
 import org.eclipse.equinox.internal.provisional.p2.ui.model.IUElementListRoot;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
 import org.eclipse.equinox.internal.provisional.p2.ui.viewers.IUColumnConfig;
 import org.eclipse.equinox.internal.provisional.p2.ui.viewers.ProvElementContentProvider;
 import org.eclipse.jface.dialogs.Dialog;
+import org.eclipse.jface.dialogs.IDialogSettings;
 import org.eclipse.jface.viewers.*;
 import org.eclipse.jface.wizard.WizardPage;
 import org.eclipse.swt.SWT;
@@ -44,15 +45,22 @@ import org.eclipse.swt.widgets.*;
  * @since 3.4
  */
 public class AcceptLicensesWizardPage extends WizardPage {
+	private static final String DIALOG_SETTINGS_SECTION = "LicensessPage"; //$NON-NLS-1$
+	private static final String LIST_WEIGHT = "ListSashWeight"; //$NON-NLS-1$
+	private static final String LICENSE_WEIGHT = "LicenseSashWeight"; //$NON-NLS-1$
+	private static final String NAME_COLUMN_WIDTH = "NameColumnWidth"; //$NON-NLS-1$
+	private static final String VERSION_COLUMN_WIDTH = "VersionColumnWidth"; //$NON-NLS-1$
 
 	TableViewer iuViewer;
 	Text licenseTextBox;
 	Button acceptButton;
 	Button declineButton;
+	SashForm sashForm;
 	private IInstallableUnit[] originalIUs;
 	private IInstallableUnit[] iusWithUnacceptedLicenses;
 	private Policy policy;
-	private static final int DEFAULT_COLUMN_WIDTH = 40;
+	IUColumnConfig nameColumn;
+	IUColumnConfig versionColumn;
 
 	public AcceptLicensesWizardPage(Policy policy, IInstallableUnit[] ius, ProvisioningPlan plan) {
 		super("AcceptLicenses"); //$NON-NLS-1$
@@ -69,13 +77,15 @@ public class AcceptLicensesWizardPage extends WizardPage {
 		} else if (iusWithUnacceptedLicenses.length == 1) {
 			createLicenseSection(parent, true);
 		} else {
-			SashForm composite = new SashForm(parent, SWT.HORIZONTAL);
-			composite.setLayout(new GridLayout());
-			composite.setLayoutData(new GridData(GridData.FILL_BOTH));
+			sashForm = new SashForm(parent, SWT.HORIZONTAL);
+			sashForm.setLayout(new GridLayout());
+			GridData gd = new GridData(SWT.FILL, SWT.FILL, true, true);
+			sashForm.setLayoutData(new GridData(GridData.FILL_BOTH));
 
-			createIUSection(composite);
-			createLicenseSection(composite, false);
-			setControl(composite);
+			createIUSection(sashForm);
+			createLicenseSection(sashForm, false);
+			sashForm.setWeights(getSashWeights());
+			setControl(sashForm);
 
 			Object element = iuViewer.getElementAt(0);
 			if (element != null)
@@ -109,6 +119,7 @@ public class AcceptLicensesWizardPage extends WizardPage {
 
 		});
 		gd = new GridData(GridData.FILL_BOTH);
+		gd.widthHint = convertWidthInCharsToPixels(ILayoutConstants.DEFAULT_COLUMN_WIDTH + ILayoutConstants.DEFAULT_SMALL_COLUMN_WIDTH);
 		iuViewer.getControl().setLayoutData(gd);
 	}
 
@@ -160,8 +171,6 @@ public class AcceptLicensesWizardPage extends WizardPage {
 		licenseTextBox.setBackground(licenseTextBox.getDisplay().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
 		initializeDialogUnits(licenseTextBox);
 		gd = new GridData(SWT.FILL, SWT.FILL, true, true);
-		gd.widthHint = convertWidthInCharsToPixels(ILayoutConstants.DEFAULT_COLUMN_WIDTH);
-		gd.heightHint = convertHeightInCharsToPixels(ILayoutConstants.DEFAULT_TABLE_HEIGHT);
 
 		licenseTextBox.setLayoutData(gd);
 
@@ -183,14 +192,18 @@ public class AcceptLicensesWizardPage extends WizardPage {
 
 	private void setTableColumns(Table table) {
 		table.setHeaderVisible(true);
-		IUColumnConfig[] columns = ProvUI.getIUColumnConfig();
+		nameColumn = new IUColumnConfig(ProvUIMessages.ProvUI_NameColumnTitle, IUColumnConfig.COLUMN_NAME, convertWidthInCharsToPixels(ILayoutConstants.DEFAULT_COLUMN_WIDTH));
+		versionColumn = new IUColumnConfig(ProvUIMessages.ProvUI_VersionColumnTitle, IUColumnConfig.COLUMN_VERSION, convertWidthInCharsToPixels(ILayoutConstants.DEFAULT_COLUMN_WIDTH));
 		initializeDialogUnits(table);
-		for (int i = 0; i < columns.length; i++) {
-			TableColumn tc = new TableColumn(table, SWT.NONE, i);
-			tc.setResizable(true);
-			tc.setText(columns[i].columnTitle);
-			tc.setWidth(convertWidthInCharsToPixels(DEFAULT_COLUMN_WIDTH));
-		}
+		getColumnWidthsFromSettings();
+		TableColumn tc = new TableColumn(table, SWT.NONE, 0);
+		tc.setResizable(true);
+		tc.setText(nameColumn.columnTitle);
+		tc.setWidth(nameColumn.getWidth());
+		tc = new TableColumn(table, SWT.NONE, 1);
+		tc.setResizable(true);
+		tc.setText(versionColumn.columnTitle);
+		tc.setWidth(versionColumn.getWidth());
 	}
 
 	public boolean performFinish() {
@@ -214,7 +227,7 @@ public class AcceptLicensesWizardPage extends WizardPage {
 			Composite parent = getControl().getParent();
 			getControl().dispose();
 			createControl(parent);
-			parent.layout(true, true);
+			parent.layout(true);
 		}
 	}
 
@@ -298,4 +311,61 @@ public class AcceptLicensesWizardPage extends WizardPage {
 			setDescription(ProvUIMessages.AcceptLicensesWizardPage_ReviewExtraLicensesDescription);
 		}
 	}
+
+	private String getDialogSettingsName() {
+		return getWizard().getClass().getName() + "." + DIALOG_SETTINGS_SECTION; //$NON-NLS-1$
+	}
+
+	public void saveBoundsRelatedSettings() {
+		if (iuViewer == null || iuViewer.getTable().isDisposed())
+			return;
+		IDialogSettings settings = ProvUIActivator.getDefault().getDialogSettings();
+		IDialogSettings section = settings.getSection(getDialogSettingsName());
+		if (section == null) {
+			section = settings.addNewSection(getDialogSettingsName());
+		}
+		section.put(NAME_COLUMN_WIDTH, iuViewer.getTable().getColumn(0).getWidth());
+		section.put(VERSION_COLUMN_WIDTH, iuViewer.getTable().getColumn(1).getWidth());
+
+		if (sashForm == null || sashForm.isDisposed())
+			return;
+		int[] weights = sashForm.getWeights();
+		section.put(LIST_WEIGHT, weights[0]);
+		section.put(LICENSE_WEIGHT, weights[1]);
+	}
+
+	private void getColumnWidthsFromSettings() {
+		IDialogSettings settings = ProvUIActivator.getDefault().getDialogSettings();
+		IDialogSettings section = settings.getSection(getDialogSettingsName());
+		if (section != null) {
+			try {
+				if (section.get(NAME_COLUMN_WIDTH) != null)
+					nameColumn.columnWidth = section.getInt(NAME_COLUMN_WIDTH);
+				if (section.get(VERSION_COLUMN_WIDTH) != null)
+					versionColumn.columnWidth = section.getInt(VERSION_COLUMN_WIDTH);
+			} catch (NumberFormatException e) {
+				// Ignore if there actually was a value that didn't parse.  
+			}
+		}
+	}
+
+	private int[] getSashWeights() {
+		IDialogSettings settings = ProvUIActivator.getDefault().getDialogSettings();
+		IDialogSettings section = settings.getSection(getDialogSettingsName());
+		if (section != null) {
+			try {
+				int[] weights = new int[2];
+				if (section.get(LIST_WEIGHT) != null) {
+					weights[0] = section.getInt(LIST_WEIGHT);
+					if (section.get(LICENSE_WEIGHT) != null) {
+						weights[1] = section.getInt(LICENSE_WEIGHT);
+						return weights;
+					}
+				}
+			} catch (NumberFormatException e) {
+				// Ignore if there actually was a value that didn't parse.  
+			}
+		}
+		return new int[] {55, 45};
+	}
 }
commit 82e4a6fa22e45505bba719f3058b6df13c6f635e
Author: Susan Franklin <sfranklin>
Date:   Sat Apr 25 23:34:50 2009 +0000

    Bug 212047 - [ui] - Wizards should persist column widths
    Fix setting of default widths

4	4	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionResultsWizardPage.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionResultsWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionResultsWizardPage.java
index 02559e6..41b4e4b 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionResultsWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ResolutionResultsWizardPage.java
@@ -103,7 +103,7 @@ public abstract class ResolutionResultsWizardPage extends ResolutionStatusPage {
 			TreeColumn tc = new TreeColumn(tree, SWT.LEFT, i);
 			tc.setResizable(true);
 			tc.setText(columns[i].columnTitle);
-			tc.setWidth(convertWidthInCharsToPixels(columns[i].defaultColumnWidth));
+			tc.setWidth(columns[i].getWidth());
 		}
 
 		treeViewer.addSelectionChangedListener(new ISelectionChangedListener() {
@@ -182,9 +182,9 @@ public abstract class ResolutionResultsWizardPage extends ResolutionStatusPage {
 	protected IUColumnConfig[] getColumnConfig() {
 		// We intentionally use the IU's id as one of the columns, because
 		// resolution errors are reported by ID.
-		nameColumn = new IUColumnConfig(ProvUIMessages.ProvUI_NameColumnTitle, IUColumnConfig.COLUMN_NAME, ILayoutConstants.DEFAULT_COLUMN_WIDTH);
-		versionColumn = new IUColumnConfig(ProvUIMessages.ProvUI_VersionColumnTitle, IUColumnConfig.COLUMN_VERSION, ILayoutConstants.DEFAULT_SMALL_COLUMN_WIDTH);
-		idColumn = new IUColumnConfig(ProvUIMessages.ProvUI_IdColumnTitle, IUColumnConfig.COLUMN_ID, ILayoutConstants.DEFAULT_COLUMN_WIDTH);
+		nameColumn = new IUColumnConfig(ProvUIMessages.ProvUI_NameColumnTitle, IUColumnConfig.COLUMN_NAME, convertWidthInCharsToPixels(ILayoutConstants.DEFAULT_COLUMN_WIDTH));
+		versionColumn = new IUColumnConfig(ProvUIMessages.ProvUI_VersionColumnTitle, IUColumnConfig.COLUMN_VERSION, convertWidthInCharsToPixels(ILayoutConstants.DEFAULT_SMALL_COLUMN_WIDTH));
+		idColumn = new IUColumnConfig(ProvUIMessages.ProvUI_IdColumnTitle, IUColumnConfig.COLUMN_ID, convertWidthInCharsToPixels(ILayoutConstants.DEFAULT_COLUMN_WIDTH));
 		getColumnWidthsFromSettings();
 		return new IUColumnConfig[] {nameColumn, versionColumn, idColumn};
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java
index 880580e..499a629 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SelectableIUsPage.java
@@ -99,12 +99,12 @@ public class SelectableIUsPage extends ResolutionStatusPage implements IResoluti
 		TableColumn tc = new TableColumn(table, SWT.LEFT, 0);
 		tc.setResizable(true);
 		tc.setText(nameColumn.columnTitle);
-		tc.setWidth(convertWidthInCharsToPixels(nameColumn.getWidth()));
+		tc.setWidth(nameColumn.getWidth());
 
 		tc = new TableColumn(table, SWT.LEFT, 1);
 		tc.setResizable(true);
 		tc.setText(versionColumn.columnTitle);
-		tc.setWidth(convertWidthInCharsToPixels(versionColumn.getWidth()));
+		tc.setWidth(versionColumn.getWidth());
 
 		tableViewer.addSelectionChangedListener(new ISelectionChangedListener() {
 			public void selectionChanged(SelectionChangedEvent event) {

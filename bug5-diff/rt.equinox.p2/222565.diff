commit f4c7de405b87d286d12f19d41a052a18de54ac85
Author: Simon Kaegi <skaegi>
Date:   Mon Apr 7 21:35:00 2008 +0000

    Bug 222565 Strings need to be externalized

1	0	bundles/org.eclipse.equinox.p2.directorywatcher/META-INF/MANIFEST.MF
16	14	bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/provisional/p2/directorywatcher/DirectoryWatcher.java
26	0	bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/provisional/p2/directorywatcher/Messages.java
8	7	bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/provisional/p2/directorywatcher/RepositoryListener.java
11	0	bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/provisional/p2/directorywatcher/messages.properties
diff --git a/bundles/org.eclipse.equinox.p2.directorywatcher/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.directorywatcher/META-INF/MANIFEST.MF
index f2ec503..b105ba6 100644
--- a/bundles/org.eclipse.equinox.p2.directorywatcher/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.directorywatcher/META-INF/MANIFEST.MF
@@ -16,6 +16,7 @@ Import-Package: org.eclipse.equinox.internal.p2.core.helpers,
  org.eclipse.equinox.internal.provisional.p2.metadata.repository,
  org.eclipse.equinox.internal.provisional.p2.query,
  org.eclipse.osgi.service.resolver;version="1.1.0",
+ org.eclipse.osgi.util,
  org.osgi.framework;version="1.4.0",
  org.osgi.service.cm;version="1.2.0";resolution:=optional,
  org.osgi.service.packageadmin;version="1.2.0",
diff --git a/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/provisional/p2/directorywatcher/DirectoryWatcher.java b/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/provisional/p2/directorywatcher/DirectoryWatcher.java
index b621c98..9cbd6ef 100644
--- a/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/provisional/p2/directorywatcher/DirectoryWatcher.java
+++ b/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/provisional/p2/directorywatcher/DirectoryWatcher.java
@@ -13,16 +13,19 @@ package org.eclipse.equinox.internal.provisional.p2.directorywatcher;
 
 import java.io.File;
 import java.util.*;
+import org.eclipse.osgi.util.NLS;
 import org.osgi.framework.BundleContext;
 
 public class DirectoryWatcher {
+	private static final String DEL_EXT = ".del"; //$NON-NLS-1$
+
 	public class WatcherThread extends Thread {
 
 		private final long pollFrequency;
 		private boolean done = false;
 
 		public WatcherThread(long pollFrequency) {
-			super("Directory Watcher");
+			super("Directory Watcher"); //$NON-NLS-1$
 			this.pollFrequency = pollFrequency;
 		}
 
@@ -36,8 +39,7 @@ public class DirectoryWatcher {
 				} catch (InterruptedException e) {
 					// ignore
 				} catch (Throwable e) {
-					e.printStackTrace();
-					log("In main loop, we have serious trouble", e);
+					log(Messages.error_main_loop, e);
 					done = true;
 				}
 			} while (!done);
@@ -49,12 +51,12 @@ public class DirectoryWatcher {
 		}
 	}
 
-	public final static String POLL = "eclipse.p2.directory.watcher.poll";
-	public final static String DIR = "eclipse.p2.directory.watcher.dir";
+	public final static String POLL = "eclipse.p2.directory.watcher.poll"; //$NON-NLS-1$
+	public final static String DIR = "eclipse.p2.directory.watcher.dir"; //$NON-NLS-1$
 	private static final long DEFAULT_POLL_FREQUENCY = 2000;
 
 	public static void log(String string, Throwable e) {
-		System.err.println(string + ": " + e);
+		System.err.println(string + ": " + e); //$NON-NLS-1$
 	}
 
 	final File[] directories;
@@ -69,7 +71,7 @@ public class DirectoryWatcher {
 	public DirectoryWatcher(Dictionary properties, BundleContext context) {
 		String dir = (String) properties.get(DIR);
 		if (dir == null)
-			dir = "./load";
+			dir = "./load"; //$NON-NLS-1$
 
 		File targetDirectory = new File(dir);
 		targetDirectory.mkdirs();
@@ -78,14 +80,14 @@ public class DirectoryWatcher {
 
 	public DirectoryWatcher(File directory) {
 		if (directory == null)
-			throw new IllegalArgumentException("Folder must not be null");
+			throw new IllegalArgumentException(Messages.null_folder);
 
 		this.directories = new File[] {directory};
 	}
 
 	public DirectoryWatcher(File[] directories) {
 		if (directories == null)
-			throw new IllegalArgumentException("Folder must not be null");
+			throw new IllegalArgumentException(Messages.null_folder);
 		this.directories = directories;
 	}
 
@@ -109,7 +111,7 @@ public class DirectoryWatcher {
 
 	public synchronized void start(final long pollFrequency) {
 		if (watcher != null)
-			throw new IllegalStateException("Already Started");
+			throw new IllegalStateException(Messages.thread_started);
 
 		watcher = new WatcherThread(pollFrequency);
 		watcher.start();
@@ -117,7 +119,7 @@ public class DirectoryWatcher {
 
 	public synchronized void stop() {
 		if (watcher == null)
-			throw new IllegalStateException("Not Started");
+			throw new IllegalStateException(Messages.thread_not_started);
 
 		watcher.done();
 		watcher = null;
@@ -144,7 +146,7 @@ public class DirectoryWatcher {
 			for (int i = 0; i < list.length; i++) {
 				File file = list[i];
 				// if this is a deletion marker then add to the list of pending deletions.
-				if (list[i].getPath().endsWith(".del")) {
+				if (list[i].getPath().endsWith(DEL_EXT)) {
 					File target = new File(file.getPath().substring(0, file.getPath().length() - 4));
 					removals.add(target);
 					pendingDeletions.add(target);
@@ -203,7 +205,7 @@ public class DirectoryWatcher {
 					listener.changed(file);
 			}
 		} catch (Exception e) {
-			log("Processing : " + listener, e);
+			log(NLS.bind(Messages.error_processing, listener), e);
 		}
 	}
 
@@ -215,7 +217,7 @@ public class DirectoryWatcher {
 			File file = (File) iterator.next();
 			if (!file.exists() || file.delete())
 				iterator.remove();
-			new File(file.getPath() + ".del").delete();
+			new File(file.getPath() + DEL_EXT).delete();
 		}
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/provisional/p2/directorywatcher/Messages.java b/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/provisional/p2/directorywatcher/Messages.java
new file mode 100644
index 0000000..1c5ded9
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/provisional/p2/directorywatcher/Messages.java
@@ -0,0 +1,26 @@
+package org.eclipse.equinox.internal.provisional.p2.directorywatcher;
+
+import org.eclipse.osgi.util.NLS;
+
+public class Messages extends NLS {
+	private static final String BUNDLE_NAME = "org.eclipse.equinox.internal.provisional.p2.directorywatcher.messages"; //$NON-NLS-1$
+	public static String artifact_repo_manager_not_registered;
+	public static String error_main_loop;
+	public static String error_processing;
+	public static String failed_create_artifact_repo;
+	public static String failed_create_metadata_repo;
+	public static String metadata_repo_manager_not_registered;
+	public static String multiple_bundle_ius;
+	public static String null_folder;
+	public static String platformadmin_not_registered;
+	public static String thread_not_started;
+	public static String thread_started;
+	static {
+		// initialize resource bundle
+		NLS.initializeMessages(BUNDLE_NAME, Messages.class);
+	}
+
+	private Messages() {
+		//
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/provisional/p2/directorywatcher/RepositoryListener.java b/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/provisional/p2/directorywatcher/RepositoryListener.java
index ba5baf5..5ab7e76 100644
--- a/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/provisional/p2/directorywatcher/RepositoryListener.java
+++ b/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/provisional/p2/directorywatcher/RepositoryListener.java
@@ -25,6 +25,7 @@ import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadata
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.query.Query;
 import org.eclipse.osgi.service.resolver.*;
+import org.eclipse.osgi.util.NLS;
 import org.osgi.framework.BundleContext;
 import org.osgi.framework.ServiceReference;
 
@@ -85,10 +86,10 @@ public class RepositoryListener extends DirectoryChangeListener {
 
 		ServiceReference reference = context.getServiceReference(PlatformAdmin.class.getName());
 		if (reference == null)
-			throw new IllegalStateException("PlatformAdmin not registered."); //$NON-NLS-1$
+			throw new IllegalStateException(Messages.platformadmin_not_registered);
 		PlatformAdmin platformAdmin = (PlatformAdmin) context.getService(reference);
 		if (platformAdmin == null)
-			throw new IllegalStateException("PlatformAdmin not registered."); //$NON-NLS-1$
+			throw new IllegalStateException(Messages.platformadmin_not_registered);
 
 		try {
 			StateObjectFactory stateObjectFactory = platformAdmin.getFactory();
@@ -104,7 +105,7 @@ public class RepositoryListener extends DirectoryChangeListener {
 		if (reference != null)
 			manager = (IArtifactRepositoryManager) context.getService(reference);
 		if (manager == null)
-			throw new IllegalStateException("ArtifactRepositoryManager not registered."); //$NON-NLS-1$
+			throw new IllegalStateException(Messages.artifact_repo_manager_not_registered);
 
 		try {
 			try {
@@ -125,7 +126,7 @@ public class RepositoryListener extends DirectoryChangeListener {
 				return repository;
 			} catch (ProvisionException e) {
 				LogHelper.log(e);
-				throw new IllegalStateException("Couldn't create artifact repository for: " + stateDirURL); //$NON-NLS-1$
+				throw new IllegalStateException(NLS.bind(Messages.failed_create_artifact_repo, stateDirURL));
 			}
 		} finally {
 			context.ungetService(reference);
@@ -138,7 +139,7 @@ public class RepositoryListener extends DirectoryChangeListener {
 		if (reference != null)
 			manager = (IMetadataRepositoryManager) context.getService(reference);
 		if (manager == null)
-			throw new IllegalStateException("MetadataRepositoryManager not registered."); //$NON-NLS-1$
+			throw new IllegalStateException(Messages.metadata_repo_manager_not_registered);
 
 		try {
 			try {
@@ -157,7 +158,7 @@ public class RepositoryListener extends DirectoryChangeListener {
 			return repository;
 		} catch (ProvisionException e) {
 			LogHelper.log(e);
-			throw new IllegalStateException("Couldn't create metadata repository for: " + stateDirURL); //$NON-NLS-1$
+			throw new IllegalStateException(NLS.bind(Messages.failed_create_metadata_repo, stateDirURL));
 		} finally {
 			context.ungetService(reference);
 		}
@@ -405,7 +406,7 @@ public class RepositoryListener extends DirectoryChangeListener {
 			if (!ius[i].isFragment())
 				return new IInstallableUnit[] {ius[i]};
 		}
-		throw new IllegalStateException("There should be exactly one Bundle IU"); //$NON-NLS-1$
+		throw new IllegalStateException(Messages.multiple_bundle_ius);
 	}
 
 	public IMetadataRepository getMetadataRepository() {
diff --git a/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/provisional/p2/directorywatcher/messages.properties b/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/provisional/p2/directorywatcher/messages.properties
new file mode 100644
index 0000000..858807a
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/provisional/p2/directorywatcher/messages.properties
@@ -0,0 +1,11 @@
+artifact_repo_manager_not_registered=ArtifactRepositoryManager not registered.
+error_main_loop=Error in watcher thread main loop.
+error_processing=Error Processing: {0}
+failed_create_artifact_repo=Could not create artifact repository for: {0}
+failed_create_metadata_repo=Could not create metadata repository for: {0}
+metadata_repo_manager_not_registered=MetadataRepositoryManager not registered.
+multiple_bundle_ius=There should be exactly one Bundle IU
+null_folder=Folder must not be null
+platformadmin_not_registered=PlatformAdmin not registered.
+thread_not_started=Watcher thread not Started
+thread_started=Watcher thread already Started
commit 4de8330cada1e596b5ecfb3bada9a1e58c11cf6a
Author: Simon Kaegi <skaegi>
Date:   Mon Apr 7 22:11:50 2008 +0000

    Bug 222565 Strings need to be externalized

2	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/InstructionParser.java
18	22	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/Messages.java
1	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/MetadataCache.java
1	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ParameterizedProvisioningAction.java
1	0	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileWriter.java
10	10	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
10	27	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/messages.properties
3	3	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Engine.java
5	5	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/EngineSession.java
1	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/InstallableUnitEvent.java
1	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/InstallableUnitPhase.java
41	0	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Messages.java
3	4	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Phase.java
1	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/PhaseSet.java
25	0	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/messages.properties
0	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Collect.java
0	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Configure.java
35	0	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Messages.java
0	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Sizing.java
0	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Unconfigure.java
19	0	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/messages.properties
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/InstructionParser.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/InstructionParser.java
index 1b51d42..947f6dc 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/InstructionParser.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/InstructionParser.java
@@ -13,6 +13,7 @@ package org.eclipse.equinox.internal.p2.engine;
 import java.util.*;
 import org.eclipse.core.runtime.Assert;
 import org.eclipse.equinox.internal.provisional.p2.engine.*;
+import org.eclipse.osgi.util.NLS;
 
 public class InstructionParser {
 
@@ -62,7 +63,7 @@ public class InstructionParser {
 			action = touchpoint.getAction(actionId);
 
 		if (action == null)
-			throw new IllegalArgumentException("No action found for " + actionId + '.'); //$NON-NLS-1$
+			throw new IllegalArgumentException(NLS.bind(Messages.action_not_found, actionId));
 
 		return action;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/Messages.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/Messages.java
index 9a67db7..d9f2e19 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/Messages.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/Messages.java
@@ -12,39 +12,38 @@ package org.eclipse.equinox.internal.p2.engine;
 
 import org.eclipse.osgi.util.NLS;
 
-public class Messages extends NLS {
+class Messages extends NLS {
 	private static final String BUNDLE_NAME = "org.eclipse.equinox.internal.p2.engine.messages"; //$NON-NLS-1$
 
+	public static String action_not_found;
+
 	public static String download_artifact;
 	public static String download_no_repository;
 
-	public static String Engine_Error_During_Phase;
-	public static String Engine_Operation_Canceled_By_User;
+	public static String error_parsing_profile;
+
+	public static String error_persisting_profile;
+
+	public static String failed_creating_metadata_cache;
+
+	public static String ParameterizedProvisioningAction_action_or_parameters_null;
 
-	public static String Install_Operand_Description;
-	public static String InstallRegistry_Parser_Error_Parsing_Registry;
-	public static String InstallRegistry_Parser_Has_Incompatible_Version;
+	public static String profile_does_not_exist;
 
-	public static String Phase_Collect_Error;
-	public static String Phase_Configure_Error;
-	public static String Phase_Configure_Task;
-	public static String Phase_Error;
-	public static String Phase_Install_Error;
-	public static String Phase_Install_Task;
-	public static String Phase_Sizing_Error;
-	public static String Phase_Unconfigure_Error;
-	public static String Phase_Uninstall_Error;
+	public static String profile_not_current;
+
+	public static String profile_not_registered;
 
-	public static String Profile_Duplicate_Child_Profile_Id;
 	public static String Profile_Duplicate_Root_Profile_Id;
-	public static String Profile_Not_Named_Self;
 	public static String Profile_Null_Profile_Id;
 	public static String Profile_Parent_Not_Found;
 
-	public static String SimpleProfileRegistry_Cannot_Create_File_Error;
+	public static String reg_dir_not_available;
+
 	public static String SimpleProfileRegistry_Parser_Error_Parsing_Registry;
 	public static String SimpleProfileRegistry_Parser_Has_Incompatible_Version;
-	public static String SimpleProfileRegistry_Persist_To_Non_File_URL_Error;
+
+	public static String thread_not_owner;
 
 	public static String TouchpointManager_Attribute_Not_Specified;
 	public static String TouchpointManager_Conflicting_Touchpoint_Types;
@@ -56,9 +55,6 @@ public class Messages extends NLS {
 	public static String TouchpointManager_Required_Touchpoint_Not_Found;
 	public static String TouchpointManager_Touchpoint_Type_Mismatch;
 
-	public static String Uninstall_Operand_Description;
-	public static String Update_Operand_Description;
-
 	static {
 		// initialize resource bundles
 		NLS.initializeMessages(BUNDLE_NAME, Messages.class);
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/MetadataCache.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/MetadataCache.java
index 8662540..ea881fd 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/MetadataCache.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/MetadataCache.java
@@ -55,7 +55,7 @@ public class MetadataCache {
 			return repository;
 		} catch (ProvisionException e) {
 			LogHelper.log(e);
-			throw new IllegalStateException("Metadata cache could not be created"); //$NON-NLS-1$
+			throw new IllegalStateException(Messages.failed_creating_metadata_cache);
 		}
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ParameterizedProvisioningAction.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ParameterizedProvisioningAction.java
index fbf94d7..ff16b23 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ParameterizedProvisioningAction.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ParameterizedProvisioningAction.java
@@ -22,7 +22,7 @@ public class ParameterizedProvisioningAction extends ProvisioningAction {
 
 	public ParameterizedProvisioningAction(ProvisioningAction action, Map actionParameters) {
 		if (action == null || actionParameters == null)
-			throw new IllegalArgumentException("Both action and action pararameters must not be null."); //$NON-NLS-1$
+			throw new IllegalArgumentException(Messages.ParameterizedProvisioningAction_action_or_parameters_null);
 		this.action = action;
 		this.actionParameters = actionParameters;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileWriter.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileWriter.java
index 510738a..2644fa4 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileWriter.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileWriter.java
@@ -38,6 +38,7 @@ public class ProfileWriter extends MetadataWriter implements ProfileXMLConstants
 		writeInstallableUnits(collector.iterator(), collector.size());
 		writeInstallableUnitsProperties(collector.iterator(), collector.size(), profile);
 		end(PROFILE_ELEMENT);
+		flush();
 	}
 
 	private void writeInstallableUnitsProperties(Iterator it, int size, IProfile profile) {
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
index 0946b83..3005072 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
@@ -63,7 +63,7 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 		protected void unlock(Object monitor) {
 			Thread current = Thread.currentThread();
 			if (lockHolder != current)
-				throw new IllegalStateException("Thread not lock owner"); //$NON-NLS-1$
+				throw new IllegalStateException(Messages.thread_not_owner);
 
 			lockedCount--;
 			if (lockedCount == 0) {
@@ -75,7 +75,7 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 		protected synchronized void checkLocked() {
 			Thread current = Thread.currentThread();
 			if (lockHolder != current)
-				throw new IllegalStateException("Thread not lock owner"); //$NON-NLS-1$
+				throw new IllegalStateException(Messages.thread_not_owner);
 		}
 
 	}
@@ -183,7 +183,7 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 		String id = profile.getProfileId();
 		Profile current = internalGetProfile(id);
 		if (current == null)
-			throw new IllegalArgumentException("Profile to be updated does not exist:" + id); //$NON-NLS-1$
+			throw new IllegalArgumentException(NLS.bind(Messages.profile_does_not_exist, id));
 
 		Lock lock = (Lock) profileLocks.get(id);
 		lock.checkLocked();
@@ -288,7 +288,7 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 
 		File store = getRegistryDirectory();
 		if (store == null || !store.isDirectory())
-			throw new IllegalStateException("Registry Directory not available"); //$NON-NLS-1$
+			throw new IllegalStateException(Messages.reg_dir_not_available);
 
 		Parser parser = new Parser(EngineActivator.getContext(), EngineActivator.ID);
 		File[] profileDirectories = store.listFiles();
@@ -297,7 +297,7 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 			try {
 				parser.parse(profileFile);
 			} catch (IOException e) {
-				LogHelper.log(new Status(IStatus.ERROR, EngineActivator.ID, "Error parsing profile", e)); //$NON-NLS-1$
+				LogHelper.log(new Status(IStatus.ERROR, EngineActivator.ID, Messages.error_parsing_profile, e));
 			}
 		}
 		return parser.getProfileMap();
@@ -343,7 +343,7 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 		} catch (IOException e) {
 			profile.setTimestamp(previousTimestamp);
 			profileFile.delete();
-			LogHelper.log(new Status(IStatus.ERROR, EngineActivator.ID, "Error persisting profile", e)); //$NON-NLS-1$
+			LogHelper.log(new Status(IStatus.ERROR, EngineActivator.ID, Messages.error_persisting_profile, e));
 		} finally {
 			try {
 				if (os != null)
@@ -403,7 +403,7 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 		}
 
 		public void parse(File file) throws IOException {
-			parse(new FileInputStream(file));
+			parse(new BufferedInputStream(new FileInputStream(file)));
 		}
 
 		public synchronized void parse(InputStream stream) throws IOException {
@@ -504,10 +504,10 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 	public synchronized void lockProfile(Profile profile) {
 		Profile internalProfile = internalGetProfile(profile.getProfileId());
 		if (internalProfile == null)
-			throw new IllegalArgumentException("Profile not registered."); //$NON-NLS-1$
+			throw new IllegalArgumentException(Messages.profile_not_registered);
 
 		if (profile.isChanged() || !checkTimestamps(profile, internalProfile))
-			throw new IllegalArgumentException("Profile not current."); //$NON-NLS-1$
+			throw new IllegalArgumentException(Messages.profile_not_current);
 
 		internalLockProfile(internalProfile);
 	}
@@ -536,7 +536,7 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 	public synchronized void unlockProfile(IProfile profile) {
 		Profile internalProfile = internalGetProfile(profile.getProfileId());
 		if (internalProfile == null)
-			throw new IllegalArgumentException("Profile not registered."); //$NON-NLS-1$
+			throw new IllegalArgumentException(Messages.profile_not_registered);
 		internalUnlockProfile(internalProfile);
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/messages.properties b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/messages.properties
index 0df6d21..43d5a03 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/messages.properties
@@ -9,11 +9,13 @@
 #     IBM Corporation - initial API and implementation
 ###############################################################################
 
+action_not_found=No action found for: {0}.
 download_artifact=Downloading artifacts
 download_no_repository=No artifact repository available
 
-Engine_Error_During_Phase=Error during phase: {0}.
-Engine_Operation_Canceled_By_User=Operation canceled by the user.
+error_parsing_profile=Error parsing profile
+error_persisting_profile=Error persisting profile
+failed_creating_metadata_cache=Metadata cache could not be created
 
 TouchpointManager_Null_Touchpoint_Type_Argument=A null or empty string was passed as the type of a touchpoint.
 TouchpointManager_Required_Touchpoint_Not_Found=The required {0} touchpoint is not included in the installation manager configuration.
@@ -25,37 +27,18 @@ TouchpointManager_Touchpoint_Type_Mismatch=The touchpoint registered for type {0
 TouchpointManager_Exception_Creating_Touchpoint_Extension=An exception was thrown and caught when creating the extension point instance for the {0} touchpoint.
 TouchpointManager_Null_Creating_Touchpoint_Extension=A null object was returned when creating the extension point instance for the {0} touchpoint.
 
-Install_Operand_Description=Installing unit {0}.
-Update_Operand_Description=Updating unit {0} with unit {1}.
-Uninstall_Operand_Description=Removing unit {0}.
-
-Phase_Collect_Error=An error occurred while collecting items to be installed
-Phase_Configure_Error=An error occurred while configuring the installed items
-Phase_Configure_Task=Configuring {0}
-Phase_Error=An error occurred during provisioning
-Phase_Install_Error=An error occurred while installing the items
-Phase_Install_Task=Installing {0}
-Phase_Sizing_Error=An error occurred while computing the size of the items to be installed
-Phase_Unconfigure_Error=An error occurred while unconfiguring the items to uninstall
-Phase_Uninstall_Error=An error occurred while uninstalling
-
-
-Profile_Not_Named_Self=Cannot have a profile named: {0}.
+ParameterizedProvisioningAction_action_or_parameters_null=Both action and action pararameters must not be null.
 Profile_Null_Profile_Id=A profile must have an non-empty id.
 Profile_Duplicate_Root_Profile_Id=Adding a profile with duplicate id: {0}.
-Profile_Duplicate_Child_Profile_Id=Adding a sub-profile with duplicate id: {0} to profile: {1}.
 Profile_Parent_Not_Found=Parent profile not found: {0}.
 
 SimpleProfileRegistry_Parser_Error_Parsing_Registry=\
 	Error parsing the profile registry.
 SimpleProfileRegistry_Parser_Has_Incompatible_Version=\
 	The profile registry has incompatible version {0}; expected {1}.
-SimpleProfileRegistry_Persist_To_Non_File_URL_Error=\
-	The profile registry cannot be persisted to non-file URL: {0}.
-SimpleProfileRegistry_Cannot_Create_File_Error=\
-	The profile registry file ''{0}'' could not be created.
 	
-InstallRegistry_Parser_Error_Parsing_Registry=\
-	Error parsing the install registry.
-InstallRegistry_Parser_Has_Incompatible_Version=\
-	The install registry has incompatible version {0}; expected {1}.
+profile_does_not_exist=Profile to be updated does not exist: {0}.
+profile_not_current=Profile not current.
+profile_not_registered=Profile not registered.
+reg_dir_not_available=Registry Directory not available
+thread_not_owner=Thread not lock owner
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Engine.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Engine.java
index fefd2ce..9bd53dc 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Engine.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Engine.java
@@ -27,13 +27,13 @@ public class Engine implements IEngine {
 
 		// TODO -- Messages
 		if (iprofile == null)
-			throw new IllegalArgumentException("Profile must not be null."); //$NON-NLS-1$
+			throw new IllegalArgumentException(Messages.null_profile);
 
 		if (phaseSet == null)
-			throw new IllegalArgumentException("PhaseSet must not be null."); //$NON-NLS-1$
+			throw new IllegalArgumentException(Messages.null_phaseset);
 
 		if (operands == null)
-			throw new IllegalArgumentException("Operands must not be null."); //$NON-NLS-1$
+			throw new IllegalArgumentException(Messages.null_operands);
 
 		if (context == null)
 			context = new ProvisioningContext();
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/EngineSession.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/EngineSession.java
index 24a667c..a35862e 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/EngineSession.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/EngineSession.java
@@ -80,10 +80,10 @@ public class EngineSession {
 
 	void recordPhaseStart(Phase phase) {
 		if (phase == null)
-			throw new IllegalArgumentException("Phase must not be null."); //$NON-NLS-1$
+			throw new IllegalArgumentException(Messages.null_phase);
 
 		if (currentPhase != null)
-			throw new IllegalStateException("A phase is already started."); //$NON-NLS-1$
+			throw new IllegalStateException(Messages.phase_started);
 
 		currentPhase = phase;
 		currentActionRecords = new ArrayList();
@@ -91,10 +91,10 @@ public class EngineSession {
 
 	void recordPhaseEnd(Phase phase) {
 		if (currentPhase == null)
-			throw new IllegalStateException("There is no phase to end."); //$NON-NLS-1$
+			throw new IllegalStateException(Messages.phase_not_started);
 
 		if (currentPhase != phase)
-			throw new IllegalArgumentException("Current phase does not match argument."); //$NON-NLS-1$
+			throw new IllegalArgumentException(Messages.not_current_phase);
 
 		phaseActionRecordsPairs.add(new Object[] {currentPhase, currentActionRecords});
 		currentPhase = null;
@@ -104,7 +104,7 @@ public class EngineSession {
 
 	void recordAction(ProvisioningAction action, Operand operand) {
 		if (action == null || operand == null)
-			throw new IllegalArgumentException("Action and InstallableUnitOperand must not be null."); //$NON-NLS-1$
+			throw new IllegalArgumentException(Messages.action_or_iu_operand_null);
 
 		if (currentRecord == null || operand != currentRecord.operand) {
 			currentRecord = new ActionsRecord(operand);
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/InstallableUnitEvent.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/InstallableUnitEvent.java
index 646fce7..38fd92a 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/InstallableUnitEvent.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/InstallableUnitEvent.java
@@ -39,7 +39,7 @@ public class InstallableUnitEvent extends EventObject {
 		this.profile = profile;
 		this.operand = operand;
 		if (type != UNINSTALL && type != INSTALL)
-			throw new IllegalArgumentException("type must be either UNINSTALL(0) or INSTALL(1)"); //$NON-NLS-1$
+			throw new IllegalArgumentException(Messages.InstallableUnitEvent_type_not_install_or_uninstall);
 		this.type = type;
 		this.result = result;
 
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/InstallableUnitPhase.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/InstallableUnitPhase.java
index f43e5fe..ff62252 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/InstallableUnitPhase.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/InstallableUnitPhase.java
@@ -31,7 +31,7 @@ public abstract class InstallableUnitPhase extends Phase {
 			Touchpoint touchpoint = TouchpointManager.getInstance().getTouchpoint(type);
 			//abort the entire phase if any required touchpoint is missing
 			if (touchpoint == null) {
-				status.add(new Status(IStatus.ERROR, EngineActivator.ID, NLS.bind(Messages.TouchpointManager_Required_Touchpoint_Not_Found, type), null));
+				status.add(new Status(IStatus.ERROR, EngineActivator.ID, NLS.bind(Messages.required_touchpoint_not_found, type), null));
 				return;
 			}
 			if (!touchpointToTouchpointParameters.containsKey(touchpoint)) {
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Messages.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Messages.java
new file mode 100644
index 0000000..5c28ab1
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Messages.java
@@ -0,0 +1,41 @@
+/*******************************************************************************
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.provisional.p2.engine;
+
+import org.eclipse.osgi.util.NLS;
+
+public class Messages extends NLS {
+	private static final String BUNDLE_NAME = "org.eclipse.equinox.internal.provisional.p2.engine.messages"; //$NON-NLS-1$
+	public static String action_or_iu_operand_null;
+	public static String not_current_phase;
+	public static String null_operands;
+	public static String null_phase;
+	public static String null_phases;
+	public static String null_phaseset;
+	public static String null_profile;
+	public static String required_touchpoint_not_found;
+	public static String phase_error;
+	public static String phase_not_started;
+	public static String phase_started;
+	public static String phaseid_not_positive;
+	public static String phaseid_not_set;
+	public static String Engine_Operation_Canceled_By_User;
+	public static String InstallableUnitEvent_type_not_install_or_uninstall;
+
+	static {
+		// initialize resource bundle
+		NLS.initializeMessages(BUNDLE_NAME, Messages.class);
+	}
+
+	private Messages() {
+		//
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Phase.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Phase.java
index d51152d..786f0ef 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Phase.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Phase.java
@@ -13,7 +13,6 @@ package org.eclipse.equinox.internal.provisional.p2.engine;
 import java.util.*;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.engine.EngineActivator;
-import org.eclipse.equinox.internal.p2.engine.Messages;
 
 public abstract class Phase {
 	protected static final String PARM_OPERAND = "operand"; //$NON-NLS-1$
@@ -30,9 +29,9 @@ public abstract class Phase {
 
 	protected Phase(String phaseId, int weight) {
 		if (phaseId == null || phaseId.length() == 0)
-			throw new IllegalArgumentException("Phase id must be set."); //$NON-NLS-1$
+			throw new IllegalArgumentException(Messages.phaseid_not_set);
 		if (weight <= 0)
-			throw new IllegalArgumentException("Phase weight must be positive."); //$NON-NLS-1$
+			throw new IllegalArgumentException(Messages.phaseid_not_positive);
 		this.weight = weight;
 		this.phaseId = phaseId;
 	}
@@ -176,7 +175,7 @@ public abstract class Phase {
 	 * this phase. Subclasses should override.
 	 */
 	protected String getProblemMessage() {
-		return Messages.Phase_Error;
+		return Messages.phase_error;
 	}
 
 }
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/PhaseSet.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/PhaseSet.java
index ec81e35..5dfa5db 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/PhaseSet.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/PhaseSet.java
@@ -18,7 +18,7 @@ public abstract class PhaseSet {
 
 	public PhaseSet(Phase[] phases) {
 		if (phases == null)
-			throw new IllegalArgumentException("Phases must not be null"); //$NON-NLS-1$
+			throw new IllegalArgumentException(Messages.null_phases);
 
 		this.phases = phases;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/messages.properties b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/messages.properties
new file mode 100644
index 0000000..ee9ccc6
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/messages.properties
@@ -0,0 +1,25 @@
+###############################################################################
+# Copyright (c) 2007, 2008 IBM Corporation and others.
+# All rights reserved. This program and the accompanying materials
+# are made available under the terms of the Eclipse Public License v1.0
+# which accompanies this distribution, and is available at
+# http://www.eclipse.org/legal/epl-v10.html
+#
+# Contributors:
+#     IBM Corporation - initial API and implementation
+###############################################################################
+action_or_iu_operand_null=Action and InstallableUnitOperand must not be null.
+not_current_phase=Current phase does not match argument.
+null_operands=Operands must not be null.
+null_phase=Phase must not be null.
+null_phases=Phases must not be null
+null_phaseset=PhaseSet must not be null.
+null_profile=Profile must not be null.
+required_touchpoint_not_found=The required {0} touchpoint was not found
+phase_error=An error occurred during provisioning.
+phase_not_started=There is no phase to end.
+phase_started=A phase is already started.
+phaseid_not_positive=Phase weight must be positive.
+phaseid_not_set=Phase id must be set.
+Engine_Operation_Canceled_By_User=Operation canceled by the user.
+InstallableUnitEvent_type_not_install_or_uninstall=type must be either UNINSTALL(0) or INSTALL(1)
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Collect.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Collect.java
index 1ee60e7..f7a1d19 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Collect.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Collect.java
@@ -14,7 +14,6 @@ import java.util.*;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.p2.engine.DownloadManager;
-import org.eclipse.equinox.internal.p2.engine.Messages;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRequest;
 import org.eclipse.equinox.internal.provisional.p2.engine.*;
 
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Configure.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Configure.java
index 8a666f6..78e7f25 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Configure.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Configure.java
@@ -12,7 +12,6 @@ package org.eclipse.equinox.internal.provisional.p2.engine.phases;
 
 import java.util.Map;
 import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.internal.p2.engine.Messages;
 import org.eclipse.equinox.internal.provisional.p2.engine.*;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Messages.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Messages.java
new file mode 100644
index 0000000..6daf467
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Messages.java
@@ -0,0 +1,35 @@
+/*******************************************************************************
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.provisional.p2.engine.phases;
+
+import org.eclipse.osgi.util.NLS;
+
+class Messages extends NLS {
+	private static final String BUNDLE_NAME = "org.eclipse.equinox.internal.p2.engine.phases.messages"; //$NON-NLS-1$
+	public static String Phase_Collect_Error;
+	public static String Phase_Install_Error;
+	public static String Phase_Configure_Error;
+	public static String Phase_Configure_Task;
+	public static String Phase_Install_Task;
+	public static String Phase_Sizing_Error;
+	public static String Phase_Unconfigure_Error;
+	public static String Phase_Uninstall_Error;
+
+	static {
+		// initialize resource bundles
+		NLS.initializeMessages(BUNDLE_NAME, Messages.class);
+	}
+
+	private Messages() {
+		// Do not instantiate
+	}
+
+}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Sizing.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Sizing.java
index 301a6eb..14befe2 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Sizing.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Sizing.java
@@ -16,7 +16,6 @@ import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.engine.EngineActivator;
-import org.eclipse.equinox.internal.p2.engine.Messages;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.*;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.engine.*;
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Unconfigure.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Unconfigure.java
index a6f4af1..e35d418 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Unconfigure.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Unconfigure.java
@@ -12,7 +12,6 @@ package org.eclipse.equinox.internal.provisional.p2.engine.phases;
 
 import java.util.Map;
 import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.internal.p2.engine.Messages;
 import org.eclipse.equinox.internal.provisional.p2.engine.*;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/messages.properties b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/messages.properties
new file mode 100644
index 0000000..2d12c8b
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/messages.properties
@@ -0,0 +1,19 @@
+###############################################################################
+# Copyright (c) 2007, 2008 IBM Corporation and others.
+# All rights reserved. This program and the accompanying materials
+# are made available under the terms of the Eclipse Public License v1.0
+# which accompanies this distribution, and is available at
+# http://www.eclipse.org/legal/epl-v10.html
+#
+# Contributors:
+#     IBM Corporation - initial API and implementation
+###############################################################################
+
+Phase_Collect_Error=An error occurred while collecting items to be installed
+Phase_Configure_Error=An error occurred while configuring the installed items
+Phase_Configure_Task=Configuring {0}
+Phase_Install_Error=An error occurred while installing the items
+Phase_Install_Task=Installing {0}
+Phase_Sizing_Error=An error occurred while computing the size of the items to be installed
+Phase_Unconfigure_Error=An error occurred while unconfiguring the items to uninstall
+Phase_Uninstall_Error=An error occurred while uninstalling
commit 9bd56ca46e9025857039c7f0cf0de607be5ca527
Author: Simon Kaegi <skaegi>
Date:   Tue Apr 8 01:51:59 2008 +0000

    Bug 222565 Strings need to be externalized
    +copyrights

10	0	bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/BundlePoolFilteredListener.java
14	4	bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java
10	0	bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepositoryFactory.java
16	6	bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java
10	0	bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepositoryFactory.java
31	0	bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/Messages.java
5	0	bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/messages.properties
10	0	bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/DropinsRepositoryListener.java
10	0	bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/BundlePoolFilteredListener.java
14	4	bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java
10	0	bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepositoryFactory.java
16	6	bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java
10	0	bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepositoryFactory.java
31	0	bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/Messages.java
5	0	bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/messages.properties
10	0	bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/DropinsRepositoryListener.java
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/BundlePoolFilteredListener.java b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/BundlePoolFilteredListener.java
index 6a73117..fc7e65e 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/BundlePoolFilteredListener.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/BundlePoolFilteredListener.java
@@ -1,3 +1,13 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
 package org.eclipse.equinox.internal.p2.extensionlocation;
 
 import java.io.File;
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java
index cb74293..7d10767 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java
@@ -1,3 +1,13 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
 package org.eclipse.equinox.internal.p2.extensionlocation;
 
 import java.io.File;
@@ -40,7 +50,7 @@ public class ExtensionLocationArtifactRepository extends AbstractRepository impl
 			localRepositoryURL = stateDir.toURL();
 		} catch (MalformedURLException e) {
 			// unexpected
-			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, "Failed to create local repository", e)); //$NON-NLS-1$
+			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, Messages.failed_create_local_repo, e));
 		}
 
 		artifactRepository = (IFileArtifactRepository) initializeArtifactRepository(localRepositoryURL, "extension location implementation - " + location.toExternalForm()); //$NON-NLS-1$
@@ -73,7 +83,7 @@ public class ExtensionLocationArtifactRepository extends AbstractRepository impl
 
 	public static File getBaseDirectory(URL url) throws ProvisionException {
 		if (!FILE.equals(url.getProtocol()))
-			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, "location must use file protocol", null));
+			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, Messages.not_file_protocol, null));
 
 		String path = url.getPath();
 		File base = new File(path);
@@ -82,7 +92,7 @@ public class ExtensionLocationArtifactRepository extends AbstractRepository impl
 		}
 
 		if (!base.isDirectory())
-			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, "location not a directory", null));
+			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, Messages.not_directory, null));
 
 		if (isBaseDirectory(base))
 			return base;
@@ -91,7 +101,7 @@ public class ExtensionLocationArtifactRepository extends AbstractRepository impl
 		if (isBaseDirectory(eclipseBase))
 			return eclipseBase;
 
-		throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, "location is not an extension", null));
+		throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, Messages.not_eclipse_extension, null));
 	}
 
 	private static boolean isBaseDirectory(File base) {
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepositoryFactory.java
index 83cb924..064223e 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepositoryFactory.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepositoryFactory.java
@@ -1,3 +1,13 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
 package org.eclipse.equinox.internal.p2.extensionlocation;
 
 import java.net.URL;
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java
index 8e5b53e..c36db2f 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java
@@ -1,3 +1,13 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
 package org.eclipse.equinox.internal.p2.extensionlocation;
 
 import java.io.File;
@@ -41,7 +51,7 @@ public class ExtensionLocationMetadataRepository extends AbstractRepository impl
 			localRepositoryURL = stateDir.toURL();
 		} catch (MalformedURLException e) {
 			// unexpected
-			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, "Failed to create local repository", e)); //$NON-NLS-1$
+			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, Messages.failed_create_local_artifact_repository, e));
 		}
 
 		metadataRepository = initializeMetadataRepository(localRepositoryURL, "extension location implementation - " + location.toExternalForm()); //$NON-NLS-1$
@@ -87,7 +97,7 @@ public class ExtensionLocationMetadataRepository extends AbstractRepository impl
 
 	public static File getBaseDirectory(URL url) throws ProvisionException {
 		if (!FILE.equals(url.getProtocol()))
-			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, "location must use file protocol", null));
+			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, Messages.not_file_protocol, null));
 
 		String path = url.getPath();
 		File base = new File(path);
@@ -96,7 +106,7 @@ public class ExtensionLocationMetadataRepository extends AbstractRepository impl
 		}
 
 		if (!base.isDirectory())
-			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, "location not a directory", null));
+			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, Messages.not_directory, null));
 
 		if (isBaseDirectory(base))
 			return base;
@@ -105,7 +115,7 @@ public class ExtensionLocationMetadataRepository extends AbstractRepository impl
 		if (isBaseDirectory(eclipseBase))
 			return eclipseBase;
 
-		throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, "location is not an extension", null));
+		throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, Messages.not_eclipse_extension, null));
 	}
 
 	private static boolean isBaseDirectory(File base) {
@@ -121,7 +131,7 @@ public class ExtensionLocationMetadataRepository extends AbstractRepository impl
 	public Map getProperties() {
 		if (metadataRepository == null)
 			return super.getProperties();
-		else
-			return metadataRepository.getProperties();
+
+		return metadataRepository.getProperties();
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepositoryFactory.java
index 31da09c..e7f10f1 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepositoryFactory.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepositoryFactory.java
@@ -1,3 +1,13 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
 package org.eclipse.equinox.internal.p2.extensionlocation;
 
 import java.net.URL;
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/Messages.java b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/Messages.java
new file mode 100644
index 0000000..7a19441
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/Messages.java
@@ -0,0 +1,31 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.extensionlocation;
+
+import org.eclipse.osgi.util.NLS;
+
+public class Messages extends NLS {
+	private static final String BUNDLE_NAME = "org.eclipse.equinox.internal.p2.extensionlocation.messages"; //$NON-NLS-1$
+	public static String failed_create_local_artifact_repository;
+	public static String failed_create_local_repo;
+	public static String not_directory;
+	public static String not_eclipse_extension;
+	public static String not_file_protocol;
+
+	static {
+		// initialize resource bundle
+		NLS.initializeMessages(BUNDLE_NAME, Messages.class);
+	}
+
+	private Messages() {
+		//
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/messages.properties b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/messages.properties
new file mode 100644
index 0000000..6cdfad4
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/messages.properties
@@ -0,0 +1,5 @@
+failed_create_local_artifact_repository=Failed to create local repository
+failed_create_local_repo=Failed to create local repository
+not_directory=location not a directory
+not_eclipse_extension=location is not an extension
+not_file_protocol=location must use file protocol
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/DropinsRepositoryListener.java b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/DropinsRepositoryListener.java
index c2f9c6e..5778031 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/DropinsRepositoryListener.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/DropinsRepositoryListener.java
@@ -1,3 +1,13 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
 package org.eclipse.equinox.internal.p2.reconciler.dropins;
 
 import java.io.*;
diff --git a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/BundlePoolFilteredListener.java b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/BundlePoolFilteredListener.java
index 6a73117..fc7e65e 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/BundlePoolFilteredListener.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/BundlePoolFilteredListener.java
@@ -1,3 +1,13 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
 package org.eclipse.equinox.internal.p2.extensionlocation;
 
 import java.io.File;
diff --git a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java
index cb74293..7d10767 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java
@@ -1,3 +1,13 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
 package org.eclipse.equinox.internal.p2.extensionlocation;
 
 import java.io.File;
@@ -40,7 +50,7 @@ public class ExtensionLocationArtifactRepository extends AbstractRepository impl
 			localRepositoryURL = stateDir.toURL();
 		} catch (MalformedURLException e) {
 			// unexpected
-			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, "Failed to create local repository", e)); //$NON-NLS-1$
+			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, Messages.failed_create_local_repo, e));
 		}
 
 		artifactRepository = (IFileArtifactRepository) initializeArtifactRepository(localRepositoryURL, "extension location implementation - " + location.toExternalForm()); //$NON-NLS-1$
@@ -73,7 +83,7 @@ public class ExtensionLocationArtifactRepository extends AbstractRepository impl
 
 	public static File getBaseDirectory(URL url) throws ProvisionException {
 		if (!FILE.equals(url.getProtocol()))
-			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, "location must use file protocol", null));
+			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, Messages.not_file_protocol, null));
 
 		String path = url.getPath();
 		File base = new File(path);
@@ -82,7 +92,7 @@ public class ExtensionLocationArtifactRepository extends AbstractRepository impl
 		}
 
 		if (!base.isDirectory())
-			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, "location not a directory", null));
+			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, Messages.not_directory, null));
 
 		if (isBaseDirectory(base))
 			return base;
@@ -91,7 +101,7 @@ public class ExtensionLocationArtifactRepository extends AbstractRepository impl
 		if (isBaseDirectory(eclipseBase))
 			return eclipseBase;
 
-		throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, "location is not an extension", null));
+		throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, Messages.not_eclipse_extension, null));
 	}
 
 	private static boolean isBaseDirectory(File base) {
diff --git a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepositoryFactory.java
index 83cb924..064223e 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepositoryFactory.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepositoryFactory.java
@@ -1,3 +1,13 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
 package org.eclipse.equinox.internal.p2.extensionlocation;
 
 import java.net.URL;
diff --git a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java
index 8e5b53e..c36db2f 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java
@@ -1,3 +1,13 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
 package org.eclipse.equinox.internal.p2.extensionlocation;
 
 import java.io.File;
@@ -41,7 +51,7 @@ public class ExtensionLocationMetadataRepository extends AbstractRepository impl
 			localRepositoryURL = stateDir.toURL();
 		} catch (MalformedURLException e) {
 			// unexpected
-			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, "Failed to create local repository", e)); //$NON-NLS-1$
+			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, Messages.failed_create_local_artifact_repository, e));
 		}
 
 		metadataRepository = initializeMetadataRepository(localRepositoryURL, "extension location implementation - " + location.toExternalForm()); //$NON-NLS-1$
@@ -87,7 +97,7 @@ public class ExtensionLocationMetadataRepository extends AbstractRepository impl
 
 	public static File getBaseDirectory(URL url) throws ProvisionException {
 		if (!FILE.equals(url.getProtocol()))
-			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, "location must use file protocol", null));
+			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, Messages.not_file_protocol, null));
 
 		String path = url.getPath();
 		File base = new File(path);
@@ -96,7 +106,7 @@ public class ExtensionLocationMetadataRepository extends AbstractRepository impl
 		}
 
 		if (!base.isDirectory())
-			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, "location not a directory", null));
+			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, Messages.not_directory, null));
 
 		if (isBaseDirectory(base))
 			return base;
@@ -105,7 +115,7 @@ public class ExtensionLocationMetadataRepository extends AbstractRepository impl
 		if (isBaseDirectory(eclipseBase))
 			return eclipseBase;
 
-		throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, "location is not an extension", null));
+		throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, Messages.not_eclipse_extension, null));
 	}
 
 	private static boolean isBaseDirectory(File base) {
@@ -121,7 +131,7 @@ public class ExtensionLocationMetadataRepository extends AbstractRepository impl
 	public Map getProperties() {
 		if (metadataRepository == null)
 			return super.getProperties();
-		else
-			return metadataRepository.getProperties();
+
+		return metadataRepository.getProperties();
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepositoryFactory.java b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepositoryFactory.java
index 31da09c..e7f10f1 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepositoryFactory.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepositoryFactory.java
@@ -1,3 +1,13 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
 package org.eclipse.equinox.internal.p2.extensionlocation;
 
 import java.net.URL;
diff --git a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/Messages.java b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/Messages.java
new file mode 100644
index 0000000..7a19441
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/Messages.java
@@ -0,0 +1,31 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.extensionlocation;
+
+import org.eclipse.osgi.util.NLS;
+
+public class Messages extends NLS {
+	private static final String BUNDLE_NAME = "org.eclipse.equinox.internal.p2.extensionlocation.messages"; //$NON-NLS-1$
+	public static String failed_create_local_artifact_repository;
+	public static String failed_create_local_repo;
+	public static String not_directory;
+	public static String not_eclipse_extension;
+	public static String not_file_protocol;
+
+	static {
+		// initialize resource bundle
+		NLS.initializeMessages(BUNDLE_NAME, Messages.class);
+	}
+
+	private Messages() {
+		//
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/messages.properties b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/messages.properties
new file mode 100644
index 0000000..6cdfad4
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/messages.properties
@@ -0,0 +1,5 @@
+failed_create_local_artifact_repository=Failed to create local repository
+failed_create_local_repo=Failed to create local repository
+not_directory=location not a directory
+not_eclipse_extension=location is not an extension
+not_file_protocol=location must use file protocol
diff --git a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/DropinsRepositoryListener.java b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/DropinsRepositoryListener.java
index c2f9c6e..5778031 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/DropinsRepositoryListener.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/DropinsRepositoryListener.java
@@ -1,3 +1,13 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials 
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
 package org.eclipse.equinox.internal.p2.reconciler.dropins;
 
 import java.io.*;
commit 2d739fa908fbab0b73cabde1c7a5e3a329e82104
Author: Simon Kaegi <skaegi>
Date:   Tue Apr 8 14:31:20 2008 +0000

    Bug 222565 Strings need to be externalized

3	3	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/AggregatedBundleRepository.java
3	3	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
11	10	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/LazyManipulator.java
13	0	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Messages.java
2	2	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/MetadataGeneratorUtils.java
9	10	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/PlatformConfigurationWrapper.java
2	1	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Util.java
13	0	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/messages.properties
4	3	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/ConfigurationParser.java
3	2	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/ConfigurationWriter.java
1	1	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/Feature.java
16	0	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/Messages.java
3	3	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/Utils.java
4	0	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/messages.properties
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/AggregatedBundleRepository.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/AggregatedBundleRepository.java
index 8618595..09a325a 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/AggregatedBundleRepository.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/AggregatedBundleRepository.java
@@ -25,7 +25,7 @@ public class AggregatedBundleRepository extends AbstractArtifactRepository imple
 	private final Collection bundleRepositories;
 
 	public AggregatedBundleRepository(Collection bundleRepositories) {
-		super(REPOSITORY_TYPE, REPOSITORY_TYPE, "1.0", null, null, null);
+		super(REPOSITORY_TYPE, REPOSITORY_TYPE, "1.0", null, null, null); //$NON-NLS-1$
 		this.bundleRepositories = bundleRepositories;
 	}
 
@@ -90,10 +90,10 @@ public class AggregatedBundleRepository extends AbstractArtifactRepository imple
 	}
 
 	public IStatus getArtifact(IArtifactDescriptor descriptor, OutputStream destination, IProgressMonitor monitor) {
-		throw new UnsupportedOperationException("Repository does not support artifact retrieval");
+		throw new UnsupportedOperationException(Messages.artifact_retrieval_unsupported);
 	}
 
 	public IStatus getArtifacts(IArtifactRequest[] requests, IProgressMonitor monitor) {
-		throw new UnsupportedOperationException("Repository does not support artifact retrieval");
+		throw new UnsupportedOperationException(Messages.artifact_retrieval_unsupported);
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
index 63bd157..101997c 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/EclipseTouchpoint.java
@@ -74,9 +74,9 @@ public class EclipseTouchpoint extends Touchpoint {
 		try {
 			configURL = configDir.toURI().toURL();
 		} catch (IllegalArgumentException e) {
-			throw new CoreException(Util.createError("Configuration directory is not absolute.", e)); //$NON-NLS-1$
+			throw new CoreException(Util.createError(Messages.config_dir_not_absolute, e));
 		} catch (MalformedURLException e) {
-			throw new CoreException(Util.createError("No URL protocol handler.", e)); //$NON-NLS-1$
+			throw new CoreException(Util.createError(Messages.protocol_handler_error, e));
 		}
 		return configURL;
 	}
@@ -147,7 +147,7 @@ public class EclipseTouchpoint extends Touchpoint {
 		}
 
 		// should not occur
-		throw new IllegalStateException("Unexpected state: prepareIU"); //$NON-NLS-1$
+		throw new IllegalStateException(Messages.unexpected_prepareiu_error);
 	}
 
 	public static IStatus loadManipulator(Manipulator manipulator) {
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/LazyManipulator.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/LazyManipulator.java
index fd9e895..0599ce5 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/LazyManipulator.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/LazyManipulator.java
@@ -11,6 +11,7 @@
 package org.eclipse.equinox.internal.p2.touchpoint.eclipse;
 
 import java.io.IOException;
+import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
 import org.eclipse.equinox.internal.provisional.frameworkadmin.*;
 import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
 import org.osgi.framework.*;
@@ -36,22 +37,22 @@ public class LazyManipulator implements Manipulator {
 
 		manipulator = getFrameworkManipulator();
 		if (manipulator == null)
-			throw new IllegalStateException("Could not acquire the framework manipulator service."); //$NON-NLS-1$
+			throw new IllegalStateException(Messages.failed_acquire_framework_manipulator);
 
 		LauncherData launcherData = manipulator.getLauncherData();
 		launcherData.setFwConfigLocation(Util.getConfigurationFolder(profile));
 		launcherData.setLauncher(Util.getLauncherPath(profile));
 		try {
 			manipulator.load();
-		} catch (IllegalStateException e2) {
-			// TODO if fwJar is not included, this exception will be thrown. But ignore it. 
-			//				e2.printStackTrace();
-		} catch (FrameworkAdminRuntimeException e2) {
-			// TODO Auto-generated catch block
-			e2.printStackTrace();
-		} catch (IOException e2) {
-			// TODO Auto-generated catch block
-			e2.printStackTrace();
+		} catch (IllegalStateException e) {
+			//if fwJar is not included, this exception will be thrown. But ignore it. 
+			LogHelper.log(Util.createError(Messages.error_loading_manipulator, e));
+		} catch (FrameworkAdminRuntimeException e) {
+			// TODO: consider throwing an exception
+			LogHelper.log(Util.createError(Messages.error_loading_manipulator, e));
+		} catch (IOException e) {
+			// TODO: consider throwing an exception
+			LogHelper.log(Util.createError(Messages.error_loading_manipulator, e));
 		}
 		//TODO These values should be inserted by a configuration unit (bug 204124)
 		manipulator.getConfigData().setFwDependentProp("eclipse.p2.profile", profile.getProfileId()); //$NON-NLS-1$
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Messages.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Messages.java
index 4da476d..4e1c10c 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Messages.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Messages.java
@@ -16,13 +16,26 @@ public class Messages extends NLS {
 	private static final String BUNDLE_NAME = "org.eclipse.equinox.internal.p2.touchpoint.eclipse.messages"; //$NON-NLS-1$
 	public static String error_loading_manipulator;
 	public static String BundlePool;
+	public static String failed_acquire_framework_manipulator;
 	public static String failed_prepareIU;
+	public static String feature_not_found;
 	public static String error_saving_manipulator;
 	public static String error_saving_platform_configuration;
 	public static String error_saving_source_bundles_list;
 	public static String error_constructing_platform_configuration_url;
+	public static String error_parsing_configuration;
 	public static String generator_not_available;
 	public static String artifact_file_not_found;
+	public static String artifact_retrieval_unsupported;
+	public static String bundle_pool_not_writeable;
+	public static String cannot_calculate_extension_location;
+	public static String cannot_create_url_from_file;
+	public static String config_dir_not_absolute;
+	public static String parent_dir_features;
+	public static String platform_config_unavailable;
+	public static String platformadmin_not_registered;
+	public static String protocol_handler_error;
+	public static String unexpected_prepareiu_error;
 
 	static {
 		// load message values from bundle file and assign to fields below
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/MetadataGeneratorUtils.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/MetadataGeneratorUtils.java
index 9dffd53..1d687dd 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/MetadataGeneratorUtils.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/MetadataGeneratorUtils.java
@@ -32,10 +32,10 @@ public class MetadataGeneratorUtils {
 
 		ServiceReference reference = context.getServiceReference(PlatformAdmin.class.getName());
 		if (reference == null)
-			throw new IllegalStateException("PlatformAdmin not registered.");
+			throw new IllegalStateException(Messages.platformadmin_not_registered);
 		PlatformAdmin platformAdmin = (PlatformAdmin) context.getService(reference);
 		if (platformAdmin == null)
-			throw new IllegalStateException("PlatformAdmin not registered.");
+			throw new IllegalStateException(Messages.platformadmin_not_registered);
 
 		try {
 			StateObjectFactory stateObjectFactory = platformAdmin.getFactory();
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/PlatformConfigurationWrapper.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/PlatformConfigurationWrapper.java
index 9f9171d..e95df2d 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/PlatformConfigurationWrapper.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/PlatformConfigurationWrapper.java
@@ -20,6 +20,7 @@ import org.eclipse.equinox.internal.p2.update.*;
 import org.eclipse.equinox.internal.provisional.frameworkadmin.BundleInfo;
 import org.eclipse.equinox.internal.provisional.frameworkadmin.Manipulator;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.osgi.util.NLS;
 
 /**	
  * 	This class provides a wrapper for reading and writing platform.xml.
@@ -85,7 +86,7 @@ public class PlatformConfigurationWrapper {
 			}
 		} catch (ProvisionException pe) {
 			// TODO: Make this a real message
-			throw new IllegalStateException("Error parsing platform configuration."); //$NON-NLS-1$;
+			throw new IllegalStateException(Messages.error_parsing_configuration);
 		}
 
 		poolSite = getSite(poolURL);
@@ -145,22 +146,20 @@ public class PlatformConfigurationWrapper {
 	public IStatus addFeatureEntry(File file, String id, String version, String pluginIdentifier, String pluginVersion, boolean primary, String application, URL[] root) {
 		loadDelegate();
 		if (configuration == null)
-			return new Status(IStatus.WARNING, Activator.ID, "Platform configuration not available.", null); //$NON-NLS-1$
+			return new Status(IStatus.WARNING, Activator.ID, Messages.platform_config_unavailable, null);
 
 		URL fileURL = null;
 		try {
 			File featureDir = file.getParentFile();
-			if (featureDir == null || !featureDir.getName().equals("features"))
-				return new Status(IStatus.ERROR, Activator.ID, "Parent directory should be \"features\": " + file.getAbsolutePath(), null);
+			if (featureDir == null || !featureDir.getName().equals("features")) //$NON-NLS-1$
+				return new Status(IStatus.ERROR, Activator.ID, NLS.bind(Messages.parent_dir_features, file.getAbsolutePath()), null);
 			File locationDir = featureDir.getParentFile();
 			if (locationDir == null)
-				return new Status(IStatus.ERROR, Activator.ID, "Unable to calculate extension location for: " + file.getAbsolutePath(), null);
+				return new Status(IStatus.ERROR, Activator.ID, NLS.bind(Messages.cannot_calculate_extension_location, file.getAbsolutePath()), null);
 
 			fileURL = locationDir.toURL();
 		} catch (MalformedURLException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-			return new Status(IStatus.ERROR, Activator.ID, "Unable to create URL from file: " + file.getAbsolutePath(), null);
+			return new Status(IStatus.ERROR, Activator.ID, NLS.bind(Messages.cannot_create_url_from_file, file.getAbsolutePath()), e);
 		}
 		Site site = getSite(fileURL);
 		if (site == null) {
@@ -181,13 +180,13 @@ public class PlatformConfigurationWrapper {
 	public IStatus removeFeatureEntry(String id, String version) {
 		loadDelegate();
 		if (configuration == null)
-			return new Status(IStatus.WARNING, Activator.ID, "Platform configuration not available.", null); //$NON-NLS-1$
+			return new Status(IStatus.WARNING, Activator.ID, Messages.platform_config_unavailable, null);
 
 		Site site = getSite(id, version);
 		if (site == null)
 			site = poolSite;
 		Feature removedFeature = site.removeFeature(makeFeatureURL(id, version));
-		return (removedFeature != null ? Status.OK_STATUS : new Status(IStatus.ERROR, Activator.ID, "A feature with the specified id was not found.", null)); //$NON-NLS-1$
+		return (removedFeature != null ? Status.OK_STATUS : new Status(IStatus.ERROR, Activator.ID, Messages.feature_not_found, null));
 	}
 
 	/*
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Util.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Util.java
index 2845963..f335a4b 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Util.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Util.java
@@ -28,6 +28,7 @@ import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.internal.provisional.p2.metadata.TouchpointData;
 import org.eclipse.osgi.service.environment.EnvironmentInfo;
 import org.eclipse.osgi.util.ManifestElement;
+import org.eclipse.osgi.util.NLS;
 import org.osgi.framework.BundleException;
 import org.osgi.framework.Constants;
 
@@ -80,7 +81,7 @@ public class Util {
 			return (IFileArtifactRepository) bundlePool;
 		} catch (ProvisionException e) {
 			LogHelper.log(e);
-			throw new IllegalArgumentException("Bundle pool repository not writeable: " + location); //$NON-NLS-1$
+			throw new IllegalArgumentException(NLS.bind(Messages.bundle_pool_not_writeable, location));
 		}
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/messages.properties b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/messages.properties
index 099b626..8e09876 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/messages.properties
@@ -10,11 +10,24 @@
 ###############################################################################
 
 error_loading_manipulator=Error while loading manipulator.
+failed_acquire_framework_manipulator=Could not acquire the framework manipulator service.
 failed_prepareIU=Failed to prepare partial IU: {0}.
+feature_not_found=A feature with the specified id was not found.
 error_saving_manipulator=Error saving manipulator.
 error_saving_platform_configuration=Error saving platform configuration.
 error_saving_source_bundles_list=Error saving source bundles list.
 error_constructing_platform_configuration_url=Error constructing platform configuration url.
+error_parsing_configuration=Error parsing platform configuration.
 generator_not_available=The partial IU could not be updated. Generator not available: {0}.
 artifact_file_not_found=The artifact file for {0} was not found.
+artifact_retrieval_unsupported=Repository does not support artifact retrieval
+bundle_pool_not_writeable=Bundle pool repository not writeable: {0}
 BundlePool=Bundle pool
+cannot_calculate_extension_location=Unable to calculate extension location for: {0}.
+cannot_create_url_from_file=Unable to create URL from file: {0}.
+config_dir_not_absolute=Configuration directory is not absolute.
+parent_dir_features=Parent directory should be "features": {0}.
+platform_config_unavailable=Platform configuration not available.
+platformadmin_not_registered=PlatformAdmin not registered.
+protocol_handler_error=No URL protocol handler.
+unexpected_prepareiu_error=Unexpected state: prepareIU
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/ConfigurationParser.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/ConfigurationParser.java
index 1f08569..ec5526f 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/ConfigurationParser.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/ConfigurationParser.java
@@ -15,6 +15,7 @@ import java.net.URL;
 import java.util.StringTokenizer;
 import javax.xml.parsers.*;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.osgi.util.NLS;
 import org.w3c.dom.*;
 import org.xml.sax.SAXException;
 
@@ -148,11 +149,11 @@ public class ConfigurationParser implements ConfigurationConstants {
 			Document document = load(input);
 			return process(document);
 		} catch (IOException e) {
-			throw new ProvisionException("An error occurred reading the platform configuration file: " + file, e);
+			throw new ProvisionException(NLS.bind(Messages.error_reading_config, file), e);
 		} catch (ParserConfigurationException e) {
-			throw new ProvisionException("An error occurred reading the platform configuration", e);
+			throw new ProvisionException(Messages.error_parsing_config, e);
 		} catch (SAXException e) {
-			throw new ProvisionException("An error occurred reading the platform configuration", e);
+			throw new ProvisionException(Messages.error_parsing_config, e);
 		}
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/ConfigurationWriter.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/ConfigurationWriter.java
index f986e53..f3eda70 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/ConfigurationWriter.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/ConfigurationWriter.java
@@ -14,6 +14,7 @@ import java.io.*;
 import java.net.URL;
 import java.util.*;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.osgi.util.NLS;
 
 /**
  * @since 1.0
@@ -53,9 +54,9 @@ public class ConfigurationWriter implements ConfigurationConstants {
 
 			writer.endTag(ELEMENT_CONFIG);
 		} catch (UnsupportedEncodingException e) {
-			throw new ProvisionException("Exception when saving configuration to: " + location, e);
+			throw new ProvisionException(NLS.bind(Messages.error_saving_config, location), e);
 		} catch (FileNotFoundException e) {
-			throw new ProvisionException("Exception when saving configuration to: " + location, e);
+			throw new ProvisionException(NLS.bind(Messages.error_saving_config, location), e);
 		} finally {
 			if (writer != null) {
 				writer.flush();
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/Feature.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/Feature.java
index 54ca2d0..46e2a70 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/Feature.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/Feature.java
@@ -23,7 +23,7 @@ public class Feature {
 	public Feature(Site site) {
 		super();
 		if (site == null)
-			throw new IllegalArgumentException("Features should not have an empty site."); //$NON-NLS-1$
+			throw new IllegalArgumentException(Messages.empty_feature_site);
 		this.site = site;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/Messages.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/Messages.java
new file mode 100644
index 0000000..e9a9121
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/Messages.java
@@ -0,0 +1,16 @@
+package org.eclipse.equinox.internal.p2.update;
+
+import org.eclipse.osgi.util.NLS;
+
+public class Messages extends NLS {
+	private static final String BUNDLE_NAME = "org.eclipse.equinox.internal.p2.update.messages"; //$NON-NLS-1$
+	public static String empty_feature_site;
+	public static String error_saving_config;
+	public static String error_reading_config;
+	public static String error_parsing_config;
+
+	static {
+		// load message values from bundle file and assign to fields below
+		NLS.initializeMessages(BUNDLE_NAME, Messages.class);
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/Utils.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/Utils.java
index 871f1bd..9309b45 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/Utils.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/Utils.java
@@ -147,12 +147,12 @@ public class Utils {
 		if (i == 0) {
 			return toRel.toOSString();
 		}
-		String result = "";
+		String result = ""; //$NON-NLS-1$
 		for (int j = 0; j < (base.segmentCount() - i); j++) {
-			result += ".." + Path.SEPARATOR;
+			result += ".." + IPath.SEPARATOR; //$NON-NLS-1$
 		}
 		if (i == toRel.segmentCount())
-			return ".";
+			return "."; //$NON-NLS-1$
 		result += toRel.setDevice(null).removeFirstSegments(i).toOSString();
 		return result;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/messages.properties b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/messages.properties
new file mode 100644
index 0000000..7c66ecb
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/update/messages.properties
@@ -0,0 +1,4 @@
+empty_feature_site=Features should not have an empty site.
+error_parsing_config=An error occurred parsing the platform configuration
+error_reading_config=An error occurred reading the platform configuration file: {0}.
+error_saving_config=Exception when saving configuration to: {0}.
commit f264b60b7aa053fb11748fcef31dfac116e39811
Author: Simon Kaegi <skaegi>
Date:   Tue Apr 8 21:23:41 2008 +0000

    Bug 222565 Strings need to be externalized

3	3	bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/BackupFiles.java
5	0	bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/Messages.java
54	36	bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/NativeTouchpoint.java
1	1	bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/Permissions.java
4	4	bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/Util.java
6	7	bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/Zip.java
7	1	bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/messages.properties
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/BackupFiles.java b/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/BackupFiles.java
index f878e29..4b33342 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/BackupFiles.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/BackupFiles.java
@@ -125,7 +125,7 @@ public class BackupFiles {
 	private void restoreFilesFromBackup(File propsFile, IProgressMonitor monitor) throws IOException {
 		BackupProperties backupProps = new BackupProperties(propsFile);
 		monitor.beginTask(NLS.bind(Messages.restoring, propsFile.toString()), 3);
-		monitor.subTask("");
+		monitor.subTask(""); //$NON-NLS-1$
 		for (Iterator i = backupProps.getFilesToDelete().iterator(); i.hasNext();) {
 			String name = (String) i.next();
 			File full = new File(backupProps.getRootDir(), name);
@@ -135,7 +135,7 @@ public class BackupFiles {
 		File zipFile = backupProps.getArchive();
 		if (zipFile.exists()) { // only exists if files were saved
 			SubProgressMonitor sub = new SubProgressMonitor(monitor, 1, SubProgressMonitor.PREPEND_MAIN_LABEL_TO_SUBTASK);
-			FileUtils.unzipFile(zipFile, backupProps.getRootDir(), "", sub);
+			FileUtils.unzipFile(zipFile, backupProps.getRootDir(), "", sub); //$NON-NLS-1$
 			zipFile.delete();
 		} else {
 			monitor.worked(1);
@@ -152,7 +152,7 @@ public class BackupFiles {
 
 	// Backup files are just 0.properties, 1.properties, etc.
 	// Get the next unused one.
-	private File getBackupProperties() {
+	File getBackupProperties() {
 		for (int i = 0;; i += 1) {
 			File result = getBackupProperties(i);
 			if (!result.exists())
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/Messages.java b/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/Messages.java
index 7ec1e92..eaebfcb 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/Messages.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/Messages.java
@@ -20,7 +20,12 @@ public class Messages extends NLS {
 		NLS.initializeMessages(BUNDLE_NAME, Messages.class);
 	}
 
+	public static String artifact_not_available;
+	public static String artifact_repo_not_found;
+	public static String could_not_obtain_download_cache;
+	public static String download_cache_not_writeable;
 	public static String unzipping;
 	public static String restoring;
+	public static String param_not_set;
 
 }
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/NativeTouchpoint.java b/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/NativeTouchpoint.java
index bbf5942..369d6ea 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/NativeTouchpoint.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/NativeTouchpoint.java
@@ -22,9 +22,27 @@ import org.eclipse.equinox.internal.provisional.p2.core.location.AgentLocation;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
 import org.eclipse.equinox.internal.provisional.p2.engine.*;
 import org.eclipse.equinox.internal.provisional.p2.metadata.*;
+import org.eclipse.osgi.util.NLS;
 import org.osgi.framework.Version;
 
 public class NativeTouchpoint extends Touchpoint {
+	private static final String PARM_TARGET_FILE = "targetFile"; //$NON-NLS-1$
+	private static final String PARM_PERMISSIONS = "permissions"; //$NON-NLS-1$
+	private static final String PARM_TARGET_DIR = "targetDir"; //$NON-NLS-1$
+	private static final String PARM_TARGET = "target"; //$NON-NLS-1$
+	private static final String ACTION_CHMOD = "chmod"; //$NON-NLS-1$
+	private static final String PARM_IU = "iu"; //$NON-NLS-1$
+	private static final String PIPE = "|"; //$NON-NLS-1$
+	private static final String PARM_SOURCE = "source"; //$NON-NLS-1$
+	private static final String PARM_ARTIFACT = "@artifact"; //$NON-NLS-1$
+	private static final String PARM_INSTALL_FOLDER = "installFolder"; //$NON-NLS-1$
+	private static final String NATIVE_TOUCHPOINT_TYPE = "org.eclipse.equinox.p2.native"; //$NON-NLS-1$
+	private static final String ACTION_CLEANUPZIP = "cleanupzip"; //$NON-NLS-1$
+	private static final String ACTION_UNZIP = "unzip"; //$NON-NLS-1$
+	private static final String PARM_ARTIFACT_REQUESTS = "artifactRequests"; //$NON-NLS-1$
+	private static final String PARM_OPERAND = "operand"; //$NON-NLS-1$
+	private static final String PARM_PROFILE = "profile"; //$NON-NLS-1$
+	private static final String ACTION_COLLECT = "collect"; //$NON-NLS-1$
 	private static final String ID = "org.eclipse.equinox.p2.touchpoint.natives"; //$NON-NLS-1$
 
 	protected static IStatus createError(String message) {
@@ -32,14 +50,14 @@ public class NativeTouchpoint extends Touchpoint {
 	}
 
 	public ProvisioningAction getAction(String actionId) {
-		if (actionId.equals("collect")) {
+		if (actionId.equals(ACTION_COLLECT)) {
 			return new ProvisioningAction() {
 				public IStatus execute(Map parameters) {
-					IProfile profile = (IProfile) parameters.get("profile");
-					InstallableUnitOperand operand = (InstallableUnitOperand) parameters.get("operand");
+					IProfile profile = (IProfile) parameters.get(PARM_PROFILE);
+					InstallableUnitOperand operand = (InstallableUnitOperand) parameters.get(PARM_OPERAND);
 					try {
 						IArtifactRequest[] requests = collect(operand.second(), profile);
-						Collection artifactRequests = (Collection) parameters.get("artifactRequests");
+						Collection artifactRequests = (Collection) parameters.get(PARM_ARTIFACT_REQUESTS);
 						artifactRequests.add(requests);
 					} catch (ProvisionException e) {
 						return e.getStatus();
@@ -54,7 +72,7 @@ public class NativeTouchpoint extends Touchpoint {
 			};
 		}
 
-		if (actionId.equals("unzip")) {
+		if (actionId.equals(ACTION_UNZIP)) {
 			return new ProvisioningAction() {
 				public IStatus execute(Map parameters) {
 					return unzip(parameters);
@@ -65,7 +83,7 @@ public class NativeTouchpoint extends Touchpoint {
 				}
 			};
 		}
-		if (actionId.equals("cleanupzip")) {
+		if (actionId.equals(ACTION_CLEANUPZIP)) {
 			return new ProvisioningAction() {
 				public IStatus execute(Map parameters) {
 					return cleanupzip(parameters);
@@ -77,18 +95,18 @@ public class NativeTouchpoint extends Touchpoint {
 			};
 		}
 
-		if (actionId.equals("chmod")) {
+		if (actionId.equals(ACTION_CHMOD)) {
 			return new ProvisioningAction() {
 				public IStatus execute(Map parameters) {
-					String targetDir = (String) parameters.get("targetDir");
+					String targetDir = (String) parameters.get(PARM_TARGET_DIR);
 					if (targetDir == null)
-						return createError("The \"targetDir\" parameter was not set in the \"chmod\" action.");
-					String targetFile = (String) parameters.get("targetFile");
+						return createError(NLS.bind(Messages.param_not_set, PARM_TARGET_DIR, ACTION_CHMOD));
+					String targetFile = (String) parameters.get(PARM_TARGET_FILE);
 					if (targetFile == null)
-						return createError("The \"targetFile\" parameter was not set in the \"chmod\" action.");
-					String permissions = (String) parameters.get("permissions");
+						return createError(NLS.bind(Messages.param_not_set, PARM_TARGET_FILE, ACTION_CHMOD));
+					String permissions = (String) parameters.get(PARM_PERMISSIONS);
 					if (permissions == null)
-						return createError("The \"permissions\" parameter was not set in the \"chmod\" action");
+						return createError(NLS.bind(Messages.param_not_set, PARM_PERMISSIONS, ACTION_CHMOD));
 
 					new Permissions().chmod(targetDir, targetFile, permissions);
 					return Status.OK_STATUS;
@@ -105,7 +123,7 @@ public class NativeTouchpoint extends Touchpoint {
 	}
 
 	public TouchpointType getTouchpointType() {
-		return MetadataFactory.createTouchpointType("org.eclipse.equinox.p2.native", new Version(1, 0, 0));
+		return MetadataFactory.createTouchpointType(NATIVE_TOUCHPOINT_TYPE, new Version(1, 0, 0));
 	}
 
 	IArtifactRequest[] collect(IInstallableUnit installableUnit, IProfile profile) throws ProvisionException {
@@ -142,10 +160,10 @@ public class NativeTouchpoint extends Touchpoint {
 	static private IFileArtifactRepository getDownloadCacheRepo() throws ProvisionException {
 		URL location = getDownloadCacheLocation();
 		if (location == null)
-			throw new IllegalStateException("Could not obtain the download cache location.");
+			throw new IllegalStateException(Messages.could_not_obtain_download_cache);
 		IArtifactRepositoryManager manager = getArtifactRepositoryManager();
 		if (manager == null)
-			throw new IllegalStateException("The artifact repository manager could not be found.");
+			throw new IllegalStateException(Messages.artifact_repo_not_found);
 		IArtifactRepository repository;
 		try {
 			repository = manager.loadRepository(location, null);
@@ -159,7 +177,7 @@ public class NativeTouchpoint extends Touchpoint {
 
 		IFileArtifactRepository downloadCache = (IFileArtifactRepository) repository.getAdapter(IFileArtifactRepository.class);
 		if (downloadCache == null)
-			throw new ProvisionException("Agent download cache not writeable: " + location);
+			throw new ProvisionException(NLS.bind(Messages.download_cache_not_writeable, location));
 		return downloadCache;
 	}
 
@@ -169,24 +187,24 @@ public class NativeTouchpoint extends Touchpoint {
 	}
 
 	public IStatus initializePhase(IProgressMonitor monitor, IProfile profile, String phaseId, Map touchpointParameters) {
-		touchpointParameters.put("installFolder", getInstallFolder(profile));
+		touchpointParameters.put(PARM_INSTALL_FOLDER, getInstallFolder(profile));
 		return null;
 	}
 
 	IStatus unzip(Map parameters) {
-		String source = (String) parameters.get("source");
+		String source = (String) parameters.get(PARM_SOURCE);
 		if (source == null)
-			return createError("The \"source\" parameter was not set in the \"unzip\" action.");
+			return createError(NLS.bind(Messages.param_not_set, PARM_SOURCE, ACTION_UNZIP));
 
 		String originalSource = source;
-		String target = (String) parameters.get("target");
+		String target = (String) parameters.get(PARM_TARGET);
 		if (target == null)
-			return createError("The \"target\" parameter was not set in the \"unzip\" action.");
+			return createError(NLS.bind(Messages.param_not_set, PARM_TARGET, ACTION_UNZIP));
 
-		IInstallableUnit iu = (IInstallableUnit) parameters.get("iu");
-		Profile profile = (Profile) parameters.get("profile");
+		IInstallableUnit iu = (IInstallableUnit) parameters.get(PARM_IU);
+		Profile profile = (Profile) parameters.get(PARM_PROFILE);
 
-		if (source.equals("@artifact")) {
+		if (source.equals(PARM_ARTIFACT)) {
 			//TODO: fix wherever this occurs -- investigate as this is probably not desired
 			if (iu.getArtifacts() == null || iu.getArtifacts().length == 0)
 				return Status.OK_STATUS;
@@ -201,37 +219,37 @@ public class NativeTouchpoint extends Touchpoint {
 			}
 			File fileLocation = downloadCache.getArtifactFile(artifactKey);
 			if ((fileLocation == null) || !fileLocation.exists())
-				return createError("The artifact for " + artifactKey + " is not available");
+				return createError(NLS.bind(Messages.artifact_not_available, artifactKey));
 			source = fileLocation.getAbsolutePath();
 		}
 
 		File[] unzippedFiles = new Zip().unzip(source, target, null);
 		StringBuffer unzippedFileNameBuffer = new StringBuffer();
 		for (int i = 0; i < unzippedFiles.length; i++)
-			unzippedFileNameBuffer.append(unzippedFiles[i].getAbsolutePath()).append("|");
+			unzippedFileNameBuffer.append(unzippedFiles[i].getAbsolutePath()).append(PIPE);
 
-		profile.setInstallableUnitProperty(iu, "unzipped" + "|" + originalSource + "|" + target, unzippedFileNameBuffer.toString());
+		profile.setInstallableUnitProperty(iu, "unzipped" + PIPE + originalSource + PIPE + target, unzippedFileNameBuffer.toString()); //$NON-NLS-1$
 
 		return Status.OK_STATUS;
 	}
 
 	protected IStatus cleanupzip(Map parameters) {
-		String source = (String) parameters.get("source");
+		String source = (String) parameters.get(PARM_SOURCE);
 		if (source == null)
-			return createError("The \"source\" parameter was not set in the \"cleanupzip\" action.");
-		String target = (String) parameters.get("target");
+			return createError(NLS.bind(Messages.param_not_set, PARM_SOURCE, ACTION_CLEANUPZIP));
+		String target = (String) parameters.get(PARM_TARGET);
 		if (target == null)
-			return createError("The \"target\" parameter was not set in the \"cleanupzip\" action.");
+			return createError(NLS.bind(Messages.param_not_set, PARM_TARGET, ACTION_CLEANUPZIP));
 
-		IInstallableUnit iu = (IInstallableUnit) parameters.get("iu");
-		IProfile profile = (IProfile) parameters.get("profile");
+		IInstallableUnit iu = (IInstallableUnit) parameters.get(PARM_IU);
+		IProfile profile = (IProfile) parameters.get(PARM_PROFILE);
 
-		String unzipped = profile.getInstallableUnitProperty(iu, "unzipped" + "|" + source + "|" + target);
+		String unzipped = profile.getInstallableUnitProperty(iu, "unzipped" + PIPE + source + PIPE + target); //$NON-NLS-1$
 
 		if (unzipped == null)
 			return Status.OK_STATUS;
 
-		StringTokenizer tokenizer = new StringTokenizer(unzipped, "|");
+		StringTokenizer tokenizer = new StringTokenizer(unzipped, PIPE);
 		List directories = new ArrayList();
 		while (tokenizer.hasMoreTokens()) {
 			String fileName = tokenizer.nextToken();
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/Permissions.java b/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/Permissions.java
index 98bdcdf..29e9f6d 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/Permissions.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/Permissions.java
@@ -17,7 +17,7 @@ public class Permissions {
 	public void chmod(String targetDir, String targetFile, String perms) {
 		Runtime r = Runtime.getRuntime();
 		try {
-			r.exec("chmod " + perms + " " + targetDir + IPath.SEPARATOR + targetFile);
+			r.exec("chmod " + perms + " " + targetDir + IPath.SEPARATOR + targetFile); //$NON-NLS-1$ //$NON-NLS-2$
 		} catch (IOException e) {
 			// FIXME:  we should probably throw some sort of error here
 		}
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/Util.java b/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/Util.java
index 04ae8a0..c60fae9 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/Util.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/Util.java
@@ -19,7 +19,7 @@ public class Util {
 	}
 
 	public static void log(IStatus status) {
-		System.out.println(Util.class.getName() + " " + status);
+		System.out.println(Util.class.getName() + " " + status); //$NON-NLS-1$
 	}
 
 	public static CoreException coreException(String msg) {
@@ -43,7 +43,7 @@ public class Util {
 		if (monitor == null || monitor instanceof NullProgressMonitor) {
 			monitor = null;
 		} else {
-			monitor.beginTask("", n);
+			monitor.beginTask("", n); //$NON-NLS-1$
 		}
 		IProgressMonitor[] result = new IProgressMonitor[n];
 		for (int i = 0; i < n; i += 1) {
@@ -55,8 +55,8 @@ public class Util {
 	private static IProgressMonitor createSubProgressMonitor(IProgressMonitor monitor, int ticks) {
 		if (monitor == null)
 			return new NullProgressMonitor();
-		else
-			return new SubProgressMonitor(monitor, ticks, SubProgressMonitor.PREPEND_MAIN_LABEL_TO_SUBTASK);
+
+		return new SubProgressMonitor(monitor, ticks, SubProgressMonitor.PREPEND_MAIN_LABEL_TO_SUBTASK);
 	}
 
 }
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/Zip.java b/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/Zip.java
index 3add7ce..f44ecc8 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/Zip.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/Zip.java
@@ -16,6 +16,7 @@ import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.equinox.internal.p2.core.helpers.FileUtils;
 import org.eclipse.osgi.util.NLS;
 
+//TODO: Do we need this class or is just using FileUtils.unzip sufficient?
 //TODO Be careful here with the permissions.... We may need to have a proper unzip technology here that supports file permissions for linux
 public class Zip {
 	public File[] unzip(String source, String destination, String backupDir) {
@@ -27,7 +28,7 @@ public class Zip {
 		File zipFile = new File(source);
 		if (zipFile == null || !zipFile.exists()) {
 			// internal error?
-			System.out.println(this.getClass().getName() + " the files to be unzipped is not here");
+			Util.log(this.getClass().getName() + " the files to be unzipped is not here");
 			//			throw Util.coreException(null, NLS.bind(Messages.failed_to_download_artifact, source));
 		}
 
@@ -52,8 +53,7 @@ public class Zip {
 					BackupFiles backupFiles = new BackupFiles(new File(backupDir));
 					backupFiles.backupFilesInZip(backupDir, zipFile.toURL(), new File(destination), null);
 				} catch (IOException e) {
-					System.out.println(this.getClass().getName() + " something went wrong when backing up the files");
-					e.printStackTrace();
+					Util.log(this.getClass().getName() + " something went wrong when backing up the files");
 					//				throw Util.coreException(e, NLS.bind(Messages.error_backing_up, zipFile));
 				} finally {
 					//				backupPM.done();
@@ -63,10 +63,9 @@ public class Zip {
 				String taskName = NLS.bind(Messages.unzipping, source);
 				return FileUtils.unzipFile(zipFile, new File(destination), taskName, new NullProgressMonitor());
 			} catch (IOException e) {
-				System.out.println(this.getClass().getName() + " something went wrong when unzipping");
-				System.out.println("zipfile: " + zipFile.getAbsolutePath());
-				System.out.println("destination: " + destination);
-				e.printStackTrace();
+				Util.log(this.getClass().getName() + " something went wrong when unzipping");
+				Util.log("zipfile: " + zipFile.getAbsolutePath());
+				Util.log("destination: " + destination);
 				//				throw Util.coreException(e.getMessage());
 			} finally {
 				//				unzipPM.done();
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/messages.properties b/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/messages.properties
index 15e212e..b18ba37 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.natives/src/org/eclipse/equinox/internal/p2/touchpoint/natives/messages.properties
@@ -1,3 +1,6 @@
+artifact_repo_not_found=The artifact repository manager could not be found.
+could_not_obtain_download_cache=Could not obtain the download cache location.
+download_cache_not_writeable=Agent download cache not writeable: {0}.
 ###############################################################################
 # Copyright (c) 2007 IBM Corporation and others.
 # All rights reserved. This program and the accompanying materials
@@ -10,9 +13,12 @@
 ###############################################################################
 
 # NativeInstallAdapter
+artifact_not_available=The artifact for {0} is not available.
 restoring=Restoring {0}
 
-# Util
+
 unzipping=Extracting {0}
 
+param_not_set=The \"{0}\" parameter was not set in the \"{1}\" action.
+
 
commit 26937065e846960bcb63483582793c8437c75a47
Author: Simon Kaegi <skaegi>
Date:   Wed Apr 9 20:33:33 2008 +0000

    Bug 222565 Strings need to be externalized

2	2	bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/DropinsRepositoryListener.java
2	0	bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Messages.java
1	1	bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/ProfileSynchronizer.java
2	0	bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/messages.properties
2	2	bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/DropinsRepositoryListener.java
2	0	bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Messages.java
1	1	bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/ProfileSynchronizer.java
2	0	bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/messages.properties
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/DropinsRepositoryListener.java b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/DropinsRepositoryListener.java
index 5778031..fdc3157 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/DropinsRepositoryListener.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/DropinsRepositoryListener.java
@@ -179,7 +179,7 @@ public class DropinsRepositoryListener extends RepositoryListener {
 		if (reference != null)
 			manager = (IMetadataRepositoryManager) context.getService(reference);
 		if (manager == null)
-			throw new IllegalStateException("MetadataRepositoryManager not registered.");
+			throw new IllegalStateException(Messages.metadata_repo_manager_not_registered);
 
 		try {
 			manager.removeRepository(new URL(urlString));
@@ -213,7 +213,7 @@ public class DropinsRepositoryListener extends RepositoryListener {
 		if (reference != null)
 			manager = (IArtifactRepositoryManager) context.getService(reference);
 		if (manager == null)
-			throw new IllegalStateException("ArtifactRepositoryManager not registered.");
+			throw new IllegalStateException(Messages.artifact_repo_manager_not_registered);
 
 		try {
 			manager.removeRepository(new URL(urlString));
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Messages.java b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Messages.java
index ab0a16b..aa0e61b 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Messages.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Messages.java
@@ -17,7 +17,9 @@ import org.eclipse.osgi.util.NLS;
  */
 public class Messages extends NLS {
 	private static final String BUNDLE_NAME = "org.eclipse.equinox.internal.p2.reconciler.dropins.messages"; //$NON-NLS-1$
+	public static String artifact_repo_manager_not_registered;
 	public static String errorProcessingConfg;
+	public static String metadata_repo_manager_not_registered;
 	static {
 		// initialize resource bundle
 		NLS.initializeMessages(BUNDLE_NAME, Messages.class);
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/ProfileSynchronizer.java b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/ProfileSynchronizer.java
index 228b517..af450a3 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/ProfileSynchronizer.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/ProfileSynchronizer.java
@@ -248,7 +248,7 @@ public class ProfileSynchronizer {
 	private IInstallableUnit createRootIU(List children) {
 		InstallableUnitDescription iu = new MetadataFactory.InstallableUnitDescription();
 		iu.setId(SUPER_IU);
-		iu.setVersion(new Version("1.0.0.v" + System.currentTimeMillis()));
+		iu.setVersion(new Version("1.0.0.v" + System.currentTimeMillis())); //$NON-NLS-1$
 		List required = new ArrayList();
 		for (Iterator iter = children.iterator(); iter.hasNext();) {
 			IInstallableUnit next = (IInstallableUnit) iter.next();
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/messages.properties b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/messages.properties
index 6719e56..063c543 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/messages.properties
@@ -8,4 +8,6 @@
 # Contributors:
 #     IBM Corporation - initial API and implementation
 ###############################################################################
+artifact_repo_manager_not_registered=ArtifactRepositoryManager not registered.
 errorProcessingConfg=Exception while processing configuration.
+metadata_repo_manager_not_registered=MetadataRepositoryManager not registered.
diff --git a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/DropinsRepositoryListener.java b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/DropinsRepositoryListener.java
index 5778031..fdc3157 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/DropinsRepositoryListener.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/DropinsRepositoryListener.java
@@ -179,7 +179,7 @@ public class DropinsRepositoryListener extends RepositoryListener {
 		if (reference != null)
 			manager = (IMetadataRepositoryManager) context.getService(reference);
 		if (manager == null)
-			throw new IllegalStateException("MetadataRepositoryManager not registered.");
+			throw new IllegalStateException(Messages.metadata_repo_manager_not_registered);
 
 		try {
 			manager.removeRepository(new URL(urlString));
@@ -213,7 +213,7 @@ public class DropinsRepositoryListener extends RepositoryListener {
 		if (reference != null)
 			manager = (IArtifactRepositoryManager) context.getService(reference);
 		if (manager == null)
-			throw new IllegalStateException("ArtifactRepositoryManager not registered.");
+			throw new IllegalStateException(Messages.artifact_repo_manager_not_registered);
 
 		try {
 			manager.removeRepository(new URL(urlString));
diff --git a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Messages.java b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Messages.java
index ab0a16b..aa0e61b 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Messages.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Messages.java
@@ -17,7 +17,9 @@ import org.eclipse.osgi.util.NLS;
  */
 public class Messages extends NLS {
 	private static final String BUNDLE_NAME = "org.eclipse.equinox.internal.p2.reconciler.dropins.messages"; //$NON-NLS-1$
+	public static String artifact_repo_manager_not_registered;
 	public static String errorProcessingConfg;
+	public static String metadata_repo_manager_not_registered;
 	static {
 		// initialize resource bundle
 		NLS.initializeMessages(BUNDLE_NAME, Messages.class);
diff --git a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/ProfileSynchronizer.java b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/ProfileSynchronizer.java
index 228b517..af450a3 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/ProfileSynchronizer.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/ProfileSynchronizer.java
@@ -248,7 +248,7 @@ public class ProfileSynchronizer {
 	private IInstallableUnit createRootIU(List children) {
 		InstallableUnitDescription iu = new MetadataFactory.InstallableUnitDescription();
 		iu.setId(SUPER_IU);
-		iu.setVersion(new Version("1.0.0.v" + System.currentTimeMillis()));
+		iu.setVersion(new Version("1.0.0.v" + System.currentTimeMillis())); //$NON-NLS-1$
 		List required = new ArrayList();
 		for (Iterator iter = children.iterator(); iter.hasNext();) {
 			IInstallableUnit next = (IInstallableUnit) iter.next();
diff --git a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/messages.properties b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/messages.properties
index 6719e56..063c543 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/messages.properties
@@ -8,4 +8,6 @@
 # Contributors:
 #     IBM Corporation - initial API and implementation
 ###############################################################################
+artifact_repo_manager_not_registered=ArtifactRepositoryManager not registered.
 errorProcessingConfg=Exception while processing configuration.
+metadata_repo_manager_not_registered=MetadataRepositoryManager not registered.

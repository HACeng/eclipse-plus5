commit d92ee2ee8335c152928d1f7a894c803396b1d2bf
Author: John Arthorne <johna>
Date:   Wed Dec 5 17:15:11 2007 +0000

    Bug 211934 [prov] MetadataCache shouldn't subclass URLMetadataRepository

1	1	bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvisioningHelper.java
1	1	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java
1	1	bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/p2/directorywatcher/ProvisioningListener.java
2	2	bundles/org.eclipse.equinox.p2.engine/META-INF/MANIFEST.MF
37	48	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/MetadataCache.java
4	16	bundles/org.eclipse.equinox.p2.exemplarysetup/src/org/eclipse/equinox/internal/p2/exemplarysetup/Activator.java
1	1	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java
3	0	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java
8	4	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java
5	0	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/p2/metadata/repository/IMetadataRepositoryManager.java
1	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/JarURLRepositoryTest.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/QueryableMetadataRepositoryManager.java
diff --git a/bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvisioningHelper.java b/bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvisioningHelper.java
index 398261f..d06e4cd 100644
--- a/bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvisioningHelper.java
+++ b/bundles/org.eclipse.equinox.p2.console/src/org/eclipse/equinox/internal/p2/console/ProvisioningHelper.java
@@ -44,7 +44,7 @@ public class ProvisioningHelper {
 		// for convenience create and add a repo here
 		// TODO need to get rid o fthe factory method.
 		String repositoryName = location + " - metadata"; //$NON-NLS-1$
-		IMetadataRepository result = manager.createRepository(location, repositoryName, "org.eclipse.equinox.p2.metadata.repository.simpleRepository"); //$NON-NLS-1$
+		IMetadataRepository result = manager.createRepository(location, repositoryName, IMetadataRepositoryManager.TYPE_SIMPLE_REPOSITORY);
 		return result;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java
index 53c3608..dc1050a 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java
@@ -43,7 +43,7 @@ public class SimpleDirector implements IDirector {
 		IMetadataRepositoryManager manager = (IMetadataRepositoryManager) ServiceHelper.getService(DirectorActivator.context, IMetadataRepositoryManager.class.getName());
 		IMetadataRepository rollbackRepo = manager.loadRepository(rollbackLocation, null);
 		if (rollbackRepo == null)
-			rollbackRepo = manager.createRepository(rollbackLocation, "Agent rollback repo", "org.eclipse.equinox.p2.metadata.repository.simpleRepository"); //$NON-NLS-1$//$NON-NLS-2$
+			rollbackRepo = manager.createRepository(rollbackLocation, "Agent rollback repo", IMetadataRepositoryManager.TYPE_SIMPLE_REPOSITORY); //$NON-NLS-1$
 		if (rollbackRepo == null)
 			throw new IllegalStateException("Unable to open or create Agent's rollback repository");
 		tagAsImplementation(rollbackRepo);
diff --git a/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/p2/directorywatcher/ProvisioningListener.java b/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/p2/directorywatcher/ProvisioningListener.java
index e00d9ee..e6fa220 100644
--- a/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/p2/directorywatcher/ProvisioningListener.java
+++ b/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/p2/directorywatcher/ProvisioningListener.java
@@ -177,7 +177,7 @@ public class ProvisioningListener extends DirectoryChangeListener {
 		// 	the given repo location is not an existing repo so we have to create something
 		// TODO for now create a random repo by default.
 		String repositoryName = location + " - metadata"; //$NON-NLS-1$
-		IMetadataRepository result = manager.createRepository(location, repositoryName, "org.eclipse.equinox.p2.metadata.repository.simpleRepository"); //$NON-NLS-1$
+		IMetadataRepository result = manager.createRepository(location, repositoryName, IMetadataRepositoryManager.TYPE_SIMPLE_REPOSITORY);
 		if (result != null)
 			provider.setMetadataRepository(result);
 	}
diff --git a/bundles/org.eclipse.equinox.p2.engine/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.engine/META-INF/MANIFEST.MF
index 236e20c..4ce21b1 100644
--- a/bundles/org.eclipse.equinox.p2.engine/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.engine/META-INF/MANIFEST.MF
@@ -12,10 +12,9 @@ Export-Package: org.eclipse.equinox.internal.p2.engine;x-internal:=true,
 Import-Package: javax.xml.parsers,
  org.eclipse.equinox.internal.p2.core.helpers,
  org.eclipse.equinox.internal.p2.metadata,
- org.eclipse.equinox.internal.p2.persistence,
  org.eclipse.equinox.internal.p2.metadata.repository,
  org.eclipse.equinox.internal.p2.metadata.repository.io,
- 
+ org.eclipse.equinox.internal.p2.persistence,
  org.eclipse.equinox.p2.artifact.repository,
  org.eclipse.equinox.p2.core,
  org.eclipse.equinox.p2.core.eventbus,
@@ -26,6 +25,7 @@ Import-Package: javax.xml.parsers,
  org.eclipse.equinox.p2.metadata.repository,
  org.eclipse.equinox.p2.query,
  org.eclipse.equinox.spi.p2.core.repository,
+ org.eclipse.equinox.spi.p2.metadata.repository,
  org.eclipse.osgi.service.datalocation;version="1.0.0",
  org.eclipse.osgi.service.resolver;version="1.1.0",
  org.eclipse.osgi.util;version="1.0.0",
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/MetadataCache.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/MetadataCache.java
index 5b7877a..86d262a 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/MetadataCache.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/MetadataCache.java
@@ -10,57 +10,57 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.installregistry;
 
-import java.io.*;
 import java.net.URL;
+import java.util.ArrayList;
 import java.util.EventObject;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
+import org.eclipse.equinox.internal.p2.core.helpers.URLUtil;
 import org.eclipse.equinox.internal.p2.engine.EngineActivator;
-import org.eclipse.equinox.internal.p2.metadata.repository.*;
 import org.eclipse.equinox.p2.core.eventbus.ProvisioningEventBus;
 import org.eclipse.equinox.p2.core.eventbus.ProvisioningListener;
 import org.eclipse.equinox.p2.core.location.AgentLocation;
+import org.eclipse.equinox.p2.core.repository.IRepository;
 import org.eclipse.equinox.p2.engine.*;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
+import org.eclipse.equinox.p2.metadata.repository.IMetadataRepositoryManager;
+import org.eclipse.equinox.spi.p2.metadata.repository.AbstractMetadataRepository;
 import org.osgi.framework.ServiceReference;
 
-public class MetadataCache extends URLMetadataRepository {
-
+public class MetadataCache {
 	static final private String REPOSITORY_NAME = "Agent Metadata Cache"; //$NON-NLS-1$
-	static final private String REPOSITORY_TYPE = MetadataCache.class.getName();
-	static final private Integer REPOSITORY_VERSION = new Integer(1);
-
-	transient private ServiceReference busReference;
-	transient private ProvisioningEventBus bus;
+	private ServiceReference busReference;
+	private ProvisioningEventBus bus;
+	private URL location;
+	//tracks the IUs that have been installed but not yet committed
+	final ArrayList toAdd = new ArrayList();
 
 	public MetadataCache() {
-		super();
-	}
-
-	public static MetadataCache getCacheInstance(MetadataRepositoryManager manager) {
 		AgentLocation agentLocation = (AgentLocation) ServiceHelper.getService(EngineActivator.getContext(), AgentLocation.class.getName());
-		URL url = (agentLocation != null ? agentLocation.getMetadataRepositoryURL() : null);
-		URL content = getActualLocation(url);
-		IMetadataRepository repository = manager.loadRepository(content, null);
-		if (repository == null || !(repository instanceof MetadataCache)) {
-			repository = new MetadataCache(url);
-			((MetadataCache) repository).initializeAfterLoad(url);
-			manager.addRepository(repository);
-		}
-		return (MetadataCache) repository;
+		location = (agentLocation != null ? agentLocation.getMetadataRepositoryURL() : null);
+		registerRepository();
+		hookListener();
 	}
 
-	// These are always created with file: URLs.  At least for now...
-	public MetadataCache(URL cacheLocation) {
-		super(REPOSITORY_NAME, REPOSITORY_TYPE, REPOSITORY_VERSION.toString(), cacheLocation, null, null);
-		content = getActualLocation(location);
+	private void registerRepository() {
+		IMetadataRepositoryManager manager = (IMetadataRepositoryManager) ServiceHelper.getService(EngineActivator.getContext(), IMetadataRepositoryManager.class.getName());
+		URL[] locations = manager.getKnownRepositories();
+		for (int i = 0; i < locations.length; i++) {
+			//nothing to do if repository manager already knows about metadata cache
+			if (URLUtil.sameURL(locations[i], location))
+				return;
+		}
+		//instruct the repository manager to construct a new metadata cache 
+		AbstractMetadataRepository repository = (AbstractMetadataRepository) manager.createRepository(location, REPOSITORY_NAME, IMetadataRepositoryManager.TYPE_SIMPLE_REPOSITORY);
 		// Set property indicating that the metadata cache is an implementation detail.
-		getModifiableProperties().put(IMPLEMENTATION_ONLY_KEY, Boolean.valueOf(true).toString());
+		repository.getModifiableProperties().put(IRepository.IMPLEMENTATION_ONLY_KEY, Boolean.valueOf(true).toString());
 	}
 
-	public void initializeAfterLoad(URL repoLocation) {
-		super.initializeAfterLoad(repoLocation);
+	AbstractMetadataRepository getRepository() {
+		IMetadataRepositoryManager manager = (IMetadataRepositoryManager) ServiceHelper.getService(EngineActivator.getContext(), IMetadataRepositoryManager.class.getName());
+		return (AbstractMetadataRepository) manager.loadRepository(location, null);
+	}
 
+	private void hookListener() {
 		// TODO: We should check for writing permission here, otherwise it may be too late
 		busReference = EngineActivator.getContext().getServiceReference(ProvisioningEventBus.class.getName());
 		bus = (ProvisioningEventBus) EngineActivator.getContext().getService(busReference);
@@ -74,30 +74,19 @@ public class MetadataCache extends URLMetadataRepository {
 					if (event.isPost() && event.getResult().isOK() && event.isInstall()) {
 						IInstallableUnit installedIU = event.getOperand().second();
 						if (installedIU != null)
-							units.add(installedIU.unresolved());
+							toAdd.add(installedIU);
 						return;
 					}
 				}
-				if (o instanceof CommitOperationEvent)
-					persist();
+				if (o instanceof CommitOperationEvent) {
+					IInstallableUnit[] toAddArray = (IInstallableUnit[]) toAdd.toArray(new IInstallableUnit[toAdd.size()]);
+					toAdd.clear();
+					getRepository().addInstallableUnits(toAddArray);
+				}
 				if (o instanceof RollbackOperationEvent)
-					new SimpleMetadataRepositoryFactory().restore(MetadataCache.this, location);
+					toAdd.clear();
 			}
 		});
 	}
 
-	protected void persist() {
-		if (!getContentURL().getProtocol().equals("file"))
-			throw new IllegalStateException("only file: URLs are supported for the metadata cache");
-		File contentFile = new File(getContentURL().getFile());
-		if (!contentFile.getParentFile().exists() && !contentFile.getParentFile().mkdirs())
-			throw new RuntimeException("can't persist the metadata cache");
-		try {
-			OutputStream outputStream = new BufferedOutputStream(new FileOutputStream(contentFile, false));;
-			new MetadataRepositoryIO().write(this, outputStream);
-		} catch (FileNotFoundException e) {
-			throw new RuntimeException("can't persist the metadata cache");
-		}
-	}
-
 }
diff --git a/bundles/org.eclipse.equinox.p2.exemplarysetup/src/org/eclipse/equinox/internal/p2/exemplarysetup/Activator.java b/bundles/org.eclipse.equinox.p2.exemplarysetup/src/org/eclipse/equinox/internal/p2/exemplarysetup/Activator.java
index d27e148..d501911 100644
--- a/bundles/org.eclipse.equinox.p2.exemplarysetup/src/org/eclipse/equinox/internal/p2/exemplarysetup/Activator.java
+++ b/bundles/org.eclipse.equinox.p2.exemplarysetup/src/org/eclipse/equinox/internal/p2/exemplarysetup/Activator.java
@@ -32,9 +32,6 @@ public class Activator implements BundleActivator {
 	private IInstallRegistry installRegistry;
 	private ServiceRegistration registrationInstallRegistry;
 
-	private MetadataCache metadataCache;
-	private ServiceRegistration registrationMetadataCache;
-
 	private MetadataRepositoryManager defaultManager;
 	private ServiceRegistration registrationDefaultManager;
 
@@ -81,7 +78,6 @@ public class Activator implements BundleActivator {
 		unregisterDirector();
 		unregisterPlanner();
 		unregisterInstallRegistry();
-		unregisterMetadataCache();
 		unregisterDefaultMetadataRepoManager();
 		unregisterProfileRegistry();
 		unregisterEventBus();
@@ -144,18 +140,10 @@ public class Activator implements BundleActivator {
 	//	}
 
 	private void registerMetadataCache() {
-		metadataCache = MetadataCache.getCacheInstance(defaultManager);
-		if (metadataCache != null) {
-			registrationMetadataCache = context.registerService(MetadataCache.class.getName(), metadataCache, null);
-		}
-	}
-
-	private void unregisterMetadataCache() {
-		if (registrationMetadataCache != null) {
-			registrationMetadataCache.unregister();
-		}
-		registrationMetadataCache = null;
-		metadataCache = null;
+		//TODO: we need to start metadata cache at a specific time, because it relies on IMetadataRepositoryManager
+		//being present. Really, MetadataCache should just wait until metadata repository service
+		//is available and then initialize itself
+		new MetadataCache();
 	}
 
 	private void registerInstallRegistry() {
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java
index d8bc22e..5b111ab 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java
@@ -142,7 +142,7 @@ public class EclipseGeneratorApplication implements IApplication {
 		// 	the given repo location is not an existing repo so we have to create something
 		// TODO for now create a random repo by default.
 		String repositoryName = metadataLocation + " - metadata"; //$NON-NLS-1$
-		IMetadataRepository result = manager.createRepository(location, repositoryName, "org.eclipse.equinox.p2.metadata.repository.simpleRepository"); //$NON-NLS-1$
+		IMetadataRepository result = manager.createRepository(location, repositoryName, IMetadataRepositoryManager.TYPE_SIMPLE_REPOSITORY);
 		if (result != null)
 			provider.setMetadataRepository(result);
 	}
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java
index 3c251ae..7f7e760 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java
@@ -278,6 +278,9 @@ public class MetadataRepositoryIO {
 						//can't create repository if missing type - this is already logged when parsing attributes
 						if (state.Type == null)
 							return;
+						//migration support for change to MetadataCache (bug 211934)
+						if (state.Type.equals("org.eclipse.equinox.internal.p2.installregistry.MetadataCache")) //$NON-NLS-1$
+							state.Type = "org.eclipse.equinox.internal.p2.metadata.repository.LocalMetadataRepository"; //$NON-NLS-1$
 						Class clazz = Class.forName(state.Type);
 						Object repositoryObject = clazz.newInstance();
 						if (repositoryObject instanceof AbstractMetadataRepository) {
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java
index 2d28953..f2c76e6 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryManager.java
@@ -8,6 +8,7 @@
  ******************************************************************************/
 package org.eclipse.equinox.internal.p2.metadata.repository;
 
+import java.lang.ref.SoftReference;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.*;
@@ -28,7 +29,7 @@ public class MetadataRepositoryManager implements IMetadataRepositoryManager {
 	static class RepositoryInfo {
 		String description;
 		String name;
-		IMetadataRepository repository;
+		SoftReference repository;
 		URL url;
 	}
 
@@ -52,7 +53,7 @@ public class MetadataRepositoryManager implements IMetadataRepositoryManager {
 
 	public void addRepository(IMetadataRepository repository) {
 		RepositoryInfo info = new RepositoryInfo();
-		info.repository = repository;
+		info.repository = new SoftReference(repository);
 		info.name = repository.getName();
 		info.description = repository.getDescription();
 		info.url = repository.getLocation();
@@ -179,8 +180,11 @@ public class MetadataRepositoryManager implements IMetadataRepositoryManager {
 				restoreRepositories();
 			for (Iterator it = repositories.values().iterator(); it.hasNext();) {
 				RepositoryInfo info = (RepositoryInfo) it.next();
-				if (URLUtil.sameURL(info.url, location))
-					return info.repository;
+				if (URLUtil.sameURL(info.url, location)) {
+					if (info.repository == null)
+						return null;
+					return (IMetadataRepository) info.repository.get();
+				}
 			}
 			return null;
 		}
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/p2/metadata/repository/IMetadataRepositoryManager.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/p2/metadata/repository/IMetadataRepositoryManager.java
index e56f08a..b98c571 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/p2/metadata/repository/IMetadataRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/p2/metadata/repository/IMetadataRepositoryManager.java
@@ -16,6 +16,11 @@ import org.eclipse.equinox.p2.query.IQueryable;
 
 public interface IMetadataRepositoryManager extends IQueryable {
 	/**
+	 * Repository type for a simple repository based on a URL or local file system location.
+	 */
+	public static final String TYPE_SIMPLE_REPOSITORY = "org.eclipse.equinox.p2.metadata.repository.simpleRepository";
+
+	/**
 	 * Adds a new metadata repository to the set of known repositories.
 	 * @param repository
 	 */
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/JarURLRepositoryTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/JarURLRepositoryTest.java
index 0920200..afc6a01 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/JarURLRepositoryTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/JarURLRepositoryTest.java
@@ -54,7 +54,7 @@ public class JarURLRepositoryTest extends TestCase {
 		deleteDirectory(testRepo);
 		testRepo.mkdir();
 		provider.setFlavor("jartest");
-		provider.setMetadataRepository(manager.createRepository(testRepo.toURL(), "testRepo", "org.eclipse.equinox.p2.metadata.repository.simpleRepository"));
+		provider.setMetadataRepository(manager.createRepository(testRepo.toURL(), "testRepo", IMetadataRepositoryManager.TYPE_SIMPLE_REPOSITORY));
 		IStatus result = new Generator(provider).generate();
 		FileUtils.zip(new File[] {testRepo}, new File(tempDir, "testRepo.jar"));
 		testRepoJar = new File(tempDir, "testRepo.jar");
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/QueryableMetadataRepositoryManager.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/QueryableMetadataRepositoryManager.java
index 513b883..0e68f46 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/QueryableMetadataRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/QueryableMetadataRepositoryManager.java
@@ -37,7 +37,7 @@ public class QueryableMetadataRepositoryManager implements IQueryable {
 		SubMonitor sub = SubMonitor.convert(monitor, ProvUIMessages.QueryableMetadataRepositoryManager_RepositoryQueryProgress, repos.length * 2);
 		for (int i = 0; i < repos.length; i++) {
 			IMetadataRepository repository = manager.loadRepository(repos[i], sub.newChild(1));
-			if (query.isMatch(repository))
+			if (repository != null && query.isMatch(repository))
 				result.accept(new MetadataRepositoryElement(repository));
 			sub.worked(1);
 		}
commit b9070e482c36a8ebcfffdad708d33fde02e77aeb
Author: John Arthorne <johna>
Date:   Wed Dec 5 17:16:51 2007 +0000

    Bug 211934 [prov] MetadataCache shouldn't subclass URLMetadataRepository

1	1	bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/p2/directorywatcher/RepositoryListener.java
0	6	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/p2/metadata/repository/IMetadataRepositoryManager.java
1	0	bundles/org.eclipse.equinox.p2.tests/META-INF/MANIFEST.MF
2	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
diff --git a/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/p2/directorywatcher/RepositoryListener.java b/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/p2/directorywatcher/RepositoryListener.java
index e08a23b..081b823 100644
--- a/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/p2/directorywatcher/RepositoryListener.java
+++ b/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/p2/directorywatcher/RepositoryListener.java
@@ -107,7 +107,7 @@ public class RepositoryListener extends DirectoryChangeListener {
 		try {
 			repository = manager.loadRepository(stateDirURL, null);
 			if (repository == null)
-				repository = manager.createRepository(stateDirURL, "metadata listener " + repositoryName, "org.eclipse.equinox.p2.metadata.repository.simpleRepository");
+				repository = manager.createRepository(stateDirURL, "metadata listener " + repositoryName, IMetadataRepositoryManager.TYPE_SIMPLE_REPOSITORY);
 		} finally {
 			context.ungetService(reference);
 		}
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/p2/metadata/repository/IMetadataRepositoryManager.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/p2/metadata/repository/IMetadataRepositoryManager.java
index b98c571..44f93c5 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/p2/metadata/repository/IMetadataRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/p2/metadata/repository/IMetadataRepositoryManager.java
@@ -21,12 +21,6 @@ public interface IMetadataRepositoryManager extends IQueryable {
 	public static final String TYPE_SIMPLE_REPOSITORY = "org.eclipse.equinox.p2.metadata.repository.simpleRepository";
 
 	/**
-	 * Adds a new metadata repository to the set of known repositories.
-	 * @param repository
-	 */
-	public void addRepository(IMetadataRepository repository);
-
-	/**
 	 * Creates and returns a metadata repository of the given type at the given location.
 	 * If a repository already exists at that location <code>null</code> is returned.
 	 * @param location the location for the new repository
diff --git a/bundles/org.eclipse.equinox.p2.tests/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.tests/META-INF/MANIFEST.MF
index 2a4faef..9d46934 100644
--- a/bundles/org.eclipse.equinox.p2.tests/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.tests/META-INF/MANIFEST.MF
@@ -21,6 +21,7 @@ Import-Package: ie.wombat.jbdiff,
  org.eclipse.equinox.internal.p2.engine,
  org.eclipse.equinox.internal.p2.installregistry,
  org.eclipse.equinox.internal.p2.metadata,
+ org.eclipse.equinox.internal.p2.metadata.repository,
  org.eclipse.equinox.internal.p2.metadata.repository.io,
  org.eclipse.equinox.internal.p2.persistence,
  org.eclipse.equinox.internal.p2.resolution,
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
index 98b926f..9277148 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
@@ -15,6 +15,7 @@ import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.installregistry.IInstallRegistry;
 import org.eclipse.equinox.internal.p2.installregistry.IProfileInstallRegistry;
+import org.eclipse.equinox.internal.p2.metadata.repository.MetadataRepositoryManager;
 import org.eclipse.equinox.p2.director.IDirector;
 import org.eclipse.equinox.p2.director.IPlanner;
 import org.eclipse.equinox.p2.engine.*;
@@ -592,7 +593,7 @@ public class AbstractProvisioningTest extends TestCase {
 	 */
 	protected void createTestMetdataRepository(IInstallableUnit[] units) {
 		IMetadataRepository repo = new TestMetadataRepository(units);
-		IMetadataRepositoryManager repoMan = (IMetadataRepositoryManager) ServiceHelper.getService(TestActivator.getContext(), IMetadataRepositoryManager.class.getName());
+		MetadataRepositoryManager repoMan = (MetadataRepositoryManager) ServiceHelper.getService(TestActivator.getContext(), IMetadataRepositoryManager.class.getName());
 		assertNotNull(repoMan);
 		repoMan.addRepository(repo);
 		metadataRepos.add(repo);

commit 1f82149ad307bd932a5d1b82cfe130d6728ce1d6
Author: Ian Bull <irbull>
Date:   Mon Jul 12 20:29:16 2010 +0000

    bug 279015: Support update descriptor advice in p2.inf
    https://bugs.eclipse.org/bugs/show_bug.cgi?id=279015

2	2	bundles/org.eclipse.equinox.p2.engine/META-INF/MANIFEST.MF
2	2	bundles/org.eclipse.equinox.p2.metadata/META-INF/MANIFEST.MF
8	0	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/MetadataFactory.java
20	1	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/AbstractPublisherAction.java
23	0	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/IUpdateDescriptorAdvice.java
2	3	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/RootIUAction.java
8	4	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileAdvice.java
37	2	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileParser.java
1	0	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/BundlesAction.java
2	0	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/FeaturesAction.java
41	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/AbstractPublisherActionTest.java
94	0	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/AdviceFileParserTest.java
5	2	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/AdviceMatcher.java
50	7	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/BundlesActionTest.java
2	0	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/FeaturesActionTest.java
2	2	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/RootIUActionTest.java
17	0	bundles/org.eclipse.equinox.p2.tests/testData/BundlesActionTest/test3/BundleMeUp.txt
11	0	bundles/org.eclipse.equinox.p2.tests/testData/BundlesActionTest/test3/META-INF/MANIFEST.MF
3	0	bundles/org.eclipse.equinox.p2.tests/testData/BundlesActionTest/test3/META-INF/p2.inf
10	0	bundles/org.eclipse.equinox.p2.tests/testData/BundlesActionTest/test3/subFolder/BundleMeUpToo.txt
diff --git a/bundles/org.eclipse.equinox.p2.engine/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.engine/META-INF/MANIFEST.MF
index d178f77..23f7dfd 100644
--- a/bundles/org.eclipse.equinox.p2.engine/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.engine/META-INF/MANIFEST.MF
@@ -2,7 +2,7 @@ Manifest-Version: 1.0
 Bundle-ManifestVersion: 2
 Bundle-Name: %pluginName
 Bundle-SymbolicName: org.eclipse.equinox.p2.engine;singleton:=true
-Bundle-Version: 2.0.0.qualifier
+Bundle-Version: 2.0.1.qualifier
 Bundle-Activator: org.eclipse.equinox.internal.p2.engine.EngineActivator
 Bundle-Vendor: %providerName
 Bundle-Localization: plugin
@@ -21,7 +21,7 @@ Require-Bundle: org.eclipse.equinox.common,
  org.eclipse.equinox.p2.metadata.repository;bundle-version="1.0.100",
  org.eclipse.core.jobs;bundle-version="[3.4.0,4.0.0)",
  org.eclipse.equinox.p2.repository;bundle-version="[2.0.0,2.1.0)",
- org.eclipse.equinox.p2.metadata;bundle-version="[2.0.0,2.1.0)",
+ org.eclipse.equinox.p2.metadata;bundle-version="[2.0.0,2.2.0)",
  org.eclipse.equinox.p2.core;bundle-version="[2.0.0,2.1.0)"
 Eclipse-RegisterBuddy: org.eclipse.equinox.p2.metadata.repository
 Bundle-RequiredExecutionEnvironment: J2SE-1.5,
diff --git a/bundles/org.eclipse.equinox.p2.metadata/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.metadata/META-INF/MANIFEST.MF
index dd1c720..9a40daf 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.metadata/META-INF/MANIFEST.MF
@@ -2,7 +2,7 @@ Manifest-Version: 1.0
 Bundle-ManifestVersion: 2
 Bundle-Name: %pluginName
 Bundle-SymbolicName: org.eclipse.equinox.p2.metadata;singleton:=true
-Bundle-Version: 2.0.0.qualifier
+Bundle-Version: 2.1.0.qualifier
 Bundle-Activator: org.eclipse.equinox.internal.p2.metadata.MetadataActivator
 Bundle-Vendor: %providerName
 Bundle-Localization: plugin
@@ -75,7 +75,7 @@ Export-Package: org.eclipse.equinox.internal.p2.metadata;
    org.eclipse.equinox.p2.updatesite,
    org.eclipse.pde.core,
    org.eclipse.pde.ui",
- org.eclipse.equinox.p2.metadata;version="2.0.0",
+ org.eclipse.equinox.p2.metadata;version="2.1.0",
  org.eclipse.equinox.p2.metadata.expression;version="2.0.0",
  org.eclipse.equinox.p2.metadata.index;version="2.0.0",
  org.eclipse.equinox.p2.query;version="2.0.0"
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/MetadataFactory.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/MetadataFactory.java
index dc43ce8..587a1c7 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/MetadataFactory.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/MetadataFactory.java
@@ -162,6 +162,14 @@ public final class MetadataFactory {
 		}
 
 		/**
+		 * Returns the UpdateDescriptor for this IU
+		 * @since 2.1
+		 */
+		public IUpdateDescriptor getUpdateDescriptor() {
+			return unit().getUpdateDescriptor();
+		}
+
+		/**
 		 * Set the artifact keys for the installable unit. Previous values will be overwritten.
 		 * @param value the artifacts to the used.
 		 */
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/AbstractPublisherAction.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/AbstractPublisherAction.java
index 5c2aa81..77c6e06 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/AbstractPublisherAction.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/AbstractPublisherAction.java
@@ -268,6 +268,26 @@ public abstract class AbstractPublisherAction implements IPublisherAction {
 	}
 
 	/**
+	 * Add any update descriptor advice to the given IU
+	 * @param iu the IU to decorate
+	 * @param info the publisher info supplying the advice
+	 */
+	protected static void processUpdateDescriptorAdvice(InstallableUnitDescription iu, IPublisherInfo info) {
+		Collection<IUpdateDescriptorAdvice> advice = info.getAdvice(null, false, iu.getId(), iu.getVersion(), IUpdateDescriptorAdvice.class);
+
+		if (advice.isEmpty())
+			return;
+
+		for (IUpdateDescriptorAdvice entry : advice) {
+			//process the IU Descriptor
+			IUpdateDescriptor updateDescriptor = entry.getUpdateDescriptor(iu);
+			if (updateDescriptor != null) {
+				iu.setUpdateDescriptor(updateDescriptor);
+			}
+		}
+	}
+
+	/**
 	 * Add all of the advised provided and required capabilities for the given installable unit.
 	 * @param iu the IU to decorate
 	 * @param info the publisher info supplying the advice
@@ -278,7 +298,6 @@ public abstract class AbstractPublisherAction implements IPublisherAction {
 			return;
 
 		for (ICapabilityAdvice entry : advice) {
-
 			//process required capabilities
 			IRequirement[] requiredAdvice = entry.getRequiredCapabilities(iu);
 			if (requiredAdvice != null) {
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/IUpdateDescriptorAdvice.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/IUpdateDescriptorAdvice.java
new file mode 100644
index 0000000..92a5d12
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/IUpdateDescriptorAdvice.java
@@ -0,0 +1,23 @@
+/******************************************************************************* 
+* Copyright (c) 2010 EclipseSource and others. All rights reserved. This
+* program and the accompanying materials are made available under the terms of
+* the Eclipse Public License v1.0 which accompanies this distribution, and is
+* available at http://www.eclipse.org/legal/epl-v10.html
+*
+* Contributors:
+*   EclipseSource - initial API and implementation
+******************************************************************************/
+package org.eclipse.equinox.p2.publisher.actions;
+
+import org.eclipse.equinox.p2.metadata.IUpdateDescriptor;
+import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitDescription;
+import org.eclipse.equinox.p2.publisher.IPublisherAdvice;
+
+/**
+ * Advice to set the update descriptor on an IU
+ * @author Ian Bull
+ */
+public interface IUpdateDescriptorAdvice extends IPublisherAdvice {
+
+	public IUpdateDescriptor getUpdateDescriptor(InstallableUnitDescription iu);
+}
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/RootIUAction.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/RootIUAction.java
index 00dd7b5..b6ccec7 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/RootIUAction.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/RootIUAction.java
@@ -10,9 +10,6 @@
  ******************************************************************************/
 package org.eclipse.equinox.p2.publisher.actions;
 
-import org.eclipse.equinox.p2.metadata.MetadataFactory;
-import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitDescription;
-
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.util.Collection;
@@ -21,6 +18,7 @@ import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.publisher.Activator;
 import org.eclipse.equinox.internal.p2.publisher.Messages;
 import org.eclipse.equinox.p2.metadata.*;
+import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitDescription;
 import org.eclipse.equinox.p2.publisher.*;
 import org.eclipse.equinox.spi.p2.publisher.PublisherHelper;
 import org.eclipse.osgi.util.NLS;
@@ -50,6 +48,7 @@ public class RootIUAction extends AbstractPublisherAction {
 	protected IStatus generateRootIU(IPublisherResult result) {
 		Collection<? extends IVersionedId> children = getChildren(result);
 		InstallableUnitDescription descriptor = createTopLevelIUDescription(children, null, false);
+		processUpdateDescriptorAdvice(descriptor, info);
 		processCapabilityAdvice(descriptor, info);
 		processTouchpointAdvice(descriptor, null, info);
 		processInstallableUnitPropertiesAdvice(descriptor, info);
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileAdvice.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileAdvice.java
index b1ab0c1..d3661df 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileAdvice.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileAdvice.java
@@ -10,9 +10,6 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.publisher.eclipse;
 
-import org.eclipse.equinox.p2.metadata.MetadataFactory;
-import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitDescription;
-
 import java.io.*;
 import java.util.Map;
 import java.util.zip.ZipEntry;
@@ -22,6 +19,7 @@ import org.eclipse.equinox.internal.p2.core.helpers.CollectionUtils;
 import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
 import org.eclipse.equinox.internal.p2.publisher.Activator;
 import org.eclipse.equinox.p2.metadata.*;
+import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitDescription;
 import org.eclipse.equinox.p2.publisher.AbstractAdvice;
 import org.eclipse.equinox.p2.publisher.actions.*;
 import org.eclipse.equinox.p2.repository.artifact.IArtifactDescriptor;
@@ -31,7 +29,7 @@ import org.eclipse.equinox.p2.repository.artifact.IArtifactDescriptor;
  * in the source of a bundle, feature, or product to specify additional advice to be
  * added to the {@link IInstallableUnit} corresponding to the bundle, feature, or product.
  */
-public class AdviceFileAdvice extends AbstractAdvice implements ITouchpointAdvice, ICapabilityAdvice, IPropertyAdvice, IAdditionalInstallableUnitAdvice {
+public class AdviceFileAdvice extends AbstractAdvice implements ITouchpointAdvice, ICapabilityAdvice, IUpdateDescriptorAdvice, IPropertyAdvice, IAdditionalInstallableUnitAdvice {
 
 	/**
 	 * The location of the bundle advice file, relative to the bundle root location.
@@ -47,6 +45,7 @@ public class AdviceFileAdvice extends AbstractAdvice implements ITouchpointAdvic
 	private IRequirement[] metaRequiredCapabilities;
 	private Map<String, String> iuProperties;
 	private InstallableUnitDescription[] additionalIUs;
+	private IUpdateDescriptor updateDescriptor;
 	private boolean containsAdvice = false;
 
 	/**
@@ -89,6 +88,7 @@ public class AdviceFileAdvice extends AbstractAdvice implements ITouchpointAdvic
 		metaRequiredCapabilities = parser.getMetaRequiredCapabilities();
 		iuProperties = parser.getProperties();
 		additionalIUs = parser.getAdditionalInstallableUnitDescriptions();
+		updateDescriptor = parser.getUpdateDescriptor();
 		containsAdvice = true;
 	}
 
@@ -169,6 +169,10 @@ public class AdviceFileAdvice extends AbstractAdvice implements ITouchpointAdvic
 		return additionalIUs;
 	}
 
+	public IUpdateDescriptor getUpdateDescriptor(InstallableUnitDescription iu) {
+		return updateDescriptor;
+	}
+
 	public Map<String, String> getArtifactProperties(IInstallableUnit iu, IArtifactDescriptor descriptor) {
 		return null;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileParser.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileParser.java
index 703c7c5..c2d5ce7 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileParser.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileParser.java
@@ -57,6 +57,7 @@ public class AdviceFileParser {
 	private static final String LICENSES_PREFIX = "licenses."; //$NON-NLS-1$
 	private static final String ARTIFACTS_PREFIX = "artifacts."; //$NON-NLS-1$
 	private static final String HOST_REQUIREMENTS_PREFIX = "hostRequirements."; //$NON-NLS-1$
+	private static final String UPDATE_DESCRIPTOR_PREFIX = "update."; //$NON-NLS-1$
 
 	public static final Version COMPATIBLE_VERSION = Version.createOSGi(1, 0, 0);
 	public static final VersionRange VERSION_TOLERANCE = new VersionRange(COMPATIBLE_VERSION, true, Version.createOSGi(2, 0, 0), false);
@@ -65,17 +66,18 @@ public class AdviceFileParser {
 	private List<IProvidedCapability> adviceProvides = new ArrayList<IProvidedCapability>();
 	private List<IRequirement> adviceRequires = new ArrayList<IRequirement>();
 	private List<IRequirement> adviceMetaRequires = new ArrayList<IRequirement>();
+	private IUpdateDescriptor adviceUpdateDescriptor = null;
 	private Map<String, ITouchpointInstruction> adviceInstructions = new HashMap<String, ITouchpointInstruction>();
 	private List<InstallableUnitDescription> adviceOtherIUs = new ArrayList<InstallableUnitDescription>();
 
 	private final Map<String, String> advice;
 	private Iterator<String> keysIterator;
 	private String current;
-	//	private String hostId; not currently used
+	private String hostId;
 	private Version hostVersion;
 
 	public AdviceFileParser(String id, Version version, Map<String, String> advice) {
-		// this.hostId = id; not currently used
+		this.hostId = id;
 		this.hostVersion = version;
 		this.advice = advice;
 	}
@@ -94,6 +96,8 @@ public class AdviceFileParser {
 		while (current != null) {
 			if (current.startsWith(PROPERTIES_PREFIX))
 				parseProperties(PROPERTIES_PREFIX, adviceProperties);
+			else if (current.startsWith(UPDATE_DESCRIPTOR_PREFIX))
+				this.adviceUpdateDescriptor = parseUpdateDescriptor(UPDATE_DESCRIPTOR_PREFIX, hostId);
 			else if (current.startsWith(PROVIDES_PREFIX))
 				parseProvides(PROVIDES_PREFIX, adviceProvides);
 			else if (current.startsWith(REQUIRES_PREFIX))
@@ -155,6 +159,33 @@ public class AdviceFileParser {
 		properties.put(propertyName, propertyValue);
 	}
 
+	private IUpdateDescriptor parseUpdateDescriptor(String prefix, String id) {
+		String name = id;
+		String description = null;
+		String range = "[0.0.0,$version$)"; //$NON-NLS-1$ 
+		String severity = "0"; //$NON-NLS-1$
+
+		while (current != null && current.startsWith(prefix)) {
+			String token = current;
+			if (token.equals(UPDATE_ID)) {
+				name = currentValue();
+			} else if (token.equals(UPDATE_DESCRIPTION)) {
+				description = currentValue();
+			} else if (token.equals(UPDATE_RANGE)) {
+				range = currentValue();
+			} else if (token.equals(UPDATE_SEVERITY)) {
+				severity = currentValue();
+			} else {
+				// ignore
+			}
+			next();
+		}
+
+		range = substituteVersionAndQualifier(range);
+		VersionRange versionRange = new VersionRange(range);
+		return MetadataFactory.createUpdateDescriptor(name, versionRange, Integer.valueOf(severity), description);
+	}
+
 	private void parseProvides(String prefix, List<IProvidedCapability> provides) {
 		while (current != null && current.startsWith(prefix)) {
 			int dotIndex = current.indexOf('.', prefix.length());
@@ -534,6 +565,10 @@ public class AdviceFileParser {
 		return adviceProvides.toArray(new IProvidedCapability[adviceProvides.size()]);
 	}
 
+	public IUpdateDescriptor getUpdateDescriptor() {
+		return adviceUpdateDescriptor;
+	}
+
 	public Map<String, ITouchpointInstruction> getTouchpointInstructions() {
 		if (adviceInstructions.isEmpty())
 			return null;
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/BundlesAction.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/BundlesAction.java
index 3da9abb..481a075 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/BundlesAction.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/BundlesAction.java
@@ -205,6 +205,7 @@ public class BundlesAction extends AbstractPublisherAction {
 			}
 		}
 		iu.setCapabilities(providedCapabilities.toArray(new IProvidedCapability[providedCapabilities.size()]));
+		processUpdateDescriptorAdvice(iu, info);
 		processCapabilityAdvice(iu, info);
 
 		// Set certain properties from the manifest header attributes as IU properties.
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/FeaturesAction.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/FeaturesAction.java
index 72f059c..5e1c915 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/FeaturesAction.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/FeaturesAction.java
@@ -282,6 +282,7 @@ public class FeaturesAction extends AbstractPublisherAction {
 		}
 
 		iu.setCapabilities(providedCapabilities.toArray(new IProvidedCapability[providedCapabilities.size()]));
+		processUpdateDescriptorAdvice(iu, info);
 		processCapabilityAdvice(iu, publisherInfo);
 		return MetadataFactory.createInstallableUnit(iu);
 	}
@@ -368,6 +369,7 @@ public class FeaturesAction extends AbstractPublisherAction {
 		}
 
 		iu.setCapabilities(providedCapabilities.toArray(new IProvidedCapability[providedCapabilities.size()]));
+		processUpdateDescriptorAdvice(iu, info);
 		processCapabilityAdvice(iu, publisherInfo);
 		return MetadataFactory.createInstallableUnitPatch(iu);
 	}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/AbstractPublisherActionTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/AbstractPublisherActionTest.java
index 9952f76..ab82db0 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/AbstractPublisherActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/AbstractPublisherActionTest.java
@@ -13,14 +13,16 @@ package org.eclipse.equinox.p2.tests.publisher.actions;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.p2.metadata.IRequiredCapability;
+import org.eclipse.equinox.internal.p2.metadata.RequiredCapability;
 import org.eclipse.equinox.p2.metadata.*;
 import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitDescription;
 import org.eclipse.equinox.p2.publisher.*;
 import org.eclipse.equinox.p2.publisher.actions.ICapabilityAdvice;
+import org.eclipse.equinox.p2.publisher.actions.IUpdateDescriptorAdvice;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 import org.eclipse.equinox.spi.p2.publisher.PublisherHelper;
 
-public class AbstractPublisherActionTest extends AbstractProvisioningTest {
+public final class AbstractPublisherActionTest extends AbstractProvisioningTest {
 	//Note: this is tests for AbstractPublisherAction and not a base class for other tests
 
 	static class TestAction extends AbstractPublisherAction {
@@ -34,6 +36,26 @@ public class AbstractPublisherActionTest extends AbstractProvisioningTest {
 			AbstractPublisherAction.processCapabilityAdvice(iu, publisherInfo);
 		}
 
+		public void testProcessUpdateDescriptorAdvice(InstallableUnitDescription iu, IPublisherInfo publisherInfo) {
+			AbstractPublisherAction.processUpdateDescriptorAdvice(iu, publisherInfo);
+		}
+	}
+
+	static class TestUpdateDescriptorAdvice implements IUpdateDescriptorAdvice {
+
+		private final IUpdateDescriptor updateDescriptor;
+
+		public TestUpdateDescriptorAdvice(IUpdateDescriptor updateDescriptor) {
+			this.updateDescriptor = updateDescriptor;
+		}
+
+		public boolean isApplicable(String configSpec, boolean includeDefault, String id, Version version) {
+			return id.equals("test");
+		}
+
+		public IUpdateDescriptor getUpdateDescriptor(InstallableUnitDescription iu) {
+			return this.updateDescriptor;
+		}
 	}
 
 	static class TestCapabilityAdvice implements ICapabilityAdvice {
@@ -73,6 +95,24 @@ public class AbstractPublisherActionTest extends AbstractProvisioningTest {
 		}
 	}
 
+	public void testAddUpdateDescriptor() {
+		InstallableUnitDescription iu = new InstallableUnitDescription();
+		iu.setId("test");
+
+		IPublisherInfo info = new PublisherInfo();
+		VersionRange range = new VersionRange("[0.0.0,1.1.1)");
+		IUpdateDescriptor testUpdateDescriptor = MetadataFactory.createUpdateDescriptor("name1", range, 10, "Test Description");
+
+		info.addAdvice(new TestUpdateDescriptorAdvice(testUpdateDescriptor));
+		TestAction action = new TestAction();
+		action.testProcessUpdateDescriptorAdvice(iu, info);
+
+		assertEquals("name1", RequiredCapability.extractName(iu.getUpdateDescriptor().getIUsBeingUpdated().iterator().next()));
+		assertEquals(range, RequiredCapability.extractRange(iu.getUpdateDescriptor().getIUsBeingUpdated().iterator().next()));
+		assertEquals(10, iu.getUpdateDescriptor().getSeverity());
+		assertEquals("Test Description", iu.getUpdateDescriptor().getDescription());
+	}
+
 	public void testAddCapabilities() {
 		InstallableUnitDescription iu = new InstallableUnitDescription();
 		iu.setId("test");
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/AdviceFileParserTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/AdviceFileParserTest.java
index d734ea8..a285325 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/AdviceFileParserTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/AdviceFileParserTest.java
@@ -45,6 +45,100 @@ public class AdviceFileParserTest extends TestCase {
 		fail("expected version parse problem");
 	}
 
+	public void testUpdateDescriptorAdvice() {
+		Map map = new HashMap();
+		map.put("update.id", "testName");
+		map.put("update.severity", "10");
+		map.put("update.description", "Test Description");
+		map.put("update.range", "(1.0.0,10.10.10)");
+
+		AdviceFileParser parser = new AdviceFileParser("id", Version.emptyVersion, map);
+		parser.parse();
+
+		IUpdateDescriptor updateDescriptor = parser.getUpdateDescriptor();
+		String testName = RequiredCapability.extractName(updateDescriptor.getIUsBeingUpdated().iterator().next());
+		VersionRange testVersionRange = RequiredCapability.extractRange(updateDescriptor.getIUsBeingUpdated().iterator().next());
+		assertEquals("testName", testName);
+		assertEquals(Version.parseVersion("1.0.0"), testVersionRange.getMinimum());
+		assertEquals(Version.parseVersion("10.10.10"), testVersionRange.getMaximum());
+		assertEquals(10, updateDescriptor.getSeverity());
+		assertEquals("Test Description", updateDescriptor.getDescription());
+	}
+
+	public void testUpdateDescriptorAdviceDefaultBound() {
+		Map map = new HashMap();
+		map.put("update.id", "testName");
+		map.put("update.severity", "10");
+		map.put("update.description", "Test Description");
+		map.put("update.range", "(1.0.0,$version$)");
+
+		AdviceFileParser parser = new AdviceFileParser("id", Version.parseVersion("9.10.11"), map);
+		parser.parse();
+
+		IUpdateDescriptor updateDescriptor = parser.getUpdateDescriptor();
+		String testName = RequiredCapability.extractName(updateDescriptor.getIUsBeingUpdated().iterator().next());
+		VersionRange testVersionRange = RequiredCapability.extractRange(updateDescriptor.getIUsBeingUpdated().iterator().next());
+		assertEquals("testName", testName);
+		assertEquals(Version.parseVersion("1.0.0"), testVersionRange.getMinimum());
+		assertEquals(Version.parseVersion("9.10.11"), testVersionRange.getMaximum());
+		assertEquals(10, updateDescriptor.getSeverity());
+		assertEquals("Test Description", updateDescriptor.getDescription());
+	}
+
+	public void testUpdateDescriptorAdviceDefaultBound2() {
+		Map map = new HashMap();
+		map.put("update.id", "testName");
+		map.put("update.severity", "10");
+		map.put("update.description", "Test Description");
+
+		AdviceFileParser parser = new AdviceFileParser("id", Version.parseVersion("9.10.11"), map);
+		parser.parse();
+
+		IUpdateDescriptor updateDescriptor = parser.getUpdateDescriptor();
+		String testName = RequiredCapability.extractName(updateDescriptor.getIUsBeingUpdated().iterator().next());
+		VersionRange testVersionRange = RequiredCapability.extractRange(updateDescriptor.getIUsBeingUpdated().iterator().next());
+		assertEquals("testName", testName);
+		assertEquals(Version.parseVersion("0.0.0"), testVersionRange.getMinimum());
+		assertEquals(Version.parseVersion("9.10.11"), testVersionRange.getMaximum());
+		assertEquals(10, updateDescriptor.getSeverity());
+		assertEquals("Test Description", updateDescriptor.getDescription());
+	}
+
+	public void testUpdateDescriptorAdviceDefaultID() {
+		Map map = new HashMap();
+		map.put("update.severity", "10");
+		map.put("update.description", "Test Description");
+
+		AdviceFileParser parser = new AdviceFileParser("id", Version.parseVersion("9.10.11"), map);
+		parser.parse();
+
+		IUpdateDescriptor updateDescriptor = parser.getUpdateDescriptor();
+		String testName = RequiredCapability.extractName(updateDescriptor.getIUsBeingUpdated().iterator().next());
+		VersionRange testVersionRange = RequiredCapability.extractRange(updateDescriptor.getIUsBeingUpdated().iterator().next());
+		assertEquals("id", testName);
+		assertEquals(Version.parseVersion("0.0.0"), testVersionRange.getMinimum());
+		assertEquals(Version.parseVersion("9.10.11"), testVersionRange.getMaximum());
+		assertEquals(10, updateDescriptor.getSeverity());
+		assertEquals("Test Description", updateDescriptor.getDescription());
+	}
+
+	public void testUpdateDescriptorAdviceDefaults() {
+		Map map = new HashMap();
+		map.put("update.id", "id");
+
+		AdviceFileParser parser = new AdviceFileParser("id", Version.parseVersion("9.10.11"), map);
+		parser.parse();
+
+		IUpdateDescriptor updateDescriptor = parser.getUpdateDescriptor();
+		String testName = RequiredCapability.extractName(updateDescriptor.getIUsBeingUpdated().iterator().next());
+		VersionRange testVersionRange = RequiredCapability.extractRange(updateDescriptor.getIUsBeingUpdated().iterator().next());
+		assertEquals("id", testName);
+		assertEquals(Version.parseVersion("0.0.0"), testVersionRange.getMinimum());
+		assertEquals(Version.parseVersion("9.10.11"), testVersionRange.getMaximum());
+		assertEquals(0, updateDescriptor.getSeverity());
+		assertEquals(null, updateDescriptor.getDescription());
+	}
+
 	public void testPropertyAdvice() {
 		Map map = new HashMap();
 		map.put("properties.0.name", "testName1");
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/AdviceMatcher.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/AdviceMatcher.java
index 010469c..4d4ca67 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/AdviceMatcher.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/AdviceMatcher.java
@@ -21,8 +21,10 @@ import org.eclipse.equinox.p2.publisher.IPublisherAdvice;
 public class AdviceMatcher implements IArgumentMatcher {
 	private final Version version;
 	private final String id;
+	private static Class clazz;
 
-	public static IPublisherAdvice adviceMatches(String id, Version version) {
+	public static IPublisherAdvice adviceMatches(String id, Version version, Class clazz) {
+		AdviceMatcher.clazz = clazz;
 		EasyMock.reportMatcher(new AdviceMatcher(id, version));
 		return null;
 	}
@@ -39,8 +41,9 @@ public class AdviceMatcher implements IArgumentMatcher {
 	public boolean matches(Object arg) {
 		if (!(arg instanceof IPublisherAdvice))
 			return false;
+		if (!(clazz.isAssignableFrom(arg.getClass())))
+			return false;
 		IPublisherAdvice advice = (IPublisherAdvice) arg;
 		return advice.isApplicable("", false, id, version);
 	}
-
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/BundlesActionTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/BundlesActionTest.java
index 1a8807e..6d8c49d 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/BundlesActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/BundlesActionTest.java
@@ -18,14 +18,12 @@ import java.util.zip.ZipInputStream;
 import org.easymock.EasyMock;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.director.QueryableArray;
-import org.eclipse.equinox.internal.p2.metadata.ArtifactKey;
-import org.eclipse.equinox.internal.p2.metadata.TranslationSupport;
+import org.eclipse.equinox.internal.p2.metadata.*;
 import org.eclipse.equinox.p2.metadata.*;
 import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitDescription;
 import org.eclipse.equinox.p2.publisher.*;
 import org.eclipse.equinox.p2.publisher.actions.*;
-import org.eclipse.equinox.p2.publisher.eclipse.BundlesAction;
-import org.eclipse.equinox.p2.publisher.eclipse.IBundleShapeAdvice;
+import org.eclipse.equinox.p2.publisher.eclipse.*;
 import org.eclipse.equinox.p2.query.IQueryResult;
 import org.eclipse.equinox.p2.query.QueryUtil;
 import org.eclipse.equinox.p2.repository.artifact.IArtifactDescriptor;
@@ -49,6 +47,7 @@ public class BundlesActionTest extends ActionTest {
 	private static final String TEST2_PROVY_NAME = "iuy";//$NON-NLS-1$
 	private static final String TEST2_PROVX_NAME = "iux";//$NON-NLS-1$
 	private static final String TEST2_PROVBUNDLE_NAME = "test2";//$NON-NLS-1$
+	private static final String TEST3_PROVBUNDLE_NAME = "test3";//$NON-NLS-1$
 
 	private static final File TEST_BASE = new File(TestActivator.getTestDataFolder(), "BundlesActionTest");//$NON-NLS-1$
 	private static final File TEST_FILE1 = new File(TEST_BASE, TEST1_PROVBUNDLE_NAME);
@@ -67,6 +66,8 @@ public class BundlesActionTest extends ActionTest {
 
 	private final Version BUNDLE1_VERSION = Version.create("0.1.0");//$NON-NLS-1$
 	private final Version BUNDLE2_VERSION = Version.create("1.0.0.qualifier");//$NON-NLS-1$
+	private final Version BUNDLE3_VERSION = Version.create("0.1.0.qualifier");//$NON-NLS-1$
+
 	private final Version PROVBUNDLE2_VERSION = BUNDLE2_VERSION;
 	private final Version TEST2_PROVZ_VERSION = Version.emptyVersion;
 	private final Version TEST2_PROVY_VERSION = Version.emptyVersion;
@@ -79,11 +80,15 @@ public class BundlesActionTest extends ActionTest {
 	protected TestArtifactRepository artifactRepository = new TestArtifactRepository(getAgent());
 
 	private MultiCapture<ITouchpointAdvice> tpAdvice1, tpAdvice2;
+	private MultiCapture<IUpdateDescriptorAdvice> udAdvice3;
 
 	@Override
 	public void setupPublisherInfo() {
 		tpAdvice1 = new MultiCapture<ITouchpointAdvice>();
 		tpAdvice2 = new MultiCapture<ITouchpointAdvice>();
+
+		udAdvice3 = new MultiCapture<IUpdateDescriptorAdvice>();
+
 		super.setupPublisherInfo();
 	}
 
@@ -141,6 +146,7 @@ public class BundlesActionTest extends ActionTest {
 		// verify publisher result
 		verifyBundle1();
 		verifyBundle2();
+		verifyBundle3();
 
 		verifyArtifactRepository();
 	}
@@ -260,6 +266,25 @@ public class BundlesActionTest extends ActionTest {
 
 	}
 
+	private void verifyBundle3() {
+		ArrayList ius = new ArrayList(publisherResult.getIUs(TEST3_PROVBUNDLE_NAME, IPublisherResult.ROOT));
+
+		assertTrue(ius.size() == 1);
+		IInstallableUnit bundle3IU = (IInstallableUnit) ius.get(0);
+
+		IUpdateDescriptor updateDescriptor = bundle3IU.getUpdateDescriptor();
+		String name = RequiredCapability.extractName(updateDescriptor.getIUsBeingUpdated().iterator().next());
+		VersionRange range = RequiredCapability.extractRange(updateDescriptor.getIUsBeingUpdated().iterator().next());
+		String description = updateDescriptor.getDescription();
+		int severity = updateDescriptor.getSeverity();
+
+		VersionRange expectedRange = new VersionRange("(0.0.1," + BUNDLE3_VERSION + "]");
+		assertEquals(TEST3_PROVBUNDLE_NAME, name);
+		assertEquals(expectedRange, range);
+		assertEquals("Some description about this update", description.trim());
+		assertEquals(8, severity);
+	}
+
 	public void cleanup() {
 		super.cleanup();
 		if (artifactRepository != null) {
@@ -297,19 +322,37 @@ public class BundlesActionTest extends ActionTest {
 		expect(publisherInfo.getAdvice(null, false, TEST1_PROVBUNDLE_NAME, BUNDLE1_VERSION, ICapabilityAdvice.class)).andReturn(Collections.EMPTY_LIST); //$NON-NLS-1$
 		expect(publisherInfo.getAdvice(null, false, TEST1_PROVBUNDLE_NAME, BUNDLE1_VERSION, IPropertyAdvice.class)).andReturn(adviceCollection1).times(2); //$NON-NLS-1$
 		expect(publisherInfo.getAdvice(null, false, TEST1_PROVBUNDLE_NAME, BUNDLE1_VERSION, IAdditionalInstallableUnitAdvice.class)).andReturn(Collections.EMPTY_LIST); //$NON-NLS-1$
+		expect(publisherInfo.getAdvice(null, false, TEST1_PROVBUNDLE_NAME, BUNDLE1_VERSION, IUpdateDescriptorAdvice.class)).andReturn(Collections.EMPTY_LIST);//$NON-NLS-1$
 		expect(publisherInfo.getAdvice(null, false, TEST2_PROVBUNDLE_NAME, BUNDLE2_VERSION, ICapabilityAdvice.class)).andReturn(Collections.EMPTY_LIST);//$NON-NLS-1$
 		expect(publisherInfo.getAdvice(null, false, TEST2_PROVBUNDLE_NAME, BUNDLE2_VERSION, IPropertyAdvice.class)).andReturn(adviceCollection2).times(2);//$NON-NLS-1$
-		expect(publisherInfo.getAdvice(null, false, TEST2_PROVBUNDLE_NAME, BUNDLE2_VERSION, IAdditionalInstallableUnitAdvice.class)).andReturn(Collections.EMPTY_LIST);//$NON-NLS-1$		
+		expect(publisherInfo.getAdvice(null, false, TEST2_PROVBUNDLE_NAME, BUNDLE2_VERSION, IAdditionalInstallableUnitAdvice.class)).andReturn(Collections.EMPTY_LIST);//$NON-NLS-1$
+		expect(publisherInfo.getAdvice(null, false, TEST2_PROVBUNDLE_NAME, BUNDLE2_VERSION, IUpdateDescriptorAdvice.class)).andReturn(Collections.EMPTY_LIST);//$NON-NLS-1$
 		expect(publisherInfo.getAdvice(null, true, TEST1_PROVBUNDLE_NAME, BUNDLE1_VERSION, IBundleShapeAdvice.class)).andReturn(null); //$NON-NLS-1$
 		expect(publisherInfo.getAdvice(null, true, TEST2_PROVBUNDLE_NAME, BUNDLE2_VERSION, IBundleShapeAdvice.class)).andReturn(null);//$NON-NLS-1$
+		expect(publisherInfo.getAdvice(null, false, TEST3_PROVBUNDLE_NAME, BUNDLE3_VERSION, ICapabilityAdvice.class)).andReturn(Collections.EMPTY_LIST); //$NON-NLS-1$
+		expect(publisherInfo.getAdvice(null, false, TEST3_PROVBUNDLE_NAME, BUNDLE3_VERSION, IPropertyAdvice.class)).andReturn(adviceCollection1).times(2); //$NON-NLS-1$
+		expect(publisherInfo.getAdvice(null, false, TEST3_PROVBUNDLE_NAME, BUNDLE3_VERSION, IAdditionalInstallableUnitAdvice.class)).andReturn(Collections.EMPTY_LIST); //$NON-NLS-1$
+		expect(publisherInfo.getAdvice(null, false, TEST3_PROVBUNDLE_NAME, BUNDLE3_VERSION, ITouchpointAdvice.class)).andReturn(Collections.EMPTY_LIST);//$NON-NLS-1$
+		expect(publisherInfo.getAdvice(null, true, TEST3_PROVBUNDLE_NAME, BUNDLE3_VERSION, IBundleShapeAdvice.class)).andReturn(null); //$NON-NLS-1$
+
 		expect(publisherInfo.getArtifactOptions()).andReturn(IPublisherInfo.A_INDEX | IPublisherInfo.A_OVERWRITE | IPublisherInfo.A_PUBLISH).anyTimes();
 		expect(publisherInfo.getAdvice(null, false, null, null, ICapabilityAdvice.class)).andReturn(new ArrayList()).anyTimes();
 
 		//capture any touchpoint advice, and return the captured advice when the action asks for it
-		publisherInfo.addAdvice(and(AdviceMatcher.adviceMatches(TEST1_PROVBUNDLE_NAME, BUNDLE1_VERSION), capture(tpAdvice1)));
-		publisherInfo.addAdvice(and(AdviceMatcher.adviceMatches(TEST2_PROVBUNDLE_NAME, BUNDLE2_VERSION), capture(tpAdvice2)));
+		publisherInfo.addAdvice(and(AdviceMatcher.adviceMatches(TEST1_PROVBUNDLE_NAME, BUNDLE1_VERSION, ITouchpointAdvice.class), capture(tpAdvice1)));
 		EasyMock.expectLastCall().anyTimes();
+
+		publisherInfo.addAdvice(and(AdviceMatcher.adviceMatches(TEST2_PROVBUNDLE_NAME, BUNDLE2_VERSION, ITouchpointAdvice.class), capture(tpAdvice2)));
+		EasyMock.expectLastCall().anyTimes();
+
+		publisherInfo.addAdvice(and(AdviceMatcher.adviceMatches(TEST3_PROVBUNDLE_NAME, BUNDLE3_VERSION, AdviceFileAdvice.class), capture(udAdvice3)));
+		EasyMock.expectLastCall().anyTimes();
+
 		expect(publisherInfo.getAdvice(null, false, TEST1_PROVBUNDLE_NAME, BUNDLE1_VERSION, ITouchpointAdvice.class)).andReturn(tpAdvice1).anyTimes();
 		expect(publisherInfo.getAdvice(null, false, TEST2_PROVBUNDLE_NAME, BUNDLE2_VERSION, ITouchpointAdvice.class)).andReturn(tpAdvice2).anyTimes();
+
+		expect(publisherInfo.getAdvice(null, false, TEST3_PROVBUNDLE_NAME, BUNDLE3_VERSION, IUpdateDescriptorAdvice.class)).andReturn(udAdvice3).anyTimes();
+
 	}
+
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/FeaturesActionTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/FeaturesActionTest.java
index 75ff6fa..b2614eb 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/FeaturesActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/FeaturesActionTest.java
@@ -217,11 +217,13 @@ public class FeaturesActionTest extends ActionTest {
 		expect(publisherInfo.getAdvice(null, false, "bar.feature.group", barVersion, ICapabilityAdvice.class)).andReturn(Collections.EMPTY_LIST).anyTimes();
 		expect(publisherInfo.getAdvice(null, false, "bar.feature.group", barVersion, IAdditionalInstallableUnitAdvice.class)).andReturn(Collections.EMPTY_LIST).anyTimes();
 		expect(publisherInfo.getAdvice(null, false, "foo.feature.jar", fooVersion, IPropertyAdvice.class)).andReturn(adviceCollection).anyTimes();
+		expect(publisherInfo.getAdvice(null, false, "bar.feature.group", barVersion, IUpdateDescriptorAdvice.class)).andReturn(Collections.EMPTY_LIST).anyTimes();
 		expect(publisherInfo.getAdvice(null, false, "foo", fooVersion, IPropertyAdvice.class)).andReturn(adviceCollection).anyTimes();
 		expect(publisherInfo.getAdvice(null, false, "foo", fooVersion, IFeatureRootAdvice.class)).andReturn(Collections.EMPTY_LIST).anyTimes();
 		expect(publisherInfo.getAdvice(null, false, "foo.feature.group", fooVersion, IPropertyAdvice.class)).andReturn(adviceCollection).anyTimes();
 		expect(publisherInfo.getAdvice(null, false, "foo.feature.group", fooVersion, ICapabilityAdvice.class)).andReturn(Collections.EMPTY_LIST).anyTimes();
 		expect(publisherInfo.getAdvice(null, false, "foo.feature.group", fooVersion, IAdditionalInstallableUnitAdvice.class)).andReturn(Collections.EMPTY_LIST).anyTimes();
+		expect(publisherInfo.getAdvice(null, false, "foo.feature.group", fooVersion, IUpdateDescriptorAdvice.class)).andReturn(Collections.EMPTY_LIST).anyTimes();
 		expect(publisherInfo.getArtifactOptions()).andReturn(IPublisherInfo.A_INDEX | IPublisherInfo.A_OVERWRITE | IPublisherInfo.A_PUBLISH).anyTimes();
 		expect(publisherInfo.getArtifactRepository()).andReturn(artifactRepository).anyTimes();
 		expect(publisherInfo.getMetadataRepository()).andReturn(metadataRepository).anyTimes();
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/RootIUActionTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/RootIUActionTest.java
index dcf0b7e..07aa817 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/RootIUActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/RootIUActionTest.java
@@ -12,8 +12,6 @@ package org.eclipse.equinox.p2.tests.publisher.actions;
 
 import static org.easymock.EasyMock.expect;
 
-import org.eclipse.equinox.p2.query.MatchQuery;
-
 import java.util.*;
 import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.core.runtime.Status;
@@ -22,6 +20,7 @@ import org.eclipse.equinox.p2.metadata.*;
 import org.eclipse.equinox.p2.publisher.IPublisherResult;
 import org.eclipse.equinox.p2.publisher.actions.*;
 import org.eclipse.equinox.p2.query.IQuery;
+import org.eclipse.equinox.p2.query.MatchQuery;
 import org.eclipse.equinox.p2.repository.metadata.IMetadataRepository;
 import org.eclipse.equinox.p2.tests.TestMetadataRepository;
 
@@ -344,6 +343,7 @@ public class RootIUActionTest extends ActionTest {
 		expect(publisherInfo.getAdvice(null, true, null, null, IRootIUAdvice.class)).andReturn(rootIUAdviceCollection).anyTimes();
 		expect(publisherInfo.getAdvice(null, true, null, null, IVersionAdvice.class)).andReturn(null).anyTimes();
 		expect(publisherInfo.getAdvice(null, false, rootIU, versionArg, ITouchpointAdvice.class)).andReturn(new ArrayList()).anyTimes();
+		expect(publisherInfo.getAdvice(null, false, rootIU, versionArg, IUpdateDescriptorAdvice.class)).andReturn(new ArrayList()).anyTimes();
 		expect(publisherInfo.getAdvice(null, false, rootIU, versionArg, IPropertyAdvice.class)).andReturn(new ArrayList()).anyTimes();
 		expect(publisherInfo.getAdvice(null, false, rootIU, versionArg, IAdditionalInstallableUnitAdvice.class)).andReturn(new ArrayList()).anyTimes();
 		expect(publisherInfo.getAdvice(null, true, rootIU, versionArg, ILicenseAdvice.class)).andReturn(new ArrayList()).anyTimes();
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/BundlesActionTest/test3/BundleMeUp.txt b/bundles/org.eclipse.equinox.p2.tests/testData/BundlesActionTest/test3/BundleMeUp.txt
new file mode 100644
index 0000000..ad961ff
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests/testData/BundlesActionTest/test3/BundleMeUp.txt
@@ -0,0 +1,17 @@
+12345
+12345
+12345
+12345
+12345
+
+12345
+12345
+12345
+12345
+12345
+
+12345
+12345
+12345
+12345
+12345
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/BundlesActionTest/test3/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.tests/testData/BundlesActionTest/test3/META-INF/MANIFEST.MF
new file mode 100644
index 0000000..45bce0b
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests/testData/BundlesActionTest/test3/META-INF/MANIFEST.MF
@@ -0,0 +1,11 @@
+Manifest-Version: 1.0
+Bundle-ManifestVersion: 2
+Bundle-Name: test3
+Bundle-SymbolicName: test3;singleton:=true
+Bundle-Version: 0.1.0.qualifier
+Import-Package: iud;version="1.3.0"
+Bundle-ActivationPolicy: lazy
+Bundle-RequiredExecutionEnvironment: J2SE-1.4,
+ CDC-1.1/Foundation-1.1
+Export-Package: iuz;x-friends:="friend1,friend2"
+Eclipse-SourceBundle: test2;version="1.0.0.qualifier"
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/BundlesActionTest/test3/META-INF/p2.inf b/bundles/org.eclipse.equinox.p2.tests/testData/BundlesActionTest/test3/META-INF/p2.inf
new file mode 100644
index 0000000..bc2511d
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests/testData/BundlesActionTest/test3/META-INF/p2.inf
@@ -0,0 +1,3 @@
+update.range = (0.0.1,$version$]
+update.description = Some description about this update
+update.severity = 8
diff --git a/bundles/org.eclipse.equinox.p2.tests/testData/BundlesActionTest/test3/subFolder/BundleMeUpToo.txt b/bundles/org.eclipse.equinox.p2.tests/testData/BundlesActionTest/test3/subFolder/BundleMeUpToo.txt
new file mode 100644
index 0000000..eee8bcc
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests/testData/BundlesActionTest/test3/subFolder/BundleMeUpToo.txt
@@ -0,0 +1,10 @@
+54321
+54321
+54321
+54321
+54321
+54321
+54321
+54321
+54321
+54321

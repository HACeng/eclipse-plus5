commit 3b4b8b7935d6d64af98b9352c9d89bbfa9055281
Author: Susan Franklin <sfranklin>
Date:   Mon Oct 13 20:29:05 2008 +0000

    Bug 250680 - [ui] Catching OperationCanceledException

1	1	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
2	0	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
4	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SizeComputingWizardPage.java
3	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/ArtifactRepositoryElement.java
3	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/MetadataRepositoryElement.java
20	11	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/QueryableUpdates.java
6	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ProvisioningOperationRunner.java
3	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
0	28	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/ProvisioningUtil.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
index 56179a7..1daa57c 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
@@ -250,7 +250,7 @@ public class ProvSDKUIActivator extends AbstractUIPlugin {
 			}
 		});
 		// Start with the default query context and configure some settings
-		IUViewQueryContext queryContext = new IUViewQueryContext(IUViewQueryContext.AVAILABLE_VIEW_FLAT);
+		IUViewQueryContext queryContext = new IUViewQueryContext(IUViewQueryContext.AVAILABLE_VIEW_BY_CATEGORY);
 		policy.setQueryContext(queryContext);
 		updateWithPreferences(queryContext);
 		Policy.setDefaultPolicy(policy);
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
index 83e26a3..2a6aa54 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
@@ -211,6 +211,8 @@ public class AutomaticUpdater implements IUpdateListener {
 			} catch (ProvisionException e) {
 				ProvUI.handleException(e, ProvSDKMessages.AutomaticUpdater_ErrorCheckingUpdates, StatusManager.LOG);
 				continue;
+			} catch (OperationCanceledException e) {
+				// Nothing to report
 			}
 		}
 		iusWithUpdates = (IInstallableUnit[]) list.toArray(new IInstallableUnit[list.size()]);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SizeComputingWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SizeComputingWizardPage.java
index ebd03bc..5df883b 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SizeComputingWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/SizeComputingWizardPage.java
@@ -69,6 +69,8 @@ public abstract class SizeComputingWizardPage extends ProfileModificationWizardP
 			}
 
 		};
+		sizingJob.setUser(false);
+		sizingJob.setSystem(true);
 		sizingJob.schedule();
 		sizingJob.addJobChangeListener(new JobChangeAdapter() {
 			public void done(IJobChangeEvent event) {
@@ -89,13 +91,13 @@ public abstract class SizeComputingWizardPage extends ProfileModificationWizardP
 			if (size == IUElement.SIZE_NOTAPPLICABLE)
 				sizeInfo.setVisible(false);
 			else {
-				sizeInfo.setText(NLS.bind(ProvUIMessages.UpdateOrInstallWizardPage_Size, getFormattedSize(size)));
+				sizeInfo.setText(NLS.bind(ProvUIMessages.UpdateOrInstallWizardPage_Size, getFormattedSize()));
 				sizeInfo.setVisible(true);
 			}
 		}
 	}
 
-	protected String getFormattedSize(long size) {
+	protected String getFormattedSize() {
 		if (size == IUElement.SIZE_UNKNOWN || size == IUElement.SIZE_UNAVAILABLE)
 			return ProvUIMessages.IUDetailsLabelProvider_Unknown;
 		if (size > 1000L) {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/ArtifactRepositoryElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/ArtifactRepositoryElement.java
index d92f13c..8af14ad 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/ArtifactRepositoryElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/ArtifactRepositoryElement.java
@@ -12,6 +12,7 @@ package org.eclipse.equinox.internal.p2.ui.model;
 
 import java.net.URI;
 import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.OperationCanceledException;
 import org.eclipse.core.runtime.jobs.ISchedulingRule;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepository;
@@ -85,6 +86,8 @@ public class ArtifactRepositoryElement extends ProvElement implements IDeferredW
 				repo = ProvisioningUtil.loadArtifactRepository(location, monitor);
 			} catch (ProvisionException e) {
 				handleException(e, NLS.bind(ProvUIMessages.MetadataRepositoryElement_RepositoryLoadError, location));
+			} catch (OperationCanceledException e) {
+				// Nothing to report
 			}
 		return repo;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/MetadataRepositoryElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/MetadataRepositoryElement.java
index db173c2..1aa1e88 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/MetadataRepositoryElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/MetadataRepositoryElement.java
@@ -11,8 +11,7 @@
 package org.eclipse.equinox.internal.p2.ui.model;
 
 import java.net.URI;
-import org.eclipse.core.runtime.IProgressMonitor;
-import org.eclipse.core.runtime.NullProgressMonitor;
+import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.metadata.repository.MetadataRepositoryManager;
 import org.eclipse.equinox.internal.p2.ui.ProvUIActivator;
@@ -109,6 +108,8 @@ public class MetadataRepositoryElement extends RemoteQueriedElement implements I
 				} else
 					// handle other exceptions the normal way
 					handleException(e, NLS.bind(ProvUIMessages.MetadataRepositoryElement_RepositoryLoadError, location));
+			} catch (OperationCanceledException e) {
+				// Nothing to report
 			}
 		return (IMetadataRepository) queryable;
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/QueryableUpdates.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/QueryableUpdates.java
index d35bb81..939261c 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/QueryableUpdates.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/QueryableUpdates.java
@@ -43,18 +43,27 @@ public class QueryableUpdates implements IQueryable {
 			ProvUI.reportStatus(new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, ProvUIMessages.ProvisioningUtil_NoPlannerFound), StatusManager.SHOW | StatusManager.LOG);
 			return result;
 		}
-		ArrayList allUpdates = new ArrayList();
-		for (int i = 0; i < iusToUpdate.length; i++) {
-			IInstallableUnit[] updates = planner.updatesFor(iusToUpdate[i], new ProvisioningContext(), new SubProgressMonitor(monitor, totalWork / 2 / iusToUpdate.length));
-			for (int j = 0; j < updates.length; j++)
-				allUpdates.add(updates[j]);
+		try {
+			ArrayList allUpdates = new ArrayList();
+			for (int i = 0; i < iusToUpdate.length; i++) {
+				if (monitor.isCanceled())
+					return result;
+				IInstallableUnit[] updates = planner.updatesFor(iusToUpdate[i], new ProvisioningContext(), new SubProgressMonitor(monitor, totalWork / 2 / iusToUpdate.length));
+				for (int j = 0; j < updates.length; j++)
+					allUpdates.add(updates[j]);
+			}
+			for (int i = 0; i < allUpdates.size(); i++) {
+				if (monitor.isCanceled())
+					return result;
+				if (query.isMatch(allUpdates.get(i)))
+					result.accept(allUpdates.get(i));
+				monitor.worked(totalWork / 2 / allUpdates.size());
+			}
+		} catch (OperationCanceledException e) {
+			// Nothing more to do, return result
+		} finally {
+			monitor.done();
 		}
-		for (int i = 0; i < allUpdates.size(); i++) {
-			if (query.isMatch(allUpdates.get(i)))
-				result.accept(allUpdates.get(i));
-			monitor.worked(totalWork / 2 / allUpdates.size());
-		}
-		monitor.done();
 		return result;
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ProvisioningOperationRunner.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ProvisioningOperationRunner.java
index 1c5f453..29c92ed 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ProvisioningOperationRunner.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/ProvisioningOperationRunner.java
@@ -63,6 +63,8 @@ public class ProvisioningOperationRunner {
 			} else {
 				op.execute(null, ProvUI.getUIInfoAdapter(shell));
 			}
+		} catch (OperationCanceledException e) {
+			// nothing to do
 		} catch (ExecutionException e) {
 			ProvUI.handleException(e.getCause(), NLS.bind(ProvUIMessages.ProvisioningOperationRunner_ErrorExecutingOperation, op.getLabel()), errorStyle);
 		}
@@ -98,6 +100,8 @@ public class ProvisioningOperationRunner {
 							this.setProperty(IProgressConstants.NO_IMMEDIATE_ERROR_PROMPT_PROPERTY, Boolean.TRUE);
 						}
 						return status;
+					} catch (OperationCanceledException e) {
+						return Status.CANCEL_STATUS;
 					} catch (final ExecutionException e) {
 						if (noPrompt) {
 							thisJob.setProperty(IProgressConstants.KEEP_PROPERTY, Boolean.TRUE);
@@ -126,6 +130,8 @@ public class ProvisioningOperationRunner {
 							this.setProperty(IProgressConstants.NO_IMMEDIATE_ERROR_PROMPT_PROPERTY, Boolean.TRUE);
 						}
 						return status;
+					} catch (OperationCanceledException e) {
+						return Status.CANCEL_STATUS;
 					} catch (ExecutionException e) {
 						if (noPrompt) {
 							this.setProperty(IProgressConstants.KEEP_PROPERTY, Boolean.TRUE);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
index 50aee42..468fab6 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/AvailableIUGroup.java
@@ -327,10 +327,12 @@ public class AvailableIUGroup extends StructuredIUGroup {
 		Job job = new Job(NLS.bind(ProvUIMessages.AvailableIUGroup_LoadingRepository, location.toString())) {
 			protected IStatus run(IProgressMonitor monitor) {
 				try {
-					ProvisioningUtil.loadMetadataRepository(location, new NullProgressMonitor());
+					ProvisioningUtil.loadMetadataRepository(location, monitor);
 					return Status.OK_STATUS;
 				} catch (ProvisionException e) {
 					return e.getStatus();
+				} catch (OperationCanceledException e) {
+					return Status.CANCEL_STATUS;
 				}
 			}
 		};
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/ProvisioningUtil.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/ProvisioningUtil.java
index 377f577..078aff9 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/ProvisioningUtil.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/operations/ProvisioningUtil.java
@@ -12,7 +12,6 @@
 package org.eclipse.equinox.internal.provisional.p2.ui.operations;
 
 import java.net.URI;
-import java.util.ArrayList;
 import java.util.Map;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
@@ -211,33 +210,6 @@ public class ProvisioningUtil {
 	}
 
 	/*
-	 * See what updates might be available for a single IU.
-	 * Useful when checking for updates and letting the user decide
-	 * which IU's to update.
-	 */
-	public static IInstallableUnit[] updatesFor(IInstallableUnit toUpdate, IProgressMonitor monitor) throws ProvisionException {
-		Assert.isNotNull(toUpdate);
-		return getPlanner().updatesFor(toUpdate, new ProvisioningContext(), monitor);
-	}
-
-	/*
-	 * See what updates might be available for the specified IU's.
-	 * Useful for bulk update that can be directly passed to the engine.
-	 */
-	public static IInstallableUnit[] updatesFor(IInstallableUnit[] toUpdate, IProgressMonitor monitor) throws ProvisionException {
-		Assert.isNotNull(toUpdate);
-
-		IPlanner planner = getPlanner();
-		ArrayList allUpdates = new ArrayList();
-		for (int i = 0; i < toUpdate.length; i++) {
-			IInstallableUnit[] updates = planner.updatesFor(toUpdate[i], new ProvisioningContext(), monitor);
-			for (int j = 0; j < updates.length; j++)
-				allUpdates.add(updates[j]);
-		}
-		return (IInstallableUnit[]) allUpdates.toArray(new IInstallableUnit[allUpdates.size()]);
-	}
-
-	/*
 	 * Get a plan for becoming
 	 */
 	public static ProvisioningPlan getRevertPlan(IInstallableUnit profileIU, IProgressMonitor monitor) throws ProvisionException {
commit 5c95a5e80b57497c0674f015fa8e398ac699d35f
Author: Susan Franklin <sfranklin>
Date:   Mon Oct 13 21:54:02 2008 +0000

    Bug 250680 - [ui] Catching OperationCanceledException

2	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/QueryableMetadataRepositoryManager.java
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/QueryableMetadataRepositoryManager.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/QueryableMetadataRepositoryManager.java
index c307960..9c01c0a 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/QueryableMetadataRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/QueryableMetadataRepositoryManager.java
@@ -105,6 +105,8 @@ public class QueryableMetadataRepositoryManager implements IQueryable {
 						handleNotFound(e, location);
 					else
 						ProvUI.handleException(e, NLS.bind(ProvUIMessages.ProvisioningUtil_LoadRepositoryFailure, repoLocations.get(i)), StatusManager.LOG);
+				} catch (OperationCanceledException e) {
+					break;
 				}
 				reportAccumulatedStatus();
 			}

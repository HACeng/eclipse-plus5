commit 01ea1bf493bc765c3149a00ee9e5190340ae0599
Author: Pascal Rapicault <prapicau>
Date:   Thu Mar 27 00:41:22 2008 +0000

    Bug 224150 - watch plugins and features folder using ProfileSynchronizer

1	1	bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/provisional/p2/directorywatcher/RepositoryListener.java
2	1	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/META-INF/MANIFEST.MF
1	1	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Util.java
diff --git a/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/provisional/p2/directorywatcher/RepositoryListener.java b/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/provisional/p2/directorywatcher/RepositoryListener.java
index a4dcfff..dcecdf1 100644
--- a/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/provisional/p2/directorywatcher/RepositoryListener.java
+++ b/bundles/org.eclipse.equinox.p2.directorywatcher/src/org/eclipse/equinox/internal/provisional/p2/directorywatcher/RepositoryListener.java
@@ -289,7 +289,7 @@ public class RepositoryListener extends DirectoryChangeListener {
 				if (snapshotLastModified == null || !snapshotLastModified.equals(artifactLastModified))
 					artifactRepository.removeDescriptor(descriptor);
 				else
-					snapshot.remove(key);
+					snapshot.remove(artifactFile);
 			}
 		}
 
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/META-INF/MANIFEST.MF
index bb48079..22e87a9 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/META-INF/MANIFEST.MF
@@ -30,7 +30,8 @@ Import-Package: javax.xml.parsers,
  org.osgi.util.tracker;version="1.3.2",
  org.w3c.dom,
  org.xml.sax
-Export-Package: org.eclipse.equinox.internal.p2.touchpoint.eclipse;x-internal:=true,org.eclipse.equinox.internal.p2.update;x-friends:="org.eclipse.equinox.p2.reconciler.dropins"
+Export-Package: org.eclipse.equinox.internal.p2.touchpoint.eclipse;x-friends:="org.eclipse.equinox.p2.reconciler.dropins",
+ org.eclipse.equinox.internal.p2.update;x-friends:="org.eclipse.equinox.p2.reconciler.dropins"
 Bundle-RequiredExecutionEnvironment: J2SE-1.4,
  CDC-1.1/Foundation-1.1
 Eclipse-LazyStart: true
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Util.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Util.java
index e807aa7..3fd187c 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Util.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Util.java
@@ -66,7 +66,7 @@ public class Util {
 		return location.getDataArea(Activator.ID);
 	}
 
-	static IFileArtifactRepository getBundlePoolRepository(IProfile profile) {
+	static public IFileArtifactRepository getBundlePoolRepository(IProfile profile) {
 		URL location = getBundlePoolLocation(profile);
 		IArtifactRepositoryManager manager = getArtifactRepositoryManager();
 		try {
commit 61dfad8fd19b4b3c82dc8cfc3249c11e37dc2742
Author: DJ Houghton <dj>
Date:   Thu Mar 27 00:43:56 2008 +0000

    Bug 224150 - watch plugins and features folder using ProfileSynchronizer

60	0	bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/BundlePoolFilteredListener.java
12	4	bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java
12	4	bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java
25	1	bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java
60	0	bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/BundlePoolFilteredListener.java
12	4	bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java
12	4	bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java
25	1	bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/BundlePoolFilteredListener.java b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/BundlePoolFilteredListener.java
new file mode 100644
index 0000000..6a73117
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/BundlePoolFilteredListener.java
@@ -0,0 +1,60 @@
+package org.eclipse.equinox.internal.p2.extensionlocation;
+
+import java.io.File;
+import java.util.HashSet;
+import java.util.Set;
+import org.eclipse.equinox.internal.p2.reconciler.dropins.Activator;
+import org.eclipse.equinox.internal.p2.touchpoint.eclipse.Util;
+import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IFileArtifactRepository;
+import org.eclipse.equinox.internal.provisional.p2.directorywatcher.DirectoryChangeListener;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
+import org.osgi.framework.BundleContext;
+
+public class BundlePoolFilteredListener extends DirectoryChangeListener {
+
+	private DirectoryChangeListener delegate;
+	private Set bundlePoolFiles = new HashSet();
+
+	public BundlePoolFilteredListener(BundleContext context, DirectoryChangeListener listener) {
+		delegate = listener;
+		IFileArtifactRepository bundlePool = Util.getBundlePoolRepository(Activator.getCurrentProfile(context));
+		IArtifactKey[] keys = bundlePool.getArtifactKeys();
+		for (int i = 0; i < keys.length; i++) {
+			File artifactFile = bundlePool.getArtifactFile(keys[i]);
+			if (artifactFile != null)
+				bundlePoolFiles.add(artifactFile);
+		}
+	}
+
+	public boolean added(File file) {
+		return delegate.added(file);
+	}
+
+	public boolean changed(File file) {
+		return delegate.changed(file);
+	}
+
+	public Long getSeenFile(File file) {
+		return delegate.getSeenFile(file);
+	}
+
+	public boolean isInterested(File file) {
+		if (bundlePoolFiles.contains(file))
+			return false;
+
+		return delegate.isInterested(file);
+	}
+
+	public boolean removed(File file) {
+		return delegate.removed(file);
+	}
+
+	public void startPoll() {
+		delegate.startPoll();
+	}
+
+	public void stopPoll() {
+		delegate.stopPoll();
+	}
+
+}
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java
index f73fd4d..cb74293 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java
@@ -8,8 +8,7 @@ import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.reconciler.dropins.Activator;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.*;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
-import org.eclipse.equinox.internal.provisional.p2.directorywatcher.DirectoryWatcher;
-import org.eclipse.equinox.internal.provisional.p2.directorywatcher.RepositoryListener;
+import org.eclipse.equinox.internal.provisional.p2.directorywatcher.*;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository.SimpleArtifactRepositoryFactory;
 import org.eclipse.equinox.internal.provisional.spi.p2.core.repository.AbstractRepository;
@@ -17,6 +16,7 @@ import org.osgi.framework.BundleContext;
 
 public class ExtensionLocationArtifactRepository extends AbstractRepository implements IFileArtifactRepository {
 
+	private static final String POOLED = ".pooled"; //$NON-NLS-1$
 	//private static final String PROFILE_EXTENSION = "profile.extension"; //$NON-NLS-1$
 	private static final String ECLIPSE = "eclipse"; //$NON-NLS-1$
 	private static final String FEATURES = "features"; //$NON-NLS-1$
@@ -46,7 +46,10 @@ public class ExtensionLocationArtifactRepository extends AbstractRepository impl
 		artifactRepository = (IFileArtifactRepository) initializeArtifactRepository(localRepositoryURL, "extension location implementation - " + location.toExternalForm()); //$NON-NLS-1$
 
 		DirectoryWatcher watcher = new DirectoryWatcher(new File[] {plugins, features});
-		RepositoryListener listener = new RepositoryListener(context, null, artifactRepository);
+		DirectoryChangeListener listener = new RepositoryListener(context, null, artifactRepository);
+		if (location.getPath().endsWith(POOLED))
+			listener = new BundlePoolFilteredListener(context, listener);
+
 		watcher.addListener(listener);
 		watcher.poll();
 	}
@@ -72,7 +75,12 @@ public class ExtensionLocationArtifactRepository extends AbstractRepository impl
 		if (!FILE.equals(url.getProtocol()))
 			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, "location must use file protocol", null));
 
-		File base = new File(url.getPath());
+		String path = url.getPath();
+		File base = new File(path);
+		if (path.endsWith(POOLED)) {
+			base = base.getParentFile();
+		}
+
 		if (!base.isDirectory())
 			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, "location not a directory", null));
 
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java
index c675053..4cc675f 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java
@@ -6,8 +6,7 @@ import java.net.URL;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.reconciler.dropins.Activator;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
-import org.eclipse.equinox.internal.provisional.p2.directorywatcher.DirectoryWatcher;
-import org.eclipse.equinox.internal.provisional.p2.directorywatcher.RepositoryListener;
+import org.eclipse.equinox.internal.provisional.p2.directorywatcher.*;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.internal.provisional.p2.query.Collector;
@@ -18,6 +17,7 @@ import org.osgi.framework.BundleContext;
 
 public class ExtensionLocationMetadataRepository extends AbstractRepository implements IMetadataRepository {
 
+	private static final String POOLED = ".pooled"; //$NON-NLS-1$
 	private static final String ECLIPSE = "eclipse"; //$NON-NLS-1$
 	private static final String FEATURES = "features"; //$NON-NLS-1$
 	private static final String PLUGINS = "plugins"; //$NON-NLS-1$
@@ -46,7 +46,10 @@ public class ExtensionLocationMetadataRepository extends AbstractRepository impl
 		metadataRepository = initializeMetadataRepository(localRepositoryURL, "extension location implementation - " + location.toExternalForm()); //$NON-NLS-1$
 
 		DirectoryWatcher watcher = new DirectoryWatcher(new File[] {plugins, features});
-		RepositoryListener listener = new RepositoryListener(context, metadataRepository, null);
+		DirectoryChangeListener listener = new RepositoryListener(context, metadataRepository, null);
+		if (location.getPath().endsWith(POOLED))
+			listener = new BundlePoolFilteredListener(context, listener);
+
 		watcher.addListener(listener);
 		watcher.poll();
 	}
@@ -85,7 +88,12 @@ public class ExtensionLocationMetadataRepository extends AbstractRepository impl
 		if (!FILE.equals(url.getProtocol()))
 			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, "location must use file protocol", null));
 
-		File base = new File(url.getPath());
+		String path = url.getPath();
+		File base = new File(path);
+		if (path.endsWith(POOLED)) {
+			base = base.getParentFile();
+		}
+
 		if (!base.isDirectory())
 			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, "location not a directory", null));
 
diff --git a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java
index 75be14b..25385e0 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java
@@ -41,6 +41,7 @@ public class Activator implements BundleActivator {
 	private static IMetadataRepository[] dropinRepositories;
 	private static IMetadataRepository[] configurationRepositories;
 	private static IMetadataRepository[] linksRepositories;
+	private static IMetadataRepository eclipseProductRepository;
 
 	/**
 	 * Helper method to load a metadata repository from the specified URL.
@@ -104,6 +105,8 @@ public class Activator implements BundleActivator {
 		if (profile == null)
 			return;
 
+		// create a watcher for the main plugins and features directories
+		watchEclipseProduct();
 		// create the watcher for the "drop-ins" folder
 		watchDropins(profile);
 		// keep an eye on the platform.xml
@@ -113,6 +116,24 @@ public class Activator implements BundleActivator {
 		synchronize(new ArrayList(0), null);
 	}
 
+	private void watchEclipseProduct() {
+
+		URL baseURL;
+		try {
+			baseURL = new URL(bundleContext.getProperty(OSGI_CONFIGURATION_AREA));
+			URL pooledURL = new URL(baseURL, "../.pooled"); //$NON-NLS-1$
+			loadArtifactRepository(pooledURL);
+			eclipseProductRepository = loadMetadataRepository(pooledURL);
+		} catch (MalformedURLException e) {
+			// TODO proper logging
+			e.printStackTrace();
+		} catch (ProvisionException e) {
+			// TODO proper logging
+			e.printStackTrace();
+		}
+
+	}
+
 	private boolean startEarly(String bundleName) throws BundleException {
 		Bundle bundle = getBundle(bundleName);
 		if (bundle == null)
@@ -139,6 +160,9 @@ public class Activator implements BundleActivator {
 		if (linksRepositories != null)
 			repositories.addAll(Arrays.asList(linksRepositories));
 
+		if (eclipseProductRepository != null)
+			repositories.add(eclipseProductRepository);
+
 		ProfileSynchronizer synchronizer = new ProfileSynchronizer(profile, repositories);
 		IStatus result = synchronizer.synchronize(monitor);
 		if (!result.isOK())
@@ -284,7 +308,7 @@ public class Activator implements BundleActivator {
 	//		}
 	//	}
 
-	private static IProfile getCurrentProfile(BundleContext context) {
+	public static IProfile getCurrentProfile(BundleContext context) {
 		ServiceReference reference = context.getServiceReference(IProfileRegistry.class.getName());
 		if (reference == null)
 			return null;
diff --git a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/BundlePoolFilteredListener.java b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/BundlePoolFilteredListener.java
new file mode 100644
index 0000000..6a73117
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/BundlePoolFilteredListener.java
@@ -0,0 +1,60 @@
+package org.eclipse.equinox.internal.p2.extensionlocation;
+
+import java.io.File;
+import java.util.HashSet;
+import java.util.Set;
+import org.eclipse.equinox.internal.p2.reconciler.dropins.Activator;
+import org.eclipse.equinox.internal.p2.touchpoint.eclipse.Util;
+import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IFileArtifactRepository;
+import org.eclipse.equinox.internal.provisional.p2.directorywatcher.DirectoryChangeListener;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
+import org.osgi.framework.BundleContext;
+
+public class BundlePoolFilteredListener extends DirectoryChangeListener {
+
+	private DirectoryChangeListener delegate;
+	private Set bundlePoolFiles = new HashSet();
+
+	public BundlePoolFilteredListener(BundleContext context, DirectoryChangeListener listener) {
+		delegate = listener;
+		IFileArtifactRepository bundlePool = Util.getBundlePoolRepository(Activator.getCurrentProfile(context));
+		IArtifactKey[] keys = bundlePool.getArtifactKeys();
+		for (int i = 0; i < keys.length; i++) {
+			File artifactFile = bundlePool.getArtifactFile(keys[i]);
+			if (artifactFile != null)
+				bundlePoolFiles.add(artifactFile);
+		}
+	}
+
+	public boolean added(File file) {
+		return delegate.added(file);
+	}
+
+	public boolean changed(File file) {
+		return delegate.changed(file);
+	}
+
+	public Long getSeenFile(File file) {
+		return delegate.getSeenFile(file);
+	}
+
+	public boolean isInterested(File file) {
+		if (bundlePoolFiles.contains(file))
+			return false;
+
+		return delegate.isInterested(file);
+	}
+
+	public boolean removed(File file) {
+		return delegate.removed(file);
+	}
+
+	public void startPoll() {
+		delegate.startPoll();
+	}
+
+	public void stopPoll() {
+		delegate.stopPoll();
+	}
+
+}
diff --git a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java
index f73fd4d..cb74293 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java
@@ -8,8 +8,7 @@ import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.reconciler.dropins.Activator;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.*;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
-import org.eclipse.equinox.internal.provisional.p2.directorywatcher.DirectoryWatcher;
-import org.eclipse.equinox.internal.provisional.p2.directorywatcher.RepositoryListener;
+import org.eclipse.equinox.internal.provisional.p2.directorywatcher.*;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.internal.provisional.spi.p2.artifact.repository.SimpleArtifactRepositoryFactory;
 import org.eclipse.equinox.internal.provisional.spi.p2.core.repository.AbstractRepository;
@@ -17,6 +16,7 @@ import org.osgi.framework.BundleContext;
 
 public class ExtensionLocationArtifactRepository extends AbstractRepository implements IFileArtifactRepository {
 
+	private static final String POOLED = ".pooled"; //$NON-NLS-1$
 	//private static final String PROFILE_EXTENSION = "profile.extension"; //$NON-NLS-1$
 	private static final String ECLIPSE = "eclipse"; //$NON-NLS-1$
 	private static final String FEATURES = "features"; //$NON-NLS-1$
@@ -46,7 +46,10 @@ public class ExtensionLocationArtifactRepository extends AbstractRepository impl
 		artifactRepository = (IFileArtifactRepository) initializeArtifactRepository(localRepositoryURL, "extension location implementation - " + location.toExternalForm()); //$NON-NLS-1$
 
 		DirectoryWatcher watcher = new DirectoryWatcher(new File[] {plugins, features});
-		RepositoryListener listener = new RepositoryListener(context, null, artifactRepository);
+		DirectoryChangeListener listener = new RepositoryListener(context, null, artifactRepository);
+		if (location.getPath().endsWith(POOLED))
+			listener = new BundlePoolFilteredListener(context, listener);
+
 		watcher.addListener(listener);
 		watcher.poll();
 	}
@@ -72,7 +75,12 @@ public class ExtensionLocationArtifactRepository extends AbstractRepository impl
 		if (!FILE.equals(url.getProtocol()))
 			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, "location must use file protocol", null));
 
-		File base = new File(url.getPath());
+		String path = url.getPath();
+		File base = new File(path);
+		if (path.endsWith(POOLED)) {
+			base = base.getParentFile();
+		}
+
 		if (!base.isDirectory())
 			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, "location not a directory", null));
 
diff --git a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java
index c675053..4cc675f 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java
@@ -6,8 +6,7 @@ import java.net.URL;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.reconciler.dropins.Activator;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
-import org.eclipse.equinox.internal.provisional.p2.directorywatcher.DirectoryWatcher;
-import org.eclipse.equinox.internal.provisional.p2.directorywatcher.RepositoryListener;
+import org.eclipse.equinox.internal.provisional.p2.directorywatcher.*;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.internal.provisional.p2.query.Collector;
@@ -18,6 +17,7 @@ import org.osgi.framework.BundleContext;
 
 public class ExtensionLocationMetadataRepository extends AbstractRepository implements IMetadataRepository {
 
+	private static final String POOLED = ".pooled"; //$NON-NLS-1$
 	private static final String ECLIPSE = "eclipse"; //$NON-NLS-1$
 	private static final String FEATURES = "features"; //$NON-NLS-1$
 	private static final String PLUGINS = "plugins"; //$NON-NLS-1$
@@ -46,7 +46,10 @@ public class ExtensionLocationMetadataRepository extends AbstractRepository impl
 		metadataRepository = initializeMetadataRepository(localRepositoryURL, "extension location implementation - " + location.toExternalForm()); //$NON-NLS-1$
 
 		DirectoryWatcher watcher = new DirectoryWatcher(new File[] {plugins, features});
-		RepositoryListener listener = new RepositoryListener(context, metadataRepository, null);
+		DirectoryChangeListener listener = new RepositoryListener(context, metadataRepository, null);
+		if (location.getPath().endsWith(POOLED))
+			listener = new BundlePoolFilteredListener(context, listener);
+
 		watcher.addListener(listener);
 		watcher.poll();
 	}
@@ -85,7 +88,12 @@ public class ExtensionLocationMetadataRepository extends AbstractRepository impl
 		if (!FILE.equals(url.getProtocol()))
 			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, "location must use file protocol", null));
 
-		File base = new File(url.getPath());
+		String path = url.getPath();
+		File base = new File(path);
+		if (path.endsWith(POOLED)) {
+			base = base.getParentFile();
+		}
+
 		if (!base.isDirectory())
 			throw new ProvisionException(new Status(IStatus.ERROR, Activator.ID, ProvisionException.REPOSITORY_NOT_FOUND, "location not a directory", null));
 
diff --git a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java
index 75be14b..25385e0 100644
--- a/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java
+++ b/bundles/org.eclipse.equinox.p2.reconciler/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java
@@ -41,6 +41,7 @@ public class Activator implements BundleActivator {
 	private static IMetadataRepository[] dropinRepositories;
 	private static IMetadataRepository[] configurationRepositories;
 	private static IMetadataRepository[] linksRepositories;
+	private static IMetadataRepository eclipseProductRepository;
 
 	/**
 	 * Helper method to load a metadata repository from the specified URL.
@@ -104,6 +105,8 @@ public class Activator implements BundleActivator {
 		if (profile == null)
 			return;
 
+		// create a watcher for the main plugins and features directories
+		watchEclipseProduct();
 		// create the watcher for the "drop-ins" folder
 		watchDropins(profile);
 		// keep an eye on the platform.xml
@@ -113,6 +116,24 @@ public class Activator implements BundleActivator {
 		synchronize(new ArrayList(0), null);
 	}
 
+	private void watchEclipseProduct() {
+
+		URL baseURL;
+		try {
+			baseURL = new URL(bundleContext.getProperty(OSGI_CONFIGURATION_AREA));
+			URL pooledURL = new URL(baseURL, "../.pooled"); //$NON-NLS-1$
+			loadArtifactRepository(pooledURL);
+			eclipseProductRepository = loadMetadataRepository(pooledURL);
+		} catch (MalformedURLException e) {
+			// TODO proper logging
+			e.printStackTrace();
+		} catch (ProvisionException e) {
+			// TODO proper logging
+			e.printStackTrace();
+		}
+
+	}
+
 	private boolean startEarly(String bundleName) throws BundleException {
 		Bundle bundle = getBundle(bundleName);
 		if (bundle == null)
@@ -139,6 +160,9 @@ public class Activator implements BundleActivator {
 		if (linksRepositories != null)
 			repositories.addAll(Arrays.asList(linksRepositories));
 
+		if (eclipseProductRepository != null)
+			repositories.add(eclipseProductRepository);
+
 		ProfileSynchronizer synchronizer = new ProfileSynchronizer(profile, repositories);
 		IStatus result = synchronizer.synchronize(monitor);
 		if (!result.isOK())
@@ -284,7 +308,7 @@ public class Activator implements BundleActivator {
 	//		}
 	//	}
 
-	private static IProfile getCurrentProfile(BundleContext context) {
+	public static IProfile getCurrentProfile(BundleContext context) {
 		ServiceReference reference = context.getServiceReference(IProfileRegistry.class.getName());
 		if (reference == null)
 			return null;

commit c940acaa0268d997a34e4e38952f429dd11d5560
Author: Susan Franklin <sfranklin>
Date:   Tue Oct 23 18:07:15 2007 +0000

    Bug 203011 - [prov] support for automatic updating
    Initial commit of user prefs

7	5	bundles/org.eclipse.equinox.p2.ui.admin.rcp/ProvAdminUI.launch
1	0	bundles/org.eclipse.equinox.p2.ui.sdk/META-INF/MANIFEST.MF
4	1	bundles/org.eclipse.equinox.p2.ui.sdk/plugin.properties
25	0	bundles/org.eclipse.equinox.p2.ui.sdk/plugin.xml
206	0	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AutomaticUpdateScheduler.java
48	0	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
43	0	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
52	4	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java
2	21	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateHandler.java
48	0	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
238	0	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/AutomaticUpdatesPreferencePage.java
24	0	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/PreferenceConstants.java
32	0	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/PreferenceInitializer.java
38	0	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
1	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvUIActivator.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProfileModificationOperation.java
6	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningOperation.java
29	58	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin.rcp/ProvAdminUI.launch b/bundles/org.eclipse.equinox.p2.ui.admin.rcp/ProvAdminUI.launch
index 620f6a1..20a4033 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin.rcp/ProvAdminUI.launch
+++ b/bundles/org.eclipse.equinox.p2.ui.admin.rcp/ProvAdminUI.launch
@@ -5,18 +5,20 @@
 <booleanAttribute key="automaticValidate" value="false"/>
 <stringAttribute key="bootstrap" value=""/>
 <stringAttribute key="checked" value="[NONE]"/>
-<booleanAttribute key="clearConfig" value="true"/>
-<stringAttribute key="configLocation" value="${workspace_loc}/.metadata/.plugins/org.eclipse.pde.core/ProvAdminUI"/>
+<booleanAttribute key="clearConfig" value="false"/>
+<stringAttribute key="configLocation" value="c:\prov\p2\ProvAdminUI"/>
 <booleanAttribute key="default_auto_start" value="false"/>
 <intAttribute key="default_start_level" value="4"/>
+<stringAttribute key="execEnvironment" value="CDC-1.0/Foundation-1.0"/>
 <booleanAttribute key="includeOptional" value="false"/>
 <booleanAttribute key="org.eclipse.debug.core.appendEnvironmentVariables" value="true"/>
 <stringAttribute key="org.eclipse.jdt.launching.PROGRAM_ARGUMENTS" value="-os ${target.os} -ws ${target.ws} -arch ${target.arch} -nl ${target.nl} -console -consolelog -product org.eclipse.equinox.p2.ui.admin.rcp.product"/>
 <stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.pde.ui.workbenchClasspathProvider"/>
-<stringAttribute key="org.eclipse.jdt.launching.VM_ARGUMENTS" value="-Declipse.p2.data.area=d:/tmp/equinox.p2/agentData/"/>
+<stringAttribute key="org.eclipse.jdt.launching.VM_ARGUMENTS" value="-Declipse.p2.data.area=c:/prov/p2/agentData/"/>
 <stringAttribute key="pde.version" value="3.3"/>
 <stringAttribute key="target_bundles" value="com.ibm.icu@default:default,org.eclipse.core.commands@default:default,org.eclipse.core.contenttype@default:default,org.eclipse.core.databinding@default:default,org.eclipse.core.expressions@default:default,org.eclipse.core.jobs@default:default,org.eclipse.core.runtime@default:default,org.eclipse.equinox.app@default:true,org.eclipse.equinox.common@default:default,org.eclipse.equinox.launcher@default:default,org.eclipse.equinox.launcher.win32.win32.x86@default:default,org.eclipse.equinox.preferences@default:default,org.eclipse.equinox.registry@default:default,org.eclipse.help@default:default,org.eclipse.jface@default:default,org.eclipse.jface.databinding@default:default,org.eclipse.osgi.services@default:default,org.eclipse.swt@default:default,org.eclipse.swt.win32.win32.x86@default:default,org.eclipse.ui@default:default,org.eclipse.ui.workbench@default:default"/>
 <booleanAttribute key="tracing" value="false"/>
-<booleanAttribute key="useDefaultConfigArea" value="true"/>
-<stringAttribute key="workspace_bundles" value="com.thoughtworks.xstream@default:default,org.eclipse.ecf@default:default,org.eclipse.ecf.filetransfer@default:default,org.eclipse.ecf.identity@default:default,org.eclipse.ecf.provider.filetransfer@default:default,org.eclipse.equinox.frameworkadmin@default:default,org.eclipse.equinox.frameworkadmin.equinox@default:true,org.eclipse.equinox.p2.artifact.repository@default:default,org.eclipse.equinox.p2.console@default:true,org.eclipse.equinox.p2.core@default:default,org.eclipse.equinox.p2.director@default:default,org.eclipse.equinox.p2.download@default:default,org.eclipse.equinox.p2.engine@default:default,org.eclipse.equinox.p2.exemplarysetup@default:true,org.eclipse.equinox.p2.metadata@default:default,org.eclipse.equinox.p2.metadata.repository@default:default,org.eclipse.equinox.p2.touchpoint.eclipse@default:default,org.eclipse.equinox.p2.touchpoint.natives@default:default,org.eclipse.equinox.p2.ui@default:default,org.eclipse.equinox.p2.ui.admin@default:default,org.eclipse.equinox.p2.ui.admin.rcp@default:default,org.eclipse.equinox.p2.ui.sdk@default:default,org.eclipse.equinox.simpleconfigurator@default:true,org.eclipse.equinox.simpleconfigurator.manipulator@default:default,org.eclipse.osgi@:"/>
+<booleanAttribute key="useDefaultConfigArea" value="false"/>
+<booleanAttribute key="useNamedJRE" value="false"/>
+<stringAttribute key="workspace_bundles" value="com.thoughtworks.xstream@default:default,org.eclipse.ecf@default:default,org.eclipse.ecf.filetransfer@default:default,org.eclipse.ecf.identity@default:default,org.eclipse.ecf.provider.filetransfer@default:default,org.eclipse.equinox.frameworkadmin@default:default,org.eclipse.equinox.frameworkadmin.equinox@default:true,org.eclipse.equinox.p2.artifact.repository@default:default,org.eclipse.equinox.p2.console@default:true,org.eclipse.equinox.p2.core@default:default,org.eclipse.equinox.p2.director@default:default,org.eclipse.equinox.p2.download@default:default,org.eclipse.equinox.p2.engine@default:default,org.eclipse.equinox.p2.exemplarysetup@default:true,org.eclipse.equinox.p2.metadata@default:default,org.eclipse.equinox.p2.metadata.repository@default:default,org.eclipse.equinox.p2.touchpoint.eclipse@default:default,org.eclipse.equinox.p2.touchpoint.natives@default:default,org.eclipse.equinox.p2.ui@default:default,org.eclipse.equinox.p2.ui.admin@default:default,org.eclipse.equinox.p2.ui.admin.rcp@default:default,org.eclipse.equinox.p2.ui.sdk@default:default,org.eclipse.equinox.p2.updatechecker@default:default,org.eclipse.equinox.simpleconfigurator@default:true,org.eclipse.equinox.simpleconfigurator.manipulator@default:default"/>
 </launchConfiguration>
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.ui.sdk/META-INF/MANIFEST.MF
index bb8c281..783184e 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/META-INF/MANIFEST.MF
@@ -22,6 +22,7 @@ Import-Package: org.eclipse.equinox.p2.artifact.repository,
  org.eclipse.equinox.p2.ui.model,
  org.eclipse.equinox.p2.ui.operations,
  org.eclipse.equinox.p2.ui.viewers,
+ org.eclipse.equinox.p2.updatechecker,
  org.eclipse.osgi.service.resolver;version="1.1.0",
  org.eclipse.osgi.util;version="1.1.0",
  org.osgi.framework;version="1.3.0",
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/plugin.properties b/bundles/org.eclipse.equinox.p2.ui.sdk/plugin.properties
index ea9a7b6..029f4a3 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/plugin.properties
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/plugin.properties
@@ -16,4 +16,7 @@ bundleName=Provisioning SDK UI (Incubation)
 Profile.name=Install Location
 IU.name=Feature
 Repository.name=Site
-Update.command=Software Updates (Incubation)...
\ No newline at end of file
+Update.command=Software Updates (Incubation)...
+automaticUpdatesPrefPage = Automatic Updates
+preferenceKeywords.general=automatic update schedule download
+preferences=Update and Install Preferences
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/plugin.xml b/bundles/org.eclipse.equinox.p2.ui.sdk/plugin.xml
index 9b8ccc8..9d6b49c 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/plugin.xml
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/plugin.xml
@@ -1,6 +1,15 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <?eclipse version="3.2"?>
 <plugin>
+   	<extension 
+   		id="preferences" point="org.eclipse.core.runtime.preferences" name="%preferences">
+		<initializer class="org.eclipse.equinox.internal.p2.ui.sdk.prefs.PreferenceInitializer"/>
+	</extension>
+   <extension
+         point="org.eclipse.ui.startup">
+      <startup class="org.eclipse.equinox.internal.p2.ui.sdk.AutomaticUpdateScheduler">
+      </startup>
+   </extension>
  <extension
          point="org.eclipse.ui.propertyPages">
       <page
@@ -32,6 +41,22 @@
       </page>
       
       </extension>
+       <extension
+         point="org.eclipse.ui.preferencePages">
+      <page
+            name="%automaticUpdatesPrefPage"
+            class="org.eclipse.equinox.internal.p2.ui.sdk.prefs.AutomaticUpdatesPreferencePage"
+            id="org.eclipse.equinox.p2.ui.sdk.AutomaticUpdatesPreferencePage">
+            <keywordReference id="org.eclipse.equinox.p2.ui.sdk.updates.general"/>
+      </page>
+   </extension>
+
+      <extension
+   		point="org.eclipse.ui.keywords">
+      <keyword
+            label="%preferenceKeywords.general"
+            id="org.eclipse.equinox.p2.ui.sdk.updates.general"/>
+      </extension>
       
       
    <extension
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AutomaticUpdateScheduler.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AutomaticUpdateScheduler.java
new file mode 100644
index 0000000..3b5e57d
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AutomaticUpdateScheduler.java
@@ -0,0 +1,206 @@
+/*******************************************************************************
+ * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.ui.sdk;
+
+import java.util.Calendar;
+import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.internal.p2.ui.sdk.prefs.PreferenceConstants;
+import org.eclipse.equinox.internal.p2.ui.sdk.updates.AutomaticUpdater;
+import org.eclipse.equinox.p2.core.ProvisionException;
+import org.eclipse.equinox.p2.core.helpers.ServiceHelper;
+import org.eclipse.equinox.p2.engine.Profile;
+import org.eclipse.equinox.p2.updatechecker.IUpdateListener;
+import org.eclipse.equinox.p2.updatechecker.UpdateChecker;
+import org.eclipse.ui.IStartup;
+import org.eclipse.ui.statushandlers.StatusManager;
+
+/**
+ * This plug-in is loaded on startup to fork a job that searches for new
+ * plug-ins.
+ */
+public class AutomaticUpdateScheduler implements IStartup {
+	// values are to be picked up from the arrays DAYS and HOURS
+	public static final String P_DAY = "day"; //$NON-NLS-1$
+
+	public static final String P_HOUR = "hour"; //$NON-NLS-1$
+
+	public static final String[] DAYS = {ProvSDKMessages.SchedulerStartup_day, ProvSDKMessages.SchedulerStartup_Monday, ProvSDKMessages.SchedulerStartup_Tuesday, ProvSDKMessages.SchedulerStartup_Wednesday, ProvSDKMessages.SchedulerStartup_Thursday, ProvSDKMessages.SchedulerStartup_Friday, ProvSDKMessages.SchedulerStartup_Saturday, ProvSDKMessages.SchedulerStartup_Sunday};
+
+	public static final String[] HOURS = {ProvSDKMessages.SchedulerStartup_1AM, ProvSDKMessages.SchedulerStartup_2AM, ProvSDKMessages.SchedulerStartup_3AM, ProvSDKMessages.SchedulerStartup_4AM, ProvSDKMessages.SchedulerStartup_5AM, ProvSDKMessages.SchedulerStartup_6AM, ProvSDKMessages.SchedulerStartup_7AM, ProvSDKMessages.SchedulerStartup_8AM, ProvSDKMessages.SchedulerStartup_9AM, ProvSDKMessages.SchedulerStartup_10AM, ProvSDKMessages.SchedulerStartup_11AM, ProvSDKMessages.SchedulerStartup_12PM, ProvSDKMessages.SchedulerStartup_1PM, ProvSDKMessages.SchedulerStartup_2PM, ProvSDKMessages.SchedulerStartup_3PM, ProvSDKMessages.SchedulerStartup_4PM, ProvSDKMessages.SchedulerStartup_5PM, ProvSDKMessages.SchedulerStartup_6PM, ProvSDKMessages.SchedulerStartup_7PM,
+			ProvSDKMessages.SchedulerStartup_8PM, ProvSDKMessages.SchedulerStartup_9PM, ProvSDKMessages.SchedulerStartup_10PM, ProvSDKMessages.SchedulerStartup_11PM, ProvSDKMessages.SchedulerStartup_12AM,};
+
+	private IUpdateListener listener = null;
+	private UpdateChecker checker = null;
+	private Profile profile;
+
+	/**
+	 * The constructor.
+	 */
+	public AutomaticUpdateScheduler() {
+		ProvSDKUIActivator.setScheduler(this);
+		checker = (UpdateChecker) ServiceHelper.getService(ProvSDKUIActivator.getContext(), UpdateChecker.class.getName());
+		if (checker == null) {
+			// Something did not initialize properly
+			IStatus status = new Status(IStatus.ERROR, ProvSDKUIActivator.PLUGIN_ID, "The update checker service is not initialized");
+			StatusManager.getManager().handle(status, StatusManager.LOG);
+			return;
+		}
+		try {
+			profile = ProvSDKUIActivator.getAnyProfile();
+		} catch (ProvisionException e) {
+			profile = null;
+			IStatus status = new Status(IStatus.ERROR, ProvSDKUIActivator.PLUGIN_ID, ProvSDKMessages.UpdateHandler_NoProfilesDefined, e);
+			StatusManager.getManager().handle(status, StatusManager.LOG);
+			return;
+		}
+
+	}
+
+	public void earlyStartup() {
+		scheduleUpdate();
+	}
+
+	public void shutdown() {
+		removeUpdateListener();
+	}
+
+	public void rescheduleUpdate() {
+		removeUpdateListener();
+		Preferences pref = ProvSDKUIActivator.getDefault().getPluginPreferences();
+		String schedule = pref.getString(PreferenceConstants.P_SCHEDULE);
+		// See if we have a scheduled check or startup only.  If it is
+		// startup only, there is nothing more to do now, a listener will
+		// be created on the next startup.
+		if (schedule.equals(PreferenceConstants.VALUE_ON_STARTUP)) {
+			return;
+		}
+		scheduleUpdate();
+	}
+
+	private void scheduleUpdate() {
+		Preferences pref = ProvSDKUIActivator.getDefault().getPluginPreferences();
+		// See if automatic search is enabled at all
+		if (pref.getBoolean(PreferenceConstants.P_ENABLED) == false)
+			return;
+		String schedule = pref.getString(PreferenceConstants.P_SCHEDULE);
+		long delay = UpdateChecker.ONE_TIME_CHECK;
+		long poll = UpdateChecker.ONE_TIME_CHECK;
+		if (!schedule.equals(PreferenceConstants.VALUE_ON_STARTUP)) {
+			delay = computeDelay(pref);
+			poll = computePoll(pref);
+		}
+		listener = new AutomaticUpdater();
+		checker.addUpdateCheck(profile.getProfileId(), delay, poll, listener);
+
+	}
+
+	private int getDay(Preferences pref) {
+		String day = pref.getString(P_DAY);
+		for (int d = 0; d < DAYS.length; d++)
+			if (DAYS[d].equals(day))
+				switch (d) {
+					case 0 :
+						return -1;
+					case 1 :
+						return Calendar.MONDAY;
+					case 2 :
+						return Calendar.TUESDAY;
+					case 3 :
+						return Calendar.WEDNESDAY;
+					case 4 :
+						return Calendar.THURSDAY;
+					case 5 :
+						return Calendar.FRIDAY;
+					case 6 :
+						return Calendar.SATURDAY;
+					case 7 :
+						return Calendar.SUNDAY;
+				}
+		return -1;
+	}
+
+	private int getHour(Preferences pref) {
+		String hour = pref.getString(P_HOUR);
+		for (int h = 0; h < HOURS.length; h++)
+			if (HOURS[h].equals(hour))
+				return h + 1;
+		return 1;
+	}
+
+	/*
+	 * Computes the number of milliseconds from this moment to the next
+	 * scheduled update check. If that moment has already passed, returns 0L (start
+	 * immediately).
+	 */
+	private long computeDelay(Preferences pref) {
+
+		int target_d = getDay(pref);
+		int target_h = getHour(pref);
+
+		Calendar calendar = Calendar.getInstance();
+		// may need to use the BootLoader locale
+		int current_d = calendar.get(Calendar.DAY_OF_WEEK);
+		// starts with SUNDAY
+		int current_h = calendar.get(Calendar.HOUR_OF_DAY);
+		int current_m = calendar.get(Calendar.MINUTE);
+		int current_s = calendar.get(Calendar.SECOND);
+		int current_ms = calendar.get(Calendar.MILLISECOND);
+
+		long delay = 0L; // milliseconds
+
+		if (target_d == -1) {
+			// Compute the delay for "every day at x o'clock"
+			// Is it now ?
+			if (target_h == current_h && current_m == 0 && current_s == 0)
+				return delay;
+
+			int delta_h = target_h - current_h;
+			if (target_h <= current_h)
+				delta_h += 24;
+			delay = ((delta_h * 60 - current_m) * 60 - current_s) * 1000 - current_ms;
+			return delay;
+		}
+		// Compute the delay for "every Xday at x o'clock"
+		// Is it now ?
+		if (target_d == current_d && target_h == current_h && current_m == 0 && current_s == 0)
+			return delay;
+
+		int delta_d = target_d - current_d;
+		if (target_d < current_d || target_d == current_d && (target_h < current_h || target_h == current_h && current_m > 0))
+			delta_d += 7;
+
+		delay = (((delta_d * 24 + target_h - current_h) * 60 - current_m) * 60 - current_s) * 1000 - current_ms;
+		return delay;
+	}
+
+	/*
+	 * Computes the number of milliseconds for the polling frequency.
+	 * We have already established that there is a schedule, vs. only
+	 * on startup.
+	 */
+	private long computePoll(Preferences pref) {
+
+		int target_d = getDay(pref);
+		if (target_d == -1) {
+			// Every 24 hours
+			return 24 * 60 * 60 * 1000;
+		}
+		return 7 * 24 * 60 * 60 * 1000;
+	}
+
+	private void removeUpdateListener() {
+		// Remove the current listener if there is one
+		if (listener != null && checker != null) {
+			checker.removeUpdateCheck(listener);
+			listener = null;
+		}
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
index ec6c452..9cd0d32 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
@@ -28,8 +28,56 @@ public class ProvSDKMessages extends NLS {
 	public static String UpdateAndInstallDialog_AvailableFeatures;
 	public static String UpdateAndInstallDialog_InstalledFeatures;
 	public static String UpdateAndInstallDialog_ManageSites;
+	public static String UpdateAndInstallDialog_0;
+	public static String UpdateAndInstallDialog_1;
 	public static String UpdateAndInstallDialog_Title;
 	public static String UpdateHandler_NoProfilesDefined;
 	public static String UpdateHandler_NoProfileInstanceDefined;
 	public static String UpdateHandler_SDKUpdateUIMessageTitle;
+	public static String SchedulerStartup_day;
+	public static String SchedulerStartup_Monday;
+	public static String SchedulerStartup_Tuesday;
+	public static String SchedulerStartup_Wednesday;
+	public static String SchedulerStartup_Thursday;
+	public static String SchedulerStartup_Friday;
+	public static String SchedulerStartup_Saturday;
+	public static String SchedulerStartup_Sunday;
+	public static String SchedulerStartup_1AM;
+	public static String SchedulerStartup_2AM;
+	public static String SchedulerStartup_3AM;
+	public static String SchedulerStartup_4AM;
+	public static String SchedulerStartup_5AM;
+	public static String SchedulerStartup_6AM;
+	public static String SchedulerStartup_7AM;
+	public static String SchedulerStartup_8AM;
+	public static String SchedulerStartup_9AM;
+	public static String SchedulerStartup_10AM;
+	public static String SchedulerStartup_11AM;
+	public static String SchedulerStartup_12PM;
+	public static String SchedulerStartup_1PM;
+	public static String SchedulerStartup_2PM;
+	public static String SchedulerStartup_3PM;
+	public static String SchedulerStartup_4PM;
+	public static String SchedulerStartup_5PM;
+	public static String SchedulerStartup_6PM;
+	public static String SchedulerStartup_7PM;
+	public static String SchedulerStartup_8PM;
+	public static String SchedulerStartup_9PM;
+	public static String SchedulerStartup_10PM;
+	public static String SchedulerStartup_11PM;
+	public static String SchedulerStartup_12AM;
+	public static String AutomaticUpdatesJob_AutomaticUpdateSearch;
+	public static String AutomaticUpdatesPreferencePage_findUpdates;
+	public static String AutomaticUpdatesPreferencePage_UpdateSchedule;
+	public static String AutomaticUpdatesPreferencePage_findOnStart;
+	public static String AutomaticUpdatesPreferencePage_findOnSchedule;
+	public static String AutomaticUpdatesPreferencePage_downloadOptions;
+	public static String AutomaticUpdatesPreferencePage_searchAndNotify;
+	public static String AutomaticUpdatesPreferencePage_downloadAndNotify;
+	public static String AutomaticUpdatesJob_EclipseUpdates1;
+	public static String AutomaticUpdatesJob_UpdatesAvailable;
+	public static String AutomaticUpdatesJob_EclipseUpdates2;
+	public static String AutomaticUpdatesPreferencePage_at;
+	public static String AutomaticUpdatesJob_UpdatesDownloaded;
+	public static String AutomaticUpdatesJob_Updates;
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
index e5a36a4..9804ce4 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
@@ -10,6 +10,12 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.sdk;
 
+import org.eclipse.equinox.p2.core.ProvisionException;
+import org.eclipse.equinox.p2.engine.IProfileRegistry;
+import org.eclipse.equinox.p2.engine.Profile;
+import org.eclipse.equinox.p2.ui.model.AllProfiles;
+import org.eclipse.equinox.p2.ui.model.ProfileFactory;
+import org.eclipse.equinox.p2.ui.operations.ProvisioningUtil;
 import org.eclipse.jface.resource.ImageDescriptor;
 import org.eclipse.ui.plugin.AbstractUIPlugin;
 import org.osgi.framework.BundleContext;
@@ -19,8 +25,10 @@ import org.osgi.framework.BundleContext;
  */
 public class ProvSDKUIActivator extends AbstractUIPlugin {
 
+	private static final String DEFAULT_PROFILE_ID = "DefaultProfile"; //$NON-NLS-1$
 	private static ProvSDKUIActivator plugin;
 	private static BundleContext context;
+	private static AutomaticUpdateScheduler scheduler;
 
 	public static final String PLUGIN_ID = "org.eclipse.equinox.p2.ui.sdk"; //$NON-NLS-1$
 
@@ -66,6 +74,41 @@ public class ProvSDKUIActivator extends AbstractUIPlugin {
 
 	public void stop(BundleContext bundleContext) throws Exception {
 		plugin = null;
+		if (scheduler != null) {
+			scheduler.shutdown();
+			scheduler = null;
+		}
 		super.stop(bundleContext);
 	}
+
+	public static AutomaticUpdateScheduler getScheduler() {
+		// If the scheduler was disabled, it does not get initialized
+		if (scheduler == null)
+			scheduler = new AutomaticUpdateScheduler();
+		return scheduler;
+	}
+
+	/**
+	 * Get a profile for the running system.  If not available, get
+	 * any available profile.  Getting any profile allows testing of the
+	 * UI even when the system is not self hosting.  Error reporting is
+	 * left to the client, who must check for a null return.
+	 */
+	public static Profile getAnyProfile() throws ProvisionException {
+		Profile profile = null;
+		// Get the profile of the running system.
+		profile = ProvisioningUtil.getProfile(IProfileRegistry.SELF);
+		if (profile == null) {
+			Profile[] profiles = (Profile[]) new AllProfiles().getChildren(null);
+			if (profiles.length > 0)
+				return profiles[0];
+			return ProfileFactory.makeProfile(DEFAULT_PROFILE_ID);
+
+		}
+		return profile;
+	}
+
+	static void setScheduler(AutomaticUpdateScheduler scheduler) {
+		ProvSDKUIActivator.scheduler = scheduler;
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java
index 13a334b..35f7031 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java
@@ -10,19 +10,30 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.sdk;
 
+import org.eclipse.core.runtime.Preferences;
+import org.eclipse.core.runtime.Preferences.IPropertyChangeListener;
+import org.eclipse.core.runtime.Preferences.PropertyChangeEvent;
+import org.eclipse.equinox.internal.p2.ui.sdk.prefs.PreferenceConstants;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnitConstants;
 import org.eclipse.equinox.p2.ui.IRepositoryManipulator;
 import org.eclipse.equinox.p2.ui.dialogs.UpdateAndInstallGroup;
 import org.eclipse.equinox.p2.ui.viewers.IUGroupFilter;
 import org.eclipse.equinox.p2.ui.viewers.IUProfilePropertyFilter;
+import org.eclipse.jface.dialogs.*;
 import org.eclipse.jface.dialogs.Dialog;
-import org.eclipse.jface.dialogs.TrayDialog;
+import org.eclipse.jface.preference.PreferenceDialog;
 import org.eclipse.jface.resource.JFaceResources;
 import org.eclipse.jface.viewers.ViewerFilter;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.events.SelectionAdapter;
+import org.eclipse.swt.events.SelectionEvent;
 import org.eclipse.swt.graphics.FontMetrics;
 import org.eclipse.swt.graphics.GC;
+import org.eclipse.swt.layout.GridData;
+import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.*;
+import org.eclipse.ui.dialogs.PreferencesUtil;
 
 /**
  * Dialog that allows users to update their installed IU's or find new ones.
@@ -48,15 +59,52 @@ public class UpdateAndInstallDialog extends TrayDialog {
 	}
 
 	protected Control createDialogArea(Composite parent) {
-		GC gc = new GC(parent);
+		Composite comp = new Composite(parent, SWT.NONE);
+		GC gc = new GC(comp);
+		GridLayout layout = new GridLayout();
+		layout.numColumns = 1;
+		comp.setLayout(layout);
+
 		gc.setFont(JFaceResources.getDialogFont());
 		FontMetrics fontMetrics = gc.getFontMetrics();
 		gc.dispose();
 
 		ViewerFilter filter = new IUProfilePropertyFilter(IInstallableUnitConstants.PROFILE_ROOT_IU, Boolean.toString(true));
-		UpdateAndInstallGroup group = new UpdateAndInstallGroup(parent, profile, new ViewerFilter[] {filter}, new ViewerFilter[] {new IUGroupFilter()}, ProvSDKMessages.UpdateAndInstallDialog_InstalledFeatures, ProvSDKMessages.UpdateAndInstallDialog_AvailableFeatures, getRepositoryManipulator(), null, fontMetrics);
+		UpdateAndInstallGroup group = new UpdateAndInstallGroup(comp, profile, new ViewerFilter[] {filter}, new ViewerFilter[] {new IUGroupFilter()}, ProvSDKMessages.UpdateAndInstallDialog_InstalledFeatures, ProvSDKMessages.UpdateAndInstallDialog_AvailableFeatures, getRepositoryManipulator(), null, fontMetrics);
+
+		final Button checkBox = new Button(comp, SWT.CHECK);
+		final Preferences pref = ProvSDKUIActivator.getDefault().getPluginPreferences();
+		checkBox.setText(ProvSDKMessages.UpdateAndInstallDialog_0);
+		checkBox.setSelection(pref.getBoolean(PreferenceConstants.P_ENABLED));
+		checkBox.addSelectionListener(new SelectionAdapter() {
+			public void widgetSelected(SelectionEvent e) {
+				pref.setValue(PreferenceConstants.P_ENABLED, checkBox.getSelection());
+			}
+		});
+
+		pref.addPropertyChangeListener(new IPropertyChangeListener() {
+
+			public void propertyChange(PropertyChangeEvent event) {
+				if (event.getProperty().equals(PreferenceConstants.P_ENABLED))
+					checkBox.setSelection(pref.getBoolean(PreferenceConstants.P_ENABLED));
+			}
+
+		});
+
+		Link updatePrefsLink = new Link(comp, SWT.LEFT | SWT.WRAP);
+		GridData gd = new GridData();
+		gd.horizontalIndent = convertHorizontalDLUsToPixels(IDialogConstants.SMALL_INDENT);
+		updatePrefsLink.setLayoutData(gd);
+		updatePrefsLink.addSelectionListener(new SelectionAdapter() {
+			public void widgetSelected(SelectionEvent e) {
+
+				PreferenceDialog dialog = PreferencesUtil.createPreferenceDialogOn(getShell(), PreferenceConstants.AUTO_UPDATES_PAGE, null, null);
+				dialog.open();
+			}
+		});
+		updatePrefsLink.setText(ProvSDKMessages.UpdateAndInstallDialog_1);
 		Dialog.applyDialogFont(group.getControl());
-		return group.getControl();
+		return comp;
 	}
 
 	/*
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateHandler.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateHandler.java
index 1f1ab78..48ed975 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateHandler.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateHandler.java
@@ -12,11 +12,7 @@ package org.eclipse.equinox.internal.p2.ui.sdk;
 
 import org.eclipse.core.commands.*;
 import org.eclipse.equinox.p2.core.ProvisionException;
-import org.eclipse.equinox.p2.engine.IProfileRegistry;
 import org.eclipse.equinox.p2.engine.Profile;
-import org.eclipse.equinox.p2.ui.model.AllProfiles;
-import org.eclipse.equinox.p2.ui.model.ProfileFactory;
-import org.eclipse.equinox.p2.ui.operations.ProvisioningUtil;
 import org.eclipse.jface.dialogs.MessageDialog;
 import org.eclipse.swt.widgets.Shell;
 import org.eclipse.ui.handlers.HandlerUtil;
@@ -28,8 +24,6 @@ import org.eclipse.ui.handlers.HandlerUtil;
  */
 public class UpdateHandler extends AbstractHandler {
 
-	private static final String DEFAULT_PROFILE_ID = "DefaultProfile"; //$NON-NLS-1$
-
 	/**
 	 * The constructor.
 	 */
@@ -42,19 +36,14 @@ public class UpdateHandler extends AbstractHandler {
 	 */
 	public Object execute(ExecutionEvent event) throws ExecutionException {
 		Shell shell = HandlerUtil.getActiveWorkbenchWindowChecked(event).getShell();
-		Profile profile = null;
+		Profile profile;
 		String message = null;
-		// Get the profile of the running system.
 		try {
-			profile = ProvisioningUtil.getProfile(IProfileRegistry.SELF);
+			profile = ProvSDKUIActivator.getAnyProfile();
 		} catch (ProvisionException e) {
 			profile = null;
 			message = ProvSDKMessages.UpdateHandler_NoProfilesDefined;
 		}
-		if (profile == null) {
-			profile = getAnyProfile();
-		}
-
 		if (profile != null) {
 			UpdateAndInstallDialog dialog = new UpdateAndInstallDialog(shell, profile);
 			dialog.open();
@@ -65,12 +54,4 @@ public class UpdateHandler extends AbstractHandler {
 		}
 		return null;
 	}
-
-	// TODO this is temporary so the UI will come up on something
-	private Profile getAnyProfile() {
-		Profile[] profiles = (Profile[]) new AllProfiles().getChildren(null);
-		if (profiles.length > 0)
-			return profiles[0];
-		return ProfileFactory.makeProfile(DEFAULT_PROFILE_ID);
-	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
index 622b7d6..2e59d7c 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
@@ -10,9 +10,57 @@
 ###############################################################################
 UpdateAndInstallDialog_InstalledFeatures=Installed Features
 UpdateAndInstallDialog_AvailableFeatures=Available Features
+UpdateAndInstallDialog_0=Alert me when updates are available
+UpdateAndInstallDialog_1=Specify the update schedule and other <a>update preferences</a>
 UpdateAndInstallDialog_Title=Software Updates and Add-ons
 UpdateAndInstallDialog_ManageSites=&Manage sites...
 UpdateHandler_SDKUpdateUIMessageTitle=Software Updates
 UpdateHandler_NoProfilesDefined=There are no profiles defined.  Cannot invoke the update UI.
 UpdateHandler_NoProfileInstanceDefined=The software configuration could not be found.  Cannot invoke the update UI.
 RepositoryManipulationDialog_UpdateSitesDialogTitle=Update Sites
+SchedulerStartup_day=Every day
+SchedulerStartup_Monday=Every Monday
+SchedulerStartup_Tuesday=Every Tuesday
+SchedulerStartup_Wednesday=Every Wednesday
+SchedulerStartup_Thursday=Every Thursday
+SchedulerStartup_Friday=Every Friday
+SchedulerStartup_Saturday=Every Saturday
+SchedulerStartup_Sunday=Every Sunday
+SchedulerStartup_1AM=1:00 AM
+SchedulerStartup_2AM=2:00 AM
+SchedulerStartup_3AM=3:00 AM
+SchedulerStartup_4AM=4:00 AM
+SchedulerStartup_5AM=5:00 AM
+SchedulerStartup_6AM=6:00 AM
+SchedulerStartup_7AM=7:00 AM
+SchedulerStartup_8AM=8:00 AM
+SchedulerStartup_9AM=9:00 AM
+SchedulerStartup_10AM=10:00 AM
+SchedulerStartup_11AM=11:00 AM
+SchedulerStartup_12PM=12:00 PM
+SchedulerStartup_1PM=1:00 PM
+SchedulerStartup_2PM=2:00 PM
+SchedulerStartup_3PM=3:00 PM
+SchedulerStartup_4PM=4:00 PM
+SchedulerStartup_5PM=5:00 PM
+SchedulerStartup_6PM=6:00 PM
+SchedulerStartup_7PM=7:00 PM
+SchedulerStartup_8PM=8:00 PM
+SchedulerStartup_9PM=9:00 PM
+SchedulerStartup_10PM=10:00 PM
+SchedulerStartup_11PM=11:00 PM
+SchedulerStartup_12AM=12:00 AM
+AutomaticUpdatesJob_AutomaticUpdateSearch=Automatic Update Search
+AutomaticUpdatesPreferencePage_findUpdates=Automatically &find new updates and notify me
+AutomaticUpdatesPreferencePage_UpdateSchedule=Update &Schedule
+AutomaticUpdatesPreferencePage_findOnStart=Look for updates each time &platform is started
+AutomaticUpdatesPreferencePage_findOnSchedule=&Look for updates on the following schedule:
+AutomaticUpdatesPreferencePage_downloadOptions=Download &Options
+AutomaticUpdatesPreferencePage_searchAndNotify=Search for updates and &notify me when they are available
+AutomaticUpdatesPreferencePage_downloadAndNotify=Download new &updates automatically and notify me when ready to install them
+AutomaticUpdatesJob_EclipseUpdates1=Automatic Updates
+AutomaticUpdatesJob_UpdatesAvailable=New updates are available. Do you want to review and install them now?
+AutomaticUpdatesJob_EclipseUpdates2=Automatic Updates
+AutomaticUpdatesPreferencePage_at=at
+AutomaticUpdatesJob_UpdatesDownloaded=New updates are available and downloaded. Do you want to review and install them now?
+AutomaticUpdatesJob_Updates=Updates
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/AutomaticUpdatesPreferencePage.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/AutomaticUpdatesPreferencePage.java
new file mode 100644
index 0000000..4b377aa
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/AutomaticUpdatesPreferencePage.java
@@ -0,0 +1,238 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.ui.sdk.prefs;
+
+import org.eclipse.core.runtime.Preferences;
+import org.eclipse.equinox.internal.p2.ui.sdk.*;
+import org.eclipse.jface.dialogs.Dialog;
+import org.eclipse.jface.preference.PreferencePage;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.events.SelectionAdapter;
+import org.eclipse.swt.events.SelectionEvent;
+import org.eclipse.swt.layout.GridData;
+import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.widgets.*;
+import org.eclipse.ui.IWorkbench;
+import org.eclipse.ui.IWorkbenchPreferencePage;
+
+public class AutomaticUpdatesPreferencePage extends PreferencePage implements IWorkbenchPreferencePage {
+
+	private Button enabledCheck;
+	private Button onStartupRadio;
+	private Button onScheduleRadio;
+	private Combo dayCombo;
+	private Label atLabel;
+	private Combo hourCombo;
+	private Button searchOnlyRadio;
+	private Button searchAndDownloadRadio;
+	private Group updateScheduleGroup;
+	private Group downloadGroup;
+
+	public void init(IWorkbench workbench) {
+	}
+
+	protected Control createContents(Composite parent) {
+		Composite container = new Composite(parent, SWT.NULL);
+		GridLayout layout = new GridLayout();
+		layout.marginWidth = layout.marginHeight = 0;
+		container.setLayout(layout);
+
+		enabledCheck = new Button(container, SWT.CHECK);
+		enabledCheck.setText(ProvSDKMessages.AutomaticUpdatesPreferencePage_findUpdates);
+
+		createSpacer(container, 1);
+
+		updateScheduleGroup = new Group(container, SWT.NONE);
+		updateScheduleGroup.setText(ProvSDKMessages.AutomaticUpdatesPreferencePage_UpdateSchedule);
+		layout = new GridLayout();
+		layout.numColumns = 3;
+		updateScheduleGroup.setLayout(layout);
+		GridData gd = new GridData(GridData.FILL_HORIZONTAL);
+		updateScheduleGroup.setLayoutData(gd);
+
+		onStartupRadio = new Button(updateScheduleGroup, SWT.RADIO);
+		onStartupRadio.setText(ProvSDKMessages.AutomaticUpdatesPreferencePage_findOnStart);
+		gd = new GridData();
+		gd.horizontalSpan = 3;
+		onStartupRadio.setLayoutData(gd);
+		onStartupRadio.addSelectionListener(new SelectionAdapter() {
+			public void widgetSelected(SelectionEvent e) {
+				pageChanged();
+			}
+		});
+
+		onScheduleRadio = new Button(updateScheduleGroup, SWT.RADIO);
+		onScheduleRadio.setText(ProvSDKMessages.AutomaticUpdatesPreferencePage_findOnSchedule);
+		gd = new GridData();
+		gd.horizontalSpan = 3;
+		onScheduleRadio.setLayoutData(gd);
+		onScheduleRadio.addSelectionListener(new SelectionAdapter() {
+			public void widgetSelected(SelectionEvent e) {
+				pageChanged();
+			}
+		});
+
+		dayCombo = new Combo(updateScheduleGroup, SWT.READ_ONLY);
+		dayCombo.setItems(AutomaticUpdateScheduler.DAYS);
+		gd = new GridData();
+		gd.widthHint = 200;
+		gd.horizontalIndent = 30;
+		dayCombo.setLayoutData(gd);
+
+		atLabel = new Label(updateScheduleGroup, SWT.NULL);
+		atLabel.setText(ProvSDKMessages.AutomaticUpdatesPreferencePage_at);
+
+		hourCombo = new Combo(updateScheduleGroup, SWT.READ_ONLY);
+		hourCombo.setItems(AutomaticUpdateScheduler.HOURS);
+		gd = new GridData();
+		gd.widthHint = 100;
+		hourCombo.setLayoutData(gd);
+
+		createSpacer(container, 1);
+
+		downloadGroup = new Group(container, SWT.NONE);
+		downloadGroup.setText(ProvSDKMessages.AutomaticUpdatesPreferencePage_downloadOptions);
+		layout = new GridLayout();
+		layout.numColumns = 3;
+		downloadGroup.setLayout(layout);
+		gd = new GridData(GridData.FILL_HORIZONTAL);
+		downloadGroup.setLayoutData(gd);
+
+		searchOnlyRadio = new Button(downloadGroup, SWT.RADIO);
+		searchOnlyRadio.setText(ProvSDKMessages.AutomaticUpdatesPreferencePage_searchAndNotify);
+		gd = new GridData();
+		gd.horizontalSpan = 3;
+		searchOnlyRadio.setLayoutData(gd);
+		searchOnlyRadio.addSelectionListener(new SelectionAdapter() {
+			public void widgetSelected(SelectionEvent e) {
+				pageChanged();
+			}
+		});
+
+		searchAndDownloadRadio = new Button(downloadGroup, SWT.RADIO);
+		searchAndDownloadRadio.setText(ProvSDKMessages.AutomaticUpdatesPreferencePage_downloadAndNotify);
+		gd = new GridData();
+		gd.horizontalSpan = 3;
+		searchAndDownloadRadio.setLayoutData(gd);
+		searchAndDownloadRadio.addSelectionListener(new SelectionAdapter() {
+			public void widgetSelected(SelectionEvent e) {
+				pageChanged();
+			}
+		});
+
+		initialize();
+
+		enabledCheck.addSelectionListener(new SelectionAdapter() {
+			public void widgetSelected(SelectionEvent e) {
+				pageChanged();
+			}
+		});
+
+		Dialog.applyDialogFont(container);
+		return container;
+	}
+
+	protected void createSpacer(Composite composite, int columnSpan) {
+		Label label = new Label(composite, SWT.NONE);
+		GridData gd = new GridData();
+		gd.horizontalSpan = columnSpan;
+		label.setLayoutData(gd);
+	}
+
+	private void initialize() {
+		Preferences pref = ProvSDKUIActivator.getDefault().getPluginPreferences();
+		enabledCheck.setSelection(pref.getBoolean(PreferenceConstants.P_ENABLED));
+		setSchedule(pref.getString(PreferenceConstants.P_SCHEDULE));
+
+		dayCombo.setText(AutomaticUpdateScheduler.DAYS[getDay(pref, false)]);
+		hourCombo.setText(AutomaticUpdateScheduler.HOURS[getHour(pref, false)]);
+
+		searchOnlyRadio.setSelection(!pref.getBoolean(PreferenceConstants.P_DOWNLOAD));
+		searchAndDownloadRadio.setSelection(pref.getBoolean(PreferenceConstants.P_DOWNLOAD));
+
+		pageChanged();
+	}
+
+	private void setSchedule(String value) {
+		if (value.equals(PreferenceConstants.VALUE_ON_STARTUP))
+			onStartupRadio.setSelection(true);
+		else
+			onScheduleRadio.setSelection(true);
+	}
+
+	private void pageChanged() {
+		boolean master = enabledCheck.getSelection();
+		updateScheduleGroup.setEnabled(master);
+		onStartupRadio.setEnabled(master);
+		onScheduleRadio.setEnabled(master);
+		dayCombo.setEnabled(master && onScheduleRadio.getSelection());
+		atLabel.setEnabled(master && onScheduleRadio.getSelection());
+		hourCombo.setEnabled(master && onScheduleRadio.getSelection());
+		downloadGroup.setEnabled(master);
+		searchOnlyRadio.setEnabled(master);
+		searchAndDownloadRadio.setEnabled(master);
+	}
+
+	protected void performDefaults() {
+		super.performDefaults();
+		Preferences pref = ProvSDKUIActivator.getDefault().getPluginPreferences();
+		enabledCheck.setSelection(pref.getDefaultBoolean(PreferenceConstants.P_ENABLED));
+
+		setSchedule(pref.getDefaultString(PreferenceConstants.P_SCHEDULE));
+		onScheduleRadio.setSelection(pref.getDefaultBoolean(PreferenceConstants.P_SCHEDULE));
+
+		dayCombo.setText(AutomaticUpdateScheduler.DAYS[getDay(pref, true)]);
+		hourCombo.setText(AutomaticUpdateScheduler.HOURS[getHour(pref, true)]);
+
+		searchOnlyRadio.setSelection(!pref.getDefaultBoolean(PreferenceConstants.P_DOWNLOAD));
+		searchAndDownloadRadio.setSelection(pref.getDefaultBoolean(PreferenceConstants.P_DOWNLOAD));
+		pageChanged();
+	}
+
+	/** 
+	 * Method declared on IPreferencePage.
+	 * Subclasses should override
+	 */
+	public boolean performOk() {
+		Preferences pref = ProvSDKUIActivator.getDefault().getPluginPreferences();
+		pref.setValue(PreferenceConstants.P_ENABLED, enabledCheck.getSelection());
+		if (onStartupRadio.getSelection())
+			pref.setValue(PreferenceConstants.P_SCHEDULE, PreferenceConstants.VALUE_ON_STARTUP);
+		else
+			pref.setValue(PreferenceConstants.P_SCHEDULE, PreferenceConstants.VALUE_ON_SCHEDULE);
+
+		pref.setValue(AutomaticUpdateScheduler.P_DAY, dayCombo.getText());
+		pref.setValue(AutomaticUpdateScheduler.P_HOUR, hourCombo.getText());
+
+		pref.setValue(PreferenceConstants.P_DOWNLOAD, searchAndDownloadRadio.getSelection());
+
+		ProvSDKUIActivator.getDefault().savePluginPreferences();
+
+		ProvSDKUIActivator.getScheduler().rescheduleUpdate();
+		return true;
+	}
+
+	private int getDay(Preferences pref, boolean useDefault) {
+		String day = useDefault ? pref.getDefaultString(AutomaticUpdateScheduler.P_DAY) : pref.getString(AutomaticUpdateScheduler.P_DAY);
+		for (int i = 0; i < AutomaticUpdateScheduler.DAYS.length; i++)
+			if (AutomaticUpdateScheduler.DAYS[i].equals(day))
+				return i;
+		return 0;
+	}
+
+	private int getHour(Preferences pref, boolean useDefault) {
+		String hour = useDefault ? pref.getDefaultString(AutomaticUpdateScheduler.P_HOUR) : pref.getString(AutomaticUpdateScheduler.P_HOUR);
+		for (int i = 0; i < AutomaticUpdateScheduler.HOURS.length; i++)
+			if (AutomaticUpdateScheduler.HOURS[i].equals(hour))
+				return i;
+		return 0;
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/PreferenceConstants.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/PreferenceConstants.java
new file mode 100644
index 0000000..7691ebd
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/PreferenceConstants.java
@@ -0,0 +1,24 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.ui.sdk.prefs;
+
+/**
+ * @since 3.4
+ */
+public class PreferenceConstants {
+	public static final String AUTO_UPDATES_PAGE = "org.eclipse.equinox.p2.ui.sdk.AutomaticUpdatesPreferencePage"; //$NON-NLS-1$
+	public static final String P_ENABLED = "enabled"; //$NON-NLS-1$
+	public static final String P_SCHEDULE = "schedule"; //$NON-NLS-1$
+	public static final String VALUE_ON_STARTUP = "on-startup"; //$NON-NLS-1$
+	public static final String VALUE_ON_SCHEDULE = "on-schedule"; //$NON-NLS-1$
+	public static final String P_DOWNLOAD = "download"; // value is true or false, default is false //$NON-NLS-1$
+
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/PreferenceInitializer.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/PreferenceInitializer.java
new file mode 100644
index 0000000..487651d
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/PreferenceInitializer.java
@@ -0,0 +1,32 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.ui.sdk.prefs;
+
+import org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer;
+import org.eclipse.core.runtime.preferences.DefaultScope;
+import org.osgi.service.prefs.Preferences;
+
+/**
+ * @since 3.4
+ */
+public class PreferenceInitializer extends AbstractPreferenceInitializer {
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer#initializeDefaultPreferences()
+	 */
+	public void initializeDefaultPreferences() {
+		Preferences node = new DefaultScope().getNode("org.eclipse.equinox.p2.ui.sdk"); //$NON-NLS-1$
+		node.putBoolean(PreferenceConstants.P_ENABLED, false);
+		node.put(PreferenceConstants.P_SCHEDULE, PreferenceConstants.VALUE_ON_STARTUP);
+		node.putBoolean(PreferenceConstants.P_DOWNLOAD, false);
+	}
+
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
new file mode 100644
index 0000000..cf0bae9
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
@@ -0,0 +1,38 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.ui.sdk.updates;
+
+import org.eclipse.core.runtime.Preferences;
+import org.eclipse.equinox.internal.p2.ui.sdk.ProvSDKUIActivator;
+import org.eclipse.equinox.internal.p2.ui.sdk.prefs.PreferenceConstants;
+import org.eclipse.equinox.p2.updatechecker.IUpdateListener;
+import org.eclipse.equinox.p2.updatechecker.UpdateEvent;
+
+/**
+ * @since 3.4
+ */
+public class AutomaticUpdater implements IUpdateListener {
+
+	Preferences prefs;
+
+	public AutomaticUpdater() {
+		prefs = ProvSDKUIActivator.getDefault().getPluginPreferences();
+
+	}
+
+	public void updatesAvailable(UpdateEvent event) {
+		boolean download = prefs.getBoolean(PreferenceConstants.P_DOWNLOAD);
+		if (download) {
+			// TODO not implemented
+		}
+	}
+
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvUIActivator.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvUIActivator.java
index e749b13..9c08657 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvUIActivator.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvUIActivator.java
@@ -88,6 +88,7 @@ public class ProvUIActivator extends AbstractUIPlugin {
 		getBundle("org.eclipse.equinox.p2.exemplarysetup").start(); //$NON-NLS-1$
 		getBundle("org.eclipse.equinox.frameworkadmin.equinox").start(); //$NON-NLS-1$
 		getBundle("org.eclipse.equinox.simpleconfigurator.manipulator").start(); //$NON-NLS-1$
+		getBundle("org.eclipse.equinox.p2.updatechecker").start(); //$NON-NLS-1$
 
 		initializeImages();
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProfileModificationOperation.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProfileModificationOperation.java
index bc97595..7ce64ba 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProfileModificationOperation.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProfileModificationOperation.java
@@ -44,6 +44,6 @@ public class ProfileModificationOperation extends ProvisioningOperation {
 	}
 
 	protected IStatus doExecute(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
-		return ProvisioningUtil.performProvisioningPlan(plan, getProfile(), monitor);
+		return ProvisioningUtil.performProvisioningPlan(plan, getProfile(), ProvisioningUtil.PERFORM_ALL, monitor);
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningOperation.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningOperation.java
index e59be47..cf8c20f 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningOperation.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningOperation.java
@@ -18,7 +18,8 @@ import org.eclipse.equinox.p2.ui.ProvUIActivator;
 import org.eclipse.osgi.util.NLS;
 
 /**
- * Abstract class representing provisioning operations
+ * Abstract class representing provisioning operations.  ProvisioningOperations
+ * can be run in the foreground or in the background as a job.
  * 
  * @since 3.4
  */
@@ -75,4 +76,8 @@ public abstract class ProvisioningOperation {
 		return label;
 	}
 
+	protected boolean runInBackground() {
+		return false;
+	}
+
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
index 033f6a8..e54a413 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
@@ -12,7 +12,8 @@
 package org.eclipse.equinox.p2.ui.operations;
 
 import java.net.URL;
-import java.util.*;
+import java.util.ArrayList;
+import java.util.EventObject;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.p2.artifact.repository.IArtifactRepository;
@@ -22,17 +23,14 @@ import org.eclipse.equinox.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.p2.director.IPlanner;
 import org.eclipse.equinox.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.p2.engine.*;
-import org.eclipse.equinox.p2.engine.phases.Sizing;
+import org.eclipse.equinox.p2.engine.phases.*;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.metadata.IInstallableUnitConstants;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepositoryManager;
-import org.eclipse.equinox.p2.query.CompoundIterator;
-import org.eclipse.equinox.p2.query.Query;
 import org.eclipse.equinox.p2.ui.IProvisioningListener;
 import org.eclipse.equinox.p2.ui.ProvUIActivator;
 import org.eclipse.jface.util.PropertyChangeEvent;
-import org.eclipse.osgi.service.resolver.VersionRange;
 import org.eclipse.osgi.util.NLS;
 
 /**
@@ -42,6 +40,10 @@ import org.eclipse.osgi.util.NLS;
  */
 public class ProvisioningUtil {
 
+	public static final int PERFORM_DOWNLOAD_ONLY = 1;
+	public static final int PERFORM_INSTALL_AND_CONFIGURE = 2;
+	public static final int PERFORM_ALL = 3;
+
 	private static final class SizingPhaseSet extends PhaseSet {
 		static Sizing sizing;
 
@@ -54,6 +56,18 @@ public class ProvisioningUtil {
 		}
 	}
 
+	private static final class DownloadPhaseSet extends PhaseSet {
+		DownloadPhaseSet() {
+			super(new Phase[] {new Collect(10)}); //$NON-NLS-1$
+		}
+	}
+
+	private static final class ReplaceAndConfigurePhaseSet extends PhaseSet {
+		ReplaceAndConfigurePhaseSet() {
+			super(new Phase[] {new Unconfigure(10), new Uninstall(10), new Install(10), new Configure(10)});
+		}
+	}
+
 	public static IMetadataRepository addMetadataRepository(URL location, IProgressMonitor monitor) throws ProvisionException {
 		IMetadataRepositoryManager manager = (IMetadataRepositoryManager) ServiceHelper.getService(ProvUIActivator.getContext(), IMetadataRepositoryManager.class.getName());
 		if (manager == null)
@@ -186,48 +200,6 @@ public class ProvisioningUtil {
 		return profileRegistry.getProfile(id);
 	}
 
-	/*
-	 * Returns the installable units with the given id and version
-	 * specifications in the given metadata repository. <code>null</code> can
-	 * be used to indicate wildcards for any of the arguments.
-	 * 
-	 * @param location The location of the metdata repo to search. <code>null</code>
-	 * indicates search all known repos. @param id The id of the IUs to find.
-	 * <code>null</code> indicates wildcard. @param range The version range of
-	 * the IUs to find. <code>null</code> indicates wildcard. @return The IUs
-	 * that match the query
-	 */
-	public static IInstallableUnit[] getInstallableUnits(URL location, String id, VersionRange range, IProgressMonitor monitor) throws ProvisionException {
-		IMetadataRepository[] repositories = null;
-		if (location == null) {
-			repositories = getMetadataRepositories(monitor);
-		} else {
-			repositories = new IMetadataRepository[] {getMetadataRepository(location, monitor)};
-		}
-		Iterator i = Query.getIterator(repositories, id, range, null, false);
-		return CompoundIterator.asArray(i, monitor);
-	}
-
-	/*
-	 * Returns the installable units with the given id and version
-	 * specifications.
-	 * 
-	 * @param profileId The profile to search @param id The id of the IUs to
-	 * find. <code>null</code> indicates wildcard. @param version The version
-	 * of the IUs to find. <code>null</code> indicates wildcard. @return The
-	 * IUs that match the query
-	 */
-	public static IInstallableUnit[] getInstallableUnits(String profileId, String id, VersionRange range, IProgressMonitor monitor) throws ProvisionException {
-		Profile[] profiles = null;
-		if (profileId == null) {
-			profiles = getProfiles(monitor);
-		} else {
-			profiles = new Profile[] {getProfile(profileId)};
-		}
-		Iterator i = Query.getIterator(profiles, id, range, null, false);
-		return CompoundIterator.asArray(i, monitor);
-	}
-
 	public static IMetadataRepository[] getMetadataRepositories(IProgressMonitor monitor) throws ProvisionException {
 		IMetadataRepositoryManager manager = (IMetadataRepositoryManager) ServiceHelper.getService(ProvUIActivator.getContext(), IMetadataRepositoryManager.class.getName());
 		if (manager == null) {
@@ -313,7 +285,7 @@ public class ProvisioningUtil {
 	}
 
 	public static IStatus performInstall(ProvisioningPlan plan, Profile profile, IInstallableUnit[] installRoots, IProgressMonitor monitor) throws ProvisionException {
-		IStatus engineResult = performProvisioningPlan(plan, profile, monitor);
+		IStatus engineResult = performProvisioningPlan(plan, profile, PERFORM_ALL, monitor);
 		if (engineResult.isOK()) {
 			// mark the roots as such
 			for (int i = 0; i < installRoots.length; i++)
@@ -322,16 +294,15 @@ public class ProvisioningUtil {
 		return engineResult;
 	}
 
-	public static IStatus performProvisioningPlan(ProvisioningPlan plan, Profile profile, IProgressMonitor monitor) throws ProvisionException {
-		return getEngine().perform(profile, new DefaultPhaseSet(), plan.getOperands(), monitor);
-	}
-
-	private static IMetadataRepository getMetadataRepository(URL location, IProgressMonitor monitor) throws ProvisionException {
-		IMetadataRepositoryManager manager = (IMetadataRepositoryManager) ServiceHelper.getService(ProvUIActivator.getContext(), IMetadataRepositoryManager.class.getName());
-		if (manager == null) {
-			throw new ProvisionException(ProvUIMessages.ProvisioningUtil_NoRepositoryManager);
-		}
-		return manager.getRepository(location);
+	public static IStatus performProvisioningPlan(ProvisioningPlan plan, Profile profile, int phases, IProgressMonitor monitor) throws ProvisionException {
+		PhaseSet set;
+		if (phases == PERFORM_ALL)
+			set = new DefaultPhaseSet();
+		else if (phases == PERFORM_DOWNLOAD_ONLY)
+			set = new DownloadPhaseSet();
+		else
+			set = new ReplaceAndConfigurePhaseSet();
+		return getEngine().perform(profile, set, plan.getOperands(), monitor);
 	}
 
 	private static Engine getEngine() throws ProvisionException {
commit 0773bcb0a9b0eabfb95a943133fcf82b53bc6e19
Author: Susan Franklin <sfranklin>
Date:   Thu Oct 25 22:50:08 2007 +0000

    Bug 203011 - [prov] support for automatic updating

1	0	bundles/org.eclipse.equinox.p2.ui.admin.rcp/src/org/eclipse/equinox/p2/ui/admin/rcp/ApplicationWorkbenchWindowAdvisor.java
3	9	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
2	2	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvView.java
1	8	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RepositoriesView.java
6	18	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddProfileDialog.java
2	2	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/UpdateAndInstallDialog.java
1	1	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AutomaticUpdateScheduler.java
9	6	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
51	0	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKPolicies.java
40	9	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java
1	1	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateHandler.java
11	8	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
31	6	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
95	0	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdatesPopup.java
0	64	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/InstallDialog.java
0	182	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProfileModificationDialog.java
2	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
12	4	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/StaticContentProvider.java
0	46	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/UninstallDialog.java
0	91	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/UpdateDialog.java
2	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
124	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvUI.java
45	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvUIActivator.java
52	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvisioningOperationResult.java
123	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvisioningOperationRunner.java
0	164	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvisioningUndoSupport.java
17	21	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/InstallAction.java
15	51	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/ProfileModificationAction.java
18	12	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/RollbackAction.java
18	21	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UninstallAction.java
19	12	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UpdateAction.java
6	32	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AddRepositoryDialog.java
3	7	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/ColocatedRepositoryManipulatorGroup.java
65	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/InstallDialog.java
178	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/ProfileModificationDialog.java
46	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UninstallDialog.java
3	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateAndInstallGroup.java
114	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateDialog.java
29	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateInstallDialog.java
14	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/DownloadPhaseSet.java
14	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/InstallAndConfigurePhaseSet.java
21	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProfileModificationOperation.java
5	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningOperation.java
7	38	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
20	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/SizingPhaseSet.java
3	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/UndoableProvisioningOperation.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin.rcp/src/org/eclipse/equinox/p2/ui/admin/rcp/ApplicationWorkbenchWindowAdvisor.java b/bundles/org.eclipse.equinox.p2.ui.admin.rcp/src/org/eclipse/equinox/p2/ui/admin/rcp/ApplicationWorkbenchWindowAdvisor.java
index 8035820..28921e2 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin.rcp/src/org/eclipse/equinox/p2/ui/admin/rcp/ApplicationWorkbenchWindowAdvisor.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin.rcp/src/org/eclipse/equinox/p2/ui/admin/rcp/ApplicationWorkbenchWindowAdvisor.java
@@ -29,6 +29,7 @@ public class ApplicationWorkbenchWindowAdvisor extends WorkbenchWindowAdvisor {
 		configurer.setInitialSize(new Point(800, 600));
 		configurer.setShowCoolBar(false);
 		configurer.setShowStatusLine(false);
+		configurer.setShowProgressIndicator(true);
 		configurer.setTitle(ProvAdminUIMessages.ApplicationWindowTitle);
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
index 8293270..a3dc706 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProfilesView.java
@@ -12,8 +12,6 @@ package org.eclipse.equinox.internal.p2.ui.admin;
 
 import java.util.ArrayList;
 import java.util.List;
-import org.eclipse.core.commands.ExecutionException;
-import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.p2.ui.admin.dialogs.AddProfileDialog;
 import org.eclipse.equinox.internal.p2.ui.admin.dialogs.UpdateAndInstallDialog;
 import org.eclipse.equinox.p2.engine.Profile;
@@ -63,13 +61,9 @@ public class ProfilesView extends ProvView {
 				}
 			}
 			ProfileOperation op = new RemoveProfilesOperation(ProvAdminUIMessages.Ops_RemoveProfileOperationLabel, (Profile[]) profilesOnly.toArray(new Profile[profilesOnly.size()]));
-			try {
-				IStatus status = ProvisioningUndoSupport.execute(op, null, ProfilesView.this.getShell());
-				if (status.isOK()) {
-					viewer.refresh();
-				}
-			} catch (ExecutionException e) {
-				ProvUI.handleException(e.getCause(), null);
+			ProvisioningOperationResult result = ProvisioningOperationRunner.execute(op, ProfilesView.this.getShell(), null);
+			if (result.getStatus().isOK()) {
+				viewer.refresh();
 			}
 		}
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvView.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvView.java
index d00aa96..73b0003 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvView.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvView.java
@@ -12,7 +12,7 @@ package org.eclipse.equinox.internal.p2.ui.admin;
 
 import java.util.ArrayList;
 import org.eclipse.equinox.internal.p2.ui.admin.preferences.PreferenceConstants;
-import org.eclipse.equinox.p2.ui.ProvisioningUndoSupport;
+import org.eclipse.equinox.p2.ui.ProvUI;
 import org.eclipse.equinox.p2.ui.admin.ProvAdminUIActivator;
 import org.eclipse.equinox.p2.ui.viewers.*;
 import org.eclipse.jface.action.*;
@@ -115,7 +115,7 @@ abstract class ProvView extends ViewPart {
 	protected abstract IAction getDoubleClickAction();
 
 	protected void makeActions() {
-		undoRedoGroup = new UndoRedoActionGroup(getSite(), ProvisioningUndoSupport.getProvisioningUndoContext(), true);
+		undoRedoGroup = new UndoRedoActionGroup(getSite(), ProvUI.getProvisioningUndoContext(), true);
 		refreshAction = new Action(ProvAdminUIMessages.ProvView_RefreshCommandLabel) {
 			public void run() {
 				viewer.refresh();
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RepositoriesView.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RepositoriesView.java
index 9898385..1fd66cf 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RepositoriesView.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/RepositoriesView.java
@@ -10,7 +10,6 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.admin;
 
-import org.eclipse.core.commands.ExecutionException;
 import org.eclipse.equinox.p2.metadata.InstallableUnit;
 import org.eclipse.equinox.p2.ui.*;
 import org.eclipse.equinox.p2.ui.operations.ProvisioningOperation;
@@ -41,13 +40,7 @@ abstract class RepositoriesView extends ProvView {
 		}
 
 		public void run() {
-			ProvisioningOperation op = getRemoveOperation(getSelection().toArray());
-			try {
-				// TODO hook into platform progress service
-				ProvisioningUndoSupport.execute(op, null, getShell());
-			} catch (ExecutionException e) {
-				ProvUI.handleException(e.getCause(), null);
-			}
+			ProvisioningOperationRunner.execute(getRemoveOperation(getSelection().toArray()), getShell(), null);
 		}
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddProfileDialog.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddProfileDialog.java
index e3ffdce..1bc0493 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddProfileDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/AddProfileDialog.java
@@ -10,16 +10,13 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.admin.dialogs;
 
-import org.eclipse.core.commands.ExecutionException;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.Status;
 import org.eclipse.equinox.internal.p2.ui.admin.ProvAdminUIMessages;
 import org.eclipse.equinox.p2.engine.Profile;
-import org.eclipse.equinox.p2.ui.ProvUI;
-import org.eclipse.equinox.p2.ui.ProvisioningUndoSupport;
+import org.eclipse.equinox.p2.ui.ProvisioningOperationRunner;
 import org.eclipse.equinox.p2.ui.admin.ProvAdminUIActivator;
 import org.eclipse.equinox.p2.ui.operations.AddProfileOperation;
-import org.eclipse.equinox.p2.ui.operations.ProfileOperation;
 import org.eclipse.jface.dialogs.*;
 import org.eclipse.jface.dialogs.Dialog;
 import org.eclipse.swt.events.ModifyEvent;
@@ -62,29 +59,20 @@ public class AddProfileDialog extends StatusDialog {
 	}
 
 	protected void okPressed() {
-		if (addProfile()) {
-			super.okPressed();
-		}
+		addProfile();
+		super.okPressed();
 	}
 
 	/*
 	 * We only get here if already validated (ok was pressed)
 	 */
-	private boolean addProfile() {
+	private void addProfile() {
 		profileGroup.updateProfile();
 		addedProfile = profileGroup.getProfile();
 		if (addedProfile == null) {
-			return false;
-		}
-		ProfileOperation op = new AddProfileOperation(ProvAdminUIMessages.AddProfileDialog_OperationLabel, addedProfile);
-		try {
-			ProvisioningUndoSupport.execute(op, null, getShell());
-		} catch (ExecutionException e) {
-			ProvUI.handleException(e.getCause(), null);
-			return false;
+			return;
 		}
-		return true;
-
+		ProvisioningOperationRunner.execute(new AddProfileOperation(ProvAdminUIMessages.AddProfileDialog_OperationLabel, addedProfile), getShell(), null);
 	}
 
 	void verifyComplete() {
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/UpdateAndInstallDialog.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/UpdateAndInstallDialog.java
index b6f8f0b..96d4a68 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/UpdateAndInstallDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/UpdateAndInstallDialog.java
@@ -60,8 +60,8 @@ public class UpdateAndInstallDialog extends TrayDialog {
 			filters = new ViewerFilter[] {new IUGroupFilter()};
 		}
 		UpdateAndInstallGroup group = new UpdateAndInstallGroup(parent, profile, filters, filters, ProvAdminUIMessages.UpdateAndInstallDialog_InstalledIUsPageLabel, ProvAdminUIMessages.UpdateAndInstallDialog_AvailableIUsPageLabel, null, null, fontMetrics);
-		Dialog.applyDialogFont(group.getControl());
-		return group.getControl();
+		Dialog.applyDialogFont(group.getTabFolder());
+		return group.getTabFolder();
 	}
 
 	/*
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AutomaticUpdateScheduler.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AutomaticUpdateScheduler.java
index 3b5e57d..7d281ec 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AutomaticUpdateScheduler.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AutomaticUpdateScheduler.java
@@ -49,7 +49,7 @@ public class AutomaticUpdateScheduler implements IStartup {
 		checker = (UpdateChecker) ServiceHelper.getService(ProvSDKUIActivator.getContext(), UpdateChecker.class.getName());
 		if (checker == null) {
 			// Something did not initialize properly
-			IStatus status = new Status(IStatus.ERROR, ProvSDKUIActivator.PLUGIN_ID, "The update checker service is not initialized");
+			IStatus status = new Status(IStatus.ERROR, ProvSDKUIActivator.PLUGIN_ID, ProvSDKMessages.AutomaticUpdateScheduler_UpdateNotInitialized);
 			StatusManager.getManager().handle(status, StatusManager.LOG);
 			return;
 		}
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
index 9cd0d32..61eaf45 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
@@ -28,8 +28,8 @@ public class ProvSDKMessages extends NLS {
 	public static String UpdateAndInstallDialog_AvailableFeatures;
 	public static String UpdateAndInstallDialog_InstalledFeatures;
 	public static String UpdateAndInstallDialog_ManageSites;
-	public static String UpdateAndInstallDialog_0;
-	public static String UpdateAndInstallDialog_1;
+	public static String UpdateAndInstallDialog_AlertCheckbox;
+	public static String UpdateAndInstallDialog_PrefLink;
 	public static String UpdateAndInstallDialog_Title;
 	public static String UpdateHandler_NoProfilesDefined;
 	public static String UpdateHandler_NoProfileInstanceDefined;
@@ -68,16 +68,19 @@ public class ProvSDKMessages extends NLS {
 	public static String SchedulerStartup_12AM;
 	public static String AutomaticUpdatesJob_AutomaticUpdateSearch;
 	public static String AutomaticUpdatesPreferencePage_findUpdates;
+	public static String AutomaticUpdateScheduler_UpdateNotInitialized;
+	public static String AutomaticUpdatesDialog_DownloadedNotification;
+	public static String AutomaticUpdatesDialog_UpdatesAvailableTitle;
+	public static String AutomaticUpdater_AutomaticDownloadOperationName;
+	public static String AutomaticUpdatesDialog_UpdatesFoundNotification;
 	public static String AutomaticUpdatesPreferencePage_UpdateSchedule;
 	public static String AutomaticUpdatesPreferencePage_findOnStart;
 	public static String AutomaticUpdatesPreferencePage_findOnSchedule;
 	public static String AutomaticUpdatesPreferencePage_downloadOptions;
 	public static String AutomaticUpdatesPreferencePage_searchAndNotify;
 	public static String AutomaticUpdatesPreferencePage_downloadAndNotify;
-	public static String AutomaticUpdatesJob_EclipseUpdates1;
-	public static String AutomaticUpdatesJob_UpdatesAvailable;
-	public static String AutomaticUpdatesJob_EclipseUpdates2;
 	public static String AutomaticUpdatesPreferencePage_at;
-	public static String AutomaticUpdatesJob_UpdatesDownloaded;
 	public static String AutomaticUpdatesJob_Updates;
+	public static String AutomaticUpdatesDialog_ClickToReviewDownloaded;
+	public static String AutomaticUpdatesDialog_ClickToReviewNotDownloaded;
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKPolicies.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKPolicies.java
new file mode 100644
index 0000000..337e3be
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKPolicies.java
@@ -0,0 +1,51 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.ui.sdk;
+
+import java.util.ArrayList;
+import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.metadata.IInstallableUnitConstants;
+import org.eclipse.equinox.p2.ui.viewers.IUGroupFilter;
+import org.eclipse.equinox.p2.ui.viewers.IUProfilePropertyFilter;
+import org.eclipse.equinox.p2.updatechecker.UpdateEvent;
+import org.eclipse.jface.viewers.ViewerFilter;
+import org.eclipse.ui.plugin.AbstractUIPlugin;
+
+/**
+ * Implements policy-style decisions about what is shown in the UI.
+ * 
+ * @since 3.4
+ */
+
+public class ProvSDKPolicies extends AbstractUIPlugin {
+
+	public static ViewerFilter getInstalledIUFilter() {
+		return new IUProfilePropertyFilter(IInstallableUnitConstants.PROFILE_ROOT_IU, Boolean.toString(true));
+	}
+
+	public static ViewerFilter getAvailableIUFilter() {
+		return new IUGroupFilter();
+	}
+
+	public static IInstallableUnit[] getUpdatesToShow(UpdateEvent event) {
+		// TODO hardcoded to only show install roots, there is probably
+		// more policy here.
+		IInstallableUnit[] ius = event.getIUs();
+		ArrayList roots = new ArrayList();
+		for (int i = 0; i < ius.length; i++) {
+			String value = event.getProfile().getInstallableUnitProfileProperty(ius[i], IInstallableUnitConstants.PROFILE_ROOT_IU);
+			if (value != null && value.equals(Boolean.toString(true))) {
+				roots.add(ius[i]);
+			}
+		}
+		return (IInstallableUnit[]) roots.toArray(new IInstallableUnit[roots.size()]);
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java
index 35f7031..e8c951d 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java
@@ -15,11 +15,8 @@ import org.eclipse.core.runtime.Preferences.IPropertyChangeListener;
 import org.eclipse.core.runtime.Preferences.PropertyChangeEvent;
 import org.eclipse.equinox.internal.p2.ui.sdk.prefs.PreferenceConstants;
 import org.eclipse.equinox.p2.engine.Profile;
-import org.eclipse.equinox.p2.metadata.IInstallableUnitConstants;
 import org.eclipse.equinox.p2.ui.IRepositoryManipulator;
 import org.eclipse.equinox.p2.ui.dialogs.UpdateAndInstallGroup;
-import org.eclipse.equinox.p2.ui.viewers.IUGroupFilter;
-import org.eclipse.equinox.p2.ui.viewers.IUProfilePropertyFilter;
 import org.eclipse.jface.dialogs.*;
 import org.eclipse.jface.dialogs.Dialog;
 import org.eclipse.jface.preference.PreferenceDialog;
@@ -42,7 +39,10 @@ import org.eclipse.ui.dialogs.PreferencesUtil;
  */
 public class UpdateAndInstallDialog extends TrayDialog {
 
+	private static final String DIALOG_SETTINGS_SECTION = "UpdateAndInstallDialog"; //$NON-NLS-1$
+	private static final String SELECTED_TAB_SETTING = "SelectedTab"; //$NON-NLS-1$
 	private Profile profile;
+	private UpdateAndInstallGroup group;
 
 	/**
 	 * Create an instance of this Dialog.
@@ -51,6 +51,8 @@ public class UpdateAndInstallDialog extends TrayDialog {
 	public UpdateAndInstallDialog(Shell shell, Profile profile) {
 		super(shell);
 		this.profile = profile;
+		setShellStyle(SWT.DIALOG_TRIM | SWT.MODELESS | SWT.MAX | SWT.RESIZE | getDefaultOrientation());
+		setBlockOnOpen(false);
 	}
 
 	protected void configureShell(Shell shell) {
@@ -69,12 +71,10 @@ public class UpdateAndInstallDialog extends TrayDialog {
 		FontMetrics fontMetrics = gc.getFontMetrics();
 		gc.dispose();
 
-		ViewerFilter filter = new IUProfilePropertyFilter(IInstallableUnitConstants.PROFILE_ROOT_IU, Boolean.toString(true));
-		UpdateAndInstallGroup group = new UpdateAndInstallGroup(comp, profile, new ViewerFilter[] {filter}, new ViewerFilter[] {new IUGroupFilter()}, ProvSDKMessages.UpdateAndInstallDialog_InstalledFeatures, ProvSDKMessages.UpdateAndInstallDialog_AvailableFeatures, getRepositoryManipulator(), null, fontMetrics);
-
+		group = new UpdateAndInstallGroup(comp, profile, new ViewerFilter[] {ProvSDKPolicies.getInstalledIUFilter()}, new ViewerFilter[] {ProvSDKPolicies.getAvailableIUFilter()}, ProvSDKMessages.UpdateAndInstallDialog_InstalledFeatures, ProvSDKMessages.UpdateAndInstallDialog_AvailableFeatures, getRepositoryManipulator(), null, fontMetrics);
 		final Button checkBox = new Button(comp, SWT.CHECK);
 		final Preferences pref = ProvSDKUIActivator.getDefault().getPluginPreferences();
-		checkBox.setText(ProvSDKMessages.UpdateAndInstallDialog_0);
+		checkBox.setText(ProvSDKMessages.UpdateAndInstallDialog_AlertCheckbox);
 		checkBox.setSelection(pref.getBoolean(PreferenceConstants.P_ENABLED));
 		checkBox.addSelectionListener(new SelectionAdapter() {
 			public void widgetSelected(SelectionEvent e) {
@@ -102,8 +102,9 @@ public class UpdateAndInstallDialog extends TrayDialog {
 				dialog.open();
 			}
 		});
-		updatePrefsLink.setText(ProvSDKMessages.UpdateAndInstallDialog_1);
-		Dialog.applyDialogFont(group.getControl());
+		updatePrefsLink.setText(ProvSDKMessages.UpdateAndInstallDialog_PrefLink);
+		readDialogSettings();
+		Dialog.applyDialogFont(comp);
 		return comp;
 	}
 
@@ -130,4 +131,34 @@ public class UpdateAndInstallDialog extends TrayDialog {
 
 		};
 	}
+
+	protected void okPressed() {
+		saveDialogSettings();
+		super.okPressed();
+	}
+
+	private void readDialogSettings() {
+		IDialogSettings settings = ProvSDKUIActivator.getDefault().getDialogSettings();
+		IDialogSettings section = settings.getSection(DIALOG_SETTINGS_SECTION);
+		if (section != null) {
+			if (group != null && !group.getTabFolder().isDisposed()) {
+				group.getTabFolder().setSelection(section.getInt(SELECTED_TAB_SETTING));
+			}
+		}
+	}
+
+	private void saveDialogSettings() {
+		if (!group.getTabFolder().isDisposed()) {
+			getDialogBoundsSettings().put(SELECTED_TAB_SETTING, group.getTabFolder().getSelectionIndex());
+		}
+	}
+
+	protected IDialogSettings getDialogBoundsSettings() {
+		IDialogSettings settings = ProvSDKUIActivator.getDefault().getDialogSettings();
+		IDialogSettings section = settings.getSection(DIALOG_SETTINGS_SECTION);
+		if (section == null) {
+			section = settings.addNewSection(DIALOG_SETTINGS_SECTION);
+		}
+		return section;
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateHandler.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateHandler.java
index 48ed975..0c8b670 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateHandler.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateHandler.java
@@ -18,7 +18,7 @@ import org.eclipse.swt.widgets.Shell;
 import org.eclipse.ui.handlers.HandlerUtil;
 
 /**
- * UpdateHandler invokes the new provisioning update UI.
+ * AutomaticUpdatesPopup invokes the new provisioning update UI.
  * 
  * @since 3.4
  */
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
index 2e59d7c..ece72a6 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
@@ -8,10 +8,10 @@
 # Contributors:
 #     IBM Corporation - initial API and implementation
 ###############################################################################
-UpdateAndInstallDialog_InstalledFeatures=Installed Features
-UpdateAndInstallDialog_AvailableFeatures=Available Features
-UpdateAndInstallDialog_0=Alert me when updates are available
-UpdateAndInstallDialog_1=Specify the update schedule and other <a>update preferences</a>
+UpdateAndInstallDialog_InstalledFeatures=&Installed Features
+UpdateAndInstallDialog_AvailableFeatures=&Available Features
+UpdateAndInstallDialog_AlertCheckbox=Alert me when updates are available
+UpdateAndInstallDialog_PrefLink=Specify the update schedule and other <a>Update Preferences</a>
 UpdateAndInstallDialog_Title=Software Updates and Add-ons
 UpdateAndInstallDialog_ManageSites=&Manage sites...
 UpdateHandler_SDKUpdateUIMessageTitle=Software Updates
@@ -52,15 +52,18 @@ SchedulerStartup_11PM=11:00 PM
 SchedulerStartup_12AM=12:00 AM
 AutomaticUpdatesJob_AutomaticUpdateSearch=Automatic Update Search
 AutomaticUpdatesPreferencePage_findUpdates=Automatically &find new updates and notify me
+AutomaticUpdateScheduler_UpdateNotInitialized=The update checker service is not initialized
+AutomaticUpdatesDialog_DownloadedNotification=Updates have been downloaded.  You may review and install them when you are ready.
+AutomaticUpdatesDialog_UpdatesAvailableTitle=Updates Available
+AutomaticUpdater_AutomaticDownloadOperationName=Automatic updates download
+AutomaticUpdatesDialog_UpdatesFoundNotification=There are updates available for your software.  You may review and install them when you are ready.
 AutomaticUpdatesPreferencePage_UpdateSchedule=Update &Schedule
 AutomaticUpdatesPreferencePage_findOnStart=Look for updates each time &platform is started
 AutomaticUpdatesPreferencePage_findOnSchedule=&Look for updates on the following schedule:
 AutomaticUpdatesPreferencePage_downloadOptions=Download &Options
 AutomaticUpdatesPreferencePage_searchAndNotify=Search for updates and &notify me when they are available
 AutomaticUpdatesPreferencePage_downloadAndNotify=Download new &updates automatically and notify me when ready to install them
-AutomaticUpdatesJob_EclipseUpdates1=Automatic Updates
-AutomaticUpdatesJob_UpdatesAvailable=New updates are available. Do you want to review and install them now?
-AutomaticUpdatesJob_EclipseUpdates2=Automatic Updates
+AutomaticUpdatesDialog_ClickToReviewDownloaded=Software updates have been downloaded.\nClick here to <a>Review and Install Updates</a>.
+AutomaticUpdatesDialog_ClickToReviewNotDownloaded=Updates are available for your software.\nClick here to <a>Review and Install Updates</a>.
 AutomaticUpdatesPreferencePage_at=at
-AutomaticUpdatesJob_UpdatesDownloaded=New updates are available and downloaded. Do you want to review and install them now?
 AutomaticUpdatesJob_Updates=Updates
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
index cf0bae9..346d3fb 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
@@ -11,10 +11,16 @@
 package org.eclipse.equinox.internal.p2.ui.sdk.updates;
 
 import org.eclipse.core.runtime.Preferences;
-import org.eclipse.equinox.internal.p2.ui.sdk.ProvSDKUIActivator;
+import org.eclipse.equinox.internal.p2.ui.sdk.*;
 import org.eclipse.equinox.internal.p2.ui.sdk.prefs.PreferenceConstants;
+import org.eclipse.equinox.p2.core.ProvisionException;
+import org.eclipse.equinox.p2.director.ProvisioningPlan;
+import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.ui.*;
+import org.eclipse.equinox.p2.ui.operations.*;
 import org.eclipse.equinox.p2.updatechecker.IUpdateListener;
 import org.eclipse.equinox.p2.updatechecker.UpdateEvent;
+import org.eclipse.ui.PlatformUI;
 
 /**
  * @since 3.4
@@ -28,11 +34,30 @@ public class AutomaticUpdater implements IUpdateListener {
 
 	}
 
-	public void updatesAvailable(UpdateEvent event) {
-		boolean download = prefs.getBoolean(PreferenceConstants.P_DOWNLOAD);
-		if (download) {
-			// TODO not implemented
+	public void updatesAvailable(final UpdateEvent event) {
+		final boolean download = prefs.getBoolean(PreferenceConstants.P_DOWNLOAD);
+		final IInstallableUnit[] toUpdate = (ProvSDKPolicies.getUpdatesToShow(event));
+		if (toUpdate.length <= 0)
+			return;
+		try {
+			if (download) {
+				IInstallableUnit[] replacements = ProvisioningUtil.updatesFor(toUpdate, null);
+				if (replacements.length > 0) {
+					final ProvisioningPlan plan = ProvisioningUtil.getPlanner().getReplacePlan(toUpdate, replacements, event.getProfile(), null);
+					ProvisioningOperationResult result = ProvisioningOperationRunner.execute(new ProfileModificationOperation(ProvSDKMessages.AutomaticUpdater_AutomaticDownloadOperationName, event.getProfile().getProfileId(), plan, new DownloadPhaseSet(), false), null, null);
+					// TODO need to listen to the job and open the popup when download is done
+				}
+			} else {
+				PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable() {
+					public void run() {
+						new AutomaticUpdatesPopup(toUpdate, event.getProfile(), download).open();
+					}
+				});
+			}
+
+		} catch (ProvisionException e) {
+			ProvUI.handleException(e, null);
 		}
-	}
 
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdatesPopup.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdatesPopup.java
new file mode 100644
index 0000000..6b3e3c5
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdatesPopup.java
@@ -0,0 +1,95 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.ui.sdk.updates;
+
+import org.eclipse.equinox.internal.p2.ui.sdk.ProvSDKMessages;
+import org.eclipse.equinox.internal.p2.ui.sdk.ProvSDKUIActivator;
+import org.eclipse.equinox.p2.engine.Profile;
+import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.ui.dialogs.UpdateDialog;
+import org.eclipse.jface.dialogs.IDialogSettings;
+import org.eclipse.jface.dialogs.PopupDialog;
+import org.eclipse.jface.resource.JFaceResources;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.events.SelectionAdapter;
+import org.eclipse.swt.events.SelectionEvent;
+import org.eclipse.swt.graphics.*;
+import org.eclipse.swt.layout.GridData;
+import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.widgets.*;
+
+/**
+ * AutomaticUpdatesPopup is an async popup dialog for notifying
+ * the user of updates.
+ * 
+ * @since 3.4
+ */
+public class AutomaticUpdatesPopup extends PopupDialog {
+	private static final int CHAR_HEIGHT = 5;
+	private static final int CHAR_WIDTH = 40;
+	private static final String DIALOG_SETTINGS_SECTION = "AutomaticUpdatesPopup"; //$NON-NLS-1$
+	IInstallableUnit[] toUpdate;
+	Profile profile;
+	boolean downloaded;
+
+	public AutomaticUpdatesPopup(IInstallableUnit[] toUpdate, Profile profile, boolean alreadyDownloaded) {
+		super((Shell) null, PopupDialog.INFOPOPUPRESIZE_SHELLSTYLE | SWT.MODELESS, true, true, false, false, ProvSDKMessages.AutomaticUpdatesDialog_UpdatesAvailableTitle, null);
+		downloaded = alreadyDownloaded;
+		this.profile = profile;
+		this.toUpdate = toUpdate;
+	}
+
+	protected Control createDialogArea(Composite parent) {
+		Composite composite = new Composite(parent, SWT.NONE);
+		composite.setLayoutData(new GridData(GridData.FILL_BOTH));
+		GridLayout layout = new GridLayout();
+		layout.numColumns = 1;
+		composite.setLayout(layout);
+		Link infoLink = new Link(parent, SWT.MULTI | SWT.WRAP);
+		if (downloaded)
+			infoLink.setText(ProvSDKMessages.AutomaticUpdatesDialog_ClickToReviewDownloaded);
+		else
+			infoLink.setText(ProvSDKMessages.AutomaticUpdatesDialog_ClickToReviewNotDownloaded);
+		infoLink.addSelectionListener(new SelectionAdapter() {
+			public void widgetSelected(SelectionEvent e) {
+				new UpdateDialog(null, toUpdate, profile).open();
+			}
+		});
+		infoLink.setLayoutData(new GridData(GridData.FILL_BOTH));
+		return composite;
+
+	}
+
+	protected Point getInitialSize() {
+		return charToPixels(new Point(CHAR_WIDTH, CHAR_HEIGHT));
+	}
+
+	private Point charToPixels(Point charBounds) {
+		int x = charBounds.x;
+		int y = charBounds.y;
+		GC gc = new GC(getContents());
+		gc.setFont(JFaceResources.getDialogFont());
+		FontMetrics fontMetrics = gc.getFontMetrics();
+		x = x * fontMetrics.getAverageCharWidth();
+		y = y * fontMetrics.getHeight();
+		gc.dispose();
+		return new Point(x, y);
+	}
+
+	protected IDialogSettings getDialogBoundsSettings() {
+		IDialogSettings settings = ProvSDKUIActivator.getDefault().getDialogSettings();
+		IDialogSettings section = settings.getSection(DIALOG_SETTINGS_SECTION);
+		if (section == null) {
+			section = settings.addNewSection(DIALOG_SETTINGS_SECTION);
+		}
+		return section;
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/InstallDialog.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/InstallDialog.java
deleted file mode 100644
index b9369ac..0000000
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/InstallDialog.java
+++ /dev/null
@@ -1,64 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.p2.ui;
-
-import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.p2.core.ProvisionException;
-import org.eclipse.equinox.p2.director.ProvisioningPlan;
-import org.eclipse.equinox.p2.engine.Profile;
-import org.eclipse.equinox.p2.engine.phases.Sizing;
-import org.eclipse.equinox.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.ui.ProvUI;
-import org.eclipse.equinox.p2.ui.model.AvailableIUElement;
-import org.eclipse.equinox.p2.ui.operations.*;
-import org.eclipse.equinox.p2.ui.viewers.IUColumnConfig;
-import org.eclipse.swt.widgets.Shell;
-
-public class InstallDialog extends ProfileModificationDialog {
-
-	public InstallDialog(Shell parentShell, IInstallableUnit[] ius, Profile profile) {
-		super(parentShell, ius, profile, ProvUIMessages.InstallIUOperationLabel, ProvUIMessages.InstallDialog_InstallSelectionMessage);
-	}
-
-	protected ProfileModificationOperation createProfileModificationOperation(Object[] selectedElements, IProgressMonitor monitor) {
-		try {
-			IInstallableUnit[] selectedIUs = elementsToIUs(selectedElements);
-			ProvisioningPlan plan = ProvisioningUtil.getInstallPlan(selectedIUs, profile, monitor);
-			IStatus status = plan.getStatus();
-			if (status.isOK())
-				return new InstallOperation(ProvUIMessages.InstallIUOperationLabel, profile.getProfileId(), plan, selectedIUs);
-			ProvUI.reportStatus(status);
-		} catch (ProvisionException e) {
-			ProvUI.handleException(e, null);
-		}
-		return null;
-	}
-
-	protected String getOkButtonString() {
-		return ProvUIMessages.InstallIUOperationLabelWithMnemonic;
-	}
-
-	protected IUColumnConfig[] getColumnConfig() {
-		return new IUColumnConfig[] {new IUColumnConfig(ProvUIMessages.ProvUI_NameColumnTitle, IUColumnConfig.COLUMN_NAME), new IUColumnConfig(ProvUIMessages.ProvUI_IDColumnTitle, IUColumnConfig.COLUMN_ID), new IUColumnConfig(ProvUIMessages.ProvUI_VersionColumnTitle, IUColumnConfig.COLUMN_VERSION), new IUColumnConfig(ProvUIMessages.ProvUI_SizeColumnTitle, IUColumnConfig.COLUMN_SIZE)};
-	}
-
-	protected long getSize(IInstallableUnit iu) {
-		long size;
-		try {
-			ProvisioningPlan plan = ProvisioningUtil.getInstallPlan(new IInstallableUnit[] {iu}, profile, new NullProgressMonitor());
-			Sizing info = ProvisioningUtil.getSizeInfo(plan, profile, new NullProgressMonitor());
-			size = info.getDiskSize();
-		} catch (ProvisionException e) {
-			size = AvailableIUElement.SIZE_UNKNOWN;
-		}
-		return size;
-	}
-}
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProfileModificationDialog.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProfileModificationDialog.java
deleted file mode 100644
index 5014ccd..0000000
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProfileModificationDialog.java
+++ /dev/null
@@ -1,182 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.p2.ui;
-
-import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.p2.engine.Profile;
-import org.eclipse.equinox.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.ui.ProvUI;
-import org.eclipse.equinox.p2.ui.model.AvailableIUElement;
-import org.eclipse.equinox.p2.ui.operations.ProfileModificationOperation;
-import org.eclipse.equinox.p2.ui.viewers.IUColumnConfig;
-import org.eclipse.equinox.p2.ui.viewers.IUDetailsLabelProvider;
-import org.eclipse.jface.dialogs.*;
-import org.eclipse.jface.dialogs.Dialog;
-import org.eclipse.jface.viewers.CheckboxTableViewer;
-import org.eclipse.swt.SWT;
-import org.eclipse.swt.events.*;
-import org.eclipse.swt.layout.GridData;
-import org.eclipse.swt.layout.GridLayout;
-import org.eclipse.swt.widgets.*;
-
-abstract class ProfileModificationDialog extends TrayDialog {
-	private static final int DEFAULT_HEIGHT = 20;
-	private static final int DEFAULT_WIDTH = 170;
-	private static final int DEFAULT_COLUMN_WIDTH = 50;
-	private static final int DEFAULT_SMALL_COLUMN_WIDTH = 20;
-	private String title;
-	private String message;
-	private IInstallableUnit[] ius;
-	Profile profile;
-	CheckboxTableViewer listViewer;
-	StaticContentProvider contentProvider;
-	private ProfileModificationOperation resultOperation;
-
-	ProfileModificationDialog(Shell parentShell, IInstallableUnit[] ius, Profile profile, String title, String message) {
-		super(parentShell);
-		this.title = title;
-		this.message = message;
-		this.ius = ius;
-		this.profile = profile;
-	}
-
-	protected Control createDialogArea(Composite parent) {
-		Composite composite = (Composite) super.createDialogArea(parent);
-		initializeDialogUnits(composite);
-
-		// Create message area;
-		Label label = new Label(composite, SWT.NONE);
-		if (message != null) {
-			label.setText(message);
-		}
-		listViewer = CheckboxTableViewer.newCheckList(composite, SWT.BORDER | SWT.FULL_SELECTION);
-		GridData data = new GridData(GridData.FILL_BOTH);
-		data.heightHint = convertHeightInCharsToPixels(DEFAULT_HEIGHT);
-		data.widthHint = convertWidthInCharsToPixels(DEFAULT_WIDTH);
-		Table table = listViewer.getTable();
-		table.setLayoutData(data);
-		table.setHeaderVisible(true);
-		IUColumnConfig[] columns = getColumnConfig();
-		for (int i = 0; i < columns.length; i++) {
-			TableColumn tc = new TableColumn(table, SWT.LEFT, i);
-			tc.setResizable(true);
-			tc.setText(columns[i].columnTitle);
-			if (columns[i].columnField == IUColumnConfig.COLUMN_SIZE) {
-				tc.setAlignment(SWT.RIGHT);
-				tc.setWidth(convertWidthInCharsToPixels(DEFAULT_SMALL_COLUMN_WIDTH));
-			} else
-				tc.setWidth(convertWidthInCharsToPixels(DEFAULT_COLUMN_WIDTH));
-		}
-		contentProvider = new StaticContentProvider(makeElements(ius));
-		listViewer.setContentProvider(contentProvider);
-		listViewer.setInput(new Object());
-		listViewer.setLabelProvider(new IUDetailsLabelProvider(getColumnConfig()));
-		listViewer.setAllChecked(true);
-
-		addSelectionButtons(composite);
-		Dialog.applyDialogFont(composite);
-		return composite;
-	}
-
-	protected AvailableIUElement[] makeElements(IInstallableUnit[] iusToShow) {
-		AvailableIUElement[] elements = new AvailableIUElement[iusToShow.length];
-		for (int i = 0; i < iusToShow.length; i++) {
-			elements[i] = new AvailableIUElement(iusToShow[i], getSize(iusToShow[i]));
-		}
-		return elements;
-	}
-
-	/*
-	 * (non-Javadoc) Method declared in Window.
-	 */
-	protected void configureShell(Shell shell) {
-		super.configureShell(shell);
-		if (title != null) {
-			shell.setText(title);
-		}
-	}
-
-	/*
-	 * (non-Javadoc) Method declared on Dialog.
-	 */
-	protected void createButtonsForButtonBar(Composite parent) {
-		createButton(parent, IDialogConstants.OK_ID, getOkButtonString(), true);
-		createButton(parent, IDialogConstants.CANCEL_ID, IDialogConstants.CANCEL_LABEL, false);
-	}
-
-	/**
-	 * Add the selection and deselection buttons to the dialog.
-	 * @param composite org.eclipse.swt.widgets.Composite
-	 */
-	private void addSelectionButtons(Composite composite) {
-		Composite buttonComposite = new Composite(composite, SWT.NONE);
-		GridLayout layout = new GridLayout();
-		layout.numColumns = 0;
-		layout.marginWidth = 0;
-		layout.horizontalSpacing = convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_SPACING);
-		buttonComposite.setLayout(layout);
-		buttonComposite.setLayoutData(new GridData(SWT.END, SWT.TOP, true, false));
-
-		Button selectButton = createButton(buttonComposite, IDialogConstants.SELECT_ALL_ID, ProvUIMessages.UpdateAndInstallSelectionDialog_SelectAllLabel, false);
-
-		SelectionListener listener = new SelectionAdapter() {
-			public void widgetSelected(SelectionEvent e) {
-				listViewer.setAllChecked(true);
-			}
-		};
-		selectButton.addSelectionListener(listener);
-
-		Button deselectButton = createButton(buttonComposite, IDialogConstants.DESELECT_ALL_ID, ProvUIMessages.UpdateAndInstallSelectionDialog_DeselectAllLabel, false);
-
-		listener = new SelectionAdapter() {
-			public void widgetSelected(SelectionEvent e) {
-				listViewer.setAllChecked(false);
-			}
-		};
-		deselectButton.addSelectionListener(listener);
-	}
-
-	protected void okPressed() {
-		resultOperation = null;
-		// TODO may need progress monitor
-		IProgressMonitor monitor = new NullProgressMonitor();
-		resultOperation = createProfileModificationOperation(getSelectedElements(), monitor);
-		super.okPressed();
-	}
-
-	public ProfileModificationOperation getOperation() {
-		return resultOperation;
-	}
-
-	private Object[] getSelectedElements() {
-		return listViewer.getCheckedElements();
-	}
-
-	protected IInstallableUnit[] elementsToIUs(Object[] elements) {
-		IInstallableUnit[] theIUs = new IInstallableUnit[elements.length];
-		for (int i = 0; i < elements.length; i++) {
-			theIUs[i] = (IInstallableUnit) ((IAdaptable) elements[i]).getAdapter(IInstallableUnit.class);
-		}
-		return theIUs;
-	}
-
-	protected abstract ProfileModificationOperation createProfileModificationOperation(Object[] selectedElements, IProgressMonitor monitor);
-
-	protected abstract String getOkButtonString();
-
-	protected IUColumnConfig[] getColumnConfig() {
-		return ProvUI.getIUColumnConfig();
-	}
-
-	protected long getSize(IInstallableUnit iu) {
-		return AvailableIUElement.SIZE_UNKNOWN;
-	}
-}
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
index 1ad109c..066c32e 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/ProvUIMessages.java
@@ -106,9 +106,11 @@ public class ProvUIMessages extends NLS {
 	public static String AddRepositoryDialog_Title;
 	public static String UpdateAction_UpdateInformationTitle;
 	public static String UpdateAction_UpdatesAvailableMessage;
+	public static String UpdateDialog_AssemblingUpdatesProgress;
 	public static String UpdateAction_UpdatesAvailableTitle;
 	public static String PlatformUpdateTitle;
 	public static String PlatformRestartMessage;
+	public static String ProvUI_InformationTitle;
 	public static String ProvUI_NameColumnTitle;
 	public static String ProvUI_SizeColumnTitle;
 	public static String ProvUI_VersionColumnTitle;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/StaticContentProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/StaticContentProvider.java
index 038d3d6..80b9287 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/StaticContentProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/StaticContentProvider.java
@@ -1,6 +1,14 @@
-/**
- * 
- */
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+
 package org.eclipse.equinox.internal.p2.ui;
 
 import org.eclipse.jface.viewers.IStructuredContentProvider;
@@ -9,7 +17,7 @@ import org.eclipse.jface.viewers.Viewer;
 public final class StaticContentProvider implements IStructuredContentProvider {
 	private final Object[] elements;
 
-	StaticContentProvider(Object[] elements) {
+	public StaticContentProvider(Object[] elements) {
 		this.elements = elements;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/UninstallDialog.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/UninstallDialog.java
deleted file mode 100644
index 4bd9b31..0000000
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/UninstallDialog.java
+++ /dev/null
@@ -1,46 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.p2.ui;
-
-import org.eclipse.core.runtime.IProgressMonitor;
-import org.eclipse.core.runtime.IStatus;
-import org.eclipse.equinox.p2.core.ProvisionException;
-import org.eclipse.equinox.p2.director.ProvisioningPlan;
-import org.eclipse.equinox.p2.engine.Profile;
-import org.eclipse.equinox.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.ui.ProvUI;
-import org.eclipse.equinox.p2.ui.operations.ProfileModificationOperation;
-import org.eclipse.equinox.p2.ui.operations.ProvisioningUtil;
-import org.eclipse.swt.widgets.Shell;
-
-public class UninstallDialog extends ProfileModificationDialog {
-
-	public UninstallDialog(Shell parentShell, IInstallableUnit[] ius, Profile profile) {
-		super(parentShell, ius, profile, ProvUIMessages.UninstallIUOperationLabel, ProvUIMessages.UninstallDialog_UninstallMessage);
-	}
-
-	protected ProfileModificationOperation createProfileModificationOperation(Object[] selectedElements, IProgressMonitor monitor) {
-		try {
-			ProvisioningPlan plan = ProvisioningUtil.getUninstallPlan(elementsToIUs(selectedElements), profile, monitor);
-			IStatus status = plan.getStatus();
-			if (status.isOK())
-				return new ProfileModificationOperation(ProvUIMessages.UninstallIUOperationLabel, profile.getProfileId(), plan);
-			ProvUI.reportStatus(status);
-		} catch (ProvisionException e) {
-			ProvUI.handleException(e, null);
-		}
-		return null;
-	}
-
-	protected String getOkButtonString() {
-		return ProvUIMessages.UninstallIUOperationLabelWithMnemonic;
-	}
-}
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/UpdateDialog.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/UpdateDialog.java
deleted file mode 100644
index 08775d3..0000000
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/UpdateDialog.java
+++ /dev/null
@@ -1,91 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.p2.ui;
-
-import java.util.*;
-import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.p2.core.ProvisionException;
-import org.eclipse.equinox.p2.director.ProvisioningPlan;
-import org.eclipse.equinox.p2.engine.Profile;
-import org.eclipse.equinox.p2.engine.phases.Sizing;
-import org.eclipse.equinox.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.ui.ProvUI;
-import org.eclipse.equinox.p2.ui.model.AvailableIUElement;
-import org.eclipse.equinox.p2.ui.model.AvailableUpdateElement;
-import org.eclipse.equinox.p2.ui.operations.ProfileModificationOperation;
-import org.eclipse.equinox.p2.ui.operations.ProvisioningUtil;
-import org.eclipse.equinox.p2.ui.viewers.IUColumnConfig;
-import org.eclipse.swt.widgets.Shell;
-
-public class UpdateDialog extends ProfileModificationDialog {
-
-	public UpdateDialog(Shell parentShell, IInstallableUnit[] ius, Profile profile) {
-		super(parentShell, ius, profile, ProvUIMessages.UpdateAction_UpdatesAvailableTitle, ProvUIMessages.UpdateAction_UpdatesAvailableMessage);
-	}
-
-	protected ProfileModificationOperation createProfileModificationOperation(Object[] selectedElements, IProgressMonitor monitor) {
-		try {
-			ProvisioningPlan plan = ProvisioningUtil.getReplacePlan(getIUsToReplace(selectedElements), elementsToIUs(selectedElements), profile, monitor);
-			IStatus status = plan.getStatus();
-			if (status.isOK())
-				return new ProfileModificationOperation(ProvUIMessages.UpdateIUOperationLabel, profile.getProfileId(), plan);
-			ProvUI.reportStatus(status);
-		} catch (ProvisionException e) {
-			ProvUI.handleException(e, null);
-		}
-		return null;
-	}
-
-	protected String getOkButtonString() {
-		return ProvUIMessages.UpdateIUOperationLabelWithMnemonic;
-	}
-
-	protected IUColumnConfig[] getColumnConfig() {
-		return new IUColumnConfig[] {new IUColumnConfig(ProvUIMessages.ProvUI_NameColumnTitle, IUColumnConfig.COLUMN_NAME), new IUColumnConfig(ProvUIMessages.ProvUI_IDColumnTitle, IUColumnConfig.COLUMN_ID), new IUColumnConfig(ProvUIMessages.ProvUI_VersionColumnTitle, IUColumnConfig.COLUMN_VERSION), new IUColumnConfig(ProvUIMessages.ProvUI_SizeColumnTitle, IUColumnConfig.COLUMN_SIZE)};
-	}
-
-	protected AvailableIUElement[] makeElements(IInstallableUnit[] ius) {
-		List elements = new ArrayList();
-		for (int i = 0; i < ius.length; i++) {
-			try {
-				IInstallableUnit[] replacementIUs = ProvisioningUtil.updatesFor(new IInstallableUnit[] {ius[i]}, profile, null);
-				for (int j = 0; j < replacementIUs.length; j++) {
-					elements.add(new AvailableUpdateElement(replacementIUs[j], getSize(ius[i], replacementIUs[j]), ius[i]));
-				}
-			} catch (ProvisionException e) {
-				break;
-			}
-		}
-		return (AvailableIUElement[]) elements.toArray(new AvailableIUElement[elements.size()]);
-	}
-
-	private IInstallableUnit[] getIUsToReplace(Object[] replacementElements) {
-		Set iusToReplace = new HashSet();
-		for (int i = 0; i < replacementElements.length; i++) {
-			if (replacementElements[i] instanceof AvailableUpdateElement) {
-				iusToReplace.add(((AvailableUpdateElement) replacementElements[i]).getIUToBeUpdated());
-			}
-		}
-		return (IInstallableUnit[]) iusToReplace.toArray(new IInstallableUnit[iusToReplace.size()]);
-	}
-
-	protected long getSize(IInstallableUnit iuToRemove, IInstallableUnit iuToAdd) {
-		long size;
-		try {
-			ProvisioningPlan plan = ProvisioningUtil.getReplacePlan(new IInstallableUnit[] {iuToRemove}, new IInstallableUnit[] {iuToAdd}, profile, new NullProgressMonitor());
-			Sizing info = ProvisioningUtil.getSizeInfo(plan, profile, new NullProgressMonitor());
-			size = info.getDiskSize();
-		} catch (ProvisionException e) {
-			size = AvailableIUElement.SIZE_UNKNOWN;
-		}
-		return size;
-	}
-}
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
index 2a4050b..60f74b8 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/messages.properties
@@ -78,6 +78,7 @@ UpdateAndInstallSelectionDialog_DeselectAllLabel=&Deselect All
 UpdateAndInstallSelectionDialog_SelectAllLabel=&Select All
 UpdateAction_UpdateInformationTitle=Update Information
 UpdateAction_UpdatesAvailableMessage=Select the updates you wish to install.
+UpdateDialog_AssemblingUpdatesProgress=Assembling updates
 UpdateAction_UpdatesAvailableTitle=Available Updates
 UpdateOperation_NothingToUpdate=There is nothing to update.
 UpdateAndInstallGroup_Refresh=&Refresh
@@ -94,6 +95,7 @@ IUPropertiesGroup_CopyrightProperty=Copyright
 PlatformUpdateTitle = Software Updates
 PlatformRestartMessage = You will need to restart the system for the changes to take effect. \
 Would you like to restart now?
+ProvUI_InformationTitle=Information
 ProvUI_NameColumnTitle=Name
 ProvUI_SizeColumnTitle=Size
 ProvUI_VersionColumnTitle=Version
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvUI.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvUI.java
index 6c9ccd1..20535c6 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvUI.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvUI.java
@@ -12,12 +12,18 @@
 package org.eclipse.equinox.p2.ui;
 
 import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import org.eclipse.core.commands.ExecutionException;
+import org.eclipse.core.commands.operations.*;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.configurator.Configurator;
 import org.eclipse.equinox.internal.p2.ui.ApplyProfileChangesDialog;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.p2.ui.viewers.IUColumnConfig;
+import org.eclipse.jface.dialogs.MessageDialog;
+import org.eclipse.jface.dialogs.ProgressMonitorDialog;
+import org.eclipse.jface.operation.IRunnableWithProgress;
 import org.eclipse.swt.widgets.Display;
 import org.eclipse.swt.widgets.Shell;
 import org.eclipse.ui.IWorkbenchWindow;
@@ -41,7 +47,8 @@ public class ProvUI {
 	public static final String ROLLBACK_COMMAND_LABEL = ProvUIMessages.RollbackIUCommandLabel;
 	public static final String ROLLBACK_COMMAND_TOOLTIP = ProvUIMessages.RollbackIUCommandTooltip;
 
-	private static IUColumnConfig[] iuColumnConfig = new IUColumnConfig[] {new IUColumnConfig(ProvUIMessages.ProvUI_NameColumnTitle, IUColumnConfig.COLUMN_NAME), new IUColumnConfig(ProvUIMessages.ProvUI_IDColumnTitle, IUColumnConfig.COLUMN_ID), new IUColumnConfig(ProvUIMessages.ProvUI_VersionColumnTitle, IUColumnConfig.COLUMN_VERSION)};
+	static ObjectUndoContext provisioningUndoContext;
+	private static IUColumnConfig[] iuColumnConfig = new IUColumnConfig[] {new IUColumnConfig(ProvUIMessages.ProvUI_NameColumnTitle, IUColumnConfig.COLUMN_NAME), new IUColumnConfig(ProvUIMessages.ProvUI_VersionColumnTitle, IUColumnConfig.COLUMN_VERSION)};
 
 	public static Shell getShell(IAdaptable uiInfo) {
 		Shell shell;
@@ -63,15 +70,21 @@ public class ProvUI {
 		return display.getActiveShell();
 	}
 
-	public static void handleException(Throwable t, String message) {
+	public static IStatus handleException(Throwable t, String message) {
 		if (message == null && t != null) {
 			message = t.getMessage();
 		}
 		IStatus status = new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, 0, message, t);
 		StatusManager.getManager().handle(status, StatusManager.SHOW | StatusManager.LOG);
+		return status;
 	}
 
 	public static void reportStatus(IStatus status) {
+		// TODO investigate why platform status manager is so ugly with INFO status
+		if (status.getSeverity() == IStatus.INFO) {
+			MessageDialog.openInformation(null, ProvUIMessages.ProvUI_InformationTitle, status.getMessage());
+			return;
+		}
 		StatusManager.getManager().handle(status, StatusManager.SHOW | StatusManager.LOG);
 	}
 
@@ -96,4 +109,113 @@ public class ProvUI {
 			PlatformUI.getWorkbench().restart();
 		}
 	}
+
+	public static IUndoContext getProvisioningUndoContext() {
+		if (provisioningUndoContext == null) {
+			provisioningUndoContext = new ObjectUndoContext(new Object(), "Provisioning Undo Context"); //$NON-NLS-1$
+			IOperationHistory opHistory = PlatformUI.getWorkbench().getOperationSupport().getOperationHistory();
+			opHistory.addOperationApprover(getOperationApprover());
+		}
+		return provisioningUndoContext;
+	}
+
+	static IOperationApprover getOperationApprover() {
+		return new IOperationApprover() {
+			public IStatus proceedUndoing(final IUndoableOperation operation, IOperationHistory history, IAdaptable info) {
+				final IStatus[] status = new IStatus[1];
+				status[0] = Status.OK_STATUS;
+				if (operation.hasContext(provisioningUndoContext) && operation instanceof IAdvancedUndoableOperation) {
+					final IRunnableWithProgress runnable = new IRunnableWithProgress() {
+						public void run(IProgressMonitor monitor) {
+							try {
+								status[0] = ((IAdvancedUndoableOperation) operation).computeUndoableStatus(monitor);
+								if (!status[0].isOK()) {
+									StatusManager.getManager().handle(status[0], StatusManager.SHOW);
+								}
+							} catch (ExecutionException e) {
+								status[0] = new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, e.getMessage(), e);
+								ProvUI.handleException(e.getCause(), null);
+							}
+						}
+					};
+					PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable() {
+						public void run() {
+							try {
+								new ProgressMonitorDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell()).run(true, true, runnable);
+							} catch (InterruptedException e) {
+								// don't report thread interruption
+							} catch (InvocationTargetException e) {
+								status[0] = new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, e.getMessage(), e);
+								ProvUI.handleException(e.getCause(), null);
+							}
+						}
+					});
+
+				}
+				return status[0];
+			}
+
+			public IStatus proceedRedoing(final IUndoableOperation operation, IOperationHistory history, IAdaptable info) {
+				final IStatus[] status = new IStatus[1];
+				status[0] = Status.OK_STATUS;
+				if (operation.hasContext(provisioningUndoContext) && operation instanceof IAdvancedUndoableOperation) {
+					final IRunnableWithProgress runnable = new IRunnableWithProgress() {
+						public void run(IProgressMonitor monitor) {
+							try {
+								status[0] = ((IAdvancedUndoableOperation) operation).computeRedoableStatus(monitor);
+								if (!status[0].isOK()) {
+									StatusManager.getManager().handle(status[0], StatusManager.SHOW);
+								}
+							} catch (ExecutionException e) {
+								status[0] = new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, e.getMessage(), e);
+								ProvUI.handleException(e.getCause(), null);
+							}
+						}
+					};
+					PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable() {
+						public void run() {
+							try {
+								new ProgressMonitorDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell()).run(true, true, runnable);
+							} catch (InterruptedException e) {
+								// don't report thread interruption
+							} catch (InvocationTargetException e) {
+								status[0] = new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, e.getMessage(), e);
+								ProvUI.handleException(e.getCause(), null);
+							}
+						}
+					});
+
+				}
+				return status[0];
+			}
+
+		};
+
+	}
+
+	/**
+	 * Make an <code>IAdaptable</code> that adapts to the specified shell,
+	 * suitable for passing for passing to any
+	 * {@link org.eclipse.core.commands.operations.IUndoableOperation} or
+	 * {@link org.eclipse.core.commands.operations.IOperationHistory} method
+	 * that requires an {@link org.eclipse.core.runtime.IAdaptable}
+	 * <code>uiInfo</code> parameter.
+	 * 
+	 * @param shell
+	 *            the shell that should be returned by the IAdaptable when asked
+	 *            to adapt a shell. If this parameter is <code>null</code>,
+	 *            the returned shell will also be <code>null</code>.
+	 * 
+	 * @return an IAdaptable that will return the specified shell.
+	 */
+	static IAdaptable getUIInfoAdapter(final Shell shell) {
+		return new IAdaptable() {
+			public Object getAdapter(Class clazz) {
+				if (clazz == Shell.class) {
+					return shell;
+				}
+				return null;
+			}
+		};
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvUIActivator.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvUIActivator.java
index 9c08657..9d45ad7 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvUIActivator.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvUIActivator.java
@@ -15,7 +15,11 @@ import java.util.EventObject;
 import org.eclipse.core.runtime.FileLocator;
 import org.eclipse.core.runtime.Path;
 import org.eclipse.equinox.internal.p2.ui.ProvisioningEventManager;
+import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.core.eventbus.ProvisioningEventBus;
+import org.eclipse.equinox.p2.core.eventbus.ProvisioningListener;
+import org.eclipse.equinox.p2.engine.*;
+import org.eclipse.equinox.p2.ui.operations.ProvisioningUtil;
 import org.eclipse.equinox.p2.ui.viewers.StructuredViewerProvisioningListener;
 import org.eclipse.jface.resource.ImageDescriptor;
 import org.eclipse.ui.plugin.AbstractUIPlugin;
@@ -32,6 +36,7 @@ public class ProvUIActivator extends AbstractUIPlugin {
 	private static PackageAdmin packageAdmin = null;
 	private static ServiceReference packageAdminRef = null;
 	private static ProvUIActivator plugin;
+	private ProvisioningListener profileChangeListener;
 	private ProvisioningEventManager eventManager = new ProvisioningEventManager();
 
 	public static final String PLUGIN_ID = "org.eclipse.equinox.p2.ui"; //$NON-NLS-1$
@@ -91,10 +96,12 @@ public class ProvUIActivator extends AbstractUIPlugin {
 		getBundle("org.eclipse.equinox.p2.updatechecker").start(); //$NON-NLS-1$
 
 		initializeImages();
+		addProfileChangeListener();
 	}
 
 	public void stop(BundleContext bundleContext) throws Exception {
 		try {
+			removeProfileChangeListener();
 			plugin = null;
 			ProvUIActivator.context = null;
 		} finally {
@@ -102,18 +109,53 @@ public class ProvUIActivator extends AbstractUIPlugin {
 		}
 	}
 
+	private void addProfileChangeListener() {
+		if (profileChangeListener == null) {
+			profileChangeListener = new ProvisioningListener() {
+				public void notify(EventObject o) {
+					if (o instanceof CommitOperationEvent) {
+						CommitOperationEvent event = (CommitOperationEvent) o;
+						try {
+							Profile selfProfile = ProvisioningUtil.getProfile(IProfileRegistry.SELF);
+							if (selfProfile != null && (selfProfile.getProfileId().equals(event.getProfile().getProfileId()))) {
+								ProvUI.requestRestart(false, null);
+							}
+						} catch (ProvisionException e) {
+							ProvUI.handleException(e, null);
+						}
+					}
+				}
+			};
+		}
+		getProvisioningEventBus().addListener(profileChangeListener);
+	}
+
+	private void removeProfileChangeListener() {
+		if (profileChangeListener != null) {
+			ProvisioningEventBus bus = getProvisioningEventBus();
+			if (bus != null) {
+				getProvisioningEventBus().removeListener(profileChangeListener);
+			}
+		}
+	}
+
 	public void addProvisioningListener(StructuredViewerProvisioningListener listener) {
 		// TODO hack for unsupported repository events.
 		// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=197052
 		if ((listener.getEventTypes() & StructuredViewerProvisioningListener.PROV_EVENT_REPOSITORY) == StructuredViewerProvisioningListener.PROV_EVENT_REPOSITORY) {
 			eventManager.addListener(listener);
 		} else {
-			ServiceReference busReference = context.getServiceReference(ProvisioningEventBus.class.getName());
-			ProvisioningEventBus bus = (ProvisioningEventBus) context.getService(busReference);
-			bus.addListener(listener);
+			getProvisioningEventBus().addListener(listener);
 		}
 	}
 
+	private ProvisioningEventBus getProvisioningEventBus() {
+		ServiceReference busReference = context.getServiceReference(ProvisioningEventBus.class.getName());
+		if (busReference == null)
+			return null;
+		return (ProvisioningEventBus) context.getService(busReference);
+	}
+
 	// TODO hack for triggering events from the UI.  
 	public void notifyListeners(EventObject event) {
 		eventManager.notifyListeners(event);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvisioningOperationResult.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvisioningOperationResult.java
new file mode 100644
index 0000000..57dbb5b
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvisioningOperationResult.java
@@ -0,0 +1,52 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+
+package org.eclipse.equinox.p2.ui;
+
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.jobs.Job;
+import org.eclipse.equinox.p2.ui.operations.ProvisioningOperation;
+
+/**
+ * Reports information about a provisioning operation.
+ * 
+ * @since 3.4
+ */
+public class ProvisioningOperationResult {
+	private ProvisioningOperation op;
+	private IStatus status;
+	private Job job;
+
+	public ProvisioningOperationResult(ProvisioningOperation op) {
+		this.op = op;
+	}
+
+	public IStatus getStatus() {
+		return status;
+	}
+
+	void setStatus(IStatus status) {
+		this.status = status;
+	}
+
+	public Job getJob() {
+		return job;
+	}
+
+	void setJob(Job job) {
+		this.job = job;
+	}
+
+	public ProvisioningOperation getOperation() {
+		return op;
+	}
+
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvisioningOperationRunner.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvisioningOperationRunner.java
new file mode 100644
index 0000000..bbb709a
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvisioningOperationRunner.java
@@ -0,0 +1,123 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+
+package org.eclipse.equinox.p2.ui;
+
+import java.lang.reflect.InvocationTargetException;
+import org.eclipse.core.commands.ExecutionException;
+import org.eclipse.core.commands.operations.IUndoableOperation;
+import org.eclipse.core.runtime.*;
+import org.eclipse.core.runtime.jobs.Job;
+import org.eclipse.equinox.p2.ui.operations.ProvisioningOperation;
+import org.eclipse.jface.operation.IRunnableContext;
+import org.eclipse.jface.operation.IRunnableWithProgress;
+import org.eclipse.swt.widgets.Shell;
+import org.eclipse.ui.PlatformUI;
+
+/**
+ * Utility methods for running provisioning operations
+ * 
+ * @since 3.4
+ */
+public class ProvisioningOperationRunner {
+
+	private static Object FAMILY_PROVISIONING_OPERATIONS = new Object();
+
+	private static class JobRunnableContext implements IRunnableContext {
+
+		private class ProvisioningJob extends Job {
+			private IRunnableWithProgress runnable;
+
+			ProvisioningJob(String name, IRunnableWithProgress runnable) {
+				super(name);
+				this.runnable = runnable;
+			}
+
+			protected IStatus run(IProgressMonitor monitor) {
+				try {
+					runnable.run(monitor);
+				} catch (InvocationTargetException e) {
+					return ProvUI.handleException(e, null);
+				} catch (InterruptedException e) {
+					return Status.CANCEL_STATUS;
+				}
+				return Status.OK_STATUS;
+			}
+
+			public boolean belongsTo(Object family) {
+				return family == FAMILY_PROVISIONING_OPERATIONS;
+			}
+
+		}
+
+		private ProvisioningOperation op;
+		private ProvisioningOperationResult result;
+
+		JobRunnableContext(ProvisioningOperation operation, ProvisioningOperationResult result) {
+			this.op = operation;
+			this.result = result;
+		}
+
+		public void run(boolean fork, boolean cancelable, IRunnableWithProgress runnable) {
+			Job job = new ProvisioningJob(op.getLabel(), runnable);
+			job.setUser(op.isUser());
+			job.setPriority(Job.DECORATE); // this is the prio that the old update manager used
+			job.schedule();
+			result.setJob(job);
+		}
+
+	}
+
+	/**
+	 * Execute the supplied ProvisioningOperation, and add it to the
+	 * undo history if it supports undo.
+	 * 
+	 * @param op The operation to execute
+	 * @param shell provided by the caller in order to supply UI information for prompting the
+	 *            user if necessary. May be <code>null</code>.
+	 * @param context the IRunnableContext provided by the caller for running the operation.  May be <code>null</code>, in which case
+	 *            a runnable context will be created based on whether the operation should be run in the foreground or background.
+	 *            Callers typically need not supply a context unless special handling (such as wizard-based progress reporting) is required.
+	*/
+	public static ProvisioningOperationResult execute(final ProvisioningOperation op, final Shell shell, IRunnableContext context) {
+
+		final ProvisioningOperationResult[] result = new ProvisioningOperationResult[1];
+		result[0] = new ProvisioningOperationResult(op);
+		result[0].setStatus(Status.OK_STATUS);
+		IRunnableWithProgress runnable = new IRunnableWithProgress() {
+			public void run(IProgressMonitor monitor) {
+				try {
+					if (op instanceof IUndoableOperation) {
+						result[0].setStatus(PlatformUI.getWorkbench().getOperationSupport().getOperationHistory().execute((IUndoableOperation) op, monitor, ProvUI.getUIInfoAdapter(shell)));
+					} else {
+						result[0].setStatus(op.execute(monitor, ProvUI.getUIInfoAdapter(shell)));
+					}
+				} catch (ExecutionException e) {
+					result[0].setStatus(ProvUI.handleException(e.getCause(), null));
+				}
+			}
+		};
+		if (context == null) {
+			if (op.runInBackground())
+				context = new JobRunnableContext(op, result[0]);
+			else
+				context = PlatformUI.getWorkbench().getProgressService();
+		}
+		try {
+			context.run(op.runInBackground(), true, runnable);
+		} catch (InterruptedException e) {
+			// do nothing
+		} catch (InvocationTargetException e) {
+			result[0].setStatus(ProvUI.handleException(e.getCause(), null));
+		}
+		return result[0];
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvisioningUndoSupport.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvisioningUndoSupport.java
deleted file mode 100644
index 250c292..0000000
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvisioningUndoSupport.java
+++ /dev/null
@@ -1,164 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-
-package org.eclipse.equinox.p2.ui;
-
-import java.lang.reflect.InvocationTargetException;
-import org.eclipse.core.commands.ExecutionException;
-import org.eclipse.core.commands.operations.*;
-import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.p2.ui.operations.ProvisioningOperation;
-import org.eclipse.jface.dialogs.ProgressMonitorDialog;
-import org.eclipse.jface.operation.IRunnableWithProgress;
-import org.eclipse.swt.widgets.Shell;
-import org.eclipse.ui.PlatformUI;
-import org.eclipse.ui.statushandlers.StatusManager;
-
-/**
- * Utility methods for clients using undo
- * 
- * @since 3.4
- */
-public class ProvisioningUndoSupport {
-	static ObjectUndoContext provisioningUndoContext;
-
-	/**
-	 * Return the undo context that should be used for operations involving
-	 * provisioning.
-	 * 
-	 * @return the provisioning undo context
-	 */
-	public static IUndoContext getProvisioningUndoContext() {
-		if (provisioningUndoContext == null) {
-			provisioningUndoContext = new ObjectUndoContext(new Object(), "Provisioning Undo Context"); //$NON-NLS-1$
-			IOperationHistory opHistory = PlatformUI.getWorkbench().getOperationSupport().getOperationHistory();
-			opHistory.addOperationApprover(getOperationApprover());
-		}
-		return provisioningUndoContext;
-	}
-
-	/**
-	 * Execute the supplied ProvisioningOperation, and add it to the
-	 * undo history if it supports undo.
-	 * 
-	 * @param op The operation to execute
-	 * @param monitor
-	 *            the progress monitor to use for the operation
-	 * @param shell provided by the caller in order to supply UI information for prompting the
-	 *            user if necessary. May be <code>null</code>.
-	*/
-	public static IStatus execute(ProvisioningOperation op, IProgressMonitor monitor, Shell shell) throws ExecutionException {
-		if (op instanceof IUndoableOperation) {
-			return PlatformUI.getWorkbench().getOperationSupport().getOperationHistory().execute((IUndoableOperation) op, monitor, getUIInfoAdapter(shell));
-		}
-		return op.execute(monitor, getUIInfoAdapter(shell));
-	}
-
-	static IOperationApprover getOperationApprover() {
-		return new IOperationApprover() {
-			public IStatus proceedUndoing(final IUndoableOperation operation, IOperationHistory history, IAdaptable info) {
-				final IStatus[] status = new IStatus[1];
-				status[0] = Status.OK_STATUS;
-				if (operation.hasContext(provisioningUndoContext) && operation instanceof IAdvancedUndoableOperation) {
-					final IRunnableWithProgress runnable = new IRunnableWithProgress() {
-						public void run(IProgressMonitor monitor) {
-							try {
-								status[0] = ((IAdvancedUndoableOperation) operation).computeUndoableStatus(monitor);
-								if (!status[0].isOK()) {
-									StatusManager.getManager().handle(status[0], StatusManager.SHOW);
-								}
-							} catch (ExecutionException e) {
-								status[0] = new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, e.getMessage(), e);
-								ProvUI.handleException(e.getCause(), null);
-							}
-						}
-					};
-					PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable() {
-						public void run() {
-							try {
-								new ProgressMonitorDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell()).run(true, true, runnable);
-							} catch (InterruptedException e) {
-								// don't report thread interruption
-							} catch (InvocationTargetException e) {
-								status[0] = new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, e.getMessage(), e);
-								ProvUI.handleException(e.getCause(), null);
-							}
-						}
-					});
-
-				}
-				return status[0];
-			}
-
-			public IStatus proceedRedoing(final IUndoableOperation operation, IOperationHistory history, IAdaptable info) {
-				final IStatus[] status = new IStatus[1];
-				status[0] = Status.OK_STATUS;
-				if (operation.hasContext(provisioningUndoContext) && operation instanceof IAdvancedUndoableOperation) {
-					final IRunnableWithProgress runnable = new IRunnableWithProgress() {
-						public void run(IProgressMonitor monitor) {
-							try {
-								status[0] = ((IAdvancedUndoableOperation) operation).computeRedoableStatus(monitor);
-								if (!status[0].isOK()) {
-									StatusManager.getManager().handle(status[0], StatusManager.SHOW);
-								}
-							} catch (ExecutionException e) {
-								status[0] = new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, e.getMessage(), e);
-								ProvUI.handleException(e.getCause(), null);
-							}
-						}
-					};
-					PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable() {
-						public void run() {
-							try {
-								new ProgressMonitorDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell()).run(true, true, runnable);
-							} catch (InterruptedException e) {
-								// don't report thread interruption
-							} catch (InvocationTargetException e) {
-								status[0] = new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, e.getMessage(), e);
-								ProvUI.handleException(e.getCause(), null);
-							}
-						}
-					});
-
-				}
-				return status[0];
-			}
-
-		};
-
-	}
-
-	/**
-	 * Make an <code>IAdaptable</code> that adapts to the specified shell,
-	 * suitable for passing for passing to any
-	 * {@link org.eclipse.core.commands.operations.IUndoableOperation} or
-	 * {@link org.eclipse.core.commands.operations.IOperationHistory} method
-	 * that requires an {@link org.eclipse.core.runtime.IAdaptable}
-	 * <code>uiInfo</code> parameter.
-	 * 
-	 * @param shell
-	 *            the shell that should be returned by the IAdaptable when asked
-	 *            to adapt a shell. If this parameter is <code>null</code>,
-	 *            the returned shell will also be <code>null</code>.
-	 * 
-	 * @return an IAdaptable that will return the specified shell.
-	 */
-	private static IAdaptable getUIInfoAdapter(final Shell shell) {
-		return new IAdaptable() {
-			public Object getAdapter(Class clazz) {
-				if (clazz == Shell.class) {
-					return shell;
-				}
-				return null;
-			}
-		};
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/InstallAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/InstallAction.java
index 9ffb858..2ecf348 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/InstallAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/InstallAction.java
@@ -13,14 +13,14 @@ package org.eclipse.equinox.p2.ui.actions;
 
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.IStatus;
-import org.eclipse.equinox.internal.p2.ui.InstallDialog;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.ui.*;
-import org.eclipse.equinox.p2.ui.operations.ProfileModificationOperation;
+import org.eclipse.equinox.p2.ui.IProfileChooser;
+import org.eclipse.equinox.p2.ui.ProvUI;
+import org.eclipse.equinox.p2.ui.dialogs.InstallDialog;
 import org.eclipse.equinox.p2.ui.operations.ProvisioningUtil;
 import org.eclipse.jface.viewers.ISelectionProvider;
 import org.eclipse.jface.viewers.IStructuredSelection;
@@ -33,24 +33,6 @@ public class InstallAction extends ProfileModificationAction {
 		setToolTipText(ProvUI.INSTALL_COMMAND_TOOLTIP);
 	}
 
-	protected ProfileModificationOperation validateAndGetOperation(IInstallableUnit[] ius, Profile targetProfile, IProgressMonitor monitor) {
-		// First validate whether the install can happen
-		try {
-			ProvisioningPlan plan = ProvisioningUtil.getInstallPlan(ius, targetProfile, monitor);
-			IStatus status = plan.getStatus();
-			if (status.isOK()) {
-				InstallDialog dialog = new InstallDialog(getShell(), ius, targetProfile);
-				dialog.open();
-				return dialog.getOperation();
-			}
-			ProvUI.reportStatus(status);
-		} catch (ProvisionException e) {
-			ProvUI.handleException(e, null);
-			// fall through and return null
-		}
-		return null;
-	}
-
 	/*
 	 * (non-Javadoc)
 	 * @see org.eclipse.ui.actions.SelectionProviderAction#selectionChanged(org.eclipse.jface.viewers.IStructuredSelection)
@@ -76,4 +58,18 @@ public class InstallAction extends ProfileModificationAction {
 	protected String getTaskName() {
 		return ProvUIMessages.InstallIUProgress;
 	}
+
+	protected void performOperation(IInstallableUnit[] ius, Profile targetProfile) {
+		InstallDialog dialog = new InstallDialog(getShell(), ius, targetProfile);
+		dialog.open();
+	}
+
+	protected IStatus validateOperation(IInstallableUnit[] ius, Profile targetProfile, IProgressMonitor monitor) {
+		try {
+			ProvisioningPlan plan = ProvisioningUtil.getInstallPlan(ius, targetProfile, monitor);
+			return plan.getStatus();
+		} catch (ProvisionException e) {
+			return ProvUI.handleException(e, null);
+		}
+	}
 }
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/ProfileModificationAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/ProfileModificationAction.java
index 20637b1..2d63bc4 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/ProfileModificationAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/ProfileModificationAction.java
@@ -14,26 +14,20 @@ package org.eclipse.equinox.p2.ui.actions;
 import java.lang.reflect.InvocationTargetException;
 import java.util.ArrayList;
 import java.util.List;
-import org.eclipse.core.commands.ExecutionException;
 import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.p2.core.ProvisionException;
-import org.eclipse.equinox.p2.engine.IProfileRegistry;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.ui.*;
-import org.eclipse.equinox.p2.ui.operations.ProfileModificationOperation;
-import org.eclipse.equinox.p2.ui.operations.ProvisioningUtil;
+import org.eclipse.equinox.p2.ui.IProfileChooser;
+import org.eclipse.equinox.p2.ui.ProvUI;
 import org.eclipse.jface.dialogs.ProgressMonitorDialog;
 import org.eclipse.jface.operation.IRunnableWithProgress;
 import org.eclipse.jface.viewers.ISelectionProvider;
 import org.eclipse.swt.widgets.Shell;
-import org.eclipse.ui.statushandlers.StatusManager;
 
 abstract class ProfileModificationAction extends ProvisioningAction {
 
 	Profile profile;
 	IProfileChooser profileChooser;
-	private static final int OPERATION_WORK = 1000;
 
 	public ProfileModificationAction(String text, ISelectionProvider selectionProvider, Profile profile, IProfileChooser profileChooser, Shell shell) {
 		super(text, selectionProvider, shell);
@@ -66,67 +60,37 @@ abstract class ProfileModificationAction extends ProvisioningAction {
 		}
 
 		final IInstallableUnit[] ius = (IInstallableUnit[]) iusList.toArray(new IInstallableUnit[iusList.size()]);
-		final ProfileModificationOperation[] ops = new ProfileModificationOperation[1];
+		final IStatus[] status = new IStatus[1];
 		final Profile prof = targetProfile;
 		IRunnableWithProgress runnable = new IRunnableWithProgress() {
 			public void run(IProgressMonitor monitor) {
-				ops[0] = validateAndGetOperation(ius, prof, monitor);
+				status[0] = validateOperation(ius, prof, monitor);
 			}
 		};
 		try {
-			new ProgressMonitorDialog(getShell()).run(false, false, runnable);
+			new ProgressMonitorDialog(getShell()).run(false, true, runnable);
 		} catch (InterruptedException e) {
 			// don't report thread interruption
 		} catch (InvocationTargetException e) {
 			ProvUI.handleException(e.getCause(), null);
 		}
 
-		if (ops[0] == null)
-			return;
+		if (status[0].isOK())
+			performOperation(ius, prof);
+		else
+			ProvUI.reportStatus(status[0]);
 
-		final IStatus[] status = new IStatus[1];
-		runnable = new IRunnableWithProgress() {
-			public void run(IProgressMonitor monitor) {
-				try {
-					monitor.beginTask(getTaskName(), OPERATION_WORK);
-					status[0] = ProvisioningUndoSupport.execute(ops[0], monitor, getShell());
-					if (!status[0].isOK()) {
-						StatusManager.getManager().handle(status[0], StatusManager.SHOW | StatusManager.LOG);
-					}
-				} catch (ExecutionException e) {
-					ProvUI.handleException(e.getCause(), null);
-				} finally {
-					monitor.done();
-				}
-			}
-		};
-		try {
-			new ProgressMonitorDialog(getShell()).run(true, true, runnable);
-			// If we updated the running profile, we need to determine whether to restart.
-			// TODO for now we pretend restart is optional, we really don't know yet
-			if (status[0] != null && status[0].isOK()) {
-				try {
-					Profile selfProfile = ProvisioningUtil.getProfile(IProfileRegistry.SELF);
-					if (selfProfile != null && (selfProfile.getProfileId().equals(targetProfile.getProfileId()))) {
-						ProvUI.requestRestart(false, getShell());
-					}
-				} catch (ProvisionException e) {
-					ProvUI.handleException(e, null);
-				}
-			}
-		} catch (InterruptedException e) {
-			// don't report thread interruption
-		} catch (InvocationTargetException e) {
-			ProvUI.handleException(e.getCause(), null);
-		}
 	}
 
 	/*
 	 * Validate whether the proposed profile modification operation can run.
-	 * If so, return an operation representing it.  If not, return null.
-	 * We assume the user has been notified if something couldn't happen.
 	 */
-	protected abstract ProfileModificationOperation validateAndGetOperation(IInstallableUnit[] ius, Profile targetProfile, IProgressMonitor monitor);
+	protected abstract IStatus validateOperation(IInstallableUnit[] ius, Profile targetProfile, IProgressMonitor monitor);
+
+	/*
+	 * Run the operation, opening any dialogs, etc. 
+	 */
+	protected abstract void performOperation(IInstallableUnit[] ius, Profile targetProfile);
 
 	protected abstract String getTaskName();
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/RollbackAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/RollbackAction.java
index 25364de..5b6ab38 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/RollbackAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/RollbackAction.java
@@ -11,8 +11,7 @@
 
 package org.eclipse.equinox.p2.ui.actions;
 
-import org.eclipse.core.runtime.IProgressMonitor;
-import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.director.ProvisioningPlan;
@@ -20,8 +19,7 @@ import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.metadata.IInstallableUnitConstants;
 import org.eclipse.equinox.p2.ui.*;
-import org.eclipse.equinox.p2.ui.operations.ProfileModificationOperation;
-import org.eclipse.equinox.p2.ui.operations.ProvisioningUtil;
+import org.eclipse.equinox.p2.ui.operations.*;
 import org.eclipse.jface.viewers.ISelectionProvider;
 import org.eclipse.jface.viewers.IStructuredSelection;
 import org.eclipse.swt.widgets.Shell;
@@ -33,20 +31,28 @@ public class RollbackAction extends ProfileModificationAction {
 		setToolTipText(ProvUI.ROLLBACK_COMMAND_TOOLTIP);
 	}
 
-	protected ProfileModificationOperation validateAndGetOperation(IInstallableUnit[] toBecome, Profile targetProfile, IProgressMonitor monitor) {
+	protected IStatus validateOperation(IInstallableUnit[] toBecome, Profile targetProfile, IProgressMonitor monitor) {
 		if (toBecome.length == 1) {
 			try {
 				ProvisioningPlan plan = ProvisioningUtil.getBecomePlan(toBecome[0], targetProfile, monitor);
-				IStatus planStatus = plan.getStatus();
-				if (planStatus.isOK())
-					return new ProfileModificationOperation(ProvUIMessages.RollbackIUOperationLabel, targetProfile.getProfileId(), plan);
-				ProvUI.reportStatus(planStatus);
+				return plan.getStatus();
 			} catch (ProvisionException e) {
-				ProvUI.handleException(e, null);
-				// fall through and return null
+				return ProvUI.handleException(e, null);
 			}
 		}
-		return null;
+		// should never happen
+		return Status.OK_STATUS;
+	}
+
+	protected void performOperation(IInstallableUnit[] toBecome, Profile targetProfile) {
+		// TODO bogus because we do this twice...
+		try {
+			ProvisioningPlan plan = ProvisioningUtil.getBecomePlan(toBecome[0], targetProfile, null);
+			ProvisioningOperation op = new ProfileModificationOperation(ProvUIMessages.RollbackIUOperationLabel, targetProfile.getProfileId(), plan);
+			ProvisioningOperationRunner.execute(op, getShell(), null);
+		} catch (ProvisionException e) {
+			ProvUI.handleException(e, null);
+		}
 	}
 
 	/*
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UninstallAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UninstallAction.java
index e5a32cd..a45885c 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UninstallAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UninstallAction.java
@@ -14,14 +14,14 @@ package org.eclipse.equinox.p2.ui.actions;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
-import org.eclipse.equinox.internal.p2.ui.UninstallDialog;
 import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.ui.*;
+import org.eclipse.equinox.p2.ui.IProfileChooser;
+import org.eclipse.equinox.p2.ui.ProvUI;
+import org.eclipse.equinox.p2.ui.dialogs.UninstallDialog;
 import org.eclipse.equinox.p2.ui.model.InstalledIUElement;
-import org.eclipse.equinox.p2.ui.operations.ProfileModificationOperation;
 import org.eclipse.equinox.p2.ui.operations.ProvisioningUtil;
 import org.eclipse.jface.viewers.ISelectionProvider;
 import org.eclipse.jface.viewers.IStructuredSelection;
@@ -34,24 +34,6 @@ public class UninstallAction extends ProfileModificationAction {
 		setToolTipText(ProvUI.UNINSTALL_COMMAND_TOOLTIP);
 	}
 
-	protected ProfileModificationOperation validateAndGetOperation(IInstallableUnit[] ius, Profile targetProfile, IProgressMonitor monitor) {
-		// First validate whether the uninstall can happen
-		try {
-			ProvisioningPlan plan = ProvisioningUtil.getUninstallPlan(ius, targetProfile, monitor);
-			IStatus status = plan.getStatus();
-			if (status.isOK()) {
-				UninstallDialog dialog = new UninstallDialog(getShell(), ius, targetProfile);
-				dialog.open();
-				return dialog.getOperation();
-			}
-			ProvUI.reportStatus(status);
-		} catch (ProvisionException e) {
-			ProvUI.handleException(e, null);
-			// fall through and return null
-		}
-		return null;
-	}
-
 	/*
 	 * (non-Javadoc)
 	 * @see org.eclipse.ui.actions.SelectionProviderAction#selectionChanged(org.eclipse.jface.viewers.IStructuredSelection)
@@ -86,4 +68,19 @@ public class UninstallAction extends ProfileModificationAction {
 		return ProvUIMessages.UninstallIUProgress;
 	}
 
+	protected void performOperation(IInstallableUnit[] ius, Profile targetProfile) {
+		UninstallDialog dialog = new UninstallDialog(getShell(), ius, targetProfile);
+		dialog.open();
+	}
+
+	protected IStatus validateOperation(IInstallableUnit[] ius, Profile targetProfile, IProgressMonitor monitor) {
+		try {
+			ProvisioningPlan plan = ProvisioningUtil.getUninstallPlan(ius, targetProfile, monitor);
+			return plan.getStatus();
+		} catch (ProvisionException e) {
+			return ProvUI.handleException(e, null);
+		}
+
+	}
+
 }
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UpdateAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UpdateAction.java
index 234b8b7..ab6eef9 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UpdateAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UpdateAction.java
@@ -12,17 +12,15 @@
 package org.eclipse.equinox.p2.ui.actions;
 
 import java.util.ArrayList;
-import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
-import org.eclipse.equinox.internal.p2.ui.UpdateDialog;
 import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.ui.*;
+import org.eclipse.equinox.p2.ui.dialogs.UpdateDialog;
 import org.eclipse.equinox.p2.ui.model.InstalledIUElement;
-import org.eclipse.equinox.p2.ui.operations.ProfileModificationOperation;
 import org.eclipse.equinox.p2.ui.operations.ProvisioningUtil;
-import org.eclipse.jface.dialogs.MessageDialog;
 import org.eclipse.jface.viewers.ISelectionProvider;
 import org.eclipse.jface.viewers.IStructuredSelection;
 import org.eclipse.swt.widgets.Shell;
@@ -34,26 +32,35 @@ public class UpdateAction extends ProfileModificationAction {
 		setToolTipText(ProvUI.UPDATE_COMMAND_TOOLTIP);
 	}
 
-	protected ProfileModificationOperation validateAndGetOperation(IInstallableUnit[] ius, Profile targetProfile, IProgressMonitor monitor) {
+	protected void performOperation(IInstallableUnit[] ius, Profile targetProfile) {
 		// Collect the replacements for each IU individually so that 
 		// the user can decide what to update
 		try {
 			ArrayList iusWithUpdates = new ArrayList();
 			for (int i = 0; i < ius.length; i++) {
-				IInstallableUnit[] replacements = ProvisioningUtil.updatesFor(ius[i], monitor);
+				IInstallableUnit[] replacements = ProvisioningUtil.updatesFor(ius[i], null);
 				if (replacements.length > 0)
 					iusWithUpdates.add(ius[i]);
 			}
 			if (iusWithUpdates.size() > 0) {
-				UpdateDialog dialog = new UpdateDialog(getShell(), (IInstallableUnit[]) iusWithUpdates.toArray(new IInstallableUnit[iusWithUpdates.size()]), targetProfile);
-				dialog.open();
-				return dialog.getOperation();
+				new UpdateDialog(getShell(), (IInstallableUnit[]) iusWithUpdates.toArray(new IInstallableUnit[iusWithUpdates.size()]), targetProfile).open();
 			}
-			MessageDialog.openInformation(getShell(), ProvUIMessages.UpdateAction_UpdateInformationTitle, ProvUIMessages.UpdateOperation_NothingToUpdate);
 		} catch (ProvisionException e) {
-			// fall through and return null
+			ProvUI.handleException(e, null);
 		}
-		return null;
+	}
+
+	protected IStatus validateOperation(IInstallableUnit[] ius, Profile targetProfile, IProgressMonitor monitor) {
+		try {
+			IInstallableUnit[] updates = ProvisioningUtil.updatesFor(ius, monitor);
+			if (updates.length <= 0) {
+				return new Status(IStatus.INFO, ProvUIActivator.PLUGIN_ID, ProvUIMessages.UpdateOperation_NothingToUpdate);
+			}
+			return Status.OK_STATUS;
+		} catch (ProvisionException e) {
+			return ProvUI.handleException(e, null);
+		}
+
 	}
 
 	/*
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AddRepositoryDialog.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AddRepositoryDialog.java
index b98ba93..6695b00 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AddRepositoryDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AddRepositoryDialog.java
@@ -10,24 +10,22 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.ui.dialogs;
 
-import java.lang.reflect.InvocationTargetException;
 import java.net.URL;
-import org.eclipse.core.commands.ExecutionException;
-import org.eclipse.core.runtime.*;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Status;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.p2.core.repository.IRepository;
-import org.eclipse.equinox.p2.ui.*;
+import org.eclipse.equinox.p2.ui.ProvUIActivator;
+import org.eclipse.equinox.p2.ui.ProvisioningOperationRunner;
 import org.eclipse.equinox.p2.ui.operations.ProvisioningOperation;
 import org.eclipse.jface.dialogs.*;
 import org.eclipse.jface.dialogs.Dialog;
-import org.eclipse.jface.operation.IRunnableWithProgress;
 import org.eclipse.jface.window.Window;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.events.*;
 import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.*;
-import org.eclipse.ui.statushandlers.StatusManager;
 
 /**
  * Abstract dialog class for adding repositories of different types. This class
@@ -101,7 +99,7 @@ public abstract class AddRepositoryDialog extends StatusDialog {
 				String path = dialog.open();
 				if (path != null) {
 					lastLocalLocation = path;
-					url.setText("file:" + path); //$NON-NLS-1$
+					url.setText("file:" + path.toLowerCase()); //$NON-NLS-1$
 				}
 			}
 		});
@@ -141,31 +139,7 @@ public abstract class AddRepositoryDialog extends StatusDialog {
 			return false;
 		}
 
-		final ProvisioningOperation op = getOperation(newURL);
-		final IStatus[] status = new IStatus[1];
-		IRunnableWithProgress runnable = new IRunnableWithProgress() {
-			public void run(IProgressMonitor monitor) {
-				try {
-					status[0] = ProvisioningUndoSupport.execute(op, monitor, getShell());
-					if (!status[0].isOK()) {
-						StatusManager.getManager().handle(status[0], StatusManager.SHOW | StatusManager.LOG);
-					}
-				} catch (ExecutionException e) {
-					ProvUI.handleException(e.getCause(), null);
-					status[0] = new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, 0, null, null);
-				}
-			}
-		};
-		try {
-			new ProgressMonitorDialog(getShell()).run(true, true, runnable);
-		} catch (InterruptedException e) {
-			// don't report thread interruption
-		} catch (InvocationTargetException e) {
-			ProvUI.handleException(e.getCause(), null);
-			status[0] = new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, 0, null, null);
-		}
-		return status[0].isOK();
-
+		return (ProvisioningOperationRunner.execute(getOperation(newURL), getShell(), null)).getStatus().isOK();
 	}
 
 	protected abstract ProvisioningOperation getOperation(URL repoURL);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/ColocatedRepositoryManipulatorGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/ColocatedRepositoryManipulatorGroup.java
index 90f6444..a8ea039 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/ColocatedRepositoryManipulatorGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/ColocatedRepositoryManipulatorGroup.java
@@ -11,11 +11,11 @@
 package org.eclipse.equinox.p2.ui.dialogs;
 
 import java.util.List;
-import org.eclipse.core.commands.ExecutionException;
 import org.eclipse.core.runtime.Assert;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
-import org.eclipse.equinox.p2.ui.*;
+import org.eclipse.equinox.p2.ui.ProvUIActivator;
+import org.eclipse.equinox.p2.ui.ProvisioningOperationRunner;
 import org.eclipse.equinox.p2.ui.model.AllMetadataRepositories;
 import org.eclipse.equinox.p2.ui.model.MetadataRepositoryContentProvider;
 import org.eclipse.equinox.p2.ui.operations.RemoveColocatedRepositoryOperation;
@@ -136,11 +136,7 @@ public class ColocatedRepositoryManipulatorGroup {
 					repos[i] = (IMetadataRepository) selection.get(i);
 				}
 				RemoveColocatedRepositoryOperation op = new RemoveColocatedRepositoryOperation(ProvUIMessages.ColocatedRepositoryManipulatorGroup_Remove, repos);
-				try {
-					ProvisioningUndoSupport.execute(op, null, getControl().getShell());
-				} catch (ExecutionException e) {
-					ProvUI.handleException(e.getCause(), null);
-				}
+				ProvisioningOperationRunner.execute(op, getControl().getShell(), null);
 			}
 		});
 		return composite;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/InstallDialog.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/InstallDialog.java
new file mode 100644
index 0000000..5f7e0ba
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/InstallDialog.java
@@ -0,0 +1,65 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.p2.ui.dialogs;
+
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.NullProgressMonitor;
+import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
+import org.eclipse.equinox.p2.core.ProvisionException;
+import org.eclipse.equinox.p2.director.ProvisioningPlan;
+import org.eclipse.equinox.p2.engine.Profile;
+import org.eclipse.equinox.p2.engine.phases.Sizing;
+import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.ui.ProvUI;
+import org.eclipse.equinox.p2.ui.model.AvailableIUElement;
+import org.eclipse.equinox.p2.ui.operations.*;
+import org.eclipse.swt.widgets.Shell;
+
+public class InstallDialog extends UpdateInstallDialog {
+
+	public InstallDialog(Shell parentShell, IInstallableUnit[] ius, Profile profile) {
+		super(parentShell, ius, profile, ProvUIMessages.InstallIUOperationLabel, ProvUIMessages.InstallDialog_InstallSelectionMessage);
+	}
+
+	protected String getOkButtonString() {
+		return ProvUIMessages.InstallIUOperationLabelWithMnemonic;
+	}
+
+	protected long getSize(IInstallableUnit iu) {
+		long size;
+		try {
+			ProvisioningPlan plan = ProvisioningUtil.getInstallPlan(new IInstallableUnit[] {iu}, profile, new NullProgressMonitor());
+			Sizing info = ProvisioningUtil.getSizeInfo(plan, profile, new NullProgressMonitor());
+			size = info.getDiskSize();
+		} catch (ProvisionException e) {
+			size = AvailableIUElement.SIZE_UNKNOWN;
+		}
+		return size;
+	}
+
+	protected String getOperationLabel() {
+		return ProvUIMessages.InstallIUOperationLabel;
+	}
+
+	protected ProfileModificationOperation createProfileModificationOperation(Object[] selectedElements) {
+		try {
+			IInstallableUnit[] ius = elementsToIUs(selectedElements);
+			ProvisioningPlan plan = ProvisioningUtil.getInstallPlan(ius, profile, null);
+			IStatus status = plan.getStatus();
+			if (status.isOK())
+				return new InstallOperation(getOperationLabel(), profile.getProfileId(), plan, ius);
+			ProvUI.reportStatus(status);
+		} catch (ProvisionException e) {
+			ProvUI.handleException(e, null);
+		}
+		return null;
+	}
+}
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/ProfileModificationDialog.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/ProfileModificationDialog.java
new file mode 100644
index 0000000..9ff2805
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/ProfileModificationDialog.java
@@ -0,0 +1,178 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.p2.ui.dialogs;
+
+import org.eclipse.core.runtime.IAdaptable;
+import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
+import org.eclipse.equinox.internal.p2.ui.StaticContentProvider;
+import org.eclipse.equinox.p2.engine.Profile;
+import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.ui.ProvUI;
+import org.eclipse.equinox.p2.ui.ProvisioningOperationRunner;
+import org.eclipse.equinox.p2.ui.model.AvailableIUElement;
+import org.eclipse.equinox.p2.ui.operations.ProfileModificationOperation;
+import org.eclipse.equinox.p2.ui.viewers.IUColumnConfig;
+import org.eclipse.equinox.p2.ui.viewers.IUDetailsLabelProvider;
+import org.eclipse.jface.dialogs.*;
+import org.eclipse.jface.dialogs.Dialog;
+import org.eclipse.jface.viewers.CheckboxTableViewer;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.events.*;
+import org.eclipse.swt.layout.GridData;
+import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.widgets.*;
+
+abstract class ProfileModificationDialog extends TrayDialog {
+	private static final int DEFAULT_HEIGHT = 20;
+	private static final int DEFAULT_WIDTH = 120;
+	private static final int DEFAULT_COLUMN_WIDTH = 50;
+	private static final int DEFAULT_SMALL_COLUMN_WIDTH = 20;
+	private String title;
+	private String message;
+	private IInstallableUnit[] ius;
+	Profile profile;
+	CheckboxTableViewer listViewer;
+	StaticContentProvider contentProvider;
+
+	ProfileModificationDialog(Shell parentShell, IInstallableUnit[] ius, Profile profile, String title, String message) {
+		super(parentShell);
+		this.setBlockOnOpen(false);
+		this.title = title;
+		this.message = message;
+		this.ius = ius;
+		this.profile = profile;
+	}
+
+	protected Control createDialogArea(Composite parent) {
+		Composite composite = (Composite) super.createDialogArea(parent);
+		initializeDialogUnits(composite);
+
+		// Create message area;
+		Label label = new Label(composite, SWT.NONE);
+		if (message != null) {
+			label.setText(message);
+		}
+		listViewer = CheckboxTableViewer.newCheckList(composite, SWT.BORDER | SWT.FULL_SELECTION);
+		GridData data = new GridData(GridData.FILL_BOTH);
+		data.heightHint = convertHeightInCharsToPixels(DEFAULT_HEIGHT);
+		data.widthHint = convertWidthInCharsToPixels(DEFAULT_WIDTH);
+		Table table = listViewer.getTable();
+		table.setLayoutData(data);
+		table.setHeaderVisible(true);
+		IUColumnConfig[] columns = getColumnConfig();
+		for (int i = 0; i < columns.length; i++) {
+			TableColumn tc = new TableColumn(table, SWT.LEFT, i);
+			tc.setResizable(true);
+			tc.setText(columns[i].columnTitle);
+			if (columns[i].columnField == IUColumnConfig.COLUMN_SIZE) {
+				tc.setAlignment(SWT.RIGHT);
+				tc.setWidth(convertWidthInCharsToPixels(DEFAULT_SMALL_COLUMN_WIDTH));
+			} else
+				tc.setWidth(convertWidthInCharsToPixels(DEFAULT_COLUMN_WIDTH));
+		}
+		contentProvider = new StaticContentProvider(makeElements(ius));
+		listViewer.setContentProvider(contentProvider);
+		listViewer.setInput(new Object());
+		listViewer.setLabelProvider(new IUDetailsLabelProvider(getColumnConfig()));
+		listViewer.setAllChecked(true);
+
+		addSelectionButtons(composite);
+		Dialog.applyDialogFont(composite);
+		return composite;
+	}
+
+	protected AvailableIUElement[] makeElements(IInstallableUnit[] iusToShow) {
+		AvailableIUElement[] elements = new AvailableIUElement[iusToShow.length];
+		for (int i = 0; i < iusToShow.length; i++) {
+			elements[i] = new AvailableIUElement(iusToShow[i], getSize(iusToShow[i]));
+		}
+		return elements;
+	}
+
+	/*
+	 * (non-Javadoc) Method declared in Window.
+	 */
+	protected void configureShell(Shell shell) {
+		super.configureShell(shell);
+		if (title != null) {
+			shell.setText(title);
+		}
+	}
+
+	/*
+	 * (non-Javadoc) Method declared on Dialog.
+	 */
+	protected void createButtonsForButtonBar(Composite parent) {
+		createButton(parent, IDialogConstants.OK_ID, getOkButtonString(), true);
+		createButton(parent, IDialogConstants.CANCEL_ID, IDialogConstants.CANCEL_LABEL, false);
+	}
+
+	/**
+	 * Add the selection and deselection buttons to the dialog.
+	 * @param composite org.eclipse.swt.widgets.Composite
+	 */
+	private void addSelectionButtons(Composite composite) {
+		Composite buttonComposite = new Composite(composite, SWT.NONE);
+		GridLayout layout = new GridLayout();
+		layout.numColumns = 0;
+		layout.marginWidth = 0;
+		layout.horizontalSpacing = convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_SPACING);
+		buttonComposite.setLayout(layout);
+		buttonComposite.setLayoutData(new GridData(SWT.END, SWT.TOP, true, false));
+
+		Button selectButton = createButton(buttonComposite, IDialogConstants.SELECT_ALL_ID, ProvUIMessages.UpdateAndInstallSelectionDialog_SelectAllLabel, false);
+
+		SelectionListener listener = new SelectionAdapter() {
+			public void widgetSelected(SelectionEvent e) {
+				listViewer.setAllChecked(true);
+			}
+		};
+		selectButton.addSelectionListener(listener);
+
+		Button deselectButton = createButton(buttonComposite, IDialogConstants.DESELECT_ALL_ID, ProvUIMessages.UpdateAndInstallSelectionDialog_DeselectAllLabel, false);
+
+		listener = new SelectionAdapter() {
+			public void widgetSelected(SelectionEvent e) {
+				listViewer.setAllChecked(false);
+			}
+		};
+		deselectButton.addSelectionListener(listener);
+	}
+
+	protected void okPressed() {
+		ProvisioningOperationRunner.execute(createProfileModificationOperation(getSelectedElements()), getShell(), null);
+		super.okPressed();
+	}
+
+	private Object[] getSelectedElements() {
+		return listViewer.getCheckedElements();
+	}
+
+	protected IInstallableUnit[] elementsToIUs(Object[] elements) {
+		IInstallableUnit[] theIUs = new IInstallableUnit[elements.length];
+		for (int i = 0; i < elements.length; i++) {
+			theIUs[i] = (IInstallableUnit) ((IAdaptable) elements[i]).getAdapter(IInstallableUnit.class);
+		}
+		return theIUs;
+	}
+
+	protected abstract ProfileModificationOperation createProfileModificationOperation(Object[] selectedElements);
+
+	protected abstract String getOkButtonString();
+
+	protected IUColumnConfig[] getColumnConfig() {
+		return ProvUI.getIUColumnConfig();
+	}
+
+	protected long getSize(IInstallableUnit iu) {
+		return AvailableIUElement.SIZE_UNKNOWN;
+	}
+}
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UninstallDialog.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UninstallDialog.java
new file mode 100644
index 0000000..d8b9f98
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UninstallDialog.java
@@ -0,0 +1,46 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.p2.ui.dialogs;
+
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
+import org.eclipse.equinox.p2.core.ProvisionException;
+import org.eclipse.equinox.p2.director.ProvisioningPlan;
+import org.eclipse.equinox.p2.engine.Profile;
+import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.ui.ProvUI;
+import org.eclipse.equinox.p2.ui.operations.ProfileModificationOperation;
+import org.eclipse.equinox.p2.ui.operations.ProvisioningUtil;
+import org.eclipse.swt.widgets.Shell;
+
+public class UninstallDialog extends ProfileModificationDialog {
+
+	public UninstallDialog(Shell parentShell, IInstallableUnit[] ius, Profile profile) {
+		super(parentShell, ius, profile, ProvUIMessages.UninstallIUOperationLabel, ProvUIMessages.UninstallDialog_UninstallMessage);
+	}
+
+	protected ProfileModificationOperation createProfileModificationOperation(Object[] selectedElements) {
+		try {
+			ProvisioningPlan plan = ProvisioningUtil.getUninstallPlan(elementsToIUs(selectedElements), profile, null);
+			IStatus status = plan.getStatus();
+			if (status.isOK())
+				return new ProfileModificationOperation(ProvUIMessages.UninstallIUOperationLabel, profile.getProfileId(), plan);
+			ProvUI.reportStatus(status);
+		} catch (ProvisionException e) {
+			ProvUI.handleException(e, null);
+		}
+		return null;
+	}
+
+	protected String getOkButtonString() {
+		return ProvUIMessages.UninstallIUOperationLabelWithMnemonic;
+	}
+}
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateAndInstallGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateAndInstallGroup.java
index 4649de0..3c9637b 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateAndInstallGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateAndInstallGroup.java
@@ -44,7 +44,7 @@ public class UpdateAndInstallGroup {
 
 	private static final String BUTTONACTION = "buttonAction"; //$NON-NLS-1$
 	private static final int DEFAULT_HEIGHT = 240;
-	private static final int DEFAULT_WIDTH = 450;
+	private static final int DEFAULT_WIDTH = 300;
 	private static final int DEFAULT_COLUMN_WIDTH = 150;
 	TabFolder tabFolder;
 	TableViewer installedIUViewer;
@@ -89,7 +89,7 @@ public class UpdateAndInstallGroup {
 		availableTab.setControl(createAvailableIUsPage(tabFolder, availableIUFilters));
 	}
 
-	public Control getControl() {
+	public TabFolder getTabFolder() {
 		return tabFolder;
 	}
 
@@ -186,7 +186,7 @@ public class UpdateAndInstallGroup {
 			Button repoButton = createVerticalButton(composite, repositoryManipulator.getLabel(), false);
 			repoButton.setData(BUTTONACTION, new Action() {
 				public void runWithEvent(Event event) {
-					if (repositoryManipulator.manipulateRepositories(getControl().getShell())) {
+					if (repositoryManipulator.manipulateRepositories(getTabFolder().getShell())) {
 						availableIUViewer.setInput(new AllMetadataRepositories());
 					}
 				}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateDialog.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateDialog.java
new file mode 100644
index 0000000..7484837
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateDialog.java
@@ -0,0 +1,114 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.p2.ui.dialogs;
+
+import java.lang.reflect.InvocationTargetException;
+import java.util.*;
+import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
+import org.eclipse.equinox.p2.core.ProvisionException;
+import org.eclipse.equinox.p2.director.ProvisioningPlan;
+import org.eclipse.equinox.p2.engine.Profile;
+import org.eclipse.equinox.p2.engine.phases.Sizing;
+import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.ui.ProvUI;
+import org.eclipse.equinox.p2.ui.model.AvailableIUElement;
+import org.eclipse.equinox.p2.ui.model.AvailableUpdateElement;
+import org.eclipse.equinox.p2.ui.operations.ProfileModificationOperation;
+import org.eclipse.equinox.p2.ui.operations.ProvisioningUtil;
+import org.eclipse.jface.dialogs.ProgressMonitorDialog;
+import org.eclipse.jface.operation.IRunnableWithProgress;
+import org.eclipse.swt.widgets.Shell;
+
+public class UpdateDialog extends UpdateInstallDialog {
+
+	public UpdateDialog(Shell parentShell, IInstallableUnit[] ius, Profile profile) {
+		super(parentShell, ius, profile, ProvUIMessages.UpdateAction_UpdatesAvailableTitle, ProvUIMessages.UpdateAction_UpdatesAvailableMessage);
+	}
+
+	protected String getOkButtonString() {
+		return ProvUIMessages.UpdateIUOperationLabelWithMnemonic;
+	}
+
+	protected AvailableIUElement[] makeElements(final IInstallableUnit[] ius) {
+		final List elements = new ArrayList();
+
+		IRunnableWithProgress runnable = new IRunnableWithProgress() {
+			public void run(IProgressMonitor monitor) {
+				monitor.beginTask(ProvUIMessages.UpdateDialog_AssemblingUpdatesProgress, ius.length);
+				for (int i = 0; i < ius.length; i++) {
+					if (monitor.isCanceled())
+						close();
+					try {
+						IInstallableUnit[] replacementIUs = ProvisioningUtil.updatesFor(new IInstallableUnit[] {ius[i]}, null);
+						SubMonitor loopMonitor = SubMonitor.convert(monitor, 100 / ius.length);
+						loopMonitor.setWorkRemaining(replacementIUs.length);
+						for (int j = 0; j < replacementIUs.length; j++) {
+							elements.add(new AvailableUpdateElement(replacementIUs[j], getSize(ius[i], replacementIUs[j], loopMonitor.newChild(1)), ius[i]));
+							if (monitor.isCanceled())
+								close();
+						}
+					} catch (ProvisionException e) {
+						break;
+					}
+				}
+			}
+		};
+
+		try {
+			new ProgressMonitorDialog(getShell()).run(false, true, runnable);
+		} catch (InterruptedException e) {
+			// don't report thread interruption
+		} catch (InvocationTargetException e) {
+			ProvUI.handleException(e.getCause(), null);
+		}
+		return (AvailableIUElement[]) elements.toArray(new AvailableIUElement[elements.size()]);
+	}
+
+	private IInstallableUnit[] getIUsToReplace(Object[] replacementElements) {
+		Set iusToReplace = new HashSet();
+		for (int i = 0; i < replacementElements.length; i++) {
+			if (replacementElements[i] instanceof AvailableUpdateElement) {
+				iusToReplace.add(((AvailableUpdateElement) replacementElements[i]).getIUToBeUpdated());
+			}
+		}
+		return (IInstallableUnit[]) iusToReplace.toArray(new IInstallableUnit[iusToReplace.size()]);
+	}
+
+	protected long getSize(IInstallableUnit iuToRemove, IInstallableUnit iuToAdd, IProgressMonitor monitor) {
+		long size;
+		try {
+			ProvisioningPlan plan = ProvisioningUtil.getReplacePlan(new IInstallableUnit[] {iuToRemove}, new IInstallableUnit[] {iuToAdd}, profile, monitor);
+			Sizing info = ProvisioningUtil.getSizeInfo(plan, profile, monitor);
+			size = info.getDiskSize();
+		} catch (ProvisionException e) {
+			size = AvailableIUElement.SIZE_UNKNOWN;
+		}
+		return size;
+	}
+
+	protected String getOperationLabel() {
+		return ProvUIMessages.UpdateIUOperationLabel;
+	}
+
+	protected ProfileModificationOperation createProfileModificationOperation(Object[] selectedElements) {
+		try {
+			ProvisioningPlan plan = ProvisioningUtil.getReplacePlan(getIUsToReplace(selectedElements), elementsToIUs(selectedElements), profile, null);
+			IStatus status = plan.getStatus();
+			if (status.isOK())
+				return new ProfileModificationOperation(getOperationLabel(), profile.getProfileId(), plan);
+			ProvUI.reportStatus(status);
+		} catch (ProvisionException e) {
+			ProvUI.handleException(e, null);
+		}
+		return null;
+	}
+}
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateInstallDialog.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateInstallDialog.java
new file mode 100644
index 0000000..6d3ed03
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateInstallDialog.java
@@ -0,0 +1,29 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.p2.ui.dialogs;
+
+import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
+import org.eclipse.equinox.p2.engine.Profile;
+import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.ui.viewers.IUColumnConfig;
+import org.eclipse.swt.widgets.Shell;
+
+public abstract class UpdateInstallDialog extends ProfileModificationDialog {
+	UpdateInstallDialog(Shell parentShell, IInstallableUnit[] ius, Profile profile, String title, String message) {
+		super(parentShell, ius, profile, title, message);
+	}
+
+	protected abstract String getOperationLabel();
+
+	protected IUColumnConfig[] getColumnConfig() {
+		return new IUColumnConfig[] {new IUColumnConfig(ProvUIMessages.ProvUI_NameColumnTitle, IUColumnConfig.COLUMN_NAME), new IUColumnConfig(ProvUIMessages.ProvUI_VersionColumnTitle, IUColumnConfig.COLUMN_VERSION), new IUColumnConfig(ProvUIMessages.ProvUI_SizeColumnTitle, IUColumnConfig.COLUMN_SIZE)};
+	}
+}
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/DownloadPhaseSet.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/DownloadPhaseSet.java
new file mode 100644
index 0000000..1c91ce5
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/DownloadPhaseSet.java
@@ -0,0 +1,14 @@
+/**
+ * 
+ */
+package org.eclipse.equinox.p2.ui.operations;
+
+import org.eclipse.equinox.p2.engine.Phase;
+import org.eclipse.equinox.p2.engine.PhaseSet;
+import org.eclipse.equinox.p2.engine.phases.Collect;
+
+public class DownloadPhaseSet extends PhaseSet {
+	public DownloadPhaseSet() {
+		super(new Phase[] {new Collect(10)});
+	}
+}
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/InstallAndConfigurePhaseSet.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/InstallAndConfigurePhaseSet.java
new file mode 100644
index 0000000..db18a49
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/InstallAndConfigurePhaseSet.java
@@ -0,0 +1,14 @@
+/**
+ * 
+ */
+package org.eclipse.equinox.p2.ui.operations;
+
+import org.eclipse.equinox.p2.engine.Phase;
+import org.eclipse.equinox.p2.engine.PhaseSet;
+import org.eclipse.equinox.p2.engine.phases.*;
+
+public class InstallAndConfigurePhaseSet extends PhaseSet {
+	public InstallAndConfigurePhaseSet() {
+		super(new Phase[] {new Unconfigure(10), new Uninstall(10), new Install(10), new Configure(10)});
+	}
+}
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProfileModificationOperation.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProfileModificationOperation.java
index 7ce64ba..e696c77 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProfileModificationOperation.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProfileModificationOperation.java
@@ -13,7 +13,7 @@ package org.eclipse.equinox.p2.ui.operations;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.director.ProvisioningPlan;
-import org.eclipse.equinox.p2.engine.Profile;
+import org.eclipse.equinox.p2.engine.*;
 
 /**
  * Class representing a provisioning profile plan
@@ -24,11 +24,22 @@ public class ProfileModificationOperation extends ProvisioningOperation {
 
 	ProvisioningPlan plan;
 	String profileId;
+	PhaseSet phaseSet;
+	boolean isUser = true;
 
 	public ProfileModificationOperation(String label, String id, ProvisioningPlan plan) {
+		this(label, id, plan, null, true);
+	}
+
+	public ProfileModificationOperation(String label, String id, ProvisioningPlan plan, PhaseSet set, boolean isUser) {
 		super(label);
 		this.plan = plan;
 		this.profileId = id;
+		this.isUser = isUser;
+		if (set == null)
+			phaseSet = new DefaultPhaseSet();
+		else
+			phaseSet = set;
 	}
 
 	public String getProfileId() {
@@ -44,6 +55,14 @@ public class ProfileModificationOperation extends ProvisioningOperation {
 	}
 
 	protected IStatus doExecute(IProgressMonitor monitor, IAdaptable uiInfo) throws ProvisionException {
-		return ProvisioningUtil.performProvisioningPlan(plan, getProfile(), ProvisioningUtil.PERFORM_ALL, monitor);
+		return ProvisioningUtil.performProvisioningPlan(plan, phaseSet, getProfile(), monitor);
+	}
+
+	public boolean runInBackground() {
+		return true;
+	}
+
+	public boolean isUser() {
+		return isUser;
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningOperation.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningOperation.java
index cf8c20f..a09734b 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningOperation.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningOperation.java
@@ -76,8 +76,12 @@ public abstract class ProvisioningOperation {
 		return label;
 	}
 
-	protected boolean runInBackground() {
+	public boolean runInBackground() {
 		return false;
 	}
 
+	public boolean isUser() {
+		return true;
+	}
+
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
index 88a4a11..f99743b 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
@@ -23,7 +23,7 @@ import org.eclipse.equinox.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.p2.director.IPlanner;
 import org.eclipse.equinox.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.p2.engine.*;
-import org.eclipse.equinox.p2.engine.phases.*;
+import org.eclipse.equinox.p2.engine.phases.Sizing;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.metadata.IInstallableUnitConstants;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
@@ -40,34 +40,6 @@ import org.eclipse.osgi.util.NLS;
  */
 public class ProvisioningUtil {
 
-	public static final int PERFORM_DOWNLOAD_ONLY = 1;
-	public static final int PERFORM_INSTALL_AND_CONFIGURE = 2;
-	public static final int PERFORM_ALL = 3;
-
-	private static final class SizingPhaseSet extends PhaseSet {
-		static Sizing sizing;
-
-		SizingPhaseSet() {
-			super(new Phase[] {sizing = new Sizing(100, "Compute sizes")}); //$NON-NLS-1$
-		}
-
-		Sizing getSizing() {
-			return sizing;
-		}
-	}
-
-	private static final class DownloadPhaseSet extends PhaseSet {
-		DownloadPhaseSet() {
-			super(new Phase[] {new Collect(10)});
-		}
-	}
-
-	private static final class ReplaceAndConfigurePhaseSet extends PhaseSet {
-		ReplaceAndConfigurePhaseSet() {
-			super(new Phase[] {new Unconfigure(10), new Uninstall(10), new Install(10), new Configure(10)});
-		}
-	}
-
 	public static IMetadataRepository addMetadataRepository(URL location, IProgressMonitor monitor) throws ProvisionException {
 		IMetadataRepositoryManager manager = (IMetadataRepositoryManager) ServiceHelper.getService(ProvUIActivator.getContext(), IMetadataRepositoryManager.class.getName());
 		if (manager == null)
@@ -241,8 +213,7 @@ public class ProvisioningUtil {
 	 * See what updates might be available for the specified IU's.
 	 * Useful for bulk update that can be directly passed to the engine.
 	 */
-	public static IInstallableUnit[] updatesFor(IInstallableUnit[] toUpdate, Profile profile, IProgressMonitor monitor) throws ProvisionException {
-		Assert.isNotNull(profile);
+	public static IInstallableUnit[] updatesFor(IInstallableUnit[] toUpdate, IProgressMonitor monitor) throws ProvisionException {
 		Assert.isNotNull(toUpdate);
 
 		IPlanner planner = getPlanner();
@@ -293,7 +264,7 @@ public class ProvisioningUtil {
 		try {
 			SubMonitor sub = SubMonitor.convert(monitor, taskMessage, 100);
 			monitor.beginTask(taskMessage, 100);
-			IStatus engineResult = performProvisioningPlan(plan, profile, PERFORM_ALL, sub.newChild(100));
+			IStatus engineResult = performProvisioningPlan(plan, new DefaultPhaseSet(), profile, sub.newChild(100));
 			if (engineResult.isOK()) {
 				// mark the roots as such
 				for (int i = 0; i < installRoots.length; i++)
@@ -305,14 +276,12 @@ public class ProvisioningUtil {
 		}
 	}
 
-	public static IStatus performProvisioningPlan(ProvisioningPlan plan, Profile profile, int phases, IProgressMonitor monitor) throws ProvisionException {
+	public static IStatus performProvisioningPlan(ProvisioningPlan plan, PhaseSet phaseSet, Profile profile, IProgressMonitor monitor) throws ProvisionException {
 		PhaseSet set;
-		if (phases == PERFORM_ALL)
+		if (phaseSet == null)
 			set = new DefaultPhaseSet();
-		else if (phases == PERFORM_DOWNLOAD_ONLY)
-			set = new DownloadPhaseSet();
 		else
-			set = new ReplaceAndConfigurePhaseSet();
+			set = phaseSet;
 		return getEngine().perform(profile, set, plan.getOperands(), monitor);
 	}
 
@@ -324,7 +293,7 @@ public class ProvisioningUtil {
 		return engine;
 	}
 
-	private static IPlanner getPlanner() throws ProvisionException {
+	public static IPlanner getPlanner() throws ProvisionException {
 		IPlanner planner = (IPlanner) ServiceHelper.getService(ProvUIActivator.getContext(), IPlanner.class.getName());
 		if (planner == null) {
 			throw new ProvisionException(ProvUIMessages.ProvisioningUtil_NoPlannerFound);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/SizingPhaseSet.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/SizingPhaseSet.java
new file mode 100644
index 0000000..b855623
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/SizingPhaseSet.java
@@ -0,0 +1,20 @@
+/**
+ * 
+ */
+package org.eclipse.equinox.p2.ui.operations;
+
+import org.eclipse.equinox.p2.engine.Phase;
+import org.eclipse.equinox.p2.engine.PhaseSet;
+import org.eclipse.equinox.p2.engine.phases.Sizing;
+
+public class SizingPhaseSet extends PhaseSet {
+	private static Sizing sizing;
+
+	SizingPhaseSet() {
+		super(new Phase[] {sizing = new Sizing(100, "Compute sizes")});
+	}
+
+	Sizing getSizing() {
+		return sizing;
+	}
+}
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/UndoableProvisioningOperation.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/UndoableProvisioningOperation.java
index e84c242..f7eed30 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/UndoableProvisioningOperation.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/UndoableProvisioningOperation.java
@@ -17,8 +17,8 @@ import org.eclipse.core.commands.operations.*;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.p2.core.ProvisionException;
+import org.eclipse.equinox.p2.ui.ProvUI;
 import org.eclipse.equinox.p2.ui.ProvUIActivator;
-import org.eclipse.equinox.p2.ui.ProvisioningUndoSupport;
 import org.eclipse.osgi.util.NLS;
 
 /**
@@ -33,7 +33,7 @@ abstract class UndoableProvisioningOperation extends ProvisioningOperation imple
 
 	UndoableProvisioningOperation(String label) {
 		super(label);
-		addContext(ProvisioningUndoSupport.getProvisioningUndoContext());
+		addContext(ProvUI.getProvisioningUndoContext());
 	}
 
 	/**
@@ -154,7 +154,7 @@ abstract class UndoableProvisioningOperation extends ProvisioningOperation imple
 	 */
 
 	public boolean runInBackground() {
-		return true;
+		return false;
 	}
 
 	/*

commit 202af9c95a0db8f602819a57dd088dbab7008423
Author: Simon Kaegi <skaegi>
Date:   Thu May 7 22:28:08 2009 +0000

    Bug 270542 Ensure that we have ways out of bad uninstall / unconfigure actions

6	3	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/DefaultPhaseSet.java
5	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/InstallableUnitPhase.java
1	0	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Messages.java
33	5	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Phase.java
1	0	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/messages.properties
5	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Unconfigure.java
5	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Uninstall.java
148	2	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/DefaultPhaseSet.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/DefaultPhaseSet.java
index d279b77..9eb5886 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/DefaultPhaseSet.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/DefaultPhaseSet.java
@@ -11,10 +11,13 @@
 package org.eclipse.equinox.internal.provisional.p2.engine;
 
 import java.util.ArrayList;
+import org.eclipse.equinox.internal.p2.engine.EngineActivator;
 import org.eclipse.equinox.internal.provisional.p2.engine.phases.*;
 
 public class DefaultPhaseSet extends PhaseSet {
 
+	private static final boolean forcedUninstall = Boolean.valueOf(EngineActivator.getContext().getProperty("org.eclipse.equinox.p2.engine.forcedUninstall")).booleanValue(); //$NON-NLS-1$
+
 	public static int PHASE_CHECK_TRUST = 0x01;
 	public static int PHASE_COLLECT = 0x02;
 	public static int PHASE_CONFIGURE = 0x04;
@@ -24,7 +27,7 @@ public class DefaultPhaseSet extends PhaseSet {
 	public static int PHASE_UNINSTALL = 0x40;
 
 	public DefaultPhaseSet() {
-		super(new Phase[] {new Collect(100), new Unconfigure(10), new Uninstall(50), new Property(1), new CheckTrust(10), new Install(50), new Configure(10)});
+		this(new Phase[] {new Collect(100), new Unconfigure(10, forcedUninstall), new Uninstall(50, forcedUninstall), new Property(1), new CheckTrust(10), new Install(50), new Configure(10)});
 	}
 
 	private DefaultPhaseSet(Phase[] phases) {
@@ -44,9 +47,9 @@ public class DefaultPhaseSet extends PhaseSet {
 		if ((PHASE_COLLECT & exclude) != PHASE_COLLECT)
 			phases.add(new Collect(100));
 		if ((PHASE_UNCONFIGURE & exclude) != PHASE_UNCONFIGURE)
-			phases.add(new Unconfigure(10));
+			phases.add(new Unconfigure(10, forcedUninstall));
 		if ((PHASE_UNINSTALL & exclude) != PHASE_UNINSTALL)
-			phases.add(new Uninstall(50));
+			phases.add(new Uninstall(50, forcedUninstall));
 		if ((PHASE_PROPERTY & exclude) != PHASE_PROPERTY)
 			phases.add(new Property(1));
 		if ((PHASE_CHECK_TRUST & exclude) != PHASE_CHECK_TRUST)
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/InstallableUnitPhase.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/InstallableUnitPhase.java
index 8b73268..a543f00 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/InstallableUnitPhase.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/InstallableUnitPhase.java
@@ -22,8 +22,12 @@ public abstract class InstallableUnitPhase extends Phase {
 	public static final String PARM_IU = "iu"; //$NON-NLS-1$
 	public static final String PARM_INSTALL_FOLDER = "installFolder"; //$NON-NLS-1$
 
+	protected InstallableUnitPhase(String phaseId, int weight, boolean forced) {
+		super(phaseId, weight, forced);
+	}
+
 	protected InstallableUnitPhase(String phaseId, int weight) {
-		super(phaseId, weight);
+		this(phaseId, weight, false);
 	}
 
 	protected IStatus initializePhase(IProgressMonitor monitor, IProfile profile, Map parameters) {
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Messages.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Messages.java
index 7b60cc4..2bb0881 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Messages.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Messages.java
@@ -53,6 +53,7 @@ public class Messages extends NLS {
 	public static String rollingback_cancel;
 	public static String rollingback_error;
 	public static String action_undo_error;
+	public static String forced_action_execute_error;
 
 	static {
 		// initialize resource bundle
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Phase.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Phase.java
index 3615cf7..aa76f13 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Phase.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/Phase.java
@@ -13,6 +13,7 @@ package org.eclipse.equinox.internal.provisional.p2.engine;
 import java.util.*;
 import java.util.Map.Entry;
 import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
 import org.eclipse.equinox.internal.p2.engine.ActionManager;
 import org.eclipse.equinox.internal.p2.engine.EngineActivator;
 import org.eclipse.osgi.util.NLS;
@@ -23,9 +24,11 @@ public abstract class Phase {
 	protected static final String PARM_PROFILE = "profile"; //$NON-NLS-1$
 	protected static final String PARM_PROFILE_DATA_DIRECTORY = "profileDataDirectory"; //$NON-NLS-1$
 	protected static final String PARM_CONTEXT = "context"; //$NON-NLS-1$
+	protected static final String PARM_FORCED = "forced"; //$NON-NLS-1$
 
 	protected final String phaseId;
 	protected final int weight;
+	protected final boolean forced;
 	protected int prePerformWork = 1000;
 	protected int mainPerformWork = 10000;
 	protected int postPerformWork = 1000;
@@ -35,13 +38,18 @@ public abstract class Phase {
 	private Map touchpointToTouchpointOperandParameters = new HashMap();
 	ActionManager actionManager; // injected from phaseset
 
-	protected Phase(String phaseId, int weight) {
+	protected Phase(String phaseId, int weight, boolean forced) {
 		if (phaseId == null || phaseId.length() == 0)
 			throw new IllegalArgumentException(Messages.phaseid_not_set);
 		if (weight <= 0)
 			throw new IllegalArgumentException(Messages.phaseid_not_positive);
 		this.weight = weight;
 		this.phaseId = phaseId;
+		this.forced = forced;
+	}
+
+	protected Phase(String phaseId, int weight) {
+		this(phaseId, weight, false);
 	}
 
 	final protected ActionManager getActionManager() {
@@ -80,6 +88,7 @@ public abstract class Phase {
 		phaseParameters.put(PARM_PROFILE_DATA_DIRECTORY, session.getProfileDataDirectory());
 		phaseParameters.put(PARM_CONTEXT, context);
 		phaseParameters.put(PARM_PHASE_ID, phaseId);
+		phaseParameters.put(PARM_FORCED, Boolean.toString(forced));
 		mergeStatus(status, initializePhase(monitor, profile, phaseParameters));
 	}
 
@@ -114,11 +123,31 @@ public abstract class Phase {
 
 						parameters = (Map) touchpointToTouchpointOperandParameters.get(touchpoint);
 					}
-					session.recordActionExecute(action, parameters);
-					mergeStatus(status, action.execute(parameters));
+					IStatus actionStatus = null;
+					try {
+						session.recordActionExecute(action, parameters);
+						actionStatus = action.execute(parameters);
+					} catch (RuntimeException e) {
+						if (!forced)
+							throw e;
+						// "action.execute" calls user code and might throw an unchecked exception
+						// we catch the error here to gather information on where the problem occurred.
+						actionStatus = new Status(IStatus.ERROR, EngineActivator.ID, NLS.bind(Messages.forced_action_execute_error, action.getClass().getName()), e);
+					} catch (LinkageError e) {
+						if (!forced)
+							throw e;
+						// Catch linkage errors as these are generally recoverable but let other Errors propagate (see bug 222001)
+						actionStatus = new Status(IStatus.ERROR, EngineActivator.ID, NLS.bind(Messages.forced_action_execute_error, action.getClass().getName()), e);
+					}
+					if (forced && actionStatus != null && actionStatus.matches(IStatus.ERROR)) {
+						MultiStatus result = new MultiStatus(EngineActivator.ID, IStatus.ERROR, getProblemMessage(), null);
+						result.add(new Status(IStatus.ERROR, EngineActivator.ID, session.getContextString(this, operand, action), null));
+						LogHelper.log(result);
+						actionStatus = Status.OK_STATUS;
+					}
+					mergeStatus(status, actionStatus);
 					if (status.matches(IStatus.ERROR | IStatus.CANCEL))
 						return;
-
 				}
 			}
 			mergeStatus(status, touchpointCompleteOperand(profile, operand, operandParameters, subMonitor));
@@ -266,5 +295,4 @@ public abstract class Phase {
 	protected String getProblemMessage() {
 		return NLS.bind(Messages.phase_error, getClass().getName());
 	}
-
 }
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/messages.properties b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/messages.properties
index 05d25e4..65b9e63 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/messages.properties
@@ -10,6 +10,7 @@
 ###############################################################################
 action_not_found=No action found for: {0}.
 action_undo_error=An error occurred while rolling back the engine operation while undoing the {0} action.
+forced_action_execute_error=An error occurred while performing the engine operation while executing the {0} action in forced mode. The operation will continue.
 actions_not_found=No actions found for: {0}.
 not_current_phase=Current phase does not match argument.
 null_operands=Operands must not be null.
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Unconfigure.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Unconfigure.java
index e35d418..3b9011a 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Unconfigure.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Unconfigure.java
@@ -18,8 +18,12 @@ import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 
 public class Unconfigure extends InstallableUnitPhase {
 
+	public Unconfigure(int weight, boolean forced) {
+		super("unconfigure", weight, forced); //$NON-NLS-1$
+	}
+
 	public Unconfigure(int weight) {
-		super("unconfigure", weight); //$NON-NLS-1$
+		this(weight, false);
 	}
 
 	protected boolean isApplicable(InstallableUnitOperand op) {
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Uninstall.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Uninstall.java
index 4555ebc..d4bf17d 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Uninstall.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/phases/Uninstall.java
@@ -64,8 +64,12 @@ public class Uninstall extends InstallableUnitPhase {
 
 	private static final String PHASE_ID = "uninstall"; //$NON-NLS-1$
 
+	public Uninstall(int weight, boolean forced) {
+		super(PHASE_ID, weight, forced);
+	}
+
 	public Uninstall(int weight) {
-		super(PHASE_ID, weight);
+		this(weight, false);
 	}
 
 	protected boolean isApplicable(InstallableUnitOperand op) {
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
index 9c4d8d5..40fbb74 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
@@ -39,8 +39,12 @@ public class EngineTest extends AbstractProvisioningTest {
 		int operandCount = 0;
 		int phaseCount = 0;
 
+		protected CountPhase(String name, boolean forced) {
+			super(name, 1, forced);
+		}
+
 		protected CountPhase(String name) {
-			super(name, 1);
+			this(name, false);
 		}
 
 		protected IStatus completeOperand(IProfile profile, Operand operand, Map parameters, IProgressMonitor monitor) {
@@ -88,8 +92,12 @@ public class EngineTest extends AbstractProvisioningTest {
 	}
 
 	private static class ActionNPEPhase extends CountPhase {
+		protected ActionNPEPhase(boolean forced) {
+			super("ActionNPEPhase", forced);
+		}
+
 		protected ActionNPEPhase() {
-			super("ActionNPEPhase");
+			this(false);
 		}
 
 		protected ProvisioningAction[] getActions(Operand operand) {
@@ -111,6 +119,10 @@ public class EngineTest extends AbstractProvisioningTest {
 		public TestPhaseSet(Phase phase) {
 			super(new Phase[] {new Collect(100), new Unconfigure(10), new Uninstall(50), new Property(1), new CheckTrust(10), new Install(50), new Configure(10), phase});
 		}
+
+		public TestPhaseSet(boolean forced) {
+			super(new Phase[] {new Collect(100), new Unconfigure(10, forced), new Uninstall(50, forced), new Property(1), new CheckTrust(10), new Install(50), new Configure(10)});
+		}
 	}
 
 	private ServiceReference engineRef;
@@ -436,6 +448,88 @@ public class EngineTest extends AbstractProvisioningTest {
 		assertTrue(phase.isConsistent());
 	}
 
+	public void testPerformForcedPhaseWithActionError() {
+		Map properties = new HashMap();
+		properties.put(IProfile.PROP_INSTALL_FOLDER, testProvisioning.getAbsolutePath());
+		IProfile profile = createProfile("testPerformForceWithActionError", null, properties);
+		ActionNPEPhase phase = new ActionNPEPhase(true);
+		PhaseSet phaseSet = new TestPhaseSet(phase);
+
+		Iterator ius = getInstallableUnits(profile);
+		assertFalse(ius.hasNext());
+
+		InstallableUnitOperand[] operands = new InstallableUnitOperand[] {new InstallableUnitOperand(null, createOSGiIU())};
+		IStatus result = engine.perform(profile, phaseSet, operands, null, new NullProgressMonitor());
+		assertTrue(result.isOK());
+		ius = getInstallableUnits(profile);
+		assertTrue(ius.hasNext());
+		assertTrue(phase.isConsistent());
+	}
+
+	public void testPerformForcedUninstallWithBadUninstallIUActionThrowsException() {
+		Map properties = new HashMap();
+		properties.put(IProfile.PROP_INSTALL_FOLDER, testProvisioning.getAbsolutePath());
+		IProfile profile = createProfile("testPerformForcedUninstallWithBadUninstallIUActionThrowsException", null, properties);
+
+		// forcedUninstall is false by default
+		PhaseSet phaseSet = new DefaultPhaseSet();
+
+		Iterator ius = getInstallableUnits(profile);
+		assertFalse(ius.hasNext());
+
+		IInstallableUnit badUninstallIU = createBadUninstallIUThrowsException();
+		InstallableUnitOperand[] operands = new InstallableUnitOperand[] {new InstallableUnitOperand(null, badUninstallIU)};
+		IStatus result = engine.perform(profile, phaseSet, operands, null, new NullProgressMonitor());
+		assertTrue(result.isOK());
+		ius = getInstallableUnits(profile);
+		assertTrue(ius.hasNext());
+
+		operands = new InstallableUnitOperand[] {new InstallableUnitOperand(badUninstallIU, null)};
+		result = engine.perform(profile, phaseSet, operands, null, new NullProgressMonitor());
+		assertFalse(result.isOK());
+		ius = getInstallableUnits(profile);
+		assertTrue(ius.hasNext());
+
+		// this simulates a DefaultPhaseSet with forcedUninstall set
+		phaseSet = new TestPhaseSet(true);
+		result = engine.perform(profile, phaseSet, operands, null, new NullProgressMonitor());
+		assertTrue(result.isOK());
+		ius = getInstallableUnits(profile);
+		assertFalse(ius.hasNext());
+	}
+
+	public void testPerformForcedUninstallWithBadUninstallIUActionReturnsError() {
+		Map properties = new HashMap();
+		properties.put(IProfile.PROP_INSTALL_FOLDER, testProvisioning.getAbsolutePath());
+		IProfile profile = createProfile("testPerformForcedUninstallWithBadUninstallIUActionReturnsError", null, properties);
+
+		// forcedUninstall is false by default
+		PhaseSet phaseSet = new DefaultPhaseSet();
+
+		Iterator ius = getInstallableUnits(profile);
+		assertFalse(ius.hasNext());
+
+		IInstallableUnit badUninstallIU = createBadUninstallIUReturnsError();
+		InstallableUnitOperand[] operands = new InstallableUnitOperand[] {new InstallableUnitOperand(null, badUninstallIU)};
+		IStatus result = engine.perform(profile, phaseSet, operands, null, new NullProgressMonitor());
+		assertTrue(result.isOK());
+		ius = getInstallableUnits(profile);
+		assertTrue(ius.hasNext());
+
+		operands = new InstallableUnitOperand[] {new InstallableUnitOperand(badUninstallIU, null)};
+		result = engine.perform(profile, phaseSet, operands, null, new NullProgressMonitor());
+		assertFalse(result.isOK());
+		ius = getInstallableUnits(profile);
+		assertTrue(ius.hasNext());
+
+		// this simulates a DefaultPhaseSet with forcedUninstall set
+		phaseSet = new TestPhaseSet(true);
+		result = engine.perform(profile, phaseSet, operands, null, new NullProgressMonitor());
+		assertTrue(result.isOK());
+		ius = getInstallableUnits(profile);
+		assertFalse(ius.hasNext());
+	}
+
 	public void testOrphanedIUProperty() {
 		IProfile profile = createProfile("testOrphanedIUProperty");
 		PhaseSet phaseSet = new DefaultPhaseSet();
@@ -510,6 +604,58 @@ public class EngineTest extends AbstractProvisioningTest {
 		return MetadataFactory.createResolvedInstallableUnit(iu, cus);
 	}
 
+	private IInstallableUnit createBadUninstallIUReturnsError() {
+		InstallableUnitDescription description = new MetadataFactory.InstallableUnitDescription();
+		description.setId("org.eclipse.osgi.bad");
+		description.setVersion(new Version("3.3.1.R33x_v20070828"));
+		description.setTouchpointType(AbstractProvisioningTest.TOUCHPOINT_OSGI);
+		Map touchpointData = new HashMap();
+		String manifest = "Manifest-Version: 1.0\r\n" + "Bundle-Activator: org.eclipse.osgi.framework.internal.core.SystemBundl\r\n" + " eActivator\r\n" + "Bundle-RequiredExecutionEnvironment: J2SE-1.4,OSGi/Minimum-1.0\r\n" + "Export-Package: org.eclipse.osgi.event;version=\"1.0\",org.eclipse.osgi.\r\n" + " framework.console;version=\"1.0\",org.eclipse.osgi.framework.eventmgr;v\r\n" + " ersion=\"1.0\",org.eclipse.osgi.framework.log;version=\"1.0\",org.eclipse\r\n" + " .osgi.service.datalocation;version=\"1.0\",org.eclipse.osgi.service.deb\r\n" + " ug;version=\"1.0\",org.eclipse.osgi.service.environment;version=\"1.0\",o\r\n" + " rg.eclipse.osgi.service.localization;version=\"1.0\",org.eclipse.osgi.s\r\n" + " ervice.pluginconversion;version=\"1.0\",org.eclipse.osgi.service.resolv\r\n"
+				+ " er;version=\"1.1\",org.eclipse.osgi.service.runnable;version=\"1.0\",org.\r\n" + " eclipse.osgi.service.urlconversion;version=\"1.0\",org.eclipse.osgi.sto\r\n" + " ragemanager;version=\"1.0\",org.eclipse.osgi.util;version=\"1.0\",org.osg\r\n" + " i.framework;version=\"1.3\",org.osgi.service.condpermadmin;version=\"1.0\r\n" + " \",org.osgi.service.packageadmin;version=\"1.2\",org.osgi.service.permis\r\n" + " sionadmin;version=\"1.2\",org.osgi.service.startlevel;version=\"1.0\",org\r\n" + " .osgi.service.url;version=\"1.0\",org.osgi.util.tracker;version=\"1.3.2\"\r\n" + " ,org.eclipse.core.runtime.adaptor;x-friends:=\"org.eclipse.core.runtim\r\n" + " e\",org.eclipse.core.runtime.internal.adaptor;x-internal:=true,org.ecl\r\n"
+				+ " ipse.core.runtime.internal.stats;x-friends:=\"org.eclipse.core.runtime\r\n" + " \",org.eclipse.osgi.baseadaptor;x-internal:=true,org.eclipse.osgi.base\r\n" + " adaptor.bundlefile;x-internal:=true,org.eclipse.osgi.baseadaptor.hook\r\n" + " s;x-internal:=true,org.eclipse.osgi.baseadaptor.loader;x-internal:=tr\r\n" + " ue,org.eclipse.osgi.framework.adaptor;x-internal:=true,org.eclipse.os\r\n" + " gi.framework.debug;x-internal:=true,org.eclipse.osgi.framework.intern\r\n" + " al.core;x-internal:=true,org.eclipse.osgi.framework.internal.protocol\r\n" + " ;x-internal:=true,org.eclipse.osgi.framework.internal.protocol.bundle\r\n" + " entry;x-internal:=true,org.eclipse.osgi.framework.internal.protocol.b\r\n"
+				+ " undleresource;x-internal:=true,org.eclipse.osgi.framework.internal.pr\r\n" + " otocol.reference;x-internal:=true,org.eclipse.osgi.framework.internal\r\n" + " .reliablefile;x-internal:=true,org.eclipse.osgi.framework.launcher;x-\r\n" + " internal:=true,org.eclipse.osgi.framework.util;x-internal:=true,org.e\r\n" + " clipse.osgi.internal.baseadaptor;x-internal:=true,org.eclipse.osgi.in\r\n" + " ternal.module;x-internal:=true,org.eclipse.osgi.internal.profile;x-in\r\n" + " ternal:=true,org.eclipse.osgi.internal.resolver;x-internal:=true,org.\r\n" + " eclipse.osgi.internal.verifier;x-internal:=true,org.eclipse.osgi.inte\r\n" + " rnal.provisional.verifier;x-friends:=\"org.eclipse.update.core,org.ecl\r\n" + " ipse.ui.workbench\"\r\n" + "Bundle-Version: 3.3.0.v20060925\r\n"
+				+ "Eclipse-SystemBundle: true\r\n" + "Bundle-Copyright: %copyright\r\n" + "Bundle-Name: %systemBundle\r\n" + "Bundle-Description: %systemBundle\r\n" + "Bundle-DocUrl: http://www.eclipse.org\r\n" + "Bundle-ManifestVersion: 2\r\n" + "Export-Service: org.osgi.service.packageadmin.PackageAdmin,org.osgi.se\r\n" + " rvice.permissionadmin.PermissionAdmin,org.osgi.service.startlevel.Sta\r\n" + " rtLevel,org.eclipse.osgi.service.debug.DebugOptions\r\n" + "Bundle-Vendor: %eclipse.org\r\n" + "Main-Class: org.eclipse.core.runtime.adaptor.EclipseStarter\r\n" + "Bundle-SymbolicName: org.eclipse.osgi; singleton:=true\r\n" + "Bundle-Localization: systembundle\r\n" + "Eclipse-ExtensibleAPI: true\r\n" + "\r\n" + "";
+		touchpointData.put("manifest", manifest);
+		touchpointData.put("uninstall", "setProgramProperty(missing_mandatory_parameters:xyz)");
+
+		IInstallableUnitFragment[] cus = new IInstallableUnitFragment[1];
+		InstallableUnitFragmentDescription desc = new InstallableUnitFragmentDescription();
+		desc.addTouchpointData(MetadataFactory.createTouchpointData(touchpointData));
+		cus[0] = MetadataFactory.createInstallableUnitFragment(desc);
+
+		//IArtifactKey key = new ArtifactKey("eclipse", "plugin", "org.eclipse.osgi", new Version("3.3.1.R33x_v20070828"));
+		//iu.setArtifacts(new IArtifactKey[] {key});
+
+		IInstallableUnit iu = MetadataFactory.createInstallableUnit(description);
+		return MetadataFactory.createResolvedInstallableUnit(iu, cus);
+	}
+
+	private IInstallableUnit createBadUninstallIUThrowsException() {
+		InstallableUnitDescription description = new MetadataFactory.InstallableUnitDescription();
+		description.setId("org.eclipse.osgi.bad");
+		description.setVersion(new Version("3.3.1.R33x_v20070828"));
+		description.setTouchpointType(AbstractProvisioningTest.TOUCHPOINT_OSGI);
+		Map touchpointData = new HashMap();
+		String manifest = "Manifest-Version: 1.0\r\n" + "Bundle-Activator: org.eclipse.osgi.framework.internal.core.SystemBundl\r\n" + " eActivator\r\n" + "Bundle-RequiredExecutionEnvironment: J2SE-1.4,OSGi/Minimum-1.0\r\n" + "Export-Package: org.eclipse.osgi.event;version=\"1.0\",org.eclipse.osgi.\r\n" + " framework.console;version=\"1.0\",org.eclipse.osgi.framework.eventmgr;v\r\n" + " ersion=\"1.0\",org.eclipse.osgi.framework.log;version=\"1.0\",org.eclipse\r\n" + " .osgi.service.datalocation;version=\"1.0\",org.eclipse.osgi.service.deb\r\n" + " ug;version=\"1.0\",org.eclipse.osgi.service.environment;version=\"1.0\",o\r\n" + " rg.eclipse.osgi.service.localization;version=\"1.0\",org.eclipse.osgi.s\r\n" + " ervice.pluginconversion;version=\"1.0\",org.eclipse.osgi.service.resolv\r\n"
+				+ " er;version=\"1.1\",org.eclipse.osgi.service.runnable;version=\"1.0\",org.\r\n" + " eclipse.osgi.service.urlconversion;version=\"1.0\",org.eclipse.osgi.sto\r\n" + " ragemanager;version=\"1.0\",org.eclipse.osgi.util;version=\"1.0\",org.osg\r\n" + " i.framework;version=\"1.3\",org.osgi.service.condpermadmin;version=\"1.0\r\n" + " \",org.osgi.service.packageadmin;version=\"1.2\",org.osgi.service.permis\r\n" + " sionadmin;version=\"1.2\",org.osgi.service.startlevel;version=\"1.0\",org\r\n" + " .osgi.service.url;version=\"1.0\",org.osgi.util.tracker;version=\"1.3.2\"\r\n" + " ,org.eclipse.core.runtime.adaptor;x-friends:=\"org.eclipse.core.runtim\r\n" + " e\",org.eclipse.core.runtime.internal.adaptor;x-internal:=true,org.ecl\r\n"
+				+ " ipse.core.runtime.internal.stats;x-friends:=\"org.eclipse.core.runtime\r\n" + " \",org.eclipse.osgi.baseadaptor;x-internal:=true,org.eclipse.osgi.base\r\n" + " adaptor.bundlefile;x-internal:=true,org.eclipse.osgi.baseadaptor.hook\r\n" + " s;x-internal:=true,org.eclipse.osgi.baseadaptor.loader;x-internal:=tr\r\n" + " ue,org.eclipse.osgi.framework.adaptor;x-internal:=true,org.eclipse.os\r\n" + " gi.framework.debug;x-internal:=true,org.eclipse.osgi.framework.intern\r\n" + " al.core;x-internal:=true,org.eclipse.osgi.framework.internal.protocol\r\n" + " ;x-internal:=true,org.eclipse.osgi.framework.internal.protocol.bundle\r\n" + " entry;x-internal:=true,org.eclipse.osgi.framework.internal.protocol.b\r\n"
+				+ " undleresource;x-internal:=true,org.eclipse.osgi.framework.internal.pr\r\n" + " otocol.reference;x-internal:=true,org.eclipse.osgi.framework.internal\r\n" + " .reliablefile;x-internal:=true,org.eclipse.osgi.framework.launcher;x-\r\n" + " internal:=true,org.eclipse.osgi.framework.util;x-internal:=true,org.e\r\n" + " clipse.osgi.internal.baseadaptor;x-internal:=true,org.eclipse.osgi.in\r\n" + " ternal.module;x-internal:=true,org.eclipse.osgi.internal.profile;x-in\r\n" + " ternal:=true,org.eclipse.osgi.internal.resolver;x-internal:=true,org.\r\n" + " eclipse.osgi.internal.verifier;x-internal:=true,org.eclipse.osgi.inte\r\n" + " rnal.provisional.verifier;x-friends:=\"org.eclipse.update.core,org.ecl\r\n" + " ipse.ui.workbench\"\r\n" + "Bundle-Version: 3.3.0.v20060925\r\n"
+				+ "Eclipse-SystemBundle: true\r\n" + "Bundle-Copyright: %copyright\r\n" + "Bundle-Name: %systemBundle\r\n" + "Bundle-Description: %systemBundle\r\n" + "Bundle-DocUrl: http://www.eclipse.org\r\n" + "Bundle-ManifestVersion: 2\r\n" + "Export-Service: org.osgi.service.packageadmin.PackageAdmin,org.osgi.se\r\n" + " rvice.permissionadmin.PermissionAdmin,org.osgi.service.startlevel.Sta\r\n" + " rtLevel,org.eclipse.osgi.service.debug.DebugOptions\r\n" + "Bundle-Vendor: %eclipse.org\r\n" + "Main-Class: org.eclipse.core.runtime.adaptor.EclipseStarter\r\n" + "Bundle-SymbolicName: org.eclipse.osgi; singleton:=true\r\n" + "Bundle-Localization: systembundle\r\n" + "Eclipse-ExtensibleAPI: true\r\n" + "\r\n" + "";
+		touchpointData.put("manifest", manifest);
+		touchpointData.put("uninstall", "thisactionismissing()");
+
+		IInstallableUnitFragment[] cus = new IInstallableUnitFragment[1];
+		InstallableUnitFragmentDescription desc = new InstallableUnitFragmentDescription();
+		desc.addTouchpointData(MetadataFactory.createTouchpointData(touchpointData));
+		cus[0] = MetadataFactory.createInstallableUnitFragment(desc);
+
+		//IArtifactKey key = new ArtifactKey("eclipse", "plugin", "org.eclipse.osgi", new Version("3.3.1.R33x_v20070828"));
+		//iu.setArtifacts(new IArtifactKey[] {key});
+
+		IInstallableUnit iu = MetadataFactory.createInstallableUnit(description);
+		return MetadataFactory.createResolvedInstallableUnit(iu, cus);
+	}
+
 	private IInstallableUnit createMissingActionIU() {
 		InstallableUnitDescription description = new MetadataFactory.InstallableUnitDescription();
 		description.setId("org.eclipse.osgi.bad");

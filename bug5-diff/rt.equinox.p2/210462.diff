commit d0a87c0ab5ba1ed04726b4ff0380ab475f1952b9
Author: Pascal Rapicault <prapicau>
Date:   Sat Dec 1 20:14:22 2007 +0000

    Release additional cleanups from bug 210462

1	1	bundles/org.eclipse.equinox.p2.garbagecollector/META-INF/MANIFEST.MF
12	12	bundles/org.eclipse.equinox.p2.garbagecollector/schema/GarbageCollector.exsd
7	13	bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/p2/garbagecollector/CoreGarbageCollector.java
4	1	bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/p2/garbagecollector/GCActivator.java
35	53	bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/p2/garbagecollector/GarbageCollector.java
2	2	bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/p2/garbagecollector/IMarkSetProvider.java
2	8	bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/p2/garbagecollector/Messages.java
0	44	bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/p2/garbagecollector/RootSet.java
2	8	bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/p2/garbagecollector/messages.properties
1	1	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/MarkSetProvider.java
diff --git a/bundles/org.eclipse.equinox.p2.garbagecollector/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.garbagecollector/META-INF/MANIFEST.MF
index 55baa96..3f55207 100644
--- a/bundles/org.eclipse.equinox.p2.garbagecollector/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.garbagecollector/META-INF/MANIFEST.MF
@@ -1,7 +1,7 @@
 Manifest-Version: 1.0
 Bundle-ManifestVersion: 2
 Bundle-Name: Garbagecollector Plug-in
-Bundle-SymbolicName: org.eclipse.equinox.p2.garbagecollector;singleton:=true
+Bundle-SymbolicName: org.eclipse.equinox.p2.garbagecollector
 Bundle-Version: 1.0.0
 Import-Package: org.eclipse.core.runtime.preferences,
  org.eclipse.equinox.internal.p2.core.helpers,
diff --git a/bundles/org.eclipse.equinox.p2.garbagecollector/schema/GarbageCollector.exsd b/bundles/org.eclipse.equinox.p2.garbagecollector/schema/GarbageCollector.exsd
index 20e0acd..be43922 100644
--- a/bundles/org.eclipse.equinox.p2.garbagecollector/schema/GarbageCollector.exsd
+++ b/bundles/org.eclipse.equinox.p2.garbagecollector/schema/GarbageCollector.exsd
@@ -3,7 +3,7 @@
 <schema targetNamespace="org.eclipse.equinox.p2.garbagecollector">
 <annotation>
       <appInfo>
-         <meta.schema plugin="org.eclipse.equinox.p2.garbagecollector" id="GarbageCollector" name="Garbage Collector"/>
+         <meta.schema plugin="org.eclipse.equinox.p2.garbagecollector" id="marksetproviders" name="Profile-based mark set providers"/>
       </appInfo>
       <documentation>
          [Enter description of this extension point.]
@@ -12,6 +12,9 @@
 
    <element name="extension">
       <complexType>
+         <sequence>
+            <element ref="run"/>
+         </sequence>
          <attribute name="point" type="string" use="required">
             <annotation>
                <documentation>
@@ -19,20 +22,25 @@
                </documentation>
             </annotation>
          </attribute>
-         <attribute name="id" type="string">
+         <attribute name="id" type="string" use="required">
             <annotation>
                <documentation>
                   
                </documentation>
             </annotation>
          </attribute>
-         <attribute name="name" type="string">
+      </complexType>
+   </element>
+
+   <element name="run">
+      <complexType>
+         <attribute name="class" type="string" use="required">
             <annotation>
                <documentation>
                   
                </documentation>
                <appInfo>
-                  <meta.attribute translatable="true"/>
+                  <meta.attribute kind="java" basedOn="org.eclipse.equinox.p2.garbagecollector.IMarkSetProvider"/>
                </appInfo>
             </annotation>
          </attribute>
@@ -75,13 +83,5 @@
       </documentation>
    </annotation>
 
-   <annotation>
-      <appInfo>
-         <meta.section type="copyright"/>
-      </appInfo>
-      <documentation>
-         
-      </documentation>
-   </annotation>
 
 </schema>
diff --git a/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/p2/garbagecollector/CoreGarbageCollector.java b/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/p2/garbagecollector/CoreGarbageCollector.java
index 80f8d22..dee84c0 100644
--- a/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/p2/garbagecollector/CoreGarbageCollector.java
+++ b/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/p2/garbagecollector/CoreGarbageCollector.java
@@ -10,9 +10,7 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.garbagecollector;
 
-import org.eclipse.core.runtime.IStatus;
-import org.eclipse.core.runtime.Status;
-import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
+import org.eclipse.equinox.internal.p2.core.helpers.Tracing;
 import org.eclipse.equinox.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.p2.metadata.IArtifactKey;
 
@@ -29,14 +27,14 @@ public class CoreGarbageCollector {
 
 	/**
 	 * Given a list of IArtifactKeys and an IArtifactRepository, removes all artifacts
-	 * in aRepository that are not mapped to by an IArtifactKey in rootSet
+	 * in aRepository that are not mapped to by an IArtifactKey in markSet
 	 */
-	public synchronized void clean(IArtifactKey[] rootSet, IArtifactRepository aRepository) {
+	public synchronized void clean(IArtifactKey[] markSet, IArtifactRepository aRepository) {
 		IArtifactKey[] repositoryKeys = aRepository.getArtifactKeys();
 		for (int j = 0; j < repositoryKeys.length; j++) {
 			boolean artifactIsActive = false;
-			for (int k = 0; k < rootSet.length; k++) {
-				if (repositoryKeys[j].equals(rootSet[k])) {
+			for (int k = 0; k < markSet.length; k++) {
+				if (repositoryKeys[j].equals(markSet[k])) {
 					artifactIsActive = true;
 					break;
 				}
@@ -44,21 +42,17 @@ public class CoreGarbageCollector {
 			if (!artifactIsActive) {
 				aRepository.removeDescriptor(repositoryKeys[j]);
 				if (debugMode) {
-					LogHelper.log(new Status(IStatus.INFO, GCActivator.ID, Messages.CoreGarbageCollector_0 + repositoryKeys[j]));
+					Tracing.debug("Key removed:" + repositoryKeys[j]); //$NON-NLS-1$
 				}
 			}
 		}
 	}
 
-	/**
+	/*
 	 * If set to true, debug mode will log information about each artifact deleted by the CoreGarbageCollector
 	 * @param inDebugMode
 	 */
 	public static void setDebugMode(boolean inDebugMode) {
-		if (inDebugMode) {
-			LogHelper.log(new Status(Status.INFO, GCActivator.ID, Messages.CoreGarbageCollector_1));
-		}
 		debugMode = inDebugMode;
 	}
-
 }
diff --git a/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/p2/garbagecollector/GCActivator.java b/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/p2/garbagecollector/GCActivator.java
index 55e1793..0629d51 100644
--- a/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/p2/garbagecollector/GCActivator.java
+++ b/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/p2/garbagecollector/GCActivator.java
@@ -11,7 +11,10 @@
 package org.eclipse.equinox.p2.garbagecollector;
 
 import java.util.EventObject;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Status;
 import org.eclipse.core.runtime.preferences.IPreferencesService;
+import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
 import org.eclipse.equinox.p2.core.eventbus.ProvisioningEventBus;
 import org.eclipse.equinox.p2.core.eventbus.SynchronousProvisioningListener;
 import org.eclipse.equinox.p2.engine.*;
@@ -50,7 +53,7 @@ public class GCActivator implements BundleActivator {
 	private void registerGCTrigger() {
 		ProvisioningEventBus eventBus = (ProvisioningEventBus) getService(GCActivator.context, ProvisioningEventBus.class.getName());
 		if (eventBus == null) {
-			System.err.println(Messages.GCActivator_0); //TODO Clean up.
+			LogHelper.log(new Status(IStatus.ERROR, GCActivator.ID, Messages.Missing_bus));
 		}
 		eventBus.addListener(busListener = new SynchronousProvisioningListener() {
 			//The GC is triggered when an uninstall event occured during a "transaction" and the transaction is committed.   
diff --git a/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/p2/garbagecollector/GarbageCollector.java b/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/p2/garbagecollector/GarbageCollector.java
index b5950cd..77b3b80 100644
--- a/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/p2/garbagecollector/GarbageCollector.java
+++ b/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/p2/garbagecollector/GarbageCollector.java
@@ -22,11 +22,11 @@ import org.eclipse.equinox.p2.metadata.IArtifactKey;
  * The main control point for the p2 garbage collector.  Takes a Profile and runs the CoreGarbageCollector with the
  * appropriate MarkSets for the repositories used by that Profile.
  * 
- * Takes the profile passed in and creates a set (rootSetMap) that maps the artifact repositories it uses to the
+ * Takes the profile passed in and creates a set (markSet) that maps the artifact repositories it uses to the
  * artifact keys its IUs hold.  This is done by getting MarkSets from all registered IMarkSetProviders.
  * 
  * Then, the MarkSets are obtained for every other registered Profile in a similar fashion.  Each MarkSet is
- * checked to see if its artifact repository is already a key in rootSetMap.  If so, that MarkSet's artifact keys 
+ * checked to see if its artifact repository is already a key in markSet.  If so, that MarkSet's artifact keys 
  * are added to the list that is mapped to by the artifact repository. 
  */
 public class GarbageCollector {
@@ -64,29 +64,7 @@ public class GarbageCollector {
 				continue;
 			}
 
-			try {
-				ParameterizedSafeRunnable providerExecutor = new ParameterizedSafeRunnable(runAttribute, profileToGC);
-				SafeRunner.run(providerExecutor);
-				MarkSet[] inProfileRootSets = providerExecutor.getResult();
-				if (inProfileRootSets[0] == null)
-					return false;
-
-				for (int j = 0; j < inProfileRootSets.length; j++) {
-					if (inProfileRootSets[j] == null) {
-						continue;
-					}
-					Collection keys = (Collection) markSet.get(inProfileRootSets[j].getRepo());
-					if (keys == null) {
-						keys = new HashSet();
-						markSet.put(inProfileRootSets[j].getRepo(), keys);
-					}
-					addKeys(keys, inProfileRootSets[j].getKeys());
-				}
-
-			} catch (ClassCastException e) {
-				LogHelper.log(new Status(IStatus.ERROR, GCActivator.ID, Messages.CoreGarbageCollector_0, e));
-				continue;
-			}
+			contributeMarkSets(runAttribute, profileToGC, true);
 		}
 		return true;
 	}
@@ -96,8 +74,8 @@ public class GarbageCollector {
 		while (keyIterator.hasNext()) {
 			IArtifactRepository nextRepo = (IArtifactRepository) keyIterator.next();
 			IArtifactKey[] keys = (IArtifactKey[]) ((Collection) markSet.get(nextRepo)).toArray(new IArtifactKey[0]);
-			MarkSet aRootSet = new MarkSet(keys, nextRepo);
-			new CoreGarbageCollector().clean(aRootSet.getKeys(), aRootSet.getRepo());
+			MarkSet aMarkSet = new MarkSet(keys, nextRepo);
+			new CoreGarbageCollector().clean(aMarkSet.getKeys(), aMarkSet.getRepo());
 		}
 	}
 
@@ -119,7 +97,7 @@ public class GarbageCollector {
 			Profile[] registeredProfiles = profileRegistry.getProfiles();
 
 			for (int j = 0; j < registeredProfiles.length; j++) {
-				contributeRootSets(runAttribute, registeredProfiles[j]);
+				contributeMarkSets(runAttribute, registeredProfiles[j], false);
 			}
 		}
 	}
@@ -127,7 +105,7 @@ public class GarbageCollector {
 	private class ParameterizedSafeRunnable implements ISafeRunnable {
 		IConfigurationElement cfg;
 		Profile aProfile;
-		MarkSet[] aProfileRootSets;
+		MarkSet[] aProfileMarkSets;
 
 		public ParameterizedSafeRunnable(IConfigurationElement runtAttribute, Profile profile) {
 			cfg = runtAttribute;
@@ -135,46 +113,50 @@ public class GarbageCollector {
 		}
 
 		public void handleException(Throwable exception) {
-			LogHelper.log(new Status(IStatus.ERROR, GCActivator.ID, Messages.GarbageCollector_3, exception));
+			LogHelper.log(new Status(IStatus.ERROR, GCActivator.ID, Messages.Error_in_extension, exception));
 		}
 
 		public void run() throws Exception {
-			IMarkSetProvider aRootSetProvider = (IMarkSetProvider) cfg.createExecutableExtension(ATTRIBUTE_CLASS);
-			if (aRootSetProvider == null) {
-				aProfileRootSets = null;
+			IMarkSetProvider aMarkSetProvider = (IMarkSetProvider) cfg.createExecutableExtension(ATTRIBUTE_CLASS);
+			if (aMarkSetProvider == null) {
+				aProfileMarkSets = null;
 				return;
 			}
-			aProfileRootSets = aRootSetProvider.getRootSets(aProfile);
+			aProfileMarkSets = aMarkSetProvider.getMarkSets(aProfile);
 		}
 
 		public MarkSet[] getResult() {
-			return aProfileRootSets;
+			return aProfileMarkSets;
 		}
 	}
 
-	private void contributeRootSets(IConfigurationElement runAttribute, Profile aProfile) {
-		try {
-			ParameterizedSafeRunnable providerExecutor = new ParameterizedSafeRunnable(runAttribute, aProfile);
-			SafeRunner.run(providerExecutor);
-			MarkSet[] aProfileRootSets = providerExecutor.getResult();
-			if (aProfileRootSets[0] == null)
-				return;
+	private void contributeMarkSets(IConfigurationElement runAttribute, Profile aProfile, boolean addRepositories) {
+		ParameterizedSafeRunnable providerExecutor = new ParameterizedSafeRunnable(runAttribute, aProfile);
+		SafeRunner.run(providerExecutor);
+		MarkSet[] aProfileMarkSets = providerExecutor.getResult();
+		if (aProfileMarkSets[0] == null)
+			return;
+
+		for (int i = 0; i < aProfileMarkSets.length; i++) {
+			if (aProfileMarkSets[i] == null) {
+				continue;
+			}
 
-			for (int j = 0; j < aProfileRootSets.length; j++) {
-				if (aProfileRootSets[j] == null) {
+			for (int j = 0; j < aProfileMarkSets.length; j++) {
+				if (aProfileMarkSets[j] == null) {
 					continue;
 				}
-
-				//contribute any keys that are relevant to the Profile being GC'ed
-				if (markSet.containsKey(aProfileRootSets[j].getRepo())) {
-					Collection keys = (Collection) markSet.get(aProfileRootSets[j].getRepo());
-					addKeys(keys, aProfileRootSets[j].getKeys());
-					markSet.put(aProfileRootSets[j].getRepo(), keys);
+				Collection keys = (Collection) markSet.get(aProfileMarkSets[j].getRepo());
+				if (keys == null) {
+					if (addRepositories) {
+						keys = new HashSet();
+						markSet.put(aProfileMarkSets[j].getRepo(), keys);
+						addKeys(keys, aProfileMarkSets[j].getKeys());
+					}
+				} else {
+					addKeys(keys, aProfileMarkSets[j].getKeys());
 				}
 			}
-
-		} catch (ClassCastException e) {
-			LogHelper.log(new Status(IStatus.ERROR, GCActivator.ID, Messages.CoreGarbageCollector_0, e));
 		}
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/p2/garbagecollector/IMarkSetProvider.java b/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/p2/garbagecollector/IMarkSetProvider.java
index 387aabd..c5becb9 100644
--- a/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/p2/garbagecollector/IMarkSetProvider.java
+++ b/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/p2/garbagecollector/IMarkSetProvider.java
@@ -14,7 +14,7 @@ import org.eclipse.equinox.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.p2.engine.Profile;
 
 /** 
- * Any class which declares itself as an extension to the org.eclipse.equinox.p2.garbagecollector.rootsetproviders
+ * Any class which declares itself as an extension to the org.eclipse.equinox.p2.garbagecollector.marksetproviders
  * extension point must implement this interface.  Given a Profile, implementors will need to provide an array of
  * MarkSet objects, each of which should contain an IArtifactRepository and the IArtifactKeys used by the given
  * Profile.
@@ -28,7 +28,7 @@ public interface IMarkSetProvider {
 	 * @param p A profile whose ArtifactRepositories require a garbage collection
 	 * @return An array of MarkSet object(s) containing p's IArtifactRepository and its root set of IArtifactKeys
 	 */
-	public MarkSet[] getRootSets(Profile p);
+	public MarkSet[] getMarkSets(Profile p);
 	
 	/**
 	 * Returns the IArtifactRepository for which this IMarkSetProvider provides a MarkSet.
diff --git a/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/p2/garbagecollector/Messages.java b/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/p2/garbagecollector/Messages.java
index 9c5f8e8..f805b6e 100644
--- a/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/p2/garbagecollector/Messages.java
+++ b/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/p2/garbagecollector/Messages.java
@@ -5,14 +5,8 @@ import org.eclipse.osgi.util.NLS;
 public class Messages extends NLS {
 	private static final String BUNDLE_NAME = "org.eclipse.equinox.p2.garbagecollector.messages"; //$NON-NLS-1$
 
-	public static String CoreGarbageCollector_0;
-	public static String CoreGarbageCollector_1;
-	public static String GarbageCollector_0;
-	public static String GarbageCollector_1;
-	public static String GarbageCollector_2;
-	public static String GarbageCollector_3;
-	public static String GarbageCollector_4;
-	public static String GCActivator_0;
+	public static String Error_in_extension;
+	public static String Missing_bus;
 
 	static {
 		// load message values from bundle file
diff --git a/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/p2/garbagecollector/RootSet.java b/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/p2/garbagecollector/RootSet.java
deleted file mode 100644
index 43cb7ac..0000000
--- a/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/p2/garbagecollector/RootSet.java
+++ /dev/null
@@ -1,44 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.p2.garbagecollector;
-
-import org.eclipse.equinox.p2.artifact.repository.IArtifactRepository;
-import org.eclipse.equinox.p2.metadata.IArtifactKey;
-
-/**
- * Wrapper class used to store an IArtifactRepository and its root set of IArtifactKeys.
- */
-public class RootSet {
-	
-	/**
-	 * The root set for repo.  This is the set of keys that currently map to an artifact in repo.
-	 */
-	private IArtifactKey[] keys;
-	
-	/**
-	 * The ArtifactRepository for which a root set is being stored.
-	 */
-	private IArtifactRepository repo;
-	
-	public RootSet(IArtifactKey[] inKeys, IArtifactRepository inRepo) {
-		keys = inKeys;
-		repo = inRepo;
-	}
-	
-	public IArtifactKey[] getKeys() {
-		return keys;
-	}
-	
-	public IArtifactRepository getRepo() {
-		return repo;
-	}
-
-}
diff --git a/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/p2/garbagecollector/messages.properties b/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/p2/garbagecollector/messages.properties
index 2e985e3..bf2ab8a 100644
--- a/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/p2/garbagecollector/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.garbagecollector/src/org/eclipse/equinox/p2/garbagecollector/messages.properties
@@ -1,8 +1,2 @@
-CoreGarbageCollector_0=Removing ArtifactKey: ${0}.
-CoreGarbageCollector_1=CoreGarbageCollector now running in debug mode.
-GarbageCollector_0=Extension does not implement IRootSetProvider interface.
-GarbageCollector_1=Could not instantiate an instance of the provided extension.
-GarbageCollector_2=A failure occurred while getting the root set.
-GarbageCollector_3=Error occurred during call to an IRootSetProvider.
-GarbageCollector_4=Number of RootSets has exceeded GarbageCollector.NUMBER_OF_ROOTSETS.
-GCActivator_0=ProvisioningEventBus service could not be obtained, CoreGarbageCollector will not function properly.
+Error_in_extension=An error occurred while calling to an IMarkSetProvider.
+Missing_bus=ProvisioningEventBus service could not be obtained, CoreGarbageCollector will not function properly.
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/MarkSetProvider.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/MarkSetProvider.java
index 0721c69..fd40f82 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/MarkSetProvider.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/MarkSetProvider.java
@@ -15,7 +15,7 @@ public class MarkSetProvider implements IMarkSetProvider {
 
 	private Collection artifactKeyList = null;
 
-	public MarkSet[] getRootSets(Profile inProfile) {
+	public MarkSet[] getMarkSets(Profile inProfile) {
 		artifactKeyList = new HashSet();
 		IArtifactRepository repositoryToGC = Util.getBundlePoolRepository(inProfile);
 		addArtifactKeys(inProfile);

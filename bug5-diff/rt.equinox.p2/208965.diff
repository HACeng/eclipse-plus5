commit 21f77d4ee6bebbe2d489d1616523b8248c7204d8
Author: John Arthorne <johna>
Date:   Wed Nov 7 19:38:37 2007 +0000

    Bug 208965 - move OrderedProperties out of API package

2	3	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
3	3	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepositoryIO.java
3	3	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/p2/artifact/repository/ArtifactDescriptor.java
1	1	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/helpers/Headers.java
250	0	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/helpers/OrderedProperties.java
1	1	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/XMLParser.java
0	250	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/p2/core/OrderedProperties.java
3	3	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/p2/core/repository/IRepository.java
5	4	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/spi/p2/core/repository/AbstractRepository.java
2	2	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/SimpleDirector.java
3	3	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Profile.java
5	5	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/SimpleProfileRegistry.java
17	17	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/installregistry/InstallRegistry.java
1	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/installregistry/MetadataCache.java
1	1	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java
2	2	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataParser.java
2	2	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/spi/p2/metadata/repository/AbstractMetadataRepository.java
8	2	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnit.java
5	4	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/InstallableUnit.java
2	4	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/ResolvedInstallableUnit.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ColocatedRepositoryInfo.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AvailableIUContentProvider.java
2	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/InternalRepositoryFilter.java
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
index 093f54b..9326887 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepository.java
@@ -18,7 +18,6 @@ import org.eclipse.equinox.internal.p2.core.helpers.MultiStatus;
 import org.eclipse.equinox.p2.artifact.repository.*;
 import org.eclipse.equinox.p2.artifact.repository.processing.ProcessingStep;
 import org.eclipse.equinox.p2.artifact.repository.processing.ProcessingStepHandler;
-import org.eclipse.equinox.p2.core.OrderedProperties;
 import org.eclipse.equinox.p2.core.repository.IRepository;
 import org.eclipse.equinox.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.spi.p2.artifact.repository.AbstractArtifactRepository;
@@ -73,7 +72,7 @@ public class SimpleArtifactRepository extends AbstractArtifactRepository impleme
 		initializeAfterLoad(location);
 	}
 
-	public SimpleArtifactRepository(String name, String type, String version, String description, String provider, boolean verifySignature, Set artifacts, String[][] mappingRules, OrderedProperties properties) {
+	public SimpleArtifactRepository(String name, String type, String version, String description, String provider, boolean verifySignature, Set artifacts, String[][] mappingRules, Map properties) {
 		super(name, type, version, null, description, provider);
 		signatureVerification = verifySignature;
 		this.artifactDescriptors.addAll(artifacts);
@@ -393,7 +392,7 @@ public class SimpleArtifactRepository extends AbstractArtifactRepository impleme
 	}
 
 	public void tagAsImplementation() {
-		properties.setProperty(IRepository.IMPLEMENTATION_ONLY_KEY, Boolean.valueOf(true).toString());
+		properties.put(IRepository.IMPLEMENTATION_ONLY_KEY, Boolean.TRUE.toString());
 	}
 
 	/**
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepositoryIO.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepositoryIO.java
index 7dd0633..bea442a 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepositoryIO.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepositoryIO.java
@@ -16,13 +16,13 @@ import javax.xml.parsers.ParserConfigurationException;
 import org.eclipse.core.runtime.CoreException;
 import org.eclipse.equinox.internal.p2.artifact.repository.Activator;
 import org.eclipse.equinox.internal.p2.artifact.repository.Messages;
+import org.eclipse.equinox.internal.p2.core.helpers.OrderedProperties;
 import org.eclipse.equinox.internal.p2.metadata.ArtifactKey;
 import org.eclipse.equinox.internal.p2.persistence.XMLParser;
 import org.eclipse.equinox.internal.p2.persistence.XMLWriter;
 import org.eclipse.equinox.p2.artifact.repository.ArtifactDescriptor;
 import org.eclipse.equinox.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.p2.artifact.repository.processing.ProcessingStepDescriptor;
-import org.eclipse.equinox.p2.core.OrderedProperties;
 import org.eclipse.equinox.p2.core.repository.RepositoryCreationException;
 import org.eclipse.equinox.p2.metadata.IArtifactKey;
 import org.eclipse.osgi.service.resolver.VersionRange;
@@ -327,7 +327,7 @@ class SimpleArtifactRepositoryIO {
 				if (isValidXML()) {
 					String[][] mappingRules = (mappingRulesHandler == null ? new String[0][0] //
 							: mappingRulesHandler.getMappingRules());
-					OrderedProperties properties = (propertiesHandler == null ? new OrderedProperties(0) //
+					Map properties = (propertiesHandler == null ? new OrderedProperties(0) //
 							: propertiesHandler.getProperties());
 					Set artifacts = (artifactsHandler == null ? new HashSet(0) //
 							: artifactsHandler.getArtifacts());
@@ -447,7 +447,7 @@ class SimpleArtifactRepositoryIO {
 
 			protected void finished() {
 				if (isValidXML() && currentArtifact != null) {
-					OrderedProperties properties = (propertiesHandler == null ? new OrderedProperties(0) //
+					Map properties = (propertiesHandler == null ? new OrderedProperties(0) //
 							: propertiesHandler.getProperties());
 					currentArtifact.addProperties(properties);
 					ProcessingStepDescriptor[] processingSteps = (processingStepsHandler == null ? new ProcessingStepDescriptor[0] //
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/p2/artifact/repository/ArtifactDescriptor.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/p2/artifact/repository/ArtifactDescriptor.java
index c8cd207..e74c7f6 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/p2/artifact/repository/ArtifactDescriptor.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/p2/artifact/repository/ArtifactDescriptor.java
@@ -12,8 +12,8 @@ package org.eclipse.equinox.p2.artifact.repository;
 
 import java.util.Arrays;
 import java.util.Map;
+import org.eclipse.equinox.internal.p2.core.helpers.OrderedProperties;
 import org.eclipse.equinox.p2.artifact.repository.processing.ProcessingStepDescriptor;
-import org.eclipse.equinox.p2.core.OrderedProperties;
 import org.eclipse.equinox.p2.metadata.IArtifactKey;
 
 /**
@@ -29,7 +29,7 @@ public class ArtifactDescriptor implements IArtifactDescriptor {
 	// has been downloaded (e.g, unpack, then md5 checksum, then...)
 	protected ProcessingStepDescriptor[] processingSteps = EMPTY_STEPS;
 
-	protected OrderedProperties properties = new OrderedProperties();
+	protected Map properties = new OrderedProperties();
 
 	protected transient IArtifactRepository repository;
 
@@ -73,7 +73,7 @@ public class ArtifactDescriptor implements IArtifactDescriptor {
 			properties.put(key, value);
 	}
 
-	public void addProperties(OrderedProperties additionalProperties) {
+	public void addProperties(Map additionalProperties) {
 		properties.putAll(additionalProperties);
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/helpers/Headers.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/helpers/Headers.java
index ae03455..a2b2fea 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/helpers/Headers.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/helpers/Headers.java
@@ -163,7 +163,7 @@ public class Headers extends Dictionary implements Map {
 		} else { /* put */
 			if (i != -1) { /* duplicate key */
 				if (!replace)
-					throw new IllegalArgumentException("HEADER_DUPLICATE_KEY_EXCEPTION: " + key);
+					throw new IllegalArgumentException("HEADER_DUPLICATE_KEY_EXCEPTION: " + key); //$NON-NLS-1$
 				Object oldVal = values[i];
 				values[i] = value;
 				return oldVal;
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/helpers/OrderedProperties.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/helpers/OrderedProperties.java
new file mode 100644
index 0000000..6970fb1
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/helpers/OrderedProperties.java
@@ -0,0 +1,250 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others. All rights reserved. This
+ * program and the accompanying materials are made available under the terms of
+ * the Eclipse Public License v1.0 which accompanies this distribution, and is
+ * available at http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors: IBM Corporation - initial API and implementation
+ ******************************************************************************/
+package org.eclipse.equinox.internal.p2.core.helpers;
+
+import java.util.*;
+
+/**
+ * A Properties collection that maintains the order of insertion.
+ * <p>
+ * This class is used to store properties similar to {@link java.util.Properties}.
+ * In particular both keys and values are strings and must be not null.
+ * However this class is somewhat simplified and does not implement Cloneable, 
+ * Serializable and Hashtable.
+ * <p>
+ * In contrast to java.util.Properties this class maintains the order by which 
+ * properties are added. This is implemented using a {@link LinkedHashMap}.
+ * <p>
+ * The class does not support default properties as they can be expressed by 
+ * creating java.util.Properties hierarchies.
+ */
+public class OrderedProperties extends Dictionary implements Map {
+
+	LinkedHashMap propertyMap = null;
+
+	private static final String[] NO_KEYS = new String[0];
+
+	public static OrderedProperties unmodifiableProperties(Map properties) {
+		return new UnmodifiableProperties(properties);
+	}
+
+	public OrderedProperties() {
+		super();
+	}
+
+	public OrderedProperties(int size) {
+		super();
+		propertyMap = new LinkedHashMap(size);
+	}
+
+	public OrderedProperties(OrderedProperties properties) {
+		super();
+		propertyMap = new LinkedHashMap(properties.size());
+		putAll(properties);
+	}
+
+	/**
+	 * Set the property value.
+	 * <p>
+	 * If a property with the key already exists, the previous
+	 * value is replaced. Otherwise a new property is added at
+	 * the end collection.
+	 * 
+	 * @param key   must not be null
+	 * @param value must not be null
+	 * @return previous value associated with specified key, or <tt>null</tt>
+	 *	       if there was no mapping for key.
+	 */
+	public Object setProperty(String key, String value) {
+		init();
+		return propertyMap.put(key, value);
+	}
+
+	public String getProperty(String key) {
+		return (String) (propertyMap == null ? null : propertyMap.get(key));
+	}
+
+	public String getProperty(String key, String defaultValue) {
+		String value = getProperty(key);
+		return (value == null) ? defaultValue : value;
+	}
+
+	public void putAll(OrderedProperties properties) {
+		putAll((Map) properties);
+	}
+
+	public Collection getPropertyKeysCollection() {
+		return (propertyMap != null ? Collections.unmodifiableCollection(propertyMap.keySet()) : Collections.EMPTY_LIST);
+	}
+
+	public String[] getPropertyKeys() {
+		if (propertyMap == null)
+			return NO_KEYS;
+		Collection keySet = propertyMap.keySet();
+		return (String[]) keySet.toArray(new String[keySet.size()]);
+	}
+
+	/**
+	 *	Initialize the map.
+	 */
+	private void init() {
+		if (propertyMap == null) {
+			propertyMap = new LinkedHashMap();
+		}
+	}
+
+	public int size() {
+		return propertyMap == null ? 0 : propertyMap.size();
+	}
+
+	public boolean isEmpty() {
+		return propertyMap == null ? true : propertyMap.isEmpty();
+	}
+
+	public synchronized void clear() {
+		propertyMap = null;
+	}
+
+	public Object put(Object arg0, Object arg1) {
+		init();
+		return propertyMap.put(arg0, arg1);
+	}
+
+	public boolean containsKey(Object key) {
+		return propertyMap != null ? propertyMap.containsKey(key) : false;
+	}
+
+	public boolean containsValue(Object value) {
+		return propertyMap != null ? propertyMap.containsValue(value) : false;
+	}
+
+	public Set entrySet() {
+		return propertyMap != null ? propertyMap.entrySet() : Collections.EMPTY_SET;
+	}
+
+	public Object get(Object key) {
+		return propertyMap != null ? propertyMap.get(key) : null;
+	}
+
+	public Set keySet() {
+		return propertyMap != null ? propertyMap.keySet() : Collections.EMPTY_SET;
+	}
+
+	public void putAll(Map arg0) {
+		init();
+		propertyMap.putAll(arg0);
+	}
+
+	public Object remove(Object key) {
+		return propertyMap != null ? propertyMap.remove(key) : null;
+	}
+
+	public Collection values() {
+		return propertyMap != null ? propertyMap.values() : Collections.EMPTY_LIST;
+	}
+
+	public boolean equals(Object o) {
+		if (o == this)
+			return true;
+		if (o instanceof OrderedProperties) {
+			OrderedProperties rhs = (OrderedProperties) o;
+			if (rhs.propertyMap == this.propertyMap)
+				return true;
+			if (rhs.propertyMap == null || this.propertyMap == null)
+				return false;
+			return rhs.propertyMap.equals(this.propertyMap);
+		}
+		return propertyMap.equals(o);
+	}
+
+	public int hashCode() {
+		return propertyMap != null ? propertyMap.hashCode() : 0;
+	}
+
+	public String toString() {
+		StringBuffer sb = new StringBuffer();
+		sb.append(propertyMap);
+		return sb.toString();
+	}
+
+	private class ElementsEnum implements Enumeration {
+
+		Iterator iterator = null;
+
+		public ElementsEnum(OrderedProperties properties) {
+			iterator = properties.propertyMap.values().iterator();
+		}
+
+		public boolean hasMoreElements() {
+			return iterator.hasNext();
+		}
+
+		public Object nextElement() {
+			return iterator.next();
+		}
+	}
+
+	public Enumeration elements() {
+		return new ElementsEnum(this);
+	}
+
+	private class KeysEnum implements Enumeration {
+
+		Iterator iterator = null;
+
+		public KeysEnum(OrderedProperties properties) {
+			iterator = properties.propertyMap.keySet().iterator();
+		}
+
+		public boolean hasMoreElements() {
+			return iterator.hasNext();
+		}
+
+		public Object nextElement() {
+			return iterator.next();
+		}
+	}
+
+	public Enumeration keys() {
+		return new KeysEnum(this);
+	}
+
+	private static class UnmodifiableProperties extends OrderedProperties {
+
+		UnmodifiableProperties(Map properties) {
+			super();
+			for (Iterator iter = properties.entrySet().iterator(); iter.hasNext();) {
+				Map.Entry entry = (Map.Entry) iter.next();
+				super.put(entry.getKey(), entry.getValue());
+			}
+		}
+
+		public synchronized Object setProperty(String key, String value) {
+			throw new UnsupportedOperationException();
+		}
+
+		public synchronized Object put(Object key, Object value) {
+			throw new UnsupportedOperationException();
+		}
+
+		public synchronized Object remove(Object key) {
+			throw new UnsupportedOperationException();
+		}
+
+		public synchronized void putAll(Map t) {
+			throw new UnsupportedOperationException();
+		}
+
+		public synchronized void clear() {
+			throw new UnsupportedOperationException();
+		}
+
+	}
+
+}
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/XMLParser.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/XMLParser.java
index 7a21d1a..9131ff7 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/XMLParser.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/XMLParser.java
@@ -16,7 +16,7 @@ import javax.xml.parsers.*;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.Status;
 import org.eclipse.equinox.internal.p2.core.helpers.MultiStatus;
-import org.eclipse.equinox.p2.core.OrderedProperties;
+import org.eclipse.equinox.internal.p2.core.helpers.OrderedProperties;
 import org.eclipse.osgi.service.resolver.VersionRange;
 import org.eclipse.osgi.util.NLS;
 import org.osgi.framework.BundleContext;
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/p2/core/OrderedProperties.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/p2/core/OrderedProperties.java
deleted file mode 100644
index 93ca09d..0000000
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/p2/core/OrderedProperties.java
+++ /dev/null
@@ -1,250 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others. All rights reserved. This
- * program and the accompanying materials are made available under the terms of
- * the Eclipse Public License v1.0 which accompanies this distribution, and is
- * available at http://www.eclipse.org/legal/epl-v10.html
- * 
- * Contributors: IBM Corporation - initial API and implementation
- ******************************************************************************/
-package org.eclipse.equinox.p2.core;
-
-import java.util.*;
-
-/**
- * A Properties collection that maintains the order of insertion.
- * <p>
- * This class is used to store properties similar to {@link java.util.Properties}.
- * In particular both keys and values are strings and must be not null.
- * However this class is somewhat simplified and does not implement Cloneable, 
- * Serializable and Hashtable.
- * <p>
- * In contrast to java.util.Properties this class maintains the order by which 
- * properties are added. This is implemented using a {@link LinkedHashMap}.
- * <p>
- * The class does not support default properties as they can be expressed by 
- * creating java.util.Properties hierarchies.
- */
-public class OrderedProperties extends Dictionary implements Map {
-
-	private LinkedHashMap propertyMap = null;
-
-	private static final String[] NO_KEYS = new String[0];
-
-	public static OrderedProperties unmodifiableProperties(OrderedProperties properties) {
-		return new UnmodifiableProperties(properties);
-	}
-
-	public OrderedProperties() {
-		super();
-	}
-
-	public OrderedProperties(int size) {
-		super();
-		propertyMap = new LinkedHashMap(size);
-	}
-
-	public OrderedProperties(OrderedProperties properties) {
-		super();
-		propertyMap = new LinkedHashMap(properties.size());
-		putAll(properties);
-	}
-
-	/**
-	 * Set the property value.
-	 * <p>
-	 * If a property with the key already exists, the previous
-	 * value is replaced. Otherwise a new property is added at
-	 * the end collection.
-	 * 
-	 * @param key   must not be null
-	 * @param value must not be null
-	 * @return previous value associated with specified key, or <tt>null</tt>
-	 *	       if there was no mapping for key.
-	 */
-	public Object setProperty(String key, String value) {
-		init();
-		return propertyMap.put(key, value);
-	}
-
-	public String getProperty(String key) {
-		return (String) (propertyMap == null ? null : propertyMap.get(key));
-	}
-
-	public String getProperty(String key, String defaultValue) {
-		String value = getProperty(key);
-		return (value == null) ? defaultValue : value;
-	}
-
-	public void putAll(OrderedProperties properties) {
-		putAll((Map) properties);
-	}
-
-	public Collection getPropertyKeysCollection() {
-		return (propertyMap != null ? Collections.unmodifiableCollection(propertyMap.keySet()) : Collections.EMPTY_LIST);
-	}
-
-	public String[] getPropertyKeys() {
-		if (propertyMap == null)
-			return NO_KEYS;
-		Collection keySet = propertyMap.keySet();
-		return (String[]) keySet.toArray(new String[keySet.size()]);
-	}
-
-	/**
-	 *	Initialize the map.
-	 */
-	private void init() {
-		if (propertyMap == null) {
-			propertyMap = new LinkedHashMap();
-		}
-	}
-
-	public int size() {
-		return propertyMap == null ? 0 : propertyMap.size();
-	}
-
-	public boolean isEmpty() {
-		return propertyMap == null ? true : propertyMap.isEmpty();
-	}
-
-	public synchronized void clear() {
-		propertyMap = null;
-	}
-
-	public Object put(Object arg0, Object arg1) {
-		init();
-		return propertyMap.put(arg0, arg1);
-	}
-
-	public boolean containsKey(Object key) {
-		return propertyMap != null ? propertyMap.containsKey(key) : false;
-	}
-
-	public boolean containsValue(Object value) {
-		return propertyMap != null ? propertyMap.containsValue(value) : false;
-	}
-
-	public Set entrySet() {
-		return propertyMap != null ? propertyMap.entrySet() : Collections.EMPTY_SET;
-	}
-
-	public Object get(Object key) {
-		return propertyMap != null ? propertyMap.get(key) : null;
-	}
-
-	public Set keySet() {
-		return propertyMap != null ? propertyMap.keySet() : Collections.EMPTY_SET;
-	}
-
-	public void putAll(Map arg0) {
-		init();
-		propertyMap.putAll(arg0);
-	}
-
-	public Object remove(Object key) {
-		return propertyMap != null ? propertyMap.remove(key) : null;
-	}
-
-	public Collection values() {
-		return propertyMap != null ? propertyMap.values() : Collections.EMPTY_LIST;
-	}
-
-	public boolean equals(Object o) {
-		if (o == this)
-			return true;
-		if (o instanceof OrderedProperties) {
-			OrderedProperties rhs = (OrderedProperties) o;
-			if (rhs.propertyMap == this.propertyMap)
-				return true;
-			if (rhs.propertyMap == null || this.propertyMap == null)
-				return false;
-			return rhs.propertyMap.equals(this.propertyMap);
-		}
-		return propertyMap.equals(o);
-	}
-
-	public int hashCode() {
-		return propertyMap != null ? propertyMap.hashCode() : 0;
-	}
-
-	public String toString() {
-		StringBuffer sb = new StringBuffer();
-		sb.append(propertyMap);
-		return sb.toString();
-	}
-
-	private class ElementsEnum implements Enumeration {
-
-		Iterator iterator = null;
-
-		public ElementsEnum(OrderedProperties properties) {
-			iterator = properties.propertyMap.values().iterator();
-		}
-
-		public boolean hasMoreElements() {
-			return iterator.hasNext();
-		}
-
-		public Object nextElement() {
-			return iterator.next();
-		}
-	}
-
-	public Enumeration elements() {
-		return new ElementsEnum(this);
-	}
-
-	private class KeysEnum implements Enumeration {
-
-		Iterator iterator = null;
-
-		public KeysEnum(OrderedProperties properties) {
-			iterator = properties.propertyMap.keySet().iterator();
-		}
-
-		public boolean hasMoreElements() {
-			return iterator.hasNext();
-		}
-
-		public Object nextElement() {
-			return iterator.next();
-		}
-	}
-
-	public Enumeration keys() {
-		return new KeysEnum(this);
-	}
-
-	private static class UnmodifiableProperties extends OrderedProperties {
-
-		UnmodifiableProperties(OrderedProperties properties) {
-			super();
-			for (Iterator iter = properties.entrySet().iterator(); iter.hasNext();) {
-				Map.Entry entry = (Map.Entry) iter.next();
-				super.put(entry.getKey(), entry.getValue());
-			}
-		}
-
-		public synchronized Object setProperty(String key, String value) {
-			throw new UnsupportedOperationException();
-		}
-
-		public synchronized Object put(Object key, Object value) {
-			throw new UnsupportedOperationException();
-		}
-
-		public synchronized Object remove(Object key) {
-			throw new UnsupportedOperationException();
-		}
-
-		public synchronized void putAll(Map t) {
-			throw new UnsupportedOperationException();
-		}
-
-		public synchronized void clear() {
-			throw new UnsupportedOperationException();
-		}
-
-	}
-
-}
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/p2/core/repository/IRepository.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/p2/core/repository/IRepository.java
index 9bfe8df..b710f90 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/p2/core/repository/IRepository.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/p2/core/repository/IRepository.java
@@ -11,8 +11,8 @@
 package org.eclipse.equinox.p2.core.repository;
 
 import java.net.URL;
+import java.util.Map;
 import org.eclipse.core.runtime.IAdaptable;
-import org.eclipse.equinox.p2.core.OrderedProperties;
 
 /**
  * Base interface that defines common properties that may be provided by 
@@ -68,7 +68,7 @@ public interface IRepository extends IAdaptable {
 	 * Returns a read-only collection of the properties of the repository.
 	 * @return the properties of this repository.
 	 */
-	public OrderedProperties getProperties();
+	public Map getProperties();
 
 	/**
 	 * Returns <code>true</code> if this repository can be modified.
@@ -95,5 +95,5 @@ public interface IRepository extends IAdaptable {
 	 * Returns the modifiable collection of the properties of the repository.
 	 * @return the properties of this repository.
 	 */
-	public OrderedProperties getModifiableProperties();
+	public Map getModifiableProperties();
 }
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/spi/p2/core/repository/AbstractRepository.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/spi/p2/core/repository/AbstractRepository.java
index 7c48016..3d0211c 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/spi/p2/core/repository/AbstractRepository.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/spi/p2/core/repository/AbstractRepository.java
@@ -11,8 +11,9 @@
 package org.eclipse.equinox.spi.p2.core.repository;
 
 import java.net.URL;
+import java.util.Map;
 import org.eclipse.core.runtime.PlatformObject;
-import org.eclipse.equinox.p2.core.OrderedProperties;
+import org.eclipse.equinox.internal.p2.core.helpers.OrderedProperties;
 import org.eclipse.equinox.p2.core.repository.IRepository;
 
 /**
@@ -31,7 +32,7 @@ public abstract class AbstractRepository extends PlatformObject implements IRepo
 	protected String description;
 	protected String provider;
 	protected transient URL location;
-	protected OrderedProperties properties = new OrderedProperties();
+	protected Map properties = new OrderedProperties();
 
 	protected AbstractRepository(String name, String type, String version, URL location, String description, String provider) {
 		this.name = name;
@@ -96,7 +97,7 @@ public abstract class AbstractRepository extends PlatformObject implements IRepo
 	 * Returns a read-only collection of the properties of the repository.
 	 * @return the properties of this repository.
 	 */
-	public OrderedProperties getProperties() {
+	public Map getProperties() {
 		return OrderedProperties.unmodifiableProperties(properties);
 	}
 
@@ -112,7 +113,7 @@ public abstract class AbstractRepository extends PlatformObject implements IRepo
 		this.provider = provider;
 	}
 
-	public OrderedProperties getModifiableProperties() {
+	public Map getModifiableProperties() {
 		return properties;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/SimpleDirector.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/SimpleDirector.java
index 1ffd5ce..00fdabc 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/SimpleDirector.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/p2/director/SimpleDirector.java
@@ -33,9 +33,9 @@ public class SimpleDirector implements IDirector {
 	private IPlanner planner;
 
 	public static void tagAsImplementation(IMetadataRepository repository) {
-		if (repository != null && repository.getProperties().getProperty(IRepository.IMPLEMENTATION_ONLY_KEY) == null) {
+		if (repository != null && repository.getProperties().get(IRepository.IMPLEMENTATION_ONLY_KEY) == null) {
 			if (repository.isModifiable())
-				repository.getModifiableProperties().setProperty(IRepository.IMPLEMENTATION_ONLY_KEY, Boolean.valueOf(true).toString());
+				repository.getModifiableProperties().put(IRepository.IMPLEMENTATION_ONLY_KEY, Boolean.valueOf(true).toString());
 		}
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Profile.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Profile.java
index ad9ca71..1efe80d 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Profile.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/Profile.java
@@ -10,9 +10,9 @@ package org.eclipse.equinox.p2.engine;
 
 import java.util.*;
 import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.equinox.internal.p2.core.helpers.OrderedProperties;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.engine.EngineActivator;
-import org.eclipse.equinox.p2.core.OrderedProperties;
 import org.eclipse.equinox.p2.core.eventbus.ProvisioningEventBus;
 import org.eclipse.equinox.p2.installregistry.IInstallRegistry;
 import org.eclipse.equinox.p2.installregistry.IProfileInstallRegistry;
@@ -93,7 +93,7 @@ public class Profile implements IQueryable {
 		this.profileId = profileId;
 	}
 
-	public Profile(String profileId, OrderedProperties properties) {
+	public Profile(String profileId, Map properties) {
 		this(profileId);
 		storage.putAll(properties);
 	}
@@ -184,7 +184,7 @@ public class Profile implements IQueryable {
 	 * 
 	 * @return an <i>unmodifiable copy</i> of the IU properties.
 	 */
-	public OrderedProperties getProperties() {
+	public Map getProperties() {
 		return OrderedProperties.unmodifiableProperties(storage);
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/SimpleProfileRegistry.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/SimpleProfileRegistry.java
index c98f563..01168b6 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/SimpleProfileRegistry.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/engine/SimpleProfileRegistry.java
@@ -13,12 +13,12 @@ import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.*;
 import javax.xml.parsers.ParserConfigurationException;
-import org.eclipse.equinox.internal.p2.core.helpers.*;
+import org.eclipse.equinox.internal.p2.core.helpers.OrderedProperties;
+import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.engine.EngineActivator;
 import org.eclipse.equinox.internal.p2.engine.Messages;
 import org.eclipse.equinox.internal.p2.persistence.XMLParser;
 import org.eclipse.equinox.internal.p2.persistence.XMLWriter;
-import org.eclipse.equinox.p2.core.OrderedProperties;
 import org.eclipse.equinox.p2.core.eventbus.ProvisioningEventBus;
 import org.eclipse.equinox.p2.core.location.AgentLocation;
 import org.eclipse.osgi.service.datalocation.Location;
@@ -34,9 +34,9 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 	/**
 	 * Map of String(Profile id)->Profile. 
 	 */
-	private LinkedHashMap profiles = new LinkedHashMap(8);
+	LinkedHashMap profiles = new LinkedHashMap(8);
 
-	private OrderedProperties properties = new OrderedProperties();
+	OrderedProperties properties = new OrderedProperties();
 
 	private String self;
 
@@ -178,7 +178,7 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 		return false;
 	}
 
-	public OrderedProperties getProperties() {
+	public Map getProperties() {
 		return properties;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/installregistry/InstallRegistry.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/installregistry/InstallRegistry.java
index bc9148b..236ccfe 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/installregistry/InstallRegistry.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/installregistry/InstallRegistry.java
@@ -15,13 +15,13 @@ import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.*;
 import javax.xml.parsers.ParserConfigurationException;
+import org.eclipse.equinox.internal.p2.core.helpers.OrderedProperties;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.engine.EngineActivator;
 import org.eclipse.equinox.internal.p2.engine.Messages;
 import org.eclipse.equinox.internal.p2.metadata.repository.io.MetadataParser;
 import org.eclipse.equinox.internal.p2.metadata.repository.io.MetadataWriter;
 import org.eclipse.equinox.internal.p2.persistence.XMLWriter;
-import org.eclipse.equinox.p2.core.OrderedProperties;
 import org.eclipse.equinox.p2.core.eventbus.ProvisioningEventBus;
 import org.eclipse.equinox.p2.core.eventbus.SynchronousProvisioningListener;
 import org.eclipse.equinox.p2.core.location.AgentLocation;
@@ -37,7 +37,7 @@ public class InstallRegistry implements IInstallRegistry {
 	private static String STORAGE = "installRegistry.xml"; //$NON-NLS-1$
 
 	// what is installed in each profile
-	private Map profileRegistries = new LinkedHashMap(); // Profile id -> ProfileInstallRegistry
+	Map profileRegistries = new LinkedHashMap(); // Profile id -> ProfileInstallRegistry
 	//	private ProfileRegistry profileRegistry; // the corresponding ProfileRegistry
 	//	private File location; // XML file containing install registry
 	//	private IRepository metadataRepo;
@@ -98,7 +98,7 @@ public class InstallRegistry implements IInstallRegistry {
 		});
 	}
 
-	private void persist() {
+	void persist() {
 		try {
 			BufferedOutputStream bof = null;
 			try {
@@ -124,7 +124,7 @@ public class InstallRegistry implements IInstallRegistry {
 		}
 	}
 
-	private void restore() {
+	void restore() {
 		try {
 			BufferedInputStream bif = null;
 			try {
@@ -172,10 +172,10 @@ public class InstallRegistry implements IInstallRegistry {
 		return null;
 	}
 
-	protected class IUIdentity {
+	class IUIdentity {
 
-		private String id;
-		private Version version;
+		String id;
+		Version version;
 
 		public IUIdentity(String id, Version version) {
 			this.id = (id != null ? id : ""); //$NON-NLS-1$
@@ -213,7 +213,7 @@ public class InstallRegistry implements IInstallRegistry {
 	 */
 	public class ProfileInstallRegistry implements IProfileInstallRegistry {
 		private String profileId; // id profile this data applies to
-		private Set installableUnits; //id 
+		Set installableUnits; //id 
 		private Map iuPropertiesMap; // iu->OrderedProperties
 
 		public ProfileInstallRegistry(String profileId) {
@@ -328,13 +328,13 @@ public class InstallRegistry implements IInstallRegistry {
 			flush();
 		}
 
-		private void writeProfileRegistries(Map profileRegistries) {
-			if (profileRegistries.size() > 0) {
+		private void writeProfileRegistries(Map registries) {
+			if (registries.size() > 0) {
 				start(PROFILE_INSTALL_REGISTRIES_ELEMENT);
-				attribute(COLLECTION_SIZE_ATTRIBUTE, profileRegistries.size());
-				for (Iterator iter = profileRegistries.keySet().iterator(); iter.hasNext();) {
+				attribute(COLLECTION_SIZE_ATTRIBUTE, registries.size());
+				for (Iterator iter = registries.keySet().iterator(); iter.hasNext();) {
 					String nextProfileId = (String) iter.next();
-					ProfileInstallRegistry nextProfileRegistry = (ProfileInstallRegistry) profileRegistries.get(nextProfileId);
+					ProfileInstallRegistry nextProfileRegistry = (ProfileInstallRegistry) registries.get(nextProfileId);
 					writeProfileRegistry(nextProfileId, nextProfileRegistry);
 				}
 				end(PROFILE_INSTALL_REGISTRIES_ELEMENT);
@@ -479,24 +479,24 @@ public class InstallRegistry implements IInstallRegistry {
 
 		protected class ProfileInstallRegistriesHandler extends AbstractHandler {
 
-			private List profileRegistries = null;
+			private List registries = null;
 
 			public ProfileInstallRegistriesHandler(AbstractHandler parentHandler, Attributes attributes) {
 				super(parentHandler, PROFILE_INSTALL_REGISTRIES_ELEMENT);
 				String size = parseOptionalAttribute(attributes, COLLECTION_SIZE_ATTRIBUTE);
-				profileRegistries = (size != null ? new ArrayList(new Integer(size).intValue()) : new ArrayList(4));
+				registries = (size != null ? new ArrayList(new Integer(size).intValue()) : new ArrayList(4));
 			}
 
 			public void startElement(String name, Attributes attributes) {
 				if (name.equalsIgnoreCase(PROFILE_INSTALL_REGISTRY_ELEMENT)) {
-					new ProfileInstallRegistryHandler(this, attributes, profileRegistries);
+					new ProfileInstallRegistryHandler(this, attributes, registries);
 				} else {
 					invalidElement(name, attributes);
 				}
 			}
 
 			public ProfileInstallRegistry[] getProfileInstallRegistries() {
-				return (ProfileInstallRegistry[]) profileRegistries.toArray(new ProfileInstallRegistry[profileRegistries.size()]);
+				return (ProfileInstallRegistry[]) registries.toArray(new ProfileInstallRegistry[registries.size()]);
 			}
 		}
 
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/installregistry/MetadataCache.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/installregistry/MetadataCache.java
index aa96f9d..d08339f 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/installregistry/MetadataCache.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/installregistry/MetadataCache.java
@@ -55,7 +55,7 @@ public class MetadataCache extends URLMetadataRepository {
 		super(REPOSITORY_NAME, REPOSITORY_TYPE, REPOSITORY_VERSION.toString(), cacheLocation, null, null);
 		content = getActualLocation(location);
 		// Set property indicating that the metadata cache is an implementation detail.
-		getModifiableProperties().setProperty(IMPLEMENTATION_ONLY_KEY, Boolean.valueOf(true).toString());
+		getModifiableProperties().put(IMPLEMENTATION_ONLY_KEY, Boolean.valueOf(true).toString());
 	}
 
 	public void initializeAfterLoad(URL repoLocation) {
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java
index 142b847..1b434f5 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java
@@ -16,10 +16,10 @@ import java.util.Set;
 import javax.xml.parsers.ParserConfigurationException;
 import org.eclipse.core.runtime.CoreException;
 import org.eclipse.core.runtime.NullProgressMonitor;
+import org.eclipse.equinox.internal.p2.core.helpers.OrderedProperties;
 import org.eclipse.equinox.internal.p2.metadata.repository.io.MetadataParser;
 import org.eclipse.equinox.internal.p2.metadata.repository.io.MetadataWriter;
 import org.eclipse.equinox.internal.p2.persistence.XMLWriter;
-import org.eclipse.equinox.p2.core.OrderedProperties;
 import org.eclipse.equinox.p2.core.repository.RepositoryCreationException;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataParser.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataParser.java
index d70ecf4..807a94a 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataParser.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataParser.java
@@ -11,9 +11,9 @@
 package org.eclipse.equinox.internal.p2.metadata.repository.io;
 
 import java.util.*;
+import org.eclipse.equinox.internal.p2.core.helpers.OrderedProperties;
 import org.eclipse.equinox.internal.p2.metadata.ArtifactKey;
 import org.eclipse.equinox.internal.p2.persistence.XMLParser;
-import org.eclipse.equinox.p2.core.OrderedProperties;
 import org.eclipse.equinox.p2.metadata.*;
 import org.eclipse.osgi.service.resolver.VersionRange;
 import org.osgi.framework.BundleContext;
@@ -149,7 +149,7 @@ public abstract class MetadataParser extends XMLParser implements XMLConstants {
 
 		protected void finished() {
 			if (isValidXML() && currentUnit != null) {
-				OrderedProperties properties = (propertiesHandler == null ? new OrderedProperties(0) //
+				Map properties = (propertiesHandler == null ? new OrderedProperties(0) //
 						: propertiesHandler.getProperties());
 				currentUnit.addProperties(properties);
 				ProvidedCapability[] providedCapabilities = (providedCapabilitiesHandler == null ? new ProvidedCapability[0] //
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/spi/p2/metadata/repository/AbstractMetadataRepository.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/spi/p2/metadata/repository/AbstractMetadataRepository.java
index d477bf4..3035dd1 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/spi/p2/metadata/repository/AbstractMetadataRepository.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/spi/p2/metadata/repository/AbstractMetadataRepository.java
@@ -11,7 +11,7 @@
 package org.eclipse.equinox.spi.p2.metadata.repository;
 
 import java.net.URL;
-import org.eclipse.equinox.p2.core.OrderedProperties;
+import java.util.Map;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.spi.p2.core.repository.AbstractRepository;
@@ -26,7 +26,7 @@ public abstract class AbstractMetadataRepository extends AbstractRepository impl
 		public String Provider;
 		public String Description;
 		public URL Location;
-		public OrderedProperties Properties;
+		public Map Properties;
 		public IInstallableUnit[] Units;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnit.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnit.java
index a0f358f..baba4d3 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnit.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnit.java
@@ -8,7 +8,7 @@
  ******************************************************************************/
 package org.eclipse.equinox.p2.metadata;
 
-import org.eclipse.equinox.p2.core.OrderedProperties;
+import java.util.Map;
 import org.osgi.framework.Version;
 
 public interface IInstallableUnit extends Comparable {
@@ -60,7 +60,13 @@ public interface IInstallableUnit extends Comparable {
 
 	public abstract String getProperty(String key);
 
-	public abstract OrderedProperties getProperties();
+	/**
+	 * Get an <i>unmodifiable copy</i> of the properties
+	 * associated with the installable unit.
+	 * 
+	 * @return an <i>unmodifiable copy</i> of the IU properties.
+	 */
+	public abstract Map getProperties();
 
 	public abstract TouchpointData[] getTouchpointData();
 
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/InstallableUnit.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/InstallableUnit.java
index 1e8a567..f24d7c5 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/InstallableUnit.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/InstallableUnit.java
@@ -9,8 +9,9 @@
 package org.eclipse.equinox.p2.metadata;
 
 import java.util.ArrayList;
+import java.util.Map;
+import org.eclipse.equinox.internal.p2.core.helpers.OrderedProperties;
 import org.eclipse.equinox.internal.p2.metadata.InternalInstallableUnit;
-import org.eclipse.equinox.p2.core.OrderedProperties;
 import org.osgi.framework.Version;
 
 public class InstallableUnit implements IInstallableUnitConstants, IInstallableUnit, InternalInstallableUnit {
@@ -52,7 +53,7 @@ public class InstallableUnit implements IInstallableUnitConstants, IInstallableU
 		visitor.visitInstallableUnit(this);
 	}
 
-	public void addProperties(OrderedProperties newProperties) {
+	public void addProperties(Map newProperties) {
 		if (properties == null)
 			properties = new OrderedProperties(newProperties.size());
 		properties.putAll(newProperties);
@@ -137,12 +138,12 @@ public class InstallableUnit implements IInstallableUnitConstants, IInstallableU
 	 * 
 	 * @return an <i>unmodifiable copy</i> of the IU properties.
 	 */
-	public OrderedProperties getProperties() {
+	public Map getProperties() {
 		return OrderedProperties.unmodifiableProperties(properties());
 	}
 
 	public String getProperty(String key) {
-		return getProperties().getProperty(key);
+		return properties().getProperty(key);
 	}
 
 	public ProvidedCapability[] getProvidedCapabilities() {
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/ResolvedInstallableUnit.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/ResolvedInstallableUnit.java
index ff8ec29..bff4df4 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/ResolvedInstallableUnit.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/ResolvedInstallableUnit.java
@@ -8,10 +8,8 @@
  ******************************************************************************/
 package org.eclipse.equinox.p2.metadata;
 
-import java.util.ArrayList;
-import java.util.Arrays;
+import java.util.*;
 import org.eclipse.equinox.internal.p2.metadata.InternalInstallableUnit;
-import org.eclipse.equinox.p2.core.OrderedProperties;
 import org.osgi.framework.Version;
 
 public class ResolvedInstallableUnit implements IResolvedInstallableUnit, InternalInstallableUnit {
@@ -58,7 +56,7 @@ public class ResolvedInstallableUnit implements IResolvedInstallableUnit, Intern
 		return resolved.getProperty(key);
 	}
 
-	public OrderedProperties getProperties() {
+	public Map getProperties() {
 		return resolved.getProperties();
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ColocatedRepositoryInfo.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ColocatedRepositoryInfo.java
index 992d546..1ce7641 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ColocatedRepositoryInfo.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ColocatedRepositoryInfo.java
@@ -11,7 +11,7 @@
 
 package org.eclipse.equinox.p2.ui;
 
-import org.eclipse.equinox.p2.core.OrderedProperties;
+import java.util.Map;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.spi.p2.core.repository.AbstractRepository;
 
@@ -37,7 +37,7 @@ public class ColocatedRepositoryInfo extends AbstractRepository {
 		return repo.getName();
 	}
 
-	public OrderedProperties getProperties() {
+	public Map getProperties() {
 		return repo.getProperties();
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AvailableIUContentProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AvailableIUContentProvider.java
index 71b13d0..4bc3125 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AvailableIUContentProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/AvailableIUContentProvider.java
@@ -12,7 +12,6 @@
 package org.eclipse.equinox.p2.ui.model;
 
 import java.util.ArrayList;
-
 import org.eclipse.equinox.p2.core.repository.IRepository;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
@@ -53,7 +52,8 @@ public class AvailableIUContentProvider implements IStructuredContentProvider {
 		for (int i = 0; i < reposToCheck.length; i++) {
 			// TODO maybe this should be configurable, but for now assume we never
 			// want to see content from implementation repositories.
-			if (!(Boolean.valueOf(reposToCheck[i].getProperties().getProperty(IRepository.IMPLEMENTATION_ONLY_KEY, "false"))).booleanValue()) { //$NON-NLS-1$
+			Object implOnly = reposToCheck[i].getProperties().get(IRepository.IMPLEMENTATION_ONLY_KEY);
+			if (implOnly == null || !Boolean.valueOf((String) implOnly).booleanValue()) {
 				IInstallableUnit[] ius = reposToCheck[i].getInstallableUnits(null);
 				for (int j = 0; j < ius.length; j++) {
 					list.add(ius[j]);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/InternalRepositoryFilter.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/InternalRepositoryFilter.java
index d08b466..5f3a099 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/InternalRepositoryFilter.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/InternalRepositoryFilter.java
@@ -33,6 +33,7 @@ public class InternalRepositoryFilter extends ViewerFilter {
 		if (repo == null) {
 			return true;
 		}
-		return !(Boolean.valueOf(repo.getProperties().getProperty(IRepository.IMPLEMENTATION_ONLY_KEY, "false"))).booleanValue(); //$NON-NLS-1$
+		Object implOnly = repo.getProperties().get(IRepository.IMPLEMENTATION_ONLY_KEY);
+		return implOnly == null || !Boolean.valueOf((String) implOnly).booleanValue();
 	}
 }

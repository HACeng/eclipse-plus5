commit 41c3c8186e07128c672601314b4865c352de2a15
Author: Simon Kaegi <skaegi>
Date:   Thu Nov 27 20:42:57 2008 +0000

    Bug 253782 [eclipse] Eclipse touchpoint operations are failing when the artifact is missing

55	2	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/AddProgramArgumentActionTest.java
49	0	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/MarkStartedActionTest.java
104	2	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/RemoveProgramArgumentActionTest.java
49	0	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/SetStartLevelActionTest.java
0	16	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Util.java
21	2	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/actions/AddProgramArgumentAction.java
3	4	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/actions/MarkStartedAction.java
37	8	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/actions/RemoveProgramArgumentAction.java
2	4	bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/actions/SetStartLevelAction.java
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/AddProgramArgumentActionTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/AddProgramArgumentActionTest.java
index 479e76a..8c4de12 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/AddProgramArgumentActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/AddProgramArgumentActionTest.java
@@ -8,14 +8,23 @@
  ******************************************************************************/
 package org.eclipse.equinox.p2.tests.touchpoint.eclipse;
 
+import java.io.File;
+import java.io.IOException;
 import java.util.*;
 import org.eclipse.equinox.internal.p2.touchpoint.eclipse.EclipseTouchpoint;
+import org.eclipse.equinox.internal.p2.touchpoint.eclipse.Util;
 import org.eclipse.equinox.internal.p2.touchpoint.eclipse.actions.ActionConstants;
 import org.eclipse.equinox.internal.p2.touchpoint.eclipse.actions.AddProgramArgumentAction;
 import org.eclipse.equinox.internal.provisional.frameworkadmin.Manipulator;
-import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
-import org.eclipse.equinox.internal.provisional.p2.engine.InstallableUnitOperand;
+import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactDescriptor;
+import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IFileArtifactRepository;
+import org.eclipse.equinox.internal.provisional.p2.engine.*;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.publisher.eclipse.BundlesAction;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
+import org.eclipse.equinox.spi.p2.publisher.PublisherHelper;
+import org.eclipse.osgi.service.resolver.BundleDescription;
 
 public class AddProgramArgumentActionTest extends AbstractProvisioningTest {
 
@@ -52,4 +61,48 @@ public class AddProgramArgumentActionTest extends AbstractProvisioningTest {
 		assertFalse(Arrays.asList(manipulator.getLauncherData().getProgramArgs()).contains(programArg));
 	}
 
+	public void testExecuteUndoWithArtifact() throws IOException {
+		Properties profileProperties = new Properties();
+		File installFolder = getTempFolder();
+		profileProperties.setProperty(IProfile.PROP_INSTALL_FOLDER, installFolder.toString());
+		profileProperties.setProperty(IProfile.PROP_CACHE, installFolder.toString());
+		IProfile profile = createProfile("test", null, profileProperties);
+
+		IFileArtifactRepository bundlePool = Util.getBundlePoolRepository(profile);
+		File osgiSource = getTestData("1.0", "/testData/eclipseTouchpoint/bundles/org.eclipse.osgi_3.4.2.R34x_v20080826-1230.jar");
+		File targetPlugins = new File(installFolder, "plugins");
+		assertTrue(targetPlugins.mkdir());
+		File osgiTarget = new File(targetPlugins, "org.eclipse.osgi_3.4.2.R34x_v20080826-1230.jar");
+		copy("2.0", osgiSource, osgiTarget);
+
+		BundleDescription bundleDescription = BundlesAction.createBundleDescription(osgiTarget);
+		IArtifactKey key = BundlesAction.createBundleArtifactKey(bundleDescription.getSymbolicName(), bundleDescription.getVersion().toString());
+		IArtifactDescriptor descriptor = PublisherHelper.createArtifactDescriptor(key, osgiTarget);
+		IInstallableUnit iu = createBundleIU(bundleDescription, osgiTarget.isDirectory(), key);
+		bundlePool.addDescriptor(descriptor);
+
+		Map parameters = new HashMap();
+		parameters.put(ActionConstants.PARM_PROFILE, profile);
+		parameters.put(InstallableUnitPhase.PARM_ARTIFACT_REQUESTS, new ArrayList());
+		EclipseTouchpoint touchpoint = new EclipseTouchpoint();
+		touchpoint.initializePhase(null, profile, "test", parameters);
+		InstallableUnitOperand operand = new InstallableUnitOperand(null, iu);
+		parameters.put("iu", operand.second());
+		touchpoint.initializeOperand(profile, operand, parameters);
+		Manipulator manipulator = (Manipulator) parameters.get(EclipseTouchpoint.PARM_MANIPULATOR);
+		assertNotNull(manipulator);
+
+		String programArg = "@artifact";
+		String resolvedArtifact = osgiTarget.getAbsolutePath();
+		assertFalse(Arrays.asList(manipulator.getLauncherData().getProgramArgs()).contains(resolvedArtifact));
+		parameters.put(ActionConstants.PARM_PROGRAM_ARG, programArg);
+		parameters = Collections.unmodifiableMap(parameters);
+
+		AddProgramArgumentAction action = new AddProgramArgumentAction();
+		action.execute(parameters);
+		assertTrue(Arrays.asList(manipulator.getLauncherData().getProgramArgs()).contains(resolvedArtifact));
+		action.undo(parameters);
+		assertFalse(Arrays.asList(manipulator.getLauncherData().getProgramArgs()).contains(resolvedArtifact));
+	}
+
 }
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/MarkStartedActionTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/MarkStartedActionTest.java
index 5d4ecd0..53adcd1 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/MarkStartedActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/MarkStartedActionTest.java
@@ -84,6 +84,55 @@ public class MarkStartedActionTest extends AbstractProvisioningTest {
 		assertTrue(isMarkedStarted(manipulator, osgiTarget, false));
 	}
 
+	public void testExecuteUndoWithMissingArtifact() throws IOException {
+		Properties profileProperties = new Properties();
+		File installFolder = getTempFolder();
+		profileProperties.setProperty(IProfile.PROP_INSTALL_FOLDER, installFolder.toString());
+		profileProperties.setProperty(IProfile.PROP_CACHE, installFolder.toString());
+		IProfile profile = createProfile("test", null, profileProperties);
+
+		IFileArtifactRepository bundlePool = Util.getBundlePoolRepository(profile);
+		File osgiSource = getTestData("1.0", "/testData/eclipseTouchpoint/bundles/org.eclipse.osgi_3.4.2.R34x_v20080826-1230.jar");
+		File targetPlugins = new File(installFolder, "plugins");
+		assertTrue(targetPlugins.mkdir());
+		File osgiTarget = new File(targetPlugins, "org.eclipse.osgi_3.4.2.R34x_v20080826-1230.jar");
+		copy("2.0", osgiSource, osgiTarget);
+
+		BundleDescription bundleDescription = BundlesAction.createBundleDescription(osgiTarget);
+		IArtifactKey key = BundlesAction.createBundleArtifactKey(bundleDescription.getSymbolicName(), bundleDescription.getVersion().toString());
+		IArtifactDescriptor descriptor = PublisherHelper.createArtifactDescriptor(key, osgiTarget);
+		IInstallableUnit iu = createBundleIU(bundleDescription, osgiTarget.isDirectory(), key);
+		bundlePool.addDescriptor(descriptor);
+
+		Map parameters = new HashMap();
+		parameters.put(ActionConstants.PARM_PROFILE, profile);
+		parameters.put(InstallableUnitPhase.PARM_ARTIFACT_REQUESTS, new ArrayList());
+		EclipseTouchpoint touchpoint = new EclipseTouchpoint();
+		touchpoint.initializePhase(null, profile, "test", parameters);
+		InstallableUnitOperand operand = new InstallableUnitOperand(null, iu);
+		parameters.put("iu", operand.second());
+		touchpoint.initializeOperand(profile, operand, parameters);
+
+		parameters.put(ActionConstants.PARM_STARTED, Boolean.TRUE.toString());
+		parameters = Collections.unmodifiableMap(parameters);
+
+		Manipulator manipulator = (Manipulator) parameters.get(EclipseTouchpoint.PARM_MANIPULATOR);
+		assertNotNull(manipulator);
+
+		BundleInfo bundleInfo = Util.createBundleInfo(osgiTarget, Util.getManifest(iu.getTouchpointData()));
+		manipulator.getConfigData().addBundle(bundleInfo);
+		assertTrue(isMarkedStarted(manipulator, osgiTarget, false));
+
+		// let's remove the artifact now
+		bundlePool.removeDescriptor(descriptor);
+
+		MarkStartedAction action = new MarkStartedAction();
+		action.execute(parameters);
+		assertTrue(isMarkedStarted(manipulator, osgiTarget, true));
+		action.undo(parameters);
+		assertTrue(isMarkedStarted(manipulator, osgiTarget, false));
+	}
+
 	private boolean isMarkedStarted(Manipulator manipulator, File osgiTarget, boolean started) {
 		URI location = osgiTarget.toURI();
 		BundleInfo[] bundles = manipulator.getConfigData().getBundles();
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/RemoveProgramArgumentActionTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/RemoveProgramArgumentActionTest.java
index 31c717f..6f68f13 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/RemoveProgramArgumentActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/RemoveProgramArgumentActionTest.java
@@ -8,14 +8,23 @@
  ******************************************************************************/
 package org.eclipse.equinox.p2.tests.touchpoint.eclipse;
 
+import java.io.File;
+import java.io.IOException;
 import java.util.*;
 import org.eclipse.equinox.internal.p2.touchpoint.eclipse.EclipseTouchpoint;
+import org.eclipse.equinox.internal.p2.touchpoint.eclipse.Util;
 import org.eclipse.equinox.internal.p2.touchpoint.eclipse.actions.ActionConstants;
 import org.eclipse.equinox.internal.p2.touchpoint.eclipse.actions.RemoveProgramArgumentAction;
 import org.eclipse.equinox.internal.provisional.frameworkadmin.Manipulator;
-import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
-import org.eclipse.equinox.internal.provisional.p2.engine.InstallableUnitOperand;
+import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactDescriptor;
+import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IFileArtifactRepository;
+import org.eclipse.equinox.internal.provisional.p2.engine.*;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.publisher.eclipse.BundlesAction;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
+import org.eclipse.equinox.spi.p2.publisher.PublisherHelper;
+import org.eclipse.osgi.service.resolver.BundleDescription;
 
 public class RemoveProgramArgumentActionTest extends AbstractProvisioningTest {
 
@@ -54,4 +63,97 @@ public class RemoveProgramArgumentActionTest extends AbstractProvisioningTest {
 		assertTrue(Arrays.asList(manipulator.getLauncherData().getProgramArgs()).contains(programArg));
 	}
 
+	public void testExecuteUndoWithArtifact() throws IOException {
+		Properties profileProperties = new Properties();
+		File installFolder = getTempFolder();
+		profileProperties.setProperty(IProfile.PROP_INSTALL_FOLDER, installFolder.toString());
+		profileProperties.setProperty(IProfile.PROP_CACHE, installFolder.toString());
+		IProfile profile = createProfile("test", null, profileProperties);
+
+		IFileArtifactRepository bundlePool = Util.getBundlePoolRepository(profile);
+		File osgiSource = getTestData("1.0", "/testData/eclipseTouchpoint/bundles/org.eclipse.osgi_3.4.2.R34x_v20080826-1230.jar");
+		File targetPlugins = new File(installFolder, "plugins");
+		assertTrue(targetPlugins.mkdir());
+		File osgiTarget = new File(targetPlugins, "org.eclipse.osgi_3.4.2.R34x_v20080826-1230.jar");
+		copy("2.0", osgiSource, osgiTarget);
+
+		BundleDescription bundleDescription = BundlesAction.createBundleDescription(osgiTarget);
+		IArtifactKey key = BundlesAction.createBundleArtifactKey(bundleDescription.getSymbolicName(), bundleDescription.getVersion().toString());
+		IArtifactDescriptor descriptor = PublisherHelper.createArtifactDescriptor(key, osgiTarget);
+		IInstallableUnit iu = createBundleIU(bundleDescription, osgiTarget.isDirectory(), key);
+		bundlePool.addDescriptor(descriptor);
+
+		Map parameters = new HashMap();
+		parameters.put(ActionConstants.PARM_PROFILE, profile);
+		parameters.put(InstallableUnitPhase.PARM_ARTIFACT_REQUESTS, new ArrayList());
+		EclipseTouchpoint touchpoint = new EclipseTouchpoint();
+		touchpoint.initializePhase(null, profile, "test", parameters);
+		InstallableUnitOperand operand = new InstallableUnitOperand(null, iu);
+		parameters.put("iu", operand.second());
+		touchpoint.initializeOperand(profile, operand, parameters);
+		Manipulator manipulator = (Manipulator) parameters.get(EclipseTouchpoint.PARM_MANIPULATOR);
+		assertNotNull(manipulator);
+
+		String programArg = "@artifact";
+		String resolvedArtifact = osgiTarget.getAbsolutePath();
+		manipulator.getLauncherData().addProgramArg(resolvedArtifact);
+		assertTrue(Arrays.asList(manipulator.getLauncherData().getProgramArgs()).contains(resolvedArtifact));
+
+		parameters.put(ActionConstants.PARM_PROGRAM_ARG, programArg);
+		parameters = Collections.unmodifiableMap(parameters);
+
+		RemoveProgramArgumentAction action = new RemoveProgramArgumentAction();
+		action.execute(parameters);
+		assertFalse(Arrays.asList(manipulator.getLauncherData().getProgramArgs()).contains(resolvedArtifact));
+		action.undo(parameters);
+		assertTrue(Arrays.asList(manipulator.getLauncherData().getProgramArgs()).contains(resolvedArtifact));
+	}
+
+	public void testExecuteUndoWithMissingArtifact() throws IOException {
+		Properties profileProperties = new Properties();
+		File installFolder = getTempFolder();
+		profileProperties.setProperty(IProfile.PROP_INSTALL_FOLDER, installFolder.toString());
+		profileProperties.setProperty(IProfile.PROP_CACHE, installFolder.toString());
+		IProfile profile = createProfile("test", null, profileProperties);
+
+		Util.getBundlePoolRepository(profile); // we still want the effect
+		File osgiSource = getTestData("1.0", "/testData/eclipseTouchpoint/bundles/org.eclipse.osgi_3.4.2.R34x_v20080826-1230.jar");
+		File targetPlugins = new File(installFolder, "plugins");
+		assertTrue(targetPlugins.mkdir());
+		File osgiTarget = new File(targetPlugins, "org.eclipse.osgi_3.4.2.R34x_v20080826-1230.jar");
+		copy("2.0", osgiSource, osgiTarget);
+
+		BundleDescription bundleDescription = BundlesAction.createBundleDescription(osgiTarget);
+		IArtifactKey key = BundlesAction.createBundleArtifactKey(bundleDescription.getSymbolicName(), bundleDescription.getVersion().toString());
+		IInstallableUnit iu = createBundleIU(bundleDescription, osgiTarget.isDirectory(), key);
+
+		//do not add the artifact
+		//IArtifactDescriptor descriptor = PublisherHelper.createArtifactDescriptor(key, osgiTarget);
+		//bundlePool.addDescriptor(descriptor);
+
+		Map parameters = new HashMap();
+		parameters.put(ActionConstants.PARM_PROFILE, profile);
+		parameters.put(InstallableUnitPhase.PARM_ARTIFACT_REQUESTS, new ArrayList());
+		EclipseTouchpoint touchpoint = new EclipseTouchpoint();
+		touchpoint.initializePhase(null, profile, "test", parameters);
+		InstallableUnitOperand operand = new InstallableUnitOperand(null, iu);
+		parameters.put("iu", operand.second());
+		touchpoint.initializeOperand(profile, operand, parameters);
+		Manipulator manipulator = (Manipulator) parameters.get(EclipseTouchpoint.PARM_MANIPULATOR);
+		assertNotNull(manipulator);
+
+		String programArg = "@artifact";
+		String resolvedArtifact = osgiTarget.getAbsolutePath();
+		manipulator.getLauncherData().addProgramArg(resolvedArtifact);
+		assertTrue(Arrays.asList(manipulator.getLauncherData().getProgramArgs()).contains(resolvedArtifact));
+
+		parameters.put(ActionConstants.PARM_PROGRAM_ARG, programArg);
+		parameters = Collections.unmodifiableMap(parameters);
+
+		RemoveProgramArgumentAction action = new RemoveProgramArgumentAction();
+		action.execute(parameters);
+		assertFalse(Arrays.asList(manipulator.getLauncherData().getProgramArgs()).contains(resolvedArtifact));
+		action.undo(parameters);
+		assertTrue(Arrays.asList(manipulator.getLauncherData().getProgramArgs()).contains(resolvedArtifact));
+	}
 }
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/SetStartLevelActionTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/SetStartLevelActionTest.java
index 4064036..d452815 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/SetStartLevelActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/SetStartLevelActionTest.java
@@ -84,6 +84,55 @@ public class SetStartLevelActionTest extends AbstractProvisioningTest {
 		assertTrue(isStartLevel(manipulator, osgiTarget, -1));
 	}
 
+	public void testExecuteUndoWithMissingArtifact() throws IOException {
+		Properties profileProperties = new Properties();
+		File installFolder = getTempFolder();
+		profileProperties.setProperty(IProfile.PROP_INSTALL_FOLDER, installFolder.toString());
+		profileProperties.setProperty(IProfile.PROP_CACHE, installFolder.toString());
+		IProfile profile = createProfile("test", null, profileProperties);
+
+		IFileArtifactRepository bundlePool = Util.getBundlePoolRepository(profile);
+		File osgiSource = getTestData("1.0", "/testData/eclipseTouchpoint/bundles/org.eclipse.osgi_3.4.2.R34x_v20080826-1230.jar");
+		File targetPlugins = new File(installFolder, "plugins");
+		assertTrue(targetPlugins.mkdir());
+		File osgiTarget = new File(targetPlugins, "org.eclipse.osgi_3.4.2.R34x_v20080826-1230.jar");
+		copy("2.0", osgiSource, osgiTarget);
+
+		BundleDescription bundleDescription = BundlesAction.createBundleDescription(osgiTarget);
+		IArtifactKey key = BundlesAction.createBundleArtifactKey(bundleDescription.getSymbolicName(), bundleDescription.getVersion().toString());
+		IArtifactDescriptor descriptor = PublisherHelper.createArtifactDescriptor(key, osgiTarget);
+		IInstallableUnit iu = createBundleIU(bundleDescription, osgiTarget.isDirectory(), key);
+		bundlePool.addDescriptor(descriptor);
+
+		Map parameters = new HashMap();
+		parameters.put(ActionConstants.PARM_PROFILE, profile);
+		parameters.put(InstallableUnitPhase.PARM_ARTIFACT_REQUESTS, new ArrayList());
+		EclipseTouchpoint touchpoint = new EclipseTouchpoint();
+		touchpoint.initializePhase(null, profile, "test", parameters);
+		InstallableUnitOperand operand = new InstallableUnitOperand(null, iu);
+		parameters.put("iu", operand.second());
+		touchpoint.initializeOperand(profile, operand, parameters);
+
+		parameters.put(ActionConstants.PARM_START_LEVEL, "0");
+		parameters = Collections.unmodifiableMap(parameters);
+
+		Manipulator manipulator = (Manipulator) parameters.get(EclipseTouchpoint.PARM_MANIPULATOR);
+		assertNotNull(manipulator);
+
+		BundleInfo bundleInfo = Util.createBundleInfo(osgiTarget, Util.getManifest(iu.getTouchpointData()));
+		manipulator.getConfigData().addBundle(bundleInfo);
+		assertTrue(isStartLevel(manipulator, osgiTarget, -1));
+
+		// let's remove the artifact now
+		bundlePool.removeDescriptor(descriptor);
+
+		SetStartLevelAction action = new SetStartLevelAction();
+		action.execute(parameters);
+		assertTrue(isStartLevel(manipulator, osgiTarget, 0));
+		action.undo(parameters);
+		assertTrue(isStartLevel(manipulator, osgiTarget, -1));
+	}
+
 	private boolean isStartLevel(Manipulator manipulator, File osgiTarget, int startLevel) {
 		URI location = osgiTarget.toURI();
 		BundleInfo[] bundles = manipulator.getConfigData().getBundles();
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Util.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Util.java
index c7ed17e..993af09 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Util.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/Util.java
@@ -17,7 +17,6 @@ import java.net.*;
 import java.util.*;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.*;
-import org.eclipse.equinox.internal.p2.touchpoint.eclipse.actions.ActionConstants;
 import org.eclipse.equinox.internal.provisional.frameworkadmin.BundleInfo;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.*;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
@@ -328,21 +327,6 @@ public class Util {
 		return new Status(IStatus.ERROR, Activator.ID, message, e);
 	}
 
-	public static String resolveArtifactParam(Map parameters) throws CoreException {
-		IProfile profile = (IProfile) parameters.get(ActionConstants.PARM_PROFILE);
-		IInstallableUnit iu = (IInstallableUnit) parameters.get(EclipseTouchpoint.PARM_IU);
-		IArtifactKey[] artifacts = iu.getArtifacts();
-		if (artifacts == null || artifacts.length == 0)
-			throw new CoreException(createError(NLS.bind(Messages.iu_contains_no_arifacts, iu)));
-
-		IArtifactKey artifactKey = artifacts[0];
-
-		File fileLocation = Util.getArtifactFile(artifactKey, profile);
-		if (fileLocation == null || !fileLocation.exists())
-			throw new CoreException(createError(NLS.bind(Messages.artifact_file_not_found, artifactKey)));
-		return fileLocation.getAbsolutePath();
-	}
-
 	public static File getLauncherConfigLocation(IProfile profile) {
 		String launcherConfig = profile.getProperty(IProfile.PROP_LAUNCHER_CONFIGURATION);
 		return launcherConfig == null ? null : new File(launcherConfig);
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/actions/AddProgramArgumentAction.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/actions/AddProgramArgumentAction.java
index 623b03d..5536d99 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/actions/AddProgramArgumentAction.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/actions/AddProgramArgumentAction.java
@@ -8,12 +8,16 @@
  ******************************************************************************/
 package org.eclipse.equinox.internal.p2.touchpoint.eclipse.actions;
 
+import java.io.File;
 import java.util.Map;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.touchpoint.eclipse.EclipseTouchpoint;
 import org.eclipse.equinox.internal.p2.touchpoint.eclipse.Util;
 import org.eclipse.equinox.internal.provisional.frameworkadmin.Manipulator;
+import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
 import org.eclipse.equinox.internal.provisional.p2.engine.ProvisioningAction;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.osgi.util.NLS;
 
 public class AddProgramArgumentAction extends ProvisioningAction {
@@ -27,7 +31,7 @@ public class AddProgramArgumentAction extends ProvisioningAction {
 
 		if (programArg.equals(ActionConstants.PARM_ARTIFACT)) {
 			try {
-				programArg = Util.resolveArtifactParam(parameters);
+				programArg = resolveArtifactParam(parameters);
 			} catch (CoreException e) {
 				return e.getStatus();
 			}
@@ -45,7 +49,7 @@ public class AddProgramArgumentAction extends ProvisioningAction {
 
 		if (programArg.equals(ActionConstants.PARM_ARTIFACT)) {
 			try {
-				programArg = Util.resolveArtifactParam(parameters);
+				programArg = resolveArtifactParam(parameters);
 			} catch (CoreException e) {
 				return e.getStatus();
 			}
@@ -54,4 +58,19 @@ public class AddProgramArgumentAction extends ProvisioningAction {
 		manipulator.getLauncherData().removeProgramArg(programArg);
 		return Status.OK_STATUS;
 	}
+
+	private static String resolveArtifactParam(Map parameters) throws CoreException {
+		IProfile profile = (IProfile) parameters.get(ActionConstants.PARM_PROFILE);
+		IInstallableUnit iu = (IInstallableUnit) parameters.get(EclipseTouchpoint.PARM_IU);
+		IArtifactKey[] artifacts = iu.getArtifacts();
+		if (artifacts == null || artifacts.length == 0)
+			throw new CoreException(Util.createError(NLS.bind(Messages.iu_contains_no_arifacts, iu)));
+
+		IArtifactKey artifactKey = artifacts[0];
+
+		File fileLocation = Util.getArtifactFile(artifactKey, profile);
+		if (fileLocation == null || !fileLocation.exists())
+			throw new CoreException(Util.createError(NLS.bind(Messages.artifact_file_not_found, artifactKey)));
+		return fileLocation.getAbsolutePath();
+	}
 }
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/actions/MarkStartedAction.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/actions/MarkStartedAction.java
index 394608e..52f8484 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/actions/MarkStartedAction.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/actions/MarkStartedAction.java
@@ -38,9 +38,9 @@ public class MarkStartedAction extends ProvisioningAction {
 			return Util.createError(NLS.bind(Messages.iu_contains_no_arifacts, iu));
 
 		IArtifactKey artifactKey = artifacts[0];
+
+		// the bundleFile might be null here, that's OK.
 		File bundleFile = Util.getArtifactFile(artifactKey, profile);
-		if (bundleFile == null || !bundleFile.exists())
-			return Util.createError(NLS.bind(Messages.artifact_file_not_found, artifactKey));
 
 		String manifest = Util.getManifest(iu.getTouchpointData());
 		if (manifest == null)
@@ -71,9 +71,8 @@ public class MarkStartedAction extends ProvisioningAction {
 			return Util.createError(NLS.bind(Messages.iu_contains_no_arifacts, iu));
 
 		IArtifactKey artifactKey = artifacts[0];
+		// the bundleFile might be null here, that's OK.
 		File bundleFile = Util.getArtifactFile(artifactKey, profile);
-		if (bundleFile == null || !bundleFile.exists())
-			return Util.createError(NLS.bind(Messages.artifact_file_not_found, artifactKey));
 
 		String manifest = Util.getManifest(iu.getTouchpointData());
 		if (manifest == null)
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/actions/RemoveProgramArgumentAction.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/actions/RemoveProgramArgumentAction.java
index 1f12341..29256c8 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/actions/RemoveProgramArgumentAction.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/actions/RemoveProgramArgumentAction.java
@@ -8,16 +8,21 @@
  ******************************************************************************/
 package org.eclipse.equinox.internal.p2.touchpoint.eclipse.actions;
 
+import java.io.File;
 import java.util.Map;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.touchpoint.eclipse.EclipseTouchpoint;
 import org.eclipse.equinox.internal.p2.touchpoint.eclipse.Util;
 import org.eclipse.equinox.internal.provisional.frameworkadmin.Manipulator;
+import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
 import org.eclipse.equinox.internal.provisional.p2.engine.ProvisioningAction;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.osgi.util.NLS;
 
 public class RemoveProgramArgumentAction extends ProvisioningAction {
 	public static final String ID = "removeProgramArg"; //$NON-NLS-1$
+	public static final String EMPTY_ARGUMENT = ""; //$NON-NLS-1$
 
 	public IStatus execute(Map parameters) {
 		Manipulator manipulator = (Manipulator) parameters.get(EclipseTouchpoint.PARM_MANIPULATOR);
@@ -27,7 +32,8 @@ public class RemoveProgramArgumentAction extends ProvisioningAction {
 
 		if (programArg.equals(ActionConstants.PARM_ARTIFACT)) {
 			try {
-				programArg = Util.resolveArtifactParam(parameters);
+				programArg = resolveArtifactParam(parameters, manipulator);
+				getMemento().put(ActionConstants.PARM_ARTIFACT, programArg);
 			} catch (CoreException e) {
 				return e.getStatus();
 			}
@@ -43,15 +49,38 @@ public class RemoveProgramArgumentAction extends ProvisioningAction {
 		if (programArg == null)
 			return Util.createError(NLS.bind(Messages.parameter_not_set, ActionConstants.PARM_PROGRAM_ARG, ID));
 
-		if (programArg.equals(ActionConstants.PARM_ARTIFACT)) {
-			try {
-				programArg = Util.resolveArtifactParam(parameters);
-			} catch (CoreException e) {
-				return e.getStatus();
-			}
-		}
+		if (programArg.equals(ActionConstants.PARM_ARTIFACT))
+			programArg = (String) getMemento().get(ActionConstants.PARM_ARTIFACT);
 
 		manipulator.getLauncherData().addProgramArg(programArg);
 		return Status.OK_STATUS;
 	}
+
+	private static String resolveArtifactParam(Map parameters, Manipulator manipulator) throws CoreException {
+		IProfile profile = (IProfile) parameters.get(ActionConstants.PARM_PROFILE);
+		IInstallableUnit iu = (IInstallableUnit) parameters.get(EclipseTouchpoint.PARM_IU);
+		IArtifactKey[] artifacts = iu.getArtifacts();
+		if (artifacts == null || artifacts.length == 0)
+			throw new CoreException(Util.createError(NLS.bind(Messages.iu_contains_no_arifacts, iu)));
+
+		IArtifactKey artifactKey = artifacts[0];
+
+		File fileLocation = Util.getArtifactFile(artifactKey, profile);
+		if (fileLocation != null && fileLocation.exists())
+			return fileLocation.getAbsolutePath();
+
+		//the file has been removed so try a best effort approach
+		String[] programArgs = manipulator.getLauncherData().getProgramArgs();
+		if (programArgs != null) {
+			// look for an artifact file name that matches the canonical file form for the artifact key
+			String fileName = artifactKey.getId() + "_" + artifactKey.getVersion().toString(); //$NON-NLS-1$
+			for (int i = 0; i < programArgs.length; i++) {
+				if (programArgs[i].startsWith("-")) //$NON-NLS-1$
+					continue;
+				if (programArgs[i].indexOf(fileName) != -1)
+					return programArgs[i];
+			}
+		}
+		throw new CoreException(Util.createError(NLS.bind(Messages.artifact_file_not_found, artifactKey)));
+	}
 }
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/actions/SetStartLevelAction.java b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/actions/SetStartLevelAction.java
index 9bed130..44cfc03 100644
--- a/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/actions/SetStartLevelAction.java
+++ b/bundles/org.eclipse.equinox.p2.touchpoint.eclipse/src/org/eclipse/equinox/internal/p2/touchpoint/eclipse/actions/SetStartLevelAction.java
@@ -38,9 +38,8 @@ public class SetStartLevelAction extends ProvisioningAction {
 			return Util.createError(NLS.bind(Messages.iu_contains_no_arifacts, iu));
 
 		IArtifactKey artifactKey = artifacts[0];
+		// the bundleFile might be null here, that's OK.
 		File bundleFile = Util.getArtifactFile(artifactKey, profile);
-		if (bundleFile == null || !bundleFile.exists())
-			return Util.createError(NLS.bind(Messages.artifact_file_not_found, artifactKey));
 
 		String manifest = Util.getManifest(iu.getTouchpointData());
 		if (manifest == null)
@@ -75,9 +74,8 @@ public class SetStartLevelAction extends ProvisioningAction {
 			return Util.createError(NLS.bind(Messages.iu_contains_no_arifacts, iu));
 
 		IArtifactKey artifactKey = artifacts[0];
+		// the bundleFile might be null here, that's OK.
 		File bundleFile = Util.getArtifactFile(artifactKey, profile);
-		if (bundleFile == null || !bundleFile.exists())
-			return Util.createError(NLS.bind(Messages.artifact_file_not_found, artifactKey));
 
 		String manifest = Util.getManifest(iu.getTouchpointData());
 		if (manifest == null)

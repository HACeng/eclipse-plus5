commit fb5761a9722408c093ea9cce10361a5b7e90b1df
Author: Susan Franklin <sfranklin>
Date:   Mon May 5 20:11:24 2008 +0000

    Bug 222639 - [ui] - implementation of "drag bundle into eclipse"

0	1	bundles/org.eclipse.equinox.p2.ui.sdk/META-INF/MANIFEST.MF
0	9	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AddColocatedRepositoryDialog.java
2	3	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java
0	308	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/externalFiles/ExternalFileHandler.java
0	61	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/externalFiles/MetadataGeneratingURLValidator.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/RepositoryManipulatorDropTarget.java
1	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/URLValidator.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.ui.sdk/META-INF/MANIFEST.MF
index 29aa831..d5954dd 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/META-INF/MANIFEST.MF
@@ -32,7 +32,6 @@ Import-Package: org.eclipse.equinox.internal.p2.core.helpers,
  org.osgi.framework;version="1.3.0",
  org.osgi.service.packageadmin;version="1.2.0"
 Export-Package: org.eclipse.equinox.internal.p2.ui.sdk;x-internal:=true,
- org.eclipse.equinox.internal.p2.ui.sdk.externalFiles;x-internal:=true,
  org.eclipse.equinox.internal.p2.ui.sdk.prefs;x-internal:=true,
  org.eclipse.equinox.internal.p2.ui.sdk.updates;x-internal:=true,
  org.eclipse.equinox.internal.provisional.p2.ui.sdk;x-friends:="org.eclipse.pde.p2.ui"
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AddColocatedRepositoryDialog.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AddColocatedRepositoryDialog.java
index 0717942..f12f8df 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AddColocatedRepositoryDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AddColocatedRepositoryDialog.java
@@ -11,9 +11,7 @@
 package org.eclipse.equinox.internal.p2.ui.sdk;
 
 import java.net.URL;
-import org.eclipse.equinox.internal.p2.ui.sdk.externalFiles.MetadataGeneratingURLValidator;
 import org.eclipse.equinox.internal.provisional.p2.ui.dialogs.AddRepositoryDialog;
-import org.eclipse.equinox.internal.provisional.p2.ui.dialogs.URLValidator;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.AddColocatedRepositoryOperation;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningOperation;
 import org.eclipse.swt.widgets.Shell;
@@ -36,11 +34,4 @@ public class AddColocatedRepositoryDialog extends AddRepositoryDialog {
 	protected ProvisioningOperation getOperation(URL url) {
 		return new AddColocatedRepositoryOperation(getShell().getText(), url);
 	}
-
-	protected URLValidator createURLValidator() {
-		MetadataGeneratingURLValidator validator = new MetadataGeneratingURLValidator();
-		validator.setKnownRepositoriesFlag(repoFlag);
-		validator.setShell(getShell());
-		return validator;
-	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java
index 7e4dcf1..988f5c4 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/UpdateAndInstallDialog.java
@@ -13,7 +13,6 @@ package org.eclipse.equinox.internal.p2.ui.sdk;
 import java.net.MalformedURLException;
 import java.net.URL;
 import org.eclipse.core.runtime.jobs.*;
-import org.eclipse.equinox.internal.p2.ui.sdk.externalFiles.MetadataGeneratingURLValidator;
 import org.eclipse.equinox.internal.p2.ui.sdk.prefs.PreferenceConstants;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.engine.ProvisioningContext;
@@ -309,8 +308,8 @@ public class UpdateAndInstallDialog extends TrayDialog implements IViewMenuProvi
 				}
 
 				public URLValidator getURLValidator(Shell shell) {
-					MetadataGeneratingURLValidator validator = new MetadataGeneratingURLValidator();
-					validator.setShell(shell);
+					DefaultMetadataURLValidator validator = new DefaultMetadataURLValidator();
+					validator.setKnownRepositoriesFlag(IMetadataRepositoryManager.REPOSITORIES_NON_SYSTEM);
 					return validator;
 				}
 			};
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/externalFiles/ExternalFileHandler.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/externalFiles/ExternalFileHandler.java
deleted file mode 100644
index bf2affb..0000000
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/externalFiles/ExternalFileHandler.java
+++ /dev/null
@@ -1,308 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- ******************************************************************************/
-
-package org.eclipse.equinox.internal.p2.ui.sdk.externalFiles;
-
-import java.io.*;
-import java.net.MalformedURLException;
-import java.net.URL;
-import java.util.zip.ZipEntry;
-import java.util.zip.ZipInputStream;
-import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.internal.p2.core.helpers.FileUtils;
-import org.eclipse.equinox.internal.p2.ui.sdk.ProvSDKMessages;
-import org.eclipse.equinox.internal.p2.ui.sdk.ProvSDKUIActivator;
-import org.eclipse.equinox.internal.p2.ui.sdk.prefs.PreferenceConstants;
-import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
-import org.eclipse.equinox.internal.provisional.p2.metadata.generator.BundleDescriptionFactory;
-import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepository;
-import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
-import org.eclipse.equinox.internal.provisional.p2.ui.ProvisioningOperationRunner;
-import org.eclipse.equinox.internal.provisional.p2.ui.dialogs.URLValidator;
-import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
-import org.eclipse.jface.dialogs.IDialogConstants;
-import org.eclipse.jface.dialogs.MessageDialogWithToggle;
-import org.eclipse.osgi.service.datalocation.Location;
-import org.eclipse.osgi.service.resolver.PlatformAdmin;
-import org.eclipse.osgi.service.resolver.StateObjectFactory;
-import org.eclipse.osgi.util.NLS;
-import org.eclipse.swt.custom.BusyIndicator;
-import org.eclipse.swt.widgets.Shell;
-import org.eclipse.ui.statushandlers.StatusManager;
-import org.osgi.framework.ServiceReference;
-
-/**
- * Utility class that handles files or folders that are not recognized as valid
- * repositories.  Consults the user (and user preferences) to determine how to handle
- * the file.
- * 
- * @since 3.4
- *
- */
-public class ExternalFileHandler {
-
-	private static final String FILE = "file"; //$NON-NLS-1$
-	File file;
-	Shell shell;
-
-	// TODO
-	// copied from reconciler activator until there is API
-	// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=222456
-	private static final String DROPINS_DIRECTORY = "org.eclipse.equinox.p2.reconciler.dropins.directory"; //$NON-NLS-1$
-	private static final String OSGI_CONFIGURATION_AREA = "osgi.configuration.area"; //$NON-NLS-1$
-	private static final String DROPINS = "dropins"; //$NON-NLS-1$
-
-	public ExternalFileHandler(File file, Shell shell) {
-		this.file = file;
-		this.shell = shell;
-	}
-
-	public IStatus processFile(IStatus originalStatus) {
-		if (file == null)
-			return originalStatus;
-		if (isBundle()) {
-			return autoInstallBundle(originalStatus);
-		}
-		if (isArchive()) {
-			return generateRepoFromArchive(originalStatus);
-		}
-		return originalStatus;
-	}
-
-	IStatus generateRepoFromArchive(IStatus originalStatus) {
-		String generateRepoFromArchive = ProvSDKUIActivator.getDefault().getPreferenceStore().getString(PreferenceConstants.PREF_GENERATE_ARCHIVEREPOFOLDER);
-		if (MessageDialogWithToggle.NEVER.equals(generateRepoFromArchive))
-			return originalStatus;
-		final File targetLocation = getDefaultUnzipFolder();
-		if (targetLocation == null)
-			return originalStatus;
-		if (MessageDialogWithToggle.ALWAYS.equals(generateRepoFromArchive)) {
-			final IMetadataRepository[] repository = new IMetadataRepository[1];
-			BusyIndicator.showWhile(shell.getDisplay(), new Runnable() {
-				public void run() {
-					repository[0] = unzipAndGenerateRepository(file, targetLocation, null);
-				}
-			});
-			if (repository[0] != null)
-				return generateOKStatus();
-			return originalStatus;
-		}
-		MessageDialogWithToggle dialog = MessageDialogWithToggle.openYesNoCancelQuestion(shell, ProvSDKMessages.ProvSDKUIActivator_Question, NLS.bind(ProvSDKMessages.ExternalFileHandler_PromptForUnzip, file.getAbsolutePath()), null, false, ProvSDKUIActivator.getDefault().getPreferenceStore(), PreferenceConstants.PREF_GENERATE_ARCHIVEREPOFOLDER);
-
-		if (dialog.getReturnCode() == IDialogConstants.YES_ID) {
-			final IMetadataRepository[] repository = new IMetadataRepository[1];
-			BusyIndicator.showWhile(shell.getDisplay(), new Runnable() {
-				public void run() {
-					repository[0] = unzipAndGenerateRepository(file, targetLocation, null);
-				}
-			});
-			if (repository[0] != null)
-				return generateOKStatus();
-			return originalStatus;
-		} else if (dialog.getReturnCode() == IDialogConstants.CANCEL_ID) {
-			return Status.CANCEL_STATUS;
-		}
-		return originalStatus;
-	}
-
-	IStatus autoInstallBundle(IStatus originalStatus) {
-		try {
-			String autoInstallBundle = ProvSDKUIActivator.getDefault().getPreferenceStore().getString(PreferenceConstants.PREF_AUTO_INSTALL_BUNDLES);
-			if (MessageDialogWithToggle.NEVER.equals(autoInstallBundle))
-				return originalStatus;
-			if (MessageDialogWithToggle.ALWAYS.equals(autoInstallBundle)) {
-				if (copyToDropins(file))
-					return installOKStatus();
-				return originalStatus;
-			}
-			MessageDialogWithToggle dialog = MessageDialogWithToggle.openYesNoCancelQuestion(shell, ProvSDKMessages.ProvSDKUIActivator_Question, NLS.bind(ProvSDKMessages.ExternalFileHandler_PromptForInstallBundle, file.getAbsolutePath()), null, false, ProvSDKUIActivator.getDefault().getPreferenceStore(), PreferenceConstants.PREF_AUTO_INSTALL_BUNDLES);
-			if (dialog.getReturnCode() == IDialogConstants.YES_ID) {
-				if (copyToDropins(file))
-					return installOKStatus();
-			} else if (dialog.getReturnCode() == IDialogConstants.CANCEL_ID) {
-				return Status.CANCEL_STATUS;
-			}
-		} catch (FileNotFoundException e) {
-			// Shouldn't happen, but maybe user deleted it just after selecting it?
-			ProvUI.handleException(e, NLS.bind(ProvSDKMessages.ExternalFileHandler_ErrorCopyingFile, file.getAbsolutePath()), StatusManager.SHOW | StatusManager.LOG);
-		} catch (IOException e) {
-			ProvUI.handleException(e, NLS.bind(ProvSDKMessages.ExternalFileHandler_ErrorCopyingFile, file.getAbsolutePath()), StatusManager.SHOW | StatusManager.LOG);
-		}
-		return originalStatus;
-	}
-
-	boolean copyToDropins(File source) throws IOException {
-		boolean success = false;
-		File dropinsFolder = getDropInsDirectory();
-		if (!dropinsFolder.exists())
-			dropinsFolder.mkdirs();
-		File copiedBundle = new File(dropinsFolder, source.getName());
-		if (!copiedBundle.exists())
-			copiedBundle.createNewFile();
-		success = FileUtils.copyStream(new FileInputStream(file), true, new FileOutputStream(copiedBundle), true) > 0;
-		if (success)
-			ProvisioningOperationRunner.requestRestart(true);
-
-		return success;
-	}
-
-	IMetadataRepository unzipAndGenerateRepository(final File source, final File targetLocation, IProgressMonitor monitor) {
-		IMetadataRepository repository = null;
-		try {
-			FileUtils.unzipFile(source, targetLocation);
-			URL repoLocation = new URL(URLValidator.makeFileURLString(targetLocation.getAbsolutePath()));
-			// Loading this location should generate metadata for an extension location if the
-			// location is valid.  It's a bit too much magic...
-			// https://bugs.eclipse.org/bugs/show_bug.cgi?id=222251
-			repository = ProvisioningUtil.loadMetadataRepository(repoLocation, monitor);
-			// If we got a metadata repo, then also add a colocated artifact repo.
-			// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=223981
-			if (repository != null) {
-				ProvisioningUtil.addArtifactRepository(repoLocation);
-			}
-		} catch (IOException e) {
-			ProvUI.handleException(e, NLS.bind(ProvSDKMessages.ExternalFileHandler_ErrorExpandingArchive, source.getAbsolutePath()), StatusManager.SHOW | StatusManager.LOG);
-		} catch (ProvisionException e) {
-			ProvUI.handleException(e, NLS.bind(ProvSDKMessages.ExternalFileHandler_ErrorLoadingFromZipDirectory, targetLocation.getAbsolutePath()), StatusManager.SHOW | StatusManager.LOG);
-		}
-		return repository;
-	}
-
-	boolean isBundle() {
-		if (file == null)
-			return false;
-		BundleDescriptionFactory factory = getBundleDescriptionFactory();
-		if (factory == null)
-			return false;
-		return factory.getBundleDescription(file) != null;
-	}
-
-	private BundleDescriptionFactory getBundleDescriptionFactory() {
-
-		ServiceReference reference = ProvSDKUIActivator.getContext().getServiceReference(PlatformAdmin.class.getName());
-		if (reference == null)
-			return null;
-		PlatformAdmin platformAdmin = (PlatformAdmin) ProvSDKUIActivator.getContext().getService(reference);
-		if (platformAdmin == null)
-			return null;
-
-		try {
-			StateObjectFactory stateObjectFactory = platformAdmin.getFactory();
-			return new BundleDescriptionFactory(stateObjectFactory, null);
-		} finally {
-			ProvSDKUIActivator.getContext().ungetService(reference);
-		}
-	}
-
-	boolean isArchive() {
-		if (file == null)
-			return false;
-		InputStream in = null;
-		ZipInputStream zipStream = null;
-		try {
-			in = new FileInputStream(file);
-			zipStream = new ZipInputStream(new BufferedInputStream(in));
-			ZipEntry ze = zipStream.getNextEntry();
-			if (ze == null) {
-				in.close();
-				zipStream.close();
-				return false;
-			}
-		} catch (FileNotFoundException e) {
-			return false;
-		} catch (IOException e) {
-			return false;
-		} finally {
-			safeClose(in);
-			safeClose(zipStream);
-		}
-		return true;
-	}
-
-	void safeClose(InputStream stream) {
-		if (stream == null)
-			return;
-		try {
-			stream.close();
-		} catch (IOException e) {
-			// ignore
-		}
-	}
-
-	File getDefaultUnzipFolder() {
-		File unzipFolder;
-		// Unzip content in a peer to the drop-ins directory
-		String dropInsParent = getDropInsDirectory().getParent();
-		if (dropInsParent != null) {
-			unzipFolder = new File(dropInsParent, file.getName());
-			unzipFolder = makeUnusedFolder(unzipFolder);
-			if (unzipFolder != null)
-				return unzipFolder;
-		}
-		// For some reason we had a failure with the drop-ins directory
-		Location location = Platform.getConfigurationLocation();
-		if (location != null) {
-			URL configURL = location.getURL();
-			if (configURL != null && configURL.getProtocol().startsWith(FILE)) {
-				unzipFolder = new File(configURL.getFile(), file.getName());
-				unzipFolder = makeUnusedFolder(unzipFolder);
-				if (unzipFolder != null)
-					return unzipFolder;
-			}
-		}
-		return null;
-	}
-
-	File makeUnusedFolder(File suggestedFolder) {
-		if (!suggestedFolder.exists()) {
-			if (suggestedFolder.mkdir())
-				return suggestedFolder;
-		} else {
-			// TODO hack, need to figure out what to do generate a unique name that's not too long, a la version qualifiers
-			File generatedPath = new File(suggestedFolder.getParent(), suggestedFolder.getName() + new Long(System.currentTimeMillis()).toString());
-			if (!generatedPath.exists()) {
-				if (generatedPath.mkdir())
-					return generatedPath;
-			}
-		}
-		return null;
-	}
-
-	IStatus generateOKStatus() {
-		return new Status(IStatus.OK, ProvSDKUIActivator.PLUGIN_ID, URLValidator.REPO_AUTO_GENERATED, NLS.bind(ProvSDKMessages.ExternalFileHandler_RepositoryGeneratedOK, file.getAbsolutePath()), null);
-	}
-
-	IStatus installOKStatus() {
-		return new Status(IStatus.OK, ProvSDKUIActivator.PLUGIN_ID, URLValidator.ALTERNATE_ACTION_TAKEN, NLS.bind(ProvSDKMessages.ExternalFileHandler_BundleInstalledOK, getDropInsDirectory().getAbsolutePath()), null);
-	}
-
-	// TODO
-	// copied from reconciler activator
-	// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=222456
-	File getDropInsDirectory() {
-
-		String watchedDirectoryProperty = ProvSDKUIActivator.getContext().getProperty(DROPINS_DIRECTORY);
-		if (watchedDirectoryProperty != null) {
-			File folder = new File(watchedDirectoryProperty);
-			return folder;
-		}
-		try {
-			//TODO: a proper install area would be better. osgi.install.area is relative to the framework jar
-			URL baseURL = new URL(ProvSDKUIActivator.getContext().getProperty(OSGI_CONFIGURATION_AREA));
-			URL folderURL = new URL(baseURL, "../" + DROPINS); //$NON-NLS-1$
-			File folder = new File(folderURL.getPath());
-			return folder;
-		} catch (MalformedURLException e) {
-			e.printStackTrace();
-		}
-		return null;
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/externalFiles/MetadataGeneratingURLValidator.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/externalFiles/MetadataGeneratingURLValidator.java
deleted file mode 100644
index e765ccb..0000000
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/externalFiles/MetadataGeneratingURLValidator.java
+++ /dev/null
@@ -1,61 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- ******************************************************************************/
-
-package org.eclipse.equinox.internal.p2.ui.sdk.externalFiles;
-
-import java.io.File;
-import java.net.URL;
-import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.internal.provisional.p2.ui.dialogs.DefaultMetadataURLValidator;
-import org.eclipse.equinox.internal.provisional.p2.ui.dialogs.URLValidator;
-import org.eclipse.swt.widgets.Shell;
-import org.eclipse.ui.PlatformUI;
-
-/**
- * @since 3.4
- *
- */
-public class MetadataGeneratingURLValidator extends DefaultMetadataURLValidator {
-
-	Shell shell;
-
-	public void setShell(Shell shell) {
-		this.shell = shell;
-	}
-
-	protected IStatus validateRepositoryURL(URL location, boolean contactRepositories, IProgressMonitor monitor) {
-		IStatus status = super.validateRepositoryURL(location, contactRepositories, monitor);
-
-		// If it's already OK or the problem was a local format, nothing to do here.
-		if (status.isOK() || status.getCode() == URLValidator.LOCAL_VALIDATION_ERROR)
-			return status;
-
-		if (shell == null)
-			shell = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
-
-		// If it was set up with jar protocol, now convert it back to file.
-		String path = location.toExternalForm();
-		if (path.startsWith(JAR_PATH_PREFIX))
-			path = path.substring(JAR_PATH_PREFIX.length());
-		if (path.endsWith(JAR_PATH_SUFFIX))
-			path = path.substring(0, path.length() - JAR_PATH_SUFFIX.length());
-		if (!path.startsWith(FILE_PROTOCOL_PREFIX))
-			return status;
-		final File file = new File(path.substring(FILE_PROTOCOL_PREFIX.length()));
-
-		IStatus externalFileStatus = new ExternalFileHandler(file, shell).processFile(status);
-		if (externalFileStatus.getCode() == REPO_AUTO_GENERATED || externalFileStatus.getCode() == ALTERNATE_ACTION_TAKEN) {
-			return Status.CANCEL_STATUS;
-		}
-		return externalFileStatus;
-	}
-
-}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/RepositoryManipulatorDropTarget.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/RepositoryManipulatorDropTarget.java
index 0249bbb..eac3c05 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/RepositoryManipulatorDropTarget.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/RepositoryManipulatorDropTarget.java
@@ -50,12 +50,12 @@ public class RepositoryManipulatorDropTarget extends URLDropAdapter {
 		Job job = new WorkbenchJob(NLS.bind(ProvUIMessages.RepositoryManipulatorDropTarget_DragAndDropJobLabel, manipulator.getAddOperationLabel())) {
 
 			public IStatus runInUIThread(IProgressMonitor monitor) {
-				IStatus status = manipulator.getURLValidator(control.getShell()).validateRepositoryURL(url[0], true, monitor);
+				IStatus status = manipulator.getURLValidator(control.getShell()).validateRepositoryURL(url[0], false, monitor);
 				if (status.isOK()) {
 					ProvisioningOperation addOperation = manipulator.getAddOperation(url[0]);
 					ProvisioningOperationRunner.schedule(addOperation, control.getShell(), StatusManager.SHOW | StatusManager.LOG);
 					event.detail = DND.DROP_LINK;
-				} else if (status.getCode() == URLValidator.REPO_AUTO_GENERATED || status.getCode() == URLValidator.ALTERNATE_ACTION_TAKEN) {
+				} else if (status.getCode() == URLValidator.ALTERNATE_ACTION_TAKEN) {
 					event.detail = DND.DROP_COPY;
 				} else if (status.getSeverity() == IStatus.CANCEL) {
 					event.detail = DND.DROP_NONE;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/URLValidator.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/URLValidator.java
index 89f290f..1ed13c4 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/URLValidator.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/dialogs/URLValidator.java
@@ -35,8 +35,7 @@ public abstract class URLValidator {
 	public static final String ZIP_EXTENSION = ".zip"; //$NON-NLS-1$
 
 	public static final int LOCAL_VALIDATION_ERROR = 3000;
-	public static final int REPO_AUTO_GENERATED = 3001;
-	public static final int ALTERNATE_ACTION_TAKEN = 3002;
+	public static final int ALTERNATE_ACTION_TAKEN = 3001;
 
 	public static Status getInvalidURLStatus(String urlText) {
 		return new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, LOCAL_VALIDATION_ERROR, NLS.bind(ProvUIMessages.URLValidator_UnrecognizedURL, urlText), null);

commit db59f71b9aefdfc294228f96b3fc7b398d82af14
Author: Andrew Niefer <aniefer>
Date:   Wed Feb 13 19:23:23 2008 +0000

    bug 218639 - product launcher requirements/capabilities

21	19	bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/EquinoxBundlesState.java
8	2	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java
37	18	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
2	0	bundles/org.eclipse.equinox.p2.metadata.generator/src_ant/org/eclipse/equinox/internal/p2/metadata/generator/ant/GeneratorTask.java
diff --git a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/EquinoxBundlesState.java b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/EquinoxBundlesState.java
index 929fd82..b5583fd 100644
--- a/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/EquinoxBundlesState.java
+++ b/bundles/org.eclipse.equinox.frameworkadmin.equinox/src/org/eclipse/equinox/internal/frameworkadmin/equinox/EquinoxBundlesState.java
@@ -592,31 +592,33 @@ public class EquinoxBundlesState implements BundlesState {
 		BundleDescription[] currentInstalledBundles = state.getBundles();
 		String newLocation = FileUtils.getRealLocation(manipulator, bInfo.getLocation(), true);
 		Dictionary manifest = Utils.getOSGiManifest(newLocation);
-		if (manifest != null) {
-			String newSymbolicName = (String) manifest.get(Constants.BUNDLE_SYMBOLICNAME);
-			int position = newSymbolicName.indexOf(";");
-			if (position >= 0)
-				newSymbolicName = newSymbolicName.substring(0, position).trim();
-			String newVersion = (String) manifest.get(Constants.BUNDLE_VERSION);
-			for (int i = 0; i < currentInstalledBundles.length; i++) {
-				String location = FileUtils.getRealLocation(manipulator, currentInstalledBundles[i].getLocation(), true);
-				if (newLocation.equals(location)) {
-					found = true;
-					break;
-				}
-				String symbolicName = currentInstalledBundles[i].getSymbolicName();
-				String version = currentInstalledBundles[i].getVersion().toString();
-				if (newSymbolicName.equals(symbolicName) && newVersion.equals(version)) {
-					found = true;
-					break;
-				}
+		if (manifest == null)
+			return;
+
+		String newSymbolicName = (String) manifest.get(Constants.BUNDLE_SYMBOLICNAME);
+		int position = newSymbolicName.indexOf(";"); //$NON-NLS-1$
+		if (position >= 0)
+			newSymbolicName = newSymbolicName.substring(0, position).trim();
+		String newVersion = (String) manifest.get(Constants.BUNDLE_VERSION);
+		for (int i = 0; i < currentInstalledBundles.length; i++) {
+			String location = FileUtils.getRealLocation(manipulator, currentInstalledBundles[i].getLocation(), true);
+			if (newLocation.equals(location)) {
+				found = true;
+				break;
+			}
+			String symbolicName = currentInstalledBundles[i].getSymbolicName();
+			String version = currentInstalledBundles[i].getVersion().toString();
+			if (newSymbolicName.equals(symbolicName) && newVersion.equals(version)) {
+				found = true;
+				break;
 			}
 		}
+
 		if (!found) {
 			BundleDescription newBundleDescription = null;
 			try {
 				bInfo.setBundleId(++maxId);
-				newBundleDescription = soFactory.createBundleDescription(state, Utils.getOSGiManifest(newLocation), newLocation, bInfo.getBundleId());
+				newBundleDescription = soFactory.createBundleDescription(state, manifest, newLocation, bInfo.getBundleId());
 				state.addBundle(newBundleDescription);
 				manipulator.getConfigData().addBundle(bInfo);
 			} catch (BundleException e) {
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java
index b20c4ea..5ec58ff 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/EclipseGeneratorApplication.java
@@ -24,7 +24,8 @@ import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifact
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.core.eventbus.ProvisioningEventBus;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
-import org.eclipse.equinox.internal.provisional.p2.metadata.generator.*;
+import org.eclipse.equinox.internal.provisional.p2.metadata.generator.EclipseInstallGeneratorInfoProvider;
+import org.eclipse.equinox.internal.provisional.p2.metadata.generator.Generator;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepositoryManager;
 import org.eclipse.osgi.util.NLS;
@@ -50,6 +51,7 @@ public class EclipseGeneratorApplication implements IApplication {
 	private ProvisioningEventBus bus;
 	private ServiceRegistration registrationBus;
 	private Generator.GeneratorResult incrementalResult = null;
+	private boolean generateRootIU = true;
 	private String metadataLocation;
 	private String metadataRepoName;
 	private String artifactLocation;
@@ -324,7 +326,7 @@ public class EclipseGeneratorApplication implements IApplication {
 
 		if (incrementalResult != null)
 			generator.setIncrementalResult(incrementalResult);
-
+		generator.setGenerateRootIU(generateRootIU);
 		IStatus result = generator.generate();
 
 		incrementalResult = null;
@@ -384,4 +386,8 @@ public class EclipseGeneratorApplication implements IApplication {
 	public void setIncrementalResult(Generator.GeneratorResult ius) {
 		this.incrementalResult = ius;
 	}
+
+	public void setGeneratorRootIU(boolean b) {
+		this.generateRootIU = b;
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
index 326d1f4..d978393 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
@@ -85,6 +85,8 @@ public class Generator {
 	private final IGeneratorInfo info;
 
 	private GeneratorResult incrementalResult = null;
+	private ProductFile productFile = null;
+	private boolean generateRootIU = true;
 
 	/**
 	 * Short term fix to ensure IUs that have no corresponding category are not lost.
@@ -131,39 +133,33 @@ public class Generator {
 		return (iu.getId().indexOf(".feature.default") > 0 ? true : false); //$NON-NLS-1$
 	}
 
-	protected IInstallableUnit createProductIU(String productFile) {
-		ProductFile product = null;
-		try {
-			product = new ProductFile(productFile, null);
-		} catch (Exception e) {
-			e.printStackTrace();
-			return null;
-		}
-
+	protected IInstallableUnit createProductIU() {
 		GeneratorResult result = new GeneratorResult();
-		List children = product.useFeatures() ? product.getFeatures() : product.getPlugins();
+		List children = productFile.useFeatures() ? productFile.getFeatures() : productFile.getPlugins();
 		for (Iterator iterator = children.iterator(); iterator.hasNext();) {
 			Query query = new InstallableUnitQuery((String) iterator.next());
 			Collector collector = info.getMetadataRepository().query(query, new Collector(), null);
 			// product file doesn't say anything about versions, don't know how to choose if there is more than one
 			if (collector.size() > 0) {
-				result.nonRootIUs.add(collector.iterator().next());
+				result.rootIUs.add(collector.iterator().next());
 			}
 		}
 
 		//TODO get a real version
 		String version = info.getRootVersion() != null ? info.getRootVersion() : "0.0.0"; //$NON-NLS-1$
-		InstallableUnitDescription root = createTopLevelIUDescription(result, product.getId(), version, product.getProductName());
+		ArrayList requires = new ArrayList(1);
+		requires.add(MetadataFactory.createRequiredCapability(productFile.getId(), productFile.getId() + ".launcher", VersionRange.emptyRange, null, false, false)); //$NON-NLS-1$
+		InstallableUnitDescription root = createTopLevelIUDescription(result, productFile.getId(), version, productFile.getProductName(), requires);
 		return MetadataFactory.createInstallableUnit(root);
 	}
 
 	protected IInstallableUnit createTopLevelIU(GeneratorResult result, String configurationIdentification, String configurationVersion) {
 		// TODO, bit of a hack but for now set the name of the IU to the ID.
-		InstallableUnitDescription root = createTopLevelIUDescription(result, configurationIdentification, configurationVersion, configurationIdentification);
+		InstallableUnitDescription root = createTopLevelIUDescription(result, configurationIdentification, configurationVersion, configurationIdentification, null);
 		return MetadataFactory.createInstallableUnit(root);
 	}
 
-	protected InstallableUnitDescription createTopLevelIUDescription(GeneratorResult result, String configurationIdentification, String configurationVersion, String configurationName) {
+	protected InstallableUnitDescription createTopLevelIUDescription(GeneratorResult result, String configurationIdentification, String configurationVersion, String configurationName, List requires) {
 		InstallableUnitDescription root = new MetadataFactory.InstallableUnitDescription();
 		root.setSingleton(true);
 		root.setId(configurationIdentification);
@@ -177,6 +173,8 @@ public class Generator {
 			boolean isOptional = checkOptionalRootDependency(iu);
 			reqsConfigurationUnits.add(MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, iu.getId(), range, iu.getFilter(), isOptional, false));
 		}
+		if (requires != null)
+			reqsConfigurationUnits.addAll(requires);
 		root.setRequiredCapabilities((RequiredCapability[]) reqsConfigurationUnits.toArray(new RequiredCapability[reqsConfigurationUnits.size()]));
 		root.setApplicabilityFilter(""); //$NON-NLS-1$
 		root.setArtifacts(new IArtifactKey[0]);
@@ -237,6 +235,14 @@ public class Generator {
 	public IStatus generate() {
 		GeneratorResult result = incrementalResult != null ? incrementalResult : new GeneratorResult();
 
+		if (info.getProductFile() != null) {
+			try {
+				productFile = new ProductFile(info.getProductFile(), null);
+			} catch (Exception e) {
+				//TODO
+			}
+		}
+
 		Feature[] features = getFeatures(info.getFeaturesLocation());
 		generateFeatureIUs(features, result, info.getArtifactRepository());
 
@@ -250,7 +256,8 @@ public class Generator {
 		if (info.addDefaultIUs())
 			generateDefaultConfigIU(result.rootIUs);
 
-		generateRootIU(result, info.getRootId(), info.getRootVersion());
+		if (generateRootIU)
+			generateRootIU(result, info.getRootId(), info.getRootVersion());
 
 		//		persistence.setMappingRules(info.getMappingRules() == null ? defaultMappingRules : info.getMappingRules());
 		//		if (info.publishArtifacts() || info.publishArtifactRepository()) {
@@ -438,7 +445,9 @@ public class Generator {
 		//Create the IU
 		InstallableUnitDescription iu = new MetadataFactory.InstallableUnitDescription();
 		iu.setSingleton(true);
-		String launcherId = "org.eclipse.launcher." + ws + '.' + os + '.' + arch; //$NON-NLS-1$
+		String productNamespace = (productFile != null) ? productFile.getId() : "org.eclipse"; //$NON-NLS-1$
+		String launcherIdPrefix = productNamespace + ".launcher"; //$NON-NLS-1$
+		String launcherId = launcherIdPrefix + '.' + ws + '.' + os + '.' + arch;
 		iu.setId(launcherId);
 		Version launcherVersion = new Version(version);
 		iu.setVersion(launcherVersion);
@@ -448,7 +457,13 @@ public class Generator {
 		IArtifactKey key = MetadataGeneratorHelper.createLauncherArtifactKey(launcherId, launcherVersion);
 		iu.setArtifacts(new IArtifactKey[] {key});
 		iu.setTouchpointType(MetadataGeneratorHelper.TOUCHPOINT_NATIVE);
-		iu.setCapabilities(new ProvidedCapability[] {MetadataGeneratorHelper.createSelfCapability(launcherId, launcherVersion)});
+		ProvidedCapability launcherCapability = MetadataFactory.createProvidedCapability(productNamespace, launcherIdPrefix, new Version("1.0.0")); //$NON-NLS-1$
+		iu.setCapabilities(new ProvidedCapability[] {MetadataGeneratorHelper.createSelfCapability(launcherId, launcherVersion), launcherCapability});
+
+		String launcherFragment = "org.eclipse.equinox.launcher." + ws + '.' + os; //$NON-NLS-1$
+		if (!Constants.OS_MACOSX.equals(os))
+			launcherFragment += '.' + arch;
+		iu.setRequiredCapabilities(new RequiredCapability[] {MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, launcherFragment, VersionRange.emptyRange, filter, false, false)});
 		result.rootIUs.add(MetadataFactory.createInstallableUnit(iu));
 
 		//Create the CU
@@ -565,7 +580,7 @@ public class Generator {
 		IInstallableUnit rootIU = null;
 
 		if (info.getProductFile() != null)
-			rootIU = createProductIU(info.getProductFile());
+			rootIU = createProductIU();
 		else if (rootIUId != null)
 			rootIU = createTopLevelIU(result, rootIUId, rootIUVersion);
 
@@ -755,4 +770,8 @@ public class Generator {
 			}
 		}
 	}
+
+	public void setGenerateRootIU(boolean generateRootIU) {
+		this.generateRootIU = generateRootIU;
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src_ant/org/eclipse/equinox/internal/p2/metadata/generator/ant/GeneratorTask.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src_ant/org/eclipse/equinox/internal/p2/metadata/generator/ant/GeneratorTask.java
index a8e9318..5db0260 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src_ant/org/eclipse/equinox/internal/p2/metadata/generator/ant/GeneratorTask.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src_ant/org/eclipse/equinox/internal/p2/metadata/generator/ant/GeneratorTask.java
@@ -38,8 +38,10 @@ public class GeneratorTask extends Task {
 				if (result == null)
 					result = new GeneratorResult();
 				generator.setIncrementalResult(result);
+				generator.setGeneratorRootIU(false);
 			} else if ("final".equals(mode) && result != null) { //$NON-NLS-1$
 				generator.setIncrementalResult(result);
+				generator.setGeneratorRootIU(true);
 			}
 
 			generator.run(provider);
commit e0beec2b0992ac1377d2c22f5bae4aac5bcc1c51
Author: Andrew Niefer <aniefer>
Date:   Wed Feb 13 23:06:40 2008 +0000

    bug 218639 - product IU requirements and capabilities

1	2	bundles/org.eclipse.equinox.p2.metadata.generator/META-INF/MANIFEST.MF
71	0	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/ProductQuery.java
26	30	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.metadata.generator/META-INF/MANIFEST.MF
index 2793b7a..b378834 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/META-INF/MANIFEST.MF
@@ -7,8 +7,7 @@ Bundle-Localization: plugin
 Bundle-Version: 0.1.0.qualifier
 Require-Bundle: org.eclipse.equinox.p2.core,
  org.eclipse.osgi,
- org.eclipse.equinox.common,
- org.eclipse.equinox.p2.metadata
+ org.eclipse.equinox.common
 Import-Package: javax.xml.parsers,
  org.eclipse.equinox.app;version="1.0.0",
  org.eclipse.equinox.internal.p2.artifact.repository,
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/ProductQuery.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/ProductQuery.java
new file mode 100644
index 0000000..ba856a3
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/p2/metadata/generator/ProductQuery.java
@@ -0,0 +1,71 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.metadata.generator;
+
+import java.util.*;
+import org.eclipse.equinox.internal.p2.metadata.generator.features.ProductFile;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.query.Query;
+import org.eclipse.osgi.service.resolver.VersionRange;
+
+public class ProductQuery extends Query {
+	private static final String EQUINOX_LAUNCHER = "org.eclipse.equinox.launcher"; //$NON-NLS-1$
+
+	private final ProductFile product;
+	private final String flavor;
+	private final String launcherCUPrefix;
+	private final Map children = new HashMap();
+
+	public ProductQuery(ProductFile product, String flavor) {
+		this.product = product;
+		this.flavor = flavor;
+		this.launcherCUPrefix = flavor + product.getId() + ".launcher"; //$NON-NLS-1$
+		initialize();
+	}
+
+	private void initialize() {
+		List contents = product.useFeatures() ? product.getFeatures() : product.getPlugins();
+		for (Iterator iterator = contents.iterator(); iterator.hasNext();) {
+			String item = (String) iterator.next();
+			children.put(item, VersionRange.emptyRange);
+			children.put(flavor + item, VersionRange.emptyRange); //CUs
+		}
+
+		//also add the launcher.jar
+		if (!children.containsKey(EQUINOX_LAUNCHER)) {
+			children.put(EQUINOX_LAUNCHER, VersionRange.emptyRange);
+			children.put(flavor + EQUINOX_LAUNCHER, VersionRange.emptyRange);
+		}
+	}
+
+	/* (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.p2.query.Query#isMatch(java.lang.Object)
+	 */
+	public boolean isMatch(Object object) {
+		if (!(object instanceof IInstallableUnit))
+			return false;
+
+		IInstallableUnit candidate = (IInstallableUnit) object;
+		VersionRange range = (VersionRange) children.get(candidate.getId());
+		if (range != null) {
+			return range.isIncluded(candidate.getVersion());
+		}
+
+		//also include the launcher CU fragments as a workaround to bug 218890
+		if (candidate.getId().startsWith(launcherCUPrefix))
+			return true;
+		//and include the launcher fragment CUs
+		if (candidate.getId().startsWith(flavor + EQUINOX_LAUNCHER))
+			return true;
+
+		return false;
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
index d978393..403c933 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/internal/provisional/p2/metadata/generator/Generator.java
@@ -14,7 +14,7 @@ import java.util.*;
 import java.util.Map.Entry;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.*;
-import org.eclipse.equinox.internal.p2.metadata.generator.Activator;
+import org.eclipse.equinox.internal.p2.metadata.generator.*;
 import org.eclipse.equinox.internal.p2.metadata.generator.Messages;
 import org.eclipse.equinox.internal.p2.metadata.generator.features.*;
 import org.eclipse.equinox.internal.provisional.frameworkadmin.*;
@@ -24,10 +24,8 @@ import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
 import org.eclipse.equinox.internal.provisional.p2.metadata.*;
 import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory.InstallableUnitDescription;
 import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory.InstallableUnitFragmentDescription;
-import org.eclipse.equinox.internal.provisional.p2.metadata.query.InstallableUnitQuery;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.internal.provisional.p2.query.Collector;
-import org.eclipse.equinox.internal.provisional.p2.query.Query;
 import org.eclipse.osgi.service.environment.Constants;
 import org.eclipse.osgi.service.resolver.*;
 import org.eclipse.osgi.util.NLS;
@@ -135,20 +133,17 @@ public class Generator {
 
 	protected IInstallableUnit createProductIU() {
 		GeneratorResult result = new GeneratorResult();
-		List children = productFile.useFeatures() ? productFile.getFeatures() : productFile.getPlugins();
-		for (Iterator iterator = children.iterator(); iterator.hasNext();) {
-			Query query = new InstallableUnitQuery((String) iterator.next());
-			Collector collector = info.getMetadataRepository().query(query, new Collector(), null);
-			// product file doesn't say anything about versions, don't know how to choose if there is more than one
-			if (collector.size() > 0) {
-				result.rootIUs.add(collector.iterator().next());
-			}
+
+		ProductQuery query = new ProductQuery(productFile, info.getFlavor());
+		Collector collector = info.getMetadataRepository().query(query, new Collector(), null);
+		for (Iterator iterator = collector.iterator(); iterator.hasNext();) {
+			result.rootIUs.add(iterator.next());
 		}
 
 		//TODO get a real version
 		String version = info.getRootVersion() != null ? info.getRootVersion() : "0.0.0"; //$NON-NLS-1$
 		ArrayList requires = new ArrayList(1);
-		requires.add(MetadataFactory.createRequiredCapability(productFile.getId(), productFile.getId() + ".launcher", VersionRange.emptyRange, null, false, false)); //$NON-NLS-1$
+		requires.add(MetadataFactory.createRequiredCapability(productFile.getId(), productFile.getId() + ".launcher", VersionRange.emptyRange, null, false, true)); //$NON-NLS-1$
 		InstallableUnitDescription root = createTopLevelIUDescription(result, productFile.getId(), version, productFile.getProductName(), requires);
 		return MetadataFactory.createInstallableUnit(root);
 	}
@@ -312,25 +307,25 @@ public class Generator {
 	}
 
 	protected void generateConfigIUs(BundleInfo[] infos, GeneratorResult result) {
-		if (infos == null)
-			return;
-		for (int i = 0; i < infos.length; i++) {
-			GeneratorBundleInfo bundle = new GeneratorBundleInfo(infos[i]);
-			if (bundle.getSymbolicName().equals(ORG_ECLIPSE_UPDATE_CONFIGURATOR)) {
-				bundle.setStartLevel(BundleInfo.NO_LEVEL);
-				bundle.setMarkedAsStarted(false);
-				bundle.setSpecialConfigCommands("addJvmArg(jvmArg:-Dorg.eclipse.update.reconcile=false);" + //$NON-NLS-1$
-						"addJvmArg(jvmArg:-Dorg.eclipse.p2.update.compatibility=false);"); //$NON-NLS-1$
-				bundle.setSpecialUnconfigCommands("removeJvmArg(jvmArg:-Dorg.eclipse.update.reconcile=false);" + //$NON-NLS-1$
-						"removeJvmArg(jvmArg:-Dorg.eclipse.p2.update.compatibility=false);"); //$NON-NLS-1$
-			}
-			if (bundle.getSymbolicName().equals(ORG_ECLIPSE_EQUINOX_SIMPLECONFIGURATOR)) {
-				bundle.setSpecialConfigCommands("addJvmArg(jvmArg:-Dorg.eclipse.equinox.simpleconfigurator.useReference=true);"); //$NON-NLS-1$
-				bundle.setSpecialUnconfigCommands("removeJvmArg(jvmArg:-Dorg.eclipse.equinox.simpleconfigurator.useReference=true);"); //$NON-NLS-1$
+		if (infos != null) {
+			for (int i = 0; i < infos.length; i++) {
+				GeneratorBundleInfo bundle = new GeneratorBundleInfo(infos[i]);
+				if (bundle.getSymbolicName().equals(ORG_ECLIPSE_UPDATE_CONFIGURATOR)) {
+					bundle.setStartLevel(BundleInfo.NO_LEVEL);
+					bundle.setMarkedAsStarted(false);
+					bundle.setSpecialConfigCommands("addJvmArg(jvmArg:-Dorg.eclipse.update.reconcile=false);" + //$NON-NLS-1$
+							"addJvmArg(jvmArg:-Dorg.eclipse.p2.update.compatibility=false);"); //$NON-NLS-1$
+					bundle.setSpecialUnconfigCommands("removeJvmArg(jvmArg:-Dorg.eclipse.update.reconcile=false);" + //$NON-NLS-1$
+							"removeJvmArg(jvmArg:-Dorg.eclipse.p2.update.compatibility=false);"); //$NON-NLS-1$
+				}
+				if (bundle.getSymbolicName().equals(ORG_ECLIPSE_EQUINOX_SIMPLECONFIGURATOR)) {
+					bundle.setSpecialConfigCommands("addJvmArg(jvmArg:-Dorg.eclipse.equinox.simpleconfigurator.useReference=true);"); //$NON-NLS-1$
+					bundle.setSpecialUnconfigCommands("removeJvmArg(jvmArg:-Dorg.eclipse.equinox.simpleconfigurator.useReference=true);"); //$NON-NLS-1$
+				}
+				IInstallableUnit cu = MetadataGeneratorHelper.createBundleConfigurationUnit(bundle.getSymbolicName(), new Version(bundle.getVersion()), false, bundle, info.getFlavor(), null);
+				if (cu != null)
+					result.rootIUs.add(cu);
 			}
-			IInstallableUnit cu = MetadataGeneratorHelper.createBundleConfigurationUnit(bundle.getSymbolicName(), new Version(bundle.getVersion()), false, bundle, info.getFlavor(), null);
-			if (cu != null)
-				result.rootIUs.add(cu);
 		}
 
 		if (info.addDefaultIUs()) {
@@ -473,6 +468,7 @@ public class Generator {
 		cu.setVersion(launcherVersion);
 		cu.setFilter(filter);
 		cu.setHost(launcherId, new VersionRange(launcherVersion, true, launcherVersion, true));
+		//TODO bug 218890, would like the fragment to provide the launcher capability as well, but can't right now.
 		cu.setCapabilities(new ProvidedCapability[] {IInstallableUnitFragment.FRAGMENT_CAPABILITY, MetadataGeneratorHelper.createSelfCapability(configUnitId, launcherVersion)});
 
 		mungeLauncherFileNames(root);

commit 8781d31a1c12b840dd856a6701dbdade5fa919b4
Author: John Arthorne <johna>
Date:   Thu Nov 22 23:09:05 2007 +0000

    Bug 210450 [prov] Forwards compatibility of file formats

5	0	bundles/org.eclipse.equinox.p2.core/.options
1	0	bundles/org.eclipse.equinox.p2.core/META-INF/MANIFEST.MF
52	0	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/Tracing.java
18	27	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/XMLParser.java
3	16	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/XMLWriter.java
7	31	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java
diff --git a/bundles/org.eclipse.equinox.p2.core/.options b/bundles/org.eclipse.equinox.p2.core/.options
new file mode 100644
index 0000000..6138e6d
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.core/.options
@@ -0,0 +1,5 @@
+#Turn on debugging for p2
+org.eclipse.equinox.p2.core/debug=false
+
+#Detailed debugging information while parsing p2 data files
+org.eclipse.equinox.p2.core/persistence/parsing=false
diff --git a/bundles/org.eclipse.equinox.p2.core/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.core/META-INF/MANIFEST.MF
index 7869520..a552ccf 100644
--- a/bundles/org.eclipse.equinox.p2.core/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.core/META-INF/MANIFEST.MF
@@ -10,6 +10,7 @@ Import-Package: org.eclipse.core.runtime.adaptor,
  org.eclipse.osgi.framework.log;version="1.0.0",
  org.eclipse.osgi.internal.resolver,
  org.eclipse.osgi.service.datalocation;version="1.0.0",
+ org.eclipse.osgi.service.debug;version="1.0.0",
  org.eclipse.osgi.service.resolver;version="1.1.0",
  org.eclipse.osgi.util;version="1.0.0",
  org.osgi.framework;version="1.3.0",
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/Tracing.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/Tracing.java
new file mode 100644
index 0000000..3c84400
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/core/Tracing.java
@@ -0,0 +1,52 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.core;
+
+import java.util.Date;
+import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
+import org.eclipse.osgi.service.debug.DebugOptions;
+
+/**
+ * Manages debug tracing options and provides convenience methods for printing
+ * debug statements.
+ */
+public class Tracing {
+	//master p2 debug flag
+	public static boolean DEBUG = false;
+
+	//debug constants
+	public static boolean DEBUG_PARSING = false;
+
+	static {
+		DebugOptions options = (DebugOptions) ServiceHelper.getService(Activator.context, DebugOptions.class.getName());
+		if (options != null) {
+			DEBUG = options.getBooleanOption(Activator.ID + "/debug", false); //$NON-NLS-1$
+			if (DEBUG) {
+				DEBUG_PARSING = options.getBooleanOption(Activator.ID + "/persistence/parsing", false); //$NON-NLS-1$
+			}
+		}
+	}
+
+	/**
+	 * Prints a debug message on stdout. Callers should first ensure their specific 
+	 * debug option is enabled.
+	 */
+	public static void debug(String message) {
+		StringBuffer buffer = new StringBuffer();
+		buffer.append("[p2] "); //$NON-NLS-1$
+		buffer.append(new Date(System.currentTimeMillis()));
+		buffer.append(" - ["); //$NON-NLS-1$
+		buffer.append(Thread.currentThread().getName());
+		buffer.append("] "); //$NON-NLS-1$
+		buffer.append(message);
+		System.out.println(buffer.toString());
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/XMLParser.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/XMLParser.java
index e57ed5a..3e736a0 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/XMLParser.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/XMLParser.java
@@ -15,6 +15,7 @@ import java.util.StringTokenizer;
 import javax.xml.parsers.*;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.Activator;
+import org.eclipse.equinox.internal.p2.core.Tracing;
 import org.eclipse.equinox.internal.p2.core.helpers.OrderedProperties;
 import org.eclipse.osgi.service.resolver.VersionRange;
 import org.eclipse.osgi.util.NLS;
@@ -26,10 +27,6 @@ import org.xml.sax.helpers.DefaultHandler;
 
 public abstract class XMLParser extends DefaultHandler implements XMLConstants {
 
-	// TODO: support logging
-	// Get the logger associated with the class.
-	// protected abstract Logger getLogger();
-
 	// Get the root object that is being parsed.
 	protected abstract Object getRootObject();
 
@@ -482,16 +479,11 @@ public abstract class XMLParser extends DefaultHandler implements XMLConstants {
 	}
 
 	public void error(SAXParseException ex) {
-		addError(ex);
-	}
-
-	public void fatalError(SAXParseException ex) throws SAXException {
-		addError(ex);
-		throw ex;
+		addError(IStatus.WARNING, ex.getMessage(), ex);
 	}
 
-	protected void addError(SAXParseException ex) {
-		addError(ex.getMessage());
+	public void fatalError(SAXParseException ex) {
+		addError(IStatus.ERROR, ex.getMessage(), ex);
 	}
 
 	protected String getErrorPrefix() {
@@ -502,12 +494,10 @@ public abstract class XMLParser extends DefaultHandler implements XMLConstants {
 		return null;
 	}
 
-	// Log an error message and add it to the current status.
-	//
-	// TODO: should we have a flag to throw an exception on error,
-	//		 so parsing can be aborted?
-	// TODO: flag to produce warnings instead of errors? etc. 
-	public final void addError(String msg) {
+	/**
+	 * Collects an error or warning that occurred during parsing.
+	 */
+	public final void addError(int severity, String msg, Throwable exception) {
 		int line = 0;
 		int column = 0;
 		String key = msg;
@@ -538,9 +528,7 @@ public abstract class XMLParser extends DefaultHandler implements XMLConstants {
 		if (suffix != null) {
 			errMsg = errMsg + suffix;
 		}
-		// TODO: support logging
-		// getLogger().warning(errMsg);
-		IStatus currStatus = new Status(IStatus.ERROR, Activator.ID, errMsg);
+		IStatus currStatus = new Status(severity, Activator.ID, errMsg, exception);
 		if (this.status == null) {
 			this.status = new MultiStatus(bundleId, IStatus.OK, new IStatus[] {currStatus}, getErrorMessage(), null);
 		} else {
@@ -591,7 +579,7 @@ public abstract class XMLParser extends DefaultHandler implements XMLConstants {
 
 	public void checkRequiredAttribute(String element, String name, Object value) {
 		if (value == null) {
-			addError(NLS.bind(Messages.XMLParser_Missing_Required_Attribute, element, name));
+			addError(IStatus.WARNING, NLS.bind(Messages.XMLParser_Missing_Required_Attribute, element, name), null);
 		}
 	}
 
@@ -643,23 +631,26 @@ public abstract class XMLParser extends DefaultHandler implements XMLConstants {
 	}
 
 	public void unexpectedAttribute(String element, String attribute, String value) {
-		addError(NLS.bind(Messages.XMLParser_Unexpected_Attribute, new Object[] {element, attribute, value}));
+		if (Tracing.DEBUG_PARSING)
+			Tracing.debug("Unexpected attribute for element " + element + ": " + attribute + '=' + value); //$NON-NLS-1$ //$NON-NLS-2$
 	}
 
 	public void invalidAttributeValue(String element, String attribute, String value) {
-		addError(NLS.bind(Messages.XMLParser_Illegal_Value_For_Attribute, new Object[] {attribute, element, value}));
+		addError(IStatus.WARNING, NLS.bind(Messages.XMLParser_Illegal_Value_For_Attribute, new Object[] {attribute, element, value}), null);
 	}
 
 	public void unexpectedElement(AbstractHandler handler, String element, Attributes attributes) {
-		addError(NLS.bind(Messages.XMLParser_Unexpected_Element, new Object[] {handler.getName(), element, toString(attributes)}));
+		if (Tracing.DEBUG_PARSING)
+			Tracing.debug("Unexpected element in element " + handler.getName() + ": <" + element + toString(attributes) + '>'); //$NON-NLS-1$ //$NON-NLS-2$
 	}
 
 	public void duplicateElement(AbstractHandler handler, String element, Attributes attributes) {
-		addError(NLS.bind(Messages.XMLParser_Duplicate_Element, new Object[] {handler.getName(), element, toString(attributes)}));
+		addError(IStatus.WARNING, NLS.bind(Messages.XMLParser_Duplicate_Element, new Object[] {handler.getName(), element, toString(attributes)}), null);
 	}
 
 	public void unexpectedCharacterData(AbstractHandler handler, String cdata) {
-		addError(NLS.bind(Messages.XMLParser_Unexpected_Character_Data, handler.getName(), cdata.trim()));
+		if (Tracing.DEBUG_PARSING)
+			Tracing.debug("Unexpected character data in element " + handler.getName() + ": " + cdata.trim()); //$NON-NLS-1$ //$NON-NLS-2$
 	}
 
 	/**
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/XMLWriter.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/XMLWriter.java
index 1325525..c083310 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/XMLWriter.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/XMLWriter.java
@@ -16,9 +16,6 @@ import org.osgi.framework.Version;
 
 public class XMLWriter implements XMLConstants {
 
-	// Miscellaneous
-	public static final String EMPTY_ATTR = ""; //$NON-NLS-1$
-
 	public static class ProcessingInstruction {
 
 		private String target;
@@ -60,18 +57,12 @@ public class XMLWriter implements XMLConstants {
 
 	private PrintWriter pw;
 
-	private XMLWriter(OutputStream output, boolean writeXMLProcessingInstruction) throws UnsupportedEncodingException {
+	public XMLWriter(OutputStream output, ProcessingInstruction[] piElements) throws UnsupportedEncodingException {
 		this.pw = new PrintWriter(new OutputStreamWriter(output, "UTF8"), true); //$NON-NLS-1$
-		if (writeXMLProcessingInstruction) {
-			println(ProcessingInstruction.XML_UTF8);
-		}
+		println(ProcessingInstruction.XML_UTF8);
 		this.elements = new Stack();
 		this.open = false;
 		this.indent = "  "; //$NON-NLS-1$
-	}
-
-	public XMLWriter(OutputStream output, ProcessingInstruction[] piElements, boolean writeXMLProcessingInstruction) throws UnsupportedEncodingException {
-		this(output, writeXMLProcessingInstruction);
 		if (piElements != null) {
 			for (int i = 0; i < piElements.length; i++) {
 				println(piElements[i].toString());
@@ -79,10 +70,6 @@ public class XMLWriter implements XMLConstants {
 		}
 	}
 
-	public XMLWriter(OutputStream output, ProcessingInstruction[] piElements) throws UnsupportedEncodingException {
-		this(output, piElements, true /*writeXMLProcessingInstruction*/);
-	}
-
 	// start a new element
 	public void start(String name) {
 		if (this.open) {
@@ -237,7 +224,7 @@ public class XMLWriter implements XMLConstants {
 
 	protected static String attributeImage(String name, String value) {
 		if (value == null) {
-			return EMPTY_ATTR; // optional attribute with no value
+			return ""; // optional attribute with no value
 		}
 		return name + "='" + escape(value) + '\''; //$NON-NLS-1$
 	}
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java
index 517094c..9262954 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java
@@ -26,7 +26,6 @@ import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.spi.p2.metadata.repository.AbstractMetadataRepository;
 import org.eclipse.equinox.spi.p2.metadata.repository.AbstractMetadataRepository.RepositoryState;
 import org.eclipse.osgi.service.resolver.VersionRange;
-import org.eclipse.osgi.util.NLS;
 import org.osgi.framework.BundleContext;
 import org.osgi.framework.Version;
 import org.xml.sax.*;
@@ -102,6 +101,7 @@ public class MetadataRepositoryIO {
 	}
 
 	protected XMLWriter.ProcessingInstruction[] createPI(Class repositoryClass) {
+		//TODO We should remove this processing instruction, but currently old clients rely on this. See bug 210450.
 		return new XMLWriter.ProcessingInstruction[] {XMLWriter.ProcessingInstruction.makeClassVersionInstruction(XMLConstants.PI_REPOSITORY_TARGET, repositoryClass, XMLConstants.CURRENT_VERSION)};
 	}
 
@@ -169,7 +169,7 @@ public class MetadataRepositoryIO {
 				//		 or restrictions on concurrent parsing
 				getParser();
 				RepositoryHandler repositoryHandler = new RepositoryHandler();
-				xmlReader.setContentHandler(new RepositoryDocHandler(REPOSITORY_ELEMENT, repositoryHandler));
+				xmlReader.setContentHandler(new DocHandler(REPOSITORY_ELEMENT, repositoryHandler));
 				xmlReader.parse(new InputSource(stream));
 				if (isValidXML()) {
 					theRepository = repositoryHandler.getRepository();
@@ -195,34 +195,6 @@ public class MetadataRepositoryIO {
 			return theRepository;
 		}
 
-		private final class RepositoryDocHandler extends DocHandler {
-
-			public RepositoryDocHandler(String rootName, RootHandler rootHandler) {
-				super(rootName, rootHandler);
-			}
-
-			public void processingInstruction(String target, String data) throws SAXException {
-				if (PI_REPOSITORY_TARGET.equals(target)) {
-					// TODO: should the root handler be constructed based on class
-					// 		 via an extension registry mechanism?
-					String clazz = extractPIClass(data);
-					try {
-						theRepositoryClass = Class.forName(clazz);
-					} catch (ClassNotFoundException e) {
-						// throw new SAXException(NLS.bind(Messages.MetadataRepositoryIO_Repository_Class_Not_Found, clazz));
-						throw new SAXException("Metadata repository class '" + clazz + "' not found"); //$NON-NLS-1$//$NON-NLS-2$
-					}
-
-					// TODO: version tolerance by extension?
-					Version repositoryVersion = extractPIVersion(target, data);
-					if (!MetadataRepositoryIO.XMLConstants.XML_TOLERANCE.isIncluded(repositoryVersion)) {
-						throw new SAXException(NLS.bind(Messages.MetadataRepositoryIO_Parser_Has_Incompatible_Version, repositoryVersion, MetadataRepositoryIO.XMLConstants.XML_TOLERANCE));
-					}
-				}
-			}
-
-		}
-
 		private final class RepositoryHandler extends RootHandler {
 
 			private final String[] required = new String[] {NAME_ATTRIBUTE, TYPE_ATTRIBUTE, VERSION_ATTRIBUTE};
@@ -279,7 +251,8 @@ public class MetadataRepositoryIO {
 					state.Units = (unitsHandler == null ? new IInstallableUnit[0] //
 							: unitsHandler.getUnits());
 					try {
-						Object repositoryObject = theRepositoryClass.newInstance();
+						Class clazz = Class.forName(state.Type);
+						Object repositoryObject = clazz.newInstance();
 						if (repositoryObject instanceof AbstractMetadataRepository) {
 							repository = (AbstractMetadataRepository) repositoryObject;
 							repository.initialize(state);
@@ -290,6 +263,9 @@ public class MetadataRepositoryIO {
 					} catch (IllegalAccessException e) {
 						// TODO: Throw a SAXException
 						e.printStackTrace();
+					} catch (ClassNotFoundException e) {
+						// TODO: Throw a SAXException
+						e.printStackTrace();
 					}
 				}
 			}
commit 21b7dca9d1e728329b511a09223965a861870283
Author: John Arthorne <johna>
Date:   Fri Nov 23 15:02:44 2007 +0000

    Bug 210450 [prov] Forwards compatibility of file formats

7	2	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/XMLParser.java
3	0	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/XMLParser.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/XMLParser.java
index 3e736a0..c5a9615 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/XMLParser.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/p2/persistence/XMLParser.java
@@ -272,7 +272,7 @@ public abstract class XMLParser extends DefaultHandler implements XMLConstants {
 		/**
 		 * Parse the attributes of an element, given the list of required and optional ones.
 		 * Return values in same order, null for those not present.
-		 * Report errors for missing required attributes or extra ones.
+		 * Log warnings for extra attributes or missing required attributes.
 		 */
 		protected String[] parseAttributes(Attributes attributes, String[] required, String[] optional) {
 			String[] result = new String[required.length + optional.length];
@@ -608,9 +608,14 @@ public abstract class XMLParser extends DefaultHandler implements XMLConstants {
 		return result;
 	}
 
+	/**
+	 * Converts a version string to a Version object. Returns the version object,
+	 * or {@link Version#emptyVersion} if the value was not a valid version.
+	 */
 	public Version checkVersion(String element, String attribute, String value) {
 		try {
-			return new Version(value);
+			if (value != null)
+				return new Version(value);
 		} catch (IllegalArgumentException iae) {
 			invalidAttributeValue(element, attribute, value);
 		} catch (NullPointerException npe) {
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java
index 9262954..d7e6a0e 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java
@@ -251,6 +251,9 @@ public class MetadataRepositoryIO {
 					state.Units = (unitsHandler == null ? new IInstallableUnit[0] //
 							: unitsHandler.getUnits());
 					try {
+						//can't create repository if missing type - this is already logged when parsing attributes
+						if (state.Type == null)
+							return;
 						Class clazz = Class.forName(state.Type);
 						Object repositoryObject = clazz.newInstance();
 						if (repositoryObject instanceof AbstractMetadataRepository) {
commit 9993d14a95dc2a2ec3449311693b951e3a8feafd
Author: John Arthorne <johna>
Date:   Fri Nov 23 16:10:45 2007 +0000

    Bug 210450 [prov] Forwards compatibility of file formats

3	1	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataParser.java
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataParser.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataParser.java
index 1ae3f2b..6e6e81d 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataParser.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataParser.java
@@ -77,7 +77,9 @@ public abstract class MetadataParser extends XMLParser implements XMLConstants {
 		public InstallableUnitHandler(AbstractHandler parentHandler, Attributes attributes, List units) {
 			super(parentHandler, INSTALLABLE_UNIT_ELEMENT);
 			String[] values = parseAttributes(attributes, required, optional);
-
+			//skip entire IU if the id is missing
+			if (values[0] == null)
+				return;
 			Version version = checkVersion(INSTALLABLE_UNIT_ELEMENT, VERSION_ATTRIBUTE, values[1]);
 			boolean singleton = checkBoolean(INSTALLABLE_UNIT_ELEMENT, SINGLETON_ATTRIBUTE, values[2], true).booleanValue();
 			boolean isFragment = checkBoolean(INSTALLABLE_UNIT_ELEMENT, FRAGMENT_ATTRIBUTE, values[3], false).booleanValue();
commit d6b3412fe56916661344e133c58375c3abe24e31
Author: John Arthorne <johna>
Date:   Fri Nov 23 16:11:03 2007 +0000

    Bug 210450 [prov] Log warnings from parser

11	3	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepositoryIO.java
11	12	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
6	2	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/InstallRegistry.java
12	6	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepositoryIO.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepositoryIO.java
index b7a24f3..d532387 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepositoryIO.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepositoryIO.java
@@ -13,9 +13,10 @@ package org.eclipse.equinox.internal.p2.artifact.repository.simple;
 import java.io.*;
 import java.util.*;
 import javax.xml.parsers.ParserConfigurationException;
-import org.eclipse.core.runtime.CoreException;
+import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.artifact.repository.Activator;
 import org.eclipse.equinox.internal.p2.artifact.repository.Messages;
+import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
 import org.eclipse.equinox.internal.p2.core.helpers.OrderedProperties;
 import org.eclipse.equinox.internal.p2.metadata.ArtifactKey;
 import org.eclipse.equinox.internal.p2.persistence.XMLParser;
@@ -77,8 +78,15 @@ class SimpleArtifactRepositoryIO {
 				bufferedInput = new BufferedInputStream(input);
 				Parser repositoryParser = new Parser(Activator.getContext(), Activator.ID);
 				repositoryParser.parse(input);
-				if (!repositoryParser.isValidXML()) {
-					throw new RepositoryCreationException(new CoreException(repositoryParser.getStatus()));
+				IStatus result = repositoryParser.getStatus();
+				switch (result.getSeverity()) {
+					case IStatus.CANCEL :
+						throw new OperationCanceledException();
+					case IStatus.ERROR :
+						throw new RepositoryCreationException(new CoreException(result));
+					case IStatus.WARNING :
+					case IStatus.INFO :
+						LogHelper.log(result);
 				}
 				return repositoryParser.getRepository();
 			} finally {
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
index 9f45302..7ecd3f2 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
@@ -14,8 +14,9 @@ import java.net.URL;
 import java.util.LinkedHashMap;
 import java.util.Map;
 import javax.xml.parsers.ParserConfigurationException;
-import org.eclipse.equinox.internal.p2.core.helpers.OrderedProperties;
-import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Status;
+import org.eclipse.equinox.internal.p2.core.helpers.*;
 import org.eclipse.equinox.internal.p2.persistence.XMLWriter;
 import org.eclipse.equinox.p2.core.eventbus.ProvisioningEventBus;
 import org.eclipse.equinox.p2.core.location.AgentLocation;
@@ -118,6 +119,9 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 				bif = new BufferedInputStream(getRegistryLocation().openStream());
 				Parser parser = new Parser(EngineActivator.getContext(), EngineActivator.ID);
 				parser.parse(bif);
+				IStatus result = parser.getStatus();
+				if (!result.isOK())
+					LogHelper.log(result);
 			} finally {
 				if (bif != null)
 					bif.close();
@@ -125,8 +129,7 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 		} catch (FileNotFoundException e) {
 			//This is ok.
 		} catch (IOException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
+			LogHelper.log(new Status(IStatus.ERROR, EngineActivator.ID, "Error restoring profile registry", e)); //$NON-NLS-1$
 		}
 	}
 
@@ -134,10 +137,10 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 		OutputStream os;
 		try {
 			Location agent = (Location) ServiceHelper.getService(EngineActivator.getContext(), AgentLocation.class.getName());
-			if (agent == null)
-				// TODO should likely do something here since we failed to persist.
+			if (agent == null) {
+				LogHelper.log(new Status(IStatus.ERROR, EngineActivator.ID, "Unable to persist profile registry due to missing AgentLocation")); //$NON-NLS-1$
 				return;
-
+			}
 			URL registryLocation = getRegistryLocation();
 			if (!registryLocation.getProtocol().equals("file")) //$NON-NLS-1$
 				throw new IOException(NLS.bind(Messages.SimpleProfileRegistry_Persist_To_Non_File_URL_Error, registryLocation));
@@ -152,12 +155,8 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 			} finally {
 				os.close();
 			}
-		} catch (FileNotFoundException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
 		} catch (IOException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
+			LogHelper.log(new Status(IStatus.ERROR, EngineActivator.ID, "Error persisting profile registry", e)); //$NON-NLS-1$
 		}
 
 	}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/InstallRegistry.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/InstallRegistry.java
index 6b2e6ff..75ff6b5 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/InstallRegistry.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/InstallRegistry.java
@@ -15,9 +15,10 @@ import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.*;
 import javax.xml.parsers.ParserConfigurationException;
-import org.eclipse.equinox.internal.p2.core.helpers.OrderedProperties;
-import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.equinox.internal.p2.core.helpers.*;
 import org.eclipse.equinox.internal.p2.engine.*;
+import org.eclipse.equinox.internal.p2.engine.Messages;
 import org.eclipse.equinox.internal.p2.metadata.repository.io.MetadataParser;
 import org.eclipse.equinox.internal.p2.metadata.repository.io.MetadataWriter;
 import org.eclipse.equinox.internal.p2.persistence.XMLWriter;
@@ -129,6 +130,9 @@ public class InstallRegistry implements IInstallRegistry {
 				bif = new BufferedInputStream(getRegistryLocation().openStream());
 				Parser parser = new Parser(EngineActivator.getContext(), EngineActivator.ID);
 				parser.parse(bif);
+				IStatus result = parser.getStatus();
+				if (!result.isOK())
+					LogHelper.log(result);
 				profileRegistries = parser.getProfileInstallRegistries();
 			} finally {
 				if (bif != null)
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java
index d7e6a0e..91325c4 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java
@@ -14,8 +14,8 @@ package org.eclipse.equinox.internal.p2.metadata.repository;
 import java.io.*;
 import java.util.Set;
 import javax.xml.parsers.ParserConfigurationException;
-import org.eclipse.core.runtime.CoreException;
-import org.eclipse.core.runtime.NullProgressMonitor;
+import org.eclipse.core.runtime.*;
+import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
 import org.eclipse.equinox.internal.p2.core.helpers.OrderedProperties;
 import org.eclipse.equinox.internal.p2.metadata.repository.io.MetadataParser;
 import org.eclipse.equinox.internal.p2.metadata.repository.io.MetadataWriter;
@@ -48,11 +48,17 @@ public class MetadataRepositoryIO {
 
 				Parser repositoryParser = new Parser(Activator.getContext(), Activator.ID);
 				repositoryParser.parse(input);
-				if (!repositoryParser.isValidXML()) {
-					throw new RepositoryCreationException(new CoreException(repositoryParser.getStatus()));
+				IStatus result = repositoryParser.getStatus();
+				switch (result.getSeverity()) {
+					case IStatus.CANCEL :
+						throw new OperationCanceledException();
+					case IStatus.ERROR :
+						throw new RepositoryCreationException(new CoreException(result));
+					case IStatus.WARNING :
+					case IStatus.INFO :
+						LogHelper.log(result);
 				}
-				IMetadataRepository theRepository = repositoryParser.getRepository();
-				return theRepository;
+				return repositoryParser.getRepository();
 			} finally {
 				if (bufferedInput != null)
 					bufferedInput.close();
commit da942dcce1b51032d40886521611378bb7c82539
Author: John Arthorne <johna>
Date:   Fri Nov 23 18:42:13 2007 +0000

    Bug 210450 - relaxed version tolerance on files

2	3	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepositoryIO.java
3	5	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileXMLConstants.java
3	5	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
2	3	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/InstallRegistry.java
1	1	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java
2	3	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/XMLConstants.java
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepositoryIO.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepositoryIO.java
index d532387..48dae43 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepositoryIO.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/simple/SimpleArtifactRepositoryIO.java
@@ -103,9 +103,8 @@ class SimpleArtifactRepositoryIO {
 		// Constants defining the structure of the XML for a SimpleArtifactRepository
 
 		// A format version number for simple artifact repository XML.
-		public static final String XML_VERSION = "0.0.1"; //$NON-NLS-1$
-		public static final Version CURRENT_VERSION = new Version(XML_VERSION);
-		public static final VersionRange XML_TOLERANCE = new VersionRange(CURRENT_VERSION, true, CURRENT_VERSION, true);
+		public static final Version CURRENT_VERSION = new Version(0, 0, 1);
+		public static final VersionRange XML_TOLERANCE = new VersionRange(CURRENT_VERSION, true, new Version(2, 0, 0), false);
 
 		// Constants for processing instructions
 		public static final String PI_REPOSITORY_TARGET = "artifactRepository"; //$NON-NLS-1$
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileXMLConstants.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileXMLConstants.java
index 5125464..b0b813c 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileXMLConstants.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileXMLConstants.java
@@ -20,11 +20,9 @@ import org.osgi.framework.Version;
 public interface ProfileXMLConstants extends XMLConstants {
 
 	// A format version number for profile XML.
-	public static final String XML_CURRENT = "0.0.2"; //$NON-NLS-1$
-	public static final Version CURRENT_VERSION = new Version(XML_CURRENT);
-	public static final String XML_COMPATIBLE = "0.0.1"; //$NON-NLS-1$
-	public static final Version COMPATIBLE_VERSION = new Version(XML_CURRENT);
-	public static final VersionRange XML_TOLERANCE = new VersionRange(COMPATIBLE_VERSION, true, CURRENT_VERSION, true);
+	public static final Version CURRENT_VERSION = new Version(0, 0, 2);
+	public static final Version COMPATIBLE_VERSION = new Version(0, 0, 1);
+	public static final VersionRange XML_TOLERANCE = new VersionRange(COMPATIBLE_VERSION, true, new Version(2, 0, 0), false);
 
 	// Constants for profile elements
 	public static final String PROFILES_ELEMENT = "profiles"; //$NON-NLS-1$
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
index 7ecd3f2..ad52c20 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/SimpleProfileRegistry.java
@@ -201,11 +201,9 @@ public class SimpleProfileRegistry implements IProfileRegistry {
 		// Constants defining the structure of the XML for a SimpleProfileRegistry
 
 		// A format version number for simple profile registry XML.
-		public static final String XML_CURRENT = "0.0.2"; //$NON-NLS-1$
-		public static final Version CURRENT_VERSION = new Version(XML_CURRENT);
-		public static final String XML_COMPATIBLE = "0.0.1"; //$NON-NLS-1$
-		public static final Version COMPATIBLE_VERSION = new Version(XML_CURRENT);
-		public static final VersionRange XML_TOLERANCE = new VersionRange(COMPATIBLE_VERSION, true, CURRENT_VERSION, true);
+		public static final Version CURRENT_VERSION = new Version(0, 0, 2);
+		public static final Version COMPATIBLE_VERSION = new Version(0, 0, 1);
+		public static final VersionRange XML_TOLERANCE = new VersionRange(COMPATIBLE_VERSION, true, new Version(2, 0, 0), false);
 
 		// Constants for processing instructions
 		public static final String PI_REPOSITORY_TARGET = "profileRegistry"; //$NON-NLS-1$
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/InstallRegistry.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/InstallRegistry.java
index 75ff6b5..93153aa 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/InstallRegistry.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/installregistry/InstallRegistry.java
@@ -294,9 +294,8 @@ public class InstallRegistry implements IInstallRegistry {
 		// Constants defining the structure of the XML for a SimpleProfileRegistry
 
 		// A format version number for install registry XML.
-		public static final String XML_VERSION = "0.0.1"; //$NON-NLS-1$
-		public static final Version CURRENT_VERSION = new Version(XML_VERSION);
-		public static final VersionRange XML_TOLERANCE = new VersionRange(CURRENT_VERSION, true, CURRENT_VERSION, true);
+		public static final Version CURRENT_VERSION = new Version(0, 0, 1);
+		public static final VersionRange XML_TOLERANCE = new VersionRange(CURRENT_VERSION, true, new Version(2, 0, 0), false);
 
 		// Constants for processing instructions
 		public static final String PI_REPOSITORY_TARGET = "installRegistry"; //$NON-NLS-1$
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java
index 055810d..3c251ae 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/MetadataRepositoryIO.java
@@ -97,7 +97,7 @@ public class MetadataRepositoryIO {
 		// A format version number for metadata repository XML.
 		public static final String XML_VERSION = "0.0.1"; //$NON-NLS-1$
 		public static final Version CURRENT_VERSION = new Version(XML_VERSION);
-		public static final VersionRange XML_TOLERANCE = new VersionRange(CURRENT_VERSION, true, new Version(CURRENT_VERSION.getMajor() + 1, 0,0), true);
+		public static final VersionRange XML_TOLERANCE = new VersionRange(CURRENT_VERSION, true, new Version(2, 0, 0), false);
 
 		// Constants for processing Instructions
 		public static final String PI_REPOSITORY_TARGET = "metadataRepository"; //$NON-NLS-1$
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/XMLConstants.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/XMLConstants.java
index c5c01be..9709e0e 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/XMLConstants.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/XMLConstants.java
@@ -18,9 +18,8 @@ public interface XMLConstants extends org.eclipse.equinox.internal.p2.persistenc
 	// Constants defining the structure of the XML for metadata objects
 
 	// A format version number for metadata XML.
-	public static final String XML_VERSION = "0.0.1"; //$NON-NLS-1$
-	public static final Version CURRENT_VERSION = new Version(XML_VERSION);
-	public static final VersionRange XML_TOLERANCE = new VersionRange(CURRENT_VERSION, true, CURRENT_VERSION, true);
+	public static final Version CURRENT_VERSION = new Version(0, 0, 1);
+	public static final VersionRange XML_TOLERANCE = new VersionRange(CURRENT_VERSION, true, new Version(2, 0, 0), false);
 
 	// Constants for processing Instructions
 	public static final String PI_METADATA_TARGET = "metadata"; //$NON-NLS-1$
commit ccd6609d44f72e95661888e08e788dd4bde05a65
Author: Simon Kaegi <skaegi>
Date:   Mon Mar 2 22:58:10 2009 +0000

    Bug 210450 [metadata][artifact] Forwards compatibility of file formats

18	1	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileParser.java
16	0	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/AdviceFileParserTest.java
11	6	bundles/org.eclipse.equinox.simpleconfigurator/src/org/eclipse/equinox/internal/simpleconfigurator/utils/SimpleConfiguratorUtils.java
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileParser.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileParser.java
index 5915ab2..2eb46ef 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileParser.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileParser.java
@@ -21,6 +21,8 @@ import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory.Inst
 
 public class AdviceFileParser {
 
+	private static final String ADVICE_VERSION = "advice.version"; //$NON-NLS-1$
+
 	private static final String QUALIFIER_SUBSTITUTION = "$qualifier$"; //$NON-NLS-1$
 	private static final String VERSION_SUBSTITUTION = "$version$"; //$NON-NLS-1$
 
@@ -56,6 +58,9 @@ public class AdviceFileParser {
 	private static final String ARTIFACTS_PREFIX = "artifacts."; //$NON-NLS-1$
 	private static final String HOST_REQUIREMENTS_PREFIX = "hostRequirements."; //$NON-NLS-1$
 
+	public static final Version COMPATIBLE_VERSION = new Version(1, 0, 0);
+	public static final VersionRange VERSION_TOLERANCE = new VersionRange(COMPATIBLE_VERSION, true, new Version(2, 0, 0), false);
+
 	private Properties adviceProperties = new Properties();
 	private List adviceProvides = new ArrayList();
 	private List adviceRequires = new ArrayList();
@@ -75,6 +80,10 @@ public class AdviceFileParser {
 	}
 
 	public void parse() {
+		String adviceVersion = (String) advice.get(ADVICE_VERSION);
+		if (adviceVersion != null)
+			checkAdviceVersion(adviceVersion);
+
 		List keys = new ArrayList(advice.keySet());
 		Collections.sort(keys);
 
@@ -92,13 +101,21 @@ public class AdviceFileParser {
 				parseInstructions(INSTRUCTIONS_PREFIX, adviceInstructions);
 			else if (current.startsWith(UNITS_PREFIX))
 				parseUnits(UNITS_PREFIX, adviceOtherIUs);
-			else {
+			else if (current.equals(ADVICE_VERSION)) {
+				next();
+			} else {
 				// we ignore elements we do not understand
 				next();
 			}
 		}
 	}
 
+	private void checkAdviceVersion(String adviceVersion) {
+		Version version = new Version(adviceVersion);
+		if (!VERSION_TOLERANCE.isIncluded(version))
+			throw new IllegalStateException("bad version: " + version + ". Expected range was " + VERSION_TOLERANCE); //$NON-NLS-1$ //$NON-NLS-2$
+	}
+
 	private void next() {
 		current = (String) (keysIterator.hasNext() ? keysIterator.next() : null);
 	}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/AdviceFileParserTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/AdviceFileParserTest.java
index 21a25b4..cd50175 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/AdviceFileParserTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/AdviceFileParserTest.java
@@ -29,6 +29,22 @@ public class AdviceFileParserTest extends TestCase {
 		assertNull(parser.getTouchpointInstructions());
 	}
 
+	public void testAdviceVersion() {
+		Map map = new HashMap();
+		map.put("advice.version", "1.0");
+		AdviceFileParser parser = new AdviceFileParser("id", Version.MIN_VERSION, map);
+		parser.parse();
+
+		map.put("advice.version", "999");
+		parser = new AdviceFileParser("id", Version.MIN_VERSION, map);
+		try {
+			parser.parse();
+		} catch (IllegalStateException e) {
+			return;
+		}
+		fail("expected version parse problem");
+	}
+
 	public void testPropertyAdvice() {
 		Map map = new HashMap();
 		map.put("properties.0.name", "testName1");
diff --git a/bundles/org.eclipse.equinox.simpleconfigurator/src/org/eclipse/equinox/internal/simpleconfigurator/utils/SimpleConfiguratorUtils.java b/bundles/org.eclipse.equinox.simpleconfigurator/src/org/eclipse/equinox/internal/simpleconfigurator/utils/SimpleConfiguratorUtils.java
index 9c5106f..1603eb6 100644
--- a/bundles/org.eclipse.equinox.simpleconfigurator/src/org/eclipse/equinox/internal/simpleconfigurator/utils/SimpleConfiguratorUtils.java
+++ b/bundles/org.eclipse.equinox.simpleconfigurator/src/org/eclipse/equinox/internal/simpleconfigurator/utils/SimpleConfiguratorUtils.java
@@ -11,11 +11,16 @@ package org.eclipse.equinox.internal.simpleconfigurator.utils;
 import java.io.*;
 import java.net.*;
 import java.util.*;
+import org.eclipse.osgi.service.resolver.VersionRange;
+import org.osgi.framework.Version;
 
 public class SimpleConfiguratorUtils {
 
 	private static final String UNC_PREFIX = "//";
 	private static final String VERSION_PREFIX = "#version=";
+	public static final Version COMPATIBLE_VERSION = new Version(1, 0, 0);
+	public static final VersionRange VERSION_TOLERANCE = new VersionRange(COMPATIBLE_VERSION, true, new Version(2, 0, 0), false);
+
 	private static final String VERSION_1 = "1";
 	private static final String FILE_SCHEME = "file";
 	private static final String REFERENCE_PREFIX = "reference:";
@@ -40,7 +45,7 @@ public class SimpleConfiguratorUtils {
 			while ((line = r.readLine()) != null) {
 				line = line.trim();
 				//ignore any comment or empty lines
-				if (line.length() == 0) 
+				if (line.length() == 0)
 					continue;
 
 				if (line.startsWith("#")) {//$NON-NLS-1$
@@ -65,15 +70,15 @@ public class SimpleConfiguratorUtils {
 	public static void parseCommentLine(String line) {
 		// version
 		if (line.startsWith(VERSION_PREFIX)) {
-			String version = line.substring(VERSION_PREFIX.length());
-			if (!VERSION_1.equals(version))
+			String version = line.substring(VERSION_PREFIX.length()).trim();
+			if (!VERSION_TOLERANCE.isIncluded(new Version(version)))
 				throw new IllegalArgumentException("Invalid version: " + version);
 		}
 	}
 
 	public static BundleInfo parseBundleInfoLine(String line, URI base) {
 		// symbolicName,version,location,startLevel,markedAsStarted
-		StringTokenizer tok = new StringTokenizer(line, COMMA); 
+		StringTokenizer tok = new StringTokenizer(line, COMMA);
 		int numberOfTokens = tok.countTokens();
 		if (numberOfTokens < 5)
 			throw new IllegalArgumentException("Line does not contain at least 5 tokens: " + line);
@@ -178,8 +183,8 @@ public class SimpleConfiguratorUtils {
 			bundleLocation = location.toString();
 		}
 
-		if (useReference && bundleLocation.startsWith(FILE_PREFIX)) 
-			bundleLocation = REFERENCE_PREFIX + bundleLocation; 
+		if (useReference && bundleLocation.startsWith(FILE_PREFIX))
+			bundleLocation = REFERENCE_PREFIX + bundleLocation;
 		return bundleLocation;
 	}
 }
commit d5777cbc286f99544da5fd777db9a1417cedf935
Author: Simon Kaegi <skaegi>
Date:   Tue Mar 3 22:25:14 2009 +0000

    Bug 210450 [metadata][artifact] Forwards compatibility of file formats
     Should be v1.0.0 not v0.1.0

1	1	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileXMLConstants.java
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileXMLConstants.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileXMLConstants.java
index a136a3e..ea3e97e 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileXMLConstants.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileXMLConstants.java
@@ -20,7 +20,7 @@ import org.eclipse.equinox.internal.provisional.p2.core.VersionRange;
 public interface ProfileXMLConstants extends XMLConstants {
 
 	// A format version number for profile XML.
-	public static final Version CURRENT_VERSION = new Version(0, 1, 0);
+	public static final Version CURRENT_VERSION = new Version(1, 0, 0);
 	public static final Version COMPATIBLE_VERSION = new Version(0, 0, 1);
 	public static final VersionRange XML_TOLERANCE = new VersionRange(COMPATIBLE_VERSION, true, new Version(2, 0, 0), false);
 

commit 3f1d39302b8be8718707d451257a8684d5995d63
Author: DJ Houghton <dj>
Date:   Mon Feb 8 21:21:21 2010 +0000

    Bug 300928 - [publisher] Convert PublisherResult to use IUMap

8	3	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/Profile.java
0	190	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/IUMap.java
1	0	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/LocalMetadataRepository.java
1	0	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/URLMetadataRepository.java
225	0	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/IUMap.java
31	69	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/PublisherResult.java
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/Profile.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/Profile.java
index 37fb0c5..ffc5b58 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/Profile.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/Profile.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others. All rights reserved. This
+ * Copyright (c) 2007, 2010 IBM Corporation and others. All rights reserved. This
  * program and the accompanying materials are made available under the terms of
  * the Eclipse Public License v1.0 which accompanies this distribution, and is
  * available at http://www.eclipse.org/legal/epl-v10.html
@@ -14,11 +14,13 @@ import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.equinox.internal.p2.core.helpers.CollectionUtils;
 import org.eclipse.equinox.internal.p2.core.helpers.OrderedProperties;
+import org.eclipse.equinox.internal.p2.metadata.IUMap;
 import org.eclipse.equinox.p2.core.IProvisioningAgent;
 import org.eclipse.equinox.p2.engine.IProfile;
 import org.eclipse.equinox.p2.engine.ISurrogateProfileHandler;
 import org.eclipse.equinox.p2.engine.query.IUProfilePropertyQuery;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.metadata.query.InstallableUnitQuery;
 import org.eclipse.equinox.p2.query.*;
 import org.eclipse.osgi.util.NLS;
 
@@ -39,7 +41,7 @@ public class Profile implements IProfile {
 	 */
 	private OrderedProperties storage = new OrderedProperties();
 
-	private Set<IInstallableUnit> ius = new HashSet<IInstallableUnit>();
+	private IUMap ius = new IUMap();
 	private Map<IInstallableUnit, OrderedProperties> iuProperties = new HashMap<IInstallableUnit, OrderedProperties>();
 	private boolean changed = false;
 
@@ -166,6 +168,8 @@ public class Profile implements IProfile {
 		propagateProfileContext(query);
 		if (query instanceof IUProfilePropertyQuery) {
 			return query.perform(iuProperties.keySet().iterator());
+		} else if (query instanceof InstallableUnitQuery) {
+			return ius.query((InstallableUnitQuery) query);
 		}
 		return query.perform(ius.iterator());
 	}
@@ -324,7 +328,8 @@ public class Profile implements IProfile {
 			}
 		}
 
-		for (IInstallableUnit iu : ius) {
+		for (Iterator<IInstallableUnit> iter = ius.iterator(); iter.hasNext();) {
+			IInstallableUnit iu = iter.next();
 			snapshot.addInstallableUnit(iu);
 			Map<String, String> properties = getInstallableUnitProperties(iu);
 			if (properties != null)
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/IUMap.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/IUMap.java
deleted file mode 100644
index 9e8f8ca..0000000
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/IUMap.java
+++ /dev/null
@@ -1,190 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2009 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- * 
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *     Cloudsmith Inc. - rewrite for smaller memory footprint
- *******************************************************************************/
-package org.eclipse.equinox.internal.p2.metadata.repository;
-
-import java.util.*;
-import org.eclipse.equinox.internal.p2.core.helpers.CollectionUtils;
-import org.eclipse.equinox.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.metadata.query.InstallableUnitQuery;
-import org.eclipse.equinox.p2.query.Collector;
-import org.eclipse.equinox.p2.query.IQueryResult;
-
-/**
- * A map that stores {@link IInstallableUnit} instances in a way that is efficient to query
- */
-public class IUMap {
-	/**
-	 * Iterator over all the {@link IInstallableUnit} instances in the map.
-	 */
-	public class MapIterator implements Iterator<IInstallableUnit> {
-		//iterator over the keys in UIMap
-		private final Iterator<Object> unitIterator;
-		private IInstallableUnit[] currentBucket;
-		private int bucketIndex = 0;
-		private IInstallableUnit nextElement = null;
-
-		MapIterator() {
-			super();
-			unitIterator = units.values().iterator();
-		}
-
-		public boolean hasNext() {
-			return positionNext();
-		}
-
-		public IInstallableUnit next() {
-			if (!positionNext())
-				throw new NoSuchElementException();
-
-			IInstallableUnit nxt = nextElement;
-			nextElement = null;
-			return nxt;
-		}
-
-		public void remove() {
-			throw new UnsupportedOperationException();
-		}
-
-		private boolean positionNext() {
-			if (nextElement != null)
-				return true;
-
-			if (currentBucket != null) {
-				nextElement = currentBucket[bucketIndex];
-				if (++bucketIndex == currentBucket.length) {
-					currentBucket = null;
-					bucketIndex = -1;
-				}
-				return true;
-			}
-
-			if (!unitIterator.hasNext())
-				return false;
-
-			Object val = unitIterator.next();
-			if (val instanceof IInstallableUnit)
-				nextElement = (IInstallableUnit) val;
-			else {
-				currentBucket = (IInstallableUnit[]) val;
-				nextElement = currentBucket[0];
-				bucketIndex = 1;
-			}
-			return true;
-		}
-	}
-
-	/**
-	 * Map<String,Object> mapping IU id to either arrays of iu's or a single iu with that id.
-	 */
-	final Map<String, Object> units = new HashMap<String, Object>();
-
-	public void add(IInstallableUnit unit) {
-		String key = unit.getId();
-		Object matching = units.get(key);
-		if (matching == null) {
-			units.put(key, unit);
-			return;
-		}
-
-		// We already had something at this key position. It must be
-		// preserved.
-		if (matching.getClass().isArray()) {
-			// Entry is an array. Add unique
-			IInstallableUnit[] iuArr = (IInstallableUnit[]) matching;
-			int idx = iuArr.length;
-			while (--idx >= 0)
-				if (iuArr[idx].equals(unit))
-					// This unit has already been added
-					return;
-
-			IInstallableUnit[] iuArrPlus = new IInstallableUnit[iuArr.length + 1];
-			System.arraycopy(iuArr, 0, iuArrPlus, 0, iuArr.length);
-			iuArrPlus[iuArr.length] = unit;
-			units.put(unit.getId(), iuArrPlus);
-		} else {
-			IInstallableUnit old = (IInstallableUnit) matching;
-			if (!old.equals(unit))
-				units.put(key, new IInstallableUnit[] {old, unit});
-		}
-	}
-
-	public void addAll(IInstallableUnit[] toAdd) {
-		for (int i = 0; i < toAdd.length; i++)
-			add(toAdd[i]);
-	}
-
-	public void clear() {
-		units.clear();
-	}
-
-	public Iterator<IInstallableUnit> iterator() {
-		return new MapIterator();
-	}
-
-	public IQueryResult<IInstallableUnit> query(InstallableUnitQuery query) {
-		//iterate over the entire map, or just the IU's with the given id
-		Iterator<IInstallableUnit> candidates;
-		if (query.getId() == null)
-			candidates = iterator();
-		else {
-			Object bucket = units.get(query.getId());
-			if (bucket == null)
-				return Collector.emptyCollector();
-
-			if (bucket.getClass().isArray())
-				candidates = CollectionUtils.unmodifiableList((IInstallableUnit[]) bucket).iterator();
-			else
-				candidates = Collections.<IInstallableUnit> singletonList((IInstallableUnit) bucket).iterator();
-		}
-		return query.perform(candidates);
-
-	}
-
-	public void remove(IInstallableUnit unit) {
-		String key = unit.getId();
-		Object matching = units.get(key);
-		if (matching == null)
-			return;
-
-		if (matching instanceof IInstallableUnit && matching.equals(unit)) {
-			units.remove(key);
-			return;
-		}
-
-		IInstallableUnit[] array = (IInstallableUnit[]) matching;
-		int idx = array.length;
-		while (--idx >= 0) {
-			if (unit.equals(array[idx])) {
-				if (array.length == 2) {
-					// We no longer need this array. Replace it with the
-					// entry that we keep.
-					units.put(key, idx == 0 ? array[1] : array[0]);
-					break;
-				}
-
-				// Shrink the array
-				IInstallableUnit[] newArray = new IInstallableUnit[array.length - 1];
-				if (idx > 0)
-					System.arraycopy(array, 0, newArray, 0, idx);
-				if (idx + 1 < array.length)
-					System.arraycopy(array, idx + 1, newArray, idx, array.length - (idx + 1));
-				units.put(key, newArray);
-				break;
-			}
-		}
-	}
-
-	public void removeAll(Collection<IInstallableUnit> toRemove) {
-		for (IInstallableUnit iu : toRemove)
-			remove(iu);
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/LocalMetadataRepository.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/LocalMetadataRepository.java
index 0831e96..b7265d8 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/LocalMetadataRepository.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/LocalMetadataRepository.java
@@ -19,6 +19,7 @@ import java.util.jar.JarOutputStream;
 import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.CollectionUtils;
 import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
+import org.eclipse.equinox.internal.p2.metadata.IUMap;
 import org.eclipse.equinox.internal.provisional.p2.core.eventbus.IProvisioningEventBus;
 import org.eclipse.equinox.internal.provisional.p2.repository.RepositoryEvent;
 import org.eclipse.equinox.p2.core.IProvisioningAgent;
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/URLMetadataRepository.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/URLMetadataRepository.java
index ed2d16f..63d5487 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/URLMetadataRepository.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/URLMetadataRepository.java
@@ -15,6 +15,7 @@ import java.net.URI;
 import java.util.Map;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.URIUtil;
+import org.eclipse.equinox.internal.p2.metadata.IUMap;
 import org.eclipse.equinox.p2.core.IProvisioningAgent;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.metadata.query.InstallableUnitQuery;
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/IUMap.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/IUMap.java
new file mode 100644
index 0000000..3ce2054
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/IUMap.java
@@ -0,0 +1,225 @@
+/*******************************************************************************
+ * Copyright (c) 2009, 2010 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *     Cloudsmith Inc. - rewrite for smaller memory footprint
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.metadata;
+
+import java.util.*;
+import org.eclipse.equinox.internal.p2.core.helpers.CollectionUtils;
+import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.metadata.Version;
+import org.eclipse.equinox.p2.metadata.query.InstallableUnitQuery;
+import org.eclipse.equinox.p2.query.Collector;
+import org.eclipse.equinox.p2.query.IQueryResult;
+
+/**
+ * A map that stores {@link IInstallableUnit} instances in a way that is efficient to query
+ */
+public class IUMap {
+	/**
+	 * Iterator over all the {@link IInstallableUnit} instances in the map.
+	 */
+	public class MapIterator implements Iterator<IInstallableUnit> {
+		//iterator over the keys in UIMap
+		private final Iterator<Object> unitIterator;
+		private IInstallableUnit[] currentBucket;
+		private int bucketIndex = 0;
+		private IInstallableUnit nextElement = null;
+
+		MapIterator() {
+			super();
+			unitIterator = units.values().iterator();
+		}
+
+		public boolean hasNext() {
+			return positionNext();
+		}
+
+		public IInstallableUnit next() {
+			if (!positionNext())
+				throw new NoSuchElementException();
+
+			IInstallableUnit nxt = nextElement;
+			nextElement = null;
+			return nxt;
+		}
+
+		public void remove() {
+			throw new UnsupportedOperationException();
+		}
+
+		private boolean positionNext() {
+			if (nextElement != null)
+				return true;
+
+			if (currentBucket != null) {
+				nextElement = currentBucket[bucketIndex];
+				if (++bucketIndex == currentBucket.length) {
+					currentBucket = null;
+					bucketIndex = -1;
+				}
+				return true;
+			}
+
+			if (!unitIterator.hasNext())
+				return false;
+
+			Object val = unitIterator.next();
+			if (val instanceof IInstallableUnit)
+				nextElement = (IInstallableUnit) val;
+			else {
+				currentBucket = (IInstallableUnit[]) val;
+				nextElement = currentBucket[0];
+				bucketIndex = 1;
+			}
+			return true;
+		}
+	}
+
+	/**
+	 * Map<String,Object> mapping IU id to either arrays of iu's or a single iu with that id.
+	 */
+	final Map<String, Object> units = new HashMap<String, Object>();
+
+	public void add(IInstallableUnit unit) {
+		String key = unit.getId();
+		Object matching = units.get(key);
+		if (matching == null) {
+			units.put(key, unit);
+			return;
+		}
+
+		// We already had something at this key position. It must be
+		// preserved.
+		if (matching.getClass().isArray()) {
+			// Entry is an array. Add unique
+			IInstallableUnit[] iuArr = (IInstallableUnit[]) matching;
+			int idx = iuArr.length;
+			while (--idx >= 0)
+				if (iuArr[idx].equals(unit))
+					// This unit has already been added
+					return;
+
+			IInstallableUnit[] iuArrPlus = new IInstallableUnit[iuArr.length + 1];
+			System.arraycopy(iuArr, 0, iuArrPlus, 0, iuArr.length);
+			iuArrPlus[iuArr.length] = unit;
+			units.put(unit.getId(), iuArrPlus);
+		} else {
+			IInstallableUnit old = (IInstallableUnit) matching;
+			if (!old.equals(unit))
+				units.put(key, new IInstallableUnit[] {old, unit});
+		}
+	}
+
+	public void addAll(IInstallableUnit[] toAdd) {
+		for (int i = 0; i < toAdd.length; i++)
+			add(toAdd[i]);
+	}
+
+	public void addAll(Collection<IInstallableUnit> toAdd) {
+		for (IInstallableUnit unit : toAdd) {
+			add(unit);
+		}
+	}
+
+	public void clear() {
+		units.clear();
+	}
+
+	public Iterator<IInstallableUnit> iterator() {
+		return new MapIterator();
+	}
+
+	public IQueryResult<IInstallableUnit> query(InstallableUnitQuery query) {
+		//iterate over the entire map, or just the IU's with the given id
+		Iterator<IInstallableUnit> candidates;
+		if (query.getId() == null)
+			candidates = iterator();
+		else {
+			Object bucket = units.get(query.getId());
+			if (bucket == null)
+				return Collector.emptyCollector();
+
+			if (bucket.getClass().isArray())
+				candidates = CollectionUtils.unmodifiableList((IInstallableUnit[]) bucket).iterator();
+			else
+				candidates = Collections.<IInstallableUnit> singletonList((IInstallableUnit) bucket).iterator();
+		}
+		return query.perform(candidates);
+
+	}
+
+	public boolean contains(IInstallableUnit unit) {
+		return get(unit.getId(), unit.getVersion()) != null;
+	}
+
+	public IQueryResult<IInstallableUnit> get(String id) {
+		return internalGet(id, null);
+	}
+
+	private IQueryResult<IInstallableUnit> internalGet(String id, Version version) {
+		// TODO can probably optimize this
+		InstallableUnitQuery query = null;
+		if (version == null) {
+			if (id == null) {
+				query = InstallableUnitQuery.ANY;
+			} else {
+				query = new InstallableUnitQuery(id);
+			}
+		} else {
+			query = new InstallableUnitQuery(id, version);
+		}
+		return query(query);
+	}
+
+	public IInstallableUnit get(String id, Version version) {
+		IQueryResult<IInstallableUnit> result = internalGet(id, version);
+		return result.isEmpty() ? null : result.iterator().next();
+	}
+
+	public void remove(IInstallableUnit unit) {
+		String key = unit.getId();
+		Object matching = units.get(key);
+		if (matching == null)
+			return;
+
+		if (matching instanceof IInstallableUnit && matching.equals(unit)) {
+			units.remove(key);
+			return;
+		}
+
+		IInstallableUnit[] array = (IInstallableUnit[]) matching;
+		int idx = array.length;
+		while (--idx >= 0) {
+			if (unit.equals(array[idx])) {
+				if (array.length == 2) {
+					// We no longer need this array. Replace it with the
+					// entry that we keep.
+					units.put(key, idx == 0 ? array[1] : array[0]);
+					break;
+				}
+
+				// Shrink the array
+				IInstallableUnit[] newArray = new IInstallableUnit[array.length - 1];
+				if (idx > 0)
+					System.arraycopy(array, 0, newArray, 0, idx);
+				if (idx + 1 < array.length)
+					System.arraycopy(array, idx + 1, newArray, idx, array.length - (idx + 1));
+				units.put(key, newArray);
+				break;
+			}
+		}
+	}
+
+	public void removeAll(Collection<IInstallableUnit> toRemove) {
+		for (IInstallableUnit iu : toRemove)
+			remove(iu);
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/PublisherResult.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/PublisherResult.java
index 4609561..e5d143b 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/PublisherResult.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/PublisherResult.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2008, 2009 Code 9 and others. All rights reserved. This
+ * Copyright (c) 2008, 2010 Code 9 and others. All rights reserved. This
  * program and the accompanying materials are made available under the terms of
  * the Eclipse Public License v1.0 which accompanies this distribution, and is
  * available at http://www.eclipse.org/legal/epl-v10.html
@@ -12,21 +12,22 @@ package org.eclipse.equinox.p2.publisher;
 
 import java.util.*;
 import org.eclipse.core.runtime.IProgressMonitor;
-import org.eclipse.equinox.internal.p2.core.helpers.CollectionUtils;
-import org.eclipse.equinox.p2.metadata.*;
+import org.eclipse.equinox.internal.p2.metadata.IUMap;
+import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.metadata.Version;
 import org.eclipse.equinox.p2.metadata.query.InstallableUnitQuery;
 import org.eclipse.equinox.p2.query.*;
 
 public class PublisherResult implements IPublisherResult {
 
-	final Map<String, Set<IInstallableUnit>> rootIUs = new HashMap<String, Set<IInstallableUnit>>();
-	final Map<String, Set<IInstallableUnit>> nonRootIUs = new HashMap<String, Set<IInstallableUnit>>();
+	final IUMap rootIUs = new IUMap();
+	final IUMap nonRootIUs = new IUMap();
 
 	public void addIU(IInstallableUnit iu, String type) {
 		if (type == ROOT)
-			addIU(rootIUs, iu.getId(), iu);
+			rootIUs.add(iu);
 		if (type == NON_ROOT)
-			addIU(nonRootIUs, iu.getId(), iu);
+			nonRootIUs.add(iu);
 	}
 
 	public void addIUs(Collection<IInstallableUnit> ius, String type) {
@@ -34,29 +35,16 @@ public class PublisherResult implements IPublisherResult {
 			addIU(iu, type);
 	}
 
-	private void addIU(Map<String, Set<IInstallableUnit>> map, String id, IInstallableUnit iu) {
-		Set<IInstallableUnit> ius = map.get(id);
-		if (ius == null) {
-			ius = new HashSet<IInstallableUnit>(11);
-			map.put(id, ius);
-		}
-		ius.add(iu);
-	}
-
 	public IInstallableUnit getIU(String id, Version version, String type) {
-		if ((type == null || type == ROOT) && rootIUs.containsKey(id)) {
-			Collection<IInstallableUnit> ius = rootIUs.get(id);
-			for (IInstallableUnit iu : ius) {
-				if (iu.getVersion().equals(version))
-					return iu;
-			}
+		if (type == null || type == ROOT) {
+			IInstallableUnit result = rootIUs.get(id, version);
+			if (result != null)
+				return result;
 		}
-		if ((type == null || type == NON_ROOT) && nonRootIUs.containsKey(id)) {
-			Collection<IInstallableUnit> ius = nonRootIUs.get(id);
-			for (IInstallableUnit iu : ius) {
-				if (iu.getVersion().equals(version))
-					return iu;
-			}
+		if (type == null || type == NON_ROOT) {
+			IInstallableUnit result = nonRootIUs.get(id, version);
+			if (result != null)
+				return result;
 		}
 		return null;
 	}
@@ -65,13 +53,13 @@ public class PublisherResult implements IPublisherResult {
 	// matching IU non-deterministically.
 	public IInstallableUnit getIU(String id, String type) {
 		if (type == null || type == ROOT) {
-			Collection<IInstallableUnit> ius = rootIUs.get(id);
-			if (ius != null && ius.size() > 0)
+			IQueryResult<IInstallableUnit> ius = rootIUs.get(id);
+			if (!ius.isEmpty())
 				return ius.iterator().next();
 		}
 		if (type == null || type == NON_ROOT) {
-			Collection<IInstallableUnit> ius = nonRootIUs.get(id);
-			if (ius != null && ius.size() > 0)
+			IQueryResult<IInstallableUnit> ius = nonRootIUs.get(id);
+			if (!ius.isEmpty())
 				return ius.iterator().next();
 		}
 		return null;
@@ -82,30 +70,19 @@ public class PublisherResult implements IPublisherResult {
 	 */
 	public Collection<IInstallableUnit> getIUs(String id, String type) {
 		if (type == null) {
+			// TODO can this be optimized?
 			ArrayList<IInstallableUnit> result = new ArrayList<IInstallableUnit>();
-			result.addAll(id == null ? flatten(rootIUs.values()) : getIUs(rootIUs, id));
-			result.addAll(id == null ? flatten(nonRootIUs.values()) : getIUs(nonRootIUs, id));
+			result.addAll(rootIUs.get(id).toSet());
+			result.addAll(nonRootIUs.get(id).toSet());
 			return result;
 		}
 		if (type == ROOT)
-			return id == null ? flatten(rootIUs.values()) : rootIUs.get(id);
+			return rootIUs.get(id).toSet();
 		if (type == NON_ROOT)
-			return id == null ? flatten(nonRootIUs.values()) : nonRootIUs.get(id);
+			return nonRootIUs.get(id).toSet();
 		return null;
 	}
 
-	private Collection<IInstallableUnit> getIUs(Map<String, Set<IInstallableUnit>> ius, String id) {
-		Collection<IInstallableUnit> result = ius.get(id);
-		return result == null ? CollectionUtils.<IInstallableUnit> emptyList() : result;
-	}
-
-	protected List<IInstallableUnit> flatten(Collection<Set<IInstallableUnit>> values) {
-		ArrayList<IInstallableUnit> result = new ArrayList<IInstallableUnit>();
-		for (Set<IInstallableUnit> iuSet : values)
-			result.addAll(iuSet);
-		return result;
-	}
-
 	public void merge(IPublisherResult result, int mode) {
 		if (mode == MERGE_MATCHING) {
 			addIUs(result.getIUs(null, ROOT), ROOT);
@@ -119,18 +96,6 @@ public class PublisherResult implements IPublisherResult {
 		}
 	}
 
-	class QueryableMap implements IQueryable<IInstallableUnit> {
-		private Map<String, Set<IInstallableUnit>> map;
-
-		public QueryableMap(Map<String, Set<IInstallableUnit>> map) {
-			this.map = map;
-		}
-
-		public IQueryResult<IInstallableUnit> query(IQuery<IInstallableUnit> query, IProgressMonitor monitor) {
-			return query.perform(flatten(this.map.values()).iterator());
-		}
-	}
-
 	/**
 	 * Queries both the root and non root IUs
 	 */
@@ -143,8 +108,8 @@ public class PublisherResult implements IPublisherResult {
 		} else if (query instanceof PipedQuery<?>) {
 			return doPipedQuery((PipedQuery<IInstallableUnit>) query, monitor);
 		}
-		IQueryable<IInstallableUnit> nonRootQueryable = new QueryableMap(nonRootIUs);
-		IQueryable<IInstallableUnit> rootQueryable = new QueryableMap(rootIUs);
+		IQueryResult<IInstallableUnit> nonRootQueryable = nonRootIUs.query(InstallableUnitQuery.ANY);
+		IQueryResult<IInstallableUnit> rootQueryable = rootIUs.query(InstallableUnitQuery.ANY);
 		return new CompoundQueryable<IInstallableUnit>(nonRootQueryable, rootQueryable).query(query, monitor);
 	}
 
@@ -179,14 +144,11 @@ public class PublisherResult implements IPublisherResult {
 	}
 
 	private IQueryResult<IInstallableUnit> queryIU(InstallableUnitQuery query, IProgressMonitor monitor) {
+		IQueryResult<IInstallableUnit> rootResult = rootIUs.query(query);
+		IQueryResult<IInstallableUnit> nonRootResult = nonRootIUs.query(query);
 		Collector<IInstallableUnit> result = new Collector<IInstallableUnit>();
-		Collection<IInstallableUnit> matches = getIUs(query.getId(), null);
-		VersionRange queryRange = query.getRange();
-		for (IInstallableUnit match : matches) {
-			if (queryRange == null || queryRange.isIncluded(match.getVersion()))
-				if (!result.accept(match))
-					break;
-		}
+		result.addAll(rootResult);
+		result.addAll(nonRootResult);
 		return result;
 	}
 }

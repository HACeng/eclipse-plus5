commit 0d8fa48f0532760b16645c35a1c718a24e26ddcf
Author: John Arthorne <johna>
Date:   Fri Oct 17 20:38:15 2008 +0000

    Bug 200605 [prov] Consider IInstallableUnit helper methods

13	7	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/ApplicablePatchQuery.java
5	1	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/NewDependencyExpander.java
1	1	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/QueryableArray.java
2	7	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/resolution/ResolutionHelper.java
8	0	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/InstallableUnit.java
8	0	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/ResolvedInstallableUnit.java
8	0	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/IInstallableUnit.java
4	4	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/ProvidedCapability.java
4	12	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/query/CapabilityQuery.java
5	9	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/AnyRequiredCapabilityQuery.java
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/ApplicablePatchQuery.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/ApplicablePatchQuery.java
index 1518fb9..a35d744 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/ApplicablePatchQuery.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/ApplicablePatchQuery.java
@@ -11,8 +11,14 @@ package org.eclipse.equinox.internal.p2.director;
 import org.eclipse.equinox.internal.provisional.p2.metadata.*;
 import org.eclipse.equinox.internal.provisional.p2.query.Query;
 
+/**
+ * A query that accepts any patch that applies to a given installable unit.
+ */
 public class ApplicablePatchQuery extends Query {
 
+	/**
+	 * A query that matches any patch.
+	 */
 	public static final Query ANY = new Query() {
 		public boolean isMatch(Object candidate) {
 			return candidate instanceof IInstallableUnitPatch;
@@ -21,6 +27,11 @@ public class ApplicablePatchQuery extends Query {
 
 	IInstallableUnit iu;
 
+	/**
+	 * Creates a new patch query on the given installable unit. Patches that can
+	 * be applied to this unit will be accepted as matches by the query.
+	 * @param iu The unit to compare patches against
+	 */
 	public ApplicablePatchQuery(IInstallableUnit iu) {
 		this.iu = iu;
 	}
@@ -33,16 +44,11 @@ public class ApplicablePatchQuery extends Query {
 		if (scopeDescription.length == 0)
 			return true;
 
-		ProvidedCapability[] cap = iu.getProvidedCapabilities();
 		for (int i = 0; i < scopeDescription.length; i++) {
 			int matchedScopeEntry = scopeDescription[i].length;
 			for (int j = 0; j < scopeDescription[i].length; j++) {
-				for (int k = 0; k < cap.length; k++) {
-					if (cap[k].isSatisfiedBy(scopeDescription[i][j])) {
-						matchedScopeEntry--;
-						break;
-					}
-				}
+				if (iu.satisfies(scopeDescription[i][j]))
+					matchedScopeEntry--;
 			}
 			if (matchedScopeEntry == 0)
 				return true;
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/NewDependencyExpander.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/NewDependencyExpander.java
index ccb1245..2f54622 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/NewDependencyExpander.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/NewDependencyExpander.java
@@ -223,6 +223,10 @@ public class NewDependencyExpander {
 		public Copyright getCopyright() {
 			return wrapped.getCopyright();
 		}
+
+		public boolean satisfies(RequiredCapability candidate) {
+			return wrapped.satisfies(candidate);
+		}
 	}
 
 	static final int OperationWork = 100;
@@ -378,7 +382,7 @@ public class NewDependencyExpander {
 					RequiredCapability[] reqs = matches[i].getRequiredCapabilities();
 					boolean isReallyAFragment = false;
 					for (int j = 0; j < reqs.length; j++) {
-						isReallyAFragment = capForCurrent.isSatisfiedBy(reqs[j]);
+						isReallyAFragment = capForCurrent.satisfies(reqs[j]);
 					}
 					if (!isReallyAFragment)
 						continue;
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/QueryableArray.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/QueryableArray.java
index 38cc578..11067a7 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/QueryableArray.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/QueryableArray.java
@@ -59,7 +59,7 @@ public class QueryableArray implements IQueryable {
 		Set matchingIUs = new HashSet();
 		for (Iterator iterator = iuCapabilities.iterator(); iterator.hasNext();) {
 			IUCapability iuCapability = (IUCapability) iterator.next();
-			if (iuCapability.capability.isSatisfiedBy(requiredCapability))
+			if (iuCapability.capability.satisfies(requiredCapability))
 				matchingIUs.add(iuCapability.iu);
 		}
 		return matchingIUs;
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/resolution/ResolutionHelper.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/resolution/ResolutionHelper.java
index fb7a8e6..26b6d1f 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/resolution/ResolutionHelper.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/resolution/ResolutionHelper.java
@@ -133,17 +133,12 @@ public class ResolutionHelper {
 
 				// Check to make sure the host meets the requirements of the fragment
 				RequiredCapability reqsFromFragment[] = potentialFragment.getHost();
-				ProvidedCapability hostCapabilities[] = hostIU.getProvidedCapabilities();
 				boolean match = true;
 				boolean requirementMatched = false;
 				for (int l = 0; l < reqsFromFragment.length && match == true; l++) {
 					requirementMatched = false;
-					for (int m = 0; m < hostCapabilities.length; m++) {
-						if (hostCapabilities[m].isSatisfiedBy(reqsFromFragment[l])) {
-							requirementMatched = true;
-							break;
-						}
-					}
+					if (hostIU.satisfies(reqsFromFragment[l]))
+						requirementMatched = true;
 					if (requirementMatched == false) {
 						match = false;
 						break;
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/InstallableUnit.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/InstallableUnit.java
index cc60f6b..f01db4c 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/InstallableUnit.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/InstallableUnit.java
@@ -298,4 +298,12 @@ public class InstallableUnit implements IInstallableUnit {
 	public Copyright getCopyright() {
 		return copyright;
 	}
+
+	public boolean satisfies(RequiredCapability candidate) {
+		ProvidedCapability[] provides = getProvidedCapabilities();
+		for (int i = 0; i < provides.length; i++)
+			if (provides[i].satisfies(candidate))
+				return true;
+		return false;
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/ResolvedInstallableUnit.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/ResolvedInstallableUnit.java
index 821cea3..df1fb8f 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/ResolvedInstallableUnit.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/ResolvedInstallableUnit.java
@@ -162,4 +162,12 @@ public class ResolvedInstallableUnit implements IInstallableUnit {
 		return original.getCopyright();
 	}
 
+	public boolean satisfies(RequiredCapability candidate) {
+		ProvidedCapability[] provides = getProvidedCapabilities();
+		for (int i = 0; i < provides.length; i++)
+			if (provides[i].satisfies(candidate))
+				return true;
+		return false;
+	}
+
 }
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/IInstallableUnit.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/IInstallableUnit.java
index 3e43966..35cc0d6 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/IInstallableUnit.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/IInstallableUnit.java
@@ -219,6 +219,14 @@ public interface IInstallableUnit extends Comparable {
 	public boolean isSingleton();
 
 	/**
+	 * Returns whether this unit has a provided capability that satisfies the given 
+	 * required capability.
+	 * @return <code>true</code> if this unit satisfies the given required
+	 * capability, and <code>false</code> otherwise.
+	 */
+	public boolean satisfies(RequiredCapability candidate);
+
+	/**
 	 * Returns the unresolved equivalent of this installable unit. If this unit is
 	 * already unresolved, this method returns the receiver. Otherwise, this
 	 * method returns an installable unit with the same id and version, but without
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/ProvidedCapability.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/ProvidedCapability.java
index c3efb14..e720196 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/ProvidedCapability.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/ProvidedCapability.java
@@ -54,11 +54,11 @@ public class ProvidedCapability {
 	}
 
 	/**
-	 * TODO The name of this method is backwards. A provided capability does not
-	 * get satisfied - it is the required capability that is satisfied or not. It should be "satisfies"
-	 * or "isSatisfied"
+	 * Returns whether this provided capability satisfies the given required capability.
+	 * @return <code>true</code> if this capability satisfies the given required
+	 * capability, and <code>false</code> otherwise.
 	 */
-	public boolean isSatisfiedBy(RequiredCapability candidate) {
+	public boolean satisfies(RequiredCapability candidate) {
 		if (getName() == null || !getName().equals(candidate.getName()))
 			return false;
 		if (getNamespace() == null || !getNamespace().equals(candidate.getNamespace()))
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/query/CapabilityQuery.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/query/CapabilityQuery.java
index 216982f..3f8f86a 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/query/CapabilityQuery.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/query/CapabilityQuery.java
@@ -10,7 +10,8 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.provisional.p2.metadata.query;
 
-import org.eclipse.equinox.internal.provisional.p2.metadata.*;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.metadata.RequiredCapability;
 import org.eclipse.equinox.internal.provisional.p2.query.Query;
 
 /**
@@ -53,18 +54,9 @@ public class CapabilityQuery extends Query {
 		if (!(object instanceof IInstallableUnit))
 			return false;
 		IInstallableUnit candidate = (IInstallableUnit) object;
-		ProvidedCapability[] provides = candidate.getProvidedCapabilities();
-		for (int i = 0; i < required.length; i++) {
-			boolean satisfied = false;
-			for (int j = 0; j < provides.length; j++) {
-				if (provides[j].isSatisfiedBy(required[i])) {
-					satisfied = true;
-					break;
-				}
-			}
-			if (!satisfied)
+		for (int i = 0; i < required.length; i++)
+			if (!candidate.satisfies(required[i]))
 				return false;
-		}
 		return true;
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/AnyRequiredCapabilityQuery.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/AnyRequiredCapabilityQuery.java
index dd5fc44..c26f835 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/AnyRequiredCapabilityQuery.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/query/AnyRequiredCapabilityQuery.java
@@ -10,7 +10,8 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.query;
 
-import org.eclipse.equinox.internal.provisional.p2.metadata.*;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.metadata.RequiredCapability;
 import org.eclipse.equinox.internal.provisional.p2.query.Query;
 
 /**
@@ -34,14 +35,9 @@ public class AnyRequiredCapabilityQuery extends Query {
 		if (!(object instanceof IInstallableUnit))
 			return false;
 		IInstallableUnit candidate = (IInstallableUnit) object;
-		ProvidedCapability[] provides = candidate.getProvidedCapabilities();
-		for (int i = 0; i < requirements.length; i++) {
-			for (int j = 0; j < provides.length; j++) {
-				if (provides[j].isSatisfiedBy(requirements[i])) {
-					return true;
-				}
-			}
-		}
+		for (int i = 0; i < requirements.length; i++)
+			if (candidate.satisfies(requirements[i]))
+				return true;
 		return false;
 	}
 }

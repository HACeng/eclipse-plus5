commit 02c36d926c4c7a70405faeb23ececb03c064c445
Author: John Arthorne <johna>
Date:   Mon Nov 12 20:27:25 2007 +0000

    Bug 205447 [prov] - API cleanup - IInstallableUnitConstants

2	2	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/IUTransformationHelper.java
3	3	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/NewDependencyExpander.java
2	2	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/OperationGenerator.java
1	1	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/RequirementBasedFilter.java
1	2	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java
3	4	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
1	1	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java
2	3	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/installregistry/InstallRegistry.java
5	5	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
11	11	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java
1	1	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/InstallableUnit.java
106	26	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnit.java
0	35	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnitConstants.java
1	1	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnitFragment.java
3	3	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/RequiredCapability.java
1	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
3	3	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/AutomatedDirectorTest.java
8	8	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OperationGenerationTest.java
3	3	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OracleTest.java
6	6	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OracleTest2.java
2	2	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/UpdateTest.java
1	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/generator/EclipseSDK33Test.java
1	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/FragmentMethodTest.java
2	2	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/FragmentTest.java
1	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/MultipleIUAndFragmentTest.java
11	11	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/RecommendationTest.java
2	2	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/IUImplementationGroup.java
2	2	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/IUProfilePropertiesGroup.java
2	3	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKPolicies.java
1	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/RollbackAction.java
1	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/IUPropertiesGroup.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateAndInstallGroup.java
1	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
1	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUDetailsLabelProvider.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUGroupFilter.java
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/IUTransformationHelper.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/IUTransformationHelper.java
index 490e6b3..3a2cf7f 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/IUTransformationHelper.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/IUTransformationHelper.java
@@ -19,7 +19,7 @@ public class IUTransformationHelper {
 		ArrayList result = new ArrayList();
 		while (ius.hasNext()) {
 			IInstallableUnit current = (IInstallableUnit) ius.next();
-			result.add(new RequiredCapability(IInstallableUnit.IU_NAMESPACE, current.getId(), new VersionRange(current.getVersion(), true, current.getVersion(), true), null, optional, false));
+			result.add(new RequiredCapability(IInstallableUnit.NAMESPACE_IU, current.getId(), new VersionRange(current.getVersion(), true, current.getVersion(), true), null, optional, false));
 		}
 		return (RequiredCapability[]) result.toArray(new RequiredCapability[result.size()]);
 	}
@@ -28,7 +28,7 @@ public class IUTransformationHelper {
 		RequiredCapability[] result = new RequiredCapability[ius.length];
 		for (int i = 0; i < result.length; i++) {
 			IInstallableUnit current = ius[i];
-			result[i] = new RequiredCapability(IInstallableUnit.IU_NAMESPACE, current.getId(), new VersionRange(current.getVersion(), true, current.getVersion(), true), null, optional, false);
+			result[i] = new RequiredCapability(IInstallableUnit.NAMESPACE_IU, current.getId(), new VersionRange(current.getVersion(), true, current.getVersion(), true), null, optional, false);
 		}
 		return result;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/NewDependencyExpander.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/NewDependencyExpander.java
index 7d8fbcb..993f5c5 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/NewDependencyExpander.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/NewDependencyExpander.java
@@ -307,7 +307,7 @@ public class NewDependencyExpander {
 		String flavor = profile.getValue(Profile.PROP_FLAVOR);
 		if (flavor == null)
 			return new HashSet();
-		IInstallableUnit[][] picked = picker.findInstallableUnit(null, null, new RequiredCapability[] {new RequiredCapability(IInstallableUnit.FLAVOR_NAMESPACE, flavor, VersionRange.emptyRange, null, false, false)}, true /* fragmentsOnly */);
+		IInstallableUnit[][] picked = picker.findInstallableUnit(null, null, new RequiredCapability[] {new RequiredCapability(IInstallableUnit.NAMESPACE_FLAVOR, flavor, VersionRange.emptyRange, null, false, false)}, true /* fragmentsOnly */);
 		IInstallableUnit[] ius;
 		if (picked[0].length > 0)
 			ius = picked[0];
@@ -334,7 +334,7 @@ public class NewDependencyExpander {
 					continue;
 				}
 				//verify that each IU requires the current iu
-				ProvidedCapability capForCurrent = new ProvidedCapability(IInstallableUnit.IU_NAMESPACE, current.getId(), current.getVersion());
+				ProvidedCapability capForCurrent = new ProvidedCapability(IInstallableUnit.NAMESPACE_IU, current.getId(), current.getVersion());
 				Map toAdd = new HashMap();
 				for (int i = 0; i < matches.length; i++) {
 					RequiredCapability[] reqs = matches[i].getRequiredCapabilities();
@@ -577,7 +577,7 @@ public class NewDependencyExpander {
 	 */
 	private boolean isMeta(RequiredCapability requiredCapability) {
 		String namespace = requiredCapability.getNamespace();
-		return namespace.equals(IInstallableUnit.CAPABILITY_ECLIPSE_TYPES) || namespace.equals(IInstallableUnit.IU_KIND_NAMESPACE) || namespace.equals(IInstallableUnit.FLAVOR_NAMESPACE);
+		return namespace.equals(IInstallableUnit.CAPABILITY_ECLIPSE_TYPES) || namespace.equals(IInstallableUnit.NAMESPACE_IU_KIND) || namespace.equals(IInstallableUnit.NAMESPACE_FLAVOR);
 	}
 
 	private IInstallableUnit match(Collection close, IInstallableUnit picked) {
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/OperationGenerator.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/OperationGenerator.java
index 3c7da59..0317ebd 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/OperationGenerator.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/OperationGenerator.java
@@ -72,10 +72,10 @@ public class OperationGenerator {
 				//System.out.println("Can't update " + iuTo + " because another iu with same id is in the target state");
 				continue;
 			}
-			if (iuTo.getProperty(IInstallableUnitConstants.UPDATE_FROM) == null)
+			if (iuTo.getProperty(IInstallableUnit.PROP_UPDATE_FROM) == null)
 				continue;
 			//when the ui we update from is in the new state, skip (for example FROM is A, C, B & TO is C (update of 
-			Iterator updates = new CompoundIterator(new Iterator[] {from.iterator()}, iuTo.getProperty(IInstallableUnitConstants.UPDATE_FROM), new VersionRange(iuTo.getProperty(IInstallableUnitConstants.UPDATE_RANGE)), null, false);
+			Iterator updates = new CompoundIterator(new Iterator[] {from.iterator()}, iuTo.getProperty(IInstallableUnit.PROP_UPDATE_FROM), new VersionRange(iuTo.getProperty(IInstallableUnit.PROP_UPDATE_RANGE)), null, false);
 			IResolvedInstallableUnit iuFrom;
 			if (!updates.hasNext()) { //Nothing to udpate from.
 				continue;
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/RequirementBasedFilter.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/RequirementBasedFilter.java
index 01e0162..7788a30 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/RequirementBasedFilter.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/RequirementBasedFilter.java
@@ -20,7 +20,7 @@ public class RequirementBasedFilter extends IUFilter {
 
 	public boolean accept(IInstallableUnit iu) {
 		for (int i = 0; i < reqs.length; i++) {
-			if (reqs[i].getNamespace().equals(IInstallableUnit.IU_NAMESPACE) && reqs[i].getName().equals(iu.getId()) && reqs[i].getRange().isIncluded(iu.getVersion()))
+			if (reqs[i].getNamespace().equals(IInstallableUnit.NAMESPACE_IU) && reqs[i].getName().equals(iu.getId()) && reqs[i].getRange().isIncluded(iu.getVersion()))
 				return true;
 		}
 		return false;
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java
index d4976ca..9d5e685 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimpleDirector.java
@@ -19,7 +19,6 @@ import org.eclipse.equinox.p2.core.repository.IRepository;
 import org.eclipse.equinox.p2.director.*;
 import org.eclipse.equinox.p2.engine.*;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.metadata.IInstallableUnitConstants;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepositoryManager;
 import org.eclipse.osgi.util.NLS;
@@ -79,7 +78,7 @@ public class SimpleDirector implements IDirector {
 				return engineResult;
 			// mark the roots as such
 			for (int i = 0; i < installRoots.length; i++)
-				profile.setInstallableUnitProfileProperty(installRoots[i], IInstallableUnitConstants.PROFILE_ROOT_IU, Boolean.toString(true));
+				profile.setInstallableUnitProfileProperty(installRoots[i], IInstallableUnit.PROP_PROFILE_ROOT_IU, Boolean.toString(true));
 
 			return engineResult;
 		} finally {
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
index 9ede921..0c0fe95 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/SimplePlanner.java
@@ -16,7 +16,6 @@ import org.eclipse.equinox.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.p2.engine.Operand;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.metadata.IInstallableUnitConstants;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepositoryManager;
 import org.eclipse.equinox.p2.resolution.ResolutionHelper;
@@ -115,7 +114,7 @@ public class SimplePlanner implements IPlanner {
 		try {
 			MultiStatus result = new MultiStatus(DirectorActivator.PI_DIRECTOR, 1, Messages.Director_Become_Problems, null);
 
-			if (!Boolean.valueOf(target.getProperty(IInstallableUnitConstants.PROFILE_IU_KEY)).booleanValue()) {
+			if (!Boolean.valueOf(target.getProperty(IInstallableUnit.PROP_PROFILE_IU_KEY)).booleanValue()) {
 				result.add(new Status(IStatus.ERROR, DirectorActivator.PI_DIRECTOR, NLS.bind(Messages.Director_Unexpected_IU, target.getId())));
 				return new ProvisioningPlan(result);
 			}
@@ -252,8 +251,8 @@ public class SimplePlanner implements IPlanner {
 		IInstallableUnit[] allius = gatherAvailableInstallableUnits(null);
 		Set updates = new HashSet();
 		for (int i = 0; i < allius.length; i++) {
-			if (toUpdate.getId().equals(allius[i].getProperty(IInstallableUnitConstants.UPDATE_FROM))) {
-				if (toUpdate.getVersion().compareTo(allius[i].getVersion()) < 0 && new VersionRange(allius[i].getProperty(IInstallableUnitConstants.UPDATE_RANGE)).isIncluded(toUpdate.getVersion()))
+			if (toUpdate.getId().equals(allius[i].getProperty(IInstallableUnit.PROP_UPDATE_FROM))) {
+				if (toUpdate.getVersion().compareTo(allius[i].getVersion()) < 0 && new VersionRange(allius[i].getProperty(IInstallableUnit.PROP_UPDATE_RANGE)).isIncluded(toUpdate.getVersion()))
 					updates.add(allius[i]);
 			}
 		}
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java
index 18278d1..b8d6638 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/rollback/FormerState.java
@@ -61,7 +61,7 @@ public class FormerState {
 
 	IInstallableUnit profileToIU(Profile toConvert) {
 		InstallableUnitDescription result = new MetadataFactory.InstallableUnitDescription();
-		result.setProperty(IInstallableUnitConstants.PROFILE_IU_KEY, Boolean.TRUE.toString());
+		result.setProperty(IInstallableUnit.PROP_PROFILE_IU_KEY, Boolean.TRUE.toString());
 		result.setId(toConvert.getProfileId());
 		result.setVersion(new Version(0, 0, 0, Long.toString(System.currentTimeMillis())));
 		result.setRequiredCapabilities(IUTransformationHelper.toRequirements(toConvert.getInstallableUnits(), false));
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/installregistry/InstallRegistry.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/installregistry/InstallRegistry.java
index a72e890..a0686e7 100644
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/installregistry/InstallRegistry.java
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/p2/installregistry/InstallRegistry.java
@@ -27,7 +27,6 @@ import org.eclipse.equinox.p2.core.eventbus.SynchronousProvisioningListener;
 import org.eclipse.equinox.p2.core.location.AgentLocation;
 import org.eclipse.equinox.p2.engine.*;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.metadata.IInstallableUnitConstants;
 import org.eclipse.osgi.service.resolver.VersionRange;
 import org.eclipse.osgi.util.NLS;
 import org.osgi.framework.*;
@@ -63,7 +62,7 @@ public class InstallRegistry implements IInstallRegistry {
 						registry.addInstallableUnits(event.getOperand().second().getOriginal());
 					} else if (event.isUninstall() && event.getOperand().first() != null) {
 						IInstallableUnit original = event.getOperand().first().getOriginal();
-						String value = registry.getInstallableUnitProfileProperty(original, IInstallableUnitConstants.PROFILE_ROOT_IU);
+						String value = registry.getInstallableUnitProfileProperty(original, IInstallableUnit.PROP_PROFILE_ROOT_IU);
 						boolean isRoot = value != null && value.equals(Boolean.toString(true));
 						registry.removeInstallableUnits(original);
 						// TODO this is odd because I'm setting up a property for something
@@ -75,7 +74,7 @@ public class InstallRegistry implements IInstallRegistry {
 						// the engine.
 						// https://bugs.eclipse.org/bugs/show_bug.cgi?id=206077 
 						if (isRoot && event.getOperand().second() != null) {
-							registry.setInstallableUnitProfileProperty(event.getOperand().second().getOriginal(), IInstallableUnitConstants.PROFILE_ROOT_IU, Boolean.toString(true));
+							registry.setInstallableUnitProfileProperty(event.getOperand().second().getOriginal(), IInstallableUnit.PROP_PROFILE_ROOT_IU, Boolean.toString(true));
 						}
 					}
 				} else if (o instanceof CommitOperationEvent) {
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
index 7c6b510..624ae26 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
@@ -49,22 +49,22 @@ public class Generator {
 		root.setId(configurationIdentification);
 		root.setVersion(new Version(configurationVersion));
 		// TODO, bit of a hack but for now set the name of the IU to the ID.
-		root.setProperty(IInstallableUnitConstants.NAME, configurationIdentification);
+		root.setProperty(IInstallableUnit.PROP_NAME, configurationIdentification);
 
 		ArrayList reqsConfigurationUnits = new ArrayList(resultantIUs.size());
 		for (Iterator iterator = resultantIUs.iterator(); iterator.hasNext();) {
 			IInstallableUnit iu = (IInstallableUnit) iterator.next();
 			VersionRange range = new VersionRange(iu.getVersion(), true, iu.getVersion(), true);
-			reqsConfigurationUnits.add(new RequiredCapability(IInstallableUnit.IU_NAMESPACE, iu.getId(), range, iu.getFilter(), false, false));
+			reqsConfigurationUnits.add(new RequiredCapability(IInstallableUnit.NAMESPACE_IU, iu.getId(), range, iu.getFilter(), false, false));
 		}
 		root.setRequiredCapabilities((RequiredCapability[]) reqsConfigurationUnits.toArray(new RequiredCapability[reqsConfigurationUnits.size()]));
 		root.setApplicabilityFilter("");
 		root.setArtifacts(new IArtifactKey[0]);
 
 		root.setProperty("lineUp", "true");
-		root.setProperty(IInstallableUnitConstants.UPDATE_FROM, configurationIdentification);
-		root.setProperty(IInstallableUnitConstants.UPDATE_RANGE, VersionRange.emptyRange.toString());
-		ProvidedCapability groupCapability = new ProvidedCapability(IInstallableUnit.IU_KIND_NAMESPACE, "group", new Version("1.0.0"));
+		root.setProperty(IInstallableUnit.PROP_UPDATE_FROM, configurationIdentification);
+		root.setProperty(IInstallableUnit.PROP_UPDATE_RANGE, VersionRange.emptyRange.toString());
+		ProvidedCapability groupCapability = new ProvidedCapability(IInstallableUnit.NAMESPACE_IU_KIND, "group", new Version("1.0.0"));
 		root.setCapabilities(new ProvidedCapability[] {MetadataGeneratorHelper.createSelfCapability(configurationIdentification, new Version(configurationVersion)), groupCapability});
 		root.setTouchpointType(MetadataGeneratorHelper.TOUCHPOINT_ECLIPSE);
 		Map touchpointData = new HashMap();
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java
index be4e335..d855763 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java
@@ -28,7 +28,7 @@ import org.eclipse.osgi.util.ManifestElement;
 import org.osgi.framework.*;
 
 public class MetadataGeneratorHelper {
-	private static final String[] BUNDLE_IU_PROPERTY_MAP = {Constants.BUNDLE_NAME, IInstallableUnitConstants.NAME, Constants.BUNDLE_DESCRIPTION, IInstallableUnitConstants.DESCRIPTION, Constants.BUNDLE_VENDOR, IInstallableUnitConstants.PROVIDER, Constants.BUNDLE_CONTACTADDRESS, IInstallableUnitConstants.CONTACT, Constants.BUNDLE_COPYRIGHT, IInstallableUnitConstants.COPYRIGHT, Constants.BUNDLE_DOCURL, IInstallableUnitConstants.DOC_URL, Constants.BUNDLE_UPDATELOCATION, IInstallableUnitConstants.UPDATE_SITE};
+	private static final String[] BUNDLE_IU_PROPERTY_MAP = {Constants.BUNDLE_NAME, IInstallableUnit.PROP_NAME, Constants.BUNDLE_DESCRIPTION, IInstallableUnit.PROP_DESCRIPTION, Constants.BUNDLE_VENDOR, IInstallableUnit.PROP_PROVIDER, Constants.BUNDLE_CONTACTADDRESS, IInstallableUnit.PROP_CONTACT, Constants.BUNDLE_COPYRIGHT, IInstallableUnit.PROP_COPYRIGHT, Constants.BUNDLE_DOCURL, IInstallableUnit.PROP_DOC_URL, Constants.BUNDLE_UPDATELOCATION, IInstallableUnit.PROP_UPDATE_SITE};
 
 	private static final String CAPABILITY_TYPE_OSGI_PACKAGES = "osgi.packages"; //$NON-NLS-1$
 
@@ -39,7 +39,7 @@ public class MetadataGeneratorHelper {
 
 	private static final String ECLIPSE_EXTENSIBLE_API = "Eclipse-ExtensibleAPI"; //$NON-NLS-1$
 
-	private static final String IU_NAMESPACE = IInstallableUnit.IU_NAMESPACE;
+	private static final String IU_NAMESPACE = IInstallableUnit.NAMESPACE_IU;
 
 	private static final String LAUNCHER_ID_PREFIX = "org.eclipse.launcher"; //$NON-NLS-1$
 
@@ -108,7 +108,7 @@ public class MetadataGeneratorHelper {
 		cu.setHost(iuId, new VersionRange(iuVersion, true, versionMax, true));
 
 		//Adds capabilities for fragment, self, and describing the flavor supported
-		cu.setCapabilities(new ProvidedCapability[] {FRAGMENT_CAPABILITY, createSelfCapability(configUnitId, iuVersion), new ProvidedCapability(IInstallableUnit.FLAVOR_NAMESPACE, configurationFlavor, Version.emptyVersion)});
+		cu.setCapabilities(new ProvidedCapability[] {FRAGMENT_CAPABILITY, createSelfCapability(configUnitId, iuVersion), new ProvidedCapability(IInstallableUnit.NAMESPACE_FLAVOR, configurationFlavor, Version.emptyVersion)});
 
 		Map touchpointData = new HashMap();
 		touchpointData.put("install", "installBundle(bundle:${artifact})");
@@ -128,7 +128,7 @@ public class MetadataGeneratorHelper {
 		cu.setVersion(configUnitVersion);
 
 		//Adds capabilities for fragment, self, and describing the flavor supported
-		cu.setCapabilities(new ProvidedCapability[] {FRAGMENT_CAPABILITY, createSelfCapability(configUnitId, configUnitVersion), new ProvidedCapability(IInstallableUnit.FLAVOR_NAMESPACE, configurationFlavor, Version.emptyVersion)});
+		cu.setCapabilities(new ProvidedCapability[] {FRAGMENT_CAPABILITY, createSelfCapability(configUnitId, configUnitVersion), new ProvidedCapability(IInstallableUnit.NAMESPACE_FLAVOR, configurationFlavor, Version.emptyVersion)});
 
 		//Create a capability on bundles
 		RequiredCapability[] reqs = new RequiredCapability[] {new RequiredCapability(IInstallableUnit.CAPABILITY_ECLIPSE_TYPES, IInstallableUnit.CAPABILITY_ECLIPSE_BUNDLE, VersionRange.emptyRange, null, false, true)};
@@ -150,8 +150,8 @@ public class MetadataGeneratorHelper {
 		iu.setId(bd.getSymbolicName());
 		iu.setVersion(bd.getVersion());
 		iu.setFilter(bd.getPlatformFilter());
-		iu.setProperty(IInstallableUnitConstants.UPDATE_FROM, bd.getSymbolicName());
-		iu.setProperty(IInstallableUnitConstants.UPDATE_RANGE, VersionRange.emptyRange.toString());
+		iu.setProperty(IInstallableUnit.PROP_UPDATE_FROM, bd.getSymbolicName());
+		iu.setProperty(IInstallableUnit.PROP_UPDATE_RANGE, VersionRange.emptyRange.toString());
 
 		boolean isFragment = bd.getHost() != null;
 		boolean requiresAFragment = isFragment ? false : requireAFragment(bd, manifest);
@@ -243,9 +243,9 @@ public class MetadataGeneratorHelper {
 		iu.setId(id);
 		Version version = new Version(feature.getVersion());
 		iu.setVersion(version);
-		iu.setProperty(IInstallableUnitConstants.NAME, feature.getLabel());
-		iu.setProperty(IInstallableUnitConstants.UPDATE_FROM, id);
-		iu.setProperty(IInstallableUnitConstants.UPDATE_RANGE, VersionRange.emptyRange.toString());
+		iu.setProperty(IInstallableUnit.PROP_NAME, feature.getLabel());
+		iu.setProperty(IInstallableUnit.PROP_UPDATE_FROM, id);
+		iu.setProperty(IInstallableUnit.PROP_UPDATE_RANGE, VersionRange.emptyRange.toString());
 
 		FeatureEntry entries[] = feature.getEntries();
 		RequiredCapability[] required = new RequiredCapability[entries.length];
@@ -255,7 +255,7 @@ public class MetadataGeneratorHelper {
 		}
 		iu.setRequiredCapabilities(required);
 		iu.setTouchpointType(TouchpointType.NONE);
-		ProvidedCapability groupCapability = new ProvidedCapability(IInstallableUnit.IU_KIND_NAMESPACE, "group", new Version("1.0.0"));
+		ProvidedCapability groupCapability = new ProvidedCapability(IInstallableUnit.NAMESPACE_IU_KIND, "group", new Version("1.0.0"));
 		iu.setCapabilities(new ProvidedCapability[] {createSelfCapability(id, version), groupCapability});
 		return MetadataFactory.createInstallableUnit(iu);
 	}
@@ -352,7 +352,7 @@ public class MetadataGeneratorHelper {
 			configurationData += " chmod(targetDir:${installFolder}, targetFile:" + launcher.getName() + ", permissions:755);";
 		touchpointData.put("install", configurationData);
 		cu.addTouchpointData(new TouchpointData(touchpointData));
-		resultantIUs.add(MetadataFactory.createInstallableUnit(cu));
+		resultantIUs.add(MetadataFactory.createInstallableUnitFragment(cu));
 
 		//Create the artifact descriptor
 		return createArtifactDescriptor(key, launcher, false, true);
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/InstallableUnit.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/InstallableUnit.java
index 86935ff..1bdaf66 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/InstallableUnit.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/InstallableUnit.java
@@ -14,7 +14,7 @@ import org.eclipse.equinox.internal.p2.core.helpers.OrderedProperties;
 import org.eclipse.equinox.p2.metadata.*;
 import org.osgi.framework.Version;
 
-public class InstallableUnit implements IInstallableUnitConstants, IInstallableUnit, InternalInstallableUnit {
+public class InstallableUnit implements IInstallableUnit, InternalInstallableUnit {
 
 	private static final OrderedProperties NO_PROPERTIES = new OrderedProperties();
 	private static final ProvidedCapability[] NO_PROVIDES = new ProvidedCapability[0];
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnit.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnit.java
index baba4d3..cda7671 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnit.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnit.java
@@ -13,31 +13,113 @@ import org.osgi.framework.Version;
 
 public interface IInstallableUnit extends Comparable {
 
+	// TODO: These two constants need to be moved somewhere more appropriate...
+	public static final String CAPABILITY_ECLIPSE_BUNDLE = "bundle"; //$NON-NLS-1$
+	public static final String CAPABILITY_ECLIPSE_TYPES = "org.eclipse.equinox.p2.eclipsetouchpoint.types"; //$NON-NLS-1$
 	/**
-	 * A capability namespace representing a particular kind of installable unit.
-	 * For example, an InstallableUnit may specify that it provides the "group" kind
-	 * capability to express that it represents a group of installable units. 
+	 * A capability namespace representing a particular profile flavor.
 	 */
-	public static final String IU_KIND_NAMESPACE = "org.eclipse.equinox.p2.type"; //$NON-NLS-1$
+	public static final String NAMESPACE_FLAVOR = "flavor"; //$NON-NLS-1$
+
 	/**
 	 * A capability namespace representing a particular InstallableUnit by name.
 	 * Each InstallableUnit automatically provides an instance of this namespace representing
 	 * itself, and other InstallableUnits can require such a capability to state that they
 	 * require a particular InstallableUnit to be present.
 	 */
-	public static final String IU_NAMESPACE = "org.eclipse.equinox.p2.iunamespace"; //$NON-NLS-1$
+	public static final String NAMESPACE_IU = "org.eclipse.equinox.p2.iunamespace"; //$NON-NLS-1$
 	/**
-	 * A capability namespace representing a particular profile flavor.
+	 * A capability namespace representing a particular kind of installable unit.
+	 * For example, an InstallableUnit may specify that it provides the "group" kind
+	 * capability to express that it represents a group of installable units. 
 	 */
-	public static final String FLAVOR_NAMESPACE = "flavor"; //$NON-NLS-1$
+	public static final String NAMESPACE_IU_KIND = "org.eclipse.equinox.p2.type"; //$NON-NLS-1$
 
-	// TODO: These two constants need to be moved somewhere more appropriate...
-	public static final String CAPABILITY_ECLIPSE_TYPES = "org.eclipse.equinox.p2.eclipsetouchpoint.types"; //$NON-NLS-1$
-	public static final String CAPABILITY_ECLIPSE_BUNDLE = "bundle"; //$NON-NLS-1$
+	//TODO This is not the ideal location for these constants
+	public static final String PROP_PROFILE_IU_KEY = "profileIU"; //$NON-NLS-1$	 
+	public static final String PROP_PROFILE_ROOT_IU = "profileRootIU"; //$NON-NLS-1$
 
-	public abstract TouchpointType getTouchpointType();
+	/**
+	 * A property key (value <code>"equinox.p2.contact"</code>) representing a 
+	 * String property containing a contact address where problems can be reported, 
+	 * such as an email address.
+	 * 
+	 * @see #getProperty(String)
+	 */
+	public static final String PROP_CONTACT = "equinox.p2.contact"; //$NON-NLS-1$
+	/**
+	 * A property key (value <code>"equinox.p2.copyright"</code>) representing a 
+	 * String property containing copyright information about the installable unit.
+	 * 
+	 * @see #getProperty(String)
+	 */
+	public static final String PROP_COPYRIGHT = "equinox.p2.copyright"; //$NON-NLS-1$
+	/**
+	 * A property key (value <code>"equinox.p2.description"</code>) representing a 
+	 * String property containing a human-readable description of the installable unit.
+	 * 
+	 * @see #getProperty(String)
+	 */
+	public static final String PROP_DESCRIPTION = "equinox.p2.description"; //$NON-NLS-1$
+	/**
+	 * A property key (value <code>"equinox.p2.doc.url"</code>) representing a 
+	 * String property containing a URL for documentation about the installable unit.
+	 * 
+	 * @see #getProperty(String)
+	 */
+	public static final String PROP_DOC_URL = "equinox.p2.doc.url"; //$NON-NLS-1$
+	/**
+	 * A property key (value <code>"equinox.p2.license"</code>) representing a 
+	 * String property containing license information about the installable unit.
+	 * 
+	 * @see #getProperty(String)
+	 */
+	public static final String PROP_LICENSE = "equinox.p2.license"; //$NON-NLS-1$
+	/**
+	 * A property key (value <code>"equinox.p2.name"</code>) representing a 
+	 * String property containing a human-readable name for the installable unit.
+	 * 
+	 * @see #getProperty(String)
+	 */
+	public static final String PROP_NAME = "equinox.p2.name"; //$NON-NLS-1$
+	/**
+	 * A property key (value <code>"equinox.p2.provider"</code>) representing a 
+	 * String property containing information about the vendor or provider of the 
+	 * installable unit.
+	 * 
+	 * @see #getProperty(String)
+	 */
+	public static final String PROP_PROVIDER = "equinox.p2.provider"; //$NON-NLS-1$
+	/**
+	 * A property key (value <code>"equinox.p2.update.from"</code>) representing a 
+	 * String property containing the id of an installable unit that this installable unit
+	 * is an update for.
+	 * 
+	 * @see #getProperty(String)
+	 */
+	public static final String PROP_UPDATE_FROM = "equinox.p2.update.from"; //$NON-NLS-1$
+	/**
+	 * A property key (value <code>"equinox.p2.update.range"</code>) representing a 
+	 * String property containing the version range of an installable unit that this installable unit
+	 * is an update for.
+	 * 
+	 * @see #getProperty(String)
+	 */
+	public static final String PROP_UPDATE_RANGE = "equinox.p2.update.range"; //$NON-NLS-1$
+	/**
+	 * A property key (value <code>"equinox.p2.update.site"</code>) representing a 
+	 * String property containing the URL of the Web site or repository where updates for this 
+	 * installable unit can be obtained.
+	 * 
+	 * @see #getProperty(String)
+	 */
+	public static final String PROP_UPDATE_SITE = "equinox.p2.update.site"; //$NON-NLS-1$
 
-	public abstract String getId();
+	public abstract void accept(IMetadataVisitor visitor);
+
+	public abstract String getApplicabilityFilter();
+
+	public abstract IArtifactKey[] getArtifacts();
 
 	/**
 	 * Returns the filter on this installable unit. The filter is matched against
@@ -48,17 +130,7 @@ public interface IInstallableUnit extends Comparable {
 	 */
 	public abstract String getFilter();
 
-	public abstract Version getVersion();
-
-	public abstract IArtifactKey[] getArtifacts();
-
-	public abstract RequiredCapability[] getRequiredCapabilities();
-
-	public abstract ProvidedCapability[] getProvidedCapabilities();
-
-	public abstract boolean isSingleton();
-
-	public abstract String getProperty(String key);
+	public abstract String getId();
 
 	/**
 	 * Get an <i>unmodifiable copy</i> of the properties
@@ -68,11 +140,19 @@ public interface IInstallableUnit extends Comparable {
 	 */
 	public abstract Map getProperties();
 
+	public abstract String getProperty(String key);
+
+	public abstract ProvidedCapability[] getProvidedCapabilities();
+
+	public abstract RequiredCapability[] getRequiredCapabilities();
+
 	public abstract TouchpointData[] getTouchpointData();
 
-	public abstract boolean isFragment();
+	public abstract TouchpointType getTouchpointType();
 
-	public abstract String getApplicabilityFilter();
+	public abstract Version getVersion();
 
-	public abstract void accept(IMetadataVisitor visitor);
+	public abstract boolean isFragment();
+
+	public abstract boolean isSingleton();
 }
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnitConstants.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnitConstants.java
deleted file mode 100644
index 99b5774..0000000
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnitConstants.java
+++ /dev/null
@@ -1,35 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others. All rights reserved. This
- * program and the accompanying materials are made available under the terms of
- * the Eclipse Public License v1.0 which accompanies this distribution, and is
- * available at http://www.eclipse.org/legal/epl-v10.html
- * 
- * Contributors: IBM Corporation - initial API and implementation
- ******************************************************************************/
-
-package org.eclipse.equinox.p2.metadata;
-
-/**
- * 	Definitions for constants associated with InstallableUnits.
- */
-public interface IInstallableUnitConstants {
-
-	/*
-	 *  Keys for common properties that optionally 
-	 *  be defined in InstallableUnits.
-	 */
-	public String NAME = "equinox.p2.name"; //$NON-NLS-1$
-	public String DESCRIPTION = "equinox.p2.description"; //$NON-NLS-1$
-	public String DOC_URL = "equinox.p2.doc.url"; //$NON-NLS-1$
-	public String PROVIDER = "equinox.p2.provider"; //$NON-NLS-1$
-	public String CONTACT = "equinox.p2.contact"; //$NON-NLS-1$
-	public String LICENSE = "equinox.p2.license"; //$NON-NLS-1$
-	public String COPYRIGHT = "equinox.p2.copyright"; //$NON-NLS-1$
-	public String UPDATE_SITE = "equinox.p2.update.site"; //$NON-NLS-1$
-	public String UPDATE_FROM = "equinox.p2.update.from"; //$NON-NLS-1$
-	public String UPDATE_RANGE = "equinox.p2.update.range"; //$NON-NLS-1$
-
-	//TODO This is not the ideal location for these constants
-	public static final String PROFILE_IU_KEY = "profileIU"; //$NON-NLS-1$	 
-	public static final String PROFILE_ROOT_IU = "profileRootIU"; //$NON-NLS-1$
-}
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnitFragment.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnitFragment.java
index 03e7e84..7e065bc 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnitFragment.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnitFragment.java
@@ -13,7 +13,7 @@ import org.osgi.framework.Version;
 
 public interface IInstallableUnitFragment extends IInstallableUnit {
 
-	public static final ProvidedCapability FRAGMENT_CAPABILITY = new ProvidedCapability(IU_KIND_NAMESPACE, "iu.fragment", new Version(1, 0, 0)); //$NON-NLS-1$
+	public static final ProvidedCapability FRAGMENT_CAPABILITY = new ProvidedCapability(NAMESPACE_IU_KIND, "iu.fragment", new Version(1, 0, 0)); //$NON-NLS-1$
 
 	public abstract String getHostId();
 
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/RequiredCapability.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/RequiredCapability.java
index f3410e4..4928cbd 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/RequiredCapability.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/RequiredCapability.java
@@ -22,8 +22,8 @@ import org.eclipse.osgi.service.resolver.VersionRange;
  * capability namespaces. Some well-known namespaces are introduced directly
  * by the provisioning framework.
  * 
- * @see IInstallableUnit#IU_KIND_NAMESPACE
- * @see IInstallableUnit#IU_NAMESPACE
+ * @see IInstallableUnit#NAMESPACE_IU_KIND
+ * @see IInstallableUnit#NAMESPACE_IU
  */
 public class RequiredCapability {
 
@@ -46,7 +46,7 @@ public class RequiredCapability {
 	 * and <code>false</code> otherwise.
 	 */
 	public static RequiredCapability createRequiredCapabilityForName(String name, VersionRange versionRange, boolean optional) {
-		return new RequiredCapability(IInstallableUnit.IU_NAMESPACE, name, versionRange, null, optional, false);
+		return new RequiredCapability(IInstallableUnit.NAMESPACE_IU, name, versionRange, null, optional, false);
 	}
 
 	public RequiredCapability(String namespace, String name, VersionRange range) {
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
index ed267e9..aea0b04 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
@@ -357,7 +357,7 @@ public class AbstractProvisioningTest extends TestCase {
 	 * 	Get the 'self' capability for the given installable unit.
 	 */
 	private static ProvidedCapability getSelfCapability(String installableUnitId, Version installableUnitVersion) {
-		return new ProvidedCapability(IInstallableUnit.IU_NAMESPACE, installableUnitId, installableUnitVersion);
+		return new ProvidedCapability(IInstallableUnit.NAMESPACE_IU, installableUnitId, installableUnitVersion);
 	}
 
 	private static void indent(OutputStream output, int indent) {
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/AutomatedDirectorTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/AutomatedDirectorTest.java
index 0a8192b..b58a93b 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/AutomatedDirectorTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/AutomatedDirectorTest.java
@@ -47,7 +47,7 @@ public class AutomatedDirectorTest extends AbstractProvisioningTest {
 
 		// The IU to be installed
 		String filter = createFilter("FilterKey", "true");
-		RequiredCapability capability = new RequiredCapability(IInstallableUnit.IU_NAMESPACE, requiredIU.getId(), ANY_VERSION, filter, false, false);
+		RequiredCapability capability = new RequiredCapability(IInstallableUnit.NAMESPACE_IU, requiredIU.getId(), ANY_VERSION, filter, false, false);
 		IInstallableUnit toInstallIU = createIU("toInstall." + getName(), new RequiredCapability[] {capability});
 
 		IInstallableUnit[] allUnits = new IInstallableUnit[] {requiredIU, toInstallIU};
@@ -174,7 +174,7 @@ public class AutomatedDirectorTest extends AbstractProvisioningTest {
 		//The IU that is needed
 		IInstallableUnit requiredIU = createIU("required." + getName());
 
-		RequiredCapability capability = new RequiredCapability(IInstallableUnit.IU_NAMESPACE, requiredIU.getId(), null, null, false, false);
+		RequiredCapability capability = new RequiredCapability(IInstallableUnit.NAMESPACE_IU, requiredIU.getId(), null, null, false, false);
 		IInstallableUnit toInstallIU = createIU("toInstall." + getName(), new RequiredCapability[] {capability});
 
 		IInstallableUnit[] allUnits = new IInstallableUnit[] {requiredIU, toInstallIU};
@@ -200,7 +200,7 @@ public class AutomatedDirectorTest extends AbstractProvisioningTest {
 		//The IU that exports the capability
 		IInstallableUnit requiredIU = createIU("required." + getName());
 
-		RequiredCapability capability = new RequiredCapability(IInstallableUnit.IU_NAMESPACE, requiredIU.getId(), ANY_VERSION, null, false, false);
+		RequiredCapability capability = new RequiredCapability(IInstallableUnit.NAMESPACE_IU, requiredIU.getId(), ANY_VERSION, null, false, false);
 		IInstallableUnit toInstallIU = createIU("toInstall." + getName(), new RequiredCapability[] {capability});
 
 		IInstallableUnit[] allUnits = new IInstallableUnit[] {requiredIU, toInstallIU};
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OperationGenerationTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OperationGenerationTest.java
index f5ab19f..39b2f06 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OperationGenerationTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OperationGenerationTest.java
@@ -87,14 +87,14 @@ public class OperationGenerationTest extends AbstractProvisioningTest {
 		InstallableUnitDescription b = new MetadataFactory.InstallableUnitDescription();
 		b.setId("b");
 		b.setVersion(new Version(1, 0, 0));
-		b.setProperty(IInstallableUnitConstants.UPDATE_FROM, "a");
-		b.setProperty(IInstallableUnitConstants.UPDATE_RANGE, "[1.0.0, 2.0.0)");
+		b.setProperty(IInstallableUnit.PROP_UPDATE_FROM, "a");
+		b.setProperty(IInstallableUnit.PROP_UPDATE_RANGE, "[1.0.0, 2.0.0)");
 
 		InstallableUnitDescription c = new MetadataFactory.InstallableUnitDescription();
 		c.setId("c");
 		c.setVersion(new Version(1, 0, 0));
-		c.setProperty(IInstallableUnitConstants.UPDATE_FROM, "a");
-		c.setProperty(IInstallableUnitConstants.UPDATE_RANGE, "[2.0.0, 2.3.0)");
+		c.setProperty(IInstallableUnit.PROP_UPDATE_FROM, "a");
+		c.setProperty(IInstallableUnit.PROP_UPDATE_RANGE, "[2.0.0, 2.3.0)");
 
 		Collection from;
 		from = new ArrayList();
@@ -118,8 +118,8 @@ public class OperationGenerationTest extends AbstractProvisioningTest {
 		InstallableUnitDescription b = new MetadataFactory.InstallableUnitDescription();
 		b.setId("b");
 		b.setVersion(new Version(1, 0, 0));
-		b.setProperty(IInstallableUnitConstants.UPDATE_FROM, "a");
-		b.setProperty(IInstallableUnitConstants.UPDATE_RANGE, "[1.0.0, 3.0.0)");
+		b.setProperty(IInstallableUnit.PROP_UPDATE_FROM, "a");
+		b.setProperty(IInstallableUnit.PROP_UPDATE_RANGE, "[1.0.0, 3.0.0)");
 
 		Collection from;
 		from = new ArrayList();
@@ -141,8 +141,8 @@ public class OperationGenerationTest extends AbstractProvisioningTest {
 		InstallableUnitDescription b = new MetadataFactory.InstallableUnitDescription();
 		b.setId("b");
 		b.setVersion(new Version(1, 0, 0));
-		b.setProperty(IInstallableUnitConstants.UPDATE_FROM, "a");
-		b.setProperty(IInstallableUnitConstants.UPDATE_RANGE, "[1.0.0, 2.0.0)");
+		b.setProperty(IInstallableUnit.PROP_UPDATE_FROM, "a");
+		b.setProperty(IInstallableUnit.PROP_UPDATE_RANGE, "[1.0.0, 2.0.0)");
 
 		Collection from;
 		from = new ArrayList();
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OracleTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OracleTest.java
index 7608d22..2c87ef8 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OracleTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OracleTest.java
@@ -29,15 +29,15 @@ public class OracleTest extends AbstractProvisioningTest {
 	Profile profile;
 
 	protected void setUp() throws Exception {
-		RequiredCapability[] requires = createRequiredCapabilities(IInstallableUnit.IU_NAMESPACE, "C", new VersionRange("[1.0.0, 2.0.0)"), null);
+		RequiredCapability[] requires = createRequiredCapabilities(IInstallableUnit.NAMESPACE_IU, "C", new VersionRange("[1.0.0, 2.0.0)"), null);
 		a1 = createIU("A", requires, true);
 
-		requires = createRequiredCapabilities(IInstallableUnit.IU_NAMESPACE, "D", new VersionRange("[1.0.0, 3.0.0)"), null);
+		requires = createRequiredCapabilities(IInstallableUnit.NAMESPACE_IU, "D", new VersionRange("[1.0.0, 3.0.0)"), null);
 		c1 = createIU("C", requires, true);
 
 		d1 = createIU("D", DEFAULT_VERSION, true);
 
-		requires = createRequiredCapabilities(IInstallableUnit.IU_NAMESPACE, "D", new VersionRange("[2.0.0, 3.0.0)"), null);
+		requires = createRequiredCapabilities(IInstallableUnit.NAMESPACE_IU, "D", new VersionRange("[2.0.0, 3.0.0)"), null);
 		b1 = createIU("B", requires, true);
 
 		d2 = createIU("D", new Version(2, 0, 0), true);
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OracleTest2.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OracleTest2.java
index a95616c..c94b3ad 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OracleTest2.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OracleTest2.java
@@ -29,22 +29,22 @@ public class OracleTest2 extends AbstractProvisioningTest {
 	Profile profile;
 
 	protected void setUp() throws Exception {
-		RequiredCapability[] requires = createRequiredCapabilities(IInstallableUnit.IU_NAMESPACE, "C", new VersionRange("[1.0.0, 2.0.0)"), null);
+		RequiredCapability[] requires = createRequiredCapabilities(IInstallableUnit.NAMESPACE_IU, "C", new VersionRange("[1.0.0, 2.0.0)"), null);
 		a1 = createIU("A", requires, true);
 
 		c1 = createIU("C", DEFAULT_VERSION, true);
 
-		requires = createRequiredCapabilities(IInstallableUnit.IU_NAMESPACE, "C", new VersionRange("[2.0.0, 3.0.0)"), null);
+		requires = createRequiredCapabilities(IInstallableUnit.NAMESPACE_IU, "C", new VersionRange("[2.0.0, 3.0.0)"), null);
 		Map properties = new HashMap();
-		properties.put(IInstallableUnitConstants.UPDATE_FROM, "A");
-		properties.put(IInstallableUnitConstants.UPDATE_RANGE, "[1.0.0, 2.3.0)");
+		properties.put(IInstallableUnit.PROP_UPDATE_FROM, "A");
+		properties.put(IInstallableUnit.PROP_UPDATE_RANGE, "[1.0.0, 2.3.0)");
 		a2 = createIU("A", new Version(2, 0, 0), requires, properties, true);
 
 		b1 = createIU("B", DEFAULT_VERSION, requires, NO_PROPERTIES, true);
 
 		properties.clear();
-		properties.put(IInstallableUnitConstants.UPDATE_FROM, "C");
-		properties.put(IInstallableUnitConstants.UPDATE_RANGE, "[1.0.0, 2.3.0)");
+		properties.put(IInstallableUnit.PROP_UPDATE_FROM, "C");
+		properties.put(IInstallableUnit.PROP_UPDATE_RANGE, "[1.0.0, 2.3.0)");
 		c2 = createIU("C", new Version(2, 0, 0), NO_REQUIRES, properties, true);
 
 		createTestMetdataRepository(new IInstallableUnit[] {a1, c1});
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/UpdateTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/UpdateTest.java
index 299ab63..cf57076 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/UpdateTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/UpdateTest.java
@@ -36,10 +36,10 @@ public class UpdateTest extends AbstractProvisioningTest {
 
 		f1_4 = createIU("f1", new Version(1, 4, 0), true);
 
-		RequiredCapability[] requires = createRequiredCapabilities(IInstallableUnit.IU_NAMESPACE, "f1", new VersionRange("[1.0.0, 1.3.0)"), null);
+		RequiredCapability[] requires = createRequiredCapabilities(IInstallableUnit.NAMESPACE_IU, "f1", new VersionRange("[1.0.0, 1.3.0)"), null);
 		fa = createIU("fa", requires, false);
 
-		requires = createRequiredCapabilities(IInstallableUnit.IU_NAMESPACE, "f1", new VersionRange("[1.0.0, 1.4.0)"), null);
+		requires = createRequiredCapabilities(IInstallableUnit.NAMESPACE_IU, "f1", new VersionRange("[1.0.0, 1.4.0)"), null);
 		fap = createIU("fa", new Version(1, 1, 0), requires, NO_PROPERTIES, false);
 
 		createTestMetdataRepository(new IInstallableUnit[] {f1, fa});
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/generator/EclipseSDK33Test.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/generator/EclipseSDK33Test.java
index 7bcf967..e028eca 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/generator/EclipseSDK33Test.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/generator/EclipseSDK33Test.java
@@ -88,7 +88,7 @@ public class EclipseSDK33Test extends AbstractProvisioningTest {
 	private void assertGroup(IInstallableUnit unit) {
 		ProvidedCapability[] capabilities = unit.getProvidedCapabilities();
 		for (int i = 0; i < capabilities.length; i++) {
-			if (capabilities[i].getNamespace().equals(IInstallableUnit.IU_KIND_NAMESPACE) && capabilities[i].getName().equals("group"))
+			if (capabilities[i].getNamespace().equals(IInstallableUnit.NAMESPACE_IU_KIND) && capabilities[i].getName().equals("group"))
 				return;
 		}
 		fail("IU is not a group:" + unit);
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/FragmentMethodTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/FragmentMethodTest.java
index d32e66b..3669b40 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/FragmentMethodTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/FragmentMethodTest.java
@@ -76,7 +76,7 @@ public class FragmentMethodTest extends TestCase {
 
 		//The fragment does not contain iu namespace
 		for (int i = 0; i < initialFragmentCapabilities.length; i++) {
-			if (initialFragmentCapabilities[i].getNamespace().equals(IInstallableUnit.IU_NAMESPACE)) {
+			if (initialFragmentCapabilities[i].getNamespace().equals(IInstallableUnit.NAMESPACE_IU)) {
 				assertDoesNotContain(mergedCapabilities, initialFragmentCapabilities[i]);
 				break;
 			}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/FragmentTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/FragmentTest.java
index 02a0537..9cf11e1 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/FragmentTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/FragmentTest.java
@@ -86,8 +86,8 @@ public class FragmentTest extends AbstractProvisioningTest {
 		IInstallableUnit iu = createEclipseIU("ui.test1");
 		ProvidedCapability[] cap = iu.getProvidedCapabilities();
 		for (int i = 0; i < cap.length; i++) {
-			if (cap[i].getNamespace().equals(IInstallableUnit.IU_NAMESPACE)) {
-				assertEquals(cap[i].getNamespace(), IInstallableUnit.IU_NAMESPACE);
+			if (cap[i].getNamespace().equals(IInstallableUnit.NAMESPACE_IU)) {
+				assertEquals(cap[i].getNamespace(), IInstallableUnit.NAMESPACE_IU);
 				assertEquals(cap[i].getName(), iu.getId());
 				return;
 			}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/MultipleIUAndFragmentTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/MultipleIUAndFragmentTest.java
index 4577528..52ac3b3 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/MultipleIUAndFragmentTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/MultipleIUAndFragmentTest.java
@@ -60,7 +60,7 @@ public class MultipleIUAndFragmentTest extends AbstractProvisioningTest {
 	}
 
 	private static IInstallableUnit createIUWithDependencyOn(String iuName, String dependencyOn) {
-		RequiredCapability[] requires = new RequiredCapability[] {new RequiredCapability(IInstallableUnit.IU_NAMESPACE, dependencyOn, VersionRange.emptyRange, null, false, true)};
+		RequiredCapability[] requires = new RequiredCapability[] {new RequiredCapability(IInstallableUnit.NAMESPACE_IU, dependencyOn, VersionRange.emptyRange, null, false, true)};
 		return createEclipseIU(iuName, DEFAULT_VERSION, requires, NO_TP_DATA);
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/RecommendationTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/RecommendationTest.java
index 768926b..962cf19 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/RecommendationTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/RecommendationTest.java
@@ -47,28 +47,28 @@ public class RecommendationTest extends AbstractProvisioningTest {
 
 		//The recommendations to be used
 		RequiredCapability applyOn, newValue;
-		applyOn = new RequiredCapability(IInstallableUnit.IU_NAMESPACE, "iu1", new VersionRange("[1.0, 2.0)"), null, false, false);
-		newValue = new RequiredCapability(IInstallableUnit.IU_NAMESPACE, "iu1", new VersionRange("[1.1, 2.0)"), null, false, false);
+		applyOn = new RequiredCapability(IInstallableUnit.NAMESPACE_IU, "iu1", new VersionRange("[1.0, 2.0)"), null, false, false);
+		newValue = new RequiredCapability(IInstallableUnit.NAMESPACE_IU, "iu1", new VersionRange("[1.1, 2.0)"), null, false, false);
 		Recommendation r1 = new Recommendation(applyOn, newValue);
 
 		RequiredCapability applyOn2, newValue2;
-		applyOn2 = new RequiredCapability(IInstallableUnit.IU_NAMESPACE, "iu2", new VersionRange("[4.2, 5.0)"), null, false, false);
-		newValue2 = new RequiredCapability(IInstallableUnit.IU_NAMESPACE, "iu2", new VersionRange("[4.0, 5.0)"), null, false, false);
+		applyOn2 = new RequiredCapability(IInstallableUnit.NAMESPACE_IU, "iu2", new VersionRange("[4.2, 5.0)"), null, false, false);
+		newValue2 = new RequiredCapability(IInstallableUnit.NAMESPACE_IU, "iu2", new VersionRange("[4.0, 5.0)"), null, false, false);
 		Recommendation r2 = new Recommendation(applyOn2, newValue2);
 		Set recommendations = new HashSet();
 		recommendations.add(r1);
 		recommendations.add(r2);
 
 		Picker p = new Picker(new IInstallableUnit[] {iu1, iu2}, null);
-		IInstallableUnit[][] matches = p.findInstallableUnit(null, null, new RequiredCapability[] {new RequiredCapability(IInstallableUnit.IU_NAMESPACE, "iu1", null, null, false, false)}, false);
+		IInstallableUnit[][] matches = p.findInstallableUnit(null, null, new RequiredCapability[] {new RequiredCapability(IInstallableUnit.NAMESPACE_IU, "iu1", null, null, false, false)}, false);
 		assertEquals(matches[1][0], iu1);
 
 		Picker p1 = new Picker(new IInstallableUnit[] {iu1, iu2}, new RecommendationDescriptor(recommendations));
-		matches = p1.findInstallableUnit(null, null, new RequiredCapability[] {new RequiredCapability(IInstallableUnit.IU_NAMESPACE, "iu1", new VersionRange("[1.0, 2.0)"), null, false, false)}, false);
+		matches = p1.findInstallableUnit(null, null, new RequiredCapability[] {new RequiredCapability(IInstallableUnit.NAMESPACE_IU, "iu1", new VersionRange("[1.0, 2.0)"), null, false, false)}, false);
 		assertEquals(matches[0].length, 0);
 		assertEquals(matches[1].length, 0);
 
-		matches = p1.findInstallableUnit(null, null, new RequiredCapability[] {new RequiredCapability(IInstallableUnit.IU_NAMESPACE, "iu1", new VersionRange("[4.2, 5.0)"), null, false, false)}, false);
+		matches = p1.findInstallableUnit(null, null, new RequiredCapability[] {new RequiredCapability(IInstallableUnit.NAMESPACE_IU, "iu1", new VersionRange("[4.2, 5.0)"), null, false, false)}, false);
 		assertEquals(matches[0].length, 0);
 		assertEquals(matches[1].length, 0);
 	}
@@ -79,20 +79,20 @@ public class RecommendationTest extends AbstractProvisioningTest {
 
 		//Here we add recommendation that widen the range of the bundle we are looking for
 		RequiredCapability applyOn2, newValue2;
-		applyOn2 = new RequiredCapability(IInstallableUnit.IU_NAMESPACE, "iu1", new VersionRange("[4.2, 5.0)"), null, false, false);
-		newValue2 = new RequiredCapability(IInstallableUnit.IU_NAMESPACE, "iu1", new VersionRange("[4.0, 5.0)"), null, false, false);
+		applyOn2 = new RequiredCapability(IInstallableUnit.NAMESPACE_IU, "iu1", new VersionRange("[4.2, 5.0)"), null, false, false);
+		newValue2 = new RequiredCapability(IInstallableUnit.NAMESPACE_IU, "iu1", new VersionRange("[4.0, 5.0)"), null, false, false);
 		Recommendation r2 = new Recommendation(applyOn2, newValue2);
 		Set recommendations = new HashSet();
 		recommendations.add(r2);
 
 		//Check without the recommendations
 		Picker p2 = new Picker(new IInstallableUnit[] {iu1}, null);
-		IInstallableUnit[][] matches = p2.findInstallableUnit(null, null, new RequiredCapability[] {new RequiredCapability(IInstallableUnit.IU_NAMESPACE, "iu1", new VersionRange("[4.0, 5.0)"), null, false, false)}, false);
+		IInstallableUnit[][] matches = p2.findInstallableUnit(null, null, new RequiredCapability[] {new RequiredCapability(IInstallableUnit.NAMESPACE_IU, "iu1", new VersionRange("[4.0, 5.0)"), null, false, false)}, false);
 		assertEquals(matches[1].length, 1);
 
 		//Check the widening works
 		Picker p1 = new Picker(new IInstallableUnit[] {iu1}, new RecommendationDescriptor(recommendations));
-		matches = p1.findInstallableUnit(null, null, new RequiredCapability[] {new RequiredCapability(IInstallableUnit.IU_NAMESPACE, "iu1", new VersionRange("[4.2, 5.0)"), null, false, false)}, false);
+		matches = p1.findInstallableUnit(null, null, new RequiredCapability[] {new RequiredCapability(IInstallableUnit.NAMESPACE_IU, "iu1", new VersionRange("[4.2, 5.0)"), null, false, false)}, false);
 		assertEquals(matches[1].length, 1);
 
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/IUImplementationGroup.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/IUImplementationGroup.java
index 1a37898..8720d4c 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/IUImplementationGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/IUImplementationGroup.java
@@ -146,7 +146,7 @@ public class IUImplementationGroup extends IUGroup {
 		id.setText(iu.getId());
 		version.setText(iu.getVersion().toString());
 
-		String value = iu.getProperty(IInstallableUnit.IU_NAMESPACE);
+		String value = iu.getProperty(IInstallableUnit.NAMESPACE_IU);
 		if (value != null) {
 			namespace.setText(value);
 		}
@@ -181,7 +181,7 @@ public class IUImplementationGroup extends IUGroup {
 			InstallableUnitDescription unit = new InstallableUnitDescription();
 			unit.setId(id.getText().trim());
 			unit.setVersion(new Version(version.getText().trim()));
-			unit.setProperty(IInstallableUnit.IU_NAMESPACE, namespace.getText().trim());
+			unit.setProperty(IInstallableUnit.NAMESPACE_IU, namespace.getText().trim());
 			// TODO this is bogus because we don't let user provide a touchpoint type version
 			unit.setTouchpointType(new TouchpointType(touchpointType.getText().trim(), new Version("1.0.0"))); //$NON-NLS-1$
 			iuElement = MetadataFactory.createInstallableUnit(unit);
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/IUProfilePropertiesGroup.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/IUProfilePropertiesGroup.java
index d3884f0..6370cf0 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/IUProfilePropertiesGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/dialogs/IUProfilePropertiesGroup.java
@@ -11,7 +11,7 @@
 package org.eclipse.equinox.internal.p2.ui.admin.dialogs;
 
 import org.eclipse.equinox.internal.p2.ui.admin.ProvAdminUIMessages;
-import org.eclipse.equinox.p2.metadata.IInstallableUnitConstants;
+import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.ui.dialogs.IUGroup;
 import org.eclipse.equinox.p2.ui.model.InstalledIUElement;
 import org.eclipse.swt.SWT;
@@ -63,7 +63,7 @@ public class IUProfilePropertiesGroup extends IUGroup {
 		if (iuElement == null || !(iuElement instanceof InstalledIUElement)) {
 			return;
 		}
-		String[] propNames = new String[] {IInstallableUnitConstants.PROFILE_ROOT_IU};
+		String[] propNames = new String[] {IInstallableUnit.PROP_PROFILE_ROOT_IU};
 		String[] userPropNames = new String[] {ProvAdminUIMessages.ProfileRootPropertyName};
 		for (int i = 0; i < propNames.length; i++) {
 			TableItem item = new TableItem(propertiesTable, SWT.NULL);
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKPolicies.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKPolicies.java
index 337e3be..54d4b2d 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKPolicies.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKPolicies.java
@@ -12,7 +12,6 @@ package org.eclipse.equinox.internal.p2.ui.sdk;
 
 import java.util.ArrayList;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.metadata.IInstallableUnitConstants;
 import org.eclipse.equinox.p2.ui.viewers.IUGroupFilter;
 import org.eclipse.equinox.p2.ui.viewers.IUProfilePropertyFilter;
 import org.eclipse.equinox.p2.updatechecker.UpdateEvent;
@@ -28,7 +27,7 @@ import org.eclipse.ui.plugin.AbstractUIPlugin;
 public class ProvSDKPolicies extends AbstractUIPlugin {
 
 	public static ViewerFilter getInstalledIUFilter() {
-		return new IUProfilePropertyFilter(IInstallableUnitConstants.PROFILE_ROOT_IU, Boolean.toString(true));
+		return new IUProfilePropertyFilter(IInstallableUnit.PROP_PROFILE_ROOT_IU, Boolean.toString(true));
 	}
 
 	public static ViewerFilter getAvailableIUFilter() {
@@ -41,7 +40,7 @@ public class ProvSDKPolicies extends AbstractUIPlugin {
 		IInstallableUnit[] ius = event.getIUs();
 		ArrayList roots = new ArrayList();
 		for (int i = 0; i < ius.length; i++) {
-			String value = event.getProfile().getInstallableUnitProfileProperty(ius[i], IInstallableUnitConstants.PROFILE_ROOT_IU);
+			String value = event.getProfile().getInstallableUnitProfileProperty(ius[i], IInstallableUnit.PROP_PROFILE_ROOT_IU);
 			if (value != null && value.equals(Boolean.toString(true))) {
 				roots.add(ius[i]);
 			}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/RollbackAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/RollbackAction.java
index 8665d74..a221025 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/RollbackAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/RollbackAction.java
@@ -17,7 +17,6 @@ import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.metadata.IInstallableUnitConstants;
 import org.eclipse.equinox.p2.ui.*;
 import org.eclipse.equinox.p2.ui.operations.*;
 import org.eclipse.jface.viewers.ISelectionProvider;
@@ -65,7 +64,7 @@ public class RollbackAction extends ProfileModificationAction {
 		Object[] selectionArray = selection.toArray();
 		if (selectionArray.length == 1 && selectionArray[0] instanceof IInstallableUnit) {
 			IInstallableUnit iu = (IInstallableUnit) selectionArray[0];
-			setEnabled(Boolean.valueOf(iu.getProperty(IInstallableUnitConstants.PROFILE_IU_KEY)).booleanValue());
+			setEnabled(Boolean.valueOf(iu.getProperty(IInstallableUnit.PROP_PROFILE_IU_KEY)).booleanValue());
 		} else {
 			setEnabled(false);
 		}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/IUPropertiesGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/IUPropertiesGroup.java
index 73d7bec..a27bf90 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/IUPropertiesGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/IUPropertiesGroup.java
@@ -12,7 +12,6 @@ package org.eclipse.equinox.p2.ui.dialogs;
 
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.metadata.IInstallableUnitConstants;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.events.ModifyListener;
 import org.eclipse.swt.layout.GridData;
@@ -62,7 +61,7 @@ public class IUPropertiesGroup extends IUGroup {
 		if (iuElement == null) {
 			return;
 		}
-		String[] propNames = new String[] {IInstallableUnitConstants.NAME, IInstallableUnitConstants.DESCRIPTION, IInstallableUnitConstants.PROVIDER, IInstallableUnitConstants.COPYRIGHT, IInstallableUnitConstants.LICENSE};
+		String[] propNames = new String[] {IInstallableUnit.PROP_NAME, IInstallableUnit.PROP_DESCRIPTION, IInstallableUnit.PROP_PROVIDER, IInstallableUnit.PROP_COPYRIGHT, IInstallableUnit.PROP_LICENSE};
 		String[] userPropNames = new String[] {ProvUIMessages.IUPropertiesGroup_NameProperty, ProvUIMessages.IUPropertiesGroup_DescriptionProperty, ProvUIMessages.IUPropertiesGroup_ProviderProperty, ProvUIMessages.IUPropertiesGroup_CopyrightProperty, ProvUIMessages.IUPropertiesGroup_LicenseProperty};
 		for (int i = 0; i < propNames.length; i++) {
 			TableItem item = new TableItem(propertiesTable, SWT.NULL);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateAndInstallGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateAndInstallGroup.java
index e656df6..5f3192f 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateAndInstallGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateAndInstallGroup.java
@@ -13,7 +13,7 @@ package org.eclipse.equinox.p2.ui.dialogs;
 import org.eclipse.core.runtime.Assert;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.p2.engine.Profile;
-import org.eclipse.equinox.p2.metadata.IInstallableUnitConstants;
+import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.ui.*;
 import org.eclipse.equinox.p2.ui.actions.*;
 import org.eclipse.equinox.p2.ui.model.*;
@@ -108,7 +108,7 @@ public class UpdateAndInstallGroup {
 		// Table of available IU's
 		availableIUViewer = new TableViewer(composite, SWT.MULTI | SWT.FULL_SELECTION | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
 		final IUDetailsLabelProvider labelProvider = new IUDetailsLabelProvider();
-		labelProvider.setToolTipProperty(IInstallableUnitConstants.DESCRIPTION);
+		labelProvider.setToolTipProperty(IInstallableUnit.PROP_DESCRIPTION);
 
 		// TODO Kind of a hack, but there was no need to go with column label providers
 		availableIUViewer.getTable().addListener(SWT.MouseHover, new Listener() {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
index 703826e..fd61e56 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
@@ -25,7 +25,6 @@ import org.eclipse.equinox.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.p2.engine.*;
 import org.eclipse.equinox.p2.engine.phases.Sizing;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.metadata.IInstallableUnitConstants;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepositoryManager;
 import org.eclipse.equinox.p2.ui.IProvisioningListener;
@@ -266,7 +265,7 @@ public class ProvisioningUtil {
 			if (engineResult.isOK()) {
 				// mark the roots as such
 				for (int i = 0; i < installRoots.length; i++)
-					profile.setInstallableUnitProfileProperty(installRoots[i], IInstallableUnitConstants.PROFILE_ROOT_IU, Boolean.toString(true));
+					profile.setInstallableUnitProfileProperty(installRoots[i], IInstallableUnit.PROP_PROFILE_ROOT_IU, Boolean.toString(true));
 			}
 			return engineResult;
 		} finally {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUDetailsLabelProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUDetailsLabelProvider.java
index ebc1786..e3488e9 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUDetailsLabelProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUDetailsLabelProvider.java
@@ -15,7 +15,6 @@ import java.text.NumberFormat;
 import org.eclipse.core.runtime.Assert;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.metadata.IInstallableUnitConstants;
 import org.eclipse.equinox.p2.ui.ProvUI;
 import org.eclipse.equinox.p2.ui.ProvUIImages;
 import org.eclipse.equinox.p2.ui.model.AvailableIUElement;
@@ -68,7 +67,7 @@ public class IUDetailsLabelProvider extends ColumnLabelProvider implements ITabl
 			case IUColumnConfig.COLUMN_ID :
 				return iu.getId();
 			case IUColumnConfig.COLUMN_NAME :
-				String name = iu.getProperty(IInstallableUnitConstants.NAME);
+				String name = iu.getProperty(IInstallableUnit.PROP_NAME);
 				if (name != null)
 					return name;
 				return BLANK;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUGroupFilter.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUGroupFilter.java
index faf8be2..d785c14 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUGroupFilter.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUGroupFilter.java
@@ -23,7 +23,7 @@ import org.eclipse.equinox.p2.metadata.RequiredCapability;
 public class IUGroupFilter extends IUCapabilityFilter {
 
 	public IUGroupFilter() {
-		super(new RequiredCapability[] {new RequiredCapability(IInstallableUnit.IU_KIND_NAMESPACE, "group", null, null, false, false)}); //$NON-NLS-1$
+		super(new RequiredCapability[] {new RequiredCapability(IInstallableUnit.NAMESPACE_IU_KIND, "group", null, null, false, false)}); //$NON-NLS-1$
 
 	}
 }

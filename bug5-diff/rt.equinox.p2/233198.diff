commit 4a3a84a84378aec19b47aeee99787c5e93c5ea12
Author: Simon Kaegi <skaegi>
Date:   Thu May 22 03:27:26 2008 +0000

    Bug 233198 CME in LocalMetadataRepository.removeInstallableUnits

5	5	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/spi/p2/core/repository/AbstractRepository.java
1	1	bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java
1	1	bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java
35	21	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/LocalMetadataRepository.java
5	4	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/URLMetadataRepository.java
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/spi/p2/core/repository/AbstractRepository.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/spi/p2/core/repository/AbstractRepository.java
index 2152540..b617ce2 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/spi/p2/core/repository/AbstractRepository.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/spi/p2/core/repository/AbstractRepository.java
@@ -67,7 +67,7 @@ public abstract class AbstractRepository extends PlatformObject implements IRepo
 	 * to be installed in Java.  Can the URL have any protocol?
 	 * @return the URL of the repository.
 	 */
-	public URL getLocation() {
+	public synchronized URL getLocation() {
 		return location;
 	}
 
@@ -83,7 +83,7 @@ public abstract class AbstractRepository extends PlatformObject implements IRepo
 	 * Returns a read-only collection of the properties of the repository.
 	 * @return the properties of this repository.
 	 */
-	public Map getProperties() {
+	public synchronized Map getProperties() {
 		return OrderedProperties.unmodifiableProperties(properties);
 	}
 
@@ -99,7 +99,7 @@ public abstract class AbstractRepository extends PlatformObject implements IRepo
 	 * Returns a string representing the type of the repository.
 	 * @return the type of the repository.
 	 */
-	public String getType() {
+	public synchronized String getType() {
 		return type;
 	}
 
@@ -107,7 +107,7 @@ public abstract class AbstractRepository extends PlatformObject implements IRepo
 	 * Returns a string representing the version for the repository type.
 	 * @return the version of the type of the repository.
 	 */
-	public String getVersion() {
+	public synchronized String getVersion() {
 		return version;
 	}
 
@@ -123,7 +123,7 @@ public abstract class AbstractRepository extends PlatformObject implements IRepo
 		this.name = value;
 	}
 
-	public String setProperty(String key, String value) {
+	public synchronized String setProperty(String key, String value) {
 		assertModifiable();
 		return (String) (value == null ? properties.remove(key) : properties.put(key, value));
 	}
diff --git a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java
index 1f38997..aee3fcd 100644
--- a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java
+++ b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationArtifactRepository.java
@@ -59,7 +59,7 @@ public class ExtensionLocationArtifactRepository extends AbstractRepository impl
 		this.base = getBaseDirectory(location);
 	}
 
-	public void ensureInitialized() {
+	public synchronized void ensureInitialized() {
 		if (initialized)
 			return;
 		File plugins = new File(base, PLUGINS);
diff --git a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java
index 046d28f..13c6b48 100644
--- a/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java
+++ b/bundles/org.eclipse.equinox.p2.extensionlocation/src/org/eclipse/equinox/internal/p2/extensionlocation/ExtensionLocationMetadataRepository.java
@@ -59,7 +59,7 @@ public class ExtensionLocationMetadataRepository extends AbstractMetadataReposit
 		this.base = getBaseDirectory(location);
 	}
 
-	public void ensureInitialized() {
+	public synchronized void ensureInitialized() {
 		if (initialized)
 			return;
 		File plugins = new File(base, PLUGINS);
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/LocalMetadataRepository.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/LocalMetadataRepository.java
index d9040bf..c89c1cc 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/LocalMetadataRepository.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/LocalMetadataRepository.java
@@ -81,28 +81,30 @@ public class LocalMetadataRepository extends AbstractMetadataRepository {
 		save();
 	}
 
-	public void addInstallableUnits(IInstallableUnit[] installableUnits) {
+	public synchronized void addInstallableUnits(IInstallableUnit[] installableUnits) {
 		if (installableUnits == null || installableUnits.length == 0)
 			return;
 		units.addAll(Arrays.asList(installableUnits));
 		save();
 	}
 
-	public void addReference(URL repositoryLocation, int repositoryType, int options) {
+	public synchronized void addReference(URL repositoryLocation, int repositoryType, int options) {
 		assertModifiable();
 		repositories.add(new RepositoryReference(repositoryLocation, repositoryType, options));
 	}
 
 	public void initialize(RepositoryState state) {
-		this.name = state.Name;
-		this.type = state.Type;
-		this.version = state.Version.toString();
-		this.provider = state.Provider;
-		this.description = state.Description;
-		this.location = state.Location;
-		this.properties = state.Properties;
-		this.units.addAll(Arrays.asList(state.Units));
-		this.repositories.addAll(Arrays.asList(state.Repositories));
+		synchronized (this) {
+			this.name = state.Name;
+			this.type = state.Type;
+			this.version = state.Version.toString();
+			this.provider = state.Provider;
+			this.description = state.Description;
+			this.location = state.Location;
+			this.properties = state.Properties;
+			this.units.addAll(Arrays.asList(state.Units));
+			this.repositories.addAll(Arrays.asList(state.Repositories));
+		}
 		publishRepositoryReferences();
 	}
 
@@ -113,15 +115,23 @@ public class LocalMetadataRepository extends AbstractMetadataRepository {
 		IProvisioningEventBus bus = (IProvisioningEventBus) ServiceHelper.getService(Activator.getContext(), IProvisioningEventBus.SERVICE_NAME);
 		if (bus == null)
 			return;
-		for (Iterator it = repositories.iterator(); it.hasNext();) {
+
+		List repositoriesSnapshot = createRepositoriesSnapshot();
+		for (Iterator it = repositoriesSnapshot.iterator(); it.hasNext();) {
 			RepositoryReference reference = (RepositoryReference) it.next();
 			boolean isEnabled = (reference.Options & IRepository.ENABLED) != 0;
 			bus.publishEvent(new RepositoryEvent(reference.Location, reference.Type, RepositoryEvent.DISCOVERED, isEnabled));
 		}
 	}
 
+	private synchronized List createRepositoriesSnapshot() {
+		if (repositories.isEmpty())
+			return Collections.EMPTY_LIST;
+		return new ArrayList(repositories);
+	}
+
 	// use this method to setup any transient fields etc after the object has been restored from a stream
-	public void initializeAfterLoad(URL aLocation) {
+	public synchronized void initializeAfterLoad(URL aLocation) {
 		this.location = aLocation;
 	}
 
@@ -129,16 +139,16 @@ public class LocalMetadataRepository extends AbstractMetadataRepository {
 		return true;
 	}
 
-	public Collector query(Query query, Collector collector, IProgressMonitor monitor) {
+	public synchronized Collector query(Query query, Collector collector, IProgressMonitor monitor) {
 		return query.perform(units.iterator(), collector);
 	}
 
-	public void removeAll() {
+	public synchronized void removeAll() {
 		units.clear();
 		save();
 	}
 
-	public boolean removeInstallableUnits(Query query, IProgressMonitor monitor) {
+	public synchronized boolean removeInstallableUnits(Query query, IProgressMonitor monitor) {
 		boolean changed = false;
 		for (Iterator it = units.iterator(); it.hasNext();)
 			if (query.isMatch(it.next())) {
@@ -150,7 +160,7 @@ public class LocalMetadataRepository extends AbstractMetadataRepository {
 		return changed;
 	}
 
-	public void revertToBackup(LocalMetadataRepository backup) {
+	public synchronized void revertToBackup(LocalMetadataRepository backup) {
 		name = backup.name;
 		type = backup.type;
 		version = backup.version;
@@ -161,6 +171,7 @@ public class LocalMetadataRepository extends AbstractMetadataRepository {
 		units = backup.units;
 	}
 
+	// caller should be synchronized
 	private void save() {
 		File file = getActualLocation(location);
 		File jarFile = getActualLocation(location, JAR_EXTENSION);
@@ -199,10 +210,13 @@ public class LocalMetadataRepository extends AbstractMetadataRepository {
 	}
 
 	public String setProperty(String key, String newValue) {
-		String oldValue = super.setProperty(key, newValue);
-		if (oldValue == newValue || (oldValue != null && oldValue.equals(newValue)))
-			return oldValue;
-		save();
+		String oldValue = null;
+		synchronized (this) {
+			oldValue = super.setProperty(key, newValue);
+			if (oldValue == newValue || (oldValue != null && oldValue.equals(newValue)))
+				return oldValue;
+			save();
+		}
 		//force repository manager to reload this repository because it caches properties
 		MetadataRepositoryManager manager = (MetadataRepositoryManager) ServiceHelper.getService(Activator.getContext(), IMetadataRepositoryManager.class.getName());
 		if (manager.removeRepository(getLocation()))
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/URLMetadataRepository.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/URLMetadataRepository.java
index fc9c7be..28f88e4 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/URLMetadataRepository.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/URLMetadataRepository.java
@@ -67,11 +67,12 @@ public class URLMetadataRepository extends AbstractMetadataRepository {
 		content = getActualLocation(location);
 	}
 
-	protected URL getContentURL() {
+	// this is synchronized because content can be initialized in initializeAfterLoad
+	protected synchronized URL getContentURL() {
 		return content;
 	}
 
-	public void initialize(RepositoryState state) {
+	public synchronized void initialize(RepositoryState state) {
 		this.name = state.Name;
 		this.type = state.Type;
 		this.version = state.Version.toString();
@@ -83,7 +84,7 @@ public class URLMetadataRepository extends AbstractMetadataRepository {
 	}
 
 	// Use this method to setup any transient fields etc after the object has been restored from a stream
-	public void initializeAfterLoad(URL repoLocation) {
+	public synchronized void initializeAfterLoad(URL repoLocation) {
 		this.location = repoLocation;
 		content = getActualLocation(location);
 	}
@@ -92,7 +93,7 @@ public class URLMetadataRepository extends AbstractMetadataRepository {
 		return false;
 	}
 
-	public Collector query(Query query, Collector collector, IProgressMonitor monitor) {
+	public synchronized Collector query(Query query, Collector collector, IProgressMonitor monitor) {
 		return query.perform(units.iterator(), collector);
 	}
 }

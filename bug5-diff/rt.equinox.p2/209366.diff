commit 41dba6288ea8ecf3059519af6a07c0fc75d651c9
Author: John Arthorne <johna>
Date:   Mon Nov 12 19:16:02 2007 +0000

    Bug 209366 [prov] Remove InstallableUnitFragment from API

7	7	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
28	27	bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java
58	0	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/InstallableUnitFragment.java
3	0	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnitFragment.java
0	61	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/InstallableUnitFragment.java
16	3	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/MetadataFactory.java
3	3	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/ResolvedInstallableUnitFragment.java
27	17	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
9	6	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
4	6	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/FragmentMethodTest.java
3	3	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/FragmentTest.java
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
index 0ac142f..7c6b510 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/Generator.java
@@ -21,6 +21,7 @@ import org.eclipse.equinox.p2.artifact.repository.IArtifactDescriptor;
 import org.eclipse.equinox.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.p2.metadata.*;
 import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitDescription;
+import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitFragmentDescription;
 import org.eclipse.osgi.service.resolver.*;
 import org.osgi.framework.Version;
 
@@ -176,7 +177,7 @@ public class Generator {
 				bundle.setSpecialConfigCommands("addJvmArg(jvmArg:-Dorg.eclipse.equinox.simpleconfigurator.useReference=true);");
 				bundle.setSpecialUnconfigCommands("removeJvmArg(jvmArg:-Dorg.eclipse.equinox.simpleconfigurator.useReference=true);");
 			}
-			IInstallableUnit cu = MetadataGeneratorHelper.createEclipseConfigurationUnit(bundle.getSymbolicName(), new Version(bundle.getVersion()), false, bundle, info.getFlavor());
+			IInstallableUnit cu = MetadataGeneratorHelper.createEclipseConfigurationUnit(bundle.getSymbolicName(), new Version(bundle.getVersion()), false, bundle, info.getFlavor(), null);
 			if (cu != null)
 				resultantIUs.add(cu);
 		}
@@ -187,10 +188,9 @@ public class Generator {
 				IInstallableUnit configuredIU = getIU(resultantIUs, bundle.getSymbolicName());
 				if (configuredIU != null)
 					bundle.setVersion(configuredIU.getVersion().toString());
-				IInstallableUnit cu = MetadataGeneratorHelper.createEclipseConfigurationUnit(bundle.getSymbolicName(), new Version(bundle.getVersion()), false, bundle, info.getFlavor());
+				String filter = configuredIU == null ? null : configuredIU.getFilter();
+				IInstallableUnit cu = MetadataGeneratorHelper.createEclipseConfigurationUnit(bundle.getSymbolicName(), new Version(bundle.getVersion()), false, bundle, info.getFlavor(), filter);
 				//the configuration unit should share the same platform filter as the IU being configured.
-				if (configuredIU != null)
-					((InstallableUnitFragment) cu).setFilter(configuredIU.getFilter());
 				if (cu != null)
 					resultantIUs.add(cu);
 			}
@@ -277,7 +277,7 @@ public class Generator {
 		resultantIUs.add(MetadataFactory.createInstallableUnit(iu));
 
 		//Create the CU
-		InstallableUnitFragment cu = new InstallableUnitFragment();
+		InstallableUnitFragmentDescription cu = new InstallableUnitFragmentDescription();
 		cu.setId(info.getFlavor() + launcherId);
 		cu.setVersion(launcherVersion);
 		cu.setFilter(filter);
@@ -295,8 +295,8 @@ public class Generator {
 			}
 		}
 		touchpointData.put("install", configurationData); //$NON-NLS-1$
-		cu.setImmutableTouchpointData(new TouchpointData(touchpointData));
-		resultantIUs.add(cu);
+		cu.addTouchpointData(new TouchpointData(touchpointData));
+		resultantIUs.add(MetadataFactory.createInstallableUnit(cu));
 
 		//Create the artifact descriptor
 		IArtifactDescriptor descriptor = MetadataGeneratorHelper.createArtifactDescriptor(key, root, false, true);
diff --git a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java
index 4a6b3a5..7634ebb 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.generator/src/org/eclipse/equinox/p2/metadata/generator/MetadataGeneratorHelper.java
@@ -21,6 +21,7 @@ import org.eclipse.equinox.p2.artifact.repository.ArtifactDescriptor;
 import org.eclipse.equinox.p2.artifact.repository.IArtifactDescriptor;
 import org.eclipse.equinox.p2.metadata.*;
 import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitDescription;
+import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitFragmentDescription;
 import org.eclipse.osgi.service.environment.EnvironmentInfo;
 import org.eclipse.osgi.service.resolver.*;
 import org.eclipse.osgi.util.ManifestElement;
@@ -50,7 +51,7 @@ public class MetadataGeneratorHelper {
 	public static final TouchpointType TOUCHPOINT_NATIVE = new TouchpointType("native", new Version(1, 0, 0)); //$NON-NLS-1$
 	public static final TouchpointType TOUCHPOINT_ECLIPSE = new TouchpointType("eclipse", new Version(1, 0, 0)); //$NON-NLS-1$
 
-	public static final ProvidedCapability FRAGMENT_CAPABILITY = InstallableUnitFragment.FRAGMENT_CAPABILITY;
+	public static final ProvidedCapability FRAGMENT_CAPABILITY = IInstallableUnitFragment.FRAGMENT_CAPABILITY;
 
 	public static IArtifactDescriptor createArtifactDescriptor(IArtifactKey key, File pathOnDisk, boolean asIs, boolean recurse) {
 		//TODO this size calculation is bogus
@@ -94,44 +95,44 @@ public class MetadataGeneratorHelper {
 		return new ArtifactKey(ECLIPSE_ARTIFACT_NAMESPACE, ECLIPSE_ARTIFACT_CLASSIFIER, bsn, new Version(version));
 	}
 
-	public static IInstallableUnit createEclipseConfigurationUnit(String iuId, Version iuVersion, boolean isBundleFragment, GeneratorBundleInfo configInfo, String configurationFlavor) {
+	public static IInstallableUnit createEclipseConfigurationUnit(String iuId, Version iuVersion, boolean isBundleFragment, GeneratorBundleInfo configInfo, String configurationFlavor, String filter) {
 		if (configInfo == null)
 			return null;
 
-		InstallableUnitFragment cu = new InstallableUnitFragment();
-		cu.setId(configurationFlavor + iuId);
+		InstallableUnitFragmentDescription cu = new InstallableUnitFragmentDescription();
+		String configUnitId = configurationFlavor + iuId;
+		cu.setId(configUnitId);
 		cu.setVersion(iuVersion);
 
 		//Indicate the IU to which this CU apply
 		cu.setHost(iuId, new VersionRange(iuVersion, true, versionMax, true));
 
 		//Adds capabilities for fragment, self, and describing the flavor supported
-		cu.setCapabilities(new ProvidedCapability[] {FRAGMENT_CAPABILITY, createSelfCapability(cu.getId(), cu.getVersion()), new ProvidedCapability(IInstallableUnit.FLAVOR_NAMESPACE, configurationFlavor, Version.emptyVersion)});
-
-		cu.setTouchpointType(TOUCHPOINT_ECLIPSE); //TODO Is this necessary? I think we get that from the IU
+		cu.setCapabilities(new ProvidedCapability[] {FRAGMENT_CAPABILITY, createSelfCapability(configUnitId, iuVersion), new ProvidedCapability(IInstallableUnit.FLAVOR_NAMESPACE, configurationFlavor, Version.emptyVersion)});
 
 		Map touchpointData = new HashMap();
 		touchpointData.put("install", "installBundle(bundle:${artifact})");
 		touchpointData.put("uninstall", "uninstallBundle(bundle:${artifact})");
 		touchpointData.put("configure", createConfigScript(configInfo, isBundleFragment));
 		touchpointData.put("unconfigure", createUnconfigScript(configInfo, isBundleFragment));
-		cu.setImmutableTouchpointData(new TouchpointData(touchpointData));
-
-		return cu;
+		cu.addTouchpointData(new TouchpointData(touchpointData));
+		cu.setFilter(filter);
+		return MetadataFactory.createInstallableUnit(cu);
 	}
 
 	public static IInstallableUnit createEclipseDefaultConfigurationUnit(GeneratorBundleInfo configInfo, GeneratorBundleInfo unconfigInfo, String configurationFlavor) {
-		InstallableUnitFragment cu = new InstallableUnitFragment();
-		cu.setId(configurationFlavor + "default");
-		cu.setVersion(new Version(1, 0, 0));
+		InstallableUnitFragmentDescription cu = new InstallableUnitFragmentDescription();
+		String configUnitId = configurationFlavor + "default"; //$NON-NLS-1$
+		cu.setId(configUnitId);
+		Version configUnitVersion = new Version(1, 0, 0);
+		cu.setVersion(configUnitVersion);
 
 		//Adds capabilities for fragment, self, and describing the flavor supported
-		cu.setCapabilities(new ProvidedCapability[] {FRAGMENT_CAPABILITY, createSelfCapability(cu.getId(), cu.getVersion()), new ProvidedCapability(IInstallableUnit.FLAVOR_NAMESPACE, configurationFlavor, Version.emptyVersion)});
+		cu.setCapabilities(new ProvidedCapability[] {FRAGMENT_CAPABILITY, createSelfCapability(configUnitId, configUnitVersion), new ProvidedCapability(IInstallableUnit.FLAVOR_NAMESPACE, configurationFlavor, Version.emptyVersion)});
 
 		//Create a capability on bundles
 		RequiredCapability[] reqs = new RequiredCapability[] {new RequiredCapability(IInstallableUnit.CAPABILITY_ECLIPSE_TYPES, IInstallableUnit.CAPABILITY_ECLIPSE_BUNDLE, VersionRange.emptyRange, null, false, true)};
 		cu.setRequiredCapabilities(reqs);
-		cu.setTouchpointType(TOUCHPOINT_ECLIPSE); //TODO Is this necessary? I think we get that from the IU
 		Map touchpointData = new HashMap();
 
 		touchpointData.put("install", "installBundle(bundle:${artifact})");
@@ -139,8 +140,8 @@ public class MetadataGeneratorHelper {
 		touchpointData.put("configure", createDefaultConfigScript(configInfo));
 		touchpointData.put("unconfigure", createDefaultUnconfigScript(unconfigInfo));
 
-		cu.setImmutableTouchpointData(new TouchpointData(touchpointData));
-		return cu;
+		cu.addTouchpointData(new TouchpointData(touchpointData));
+		return MetadataFactory.createInstallableUnit(cu);
 	}
 
 	public static IInstallableUnit createEclipseIU(BundleDescription bd, Map manifest, boolean isFolderPlugin, IArtifactKey key) {
@@ -273,7 +274,7 @@ public class MetadataGeneratorHelper {
 		iu.setVersion(version);
 		iu.setTouchpointType(TOUCHPOINT_NATIVE);
 
-		InstallableUnitFragment cu = new InstallableUnitFragment();
+		InstallableUnitFragmentDescription cu = new InstallableUnitFragmentDescription();
 		String configId = "config." + id;//$NON-NLS-1$
 		cu.setId(configId);
 		cu.setVersion(version);
@@ -289,8 +290,8 @@ public class MetadataGeneratorHelper {
 			resultantIUs.add(MetadataFactory.createInstallableUnit(iu));
 
 			touchpointData.put("install", "");
-			cu.setImmutableTouchpointData(new TouchpointData(touchpointData));
-			resultantIUs.add(cu);
+			cu.addTouchpointData(new TouchpointData(touchpointData));
+			resultantIUs.add(MetadataFactory.createInstallableUnit(cu));
 			return null;
 		}
 		generateJREIUData(iu, id, version, jreLocation);
@@ -303,8 +304,8 @@ public class MetadataGeneratorHelper {
 		//Create config info for the CU
 		String configurationData = "unzip(source:@artifact, target:${installFolder});";
 		touchpointData.put("install", configurationData);
-		cu.setImmutableTouchpointData(new TouchpointData(touchpointData));
-		resultantIUs.add(cu);
+		cu.addTouchpointData(new TouchpointData(touchpointData));
+		resultantIUs.add(MetadataFactory.createInstallableUnit(cu));
 
 		//Create the artifact descriptor
 		return createArtifactDescriptor(key, jreLocation, false, true);
@@ -336,21 +337,21 @@ public class MetadataGeneratorHelper {
 		resultantIUs.add(iu);
 
 		//Create the CU
-		InstallableUnitFragment cu = new InstallableUnitFragment();
-		cu.setId(configurationFlavor + launcherId);
+		InstallableUnitFragmentDescription cu = new InstallableUnitFragmentDescription();
+		String configUnitId = configurationFlavor + launcherId;
+		cu.setId(configUnitId);
 		cu.setVersion(LAUNCHER_VERSION);
 		cu.setHost(launcherId, new VersionRange(LAUNCHER_VERSION, true, versionMax, true));
 
-		cu.setCapabilities(new ProvidedCapability[] {FRAGMENT_CAPABILITY, createSelfCapability(cu.getId(), cu.getVersion())});
+		cu.setCapabilities(new ProvidedCapability[] {FRAGMENT_CAPABILITY, createSelfCapability(configUnitId, LAUNCHER_VERSION)});
 		cu.setTouchpointType(TOUCHPOINT_NATIVE);
 		Map touchpointData = new HashMap();
 		String configurationData = "unzip(source:@artifact, target:${installFolder});";
 		EnvironmentInfo info = (EnvironmentInfo) ServiceHelper.getService(Activator.getContext(), EnvironmentInfo.class.getName());
 		if (!info.getOS().equals(org.eclipse.osgi.service.environment.Constants.OS_WIN32))
-			// FIXME:  is this correct?  do all non-Windows platforms need execute permissions on the launcher?
 			configurationData += " chmod(targetDir:${installFolder}, targetFile:" + launcher.getName() + ", permissions:755);";
 		touchpointData.put("install", configurationData);
-		cu.setImmutableTouchpointData(new TouchpointData(touchpointData));
+		cu.addTouchpointData(new TouchpointData(touchpointData));
 		resultantIUs.add(cu);
 
 		//Create the artifact descriptor
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/InstallableUnitFragment.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/InstallableUnitFragment.java
new file mode 100644
index 0000000..6270e34
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/InstallableUnitFragment.java
@@ -0,0 +1,58 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.metadata;
+
+import org.eclipse.equinox.p2.metadata.*;
+import org.eclipse.osgi.service.resolver.VersionRange;
+
+public class InstallableUnitFragment extends InstallableUnit implements IInstallableUnitFragment {
+
+	//a host id of null is used for the default fragment
+	private String hostId = null;
+	private VersionRange hostRange = VersionRange.emptyRange;
+
+	public InstallableUnitFragment() {
+		super();
+	}
+
+	public void setHost(String iuId, VersionRange versionRange) {
+		if (versionRange == null)
+			throw new IllegalArgumentException();
+		hostId = iuId;
+		hostRange = versionRange;
+		if (hostId != null)
+			addRequiredCapability(RequiredCapability.createRequiredCapabilityForName(iuId, versionRange, false));
+	}
+
+	public String getHostId() {
+		return hostId;
+	}
+
+	public VersionRange getHostVersionRange() {
+		return hostRange;
+	}
+
+	private void addRequiredCapability(RequiredCapability toAdd) {
+		RequiredCapability[] current = super.getRequiredCapabilities();
+		RequiredCapability[] result = new RequiredCapability[current.length + 1];
+		System.arraycopy(current, 0, result, 0, current.length);
+		result[current.length] = toAdd;
+		setRequiredCapabilities(result);
+	}
+
+	public boolean isFragment() {
+		return true;
+	}
+
+	public IResolvedInstallableUnit getResolved() {
+		return new ResolvedInstallableUnitFragment(this);
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnitFragment.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnitFragment.java
index 0ec3aa2..03e7e84 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnitFragment.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/IInstallableUnitFragment.java
@@ -9,9 +9,12 @@
 package org.eclipse.equinox.p2.metadata;
 
 import org.eclipse.osgi.service.resolver.VersionRange;
+import org.osgi.framework.Version;
 
 public interface IInstallableUnitFragment extends IInstallableUnit {
 
+	public static final ProvidedCapability FRAGMENT_CAPABILITY = new ProvidedCapability(IU_KIND_NAMESPACE, "iu.fragment", new Version(1, 0, 0)); //$NON-NLS-1$
+
 	public abstract String getHostId();
 
 	public abstract VersionRange getHostVersionRange();
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/InstallableUnitFragment.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/InstallableUnitFragment.java
deleted file mode 100644
index a5f700f..0000000
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/InstallableUnitFragment.java
+++ /dev/null
@@ -1,61 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.p2.metadata;
-
-import org.eclipse.equinox.internal.p2.metadata.InstallableUnit;
-import org.eclipse.osgi.service.resolver.VersionRange;
-import org.osgi.framework.Version;
-
-public class InstallableUnitFragment extends InstallableUnit implements IInstallableUnitFragment {
-
-	public static ProvidedCapability FRAGMENT_CAPABILITY = new ProvidedCapability(IU_KIND_NAMESPACE, "iu.fragment", new Version(1, 0, 0)); //$NON-NLS-1$
-
-	//a host id of null is used for the default fragment
-	private String hostId = null;
-	private VersionRange hostRange = VersionRange.emptyRange;
-
-	public InstallableUnitFragment() {
-		super();
-	}
-
-	public void setHost(String iuId, VersionRange versionRange) {
-		if (versionRange == null)
-			throw new IllegalArgumentException();
-		hostId = iuId;
-		hostRange = versionRange;
-		if (hostId != null)
-			addRequiredCapability(RequiredCapability.createRequiredCapabilityForName(iuId, versionRange, false));
-	}
-
-	public String getHostId() {
-		return hostId;
-	}
-
-	public VersionRange getHostVersionRange() {
-		return hostRange;
-	}
-
-	private void addRequiredCapability(RequiredCapability toAdd) {
-		RequiredCapability[] current = super.getRequiredCapabilities();
-		RequiredCapability[] result = new RequiredCapability[current.length + 1];
-		System.arraycopy(current, 0, result, 0, current.length);
-		result[current.length] = toAdd;
-		setRequiredCapabilities(result);
-	}
-
-	public boolean isFragment() {
-		return true;
-	}
-
-	public IResolvedInstallableUnit getResolved() {
-		return new ResolvedInstallableUnitFragment(this);
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/MetadataFactory.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/MetadataFactory.java
index 5a9b39e..d872370 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/MetadataFactory.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/MetadataFactory.java
@@ -12,6 +12,7 @@ package org.eclipse.equinox.p2.metadata;
 
 import org.eclipse.core.runtime.Assert;
 import org.eclipse.equinox.internal.p2.metadata.InstallableUnit;
+import org.eclipse.equinox.internal.p2.metadata.InstallableUnitFragment;
 import org.eclipse.osgi.service.resolver.VersionRange;
 import org.osgi.framework.Version;
 
@@ -97,9 +98,9 @@ public class MetadataFactory {
 	}
 
 	/**
-	 * Creates and returns an {@link IInstallableUnit} or {@link IInstallableUnitFragment}
-	 * based on the given description.  Once the installable unit has been created, 
-	 * the information is discarded from the description object.
+	 * Creates and returns an {@link IInstallableUnit} based on the given 
+	 * description.  Once the installable unit has been created, the information is 
+	 * discarded from the description object.
 	 * 
 	 * @param description The description of the unit to create
 	 * @return The created installable unit or fragment
@@ -107,4 +108,16 @@ public class MetadataFactory {
 	public static IInstallableUnit createInstallableUnit(InstallableUnitDescription description) {
 		return description.unitCreate();
 	}
+
+	/**
+	 * Creates and returns an {@link IInstallableUnitFragment} based on the given 
+	 * description.  Once the fragment has been created, the information is 
+	 * discarded from the description object.
+	 * 
+	 * @param description The description of the unit to create
+	 * @return The created installable unit or fragment
+	 */
+	public static IInstallableUnitFragment createInstallableUnitFragment(InstallableUnitFragmentDescription description) {
+		return (IInstallableUnitFragment) description.unitCreate();
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/ResolvedInstallableUnitFragment.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/ResolvedInstallableUnitFragment.java
index e730aad..3a69502 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/ResolvedInstallableUnitFragment.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/p2/metadata/ResolvedInstallableUnitFragment.java
@@ -12,15 +12,15 @@ import org.eclipse.osgi.service.resolver.VersionRange;
 
 public class ResolvedInstallableUnitFragment extends ResolvedInstallableUnit implements IResolvedInstallableUnitFragment {
 
-	public ResolvedInstallableUnitFragment(InstallableUnitFragment resolved) {
+	public ResolvedInstallableUnitFragment(IInstallableUnitFragment resolved) {
 		super(resolved);
 	}
 
 	public String getHostId() {
-		return ((InstallableUnitFragment) resolved).getHostId();
+		return ((IInstallableUnitFragment) resolved).getHostId();
 	}
 
 	public VersionRange getHostVersionRange() {
-		return ((InstallableUnitFragment) resolved).getHostVersionRange();
+		return ((IInstallableUnitFragment) resolved).getHostVersionRange();
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
index 9fec701..ed267e9 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
@@ -18,6 +18,7 @@ import org.eclipse.equinox.p2.director.IPlanner;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.*;
 import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitDescription;
+import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitFragmentDescription;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.p2.metadata.repository.IMetadataRepositoryManager;
 import org.eclipse.osgi.service.resolver.VersionRange;
@@ -125,8 +126,8 @@ public class AbstractProvisioningTest extends TestCase {
 	 *  by any bundle. The fragment has the default version, and the default self and
 	 *  fragment provided capabilities are added to the IU.
 	 */
-	public static InstallableUnitFragment createBundleFragment(String name) {
-		return createBundleFragment(name, DEFAULT_VERSION);
+	public static IInstallableUnitFragment createBundleFragment(String name) {
+		return createIUFragment(name, DEFAULT_VERSION, BUNDLE_REQUIREMENT, ECLIPSE_TOUCHPOINT, NO_TP_DATA);
 	}
 
 	/**
@@ -134,11 +135,8 @@ public class AbstractProvisioningTest extends TestCase {
 	 *  that is hosted by any bundle. The default self and fragment provided capabilities
 	 *  are added to the IU.
 	 */
-	public static InstallableUnitFragment createBundleFragment(String name, Version version) {
-		InstallableUnitFragment fragment = createIUFragment(name, version);
-		fragment.setTouchpointType(ECLIPSE_TOUCHPOINT);
-		fragment.setRequiredCapabilities(BUNDLE_REQUIREMENT);
-		return fragment;
+	public static IInstallableUnitFragment createBundleFragment(String name, Version version, TouchpointData tpData) {
+		return createIUFragment(name, version, BUNDLE_REQUIREMENT, ECLIPSE_TOUCHPOINT, tpData);
 	}
 
 	public static IDirector createDirector() {
@@ -288,24 +286,36 @@ public class AbstractProvisioningTest extends TestCase {
 	}
 
 	/**
-	 * 	Create a basic InstallableUnitFragment with the given name. The IU has the default version
-	 *  and the self and fragment provided capabilities are added to the IU.
+	 * 	Create a basic InstallableUnitFragment with the given attributes. 
+	 * The self and fragment provided capabilities are added to the IU.
 	 */
-	public static InstallableUnitFragment createIUFragment(String name) {
-		return createIUFragment(name, DEFAULT_VERSION);
+	public static IInstallableUnitFragment createIUFragment(String name) {
+		return createIUFragment(name, DEFAULT_VERSION, NO_REQUIRES, TouchpointType.NONE, NO_TP_DATA);
 	}
 
 	/**
-	 * 	Create a basic InstallableUnitFragment with the given name and version.
-	 * 	The default self and fragment provided capabilities are added to the IU.
+	 * 	Create a basic InstallableUnitFragment with the given attributes. 
+	 * The self and fragment provided capabilities are added to the IU.
 	 */
-	public static InstallableUnitFragment createIUFragment(String name, Version version) {
-		InstallableUnitFragment iu = new InstallableUnitFragment();
+	public static IInstallableUnitFragment createIUFragment(String name, Version version) {
+		return createIUFragment(name, version, NO_REQUIRES, TouchpointType.NONE, NO_TP_DATA);
+	}
+
+	/**
+	 * 	Create a basic InstallableUnitFragment with the given attributes. 
+	 * The self and fragment provided capabilities are added to the IU.
+	 */
+	public static IInstallableUnitFragment createIUFragment(String name, Version version, RequiredCapability[] required, TouchpointType tpType, TouchpointData tpData) {
+		InstallableUnitFragmentDescription iu = new InstallableUnitFragmentDescription();
 		iu.setId(name);
 		iu.setVersion(version);
-		ProvidedCapability[] cap = new ProvidedCapability[] {getSelfCapability(name, version), InstallableUnitFragment.FRAGMENT_CAPABILITY};
+		ProvidedCapability[] cap = new ProvidedCapability[] {getSelfCapability(name, version), IInstallableUnitFragment.FRAGMENT_CAPABILITY};
 		iu.setCapabilities(cap);
-		return iu;
+		iu.setRequiredCapabilities(required);
+		iu.setTouchpointType(tpType);
+		if (tpData != null)
+			iu.addTouchpointData(tpData);
+		return MetadataFactory.createInstallableUnitFragment(iu);
 	}
 
 	public static IPlanner createPlanner() {
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
index 16b146b..e1a7877 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/engine/EngineTest.java
@@ -17,6 +17,7 @@ import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.equinox.p2.engine.*;
 import org.eclipse.equinox.p2.metadata.*;
 import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitDescription;
+import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitFragmentDescription;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
 import org.eclipse.equinox.p2.tests.TestActivator;
 import org.osgi.framework.ServiceReference;
@@ -213,9 +214,10 @@ public class EngineTest extends AbstractProvisioningTest {
 		//touchpointData.put("uninstall", "uninstallBundle(bundle:${artifact});");
 
 		IResolvedInstallableUnit[] cus = new IResolvedInstallableUnit[1];
-		InstallableUnitFragment tmp = new InstallableUnitFragment();
-		tmp.setImmutableTouchpointData(new TouchpointData(touchpointData));
-		cus[0] = tmp.getResolved();
+		InstallableUnitFragmentDescription desc = new InstallableUnitFragmentDescription();
+		desc.addTouchpointData(new TouchpointData(touchpointData));
+		IInstallableUnitFragment fragment = MetadataFactory.createInstallableUnitFragment(desc);
+		cus[0] = new ResolvedInstallableUnitFragment(fragment);
 
 		//IArtifactKey key = new ArtifactKey("eclipse", "plugin", "org.eclipse.osgi", new Version("3.3.1.R33x_v20070828"));
 		//iu.setArtifacts(new IArtifactKey[] {key});
@@ -241,9 +243,10 @@ public class EngineTest extends AbstractProvisioningTest {
 		touchpointData.put("install", "BAD");
 
 		IResolvedInstallableUnit[] cus = new IResolvedInstallableUnit[1];
-		InstallableUnitFragment tmp = new InstallableUnitFragment();
-		tmp.setImmutableTouchpointData(new TouchpointData(touchpointData));
-		cus[0] = tmp.getResolved();
+		InstallableUnitFragmentDescription desc = new InstallableUnitFragmentDescription();
+		desc.addTouchpointData(new TouchpointData(touchpointData));
+		IInstallableUnitFragment fragment = MetadataFactory.createInstallableUnitFragment(desc);
+		cus[0] = new ResolvedInstallableUnitFragment(fragment);
 
 		//IArtifactKey key = new ArtifactKey("eclipse", "plugin", "org.eclipse.osgi", new Version("3.3.1.R33x_v20070828"));
 		//iu.setArtifacts(new IArtifactKey[] {key});
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/FragmentMethodTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/FragmentMethodTest.java
index 97b0961..d32e66b 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/FragmentMethodTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/FragmentMethodTest.java
@@ -15,6 +15,7 @@ import junit.framework.AssertionFailedError;
 import junit.framework.TestCase;
 import org.eclipse.equinox.p2.metadata.*;
 import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitDescription;
+import org.eclipse.equinox.p2.metadata.MetadataFactory.InstallableUnitFragmentDescription;
 import org.eclipse.equinox.p2.resolution.ResolutionHelper;
 import org.eclipse.osgi.service.resolver.VersionRange;
 import org.osgi.framework.Version;
@@ -71,7 +72,7 @@ public class FragmentMethodTest extends TestCase {
 		}
 
 		//The fragment capability is not listed in the capabilities
-		assertDoesNotContain(mergedCapabilities, InstallableUnitFragment.FRAGMENT_CAPABILITY);
+		assertDoesNotContain(mergedCapabilities, IInstallableUnitFragment.FRAGMENT_CAPABILITY);
 
 		//The fragment does not contain iu namespace
 		for (int i = 0; i < initialFragmentCapabilities.length; i++) {
@@ -150,19 +151,16 @@ public class FragmentMethodTest extends TestCase {
 	}
 
 	public IInstallableUnit createIUFragment(String name) {
-		InstallableUnitFragment iu = new InstallableUnitFragment();
+		InstallableUnitFragmentDescription iu = new InstallableUnitFragmentDescription();
 		iu.setId(name);
 		iu.setVersion(new Version(1, 0, 0));
 		iu.setTouchpointType(new TouchpointType("eclipse", new Version(1, 0, 0)));
 		iu.setProperty(PROP_FRAG, "value");
-
 		RequiredCapability[] reqs = new RequiredCapability[] {new RequiredCapability("eclipse.touchpoint", "bundle", VersionRange.emptyRange, null, false, true), new RequiredCapability(TEST_REQUIRED, TEST_REQUIRED, VersionRange.emptyRange, null, true, false)};
 		iu.setRequiredCapabilities(reqs);
-
 		ProvidedCapability[] cap = new ProvidedCapability[] {new ProvidedCapability("testCapabilityInFragment", "testCapabilityInFragment", new Version(1, 0, 0))};
 		iu.setCapabilities(cap);
-
-		return iu;
+		return MetadataFactory.createInstallableUnitFragment(iu);
 	}
 
 	public IInstallableUnit createIU(String name) {
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/FragmentTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/FragmentTest.java
index 8af1f84..02a0537 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/FragmentTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/FragmentTest.java
@@ -79,7 +79,7 @@ public class FragmentTest extends AbstractProvisioningTest {
 	public void testFragmentCapability() {
 		IInstallableUnit iu = createBundleFragment("iuFragment.test1");
 		ProvidedCapability[] all = iu.getProvidedCapabilities();
-		assertContains(all, InstallableUnitFragment.FRAGMENT_CAPABILITY);
+		assertContains(all, IInstallableUnitFragment.FRAGMENT_CAPABILITY);
 	}
 
 	public void testDefaultIUCapability() {
@@ -117,8 +117,8 @@ public class FragmentTest extends AbstractProvisioningTest {
 	}
 
 	private IInstallableUnit createIUFragmentWithTouchpointData() {
-		InstallableUnitFragment unit = createBundleFragment("iuFragment.test1");
-		unit.setImmutableTouchpointData(new TouchpointData(new HashMap()));
+		TouchpointData data = new TouchpointData(new HashMap());
+		IInstallableUnitFragment unit = createBundleFragment("iuFragment.test1", DEFAULT_VERSION, data);
 		return unit;
 	}
 }

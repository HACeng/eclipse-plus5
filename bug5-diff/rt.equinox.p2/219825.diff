commit f9aadf425e46a76530e056fef7411fcde36bec73
Author: Susan Franklin <sfranklin>
Date:   Fri Feb 22 00:00:41 2008 +0000

    Bug 219825 - [prov] [ui] - Handling of uncategorized IU's across multiple repos

15	8	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java
12	7	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
51	12	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/CategoryElementCollector.java
121	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/UncategorizedElementCollector.java
8	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/ProvElementComparer.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java
index a863c34..9d4c0ac 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java
@@ -78,7 +78,7 @@ public class ProvAdminQueryProvider implements IQueryProvider {
 				if (element instanceof MetadataRepositoryElement) {
 					if (useCategories)
 						// We are using categories, group into categories first.
-						return new ElementQueryDescriptor(((MetadataRepositoryElement) element).getQueryable(), categoryQuery, new CategoryElementCollector(this, ((MetadataRepositoryElement) element).getQueryable(), false));
+						return new ElementQueryDescriptor(((MetadataRepositoryElement) element).getQueryable(), categoryQuery, new CategoryElementCollector(this, ((MetadataRepositoryElement) element).getQueryable(), true));
 					if (showGroupsOnly)
 						// Query all groups and use the query result to optionally select the latest version only
 						return new ElementQueryDescriptor(((MetadataRepositoryElement) element).getQueryable(), groupQuery, showLatest ? new LatestIUVersionElementCollector(this, ((MetadataRepositoryElement) element).getQueryable(), false) : new AvailableIUCollector(this, ((MetadataRepositoryElement) element).getQueryable(), false));
@@ -96,7 +96,7 @@ public class ProvAdminQueryProvider implements IQueryProvider {
 						queryable = new QueryableMetadataRepositoryManager(IMetadataRepositoryManager.REPOSITORIES_NON_SYSTEM);
 					if (useCategories)
 						// We are using categories, group into categories first.
-						return new ElementQueryDescriptor(queryable, categoryQuery, new CategoryElementCollector(this, queryable, false));
+						return new ElementQueryDescriptor(queryable, categoryQuery, new CategoryElementCollector(this, queryable, true));
 					if (showGroupsOnly)
 						// Query all groups and use the query result to optionally select the latest version only
 						return new ElementQueryDescriptor(queryable, groupQuery, showLatest ? new LatestIUVersionElementCollector(this, queryable, false) : new AvailableIUCollector(this, queryable, false));
@@ -107,13 +107,20 @@ public class ProvAdminQueryProvider implements IQueryProvider {
 					return new ElementQueryDescriptor(queryable, allQuery, new AvailableIUCollector(this, queryable, false));
 				}
 				// Things have been grouped by category, now what?
-				if (element instanceof CategoryElement) {
-					Query membersOfCategoryQuery;
-					if (element instanceof UncategorizedCategoryElement)
-						membersOfCategoryQuery = allQuery;
-					else
-						membersOfCategoryQuery = new AnyRequiredCapabilityQuery(((CategoryElement) element).getIU());
+				// Handle uncategorized elements first
+				if (element instanceof UncategorizedCategoryElement) {
+					// Will have to look at all categories and other items first. 
+					queryable = ((UncategorizedCategoryElement) element).getQueryable();
+					Query firstPassQuery = allQuery;
+					if (showGroupsOnly)
+						firstPassQuery = new CompoundQuery(new Query[] {groupQuery, categoryQuery}, false);
+					queryable = ((UncategorizedCategoryElement) element).getQueryable();
+					Collector collector = showLatest ? new LatestIUVersionElementCollector(this, queryable, false) : new AvailableIUCollector(this, queryable, false);
+					return new ElementQueryDescriptor(queryable, firstPassQuery, new UncategorizedElementCollector(this, queryable, collector));
 
+				}
+				if (element instanceof CategoryElement) {
+					Query membersOfCategoryQuery = new AnyRequiredCapabilityQuery(((CategoryElement) element).getIU());
 					if (showGroupsOnly)
 						// Query all groups and use the query result to optionally select the latest version only
 						return new ElementQueryDescriptor(((CategoryElement) element).getQueryable(), new CompoundQuery(new Query[] {new CompoundQuery(new Query[] {groupQuery, categoryQuery}, false), membersOfCategoryQuery}, true), showLatest ? new LatestIUVersionElementCollector(this, ((CategoryElement) element).getQueryable(), true) : new AvailableIUCollector(this, ((CategoryElement) element).getQueryable(), true));
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
index b0a6a20..6daab1a 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
@@ -71,17 +71,22 @@ public class ProvSDKQueryProvider implements IQueryProvider {
 						queryable = new QueryableMetadataRepositoryManager(((MetadataRepositories) element).getMetadataRepositories());
 					else
 						queryable = new QueryableMetadataRepositoryManager(IMetadataRepositoryManager.REPOSITORIES_NON_SYSTEM);
-					return new ElementQueryDescriptor(queryable, categoryQuery, new CategoryElementCollector(this, queryable, false));
+					return new ElementQueryDescriptor(queryable, categoryQuery, new CategoryElementCollector(this, queryable, true));
 				}
 				if (element instanceof MetadataRepositoryElement) {
-					return new ElementQueryDescriptor(((MetadataRepositoryElement) element).getQueryable(), categoryQuery, new CategoryElementCollector(this, ((MetadataRepositoryElement) element).getQueryable(), false));
+					return new ElementQueryDescriptor(((MetadataRepositoryElement) element).getQueryable(), categoryQuery, new CategoryElementCollector(this, ((MetadataRepositoryElement) element).getQueryable(), true));
+				}
+				// Must do this one before CategoryElement since it's a subclass
+				if (element instanceof UncategorizedCategoryElement) {
+					// Will have to look at all categories and groups and from there, figure out what's left
+					Query firstPassQuery = new CompoundQuery(new Query[] {groupQuery, categoryQuery}, false);
+					queryable = ((UncategorizedCategoryElement) element).getQueryable();
+					Collector collector = showLatest ? new LatestIUVersionElementCollector(this, queryable, false) : new AvailableIUCollector(this, queryable, false);
+					return new ElementQueryDescriptor(queryable, firstPassQuery, new UncategorizedElementCollector(this, queryable, collector));
+
 				}
 				if (element instanceof CategoryElement) {
-					Query membersOfCategoryQuery;
-					if (element instanceof UncategorizedCategoryElement)
-						membersOfCategoryQuery = allQuery;
-					else
-						membersOfCategoryQuery = new AnyRequiredCapabilityQuery(((CategoryElement) element).getIU());
+					Query membersOfCategoryQuery = new AnyRequiredCapabilityQuery(((CategoryElement) element).getIU());
 					Collector collector;
 					if (showLatest)
 						collector = new LatestIUVersionElementCollector(this, ((CategoryElement) element).getQueryable(), true);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/CategoryElementCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/CategoryElementCollector.java
index 644302d..899b1c5 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/CategoryElementCollector.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/CategoryElementCollector.java
@@ -28,12 +28,12 @@ import org.osgi.framework.Version;
  */
 public class CategoryElementCollector extends QueriedElementCollector {
 
-	private boolean allowEmpty;
+	private boolean groupUncategorized;
 	private Set referredIUs = new HashSet();
 
-	public CategoryElementCollector(IQueryProvider queryProvider, IQueryable queryable, boolean allowEmpty) {
+	public CategoryElementCollector(IQueryProvider queryProvider, IQueryable queryable, boolean showUncategorized) {
 		super(queryProvider, queryable);
-		this.allowEmpty = allowEmpty;
+		this.groupUncategorized = showUncategorized;
 	}
 
 	/**
@@ -63,34 +63,73 @@ public class CategoryElementCollector extends QueriedElementCollector {
 		return super.accept(new CategoryElement(iu));
 	}
 
-	public Iterator iterator() {
-		if (!allowEmpty && getList().isEmpty())
+	private void cleanList() {
+		if (groupUncategorized)
 			createDummyCategory();
 		removeNestedCategories();
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.p2.query.Collector#iterator()
+	 */
+	public Iterator iterator() {
+		cleanList();
 		return super.iterator();
 	}
 
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.p2.query.Collector#toArray(java.lang.Class)
+	 */
 	public Object[] toArray(Class clazz) {
-		if (!allowEmpty && getList().isEmpty())
-			createDummyCategory();
-		removeNestedCategories();
+		cleanList();
 		return super.toArray(clazz);
 	}
 
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.p2.query.Collector#toCollection()
+	 */
+	public Collection toCollection() {
+		cleanList();
+		return super.toCollection();
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.p2.query.Collector#size()
+	 */
+	public int size() {
+		cleanList();
+		return super.size();
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.p2.query.Collector#isEmpty()
+	 */
+	public boolean isEmpty() {
+		cleanList();
+		return super.isEmpty();
+	}
+
 	private void createDummyCategory() {
 		InstallableUnitDescription unit = new InstallableUnitDescription();
 		unit.setId(ProvUIMessages.CategoryElementCollector_Uncategorized);
 		unit.setProperty(IInstallableUnit.PROP_CATEGORY_IU, Boolean.toString(true));
-		unit.setVersion(Version.emptyVersion);
+		unit.setVersion(new Version(0, 0, 0, "generated")); //$NON-NLS-1$
+		String name;
 		if (queryable instanceof IRepository) {
 			IRepository repo = (IRepository) queryable;
-			String name = repo.getName();
+			name = repo.getName();
 			if (name == null)
 				name = repo.getLocation().toExternalForm();
-			unit.setProperty(IInstallableUnit.PROP_NAME, name);
 		} else {
-			unit.setProperty(IInstallableUnit.PROP_NAME, ProvUIMessages.CategoryElementCollector_Uncategorized);
+			name = ProvUIMessages.CategoryElementCollector_Uncategorized;
 		}
+		unit.setProperty(IInstallableUnit.PROP_NAME, name);
+
 		IInstallableUnit iu = MetadataFactory.createInstallableUnit(unit);
 		CategoryElement element = new UncategorizedCategoryElement(iu);
 		element.setQueryable(queryable);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/UncategorizedElementCollector.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/UncategorizedElementCollector.java
new file mode 100644
index 0000000..7a11e07
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/query/UncategorizedElementCollector.java
@@ -0,0 +1,121 @@
+/*******************************************************************************
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.provisional.p2.ui.query;
+
+import java.util.*;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.metadata.RequiredCapability;
+import org.eclipse.equinox.internal.provisional.p2.query.Collector;
+import org.eclipse.equinox.internal.provisional.p2.query.IQueryable;
+import org.eclipse.equinox.internal.provisional.p2.ui.model.QueriedElementCollector;
+import org.eclipse.equinox.internal.provisional.p2.ui.policy.IQueryProvider;
+
+/**
+ * A collector that collects everything specified by the query, but
+ * removes anything referred to by a category when asked for its
+ * contents.  Must be used with a compound query that includes categories
+ * and something else.  For example, could be used with a category + group
+ * query, and the net result would be all groups that were not referred to
+ * by a category.
+ * 
+ * @since 3.4
+ */
+public class UncategorizedElementCollector extends QueriedElementCollector {
+
+	private ArrayList categories = new ArrayList();
+	private HashMap allOthersById = new HashMap();
+	private Collector resultCollector;
+
+	public UncategorizedElementCollector(IQueryProvider queryProvider, IQueryable queryable, Collector resultCollector) {
+		super(queryProvider, queryable);
+		this.resultCollector = resultCollector;
+	}
+
+	/*
+	 * Accepts all IUs on the first pass, separating the categories and
+	 * non-categories.  The real work is done once clients try to get the results.
+	 * (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.p2.ui.model.QueriedElementCollector#accept(java.lang.Object)
+	 */
+	public boolean accept(Object match) {
+		if (match instanceof IInstallableUnit) {
+			IInstallableUnit iu = (IInstallableUnit) match;
+			if (Boolean.toString(true).equals(iu.getProperty(IInstallableUnit.PROP_CATEGORY_IU)))
+				categories.add(iu);
+			else
+				allOthersById.put(iu.getId(), iu);
+		}
+		return true;
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.p2.query.Collector#iterator()
+	 */
+	public Iterator iterator() {
+		removeReferredIUsAndRecollect();
+		return resultCollector.iterator();
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.p2.query.Collector#size()
+	 */
+	public int size() {
+		removeReferredIUsAndRecollect();
+		return resultCollector.size();
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.p2.query.Collector#isEmpty()
+	 */
+	public boolean isEmpty() {
+		removeReferredIUsAndRecollect();
+		return resultCollector.isEmpty();
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.p2.query.Collector#toArray(java.lang.Class)
+	 */
+	public Object[] toArray(Class clazz) {
+		removeReferredIUsAndRecollect();
+		return resultCollector.toArray(clazz);
+	}
+
+	private void removeReferredIUsAndRecollect() {
+		Iterator iter = categories.iterator();
+		while (iter.hasNext()) {
+			IInstallableUnit categoryIU = (IInstallableUnit) iter.next();
+			RequiredCapability[] requirements = categoryIU.getRequiredCapabilities();
+			for (int i = 0; i < requirements.length; i++) {
+				if (requirements[i].getNamespace().equals(IInstallableUnit.NAMESPACE_IU_ID)) {
+					allOthersById.remove(requirements[i].getName());
+				}
+			}
+		}
+		// Now allOthersById has the correct content, so just
+		// collect results in the result collector.
+		iter = allOthersById.values().iterator();
+		while (iter.hasNext())
+			resultCollector.accept(iter.next());
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.equinox.internal.provisional.p2.query.Collector#toCollection()
+	 */
+	public Collection toCollection() {
+		removeReferredIUsAndRecollect();
+		return resultCollector.toCollection();
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/ProvElementComparer.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/ProvElementComparer.java
index 17f24ba..22dea1b 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/ProvElementComparer.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/provisional/p2/ui/viewers/ProvElementComparer.java
@@ -14,13 +14,17 @@ import java.net.URL;
 import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
-import org.eclipse.equinox.internal.provisional.p2.ui.model.ProfileElement;
-import org.eclipse.equinox.internal.provisional.p2.ui.model.RepositoryElement;
+import org.eclipse.equinox.internal.provisional.p2.ui.model.*;
 import org.eclipse.jface.viewers.IElementComparer;
 
 public class ProvElementComparer implements IElementComparer {
 
 	public boolean equals(Object a, Object b) {
+		// We treat category elements specially because this
+		// is one case where resolving down to an IU will lose identity
+		// differences.  (category IU's with the same name and version number cannot be treated the same).
+		if (a instanceof CategoryElement || b instanceof CategoryElement)
+			return a.equals(b);
 		IInstallableUnit iu1 = getIU(a);
 		IInstallableUnit iu2 = getIU(b);
 		if (iu1 != null && iu2 != null)
@@ -37,6 +41,8 @@ public class ProvElementComparer implements IElementComparer {
 	}
 
 	public int hashCode(Object element) {
+		if (element instanceof CategoryElement)
+			return element.hashCode();
 		IInstallableUnit iu = getIU(element);
 		if (iu != null)
 			return iu.hashCode();

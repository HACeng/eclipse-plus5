commit 92b7ad49053459bc6e2925a2e409f33833b76540
Author: John Arthorne <johna>
Date:   Mon Feb 11 06:30:31 2008 +0000

    Bug 218451 [prov] Rename API packages to provisional API

1	1	bundles/org.eclipse.equinox.p2.ui.admin/META-INF/MANIFEST.MF
1	1	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java
2	3	bundles/org.eclipse.equinox.p2.ui.sdk/META-INF/MANIFEST.MF
2	2	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AutomaticUpdateScheduler.java
1	1	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
29	0	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUI.java
3	3	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
0	30	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/p2/ui/sdk/ProvSDKUI.java
1	1	bundles/org.eclipse.equinox.p2.ui/META-INF/MANIFEST.MF
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
1	1	bundles/org.eclipse.equinox.p2.updatechecker/META-INF/MANIFEST.MF
1	1	bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/p2/updatechecker/Activator.java
23	0	bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/provisional/p2/updatechecker/IUpdateListener.java
163	0	bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/provisional/p2/updatechecker/UpdateChecker.java
38	0	bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/provisional/p2/updatechecker/UpdateEvent.java
0	23	bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/p2/updatechecker/IUpdateListener.java
0	163	bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/p2/updatechecker/UpdateChecker.java
0	38	bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/p2/updatechecker/UpdateEvent.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.ui.admin/META-INF/MANIFEST.MF
index 9cf3b45..1169a2f 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/META-INF/MANIFEST.MF
@@ -26,7 +26,7 @@ Import-Package: org.eclipse.equinox.internal.p2.core.helpers,
  org.eclipse.equinox.internal.provisional.p2.ui.operations,
  org.eclipse.equinox.internal.provisional.p2.ui.query,
  org.eclipse.equinox.internal.provisional.p2.ui.viewers,
- org.eclipse.equinox.p2.updatechecker,
+ org.eclipse.equinox.internal.provisional.p2.updatechecker,
  org.eclipse.osgi.service.environment;version="1.0.0",
  org.eclipse.osgi.util;version="1.1.0",
  org.osgi.framework;version="1.3.0"
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java
index d99d170..08326c3 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java
@@ -24,7 +24,7 @@ import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
 import org.eclipse.equinox.internal.provisional.p2.ui.model.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
 import org.eclipse.equinox.internal.provisional.p2.ui.query.*;
-import org.eclipse.equinox.p2.updatechecker.UpdateEvent;
+import org.eclipse.equinox.internal.provisional.p2.updatechecker.UpdateEvent;
 import org.eclipse.jface.preference.IPreferenceStore;
 
 /**
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.ui.sdk/META-INF/MANIFEST.MF
index 8769e79..2db6143 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/META-INF/MANIFEST.MF
@@ -24,15 +24,14 @@ Import-Package: org.eclipse.equinox.internal.p2.core.helpers,
  org.eclipse.equinox.internal.provisional.p2.ui.operations,
  org.eclipse.equinox.internal.provisional.p2.ui.query,
  org.eclipse.equinox.internal.provisional.p2.ui.viewers,
- org.eclipse.equinox.p2.updatechecker,
+ org.eclipse.equinox.internal.provisional.p2.updatechecker,
  org.eclipse.osgi.service.resolver;version="1.1.0",
  org.eclipse.osgi.util;version="1.1.0",
  org.osgi.framework;version="1.3.0",
  org.osgi.service.packageadmin;version="1.2.0"
 Export-Package: org.eclipse.equinox.internal.p2.ui.sdk;x-internal:=true,
  org.eclipse.equinox.internal.p2.ui.sdk.prefs;x-internal:=true,
- org.eclipse.equinox.internal.p2.ui.sdk.updates;x-internal:=true,
- org.eclipse.equinox.p2.ui.sdk
+ org.eclipse.equinox.internal.p2.ui.sdk.updates;x-internal:=true
 Require-Bundle: org.eclipse.ui,
  org.eclipse.core.runtime
 Eclipse-LazyStart: true
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AutomaticUpdateScheduler.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AutomaticUpdateScheduler.java
index 4874158..141b358 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AutomaticUpdateScheduler.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/AutomaticUpdateScheduler.java
@@ -15,8 +15,8 @@ import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.p2.ui.sdk.prefs.PreferenceConstants;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
-import org.eclipse.equinox.p2.updatechecker.IUpdateListener;
-import org.eclipse.equinox.p2.updatechecker.UpdateChecker;
+import org.eclipse.equinox.internal.provisional.p2.updatechecker.IUpdateListener;
+import org.eclipse.equinox.internal.provisional.p2.updatechecker.UpdateChecker;
 import org.eclipse.ui.IStartup;
 import org.eclipse.ui.statushandlers.StatusManager;
 
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
index bd68e81..3195f46 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
@@ -24,7 +24,7 @@ import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
 import org.eclipse.equinox.internal.provisional.p2.ui.model.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
 import org.eclipse.equinox.internal.provisional.p2.ui.query.*;
-import org.eclipse.equinox.p2.updatechecker.UpdateEvent;
+import org.eclipse.equinox.internal.provisional.p2.updatechecker.UpdateEvent;
 
 /**
  * Provides the queries appropriate for the SDK UI.
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUI.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUI.java
new file mode 100644
index 0000000..13a28db
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUI.java
@@ -0,0 +1,29 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.ui.sdk;
+
+import org.eclipse.equinox.internal.provisional.p2.ui.LicenseManager;
+import org.eclipse.equinox.internal.provisional.p2.ui.query.IQueryProvider;
+
+/**
+ * ProvSDKUI provides API for accessing the configurable p2 UI components 
+ * specified when creating UI classes.
+ */
+public class ProvSDKUI {
+
+	public static IQueryProvider getQueryProvider() {
+		return ProvSDKUIActivator.getDefault().getQueryProvider();
+	}
+
+	public static LicenseManager getLicenseManager() {
+		return ProvSDKUIActivator.getDefault().getLicenseManager();
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
index 8b388f1..9b9a897 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/updates/AutomaticUpdater.java
@@ -31,8 +31,8 @@ import org.eclipse.equinox.internal.provisional.p2.ui.model.ProfileElement;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.query.ElementQueryDescriptor;
 import org.eclipse.equinox.internal.provisional.p2.ui.query.IQueryProvider;
-import org.eclipse.equinox.p2.updatechecker.IUpdateListener;
-import org.eclipse.equinox.p2.updatechecker.UpdateEvent;
+import org.eclipse.equinox.internal.provisional.p2.updatechecker.IUpdateListener;
+import org.eclipse.equinox.internal.provisional.p2.updatechecker.UpdateEvent;
 import org.eclipse.jface.action.IStatusLineManager;
 import org.eclipse.jface.window.Window;
 import org.eclipse.jface.wizard.WizardDialog;
@@ -62,7 +62,7 @@ public class AutomaticUpdater implements IUpdateListener {
 
 	/*
 	 * (non-Javadoc)
-	 * @see org.eclipse.equinox.p2.updatechecker.IUpdateListener#updatesAvailable(org.eclipse.equinox.p2.updatechecker.UpdateEvent)
+	 * @see org.eclipse.equinox.internal.provisional.p2.updatechecker.IUpdateListener#updatesAvailable(org.eclipse.equinox.internal.provisional.p2.updatechecker.UpdateEvent)
 	 */
 	public void updatesAvailable(final UpdateEvent event) {
 		final boolean download = prefs.getBoolean(PreferenceConstants.PREF_DOWNLOAD_ONLY);
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/p2/ui/sdk/ProvSDKUI.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/p2/ui/sdk/ProvSDKUI.java
deleted file mode 100644
index ae4d191..0000000
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/p2/ui/sdk/ProvSDKUI.java
+++ /dev/null
@@ -1,30 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.p2.ui.sdk;
-
-import org.eclipse.equinox.internal.p2.ui.sdk.ProvSDKUIActivator;
-import org.eclipse.equinox.internal.provisional.p2.ui.LicenseManager;
-import org.eclipse.equinox.internal.provisional.p2.ui.query.IQueryProvider;
-
-/**
- * ProvSDKUI provides API for accessing the configurable p2 UI components 
- * specified when creating UI classes.
- */
-public class ProvSDKUI {
-
-	public static IQueryProvider getQueryProvider() {
-		return ProvSDKUIActivator.getDefault().getQueryProvider();
-	}
-
-	public static LicenseManager getLicenseManager() {
-		return ProvSDKUIActivator.getDefault().getLicenseManager();
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.ui/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.ui/META-INF/MANIFEST.MF
index 3863070..851ab29 100644
--- a/bundles/org.eclipse.equinox.p2.ui/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.ui/META-INF/MANIFEST.MF
@@ -19,8 +19,8 @@ Import-Package: org.eclipse.equinox.internal.p2.core.helpers,
  org.eclipse.equinox.internal.provisional.p2.metadata,
  org.eclipse.equinox.internal.provisional.p2.metadata.repository,
  org.eclipse.equinox.internal.provisional.p2.query,
+ org.eclipse.equinox.internal.provisional.p2.updatechecker,
  org.eclipse.equinox.internal.provisional.spi.p2.core.repository,
- org.eclipse.equinox.p2.updatechecker,
  org.eclipse.osgi.service.resolver;version="1.1.0",
  org.eclipse.osgi.util;version="1.1.0",
  org.osgi.framework;version="1.3.0",
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
index e721870..4f01f19 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
@@ -23,7 +23,7 @@ import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
 import org.eclipse.equinox.internal.provisional.p2.ui.query.ElementQueryDescriptor;
 import org.eclipse.equinox.internal.provisional.p2.ui.query.IQueryProvider;
-import org.eclipse.equinox.p2.updatechecker.UpdateEvent;
+import org.eclipse.equinox.internal.provisional.p2.updatechecker.UpdateEvent;
 import org.eclipse.swt.widgets.Text;
 
 public class UpdateWizardPage extends UpdateOrInstallWizardPage {
diff --git a/bundles/org.eclipse.equinox.p2.updatechecker/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.updatechecker/META-INF/MANIFEST.MF
index 5f2aa56..2920fc5 100644
--- a/bundles/org.eclipse.equinox.p2.updatechecker/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.updatechecker/META-INF/MANIFEST.MF
@@ -19,5 +19,5 @@ Import-Package: org.eclipse.equinox.internal.p2.core.helpers,
 Bundle-RequiredExecutionEnvironment: CDC-1.0/Foundation-1.0,
  J2SE-1.3
 Export-Package: org.eclipse.equinox.internal.p2.updatechecker;x-internal:=true,
- org.eclipse.equinox.p2.updatechecker
+ org.eclipse.equinox.internal.provisional.p2.updatechecker
 Require-Bundle: org.eclipse.equinox.common;bundle-version="[3.3.0,4.0)"
diff --git a/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/p2/updatechecker/Activator.java b/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/p2/updatechecker/Activator.java
index 4ffbcdc..4702888 100644
--- a/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/p2/updatechecker/Activator.java
+++ b/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/p2/updatechecker/Activator.java
@@ -10,7 +10,7 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.updatechecker;
 
-import org.eclipse.equinox.p2.updatechecker.UpdateChecker;
+import org.eclipse.equinox.internal.provisional.p2.updatechecker.UpdateChecker;
 import org.osgi.framework.*;
 
 /**
diff --git a/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/provisional/p2/updatechecker/IUpdateListener.java b/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/provisional/p2/updatechecker/IUpdateListener.java
new file mode 100644
index 0000000..f942629
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/provisional/p2/updatechecker/IUpdateListener.java
@@ -0,0 +1,23 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.provisional.p2.updatechecker;
+
+/**
+ * An IUpdateListener informs listeners that an update is available for
+ * the specified profile.  Listeners should expect to receive this notification
+ * from a background thread.
+ * 
+ * @since 3.4
+ */
+public interface IUpdateListener {
+
+	public void updatesAvailable(UpdateEvent event);
+}
diff --git a/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/provisional/p2/updatechecker/UpdateChecker.java b/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/provisional/p2/updatechecker/UpdateChecker.java
new file mode 100644
index 0000000..5489a8e
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/provisional/p2/updatechecker/UpdateChecker.java
@@ -0,0 +1,163 @@
+/*******************************************************************************
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.provisional.p2.updatechecker;
+
+import java.text.SimpleDateFormat;
+import java.util.*;
+import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
+import org.eclipse.equinox.internal.p2.updatechecker.Activator;
+import org.eclipse.equinox.internal.provisional.p2.director.IPlanner;
+import org.eclipse.equinox.internal.provisional.p2.engine.*;
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.internal.provisional.p2.metadata.query.InstallableUnitQuery;
+import org.eclipse.equinox.internal.provisional.p2.query.Collector;
+
+/**
+ * An UpdateChecker periodically polls for updates to specified profiles and
+ * informs listeners if updates are available.  Listeners may then determine
+ * whether to retrieve the updates, inform the user, etc.
+ * 
+ * This implementation is not optimized.  It doesn't optimize for multiple
+ * polls on the same profile, nor does it cache any info about a profile from
+ * poll to poll.
+ *
+ * @since 3.4
+ */
+public class UpdateChecker {
+	public static long ONE_TIME_CHECK = -1L;
+	public static boolean DEBUG = false;
+	public static boolean TRACE = false;
+	private HashSet checkers = new HashSet(); // threads
+	IProfileRegistry profileRegistry;
+	IPlanner planner;
+
+	private class UpdateCheckThread extends Thread {
+		boolean done = false;
+		long poll, delay;
+		IUpdateListener listener;
+		String profileId;
+
+		UpdateCheckThread(String profileId, long delay, long poll, IUpdateListener listener) {
+			this.poll = poll;
+			this.delay = delay;
+			this.profileId = profileId;
+			this.listener = listener;
+		}
+
+		public void run() {
+			try {
+				if (delay != ONE_TIME_CHECK && delay > 0) {
+					Thread.sleep(delay);
+				}
+				while (!done) {
+
+					log("Checking for updates for " + profileId + " at " + getTimeStamp()); //$NON-NLS-1$ //$NON-NLS-2$
+					IInstallableUnit[] iusWithUpdates = checkForUpdates(profileId);
+					if (iusWithUpdates.length > 0) {
+						log("Notifying listener of available updates"); //$NON-NLS-1$
+						UpdateEvent event = new UpdateEvent(profileId, iusWithUpdates);
+						if (!done)
+							listener.updatesAvailable(event);
+					} else {
+						log("No updates were available"); //$NON-NLS-1$
+					}
+					if (delay == ONE_TIME_CHECK || delay <= 0) {
+						done = true;
+					} else {
+						Thread.sleep(poll);
+					}
+				}
+			} catch (InterruptedException e) {
+				// nothing
+			} catch (Exception e) {
+				log("Exception in update check thread", e); //$NON-NLS-1$
+			}
+		}
+	}
+
+	public void addUpdateCheck(String profileId, long delay, long poll, IUpdateListener listener) {
+		log("Adding update checker for " + profileId + " at " + getTimeStamp()); //$NON-NLS-1$ //$NON-NLS-2$
+		UpdateCheckThread thread = new UpdateCheckThread(profileId, delay, poll, listener);
+		checkers.add(thread);
+		thread.start();
+	}
+
+	public void removeUpdateCheck(IUpdateListener listener) {
+		Iterator iter = checkers.iterator();
+		while (iter.hasNext()) {
+			UpdateCheckThread thread = (UpdateCheckThread) iter.next();
+			if (thread.listener == listener) {
+				thread.done = true;
+				checkers.remove(thread);
+				break;
+			}
+		}
+	}
+
+	/*
+	 * Return the array of ius in the profile that have updates
+	 * available.
+	 */
+	IInstallableUnit[] checkForUpdates(String profileId) {
+		// TODO this is naive.  We get all the ius every time whereas we
+		// could monitor changes in the profile.
+		IProfile profile = getProfileRegistry().getProfile(profileId);
+		ArrayList iusWithUpdates = new ArrayList();
+		if (profile == null)
+			return new IInstallableUnit[0];
+		Iterator iter = profile.query(InstallableUnitQuery.ANY, new Collector(), null).iterator();
+		while (iter.hasNext()) {
+			IInstallableUnit iu = (IInstallableUnit) iter.next();
+			IInstallableUnit[] replacements = getPlanner().updatesFor(iu, new ProvisioningContext(), null);
+			if (replacements.length > 0)
+				iusWithUpdates.add(iu);
+		}
+		return (IInstallableUnit[]) iusWithUpdates.toArray(new IInstallableUnit[iusWithUpdates.size()]);
+	}
+
+	void log(String string, Throwable e) {
+		System.err.println(string + ": " + e); //$NON-NLS-1$
+		if (DEBUG)
+			e.printStackTrace();
+	}
+
+	void log(String string) {
+		if (TRACE)
+			System.out.println(string);
+	}
+
+	String getTimeStamp() {
+		Date d = new Date();
+		SimpleDateFormat df = new SimpleDateFormat("[MM/dd/yy;HH:mm:ss:SSS]"); //$NON-NLS-1$
+		return df.format(d);
+	}
+
+	IPlanner getPlanner() {
+		if (planner == null) {
+			planner = (IPlanner) ServiceHelper.getService(Activator.getContext(), IPlanner.class.getName());
+			if (planner == null) {
+				throw new IllegalStateException("Provisioning system has not been initialized"); //$NON-NLS-1$
+			}
+		}
+		return planner;
+	}
+
+	IProfileRegistry getProfileRegistry() {
+		if (profileRegistry == null) {
+			profileRegistry = (IProfileRegistry) ServiceHelper.getService(Activator.getContext(), IProfileRegistry.class.getName());
+			if (profileRegistry == null) {
+				throw new IllegalStateException("Provisioning system has not been initialized"); //$NON-NLS-1$
+			}
+		}
+		return profileRegistry;
+	}
+
+}
diff --git a/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/provisional/p2/updatechecker/UpdateEvent.java b/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/provisional/p2/updatechecker/UpdateEvent.java
new file mode 100644
index 0000000..05c86bf
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/internal/provisional/p2/updatechecker/UpdateEvent.java
@@ -0,0 +1,38 @@
+/*******************************************************************************
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.provisional.p2.updatechecker;
+
+import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
+
+/**
+ * An UpdateEvent describes what IU's have updates for a given profile.
+ * 
+ * @since 3.4
+ */
+public class UpdateEvent {
+
+	String profileId;
+	IInstallableUnit[] iusWithUpdates;
+
+	public UpdateEvent(String profileId, IInstallableUnit[] iusWithUpdates) {
+		this.profileId = profileId;
+		this.iusWithUpdates = iusWithUpdates;
+	}
+
+	public IInstallableUnit[] getIUs() {
+		return iusWithUpdates;
+	}
+
+	public String getProfileId() {
+		return profileId;
+	}
+
+}
diff --git a/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/p2/updatechecker/IUpdateListener.java b/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/p2/updatechecker/IUpdateListener.java
deleted file mode 100644
index b9838dd..0000000
--- a/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/p2/updatechecker/IUpdateListener.java
+++ /dev/null
@@ -1,23 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.p2.updatechecker;
-
-/**
- * An IUpdateListener informs listeners that an update is available for
- * the specified profile.  Listeners should expect to receive this notification
- * from a background thread.
- * 
- * @since 3.4
- */
-public interface IUpdateListener {
-
-	public void updatesAvailable(UpdateEvent event);
-}
diff --git a/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/p2/updatechecker/UpdateChecker.java b/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/p2/updatechecker/UpdateChecker.java
deleted file mode 100644
index 407ef57..0000000
--- a/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/p2/updatechecker/UpdateChecker.java
+++ /dev/null
@@ -1,163 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.p2.updatechecker;
-
-import java.text.SimpleDateFormat;
-import java.util.*;
-import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
-import org.eclipse.equinox.internal.p2.updatechecker.Activator;
-import org.eclipse.equinox.internal.provisional.p2.director.IPlanner;
-import org.eclipse.equinox.internal.provisional.p2.engine.*;
-import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.internal.provisional.p2.metadata.query.InstallableUnitQuery;
-import org.eclipse.equinox.internal.provisional.p2.query.Collector;
-
-/**
- * An UpdateChecker periodically polls for updates to specified profiles and
- * informs listeners if updates are available.  Listeners may then determine
- * whether to retrieve the updates, inform the user, etc.
- * 
- * This implementation is not optimized.  It doesn't optimize for multiple
- * polls on the same profile, nor does it cache any info about a profile from
- * poll to poll.
- *
- * @since 3.4
- */
-public class UpdateChecker {
-	public static long ONE_TIME_CHECK = -1L;
-	public static boolean DEBUG = false;
-	public static boolean TRACE = false;
-	private HashSet checkers = new HashSet(); // threads
-	IProfileRegistry profileRegistry;
-	IPlanner planner;
-
-	private class UpdateCheckThread extends Thread {
-		boolean done = false;
-		long poll, delay;
-		IUpdateListener listener;
-		String profileId;
-
-		UpdateCheckThread(String profileId, long delay, long poll, IUpdateListener listener) {
-			this.poll = poll;
-			this.delay = delay;
-			this.profileId = profileId;
-			this.listener = listener;
-		}
-
-		public void run() {
-			try {
-				if (delay != ONE_TIME_CHECK && delay > 0) {
-					Thread.sleep(delay);
-				}
-				while (!done) {
-
-					log("Checking for updates for " + profileId + " at " + getTimeStamp()); //$NON-NLS-1$ //$NON-NLS-2$
-					IInstallableUnit[] iusWithUpdates = checkForUpdates(profileId);
-					if (iusWithUpdates.length > 0) {
-						log("Notifying listener of available updates"); //$NON-NLS-1$
-						UpdateEvent event = new UpdateEvent(profileId, iusWithUpdates);
-						if (!done)
-							listener.updatesAvailable(event);
-					} else {
-						log("No updates were available"); //$NON-NLS-1$
-					}
-					if (delay == ONE_TIME_CHECK || delay <= 0) {
-						done = true;
-					} else {
-						Thread.sleep(poll);
-					}
-				}
-			} catch (InterruptedException e) {
-				// nothing
-			} catch (Exception e) {
-				log("Exception in update check thread", e); //$NON-NLS-1$
-			}
-		}
-	}
-
-	public void addUpdateCheck(String profileId, long delay, long poll, IUpdateListener listener) {
-		log("Adding update checker for " + profileId + " at " + getTimeStamp()); //$NON-NLS-1$ //$NON-NLS-2$
-		UpdateCheckThread thread = new UpdateCheckThread(profileId, delay, poll, listener);
-		checkers.add(thread);
-		thread.start();
-	}
-
-	public void removeUpdateCheck(IUpdateListener listener) {
-		Iterator iter = checkers.iterator();
-		while (iter.hasNext()) {
-			UpdateCheckThread thread = (UpdateCheckThread) iter.next();
-			if (thread.listener == listener) {
-				thread.done = true;
-				checkers.remove(thread);
-				break;
-			}
-		}
-	}
-
-	/*
-	 * Return the array of ius in the profile that have updates
-	 * available.
-	 */
-	IInstallableUnit[] checkForUpdates(String profileId) {
-		// TODO this is naive.  We get all the ius every time whereas we
-		// could monitor changes in the profile.
-		IProfile profile = getProfileRegistry().getProfile(profileId);
-		ArrayList iusWithUpdates = new ArrayList();
-		if (profile == null)
-			return new IInstallableUnit[0];
-		Iterator iter = profile.query(InstallableUnitQuery.ANY, new Collector(), null).iterator();
-		while (iter.hasNext()) {
-			IInstallableUnit iu = (IInstallableUnit) iter.next();
-			IInstallableUnit[] replacements = getPlanner().updatesFor(iu, new ProvisioningContext(), null);
-			if (replacements.length > 0)
-				iusWithUpdates.add(iu);
-		}
-		return (IInstallableUnit[]) iusWithUpdates.toArray(new IInstallableUnit[iusWithUpdates.size()]);
-	}
-
-	void log(String string, Throwable e) {
-		System.err.println(string + ": " + e); //$NON-NLS-1$
-		if (DEBUG)
-			e.printStackTrace();
-	}
-
-	void log(String string) {
-		if (TRACE)
-			System.out.println(string);
-	}
-
-	String getTimeStamp() {
-		Date d = new Date();
-		SimpleDateFormat df = new SimpleDateFormat("[MM/dd/yy;HH:mm:ss:SSS]"); //$NON-NLS-1$
-		return df.format(d);
-	}
-
-	IPlanner getPlanner() {
-		if (planner == null) {
-			planner = (IPlanner) ServiceHelper.getService(Activator.getContext(), IPlanner.class.getName());
-			if (planner == null) {
-				throw new IllegalStateException("Provisioning system has not been initialized"); //$NON-NLS-1$
-			}
-		}
-		return planner;
-	}
-
-	IProfileRegistry getProfileRegistry() {
-		if (profileRegistry == null) {
-			profileRegistry = (IProfileRegistry) ServiceHelper.getService(Activator.getContext(), IProfileRegistry.class.getName());
-			if (profileRegistry == null) {
-				throw new IllegalStateException("Provisioning system has not been initialized"); //$NON-NLS-1$
-			}
-		}
-		return profileRegistry;
-	}
-
-}
diff --git a/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/p2/updatechecker/UpdateEvent.java b/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/p2/updatechecker/UpdateEvent.java
deleted file mode 100644
index 6b4cd3a..0000000
--- a/bundles/org.eclipse.equinox.p2.updatechecker/src/org/eclipse/equinox/p2/updatechecker/UpdateEvent.java
+++ /dev/null
@@ -1,38 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.p2.updatechecker;
-
-import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
-
-/**
- * An UpdateEvent describes what IU's have updates for a given profile.
- * 
- * @since 3.4
- */
-public class UpdateEvent {
-
-	String profileId;
-	IInstallableUnit[] iusWithUpdates;
-
-	public UpdateEvent(String profileId, IInstallableUnit[] iusWithUpdates) {
-		this.profileId = profileId;
-		this.iusWithUpdates = iusWithUpdates;
-	}
-
-	public IInstallableUnit[] getIUs() {
-		return iusWithUpdates;
-	}
-
-	public String getProfileId() {
-		return profileId;
-	}
-
-}

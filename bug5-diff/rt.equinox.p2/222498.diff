commit c93e855717e502b253ccfc0b78e637836b37fc23
Author: Susan Franklin <sfranklin>
Date:   Mon Apr 13 18:25:50 2009 +0000

    Bug 222498 - [ui] Scope for update preferences

3	1	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
23	1	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
4	2	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
23	1	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/PreferenceInitializer.java
16	16	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/ProvisioningPreferencePage.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
index ce5028a..f03b04e 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
+ * Copyright (c) 2007, 2009 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -24,9 +24,11 @@ public class ProvSDKMessages extends NLS {
 		// load message values from bundle file
 		NLS.initializeMessages(BUNDLE_NAME, ProvSDKMessages.class);
 	}
+	public static String Error_Saving_Preferences;
 	public static String Handler_CannotLaunchUI;
 	public static String Handler_SDKUpdateUIMessageTitle;
 	public static String InstallNewSoftwareHandler_LoadRepositoryJobLabel;
+	public static String PreferenceInitializer_Error;
 	public static String ProvisioningPreferencePage_AlwaysOpenWizard;
 	public static String ProvisioningPreferencePage_BrowsingPrefsGroup;
 	public static String ProvisioningPreferencePage_ShowLatestVersions;
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
index caa1ad9..5131d07 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
+ * Copyright (c) 2007, 2009 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -12,7 +12,9 @@ package org.eclipse.equinox.internal.p2.ui.sdk;
 
 import java.io.*;
 import org.eclipse.core.runtime.*;
+import org.eclipse.core.runtime.preferences.DefaultScope;
 import org.eclipse.equinox.internal.p2.ui.sdk.prefs.PreferenceConstants;
+import org.eclipse.equinox.internal.p2.ui.sdk.prefs.PreferenceInitializer;
 import org.eclipse.equinox.internal.provisional.p2.core.IServiceUI;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.core.eventbus.IProvisioningEventBus;
@@ -30,6 +32,8 @@ import org.eclipse.jface.util.PropertyChangeEvent;
 import org.eclipse.ui.plugin.AbstractUIPlugin;
 import org.eclipse.ui.statushandlers.StatusManager;
 import org.osgi.framework.*;
+import org.osgi.service.prefs.BackingStoreException;
+import org.osgi.service.prefs.Preferences;
 
 /**
  * Activator class for the p2 UI.
@@ -46,6 +50,7 @@ public class ProvSDKUIActivator extends AbstractUIPlugin {
 	private IPropertyChangeListener preferenceListener;
 
 	public static final String PLUGIN_ID = "org.eclipse.equinox.p2.ui.sdk"; //$NON-NLS-1$
+	public static final String PREFERENCE_ROOT = "/profile/_SELF_/"; //$NON-NLS-1$
 
 	public static BundleContext getContext() {
 		return context;
@@ -72,6 +77,22 @@ public class ProvSDKUIActivator extends AbstractUIPlugin {
 		return imageDescriptorFromPlugin(PLUGIN_ID, path);
 	}
 
+	public static Preferences getPreferences() {
+		return Platform.getPreferencesService().getRootNode().node(PREFERENCE_ROOT + PLUGIN_ID);
+	}
+
+	public static Preferences getDefaultPreferences() {
+		return new DefaultScope().getNode(PLUGIN_ID);
+	}
+
+	public static void savePreferences() {
+		try {
+			getPreferences().flush();
+		} catch (BackingStoreException e) {
+			ProvUI.handleException(e, ProvSDKMessages.Error_Saving_Preferences, StatusManager.LOG);
+		}
+	}
+
 	public ProvSDKUIActivator() {
 		// constructor
 	}
@@ -86,6 +107,7 @@ public class ProvSDKUIActivator extends AbstractUIPlugin {
 		plugin = this;
 		ProvSDKUIActivator.context = bundleContext;
 		readLicenseRegistry();
+		PreferenceInitializer.migratePreferences();
 		certificateUIRegistration = context.registerService(IServiceUI.class.getName(), new ValidationDialogServiceUI(), null);
 		getPreferenceStore().addPropertyChangeListener(getPreferenceListener());
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
index 41c5f95..2ed5413 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
@@ -1,5 +1,5 @@
 ###############################################################################
-# Copyright (c) 2007, 2008 IBM Corporation and others.
+# Copyright (c) 2007, 2009 IBM Corporation and others.
 # All rights reserved. This program and the accompanying materials
 # are made available under the terms of the Eclipse Public License v1.0
 # which accompanies this distribution, and is available at
@@ -10,9 +10,11 @@
 ###############################################################################
 
 
+Error_Saving_Preferences=Error saving update preferences
 Handler_CannotLaunchUI=Cannot launch the Update UI.  This installation has not been configured properly for Software Updates.
 Handler_SDKUpdateUIMessageTitle=Software Updates
 InstallNewSoftwareHandler_LoadRepositoryJobLabel=Contacting Software Sites
+PreferenceInitializer_Error=Error accessing preferences.
 ProvSDKUIActivator_ErrorWritingLicenseRegistry=Error writing license registry.  Accepted licenses will not be remembered.
 ProvSDKUIActivator_LicenseManagerReadError=Error reading license registry.  Accepted licenses will not be remembered.
 ProvSDKUIActivator_NoSelfProfile=Could not locate the running profile instance. The eclipse.p2.data.area and eclipse.p2.profile properties may not be set correctly in this application's config.ini file.
@@ -27,4 +29,4 @@ ProvisioningPreferencePage_NeverOpenWizard=&Report the problems and do not open
 ProvisioningPreferencePage_OpenWizardIfInvalid=When software selected for an install wizard may not be compatible
 ProvisioningPreferencePage_PromptToOpenWizard=&Ask me what to do when it happens
 UpdateHandler_NoSitesMessage=There are no update sites to search.  Do you wish to open the "Available Software Sites" preferences?
-UpdateHandler_NoSitesTitle=No Updates Found
+UpdateHandler_NoSitesTitle=No Updates Found
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/PreferenceInitializer.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/PreferenceInitializer.java
index 83c7f1a..829943f 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/PreferenceInitializer.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/PreferenceInitializer.java
@@ -12,7 +12,12 @@ package org.eclipse.equinox.internal.p2.ui.sdk.prefs;
 
 import org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer;
 import org.eclipse.core.runtime.preferences.DefaultScope;
+import org.eclipse.equinox.internal.p2.ui.sdk.ProvSDKMessages;
+import org.eclipse.equinox.internal.p2.ui.sdk.ProvSDKUIActivator;
+import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
 import org.eclipse.jface.dialogs.MessageDialogWithToggle;
+import org.eclipse.ui.statushandlers.StatusManager;
+import org.osgi.service.prefs.BackingStoreException;
 import org.osgi.service.prefs.Preferences;
 
 /**
@@ -20,13 +25,30 @@ import org.osgi.service.prefs.Preferences;
  */
 public class PreferenceInitializer extends AbstractPreferenceInitializer {
 
+	public static void migratePreferences() {
+		Preferences pref = ProvSDKUIActivator.getPreferences();
+		try {
+			if (pref.keys().length == 0) {
+				// migrate preferences from instance scope to profile scope
+				org.eclipse.core.runtime.Preferences oldPref = ProvSDKUIActivator.getDefault().getPluginPreferences();
+				// don't migrate everything.  Some of the preferences moved to
+				// another bundle.
+				pref.put(PreferenceConstants.PREF_OPEN_WIZARD_ON_ERROR_PLAN, oldPref.getString(PreferenceConstants.PREF_OPEN_WIZARD_ON_ERROR_PLAN));
+				pref.putBoolean(PreferenceConstants.PREF_SHOW_LATEST_VERSION, oldPref.getBoolean(PreferenceConstants.PREF_SHOW_LATEST_VERSION));
+				ProvSDKUIActivator.savePreferences();
+			}
+		} catch (BackingStoreException e) {
+			ProvUI.handleException(e, ProvSDKMessages.PreferenceInitializer_Error, StatusManager.LOG);
+		}
+	}
+
 	/* (non-Javadoc)
 	 * @see org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer#initializeDefaultPreferences()
 	 */
 	public void initializeDefaultPreferences() {
 		Preferences node = new DefaultScope().getNode("org.eclipse.equinox.p2.ui.sdk"); //$NON-NLS-1$
+		// default values
 		node.putBoolean(PreferenceConstants.PREF_SHOW_LATEST_VERSION, true);
 		node.put(PreferenceConstants.PREF_OPEN_WIZARD_ON_ERROR_PLAN, MessageDialogWithToggle.PROMPT);
 	}
-
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/ProvisioningPreferencePage.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/ProvisioningPreferencePage.java
index ca62afe..d4ab9e0 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/ProvisioningPreferencePage.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/ProvisioningPreferencePage.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
+ * Copyright (c) 2007, 2008, 2009 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -10,7 +10,6 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.sdk.prefs;
 
-import org.eclipse.core.runtime.Preferences;
 import org.eclipse.equinox.internal.p2.ui.sdk.*;
 import org.eclipse.jface.dialogs.Dialog;
 import org.eclipse.jface.dialogs.MessageDialogWithToggle;
@@ -20,6 +19,7 @@ import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.layout.GridLayout;
 import org.eclipse.swt.widgets.*;
 import org.eclipse.ui.*;
+import org.osgi.service.prefs.Preferences;
 
 /**
  * Preference page for general provisioning preferences.
@@ -97,10 +97,10 @@ public class ProvisioningPreferencePage extends PreferencePage implements IWorkb
 	}
 
 	private void initialize() {
-		Preferences pref = ProvSDKUIActivator.getDefault().getPluginPreferences();
-		showLatestRadio.setSelection(pref.getBoolean(PreferenceConstants.PREF_SHOW_LATEST_VERSION));
-		showAllRadio.setSelection(!pref.getBoolean(PreferenceConstants.PREF_SHOW_LATEST_VERSION));
-		String openWizard = pref.getString(PreferenceConstants.PREF_OPEN_WIZARD_ON_ERROR_PLAN);
+		Preferences pref = ProvSDKUIActivator.getPreferences();
+		showLatestRadio.setSelection(pref.getBoolean(PreferenceConstants.PREF_SHOW_LATEST_VERSION, false));
+		showAllRadio.setSelection(!pref.getBoolean(PreferenceConstants.PREF_SHOW_LATEST_VERSION, false));
+		String openWizard = pref.get(PreferenceConstants.PREF_OPEN_WIZARD_ON_ERROR_PLAN, ""); //$NON-NLS-1$
 		alwaysShowFailedPlan.setSelection(openWizard.equals(MessageDialogWithToggle.ALWAYS));
 		neverShowFailedPlan.setSelection(openWizard.equals(MessageDialogWithToggle.NEVER));
 		promptOnFailedPlan.setSelection(openWizard.equals(MessageDialogWithToggle.PROMPT));
@@ -108,26 +108,26 @@ public class ProvisioningPreferencePage extends PreferencePage implements IWorkb
 
 	protected void performDefaults() {
 		super.performDefaults();
-		Preferences pref = ProvSDKUIActivator.getDefault().getPluginPreferences();
-		showLatestRadio.setSelection(pref.getDefaultBoolean(PreferenceConstants.PREF_SHOW_LATEST_VERSION));
-		showAllRadio.setSelection(!pref.getDefaultBoolean(PreferenceConstants.PREF_SHOW_LATEST_VERSION));
-		String openWizard = pref.getDefaultString(PreferenceConstants.PREF_OPEN_WIZARD_ON_ERROR_PLAN);
+		Preferences pref = ProvSDKUIActivator.getDefaultPreferences();
+		showLatestRadio.setSelection(pref.getBoolean(PreferenceConstants.PREF_SHOW_LATEST_VERSION, false));
+		showAllRadio.setSelection(!pref.getBoolean(PreferenceConstants.PREF_SHOW_LATEST_VERSION, false));
+		String openWizard = pref.get(PreferenceConstants.PREF_OPEN_WIZARD_ON_ERROR_PLAN, ""); //$NON-NLS-1$
 		alwaysShowFailedPlan.setSelection(openWizard.equals(MessageDialogWithToggle.ALWAYS));
 		neverShowFailedPlan.setSelection(openWizard.equals(MessageDialogWithToggle.NEVER));
 		promptOnFailedPlan.setSelection(openWizard.equals(MessageDialogWithToggle.PROMPT));
 	}
 
 	public boolean performOk() {
-		Preferences pref = ProvSDKUIActivator.getDefault().getPluginPreferences();
-		pref.setValue(PreferenceConstants.PREF_SHOW_LATEST_VERSION, showLatestRadio.getSelection());
+		Preferences pref = ProvSDKUIActivator.getPreferences();
+		pref.putBoolean(PreferenceConstants.PREF_SHOW_LATEST_VERSION, showLatestRadio.getSelection());
 		if (alwaysShowFailedPlan.getSelection())
-			pref.setValue(PreferenceConstants.PREF_OPEN_WIZARD_ON_ERROR_PLAN, MessageDialogWithToggle.ALWAYS);
+			pref.put(PreferenceConstants.PREF_OPEN_WIZARD_ON_ERROR_PLAN, MessageDialogWithToggle.ALWAYS);
 		else if (neverShowFailedPlan.getSelection())
-			pref.setValue(PreferenceConstants.PREF_OPEN_WIZARD_ON_ERROR_PLAN, MessageDialogWithToggle.NEVER);
+			pref.put(PreferenceConstants.PREF_OPEN_WIZARD_ON_ERROR_PLAN, MessageDialogWithToggle.NEVER);
 		else
-			pref.setValue(PreferenceConstants.PREF_OPEN_WIZARD_ON_ERROR_PLAN, MessageDialogWithToggle.PROMPT);
+			pref.put(PreferenceConstants.PREF_OPEN_WIZARD_ON_ERROR_PLAN, MessageDialogWithToggle.PROMPT);
 
-		ProvSDKUIActivator.getDefault().savePluginPreferences();
+		ProvSDKUIActivator.savePreferences();
 		return true;
 	}
 
commit a8c5b646cbb4086e0ad7bcb4b2669f46a18c3252
Author: Susan Franklin <sfranklin>
Date:   Wed Apr 22 22:36:14 2009 +0000

    Bug 222498 - [ui] Scope for update preferences

0	79	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileScope.java
79	0	bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/ProfileScope.java
37	27	bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdatePlugin.java
12	12	bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdateScheduler.java
0	3	bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdater.java
111	67	bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdatesPreferencePage.java
39	61	bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/PreferenceInitializer.java
1	0	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
26	22	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
1	0	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
9	7	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/PreferenceInitializer.java
13	11	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/ProvisioningPreferencePage.java
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileScope.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileScope.java
deleted file mode 100644
index f7c1598..0000000
--- a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/p2/engine/ProfileScope.java
+++ /dev/null
@@ -1,79 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2009 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-package org.eclipse.equinox.internal.p2.engine;
-
-import org.eclipse.core.internal.preferences.PreferencesService;
-import org.eclipse.core.runtime.IPath;
-import org.eclipse.core.runtime.preferences.IEclipsePreferences;
-import org.eclipse.core.runtime.preferences.IScopeContext;
-
-public final class ProfileScope implements IScopeContext {
-
-	/*
-	 * String constant (value of <code>"profile"</code>) used for the 
-	 * scope name for this preference scope.
-	 */
-	public static final String SCOPE = "profile"; //$NON-NLS-1$
-
-	private String profileId;
-
-	/*
-	 * Create and return a new profile scope for the given profile. The given
-	 * profile must not be null.
-	 */
-	public ProfileScope(String profileId) {
-		super();
-		if (profileId == null)
-			throw new IllegalArgumentException();
-		this.profileId = profileId;
-	}
-
-	public IPath getLocation() {
-		// Null returned as the location should only be used when the profile is locked
-		return null;
-	}
-
-	public String getName() {
-		return SCOPE;
-	}
-
-	/*
-	 * Default path hierarchy for profile nodes is /profile/<profileId>/<qualifier>.
-	 * 
-	 * @see org.eclipse.core.runtime.preferences.IScopeContext#getNode(java.lang.String)
-	 */
-	public IEclipsePreferences getNode(String qualifier) {
-		if (qualifier == null)
-			throw new IllegalArgumentException();
-		return (IEclipsePreferences) PreferencesService.getDefault().getRootNode().node(getName()).node(profileId).node(qualifier);
-	}
-
-	/* (non-Javadoc)
-	 * @see java.lang.Object#equals(java.lang.Object)
-	 */
-	public boolean equals(Object obj) {
-		if (this == obj)
-			return true;
-		if (!super.equals(obj))
-			return false;
-		if (!(obj instanceof ProfileScope))
-			return false;
-		ProfileScope other = (ProfileScope) obj;
-		return profileId.equals(other.profileId);
-	}
-
-	/* (non-Javadoc)
-	 * @see java.lang.Object#hashCode()
-	 */
-	public int hashCode() {
-		return super.hashCode() + profileId.hashCode();
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/ProfileScope.java b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/ProfileScope.java
new file mode 100644
index 0000000..70d72d6
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.engine/src/org/eclipse/equinox/internal/provisional/p2/engine/ProfileScope.java
@@ -0,0 +1,79 @@
+/*******************************************************************************
+ * Copyright (c) 2009 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.provisional.p2.engine;
+
+import org.eclipse.core.internal.preferences.PreferencesService;
+import org.eclipse.core.runtime.IPath;
+import org.eclipse.core.runtime.preferences.IEclipsePreferences;
+import org.eclipse.core.runtime.preferences.IScopeContext;
+
+public final class ProfileScope implements IScopeContext {
+
+	/*
+	 * String constant (value of <code>"profile"</code>) used for the 
+	 * scope name for this preference scope.
+	 */
+	public static final String SCOPE = "profile"; //$NON-NLS-1$
+
+	private String profileId;
+
+	/*
+	 * Create and return a new profile scope for the given profile. The given
+	 * profile must not be null.
+	 */
+	public ProfileScope(String profileId) {
+		super();
+		if (profileId == null)
+			throw new IllegalArgumentException();
+		this.profileId = profileId;
+	}
+
+	public IPath getLocation() {
+		// Null returned as the location should only be used when the profile is locked
+		return null;
+	}
+
+	public String getName() {
+		return SCOPE;
+	}
+
+	/*
+	 * Default path hierarchy for profile nodes is /profile/<profileId>/<qualifier>.
+	 * 
+	 * @see org.eclipse.core.runtime.preferences.IScopeContext#getNode(java.lang.String)
+	 */
+	public IEclipsePreferences getNode(String qualifier) {
+		if (qualifier == null)
+			throw new IllegalArgumentException();
+		return (IEclipsePreferences) PreferencesService.getDefault().getRootNode().node(getName()).node(profileId).node(qualifier);
+	}
+
+	/* (non-Javadoc)
+	 * @see java.lang.Object#equals(java.lang.Object)
+	 */
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (!super.equals(obj))
+			return false;
+		if (!(obj instanceof ProfileScope))
+			return false;
+		ProfileScope other = (ProfileScope) obj;
+		return profileId.equals(other.profileId);
+	}
+
+	/* (non-Javadoc)
+	 * @see java.lang.Object#hashCode()
+	 */
+	public int hashCode() {
+		return super.hashCode() + profileId.hashCode();
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdatePlugin.java b/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdatePlugin.java
index 064a5c3..1a3e4cd 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdatePlugin.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdatePlugin.java
@@ -10,18 +10,20 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.sdk.scheduler;
 
-import org.eclipse.core.runtime.Platform;
-import org.eclipse.core.runtime.preferences.DefaultScope;
+import java.io.IOException;
+
 import org.eclipse.equinox.internal.provisional.p2.core.eventbus.IProvisioningEventBus;
+import org.eclipse.equinox.internal.provisional.p2.engine.IProfileRegistry;
+import org.eclipse.equinox.internal.provisional.p2.engine.ProfileScope;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
+import org.eclipse.jface.preference.IPreferenceStore;
 import org.eclipse.ui.plugin.AbstractUIPlugin;
+import org.eclipse.ui.preferences.ScopedPreferenceStore;
 import org.eclipse.ui.statushandlers.StatusManager;
 import org.osgi.framework.Bundle;
 import org.osgi.framework.BundleContext;
 import org.osgi.framework.ServiceReference;
 import org.osgi.service.packageadmin.PackageAdmin;
-import org.osgi.service.prefs.BackingStoreException;
-import org.osgi.service.prefs.Preferences;
 
 /**
  * Activator class for the automatic updates plugin
@@ -35,14 +37,14 @@ public class AutomaticUpdatePlugin extends AbstractUIPlugin {
 
 	private AutomaticUpdateScheduler scheduler;
 	private AutomaticUpdater updater;
+	private ScopedPreferenceStore preferenceStore;
 
 	public static final String PLUGIN_ID = "org.eclipse.equinox.p2.ui.sdk.scheduler"; //$NON-NLS-1$
-	public static final String PREFERENCE_ROOT = "/profile/_SELF_/"; //$NON-NLS-1$
 
 	public static BundleContext getContext() {
 		return context;
 	}
-	
+
 	public static Bundle getBundle(String symbolicName) {
 		if (packageAdmin == null)
 			return null;
@@ -57,22 +59,6 @@ public class AutomaticUpdatePlugin extends AbstractUIPlugin {
 		}
 		return null;
 	}
-	
-	static Preferences getPreferences() {
-		return Platform.getPreferencesService().getRootNode().node(PREFERENCE_ROOT + PLUGIN_ID);
-	}
-	
-	static Preferences getDefaultPreferences() {
-		return new DefaultScope().getNode(PLUGIN_ID);
-	}
-	
-	static void savePreferences() {
-		try {
-			getPreferences().flush();
-		} catch (BackingStoreException e) {
-			ProvUI.handleException(e, AutomaticUpdateMessages.ErrorSavingPreferences, StatusManager.LOG); 
-		}
-	}
 
 	/**
 	 * Returns the singleton plugin instance
@@ -90,7 +76,9 @@ public class AutomaticUpdatePlugin extends AbstractUIPlugin {
 	/*
 	 * (non-Javadoc)
 	 * 
-	 * @see org.eclipse.ui.plugin.AbstractUIPlugin#start(org.osgi.framework.BundleContext)
+	 * @see
+	 * org.eclipse.ui.plugin.AbstractUIPlugin#start(org.osgi.framework.BundleContext
+	 * )
 	 */
 	public void start(BundleContext bundleContext) throws Exception {
 		super.start(bundleContext);
@@ -99,14 +87,14 @@ public class AutomaticUpdatePlugin extends AbstractUIPlugin {
 		packageAdminRef = bundleContext.getServiceReference(PackageAdmin.class.getName());
 		packageAdmin = (PackageAdmin) bundleContext.getService(packageAdminRef);
 
-		// TODO for now we need to manually start up the provisioning infrastructure
-		// and the update checker, because the Eclipse Application launch config won't 
-		// let me specify bundles to start.
+		// TODO for now we need to manually start up the provisioning
+		// infrastructure and the update checker, because the Eclipse
+		// Application launch config won't let me specify bundles to start.
 		getBundle("org.eclipse.equinox.p2.exemplarysetup").start(Bundle.START_TRANSIENT); //$NON-NLS-1$
 		getBundle("org.eclipse.equinox.frameworkadmin.equinox").start(Bundle.START_TRANSIENT); //$NON-NLS-1$
 		getBundle("org.eclipse.equinox.simpleconfigurator.manipulator").start(Bundle.START_TRANSIENT); //$NON-NLS-1$
 		getBundle("org.eclipse.equinox.p2.updatechecker").start(Bundle.START_TRANSIENT); //$NON-NLS-1$
-		
+
 		PreferenceInitializer.migratePreferences();
 	}
 
@@ -149,4 +137,26 @@ public class AutomaticUpdatePlugin extends AbstractUIPlugin {
 			return null;
 		return (IProvisioningEventBus) context.getService(busReference);
 	}
+
+	/*
+	 * Overridden to use a profile scoped preference store. (non-Javadoc)
+	 * 
+	 * @see org.eclipse.ui.plugin.AbstractUIPlugin#getPreferenceStore()
+	 */
+	public IPreferenceStore getPreferenceStore() {
+		// Create the preference store lazily.
+		if (preferenceStore == null) {
+			preferenceStore = new ScopedPreferenceStore(new ProfileScope(IProfileRegistry.SELF), PLUGIN_ID);
+		}
+		return preferenceStore;
+	}
+
+	public void savePreferences() {
+		if (preferenceStore != null)
+			try {
+				preferenceStore.save();
+			} catch (IOException e) {
+				ProvUI.handleException(e, AutomaticUpdateMessages.ErrorSavingPreferences, StatusManager.LOG | StatusManager.SHOW);
+			}
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdateScheduler.java b/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdateScheduler.java
index 340eaaa..755b085 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdateScheduler.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdateScheduler.java
@@ -13,7 +13,6 @@ package org.eclipse.equinox.internal.p2.ui.sdk.scheduler;
 import java.util.Calendar;
 
 import org.eclipse.core.runtime.IStatus;
-import org.osgi.service.prefs.Preferences;
 import org.eclipse.core.runtime.Status;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
@@ -24,6 +23,7 @@ import org.eclipse.equinox.internal.provisional.p2.query.Query;
 import org.eclipse.equinox.internal.provisional.p2.updatechecker.IUpdateChecker;
 import org.eclipse.equinox.internal.provisional.p2.updatechecker.IUpdateListener;
 import org.eclipse.equinox.internal.provisional.p2.updatechecker.UpdateEvent;
+import org.eclipse.jface.preference.IPreferenceStore;
 import org.eclipse.ui.IStartup;
 import org.eclipse.ui.statushandlers.StatusManager;
 
@@ -113,8 +113,8 @@ public class AutomaticUpdateScheduler implements IStartup {
 
 	public void rescheduleUpdate() {
 		removeUpdateListener();
-		Preferences pref = AutomaticUpdatePlugin.getPreferences();
-		String schedule = pref.get(PreferenceConstants.PREF_AUTO_UPDATE_SCHEDULE, "");
+		IPreferenceStore pref = AutomaticUpdatePlugin.getDefault().getPreferenceStore();
+		String schedule = pref.getString(PreferenceConstants.PREF_AUTO_UPDATE_SCHEDULE);
 		// See if we have a scheduled check or startup only.  If it is
 		// startup only, there is nothing more to do now, a listener will
 		// be created on the next startup.
@@ -128,11 +128,11 @@ public class AutomaticUpdateScheduler implements IStartup {
 		// Nothing to do if we don't know what profile we are checking
 		if (profileId == null)
 			return;
-		Preferences pref = AutomaticUpdatePlugin.getPreferences();
+		IPreferenceStore pref = AutomaticUpdatePlugin.getDefault().getPreferenceStore();
 		// See if automatic search is enabled at all
-		if (pref.getBoolean(PreferenceConstants.PREF_AUTO_UPDATE_ENABLED, false) == false)
+		if (!pref.getBoolean(PreferenceConstants.PREF_AUTO_UPDATE_ENABLED))
 			return;
-		String schedule = pref.get(PreferenceConstants.PREF_AUTO_UPDATE_SCHEDULE, "");
+		String schedule = pref.getString(PreferenceConstants.PREF_AUTO_UPDATE_SCHEDULE);
 		long delay = IUpdateChecker.ONE_TIME_CHECK;
 		long poll = IUpdateChecker.ONE_TIME_CHECK;
 		if (!schedule.equals(PreferenceConstants.PREF_UPDATE_ON_STARTUP)) {
@@ -159,8 +159,8 @@ public class AutomaticUpdateScheduler implements IStartup {
 		return new IUProfilePropertyByIdQuery(IInstallableUnit.PROP_PROFILE_ROOT_IU, Boolean.toString(true));
 	}
 
-	private int getDay(Preferences pref) {
-		String day = pref.get(P_DAY, "");
+	private int getDay(IPreferenceStore pref) {
+		String day = pref.getString(P_DAY);
 		for (int d = 0; d < DAYS.length; d++)
 			if (DAYS[d].equals(day))
 				switch (d) {
@@ -184,8 +184,8 @@ public class AutomaticUpdateScheduler implements IStartup {
 		return -1;
 	}
 
-	private int getHour(Preferences pref) {
-		String hour = pref.get(P_HOUR, "");
+	private int getHour(IPreferenceStore pref) {
+		String hour = pref.getString(P_HOUR);
 		for (int h = 0; h < HOURS.length; h++)
 			if (HOURS[h].equals(hour))
 				return h + 1;
@@ -197,7 +197,7 @@ public class AutomaticUpdateScheduler implements IStartup {
 	 * scheduled update check. If that moment has already passed, returns 0L (start
 	 * immediately).
 	 */
-	private long computeDelay(Preferences pref) {
+	private long computeDelay(IPreferenceStore pref) {
 
 		int target_d = getDay(pref);
 		int target_h = getHour(pref);
@@ -243,7 +243,7 @@ public class AutomaticUpdateScheduler implements IStartup {
 	 * We have already established that there is a schedule, vs. only
 	 * on startup.
 	 */
-	private long computePoll(Preferences pref) {
+	private long computePoll(IPreferenceStore pref) {
 
 		int target_d = getDay(pref);
 		if (target_d == -1) {
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdater.java b/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdater.java
index dd7ea07..72f167b 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdater.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdater.java
@@ -74,9 +74,6 @@ public class AutomaticUpdater implements IUpdateListener {
 	boolean alreadyDownloaded = false;
 	private static final String AUTO_UPDATE_STATUS_ITEM = "AutoUpdatesStatus"; //$NON-NLS-1$
 
-	public AutomaticUpdater() {
-	}
-
 	/*
 	 * (non-Javadoc)
 	 * 
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdatesPreferencePage.java b/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdatesPreferencePage.java
index ed94e4f..7d9e589 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdatesPreferencePage.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdatesPreferencePage.java
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2007, 2009 IBM Corporation and others.
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -10,8 +10,8 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.sdk.scheduler;
 
-import org.osgi.service.prefs.Preferences;
 import org.eclipse.jface.dialogs.Dialog;
+import org.eclipse.jface.preference.IPreferenceStore;
 import org.eclipse.jface.preference.PreferencePage;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.events.SelectionAdapter;
@@ -32,9 +32,10 @@ import org.eclipse.ui.PlatformUI;
  * Preference page for automated updates.
  * 
  * @since 3.4
- *
+ * 
  */
-public class AutomaticUpdatesPreferencePage extends PreferencePage implements IWorkbenchPreferencePage {
+public class AutomaticUpdatesPreferencePage extends PreferencePage implements
+		IWorkbenchPreferencePage {
 
 	private Button enabledCheck;
 	private Button onStartupRadio, onScheduleRadio;
@@ -51,7 +52,12 @@ public class AutomaticUpdatesPreferencePage extends PreferencePage implements IW
 	}
 
 	protected Control createContents(Composite parent) {
-		PlatformUI.getWorkbench().getHelpSystem().setHelp(parent, IAutomaticUpdaterHelpContextIds.AUTOMATIC_UPDATES_PREFERENCE_PAGE);
+		PlatformUI
+				.getWorkbench()
+				.getHelpSystem()
+				.setHelp(
+						parent,
+						IAutomaticUpdaterHelpContextIds.AUTOMATIC_UPDATES_PREFERENCE_PAGE);
 
 		Composite container = new Composite(parent, SWT.NULL);
 		GridLayout layout = new GridLayout();
@@ -59,12 +65,14 @@ public class AutomaticUpdatesPreferencePage extends PreferencePage implements IW
 		container.setLayout(layout);
 
 		enabledCheck = new Button(container, SWT.CHECK);
-		enabledCheck.setText(AutomaticUpdateMessages.AutomaticUpdatesPreferencePage_findUpdates);
+		enabledCheck
+				.setText(AutomaticUpdateMessages.AutomaticUpdatesPreferencePage_findUpdates);
 
 		createSpacer(container, 1);
 
 		updateScheduleGroup = new Group(container, SWT.NONE);
-		updateScheduleGroup.setText(AutomaticUpdateMessages.AutomaticUpdatesPreferencePage_UpdateSchedule);
+		updateScheduleGroup
+				.setText(AutomaticUpdateMessages.AutomaticUpdatesPreferencePage_UpdateSchedule);
 		layout = new GridLayout();
 		layout.numColumns = 3;
 		updateScheduleGroup.setLayout(layout);
@@ -72,7 +80,8 @@ public class AutomaticUpdatesPreferencePage extends PreferencePage implements IW
 		updateScheduleGroup.setLayoutData(gd);
 
 		onStartupRadio = new Button(updateScheduleGroup, SWT.RADIO);
-		onStartupRadio.setText(AutomaticUpdateMessages.AutomaticUpdatesPreferencePage_findOnStart);
+		onStartupRadio
+				.setText(AutomaticUpdateMessages.AutomaticUpdatesPreferencePage_findOnStart);
 		gd = new GridData();
 		gd.horizontalSpan = 3;
 		onStartupRadio.setLayoutData(gd);
@@ -83,7 +92,8 @@ public class AutomaticUpdatesPreferencePage extends PreferencePage implements IW
 		});
 
 		onScheduleRadio = new Button(updateScheduleGroup, SWT.RADIO);
-		onScheduleRadio.setText(AutomaticUpdateMessages.AutomaticUpdatesPreferencePage_findOnSchedule);
+		onScheduleRadio
+				.setText(AutomaticUpdateMessages.AutomaticUpdatesPreferencePage_findOnSchedule);
 		gd = new GridData();
 		gd.horizontalSpan = 3;
 		onScheduleRadio.setLayoutData(gd);
@@ -101,7 +111,8 @@ public class AutomaticUpdatesPreferencePage extends PreferencePage implements IW
 		dayCombo.setLayoutData(gd);
 
 		atLabel = new Label(updateScheduleGroup, SWT.NULL);
-		atLabel.setText(AutomaticUpdateMessages.AutomaticUpdatesPreferencePage_at);
+		atLabel
+				.setText(AutomaticUpdateMessages.AutomaticUpdatesPreferencePage_at);
 
 		hourCombo = new Combo(updateScheduleGroup, SWT.READ_ONLY);
 		hourCombo.setItems(AutomaticUpdateScheduler.HOURS);
@@ -111,7 +122,8 @@ public class AutomaticUpdatesPreferencePage extends PreferencePage implements IW
 		createSpacer(container, 1);
 
 		downloadGroup = new Group(container, SWT.NONE);
-		downloadGroup.setText(AutomaticUpdateMessages.AutomaticUpdatesPreferencePage_downloadOptions);
+		downloadGroup
+				.setText(AutomaticUpdateMessages.AutomaticUpdatesPreferencePage_downloadOptions);
 		layout = new GridLayout();
 		layout.numColumns = 3;
 		downloadGroup.setLayout(layout);
@@ -119,7 +131,8 @@ public class AutomaticUpdatesPreferencePage extends PreferencePage implements IW
 		downloadGroup.setLayoutData(gd);
 
 		searchOnlyRadio = new Button(downloadGroup, SWT.RADIO);
-		searchOnlyRadio.setText(AutomaticUpdateMessages.AutomaticUpdatesPreferencePage_searchAndNotify);
+		searchOnlyRadio
+				.setText(AutomaticUpdateMessages.AutomaticUpdatesPreferencePage_searchAndNotify);
 		gd = new GridData();
 		gd.horizontalSpan = 3;
 		searchOnlyRadio.setLayoutData(gd);
@@ -130,7 +143,8 @@ public class AutomaticUpdatesPreferencePage extends PreferencePage implements IW
 		});
 
 		searchAndDownloadRadio = new Button(downloadGroup, SWT.RADIO);
-		searchAndDownloadRadio.setText(AutomaticUpdateMessages.AutomaticUpdatesPreferencePage_downloadAndNotify);
+		searchAndDownloadRadio
+				.setText(AutomaticUpdateMessages.AutomaticUpdatesPreferencePage_downloadAndNotify);
 		gd = new GridData();
 		gd.horizontalSpan = 3;
 		searchAndDownloadRadio.setLayoutData(gd);
@@ -143,7 +157,8 @@ public class AutomaticUpdatesPreferencePage extends PreferencePage implements IW
 		createSpacer(container, 1);
 
 		remindGroup = new Group(container, SWT.NONE);
-		remindGroup.setText(AutomaticUpdateMessages.AutomaticUpdatesPreferencePage_RemindGroup);
+		remindGroup
+				.setText(AutomaticUpdateMessages.AutomaticUpdatesPreferencePage_RemindGroup);
 		layout = new GridLayout();
 		layout.numColumns = 3;
 		remindGroup.setLayout(layout);
@@ -151,7 +166,8 @@ public class AutomaticUpdatesPreferencePage extends PreferencePage implements IW
 		remindGroup.setLayoutData(gd);
 
 		remindOnceRadio = new Button(remindGroup, SWT.RADIO);
-		remindOnceRadio.setText(AutomaticUpdateMessages.AutomaticUpdatesPreferencePage_RemindOnce);
+		remindOnceRadio
+				.setText(AutomaticUpdateMessages.AutomaticUpdatesPreferencePage_RemindOnce);
 		gd = new GridData();
 		gd.horizontalSpan = 3;
 		remindOnceRadio.setLayoutData(gd);
@@ -162,7 +178,8 @@ public class AutomaticUpdatesPreferencePage extends PreferencePage implements IW
 		});
 
 		remindScheduleRadio = new Button(remindGroup, SWT.RADIO);
-		remindScheduleRadio.setText(AutomaticUpdateMessages.AutomaticUpdatesPreferencePage_RemindSchedule);
+		remindScheduleRadio
+				.setText(AutomaticUpdateMessages.AutomaticUpdatesPreferencePage_RemindSchedule);
 		gd = new GridData();
 		gd.horizontalSpan = 3;
 		remindScheduleRadio.setLayoutData(gd);
@@ -200,19 +217,27 @@ public class AutomaticUpdatesPreferencePage extends PreferencePage implements IW
 	}
 
 	private void initialize() {
-		Preferences pref = AutomaticUpdatePlugin.getPreferences();
-		enabledCheck.setSelection(pref.getBoolean(PreferenceConstants.PREF_AUTO_UPDATE_ENABLED, false));
-		setSchedule(pref.get(PreferenceConstants.PREF_AUTO_UPDATE_SCHEDULE, ""));
-		
-		dayCombo.setText(AutomaticUpdateScheduler.DAYS[getDay(pref)]);
-		hourCombo.setText(AutomaticUpdateScheduler.HOURS[getHour(pref)]);
-		
-		remindScheduleRadio.setSelection(pref.getBoolean(PreferenceConstants.PREF_REMIND_SCHEDULE, false));
-		remindOnceRadio.setSelection(!pref.getBoolean(PreferenceConstants.PREF_REMIND_SCHEDULE, false));
-		remindElapseCombo.setText(pref.get(PreferenceConstants.PREF_REMIND_ELAPSED, ""));
-		searchOnlyRadio.setSelection(!pref.getBoolean(PreferenceConstants.PREF_DOWNLOAD_ONLY, false));
-		searchAndDownloadRadio.setSelection(pref.getBoolean(PreferenceConstants.PREF_DOWNLOAD_ONLY, false));
-		
+		IPreferenceStore pref = AutomaticUpdatePlugin.getDefault()
+				.getPreferenceStore();
+		enabledCheck.setSelection(pref
+				.getBoolean(PreferenceConstants.PREF_AUTO_UPDATE_ENABLED));
+		setSchedule(pref
+				.getString(PreferenceConstants.PREF_AUTO_UPDATE_SCHEDULE));
+
+		dayCombo.setText(AutomaticUpdateScheduler.DAYS[getDay(pref, false)]);
+		hourCombo.setText(AutomaticUpdateScheduler.HOURS[getHour(pref, false)]);
+
+		remindScheduleRadio.setSelection(pref
+				.getBoolean(PreferenceConstants.PREF_REMIND_SCHEDULE));
+		remindOnceRadio.setSelection(!pref
+				.getBoolean(PreferenceConstants.PREF_REMIND_SCHEDULE));
+		remindElapseCombo.setText(pref
+				.getString(PreferenceConstants.PREF_REMIND_ELAPSED));
+		searchOnlyRadio.setSelection(!pref
+				.getBoolean(PreferenceConstants.PREF_DOWNLOAD_ONLY));
+		searchAndDownloadRadio.setSelection(pref
+				.getBoolean(PreferenceConstants.PREF_DOWNLOAD_ONLY));
+
 		pageChanged();
 	}
 
@@ -237,70 +262,89 @@ public class AutomaticUpdatesPreferencePage extends PreferencePage implements IW
 		remindGroup.setEnabled(master);
 		remindScheduleRadio.setEnabled(master);
 		remindOnceRadio.setEnabled(master);
-		remindElapseCombo.setEnabled(master && remindScheduleRadio.getSelection());
+		remindElapseCombo.setEnabled(master
+				&& remindScheduleRadio.getSelection());
 	}
 
 	protected void performDefaults() {
 		super.performDefaults();
-		Preferences defaultPref = AutomaticUpdatePlugin.getDefaultPreferences();
-		enabledCheck.setSelection(defaultPref.getBoolean(PreferenceConstants.PREF_AUTO_UPDATE_ENABLED, false));
-
-		setSchedule(defaultPref.get(PreferenceConstants.PREF_AUTO_UPDATE_SCHEDULE, ""));
-		onScheduleRadio.setSelection(defaultPref.getBoolean(PreferenceConstants.PREF_AUTO_UPDATE_SCHEDULE, false));
-
-		dayCombo.setText(AutomaticUpdateScheduler.DAYS[getDay(defaultPref)]);
-		hourCombo.setText(AutomaticUpdateScheduler.HOURS[getHour(defaultPref)]);
-
-		remindOnceRadio.setSelection(!defaultPref.getBoolean(PreferenceConstants.PREF_REMIND_SCHEDULE, false));
-		remindScheduleRadio.setSelection(defaultPref.getBoolean(PreferenceConstants.PREF_REMIND_SCHEDULE, false));
-		remindElapseCombo.setText(defaultPref.get(PreferenceConstants.PREF_REMIND_ELAPSED, ""));
-
-		searchOnlyRadio.setSelection(!defaultPref.getBoolean(PreferenceConstants.PREF_DOWNLOAD_ONLY, false));
-		searchAndDownloadRadio.setSelection(defaultPref.getBoolean(PreferenceConstants.PREF_DOWNLOAD_ONLY, false));
-
+		IPreferenceStore pref = AutomaticUpdatePlugin.getDefault()
+				.getPreferenceStore();
+		enabledCheck
+				.setSelection(pref
+						.getDefaultBoolean(PreferenceConstants.PREF_AUTO_UPDATE_ENABLED));
+
+		setSchedule(pref
+				.getDefaultString(PreferenceConstants.PREF_AUTO_UPDATE_SCHEDULE));
+		onScheduleRadio
+				.setSelection(pref
+						.getDefaultBoolean(PreferenceConstants.PREF_AUTO_UPDATE_SCHEDULE));
+
+		dayCombo.setText(AutomaticUpdateScheduler.DAYS[getDay(pref, true)]);
+		hourCombo.setText(AutomaticUpdateScheduler.HOURS[getHour(pref, true)]);
+
+		remindOnceRadio.setSelection(!pref
+				.getDefaultBoolean(PreferenceConstants.PREF_REMIND_SCHEDULE));
+		remindScheduleRadio.setSelection(pref
+				.getDefaultBoolean(PreferenceConstants.PREF_REMIND_SCHEDULE));
+		remindElapseCombo.setText(pref
+				.getDefaultString(PreferenceConstants.PREF_REMIND_ELAPSED));
+
+		searchOnlyRadio.setSelection(!pref
+				.getDefaultBoolean(PreferenceConstants.PREF_DOWNLOAD_ONLY));
+		searchAndDownloadRadio.setSelection(pref
+				.getDefaultBoolean(PreferenceConstants.PREF_DOWNLOAD_ONLY));
 		pageChanged();
 	}
 
-	/** 
-	 * Method declared on IPreferencePage.
-	 * Subclasses should override
+	/**
+	 * Method declared on IPreferencePage. Subclasses should override
 	 */
 	public boolean performOk() {
-		Preferences pref = AutomaticUpdatePlugin.getPreferences();
-		pref.putBoolean(PreferenceConstants.PREF_AUTO_UPDATE_ENABLED, enabledCheck.getSelection());
+		IPreferenceStore pref = AutomaticUpdatePlugin.getDefault()
+				.getPreferenceStore();
+		pref.setValue(PreferenceConstants.PREF_AUTO_UPDATE_ENABLED,
+				enabledCheck.getSelection());
 		if (onStartupRadio.getSelection())
-			pref.put(PreferenceConstants.PREF_AUTO_UPDATE_SCHEDULE, PreferenceConstants.PREF_UPDATE_ON_STARTUP);
+			pref.setValue(PreferenceConstants.PREF_AUTO_UPDATE_SCHEDULE,
+					PreferenceConstants.PREF_UPDATE_ON_STARTUP);
 		else
-			pref.put(PreferenceConstants.PREF_AUTO_UPDATE_SCHEDULE, PreferenceConstants.PREF_UPDATE_ON_SCHEDULE);
-		
+			pref.setValue(PreferenceConstants.PREF_AUTO_UPDATE_SCHEDULE,
+					PreferenceConstants.PREF_UPDATE_ON_SCHEDULE);
+
 		if (remindScheduleRadio.getSelection()) {
-			pref.putBoolean(PreferenceConstants.PREF_REMIND_SCHEDULE, true);
-			pref.put(PreferenceConstants.PREF_REMIND_ELAPSED, remindElapseCombo.getText());
+			pref.setValue(PreferenceConstants.PREF_REMIND_SCHEDULE, true);
+			pref.setValue(PreferenceConstants.PREF_REMIND_ELAPSED,
+					remindElapseCombo.getText());
 		} else {
-			pref.putBoolean(PreferenceConstants.PREF_REMIND_SCHEDULE, false);
+			pref.setValue(PreferenceConstants.PREF_REMIND_SCHEDULE, false);
 		}
-		
-		pref.put(AutomaticUpdateScheduler.P_DAY, dayCombo.getText());
-		pref.put(AutomaticUpdateScheduler.P_HOUR, hourCombo.getText());
-		
-		pref.putBoolean(PreferenceConstants.PREF_DOWNLOAD_ONLY, searchAndDownloadRadio.getSelection());
 
-		AutomaticUpdatePlugin.savePreferences();
+		pref.setValue(AutomaticUpdateScheduler.P_DAY, dayCombo.getText());
+		pref.setValue(AutomaticUpdateScheduler.P_HOUR, hourCombo.getText());
+
+		pref.setValue(PreferenceConstants.PREF_DOWNLOAD_ONLY,
+				searchAndDownloadRadio.getSelection());
 
+		AutomaticUpdatePlugin.getDefault().savePreferences();
 		AutomaticUpdatePlugin.getDefault().getScheduler().rescheduleUpdate();
 		return true;
 	}
 
-	private int getDay(Preferences pref) {
-		String day = pref.get(AutomaticUpdateScheduler.P_DAY, "");
+	private int getDay(IPreferenceStore pref, boolean useDefault) {
+		String day = useDefault ? pref
+				.getDefaultString(AutomaticUpdateScheduler.P_DAY) : pref
+				.getString(AutomaticUpdateScheduler.P_DAY);
 		for (int i = 0; i < AutomaticUpdateScheduler.DAYS.length; i++)
 			if (AutomaticUpdateScheduler.DAYS[i].equals(day))
 				return i;
 		return 0;
 	}
 
-	private int getHour(Preferences pref) {
-		String hour = pref.get(AutomaticUpdateScheduler.P_HOUR, "");
+	private int getHour(IPreferenceStore pref, boolean useDefault) {
+		String hour = useDefault ? pref
+				.getDefaultString(AutomaticUpdateScheduler.P_HOUR) : pref
+				.getString(AutomaticUpdateScheduler.P_HOUR);
 		for (int i = 0; i < AutomaticUpdateScheduler.HOURS.length; i++)
 			if (AutomaticUpdateScheduler.HOURS[i].equals(hour))
 				return i;
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/PreferenceInitializer.java b/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/PreferenceInitializer.java
index 717a541..70d5344 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/PreferenceInitializer.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/PreferenceInitializer.java
@@ -14,6 +14,8 @@ import org.eclipse.core.runtime.Platform;
 import org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer;
 import org.eclipse.core.runtime.preferences.DefaultScope;
 import org.eclipse.core.runtime.preferences.InstanceScope;
+import org.eclipse.equinox.internal.provisional.p2.engine.IProfileRegistry;
+import org.eclipse.equinox.internal.provisional.p2.engine.ProfileScope;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
 import org.eclipse.ui.statushandlers.StatusManager;
 import org.osgi.service.prefs.BackingStoreException;
@@ -31,34 +33,29 @@ public class PreferenceInitializer extends AbstractPreferenceInitializer {
 		// scope (final 3.5 format)
 		// 2) if applicable, migrate from 3.4 prefs kept in a different bundle
 		// 3) if applicable, migrate from 3.3 prefs known by Update Manager
-		Preferences pref = AutomaticUpdatePlugin.getPreferences();
+		Preferences pref = new ProfileScope(IProfileRegistry.SELF).getNode(AutomaticUpdatePlugin.PLUGIN_ID);
 		try {
 			if (pref.keys().length == 0) {
 				// migrate preferences from instance scope to profile scope
-				org.eclipse.core.runtime.Preferences oldPref = AutomaticUpdatePlugin
-						.getDefault().getPluginPreferences();
-				String[] keys = oldPref.propertyNames();
+				Preferences oldPref = Platform.getPreferencesService().getRootNode().node(InstanceScope.SCOPE).node(AutomaticUpdatePlugin.PLUGIN_ID);
+				String[] keys = oldPref.keys();
 				for (int i = 0; i < keys.length; i++)
-					pref.put(keys[i], oldPref.getString(keys[i]));
+					pref.put(keys[i], oldPref.get(keys[i], "")); //$NON-NLS-1$
 
 				if (keys.length > 0)
-					AutomaticUpdatePlugin.savePreferences();
+					pref.flush();
 			}
 		} catch (BackingStoreException e) {
-			ProvUI.handleException(e,
-					AutomaticUpdateMessages.ErrorLoadingPreferenceKeys,
-					StatusManager.LOG);
+			ProvUI.handleException(e, AutomaticUpdateMessages.ErrorLoadingPreferenceKeys, StatusManager.LOG);
 		}
 
 		// Have we migrated from 3.4 pref values?
-		boolean migrated34 = pref.getBoolean(
-				PreferenceConstants.PREF_MIGRATED_34, false);
+		boolean migrated34 = pref.getBoolean(PreferenceConstants.PREF_MIGRATED_34, false);
 		boolean node34exists = false;
 		if (!migrated34) {
 			// first look for the 3.4 automatic update preferences, which were
 			// located in a different bundle than now, in the instance scope.
-			Preferences instanceScope = Platform.getPreferencesService()
-					.getRootNode().node(InstanceScope.SCOPE);
+			Preferences instanceScope = Platform.getPreferencesService().getRootNode().node(InstanceScope.SCOPE);
 			try {
 				node34exists = instanceScope.nodeExists(SDK_UI_PLUGIN_ID);
 			} catch (BackingStoreException e1) {
@@ -69,67 +66,54 @@ public class PreferenceInitializer extends AbstractPreferenceInitializer {
 				// We only migrate the preferences associated with auto update.
 				// Other preferences still remain in that bundle and are handled
 				// there. We don't migrate if the value was never set.
-				if (node34.get("enabled", null) == null) {
-					pref.putBoolean(
-							PreferenceConstants.PREF_AUTO_UPDATE_ENABLED,
-							node34.getBoolean("enabled", false));
+				// We use string literals rather than pref constants because we want to
+				// ensure we match the 3.4 values.
+				if (node34.get("enabled", null) == null) { //$NON-NLS-1$
+					pref.putBoolean(PreferenceConstants.PREF_AUTO_UPDATE_ENABLED, node34.getBoolean("enabled", false)); //$NON-NLS-1$
 				}
-				if (node34.get("schedule", null) == null) {
-					pref
-							.put(
-									PreferenceConstants.PREF_AUTO_UPDATE_SCHEDULE,
-									node34
-											.get(
-													"schedule",
-													PreferenceConstants.PREF_UPDATE_ON_STARTUP));
+				if (node34.get("schedule", null) == null) { //$NON-NLS-1$
+					pref.put(PreferenceConstants.PREF_AUTO_UPDATE_SCHEDULE, node34.get("schedule", //$NON-NLS-1$
+							PreferenceConstants.PREF_UPDATE_ON_STARTUP));
 				}
-				if (node34.get("download", null) == null) {
-					pref.putBoolean(PreferenceConstants.PREF_DOWNLOAD_ONLY,
-							node34.getBoolean("download", false));
+				if (node34.get("download", null) == null) { //$NON-NLS-1$
+					pref.putBoolean(PreferenceConstants.PREF_DOWNLOAD_ONLY, node34.getBoolean("download", false)); //$NON-NLS-1$
 				}
-				if (node34.get("remindOnSchedule", null) == null) {
-					pref.putBoolean(PreferenceConstants.PREF_REMIND_SCHEDULE,
-							node34.getBoolean("remindOnSchedule", false)); //$NON-NLS-1$
+				if (node34.get("remindOnSchedule", null) == null) { //$NON-NLS-1$
+					pref.putBoolean(PreferenceConstants.PREF_REMIND_SCHEDULE, node34.getBoolean("remindOnSchedule", false)); //$NON-NLS-1$
 				}
-				if (node34.get("remindElapsedTime", null) == null) {
+				if (node34.get("remindElapsedTime", null) == null) { //$NON-NLS-1$
 
-					pref
-							.put(
-									PreferenceConstants.PREF_REMIND_ELAPSED,
-									node34
-											.get(
-													"remindElapsedTime",
-													AutomaticUpdateMessages.AutomaticUpdateScheduler_30Minutes));
+					pref.put(PreferenceConstants.PREF_REMIND_ELAPSED, node34.get("remindElapsedTime", //$NON-NLS-1$
+							AutomaticUpdateMessages.AutomaticUpdateScheduler_30Minutes));
 				}
 			}
 			// mark the pref that says we've migrated
 			pref.putBoolean(PreferenceConstants.PREF_MIGRATED_34, true);
-			AutomaticUpdatePlugin.savePreferences();
+			try {
+				pref.flush();
+			} catch (BackingStoreException e) {
+				ProvUI.handleException(e, AutomaticUpdateMessages.ErrorSavingPreferences, StatusManager.LOG);
+			}
 		}
 		// pref used to track 3.3 migration
 		// Have we initialized the auto update prefs from previous
 		// releases?
-		boolean autoUpdateInit = pref.getBoolean(
-				PreferenceConstants.PREF_AUTO_UPDATE_INIT, false);
+		boolean autoUpdateInit = pref.getBoolean(PreferenceConstants.PREF_AUTO_UPDATE_INIT, false);
 
 		if (!migrated34 && !autoUpdateInit) {
 			// Look for the 3.3 UM automatic update preferences. We will
 			// not migrate them if we already pulled values from 3.4.
 			// However, we always want to turn off the UM automatic update
 			// checker if it is found to be on.
-			Preferences instanceScope = Platform.getPreferencesService()
-					.getRootNode().node(InstanceScope.SCOPE);
+			Preferences instanceScope = Platform.getPreferencesService().getRootNode().node(InstanceScope.SCOPE);
 			try {
-				boolean updateNodeExists = instanceScope
-						.nodeExists(UPDATE_PLUGIN_ID);
+				boolean updateNodeExists = instanceScope.nodeExists(UPDATE_PLUGIN_ID);
 				Preferences prefUM = instanceScope.node(UPDATE_PLUGIN_ID);
 				boolean enableUpdate = prefUM.getBoolean(P_ENABLED, false);
 				// set p2 automatic update preference to match UM preference,
 				// only if we haven't already set a value.
 				if (pref.get(PreferenceConstants.PREF_AUTO_UPDATE_ENABLED, null) == null) {
-					pref.putBoolean(
-							PreferenceConstants.PREF_AUTO_UPDATE_ENABLED,
-							enableUpdate);
+					pref.putBoolean(PreferenceConstants.PREF_AUTO_UPDATE_ENABLED, enableUpdate);
 				}
 				// turn off UM automatic update preference if it exists
 				if (updateNodeExists) {
@@ -137,27 +121,21 @@ public class PreferenceInitializer extends AbstractPreferenceInitializer {
 					prefUM.flush();
 				}
 				// mark the pref that says we migrated
-				pref.putBoolean(PreferenceConstants.PREF_AUTO_UPDATE_INIT,
-						true);
-				AutomaticUpdatePlugin.savePreferences();
+				pref.putBoolean(PreferenceConstants.PREF_AUTO_UPDATE_INIT, true);
+				pref.flush();
 			} catch (BackingStoreException e) {
-				ProvUI.handleException(e,
-						AutomaticUpdateMessages.ErrorSavingClassicPreferences,
-						StatusManager.LOG);
+				ProvUI.handleException(e, AutomaticUpdateMessages.ErrorSavingClassicPreferences, StatusManager.LOG);
 			}
 		}
 	}
 
 	public void initializeDefaultPreferences() {
 		// initialize the default scope
-		Preferences node = new DefaultScope()
-				.getNode(AutomaticUpdatePlugin.PLUGIN_ID);
+		Preferences node = new DefaultScope().getNode(AutomaticUpdatePlugin.PLUGIN_ID);
 		node.putBoolean(PreferenceConstants.PREF_AUTO_UPDATE_ENABLED, false);
-		node.put(PreferenceConstants.PREF_AUTO_UPDATE_SCHEDULE,
-				PreferenceConstants.PREF_UPDATE_ON_STARTUP);
+		node.put(PreferenceConstants.PREF_AUTO_UPDATE_SCHEDULE, PreferenceConstants.PREF_UPDATE_ON_STARTUP);
 		node.putBoolean(PreferenceConstants.PREF_DOWNLOAD_ONLY, false);
 		node.putBoolean(PreferenceConstants.PREF_REMIND_SCHEDULE, false);
-		node.put(PreferenceConstants.PREF_REMIND_ELAPSED,
-				AutomaticUpdateMessages.AutomaticUpdateScheduler_30Minutes);
+		node.put(PreferenceConstants.PREF_REMIND_ELAPSED, AutomaticUpdateMessages.AutomaticUpdateScheduler_30Minutes);
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
index f03b04e..f2f7138 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKMessages.java
@@ -36,6 +36,7 @@ public class ProvSDKMessages extends NLS {
 	public static String ProvisioningPreferencePage_NeverOpenWizard;
 	public static String ProvisioningPreferencePage_OpenWizardIfInvalid;
 	public static String ProvisioningPreferencePage_PromptToOpenWizard;
+	public static String ProvSDKUIActivator_ErrorSavingPrefs;
 	public static String ProvSDKUIActivator_ErrorWritingLicenseRegistry;
 	public static String ProvSDKUIActivator_LicenseManagerReadError;
 	public static String ProvSDKUIActivator_NoSelfProfile;
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
index 5131d07..78aadf7 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
@@ -12,28 +12,26 @@ package org.eclipse.equinox.internal.p2.ui.sdk;
 
 import java.io.*;
 import org.eclipse.core.runtime.*;
-import org.eclipse.core.runtime.preferences.DefaultScope;
 import org.eclipse.equinox.internal.p2.ui.sdk.prefs.PreferenceConstants;
 import org.eclipse.equinox.internal.p2.ui.sdk.prefs.PreferenceInitializer;
 import org.eclipse.equinox.internal.provisional.p2.core.IServiceUI;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.core.eventbus.IProvisioningEventBus;
-import org.eclipse.equinox.internal.provisional.p2.engine.IProfile;
-import org.eclipse.equinox.internal.provisional.p2.engine.IProfileRegistry;
+import org.eclipse.equinox.internal.provisional.p2.engine.*;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.internal.provisional.p2.repository.IRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.ui.*;
 import org.eclipse.equinox.internal.provisional.p2.ui.operations.ProvisioningUtil;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.IUViewQueryContext;
 import org.eclipse.equinox.internal.provisional.p2.ui.policy.Policy;
+import org.eclipse.jface.preference.IPreferenceStore;
 import org.eclipse.jface.resource.ImageDescriptor;
 import org.eclipse.jface.util.IPropertyChangeListener;
 import org.eclipse.jface.util.PropertyChangeEvent;
 import org.eclipse.ui.plugin.AbstractUIPlugin;
+import org.eclipse.ui.preferences.ScopedPreferenceStore;
 import org.eclipse.ui.statushandlers.StatusManager;
 import org.osgi.framework.*;
-import org.osgi.service.prefs.BackingStoreException;
-import org.osgi.service.prefs.Preferences;
 
 /**
  * Activator class for the p2 UI.
@@ -46,11 +44,11 @@ public class ProvSDKUIActivator extends AbstractUIPlugin {
 	private static ProvSDKUIActivator plugin;
 	private static BundleContext context;
 	private ServiceRegistration certificateUIRegistration;
+	private ScopedPreferenceStore preferenceStore;
 
 	private IPropertyChangeListener preferenceListener;
 
 	public static final String PLUGIN_ID = "org.eclipse.equinox.p2.ui.sdk"; //$NON-NLS-1$
-	public static final String PREFERENCE_ROOT = "/profile/_SELF_/"; //$NON-NLS-1$
 
 	public static BundleContext getContext() {
 		return context;
@@ -77,22 +75,6 @@ public class ProvSDKUIActivator extends AbstractUIPlugin {
 		return imageDescriptorFromPlugin(PLUGIN_ID, path);
 	}
 
-	public static Preferences getPreferences() {
-		return Platform.getPreferencesService().getRootNode().node(PREFERENCE_ROOT + PLUGIN_ID);
-	}
-
-	public static Preferences getDefaultPreferences() {
-		return new DefaultScope().getNode(PLUGIN_ID);
-	}
-
-	public static void savePreferences() {
-		try {
-			getPreferences().flush();
-		} catch (BackingStoreException e) {
-			ProvUI.handleException(e, ProvSDKMessages.Error_Saving_Preferences, StatusManager.LOG);
-		}
-	}
-
 	public ProvSDKUIActivator() {
 		// constructor
 	}
@@ -202,4 +184,26 @@ public class ProvSDKUIActivator extends AbstractUIPlugin {
 		queryContext.setArtifactRepositoryFlags(IRepositoryManager.REPOSITORIES_NON_SYSTEM);
 		queryContext.setMetadataRepositoryFlags(IRepositoryManager.REPOSITORIES_NON_SYSTEM);
 	}
+
+	/*
+	 * Overridden to use a profile scoped preference store.
+	 * (non-Javadoc)
+	 * @see org.eclipse.ui.plugin.AbstractUIPlugin#getPreferenceStore()
+	 */
+	public IPreferenceStore getPreferenceStore() {
+		// Create the preference store lazily.
+		if (preferenceStore == null) {
+			preferenceStore = new ScopedPreferenceStore(new ProfileScope(IProfileRegistry.SELF), PLUGIN_ID);
+		}
+		return preferenceStore;
+	}
+
+	public void savePreferences() {
+		if (preferenceStore != null)
+			try {
+				preferenceStore.save();
+			} catch (IOException e) {
+				ProvUI.handleException(e, ProvSDKMessages.ProvSDKUIActivator_ErrorSavingPrefs, StatusManager.LOG | StatusManager.SHOW);
+			}
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
index 2ed5413..b40a58c 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/messages.properties
@@ -15,6 +15,7 @@ Handler_CannotLaunchUI=Cannot launch the Update UI.  This installation has not b
 Handler_SDKUpdateUIMessageTitle=Software Updates
 InstallNewSoftwareHandler_LoadRepositoryJobLabel=Contacting Software Sites
 PreferenceInitializer_Error=Error accessing preferences.
+ProvSDKUIActivator_ErrorSavingPrefs=Error saving update preferences
 ProvSDKUIActivator_ErrorWritingLicenseRegistry=Error writing license registry.  Accepted licenses will not be remembered.
 ProvSDKUIActivator_LicenseManagerReadError=Error reading license registry.  Accepted licenses will not be remembered.
 ProvSDKUIActivator_NoSelfProfile=Could not locate the running profile instance. The eclipse.p2.data.area and eclipse.p2.profile properties may not be set correctly in this application's config.ini file.
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/PreferenceInitializer.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/PreferenceInitializer.java
index 829943f..ff44494 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/PreferenceInitializer.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/PreferenceInitializer.java
@@ -10,10 +10,12 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.sdk.prefs;
 
-import org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer;
-import org.eclipse.core.runtime.preferences.DefaultScope;
+import org.eclipse.core.runtime.Platform;
+import org.eclipse.core.runtime.preferences.*;
 import org.eclipse.equinox.internal.p2.ui.sdk.ProvSDKMessages;
 import org.eclipse.equinox.internal.p2.ui.sdk.ProvSDKUIActivator;
+import org.eclipse.equinox.internal.provisional.p2.engine.IProfileRegistry;
+import org.eclipse.equinox.internal.provisional.p2.engine.ProfileScope;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
 import org.eclipse.jface.dialogs.MessageDialogWithToggle;
 import org.eclipse.ui.statushandlers.StatusManager;
@@ -26,16 +28,16 @@ import org.osgi.service.prefs.Preferences;
 public class PreferenceInitializer extends AbstractPreferenceInitializer {
 
 	public static void migratePreferences() {
-		Preferences pref = ProvSDKUIActivator.getPreferences();
+		Preferences pref = new ProfileScope(IProfileRegistry.SELF).getNode(ProvSDKUIActivator.PLUGIN_ID);
 		try {
 			if (pref.keys().length == 0) {
 				// migrate preferences from instance scope to profile scope
-				org.eclipse.core.runtime.Preferences oldPref = ProvSDKUIActivator.getDefault().getPluginPreferences();
+				Preferences oldPref = Platform.getPreferencesService().getRootNode().node(InstanceScope.SCOPE).node(ProvSDKUIActivator.PLUGIN_ID);
 				// don't migrate everything.  Some of the preferences moved to
 				// another bundle.
-				pref.put(PreferenceConstants.PREF_OPEN_WIZARD_ON_ERROR_PLAN, oldPref.getString(PreferenceConstants.PREF_OPEN_WIZARD_ON_ERROR_PLAN));
-				pref.putBoolean(PreferenceConstants.PREF_SHOW_LATEST_VERSION, oldPref.getBoolean(PreferenceConstants.PREF_SHOW_LATEST_VERSION));
-				ProvSDKUIActivator.savePreferences();
+				pref.put(PreferenceConstants.PREF_OPEN_WIZARD_ON_ERROR_PLAN, oldPref.get(PreferenceConstants.PREF_OPEN_WIZARD_ON_ERROR_PLAN, "")); //$NON-NLS-1$
+				pref.putBoolean(PreferenceConstants.PREF_SHOW_LATEST_VERSION, oldPref.getBoolean(PreferenceConstants.PREF_SHOW_LATEST_VERSION, true));
+				ProvSDKUIActivator.getDefault().savePreferences();
 			}
 		} catch (BackingStoreException e) {
 			ProvUI.handleException(e, ProvSDKMessages.PreferenceInitializer_Error, StatusManager.LOG);
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/ProvisioningPreferencePage.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/ProvisioningPreferencePage.java
index d4ab9e0..c02fccc 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/ProvisioningPreferencePage.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/ProvisioningPreferencePage.java
@@ -10,9 +10,11 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.sdk.prefs;
 
+import org.eclipse.core.runtime.preferences.DefaultScope;
 import org.eclipse.equinox.internal.p2.ui.sdk.*;
 import org.eclipse.jface.dialogs.Dialog;
 import org.eclipse.jface.dialogs.MessageDialogWithToggle;
+import org.eclipse.jface.preference.IPreferenceStore;
 import org.eclipse.jface.preference.PreferencePage;
 import org.eclipse.swt.SWT;
 import org.eclipse.swt.layout.GridData;
@@ -97,10 +99,10 @@ public class ProvisioningPreferencePage extends PreferencePage implements IWorkb
 	}
 
 	private void initialize() {
-		Preferences pref = ProvSDKUIActivator.getPreferences();
-		showLatestRadio.setSelection(pref.getBoolean(PreferenceConstants.PREF_SHOW_LATEST_VERSION, false));
-		showAllRadio.setSelection(!pref.getBoolean(PreferenceConstants.PREF_SHOW_LATEST_VERSION, false));
-		String openWizard = pref.get(PreferenceConstants.PREF_OPEN_WIZARD_ON_ERROR_PLAN, ""); //$NON-NLS-1$
+		IPreferenceStore pref = ProvSDKUIActivator.getDefault().getPreferenceStore();
+		showLatestRadio.setSelection(pref.getBoolean(PreferenceConstants.PREF_SHOW_LATEST_VERSION));
+		showAllRadio.setSelection(!pref.getBoolean(PreferenceConstants.PREF_SHOW_LATEST_VERSION));
+		String openWizard = pref.getString(PreferenceConstants.PREF_OPEN_WIZARD_ON_ERROR_PLAN);
 		alwaysShowFailedPlan.setSelection(openWizard.equals(MessageDialogWithToggle.ALWAYS));
 		neverShowFailedPlan.setSelection(openWizard.equals(MessageDialogWithToggle.NEVER));
 		promptOnFailedPlan.setSelection(openWizard.equals(MessageDialogWithToggle.PROMPT));
@@ -108,7 +110,7 @@ public class ProvisioningPreferencePage extends PreferencePage implements IWorkb
 
 	protected void performDefaults() {
 		super.performDefaults();
-		Preferences pref = ProvSDKUIActivator.getDefaultPreferences();
+		Preferences pref = new DefaultScope().getNode(ProvSDKUIActivator.PLUGIN_ID);
 		showLatestRadio.setSelection(pref.getBoolean(PreferenceConstants.PREF_SHOW_LATEST_VERSION, false));
 		showAllRadio.setSelection(!pref.getBoolean(PreferenceConstants.PREF_SHOW_LATEST_VERSION, false));
 		String openWizard = pref.get(PreferenceConstants.PREF_OPEN_WIZARD_ON_ERROR_PLAN, ""); //$NON-NLS-1$
@@ -118,16 +120,16 @@ public class ProvisioningPreferencePage extends PreferencePage implements IWorkb
 	}
 
 	public boolean performOk() {
-		Preferences pref = ProvSDKUIActivator.getPreferences();
-		pref.putBoolean(PreferenceConstants.PREF_SHOW_LATEST_VERSION, showLatestRadio.getSelection());
+		IPreferenceStore pref = ProvSDKUIActivator.getDefault().getPreferenceStore();
+		pref.setValue(PreferenceConstants.PREF_SHOW_LATEST_VERSION, showLatestRadio.getSelection());
 		if (alwaysShowFailedPlan.getSelection())
-			pref.put(PreferenceConstants.PREF_OPEN_WIZARD_ON_ERROR_PLAN, MessageDialogWithToggle.ALWAYS);
+			pref.setValue(PreferenceConstants.PREF_OPEN_WIZARD_ON_ERROR_PLAN, MessageDialogWithToggle.ALWAYS);
 		else if (neverShowFailedPlan.getSelection())
-			pref.put(PreferenceConstants.PREF_OPEN_WIZARD_ON_ERROR_PLAN, MessageDialogWithToggle.NEVER);
+			pref.setValue(PreferenceConstants.PREF_OPEN_WIZARD_ON_ERROR_PLAN, MessageDialogWithToggle.NEVER);
 		else
-			pref.put(PreferenceConstants.PREF_OPEN_WIZARD_ON_ERROR_PLAN, MessageDialogWithToggle.PROMPT);
+			pref.setValue(PreferenceConstants.PREF_OPEN_WIZARD_ON_ERROR_PLAN, MessageDialogWithToggle.PROMPT);
 
-		ProvSDKUIActivator.savePreferences();
+		ProvSDKUIActivator.getDefault().savePreferences();
 		return true;
 	}
 
commit f4183426a566f3c3d9be31c08bd60e4ebf660f1a
Author: DJ Houghton <dj>
Date:   Thu Apr 23 14:54:23 2009 +0000

    Bug 222498 - [ui] Scope for update preferences

14	8	bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdatePlugin.java
2	4	bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/PreferenceInitializer.java
2	3	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/PreferenceInitializer.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdatePlugin.java b/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdatePlugin.java
index 1a3e4cd..96b2874 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdatePlugin.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/AutomaticUpdatePlugin.java
@@ -11,7 +11,6 @@
 package org.eclipse.equinox.internal.p2.ui.sdk.scheduler;
 
 import java.io.IOException;
-
 import org.eclipse.equinox.internal.provisional.p2.core.eventbus.IProvisioningEventBus;
 import org.eclipse.equinox.internal.provisional.p2.engine.IProfileRegistry;
 import org.eclipse.equinox.internal.provisional.p2.engine.ProfileScope;
@@ -20,9 +19,7 @@ import org.eclipse.jface.preference.IPreferenceStore;
 import org.eclipse.ui.plugin.AbstractUIPlugin;
 import org.eclipse.ui.preferences.ScopedPreferenceStore;
 import org.eclipse.ui.statushandlers.StatusManager;
-import org.osgi.framework.Bundle;
-import org.osgi.framework.BundleContext;
-import org.osgi.framework.ServiceReference;
+import org.osgi.framework.*;
 import org.osgi.service.packageadmin.PackageAdmin;
 
 /**
@@ -90,14 +87,23 @@ public class AutomaticUpdatePlugin extends AbstractUIPlugin {
 		// TODO for now we need to manually start up the provisioning
 		// infrastructure and the update checker, because the Eclipse
 		// Application launch config won't let me specify bundles to start.
-		getBundle("org.eclipse.equinox.p2.exemplarysetup").start(Bundle.START_TRANSIENT); //$NON-NLS-1$
-		getBundle("org.eclipse.equinox.frameworkadmin.equinox").start(Bundle.START_TRANSIENT); //$NON-NLS-1$
-		getBundle("org.eclipse.equinox.simpleconfigurator.manipulator").start(Bundle.START_TRANSIENT); //$NON-NLS-1$
-		getBundle("org.eclipse.equinox.p2.updatechecker").start(Bundle.START_TRANSIENT); //$NON-NLS-1$
+		// TODO how should we react if we are unable to start one of these bundles?
+		startEarly("org.eclipse.equinox.p2.exemplarysetup"); //$NON-NLS-1$
+		startEarly("org.eclipse.equinox.frameworkadmin.equinox"); //$NON-NLS-1$
+		startEarly("org.eclipse.equinox.simpleconfigurator.manipulator"); //$NON-NLS-1$
+		startEarly("org.eclipse.equinox.p2.updatechecker"); //$NON-NLS-1$
 
 		PreferenceInitializer.migratePreferences();
 	}
 
+	private boolean startEarly(String bundleName) throws BundleException {
+		Bundle bundle = getBundle(bundleName);
+		if (bundle == null)
+			return false;
+		bundle.start(Bundle.START_TRANSIENT);
+		return true;
+	}
+
 	public void stop(BundleContext bundleContext) throws Exception {
 		if (scheduler != null) {
 			scheduler.shutdown();
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/PreferenceInitializer.java b/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/PreferenceInitializer.java
index 70d5344..1cdbb9d 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/PreferenceInitializer.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk.scheduler/src/org/eclipse/equinox/internal/p2/ui/sdk/scheduler/PreferenceInitializer.java
@@ -11,9 +11,7 @@
 package org.eclipse.equinox.internal.p2.ui.sdk.scheduler;
 
 import org.eclipse.core.runtime.Platform;
-import org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer;
-import org.eclipse.core.runtime.preferences.DefaultScope;
-import org.eclipse.core.runtime.preferences.InstanceScope;
+import org.eclipse.core.runtime.preferences.*;
 import org.eclipse.equinox.internal.provisional.p2.engine.IProfileRegistry;
 import org.eclipse.equinox.internal.provisional.p2.engine.ProfileScope;
 import org.eclipse.equinox.internal.provisional.p2.ui.ProvUI;
@@ -37,7 +35,7 @@ public class PreferenceInitializer extends AbstractPreferenceInitializer {
 		try {
 			if (pref.keys().length == 0) {
 				// migrate preferences from instance scope to profile scope
-				Preferences oldPref = Platform.getPreferencesService().getRootNode().node(InstanceScope.SCOPE).node(AutomaticUpdatePlugin.PLUGIN_ID);
+				Preferences oldPref = new InstanceScope().getNode(AutomaticUpdatePlugin.PLUGIN_ID);
 				String[] keys = oldPref.keys();
 				for (int i = 0; i < keys.length; i++)
 					pref.put(keys[i], oldPref.get(keys[i], "")); //$NON-NLS-1$
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/PreferenceInitializer.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/PreferenceInitializer.java
index ff44494..85879db 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/PreferenceInitializer.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/prefs/PreferenceInitializer.java
@@ -10,7 +10,6 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.ui.sdk.prefs;
 
-import org.eclipse.core.runtime.Platform;
 import org.eclipse.core.runtime.preferences.*;
 import org.eclipse.equinox.internal.p2.ui.sdk.ProvSDKMessages;
 import org.eclipse.equinox.internal.p2.ui.sdk.ProvSDKUIActivator;
@@ -32,12 +31,12 @@ public class PreferenceInitializer extends AbstractPreferenceInitializer {
 		try {
 			if (pref.keys().length == 0) {
 				// migrate preferences from instance scope to profile scope
-				Preferences oldPref = Platform.getPreferencesService().getRootNode().node(InstanceScope.SCOPE).node(ProvSDKUIActivator.PLUGIN_ID);
+				Preferences oldPref = new InstanceScope().getNode(ProvSDKUIActivator.PLUGIN_ID);
 				// don't migrate everything.  Some of the preferences moved to
 				// another bundle.
 				pref.put(PreferenceConstants.PREF_OPEN_WIZARD_ON_ERROR_PLAN, oldPref.get(PreferenceConstants.PREF_OPEN_WIZARD_ON_ERROR_PLAN, "")); //$NON-NLS-1$
 				pref.putBoolean(PreferenceConstants.PREF_SHOW_LATEST_VERSION, oldPref.getBoolean(PreferenceConstants.PREF_SHOW_LATEST_VERSION, true));
-				ProvSDKUIActivator.getDefault().savePreferences();
+				pref.flush();
 			}
 		} catch (BackingStoreException e) {
 			ProvUI.handleException(e, ProvSDKMessages.PreferenceInitializer_Error, StatusManager.LOG);

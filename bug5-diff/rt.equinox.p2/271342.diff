commit 29e467c6f118cab76cbfb9d06e5397be07fef7aa
Author: Simon Kaegi <skaegi>
Date:   Tue Apr 7 14:56:15 2009 +0000

    Bug 271342 Support for "meta" required capabilities

4	0	bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/NewDependencyExpander.java
31	2	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataParser.java
12	0	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataWriter.java
1	0	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/XMLConstants.java
14	0	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/InstallableUnit.java
8	0	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/ResolvedInstallableUnit.java
2	0	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/IInstallableUnit.java
10	2	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/MetadataFactory.java
13	6	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
19	19	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OperationGenerationTest.java
28	13	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/IUPatchPersistenceTest.java
20	3	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/IUPersistenceTest.java
4	0	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/SPIMetadataRepositoryTest.java
2	4	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/Bug249605.java
1	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/InclusionRuleTest2.java
1	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest2.java
1	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest3.java
1	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest6.java
1	3	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest7.java
2	4	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest7b.java
2	4	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest8.java
2	2	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/AddRepositoryActionTest.java
1	1	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/updatechecker/UpdateCheckerTest.java
diff --git a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/NewDependencyExpander.java b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/NewDependencyExpander.java
index 6e57266..7933d25 100644
--- a/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/NewDependencyExpander.java
+++ b/bundles/org.eclipse.equinox.p2.director/src/org/eclipse/equinox/internal/p2/director/NewDependencyExpander.java
@@ -206,6 +206,10 @@ public class NewDependencyExpander {
 		public boolean satisfies(IRequiredCapability candidate) {
 			return wrapped.satisfies(candidate);
 		}
+
+		public IRequiredCapability[] getMetaRequiredCapabilities() {
+			return wrapped.getMetaRequiredCapabilities();
+		}
 	}
 
 	static final int OperationWork = 100;
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataParser.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataParser.java
index 53e3384..f5bb508 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataParser.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataParser.java
@@ -12,8 +12,6 @@
  *******************************************************************************/
 package org.eclipse.equinox.internal.p2.metadata.repository.io;
 
-import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory;
-
 import java.net.URI;
 import java.util.*;
 import org.eclipse.equinox.internal.p2.core.helpers.OrderedProperties;
@@ -115,6 +113,7 @@ public abstract class MetadataParser extends XMLParser implements XMLConstants {
 		private ProvidedCapabilitiesHandler providedCapabilitiesHandler = null;
 		private RequiredCapabilitiesHandler requiredCapabilitiesHandler = null;
 		private HostRequiredCapabilitiesHandler hostRequiredCapabilitiesHandler = null;
+		private MetaRequiredCapabilitiesHandler metaRequiredCapabilitiesHandler = null;
 		private TextHandler filterHandler = null;
 		private ArtifactsHandler artifactsHandler = null;
 		private TouchpointTypeHandler touchpointTypeHandler = null;
@@ -175,6 +174,12 @@ public abstract class MetadataParser extends XMLParser implements XMLConstants {
 				} else {
 					duplicateElement(this, name, attributes);
 				}
+			} else if (META_REQUIRED_CAPABILITIES_ELEMENT.equals(name)) {
+				if (metaRequiredCapabilitiesHandler == null) {
+					metaRequiredCapabilitiesHandler = new MetaRequiredCapabilitiesHandler(this, attributes);
+				} else {
+					duplicateElement(this, name, attributes);
+				}
 			} else if (IU_FILTER_ELEMENT.equals(name)) {
 				if (filterHandler == null) {
 					filterHandler = new TextHandler(this, IU_FILTER_ELEMENT, attributes);
@@ -295,6 +300,8 @@ public abstract class MetadataParser extends XMLParser implements XMLConstants {
 				currentUnit.setCapabilities(providedCapabilities);
 				IRequiredCapability[] requiredCapabilities = (requiredCapabilitiesHandler == null ? new IRequiredCapability[0] : requiredCapabilitiesHandler.getRequiredCapabilities());
 				currentUnit.setRequiredCapabilities(requiredCapabilities);
+				IRequiredCapability[] metaRequiredCapabilities = (metaRequiredCapabilitiesHandler == null ? new IRequiredCapability[0] : metaRequiredCapabilitiesHandler.getMetaRequiredCapabilities());
+				currentUnit.setMetaRequiredCapabilities(metaRequiredCapabilities);
 				if (filterHandler != null) {
 					currentUnit.setFilter(filterHandler.getText());
 				}
@@ -513,6 +520,28 @@ public abstract class MetadataParser extends XMLParser implements XMLConstants {
 		}
 	}
 
+	protected class MetaRequiredCapabilitiesHandler extends AbstractHandler {
+		private List requiredCapabilities;
+
+		public MetaRequiredCapabilitiesHandler(AbstractHandler parentHandler, Attributes attributes) {
+			super(parentHandler, META_REQUIRED_CAPABILITIES_ELEMENT);
+			String size = parseOptionalAttribute(attributes, COLLECTION_SIZE_ATTRIBUTE);
+			requiredCapabilities = (size != null ? new ArrayList(new Integer(size).intValue()) : new ArrayList(4));
+		}
+
+		public IRequiredCapability[] getMetaRequiredCapabilities() {
+			return (IRequiredCapability[]) requiredCapabilities.toArray(new IRequiredCapability[requiredCapabilities.size()]);
+		}
+
+		public void startElement(String name, Attributes attributes) {
+			if (name.equals(REQUIRED_CAPABILITY_ELEMENT)) {
+				new RequiredCapabilityHandler(this, attributes, requiredCapabilities);
+			} else {
+				invalidElement(name, attributes);
+			}
+		}
+	}
+
 	protected class RequiredCapabilitiesHandler extends AbstractHandler {
 		private List requiredCapabilities;
 
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataWriter.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataWriter.java
index 7afc97a..cf7bfe2 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataWriter.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/MetadataWriter.java
@@ -66,6 +66,7 @@ public abstract class MetadataWriter extends XMLWriter implements XMLConstants {
 
 		writeUpdateDescriptor(resolvedIU, resolvedIU.getUpdateDescriptor());
 		writeProperties(iu.getProperties());
+		writeMetaRequiredCapabilities(iu.getMetaRequiredCapabilities());
 		writeProvidedCapabilities(iu.getProvidedCapabilities());
 		writeRequiredCapabilities(iu.getRequiredCapabilities());
 		writeTrimmedCdata(IU_FILTER_ELEMENT, iu.getFilter());
@@ -113,6 +114,17 @@ public abstract class MetadataWriter extends XMLWriter implements XMLConstants {
 		}
 	}
 
+	protected void writeMetaRequiredCapabilities(IRequiredCapability[] capabilities) {
+		if (capabilities != null && capabilities.length > 0) {
+			start(META_REQUIRED_CAPABILITIES_ELEMENT);
+			attribute(COLLECTION_SIZE_ATTRIBUTE, capabilities.length);
+			for (int i = 0; i < capabilities.length; i++) {
+				writeRequiredCapability(capabilities[i]);
+			}
+			end(META_REQUIRED_CAPABILITIES_ELEMENT);
+		}
+	}
+
 	protected void writeRequiredCapabilities(IRequiredCapability[] capabilities) {
 		if (capabilities != null && capabilities.length > 0) {
 			start(REQUIRED_CAPABILITIES_ELEMENT);
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/XMLConstants.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/XMLConstants.java
index 38faa6d..54dbd61 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/XMLConstants.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/io/XMLConstants.java
@@ -38,6 +38,7 @@ public interface XMLConstants extends org.eclipse.equinox.internal.p2.persistenc
 	public static final String ARTIFACT_KEY_ELEMENT = "artifact"; //$NON-NLS-1$
 	public static final String REQUIRED_CAPABILITIES_ELEMENT = "requires"; //$NON-NLS-1$
 	public static final String HOST_REQUIRED_CAPABILITIES_ELEMENT = "hostRequirements"; //$NON-NLS-1$
+	public static final String META_REQUIRED_CAPABILITIES_ELEMENT = "metaRequirements"; //$NON-NLS-1$
 	public static final String REQUIRED_CAPABILITY_ELEMENT = "required"; //$NON-NLS-1$
 	public static final String PROVIDED_CAPABILITIES_ELEMENT = "provides"; //$NON-NLS-1$
 	public static final String PROVIDED_CAPABILITY_ELEMENT = "provided"; //$NON-NLS-1$
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/InstallableUnit.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/InstallableUnit.java
index 6efd83e..7f141ef 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/InstallableUnit.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/InstallableUnit.java
@@ -34,6 +34,7 @@ public class InstallableUnit implements IInstallableUnit {
 	private OrderedProperties localizedProperties;
 	IProvidedCapability[] providedCapabilities = NO_PROVIDES;
 	private IRequiredCapability[] requires = NO_REQUIRES;
+	private IRequiredCapability[] metaRequires = NO_REQUIRES;
 
 	private boolean singleton;
 
@@ -280,4 +281,17 @@ public class InstallableUnit implements IInstallableUnit {
 				return true;
 		return false;
 	}
+
+	public IRequiredCapability[] getMetaRequiredCapabilities() {
+		return metaRequires;
+	}
+
+	public void setMetaRequiredCapabilitues(IRequiredCapability[] metaReqs) {
+		if (metaReqs.length == 0) {
+			this.metaRequires = NO_REQUIRES;
+		} else {
+			//copy array for safety
+			this.metaRequires = (IRequiredCapability[]) metaReqs.clone();
+		}
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/ResolvedInstallableUnit.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/ResolvedInstallableUnit.java
index dd40ce8..d877731 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/ResolvedInstallableUnit.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/p2/metadata/ResolvedInstallableUnit.java
@@ -78,7 +78,15 @@ public class ResolvedInstallableUnit implements IInstallableUnit {
 			result.addAll(Arrays.asList(fragments[i].getRequiredCapabilities()));
 		}
 		return (IRequiredCapability[]) result.toArray(new IRequiredCapability[result.size()]);
+	}
 
+	public IRequiredCapability[] getMetaRequiredCapabilities() {
+		ArrayList result = new ArrayList();
+		result.addAll(Arrays.asList(original.getMetaRequiredCapabilities()));
+		for (int i = 0; i < fragments.length; i++) {
+			result.addAll(Arrays.asList(fragments[i].getMetaRequiredCapabilities()));
+		}
+		return (IRequiredCapability[]) result.toArray(new IRequiredCapability[result.size()]);
 	}
 
 	public ITouchpointData[] getTouchpointData() {
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/IInstallableUnit.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/IInstallableUnit.java
index 18d0611..02f02e0 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/IInstallableUnit.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/IInstallableUnit.java
@@ -201,6 +201,8 @@ public interface IInstallableUnit extends Comparable {
 
 	public IRequiredCapability[] getRequiredCapabilities();
 
+	public IRequiredCapability[] getMetaRequiredCapabilities();
+
 	public ITouchpointData[] getTouchpointData();
 
 	public ITouchpointType getTouchpointType();
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/MetadataFactory.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/MetadataFactory.java
index f9f4e3a..bafafb5 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/MetadataFactory.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/MetadataFactory.java
@@ -78,6 +78,10 @@ public class MetadataFactory {
 			return unit().getRequiredCapabilities();
 		}
 
+		public IRequiredCapability[] getMetaRequiredCapabilities() {
+			return unit().getMetaRequiredCapabilities();
+		}
+
 		/**
 		 * Returns the current touchpoint data on this installable unit description. The
 		 * touchpoint data may change if further data is added to the description.
@@ -121,8 +125,12 @@ public class MetadataFactory {
 			unit().setProperty(key, value);
 		}
 
-		public void setRequiredCapabilities(IRequiredCapability[] capabilities) {
-			unit().setRequiredCapabilities(capabilities);
+		public void setRequiredCapabilities(IRequiredCapability[] requirements) {
+			unit().setRequiredCapabilities(requirements);
+		}
+
+		public void setMetaRequiredCapabilities(IRequiredCapability[] metaRequirements) {
+			unit().setMetaRequiredCapabilitues(metaRequirements);
 		}
 
 		public void setSingleton(boolean singleton) {
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
index f5b9c54..bb4204c 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
@@ -8,8 +8,6 @@
  ******************************************************************************/
 package org.eclipse.equinox.p2.tests;
 
-import org.eclipse.equinox.internal.provisional.p2.repository.IRepositoryManager;
-
 import java.io.*;
 import java.net.URI;
 import java.net.URL;
@@ -31,6 +29,7 @@ import org.eclipse.equinox.internal.provisional.p2.metadata.query.InstallableUni
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepository;
 import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadataRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.query.Collector;
+import org.eclipse.equinox.internal.provisional.p2.repository.IRepositoryManager;
 import org.eclipse.equinox.p2.publisher.PublisherInfo;
 import org.eclipse.equinox.p2.publisher.eclipse.*;
 import org.eclipse.osgi.service.datalocation.Location;
@@ -330,6 +329,10 @@ public abstract class AbstractProvisioningTest extends TestCase {
 		return createIU(name, version, null, required, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false);
 	}
 
+	public static IInstallableUnit createIUWithMetaRequirement(String name, Version version, boolean singleton, IRequiredCapability[] requirements, IRequiredCapability[] metaRequirements) {
+		return createIU(name, version, null, requirements, NO_PROVIDES, NO_PROPERTIES, null, NO_TP_DATA, singleton, null, metaRequirements);
+	}
+
 	/**
 	 * 	Create a basic InstallableUnit with the given attributes. All other attributes
 	 * assume default values, and the default self capability is also added to the IU.
@@ -351,14 +354,14 @@ public abstract class AbstractProvisioningTest extends TestCase {
 	 * assume default values, and the default self capability is also added to the IU.
 	 */
 	public static IInstallableUnit createIU(String name, Version version, String filter, IRequiredCapability[] required, IProvidedCapability[] additionalProvides, Map properties, ITouchpointType tpType, ITouchpointData tpData, boolean singleton) {
-		return createIU(name, version, filter, required, additionalProvides, properties, tpType, tpData, singleton, null);
+		return createIU(name, version, filter, required, additionalProvides, properties, tpType, tpData, singleton, null, null);
 	}
 
 	public static IInstallableUnitPatch createIUPatch(String name, Version version, boolean singleton, IRequirementChange[] changes, IRequiredCapability[][] scope, IRequiredCapability lifeCycle) {
-		return createIUPatch(name, version, null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, singleton, null, changes, scope, lifeCycle);
+		return createIUPatch(name, version, null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, singleton, null, changes, scope, lifeCycle, NO_REQUIRES);
 	}
 
-	public static IInstallableUnitPatch createIUPatch(String name, Version version, String filter, IRequiredCapability[] required, IProvidedCapability[] additionalProvides, Map properties, ITouchpointType tpType, ITouchpointData tpData, boolean singleton, IUpdateDescriptor update, IRequirementChange[] reqChanges, IRequiredCapability[][] scope, IRequiredCapability lifeCycle) {
+	public static IInstallableUnitPatch createIUPatch(String name, Version version, String filter, IRequiredCapability[] required, IProvidedCapability[] additionalProvides, Map properties, ITouchpointType tpType, ITouchpointData tpData, boolean singleton, IUpdateDescriptor update, IRequirementChange[] reqChanges, IRequiredCapability[][] scope, IRequiredCapability lifeCycle, IRequiredCapability[] metaRequirements) {
 		InstallableUnitPatchDescription iu = new MetadataFactory.InstallableUnitPatchDescription();
 		iu.setId(name);
 		iu.setVersion(version);
@@ -383,10 +386,11 @@ public abstract class AbstractProvisioningTest extends TestCase {
 		iu.setRequirementChanges(reqChanges);
 		iu.setApplicabilityScope(scope);
 		iu.setLifeCycle(lifeCycle);
+		iu.setMetaRequiredCapabilities(metaRequirements);
 		return MetadataFactory.createInstallableUnitPatch(iu);
 	}
 
-	public static IInstallableUnit createIU(String name, Version version, String filter, IRequiredCapability[] required, IProvidedCapability[] additionalProvides, Map properties, ITouchpointType tpType, ITouchpointData tpData, boolean singleton, IUpdateDescriptor update) {
+	public static IInstallableUnit createIU(String name, Version version, String filter, IRequiredCapability[] required, IProvidedCapability[] additionalProvides, Map properties, ITouchpointType tpType, ITouchpointData tpData, boolean singleton, IUpdateDescriptor update, IRequiredCapability[] metaRequirements) {
 		InstallableUnitDescription iu = new MetadataFactory.InstallableUnitDescription();
 		iu.setId(name);
 		iu.setVersion(version);
@@ -408,6 +412,9 @@ public abstract class AbstractProvisioningTest extends TestCase {
 			iu.addTouchpointData(tpData);
 		iu.setSingleton(singleton);
 		iu.setUpdateDescriptor(update);
+		if (metaRequirements == null)
+			metaRequirements = NO_REQUIRES;
+		iu.setMetaRequiredCapabilities(metaRequirements);
 		return MetadataFactory.createInstallableUnit(iu);
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OperationGenerationTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OperationGenerationTest.java
index d636abb..68e068e 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OperationGenerationTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/director/OperationGenerationTest.java
@@ -233,12 +233,12 @@ public class OperationGenerationTest extends AbstractProvisioningTest {
 	public void test248468b() {
 		String id = "myBundle";
 		IUpdateDescriptor update = createUpdateDescriptor(id, new Version("1.0.0"));
-		IInstallableUnit one = createIU(id, new Version("1.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, update);
+		IInstallableUnit one = createIU(id, new Version("1.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, update, null);
 		IUpdateDescriptor update2 = createUpdateDescriptor(id, new Version("2.0.0"));
-		IInstallableUnit two = createIU(id, new Version("2.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, update2);
+		IInstallableUnit two = createIU(id, new Version("2.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, update2, null);
 
 		IUpdateDescriptor update3 = createUpdateDescriptor(id, new Version("3.0.0"));
-		IInstallableUnit three = createIU(id, new Version("3.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, update3);
+		IInstallableUnit three = createIU(id, new Version("3.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, update3, null);
 
 		Collection from = new ArrayList();
 		from.add(MetadataFactory.createResolvedInstallableUnit(one, new IInstallableUnitFragment[0]));
@@ -265,12 +265,12 @@ public class OperationGenerationTest extends AbstractProvisioningTest {
 	public void test248468d() {
 		String id = "myBundle";
 		IUpdateDescriptor update = createUpdateDescriptor(id, new Version("1.0.0"));
-		IInstallableUnit one = createIU(id, new Version("1.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, update);
+		IInstallableUnit one = createIU(id, new Version("1.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, update, null);
 		update = createUpdateDescriptor(id, new Version("2.0.0"));
-		IInstallableUnit two = createIU(id, new Version("2.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, update);
+		IInstallableUnit two = createIU(id, new Version("2.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, update, null);
 
 		IUpdateDescriptor update3 = createUpdateDescriptor(id, new Version("3.0.0"));
-		IInstallableUnit three = createIU("anotherBundle", new Version("3.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, update3);
+		IInstallableUnit three = createIU("anotherBundle", new Version("3.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, update3, null);
 
 		Collection from = new ArrayList();
 		from.add(MetadataFactory.createResolvedInstallableUnit(one, new IInstallableUnitFragment[0]));
@@ -298,13 +298,13 @@ public class OperationGenerationTest extends AbstractProvisioningTest {
 	public void test248468c() {
 		String id = "myBundle";
 		IUpdateDescriptor update = createUpdateDescriptor(id, new Version("1.0.0"));
-		IInstallableUnit one = createIU(id, new Version("1.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, update);
+		IInstallableUnit one = createIU(id, new Version("1.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, update, null);
 		update = createUpdateDescriptor(id, new Version("2.0.0"));
-		IInstallableUnit two = createIU(id, new Version("2.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, update);
+		IInstallableUnit two = createIU(id, new Version("2.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, update, null);
 
 		IUpdateDescriptor update3 = MetadataFactory.createUpdateDescriptor(id, new VersionRange(new Version(2, 0, 0), true, new Version(3, 0, 0), false), IUpdateDescriptor.HIGH, "desc");
 		//		IUpdateDescriptor update3 = createUpdateDescriptor(id, new Version("3.0.0"));
-		IInstallableUnit three = createIU("anotherBundle", new Version("3.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, update3);
+		IInstallableUnit three = createIU("anotherBundle", new Version("3.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, update3, null);
 
 		Collection from = new ArrayList();
 		from.add(MetadataFactory.createResolvedInstallableUnit(one, new IInstallableUnitFragment[0]));
@@ -334,9 +334,9 @@ public class OperationGenerationTest extends AbstractProvisioningTest {
 	public void test248468() {
 		String id = "myBundle";
 		IUpdateDescriptor update = createUpdateDescriptor(id, new Version("1.0.0"));
-		IInstallableUnit one = createIU(id, new Version("1.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, update);
+		IInstallableUnit one = createIU(id, new Version("1.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, update, null);
 		update = createUpdateDescriptor(id, new Version("2.0.0"));
-		IInstallableUnit two = createIU(id, new Version("2.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, update);
+		IInstallableUnit two = createIU(id, new Version("2.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, update, null);
 
 		Collection from = new ArrayList();
 		from.add(MetadataFactory.createResolvedInstallableUnit(one, new IInstallableUnitFragment[0]));
@@ -356,9 +356,9 @@ public class OperationGenerationTest extends AbstractProvisioningTest {
 	public void testConfigurationChange1() {
 		String id = "myBundle";
 		String cuId = "cu";
-		IInstallableUnit anIU = createIU(id, new Version("1.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, null);
-		IInstallableUnit anotherIU = createIU("misc", new Version("1.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, null);
-		IInstallableUnit anotherIU2 = createIU("misc2", new Version("1.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, null);
+		IInstallableUnit anIU = createIU(id, new Version("1.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, null, null);
+		IInstallableUnit anotherIU = createIU("misc", new Version("1.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, null, null);
+		IInstallableUnit anotherIU2 = createIU("misc2", new Version("1.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, null, null);
 		IInstallableUnitFragment cu1 = createIUFragment(anIU, cuId, new Version("1.0.0"));
 		IInstallableUnitFragment cu2 = createIUFragment(anIU, cuId, new Version("2.0.0"));
 
@@ -392,7 +392,7 @@ public class OperationGenerationTest extends AbstractProvisioningTest {
 	public void testConfigurationChange2() {
 		String id = "myBundle";
 		String cuId = "cu";
-		IInstallableUnit anIU = createIU(id, new Version("1.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, null);
+		IInstallableUnit anIU = createIU(id, new Version("1.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, null, null);
 		IInstallableUnitFragment cu2 = createIUFragment(anIU, cuId, new Version("2.0.0"));
 
 		Collection from = new ArrayList();
@@ -414,7 +414,7 @@ public class OperationGenerationTest extends AbstractProvisioningTest {
 	public void testConfigurationChange3() {
 		String id = "myBundle";
 		String cuId = "cu";
-		IInstallableUnit anIU = createIU(id, new Version("1.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, null);
+		IInstallableUnit anIU = createIU(id, new Version("1.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, null, null);
 		IInstallableUnitFragment cu2 = createIUFragment(anIU, cuId, new Version("2.0.0"));
 
 		Collection from = new ArrayList();
@@ -436,7 +436,7 @@ public class OperationGenerationTest extends AbstractProvisioningTest {
 	public void testConfigurationChange4() {
 		String id = "myBundle";
 		String cuId = "cu";
-		IInstallableUnit anIU = createIU(id, new Version("1.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, null);
+		IInstallableUnit anIU = createIU(id, new Version("1.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, null, null);
 		IInstallableUnitFragment cu2 = createIUFragment(anIU, cuId, new Version("2.0.0"));
 
 		Collection from = new ArrayList();
@@ -457,7 +457,7 @@ public class OperationGenerationTest extends AbstractProvisioningTest {
 	public void testConfigurationChange5() {
 		String id = "myBundle";
 		String cuId = "cu";
-		IInstallableUnit anIU = createIU(id, new Version("1.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, null);
+		IInstallableUnit anIU = createIU(id, new Version("1.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, null, null);
 		IInstallableUnitFragment cu2 = createIUFragment(anIU, cuId, new Version("2.0.0"));
 		IInstallableUnitFragment cu1 = createIUFragment(anIU, cuId, new Version("1.0.0"));
 
@@ -479,7 +479,7 @@ public class OperationGenerationTest extends AbstractProvisioningTest {
 	public void testConfigurationChange6() {
 		String id = "myBundle";
 		String cuId = "cu";
-		IInstallableUnit anIU = createIU(id, new Version("1.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, null);
+		IInstallableUnit anIU = createIU(id, new Version("1.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, null, null);
 		IInstallableUnitFragment cu2 = createIUFragment(anIU, cuId, new Version("2.0.0"));
 		IInstallableUnitFragment cu1 = createIUFragment(anIU, cuId, new Version("1.0.0"));
 		IInstallableUnitFragment cu3 = createIUFragment(anIU, cuId, new Version("3.0.0"));
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/IUPatchPersistenceTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/IUPatchPersistenceTest.java
index 7120614..26b2fc9 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/IUPatchPersistenceTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/IUPatchPersistenceTest.java
@@ -59,6 +59,9 @@ public class IUPatchPersistenceTest extends AbstractProvisioningTest {
 			new String[] {PackagesNS, "javax.servlet.http", "0.0.0", "true"}, //
 			new String[] {PackagesNS, "org.osgi.framework", "1.2.0", "false"}}; //
 
+	private static String[][] metaRequires = new String[][] {new String[] {PackagesNS, "some.actions1", "0.0.0", "true"}, //
+			new String[] {PackagesNS, "some.actions2", "1.2.0", "false"}}; //
+
 	private static String[][] instructions = new String[][] {new String[] {"manifest", "Manifest-Version: 1.0\\Bundle-Vendor: Eclipse.org\\Bundle-ContactAddress: www.eclipse.org\\...a whole bunch of other manifest content..."}, new String[] {"zipped", "true"}, //
 			new String[] {"configure", "addProgramArg(programArg:-startup);addProgramArg(programArg:@artifact);"}}; //
 
@@ -66,10 +69,11 @@ public class IUPatchPersistenceTest extends AbstractProvisioningTest {
 		Map propertyMap = createProperties(properties);
 		IProvidedCapability[] additionalProvides = createProvided(provides);
 		IRequiredCapability[] requirements = createRequired(requires);
+		IRequiredCapability[] metaRequirements = createRequired(metaRequires);
 		ITouchpointData tpData = createTouchpointData(instructions);
 		IUpdateDescriptor update = createUpdateDescriptor();
 		boolean singleton = false;
-		IInstallableUnit iu = createIU(id, version, filter, requirements, additionalProvides, propertyMap, TOUCHPOINT_OSGI, tpData, singleton, update);
+		IInstallableUnit iu = createIU(id, version, filter, requirements, additionalProvides, propertyMap, TOUCHPOINT_OSGI, tpData, singleton, update, metaRequirements);
 		return iu;
 	}
 
@@ -274,6 +278,7 @@ public class IUPatchPersistenceTest extends AbstractProvisioningTest {
 		Map propertyMap = createProperties(properties);
 		IProvidedCapability[] additionalProvides = createProvided(provides);
 		IRequiredCapability[] requirements = createRequired(requires);
+		IRequiredCapability[] metaRequirements = createRequired(metaRequires);
 		ITouchpointData tpData = createTouchpointData(instructions);
 		IUpdateDescriptor update = createUpdateDescriptor();
 		boolean singleton = false;
@@ -282,7 +287,7 @@ public class IUPatchPersistenceTest extends AbstractProvisioningTest {
 		IRequirementChange change3 = MetadataFactory.createRequirementChange(MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "B", VersionRange.emptyRange, null, false, false, false), null);
 		IRequiredCapability[][] scope = new IRequiredCapability[][] { {MetadataFactory.createRequiredCapability("foo", "bar", null, null, true, true), MetadataFactory.createRequiredCapability("foo", "bar", null, null, true, true)}, {MetadataFactory.createRequiredCapability("zoo", "far", null, null, true, true)}};
 		IRequiredCapability lifeCycle = MetadataFactory.createRequiredCapability("zoo", "x", null, null, false, false, false);
-		IInstallableUnitPatch iu = createIUPatch(id, version, filter, requirements, additionalProvides, propertyMap, TOUCHPOINT_OSGI, tpData, singleton, update, new IRequirementChange[] {change1, change2, change3}, scope, lifeCycle);
+		IInstallableUnitPatch iu = createIUPatch(id, version, filter, requirements, additionalProvides, propertyMap, TOUCHPOINT_OSGI, tpData, singleton, update, new IRequirementChange[] {change1, change2, change3}, scope, lifeCycle, metaRequirements);
 		return iu;
 	}
 
@@ -305,10 +310,10 @@ public class IUPatchPersistenceTest extends AbstractProvisioningTest {
 		assertTrue("Installable unit id is not correct", id.equals(iu.getId()));
 		assertTrue("Installable unit version is not correct", version.equals(iu.getVersion()));
 		assertTrue("Installable unit filter is not correct", filter.equals(iu.getFilter()));
-		// assertTrue("Installable unit properties are not correct", Arrays.equals(properties, extractProperties(iu)));
 		assertTrue("Installable unit properties are not correct", equal(properties, extractProperties(iu)));
 		assertTrue("Installable unit provided capabilities are not correct", equal(addSelfCapability(iu, provides), extractProvides(iu)));
-		//		assertTrue("Installable unit required capabilities are not correct", equal(requires, extractRequires(iu)));	 The lifecycle is added as a requirement for now to make things easier
+		assertTrue("Installable unit required capabilities are not correct", equal(requires, extractRequires(iu))); // The lifecycle is added as a requirement for now to make things easier
+		assertTrue("Installable unit meta required capabilities are not correct", equal(metaRequires, extractMetaRequires(iu)));
 		assertTrue("Installable unit update descriptor are not correct", id.equals(iu.getUpdateDescriptor().getId()));
 		assertTrue("Installable unit update descriptor are not correct", IUpdateDescriptor.HIGH == iu.getUpdateDescriptor().getSeverity());
 		assertTrue("Installable unit update descriptor are not correct", "desc".equals(iu.getUpdateDescriptor().getDescription()));
@@ -349,14 +354,24 @@ public class IUPatchPersistenceTest extends AbstractProvisioningTest {
 		return tuples;
 	}
 
-	//	private static String[][] extractRequires(IInstallableUnit iu) {
-	//		RequiredCapability[] requyres = iu.getRequiredCapabilities();
-	//		String[][] tuples = new String[requyres.length][4];
-	//		for (int i = 0; i < requyres.length; i++) {
-	//			RequiredCapability next = requyres[i];
-	//			tuples[i] = new String[] {next.getNamespace(), next.getName(), next.getRange().toString(), Boolean.valueOf(next.isOptional()).toString()};
-	//		}
-	//		return tuples;
-	//	}
+	private static String[][] extractRequires(IInstallableUnit iu) {
+		IRequiredCapability[] requyres = iu.getRequiredCapabilities();
+		String[][] tuples = new String[requyres.length][4];
+		for (int i = 0; i < requyres.length; i++) {
+			IRequiredCapability next = requyres[i];
+			tuples[i] = new String[] {next.getNamespace(), next.getName(), next.getRange().toString(), Boolean.valueOf(next.isOptional()).toString()};
+		}
+		return tuples;
+	}
+
+	private static String[][] extractMetaRequires(IInstallableUnit iu) {
+		IRequiredCapability[] requyres = iu.getMetaRequiredCapabilities();
+		String[][] tuples = new String[requyres.length][4];
+		for (int i = 0; i < requyres.length; i++) {
+			IRequiredCapability next = requyres[i];
+			tuples[i] = new String[] {next.getNamespace(), next.getName(), next.getRange().toString(), Boolean.valueOf(next.isOptional()).toString()};
+		}
+		return tuples;
+	}
 
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/IUPersistenceTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/IUPersistenceTest.java
index a4fed9c..c72cbae 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/IUPersistenceTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/IUPersistenceTest.java
@@ -172,6 +172,9 @@ public class IUPersistenceTest extends AbstractProvisioningTest {
 			new String[] {PackagesNS, "javax.servlet.http", "0.0.0", "true"}, //
 			new String[] {PackagesNS, "org.osgi.framework", "1.2.0", "false"}}; //
 
+	private static String[][] metaRequires = new String[][] {new String[] {PackagesNS, "some.actions1", "0.0.0", "true"}, //
+			new String[] {PackagesNS, "some.actions2", "1.2.0", "false"}}; //
+
 	private static Version version = new Version("3.1.200.v20070605");
 
 	private Map propertyMap;
@@ -247,11 +250,22 @@ public class IUPersistenceTest extends AbstractProvisioningTest {
 		return tuples;
 	}
 
+	private static String[][] extractMetaRequires(IInstallableUnit iu) {
+		IRequiredCapability[] requyres = iu.getMetaRequiredCapabilities();
+		String[][] tuples = new String[requyres.length][4];
+		for (int i = 0; i < requyres.length; i++) {
+			IRequiredCapability next = requyres[i];
+			tuples[i] = new String[] {next.getNamespace(), next.getName(), next.getRange().toString(), Boolean.valueOf(next.isOptional()).toString()};
+		}
+		return tuples;
+	}
+
 	private IInstallableUnitPatch createPatchIU() {
 		propertyMap = createProperties(properties);
 		propertyMap.put(IInstallableUnit.PROP_TYPE_PATCH, "true");
 		IProvidedCapability[] additionalProvides = createProvided(provides);
 		IRequiredCapability[] requirements = createRequired(requires);
+		IRequiredCapability[] metaRequirements = createRequired(metaRequires);
 		ITouchpointData tpData = createTouchpointData(instructions);
 		IUpdateDescriptor update = createUpdateDescriptor();
 		boolean singleton = false;
@@ -259,7 +273,7 @@ public class IUPersistenceTest extends AbstractProvisioningTest {
 		IRequirementChange change2 = MetadataFactory.createRequirementChange(null, MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "B", new VersionRange("[1.1.0, 1.3.0)"), null, false, false, true));
 		IRequirementChange change3 = MetadataFactory.createRequirementChange(MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "B", VersionRange.emptyRange, null, false, false, false), null);
 		IRequiredCapability[][] scope = new IRequiredCapability[][] { {MetadataFactory.createRequiredCapability("foo", "bar", null, null, true, true), MetadataFactory.createRequiredCapability("foo", "bar", null, null, true, true)}, {MetadataFactory.createRequiredCapability("zoo", "far", null, null, true, true)}};
-		IInstallableUnitPatch iu = createIUPatch(id, version, filter, requirements, additionalProvides, propertyMap, TOUCHPOINT_OSGI, tpData, singleton, update, new IRequirementChange[] {change1, change2, change3}, scope, null);
+		IInstallableUnitPatch iu = createIUPatch(id, version, filter, requirements, additionalProvides, propertyMap, TOUCHPOINT_OSGI, tpData, singleton, update, new IRequirementChange[] {change1, change2, change3}, scope, null, metaRequirements);
 		return iu;
 	}
 
@@ -268,6 +282,7 @@ public class IUPersistenceTest extends AbstractProvisioningTest {
 		propertyMap.put(IInstallableUnit.PROP_TYPE_PATCH, "true");
 		IProvidedCapability[] additionalProvides = createProvided(provides);
 		IRequiredCapability[] requirements = createRequired(requires);
+		IRequiredCapability[] metaRequirements = createRequired(metaRequires);
 		ITouchpointData tpData = createTouchpointData(instructions);
 		IUpdateDescriptor update = createUpdateDescriptor();
 		boolean singleton = false;
@@ -275,7 +290,7 @@ public class IUPersistenceTest extends AbstractProvisioningTest {
 		IRequirementChange change2 = MetadataFactory.createRequirementChange(null, MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "B", new VersionRange("[1.1.0, 1.3.0)"), null, false, false, true));
 		IRequirementChange change3 = MetadataFactory.createRequirementChange(MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "B", VersionRange.emptyRange, null, false, false, false), null);
 		IRequiredCapability[][] scope = new IRequiredCapability[][] {{}};
-		IInstallableUnitPatch iu = createIUPatch(id, version, filter, requirements, additionalProvides, propertyMap, TOUCHPOINT_OSGI, tpData, singleton, update, new IRequirementChange[] {change1, change2, change3}, scope, null);
+		IInstallableUnitPatch iu = createIUPatch(id, version, filter, requirements, additionalProvides, propertyMap, TOUCHPOINT_OSGI, tpData, singleton, update, new IRequirementChange[] {change1, change2, change3}, scope, null, metaRequirements);
 		return iu;
 	}
 
@@ -283,10 +298,11 @@ public class IUPersistenceTest extends AbstractProvisioningTest {
 		propertyMap = createProperties(properties);
 		IProvidedCapability[] additionalProvides = createProvided(provides);
 		IRequiredCapability[] requirements = createRequired(requires);
+		IRequiredCapability[] metaRequirements = createRequired(metaRequires);
 		ITouchpointData tpData = createTouchpointData(instructions);
 		IUpdateDescriptor update = createUpdateDescriptor();
 		boolean singleton = false;
-		IInstallableUnit iu = createIU(id, version, filter, requirements, additionalProvides, propertyMap, TOUCHPOINT_OSGI, tpData, singleton, update);
+		IInstallableUnit iu = createIU(id, version, filter, requirements, additionalProvides, propertyMap, TOUCHPOINT_OSGI, tpData, singleton, update, metaRequirements);
 		return iu;
 	}
 
@@ -368,6 +384,7 @@ public class IUPersistenceTest extends AbstractProvisioningTest {
 		assertEquals("Installable unit properties are not correct", propertyMap, iu.getProperties());
 		assertTrue("Installable unit provided capabilities are not correct", equal(addSelfCapability(iu, provides), extractProvides(iu)));
 		assertTrue("Installable unit required capabilities are not correct", equal(requires, extractRequires(iu)));
+		assertTrue("Installable unit meta required capabilities are not correct", equal(metaRequires, extractMetaRequires(iu)));
 		assertTrue("Installable unit update descriptor are not correct", id.equals(iu.getUpdateDescriptor().getId()));
 		assertTrue("Installable unit update descriptor are not correct", IUpdateDescriptor.HIGH == iu.getUpdateDescriptor().getSeverity());
 		assertTrue("Installable unit update descriptor are not correct", "desc".equals(iu.getUpdateDescriptor().getDescription()));
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/SPIMetadataRepositoryTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/SPIMetadataRepositoryTest.java
index 55fe9a8..a80d582 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/SPIMetadataRepositoryTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/metadata/repository/SPIMetadataRepositoryTest.java
@@ -312,6 +312,10 @@ public class SPIMetadataRepositoryTest extends AbstractProvisioningTest {
 			return getId().compareTo(other.getId());
 		}
 
+		public IRequiredCapability[] getMetaRequiredCapabilities() {
+			return null;
+		}
+
 	}
 
 	class SPITouchpointData implements ITouchpointData {
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/Bug249605.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/Bug249605.java
index 49992ac..4861313 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/Bug249605.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/Bug249605.java
@@ -10,8 +10,6 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.tests.planner;
 
-import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory;
-
 import java.util.HashMap;
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.NullProgressMonitor;
@@ -42,10 +40,10 @@ public class Bug249605 extends AbstractProvisioningTest {
 		p1 = createIUPatch("P", new Version("1.0.0"), true, new IRequirementChange[] {change}, new IRequiredCapability[][] {{MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "A", VersionRange.emptyRange, null, false, false)}}, null);
 
 		IRequirementChange change2 = MetadataFactory.createRequirementChange(MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "B", VersionRange.emptyRange, null, false, false, false), MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "B", new VersionRange("[1.2.0, 1.3.0)"), null, false, false, true));
-		p2 = createIUPatch("P", new Version("1.2.0"), null, new IRequiredCapability[0], new IProvidedCapability[0], new HashMap(), null, null, true, MetadataFactory.createUpdateDescriptor("P", new VersionRange("[1.0.0, 1.2.0)"), 0, null), new IRequirementChange[] {change2}, new IRequiredCapability[][] {{MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "A", VersionRange.emptyRange, null, false, false)}}, null);
+		p2 = createIUPatch("P", new Version("1.2.0"), null, new IRequiredCapability[0], new IProvidedCapability[0], new HashMap(), null, null, true, MetadataFactory.createUpdateDescriptor("P", new VersionRange("[1.0.0, 1.2.0)"), 0, null), new IRequirementChange[] {change2}, new IRequiredCapability[][] {{MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "A", VersionRange.emptyRange, null, false, false)}}, null, new IRequiredCapability[0]);
 
 		IRequirementChange change3 = MetadataFactory.createRequirementChange(MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "B", VersionRange.emptyRange, null, false, false, false), MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "B", new VersionRange("[1.3.0, 1.4.0)"), null, false, false, true));
-		p3 = createIUPatch("P", new Version("1.3.0"), null, new IRequiredCapability[0], new IProvidedCapability[0], new HashMap(), null, null, true, MetadataFactory.createUpdateDescriptor("P", new VersionRange("[1.0.0, 1.3.0)"), 0, null), new IRequirementChange[] {change3}, new IRequiredCapability[][] {{MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "A", VersionRange.emptyRange, null, false, false)}}, null);
+		p3 = createIUPatch("P", new Version("1.3.0"), null, new IRequiredCapability[0], new IProvidedCapability[0], new HashMap(), null, null, true, MetadataFactory.createUpdateDescriptor("P", new VersionRange("[1.0.0, 1.3.0)"), 0, null), new IRequirementChange[] {change3}, new IRequiredCapability[][] {{MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "A", VersionRange.emptyRange, null, false, false)}}, null, new IRequiredCapability[0]);
 
 		createTestMetdataRepository(new IInstallableUnit[] {a1, b1, b2, b3, p1, p2, p3});
 
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/InclusionRuleTest2.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/InclusionRuleTest2.java
index 5ee928a..838f73f 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/InclusionRuleTest2.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/InclusionRuleTest2.java
@@ -30,7 +30,7 @@ public class InclusionRuleTest2 extends AbstractProvisioningTest {
 		super.setUp();
 		a1 = createIU("A", new Version("1.0.0"), true);
 
-		createIU("A", new Version("2.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, true, MetadataFactory.createUpdateDescriptor("A", VersionRange.emptyRange, 0, "foo bar"));
+		createIU("A", new Version("2.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, true, MetadataFactory.createUpdateDescriptor("A", VersionRange.emptyRange, 0, "foo bar"), null);
 		a2 = createIU("A", new Version("2.0.0"), true);
 
 		createTestMetdataRepository(new IInstallableUnit[] {a1, a2});
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest2.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest2.java
index 314032f..b0354fd 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest2.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest2.java
@@ -38,7 +38,7 @@ public class PatchTest2 extends AbstractProvisioningTest {
 	protected void setUp() throws Exception {
 		super.setUp();
 		IProvidedCapability[] cap = new IProvidedCapability[] {MetadataFactory.createProvidedCapability("foo", "bar", new Version(1, 0, 0))};
-		a1 = createIU("A", new Version("1.0.0"), null, new IRequiredCapability[] {MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "B", new VersionRange("[1.0.0, 1.1.0)"), null, false, false)}, cap, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, null);
+		a1 = createIU("A", new Version("1.0.0"), null, new IRequiredCapability[] {MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "B", new VersionRange("[1.0.0, 1.1.0)"), null, false, false)}, cap, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, null, null);
 		b1 = createIU("B", new Version(1, 2, 0), true);
 		IRequirementChange change = MetadataFactory.createRequirementChange(MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "B", VersionRange.emptyRange, null, false, false, false), MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "B", new VersionRange("[1.1.0, 1.3.0)"), null, false, false, true));
 		p1 = createIUPatch("P", new Version("1.0.0"), true, new IRequirementChange[] {change}, new IRequiredCapability[][] {{MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "A", new VersionRange("[1.0.0, 1.1.0]"), null, false, false, false)}}, null);
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest3.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest3.java
index 6411006..398d5b0 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest3.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest3.java
@@ -37,7 +37,7 @@ public class PatchTest3 extends AbstractProvisioningTest {
 		f1 = createIU("F", new Version(1, 0, 0), new IRequiredCapability[] {MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "A", new VersionRange("[1.0.0, 1.1.0]"), null, false, false, true)});
 		f2 = createIU("F", new Version(2, 0, 0), new IRequiredCapability[] {MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "A", new VersionRange("[3.0.0, 4.0.0)"), null, false, false, true)});
 		IProvidedCapability[] cap = new IProvidedCapability[] {MetadataFactory.createProvidedCapability("foo", "bar", new Version(1, 0, 0))};
-		a1 = createIU("A", new Version("1.0.0"), null, new IRequiredCapability[] {MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "B", new VersionRange("[1.0.0, 1.1.0)"), null, false, false)}, cap, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, null);
+		a1 = createIU("A", new Version("1.0.0"), null, new IRequiredCapability[] {MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "B", new VersionRange("[1.0.0, 1.1.0)"), null, false, false)}, cap, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, null, null);
 		a3 = createIU("A", new Version(3, 0, 0), true);
 		b1 = createIU("B", new Version(1, 0, 0), true);
 		b2 = createIU("B", new Version(2, 0, 0), true);
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest6.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest6.java
index bcf4712..9199812 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest6.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest6.java
@@ -45,7 +45,7 @@ public class PatchTest6 extends AbstractProvisioningTest {
 		IRequirementChange changeA = MetadataFactory.createRequirementChange(MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "B", VersionRange.emptyRange, null, false, false, false), MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "B", new VersionRange("[1.1.0, 1.3.0)"), null, false, false, true));
 		IRequiredCapability[][] scopeP1 = new IRequiredCapability[][] {{MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "A", VersionRange.emptyRange, null, false, false, false)}};
 		IRequiredCapability[] reqOnPP = new IRequiredCapability[] {MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "PP", new VersionRange("[1.0.0, 2.0.0)"), null, false, false, true)};
-		p1 = createIUPatch("P", new Version("1.0.0"), null, reqOnPP, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, null, new IRequirementChange[] {changeA}, scopeP1, null);
+		p1 = createIUPatch("P", new Version("1.0.0"), null, reqOnPP, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, null, new IRequirementChange[] {changeA}, scopeP1, null, new IRequiredCapability[0]);
 
 		IRequirementChange changeC = MetadataFactory.createRequirementChange(MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "D", VersionRange.emptyRange, null, false, false, false), MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "D", new VersionRange("[1.1.0, 1.3.0)"), null, false, false, true));
 		IRequiredCapability[][] scopePP1 = new IRequiredCapability[][] {{MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "C", VersionRange.emptyRange, null, false, false, false)}};
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest7.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest7.java
index f635cf0..a99b473 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest7.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest7.java
@@ -10,8 +10,6 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.tests.planner;
 
-import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory;
-
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.provisional.p2.core.Version;
 import org.eclipse.equinox.internal.provisional.p2.core.VersionRange;
@@ -58,7 +56,7 @@ public class PatchTest7 extends AbstractProvisioningTest {
 
 		IRequirementChange changeY = MetadataFactory.createRequirementChange(MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "Y", VersionRange.emptyRange, null, false, false, false), MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "Y", new VersionRange("[1.1.0, 1.3.0)"), null, false, false, true));
 		IRequiredCapability[][] scopePP = new IRequiredCapability[0][0]; //new RequiredCapability[][] {{MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "C", VersionRange.emptyRange, null, false, false, false)}};
-		pp1 = createIUPatch("PP", new Version("1.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, null, new IRequirementChange[] {changeY}, scopePP, null);
+		pp1 = createIUPatch("PP", new Version("1.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, null, new IRequirementChange[] {changeY}, scopePP, null, new IRequiredCapability[0]);
 
 		//		createTestMetdataRepository(new IInstallableUnit[] {a1, b1, c1, x1, y1, y2, f1, p1, pp1});
 		createTestMetdataRepository(new IInstallableUnit[] {c1, y1, y2, f1, pp1});
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest7b.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest7b.java
index c6223e5..4fcfc67 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest7b.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest7b.java
@@ -10,8 +10,6 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.tests.planner;
 
-import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory;
-
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.provisional.p2.core.Version;
 import org.eclipse.equinox.internal.provisional.p2.core.VersionRange;
@@ -54,11 +52,11 @@ public class PatchTest7b extends AbstractProvisioningTest {
 
 		IRequirementChange changeX = MetadataFactory.createRequirementChange(MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "X", VersionRange.emptyRange, null, false, false, false), MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "X", new VersionRange("[1.1.0, 1.3.0)"), null, false, false, true));
 		IRequiredCapability[][] scope = new IRequiredCapability[0][0]; //new RequiredCapability[][] {{MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "A", VersionRange.emptyRange, null, false, false, false)}};
-		p1 = createIUPatch("P", new Version("1.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, null, new IRequirementChange[] {changeX}, scope, null);
+		p1 = createIUPatch("P", new Version("1.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, null, new IRequirementChange[] {changeX}, scope, null, new IRequiredCapability[0]);
 
 		IRequirementChange changeY = MetadataFactory.createRequirementChange(MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "Y", VersionRange.emptyRange, null, false, false, false), MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "Y", new VersionRange("[1.1.0, 1.3.0)"), null, false, false, true));
 		IRequiredCapability[][] scopePP = new IRequiredCapability[0][0]; //new RequiredCapability[][] {{MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "C", VersionRange.emptyRange, null, false, false, false)}};
-		pp1 = createIUPatch("PP", new Version("1.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, null, new IRequirementChange[] {changeY}, scopePP, null);
+		pp1 = createIUPatch("PP", new Version("1.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, null, new IRequirementChange[] {changeY}, scopePP, null, new IRequiredCapability[0]);
 
 		createTestMetdataRepository(new IInstallableUnit[] {a1, b1, c1, x1, y1, y2, f1, p1, pp1});
 		//		createTestMetdataRepository(new IInstallableUnit[] {c1, y1, y2, f1, pp1});
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest8.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest8.java
index 830c849..a567a6f 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest8.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/planner/PatchTest8.java
@@ -10,8 +10,6 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.tests.planner;
 
-import org.eclipse.equinox.internal.provisional.p2.metadata.MetadataFactory;
-
 import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.provisional.p2.core.Version;
 import org.eclipse.equinox.internal.provisional.p2.core.VersionRange;
@@ -52,11 +50,11 @@ public class PatchTest8 extends AbstractProvisioningTest {
 
 		IRequirementChange changeA = MetadataFactory.createRequirementChange(MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "A", VersionRange.emptyRange, null, false, false, false), MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "A", new VersionRange("[2.0.0, 3.0.0)"), null, false, false, true));
 		IRequiredCapability[][] scope = new IRequiredCapability[][] {{MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "F", VersionRange.emptyRange, null, false, false, false)}};
-		p1 = createIUPatch("P", new Version("1.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, null, new IRequirementChange[] {changeA}, scope, null);
+		p1 = createIUPatch("P", new Version("1.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, null, new IRequirementChange[] {changeA}, scope, null, new IRequiredCapability[0]);
 
 		IRequirementChange changeB = MetadataFactory.createRequirementChange(MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "B", VersionRange.emptyRange, null, false, false, false), MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "B", new VersionRange("[2.0.0, 3.0.0)"), null, false, false, true));
 		IRequiredCapability[][] scopePP = new IRequiredCapability[][] {{MetadataFactory.createRequiredCapability(IInstallableUnit.NAMESPACE_IU_ID, "F", VersionRange.emptyRange, null, false, false, false)}};
-		r1 = createIUPatch("R", new Version("1.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, null, new IRequirementChange[] {changeB}, scopePP, null);
+		r1 = createIUPatch("R", new Version("1.0.0"), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, false, null, new IRequirementChange[] {changeB}, scopePP, null, new IRequiredCapability[0]);
 
 		createTestMetdataRepository(new IInstallableUnit[] {a1, a2, b1, b2, c2, f1, p1, r1});
 
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/AddRepositoryActionTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/AddRepositoryActionTest.java
index d5079f7..7d84404 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/AddRepositoryActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/touchpoint/eclipse/AddRepositoryActionTest.java
@@ -164,7 +164,7 @@ public class AddRepositoryActionTest extends AbstractProvisioningTest {
 		Map instructions = new HashMap();
 		instructions.put("configure", TouchpointInstruction.encodeAction("addRepository", getValidArguments()));
 		ITouchpointData tpData = MetadataFactory.createTouchpointData(instructions);
-		IInstallableUnit iu = createIU(id, version, null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, TOUCHPOINT_OSGI, tpData, true, createUpdateDescriptor(id, version));
+		IInstallableUnit iu = createIU(id, version, null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, TOUCHPOINT_OSGI, tpData, true, createUpdateDescriptor(id, version), null);
 		IProfile profile = createProfile(id);
 		ProfileChangeRequest request = new ProfileChangeRequest(profile);
 		request.addInstallableUnits(new IInstallableUnit[] {iu});
@@ -211,7 +211,7 @@ public class AddRepositoryActionTest extends AbstractProvisioningTest {
 		Map instructions = new HashMap();
 		instructions.put("configure", TouchpointInstruction.encodeAction("addRepository", getValidArguments()));
 		ITouchpointData tpData = MetadataFactory.createTouchpointData(instructions);
-		IInstallableUnit newIU = createIU(id, version, null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, TOUCHPOINT_OSGI, tpData, true, createUpdateDescriptor(id, version));
+		IInstallableUnit newIU = createIU(id, version, null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, TOUCHPOINT_OSGI, tpData, true, createUpdateDescriptor(id, version), null);
 
 		//perform the update and install an ordinary bundle
 		IMetadataRepository repo = getMetadataRepositoryManager().loadRepository(site, getMonitor());
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/updatechecker/UpdateCheckerTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/updatechecker/UpdateCheckerTest.java
index 6d6e363..6f3d9da 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/updatechecker/UpdateCheckerTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/updatechecker/UpdateCheckerTest.java
@@ -45,7 +45,7 @@ public class UpdateCheckerTest extends AbstractProvisioningTest {
 		String id = "toInstall." + getName();
 		toInstallIU = createIU(id, new Version(1, 0, 0));
 		IUpdateDescriptor updateDescriptor = createUpdateDescriptor(id, new Version(2, 0, 0));
-		update = createIU(id, new Version(2, 0, 0), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, true, updateDescriptor);
+		update = createIU(id, new Version(2, 0, 0), null, NO_REQUIRES, NO_PROVIDES, NO_PROPERTIES, ITouchpointType.NONE, NO_TP_DATA, true, updateDescriptor, null);
 
 		IInstallableUnit[] allUnits = new IInstallableUnit[] {toInstallIU, update};
 		IInstallableUnit[] toInstallArray = new IInstallableUnit[] {toInstallIU};
commit ed84359d34d69aa340e944319e6827105799c173
Author: Simon Kaegi <skaegi>
Date:   Wed Apr 8 04:15:52 2009 +0000

    Bug 271342 Support for "meta" required capabilities

16	0	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/AbstractPublisherAction.java
2	0	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/ICapabilityAdvice.java
6	0	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileAdvice.java
18	11	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileParser.java
13	3	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/AbstractPublisherActionTest.java
70	0	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/AdviceFileParserTest.java
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/AbstractPublisherAction.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/AbstractPublisherAction.java
index 639ea6b..730f598 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/AbstractPublisherAction.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/AbstractPublisherAction.java
@@ -308,6 +308,12 @@ public abstract class AbstractPublisherAction implements IPublisherAction {
 			requiredMap.put(new CapabilityKey(required[i].getNamespace(), required[i].getName()), required[i]);
 		}
 
+		Map metaRequiredMap = new HashMap();
+		IRequiredCapability[] metaRequired = iu.getMetaRequiredCapabilities();
+		for (int i = 0; i < metaRequired.length; i++) {
+			metaRequiredMap.put(new CapabilityKey(metaRequired[i].getNamespace(), metaRequired[i].getName()), metaRequired[i]);
+		}
+
 		Map providedMap = new HashMap();
 		IProvidedCapability[] provided = iu.getProvidedCapabilities();
 		for (int i = 0; i < provided.length; i++) {
@@ -324,6 +330,13 @@ public abstract class AbstractPublisherAction implements IPublisherAction {
 				}
 			}
 
+			IRequiredCapability[] metaRequiredAdvice = entry.getMetaRequiredCapabilities(iu);
+			if (metaRequiredAdvice != null) {
+				for (int i = 0; i < metaRequiredAdvice.length; i++) {
+					metaRequiredMap.put(new CapabilityKey(metaRequiredAdvice[i].getNamespace(), metaRequiredAdvice[i].getName()), metaRequiredAdvice[i]);
+				}
+			}
+
 			IProvidedCapability[] providedAdvice = entry.getProvidedCapabilities(iu);
 			if (providedAdvice != null) {
 				for (int i = 0; i < providedAdvice.length; i++) {
@@ -335,6 +348,9 @@ public abstract class AbstractPublisherAction implements IPublisherAction {
 		IRequiredCapability[] resultRequired = (IRequiredCapability[]) requiredMap.values().toArray(new IRequiredCapability[requiredMap.size()]);
 		iu.setRequiredCapabilities(resultRequired);
 
+		IRequiredCapability[] resultMetaRequired = (IRequiredCapability[]) metaRequiredMap.values().toArray(new IRequiredCapability[metaRequiredMap.size()]);
+		iu.setMetaRequiredCapabilities(resultMetaRequired);
+
 		IProvidedCapability[] resultProvided = (IProvidedCapability[]) providedMap.values().toArray(new IProvidedCapability[providedMap.size()]);
 		iu.setCapabilities(resultProvided);
 	}
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/ICapabilityAdvice.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/ICapabilityAdvice.java
index 816874d..d4a3dae 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/ICapabilityAdvice.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/actions/ICapabilityAdvice.java
@@ -10,4 +10,6 @@ public interface ICapabilityAdvice extends IPublisherAdvice {
 	public IProvidedCapability[] getProvidedCapabilities(InstallableUnitDescription iu);
 
 	public IRequiredCapability[] getRequiredCapabilities(InstallableUnitDescription iu);
+
+	public IRequiredCapability[] getMetaRequiredCapabilities(InstallableUnitDescription iu);
 }
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileAdvice.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileAdvice.java
index 31a51ad..25581f5 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileAdvice.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileAdvice.java
@@ -40,6 +40,7 @@ public class AdviceFileAdvice extends AbstractAdvice implements ITouchpointAdvic
 	private Map touchpointInstructions;
 	private IProvidedCapability[] providedCapabilities;
 	private IRequiredCapability[] requiredCapabilities;
+	private IRequiredCapability[] metaRequiredCapabilities;
 	private Properties iuProperties;
 	private InstallableUnitDescription[] additionalIUs;
 	private boolean containsAdvice = false;
@@ -81,6 +82,7 @@ public class AdviceFileAdvice extends AbstractAdvice implements ITouchpointAdvic
 		touchpointInstructions = parser.getTouchpointInstructions();
 		providedCapabilities = parser.getProvidedCapabilities();
 		requiredCapabilities = parser.getRequiredCapabilities();
+		requiredCapabilities = parser.getMetaRequiredCapabilities();
 		iuProperties = parser.getProperties();
 		additionalIUs = parser.getAdditionalInstallableUnitDescriptions();
 		containsAdvice = true;
@@ -189,6 +191,10 @@ public class AdviceFileAdvice extends AbstractAdvice implements ITouchpointAdvic
 		return requiredCapabilities;
 	}
 
+	public IRequiredCapability[] getMetaRequiredCapabilities(InstallableUnitDescription iu) {
+		return metaRequiredCapabilities;
+	}
+
 	public InstallableUnitDescription[] getAdditionalInstallableUnitDescriptions(IInstallableUnit iu) {
 		return additionalIUs;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileParser.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileParser.java
index 2eb46ef..52e2bed 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileParser.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/AdviceFileParser.java
@@ -52,6 +52,7 @@ public class AdviceFileParser {
 	private static final String UNITS_PREFIX = "units."; //$NON-NLS-1$
 	private static final String INSTRUCTIONS_PREFIX = "instructions."; //$NON-NLS-1$
 	private static final String REQUIRES_PREFIX = "requires."; //$NON-NLS-1$
+	private static final String META_REQUIREMENTS_PREFIX = "metaRequirements."; //$NON-NLS-1$
 	private static final String PROVIDES_PREFIX = "provides."; //$NON-NLS-1$
 	private static final String PROPERTIES_PREFIX = "properties."; //$NON-NLS-1$
 	private static final String LICENSES_PREFIX = "licenses."; //$NON-NLS-1$
@@ -64,6 +65,7 @@ public class AdviceFileParser {
 	private Properties adviceProperties = new Properties();
 	private List adviceProvides = new ArrayList();
 	private List adviceRequires = new ArrayList();
+	private List adviceMetaRequires = new ArrayList();
 	private Map adviceInstructions = new HashMap();
 	private List adviceOtherIUs = new ArrayList();
 
@@ -97,6 +99,8 @@ public class AdviceFileParser {
 				parseProvides(PROVIDES_PREFIX, adviceProvides);
 			else if (current.startsWith(REQUIRES_PREFIX))
 				parseRequires(REQUIRES_PREFIX, adviceRequires);
+			else if (current.startsWith(META_REQUIREMENTS_PREFIX))
+				parseRequires(META_REQUIREMENTS_PREFIX, adviceMetaRequires);
 			else if (current.startsWith(INSTRUCTIONS_PREFIX))
 				parseInstructions(INSTRUCTIONS_PREFIX, adviceInstructions);
 			else if (current.startsWith(UNITS_PREFIX))
@@ -288,6 +292,7 @@ public class AdviceFileParser {
 		List unitHostRequirements = new ArrayList();
 		List unitProvides = new ArrayList();
 		List unitRequires = new ArrayList();
+		List unitMetaRequirements = new ArrayList();
 		List unitLicenses = new ArrayList();
 		Map unitInstructions = new HashMap();
 		//		updatedescriptor ??
@@ -331,7 +336,7 @@ public class AdviceFileParser {
 				unitUpdateDescription = currentValue();
 				next();
 			} else if (token.startsWith(HOST_REQUIREMENTS_PREFIX))
-				parseHostRequirements(prefix + HOST_REQUIREMENTS_PREFIX, unitHostRequirements);
+				parseRequires(prefix + HOST_REQUIREMENTS_PREFIX, unitHostRequirements);
 			else if (token.startsWith(ARTIFACTS_PREFIX))
 				parseArtifacts(prefix + ARTIFACTS_PREFIX, unitArtifacts);
 			else if (token.startsWith(LICENSES_PREFIX))
@@ -342,6 +347,8 @@ public class AdviceFileParser {
 				parseProvides(prefix + PROVIDES_PREFIX, unitProvides);
 			else if (token.startsWith(REQUIRES_PREFIX))
 				parseRequires(prefix + REQUIRES_PREFIX, unitRequires);
+			else if (token.startsWith(META_REQUIREMENTS_PREFIX))
+				parseRequires(prefix + META_REQUIREMENTS_PREFIX, unitMetaRequirements);
 			else if (token.startsWith(INSTRUCTIONS_PREFIX))
 				parseInstructions(prefix + INSTRUCTIONS_PREFIX, unitInstructions);
 			else {
@@ -391,6 +398,9 @@ public class AdviceFileParser {
 		if (!unitRequires.isEmpty())
 			description.setRequiredCapabilities((IRequiredCapability[]) unitRequires.toArray(new IRequiredCapability[unitRequires.size()]));
 
+		if (!unitMetaRequirements.isEmpty())
+			description.setMetaRequiredCapabilities((IRequiredCapability[]) unitMetaRequirements.toArray(new IRequiredCapability[unitMetaRequirements.size()]));
+
 		if (!unitInstructions.isEmpty())
 			description.addTouchpointData(MetadataFactory.createTouchpointData(unitInstructions));
 
@@ -463,16 +473,6 @@ public class AdviceFileParser {
 		artifacts.add(artifactKey);
 	}
 
-	private void parseHostRequirements(String prefix, List hostRequirements) {
-		while (current != null && current.startsWith(prefix)) {
-			int dotIndex = current.indexOf('.', prefix.length());
-			if (dotIndex == -1)
-				throw new IllegalStateException("bad token: " + current + " = " + currentValue()); //$NON-NLS-1$ //$NON-NLS-2$
-
-			parseRequired(current.substring(0, dotIndex + 1), hostRequirements);
-		}
-	}
-
 	private String substituteVersionAndQualifier(String version) {
 		if (version.indexOf(VERSION_SUBSTITUTION) != -1) {
 			version = replace(version, VERSION_SUBSTITUTION, hostVersion.toString());
@@ -545,4 +545,11 @@ public class AdviceFileParser {
 
 		return (InstallableUnitDescription[]) adviceOtherIUs.toArray(new InstallableUnitDescription[adviceOtherIUs.size()]);
 	}
+
+	public IRequiredCapability[] getMetaRequiredCapabilities() {
+		if (adviceMetaRequires.isEmpty())
+			return null;
+
+		return (IRequiredCapability[]) adviceMetaRequires.toArray(new IRequiredCapability[adviceMetaRequires.size()]);
+	}
 }
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/AbstractPublisherActionTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/AbstractPublisherActionTest.java
index 15e2104..580f517 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/AbstractPublisherActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/AbstractPublisherActionTest.java
@@ -28,10 +28,12 @@ public class AbstractPublisherActionTest extends AbstractProvisioningTest {
 	static class TestCapabilityAdvice implements ICapabilityAdvice {
 		private final IProvidedCapability providedCapability;
 		private final IRequiredCapability requiredCapability;
+		private final IRequiredCapability metaRequiredCapability;
 
-		public TestCapabilityAdvice(IProvidedCapability providedCapability, IRequiredCapability requiredCapability) {
+		public TestCapabilityAdvice(IProvidedCapability providedCapability, IRequiredCapability requiredCapability, IRequiredCapability metaRequiredCapability) {
 			this.providedCapability = providedCapability;
 			this.requiredCapability = requiredCapability;
+			this.metaRequiredCapability = metaRequiredCapability;
 		}
 
 		public IProvidedCapability[] getProvidedCapabilities(InstallableUnitDescription iu) {
@@ -42,6 +44,10 @@ public class AbstractPublisherActionTest extends AbstractProvisioningTest {
 			return new IRequiredCapability[] {requiredCapability};
 		}
 
+		public IRequiredCapability[] getMetaRequiredCapabilities(InstallableUnitDescription iu) {
+			return new IRequiredCapability[] {metaRequiredCapability};
+		}
+
 		public boolean isApplicable(String configSpec, boolean includeDefault, String id, Version version) {
 			return id.equals("test");
 		}
@@ -53,19 +59,23 @@ public class AbstractPublisherActionTest extends AbstractProvisioningTest {
 		iu.setId("test");
 		iu.setRequiredCapabilities(createRequiredCapabilities("ns1", "name1", null, ""));
 		iu.setCapabilities(new IProvidedCapability[] {MetadataFactory.createProvidedCapability("ns2", "name2", null)});
+		iu.setMetaRequiredCapabilities(createRequiredCapabilities("ns3", "name3", null, ""));
 
 		assertNotSame(9, iu.getProvidedCapabilities()[0].getVersion().getMajor());
 		assertTrue(iu.getRequiredCapabilities()[0].isGreedy());
+		assertTrue(iu.getMetaRequiredCapabilities()[0].isGreedy());
 
 		IPublisherInfo info = new PublisherInfo();
-		IProvidedCapability testProvideCapability = MetadataFactory.createProvidedCapability("ns2", "name2", new Version(9, 0, 0));
 		IRequiredCapability testRequiredCapability = MetadataFactory.createRequiredCapability("ns1", "name1", null, null, false, false, false);
+		IProvidedCapability testProvideCapability = MetadataFactory.createProvidedCapability("ns2", "name2", new Version(9, 0, 0));
+		IRequiredCapability testMetaRequiredCapability = MetadataFactory.createRequiredCapability("ns3", "name3", null, null, false, false, false);
 
-		info.addAdvice(new TestCapabilityAdvice(testProvideCapability, testRequiredCapability));
+		info.addAdvice(new TestCapabilityAdvice(testProvideCapability, testRequiredCapability, testMetaRequiredCapability));
 		TestAction action = new TestAction();
 		action.testProcessCapabilityAdvice(iu, info);
 
 		assertEquals(9, iu.getProvidedCapabilities()[0].getVersion().getMajor());
 		assertFalse(iu.getRequiredCapabilities()[0].isGreedy());
+		assertFalse(iu.getMetaRequiredCapabilities()[0].isGreedy());
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/AdviceFileParserTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/AdviceFileParserTest.java
index cd50175..430d1ca 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/AdviceFileParserTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/AdviceFileParserTest.java
@@ -131,6 +131,49 @@ public class AdviceFileParserTest extends TestCase {
 		assertEquals(false, capabilities[1].isMultiple());
 	}
 
+	public void testMetaRequiresAdvice() {
+		Map map = new HashMap();
+		map.put("metaRequirements.0.namespace", "testNamespace1");
+		map.put("metaRequirements.0.name", "testName1");
+		map.put("metaRequirements.0.range", "[1.2.3.$qualifier$, 2)");
+		map.put("metaRequirements.0.greedy", Boolean.TRUE.toString());
+		map.put("metaRequirements.0.optional", Boolean.TRUE.toString());
+		map.put("metaRequirements.0.multiple", Boolean.TRUE.toString());
+
+		AdviceFileParser parser = new AdviceFileParser("id", new Version("1.0.0.v20090909"), map);
+		parser.parse();
+		IRequiredCapability[] capabilities = parser.getMetaRequiredCapabilities();
+		assertEquals(1, capabilities.length);
+		assertEquals("testNamespace1", capabilities[0].getNamespace());
+		assertEquals("testName1", capabilities[0].getName());
+		assertEquals(new VersionRange("[1.2.3.v20090909, 2)"), capabilities[0].getRange());
+
+		map.put("metaRequirements.1.namespace", "testNamespace2");
+		map.put("metaRequirements.1.name", "testName2");
+		map.put("metaRequirements.1.range", "$version$");
+		map.put("metaRequirements.1.greedy", Boolean.FALSE.toString());
+		map.put("metaRequirements.1.optional", Boolean.FALSE.toString());
+		//default 
+		//		map.put("requires.1.multiple", Boolean.FALSE.toString());
+
+		parser = new AdviceFileParser("id", Version.MIN_VERSION, map);
+		parser.parse();
+		capabilities = parser.getMetaRequiredCapabilities();
+		assertEquals(2, capabilities.length);
+		assertEquals("testNamespace1", capabilities[0].getNamespace());
+		assertEquals("testName1", capabilities[0].getName());
+		assertEquals(new VersionRange("[1.2.3, 2)"), capabilities[0].getRange());
+		assertEquals(true, capabilities[0].isGreedy());
+		assertEquals(true, capabilities[0].isOptional());
+		assertEquals(true, capabilities[0].isMultiple());
+		assertEquals("testNamespace2", capabilities[1].getNamespace());
+		assertEquals("testName2", capabilities[1].getName());
+		assertEquals(new VersionRange(Version.MIN_VERSION.toString()), capabilities[1].getRange());
+		assertEquals(false, capabilities[1].isGreedy());
+		assertEquals(false, capabilities[1].isOptional());
+		assertEquals(false, capabilities[1].isMultiple());
+	}
+
 	public void testInstructionsAdvice() {
 		Map map = new HashMap();
 		map.put("instructions.configure", "addProgramArg(programArg:-startup); addProgramArg(programArg:@artifact);");
@@ -189,6 +232,17 @@ public class AdviceFileParserTest extends TestCase {
 		map.put("units.1.requires.1.range", "$version$");
 		map.put("units.1.requires.1.greedy", Boolean.FALSE.toString());
 		map.put("units.1.requires.1.optional", Boolean.FALSE.toString());
+		map.put("units.1.metaRequirements.0.namespace", "testNamespace1");
+		map.put("units.1.metaRequirements.0.name", "testName1");
+		map.put("units.1.metaRequirements.0.range", "[1.2.3.$qualifier$, 2)");
+		map.put("units.1.metaRequirements.0.greedy", Boolean.TRUE.toString());
+		map.put("units.1.metaRequirements.0.optional", Boolean.TRUE.toString());
+		map.put("units.1.metaRequirements.0.multiple", Boolean.TRUE.toString());
+		map.put("units.1.metaRequirements.1.namespace", "testNamespace2");
+		map.put("units.1.metaRequirements.1.name", "testName2");
+		map.put("units.1.metaRequirements.1.range", "$version$");
+		map.put("units.1.metaRequirements.1.greedy", Boolean.FALSE.toString());
+		map.put("units.1.metaRequirements.1.optional", Boolean.FALSE.toString());
 		map.put("units.1.provides.0.namespace", "testNamespace1");
 		map.put("units.1.provides.0.name", "testName1");
 		map.put("units.1.provides.0.version", "1.2.3.$qualifier$");
@@ -226,6 +280,7 @@ public class AdviceFileParserTest extends TestCase {
 		assertEquals(0, iu0.getProperties().size());
 		assertEquals(0, iu0.getRequiredCapabilities().length);
 		assertEquals(0, iu0.getProvidedCapabilities().length);
+		assertEquals(0, iu0.getMetaRequiredCapabilities().length);
 		assertEquals(0, iu0.getTouchpointData().length);
 		assertEquals(ITouchpointType.NONE, iu0.getTouchpointType());
 		assertEquals(null, iu0.getUpdateDescriptor());
@@ -273,6 +328,21 @@ public class AdviceFileParserTest extends TestCase {
 		assertEquals("testName2", provided[1].getName());
 		assertEquals(Version.MIN_VERSION, provided[1].getVersion());
 
+		IRequiredCapability[] metarequirements = iu1.getMetaRequiredCapabilities();
+		assertEquals(2, metarequirements.length);
+		assertEquals("testNamespace1", metarequirements[0].getNamespace());
+		assertEquals("testName1", metarequirements[0].getName());
+		assertEquals(new VersionRange("[1.2.3, 2)"), metarequirements[0].getRange());
+		assertEquals(true, metarequirements[0].isGreedy());
+		assertEquals(true, metarequirements[0].isOptional());
+		assertEquals(true, metarequirements[0].isMultiple());
+		assertEquals("testNamespace2", metarequirements[1].getNamespace());
+		assertEquals("testName2", metarequirements[1].getName());
+		assertEquals(new VersionRange(Version.MIN_VERSION.toString()), metarequirements[1].getRange());
+		assertEquals(false, metarequirements[1].isGreedy());
+		assertEquals(false, metarequirements[1].isOptional());
+		assertEquals(false, metarequirements[1].isMultiple());
+
 		assertEquals(1, iu1.getTouchpointData().length);
 		ITouchpointInstruction configure = iu1.getTouchpointData()[0].getInstruction("configure");
 		assertEquals(null, configure.getImportAttribute());

commit 8b7c910ab6add5fa3e175a60048cbc7b6ac44350
Author: Andrew Niefer <aniefer>
Date:   Thu Nov 20 00:09:50 2008 +0000

    bug 255678 - compare while mirroring

1	0	bundles/org.eclipse.equinox.p2.artifact.repository/META-INF/MANIFEST.MF
6	0	bundles/org.eclipse.equinox.p2.artifact.repository/plugin.xml
106	0	bundles/org.eclipse.equinox.p2.artifact.repository/schema/artifactComparators.exsd
20	10	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/mirror/MirrorApplication.java
58	3	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/mirror/Mirroring.java
40	0	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/processors/md5/MD5ArtifactComparator.java
17	0	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/processors/md5/Messages.java
17	1	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/processors/md5/messages.properties
6	0	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/Messages.java
9	1	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/messages.properties
31	0	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/p2/artifact/repository/IArtifactComparator.java
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.artifact.repository/META-INF/MANIFEST.MF
index 2699717..e283235 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/META-INF/MANIFEST.MF
@@ -43,6 +43,7 @@ Export-Package: org.eclipse.equinox.internal.p2.artifact.mirror;x-internal:=true
    org.eclipse.equinox.p2.extensionlocation,
    org.eclipse.equinox.p2.updatesite"
 Import-Package: javax.xml.parsers,
+ org.eclipse.core.runtime,
  org.eclipse.core.runtime.jobs,
  org.eclipse.equinox.app;version="1.0.0";resolution:=optional,
  org.eclipse.equinox.internal.p2.core.helpers,
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/plugin.xml b/bundles/org.eclipse.equinox.p2.artifact.repository/plugin.xml
index 28429af..c50d9c9 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/plugin.xml
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/plugin.xml
@@ -3,6 +3,7 @@
 <plugin>
    <extension-point id="artifactRepositories" name="Artifact Repositories" schema="schema/artifactRepositories.exsd"/>
    <extension-point id="processingSteps" name="Processing Steps" schema="schema/processingSteps.exsd"/>
+   <extension-point id="artifactComparators" name="Artifact Comparators" schema="schema/artifactComparators.exsd"/>
 
 	<extension
 			point="org.eclipse.equinox.p2.artifact.repository.processingSteps"
@@ -37,4 +38,9 @@
 			id="org.eclipse.equinox.p2.processing.MD5Verifier">
 		<step class="org.eclipse.equinox.internal.p2.artifact.processors.md5.MD5Verifier"/>
 	</extension>
+	
+	<extension point="org.eclipse.equinox.p2.artifact.repository.artifactComparators">
+		<artifactComparator class="org.eclipse.equinox.internal.p2.artifact.processors.md5.MD5ArtifactComparator"
+		id="org.eclipse.equinox.artifact.md5.comparator"/>
+	</extension>
 </plugin>
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/schema/artifactComparators.exsd b/bundles/org.eclipse.equinox.p2.artifact.repository/schema/artifactComparators.exsd
new file mode 100644
index 0000000..a2295df
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/schema/artifactComparators.exsd
@@ -0,0 +1,106 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<!-- Schema file written by PDE -->
+<schema targetNamespace="org.eclipse.equinox.p2.artifact.repository" xmlns="http://www.w3.org/2001/XMLSchema">
+<annotation>
+      <appinfo>
+         <meta.schema plugin="org.eclipse.equinox.p2.artifact.repository" id="artifactComparators" name="Artifact Comparators"/>
+      </appinfo>
+      <documentation>
+         This extension point is used to provide IArtifactDescriptor verification capabilities
+      </documentation>
+   </annotation>
+
+   <element name="extension">
+      <annotation>
+         <appinfo>
+            <meta.element />
+         </appinfo>
+      </annotation>
+      <complexType>
+         <sequence>
+            <element ref="artifactComparator"/>
+         </sequence>
+         <attribute name="point" type="string" use="required">
+            <annotation>
+               <documentation>
+                  
+               </documentation>
+            </annotation>
+         </attribute>
+         <attribute name="id" type="string">
+            <annotation>
+               <documentation>
+                  
+               </documentation>
+            </annotation>
+         </attribute>
+         <attribute name="name" type="string">
+            <annotation>
+               <documentation>
+                  
+               </documentation>
+               <appinfo>
+                  <meta.attribute translatable="true"/>
+               </appinfo>
+            </annotation>
+         </attribute>
+      </complexType>
+   </element>
+
+   <element name="artifactComparator">
+      <complexType>
+         <attribute name="class" type="string">
+            <annotation>
+               <documentation>
+                  
+               </documentation>
+            </annotation>
+         </attribute>
+         <attribute name="id" type="string" use="required">
+            <annotation>
+               <documentation>
+                  
+               </documentation>
+            </annotation>
+         </attribute>
+      </complexType>
+   </element>
+
+   <annotation>
+      <appinfo>
+         <meta.section type="since"/>
+      </appinfo>
+      <documentation>
+         [Enter the first release in which this extension point appears.]
+      </documentation>
+   </annotation>
+
+   <annotation>
+      <appinfo>
+         <meta.section type="examples"/>
+      </appinfo>
+      <documentation>
+         [Enter extension point usage example here.]
+      </documentation>
+   </annotation>
+
+   <annotation>
+      <appinfo>
+         <meta.section type="apiinfo"/>
+      </appinfo>
+      <documentation>
+         [Enter API information here.]
+      </documentation>
+   </annotation>
+
+   <annotation>
+      <appinfo>
+         <meta.section type="implementation"/>
+      </appinfo>
+      <documentation>
+         [Enter information about supplied implementation of this extension point.]
+      </documentation>
+   </annotation>
+
+
+</schema>
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/mirror/MirrorApplication.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/mirror/MirrorApplication.java
index 772d6ae..1091c92 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/mirror/MirrorApplication.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/mirror/MirrorApplication.java
@@ -17,13 +17,14 @@ import org.eclipse.core.runtime.IStatus;
 import org.eclipse.core.runtime.URIUtil;
 import org.eclipse.equinox.app.IApplication;
 import org.eclipse.equinox.app.IApplicationContext;
-import org.eclipse.equinox.internal.p2.artifact.repository.Activator;
-import org.eclipse.equinox.internal.p2.artifact.repository.ArtifactRepositoryManager;
+import org.eclipse.equinox.internal.p2.artifact.processors.md5.MD5ArtifactComparator;
+import org.eclipse.equinox.internal.p2.artifact.repository.*;
 import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
 import org.eclipse.equinox.internal.p2.core.helpers.ServiceHelper;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepository;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactRepositoryManager;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
+import org.eclipse.osgi.util.NLS;
 
 /**
  * An application that performs mirroring of artifacts between repositories.
@@ -41,6 +42,8 @@ public class MirrorApplication implements IApplication {
 	private IArtifactRepositoryManager cachedManager;
 	private boolean sourceLoaded = false;
 	private boolean destinationLoaded = false;
+	private boolean compare = false;
+	private String comparatorID = MD5ArtifactComparator.MD5_COMPARATOR_ID; //use MD5 as default
 
 	/* (non-Javadoc)
 	 * @see org.eclipse.equinox.app.IApplication#start(org.eclipse.equinox.app.IApplicationContext)
@@ -49,7 +52,12 @@ public class MirrorApplication implements IApplication {
 		Map args = context.getArguments();
 		initializeFromArguments((String[]) args.get(IApplicationContext.APPLICATION_ARGS));
 		setupRepositories();
-		IStatus result = new Mirroring(source, destination, raw).run(failOnError, verbose);
+
+		Mirroring mirroring = new Mirroring(source, destination, raw);
+		mirroring.setCompare(compare);
+		mirroring.setComparatorId(comparatorID);
+
+		IStatus result = mirroring.run(failOnError, verbose);
 		IStatus[] children = result.getChildren();
 		for (int i = 0; i < children.length; i++) {
 			if (verbose && !children[i].isOK()) {
@@ -74,8 +82,7 @@ public class MirrorApplication implements IApplication {
 	 */
 	private IArtifactRepositoryManager getManager() {
 		if (cachedManager != null)
-			//TODO remove cast when API is available
-			return (ArtifactRepositoryManager) cachedManager;
+			return cachedManager;
 		IArtifactRepositoryManager result = (IArtifactRepositoryManager) ServiceHelper.getService(Activator.getContext(), IArtifactRepositoryManager.class.getName());
 		// service not available... create one and hang onto it
 		if (result == null) {
@@ -87,12 +94,10 @@ public class MirrorApplication implements IApplication {
 
 	private void setupRepositories() throws ProvisionException {
 		if (destinationLocation == null || sourceLocation == null)
-			throw new IllegalStateException("Must specify a source and destination"); //$NON-NLS-1$
+			throw new IllegalStateException(Messages.exception_needSourceDestination);
 
 		//Check if repositories are already loaded
-		//TODO modify the contains statement once the API is available
 		sourceLoaded = getManager().contains(sourceLocation);
-		//TODO modify the contains statement once the API is available
 		destinationLoaded = getManager().contains(destinationLocation);
 
 		//must execute before initializeDestination is called
@@ -104,7 +109,7 @@ public class MirrorApplication implements IApplication {
 		try {
 			IArtifactRepository repository = getManager().loadRepository(destinationLocation, null);
 			if (!repository.isModifiable())
-				throw new IllegalArgumentException("Artifact repository not modifiable: " + destinationLocation); //$NON-NLS-1$
+				throw new IllegalArgumentException(NLS.bind(Messages.exception_destinationNotModifiable, destinationLocation));
 			if (!append)
 				repository.removeAll();
 			return repository;
@@ -137,6 +142,8 @@ public class MirrorApplication implements IApplication {
 				failOnError = false;
 			if (args[i].equalsIgnoreCase("-verbose")) //$NON-NLS-1$
 				verbose = true;
+			if (args[i].equalsIgnoreCase("-compare")) //$NON-NLS-1$
+				compare = true;
 
 			// check for args with parameters. If we are at the last argument or 
 			// if the next one has a '-' as the first character, then we can't have 
@@ -145,13 +152,16 @@ public class MirrorApplication implements IApplication {
 				continue;
 			String arg = args[++i];
 
+			if (args[i - 1].equalsIgnoreCase("-comparator")) //$NON-NLS-1$
+				comparatorID = arg;
+
 			try {
 				if (args[i - 1].equalsIgnoreCase("-source")) //$NON-NLS-1$
 					sourceLocation = URIUtil.fromString(arg);
 				if (args[i - 1].equalsIgnoreCase("-destination")) //$NON-NLS-1$
 					destinationLocation = URIUtil.fromString(arg);
 			} catch (URISyntaxException e) {
-				throw new IllegalArgumentException("Repository location (" + arg + ") must be a URL."); //$NON-NLS-1$ //$NON-NLS-2$
+				throw new IllegalArgumentException(NLS.bind(Messages.exception_malformedRepoURI, arg));
 			}
 		}
 	}
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/mirror/Mirroring.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/mirror/Mirroring.java
index 336fb77..ebd803f 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/mirror/Mirroring.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/mirror/Mirroring.java
@@ -28,6 +28,48 @@ public class Mirroring {
 	private IArtifactRepository source;
 	private IArtifactRepository destination;
 	private boolean raw;
+	private boolean compare = false;
+	private IArtifactComparator comparator;
+	private String comparatorID = null;
+
+	private static final String comparatorPoint = "org.eclipse.equinox.p2.artifact.repository.comparators"; //$NON-NLS-1$
+	private static final String ATTR_ID = "id"; //$NON-NLS-1$
+	private static final String ATTR_CLASS = "class"; //$NON-NLS-1$
+
+	private IArtifactComparator getComparator() {
+		if (comparator == null)
+			comparator = computeComparators();
+		return comparator;
+	}
+
+	private IArtifactComparator computeComparators() {
+		IConfigurationElement[] extensions = Platform.getExtensionRegistry().getConfigurationElementsFor(comparatorPoint);
+
+		IConfigurationElement element = null;
+		if (comparatorID == null && extensions.length > 0) {
+			element = extensions[0]; //just take the first one
+		} else {
+			for (int i = 0; i < extensions.length; i++) {
+				if (extensions[i].getAttribute(ATTR_ID).equals(comparatorID)) {
+					element = extensions[i];
+					break;
+				}
+			}
+		}
+		if (element != null) {
+			try {
+				Object execExt = element.createExecutableExtension(ATTR_CLASS);
+				if (execExt instanceof IArtifactComparator)
+					return (IArtifactComparator) execExt;
+			} catch (Exception e) {
+				//fall through
+			}
+		}
+
+		if (comparatorID != null)
+			throw new IllegalArgumentException(NLS.bind(Messages.exception_comparatorNotFound, comparatorID));
+		throw new IllegalArgumentException(Messages.exception_noComparators);
+	}
 
 	public Mirroring(IArtifactRepository source, IArtifactRepository destination, boolean raw) {
 		this.source = source;
@@ -35,11 +77,21 @@ public class Mirroring {
 		this.raw = raw;
 	}
 
+	public void setCompare(boolean compare) {
+		this.compare = compare;
+	}
+
+	public void setComparatorId(String id) {
+		this.comparatorID = id;
+	}
+
 	public MultiStatus run(boolean failOnError, boolean verbose) {
 		if (!destination.isModifiable())
-			throw new IllegalStateException("Destination repository must be modifiable: " + destination.getLocation());
+			throw new IllegalStateException(NLS.bind(Messages.exception_destinationNotModifiable, destination.getLocation()));
+		if (compare)
+			getComparator(); //initialize the comparator. Only needed if we're comparing.
 		IArtifactKey[] keys = source.getArtifactKeys();
-		MultiStatus multiStatus = new MultiStatus(Activator.ID, IStatus.OK, "Messages while mirroring artifact descriptors.", null);
+		MultiStatus multiStatus = new MultiStatus(Activator.ID, IStatus.OK, Messages.message_mirroringStatus, null);
 		for (int i = 0; i < keys.length; i++) {
 			IArtifactKey key = keys[i];
 			IArtifactDescriptor[] descriptors = source.getArtifactDescriptors(key);
@@ -75,7 +127,10 @@ public class Mirroring {
 			//This code means the artifact already exists in the target. This is expected.
 			if (e.getStatus().getCode() == ProvisionException.ARTIFACT_EXISTS) {
 				String message = NLS.bind(Messages.mirror_alreadyExists, descriptor, destination);
-				return new Status(IStatus.INFO, Activator.ID, ProvisionException.ARTIFACT_EXISTS, message, e);
+				if (!compare)
+					return new Status(IStatus.INFO, Activator.ID, ProvisionException.ARTIFACT_EXISTS, message, e);
+				return getComparator().compare(source, descriptor, destination, newDescriptor);
+
 			}
 			return e.getStatus();
 		}
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/processors/md5/MD5ArtifactComparator.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/processors/md5/MD5ArtifactComparator.java
new file mode 100644
index 0000000..4dae22c
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/processors/md5/MD5ArtifactComparator.java
@@ -0,0 +1,40 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others. All rights reserved. This
+ * program and the accompanying materials are made available under the terms of
+ * the Eclipse Public License v1.0 which accompanies this distribution, and is
+ * available at http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors: IBM Corporation - initial API and implementation
+ ******************************************************************************/
+
+package org.eclipse.equinox.internal.p2.artifact.processors.md5;
+
+import org.eclipse.core.runtime.IStatus;
+import org.eclipse.core.runtime.Status;
+import org.eclipse.equinox.internal.p2.artifact.repository.Activator;
+import org.eclipse.equinox.internal.provisional.p2.artifact.repository.*;
+import org.eclipse.osgi.util.NLS;
+
+public class MD5ArtifactComparator implements IArtifactComparator {
+
+	public static String MD5_COMPARATOR_ID = "org.eclipse.equinox.artifact.md5.comparator"; //$NON-NLS-1$
+
+	public IStatus compare(IArtifactRepository source, IArtifactDescriptor sourceDescriptor, IArtifactRepository destination, IArtifactDescriptor destDescriptor) {
+		String sourceMD5 = sourceDescriptor.getProperty(IArtifactDescriptor.DOWNLOAD_MD5);
+		String destMD5 = destDescriptor.getProperty(IArtifactDescriptor.DOWNLOAD_MD5);
+
+		if (sourceMD5 == null && destMD5 == null)
+			return new Status(IStatus.INFO, Activator.ID, NLS.bind(Messages.info_noMD5Infomation, sourceDescriptor));
+
+		if (sourceMD5 == null)
+			return new Status(IStatus.INFO, Activator.ID, NLS.bind(Messages.info_noMD5InRepository, source, sourceDescriptor));
+
+		if (destMD5 == null)
+			return new Status(IStatus.INFO, Activator.ID, NLS.bind(Messages.info_noMD5InRepository, destination, destDescriptor));
+
+		if (sourceMD5.equals(destMD5))
+			return Status.OK_STATUS;
+
+		return new Status(IStatus.WARNING, Activator.ID, NLS.bind(Messages.warning_differentMD5, new Object[] {source, destination, sourceDescriptor}));
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/processors/md5/Messages.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/processors/md5/Messages.java
index 87ce9d3..b7e113c 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/processors/md5/Messages.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/processors/md5/Messages.java
@@ -1,17 +1,34 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+
 package org.eclipse.equinox.internal.p2.artifact.processors.md5;
 
 import org.eclipse.osgi.util.NLS;
 
 public class Messages extends NLS {
 	private static final String BUNDLE_NAME = "org.eclipse.equinox.internal.p2.artifact.processors.md5.messages"; //$NON-NLS-1$
+
 	public static String Error_invalid_hash;
 	public static String Error_MD5_unavailable;
 	public static String Error_unexpected_hash;
+	public static String info_noMD5Infomation;
+	public static String info_noMD5InRepository;
+	public static String warning_differentMD5;
+
 	static {
 		// initialize resource bundle
 		NLS.initializeMessages(BUNDLE_NAME, Messages.class);
 	}
 
 	private Messages() {
+		//empty
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/processors/md5/messages.properties b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/processors/md5/messages.properties
index 426b8a0..2fb39f6 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/processors/md5/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/processors/md5/messages.properties
@@ -1,3 +1,19 @@
+###############################################################################
+# Copyright (c) 2008 IBM Corporation and others.
+# All rights reserved. This program and the accompanying materials
+# are made available under the terms of the Eclipse Public License v1.0
+# which accompanies this distribution, and is available at
+# http://www.eclipse.org/legal/epl-v10.html
+#
+# Contributors:
+#     IBM Corporation - initial API and implementation
+###############################################################################
+
 Error_invalid_hash=MD5 value not available or incorrect size, {0}.
 Error_MD5_unavailable=Could not create MD5 algorithm.
-Error_unexpected_hash=Error while processing stream. MD5 hash is not as expected. Expected: {0} and found {1}.
\ No newline at end of file
+Error_unexpected_hash=Error while processing stream. MD5 hash is not as expected. Expected: {0} and found {1}.
+
+info_noMD5Infomation = No MD5 information available for the artifact {0}.
+info_noMD5InRepository = The repository {0} does not contain MD5 information for {1}.
+
+warning_differentMD5 = The respositories {0} and {1} have different MD5 sums for {2}.
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/Messages.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/Messages.java
index 842446d..d756b9a 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/Messages.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/Messages.java
@@ -38,6 +38,12 @@ public class Messages extends NLS {
 	public static String sar_reportStatus;
 
 	public static String mirror_alreadyExists;
+	public static String message_mirroringStatus;
+	public static String exception_comparatorNotFound;
+	public static String exception_noComparators;
+	public static String exception_destinationNotModifiable;
+	public static String exception_needSourceDestination;
+	public static String exception_malformedRepoURI;
 
 	static {
 		// initialize resource bundles
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/messages.properties b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/messages.properties
index dab96af..d98487b 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/messages.properties
@@ -35,4 +35,12 @@ sar_downloadJobName=Install download
 sar_failedMkdir=Failed to create directory {0}.
 sar_reportStatus=Problems downloading artifact: {0}.
 
-mirror_alreadyExists=Artifact: {0} already exists in repository: {1}.
\ No newline at end of file
+mirror_alreadyExists=Artifact: {0} already exists in repository: {1}.
+
+message_mirroringStatus = Messages while mirroring artifact descriptors.
+
+exception_comparatorNotFound = The Artifact Comparator {0} was not found.
+exception_noComparators = No Artifact Comparators are available.
+exception_destinationNotModifiable = The destination repository must be modifiable: {0}.
+exception_needSourceDestination = Must specify a source and destination.
+exception_malformedRepoURI = The repository location ({0}) must be a URI.
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/p2/artifact/repository/IArtifactComparator.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/p2/artifact/repository/IArtifactComparator.java
new file mode 100644
index 0000000..6ba7d55
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/p2/artifact/repository/IArtifactComparator.java
@@ -0,0 +1,31 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others. All rights reserved. This
+ * program and the accompanying materials are made available under the terms of
+ * the Eclipse Public License v1.0 which accompanies this distribution, and is
+ * available at http://www.eclipse.org/legal/epl-v10.html
+ * 
+ * Contributors: IBM Corporation - initial API and implementation
+ ******************************************************************************/
+
+package org.eclipse.equinox.internal.provisional.p2.artifact.repository;
+
+import org.eclipse.core.runtime.IStatus;
+
+public interface IArtifactComparator {
+
+	/**
+	 * Compare 2 equivalent IArtifactDescriptors from different repositories.
+	 * 
+	 * IArtifactDescriptors with the same id and version should represent the same 
+	 * set of bytes.  The comparator should ensure this is true and return an error
+	 * or warning otherwise.
+	 *
+	 * @param source - The source IArtifactRepository
+	 * @param sourceDescriptor - The IArtifactDescriptor from the source repository
+	 * @param destination - The target IArtifactRepository
+	 * @param destDescriptor - The IArtifactDescriptor from the target repository
+	 *
+	 * @return IStatus
+	 */
+	public IStatus compare(IArtifactRepository source, IArtifactDescriptor sourceDescriptor, IArtifactRepository destination, IArtifactDescriptor destDescriptor);
+}
commit 4ee4fc0cf716bf84561bcdd42571fa87bae76ec7
Author: Andrew Niefer <aniefer>
Date:   Fri Nov 28 20:57:50 2008 +0000

    bug 255678 - compare while mirroring

1	0	bundles/org.eclipse.equinox.p2.artifact.repository/META-INF/MANIFEST.MF
31	37	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/mirror/Mirroring.java
2	0	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/Messages.java
2	1	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/messages.properties
52	0	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/p2/artifact/repository/ArtifactComparatorFactory.java
1	0	bundles/org.eclipse.equinox.p2.tests/META-INF/MANIFEST.MF
38	0	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
60	0	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/mirror/ArtifactMirrorApplicationTest.java
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.artifact.repository/META-INF/MANIFEST.MF
index e283235..6ff9291 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/META-INF/MANIFEST.MF
@@ -7,6 +7,7 @@ Bundle-Localization: plugin
 Bundle-Version: 1.0.100.qualifier
 Export-Package: org.eclipse.equinox.internal.p2.artifact.mirror;x-internal:=true,
  org.eclipse.equinox.internal.p2.artifact.processing;x-friends:="org.eclipse.equinox.p2.artifact.processors,org.eclipse.equinox.p2.artifact.optimizers",
+ org.eclipse.equinox.internal.p2.artifact.processors.md5;x-internal:=true,
  org.eclipse.equinox.internal.p2.artifact.processors.pack200;x-friends:="org.eclipse.equinox.p2.artifact.processors,org.eclipse.equinox.p2.artifact.optimizers",
  org.eclipse.equinox.internal.p2.artifact.repository;x-friends:="org.eclipse.equinox.p2.metadata.generator,org.eclipse.equinox.p2.reconciler.dropins,org.eclipse.equinox.p2.publisher",
  org.eclipse.equinox.internal.p2.artifact.repository.simple;x-friends:="org.eclipse.equinox.p2.selfhosting,org.eclipse.equinox.p2.touchpoint.eclipse,org.eclipse.equinox.p2.tests",
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/mirror/Mirroring.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/mirror/Mirroring.java
index ebd803f..a589cba 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/mirror/Mirroring.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/mirror/Mirroring.java
@@ -30,47 +30,14 @@ public class Mirroring {
 	private boolean raw;
 	private boolean compare = false;
 	private IArtifactComparator comparator;
-	private String comparatorID = null;
-
-	private static final String comparatorPoint = "org.eclipse.equinox.p2.artifact.repository.comparators"; //$NON-NLS-1$
-	private static final String ATTR_ID = "id"; //$NON-NLS-1$
-	private static final String ATTR_CLASS = "class"; //$NON-NLS-1$
+	private String comparatorID;
 
 	private IArtifactComparator getComparator() {
 		if (comparator == null)
-			comparator = computeComparators();
+			comparator = ArtifactComparatorFactory.getArtifactComparator(comparatorID);
 		return comparator;
 	}
 
-	private IArtifactComparator computeComparators() {
-		IConfigurationElement[] extensions = Platform.getExtensionRegistry().getConfigurationElementsFor(comparatorPoint);
-
-		IConfigurationElement element = null;
-		if (comparatorID == null && extensions.length > 0) {
-			element = extensions[0]; //just take the first one
-		} else {
-			for (int i = 0; i < extensions.length; i++) {
-				if (extensions[i].getAttribute(ATTR_ID).equals(comparatorID)) {
-					element = extensions[i];
-					break;
-				}
-			}
-		}
-		if (element != null) {
-			try {
-				Object execExt = element.createExecutableExtension(ATTR_CLASS);
-				if (execExt instanceof IArtifactComparator)
-					return (IArtifactComparator) execExt;
-			} catch (Exception e) {
-				//fall through
-			}
-		}
-
-		if (comparatorID != null)
-			throw new IllegalArgumentException(NLS.bind(Messages.exception_comparatorNotFound, comparatorID));
-		throw new IllegalArgumentException(Messages.exception_noComparators);
-	}
-
 	public Mirroring(IArtifactRepository source, IArtifactRepository destination, boolean raw) {
 		this.source = source;
 		this.destination = destination;
@@ -89,7 +56,7 @@ public class Mirroring {
 		if (!destination.isModifiable())
 			throw new IllegalStateException(NLS.bind(Messages.exception_destinationNotModifiable, destination.getLocation()));
 		if (compare)
-			getComparator(); //initialize the comparator. Only needed if we're comparing.
+			getComparator(); //initialize the comparator. Only needed if we're comparing. Used to force error if comparatorID is invalid.
 		IArtifactKey[] keys = source.getArtifactKeys();
 		MultiStatus multiStatus = new MultiStatus(Activator.ID, IStatus.OK, Messages.message_mirroringStatus, null);
 		for (int i = 0; i < keys.length; i++) {
@@ -113,6 +80,7 @@ public class Mirroring {
 				if (verbose)
 					System.out.println("Mirroring: " + descriptor.getArtifactKey() + " (Descriptor: " + descriptor + ")"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
 				repositoryStream = destination.getOutputStream(newDescriptor);
+
 				return source.getRawArtifact(descriptor, repositoryStream, new NullProgressMonitor());
 			} finally {
 				if (repositoryStream != null) {
@@ -129,10 +97,36 @@ public class Mirroring {
 				String message = NLS.bind(Messages.mirror_alreadyExists, descriptor, destination);
 				if (!compare)
 					return new Status(IStatus.INFO, Activator.ID, ProvisionException.ARTIFACT_EXISTS, message, e);
-				return getComparator().compare(source, descriptor, destination, newDescriptor);
 
+				return compareToDestination(descriptor, e);
 			}
 			return e.getStatus();
 		}
 	}
+
+	/**
+	 * Takes an IArtifactDescriptor descriptor and the ProvisionException that was thrown when destination.getOutputStream(descriptor)
+	 * and compares descriptor to the duplicate descriptor in the destination.
+	 * 
+	 * Callers should verify the ProvisionException was thrown due to the artifact existing in the destination before invoking this method.
+	 * @param descriptor
+	 * @param e
+	 * @return the status of the compare
+	 */
+	private IStatus compareToDestination(IArtifactDescriptor descriptor, ProvisionException e) {
+		IArtifactDescriptor[] destDescriptors = destination.getArtifactDescriptors(descriptor.getArtifactKey());
+		IArtifactDescriptor destDescriptor = null;
+		boolean descriptorMatched = false;
+		for (int i = 0; i < destDescriptors.length && !descriptorMatched; i++) {
+			if (destDescriptors[i].equals(descriptor)) {
+				destDescriptor = destDescriptors[i];
+				descriptorMatched = true;
+			}
+		}
+
+		if (descriptorMatched)
+			return getComparator().compare(source, descriptor, destination, destDescriptor);
+
+		return new Status(IStatus.INFO, Activator.ID, ProvisionException.ARTIFACT_EXISTS, Messages.Mirroring_NO_MATCHING_DESCRIPTOR, e);
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/Messages.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/Messages.java
index d756b9a..002a047 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/Messages.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/Messages.java
@@ -45,6 +45,8 @@ public class Messages extends NLS {
 	public static String exception_needSourceDestination;
 	public static String exception_malformedRepoURI;
 
+	public static String Mirroring_NO_MATCHING_DESCRIPTOR;
+
 	static {
 		// initialize resource bundles
 		NLS.initializeMessages(BUNDLE_NAME, Messages.class);
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/messages.properties b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/messages.properties
index d98487b..23f0888 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/messages.properties
@@ -43,4 +43,5 @@ exception_comparatorNotFound = The Artifact Comparator {0} was not found.
 exception_noComparators = No Artifact Comparators are available.
 exception_destinationNotModifiable = The destination repository must be modifiable: {0}.
 exception_needSourceDestination = Must specify a source and destination.
-exception_malformedRepoURI = The repository location ({0}) must be a URI.
\ No newline at end of file
+exception_malformedRepoURI = The repository location ({0}) must be a URI.
+Mirroring_NO_MATCHING_DESCRIPTOR=Could not match descriptor for compare
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/p2/artifact/repository/ArtifactComparatorFactory.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/p2/artifact/repository/ArtifactComparatorFactory.java
new file mode 100644
index 0000000..e65e329
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/provisional/p2/artifact/repository/ArtifactComparatorFactory.java
@@ -0,0 +1,52 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *		compeople AG (Stefan Liebig) - various ongoing maintenance
+ *******************************************************************************/
+package org.eclipse.equinox.internal.provisional.p2.artifact.repository;
+
+import org.eclipse.core.runtime.IConfigurationElement;
+import org.eclipse.core.runtime.Platform;
+import org.eclipse.equinox.internal.p2.artifact.repository.Messages;
+import org.eclipse.osgi.util.NLS;
+
+public class ArtifactComparatorFactory {
+	private static final String comparatorPoint = "org.eclipse.equinox.p2.artifact.repository.artifactComparators"; //$NON-NLS-1$
+	private static final String ATTR_ID = "id"; //$NON-NLS-1$
+	private static final String ATTR_CLASS = "class"; //$NON-NLS-1$
+
+	public static IArtifactComparator getArtifactComparator(String comparatorID) {
+		IConfigurationElement[] extensions = Platform.getExtensionRegistry().getConfigurationElementsFor(comparatorPoint);
+
+		IConfigurationElement element = null;
+		if (comparatorID == null && extensions.length > 0) {
+			element = extensions[0]; //just take the first one
+		} else {
+			for (int i = 0; i < extensions.length; i++) {
+				if (extensions[i].getAttribute(ATTR_ID).equals(comparatorID)) {
+					element = extensions[i];
+					break;
+				}
+			}
+		}
+		if (element != null) {
+			try {
+				Object execExt = element.createExecutableExtension(ATTR_CLASS);
+				if (execExt instanceof IArtifactComparator)
+					return (IArtifactComparator) execExt;
+			} catch (Exception e) {
+				//fall through
+			}
+		}
+
+		if (comparatorID != null)
+			throw new IllegalArgumentException(NLS.bind(Messages.exception_comparatorNotFound, comparatorID));
+		throw new IllegalArgumentException(Messages.exception_noComparators);
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.tests/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.tests/META-INF/MANIFEST.MF
index 22137f3..86eb579 100644
--- a/bundles/org.eclipse.equinox.p2.tests/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.tests/META-INF/MANIFEST.MF
@@ -7,6 +7,7 @@ Bundle-Localization: plugin
 Bundle-Version: 1.1.0.qualifier
 Import-Package: javax.xml.parsers,
  org.eclipse.equinox.internal.p2.artifact.mirror,
+ org.eclipse.equinox.internal.p2.artifact.processors.md5,
  org.eclipse.equinox.internal.p2.artifact.processors.pack200,
  org.eclipse.equinox.internal.p2.artifact.repository,
  org.eclipse.equinox.internal.p2.artifact.repository.simple,
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
index 2198894..fff369f 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/AbstractProvisioningTest.java
@@ -1098,4 +1098,42 @@ public abstract class AbstractProvisioningTest extends TestCase {
 				assertEquals(message, expected.get(expectedArray[i]), actual.get(expectedArray[i]));
 		}
 	}
+
+	/**
+	 * Assert that the given log file contains the given message
+	 * The message is expected to be contained on a single line
+	 * @param log
+	 * @param msg
+	 * @throws Exception
+	 */
+	public static void assertLogContainsLine(File log, String msg) throws Exception {
+		assertLogContainsLines(log, new String[] {msg});
+	}
+
+	/**
+	 * Assert that the given log file contains the given lines
+	 * Lines are expected to appear in order
+	 * @param log
+	 * @param lines
+	 * @throws Exception
+	 */
+	public static void assertLogContainsLines(File log, String[] lines) throws Exception {
+		assertNotNull(log);
+		assertTrue(log.exists());
+		assertTrue(log.length() > 0);
+
+		int idx = 0;
+		BufferedReader reader = new BufferedReader(new FileReader(log));
+		while (reader.ready()) {
+			String line = reader.readLine();
+			if (line.indexOf(lines[idx]) >= 0) {
+				if (++idx >= lines.length) {
+					reader.close();
+					return;
+				}
+			}
+		}
+		reader.close();
+		assertTrue(false);
+	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/mirror/ArtifactMirrorApplicationTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/mirror/ArtifactMirrorApplicationTest.java
index e44c738..e5049be 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/mirror/ArtifactMirrorApplicationTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/mirror/ArtifactMirrorApplicationTest.java
@@ -16,6 +16,7 @@ import java.util.*;
 import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.equinox.app.IApplicationContext;
 import org.eclipse.equinox.internal.p2.artifact.mirror.MirrorApplication;
+import org.eclipse.equinox.internal.p2.artifact.processors.md5.Messages;
 import org.eclipse.equinox.internal.p2.artifact.repository.CompositeArtifactRepository;
 import org.eclipse.equinox.internal.p2.artifact.repository.simple.SimpleArtifactRepository;
 import org.eclipse.equinox.internal.p2.core.helpers.OrderedProperties;
@@ -24,7 +25,10 @@ import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.internal.provisional.p2.core.repository.IRepository;
 import org.eclipse.equinox.internal.provisional.p2.metadata.IArtifactKey;
 import org.eclipse.equinox.p2.tests.AbstractProvisioningTest;
+import org.eclipse.equinox.spi.p2.publisher.PublisherHelper;
+import org.eclipse.osgi.util.NLS;
 import org.osgi.framework.Bundle;
+import org.osgi.framework.Version;
 
 /**
  * Test API of the basic mirror application functionality's implementation.
@@ -1047,4 +1051,60 @@ public class ArtifactMirrorApplicationTest extends AbstractProvisioningTest {
 			fail("Error laoding destiantion repo", e);
 		}
 	}
+
+	public void testCompareUsingMD5Comparator() {
+		//Setup create descriptors with different md5 values
+		IArtifactKey dupKey = PublisherHelper.createBinaryArtifactKey("testKeyId", new Version("1.2.3"));
+		File artifact1 = getTestData("0.0", "/testData/mirror/mirrorSourceRepo1 with space/artifacts.xml");
+		File artifact2 = getTestData("0.0", "/testData/mirror/mirrorSourceRepo2/artifacts.xml");
+		IArtifactDescriptor descriptor1 = PublisherHelper.createArtifactDescriptor(dupKey, artifact1);
+		IArtifactDescriptor descriptor2 = PublisherHelper.createArtifactDescriptor(dupKey, artifact2);
+
+		assertEquals("Ensuring Descriptors are the same", descriptor1, descriptor2);
+		assertNotSame("Ensuring MD5 values are different", descriptor1.getProperty(IArtifactDescriptor.DOWNLOAD_MD5), descriptor2.getProperty(IArtifactDescriptor.DOWNLOAD_MD5));
+
+		//Setup make repositories
+		File repo1Location = getTestFolder(getUniqueString());
+		File repo2Location = getTestFolder(getUniqueString());
+		IArtifactRepository repo1 = null;
+		IArtifactRepository repo2 = null;
+		try {
+			repo1 = getArtifactRepositoryManager().createRepository(repo1Location.toURI(), "Repo 1", IArtifactRepositoryManager.TYPE_SIMPLE_REPOSITORY, null);
+			repo1.addDescriptor(descriptor1);
+			repo2 = getArtifactRepositoryManager().createRepository(repo2Location.toURI(), "Repo 2", IArtifactRepositoryManager.TYPE_SIMPLE_REPOSITORY, null);
+			repo2.addDescriptor(descriptor2);
+		} catch (ProvisionException e) {
+			fail("Error creating repositories", e);
+		}
+
+		//Comparator prints to stderr, redirect that to a file
+		PrintStream oldErr = System.err;
+		PrintStream newErr = null;
+		try {
+			newErr = new PrintStream(new FileOutputStream(repo2Location.getAbsolutePath() + "/out.out"));
+		} catch (FileNotFoundException e) {
+			fail("Error redirecting stderr", e);
+		}
+		System.setErr(newErr);
+		try {
+			//Set compare flag.
+			String[] args = new String[] {"-source", repo1Location.toURL().toExternalForm(), "-destination", repo2Location.toURL().toExternalForm(), "-verbose", "-compare"};
+			//run the mirror application
+			runMirrorApplication("Running with duplicate descriptors with different md5 values", args);
+		} catch (Exception e) {
+			fail("Running mirror application with duplicate descriptors with different md5 values failed", e);
+		}
+		System.setErr(oldErr);
+		newErr.close();
+
+		IArtifactDescriptor[] destDescriptors = repo2.getArtifactDescriptors(descriptor2.getArtifactKey());
+		assertEquals("Ensuring destination has correct number of descriptors", 1, destDescriptors.length);
+		assertEquals("Ensuring proper descriptor exists in destination", descriptor2.getProperty(IArtifactDescriptor.DOWNLOAD_MD5), destDescriptors[0].getProperty(IArtifactDescriptor.DOWNLOAD_MD5));
+		String msg = NLS.bind(Messages.warning_differentMD5, new Object[] {repo1, repo2, descriptor1});
+		try {
+			assertLogContainsLine(new File(repo2Location, "/out.out"), msg);
+		} catch (Exception e) {
+			fail("error verifying output", e);
+		}
+	}
 }

commit 306ccea8b79159a7058d8abbda809ac4c748e783
Author: Susan Franklin <sfranklin>
Date:   Thu Jan 24 18:20:00 2008 +0000

    Bug 216026 - [prov] [ui] Available IUs list should be structured as a self contained component

4	1	bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java
4	1	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
2	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AcceptLicensesWizardPage.java
2	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java
1	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/RevertProfileWizardPage.java
108	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/StructuredIUGroup.java
4	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateOrInstallWizardPage.java
198	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/AvailableIUContentProvider.java
172	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/IUDetailsLabelProvider.java
36	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/StaticContentProvider.java
2	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvUI.java
88	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AvailableIUGroup.java
80	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/InstalledIUGroup.java
25	90	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateAndInstallGroup.java
26	0	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/MetadataRepositories.java
25	9	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/QueryableMetadataRepositoryManager.java
0	197	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/AvailableIUContentProvider.java
3	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUColumnConfig.java
0	153	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUDetailsLabelProvider.java
0	36	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/StaticContentProvider.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java
index 6601851..ecd3a9e 100644
--- a/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui.admin/src/org/eclipse/equinox/internal/p2/ui/admin/ProvAdminQueryProvider.java
@@ -136,7 +136,10 @@ public class ProvAdminQueryProvider implements IQueryProvider {
 					return new ElementQueryDescriptor(profile, new CompoundQuery(new Query[] {groupQuery, query}, true), new InstalledIUCollector(this, profile));
 				return new ElementQueryDescriptor(profile, query, new InstalledIUCollector(this, profile));
 			case IQueryProvider.METADATA_REPOS :
-				queryable = new QueryableMetadataRepositoryManager();
+				if (element instanceof MetadataRepositories)
+					queryable = new QueryableMetadataRepositoryManager(((MetadataRepositories) element).getMetadataRepositories());
+				else
+					queryable = new QueryableMetadataRepositoryManager();
 				query = hideSystem ? new FilteredRepositoryQuery(IMetadataRepositoryManager.REPOSITORIES_NON_SYSTEM) : allQuery;
 				return new ElementQueryDescriptor(queryable, query, new QueriedElementCollector(this, queryable));
 			case IQueryProvider.PROFILES :
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
index d38e4b0..5018dc6 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKQueryProvider.java
@@ -103,7 +103,10 @@ public class ProvSDKQueryProvider implements IQueryProvider {
 				profile = (Profile) ProvUI.getAdapter(element, Profile.class);
 				return new ElementQueryDescriptor(profile, new IUProfilePropertyQuery(profile, IInstallableUnit.PROP_PROFILE_ROOT_IU, Boolean.toString(true)), new InstalledIUCollector(this, profile));
 			case IQueryProvider.METADATA_REPOS :
-				queryable = new QueryableMetadataRepositoryManager();
+				if (element instanceof MetadataRepositories)
+					queryable = new QueryableMetadataRepositoryManager(((MetadataRepositories) element).getMetadataRepositories());
+				else
+					queryable = new QueryableMetadataRepositoryManager();
 				return new ElementQueryDescriptor(queryable, new FilteredRepositoryQuery(IMetadataRepositoryManager.REPOSITORIES_NON_SYSTEM), new QueriedElementCollector(this, queryable));
 			case IQueryProvider.PROFILES :
 				queryable = new QueryableProfileRegistry();
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AcceptLicensesWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AcceptLicensesWizardPage.java
index 077a48c..3b1101f 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AcceptLicensesWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/AcceptLicensesWizardPage.java
@@ -13,6 +13,8 @@ package org.eclipse.equinox.internal.p2.ui.dialogs;
 import java.util.*;
 import java.util.List;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
+import org.eclipse.equinox.internal.p2.ui.viewers.IUDetailsLabelProvider;
+import org.eclipse.equinox.internal.p2.ui.viewers.StaticContentProvider;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.ui.LicenseManager;
 import org.eclipse.equinox.p2.ui.ProvUI;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java
index 6017d1e..c398410 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java
@@ -16,6 +16,8 @@ import java.util.List;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.model.AvailableIUElement;
+import org.eclipse.equinox.internal.p2.ui.viewers.IUDetailsLabelProvider;
+import org.eclipse.equinox.internal.p2.ui.viewers.StaticContentProvider;
 import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/RevertProfileWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/RevertProfileWizardPage.java
index c097890..d5babe3 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/RevertProfileWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/RevertProfileWizardPage.java
@@ -15,6 +15,7 @@ import java.util.Comparator;
 import org.eclipse.core.runtime.IProgressMonitor;
 import org.eclipse.core.runtime.jobs.Job;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
+import org.eclipse.equinox.internal.p2.ui.viewers.StaticContentProvider;
 import org.eclipse.equinox.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.director.ProvisioningPlan;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/StructuredIUGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/StructuredIUGroup.java
new file mode 100644
index 0000000..3bf0b7c
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/StructuredIUGroup.java
@@ -0,0 +1,108 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.internal.p2.ui.dialogs;
+
+import java.util.ArrayList;
+import java.util.List;
+import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.ui.ProvUI;
+import org.eclipse.equinox.p2.ui.query.IQueryProvider;
+import org.eclipse.jface.dialogs.Dialog;
+import org.eclipse.jface.viewers.IStructuredSelection;
+import org.eclipse.jface.viewers.StructuredViewer;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.graphics.*;
+import org.eclipse.swt.layout.GridData;
+import org.eclipse.swt.layout.GridLayout;
+import org.eclipse.swt.widgets.Composite;
+
+/**
+ * A StructuredIUGroup is a reusable UI component that displays a
+ * structured view of IU's driven by some queries.
+ * 
+ * @since 3.4
+ */
+public abstract class StructuredIUGroup {
+
+	private IQueryProvider queryProvider;
+	private FontMetrics fm;
+	private StructuredViewer viewer;
+	private Composite composite;
+
+	/**
+	 * Create a group that represents the available IU's.
+	 * 
+	 * @param parent the parent composite for the group
+	 * @param queryProvider the query provider that defines the queries used
+	 * to retrieve elements in the viewer.
+	 * @param font The font to use for calculating pixel sizes.  This font is
+	 * not managed by the receiver.
+	 */
+	public StructuredIUGroup(final Composite parent, IQueryProvider queryProvider, Font font) {
+		this.queryProvider = queryProvider;
+		// Set up a fontmetrics for calculations
+		GC gc = new GC(parent);
+		gc.setFont(font);
+		fm = gc.getFontMetrics();
+		gc.dispose();
+
+		createGroupComposite(parent);
+	}
+
+	private void createGroupComposite(Composite parent) {
+		composite = new Composite(parent, SWT.NONE);
+		GridData gd = new GridData(SWT.FILL, SWT.FILL, true, true);
+		composite.setLayoutData(gd);
+		GridLayout layout = new GridLayout();
+		layout.marginWidth = 0;
+		layout.marginHeight = 0;
+		composite.setLayout(layout);
+
+		viewer = createViewer(composite, queryProvider);
+
+		GridData data = new GridData(GridData.FILL_BOTH);
+		data.grabExcessHorizontalSpace = true;
+		data.grabExcessVerticalSpace = true;
+		viewer.getControl().setLayoutData(data);
+
+	}
+
+	protected abstract StructuredViewer createViewer(Composite parent, IQueryProvider queryProvider);
+
+	public Composite getComposite() {
+		return composite;
+	}
+
+	public StructuredViewer getStructuredViewer() {
+		return viewer;
+	}
+
+	public IInstallableUnit[] getSelectedIUs() {
+		List elements = ((IStructuredSelection) viewer.getSelection()).toList();
+		List iusList = new ArrayList(elements.size());
+
+		for (int i = 0; i < elements.size(); i++) {
+			IInstallableUnit iu = getIU(elements.get(i));
+			if (iu != null)
+				iusList.add(iu);
+		}
+		return (IInstallableUnit[]) iusList.toArray(new IInstallableUnit[iusList.size()]);
+	}
+
+	protected IInstallableUnit getIU(Object element) {
+		return (IInstallableUnit) ProvUI.getAdapter(element, IInstallableUnit.class);
+
+	}
+
+	protected int convertHorizontalDLUsToPixels(int dlus) {
+		return Dialog.convertHorizontalDLUsToPixels(fm, dlus);
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateOrInstallWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateOrInstallWizardPage.java
index b1ff422..737c865 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateOrInstallWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateOrInstallWizardPage.java
@@ -17,6 +17,7 @@ import org.eclipse.equinox.p2.ui.viewers.IUColumnConfig;
 public abstract class UpdateOrInstallWizardPage extends ProfileModificationWizardPage {
 
 	protected UpdateOrInstallWizard wizard;
+	private static final int DEFAULT_COLUMN_WIDTH = 150;
 
 	protected UpdateOrInstallWizardPage(String id, IInstallableUnit[] ius, String profileId, UpdateOrInstallWizard wizard) {
 		super(id, ius, profileId);
@@ -26,7 +27,9 @@ public abstract class UpdateOrInstallWizardPage extends ProfileModificationWizar
 	protected abstract String getOperationLabel();
 
 	protected IUColumnConfig[] getColumnConfig() {
-		return new IUColumnConfig[] {new IUColumnConfig(ProvUIMessages.ProvUI_NameColumnTitle, IUColumnConfig.COLUMN_NAME), new IUColumnConfig(ProvUIMessages.ProvUI_VersionColumnTitle, IUColumnConfig.COLUMN_VERSION), new IUColumnConfig(ProvUIMessages.ProvUI_SizeColumnTitle, IUColumnConfig.COLUMN_SIZE)};
+		initializeDialogUnits(getShell());
+		int pixels = convertHorizontalDLUsToPixels(DEFAULT_COLUMN_WIDTH);
+		return new IUColumnConfig[] {new IUColumnConfig(ProvUIMessages.ProvUI_NameColumnTitle, IUColumnConfig.COLUMN_NAME, pixels), new IUColumnConfig(ProvUIMessages.ProvUI_VersionColumnTitle, IUColumnConfig.COLUMN_VERSION, pixels), new IUColumnConfig(ProvUIMessages.ProvUI_SizeColumnTitle, IUColumnConfig.COLUMN_SIZE, pixels / 2)};
 	}
 
 	protected void selectedIUsChanged() {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/AvailableIUContentProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/AvailableIUContentProvider.java
new file mode 100644
index 0000000..d07f737
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/AvailableIUContentProvider.java
@@ -0,0 +1,198 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+
+package org.eclipse.equinox.internal.p2.ui.viewers;
+
+import java.util.ArrayList;
+import java.util.HashSet;
+import org.eclipse.core.runtime.*;
+import org.eclipse.core.runtime.jobs.*;
+import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
+import org.eclipse.equinox.internal.p2.ui.model.ProvElement;
+import org.eclipse.equinox.internal.p2.ui.model.RemoteQueriedElement;
+import org.eclipse.equinox.p2.ui.ProvUIImages;
+import org.eclipse.equinox.p2.ui.query.IQueryProvider;
+import org.eclipse.equinox.p2.ui.viewers.RepositoryContentProvider;
+import org.eclipse.jface.viewers.AbstractTreeViewer;
+import org.eclipse.jface.viewers.Viewer;
+import org.eclipse.osgi.util.NLS;
+import org.eclipse.swt.events.DisposeEvent;
+import org.eclipse.swt.events.DisposeListener;
+import org.eclipse.ui.model.IWorkbenchAdapter;
+import org.eclipse.ui.progress.IElementCollector;
+
+/**
+ * Content provider for available software in any number of repos.
+ * 
+ * @since 3.4
+ * 
+ */
+public class AvailableIUContentProvider extends RepositoryContentProvider {
+
+	class RepositoryPlaceholder extends ProvElement {
+		String identifier;
+		boolean failed = false;
+
+		RepositoryPlaceholder(String identifier) {
+			this.identifier = identifier;
+		}
+
+		/* (non-Javadoc)
+		 * @see org.eclipse.ui.model.IWorkbenchAdapter#getChildren(java.lang.Object)
+		 */
+		public Object[] getChildren(Object o) {
+			return new Object[0];
+		}
+
+		/*
+		 * 
+		 */
+		public String getImageId(Object o) {
+			return ProvUIImages.IMG_METADATA_REPOSITORY;
+		}
+
+		/* (non-Javadoc)
+		 * @see org.eclipse.ui.model.IWorkbenchAdapter#getLabel(java.lang.Object)
+		 */
+		public String getLabel(Object o) {
+			if (failed)
+				return NLS.bind(ProvUIMessages.AvailableIUContentProvider_FailureRetrievingContents, identifier);
+			return NLS.bind(ProvUIMessages.AvailableIUContentProvider_PlaceholderLabel, identifier);
+		}
+
+		/* (non-Javadoc)
+		 * @see org.eclipse.ui.model.IWorkbenchAdapter#getParent(java.lang.Object)
+		 */
+		public Object getParent(Object o) {
+			return null;
+		}
+
+		/* (non-Javadoc)
+		 * @see org.eclipse.core.runtime.IAdaptable#getAdapter(java.lang.Class)
+		 */
+		public Object getAdapter(Class adapter) {
+			if (adapter == IWorkbenchAdapter.class) {
+				return this;
+			}
+			return null;
+		}
+	}
+
+	AbstractTreeViewer treeViewer;
+	HashSet allChildren = new HashSet();
+	ArrayList runningJobs = new ArrayList();
+
+	public AvailableIUContentProvider(IQueryProvider queryProvider) {
+		super(queryProvider);
+	}
+
+	public void inputChanged(Viewer v, Object oldInput, Object newInput) {
+		if (v instanceof AbstractTreeViewer) {
+			treeViewer = (AbstractTreeViewer) v;
+			treeViewer.getControl().addDisposeListener(new DisposeListener() {
+				public void widgetDisposed(DisposeEvent e) {
+					cancelJobs();
+				}
+			});
+		}
+		allChildren = new HashSet();
+		cancelJobs();
+		super.inputChanged(v, oldInput, newInput);
+	}
+
+	public Object[] getElements(Object input) {
+		if (allChildren.isEmpty()) {
+			// Overridden to get the children of each element as the elements.
+			Object[] elements = super.getElements(input);
+			RepositoryPlaceholder placeholder;
+			for (int i = 0; i < elements.length; i++) {
+				if (elements[i] instanceof ProvElement)
+					placeholder = new RepositoryPlaceholder(((ProvElement) elements[i]).getLabel(elements[i]));
+				else
+					placeholder = new RepositoryPlaceholder(elements[i].toString());
+				startFetchingElements(elements[i], placeholder);
+				allChildren.add(placeholder);
+			}
+		}
+		return allChildren.toArray();
+	}
+
+	private void startFetchingElements(final Object element, final RepositoryPlaceholder placeholder) {
+		final Job job = new Job(NLS.bind(ProvUIMessages.AvailableIUContentProvider_JobName, placeholder.identifier)) {
+			/*
+			 * (non-Javadoc)
+			 * 
+			 * @see org.eclipse.core.jobs.Job#run(org.eclipse.core.runtime.IProgressMonitor)
+			 */
+			public IStatus run(IProgressMonitor monitor) {
+				if (element instanceof ProvElement) {
+					if (element instanceof RemoteQueriedElement) {
+						IElementCollector collector = new IElementCollector() {
+							boolean added = false;
+
+							public void add(Object o, IProgressMonitor pm) {
+								allChildren.add(o);
+								added = true;
+							}
+
+							public void add(Object[] objs, IProgressMonitor pm) {
+								for (int i = 0; i < objs.length; i++) {
+									add(objs[i], pm);
+								}
+							}
+
+							public void done() {
+								if (added)
+									allChildren.remove(placeholder);
+								else
+									placeholder.failed = true;
+							}
+						};
+						((RemoteQueriedElement) element).fetchDeferredChildren(element, collector, SubMonitor.convert(monitor));
+						collector.done();
+					} else {
+						Object[] children = ((ProvElement) element).getChildren(element);
+						for (int i = 0; i < children.length; i++)
+							allChildren.add(children[i]);
+						if (children.length == 0)
+							placeholder.failed = true;
+						else
+							allChildren.remove(placeholder);
+					}
+				}
+				if (!treeViewer.getControl().isDisposed()) {
+					treeViewer.getControl().getDisplay().asyncExec(new Runnable() {
+						public void run() {
+							treeViewer.refresh();
+						}
+					});
+				}
+				return Status.OK_STATUS;
+			}
+		};
+		job.setPriority(Job.LONG);
+		job.setSystem(true);
+		runningJobs.add(job);
+		job.addJobChangeListener(new JobChangeAdapter() {
+			public void done(IJobChangeEvent event) {
+				runningJobs.remove(job);
+			}
+		});
+		job.schedule();
+	}
+
+	void cancelJobs() {
+		// copy to array since we delete as we go
+		Job[] jobs = (Job[]) runningJobs.toArray(new Job[runningJobs.size()]);
+		for (int i = 0; i < jobs.length; i++)
+			jobs[i].cancel();
+	}
+}
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/IUDetailsLabelProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/IUDetailsLabelProvider.java
new file mode 100644
index 0000000..133a781
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/IUDetailsLabelProvider.java
@@ -0,0 +1,172 @@
+/*******************************************************************************
+ * Copyright (c) 2007, 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+
+package org.eclipse.equinox.internal.p2.ui.viewers;
+
+import java.text.NumberFormat;
+import java.util.HashMap;
+import org.eclipse.core.runtime.*;
+import org.eclipse.core.runtime.jobs.*;
+import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
+import org.eclipse.equinox.internal.p2.ui.model.ProvElement;
+import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.ui.ProvUI;
+import org.eclipse.equinox.p2.ui.ProvUIImages;
+import org.eclipse.equinox.p2.ui.model.IUElement;
+import org.eclipse.equinox.p2.ui.viewers.IUColumnConfig;
+import org.eclipse.jface.viewers.*;
+import org.eclipse.osgi.util.NLS;
+import org.eclipse.swt.graphics.Image;
+import org.eclipse.swt.widgets.Shell;
+
+/**
+ * Label provider for showing IU's in a table.  Clients can configure
+ * what is shown in each column.
+ * 
+ * @since 3.4
+ */
+public class IUDetailsLabelProvider extends ColumnLabelProvider implements ITableLabelProvider {
+	final static int PRIMARY_COLUMN = 0;
+	final static String BLANK = ""; //$NON-NLS-1$
+	private String toolTipProperty = null;
+
+	private IUColumnConfig[] columnConfig = ProvUI.getIUColumnConfig();
+	Shell shell;
+	HashMap jobs = new HashMap();
+
+	public IUDetailsLabelProvider() {
+		// use default column config
+	}
+
+	public IUDetailsLabelProvider(IUColumnConfig[] columnConfig, Shell shell) {
+		Assert.isLegal(columnConfig.length > 0);
+		this.columnConfig = columnConfig;
+		this.shell = shell;
+	}
+
+	public String getText(Object obj) {
+		return getColumnText(obj, 0);
+	}
+
+	public Image getImage(Object obj) {
+		return getColumnImage(obj, columnConfig[0].columnField);
+	}
+
+	public String getColumnText(Object element, int columnIndex) {
+		int columnContent = IUColumnConfig.COLUMN_ID;
+		if (columnIndex < columnConfig.length) {
+			columnContent = columnConfig[columnIndex].columnField;
+		}
+
+		IInstallableUnit iu = (IInstallableUnit) ProvUI.getAdapter(element, IInstallableUnit.class);
+		if (iu == null) {
+			if (columnIndex == 0) {
+				if (element instanceof ProvElement)
+					return ((ProvElement) element).getLabel(element);
+				return element.toString();
+			}
+			return BLANK;
+		}
+
+		switch (columnContent) {
+			case IUColumnConfig.COLUMN_ID :
+				return iu.getId();
+			case IUColumnConfig.COLUMN_NAME :
+				String name = iu.getProperty(IInstallableUnit.PROP_NAME);
+				if (name != null)
+					return name;
+				return BLANK;
+			case IUColumnConfig.COLUMN_VERSION :
+				if (element instanceof IUElement && ((IUElement) element).shouldShowVersion())
+					return iu.getVersion().toString();
+				return BLANK;
+
+			case IUColumnConfig.COLUMN_SIZE :
+				if (element instanceof IUElement && ((IUElement) element).shouldShowSize())
+					return getIUSize((IUElement) element);
+				return BLANK;
+		}
+		return BLANK;
+	}
+
+	public Image getColumnImage(Object element, int index) {
+		if (index == PRIMARY_COLUMN) {
+			if (element instanceof ProvElement)
+				return ((ProvElement) element).getImage(element);
+			if (ProvUI.getAdapter(element, IInstallableUnit.class) != null)
+				return ProvUIImages.getImage(ProvUIImages.IMG_IU);
+		}
+		return null;
+	}
+
+	private String getIUSize(final IUElement element) {
+		long size = element.getSize();
+		// If size is already known, return it
+		if (size != IUElement.SIZE_UNKNOWN)
+			return getFormattedSize(size);
+		if (!jobs.containsKey(element)) {
+			Job resolveJob = new Job(element.getIU().getId()) {
+
+				protected IStatus run(IProgressMonitor monitor) {
+					if (shell == null || shell.isDisposed())
+						return Status.OK_STATUS;
+
+					element.computeSize();
+
+					// If we still could not compute size, give up
+					if (element.getSize() == IUElement.SIZE_UNKNOWN)
+						return Status.OK_STATUS;
+
+					if (shell == null || shell.isDisposed())
+						return Status.OK_STATUS;
+					shell.getDisplay().asyncExec(new Runnable() {
+
+						public void run() {
+							fireLabelProviderChanged(new LabelProviderChangedEvent(IUDetailsLabelProvider.this, element));
+						}
+					});
+
+					return Status.OK_STATUS;
+				}
+			};
+			jobs.put(element, resolveJob);
+			resolveJob.setSystem(true);
+			resolveJob.addJobChangeListener(new JobChangeAdapter() {
+				public void done(IJobChangeEvent event) {
+					jobs.remove(element);
+				}
+			});
+			resolveJob.schedule();
+		}
+		return ProvUIMessages.IUDetailsLabelProvider_ComputingSize;
+	}
+
+	private String getFormattedSize(long size) {
+		if (size == IUElement.SIZE_UNKNOWN)
+			return ProvUIMessages.IUDetailsLabelProvider_Unknown;
+		if (size > 1000L) {
+			long kb = size / 1000L;
+			return NLS.bind(ProvUIMessages.IUDetailsLabelProvider_KB, NumberFormat.getInstance().format(new Long(kb)));
+		}
+		return NLS.bind(ProvUIMessages.IUDetailsLabelProvider_Bytes, NumberFormat.getInstance().format(new Long(size)));
+	}
+
+	public void setToolTipProperty(String propertyName) {
+		toolTipProperty = propertyName;
+	}
+
+	public String getToolTipText(Object element) {
+		IInstallableUnit iu = (IInstallableUnit) ProvUI.getAdapter(element, IInstallableUnit.class);
+		if (iu == null || toolTipProperty == null)
+			return null;
+		return iu.getProperty(toolTipProperty);
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/StaticContentProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/StaticContentProvider.java
new file mode 100644
index 0000000..b80541a
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/viewers/StaticContentProvider.java
@@ -0,0 +1,36 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+
+package org.eclipse.equinox.internal.p2.ui.viewers;
+
+import org.eclipse.jface.viewers.IStructuredContentProvider;
+import org.eclipse.jface.viewers.Viewer;
+
+public final class StaticContentProvider implements IStructuredContentProvider {
+	private Object[] elements;
+
+	public StaticContentProvider(Object[] elements) {
+		this.elements = elements;
+	}
+
+	public Object[] getElements(Object inputElement) {
+		return elements;
+	}
+
+	public void dispose() {
+		// nothing to dispose
+	}
+
+	public void inputChanged(Viewer viewer, Object oldInput, Object newInput) {
+		if (newInput instanceof Object[])
+			this.elements = (Object[]) newInput;
+	}
+}
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvUI.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvUI.java
index 644fd5b..e30c0a6 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvUI.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/ProvUI.java
@@ -48,7 +48,8 @@ public class ProvUI {
 	public static final String REVERT_COMMAND_TOOLTIP = ProvUIMessages.RevertIUCommandTooltip;
 
 	static ObjectUndoContext provisioningUndoContext;
-	private static IUColumnConfig[] iuColumnConfig = new IUColumnConfig[] {new IUColumnConfig(ProvUIMessages.ProvUI_NameColumnTitle, IUColumnConfig.COLUMN_NAME), new IUColumnConfig(ProvUIMessages.ProvUI_VersionColumnTitle, IUColumnConfig.COLUMN_VERSION)};
+	private static final int DEFAULT_COLUMN_WIDTH = 200;
+	private static IUColumnConfig[] iuColumnConfig = new IUColumnConfig[] {new IUColumnConfig(ProvUIMessages.ProvUI_NameColumnTitle, IUColumnConfig.COLUMN_NAME, DEFAULT_COLUMN_WIDTH), new IUColumnConfig(ProvUIMessages.ProvUI_VersionColumnTitle, IUColumnConfig.COLUMN_VERSION, DEFAULT_COLUMN_WIDTH)};
 
 	public static Shell getShell(IAdaptable uiInfo) {
 		Shell shell;
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AvailableIUGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AvailableIUGroup.java
new file mode 100644
index 0000000..c3b105a
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AvailableIUGroup.java
@@ -0,0 +1,88 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.p2.ui.dialogs;
+
+import java.net.URL;
+import org.eclipse.equinox.internal.p2.ui.dialogs.StructuredIUGroup;
+import org.eclipse.equinox.internal.p2.ui.viewers.AvailableIUContentProvider;
+import org.eclipse.equinox.internal.p2.ui.viewers.IUDetailsLabelProvider;
+import org.eclipse.equinox.p2.metadata.IInstallableUnit;
+import org.eclipse.equinox.p2.ui.ProvUI;
+import org.eclipse.equinox.p2.ui.model.MetadataRepositories;
+import org.eclipse.equinox.p2.ui.query.IQueryProvider;
+import org.eclipse.equinox.p2.ui.viewers.*;
+import org.eclipse.jface.viewers.StructuredViewer;
+import org.eclipse.jface.viewers.TreeViewer;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.graphics.Font;
+import org.eclipse.swt.widgets.*;
+
+/**
+ * An AvailableIUGroup is a reusable UI component that displays the
+ * IU's available for installation.
+ * 
+ * @since 3.4
+ */
+public class AvailableIUGroup extends StructuredIUGroup {
+
+	private URL[] metadataRepositories;
+
+	/**
+	 * Create a group that represents the available IU's.
+	 * 
+	 * @param parent the parent composite for the group
+	 * @param queryProvider the query provider that defines the queries used
+	 * to retrieve elements in the viewer.
+	 * @param font The font to use for calculating pixel sizes.  This font is
+	 * not managed by the receiver.
+	 * @param metadataRepositories an array of URLs defining the metadata repositories that
+	 * should be used for showing content.  A value of <code>null</code> indicates that 
+	 * all metadata repositories should be queried.
+	 */
+	public AvailableIUGroup(final Composite parent, IQueryProvider queryProvider, Font font, URL[] metadataRepositories) {
+		// This will evolve into a provisioning context
+		super(parent, queryProvider, font);
+		this.metadataRepositories = metadataRepositories;
+	}
+
+	protected StructuredViewer createViewer(Composite parent, IQueryProvider queryProvider) {
+		// Table of available IU's
+		TreeViewer availableIUViewer = new TreeViewer(parent, SWT.MULTI | SWT.FULL_SELECTION | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
+
+		final IUDetailsLabelProvider labelProvider = new IUDetailsLabelProvider();
+		labelProvider.setToolTipProperty(IInstallableUnit.PROP_DESCRIPTION);
+
+		// Filters and sorters before establishing content, so we don't refresh unnecessarily.
+		availableIUViewer.setComparator(new IUComparator(IUComparator.IU_ID));
+		availableIUViewer.setComparer(new ProvElementComparer());
+
+		// Now the content.
+		availableIUViewer.setContentProvider(new AvailableIUContentProvider(queryProvider));
+		availableIUViewer.setInput(new MetadataRepositories(metadataRepositories));
+
+		// Now the presentation, columns before label provider.
+		setTreeColumns(availableIUViewer.getTree());
+		availableIUViewer.setLabelProvider(labelProvider);
+		return availableIUViewer;
+	}
+
+	private void setTreeColumns(Tree tree) {
+		IUColumnConfig[] columns = ProvUI.getIUColumnConfig();
+		tree.setHeaderVisible(true);
+
+		for (int i = 0; i < columns.length; i++) {
+			TreeColumn tc = new TreeColumn(tree, SWT.NONE, i);
+			tc.setResizable(true);
+			tc.setText(columns[i].columnTitle);
+			tc.setWidth(convertHorizontalDLUsToPixels(columns[i].defaultColumnWidth));
+		}
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/InstalledIUGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/InstalledIUGroup.java
new file mode 100644
index 0000000..d4bc2e7
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/InstalledIUGroup.java
@@ -0,0 +1,80 @@
+/*******************************************************************************
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.p2.ui.dialogs;
+
+import org.eclipse.equinox.internal.p2.ui.dialogs.StructuredIUGroup;
+import org.eclipse.equinox.internal.p2.ui.viewers.IUDetailsLabelProvider;
+import org.eclipse.equinox.p2.ui.ProvUI;
+import org.eclipse.equinox.p2.ui.model.ProfileElement;
+import org.eclipse.equinox.p2.ui.query.IQueryProvider;
+import org.eclipse.equinox.p2.ui.viewers.*;
+import org.eclipse.jface.viewers.StructuredViewer;
+import org.eclipse.jface.viewers.TableViewer;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.graphics.Font;
+import org.eclipse.swt.widgets.*;
+
+/**
+ * An InstalledIUGroup is a reusable UI component that displays the
+ * IU's in a given profile.
+ * 
+ * @since 3.4
+ */
+public class InstalledIUGroup extends StructuredIUGroup {
+
+	private String profileId;
+
+	/**
+	 * Create a group that represents the installed IU's.
+	 * 
+	 * @param parent the parent composite for the group
+	 * @param queryProvider the query provider that defines the queries used
+	 * to retrieve elements in the viewer.
+	 * @param profileId the id of the profile whose content is being shown.
+	 * @param font The font to use for calculating pixel sizes.  This font is
+	 * not managed by the receiver.
+	 */
+	public InstalledIUGroup(final Composite parent, IQueryProvider queryProvider, Font font, String profileId) {
+		// This will evolve into a provisioning context
+		super(parent, queryProvider, font);
+		this.profileId = profileId;
+	}
+
+	protected StructuredViewer createViewer(Composite parent, IQueryProvider queryProvider) {
+		// Table of installed IU's
+		TableViewer installedIUViewer = new TableViewer(parent, SWT.MULTI | SWT.FULL_SELECTION | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
+
+		// Filters and sorters before establishing content, so we don't refresh unnecessarily.
+		installedIUViewer.setComparator(new IUComparator(IUComparator.IU_NAME));
+		installedIUViewer.setComparer(new ProvElementComparer());
+
+		// Now the content.
+		installedIUViewer.setContentProvider(new DeferredQueryContentProvider(queryProvider));
+		installedIUViewer.setInput(new ProfileElement(profileId));
+
+		// Now the visuals, columns before labels.
+		setTableColumns(installedIUViewer.getTable());
+		installedIUViewer.setLabelProvider(new IUDetailsLabelProvider());
+		return installedIUViewer;
+	}
+
+	private void setTableColumns(Table table) {
+		IUColumnConfig[] columns = ProvUI.getIUColumnConfig();
+		table.setHeaderVisible(true);
+
+		for (int i = 0; i < columns.length; i++) {
+			TableColumn tc = new TableColumn(table, SWT.NONE, i);
+			tc.setResizable(true);
+			tc.setText(columns[i].columnTitle);
+			tc.setWidth(convertHorizontalDLUsToPixels(columns[i].defaultColumnWidth));
+		}
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateAndInstallGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateAndInstallGroup.java
index de83126..a84b96c 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateAndInstallGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateAndInstallGroup.java
@@ -13,17 +13,16 @@ package org.eclipse.equinox.p2.ui.dialogs;
 import org.eclipse.core.runtime.Assert;
 import org.eclipse.equinox.internal.p2.ui.PropertyDialogAction;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
-import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.ui.*;
 import org.eclipse.equinox.p2.ui.actions.*;
-import org.eclipse.equinox.p2.ui.model.MetadataRepositories;
 import org.eclipse.equinox.p2.ui.model.ProfileElement;
 import org.eclipse.equinox.p2.ui.query.IQueryProvider;
-import org.eclipse.equinox.p2.ui.viewers.*;
+import org.eclipse.equinox.p2.ui.viewers.StructuredViewerProvisioningListener;
 import org.eclipse.jface.action.Action;
 import org.eclipse.jface.action.IAction;
 import org.eclipse.jface.dialogs.Dialog;
 import org.eclipse.jface.dialogs.IDialogConstants;
+import org.eclipse.jface.resource.JFaceResources;
 import org.eclipse.jface.viewers.*;
 import org.eclipse.jface.window.SameShellProvider;
 import org.eclipse.swt.SWT;
@@ -46,10 +45,9 @@ public class UpdateAndInstallGroup {
 	private static final String BUTTONACTION = "buttonAction"; //$NON-NLS-1$
 	private static final int DEFAULT_HEIGHT = 240;
 	private static final int DEFAULT_WIDTH = 300;
-	private static final int DEFAULT_COLUMN_WIDTH = 150;
 	TabFolder tabFolder;
-	TableViewer installedIUViewer;
-	TreeViewer availableIUViewer;
+	AvailableIUGroup availableIUGroup;
+	InstalledIUGroup installedIUGroup;
 	String profileId;
 	IRepositoryManipulator repositoryManipulator;
 	IProfileChooser profileChooser;
@@ -106,51 +104,31 @@ public class UpdateAndInstallGroup {
 		layout.marginHeight = 0;
 		composite.setLayout(layout);
 
-		// Table of available IU's
-		availableIUViewer = new TreeViewer(composite, SWT.MULTI | SWT.FULL_SELECTION | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
-		final IUDetailsLabelProvider labelProvider = new IUDetailsLabelProvider();
-		labelProvider.setToolTipProperty(IInstallableUnit.PROP_DESCRIPTION);
-
-		// Filters and sorters before establishing content, so we don't refresh unnecessarily.
-		availableIUViewer.setComparator(new IUComparator(IUComparator.IU_ID));
-		availableIUViewer.setComparer(new ProvElementComparer());
-
-		// Now the content.
-		availableIUViewer.setContentProvider(new AvailableIUContentProvider(queryProvider));
-		availableIUViewer.setInput(new MetadataRepositories());
-
-		// Now the presentation, columns before label provider.
-		setTreeColumns(availableIUViewer.getTree());
-		availableIUViewer.setLabelProvider(labelProvider);
-
-		GridData data = new GridData(GridData.FILL_BOTH);
-		data.grabExcessHorizontalSpace = true;
-		data.grabExcessVerticalSpace = true;
-		availableIUViewer.getControl().setLayoutData(data);
+		availableIUGroup = new AvailableIUGroup(composite, queryProvider, JFaceResources.getDialogFont(), null);
 
 		// Vertical buttons
 		Composite buttonBar = (Composite) createAvailableIUsVerticalButtonBar(composite);
-		data = new GridData(GridData.FILL_VERTICAL);
+		GridData data = new GridData(GridData.FILL_VERTICAL);
 		buttonBar.setLayoutData(data);
 
 		// Must be done after buttons are created so that the buttons can
 		// register and receive their selection notifications before us.
-		availableIUViewer.addSelectionChangedListener(new ISelectionChangedListener() {
+		availableIUGroup.getStructuredViewer().addSelectionChangedListener(new ISelectionChangedListener() {
 			public void selectionChanged(SelectionChangedEvent event) {
 				validateAvailableIUButtons(event.getSelection());
 			}
 		});
 
-		final StructuredViewerProvisioningListener listener = new StructuredViewerProvisioningListener(availableIUViewer, StructuredViewerProvisioningListener.PROV_EVENT_REPOSITORY, queryProvider);
+		final StructuredViewerProvisioningListener listener = new StructuredViewerProvisioningListener(availableIUGroup.getStructuredViewer(), StructuredViewerProvisioningListener.PROV_EVENT_REPOSITORY, queryProvider);
 		ProvUIActivator.getDefault().addProvisioningListener(listener);
 
-		availableIUViewer.getControl().addDisposeListener(new DisposeListener() {
+		availableIUGroup.getComposite().addDisposeListener(new DisposeListener() {
 			public void widgetDisposed(DisposeEvent e) {
 				ProvUIActivator.getDefault().removeProvisioningListener(listener);
 			}
 		});
 
-		validateAvailableIUButtons(availableIUViewer.getSelection());
+		validateAvailableIUButtons(availableIUGroup.getStructuredViewer().getSelection());
 		return composite;
 	}
 
@@ -170,16 +148,14 @@ public class UpdateAndInstallGroup {
 
 		// Add the buttons to the button bar.
 		availablePropButton = createVerticalButton(composite, ProvUIMessages.UpdateAndInstallGroup_Properties, false);
-		availablePropButton.setData(BUTTONACTION, new PropertyDialogAction(new SameShellProvider(parent.getShell()), availableIUViewer));
+		availablePropButton.setData(BUTTONACTION, new PropertyDialogAction(new SameShellProvider(parent.getShell()), availableIUGroup.getStructuredViewer()));
 		installButton = createVerticalButton(composite, ProvUIMessages.InstallIUCommandLabel, false);
-		installButton.setData(BUTTONACTION, new InstallAction(availableIUViewer, profileId, null, licenseManager, parent.getShell()));
+		installButton.setData(BUTTONACTION, new InstallAction(availableIUGroup.getStructuredViewer(), profileId, null, licenseManager, parent.getShell()));
 		if (repositoryManipulator != null) {
 			Button repoButton = createVerticalButton(composite, repositoryManipulator.getLabel(), false);
 			repoButton.setData(BUTTONACTION, new Action() {
 				public void runWithEvent(Event event) {
-					if (repositoryManipulator.manipulateRepositories(getTabFolder().getShell())) {
-						availableIUViewer.refresh();
-					}
+					repositoryManipulator.manipulateRepositories(getTabFolder().getShell());
 				}
 			});
 
@@ -207,46 +183,29 @@ public class UpdateAndInstallGroup {
 		composite.setLayout(layout);
 
 		// Table of installed IU's
-		installedIUViewer = new TableViewer(composite, SWT.MULTI | SWT.FULL_SELECTION | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
-
-		// Filters and sorters before establishing content, so we don't refresh unnecessarily.
-		installedIUViewer.setComparator(new IUComparator(IUComparator.IU_NAME));
-		installedIUViewer.setComparer(new ProvElementComparer());
-
-		// Now the content.
-		installedIUViewer.setContentProvider(new DeferredQueryContentProvider(queryProvider));
-		installedIUViewer.setInput(new ProfileElement(profileId));
-
-		// Now the visuals, columns before labels.
-		setTableColumns(installedIUViewer.getTable());
-		installedIUViewer.setLabelProvider(new IUDetailsLabelProvider());
-
-		GridData data = new GridData(GridData.FILL_BOTH);
-		data.grabExcessHorizontalSpace = true;
-		data.grabExcessVerticalSpace = true;
-		installedIUViewer.getControl().setLayoutData(data);
+		installedIUGroup = new InstalledIUGroup(composite, queryProvider, JFaceResources.getDialogFont(), profileId);
 
 		// Vertical buttons
 		Composite buttonBar = (Composite) createInstalledIUsVerticalButtonBar(composite, queryProvider);
-		data = new GridData(GridData.FILL_VERTICAL);
+		GridData data = new GridData(GridData.FILL_VERTICAL);
 		buttonBar.setLayoutData(data);
 
 		// Must be done after buttons are created so that the buttons can
 		// register and receive their selection notifications before us.
-		installedIUViewer.addSelectionChangedListener(new ISelectionChangedListener() {
+		installedIUGroup.getStructuredViewer().addSelectionChangedListener(new ISelectionChangedListener() {
 			public void selectionChanged(SelectionChangedEvent event) {
 				validateInstalledIUButtons(event.getSelection());
 			}
 		});
 
-		final StructuredViewerProvisioningListener listener = new StructuredViewerProvisioningListener(installedIUViewer, StructuredViewerProvisioningListener.PROV_EVENT_IU | StructuredViewerProvisioningListener.PROV_EVENT_PROFILE, queryProvider);
+		final StructuredViewerProvisioningListener listener = new StructuredViewerProvisioningListener(installedIUGroup.getStructuredViewer(), StructuredViewerProvisioningListener.PROV_EVENT_IU | StructuredViewerProvisioningListener.PROV_EVENT_PROFILE, queryProvider);
 		ProvUIActivator.getDefault().addProvisioningListener(listener);
-		installedIUViewer.getControl().addDisposeListener(new DisposeListener() {
+		installedIUGroup.getComposite().addDisposeListener(new DisposeListener() {
 			public void widgetDisposed(DisposeEvent e) {
 				ProvUIActivator.getDefault().removeProvisioningListener(listener);
 			}
 		});
-		validateInstalledIUButtons(installedIUViewer.getSelection());
+		validateInstalledIUButtons(installedIUGroup.getStructuredViewer().getSelection());
 		return composite;
 	}
 
@@ -266,11 +225,11 @@ public class UpdateAndInstallGroup {
 
 		// Add the buttons to the button bar.
 		installedPropButton = createVerticalButton(composite, ProvUIMessages.UpdateAndInstallGroup_Properties, false);
-		installedPropButton.setData(BUTTONACTION, new PropertyDialogAction(new SameShellProvider(parent.getShell()), installedIUViewer));
+		installedPropButton.setData(BUTTONACTION, new PropertyDialogAction(new SameShellProvider(parent.getShell()), installedIUGroup.getStructuredViewer()));
 		uninstallButton = createVerticalButton(composite, ProvUIMessages.UninstallIUCommandLabel, false);
-		uninstallButton.setData(BUTTONACTION, new UninstallAction(installedIUViewer, profileId, null, parent.getShell()));
+		uninstallButton.setData(BUTTONACTION, new UninstallAction(installedIUGroup.getStructuredViewer(), profileId, null, parent.getShell()));
 		updateButton = createVerticalButton(composite, ProvUIMessages.UpdateIUCommandLabel, false);
-		updateButton.setData(BUTTONACTION, new UpdateAction(installedIUViewer, profileId, null, licenseManager, queryProvider, parent.getShell()));
+		updateButton.setData(BUTTONACTION, new UpdateAction(installedIUGroup.getStructuredViewer(), profileId, null, licenseManager, queryProvider, parent.getShell()));
 		if (profileChooser != null) {
 			Button profileButton = createVerticalButton(composite, profileChooser.getLabel(), false);
 			profileButton.setData(BUTTONACTION, new Action() {
@@ -278,7 +237,7 @@ public class UpdateAndInstallGroup {
 					String chosenProfileId = profileChooser.getProfileId(tabFolder.getShell());
 					if (chosenProfileId != null) {
 						profileId = chosenProfileId;
-						installedIUViewer.setInput(new ProfileElement(profileId));
+						installedIUGroup.getStructuredViewer().setInput(new ProfileElement(profileId));
 					}
 				}
 			});
@@ -365,35 +324,11 @@ public class UpdateAndInstallGroup {
 		return Dialog.convertVerticalDLUsToPixels(fm, dlus);
 	}
 
-	private void setTableColumns(Table table) {
-		IUColumnConfig[] columns = ProvUI.getIUColumnConfig();
-		table.setHeaderVisible(true);
-
-		for (int i = 0; i < columns.length; i++) {
-			TableColumn tc = new TableColumn(table, SWT.NONE, i);
-			tc.setResizable(true);
-			tc.setText(columns[i].columnTitle);
-			tc.setWidth(convertHorizontalDLUsToPixels(DEFAULT_COLUMN_WIDTH));
-		}
-	}
-
-	private void setTreeColumns(Tree tree) {
-		IUColumnConfig[] columns = ProvUI.getIUColumnConfig();
-		tree.setHeaderVisible(true);
-
-		for (int i = 0; i < columns.length; i++) {
-			TreeColumn tc = new TreeColumn(tree, SWT.NONE, i);
-			tc.setResizable(true);
-			tc.setText(columns[i].columnTitle);
-			tc.setWidth(convertHorizontalDLUsToPixels(DEFAULT_COLUMN_WIDTH));
-		}
-	}
-
 	public StructuredViewer getAvailableIUViewer() {
-		return availableIUViewer;
+		return availableIUGroup.getStructuredViewer();
 	}
 
 	public StructuredViewer getInstalledIUViewer() {
-		return installedIUViewer;
+		return installedIUGroup.getStructuredViewer();
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/MetadataRepositories.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/MetadataRepositories.java
index 67ee71f..d516275 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/MetadataRepositories.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/model/MetadataRepositories.java
@@ -10,6 +10,7 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.ui.model;
 
+import java.net.URL;
 import org.eclipse.equinox.p2.ui.query.IQueryProvider;
 import org.eclipse.equinox.p2.ui.query.QueriedElement;
 
@@ -24,8 +25,33 @@ import org.eclipse.equinox.p2.ui.query.QueriedElement;
  */
 public class MetadataRepositories extends QueriedElement {
 
+	private URL[] metadataRepositories = null;
+
+	public MetadataRepositories() {
+		super();
+	}
+
+	public MetadataRepositories(URL[] metadataRepositories) {
+		this.metadataRepositories = metadataRepositories;
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * @see org.eclipse.equinox.p2.ui.query.QueriedElement#getQueryType()
+	 */
 	protected int getQueryType() {
 		return IQueryProvider.METADATA_REPOS;
 	}
 
+	/**
+	 * Return the array of URLs for the metadata repositories that
+	 * this element represents.  A value of <code>null</code> means
+	 * all repositories are represented.  
+	 * 
+	 * @return the array of repositories, or <code>null</code>.
+	 */
+	public URL[] getMetadataRepositories() {
+		return metadataRepositories;
+	}
+
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/QueryableMetadataRepositoryManager.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/QueryableMetadataRepositoryManager.java
index deef129..2fbeba7 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/QueryableMetadataRepositoryManager.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/query/QueryableMetadataRepositoryManager.java
@@ -23,22 +23,38 @@ import org.eclipse.equinox.p2.ui.model.MetadataRepositoryElement;
 
 /**
  * An object that adds queryable support to a metadata repository 
- * manager.  The object being queried is the repository URL, not the 
+ * manager.  It can be constructed to iterate over a specific array
+ * or URL's.  Otherwise, it will iterate over all known repositories.
+ * The object being queried is the repository URL, not the 
  * repository instance itself.  Callers should load the repository
  * if necessary to complete the query.
  */
 public class QueryableMetadataRepositoryManager implements IQueryable {
+	private URL[] metadataRepositories;
+
+	public QueryableMetadataRepositoryManager() {
+		super();
+	}
+
+	public QueryableMetadataRepositoryManager(URL[] metadataRepositories) {
+		this.metadataRepositories = metadataRepositories;
+	}
 
 	public Collector query(Query query, Collector result, IProgressMonitor monitor) {
-		IMetadataRepositoryManager manager = (IMetadataRepositoryManager) ServiceHelper.getService(ProvUIActivator.getContext(), IMetadataRepositoryManager.class.getName());
-		if (manager == null) {
-			ProvUI.reportStatus(new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, ProvUIMessages.ProvisioningUtil_NoRepositoryManager));
-			return result;
+		URL[] repoURLs;
+		if (metadataRepositories != null) {
+			repoURLs = metadataRepositories;
+		} else {
+			IMetadataRepositoryManager manager = (IMetadataRepositoryManager) ServiceHelper.getService(ProvUIActivator.getContext(), IMetadataRepositoryManager.class.getName());
+			if (manager == null) {
+				ProvUI.reportStatus(new Status(IStatus.ERROR, ProvUIActivator.PLUGIN_ID, ProvUIMessages.ProvisioningUtil_NoRepositoryManager));
+				return result;
+			}
+			int flags = IArtifactRepositoryManager.REPOSITORIES_ALL;
+			if (query instanceof FilteredRepositoryQuery)
+				flags = ((FilteredRepositoryQuery) query).getFlags();
+			repoURLs = manager.getKnownRepositories(flags);
 		}
-		int flags = IArtifactRepositoryManager.REPOSITORIES_ALL;
-		if (query instanceof FilteredRepositoryQuery)
-			flags = ((FilteredRepositoryQuery) query).getFlags();
-		URL[] repoURLs = manager.getKnownRepositories(flags);
 		SubMonitor sub = SubMonitor.convert(monitor, ProvUIMessages.QueryableMetadataRepositoryManager_RepositoryQueryProgress, repoURLs.length * 2);
 		for (int i = 0; i < repoURLs.length; i++) {
 			if (query.isMatch(repoURLs[i]))
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/AvailableIUContentProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/AvailableIUContentProvider.java
deleted file mode 100644
index 7b1c7b7..0000000
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/AvailableIUContentProvider.java
+++ /dev/null
@@ -1,197 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-
-package org.eclipse.equinox.p2.ui.viewers;
-
-import java.util.ArrayList;
-import java.util.HashSet;
-import org.eclipse.core.runtime.*;
-import org.eclipse.core.runtime.jobs.*;
-import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
-import org.eclipse.equinox.internal.p2.ui.model.ProvElement;
-import org.eclipse.equinox.internal.p2.ui.model.RemoteQueriedElement;
-import org.eclipse.equinox.p2.ui.ProvUIImages;
-import org.eclipse.equinox.p2.ui.query.IQueryProvider;
-import org.eclipse.jface.viewers.AbstractTreeViewer;
-import org.eclipse.jface.viewers.Viewer;
-import org.eclipse.osgi.util.NLS;
-import org.eclipse.swt.events.DisposeEvent;
-import org.eclipse.swt.events.DisposeListener;
-import org.eclipse.ui.model.IWorkbenchAdapter;
-import org.eclipse.ui.progress.IElementCollector;
-
-/**
- * Content provider for available software in any number of repos.
- * 
- * @since 3.4
- * 
- */
-public class AvailableIUContentProvider extends RepositoryContentProvider {
-
-	class RepositoryPlaceholder extends ProvElement {
-		String identifier;
-		boolean failed = false;
-
-		RepositoryPlaceholder(String identifier) {
-			this.identifier = identifier;
-		}
-
-		/* (non-Javadoc)
-		 * @see org.eclipse.ui.model.IWorkbenchAdapter#getChildren(java.lang.Object)
-		 */
-		public Object[] getChildren(Object o) {
-			return new Object[0];
-		}
-
-		/*
-		 * 
-		 */
-		public String getImageId(Object o) {
-			return ProvUIImages.IMG_METADATA_REPOSITORY;
-		}
-
-		/* (non-Javadoc)
-		 * @see org.eclipse.ui.model.IWorkbenchAdapter#getLabel(java.lang.Object)
-		 */
-		public String getLabel(Object o) {
-			if (failed)
-				return NLS.bind(ProvUIMessages.AvailableIUContentProvider_FailureRetrievingContents, identifier);
-			return NLS.bind(ProvUIMessages.AvailableIUContentProvider_PlaceholderLabel, identifier);
-		}
-
-		/* (non-Javadoc)
-		 * @see org.eclipse.ui.model.IWorkbenchAdapter#getParent(java.lang.Object)
-		 */
-		public Object getParent(Object o) {
-			return null;
-		}
-
-		/* (non-Javadoc)
-		 * @see org.eclipse.core.runtime.IAdaptable#getAdapter(java.lang.Class)
-		 */
-		public Object getAdapter(Class adapter) {
-			if (adapter == IWorkbenchAdapter.class) {
-				return this;
-			}
-			return null;
-		}
-	}
-
-	AbstractTreeViewer treeViewer;
-	HashSet allChildren = new HashSet();
-	ArrayList runningJobs = new ArrayList();
-
-	public AvailableIUContentProvider(IQueryProvider queryProvider) {
-		super(queryProvider);
-	}
-
-	public void inputChanged(Viewer v, Object oldInput, Object newInput) {
-		if (v instanceof AbstractTreeViewer) {
-			treeViewer = (AbstractTreeViewer) v;
-			treeViewer.getControl().addDisposeListener(new DisposeListener() {
-				public void widgetDisposed(DisposeEvent e) {
-					cancelJobs();
-				}
-			});
-		}
-		allChildren = new HashSet();
-		cancelJobs();
-		super.inputChanged(v, oldInput, newInput);
-	}
-
-	public Object[] getElements(Object input) {
-		if (allChildren.isEmpty()) {
-			// Overridden to get the children of each element as the elements.
-			Object[] elements = super.getElements(input);
-			RepositoryPlaceholder placeholder;
-			for (int i = 0; i < elements.length; i++) {
-				if (elements[i] instanceof ProvElement)
-					placeholder = new RepositoryPlaceholder(((ProvElement) elements[i]).getLabel(elements[i]));
-				else
-					placeholder = new RepositoryPlaceholder(elements[i].toString());
-				startFetchingElements(elements[i], placeholder);
-				allChildren.add(placeholder);
-			}
-		}
-		return allChildren.toArray();
-	}
-
-	private void startFetchingElements(final Object element, final RepositoryPlaceholder placeholder) {
-		final Job job = new Job(NLS.bind(ProvUIMessages.AvailableIUContentProvider_JobName, placeholder.identifier)) {
-			/*
-			 * (non-Javadoc)
-			 * 
-			 * @see org.eclipse.core.jobs.Job#run(org.eclipse.core.runtime.IProgressMonitor)
-			 */
-			public IStatus run(IProgressMonitor monitor) {
-				if (element instanceof ProvElement) {
-					if (element instanceof RemoteQueriedElement) {
-						IElementCollector collector = new IElementCollector() {
-							boolean added = false;
-
-							public void add(Object o, IProgressMonitor pm) {
-								allChildren.add(o);
-								added = true;
-							}
-
-							public void add(Object[] objs, IProgressMonitor pm) {
-								for (int i = 0; i < objs.length; i++) {
-									add(objs[i], pm);
-								}
-							}
-
-							public void done() {
-								if (added)
-									allChildren.remove(placeholder);
-								else
-									placeholder.failed = true;
-							}
-						};
-						((RemoteQueriedElement) element).fetchDeferredChildren(element, collector, SubMonitor.convert(monitor));
-						collector.done();
-					} else {
-						Object[] children = ((ProvElement) element).getChildren(element);
-						for (int i = 0; i < children.length; i++)
-							allChildren.add(children[i]);
-						if (children.length == 0)
-							placeholder.failed = true;
-						else
-							allChildren.remove(placeholder);
-					}
-				}
-				if (!treeViewer.getControl().isDisposed()) {
-					treeViewer.getControl().getDisplay().asyncExec(new Runnable() {
-						public void run() {
-							treeViewer.refresh();
-						}
-					});
-				}
-				return Status.OK_STATUS;
-			}
-		};
-		job.setPriority(Job.LONG);
-		job.setSystem(true);
-		runningJobs.add(job);
-		job.addJobChangeListener(new JobChangeAdapter() {
-			public void done(IJobChangeEvent event) {
-				runningJobs.remove(job);
-			}
-		});
-		job.schedule();
-	}
-
-	void cancelJobs() {
-		// copy to array since we delete as we go
-		Job[] jobs = (Job[]) runningJobs.toArray(new Job[runningJobs.size()]);
-		for (int i = 0; i < jobs.length; i++)
-			jobs[i].cancel();
-	}
-}
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUColumnConfig.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUColumnConfig.java
index bf4d8cd..f022ad5 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUColumnConfig.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUColumnConfig.java
@@ -24,9 +24,11 @@ public class IUColumnConfig {
 
 	public String columnTitle;
 	public int columnField;
+	public int defaultColumnWidth;
 
-	public IUColumnConfig(String title, int columnField) {
+	public IUColumnConfig(String title, int columnField, int defaultColumnWidth) {
 		this.columnTitle = title;
 		this.columnField = columnField;
+		this.defaultColumnWidth = defaultColumnWidth;
 	}
 }
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUDetailsLabelProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUDetailsLabelProvider.java
deleted file mode 100644
index 9549453..0000000
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/IUDetailsLabelProvider.java
+++ /dev/null
@@ -1,153 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007, 2008 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-
-package org.eclipse.equinox.p2.ui.viewers;
-
-import java.text.NumberFormat;
-import org.eclipse.core.runtime.*;
-import org.eclipse.core.runtime.jobs.Job;
-import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
-import org.eclipse.equinox.internal.p2.ui.model.ProvElement;
-import org.eclipse.equinox.p2.metadata.IInstallableUnit;
-import org.eclipse.equinox.p2.ui.ProvUI;
-import org.eclipse.equinox.p2.ui.ProvUIImages;
-import org.eclipse.equinox.p2.ui.model.IUElement;
-import org.eclipse.jface.viewers.*;
-import org.eclipse.osgi.util.NLS;
-import org.eclipse.swt.graphics.Image;
-import org.eclipse.swt.widgets.Shell;
-
-/**
- * Label provider for showing IU's in a table.  Clients can configure
- * what is shown in each column.
- * 
- * @since 3.4
- */
-public class IUDetailsLabelProvider extends ColumnLabelProvider implements ITableLabelProvider {
-	final static int PRIMARY_COLUMN = 0;
-	final static String BLANK = ""; //$NON-NLS-1$
-	private String toolTipProperty = null;
-
-	private IUColumnConfig[] columnConfig = ProvUI.getIUColumnConfig();
-	Shell shell;
-
-	public IUDetailsLabelProvider() {
-		// use default column config
-	}
-
-	public IUDetailsLabelProvider(IUColumnConfig[] columnConfig, Shell shell) {
-		Assert.isLegal(columnConfig.length > 0);
-		this.columnConfig = columnConfig;
-		this.shell = shell;
-	}
-
-	public String getText(Object obj) {
-		return getColumnText(obj, 0);
-	}
-
-	public Image getImage(Object obj) {
-		return getColumnImage(obj, columnConfig[0].columnField);
-	}
-
-	public String getColumnText(Object element, int columnIndex) {
-		int columnContent = IUColumnConfig.COLUMN_ID;
-		if (columnIndex < columnConfig.length) {
-			columnContent = columnConfig[columnIndex].columnField;
-		}
-
-		IInstallableUnit iu = (IInstallableUnit) ProvUI.getAdapter(element, IInstallableUnit.class);
-		if (iu == null) {
-			if (columnIndex == 0) {
-				if (element instanceof ProvElement)
-					return ((ProvElement) element).getLabel(element);
-				return element.toString();
-			}
-			return BLANK;
-		}
-
-		switch (columnContent) {
-			case IUColumnConfig.COLUMN_ID :
-				return iu.getId();
-			case IUColumnConfig.COLUMN_NAME :
-				String name = iu.getProperty(IInstallableUnit.PROP_NAME);
-				if (name != null)
-					return name;
-				return BLANK;
-			case IUColumnConfig.COLUMN_VERSION :
-				if (element instanceof IUElement && ((IUElement) element).shouldShowVersion())
-					return iu.getVersion().toString();
-				return BLANK;
-
-			case IUColumnConfig.COLUMN_SIZE :
-				if (element instanceof IUElement && ((IUElement) element).shouldShowSize())
-					return getIUSize((IUElement) element);
-				return BLANK;
-		}
-		return BLANK;
-	}
-
-	public Image getColumnImage(Object element, int index) {
-		if (index == PRIMARY_COLUMN) {
-			if (element instanceof ProvElement)
-				return ((ProvElement) element).getImage(element);
-			if (ProvUI.getAdapter(element, IInstallableUnit.class) != null)
-				return ProvUIImages.getImage(ProvUIImages.IMG_IU);
-		}
-		return null;
-	}
-
-	private String getIUSize(final IUElement element) {
-		long size = element.getSize();
-		if (size != IUElement.SIZE_UNKNOWN)
-			return getFormattedSize(size);
-		Job resolveJob = new Job(element.getIU().getId()) {
-
-			protected IStatus run(IProgressMonitor monitor) {
-				element.computeSize();
-
-				if (shell == null || shell.isDisposed())
-					return Status.OK_STATUS;
-				shell.getDisplay().asyncExec(new Runnable() {
-
-					public void run() {
-						fireLabelProviderChanged(new LabelProviderChangedEvent(IUDetailsLabelProvider.this, element));
-					}
-				});
-
-				return Status.OK_STATUS;
-			}
-		};
-		resolveJob.setSystem(true);
-		resolveJob.schedule();
-		return ProvUIMessages.IUDetailsLabelProvider_ComputingSize;
-	}
-
-	private String getFormattedSize(long size) {
-		if (size == IUElement.SIZE_UNKNOWN)
-			return ProvUIMessages.IUDetailsLabelProvider_Unknown;
-		if (size > 1000L) {
-			long kb = size / 1000L;
-			return NLS.bind(ProvUIMessages.IUDetailsLabelProvider_KB, NumberFormat.getInstance().format(new Long(kb)));
-		}
-		return NLS.bind(ProvUIMessages.IUDetailsLabelProvider_Bytes, NumberFormat.getInstance().format(new Long(size)));
-	}
-
-	public void setToolTipProperty(String propertyName) {
-		toolTipProperty = propertyName;
-	}
-
-	public String getToolTipText(Object element) {
-		IInstallableUnit iu = (IInstallableUnit) ProvUI.getAdapter(element, IInstallableUnit.class);
-		if (iu == null || toolTipProperty == null)
-			return null;
-		return iu.getProperty(toolTipProperty);
-	}
-}
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/StaticContentProvider.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/StaticContentProvider.java
deleted file mode 100644
index d0688f3..0000000
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/viewers/StaticContentProvider.java
+++ /dev/null
@@ -1,36 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2007 IBM Corporation and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     IBM Corporation - initial API and implementation
- *******************************************************************************/
-
-package org.eclipse.equinox.p2.ui.viewers;
-
-import org.eclipse.jface.viewers.IStructuredContentProvider;
-import org.eclipse.jface.viewers.Viewer;
-
-public final class StaticContentProvider implements IStructuredContentProvider {
-	private Object[] elements;
-
-	public StaticContentProvider(Object[] elements) {
-		this.elements = elements;
-	}
-
-	public Object[] getElements(Object inputElement) {
-		return elements;
-	}
-
-	public void dispose() {
-		// nothing to dispose
-	}
-
-	public void inputChanged(Viewer viewer, Object oldInput, Object newInput) {
-		if (newInput instanceof Object[])
-			this.elements = (Object[]) newInput;
-	}
-}
\ No newline at end of file
commit 1d746f973cdf3bb5b5f1720fffd01bade09f7749
Author: Susan Franklin <sfranklin>
Date:   Thu Jan 24 18:29:20 2008 +0000

    Bug 216026 - [prov] [ui] Available IUs list should be structured as a self contained component

1	1	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
30	0	bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/p2/ui/sdk/ProvSDKUI.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
index d52ee82..4e02bdd 100644
--- a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/internal/p2/ui/sdk/ProvSDKUIActivator.java
@@ -24,7 +24,7 @@ import org.eclipse.ui.statushandlers.StatusManager;
 import org.osgi.framework.BundleContext;
 
 /**
- * Activator class for the admin UI.
+ * Activator class for the p2 UI.
  */
 public class ProvSDKUIActivator extends AbstractUIPlugin {
 
diff --git a/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/p2/ui/sdk/ProvSDKUI.java b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/p2/ui/sdk/ProvSDKUI.java
new file mode 100644
index 0000000..34f46a8
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui.sdk/src/org/eclipse/equinox/p2/ui/sdk/ProvSDKUI.java
@@ -0,0 +1,30 @@
+/*******************************************************************************
+ * Copyright (c) 2008 IBM Corporation and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     IBM Corporation - initial API and implementation
+ *******************************************************************************/
+package org.eclipse.equinox.p2.ui.sdk;
+
+import org.eclipse.equinox.internal.p2.ui.sdk.ProvSDKUIActivator;
+import org.eclipse.equinox.p2.ui.LicenseManager;
+import org.eclipse.equinox.p2.ui.query.IQueryProvider;
+
+/**
+ * ProvSDKUI provides API for accessing the configurable p2 UI components 
+ * specified when creating UI classes.
+ */
+public class ProvSDKUI {
+
+	public static IQueryProvider getQueryProvider() {
+		return ProvSDKUIActivator.getDefault().getQueryProvider();
+	}
+
+	public static LicenseManager getLicenseManager() {
+		return ProvSDKUIActivator.getDefault().getLicenseManager();
+	}
+}
commit 8053d5d787e43d8fe9e7cd4e95baf458ff4c77a2
Author: Susan Franklin <sfranklin>
Date:   Tue Jan 29 19:50:38 2008 +0000

    Bug 216026 - [prov] [ui] Available IUs list should be structured as a self contained component
    
    Incorporate ProvisioningContext into API instead of URL []

2	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/InstallWizardPage.java
8	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UninstallWizardPage.java
1	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
2	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
2	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableUpdateElement.java
2	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/InstallAction.java
2	3	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UninstallAction.java
8	9	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AvailableIUGroup.java
2	1	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateAndInstallGroup.java
2	2	bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/InstallWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/InstallWizardPage.java
index 43f4d9c..c304de4 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/InstallWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/InstallWizardPage.java
@@ -36,7 +36,7 @@ public class InstallWizardPage extends UpdateOrInstallWizardPage {
 		try {
 			ProfileChangeRequest changeRequest = ProfileChangeRequest.createByProfileId(getProfileId());
 			changeRequest.addInstallableUnits(new IInstallableUnit[] {iu});
-			ProvisioningPlan plan = ProvisioningUtil.getProvisioningPlan(changeRequest, sub.newChild(50));
+			ProvisioningPlan plan = ProvisioningUtil.getProvisioningPlan(changeRequest, getProvisioningContext(), sub.newChild(50));
 			Sizing info = ProvisioningUtil.getSizeInfo(plan, getProfileId(), sub.newChild(50));
 			if (info == null)
 				size = IUElement.SIZE_UNKNOWN;
@@ -60,8 +60,7 @@ public class InstallWizardPage extends UpdateOrInstallWizardPage {
 			for (int i = 0; i < selected.length; i++) {
 				changeRequest.setInstallableUnitProfileProperty(selected[i], IInstallableUnit.PROP_PROFILE_ROOT_IU, Boolean.toString(true));
 			}
-
-			ProvisioningPlan plan = ProvisioningUtil.getProvisioningPlan(changeRequest, monitor);
+			ProvisioningPlan plan = ProvisioningUtil.getProvisioningPlan(changeRequest, getProvisioningContext(), monitor);
 			IStatus status = plan.getStatus();
 			if (status.isOK())
 				return new InstallOperation(getOperationLabel(), getProfile().getProfileId(), plan, selected);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java
index c398410..bf94ca8 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/ProfileModificationWizardPage.java
@@ -19,6 +19,7 @@ import org.eclipse.equinox.internal.p2.ui.model.AvailableIUElement;
 import org.eclipse.equinox.internal.p2.ui.viewers.IUDetailsLabelProvider;
 import org.eclipse.equinox.internal.p2.ui.viewers.StaticContentProvider;
 import org.eclipse.equinox.p2.core.ProvisionException;
+import org.eclipse.equinox.p2.director.ProvisioningContext;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.ui.ProvUI;
@@ -26,7 +27,7 @@ import org.eclipse.equinox.p2.ui.ProvisioningOperationRunner;
 import org.eclipse.equinox.p2.ui.model.IUElement;
 import org.eclipse.equinox.p2.ui.operations.ProfileModificationOperation;
 import org.eclipse.equinox.p2.ui.operations.ProvisioningUtil;
-import org.eclipse.equinox.p2.ui.viewers.*;
+import org.eclipse.equinox.p2.ui.viewers.IUColumnConfig;
 import org.eclipse.jface.dialogs.Dialog;
 import org.eclipse.jface.operation.IRunnableWithProgress;
 import org.eclipse.jface.viewers.*;
@@ -176,4 +177,10 @@ public abstract class ProfileModificationWizardPage extends WizardPage {
 		// what they want before this page opens.
 		listViewer.setAllChecked(true);
 	}
+
+	// We currently create an empty provisioning context, but
+	// in the future we could consider letting clients supply this.
+	protected ProvisioningContext getProvisioningContext() {
+		return new ProvisioningContext();
+	}
 }
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UninstallWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UninstallWizardPage.java
index acbac64..dec74cd 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UninstallWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UninstallWizardPage.java
@@ -33,7 +33,7 @@ public class UninstallWizardPage extends ProfileModificationWizardPage {
 		try {
 			ProfileChangeRequest request = ProfileChangeRequest.createByProfileId(getProfileId());
 			request.removeInstallableUnits(elementsToIUs(selectedElements));
-			ProvisioningPlan plan = ProvisioningUtil.getProvisioningPlan(request, monitor);
+			ProvisioningPlan plan = ProvisioningUtil.getProvisioningPlan(request, getProvisioningContext(), monitor);
 			IStatus status = plan.getStatus();
 			if (status.isOK())
 				return new ProfileModificationOperation(ProvUIMessages.UninstallIUOperationLabel, getProfileId(), plan);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
index 4716564..00b8cb7 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/dialogs/UpdateWizardPage.java
@@ -82,7 +82,7 @@ public class UpdateWizardPage extends UpdateOrInstallWizardPage {
 			ProfileChangeRequest request = ProfileChangeRequest.createByProfileId(getProfileId());
 			request.removeInstallableUnits(getIUsToReplace(selectedElements));
 			request.addInstallableUnits(elementsToIUs(selectedElements));
-			ProvisioningPlan plan = ProvisioningUtil.getProvisioningPlan(request, monitor);
+			ProvisioningPlan plan = ProvisioningUtil.getProvisioningPlan(request, getProvisioningContext(), monitor);
 			IStatus status = plan.getStatus();
 			if (status.isOK())
 				return new ProfileModificationOperation(getOperationLabel(), getProfile().getProfileId(), plan);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
index db8fe9b..7ad5fe6 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableIUElement.java
@@ -12,8 +12,7 @@ package org.eclipse.equinox.internal.p2.ui.model;
 
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.p2.core.ProvisionException;
-import org.eclipse.equinox.p2.director.ProfileChangeRequest;
-import org.eclipse.equinox.p2.director.ProvisioningPlan;
+import org.eclipse.equinox.p2.director.*;
 import org.eclipse.equinox.p2.engine.Profile;
 import org.eclipse.equinox.p2.engine.phases.Sizing;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
@@ -93,7 +92,7 @@ public class AvailableIUElement extends ProvElement implements IUElement {
 	protected ProvisioningPlan getSizingPlan() throws ProvisionException {
 		ProfileChangeRequest request = ProfileChangeRequest.createByProfileId(profileID);
 		request.addInstallableUnits(new IInstallableUnit[] {getIU()});
-		return ProvisioningUtil.getProvisioningPlan(request, null);
+		return ProvisioningUtil.getProvisioningPlan(request, new ProvisioningContext(), null);
 	}
 
 	public IInstallableUnit getIU() {
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableUpdateElement.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableUpdateElement.java
index 1c39078..d0b6ca3 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableUpdateElement.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/internal/p2/ui/model/AvailableUpdateElement.java
@@ -11,8 +11,7 @@
 package org.eclipse.equinox.internal.p2.ui.model;
 
 import org.eclipse.equinox.p2.core.ProvisionException;
-import org.eclipse.equinox.p2.director.ProfileChangeRequest;
-import org.eclipse.equinox.p2.director.ProvisioningPlan;
+import org.eclipse.equinox.p2.director.*;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.ui.operations.ProvisioningUtil;
 
@@ -40,6 +39,6 @@ public class AvailableUpdateElement extends AvailableIUElement {
 		ProfileChangeRequest request = ProfileChangeRequest.createByProfileId(profileID);
 		request.removeInstallableUnits(new IInstallableUnit[] {iuToBeUpdated});
 		request.addInstallableUnits(new IInstallableUnit[] {getIU()});
-		return ProvisioningUtil.getProvisioningPlan(request, null);
+		return ProvisioningUtil.getProvisioningPlan(request, new ProvisioningContext(), null);
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/InstallAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/InstallAction.java
index 9f045e6..7e5388e 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/InstallAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/InstallAction.java
@@ -16,8 +16,7 @@ import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.actions.ProfileModificationAction;
 import org.eclipse.equinox.p2.core.ProvisionException;
-import org.eclipse.equinox.p2.director.ProfileChangeRequest;
-import org.eclipse.equinox.p2.director.ProvisioningPlan;
+import org.eclipse.equinox.p2.director.*;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.ui.*;
 import org.eclipse.equinox.p2.ui.dialogs.InstallWizard;
@@ -71,7 +70,7 @@ public class InstallAction extends ProfileModificationAction {
 		try {
 			ProfileChangeRequest request = ProfileChangeRequest.createByProfileId(targetProfileId);
 			request.addInstallableUnits(ius);
-			ProvisioningPlan plan = ProvisioningUtil.getProvisioningPlan(request, monitor);
+			ProvisioningPlan plan = ProvisioningUtil.getProvisioningPlan(request, new ProvisioningContext(), monitor);
 			return plan.getStatus();
 		} catch (ProvisionException e) {
 			return ProvUI.handleException(e, null);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UninstallAction.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UninstallAction.java
index f238c8b..b7aa9c3 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UninstallAction.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/actions/UninstallAction.java
@@ -16,8 +16,7 @@ import org.eclipse.core.runtime.IStatus;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.actions.ProfileModificationAction;
 import org.eclipse.equinox.p2.core.ProvisionException;
-import org.eclipse.equinox.p2.director.ProfileChangeRequest;
-import org.eclipse.equinox.p2.director.ProvisioningPlan;
+import org.eclipse.equinox.p2.director.*;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.ui.IProfileChooser;
 import org.eclipse.equinox.p2.ui.ProvUI;
@@ -80,7 +79,7 @@ public class UninstallAction extends ProfileModificationAction {
 		try {
 			ProfileChangeRequest request = ProfileChangeRequest.createByProfileId(targetProfileId);
 			request.removeInstallableUnits(ius);
-			ProvisioningPlan plan = ProvisioningUtil.getProvisioningPlan(request, monitor);
+			ProvisioningPlan plan = ProvisioningUtil.getProvisioningPlan(request, new ProvisioningContext(), monitor);
 			return plan.getStatus();
 		} catch (ProvisionException e) {
 			return ProvUI.handleException(e, null);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AvailableIUGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AvailableIUGroup.java
index 1478d33..587f42f 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AvailableIUGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/AvailableIUGroup.java
@@ -10,11 +10,11 @@
  *******************************************************************************/
 package org.eclipse.equinox.p2.ui.dialogs;
 
-import java.net.URL;
 import org.eclipse.equinox.internal.p2.ui.ProvUIActivator;
 import org.eclipse.equinox.internal.p2.ui.dialogs.StructuredIUGroup;
 import org.eclipse.equinox.internal.p2.ui.viewers.AvailableIUContentProvider;
 import org.eclipse.equinox.internal.p2.ui.viewers.IUDetailsLabelProvider;
+import org.eclipse.equinox.p2.director.ProvisioningContext;
 import org.eclipse.equinox.p2.metadata.IInstallableUnit;
 import org.eclipse.equinox.p2.ui.ProvUI;
 import org.eclipse.equinox.p2.ui.model.MetadataRepositories;
@@ -36,7 +36,7 @@ import org.eclipse.swt.widgets.*;
  */
 public class AvailableIUGroup extends StructuredIUGroup {
 
-	URL[] metadataRepositories;
+	ProvisioningContext context;
 
 	/**
 	 * Create a group that represents the available IU's.
@@ -46,14 +46,13 @@ public class AvailableIUGroup extends StructuredIUGroup {
 	 * to retrieve elements in the viewer.
 	 * @param font The font to use for calculating pixel sizes.  This font is
 	 * not managed by the receiver.
-	 * @param metadataRepositories an array of URLs defining the metadata repositories that
-	 * should be used for showing content.  A value of <code>null</code> indicates that 
-	 * all metadata repositories should be queried.
+	 * @param context the ProvisioningContext describing the context for provisioning,
+	 * including information about which repositories should be used.
 	 */
-	public AvailableIUGroup(final Composite parent, IQueryProvider queryProvider, Font font, URL[] metadataRepositories) {
+	public AvailableIUGroup(final Composite parent, IQueryProvider queryProvider, Font font, ProvisioningContext context) {
 		// This will evolve into a provisioning context
 		super(parent, queryProvider, font);
-		this.metadataRepositories = metadataRepositories;
+		this.context = context;
 	}
 
 	protected StructuredViewer createViewer(Composite parent, IQueryProvider queryProvider) {
@@ -69,7 +68,7 @@ public class AvailableIUGroup extends StructuredIUGroup {
 
 		// Now the content.
 		availableIUViewer.setContentProvider(new AvailableIUContentProvider(queryProvider));
-		availableIUViewer.setInput(new MetadataRepositories(metadataRepositories));
+		availableIUViewer.setInput(new MetadataRepositories(context.getMetadataRepositories()));
 
 		// Now the presentation, columns before label provider.
 		setTreeColumns(availableIUViewer.getTree());
@@ -79,7 +78,7 @@ public class AvailableIUGroup extends StructuredIUGroup {
 			protected void refreshAll() {
 				// The content provider caches the children unless input changes,
 				// so a viewer.refresh() is not enough.
-				availableIUViewer.setInput(new MetadataRepositories(metadataRepositories));
+				availableIUViewer.setInput(new MetadataRepositories(context.getMetadataRepositories()));
 			}
 		};
 		ProvUIActivator.getDefault().addProvisioningListener(listener);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateAndInstallGroup.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateAndInstallGroup.java
index 46097e8..e640d8b 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateAndInstallGroup.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/dialogs/UpdateAndInstallGroup.java
@@ -13,6 +13,7 @@ package org.eclipse.equinox.p2.ui.dialogs;
 import org.eclipse.core.runtime.Assert;
 import org.eclipse.equinox.internal.p2.ui.ProvUIMessages;
 import org.eclipse.equinox.internal.p2.ui.actions.PropertyDialogAction;
+import org.eclipse.equinox.p2.director.ProvisioningContext;
 import org.eclipse.equinox.p2.ui.*;
 import org.eclipse.equinox.p2.ui.actions.*;
 import org.eclipse.equinox.p2.ui.model.ProfileElement;
@@ -101,7 +102,7 @@ public class UpdateAndInstallGroup {
 		layout.marginHeight = 0;
 		composite.setLayout(layout);
 
-		availableIUGroup = new AvailableIUGroup(composite, queryProvider, JFaceResources.getDialogFont(), null);
+		availableIUGroup = new AvailableIUGroup(composite, queryProvider, JFaceResources.getDialogFont(), new ProvisioningContext());
 
 		// Vertical buttons
 		Composite buttonBar = (Composite) createAvailableIUsVerticalButtonBar(composite);
diff --git a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
index 9249e8c..dff525e 100644
--- a/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
+++ b/bundles/org.eclipse.equinox.p2.ui/src/org/eclipse/equinox/p2/ui/operations/ProvisioningUtil.java
@@ -163,8 +163,8 @@ public class ProvisioningUtil {
 	/*
 	 * Get the plan for the specified install operation
 	 */
-	public static ProvisioningPlan getProvisioningPlan(ProfileChangeRequest request, IProgressMonitor monitor) throws ProvisionException {
-		return getPlanner().getProvisioningPlan(request, new ProvisioningContext(), monitor);
+	public static ProvisioningPlan getProvisioningPlan(ProfileChangeRequest request, ProvisioningContext context, IProgressMonitor monitor) throws ProvisionException {
+		return getPlanner().getProvisioningPlan(request, context, monitor);
 	}
 
 	/*

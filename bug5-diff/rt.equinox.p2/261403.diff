commit 0f3ac743f09eba8d2a155fdb58ca96116ffc1906
Author: Jeff McAffer <jeff>
Date:   Wed Jan 21 02:05:26 2009 +0000

    Bug 261403 [query] Add compound queryable

3	1	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/Messages.java
2	1	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/messages.properties
13	1	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/Collector.java
8	1	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/CompositeQuery.java
0	1	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/CompoundQuery.java
97	0	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/CompoundQueryable.java
6	1	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/ContextQuery.java
0	1	bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/MatchQuery.java
3	1	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/Messages.java
2	1	bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/messages.properties
1	0	bundles/org.eclipse.equinox.p2.tests/META-INF/MANIFEST.MF
4	4	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/AggregateQueryTest.java
1	0	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/AllTests.java
29	0	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/CollectorTest.java
327	0	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/CompoundQueryableTest.java
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/Messages.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/Messages.java
index 69b0c41..f0d1fa8 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/Messages.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/Messages.java
@@ -8,7 +8,7 @@
  * Contributors:
  *     Cloudsmith Inc. - initial API and implementation
  *******************************************************************************/
- package org.eclipse.equinox.internal.provisional.p2.core;
+package org.eclipse.equinox.internal.provisional.p2.core;
 
 import org.eclipse.osgi.util.NLS;
 
@@ -85,6 +85,8 @@ public class Messages extends NLS {
 
 	public static String pad_not_allowed_in_osgi_0;
 
+	public static String performing_subquery;
+
 	public static String premature_end_of_format;
 
 	public static String premature_end_of_format_expected_0;
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/messages.properties b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/messages.properties
index 0454093..9f46d1e 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/core/messages.properties
@@ -44,6 +44,7 @@ original_must_start_with_colon_0=Original version must start with colon: {0}
 original_stated_but_missing_0=Expected original version after colon: {0}
 pad_defined_more_then_once=Pad was defined more then once
 pad_not_allowed_in_osgi_0=Pad is not allowed in an OSGi version: "{0}"
+performing_subquery=Performing subquery
 premature_end_of_format=Premature end of format
 premature_end_of_format_expected_0=Premature end of format, "{0}" expected
 premature_EOS_0=Premature end of string in "{0}"
@@ -58,4 +59,4 @@ raw_element_expected_0=A raw element was expected: {0}
 string_can_not_have_pad_value=A string cannot have a pad value
 syntax_error_in_version_format_0_1_2=Syntax error in version format "{0}" at position {1}: {2}
 syntax_error_in_version_format_0_1_found_2_expected_3=Syntax error in version format "{0}" at position {1}: Found {2} when {3} was expected
-unbalanced_format_parenthesis=Unbalanced format parenthesis
+unbalanced_format_parenthesis=Unbalanced format parenthesis
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/Collector.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/Collector.java
index 79aa6c2..d89bf07 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/Collector.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/Collector.java
@@ -14,6 +14,8 @@ package org.eclipse.equinox.internal.provisional.p2.query;
 import java.lang.reflect.Array;
 import java.util.*;
 import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.runtime.NullProgressMonitor;
+import org.eclipse.equinox.internal.provisional.p2.core.Messages;
 
 /**
  * A collector is a generic visitor that collects objects passed to it,
@@ -119,6 +121,16 @@ public class Collector implements IQueryable {
 	 * Performs a query on this results of this collector.  
 	 */
 	public Collector query(Query query, Collector collector, IProgressMonitor monitor) {
-		return query.perform(toCollection().iterator(), collector);
+		Iterator iter = collector == this ? toCollection().iterator() : iterator();
+		if (monitor == null)
+			monitor = new NullProgressMonitor();
+		try {
+			monitor.beginTask(Messages.performing_subquery, 1);
+			collector = query.perform(iter, collector);
+			monitor.worked(1);
+		} finally {
+			monitor.done();
+		}
+		return collector;
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/CompositeQuery.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/CompositeQuery.java
index 5a99972..b304595 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/CompositeQuery.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/CompositeQuery.java
@@ -23,6 +23,14 @@ public class CompositeQuery implements Query {
 		this.queries = queries;
 	}
 
+	/**
+	 * Set the queries of this composite.  This is needed to allow subclasses of 
+	 * CompsiteQuery to set the queries in a constructor
+	 */
+	protected final void setQueries(Query[] queries) {
+		this.queries = queries;
+	}
+
 	public Collector perform(Iterator iterator, Collector result) {
 		Collector collector;
 		Iterator iter = iterator;
@@ -37,5 +45,4 @@ public class CompositeQuery implements Query {
 			gatherResults = result.accept(iter.next());
 		return result;
 	}
-
 }
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/CompoundQuery.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/CompoundQuery.java
index f6e308b..167a9e7 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/CompoundQuery.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/CompoundQuery.java
@@ -181,6 +181,5 @@ public abstract class CompoundQuery implements Query {
 				gatherResults = result.accept(resultIterator.next());
 			return result;
 		}
-
 	}
 }
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/CompoundQueryable.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/CompoundQueryable.java
new file mode 100644
index 0000000..b63eff4
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/CompoundQueryable.java
@@ -0,0 +1,97 @@
+/******************************************************************************* 
+* Copyright (c) 2009 EclipseSource and others. All rights reserved. This
+* program and the accompanying materials are made available under the terms of
+* the Eclipse Public License v1.0 which accompanies this distribution, and is
+* available at http://www.eclipse.org/legal/epl-v10.html
+*
+* Contributors:
+*   EclipseSource - initial API and implementation
+******************************************************************************/
+package org.eclipse.equinox.internal.provisional.p2.query;
+
+import java.util.*;
+import org.eclipse.core.runtime.*;
+
+/**
+ * A queryable that holds a number of other IQueryables and provides
+ * a mechanism for querying the entire set.
+ */
+public class CompoundQueryable implements IQueryable {
+
+	private IQueryable[] queryables;
+
+	public CompoundQueryable(IQueryable[] queryables) {
+		this.queryables = queryables;
+	}
+
+	public Collector query(Query query, Collector collector, IProgressMonitor monitor) {
+		if (monitor == null) {
+			monitor = new NullProgressMonitor();
+		}
+		boolean isMatchQuery = query instanceof IMatchQuery;
+		Collector results = collector;
+		int totalWork = isMatchQuery ? queryables.length : queryables.length + 1;
+
+		try {
+			SubMonitor subMonitor = SubMonitor.convert(monitor, totalWork * 10);
+			if (!isMatchQuery) {
+				// If it is not a match query, then collect the results
+				// as a list, we will query this list for the final results
+				results = new ListCollector();
+			}
+			for (int i = 0; i < queryables.length; i++) {
+				if (subMonitor.isCanceled())
+					break;
+				results = queryables[i].query(query, results, subMonitor.newChild(10));
+			}
+
+			if (!isMatchQuery) {
+				// If it is not a MatchQuery then we must query the results.
+				collector = results.query(query, collector, subMonitor.newChild(10));
+			} else
+				collector = results;
+		} finally {
+			monitor.done();
+		}
+
+		return collector;
+	}
+
+	/**
+	 * A list collector.
+	 * 
+	 * This is a collector backed as a list.
+	 *
+	 */
+	private class ListCollector extends Collector {
+		private List collected;
+
+		public ListCollector() {
+			super();
+		}
+
+		public boolean accept(Object object) {
+			if (collected == null)
+				collected = new ArrayList();
+			collected.add(object);
+			return true;
+		}
+
+		/**
+		 * Returns the collected objects as an immutable collection.
+		 * 
+		 * @return An unmodifiable collection of the collected objects
+		 */
+		public Collection toCollection() {
+			return collected == null ? Collections.EMPTY_LIST : Collections.unmodifiableList(collected);
+		}
+
+		public Iterator iterator() {
+			return collected == null ? Collections.EMPTY_LIST.iterator() : collected.iterator();
+		}
+
+		public int size() {
+			return collected == null ? 0 : collected.size();
+		}
+	}
+}
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/ContextQuery.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/ContextQuery.java
index 8277b84..fd6f50d 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/ContextQuery.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/ContextQuery.java
@@ -16,6 +16,11 @@ import java.util.Iterator;
  * input to evaluate the results.  Queries must consider the group of elements before
  * processing the results. <P>
  * 
+ * ContextQueries must also be transitive. That is, if run on a subset of the 
+ * input, the order in which they are executed must not matter. If there is the 
+ * need for a non-transitive query, please see:
+ * https://bugs.eclipse.org/bugs/show_bug.cgi?id=261403
+ * <p>
  * Users of this query must call {@link #perform(Iterator, Collector)} to compute 
  * the results. <P>
  * This class may be subclassed by clients. Subclasses should specify the type
@@ -23,7 +28,7 @@ import java.util.Iterator;
  * specify their match algorithm, and expose the parameters involved in the match
  * computation, to allow {@link IQueryable} implementations to optimize their
  * execution of the query. <P>
- *
+ * 
  */
 public abstract class ContextQuery implements Query {
 
diff --git a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/MatchQuery.java b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/MatchQuery.java
index 4bdba9b..4957b70 100644
--- a/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/MatchQuery.java
+++ b/bundles/org.eclipse.equinox.p2.core/src/org/eclipse/equinox/internal/provisional/p2/query/MatchQuery.java
@@ -76,7 +76,6 @@ public abstract class MatchQuery implements IMatchQuery {
 	 * This method is internal to the framework.  Subclasses may override this method, but
 	 * should not call this method.
 	 */
-
 	protected void performComplete() {
 		// nothing to do by default
 	}
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/Messages.java b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/Messages.java
index 69b0c41..f0d1fa8 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/Messages.java
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/Messages.java
@@ -8,7 +8,7 @@
  * Contributors:
  *     Cloudsmith Inc. - initial API and implementation
  *******************************************************************************/
- package org.eclipse.equinox.internal.provisional.p2.core;
+package org.eclipse.equinox.internal.provisional.p2.core;
 
 import org.eclipse.osgi.util.NLS;
 
@@ -85,6 +85,8 @@ public class Messages extends NLS {
 
 	public static String pad_not_allowed_in_osgi_0;
 
+	public static String performing_subquery;
+
 	public static String premature_end_of_format;
 
 	public static String premature_end_of_format_expected_0;
diff --git a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/messages.properties b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/messages.properties
index 0454093..9f46d1e 100644
--- a/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.metadata/src/org/eclipse/equinox/internal/provisional/p2/metadata/messages.properties
@@ -44,6 +44,7 @@ original_must_start_with_colon_0=Original version must start with colon: {0}
 original_stated_but_missing_0=Expected original version after colon: {0}
 pad_defined_more_then_once=Pad was defined more then once
 pad_not_allowed_in_osgi_0=Pad is not allowed in an OSGi version: "{0}"
+performing_subquery=Performing subquery
 premature_end_of_format=Premature end of format
 premature_end_of_format_expected_0=Premature end of format, "{0}" expected
 premature_EOS_0=Premature end of string in "{0}"
@@ -58,4 +59,4 @@ raw_element_expected_0=A raw element was expected: {0}
 string_can_not_have_pad_value=A string cannot have a pad value
 syntax_error_in_version_format_0_1_2=Syntax error in version format "{0}" at position {1}: {2}
 syntax_error_in_version_format_0_1_found_2_expected_3=Syntax error in version format "{0}" at position {1}: Found {2} when {3} was expected
-unbalanced_format_parenthesis=Unbalanced format parenthesis
+unbalanced_format_parenthesis=Unbalanced format parenthesis
\ No newline at end of file
diff --git a/bundles/org.eclipse.equinox.p2.tests/META-INF/MANIFEST.MF b/bundles/org.eclipse.equinox.p2.tests/META-INF/MANIFEST.MF
index 86eb579..70f75ab 100644
--- a/bundles/org.eclipse.equinox.p2.tests/META-INF/MANIFEST.MF
+++ b/bundles/org.eclipse.equinox.p2.tests/META-INF/MANIFEST.MF
@@ -6,6 +6,7 @@ Bundle-Vendor: %providerName
 Bundle-Localization: plugin
 Bundle-Version: 1.1.0.qualifier
 Import-Package: javax.xml.parsers,
+ org.eclipse.core.tests.harness,
  org.eclipse.equinox.internal.p2.artifact.mirror,
  org.eclipse.equinox.internal.p2.artifact.processors.md5,
  org.eclipse.equinox.internal.p2.artifact.processors.pack200,
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/AggregateQueryTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/AggregateQueryTest.java
index a35964e..354c0c6 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/AggregateQueryTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/AggregateQueryTest.java
@@ -220,7 +220,7 @@ public class AggregateQueryTest extends TestCase {
 	}
 
 	public void testIntersection2() {
-		Query ABC = new Query() {
+		Query ABC = new ContextQuery() {
 			public Collector perform(Iterator iterator, Collector result) {
 				while (iterator.hasNext()) {
 					Object o = iterator.next();
@@ -231,7 +231,7 @@ public class AggregateQueryTest extends TestCase {
 			}
 		};
 
-		Query BCDE = new Query() {
+		Query BCDE = new ContextQuery() {
 			public Collector perform(Iterator iterator, Collector result) {
 				while (iterator.hasNext()) {
 					Object o = iterator.next();
@@ -277,7 +277,7 @@ public class AggregateQueryTest extends TestCase {
 	}
 
 	public void testUnion2() {
-		Query ABC = new Query() {
+		Query ABC = new ContextQuery() {
 			public Collector perform(Iterator iterator, Collector result) {
 				while (iterator.hasNext()) {
 					Object o = iterator.next();
@@ -288,7 +288,7 @@ public class AggregateQueryTest extends TestCase {
 			}
 		};
 
-		Query BCDE = new Query() {
+		Query BCDE = new ContextQuery() {
 			public Collector perform(Iterator iterator, Collector result) {
 				while (iterator.hasNext()) {
 					Object o = iterator.next();
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/AllTests.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/AllTests.java
index 87118cf..3a2368e 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/AllTests.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/AllTests.java
@@ -24,6 +24,7 @@ public class AllTests extends TestCase {
 		suite.addTestSuite(OrderedPropertiesTest.class);
 		suite.addTestSuite(QueryTest.class);
 		suite.addTestSuite(AggregateQueryTest.class);
+		suite.addTestSuite(CompoundQueryableTest.class);
 		suite.addTestSuite(URLUtilTest.class);
 		return suite;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/CollectorTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/CollectorTest.java
index 1288ff6..40cda69 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/CollectorTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/CollectorTest.java
@@ -75,6 +75,35 @@ public class CollectorTest extends AbstractProvisioningTest {
 		assertTrue("2.2", collection.contains("5"));
 	}
 
+	public void testSameCollector() {
+		String[] s = new String[] {"A", "B", "C", "D", "E", "F", "G", "1", "2", "3", "4", "5", "6", "7"};
+		List list = Arrays.asList(s);
+		Query numeric = new MatchQuery() {
+
+			public boolean isMatch(Object candidate) {
+				if (((String) candidate).compareTo("0") > 0 && ((String) candidate).compareTo("8") < 0) {
+					return true;
+				}
+				return false;
+			}
+		};
+
+		Query fourOrFiveOrABC = new MatchQuery() {
+			public boolean isMatch(Object candidate) {
+				if (((String) candidate).equals("4") || ((String) candidate).equals("5") || ((String) candidate).equals("A") || ((String) candidate).equals("B") || ((String) candidate).equals("C")) {
+					return true;
+				}
+				return false;
+			}
+		};
+		Collector collector = numeric.perform(list.iterator(), new Collector());
+		assertEquals("1.0", 7, collector.toCollection().size());
+
+		collector = collector.query(fourOrFiveOrABC, collector, null);
+		Collection collection = collector.toCollection();
+		assertEquals("2.0", 7, collection.size());
+	}
+
 	/**
 	 * This tests the query method on the collector.
 	 */
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/CompoundQueryableTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/CompoundQueryableTest.java
new file mode 100644
index 0000000..d2c6281
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/core/CompoundQueryableTest.java
@@ -0,0 +1,327 @@
+/******************************************************************************* 
+* Copyright (c) 2009 EclipseSource and others. All rights reserved. This
+* program and the accompanying materials are made available under the terms of
+* the Eclipse Public License v1.0 which accompanies this distribution, and is
+* available at http://www.eclipse.org/legal/epl-v10.html
+*
+* Contributors:
+*   EclipseSource - initial API and implementation
+******************************************************************************/
+package org.eclipse.equinox.p2.tests.core;
+
+import java.util.*;
+import junit.framework.TestCase;
+import org.eclipse.core.runtime.IProgressMonitor;
+import org.eclipse.core.tests.harness.TestProgressMonitor;
+import org.eclipse.equinox.internal.provisional.p2.query.*;
+
+/**
+ * Tests the compound queryable
+ */
+public class CompoundQueryableTest extends TestCase {
+
+	class CompoundQueryTestProgressMonitor extends TestProgressMonitor {
+
+		private boolean isDone;
+		private int assignedWork = 0;
+		private int amountWorked = 0;
+
+		public void beginTask(String name, int totalWork) {
+			super.beginTask(name, totalWork);
+			this.assignedWork += totalWork;
+		}
+
+		public void worked(int work) {
+			amountWorked += work;
+		}
+
+		public boolean isWorkDone() {
+			return amountWorked == assignedWork;
+		}
+
+		public boolean isDone() {
+			return this.isDone;
+		}
+
+		public void done() {
+			super.done();
+			this.isDone = true;
+		}
+	}
+
+	static Iterator createIterator(Object[] array) {
+		return Arrays.asList(array).iterator();
+	}
+
+	IQueryable queryable1 = new IQueryable() {
+		Integer[] elements = new Integer[] {1, 2, 3, 4, 5};
+
+		public Collector query(Query query, Collector collector, IProgressMonitor monitor) {
+			try {
+				monitor.beginTask("", 10);
+				collector = query.perform(createIterator(elements), collector);
+				monitor.worked(10);
+			} finally {
+				monitor.done();
+			}
+			return collector;
+		}
+	};
+
+	IQueryable queryable2 = new IQueryable() {
+		Integer[] elements = new Integer[] {4, 6, 8, 10, 12};
+
+		public Collector query(Query query, Collector collector, IProgressMonitor monitor) {
+			try {
+				monitor.beginTask("", 10);
+				collector = query.perform(createIterator(elements), collector);
+				monitor.worked(10);
+			} finally {
+				monitor.done();
+			}
+			return collector;
+		}
+	};
+
+	IQueryable queryable3 = new IQueryable() {
+		Integer[] elements = new Integer[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13};
+
+		public Collector query(Query query, Collector collector, IProgressMonitor monitor) {
+			try {
+				monitor.beginTask("", 10);
+				collector = query.perform(createIterator(elements), collector);
+				monitor.worked(10);
+			} finally {
+				monitor.done();
+			}
+			return collector;
+		}
+	};
+
+	Query matchQuery = new MatchQuery() {
+
+		public boolean isMatch(Object candidate) {
+			if (candidate instanceof Integer) {
+				int x = ((Integer) candidate).intValue();
+				if (x % 2 == 0)
+					return true;
+			}
+			return false;
+		}
+	};
+
+	Query matchMod4query = new MatchQuery() {
+		public boolean isMatch(Object candidate) {
+			if (candidate instanceof Integer) {
+				int x = ((Integer) candidate).intValue();
+				if (x % 4 == 0)
+					return true;
+			}
+			return false;
+		}
+	};
+
+	Query contextQuery = new ContextQuery() {
+
+		public Collector perform(Iterator iterator, Collector result) {
+			while (iterator.hasNext()) {
+				Object o = iterator.next();
+				if (o instanceof Integer && ((Integer) o).intValue() % 2 == 0) {
+					result.accept(o);
+				}
+			}
+			return result;
+		}
+
+	};
+
+	Query greatestNumberQuery = new ContextQuery() {
+		public Collector perform(Iterator iterator, Collector result) {
+			int greatest = Integer.MIN_VALUE;
+			while (iterator.hasNext()) {
+				int item = ((Integer) iterator.next()).intValue();
+				if (item > greatest)
+					greatest = item;
+			}
+			if (greatest == Integer.MIN_VALUE)
+				return result;
+			result.accept(greatest);
+			return result;
+		}
+	};
+
+	class ListCollector extends Collector {
+		List list = null;
+
+		public boolean accept(Object object) {
+			if (list == null)
+				list = new ArrayList();
+			list.add(object);
+			return true;
+		}
+
+		public Collection toCollection() {
+			return list == null ? Collections.EMPTY_LIST : Collections.unmodifiableList(list);
+		}
+
+		public Iterator iterator() {
+			return list == null ? Collections.EMPTY_LIST.iterator() : list.iterator();
+		}
+
+		public int size() {
+			return list == null ? 0 : list.size();
+		}
+	}
+
+	public void testMatchQuery() {
+		CompoundQueryable cQueryable = new CompoundQueryable(new IQueryable[] {queryable1, queryable2});
+		CompoundQueryTestProgressMonitor monitor = new CompoundQueryTestProgressMonitor();
+		Collector collector = cQueryable.query(matchQuery, new Collector(), monitor);
+		assertEquals("1.0", 6, collector.size());
+		Collection collection = collector.toCollection();
+		assertTrue("1.1", collection.contains(2));
+		assertTrue("1.2", collection.contains(4));
+		assertTrue("1.3", collection.contains(6));
+		assertTrue("1.4", collection.contains(8));
+		assertTrue("1.5", collection.contains(10));
+		assertTrue("1.6", collection.contains(12));
+	}
+
+	public void testSingleQueryable() {
+		CompoundQueryable cQueryable = new CompoundQueryable(new IQueryable[] {queryable1});
+		CompoundQueryTestProgressMonitor monitor = new CompoundQueryTestProgressMonitor();
+		Collector collector = cQueryable.query(matchQuery, new Collector(), monitor);
+		assertEquals("1.0", 2, collector.size());
+		Collection collection = collector.toCollection();
+		assertTrue("1.1", collection.contains(2));
+		assertTrue("1.2", collection.contains(4));
+	}
+
+	public void testSingleContextQuery() {
+		CompoundQueryable cQueryable = new CompoundQueryable(new IQueryable[] {queryable1});
+		CompoundQueryTestProgressMonitor monitor = new CompoundQueryTestProgressMonitor();
+		Collector collector = cQueryable.query(greatestNumberQuery, new Collector(), monitor);
+		assertEquals("1.0", 1, collector.size());
+		Collection collection = collector.toCollection();
+		assertTrue("1.1", collection.contains(5));
+	}
+
+	public void testMultipleContextQueries() {
+		CompoundQueryable cQueryable = new CompoundQueryable(new IQueryable[] {queryable1, queryable2});
+		CompoundQueryTestProgressMonitor monitor = new CompoundQueryTestProgressMonitor();
+		Collector collector = cQueryable.query(greatestNumberQuery, new Collector(), monitor);
+		assertEquals("1.0", 1, collector.size());
+		Collection collection = collector.toCollection();
+		assertTrue("1.1", collection.contains(12));
+	}
+
+	public void testListCollector1() {
+		CompoundQueryable cQueryable = new CompoundQueryable(new IQueryable[] {queryable1, queryable2});
+		CompoundQueryTestProgressMonitor monitor = new CompoundQueryTestProgressMonitor();
+		Collector collector = cQueryable.query(contextQuery, new ListCollector(), monitor);
+
+		// We use a list so there should be 7 elements (4 is there twice)
+		assertEquals("1.0", 7, collector.size());
+		Collection collection = collector.toCollection();
+		assertTrue("1.1", collection.contains(2));
+		assertTrue("1.2", collection.contains(4));
+		assertTrue("1.3", collection.contains(6));
+		assertTrue("1.4", collection.contains(8));
+		assertTrue("1.5", collection.contains(10));
+		assertTrue("1.6", collection.contains(12));
+	}
+
+	public void testCompoundMatchAndQuery() {
+		CompoundQueryable cQueryable = new CompoundQueryable(new IQueryable[] {queryable1, queryable2});
+		CompoundQueryTestProgressMonitor monitor = new CompoundQueryTestProgressMonitor();
+		Collector collector = cQueryable.query(CompoundQuery.createCompoundQuery(new Query[] {matchQuery, matchMod4query}, true), new Collector(), monitor);
+		assertEquals("1.0", 3, collector.size());
+		Collection collection = collector.toCollection();
+		assertTrue("1.2", collection.contains(4));
+		assertTrue("1.4", collection.contains(8));
+		assertTrue("1.6", collection.contains(12));
+	}
+
+	public void testCompoundMatchOrQuery() {
+		CompoundQueryable cQueryable = new CompoundQueryable(new IQueryable[] {queryable1, queryable2});
+		CompoundQueryTestProgressMonitor monitor = new CompoundQueryTestProgressMonitor();
+		Collector collector = cQueryable.query(CompoundQuery.createCompoundQuery(new Query[] {matchQuery, matchMod4query}, false), new Collector(), monitor);
+		assertEquals("1.0", 6, collector.size());
+		Collection collection = collector.toCollection();
+		assertTrue("1.2", collection.contains(2));
+		assertTrue("1.2", collection.contains(4));
+		assertTrue("1.2", collection.contains(6));
+		assertTrue("1.4", collection.contains(8));
+		assertTrue("1.2", collection.contains(10));
+		assertTrue("1.6", collection.contains(12));
+	}
+
+	public void testMatchQueryProgressMonitor() {
+		CompoundQueryable cQueryable = new CompoundQueryable(new IQueryable[] {queryable1, queryable2});
+		CompoundQueryTestProgressMonitor monitor = new CompoundQueryTestProgressMonitor();
+		cQueryable.query(matchQuery, new Collector(), monitor);
+		assertTrue("1.0", monitor.isDone());
+		assertTrue("1.1", monitor.isWorkDone());
+	}
+
+	public void testSingleQueryableProgressMonitor() {
+		CompoundQueryable cQueryable = new CompoundQueryable(new IQueryable[] {queryable1});
+		CompoundQueryTestProgressMonitor monitor = new CompoundQueryTestProgressMonitor();
+		cQueryable.query(matchQuery, new Collector(), monitor);
+		assertTrue("1.0", monitor.isDone());
+		assertTrue("1.1", monitor.isWorkDone());
+	}
+
+	public void testSingleContextQueryProgressMonitor() {
+		CompoundQueryable cQueryable = new CompoundQueryable(new IQueryable[] {queryable1});
+		CompoundQueryTestProgressMonitor monitor = new CompoundQueryTestProgressMonitor();
+		cQueryable.query(greatestNumberQuery, new Collector(), monitor);
+		assertTrue("1.0", monitor.isDone());
+		assertTrue("1.1", monitor.isWorkDone());
+	}
+
+	public void testMultipleContextQueriesProgressMonitor() {
+		CompoundQueryable cQueryable = new CompoundQueryable(new IQueryable[] {queryable1, queryable2});
+		CompoundQueryTestProgressMonitor monitor = new CompoundQueryTestProgressMonitor();
+		cQueryable.query(greatestNumberQuery, new Collector(), monitor);
+		assertTrue("1.0", monitor.isDone());
+		assertTrue("1.1", monitor.isWorkDone());
+	}
+
+	public void testNullProgressMonitor() {
+		CompoundQueryable cQueryable = new CompoundQueryable(new IQueryable[] {queryable1, queryable2});
+		cQueryable.query(greatestNumberQuery, new Collector(), null);
+		// this is the same as above will null passed in, this should not throw any exceptions
+
+	}
+
+	public void testDoubleCompoundContextOrQuery() {
+		CompoundQueryable cQueryable1 = new CompoundQueryable(new IQueryable[] {queryable3, queryable2});
+		CompoundQueryable cQueryable = new CompoundQueryable(new IQueryable[] {cQueryable1, queryable1});
+		CompoundQueryTestProgressMonitor monitor = new CompoundQueryTestProgressMonitor();
+		Collector collector = cQueryable.query(CompoundQuery.createCompoundQuery(new Query[] {contextQuery, greatestNumberQuery}, false), new Collector(), monitor);
+		assertEquals("1.0", 7, collector.size());
+		Collection collection = collector.toCollection();
+		assertTrue("1.2", collection.contains(2));
+		assertTrue("1.2", collection.contains(4));
+		assertTrue("1.2", collection.contains(6));
+		assertTrue("1.4", collection.contains(8));
+		assertTrue("1.2", collection.contains(10));
+		assertTrue("1.6", collection.contains(12));
+		assertTrue("1.6", collection.contains(13));
+		assertTrue("1.0", monitor.isDone());
+		assertTrue("1.1", monitor.isWorkDone());
+	}
+
+	public void testDoubleCompositeQuery() {
+		CompoundQueryable cQueryable1 = new CompoundQueryable(new IQueryable[] {queryable3, queryable2});
+		CompoundQueryable cQueryable = new CompoundQueryable(new IQueryable[] {cQueryable1, queryable1});
+		CompoundQueryTestProgressMonitor monitor = new CompoundQueryTestProgressMonitor();
+		Collector collector = cQueryable.query(new CompositeQuery(new Query[] {contextQuery, greatestNumberQuery}), new Collector(), monitor);
+		assertEquals("1.0", 1, collector.size());
+		Collection collection = collector.toCollection();
+		assertTrue("1.2", collection.contains(12));
+		assertTrue("1.0", monitor.isDone());
+		assertTrue("1.1", monitor.isWorkDone());
+	}
+}

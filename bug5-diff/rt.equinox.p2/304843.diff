commit f0a701f74d7b17cc84d1d23836f6db4d60ec37cf
Author: spingel <>
Date:   Fri Mar 5 16:56:21 2010 +0000

    bug 304843 - [discovery] ensure sufficient extensibility for Eclipse marketplace client

6	2	bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/wizards/CatalogViewer.java
28	24	bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/wizards/DiscoveryItem.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/wizards/CatalogViewer.java b/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/wizards/CatalogViewer.java
index 85fa183..c217aac 100644
--- a/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/wizards/CatalogViewer.java
+++ b/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/wizards/CatalogViewer.java
@@ -191,7 +191,7 @@ public class CatalogViewer extends FilteredViewer {
 
 	private final SelectionProviderAdapter selectionProvider;
 
-	private final IShellProvider shellProvider;
+	protected final IShellProvider shellProvider;
 
 	boolean showInstalled;
 
@@ -458,6 +458,10 @@ public class CatalogViewer extends FilteredViewer {
 		return features;
 	}
 
+	protected DiscoveryResources getResources() {
+		return resources;
+	}
+
 	public IStructuredSelection getSelection() {
 		return (IStructuredSelection) selectionProvider.getSelection();
 	}
@@ -492,7 +496,7 @@ public class CatalogViewer extends FilteredViewer {
 		return false;
 	}
 
-	void modifySelection(final CatalogItem connector, boolean selected) {
+	protected void modifySelection(final CatalogItem connector, boolean selected) {
 		modifySelectionInternal(connector, selected);
 		updateState();
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/wizards/DiscoveryItem.java b/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/wizards/DiscoveryItem.java
index eed8a37..c32c875 100644
--- a/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/wizards/DiscoveryItem.java
+++ b/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/wizards/DiscoveryItem.java
@@ -72,7 +72,7 @@ public class DiscoveryItem<T extends CatalogItem> extends AbstractDiscoveryItem<
 	}
 
 	private void createContent() {
-		GridLayout layout = new GridLayout(4, false);
+		GridLayout layout = new GridLayout(3, false);
 		layout.marginLeft = 7;
 		layout.marginTop = 2;
 		layout.marginBottom = 2;
@@ -107,29 +107,6 @@ public class DiscoveryItem<T extends CatalogItem> extends AbstractDiscoveryItem<
 		nameLabel.setFont(resources.getSmallHeaderFont());
 		nameLabel.setText(connector.getName());
 
-		providerLabel = new Link(this, SWT.RIGHT);
-		GridDataFactory.fillDefaults().align(SWT.END, SWT.CENTER).applyTo(providerLabel);
-		// always disabled color to make it less prominent
-		providerLabel.setForeground(resources.getColorDisabled());
-		if (connector.getCertification() != null) {
-			providerLabel.setText(NLS.bind(Messages.DiscoveryViewer_Certification_Label0, new String[] {connector.getProvider(), connector.getLicense(), connector.getCertification().getName()}));
-			if (connector.getCertification().getUrl() != null) {
-				providerLabel.addSelectionListener(new SelectionAdapter() {
-					@Override
-					public void widgetSelected(SelectionEvent e) {
-						WorkbenchUtil.openUrl(connector.getCertification().getUrl(), IWorkbenchBrowserSupport.AS_EXTERNAL);
-					}
-				});
-			}
-			Overview overview = new Overview();
-			overview.setSummary(connector.getCertification().getDescription());
-			overview.setUrl(connector.getCertification().getUrl());
-			Image image = resources.getIconImage(connector.getSource(), connector.getCertification().getIcon(), 48, true);
-			hookTooltip(providerLabel, providerLabel, this, providerLabel, connector.getSource(), overview, image);
-		} else {
-			providerLabel.setText(NLS.bind(Messages.ConnectorDiscoveryWizardMainPage_provider_and_license, connector.getProvider(), connector.getLicense()));
-		}
-
 		if (hasTooltip(connector) || connector.isInstalled()) {
 			ToolBar toolBar = new ToolBar(this, SWT.FLAT);
 			GridDataFactory.fillDefaults().align(SWT.END, SWT.CENTER).applyTo(toolBar);
@@ -162,6 +139,33 @@ public class DiscoveryItem<T extends CatalogItem> extends AbstractDiscoveryItem<
 			descriptionText = descriptionText.substring(0, maxDescriptionLength);
 		}
 		description.setText(descriptionText.replaceAll("(\\r\\n)|\\n|\\r", " ")); //$NON-NLS-1$ //$NON-NLS-2$
+
+		createProviderLabel();
+	}
+
+	public void createProviderLabel() {
+		providerLabel = new Link(this, SWT.RIGHT);
+		GridDataFactory.fillDefaults().span(3, 1).align(SWT.BEGINNING, SWT.CENTER).applyTo(providerLabel);
+		// always disabled color to make it less prominent
+		providerLabel.setForeground(resources.getColorDisabled());
+		if (connector.getCertification() != null) {
+			providerLabel.setText(NLS.bind(Messages.DiscoveryViewer_Certification_Label0, new String[] {connector.getProvider(), connector.getLicense(), connector.getCertification().getName()}));
+			if (connector.getCertification().getUrl() != null) {
+				providerLabel.addSelectionListener(new SelectionAdapter() {
+					@Override
+					public void widgetSelected(SelectionEvent e) {
+						WorkbenchUtil.openUrl(connector.getCertification().getUrl(), IWorkbenchBrowserSupport.AS_EXTERNAL);
+					}
+				});
+			}
+			Overview overview = new Overview();
+			overview.setSummary(connector.getCertification().getDescription());
+			overview.setUrl(connector.getCertification().getUrl());
+			Image image = resources.getIconImage(connector.getSource(), connector.getCertification().getIcon(), 48, true);
+			hookTooltip(providerLabel, providerLabel, this, providerLabel, connector.getSource(), overview, image);
+		} else {
+			providerLabel.setText(NLS.bind(Messages.ConnectorDiscoveryWizardMainPage_provider_and_license, connector.getProvider(), connector.getLicense()));
+		}
 	}
 
 	protected boolean hasTooltip(final CatalogItem connector) {
commit 505dd178e871f179d5692ee8236ba9a38867b6a7
Author: spingel <>
Date:   Mon Apr 19 23:06:30 2010 +0000

    bug 304843 - [discovery] ensure sufficient extensibility for Eclipse marketplace client

-	-	bundles/org.eclipse.equinox.p2.ui.discovery/icons/etool16/find-clear-disabled.gif
-	-	bundles/org.eclipse.equinox.p2.ui.discovery/icons/etool16/find-clear.gif
-	-	bundles/org.eclipse.equinox.p2.ui.discovery/icons/etool16/find.png
36	148	bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/FilteredViewer.java
416	0	bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/TextSearchControl.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.discovery/icons/etool16/find-clear-disabled.gif b/bundles/org.eclipse.equinox.p2.ui.discovery/icons/etool16/find-clear-disabled.gif
deleted file mode 100644
index 7f32480..0000000
Binary files a/bundles/org.eclipse.equinox.p2.ui.discovery/icons/etool16/find-clear-disabled.gif and /dev/null differ
diff --git a/bundles/org.eclipse.equinox.p2.ui.discovery/icons/etool16/find-clear.gif b/bundles/org.eclipse.equinox.p2.ui.discovery/icons/etool16/find-clear.gif
deleted file mode 100644
index 2d3935a..0000000
Binary files a/bundles/org.eclipse.equinox.p2.ui.discovery/icons/etool16/find-clear.gif and /dev/null differ
diff --git a/bundles/org.eclipse.equinox.p2.ui.discovery/icons/etool16/find.png b/bundles/org.eclipse.equinox.p2.ui.discovery/icons/etool16/find.png
new file mode 100644
index 0000000..611189d
Binary files /dev/null and b/bundles/org.eclipse.equinox.p2.ui.discovery/icons/etool16/find.png differ
diff --git a/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/FilteredViewer.java b/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/FilteredViewer.java
index 05b98e3..c1859b0 100644
--- a/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/FilteredViewer.java
+++ b/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/FilteredViewer.java
@@ -14,17 +14,13 @@
 package org.eclipse.equinox.internal.p2.ui.discovery.util;
 
 import org.eclipse.core.runtime.*;
-import org.eclipse.equinox.internal.p2.ui.discovery.DiscoveryImages;
 import org.eclipse.equinox.internal.p2.ui.discovery.wizards.Messages;
 import org.eclipse.jface.layout.GridDataFactory;
 import org.eclipse.jface.layout.GridLayoutFactory;
 import org.eclipse.jface.viewers.StructuredViewer;
 import org.eclipse.jface.viewers.Viewer;
 import org.eclipse.swt.SWT;
-import org.eclipse.swt.accessibility.*;
 import org.eclipse.swt.events.*;
-import org.eclipse.swt.graphics.Image;
-import org.eclipse.swt.graphics.Point;
 import org.eclipse.swt.layout.GridData;
 import org.eclipse.swt.widgets.*;
 import org.eclipse.ui.progress.WorkbenchJob;
@@ -36,36 +32,19 @@ import org.eclipse.ui.progress.WorkbenchJob;
  */
 public abstract class FilteredViewer {
 
-	private static Boolean useNativeSearchField;
-
-	private static boolean useNativeSearchField(Composite composite) {
-		if (useNativeSearchField == null) {
-			useNativeSearchField = Boolean.FALSE;
-			Text testText = null;
-			try {
-				testText = new Text(composite, SWT.SEARCH | SWT.ICON_CANCEL);
-				useNativeSearchField = new Boolean((testText.getStyle() & SWT.ICON_CANCEL) != 0);
-			} finally {
-				if (testText != null) {
-					testText.dispose();
-				}
-			}
-
-		}
-		return useNativeSearchField;
-	}
+	private boolean automaticFind;
 
 	private Label clearFilterTextControl;
 
 	private Composite container;
 
-	private Text filterText;
+	TextSearchControl filterText;
 
 	private int minimumHeight;
 
-	private String previousFilterText = ""; //$NON-NLS-1$
+	String previousFilterText = ""; //$NON-NLS-1$
 
-	private WorkbenchJob refreshJob;
+	WorkbenchJob refreshJob;
 
 	private long refreshJobDelay = 200L;
 
@@ -76,97 +55,14 @@ public abstract class FilteredViewer {
 	private Composite header;
 
 	public FilteredViewer() {
-		// constructor
+		setAutomaticFind(true);
 	}
 
-	private void clearFilterText() {
-		filterText.setText(""); //$NON-NLS-1$
+	void clearFilterText() {
+		filterText.getTextControl().setText(""); //$NON-NLS-1$
 		filterTextChanged();
 	}
 
-	private Label createClearFilterTextControl(Composite filterContainer, final Text filterText) {
-		final Image inactiveImage = DiscoveryImages.FIND_CLEAR_DISABLED.createImage();
-		final Image activeImage = DiscoveryImages.FIND_CLEAR.createImage();
-		final Image pressedImage = new Image(filterContainer.getDisplay(), activeImage, SWT.IMAGE_GRAY);
-
-		final Label clearButton = new Label(filterContainer, SWT.NONE);
-		clearButton.setLayoutData(new GridData(SWT.BEGINNING, SWT.CENTER, false, false));
-		clearButton.setImage(inactiveImage);
-		clearButton.setToolTipText(Messages.ConnectorDiscoveryWizardMainPage_clearButton_toolTip);
-		clearButton.setBackground(filterContainer.getDisplay().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
-		clearButton.addMouseListener(new MouseAdapter() {
-			private MouseMoveListener fMoveListener;
-
-			private boolean isMouseInButton(MouseEvent e) {
-				Point buttonSize = clearButton.getSize();
-				return 0 <= e.x && e.x < buttonSize.x && 0 <= e.y && e.y < buttonSize.y;
-			}
-
-			@Override
-			public void mouseDown(MouseEvent e) {
-				clearButton.setImage(pressedImage);
-				fMoveListener = new MouseMoveListener() {
-					private boolean fMouseInButton = true;
-
-					public void mouseMove(MouseEvent e) {
-						boolean mouseInButton = isMouseInButton(e);
-						if (mouseInButton != fMouseInButton) {
-							fMouseInButton = mouseInButton;
-							clearButton.setImage(mouseInButton ? pressedImage : inactiveImage);
-						}
-					}
-				};
-				clearButton.addMouseMoveListener(fMoveListener);
-			}
-
-			@Override
-			public void mouseUp(MouseEvent e) {
-				if (fMoveListener != null) {
-					clearButton.removeMouseMoveListener(fMoveListener);
-					fMoveListener = null;
-					boolean mouseInButton = isMouseInButton(e);
-					clearButton.setImage(mouseInButton ? activeImage : inactiveImage);
-					if (mouseInButton) {
-						clearFilterText();
-						filterText.setFocus();
-					}
-				}
-			}
-		});
-		clearButton.addMouseTrackListener(new MouseTrackListener() {
-			public void mouseEnter(MouseEvent e) {
-				clearButton.setImage(activeImage);
-			}
-
-			public void mouseExit(MouseEvent e) {
-				clearButton.setImage(inactiveImage);
-			}
-
-			public void mouseHover(MouseEvent e) {
-			}
-		});
-		clearButton.addDisposeListener(new DisposeListener() {
-			public void widgetDisposed(DisposeEvent e) {
-				inactiveImage.dispose();
-				activeImage.dispose();
-				pressedImage.dispose();
-			}
-		});
-		clearButton.getAccessible().addAccessibleListener(new AccessibleAdapter() {
-			@Override
-			public void getName(AccessibleEvent e) {
-				e.result = Messages.ConnectorDiscoveryWizardMainPage_clearButton_accessibleListener;
-			}
-		});
-		clearButton.getAccessible().addAccessibleControlListener(new AccessibleControlAdapter() {
-			@Override
-			public void getRole(AccessibleControlEvent e) {
-				e.detail = ACC.ROLE_PUSHBUTTON;
-			}
-		});
-		return clearButton;
-	}
-
 	public void createControl(Composite parent) {
 		container = new Composite(parent, SWT.NONE);
 		GridLayoutFactory.fillDefaults().margins(0, 0).applyTo(container);
@@ -195,47 +91,28 @@ public abstract class FilteredViewer {
 		};
 	}
 
-	private void doCreateFindControl(Composite header) {
-		Label label = new Label(header, SWT.NONE);
+	private void doCreateFindControl(Composite parent) {
+		Label label = new Label(parent, SWT.NONE);
 		label.setText(Messages.ConnectorDiscoveryWizardMainPage_filterLabel);
 
-		Composite textFilterContainer;
-		boolean nativeSearch = useNativeSearchField(header);
-		if (nativeSearch) {
-			textFilterContainer = new Composite(header, SWT.NONE);
-		} else {
-			textFilterContainer = new Composite(header, SWT.BORDER);
-			textFilterContainer.setBackground(header.getDisplay().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
-		}
-		GridDataFactory.fillDefaults().grab(true, false).applyTo(textFilterContainer);
-		GridLayoutFactory.fillDefaults().numColumns(2).applyTo(textFilterContainer);
-
-		if (nativeSearch) {
-			filterText = new Text(textFilterContainer, SWT.SINGLE | SWT.BORDER | SWT.SEARCH | SWT.ICON_CANCEL);
-		} else {
-			filterText = new Text(textFilterContainer, SWT.SINGLE);
-		}
-
+		filterText = new TextSearchControl(parent, automaticFind);
 		filterText.addModifyListener(new ModifyListener() {
 			public void modifyText(ModifyEvent e) {
 				filterTextChanged();
 			}
 		});
-		if (nativeSearch) {
-			filterText.addSelectionListener(new SelectionAdapter() {
-				@Override
-				public void widgetDefaultSelected(SelectionEvent e) {
-					if (e.detail == SWT.ICON_CANCEL) {
-						clearFilterText();
-					}
+		filterText.addSelectionListener(new SelectionAdapter() {
+			@Override
+			public void widgetDefaultSelected(SelectionEvent e) {
+				if (e.detail == SWT.ICON_CANCEL) {
+					clearFilterText();
+				} else {
+					// search icon and enter
+					filterTextChanged();
 				}
-			});
-			GridDataFactory.fillDefaults().grab(true, false).span(2, 1).applyTo(filterText);
-		} else {
-			GridDataFactory.fillDefaults().grab(true, false).applyTo(filterText);
-			clearFilterTextControl = createClearFilterTextControl(textFilterContainer, filterText);
-			clearFilterTextControl.setVisible(false);
-		}
+			}
+		});
+		GridDataFactory.fillDefaults().grab(true, false).applyTo(filterText);
 	}
 
 	private void doCreateHeader() {
@@ -250,7 +127,7 @@ public abstract class FilteredViewer {
 		GridLayoutFactory.fillDefaults().numColumns(header.getChildren().length).applyTo(header);
 	}
 
-	protected void doCreateHeaderControls(Composite header) {
+	protected void doCreateHeaderControls(Composite parent) {
 		// ignore
 	}
 
@@ -274,7 +151,7 @@ public abstract class FilteredViewer {
 				if (filterText.isDisposed()) {
 					return Status.CANCEL_STATUS;
 				}
-				String text = filterText.getText();
+				String text = filterText.getTextControl().getText();
 				text = text.trim();
 
 				if (!previousFilterText.equals(text)) {
@@ -286,7 +163,7 @@ public abstract class FilteredViewer {
 		};
 	}
 
-	protected abstract StructuredViewer doCreateViewer(Composite container);
+	protected abstract StructuredViewer doCreateViewer(Composite parent);
 
 	protected void doFind(String text) {
 		searchFilter.setPattern(text);
@@ -296,7 +173,7 @@ public abstract class FilteredViewer {
 		viewer.refresh(true);
 	}
 
-	private void filterTextChanged() {
+	void filterTextChanged() {
 		if (refreshJob == null) {
 			refreshJob = doCreateRefreshJob();
 		} else {
@@ -332,4 +209,15 @@ public abstract class FilteredViewer {
 		this.refreshJobDelay = refreshJobDelay;
 	}
 
+	public final void setAutomaticFind(boolean automaticFind) {
+		if (filterText != null) {
+			throw new IllegalStateException("setAutomaticFind() needs be invoked before controls are created"); //$NON-NLS-1$
+		}
+		this.automaticFind = automaticFind;
+	}
+
+	public final boolean isAutomaticFind() {
+		return automaticFind;
+	}
+
 }
diff --git a/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/TextSearchControl.java b/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/TextSearchControl.java
new file mode 100644
index 0000000..340744f
--- /dev/null
+++ b/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/TextSearchControl.java
@@ -0,0 +1,416 @@
+/*******************************************************************************
+ * Copyright (c) 2010 Tasktop Technologies and others.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *     Tasktop Technologies - initial API and implementation
+ *******************************************************************************/
+
+package org.eclipse.equinox.internal.p2.ui.discovery.util;
+
+import java.util.*;
+import java.util.List;
+import org.eclipse.equinox.internal.p2.ui.discovery.DiscoveryUi;
+import org.eclipse.jface.layout.GridLayoutFactory;
+import org.eclipse.jface.resource.ImageDescriptor;
+import org.eclipse.jface.resource.JFaceResources;
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.accessibility.*;
+import org.eclipse.swt.events.*;
+import org.eclipse.swt.graphics.*;
+import org.eclipse.swt.layout.GridData;
+import org.eclipse.swt.widgets.*;
+import org.eclipse.ui.IMemento;
+import org.eclipse.ui.PlatformUI;
+import org.eclipse.ui.internal.WorkbenchMessages;
+import org.eclipse.ui.plugin.AbstractUIPlugin;
+
+/**
+ * @author Shawn Minto
+ */
+public class TextSearchControl extends Composite {
+
+	private static final String FIND_TEXT_MEMENTO_ELEMENT = "text"; //$NON-NLS-1$
+
+	private static final String FIND_MEMENTO_ELEMENT = "historyItem"; //$NON-NLS-1$
+
+	private static final String FIND_MEMENTO_TYPE = "filteredTreeFindHistory"; //$NON-NLS-1$
+
+	private static final int MAX_HISTORY_ITEMS = 50;
+
+	/**
+	 * Image descriptor for enabled clear button.
+	 */
+	private static final String CLEAR_ICON = "org.eclipse.ui.internal.dialogs.CLEAR_ICON"; //$NON-NLS-1$
+
+	/**
+	 * Image descriptor for enabled clear button.
+	 */
+	private static final String FIND_ICON = "org.eclipse.ui.internal.dialogs.FIND_ICON"; //$NON-NLS-1$
+
+	/* SWT STYLE BIT AVAILABLE ON 3.5 AND HIGHER */
+	public static final int ICON_SEARCH = 1 << 9;
+
+	/* SWT STYLE BIT AVAILABLE ON 3.5 AND HIGHER */
+	public static final int ICON_CANCEL = 1 << 8;
+
+	/**
+	 * Get image descriptors for the clear button.
+	 */
+	static {
+		ImageDescriptor descriptor = AbstractUIPlugin.imageDescriptorFromPlugin(PlatformUI.PLUGIN_ID, "$nl$/icons/full/etool16/clear_co.gif"); //$NON-NLS-1$
+		if (descriptor != null) {
+			JFaceResources.getImageRegistry().put(CLEAR_ICON, descriptor);
+		}
+
+		descriptor = AbstractUIPlugin.imageDescriptorFromPlugin(DiscoveryUi.ID_PLUGIN, "$nl$/icons/etool16/find.png"); //$NON-NLS-1$
+		if (descriptor != null) {
+			JFaceResources.getImageRegistry().put(FIND_ICON, descriptor);
+		}
+	}
+
+	private final Text textControl;
+
+	private Control clearControl;
+
+	private Control findControl;
+
+	private final boolean automaticFind;
+
+	private final Set<SelectionListener> selectionListeners = new HashSet<SelectionListener>();
+
+	private Collection<String> searchHistory = new LinkedHashSet<String>();
+
+	private boolean hasHistorySupport;
+
+	private static Boolean useNativeSearchField;
+
+	@SuppressWarnings("restriction")
+	public TextSearchControl(Composite parent, boolean automaticFind) {
+		super(parent, getCompositeStyle(automaticFind, parent));
+		this.automaticFind = automaticFind;
+
+		int textStyle = SWT.SINGLE;
+		int numColumns = 1;
+		if (useNativeSearchField(automaticFind, parent)) {
+			if (automaticFind) {
+				textStyle |= SWT.SEARCH | ICON_CANCEL;
+			} else {
+				textStyle |= SWT.SEARCH | ICON_SEARCH | ICON_CANCEL;
+			}
+		} else {
+			super.setBackground(getDisplay().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
+			super.setFont(parent.getFont());
+			numColumns = 2;
+			if (!automaticFind) {
+				numColumns += 1;
+			}
+		}
+		GridLayoutFactory.swtDefaults().margins(0, 0).extendedMargins(0, 0, 0, 0).spacing(0, 1).numColumns(numColumns).applyTo(this);
+
+		textControl = new Text(this, textStyle);
+
+		GridData gridData = new GridData(SWT.FILL, SWT.CENTER, true, false);
+		textControl.setLayoutData(gridData);
+
+		if (useNativeSearchField == null || !useNativeSearchField) {
+			findControl = createLabelButtonControl(this, textControl, JFaceResources.getImageRegistry().getDescriptor(FIND_ICON), "Find", "Find", ICON_SEARCH);
+			clearControl = createLabelButtonControl(this, textControl, JFaceResources.getImageRegistry().getDescriptor(CLEAR_ICON), WorkbenchMessages.FilteredTree_ClearToolTip,//FilteredTree_AccessibleListenerClearButton,
+					WorkbenchMessages.FilteredTree_ClearToolTip, ICON_CANCEL);
+			addModifyListener(new ModifyListener() {
+
+				public void modifyText(ModifyEvent e) {
+					updateButtonVisibilityAndEnablement();
+
+				}
+			});
+			updateButtonVisibilityAndEnablement();
+		}
+
+		registerListeners();
+	}
+
+	public boolean hasHistorySupport() {
+		return hasHistorySupport;
+	}
+
+	private void registerListeners() {
+		addSelectionListener(new SelectionAdapter() {
+
+			@Override
+			public void widgetDefaultSelected(SelectionEvent e) {
+				if (textControl != null && !textControl.isDisposed()) {
+					addToSearchHistory(textControl.getText());
+				}
+
+			}
+		});
+		textControl.addFocusListener(new FocusAdapter() {
+
+			@Override
+			public void focusLost(FocusEvent e) {
+				if (textControl != null && !textControl.isDisposed()) {
+					addToSearchHistory(textControl.getText());
+				}
+			}
+		});
+	}
+
+	private static int getCompositeStyle(boolean automaticFind, Composite parent) {
+		if (useNativeSearchField(automaticFind, parent)) {
+			return SWT.NONE;
+		}
+		return SWT.BORDER;
+	}
+
+	private static boolean useNativeSearchField(boolean automaticFind, Composite parent) {
+		if (parent != null) {
+			if (useNativeSearchField == null) {
+				useNativeSearchField = Boolean.FALSE;
+				Text testText = null;
+				try {
+					int style = SWT.SEARCH | ICON_CANCEL;
+					if (automaticFind) {
+						style |= ICON_SEARCH;
+					}
+					testText = new Text(parent, style);
+					useNativeSearchField = new Boolean((testText.getStyle() & ICON_CANCEL) != 0 && (!automaticFind || (testText.getStyle() & ICON_SEARCH) != 0));
+				} finally {
+					if (testText != null) {
+						testText.dispose();
+					}
+				}
+
+			}
+		} else {
+			useNativeSearchField = Boolean.FALSE;
+		}
+		return useNativeSearchField.booleanValue();
+	}
+
+	private Control createLabelButtonControl(Composite parent, final Text textControl, ImageDescriptor activeImageDescriptor, final String accessibilityText, String toolTipText, final int detail) {
+
+		final Image nativeImage = parent.getDisplay().getSystemImage(detail);
+
+		final Image activeImage = nativeImage != null ? nativeImage : activeImageDescriptor.createImage();
+		final Image inactiveImage = new Image(parent.getDisplay(), activeImage, SWT.IMAGE_GRAY);
+		final Image pressedImage = inactiveImage;
+
+		final Label labelButton = new Label(parent, SWT.NONE);
+		labelButton.setLayoutData(new GridData(SWT.BEGINNING, SWT.CENTER, false, false));
+		labelButton.setImage(inactiveImage);
+		labelButton.setBackground(parent.getDisplay().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
+		labelButton.setToolTipText(toolTipText);
+		labelButton.addDisposeListener(new DisposeListener() {
+			public void widgetDisposed(DisposeEvent e) {
+				if (nativeImage == null && activeImage != null && !activeImage.isDisposed()) {
+					activeImage.dispose();
+				}
+				if (inactiveImage != null && !inactiveImage.isDisposed()) {
+					inactiveImage.dispose();
+				}
+				if (pressedImage != null && !pressedImage.isDisposed()) {
+					pressedImage.dispose();
+				}
+			}
+		});
+		labelButton.addMouseListener(new MouseAdapter() {
+			private MouseMoveListener fMoveListener;
+
+			@Override
+			public void mouseDown(MouseEvent e) {
+				labelButton.setImage(pressedImage);
+				fMoveListener = new MouseMoveListener() {
+					private boolean fMouseInButton = true;
+
+					public void mouseMove(MouseEvent e) {
+						boolean mouseInButton = isMouseInButton(e);
+						if (mouseInButton != fMouseInButton) {
+							fMouseInButton = mouseInButton;
+							labelButton.setImage(mouseInButton ? pressedImage : inactiveImage);
+						}
+					}
+				};
+				labelButton.addMouseMoveListener(fMoveListener);
+			}
+
+			@Override
+			public void mouseUp(MouseEvent e) {
+				if (fMoveListener != null) {
+					labelButton.removeMouseMoveListener(fMoveListener);
+					fMoveListener = null;
+					boolean mouseInButton = isMouseInButton(e);
+					labelButton.setImage(mouseInButton ? activeImage : inactiveImage);
+					if (mouseInButton) {
+						if (textControl.isEnabled() && textControl.getText().length() > 0) {
+							notifySelectionChanged(detail);
+						}
+					}
+				}
+			}
+
+			private boolean isMouseInButton(MouseEvent e) {
+				Point buttonSize = labelButton.getSize();
+				return 0 <= e.x && e.x < buttonSize.x && 0 <= e.y && e.y < buttonSize.y;
+			}
+		});
+
+		labelButton.addMouseTrackListener(new MouseTrackListener() {
+			public void mouseEnter(MouseEvent e) {
+				if (labelButton.getImage() != activeImage) {
+					labelButton.setImage(activeImage);
+				}
+			}
+
+			public void mouseExit(MouseEvent e) {
+				if (labelButton.getImage() != inactiveImage) {
+					labelButton.setImage(inactiveImage);
+				}
+			}
+
+			public void mouseHover(MouseEvent e) {
+			}
+		});
+
+		labelButton.getAccessible().addAccessibleListener(new AccessibleAdapter() {
+			@Override
+			public void getName(AccessibleEvent e) {
+				e.result = accessibilityText;
+			}
+		});
+		labelButton.getAccessible().addAccessibleControlListener(new AccessibleControlAdapter() {
+			@Override
+			public void getRole(AccessibleControlEvent e) {
+				e.detail = ACC.ROLE_PUSHBUTTON;
+			}
+		});
+		return labelButton;
+	}
+
+	public void addSelectionListener(SelectionListener listener) {
+		textControl.addSelectionListener(listener);
+		selectionListeners.add(listener);
+	}
+
+	public void removeSelectionListener(SelectionListener listener) {
+		textControl.removeSelectionListener(listener);
+		selectionListeners.remove(listener);
+	}
+
+	public void addModifyListener(ModifyListener listener) {
+		textControl.addModifyListener(listener);
+	}
+
+	public void removeModifyListener(ModifyListener listener) {
+		textControl.removeModifyListener(listener);
+	}
+
+	private void notifySelectionChanged(int detail) {
+		if (useNativeSearchField != null && useNativeSearchField) {
+			// notification should happen via the widgets selection listener
+			return;
+		}
+		Event event = new Event();
+		event.detail = detail;
+		event.widget = textControl;
+		event.display = textControl.getDisplay();
+
+		SelectionEvent e = new SelectionEvent(event);
+		for (Object element : selectionListeners) {
+			((SelectionListener) element).widgetDefaultSelected(e);
+		}
+	}
+
+	private void updateButtonVisibilityAndEnablement() {
+		if (textControl != null && !textControl.isDisposed()) {
+			boolean hasText = textControl.getText().length() > 0;
+
+			setFindButtonVisibility(!(hasText && automaticFind));
+			setClearButtonVisibility(hasText);
+		}
+	}
+
+	private void setFindButtonVisibility(boolean visible) {
+		if (findControl != null && !findControl.isDisposed()) {
+			findControl.setVisible(visible);
+			if (findControl.getLayoutData() instanceof GridData) {
+				((GridData) findControl.getLayoutData()).exclude = !visible;
+				findControl.getParent().layout();
+			}
+		}
+	}
+
+	private void setClearButtonVisibility(boolean visible) {
+		if (clearControl != null && !clearControl.isDisposed()) {
+			clearControl.setVisible(visible);
+			if (clearControl.getLayoutData() instanceof GridData) {
+				((GridData) clearControl.getLayoutData()).exclude = !visible;
+				clearControl.getParent().layout();
+			}
+		}
+	}
+
+	public Text getTextControl() {
+		return textControl;
+	}
+
+	@Override
+	public void setBackground(Color color) {
+		if (useNativeSearchField != null && useNativeSearchField) {
+			super.setBackground(color);
+		}
+	}
+
+	public Collection<String> getSearchHistory() {
+		return Collections.unmodifiableCollection(searchHistory);
+	}
+
+	void addToSearchHistory(String searchString) {
+		if (searchString != null && searchString.trim().length() > 0) {
+			searchHistory.remove(searchString);
+			searchHistory.add(searchString);
+		}
+	}
+
+	public void saveState(IMemento memento) {
+		if (memento == null) {
+			return;
+		}
+
+		IMemento rootMemento = memento.createChild(FIND_MEMENTO_TYPE);
+		int i = 0;
+		for (String text : searchHistory) {
+			IMemento child = rootMemento.createChild(FIND_MEMENTO_ELEMENT);
+			child.putString(FIND_TEXT_MEMENTO_ELEMENT, text);
+			i++;
+			if (i > MAX_HISTORY_ITEMS) {
+				break;
+			}
+		}
+	}
+
+	public void restoreState(IMemento memento) {
+		if (memento == null) {
+			return;
+		}
+		List<String> history = new ArrayList<String>();
+
+		IMemento rootMemento = memento.getChild(FIND_MEMENTO_TYPE);
+		if (rootMemento != null) {
+			IMemento[] children = rootMemento.getChildren(FIND_MEMENTO_ELEMENT);
+			if (children != null && children.length > 0) {
+				for (IMemento child : children) {
+					String historyItem = child.getString(FIND_TEXT_MEMENTO_ELEMENT);
+					// add to the end of the list
+					history.add(history.size(), historyItem);
+				}
+			}
+		}
+		if (history != null) {
+			searchHistory = history;
+		}
+	}
+}
commit a300912eb83c41982ef4d21d4e3045e3a407e101
Author: spingel <>
Date:   Tue Apr 20 16:48:59 2010 +0000

    bug 304843 - [discovery] ensure sufficient extensibility for Eclipse marketplace client

7	5	bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/FilteredViewer.java
diff --git a/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/FilteredViewer.java b/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/FilteredViewer.java
index c1859b0..e37239f 100644
--- a/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/FilteredViewer.java
+++ b/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/FilteredViewer.java
@@ -96,11 +96,13 @@ public abstract class FilteredViewer {
 		label.setText(Messages.ConnectorDiscoveryWizardMainPage_filterLabel);
 
 		filterText = new TextSearchControl(parent, automaticFind);
-		filterText.addModifyListener(new ModifyListener() {
-			public void modifyText(ModifyEvent e) {
-				filterTextChanged();
-			}
-		});
+		if (automaticFind) {
+			filterText.addModifyListener(new ModifyListener() {
+				public void modifyText(ModifyEvent e) {
+					filterTextChanged();
+				}
+			});
+		}
 		filterText.addSelectionListener(new SelectionAdapter() {
 			@Override
 			public void widgetDefaultSelected(SelectionEvent e) {
commit 526aefb4d21f0d62a1bb66f3bf44bec3b9a1ecd9
Author: spingel <>
Date:   Wed Apr 21 22:51:55 2010 +0000

    bug 304843 - [discovery] ensure sufficient extensibility for Eclipse marketplace client

3	0	bundles/org.eclipse.equinox.p2.discovery.compatibility/src/org/eclipse/equinox/internal/p2/discovery/compatibility/SiteVerifier.java
6	5	bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/ControlListViewer.java
13	2	bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/FilteredViewer.java
20	18	bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/wizards/CatalogViewer.java
2	2	bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/wizards/messages.properties
diff --git a/bundles/org.eclipse.equinox.p2.discovery.compatibility/src/org/eclipse/equinox/internal/p2/discovery/compatibility/SiteVerifier.java b/bundles/org.eclipse.equinox.p2.discovery.compatibility/src/org/eclipse/equinox/internal/p2/discovery/compatibility/SiteVerifier.java
index bceca3f..a543bdb 100644
--- a/bundles/org.eclipse.equinox.p2.discovery.compatibility/src/org/eclipse/equinox/internal/p2/discovery/compatibility/SiteVerifier.java
+++ b/bundles/org.eclipse.equinox.p2.discovery.compatibility/src/org/eclipse/equinox/internal/p2/discovery/compatibility/SiteVerifier.java
@@ -37,6 +37,9 @@ public class SiteVerifier {
 
 		for (CatalogItem descriptor : catalog.getItems()) {
 			String url = descriptor.getSiteUrl();
+			if (url == null) {
+				continue;
+			}
 			if (!url.endsWith("/")) { //$NON-NLS-1$
 				url += "/"; //$NON-NLS-1$
 			}
diff --git a/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/ControlListViewer.java b/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/ControlListViewer.java
index ef38792..c5f3ae7 100644
--- a/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/ControlListViewer.java
+++ b/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/ControlListViewer.java
@@ -52,13 +52,14 @@ public abstract class ControlListViewer extends StructuredViewer {
 		scrolled.getVerticalBar().setIncrement(height * 2);
 		scrolled.setExpandHorizontal(true);
 		scrolled.setExpandVertical(true);
+		scrolled.setShowFocusedControl(true);
 
 		control = new Composite(scrolled, SWT.NONE) {
-			@Override
-			public boolean setFocus() {
-				forceFocus();
-				return true;
-			}
+//			@Override
+//			public boolean setFocus() {
+//				forceFocus();
+//				return true;
+//			}
 
 			@Override
 			public void setVisible(boolean visible) {
diff --git a/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/FilteredViewer.java b/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/FilteredViewer.java
index e37239f..b44c13b 100644
--- a/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/FilteredViewer.java
+++ b/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/util/FilteredViewer.java
@@ -94,6 +94,7 @@ public abstract class FilteredViewer {
 	private void doCreateFindControl(Composite parent) {
 		Label label = new Label(parent, SWT.NONE);
 		label.setText(Messages.ConnectorDiscoveryWizardMainPage_filterLabel);
+		GridDataFactory.swtDefaults().align(SWT.BEGINNING, SWT.CENTER).applyTo(label);
 
 		filterText = new TextSearchControl(parent, automaticFind);
 		if (automaticFind) {
@@ -114,7 +115,7 @@ public abstract class FilteredViewer {
 				}
 			}
 		});
-		GridDataFactory.fillDefaults().grab(true, false).applyTo(filterText);
+		GridDataFactory.fillDefaults().grab(true, false).align(SWT.FILL, SWT.CENTER).applyTo(filterText);
 	}
 
 	private void doCreateHeader() {
@@ -175,7 +176,10 @@ public abstract class FilteredViewer {
 		viewer.refresh(true);
 	}
 
-	void filterTextChanged() {
+	/**
+	 * Invoked whenever the filter text is changed or the user otherwise causes the filter text to change.
+	 */
+	protected void filterTextChanged() {
 		if (refreshJob == null) {
 			refreshJob = doCreateRefreshJob();
 		} else {
@@ -184,6 +188,13 @@ public abstract class FilteredViewer {
 		refreshJob.schedule(refreshJobDelay);
 	}
 
+	/**
+	 * Provides the text string of the search widget.
+	 */
+	protected String getFilterText() {
+		return filterText == null ? null : filterText.getTextControl().getText();
+	}
+
 	public Control getControl() {
 		return container;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/wizards/CatalogViewer.java b/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/wizards/CatalogViewer.java
index 6bf54ec..fceb2dd 100644
--- a/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/wizards/CatalogViewer.java
+++ b/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/wizards/CatalogViewer.java
@@ -254,7 +254,7 @@ public class CatalogViewer extends FilteredViewer {
 		}
 	}
 
-	private IStatus computeStatus(InvocationTargetException e, String message) {
+	protected IStatus computeStatus(InvocationTargetException e, String message) {
 		Throwable cause = e.getCause();
 		if (cause.getMessage() != null) {
 			message = NLS.bind(Messages.ConnectorDiscoveryWizardMainPage_message_with_cause, message, cause.getMessage());
@@ -587,28 +587,30 @@ public class CatalogViewer extends FilteredViewer {
 		}
 		if (catalog != null) {
 			catalogUpdated(wasCancelled, wasError);
-			if (configuration.isVerifyUpdateSiteAvailability() && !catalog.getItems().isEmpty()) {
-				try {
-					context.run(true, true, new IRunnableWithProgress() {
-						public void run(IProgressMonitor monitor) {
-							SiteVerifier verifier = new SiteVerifier(catalog);
-							verifier.verifySiteAvailability(monitor);
-						}
-					});
-				} catch (InvocationTargetException e) {
-					IStatus status = computeStatus(e, Messages.ConnectorDiscoveryWizardMainPage_unexpectedException);
-					StatusManager.getManager().handle(status, StatusManager.SHOW | StatusManager.BLOCK | StatusManager.LOG);
-					wasError = true;
-				} catch (InterruptedException e) {
-					// cancelled by user so nothing to do here.
-					wasCancelled = true;
-				}
-			}
+			verifyUpdateSiteAvailability();
 		}
 		// help UI tests
 		viewer.setData("discoveryComplete", "true"); //$NON-NLS-1$//$NON-NLS-2$
 	}
 
+	protected void verifyUpdateSiteAvailability() {
+		if (configuration.isVerifyUpdateSiteAvailability() && !catalog.getItems().isEmpty()) {
+			try {
+				context.run(true, true, new IRunnableWithProgress() {
+					public void run(IProgressMonitor monitor) {
+						SiteVerifier verifier = new SiteVerifier(catalog);
+						verifier.verifySiteAvailability(monitor);
+					}
+				});
+			} catch (InvocationTargetException e) {
+				IStatus status = computeStatus(e, Messages.ConnectorDiscoveryWizardMainPage_unexpectedException);
+				StatusManager.getManager().handle(status, StatusManager.SHOW | StatusManager.BLOCK | StatusManager.LOG);
+			} catch (InterruptedException e) {
+				// cancelled by user so nothing to do here.
+			}
+		}
+	}
+
 	private void updateState() {
 		setComplete(!checkedItems.isEmpty());
 		selectionProvider.setSelection(new StructuredSelection(getCheckedItems()));
diff --git a/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/wizards/messages.properties b/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/wizards/messages.properties
index bdcde96..6eb5285 100644
--- a/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/wizards/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.ui.discovery/src/org/eclipse/equinox/internal/p2/ui/discovery/wizards/messages.properties
@@ -12,7 +12,7 @@ ConnectorDescriptorToolTip_detailsLink=<a>Learn more</a>
 ConnectorDescriptorToolTip_detailsLink_tooltip=Open {0} in an external browser
 ConnectorDiscoveryWizard_installProblems=Problems occurred while performing installation: {0}
 ConnectorDiscoveryWizardMainPage_connectorDiscovery=Install Extensions
-ConnectorDiscoveryWizardMainPage_filterLabel=Find:
+ConnectorDiscoveryWizardMainPage_filterLabel=F&ind:
 ConnectorDiscoveryWizardMainPage_message_with_cause={0}: {1}
 ConnectorDiscoveryWizardMainPage_noConnectorsFound=No Extensions Found
 ConnectorDiscoveryWizardMainPage_noConnectorsFound_description=Discovery completed without finding any extensions.  Please check your network connection and try again.
@@ -28,7 +28,7 @@ DiscoveryItem_Connector_already_installed_Error_Message={0} is already installed
 DiscoveryItem_Connector_already_installed_Error_Title=Install Extension
 DiscoveryItem_Extension_installed={0} (installed)
 DiscoveryViewer_Certification_Label0=by {0}, {1}, <a>Certified</a>
-DiscoveryViewer_Show_Installed=Show Installed
+DiscoveryViewer_Show_Installed=Show &Installed
 DiscoveryWizard_Install_Window_Title=Install
 InstallConnectorsJob_commaSeparator=, 
 InstallConnectorsJob_connectorsNotAvailable=The following extensions are not available: {0}

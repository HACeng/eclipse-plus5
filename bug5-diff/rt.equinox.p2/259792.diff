commit 65d79aac71f140e966b59fcfca4c9f1062d64060
Author: Andrew Niefer <aniefer>
Date:   Fri Feb 13 16:18:21 2009 +0000

    bug 259792 - reuse repos

27	1	bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepository.java
28	1	bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/CompositeMetadataRepository.java
19	20	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/AbstractPublisherApplication.java
79	0	bundles/org.eclipse.equinox.p2.publisher/src_ant/org/eclipse/equinox/internal/p2/publisher/ant/AbstractPublishTask.java
diff --git a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepository.java b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepository.java
index 9651f4b..72a4362 100644
--- a/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepository.java
+++ b/bundles/org.eclipse.equinox.p2.artifact.repository/src/org/eclipse/equinox/internal/p2/artifact/repository/CompositeArtifactRepository.java
@@ -39,7 +39,33 @@ public class CompositeArtifactRepository extends AbstractArtifactRepository impl
 
 	private ArrayList childrenURIs = new ArrayList();
 
-	private IArtifactRepositoryManager getManager() {
+	/**
+	 * Create a Composite repository in memory.
+	 * @return the repository or null if unable to create one
+	 */
+	public static CompositeArtifactRepository createMemoryComposite() {
+		IArtifactRepositoryManager manager = getManager();
+		if (manager != null) {
+			try {
+				//create a unique URI
+				long time = System.currentTimeMillis();
+				URI repositoryURI = new URI("memory:" + String.valueOf(time)); //$NON-NLS-1$
+				while (manager.contains(repositoryURI))
+					repositoryURI = new URI("memory:" + String.valueOf(++time)); //$NON-NLS-1$
+
+				CompositeArtifactRepository result = (CompositeArtifactRepository) manager.createRepository(repositoryURI, repositoryURI.toString(), IArtifactRepositoryManager.TYPE_COMPOSITE_REPOSITORY, null);
+				manager.removeRepository(repositoryURI);
+				return result;
+			} catch (ProvisionException e) {
+				// just return null
+			} catch (URISyntaxException e) {
+				// just return null
+			}
+		}
+		return null;
+	}
+
+	static private IArtifactRepositoryManager getManager() {
 		return (IArtifactRepositoryManager) ServiceHelper.getService(Activator.getContext(), IArtifactRepositoryManager.class.getName());
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/CompositeMetadataRepository.java b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/CompositeMetadataRepository.java
index 23bd7ce..4b8829f 100644
--- a/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/CompositeMetadataRepository.java
+++ b/bundles/org.eclipse.equinox.p2.metadata.repository/src/org/eclipse/equinox/internal/p2/metadata/repository/CompositeMetadataRepository.java
@@ -13,6 +13,7 @@ package org.eclipse.equinox.internal.p2.metadata.repository;
 
 import java.io.*;
 import java.net.URI;
+import java.net.URISyntaxException;
 import java.util.*;
 import java.util.jar.JarEntry;
 import java.util.jar.JarOutputStream;
@@ -40,7 +41,33 @@ public class CompositeMetadataRepository extends AbstractMetadataRepository impl
 
 	private ArrayList childrenURIs = new ArrayList();
 
-	private IMetadataRepositoryManager getManager() {
+	/**
+	 * Create a Composite repository in memory.
+	 * @return the repository or null if unable to create one
+	 */
+	public static CompositeMetadataRepository createMemoryComposite() {
+		IMetadataRepositoryManager manager = getManager();
+		if (manager != null) {
+			try {
+				//create a unique opaque URI 
+				long time = System.currentTimeMillis();
+				URI repositoryURI = new URI("memory:" + String.valueOf(time)); //$NON-NLS-1$
+				while (manager.contains(repositoryURI))
+					repositoryURI = new URI("memory:" + String.valueOf(++time)); //$NON-NLS-1$
+
+				CompositeMetadataRepository result = (CompositeMetadataRepository) manager.createRepository(repositoryURI, repositoryURI.toString(), IMetadataRepositoryManager.TYPE_COMPOSITE_REPOSITORY, null);
+				manager.removeRepository(repositoryURI);
+				return result;
+			} catch (ProvisionException e) {
+				// just return null
+			} catch (URISyntaxException e) {
+				// just return null
+			}
+		}
+		return null;
+	}
+
+	static private IMetadataRepositoryManager getManager() {
 		return (IMetadataRepositoryManager) ServiceHelper.getService(Activator.getContext(), IMetadataRepositoryManager.class.getName());
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/AbstractPublisherApplication.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/AbstractPublisherApplication.java
index f794d36..192724b 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/AbstractPublisherApplication.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/AbstractPublisherApplication.java
@@ -133,16 +133,16 @@ public abstract class AbstractPublisherApplication implements IApplication {
 		if (list == null || list.length == 0)
 			return null;
 
-		CompositeArtifactRepository result = null;
-		try {
-			URI repositoryURI = new URI("memory:"); //$NON-NLS-1$
-			result = (CompositeArtifactRepository) defaultArtifactManager.createRepository(repositoryURI, "artifact name", IArtifactRepositoryManager.TYPE_COMPOSITE_REPOSITORY, null); //$NON-NLS-1$
-			for (int i = 0; i < list.length; i++)
-				result.addChild(new URI(list[i]));
-		} catch (ProvisionException e) {
-			// TODO log something here
-		} catch (URISyntaxException e) {
-			// TODO log something here
+		CompositeArtifactRepository result = CompositeArtifactRepository.createMemoryComposite();
+		if (result != null) {
+			for (int i = 0; i < list.length; i++) {
+				try {
+					result.addChild(URIUtil.fromString(list[i]));
+				} catch (URISyntaxException e) {
+					// TODO Auto-generated catch block
+					e.printStackTrace();
+				}
+			}
 		}
 		return result;
 	}
@@ -152,16 +152,15 @@ public abstract class AbstractPublisherApplication implements IApplication {
 		if (list == null || list.length == 0)
 			return null;
 
-		CompositeMetadataRepository result = null;
-		try {
-			URI repositoryURI = new URI("memory:"); //$NON-NLS-1$
-			result = (CompositeMetadataRepository) defaultMetadataManager.createRepository(repositoryURI, "artifact name", IMetadataRepositoryManager.TYPE_COMPOSITE_REPOSITORY, null); //$NON-NLS-1$
-			for (int i = 0; i < list.length; i++)
-				result.addChild(new URI(list[i]));
-		} catch (ProvisionException e) {
-			// TODO log something here
-		} catch (URISyntaxException e) {
-			// TODO log something here
+		CompositeMetadataRepository result = CompositeMetadataRepository.createMemoryComposite();
+		if (result != null) {
+			for (int i = 0; i < list.length; i++) {
+				try {
+					result.addChild(URIUtil.fromString(list[i]));
+				} catch (URISyntaxException e) {
+					// TODO Auto-generated catch block
+				}
+			}
 		}
 		return result;
 	}
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src_ant/org/eclipse/equinox/internal/p2/publisher/ant/AbstractPublishTask.java b/bundles/org.eclipse.equinox.p2.publisher/src_ant/org/eclipse/equinox/internal/p2/publisher/ant/AbstractPublishTask.java
index f923fc4..50b5fb8 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src_ant/org/eclipse/equinox/internal/p2/publisher/ant/AbstractPublishTask.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src_ant/org/eclipse/equinox/internal/p2/publisher/ant/AbstractPublishTask.java
@@ -10,14 +10,68 @@ package org.eclipse.equinox.internal.p2.publisher.ant;
 
 import java.net.URI;
 import java.net.URISyntaxException;
+import java.util.*;
 import org.apache.tools.ant.Task;
 import org.eclipse.core.runtime.URIUtil;
+import org.eclipse.equinox.internal.p2.artifact.repository.CompositeArtifactRepository;
+import org.eclipse.equinox.internal.p2.metadata.repository.CompositeMetadataRepository;
 import org.eclipse.equinox.internal.provisional.p2.core.ProvisionException;
 import org.eclipse.equinox.p2.publisher.*;
 
 public abstract class AbstractPublishTask extends Task {
 	protected static final String ANT_PROPERTY_PREFIX = "${"; //$NON-NLS-1$
 
+	/**
+	 * Support nested repository elements that looking something like
+	 *    <repo location="file:/foo" metadata="true" artifact="true" />
+	 * Both metadata and artifact are optional:
+	 *  1) if neither are set, the repo is used for both metadata and artifacts
+	 *  2) if only one is true, the repo is that type and not the other 
+	 */
+	static public class RepoEntry {
+		private URI repoLocation;
+		private Boolean metadata = null;
+		private Boolean artifact = null;
+
+		/**
+		 * If not set, default is true if we aren't set as an artifact repo 
+		 */
+		public boolean isMetadataRepository() {
+			if (metadata != null)
+				return metadata.booleanValue();
+			return !Boolean.TRUE.equals(artifact);
+		}
+
+		/**
+		 * If not set, default is true if we aren't set as an metadata repo 
+		 */
+		public boolean isArtifactRepository() {
+			if (artifact != null)
+				return artifact.booleanValue();
+			return !Boolean.TRUE.equals(metadata);
+		}
+
+		public URI getRepositoryLocation() {
+			return repoLocation;
+		}
+
+		public void setLocation(String location) {
+			try {
+				repoLocation = URIUtil.fromString(location);
+			} catch (URISyntaxException e) {
+				throw new IllegalArgumentException("Repository location (" + location + ") must be a URL."); //$NON-NLS-1$ //$NON-NLS-2$
+			}
+		}
+
+		public void setMetadata(boolean metadata) {
+			this.metadata = Boolean.valueOf(metadata);
+		}
+
+		public void setArtifact(boolean artifact) {
+			this.artifact = Boolean.valueOf(artifact);
+		}
+	}
+
 	protected boolean compress = false;
 	protected boolean reusePackedFiles = false;
 	protected boolean append = true;
@@ -27,10 +81,30 @@ public abstract class AbstractPublishTask extends Task {
 	protected URI artifactLocation;
 	protected String artifactRepoName;
 	protected PublisherInfo provider = null;
+	protected List contextRepositories = new ArrayList();
 
 	protected void initializeRepositories(PublisherInfo info) throws ProvisionException {
 		info.setArtifactRepository(Publisher.createArtifactRepository(artifactLocation, artifactRepoName, append, compress, reusePackedFiles));
 		info.setMetadataRepository(Publisher.createMetadataRepository(metadataLocation, metadataRepoName, append, compress));
+
+		if (contextRepositories.size() > 0) {
+			CompositeMetadataRepository contextMetadata = CompositeMetadataRepository.createMemoryComposite();
+			CompositeArtifactRepository contextArtifact = CompositeArtifactRepository.createMemoryComposite();
+
+			for (Iterator iterator = contextRepositories.iterator(); iterator.hasNext();) {
+				RepoEntry entry = (RepoEntry) iterator.next();
+				if (contextMetadata != null && entry.isMetadataRepository())
+					contextMetadata.addChild(entry.getRepositoryLocation());
+				if (contextArtifact != null && entry.isArtifactRepository())
+					contextArtifact.addChild(entry.getRepositoryLocation());
+			}
+
+			if (contextMetadata != null && contextMetadata.getChildren().size() > 0)
+				info.setContextMetadataRepository(contextMetadata);
+
+			if (contextArtifact != null && contextArtifact.getChildren().size() > 0)
+				info.setContextArtifactRepository(contextArtifact);
+		}
 	}
 
 	protected PublisherInfo getInfo() {
@@ -91,4 +165,9 @@ public abstract class AbstractPublishTask extends Task {
 		setArtifactRepositoryName(name);
 		setMetadataRepositoryName(name);
 	}
+
+	// nested <contextRepository/> elements
+	public void addConfiguredContextRepository(RepoEntry repo) {
+		contextRepositories.add(repo);
+	}
 }
commit 764243cfd5e4c3bfe362aa39c618681d764ff6ad
Author: Andrew Niefer <aniefer>
Date:   Tue Apr 14 21:18:39 2009 +0000

    bug 259792 - reuse IUs

5	2	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/internal/p2/publisher/Messages.java
5	1	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/internal/p2/publisher/messages.properties
25	18	bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/FeaturesAction.java
1	0	bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/FeaturesActionTest.java
6	5	bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/RemoteFeaturesAction.java
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/internal/p2/publisher/Messages.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/internal/p2/publisher/Messages.java
index 2bb9a42..7f9ba28 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/internal/p2/publisher/Messages.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/internal/p2/publisher/Messages.java
@@ -20,11 +20,14 @@ public class Messages extends NLS {
 	public static String exception_errorReadingManifest;
 	public static String exception_errorLoadingManifest;
 	public static String exception_noPluginConverter;
-
+	public static String exception_errorPublishingArtifacts;
 	public static String exception_noArtifactRepo;
 	public static String exception_noMetadataRepo;
-
+	public static String exception_errorLoadingProperties;
 	public static String exception_noBundlesOrLocations;
+	public static String exception_noFeaturesOrLocations;
+	public static String exception_invalidSiteReference;
+	public static String exception_invalidSiteReferenceInFeature;
 
 	public static String message_generatingMetadata;
 	public static String message_generationCompleted;
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/internal/p2/publisher/messages.properties b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/internal/p2/publisher/messages.properties
index ff43c29..37e3e64 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/internal/p2/publisher/messages.properties
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/internal/p2/publisher/messages.properties
@@ -15,10 +15,14 @@ exception_metadataRepoNotWritable = Metadata repository not writable: {0}.
 exception_errorReadingManifest = An error occurred while parsing the bundle manifest {0}: {1}.
 exception_errorLoadingManifest = An error occurred while loading the manifest {0}.
 exception_noBundlesOrLocations=No bundles or locations provided.
+exception_noFeaturesOrLocations=No features or locations provided.
+exception_errorPublishingArtifacts = An error occured while publishing artifacts.
+exception_errorLoadingProperties = An error occured while loading the properties file {0}.
 exception_noPluginConverter=Unable to aquire PluginConverter service during generation for: {0}.
 exception_noArtifactRepo=An artifact repository must be specified in order to publish artifacts.
 exception_noMetadataRepo=A metadata repository must be specified.
-
+exception_invalidSiteReference=Invalid site reference: {0}
+exception_invalidSiteReferenceInFeature=Invalid site reference {0} in feature {1}.
 message_generatingMetadata = Generating metadata for {0}.
 message_generationCompleted = Generation completed with success [{0} seconds].
 message_noSimpleconfigurator = Could not find simpleconfigurator bundle.
diff --git a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/FeaturesAction.java b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/FeaturesAction.java
index ecc34c3..3c9eb66 100644
--- a/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/FeaturesAction.java
+++ b/bundles/org.eclipse.equinox.p2.publisher/src/org/eclipse/equinox/p2/publisher/eclipse/FeaturesAction.java
@@ -20,8 +20,7 @@ import org.eclipse.core.runtime.*;
 import org.eclipse.equinox.internal.p2.core.helpers.FileUtils;
 import org.eclipse.equinox.internal.p2.core.helpers.LogHelper;
 import org.eclipse.equinox.internal.p2.metadata.ArtifactKey;
-import org.eclipse.equinox.internal.p2.publisher.Activator;
-import org.eclipse.equinox.internal.p2.publisher.FileSetDescriptor;
+import org.eclipse.equinox.internal.p2.publisher.*;
 import org.eclipse.equinox.internal.p2.publisher.eclipse.FeatureParser;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.ArtifactDescriptor;
 import org.eclipse.equinox.internal.provisional.p2.artifact.repository.IArtifactDescriptor;
@@ -34,6 +33,7 @@ import org.eclipse.equinox.internal.provisional.p2.metadata.repository.IMetadata
 import org.eclipse.equinox.internal.provisional.p2.repository.IRepository;
 import org.eclipse.equinox.p2.publisher.*;
 import org.eclipse.equinox.spi.p2.publisher.PublisherHelper;
+import org.eclipse.osgi.util.NLS;
 
 /**
  * Publish IUs for all of the features in the given set of locations.  The locations can
@@ -385,31 +385,39 @@ public class FeaturesAction extends AbstractPublisherAction {
 		}
 	}
 
-	protected void generateFeatureIUs(Feature[] featureList, IPublisherResult result, IPublisherInfo publisherInfo) {
+	protected void generateFeatureIUs(Feature[] featureList, IPublisherResult result) {
 		// Build Feature IUs, and add them to any corresponding categories
 		for (int i = 0; i < featureList.length; i++) {
 			Feature feature = featureList[i];
 			//first gather any advice that might help us
-			createBundleShapeAdvice(feature, publisherInfo);
-			createAdviceFileAdvice(feature, publisherInfo);
+			createBundleShapeAdvice(feature, info);
+			createAdviceFileAdvice(feature, info);
+
+			ArrayList childIUs = new ArrayList();
+
+			IInstallableUnit featureJarIU = queryForIU(result, getTransformedId(feature.getId(), false, false), new Version(feature.getVersion()));
+			if (featureJarIU == null)
+				featureJarIU = generateFeatureJarIU(feature, info);
 
-			ArrayList childIUs = generateRootFileIUs(feature, result, publisherInfo);
-			IInstallableUnit featureJarIU = generateFeatureJarIU(feature, publisherInfo);
 			if (featureJarIU != null) {
-				publishFeatureArtifacts(feature, featureJarIU, publisherInfo);
+				publishFeatureArtifacts(feature, featureJarIU, info);
 				result.addIU(featureJarIU, IPublisherResult.NON_ROOT);
 				childIUs.add(featureJarIU);
 			}
 
-			IInstallableUnit groupIU = createGroupIU(feature, childIUs, publisherInfo);
+			IInstallableUnit groupIU = queryForIU(result, getGroupId(feature.getId()), new Version(feature.getVersion()));
+			if (groupIU == null) {
+				childIUs.addAll(generateRootFileIUs(feature, result, info));
+				groupIU = createGroupIU(feature, childIUs, info);
+			}
 			if (groupIU != null) {
 				result.addIU(groupIU, IPublisherResult.ROOT);
-				InstallableUnitDescription[] others = processAdditionalInstallableUnitsAdvice(groupIU, publisherInfo);
+				InstallableUnitDescription[] others = processAdditionalInstallableUnitsAdvice(groupIU, info);
 				for (int iuIndex = 0; others != null && iuIndex < others.length; iuIndex++) {
 					result.addIU(MetadataFactory.createInstallableUnit(others[iuIndex]), IPublisherResult.ROOT);
 				}
 			}
-			generateSiteReferences(feature, result, publisherInfo);
+			generateSiteReferences(feature, result, info);
 		}
 	}
 
@@ -475,9 +483,7 @@ public class FeaturesAction extends AbstractPublisherAction {
 			metadataRepo.addReference(associateLocation, nickname, IRepository.TYPE_METADATA, IRepository.NONE);
 			metadataRepo.addReference(associateLocation, nickname, IRepository.TYPE_ARTIFACT, IRepository.NONE);
 		} catch (URISyntaxException e) {
-			String message = "Invalid site reference: " + location; //$NON-NLS-1$
-			if (featureId != null)
-				message = message + " in feature: " + featureId; //$NON-NLS-1$
+			String message = featureId != null ? NLS.bind(Messages.exception_invalidSiteReference, location) : NLS.bind(Messages.exception_invalidSiteReferenceInFeature, featureId);
 			LogHelper.log(new Status(IStatus.ERROR, Activator.ID, message));
 		}
 	}
@@ -635,7 +641,7 @@ public class FeaturesAction extends AbstractPublisherAction {
 				}
 			}
 		} catch (IOException e) {
-			LogHelper.log(new Status(IStatus.ERROR, Activator.ID, "Error publishing artifacts", e)); //$NON-NLS-1$
+			LogHelper.log(new Status(IStatus.ERROR, Activator.ID, Messages.exception_errorPublishingArtifacts, e));
 		}
 		return props;
 	}
@@ -644,16 +650,17 @@ public class FeaturesAction extends AbstractPublisherAction {
 		try {
 			props.load(new BufferedInputStream(in));
 		} catch (IOException e) {
-			LogHelper.log(new Status(IStatus.ERROR, Activator.ID, "Error parsing " + file, e)); //$NON-NLS-1$
+			LogHelper.log(new Status(IStatus.ERROR, Activator.ID, NLS.bind(Messages.exception_errorLoadingProperties, file), e));
 		}
 	}
 
 	public IStatus perform(IPublisherInfo publisherInfo, IPublisherResult results, IProgressMonitor monitor) {
 		if (features == null && locations == null)
-			throw new IllegalStateException("No features or locations provided");
+			throw new IllegalStateException(Messages.exception_noFeaturesOrLocations);
+		this.info = publisherInfo;
 		if (features == null)
 			features = getFeatures(expandLocations(locations));
-		generateFeatureIUs(features, results, publisherInfo);
+		generateFeatureIUs(features, results);
 		return Status.OK_STATUS;
 	}
 
diff --git a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/FeaturesActionTest.java b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/FeaturesActionTest.java
index 5a4b5a3..b4d9a5c 100644
--- a/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/FeaturesActionTest.java
+++ b/bundles/org.eclipse.equinox.p2.tests/src/org/eclipse/equinox/p2/tests/publisher/actions/FeaturesActionTest.java
@@ -183,6 +183,7 @@ public class FeaturesActionTest extends ActionTest {
 		expect(publisherInfo.getArtifactOptions()).andReturn(IPublisherInfo.A_INDEX | IPublisherInfo.A_OVERWRITE | IPublisherInfo.A_PUBLISH).anyTimes();
 		expect(publisherInfo.getArtifactRepository()).andReturn(artifactRepository).anyTimes();
 		expect(publisherInfo.getMetadataRepository()).andReturn(metadataRepository).anyTimes();
+		expect(publisherInfo.getContextMetadataRepository()).andReturn(null).anyTimes();
 
 		//capture any touchpoint advice, and return the captured advice when the action asks for it
 		publisherInfo.addAdvice(and(isA(ITouchpointAdvice.class), capture(tpAdvice)));
diff --git a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/RemoteFeaturesAction.java b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/RemoteFeaturesAction.java
index 0bde7bc..64e568e 100644
--- a/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/RemoteFeaturesAction.java
+++ b/bundles/org.eclipse.equinox.p2.updatesite/src/org/eclipse/equinox/internal/p2/updatesite/RemoteFeaturesAction.java
@@ -34,10 +34,11 @@ public class RemoteFeaturesAction extends FeaturesAction {
 		throw new IllegalArgumentException();
 	}
 
-	public IStatus perform(IPublisherInfo info, IPublisherResult results, IProgressMonitor monitor) {
+	public IStatus perform(IPublisherInfo publisherInfo, IPublisherResult results, IProgressMonitor monitor) {
 		try {
+			this.info = publisherInfo;
 			features = updateSite.loadFeatures(monitor);
-			return super.perform(info, results, monitor);
+			return super.perform(publisherInfo, results, monitor);
 		} catch (ProvisionException e) {
 			return new Status(IStatus.ERROR, Activator.ID, NLS.bind(Messages.Error_Generation, updateSite), e);
 		} catch (OperationCanceledException e) {
@@ -46,11 +47,11 @@ public class RemoteFeaturesAction extends FeaturesAction {
 
 	}
 
-	protected void generateFeatureIUs(Feature[] features, IPublisherResult result, IPublisherInfo info) {
+	protected void generateFeatureIUs(Feature[] featureList, IPublisherResult result) {
 		Properties extraProperties = new Properties();
 		extraProperties.put(IInstallableUnit.PROP_PARTIAL_IU, Boolean.TRUE.toString());
-		for (int i = 0; i < features.length; i++) {
-			Feature feature = features[i];
+		for (int i = 0; i < featureList.length; i++) {
+			Feature feature = featureList[i];
 			FeatureEntry[] featureEntries = feature.getEntries();
 			for (int j = 0; j < featureEntries.length; j++) {
 				FeatureEntry entry = featureEntries[j];
